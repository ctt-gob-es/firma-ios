//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/eclipse-workspace/Signers/src/es/gob/afirma/core/signers/der/DerValue.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_DerValue")
#ifdef RESTRICT_DerValue
#define INCLUDE_ALL_DerValue 0
#else
#define INCLUDE_ALL_DerValue 1
#endif
#undef RESTRICT_DerValue

#if !defined (EsGobAfirmaCoreSignersDerDerValue_) && (INCLUDE_ALL_DerValue || defined(INCLUDE_EsGobAfirmaCoreSignersDerDerValue))
#define EsGobAfirmaCoreSignersDerDerValue_

@class EsGobAfirmaCoreSignersDerBitArray;
@class EsGobAfirmaCoreSignersDerDerInputBuffer;
@class EsGobAfirmaCoreSignersDerDerInputStream;
@class EsGobAfirmaCoreSignersDerDerOutputStream;
@class EsGobAfirmaCoreSignersDerObjectIdentifier;
@class IOSByteArray;
@class JavaIoInputStream;
@class JavaMathBigInteger;

/*!
 @brief Represents a single DER-encoded value.DER encoding rules are a subset
  of the "Basic" Encoding Rules (BER), but they only support a single way
  ("Definite" encoding) to encode any given value.
 <P>All DER-encoded data are triples <em>{type, length, data}</em>.  This
  class represents such tagged values as they have been read (or constructed),
  and provides structured access to the encoded data. 
 <P>At this time, this class supports only a subset of the types of DER
  data encodings which are defined.  That subset is sufficient for parsing
  most X.509 certificates, and working with selected additional formats
  (such as PKCS #10 certificate requests, and some kinds of PKCS #7 data).
  A note with respect to T61/Teletex strings: From RFC 1617, section 4.1.3
  and RFC 5280, section 8, we assume that this kind of string will contain
  ISO-8859-1 characters only.
 @author David Brownell
 @author Amit Kapoor
 @author Hemma Prafullchandra
 */
@interface EsGobAfirmaCoreSignersDerDerValue : NSObject {
 @public
  /*!
   @brief The DER tag of the value; one of the tag_ constants.
   */
  jbyte tag_;
  EsGobAfirmaCoreSignersDerDerInputBuffer *buffer_;
  /*!
   @brief The DER-encoded data of the value, never null
   */
  EsGobAfirmaCoreSignersDerDerInputStream *data_;
}

#pragma mark Public

/*!
 @brief Creates a DerValue from a tag and some DER-encoded data.
 @param tag the DER type tag
 @param data the DER-encoded data
 */
- (instancetype)initWithByte:(jbyte)tag
               withByteArray:(IOSByteArray *)data;

/*!
 @brief Creates a string type DER value from a String object
 @param stringTag the tag for the DER value to create
 @param value the String object to use for the DER value
 @throw IOExceptionWhen it is a invalid value.
 */
- (instancetype)initWithByte:(jbyte)stringTag
                withNSString:(NSString *)value;

/*!
 @brief Get an ASN.1/DER encoded datum from a buffer.The
  entire buffer must hold exactly one datum, including
  its tag and length.
 @param buf buffer holding a single DER-encoded datum.
 @throw IOExceptionWhen fail to read data.
 */
- (instancetype)initWithByteArray:(IOSByteArray *)buf;

/*!
 @brief Get an ASN.1/DER encoded datum from part of a buffer.
 That part of the buffer must hold exactly one datum, including
  its tag and length.
 @param buf the buffer
 @param offset start point of the single DER-encoded dataum
 @param len how many bytes are in the encoded datum
 @throw IOExceptionWhen fail to read data.
 */
- (instancetype)initWithByteArray:(IOSByteArray *)buf
                          withInt:(jint)offset
                          withInt:(jint)len;

/*!
 @brief Get an ASN1/DER encoded datum from an input stream.The
  stream may have additional data following the encoded datum.
 In case of indefinite length encoded datum, the input stream
  must hold only one datum.
 @param inArg the input stream holding a single DER datum,   which may be followed by additional data
 @throw IOExceptionWhen fail to read data.
 */
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg;

/*!
 @brief Creates a PrintableString or UTF8string DER value from a string
 @param value the String object to use for the DER value
 @throw IOExceptionWhen it is a invalid string.
 */
- (instancetype)initWithNSString:(NSString *)value;

/*!
 @brief Create the tag of the attribute.
 @param tagClass the tag class type, one of UNIVERSAL, CONTEXT,                APPLICATION or PRIVATE
 @param form if true, the value is constructed, otherwise it  is primitive.
 @param val the tag value
 @return Tag value.
 */
+ (jbyte)createTagWithByte:(jbyte)tagClass
               withBoolean:(jboolean)form
                  withByte:(jbyte)val;

/*!
 @brief Encode an ASN1/DER encoded datum onto a DER output stream.
 @param outArg DER output stream
 @throw IOExceptionWhen fail to write data.
 */
- (void)encodeWithEsGobAfirmaCoreSignersDerDerOutputStream:(EsGobAfirmaCoreSignersDerDerOutputStream *)outArg;

/*!
 @brief Bitwise equality comparison.DER encoded values have a single
  encoding, so that bitwise equality of the encoded values is an
  efficient way to establish equivalence of the unencoded values.
 @param other the object being compared with this one
 @return <code>true</code> if the object is a DerValue with the same
  content.
 */
- (jboolean)equalsWithEsGobAfirmaCoreSignersDerDerValue:(EsGobAfirmaCoreSignersDerDerValue *)other;

/*!
 @brief Returns true iff the other object is a DER value which
  is bitwise equal to this one.
 @param other the object being compared with this one
 */
- (jboolean)isEqual:(id)other;

/*!
 @brief Returns the name component as a Java string, regardless of its
  encoding restrictions (ASCII, T61, Printable, IA5, BMP, UTF8).
 @return Name component.
 @throw IOExceptionWhen no it possible load data.
 */
- (NSString *)getAsString;

/*!
 @brief Returns an ASN.1 INTEGER value as a BigInteger.
 @return the integer held in this DER value as a BigInteger.
 @throw IOExceptionWhen next data is not a BigInteger value.
 */
- (JavaMathBigInteger *)getBigInteger;

/*!
 @brief Returns an ASN.1 BIT STRING value.The bit string must be byte-aligned.
 @return the bit string held in this value
 @throw IOExceptionWhen next data is not a BitString value.
 */
- (IOSByteArray *)getBitString;

/*!
 @brief Returns an ASN.1 BIT STRING value, with the tag assumed implicit
  based on the parameter.The bit string must be byte-aligned.
 @param tagImplicit if true, the tag is assumed implicit.
 @return the bit string held in this value
 @throw IOExceptionWhen the tag is incorrect.
 */
- (IOSByteArray *)getBitStringWithBoolean:(jboolean)tagImplicit;

/*!
 @brief Returns the ASN.1 BMP (Unicode) STRING value as a Java string.
 @return a string corresponding to the encoded BMPString held in
  this value
 @throw IOExceptionWhen no it possible load data.
 */
- (NSString *)getBMPString;

/*!
 @brief Returns an ASN.1 BOOLEAN
 @return the boolean held in this DER value
 @throw IOExceptionWhen next data is not a boolean value.
 */
- (jboolean)getBoolean;

- (EsGobAfirmaCoreSignersDerDerInputStream *)getData;

/*!
 @brief Helper routine to return all the bytes contained in the
  DerInputStream associated with this object.
 @return Content.
 @throw IOExceptionWhen no it possible load data.
 */
- (IOSByteArray *)getDataBytes;

/*!
 @brief Returns an ASN.1 ENUMERATED value.
 @return the integer held in this DER value.
 @throw IOExceptionWhen next data is not a Enumerated value.
 */
- (jint)getEnumerated;

/*!
 @brief Returns the ASN.1 GENERAL STRING value as a Java String.
 @return a string corresponding to the encoded GeneralString held in
  this value
 @throw IOExceptionWhen no it possible load data.
 */
- (NSString *)getGeneralString;

/*!
 @brief Returns an ASN.1 IA5 (ASCII) STRING value
 @return the ASCII string held in this value
 @throw IOExceptionWhen no it possible load data.
 */
- (NSString *)getIA5String;

/*!
 @brief Returns an ASN.1 INTEGER value as an integer.
 @return the integer held in this DER value.
 @throw IOExceptionWhen next data is not a Integer value.
 */
- (jint)getInteger;

/*!
 @brief Returns an ASN.1 OCTET STRING
 @return the octet string held in this DER value
 @throw IOExceptionWhen next data is not a OctetString value.
 */
- (IOSByteArray *)getOctetString;

/*!
 @brief Returns an ASN.1 OBJECT IDENTIFIER.
 @return the OID held in this DER value
 @throw IOExceptionWhen next data is not a OID value.
 */
- (EsGobAfirmaCoreSignersDerObjectIdentifier *)getOID;

/*!
 @brief Returns an ASN.1 INTEGER value as a positive BigInteger.
 This is just to deal with implementations that incorrectly encode
  some values as negative.
 @return the integer held in this DER value as a BigInteger.
 @throw IOExceptionWhen next data is not a BigInteger value.
 */
- (JavaMathBigInteger *)getPositiveBigInteger;

/*!
 @brief Returns an ASN.1 STRING value
 @return the printable string held in this value
 @throw IOExceptionWhen no it possible load data.
 */
- (NSString *)getPrintableString;

/*!
 @brief Returns an ASN.1 T61 (Teletype) STRING value
 @return the teletype string held in this value
 @throw IOExceptionWhen no it possible load data.
 */
- (NSString *)getT61String;

- (jbyte)getTag;

/*!
 @brief Returns an ASN.1 BIT STRING value that need not be byte-aligned.
 @return a BitArray representing the bit string held in this value
 @throw IOExceptionWhen next data is not a BitArray value.
 */
- (EsGobAfirmaCoreSignersDerBitArray *)getUnalignedBitString;

/*!
 @brief Returns an ASN.1 BIT STRING value, with the tag assumed implicit
  based on the parameter.The bit string need not be byte-aligned.
 @param tagImplicit if true, the tag is assumed implicit.
 @return the bit string held in this value
 @throw IOExceptionWhen the tag is incorrect.
 */
- (EsGobAfirmaCoreSignersDerBitArray *)getUnalignedBitStringWithBoolean:(jboolean)tagImplicit;

/*!
 @brief Returns the ASN.1 UTF-8 STRING value as a Java String.
 @return a string corresponding to the encoded UTF8String held in
  this value
 @throw IOExceptionWhen no it possible load data.
 */
- (NSString *)getUTF8String;

/*!
 @brief Returns a hashcode for this DerValue.
 @return a hashcode for this DerValue.
 */
- (NSUInteger)hash;

/*!
 @brief Returns true if the tag class is APPLICATION.
 @return true if the tag class is APPLICATION.
 */
- (jboolean)isApplication;

/*!
 @brief Returns true if the CONSTRUCTED bit is set in the type tag.
 @return true if the CONSTRUCTED bit is set in the type tag.
 */
- (jboolean)isConstructed;

/*!
 @brief Returns true if the CONSTRUCTED TAG matches the passed tag.
 @param constructedTag Constructed tag.
 @return true if the CONSTRUCTED TAG matches the passed tag.
 */
- (jboolean)isConstructedWithByte:(jbyte)constructedTag;

/*!
 @brief Returns true if the CONTEXT SPECIFIC bit is set in the type tag.
 This is associated with the ASN.1 "DEFINED BY" syntax.
 @return true if the CONTEXT SPECIFIC bit is set in the type tag.
 */
- (jboolean)isContextSpecific;

/*!
 @brief Returns true if the CONTEXT SPECIFIC TAG matches the passed tag.
 @param cntxtTag Content specific tag.
 @return true if the CONTEXT SPECIFIC TAG matches the passed tag.
 */
- (jboolean)isContextSpecificWithByte:(jbyte)cntxtTag;

/*!
 @brief Determine if a character is one of the permissible characters for
  PrintableString:
  A-Z, a-z, 0-9, space, apostrophe (39), left and right parentheses,
  plus sign, comma, hyphen, period, slash, colon, equals sign,
  and question mark.
 Characters that are *not* allowed in PrintableString include
  exclamation point, quotation mark, number sign, dollar sign,
  percent sign, ampersand, asterisk, semicolon, less than sign,
  greater than sign, at sign, left and right square brackets,
  backslash, circumflex (94), underscore, back quote (96),
  left and right curly brackets, vertical line, tilde,
  and the control codes (0-31 and 127).
  This list is based on X.680 (the ASN.1 spec).
 @param ch Character.
 @return <code>true</code> if the character is one of the permissible
  characters for PrintableString.
 */
+ (jboolean)isPrintableStringCharWithChar:(jchar)ch;

/*!
 @brief Returns true if the tag class is UNIVERSAL.
 @return true if the tag class is UNIVERSAL.
 */
- (jboolean)isUniversal;

/*!
 @brief Get the length of the encoded value.
 @return Length.
 */
- (jint)length;

/*!
 @brief Read exactly <code>length</code> of bytes from <code>in</code>.
 <p> Note that this method is safe to be called with unknown large 
 <code>length</code> argument. The memory used is proportional to the
  actual bytes available. An exception is thrown if there are not
  enough bytes in the stream.
 @param is input stream, must not be null
 @param length number of bytes to read
 @return bytes read
 @throw EOFExceptionif there are not enough bytes in the stream
 @throw IOExceptionif an I/O error occurs or <code>length</code> is negative
 @throw OutOfMemoryErrorif an array of the required size cannot be
          allocated.
 */
+ (IOSByteArray *)readExactlyNBytesWithJavaIoInputStream:(JavaIoInputStream *)is
                                                 withInt:(jint)length;

/*!
 @brief Reads up to a specified number of bytes from the input stream.This
  method blocks until the requested number of bytes have been read, end
  of stream is detected, or an exception is thrown.
 This method does not
  close the input stream. 
 <p> The length of the returned array equals the number of bytes read
  from the stream. If <code>len</code> is zero, then no bytes are read and
  an empty byte array is returned. Otherwise, up to <code>len</code> bytes
  are read from the stream. Fewer than <code>len</code> bytes may be read if
  end of stream is encountered. 
 <p> When this stream reaches end of stream, further invocations of this
  method will return an empty byte array. 
 <p> Note that this method is intended for simple cases where it is
  convenient to read the specified number of bytes into a byte array. The
  total amount of memory allocated by this method is proportional to the
  number of bytes read from the stream which is bounded by <code>len</code>.
  Therefore, the method may be safely called with very large values of 
 <code>len</code> provided sufficient memory is available. 
 <p> The behavior for the case where the input stream is <i>asynchronously
  closed</i>, or the thread interrupted during the read, is highly input
  stream specific, and therefore not specified. 
 <p> If an I/O error occurs reading from the input stream, then it may do
  so after some, but not all, bytes have been read. Consequently the input
  stream may not be at end of stream and may be in an inconsistent state.
  It is strongly recommended that the stream be promptly closed if an I/O
  error occurs.
  The number of bytes allocated to read data from this stream and return
  the result is bounded by <code>2*(long)len</code>, inclusive.
 @param is input stream, must not be null
 @param len the maximum number of bytes to read
 @return a byte array containing the bytes read from this input stream
 @throw IllegalArgumentExceptionif <code>length</code> is negative
 @throw IOExceptionif an I/O error occurs
 @throw OutOfMemoryErrorif an array of the required size cannot be
          allocated.
 @since 11
 */
+ (IOSByteArray *)readNBytesWithJavaIoInputStream:(JavaIoInputStream *)is
                                          withInt:(jint)len;

/*!
 @brief Set the tag of the attribute.Commonly used to reset the
  tag value used for IMPLICIT encodings.
 @param tag the tag value
 */
- (void)resetTagWithByte:(jbyte)tag;

/*!
 @brief Returns a DER-encoded value, such that if it's passed to the
  DerValue constructor, a value equivalent to "this" is returned.
 @return DER-encoded value, including tag and length.
 @throw IOExceptionWhen no it possible load data.
 */
- (IOSByteArray *)toByteArray;

/*!
 @brief For "set" and "sequence" types, this function may be used
  to return a DER stream of the members of the set or sequence.
 This operation is not supported for primitive types such as
  integers or bit strings.
 @return DER stream of the members of the set or sequence.
 @throw IOExceptionWhen no it possible load data.
 */
- (EsGobAfirmaCoreSignersDerDerInputStream *)toDerInputStream;

/*!
 @brief Returns a printable representation of the value.
 @return printable representation of the value
 */
- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initWithByte:(jbyte)tag
               withByteArray:(IOSByteArray *)data
                 withBoolean:(jboolean)allowBER;

- (instancetype)initWithByteArray:(IOSByteArray *)buf
                      withBoolean:(jboolean)allowBER;

- (instancetype)initWithByteArray:(IOSByteArray *)buf
                          withInt:(jint)offset
                          withInt:(jint)len
                      withBoolean:(jboolean)allowBER;

- (instancetype)initWithEsGobAfirmaCoreSignersDerDerInputBuffer:(EsGobAfirmaCoreSignersDerDerInputBuffer *)inArg;

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
                              withBoolean:(jboolean)allowBER;

- (jboolean)isPrivate;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobAfirmaCoreSignersDerDerValue)

J2OBJC_FIELD_SETTER(EsGobAfirmaCoreSignersDerDerValue, buffer_, EsGobAfirmaCoreSignersDerDerInputBuffer *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreSignersDerDerValue, data_, EsGobAfirmaCoreSignersDerDerInputStream *)

/*!
 @brief The tag class types
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_TAG_UNIVERSAL(void);
#define EsGobAfirmaCoreSignersDerDerValue_TAG_UNIVERSAL 0
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, TAG_UNIVERSAL, jbyte)

inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_TAG_APPLICATION(void);
#define EsGobAfirmaCoreSignersDerDerValue_TAG_APPLICATION 64
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, TAG_APPLICATION, jbyte)

inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_TAG_CONTEXT(void);
#define EsGobAfirmaCoreSignersDerDerValue_TAG_CONTEXT -128
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, TAG_CONTEXT, jbyte)

inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_TAG_PRIVATE(void);
#define EsGobAfirmaCoreSignersDerDerValue_TAG_PRIVATE -64
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, TAG_PRIVATE, jbyte)

/*!
 @brief Tag value indicating an ASN.1 "BOOLEAN" value.
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_Boolean(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_Boolean 1
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_Boolean, jbyte)

/*!
 @brief Tag value indicating an ASN.1 "INTEGER" value.
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_Integer(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_Integer 2
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_Integer, jbyte)

/*!
 @brief Tag value indicating an ASN.1 "BIT STRING" value.
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_BitString(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_BitString 3
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_BitString, jbyte)

/*!
 @brief Tag value indicating an ASN.1 "OCTET STRING" value.
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_OctetString(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_OctetString 4
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_OctetString, jbyte)

/*!
 @brief Tag value indicating an ASN.1 "NULL" value.
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_Null(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_Null 5
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_Null, jbyte)

/*!
 @brief Tag value indicating an ASN.1 "OBJECT IDENTIFIER" value.
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_ObjectId(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_ObjectId 6
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_ObjectId, jbyte)

/*!
 @brief Tag value including an ASN.1 "ENUMERATED" value
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_Enumerated(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_Enumerated 10
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_Enumerated, jbyte)

/*!
 @brief Tag value indicating an ASN.1 "UTF8String" value.
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_UTF8String(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_UTF8String 12
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_UTF8String, jbyte)

/*!
 @brief Tag value including a "printable" string
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_PrintableString(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_PrintableString 19
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_PrintableString, jbyte)

/*!
 @brief Tag value including a "teletype" string
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_T61String(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_T61String 20
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_T61String, jbyte)

/*!
 @brief Tag value including an ASCII string
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_IA5String(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_IA5String 22
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_IA5String, jbyte)

/*!
 @brief Tag value indicating an ASN.1 "UTCTime" value.
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_UtcTime(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_UtcTime 23
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_UtcTime, jbyte)

/*!
 @brief Tag value indicating an ASN.1 "GeneralizedTime" value.
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_GeneralizedTime(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_GeneralizedTime 24
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_GeneralizedTime, jbyte)

/*!
 @brief Tag value indicating an ASN.1 "GenerallString" value.
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_GeneralString(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_GeneralString 27
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_GeneralString, jbyte)

/*!
 @brief Tag value indicating an ASN.1 "UniversalString" value.
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_UniversalString(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_UniversalString 28
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_UniversalString, jbyte)

/*!
 @brief Tag value indicating an ASN.1 "BMPString" value.
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_BMPString(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_BMPString 30
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_BMPString, jbyte)

/*!
 @brief Tag value indicating an ASN.1
  "SEQUENCE" (zero to N elements, order is significant).
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_Sequence(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_Sequence 48
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_Sequence, jbyte)

/*!
 @brief Tag value indicating an ASN.1
  "SEQUENCE OF" (one to N elements, order is significant).
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_SequenceOf(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_SequenceOf 48
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_SequenceOf, jbyte)

/*!
 @brief Tag value indicating an ASN.1
  "SET" (zero to N members, order does not matter).
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_Set(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_Set 49
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_Set, jbyte)

/*!
 @brief Tag value indicating an ASN.1
  "SET OF" (one to N members, order does not matter).
 */
inline jbyte EsGobAfirmaCoreSignersDerDerValue_get_tag_SetOf(void);
#define EsGobAfirmaCoreSignersDerDerValue_tag_SetOf 49
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerDerValue, tag_SetOf, jbyte)

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersDerDerValue_initWithNSString_(EsGobAfirmaCoreSignersDerDerValue *self, NSString *value);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *new_EsGobAfirmaCoreSignersDerDerValue_initWithNSString_(NSString *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *create_EsGobAfirmaCoreSignersDerDerValue_initWithNSString_(NSString *value);

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersDerDerValue_initWithByte_withNSString_(EsGobAfirmaCoreSignersDerDerValue *self, jbyte stringTag, NSString *value);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *new_EsGobAfirmaCoreSignersDerDerValue_initWithByte_withNSString_(jbyte stringTag, NSString *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *create_EsGobAfirmaCoreSignersDerDerValue_initWithByte_withNSString_(jbyte stringTag, NSString *value);

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersDerDerValue_initWithByte_withByteArray_withBoolean_(EsGobAfirmaCoreSignersDerDerValue *self, jbyte tag, IOSByteArray *data, jboolean allowBER);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *new_EsGobAfirmaCoreSignersDerDerValue_initWithByte_withByteArray_withBoolean_(jbyte tag, IOSByteArray *data, jboolean allowBER) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *create_EsGobAfirmaCoreSignersDerDerValue_initWithByte_withByteArray_withBoolean_(jbyte tag, IOSByteArray *data, jboolean allowBER);

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersDerDerValue_initWithByte_withByteArray_(EsGobAfirmaCoreSignersDerDerValue *self, jbyte tag, IOSByteArray *data);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *new_EsGobAfirmaCoreSignersDerDerValue_initWithByte_withByteArray_(jbyte tag, IOSByteArray *data) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *create_EsGobAfirmaCoreSignersDerDerValue_initWithByte_withByteArray_(jbyte tag, IOSByteArray *data);

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersDerDerValue_initWithEsGobAfirmaCoreSignersDerDerInputBuffer_(EsGobAfirmaCoreSignersDerDerValue *self, EsGobAfirmaCoreSignersDerDerInputBuffer *inArg);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *new_EsGobAfirmaCoreSignersDerDerValue_initWithEsGobAfirmaCoreSignersDerDerInputBuffer_(EsGobAfirmaCoreSignersDerDerInputBuffer *inArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *create_EsGobAfirmaCoreSignersDerDerValue_initWithEsGobAfirmaCoreSignersDerDerInputBuffer_(EsGobAfirmaCoreSignersDerDerInputBuffer *inArg);

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersDerDerValue_initWithByteArray_withBoolean_(EsGobAfirmaCoreSignersDerDerValue *self, IOSByteArray *buf, jboolean allowBER);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *new_EsGobAfirmaCoreSignersDerDerValue_initWithByteArray_withBoolean_(IOSByteArray *buf, jboolean allowBER) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *create_EsGobAfirmaCoreSignersDerDerValue_initWithByteArray_withBoolean_(IOSByteArray *buf, jboolean allowBER);

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersDerDerValue_initWithByteArray_(EsGobAfirmaCoreSignersDerDerValue *self, IOSByteArray *buf);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *new_EsGobAfirmaCoreSignersDerDerValue_initWithByteArray_(IOSByteArray *buf) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *create_EsGobAfirmaCoreSignersDerDerValue_initWithByteArray_(IOSByteArray *buf);

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersDerDerValue_initWithByteArray_withInt_withInt_withBoolean_(EsGobAfirmaCoreSignersDerDerValue *self, IOSByteArray *buf, jint offset, jint len, jboolean allowBER);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *new_EsGobAfirmaCoreSignersDerDerValue_initWithByteArray_withInt_withInt_withBoolean_(IOSByteArray *buf, jint offset, jint len, jboolean allowBER) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *create_EsGobAfirmaCoreSignersDerDerValue_initWithByteArray_withInt_withInt_withBoolean_(IOSByteArray *buf, jint offset, jint len, jboolean allowBER);

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersDerDerValue_initWithByteArray_withInt_withInt_(EsGobAfirmaCoreSignersDerDerValue *self, IOSByteArray *buf, jint offset, jint len);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *new_EsGobAfirmaCoreSignersDerDerValue_initWithByteArray_withInt_withInt_(IOSByteArray *buf, jint offset, jint len) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *create_EsGobAfirmaCoreSignersDerDerValue_initWithByteArray_withInt_withInt_(IOSByteArray *buf, jint offset, jint len);

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersDerDerValue_initWithJavaIoInputStream_withBoolean_(EsGobAfirmaCoreSignersDerDerValue *self, JavaIoInputStream *inArg, jboolean allowBER);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *new_EsGobAfirmaCoreSignersDerDerValue_initWithJavaIoInputStream_withBoolean_(JavaIoInputStream *inArg, jboolean allowBER) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *create_EsGobAfirmaCoreSignersDerDerValue_initWithJavaIoInputStream_withBoolean_(JavaIoInputStream *inArg, jboolean allowBER);

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersDerDerValue_initWithJavaIoInputStream_(EsGobAfirmaCoreSignersDerDerValue *self, JavaIoInputStream *inArg);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *new_EsGobAfirmaCoreSignersDerDerValue_initWithJavaIoInputStream_(JavaIoInputStream *inArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerValue *create_EsGobAfirmaCoreSignersDerDerValue_initWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT jboolean EsGobAfirmaCoreSignersDerDerValue_isPrintableStringCharWithChar_(jchar ch);

FOUNDATION_EXPORT jbyte EsGobAfirmaCoreSignersDerDerValue_createTagWithByte_withBoolean_withByte_(jbyte tagClass, jboolean form, jbyte val);

FOUNDATION_EXPORT IOSByteArray *EsGobAfirmaCoreSignersDerDerValue_readExactlyNBytesWithJavaIoInputStream_withInt_(JavaIoInputStream *is, jint length);

FOUNDATION_EXPORT IOSByteArray *EsGobAfirmaCoreSignersDerDerValue_readNBytesWithJavaIoInputStream_withInt_(JavaIoInputStream *is, jint len);

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaCoreSignersDerDerValue)

#endif

#pragma pop_macro("INCLUDE_ALL_DerValue")
