//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/signers/pades/XmpHelper.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/DocumentException.h"
#include "com/aowagie/text/pdf/PdfDate.h"
#include "com/aowagie/text/pdf/PdfReader.h"
#include "com/aowagie/text/pdf/PdfStamper.h"
#include "es/gob/afirma/core/misc/SecureXmlBuilder.h"
#include "es/gob/afirma/signers/pades/AOPDFSigner.h"
#include "es/gob/afirma/signers/pades/PdfUtil.h"
#include "es/gob/afirma/signers/pades/XmpHelper.h"
#include "es/gob/afirma/signers/pades/common/PdfExtraParams.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/StringReader.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/StandardCharsets.h"
#include "java/util/Calendar.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/UUID.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/logging/Logger.h"
#include "javax/xml/parsers/DocumentBuilder.h"
#include "javax/xml/parsers/DocumentBuilderFactory.h"
#include "org/w3c/dom/DOMConfiguration.h"
#include "org/w3c/dom/DOMException.h"
#include "org/w3c/dom/DOMImplementation.h"
#include "org/w3c/dom/Document.h"
#include "org/w3c/dom/Element.h"
#include "org/w3c/dom/Node.h"
#include "org/w3c/dom/NodeList.h"
#include "org/w3c/dom/ls/DOMImplementationLS.h"
#include "org/w3c/dom/ls/LSOutput.h"
#include "org/w3c/dom/ls/LSSerializer.h"
#include "org/xml/sax/InputSource.h"
#include "org/xml/sax/SAXException.h"

#if !__has_feature(objc_arc)
#error "es/gob/afirma/signers/pades/XmpHelper must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaSignersPadesXmpHelper ()

+ (NSString *)getOriginalCreationDateAsW3CWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)pdfReader;

/*!
 @brief Comprobamos si se ha indicado la contrase&ntilde;a de usuario o de propietario en
  el PDF y obtenemos aquella necesaria para la apertura del documento.
 @param extraParams Configuraci &oacute; n con la contrase &ntilde; a del PDF.
 @return Contrase&ntilde;a necesaria para abrir/editar el documento o <code>null</code>
  si no se ha configurado.
 */
+ (IOSByteArray *)getPdfPasswordWithJavaUtilProperties:(JavaUtilProperties *)extraParams;

/*!
 @brief Escribe un XML como texto.
 @param node Nodo XML que queremos pasar a texto.
 @return Cadena de texto con el XML en forma de array de octetos
 */
+ (IOSByteArray *)writeXmlWithOrgW3cDomNode:(id<OrgW3cDomNode>)node;

@end

inline NSString *EsGobAfirmaSignersPadesXmpHelper_get_TAG_UUID(void);
static NSString *EsGobAfirmaSignersPadesXmpHelper_TAG_UUID = @"$$UUID$$";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesXmpHelper, TAG_UUID, NSString *)

inline NSString *EsGobAfirmaSignersPadesXmpHelper_get_TAG_DATE(void);
static NSString *EsGobAfirmaSignersPadesXmpHelper_TAG_DATE = @"$$DATE$$";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesXmpHelper, TAG_DATE, NSString *)

inline NSString *EsGobAfirmaSignersPadesXmpHelper_get_XML_TAG_MODIFYDATE_START(void);
static NSString *EsGobAfirmaSignersPadesXmpHelper_XML_TAG_MODIFYDATE_START = @"<xmp:ModifyDate>";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesXmpHelper, XML_TAG_MODIFYDATE_START, NSString *)

inline NSString *EsGobAfirmaSignersPadesXmpHelper_get_XML_TAG_MODIFYDATE_END(void);
static NSString *EsGobAfirmaSignersPadesXmpHelper_XML_TAG_MODIFYDATE_END = @"</xmp:ModifyDate>";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesXmpHelper, XML_TAG_MODIFYDATE_END, NSString *)

inline NSString *EsGobAfirmaSignersPadesXmpHelper_get_XML_TAG_CREATEDATE_START(void);
static NSString *EsGobAfirmaSignersPadesXmpHelper_XML_TAG_CREATEDATE_START = @"<xmp:CreateDate>";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesXmpHelper, XML_TAG_CREATEDATE_START, NSString *)

inline NSString *EsGobAfirmaSignersPadesXmpHelper_get_XML_TAG_CREATEDATE_END(void);
static NSString *EsGobAfirmaSignersPadesXmpHelper_XML_TAG_CREATEDATE_END = @"</xmp:CreateDate>";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesXmpHelper, XML_TAG_CREATEDATE_END, NSString *)

inline NSString *EsGobAfirmaSignersPadesXmpHelper_get_PROCESSING_INSTRUCTION_SUFFIX(void);
static NSString *EsGobAfirmaSignersPadesXmpHelper_PROCESSING_INSTRUCTION_SUFFIX = @"?>";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesXmpHelper, PROCESSING_INSTRUCTION_SUFFIX, NSString *)

inline JavaNioCharsetCharset *EsGobAfirmaSignersPadesXmpHelper_get_DEFAULT_ENCODING(void);
static JavaNioCharsetCharset *EsGobAfirmaSignersPadesXmpHelper_DEFAULT_ENCODING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesXmpHelper, DEFAULT_ENCODING, JavaNioCharsetCharset *)

inline NSString *EsGobAfirmaSignersPadesXmpHelper_get_NEW_HISTORY_LIST_ITEM(void);
static NSString *EsGobAfirmaSignersPadesXmpHelper_NEW_HISTORY_LIST_ITEM = @"<rdf:li rdf:parseType=\"Resource\">\n  <stEvt:action>signed</stEvt:action>\n  <stEvt:instanceID>uuid:$$UUID$$</stEvt:instanceID>\n  <stEvt:parameters>Firmado por el Cliente @firma</stEvt:parameters>\n  <stEvt:softwareAgent>Cliente @firma</stEvt:softwareAgent>\n  <stEvt:when>$$DATE$$</stEvt:when>\n</rdf:li>";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesXmpHelper, NEW_HISTORY_LIST_ITEM, NSString *)

__attribute__((unused)) static NSString *EsGobAfirmaSignersPadesXmpHelper_getOriginalCreationDateAsW3CWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader *pdfReader);

__attribute__((unused)) static IOSByteArray *EsGobAfirmaSignersPadesXmpHelper_getPdfPasswordWithJavaUtilProperties_(JavaUtilProperties *extraParams);

__attribute__((unused)) static IOSByteArray *EsGobAfirmaSignersPadesXmpHelper_writeXmlWithOrgW3cDomNode_(id<OrgW3cDomNode> node);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/signers/pades/XmpHelper.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaSignersPadesXmpHelper)


#line 51
@implementation EsGobAfirmaSignersPadesXmpHelper


#line 51
- (instancetype)initPackagePrivate {
  EsGobAfirmaSignersPadesXmpHelper_initPackagePrivate(self);
  return self;
}


#line 74
+ (NSString *)getOriginalCreationDateAsW3CWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)pdfReader {
  return EsGobAfirmaSignersPadesXmpHelper_getOriginalCreationDateAsW3CWithComAowagieTextPdfPdfReader_(pdfReader);
}


#line 110
+ (IOSByteArray *)addSignHistoryToXmpWithByteArray:(IOSByteArray *)inPdf
                              withJavaUtilCalendar:(JavaUtilCalendar *)globalDate
                            withJavaUtilProperties:(JavaUtilProperties *)extraParams {
  return EsGobAfirmaSignersPadesXmpHelper_addSignHistoryToXmpWithByteArray_withJavaUtilCalendar_withJavaUtilProperties_(inPdf, globalDate, extraParams);
}


#line 285
+ (IOSByteArray *)getPdfPasswordWithJavaUtilProperties:(JavaUtilProperties *)extraParams {
  return EsGobAfirmaSignersPadesXmpHelper_getPdfPasswordWithJavaUtilProperties_(extraParams);
}


#line 306
+ (IOSByteArray *)writeXmlWithOrgW3cDomNode:(id<OrgW3cDomNode>)node {
  return EsGobAfirmaSignersPadesXmpHelper_writeXmlWithOrgW3cDomNode_(node);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x8, 2, 3, 4, -1, -1, -1 },
    { NULL, "[B", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(getOriginalCreationDateAsW3CWithComAowagieTextPdfPdfReader:);
  methods[2].selector = @selector(addSignHistoryToXmpWithByteArray:withJavaUtilCalendar:withJavaUtilProperties:);
  methods[3].selector = @selector(getPdfPasswordWithJavaUtilProperties:);
  methods[4].selector = @selector(writeXmlWithOrgW3cDomNode:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG_UUID", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "TAG_DATE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "XML_TAG_MODIFYDATE_START", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "XML_TAG_MODIFYDATE_END", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "XML_TAG_CREATEDATE_START", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "XML_TAG_CREATEDATE_END", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "PROCESSING_INSTRUCTION_SUFFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "DEFAULT_ENCODING", "LJavaNioCharsetCharset;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "NEW_HISTORY_LIST_ITEM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
  };
  static const void *ptrTable[] = { "getOriginalCreationDateAsW3C", "LComAowagieTextPdfPdfReader;", "addSignHistoryToXmp", "[BLJavaUtilCalendar;LJavaUtilProperties;", "LOrgW3cDomDOMException;LOrgXmlSaxSAXException;LJavaIoIOException;LJavaxXmlParsersParserConfigurationException;", "getPdfPassword", "LJavaUtilProperties;", "writeXml", "LOrgW3cDomNode;", &EsGobAfirmaSignersPadesXmpHelper_TAG_UUID, &EsGobAfirmaSignersPadesXmpHelper_TAG_DATE, &EsGobAfirmaSignersPadesXmpHelper_XML_TAG_MODIFYDATE_START, &EsGobAfirmaSignersPadesXmpHelper_XML_TAG_MODIFYDATE_END, &EsGobAfirmaSignersPadesXmpHelper_XML_TAG_CREATEDATE_START, &EsGobAfirmaSignersPadesXmpHelper_XML_TAG_CREATEDATE_END, &EsGobAfirmaSignersPadesXmpHelper_PROCESSING_INSTRUCTION_SUFFIX, &EsGobAfirmaSignersPadesXmpHelper_DEFAULT_ENCODING, &EsGobAfirmaSignersPadesXmpHelper_NEW_HISTORY_LIST_ITEM };
  static const J2ObjcClassInfo _EsGobAfirmaSignersPadesXmpHelper = { "XmpHelper", "es.gob.afirma.signers.pades", ptrTable, methods, fields, 7, 0x10, 5, 9, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaSignersPadesXmpHelper;
}

+ (void)initialize {
  if (self == [EsGobAfirmaSignersPadesXmpHelper class]) {
    EsGobAfirmaSignersPadesXmpHelper_DEFAULT_ENCODING = JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8);
    J2OBJC_SET_INITIALIZED(EsGobAfirmaSignersPadesXmpHelper)
  }
}

@end


#line 51
void EsGobAfirmaSignersPadesXmpHelper_initPackagePrivate(EsGobAfirmaSignersPadesXmpHelper *self) {
  NSObject_init(self);
}


#line 51
EsGobAfirmaSignersPadesXmpHelper *new_EsGobAfirmaSignersPadesXmpHelper_initPackagePrivate() {
  J2OBJC_NEW_IMPL(EsGobAfirmaSignersPadesXmpHelper, initPackagePrivate)
}


#line 51
EsGobAfirmaSignersPadesXmpHelper *create_EsGobAfirmaSignersPadesXmpHelper_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaSignersPadesXmpHelper, initPackagePrivate)
}


#line 74
NSString *EsGobAfirmaSignersPadesXmpHelper_getOriginalCreationDateAsW3CWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader *pdfReader) {
  EsGobAfirmaSignersPadesXmpHelper_initialize();
  
#line 75
  JavaUtilHashMap *info = [((ComAowagieTextPdfPdfReader *) nil_chk(pdfReader)) getInfo];
  NSString *pdfDate = [((JavaUtilHashMap *) nil_chk(info)) getWithId:@"CreationDate"];
  return pdfDate != nil ? ComAowagieTextPdfPdfDate_getW3CDateWithNSString_(pdfDate) : nil;
}


#line 110
IOSByteArray *EsGobAfirmaSignersPadesXmpHelper_addSignHistoryToXmpWithByteArray_withJavaUtilCalendar_withJavaUtilProperties_(IOSByteArray *inPdf, JavaUtilCalendar *globalDate, JavaUtilProperties *extraParams) {
  EsGobAfirmaSignersPadesXmpHelper_initialize();
  
#line 117
  IOSByteArray *pdfPassword = EsGobAfirmaSignersPadesXmpHelper_getPdfPasswordWithJavaUtilProperties_(extraParams);
  
#line 119
  ComAowagieTextPdfPdfReader *reader = pdfPassword != nil ? new_ComAowagieTextPdfPdfReader_initWithByteArray_withByteArray_(
#line 120
  inPdf, pdfPassword) : new_ComAowagieTextPdfPdfReader_initWithByteArray_(
#line 121
  inPdf);
  
#line 124
  if ([reader isEncrypted]) {
    [reader close];
    return inPdf;
  }
  
#line 129
  IOSByteArray *xmpBytes = [reader getMetadata];
  
#line 132
  NSString *originalCreationDate = EsGobAfirmaSignersPadesXmpHelper_getOriginalCreationDateAsW3CWithComAowagieTextPdfPdfReader_(reader);
  
#line 134
  if (!EsGobAfirmaSignersPadesPdfUtil_isPdfAxWithByteArray_(xmpBytes) || [new_EsGobAfirmaSignersPadesAOPDFSigner_init() isSignWithByteArray:inPdf withJavaUtilProperties:extraParams]) {
    [reader close];
    return inPdf;
  }
  
#line 139
  NSString *originalXmp = [NSString java_stringWithBytes:xmpBytes charset:EsGobAfirmaSignersPadesXmpHelper_DEFAULT_ENCODING];
  NSString *originalXmpHeader = [originalXmp java_substring:
#line 141
  0 endIndex:
#line 142
  [originalXmp java_indexOfString:EsGobAfirmaSignersPadesXmpHelper_PROCESSING_INSTRUCTION_SUFFIX] + [((NSString *) nil_chk(EsGobAfirmaSignersPadesXmpHelper_PROCESSING_INSTRUCTION_SUFFIX)) java_length]];
  
#line 144
  NSString *originalXmpFooter = [originalXmp java_substring:
#line 145
  [originalXmp java_lastIndexOfString:@"<?"]];
  
#line 148
  JavaxXmlParsersDocumentBuilderFactory *dbf = JavaxXmlParsersDocumentBuilderFactory_newInstance();
  [((JavaxXmlParsersDocumentBuilderFactory *) nil_chk(dbf)) setNamespaceAwareWithBoolean:true];
  JavaxXmlParsersDocumentBuilder *db = EsGobAfirmaCoreMiscSecureXmlBuilder_getSecureDocumentBuilder();
  id<OrgW3cDomDocument> doc = [((JavaxXmlParsersDocumentBuilder *) nil_chk(db)) parseWithJavaIoInputStream:new_JavaIoByteArrayInputStream_initWithByteArray_(xmpBytes)];
  
#line 153
  NSString *newnode = [((NSString *) nil_chk([((NSString *) nil_chk(EsGobAfirmaSignersPadesXmpHelper_NEW_HISTORY_LIST_ITEM)) java_replace:
#line 154
  EsGobAfirmaSignersPadesXmpHelper_TAG_UUID withSequence:
#line 155
  [((JavaUtilUUID *) nil_chk(JavaUtilUUID_nameUUIDFromBytesWithByteArray_(
#line 156
  [((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(
#line 157
  [((JavaUtilCalendar *) nil_chk(globalDate)) getTimeInMillis]))) toByteArray]))) description]])) java_replace:
#line 161
  EsGobAfirmaSignersPadesXmpHelper_TAG_DATE withSequence:
#line 162
  [new_ComAowagieTextPdfPdfDate_initWithJavaUtilCalendar_(globalDate) getW3CDate]];
  
#line 165
  id<OrgW3cDomNodeList> nl = [((id<OrgW3cDomDocument>) nil_chk(doc)) getElementsByTagNameWithNSString:@"xmpMM:History"];
  id<OrgW3cDomNode> n;
  
#line 169
  if ([((id<OrgW3cDomNodeList>) nil_chk(nl)) getLength] != 1) {
    nl = [doc getElementsByTagNameWithNSString:@"pdfaid:conformance"];
    if ([((id<OrgW3cDomNodeList>) nil_chk(nl)) getLength] != 1) {
      [reader close];
      @throw new_JavaLangIllegalStateException_initWithNSString_(
#line 174
      @"El PDF no tiene una entrada RDF XMP valida");
    }
    
#line 177
    n = [((id<OrgW3cDomNode>) nil_chk([nl itemWithInt:0])) getParentNode];
    newnode = JreStrcat("$$$", @"<xmpMM:History xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:xmpMM=\"http://ns.adobe.com/xap/1.0/mm/\" xmlns:stEvt=\"http://ns.adobe.com/xap/1.0/sType/ResourceEvent#\"><rdf:Seq>", newnode, @"</rdf:Seq></xmpMM:History>");
  }
  else {
    
#line 182
    id<OrgW3cDomElement> e = (id<OrgW3cDomElement>) cast_check([nl itemWithInt:0], OrgW3cDomElement_class_());
    nl = [((id<OrgW3cDomElement>) nil_chk(e)) getElementsByTagNameWithNSString:@"rdf:Seq"];
    
#line 185
    if ([((id<OrgW3cDomNodeList>) nil_chk(nl)) getLength] != 1) {
      nl = [doc getElementsByTagNameWithNSString:@"xmpMM:History"];
      newnode = JreStrcat("$$$", @"<rdf:Seq xmlns:stEvt=\"http://ns.adobe.com/xap/1.0/sType/ResourceEvent#\">", newnode, @"</rdf:Seq>");
    }
    n = [((id<OrgW3cDomNodeList>) nil_chk(nl)) itemWithInt:0];
  }
  
#line 192
  @try {
    id<OrgW3cDomNode> node = [doc importNodeWithOrgW3cDomNode:
#line 194
    [((id<OrgW3cDomDocument>) nil_chk([db parseWithOrgXmlSaxInputSource:new_OrgXmlSaxInputSource_initWithJavaIoReader_(new_JavaIoStringReader_initWithNSString_(
#line 197
    newnode))])) getDocumentElement] withBoolean:
#line 201
    true];
    
#line 204
    (void) [((id<OrgW3cDomNode>) nil_chk(n)) appendChildWithOrgW3cDomNode:node];
  }
  @catch (JavaIoIOException *e) {
    [reader close];
    @throw e;
  }
  @catch (
#line 206
  OrgXmlSaxSAXException *e) {
    [reader close];
    @throw e;
  }
  @catch (
#line 206
  OrgW3cDomDOMException *e) {
    [reader close];
    @throw e;
  }
  
#line 211
  id<JavaUtilMap> props = new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(1);
  (void) [props putWithId:@"encoding" withId:[((JavaNioCharsetCharset *) nil_chk(EsGobAfirmaSignersPadesXmpHelper_DEFAULT_ENCODING)) name]];
  
#line 214
  NSString *xmlString = [NSString java_stringWithBytes:EsGobAfirmaSignersPadesXmpHelper_writeXmlWithOrgW3cDomNode_(
#line 215
  [doc getDocumentElement]) charset:
#line 216
  EsGobAfirmaSignersPadesXmpHelper_DEFAULT_ENCODING];
  
#line 218
  xmlString = [((NSString *) nil_chk([xmlString java_replace:
#line 219
  [xmlString java_substring:
#line 220
  0 endIndex:
#line 221
  [xmlString java_indexOfString:EsGobAfirmaSignersPadesXmpHelper_PROCESSING_INSTRUCTION_SUFFIX] + [EsGobAfirmaSignersPadesXmpHelper_PROCESSING_INSTRUCTION_SUFFIX java_length]] withSequence:
#line 223
  originalXmpHeader])) java_concat:
#line 224
  originalXmpFooter];
  
#line 227
  jint modPos = [((NSString *) nil_chk(xmlString)) java_indexOfString:EsGobAfirmaSignersPadesXmpHelper_XML_TAG_MODIFYDATE_START];
  if (modPos != -1) {
    xmlString = [xmlString java_replace:
#line 230
    [xmlString java_substring:
#line 231
    modPos + [((NSString *) nil_chk(EsGobAfirmaSignersPadesXmpHelper_XML_TAG_MODIFYDATE_START)) java_length] endIndex:
#line 232
    [xmlString java_indexOfString:EsGobAfirmaSignersPadesXmpHelper_XML_TAG_MODIFYDATE_END]] withSequence:
#line 234
    [new_ComAowagieTextPdfPdfDate_initWithJavaUtilCalendar_(globalDate) getW3CDate]];
  }
  
#line 239
  if (originalCreationDate != nil) {
    xmlString = [((NSString *) nil_chk(xmlString)) java_replace:
#line 241
    [xmlString java_substring:
#line 242
    [xmlString java_indexOfString:EsGobAfirmaSignersPadesXmpHelper_XML_TAG_CREATEDATE_START] + [((NSString *) nil_chk(EsGobAfirmaSignersPadesXmpHelper_XML_TAG_CREATEDATE_START)) java_length] endIndex:
#line 243
    [xmlString java_indexOfString:EsGobAfirmaSignersPadesXmpHelper_XML_TAG_CREATEDATE_END]] withSequence:
#line 245
    originalCreationDate];
  }
  
#line 249
  JavaIoByteArrayOutputStream *baos = new_JavaIoByteArrayOutputStream_init();
  ComAowagieTextPdfPdfStamper *stamper;
  @try {
    stamper = new_ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withJavaUtilCalendar_(reader, baos, globalDate);
  }
  @catch (ComAowagieTextDocumentException *ex) {
    [reader close];
    @throw new_JavaIoIOException_initWithJavaLangThrowable_(ex);
  }
  
#line 259
  @try {
    [((ComAowagieTextPdfPdfStamper *) nil_chk(stamper)) setXmpMetadataWithByteArray:[((NSString *) nil_chk(xmlString)) java_getBytesWithCharset:EsGobAfirmaSignersPadesXmpHelper_DEFAULT_ENCODING]];
    [stamper closeWithJavaUtilCalendar:globalDate];
  }
  @catch (ComAowagieTextDocumentException *ex) {
    [reader close];
    @throw new_JavaIoIOException_initWithJavaLangThrowable_(ex);
  }
  
#line 268
  [reader close];
  
#line 270
  [((JavaUtilLoggingLogger *) nil_chk(JavaUtilLoggingLogger_getLoggerWithNSString_(@"es.gob.afirma"))) infoWithNSString:
#line 271
  @"Se ha registrado la firma en el historico XMP del PDF"];
  
#line 274
  return [baos toByteArray];
}


#line 285
IOSByteArray *EsGobAfirmaSignersPadesXmpHelper_getPdfPasswordWithJavaUtilProperties_(JavaUtilProperties *extraParams) {
  EsGobAfirmaSignersPadesXmpHelper_initialize();
  
#line 288
  NSString *ownerPassword = [((JavaUtilProperties *) nil_chk(extraParams)) getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_OWNER_PASSWORD_STRING];
  
#line 291
  NSString *userPassword = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_USER_PASSWORD_STRING];
  
#line 293
  IOSByteArray *pwdBytes = nil;
  if (ownerPassword != nil) {
    pwdBytes = [ownerPassword java_getBytesWithCharset:EsGobAfirmaSignersPadesXmpHelper_DEFAULT_ENCODING];
  }
  else
#line 296
  if (userPassword != nil) {
    pwdBytes = [userPassword java_getBytesWithCharset:EsGobAfirmaSignersPadesXmpHelper_DEFAULT_ENCODING];
  }
  
#line 300
  return pwdBytes;
}


#line 306
IOSByteArray *EsGobAfirmaSignersPadesXmpHelper_writeXmlWithOrgW3cDomNode_(id<OrgW3cDomNode> node) {
  EsGobAfirmaSignersPadesXmpHelper_initialize();
  
#line 307
  id<OrgW3cDomLsDOMImplementationLS> domImpl = (id<OrgW3cDomLsDOMImplementationLS>) cast_check([((id<OrgW3cDomDocument>) nil_chk([((id<OrgW3cDomNode>) nil_chk(node)) getOwnerDocument])) getImplementation], OrgW3cDomLsDOMImplementationLS_class_());
  id<OrgW3cDomLsLSSerializer> lsSerializer = [((id<OrgW3cDomLsDOMImplementationLS>) nil_chk(domImpl)) createLSSerializer];
  id<OrgW3cDomDOMConfiguration> domConfiguration = [((id<OrgW3cDomLsLSSerializer>) nil_chk(lsSerializer)) getDomConfig];
  if ([((id<OrgW3cDomDOMConfiguration>) nil_chk(domConfiguration)) canSetParameterWithNSString:@"namespaces" withId:JreLoadStatic(JavaLangBoolean, FALSE)]) {
    [domConfiguration setParameterWithNSString:@"namespaces" withId:JreLoadStatic(JavaLangBoolean, FALSE)];
  }
  if ([domConfiguration canSetParameterWithNSString:@"canonical-form" withId:JreLoadStatic(JavaLangBoolean, TRUE)]) {
    [((id<OrgW3cDomDOMConfiguration>) nil_chk([lsSerializer getDomConfig])) setParameterWithNSString:@"canonical-form" withId:JreLoadStatic(JavaLangBoolean, TRUE)];
  }
  id<OrgW3cDomLsLSOutput> lsOutput = [domImpl createLSOutput];
  [((id<OrgW3cDomLsLSOutput>) nil_chk(lsOutput)) setEncodingWithNSString:[((JavaNioCharsetCharset *) nil_chk(EsGobAfirmaSignersPadesXmpHelper_DEFAULT_ENCODING)) name]];
  JavaIoByteArrayOutputStream *baos = new_JavaIoByteArrayOutputStream_init();
  [lsOutput setByteStreamWithJavaIoOutputStream:baos];
  [lsSerializer writeWithOrgW3cDomNode:node withOrgW3cDomLsLSOutput:lsOutput];
  return [baos toByteArray];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaSignersPadesXmpHelper)
