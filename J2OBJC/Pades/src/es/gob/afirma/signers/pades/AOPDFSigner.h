//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/signers/pades/AOPDFSigner.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobAfirmaSignersPadesAOPDFSigner")
#ifdef RESTRICT_EsGobAfirmaSignersPadesAOPDFSigner
#define INCLUDE_ALL_EsGobAfirmaSignersPadesAOPDFSigner 0
#else
#define INCLUDE_ALL_EsGobAfirmaSignersPadesAOPDFSigner 1
#endif
#undef RESTRICT_EsGobAfirmaSignersPadesAOPDFSigner

#if !defined (EsGobAfirmaSignersPadesAOPDFSigner_) && (INCLUDE_ALL_EsGobAfirmaSignersPadesAOPDFSigner || defined(INCLUDE_EsGobAfirmaSignersPadesAOPDFSigner))
#define EsGobAfirmaSignersPadesAOPDFSigner_

#define RESTRICT_EsGobAfirmaCoreSignersAOSigner 1
#define INCLUDE_EsGobAfirmaCoreSignersAOSigner 1
#include "es/gob/afirma/core/signers/AOSigner.h"

#define RESTRICT_EsGobAfirmaCoreSignersAOConfigurableContext 1
#define INCLUDE_EsGobAfirmaCoreSignersAOConfigurableContext 1
#include "es/gob/afirma/core/signers/AOConfigurableContext.h"

@class ComAowagieTextPdfPdfName;
@class EsGobAfirmaCoreSignersAOSignInfo;
@class EsGobAfirmaCoreSignersCounterSignTarget;
@class EsGobAfirmaCoreUtilTreeAOTreeModel;
@class IOSByteArray;
@class IOSObjectArray;
@class JavaUtilProperties;
@protocol EsGobAfirmaCoreSignersSignEnhancer;
@protocol JavaSecurityPrivateKey;

/*!
 @brief Manejador de firmas binarias de ficheros Adobe PDF en formato PAdES.
 <p>Para compatibilidad estricta con PAdES-BES/EPES se utiliza <i>ETSI.CAdES.detached</i> como nombre del subfiltro.</p>
  <p>La compatibilidad con PAdES no es completa, omiti&eacute;ndose los siguientes aspectos de la normativa:</p>
  <ul>
   <li>Firma separada de ficheros empotrados en el documento PDF.</li>
   <li>Firma separada de ficheros adjuntos al documento PDF.</li>
  </ul>
  <p>
   Estas mismas deficiencias provocan igualmente la incompatibilidad de las firmas generadas con "Carpetas PDF" (<i>Portfolios PDF</i>).
   Cuando se encuentran documentos PDF con ficheros adjuntos o empotrados se imprime informaci&oacute;n relativa en consola. 
 </p>
  <p>
    Por compatibilidad con Adobe Reader, la firmas se generan con el subfiltro "adbe.pkcs7.detached" en vez de con
    "ETSI.CAdES.detached". Consulte la documentaci&oacute;n del par&aacute;metro <code>signatureSubFilter</code> para variar este comportamiento. 
 </p>
  <p>
   La clase necesita espec&iacute;ficamente la versi&oacute;n de iText 2.1.7 modificada para el Cliente &#64;firma.
  </p>
 */
@interface EsGobAfirmaSignersPadesAOPDFSigner : NSObject < EsGobAfirmaCoreSignersAOSigner, EsGobAfirmaCoreSignersAOConfigurableContext >

#pragma mark Public

- (instancetype)init;

/*!
 @brief Configura, cuando no lo esten ya, las propiedades necesarias para que las firmas
  sobre unos datos respeten el formato que tuviesen firmas anteriores.
 @param data Datos que se desean firmar.
 @param config Configuraci &oacute; n establecida.
 */
+ (void)configureRespectfulPropertiesWithByteArray:(IOSByteArray *)data
                            withJavaUtilProperties:(JavaUtilProperties *)config;

/*!
 @brief A&ntilde;ade una firma PAdES a un documento PDF.El comportamiento es exactamente el mismo que una llamada al m&eacute;todo <code>sign(...)
 </code>
  puesto que las multifirmas en los ficheros PDF se limitan a firmas independientes "en serie", pero no implementando los mecanismos de
  cofirma o contrafirma de CAdES. 
 <p>
   Notas sobre documentos <i>certificados</i>:<br>
   Si un PDF firmado se ha certificado (por ejemplo, a&ntilde;adiendo una firma electr&oacute;nica usando Adobe Reader), cualquier
   modificaci&oacute;n posterior del fichero (como la adici&oacute;n de nuevas firmas con este m&eacute;todo) invalidar&aacute;
   las firmas previamente existentes.<br>
   Si se detecta un documento PDF certificado, se mostrar&aacute; un di&aacute;logo gr&aacute;fico advirtiendo al usuario de esta
   situaci&oacute;n y pidiendo confirmaci&oacute;n para continuar.<br>Si desea evitar interacciones directas con los usuarios
   consulte la documentaci&oacute;n de las opciones <code>allowSigningCertifiedPdfs</code> y <code>headless</code>.<br>
  </p>
  <p>
   Notas sobre documentos protegidos con contrase&ntilde;a:<br>
   Si un PDF est&aacute; protegido con contrase&ntilde;a por estar cifrado, se mostrar&aacute; un di&aacute;logo gr&aacute;fico advirtiendo al usuario de esta
   situaci&oacute;n y solicitando la contrase&ntilde;a de apertura del PDF.<br>Si desea evitar interacciones directas con los usuarios
   consulte la documentaci&oacute;n de las opciones <code>ownerPassword</code> y <code>headless</code>.
   Adicionalmente, si el fichero de entrada estaba cifrado y protegido con contrase&ntilde;a, la salida ser&aacute; un documento PDF
   igualmente cifrado y protegido con contrase&ntilde;a.
  </p>
  En general, es recomendable prescindir de este m&eacute;todo y llamar directamente al m&eacute;todo <code>sign(...)</code>.
 @param data Se ignora el valor de este par &aacute; metro.  <b> El documento PDF debe proporcionarse mediante el par &aacute; tro  <code> sign </code> </b> .
 @param sign Documento PDF a firmar.
 @param algorithm Algoritmo a usar para la firma.
 @param key Clave privada a usar para firmar.
 @param certChain Cadena de certificados del firmante.
 @param extraParams Par &aacute; metros adicionales para la firma ( <a href="doc-files/extraparams.html"> detalle </a> ).
 @return Documento PDF firmado en formato PAdES.
 @throw AOExceptionCuando ocurre cualquier problema durante el proceso.
 @throw IOExceptionEn caso de errores de entrada / salida.
 */
- (IOSByteArray *)cosignWithByteArray:(IOSByteArray *)data
                        withByteArray:(IOSByteArray *)sign
                         withNSString:(NSString *)algorithm
           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
               withJavaUtilProperties:(JavaUtilProperties *)extraParams;

/*!
 @brief A&ntilde;ade una firma PAdES a un documento PDF.El comportamiento es exactamente el mismo que una llamada al m&eacute;todo <code>sign(...)
 </code>
  puesto que las multifirmas en los ficheros PDF se limitan a firmas independientes "en serie", pero no implementando los mecanismos de
  cofirma o contrafirma de CAdES. 
 <p>
   Notas sobre documentos <i>certificados</i>:<br>
   Si un PDF firmado se ha certificado (por ejemplo, a&ntilde;adiendo una firma electr&oacute;nica usando Adobe Reader), cualquier
   modificaci&oacute;n posterior del fichero (como la adici&oacute;n de nuevas firmas con este m&eacute;todo) invalidar&aacute;
   las firmas previamente existentes.<br>
   Si se detecta un documento PDF certificado, se mostrar&aacute; un di&aacute;logo gr&aacute;fico advirtiendo al usuario de esta
   situaci&oacute;n y pidiendo confirmaci&oacute;n para continuar.<br>Si desea evitar interacciones directas con los usuarios
   consulte la documentaci&oacute;n de las opciones <code>allowSigningCertifiedPdfs</code> y <code>headless</code>.<br>
  </p>
  <p>
   Notas sobre documentos protegidos con contrase&ntilde;a:<br>
   Si un PDF est&aacute; protegido con contrase&ntilde;a por estar cifrado, se mostrar&aacute; un di&aacute;logo gr&aacute;fico advirtiendo al usuario de esta
   situaci&oacute;n y solicitando la contrase&ntilde;a de apertura del PDF.<br>Si desea evitar interacciones directas con los usuarios
   consulte la documentaci&oacute;n de las opciones <code>ownerPassword</code> y <code>headless</code>.
   Adicionalmente, si el fichero de entrada estaba cifrado y protegido con contrase&ntilde;a, la salida ser&aacute; un documento PDF
   igualmente cifrado y protegido con contrase&ntilde;a.
  </p>
  En general, es recomendable prescindir de este m&eacute;todo y llamar directamente al m&eacute;todo <code>sign(...)</code>
 @param sign Documento PDF a firmar
 @param algorithm Algoritmo a usar para la firma.
 @param key Clave privada a usar para firmar.
 @param certChain Cadena de certificados del firmante.
 @param extraParams Par &aacute; metros adicionales para la firma ( <a href="doc-files/extraparams.html"> detalle </a> ).
 @return Documento PDF firmado en formato PAdES.
 @throw AOExceptionCuando ocurre cualquier problema durante el proceso.
 @throw IOExceptionEn caso de errores de entrada / salida.
 */
- (IOSByteArray *)cosignWithByteArray:(IOSByteArray *)sign
                         withNSString:(NSString *)algorithm
           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
               withJavaUtilProperties:(JavaUtilProperties *)extraParams;

/*!
 @brief Operaci&oacute;n no soportada para firmas PAdES.
 */
- (IOSByteArray *)countersignWithByteArray:(IOSByteArray *)sign
                              withNSString:(NSString *)algorithm
withEsGobAfirmaCoreSignersCounterSignTarget:(EsGobAfirmaCoreSignersCounterSignTarget *)targetType
                         withNSObjectArray:(IOSObjectArray *)targets
                withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
      withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
                    withJavaUtilProperties:(JavaUtilProperties *)extraParams;

/*!
 @brief Si la entrada es un documento PDF, devuelve el mismo documento PDF.
 @param sign Documento PDF
 @return Mismo documento PDF de entrada, sin modificar en ning&uacute; aspecto.
 @throw AOInvalidFormatExceptionSi los datos de entrada no son un documento PDF.
 */
- (IOSByteArray *)getDataWithByteArray:(IOSByteArray *)sign;

/*!
 @brief Si la entrada es un documento PDF, devuelve el mismo documento PDF.
 @param sign Documento PDF
 @param params Par &aacute; metros de la firma.
 @return Mismo documento PDF de entrada, sin modificar en ning&uacute; aspecto.
 @throw AOInvalidFormatExceptionSi los datos de entrada no son un documento PDF.
 */
- (IOSByteArray *)getDataWithByteArray:(IOSByteArray *)sign
                withJavaUtilProperties:(JavaUtilProperties *)params;

/*!
 @brief Obtiene el nombre con el que deber&iacute;a guardarse un PDF tras ser
  firmado.B&aacute;sicamente se le anexa el sufijo <i>.signed</i> al
  nombre original, manteniendo la extensi&oacute;n (se respetan
  may&uacute;culas y min&uacute;sculas en esta, pero no se admite una
  extensi&oacute;n con mezcla de ambas).
 @param originalName Nombre original del fichero PDF.
 @return Nombre recomendado para el PDF ya firmado.
 */
+ (NSString *)getSignedNameWithNSString:(NSString *)originalName;

/*!
 @brief Devuelve el nombre de fichero de firma predeterminado que se recomienda usar para
  un PDF firmado con nombre original igual al proporcionado.
 En este caso el resultado ser&aacute; siempre el nombre original m&aacute;s un
  sufijo adicional (opcional) previo a la extensi&oacute;n.
  Siempre se termina el nombre de fichero con la extensi&oacute;n <i>.pdf</i>, incluso si el nombre original carec&iacute;a de esta.
 @param originalName Nombre del fichero original que se firma.
 @param inText Sufijo a agregar al nombre de fichero devuelto, inmediatamente anterior a la extensi &oacute; n.
 @return Nombre apropiado para el fichero de firma.
 */
- (NSString *)getSignedNameWithNSString:(NSString *)originalName
                           withNSString:(NSString *)inText;

/*!
 @brief Obtiene el mejorador de firmas por defecto.
 @return Mejorador de firmas por defecto.
 */
+ (id<EsGobAfirmaCoreSignersSignEnhancer>)getSignEnhancer;

/*!
 @brief Obtiene la configuraci&oacute;n del mejorador de firmas por defecto.
 @return Configuraci&oacute;n del mejorador de firmas por defecto.
 */
+ (JavaUtilProperties *)getSignEnhancerConfig;

/*!
 @brief Recupera el &aacute;rbol de nodos de firma de una firma electr&oacute;nica.
 Los nodos del &aacute;rbol ser&aacute;n textos con el <i>CommonName</i> (CN X.500)
  del titular del certificado u objetos de tipo AOSimpleSignInfo con la
  informaci&oacute;n b&aacute;sica de las firmas individuales, seg&uacute;n
  el valor del par&aacute;metro <code>asSimpleSignInfo</code>. Los nodos se
  mostrar&aacute;n en el mismo orden y con la misma estructura con el que
  aparecen en la firma electr&oacute;nica.<br>
  La propia estructura de firma se considera el nodo ra&iacute;z, la firma y cofirmas
  pender&aacute;n directamentede de este.
 @param sign Firma electr &oacute; nica de la que se desea obtener la estructura.
 @param asSimpleSignInfo Si es  <code> true </code>  se devuelve un  &aacute; rbol con la                          informaci &oacute; n b &aacute; sica de cada firma individual                          mediante objetos  <code> AOSimpleSignInfo </code> , si es  <code> false </code>                          un  &aacute; rbol con los nombres (CN X.500) de los titulares certificados.
 @return &Aacute;rbol de nodos de firma o <code>null</code> en caso de error.
 */
- (EsGobAfirmaCoreUtilTreeAOTreeModel *)getSignersStructureWithByteArray:(IOSByteArray *)sign
                                                             withBoolean:(jboolean)asSimpleSignInfo;

/*!
 @brief Recupera el &aacute;rbol de nodos de firma de una firma electr&oacute;nica.
 Los nodos del &aacute;rbol ser&aacute;n textos con el <i>CommonName</i> (CN X.500)
  del titular del certificado u objetos de tipo AOSimpleSignInfo con la
  informaci&oacute;n b&aacute;sica de las firmas individuales, seg&uacute;n
  el valor del par&aacute;metro <code>asSimpleSignInfo</code>. Los nodos se
  mostrar&aacute;n en el mismo orden y con la misma estructura con el que
  aparecen en la firma electr&oacute;nica.<br>
  La propia estructura de firma se considera el nodo ra&iacute;z, la firma y cofirmas
  pender&aacute;n directamentede de este.
 @param sign Firma electr &oacute; nica de la que se desea obtener la estructura.
 @param params necesarios para comprobar si los datos son una firma compatible.
 @param asSimpleSignInfo Si es  <code> true </code>  se devuelve un  &aacute; rbol con la                          informaci &oacute; n b &aacute; sica de cada firma individual                          mediante objetos  <code> AOSimpleSignInfo </code> , si es  <code> false </code>                          un  &aacute; rbol con los nombres (CN X.500) de los titulares certificados.
 @return &Aacute;rbol de nodos de firma o <code>null</code> en caso de error.
 */
- (EsGobAfirmaCoreUtilTreeAOTreeModel *)getSignersStructureWithByteArray:(IOSByteArray *)sign
                                                  withJavaUtilProperties:(JavaUtilProperties *)params
                                                             withBoolean:(jboolean)asSimpleSignInfo;

/*!
 @brief Si la entrada es un documento PDF, devuelve un objeto <code>AOSignInfo</code>
  con el formato establecido a <code>AOSignConstants.SIGN_FORMAT_PDF</code>.
 @param data Documento PDF.
 @return Objeto <code>AOSignInfo</code> con el formato establecido a <code>AOSignConstants.SIGN_FORMAT_PDF</code>.
 @throw AOExceptionSi los datos de entrada no son un documento PDF.
 */
- (EsGobAfirmaCoreSignersAOSignInfo *)getSignInfoWithByteArray:(IOSByteArray *)data;

/*!
 @brief Si la entrada es un documento PDF, devuelve un objeto <code>AOSignInfo</code>
  con el formato establecido a <code>AOSignConstants.SIGN_FORMAT_PDF</code>.
 @param data Documento PDF.
 @param params Par &aacute; metros de firma.
 @return Objeto <code>AOSignInfo</code> con el formato establecido a <code>AOSignConstants.SIGN_FORMAT_PDF</code>.
 @throw AOExceptionSi los datos de entrada no son un documento PDF.
 */
- (EsGobAfirmaCoreSignersAOSignInfo *)getSignInfoWithByteArray:(IOSByteArray *)data
                                        withJavaUtilProperties:(JavaUtilProperties *)params;

- (jboolean)isSecureMode;

/*!
 @brief Comprueba que los datos proporcionados sean un documento PDF.
 @param data Datos a comprobar.
 @return <code>true</code> si los datos proporcionados son un documento PDF,
          <code>false</code> en caso contrario.
 */
- (jboolean)isSignWithByteArray:(IOSByteArray *)data;

/*!
 @brief Comprueba que los datos proporcionados sean un documento PDF.
 @param data Datos a comprobar.
 @param params Par &aacute; metros de la firma.
 @return <code>true</code> si los datos proporcionados son un documento PDF,
          <code>false</code> en caso contrario.
 */
- (jboolean)isSignWithByteArray:(IOSByteArray *)data
         withJavaUtilProperties:(JavaUtilProperties *)params;

/*!
 @brief Comprueba que los datos proporcionados sean un documento PDF.
 @param data Datos a comprobar
 @return <code>true</code> si los datos proporcionados son un documento PDF, <code>false</code> en caso contrario
 */
- (jboolean)isValidDataFileWithByteArray:(IOSByteArray *)data;

- (void)setSecureModeWithBoolean:(jboolean)secure;

/*!
 @brief Firma un documento PDF en formato PAdES.
 <p>
   Notas sobre documentos <i>certificados</i>:<br>
   Si un PDF firmado se ha certificado (por ejemplo, a&ntilde;adiendo una firma electr&oacute;nica usando Adobe Acrobat), cualquier
   modificaci&oacute;n posterior del fichero (como la adici&oacute;n de nuevas firmas con este m&eacute;todo) invalidar&aacute;
   las firmas previamente existentes.<br>
   Si se detecta un documento PDF certificado, se mostrar&aacute; un di&aacute;logo gr&aacute;fico advirtiendo al usuario de esta
   situaci&oacute;n y pidiendo confirmaci&oacute;n para continuar.<br>Si desea evitar interacciones directas con los usuarios
   consulte la documentaci&oacute;n de las opciones <code>allowSigningCertifiedPdfs</code> y <code>headless</code>.<br>
  </p>
  <p>
   Notas sobre documentos protegidos con contrase&ntilde;a:<br>
   Si un PDF est&aacute; protegido con contrase&ntilde;a por estar cifrado, se mostrar&aacute; un di&aacute;logo gr&aacute;fico advirtiendo al usuario de esta
   situaci&oacute;n y solicitando la contrase&ntilde;a de apertura del PDF.<br>Si desea evitar interacciones directas con los usuarios
   consulte la documentaci&oacute;n de las opciones <code>ownerPassword</code> y <code>headless</code>.
   Adicionalmente, si el fichero de entrada estaba cifrado y protegido con contrase&ntilde;a, la salida ser&aacute;a un documento PDF
   igualmente cifrado y protegido con contrase&ntilde;a..
  </p>
 @param inPDF Documento PDF a firmar.
 @param signAlgorithm Algoritmo a usar para la firma.
 @param key Clave privada a usar para firmar.
 @param certChain Cadena de certificados del firmante.
 @param xParams Par &aacute; metros adicionales para la firma ( <a href="doc-files/extraparams.html"> detalle </a> ).
 @return Documento PDF firmado en formato PAdES.
 @throw AOExceptionCuando ocurre cualquier problema durante el proceso.
 @throw IOExceptionCuando hay errores en el tratamiento de datos.
 */
- (IOSByteArray *)signWithByteArray:(IOSByteArray *)inPDF
                       withNSString:(NSString *)signAlgorithm
         withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
             withJavaUtilProperties:(JavaUtilProperties *)xParams;

@end

J2OBJC_STATIC_INIT(EsGobAfirmaSignersPadesAOPDFSigner)

inline ComAowagieTextPdfPdfName *EsGobAfirmaSignersPadesAOPDFSigner_get_PDFNAME_ETSI_RFC3161(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComAowagieTextPdfPdfName *EsGobAfirmaSignersPadesAOPDFSigner_PDFNAME_ETSI_RFC3161;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesAOPDFSigner, PDFNAME_ETSI_RFC3161, ComAowagieTextPdfPdfName *)

inline ComAowagieTextPdfPdfName *EsGobAfirmaSignersPadesAOPDFSigner_get_PDFNAME_DOCTIMESTAMP(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComAowagieTextPdfPdfName *EsGobAfirmaSignersPadesAOPDFSigner_PDFNAME_DOCTIMESTAMP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesAOPDFSigner, PDFNAME_DOCTIMESTAMP, ComAowagieTextPdfPdfName *)

FOUNDATION_EXPORT void EsGobAfirmaSignersPadesAOPDFSigner_init(EsGobAfirmaSignersPadesAOPDFSigner *self);

FOUNDATION_EXPORT EsGobAfirmaSignersPadesAOPDFSigner *new_EsGobAfirmaSignersPadesAOPDFSigner_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaSignersPadesAOPDFSigner *create_EsGobAfirmaSignersPadesAOPDFSigner_init(void);

FOUNDATION_EXPORT id<EsGobAfirmaCoreSignersSignEnhancer> EsGobAfirmaSignersPadesAOPDFSigner_getSignEnhancer(void);

FOUNDATION_EXPORT JavaUtilProperties *EsGobAfirmaSignersPadesAOPDFSigner_getSignEnhancerConfig(void);

FOUNDATION_EXPORT NSString *EsGobAfirmaSignersPadesAOPDFSigner_getSignedNameWithNSString_(NSString *originalName);

FOUNDATION_EXPORT void EsGobAfirmaSignersPadesAOPDFSigner_configureRespectfulPropertiesWithByteArray_withJavaUtilProperties_(IOSByteArray *data, JavaUtilProperties *config);

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaSignersPadesAOPDFSigner)

#endif

#pragma pop_macro("INCLUDE_ALL_EsGobAfirmaSignersPadesAOPDFSigner")
