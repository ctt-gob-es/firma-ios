//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/signers/pades/PdfTextMask.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/afirma/signers/pades/PdfTextMask.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"

#if !__has_feature(objc_arc)
#error "es/gob/afirma/signers/pades/PdfTextMask must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaSignersPadesPdfTextMask () {
 @public
  /*!
   @brief Caracter sustitutivo.
   */
  jchar obfuscatedChar_;
  /*!
   @brief Longitud minima de digitos para identificar una cadena como objetivo a
  ofuscar.
   */
  jint minLength_;
  /*!
   @brief M&aacute;scara con las posiciones que no deben mostrarse (<code>false</code>)
  y las que s&iacute; (<code>true</code>).
   */
  IOSBooleanArray *positions_;
  /*!
   @brief Indica si la mascara debe aplicarse de forma fiel o si deber&iacute;an
  desplazarse adelante los caracteres que deben ser visibles.
   */
  jboolean shiftSupported_;
}

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaSignersPadesPdfTextMask, positions_, IOSBooleanArray *)

/*!
 @brief Caracter sustitutivo a utilizar por defecto.
 */
inline jchar EsGobAfirmaSignersPadesPdfTextMask_get_DEFAULT_OBFUSCATED_CHAR(void);
#define EsGobAfirmaSignersPadesPdfTextMask_DEFAULT_OBFUSCATED_CHAR '*'
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaSignersPadesPdfTextMask, DEFAULT_OBFUSCATED_CHAR, jchar)

/*!
 @brief Longitud m&iacute;nima de digitos consecutivos para considerar que un
  texto es un identificador a ser ofuscado
 */
inline jint EsGobAfirmaSignersPadesPdfTextMask_get_DEFAULT_MIN_NUMBER_LENGTH(void);
#define EsGobAfirmaSignersPadesPdfTextMask_DEFAULT_MIN_NUMBER_LENGTH 3
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaSignersPadesPdfTextMask, DEFAULT_MIN_NUMBER_LENGTH, jint)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/signers/pades/PdfTextMask.java"


#line 6
@implementation EsGobAfirmaSignersPadesPdfTextMask

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 32
- (instancetype)init {
  EsGobAfirmaSignersPadesPdfTextMask_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 42
- (void)setObfuscatedCharWithChar:(jchar)ofuscatedChar {
  self->obfuscatedChar_ = ofuscatedChar;
}


#line 49
- (jchar)getObfuscatedChar {
  return self->obfuscatedChar_;
}


#line 57
- (void)setMinLengthWithInt:(jint)minLength {
  self->minLength_ = minLength;
}


#line 65
- (jint)getMinLength {
  return self->minLength_;
}


#line 73
- (void)setPositionsWithBooleanArray:(IOSBooleanArray *)positions {
  self->positions_ = positions != nil ? [positions java_clone] : nil;
}


#line 81
- (IOSBooleanArray *)getPositions {
  return self->positions_ != nil ? [self->positions_ java_clone] : nil;
}


#line 91
- (void)setShiftSupportedWithBoolean:(jboolean)shiftSupported {
  self->shiftSupported_ = shiftSupported;
}


#line 101
- (jboolean)isShiftSupported {
  return self->shiftSupported_;
}


#line 126
+ (EsGobAfirmaSignersPadesPdfTextMask *)parseParamWithNSString:(NSString *)param {
  return EsGobAfirmaSignersPadesPdfTextMask_parseParamWithNSString_(param);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "[Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaSignersPadesPdfTextMask;", 0x9, 8, 9, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setObfuscatedCharWithChar:);
  methods[2].selector = @selector(getObfuscatedChar);
  methods[3].selector = @selector(setMinLengthWithInt:);
  methods[4].selector = @selector(getMinLength);
  methods[5].selector = @selector(setPositionsWithBooleanArray:);
  methods[6].selector = @selector(getPositions);
  methods[7].selector = @selector(setShiftSupportedWithBoolean:);
  methods[8].selector = @selector(isShiftSupported);
  methods[9].selector = @selector(parseParamWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_OBFUSCATED_CHAR", "C", .constantValue.asUnichar = EsGobAfirmaSignersPadesPdfTextMask_DEFAULT_OBFUSCATED_CHAR, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_MIN_NUMBER_LENGTH", "I", .constantValue.asInt = EsGobAfirmaSignersPadesPdfTextMask_DEFAULT_MIN_NUMBER_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "obfuscatedChar_", "C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "minLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "positions_", "[Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "shiftSupported_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setObfuscatedChar", "C", "setMinLength", "I", "setPositions", "[Z", "setShiftSupported", "Z", "parseParam", "LNSString;", "LJavaLangIllegalArgumentException;" };
  static const J2ObjcClassInfo _EsGobAfirmaSignersPadesPdfTextMask = { "PdfTextMask", "es.gob.afirma.signers.pades", ptrTable, methods, fields, 7, 0x1, 10, 6, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaSignersPadesPdfTextMask;
}

@end


#line 32
void EsGobAfirmaSignersPadesPdfTextMask_init(EsGobAfirmaSignersPadesPdfTextMask *self) {
  NSObject_init(self);
  
#line 33
  self->obfuscatedChar_ = EsGobAfirmaSignersPadesPdfTextMask_DEFAULT_OBFUSCATED_CHAR;
  self->minLength_ = EsGobAfirmaSignersPadesPdfTextMask_DEFAULT_MIN_NUMBER_LENGTH;
  self->positions_ = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ false, false, false, true, true, true, true } count:7];
  self->shiftSupported_ = true;
}


#line 32
EsGobAfirmaSignersPadesPdfTextMask *new_EsGobAfirmaSignersPadesPdfTextMask_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaSignersPadesPdfTextMask, init)
}


#line 32
EsGobAfirmaSignersPadesPdfTextMask *create_EsGobAfirmaSignersPadesPdfTextMask_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaSignersPadesPdfTextMask, init)
}


#line 126
EsGobAfirmaSignersPadesPdfTextMask *EsGobAfirmaSignersPadesPdfTextMask_parseParamWithNSString_(NSString *param) {
  EsGobAfirmaSignersPadesPdfTextMask_initialize();
  EsGobAfirmaSignersPadesPdfTextMask *mask = new_EsGobAfirmaSignersPadesPdfTextMask_init();
  
#line 130
  jchar character = 0x0000;
  jint length = -1;
  IOSBooleanArray *positions = nil;
  jboolean shiftment;
  
#line 135
  IOSObjectArray *elements = [((NSString *) nil_chk(param)) java_split:@";"];
  if (((IOSObjectArray *) nil_chk(elements))->size_ == 4) {
    
#line 139
    if ([((NSString *) nil_chk(IOSObjectArray_Get(elements, 0))) java_length] != 1) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No se indico un caracter de ofuscacion unico");
    }
    character = [((NSString *) nil_chk(IOSObjectArray_Get(elements, 0))) charAtWithInt:0];
    
#line 145
    jboolean isNumber = true;
    {
      IOSCharArray *a__ =
#line 146
      [((NSString *) nil_chk(IOSObjectArray_Get(elements, 1))) java_toCharArray];
      jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
      jchar const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jchar c = *b__++;
        
#line 147
        if (!JavaLangCharacter_isDigitWithChar_(c)) {
          isNumber = false;
        }
      }
    }
    
#line 151
    if (!isNumber) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No se indico un numero valido de digitos minimos");
    }
    length = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(elements, 1));
    
#line 157
    IOSObjectArray *positionLists = [((NSString *) nil_chk(IOSObjectArray_Get(elements, 2))) java_split:@","];
    if (((IOSObjectArray *) nil_chk(positionLists))->size_ <= 1) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No se indico un listado de posiciones valido");
    }
    jint pos = positionLists->size_ - 1;
    while (pos >= 0 && !JavaLangBoolean_parseBooleanWithNSString_(IOSObjectArray_Get(positionLists, pos))) {
      pos--;
    }
    if (pos > 0) {
      positions = [IOSBooleanArray newArrayWithLength:pos + 1];
      for (jint i = 0; i < positions->size_; i++) {
        *IOSBooleanArray_GetRef(positions, i) = JavaLangBoolean_parseBooleanWithNSString_(IOSObjectArray_Get(positionLists, i));
      }
    }
    
#line 172
    shiftment = JavaLangBoolean_parseBooleanWithNSString_(IOSObjectArray_Get(elements, 3));
    
#line 174
    if (character != 0x0000 && length > -1 && positions != nil) {
      [mask setObfuscatedCharWithChar:character];
      [mask setMinLengthWithInt:length];
      [mask setPositionsWithBooleanArray:positions];
      [mask setShiftSupportedWithBoolean:shiftment];
    }
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El numero de elementos de la mascara no es valido");
  }
  
#line 185
  return mask;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaSignersPadesPdfTextMask)
