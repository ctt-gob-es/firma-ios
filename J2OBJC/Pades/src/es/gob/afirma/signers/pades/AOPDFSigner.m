//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/signers/pades/AOPDFSigner.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/exceptions/BadPasswordException.h"
#include "com/aowagie/text/pdf/AcroFields.h"
#include "com/aowagie/text/pdf/PdfDictionary.h"
#include "com/aowagie/text/pdf/PdfName.h"
#include "com/aowagie/text/pdf/PdfObject.h"
#include "com/aowagie/text/pdf/PdfPKCS7.h"
#include "com/aowagie/text/pdf/PdfReader.h"
#include "es/gob/afirma/core/AOCancelledOperationException.h"
#include "es/gob/afirma/core/AOException.h"
#include "es/gob/afirma/core/AOInvalidFormatException.h"
#include "es/gob/afirma/core/misc/AOUtil.h"
#include "es/gob/afirma/core/signers/AOPkcs1Signer.h"
#include "es/gob/afirma/core/signers/AOSignConstants.h"
#include "es/gob/afirma/core/signers/AOSignInfo.h"
#include "es/gob/afirma/core/signers/AOSimpleSignInfo.h"
#include "es/gob/afirma/core/signers/CounterSignTarget.h"
#include "es/gob/afirma/core/signers/SignEnhancer.h"
#include "es/gob/afirma/core/util/tree/AOTreeModel.h"
#include "es/gob/afirma/core/util/tree/AOTreeNode.h"
#include "es/gob/afirma/signers/pades/AOPDFSigner.h"
#include "es/gob/afirma/signers/pades/InvalidPdfException.h"
#include "es/gob/afirma/signers/pades/PAdESTriPhaseSigner.h"
#include "es/gob/afirma/signers/pades/PdfSignResult.h"
#include "es/gob/afirma/signers/pades/PdfUtil.h"
#include "es/gob/afirma/signers/pades/common/PdfExtraParams.h"
#include "es/gob/afirma/signers/pades/common/PdfIsPasswordProtectedException.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/PrivateKey.h"
#include "java/security/Provider.h"
#include "java/security/Security.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Properties.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

#if !__has_feature(objc_arc)
#error "es/gob/afirma/signers/pades/AOPDFSigner must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaSignersPadesAOPDFSigner () {
 @public
  /*!
   @brief Modo seguro.Si no esta activado se permiten algunas operaciones, como el uso de rutas a los
  datos en algunos extraParams en lugar de proporcionar estos datos en Base64.
   */
  jboolean secureMode_;
}

+ (jboolean)isPdfFileWithByteArray:(IOSByteArray *)data;

+ (JavaUtilProperties *)getExtraParamsWithJavaUtilProperties:(JavaUtilProperties *)extraParams;

+ (void)checkParamsWithNSString:(NSString *)algorithm
         withJavaUtilProperties:(JavaUtilProperties *)extraParams;

@end

inline NSString *EsGobAfirmaSignersPadesAOPDFSigner_get_PDF_FILE_SUFFIX(void);
static NSString *EsGobAfirmaSignersPadesAOPDFSigner_PDF_FILE_SUFFIX = @".pdf";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesAOPDFSigner, PDF_FILE_SUFFIX, NSString *)

inline NSString *EsGobAfirmaSignersPadesAOPDFSigner_get_PDF_FILE_HEADER(void);
static NSString *EsGobAfirmaSignersPadesAOPDFSigner_PDF_FILE_HEADER = @"%PDF-";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesAOPDFSigner, PDF_FILE_HEADER, NSString *)

inline JavaUtilLoggingLogger *EsGobAfirmaSignersPadesAOPDFSigner_get_LOGGER(void);
static JavaUtilLoggingLogger *EsGobAfirmaSignersPadesAOPDFSigner_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesAOPDFSigner, LOGGER, JavaUtilLoggingLogger *)

/*!
 @brief Tama&ntilde;o m&iacute;nimo de un PDF.
 <a href="https://stackoverflow.com/questions/17279712/what-is-the-smallest-possible-valid-pdf">
    https://stackoverflow.com/questions/17279712/what-is-the-smallest-possible-valid-pdf 
 </a>.
 */
inline jint EsGobAfirmaSignersPadesAOPDFSigner_get_PDF_MIN_FILE_SIZE(void);
#define EsGobAfirmaSignersPadesAOPDFSigner_PDF_MIN_FILE_SIZE 70
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaSignersPadesAOPDFSigner, PDF_MIN_FILE_SIZE, jint)

inline id<EsGobAfirmaCoreSignersSignEnhancer> EsGobAfirmaSignersPadesAOPDFSigner_get_enhancer(void);
inline id<EsGobAfirmaCoreSignersSignEnhancer> EsGobAfirmaSignersPadesAOPDFSigner_set_enhancer(id<EsGobAfirmaCoreSignersSignEnhancer> value);
static id<EsGobAfirmaCoreSignersSignEnhancer> EsGobAfirmaSignersPadesAOPDFSigner_enhancer;
J2OBJC_STATIC_FIELD_OBJ(EsGobAfirmaSignersPadesAOPDFSigner, enhancer, id<EsGobAfirmaCoreSignersSignEnhancer>)

inline JavaUtilProperties *EsGobAfirmaSignersPadesAOPDFSigner_get_enhancerConfig(void);
inline JavaUtilProperties *EsGobAfirmaSignersPadesAOPDFSigner_set_enhancerConfig(JavaUtilProperties *value);
static JavaUtilProperties *EsGobAfirmaSignersPadesAOPDFSigner_enhancerConfig;
J2OBJC_STATIC_FIELD_OBJ(EsGobAfirmaSignersPadesAOPDFSigner, enhancerConfig, JavaUtilProperties *)

__attribute__((unused)) static jboolean EsGobAfirmaSignersPadesAOPDFSigner_isPdfFileWithByteArray_(IOSByteArray *data);

__attribute__((unused)) static JavaUtilProperties *EsGobAfirmaSignersPadesAOPDFSigner_getExtraParamsWithJavaUtilProperties_(JavaUtilProperties *extraParams);

__attribute__((unused)) static void EsGobAfirmaSignersPadesAOPDFSigner_checkParamsWithNSString_withJavaUtilProperties_(NSString *algorithm, JavaUtilProperties *extraParams);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/signers/pades/AOPDFSigner.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaSignersPadesAOPDFSigner)

ComAowagieTextPdfPdfName *EsGobAfirmaSignersPadesAOPDFSigner_PDFNAME_ETSI_RFC3161;
ComAowagieTextPdfPdfName *EsGobAfirmaSignersPadesAOPDFSigner_PDFNAME_DOCTIMESTAMP;


#line 68
@implementation EsGobAfirmaSignersPadesAOPDFSigner

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 68
- (instancetype)init {
  EsGobAfirmaSignersPadesAOPDFSigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 133
+ (id<EsGobAfirmaCoreSignersSignEnhancer>)getSignEnhancer {
  return EsGobAfirmaSignersPadesAOPDFSigner_getSignEnhancer();
}


#line 139
+ (JavaUtilProperties *)getSignEnhancerConfig {
  return EsGobAfirmaSignersPadesAOPDFSigner_getSignEnhancerConfig();
}


#line 169
- (IOSByteArray *)signWithByteArray:(IOSByteArray *)inPDF
                       withNSString:(NSString *)signAlgorithm
         withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
             withJavaUtilProperties:(JavaUtilProperties *)xParams {
  
#line 177
  NSString *algorithm = signAlgorithm != nil ? signAlgorithm : EsGobAfirmaCoreSignersAOSignConstants_DEFAULT_SIGN_ALGO;
  JavaUtilProperties *extraParams = EsGobAfirmaSignersPadesAOPDFSigner_getExtraParamsWithJavaUtilProperties_(xParams);
  
#line 180
  EsGobAfirmaSignersPadesAOPDFSigner_checkParamsWithNSString_withJavaUtilProperties_(algorithm, extraParams);
  
#line 182
  IOSObjectArray *certificateChain = JavaLangBoolean_parseBooleanWithNSString_([((JavaUtilProperties *) nil_chk(extraParams)) getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_INCLUDE_ONLY_SIGNNING_CERTIFICATE withNSString:[((JavaLangBoolean *) nil_chk(JreLoadStatic(JavaLangBoolean, FALSE))) description]]) ? [IOSObjectArray newArrayWithObjects:(id[]){
#line 183
    (JavaSecurityCertX509Certificate *) cast_chk(IOSObjectArray_Get(nil_chk(certChain), 0), [JavaSecurityCertX509Certificate class]) } count:1 type:JavaSecurityCertX509Certificate_class_()] :
#line 184
    certChain;
    
#line 186
    JavaUtilGregorianCalendar *signTime = EsGobAfirmaSignersPadesPdfUtil_getSignTimeWithNSString_([extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGN_TIME]);
    
#line 188
    IOSByteArray *data = inPDF;
    
#line 191
    EsGobAfirmaSignersPadesPdfSignResult *pre;
    @try {
      pre = EsGobAfirmaSignersPadesPAdESTriPhaseSigner_preSignWithNSString_withByteArray_withJavaSecurityCertCertificateArray_withJavaUtilGregorianCalendar_withJavaUtilProperties_withBoolean_(
#line 194
      algorithm,
#line 195
      data,
#line 196
      certificateChain,
#line 197
      signTime,
#line 198
      extraParams,
#line 199
      self->secureMode_);
    }
    @catch (
#line 202
    EsGobAfirmaSignersPadesInvalidPdfException *e) {
      @throw e;
    }
    
#line 207
    IOSByteArray *interSign;
    @try {
      interSign = [new_EsGobAfirmaCoreSignersAOPkcs1Signer_init() signWithByteArray:
#line 210
      [((EsGobAfirmaSignersPadesPdfSignResult *) nil_chk(pre)) getSign] withNSString:
#line 211
      algorithm withJavaSecurityPrivateKey:
#line 212
      key withJavaSecurityCertCertificateArray:
#line 213
      certificateChain withJavaUtilProperties:
#line 214
      extraParams];
    }
    @catch (
#line 217
    EsGobAfirmaCoreAOCancelledOperationException *e) {
      @throw e;
    }
    @catch (JavaLangException *e) {
      @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error al generar la firma PKCS#1 de la firma PAdES: ", e), e);
    }
    
#line 225
    @try {
      return EsGobAfirmaSignersPadesPAdESTriPhaseSigner_postSignWithNSString_withByteArray_withJavaSecurityCertCertificateArray_withByteArray_withEsGobAfirmaSignersPadesPdfSignResult_withEsGobAfirmaCoreSignersSignEnhancer_withJavaUtilProperties_withBoolean_(
#line 227
      algorithm,
#line 228
      data,
#line 229
      certificateChain,
#line 230
      interSign,
#line 231
      pre, EsGobAfirmaSignersPadesAOPDFSigner_getSignEnhancer(), EsGobAfirmaSignersPadesAOPDFSigner_getSignEnhancerConfig(),
#line 234
      self->secureMode_);
    }
    @catch (
#line 237
    JavaSecurityNoSuchAlgorithmException *e) {
      @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error el en algoritmo de firma: ", e), e);
    }
  }


#line 273
- (IOSByteArray *)cosignWithByteArray:(IOSByteArray *)data
                        withByteArray:(IOSByteArray *)sign
                         withNSString:(NSString *)algorithm
           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
               withJavaUtilProperties:(JavaUtilProperties *)extraParams {
  
#line 280
  return [self signWithByteArray:sign withNSString:algorithm withJavaSecurityPrivateKey:key withJavaSecurityCertCertificateArray:certChain withJavaUtilProperties:extraParams];
}


#line 312
- (IOSByteArray *)cosignWithByteArray:(IOSByteArray *)sign
                         withNSString:(NSString *)algorithm
           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
               withJavaUtilProperties:(JavaUtilProperties *)extraParams {
  
#line 318
  return [self signWithByteArray:sign withNSString:algorithm withJavaSecurityPrivateKey:key withJavaSecurityCertCertificateArray:certChain withJavaUtilProperties:extraParams];
}

- (IOSByteArray *)countersignWithByteArray:(IOSByteArray *)sign
                              withNSString:(NSString *)algorithm
withEsGobAfirmaCoreSignersCounterSignTarget:(EsGobAfirmaCoreSignersCounterSignTarget *)targetType
                         withNSObjectArray:(IOSObjectArray *)targets
                withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
      withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
                    withJavaUtilProperties:(JavaUtilProperties *)extraParams {
  
#line 330
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No es posible realizar contrafirmas de ficheros PDF");
}


#line 341
- (NSString *)getSignedNameWithNSString:(NSString *)originalName
                           withNSString:(NSString *)inText {
  NSString *inTextInt = inText != nil ? inText : @"";
  if (originalName == nil) {
    return @"signed.pdf";
  }
  if ([((NSString *) nil_chk([originalName java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_hasSuffix:EsGobAfirmaSignersPadesAOPDFSigner_PDF_FILE_SUFFIX]) {
    return JreStrcat("$$$", [originalName java_substring:0 endIndex:[originalName java_length] - [((NSString *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_PDF_FILE_SUFFIX)) java_length]], inTextInt, EsGobAfirmaSignersPadesAOPDFSigner_PDF_FILE_SUFFIX);
  }
  return JreStrcat("$$$", originalName, inTextInt, EsGobAfirmaSignersPadesAOPDFSigner_PDF_FILE_SUFFIX);
}


#line 368
- (EsGobAfirmaCoreUtilTreeAOTreeModel *)getSignersStructureWithByteArray:(IOSByteArray *)sign
                                                             withBoolean:(jboolean)asSimpleSignInfo {
  
#line 371
  return [self getSignersStructureWithByteArray:sign withJavaUtilProperties:nil withBoolean:asSimpleSignInfo];
}


#line 390
- (EsGobAfirmaCoreUtilTreeAOTreeModel *)getSignersStructureWithByteArray:(IOSByteArray *)sign
                                                  withJavaUtilProperties:(JavaUtilProperties *)params
                                                             withBoolean:(jboolean)asSimpleSignInfo {
  EsGobAfirmaCoreUtilTreeAOTreeNode *root = new_EsGobAfirmaCoreUtilTreeAOTreeNode_initWithId_(@"Datos");
  
#line 395
  if (!EsGobAfirmaSignersPadesAOPDFSigner_isPdfFileWithByteArray_(sign)) {
    return new_EsGobAfirmaCoreUtilTreeAOTreeModel_initWithEsGobAfirmaCoreUtilTreeAOTreeNode_(root);
  }
  
#line 399
  ComAowagieTextPdfPdfReader *pdfReader;
  jboolean headLessProp = false;
  @try {
    if (params != nil && [params containsKeyWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_HEADLESS]) {
      headLessProp = JavaLangBoolean_parseBooleanWithNSString_([params getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_HEADLESS]);
    }
    pdfReader = EsGobAfirmaSignersPadesPdfUtil_getPdfReaderWithByteArray_withJavaUtilProperties_withBoolean_(sign, params, headLessProp);
  }
  @catch (ComAowagieTextExceptionsBadPasswordException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) infoWithNSString:JreStrcat("$@", @"El PDF necesita contrasena. Se devolvera el arbol vacio: ",
#line 409
    e)];
    
#line 411
    return new_EsGobAfirmaCoreUtilTreeAOTreeModel_initWithEsGobAfirmaCoreUtilTreeAOTreeNode_(root);
  }
  @catch (EsGobAfirmaSignersPadesCommonPdfIsPasswordProtectedException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) infoWithNSString:JreStrcat("$@", @"El PDF necesita contrasena.",
#line 415
    e)];
    
#line 417
    return new_EsGobAfirmaCoreUtilTreeAOTreeModel_initWithEsGobAfirmaCoreUtilTreeAOTreeNode_(root);
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) severeWithNSString:JreStrcat("$@", @"No se ha podido leer el PDF, se devolvera un arbol vacio: ", e)];
    return new_EsGobAfirmaCoreUtilTreeAOTreeModel_initWithEsGobAfirmaCoreUtilTreeAOTreeNode_(root);
  }
  
#line 424
  ComAowagieTextPdfAcroFields *af;
  @try {
    af = [((ComAowagieTextPdfPdfReader *) nil_chk(pdfReader)) getAcroFields];
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) severeWithNSString:JreStrcat("$@", @"No se ha podido obtener la informacion de los firmantes del PDF, se devolvera un arbol vacio: ", e)];
    return new_EsGobAfirmaCoreUtilTreeAOTreeModel_initWithEsGobAfirmaCoreUtilTreeAOTreeNode_(root);
  }
  
#line 433
  id<JavaUtilList> names = [((ComAowagieTextPdfAcroFields *) nil_chk(af)) getSignatureNames];
  for (NSString * __strong signatureName in nil_chk(names)) {
    
#line 437
    ComAowagieTextPdfPdfDictionary *pdfDictionary = [af getSignatureDictionaryWithNSString:signatureName];
    if ([((ComAowagieTextPdfPdfName *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_PDFNAME_ETSI_RFC3161)) isEqual:[((ComAowagieTextPdfPdfDictionary *) nil_chk(pdfDictionary)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBFILTER)]] || [((ComAowagieTextPdfPdfName *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_PDFNAME_DOCTIMESTAMP)) isEqual:[pdfDictionary getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBFILTER)]]) {
      
#line 440
      continue;
    }
    
#line 443
    ComAowagieTextPdfPdfPKCS7 *pkcs7;
    @try {
      pkcs7 = [af verifySignatureWithNSString:signatureName];
    }
    @catch (JavaLangException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:JreStrcat("$$$@", @"El PDF contiene una firma corrupta o con un formato desconocido (",
#line 451
      signatureName, @"), se continua con las siguientes si las hubiese: ",
#line 452
      e) withJavaLangThrowable:
#line 453
      e];
      
#line 455
      continue;
    }
    
#line 458
    if (asSimpleSignInfo) {
      
#line 460
      IOSObjectArray *certChain = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk([((ComAowagieTextPdfPdfPKCS7 *) nil_chk(pkcs7)) getSignCertificateChain]))->size_ type:JavaSecurityCertX509Certificate_class_()];
      for (jint j = 0; j < certChain->size_; j++) {
        (void) IOSObjectArray_Set(certChain, j, (JavaSecurityCertX509Certificate *) cast_chk(IOSObjectArray_Get(nil_chk([pkcs7 getSignCertificateChain]), j), [JavaSecurityCertX509Certificate class]));
      }
      
#line 465
      EsGobAfirmaCoreSignersAOSimpleSignInfo *ssi = new_EsGobAfirmaCoreSignersAOSimpleSignInfo_initWithJavaSecurityCertX509CertificateArray_withJavaUtilDate_(
#line 466
      certChain,
#line 467
      [pkcs7 getSignDate] != nil ? [((JavaUtilCalendar *) nil_chk([pkcs7 getSignDate])) getTime] : nil);
      
#line 471
      IOSByteArray *pkcs1 = [pkcs7 getPkcs1];
      if (pkcs1 != nil) {
        [ssi setPkcs1WithByteArray:pkcs1];
      }
      
#line 477
      NSString *digestAlgorithm = [pkcs7 getDigestAlgorithm];
      if (digestAlgorithm != nil) {
        [ssi setSignAlgorithmWithNSString:digestAlgorithm];
      }
      
#line 482
      [root addWithEsGobAfirmaCoreUtilTreeAOTreeNode:new_EsGobAfirmaCoreUtilTreeAOTreeNode_initWithId_(ssi)];
    }
    else {
      [root addWithEsGobAfirmaCoreUtilTreeAOTreeNode:new_EsGobAfirmaCoreUtilTreeAOTreeNode_initWithId_(EsGobAfirmaCoreMiscAOUtil_getCNWithJavaSecurityCertX509Certificate_([((ComAowagieTextPdfPdfPKCS7 *) nil_chk(pkcs7)) getSigningCertificate]))];
    }
  }
  
#line 489
  return new_EsGobAfirmaCoreUtilTreeAOTreeModel_initWithEsGobAfirmaCoreUtilTreeAOTreeNode_(root);
}


#line 496
- (jboolean)isSignWithByteArray:(IOSByteArray *)data {
  
#line 498
  return [self isSignWithByteArray:data withJavaUtilProperties:nil];
}


#line 506
- (jboolean)isSignWithByteArray:(IOSByteArray *)data
         withJavaUtilProperties:(JavaUtilProperties *)params {
  if (data == nil) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) warningWithNSString:@"Se han introducido datos nulos para su comprobacion"];
    return false;
  }
  if (!EsGobAfirmaSignersPadesAOPDFSigner_isPdfFileWithByteArray_(data)) {
    return false;
  }
  id root = [((EsGobAfirmaCoreUtilTreeAOTreeModel *) nil_chk([self getSignersStructureWithByteArray:data withJavaUtilProperties:params withBoolean:false])) getRoot];
  if ([root isKindOfClass:[EsGobAfirmaCoreUtilTreeAOTreeNode class]]) {
    
#line 518
    if (EsGobAfirmaCoreUtilTreeAOTreeModel_getChildCountWithId_(root) > 0) {
      return true;
    }
    
#line 523
    JavaUtilProperties *extraParams = JavaLangSystem_getProperties();
    @try {
      if (EsGobAfirmaSignersPadesPdfUtil_pdfHasUnregisteredSignaturesWithByteArray_withJavaUtilProperties_(data, extraParams) &&
#line 526
      [((NSString *) nil_chk([((JavaLangBoolean *) nil_chk(JreLoadStatic(JavaLangBoolean, TRUE))) description])) java_equalsIgnoreCase:[((JavaUtilProperties *) nil_chk(extraParams)) getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_ALLOW_COSIGNING_UNREGISTERED_SIGNATURES]]) {
        return true;
      }
    }
    @catch (JavaLangException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) severeWithNSString:JreStrcat("$@", @"No se han podido comprobar las firmas no registradas del PDF: ", e)];
    }
  }
  return false;
}


#line 537
+ (jboolean)isPdfFileWithByteArray:(IOSByteArray *)data {
  return EsGobAfirmaSignersPadesAOPDFSigner_isPdfFileWithByteArray_(data);
}


#line 575
- (jboolean)isValidDataFileWithByteArray:(IOSByteArray *)data {
  
#line 577
  if (data == nil) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) warningWithNSString:@"Se han introducido datos nulos para su comprobacion"];
    return false;
  }
  return EsGobAfirmaSignersPadesAOPDFSigner_isPdfFileWithByteArray_(data);
}


#line 591
+ (NSString *)getSignedNameWithNSString:(NSString *)originalName {
  return EsGobAfirmaSignersPadesAOPDFSigner_getSignedNameWithNSString_(originalName);
}


#line 609
- (IOSByteArray *)getDataWithByteArray:(IOSByteArray *)sign
                withJavaUtilProperties:(JavaUtilProperties *)params {
  
#line 612
  if (![self isSignWithByteArray:sign withJavaUtilProperties:params]) {
    @throw new_EsGobAfirmaCoreAOInvalidFormatException_initWithNSString_(@"El documento introducido no contiene una firma valida");
  }
  
#line 617
  return sign;
}


#line 625
- (IOSByteArray *)getDataWithByteArray:(IOSByteArray *)sign {
  
#line 629
  if (![self isSignWithByteArray:sign]) {
    @throw new_EsGobAfirmaCoreAOInvalidFormatException_initWithNSString_(@"El documento introducido no contiene una firma valida");
  }
  
#line 634
  return sign;
}


#line 642
- (EsGobAfirmaCoreSignersAOSignInfo *)getSignInfoWithByteArray:(IOSByteArray *)data {
  
#line 645
  return [self getSignInfoWithByteArray:data withJavaUtilProperties:nil];
}


#line 654
- (EsGobAfirmaCoreSignersAOSignInfo *)getSignInfoWithByteArray:(IOSByteArray *)data
                                        withJavaUtilProperties:(JavaUtilProperties *)params {
  if (data == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No se han introducido datos para analizar");
  }
  
#line 660
  if (![self isSignWithByteArray:data withJavaUtilProperties:params]) {
    @throw new_EsGobAfirmaCoreAOInvalidFormatException_initWithNSString_(@"Los datos introducidos no se corresponden con un objeto de firma");
  }
  
#line 667
  return new_EsGobAfirmaCoreSignersAOSignInfo_initWithNSString_(EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_PDF);
}


#line 674
+ (void)configureRespectfulPropertiesWithByteArray:(IOSByteArray *)data
                            withJavaUtilProperties:(JavaUtilProperties *)config {
  EsGobAfirmaSignersPadesAOPDFSigner_configureRespectfulPropertiesWithByteArray_withJavaUtilProperties_(data, config);
}


#line 692
+ (JavaUtilProperties *)getExtraParamsWithJavaUtilProperties:(JavaUtilProperties *)extraParams {
  return EsGobAfirmaSignersPadesAOPDFSigner_getExtraParamsWithJavaUtilProperties_(extraParams);
}


#line 699
+ (void)checkParamsWithNSString:(NSString *)algorithm
         withJavaUtilProperties:(JavaUtilProperties *)extraParams {
  EsGobAfirmaSignersPadesAOPDFSigner_checkParamsWithNSString_withJavaUtilProperties_(algorithm, extraParams);
}


#line 750
- (void)setSecureModeWithBoolean:(jboolean)secure {
  
#line 752
  self->secureMode_ = secure;
}


#line 755
- (jboolean)isSecureMode {
  
#line 757
  return self->secureMode_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersSignEnhancer;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreUtilTreeAOTreeModel;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreUtilTreeAOTreeModel;", 0x1, 9, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 15, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 17, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 18, 14, 19, -1, -1, -1 },
    { NULL, "[B", 0x1, 18, 13, 19, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersAOSignInfo;", 0x1, 20, 13, 21, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersAOSignInfo;", 0x1, 20, 14, 21, -1, -1, -1 },
    { NULL, "V", 0x9, 22, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0xa, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getSignEnhancer);
  methods[2].selector = @selector(getSignEnhancerConfig);
  methods[3].selector = @selector(signWithByteArray:withNSString:withJavaSecurityPrivateKey:withJavaSecurityCertCertificateArray:withJavaUtilProperties:);
  methods[4].selector = @selector(cosignWithByteArray:withByteArray:withNSString:withJavaSecurityPrivateKey:withJavaSecurityCertCertificateArray:withJavaUtilProperties:);
  methods[5].selector = @selector(cosignWithByteArray:withNSString:withJavaSecurityPrivateKey:withJavaSecurityCertCertificateArray:withJavaUtilProperties:);
  methods[6].selector = @selector(countersignWithByteArray:withNSString:withEsGobAfirmaCoreSignersCounterSignTarget:withNSObjectArray:withJavaSecurityPrivateKey:withJavaSecurityCertCertificateArray:withJavaUtilProperties:);
  methods[7].selector = @selector(getSignedNameWithNSString:withNSString:);
  methods[8].selector = @selector(getSignersStructureWithByteArray:withBoolean:);
  methods[9].selector = @selector(getSignersStructureWithByteArray:withJavaUtilProperties:withBoolean:);
  methods[10].selector = @selector(isSignWithByteArray:);
  methods[11].selector = @selector(isSignWithByteArray:withJavaUtilProperties:);
  methods[12].selector = @selector(isPdfFileWithByteArray:);
  methods[13].selector = @selector(isValidDataFileWithByteArray:);
  methods[14].selector = @selector(getSignedNameWithNSString:);
  methods[15].selector = @selector(getDataWithByteArray:withJavaUtilProperties:);
  methods[16].selector = @selector(getDataWithByteArray:);
  methods[17].selector = @selector(getSignInfoWithByteArray:);
  methods[18].selector = @selector(getSignInfoWithByteArray:withJavaUtilProperties:);
  methods[19].selector = @selector(configureRespectfulPropertiesWithByteArray:withJavaUtilProperties:);
  methods[20].selector = @selector(getExtraParamsWithJavaUtilProperties:);
  methods[21].selector = @selector(checkParamsWithNSString:withJavaUtilProperties:);
  methods[22].selector = @selector(setSecureModeWithBoolean:);
  methods[23].selector = @selector(isSecureMode);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PDF_FILE_SUFFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "PDF_FILE_HEADER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "PDFNAME_ETSI_RFC3161", "LComAowagieTextPdfPdfName;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "PDFNAME_DOCTIMESTAMP", "LComAowagieTextPdfPdfName;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "PDF_MIN_FILE_SIZE", "I", .constantValue.asInt = EsGobAfirmaSignersPadesAOPDFSigner_PDF_MIN_FILE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "secureMode_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "enhancer", "LEsGobAfirmaCoreSignersSignEnhancer;", .constantValue.asLong = 0, 0xa, -1, 34, -1, -1 },
    { "enhancerConfig", "LJavaUtilProperties;", .constantValue.asLong = 0, 0xa, -1, 35, -1, -1 },
  };
  static const void *ptrTable[] = { "sign", "[BLNSString;LJavaSecurityPrivateKey;[LJavaSecurityCertCertificate;LJavaUtilProperties;", "LEsGobAfirmaCoreAOException;LJavaIoIOException;", "cosign", "[B[BLNSString;LJavaSecurityPrivateKey;[LJavaSecurityCertCertificate;LJavaUtilProperties;", "countersign", "[BLNSString;LEsGobAfirmaCoreSignersCounterSignTarget;[LNSObject;LJavaSecurityPrivateKey;[LJavaSecurityCertCertificate;LJavaUtilProperties;", "getSignedName", "LNSString;LNSString;", "getSignersStructure", "[BZ", "[BLJavaUtilProperties;Z", "isSign", "[B", "[BLJavaUtilProperties;", "isPdfFile", "isValidDataFile", "LNSString;", "getData", "LEsGobAfirmaCoreAOInvalidFormatException;", "getSignInfo", "LEsGobAfirmaCoreAOException;", "configureRespectfulProperties", "getExtraParams", "LJavaUtilProperties;", "checkParams", "LNSString;LJavaUtilProperties;", "setSecureMode", "Z", &EsGobAfirmaSignersPadesAOPDFSigner_PDF_FILE_SUFFIX, &EsGobAfirmaSignersPadesAOPDFSigner_PDF_FILE_HEADER, &EsGobAfirmaSignersPadesAOPDFSigner_LOGGER, &EsGobAfirmaSignersPadesAOPDFSigner_PDFNAME_ETSI_RFC3161, &EsGobAfirmaSignersPadesAOPDFSigner_PDFNAME_DOCTIMESTAMP, &EsGobAfirmaSignersPadesAOPDFSigner_enhancer, &EsGobAfirmaSignersPadesAOPDFSigner_enhancerConfig };
  static const J2ObjcClassInfo _EsGobAfirmaSignersPadesAOPDFSigner = { "AOPDFSigner", "es.gob.afirma.signers.pades", ptrTable, methods, fields, 7, 0x11, 24, 9, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaSignersPadesAOPDFSigner;
}

+ (void)initialize {
  if (self == [EsGobAfirmaSignersPadesAOPDFSigner class]) {
    EsGobAfirmaSignersPadesAOPDFSigner_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 73
    @"es.gob.afirma");
    EsGobAfirmaSignersPadesAOPDFSigner_PDFNAME_ETSI_RFC3161 = new_ComAowagieTextPdfPdfName_initWithNSString_(
#line 75
    @"ETSI.RFC3161");
    EsGobAfirmaSignersPadesAOPDFSigner_PDFNAME_DOCTIMESTAMP = new_ComAowagieTextPdfPdfName_initWithNSString_(
#line 76
    @"DocTimeStamp");
    {
      
#line 94
      EsGobAfirmaSignersPadesAOPDFSigner_enhancerConfig = new_JavaUtilProperties_init();
      NSString *enhancerClassName = nil;
      @try {
        [EsGobAfirmaSignersPadesAOPDFSigner_enhancerConfig load__WithJavaIoInputStream:
#line 98
        [EsGobAfirmaSignersPadesAOPDFSigner_class_() getResourceAsStream:@"/enhancer.properties"]];
        
#line 100
        enhancerClassName = [((JavaUtilProperties *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_enhancerConfig)) getPropertyWithNSString:@"enhancerClassFile"];
        if (enhancerClassName != nil) {
          EsGobAfirmaSignersPadesAOPDFSigner_enhancer = (id<EsGobAfirmaCoreSignersSignEnhancer>) cast_check([((JavaLangReflectConstructor *) nil_chk([((IOSClass *) nil_chk(IOSClass_forName_(enhancerClassName))) getConstructor:[IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()]])) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]], EsGobAfirmaCoreSignersSignEnhancer_class_());
          [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) infoWithNSString:JreStrcat("$$", @"Se usara el siguiente mejorador de firmas: ", enhancerClassName)];
        }
      }
      @catch (JavaLangClassNotFoundException *e) {
        [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) warningWithNSString:JreStrcat("$$$@", @"Se ha configurado la clase de mejora '",
#line 108
        enhancerClassName, @"', pero esta no se encuentra: ", e)];
      }
      @catch (
#line 111
      JavaLangException *e) {
        [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) infoWithNSString:JreStrcat("$@", @"No hay un mejorador de firmas correctamente instalado: ", e)];
      }
    }
    {
      
#line 119
      IOSObjectArray *providers = [IOSObjectArray newArrayWithObjects:(id[]){ @"SunEC", @"BC", @"SC" } count:3 type:NSString_class_()];
      {
        IOSObjectArray *a__ =
#line 120
        providers;
        NSString * const *b__ = a__->buffer_;
        NSString * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          NSString *providerName = *b__++;
          
#line 121
          JavaSecurityProvider *p = JavaSecuritySecurity_getProviderWithNSString_(providerName);
          if (p != nil) {
            (void) [p putWithId:@"Alg.Alias.Signature.SHA224with1.2.840.10045.4.3.2" withId:@"SHA224withECDSA"];
            (void) [p putWithId:@"Alg.Alias.Signature.SHA256with1.2.840.10045.4.3.2" withId:@"SHA256withECDSA"];
            (void) [p putWithId:@"Alg.Alias.Signature.SHA384with1.2.840.10045.4.3.2" withId:@"SHA384withECDSA"];
            (void) [p putWithId:@"Alg.Alias.Signature.SHA512with1.2.840.10045.4.3.2" withId:@"SHA512withECDSA"];
          }
        }
      }
    }
    J2OBJC_SET_INITIALIZED(EsGobAfirmaSignersPadesAOPDFSigner)
  }
}

@end


#line 68
void EsGobAfirmaSignersPadesAOPDFSigner_init(EsGobAfirmaSignersPadesAOPDFSigner *self) {
  NSObject_init(self);
  self->secureMode_ =
#line 88
  true;
}


#line 68
EsGobAfirmaSignersPadesAOPDFSigner *new_EsGobAfirmaSignersPadesAOPDFSigner_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaSignersPadesAOPDFSigner, init)
}


#line 68
EsGobAfirmaSignersPadesAOPDFSigner *create_EsGobAfirmaSignersPadesAOPDFSigner_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaSignersPadesAOPDFSigner, init)
}


#line 133
id<EsGobAfirmaCoreSignersSignEnhancer> EsGobAfirmaSignersPadesAOPDFSigner_getSignEnhancer() {
  EsGobAfirmaSignersPadesAOPDFSigner_initialize();
  
#line 134
  return EsGobAfirmaSignersPadesAOPDFSigner_enhancer;
}


#line 139
JavaUtilProperties *EsGobAfirmaSignersPadesAOPDFSigner_getSignEnhancerConfig() {
  EsGobAfirmaSignersPadesAOPDFSigner_initialize();
  
#line 140
  return EsGobAfirmaSignersPadesAOPDFSigner_enhancerConfig != nil ? (JavaUtilProperties *) cast_chk([EsGobAfirmaSignersPadesAOPDFSigner_enhancerConfig java_clone], [JavaUtilProperties class]) : nil;
}


#line 537
jboolean EsGobAfirmaSignersPadesAOPDFSigner_isPdfFileWithByteArray_(IOSByteArray *data) {
  EsGobAfirmaSignersPadesAOPDFSigner_initialize();
  
#line 538
  if (data == nil || data->size_ < EsGobAfirmaSignersPadesAOPDFSigner_PDF_MIN_FILE_SIZE) {
    return false;
  }
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:[((NSString *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_PDF_FILE_HEADER)) java_length]];
  @try {
    [new_JavaIoByteArrayInputStream_initWithByteArray_(data) readWithByteArray:buffer];
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) warningWithNSString:JreStrcat("$@", @"El contenido parece corrupto o truncado: ",
#line 547
    e)];
    
#line 549
    return false;
  }
  
#line 553
  if (![EsGobAfirmaSignersPadesAOPDFSigner_PDF_FILE_HEADER isEqual:[NSString java_stringWithBytes:buffer]]) {
    return false;
  }
  
#line 557
  @try {
    
#line 559
    (void) new_ComAowagieTextPdfPdfReader_initWithByteArray_(data);
  }
  @catch (ComAowagieTextExceptionsBadPasswordException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) warningWithNSString:JreStrcat("$@", @"El PDF esta protegido con contrasena, se toma como PDF valido: ", e)];
    return true;
  }
  @catch (JavaLangException *e) {
    return false;
  }
  
#line 569
  return true;
}


#line 591
NSString *EsGobAfirmaSignersPadesAOPDFSigner_getSignedNameWithNSString_(NSString *originalName) {
  EsGobAfirmaSignersPadesAOPDFSigner_initialize();
  
#line 592
  if (originalName == nil) {
    return @"signed.pdf";
  }
  if ([originalName java_hasSuffix:EsGobAfirmaSignersPadesAOPDFSigner_PDF_FILE_SUFFIX]) {
    return [originalName java_replace:EsGobAfirmaSignersPadesAOPDFSigner_PDF_FILE_SUFFIX withSequence:@".signed.pdf"];
  }
  if ([originalName java_hasSuffix:@".PDF"]) {
    return [originalName java_replace:@".PDF" withSequence:@".signed.pdf"];
  }
  return JreStrcat("$$", originalName, @".signed.pdf");
}


#line 674
void EsGobAfirmaSignersPadesAOPDFSigner_configureRespectfulPropertiesWithByteArray_withJavaUtilProperties_(IOSByteArray *data, JavaUtilProperties *config) {
  EsGobAfirmaSignersPadesAOPDFSigner_initialize();
  if (config != nil && ![config containsKeyWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGNATURE_SUBFILTER]) {
    NSString *filter;
    @try {
      filter = EsGobAfirmaSignersPadesPdfUtil_getFirstSupportedSignSubFilterWithByteArray_withJavaUtilProperties_(data, config);
    }
    @catch (JavaLangException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) warningWithNSString:JreStrcat("$@", @"Error al configurar la firma PDF para que sea igual a las existentes: ", e)];
      return;
    }
    
#line 686
    if (filter != nil) {
      (void) [config setPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGNATURE_SUBFILTER withNSString:[filter java_substring:[filter java_indexOf:'/'] + 1]];
    }
  }
}


#line 692
JavaUtilProperties *EsGobAfirmaSignersPadesAOPDFSigner_getExtraParamsWithJavaUtilProperties_(JavaUtilProperties *extraParams) {
  EsGobAfirmaSignersPadesAOPDFSigner_initialize();
  
#line 693
  JavaUtilProperties *newExtraParams = extraParams != nil ?
#line 694
  (JavaUtilProperties *) cast_chk([extraParams java_clone], [JavaUtilProperties class]) : new_JavaUtilProperties_init();
  
#line 696
  return newExtraParams;
}


#line 699
void EsGobAfirmaSignersPadesAOPDFSigner_checkParamsWithNSString_withJavaUtilProperties_(NSString *algorithm, JavaUtilProperties *extraParams) {
  EsGobAfirmaSignersPadesAOPDFSigner_initialize();
  if ([((NSString *) nil_chk([((NSString *) nil_chk(algorithm)) java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_hasPrefix:@"MD"]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"PAdES no permite huellas digitales MD2 o MD5 (Decision 130/2011 CE)");
  }
  
#line 705
  NSString *profile = [((JavaUtilProperties *) nil_chk(extraParams)) getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_PROFILE];
  
#line 708
  if ([((NSString *) nil_chk(EsGobAfirmaCoreSignersAOSignConstants_SIGN_PROFILE_BASELINE)) java_equalsIgnoreCase:profile]) {
    if (EsGobAfirmaCoreSignersAOSignConstants_isSHA1SignatureAlgorithmWithNSString_(algorithm)) {
      [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) warningWithNSString:JreStrcat("$$$", @"El algoritmo '", algorithm, @"' no esta recomendado para su uso en las firmas baseline")];
    }
    
#line 713
    if ([extraParams containsKeyWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGNATURE_SUBFILTER]) {
      [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) warningWithNSString:JreStrcat("$$$$", @"Se ignorara el valor establecido en el parametro '",
#line 715
      EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGNATURE_SUBFILTER, @"' ya que en las firmas baseline el subfiltro siempre sera ",
#line 717
      EsGobAfirmaCoreSignersAOSignConstants_PADES_SUBFILTER_BES)];
      (void) [extraParams removeWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGNATURE_SUBFILTER];
    }
  }
  
#line 724
  if ([extraParams containsKeyWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_COMMITMENT_TYPE_INDICATIONS] &&
#line 725
  ![EsGobAfirmaCoreSignersAOSignConstants_SIGN_PROFILE_BASELINE java_equalsIgnoreCase:profile] &&
#line 726
  ![extraParams containsKeyWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_POLICY_IDENTIFIER]) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) warningWithNSString:@"Se ignoraran los commitment type indications establecidos por no estar permitidos en las firmas PAdES-EPES"];
    (void) [extraParams removeWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_COMMITMENT_TYPE_INDICATIONS];
  }
  
#line 733
  if ([extraParams containsKeyWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGN_REASON] &&
#line 734
  [extraParams containsKeyWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_POLICY_IDENTIFIER]) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) warningWithNSString:@"Se ignorara la razon de firma establecida por haberse indicado una politica de firma"];
    (void) [extraParams removeWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGN_REASON];
  }
  
#line 743
  if ([extraParams containsKeyWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGN_REASON] &&
#line 744
  [extraParams containsKeyWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_COMMITMENT_TYPE_INDICATIONS]) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesAOPDFSigner_LOGGER)) warningWithNSString:@"Se ignoraran los commitment type indications establecidos por haberse indicado una razon de firma"];
    (void) [extraParams removeWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_COMMITMENT_TYPE_INDICATIONS];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaSignersPadesAOPDFSigner)
