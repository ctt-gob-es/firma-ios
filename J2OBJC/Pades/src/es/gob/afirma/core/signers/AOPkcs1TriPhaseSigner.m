//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/signers/AOPkcs1TriPhaseSigner.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/afirma/core/AOException.h"
#include "es/gob/afirma/core/misc/Base64.h"
#include "es/gob/afirma/core/misc/LoggerUtil.h"
#include "es/gob/afirma/core/misc/http/SSLErrorProcessor.h"
#include "es/gob/afirma/core/misc/http/UrlHttpManager.h"
#include "es/gob/afirma/core/misc/http/UrlHttpManagerFactory.h"
#include "es/gob/afirma/core/misc/http/UrlHttpMethod.h"
#include "es/gob/afirma/core/signers/AOPkcs1Signer.h"
#include "es/gob/afirma/core/signers/AOPkcs1TriPhaseSigner.h"
#include "es/gob/afirma/core/signers/AOSignConstants.h"
#include "es/gob/afirma/core/signers/AOSignInfo.h"
#include "es/gob/afirma/core/signers/CounterSignTarget.h"
#include "es/gob/afirma/core/signers/TriphaseData.h"
#include "es/gob/afirma/core/util/tree/AOTreeModel.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/net/URL.h"
#include "java/security/PrivateKey.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateEncodingException.h"
#include "java/util/Properties.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

#if !__has_feature(objc_arc)
#error "es/gob/afirma/core/signers/AOPkcs1TriPhaseSigner must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner () {
 @public
  NSString *signFormat_;
}

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, signFormat_, NSString *)

/*!
 @brief Nombre de la propiedad de URL del servidor de firma trif&aacute;sica.
 */
inline NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_get_PROPERTY_NAME_SIGN_SERVER_URL(void);
static NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PROPERTY_NAME_SIGN_SERVER_URL = @"serverUrl";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, PROPERTY_NAME_SIGN_SERVER_URL, NSString *)

/*!
 @brief Identificador de la operaci&oacute;n de prefirma en servidor.
 */
inline NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_get_OPERATION_PRESIGN(void);
static NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_OPERATION_PRESIGN = @"pre";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, OPERATION_PRESIGN, NSString *)

/*!
 @brief Identificador de la operaci&oacute;n de postfirma en servidor.
 */
inline NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_get_OPERATION_POSTSIGN(void);
static NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_OPERATION_POSTSIGN = @"post";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, OPERATION_POSTSIGN, NSString *)

/*!
 @brief Identificador de la operaci&oacute;n criptogr&aacute;fica de firma.
 */
inline NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_get_CRYPTO_OPERATION_SIGN(void);
static NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_CRYPTO_OPERATION_SIGN = @"sign";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, CRYPTO_OPERATION_SIGN, NSString *)

/*!
 @brief Nombre del par&aacute;metro que identifica la operaci&oacute;n trif&aacute;sica
  en la URL del servidor de firma.
 */
inline NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_get_PARAMETER_NAME_OPERATION(void);
static NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_OPERATION = @"op";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, PARAMETER_NAME_OPERATION, NSString *)

/*!
 @brief Nombre del par&aacute;metro que identifica la operaci&oacute;n criptogr&aacute;fica
  en la URL del servidor de firma.
 */
inline NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_get_PARAMETER_NAME_CRYPTO_OPERATION(void);
static NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_CRYPTO_OPERATION = @"cop";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, PARAMETER_NAME_CRYPTO_OPERATION, NSString *)

inline NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_get_HTTP_CGI(void);
static NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_CGI = @"?";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, HTTP_CGI, NSString *)

inline NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_get_HTTP_EQUALS(void);
static NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_EQUALS = @"=";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, HTTP_EQUALS, NSString *)

inline NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_get_HTTP_AND(void);
static NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_AND = @"&";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, HTTP_AND, NSString *)

inline NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_get_PARAMETER_NAME_DOCID(void);
static NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_DOCID = @"doc";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, PARAMETER_NAME_DOCID, NSString *)

inline NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_get_PARAMETER_NAME_ALGORITHM(void);
static NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_ALGORITHM = @"algo";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, PARAMETER_NAME_ALGORITHM, NSString *)

inline NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_get_PARAMETER_NAME_FORMAT(void);
static NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_FORMAT = @"format";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, PARAMETER_NAME_FORMAT, NSString *)

inline NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_get_PARAMETER_NAME_CERT(void);
static NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_CERT = @"cert";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, PARAMETER_NAME_CERT, NSString *)

inline NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_get_PARAMETER_NAME_SESSION_DATA(void);
static NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_SESSION_DATA = @"session";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, PARAMETER_NAME_SESSION_DATA, NSString *)

/*!
 @brief Nombre de la propiedad para almac&eacute;n de prefirmas.
 */
inline NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_get_PROPERTY_NAME_PRESIGN(void);
static NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PROPERTY_NAME_PRESIGN = @"PRE";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, PROPERTY_NAME_PRESIGN, NSString *)

/*!
 @brief Nombre de la propiedad para almac&eacute;n de firmas PKCS#1.
 */
inline NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_get_PROPERTY_NAME_PKCS1_SIGN(void);
static NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PROPERTY_NAME_PKCS1_SIGN = @"PK1";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, PROPERTY_NAME_PKCS1_SIGN, NSString *)

/*!
 @brief Indicador de finalizaci&oacute;n correcta de proceso.
 */
inline NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_get_SUCCESS(void);
static NSString *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_SUCCESS = @"OK";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, SUCCESS, NSString *)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/signers/AOPkcs1TriPhaseSigner.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner)

JavaUtilLoggingLogger *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_LOGGER;


#line 36
@implementation EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner


#line 88
- (instancetype)initWithNSString:(NSString *)format {
  EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_initWithNSString_(self, format);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 93
- (instancetype)init {
  EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 97
- (IOSByteArray *)signWithByteArray:(IOSByteArray *)data
                       withNSString:(NSString *)algorithm
         withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
             withJavaUtilProperties:(JavaUtilProperties *)xParams {
  
#line 103
  return EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_triPhaseOperationWithNSString_withNSString_withByteArray_withNSString_withJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_withJavaUtilProperties_(
#line 104
  self->signFormat_,
#line 105
  EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_CRYPTO_OPERATION_SIGN,
#line 106
  data,
#line 107
  algorithm,
#line 108
  key,
#line 109
  certChain,
#line 110
  xParams);
}


#line 115
- (IOSByteArray *)getDataWithByteArray:(IOSByteArray *)sign {
  
#line 117
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No se soporta en firma trifasica");
}

- (IOSByteArray *)getDataWithByteArray:(IOSByteArray *)sign
                withJavaUtilProperties:(JavaUtilProperties *)params {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No se soporta en firma trifasica");
}

- (IOSByteArray *)cosignWithByteArray:(IOSByteArray *)data
                        withByteArray:(IOSByteArray *)sign
                         withNSString:(NSString *)algorithm
           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
               withJavaUtilProperties:(JavaUtilProperties *)xParams {
  
#line 133
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No se soporta la multifirma de firmas NONE");
}


#line 136
- (IOSByteArray *)cosignWithByteArray:(IOSByteArray *)sign
                         withNSString:(NSString *)algorithm
           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
               withJavaUtilProperties:(JavaUtilProperties *)xParams {
  
#line 142
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No se soporta la multifirma de firmas NONE");
}


#line 145
- (IOSByteArray *)countersignWithByteArray:(IOSByteArray *)sign
                              withNSString:(NSString *)algorithm
withEsGobAfirmaCoreSignersCounterSignTarget:(EsGobAfirmaCoreSignersCounterSignTarget *)targetType
                         withNSObjectArray:(IOSObjectArray *)targets
                withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
      withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
                    withJavaUtilProperties:(JavaUtilProperties *)xParams {
  
#line 154
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No se soporta la multifirma de firmas NONE");
}


#line 158
- (EsGobAfirmaCoreUtilTreeAOTreeModel *)getSignersStructureWithByteArray:(IOSByteArray *)sign
                                                             withBoolean:(jboolean)asSimpleSignInfo {
  
#line 161
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No se soporta en firma trifasica");
}

- (EsGobAfirmaCoreUtilTreeAOTreeModel *)getSignersStructureWithByteArray:(IOSByteArray *)sign
                                                  withJavaUtilProperties:(JavaUtilProperties *)params
                                                             withBoolean:(jboolean)asSimpleSignInfo {
  
#line 167
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No se soporta en firma trifasica");
}


#line 171
- (jboolean)isSignWithByteArray:(IOSByteArray *)signData
         withJavaUtilProperties:(JavaUtilProperties *)params {
  return [self isSignWithByteArray:signData];
}


#line 177
- (jboolean)isSignWithByteArray:(IOSByteArray *)sign {
  
#line 179
  return false;
}

- (jboolean)isValidDataFileWithByteArray:(IOSByteArray *)data {
  
#line 185
  if (data == nil) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_LOGGER)) warningWithNSString:@"Se han introducido datos nulos para su comprobacion"];
    return false;
  }
  return true;
}

- (NSString *)getSignedNameWithNSString:(NSString *)originalName
                           withNSString:(NSString *)inText {
  return JreStrcat("$$$", originalName, (inText != nil ? inText : @""), @".p1");
}


#line 199
- (EsGobAfirmaCoreSignersAOSignInfo *)getSignInfoWithByteArray:(IOSByteArray *)sign {
  
#line 201
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No se soporta en firma trifasica");
}

- (EsGobAfirmaCoreSignersAOSignInfo *)getSignInfoWithByteArray:(IOSByteArray *)data
                                        withJavaUtilProperties:(JavaUtilProperties *)params {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No se soporta en firma trifasica");
}


#line 223
+ (IOSByteArray *)triPhaseOperationWithNSString:(NSString *)format
                                   withNSString:(NSString *)cryptoOperation
                                  withByteArray:(IOSByteArray *)data
                                   withNSString:(NSString *)algorithm
                     withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
           withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
                         withJavaUtilProperties:(JavaUtilProperties *)extraParams {
  return EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_triPhaseOperationWithNSString_withNSString_withByteArray_withNSString_withJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_withJavaUtilProperties_(format, cryptoOperation, data, algorithm, key, certChain, extraParams);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "[B", 0x11, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 6, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, 8, 9, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 8, 2, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 10, 11, 3, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreUtilTreeAOTreeModel;", 0x11, 12, 13, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreUtilTreeAOTreeModel;", 0x1, 12, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersAOSignInfo;", 0x1, 19, 5, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersAOSignInfo;", 0x1, 19, 6, 3, -1, -1, -1 },
    { NULL, "[B", 0xc, 20, 21, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(signWithByteArray:withNSString:withJavaSecurityPrivateKey:withJavaSecurityCertCertificateArray:withJavaUtilProperties:);
  methods[3].selector = @selector(getDataWithByteArray:);
  methods[4].selector = @selector(getDataWithByteArray:withJavaUtilProperties:);
  methods[5].selector = @selector(cosignWithByteArray:withByteArray:withNSString:withJavaSecurityPrivateKey:withJavaSecurityCertCertificateArray:withJavaUtilProperties:);
  methods[6].selector = @selector(cosignWithByteArray:withNSString:withJavaSecurityPrivateKey:withJavaSecurityCertCertificateArray:withJavaUtilProperties:);
  methods[7].selector = @selector(countersignWithByteArray:withNSString:withEsGobAfirmaCoreSignersCounterSignTarget:withNSObjectArray:withJavaSecurityPrivateKey:withJavaSecurityCertCertificateArray:withJavaUtilProperties:);
  methods[8].selector = @selector(getSignersStructureWithByteArray:withBoolean:);
  methods[9].selector = @selector(getSignersStructureWithByteArray:withJavaUtilProperties:withBoolean:);
  methods[10].selector = @selector(isSignWithByteArray:withJavaUtilProperties:);
  methods[11].selector = @selector(isSignWithByteArray:);
  methods[12].selector = @selector(isValidDataFileWithByteArray:);
  methods[13].selector = @selector(getSignedNameWithNSString:withNSString:);
  methods[14].selector = @selector(getSignInfoWithByteArray:);
  methods[15].selector = @selector(getSignInfoWithByteArray:withJavaUtilProperties:);
  methods[16].selector = @selector(triPhaseOperationWithNSString:withNSString:withByteArray:withNSString:withJavaSecurityPrivateKey:withJavaSecurityCertCertificateArray:withJavaUtilProperties:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1c, -1, 22, -1, -1 },
    { "PROPERTY_NAME_SIGN_SERVER_URL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "OPERATION_PRESIGN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "OPERATION_POSTSIGN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "CRYPTO_OPERATION_SIGN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "PARAMETER_NAME_OPERATION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "PARAMETER_NAME_CRYPTO_OPERATION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "HTTP_CGI", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "HTTP_EQUALS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "HTTP_AND", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "PARAMETER_NAME_DOCID", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "PARAMETER_NAME_ALGORITHM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "PARAMETER_NAME_FORMAT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "PARAMETER_NAME_CERT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "PARAMETER_NAME_SESSION_DATA", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "PROPERTY_NAME_PRESIGN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
    { "PROPERTY_NAME_PKCS1_SIGN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "SUCCESS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "signFormat_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "sign", "[BLNSString;LJavaSecurityPrivateKey;[LJavaSecurityCertCertificate;LJavaUtilProperties;", "LEsGobAfirmaCoreAOException;", "getData", "[B", "[BLJavaUtilProperties;", "LEsGobAfirmaCoreAOInvalidFormatException;", "cosign", "[B[BLNSString;LJavaSecurityPrivateKey;[LJavaSecurityCertCertificate;LJavaUtilProperties;", "countersign", "[BLNSString;LEsGobAfirmaCoreSignersCounterSignTarget;[LNSObject;LJavaSecurityPrivateKey;[LJavaSecurityCertCertificate;LJavaUtilProperties;", "getSignersStructure", "[BZ", "[BLJavaUtilProperties;Z", "isSign", "isValidDataFile", "getSignedName", "LNSString;LNSString;", "getSignInfo", "triPhaseOperation", "LNSString;LNSString;[BLNSString;LJavaSecurityPrivateKey;[LJavaSecurityCertCertificate;LJavaUtilProperties;", &EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_LOGGER, &EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PROPERTY_NAME_SIGN_SERVER_URL, &EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_OPERATION_PRESIGN, &EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_OPERATION_POSTSIGN, &EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_CRYPTO_OPERATION_SIGN, &EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_OPERATION, &EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_CRYPTO_OPERATION, &EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_CGI, &EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_EQUALS, &EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_AND, &EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_DOCID, &EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_ALGORITHM, &EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_FORMAT, &EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_CERT, &EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_SESSION_DATA, &EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PROPERTY_NAME_PRESIGN, &EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PROPERTY_NAME_PKCS1_SIGN, &EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_SUCCESS };
  static const J2ObjcClassInfo _EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner = { "AOPkcs1TriPhaseSigner", "es.gob.afirma.core.signers", ptrTable, methods, fields, 7, 0x1, 17, 19, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner;
}

+ (void)initialize {
  if (self == [EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner class]) {
    EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 39
    @"es.gob.afirma");
    J2OBJC_SET_INITIALIZED(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner)
  }
}

@end


#line 88
void EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_initWithNSString_(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner *self, NSString *format) {
  NSObject_init(self);
  
#line 89
  self->signFormat_ = format;
}


#line 88
EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner *new_EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_initWithNSString_(NSString *format) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, initWithNSString_, format)
}


#line 88
EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner *create_EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_initWithNSString_(NSString *format) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, initWithNSString_, format)
}


#line 93
void EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_init(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner *self) {
  EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_initWithNSString_(self, EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_PKCS1);
}


#line 93
EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner *new_EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, init)
}


#line 93
EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner *create_EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, init)
}


#line 223
IOSByteArray *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_triPhaseOperationWithNSString_withNSString_withByteArray_withNSString_withJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_withJavaUtilProperties_(NSString *format, NSString *cryptoOperation, IOSByteArray *data, NSString *algorithm, id<JavaSecurityPrivateKey> key, IOSObjectArray *certChain, JavaUtilProperties *extraParams) {
  EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_initialize();
  
#line 230
  if (extraParams == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Se necesitan parametros adicionales");
  }
  if (key == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Es necesario proporcionar la clave privada de firma");
  }
  if (certChain == nil || certChain->size_ == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Es necesario proporcionar el certificado de firma");
  }
  if (data == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No se ha proporcionado el identificador de documento a firmar");
  }
  
#line 244
  JavaNetURL *signServerUrl;
  @try {
    signServerUrl = new_JavaNetURL_initWithNSString_([extraParams getPropertyWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PROPERTY_NAME_SIGN_SERVER_URL]);
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"No se ha proporcionado una URL valida para el servidor de firma: ",
#line 250
    [extraParams getPropertyWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PROPERTY_NAME_SIGN_SERVER_URL]), e);
  }
  
#line 255
  NSString *documentId = EsGobAfirmaCoreMiscBase64_encodeWithByteArray_withBoolean_(data, true);
  
#line 257
  id<EsGobAfirmaCoreMiscHttpUrlHttpManager> urlManager = EsGobAfirmaCoreMiscHttpUrlHttpManagerFactory_getInstalledManager();
  
#line 260
  NSString *cerChainParamContent;
  @try {
    cerChainParamContent = EsGobAfirmaCoreMiscBase64_encodeWithByteArray_withBoolean_([((JavaSecurityCertCertificate *) nil_chk(IOSObjectArray_Get(certChain, 0))) getEncoded], true);
  }
  @catch (JavaSecurityCertCertificateEncodingException *e) {
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error decodificando la cadena de certificados: ", e), e);
  }
  
#line 268
  EsGobAfirmaCoreMiscHttpSSLErrorProcessor *errorProcessor = new_EsGobAfirmaCoreMiscHttpSSLErrorProcessor_initWithJavaUtilProperties_(extraParams);
  
#line 275
  IOSByteArray *preSignResult;
  @try {
    
#line 286
    JavaLangStringBuffer *urlBuffer = new_JavaLangStringBuffer_init();
    (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([urlBuffer appendWithId:signServerUrl])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_CGI])) appendWithNSString:
#line 288
    EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_OPERATION])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_EQUALS])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_OPERATION_PRESIGN])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_AND])) appendWithNSString:
#line 289
    EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_CRYPTO_OPERATION])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_EQUALS])) appendWithNSString:cryptoOperation])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_AND])) appendWithNSString:
#line 290
    EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_FORMAT])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_EQUALS])) appendWithNSString:format])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_AND])) appendWithNSString:
#line 291
    EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_ALGORITHM])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_EQUALS])) appendWithNSString:algorithm])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_AND])) appendWithNSString:
#line 292
    EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_CERT])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_EQUALS])) appendWithNSString:cerChainParamContent])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_AND])) appendWithNSString:
#line 293
    EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_DOCID])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_EQUALS])) appendWithNSString:documentId];
    
#line 295
    NSString *postUrl = [urlBuffer description];
    
#line 297
    if ([((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_LOGGER)) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, INFO)]) {
      [EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_LOGGER infoWithNSString:JreStrcat("$$", @"Se llamara por POST a la siguiente URL:\n", EsGobAfirmaCoreMiscLoggerUtil_getTrimStrWithNSString_(postUrl))];
    }
    
#line 301
    preSignResult = [((id<EsGobAfirmaCoreMiscHttpUrlHttpManager>) nil_chk(urlManager)) readUrlWithNSString:postUrl withEsGobAfirmaCoreMiscHttpUrlHttpMethod:JreLoadEnum(EsGobAfirmaCoreMiscHttpUrlHttpMethod, POST) withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:errorProcessor];
    
#line 303
    [urlBuffer setLengthWithInt:0];
  }
  @catch (JavaIoIOException *e) {
    if ([errorProcessor isCancelled]) {
      [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_LOGGER)) infoWithNSString:JreStrcat("$$", @"El usuario no permite la importacion del certificado SSL de confianza del servicio de firma trifasica: ", EsGobAfirmaCoreMiscLoggerUtil_getTrimStrWithNSString_(
#line 308
      [((JavaNetURL *) nil_chk(signServerUrl)) description]))];
    }
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error en la llamada de prefirma al servidor: ", e), e);
  }
  
#line 318
  EsGobAfirmaCoreSignersTriphaseData *triphaseData;
  @try {
    triphaseData = EsGobAfirmaCoreSignersTriphaseData_parserWithByteArray_(EsGobAfirmaCoreMiscBase64_decodeWithByteArray_withInt_withInt_withBoolean_(
#line 321
    preSignResult, 0, ((IOSByteArray *) nil_chk(preSignResult))->size_, true));
  }
  @catch (
#line 324
  JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_LOGGER)) severeWithNSString:JreStrcat("$@", @"Error al analizar la prefirma enviada por el servidor: ", e)];
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error al analizar la prefirma enviada por el servidor: ", e), e);
  }
  
#line 329
  EsGobAfirmaCoreSignersTriphaseData_TriSign *tri = [((EsGobAfirmaCoreSignersTriphaseData *) nil_chk(triphaseData)) getSignWithInt:0];
  
#line 331
  IOSByteArray *pkcs1;
  @try {
    pkcs1 = [new_EsGobAfirmaCoreSignersAOPkcs1Signer_init() signWithByteArray:EsGobAfirmaCoreMiscBase64_decodeWithNSString_(
#line 334
    [((EsGobAfirmaCoreSignersTriphaseData_TriSign *) nil_chk(tri)) getPropertyWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PROPERTY_NAME_PRESIGN]) withNSString:
#line 335
    algorithm withJavaSecurityPrivateKey:
#line 336
    key withJavaSecurityCertCertificateArray:
#line 337
    certChain withJavaUtilProperties:
#line 338
    extraParams];
  }
  @catch (
#line 341
  JavaIoIOException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_LOGGER)) severeWithNSString:JreStrcat("$@", @"Error al decodificar la prefirma de los datos: ", e)];
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(@"Error al decodificar la prefirma de los datos", e);
  }
  [((EsGobAfirmaCoreSignersTriphaseData_TriSign *) nil_chk(tri)) addPropertyWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PROPERTY_NAME_PKCS1_SIGN withNSString:EsGobAfirmaCoreMiscBase64_encodeWithByteArray_(pkcs1)];
  
#line 347
  NSString *preResultAsBase64 = EsGobAfirmaCoreMiscBase64_encodeWithByteArray_withBoolean_(
#line 348
  [((NSString *) nil_chk([triphaseData description])) java_getBytes],
#line 349
  true);
  
#line 356
  IOSByteArray *triSignFinalResult;
  @try {
    JavaLangStringBuffer *urlBuffer = new_JavaLangStringBuffer_init();
    JavaLangStringBuffer *complex$1 = nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([urlBuffer appendWithId:signServerUrl])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_CGI])) appendWithNSString:
#line 360
    EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_OPERATION])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_EQUALS])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_OPERATION_POSTSIGN])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_AND])) appendWithNSString:
#line 361
    EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_CRYPTO_OPERATION])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_EQUALS])) appendWithNSString:cryptoOperation])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_AND])) appendWithNSString:
#line 362
    EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_FORMAT])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_EQUALS])) appendWithNSString:format])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_AND])) appendWithNSString:
#line 363
    EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_ALGORITHM])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_EQUALS])) appendWithNSString:algorithm])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_AND])) appendWithNSString:
#line 364
    EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_CERT])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_EQUALS])) appendWithNSString:cerChainParamContent])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_AND])) appendWithNSString:
#line 365
    EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_DOCID])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_EQUALS])) appendWithNSString:documentId]);
    
#line 359
    (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([complex$1 appendWithNSString:
#line 365
    EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_AND])) appendWithNSString:
#line 366
    EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_PARAMETER_NAME_SESSION_DATA])) appendWithNSString:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_HTTP_EQUALS])) appendWithNSString:preResultAsBase64];
    
#line 368
    triSignFinalResult = [((id<EsGobAfirmaCoreMiscHttpUrlHttpManager>) nil_chk(urlManager)) readUrlWithNSString:[urlBuffer description] withEsGobAfirmaCoreMiscHttpUrlHttpMethod:JreLoadEnum(EsGobAfirmaCoreMiscHttpUrlHttpMethod, POST)];
  }
  @catch (JavaIoIOException *e) {
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error en la llamada de postfirma al servidor: ", e), e);
  }
  
#line 375
  NSString *stringTrimmedResult = [[NSString java_stringWithBytes:triSignFinalResult] java_trim];
  if (![((NSString *) nil_chk(stringTrimmedResult)) java_hasPrefix:EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_SUCCESS]) {
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_(JreStrcat("$$", @"La firma trifasica no ha finalizado correctamente: ", stringTrimmedResult));
  }
  
#line 381
  @try {
    return EsGobAfirmaCoreMiscBase64_decodeWithNSString_withBoolean_([stringTrimmedResult java_substring:[(JreStrcat("$$", EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_SUCCESS, @" NEWID=")) java_length]], true);
  }
  @catch (JavaIoIOException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_LOGGER)) warningWithNSString:JreStrcat("$@", @"El resultado de NEWID del servidor no estaba en Base64: ", e)];
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"El resultado devuelto por el servidor no es correcto: ", e), e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner)
