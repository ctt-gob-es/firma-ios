//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/http/URLName.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobAfirmaCoreMiscHttpURLName")
#ifdef RESTRICT_EsGobAfirmaCoreMiscHttpURLName
#define INCLUDE_ALL_EsGobAfirmaCoreMiscHttpURLName 0
#else
#define INCLUDE_ALL_EsGobAfirmaCoreMiscHttpURLName 1
#endif
#undef RESTRICT_EsGobAfirmaCoreMiscHttpURLName

#if !defined (EsGobAfirmaCoreMiscHttpURLName_) && (INCLUDE_ALL_EsGobAfirmaCoreMiscHttpURLName || defined(INCLUDE_EsGobAfirmaCoreMiscHttpURLName))
#define EsGobAfirmaCoreMiscHttpURLName_

@class JavaUtilBitSet;

/*!
 @brief The name of a URL.This class represents a URL name and also provides the
  basic parsing functionality to parse most internet standard URL schemes.
 <p>
  Note that this class differs from <code>java.net.URL</code> in that this
  class just represents the name of a URL, it does not model the connection to
  a URL.
 @version 1.19, 07/05/04
 @author Christopher Cotton
 @author Bill Shannon
 */
@interface EsGobAfirmaCoreMiscHttpURLName : NSObject {
 @public
  /*!
   @brief The full version of the URL.
   */
  NSString *fullURL_;
}

#pragma mark Public

/*!
 @brief Compares two URLNames.The result is true if and only if the argument is
  not null and is a URLName object that represents the same URLName as this
  object.
 Two URLName objects are equal if they have the same protocol and
  the same host, the same port number on the host, the same username, and
  the same file on the host. The fields (host, username, file) are also
  considered the same if they are both null. 
 <p>
  Hosts are considered equal if the names are equal (case independent) or
  if host name lookups for them both succeed and they both reference the
  same IP address. 
 <p>
  Note that URLName has no knowledge of default port numbers for particular
  protocols, so "imap://host" and "imap://host:143" would not compare as
  equal. 
 <p>
  Note also that the password field is not included in the comparison, nor
  is any reference field appended to the filename.
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Compute the hash code for this URLName.
 */
- (NSUInteger)hash;

/*!
 @brief Constructs a string representation of this URLName.
 */
- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief Construct a URLName from the string.Parses out all the possible
  information (protocol, host, port, file, username, password).
 @param url URL string.
 */
- (instancetype)initPackagePrivateWithNSString:(NSString *)url;

/*!
 @brief Decodes a &quot;x-www-form-urlencoded&quot; to a <code>String</code>.
 @param s The  <code> String </code>  to decode.
 @return The newly decoded <code>String</code>.
 */
+ (NSString *)decodeWithNSString:(NSString *)s;

/*!
 @brief Returns the file name of this URLName.Returns null if this URLName has
  no file name.
 @return The file name of this URLName or null if this URLName has
          no file name.
 */
- (NSString *)getFile;

/*!
 @brief Returns the host of this URLName.Returns null if this URLName has no
  host.
 @return The host of this URLName or null if this URLName has no
          host.
 */
- (NSString *)getHost;

/*!
 @brief Returns the password of this URLName.Returns null if this URLName has no
  password.
 @return The password of this URLName or null if this URLName has no
  password.
 */
- (NSString *)getPassword;

/*!
 @brief Returns the port number of this URLName.Returns -1 if the port is not
  set.
 @return Port number of this URLName or -1 if the port is not
          set.
 */
- (jint)getPort;

/*!
 @brief Returns the protocol of this URLName.Returns null if this URLName has no
  protocol.
 @return The protocol of this URLName or null if this URLName has no
          protocol.
 */
- (NSString *)getProtocol;

/*!
 @brief Returns the user name of this URLName.Returns null if this URLName has
  no user name.
 @return The user name of this URLName or null if this URLName has
          no user name.
 */
- (NSString *)getUsername;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(EsGobAfirmaCoreMiscHttpURLName)

J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscHttpURLName, fullURL_, NSString *)

/*!
 @brief The class contains a utility method for converting a <code>String</code>
  into a MIME format called "<code>x-www-form-urlencoded</code>" format.
 <p>
  To convert a <code>String</code>, each character is examined in turn: 
 <ul>
  <li>The ASCII characters '<code>a</code>' through '<code>z</code>', ' 
 <code>A</code>' through '<code>Z</code>', '<code>0</code>' through ' 
 <code>9</code>', and &quot;.&quot;, &quot;-&quot;, &quot;
 *&quot;, &quot;_&quot; remain the same. 
 <li>The space character '<code>&nbsp;</code>' is converted into a plus
  sign '<code>+</code>'.
  <li>All other characters are converted into the 3-character string " 
 <code>%<i>xy</i></code>", where <i>xy</i> is the two-digit hexadecimal
  representation of the lower 8-bits of the character. 
 </ul>
 @author Herb Jellinek
 @version 1.16, 10/23/99
 @since JDK1.0
 */
inline JavaUtilBitSet *EsGobAfirmaCoreMiscHttpURLName_get_dontNeedEncoding(void);
inline JavaUtilBitSet *EsGobAfirmaCoreMiscHttpURLName_set_dontNeedEncoding(JavaUtilBitSet *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilBitSet *EsGobAfirmaCoreMiscHttpURLName_dontNeedEncoding;
J2OBJC_STATIC_FIELD_OBJ(EsGobAfirmaCoreMiscHttpURLName, dontNeedEncoding, JavaUtilBitSet *)

inline jint EsGobAfirmaCoreMiscHttpURLName_get_CASE_DIFF(void);
#define EsGobAfirmaCoreMiscHttpURLName_CASE_DIFF 32
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreMiscHttpURLName, CASE_DIFF, jint)

FOUNDATION_EXPORT void EsGobAfirmaCoreMiscHttpURLName_initPackagePrivateWithNSString_(EsGobAfirmaCoreMiscHttpURLName *self, NSString *url);

FOUNDATION_EXPORT EsGobAfirmaCoreMiscHttpURLName *new_EsGobAfirmaCoreMiscHttpURLName_initPackagePrivateWithNSString_(NSString *url) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreMiscHttpURLName *create_EsGobAfirmaCoreMiscHttpURLName_initPackagePrivateWithNSString_(NSString *url);

FOUNDATION_EXPORT NSString *EsGobAfirmaCoreMiscHttpURLName_decodeWithNSString_(NSString *s);

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaCoreMiscHttpURLName)

#endif

#pragma pop_macro("INCLUDE_ALL_EsGobAfirmaCoreMiscHttpURLName")
