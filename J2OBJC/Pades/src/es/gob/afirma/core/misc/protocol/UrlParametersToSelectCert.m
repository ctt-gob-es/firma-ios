//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/protocol/UrlParametersToSelectCert.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/afirma/core/misc/AOUtil.h"
#include "es/gob/afirma/core/misc/protocol/ParameterException.h"
#include "es/gob/afirma/core/misc/protocol/ParameterLocalAccessRequestedException.h"
#include "es/gob/afirma/core/misc/protocol/ProtocolVersion.h"
#include "es/gob/afirma/core/misc/protocol/UrlParameters.h"
#include "es/gob/afirma/core/misc/protocol/UrlParametersToSelectCert.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/net/URL.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/logging/Logger.h"

#if !__has_feature(objc_arc)
#error "es/gob/afirma/core/misc/protocol/UrlParametersToSelectCert must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert () {
 @public
  /*!
   @brief Indica si la operaci&oacute;n requiere de los servicios de comunicaci&oacute;n.
   */
  jboolean servicesRequired_;
  /*!
   @brief Versi&oacute;n m&iacute;nima del protocolo que define los requisitos
  de esta operaci&oacute;n.
   */
  NSString *minimumVerstion_;
  /*!
   @brief Opci&oacute;n de configuraci&oacute;n que determina si se debe mantener
  el primer certificado seleccionado para todas las operaciones.
   */
  jboolean sticky_;
  /*!
   @brief Opci&oacute;n de configuraci&oacute;n que determina si se debe ignorar
  cualquier certificado prefijado.
   */
  jboolean resetSticky_;
}

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert, minimumVerstion_, NSString *)

/*!
 @brief Par&aacute;metro de entrada con el identificador del documento.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_get_ID_PARAM(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_ID_PARAM = @"id";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert, ID_PARAM, NSString *)

/*!
 @brief Par&aacute;metro de entrada con la m&iacute;nima versi&oacute;n requerida del aplicativo a usar en la invocaci&oacute;n por protocolo.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_get_VER_PARAM(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_VER_PARAM = @"ver";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert, VER_PARAM, NSString *)

/*!
 @brief Par&aacute;metro de entrada que nos dice si tenemos que usar un provatekeyentry fijado o fijar uno nuevo.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_get_STICKY_PARAM(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_STICKY_PARAM = @"sticky";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert, STICKY_PARAM, NSString *)

/*!
 @brief Par&aacute;metro de entrada que nos dice si tenemos que ignorar
  cla <code>PrivateKeyEntry</code> fijada.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_get_RESET_STICKY_PARAM(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_RESET_STICKY_PARAM = @"resetsticky";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert, RESET_STICKY_PARAM, NSString *)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/protocol/UrlParametersToSelectCert.java"


#line 21
@implementation EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 56
- (instancetype)init {
  EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 67
- (instancetype)initWithBoolean:(jboolean)servicesRequired {
  EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_initWithBoolean_(self, servicesRequired);
  return self;
}


#line 76
- (NSString *)getMinimumProtocolVersion {
  return self->minimumVerstion_;
}

- (void)setMinimumProtocolVersionWithNSString:(NSString *)minVer {
  self->minimumVerstion_ = minVer;
}


#line 90
- (void)setStickyWithBoolean:(jboolean)sticky {
  self->sticky_ = sticky;
}


#line 101
- (jboolean)getSticky {
  return self->sticky_;
}


#line 109
- (void)setResetStickyWithBoolean:(jboolean)resetSticky {
  self->resetSticky_ = resetSticky;
}


#line 117
- (jboolean)getResetSticky {
  return self->resetSticky_;
}

- (void)setSelectCertParametersWithJavaUtilMap:(id<JavaUtilMap>)params {
  
#line 124
  NSString *sessionId = nil;
  if ([((id<JavaUtilMap>) nil_chk(params)) containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_ID_PARAM]) {
    sessionId = [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_ID_PARAM];
  }
  else if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_FILE_ID_PARAM]) {
    sessionId = [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_FILE_ID_PARAM];
  }
  
#line 132
  if (sessionId != nil) {
    if ([sessionId java_length] > EsGobAfirmaCoreMiscProtocolUrlParameters_MAX_ID_LENGTH) {
      @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(JreStrcat("$I$", @"La longitud del identificador de la operacion es mayor de ", EsGobAfirmaCoreMiscProtocolUrlParameters_MAX_ID_LENGTH, @" caracteres."));
    }
    {
      IOSCharArray *a__ =
#line 138
      [((NSString *) nil_chk([sessionId java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)])) java_toCharArray];
      jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
      jchar const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jchar c = *b__++;
        
#line 139
        if ((c < 'a' || c > 'z') && (c < '0' || c > '9')) {
          @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(@"El identificador de la sesion debe ser alfanumerico.");
        }
      }
    }
    [self setSessionIdWithNSString:sessionId];
  }
  
#line 148
  if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_VER_PARAM]) {
    [self setMinimumProtocolVersionWithNSString:[params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_VER_PARAM]];
  }
  else {
    [self setMinimumProtocolVersionWithNSString:JavaLangInteger_toStringWithInt_([((EsGobAfirmaCoreMiscProtocolProtocolVersion *) nil_chk(JreLoadEnum(EsGobAfirmaCoreMiscProtocolProtocolVersion, VERSION_0))) getVersion])];
  }
  
#line 157
  if ([self getFileId] != nil) {
    return;
  }
  
#line 162
  if (self->servicesRequired_) {
    if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_STORAGE_SERVLET_PARAM]) {
      
#line 166
      JavaNetURL *storageServletUrl;
      @try {
        storageServletUrl = EsGobAfirmaCoreMiscProtocolUrlParameters_validateURLWithNSString_([params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_STORAGE_SERVLET_PARAM]);
      }
      @catch (EsGobAfirmaCoreMiscProtocolParameterLocalAccessRequestedException *e) {
        @throw new_EsGobAfirmaCoreMiscProtocolParameterLocalAccessRequestedException_initWithNSString_withJavaLangThrowable_(@"La URL del servicio de guardado no puede ser local", e);
      }
      @catch (EsGobAfirmaCoreMiscProtocolParameterException *e) {
        @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error al validar la URL del servicio de guardado: ", e), e);
      }
      [self setStorageServletUrlWithJavaNetURL:storageServletUrl];
    }
    else
#line 179
    if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_ID_PARAM]) {
      @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(@"No se ha recibido la direccion del servlet para el guardado del resultado de la operacion");
    }
  }
  
#line 184
  NSString *props = nil;
  if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_PROPERTIES_PARAM]) {
    props = [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_PROPERTIES_PARAM];
  }
  
#line 189
  if (props != nil && ![props java_isEmpty]) {
    @try {
      [self setExtraParamsWithJavaUtilProperties:EsGobAfirmaCoreMiscAOUtil_base642PropertiesWithNSString_(props)];
    }
    @catch (JavaLangException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(EsGobAfirmaCoreMiscProtocolUrlParameters, LOGGER))) severeWithNSString:JreStrcat("$$$@", @"Las propiedades adicionales indicadas en el parametro '",
#line 195
      EsGobAfirmaCoreMiscProtocolUrlParameters_PROPERTIES_PARAM, @"' no se han podido cargar: ", e)];
      
#line 197
      [self setExtraParamsWithJavaUtilProperties:new_JavaUtilProperties_init()];
    }
  }
  else {
    [self setExtraParamsWithJavaUtilProperties:new_JavaUtilProperties_init()];
  }
  
#line 205
  if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_STICKY_PARAM]) {
    [self setStickyWithBoolean:JavaLangBoolean_parseBooleanWithNSString_([params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_STICKY_PARAM])];
  }
  else {
    
#line 208
    [self setStickyWithBoolean:false];
  }
  
#line 212
  if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_RESET_STICKY_PARAM]) {
    [self setResetStickyWithBoolean:JavaLangBoolean_parseBooleanWithNSString_([params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_RESET_STICKY_PARAM])];
  }
  else {
    [self setResetStickyWithBoolean:false];
  }
  
#line 219
  [self setDefaultKeyStoreWithNSString:EsGobAfirmaCoreMiscProtocolUrlParameters_getKeyStoreNameWithJavaUtilMap_(params)];
  [self setDefaultKeyStoreLibWithNSString:EsGobAfirmaCoreMiscProtocolUrlParameters_getDefaultKeyStoreLibWithJavaUtilMap_(params)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 7, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithBoolean:);
  methods[2].selector = @selector(getMinimumProtocolVersion);
  methods[3].selector = @selector(setMinimumProtocolVersionWithNSString:);
  methods[4].selector = @selector(setStickyWithBoolean:);
  methods[5].selector = @selector(getSticky);
  methods[6].selector = @selector(setResetStickyWithBoolean:);
  methods[7].selector = @selector(getResetSticky);
  methods[8].selector = @selector(setSelectCertParametersWithJavaUtilMap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ID_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "VER_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "STICKY_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "RESET_STICKY_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "servicesRequired_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "minimumVerstion_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sticky_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "resetSticky_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "setMinimumProtocolVersion", "LNSString;", "setSticky", "setResetSticky", "setSelectCertParameters", "LJavaUtilMap;", "LEsGobAfirmaCoreMiscProtocolParameterException;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", &EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_ID_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_VER_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_STICKY_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_RESET_STICKY_PARAM };
  static const J2ObjcClassInfo _EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert = { "UrlParametersToSelectCert", "es.gob.afirma.core.misc.protocol", ptrTable, methods, fields, 7, 0x11, 9, 8, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert;
}

@end


#line 56
void EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_init(EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert *self) {
  EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_initWithBoolean_(self, false);
}


#line 56
EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert *new_EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert, init)
}


#line 56
EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert *create_EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert, init)
}


#line 67
void EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_initWithBoolean_(EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert *self, jboolean servicesRequired) {
  EsGobAfirmaCoreMiscProtocolUrlParameters_init(self);
  
#line 68
  self->servicesRequired_ = servicesRequired;
  [self setDataWithByteArray:nil];
  [self setFileIdWithNSString:nil];
  [self setRetrieveServletUrlWithJavaNetURL:nil];
}


#line 67
EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert *new_EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_initWithBoolean_(jboolean servicesRequired) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert, initWithBoolean_, servicesRequired)
}


#line 67
EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert *create_EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert_initWithBoolean_(jboolean servicesRequired) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert, initWithBoolean_, servicesRequired)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreMiscProtocolUrlParametersToSelectCert)
