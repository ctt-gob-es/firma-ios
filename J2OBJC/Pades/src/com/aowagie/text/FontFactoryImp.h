//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/FontFactoryImp.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComAowagieTextFontFactoryImp")
#ifdef RESTRICT_ComAowagieTextFontFactoryImp
#define INCLUDE_ALL_ComAowagieTextFontFactoryImp 0
#else
#define INCLUDE_ALL_ComAowagieTextFontFactoryImp 1
#endif
#undef RESTRICT_ComAowagieTextFontFactoryImp

#if !defined (ComAowagieTextFontFactoryImp_) && (INCLUDE_ALL_ComAowagieTextFontFactoryImp || defined(INCLUDE_ComAowagieTextFontFactoryImp))
#define ComAowagieTextFontFactoryImp_

@class ComAowagieTextFont;
@class HarmonyJavaAwtColor;
@class JavaUtilProperties;
@protocol JavaUtilSet;

/*!
 @brief If you are using True Type fonts, you can declare the paths of the different ttf- and ttc-files
  to this class first and then create fonts in your code using one of the getFont method
  without having to enter a path as parameter.
 @author Bruno Lowagie
 */
@interface ComAowagieTextFontFactoryImp : NSObject {
 @public
  /*!
   @brief This is the default encoding to use.
   */
  NSString *defaultEncoding_;
  /*!
   @brief This is the default value of the <VAR>embedded</VAR> variable.
   */
  jboolean defaultEmbedding_;
}

#pragma mark Public

/*!
 @brief Creates new FontFactory
 */
- (instancetype)initPackagePrivate;

/*!
 @brief Gets a set of registered fontnames.
 @return a set of registered font families
 */
- (id<JavaUtilSet>)getRegisteredFamilies;

/*!
 @brief Gets a set of registered fontnames.
 @return a set of registered fonts
 */
- (id<JavaUtilSet>)getRegisteredFonts;

#pragma mark Package-Private

/*!
 @brief Constructs a <CODE>Font</CODE>-object.
 @param attributes the attributes of a  <CODE> Font </CODE>  object.
 @return the Font constructed based on the attributes
 */
- (ComAowagieTextFont *)getFontWithJavaUtilProperties:(JavaUtilProperties *)attributes;

/*!
 @brief Constructs a <CODE>Font</CODE>-object.
 @param fontname the name of the font
 @param encoding the encoding of the font
 @param embedded true if the font is to be embedded in the PDF
 @param size the size of this font
 @param style the style of this font
 @param color the  <CODE> Color </CODE>  of this font.
 @return the Font constructed based on the parameters
 */
- (ComAowagieTextFont *)getFontWithNSString:(NSString *)fontname
                               withNSString:(NSString *)encoding
                                withBoolean:(jboolean)embedded
                                  withFloat:(jfloat)size
                                    withInt:(jint)style
                    withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComAowagieTextFontFactoryImp)

J2OBJC_FIELD_SETTER(ComAowagieTextFontFactoryImp, defaultEncoding_, NSString *)

FOUNDATION_EXPORT void ComAowagieTextFontFactoryImp_initPackagePrivate(ComAowagieTextFontFactoryImp *self);

FOUNDATION_EXPORT ComAowagieTextFontFactoryImp *new_ComAowagieTextFontFactoryImp_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextFontFactoryImp *create_ComAowagieTextFontFactoryImp_initPackagePrivate(void);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextFontFactoryImp)

#endif

#pragma pop_macro("INCLUDE_ALL_ComAowagieTextFontFactoryImp")
