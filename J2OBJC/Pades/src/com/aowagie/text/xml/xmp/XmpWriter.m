//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/xml/xmp/XmpWriter.java
//

#include "J2ObjC_source.h"
#include "com/aowagie/text/pdf/PdfDate.h"
#include "com/aowagie/text/pdf/PdfDictionary.h"
#include "com/aowagie/text/pdf/PdfName.h"
#include "com/aowagie/text/pdf/PdfObject.h"
#include "com/aowagie/text/pdf/PdfString.h"
#include "com/aowagie/text/pdf/PdfWriter.h"
#include "com/aowagie/text/xml/xmp/DublinCoreSchema.h"
#include "com/aowagie/text/xml/xmp/PdfA1Schema.h"
#include "com/aowagie/text/xml/xmp/PdfA2Schema.h"
#include "com/aowagie/text/xml/xmp/PdfSchema.h"
#include "com/aowagie/text/xml/xmp/XmpBasicSchema.h"
#include "com/aowagie/text/xml/xmp/XmpSchema.h"
#include "com/aowagie/text/xml/xmp/XmpWriter.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/util/Set.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/xml/xmp/XmpWriter must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextXmlXmpXmpWriter () {
 @public
  /*!
   @brief You can add some extra space in the XMP packet; 1 unit in this variable represents 100 spaces and a newline.
   */
  jint extraSpace_;
  /*!
   @brief The writer to which you can write bytes for the XMP stream.
   */
  JavaIoOutputStreamWriter *writer_;
  /*!
   @brief The about string that goes into the rdf:Description tags.
   */
  NSString *about_;
}

/*!
 @brief Creates an XmpWriter.
 @param os
 @param utfEncoding
 @param extraSpace
 @throw IOException
 */
- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)os
                              withNSString:(NSString *)utfEncoding
                                   withInt:(jint)extraSpace;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextXmlXmpXmpWriter, writer_, JavaIoOutputStreamWriter *)
J2OBJC_FIELD_SETTER(ComAowagieTextXmlXmpXmpWriter, about_, NSString *)

/*!
 @brief A possible charset for the XMP.
 */
inline NSString *ComAowagieTextXmlXmpXmpWriter_get_UTF8(void);
static NSString *ComAowagieTextXmlXmpXmpWriter_UTF8 = @"UTF-8";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextXmlXmpXmpWriter, UTF8, NSString *)

/*!
 @brief Processing Instruction required at the end of an XMP stream for XMP streams that are read only
 @since iText 2.1.6
 */
inline NSString *ComAowagieTextXmlXmpXmpWriter_get_XPACKET_PI_END_R(void);
static NSString *ComAowagieTextXmlXmpXmpWriter_XPACKET_PI_END_R = @"<?xpacket end=\"r\"?>";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextXmlXmpXmpWriter, XPACKET_PI_END_R, NSString *)

/*!
 @brief The end attribute.
 */
inline jchar ComAowagieTextXmlXmpXmpWriter_get_end(void);
#define ComAowagieTextXmlXmpXmpWriter_end 'w'
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextXmlXmpXmpWriter, end, jchar)

__attribute__((unused)) static void ComAowagieTextXmlXmpXmpWriter_initWithJavaIoOutputStream_withNSString_withInt_(ComAowagieTextXmlXmpXmpWriter *self, JavaIoOutputStream *os, NSString *utfEncoding, jint extraSpace);

__attribute__((unused)) static ComAowagieTextXmlXmpXmpWriter *new_ComAowagieTextXmlXmpXmpWriter_initWithJavaIoOutputStream_withNSString_withInt_(JavaIoOutputStream *os, NSString *utfEncoding, jint extraSpace) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextXmlXmpXmpWriter *create_ComAowagieTextXmlXmpXmpWriter_initWithJavaIoOutputStream_withNSString_withInt_(JavaIoOutputStream *os, NSString *utfEncoding, jint extraSpace);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/xml/xmp/XmpWriter.java"

NSString *ComAowagieTextXmlXmpXmpWriter_EXTRASPACE = @"                                                                                                   \n";
NSString *ComAowagieTextXmlXmpXmpWriter_XPACKET_PI_BEGIN = @"<?xpacket begin=\"\ufeff\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>\n";
NSString *ComAowagieTextXmlXmpXmpWriter_XPACKET_PI_END_W = @"<?xpacket end=\"w\"?>";


#line 68
@implementation ComAowagieTextXmlXmpXmpWriter


#line 113
- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)os
                              withNSString:(NSString *)utfEncoding
                                   withInt:(jint)extraSpace {
  ComAowagieTextXmlXmpXmpWriter_initWithJavaIoOutputStream_withNSString_withInt_(self, os, utfEncoding, extraSpace);
  return self;
}


#line 127
- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  ComAowagieTextXmlXmpXmpWriter_initWithJavaIoOutputStream_(self, os);
  return self;
}


#line 136
- (void)setAboutWithNSString:(NSString *)about {
  self->about_ = about;
}


#line 147
- (void)addRdfDescriptionWithComAowagieTextXmlXmpXmpSchema:(ComAowagieTextXmlXmpXmpSchema *)s {
  [((JavaIoOutputStreamWriter *) nil_chk(self->writer_)) writeWithNSString:@"<rdf:Description rdf:about=\""];
  [self->writer_ writeWithNSString:self->about_];
  [self->writer_ writeWithNSString:@"\" "];
  [self->writer_ writeWithNSString:[((ComAowagieTextXmlXmpXmpSchema *) nil_chk(s)) getXmlns]];
  [self->writer_ writeWithNSString:@">"];
  [self->writer_ writeWithNSString:[s description]];
  [self->writer_ writeWithNSString:@"</rdf:Description>\n"];
}


#line 161
- (void)close {
  [((JavaIoOutputStreamWriter *) nil_chk(self->writer_)) writeWithNSString:@"</rdf:RDF>"];
  [self->writer_ writeWithNSString:@"</x:xmpmeta>\n"];
  for (jint i = 0; i < self->extraSpace_; i++) {
    [self->writer_ writeWithNSString:ComAowagieTextXmlXmpXmpWriter_EXTRASPACE];
  }
  [self->writer_ writeWithNSString:ComAowagieTextXmlXmpXmpWriter_end == 'r' ? ComAowagieTextXmlXmpXmpWriter_XPACKET_PI_END_R : ComAowagieTextXmlXmpXmpWriter_XPACKET_PI_END_W];
  [self->writer_ flush];
  [self->writer_ close];
}


#line 178
- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)os
        withComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)info
                                   withInt:(jint)PdfXConformance {
  ComAowagieTextXmlXmpXmpWriter_initWithJavaIoOutputStream_withComAowagieTextPdfPdfDictionary_withInt_(self, os, info, PdfXConformance);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoOutputStream:withNSString:withInt:);
  methods[1].selector = @selector(initWithJavaIoOutputStream:);
  methods[2].selector = @selector(setAboutWithNSString:);
  methods[3].selector = @selector(addRdfDescriptionWithComAowagieTextXmlXmpXmpSchema:);
  methods[4].selector = @selector(close);
  methods[5].selector = @selector(initWithJavaIoOutputStream:withComAowagieTextPdfPdfDictionary:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UTF8", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "EXTRASPACE", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 9, -1, -1 },
    { "extraSpace_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "writer_", "LJavaIoOutputStreamWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "about_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "XPACKET_PI_BEGIN", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 10, -1, -1 },
    { "XPACKET_PI_END_W", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 11, -1, -1 },
    { "XPACKET_PI_END_R", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "end", "C", .constantValue.asUnichar = ComAowagieTextXmlXmpXmpWriter_end, 0x12, 13, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoOutputStream;LNSString;I", "LJavaIoIOException;", "LJavaIoOutputStream;", "setAbout", "LNSString;", "addRdfDescription", "LComAowagieTextXmlXmpXmpSchema;", "LJavaIoOutputStream;LComAowagieTextPdfPdfDictionary;I", &ComAowagieTextXmlXmpXmpWriter_UTF8, &ComAowagieTextXmlXmpXmpWriter_EXTRASPACE, &ComAowagieTextXmlXmpXmpWriter_XPACKET_PI_BEGIN, &ComAowagieTextXmlXmpXmpWriter_XPACKET_PI_END_W, &ComAowagieTextXmlXmpXmpWriter_XPACKET_PI_END_R, "end" };
  static const J2ObjcClassInfo _ComAowagieTextXmlXmpXmpWriter = { "XmpWriter", "com.aowagie.text.xml.xmp", ptrTable, methods, fields, 7, 0x1, 6, 9, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextXmlXmpXmpWriter;
}

@end


#line 113
void ComAowagieTextXmlXmpXmpWriter_initWithJavaIoOutputStream_withNSString_withInt_(ComAowagieTextXmlXmpXmpWriter *self, JavaIoOutputStream *os, NSString *utfEncoding, jint extraSpace) {
  NSObject_init(self);
  
#line 114
  self->extraSpace_ = extraSpace;
  self->writer_ = new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(os, utfEncoding);
  [self->writer_ writeWithNSString:ComAowagieTextXmlXmpXmpWriter_XPACKET_PI_BEGIN];
  [self->writer_ writeWithNSString:@"<x:xmpmeta xmlns:x=\"adobe:ns:meta/\">\n"];
  [self->writer_ writeWithNSString:@"<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n"];
  self->about_ = @"";
}


#line 113
ComAowagieTextXmlXmpXmpWriter *new_ComAowagieTextXmlXmpXmpWriter_initWithJavaIoOutputStream_withNSString_withInt_(JavaIoOutputStream *os, NSString *utfEncoding, jint extraSpace) {
  J2OBJC_NEW_IMPL(ComAowagieTextXmlXmpXmpWriter, initWithJavaIoOutputStream_withNSString_withInt_, os, utfEncoding, extraSpace)
}


#line 113
ComAowagieTextXmlXmpXmpWriter *create_ComAowagieTextXmlXmpXmpWriter_initWithJavaIoOutputStream_withNSString_withInt_(JavaIoOutputStream *os, NSString *utfEncoding, jint extraSpace) {
  J2OBJC_CREATE_IMPL(ComAowagieTextXmlXmpXmpWriter, initWithJavaIoOutputStream_withNSString_withInt_, os, utfEncoding, extraSpace)
}


#line 127
void ComAowagieTextXmlXmpXmpWriter_initWithJavaIoOutputStream_(ComAowagieTextXmlXmpXmpWriter *self, JavaIoOutputStream *os) {
  ComAowagieTextXmlXmpXmpWriter_initWithJavaIoOutputStream_withNSString_withInt_(self, os, ComAowagieTextXmlXmpXmpWriter_UTF8, 20);
}


#line 127
ComAowagieTextXmlXmpXmpWriter *new_ComAowagieTextXmlXmpXmpWriter_initWithJavaIoOutputStream_(JavaIoOutputStream *os) {
  J2OBJC_NEW_IMPL(ComAowagieTextXmlXmpXmpWriter, initWithJavaIoOutputStream_, os)
}


#line 127
ComAowagieTextXmlXmpXmpWriter *create_ComAowagieTextXmlXmpXmpWriter_initWithJavaIoOutputStream_(JavaIoOutputStream *os) {
  J2OBJC_CREATE_IMPL(ComAowagieTextXmlXmpXmpWriter, initWithJavaIoOutputStream_, os)
}


#line 178
void ComAowagieTextXmlXmpXmpWriter_initWithJavaIoOutputStream_withComAowagieTextPdfPdfDictionary_withInt_(ComAowagieTextXmlXmpXmpWriter *self, JavaIoOutputStream *os, ComAowagieTextPdfPdfDictionary *info, jint PdfXConformance) {
  ComAowagieTextXmlXmpXmpWriter_initWithJavaIoOutputStream_(self, os);
  if (info != nil) {
    ComAowagieTextXmlXmpDublinCoreSchema *dc = new_ComAowagieTextXmlXmpDublinCoreSchema_initPackagePrivate();
    ComAowagieTextXmlXmpPdfSchema *p = new_ComAowagieTextXmlXmpPdfSchema_initPackagePrivate();
    ComAowagieTextXmlXmpXmpBasicSchema *basic = new_ComAowagieTextXmlXmpXmpBasicSchema_initPackagePrivate();
    ComAowagieTextPdfPdfName *key;
    ComAowagieTextPdfPdfObject *obj;
    for (id __strong element in nil_chk([info getKeys])) {
      key = (ComAowagieTextPdfPdfName *) cast_chk(element, [ComAowagieTextPdfPdfName class]);
      obj = [info getWithComAowagieTextPdfPdfName:key];
      if (obj == nil) {
        continue;
      }
      if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, TITLE))) isEqual:key]) {
        [dc addTitleWithNSString:[((ComAowagieTextPdfPdfString *) cast_chk(obj, [ComAowagieTextPdfPdfString class])) toUnicodeString]];
      }
      if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, AUTHOR))) isEqual:key]) {
        [dc addAuthorWithNSString:[((ComAowagieTextPdfPdfString *) cast_chk(obj, [ComAowagieTextPdfPdfString class])) toUnicodeString]];
      }
      if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, SUBJECT))) isEqual:key]) {
        [dc addSubjectWithNSString:[((ComAowagieTextPdfPdfString *) cast_chk(obj, [ComAowagieTextPdfPdfString class])) toUnicodeString]];
        [dc addDescriptionWithNSString:[((ComAowagieTextPdfPdfString *) cast_chk(obj, [ComAowagieTextPdfPdfString class])) toUnicodeString]];
      }
      if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, KEYWORDS))) isEqual:key]) {
        [p addKeywordsWithNSString:[((ComAowagieTextPdfPdfString *) cast_chk(obj, [ComAowagieTextPdfPdfString class])) toUnicodeString]];
      }
      if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, CREATOR))) isEqual:key]) {
        [basic addCreatorToolWithNSString:[((ComAowagieTextPdfPdfString *) cast_chk(obj, [ComAowagieTextPdfPdfString class])) toUnicodeString]];
      }
      if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, PRODUCER))) isEqual:key]) {
        [p addProducerWithNSString:[((ComAowagieTextPdfPdfString *) cast_chk(obj, [ComAowagieTextPdfPdfString class])) toUnicodeString]];
      }
      if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, CREATIONDATE))) isEqual:key]) {
        [basic addCreateDateWithNSString:[((ComAowagieTextPdfPdfDate *) cast_chk(obj, [ComAowagieTextPdfPdfDate class])) getW3CDate]];
      }
      if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, MODDATE))) isEqual:key]) {
        [basic addModDateWithNSString:[((ComAowagieTextPdfPdfDate *) cast_chk(obj, [ComAowagieTextPdfPdfDate class])) getW3CDate]];
      }
    }
    if ([dc size] > 0) {
      [self addRdfDescriptionWithComAowagieTextXmlXmpXmpSchema:dc];
    }
    if ([p size] > 0) {
      [self addRdfDescriptionWithComAowagieTextXmlXmpXmpSchema:p];
    }
    if ([basic size] > 0) {
      [self addRdfDescriptionWithComAowagieTextXmlXmpXmpSchema:basic];
    }
    if (PdfXConformance == ComAowagieTextPdfPdfWriter_PDFA1A || PdfXConformance == ComAowagieTextPdfPdfWriter_PDFA1B) {
      ComAowagieTextXmlXmpPdfA1Schema *a1 = new_ComAowagieTextXmlXmpPdfA1Schema_initPackagePrivate();
      if (PdfXConformance == ComAowagieTextPdfPdfWriter_PDFA1A) {
        [a1 addConformanceWithNSString:@"A"];
      }
      else {
        [a1 addConformanceWithNSString:@"B"];
      }
      [self addRdfDescriptionWithComAowagieTextXmlXmpXmpSchema:a1];
    }
    else if (PdfXConformance == ComAowagieTextPdfPdfWriter_PDFA2A || PdfXConformance == ComAowagieTextPdfPdfWriter_PDFA2B) {
      ComAowagieTextXmlXmpPdfA2Schema *a2 = new_ComAowagieTextXmlXmpPdfA2Schema_initPackagePrivate();
      if (PdfXConformance == ComAowagieTextPdfPdfWriter_PDFA2A) {
        [a2 addConformanceWithNSString:@"A"];
      }
      else {
        [a2 addConformanceWithNSString:@"B"];
      }
      [self addRdfDescriptionWithComAowagieTextXmlXmpXmpSchema:a2];
    }
  }
}


#line 178
ComAowagieTextXmlXmpXmpWriter *new_ComAowagieTextXmlXmpXmpWriter_initWithJavaIoOutputStream_withComAowagieTextPdfPdfDictionary_withInt_(JavaIoOutputStream *os, ComAowagieTextPdfPdfDictionary *info, jint PdfXConformance) {
  J2OBJC_NEW_IMPL(ComAowagieTextXmlXmpXmpWriter, initWithJavaIoOutputStream_withComAowagieTextPdfPdfDictionary_withInt_, os, info, PdfXConformance)
}


#line 178
ComAowagieTextXmlXmpXmpWriter *create_ComAowagieTextXmlXmpXmpWriter_initWithJavaIoOutputStream_withComAowagieTextPdfPdfDictionary_withInt_(JavaIoOutputStream *os, ComAowagieTextPdfPdfDictionary *info, jint PdfXConformance) {
  J2OBJC_CREATE_IMPL(ComAowagieTextXmlXmpXmpWriter, initWithJavaIoOutputStream_withComAowagieTextPdfPdfDictionary_withInt_, os, info, PdfXConformance)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextXmlXmpXmpWriter)
