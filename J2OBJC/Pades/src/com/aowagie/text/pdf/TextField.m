//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/TextField.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/Chunk.h"
#include "com/aowagie/text/Element.h"
#include "com/aowagie/text/Font.h"
#include "com/aowagie/text/Phrase.h"
#include "com/aowagie/text/Rectangle.h"
#include "com/aowagie/text/pdf/BaseField.h"
#include "com/aowagie/text/pdf/BaseFont.h"
#include "com/aowagie/text/pdf/ColumnText.h"
#include "com/aowagie/text/pdf/FontSelector.h"
#include "com/aowagie/text/pdf/GrayColor.h"
#include "com/aowagie/text/pdf/PdfAnnotation.h"
#include "com/aowagie/text/pdf/PdfAppearance.h"
#include "com/aowagie/text/pdf/PdfBorderDictionary.h"
#include "com/aowagie/text/pdf/PdfContentByte.h"
#include "com/aowagie/text/pdf/PdfDashPattern.h"
#include "com/aowagie/text/pdf/PdfFormField.h"
#include "com/aowagie/text/pdf/PdfName.h"
#include "com/aowagie/text/pdf/PdfNumber.h"
#include "com/aowagie/text/pdf/PdfWriter.h"
#include "com/aowagie/text/pdf/TextField.h"
#include "harmony/java/awt/Color.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/TextField must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfTextField () {
 @public
  /*!
   @brief Holds value of property defaultText.
   */
  NSString *defaultText_;
  /*!
   @brief Holds value of property choices.
   */
  IOSObjectArray *choices_;
  /*!
   @brief Holds value of property choiceExports.
   */
  IOSObjectArray *choiceExports_;
  /*!
   @brief Holds value of property choiceSelection.
   */
  jint choiceSelection_;
  jint topFirst_;
  jfloat extraMarginLeft_;
  jfloat extraMarginTop_;
  /*!
   @brief Holds value of property substitutionFonts.
   */
  JavaUtilArrayList *substitutionFonts_;
  /*!
   @brief Holds value of property extensionFont.
   */
  ComAowagieTextPdfBaseFont *extensionFont_;
}

+ (jboolean)checkRTLWithNSString:(NSString *)text;

+ (void)changeFontSizeWithComAowagieTextPhrase:(ComAowagieTextPhrase *)p
                                     withFloat:(jfloat)size;

- (ComAowagieTextPhrase *)composePhraseWithNSString:(NSString *)text
                      withComAowagieTextPdfBaseFont:(ComAowagieTextPdfBaseFont *)ufont
                            withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color
                                          withFloat:(jfloat)fontSize;

/*!
 @brief Removes CRLF from a <code>String</code>.
 @param text Text
 @return String
 @since 2.1.5
 */
+ (NSString *)removeCRLFWithNSString:(NSString *)text;

/*!
 @brief Obfuscates a password <code>String</code>.
 Every character is replaced by an asterisk (*).
 @param text Text
 @return String
 @since 2.1.5
 */
+ (NSString *)obfuscatePasswordWithNSString:(NSString *)text;

- (ComAowagieTextPdfPdfFormField *)getChoiceFieldWithBoolean:(jboolean)isList;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfTextField, defaultText_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTextField, choices_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTextField, choiceExports_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTextField, substitutionFonts_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTextField, extensionFont_, ComAowagieTextPdfBaseFont *)

__attribute__((unused)) static jboolean ComAowagieTextPdfTextField_checkRTLWithNSString_(NSString *text);

__attribute__((unused)) static void ComAowagieTextPdfTextField_changeFontSizeWithComAowagieTextPhrase_withFloat_(ComAowagieTextPhrase *p, jfloat size);

__attribute__((unused)) static ComAowagieTextPhrase *ComAowagieTextPdfTextField_composePhraseWithNSString_withComAowagieTextPdfBaseFont_withHarmonyJavaAwtColor_withFloat_(ComAowagieTextPdfTextField *self, NSString *text, ComAowagieTextPdfBaseFont *ufont, HarmonyJavaAwtColor *color, jfloat fontSize);

__attribute__((unused)) static NSString *ComAowagieTextPdfTextField_removeCRLFWithNSString_(NSString *text);

__attribute__((unused)) static NSString *ComAowagieTextPdfTextField_obfuscatePasswordWithNSString_(NSString *text);

__attribute__((unused)) static ComAowagieTextPdfPdfFormField *ComAowagieTextPdfTextField_getChoiceFieldWithBoolean_(ComAowagieTextPdfTextField *self, jboolean isList);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/TextField.java"


#line 67
@implementation ComAowagieTextPdfTextField


#line 93
- (instancetype)initPackagePrivateWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
                                     withComAowagieTextRectangle:(ComAowagieTextRectangle *)box
                                                    withNSString:(NSString *)fieldName {
  ComAowagieTextPdfTextField_initPackagePrivateWithComAowagieTextPdfPdfWriter_withComAowagieTextRectangle_withNSString_(self, writer, box, fieldName);
  return self;
}


#line 97
+ (jboolean)checkRTLWithNSString:(NSString *)text {
  return ComAowagieTextPdfTextField_checkRTLWithNSString_(text);
}


#line 110
+ (void)changeFontSizeWithComAowagieTextPhrase:(ComAowagieTextPhrase *)p
                                     withFloat:(jfloat)size {
  ComAowagieTextPdfTextField_changeFontSizeWithComAowagieTextPhrase_withFloat_(p, size);
}


#line 116
- (ComAowagieTextPhrase *)composePhraseWithNSString:(NSString *)text
                      withComAowagieTextPdfBaseFont:(ComAowagieTextPdfBaseFont *)ufont
                            withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color
                                          withFloat:(jfloat)fontSize {
  return ComAowagieTextPdfTextField_composePhraseWithNSString_withComAowagieTextPdfBaseFont_withHarmonyJavaAwtColor_withFloat_(self, text, ufont, color, fontSize);
}


#line 143
+ (NSString *)removeCRLFWithNSString:(NSString *)text {
  return ComAowagieTextPdfTextField_removeCRLFWithNSString_(text);
}


#line 173
+ (NSString *)obfuscatePasswordWithNSString:(NSString *)text {
  return ComAowagieTextPdfTextField_obfuscatePasswordWithNSString_(text);
}


#line 187
- (ComAowagieTextPdfPdfAppearance *)getAppearance {
  ComAowagieTextPdfPdfAppearance *app = [self getBorderAppearance];
  [((ComAowagieTextPdfPdfAppearance *) nil_chk(app)) beginVariableText];
  if (self->text_ == nil || [self->text_ java_length] == 0) {
    [app endVariableText];
    return app;
  }
  
#line 195
  jboolean borderExtra = self->borderStyle_ == ComAowagieTextPdfPdfBorderDictionary_STYLE_BEVELED || self->borderStyle_ == ComAowagieTextPdfPdfBorderDictionary_STYLE_INSET;
  jfloat h = [((ComAowagieTextRectangle *) nil_chk(self->box_)) getHeight] - self->borderWidth_ * 2 - self->extraMarginTop_;
  jfloat bw2 = self->borderWidth_;
  if (borderExtra) {
    JreMinusAssignFloatF(&h, self->borderWidth_ * 2);
    JreTimesAssignFloatF(&bw2, 2);
  }
  jfloat offsetX = JavaLangMath_maxWithFloat_withFloat_(bw2, 1);
  jfloat offX = JavaLangMath_minWithFloat_withFloat_(bw2, offsetX);
  [app saveState];
  [app rectangleWithFloat:offX withFloat:offX withFloat:[((ComAowagieTextRectangle *) nil_chk(self->box_)) getWidth] - 2 * offX withFloat:[((ComAowagieTextRectangle *) nil_chk(self->box_)) getHeight] - 2 * offX];
  [app clip];
  [app newPath];
  NSString *ptext;
  if ((self->options_ & ComAowagieTextPdfBaseField_PASSWORD) != 0) {
    ptext = ComAowagieTextPdfTextField_obfuscatePasswordWithNSString_(self->text_);
  }
  else
#line 211
  if ((self->options_ & ComAowagieTextPdfBaseField_MULTILINE) == 0) {
    ptext = ComAowagieTextPdfTextField_removeCRLFWithNSString_(self->text_);
  }
  else {
    ptext = self->text_;
  }
  ComAowagieTextPdfBaseFont *ufont = [self getRealFont];
  HarmonyJavaAwtColor *fcolor = self->textColor_ == nil ? JreLoadStatic(ComAowagieTextPdfGrayColor, GRAYBLACK) : self->textColor_;
  jint rtl = ComAowagieTextPdfTextField_checkRTLWithNSString_(ptext) ? ComAowagieTextPdfPdfWriter_RUN_DIRECTION_LTR : ComAowagieTextPdfPdfWriter_RUN_DIRECTION_NO_BIDI;
  jfloat usize = self->fontSize_;
  ComAowagieTextPhrase *phrase = ComAowagieTextPdfTextField_composePhraseWithNSString_withComAowagieTextPdfBaseFont_withHarmonyJavaAwtColor_withFloat_(self, ptext, ufont, fcolor, usize);
  if ((self->options_ & ComAowagieTextPdfBaseField_MULTILINE) != 0) {
    jfloat width = [((ComAowagieTextRectangle *) nil_chk(self->box_)) getWidth] - 4 * offsetX - self->extraMarginLeft_;
    jfloat factor = [((ComAowagieTextPdfBaseFont *) nil_chk(ufont)) getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_BBOXURY withFloat:1] - [ufont getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_BBOXLLY withFloat:1];
    ComAowagieTextPdfColumnText *ct = new_ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(nil);
    if (usize == 0) {
      usize = h / factor;
      if (usize > 4) {
        if (usize > 12) {
          usize = 12;
        }
        jfloat step = JavaLangMath_maxWithFloat_withFloat_((usize - 4) / 10, 0.2f);
        [ct setSimpleColumnWithFloat:0 withFloat:-h withFloat:width withFloat:0];
        [ct setAlignmentWithInt:self->alignment_];
        [ct setRunDirectionWithInt:rtl];
        for (; usize > 4; JreMinusAssignFloatF(&usize, step)) {
          [ct setYLineWithFloat:0];
          ComAowagieTextPdfTextField_changeFontSizeWithComAowagieTextPhrase_withFloat_(phrase, usize);
          [ct setTextWithComAowagieTextPhrase:phrase];
          [ct setLeadingWithFloat:factor * usize];
          jint status = [ct goWithBoolean:true];
          if ((status & ComAowagieTextPdfColumnText_NO_MORE_COLUMN) == 0) {
            break;
          }
        }
      }
      if (usize < 4) {
        usize = 4;
      }
    }
    ComAowagieTextPdfTextField_changeFontSizeWithComAowagieTextPhrase_withFloat_(phrase, usize);
    [ct setCanvasWithComAowagieTextPdfPdfContentByte:app];
    jfloat leading = usize * factor;
    jfloat offsetY = offsetX + h - [ufont getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_BBOXURY withFloat:usize];
    [ct setSimpleColumnWithFloat:self->extraMarginLeft_ + 2 * offsetX withFloat:-20000 withFloat:[((ComAowagieTextRectangle *) nil_chk(self->box_)) getWidth] - 2 * offsetX withFloat:offsetY + leading];
    [ct setLeadingWithFloat:leading];
    [ct setAlignmentWithInt:self->alignment_];
    [ct setRunDirectionWithInt:rtl];
    [ct setTextWithComAowagieTextPhrase:phrase];
    [ct go];
  }
  else {
    if (usize == 0) {
      jfloat maxCalculatedSize = h / ([((ComAowagieTextPdfBaseFont *) nil_chk(ufont)) getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_BBOXURX withFloat:1] - [ufont getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_BBOXLLY withFloat:1]);
      ComAowagieTextPdfTextField_changeFontSizeWithComAowagieTextPhrase_withFloat_(phrase, 1);
      jfloat wd = ComAowagieTextPdfColumnText_getWidthWithComAowagieTextPhrase_withInt_withInt_(phrase, rtl, 0);
      if (wd == 0) {
        usize = maxCalculatedSize;
      }
      else {
        
#line 270
        usize = JavaLangMath_minWithFloat_withFloat_(maxCalculatedSize, ([((ComAowagieTextRectangle *) nil_chk(self->box_)) getWidth] - self->extraMarginLeft_ - 4 * offsetX) / wd);
      }
      if (usize < 4) {
        usize = 4;
      }
    }
    ComAowagieTextPdfTextField_changeFontSizeWithComAowagieTextPhrase_withFloat_(phrase, usize);
    jfloat offsetY = offX + ([((ComAowagieTextRectangle *) nil_chk(self->box_)) getHeight] - 2 * offX - [((ComAowagieTextPdfBaseFont *) nil_chk(ufont)) getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_ASCENT withFloat:usize]) / 2;
    if (offsetY < offX) {
      offsetY = offX;
    }
    if (offsetY - offX < -[ufont getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_DESCENT withFloat:usize]) {
      jfloat ny = -[ufont getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_DESCENT withFloat:usize] + offX;
      jfloat dy = [((ComAowagieTextRectangle *) nil_chk(self->box_)) getHeight] - offX - [ufont getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_ASCENT withFloat:usize];
      offsetY = JavaLangMath_minWithFloat_withFloat_(ny, JavaLangMath_maxWithFloat_withFloat_(offsetY, dy));
    }
    if ((self->options_ & ComAowagieTextPdfBaseField_COMB) != 0 && self->maxCharacterLength_ > 0) {
      jint textLen = JavaLangMath_minWithInt_withInt_(self->maxCharacterLength_, [((NSString *) nil_chk(ptext)) java_length]);
      jint position = 0;
      if (self->alignment_ == ComAowagieTextElement_ALIGN_RIGHT) {
        position = self->maxCharacterLength_ - textLen;
      }
      else
#line 291
      if (self->alignment_ == ComAowagieTextElement_ALIGN_CENTER) {
        position = JreIntDiv((self->maxCharacterLength_ - textLen), 2);
      }
      jfloat step = ([((ComAowagieTextRectangle *) nil_chk(self->box_)) getWidth] - self->extraMarginLeft_) / self->maxCharacterLength_;
      jfloat start = step / 2 + position * step;
      if (self->textColor_ == nil) {
        [app setGrayFillWithFloat:0];
      }
      else {
        
#line 299
        [app setColorFillWithHarmonyJavaAwtColor:self->textColor_];
      }
      [app beginText];
      for (jint k = 0; k < [((ComAowagieTextPhrase *) nil_chk(phrase)) size]; ++k) {
        ComAowagieTextChunk *ck = (ComAowagieTextChunk *) cast_chk([phrase getWithInt:k], [ComAowagieTextChunk class]);
        ComAowagieTextPdfBaseFont *bf = [((ComAowagieTextFont *) nil_chk([((ComAowagieTextChunk *) nil_chk(ck)) getFont])) getBaseFont];
        [app setFontAndSizeWithComAowagieTextPdfBaseFont:bf withFloat:usize];
        JavaLangStringBuffer *sb = [ck appendWithNSString:@""];
        for (jint j = 0; j < [((JavaLangStringBuffer *) nil_chk(sb)) java_length]; ++j) {
          NSString *c = [sb substringWithInt:j withInt:j + 1];
          jfloat wd = [((ComAowagieTextPdfBaseFont *) nil_chk(bf)) getWidthPointWithNSString:c withFloat:usize];
          [app setTextMatrixWithFloat:self->extraMarginLeft_ + start - wd / 2 withFloat:offsetY - self->extraMarginTop_];
          [app showTextWithNSString:c];
          JrePlusAssignFloatF(&start, step);
        }
      }
      [app endText];
    }
    else {
      jfloat x;
      switch (self->alignment_) {
        case ComAowagieTextElement_ALIGN_RIGHT:
        x = self->extraMarginLeft_ + [((ComAowagieTextRectangle *) nil_chk(self->box_)) getWidth] - 2 * offsetX;
        break;
        case ComAowagieTextElement_ALIGN_CENTER:
        x = self->extraMarginLeft_ + [((ComAowagieTextRectangle *) nil_chk(self->box_)) getWidth] / 2;
        break;
        default:
        x = self->extraMarginLeft_ + 2 * offsetX;
      }
      ComAowagieTextPdfColumnText_showTextAlignedWithComAowagieTextPdfPdfContentByte_withInt_withComAowagieTextPhrase_withFloat_withFloat_withFloat_withInt_withInt_(app, self->alignment_, phrase, x, offsetY - self->extraMarginTop_, 0, rtl, 0);
    }
  }
  [app restoreState];
  [app endVariableText];
  return app;
}


#line 343
- (ComAowagieTextPdfPdfAppearance *)getListAppearance {
  ComAowagieTextPdfPdfAppearance *app = [self getBorderAppearance];
  [((ComAowagieTextPdfPdfAppearance *) nil_chk(app)) beginVariableText];
  if (self->choices_ == nil || self->choices_->size_ == 0) {
    [app endVariableText];
    return app;
  }
  jint topChoice = self->choiceSelection_;
  if (topChoice >= self->choices_->size_) {
    topChoice = self->choices_->size_ - 1;
  }
  if (topChoice < 0) {
    topChoice = 0;
  }
  ComAowagieTextPdfBaseFont *ufont = [self getRealFont];
  jfloat usize = self->fontSize_;
  if (usize == 0) {
    usize = 12;
  }
  jboolean borderExtra = self->borderStyle_ == ComAowagieTextPdfPdfBorderDictionary_STYLE_BEVELED || self->borderStyle_ == ComAowagieTextPdfPdfBorderDictionary_STYLE_INSET;
  jfloat h = [((ComAowagieTextRectangle *) nil_chk(self->box_)) getHeight] - self->borderWidth_ * 2;
  jfloat offsetX = self->borderWidth_;
  if (borderExtra) {
    JreMinusAssignFloatF(&h, self->borderWidth_ * 2);
    JreTimesAssignFloatF(&offsetX, 2);
  }
  jfloat leading = [((ComAowagieTextPdfBaseFont *) nil_chk(ufont)) getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_BBOXURY withFloat:usize] - [ufont getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_BBOXLLY withFloat:usize];
  jint maxFit = JreFpToInt((h / leading)) + 1;
  jint first = 0;
  jint last = 0;
  last = topChoice + JreIntDiv(maxFit, 2) + 1;
  first = last - maxFit;
  if (first < 0) {
    last += first;
    first = 0;
  }
  
#line 380
  last = first + maxFit;
  if (last > ((IOSObjectArray *) nil_chk(self->choices_))->size_) {
    last = self->choices_->size_;
  }
  self->topFirst_ = first;
  [app saveState];
  [app rectangleWithFloat:offsetX withFloat:offsetX withFloat:[((ComAowagieTextRectangle *) nil_chk(self->box_)) getWidth] - 2 * offsetX withFloat:[((ComAowagieTextRectangle *) nil_chk(self->box_)) getHeight] - 2 * offsetX];
  [app clip];
  [app newPath];
  HarmonyJavaAwtColor *fcolor = self->textColor_ == nil ? JreLoadStatic(ComAowagieTextPdfGrayColor, GRAYBLACK) : self->textColor_;
  [app setColorFillWithHarmonyJavaAwtColor:new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(10, 36, 106)];
  [app rectangleWithFloat:offsetX withFloat:offsetX + h - (topChoice - first + 1) * leading withFloat:[((ComAowagieTextRectangle *) nil_chk(self->box_)) getWidth] - 2 * offsetX withFloat:leading];
  [app fill];
  jfloat xp = offsetX * 2;
  jfloat yp = offsetX + h - [ufont getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_BBOXURY withFloat:usize];
  for (jint idx = first; idx < last; ++idx, JreMinusAssignFloatF(&yp, leading)) {
    NSString *ptext = IOSObjectArray_Get(nil_chk(self->choices_), idx);
    jint rtl = ComAowagieTextPdfTextField_checkRTLWithNSString_(ptext) ? ComAowagieTextPdfPdfWriter_RUN_DIRECTION_LTR : ComAowagieTextPdfPdfWriter_RUN_DIRECTION_NO_BIDI;
    ptext = ComAowagieTextPdfTextField_removeCRLFWithNSString_(ptext);
    ComAowagieTextPhrase *phrase = ComAowagieTextPdfTextField_composePhraseWithNSString_withComAowagieTextPdfBaseFont_withHarmonyJavaAwtColor_withFloat_(self, ptext, ufont, idx == topChoice ? JreLoadStatic(ComAowagieTextPdfGrayColor, GRAYWHITE) : fcolor, usize);
    ComAowagieTextPdfColumnText_showTextAlignedWithComAowagieTextPdfPdfContentByte_withInt_withComAowagieTextPhrase_withFloat_withFloat_withFloat_withInt_withInt_(app, ComAowagieTextElement_ALIGN_LEFT, phrase, xp, yp, 0, rtl, 0);
  }
  [app restoreState];
  [app endVariableText];
  return app;
}


#line 413
- (ComAowagieTextPdfPdfFormField *)getTextField {
  if (self->maxCharacterLength_ <= 0) {
    self->options_ &= ~ComAowagieTextPdfBaseField_COMB;
  }
  if ((self->options_ & ComAowagieTextPdfBaseField_COMB) != 0) {
    self->options_ &= ~ComAowagieTextPdfBaseField_MULTILINE;
  }
  ComAowagieTextPdfPdfFormField *field = ComAowagieTextPdfPdfFormField_createTextFieldWithComAowagieTextPdfPdfWriter_withBoolean_withBoolean_withInt_(self->writer_, false, false, self->maxCharacterLength_);
  [((ComAowagieTextPdfPdfFormField *) nil_chk(field)) setWidgetWithComAowagieTextRectangle:self->box_ withComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfAnnotation, HIGHLIGHT_INVERT)];
  switch (self->alignment_) {
    case ComAowagieTextElement_ALIGN_CENTER:
    [field setQuaddingWithInt:ComAowagieTextPdfPdfFormField_Q_CENTER];
    break;
    case ComAowagieTextElement_ALIGN_RIGHT:
    [field setQuaddingWithInt:ComAowagieTextPdfPdfFormField_Q_RIGHT];
    break;
  }
  if (self->rotation_ != 0) {
    [field setMKRotationWithInt:self->rotation_];
  }
  if (self->fieldName_ != nil) {
    [field setFieldNameWithNSString:self->fieldName_];
    if (![@"" isEqual:self->text_]) {
      [field setValueAsStringWithNSString:self->text_];
    }
    if (self->defaultText_ != nil) {
      [field setDefaultValueAsStringWithNSString:self->defaultText_];
    }
    if ((self->options_ & ComAowagieTextPdfBaseField_READ_ONLY) != 0) {
      [field setFieldFlagsWithInt:ComAowagieTextPdfPdfFormField_FF_READ_ONLY];
    }
    if ((self->options_ & ComAowagieTextPdfBaseField_REQUIRED) != 0) {
      [field setFieldFlagsWithInt:ComAowagieTextPdfPdfFormField_FF_REQUIRED];
    }
    if ((self->options_ & ComAowagieTextPdfBaseField_MULTILINE) != 0) {
      [field setFieldFlagsWithInt:ComAowagieTextPdfPdfFormField_FF_MULTILINE];
    }
    if ((self->options_ & ComAowagieTextPdfBaseField_DO_NOT_SCROLL) != 0) {
      [field setFieldFlagsWithInt:ComAowagieTextPdfPdfFormField_FF_DONOTSCROLL];
    }
    if ((self->options_ & ComAowagieTextPdfBaseField_PASSWORD) != 0) {
      [field setFieldFlagsWithInt:ComAowagieTextPdfPdfFormField_FF_PASSWORD];
    }
    if ((self->options_ & ComAowagieTextPdfBaseField_FILE_SELECTION) != 0) {
      [field setFieldFlagsWithInt:ComAowagieTextPdfPdfFormField_FF_FILESELECT];
    }
    if ((self->options_ & ComAowagieTextPdfBaseField_DO_NOT_SPELL_CHECK) != 0) {
      [field setFieldFlagsWithInt:ComAowagieTextPdfPdfFormField_FF_DONOTSPELLCHECK];
    }
    if ((self->options_ & ComAowagieTextPdfBaseField_COMB) != 0) {
      [field setFieldFlagsWithInt:ComAowagieTextPdfPdfFormField_FF_COMB];
    }
  }
  [field setBorderStyleWithComAowagieTextPdfPdfBorderDictionary:new_ComAowagieTextPdfPdfBorderDictionary_initPackagePrivateWithFloat_withInt_withComAowagieTextPdfPdfDashPattern_(self->borderWidth_, self->borderStyle_, new_ComAowagieTextPdfPdfDashPattern_initPackagePrivateWithFloat_(3))];
  ComAowagieTextPdfPdfAppearance *tp = [self getAppearance];
  [field setAppearanceWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfAnnotation, APPEARANCE_NORMAL) withComAowagieTextPdfPdfTemplate:tp];
  ComAowagieTextPdfPdfAppearance *da = (ComAowagieTextPdfPdfAppearance *) cast_chk([((ComAowagieTextPdfPdfAppearance *) nil_chk(tp)) getDuplicate], [ComAowagieTextPdfPdfAppearance class]);
  [((ComAowagieTextPdfPdfAppearance *) nil_chk(da)) setFontAndSizeWithComAowagieTextPdfBaseFont:[self getRealFont] withFloat:self->fontSize_];
  if (self->textColor_ == nil) {
    [da setGrayFillWithFloat:0];
  }
  else {
    
#line 474
    [da setColorFillWithHarmonyJavaAwtColor:self->textColor_];
  }
  [field setDefaultAppearanceStringWithComAowagieTextPdfPdfContentByte:da];
  if (self->borderColor_ != nil) {
    [field setMKBorderColorWithHarmonyJavaAwtColor:self->borderColor_];
  }
  if (self->backgroundColor_ != nil) {
    [field setMKBackgroundColorWithHarmonyJavaAwtColor:self->backgroundColor_];
  }
  switch (self->visibility_) {
    case ComAowagieTextPdfBaseField_HIDDEN:
    [field setFlagsWithInt:ComAowagieTextPdfPdfAnnotation_FLAGS_PRINT | ComAowagieTextPdfPdfAnnotation_FLAGS_HIDDEN];
    break;
    case ComAowagieTextPdfBaseField_VISIBLE_BUT_DOES_NOT_PRINT:
    break;
    case ComAowagieTextPdfBaseField_HIDDEN_BUT_PRINTABLE:
    [field setFlagsWithInt:ComAowagieTextPdfPdfAnnotation_FLAGS_PRINT | ComAowagieTextPdfPdfAnnotation_FLAGS_NOVIEW];
    break;
    default:
    [field setFlagsWithInt:ComAowagieTextPdfPdfAnnotation_FLAGS_PRINT];
    break;
  }
  return field;
}


#line 505
- (ComAowagieTextPdfPdfFormField *)getComboField {
  return ComAowagieTextPdfTextField_getChoiceFieldWithBoolean_(self, false);
}


#line 515
- (ComAowagieTextPdfPdfFormField *)getListField {
  return ComAowagieTextPdfTextField_getChoiceFieldWithBoolean_(self, true);
}

- (ComAowagieTextPdfPdfFormField *)getChoiceFieldWithBoolean:(jboolean)isList {
  return ComAowagieTextPdfTextField_getChoiceFieldWithBoolean_(self, isList);
}


#line 636
- (NSString *)getDefaultText {
  return self->defaultText_;
}


#line 644
- (void)setDefaultTextWithNSString:(NSString *)defaultText {
  self->defaultText_ = defaultText;
}


#line 652
- (IOSObjectArray *)getChoices {
  return self->choices_;
}


#line 660
- (void)setChoicesWithNSStringArray:(IOSObjectArray *)choices {
  self->choices_ = choices;
}


#line 668
- (IOSObjectArray *)getChoiceExports {
  return self->choiceExports_;
}


#line 678
- (void)setChoiceExportsWithNSStringArray:(IOSObjectArray *)choiceExports {
  self->choiceExports_ = choiceExports;
}


#line 686
- (jint)getChoiceSelection {
  return self->choiceSelection_;
}


#line 694
- (void)setChoiceSelectionWithInt:(jint)choiceSelection {
  self->choiceSelection_ = choiceSelection;
}

- (jint)getTopFirst {
  return self->topFirst_;
}


#line 707
- (void)setExtraMarginWithFloat:(jfloat)extraMarginLeft
                      withFloat:(jfloat)extraMarginTop {
  
#line 708
  self->extraMarginLeft_ = extraMarginLeft;
  self->extraMarginTop_ = extraMarginTop;
}


#line 722
- (JavaUtilArrayList *)getSubstitutionFonts {
  return self->substitutionFonts_;
}


#line 731
- (void)setSubstitutionFontsWithJavaUtilArrayList:(JavaUtilArrayList *)substitutionFonts {
  self->substitutionFonts_ = substitutionFonts;
}


#line 745
- (ComAowagieTextPdfBaseFont *)getExtensionFont {
  return self->extensionFont_;
}


#line 754
- (void)setExtensionFontWithComAowagieTextPdfBaseFont:(ComAowagieTextPdfBaseFont *)extensionFont {
  self->extensionFont_ = extensionFont;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPhrase;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 7, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 8, 2, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfAppearance;", 0x1, -1, -1, 9, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfAppearance;", 0x0, -1, -1, 9, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfFormField;", 0x1, -1, -1, 9, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfFormField;", 0x1, -1, -1, 9, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfFormField;", 0x1, -1, -1, 9, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfFormField;", 0x2, 10, 11, 9, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 18, 19, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfBaseFont;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithComAowagieTextPdfPdfWriter:withComAowagieTextRectangle:withNSString:);
  methods[1].selector = @selector(checkRTLWithNSString:);
  methods[2].selector = @selector(changeFontSizeWithComAowagieTextPhrase:withFloat:);
  methods[3].selector = @selector(composePhraseWithNSString:withComAowagieTextPdfBaseFont:withHarmonyJavaAwtColor:withFloat:);
  methods[4].selector = @selector(removeCRLFWithNSString:);
  methods[5].selector = @selector(obfuscatePasswordWithNSString:);
  methods[6].selector = @selector(getAppearance);
  methods[7].selector = @selector(getListAppearance);
  methods[8].selector = @selector(getTextField);
  methods[9].selector = @selector(getComboField);
  methods[10].selector = @selector(getListField);
  methods[11].selector = @selector(getChoiceFieldWithBoolean:);
  methods[12].selector = @selector(getDefaultText);
  methods[13].selector = @selector(setDefaultTextWithNSString:);
  methods[14].selector = @selector(getChoices);
  methods[15].selector = @selector(setChoicesWithNSStringArray:);
  methods[16].selector = @selector(getChoiceExports);
  methods[17].selector = @selector(setChoiceExportsWithNSStringArray:);
  methods[18].selector = @selector(getChoiceSelection);
  methods[19].selector = @selector(setChoiceSelectionWithInt:);
  methods[20].selector = @selector(getTopFirst);
  methods[21].selector = @selector(setExtraMarginWithFloat:withFloat:);
  methods[22].selector = @selector(getSubstitutionFonts);
  methods[23].selector = @selector(setSubstitutionFontsWithJavaUtilArrayList:);
  methods[24].selector = @selector(getExtensionFont);
  methods[25].selector = @selector(setExtensionFontWithComAowagieTextPdfBaseFont:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "defaultText_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "choices_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "choiceExports_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "choiceSelection_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "topFirst_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extraMarginLeft_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extraMarginTop_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "substitutionFonts_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extensionFont_", "LComAowagieTextPdfBaseFont;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfPdfWriter;LComAowagieTextRectangle;LNSString;", "checkRTL", "LNSString;", "changeFontSize", "LComAowagieTextPhrase;F", "composePhrase", "LNSString;LComAowagieTextPdfBaseFont;LHarmonyJavaAwtColor;F", "removeCRLF", "obfuscatePassword", "LJavaIoIOException;LComAowagieTextDocumentException;", "getChoiceField", "Z", "setDefaultText", "setChoices", "[LNSString;", "setChoiceExports", "setChoiceSelection", "I", "setExtraMargin", "FF", "setSubstitutionFonts", "LJavaUtilArrayList;", "setExtensionFont", "LComAowagieTextPdfBaseFont;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfTextField = { "TextField", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 26, 9, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfTextField;
}

@end


#line 93
void ComAowagieTextPdfTextField_initPackagePrivateWithComAowagieTextPdfPdfWriter_withComAowagieTextRectangle_withNSString_(ComAowagieTextPdfTextField *self, ComAowagieTextPdfPdfWriter *writer, ComAowagieTextRectangle *box, NSString *fieldName) {
  ComAowagieTextPdfBaseField_initPackagePrivateWithComAowagieTextPdfPdfWriter_withComAowagieTextRectangle_withNSString_(self, writer, box, fieldName);
}


#line 93
ComAowagieTextPdfTextField *new_ComAowagieTextPdfTextField_initPackagePrivateWithComAowagieTextPdfPdfWriter_withComAowagieTextRectangle_withNSString_(ComAowagieTextPdfPdfWriter *writer, ComAowagieTextRectangle *box, NSString *fieldName) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfTextField, initPackagePrivateWithComAowagieTextPdfPdfWriter_withComAowagieTextRectangle_withNSString_, writer, box, fieldName)
}


#line 93
ComAowagieTextPdfTextField *create_ComAowagieTextPdfTextField_initPackagePrivateWithComAowagieTextPdfPdfWriter_withComAowagieTextRectangle_withNSString_(ComAowagieTextPdfPdfWriter *writer, ComAowagieTextRectangle *box, NSString *fieldName) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfTextField, initPackagePrivateWithComAowagieTextPdfPdfWriter_withComAowagieTextRectangle_withNSString_, writer, box, fieldName)
}

jboolean ComAowagieTextPdfTextField_checkRTLWithNSString_(NSString *text) {
  ComAowagieTextPdfTextField_initialize();
  
#line 98
  if (text == nil || [text java_length] == 0) {
    return false;
  }
  IOSCharArray *cc = [text java_toCharArray];
  {
    IOSCharArray *a__ =
#line 102
    cc;
    jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
    jchar const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jchar c = *b__++;
      
#line 103
      if (c >= (jint) 0x590 && c < (jint) 0x0780) {
        return true;
      }
    }
  }
  
#line 107
  return false;
}


#line 110
void ComAowagieTextPdfTextField_changeFontSizeWithComAowagieTextPhrase_withFloat_(ComAowagieTextPhrase *p, jfloat size) {
  ComAowagieTextPdfTextField_initialize();
  
#line 111
  for (jint k = 0; k < [((ComAowagieTextPhrase *) nil_chk(p)) size]; ++k) {
    [((ComAowagieTextFont *) nil_chk([((ComAowagieTextChunk *) nil_chk(((ComAowagieTextChunk *) cast_chk([p getWithInt:k], [ComAowagieTextChunk class])))) getFont])) setSizeWithFloat:size];
  }
}


#line 116
ComAowagieTextPhrase *ComAowagieTextPdfTextField_composePhraseWithNSString_withComAowagieTextPdfBaseFont_withHarmonyJavaAwtColor_withFloat_(ComAowagieTextPdfTextField *self, NSString *text, ComAowagieTextPdfBaseFont *ufont, HarmonyJavaAwtColor *color, jfloat fontSize) {
  ComAowagieTextPhrase *phrase = nil;
  if (self->extensionFont_ == nil && (self->substitutionFonts_ == nil || [self->substitutionFonts_ isEmpty])) {
    phrase = new_ComAowagieTextPhrase_initWithComAowagieTextChunk_(new_ComAowagieTextChunk_initWithNSString_withComAowagieTextFont_(text, new_ComAowagieTextFont_initWithComAowagieTextPdfBaseFont_withFloat_withInt_withHarmonyJavaAwtColor_(ufont, fontSize, 0, color)));
  }
  else {
    
#line 121
    ComAowagieTextPdfFontSelector *fs = new_ComAowagieTextPdfFontSelector_initPackagePrivate();
    [fs addFontWithComAowagieTextFont:new_ComAowagieTextFont_initWithComAowagieTextPdfBaseFont_withFloat_withInt_withHarmonyJavaAwtColor_(ufont, fontSize, 0, color)];
    if (self->extensionFont_ != nil) {
      [fs addFontWithComAowagieTextFont:new_ComAowagieTextFont_initWithComAowagieTextPdfBaseFont_withFloat_withInt_withHarmonyJavaAwtColor_(self->extensionFont_, fontSize, 0, color)];
    }
    if (self->substitutionFonts_ != nil) {
      for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(self->substitutionFonts_)) size]; ++k) {
        [fs addFontWithComAowagieTextFont:new_ComAowagieTextFont_initWithComAowagieTextPdfBaseFont_withFloat_withInt_withHarmonyJavaAwtColor_((ComAowagieTextPdfBaseFont *) cast_chk([((JavaUtilArrayList *) nil_chk(self->substitutionFonts_)) getWithInt:k], [ComAowagieTextPdfBaseFont class]), fontSize, 0, color)];
      }
    }
    phrase = [fs processWithNSString:text];
  }
  return phrase;
}


#line 143
NSString *ComAowagieTextPdfTextField_removeCRLFWithNSString_(NSString *text) {
  ComAowagieTextPdfTextField_initialize();
  
#line 144
  if ([((NSString *) nil_chk(text)) java_indexOf:0x000a] >= 0 || [text java_indexOf:0x000d] >= 0) {
    IOSCharArray *p = [text java_toCharArray];
    JavaLangStringBuffer *sb = new_JavaLangStringBuffer_initWithInt_(((IOSCharArray *) nil_chk(p))->size_);
    for (jint k = 0; k < p->size_; ++k) {
      jchar c = IOSCharArray_Get(p, k);
      if (c == 0x000a) {
        (void) [sb appendWithChar:' '];
      }
      else
#line 151
      if (c == 0x000d) {
        (void) [sb appendWithChar:' '];
        if (k < p->size_ - 1 && IOSCharArray_Get(p, k + 1) == 0x000a) {
          ++k;
        }
      }
      else {
        
#line 157
        (void) [sb appendWithChar:c];
      }
    }
    return [sb description];
  }
  return text;
}


#line 173
NSString *ComAowagieTextPdfTextField_obfuscatePasswordWithNSString_(NSString *text) {
  ComAowagieTextPdfTextField_initialize();
  
#line 174
  IOSCharArray *pchar = [IOSCharArray newArrayWithLength:[((NSString *) nil_chk(text)) java_length]];
  for (jint i = 0; i < [text java_length]; i++) {
    *IOSCharArray_GetRef(pchar, i) = '*';
  }
  return [NSString java_stringWithCharacters:pchar];
}


#line 519
ComAowagieTextPdfPdfFormField *ComAowagieTextPdfTextField_getChoiceFieldWithBoolean_(ComAowagieTextPdfTextField *self, jboolean isList) {
  self->options_ &= ~ComAowagieTextPdfBaseField_MULTILINE & ~ComAowagieTextPdfBaseField_COMB;
  IOSObjectArray *uchoices = self->choices_;
  if (uchoices == nil) {
    uchoices = [IOSObjectArray newArrayWithLength:0 type:NSString_class_()];
  }
  jint topChoice = self->choiceSelection_;
  if (topChoice >= uchoices->size_) {
    topChoice = uchoices->size_ - 1;
  }
  if (self->text_ == nil) {
    
#line 531
    self->text_ = @"";
  }
  if (topChoice >= 0) {
    self->text_ = IOSObjectArray_Get(uchoices, topChoice);
  }
  if (topChoice < 0) {
    topChoice = 0;
  }
  ComAowagieTextPdfPdfFormField *field = nil;
  IOSObjectArray *mix = nil;
  if (self->choiceExports_ == nil) {
    if (isList) {
      field = ComAowagieTextPdfPdfFormField_createListWithComAowagieTextPdfPdfWriter_withNSStringArray_withInt_(self->writer_, uchoices, topChoice);
    }
    else {
      
#line 545
      field = ComAowagieTextPdfPdfFormField_createComboWithComAowagieTextPdfPdfWriter_withBoolean_withNSStringArray_withInt_(self->writer_, (self->options_ & ComAowagieTextPdfBaseField_EDIT) != 0, uchoices, topChoice);
    }
  }
  else {
    mix = [IOSObjectArray newArrayWithDimensions:2 lengths:(jint[]){ uchoices->size_, 2 } type:NSString_class_()];
    for (jint k = 0; k < mix->size_; ++k) {
      (void) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(mix, k)), 0, IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(mix, k)), 1, IOSObjectArray_Get(uchoices, k)));
    }
    jint top = JavaLangMath_minWithInt_withInt_(uchoices->size_, self->choiceExports_->size_);
    for (jint k = 0; k < top; ++k) {
      if (IOSObjectArray_Get(nil_chk(self->choiceExports_), k) != nil) {
        (void) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(mix, k)), 0, IOSObjectArray_Get(self->choiceExports_, k));
      }
    }
    if (isList) {
      field = ComAowagieTextPdfPdfFormField_createListWithComAowagieTextPdfPdfWriter_withNSStringArray2_withInt_(self->writer_, mix, topChoice);
    }
    else {
      
#line 562
      field = ComAowagieTextPdfPdfFormField_createComboWithComAowagieTextPdfPdfWriter_withBoolean_withNSStringArray2_withInt_(self->writer_, (self->options_ & ComAowagieTextPdfBaseField_EDIT) != 0, mix, topChoice);
    }
  }
  [((ComAowagieTextPdfPdfFormField *) nil_chk(field)) setWidgetWithComAowagieTextRectangle:self->box_ withComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfAnnotation, HIGHLIGHT_INVERT)];
  if (self->rotation_ != 0) {
    [field setMKRotationWithInt:self->rotation_];
  }
  if (self->fieldName_ != nil) {
    [field setFieldNameWithNSString:self->fieldName_];
    if (uchoices->size_ > 0) {
      if (mix != nil) {
        [field setValueAsStringWithNSString:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mix, topChoice)), 0)];
        [field setDefaultValueAsStringWithNSString:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mix, topChoice)), 0)];
      }
      else {
        [field setValueAsStringWithNSString:self->text_];
        [field setDefaultValueAsStringWithNSString:self->text_];
      }
    }
    if ((self->options_ & ComAowagieTextPdfBaseField_READ_ONLY) != 0) {
      [field setFieldFlagsWithInt:ComAowagieTextPdfPdfFormField_FF_READ_ONLY];
    }
    if ((self->options_ & ComAowagieTextPdfBaseField_REQUIRED) != 0) {
      [field setFieldFlagsWithInt:ComAowagieTextPdfPdfFormField_FF_REQUIRED];
    }
    if ((self->options_ & ComAowagieTextPdfBaseField_DO_NOT_SPELL_CHECK) != 0) {
      [field setFieldFlagsWithInt:ComAowagieTextPdfPdfFormField_FF_DONOTSPELLCHECK];
    }
  }
  [field setBorderStyleWithComAowagieTextPdfPdfBorderDictionary:new_ComAowagieTextPdfPdfBorderDictionary_initPackagePrivateWithFloat_withInt_withComAowagieTextPdfPdfDashPattern_(self->borderWidth_, self->borderStyle_, new_ComAowagieTextPdfPdfDashPattern_initPackagePrivateWithFloat_(3))];
  ComAowagieTextPdfPdfAppearance *tp;
  if (isList) {
    tp = [self getListAppearance];
    if (self->topFirst_ > 0) {
      [field putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TI) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(self->topFirst_)];
    }
  }
  else {
    
#line 599
    tp = [self getAppearance];
  }
  [field setAppearanceWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfAnnotation, APPEARANCE_NORMAL) withComAowagieTextPdfPdfTemplate:tp];
  ComAowagieTextPdfPdfAppearance *da = (ComAowagieTextPdfPdfAppearance *) cast_chk([((ComAowagieTextPdfPdfAppearance *) nil_chk(tp)) getDuplicate], [ComAowagieTextPdfPdfAppearance class]);
  [((ComAowagieTextPdfPdfAppearance *) nil_chk(da)) setFontAndSizeWithComAowagieTextPdfBaseFont:[self getRealFont] withFloat:self->fontSize_];
  if (self->textColor_ == nil) {
    [da setGrayFillWithFloat:0];
  }
  else {
    
#line 607
    [da setColorFillWithHarmonyJavaAwtColor:self->textColor_];
  }
  [field setDefaultAppearanceStringWithComAowagieTextPdfPdfContentByte:da];
  if (self->borderColor_ != nil) {
    [field setMKBorderColorWithHarmonyJavaAwtColor:self->borderColor_];
  }
  if (self->backgroundColor_ != nil) {
    [field setMKBackgroundColorWithHarmonyJavaAwtColor:self->backgroundColor_];
  }
  switch (self->visibility_) {
    case ComAowagieTextPdfBaseField_HIDDEN:
    [field setFlagsWithInt:ComAowagieTextPdfPdfAnnotation_FLAGS_PRINT | ComAowagieTextPdfPdfAnnotation_FLAGS_HIDDEN];
    break;
    case ComAowagieTextPdfBaseField_VISIBLE_BUT_DOES_NOT_PRINT:
    break;
    case ComAowagieTextPdfBaseField_HIDDEN_BUT_PRINTABLE:
    [field setFlagsWithInt:ComAowagieTextPdfPdfAnnotation_FLAGS_PRINT | ComAowagieTextPdfPdfAnnotation_FLAGS_NOVIEW];
    break;
    default:
    [field setFlagsWithInt:ComAowagieTextPdfPdfAnnotation_FLAGS_PRINT];
    break;
  }
  return field;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfTextField)
