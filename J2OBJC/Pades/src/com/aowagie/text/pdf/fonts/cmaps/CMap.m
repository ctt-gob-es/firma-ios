//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/fonts/cmaps/CMap.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/pdf/fonts/cmaps/CMap.h"
#include "com/aowagie/text/pdf/fonts/cmaps/CodespaceRange.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/fonts/cmaps/CMap must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfFontsCmapsCMap () {
 @public
  id<JavaUtilList> codeSpaceRanges_;
  id<JavaUtilMap> singleByteMappings_;
  id<JavaUtilMap> doubleByteMappings_;
}

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfFontsCmapsCMap, codeSpaceRanges_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfFontsCmapsCMap, singleByteMappings_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfFontsCmapsCMap, doubleByteMappings_, id<JavaUtilMap>)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/fonts/cmaps/CMap.java"


#line 45
@implementation ComAowagieTextPdfFontsCmapsCMap

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 54
- (instancetype)init {
  ComAowagieTextPdfFontsCmapsCMap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 72
- (NSString *)lookupWithByteArray:(IOSByteArray *)code
                          withInt:(jint)offset
                          withInt:(jint)length {
  NSString *result = nil;
  JavaLangInteger *key = nil;
  if (length == 1) {
    
#line 80
    key = new_JavaLangInteger_initWithInt_(JreIntMod((IOSByteArray_Get(nil_chk(code), offset) + 256), 256));
    result = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(self->singleByteMappings_)) getWithId:key], [NSString class]);
  }
  else if (length == 2) {
    
#line 85
    jint intKey = JreIntMod((IOSByteArray_Get(nil_chk(code), offset) + 256), 256);
    JreLShiftAssignInt(&intKey, 8);
    intKey += JreIntMod((IOSByteArray_Get(code, offset + 1) + 256), 256);
    key = new_JavaLangInteger_initWithInt_(intKey);
    
#line 90
    result = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(self->doubleByteMappings_)) getWithId:key], [NSString class]);
  }
  
#line 93
  return result;
}


#line 104
- (void)addMappingWithByteArray:(IOSByteArray *)src
                   withNSString:(NSString *)dest {
  if (((IOSByteArray *) nil_chk(src))->size_ == 1) {
    
#line 108
    (void) [((id<JavaUtilMap>) nil_chk(self->singleByteMappings_)) putWithId:new_JavaLangInteger_initWithInt_(IOSByteArray_Get(src, 0)) withId:dest];
  }
  else if (src->size_ == 2) {
    
#line 112
    jint intSrc = IOSByteArray_Get(src, 0) & (jint) 0xFF;
    JreLShiftAssignInt(&intSrc, 8);
    intSrc |= IOSByteArray_Get(src, 1) & (jint) 0xFF;
    (void) [((id<JavaUtilMap>) nil_chk(self->doubleByteMappings_)) putWithId:new_JavaLangInteger_initWithInt_(intSrc) withId:dest];
  }
  else {
    
#line 119
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Mapping code should be 1 or two bytes and not ", src->size_));
  }
}


#line 129
- (void)addCodespaceRangeWithComAowagieTextPdfFontsCmapsCodespaceRange:(ComAowagieTextPdfFontsCmapsCodespaceRange *)range {
  
#line 131
  [((id<JavaUtilList>) nil_chk(self->codeSpaceRanges_)) addWithId:range];
}


#line 139
- (id<JavaUtilList>)getCodeSpaceRanges {
  
#line 141
  return self->codeSpaceRanges_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(lookupWithByteArray:withInt:withInt:);
  methods[2].selector = @selector(addMappingWithByteArray:withNSString:);
  methods[3].selector = @selector(addCodespaceRangeWithComAowagieTextPdfFontsCmapsCodespaceRange:);
  methods[4].selector = @selector(getCodeSpaceRanges);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "codeSpaceRanges_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "singleByteMappings_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "doubleByteMappings_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "lookup", "[BII", "addMapping", "[BLNSString;", "LJavaIoIOException;", "addCodespaceRange", "LComAowagieTextPdfFontsCmapsCodespaceRange;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfFontsCmapsCMap = { "CMap", "com.aowagie.text.pdf.fonts.cmaps", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfFontsCmapsCMap;
}

@end


#line 54
void ComAowagieTextPdfFontsCmapsCMap_init(ComAowagieTextPdfFontsCmapsCMap *self) {
  NSObject_init(self);
  self->codeSpaceRanges_ = new_JavaUtilArrayList_init();
  self->singleByteMappings_ = new_JavaUtilLinkedHashMap_init();
  self->doubleByteMappings_ = new_JavaUtilLinkedHashMap_init();
}


#line 54
ComAowagieTextPdfFontsCmapsCMap *new_ComAowagieTextPdfFontsCmapsCMap_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfFontsCmapsCMap, init)
}


#line 54
ComAowagieTextPdfFontsCmapsCMap *create_ComAowagieTextPdfFontsCmapsCMap_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfFontsCmapsCMap, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfFontsCmapsCMap)
