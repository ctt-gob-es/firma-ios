//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/codec/TIFFLZWDecoder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/pdf/codec/TIFFLZWDecoder.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/codec/TIFFLZWDecoder must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfCodecTIFFLZWDecoder () {
 @public
  IOSObjectArray *stringTable_;
  IOSByteArray *data_;
  IOSByteArray *uncompData_;
  jint tableIndex_;
  jint bitsToGet_;
  jint bytePointer_;
  jint bitPointer_;
  jint dstIndex_;
  jint w_;
  jint h_;
  jint predictor_;
  jint samplesPerPixel_;
  jint nextData_;
  jint nextBits_;
  IOSIntArray *andTable_;
}

/*!
 @brief Initialize the string table.
 */
- (void)initializeStringTable OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Write out the string just uncompressed.
 @param string String
 */
- (void)writeStringWithByteArray:(IOSByteArray *)string;

/*!
 @brief Add a new string to the string table.
 @param oldString Old string
 @param newString New string
 */
- (void)addStringToTableWithByteArray:(IOSByteArray *)oldString
                             withByte:(jbyte)newString;

/*!
 @brief Add a new string to the string table.
 @param string String
 */
- (void)addStringToTableWithByteArray:(IOSByteArray *)string;

/*!
 @brief Append <code>newString</code> to the end of <code>oldString</code>.
 @param oldString Old string
 @param newString New string
 @return String
 */
- (IOSByteArray *)composeStringWithByteArray:(IOSByteArray *)oldString
                                    withByte:(jbyte)newString;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecTIFFLZWDecoder, stringTable_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecTIFFLZWDecoder, data_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecTIFFLZWDecoder, uncompData_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecTIFFLZWDecoder, andTable_, IOSIntArray *)

__attribute__((unused)) static void ComAowagieTextPdfCodecTIFFLZWDecoder_initializeStringTable(ComAowagieTextPdfCodecTIFFLZWDecoder *self);

__attribute__((unused)) static void ComAowagieTextPdfCodecTIFFLZWDecoder_writeStringWithByteArray_(ComAowagieTextPdfCodecTIFFLZWDecoder *self, IOSByteArray *string);

__attribute__((unused)) static void ComAowagieTextPdfCodecTIFFLZWDecoder_addStringToTableWithByteArray_withByte_(ComAowagieTextPdfCodecTIFFLZWDecoder *self, IOSByteArray *oldString, jbyte newString);

__attribute__((unused)) static void ComAowagieTextPdfCodecTIFFLZWDecoder_addStringToTableWithByteArray_(ComAowagieTextPdfCodecTIFFLZWDecoder *self, IOSByteArray *string);

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfCodecTIFFLZWDecoder_composeStringWithByteArray_withByte_(ComAowagieTextPdfCodecTIFFLZWDecoder *self, IOSByteArray *oldString, jbyte newString);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/codec/TIFFLZWDecoder.java"


#line 53
@implementation ComAowagieTextPdfCodecTIFFLZWDecoder


#line 73
- (instancetype)initPackagePrivateWithInt:(jint)w
                                  withInt:(jint)predictor
                                  withInt:(jint)samplesPerPixel {
  ComAowagieTextPdfCodecTIFFLZWDecoder_initPackagePrivateWithInt_withInt_withInt_(self, w, predictor, samplesPerPixel);
  return self;
}


#line 87
- (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)data
                        withByteArray:(IOSByteArray *)uncompData
                              withInt:(jint)h {
  
#line 89
  if (IOSByteArray_Get(nil_chk(data), 0) == (jbyte) (jint) 0x00 && IOSByteArray_Get(data, 1) == (jbyte) (jint) 0x01) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"TIFF 5.0-style LZW codes are not supported.");
  }
  
#line 93
  ComAowagieTextPdfCodecTIFFLZWDecoder_initializeStringTable(self);
  
#line 95
  self->data_ = data;
  self->h_ = h;
  self->uncompData_ = uncompData;
  
#line 100
  self->bytePointer_ = 0;
  self->bitPointer_ = 0;
  self->dstIndex_ = 0;
  
#line 105
  self->nextData_ = 0;
  self->nextBits_ = 0;
  
#line 108
  jint code;
  
#line 108
  jint oldCode = 0;
  IOSByteArray *string;
  
#line 111
  while ((code = [self getNextCode]) != 257 &&
#line 112
  self->dstIndex_ < ((IOSByteArray *) nil_chk(uncompData))->size_) {
    
#line 114
    if (code == 256) {
      
#line 116
      ComAowagieTextPdfCodecTIFFLZWDecoder_initializeStringTable(self);
      code = [self getNextCode];
      
#line 119
      if (code == 257) {
        break;
      }
      
#line 123
      ComAowagieTextPdfCodecTIFFLZWDecoder_writeStringWithByteArray_(self, IOSObjectArray_Get(nil_chk(self->stringTable_), code));
      oldCode = code;
    }
    else {
      
#line 128
      if (code < self->tableIndex_) {
        
#line 130
        string = IOSObjectArray_Get(nil_chk(self->stringTable_), code);
        
#line 132
        ComAowagieTextPdfCodecTIFFLZWDecoder_writeStringWithByteArray_(self, string);
        ComAowagieTextPdfCodecTIFFLZWDecoder_addStringToTableWithByteArray_withByte_(self, IOSObjectArray_Get(nil_chk(self->stringTable_), oldCode), IOSByteArray_Get(nil_chk(string), 0));
        oldCode = code;
      }
      else {
        
#line 138
        string = IOSObjectArray_Get(nil_chk(self->stringTable_), oldCode);
        string = ComAowagieTextPdfCodecTIFFLZWDecoder_composeStringWithByteArray_withByte_(self, string, IOSByteArray_Get(nil_chk(string), 0));
        ComAowagieTextPdfCodecTIFFLZWDecoder_writeStringWithByteArray_(self, string);
        ComAowagieTextPdfCodecTIFFLZWDecoder_addStringToTableWithByteArray_(self, string);
        oldCode = code;
      }
    }
  }
  
#line 150
  if (self->predictor_ == 2) {
    
#line 152
    jint count;
    for (jint j = 0; j < h; j++) {
      
#line 155
      count = self->samplesPerPixel_ * (j * self->w_ + 1);
      
#line 157
      for (jint i = self->samplesPerPixel_; i < self->w_ * self->samplesPerPixel_; i++) {
        
#line 159
        *IOSByteArray_GetRef(nil_chk(uncompData), count) += IOSByteArray_Get(uncompData, count - self->samplesPerPixel_);
        count++;
      }
    }
  }
  
#line 165
  return uncompData;
}


#line 172
- (void)initializeStringTable {
  ComAowagieTextPdfCodecTIFFLZWDecoder_initializeStringTable(self);
}


#line 189
- (void)writeStringWithByteArray:(IOSByteArray *)string {
  ComAowagieTextPdfCodecTIFFLZWDecoder_writeStringWithByteArray_(self, string);
}


#line 204
- (void)addStringToTableWithByteArray:(IOSByteArray *)oldString
                             withByte:(jbyte)newString {
  ComAowagieTextPdfCodecTIFFLZWDecoder_addStringToTableWithByteArray_withByte_(self, oldString, newString);
}


#line 226
- (void)addStringToTableWithByteArray:(IOSByteArray *)string {
  ComAowagieTextPdfCodecTIFFLZWDecoder_addStringToTableWithByteArray_(self, string);
}


#line 246
- (IOSByteArray *)composeStringWithByteArray:(IOSByteArray *)oldString
                                    withByte:(jbyte)newString {
  return ComAowagieTextPdfCodecTIFFLZWDecoder_composeStringWithByteArray_withByte_(self, oldString, newString);
}


#line 256
- (jint)getNextCode {
  
#line 261
  @try {
    self->nextData_ = (JreLShift32(self->nextData_, 8)) | (IOSByteArray_Get(nil_chk(self->data_), self->bytePointer_++) & (jint) 0xff);
    self->nextBits_ += 8;
    
#line 265
    if (self->nextBits_ < self->bitsToGet_) {
      self->nextData_ = (JreLShift32(self->nextData_, 8)) | (IOSByteArray_Get(self->data_, self->bytePointer_++) & (jint) 0xff);
      self->nextBits_ += 8;
    }
    
#line 270
    jint code =
#line 271
    (JreRShift32(self->nextData_, self->nextBits_ - self->bitsToGet_)) & IOSIntArray_Get(nil_chk(self->andTable_), self->bitsToGet_ - 9);
    self->nextBits_ -= self->bitsToGet_;
    
#line 274
    return code;
  }
  @catch (
#line 275
  JavaLangArrayIndexOutOfBoundsException *e) {
    
#line 277
    return 257;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 7, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithInt:withInt:withInt:);
  methods[1].selector = @selector(decodeWithByteArray:withByteArray:withInt:);
  methods[2].selector = @selector(initializeStringTable);
  methods[3].selector = @selector(writeStringWithByteArray:);
  methods[4].selector = @selector(addStringToTableWithByteArray:withByte:);
  methods[5].selector = @selector(addStringToTableWithByteArray:);
  methods[6].selector = @selector(composeStringWithByteArray:withByte:);
  methods[7].selector = @selector(getNextCode);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stringTable_", "[[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "data_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "uncompData_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tableIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bitsToGet_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bytePointer_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bitPointer_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dstIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "w_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "h_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "predictor_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "samplesPerPixel_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "nextData_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextBits_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "andTable_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "III", "decode", "[B[BI", "writeString", "[B", "addStringToTable", "[BB", "composeString" };
  static const J2ObjcClassInfo _ComAowagieTextPdfCodecTIFFLZWDecoder = { "TIFFLZWDecoder", "com.aowagie.text.pdf.codec", ptrTable, methods, fields, 7, 0x0, 8, 15, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfCodecTIFFLZWDecoder;
}

@end


#line 73
void ComAowagieTextPdfCodecTIFFLZWDecoder_initPackagePrivateWithInt_withInt_withInt_(ComAowagieTextPdfCodecTIFFLZWDecoder *self, jint w, jint predictor, jint samplesPerPixel) {
  NSObject_init(self);
  self->data_ =
#line 56
  nil;
  self->bitsToGet_ = 9;
  self->nextData_ =
#line 63
  0;
  self->nextBits_ = 0;
  self->andTable_ = [IOSIntArray newArrayWithInts:(jint[]){
#line 67
    511,
#line 68
    1023,
#line 69
    2047,
#line 70
    4095 } count:4];
    
#line 74
    self->w_ = w;
    self->predictor_ = predictor;
    self->samplesPerPixel_ = samplesPerPixel;
  }


#line 73
ComAowagieTextPdfCodecTIFFLZWDecoder *new_ComAowagieTextPdfCodecTIFFLZWDecoder_initPackagePrivateWithInt_withInt_withInt_(jint w, jint predictor, jint samplesPerPixel) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfCodecTIFFLZWDecoder, initPackagePrivateWithInt_withInt_withInt_, w, predictor, samplesPerPixel)
}


#line 73
ComAowagieTextPdfCodecTIFFLZWDecoder *create_ComAowagieTextPdfCodecTIFFLZWDecoder_initPackagePrivateWithInt_withInt_withInt_(jint w, jint predictor, jint samplesPerPixel) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfCodecTIFFLZWDecoder, initPackagePrivateWithInt_withInt_withInt_, w, predictor, samplesPerPixel)
}


#line 172
void ComAowagieTextPdfCodecTIFFLZWDecoder_initializeStringTable(ComAowagieTextPdfCodecTIFFLZWDecoder *self) {
  
#line 174
  self->stringTable_ = [IOSObjectArray newArrayWithLength:4096 type:IOSClass_byteArray(1)];
  
#line 176
  for (jint i = 0; i < 256; i++) {
    (void) IOSObjectArray_SetAndConsume(self->stringTable_, i, [IOSByteArray newArrayWithLength:1]);
    *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(self->stringTable_, i)), 0) = (jbyte) i;
  }
  
#line 181
  self->tableIndex_ = 258;
  self->bitsToGet_ = 9;
}


#line 189
void ComAowagieTextPdfCodecTIFFLZWDecoder_writeStringWithByteArray_(ComAowagieTextPdfCodecTIFFLZWDecoder *self, IOSByteArray *string) {
  
#line 191
  jint max = ((IOSByteArray *) nil_chk(self->uncompData_))->size_ - self->dstIndex_;
  if (((IOSByteArray *) nil_chk(string))->size_ < max) {
    max = string->size_;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(string, 0, self->uncompData_, self->dstIndex_, max);
  self->dstIndex_ += max;
}


#line 204
void ComAowagieTextPdfCodecTIFFLZWDecoder_addStringToTableWithByteArray_withByte_(ComAowagieTextPdfCodecTIFFLZWDecoder *self, IOSByteArray *oldString, jbyte newString) {
  jint length = ((IOSByteArray *) nil_chk(oldString))->size_;
  IOSByteArray *string = [IOSByteArray newArrayWithLength:length + 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oldString, 0, string, 0, length);
  *IOSByteArray_GetRef(string, length) = newString;
  
#line 211
  (void) IOSObjectArray_Set(nil_chk(self->stringTable_), self->tableIndex_++, string);
  
#line 213
  if (self->tableIndex_ == 511) {
    self->bitsToGet_ = 10;
  }
  else
#line 215
  if (self->tableIndex_ == 1023) {
    self->bitsToGet_ = 11;
  }
  else
#line 217
  if (self->tableIndex_ == 2047) {
    self->bitsToGet_ = 12;
  }
}


#line 226
void ComAowagieTextPdfCodecTIFFLZWDecoder_addStringToTableWithByteArray_(ComAowagieTextPdfCodecTIFFLZWDecoder *self, IOSByteArray *string) {
  
#line 229
  (void) IOSObjectArray_Set(nil_chk(self->stringTable_), self->tableIndex_++, string);
  
#line 231
  if (self->tableIndex_ == 511) {
    self->bitsToGet_ = 10;
  }
  else
#line 233
  if (self->tableIndex_ == 1023) {
    self->bitsToGet_ = 11;
  }
  else
#line 235
  if (self->tableIndex_ == 2047) {
    self->bitsToGet_ = 12;
  }
}


#line 246
IOSByteArray *ComAowagieTextPdfCodecTIFFLZWDecoder_composeStringWithByteArray_withByte_(ComAowagieTextPdfCodecTIFFLZWDecoder *self, IOSByteArray *oldString, jbyte newString) {
  jint length = ((IOSByteArray *) nil_chk(oldString))->size_;
  IOSByteArray *string = [IOSByteArray newArrayWithLength:length + 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oldString, 0, string, 0, length);
  *IOSByteArray_GetRef(string, length) = newString;
  
#line 252
  return string;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfCodecTIFFLZWDecoder)
