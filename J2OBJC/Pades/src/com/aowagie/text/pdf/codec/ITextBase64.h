//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/codec/ITextBase64.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComAowagieTextPdfCodecITextBase64")
#ifdef RESTRICT_ComAowagieTextPdfCodecITextBase64
#define INCLUDE_ALL_ComAowagieTextPdfCodecITextBase64 0
#else
#define INCLUDE_ALL_ComAowagieTextPdfCodecITextBase64 1
#endif
#undef RESTRICT_ComAowagieTextPdfCodecITextBase64

#if !defined (ComAowagieTextPdfCodecITextBase64_) && (INCLUDE_ALL_ComAowagieTextPdfCodecITextBase64 || defined(INCLUDE_ComAowagieTextPdfCodecITextBase64))
#define ComAowagieTextPdfCodecITextBase64_

@class IOSByteArray;

/*!
 @brief <p>Encodes and decodes to and from Base64 notation.
 </p>
  <p>Homepage: <a href="http://iharder.net/base64">http://iharder.net/base64</a>.</p>
  
 <p>
  Change Log: 
 </p>
  <ul>
   <li>v2.2.1 - Fixed bug using URL_SAFE and ORDERED encodings. Fixed bug
    when using very small files (~&lt; 40 bytes).</li>
   <li>v2.2 - Added some helper methods for encoding/decoding directly from
    one file to the next. Also added a main() method to support command line
    encoding/decoding from one file to the next. Also added these Base64 dialects:   
 <ol>
    <li>The default is RFC3548 format.</li>
    <li>Calling Base64.setFormat(Base64.BASE64_FORMAT.URLSAFE_FORMAT) generates
    URL and file name friendly format as described in Section 4 of RFC3548.
    http://www.faqs.org/rfcs/rfc3548.html</li>
    <li>Calling Base64.setFormat(Base64.BASE64_FORMAT.ORDERED_FORMAT) generates
    URL and file name friendly format that preserves lexical ordering as described
    in http://www.faqs.org/qa/rfcc-1940.html</li>
    </ol>
    Special thanks to Jim Kellerman at <a href="http://www.powerset.com/">http://www.powerset.com/</a>
    for contributing the new Base64 dialects.  
 </li>
   <li>v2.1 - Cleaned up javadoc comments and unused variables and methods. Added
    some convenience methods for reading and writing to and from files.</li>
   <li>v2.0.2 - Now specifies UTF-8 encoding in places where the code fails on systems
    with other encodings (like EBCDIC).</li>
   <li>v2.0.1 - Fixed an error when decoding a single byte, that is, when the
    encoded data was a single byte.</li>
   <li>v2.0 - I got rid of methods that used booleans to set options.
    Now everything is more consolidated and cleaner. The code now detects
    when data that's being decoded is gzip-compressed and will decompress it
    automatically. Generally things are cleaner. You'll probably have to
    change some method calls that you were making to support the new
    options format (<tt>int</tt>s that you "OR" together).</li>
   <li>v1.5.1 - Fixed bug when decompressing and decoding to a
    byte[] using <tt>decode( String s, boolean gzipCompressed )</tt>.
    Added the ability to "suspend" encoding in the Output Stream so
    you can turn on and off the encoding if you need to embed base64
    data in an otherwise "normal" stream (like an XML file).</li>
   <li>v1.5 - Output stream pases on flush() command but doesn't do anything itself.
       This helps when using GZIP streams.
       Added the ability to GZip-compress objects before encoding them.</li>
   <li>v1.4 - Added helper methods to read/write files.</li>
   <li>v1.3.6 - Fixed OutputStream.flush() so that 'position' is reset.</li>
   <li>v1.3.5 - Added flag to turn on and off line breaks. Fixed bug in input stream
       where last buffer being read, if not completely full, was not returned.</li>
   <li>v1.3.4 - Fixed when "improperly padded stream" error was thrown at the wrong time.</li>
   <li>v1.3.3 - Fixed I/O streams which were totally messed up.</li>
  </ul>
  
 <p>
  I am placing this code in the Public Domain. Do with it as you will.
  This software comes with no guarantees or warranties but with
  plenty of well-wishing instead!
  Please visit <a href="http://iharder.net/base64">http://iharder.net/base64</a>
  periodically to check for updates or to contribute improvements. 
 </p>
 @author Robert Harder
 @author rob@@iharder.net
 @version 2.2.1
 */
@interface ComAowagieTextPdfCodecITextBase64 : NSObject

#pragma mark Public

/*!
 @brief Decodes data from Base64 notation, automatically
  detecting gzip-compressed data and decompressing it.
 @param s the string to decode
 @return the decoded data
 @since 1.4
 */
+ (IOSByteArray *)decodeWithNSString:(NSString *)s;

/*!
 @brief Encodes a byte array into Base64 notation.
 Does not GZip-compress data.
 @param source The data to convert
 @return bytes
 @since 1.4
 */
+ (NSString *)encodeBytesWithByteArray:(IOSByteArray *)source;

#pragma mark Package-Private

/*!
 @brief Returns one of the _SOMETHING_ALPHABET byte arrays depending on
  the options specified.
 It's possible, though silly, to specify ORDERED and URLSAFE
  in which case one of them will be picked, though there is
  no guarantee as to which one will be picked.
 @param options Options
 @return Decodabet
 */
+ (IOSByteArray *)getAlphabetWithInt:(jint)options;

/*!
 @brief Returns one of the _SOMETHING_DECODABET byte arrays depending on
  the options specified.
 It's possible, though silly, to specify ORDERED and URL_SAFE
  in which case one of them will be picked, though there is
  no guarantee as to which one will be picked.
 @param options Options
 @return Decodabet
 */
+ (IOSByteArray *)getDecodabetWithInt:(jint)options;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfCodecITextBase64)

FOUNDATION_EXPORT IOSByteArray *ComAowagieTextPdfCodecITextBase64_getAlphabetWithInt_(jint options);

FOUNDATION_EXPORT IOSByteArray *ComAowagieTextPdfCodecITextBase64_getDecodabetWithInt_(jint options);

FOUNDATION_EXPORT NSString *ComAowagieTextPdfCodecITextBase64_encodeBytesWithByteArray_(IOSByteArray *source);

FOUNDATION_EXPORT IOSByteArray *ComAowagieTextPdfCodecITextBase64_decodeWithNSString_(NSString *s);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfCodecITextBase64)

#endif

#pragma pop_macro("INCLUDE_ALL_ComAowagieTextPdfCodecITextBase64")
