//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/DocumentFont.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComAowagieTextPdfDocumentFont")
#ifdef RESTRICT_ComAowagieTextPdfDocumentFont
#define INCLUDE_ALL_ComAowagieTextPdfDocumentFont 0
#else
#define INCLUDE_ALL_ComAowagieTextPdfDocumentFont 1
#endif
#undef RESTRICT_ComAowagieTextPdfDocumentFont

#if !defined (ComAowagieTextPdfDocumentFont_) && (INCLUDE_ALL_ComAowagieTextPdfDocumentFont || defined(INCLUDE_ComAowagieTextPdfDocumentFont))
#define ComAowagieTextPdfDocumentFont_

#define RESTRICT_ComAowagieTextPdfBaseFont 1
#define INCLUDE_ComAowagieTextPdfBaseFont 1
#include "com/aowagie/text/pdf/BaseFont.h"

@class ComAowagieTextPdfIntHashtable;
@class ComAowagieTextPdfPRIndirectReference;
@class ComAowagieTextPdfPdfIndirectReference;
@class ComAowagieTextPdfPdfStream;
@class ComAowagieTextPdfPdfWriter;
@class IOSByteArray;
@class IOSIntArray;
@class IOSObjectArray;

/*!
 @author psoares
 */
@interface ComAowagieTextPdfDocumentFont : ComAowagieTextPdfBaseFont

#pragma mark Public

- (jboolean)charExistsWithInt:(jint)c;

/*!
 @brief Gets all the entries of the names-table.If it is a True Type font
  each array element will have {Name ID, Platform ID, Platform Encoding ID,
  Language ID, font name}.
 The interpretation of this values can be
  found in the Open Type specification, chapter 2, in the 'name' table.<br>
  For the other fonts the array has a single element with {"4", "", "", "",
  font name}.
 @return the full name of the font
 @since 2.0.8
 */
- (IOSObjectArray *)getAllNameEntries;

- (IOSIntArray *)getCharBBoxWithInt:(jint)c;

/*!
 @brief Gets the family name of the font.If it is a True Type font
  each array element will have {Platform ID, Platform Encoding ID,
  Language ID, font name}.
 The interpretation of this values can be
  found in the Open Type specification, chapter 2, in the 'name' table.<br>
  For the other fonts the array has a single element with {"", "", "",
  font name}.
 @return the family name of the font
 */
- (IOSObjectArray *)getFamilyFontName;

/*!
 @brief Gets the font parameter identified by <CODE>key</CODE>.Valid values
  for <CODE>key</CODE> are <CODE>ASCENT</CODE>, <CODE>CAPHEIGHT</CODE>, <CODE>DESCENT</CODE>,
  <CODE>ITALICANGLE</CODE>, <CODE>BBOXLLX</CODE>, <CODE>BBOXLLY</CODE>, <CODE>BBOXURX</CODE>
  and <CODE>BBOXURY</CODE>.
 @param key the parameter to be extracted
 @param fontSize the font size in points
 @return the parameter in points
 */
- (jfloat)getFontDescriptorWithInt:(jint)key
                         withFloat:(jfloat)fontSize;

/*!
 @brief Gets the full name of the font.If it is a True Type font
  each array element will have {Platform ID, Platform Encoding ID,
  Language ID, font name}.
 The interpretation of this values can be
  found in the Open Type specification, chapter 2, in the 'name' table.<br>
  For the other fonts the array has a single element with {"", "", "",
  font name}.
 @return the full name of the font
 */
- (IOSObjectArray *)getFullFontName;

/*!
 @brief Always returns null.
 @return null
 @since 2.1.3
 */
- (ComAowagieTextPdfPdfStream *)getFullFontStream;

/*!
 @brief Gets the kerning between two Unicode chars.
 @param char1 the first char
 @param char2 the second char
 @return the kerning to be applied
 */
- (jint)getKerningWithInt:(jint)char1
                  withInt:(jint)char2;

/*!
 @brief Gets the postscript font name.
 @return the postscript font name
 */
- (NSString *)getPostscriptFontName;

/*!
 @brief Gets the width of a <CODE>char</CODE> in normalized 1000 units.
 @param char1 the unicode  <CODE> char </CODE>  to get the width of
 @return the width in normalized 1000 units
 */
- (jint)getWidthWithInt:(jint)char1;

- (jint)getWidthWithNSString:(NSString *)text;

/*!
 @brief Checks if the font has any kerning pairs.
 @return <CODE>true</CODE> if the font has any kerning pairs
 */
- (jboolean)hasKernPairs;

- (jboolean)setKerningWithInt:(jint)char1
                      withInt:(jint)char2
                      withInt:(jint)kern;

/*!
 @brief Sets the font name that will appear in the pdf font dictionary.
 It does nothing in this case as the font is already in the document.
 @param name the new font name
 */
- (void)setPostscriptFontNameWithNSString:(NSString *)name;

#pragma mark Protected

- (IOSIntArray *)getRawCharBBoxWithInt:(jint)c
                          withNSString:(NSString *)name;

#pragma mark Package-Private

/*!
 @brief Creates a new instance of DocumentFont
 @param refFont Font reference
 */
- (instancetype)initWithComAowagieTextPdfPRIndirectReference:(ComAowagieTextPdfPRIndirectReference *)refFont;

- (IOSByteArray *)convertToBytesWithInt:(jint)char1;

- (IOSByteArray *)convertToBytesWithNSString:(NSString *)text;

- (ComAowagieTextPdfPdfIndirectReference *)getIndirectReference;

/*!
 @brief Gets the width from the font according to the Unicode char <CODE>c</CODE>
  or the <CODE>name</CODE>.If the <CODE>name</CODE> is null it's a symbolic font.
 @param c the unicode char
 @param name the glyph name
 @return the width of the char
 */
- (jint)getRawWidthWithInt:(jint)c
              withNSString:(NSString *)name;

/*!
 @brief Exposes the unicode CID map that is constructed from the font's encoding
 @return the unicode to CID map
 @since 2.1.7
 */
- (ComAowagieTextPdfIntHashtable *)getUni2Byte;

/*!
 @brief Outputs to the writer the font dictionaries and streams.
 @param writer the writer for this document
 @param ref the font indirect reference
 @param params several parameters that depend on the font type
 @throw IOExceptionon error
 @throw DocumentExceptionerror in generating the object
 */
- (void)writeFontWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
      withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)ref
                              withNSObjectArray:(IOSObjectArray *)params;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfDocumentFont)

FOUNDATION_EXPORT void ComAowagieTextPdfDocumentFont_initWithComAowagieTextPdfPRIndirectReference_(ComAowagieTextPdfDocumentFont *self, ComAowagieTextPdfPRIndirectReference *refFont);

FOUNDATION_EXPORT ComAowagieTextPdfDocumentFont *new_ComAowagieTextPdfDocumentFont_initWithComAowagieTextPdfPRIndirectReference_(ComAowagieTextPdfPRIndirectReference *refFont) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfDocumentFont *create_ComAowagieTextPdfDocumentFont_initWithComAowagieTextPdfPRIndirectReference_(ComAowagieTextPdfPRIndirectReference *refFont);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfDocumentFont)

#endif

#pragma pop_macro("INCLUDE_ALL_ComAowagieTextPdfDocumentFont")
