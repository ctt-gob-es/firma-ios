//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComAowagieTextPdfPdfStream")
#ifdef RESTRICT_ComAowagieTextPdfPdfStream
#define INCLUDE_ALL_ComAowagieTextPdfPdfStream 0
#else
#define INCLUDE_ALL_ComAowagieTextPdfPdfStream 1
#endif
#undef RESTRICT_ComAowagieTextPdfPdfStream

#if !defined (ComAowagieTextPdfPdfStream_) && (INCLUDE_ALL_ComAowagieTextPdfPdfStream || defined(INCLUDE_ComAowagieTextPdfPdfStream))
#define ComAowagieTextPdfPdfStream_

#define RESTRICT_ComAowagieTextPdfPdfDictionary 1
#define INCLUDE_ComAowagieTextPdfPdfDictionary 1
#include "com/aowagie/text/pdf/PdfDictionary.h"

@class ComAowagieTextPdfPdfName;
@class ComAowagieTextPdfPdfWriter;
@class IOSByteArray;
@class JavaIoByteArrayOutputStream;
@class JavaIoInputStream;
@class JavaIoOutputStream;

/*!
 @brief <CODE>PdfStream</CODE> is the Pdf stream object.
 <P>
  A stream, like a string, is a sequence of characters. However, an application can
  read a small portion of a stream at a time, while a string must be read in its entirety.
  For this reason, objects with potentially large amounts of data, such as images and
  page descriptions, are represented as streams.<BR>
  A stream consists of a dictionary that describes a sequence of characters, followed by
  the keyword <B>stream</B>, followed by zero or more lines of characters, followed by
  the keyword <B>endstream</B>.<BR>
  All streams must be <CODE>PdfIndirectObject</CODE>s. The stream dictionary must be a direct
  object. The keyword <B>stream</B> that follows the stream dictionary should be followed by
  a carriage return and linefeed or just a linefeed.<BR>
  Remark: In this version only the FLATEDECODE-filter is supported.<BR>
  This object is described in the 'Portable Document Format Reference Manual version 1.7'
  section 3.2.7 (page 60-63).<BR>
 - seealso: PdfObject
 - seealso: PdfDictionary
 */
@interface ComAowagieTextPdfPdfStream : ComAowagieTextPdfPdfDictionary {
 @public
  /*!
   @brief is the stream compressed?
   */
  jboolean compressed_;
  /*!
   @brief The level of compression.
   @since 2.1.3
   */
  jint compressionLevel_;
  JavaIoByteArrayOutputStream *streamBytes_;
  JavaIoInputStream *inputStream_;
  jint inputStreamLength_;
  jint rawLength_;
}

#pragma mark Public

/*!
 @brief Constructs a <CODE>PdfStream</CODE>-object.
 @param bytes content of the new  <CODE> PdfObject </CODE>  as an array of  <CODE> byte </CODE>
  .
 */
- (instancetype)initWithByteArray:(IOSByteArray *)bytes;

/*!
 @brief Gets the raw length of the stream.
 @return the raw length of the stream
 */
- (jint)getRawLength;

/*!
 - seealso: com.aowagie.text.pdf.PdfDictionary#toPdf(com.aowagie.text.pdf.PdfWriter, java.io.OutputStream)
 */
- (void)toPdfWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
                     withJavaIoOutputStream:(JavaIoOutputStream *)os;

/*!
 - seealso: com.aowagie.text.pdf.PdfObject#toString()
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief Constructs a <CODE>PdfStream</CODE>-object.
 */
- (instancetype)init;

- (void)superToPdfWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
                          withJavaIoOutputStream:(JavaIoOutputStream *)os;

#pragma mark Package-Private

/*!
 @brief Creates an efficient stream.No temporary array is ever created.
 The <CODE>InputStream</CODE>
  is totally consumed but is not closed. The general usage is: 
 @code

  InputStream in = ...;
  PdfStream stream = new PdfStream(in, writer);
  stream.flateCompress();
  writer.addToBody(stream);
  stream.writeLength();
  in.close(); 
  
@endcode
 @param inputStream the data to write to this stream
 @param writer the  <CODE> PdfWriter </CODE>  for this stream
 */
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inputStream
           withComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer;

/*!
 @brief Compresses the stream.
 @param compressionLevel the compression level (0 = best speed, 9 = best compression, -1 is default)
 @since 2.1.3
 */
- (void)flateCompressWithInt:(jint)compressionLevel;

/*!
 @brief Writes the data content to an <CODE>OutputStream</CODE>.
 @param os the destination to write to
 @throw IOExceptionon error
 */
- (void)writeContentWithJavaIoOutputStream:(JavaIoOutputStream *)os;

/*!
 @brief Writes the stream length to the <CODE>PdfWriter</CODE>.
 <p>
  This method must be called and can only be called if the constructor <code>PdfStream(InputStream,PdfWriter)</code>
  is used to create the stream.
 @throw IOExceptionon error
 - seealso: #PdfStream(InputStream,PdfWriter)
 */
- (void)writeLength;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfPdfStream)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfStream, streamBytes_, JavaIoByteArrayOutputStream *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfStream, inputStream_, JavaIoInputStream *)

/*!
 @brief A possible compression level.
 @since 2.1.3
 */
inline jint ComAowagieTextPdfPdfStream_get_DEFAULT_COMPRESSION(void);
#define ComAowagieTextPdfPdfStream_DEFAULT_COMPRESSION -1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfStream, DEFAULT_COMPRESSION, jint)

/*!
 @brief A possible compression level.
 @since 2.1.3
 */
inline jint ComAowagieTextPdfPdfStream_get_NO_COMPRESSION(void);
#define ComAowagieTextPdfPdfStream_NO_COMPRESSION 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfStream, NO_COMPRESSION, jint)

/*!
 @brief A possible compression level.
 @since 2.1.3
 */
inline jint ComAowagieTextPdfPdfStream_get_BEST_COMPRESSION(void);
#define ComAowagieTextPdfPdfStream_BEST_COMPRESSION 9
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfStream, BEST_COMPRESSION, jint)

inline IOSByteArray *ComAowagieTextPdfPdfStream_get_STARTSTREAM(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *ComAowagieTextPdfPdfStream_STARTSTREAM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfStream, STARTSTREAM, IOSByteArray *)

inline IOSByteArray *ComAowagieTextPdfPdfStream_get_ENDSTREAM(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *ComAowagieTextPdfPdfStream_ENDSTREAM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfStream, ENDSTREAM, IOSByteArray *)

FOUNDATION_EXPORT void ComAowagieTextPdfPdfStream_initWithByteArray_(ComAowagieTextPdfPdfStream *self, IOSByteArray *bytes);

FOUNDATION_EXPORT ComAowagieTextPdfPdfStream *new_ComAowagieTextPdfPdfStream_initWithByteArray_(IOSByteArray *bytes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfStream *create_ComAowagieTextPdfPdfStream_initWithByteArray_(IOSByteArray *bytes);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfStream_initWithJavaIoInputStream_withComAowagieTextPdfPdfWriter_(ComAowagieTextPdfPdfStream *self, JavaIoInputStream *inputStream, ComAowagieTextPdfPdfWriter *writer);

FOUNDATION_EXPORT ComAowagieTextPdfPdfStream *new_ComAowagieTextPdfPdfStream_initWithJavaIoInputStream_withComAowagieTextPdfPdfWriter_(JavaIoInputStream *inputStream, ComAowagieTextPdfPdfWriter *writer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfStream *create_ComAowagieTextPdfPdfStream_initWithJavaIoInputStream_withComAowagieTextPdfPdfWriter_(JavaIoInputStream *inputStream, ComAowagieTextPdfPdfWriter *writer);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfStream_init(ComAowagieTextPdfPdfStream *self);

FOUNDATION_EXPORT ComAowagieTextPdfPdfStream *new_ComAowagieTextPdfPdfStream_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfStream *create_ComAowagieTextPdfPdfStream_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfStream)

#endif

#pragma pop_macro("INCLUDE_ALL_ComAowagieTextPdfPdfStream")
