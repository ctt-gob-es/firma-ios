//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/IntHashtable.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/pdf/IntHashtable.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InternalError.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/function/Consumer.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/IntHashtable must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfIntHashtable () {
 @public
  /*!
   @brief The hash table data.
   */
  IOSObjectArray *table_;
  /*!
   @brief The total number of entries in the hash table.
   */
  jint count_;
  /*!
   @brief The table is rehashed when its size exceeds this threshold.
   (The
  value of this field is (int)(capacity * loadFactor).)
   */
  jint threshold_;
  /*!
   @brief The load factor for the hashtable.
   */
  jfloat loadFactor_;
}

/*!
 @brief <p>Constructs a new, empty hashtable with the specified initial
  capacity and the specified load factor.
 </p>
 @param initialCapacity the initial capacity of the hashtable.
 @param loadFactor the load factor of the hashtable.
 @throw IllegalArgumentExceptionif the initial capacity is less
              than zero, or if the load factor is nonpositive.
 */
- (instancetype)initPackagePrivateWithInt:(jint)initialCapacity
                                withFloat:(jfloat)loadFactor;

/*!
 @brief <p>Increases the capacity of and internally reorganizes this
  hashtable, in order to accommodate and access its entries more
  efficiently.
 </p>
  
 <p>This method is called automatically when the number of keys
  in the hashtable exceeds this hashtable's capacity and load
  factor.</p>
 */
- (void)rehash;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfIntHashtable, table_, IOSObjectArray *)

__attribute__((unused)) static void ComAowagieTextPdfIntHashtable_initPackagePrivateWithInt_withFloat_(ComAowagieTextPdfIntHashtable *self, jint initialCapacity, jfloat loadFactor);

__attribute__((unused)) static ComAowagieTextPdfIntHashtable *new_ComAowagieTextPdfIntHashtable_initPackagePrivateWithInt_withFloat_(jint initialCapacity, jfloat loadFactor) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfIntHashtable *create_ComAowagieTextPdfIntHashtable_initPackagePrivateWithInt_withFloat_(jint initialCapacity, jfloat loadFactor);

__attribute__((unused)) static void ComAowagieTextPdfIntHashtable_rehash(ComAowagieTextPdfIntHashtable *self);

@interface ComAowagieTextPdfIntHashtable_Entry () {
 @public
  jint hash__;
  jint key_;
  jint value_;
  ComAowagieTextPdfIntHashtable_Entry *next_;
}

/*!
 @brief <p>Create a new entry with the given values.
 </p>
 @param hash_ The code used to hash the int with
 @param key The key used to enter this in the table
 @param value The value for this key
 @param next A reference to the next entry in the table
 */
- (instancetype)initWithInt:(jint)hash_
                    withInt:(jint)key
                    withInt:(jint)value
withComAowagieTextPdfIntHashtable_Entry:(ComAowagieTextPdfIntHashtable_Entry *)next;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfIntHashtable_Entry, next_, ComAowagieTextPdfIntHashtable_Entry *)

__attribute__((unused)) static void ComAowagieTextPdfIntHashtable_Entry_initWithInt_withInt_withInt_withComAowagieTextPdfIntHashtable_Entry_(ComAowagieTextPdfIntHashtable_Entry *self, jint hash_, jint key, jint value, ComAowagieTextPdfIntHashtable_Entry *next);

__attribute__((unused)) static ComAowagieTextPdfIntHashtable_Entry *new_ComAowagieTextPdfIntHashtable_Entry_initWithInt_withInt_withInt_withComAowagieTextPdfIntHashtable_Entry_(jint hash_, jint key, jint value, ComAowagieTextPdfIntHashtable_Entry *next) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfIntHashtable_Entry *create_ComAowagieTextPdfIntHashtable_Entry_initWithInt_withInt_withInt_withComAowagieTextPdfIntHashtable_Entry_(jint hash_, jint key, jint value, ComAowagieTextPdfIntHashtable_Entry *next);

@interface ComAowagieTextPdfIntHashtable_IntHashtableIterator : NSObject < JavaUtilIterator > {
 @public
  jint index_;
  IOSObjectArray *table_;
  ComAowagieTextPdfIntHashtable_Entry *entry__;
}

- (instancetype)initWithComAowagieTextPdfIntHashtable_EntryArray:(IOSObjectArray *)table;

- (jboolean)hasNext;

- (id)next;

- (void)remove;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfIntHashtable_IntHashtableIterator)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfIntHashtable_IntHashtableIterator, table_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfIntHashtable_IntHashtableIterator, entry__, ComAowagieTextPdfIntHashtable_Entry *)

__attribute__((unused)) static void ComAowagieTextPdfIntHashtable_IntHashtableIterator_initWithComAowagieTextPdfIntHashtable_EntryArray_(ComAowagieTextPdfIntHashtable_IntHashtableIterator *self, IOSObjectArray *table);

__attribute__((unused)) static ComAowagieTextPdfIntHashtable_IntHashtableIterator *new_ComAowagieTextPdfIntHashtable_IntHashtableIterator_initWithComAowagieTextPdfIntHashtable_EntryArray_(IOSObjectArray *table) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfIntHashtable_IntHashtableIterator *create_ComAowagieTextPdfIntHashtable_IntHashtableIterator_initWithComAowagieTextPdfIntHashtable_EntryArray_(IOSObjectArray *table);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfIntHashtable_IntHashtableIterator)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/IntHashtable.java"


#line 49
@implementation ComAowagieTextPdfIntHashtable


#line 80
- (instancetype)initPackagePrivate {
  ComAowagieTextPdfIntHashtable_initPackagePrivate(self);
  return self;
}


#line 92
- (instancetype)initPackagePrivateWithInt:(jint)initialCapacity {
  ComAowagieTextPdfIntHashtable_initPackagePrivateWithInt_(self, initialCapacity);
  return self;
}


#line 105
- (instancetype)initPackagePrivateWithInt:(jint)initialCapacity
                                withFloat:(jfloat)loadFactor {
  ComAowagieTextPdfIntHashtable_initPackagePrivateWithInt_withFloat_(self, initialCapacity, loadFactor);
  return self;
}


#line 126
- (jint)size {
  return self->count_;
}


#line 136
- (jboolean)isEmpty {
  return self->count_ == 0;
}


#line 152
- (jboolean)containsKeyWithInt:(jint)key {
  IOSObjectArray *tab = self->table_;
  jint hash_ = key;
  jint index = JreIntMod((hash_ & (jint) 0x7FFFFFFF), ((IOSObjectArray *) nil_chk(tab))->size_);
  for (ComAowagieTextPdfIntHashtable_Entry *e = IOSObjectArray_Get(tab, index); e != nil; e = e->next_) {
    if (e->hash__ == hash_ && e->key_ == key) {
      return true;
    }
  }
  return false;
}


#line 173
- (jint)getWithInt:(jint)key {
  IOSObjectArray *tab = self->table_;
  jint hash_ = key;
  jint index = JreIntMod((hash_ & (jint) 0x7FFFFFFF), ((IOSObjectArray *) nil_chk(tab))->size_);
  for (ComAowagieTextPdfIntHashtable_Entry *e = IOSObjectArray_Get(tab, index); e != nil; e = e->next_) {
    if (e->hash__ == hash_ && e->key_ == key) {
      return e->value_;
    }
  }
  return 0;
}


#line 194
- (void)rehash {
  ComAowagieTextPdfIntHashtable_rehash(self);
}


#line 231
- (jint)putWithInt:(jint)key
           withInt:(jint)value {
  IOSObjectArray *tab = self->table_;
  jint hash_ = key;
  jint index = JreIntMod((hash_ & (jint) 0x7FFFFFFF), ((IOSObjectArray *) nil_chk(tab))->size_);
  for (ComAowagieTextPdfIntHashtable_Entry *e = IOSObjectArray_Get(tab, index); e != nil; e = e->next_) {
    if (e->hash__ == hash_ && e->key_ == key) {
      jint old = e->value_;
      e->value_ = value;
      return old;
    }
  }
  
#line 244
  if (self->count_ >= self->threshold_) {
    
#line 246
    ComAowagieTextPdfIntHashtable_rehash(self);
    
#line 248
    tab = self->table_;
    index = JreIntMod((hash_ & (jint) 0x7FFFFFFF), ((IOSObjectArray *) nil_chk(tab))->size_);
  }
  
#line 253
  ComAowagieTextPdfIntHashtable_Entry *e = new_ComAowagieTextPdfIntHashtable_Entry_initWithInt_withInt_withInt_withComAowagieTextPdfIntHashtable_Entry_(hash_, key, value, IOSObjectArray_Get(tab, index));
  (void) IOSObjectArray_Set(tab, index, e);
  self->count_++;
  return 0;
}


#line 270
- (jint)removeWithInt:(jint)key {
  IOSObjectArray *tab = self->table_;
  jint hash_ = key;
  jint index = JreIntMod((hash_ & (jint) 0x7FFFFFFF), ((IOSObjectArray *) nil_chk(tab))->size_);
  for (ComAowagieTextPdfIntHashtable_Entry *e = IOSObjectArray_Get(tab, index), *prev = nil; e != nil; prev = e, e = e->next_) {
    if (e->hash__ == hash_ && e->key_ == key) {
      if (prev != nil) {
        prev->next_ = e->next_;
      }
      else {
        
#line 279
        (void) IOSObjectArray_Set(tab, index, e->next_);
      }
      self->count_--;
      jint oldValue = e->value_;
      e->value_ = 0;
      return oldValue;
    }
  }
  return 0;
}

- (void)clear {
  IOSObjectArray *tab = self->table_;
  for (jint index = ((IOSObjectArray *) nil_chk(tab))->size_; --index >= 0; ) {
    (void) IOSObjectArray_Set(tab, index, nil);
  }
  self->count_ = 0;
}


#line 385
- (id<JavaUtilIterator>)getEntryIterator {
  return new_ComAowagieTextPdfIntHashtable_IntHashtableIterator_initWithComAowagieTextPdfIntHashtable_EntryArray_(self->table_);
}

- (IOSIntArray *)toOrderedKeys {
  IOSIntArray *res = [self getKeys];
  JavaUtilArrays_sortWithIntArray_(res);
  return res;
}

- (IOSIntArray *)getKeys {
  IOSIntArray *res = [IOSIntArray newArrayWithLength:self->count_];
  jint ptr = 0;
  jint index = ((IOSObjectArray *) nil_chk(self->table_))->size_;
  ComAowagieTextPdfIntHashtable_Entry *entry_ = nil;
  while (true) {
    if (entry_ == nil) {
      while (index-- > 0 && (entry_ = IOSObjectArray_Get(self->table_, index)) == nil) {
      }
    }
    
#line 406
    if (entry_ == nil) {
      break;
    }
    ComAowagieTextPdfIntHashtable_Entry *e = entry_;
    entry_ = e->next_;
    *IOSIntArray_GetRef(res, ptr++) = e->key_;
  }
  return res;
}


#line 416
- (jint)getOneKey {
  if (self->count_ == 0) {
    return 0;
  }
  jint index = ((IOSObjectArray *) nil_chk(self->table_))->size_;
  ComAowagieTextPdfIntHashtable_Entry *entry_ = nil;
  while (index-- > 0 && (entry_ = IOSObjectArray_Get(self->table_, index)) == nil) {
  }
  
#line 425
  if (entry_ == nil) {
    return 0;
  }
  return entry_->key_;
}


#line 431
- (id)java_clone {
  
#line 433
  @try {
    ComAowagieTextPdfIntHashtable *t = (ComAowagieTextPdfIntHashtable *) cast_chk([super java_clone], [ComAowagieTextPdfIntHashtable class]);
    ((ComAowagieTextPdfIntHashtable *) nil_chk(t))->table_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(self->table_))->size_ type:ComAowagieTextPdfIntHashtable_Entry_class_()];
    for (jint i = self->table_->size_; i-- > 0; ) {
      (void) IOSObjectArray_Set(nil_chk(t->table_), i, IOSObjectArray_Get(self->table_, i) != nil ?
#line 438
      (ComAowagieTextPdfIntHashtable_Entry *) cast_chk([((ComAowagieTextPdfIntHashtable_Entry *) nil_chk(IOSObjectArray_Get(self->table_, i))) java_clone], [ComAowagieTextPdfIntHashtable_Entry class]) : nil);
    }
    return t;
  }
  @catch (
#line 441
  JavaLangCloneNotSupportedException *e) {
    
#line 443
    @throw new_JavaLangInternalError_init();
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 2, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 3, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 6, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(initPackagePrivateWithInt:);
  methods[2].selector = @selector(initPackagePrivateWithInt:withFloat:);
  methods[3].selector = @selector(size);
  methods[4].selector = @selector(isEmpty);
  methods[5].selector = @selector(containsKeyWithInt:);
  methods[6].selector = @selector(getWithInt:);
  methods[7].selector = @selector(rehash);
  methods[8].selector = @selector(putWithInt:withInt:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(clear);
  methods[11].selector = @selector(getEntryIterator);
  methods[12].selector = @selector(toOrderedKeys);
  methods[13].selector = @selector(getKeys);
  methods[14].selector = @selector(getOneKey);
  methods[15].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "table_", "[LComAowagieTextPdfIntHashtable_Entry;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "threshold_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "loadFactor_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "IF", "containsKey", "get", "put", "II", "remove", "clone", "LComAowagieTextPdfIntHashtable_Entry;LComAowagieTextPdfIntHashtable_IntHashtableIterator;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfIntHashtable = { "IntHashtable", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 16, 4, -1, 8, -1, -1, -1 };
  return &_ComAowagieTextPdfIntHashtable;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end


#line 80
void ComAowagieTextPdfIntHashtable_initPackagePrivate(ComAowagieTextPdfIntHashtable *self) {
  ComAowagieTextPdfIntHashtable_initPackagePrivateWithInt_withFloat_(self, 150, 0.75f);
}


#line 80
ComAowagieTextPdfIntHashtable *new_ComAowagieTextPdfIntHashtable_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfIntHashtable, initPackagePrivate)
}


#line 80
ComAowagieTextPdfIntHashtable *create_ComAowagieTextPdfIntHashtable_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfIntHashtable, initPackagePrivate)
}


#line 92
void ComAowagieTextPdfIntHashtable_initPackagePrivateWithInt_(ComAowagieTextPdfIntHashtable *self, jint initialCapacity) {
  ComAowagieTextPdfIntHashtable_initPackagePrivateWithInt_withFloat_(self, initialCapacity, 0.75f);
}


#line 92
ComAowagieTextPdfIntHashtable *new_ComAowagieTextPdfIntHashtable_initPackagePrivateWithInt_(jint initialCapacity) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfIntHashtable, initPackagePrivateWithInt_, initialCapacity)
}


#line 92
ComAowagieTextPdfIntHashtable *create_ComAowagieTextPdfIntHashtable_initPackagePrivateWithInt_(jint initialCapacity) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfIntHashtable, initPackagePrivateWithInt_, initialCapacity)
}


#line 105
void ComAowagieTextPdfIntHashtable_initPackagePrivateWithInt_withFloat_(ComAowagieTextPdfIntHashtable *self, jint initialCapacity, jfloat loadFactor) {
  NSObject_init(self);
  if (initialCapacity < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Illegal Capacity: ", initialCapacity));
  }
  if (loadFactor <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$F", @"Illegal Load: ", loadFactor));
  }
  if (initialCapacity == 0) {
    initialCapacity = 1;
  }
  self->loadFactor_ = loadFactor;
  self->table_ = [IOSObjectArray newArrayWithLength:initialCapacity type:ComAowagieTextPdfIntHashtable_Entry_class_()];
  self->threshold_ = JreFpToInt((initialCapacity * loadFactor));
}


#line 105
ComAowagieTextPdfIntHashtable *new_ComAowagieTextPdfIntHashtable_initPackagePrivateWithInt_withFloat_(jint initialCapacity, jfloat loadFactor) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfIntHashtable, initPackagePrivateWithInt_withFloat_, initialCapacity, loadFactor)
}


#line 105
ComAowagieTextPdfIntHashtable *create_ComAowagieTextPdfIntHashtable_initPackagePrivateWithInt_withFloat_(jint initialCapacity, jfloat loadFactor) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfIntHashtable, initPackagePrivateWithInt_withFloat_, initialCapacity, loadFactor)
}


#line 194
void ComAowagieTextPdfIntHashtable_rehash(ComAowagieTextPdfIntHashtable *self) {
  jint oldCapacity = ((IOSObjectArray *) nil_chk(self->table_))->size_;
  IOSObjectArray *oldMap = self->table_;
  
#line 198
  jint newCapacity = oldCapacity * 2 + 1;
  IOSObjectArray *newMap = [IOSObjectArray newArrayWithLength:newCapacity type:ComAowagieTextPdfIntHashtable_Entry_class_()];
  
#line 201
  self->threshold_ = JreFpToInt((newCapacity * self->loadFactor_));
  self->table_ = newMap;
  
#line 204
  for (jint i = oldCapacity; i-- > 0; ) {
    for (ComAowagieTextPdfIntHashtable_Entry *old = IOSObjectArray_Get(oldMap, i); old != nil; ) {
      ComAowagieTextPdfIntHashtable_Entry *e = old;
      old = old->next_;
      
#line 209
      jint index = JreIntMod((e->hash__ & (jint) 0x7FFFFFFF), newCapacity);
      e->next_ = IOSObjectArray_Get(newMap, index);
      (void) IOSObjectArray_Set(newMap, index, e);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfIntHashtable)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/IntHashtable.java"


#line 305
@implementation ComAowagieTextPdfIntHashtable_Entry


#line 319
- (instancetype)initWithInt:(jint)hash_
                    withInt:(jint)key
                    withInt:(jint)value
withComAowagieTextPdfIntHashtable_Entry:(ComAowagieTextPdfIntHashtable_Entry *)next {
  ComAowagieTextPdfIntHashtable_Entry_initWithInt_withInt_withInt_withComAowagieTextPdfIntHashtable_Entry_(self, hash_, key, value, next);
  return self;
}

- (jint)getKey {
  return self->key_;
}


#line 330
- (jint)getValue {
  return self->value_;
}


#line 333
- (id)java_clone {
  
#line 335
  ComAowagieTextPdfIntHashtable_Entry *entry_ = new_ComAowagieTextPdfIntHashtable_Entry_initWithInt_withInt_withInt_withComAowagieTextPdfIntHashtable_Entry_(self->hash__, self->key_, self->value_, self->next_ != nil ? (ComAowagieTextPdfIntHashtable_Entry *) cast_chk([self->next_ java_clone], [ComAowagieTextPdfIntHashtable_Entry class]) : nil);
  return entry_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:withComAowagieTextPdfIntHashtable_Entry:);
  methods[1].selector = @selector(getKey);
  methods[2].selector = @selector(getValue);
  methods[3].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hash__", "I", .constantValue.asLong = 0, 0x12, 2, -1, -1, -1 },
    { "key_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "value_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "next_", "LComAowagieTextPdfIntHashtable_Entry;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIILComAowagieTextPdfIntHashtable_Entry;", "clone", "hash", "LComAowagieTextPdfIntHashtable;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfIntHashtable_Entry = { "Entry", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x8, 4, 4, 3, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfIntHashtable_Entry;
}

@end


#line 319
void ComAowagieTextPdfIntHashtable_Entry_initWithInt_withInt_withInt_withComAowagieTextPdfIntHashtable_Entry_(ComAowagieTextPdfIntHashtable_Entry *self, jint hash_, jint key, jint value, ComAowagieTextPdfIntHashtable_Entry *next) {
  NSObject_init(self);
  
#line 320
  self->hash__ = hash_;
  self->key_ = key;
  self->value_ = value;
  self->next_ = next;
}


#line 319
ComAowagieTextPdfIntHashtable_Entry *new_ComAowagieTextPdfIntHashtable_Entry_initWithInt_withInt_withInt_withComAowagieTextPdfIntHashtable_Entry_(jint hash_, jint key, jint value, ComAowagieTextPdfIntHashtable_Entry *next) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfIntHashtable_Entry, initWithInt_withInt_withInt_withComAowagieTextPdfIntHashtable_Entry_, hash_, key, value, next)
}


#line 319
ComAowagieTextPdfIntHashtable_Entry *create_ComAowagieTextPdfIntHashtable_Entry_initWithInt_withInt_withInt_withComAowagieTextPdfIntHashtable_Entry_(jint hash_, jint key, jint value, ComAowagieTextPdfIntHashtable_Entry *next) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfIntHashtable_Entry, initWithInt_withInt_withInt_withComAowagieTextPdfIntHashtable_Entry_, hash_, key, value, next)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfIntHashtable_Entry)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/IntHashtable.java"


#line 341
@implementation ComAowagieTextPdfIntHashtable_IntHashtableIterator


#line 346
- (instancetype)initWithComAowagieTextPdfIntHashtable_EntryArray:(IOSObjectArray *)table {
  ComAowagieTextPdfIntHashtable_IntHashtableIterator_initWithComAowagieTextPdfIntHashtable_EntryArray_(self, table);
  return self;
}


#line 350
- (jboolean)hasNext {
  
#line 352
  if (self->entry__ != nil) {
    return true;
  }
  while (self->index_-- > 0) {
    if ((self->entry__ = IOSObjectArray_Get(nil_chk(self->table_), self->index_)) != nil) {
      return true;
    }
  }
  return false;
}


#line 363
- (id)next {
  
#line 365
  if (self->entry__ == nil) {
    while (self->index_-- > 0 && (self->entry__ = IOSObjectArray_Get(nil_chk(self->table_), self->index_)) == nil) {
    }
  }
  
#line 370
  if (self->entry__ != nil) {
    ComAowagieTextPdfIntHashtable_Entry *e = self->entry__;
    self->entry__ = e->next_;
    return e;
  }
  @throw new_JavaUtilNoSuchElementException_initWithNSString_(@"IntHashtableIterator");
}


#line 377
- (void)remove {
  
#line 379
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"remove() not supported.");
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComAowagieTextPdfIntHashtable_EntryArray:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "index_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "table_", "[LComAowagieTextPdfIntHashtable_Entry;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "entry__", "LComAowagieTextPdfIntHashtable_Entry;", .constantValue.asLong = 0, 0x2, 1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LComAowagieTextPdfIntHashtable_Entry;", "entry", "LComAowagieTextPdfIntHashtable;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfIntHashtable_IntHashtableIterator = { "IntHashtableIterator", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0xa, 4, 3, 2, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfIntHashtable_IntHashtableIterator;
}

@end


#line 346
void ComAowagieTextPdfIntHashtable_IntHashtableIterator_initWithComAowagieTextPdfIntHashtable_EntryArray_(ComAowagieTextPdfIntHashtable_IntHashtableIterator *self, IOSObjectArray *table) {
  NSObject_init(self);
  
#line 347
  self->table_ = table;
  self->index_ = ((IOSObjectArray *) nil_chk(table))->size_;
}


#line 346
ComAowagieTextPdfIntHashtable_IntHashtableIterator *new_ComAowagieTextPdfIntHashtable_IntHashtableIterator_initWithComAowagieTextPdfIntHashtable_EntryArray_(IOSObjectArray *table) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfIntHashtable_IntHashtableIterator, initWithComAowagieTextPdfIntHashtable_EntryArray_, table)
}


#line 346
ComAowagieTextPdfIntHashtable_IntHashtableIterator *create_ComAowagieTextPdfIntHashtable_IntHashtableIterator_initWithComAowagieTextPdfIntHashtable_EntryArray_(IOSObjectArray *table) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfIntHashtable_IntHashtableIterator, initWithComAowagieTextPdfIntHashtable_EntryArray_, table)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfIntHashtable_IntHashtableIterator)
