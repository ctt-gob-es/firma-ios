//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/FdfReader.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/pdf/FdfReader.h"
#include "com/aowagie/text/pdf/PRTokeniser.h"
#include "com/aowagie/text/pdf/PdfArray.h"
#include "com/aowagie/text/pdf/PdfDictionary.h"
#include "com/aowagie/text/pdf/PdfName.h"
#include "com/aowagie/text/pdf/PdfObject.h"
#include "com/aowagie/text/pdf/PdfReader.h"
#include "com/aowagie/text/pdf/PdfString.h"
#include "java/lang/Exception.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/FdfReader must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfFdfReader () {
 @public
  JavaUtilHashMap *fields_;
  NSString *fileSpec_;
  ComAowagieTextPdfPdfName *encoding_;
}

- (void)kidNodeWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)merged
                                     withNSString:(NSString *)name;

- (void)readFields;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfFdfReader, fields_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfFdfReader, fileSpec_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfFdfReader, encoding_, ComAowagieTextPdfPdfName *)

__attribute__((unused)) static void ComAowagieTextPdfFdfReader_kidNodeWithComAowagieTextPdfPdfDictionary_withNSString_(ComAowagieTextPdfFdfReader *self, ComAowagieTextPdfPdfDictionary *merged, NSString *name);

__attribute__((unused)) static void ComAowagieTextPdfFdfReader_readFields(ComAowagieTextPdfFdfReader *self);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/FdfReader.java"


#line 54
@implementation ComAowagieTextPdfFdfReader


#line 54
- (instancetype)initPackagePrivate {
  ComAowagieTextPdfFdfReader_initPackagePrivate(self);
  return self;
}


#line 68
- (void)readPdf {
  
#line 70
  self->fields_ = new_JavaUtilLinkedHashMap_init();
  @try {
    [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) checkFdfHeader];
    [self rebuildXref];
    [self readDocObj];
  }
  @finally {
    @try {
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) close];
    }
    @catch (JavaLangException *e) {
    }
  }
  
#line 84
  ComAowagieTextPdfFdfReader_readFields(self);
}


#line 87
- (void)kidNodeWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)merged
                                     withNSString:(NSString *)name {
  ComAowagieTextPdfFdfReader_kidNodeWithComAowagieTextPdfPdfDictionary_withNSString_(self, merged, name);
}


#line 113
- (void)readFields {
  ComAowagieTextPdfFdfReader_readFields(self);
}


#line 138
- (JavaUtilHashMap *)getFields {
  return self->fields_;
}


#line 149
- (NSString *)getFieldValueWithNSString:(NSString *)name {
  ComAowagieTextPdfPdfDictionary *field = (ComAowagieTextPdfPdfDictionary *) cast_chk([((JavaUtilHashMap *) nil_chk(self->fields_)) getWithId:name], [ComAowagieTextPdfPdfDictionary class]);
  if (field == nil) {
    return nil;
  }
  ComAowagieTextPdfPdfObject *v = ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_([field getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V)]);
  if (v == nil) {
    return nil;
  }
  if ([v isName]) {
    return ComAowagieTextPdfPdfName_decodeNameWithNSString_([((ComAowagieTextPdfPdfName *) cast_chk(v, [ComAowagieTextPdfPdfName class])) description]);
  }
  else
#line 160
  if ([v isString]) {
    ComAowagieTextPdfPdfString *vs = (ComAowagieTextPdfPdfString *) cast_chk(v, [ComAowagieTextPdfPdfString class]);
    if (self->encoding_ == nil || [vs getEncoding] != nil) {
      return [vs toUnicodeString];
    }
    IOSByteArray *b = [vs getBytes];
    if (((IOSByteArray *) nil_chk(b))->size_ >= 2 && IOSByteArray_Get(b, 0) == (jbyte) 254 && IOSByteArray_Get(b, 1) == (jbyte) 255) {
      return [vs toUnicodeString];
    }
    @try {
      if ([((ComAowagieTextPdfPdfName *) nil_chk(self->encoding_)) isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, SHIFT_JIS)]) {
        return [NSString java_stringWithBytes:b charsetName:@"SJIS"];
      }
      else
#line 172
      if ([((ComAowagieTextPdfPdfName *) nil_chk(self->encoding_)) isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, UHC)]) {
        return [NSString java_stringWithBytes:b charsetName:@"MS949"];
      }
      else
#line 174
      if ([((ComAowagieTextPdfPdfName *) nil_chk(self->encoding_)) isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, GBK)]) {
        return [NSString java_stringWithBytes:b charsetName:@"GBK"];
      }
      else
#line 176
      if ([((ComAowagieTextPdfPdfName *) nil_chk(self->encoding_)) isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, BIGFIVE)]) {
        return [NSString java_stringWithBytes:b charsetName:@"Big5"];
      }
    }
    @catch (JavaLangException *e) {
    }
    return [vs toUnicodeString];
  }
  return nil;
}


#line 190
- (NSString *)getFileSpec {
  return self->fileSpec_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(readPdf);
  methods[2].selector = @selector(kidNodeWithComAowagieTextPdfPdfDictionary:withNSString:);
  methods[3].selector = @selector(readFields);
  methods[4].selector = @selector(getFields);
  methods[5].selector = @selector(getFieldValueWithNSString:);
  methods[6].selector = @selector(getFileSpec);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fields_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fileSpec_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encoding_", "LComAowagieTextPdfPdfName;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoIOException;", "kidNode", "LComAowagieTextPdfPdfDictionary;LNSString;", "getFieldValue", "LNSString;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfFdfReader = { "FdfReader", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 7, 3, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfFdfReader;
}

@end


#line 54
void ComAowagieTextPdfFdfReader_initPackagePrivate(ComAowagieTextPdfFdfReader *self) {
  ComAowagieTextPdfPdfReader_init(self);
}


#line 54
ComAowagieTextPdfFdfReader *new_ComAowagieTextPdfFdfReader_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfFdfReader, initPackagePrivate)
}


#line 54
ComAowagieTextPdfFdfReader *create_ComAowagieTextPdfFdfReader_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfFdfReader, initPackagePrivate)
}


#line 87
void ComAowagieTextPdfFdfReader_kidNodeWithComAowagieTextPdfPdfDictionary_withNSString_(ComAowagieTextPdfFdfReader *self, ComAowagieTextPdfPdfDictionary *merged, NSString *name) {
  ComAowagieTextPdfPdfArray *kids = [((ComAowagieTextPdfPdfDictionary *) nil_chk(merged)) getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, KIDS)];
  if (kids == nil || [kids isEmpty]) {
    if ([((NSString *) nil_chk(name)) java_length] > 0) {
      name = [name java_substring:1];
    }
    (void) [((JavaUtilHashMap *) nil_chk(self->fields_)) putWithId:name withId:merged];
  }
  else {
    [merged removeWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, KIDS)];
    for (jint k = 0; k < [kids size]; ++k) {
      ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_init();
      [dic mergeWithComAowagieTextPdfPdfDictionary:merged];
      ComAowagieTextPdfPdfDictionary *newDic = [kids getAsDictWithInt:k];
      ComAowagieTextPdfPdfString *t = [((ComAowagieTextPdfPdfDictionary *) nil_chk(newDic)) getAsStringWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, T)];
      NSString *newName = name;
      if (t != nil) {
        (void) JreStrAppendStrong(&newName, "C$", '.', [t toUnicodeString]);
      }
      [dic mergeWithComAowagieTextPdfPdfDictionary:newDic];
      [dic removeWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, T)];
      ComAowagieTextPdfFdfReader_kidNodeWithComAowagieTextPdfPdfDictionary_withNSString_(self, dic, newName);
    }
  }
}

void ComAowagieTextPdfFdfReader_readFields(ComAowagieTextPdfFdfReader *self) {
  self->catalog_ = [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->trailer_)) getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ROOT)];
  ComAowagieTextPdfPdfDictionary *fdf = [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->catalog_)) getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FDF)];
  if (fdf == nil) {
    return;
  }
  ComAowagieTextPdfPdfString *fs = [fdf getAsStringWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, F)];
  if (fs != nil) {
    self->fileSpec_ = [fs toUnicodeString];
  }
  ComAowagieTextPdfPdfArray *fld = [fdf getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FIELDS)];
  if (fld == nil) {
    return;
  }
  self->encoding_ = [fdf getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENCODING)];
  ComAowagieTextPdfPdfDictionary *merged = new_ComAowagieTextPdfPdfDictionary_init();
  [merged putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, KIDS) withComAowagieTextPdfPdfObject:fld];
  ComAowagieTextPdfFdfReader_kidNodeWithComAowagieTextPdfPdfDictionary_withNSString_(self, merged, @"");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfFdfReader)
