//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/MappedRandomAccessFile.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/pdf/MappedRandomAccessFile.h"
#include "java/io/FileInputStream.h"
#include "java/io/RandomAccessFile.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/reflect/Method.h"
#include "java/nio/Buffer.h"
#include "java/nio/BufferUnderflowException.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/MappedByteBuffer.h"
#include "java/nio/channels/FileChannel.h"
#include "java/security/AccessController.h"
#include "java/security/PrivilegedAction.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/MappedRandomAccessFile must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfMappedRandomAccessFile () {
 @public
  JavaNioMappedByteBuffer *mappedByteBuffer_;
  JavaNioChannelsFileChannel *channel_;
}

/*!
 @brief initializes the channel and mapped bytebuffer
 @param channel FileChannel
 @param mapMode FileChannel.MapMode
 @throw IOExceptionon error
 */
- (void)init__WithJavaNioChannelsFileChannel:(JavaNioChannelsFileChannel *)channel
      withJavaNioChannelsFileChannel_MapMode:(JavaNioChannelsFileChannel_MapMode *)mapMode OBJC_METHOD_FAMILY_NONE;

/*!
 @brief invokes the clean method on the ByteBuffer's cleaner
 @param buffer ByteBuffer
 @return boolean true on success
 */
+ (jboolean)cleanWithJavaNioByteBuffer:(JavaNioByteBuffer *)buffer;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfMappedRandomAccessFile, mappedByteBuffer_, JavaNioMappedByteBuffer *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfMappedRandomAccessFile, channel_, JavaNioChannelsFileChannel *)

__attribute__((unused)) static void ComAowagieTextPdfMappedRandomAccessFile_init__WithJavaNioChannelsFileChannel_withJavaNioChannelsFileChannel_MapMode_(ComAowagieTextPdfMappedRandomAccessFile *self, JavaNioChannelsFileChannel *channel, JavaNioChannelsFileChannel_MapMode *mapMode);

__attribute__((unused)) static jboolean ComAowagieTextPdfMappedRandomAccessFile_cleanWithJavaNioByteBuffer_(JavaNioByteBuffer *buffer);

@interface ComAowagieTextPdfMappedRandomAccessFile_1 : NSObject < JavaSecurityPrivilegedAction > {
 @public
  JavaNioByteBuffer *val$buffer_;
}

- (instancetype)initWithJavaNioByteBuffer:(JavaNioByteBuffer *)capture$0;

- (id)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfMappedRandomAccessFile_1)

__attribute__((unused)) static void ComAowagieTextPdfMappedRandomAccessFile_1_initWithJavaNioByteBuffer_(ComAowagieTextPdfMappedRandomAccessFile_1 *self, JavaNioByteBuffer *capture$0);

__attribute__((unused)) static ComAowagieTextPdfMappedRandomAccessFile_1 *new_ComAowagieTextPdfMappedRandomAccessFile_1_initWithJavaNioByteBuffer_(JavaNioByteBuffer *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfMappedRandomAccessFile_1 *create_ComAowagieTextPdfMappedRandomAccessFile_1_initWithJavaNioByteBuffer_(JavaNioByteBuffer *capture$0);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/MappedRandomAccessFile.java"


#line 67
@implementation ComAowagieTextPdfMappedRandomAccessFile


#line 79
- (instancetype)initPackagePrivateWithNSString:(NSString *)filename
                                  withNSString:(NSString *)mode {
  ComAowagieTextPdfMappedRandomAccessFile_initPackagePrivateWithNSString_withNSString_(self, filename, mode);
  return self;
}


#line 100
- (void)init__WithJavaNioChannelsFileChannel:(JavaNioChannelsFileChannel *)channel
      withJavaNioChannelsFileChannel_MapMode:(JavaNioChannelsFileChannel_MapMode *)mapMode {
  ComAowagieTextPdfMappedRandomAccessFile_init__WithJavaNioChannelsFileChannel_withJavaNioChannelsFileChannel_MapMode_(self, channel, mapMode);
}


#line 112
- (JavaNioChannelsFileChannel *)getChannel {
  return self->channel_;
}


#line 120
- (jint)read {
  @try {
    jbyte b = [((JavaNioMappedByteBuffer *) nil_chk(self->mappedByteBuffer_)) get];
    jint n = b & (jint) 0xff;
    
#line 125
    return n;
  }
  @catch (
#line 126
  JavaNioBufferUnderflowException *e) {
    return -1;
  }
}


#line 138
- (jint)readWithByteArray:(IOSByteArray *)bytes
                  withInt:(jint)off
                  withInt:(jint)len {
  
#line 139
  jint pos = [((JavaNioMappedByteBuffer *) nil_chk(self->mappedByteBuffer_)) position];
  jint limit = [((JavaNioMappedByteBuffer *) nil_chk(self->mappedByteBuffer_)) limit];
  if (pos == limit) {
    
#line 143
    return -1;
  }
  jint newlimit = pos + len - off;
  if (newlimit > limit) {
    len = limit - pos;
  }
  (void) [((JavaNioMappedByteBuffer *) nil_chk(self->mappedByteBuffer_)) getWithByteArray:bytes withInt:off withInt:len];
  return len;
}


#line 157
- (jlong)getFilePointer {
  return [((JavaNioMappedByteBuffer *) nil_chk(self->mappedByteBuffer_)) position];
}


#line 165
- (void)seekWithLong:(jlong)pos {
  (void) [((JavaNioMappedByteBuffer *) nil_chk(self->mappedByteBuffer_)) positionWithInt:(jint) pos];
}


#line 173
- (jlong)length {
  return [((JavaNioMappedByteBuffer *) nil_chk(self->mappedByteBuffer_)) limit];
}


#line 182
- (void)close {
  ComAowagieTextPdfMappedRandomAccessFile_cleanWithJavaNioByteBuffer_(self->mappedByteBuffer_);
  self->mappedByteBuffer_ = nil;
  if (self->channel_ != nil) {
    [self->channel_ close];
  }
  self->channel_ = nil;
}


#line 195
- (void)java_finalize {
  
#line 197
  [self close];
  [super java_finalize];
}


#line 206
+ (jboolean)cleanWithJavaNioByteBuffer:(JavaNioByteBuffer *)buffer {
  return ComAowagieTextPdfMappedRandomAccessFile_cleanWithJavaNioByteBuffer_(buffer);
}

- (void)dealloc {
  JreCheckFinalize(self, [ComAowagieTextPdfMappedRandomAccessFile class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, 4, -1, -1, -1 },
    { NULL, "LJavaNioChannelsFileChannel;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 9, -1, 10, -1, -1, -1 },
    { NULL, "Z", 0xa, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithNSString:withNSString:);
  methods[1].selector = @selector(init__WithJavaNioChannelsFileChannel:withJavaNioChannelsFileChannel_MapMode:);
  methods[2].selector = @selector(getChannel);
  methods[3].selector = @selector(read);
  methods[4].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(getFilePointer);
  methods[6].selector = @selector(seekWithLong:);
  methods[7].selector = @selector(length);
  methods[8].selector = @selector(close);
  methods[9].selector = @selector(java_finalize);
  methods[10].selector = @selector(cleanWithJavaNioByteBuffer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mappedByteBuffer_", "LJavaNioMappedByteBuffer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "channel_", "LJavaNioChannelsFileChannel;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "LJavaIoFileNotFoundException;LJavaIoIOException;", "init", "LJavaNioChannelsFileChannel;LJavaNioChannelsFileChannel_MapMode;", "LJavaIoIOException;", "read", "[BII", "seek", "J", "finalize", "LJavaLangThrowable;", "clean", "LJavaNioByteBuffer;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfMappedRandomAccessFile = { "MappedRandomAccessFile", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 11, 2, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfMappedRandomAccessFile;
}

@end


#line 79
void ComAowagieTextPdfMappedRandomAccessFile_initPackagePrivateWithNSString_withNSString_(ComAowagieTextPdfMappedRandomAccessFile *self, NSString *filename, NSString *mode) {
  NSObject_init(self);
  self->mappedByteBuffer_ =
#line 69
  nil;
  self->channel_ = nil;
  
#line 82
  if ([((NSString *) nil_chk(mode)) isEqual:@"rw"]) {
    ComAowagieTextPdfMappedRandomAccessFile_init__WithJavaNioChannelsFileChannel_withJavaNioChannelsFileChannel_MapMode_(self,
#line 84
    [new_JavaIoRandomAccessFile_initWithNSString_withNSString_(filename, mode) getChannel], JreLoadStatic(JavaNioChannelsFileChannel_MapMode, READ_WRITE));
  }
  else {
    ComAowagieTextPdfMappedRandomAccessFile_init__WithJavaNioChannelsFileChannel_withJavaNioChannelsFileChannel_MapMode_(self,
#line 88
    [new_JavaIoFileInputStream_initWithNSString_(filename) getChannel], JreLoadStatic(JavaNioChannelsFileChannel_MapMode, READ_ONLY));
  }
}


#line 79
ComAowagieTextPdfMappedRandomAccessFile *new_ComAowagieTextPdfMappedRandomAccessFile_initPackagePrivateWithNSString_withNSString_(NSString *filename, NSString *mode) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfMappedRandomAccessFile, initPackagePrivateWithNSString_withNSString_, filename, mode)
}


#line 79
ComAowagieTextPdfMappedRandomAccessFile *create_ComAowagieTextPdfMappedRandomAccessFile_initPackagePrivateWithNSString_withNSString_(NSString *filename, NSString *mode) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfMappedRandomAccessFile, initPackagePrivateWithNSString_withNSString_, filename, mode)
}


#line 100
void ComAowagieTextPdfMappedRandomAccessFile_init__WithJavaNioChannelsFileChannel_withJavaNioChannelsFileChannel_MapMode_(ComAowagieTextPdfMappedRandomAccessFile *self, JavaNioChannelsFileChannel *channel, JavaNioChannelsFileChannel_MapMode *mapMode) {
  
#line 103
  self->channel_ = channel;
  self->mappedByteBuffer_ = [((JavaNioChannelsFileChannel *) nil_chk(channel)) mapWithJavaNioChannelsFileChannel_MapMode:mapMode withLong:0LL withLong:[channel size]];
  (void) [((JavaNioMappedByteBuffer *) nil_chk(self->mappedByteBuffer_)) load__];
}


#line 206
jboolean ComAowagieTextPdfMappedRandomAccessFile_cleanWithJavaNioByteBuffer_(JavaNioByteBuffer *buffer) {
  ComAowagieTextPdfMappedRandomAccessFile_initialize();
  
#line 207
  if (buffer == nil || ![buffer isDirect]) {
    return false;
  }
  
#line 211
  JavaLangBoolean *b = (JavaLangBoolean *) cast_chk(JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedAction_(new_ComAowagieTextPdfMappedRandomAccessFile_1_initWithJavaNioByteBuffer_(buffer)), [JavaLangBoolean class]);
  
#line 230
  return [((JavaLangBoolean *) nil_chk(b)) booleanValue];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfMappedRandomAccessFile)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/MappedRandomAccessFile.java"


#line 211
@implementation ComAowagieTextPdfMappedRandomAccessFile_1


#line 211
- (instancetype)initWithJavaNioByteBuffer:(JavaNioByteBuffer *)capture$0 {
  ComAowagieTextPdfMappedRandomAccessFile_1_initWithJavaNioByteBuffer_(self, capture$0);
  return self;
}


#line 212
- (id)run {
  
#line 214
  JavaLangBoolean *success = JreLoadStatic(JavaLangBoolean, FALSE);
  @try {
    JavaLangReflectMethod *getCleanerMethod = [[((JavaNioByteBuffer *) nil_chk(val$buffer_)) java_getClass] getMethod:@"cleaner" parameterTypes:nil];
    [((JavaLangReflectMethod *) nil_chk(getCleanerMethod)) setAccessibleWithBoolean:true];
    id cleaner = [getCleanerMethod invokeWithId:val$buffer_ withNSObjectArray:nil];
    JavaLangReflectMethod *clean = [[nil_chk(cleaner) java_getClass] getMethod:@"clean" parameterTypes:nil];
    (void) [((JavaLangReflectMethod *) nil_chk(clean)) invokeWithId:cleaner withNSObjectArray:nil];
    success = JreLoadStatic(JavaLangBoolean, TRUE);
  }
  @catch (
#line 222
  JavaLangException *e) {
  }
  
#line 226
  return JreRetainedLocalValue(success);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaNioByteBuffer:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$buffer_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNioByteBuffer;", "LComAowagieTextPdfMappedRandomAccessFile;", "cleanWithJavaNioByteBuffer:" };
  static const J2ObjcClassInfo _ComAowagieTextPdfMappedRandomAccessFile_1 = { "", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x8000, 2, 1, 1, -1, 2, -1, -1 };
  return &_ComAowagieTextPdfMappedRandomAccessFile_1;
}

@end


#line 211
void ComAowagieTextPdfMappedRandomAccessFile_1_initWithJavaNioByteBuffer_(ComAowagieTextPdfMappedRandomAccessFile_1 *self, JavaNioByteBuffer *capture$0) {
  self->val$buffer_ = capture$0;
  NSObject_init(self);
}


#line 211
ComAowagieTextPdfMappedRandomAccessFile_1 *new_ComAowagieTextPdfMappedRandomAccessFile_1_initWithJavaNioByteBuffer_(JavaNioByteBuffer *capture$0) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfMappedRandomAccessFile_1, initWithJavaNioByteBuffer_, capture$0)
}


#line 211
ComAowagieTextPdfMappedRandomAccessFile_1 *create_ComAowagieTextPdfMappedRandomAccessFile_1_initWithJavaNioByteBuffer_(JavaNioByteBuffer *capture$0) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfMappedRandomAccessFile_1, initWithJavaNioByteBuffer_, capture$0)
}
