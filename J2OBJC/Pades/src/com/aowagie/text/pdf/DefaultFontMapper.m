//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/DefaultFontMapper.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/ExceptionConverter.h"
#include "com/aowagie/text/pdf/BaseFont.h"
#include "com/aowagie/text/pdf/DefaultFontMapper.h"
#include "harmony/java/awt/AWTFont.h"
#include "java/lang/Exception.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/DefaultFontMapper must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfDefaultFontMapper () {
 @public
  /*!
   @brief Maps aliases to names.
   */
  JavaUtilHashMap *aliases_;
  /*!
   @brief Maps names to BaseFont parameters.
   */
  JavaUtilHashMap *mapper_;
}

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfDefaultFontMapper, aliases_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfDefaultFontMapper, mapper_, JavaUtilHashMap *)

@interface ComAowagieTextPdfDefaultFontMapper_BaseFontParameters ()

/*!
 @brief Constructs default BaseFont parameters.
 @param fontName the font name or location
 */
- (instancetype)initWithNSString:(NSString *)fontName;

@end

__attribute__((unused)) static void ComAowagieTextPdfDefaultFontMapper_BaseFontParameters_initWithNSString_(ComAowagieTextPdfDefaultFontMapper_BaseFontParameters *self, NSString *fontName);

__attribute__((unused)) static ComAowagieTextPdfDefaultFontMapper_BaseFontParameters *new_ComAowagieTextPdfDefaultFontMapper_BaseFontParameters_initWithNSString_(NSString *fontName) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfDefaultFontMapper_BaseFontParameters *create_ComAowagieTextPdfDefaultFontMapper_BaseFontParameters_initWithNSString_(NSString *fontName);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/DefaultFontMapper.java"


#line 59
@implementation ComAowagieTextPdfDefaultFontMapper


#line 59
- (instancetype)initPackagePrivate {
  ComAowagieTextPdfDefaultFontMapper_initPackagePrivate(self);
  return self;
}


#line 107
- (ComAowagieTextPdfBaseFont *)awtToPdfWithHarmonyJavaAwtAWTFont:(HarmonyJavaAwtAWTFont *)font {
  
#line 109
  @try {
    ComAowagieTextPdfDefaultFontMapper_BaseFontParameters *p = [self getBaseFontParametersWithNSString:[((HarmonyJavaAwtAWTFont *) nil_chk(font)) getFontName]];
    if (p != nil) {
      return ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_withByteArray_withByteArray_(p->fontName_, p->encoding_, p->embedded_, p->cached_, p->ttfAfm_, p->pfb_);
    }
    NSString *fontKey = nil;
    NSString *logicalName = [font getName];
    
#line 117
    if ([((NSString *) nil_chk(logicalName)) java_equalsIgnoreCase:@"DialogInput"] || [logicalName java_equalsIgnoreCase:@"Monospaced"] || [logicalName java_equalsIgnoreCase:@"Courier"]) {
      
#line 119
      if ([font isItalic]) {
        if ([font isBold]) {
          fontKey = ComAowagieTextPdfBaseFont_COURIER_BOLDOBLIQUE;
        }
        else {
          fontKey = ComAowagieTextPdfBaseFont_COURIER_OBLIQUE;
        }
      }
      else {
        if ([font isBold]) {
          fontKey = ComAowagieTextPdfBaseFont_COURIER_BOLD;
        }
        else {
          fontKey = ComAowagieTextPdfBaseFont_COURIER;
        }
      }
    }
    else if ([logicalName java_equalsIgnoreCase:@"Serif"] || [logicalName java_equalsIgnoreCase:@"TimesRoman"]) {
      
#line 138
      if ([font isItalic]) {
        if ([font isBold]) {
          fontKey = ComAowagieTextPdfBaseFont_TIMES_BOLDITALIC;
        }
        else {
          fontKey = ComAowagieTextPdfBaseFont_TIMES_ITALIC;
        }
      }
      else {
        if ([font isBold]) {
          fontKey = ComAowagieTextPdfBaseFont_TIMES_BOLD;
        }
        else {
          fontKey = ComAowagieTextPdfBaseFont_TIMES_ROMAN;
        }
      }
    }
    else {
      
#line 157
      if ([font isItalic]) {
        if ([font isBold]) {
          fontKey = ComAowagieTextPdfBaseFont_HELVETICA_BOLDOBLIQUE;
        }
        else {
          fontKey = ComAowagieTextPdfBaseFont_HELVETICA_OBLIQUE;
        }
      }
      else {
        if ([font isBold]) {
          fontKey = ComAowagieTextPdfBaseFont_HELVETICA_BOLD;
        }
        else {
          
#line 169
          fontKey = ComAowagieTextPdfBaseFont_HELVETICA;
        }
      }
    }
    return ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_(fontKey, ComAowagieTextPdfBaseFont_CP1252, false);
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 190
- (ComAowagieTextPdfDefaultFontMapper_BaseFontParameters *)getBaseFontParametersWithNSString:(NSString *)name {
  NSString *alias = (NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(self->aliases_)) getWithId:name], [NSString class]);
  if (alias == nil) {
    return (ComAowagieTextPdfDefaultFontMapper_BaseFontParameters *) cast_chk([((JavaUtilHashMap *) nil_chk(self->mapper_)) getWithId:name], [ComAowagieTextPdfDefaultFontMapper_BaseFontParameters class]);
  }
  ComAowagieTextPdfDefaultFontMapper_BaseFontParameters *p = (ComAowagieTextPdfDefaultFontMapper_BaseFontParameters *) cast_chk([((JavaUtilHashMap *) nil_chk(self->mapper_)) getWithId:alias], [ComAowagieTextPdfDefaultFontMapper_BaseFontParameters class]);
  if (p == nil) {
    return (ComAowagieTextPdfDefaultFontMapper_BaseFontParameters *) cast_chk([self->mapper_ getWithId:name], [ComAowagieTextPdfDefaultFontMapper_BaseFontParameters class]);
  }
  else {
    
#line 199
    return p;
  }
}


#line 207
- (JavaUtilHashMap *)getMapper {
  return self->mapper_;
}

- (JavaUtilHashMap *)getAliases {
  return self->aliases_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfBaseFont;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfDefaultFontMapper_BaseFontParameters;", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(awtToPdfWithHarmonyJavaAwtAWTFont:);
  methods[2].selector = @selector(getBaseFontParametersWithNSString:);
  methods[3].selector = @selector(getMapper);
  methods[4].selector = @selector(getAliases);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "aliases_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mapper_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "awtToPdf", "LHarmonyJavaAwtAWTFont;", "getBaseFontParameters", "LNSString;", "LComAowagieTextPdfDefaultFontMapper_BaseFontParameters;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfDefaultFontMapper = { "DefaultFontMapper", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 5, 2, -1, 4, -1, -1, -1 };
  return &_ComAowagieTextPdfDefaultFontMapper;
}

@end


#line 59
void ComAowagieTextPdfDefaultFontMapper_initPackagePrivate(ComAowagieTextPdfDefaultFontMapper *self) {
  NSObject_init(self);
  self->aliases_ = new_JavaUtilLinkedHashMap_init();
  self->mapper_ = new_JavaUtilLinkedHashMap_init();
}


#line 59
ComAowagieTextPdfDefaultFontMapper *new_ComAowagieTextPdfDefaultFontMapper_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfDefaultFontMapper, initPackagePrivate)
}


#line 59
ComAowagieTextPdfDefaultFontMapper *create_ComAowagieTextPdfDefaultFontMapper_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfDefaultFontMapper, initPackagePrivate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfDefaultFontMapper)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/DefaultFontMapper.java"


#line 63
@implementation ComAowagieTextPdfDefaultFontMapper_BaseFontParameters


#line 86
- (instancetype)initWithNSString:(NSString *)fontName {
  ComAowagieTextPdfDefaultFontMapper_BaseFontParameters_initWithNSString_(self, fontName);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fontName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "encoding_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "embedded_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cached_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ttfAfm_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pfb_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LComAowagieTextPdfDefaultFontMapper;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfDefaultFontMapper_BaseFontParameters = { "BaseFontParameters", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x8, 1, 6, 1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfDefaultFontMapper_BaseFontParameters;
}

@end


#line 86
void ComAowagieTextPdfDefaultFontMapper_BaseFontParameters_initWithNSString_(ComAowagieTextPdfDefaultFontMapper_BaseFontParameters *self, NSString *fontName) {
  NSObject_init(self);
  
#line 87
  self->fontName_ = fontName;
  self->encoding_ = ComAowagieTextPdfBaseFont_CP1252;
  self->embedded_ = ComAowagieTextPdfBaseFont_EMBEDDED;
  self->cached_ = ComAowagieTextPdfBaseFont_CACHED;
}


#line 86
ComAowagieTextPdfDefaultFontMapper_BaseFontParameters *new_ComAowagieTextPdfDefaultFontMapper_BaseFontParameters_initWithNSString_(NSString *fontName) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfDefaultFontMapper_BaseFontParameters, initWithNSString_, fontName)
}


#line 86
ComAowagieTextPdfDefaultFontMapper_BaseFontParameters *create_ComAowagieTextPdfDefaultFontMapper_BaseFontParameters_initWithNSString_(NSString *fontName) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfDefaultFontMapper_BaseFontParameters, initWithNSString_, fontName)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfDefaultFontMapper_BaseFontParameters)
