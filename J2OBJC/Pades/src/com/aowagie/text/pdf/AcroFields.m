//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/AcroFields.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/DocumentException.h"
#include "com/aowagie/text/Element.h"
#include "com/aowagie/text/ExceptionConverter.h"
#include "com/aowagie/text/Image.h"
#include "com/aowagie/text/Rectangle.h"
#include "com/aowagie/text/pdf/AcroFields.h"
#include "com/aowagie/text/pdf/BaseField.h"
#include "com/aowagie/text/pdf/BaseFont.h"
#include "com/aowagie/text/pdf/CMYKColor.h"
#include "com/aowagie/text/pdf/DocumentFont.h"
#include "com/aowagie/text/pdf/ExtendedColor.h"
#include "com/aowagie/text/pdf/FdfReader.h"
#include "com/aowagie/text/pdf/GrayColor.h"
#include "com/aowagie/text/pdf/PRIndirectReference.h"
#include "com/aowagie/text/pdf/PRStream.h"
#include "com/aowagie/text/pdf/PRTokeniser.h"
#include "com/aowagie/text/pdf/PdfAnnotation.h"
#include "com/aowagie/text/pdf/PdfAppearance.h"
#include "com/aowagie/text/pdf/PdfArray.h"
#include "com/aowagie/text/pdf/PdfBoolean.h"
#include "com/aowagie/text/pdf/PdfBorderDictionary.h"
#include "com/aowagie/text/pdf/PdfDate.h"
#include "com/aowagie/text/pdf/PdfDictionary.h"
#include "com/aowagie/text/pdf/PdfEncodings.h"
#include "com/aowagie/text/pdf/PdfFormField.h"
#include "com/aowagie/text/pdf/PdfIndirectReference.h"
#include "com/aowagie/text/pdf/PdfName.h"
#include "com/aowagie/text/pdf/PdfNumber.h"
#include "com/aowagie/text/pdf/PdfObject.h"
#include "com/aowagie/text/pdf/PdfPKCS7.h"
#include "com/aowagie/text/pdf/PdfReader.h"
#include "com/aowagie/text/pdf/PdfStamperImp.h"
#include "com/aowagie/text/pdf/PdfString.h"
#include "com/aowagie/text/pdf/PdfWriter.h"
#include "com/aowagie/text/pdf/PushbuttonField.h"
#include "com/aowagie/text/pdf/RandomAccessFileOrArray.h"
#include "com/aowagie/text/pdf/TextField.h"
#include "com/aowagie/text/pdf/XfaForm.h"
#include "com/aowagie/text/pdf/XfdfReader.h"
#include "com/aowagie/text/pdf/codec/ITextBase64.h"
#include "harmony/java/awt/Color.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "org/w3c/dom/Node.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/AcroFields must be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

@interface ComAowagieTextPdfAcroFields () {
 @public
  ComAowagieTextPdfPdfReader *reader_;
  ComAowagieTextPdfPdfWriter *writer_;
  JavaUtilHashMap *fields_;
  jint topFirst_;
  JavaUtilHashMap *sigNames_;
  jboolean append_;
  JavaUtilHashMap *extensionFonts_;
  ComAowagieTextPdfXfaForm *xfa_;
  /*!
   @brief Holds value of property generateAppearances.
   */
  jboolean generateAppearances_;
  JavaUtilHashMap *localFonts_;
  jfloat extraMarginLeft_;
  jfloat extraMarginTop_;
  JavaUtilArrayList *substitutionFonts_;
  /*!
   @brief Holds value of property totalRevisions.
   */
  jint totalRevisions_;
  /*!
   @brief Holds value of property fieldCache.
   @since 2.1.5	this used to be a HashMap
   */
  id<JavaUtilMap> fieldCache_;
}

/*!
 @brief Comprueba si una anotacion es defirma y tiene asignado su valor en un lugar
  no v&aacute;lido.
 @param targetAnnot Anotaci &oacute; n que se quiere comprobar.
 @return <code>true</code> si la anotacion no es de firma, si no tiene valor o
  si este esta en el sitio correcto; <code>false</code> en caso contrario.
 */
+ (jboolean)checkInvalidValuePositionWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)targetAnnot;

/*!
 @brief Obtiene la referencia del objeto padre del diccionario indicado.
 @param dict Diccionario del que tomar el padre.
 @return Referencia al elemento padre o <code>null</code> si no ten&iacute;a.
 */
+ (ComAowagieTextPdfPRIndirectReference *)getParentReferenceWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)dict;

- (IOSObjectArray *)getListOptionWithNSString:(NSString *)fieldName
                                      withInt:(jint)idx;

/*!
 @brief Gets the list of export option values from fields of type list or combo.
 If the field doesn't exist or the field type is not list or combo it will return 
 <CODE>null</CODE>.
 @param fieldName the field name
 @return the list of export option values from fields of type list or combo
 */
- (IOSObjectArray *)getListOptionExportWithNSString:(NSString *)fieldName;

- (ComAowagieTextPdfPdfAppearance *)getAppearanceWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)merged
                                                                       withNSString:(NSString *)text
                                                                       withNSString:(NSString *)fieldName;

+ (HarmonyJavaAwtColor *)getMKColorWithComAowagieTextPdfPdfArray:(ComAowagieTextPdfPdfArray *)ar;

+ (jint)removeRefFromArrayWithComAowagieTextPdfPdfArray:(ComAowagieTextPdfPdfArray *)array
                         withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)refo;

- (void)updateByteRangeWithComAowagieTextPdfPdfPKCS7:(ComAowagieTextPdfPdfPKCS7 *)pkcs7
                  withComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)v;

- (void)markUsedWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj;

/*!
 @brief Creates a new pushbutton from an existing field.If there are several pushbuttons with the same name
  only the first one is used.
 This pushbutton can be changed and be used to replace
  an existing one, with the same name or other name, as long is it is in the same document. To replace an existing pushbutton
  call <code>replacePushbuttonField(String,PdfFormField)</code>.
 @param field the field name that should be a pushbutton
 @return a new pushbutton or <CODE>null</CODE> if the field is not a pushbutton
 */
- (ComAowagieTextPdfPushbuttonField *)getNewPushbuttonFromFieldWithNSString:(NSString *)field;

/*!
 @brief Creates a new pushbutton from an existing field.This pushbutton can be changed and be used to replace
  an existing one, with the same name or other name, as long is it is in the same document.
 To replace an existing pushbutton
  call <code>replacePushbuttonField(String,PdfFormField,int)</code>.
 @param field the field name that should be a pushbutton
 @param order the field order in fields with same name
 @return a new pushbutton or <CODE>null</CODE> if the field is not a pushbutton
 @since 2.0.7
 */
- (ComAowagieTextPdfPushbuttonField *)getNewPushbuttonFromFieldWithNSString:(NSString *)field
                                                                    withInt:(jint)order;

/*!
 @brief Replaces the first field with a new pushbutton.The pushbutton can be created with 
 <code>getNewPushbuttonFromField(String)</code> from the same document or it can be a
  generic PdfFormField of the type pushbutton.
 @param field the field name
 @param button the  <CODE> PdfFormField </CODE>  representing the pushbutton
 @return <CODE>true</CODE> if the field was replaced, <CODE>false</CODE> if the field
  was not a pushbutton
 */
- (jboolean)replacePushbuttonFieldWithNSString:(NSString *)field
             withComAowagieTextPdfPdfFormField:(ComAowagieTextPdfPdfFormField *)button;

/*!
 @brief Replaces the designated field with a new pushbutton.The pushbutton can be created with 
 <code>getNewPushbuttonFromField(String,int)</code> from the same document or it can be a
  generic PdfFormField of the type pushbutton.
 @param field the field name
 @param button the  <CODE> PdfFormField </CODE>  representing the pushbutton
 @param order the field order in fields with same name
 @return <CODE>true</CODE> if the field was replaced, <CODE>false</CODE> if the field
  was not a pushbutton
 @since 2.0.7
 */
- (jboolean)replacePushbuttonFieldWithNSString:(NSString *)field
             withComAowagieTextPdfPdfFormField:(ComAowagieTextPdfPdfFormField *)button
                                       withInt:(jint)order;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfAcroFields, reader_, ComAowagieTextPdfPdfReader *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfAcroFields, writer_, ComAowagieTextPdfPdfWriter *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfAcroFields, fields_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfAcroFields, sigNames_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfAcroFields, extensionFonts_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfAcroFields, xfa_, ComAowagieTextPdfXfaForm *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfAcroFields, localFonts_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfAcroFields, substitutionFonts_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfAcroFields, fieldCache_, id<JavaUtilMap>)

inline JavaUtilHashMap *ComAowagieTextPdfAcroFields_get_stdFieldFontNames(void);
static JavaUtilHashMap *ComAowagieTextPdfAcroFields_stdFieldFontNames;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfAcroFields, stdFieldFontNames, JavaUtilHashMap *)

inline IOSObjectArray *ComAowagieTextPdfAcroFields_get_buttonRemove(void);
static IOSObjectArray *ComAowagieTextPdfAcroFields_buttonRemove;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfAcroFields, buttonRemove, IOSObjectArray *)

__attribute__((unused)) static jboolean ComAowagieTextPdfAcroFields_checkInvalidValuePositionWithComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfPdfDictionary *targetAnnot);

__attribute__((unused)) static ComAowagieTextPdfPRIndirectReference *ComAowagieTextPdfAcroFields_getParentReferenceWithComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfPdfDictionary *dict);

__attribute__((unused)) static IOSObjectArray *ComAowagieTextPdfAcroFields_getListOptionWithNSString_withInt_(ComAowagieTextPdfAcroFields *self, NSString *fieldName, jint idx);

__attribute__((unused)) static IOSObjectArray *ComAowagieTextPdfAcroFields_getListOptionExportWithNSString_(ComAowagieTextPdfAcroFields *self, NSString *fieldName);

__attribute__((unused)) static ComAowagieTextPdfPdfAppearance *ComAowagieTextPdfAcroFields_getAppearanceWithComAowagieTextPdfPdfDictionary_withNSString_withNSString_(ComAowagieTextPdfAcroFields *self, ComAowagieTextPdfPdfDictionary *merged, NSString *text, NSString *fieldName);

__attribute__((unused)) static HarmonyJavaAwtColor *ComAowagieTextPdfAcroFields_getMKColorWithComAowagieTextPdfPdfArray_(ComAowagieTextPdfPdfArray *ar);

__attribute__((unused)) static jint ComAowagieTextPdfAcroFields_removeRefFromArrayWithComAowagieTextPdfPdfArray_withComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfArray *array, ComAowagieTextPdfPdfObject *refo);

__attribute__((unused)) static void ComAowagieTextPdfAcroFields_updateByteRangeWithComAowagieTextPdfPdfPKCS7_withComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfAcroFields *self, ComAowagieTextPdfPdfPKCS7 *pkcs7, ComAowagieTextPdfPdfDictionary *v);

__attribute__((unused)) static void ComAowagieTextPdfAcroFields_markUsedWithComAowagieTextPdfPdfObject_(ComAowagieTextPdfAcroFields *self, ComAowagieTextPdfPdfObject *obj);

__attribute__((unused)) static ComAowagieTextPdfPushbuttonField *ComAowagieTextPdfAcroFields_getNewPushbuttonFromFieldWithNSString_(ComAowagieTextPdfAcroFields *self, NSString *field);

__attribute__((unused)) static ComAowagieTextPdfPushbuttonField *ComAowagieTextPdfAcroFields_getNewPushbuttonFromFieldWithNSString_withInt_(ComAowagieTextPdfAcroFields *self, NSString *field, jint order);

__attribute__((unused)) static jboolean ComAowagieTextPdfAcroFields_replacePushbuttonFieldWithNSString_withComAowagieTextPdfPdfFormField_(ComAowagieTextPdfAcroFields *self, NSString *field, ComAowagieTextPdfPdfFormField *button);

__attribute__((unused)) static jboolean ComAowagieTextPdfAcroFields_replacePushbuttonFieldWithNSString_withComAowagieTextPdfPdfFormField_withInt_(ComAowagieTextPdfAcroFields *self, NSString *field, ComAowagieTextPdfPdfFormField *button, jint order);

__attribute__((unused)) static IOSObjectArray *ComAowagieTextPdfAcroFields_Item__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *ComAowagieTextPdfAcroFields_Item__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *ComAowagieTextPdfAcroFields_Item__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *ComAowagieTextPdfAcroFields_Item__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *ComAowagieTextPdfAcroFields_Item__Annotations$4(void);

__attribute__((unused)) static IOSObjectArray *ComAowagieTextPdfAcroFields_Item__Annotations$5(void);

@interface ComAowagieTextPdfAcroFields_SorterComparator : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(id)o1
               withId:(id)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfAcroFields_SorterComparator)

__attribute__((unused)) static void ComAowagieTextPdfAcroFields_SorterComparator_init(ComAowagieTextPdfAcroFields_SorterComparator *self);

__attribute__((unused)) static ComAowagieTextPdfAcroFields_SorterComparator *new_ComAowagieTextPdfAcroFields_SorterComparator_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfAcroFields_SorterComparator *create_ComAowagieTextPdfAcroFields_SorterComparator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfAcroFields_SorterComparator)

@interface ComAowagieTextPdfAcroFields_RevisionStream : JavaIoInputStream {
 @public
  IOSByteArray *b_;
  ComAowagieTextPdfRandomAccessFileOrArray *raf_;
  jint length_;
  jint rangePosition_;
  jboolean closed_;
}

- (instancetype)initWithComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)raf
                                                         withInt:(jint)length;

- (jint)read;

- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfAcroFields_RevisionStream)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfAcroFields_RevisionStream, b_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfAcroFields_RevisionStream, raf_, ComAowagieTextPdfRandomAccessFileOrArray *)

__attribute__((unused)) static void ComAowagieTextPdfAcroFields_RevisionStream_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_(ComAowagieTextPdfAcroFields_RevisionStream *self, ComAowagieTextPdfRandomAccessFileOrArray *raf, jint length);

__attribute__((unused)) static ComAowagieTextPdfAcroFields_RevisionStream *new_ComAowagieTextPdfAcroFields_RevisionStream_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_(ComAowagieTextPdfRandomAccessFileOrArray *raf, jint length) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfAcroFields_RevisionStream *create_ComAowagieTextPdfAcroFields_RevisionStream_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_(ComAowagieTextPdfRandomAccessFileOrArray *raf, jint length);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfAcroFields_RevisionStream)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/AcroFields.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfAcroFields)


#line 77
@implementation ComAowagieTextPdfAcroFields


#line 140
- (instancetype)initWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader
                    withComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer {
  ComAowagieTextPdfAcroFields_initWithComAowagieTextPdfPdfReader_withComAowagieTextPdfPdfWriter_(self, reader, writer);
  return self;
}


#line 155
- (void)fill {
  self->fields_ = new_JavaUtilLinkedHashMap_init();
  ComAowagieTextPdfPdfDictionary *top = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk([((ComAowagieTextPdfPdfReader *) nil_chk(self->reader_)) getCatalog])) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ACROFORM)]), [ComAowagieTextPdfPdfDictionary class]);
  if (top == nil) {
    return;
  }
  ComAowagieTextPdfPdfArray *arrfds = (ComAowagieTextPdfPdfArray *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([top getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FIELDS)]), [ComAowagieTextPdfPdfArray class]);
  if (arrfds == nil || [arrfds size] == 0) {
    return;
  }
  for (jint k = 1; k <= [self->reader_ getNumberOfPages]; ++k) {
    ComAowagieTextPdfPdfDictionary *page = [self->reader_ getPageNReleaseWithInt:k];
    ComAowagieTextPdfPdfArray *annots = (ComAowagieTextPdfPdfArray *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(page)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ANNOTS)], page), [ComAowagieTextPdfPdfArray class]);
    if (annots == nil) {
      continue;
    }
    for (jint j = 0; j < [annots size]; ++j) {
      ComAowagieTextPdfPdfDictionary *annot = [annots getAsDictWithInt:j];
      if (annot == nil) {
        ComAowagieTextPdfPdfReader_releaseLastXrefPartialWithComAowagieTextPdfPdfObject_([annots getAsIndirectObjectWithInt:j]);
        continue;
      }
      
#line 180
      jboolean found = false;
      ComAowagieTextPdfPRIndirectReference *foundSignRef = (ComAowagieTextPdfPRIndirectReference *) cast_chk([annots getPdfObjectWithInt:j], [ComAowagieTextPdfPRIndirectReference class]);
      ComAowagieTextPdfPRIndirectReference *parentFoundSignRef = ComAowagieTextPdfAcroFields_getParentReferenceWithComAowagieTextPdfPdfDictionary_(annot);
      for (jint l = 0; l < [arrfds size] && !found; l++) {
        ComAowagieTextPdfPRIndirectReference *declaredSignRef = (ComAowagieTextPdfPRIndirectReference *) cast_chk([arrfds getPdfObjectWithInt:l], [ComAowagieTextPdfPRIndirectReference class]);
        if ([((ComAowagieTextPdfPRIndirectReference *) nil_chk(foundSignRef)) getNumber] == [((ComAowagieTextPdfPRIndirectReference *) nil_chk(declaredSignRef)) getNumber]) {
          found = true;
        }
        else
#line 187
        if (parentFoundSignRef != nil && [parentFoundSignRef getNumber] == [declaredSignRef getNumber]) {
          found = true;
        }
      }
      
#line 192
      if (!found) {
        ComAowagieTextPdfPdfReader_releaseLastXrefPartialWithComAowagieTextPdfPdfObject_([annots getAsIndirectObjectWithInt:j]);
        continue;
      }
      
#line 197
      if (![((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, WIDGET))) isEqual:[annot getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE)]]) {
        ComAowagieTextPdfPdfReader_releaseLastXrefPartialWithComAowagieTextPdfPdfObject_([annots getAsIndirectObjectWithInt:j]);
        continue;
      }
      
#line 204
      if (!ComAowagieTextPdfAcroFields_checkInvalidValuePositionWithComAowagieTextPdfPdfDictionary_(annot)) {
        ComAowagieTextPdfPdfReader_releaseLastXrefPartialWithComAowagieTextPdfPdfObject_([annots getAsIndirectObjectWithInt:j]);
        continue;
      }
      
#line 210
      ComAowagieTextPdfPdfDictionary *widget = annot;
      ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_init();
      [dic putAllWithComAowagieTextPdfPdfDictionary:annot];
      NSString *name = @"";
      ComAowagieTextPdfPdfDictionary *value = nil;
      ComAowagieTextPdfPdfObject *lastV = nil;
      while (annot != nil) {
        
#line 219
        if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, SIG))) isEqual:[annot getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FT)]] &&
#line 220
        [dic getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V)] != nil) {
          [dic removeWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V)];
        }
        
#line 225
        [dic mergeDifferentWithComAowagieTextPdfPdfDictionary:annot];
        ComAowagieTextPdfPdfString *t = [annot getAsStringWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, T)];
        if (t != nil) {
          name = JreStrcat("$C$", [t toUnicodeString], '.', name);
        }
        if (lastV == nil && [annot getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V)] != nil) {
          lastV = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([annot getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V)]);
        }
        if (value == nil && t != nil) {
          value = annot;
          if ([annot getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V)] == nil && lastV != nil) {
            [value putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V) withComAowagieTextPdfPdfObject:lastV];
          }
        }
        annot = [annot getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PARENT)];
      }
      if ([name java_length] > 0) {
        name = [name java_substring:0 endIndex:[name java_length] - 1];
      }
      ComAowagieTextPdfAcroFields_Item *item = [((JavaUtilHashMap *) nil_chk(self->fields_)) getWithId:name];
      if (item == nil) {
        item = new_ComAowagieTextPdfAcroFields_Item_init();
        (void) [((JavaUtilHashMap *) nil_chk(self->fields_)) putWithId:name withId:item];
      }
      if (value == nil) {
        [item addValueWithComAowagieTextPdfPdfDictionary:widget];
      }
      else {
        
#line 252
        [item addValueWithComAowagieTextPdfPdfDictionary:value];
      }
      [item addWidgetWithComAowagieTextPdfPdfDictionary:widget];
      [item addWidgetRefWithComAowagieTextPdfPdfIndirectReference:[annots getAsIndirectObjectWithInt:j]];
      if (top != nil) {
        [dic mergeDifferentWithComAowagieTextPdfPdfDictionary:top];
      }
      [item addMergedWithComAowagieTextPdfPdfDictionary:dic];
      [item addPageWithInt:k];
      [item addTabOrderWithInt:j];
    }
  }
  
#line 266
  ComAowagieTextPdfPdfNumber *sigFlags = top != nil ? [top getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SIGFLAGS)] : nil;
  if (sigFlags == nil || ([sigFlags intValue] & 1) != 1) {
    return;
  }
  for (jint j = 0; j < [arrfds size]; ++j) {
    ComAowagieTextPdfPdfDictionary *annot = [arrfds getAsDictWithInt:j];
    if (annot == nil) {
      ComAowagieTextPdfPdfReader_releaseLastXrefPartialWithComAowagieTextPdfPdfObject_([arrfds getAsIndirectObjectWithInt:j]);
      continue;
    }
    if (![((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, WIDGET))) isEqual:[annot getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE)]]) {
      ComAowagieTextPdfPdfReader_releaseLastXrefPartialWithComAowagieTextPdfPdfObject_([arrfds getAsIndirectObjectWithInt:j]);
      continue;
    }
    ComAowagieTextPdfPdfArray *kids = (ComAowagieTextPdfPdfArray *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([annot getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, KIDS)]), [ComAowagieTextPdfPdfArray class]);
    if (kids != nil) {
      continue;
    }
    ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_init();
    [dic putAllWithComAowagieTextPdfPdfDictionary:annot];
    ComAowagieTextPdfPdfString *t = [annot getAsStringWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, T)];
    if (t == nil) {
      continue;
    }
    NSString *name = [t toUnicodeString];
    if ([((JavaUtilHashMap *) nil_chk(self->fields_)) containsKeyWithId:name]) {
      continue;
    }
    ComAowagieTextPdfAcroFields_Item *item = new_ComAowagieTextPdfAcroFields_Item_init();
    (void) [((JavaUtilHashMap *) nil_chk(self->fields_)) putWithId:name withId:item];
    [item addValueWithComAowagieTextPdfPdfDictionary:dic];
    [item addWidgetWithComAowagieTextPdfPdfDictionary:dic];
    [item addWidgetRefWithComAowagieTextPdfPdfIndirectReference:[arrfds getAsIndirectObjectWithInt:j]];
    [item addMergedWithComAowagieTextPdfPdfDictionary:dic];
    [item addPageWithInt:-1];
    [item addTabOrderWithInt:-1];
  }
}

+ (jboolean)checkInvalidValuePositionWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)targetAnnot {
  return ComAowagieTextPdfAcroFields_checkInvalidValuePositionWithComAowagieTextPdfPdfDictionary_(targetAnnot);
}


#line 349
+ (ComAowagieTextPdfPRIndirectReference *)getParentReferenceWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)dict {
  return ComAowagieTextPdfAcroFields_getParentReferenceWithComAowagieTextPdfPdfDictionary_(dict);
}


#line 366
- (IOSObjectArray *)getListOptionWithNSString:(NSString *)fieldName
                                      withInt:(jint)idx {
  return ComAowagieTextPdfAcroFields_getListOptionWithNSString_withInt_(self, fieldName, idx);
}


#line 403
- (IOSObjectArray *)getListOptionExportWithNSString:(NSString *)fieldName {
  return ComAowagieTextPdfAcroFields_getListOptionExportWithNSString_(self, fieldName);
}


#line 423
- (jint)getFieldTypeWithNSString:(NSString *)fieldName {
  ComAowagieTextPdfAcroFields_Item *fd = [self getFieldItemWithNSString:fieldName];
  if (fd == nil) {
    return ComAowagieTextPdfAcroFields_FIELD_TYPE_NONE;
  }
  ComAowagieTextPdfPdfDictionary *merged = [fd getMergedWithInt:0];
  ComAowagieTextPdfPdfName *type = [((ComAowagieTextPdfPdfDictionary *) nil_chk(merged)) getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FT)];
  if (type == nil) {
    return ComAowagieTextPdfAcroFields_FIELD_TYPE_NONE;
  }
  jint ff = 0;
  ComAowagieTextPdfPdfNumber *ffo = [merged getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FF)];
  if (ffo != nil) {
    ff = [ffo intValue];
  }
  if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, BTN))) isEqual:type]) {
    if ((ff & ComAowagieTextPdfPdfFormField_FF_PUSHBUTTON) != 0) {
      return ComAowagieTextPdfAcroFields_FIELD_TYPE_PUSHBUTTON;
    }
    if ((ff & ComAowagieTextPdfPdfFormField_FF_RADIO) != 0) {
      return ComAowagieTextPdfAcroFields_FIELD_TYPE_RADIOBUTTON;
    }
    return ComAowagieTextPdfAcroFields_FIELD_TYPE_CHECKBOX;
  }
  else if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, TX))) isEqual:type]) {
    return ComAowagieTextPdfAcroFields_FIELD_TYPE_TEXT;
  }
  else if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, CH))) isEqual:type]) {
    if ((ff & ComAowagieTextPdfPdfFormField_FF_COMBO) != 0) {
      return ComAowagieTextPdfAcroFields_FIELD_TYPE_COMBO;
    }
    return ComAowagieTextPdfAcroFields_FIELD_TYPE_LIST;
  }
  else if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, SIG))) isEqual:type]) {
    return ComAowagieTextPdfAcroFields_FIELD_TYPE_SIGNATURE;
  }
  return ComAowagieTextPdfAcroFields_FIELD_TYPE_NONE;
}


#line 466
+ (IOSObjectArray *)splitDAelementsWithNSString:(NSString *)da {
  return ComAowagieTextPdfAcroFields_splitDAelementsWithNSString_(da);
}


#line 520
- (void)decodeGenericDictionaryWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)merged
                                   withComAowagieTextPdfBaseField:(ComAowagieTextPdfBaseField *)tx {
  
#line 521
  jint flags = 0;
  
#line 523
  ComAowagieTextPdfPdfString *da = [((ComAowagieTextPdfPdfDictionary *) nil_chk(merged)) getAsStringWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DA)];
  if (da != nil) {
    IOSObjectArray *dab = ComAowagieTextPdfAcroFields_splitDAelementsWithNSString_([da toUnicodeString]);
    if (IOSObjectArray_Get(nil_chk(dab), ComAowagieTextPdfAcroFields_DA_SIZE) != nil) {
      [((ComAowagieTextPdfBaseField *) nil_chk(tx)) setFontSizeWithFloat:[((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(dab, ComAowagieTextPdfAcroFields_DA_SIZE), [JavaLangFloat class])))) floatValue]];
    }
    if (IOSObjectArray_Get(dab, ComAowagieTextPdfAcroFields_DA_COLOR) != nil) {
      [((ComAowagieTextPdfBaseField *) nil_chk(tx)) setTextColorWithHarmonyJavaAwtColor:(HarmonyJavaAwtColor *) cast_chk(IOSObjectArray_Get(dab, ComAowagieTextPdfAcroFields_DA_COLOR), [HarmonyJavaAwtColor class])];
    }
    if (IOSObjectArray_Get(dab, ComAowagieTextPdfAcroFields_DA_FONT) != nil) {
      ComAowagieTextPdfPdfDictionary *font = [merged getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DR)];
      if (font != nil) {
        font = [font getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONT)];
        if (font != nil) {
          ComAowagieTextPdfPdfObject *po = [font getWithComAowagieTextPdfPdfName:new_ComAowagieTextPdfPdfName_initWithNSString_((NSString *) cast_chk(IOSObjectArray_Get(dab, ComAowagieTextPdfAcroFields_DA_FONT), [NSString class]))];
          if (po != nil && [po type] == ComAowagieTextPdfPdfObject_INDIRECT) {
            ComAowagieTextPdfPRIndirectReference *por = (ComAowagieTextPdfPRIndirectReference *) cast_chk(po, [ComAowagieTextPdfPRIndirectReference class]);
            ComAowagieTextPdfBaseFont *bp = new_ComAowagieTextPdfDocumentFont_initWithComAowagieTextPdfPRIndirectReference_((ComAowagieTextPdfPRIndirectReference *) cast_chk(po, [ComAowagieTextPdfPRIndirectReference class]));
            [((ComAowagieTextPdfBaseField *) nil_chk(tx)) setFontWithComAowagieTextPdfBaseFont:bp];
            JavaLangInteger *porkey = new_JavaLangInteger_initWithInt_([por getNumber]);
            ComAowagieTextPdfBaseFont *porf = [((JavaUtilHashMap *) nil_chk(self->extensionFonts_)) getWithId:porkey];
            if (porf == nil) {
              if (![self->extensionFonts_ containsKeyWithId:porkey]) {
                ComAowagieTextPdfPdfDictionary *fo = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_(po), [ComAowagieTextPdfPdfDictionary class]);
                ComAowagieTextPdfPdfDictionary *fd = [((ComAowagieTextPdfPdfDictionary *) nil_chk(fo)) getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTDESCRIPTOR)];
                if (fd != nil) {
                  ComAowagieTextPdfPRStream *prs = (ComAowagieTextPdfPRStream *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_([fd getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTFILE2)]), [ComAowagieTextPdfPRStream class]);
                  if (prs == nil) {
                    prs = (ComAowagieTextPdfPRStream *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_([fd getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTFILE3)]), [ComAowagieTextPdfPRStream class]);
                  }
                  if (prs == nil) {
                    (void) [self->extensionFonts_ putWithId:porkey withId:nil];
                  }
                  else {
                    @try {
                      porf = ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_withByteArray_withByteArray_(@"font.ttf", ComAowagieTextPdfBaseFont_IDENTITY_H, true, false, ComAowagieTextPdfPdfReader_getStreamBytesWithComAowagieTextPdfPRStream_(prs), nil);
                    }
                    @catch (JavaLangException *e) {
                    }
                    (void) [self->extensionFonts_ putWithId:porkey withId:porf];
                  }
                }
              }
            }
            if ([tx isKindOfClass:[ComAowagieTextPdfTextField class]]) {
              [((ComAowagieTextPdfTextField *) tx) setExtensionFontWithComAowagieTextPdfBaseFont:porf];
            }
          }
          else {
            ComAowagieTextPdfBaseFont *bf = (ComAowagieTextPdfBaseFont *) cast_chk([((JavaUtilHashMap *) nil_chk(self->localFonts_)) getWithId:IOSObjectArray_Get(dab, ComAowagieTextPdfAcroFields_DA_FONT)], [ComAowagieTextPdfBaseFont class]);
            if (bf == nil) {
              IOSObjectArray *fn = [((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfAcroFields_stdFieldFontNames)) getWithId:IOSObjectArray_Get(dab, ComAowagieTextPdfAcroFields_DA_FONT)];
              if (fn != nil) {
                @try {
                  NSString *enc = @"winansi";
                  if (fn->size_ > 1) {
                    enc = IOSObjectArray_Get(fn, 1);
                  }
                  bf = ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_(IOSObjectArray_Get(fn, 0), enc, false);
                  [((ComAowagieTextPdfBaseField *) nil_chk(tx)) setFontWithComAowagieTextPdfBaseFont:bf];
                }
                @catch (JavaLangException *e) {
                }
              }
            }
            else {
              [((ComAowagieTextPdfBaseField *) nil_chk(tx)) setFontWithComAowagieTextPdfBaseFont:bf];
            }
          }
        }
      }
    }
  }
  
#line 597
  ComAowagieTextPdfPdfDictionary *mk = [merged getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, MK)];
  if (mk != nil) {
    ComAowagieTextPdfPdfArray *ar = [mk getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BC)];
    HarmonyJavaAwtColor *border = ComAowagieTextPdfAcroFields_getMKColorWithComAowagieTextPdfPdfArray_(ar);
    [((ComAowagieTextPdfBaseField *) nil_chk(tx)) setBorderColorWithHarmonyJavaAwtColor:border];
    if (border != nil) {
      [tx setBorderWidthWithFloat:1];
    }
    ar = [mk getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BG)];
    [tx setBackgroundColorWithHarmonyJavaAwtColor:ComAowagieTextPdfAcroFields_getMKColorWithComAowagieTextPdfPdfArray_(ar)];
    ComAowagieTextPdfPdfNumber *rotation = [mk getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, R)];
    if (rotation != nil) {
      [tx setRotationWithInt:[rotation intValue]];
    }
  }
  
#line 613
  ComAowagieTextPdfPdfNumber *nfl = [merged getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, F)];
  flags = 0;
  [((ComAowagieTextPdfBaseField *) nil_chk(tx)) setVisibilityWithInt:ComAowagieTextPdfBaseField_VISIBLE_BUT_DOES_NOT_PRINT];
  if (nfl != nil) {
    flags = [nfl intValue];
    if ((flags & ComAowagieTextPdfPdfAnnotation_FLAGS_PRINT) != 0 && (flags & ComAowagieTextPdfPdfAnnotation_FLAGS_HIDDEN) != 0) {
      [tx setVisibilityWithInt:ComAowagieTextPdfBaseField_HIDDEN];
    }
    else
#line 620
    if ((flags & ComAowagieTextPdfPdfAnnotation_FLAGS_PRINT) != 0 && (flags & ComAowagieTextPdfPdfAnnotation_FLAGS_NOVIEW) != 0) {
      [tx setVisibilityWithInt:ComAowagieTextPdfBaseField_HIDDEN_BUT_PRINTABLE];
    }
    else
#line 622
    if ((flags & ComAowagieTextPdfPdfAnnotation_FLAGS_PRINT) != 0) {
      [tx setVisibilityWithInt:ComAowagieTextPdfBaseField_VISIBLE];
    }
  }
  
#line 627
  nfl = [merged getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FF)];
  flags = 0;
  if (nfl != nil) {
    flags = [nfl intValue];
  }
  [tx setOptionsWithInt:flags];
  if ((flags & ComAowagieTextPdfPdfFormField_FF_COMB) != 0) {
    ComAowagieTextPdfPdfNumber *maxLen = [merged getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, MAXLEN)];
    jint len = 0;
    if (maxLen != nil) {
      len = [maxLen intValue];
    }
    [tx setMaxCharacterLengthWithInt:len];
  }
  
#line 642
  nfl = [merged getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, Q)];
  if (nfl != nil) {
    if ([nfl intValue] == ComAowagieTextPdfPdfFormField_Q_CENTER) {
      [tx setAlignmentWithInt:ComAowagieTextElement_ALIGN_CENTER];
    }
    else
#line 646
    if ([nfl intValue] == ComAowagieTextPdfPdfFormField_Q_RIGHT) {
      [tx setAlignmentWithInt:ComAowagieTextElement_ALIGN_RIGHT];
    }
  }
  
#line 651
  ComAowagieTextPdfPdfDictionary *bs = [merged getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BS)];
  if (bs != nil) {
    ComAowagieTextPdfPdfNumber *w = [bs getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, W)];
    if (w != nil) {
      [tx setBorderWidthWithFloat:[w floatValue]];
    }
    ComAowagieTextPdfPdfName *s = [bs getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, S)];
    if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, D))) isEqual:s]) {
      [tx setBorderStyleWithInt:ComAowagieTextPdfPdfBorderDictionary_STYLE_DASHED];
    }
    else
#line 660
    if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, B))) isEqual:s]) {
      [tx setBorderStyleWithInt:ComAowagieTextPdfPdfBorderDictionary_STYLE_BEVELED];
    }
    else
#line 662
    if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, I))) isEqual:s]) {
      [tx setBorderStyleWithInt:ComAowagieTextPdfPdfBorderDictionary_STYLE_INSET];
    }
    else
#line 664
    if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, U))) isEqual:s]) {
      [tx setBorderStyleWithInt:ComAowagieTextPdfPdfBorderDictionary_STYLE_UNDERLINE];
    }
  }
  else {
    ComAowagieTextPdfPdfArray *bd = [merged getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BORDER)];
    if (bd != nil) {
      if ([bd size] >= 3) {
        [tx setBorderWidthWithFloat:[((ComAowagieTextPdfPdfNumber *) nil_chk([bd getAsNumberWithInt:2])) floatValue]];
      }
      if ([bd size] >= 4) {
        [tx setBorderStyleWithInt:ComAowagieTextPdfPdfBorderDictionary_STYLE_DASHED];
      }
    }
  }
}


#line 681
- (ComAowagieTextPdfPdfAppearance *)getAppearanceWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)merged
                                                                       withNSString:(NSString *)text
                                                                       withNSString:(NSString *)fieldName {
  return ComAowagieTextPdfAcroFields_getAppearanceWithComAowagieTextPdfPdfDictionary_withNSString_withNSString_(self, merged, text, fieldName);
}


#line 763
+ (HarmonyJavaAwtColor *)getMKColorWithComAowagieTextPdfPdfArray:(ComAowagieTextPdfPdfArray *)ar {
  return ComAowagieTextPdfAcroFields_getMKColorWithComAowagieTextPdfPdfArray_(ar);
}


#line 787
- (void)setFieldsWithComAowagieTextPdfFdfReader:(ComAowagieTextPdfFdfReader *)fdf {
  JavaUtilHashMap *fd = [((ComAowagieTextPdfFdfReader *) nil_chk(fdf)) getFields];
  for (id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(fd)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    NSString *f = (NSString *) cast_chk([i next], [NSString class]);
    NSString *v = [fdf getFieldValueWithNSString:f];
    if (v != nil) {
      [self setFieldWithNSString:f withNSString:v];
    }
  }
}


#line 805
- (void)setFieldsWithComAowagieTextPdfXfdfReader:(ComAowagieTextPdfXfdfReader *)xfdf {
  JavaUtilHashMap *fd = [((ComAowagieTextPdfXfdfReader *) nil_chk(xfdf)) getFields];
  for (id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(fd)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    NSString *f = (NSString *) cast_chk([i next], [NSString class]);
    NSString *v = [xfdf getFieldValueWithNSString:f];
    if (v != nil) {
      [self setFieldWithNSString:f withNSString:v];
    }
    id<JavaUtilList> l = [xfdf getListValuesWithNSString:f];
    if (l != nil) {
      [self setListSelectionWithNSString:v withNSStringArray:(IOSObjectArray *) cast_check([l toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[l size] type:NSString_class_()]], IOSClass_arrayType(NSString_class_(), 1))];
    }
  }
}


#line 832
- (jboolean)setFieldWithNSString:(NSString *)name
                    withNSString:(NSString *)value {
  
#line 833
  return [self setFieldWithNSString:name withNSString:value withNSString:nil];
}


#line 851
- (jboolean)setFieldWithNSString:(NSString *)name
                    withNSString:(NSString *)value
                    withNSString:(NSString *)display {
  
#line 852
  if (self->writer_ == nil) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(@"This AcroFields instance is read-only.");
  }
  if ([((ComAowagieTextPdfXfaForm *) nil_chk(self->xfa_)) isXfaPresent]) {
    name = [((ComAowagieTextPdfXfaForm *) nil_chk(self->xfa_)) findFieldNameWithNSString:name withComAowagieTextPdfAcroFields:self];
    if (name == nil) {
      return false;
    }
    NSString *shortName = ComAowagieTextPdfXfaForm_Xml2Som_getShortNameWithNSString_(name);
    id<OrgW3cDomNode> xn = [((ComAowagieTextPdfXfaForm *) nil_chk(self->xfa_)) findDatasetsNodeWithNSString:shortName];
    if (xn == nil) {
      xn = [((ComAowagieTextPdfXfaForm_Xml2SomDatasets *) nil_chk([((ComAowagieTextPdfXfaForm *) nil_chk(self->xfa_)) getDatasetsSom])) insertNodeWithOrgW3cDomNode:[((ComAowagieTextPdfXfaForm *) nil_chk(self->xfa_)) getDatasetsNode] withNSString:shortName];
    }
    [((ComAowagieTextPdfXfaForm *) nil_chk(self->xfa_)) setNodeTextWithOrgW3cDomNode:xn withNSString:value];
  }
  ComAowagieTextPdfAcroFields_Item *item = [((JavaUtilHashMap *) nil_chk(self->fields_)) getWithId:name];
  if (item == nil) {
    return false;
  }
  ComAowagieTextPdfPdfDictionary *merged = [item getMergedWithInt:0];
  ComAowagieTextPdfPdfName *type = [((ComAowagieTextPdfPdfDictionary *) nil_chk(merged)) getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FT)];
  if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, TX))) isEqual:type]) {
    ComAowagieTextPdfPdfNumber *maxLen = [merged getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, MAXLEN)];
    jint len = 0;
    if (maxLen != nil) {
      len = [maxLen intValue];
    }
    if (len > 0) {
      value = [((NSString *) nil_chk(value)) java_substring:0 endIndex:JavaLangMath_minWithInt_withInt_(len, [value java_length])];
    }
  }
  if (display == nil) {
    display = value;
  }
  if ([JreLoadStatic(ComAowagieTextPdfPdfName, TX) isEqual:type] || [((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, CH))) isEqual:type]) {
    ComAowagieTextPdfPdfString *v = new_ComAowagieTextPdfPdfString_initWithNSString_withNSString_(value, ComAowagieTextPdfPdfObject_TEXT_UNICODE);
    for (jint idx = 0; idx < [item size]; ++idx) {
      ComAowagieTextPdfPdfDictionary *valueDic = [item getValueWithInt:idx];
      [((ComAowagieTextPdfPdfDictionary *) nil_chk(valueDic)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V) withComAowagieTextPdfPdfObject:v];
      [valueDic removeWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, I)];
      ComAowagieTextPdfAcroFields_markUsedWithComAowagieTextPdfPdfObject_(self, valueDic);
      merged = [item getMergedWithInt:idx];
      [((ComAowagieTextPdfPdfDictionary *) nil_chk(merged)) removeWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, I)];
      [merged putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V) withComAowagieTextPdfPdfObject:v];
      ComAowagieTextPdfPdfDictionary *widget = [item getWidgetWithInt:idx];
      if (self->generateAppearances_) {
        ComAowagieTextPdfPdfAppearance *app = ComAowagieTextPdfAcroFields_getAppearanceWithComAowagieTextPdfPdfDictionary_withNSString_withNSString_(self, merged, display, name);
        if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, CH))) isEqual:type]) {
          ComAowagieTextPdfPdfNumber *n = new_ComAowagieTextPdfPdfNumber_initWithInt_(self->topFirst_);
          [((ComAowagieTextPdfPdfDictionary *) nil_chk(widget)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TI) withComAowagieTextPdfPdfObject:n];
          [merged putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TI) withComAowagieTextPdfPdfObject:n];
        }
        ComAowagieTextPdfPdfDictionary *appDic = [((ComAowagieTextPdfPdfDictionary *) nil_chk(widget)) getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, AP)];
        if (appDic == nil) {
          appDic = new_ComAowagieTextPdfPdfDictionary_init();
          [widget putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, AP) withComAowagieTextPdfPdfObject:appDic];
          [merged putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, AP) withComAowagieTextPdfPdfObject:appDic];
        }
        [appDic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, N) withComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfAppearance *) nil_chk(app)) getIndirectReference]];
        [self->writer_ releaseTemplateWithComAowagieTextPdfPdfTemplate:app];
      }
      else {
        [((ComAowagieTextPdfPdfDictionary *) nil_chk(widget)) removeWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, AP)];
        [merged removeWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, AP)];
      }
      ComAowagieTextPdfAcroFields_markUsedWithComAowagieTextPdfPdfObject_(self, widget);
    }
    return true;
  }
  else if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, BTN))) isEqual:type]) {
    ComAowagieTextPdfPdfNumber *ff = [((ComAowagieTextPdfPdfDictionary *) nil_chk([item getMergedWithInt:0])) getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FF)];
    jint flags = 0;
    if (ff != nil) {
      flags = [ff intValue];
    }
    if ((flags & ComAowagieTextPdfPdfFormField_FF_PUSHBUTTON) != 0) {
      
#line 929
      ComAowagieTextImage *img;
      @try {
        img = ComAowagieTextImage_getInstanceWithByteArray_(ComAowagieTextPdfCodecITextBase64_decodeWithNSString_(value));
      }
      @catch (JavaLangException *e) {
        return false;
      }
      ComAowagieTextPdfPushbuttonField *pb = ComAowagieTextPdfAcroFields_getNewPushbuttonFromFieldWithNSString_(self, name);
      [((ComAowagieTextPdfPushbuttonField *) nil_chk(pb)) setImageWithComAowagieTextImage:img];
      ComAowagieTextPdfAcroFields_replacePushbuttonFieldWithNSString_withComAowagieTextPdfPdfFormField_(self, name, [pb getField]);
      return true;
    }
    ComAowagieTextPdfPdfName *v = new_ComAowagieTextPdfPdfName_initWithNSString_(value);
    JavaUtilArrayList *lopt = new_JavaUtilArrayList_init();
    ComAowagieTextPdfPdfArray *opts = [((ComAowagieTextPdfPdfDictionary *) nil_chk([item getValueWithInt:0])) getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, OPT)];
    if (opts != nil) {
      for (jint k = 0; k < [opts size]; ++k) {
        ComAowagieTextPdfPdfString *valStr = [opts getAsStringWithInt:k];
        if (valStr != nil) {
          [lopt addWithId:[valStr toUnicodeString]];
        }
        else {
          
#line 950
          [lopt addWithId:nil];
        }
      }
    }
    jint vidx = [lopt indexOfWithId:value];
    ComAowagieTextPdfPdfName *valt = nil;
    ComAowagieTextPdfPdfName *vt;
    if (vidx >= 0) {
      vt = valt = new_ComAowagieTextPdfPdfName_initWithNSString_(NSString_java_valueOfInt_(vidx));
    }
    else {
      
#line 960
      vt = v;
    }
    for (jint idx = 0; idx < [item size]; ++idx) {
      merged = [item getMergedWithInt:idx];
      ComAowagieTextPdfPdfDictionary *widget = [item getWidgetWithInt:idx];
      ComAowagieTextPdfPdfDictionary *valDict = [item getValueWithInt:idx];
      ComAowagieTextPdfAcroFields_markUsedWithComAowagieTextPdfPdfObject_(self, [item getValueWithInt:idx]);
      if (valt != nil) {
        ComAowagieTextPdfPdfString *ps = new_ComAowagieTextPdfPdfString_initWithNSString_withNSString_(value, ComAowagieTextPdfPdfObject_TEXT_UNICODE);
        [((ComAowagieTextPdfPdfDictionary *) nil_chk(valDict)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V) withComAowagieTextPdfPdfObject:ps];
        [((ComAowagieTextPdfPdfDictionary *) nil_chk(merged)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V) withComAowagieTextPdfPdfObject:ps];
      }
      else {
        [((ComAowagieTextPdfPdfDictionary *) nil_chk(valDict)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V) withComAowagieTextPdfPdfObject:v];
        [((ComAowagieTextPdfPdfDictionary *) nil_chk(merged)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V) withComAowagieTextPdfPdfObject:v];
      }
      ComAowagieTextPdfAcroFields_markUsedWithComAowagieTextPdfPdfObject_(self, widget);
      if (ComAowagieTextPdfAcroFields_isInAPWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfName_(widget, vt)) {
        [merged putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, AS) withComAowagieTextPdfPdfObject:vt];
        [((ComAowagieTextPdfPdfDictionary *) nil_chk(widget)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, AS) withComAowagieTextPdfPdfObject:vt];
      }
      else {
        [merged putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, AS) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, Off)];
        [((ComAowagieTextPdfPdfDictionary *) nil_chk(widget)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, AS) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, Off)];
      }
    }
    return true;
  }
  return false;
}


#line 1000
- (jboolean)setListSelectionWithNSString:(NSString *)name
                       withNSStringArray:(IOSObjectArray *)value {
  
#line 1001
  ComAowagieTextPdfAcroFields_Item *item = [self getFieldItemWithNSString:name];
  if (item == nil) {
    return false;
  }
  ComAowagieTextPdfPdfName *type = [((ComAowagieTextPdfPdfDictionary *) nil_chk([item getMergedWithInt:0])) getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FT)];
  if (![((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, CH))) isEqual:type]) {
    return false;
  }
  IOSObjectArray *options = ComAowagieTextPdfAcroFields_getListOptionExportWithNSString_(self, name);
  ComAowagieTextPdfPdfArray *array = new_ComAowagieTextPdfPdfArray_init();
  {
    IOSObjectArray *a__ =
#line 1011
    value;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *element = *b__++;
      
#line 1012
      for (jint j = 0; j < ((IOSObjectArray *) nil_chk(options))->size_; j++) {
        if ([((NSString *) nil_chk(IOSObjectArray_Get(options, j))) isEqual:element]) {
          [array addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(j)];
        }
      }
    }
  }
  
#line 1018
  [item writeToAllWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, I) withComAowagieTextPdfPdfObject:array withInt:ComAowagieTextPdfAcroFields_Item_WRITE_MERGED | ComAowagieTextPdfAcroFields_Item_WRITE_VALUE];
  [item writeToAllWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V) withComAowagieTextPdfPdfObject:nil withInt:ComAowagieTextPdfAcroFields_Item_WRITE_MERGED | ComAowagieTextPdfAcroFields_Item_WRITE_VALUE];
  [item writeToAllWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, AP) withComAowagieTextPdfPdfObject:nil withInt:ComAowagieTextPdfAcroFields_Item_WRITE_MERGED | ComAowagieTextPdfAcroFields_Item_WRITE_WIDGET];
  [item markUsedWithComAowagieTextPdfAcroFields:self withInt:ComAowagieTextPdfAcroFields_Item_WRITE_VALUE | ComAowagieTextPdfAcroFields_Item_WRITE_WIDGET];
  return true;
}


#line 1025
+ (jboolean)isInAPWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)dic
                        withComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)check {
  return ComAowagieTextPdfAcroFields_isInAPWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfName_(dic, check);
}


#line 1040
- (JavaUtilHashMap *)getFields {
  return self->fields_;
}


#line 1051
- (ComAowagieTextPdfAcroFields_Item *)getFieldItemWithNSString:(NSString *)name {
  if ([((ComAowagieTextPdfXfaForm *) nil_chk(self->xfa_)) isXfaPresent]) {
    name = [((ComAowagieTextPdfXfaForm *) nil_chk(self->xfa_)) findFieldNameWithNSString:name withComAowagieTextPdfAcroFields:self];
    if (name == nil) {
      return nil;
    }
  }
  return [((JavaUtilHashMap *) nil_chk(self->fields_)) getWithId:name];
}


#line 1067
- (NSString *)getTranslatedFieldNameWithNSString:(NSString *)name {
  if ([((ComAowagieTextPdfXfaForm *) nil_chk(self->xfa_)) isXfaPresent]) {
    NSString *namex = [((ComAowagieTextPdfXfaForm *) nil_chk(self->xfa_)) findFieldNameWithNSString:name withComAowagieTextPdfAcroFields:self];
    if (namex != nil) {
      name = namex;
    }
  }
  return name;
}


#line 1085
- (IOSFloatArray *)getFieldPositionsWithNSString:(NSString *)name {
  ComAowagieTextPdfAcroFields_Item *item = [self getFieldItemWithNSString:name];
  if (item == nil) {
    return nil;
  }
  IOSFloatArray *ret = [IOSFloatArray newArrayWithLength:[item size] * 5];
  jint ptr = 0;
  for (jint k = 0; k < [item size]; ++k) {
    @try {
      ComAowagieTextPdfPdfDictionary *wd = [item getWidgetWithInt:k];
      ComAowagieTextPdfPdfArray *rect = [((ComAowagieTextPdfPdfDictionary *) nil_chk(wd)) getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, RECT)];
      if (rect == nil) {
        continue;
      }
      ComAowagieTextRectangle *r = ComAowagieTextPdfPdfReader_getNormalizedRectangleWithComAowagieTextPdfPdfArray_(rect);
      jint page = [((JavaLangInteger *) nil_chk([item getPageWithInt:k])) intValue];
      jint rotation = [((ComAowagieTextPdfPdfReader *) nil_chk(self->reader_)) getPageRotationWithInt:page];
      *IOSFloatArray_GetRef(ret, ptr++) = page;
      if (rotation != 0) {
        ComAowagieTextRectangle *pageSize = [self->reader_ getPageSizeWithInt:page];
        switch (rotation) {
          case 270:
          r = new_ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(
#line 1108
          [((ComAowagieTextRectangle *) nil_chk(pageSize)) getTop] - [((ComAowagieTextRectangle *) nil_chk(r)) getBottom],
#line 1109
          [r getLeft],
#line 1110
          [pageSize getTop] - [r getTop],
#line 1111
          [r getRight]);
          break;
          case 180:
          r = new_ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(
#line 1115
          [((ComAowagieTextRectangle *) nil_chk(pageSize)) getRight] - [((ComAowagieTextRectangle *) nil_chk(r)) getLeft],
#line 1116
          [pageSize getTop] - [r getBottom],
#line 1117
          [pageSize getRight] - [r getRight],
#line 1118
          [pageSize getTop] - [r getTop]);
          break;
          case 90:
          r = new_ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(
#line 1122
          [((ComAowagieTextRectangle *) nil_chk(r)) getBottom],
#line 1123
          [((ComAowagieTextRectangle *) nil_chk(pageSize)) getRight] - [r getLeft],
#line 1124
          [r getTop],
#line 1125
          [pageSize getRight] - [r getRight]);
          break;
        }
        [((ComAowagieTextRectangle *) nil_chk(r)) normalize];
      }
      *IOSFloatArray_GetRef(ret, ptr++) = [((ComAowagieTextRectangle *) nil_chk(r)) getLeft];
      *IOSFloatArray_GetRef(ret, ptr++) = [r getBottom];
      *IOSFloatArray_GetRef(ret, ptr++) = [r getRight];
      *IOSFloatArray_GetRef(ret, ptr++) = [r getTop];
    }
    @catch (JavaLangException *e) {
    }
  }
  
#line 1139
  if (ptr < ret->size_) {
    IOSFloatArray *ret2 = [IOSFloatArray newArrayWithLength:ptr];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ret, 0, ret2, 0, ptr);
    return ret2;
  }
  return ret;
}


#line 1147
+ (jint)removeRefFromArrayWithComAowagieTextPdfPdfArray:(ComAowagieTextPdfPdfArray *)array
                         withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)refo {
  return ComAowagieTextPdfAcroFields_removeRefFromArrayWithComAowagieTextPdfPdfArray_withComAowagieTextPdfPdfObject_(array, refo);
}


#line 1170
- (jboolean)removeFieldsFromPageWithInt:(jint)page {
  if (page < 1) {
    return false;
  }
  IOSObjectArray *names = [IOSObjectArray newArrayWithLength:[((JavaUtilHashMap *) nil_chk(self->fields_)) size] type:NSString_class_()];
  (void) [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(self->fields_)) keySet])) toArrayWithNSObjectArray:names];
  jboolean found = false;
  {
    IOSObjectArray *a__ =
#line 1177
    names;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *name = *b__++;
      
#line 1178
      jboolean fr = [self removeFieldWithNSString:name withInt:page];
      found = (found || fr);
    }
  }
  
#line 1181
  return found;
}


#line 1193
- (jboolean)removeFieldWithNSString:(NSString *)name
                            withInt:(jint)page {
  
#line 1194
  ComAowagieTextPdfAcroFields_Item *item = [self getFieldItemWithNSString:name];
  if (item == nil) {
    return false;
  }
  ComAowagieTextPdfPdfDictionary *acroForm = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk([((ComAowagieTextPdfPdfReader *) nil_chk(self->reader_)) getCatalog])) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ACROFORM)], [self->reader_ getCatalog]), [ComAowagieTextPdfPdfDictionary class]);
  
#line 1200
  if (acroForm == nil) {
    return false;
  }
  ComAowagieTextPdfPdfArray *arrayf = [acroForm getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FIELDS)];
  if (arrayf == nil) {
    return false;
  }
  for (jint k = 0; k < [item size]; ++k) {
    jint pageV = [((JavaLangInteger *) nil_chk([item getPageWithInt:k])) intValue];
    if (page != -1 && page != pageV) {
      continue;
    }
    ComAowagieTextPdfPdfIndirectReference *ref = [item getWidgetRefWithInt:k];
    ComAowagieTextPdfPdfDictionary *wd = [item getWidgetWithInt:k];
    ComAowagieTextPdfPdfDictionary *pageDic = [self->reader_ getPageNWithInt:pageV];
    ComAowagieTextPdfPdfArray *annots = [((ComAowagieTextPdfPdfDictionary *) nil_chk(pageDic)) getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ANNOTS)];
    if (annots != nil) {
      if (ComAowagieTextPdfAcroFields_removeRefFromArrayWithComAowagieTextPdfPdfArray_withComAowagieTextPdfPdfObject_(annots, ref) == 0) {
        [pageDic removeWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ANNOTS)];
        ComAowagieTextPdfAcroFields_markUsedWithComAowagieTextPdfPdfObject_(self, pageDic);
      }
      else {
        
#line 1221
        ComAowagieTextPdfAcroFields_markUsedWithComAowagieTextPdfPdfObject_(self, annots);
      }
    }
    (void) ComAowagieTextPdfPdfReader_killIndirectWithComAowagieTextPdfPdfObject_(ref);
    ComAowagieTextPdfPdfIndirectReference *kid = ref;
    while ((ref = [((ComAowagieTextPdfPdfDictionary *) nil_chk(wd)) getAsIndirectObjectWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PARENT)]) != nil) {
      wd = [wd getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PARENT)];
      ComAowagieTextPdfPdfArray *kids = [((ComAowagieTextPdfPdfDictionary *) nil_chk(wd)) getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, KIDS)];
      if (ComAowagieTextPdfAcroFields_removeRefFromArrayWithComAowagieTextPdfPdfArray_withComAowagieTextPdfPdfObject_(kids, kid) != 0) {
        break;
      }
      kid = ref;
      (void) ComAowagieTextPdfPdfReader_killIndirectWithComAowagieTextPdfPdfObject_(ref);
    }
    if (ref == nil) {
      ComAowagieTextPdfAcroFields_removeRefFromArrayWithComAowagieTextPdfPdfArray_withComAowagieTextPdfPdfObject_(arrayf, kid);
      ComAowagieTextPdfAcroFields_markUsedWithComAowagieTextPdfPdfObject_(self, arrayf);
    }
    if (page != -1) {
      [item removeWithInt:k];
      --k;
    }
  }
  if (page == -1 || [item size] == 0) {
    (void) [((JavaUtilHashMap *) nil_chk(self->fields_)) removeWithId:name];
  }
  return true;
}

- (jboolean)isGenerateAppearances {
  return self->generateAppearances_;
}


#line 1269
- (void)setGenerateAppearancesWithBoolean:(jboolean)generateAppearances {
  self->generateAppearances_ = generateAppearances;
  ComAowagieTextPdfPdfDictionary *top = [((ComAowagieTextPdfPdfDictionary *) nil_chk([((ComAowagieTextPdfPdfReader *) nil_chk(self->reader_)) getCatalog])) getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ACROFORM)];
  if (generateAppearances) {
    [((ComAowagieTextPdfPdfDictionary *) nil_chk(top)) removeWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, NEEDAPPEARANCES)];
  }
  else {
    
#line 1275
    [((ComAowagieTextPdfPdfDictionary *) nil_chk(top)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, NEEDAPPEARANCES) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfBoolean, PDFTRUE)];
  }
}


#line 1579
- (id<JavaUtilList>)getSignatureNames {
  if (self->sigNames_ != nil) {
    return new_JavaUtilArrayList_initWithJavaUtilCollection_([self->sigNames_ keySet]);
  }
  self->sigNames_ = new_JavaUtilLinkedHashMap_init();
  JavaUtilArrayList *sorter = new_JavaUtilArrayList_init();
  for (id __strong element in nil_chk([((JavaUtilHashMap *) nil_chk(self->fields_)) entrySet])) {
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check(element, JavaUtilMap_Entry_class_());
    ComAowagieTextPdfAcroFields_Item *item = (ComAowagieTextPdfAcroFields_Item *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue], [ComAowagieTextPdfAcroFields_Item class]);
    ComAowagieTextPdfPdfDictionary *merged = [((ComAowagieTextPdfAcroFields_Item *) nil_chk(item)) getMergedWithInt:0];
    if (![((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, SIG))) isEqual:[((ComAowagieTextPdfPdfDictionary *) nil_chk(merged)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FT)]]) {
      continue;
    }
    ComAowagieTextPdfPdfDictionary *v = [merged getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V)];
    if (v == nil) {
      continue;
    }
    ComAowagieTextPdfPdfString *contents = [v getAsStringWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CONTENTS)];
    if (contents == nil) {
      continue;
    }
    ComAowagieTextPdfPdfArray *ro = [v getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BYTERANGE)];
    if (ro == nil) {
      continue;
    }
    jint rangeSize = [ro size];
    if (rangeSize < 2) {
      continue;
    }
    jint length = [((ComAowagieTextPdfPdfNumber *) nil_chk([ro getAsNumberWithInt:rangeSize - 1])) intValue] + [((ComAowagieTextPdfPdfNumber *) nil_chk([ro getAsNumberWithInt:rangeSize - 2])) intValue];
    [sorter addWithId:[IOSObjectArray newArrayWithObjects:(id[]){ [entry_ getKey], [IOSIntArray newArrayWithInts:(jint[]){ length, 0 } count:2] } count:2 type:NSObject_class_()]];
  }
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(sorter, new_ComAowagieTextPdfAcroFields_SorterComparator_init());
  if (![sorter isEmpty]) {
    if (IOSIntArray_Get(nil_chk(((IOSIntArray *) cast_chk(IOSObjectArray_Get(nil_chk([sorter getWithInt:[sorter size] - 1]), 1), [IOSIntArray class]))), 0) == [((ComAowagieTextPdfPdfReader *) nil_chk(self->reader_)) getFileLength]) {
      self->totalRevisions_ = [sorter size];
    }
    else {
      
#line 1616
      self->totalRevisions_ = [sorter size] + 1;
    }
    for (jint k = 0; k < [sorter size]; ++k) {
      IOSObjectArray *objs = [sorter getWithInt:k];
      NSString *name = (NSString *) cast_chk(IOSObjectArray_Get(nil_chk(objs), 0), [NSString class]);
      IOSIntArray *p = (IOSIntArray *) cast_chk(IOSObjectArray_Get(objs, 1), [IOSIntArray class]);
      *IOSIntArray_GetRef(nil_chk(p), 1) = k + 1;
      (void) [((JavaUtilHashMap *) nil_chk(self->sigNames_)) putWithId:name withId:p];
    }
  }
  return new_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilHashMap *) nil_chk(self->sigNames_)) keySet]);
}


#line 1633
- (JavaUtilArrayList *)getBlankSignatureNames {
  (void) [self getSignatureNames];
  JavaUtilArrayList *sigs = new_JavaUtilArrayList_init();
  for (id __strong element in nil_chk([((JavaUtilHashMap *) nil_chk(self->fields_)) entrySet])) {
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check(element, JavaUtilMap_Entry_class_());
    ComAowagieTextPdfAcroFields_Item *item = (ComAowagieTextPdfAcroFields_Item *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue], [ComAowagieTextPdfAcroFields_Item class]);
    ComAowagieTextPdfPdfDictionary *merged = [((ComAowagieTextPdfAcroFields_Item *) nil_chk(item)) getMergedWithInt:0];
    if (![((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, SIG))) isEqual:[((ComAowagieTextPdfPdfDictionary *) nil_chk(merged)) getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FT)]]) {
      continue;
    }
    if ([((JavaUtilHashMap *) nil_chk(self->sigNames_)) containsKeyWithId:[entry_ getKey]]) {
      continue;
    }
    [sigs addWithId:[entry_ getKey]];
  }
  return sigs;
}


#line 1658
- (ComAowagieTextPdfPdfDictionary *)getSignatureDictionaryWithNSString:(NSString *)name {
  (void) [self getSignatureNames];
  name = [self getTranslatedFieldNameWithNSString:name];
  if (![((JavaUtilHashMap *) nil_chk(self->sigNames_)) containsKeyWithId:name]) {
    return nil;
  }
  ComAowagieTextPdfAcroFields_Item *item = [((JavaUtilHashMap *) nil_chk(self->fields_)) getWithId:name];
  ComAowagieTextPdfPdfDictionary *merged = [((ComAowagieTextPdfAcroFields_Item *) nil_chk(item)) getMergedWithInt:0];
  return [((ComAowagieTextPdfPdfDictionary *) nil_chk(merged)) getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V)];
}


#line 1697
- (ComAowagieTextPdfPdfPKCS7 *)verifySignatureWithNSString:(NSString *)name {
  return [self verifySignatureWithNSString:name withNSString:nil];
}


#line 1728
- (ComAowagieTextPdfPdfPKCS7 *)verifySignatureWithNSString:(NSString *)name
                                              withNSString:(NSString *)provider {
  
#line 1729
  ComAowagieTextPdfPdfDictionary *v = [self getSignatureDictionaryWithNSString:name];
  if (v == nil) {
    return nil;
  }
  @try {
    ComAowagieTextPdfPdfName *sub = [v getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBFILTER)];
    ComAowagieTextPdfPdfString *contents = [v getAsStringWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CONTENTS)];
    ComAowagieTextPdfPdfPKCS7 *pk = nil;
    if ([((ComAowagieTextPdfPdfName *) nil_chk(sub)) isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, ADBE_X509_RSA_SHA1)]) {
      ComAowagieTextPdfPdfString *cert = [v getAsStringWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CERT)];
      pk = new_ComAowagieTextPdfPdfPKCS7_initWithByteArray_withByteArray_withNSString_([((ComAowagieTextPdfPdfString *) nil_chk(contents)) getOriginalBytes], [((ComAowagieTextPdfPdfString *) nil_chk(cert)) getBytes], provider);
    }
    else {
      
#line 1741
      pk = new_ComAowagieTextPdfPdfPKCS7_initWithByteArray_withNSString_([((ComAowagieTextPdfPdfString *) nil_chk(contents)) getOriginalBytes], provider);
    }
    ComAowagieTextPdfAcroFields_updateByteRangeWithComAowagieTextPdfPdfPKCS7_withComAowagieTextPdfPdfDictionary_(self, pk, v);
    ComAowagieTextPdfPdfString *str = [v getAsStringWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, M)];
    if (str != nil) {
      [pk setSignDateWithJavaUtilCalendar:ComAowagieTextPdfPdfDate_decodeWithNSString_([str description])];
    }
    ComAowagieTextPdfPdfObject *obj = ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_([v getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, NAME)]);
    if (obj != nil) {
      if ([obj isString]) {
        [pk setSignNameWithNSString:[((ComAowagieTextPdfPdfString *) cast_chk(obj, [ComAowagieTextPdfPdfString class])) toUnicodeString]];
      }
      else
#line 1752
      if ([obj isName]) {
        [pk setSignNameWithNSString:ComAowagieTextPdfPdfName_decodeNameWithNSString_([obj description])];
      }
    }
    str = [v getAsStringWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, REASON)];
    if (str != nil) {
      [pk setReasonWithNSString:[str toUnicodeString]];
    }
    str = [v getAsStringWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LOCATION)];
    if (str != nil) {
      [pk setLocationWithNSString:[str toUnicodeString]];
    }
    str = [v getAsStringWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CONTACTINFO)];
    if (str != nil) {
      [pk setContactInfoWithNSString:[str toUnicodeString]];
    }
    return pk;
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 1775
- (void)updateByteRangeWithComAowagieTextPdfPdfPKCS7:(ComAowagieTextPdfPdfPKCS7 *)pkcs7
                  withComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)v {
  ComAowagieTextPdfAcroFields_updateByteRangeWithComAowagieTextPdfPdfPKCS7_withComAowagieTextPdfPdfDictionary_(self, pkcs7, v);
}


#line 1805
- (void)markUsedWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj {
  ComAowagieTextPdfAcroFields_markUsedWithComAowagieTextPdfPdfObject_(self, obj);
}


#line 1817
- (jint)getTotalRevisions {
  (void) [self getSignatureNames];
  return self->totalRevisions_;
}


#line 1832
- (id<JavaUtilMap>)getFieldCache {
  return self->fieldCache_;
}


#line 1861
- (void)setFieldCacheWithJavaUtilMap:(id<JavaUtilMap>)fieldCache {
  self->fieldCache_ = fieldCache;
}


#line 1871
- (jint)getRevisionWithNSString:(NSString *)field {
  (void) [self getSignatureNames];
  field = [self getTranslatedFieldNameWithNSString:field];
  if (![((JavaUtilHashMap *) nil_chk(self->sigNames_)) containsKeyWithId:field]) {
    return 0;
  }
  return IOSIntArray_Get(nil_chk([((JavaUtilHashMap *) nil_chk(self->sigNames_)) getWithId:field]), 1);
}


#line 1888
- (JavaIoInputStream *)extractRevisionWithNSString:(NSString *)field {
  (void) [self getSignatureNames];
  field = [self getTranslatedFieldNameWithNSString:field];
  if (![((JavaUtilHashMap *) nil_chk(self->sigNames_)) containsKeyWithId:field]) {
    return nil;
  }
  jint length = IOSIntArray_Get(nil_chk([((JavaUtilHashMap *) nil_chk(self->sigNames_)) getWithId:field]), 0);
  ComAowagieTextPdfRandomAccessFileOrArray *raf = [((ComAowagieTextPdfPdfReader *) nil_chk(self->reader_)) getSafeFile];
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(raf)) reOpen];
  [raf seekWithInt:0];
  return new_ComAowagieTextPdfAcroFields_RevisionStream_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_(raf, length);
}


#line 1954
- (JavaUtilArrayList *)getSubstitutionFonts {
  return self->substitutionFonts_;
}


#line 1964
- (void)setSubstitutionFontsWithJavaUtilArrayList:(JavaUtilArrayList *)substitutionFonts {
  self->substitutionFonts_ = substitutionFonts;
}


#line 1973
- (ComAowagieTextPdfXfaForm *)getXfa {
  return self->xfa_;
}


#line 1988
- (ComAowagieTextPdfPushbuttonField *)getNewPushbuttonFromFieldWithNSString:(NSString *)field {
  return ComAowagieTextPdfAcroFields_getNewPushbuttonFromFieldWithNSString_(self, field);
}


#line 2003
- (ComAowagieTextPdfPushbuttonField *)getNewPushbuttonFromFieldWithNSString:(NSString *)field
                                                                    withInt:(jint)order {
  return ComAowagieTextPdfAcroFields_getNewPushbuttonFromFieldWithNSString_withInt_(self, field, order);
}


#line 2082
- (jboolean)replacePushbuttonFieldWithNSString:(NSString *)field
             withComAowagieTextPdfPdfFormField:(ComAowagieTextPdfPdfFormField *)button {
  return ComAowagieTextPdfAcroFields_replacePushbuttonFieldWithNSString_withComAowagieTextPdfPdfFormField_(self, field, button);
}


#line 2099
- (jboolean)replacePushbuttonFieldWithNSString:(NSString *)field
             withComAowagieTextPdfPdfFormField:(ComAowagieTextPdfPdfFormField *)button
                                       withInt:(jint)order {
  return ComAowagieTextPdfAcroFields_replacePushbuttonFieldWithNSString_withComAowagieTextPdfPdfFormField_withInt_(self, field, button, order);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 1, 2, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPRIndirectReference;", 0xa, 3, 2, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfAppearance;", 0x2, 12, 13, 14, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtColor;", 0xa, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, 14, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 19, 14, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 21, 14, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 22, 14, -1, -1, -1 },
    { NULL, "Z", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 25, 26, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x1, -1, -1, -1, 27, -1, -1 },
    { NULL, "LComAowagieTextPdfAcroFields_Item;", 0x1, 28, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 29, 7, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, 30, 7, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 31, 32, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 33, 34, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 35, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 37, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 38, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x1, 39, 7, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfPKCS7;", 0x1, 40, 7, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfPKCS7;", 0x1, 40, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 44, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 45, -1, -1 },
    { NULL, "V", 0x1, 46, 47, -1, 48, -1, -1 },
    { NULL, "I", 0x1, 49, 7, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, 50, 7, 51, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 52, 53, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfXfaForm;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPushbuttonField;", 0x2, 54, 7, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPushbuttonField;", 0x2, 54, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 55, 56, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 55, 57, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComAowagieTextPdfPdfReader:withComAowagieTextPdfPdfWriter:);
  methods[1].selector = @selector(fill);
  methods[2].selector = @selector(checkInvalidValuePositionWithComAowagieTextPdfPdfDictionary:);
  methods[3].selector = @selector(getParentReferenceWithComAowagieTextPdfPdfDictionary:);
  methods[4].selector = @selector(getListOptionWithNSString:withInt:);
  methods[5].selector = @selector(getListOptionExportWithNSString:);
  methods[6].selector = @selector(getFieldTypeWithNSString:);
  methods[7].selector = @selector(splitDAelementsWithNSString:);
  methods[8].selector = @selector(decodeGenericDictionaryWithComAowagieTextPdfPdfDictionary:withComAowagieTextPdfBaseField:);
  methods[9].selector = @selector(getAppearanceWithComAowagieTextPdfPdfDictionary:withNSString:withNSString:);
  methods[10].selector = @selector(getMKColorWithComAowagieTextPdfPdfArray:);
  methods[11].selector = @selector(setFieldsWithComAowagieTextPdfFdfReader:);
  methods[12].selector = @selector(setFieldsWithComAowagieTextPdfXfdfReader:);
  methods[13].selector = @selector(setFieldWithNSString:withNSString:);
  methods[14].selector = @selector(setFieldWithNSString:withNSString:withNSString:);
  methods[15].selector = @selector(setListSelectionWithNSString:withNSStringArray:);
  methods[16].selector = @selector(isInAPWithComAowagieTextPdfPdfDictionary:withComAowagieTextPdfPdfName:);
  methods[17].selector = @selector(getFields);
  methods[18].selector = @selector(getFieldItemWithNSString:);
  methods[19].selector = @selector(getTranslatedFieldNameWithNSString:);
  methods[20].selector = @selector(getFieldPositionsWithNSString:);
  methods[21].selector = @selector(removeRefFromArrayWithComAowagieTextPdfPdfArray:withComAowagieTextPdfPdfObject:);
  methods[22].selector = @selector(removeFieldsFromPageWithInt:);
  methods[23].selector = @selector(removeFieldWithNSString:withInt:);
  methods[24].selector = @selector(isGenerateAppearances);
  methods[25].selector = @selector(setGenerateAppearancesWithBoolean:);
  methods[26].selector = @selector(getSignatureNames);
  methods[27].selector = @selector(getBlankSignatureNames);
  methods[28].selector = @selector(getSignatureDictionaryWithNSString:);
  methods[29].selector = @selector(verifySignatureWithNSString:);
  methods[30].selector = @selector(verifySignatureWithNSString:withNSString:);
  methods[31].selector = @selector(updateByteRangeWithComAowagieTextPdfPdfPKCS7:withComAowagieTextPdfPdfDictionary:);
  methods[32].selector = @selector(markUsedWithComAowagieTextPdfPdfObject:);
  methods[33].selector = @selector(getTotalRevisions);
  methods[34].selector = @selector(getFieldCache);
  methods[35].selector = @selector(setFieldCacheWithJavaUtilMap:);
  methods[36].selector = @selector(getRevisionWithNSString:);
  methods[37].selector = @selector(extractRevisionWithNSString:);
  methods[38].selector = @selector(getSubstitutionFonts);
  methods[39].selector = @selector(setSubstitutionFontsWithJavaUtilArrayList:);
  methods[40].selector = @selector(getXfa);
  methods[41].selector = @selector(getNewPushbuttonFromFieldWithNSString:);
  methods[42].selector = @selector(getNewPushbuttonFromFieldWithNSString:withInt:);
  methods[43].selector = @selector(replacePushbuttonFieldWithNSString:withComAowagieTextPdfPdfFormField:);
  methods[44].selector = @selector(replacePushbuttonFieldWithNSString:withComAowagieTextPdfPdfFormField:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "reader_", "LComAowagieTextPdfPdfReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "writer_", "LComAowagieTextPdfPdfWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fields_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 58, -1 },
    { "topFirst_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sigNames_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 59, -1 },
    { "append_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DA_FONT", "I", .constantValue.asInt = ComAowagieTextPdfAcroFields_DA_FONT, 0x19, -1, -1, -1, -1 },
    { "DA_SIZE", "I", .constantValue.asInt = ComAowagieTextPdfAcroFields_DA_SIZE, 0x19, -1, -1, -1, -1 },
    { "DA_COLOR", "I", .constantValue.asInt = ComAowagieTextPdfAcroFields_DA_COLOR, 0x19, -1, -1, -1, -1 },
    { "extensionFonts_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 60, -1 },
    { "xfa_", "LComAowagieTextPdfXfaForm;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "FIELD_TYPE_NONE", "I", .constantValue.asInt = ComAowagieTextPdfAcroFields_FIELD_TYPE_NONE, 0x19, -1, -1, -1, -1 },
    { "FIELD_TYPE_PUSHBUTTON", "I", .constantValue.asInt = ComAowagieTextPdfAcroFields_FIELD_TYPE_PUSHBUTTON, 0x19, -1, -1, -1, -1 },
    { "FIELD_TYPE_CHECKBOX", "I", .constantValue.asInt = ComAowagieTextPdfAcroFields_FIELD_TYPE_CHECKBOX, 0x19, -1, -1, -1, -1 },
    { "FIELD_TYPE_RADIOBUTTON", "I", .constantValue.asInt = ComAowagieTextPdfAcroFields_FIELD_TYPE_RADIOBUTTON, 0x19, -1, -1, -1, -1 },
    { "FIELD_TYPE_TEXT", "I", .constantValue.asInt = ComAowagieTextPdfAcroFields_FIELD_TYPE_TEXT, 0x19, -1, -1, -1, -1 },
    { "FIELD_TYPE_LIST", "I", .constantValue.asInt = ComAowagieTextPdfAcroFields_FIELD_TYPE_LIST, 0x19, -1, -1, -1, -1 },
    { "FIELD_TYPE_COMBO", "I", .constantValue.asInt = ComAowagieTextPdfAcroFields_FIELD_TYPE_COMBO, 0x19, -1, -1, -1, -1 },
    { "FIELD_TYPE_SIGNATURE", "I", .constantValue.asInt = ComAowagieTextPdfAcroFields_FIELD_TYPE_SIGNATURE, 0x19, -1, -1, -1, -1 },
    { "generateAppearances_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "localFonts_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "extraMarginLeft_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extraMarginTop_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "substitutionFonts_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stdFieldFontNames", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x1a, -1, 61, 62, -1 },
    { "totalRevisions_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fieldCache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 63, -1 },
    { "buttonRemove", "[LComAowagieTextPdfPdfName;", .constantValue.asLong = 0, 0x1a, -1, 64, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfPdfReader;LComAowagieTextPdfPdfWriter;", "checkInvalidValuePosition", "LComAowagieTextPdfPdfDictionary;", "getParentReference", "getListOption", "LNSString;I", "getListOptionExport", "LNSString;", "getFieldType", "splitDAelements", "decodeGenericDictionary", "LComAowagieTextPdfPdfDictionary;LComAowagieTextPdfBaseField;", "getAppearance", "LComAowagieTextPdfPdfDictionary;LNSString;LNSString;", "LJavaIoIOException;LComAowagieTextDocumentException;", "getMKColor", "LComAowagieTextPdfPdfArray;", "setFields", "LComAowagieTextPdfFdfReader;", "LComAowagieTextPdfXfdfReader;", "setField", "LNSString;LNSString;", "LNSString;LNSString;LNSString;", "setListSelection", "LNSString;[LNSString;", "isInAP", "LComAowagieTextPdfPdfDictionary;LComAowagieTextPdfPdfName;", "()Ljava/util/HashMap<Ljava/lang/String;Lcom/aowagie/text/pdf/AcroFields$Item;>;", "getFieldItem", "getTranslatedFieldName", "getFieldPositions", "removeRefFromArray", "LComAowagieTextPdfPdfArray;LComAowagieTextPdfPdfObject;", "removeFieldsFromPage", "I", "removeField", "setGenerateAppearances", "Z", "()Ljava/util/List<Ljava/lang/String;>;", "getSignatureDictionary", "verifySignature", "updateByteRange", "LComAowagieTextPdfPdfPKCS7;LComAowagieTextPdfPdfDictionary;", "markUsed", "LComAowagieTextPdfPdfObject;", "()Ljava/util/Map<Ljava/lang/String;Lcom/aowagie/text/pdf/TextField;>;", "setFieldCache", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Lcom/aowagie/text/pdf/TextField;>;)V", "getRevision", "extractRevision", "LJavaIoIOException;", "setSubstitutionFonts", "LJavaUtilArrayList;", "getNewPushbuttonFromField", "replacePushbuttonField", "LNSString;LComAowagieTextPdfPdfFormField;", "LNSString;LComAowagieTextPdfPdfFormField;I", "Ljava/util/HashMap<Ljava/lang/String;Lcom/aowagie/text/pdf/AcroFields$Item;>;", "Ljava/util/HashMap<Ljava/lang/String;[I>;", "Ljava/util/HashMap<Ljava/lang/Integer;Lcom/aowagie/text/pdf/BaseFont;>;", &ComAowagieTextPdfAcroFields_stdFieldFontNames, "Ljava/util/HashMap<Ljava/lang/String;[Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/aowagie/text/pdf/TextField;>;", &ComAowagieTextPdfAcroFields_buttonRemove, "LComAowagieTextPdfAcroFields_Item;LComAowagieTextPdfAcroFields_SorterComparator;LComAowagieTextPdfAcroFields_RevisionStream;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfAcroFields = { "AcroFields", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x1, 45, 28, -1, 65, -1, -1, -1 };
  return &_ComAowagieTextPdfAcroFields;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfAcroFields class]) {
    ComAowagieTextPdfAcroFields_stdFieldFontNames = new_JavaUtilLinkedHashMap_init();
    {
      
#line 1916
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"CoBO" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"Courier-BoldOblique" } count:1 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"CoBo" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"Courier-Bold" } count:1 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"CoOb" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"Courier-Oblique" } count:1 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"Cour" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"Courier" } count:1 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"HeBO" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"Helvetica-BoldOblique" } count:1 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"HeBo" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"Helvetica-Bold" } count:1 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"HeOb" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"Helvetica-Oblique" } count:1 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"Helv" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"Helvetica" } count:1 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"Symb" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"Symbol" } count:1 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"TiBI" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"Times-BoldItalic" } count:1 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"TiBo" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"Times-Bold" } count:1 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"TiIt" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"Times-Italic" } count:1 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"TiRo" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"Times-Roman" } count:1 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"ZaDb" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"ZapfDingbats" } count:1 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"HySm" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"HYSMyeongJo-Medium", @"UniKS-UCS2-H" } count:2 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"HyGo" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"HYGoThic-Medium", @"UniKS-UCS2-H" } count:2 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"KaGo" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"HeiseiKakuGo-W5", @"UniKS-UCS2-H" } count:2 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"KaMi" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"HeiseiMin-W3", @"UniJIS-UCS2-H" } count:2 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"MHei" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"MHei-Medium", @"UniCNS-UCS2-H" } count:2 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"MSun" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"MSung-Light", @"UniCNS-UCS2-H" } count:2 type:NSString_class_()]];
      (void) [ComAowagieTextPdfAcroFields_stdFieldFontNames putWithId:@"STSo" withId:[IOSObjectArray newArrayWithObjects:(id[]){ @"STSong-Light", @"UniGB-UCS2-H" } count:2 type:NSString_class_()]];
    }
    ComAowagieTextPdfAcroFields_buttonRemove = [IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(ComAowagieTextPdfPdfName, MK), JreLoadStatic(ComAowagieTextPdfPdfName, F), JreLoadStatic(ComAowagieTextPdfPdfName, FF), JreLoadStatic(ComAowagieTextPdfPdfName, Q), JreLoadStatic(ComAowagieTextPdfPdfName, BS), JreLoadStatic(ComAowagieTextPdfPdfName, BORDER) } count:6 type:ComAowagieTextPdfPdfName_class_()];
    J2OBJC_SET_INITIALIZED(ComAowagieTextPdfAcroFields)
  }
}

@end


#line 140
void ComAowagieTextPdfAcroFields_initWithComAowagieTextPdfPdfReader_withComAowagieTextPdfPdfWriter_(ComAowagieTextPdfAcroFields *self, ComAowagieTextPdfPdfReader *reader, ComAowagieTextPdfPdfWriter *writer) {
  NSObject_init(self);
  self->extensionFonts_ = new_JavaUtilLinkedHashMap_init();
  self->generateAppearances_ =
#line 132
  true;
  self->localFonts_ = new_JavaUtilLinkedHashMap_init();
  
#line 141
  self->reader_ = reader;
  self->writer_ = writer;
  @try {
    self->xfa_ = new_ComAowagieTextPdfXfaForm_initPackagePrivateWithComAowagieTextPdfPdfReader_(reader);
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
  if ([writer isKindOfClass:[ComAowagieTextPdfPdfStamperImp class]]) {
    self->append_ = [((ComAowagieTextPdfPdfStamperImp *) nil_chk(((ComAowagieTextPdfPdfStamperImp *) writer))) isAppend];
  }
  [self fill];
}


#line 140
ComAowagieTextPdfAcroFields *new_ComAowagieTextPdfAcroFields_initWithComAowagieTextPdfPdfReader_withComAowagieTextPdfPdfWriter_(ComAowagieTextPdfPdfReader *reader, ComAowagieTextPdfPdfWriter *writer) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfAcroFields, initWithComAowagieTextPdfPdfReader_withComAowagieTextPdfPdfWriter_, reader, writer)
}


#line 140
ComAowagieTextPdfAcroFields *create_ComAowagieTextPdfAcroFields_initWithComAowagieTextPdfPdfReader_withComAowagieTextPdfPdfWriter_(ComAowagieTextPdfPdfReader *reader, ComAowagieTextPdfPdfWriter *writer) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfAcroFields, initWithComAowagieTextPdfPdfReader_withComAowagieTextPdfPdfWriter_, reader, writer)
}


#line 312
jboolean ComAowagieTextPdfAcroFields_checkInvalidValuePositionWithComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfPdfDictionary *targetAnnot) {
  ComAowagieTextPdfAcroFields_initialize();
  ComAowagieTextPdfPdfDictionary *annot = new_ComAowagieTextPdfPdfDictionary_init();
  [annot putAllWithComAowagieTextPdfPdfDictionary:targetAnnot];
  
#line 317
  ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_init();
  [dic putAllWithComAowagieTextPdfPdfDictionary:annot];
  while (annot != nil) {
    
#line 324
    if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, SIG))) isEqual:[annot getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FT)]] &&
#line 325
    [dic getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V)] != nil) {
      
#line 328
      if ([annot getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V)] == nil) {
        return false;
      }
      
#line 334
      [dic removeWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V)];
    }
    [dic mergeDifferentWithComAowagieTextPdfPdfDictionary:annot];
    
#line 338
    annot = [annot getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PARENT)];
  }
  
#line 341
  return true;
}


#line 349
ComAowagieTextPdfPRIndirectReference *ComAowagieTextPdfAcroFields_getParentReferenceWithComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfPdfDictionary *dict) {
  ComAowagieTextPdfAcroFields_initialize();
  ComAowagieTextPdfPdfDictionary *parentDict = dict;
  
#line 353
  ComAowagieTextPdfPRIndirectReference *parentRef = nil;
  do {
    ComAowagieTextPdfPdfObject *parentObj = [((ComAowagieTextPdfPdfDictionary *) nil_chk(parentDict)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PARENT)];
    if (parentObj != nil && [parentObj isKindOfClass:[ComAowagieTextPdfPRIndirectReference class]]) {
      parentRef = (ComAowagieTextPdfPRIndirectReference *) cast_chk(parentObj, [ComAowagieTextPdfPRIndirectReference class]);
    }
    parentDict = [parentDict getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PARENT)];
  }
  while (parentDict != nil);
  
#line 363
  return parentRef;
}


#line 366
IOSObjectArray *ComAowagieTextPdfAcroFields_getListOptionWithNSString_withInt_(ComAowagieTextPdfAcroFields *self, NSString *fieldName, jint idx) {
  ComAowagieTextPdfAcroFields_Item *fd = [self getFieldItemWithNSString:fieldName];
  if (fd == nil) {
    return nil;
  }
  ComAowagieTextPdfPdfArray *ar = [((ComAowagieTextPdfPdfDictionary *) nil_chk([fd getMergedWithInt:0])) getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, OPT)];
  if (ar == nil) {
    return nil;
  }
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:[ar size] type:NSString_class_()];
  for (jint k = 0; k < [ar size]; ++k) {
    ComAowagieTextPdfPdfObject *obj = [ar getDirectObjectWithInt:k];
    @try {
      if ([((ComAowagieTextPdfPdfObject *) nil_chk(obj)) isArray]) {
        obj = [((ComAowagieTextPdfPdfArray *) cast_chk(obj, [ComAowagieTextPdfPdfArray class])) getDirectObjectWithInt:idx];
      }
      if ([((ComAowagieTextPdfPdfObject *) nil_chk(obj)) isString]) {
        (void) IOSObjectArray_Set(ret, k, [((ComAowagieTextPdfPdfString *) cast_chk(obj, [ComAowagieTextPdfPdfString class])) toUnicodeString]);
      }
      else {
        
#line 385
        (void) IOSObjectArray_Set(ret, k, [obj description]);
      }
    }
    @catch (JavaLangException *e) {
      (void) IOSObjectArray_Set(ret, k, @"");
    }
  }
  return ret;
}


#line 403
IOSObjectArray *ComAowagieTextPdfAcroFields_getListOptionExportWithNSString_(ComAowagieTextPdfAcroFields *self, NSString *fieldName) {
  return ComAowagieTextPdfAcroFields_getListOptionWithNSString_withInt_(self, fieldName, 0);
}


#line 466
IOSObjectArray *ComAowagieTextPdfAcroFields_splitDAelementsWithNSString_(NSString *da) {
  ComAowagieTextPdfAcroFields_initialize();
  
#line 467
  @try {
    ComAowagieTextPdfPRTokeniser *tk = new_ComAowagieTextPdfPRTokeniser_initWithByteArray_(ComAowagieTextPdfPdfEncodings_convertToBytesWithNSString_withNSString_(da, nil));
    JavaUtilArrayList *stack = new_JavaUtilArrayList_init();
    IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:3 type:NSObject_class_()];
    while ([tk nextToken]) {
      if ([tk getTokenType] == ComAowagieTextPdfPRTokeniser_TK_COMMENT) {
        continue;
      }
      if ([tk getTokenType] == ComAowagieTextPdfPRTokeniser_TK_OTHER) {
        NSString *operator_ = [tk getStringValue];
        if ([((NSString *) nil_chk(operator_)) isEqual:@"Tf"]) {
          if ([stack size] >= 2) {
            (void) IOSObjectArray_Set(ret, ComAowagieTextPdfAcroFields_DA_FONT, [stack getWithInt:[stack size] - 2]);
            (void) IOSObjectArray_SetAndConsume(ret, ComAowagieTextPdfAcroFields_DA_SIZE, new_JavaLangFloat_initWithNSString_([stack getWithInt:[stack size] - 1]));
          }
        }
        else if ([operator_ isEqual:@"g"]) {
          if ([stack size] >= 1) {
            jfloat gray = [new_JavaLangFloat_initWithNSString_([stack getWithInt:[stack size] - 1]) floatValue];
            if (gray != 0) {
              (void) IOSObjectArray_SetAndConsume(ret, ComAowagieTextPdfAcroFields_DA_COLOR, new_ComAowagieTextPdfGrayColor_initWithFloat_(gray));
            }
          }
        }
        else if ([operator_ isEqual:@"rg"]) {
          if ([stack size] >= 3) {
            jfloat red = [new_JavaLangFloat_initWithNSString_([stack getWithInt:[stack size] - 3]) floatValue];
            jfloat green = [new_JavaLangFloat_initWithNSString_([stack getWithInt:[stack size] - 2]) floatValue];
            jfloat blue = [new_JavaLangFloat_initWithNSString_([stack getWithInt:[stack size] - 1]) floatValue];
            (void) IOSObjectArray_SetAndConsume(ret, ComAowagieTextPdfAcroFields_DA_COLOR, new_HarmonyJavaAwtColor_initWithFloat_withFloat_withFloat_(red, green, blue));
          }
        }
        else if ([operator_ isEqual:@"k"]) {
          if ([stack size] >= 4) {
            jfloat cyan = [new_JavaLangFloat_initWithNSString_([stack getWithInt:[stack size] - 4]) floatValue];
            jfloat magenta = [new_JavaLangFloat_initWithNSString_([stack getWithInt:[stack size] - 3]) floatValue];
            jfloat yellow = [new_JavaLangFloat_initWithNSString_([stack getWithInt:[stack size] - 2]) floatValue];
            jfloat black = [new_JavaLangFloat_initWithNSString_([stack getWithInt:[stack size] - 1]) floatValue];
            (void) IOSObjectArray_SetAndConsume(ret, ComAowagieTextPdfAcroFields_DA_COLOR, new_ComAowagieTextPdfCMYKColor_initPackagePrivateWithFloat_withFloat_withFloat_withFloat_(cyan, magenta, yellow, black));
          }
        }
        [stack clear];
      }
      else {
        
#line 510
        [stack addWithId:[tk getStringValue]];
      }
    }
    return ret;
  }
  @catch (JavaIoIOException *ioe) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(ioe);
  }
}


#line 681
ComAowagieTextPdfPdfAppearance *ComAowagieTextPdfAcroFields_getAppearanceWithComAowagieTextPdfPdfDictionary_withNSString_withNSString_(ComAowagieTextPdfAcroFields *self, ComAowagieTextPdfPdfDictionary *merged, NSString *text, NSString *fieldName) {
  self->topFirst_ = 0;
  ComAowagieTextPdfTextField *tx = nil;
  if (self->fieldCache_ == nil || ![self->fieldCache_ containsKeyWithId:fieldName]) {
    tx = new_ComAowagieTextPdfTextField_initPackagePrivateWithComAowagieTextPdfPdfWriter_withComAowagieTextRectangle_withNSString_(self->writer_, nil, nil);
    [tx setExtraMarginWithFloat:self->extraMarginLeft_ withFloat:self->extraMarginTop_];
    [tx setBorderWidthWithFloat:0];
    [tx setSubstitutionFontsWithJavaUtilArrayList:self->substitutionFonts_];
    [self decodeGenericDictionaryWithComAowagieTextPdfPdfDictionary:merged withComAowagieTextPdfBaseField:tx];
    
#line 691
    ComAowagieTextPdfPdfArray *rect = [((ComAowagieTextPdfPdfDictionary *) nil_chk(merged)) getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, RECT)];
    ComAowagieTextRectangle *box = ComAowagieTextPdfPdfReader_getNormalizedRectangleWithComAowagieTextPdfPdfArray_(rect);
    if ([tx getRotation] == 90 || [tx getRotation] == 270) {
      box = [((ComAowagieTextRectangle *) nil_chk(box)) rotate];
    }
    [tx setBoxWithComAowagieTextRectangle:box];
    if (self->fieldCache_ != nil) {
      (void) [self->fieldCache_ putWithId:fieldName withId:tx];
    }
  }
  else {
    tx = [self->fieldCache_ getWithId:fieldName];
    [((ComAowagieTextPdfTextField *) nil_chk(tx)) setWriterWithComAowagieTextPdfPdfWriter:self->writer_];
  }
  ComAowagieTextPdfPdfName *fieldType = [((ComAowagieTextPdfPdfDictionary *) nil_chk(merged)) getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FT)];
  if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, TX))) isEqual:fieldType]) {
    [tx setTextWithNSString:text];
    return [tx getAppearance];
  }
  if (![((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, CH))) isEqual:fieldType]) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(@"An appearance was requested without a variable text field.");
  }
  ComAowagieTextPdfPdfArray *opt = [merged getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, OPT)];
  jint flags = 0;
  ComAowagieTextPdfPdfNumber *nfl = [merged getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FF)];
  if (nfl != nil) {
    flags = [nfl intValue];
  }
  if ((flags & ComAowagieTextPdfPdfFormField_FF_COMBO) != 0 && opt == nil) {
    [tx setTextWithNSString:text];
    return [tx getAppearance];
  }
  if (opt != nil) {
    IOSObjectArray *choices = [IOSObjectArray newArrayWithLength:[opt size] type:NSString_class_()];
    IOSObjectArray *choicesExp = [IOSObjectArray newArrayWithLength:[opt size] type:NSString_class_()];
    for (jint k = 0; k < [opt size]; ++k) {
      ComAowagieTextPdfPdfObject *obj = [opt getPdfObjectWithInt:k];
      if ([((ComAowagieTextPdfPdfObject *) nil_chk(obj)) isString]) {
        (void) IOSObjectArray_Set(choices, k, IOSObjectArray_Set(choicesExp, k, [((ComAowagieTextPdfPdfString *) cast_chk(obj, [ComAowagieTextPdfPdfString class])) toUnicodeString]));
      }
      else {
        ComAowagieTextPdfPdfArray *a = (ComAowagieTextPdfPdfArray *) cast_chk(obj, [ComAowagieTextPdfPdfArray class]);
        (void) IOSObjectArray_Set(choicesExp, k, [((ComAowagieTextPdfPdfString *) nil_chk([a getAsStringWithInt:0])) toUnicodeString]);
        (void) IOSObjectArray_Set(choices, k, [((ComAowagieTextPdfPdfString *) nil_chk([a getAsStringWithInt:1])) toUnicodeString]);
      }
    }
    if ((flags & ComAowagieTextPdfPdfFormField_FF_COMBO) != 0) {
      for (jint k = 0; k < choices->size_; ++k) {
        if ([((NSString *) nil_chk(text)) isEqual:IOSObjectArray_Get(choicesExp, k)]) {
          text = IOSObjectArray_Get(choices, k);
          break;
        }
      }
      [tx setTextWithNSString:text];
      return [tx getAppearance];
    }
    jint idx = 0;
    for (jint k = 0; k < choicesExp->size_; ++k) {
      if ([((NSString *) nil_chk(text)) isEqual:IOSObjectArray_Get(choicesExp, k)]) {
        idx = k;
        break;
      }
    }
    [tx setChoicesWithNSStringArray:choices];
    [tx setChoiceExportsWithNSStringArray:choicesExp];
    [tx setChoiceSelectionWithInt:idx];
  }
  ComAowagieTextPdfPdfAppearance *app = [tx getListAppearance];
  self->topFirst_ = [tx getTopFirst];
  return app;
}


#line 763
HarmonyJavaAwtColor *ComAowagieTextPdfAcroFields_getMKColorWithComAowagieTextPdfPdfArray_(ComAowagieTextPdfPdfArray *ar) {
  ComAowagieTextPdfAcroFields_initialize();
  
#line 764
  if (ar == nil) {
    return nil;
  }
  switch ([ar size]) {
    case 1:
    return new_ComAowagieTextPdfGrayColor_initWithFloat_([((ComAowagieTextPdfPdfNumber *) nil_chk([ar getAsNumberWithInt:0])) floatValue]);
    case 3:
    return new_HarmonyJavaAwtColor_initWithFloat_withFloat_withFloat_(ComAowagieTextPdfExtendedColor_normalizeWithFloat_([((ComAowagieTextPdfPdfNumber *) nil_chk([ar getAsNumberWithInt:0])) floatValue]), ComAowagieTextPdfExtendedColor_normalizeWithFloat_([((ComAowagieTextPdfPdfNumber *) nil_chk([ar getAsNumberWithInt:1])) floatValue]), ComAowagieTextPdfExtendedColor_normalizeWithFloat_([((ComAowagieTextPdfPdfNumber *) nil_chk([ar getAsNumberWithInt:2])) floatValue]));
    case 4:
    return new_ComAowagieTextPdfCMYKColor_initPackagePrivateWithFloat_withFloat_withFloat_withFloat_([((ComAowagieTextPdfPdfNumber *) nil_chk([ar getAsNumberWithInt:0])) floatValue], [((ComAowagieTextPdfPdfNumber *) nil_chk([ar getAsNumberWithInt:1])) floatValue], [((ComAowagieTextPdfPdfNumber *) nil_chk([ar getAsNumberWithInt:2])) floatValue], [((ComAowagieTextPdfPdfNumber *) nil_chk([ar getAsNumberWithInt:3])) floatValue]);
    default:
    return nil;
  }
}


#line 1025
jboolean ComAowagieTextPdfAcroFields_isInAPWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfName_(ComAowagieTextPdfPdfDictionary *dic, ComAowagieTextPdfPdfName *check) {
  ComAowagieTextPdfAcroFields_initialize();
  
#line 1026
  ComAowagieTextPdfPdfDictionary *appDic = [((ComAowagieTextPdfPdfDictionary *) nil_chk(dic)) getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, AP)];
  if (appDic == nil) {
    return false;
  }
  ComAowagieTextPdfPdfDictionary *NDic = [appDic getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, N)];
  return NDic != nil && [NDic getWithComAowagieTextPdfPdfName:check] != nil;
}


#line 1147
jint ComAowagieTextPdfAcroFields_removeRefFromArrayWithComAowagieTextPdfPdfArray_withComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfArray *array, ComAowagieTextPdfPdfObject *refo) {
  ComAowagieTextPdfAcroFields_initialize();
  
#line 1148
  if (refo == nil || ![refo isIndirect]) {
    return [((ComAowagieTextPdfPdfArray *) nil_chk(array)) size];
  }
  ComAowagieTextPdfPdfIndirectReference *ref = (ComAowagieTextPdfPdfIndirectReference *) cast_chk(refo, [ComAowagieTextPdfPdfIndirectReference class]);
  for (jint j = 0; j < [((ComAowagieTextPdfPdfArray *) nil_chk(array)) size]; ++j) {
    ComAowagieTextPdfPdfObject *obj = [array getPdfObjectWithInt:j];
    if (![((ComAowagieTextPdfPdfObject *) nil_chk(obj)) isIndirect]) {
      continue;
    }
    if ([((ComAowagieTextPdfPdfIndirectReference *) cast_chk(obj, [ComAowagieTextPdfPdfIndirectReference class])) getNumber] == [ref getNumber]) {
      (void) [array removeWithInt:j--];
    }
  }
  return [array size];
}


#line 1775
void ComAowagieTextPdfAcroFields_updateByteRangeWithComAowagieTextPdfPdfPKCS7_withComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfAcroFields *self, ComAowagieTextPdfPdfPKCS7 *pkcs7, ComAowagieTextPdfPdfDictionary *v) {
  ComAowagieTextPdfPdfArray *b = [((ComAowagieTextPdfPdfDictionary *) nil_chk(v)) getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BYTERANGE)];
  ComAowagieTextPdfRandomAccessFileOrArray *rf = [((ComAowagieTextPdfPdfReader *) nil_chk(self->reader_)) getSafeFile];
  @try {
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(rf)) reOpen];
    IOSByteArray *buf = [IOSByteArray newArrayWithLength:8192];
    for (jint k = 0; k < [((ComAowagieTextPdfPdfArray *) nil_chk(b)) size]; ++k) {
      jint start = [((ComAowagieTextPdfPdfNumber *) nil_chk([b getAsNumberWithInt:k])) intValue];
      jint length = [((ComAowagieTextPdfPdfNumber *) nil_chk([b getAsNumberWithInt:++k])) intValue];
      [rf seekWithInt:start];
      while (length > 0) {
        jint rd = [rf readWithByteArray:buf withInt:0 withInt:JavaLangMath_minWithInt_withInt_(length, buf->size_)];
        if (rd <= 0) {
          break;
        }
        length -= rd;
        [((ComAowagieTextPdfPdfPKCS7 *) nil_chk(pkcs7)) updateWithByteArray:buf withInt:0 withInt:rd];
      }
    }
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
  @finally {
    @try {
      
#line 1799
      [rf close];
    }
    @catch (
#line 1799
    JavaLangException *e) {
    }
  }
}


#line 1805
void ComAowagieTextPdfAcroFields_markUsedWithComAowagieTextPdfPdfObject_(ComAowagieTextPdfAcroFields *self, ComAowagieTextPdfPdfObject *obj) {
  if (!self->append_) {
    return;
  }
  [((ComAowagieTextPdfPdfStamperImp *) nil_chk(((ComAowagieTextPdfPdfStamperImp *) cast_chk(self->writer_, [ComAowagieTextPdfPdfStamperImp class])))) markUsedWithComAowagieTextPdfPdfObject:obj];
}


#line 1988
ComAowagieTextPdfPushbuttonField *ComAowagieTextPdfAcroFields_getNewPushbuttonFromFieldWithNSString_(ComAowagieTextPdfAcroFields *self, NSString *field) {
  return ComAowagieTextPdfAcroFields_getNewPushbuttonFromFieldWithNSString_withInt_(self, field, 0);
}


#line 2003
ComAowagieTextPdfPushbuttonField *ComAowagieTextPdfAcroFields_getNewPushbuttonFromFieldWithNSString_withInt_(ComAowagieTextPdfAcroFields *self, NSString *field, jint order) {
  @try {
    if ([self getFieldTypeWithNSString:field] != ComAowagieTextPdfAcroFields_FIELD_TYPE_PUSHBUTTON) {
      return nil;
    }
    ComAowagieTextPdfAcroFields_Item *item = [self getFieldItemWithNSString:field];
    if (order >= [((ComAowagieTextPdfAcroFields_Item *) nil_chk(item)) size]) {
      return nil;
    }
    jint posi = order * 5;
    IOSFloatArray *pos = [self getFieldPositionsWithNSString:field];
    ComAowagieTextRectangle *box = new_ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(IOSFloatArray_Get(nil_chk(pos), posi + 1), IOSFloatArray_Get(pos, posi + 2), IOSFloatArray_Get(pos, posi + 3), IOSFloatArray_Get(pos, posi + 4));
    ComAowagieTextPdfPushbuttonField *newButton = new_ComAowagieTextPdfPushbuttonField_initPackagePrivateWithComAowagieTextPdfPdfWriter_withComAowagieTextRectangle_withNSString_(self->writer_, box, nil);
    ComAowagieTextPdfPdfDictionary *dic = [item getMergedWithInt:order];
    [self decodeGenericDictionaryWithComAowagieTextPdfPdfDictionary:dic withComAowagieTextPdfBaseField:newButton];
    ComAowagieTextPdfPdfDictionary *mk = [((ComAowagieTextPdfPdfDictionary *) nil_chk(dic)) getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, MK)];
    if (mk != nil) {
      ComAowagieTextPdfPdfString *text = [mk getAsStringWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CA)];
      if (text != nil) {
        [newButton setTextWithNSString:[text toUnicodeString]];
      }
      ComAowagieTextPdfPdfNumber *tp = [mk getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TP)];
      if (tp != nil) {
        [newButton setLayoutWithInt:[tp intValue] + 1];
      }
      ComAowagieTextPdfPdfDictionary *ifit = [mk getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, IF)];
      if (ifit != nil) {
        ComAowagieTextPdfPdfName *sw = [ifit getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SW)];
        if (sw != nil) {
          jint scale_ = ComAowagieTextPdfPushbuttonField_SCALE_ICON_ALWAYS;
          if ([sw isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, B)]) {
            scale_ = ComAowagieTextPdfPushbuttonField_SCALE_ICON_IS_TOO_BIG;
          }
          else
#line 2035
          if ([sw isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, S)]) {
            scale_ = ComAowagieTextPdfPushbuttonField_SCALE_ICON_IS_TOO_SMALL;
          }
          else
#line 2037
          if ([sw isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, N)]) {
            scale_ = ComAowagieTextPdfPushbuttonField_SCALE_ICON_NEVER;
          }
          [newButton setScaleIconWithInt:scale_];
        }
        sw = [ifit getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, S)];
        if (sw != nil) {
          if ([sw isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, A)]) {
            [newButton setProportionalIconWithBoolean:false];
          }
        }
        ComAowagieTextPdfPdfArray *aj = [ifit getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, A)];
        if (aj != nil && [aj size] == 2) {
          jfloat left = [((ComAowagieTextPdfPdfNumber *) nil_chk([aj getAsNumberWithInt:0])) floatValue];
          jfloat bottom = [((ComAowagieTextPdfPdfNumber *) nil_chk([aj getAsNumberWithInt:1])) floatValue];
          [newButton setIconHorizontalAdjustmentWithFloat:left];
          [newButton setIconVerticalAdjustmentWithFloat:bottom];
        }
        ComAowagieTextPdfPdfBoolean *fb = [ifit getAsBooleanWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FB)];
        if (fb != nil && [fb booleanValue]) {
          [newButton setIconFitToBoundsWithBoolean:true];
        }
      }
      ComAowagieTextPdfPdfObject *i = [mk getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, I)];
      if (i != nil && [i isIndirect]) {
        [newButton setIconReferenceWithComAowagieTextPdfPRIndirectReference:(ComAowagieTextPdfPRIndirectReference *) cast_chk(i, [ComAowagieTextPdfPRIndirectReference class])];
      }
    }
    return newButton;
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 2082
jboolean ComAowagieTextPdfAcroFields_replacePushbuttonFieldWithNSString_withComAowagieTextPdfPdfFormField_(ComAowagieTextPdfAcroFields *self, NSString *field, ComAowagieTextPdfPdfFormField *button) {
  return ComAowagieTextPdfAcroFields_replacePushbuttonFieldWithNSString_withComAowagieTextPdfPdfFormField_withInt_(self, field, button, 0);
}


#line 2099
jboolean ComAowagieTextPdfAcroFields_replacePushbuttonFieldWithNSString_withComAowagieTextPdfPdfFormField_withInt_(ComAowagieTextPdfAcroFields *self, NSString *field, ComAowagieTextPdfPdfFormField *button, jint order) {
  if ([self getFieldTypeWithNSString:field] != ComAowagieTextPdfAcroFields_FIELD_TYPE_PUSHBUTTON) {
    return false;
  }
  ComAowagieTextPdfAcroFields_Item *item = [self getFieldItemWithNSString:field];
  if (order >= [((ComAowagieTextPdfAcroFields_Item *) nil_chk(item)) size]) {
    return false;
  }
  ComAowagieTextPdfPdfDictionary *merged = [item getMergedWithInt:order];
  ComAowagieTextPdfPdfDictionary *values = [item getValueWithInt:order];
  ComAowagieTextPdfPdfDictionary *widgets = [item getWidgetWithInt:order];
  {
    IOSObjectArray *a__ = ComAowagieTextPdfAcroFields_buttonRemove;
    ComAowagieTextPdfPdfName * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ComAowagieTextPdfPdfName * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ComAowagieTextPdfPdfName *element = *b__++;
      
#line 2111
      [((ComAowagieTextPdfPdfDictionary *) nil_chk(merged)) removeWithComAowagieTextPdfPdfName:element];
      [((ComAowagieTextPdfPdfDictionary *) nil_chk(values)) removeWithComAowagieTextPdfPdfName:element];
      [((ComAowagieTextPdfPdfDictionary *) nil_chk(widgets)) removeWithComAowagieTextPdfPdfName:element];
    }
  }
  
#line 2115
  for (id __strong element in nil_chk([((ComAowagieTextPdfPdfFormField *) nil_chk(button)) getKeys])) {
    ComAowagieTextPdfPdfName *key = (ComAowagieTextPdfPdfName *) cast_chk(element, [ComAowagieTextPdfPdfName class]);
    if ([((ComAowagieTextPdfPdfName *) nil_chk(key)) isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, T)] || [key isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, RECT)]) {
      continue;
    }
    if ([key isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, FF)]) {
      [((ComAowagieTextPdfPdfDictionary *) nil_chk(values)) putWithComAowagieTextPdfPdfName:key withComAowagieTextPdfPdfObject:[button getWithComAowagieTextPdfPdfName:key]];
    }
    else {
      
#line 2123
      [((ComAowagieTextPdfPdfDictionary *) nil_chk(widgets)) putWithComAowagieTextPdfPdfName:key withComAowagieTextPdfPdfObject:[button getWithComAowagieTextPdfPdfName:key]];
    }
    [((ComAowagieTextPdfPdfDictionary *) nil_chk(merged)) putWithComAowagieTextPdfPdfName:key withComAowagieTextPdfPdfObject:[button getWithComAowagieTextPdfPdfName:key]];
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfAcroFields)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/AcroFields.java"


#line 1280
@implementation ComAowagieTextPdfAcroFields_Item

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 1280
- (instancetype)init {
  ComAowagieTextPdfAcroFields_Item_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 1313
- (void)writeToAllWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key
                withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)value
                                       withInt:(jint)writeFlags {
  
#line 1314
  jint i;
  ComAowagieTextPdfPdfDictionary *curDict = nil;
  if ((writeFlags & ComAowagieTextPdfAcroFields_Item_WRITE_MERGED) != 0) {
    for (i = 0; i < [((JavaUtilArrayList *) nil_chk(self->merged_)) size]; ++i) {
      curDict = [self getMergedWithInt:i];
      [((ComAowagieTextPdfPdfDictionary *) nil_chk(curDict)) putWithComAowagieTextPdfPdfName:key withComAowagieTextPdfPdfObject:value];
    }
  }
  if ((writeFlags & ComAowagieTextPdfAcroFields_Item_WRITE_WIDGET) != 0) {
    for (i = 0; i < [((JavaUtilArrayList *) nil_chk(self->widgets_)) size]; ++i) {
      curDict = [self getWidgetWithInt:i];
      [((ComAowagieTextPdfPdfDictionary *) nil_chk(curDict)) putWithComAowagieTextPdfPdfName:key withComAowagieTextPdfPdfObject:value];
    }
  }
  if ((writeFlags & ComAowagieTextPdfAcroFields_Item_WRITE_VALUE) != 0) {
    for (i = 0; i < [((JavaUtilArrayList *) nil_chk(self->values_)) size]; ++i) {
      curDict = [self getValueWithInt:i];
      [((ComAowagieTextPdfPdfDictionary *) nil_chk(curDict)) putWithComAowagieTextPdfPdfName:key withComAowagieTextPdfPdfObject:value];
    }
  }
}


#line 1343
- (void)markUsedWithComAowagieTextPdfAcroFields:(ComAowagieTextPdfAcroFields *)parentFields
                                        withInt:(jint)writeFlags {
  
#line 1344
  if ((writeFlags & ComAowagieTextPdfAcroFields_Item_WRITE_VALUE) != 0) {
    for (jint i = 0; i < [self size]; ++i) {
      ComAowagieTextPdfAcroFields_markUsedWithComAowagieTextPdfPdfObject_(nil_chk(parentFields), [self getValueWithInt:i]);
    }
  }
  if ((writeFlags & ComAowagieTextPdfAcroFields_Item_WRITE_WIDGET) != 0) {
    for (jint i = 0; i < [self size]; ++i) {
      ComAowagieTextPdfAcroFields_markUsedWithComAowagieTextPdfPdfObject_(nil_chk(parentFields), [self getWidgetWithInt:i]);
    }
  }
}


#line 1413
- (jint)size {
  return [((JavaUtilArrayList *) nil_chk(self->values_)) size];
}


#line 1424
- (void)removeWithInt:(jint)killIdx {
  (void) [((JavaUtilArrayList *) nil_chk(self->values_)) removeWithInt:killIdx];
  (void) [((JavaUtilArrayList *) nil_chk(self->widgets_)) removeWithInt:killIdx];
  (void) [((JavaUtilArrayList *) nil_chk(self->widget_refs_)) removeWithInt:killIdx];
  (void) [((JavaUtilArrayList *) nil_chk(self->merged_)) removeWithInt:killIdx];
  (void) [((JavaUtilArrayList *) nil_chk(self->page_)) removeWithInt:killIdx];
  (void) [((JavaUtilArrayList *) nil_chk(self->tabOrder_)) removeWithInt:killIdx];
}


#line 1440
- (ComAowagieTextPdfPdfDictionary *)getValueWithInt:(jint)idx {
  return [((JavaUtilArrayList *) nil_chk(self->values_)) getWithInt:idx];
}


#line 1450
- (void)addValueWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)value {
  [((JavaUtilArrayList *) nil_chk(self->values_)) addWithId:value];
}


#line 1461
- (ComAowagieTextPdfPdfDictionary *)getWidgetWithInt:(jint)idx {
  return [((JavaUtilArrayList *) nil_chk(self->widgets_)) getWithInt:idx];
}


#line 1471
- (void)addWidgetWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)widget {
  [((JavaUtilArrayList *) nil_chk(self->widgets_)) addWithId:widget];
}


#line 1482
- (ComAowagieTextPdfPdfIndirectReference *)getWidgetRefWithInt:(jint)idx {
  return [((JavaUtilArrayList *) nil_chk(self->widget_refs_)) getWithInt:idx];
}


#line 1492
- (void)addWidgetRefWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)widgRef {
  [((JavaUtilArrayList *) nil_chk(self->widget_refs_)) addWithId:widgRef];
}


#line 1506
- (ComAowagieTextPdfPdfDictionary *)getMergedWithInt:(jint)idx {
  return [((JavaUtilArrayList *) nil_chk(self->merged_)) getWithInt:idx];
}


#line 1516
- (void)addMergedWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)mergeDict {
  [((JavaUtilArrayList *) nil_chk(self->merged_)) addWithId:mergeDict];
}


#line 1527
- (JavaLangInteger *)getPageWithInt:(jint)idx {
  return [((JavaUtilArrayList *) nil_chk(self->page_)) getWithInt:idx];
}


#line 1537
- (void)addPageWithInt:(jint)pg {
  [((JavaUtilArrayList *) nil_chk(self->page_)) addWithId:new_JavaLangInteger_initWithInt_(pg)];
}


#line 1548
- (void)forcePageWithInt:(jint)idx
                 withInt:(jint)pg {
  
#line 1549
  (void) [((JavaUtilArrayList *) nil_chk(self->page_)) setWithInt:idx withId:new_JavaLangInteger_initWithInt_(pg)];
}


#line 1559
- (JavaLangInteger *)getTabOrderWithInt:(jint)idx {
  return [((JavaUtilArrayList *) nil_chk(self->tabOrder_)) getWithInt:idx];
}


#line 1569
- (void)addTabOrderWithInt:(jint)order {
  [((JavaUtilArrayList *) nil_chk(self->tabOrder_)) addWithId:new_JavaLangInteger_initWithInt_(order)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x1, 9, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 8, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfIndirectReference;", 0x1, 11, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x1, 14, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 8, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, 16, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 18, 19, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, 20, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 21, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(writeToAllWithComAowagieTextPdfPdfName:withComAowagieTextPdfPdfObject:withInt:);
  methods[2].selector = @selector(markUsedWithComAowagieTextPdfAcroFields:withInt:);
  methods[3].selector = @selector(size);
  methods[4].selector = @selector(removeWithInt:);
  methods[5].selector = @selector(getValueWithInt:);
  methods[6].selector = @selector(addValueWithComAowagieTextPdfPdfDictionary:);
  methods[7].selector = @selector(getWidgetWithInt:);
  methods[8].selector = @selector(addWidgetWithComAowagieTextPdfPdfDictionary:);
  methods[9].selector = @selector(getWidgetRefWithInt:);
  methods[10].selector = @selector(addWidgetRefWithComAowagieTextPdfPdfIndirectReference:);
  methods[11].selector = @selector(getMergedWithInt:);
  methods[12].selector = @selector(addMergedWithComAowagieTextPdfPdfDictionary:);
  methods[13].selector = @selector(getPageWithInt:);
  methods[14].selector = @selector(addPageWithInt:);
  methods[15].selector = @selector(forcePageWithInt:withInt:);
  methods[16].selector = @selector(getTabOrderWithInt:);
  methods[17].selector = @selector(addTabOrderWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "WRITE_MERGED", "I", .constantValue.asInt = ComAowagieTextPdfAcroFields_Item_WRITE_MERGED, 0x19, -1, -1, -1, -1 },
    { "WRITE_WIDGET", "I", .constantValue.asInt = ComAowagieTextPdfAcroFields_Item_WRITE_WIDGET, 0x19, -1, -1, -1, -1 },
    { "WRITE_VALUE", "I", .constantValue.asInt = ComAowagieTextPdfAcroFields_Item_WRITE_VALUE, 0x19, -1, -1, -1, -1 },
    { "values_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x11, -1, -1, 22, 23 },
    { "widgets_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x11, -1, -1, 22, 24 },
    { "widget_refs_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x11, -1, -1, 25, 26 },
    { "merged_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x11, -1, -1, 22, 27 },
    { "page_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x11, -1, -1, 28, 29 },
    { "tabOrder_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x11, -1, -1, 28, 30 },
  };
  static const void *ptrTable[] = { "writeToAll", "LComAowagieTextPdfPdfName;LComAowagieTextPdfPdfObject;I", "markUsed", "LComAowagieTextPdfAcroFields;I", "remove", "I", "getValue", "addValue", "LComAowagieTextPdfPdfDictionary;", "getWidget", "addWidget", "getWidgetRef", "addWidgetRef", "LComAowagieTextPdfPdfIndirectReference;", "getMerged", "addMerged", "getPage", "addPage", "forcePage", "II", "getTabOrder", "addTabOrder", "Ljava/util/ArrayList<Lcom/aowagie/text/pdf/PdfDictionary;>;", (void *)&ComAowagieTextPdfAcroFields_Item__Annotations$0, (void *)&ComAowagieTextPdfAcroFields_Item__Annotations$1, "Ljava/util/ArrayList<Lcom/aowagie/text/pdf/PdfIndirectReference;>;", (void *)&ComAowagieTextPdfAcroFields_Item__Annotations$2, (void *)&ComAowagieTextPdfAcroFields_Item__Annotations$3, "Ljava/util/ArrayList<Ljava/lang/Integer;>;", (void *)&ComAowagieTextPdfAcroFields_Item__Annotations$4, (void *)&ComAowagieTextPdfAcroFields_Item__Annotations$5, "LComAowagieTextPdfAcroFields;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfAcroFields_Item = { "Item", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x9, 18, 9, 31, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfAcroFields_Item;
}

@end


#line 1280
void ComAowagieTextPdfAcroFields_Item_init(ComAowagieTextPdfAcroFields_Item *self) {
  NSObject_init(self);
  self->values_ = new_JavaUtilArrayList_init();
  self->widgets_ = new_JavaUtilArrayList_init();
  self->widget_refs_ = new_JavaUtilArrayList_init();
  self->merged_ = new_JavaUtilArrayList_init();
  self->page_ = new_JavaUtilArrayList_init();
  self->tabOrder_ = new_JavaUtilArrayList_init();
}


#line 1280
ComAowagieTextPdfAcroFields_Item *new_ComAowagieTextPdfAcroFields_Item_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfAcroFields_Item, init)
}


#line 1280
ComAowagieTextPdfAcroFields_Item *create_ComAowagieTextPdfAcroFields_Item_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfAcroFields_Item, init)
}

IOSObjectArray *ComAowagieTextPdfAcroFields_Item__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComAowagieTextPdfAcroFields_Item__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComAowagieTextPdfAcroFields_Item__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComAowagieTextPdfAcroFields_Item__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComAowagieTextPdfAcroFields_Item__Annotations$4() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComAowagieTextPdfAcroFields_Item__Annotations$5() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfAcroFields_Item)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/AcroFields.java"


#line 1939
@implementation ComAowagieTextPdfAcroFields_SorterComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 1939
- (instancetype)init {
  ComAowagieTextPdfAcroFields_SorterComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 1940
- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  jint n1 = IOSIntArray_Get(nil_chk(((IOSIntArray *) cast_chk(IOSObjectArray_Get(nil_chk(((IOSObjectArray *) cast_check(o1, IOSClass_arrayType(NSObject_class_(), 1)))), 1), [IOSIntArray class]))), 0);
  jint n2 = IOSIntArray_Get(nil_chk(((IOSIntArray *) cast_chk(IOSObjectArray_Get(nil_chk(((IOSObjectArray *) cast_check(o2, IOSClass_arrayType(NSObject_class_(), 1)))), 1), [IOSIntArray class]))), 0);
  return n1 - n2;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LNSObject;LNSObject;", "LComAowagieTextPdfAcroFields;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfAcroFields_SorterComparator = { "SorterComparator", "com.aowagie.text.pdf", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfAcroFields_SorterComparator;
}

@end


#line 1939
void ComAowagieTextPdfAcroFields_SorterComparator_init(ComAowagieTextPdfAcroFields_SorterComparator *self) {
  NSObject_init(self);
}


#line 1939
ComAowagieTextPdfAcroFields_SorterComparator *new_ComAowagieTextPdfAcroFields_SorterComparator_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfAcroFields_SorterComparator, init)
}


#line 1939
ComAowagieTextPdfAcroFields_SorterComparator *create_ComAowagieTextPdfAcroFields_SorterComparator_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfAcroFields_SorterComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfAcroFields_SorterComparator)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/AcroFields.java"


#line 2130
@implementation ComAowagieTextPdfAcroFields_RevisionStream


#line 2137
- (instancetype)initWithComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)raf
                                                         withInt:(jint)length {
  ComAowagieTextPdfAcroFields_RevisionStream_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_(self, raf, length);
  return self;
}


#line 2142
- (jint)read {
  
#line 2144
  jint n = [self readWithByteArray:self->b_];
  if (n != 1) {
    return -1;
  }
  return IOSByteArray_Get(nil_chk(self->b_), 0) & (jint) 0xff;
}


#line 2151
- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len {
  
#line 2153
  if (b == nil) {
    @throw new_JavaLangNullPointerException_init();
  }
  else
#line 2155
  if (off < 0 || off > b->size_ || len < 0 ||
#line 2156
  off + len > b->size_ || off + len < 0) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  else
#line 2158
  if (len == 0) {
    return 0;
  }
  if (self->rangePosition_ >= self->length_) {
    [self close];
    return -1;
  }
  jint elen = JavaLangMath_minWithInt_withInt_(len, self->length_ - self->rangePosition_);
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->raf_)) readFullyWithByteArray:b withInt:off withInt:elen];
  self->rangePosition_ += elen;
  return elen;
}


#line 2171
- (void)close {
  
#line 2173
  if (!self->closed_) {
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->raf_)) close];
    self->closed_ = true;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComAowagieTextPdfRandomAccessFileOrArray:withInt:);
  methods[1].selector = @selector(read);
  methods[2].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "b_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "raf_", "LComAowagieTextPdfRandomAccessFileOrArray;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rangePosition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfRandomAccessFileOrArray;I", "LJavaIoIOException;", "read", "[BII", "LComAowagieTextPdfAcroFields;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfAcroFields_RevisionStream = { "RevisionStream", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0xa, 4, 5, 4, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfAcroFields_RevisionStream;
}

@end


#line 2137
void ComAowagieTextPdfAcroFields_RevisionStream_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_(ComAowagieTextPdfAcroFields_RevisionStream *self, ComAowagieTextPdfRandomAccessFileOrArray *raf, jint length) {
  JavaIoInputStream_init(self);
  self->b_ = [IOSByteArray newArrayWithLength:
#line 2131
  1];
  self->rangePosition_ =
#line 2134
  0;
  
#line 2138
  self->raf_ = raf;
  self->length_ = length;
}


#line 2137
ComAowagieTextPdfAcroFields_RevisionStream *new_ComAowagieTextPdfAcroFields_RevisionStream_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_(ComAowagieTextPdfRandomAccessFileOrArray *raf, jint length) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfAcroFields_RevisionStream, initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_, raf, length)
}


#line 2137
ComAowagieTextPdfAcroFields_RevisionStream *create_ComAowagieTextPdfAcroFields_RevisionStream_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_(ComAowagieTextPdfRandomAccessFileOrArray *raf, jint length) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfAcroFields_RevisionStream, initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_, raf, length)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfAcroFields_RevisionStream)
