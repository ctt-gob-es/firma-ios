//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/CMapAwareDocumentFont.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/pdf/CMapAwareDocumentFont.h"
#include "com/aowagie/text/pdf/DocumentFont.h"
#include "com/aowagie/text/pdf/IntHashtable.h"
#include "com/aowagie/text/pdf/PRIndirectReference.h"
#include "com/aowagie/text/pdf/PRStream.h"
#include "com/aowagie/text/pdf/PdfDictionary.h"
#include "com/aowagie/text/pdf/PdfName.h"
#include "com/aowagie/text/pdf/PdfObject.h"
#include "com/aowagie/text/pdf/PdfReader.h"
#include "com/aowagie/text/pdf/fonts/cmaps/CMap.h"
#include "com/aowagie/text/pdf/fonts/cmaps/CMapParser.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Error.h"
#include "java/lang/StringBuffer.h"

static jint (*ComAowagieTextPdfCMapAwareDocumentFont_super$_getWidthWithInt_)(id, SEL, jint);

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/CMapAwareDocumentFont must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfCMapAwareDocumentFont () {
 @public
  /*!
   @brief The font dictionary.
   */
  ComAowagieTextPdfPdfDictionary *fontDic_;
  /*!
   @brief the width of a space for this font, in normalized 1000 point units
   */
  jint spaceWidth_;
  /*!
   @brief The CMap constructed from the ToUnicode map from the font's dictionary, if present.
   This CMap transforms CID values into unicode equivalent
   */
  ComAowagieTextPdfFontsCmapsCMap *toUnicodeCmap_;
  /*!
   @brief Mapping between CID code (single byte only for now) and unicode equivalent
   as derived by the font's encoding.Only needed if the ToUnicode CMap is not provided.
   */
  IOSCharArray *cidbyte2uni_;
}

/*!
 @brief Parses the ToUnicode entry, if present, and constructs a CMap for it
 @since 2.1.7
 */
- (void)processToUnicode;

/*!
 @brief Inverts DocumentFont's uni2byte mapping to obtain a cid-to-unicode mapping based
  on the font's encoding
 @since 2.1.7
 */
- (void)processUni2Byte;

/*!
 @brief For all widths of all glyphs, compute the average width in normalized 1000 point units.
 This is used to give some meaningful width in cases where we need an average font width
  (such as if the width of a space isn't specified by a given font)
 @return the average width of all non-zero width glyphs in the font
 */
- (jint)computeAverageWidth;

/*!
 @brief Decodes a single CID (represented by one or two bytes) to a unicode String.
 @param bytes the bytes making up the character code to convert
 @param offset an offset
 @param len a length
 @return a String containing the encoded form of the input bytes using the font's encoding.
 */
- (NSString *)decodeSingleCIDWithByteArray:(IOSByteArray *)bytes
                                   withInt:(jint)offset
                                   withInt:(jint)len;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfCMapAwareDocumentFont, fontDic_, ComAowagieTextPdfPdfDictionary *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCMapAwareDocumentFont, toUnicodeCmap_, ComAowagieTextPdfFontsCmapsCMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCMapAwareDocumentFont, cidbyte2uni_, IOSCharArray *)

__attribute__((unused)) static void ComAowagieTextPdfCMapAwareDocumentFont_processToUnicode(ComAowagieTextPdfCMapAwareDocumentFont *self);

__attribute__((unused)) static void ComAowagieTextPdfCMapAwareDocumentFont_processUni2Byte(ComAowagieTextPdfCMapAwareDocumentFont *self);

__attribute__((unused)) static jint ComAowagieTextPdfCMapAwareDocumentFont_computeAverageWidth(ComAowagieTextPdfCMapAwareDocumentFont *self);

__attribute__((unused)) static NSString *ComAowagieTextPdfCMapAwareDocumentFont_decodeSingleCIDWithByteArray_withInt_withInt_(ComAowagieTextPdfCMapAwareDocumentFont *self, IOSByteArray *bytes, jint offset, jint len);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/CMapAwareDocumentFont.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfCMapAwareDocumentFont)


#line 60
@implementation ComAowagieTextPdfCMapAwareDocumentFont


#line 80
- (instancetype)initWithComAowagieTextPdfPRIndirectReference:(ComAowagieTextPdfPRIndirectReference *)refFont {
  ComAowagieTextPdfCMapAwareDocumentFont_initWithComAowagieTextPdfPRIndirectReference_(self, refFont);
  return self;
}


#line 100
- (void)processToUnicode {
  ComAowagieTextPdfCMapAwareDocumentFont_processToUnicode(self);
}


#line 121
- (void)processUni2Byte {
  ComAowagieTextPdfCMapAwareDocumentFont_processUni2Byte(self);
}


#line 146
- (jint)computeAverageWidth {
  return ComAowagieTextPdfCMapAwareDocumentFont_computeAverageWidth(self);
}


#line 163
- (jint)getWidthWithInt:(jint)char1 {
  
#line 165
  if (char1 == ' ') {
    return self->spaceWidth_;
  }
  
#line 169
  return [super getWidthWithInt:char1];
}


#line 179
- (NSString *)decodeSingleCIDWithByteArray:(IOSByteArray *)bytes
                                   withInt:(jint)offset
                                   withInt:(jint)len {
  return ComAowagieTextPdfCMapAwareDocumentFont_decodeSingleCIDWithByteArray_withInt_withInt_(self, bytes, offset, len);
}


#line 204
- (NSString *)decodeWithByteArray:(IOSByteArray *)cidbytes
                          withInt:(jint)offset
                          withInt:(jint)len {
  
#line 205
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  for (jint i = offset; i < offset + len; i++) {
    NSString *rslt = ComAowagieTextPdfCMapAwareDocumentFont_decodeSingleCIDWithByteArray_withInt_withInt_(self, cidbytes, i, 1);
    if (rslt == nil) {
      rslt = ComAowagieTextPdfCMapAwareDocumentFont_decodeSingleCIDWithByteArray_withInt_withInt_(self, cidbytes, i, 2);
      i++;
    }
    (void) [sb appendWithNSString:rslt];
  }
  
#line 215
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComAowagieTextPdfPRIndirectReference:);
  methods[1].selector = @selector(processToUnicode);
  methods[2].selector = @selector(processUni2Byte);
  methods[3].selector = @selector(computeAverageWidth);
  methods[4].selector = @selector(getWidthWithInt:);
  methods[5].selector = @selector(decodeSingleCIDWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(decodeWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fontDic_", "LComAowagieTextPdfPdfDictionary;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "spaceWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "toUnicodeCmap_", "LComAowagieTextPdfFontsCmapsCMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cidbyte2uni_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfPRIndirectReference;", "getWidth", "I", "decodeSingleCID", "[BII", "decode" };
  static const J2ObjcClassInfo _ComAowagieTextPdfCMapAwareDocumentFont = { "CMapAwareDocumentFont", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x1, 7, 4, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfCMapAwareDocumentFont;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfCMapAwareDocumentFont class]) {
    ComAowagieTextPdfCMapAwareDocumentFont_super$_getWidthWithInt_ = (jint (*)(id, SEL, jint))[ComAowagieTextPdfDocumentFont instanceMethodForSelector:@selector(getWidthWithInt:)];
    J2OBJC_SET_INITIALIZED(ComAowagieTextPdfCMapAwareDocumentFont)
  }
}

@end


#line 80
void ComAowagieTextPdfCMapAwareDocumentFont_initWithComAowagieTextPdfPRIndirectReference_(ComAowagieTextPdfCMapAwareDocumentFont *self, ComAowagieTextPdfPRIndirectReference *refFont) {
  ComAowagieTextPdfDocumentFont_initWithComAowagieTextPdfPRIndirectReference_(self, refFont);
  self->fontDic_ = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_(refFont), [ComAowagieTextPdfPdfDictionary class]);
  
#line 84
  ComAowagieTextPdfCMapAwareDocumentFont_processToUnicode(self);
  if (self->toUnicodeCmap_ == nil) {
    ComAowagieTextPdfCMapAwareDocumentFont_processUni2Byte(self);
  }
  
#line 89
  self->spaceWidth_ = ComAowagieTextPdfCMapAwareDocumentFont_super$_getWidthWithInt_(self, @selector(getWidthWithInt:), ' ');
  if (self->spaceWidth_ == 0) {
    self->spaceWidth_ = ComAowagieTextPdfCMapAwareDocumentFont_computeAverageWidth(self);
  }
}


#line 80
ComAowagieTextPdfCMapAwareDocumentFont *new_ComAowagieTextPdfCMapAwareDocumentFont_initWithComAowagieTextPdfPRIndirectReference_(ComAowagieTextPdfPRIndirectReference *refFont) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfCMapAwareDocumentFont, initWithComAowagieTextPdfPRIndirectReference_, refFont)
}


#line 80
ComAowagieTextPdfCMapAwareDocumentFont *create_ComAowagieTextPdfCMapAwareDocumentFont_initWithComAowagieTextPdfPRIndirectReference_(ComAowagieTextPdfPRIndirectReference *refFont) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfCMapAwareDocumentFont, initWithComAowagieTextPdfPRIndirectReference_, refFont)
}


#line 100
void ComAowagieTextPdfCMapAwareDocumentFont_processToUnicode(ComAowagieTextPdfCMapAwareDocumentFont *self) {
  
#line 102
  ComAowagieTextPdfPdfObject *toUni = [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->fontDic_)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TOUNICODE)];
  if (toUni != nil) {
    
#line 105
    @try {
      IOSByteArray *touni = ComAowagieTextPdfPdfReader_getStreamBytesWithComAowagieTextPdfPRStream_((ComAowagieTextPdfPRStream *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_(toUni), [ComAowagieTextPdfPRStream class]));
      
#line 108
      ComAowagieTextPdfFontsCmapsCMapParser *cmapParser = new_ComAowagieTextPdfFontsCmapsCMapParser_init();
      self->toUnicodeCmap_ = [cmapParser parseWithJavaIoInputStream:new_JavaIoByteArrayInputStream_initWithByteArray_(touni)];
    }
    @catch (
#line 110
    JavaIoIOException *e) {
      @throw new_JavaLangError_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Unable to process ToUnicode map - ", [e getMessage]), e);
    }
  }
}


#line 121
void ComAowagieTextPdfCMapAwareDocumentFont_processUni2Byte(ComAowagieTextPdfCMapAwareDocumentFont *self) {
  ComAowagieTextPdfIntHashtable *uni2byte = [self getUni2Byte];
  IOSIntArray *e = [((ComAowagieTextPdfIntHashtable *) nil_chk(uni2byte)) toOrderedKeys];
  
#line 125
  self->cidbyte2uni_ = [IOSCharArray newArrayWithLength:256];
  {
    IOSIntArray *a__ =
#line 126
    e;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint element = *b__++;
      
#line 127
      jint n = [uni2byte getWithInt:element];
      
#line 132
      if (IOSCharArray_Get(nil_chk(self->cidbyte2uni_), n) == 0) {
        *IOSCharArray_GetRef(self->cidbyte2uni_, n) = (jchar) element;
      }
    }
  }
}


#line 146
jint ComAowagieTextPdfCMapAwareDocumentFont_computeAverageWidth(ComAowagieTextPdfCMapAwareDocumentFont *self) {
  jint count = 0;
  jint total = 0;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(self->widths_))->size_; i++) {
    if (IOSIntArray_Get(self->widths_, i) != 0) {
      total += IOSIntArray_Get(self->widths_, i);
      count++;
    }
  }
  return count != 0 ? JreIntDiv(total, count) : 0;
}


#line 179
NSString *ComAowagieTextPdfCMapAwareDocumentFont_decodeSingleCIDWithByteArray_withInt_withInt_(ComAowagieTextPdfCMapAwareDocumentFont *self, IOSByteArray *bytes, jint offset, jint len) {
  if (self->toUnicodeCmap_ != nil) {
    if (offset + len > ((IOSByteArray *) nil_chk(bytes))->size_) {
      @throw new_JavaLangArrayIndexOutOfBoundsException_initWithNSString_(JreStrcat("$II", @"Invalid index: ", offset, len));
    }
    return [self->toUnicodeCmap_ lookupWithByteArray:bytes withInt:offset withInt:len];
  }
  
#line 187
  if (len == 1) {
    return [NSString java_stringWithCharacters:self->cidbyte2uni_ offset:(jint) 0xff & IOSByteArray_Get(nil_chk(bytes), offset) length:1];
  }
  
#line 191
  @throw new_JavaLangError_initWithNSString_(@"Multi-byte glyphs not implemented yet");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfCMapAwareDocumentFont)
