//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/CJKFont.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/DocumentException.h"
#include "com/aowagie/text/pdf/BaseFont.h"
#include "com/aowagie/text/pdf/CJKFont.h"
#include "com/aowagie/text/pdf/IntHashtable.h"
#include "com/aowagie/text/pdf/PdfArray.h"
#include "com/aowagie/text/pdf/PdfDictionary.h"
#include "com/aowagie/text/pdf/PdfIndirectObject.h"
#include "com/aowagie/text/pdf/PdfIndirectReference.h"
#include "com/aowagie/text/pdf/PdfLiteral.h"
#include "com/aowagie/text/pdf/PdfName.h"
#include "com/aowagie/text/pdf/PdfNumber.h"
#include "com/aowagie/text/pdf/PdfObject.h"
#include "com/aowagie/text/pdf/PdfStream.h"
#include "com/aowagie/text/pdf/PdfString.h"
#include "com/aowagie/text/pdf/PdfWriter.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Enumeration.h"
#include "java/util/HashMap.h"
#include "java/util/Hashtable.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Properties.h"
#include "java/util/StringTokenizer.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/CJKFont must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfCJKFont () {
 @public
  /*!
   @brief The font name
   */
  NSString *fontName_;
  /*!
   @brief The style modifier
   */
  NSString *style_;
  /*!
   @brief The CMap name associated with this font
   */
  NSString *CMap_;
  jboolean cidDirect_;
  IOSCharArray *translationMap_;
  ComAowagieTextPdfIntHashtable *vMetrics_;
  ComAowagieTextPdfIntHashtable *hMetrics_;
  JavaUtilHashMap *fontDesc_;
  jboolean vertical_;
}

+ (void)loadProperties;

- (ComAowagieTextPdfPdfDictionary *)getFontDescriptor;

- (ComAowagieTextPdfPdfDictionary *)getCIDFontWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)fontDescriptor
                                                      withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)cjkTag;

- (ComAowagieTextPdfPdfDictionary *)getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)CIDFont;

- (jfloat)getDescNumberWithNSString:(NSString *)name;

- (jfloat)getBBoxWithInt:(jint)idx;

+ (IOSCharArray *)readCMapWithNSString:(NSString *)name;

+ (ComAowagieTextPdfIntHashtable *)createMetricWithNSString:(NSString *)s;

+ (NSString *)convertToHCIDMetricsWithIntArray:(IOSIntArray *)keys
             withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)h;

+ (NSString *)convertToVCIDMetricsWithIntArray:(IOSIntArray *)keys
             withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)v
             withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)h;

+ (JavaUtilHashMap *)readFontPropertiesWithNSString:(NSString *)name;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfCJKFont, fontName_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCJKFont, style_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCJKFont, CMap_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCJKFont, translationMap_, IOSCharArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCJKFont, vMetrics_, ComAowagieTextPdfIntHashtable *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCJKFont, hMetrics_, ComAowagieTextPdfIntHashtable *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCJKFont, fontDesc_, JavaUtilHashMap *)

inline jint ComAowagieTextPdfCJKFont_get_FIRST(void);
#define ComAowagieTextPdfCJKFont_FIRST 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCJKFont, FIRST, jint)

inline jint ComAowagieTextPdfCJKFont_get_BRACKET(void);
#define ComAowagieTextPdfCJKFont_BRACKET 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCJKFont, BRACKET, jint)

inline jint ComAowagieTextPdfCJKFont_get_SERIAL(void);
#define ComAowagieTextPdfCJKFont_SERIAL 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCJKFont, SERIAL, jint)

inline jint ComAowagieTextPdfCJKFont_get_V1Y(void);
#define ComAowagieTextPdfCJKFont_V1Y 880
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCJKFont, V1Y, jint)

inline JavaUtilProperties *ComAowagieTextPdfCJKFont_get_cjkFonts(void);
inline JavaUtilProperties *ComAowagieTextPdfCJKFont_set_cjkFonts(JavaUtilProperties *value);
static JavaUtilProperties *ComAowagieTextPdfCJKFont_cjkFonts;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfCJKFont, cjkFonts, JavaUtilProperties *)

inline JavaUtilProperties *ComAowagieTextPdfCJKFont_get_cjkEncodings(void);
inline JavaUtilProperties *ComAowagieTextPdfCJKFont_set_cjkEncodings(JavaUtilProperties *value);
static JavaUtilProperties *ComAowagieTextPdfCJKFont_cjkEncodings;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfCJKFont, cjkEncodings, JavaUtilProperties *)

inline JavaUtilHashtable *ComAowagieTextPdfCJKFont_get_allCMaps(void);
inline JavaUtilHashtable *ComAowagieTextPdfCJKFont_set_allCMaps(JavaUtilHashtable *value);
static JavaUtilHashtable *ComAowagieTextPdfCJKFont_allCMaps;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfCJKFont, allCMaps, JavaUtilHashtable *)

inline JavaUtilHashtable *ComAowagieTextPdfCJKFont_get_allFonts(void);
inline JavaUtilHashtable *ComAowagieTextPdfCJKFont_set_allFonts(JavaUtilHashtable *value);
static JavaUtilHashtable *ComAowagieTextPdfCJKFont_allFonts;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfCJKFont, allFonts, JavaUtilHashtable *)

inline jboolean ComAowagieTextPdfCJKFont_get_propertiesLoaded(void);
inline jboolean ComAowagieTextPdfCJKFont_set_propertiesLoaded(jboolean value);
inline jboolean *ComAowagieTextPdfCJKFont_getRef_propertiesLoaded(void);
static jboolean ComAowagieTextPdfCJKFont_propertiesLoaded = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComAowagieTextPdfCJKFont, propertiesLoaded, jboolean)

__attribute__((unused)) static void ComAowagieTextPdfCJKFont_loadProperties(void);

__attribute__((unused)) static ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfCJKFont_getFontDescriptor(ComAowagieTextPdfCJKFont *self);

__attribute__((unused)) static ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfCJKFont_getCIDFontWithComAowagieTextPdfPdfIndirectReference_withComAowagieTextPdfIntHashtable_(ComAowagieTextPdfCJKFont *self, ComAowagieTextPdfPdfIndirectReference *fontDescriptor, ComAowagieTextPdfIntHashtable *cjkTag);

__attribute__((unused)) static ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfCJKFont_getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference_(ComAowagieTextPdfCJKFont *self, ComAowagieTextPdfPdfIndirectReference *CIDFont);

__attribute__((unused)) static jfloat ComAowagieTextPdfCJKFont_getDescNumberWithNSString_(ComAowagieTextPdfCJKFont *self, NSString *name);

__attribute__((unused)) static jfloat ComAowagieTextPdfCJKFont_getBBoxWithInt_(ComAowagieTextPdfCJKFont *self, jint idx);

__attribute__((unused)) static IOSCharArray *ComAowagieTextPdfCJKFont_readCMapWithNSString_(NSString *name);

__attribute__((unused)) static ComAowagieTextPdfIntHashtable *ComAowagieTextPdfCJKFont_createMetricWithNSString_(NSString *s);

__attribute__((unused)) static NSString *ComAowagieTextPdfCJKFont_convertToHCIDMetricsWithIntArray_withComAowagieTextPdfIntHashtable_(IOSIntArray *keys, ComAowagieTextPdfIntHashtable *h);

__attribute__((unused)) static NSString *ComAowagieTextPdfCJKFont_convertToVCIDMetricsWithIntArray_withComAowagieTextPdfIntHashtable_withComAowagieTextPdfIntHashtable_(IOSIntArray *keys, ComAowagieTextPdfIntHashtable *v, ComAowagieTextPdfIntHashtable *h);

__attribute__((unused)) static JavaUtilHashMap *ComAowagieTextPdfCJKFont_readFontPropertiesWithNSString_(NSString *name);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/CJKFont.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfCJKFont)

NSString *ComAowagieTextPdfCJKFont_CJK_ENCODING = @"UnicodeBigUnmarked";


#line 69
@implementation ComAowagieTextPdfCJKFont


#line 99
+ (void)loadProperties {
  ComAowagieTextPdfCJKFont_loadProperties();
}


#line 129
- (instancetype)initPackagePrivateWithNSString:(NSString *)fontName
                                  withNSString:(NSString *)enc
                                   withBoolean:(jboolean)emb {
  ComAowagieTextPdfCJKFont_initPackagePrivateWithNSString_withNSString_withBoolean_(self, fontName, enc, emb);
  return self;
}


#line 201
+ (jboolean)isCJKFontWithNSString:(NSString *)fontName
                     withNSString:(NSString *)enc {
  return ComAowagieTextPdfCJKFont_isCJKFontWithNSString_withNSString_(fontName, enc);
}


#line 212
- (jint)getWidthWithInt:(jint)char1 {
  
#line 214
  jint c = char1;
  if (!self->cidDirect_) {
    c = IOSCharArray_Get(nil_chk(self->translationMap_), c);
  }
  jint v;
  if (self->vertical_) {
    v = [((ComAowagieTextPdfIntHashtable *) nil_chk(self->vMetrics_)) getWithInt:c];
  }
  else {
    
#line 222
    v = [((ComAowagieTextPdfIntHashtable *) nil_chk(self->hMetrics_)) getWithInt:c];
  }
  if (v > 0) {
    return v;
  }
  else {
    
#line 227
    return 1000;
  }
}


#line 231
- (jint)getWidthWithNSString:(NSString *)text {
  
#line 233
  jint total = 0;
  for (jint k = 0; k < [((NSString *) nil_chk(text)) java_length]; ++k) {
    jint c = [text charAtWithInt:k];
    if (!self->cidDirect_) {
      c = IOSCharArray_Get(nil_chk(self->translationMap_), c);
    }
    jint v;
    if (self->vertical_) {
      v = [((ComAowagieTextPdfIntHashtable *) nil_chk(self->vMetrics_)) getWithInt:c];
    }
    else {
      
#line 243
      v = [((ComAowagieTextPdfIntHashtable *) nil_chk(self->hMetrics_)) getWithInt:c];
    }
    if (v > 0) {
      total += v;
    }
    else {
      
#line 248
      total += 1000;
    }
  }
  return total;
}


#line 254
- (jint)getRawWidthWithInt:(jint)c
              withNSString:(NSString *)name {
  return 0;
}

- (jint)getKerningWithInt:(jint)char1
                  withInt:(jint)char2 {
  return 0;
}

- (ComAowagieTextPdfPdfDictionary *)getFontDescriptor {
  return ComAowagieTextPdfCJKFont_getFontDescriptor(self);
}


#line 280
- (ComAowagieTextPdfPdfDictionary *)getCIDFontWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)fontDescriptor
                                                      withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)cjkTag {
  return ComAowagieTextPdfCJKFont_getCIDFontWithComAowagieTextPdfPdfIndirectReference_withComAowagieTextPdfIntHashtable_(self, fontDescriptor, cjkTag);
}


#line 306
- (ComAowagieTextPdfPdfDictionary *)getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)CIDFont {
  return ComAowagieTextPdfCJKFont_getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference_(self, CIDFont);
}


#line 320
- (void)writeFontWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
      withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)ref
                              withNSObjectArray:(IOSObjectArray *)params {
  
#line 322
  ComAowagieTextPdfIntHashtable *cjkTag = (ComAowagieTextPdfIntHashtable *) cast_chk(IOSObjectArray_Get(nil_chk(params), 0), [ComAowagieTextPdfIntHashtable class]);
  ComAowagieTextPdfPdfIndirectReference *ind_font = nil;
  ComAowagieTextPdfPdfObject *pobj = nil;
  ComAowagieTextPdfPdfIndirectObject *obj = nil;
  pobj = ComAowagieTextPdfCJKFont_getFontDescriptor(self);
  if (pobj != nil) {
    obj = [((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComAowagieTextPdfPdfObject:pobj];
    ind_font = [((ComAowagieTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
  }
  pobj = ComAowagieTextPdfCJKFont_getCIDFontWithComAowagieTextPdfPdfIndirectReference_withComAowagieTextPdfIntHashtable_(self, ind_font, cjkTag);
  if (pobj != nil) {
    obj = [((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComAowagieTextPdfPdfObject:pobj];
    ind_font = [((ComAowagieTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
  }
  pobj = ComAowagieTextPdfCJKFont_getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference_(self, ind_font);
  (void) [((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComAowagieTextPdfPdfObject:pobj withComAowagieTextPdfPdfIndirectReference:ref];
}


#line 346
- (ComAowagieTextPdfPdfStream *)getFullFontStream {
  
#line 348
  return nil;
}


#line 351
- (jfloat)getDescNumberWithNSString:(NSString *)name {
  return ComAowagieTextPdfCJKFont_getDescNumberWithNSString_(self, name);
}

- (jfloat)getBBoxWithInt:(jint)idx {
  return ComAowagieTextPdfCJKFont_getBBoxWithInt_(self, idx);
}


#line 372
- (jfloat)getFontDescriptorWithInt:(jint)key
                         withFloat:(jfloat)fontSize {
  switch (key) {
    case ComAowagieTextPdfBaseFont_AWT_ASCENT:
    case ComAowagieTextPdfBaseFont_ASCENT:
    return ComAowagieTextPdfCJKFont_getDescNumberWithNSString_(self, @"Ascent") * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_CAPHEIGHT:
    return ComAowagieTextPdfCJKFont_getDescNumberWithNSString_(self, @"CapHeight") * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_AWT_DESCENT:
    case ComAowagieTextPdfBaseFont_DESCENT:
    return ComAowagieTextPdfCJKFont_getDescNumberWithNSString_(self, @"Descent") * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_ITALICANGLE:
    return ComAowagieTextPdfCJKFont_getDescNumberWithNSString_(self, @"ItalicAngle");
    case ComAowagieTextPdfBaseFont_BBOXLLX:
    return fontSize * ComAowagieTextPdfCJKFont_getBBoxWithInt_(self, 0) / 1000;
    case ComAowagieTextPdfBaseFont_BBOXLLY:
    return fontSize * ComAowagieTextPdfCJKFont_getBBoxWithInt_(self, 1) / 1000;
    case ComAowagieTextPdfBaseFont_BBOXURX:
    return fontSize * ComAowagieTextPdfCJKFont_getBBoxWithInt_(self, 2) / 1000;
    case ComAowagieTextPdfBaseFont_BBOXURY:
    return fontSize * ComAowagieTextPdfCJKFont_getBBoxWithInt_(self, 3) / 1000;
    case ComAowagieTextPdfBaseFont_AWT_LEADING:
    return 0;
    case ComAowagieTextPdfBaseFont_AWT_MAXADVANCE:
    return fontSize * (ComAowagieTextPdfCJKFont_getBBoxWithInt_(self, 2) - ComAowagieTextPdfCJKFont_getBBoxWithInt_(self, 0)) / 1000;
  }
  return 0;
}

- (NSString *)getPostscriptFontName {
  
#line 403
  return self->fontName_;
}


#line 414
- (IOSObjectArray *)getFullFontName {
  
#line 416
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"", @"", @"", self->fontName_ } count:4 type:NSString_class_()] } count:1 type:IOSClass_arrayType(NSString_class_(), 1)];
}


#line 427
- (IOSObjectArray *)getAllNameEntries {
  
#line 429
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"4", @"", @"", @"", self->fontName_ } count:5 type:NSString_class_()] } count:1 type:IOSClass_arrayType(NSString_class_(), 1)];
}


#line 440
- (IOSObjectArray *)getFamilyFontName {
  
#line 442
  return [self getFullFontName];
}


#line 445
+ (IOSCharArray *)readCMapWithNSString:(NSString *)name {
  return ComAowagieTextPdfCJKFont_readCMapWithNSString_(name);
}


#line 462
+ (ComAowagieTextPdfIntHashtable *)createMetricWithNSString:(NSString *)s {
  return ComAowagieTextPdfCJKFont_createMetricWithNSString_(s);
}


#line 472
+ (NSString *)convertToHCIDMetricsWithIntArray:(IOSIntArray *)keys
             withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)h {
  return ComAowagieTextPdfCJKFont_convertToHCIDMetricsWithIntArray_withComAowagieTextPdfIntHashtable_(keys, h);
}


#line 556
+ (NSString *)convertToVCIDMetricsWithIntArray:(IOSIntArray *)keys
             withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)v
             withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)h {
  return ComAowagieTextPdfCJKFont_convertToVCIDMetricsWithIntArray_withComAowagieTextPdfIntHashtable_withComAowagieTextPdfIntHashtable_(keys, v, h);
}


#line 620
+ (JavaUtilHashMap *)readFontPropertiesWithNSString:(NSString *)name {
  return ComAowagieTextPdfCJKFont_readFontPropertiesWithNSString_(name);
}


#line 646
- (jint)getUnicodeEquivalentWithInt:(jint)c {
  
#line 648
  if (self->cidDirect_) {
    return IOSCharArray_Get(nil_chk(self->translationMap_), c);
  }
  return c;
}


#line 654
- (jint)getCidCodeWithInt:(jint)c {
  
#line 656
  if (self->cidDirect_) {
    return c;
  }
  return IOSCharArray_Get(nil_chk(self->translationMap_), c);
}


#line 665
- (jboolean)hasKernPairs {
  
#line 667
  return false;
}


#line 676
- (jboolean)charExistsWithInt:(jint)c {
  
#line 678
  return IOSCharArray_Get(nil_chk(self->translationMap_), c) != 0;
}


#line 688
- (jboolean)setCharAdvanceWithInt:(jint)c
                          withInt:(jint)advance {
  return false;
}


#line 698
- (void)setPostscriptFontNameWithNSString:(NSString *)name {
  
#line 700
  self->fontName_ = name;
}


#line 703
- (jboolean)setKerningWithInt:(jint)char1
                      withInt:(jint)char2
                      withInt:(jint)kern {
  
#line 705
  return false;
}


#line 708
- (IOSIntArray *)getCharBBoxWithInt:(jint)c {
  
#line 710
  return nil;
}


#line 713
- (IOSIntArray *)getRawCharBBoxWithInt:(jint)c
                          withNSString:(NSString *)name {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 16, 17, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 18, 6, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 19, 5, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0xa, 22, 6, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfIntHashtable;", 0xa, 23, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 24, 25, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 26, 27, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0xa, 28, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 29, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 30, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 31, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 32, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 36, 5, -1, -1, -1, -1 },
    { NULL, "[I", 0x4, 37, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadProperties);
  methods[1].selector = @selector(initPackagePrivateWithNSString:withNSString:withBoolean:);
  methods[2].selector = @selector(isCJKFontWithNSString:withNSString:);
  methods[3].selector = @selector(getWidthWithInt:);
  methods[4].selector = @selector(getWidthWithNSString:);
  methods[5].selector = @selector(getRawWidthWithInt:withNSString:);
  methods[6].selector = @selector(getKerningWithInt:withInt:);
  methods[7].selector = @selector(getFontDescriptor);
  methods[8].selector = @selector(getCIDFontWithComAowagieTextPdfPdfIndirectReference:withComAowagieTextPdfIntHashtable:);
  methods[9].selector = @selector(getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference:);
  methods[10].selector = @selector(writeFontWithComAowagieTextPdfPdfWriter:withComAowagieTextPdfPdfIndirectReference:withNSObjectArray:);
  methods[11].selector = @selector(getFullFontStream);
  methods[12].selector = @selector(getDescNumberWithNSString:);
  methods[13].selector = @selector(getBBoxWithInt:);
  methods[14].selector = @selector(getFontDescriptorWithInt:withFloat:);
  methods[15].selector = @selector(getPostscriptFontName);
  methods[16].selector = @selector(getFullFontName);
  methods[17].selector = @selector(getAllNameEntries);
  methods[18].selector = @selector(getFamilyFontName);
  methods[19].selector = @selector(readCMapWithNSString:);
  methods[20].selector = @selector(createMetricWithNSString:);
  methods[21].selector = @selector(convertToHCIDMetricsWithIntArray:withComAowagieTextPdfIntHashtable:);
  methods[22].selector = @selector(convertToVCIDMetricsWithIntArray:withComAowagieTextPdfIntHashtable:withComAowagieTextPdfIntHashtable:);
  methods[23].selector = @selector(readFontPropertiesWithNSString:);
  methods[24].selector = @selector(getUnicodeEquivalentWithInt:);
  methods[25].selector = @selector(getCidCodeWithInt:);
  methods[26].selector = @selector(hasKernPairs);
  methods[27].selector = @selector(charExistsWithInt:);
  methods[28].selector = @selector(setCharAdvanceWithInt:withInt:);
  methods[29].selector = @selector(setPostscriptFontNameWithNSString:);
  methods[30].selector = @selector(setKerningWithInt:withInt:withInt:);
  methods[31].selector = @selector(getCharBBoxWithInt:);
  methods[32].selector = @selector(getRawCharBBoxWithInt:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CJK_ENCODING", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 38, -1, -1 },
    { "FIRST", "I", .constantValue.asInt = ComAowagieTextPdfCJKFont_FIRST, 0x1a, -1, -1, -1, -1 },
    { "BRACKET", "I", .constantValue.asInt = ComAowagieTextPdfCJKFont_BRACKET, 0x1a, -1, -1, -1, -1 },
    { "SERIAL", "I", .constantValue.asInt = ComAowagieTextPdfCJKFont_SERIAL, 0x1a, -1, -1, -1, -1 },
    { "V1Y", "I", .constantValue.asInt = ComAowagieTextPdfCJKFont_V1Y, 0x1a, -1, -1, -1, -1 },
    { "cjkFonts", "LJavaUtilProperties;", .constantValue.asLong = 0, 0xa, -1, 39, -1, -1 },
    { "cjkEncodings", "LJavaUtilProperties;", .constantValue.asLong = 0, 0xa, -1, 40, -1, -1 },
    { "allCMaps", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0xa, -1, 41, -1, -1 },
    { "allFonts", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0xa, -1, 42, -1, -1 },
    { "propertiesLoaded", "Z", .constantValue.asLong = 0, 0xa, -1, 43, -1, -1 },
    { "fontName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "style_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "CMap_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cidDirect_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "translationMap_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "vMetrics_", "LComAowagieTextPdfIntHashtable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hMetrics_", "LComAowagieTextPdfIntHashtable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fontDesc_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "vertical_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;Z", "LComAowagieTextDocumentException;", "isCJKFont", "LNSString;LNSString;", "getWidth", "I", "LNSString;", "getRawWidth", "ILNSString;", "getKerning", "II", "getCIDFont", "LComAowagieTextPdfPdfIndirectReference;LComAowagieTextPdfIntHashtable;", "getFontBaseType", "LComAowagieTextPdfPdfIndirectReference;", "writeFont", "LComAowagieTextPdfPdfWriter;LComAowagieTextPdfPdfIndirectReference;[LNSObject;", "LComAowagieTextDocumentException;LJavaIoIOException;", "getDescNumber", "getBBox", "getFontDescriptor", "IF", "readCMap", "createMetric", "convertToHCIDMetrics", "[ILComAowagieTextPdfIntHashtable;", "convertToVCIDMetrics", "[ILComAowagieTextPdfIntHashtable;LComAowagieTextPdfIntHashtable;", "readFontProperties", "getUnicodeEquivalent", "getCidCode", "charExists", "setCharAdvance", "setPostscriptFontName", "setKerning", "III", "getCharBBox", "getRawCharBBox", &ComAowagieTextPdfCJKFont_CJK_ENCODING, &ComAowagieTextPdfCJKFont_cjkFonts, &ComAowagieTextPdfCJKFont_cjkEncodings, &ComAowagieTextPdfCJKFont_allCMaps, &ComAowagieTextPdfCJKFont_allFonts, &ComAowagieTextPdfCJKFont_propertiesLoaded };
  static const J2ObjcClassInfo _ComAowagieTextPdfCJKFont = { "CJKFont", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 33, 19, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfCJKFont;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfCJKFont class]) {
    ComAowagieTextPdfCJKFont_cjkFonts = new_JavaUtilProperties_init();
    ComAowagieTextPdfCJKFont_cjkEncodings = new_JavaUtilProperties_init();
    ComAowagieTextPdfCJKFont_allCMaps = new_JavaUtilHashtable_init();
    ComAowagieTextPdfCJKFont_allFonts = new_JavaUtilHashtable_init();
    J2OBJC_SET_INITIALIZED(ComAowagieTextPdfCJKFont)
  }
}

@end


#line 99
void ComAowagieTextPdfCJKFont_loadProperties() {
  ComAowagieTextPdfCJKFont_initialize();
  
#line 100
  if (ComAowagieTextPdfCJKFont_propertiesLoaded) {
    return;
  }
  @synchronized(ComAowagieTextPdfCJKFont_allFonts) {
    if (ComAowagieTextPdfCJKFont_propertiesLoaded) {
      return;
    }
    @try {
      JavaIoInputStream *is = ComAowagieTextPdfBaseFont_getResourceStreamWithNSString_(JreStrcat("$$", ComAowagieTextPdfBaseFont_RESOURCE_PATH, @"cjkfonts.properties"));
      [((JavaUtilProperties *) nil_chk(ComAowagieTextPdfCJKFont_cjkFonts)) load__WithJavaIoInputStream:is];
      [((JavaIoInputStream *) nil_chk(is)) close];
      is = ComAowagieTextPdfBaseFont_getResourceStreamWithNSString_(JreStrcat("$$", ComAowagieTextPdfBaseFont_RESOURCE_PATH, @"cjkencodings.properties"));
      [((JavaUtilProperties *) nil_chk(ComAowagieTextPdfCJKFont_cjkEncodings)) load__WithJavaIoInputStream:is];
      [((JavaIoInputStream *) nil_chk(is)) close];
    }
    @catch (JavaLangException *e) {
      ComAowagieTextPdfCJKFont_cjkFonts = new_JavaUtilProperties_init();
      ComAowagieTextPdfCJKFont_cjkEncodings = new_JavaUtilProperties_init();
    }
    ComAowagieTextPdfCJKFont_propertiesLoaded = true;
  }
}


#line 129
void ComAowagieTextPdfCJKFont_initPackagePrivateWithNSString_withNSString_withBoolean_(ComAowagieTextPdfCJKFont *self, NSString *fontName, NSString *enc, jboolean emb) {
  ComAowagieTextPdfBaseFont_init(self);
  self->style_ =
#line 87
  @"";
  self->cidDirect_ =
#line 91
  false;
  self->vertical_ =
#line 97
  false;
  
#line 130
  ComAowagieTextPdfCJKFont_loadProperties();
  self->fontType_ = ComAowagieTextPdfBaseFont_FONT_TYPE_CJK;
  NSString *nameBase = ComAowagieTextPdfBaseFont_getBaseNameWithNSString_(fontName);
  if (!ComAowagieTextPdfCJKFont_isCJKFontWithNSString_withNSString_(nameBase, enc)) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$$$$", @"Font '", fontName, @"' with '", enc, @"' encoding is not a CJK font."));
  }
  if ([((NSString *) nil_chk(nameBase)) java_length] < [((NSString *) nil_chk(fontName)) java_length]) {
    self->style_ = [fontName java_substring:[nameBase java_length]];
    fontName = nameBase;
  }
  self->fontName_ = fontName;
  self->encoding_ = ComAowagieTextPdfCJKFont_CJK_ENCODING;
  self->vertical_ = [((NSString *) nil_chk(enc)) java_hasSuffix:@"V"];
  self->CMap_ = enc;
  if ([enc java_hasPrefix:@"Identity-"]) {
    self->cidDirect_ = true;
    NSString *s = [((JavaUtilProperties *) nil_chk(ComAowagieTextPdfCJKFont_cjkFonts)) getPropertyWithNSString:fontName];
    s = [((NSString *) nil_chk(s)) java_substring:0 endIndex:[s java_indexOf:'_']];
    IOSCharArray *c = (IOSCharArray *) cast_chk([((JavaUtilHashtable *) nil_chk(ComAowagieTextPdfCJKFont_allCMaps)) getWithId:s], [IOSCharArray class]);
    if (c == nil) {
      c = ComAowagieTextPdfCJKFont_readCMapWithNSString_(s);
      if (c == nil) {
        @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$$", @"The cmap ", s, @" does not exist as a resource."));
      }
      *IOSCharArray_GetRef(c, ComAowagieTextPdfBaseFont_CID_NEWLINE) = 0x000a;
      (void) [((JavaUtilHashtable *) nil_chk(ComAowagieTextPdfCJKFont_allCMaps)) putWithId:s withId:c];
    }
    self->translationMap_ = c;
  }
  else {
    IOSCharArray *c = (IOSCharArray *) cast_chk([((JavaUtilHashtable *) nil_chk(ComAowagieTextPdfCJKFont_allCMaps)) getWithId:enc], [IOSCharArray class]);
    if (c == nil) {
      NSString *s = [((JavaUtilProperties *) nil_chk(ComAowagieTextPdfCJKFont_cjkEncodings)) getPropertyWithNSString:enc];
      if (s == nil) {
        @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$", @"The resource cjkencodings.properties does not contain the encoding ", enc));
      }
      JavaUtilStringTokenizer *tk = new_JavaUtilStringTokenizer_initWithNSString_(s);
      NSString *nt = [tk nextToken];
      c = (IOSCharArray *) cast_chk([((JavaUtilHashtable *) nil_chk(ComAowagieTextPdfCJKFont_allCMaps)) getWithId:nt], [IOSCharArray class]);
      if (c == nil) {
        c = ComAowagieTextPdfCJKFont_readCMapWithNSString_(nt);
        (void) [((JavaUtilHashtable *) nil_chk(ComAowagieTextPdfCJKFont_allCMaps)) putWithId:nt withId:c];
      }
      if ([tk hasMoreTokens]) {
        NSString *nt2 = [tk nextToken];
        IOSCharArray *m2 = ComAowagieTextPdfCJKFont_readCMapWithNSString_(nt2);
        for (jint k = 0; k < (jint) 0x10000; ++k) {
          if (IOSCharArray_Get(nil_chk(m2), k) == 0) {
            *IOSCharArray_GetRef(m2, k) = IOSCharArray_Get(nil_chk(c), k);
          }
        }
        (void) [((JavaUtilHashtable *) nil_chk(ComAowagieTextPdfCJKFont_allCMaps)) putWithId:enc withId:m2];
        c = m2;
      }
    }
    self->translationMap_ = c;
  }
  self->fontDesc_ = (JavaUtilHashMap *) cast_chk([((JavaUtilHashtable *) nil_chk(ComAowagieTextPdfCJKFont_allFonts)) getWithId:fontName], [JavaUtilHashMap class]);
  if (self->fontDesc_ == nil) {
    self->fontDesc_ = ComAowagieTextPdfCJKFont_readFontPropertiesWithNSString_(fontName);
    (void) [((JavaUtilHashtable *) nil_chk(ComAowagieTextPdfCJKFont_allFonts)) putWithId:fontName withId:self->fontDesc_];
  }
  self->hMetrics_ = (ComAowagieTextPdfIntHashtable *) cast_chk([((JavaUtilHashMap *) nil_chk(self->fontDesc_)) getWithId:@"W"], [ComAowagieTextPdfIntHashtable class]);
  self->vMetrics_ = (ComAowagieTextPdfIntHashtable *) cast_chk([((JavaUtilHashMap *) nil_chk(self->fontDesc_)) getWithId:@"W2"], [ComAowagieTextPdfIntHashtable class]);
}


#line 129
ComAowagieTextPdfCJKFont *new_ComAowagieTextPdfCJKFont_initPackagePrivateWithNSString_withNSString_withBoolean_(NSString *fontName, NSString *enc, jboolean emb) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfCJKFont, initPackagePrivateWithNSString_withNSString_withBoolean_, fontName, enc, emb)
}


#line 129
ComAowagieTextPdfCJKFont *create_ComAowagieTextPdfCJKFont_initPackagePrivateWithNSString_withNSString_withBoolean_(NSString *fontName, NSString *enc, jboolean emb) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfCJKFont, initPackagePrivateWithNSString_withNSString_withBoolean_, fontName, enc, emb)
}


#line 201
jboolean ComAowagieTextPdfCJKFont_isCJKFontWithNSString_withNSString_(NSString *fontName, NSString *enc) {
  ComAowagieTextPdfCJKFont_initialize();
  
#line 202
  ComAowagieTextPdfCJKFont_loadProperties();
  NSString *encodings = [((JavaUtilProperties *) nil_chk(ComAowagieTextPdfCJKFont_cjkFonts)) getPropertyWithNSString:fontName];
  return encodings != nil && ([((NSString *) nil_chk(enc)) isEqual:@"Identity-H"] || [enc isEqual:@"Identity-V"] || [encodings java_indexOfString:JreStrcat("C$C", '_', enc, '_')] >= 0);
}


#line 264
ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfCJKFont_getFontDescriptor(ComAowagieTextPdfCJKFont *self) {
  ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_initWithComAowagieTextPdfPdfName_(JreLoadStatic(ComAowagieTextPdfPdfName, FONTDESCRIPTOR));
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ASCENT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithNSString_((NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(self->fontDesc_)) getWithId:@"Ascent"], [NSString class]))];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CAPHEIGHT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithNSString_((NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(self->fontDesc_)) getWithId:@"CapHeight"], [NSString class]))];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DESCENT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithNSString_((NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(self->fontDesc_)) getWithId:@"Descent"], [NSString class]))];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FLAGS) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithNSString_((NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(self->fontDesc_)) getWithId:@"Flags"], [NSString class]))];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTBBOX) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithNSString_((NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(self->fontDesc_)) getWithId:@"FontBBox"], [NSString class]))];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTNAME) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(JreStrcat("$$", self->fontName_, self->style_))];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ITALICANGLE) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithNSString_((NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(self->fontDesc_)) getWithId:@"ItalicAngle"], [NSString class]))];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STEMV) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithNSString_((NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(self->fontDesc_)) getWithId:@"StemV"], [NSString class]))];
  ComAowagieTextPdfPdfDictionary *pdic = new_ComAowagieTextPdfPdfDictionary_init();
  [pdic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PANOSE) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_withNSString_((NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(self->fontDesc_)) getWithId:@"Panose"], [NSString class]), nil)];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STYLE) withComAowagieTextPdfPdfObject:pdic];
  return dic;
}

ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfCJKFont_getCIDFontWithComAowagieTextPdfPdfIndirectReference_withComAowagieTextPdfIntHashtable_(ComAowagieTextPdfCJKFont *self, ComAowagieTextPdfPdfIndirectReference *fontDescriptor, ComAowagieTextPdfIntHashtable *cjkTag) {
  ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_initWithComAowagieTextPdfPdfName_(JreLoadStatic(ComAowagieTextPdfPdfName, FONT));
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, CIDFONTTYPE0)];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BASEFONT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(JreStrcat("$$", self->fontName_, self->style_))];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTDESCRIPTOR) withComAowagieTextPdfPdfObject:fontDescriptor];
  IOSIntArray *keys = [((ComAowagieTextPdfIntHashtable *) nil_chk(cjkTag)) toOrderedKeys];
  NSString *w = ComAowagieTextPdfCJKFont_convertToHCIDMetricsWithIntArray_withComAowagieTextPdfIntHashtable_(keys, self->hMetrics_);
  if (w != nil) {
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, W) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithNSString_(w)];
  }
  if (self->vertical_) {
    w = ComAowagieTextPdfCJKFont_convertToVCIDMetricsWithIntArray_withComAowagieTextPdfIntHashtable_withComAowagieTextPdfIntHashtable_(keys, self->vMetrics_, self->hMetrics_);
    if (w != nil) {
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, W2) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithNSString_(w)];
    }
  }
  else {
    
#line 296
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DW) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(1000)];
  }
  ComAowagieTextPdfPdfDictionary *cdic = new_ComAowagieTextPdfPdfDictionary_init();
  [cdic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, REGISTRY) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_withNSString_((NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(self->fontDesc_)) getWithId:@"Registry"], [NSString class]), nil)];
  [cdic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ORDERING) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_withNSString_((NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(self->fontDesc_)) getWithId:@"Ordering"], [NSString class]), nil)];
  [cdic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUPPLEMENT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithNSString_((NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(self->fontDesc_)) getWithId:@"Supplement"], [NSString class]))];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CIDSYSTEMINFO) withComAowagieTextPdfPdfObject:cdic];
  return dic;
}


#line 306
ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfCJKFont_getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference_(ComAowagieTextPdfCJKFont *self, ComAowagieTextPdfPdfIndirectReference *CIDFont) {
  ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_initWithComAowagieTextPdfPdfName_(JreLoadStatic(ComAowagieTextPdfPdfName, FONT));
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, TYPE0)];
  NSString *name = self->fontName_;
  if ([((NSString *) nil_chk(self->style_)) java_length] > 0) {
    (void) JreStrAppendStrong(&name, "C$", '-', [((NSString *) nil_chk(self->style_)) java_substring:1]);
  }
  (void) JreStrAppendStrong(&name, "C$", '-', self->CMap_);
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BASEFONT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(name)];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENCODING) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(self->CMap_)];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DESCENDANTFONTS) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfArray_initWithComAowagieTextPdfPdfObject_(CIDFont)];
  return dic;
}


#line 351
jfloat ComAowagieTextPdfCJKFont_getDescNumberWithNSString_(ComAowagieTextPdfCJKFont *self, NSString *name) {
  return JavaLangInteger_parseIntWithNSString_((NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(self->fontDesc_)) getWithId:name], [NSString class]));
}

jfloat ComAowagieTextPdfCJKFont_getBBoxWithInt_(ComAowagieTextPdfCJKFont *self, jint idx) {
  NSString *s = (NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(self->fontDesc_)) getWithId:@"FontBBox"], [NSString class]);
  JavaUtilStringTokenizer *tk = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(s, @" []\x0d\n\t\x0c");
  NSString *ret = [tk nextToken];
  for (jint k = 0; k < idx; ++k) {
    ret = [tk nextToken];
  }
  return JavaLangInteger_parseIntWithNSString_(ret);
}


#line 445
IOSCharArray *ComAowagieTextPdfCJKFont_readCMapWithNSString_(NSString *name) {
  ComAowagieTextPdfCJKFont_initialize();
  
#line 446
  @try {
    name = JreStrcat("$$", name, @".cmap");
    JavaIoInputStream *is = ComAowagieTextPdfBaseFont_getResourceStreamWithNSString_(JreStrcat("$$", ComAowagieTextPdfBaseFont_RESOURCE_PATH, name));
    IOSCharArray *c = [IOSCharArray newArrayWithLength:(jint) 0x10000];
    for (jint k = 0; k < (jint) 0x10000; ++k) {
      *IOSCharArray_GetRef(c, k) = (jchar) ((JreLShift32([((JavaIoInputStream *) nil_chk(is)) read], 8)) + [is read]);
    }
    [((JavaIoInputStream *) nil_chk(is)) close];
    return c;
  }
  @catch (JavaLangException *e) {
  }
  
#line 459
  return nil;
}


#line 462
ComAowagieTextPdfIntHashtable *ComAowagieTextPdfCJKFont_createMetricWithNSString_(NSString *s) {
  ComAowagieTextPdfCJKFont_initialize();
  
#line 463
  ComAowagieTextPdfIntHashtable *h = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
  JavaUtilStringTokenizer *tk = new_JavaUtilStringTokenizer_initWithNSString_(s);
  while ([tk hasMoreTokens]) {
    jint n1 = JavaLangInteger_parseIntWithNSString_([tk nextToken]);
    [h putWithInt:n1 withInt:JavaLangInteger_parseIntWithNSString_([tk nextToken])];
  }
  return h;
}


#line 472
NSString *ComAowagieTextPdfCJKFont_convertToHCIDMetricsWithIntArray_withComAowagieTextPdfIntHashtable_(IOSIntArray *keys, ComAowagieTextPdfIntHashtable *h) {
  ComAowagieTextPdfCJKFont_initialize();
  
#line 473
  if (((IOSIntArray *) nil_chk(keys))->size_ == 0) {
    return nil;
  }
  jint lastCid = 0;
  jint lastValue = 0;
  jint start;
  for (start = 0; start < keys->size_; ++start) {
    lastCid = IOSIntArray_Get(keys, start);
    lastValue = [((ComAowagieTextPdfIntHashtable *) nil_chk(h)) getWithInt:lastCid];
    if (lastValue != 0) {
      ++start;
      break;
    }
  }
  if (lastValue == 0) {
    return nil;
  }
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  (void) [buf appendWithChar:'['];
  (void) [buf appendWithInt:lastCid];
  jint state = ComAowagieTextPdfCJKFont_FIRST;
  for (jint k = start; k < keys->size_; ++k) {
    jint cid = IOSIntArray_Get(keys, k);
    jint value = [((ComAowagieTextPdfIntHashtable *) nil_chk(h)) getWithInt:cid];
    if (value == 0) {
      continue;
    }
    switch (state) {
      case ComAowagieTextPdfCJKFont_FIRST:
      {
        
#line 502
        if (cid == lastCid + 1 && value == lastValue) {
          state = ComAowagieTextPdfCJKFont_SERIAL;
        }
        else if (cid == lastCid + 1) {
          state = ComAowagieTextPdfCJKFont_BRACKET;
          (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithChar:'['])) appendWithInt:lastValue];
        }
        else {
          (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithChar:'['])) appendWithInt:lastValue])) appendWithChar:']'])) appendWithInt:cid];
        }
        break;
      }
      case ComAowagieTextPdfCJKFont_BRACKET:
      {
        
#line 515
        if (cid == lastCid + 1 && value == lastValue) {
          state = ComAowagieTextPdfCJKFont_SERIAL;
          (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithChar:']'])) appendWithInt:lastCid];
        }
        else if (cid == lastCid + 1) {
          (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithChar:' '])) appendWithInt:lastValue];
        }
        else {
          state = ComAowagieTextPdfCJKFont_FIRST;
          (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithChar:' '])) appendWithInt:lastValue])) appendWithChar:']'])) appendWithInt:cid];
        }
        break;
      }
      case ComAowagieTextPdfCJKFont_SERIAL:
      {
        
#line 529
        if (cid != lastCid + 1 || value != lastValue) {
          (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithChar:' '])) appendWithInt:lastCid])) appendWithChar:' '])) appendWithInt:lastValue])) appendWithChar:' '])) appendWithInt:cid];
          state = ComAowagieTextPdfCJKFont_FIRST;
        }
        break;
      }
    }
    lastValue = value;
    lastCid = cid;
  }
  switch (state) {
    case ComAowagieTextPdfCJKFont_FIRST:
    {
      
#line 541
      (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithChar:'['])) appendWithInt:lastValue])) appendWithNSString:@"]]"];
      break;
    }
    case ComAowagieTextPdfCJKFont_BRACKET:
    {
      
#line 545
      (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithChar:' '])) appendWithInt:lastValue])) appendWithNSString:@"]]"];
      break;
    }
    case ComAowagieTextPdfCJKFont_SERIAL:
    {
      
#line 549
      (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithChar:' '])) appendWithInt:lastCid])) appendWithChar:' '])) appendWithInt:lastValue])) appendWithChar:']'];
      break;
    }
  }
  return [buf description];
}


#line 556
NSString *ComAowagieTextPdfCJKFont_convertToVCIDMetricsWithIntArray_withComAowagieTextPdfIntHashtable_withComAowagieTextPdfIntHashtable_(IOSIntArray *keys, ComAowagieTextPdfIntHashtable *v, ComAowagieTextPdfIntHashtable *h) {
  ComAowagieTextPdfCJKFont_initialize();
  
#line 557
  if (((IOSIntArray *) nil_chk(keys))->size_ == 0) {
    return nil;
  }
  jint lastCid = 0;
  jint lastValue = 0;
  jint lastHValue = 0;
  jint start;
  for (start = 0; start < keys->size_; ++start) {
    lastCid = IOSIntArray_Get(keys, start);
    lastValue = [((ComAowagieTextPdfIntHashtable *) nil_chk(v)) getWithInt:lastCid];
    if (lastValue != 0) {
      ++start;
      break;
    }
    else {
      
#line 571
      lastHValue = [((ComAowagieTextPdfIntHashtable *) nil_chk(h)) getWithInt:lastCid];
    }
  }
  if (lastValue == 0) {
    return nil;
  }
  if (lastHValue == 0) {
    lastHValue = 1000;
  }
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  (void) [buf appendWithChar:'['];
  (void) [buf appendWithInt:lastCid];
  jint state = ComAowagieTextPdfCJKFont_FIRST;
  for (jint k = start; k < keys->size_; ++k) {
    jint cid = IOSIntArray_Get(keys, k);
    jint value = [((ComAowagieTextPdfIntHashtable *) nil_chk(v)) getWithInt:cid];
    if (value == 0) {
      continue;
    }
    jint hValue = [((ComAowagieTextPdfIntHashtable *) nil_chk(h)) getWithInt:lastCid];
    if (hValue == 0) {
      hValue = 1000;
    }
    switch (state) {
      case ComAowagieTextPdfCJKFont_FIRST:
      {
        
#line 596
        if (cid == lastCid + 1 && value == lastValue && hValue == lastHValue) {
          state = ComAowagieTextPdfCJKFont_SERIAL;
        }
        else {
          (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithChar:' '])) appendWithInt:lastCid])) appendWithChar:' '])) appendWithInt:-lastValue])) appendWithChar:' '])) appendWithInt:JreIntDiv(lastHValue, 2)])) appendWithChar:' '])) appendWithInt:ComAowagieTextPdfCJKFont_V1Y])) appendWithChar:' '])) appendWithInt:cid];
        }
        break;
      }
      case ComAowagieTextPdfCJKFont_SERIAL:
      {
        
#line 605
        if (cid != lastCid + 1 || value != lastValue || hValue != lastHValue) {
          (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithChar:' '])) appendWithInt:lastCid])) appendWithChar:' '])) appendWithInt:-lastValue])) appendWithChar:' '])) appendWithInt:JreIntDiv(lastHValue, 2)])) appendWithChar:' '])) appendWithInt:ComAowagieTextPdfCJKFont_V1Y])) appendWithChar:' '])) appendWithInt:cid];
          state = ComAowagieTextPdfCJKFont_FIRST;
        }
        break;
      }
    }
    lastValue = value;
    lastCid = cid;
    lastHValue = hValue;
  }
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithChar:' '])) appendWithInt:lastCid])) appendWithChar:' '])) appendWithInt:-lastValue])) appendWithChar:' '])) appendWithInt:JreIntDiv(lastHValue, 2)])) appendWithChar:' '])) appendWithInt:ComAowagieTextPdfCJKFont_V1Y])) appendWithNSString:@" ]"];
  return [buf description];
}


#line 620
JavaUtilHashMap *ComAowagieTextPdfCJKFont_readFontPropertiesWithNSString_(NSString *name) {
  ComAowagieTextPdfCJKFont_initialize();
  
#line 621
  @try {
    (void) JreStrAppendStrong(&name, "$", @".properties");
    JavaIoInputStream *is = ComAowagieTextPdfBaseFont_getResourceStreamWithNSString_(JreStrcat("$$", ComAowagieTextPdfBaseFont_RESOURCE_PATH, name));
    JavaUtilProperties *p = new_JavaUtilProperties_init();
    [p load__WithJavaIoInputStream:is];
    [((JavaIoInputStream *) nil_chk(is)) close];
    ComAowagieTextPdfIntHashtable *W = ComAowagieTextPdfCJKFont_createMetricWithNSString_([p getPropertyWithNSString:@"W"]);
    (void) [p removeWithId:@"W"];
    ComAowagieTextPdfIntHashtable *W2 = ComAowagieTextPdfCJKFont_createMetricWithNSString_([p getPropertyWithNSString:@"W2"]);
    (void) [p removeWithId:@"W2"];
    JavaUtilHashMap *map = new_JavaUtilLinkedHashMap_init();
    for (id<JavaUtilEnumeration> e = [p keys]; [((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]; ) {
      id obj = [e nextElement];
      (void) [map putWithId:obj withId:[p getPropertyWithNSString:(NSString *) cast_chk(obj, [NSString class])]];
    }
    (void) [map putWithId:@"W" withId:W];
    (void) [map putWithId:@"W2" withId:W2];
    return map;
  }
  @catch (JavaLangException *e) {
  }
  
#line 643
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfCJKFont)
