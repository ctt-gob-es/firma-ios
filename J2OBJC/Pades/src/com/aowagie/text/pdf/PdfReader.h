//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfReader.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComAowagieTextPdfPdfReader")
#ifdef RESTRICT_ComAowagieTextPdfPdfReader
#define INCLUDE_ALL_ComAowagieTextPdfPdfReader 0
#else
#define INCLUDE_ALL_ComAowagieTextPdfPdfReader 1
#endif
#undef RESTRICT_ComAowagieTextPdfPdfReader

#if !defined (ComAowagieTextPdfPdfReader_) && (INCLUDE_ALL_ComAowagieTextPdfPdfReader || defined(INCLUDE_ComAowagieTextPdfPdfReader))
#define ComAowagieTextPdfPdfReader_

#define RESTRICT_ComAowagieTextPdfInterfacesPdfViewerPreferences 1
#define INCLUDE_ComAowagieTextPdfInterfacesPdfViewerPreferences 1
#include "com/aowagie/text/pdf/interfaces/PdfViewerPreferences.h"

@class ComAowagieTextPdfAcroFields;
@class ComAowagieTextPdfInternalPdfViewerPreferencesImp;
@class ComAowagieTextPdfPRAcroForm;
@class ComAowagieTextPdfPRIndirectReference;
@class ComAowagieTextPdfPRStream;
@class ComAowagieTextPdfPRTokeniser;
@class ComAowagieTextPdfPdfArray;
@class ComAowagieTextPdfPdfDictionary;
@class ComAowagieTextPdfPdfEncryption;
@class ComAowagieTextPdfPdfIndirectReference;
@class ComAowagieTextPdfPdfName;
@class ComAowagieTextPdfPdfObject;
@class ComAowagieTextPdfPdfReaderInstance;
@class ComAowagieTextPdfPdfReader_PageRefs;
@class ComAowagieTextPdfPdfWriter;
@class ComAowagieTextPdfRandomAccessFileOrArray;
@class ComAowagieTextRectangle;
@class IOSByteArray;
@class JavaIoInputStream;
@class JavaSecurityCertCertificate;
@class JavaUtilHashMap;
@protocol JavaSecurityKey;
@protocol JavaUtilList;

/*!
 @brief Reads a PDF document.
 @author Paulo Soares (psoares@@consiste.pt)
 @author Kazuya Ujihara
 */
@interface ComAowagieTextPdfPdfReader : NSObject < ComAowagieTextPdfInterfacesPdfViewerPreferences > {
 @public
  ComAowagieTextPdfPRTokeniser *tokens_;
  ComAowagieTextPdfPdfDictionary *trailer_;
  ComAowagieTextPdfPdfDictionary *catalog_;
  ComAowagieTextPdfPdfReader_PageRefs *pageRefs_;
}

#pragma mark Public

/*!
 @brief Reads and parses a PDF document.
 @param pdfIn the byte array with the document
 @throw IOExceptionon error
 */
- (instancetype)initWithByteArray:(IOSByteArray *)pdfIn;

/*!
 @brief Reads and parses a PDF document.
 @param pdfIn the byte array with the document
 @param ownerPassword the password to read the document
 @throw IOExceptionon error
 */
- (instancetype)initWithByteArray:(IOSByteArray *)pdfIn
                    withByteArray:(IOSByteArray *)ownerPassword;

/*!
 @brief Reads and parses a PDF document.
 @param is the  <CODE> InputStream </CODE>  containing the document. The stream is read to the
   end but is not closed
 @throw IOExceptionon error
 */
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is;

/*!
 @brief Reads and parses a PDF document.
 @param filename the file name of the document
 @throw IOExceptionon error
 */
- (instancetype)initWithNSString:(NSString *)filename;

/*!
 @brief Reads and parses a PDF document.
 @param filename the file name of the document
 @param certificate the certificate to read the document
 @param certificateKey the private key of the certificate
 @param certificateKeyProvider the security provider for certificateKey
 @throw IOExceptionon error
 */
- (instancetype)initWithNSString:(NSString *)filename
 withJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)certificate
             withJavaSecurityKey:(id<JavaSecurityKey>)certificateKey
                    withNSString:(NSString *)certificateKeyProvider;

/*!
 @param obj PDF object
 @return an indirect reference
 */
- (ComAowagieTextPdfPRIndirectReference *)addPdfObjectWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj;

/*!
 @brief Adds a viewer preference
 @param key a key for a viewer preference
 @param value a value for the viewer preference
 - seealso: PdfViewerPreferences#addViewerPreference
 */
- (void)addViewerPreferenceWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key
                         withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)value;

/*!
 @brief Closes the reader
 */
- (void)close;

/*!
 @brief A helper to FlateDecode.
 @param inArg the input data
 @param strict <CODE> true </CODE>  to read a correct stream.  <CODE> false </CODE>
   to try to read a corrupted stream
 @return the decoded data
 */
+ (IOSByteArray *)FlateDecodeWithByteArray:(IOSByteArray *)inArg
                               withBoolean:(jboolean)strict;

/*!
 @brief Gets a read-only version of <CODE>AcroFields</CODE>.
 @return a read-only version of <CODE>AcroFields</CODE>
 */
- (ComAowagieTextPdfAcroFields *)getAcroFields;

/*!
 @brief Returns the document's acroform, if it has one.
 @return the document's acroform
 */
- (ComAowagieTextPdfPRAcroForm *)getAcroForm;

/*!
 @brief Returns the document's catalog.This dictionary is not a copy,
  any changes will be reflected in the catalog.
 @return the document's catalog
 */
- (ComAowagieTextPdfPdfDictionary *)getCatalog;

/*!
 @brief Gets the certification level for this document.The return values can be <code>PdfSignatureAppearance.NOT_CERTIFIED</code>,
  <code>PdfSignatureAppearance.CERTIFIED_NO_CHANGES_ALLOWED</code>,
  <code>PdfSignatureAppearance.CERTIFIED_FORM_FILLING</code> and 
 <code>PdfSignatureAppearance.CERTIFIED_FORM_FILLING_AND_ANNOTATIONS</code>.
 <p>
  No signature validation is made, use the methods available for that in <CODE>AcroFields</CODE>.
  </p>
 @return gets the certification level for this document
 */
- (jint)getCertificationLevel;

- (jint)getCryptoMode;

/*!
 @brief Gets the byte address of the %%EOF marker.
 @return the byte address of the %%EOF marker
 */
- (jint)getEofPos;

/*!
 @brief Getter for property fileLength.
 @return Value of property fileLength.
 */
- (jint)getFileLength;

/*!
 @brief Returns the content of the document information dictionary as a <CODE>HashMap</CODE>
  of <CODE>String</CODE>.
 @return content of the document information dictionary
 */
- (JavaUtilHashMap *)getInfo;

/*!
 @brief Gets the global document JavaScript.
 @throw IOExceptionon error
 @return the global document JavaScript
 */
- (NSString *)getJavaScript;

/*!
 @brief Gets the byte address of the last xref table.
 @return the byte address of the last xref table
 */
- (jint)getLastXref;

/*!
 @brief Gets the XML metadata.
 @throw IOExceptionon error
 @return the XML metadata
 */
- (IOSByteArray *)getMetadata;

/*!
 @brief Gets all the named destinations as an <CODE>HashMap</CODE>.The key is the name
  and the value is the destinations array.
 @return gets all the named destinations
 */
- (JavaUtilHashMap *)getNamedDestination;

/*!
 @brief Gets the named destinations from the /Dests key in the catalog as an <CODE>HashMap</CODE>.The key is the name
  and the value is the destinations array.
 @return gets the named destinations
 */
- (JavaUtilHashMap *)getNamedDestinationFromNames;

/*!
 @brief Gets the named destinations from the /Names key in the catalog as an <CODE>HashMap</CODE>.The key is the name
  and the value is the destinations array.
 @return gets the named destinations
 */
- (JavaUtilHashMap *)getNamedDestinationFromStrings;

/*!
 @brief Gets the number of pages in the document.
 @return the number of pages in the document
 */
- (jint)getNumberOfPages;

/*!
 @brief Gets the contents of the page.
 @param pageNum the page number. 1 is the first
 @param file the location of the PDF document
 @throw IOExceptionon error
 @return the content
 */
- (IOSByteArray *)getPageContentWithInt:(jint)pageNum
withComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)file;

/*!
 @brief Gets the dictionary that represents a page.
 @param pageNum the page number. 1 is the first
 @return the page dictionary
 */
- (ComAowagieTextPdfPdfDictionary *)getPageNWithInt:(jint)pageNum;

/*!
 @param pageNum Page Number
 @return a Dictionary object
 */
- (ComAowagieTextPdfPdfDictionary *)getPageNReleaseWithInt:(jint)pageNum;

/*!
 @brief Gets the page reference to this page.
 @param pageNum the page number. 1 is the first
 @return the page reference
 */
- (ComAowagieTextPdfPRIndirectReference *)getPageOrigRefWithInt:(jint)pageNum;

/*!
 @brief Gets the page rotation.This value can be 0, 90, 180 or 270.
 @param index the page number. The first page is 1
 @return the page rotation
 */
- (jint)getPageRotationWithInt:(jint)index;

- (jint)getPageRotationWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)page;

/*!
 @brief Gets the page size without taking rotation into account.This
  is the value of the /MediaBox key.
 @param index the page number. The first page is 1
 @return the page size
 */
- (ComAowagieTextRectangle *)getPageSizeWithInt:(jint)index;

/*!
 @brief Gets the page size, taking rotation into account.This
  is a <CODE>Rectangle</CODE> with the value of the /MediaBox and the /Rotate key.
 @param index the page number. The first page is 1
 @return a <CODE>Rectangle</CODE>.
 */
- (ComAowagieTextRectangle *)getPageSizeWithRotationWithInt:(jint)index;

/*!
 @param idx Index
 @return aPdfObject
 */
- (ComAowagieTextPdfPdfObject *)getPdfObjectWithInt:(jint)idx;

/*!
 @brief Reads a <CODE>PdfObject</CODE> resolving an indirect reference
  if needed.
 @param obj the  <CODE> PdfObject </CODE>  to read
 @return the resolved <CODE>PdfObject</CODE>
 */
+ (ComAowagieTextPdfPdfObject *)getPdfObjectWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj;

/*!
 @param obj PDF object
 @return a PdfObject
 */
+ (ComAowagieTextPdfPdfObject *)getPdfObjectReleaseWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj;

/*!
 @brief Gets the PDF version.Only the last version char is returned.
 For example
  version 1.4 is returned as '4'.
 @return the PDF version
 */
- (jchar)getPdfVersion;

/*!
 @brief Gets the encryption permissions.It can be used directly in 
 <CODE>PdfWriter.setEncryption()</CODE>.
 @return the encryption permissions
 */
- (jint)getPermissions;

/*!
 @brief Gets a new file instance of the original PDF
  document.
 @return a new file instance of the original PDF document
 */
- (ComAowagieTextPdfRandomAccessFileOrArray *)getSafeFile;

/*!
 @brief Returns a bitset representing the PageMode and PageLayout viewer preferences.
 Doesn't return any information about the ViewerPreferences dictionary.
 @return an int that contains the Viewer Preferences.
 */
- (jint)getSimpleViewerPreferences;

/*!
 @brief Get the content from a stream applying the required filters.
 @param stream the stream
 @throw IOExceptionon error
 @return the stream content
 */
+ (IOSByteArray *)getStreamBytesWithComAowagieTextPdfPRStream:(ComAowagieTextPdfPRStream *)stream;

/*!
 @brief Gets the trailer dictionary
 @return the trailer dictionary
 */
- (ComAowagieTextPdfPdfDictionary *)getTrailer;

/*!
 @brief Gets the number of xref objects.
 @return the number of xref objects
 */
- (jint)getXrefSize;

/*!
 @brief Indica si esta es la versi&oacute;n deiText modificada para afrima.
 */
+ (void)isAfirmaModifiedItext;

/*!
 @brief Getter for property appendable.
 @return Value of property appendable.
 */
- (jboolean)isAppendable;

/*!
 @brief Returns <CODE>true</CODE> if the PDF is encrypted.
 @return <CODE>true</CODE> if the PDF is encrypted
 */
- (jboolean)isEncrypted;

/*!
 @brief Getter for property hybridXref.
 @return Value of property hybridXref.
 */
- (jboolean)isHybridXref;

- (jboolean)isMetadataEncrypted;

/*!
 @brief Getter for property newXrefType.
 @return Value of property newXrefType.
 */
- (jboolean)isNewXrefType;

/*!
 @brief Checks if the document was opened with the owner password so that the end application
  can decide what level of access restrictions to apply.If the document is not encrypted
  it will return <CODE>true</CODE>.
 @return <CODE>true</CODE> if the document was opened with the owner password or if it's not encrypted, 
 <CODE>false</CODE> if the document was opened with the user password
 */
- (jboolean)isOpenedWithFullPermissions;

/*!
 @brief Checks if the document had errors and was rebuilt.
 @return true if rebuilt.
 */
- (jboolean)isRebuilt;

/*!
 @brief Checks if the document was changed.
 @return <CODE>true</CODE> if the document was changed, 
 <CODE>false</CODE> otherwise
 */
- (jboolean)isTampered;

/*!
 @param pageNum Page number
 */
- (void)releasePageWithInt:(jint)pageNum;

/*!
 @brief Removes any usage rights that this PDF may have.Only Adobe can grant usage rights
  and any PDF modification with iText will invalidate them.
 Invalidated usage rights may
  confuse Acrobat and it's advisable to remove them altogether.
 */
- (void)removeUsageRights;

- (void)resetReleasePage;

/*!
 @brief Setter for property appendable.
 @param appendable New value of property appendable.
 */
- (void)setAppendableWithBoolean:(jboolean)appendable;

/*!
 @brief Sets the tampered state.A tampered PdfReader cannot be reused in PdfStamper.
 @param tampered the tampered state
 */
- (void)setTamperedWithBoolean:(jboolean)tampered;

/*!
 @brief Sets the viewer preferences as the sum of several constants.
 @param preferences the viewer preferences
 - seealso: PdfViewerPreferences#setViewerPreferences
 */
- (void)setViewerPreferencesWithInt:(jint)preferences;

#pragma mark Protected

- (instancetype)init;

- (ComAowagieTextPdfPdfReaderInstance *)getPdfReaderInstanceWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer;

- (void)killXrefWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj;

- (void)readDocObj;

- (void)readPages;

- (void)readPdf;

- (void)rebuildXref;

#pragma mark Package-Private

/*!
 @brief Creates an independent duplicate.
 @param reader the  <CODE> PdfReader </CODE>  to duplicate
 */
- (instancetype)initWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader;

/*!
 @brief Replaces all the local named links with the actual destinations.
 */
- (void)consolidateNamedDestinations;

/*!
 @brief Gets the box size.Allowed names are: "crop", "trim", "art", "bleed" and "media".
 @param index the page number. The first page is 1
 @param boxName the box name
 @return the box rectangle or null
 */
- (ComAowagieTextRectangle *)getBoxSizeWithInt:(jint)index
                                  withNSString:(NSString *)boxName;

- (ComAowagieTextPdfPdfIndirectReference *)getCryptoRef;

- (ComAowagieTextPdfPdfEncryption *)getDecrypt;

/*!
 @brief Normalizes a <CODE>Rectangle</CODE> so that llx and lly are smaller than urx and ury.
 @param box the original rectangle
 @return a normalized <CODE>Rectangle</CODE>
 */
+ (ComAowagieTextRectangle *)getNormalizedRectangleWithComAowagieTextPdfPdfArray:(ComAowagieTextPdfPdfArray *)box;

/*!
 @brief Gets the rotated page from a page dictionary.
 @param page the page dictionary
 @return the rotated page
 */
- (ComAowagieTextRectangle *)getPageSizeWithRotationWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)page;

/*!
 @param obj PDF Object
 @param parent Parent
 @return a PdfObject
 */
+ (ComAowagieTextPdfPdfObject *)getPdfObjectWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj
                                            withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)parent;

/*!
 @param idx Index.
 @return a PdfObject
 */
- (ComAowagieTextPdfPdfObject *)getPdfObjectReleaseWithInt:(jint)idx;

/*!
 @brief Reads a <CODE>PdfObject</CODE> resolving an indirect reference
  if needed.If the reader was opened in partial mode the object will be released
  to save memory.
 @param obj the  <CODE> PdfObject </CODE>  to read
 @param parent parent
 @return a PdfObject
 */
+ (ComAowagieTextPdfPdfObject *)getPdfObjectReleaseWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj
                                                   withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)parent;

/*!
 @brief Get the content from a stream as it is without applying any filter.
 @param stream the stream
 @throw IOExceptionon error
 @return the stream content
 */
+ (IOSByteArray *)getStreamBytesRawWithComAowagieTextPdfPRStream:(ComAowagieTextPdfPRStream *)stream;

/*!
 @brief Eliminates the reference to the object freeing the memory used by it and clearing
  the xref entry.
 @param obj the object. If it's an indirect reference it will be eliminated
 @return the object or the already erased dereferenced object
 */
+ (ComAowagieTextPdfPdfObject *)killIndirectWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj;

/*!
 @param obj PDF object
 */
+ (void)releaseLastXrefPartialWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj;

/*!
 @brief Removes all the fields from the document.
 */
- (void)removeFields;

/*!
 @brief Selects the pages to keep in the document.The pages are described as a 
 <CODE>List</CODE> of <CODE>Integer</CODE>.
 The page ordering can be changed but
  no page repetitions are allowed. Note that it may be very slow in partial mode.
 @param pagesToKeep the pages to keep in the document
 */
- (void)selectPagesWithJavaUtilList:(id<JavaUtilList>)pagesToKeep;

- (void)setViewerPreferencesWithComAowagieTextPdfInternalPdfViewerPreferencesImp:(ComAowagieTextPdfInternalPdfViewerPreferencesImp *)vp;

/*!
 @brief Finds all the font subsets and changes the prefixes to some
  random values.
 @return the number of font subsets altered
 */
- (jint)shuffleSubsetNames;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfPdfReader)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader, tokens_, ComAowagieTextPdfPRTokeniser *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader, trailer_, ComAowagieTextPdfPdfDictionary *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader, catalog_, ComAowagieTextPdfPdfDictionary *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader, pageRefs_, ComAowagieTextPdfPdfReader_PageRefs *)

FOUNDATION_EXPORT void ComAowagieTextPdfPdfReader_init(ComAowagieTextPdfPdfReader *self);

FOUNDATION_EXPORT ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_init(void);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfReader_initWithNSString_(ComAowagieTextPdfPdfReader *self, NSString *filename);

FOUNDATION_EXPORT ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_initWithNSString_(NSString *filename) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_initWithNSString_(NSString *filename);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfReader_initWithByteArray_(ComAowagieTextPdfPdfReader *self, IOSByteArray *pdfIn);

FOUNDATION_EXPORT ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_initWithByteArray_(IOSByteArray *pdfIn) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_initWithByteArray_(IOSByteArray *pdfIn);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfReader_initWithByteArray_withByteArray_(ComAowagieTextPdfPdfReader *self, IOSByteArray *pdfIn, IOSByteArray *ownerPassword);

FOUNDATION_EXPORT ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_initWithByteArray_withByteArray_(IOSByteArray *pdfIn, IOSByteArray *ownerPassword) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_initWithByteArray_withByteArray_(IOSByteArray *pdfIn, IOSByteArray *ownerPassword);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfReader_initWithNSString_withJavaSecurityCertCertificate_withJavaSecurityKey_withNSString_(ComAowagieTextPdfPdfReader *self, NSString *filename, JavaSecurityCertCertificate *certificate, id<JavaSecurityKey> certificateKey, NSString *certificateKeyProvider);

FOUNDATION_EXPORT ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_initWithNSString_withJavaSecurityCertCertificate_withJavaSecurityKey_withNSString_(NSString *filename, JavaSecurityCertCertificate *certificate, id<JavaSecurityKey> certificateKey, NSString *certificateKeyProvider) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_initWithNSString_withJavaSecurityCertCertificate_withJavaSecurityKey_withNSString_(NSString *filename, JavaSecurityCertCertificate *certificate, id<JavaSecurityKey> certificateKey, NSString *certificateKeyProvider);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfReader_initWithJavaIoInputStream_(ComAowagieTextPdfPdfReader *self, JavaIoInputStream *is);

FOUNDATION_EXPORT ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_initWithJavaIoInputStream_(JavaIoInputStream *is) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_initWithJavaIoInputStream_(JavaIoInputStream *is);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfReader_initWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader *self, ComAowagieTextPdfPdfReader *reader);

FOUNDATION_EXPORT ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_initWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader *reader) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_initWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader *reader);

FOUNDATION_EXPORT ComAowagieTextRectangle *ComAowagieTextPdfPdfReader_getNormalizedRectangleWithComAowagieTextPdfPdfArray_(ComAowagieTextPdfPdfArray *box);

FOUNDATION_EXPORT ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfObject *obj);

FOUNDATION_EXPORT ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfObject *obj);

FOUNDATION_EXPORT ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfObject *obj, ComAowagieTextPdfPdfObject *parent);

FOUNDATION_EXPORT ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfObject *obj, ComAowagieTextPdfPdfObject *parent);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfReader_releaseLastXrefPartialWithComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfObject *obj);

FOUNDATION_EXPORT ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfReader_killIndirectWithComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfObject *obj);

FOUNDATION_EXPORT IOSByteArray *ComAowagieTextPdfPdfReader_FlateDecodeWithByteArray_withBoolean_(IOSByteArray *inArg, jboolean strict);

FOUNDATION_EXPORT IOSByteArray *ComAowagieTextPdfPdfReader_getStreamBytesWithComAowagieTextPdfPRStream_(ComAowagieTextPdfPRStream *stream);

FOUNDATION_EXPORT IOSByteArray *ComAowagieTextPdfPdfReader_getStreamBytesRawWithComAowagieTextPdfPRStream_(ComAowagieTextPdfPRStream *stream);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfReader_isAfirmaModifiedItext(void);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfReader)

#endif

#if !defined (ComAowagieTextPdfPdfReader_PageRefs_) && (INCLUDE_ALL_ComAowagieTextPdfPdfReader || defined(INCLUDE_ComAowagieTextPdfPdfReader_PageRefs))
#define ComAowagieTextPdfPdfReader_PageRefs_

@class ComAowagieTextPdfPRIndirectReference;
@class ComAowagieTextPdfPdfDictionary;

@interface ComAowagieTextPdfPdfReader_PageRefs : NSObject

#pragma mark Public

/*!
 @brief Gets the dictionary that represents a page.
 @param pageNum the page number. 1 is the first
 @return the page dictionary
 */
- (ComAowagieTextPdfPdfDictionary *)getPageNWithInt:(jint)pageNum;

/*!
 @param pageNum Page
 @return a dictionary object
 */
- (ComAowagieTextPdfPdfDictionary *)getPageNReleaseWithInt:(jint)pageNum;

/*!
 @brief Gets the page reference to this page.
 @param pageNum the page number. 1 is the first
 @return the page reference
 */
- (ComAowagieTextPdfPRIndirectReference *)getPageOrigRefWithInt:(jint)pageNum;

/*!
 @param pageNum Page number
 */
- (void)releasePageWithInt:(jint)pageNum;

- (void)resetReleasePage;

#pragma mark Package-Private

- (void)insertPageWithInt:(jint)pageNum
withComAowagieTextPdfPRIndirectReference:(ComAowagieTextPdfPRIndirectReference *)ref;

- (void)readPages;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfPdfReader_PageRefs)

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfReader_PageRefs)

#endif

#pragma pop_macro("INCLUDE_ALL_ComAowagieTextPdfPdfReader")
