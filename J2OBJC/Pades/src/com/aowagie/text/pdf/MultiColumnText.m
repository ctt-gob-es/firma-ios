//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/MultiColumnText.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/Element.h"
#include "com/aowagie/text/Rectangle.h"
#include "com/aowagie/text/pdf/ColumnText.h"
#include "com/aowagie/text/pdf/MultiColumnText.h"
#include "com/aowagie/text/pdf/PdfDocument.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/MultiColumnText must be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

@interface ComAowagieTextPdfMultiColumnText () {
 @public
  /*!
   @brief total desiredHeight of columns.If <CODE>AUTOMATIC</CODE>, this means fill pages until done.
   This may be larger than one page
   */
  jfloat desiredHeight_;
  /*!
   @brief total height of element written out so far
   */
  jfloat totalHeight_;
  /*!
   @brief true if all the text could not be written out due to height restriction
   */
  jboolean overflow_;
  /*!
   @brief Top of the columns - y position on starting page.
   If <CODE>AUTOMATIC</CODE>, it means current y position when added to document
   */
  jfloat top_;
  /*!
   @brief ColumnText object used to do all the real work.This same object is used for all columns
   */
  ComAowagieTextPdfColumnText *columnText_;
  /*!
   @brief Array of <CODE>ColumnDef</CODE> objects used to define the columns
   */
  JavaUtilArrayList *columnDefs_;
  jint currentColumn_;
  jfloat nextY_;
  jboolean columnsRightToLeft_;
  ComAowagieTextPdfPdfDocument *document_;
}

/*!
 @brief Construct a MultiColumnText container of the specified height.
 If height is <CODE>AUTOMATIC</CODE>, fill complete pages until done.
  If a specific height is used, it may span one or more pages.
 @param height Height
 */
- (instancetype)initPackagePrivateWithFloat:(jfloat)height;

/*!
 @brief Add a simple rectangular column with specified left
  and right x position boundaries.
 @param left left boundary
 @param right right boundary
 */
- (void)addSimpleColumnWithFloat:(jfloat)left
                       withFloat:(jfloat)right;

- (void)newPage OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Figure out the height of a column from the border extents
 @param left left border
 @param right right border
 @return height
 */
- (jfloat)getHeightWithFloatArray:(IOSFloatArray *)left
                   withFloatArray:(IOSFloatArray *)right;

/*!
 @brief Calculates the appropriate y position for the bottom
  of the columns on this page.
 @return the y position of the bottom of the columns
 */
- (jfloat)getColumnBottom;

/*!
 @brief Resets the current column.
 */
- (void)resetCurrentColumn;

/*!
 @brief Shifts the current column.
 @return true if the current column has changed
 */
- (jboolean)shiftCurrentColumn;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfMultiColumnText, columnText_, ComAowagieTextPdfColumnText *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfMultiColumnText, columnDefs_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfMultiColumnText, document_, ComAowagieTextPdfPdfDocument *)

/*!
 @brief special constant for automatic calculation of height
 */
inline jfloat ComAowagieTextPdfMultiColumnText_get_AUTOMATIC(void);
#define ComAowagieTextPdfMultiColumnText_AUTOMATIC -1.0f
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfMultiColumnText, AUTOMATIC, jfloat)

/*!
 @brief true if all columns are simple (rectangular)
 */
inline jboolean ComAowagieTextPdfMultiColumnText_get_simple(void);
#define ComAowagieTextPdfMultiColumnText_simple true
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfMultiColumnText, simple, jboolean)

__attribute__((unused)) static void ComAowagieTextPdfMultiColumnText_initPackagePrivateWithFloat_(ComAowagieTextPdfMultiColumnText *self, jfloat height);

__attribute__((unused)) static ComAowagieTextPdfMultiColumnText *new_ComAowagieTextPdfMultiColumnText_initPackagePrivateWithFloat_(jfloat height) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfMultiColumnText *create_ComAowagieTextPdfMultiColumnText_initPackagePrivateWithFloat_(jfloat height);

__attribute__((unused)) static void ComAowagieTextPdfMultiColumnText_addSimpleColumnWithFloat_withFloat_(ComAowagieTextPdfMultiColumnText *self, jfloat left, jfloat right);

__attribute__((unused)) static void ComAowagieTextPdfMultiColumnText_newPage(ComAowagieTextPdfMultiColumnText *self);

__attribute__((unused)) static jfloat ComAowagieTextPdfMultiColumnText_getHeightWithFloatArray_withFloatArray_(ComAowagieTextPdfMultiColumnText *self, IOSFloatArray *left, IOSFloatArray *right);

__attribute__((unused)) static jfloat ComAowagieTextPdfMultiColumnText_getColumnBottom(ComAowagieTextPdfMultiColumnText *self);

__attribute__((unused)) static void ComAowagieTextPdfMultiColumnText_resetCurrentColumn(ComAowagieTextPdfMultiColumnText *self);

__attribute__((unused)) static jboolean ComAowagieTextPdfMultiColumnText_shiftCurrentColumn(ComAowagieTextPdfMultiColumnText *self);

/*!
 @brief Inner class used to define a column
 */
@interface ComAowagieTextPdfMultiColumnText_ColumnDef : NSObject {
 @public
  ComAowagieTextPdfMultiColumnText *this$0_;
  IOSFloatArray *left_;
  IOSFloatArray *right_;
}

- (instancetype)initWithComAowagieTextPdfMultiColumnText:(ComAowagieTextPdfMultiColumnText *)outer$
                                          withFloatArray:(IOSFloatArray *)newLeft
                                          withFloatArray:(IOSFloatArray *)newRight;

- (instancetype)initWithComAowagieTextPdfMultiColumnText:(ComAowagieTextPdfMultiColumnText *)outer$
                                               withFloat:(jfloat)leftPosition
                                               withFloat:(jfloat)rightPosition;

/*!
 @brief Resolves the positions for the specified side of the column
  into real numbers once the top of the column is known.
 @param side either  <CODE> Rectangle.LEFT </CODE>
               or  <CODE> Rectangle.RIGHT </CODE>
 @return the array of floats for the side
 */
- (IOSFloatArray *)resolvePositionsWithInt:(jint)side;

- (IOSFloatArray *)resolvePositionsWithFloatArray:(IOSFloatArray *)positions;

/*!
 @brief Checks if column definition is a simple rectangle
 @return true if it is a simple column
 */
- (jboolean)isSimple;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfMultiColumnText_ColumnDef)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfMultiColumnText_ColumnDef, left_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfMultiColumnText_ColumnDef, right_, IOSFloatArray *)

__attribute__((unused)) static void ComAowagieTextPdfMultiColumnText_ColumnDef_initWithComAowagieTextPdfMultiColumnText_withFloatArray_withFloatArray_(ComAowagieTextPdfMultiColumnText_ColumnDef *self, ComAowagieTextPdfMultiColumnText *outer$, IOSFloatArray *newLeft, IOSFloatArray *newRight);

__attribute__((unused)) static ComAowagieTextPdfMultiColumnText_ColumnDef *new_ComAowagieTextPdfMultiColumnText_ColumnDef_initWithComAowagieTextPdfMultiColumnText_withFloatArray_withFloatArray_(ComAowagieTextPdfMultiColumnText *outer$, IOSFloatArray *newLeft, IOSFloatArray *newRight) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfMultiColumnText_ColumnDef *create_ComAowagieTextPdfMultiColumnText_ColumnDef_initWithComAowagieTextPdfMultiColumnText_withFloatArray_withFloatArray_(ComAowagieTextPdfMultiColumnText *outer$, IOSFloatArray *newLeft, IOSFloatArray *newRight);

__attribute__((unused)) static void ComAowagieTextPdfMultiColumnText_ColumnDef_initWithComAowagieTextPdfMultiColumnText_withFloat_withFloat_(ComAowagieTextPdfMultiColumnText_ColumnDef *self, ComAowagieTextPdfMultiColumnText *outer$, jfloat leftPosition, jfloat rightPosition);

__attribute__((unused)) static ComAowagieTextPdfMultiColumnText_ColumnDef *new_ComAowagieTextPdfMultiColumnText_ColumnDef_initWithComAowagieTextPdfMultiColumnText_withFloat_withFloat_(ComAowagieTextPdfMultiColumnText *outer$, jfloat leftPosition, jfloat rightPosition) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfMultiColumnText_ColumnDef *create_ComAowagieTextPdfMultiColumnText_ColumnDef_initWithComAowagieTextPdfMultiColumnText_withFloat_withFloat_(ComAowagieTextPdfMultiColumnText *outer$, jfloat leftPosition, jfloat rightPosition);

__attribute__((unused)) static IOSFloatArray *ComAowagieTextPdfMultiColumnText_ColumnDef_resolvePositionsWithFloatArray_(ComAowagieTextPdfMultiColumnText_ColumnDef *self, IOSFloatArray *positions);

__attribute__((unused)) static jboolean ComAowagieTextPdfMultiColumnText_ColumnDef_isSimple(ComAowagieTextPdfMultiColumnText_ColumnDef *self);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfMultiColumnText_ColumnDef)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/MultiColumnText.java"


#line 66
@implementation ComAowagieTextPdfMultiColumnText


#line 119
- (instancetype)initPackagePrivate {
  ComAowagieTextPdfMultiColumnText_initPackagePrivate(self);
  return self;
}


#line 130
- (instancetype)initPackagePrivateWithFloat:(jfloat)height {
  ComAowagieTextPdfMultiColumnText_initPackagePrivateWithFloat_(self, height);
  return self;
}


#line 150
- (jboolean)isOverflow {
  return self->overflow_;
}


#line 165
- (void)addSimpleColumnWithFloat:(jfloat)left
                       withFloat:(jfloat)right {
  ComAowagieTextPdfMultiColumnText_addSimpleColumnWithFloat_withFloat_(self, left, right);
}


#line 181
- (void)newPage {
  ComAowagieTextPdfMultiColumnText_newPage(self);
}


#line 202
- (jfloat)getHeightWithFloatArray:(IOSFloatArray *)left
                   withFloatArray:(IOSFloatArray *)right {
  return ComAowagieTextPdfMultiColumnText_getHeightWithFloatArray_withFloatArray_(self, left, right);
}


#line 225
- (jint)type {
  
#line 227
  return ComAowagieTextElement_MULTI_COLUMN_TEXT;
}


#line 236
- (JavaUtilArrayList *)getChunks {
  
#line 238
  return nil;
}


#line 245
- (jboolean)isContent {
  
#line 247
  return true;
}


#line 254
- (jboolean)isNestable {
  
#line 256
  return false;
}


#line 265
- (jfloat)getColumnBottom {
  return ComAowagieTextPdfMultiColumnText_getColumnBottom(self);
}


#line 279
- (jint)getCurrentColumn {
  if (self->columnsRightToLeft_) {
    return [((JavaUtilArrayList *) nil_chk(self->columnDefs_)) size] - self->currentColumn_ - 1;
  }
  return self->currentColumn_;
}


#line 289
- (void)resetCurrentColumn {
  ComAowagieTextPdfMultiColumnText_resetCurrentColumn(self);
}


#line 297
- (jboolean)shiftCurrentColumn {
  return ComAowagieTextPdfMultiColumnText_shiftCurrentColumn(self);
}


#line 309
- (void)setColumnsRightToLeftWithBoolean:(jboolean)direction {
  self->columnsRightToLeft_ = direction;
}


#line 320
- (void)setSpaceCharRatioWithFloat:(jfloat)spaceCharRatio {
  [((ComAowagieTextPdfColumnText *) nil_chk(self->columnText_)) setSpaceCharRatioWithFloat:spaceCharRatio];
}


#line 327
- (void)setRunDirectionWithInt:(jint)runDirection {
  [((ComAowagieTextPdfColumnText *) nil_chk(self->columnText_)) setRunDirectionWithInt:runDirection];
}


#line 335
- (void)setArabicOptionsWithInt:(jint)arabicOptions {
  [((ComAowagieTextPdfColumnText *) nil_chk(self->columnText_)) setArabicOptionsWithInt:arabicOptions];
}


#line 342
- (void)setAlignmentWithInt:(jint)alignment {
  [((ComAowagieTextPdfColumnText *) nil_chk(self->columnText_)) setAlignmentWithInt:alignment];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "F", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(initPackagePrivateWithFloat:);
  methods[2].selector = @selector(isOverflow);
  methods[3].selector = @selector(addSimpleColumnWithFloat:withFloat:);
  methods[4].selector = @selector(newPage);
  methods[5].selector = @selector(getHeightWithFloatArray:withFloatArray:);
  methods[6].selector = @selector(type);
  methods[7].selector = @selector(getChunks);
  methods[8].selector = @selector(isContent);
  methods[9].selector = @selector(isNestable);
  methods[10].selector = @selector(getColumnBottom);
  methods[11].selector = @selector(getCurrentColumn);
  methods[12].selector = @selector(resetCurrentColumn);
  methods[13].selector = @selector(shiftCurrentColumn);
  methods[14].selector = @selector(setColumnsRightToLeftWithBoolean:);
  methods[15].selector = @selector(setSpaceCharRatioWithFloat:);
  methods[16].selector = @selector(setRunDirectionWithInt:);
  methods[17].selector = @selector(setArabicOptionsWithInt:);
  methods[18].selector = @selector(setAlignmentWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "AUTOMATIC", "F", .constantValue.asFloat = ComAowagieTextPdfMultiColumnText_AUTOMATIC, 0x1a, -1, -1, -1, -1 },
    { "desiredHeight_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "totalHeight_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overflow_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "top_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "columnText_", "LComAowagieTextPdfColumnText;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "columnDefs_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "simple", "Z", .constantValue.asBOOL = ComAowagieTextPdfMultiColumnText_simple, 0x12, 13, -1, -1, -1 },
    { "currentColumn_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "columnsRightToLeft_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "document_", "LComAowagieTextPdfPdfDocument;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "F", "addSimpleColumn", "FF", "LComAowagieTextDocumentException;", "getHeight", "[F[F", "setColumnsRightToLeft", "Z", "setSpaceCharRatio", "setRunDirection", "I", "setArabicOptions", "setAlignment", "simple", "LComAowagieTextPdfMultiColumnText_ColumnDef;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfMultiColumnText = { "MultiColumnText", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 19, 12, -1, 14, -1, -1, -1 };
  return &_ComAowagieTextPdfMultiColumnText;
}

@end


#line 119
void ComAowagieTextPdfMultiColumnText_initPackagePrivate(ComAowagieTextPdfMultiColumnText *self) {
  ComAowagieTextPdfMultiColumnText_initPackagePrivateWithFloat_(self, ComAowagieTextPdfMultiColumnText_AUTOMATIC);
}


#line 119
ComAowagieTextPdfMultiColumnText *new_ComAowagieTextPdfMultiColumnText_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfMultiColumnText, initPackagePrivate)
}


#line 119
ComAowagieTextPdfMultiColumnText *create_ComAowagieTextPdfMultiColumnText_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfMultiColumnText, initPackagePrivate)
}


#line 130
void ComAowagieTextPdfMultiColumnText_initPackagePrivateWithFloat_(ComAowagieTextPdfMultiColumnText *self, jfloat height) {
  NSObject_init(self);
  self->currentColumn_ =
#line 108
  0;
  self->nextY_ = ComAowagieTextPdfMultiColumnText_AUTOMATIC;
  self->columnsRightToLeft_ =
#line 112
  false;
  
#line 131
  self->columnDefs_ = new_JavaUtilArrayList_init();
  self->desiredHeight_ = height;
  self->top_ = ComAowagieTextPdfMultiColumnText_AUTOMATIC;
  
#line 135
  self->columnText_ = new_ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(nil);
  self->totalHeight_ = 0.0f;
}


#line 130
ComAowagieTextPdfMultiColumnText *new_ComAowagieTextPdfMultiColumnText_initPackagePrivateWithFloat_(jfloat height) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfMultiColumnText, initPackagePrivateWithFloat_, height)
}


#line 130
ComAowagieTextPdfMultiColumnText *create_ComAowagieTextPdfMultiColumnText_initPackagePrivateWithFloat_(jfloat height) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfMultiColumnText, initPackagePrivateWithFloat_, height)
}


#line 165
void ComAowagieTextPdfMultiColumnText_addSimpleColumnWithFloat_withFloat_(ComAowagieTextPdfMultiColumnText *self, jfloat left, jfloat right) {
  ComAowagieTextPdfMultiColumnText_ColumnDef *newCol = new_ComAowagieTextPdfMultiColumnText_ColumnDef_initWithComAowagieTextPdfMultiColumnText_withFloat_withFloat_(self, left, right);
  [((JavaUtilArrayList *) nil_chk(self->columnDefs_)) addWithId:newCol];
}


#line 181
void ComAowagieTextPdfMultiColumnText_newPage(ComAowagieTextPdfMultiColumnText *self) {
  ComAowagieTextPdfMultiColumnText_resetCurrentColumn(self);
  if (self->desiredHeight_ == ComAowagieTextPdfMultiColumnText_AUTOMATIC) {
    self->top_ = self->nextY_ = ComAowagieTextPdfMultiColumnText_AUTOMATIC;
  }
  else {
    self->top_ = self->nextY_;
  }
  self->totalHeight_ = 0;
  if (self->document_ != nil) {
    [self->document_ newPage];
  }
}


#line 202
jfloat ComAowagieTextPdfMultiColumnText_getHeightWithFloatArray_withFloatArray_(ComAowagieTextPdfMultiColumnText *self, IOSFloatArray *left, IOSFloatArray *right) {
  jfloat max = JavaLangFloat_MIN_VALUE;
  jfloat min = JavaLangFloat_MAX_VALUE;
  for (jint i = 0; i < ((IOSFloatArray *) nil_chk(left))->size_; i += 2) {
    min = JavaLangMath_minWithFloat_withFloat_(min, IOSFloatArray_Get(left, i + 1));
    max = JavaLangMath_maxWithFloat_withFloat_(max, IOSFloatArray_Get(left, i + 1));
  }
  for (jint i = 0; i < ((IOSFloatArray *) nil_chk(right))->size_; i += 2) {
    min = JavaLangMath_minWithFloat_withFloat_(min, IOSFloatArray_Get(right, i + 1));
    max = JavaLangMath_maxWithFloat_withFloat_(max, IOSFloatArray_Get(right, i + 1));
  }
  return max - min;
}


#line 265
jfloat ComAowagieTextPdfMultiColumnText_getColumnBottom(ComAowagieTextPdfMultiColumnText *self) {
  if (self->desiredHeight_ == ComAowagieTextPdfMultiColumnText_AUTOMATIC) {
    return [((ComAowagieTextPdfPdfDocument *) nil_chk(self->document_)) bottom];
  }
  else {
    
#line 269
    return JavaLangMath_maxWithFloat_withFloat_(self->top_ - (self->desiredHeight_ - self->totalHeight_), [((ComAowagieTextPdfPdfDocument *) nil_chk(self->document_)) bottom]);
  }
}


#line 289
void ComAowagieTextPdfMultiColumnText_resetCurrentColumn(ComAowagieTextPdfMultiColumnText *self) {
  self->currentColumn_ = 0;
}


#line 297
jboolean ComAowagieTextPdfMultiColumnText_shiftCurrentColumn(ComAowagieTextPdfMultiColumnText *self) {
  if (self->currentColumn_ + 1 < [((JavaUtilArrayList *) nil_chk(self->columnDefs_)) size]) {
    self->currentColumn_++;
    return true;
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfMultiColumnText)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/MultiColumnText.java"


#line 349
@implementation ComAowagieTextPdfMultiColumnText_ColumnDef


#line 353
- (instancetype)initWithComAowagieTextPdfMultiColumnText:(ComAowagieTextPdfMultiColumnText *)outer$
                                          withFloatArray:(IOSFloatArray *)newLeft
                                          withFloatArray:(IOSFloatArray *)newRight {
  ComAowagieTextPdfMultiColumnText_ColumnDef_initWithComAowagieTextPdfMultiColumnText_withFloatArray_withFloatArray_(self, outer$, newLeft, newRight);
  return self;
}


#line 358
- (instancetype)initWithComAowagieTextPdfMultiColumnText:(ComAowagieTextPdfMultiColumnText *)outer$
                                               withFloat:(jfloat)leftPosition
                                               withFloat:(jfloat)rightPosition {
  ComAowagieTextPdfMultiColumnText_ColumnDef_initWithComAowagieTextPdfMultiColumnText_withFloat_withFloat_(self, outer$, leftPosition, rightPosition);
  return self;
}


#line 388
- (IOSFloatArray *)resolvePositionsWithInt:(jint)side {
  if (side == ComAowagieTextRectangle_LEFT) {
    return ComAowagieTextPdfMultiColumnText_ColumnDef_resolvePositionsWithFloatArray_(self, self->left_);
  }
  else {
    
#line 392
    return ComAowagieTextPdfMultiColumnText_ColumnDef_resolvePositionsWithFloatArray_(self, self->right_);
  }
}


#line 396
- (IOSFloatArray *)resolvePositionsWithFloatArray:(IOSFloatArray *)positions {
  return ComAowagieTextPdfMultiColumnText_ColumnDef_resolvePositionsWithFloatArray_(self, positions);
}


#line 415
- (jboolean)isSimple {
  return ComAowagieTextPdfMultiColumnText_ColumnDef_isSimple(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "[F", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "[F", 0x2, 2, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComAowagieTextPdfMultiColumnText:withFloatArray:withFloatArray:);
  methods[1].selector = @selector(initWithComAowagieTextPdfMultiColumnText:withFloat:withFloat:);
  methods[2].selector = @selector(resolvePositionsWithInt:);
  methods[3].selector = @selector(resolvePositionsWithFloatArray:);
  methods[4].selector = @selector(isSimple);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComAowagieTextPdfMultiColumnText;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "left_", "[F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "right_", "[F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfMultiColumnText;[F[F", "LComAowagieTextPdfMultiColumnText;FF", "resolvePositions", "I", "[F", "LComAowagieTextPdfMultiColumnText;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfMultiColumnText_ColumnDef = { "ColumnDef", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x2, 5, 3, 5, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfMultiColumnText_ColumnDef;
}

@end


#line 353
void ComAowagieTextPdfMultiColumnText_ColumnDef_initWithComAowagieTextPdfMultiColumnText_withFloatArray_withFloatArray_(ComAowagieTextPdfMultiColumnText_ColumnDef *self, ComAowagieTextPdfMultiColumnText *outer$, IOSFloatArray *newLeft, IOSFloatArray *newRight) {
  self->this$0_ = outer$;
  NSObject_init(self);
  
#line 354
  self->left_ = newLeft;
  self->right_ = newRight;
}


#line 353
ComAowagieTextPdfMultiColumnText_ColumnDef *new_ComAowagieTextPdfMultiColumnText_ColumnDef_initWithComAowagieTextPdfMultiColumnText_withFloatArray_withFloatArray_(ComAowagieTextPdfMultiColumnText *outer$, IOSFloatArray *newLeft, IOSFloatArray *newRight) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfMultiColumnText_ColumnDef, initWithComAowagieTextPdfMultiColumnText_withFloatArray_withFloatArray_, outer$, newLeft, newRight)
}


#line 353
ComAowagieTextPdfMultiColumnText_ColumnDef *create_ComAowagieTextPdfMultiColumnText_ColumnDef_initWithComAowagieTextPdfMultiColumnText_withFloatArray_withFloatArray_(ComAowagieTextPdfMultiColumnText *outer$, IOSFloatArray *newLeft, IOSFloatArray *newRight) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfMultiColumnText_ColumnDef, initWithComAowagieTextPdfMultiColumnText_withFloatArray_withFloatArray_, outer$, newLeft, newRight)
}


#line 358
void ComAowagieTextPdfMultiColumnText_ColumnDef_initWithComAowagieTextPdfMultiColumnText_withFloat_withFloat_(ComAowagieTextPdfMultiColumnText_ColumnDef *self, ComAowagieTextPdfMultiColumnText *outer$, jfloat leftPosition, jfloat rightPosition) {
  self->this$0_ = outer$;
  NSObject_init(self);
  
#line 359
  self->left_ = [IOSFloatArray newArrayWithLength:4];
  *IOSFloatArray_GetRef(self->left_, 0) = leftPosition;
  *IOSFloatArray_GetRef(self->left_, 1) = outer$->top_;
  *IOSFloatArray_GetRef(self->left_, 2) = leftPosition;
  if (outer$->desiredHeight_ == ComAowagieTextPdfMultiColumnText_AUTOMATIC || outer$->top_ == ComAowagieTextPdfMultiColumnText_AUTOMATIC) {
    *IOSFloatArray_GetRef(self->left_, 3) = ComAowagieTextPdfMultiColumnText_AUTOMATIC;
  }
  else {
    
#line 366
    *IOSFloatArray_GetRef(self->left_, 3) = outer$->top_ - outer$->desiredHeight_;
  }
  
#line 369
  self->right_ = [IOSFloatArray newArrayWithLength:4];
  *IOSFloatArray_GetRef(self->right_, 0) = rightPosition;
  *IOSFloatArray_GetRef(self->right_, 1) = outer$->top_;
  *IOSFloatArray_GetRef(self->right_, 2) = rightPosition;
  if (outer$->desiredHeight_ == ComAowagieTextPdfMultiColumnText_AUTOMATIC || outer$->top_ == ComAowagieTextPdfMultiColumnText_AUTOMATIC) {
    *IOSFloatArray_GetRef(self->right_, 3) = ComAowagieTextPdfMultiColumnText_AUTOMATIC;
  }
  else {
    
#line 376
    *IOSFloatArray_GetRef(self->right_, 3) = outer$->top_ - outer$->desiredHeight_;
  }
}


#line 358
ComAowagieTextPdfMultiColumnText_ColumnDef *new_ComAowagieTextPdfMultiColumnText_ColumnDef_initWithComAowagieTextPdfMultiColumnText_withFloat_withFloat_(ComAowagieTextPdfMultiColumnText *outer$, jfloat leftPosition, jfloat rightPosition) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfMultiColumnText_ColumnDef, initWithComAowagieTextPdfMultiColumnText_withFloat_withFloat_, outer$, leftPosition, rightPosition)
}


#line 358
ComAowagieTextPdfMultiColumnText_ColumnDef *create_ComAowagieTextPdfMultiColumnText_ColumnDef_initWithComAowagieTextPdfMultiColumnText_withFloat_withFloat_(ComAowagieTextPdfMultiColumnText *outer$, jfloat leftPosition, jfloat rightPosition) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfMultiColumnText_ColumnDef, initWithComAowagieTextPdfMultiColumnText_withFloat_withFloat_, outer$, leftPosition, rightPosition)
}


#line 396
IOSFloatArray *ComAowagieTextPdfMultiColumnText_ColumnDef_resolvePositionsWithFloatArray_(ComAowagieTextPdfMultiColumnText_ColumnDef *self, IOSFloatArray *positions) {
  if (!ComAowagieTextPdfMultiColumnText_ColumnDef_isSimple(self)) {
    *IOSFloatArray_GetRef(nil_chk(positions), 1) = self->this$0_->top_;
    return positions;
  }
  if (self->this$0_->top_ == ComAowagieTextPdfMultiColumnText_AUTOMATIC) {
    
#line 403
    @throw new_JavaLangRuntimeException_initWithNSString_(@"resolvePositions called with top=AUTOMATIC (-1).  Top position must be set befure lines can be resolved");
  }
  
#line 406
  *IOSFloatArray_GetRef(nil_chk(positions), 1) = self->this$0_->top_;
  *IOSFloatArray_GetRef(positions, 3) = ComAowagieTextPdfMultiColumnText_getColumnBottom(self->this$0_);
  return positions;
}


#line 415
jboolean ComAowagieTextPdfMultiColumnText_ColumnDef_isSimple(ComAowagieTextPdfMultiColumnText_ColumnDef *self) {
  return ((IOSFloatArray *) nil_chk(self->left_))->size_ == 4 && ((IOSFloatArray *) nil_chk(self->right_))->size_ == 4 && IOSFloatArray_Get(self->left_, 0) == IOSFloatArray_Get(self->left_, 2) && IOSFloatArray_Get(self->right_, 0) == IOSFloatArray_Get(self->right_, 2);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfMultiColumnText_ColumnDef)
