//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/hyphenation/Hyphenator.java
//

#include "J2ObjC_source.h"
#include "com/aowagie/text/pdf/BaseFont.h"
#include "com/aowagie/text/pdf/hyphenation/Hyphenation.h"
#include "com/aowagie/text/pdf/hyphenation/HyphenationTree.h"
#include "com/aowagie/text/pdf/hyphenation/Hyphenator.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/util/Hashtable.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/hyphenation/Hyphenator must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfHyphenationHyphenator () {
 @public
  ComAowagieTextPdfHyphenationHyphenationTree *hyphenTree_;
  jint remainCharCount_;
  jint pushCharCount_;
}

/*!
 @param lang lang
 @param country Country
 @return the hyphenation tree
 */
+ (ComAowagieTextPdfHyphenationHyphenationTree *)getHyphenationTreeWithNSString:(NSString *)lang
                                                                   withNSString:(NSString *)country;

/*!
 @param key key
 @return a hyphenation tree
 */
+ (ComAowagieTextPdfHyphenationHyphenationTree *)getResourceHyphenationTreeWithNSString:(NSString *)key;

/*!
 @param key Key
 @return a hyphenation tree
 */
+ (ComAowagieTextPdfHyphenationHyphenationTree *)getFileHyphenationTreeWithNSString:(NSString *)key;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfHyphenationHyphenator, hyphenTree_, ComAowagieTextPdfHyphenationHyphenationTree *)

/*!
 @brief TODO: Don't use statics
 */
inline JavaUtilHashtable *ComAowagieTextPdfHyphenationHyphenator_get_hyphenTrees(void);
inline JavaUtilHashtable *ComAowagieTextPdfHyphenationHyphenator_set_hyphenTrees(JavaUtilHashtable *value);
static JavaUtilHashtable *ComAowagieTextPdfHyphenationHyphenator_hyphenTrees;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfHyphenationHyphenator, hyphenTrees, JavaUtilHashtable *)

inline NSString *ComAowagieTextPdfHyphenationHyphenator_get_defaultHyphLocation(void);
static NSString *ComAowagieTextPdfHyphenationHyphenator_defaultHyphLocation = @"com/lowagie/text/pdf/hyphenation/hyph/";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfHyphenationHyphenator, defaultHyphLocation, NSString *)

/*!
 @brief Holds value of property hyphenDir.
 */
inline NSString *ComAowagieTextPdfHyphenationHyphenator_get_hyphenDir(void);
inline NSString *ComAowagieTextPdfHyphenationHyphenator_set_hyphenDir(NSString *value);
static NSString *ComAowagieTextPdfHyphenationHyphenator_hyphenDir = @"";
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfHyphenationHyphenator, hyphenDir, NSString *)

__attribute__((unused)) static ComAowagieTextPdfHyphenationHyphenationTree *ComAowagieTextPdfHyphenationHyphenator_getHyphenationTreeWithNSString_withNSString_(NSString *lang, NSString *country);

__attribute__((unused)) static ComAowagieTextPdfHyphenationHyphenationTree *ComAowagieTextPdfHyphenationHyphenator_getResourceHyphenationTreeWithNSString_(NSString *key);

__attribute__((unused)) static ComAowagieTextPdfHyphenationHyphenationTree *ComAowagieTextPdfHyphenationHyphenator_getFileHyphenationTreeWithNSString_(NSString *key);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/hyphenation/Hyphenator.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfHyphenationHyphenator)


#line 32
@implementation ComAowagieTextPdfHyphenationHyphenator


#line 51
- (instancetype)initWithNSString:(NSString *)lang
                    withNSString:(NSString *)country
                         withInt:(jint)leftMin
                         withInt:(jint)rightMin {
  ComAowagieTextPdfHyphenationHyphenator_initWithNSString_withNSString_withInt_withInt_(self, lang, country, leftMin, rightMin);
  return self;
}


#line 63
+ (ComAowagieTextPdfHyphenationHyphenationTree *)getHyphenationTreeWithNSString:(NSString *)lang
                                                                   withNSString:(NSString *)country {
  return ComAowagieTextPdfHyphenationHyphenator_getHyphenationTreeWithNSString_withNSString_(lang, country);
}


#line 93
+ (ComAowagieTextPdfHyphenationHyphenationTree *)getResourceHyphenationTreeWithNSString:(NSString *)key {
  return ComAowagieTextPdfHyphenationHyphenator_getResourceHyphenationTreeWithNSString_(key);
}


#line 115
+ (ComAowagieTextPdfHyphenationHyphenationTree *)getFileHyphenationTreeWithNSString:(NSString *)key {
  return ComAowagieTextPdfHyphenationHyphenator_getFileHyphenationTreeWithNSString_(key);
}


#line 150
- (void)setMinRemainCharCountWithInt:(jint)min {
  self->remainCharCount_ = min;
}


#line 157
- (void)setMinPushCharCountWithInt:(jint)min {
  self->pushCharCount_ = min;
}


#line 169
- (ComAowagieTextPdfHyphenationHyphenation *)hyphenateWithNSString:(NSString *)word {
  if (self->hyphenTree_ == nil) {
    return nil;
  }
  return [self->hyphenTree_ hyphenateWithNSString:word withInt:self->remainCharCount_ withInt:self->pushCharCount_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfHyphenationHyphenationTree;", 0xa, 1, 2, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfHyphenationHyphenationTree;", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfHyphenationHyphenationTree;", 0xa, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfHyphenationHyphenation;", 0x1, 9, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSString:withInt:withInt:);
  methods[1].selector = @selector(getHyphenationTreeWithNSString:withNSString:);
  methods[2].selector = @selector(getResourceHyphenationTreeWithNSString:);
  methods[3].selector = @selector(getFileHyphenationTreeWithNSString:);
  methods[4].selector = @selector(setMinRemainCharCountWithInt:);
  methods[5].selector = @selector(setMinPushCharCountWithInt:);
  methods[6].selector = @selector(hyphenateWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hyphenTrees", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0xa, -1, 10, -1, -1 },
    { "hyphenTree_", "LComAowagieTextPdfHyphenationHyphenationTree;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "remainCharCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pushCharCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultHyphLocation", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "hyphenDir", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 12, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;II", "getHyphenationTree", "LNSString;LNSString;", "getResourceHyphenationTree", "LNSString;", "getFileHyphenationTree", "setMinRemainCharCount", "I", "setMinPushCharCount", "hyphenate", &ComAowagieTextPdfHyphenationHyphenator_hyphenTrees, &ComAowagieTextPdfHyphenationHyphenator_defaultHyphLocation, &ComAowagieTextPdfHyphenationHyphenator_hyphenDir };
  static const J2ObjcClassInfo _ComAowagieTextPdfHyphenationHyphenator = { "Hyphenator", "com.aowagie.text.pdf.hyphenation", ptrTable, methods, fields, 7, 0x1, 7, 6, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfHyphenationHyphenator;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfHyphenationHyphenator class]) {
    ComAowagieTextPdfHyphenationHyphenator_hyphenTrees = new_JavaUtilHashtable_init();
    J2OBJC_SET_INITIALIZED(ComAowagieTextPdfHyphenationHyphenator)
  }
}

@end


#line 51
void ComAowagieTextPdfHyphenationHyphenator_initWithNSString_withNSString_withInt_withInt_(ComAowagieTextPdfHyphenationHyphenator *self, NSString *lang, NSString *country, jint leftMin, jint rightMin) {
  NSObject_init(self);
  self->hyphenTree_ =
#line 37
  nil;
  self->remainCharCount_ = 2;
  self->pushCharCount_ = 2;
  
#line 53
  self->hyphenTree_ = ComAowagieTextPdfHyphenationHyphenator_getHyphenationTreeWithNSString_withNSString_(lang, country);
  self->remainCharCount_ = leftMin;
  self->pushCharCount_ = rightMin;
}


#line 51
ComAowagieTextPdfHyphenationHyphenator *new_ComAowagieTextPdfHyphenationHyphenator_initWithNSString_withNSString_withInt_withInt_(NSString *lang, NSString *country, jint leftMin, jint rightMin) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfHyphenationHyphenator, initWithNSString_withNSString_withInt_withInt_, lang, country, leftMin, rightMin)
}


#line 51
ComAowagieTextPdfHyphenationHyphenator *create_ComAowagieTextPdfHyphenationHyphenator_initWithNSString_withNSString_withInt_withInt_(NSString *lang, NSString *country, jint leftMin, jint rightMin) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfHyphenationHyphenator, initWithNSString_withNSString_withInt_withInt_, lang, country, leftMin, rightMin)
}


#line 63
ComAowagieTextPdfHyphenationHyphenationTree *ComAowagieTextPdfHyphenationHyphenator_getHyphenationTreeWithNSString_withNSString_(NSString *lang, NSString *country) {
  ComAowagieTextPdfHyphenationHyphenator_initialize();
  NSString *key = lang;
  
#line 67
  if (country != nil && ![country isEqual:@"none"]) {
    (void) JreStrAppendStrong(&key, "C$", '_', country);
  }
  
#line 71
  if ([((JavaUtilHashtable *) nil_chk(ComAowagieTextPdfHyphenationHyphenator_hyphenTrees)) containsKeyWithId:key]) {
    return (ComAowagieTextPdfHyphenationHyphenationTree *) cast_chk([((JavaUtilHashtable *) nil_chk(ComAowagieTextPdfHyphenationHyphenator_hyphenTrees)) getWithId:key], [ComAowagieTextPdfHyphenationHyphenationTree class]);
  }
  if ([((JavaUtilHashtable *) nil_chk(ComAowagieTextPdfHyphenationHyphenator_hyphenTrees)) containsKeyWithId:lang]) {
    return (ComAowagieTextPdfHyphenationHyphenationTree *) cast_chk([((JavaUtilHashtable *) nil_chk(ComAowagieTextPdfHyphenationHyphenator_hyphenTrees)) getWithId:lang], [ComAowagieTextPdfHyphenationHyphenationTree class]);
  }
  
#line 78
  ComAowagieTextPdfHyphenationHyphenationTree *hTree = ComAowagieTextPdfHyphenationHyphenator_getResourceHyphenationTreeWithNSString_(key);
  if (hTree == nil) {
    hTree = ComAowagieTextPdfHyphenationHyphenator_getFileHyphenationTreeWithNSString_(key);
  }
  
#line 83
  if (hTree != nil) {
    (void) [((JavaUtilHashtable *) nil_chk(ComAowagieTextPdfHyphenationHyphenator_hyphenTrees)) putWithId:key withId:hTree];
  }
  return hTree;
}

ComAowagieTextPdfHyphenationHyphenationTree *ComAowagieTextPdfHyphenationHyphenator_getResourceHyphenationTreeWithNSString_(NSString *key) {
  ComAowagieTextPdfHyphenationHyphenator_initialize();
  
#line 94
  @try {
    JavaIoInputStream *stream = ComAowagieTextPdfBaseFont_getResourceStreamWithNSString_(JreStrcat("$$$", ComAowagieTextPdfHyphenationHyphenator_defaultHyphLocation, key, @".xml"));
    if (stream == nil && [((NSString *) nil_chk(key)) java_length] > 2) {
      stream = ComAowagieTextPdfBaseFont_getResourceStreamWithNSString_(JreStrcat("$$$", ComAowagieTextPdfHyphenationHyphenator_defaultHyphLocation, [((NSString *) nil_chk(key)) java_substring:0 endIndex:2], @".xml"));
    }
    if (stream == nil) {
      return nil;
    }
    ComAowagieTextPdfHyphenationHyphenationTree *hTree = new_ComAowagieTextPdfHyphenationHyphenationTree_initPackagePrivate();
    [hTree loadSimplePatternsWithJavaIoInputStream:stream];
    return hTree;
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}


#line 115
ComAowagieTextPdfHyphenationHyphenationTree *ComAowagieTextPdfHyphenationHyphenator_getFileHyphenationTreeWithNSString_(NSString *key) {
  ComAowagieTextPdfHyphenationHyphenator_initialize();
  
#line 116
  @try {
    if (ComAowagieTextPdfHyphenationHyphenator_hyphenDir == nil) {
      return nil;
    }
    JavaIoInputStream *stream = nil;
    JavaIoFile *hyphenFile = new_JavaIoFile_initWithNSString_withNSString_(ComAowagieTextPdfHyphenationHyphenator_hyphenDir, JreStrcat("$$", key, @".xml"));
    if ([hyphenFile canRead]) {
      stream = new_JavaIoFileInputStream_initWithJavaIoFile_(hyphenFile);
    }
    if (stream == nil && [((NSString *) nil_chk(key)) java_length] > 2) {
      hyphenFile = new_JavaIoFile_initWithNSString_withNSString_(ComAowagieTextPdfHyphenationHyphenator_hyphenDir, JreStrcat("$$", [((NSString *) nil_chk(key)) java_substring:0 endIndex:2], @".xml"));
      if ([hyphenFile canRead]) {
        stream = new_JavaIoFileInputStream_initWithJavaIoFile_(hyphenFile);
      }
    }
    if (stream == nil) {
      return nil;
    }
    ComAowagieTextPdfHyphenationHyphenationTree *hTree = new_ComAowagieTextPdfHyphenationHyphenationTree_initPackagePrivate();
    [hTree loadSimplePatternsWithJavaIoInputStream:stream];
    return hTree;
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfHyphenationHyphenator)
