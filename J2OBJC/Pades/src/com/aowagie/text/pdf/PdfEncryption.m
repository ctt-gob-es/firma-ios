//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfEncryption.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/ExceptionConverter.h"
#include "com/aowagie/text/pdf/ByteBuffer.h"
#include "com/aowagie/text/pdf/OutputStreamEncryption.h"
#include "com/aowagie/text/pdf/PdfArray.h"
#include "com/aowagie/text/pdf/PdfBoolean.h"
#include "com/aowagie/text/pdf/PdfContentByte.h"
#include "com/aowagie/text/pdf/PdfDictionary.h"
#include "com/aowagie/text/pdf/PdfEncryption.h"
#include "com/aowagie/text/pdf/PdfLiteral.h"
#include "com/aowagie/text/pdf/PdfName.h"
#include "com/aowagie/text/pdf/PdfNumber.h"
#include "com/aowagie/text/pdf/PdfObject.h"
#include "com/aowagie/text/pdf/PdfPublicKeyRecipient.h"
#include "com/aowagie/text/pdf/PdfPublicKeySecurityHandler.h"
#include "com/aowagie/text/pdf/PdfWriter.h"
#include "com/aowagie/text/pdf/StandardDecryption.h"
#include "com/aowagie/text/pdf/crypto/ARCFOUREncryption.h"
#include "com/aowagie/text/pdf/crypto/IVGenerator.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/Runtime.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/MessageDigest.h"
#include "java/security/cert/Certificate.h"
#include "java/util/Arrays.h"
#include "javax/crypto/Cipher.h"
#include "javax/crypto/spec/IvParameterSpec.h"
#include "javax/crypto/spec/SecretKeySpec.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/PdfEncryption must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfPdfEncryption () {
 @public
  /*!
   @brief The encryption key for a particular object/generation
   */
  IOSByteArray *key_;
  /*!
   @brief The encryption key length for a particular object/generation
   */
  jint keySize_;
  /*!
   @brief The global encryption key
   */
  IOSByteArray *mkey_;
  /*!
   @brief Work area to prepare the object/generation bytes
   */
  IOSByteArray *extra_;
  /*!
   @brief The message digest algorithm MD5
   */
  JavaSecurityMessageDigest *md5_;
  /*!
   @brief The encryption key for the owner
   */
  IOSByteArray *ownerKey_;
  /*!
   @brief The public key security handler for certificate encryption
   */
  ComAowagieTextPdfPdfPublicKeySecurityHandler *publicKeyHandler_;
  IOSByteArray *documentID_;
  jint revision_;
  ComAowagieTextPdfCryptoARCFOUREncryption *arcfour_;
  /*!
   @brief The generic key length.It may be 40 or 128.
   */
  jint keyLength_;
  jboolean encryptMetadata_;
  /*!
   @brief Indicates if the encryption is only necessary for embedded files.
   @since 2.1.3
   */
  jboolean embeddedFilesOnly_;
  jint cryptoMode_;
}

- (IOSByteArray *)padPasswordWithByteArray:(IOSByteArray *)userPassword;

- (IOSByteArray *)computeOwnerKeyWithByteArray:(IOSByteArray *)userPad
                                 withByteArray:(IOSByteArray *)ownerPad;

/*!
 @brief ownerKey, documentID must be setup
 @param documentID Document Id
 @param userPad User pad
 @param ownerKey Owner key
 @param permissions Permissions
 */
- (void)setupGlobalEncryptionKeyWithByteArray:(IOSByteArray *)documentID
                                withByteArray:(IOSByteArray *)userPad
                                withByteArray:(IOSByteArray *)ownerKey
                                      withInt:(jint)permissions;

/*!
 @brief mkey must be setup
 */
- (void)setupUserKey;

- (void)setupByUserPadWithByteArray:(IOSByteArray *)documentID
                      withByteArray:(IOSByteArray *)userPad
                      withByteArray:(IOSByteArray *)ownerKey
                            withInt:(jint)permissions;

- (void)setupByOwnerPadWithByteArray:(IOSByteArray *)documentID
                       withByteArray:(IOSByteArray *)ownerPad
                       withByteArray:(IOSByteArray *)userKey
                       withByteArray:(IOSByteArray *)ownerKey
                             withInt:(jint)permissions;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfEncryption, key_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfEncryption, mkey_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfEncryption, extra_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfEncryption, md5_, JavaSecurityMessageDigest *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfEncryption, ownerKey_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfEncryption, publicKeyHandler_, ComAowagieTextPdfPdfPublicKeySecurityHandler *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfEncryption, documentID_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfEncryption, arcfour_, ComAowagieTextPdfCryptoARCFOUREncryption *)

inline jint ComAowagieTextPdfPdfEncryption_get_STANDARD_ENCRYPTION_40(void);
#define ComAowagieTextPdfPdfEncryption_STANDARD_ENCRYPTION_40 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfEncryption, STANDARD_ENCRYPTION_40, jint)

inline jint ComAowagieTextPdfPdfEncryption_get_STANDARD_ENCRYPTION_128(void);
#define ComAowagieTextPdfPdfEncryption_STANDARD_ENCRYPTION_128 3
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfEncryption, STANDARD_ENCRYPTION_128, jint)

inline jint ComAowagieTextPdfPdfEncryption_get_AES_128(void);
#define ComAowagieTextPdfPdfEncryption_AES_128 4
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfEncryption, AES_128, jint)

inline IOSByteArray *ComAowagieTextPdfPdfEncryption_get_pad(void);
static IOSByteArray *ComAowagieTextPdfPdfEncryption_pad;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfEncryption, pad, IOSByteArray *)

inline IOSByteArray *ComAowagieTextPdfPdfEncryption_get_salt(void);
static IOSByteArray *ComAowagieTextPdfPdfEncryption_salt;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfEncryption, salt, IOSByteArray *)

inline IOSByteArray *ComAowagieTextPdfPdfEncryption_get_metadataPad(void);
static IOSByteArray *ComAowagieTextPdfPdfEncryption_metadataPad;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfEncryption, metadataPad, IOSByteArray *)

inline jlong ComAowagieTextPdfPdfEncryption_get_seq(void);
inline jlong ComAowagieTextPdfPdfEncryption_set_seq(jlong value);
inline jlong *ComAowagieTextPdfPdfEncryption_getRef_seq(void);
static jlong ComAowagieTextPdfPdfEncryption_seq;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComAowagieTextPdfPdfEncryption, seq, jlong)

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfPdfEncryption_padPasswordWithByteArray_(ComAowagieTextPdfPdfEncryption *self, IOSByteArray *userPassword);

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfPdfEncryption_computeOwnerKeyWithByteArray_withByteArray_(ComAowagieTextPdfPdfEncryption *self, IOSByteArray *userPad, IOSByteArray *ownerPad);

__attribute__((unused)) static void ComAowagieTextPdfPdfEncryption_setupGlobalEncryptionKeyWithByteArray_withByteArray_withByteArray_withInt_(ComAowagieTextPdfPdfEncryption *self, IOSByteArray *documentID, IOSByteArray *userPad, IOSByteArray *ownerKey, jint permissions);

__attribute__((unused)) static void ComAowagieTextPdfPdfEncryption_setupUserKey(ComAowagieTextPdfPdfEncryption *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfEncryption_setupByUserPadWithByteArray_withByteArray_withByteArray_withInt_(ComAowagieTextPdfPdfEncryption *self, IOSByteArray *documentID, IOSByteArray *userPad, IOSByteArray *ownerKey, jint permissions);

__attribute__((unused)) static void ComAowagieTextPdfPdfEncryption_setupByOwnerPadWithByteArray_withByteArray_withByteArray_withByteArray_withInt_(ComAowagieTextPdfPdfEncryption *self, IOSByteArray *documentID, IOSByteArray *ownerPad, IOSByteArray *userKey, IOSByteArray *ownerKey, jint permissions);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfEncryption.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfPdfEncryption)


#line 74
@implementation ComAowagieTextPdfPdfEncryption


#line 149
- (instancetype)initPackagePrivate {
  ComAowagieTextPdfPdfEncryption_initPackagePrivate(self);
  return self;
}


#line 158
- (instancetype)initPackagePrivateWithComAowagieTextPdfPdfEncryption:(ComAowagieTextPdfPdfEncryption *)enc {
  ComAowagieTextPdfPdfEncryption_initPackagePrivateWithComAowagieTextPdfPdfEncryption_(self, enc);
  return self;
}


#line 189
- (void)setCryptoModeWithInt:(jint)mode
                     withInt:(jint)kl {
  
#line 190
  self->cryptoMode_ = mode;
  self->encryptMetadata_ = ((mode & ComAowagieTextPdfPdfWriter_DO_NOT_ENCRYPT_METADATA) == 0);
  self->embeddedFilesOnly_ = ((mode & ComAowagieTextPdfPdfWriter_EMBEDDED_FILES_ONLY) != 0);
  mode &= ComAowagieTextPdfPdfWriter_ENCRYPTION_MASK;
  switch (mode) {
    case ComAowagieTextPdfPdfWriter_STANDARD_ENCRYPTION_40:
    self->encryptMetadata_ = true;
    self->embeddedFilesOnly_ = false;
    self->keyLength_ = 40;
    self->revision_ = ComAowagieTextPdfPdfEncryption_STANDARD_ENCRYPTION_40;
    break;
    case ComAowagieTextPdfPdfWriter_STANDARD_ENCRYPTION_128:
    self->embeddedFilesOnly_ = false;
    if (kl > 0) {
      self->keyLength_ = kl;
    }
    else {
      
#line 206
      self->keyLength_ = 128;
    }
    self->revision_ = ComAowagieTextPdfPdfEncryption_STANDARD_ENCRYPTION_128;
    break;
    case ComAowagieTextPdfPdfWriter_ENCRYPTION_AES_128:
    self->keyLength_ = 128;
    self->revision_ = ComAowagieTextPdfPdfEncryption_AES_128;
    break;
    case ComAowagieTextPdfPdfWriter_ENCRYPTION_AES_256_V3:
    self->keyLength_ = 256;
    self->keySize_ = 32;
    self->revision_ = ComAowagieTextPdfPdfEncryption_AES_256_V3;
    break;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No valid encryption mode");
  }
}


#line 224
- (jint)getCryptoMode {
  return self->cryptoMode_;
}

- (jboolean)isMetadataEncrypted {
  return self->encryptMetadata_;
}


#line 237
- (jboolean)isEmbeddedFilesOnly {
  return self->embeddedFilesOnly_;
}

- (IOSByteArray *)padPasswordWithByteArray:(IOSByteArray *)userPassword {
  return ComAowagieTextPdfPdfEncryption_padPasswordWithByteArray_(self, userPassword);
}


#line 257
- (IOSByteArray *)computeOwnerKeyWithByteArray:(IOSByteArray *)userPad
                                 withByteArray:(IOSByteArray *)ownerPad {
  return ComAowagieTextPdfPdfEncryption_computeOwnerKeyWithByteArray_withByteArray_(self, userPad, ownerPad);
}


#line 291
- (void)setupGlobalEncryptionKeyWithByteArray:(IOSByteArray *)documentID
                                withByteArray:(IOSByteArray *)userPad
                                withByteArray:(IOSByteArray *)ownerKey
                                      withInt:(jint)permissions {
  ComAowagieTextPdfPdfEncryption_setupGlobalEncryptionKeyWithByteArray_withByteArray_withByteArray_withInt_(self, documentID, userPad, ownerKey, permissions);
}


#line 335
- (void)setupUserKey {
  ComAowagieTextPdfPdfEncryption_setupUserKey(self);
}


#line 358
- (void)setupAllKeysWithByteArray:(IOSByteArray *)userPassword
                    withByteArray:(IOSByteArray *)ownerPassword
                          withInt:(jint)permissions {
  
#line 360
  if (ownerPassword == nil || ownerPassword->size_ == 0) {
    ownerPassword = [((JavaSecurityMessageDigest *) nil_chk(self->md5_)) digestWithByteArray:ComAowagieTextPdfPdfEncryption_createDocumentId()];
  }
  permissions |= (self->revision_ == ComAowagieTextPdfPdfEncryption_STANDARD_ENCRYPTION_128 || self->revision_ == ComAowagieTextPdfPdfEncryption_AES_128 ||
#line 364
  self->revision_ == ComAowagieTextPdfPdfEncryption_AES_256_V3) ? (jint) 0xfffff0c0 : (jint) 0xffffffc0;
  permissions &= (jint) 0xfffffffc;
  self->permissions_ = permissions;
  self->documentID_ = ComAowagieTextPdfPdfEncryption_createDocumentId();
  if (self->revision_ < ComAowagieTextPdfPdfEncryption_AES_256_V3) {
    
#line 371
    IOSByteArray *userPad = ComAowagieTextPdfPdfEncryption_padPasswordWithByteArray_(self, userPassword);
    IOSByteArray *ownerPad = ComAowagieTextPdfPdfEncryption_padPasswordWithByteArray_(self, ownerPassword);
    
#line 374
    self->ownerKey_ = ComAowagieTextPdfPdfEncryption_computeOwnerKeyWithByteArray_withByteArray_(self, userPad, ownerPad);
    ComAowagieTextPdfPdfEncryption_setupByUserPadWithByteArray_withByteArray_withByteArray_withInt_(self, self->documentID_, userPad, self->ownerKey_, permissions);
  }
  else {
    
#line 377
    @try {
      self->key_ = ComAowagieTextPdfCryptoIVGenerator_getIVWithInt_(32);
      self->keySize_ = 32;
      [self computeUAndUeAlg8WithByteArray:userPassword];
      [self computeOAndOeAlg9WithByteArray:ownerPassword];
      [self computePermsAlg10WithInt:permissions];
    }
    @catch (
#line 383
    JavaSecurityGeneralSecurityException *e) {
      @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
    }
  }
}


#line 389
+ (IOSByteArray *)createDocumentId {
  return ComAowagieTextPdfPdfEncryption_createDocumentId();
}


#line 402
- (void)setupByUserPasswordWithByteArray:(IOSByteArray *)documentID
                           withByteArray:(IOSByteArray *)userPassword
                           withByteArray:(IOSByteArray *)ownerKey
                                 withInt:(jint)permissions {
  
#line 404
  ComAowagieTextPdfPdfEncryption_setupByUserPadWithByteArray_withByteArray_withByteArray_withInt_(self, documentID, ComAowagieTextPdfPdfEncryption_padPasswordWithByteArray_(self, userPassword), ownerKey,
#line 405
  permissions);
}

- (void)setupByUserPasswordWithByteArray:(IOSByteArray *)documentID
                           withByteArray:(IOSByteArray *)userPassword
                           withByteArray:(IOSByteArray *)uValue
                           withByteArray:(IOSByteArray *)ueValue
                           withByteArray:(IOSByteArray *)oValue
                           withByteArray:(IOSByteArray *)oeValue
                                 withInt:(jint)permissions {
  
#line 416
  JavaxCryptoCipher *cipher = JavaxCryptoCipher_getInstanceWithNSString_(@"AES/CBC/NoPadding");
  
#line 418
  IOSByteArray *hashAlg2B = ComAowagieTextPdfPdfEncryption_hashAlg2BWithByteArray_withByteArray_withByteArray_(userPassword, JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(uValue, 40, 48), nil);
  [((JavaxCryptoCipher *) nil_chk(cipher)) init__WithInt:JavaxCryptoCipher_DECRYPT_MODE withJavaSecurityKey:new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(hashAlg2B, @"AES") withJavaSecuritySpecAlgorithmParameterSpec:new_JavaxCryptoSpecIvParameterSpec_initWithByteArray_([IOSByteArray newArrayWithLength:
#line 420
  16])];
  self->key_ = [cipher updateWithByteArray:ueValue withInt:0 withInt:((IOSByteArray *) nil_chk(ueValue))->size_];
  
#line 423
  self->ownerKey_ = oValue;
  self->userKey_ = uValue;
  self->documentID_ = documentID;
  self->permissions_ = permissions;
}


#line 429
- (void)setupByUserPadWithByteArray:(IOSByteArray *)documentID
                      withByteArray:(IOSByteArray *)userPad
                      withByteArray:(IOSByteArray *)ownerKey
                            withInt:(jint)permissions {
  ComAowagieTextPdfPdfEncryption_setupByUserPadWithByteArray_withByteArray_withByteArray_withInt_(self, documentID, userPad, ownerKey, permissions);
}


#line 435
- (void)setupByOwnerPasswordWithByteArray:(IOSByteArray *)documentID
                            withByteArray:(IOSByteArray *)ownerPassword
                            withByteArray:(IOSByteArray *)userKey
                            withByteArray:(IOSByteArray *)ownerKey
                                  withInt:(jint)permissions {
  
#line 437
  ComAowagieTextPdfPdfEncryption_setupByOwnerPadWithByteArray_withByteArray_withByteArray_withByteArray_withInt_(self, documentID, ComAowagieTextPdfPdfEncryption_padPasswordWithByteArray_(self, ownerPassword), userKey,
#line 438
  ownerKey, permissions);
}


#line 445
- (void)setupByOwnerPasswordWithByteArray:(IOSByteArray *)documentID
                            withByteArray:(IOSByteArray *)ownerPassword
                            withByteArray:(IOSByteArray *)uValue
                            withByteArray:(IOSByteArray *)ueValue
                            withByteArray:(IOSByteArray *)oValue
                            withByteArray:(IOSByteArray *)oeValue
                                  withInt:(jint)permissions {
  
#line 448
  JavaxCryptoCipher *cipher = JavaxCryptoCipher_getInstanceWithNSString_(@"AES/CBC/NoPadding");
  
#line 450
  IOSByteArray *hashAlg2B = ComAowagieTextPdfPdfEncryption_hashAlg2BWithByteArray_withByteArray_withByteArray_(ownerPassword, JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(oValue, 40, 48), uValue);
  [((JavaxCryptoCipher *) nil_chk(cipher)) init__WithInt:JavaxCryptoCipher_DECRYPT_MODE withJavaSecurityKey:new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(
#line 452
  hashAlg2B, @"AES") withJavaSecuritySpecAlgorithmParameterSpec:new_JavaxCryptoSpecIvParameterSpec_initWithByteArray_([IOSByteArray newArrayWithLength:
#line 453
  16])];
  self->key_ = [cipher updateWithByteArray:oeValue withInt:0 withInt:((IOSByteArray *) nil_chk(oeValue))->size_];
  
#line 456
  self->ownerKey_ = oValue;
  self->userKey_ = uValue;
  self->documentID_ = documentID;
  self->permissions_ = permissions;
}


#line 462
- (void)setupByOwnerPadWithByteArray:(IOSByteArray *)documentID
                       withByteArray:(IOSByteArray *)ownerPad
                       withByteArray:(IOSByteArray *)userKey
                       withByteArray:(IOSByteArray *)ownerKey
                             withInt:(jint)permissions {
  ComAowagieTextPdfPdfEncryption_setupByOwnerPadWithByteArray_withByteArray_withByteArray_withByteArray_withInt_(self, documentID, ownerPad, userKey, ownerKey, permissions);
}


#line 476
- (jboolean)decryptAndCheckPermsWithByteArray:(IOSByteArray *)permsValue {
  JavaxCryptoCipher *cipher = JavaxCryptoCipher_getInstanceWithNSString_(@"AES/CBC/NoPadding");
  
#line 479
  [((JavaxCryptoCipher *) nil_chk(cipher)) init__WithInt:JavaxCryptoCipher_DECRYPT_MODE withJavaSecurityKey:new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(
#line 480
  self->key_, @"AES") withJavaSecuritySpecAlgorithmParameterSpec:new_JavaxCryptoSpecIvParameterSpec_initWithByteArray_([IOSByteArray newArrayWithLength:
#line 481
  16])];
  IOSByteArray *decPerms = [cipher updateWithByteArray:permsValue withInt:0 withInt:((IOSByteArray *) nil_chk(permsValue))->size_];
  
#line 484
  self->permissions_ = (IOSByteArray_Get(nil_chk(decPerms), 0) & (jint) 0xff) | (JreLShift32((IOSByteArray_Get(decPerms, 1) & (jint) 0xff), 8)) |
#line 485
  (JreLShift32((IOSByteArray_Get(decPerms, 2) & (jint) 0xff), 16)) | (JreLShift32((IOSByteArray_Get(decPerms, 2) & (jint) 0xff), 24));
  self->encryptMetadata_ = (IOSByteArray_Get(decPerms, 8) == (jbyte) 'T');
  
#line 488
  return IOSByteArray_Get(decPerms, 9) == (jbyte) 'a' && IOSByteArray_Get(decPerms, 10) == (jbyte) 'd' && IOSByteArray_Get(decPerms, 11) == (jbyte) 'b';
}


#line 491
- (void)setupByEncryptionKeyWithByteArray:(IOSByteArray *)key
                                  withInt:(jint)keylength {
  
#line 492
  self->mkey_ = [IOSByteArray newArrayWithLength:JreIntDiv(keylength, 8)];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, self->mkey_, 0, self->mkey_->size_);
}


#line 496
- (void)setHashKeyWithInt:(jint)number
                  withInt:(jint)generation {
  if (self->revision_ >= ComAowagieTextPdfPdfEncryption_AES_256_V3) {
    return;
  }
  
#line 502
  [((JavaSecurityMessageDigest *) nil_chk(self->md5_)) reset];
  *IOSByteArray_GetRef(nil_chk(self->extra_), 0) = (jbyte) number;
  *IOSByteArray_GetRef(self->extra_, 1) = (jbyte) (JreRShift32(number, 8));
  *IOSByteArray_GetRef(self->extra_, 2) = (jbyte) (JreRShift32(number, 16));
  *IOSByteArray_GetRef(self->extra_, 3) = (jbyte) generation;
  *IOSByteArray_GetRef(self->extra_, 4) = (jbyte) (JreRShift32(generation, 8));
  [((JavaSecurityMessageDigest *) nil_chk(self->md5_)) updateWithByteArray:self->mkey_];
  [((JavaSecurityMessageDigest *) nil_chk(self->md5_)) updateWithByteArray:self->extra_];
  if (self->revision_ == ComAowagieTextPdfPdfEncryption_AES_128) {
    [((JavaSecurityMessageDigest *) nil_chk(self->md5_)) updateWithByteArray:ComAowagieTextPdfPdfEncryption_salt];
  }
  self->key_ = [((JavaSecurityMessageDigest *) nil_chk(self->md5_)) digest];
  self->keySize_ = ((IOSByteArray *) nil_chk(self->mkey_))->size_ + 5;
  if (self->keySize_ > 16) {
    self->keySize_ = 16;
  }
}


#line 520
+ (ComAowagieTextPdfPdfObject *)createInfoIdWithByteArray:(IOSByteArray *)id_ {
  return ComAowagieTextPdfPdfEncryption_createInfoIdWithByteArray_(id_);
}


#line 535
- (ComAowagieTextPdfPdfDictionary *)getEncryptionDictionary {
  ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_init();
  
#line 538
  if ([((ComAowagieTextPdfPdfPublicKeySecurityHandler *) nil_chk(self->publicKeyHandler_)) getRecipientsSize] > 0) {
    ComAowagieTextPdfPdfArray *recipients = nil;
    
#line 541
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, PUBSEC)];
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, R) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(self->revision_)];
    
#line 544
    @try {
      recipients = [((ComAowagieTextPdfPdfPublicKeySecurityHandler *) nil_chk(self->publicKeyHandler_)) getEncodedRecipients];
    }
    @catch (
#line 546
    JavaLangException *f) {
      @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(f);
    }
    
#line 550
    if (self->revision_ == ComAowagieTextPdfPdfEncryption_STANDARD_ENCRYPTION_40) {
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(1)];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBFILTER) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, ADBE_PKCS7_S4)];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, RECIPIENTS) withComAowagieTextPdfPdfObject:recipients];
    }
    else
#line 554
    if (self->revision_ == ComAowagieTextPdfPdfEncryption_STANDARD_ENCRYPTION_128 && self->encryptMetadata_) {
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(2)];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(128)];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBFILTER) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, ADBE_PKCS7_S4)];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, RECIPIENTS) withComAowagieTextPdfPdfObject:recipients];
    }
    else
#line 559
    if (self->revision_ == ComAowagieTextPdfPdfEncryption_AES_256_V3) {
      if (!self->encryptMetadata_) {
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENCRYPTMETADATA) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfBoolean, PDFFALSE)];
      }
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(5)];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, OE) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithByteArray_(ComAowagieTextPdfPdfContentByte_escapeStringWithByteArray_(self->oeKey_))];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, UE) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithByteArray_(ComAowagieTextPdfPdfContentByte_escapeStringWithByteArray_(self->ueKey_))];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PERMS) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithByteArray_(ComAowagieTextPdfPdfContentByte_escapeStringWithByteArray_(self->perms_))];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(256)];
      ComAowagieTextPdfPdfDictionary *stdcf = new_ComAowagieTextPdfPdfDictionary_init();
      [stdcf putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(32)];
      if (self->embeddedFilesOnly_) {
        [stdcf putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, AUTHEVENT) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, EFOPEN)];
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, EFF) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, STDCF)];
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STRF) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, IDENTITY)];
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STMF) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, IDENTITY)];
      }
      else {
        
#line 576
        [stdcf putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, AUTHEVENT) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DOCOPEN)];
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STRF) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, STDCF)];
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STMF) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, STDCF)];
      }
      [stdcf putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CFM) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, AESV3)];
      ComAowagieTextPdfPdfDictionary *cf = new_ComAowagieTextPdfPdfDictionary_init();
      [cf putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STDCF) withComAowagieTextPdfPdfObject:stdcf];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CF) withComAowagieTextPdfPdfObject:cf];
    }
    else {
      
#line 585
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, R) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(ComAowagieTextPdfPdfEncryption_AES_128)];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(4)];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBFILTER) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, ADBE_PKCS7_S5)];
      
#line 589
      ComAowagieTextPdfPdfDictionary *stdcf = new_ComAowagieTextPdfPdfDictionary_init();
      [stdcf putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, RECIPIENTS) withComAowagieTextPdfPdfObject:recipients];
      if (!self->encryptMetadata_) {
        [stdcf putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENCRYPTMETADATA) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfBoolean, PDFFALSE)];
      }
      
#line 595
      if (self->revision_ == ComAowagieTextPdfPdfEncryption_AES_128) {
        [stdcf putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CFM) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, AESV2)];
      }
      else {
        
#line 598
        [stdcf putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CFM) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, V2)];
      }
      ComAowagieTextPdfPdfDictionary *cf = new_ComAowagieTextPdfPdfDictionary_init();
      [cf putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DEFAULTCRYPTFILTER) withComAowagieTextPdfPdfObject:stdcf];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CF) withComAowagieTextPdfPdfObject:cf];
      
#line 602
      if (self->embeddedFilesOnly_) {
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, EFF) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DEFAULTCRYPTFILTER)];
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STRF) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, IDENTITY)];
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STMF) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, IDENTITY)];
      }
      else {
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STRF) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DEFAULTCRYPTFILTER)];
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STMF) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DEFAULTCRYPTFILTER)];
      }
    }
    
#line 613
    JavaSecurityMessageDigest *md = nil;
    IOSByteArray *encodedRecipient = nil;
    
#line 616
    @try {
      md = JavaSecurityMessageDigest_getInstanceWithNSString_(@"SHA-1");
      [((JavaSecurityMessageDigest *) nil_chk(md)) updateWithByteArray:[((ComAowagieTextPdfPdfPublicKeySecurityHandler *) nil_chk(self->publicKeyHandler_)) getSeed]];
      for (jint i = 0; i < [((ComAowagieTextPdfPdfPublicKeySecurityHandler *) nil_chk(self->publicKeyHandler_)) getRecipientsSize]; i++) {
        encodedRecipient = [((ComAowagieTextPdfPdfPublicKeySecurityHandler *) nil_chk(self->publicKeyHandler_)) getEncodedRecipientWithInt:i];
        [md updateWithByteArray:encodedRecipient];
      }
      if (!self->encryptMetadata_) {
        [md updateWithByteArray:[IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) 255, (jbyte) 255, (jbyte) 255,
#line 625
        (jbyte) 255 } count:4]];
      }
    }
    @catch (
#line 627
    JavaLangException *f) {
      @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(f);
    }
    
#line 631
    IOSByteArray *mdResult = [((JavaSecurityMessageDigest *) nil_chk(md)) digest];
    
#line 633
    [self setupByEncryptionKeyWithByteArray:mdResult withInt:self->keyLength_];
  }
  else {
    
#line 635
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, STANDARD)];
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, O) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithByteArray_(ComAowagieTextPdfPdfContentByte_escapeStringWithByteArray_(
#line 637
    self->ownerKey_))];
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, U) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithByteArray_(ComAowagieTextPdfPdfContentByte_escapeStringWithByteArray_(
#line 639
    self->userKey_))];
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, P) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(self->permissions_)];
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, R) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(self->revision_)];
    
#line 643
    if (self->revision_ == ComAowagieTextPdfPdfEncryption_STANDARD_ENCRYPTION_40) {
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(1)];
    }
    else
#line 645
    if (self->revision_ == ComAowagieTextPdfPdfEncryption_STANDARD_ENCRYPTION_128 && self->encryptMetadata_) {
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(2)];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(128)];
    }
    else {
      if (!self->encryptMetadata_) {
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENCRYPTMETADATA) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfBoolean, PDFFALSE)];
      }
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, R) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(ComAowagieTextPdfPdfEncryption_AES_128)];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(4)];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(128)];
      ComAowagieTextPdfPdfDictionary *stdcf = new_ComAowagieTextPdfPdfDictionary_init();
      [stdcf putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(16)];
      if (self->embeddedFilesOnly_) {
        [stdcf putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, AUTHEVENT) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, EFOPEN)];
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, EFF) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, STDCF)];
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STRF) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, IDENTITY)];
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STMF) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, IDENTITY)];
      }
      else {
        [stdcf putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, AUTHEVENT) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DOCOPEN)];
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STRF) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, STDCF)];
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STMF) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, STDCF)];
      }
      if (self->revision_ == ComAowagieTextPdfPdfEncryption_AES_128) {
        [stdcf putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CFM) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, AESV2)];
      }
      else {
        
#line 672
        [stdcf putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CFM) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, V2)];
      }
      ComAowagieTextPdfPdfDictionary *cf = new_ComAowagieTextPdfPdfDictionary_init();
      [cf putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STDCF) withComAowagieTextPdfPdfObject:stdcf];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CF) withComAowagieTextPdfPdfObject:cf];
    }
  }
  
#line 680
  return dic;
}


#line 683
- (ComAowagieTextPdfPdfObject *)getFileID {
  return ComAowagieTextPdfPdfEncryption_createInfoIdWithByteArray_(self->documentID_);
}

- (ComAowagieTextPdfOutputStreamEncryption *)getEncryptionStreamWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  return new_ComAowagieTextPdfOutputStreamEncryption_initPackagePrivateWithJavaIoOutputStream_withByteArray_withInt_withInt_withInt_(os, self->key_, 0, self->keySize_, self->revision_);
}

- (jint)calculateStreamSizeWithInt:(jint)n {
  if (self->revision_ == ComAowagieTextPdfPdfEncryption_AES_128 || self->revision_ == ComAowagieTextPdfPdfEncryption_AES_256_V3) {
    return (n & (jint) 0x7ffffff0) + 32;
  }
  else {
    
#line 695
    return n;
  }
}


#line 699
- (IOSByteArray *)encryptByteArrayWithByteArray:(IOSByteArray *)b {
  @try {
    JavaIoByteArrayOutputStream *ba = new_JavaIoByteArrayOutputStream_init();
    ComAowagieTextPdfOutputStreamEncryption *os2 = [self getEncryptionStreamWithJavaIoOutputStream:ba];
    [((ComAowagieTextPdfOutputStreamEncryption *) nil_chk(os2)) writeWithByteArray:b];
    [os2 finish];
    return [ba toByteArray];
  }
  @catch (
#line 706
  JavaIoIOException *ex) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(ex);
  }
}


#line 711
- (ComAowagieTextPdfStandardDecryption *)getDecryptor {
  return new_ComAowagieTextPdfStandardDecryption_initPackagePrivateWithByteArray_withInt_withInt_withInt_(self->key_, 0, self->keySize_, self->revision_);
}

- (IOSByteArray *)decryptByteArrayWithByteArray:(IOSByteArray *)b {
  @try {
    JavaIoByteArrayOutputStream *ba = new_JavaIoByteArrayOutputStream_init();
    ComAowagieTextPdfStandardDecryption *dec = [self getDecryptor];
    IOSByteArray *b2 = [((ComAowagieTextPdfStandardDecryption *) nil_chk(dec)) updateWithByteArray:b withInt:0 withInt:((IOSByteArray *) nil_chk(b))->size_];
    if (b2 != nil) {
      [ba writeWithByteArray:b2];
    }
    b2 = [dec finish];
    if (b2 != nil) {
      [ba writeWithByteArray:b2];
    }
    return [ba toByteArray];
  }
  @catch (
#line 728
  JavaIoIOException *ex) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(ex);
  }
}


#line 733
- (void)addRecipientWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert
                                            withInt:(jint)permission {
  
#line 734
  self->documentID_ = ComAowagieTextPdfPdfEncryption_createDocumentId();
  [((ComAowagieTextPdfPdfPublicKeySecurityHandler *) nil_chk(self->publicKeyHandler_)) addRecipientWithComAowagieTextPdfPdfPublicKeyRecipient:new_ComAowagieTextPdfPdfPublicKeyRecipient_initPackagePrivateWithJavaSecurityCertCertificate_withInt_(cert,
#line 736
  permission)];
}

- (void)computeUAndUeAlg8WithByteArray:(IOSByteArray *)userPassword {
  JavaxCryptoCipher *cipher = JavaxCryptoCipher_getInstanceWithNSString_(@"AES/CBC/NoPadding");
  
#line 746
  if (userPassword == nil) {
    userPassword = [IOSByteArray newArrayWithLength:0];
  }
  else
#line 748
  if (userPassword->size_ > 127) {
    userPassword = JavaUtilArrays_copyOfWithByteArray_withInt_(userPassword, 127);
  }
  
#line 752
  IOSByteArray *userSalts = ComAowagieTextPdfCryptoIVGenerator_getIVWithInt_(16);
  
#line 754
  self->userKey_ = [IOSByteArray newArrayWithLength:48];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(userSalts, 0, self->userKey_, 32, 16);
  IOSByteArray *hashAlg2B = ComAowagieTextPdfPdfEncryption_hashAlg2BWithByteArray_withByteArray_withByteArray_(userPassword, JavaUtilArrays_copyOfWithByteArray_withInt_(userSalts, 8), nil);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hashAlg2B, 0, self->userKey_, 0, 32);
  
#line 759
  hashAlg2B = ComAowagieTextPdfPdfEncryption_hashAlg2BWithByteArray_withByteArray_withByteArray_(userPassword, JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(userSalts, 8, 16), nil);
  [((JavaxCryptoCipher *) nil_chk(cipher)) init__WithInt:JavaxCryptoCipher_ENCRYPT_MODE withJavaSecurityKey:new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(
#line 761
  hashAlg2B, @"AES") withJavaSecuritySpecAlgorithmParameterSpec:new_JavaxCryptoSpecIvParameterSpec_initWithByteArray_([IOSByteArray newArrayWithLength:
#line 762
  16])];
  self->ueKey_ = [cipher updateWithByteArray:self->key_ withInt:0 withInt:self->keySize_];
}


#line 770
- (void)computeOAndOeAlg9WithByteArray:(IOSByteArray *)ownerPassword {
  JavaxCryptoCipher *cipher = JavaxCryptoCipher_getInstanceWithNSString_(@"AES/CBC/NoPadding");
  
#line 773
  if (ownerPassword == nil) {
    ownerPassword = [IOSByteArray newArrayWithLength:0];
  }
  else
#line 775
  if (ownerPassword->size_ > 127) {
    ownerPassword = JavaUtilArrays_copyOfWithByteArray_withInt_(ownerPassword, 127);
  }
  
#line 779
  IOSByteArray *ownerSalts = ComAowagieTextPdfCryptoIVGenerator_getIVWithInt_(16);
  
#line 781
  self->ownerKey_ = [IOSByteArray newArrayWithLength:48];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ownerSalts, 0, self->ownerKey_, 32, 16);
  IOSByteArray *hashAlg2B = ComAowagieTextPdfPdfEncryption_hashAlg2BWithByteArray_withByteArray_withByteArray_(ownerPassword, JavaUtilArrays_copyOfWithByteArray_withInt_(ownerSalts, 8), self->userKey_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hashAlg2B, 0, self->ownerKey_, 0, 32);
  
#line 786
  hashAlg2B = ComAowagieTextPdfPdfEncryption_hashAlg2BWithByteArray_withByteArray_withByteArray_(ownerPassword, JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(ownerSalts, 8, 16), self->userKey_);
  [((JavaxCryptoCipher *) nil_chk(cipher)) init__WithInt:JavaxCryptoCipher_ENCRYPT_MODE withJavaSecurityKey:new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(
#line 788
  hashAlg2B, @"AES") withJavaSecuritySpecAlgorithmParameterSpec:new_JavaxCryptoSpecIvParameterSpec_initWithByteArray_([IOSByteArray newArrayWithLength:
#line 789
  16])];
  self->oeKey_ = [cipher updateWithByteArray:self->key_ withInt:0 withInt:self->keySize_];
}


#line 797
- (void)computePermsAlg10WithInt:(jint)permissions {
  JavaxCryptoCipher *cipher = JavaxCryptoCipher_getInstanceWithNSString_(@"AES/CBC/NoPadding");
  
#line 800
  IOSByteArray *rawPerms = [IOSByteArray newArrayWithLength:16];
  *IOSByteArray_GetRef(rawPerms, 0) = (jbyte) (permissions & (jint) 0xff);
  *IOSByteArray_GetRef(rawPerms, 1) = (jbyte) (JreRShift32((permissions & (jint) 0xff00), 8));
  *IOSByteArray_GetRef(rawPerms, 2) = (jbyte) (JreRShift32((permissions & (jint) 0xff0000), 16));
  *IOSByteArray_GetRef(rawPerms, 3) = (jbyte) (JreRShift32((permissions & (jint) 0xff000000), 24));
  *IOSByteArray_GetRef(rawPerms, 4) = (jbyte) (jint) 0xff;
  *IOSByteArray_GetRef(rawPerms, 5) = (jbyte) (jint) 0xff;
  *IOSByteArray_GetRef(rawPerms, 6) = (jbyte) (jint) 0xff;
  *IOSByteArray_GetRef(rawPerms, 7) = (jbyte) (jint) 0xff;
  *IOSByteArray_GetRef(rawPerms, 8) = (jbyte) (self->encryptMetadata_ ? 'T' : 'F');
  *IOSByteArray_GetRef(rawPerms, 9) = (jbyte) 'a';
  *IOSByteArray_GetRef(rawPerms, 10) = (jbyte) 'd';
  *IOSByteArray_GetRef(rawPerms, 11) = (jbyte) 'b';
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ComAowagieTextPdfCryptoIVGenerator_getIVWithInt_(4), 0, rawPerms, 12, 4);
  
#line 815
  [((JavaxCryptoCipher *) nil_chk(cipher)) init__WithInt:JavaxCryptoCipher_ENCRYPT_MODE withJavaSecurityKey:new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(
#line 816
  self->key_, @"AES") withJavaSecuritySpecAlgorithmParameterSpec:new_JavaxCryptoSpecIvParameterSpec_initWithByteArray_([IOSByteArray newArrayWithLength:
#line 817
  16])];
  self->perms_ = [cipher updateWithByteArray:rawPerms withInt:0 withInt:16];
}


#line 824
+ (IOSByteArray *)hashAlg2BWithByteArray:(IOSByteArray *)input
                           withByteArray:(IOSByteArray *)salt
                           withByteArray:(IOSByteArray *)userKey {
  return ComAowagieTextPdfPdfEncryption_hashAlg2BWithByteArray_withByteArray_withByteArray_(input, salt, userKey);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, 13, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 12, 13, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 4, 13, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 2, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfObject;", 0x9, 22, 4, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfOutputStreamEncryption;", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 25, 26, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 27, 4, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfStandardDecryption;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 28, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 31, 4, 13, -1, -1, -1 },
    { NULL, "V", 0x0, 32, 4, 13, -1, -1, -1 },
    { NULL, "V", 0x0, 33, 26, 13, -1, -1, -1 },
    { NULL, "[B", 0x8, 34, 35, 13, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(initPackagePrivateWithComAowagieTextPdfPdfEncryption:);
  methods[2].selector = @selector(setCryptoModeWithInt:withInt:);
  methods[3].selector = @selector(getCryptoMode);
  methods[4].selector = @selector(isMetadataEncrypted);
  methods[5].selector = @selector(isEmbeddedFilesOnly);
  methods[6].selector = @selector(padPasswordWithByteArray:);
  methods[7].selector = @selector(computeOwnerKeyWithByteArray:withByteArray:);
  methods[8].selector = @selector(setupGlobalEncryptionKeyWithByteArray:withByteArray:withByteArray:withInt:);
  methods[9].selector = @selector(setupUserKey);
  methods[10].selector = @selector(setupAllKeysWithByteArray:withByteArray:withInt:);
  methods[11].selector = @selector(createDocumentId);
  methods[12].selector = @selector(setupByUserPasswordWithByteArray:withByteArray:withByteArray:withInt:);
  methods[13].selector = @selector(setupByUserPasswordWithByteArray:withByteArray:withByteArray:withByteArray:withByteArray:withByteArray:withInt:);
  methods[14].selector = @selector(setupByUserPadWithByteArray:withByteArray:withByteArray:withInt:);
  methods[15].selector = @selector(setupByOwnerPasswordWithByteArray:withByteArray:withByteArray:withByteArray:withInt:);
  methods[16].selector = @selector(setupByOwnerPasswordWithByteArray:withByteArray:withByteArray:withByteArray:withByteArray:withByteArray:withInt:);
  methods[17].selector = @selector(setupByOwnerPadWithByteArray:withByteArray:withByteArray:withByteArray:withInt:);
  methods[18].selector = @selector(decryptAndCheckPermsWithByteArray:);
  methods[19].selector = @selector(setupByEncryptionKeyWithByteArray:withInt:);
  methods[20].selector = @selector(setHashKeyWithInt:withInt:);
  methods[21].selector = @selector(createInfoIdWithByteArray:);
  methods[22].selector = @selector(getEncryptionDictionary);
  methods[23].selector = @selector(getFileID);
  methods[24].selector = @selector(getEncryptionStreamWithJavaIoOutputStream:);
  methods[25].selector = @selector(calculateStreamSizeWithInt:);
  methods[26].selector = @selector(encryptByteArrayWithByteArray:);
  methods[27].selector = @selector(getDecryptor);
  methods[28].selector = @selector(decryptByteArrayWithByteArray:);
  methods[29].selector = @selector(addRecipientWithJavaSecurityCertCertificate:withInt:);
  methods[30].selector = @selector(computeUAndUeAlg8WithByteArray:);
  methods[31].selector = @selector(computeOAndOeAlg9WithByteArray:);
  methods[32].selector = @selector(computePermsAlg10WithInt:);
  methods[33].selector = @selector(hashAlg2BWithByteArray:withByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STANDARD_ENCRYPTION_40", "I", .constantValue.asInt = ComAowagieTextPdfPdfEncryption_STANDARD_ENCRYPTION_40, 0x1a, -1, -1, -1, -1 },
    { "STANDARD_ENCRYPTION_128", "I", .constantValue.asInt = ComAowagieTextPdfPdfEncryption_STANDARD_ENCRYPTION_128, 0x1a, -1, -1, -1, -1 },
    { "AES_128", "I", .constantValue.asInt = ComAowagieTextPdfPdfEncryption_AES_128, 0x1a, -1, -1, -1, -1 },
    { "AES_256_V3", "I", .constantValue.asInt = ComAowagieTextPdfPdfEncryption_AES_256_V3, 0x19, -1, -1, -1, -1 },
    { "pad", "[B", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "salt", "[B", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
    { "metadataPad", "[B", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "key_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keySize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mkey_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extra_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "md5_", "LJavaSecurityMessageDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ownerKey_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "userKey_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "publicKeyHandler_", "LComAowagieTextPdfPdfPublicKeySecurityHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "permissions_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "documentID_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "seq", "J", .constantValue.asLong = 0, 0xa, -1, 39, -1, -1 },
    { "revision_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "arcfour_", "LComAowagieTextPdfCryptoARCFOUREncryption;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keyLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encryptMetadata_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "oeKey_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ueKey_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "perms_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "embeddedFilesOnly_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cryptoMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfPdfEncryption;", "setCryptoMode", "II", "padPassword", "[B", "computeOwnerKey", "[B[B", "setupGlobalEncryptionKey", "[B[B[BI", "setupAllKeys", "[B[BI", "setupByUserPassword", "[B[B[B[B[B[BI", "LJavaSecurityGeneralSecurityException;", "setupByUserPad", "setupByOwnerPassword", "[B[B[B[BI", "setupByOwnerPad", "decryptAndCheckPerms", "setupByEncryptionKey", "[BI", "setHashKey", "createInfoId", "getEncryptionStream", "LJavaIoOutputStream;", "calculateStreamSize", "I", "encryptByteArray", "decryptByteArray", "addRecipient", "LJavaSecurityCertCertificate;I", "computeUAndUeAlg8", "computeOAndOeAlg9", "computePermsAlg10", "hashAlg2B", "[B[B[B", &ComAowagieTextPdfPdfEncryption_pad, &ComAowagieTextPdfPdfEncryption_salt, &ComAowagieTextPdfPdfEncryption_metadataPad, &ComAowagieTextPdfPdfEncryption_seq };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfEncryption = { "PdfEncryption", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 34, 27, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfEncryption;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfPdfEncryption class]) {
    ComAowagieTextPdfPdfEncryption_pad = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 84
      (jbyte) (jint) 0x28, (jbyte) (jint) 0xBF, (jbyte) (jint) 0x4E,
#line 85
      (jbyte) (jint) 0x5E, (jbyte) (jint) 0x4E, (jbyte) (jint) 0x75, (jbyte) (jint) 0x8A, (jbyte) (jint) 0x41,
#line 86
      (jbyte) (jint) 0x64, (jbyte) (jint) 0x00, (jbyte) (jint) 0x4E, (jbyte) (jint) 0x56, (jbyte) (jint) 0xFF,
#line 87
      (jbyte) (jint) 0xFA, (jbyte) (jint) 0x01, (jbyte) (jint) 0x08, (jbyte) (jint) 0x2E, (jbyte) (jint) 0x2E,
#line 88
      (jbyte) (jint) 0x00, (jbyte) (jint) 0xB6, (jbyte) (jint) 0xD0, (jbyte) (jint) 0x68, (jbyte) (jint) 0x3E,
#line 89
      (jbyte) (jint) 0x80, (jbyte) (jint) 0x2F, (jbyte) (jint) 0x0C, (jbyte) (jint) 0xA9, (jbyte) (jint) 0xFE,
#line 90
      (jbyte) (jint) 0x64, (jbyte) (jint) 0x53, (jbyte) (jint) 0x69, (jbyte) (jint) 0x7A } count:32];
      ComAowagieTextPdfPdfEncryption_salt = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 92
        (jbyte) (jint) 0x73, (jbyte) (jint) 0x41, (jbyte) (jint) 0x6c,
#line 93
        (jbyte) (jint) 0x54 } count:4];
        ComAowagieTextPdfPdfEncryption_metadataPad = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 95
          (jbyte) 255, (jbyte) 255,
#line 96
          (jbyte) 255, (jbyte) 255 } count:4];
          ComAowagieTextPdfPdfEncryption_seq = JavaLangSystem_currentTimeMillis();
          J2OBJC_SET_INITIALIZED(ComAowagieTextPdfPdfEncryption)
        }
      }

@end


#line 149
void ComAowagieTextPdfPdfEncryption_initPackagePrivate(ComAowagieTextPdfPdfEncryption *self) {
  NSObject_init(self);
  self->extra_ = [IOSByteArray newArrayWithLength:
#line 108
  5];
  self->ownerKey_ = [IOSByteArray newArrayWithLength:
#line 114
  32];
  self->userKey_ = [IOSByteArray newArrayWithLength:
#line 117
  32];
  self->publicKeyHandler_ =
#line 120
  nil;
  self->arcfour_ = new_ComAowagieTextPdfCryptoARCFOUREncryption_init();
  
#line 150
  @try {
    self->md5_ = JavaSecurityMessageDigest_getInstanceWithNSString_(@"MD5");
  }
  @catch (
#line 152
  JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
  self->publicKeyHandler_ = new_ComAowagieTextPdfPdfPublicKeySecurityHandler_initPackagePrivate();
}


#line 149
ComAowagieTextPdfPdfEncryption *new_ComAowagieTextPdfPdfEncryption_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfEncryption, initPackagePrivate)
}


#line 149
ComAowagieTextPdfPdfEncryption *create_ComAowagieTextPdfPdfEncryption_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfEncryption, initPackagePrivate)
}


#line 158
void ComAowagieTextPdfPdfEncryption_initPackagePrivateWithComAowagieTextPdfPdfEncryption_(ComAowagieTextPdfPdfEncryption *self, ComAowagieTextPdfPdfEncryption *enc) {
  ComAowagieTextPdfPdfEncryption_initPackagePrivate(self);
  if (((ComAowagieTextPdfPdfEncryption *) nil_chk(enc))->mkey_ != nil) {
    self->mkey_ = [enc->mkey_ java_clone];
  }
  self->ownerKey_ = [((IOSByteArray *) nil_chk(enc->ownerKey_)) java_clone];
  self->userKey_ = [((IOSByteArray *) nil_chk(enc->userKey_)) java_clone];
  self->permissions_ = enc->permissions_;
  if (enc->documentID_ != nil) {
    self->documentID_ = [enc->documentID_ java_clone];
  }
  self->revision_ = enc->revision_;
  self->keyLength_ = enc->keyLength_;
  self->encryptMetadata_ = enc->encryptMetadata_;
  self->embeddedFilesOnly_ = enc->embeddedFilesOnly_;
  self->publicKeyHandler_ = enc->publicKeyHandler_;
  if (enc->ueKey_ != nil) {
    self->ueKey_ = [enc->ueKey_ java_clone];
  }
  if (enc->oeKey_ != nil) {
    self->oeKey_ = [enc->oeKey_ java_clone];
  }
  if (enc->perms_ != nil) {
    self->perms_ = [enc->perms_ java_clone];
  }
  if (enc->key_ != nil) {
    self->key_ = [enc->key_ java_clone];
  }
  self->keySize_ = enc->keySize_;
}


#line 158
ComAowagieTextPdfPdfEncryption *new_ComAowagieTextPdfPdfEncryption_initPackagePrivateWithComAowagieTextPdfPdfEncryption_(ComAowagieTextPdfPdfEncryption *enc) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfEncryption, initPackagePrivateWithComAowagieTextPdfPdfEncryption_, enc)
}


#line 158
ComAowagieTextPdfPdfEncryption *create_ComAowagieTextPdfPdfEncryption_initPackagePrivateWithComAowagieTextPdfPdfEncryption_(ComAowagieTextPdfPdfEncryption *enc) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfEncryption, initPackagePrivateWithComAowagieTextPdfPdfEncryption_, enc)
}


#line 241
IOSByteArray *ComAowagieTextPdfPdfEncryption_padPasswordWithByteArray_(ComAowagieTextPdfPdfEncryption *self, IOSByteArray *userPassword) {
  IOSByteArray *userPad = [IOSByteArray newArrayWithLength:32];
  if (userPassword == nil) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ComAowagieTextPdfPdfEncryption_pad, 0, userPad, 0, 32);
  }
  else {
    
#line 246
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(userPassword, 0, userPad, 0, JavaLangMath_minWithInt_withInt_(
#line 247
    userPassword->size_, 32));
    if (userPassword->size_ < 32) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ComAowagieTextPdfPdfEncryption_pad, 0, userPad, userPassword->size_,
#line 250
      32 - userPassword->size_);
    }
  }
  
#line 254
  return userPad;
}


#line 257
IOSByteArray *ComAowagieTextPdfPdfEncryption_computeOwnerKeyWithByteArray_withByteArray_(ComAowagieTextPdfPdfEncryption *self, IOSByteArray *userPad, IOSByteArray *ownerPad) {
  IOSByteArray *ownerKey = [IOSByteArray newArrayWithLength:32];
  
#line 260
  IOSByteArray *digest = [((JavaSecurityMessageDigest *) nil_chk(self->md5_)) digestWithByteArray:ownerPad];
  if (self->revision_ == ComAowagieTextPdfPdfEncryption_STANDARD_ENCRYPTION_128 || self->revision_ == ComAowagieTextPdfPdfEncryption_AES_128) {
    IOSByteArray *mkey = [IOSByteArray newArrayWithLength:JreIntDiv(self->keyLength_, 8)];
    
#line 264
    for (jint k = 0; k < 50; ++k) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((JavaSecurityMessageDigest *) nil_chk(self->md5_)) digestWithByteArray:digest], 0, digest, 0, mkey->size_);
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(userPad, 0, ownerKey, 0, 32);
    for (jint i = 0; i < 20; ++i) {
      for (jint j = 0; j < mkey->size_; ++j) {
        *IOSByteArray_GetRef(mkey, j) = (jbyte) (IOSByteArray_Get(nil_chk(digest), j) ^ i);
      }
      [((ComAowagieTextPdfCryptoARCFOUREncryption *) nil_chk(self->arcfour_)) prepareARCFOURKeyWithByteArray:mkey];
      [self->arcfour_ encryptARCFOURWithByteArray:ownerKey];
    }
  }
  else {
    
#line 276
    [((ComAowagieTextPdfCryptoARCFOUREncryption *) nil_chk(self->arcfour_)) prepareARCFOURKeyWithByteArray:digest withInt:0 withInt:5];
    [self->arcfour_ encryptARCFOURWithByteArray:userPad withByteArray:ownerKey];
  }
  
#line 280
  return ownerKey;
}


#line 291
void ComAowagieTextPdfPdfEncryption_setupGlobalEncryptionKeyWithByteArray_withByteArray_withByteArray_withInt_(ComAowagieTextPdfPdfEncryption *self, IOSByteArray *documentID, IOSByteArray *userPad, IOSByteArray *ownerKey, jint permissions) {
  
#line 293
  self->documentID_ = documentID;
  self->ownerKey_ = ownerKey;
  self->permissions_ = permissions;
  
#line 297
  self->mkey_ = [IOSByteArray newArrayWithLength:JreIntDiv(self->keyLength_, 8)];
  
#line 300
  [((JavaSecurityMessageDigest *) nil_chk(self->md5_)) reset];
  [((JavaSecurityMessageDigest *) nil_chk(self->md5_)) updateWithByteArray:userPad];
  [((JavaSecurityMessageDigest *) nil_chk(self->md5_)) updateWithByteArray:ownerKey];
  
#line 304
  IOSByteArray *ext = [IOSByteArray newArrayWithLength:4];
  *IOSByteArray_GetRef(ext, 0) = (jbyte) permissions;
  *IOSByteArray_GetRef(ext, 1) = (jbyte) (JreRShift32(permissions, 8));
  *IOSByteArray_GetRef(ext, 2) = (jbyte) (JreRShift32(permissions, 16));
  *IOSByteArray_GetRef(ext, 3) = (jbyte) (JreRShift32(permissions, 24));
  [((JavaSecurityMessageDigest *) nil_chk(self->md5_)) updateWithByteArray:ext withInt:0 withInt:4];
  if (documentID != nil) {
    [((JavaSecurityMessageDigest *) nil_chk(self->md5_)) updateWithByteArray:documentID];
  }
  if (!self->encryptMetadata_) {
    [((JavaSecurityMessageDigest *) nil_chk(self->md5_)) updateWithByteArray:ComAowagieTextPdfPdfEncryption_metadataPad];
  }
  
#line 317
  IOSByteArray *digest = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(self->mkey_))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((JavaSecurityMessageDigest *) nil_chk(self->md5_)) digest], 0, digest, 0, ((IOSByteArray *) nil_chk(self->mkey_))->size_);
  
#line 321
  if (self->revision_ == ComAowagieTextPdfPdfEncryption_STANDARD_ENCRYPTION_128 || self->revision_ == ComAowagieTextPdfPdfEncryption_AES_128) {
    for (jint k = 0; k < 50; ++k) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((JavaSecurityMessageDigest *) nil_chk(self->md5_)) digestWithByteArray:digest], 0, digest, 0, ((IOSByteArray *) nil_chk(self->mkey_))->size_);
    }
  }
  
#line 327
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(digest, 0, self->mkey_, 0, ((IOSByteArray *) nil_chk(self->mkey_))->size_);
}

void ComAowagieTextPdfPdfEncryption_setupUserKey(ComAowagieTextPdfPdfEncryption *self) {
  if (self->revision_ == ComAowagieTextPdfPdfEncryption_STANDARD_ENCRYPTION_128 || self->revision_ == ComAowagieTextPdfPdfEncryption_AES_128) {
    [((JavaSecurityMessageDigest *) nil_chk(self->md5_)) updateWithByteArray:ComAowagieTextPdfPdfEncryption_pad];
    IOSByteArray *digest = [((JavaSecurityMessageDigest *) nil_chk(self->md5_)) digestWithByteArray:self->documentID_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(digest, 0, self->userKey_, 0, 16);
    for (jint k = 16; k < 32; ++k) {
      *IOSByteArray_GetRef(nil_chk(self->userKey_), k) = 0;
    }
    for (jint i = 0; i < 20; ++i) {
      for (jint j = 0; j < ((IOSByteArray *) nil_chk(self->mkey_))->size_; ++j) {
        *IOSByteArray_GetRef(nil_chk(digest), j) = (jbyte) (IOSByteArray_Get(self->mkey_, j) ^ i);
      }
      [((ComAowagieTextPdfCryptoARCFOUREncryption *) nil_chk(self->arcfour_)) prepareARCFOURKeyWithByteArray:digest withInt:0 withInt:self->mkey_->size_];
      [self->arcfour_ encryptARCFOURWithByteArray:self->userKey_ withInt:0 withInt:16];
    }
  }
  else {
    
#line 351
    [((ComAowagieTextPdfCryptoARCFOUREncryption *) nil_chk(self->arcfour_)) prepareARCFOURKeyWithByteArray:self->mkey_];
    [self->arcfour_ encryptARCFOURWithByteArray:ComAowagieTextPdfPdfEncryption_pad withByteArray:self->userKey_];
  }
}


#line 389
IOSByteArray *ComAowagieTextPdfPdfEncryption_createDocumentId() {
  ComAowagieTextPdfPdfEncryption_initialize();
  
#line 390
  JavaSecurityMessageDigest *md5;
  @try {
    md5 = JavaSecurityMessageDigest_getInstanceWithNSString_(@"MD5");
  }
  @catch (
#line 393
  JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
  jlong time = JavaLangSystem_currentTimeMillis();
  jlong mem = [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) freeMemory];
  NSString *s = JreStrcat("JCJCJ", time, '+', mem, '+', ComAowagieTextPdfPdfEncryption_seq++);
  return [((JavaSecurityMessageDigest *) nil_chk(md5)) digestWithByteArray:[s java_getBytes]];
}


#line 429
void ComAowagieTextPdfPdfEncryption_setupByUserPadWithByteArray_withByteArray_withByteArray_withInt_(ComAowagieTextPdfPdfEncryption *self, IOSByteArray *documentID, IOSByteArray *userPad, IOSByteArray *ownerKey, jint permissions) {
  
#line 431
  ComAowagieTextPdfPdfEncryption_setupGlobalEncryptionKeyWithByteArray_withByteArray_withByteArray_withInt_(self, documentID, userPad, ownerKey, permissions);
  ComAowagieTextPdfPdfEncryption_setupUserKey(self);
}


#line 462
void ComAowagieTextPdfPdfEncryption_setupByOwnerPadWithByteArray_withByteArray_withByteArray_withByteArray_withInt_(ComAowagieTextPdfPdfEncryption *self, IOSByteArray *documentID, IOSByteArray *ownerPad, IOSByteArray *userKey, IOSByteArray *ownerKey, jint permissions) {
  
#line 464
  IOSByteArray *userPad = ComAowagieTextPdfPdfEncryption_computeOwnerKeyWithByteArray_withByteArray_(self, ownerKey, ownerPad);
  
#line 467
  ComAowagieTextPdfPdfEncryption_setupGlobalEncryptionKeyWithByteArray_withByteArray_withByteArray_withInt_(self, documentID, userPad, ownerKey, permissions);
  
#line 469
  ComAowagieTextPdfPdfEncryption_setupUserKey(self);
}


#line 520
ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfEncryption_createInfoIdWithByteArray_(IOSByteArray *id_) {
  ComAowagieTextPdfPdfEncryption_initialize();
  
#line 521
  ComAowagieTextPdfByteBuffer *buf = new_ComAowagieTextPdfByteBuffer_initWithInt_(90);
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([buf appendWithChar:'['])) appendWithChar:'<'];
  for (jint k = 0; k < 16; ++k) {
    (void) [buf appendHexWithByte:IOSByteArray_Get(nil_chk(id_), k)];
  }
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([buf appendWithChar:'>'])) appendWithChar:'<'];
  id_ = ComAowagieTextPdfPdfEncryption_createDocumentId();
  for (jint k = 0; k < 16; ++k) {
    (void) [buf appendHexWithByte:IOSByteArray_Get(nil_chk(id_), k)];
  }
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([buf appendWithChar:'>'])) appendWithChar:']'];
  return new_ComAowagieTextPdfPdfLiteral_initWithByteArray_([buf toByteArray]);
}


#line 824
IOSByteArray *ComAowagieTextPdfPdfEncryption_hashAlg2BWithByteArray_withByteArray_withByteArray_(IOSByteArray *input, IOSByteArray *salt, IOSByteArray *userKey) {
  ComAowagieTextPdfPdfEncryption_initialize();
  
#line 825
  JavaSecurityMessageDigest *sha256 = JavaSecurityMessageDigest_getInstanceWithNSString_(@"SHA-256");
  JavaSecurityMessageDigest *sha384 = JavaSecurityMessageDigest_getInstanceWithNSString_(@"SHA-384");
  JavaSecurityMessageDigest *sha512 = JavaSecurityMessageDigest_getInstanceWithNSString_(@"SHA-512");
  JavaxCryptoCipher *cipher = JavaxCryptoCipher_getInstanceWithNSString_(@"AES/CBC/NoPadding");
  
#line 830
  if (userKey == nil) {
    userKey = [IOSByteArray newArrayWithLength:0];
  }
  
#line 834
  [((JavaSecurityMessageDigest *) nil_chk(sha256)) updateWithByteArray:input];
  [sha256 updateWithByteArray:salt];
  [sha256 updateWithByteArray:userKey];
  IOSByteArray *k = [sha256 digest];
  
#line 839
  for (jint round = 0, lastEByte = 0; round < 64 || lastEByte > round - 32; round++) {
    jint singleSequenceSize = ((IOSByteArray *) nil_chk(input))->size_ + ((IOSByteArray *) nil_chk(k))->size_ + userKey->size_;
    IOSByteArray *k1 = [IOSByteArray newArrayWithLength:singleSequenceSize * 64];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(input, 0, k1, 0, input->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(k, 0, k1, input->size_, k->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(userKey, 0, k1, input->size_ + k->size_, userKey->size_);
    for (jint i = 1; i < 64; i++) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(k1, 0, k1, singleSequenceSize * i, singleSequenceSize);
    }
    
#line 849
    [((JavaxCryptoCipher *) nil_chk(cipher)) init__WithInt:JavaxCryptoCipher_ENCRYPT_MODE withJavaSecurityKey:new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(JavaUtilArrays_copyOfWithByteArray_withInt_(
#line 850
    k, 16), @"AES") withJavaSecuritySpecAlgorithmParameterSpec:new_JavaxCryptoSpecIvParameterSpec_initWithByteArray_(JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(
#line 851
    k, 16, 32))];
    IOSByteArray *e = [cipher updateWithByteArray:k1 withInt:0 withInt:k1->size_];
    lastEByte = IOSByteArray_Get(e, ((IOSByteArray *) nil_chk(e))->size_ - 1) & (jint) 0xFF;
    
#line 855
    switch ([((JavaMathBigInteger *) nil_chk([new_JavaMathBigInteger_initWithInt_withByteArray_(1, JavaUtilArrays_copyOfWithByteArray_withInt_(e, 16)) remainderWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(3)])) intValue]) {
      case 0:
      k = [sha256 digestWithByteArray:e];
      break;
      case 1:
      k = [((JavaSecurityMessageDigest *) nil_chk(sha384)) digestWithByteArray:e];
      break;
      case 2:
      k = [((JavaSecurityMessageDigest *) nil_chk(sha512)) digestWithByteArray:e];
      break;
    }
  }
  
#line 868
  return JavaUtilArrays_copyOfWithByteArray_withInt_(k, 32);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfEncryption)
