//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/CFFFontSubset.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/pdf/CFFFont.h"
#include "com/aowagie/text/pdf/CFFFontSubset.h"
#include "com/aowagie/text/pdf/RandomAccessFileOrArray.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/LinkedList.h"
#include "java/util/Set.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/CFFFontSubset must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfCFFFontSubset () {
 @public
  /*!
   @brief A HashMap containing the glyphs used in the text after being converted
  to glyph number by the CMap
   */
  JavaUtilHashMap *GlyphsUsed_;
  /*!
   @brief The GlyphsUsed keys as an ArrayList
   */
  JavaUtilArrayList *glyphsInList_;
  /*!
   @brief A HashMap for keeping the FDArrays being used by the font
   */
  JavaUtilHashMap *FDArrayUsed_;
  /*!
   @brief A HashMaps array for keeping the subroutines used in each FontDict
   */
  IOSObjectArray *hSubrsUsed_;
  /*!
   @brief The SubroutinesUsed HashMaps as ArrayLists
   */
  IOSObjectArray *lSubrsUsed_;
  /*!
   @brief A HashMap for keeping the Global subroutines used in the font
   */
  JavaUtilHashMap *hGSubrsUsed_;
  /*!
   @brief The Global SubroutinesUsed HashMaps as ArrayLists
   */
  JavaUtilArrayList *lGSubrsUsed_;
  /*!
   @brief A HashMap for keeping the subroutines used in a non-cid font
   */
  JavaUtilHashMap *hSubrsUsedNonCID_;
  /*!
   @brief The SubroutinesUsed HashMap as ArrayList
   */
  JavaUtilArrayList *lSubrsUsedNonCID_;
  /*!
   @brief An array of the new Indexes for the local Subr.One index for each FontDict
   */
  IOSObjectArray *NewLSubrsIndex_;
  /*!
   @brief The new subroutines index for a non-cid font
   */
  IOSByteArray *NewSubrsIndexNonCID_;
  /*!
   @brief The new global subroutines index of the font
   */
  IOSByteArray *NewGSubrsIndex_;
  /*!
   @brief The new CharString of the font
   */
  IOSByteArray *NewCharStringsIndex_;
  /*!
   @brief The bias for the global subroutines
   */
  jint GBias_;
  /*!
   @brief The linked list for generating the new font stream
   */
  JavaUtilLinkedList *OutputList_;
  /*!
   @brief Number of arguments to the stem operators in a subroutine calculated recursively
   */
  jint NumOfHints_;
}

/*!
 @brief Calculates the length of the charset according to its format
 @param Offset The Charset Offset
 @param NumofGlyphs Number of glyphs in the font
 @return the length of the Charset
 */
- (jint)CountCharsetWithInt:(jint)Offset
                    withInt:(jint)NumofGlyphs;

/*!
 @brief Function calculates the number of ranges in the Charset
 @param NumofGlyphs The number of glyphs in the font
 @param Type The format of the Charset
 @return The number of ranges in the Charset data structure
 */
- (jint)CountRangeWithInt:(jint)NumofGlyphs
                  withInt:(jint)Type;

/*!
 @brief Read the FDSelect of the font and compute the array and its length
 @param Font The index of the font being processed
 */
- (void)readFDSelectWithInt:(jint)Font;

/*!
 @brief Function reads the FDSelect and builds the FDArrayUsed HashMap According to the glyphs used
 @param Font the Number of font being processed
 */
- (void)BuildFDArrayUsedWithInt:(jint)Font;

/*!
 @brief Read the FDArray count, offsize and Offset array
 @param Font Font
 */
- (void)ReadFDArrayWithInt:(jint)Font;

/*!
 @brief Function calcs bias according to the CharString type and the count
  of the subrs
 @param Offset The offset to the relevant subrs index
 @param Font the font
 @return The calculated Bias
 */
- (jint)CalcBiasWithInt:(jint)Offset
                withInt:(jint)Font;

/*!
 @brief Function uses BuildNewIndex to create the new index of the subset charstrings
 @param FontIndex the font
 @throw IOExceptionIf I/O error
 */
- (void)BuildNewCharStringWithInt:(jint)FontIndex;

/*!
 @brief Function builds the new local &amp; global subsrs indices.IF CID then All of
  the FD Array lsubrs will be subsetted.
 @param Font the font
 @throw IOExceptionIf I/O error
 */
- (void)BuildNewLGSubrsWithInt:(jint)Font;

/*!
 @brief The function finds for the FD array processed the local subr offset and its
  offset array.
 @param Font the font
 @param FD The FDARRAY processed
 */
- (void)BuildFDSubrsOffsetsWithInt:(jint)Font
                           withInt:(jint)FD;

/*!
 @brief Function uses ReadAsubr on the glyph used to build the LSubr and Gsubr HashMap.
 The HashMap (of the lsubr only) is then scanned recursively for Lsubr and Gsubrs
  calls.
 @param Font the font
 @param FD FD array processed. 0 indicates function was called by non CID font
 @param SubrOffset the offset to the subr index to calc the bias
 @param SubrsOffsets the offset array of the subr index
 @param hSubr HashMap of the subrs used
 @param lSubr ArrayList of the subrs used
 */
- (void)BuildSubrUsedWithInt:(jint)Font
                     withInt:(jint)FD
                     withInt:(jint)SubrOffset
                withIntArray:(IOSIntArray *)SubrsOffsets
         withJavaUtilHashMap:(JavaUtilHashMap *)hSubr
       withJavaUtilArrayList:(JavaUtilArrayList *)lSubr;

/*!
 @brief Function scans the Glsubr used ArrayList to find recursive calls
  to Gsubrs and adds to Hashmap and ArrayList
 @param Font the font
 */
- (void)BuildGSubrsUsedWithInt:(jint)Font;

/*!
 @brief The function reads a subrs (glyph info) between begin and end.
 Adds calls to a Lsubr to the hSubr and lSubrs.
  Adds calls to a Gsubr to the hGSubr and lGSubrs.
 @param begin the start point of the subr
 @param end the end point of the subr
 @param GBias the bias of the Global Subrs
 @param LBias the bias of the Local Subrs
 @param hSubr the HashMap for the lSubrs
 @param lSubr the ArrayList for the lSubrs
 @param LSubrsOffsets lSubrs offsets
 */
- (void)ReadASubrWithInt:(jint)begin
                 withInt:(jint)end
                 withInt:(jint)GBias
                 withInt:(jint)LBias
     withJavaUtilHashMap:(JavaUtilHashMap *)hSubr
   withJavaUtilArrayList:(JavaUtilArrayList *)lSubr
            withIntArray:(IOSIntArray *)LSubrsOffsets;

/*!
 @brief Function Checks how the current operator effects the run time stack after being run
  An operator may increase or decrease the stack size
 */
- (void)HandelStack;

/*!
 @brief Function checks the key and return the change to the stack after the operator
 @return The change in the stack. 2-&lt; flush the stack
 */
- (jint)StackOpp;

/*!
 @brief Empty the Type2 Stack
 */
- (void)EmptyStack;

/*!
 @brief Pop one element from the stack
 */
- (void)PopStack;

/*!
 @brief Add an item to the stack
 */
- (void)PushStack;

/*!
 @brief The function reads the next command after the file pointer is set
 */
- (void)ReadCommand;

/*!
 @brief The function reads the subroutine and returns the number of the hint in it.
 If a call to another subroutine is found the function calls recursively.
 @param begin the start point of the subr
 @param end the end point of the subr
 @param LBias the bias of the Local Subrs
 @param GBias the bias of the Global Subrs
 @param LSubrsOffsets The Offsets array of the subroutines
 @return The number of hints in the subroutine read.
 */
- (jint)CalcHintsWithInt:(jint)begin
                 withInt:(jint)end
                 withInt:(jint)LBias
                 withInt:(jint)GBias
            withIntArray:(IOSIntArray *)LSubrsOffsets;

/*!
 @brief Function builds the new offset array, object array and assembles the index.
 used for creating the glyph and subrs subsetted index
 @param Offsets the offset array of the original index
 @param Used the hashmap of the used objects
 @param OperatorForUnusedEntries the operator inserted into the data stream for unused entries
 @return the new index subset version
 @throw IOExceptionon error
 */
- (IOSByteArray *)BuildNewIndexWithIntArray:(IOSIntArray *)Offsets
                        withJavaUtilHashMap:(JavaUtilHashMap *)Used
                                   withByte:(jbyte)OperatorForUnusedEntries;

/*!
 @brief Function creates the new index, inserting the count,offsetsize,offset array
  and object array.
 @param NewOffsets the subsetted offset array
 @param NewObjects the subsetted object array
 @return the new index created
 */
- (IOSByteArray *)AssembleIndexWithIntArray:(IOSIntArray *)NewOffsets
                              withByteArray:(IOSByteArray *)NewObjects;

/*!
 @brief The function builds the new output stream according to the subset process
 @param Font the font
 @return the subsetted font stream
 */
- (IOSByteArray *)BuildNewFileWithInt:(jint)Font;

/*!
 @brief Function Copies the header from the original fileto the output list
 */
- (void)CopyHeader;

/*!
 @brief Function Build the header of an index
 @param Count the count field of the index
 @param Offsize the offsize field of the index
 @param First the first offset of the index
 */
- (void)BuildIndexHeaderWithInt:(jint)Count
                        withInt:(jint)Offsize
                        withInt:(jint)First;

/*!
 @brief Function adds the keys into the TopDict
 @param fdarrayRef OffsetItem for the FDArray
 @param fdselectRef OffsetItem for the FDSelect
 @param charsetRef OffsetItem for the CharSet
 @param charstringsRef OffsetItem for the CharString
 */
- (void)CreateKeysWithComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)fdarrayRef
                  withComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)fdselectRef
                  withComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)charsetRef
                  withComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)charstringsRef;

/*!
 @brief Function takes the original string item and adds the new strings
  to accommodate the CID rules
 @param Font the font
 */
- (void)CreateNewStringIndexWithInt:(jint)Font;

/*!
 @brief Function creates new FDSelect for non-CID fonts.
 The FDSelect built uses a single range for all glyphs
 @param fdselectRef OffsetItem for the FDSelect
 @param nglyphs the number of glyphs in the font
 */
- (void)CreateFDSelectWithComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)fdselectRef
                                                      withInt:(jint)nglyphs;

/*!
 @brief Function creates new CharSet for non-CID fonts.
 The CharSet built uses a single range for all glyphs
 @param charsetRef OffsetItem for the CharSet
 @param nglyphs the number of glyphs in the font
 */
- (void)CreateCharsetWithComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)charsetRef
                                                     withInt:(jint)nglyphs;

/*!
 @brief Function creates new FDArray for non-CID fonts.
 The FDArray built has only the "Private" operator that points to the font's
  original private dict
 @param fdarrayRef OffsetItem for the FDArray
 @param privateRef OffsetItem for the Private Dict
 @param Font the font
 */
- (void)CreateFDArrayWithComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)fdarrayRef
                     withComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)privateRef
                                                     withInt:(jint)Font;

/*!
 @brief Function reconstructs the FDArray, PrivateDict and LSubr for CID fonts
 @param Font the font
 */
- (void)ReconstructWithInt:(jint)Font;

/*!
 @brief Function subsets the FDArray and builds the new one with new offsets
 @param Font The font
 @param fdPrivate OffsetItem Array (one for each FDArray)
 */
- (void)ReconstructFDArrayWithInt:(jint)Font
withComAowagieTextPdfCFFFont_OffsetItemArray:(IOSObjectArray *)fdPrivate;

/*!
 @brief Function Adds the new private dicts (only for the FDs used) to the list
 @param Font the font
 @param fdPrivate OffsetItem array one element for each private
 @param fdPrivateBase IndexBaseItem array one element for each private
 @param fdSubrs OffsetItem array one element for each private
 */
- (void)ReconstructPrivateDictWithInt:(jint)Font
withComAowagieTextPdfCFFFont_OffsetItemArray:(IOSObjectArray *)fdPrivate
withComAowagieTextPdfCFFFont_IndexBaseItemArray:(IOSObjectArray *)fdPrivateBase
withComAowagieTextPdfCFFFont_OffsetItemArray:(IOSObjectArray *)fdSubrs;

/*!
 @brief Function Adds the new LSubrs dicts (only for the FDs used) to the list
 @param Font The index of the font
 @param fdPrivateBase The IndexBaseItem array for the linked list
 @param fdSubrs OffsetItem array for the linked list
 */
- (void)ReconstructPrivateSubrsWithInt:(jint)Font
withComAowagieTextPdfCFFFont_IndexBaseItemArray:(IOSObjectArray *)fdPrivateBase
withComAowagieTextPdfCFFFont_OffsetItemArray:(IOSObjectArray *)fdSubrs;

/*!
 @brief Calculates how many byte it took to write the offset for the subrs in a specific
  private dict.
 @param Offset The Offset for the private dict
 @param Size The size of the private dict
 @return The size of the offset of the subrs in the private dict
 */
- (jint)CalcSubrOffsetSizeWithInt:(jint)Offset
                          withInt:(jint)Size;

/*!
 @brief The function creates a private dict for a font that was not CID
  All the keys are copied as is except for the subrs key
 @param Font the font
 @param Subr The OffsetItem for the subrs of the private
 */
- (void)CreateNonCIDPrivateWithInt:(jint)Font
withComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)Subr;

/*!
 @brief the function marks the beginning of the subrs index and adds the subsetted subrs
  index to the output list.
 @param Font the font
 @param PrivateBase IndexBaseItem for the private that's referencing to the subrs
 @param Subrs OffsetItem for the subrs
 */
- (void)CreateNonCIDSubrsWithInt:(jint)Font
withComAowagieTextPdfCFFFont_IndexBaseItem:(ComAowagieTextPdfCFFFont_IndexBaseItem *)PrivateBase
withComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)Subrs;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfCFFFontSubset, GlyphsUsed_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCFFFontSubset, glyphsInList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCFFFontSubset, FDArrayUsed_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCFFFontSubset, hSubrsUsed_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCFFFontSubset, lSubrsUsed_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCFFFontSubset, hGSubrsUsed_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCFFFontSubset, lGSubrsUsed_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCFFFontSubset, hSubrsUsedNonCID_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCFFFontSubset, lSubrsUsedNonCID_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCFFFontSubset, NewLSubrsIndex_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCFFFontSubset, NewSubrsIndexNonCID_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCFFFontSubset, NewGSubrsIndex_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCFFFontSubset, NewCharStringsIndex_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCFFFontSubset, OutputList_, JavaUtilLinkedList *)

/*!
 @brief The Strings in this array represent Type1/Type2 operator names
 */
inline IOSObjectArray *ComAowagieTextPdfCFFFontSubset_get_SubrsFunctions(void);
static IOSObjectArray *ComAowagieTextPdfCFFFontSubset_SubrsFunctions;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfCFFFontSubset, SubrsFunctions, IOSObjectArray *)

/*!
 @brief The Strings in this array represent Type1/Type2 escape operator names
 */
inline IOSObjectArray *ComAowagieTextPdfCFFFontSubset_get_SubrsEscapeFuncs(void);
static IOSObjectArray *ComAowagieTextPdfCFFFontSubset_SubrsEscapeFuncs;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfCFFFontSubset, SubrsEscapeFuncs, IOSObjectArray *)

/*!
 @brief Operator codes for unused  CharStrings and unused local and global Subrs
 */
inline jbyte ComAowagieTextPdfCFFFontSubset_get_ENDCHAR_OP(void);
#define ComAowagieTextPdfCFFFontSubset_ENDCHAR_OP 14
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCFFFontSubset, ENDCHAR_OP, jbyte)

inline jbyte ComAowagieTextPdfCFFFontSubset_get_RETURN_OP(void);
#define ComAowagieTextPdfCFFFontSubset_RETURN_OP 11
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCFFFontSubset, RETURN_OP, jbyte)

__attribute__((unused)) static jint ComAowagieTextPdfCFFFontSubset_CountCharsetWithInt_withInt_(ComAowagieTextPdfCFFFontSubset *self, jint Offset, jint NumofGlyphs);

__attribute__((unused)) static jint ComAowagieTextPdfCFFFontSubset_CountRangeWithInt_withInt_(ComAowagieTextPdfCFFFontSubset *self, jint NumofGlyphs, jint Type);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_readFDSelectWithInt_(ComAowagieTextPdfCFFFontSubset *self, jint Font);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_BuildFDArrayUsedWithInt_(ComAowagieTextPdfCFFFontSubset *self, jint Font);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_ReadFDArrayWithInt_(ComAowagieTextPdfCFFFontSubset *self, jint Font);

__attribute__((unused)) static jint ComAowagieTextPdfCFFFontSubset_CalcBiasWithInt_withInt_(ComAowagieTextPdfCFFFontSubset *self, jint Offset, jint Font);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_BuildNewCharStringWithInt_(ComAowagieTextPdfCFFFontSubset *self, jint FontIndex);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_BuildNewLGSubrsWithInt_(ComAowagieTextPdfCFFFontSubset *self, jint Font);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_BuildFDSubrsOffsetsWithInt_withInt_(ComAowagieTextPdfCFFFontSubset *self, jint Font, jint FD);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_BuildSubrUsedWithInt_withInt_withInt_withIntArray_withJavaUtilHashMap_withJavaUtilArrayList_(ComAowagieTextPdfCFFFontSubset *self, jint Font, jint FD, jint SubrOffset, IOSIntArray *SubrsOffsets, JavaUtilHashMap *hSubr, JavaUtilArrayList *lSubr);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_BuildGSubrsUsedWithInt_(ComAowagieTextPdfCFFFontSubset *self, jint Font);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_ReadASubrWithInt_withInt_withInt_withInt_withJavaUtilHashMap_withJavaUtilArrayList_withIntArray_(ComAowagieTextPdfCFFFontSubset *self, jint begin, jint end, jint GBias, jint LBias, JavaUtilHashMap *hSubr, JavaUtilArrayList *lSubr, IOSIntArray *LSubrsOffsets);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_HandelStack(ComAowagieTextPdfCFFFontSubset *self);

__attribute__((unused)) static jint ComAowagieTextPdfCFFFontSubset_StackOpp(ComAowagieTextPdfCFFFontSubset *self);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_EmptyStack(ComAowagieTextPdfCFFFontSubset *self);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_PopStack(ComAowagieTextPdfCFFFontSubset *self);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_PushStack(ComAowagieTextPdfCFFFontSubset *self);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_ReadCommand(ComAowagieTextPdfCFFFontSubset *self);

__attribute__((unused)) static jint ComAowagieTextPdfCFFFontSubset_CalcHintsWithInt_withInt_withInt_withInt_withIntArray_(ComAowagieTextPdfCFFFontSubset *self, jint begin, jint end, jint LBias, jint GBias, IOSIntArray *LSubrsOffsets);

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfCFFFontSubset_BuildNewIndexWithIntArray_withJavaUtilHashMap_withByte_(ComAowagieTextPdfCFFFontSubset *self, IOSIntArray *Offsets, JavaUtilHashMap *Used, jbyte OperatorForUnusedEntries);

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfCFFFontSubset_AssembleIndexWithIntArray_withByteArray_(ComAowagieTextPdfCFFFontSubset *self, IOSIntArray *NewOffsets, IOSByteArray *NewObjects);

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfCFFFontSubset_BuildNewFileWithInt_(ComAowagieTextPdfCFFFontSubset *self, jint Font);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_CopyHeader(ComAowagieTextPdfCFFFontSubset *self);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_BuildIndexHeaderWithInt_withInt_withInt_(ComAowagieTextPdfCFFFontSubset *self, jint Count, jint Offsize, jint First);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_CreateKeysWithComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_OffsetItem_(ComAowagieTextPdfCFFFontSubset *self, ComAowagieTextPdfCFFFont_OffsetItem *fdarrayRef, ComAowagieTextPdfCFFFont_OffsetItem *fdselectRef, ComAowagieTextPdfCFFFont_OffsetItem *charsetRef, ComAowagieTextPdfCFFFont_OffsetItem *charstringsRef);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_CreateNewStringIndexWithInt_(ComAowagieTextPdfCFFFontSubset *self, jint Font);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_CreateFDSelectWithComAowagieTextPdfCFFFont_OffsetItem_withInt_(ComAowagieTextPdfCFFFontSubset *self, ComAowagieTextPdfCFFFont_OffsetItem *fdselectRef, jint nglyphs);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_CreateCharsetWithComAowagieTextPdfCFFFont_OffsetItem_withInt_(ComAowagieTextPdfCFFFontSubset *self, ComAowagieTextPdfCFFFont_OffsetItem *charsetRef, jint nglyphs);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_CreateFDArrayWithComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_OffsetItem_withInt_(ComAowagieTextPdfCFFFontSubset *self, ComAowagieTextPdfCFFFont_OffsetItem *fdarrayRef, ComAowagieTextPdfCFFFont_OffsetItem *privateRef, jint Font);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_ReconstructWithInt_(ComAowagieTextPdfCFFFontSubset *self, jint Font);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_ReconstructFDArrayWithInt_withComAowagieTextPdfCFFFont_OffsetItemArray_(ComAowagieTextPdfCFFFontSubset *self, jint Font, IOSObjectArray *fdPrivate);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_ReconstructPrivateDictWithInt_withComAowagieTextPdfCFFFont_OffsetItemArray_withComAowagieTextPdfCFFFont_IndexBaseItemArray_withComAowagieTextPdfCFFFont_OffsetItemArray_(ComAowagieTextPdfCFFFontSubset *self, jint Font, IOSObjectArray *fdPrivate, IOSObjectArray *fdPrivateBase, IOSObjectArray *fdSubrs);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_ReconstructPrivateSubrsWithInt_withComAowagieTextPdfCFFFont_IndexBaseItemArray_withComAowagieTextPdfCFFFont_OffsetItemArray_(ComAowagieTextPdfCFFFontSubset *self, jint Font, IOSObjectArray *fdPrivateBase, IOSObjectArray *fdSubrs);

__attribute__((unused)) static jint ComAowagieTextPdfCFFFontSubset_CalcSubrOffsetSizeWithInt_withInt_(ComAowagieTextPdfCFFFontSubset *self, jint Offset, jint Size);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_CreateNonCIDPrivateWithInt_withComAowagieTextPdfCFFFont_OffsetItem_(ComAowagieTextPdfCFFFontSubset *self, jint Font, ComAowagieTextPdfCFFFont_OffsetItem *Subr);

__attribute__((unused)) static void ComAowagieTextPdfCFFFontSubset_CreateNonCIDSubrsWithInt_withComAowagieTextPdfCFFFont_IndexBaseItem_withComAowagieTextPdfCFFFont_OffsetItem_(ComAowagieTextPdfCFFFontSubset *self, jint Font, ComAowagieTextPdfCFFFont_IndexBaseItem *PrivateBase, ComAowagieTextPdfCFFFont_OffsetItem *Subrs);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/CFFFontSubset.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfCFFFontSubset)


#line 68
@implementation ComAowagieTextPdfCFFFontSubset


#line 172
- (instancetype)initPackagePrivateWithComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)rf
                                                           withJavaUtilHashMap:(JavaUtilHashMap *)GlyphsUsed {
  ComAowagieTextPdfCFFFontSubset_initPackagePrivateWithComAowagieTextPdfRandomAccessFileOrArray_withJavaUtilHashMap_(self, rf, GlyphsUsed);
  return self;
}


#line 216
- (jint)CountCharsetWithInt:(jint)Offset
                    withInt:(jint)NumofGlyphs {
  return ComAowagieTextPdfCFFFontSubset_CountCharsetWithInt_withInt_(self, Offset, NumofGlyphs);
}


#line 245
- (jint)CountRangeWithInt:(jint)NumofGlyphs
                  withInt:(jint)Type {
  return ComAowagieTextPdfCFFFontSubset_CountRangeWithInt_withInt_(self, NumofGlyphs, Type);
}


#line 267
- (void)readFDSelectWithInt:(jint)Font {
  ComAowagieTextPdfCFFFontSubset_readFDSelectWithInt_(self, Font);
}


#line 326
- (void)BuildFDArrayUsedWithInt:(jint)Font {
  ComAowagieTextPdfCFFFontSubset_BuildFDArrayUsedWithInt_(self, Font);
}


#line 345
- (void)ReadFDArrayWithInt:(jint)Font {
  ComAowagieTextPdfCFFFontSubset_ReadFDArrayWithInt_(self, Font);
}


#line 366
- (IOSByteArray *)ProcessWithNSString:(NSString *)fontName {
  @try {
    
#line 370
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->buf_)) reOpen];
    
#line 372
    jint j;
    for (j = 0; j < ((IOSObjectArray *) nil_chk(self->fonts_))->size_; j++) {
      if ([((NSString *) nil_chk(fontName)) isEqual:((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, j)))->name_]) {
        break;
      }
    }
    if (j == ((IOSObjectArray *) nil_chk(self->fonts_))->size_) {
      return nil;
    }
    
#line 383
    if (self->gsubrIndexOffset_ >= 0) {
      self->GBias_ = ComAowagieTextPdfCFFFontSubset_CalcBiasWithInt_withInt_(self, self->gsubrIndexOffset_, j);
    }
    
#line 388
    ComAowagieTextPdfCFFFontSubset_BuildNewCharStringWithInt_(self, j);
    
#line 390
    ComAowagieTextPdfCFFFontSubset_BuildNewLGSubrsWithInt_(self, j);
    
#line 392
    IOSByteArray *Ret = ComAowagieTextPdfCFFFontSubset_BuildNewFileWithInt_(self, j);
    return Ret;
  }
  @finally {
    @try {
      [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->buf_)) close];
    }
    @catch (JavaLangException *e) {
    }
  }
}


#line 412
- (jint)CalcBiasWithInt:(jint)Offset
                withInt:(jint)Font {
  return ComAowagieTextPdfCFFFontSubset_CalcBiasWithInt_withInt_(self, Offset, Font);
}


#line 433
- (void)BuildNewCharStringWithInt:(jint)FontIndex {
  ComAowagieTextPdfCFFFontSubset_BuildNewCharStringWithInt_(self, FontIndex);
}


#line 444
- (void)BuildNewLGSubrsWithInt:(jint)Font {
  ComAowagieTextPdfCFFFontSubset_BuildNewLGSubrsWithInt_(self, Font);
}


#line 510
- (void)BuildFDSubrsOffsetsWithInt:(jint)Font
                           withInt:(jint)FD {
  ComAowagieTextPdfCFFFontSubset_BuildFDSubrsOffsetsWithInt_withInt_(self, Font, FD);
}


#line 542
- (void)BuildSubrUsedWithInt:(jint)Font
                     withInt:(jint)FD
                     withInt:(jint)SubrOffset
                withIntArray:(IOSIntArray *)SubrsOffsets
         withJavaUtilHashMap:(JavaUtilHashMap *)hSubr
       withJavaUtilArrayList:(JavaUtilArrayList *)lSubr {
  ComAowagieTextPdfCFFFontSubset_BuildSubrUsedWithInt_withInt_withInt_withIntArray_withJavaUtilHashMap_withJavaUtilArrayList_(self, Font, FD, SubrOffset, SubrsOffsets, hSubr, lSubr);
}


#line 594
- (void)BuildGSubrsUsedWithInt:(jint)Font {
  ComAowagieTextPdfCFFFontSubset_BuildGSubrsUsedWithInt_(self, Font);
}


#line 653
- (void)ReadASubrWithInt:(jint)begin
                 withInt:(jint)end
                 withInt:(jint)GBias
                 withInt:(jint)LBias
     withJavaUtilHashMap:(JavaUtilHashMap *)hSubr
   withJavaUtilArrayList:(JavaUtilArrayList *)lSubr
            withIntArray:(IOSIntArray *)LSubrsOffsets {
  ComAowagieTextPdfCFFFontSubset_ReadASubrWithInt_withInt_withInt_withInt_withJavaUtilHashMap_withJavaUtilArrayList_withIntArray_(self, begin, end, GBias, LBias, hSubr, lSubr, LSubrsOffsets);
}


#line 731
- (void)HandelStack {
  ComAowagieTextPdfCFFFontSubset_HandelStack(self);
}


#line 761
- (jint)StackOpp {
  return ComAowagieTextPdfCFFFontSubset_StackOpp(self);
}


#line 788
- (void)EmptyStack {
  ComAowagieTextPdfCFFFontSubset_EmptyStack(self);
}


#line 801
- (void)PopStack {
  ComAowagieTextPdfCFFFontSubset_PopStack(self);
}


#line 814
- (void)PushStack {
  ComAowagieTextPdfCFFFontSubset_PushStack(self);
}


#line 822
- (void)ReadCommand {
  ComAowagieTextPdfCFFFontSubset_ReadCommand(self);
}


#line 899
- (jint)CalcHintsWithInt:(jint)begin
                 withInt:(jint)end
                 withInt:(jint)LBias
                 withInt:(jint)GBias
            withIntArray:(IOSIntArray *)LSubrsOffsets {
  return ComAowagieTextPdfCFFFontSubset_CalcHintsWithInt_withInt_withInt_withInt_withIntArray_(self, begin, end, LBias, GBias, LSubrsOffsets);
}


#line 965
- (IOSByteArray *)BuildNewIndexWithIntArray:(IOSIntArray *)Offsets
                        withJavaUtilHashMap:(JavaUtilHashMap *)Used
                                   withByte:(jbyte)OperatorForUnusedEntries {
  return ComAowagieTextPdfCFFFontSubset_BuildNewIndexWithIntArray_withJavaUtilHashMap_withByte_(self, Offsets, Used, OperatorForUnusedEntries);
}


#line 1018
- (IOSByteArray *)AssembleIndexWithIntArray:(IOSIntArray *)NewOffsets
                              withByteArray:(IOSByteArray *)NewObjects {
  return ComAowagieTextPdfCFFFontSubset_AssembleIndexWithIntArray_withByteArray_(self, NewOffsets, NewObjects);
}


#line 1074
- (IOSByteArray *)BuildNewFileWithInt:(jint)Font {
  return ComAowagieTextPdfCFFFontSubset_BuildNewFileWithInt_(self, Font);
}


#line 1257
- (void)CopyHeader {
  ComAowagieTextPdfCFFFontSubset_CopyHeader(self);
}


#line 1273
- (void)BuildIndexHeaderWithInt:(jint)Count
                        withInt:(jint)Offsize
                        withInt:(jint)First {
  ComAowagieTextPdfCFFFontSubset_BuildIndexHeaderWithInt_withInt_withInt_(self, Count, Offsize, First);
}


#line 1305
- (void)CreateKeysWithComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)fdarrayRef
                  withComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)fdselectRef
                  withComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)charsetRef
                  withComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)charstringsRef {
  ComAowagieTextPdfCFFFontSubset_CreateKeysWithComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_OffsetItem_(self, fdarrayRef, fdselectRef, charsetRef, charstringsRef);
}


#line 1328
- (void)CreateNewStringIndexWithInt:(jint)Font {
  ComAowagieTextPdfCFFFontSubset_CreateNewStringIndexWithInt_(self, Font);
}


#line 1377
- (void)CreateFDSelectWithComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)fdselectRef
                                                      withInt:(jint)nglyphs {
  ComAowagieTextPdfCFFFontSubset_CreateFDSelectWithComAowagieTextPdfCFFFont_OffsetItem_withInt_(self, fdselectRef, nglyphs);
}


#line 1395
- (void)CreateCharsetWithComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)charsetRef
                                                     withInt:(jint)nglyphs {
  ComAowagieTextPdfCFFFontSubset_CreateCharsetWithComAowagieTextPdfCFFFont_OffsetItem_withInt_(self, charsetRef, nglyphs);
}


#line 1411
- (void)CreateFDArrayWithComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)fdarrayRef
                     withComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)privateRef
                                                     withInt:(jint)Font {
  ComAowagieTextPdfCFFFontSubset_CreateFDArrayWithComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_OffsetItem_withInt_(self, fdarrayRef, privateRef, Font);
}


#line 1443
- (void)ReconstructWithInt:(jint)Font {
  ComAowagieTextPdfCFFFontSubset_ReconstructWithInt_(self, Font);
}


#line 1460
- (void)ReconstructFDArrayWithInt:(jint)Font
withComAowagieTextPdfCFFFont_OffsetItemArray:(IOSObjectArray *)fdPrivate {
  ComAowagieTextPdfCFFFontSubset_ReconstructFDArrayWithInt_withComAowagieTextPdfCFFFont_OffsetItemArray_(self, Font, fdPrivate);
}


#line 1527
- (void)ReconstructPrivateDictWithInt:(jint)Font
withComAowagieTextPdfCFFFont_OffsetItemArray:(IOSObjectArray *)fdPrivate
withComAowagieTextPdfCFFFont_IndexBaseItemArray:(IOSObjectArray *)fdPrivateBase
withComAowagieTextPdfCFFFont_OffsetItemArray:(IOSObjectArray *)fdSubrs {
  ComAowagieTextPdfCFFFontSubset_ReconstructPrivateDictWithInt_withComAowagieTextPdfCFFFont_OffsetItemArray_withComAowagieTextPdfCFFFont_IndexBaseItemArray_withComAowagieTextPdfCFFFont_OffsetItemArray_(self, Font, fdPrivate, fdPrivateBase, fdSubrs);
}


#line 1572
- (void)ReconstructPrivateSubrsWithInt:(jint)Font
withComAowagieTextPdfCFFFont_IndexBaseItemArray:(IOSObjectArray *)fdPrivateBase
withComAowagieTextPdfCFFFont_OffsetItemArray:(IOSObjectArray *)fdSubrs {
  ComAowagieTextPdfCFFFontSubset_ReconstructPrivateSubrsWithInt_withComAowagieTextPdfCFFFont_IndexBaseItemArray_withComAowagieTextPdfCFFFont_OffsetItemArray_(self, Font, fdPrivateBase, fdSubrs);
}


#line 1595
- (jint)CalcSubrOffsetSizeWithInt:(jint)Offset
                          withInt:(jint)Size {
  return ComAowagieTextPdfCFFFontSubset_CalcSubrOffsetSizeWithInt_withInt_(self, Offset, Size);
}


#line 1626
- (void)CreateNonCIDPrivateWithInt:(jint)Font
withComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)Subr {
  ComAowagieTextPdfCFFFontSubset_CreateNonCIDPrivateWithInt_withComAowagieTextPdfCFFFont_OffsetItem_(self, Font, Subr);
}


#line 1655
- (void)CreateNonCIDSubrsWithInt:(jint)Font
withComAowagieTextPdfCFFFont_IndexBaseItem:(ComAowagieTextPdfCFFFont_IndexBaseItem *)PrivateBase
withComAowagieTextPdfCFFFont_OffsetItem:(ComAowagieTextPdfCFFFont_OffsetItem *)Subrs {
  ComAowagieTextPdfCFFFontSubset_CreateNonCIDSubrsWithInt_withComAowagieTextPdfCFFFont_IndexBaseItem_withComAowagieTextPdfCFFFont_OffsetItem_(self, Font, PrivateBase, Subrs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 8, 9, 10, -1, -1, -1 },
    { NULL, "I", 0x2, 11, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 5, 10, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 5, 10, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 22, 23, 10, -1, -1, -1 },
    { NULL, "[B", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 26, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 43, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 44, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 47, 48, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithComAowagieTextPdfRandomAccessFileOrArray:withJavaUtilHashMap:);
  methods[1].selector = @selector(CountCharsetWithInt:withInt:);
  methods[2].selector = @selector(CountRangeWithInt:withInt:);
  methods[3].selector = @selector(readFDSelectWithInt:);
  methods[4].selector = @selector(BuildFDArrayUsedWithInt:);
  methods[5].selector = @selector(ReadFDArrayWithInt:);
  methods[6].selector = @selector(ProcessWithNSString:);
  methods[7].selector = @selector(CalcBiasWithInt:withInt:);
  methods[8].selector = @selector(BuildNewCharStringWithInt:);
  methods[9].selector = @selector(BuildNewLGSubrsWithInt:);
  methods[10].selector = @selector(BuildFDSubrsOffsetsWithInt:withInt:);
  methods[11].selector = @selector(BuildSubrUsedWithInt:withInt:withInt:withIntArray:withJavaUtilHashMap:withJavaUtilArrayList:);
  methods[12].selector = @selector(BuildGSubrsUsedWithInt:);
  methods[13].selector = @selector(ReadASubrWithInt:withInt:withInt:withInt:withJavaUtilHashMap:withJavaUtilArrayList:withIntArray:);
  methods[14].selector = @selector(HandelStack);
  methods[15].selector = @selector(StackOpp);
  methods[16].selector = @selector(EmptyStack);
  methods[17].selector = @selector(PopStack);
  methods[18].selector = @selector(PushStack);
  methods[19].selector = @selector(ReadCommand);
  methods[20].selector = @selector(CalcHintsWithInt:withInt:withInt:withInt:withIntArray:);
  methods[21].selector = @selector(BuildNewIndexWithIntArray:withJavaUtilHashMap:withByte:);
  methods[22].selector = @selector(AssembleIndexWithIntArray:withByteArray:);
  methods[23].selector = @selector(BuildNewFileWithInt:);
  methods[24].selector = @selector(CopyHeader);
  methods[25].selector = @selector(BuildIndexHeaderWithInt:withInt:withInt:);
  methods[26].selector = @selector(CreateKeysWithComAowagieTextPdfCFFFont_OffsetItem:withComAowagieTextPdfCFFFont_OffsetItem:withComAowagieTextPdfCFFFont_OffsetItem:withComAowagieTextPdfCFFFont_OffsetItem:);
  methods[27].selector = @selector(CreateNewStringIndexWithInt:);
  methods[28].selector = @selector(CreateFDSelectWithComAowagieTextPdfCFFFont_OffsetItem:withInt:);
  methods[29].selector = @selector(CreateCharsetWithComAowagieTextPdfCFFFont_OffsetItem:withInt:);
  methods[30].selector = @selector(CreateFDArrayWithComAowagieTextPdfCFFFont_OffsetItem:withComAowagieTextPdfCFFFont_OffsetItem:withInt:);
  methods[31].selector = @selector(ReconstructWithInt:);
  methods[32].selector = @selector(ReconstructFDArrayWithInt:withComAowagieTextPdfCFFFont_OffsetItemArray:);
  methods[33].selector = @selector(ReconstructPrivateDictWithInt:withComAowagieTextPdfCFFFont_OffsetItemArray:withComAowagieTextPdfCFFFont_IndexBaseItemArray:withComAowagieTextPdfCFFFont_OffsetItemArray:);
  methods[34].selector = @selector(ReconstructPrivateSubrsWithInt:withComAowagieTextPdfCFFFont_IndexBaseItemArray:withComAowagieTextPdfCFFFont_OffsetItemArray:);
  methods[35].selector = @selector(CalcSubrOffsetSizeWithInt:withInt:);
  methods[36].selector = @selector(CreateNonCIDPrivateWithInt:withComAowagieTextPdfCFFFont_OffsetItem:);
  methods[37].selector = @selector(CreateNonCIDSubrsWithInt:withComAowagieTextPdfCFFFont_IndexBaseItem:withComAowagieTextPdfCFFFont_OffsetItem:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SubrsFunctions", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 49, -1, -1 },
    { "SubrsEscapeFuncs", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 50, -1, -1 },
    { "ENDCHAR_OP", "B", .constantValue.asChar = ComAowagieTextPdfCFFFontSubset_ENDCHAR_OP, 0x1a, -1, -1, -1, -1 },
    { "RETURN_OP", "B", .constantValue.asChar = ComAowagieTextPdfCFFFontSubset_RETURN_OP, 0x1a, -1, -1, -1, -1 },
    { "GlyphsUsed_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "glyphsInList_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "FDArrayUsed_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hSubrsUsed_", "[LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lSubrsUsed_", "[LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hGSubrsUsed_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lGSubrsUsed_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hSubrsUsedNonCID_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lSubrsUsedNonCID_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "NewLSubrsIndex_", "[[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "NewSubrsIndexNonCID_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "NewGSubrsIndex_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "NewCharStringsIndex_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "GBias_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "OutputList_", "LJavaUtilLinkedList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "NumOfHints_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfRandomAccessFileOrArray;LJavaUtilHashMap;", "CountCharset", "II", "CountRange", "readFDSelect", "I", "BuildFDArrayUsed", "ReadFDArray", "Process", "LNSString;", "LJavaIoIOException;", "CalcBias", "BuildNewCharString", "BuildNewLGSubrs", "BuildFDSubrsOffsets", "BuildSubrUsed", "III[ILJavaUtilHashMap;LJavaUtilArrayList;", "BuildGSubrsUsed", "ReadASubr", "IIIILJavaUtilHashMap;LJavaUtilArrayList;[I", "CalcHints", "IIII[I", "BuildNewIndex", "[ILJavaUtilHashMap;B", "AssembleIndex", "[I[B", "BuildNewFile", "BuildIndexHeader", "III", "CreateKeys", "LComAowagieTextPdfCFFFont_OffsetItem;LComAowagieTextPdfCFFFont_OffsetItem;LComAowagieTextPdfCFFFont_OffsetItem;LComAowagieTextPdfCFFFont_OffsetItem;", "CreateNewStringIndex", "CreateFDSelect", "LComAowagieTextPdfCFFFont_OffsetItem;I", "CreateCharset", "CreateFDArray", "LComAowagieTextPdfCFFFont_OffsetItem;LComAowagieTextPdfCFFFont_OffsetItem;I", "Reconstruct", "ReconstructFDArray", "I[LComAowagieTextPdfCFFFont_OffsetItem;", "ReconstructPrivateDict", "I[LComAowagieTextPdfCFFFont_OffsetItem;[LComAowagieTextPdfCFFFont_IndexBaseItem;[LComAowagieTextPdfCFFFont_OffsetItem;", "ReconstructPrivateSubrs", "I[LComAowagieTextPdfCFFFont_IndexBaseItem;[LComAowagieTextPdfCFFFont_OffsetItem;", "CalcSubrOffsetSize", "CreateNonCIDPrivate", "ILComAowagieTextPdfCFFFont_OffsetItem;", "CreateNonCIDSubrs", "ILComAowagieTextPdfCFFFont_IndexBaseItem;LComAowagieTextPdfCFFFont_OffsetItem;", &ComAowagieTextPdfCFFFontSubset_SubrsFunctions, &ComAowagieTextPdfCFFFontSubset_SubrsEscapeFuncs };
  static const J2ObjcClassInfo _ComAowagieTextPdfCFFFontSubset = { "CFFFontSubset", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 38, 20, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfCFFFontSubset;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfCFFFontSubset class]) {
    ComAowagieTextPdfCFFFontSubset_SubrsFunctions = [IOSObjectArray newArrayWithObjects:(id[]){
#line 74
      @"RESERVED_0", @"hstem", @"RESERVED_2", @"vstem", @"vmoveto", @"rlineto", @"hlineto", @"vlineto",
#line 75
      @"rrcurveto", @"RESERVED_9", @"callsubr", @"return", @"escape", @"RESERVED_13",
#line 76
      @"endchar", @"RESERVED_15", @"RESERVED_16", @"RESERVED_17", @"hstemhm", @"hintmask",
#line 77
      @"cntrmask", @"rmoveto", @"hmoveto", @"vstemhm", @"rcurveline", @"rlinecurve", @"vvcurveto",
#line 78
      @"hhcurveto", @"shortint", @"callgsubr", @"vhcurveto", @"hvcurveto" } count:32 type:NSString_class_()];
      ComAowagieTextPdfCFFFontSubset_SubrsEscapeFuncs = [IOSObjectArray newArrayWithObjects:(id[]){
#line 84
        @"RESERVED_0", @"RESERVED_1", @"RESERVED_2", @"and", @"or", @"not", @"RESERVED_6",
#line 85
        @"RESERVED_7", @"RESERVED_8", @"abs", @"add", @"sub", @"div", @"RESERVED_13", @"neg",
#line 86
        @"eq", @"RESERVED_16", @"RESERVED_17", @"drop", @"RESERVED_19", @"put", @"get", @"ifelse",
#line 87
        @"random", @"mul", @"RESERVED_25", @"sqrt", @"dup", @"exch", @"index", @"roll", @"RESERVED_31",
#line 88
        @"RESERVED_32", @"RESERVED_33", @"hflex", @"flex", @"hflex1", @"flex1", @"RESERVED_REST" } count:39 type:NSString_class_()];
        J2OBJC_SET_INITIALIZED(ComAowagieTextPdfCFFFontSubset)
      }
    }

@end


#line 172
void ComAowagieTextPdfCFFFontSubset_initPackagePrivateWithComAowagieTextPdfRandomAccessFileOrArray_withJavaUtilHashMap_(ComAowagieTextPdfCFFFontSubset *self, ComAowagieTextPdfRandomAccessFileOrArray *rf, JavaUtilHashMap *GlyphsUsed) {
  ComAowagieTextPdfCFFFont_initPackagePrivateWithComAowagieTextPdfRandomAccessFileOrArray_(self,
#line 174
  rf);
  self->FDArrayUsed_ = new_JavaUtilLinkedHashMap_init();
  self->hGSubrsUsed_ = new_JavaUtilLinkedHashMap_init();
  self->lGSubrsUsed_ = new_JavaUtilArrayList_init();
  self->hSubrsUsedNonCID_ = new_JavaUtilLinkedHashMap_init();
  self->lSubrsUsedNonCID_ = new_JavaUtilArrayList_init();
  self->GBias_ =
#line 154
  0;
  self->NumOfHints_ =
#line 164
  0;
  
#line 175
  self->GlyphsUsed_ = GlyphsUsed;
  
#line 177
  self->glyphsInList_ = new_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilHashMap *) nil_chk(GlyphsUsed)) keySet]);
  
#line 180
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->fonts_))->size_; ++i) {
    
#line 183
    [self seekWithInt:((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, i)))->charstringsOffset_];
    ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), i)))->nglyphs_ = [self getCard16];
    
#line 187
    [self seekWithInt:self->stringIndexOffset_];
    ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), i)))->nstrings_ = [self getCard16] + ((IOSObjectArray *) nil_chk(JreLoadStatic(ComAowagieTextPdfCFFFont, standardStrings)))->size_;
    
#line 191
    ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), i)))->charstringsOffsets_ = [self getIndexWithInt:((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, i)))->charstringsOffset_];
    
#line 194
    if (((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), i)))->fdselectOffset_ >= 0) {
      
#line 197
      ComAowagieTextPdfCFFFontSubset_readFDSelectWithInt_(self, i);
      
#line 199
      ComAowagieTextPdfCFFFontSubset_BuildFDArrayUsedWithInt_(self, i);
    }
    if (((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), i)))->isCID_) {
      
#line 203
      ComAowagieTextPdfCFFFontSubset_ReadFDArrayWithInt_(self, i);
    }
    
#line 206
    ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), i)))->CharsetLength_ = ComAowagieTextPdfCFFFontSubset_CountCharsetWithInt_withInt_(self, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, i)))->charsetOffset_, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, i)))->nglyphs_);
  }
}


#line 172
ComAowagieTextPdfCFFFontSubset *new_ComAowagieTextPdfCFFFontSubset_initPackagePrivateWithComAowagieTextPdfRandomAccessFileOrArray_withJavaUtilHashMap_(ComAowagieTextPdfRandomAccessFileOrArray *rf, JavaUtilHashMap *GlyphsUsed) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfCFFFontSubset, initPackagePrivateWithComAowagieTextPdfRandomAccessFileOrArray_withJavaUtilHashMap_, rf, GlyphsUsed)
}


#line 172
ComAowagieTextPdfCFFFontSubset *create_ComAowagieTextPdfCFFFontSubset_initPackagePrivateWithComAowagieTextPdfRandomAccessFileOrArray_withJavaUtilHashMap_(ComAowagieTextPdfRandomAccessFileOrArray *rf, JavaUtilHashMap *GlyphsUsed) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfCFFFontSubset, initPackagePrivateWithComAowagieTextPdfRandomAccessFileOrArray_withJavaUtilHashMap_, rf, GlyphsUsed)
}


#line 216
jint ComAowagieTextPdfCFFFontSubset_CountCharsetWithInt_withInt_(ComAowagieTextPdfCFFFontSubset *self, jint Offset, jint NumofGlyphs) {
  jint format;
  jint Length = 0;
  [self seekWithInt:Offset];
  
#line 221
  format = [self getCard8];
  
#line 223
  switch (format) {
    case 0:
    Length = 1 + 2 * NumofGlyphs;
    break;
    case 1:
    Length = 1 + 3 * ComAowagieTextPdfCFFFontSubset_CountRangeWithInt_withInt_(self, NumofGlyphs, 1);
    break;
    case 2:
    Length = 1 + 4 * ComAowagieTextPdfCFFFontSubset_CountRangeWithInt_withInt_(self, NumofGlyphs, 2);
    break;
    default:
    break;
  }
  return Length;
}


#line 245
jint ComAowagieTextPdfCFFFontSubset_CountRangeWithInt_withInt_(ComAowagieTextPdfCFFFontSubset *self, jint NumofGlyphs, jint Type) {
  jint num = 0;
  jchar Sid;
  jint i = 1;
  
#line 248
  jint nLeft;
  while (i < NumofGlyphs) {
    num++;
    Sid = [self getCard16];
    if (Type == 1) {
      nLeft = [self getCard8];
    }
    else {
      
#line 255
      nLeft = [self getCard16];
    }
    i += nLeft + 1;
  }
  return num;
}


#line 267
void ComAowagieTextPdfCFFFontSubset_readFDSelectWithInt_(ComAowagieTextPdfCFFFontSubset *self, jint Font) {
  
#line 270
  jint NumOfGlyphs = ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->nglyphs_;
  IOSIntArray *FDSelect = [IOSIntArray newArrayWithLength:NumOfGlyphs];
  
#line 273
  [self seekWithInt:((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->fdselectOffset_];
  
#line 275
  ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->FDSelectFormat_ = [self getCard8];
  {
    
#line 292
    jint nRanges;
    jint l;
    
#line 295
    jint first;
    
#line 277
    switch (((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->FDSelectFormat_) {
      
#line 280
      case 0:
      for (jint i = 0; i < NumOfGlyphs; i++) {
        
#line 283
        *IOSIntArray_GetRef(FDSelect, i) = [self getCard8];
      }
      
#line 287
      ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->FDSelectLength_ = ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->nglyphs_ + 1;
      break;
      case 3:
      nRanges =
#line 292
      [self getCard16];
      l = 0;
      first =
#line 295
      [self getCard16];
      for (jint i = 0; i < nRanges; i++) {
        
#line 299
        jint fd = [self getCard8];
        
#line 301
        jint last = [self getCard16];
        
#line 303
        jint steps = last - first;
        for (jint k = 0; k < steps; k++) {
          
#line 306
          *IOSIntArray_GetRef(FDSelect, l) = fd;
          l++;
        }
        
#line 310
        first = last;
      }
      
#line 313
      ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->FDSelectLength_ = 1 + 2 + nRanges * 3 + 2;
      break;
      default:
      break;
    }
  }
  ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->FDSelect_ = FDSelect;
}


#line 326
void ComAowagieTextPdfCFFFontSubset_BuildFDArrayUsedWithInt_(ComAowagieTextPdfCFFFontSubset *self, jint Font) {
  
#line 328
  IOSIntArray *FDSelect = ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->FDSelect_;
  
#line 330
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(self->glyphsInList_)) size]; i++) {
    
#line 333
    jint glyph = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([self->glyphsInList_ getWithInt:i], [JavaLangInteger class])))) intValue];
    
#line 335
    jint FD = IOSIntArray_Get(nil_chk(FDSelect), glyph);
    
#line 337
    (void) [((JavaUtilHashMap *) nil_chk(self->FDArrayUsed_)) putWithId:new_JavaLangInteger_initWithInt_(FD) withId:nil];
  }
}

void ComAowagieTextPdfCFFFontSubset_ReadFDArrayWithInt_(ComAowagieTextPdfCFFFontSubset *self, jint Font) {
  
#line 347
  [self seekWithInt:((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->fdarrayOffset_];
  ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->FDArrayCount_ = [self getCard16];
  ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->FDArrayOffsize_ = [self getCard8];
  
#line 352
  if (((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->FDArrayOffsize_ < 4) {
    ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->FDArrayOffsize_++;
  }
  ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->FDArrayOffsets_ = [self getIndexWithInt:((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->fdarrayOffset_];
}


#line 412
jint ComAowagieTextPdfCFFFontSubset_CalcBiasWithInt_withInt_(ComAowagieTextPdfCFFFontSubset *self, jint Offset, jint Font) {
  
#line 414
  [self seekWithInt:Offset];
  jint nSubrs = [self getCard16];
  
#line 417
  if (((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->CharstringType_ == 1) {
    return 0;
  }
  else
#line 419
  if (nSubrs < 1240) {
    return 107;
  }
  else
#line 421
  if (nSubrs < 33900) {
    return 1131;
  }
  else {
    
#line 424
    return 32768;
  }
}


#line 433
void ComAowagieTextPdfCFFFontSubset_BuildNewCharStringWithInt_(ComAowagieTextPdfCFFFontSubset *self, jint FontIndex) {
  
#line 435
  self->NewCharStringsIndex_ = ComAowagieTextPdfCFFFontSubset_BuildNewIndexWithIntArray_withJavaUtilHashMap_withByte_(self, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), FontIndex)))->charstringsOffsets_, self->GlyphsUsed_, ComAowagieTextPdfCFFFontSubset_ENDCHAR_OP);
}


#line 444
void ComAowagieTextPdfCFFFontSubset_BuildNewLGSubrsWithInt_(ComAowagieTextPdfCFFFontSubset *self, jint Font) {
  
#line 448
  if (((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->isCID_) {
    
#line 452
    self->hSubrsUsed_ = [IOSObjectArray newArrayWithLength:((IOSIntArray *) nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->fdprivateOffsets_))->size_ type:JavaUtilLinkedHashMap_class_()];
    self->lSubrsUsed_ = [IOSObjectArray newArrayWithLength:((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->fdprivateOffsets_->size_ type:JavaUtilArrayList_class_()];
    
#line 455
    self->NewLSubrsIndex_ = [IOSObjectArray newArrayWithLength:((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->fdprivateOffsets_->size_ type:IOSClass_byteArray(1)];
    
#line 457
    ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->PrivateSubrsOffset_ = [IOSIntArray newArrayWithLength:((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->fdprivateOffsets_->size_];
    
#line 459
    ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->PrivateSubrsOffsetsArray_ = [IOSObjectArray newArrayWithLength:((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->fdprivateOffsets_->size_ type:IOSClass_intArray(1)];
    
#line 462
    JavaUtilArrayList *FDInList = new_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilHashMap *) nil_chk(self->FDArrayUsed_)) keySet]);
    
#line 464
    for (jint j = 0; j < [FDInList size]; j++) {
      
#line 467
      jint FD = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([FDInList getWithInt:j], [JavaLangInteger class])))) intValue];
      (void) IOSObjectArray_SetAndConsume(nil_chk(self->hSubrsUsed_), FD, new_JavaUtilLinkedHashMap_init());
      (void) IOSObjectArray_SetAndConsume(nil_chk(self->lSubrsUsed_), FD, new_JavaUtilArrayList_init());
      
#line 472
      ComAowagieTextPdfCFFFontSubset_BuildFDSubrsOffsetsWithInt_withInt_(self, Font, FD);
      
#line 474
      if (IOSIntArray_Get(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->PrivateSubrsOffset_), FD) >= 0) {
        
#line 478
        ComAowagieTextPdfCFFFontSubset_BuildSubrUsedWithInt_withInt_withInt_withIntArray_withJavaUtilHashMap_withJavaUtilArrayList_(self, Font, FD, IOSIntArray_Get(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->PrivateSubrsOffset_, FD), IOSObjectArray_Get(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->PrivateSubrsOffsetsArray_), FD), IOSObjectArray_Get(nil_chk(self->hSubrsUsed_), FD), IOSObjectArray_Get(nil_chk(self->lSubrsUsed_), FD));
        
#line 480
        (void) IOSObjectArray_Set(nil_chk(self->NewLSubrsIndex_), FD, ComAowagieTextPdfCFFFontSubset_BuildNewIndexWithIntArray_withJavaUtilHashMap_withByte_(self, IOSObjectArray_Get(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->PrivateSubrsOffsetsArray_), FD), IOSObjectArray_Get(nil_chk(self->hSubrsUsed_), FD), ComAowagieTextPdfCFFFontSubset_RETURN_OP));
      }
    }
  }
  else
#line 485
  if (((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->privateSubrs_ >= 0) {
    
#line 488
    ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->SubrsOffsets_ = [self getIndexWithInt:((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->privateSubrs_];
    
#line 491
    ComAowagieTextPdfCFFFontSubset_BuildSubrUsedWithInt_withInt_withInt_withIntArray_withJavaUtilHashMap_withJavaUtilArrayList_(self, Font, -1, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->privateSubrs_, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->SubrsOffsets_, self->hSubrsUsedNonCID_, self->lSubrsUsedNonCID_);
  }
  
#line 495
  ComAowagieTextPdfCFFFontSubset_BuildGSubrsUsedWithInt_(self, Font);
  if (((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->privateSubrs_ >= 0) {
    
#line 498
    self->NewSubrsIndexNonCID_ = ComAowagieTextPdfCFFFontSubset_BuildNewIndexWithIntArray_withJavaUtilHashMap_withByte_(self, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->SubrsOffsets_, self->hSubrsUsedNonCID_, ComAowagieTextPdfCFFFontSubset_RETURN_OP);
  }
  
#line 501
  self->NewGSubrsIndex_ = ComAowagieTextPdfCFFFontSubset_BuildNewIndexWithIntArray_withJavaUtilHashMap_withByte_(self, self->gsubrOffsets_, self->hGSubrsUsed_, ComAowagieTextPdfCFFFontSubset_RETURN_OP);
}

void ComAowagieTextPdfCFFFontSubset_BuildFDSubrsOffsetsWithInt_withInt_(ComAowagieTextPdfCFFFontSubset *self, jint Font, jint FD) {
  
#line 513
  *IOSIntArray_GetRef(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->PrivateSubrsOffset_), FD) = -1;
  
#line 515
  [self seekWithInt:IOSIntArray_Get(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->fdprivateOffsets_), FD)];
  
#line 517
  while ([self getPosition] < IOSIntArray_Get(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->fdprivateOffsets_), FD) + IOSIntArray_Get(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->fdprivateLengths_), FD)) {
    
#line 519
    [self getDictItem];
    
#line 521
    if (JreStringEqualsEquals(self->key_, @"Subrs")) {
      *IOSIntArray_GetRef(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->PrivateSubrsOffset_), FD) = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(nil_chk(self->args_), 0), [JavaLangInteger class])))) intValue] + IOSIntArray_Get(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->fdprivateOffsets_), FD);
    }
  }
  
#line 526
  if (IOSIntArray_Get(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->PrivateSubrsOffset_), FD) >= 0) {
    (void) IOSObjectArray_Set(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->PrivateSubrsOffsetsArray_), FD, [self getIndexWithInt:IOSIntArray_Get(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->PrivateSubrsOffset_, FD)]);
  }
}


#line 542
void ComAowagieTextPdfCFFFontSubset_BuildSubrUsedWithInt_withInt_withInt_withIntArray_withJavaUtilHashMap_withJavaUtilArrayList_(ComAowagieTextPdfCFFFontSubset *self, jint Font, jint FD, jint SubrOffset, IOSIntArray *SubrsOffsets, JavaUtilHashMap *hSubr, JavaUtilArrayList *lSubr) {
  
#line 546
  jint LBias = ComAowagieTextPdfCFFFontSubset_CalcBiasWithInt_withInt_(self, SubrOffset, Font);
  
#line 549
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(self->glyphsInList_)) size]; i++) {
    
#line 551
    jint glyph = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([self->glyphsInList_ getWithInt:i], [JavaLangInteger class])))) intValue];
    jint Start = IOSIntArray_Get(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->charstringsOffsets_), glyph);
    jint End = IOSIntArray_Get(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->charstringsOffsets_, glyph + 1);
    
#line 556
    if (FD >= 0) {
      
#line 558
      ComAowagieTextPdfCFFFontSubset_EmptyStack(self);
      self->NumOfHints_ = 0;
      
#line 561
      jint GlyphFD = IOSIntArray_Get(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->FDSelect_), glyph);
      
#line 563
      if (GlyphFD == FD) {
        
#line 565
        ComAowagieTextPdfCFFFontSubset_ReadASubrWithInt_withInt_withInt_withInt_withJavaUtilHashMap_withJavaUtilArrayList_withIntArray_(self, Start, End, self->GBias_, LBias, hSubr, lSubr, SubrsOffsets);
      }
    }
    else {
      
#line 570
      ComAowagieTextPdfCFFFontSubset_ReadASubrWithInt_withInt_withInt_withInt_withJavaUtilHashMap_withJavaUtilArrayList_withIntArray_(self, Start, End, self->GBias_, LBias, hSubr, lSubr, SubrsOffsets);
    }
  }
  
#line 574
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(lSubr)) size]; i++) {
    
#line 577
    jint Subr = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([lSubr getWithInt:i], [JavaLangInteger class])))) intValue];
    
#line 579
    if (Subr < ((IOSIntArray *) nil_chk(SubrsOffsets))->size_ - 1 && Subr >= 0) {
      
#line 582
      jint Start = IOSIntArray_Get(SubrsOffsets, Subr);
      jint End = IOSIntArray_Get(SubrsOffsets, Subr + 1);
      ComAowagieTextPdfCFFFontSubset_ReadASubrWithInt_withInt_withInt_withInt_withJavaUtilHashMap_withJavaUtilArrayList_withIntArray_(self, Start, End, self->GBias_, LBias, hSubr, lSubr, SubrsOffsets);
    }
  }
}


#line 594
void ComAowagieTextPdfCFFFontSubset_BuildGSubrsUsedWithInt_(ComAowagieTextPdfCFFFontSubset *self, jint Font) {
  
#line 596
  jint LBias = 0;
  jint SizeOfNonCIDSubrsUsed = 0;
  if (((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->privateSubrs_ >= 0) {
    
#line 600
    LBias = ComAowagieTextPdfCFFFontSubset_CalcBiasWithInt_withInt_(self, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->privateSubrs_, Font);
    SizeOfNonCIDSubrsUsed = [((JavaUtilArrayList *) nil_chk(self->lSubrsUsedNonCID_)) size];
  }
  
#line 605
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(self->lGSubrsUsed_)) size]; i++) {
    
#line 608
    jint Subr = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([self->lGSubrsUsed_ getWithInt:i], [JavaLangInteger class])))) intValue];
    if (Subr < ((IOSIntArray *) nil_chk(self->gsubrOffsets_))->size_ - 1 && Subr >= 0) {
      
#line 612
      jint Start = IOSIntArray_Get(self->gsubrOffsets_, Subr);
      jint End = IOSIntArray_Get(self->gsubrOffsets_, Subr + 1);
      
#line 615
      if (((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->isCID_) {
        ComAowagieTextPdfCFFFontSubset_ReadASubrWithInt_withInt_withInt_withInt_withJavaUtilHashMap_withJavaUtilArrayList_withIntArray_(self, Start, End, self->GBias_, 0, self->hGSubrsUsed_, self->lGSubrsUsed_, nil);
      }
      else {
        ComAowagieTextPdfCFFFontSubset_ReadASubrWithInt_withInt_withInt_withInt_withJavaUtilHashMap_withJavaUtilArrayList_withIntArray_(self, Start, End, self->GBias_, LBias, self->hSubrsUsedNonCID_, self->lSubrsUsedNonCID_, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->SubrsOffsets_);
        if (SizeOfNonCIDSubrsUsed < [((JavaUtilArrayList *) nil_chk(self->lSubrsUsedNonCID_)) size]) {
          
#line 622
          for (jint j = SizeOfNonCIDSubrsUsed; j < [self->lSubrsUsedNonCID_ size]; j++) {
            
#line 625
            jint LSubr = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([self->lSubrsUsedNonCID_ getWithInt:j], [JavaLangInteger class])))) intValue];
            if (LSubr < ((IOSIntArray *) nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->SubrsOffsets_))->size_ - 1 && LSubr >= 0) {
              
#line 629
              jint LStart = IOSIntArray_Get(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->SubrsOffsets_, LSubr);
              jint LEnd = IOSIntArray_Get(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->SubrsOffsets_, LSubr + 1);
              ComAowagieTextPdfCFFFontSubset_ReadASubrWithInt_withInt_withInt_withInt_withJavaUtilHashMap_withJavaUtilArrayList_withIntArray_(self, LStart, LEnd, self->GBias_, LBias, self->hSubrsUsedNonCID_, self->lSubrsUsedNonCID_, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->SubrsOffsets_);
            }
          }
          SizeOfNonCIDSubrsUsed = [self->lSubrsUsedNonCID_ size];
        }
      }
    }
  }
}


#line 653
void ComAowagieTextPdfCFFFontSubset_ReadASubrWithInt_withInt_withInt_withInt_withJavaUtilHashMap_withJavaUtilArrayList_withIntArray_(ComAowagieTextPdfCFFFontSubset *self, jint begin, jint end, jint GBias, jint LBias, JavaUtilHashMap *hSubr, JavaUtilArrayList *lSubr, IOSIntArray *LSubrsOffsets) {
  
#line 656
  ComAowagieTextPdfCFFFontSubset_EmptyStack(self);
  self->NumOfHints_ = 0;
  
#line 659
  [self seekWithInt:begin];
  while ([self getPosition] < end) {
    
#line 663
    ComAowagieTextPdfCFFFontSubset_ReadCommand(self);
    jint pos = [self getPosition];
    id TopElement = nil;
    if (self->arg_count_ > 0) {
      TopElement = IOSObjectArray_Get(nil_chk(self->args_), self->arg_count_ - 1);
    }
    jint NumOfArgs = self->arg_count_;
    
#line 671
    ComAowagieTextPdfCFFFontSubset_HandelStack(self);
    
#line 673
    if (JreStringEqualsEquals(self->key_, @"callsubr")) {
      
#line 676
      if (NumOfArgs > 0) {
        
#line 679
        jint Subr = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(TopElement, [JavaLangInteger class])))) intValue] + LBias;
        
#line 681
        if (![((JavaUtilHashMap *) nil_chk(hSubr)) containsKeyWithId:new_JavaLangInteger_initWithInt_(Subr)]) {
          
#line 683
          (void) [hSubr putWithId:new_JavaLangInteger_initWithInt_(Subr) withId:nil];
          [((JavaUtilArrayList *) nil_chk(lSubr)) addWithId:new_JavaLangInteger_initWithInt_(Subr)];
        }
        ComAowagieTextPdfCFFFontSubset_CalcHintsWithInt_withInt_withInt_withInt_withIntArray_(self, IOSIntArray_Get(nil_chk(LSubrsOffsets), Subr), IOSIntArray_Get(LSubrsOffsets, Subr + 1), LBias, GBias, LSubrsOffsets);
        [self seekWithInt:pos];
      }
    }
    else
#line 691
    if (JreStringEqualsEquals(self->key_, @"callgsubr")) {
      
#line 694
      if (NumOfArgs > 0) {
        
#line 697
        jint Subr = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(TopElement, [JavaLangInteger class])))) intValue] + GBias;
        
#line 699
        if (![((JavaUtilHashMap *) nil_chk(self->hGSubrsUsed_)) containsKeyWithId:new_JavaLangInteger_initWithInt_(Subr)]) {
          
#line 701
          (void) [self->hGSubrsUsed_ putWithId:new_JavaLangInteger_initWithInt_(Subr) withId:nil];
          [((JavaUtilArrayList *) nil_chk(self->lGSubrsUsed_)) addWithId:new_JavaLangInteger_initWithInt_(Subr)];
        }
        ComAowagieTextPdfCFFFontSubset_CalcHintsWithInt_withInt_withInt_withInt_withIntArray_(self, IOSIntArray_Get(nil_chk(self->gsubrOffsets_), Subr), IOSIntArray_Get(self->gsubrOffsets_, Subr + 1), LBias, GBias, LSubrsOffsets);
        [self seekWithInt:pos];
      }
    }
    else
#line 709
    if (JreStringEqualsEquals(self->key_, @"hstem") || JreStringEqualsEquals(self->key_, @"vstem") || JreStringEqualsEquals(self->key_, @"hstemhm") || JreStringEqualsEquals(self->key_, @"vstemhm")) {
      
#line 711
      self->NumOfHints_ += JreIntDiv(NumOfArgs, 2);
    }
    else
#line 712
    if (JreStringEqualsEquals(self->key_, @"hintmask") || JreStringEqualsEquals(self->key_, @"cntrmask")) {
      
#line 715
      jint SizeOfMask = JreIntDiv(self->NumOfHints_, 8);
      if (JreIntMod(self->NumOfHints_, 8) != 0 || SizeOfMask == 0) {
        SizeOfMask++;
      }
      
#line 720
      for (jint i = 0; i < SizeOfMask; i++) {
        [self getCard8];
      }
    }
  }
}


#line 731
void ComAowagieTextPdfCFFFontSubset_HandelStack(ComAowagieTextPdfCFFFontSubset *self) {
  
#line 734
  jint StackHandel = ComAowagieTextPdfCFFFontSubset_StackOpp(self);
  if (StackHandel < 2) {
    
#line 738
    if (StackHandel == 1) {
      ComAowagieTextPdfCFFFontSubset_PushStack(self);
    }
    else {
      
#line 744
      StackHandel *= -1;
      for (jint i = 0; i < StackHandel; i++) {
        ComAowagieTextPdfCFFFontSubset_PopStack(self);
      }
    }
  }
  else {
    
#line 753
    ComAowagieTextPdfCFFFontSubset_EmptyStack(self);
  }
}


#line 761
jint ComAowagieTextPdfCFFFontSubset_StackOpp(ComAowagieTextPdfCFFFontSubset *self) {
  
#line 763
  if (JreStringEqualsEquals(self->key_, @"ifelse")) {
    return -3;
  }
  if (JreStringEqualsEquals(self->key_, @"roll") || JreStringEqualsEquals(self->key_, @"put")) {
    return -2;
  }
  if (JreStringEqualsEquals(self->key_, @"callsubr") || JreStringEqualsEquals(self->key_, @"callgsubr") || JreStringEqualsEquals(self->key_, @"add") || JreStringEqualsEquals(self->key_, @"sub") || JreStringEqualsEquals(
#line 770
  self->key_, @"div") || JreStringEqualsEquals(self->key_, @"mul") || JreStringEqualsEquals(self->key_, @"drop") || JreStringEqualsEquals(self->key_, @"and") || JreStringEqualsEquals(
#line 771
  self->key_, @"or") || JreStringEqualsEquals(self->key_, @"eq")) {
    return -1;
  }
  if (JreStringEqualsEquals(self->key_, @"abs") || JreStringEqualsEquals(self->key_, @"neg") || JreStringEqualsEquals(self->key_, @"sqrt") || JreStringEqualsEquals(self->key_, @"exch") || JreStringEqualsEquals(
#line 775
  self->key_, @"index") || JreStringEqualsEquals(self->key_, @"get") || JreStringEqualsEquals(self->key_, @"not") || JreStringEqualsEquals(self->key_, @"return")) {
    return 0;
  }
  if (JreStringEqualsEquals(self->key_, @"random") || JreStringEqualsEquals(self->key_, @"dup")) {
    return 1;
  }
  return 2;
}

void ComAowagieTextPdfCFFFontSubset_EmptyStack(ComAowagieTextPdfCFFFontSubset *self) {
  
#line 791
  for (jint i = 0; i < self->arg_count_; i++) {
    (void) IOSObjectArray_Set(nil_chk(self->args_), i, nil);
  }
  self->arg_count_ = 0;
}


#line 801
void ComAowagieTextPdfCFFFontSubset_PopStack(ComAowagieTextPdfCFFFontSubset *self) {
  
#line 803
  if (self->arg_count_ > 0) {
    
#line 805
    (void) IOSObjectArray_Set(nil_chk(self->args_), self->arg_count_ - 1, nil);
    self->arg_count_--;
  }
}


#line 814
void ComAowagieTextPdfCFFFontSubset_PushStack(ComAowagieTextPdfCFFFontSubset *self) {
  
#line 816
  self->arg_count_++;
}


#line 822
void ComAowagieTextPdfCFFFontSubset_ReadCommand(ComAowagieTextPdfCFFFontSubset *self) {
  
#line 824
  self->key_ = nil;
  jboolean gotKey = false;
  
#line 827
  while (!gotKey) {
    
#line 829
    jchar b0 = [self getCard8];
    
#line 831
    if (b0 == 28) {
      
#line 833
      jint first = [self getCard8];
      jint second = [self getCard8];
      (void) IOSObjectArray_SetAndConsume(nil_chk(self->args_), self->arg_count_, new_JavaLangInteger_initWithInt_((JreLShift32(first, 8)) | second));
      self->arg_count_++;
      continue;
    }
    if (b0 >= 32 && b0 <= 246) {
      
#line 841
      (void) IOSObjectArray_SetAndConsume(nil_chk(self->args_), self->arg_count_, new_JavaLangInteger_initWithInt_(b0 - 139));
      self->arg_count_++;
      continue;
    }
    if (b0 >= 247 && b0 <= 250) {
      
#line 847
      jint w = [self getCard8];
      (void) IOSObjectArray_SetAndConsume(nil_chk(self->args_), self->arg_count_, new_JavaLangInteger_initWithInt_((b0 - 247) * 256 + w + 108));
      self->arg_count_++;
      continue;
    }
    if (b0 >= 251 && b0 <= 254) {
      
#line 854
      jint w = [self getCard8];
      (void) IOSObjectArray_SetAndConsume(nil_chk(self->args_), self->arg_count_, new_JavaLangInteger_initWithInt_(-(b0 - 251) * 256 - w - 108));
      self->arg_count_++;
      continue;
    }
    if (b0 == 255) {
      
#line 861
      jint first = [self getCard8];
      jint second = [self getCard8];
      jint third = [self getCard8];
      jint fourth = [self getCard8];
      (void) IOSObjectArray_SetAndConsume(nil_chk(self->args_), self->arg_count_, new_JavaLangInteger_initWithInt_((JreLShift32(first, 24)) | (JreLShift32(second, 16)) | (JreLShift32(third, 8)) | fourth));
      self->arg_count_++;
      continue;
    }
    if (b0 <= 31 && b0 != 28) {
      
#line 871
      gotKey = true;
      
#line 874
      if (b0 == 12) {
        
#line 876
        jint b1 = [self getCard8];
        if (b1 > ((IOSObjectArray *) nil_chk(ComAowagieTextPdfCFFFontSubset_SubrsEscapeFuncs))->size_ - 1) {
          b1 = ComAowagieTextPdfCFFFontSubset_SubrsEscapeFuncs->size_ - 1;
        }
        self->key_ = IOSObjectArray_Get(ComAowagieTextPdfCFFFontSubset_SubrsEscapeFuncs, b1);
      }
      else {
        
#line 882
        self->key_ = IOSObjectArray_Get(nil_chk(ComAowagieTextPdfCFFFontSubset_SubrsFunctions), b0);
      }
      continue;
    }
  }
}


#line 899
jint ComAowagieTextPdfCFFFontSubset_CalcHintsWithInt_withInt_withInt_withInt_withIntArray_(ComAowagieTextPdfCFFFontSubset *self, jint begin, jint end, jint LBias, jint GBias, IOSIntArray *LSubrsOffsets) {
  
#line 902
  [self seekWithInt:begin];
  while ([self getPosition] < end) {
    
#line 906
    ComAowagieTextPdfCFFFontSubset_ReadCommand(self);
    jint pos = [self getPosition];
    id TopElement = nil;
    if (self->arg_count_ > 0) {
      TopElement = IOSObjectArray_Get(nil_chk(self->args_), self->arg_count_ - 1);
    }
    jint NumOfArgs = self->arg_count_;
    
#line 914
    ComAowagieTextPdfCFFFontSubset_HandelStack(self);
    
#line 916
    if (JreStringEqualsEquals(self->key_, @"callsubr")) {
      
#line 918
      if (NumOfArgs > 0) {
        
#line 920
        jint Subr = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(TopElement, [JavaLangInteger class])))) intValue] + LBias;
        ComAowagieTextPdfCFFFontSubset_CalcHintsWithInt_withInt_withInt_withInt_withIntArray_(self, IOSIntArray_Get(nil_chk(LSubrsOffsets), Subr), IOSIntArray_Get(LSubrsOffsets, Subr + 1), LBias, GBias, LSubrsOffsets);
        [self seekWithInt:pos];
      }
    }
    else
#line 926
    if (JreStringEqualsEquals(self->key_, @"callgsubr")) {
      
#line 928
      if (NumOfArgs > 0) {
        
#line 930
        jint Subr = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(TopElement, [JavaLangInteger class])))) intValue] + GBias;
        ComAowagieTextPdfCFFFontSubset_CalcHintsWithInt_withInt_withInt_withInt_withIntArray_(self, IOSIntArray_Get(nil_chk(self->gsubrOffsets_), Subr), IOSIntArray_Get(self->gsubrOffsets_, Subr + 1), LBias, GBias, LSubrsOffsets);
        [self seekWithInt:pos];
      }
    }
    else
#line 936
    if (JreStringEqualsEquals(self->key_, @"hstem") || JreStringEqualsEquals(self->key_, @"vstem") || JreStringEqualsEquals(self->key_, @"hstemhm") || JreStringEqualsEquals(self->key_, @"vstemhm")) {
      
#line 938
      self->NumOfHints_ += JreIntDiv(NumOfArgs, 2);
    }
    else
#line 939
    if (JreStringEqualsEquals(self->key_, @"hintmask") || JreStringEqualsEquals(self->key_, @"cntrmask")) {
      
#line 942
      jint SizeOfMask = JreIntDiv(self->NumOfHints_, 8);
      if (JreIntMod(self->NumOfHints_, 8) != 0 || SizeOfMask == 0) {
        SizeOfMask++;
      }
      
#line 947
      for (jint i = 0; i < SizeOfMask; i++) {
        [self getCard8];
      }
    }
  }
  return self->NumOfHints_;
}


#line 965
IOSByteArray *ComAowagieTextPdfCFFFontSubset_BuildNewIndexWithIntArray_withJavaUtilHashMap_withByte_(ComAowagieTextPdfCFFFontSubset *self, IOSIntArray *Offsets, JavaUtilHashMap *Used, jbyte OperatorForUnusedEntries) {
  
#line 967
  __unused jint unusedCount = 0;
  jint Offset = 0;
  IOSIntArray *NewOffsets = [IOSIntArray newArrayWithLength:((IOSIntArray *) nil_chk(Offsets))->size_];
  
#line 971
  for (jint i = 0; i < Offsets->size_; ++i) {
    
#line 973
    *IOSIntArray_GetRef(NewOffsets, i) = Offset;
    
#line 976
    if ([((JavaUtilHashMap *) nil_chk(Used)) containsKeyWithId:new_JavaLangInteger_initWithInt_(i)]) {
      Offset += IOSIntArray_Get(Offsets, i + 1) - IOSIntArray_Get(Offsets, i);
    }
    else {
      unusedCount++;
    }
  }
  
#line 984
  IOSByteArray *NewObjects = [IOSByteArray newArrayWithLength:Offset + unusedCount];
  
#line 986
  __unused jint unusedOffset = 0;
  for (jint i = 0; i < Offsets->size_ - 1; ++i) {
    
#line 989
    jint start = IOSIntArray_Get(NewOffsets, i);
    jint end = IOSIntArray_Get(NewOffsets, i + 1);
    *IOSIntArray_GetRef(NewOffsets, i) = start + unusedOffset;
    
#line 994
    if (start != end) {
      
#line 998
      [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->buf_)) seekWithInt:IOSIntArray_Get(Offsets, i)];
      
#line 1000
      [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->buf_)) readFullyWithByteArray:NewObjects withInt:start + unusedOffset withInt:end - start];
    }
    else {
      
#line 1002
      *IOSByteArray_GetRef(NewObjects, start + unusedOffset) = OperatorForUnusedEntries;
      unusedOffset++;
    }
  }
  *IOSIntArray_GetRef(NewOffsets, Offsets->size_ - 1) += unusedOffset;
  
#line 1008
  return ComAowagieTextPdfCFFFontSubset_AssembleIndexWithIntArray_withByteArray_(self, NewOffsets, NewObjects);
}


#line 1018
IOSByteArray *ComAowagieTextPdfCFFFontSubset_AssembleIndexWithIntArray_withByteArray_(ComAowagieTextPdfCFFFontSubset *self, IOSIntArray *NewOffsets, IOSByteArray *NewObjects) {
  
#line 1021
  jchar Count = (jchar) (((IOSIntArray *) nil_chk(NewOffsets))->size_ - 1);
  
#line 1023
  jint Size = IOSIntArray_Get(NewOffsets, NewOffsets->size_ - 1);
  
#line 1025
  jbyte Offsize;
  if (Size <= (jint) 0xff) {
    Offsize = 1;
  }
  else
#line 1028
  if (Size <= (jint) 0xffff) {
    Offsize = 2;
  }
  else
#line 1030
  if (Size <= (jint) 0xffffff) {
    Offsize = 3;
  }
  else {
    
#line 1033
    Offsize = 4;
  }
  
#line 1037
  IOSByteArray *NewIndex = [IOSByteArray newArrayWithLength:2 + 1 + Offsize * (Count + 1) + ((IOSByteArray *) nil_chk(NewObjects))->size_];
  
#line 1039
  jint Place = 0;
  
#line 1041
  *IOSByteArray_GetRef(NewIndex, Place++) = (jbyte) ((JreURShift32(Count, 8)) & (jint) 0xff);
  *IOSByteArray_GetRef(NewIndex, Place++) = (jbyte) ((JreURShift32(Count, 0)) & (jint) 0xff);
  
#line 1044
  *IOSByteArray_GetRef(NewIndex, Place++) = Offsize;
  {
    IOSIntArray *a__ = NewOffsets;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint newOffset = *b__++;
      
#line 1048
      jint Num = newOffset - IOSIntArray_Get(NewOffsets, 0) + 1;
      
#line 1050
      switch (Offsize) {
        case 4:
        *IOSByteArray_GetRef(NewIndex, Place++) = (jbyte) ((JreURShift32(Num, 24)) & (jint) 0xff);
        case 3:
        *IOSByteArray_GetRef(NewIndex, Place++) = (jbyte) ((JreURShift32(Num, 16)) & (jint) 0xff);
        case 2:
        *IOSByteArray_GetRef(NewIndex, Place++) = (jbyte) ((JreURShift32(Num, 8)) & (jint) 0xff);
        case 1:
        *IOSByteArray_GetRef(NewIndex, Place++) = (jbyte) ((JreURShift32(Num, 0)) & (jint) 0xff);
      }
    }
  }
  {
    IOSByteArray *a__ =
#line 1062
    NewObjects;
    jbyte const *b__ = a__->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte newObject = *b__++;
      
#line 1063
      *IOSByteArray_GetRef(NewIndex, Place++) = newObject;
    }
  }
  return NewIndex;
}


#line 1074
IOSByteArray *ComAowagieTextPdfCFFFontSubset_BuildNewFileWithInt_(ComAowagieTextPdfCFFFontSubset *self, jint Font) {
  
#line 1077
  self->OutputList_ = new_JavaUtilLinkedList_init();
  
#line 1080
  ComAowagieTextPdfCFFFontSubset_CopyHeader(self);
  
#line 1083
  ComAowagieTextPdfCFFFontSubset_BuildIndexHeaderWithInt_withInt_withInt_(self, 1, 1, 1);
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) (1 + [((NSString *) nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->name_)) java_length]))];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_StringItem_initWithNSString_(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->name_)];
  
#line 1088
  ComAowagieTextPdfCFFFontSubset_BuildIndexHeaderWithInt_withInt_withInt_(self, 1, 2, 1);
  ComAowagieTextPdfCFFFont_OffsetItem *topdictIndex1Ref = new_ComAowagieTextPdfCFFFont_IndexOffsetItem_initWithInt_(2);
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:topdictIndex1Ref];
  ComAowagieTextPdfCFFFont_IndexBaseItem *topdictBase = new_ComAowagieTextPdfCFFFont_IndexBaseItem_init();
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:topdictBase];
  
#line 1095
  ComAowagieTextPdfCFFFont_OffsetItem *charsetRef = new_ComAowagieTextPdfCFFFont_DictOffsetItem_init();
  ComAowagieTextPdfCFFFont_OffsetItem *charstringsRef = new_ComAowagieTextPdfCFFFont_DictOffsetItem_init();
  ComAowagieTextPdfCFFFont_OffsetItem *fdarrayRef = new_ComAowagieTextPdfCFFFont_DictOffsetItem_init();
  ComAowagieTextPdfCFFFont_OffsetItem *fdselectRef = new_ComAowagieTextPdfCFFFont_DictOffsetItem_init();
  ComAowagieTextPdfCFFFont_OffsetItem *privateRef = new_ComAowagieTextPdfCFFFont_DictOffsetItem_init();
  
#line 1102
  if (!((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->isCID_) {
    
#line 1104
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_DictNumberItem_initWithInt_(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->nstrings_)];
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_DictNumberItem_initWithInt_(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->nstrings_ + 1)];
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_DictNumberItem_initWithInt_(0)];
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) 12)];
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) 30)];
    
#line 1110
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_DictNumberItem_initWithInt_(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->nglyphs_)];
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) 12)];
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) 34)];
  }
  
#line 1118
  [self seekWithInt:IOSIntArray_Get(nil_chk(self->topdictOffsets_), Font)];
  
#line 1120
  while ([self getPosition] < IOSIntArray_Get(nil_chk(self->topdictOffsets_), Font + 1)) {
    jint p1 = [self getPosition];
    [self getDictItem];
    jint p2 = [self getPosition];
    
#line 1125
    if (JreStringEqualsEquals(self->key_, @"Encoding") || JreStringEqualsEquals(
#line 1127
    self->key_, @"Private") || JreStringEqualsEquals(
#line 1128
    self->key_, @"FDSelect") || JreStringEqualsEquals(
#line 1129
    self->key_, @"FDArray") || JreStringEqualsEquals(
#line 1130
    self->key_, @"charset") || JreStringEqualsEquals(
#line 1131
    self->key_, @"CharStrings")) {
    }
    else {
      
#line 1135
      [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addWithId:new_ComAowagieTextPdfCFFFont_RangeItem_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_withInt_(self->buf_, p1, p2 - p1)];
    }
  }
  
#line 1139
  ComAowagieTextPdfCFFFontSubset_CreateKeysWithComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_OffsetItem_(self, fdarrayRef, fdselectRef, charsetRef, charstringsRef);
  
#line 1142
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_IndexMarkerItem_initWithComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_IndexBaseItem_(topdictIndex1Ref, topdictBase)];
  
#line 1146
  if (((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->isCID_) {
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:[self getEntireIndexRangeWithInt:self->stringIndexOffset_]];
  }
  else {
    
#line 1152
    ComAowagieTextPdfCFFFontSubset_CreateNewStringIndexWithInt_(self, Font);
  }
  
#line 1156
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_RangeItem_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_withInt_(new_ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_(self->NewGSubrsIndex_), 0, ((IOSByteArray *) nil_chk(self->NewGSubrsIndex_))->size_)];
  
#line 1160
  if (((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->isCID_) {
    
#line 1165
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_MarkerItem_initWithComAowagieTextPdfCFFFont_OffsetItem_(fdselectRef)];
    
#line 1167
    if (((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->fdselectOffset_ >= 0) {
      [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_RangeItem_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_withInt_(self->buf_, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->fdselectOffset_, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->FDSelectLength_)];
    }
    else {
      ComAowagieTextPdfCFFFontSubset_CreateFDSelectWithComAowagieTextPdfCFFFont_OffsetItem_withInt_(self, fdselectRef, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->nglyphs_);
    }
    
#line 1176
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_MarkerItem_initWithComAowagieTextPdfCFFFont_OffsetItem_(charsetRef)];
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_RangeItem_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_withInt_(self->buf_, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->charsetOffset_, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->CharsetLength_)];
    
#line 1181
    if (((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->fdarrayOffset_ >= 0) {
      
#line 1184
      [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_MarkerItem_initWithComAowagieTextPdfCFFFont_OffsetItem_(fdarrayRef)];
      
#line 1186
      ComAowagieTextPdfCFFFontSubset_ReconstructWithInt_(self, Font);
    }
    else {
      ComAowagieTextPdfCFFFontSubset_CreateFDArrayWithComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_OffsetItem_withInt_(self, fdarrayRef, privateRef, Font);
    }
  }
  else {
    
#line 1197
    ComAowagieTextPdfCFFFontSubset_CreateFDSelectWithComAowagieTextPdfCFFFont_OffsetItem_withInt_(self, fdselectRef, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->nglyphs_);
    
#line 1199
    ComAowagieTextPdfCFFFontSubset_CreateCharsetWithComAowagieTextPdfCFFFont_OffsetItem_withInt_(self, charsetRef, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->nglyphs_);
    
#line 1201
    ComAowagieTextPdfCFFFontSubset_CreateFDArrayWithComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_OffsetItem_withInt_(self, fdarrayRef, privateRef, Font);
  }
  
#line 1205
  if (((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->privateOffset_ >= 0) {
    
#line 1208
    ComAowagieTextPdfCFFFont_IndexBaseItem *PrivateBase = new_ComAowagieTextPdfCFFFont_IndexBaseItem_init();
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:PrivateBase];
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_MarkerItem_initWithComAowagieTextPdfCFFFont_OffsetItem_(privateRef)];
    
#line 1212
    ComAowagieTextPdfCFFFont_OffsetItem *Subr = new_ComAowagieTextPdfCFFFont_DictOffsetItem_init();
    
#line 1214
    ComAowagieTextPdfCFFFontSubset_CreateNonCIDPrivateWithInt_withComAowagieTextPdfCFFFont_OffsetItem_(self, Font, Subr);
    
#line 1216
    ComAowagieTextPdfCFFFontSubset_CreateNonCIDSubrsWithInt_withComAowagieTextPdfCFFFont_IndexBaseItem_withComAowagieTextPdfCFFFont_OffsetItem_(self, Font, PrivateBase, Subr);
  }
  
#line 1220
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_MarkerItem_initWithComAowagieTextPdfCFFFont_OffsetItem_(charstringsRef)];
  
#line 1223
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_RangeItem_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_withInt_(new_ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_(self->NewCharStringsIndex_), 0, ((IOSByteArray *) nil_chk(self->NewCharStringsIndex_))->size_)];
  
#line 1226
  IOSIntArray *currentOffset = [IOSIntArray newArrayWithLength:1];
  *IOSIntArray_GetRef(currentOffset, 0) = 0;
  
#line 1229
  id<JavaUtilIterator> listIter = [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(listIter)) hasNext]) {
    ComAowagieTextPdfCFFFont_Item *item = (ComAowagieTextPdfCFFFont_Item *) cast_chk([listIter next], [ComAowagieTextPdfCFFFont_Item class]);
    [((ComAowagieTextPdfCFFFont_Item *) nil_chk(item)) incrementWithIntArray:currentOffset];
  }
  
#line 1235
  listIter = [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(listIter)) hasNext]) {
    ComAowagieTextPdfCFFFont_Item *item = (ComAowagieTextPdfCFFFont_Item *) cast_chk([listIter next], [ComAowagieTextPdfCFFFont_Item class]);
    [((ComAowagieTextPdfCFFFont_Item *) nil_chk(item)) xref];
  }
  
#line 1241
  jint size = IOSIntArray_Get(currentOffset, 0);
  IOSByteArray *b = [IOSByteArray newArrayWithLength:size];
  
#line 1245
  listIter = [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(listIter)) hasNext]) {
    ComAowagieTextPdfCFFFont_Item *item = (ComAowagieTextPdfCFFFont_Item *) cast_chk([listIter next], [ComAowagieTextPdfCFFFont_Item class]);
    [((ComAowagieTextPdfCFFFont_Item *) nil_chk(item)) emitWithByteArray:b];
  }
  
#line 1251
  return b;
}


#line 1257
void ComAowagieTextPdfCFFFontSubset_CopyHeader(ComAowagieTextPdfCFFFontSubset *self) {
  
#line 1259
  [self seekWithInt:0];
  jint major = [self getCard8];
  jint minor = [self getCard8];
  jint hdrSize = [self getCard8];
  jint offSize = [self getCard8];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_RangeItem_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_withInt_(self->buf_, 0, hdrSize)];
}


#line 1273
void ComAowagieTextPdfCFFFontSubset_BuildIndexHeaderWithInt_withInt_withInt_(ComAowagieTextPdfCFFFontSubset *self, jint Count, jint Offsize, jint First) {
  
#line 1276
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt16Item_initWithChar_((jchar) Count)];
  
#line 1278
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) Offsize)];
  
#line 1280
  switch (Offsize) {
    case 1:
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) First)];
    break;
    case 2:
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt16Item_initWithChar_((jchar) First)];
    break;
    case 3:
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt24Item_initWithInt_((jchar) First)];
    break;
    case 4:
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt32Item_initWithInt_((jchar) First)];
    break;
    default:
    break;
  }
}


#line 1305
void ComAowagieTextPdfCFFFontSubset_CreateKeysWithComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_OffsetItem_(ComAowagieTextPdfCFFFontSubset *self, ComAowagieTextPdfCFFFont_OffsetItem *fdarrayRef, ComAowagieTextPdfCFFFont_OffsetItem *fdselectRef, ComAowagieTextPdfCFFFont_OffsetItem *charsetRef, ComAowagieTextPdfCFFFont_OffsetItem *charstringsRef) {
  
#line 1308
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:fdarrayRef];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) 12)];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) 36)];
  
#line 1312
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:fdselectRef];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) 12)];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) 37)];
  
#line 1316
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:charsetRef];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) 15)];
  
#line 1319
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:charstringsRef];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) 17)];
}


#line 1328
void ComAowagieTextPdfCFFFontSubset_CreateNewStringIndexWithInt_(ComAowagieTextPdfCFFFontSubset *self, jint Font) {
  
#line 1330
  NSString *fdFontName = JreStrcat("$$", ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->name_, @"-OneRange");
  if ([fdFontName java_length] > 127) {
    fdFontName = [fdFontName java_substring:0 endIndex:127];
  }
  NSString *extraStrings = JreStrcat("$$", @"AdobeIdentity", fdFontName);
  
#line 1336
  jint origStringsLen = IOSIntArray_Get(self->stringOffsets_, ((IOSIntArray *) nil_chk(self->stringOffsets_))->size_ - 1) - IOSIntArray_Get(
#line 1337
  self->stringOffsets_, 0);
  jint stringsBaseOffset = IOSIntArray_Get(self->stringOffsets_, 0) - 1;
  
#line 1340
  jbyte stringsIndexOffSize;
  if (origStringsLen + [extraStrings java_length] <= (jint) 0xff) {
    stringsIndexOffSize = 1;
  }
  else
#line 1343
  if (origStringsLen + [extraStrings java_length] <= (jint) 0xffff) {
    stringsIndexOffSize = 2;
  }
  else
#line 1345
  if (origStringsLen + [extraStrings java_length] <= (jint) 0xffffff) {
    stringsIndexOffSize = 3;
  }
  else {
    
#line 1348
    stringsIndexOffSize = 4;
  }
  
#line 1351
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt16Item_initWithChar_((jchar) (((IOSIntArray *) nil_chk(self->stringOffsets_))->size_ - 1 + 3))];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) stringsIndexOffSize)];
  {
    IOSIntArray *a__ =
#line 1353
    self->stringOffsets_;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint stringOffset = *b__++;
      
#line 1354
      [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_IndexOffsetItem_initWithInt_withInt_(stringsIndexOffSize,
#line 1355
      stringOffset - stringsBaseOffset)];
    }
  }
  
#line 1357
  jint currentStringsOffset = IOSIntArray_Get(self->stringOffsets_, ((IOSIntArray *) nil_chk(self->stringOffsets_))->size_ - 1) -
#line 1358
  stringsBaseOffset;
  
#line 1360
  currentStringsOffset += [@"Adobe" java_length];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_IndexOffsetItem_initWithInt_withInt_(stringsIndexOffSize, currentStringsOffset)];
  currentStringsOffset += [@"Identity" java_length];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_IndexOffsetItem_initWithInt_withInt_(stringsIndexOffSize, currentStringsOffset)];
  currentStringsOffset += [((NSString *) nil_chk(fdFontName)) java_length];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_IndexOffsetItem_initWithInt_withInt_(stringsIndexOffSize, currentStringsOffset)];
  
#line 1367
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_RangeItem_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_withInt_(self->buf_, IOSIntArray_Get(nil_chk(self->stringOffsets_), 0), origStringsLen)];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_StringItem_initWithNSString_(extraStrings)];
}


#line 1377
void ComAowagieTextPdfCFFFontSubset_CreateFDSelectWithComAowagieTextPdfCFFFont_OffsetItem_withInt_(ComAowagieTextPdfCFFFontSubset *self, ComAowagieTextPdfCFFFont_OffsetItem *fdselectRef, jint nglyphs) {
  
#line 1379
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_MarkerItem_initWithComAowagieTextPdfCFFFont_OffsetItem_(fdselectRef)];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) 3)];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt16Item_initWithChar_((jchar) 1)];
  
#line 1383
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt16Item_initWithChar_((jchar) 0)];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) 0)];
  
#line 1386
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt16Item_initWithChar_((jchar) nglyphs)];
}


#line 1395
void ComAowagieTextPdfCFFFontSubset_CreateCharsetWithComAowagieTextPdfCFFFont_OffsetItem_withInt_(ComAowagieTextPdfCFFFontSubset *self, ComAowagieTextPdfCFFFont_OffsetItem *charsetRef, jint nglyphs) {
  
#line 1397
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_MarkerItem_initWithComAowagieTextPdfCFFFont_OffsetItem_(charsetRef)];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) 2)];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt16Item_initWithChar_((jchar) 1)];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt16Item_initWithChar_((jchar) (nglyphs - 1))];
}


#line 1411
void ComAowagieTextPdfCFFFontSubset_CreateFDArrayWithComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_OffsetItem_withInt_(ComAowagieTextPdfCFFFontSubset *self, ComAowagieTextPdfCFFFont_OffsetItem *fdarrayRef, ComAowagieTextPdfCFFFont_OffsetItem *privateRef, jint Font) {
  
#line 1413
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_MarkerItem_initWithComAowagieTextPdfCFFFont_OffsetItem_(fdarrayRef)];
  
#line 1415
  ComAowagieTextPdfCFFFontSubset_BuildIndexHeaderWithInt_withInt_withInt_(self, 1, 1, 1);
  
#line 1418
  ComAowagieTextPdfCFFFont_OffsetItem *privateIndex1Ref = new_ComAowagieTextPdfCFFFont_IndexOffsetItem_initWithInt_(1);
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:privateIndex1Ref];
  ComAowagieTextPdfCFFFont_IndexBaseItem *privateBase = new_ComAowagieTextPdfCFFFont_IndexBaseItem_init();
  
#line 1422
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:privateBase];
  
#line 1425
  jint NewSize = ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->privateLength_;
  
#line 1427
  jint OrgSubrsOffsetSize = ComAowagieTextPdfCFFFontSubset_CalcSubrOffsetSizeWithInt_withInt_(self, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->privateOffset_, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->privateLength_);
  
#line 1429
  if (OrgSubrsOffsetSize != 0) {
    NewSize += 5 - OrgSubrsOffsetSize;
  }
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_DictNumberItem_initWithInt_(NewSize)];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:privateRef];
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) 18)];
  
#line 1436
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_IndexMarkerItem_initWithComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_IndexBaseItem_(privateIndex1Ref, privateBase)];
}


#line 1443
void ComAowagieTextPdfCFFFontSubset_ReconstructWithInt_(ComAowagieTextPdfCFFFontSubset *self, jint Font) {
  
#line 1446
  IOSObjectArray *fdPrivate = [IOSObjectArray newArrayWithLength:((IOSIntArray *) nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->FDArrayOffsets_))->size_ - 1 type:ComAowagieTextPdfCFFFont_DictOffsetItem_class_()];
  IOSObjectArray *fdPrivateBase = [IOSObjectArray newArrayWithLength:((IOSIntArray *) nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->fdprivateOffsets_))->size_ type:ComAowagieTextPdfCFFFont_IndexBaseItem_class_()];
  IOSObjectArray *fdSubrs = [IOSObjectArray newArrayWithLength:((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->fdprivateOffsets_->size_ type:ComAowagieTextPdfCFFFont_DictOffsetItem_class_()];
  
#line 1450
  ComAowagieTextPdfCFFFontSubset_ReconstructFDArrayWithInt_withComAowagieTextPdfCFFFont_OffsetItemArray_(self, Font, fdPrivate);
  ComAowagieTextPdfCFFFontSubset_ReconstructPrivateDictWithInt_withComAowagieTextPdfCFFFont_OffsetItemArray_withComAowagieTextPdfCFFFont_IndexBaseItemArray_withComAowagieTextPdfCFFFont_OffsetItemArray_(self, Font, fdPrivate, fdPrivateBase, fdSubrs);
  ComAowagieTextPdfCFFFontSubset_ReconstructPrivateSubrsWithInt_withComAowagieTextPdfCFFFont_IndexBaseItemArray_withComAowagieTextPdfCFFFont_OffsetItemArray_(self, Font, fdPrivateBase, fdSubrs);
}


#line 1460
void ComAowagieTextPdfCFFFontSubset_ReconstructFDArrayWithInt_withComAowagieTextPdfCFFFont_OffsetItemArray_(ComAowagieTextPdfCFFFontSubset *self, jint Font, IOSObjectArray *fdPrivate) {
  
#line 1463
  ComAowagieTextPdfCFFFontSubset_BuildIndexHeaderWithInt_withInt_withInt_(self, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->FDArrayCount_, ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->FDArrayOffsize_, 1);
  
#line 1466
  IOSObjectArray *fdOffsets = [IOSObjectArray newArrayWithLength:((IOSIntArray *) nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->FDArrayOffsets_))->size_ - 1 type:ComAowagieTextPdfCFFFont_IndexOffsetItem_class_()];
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->FDArrayOffsets_))->size_ - 1; i++) {
    
#line 1469
    (void) IOSObjectArray_SetAndConsume(fdOffsets, i, new_ComAowagieTextPdfCFFFont_IndexOffsetItem_initWithInt_(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->FDArrayOffsize_));
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:IOSObjectArray_Get(fdOffsets, i)];
  }
  
#line 1474
  ComAowagieTextPdfCFFFont_IndexBaseItem *fdArrayBase = new_ComAowagieTextPdfCFFFont_IndexBaseItem_init();
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:fdArrayBase];
  
#line 1481
  for (jint k = 0; k < ((IOSIntArray *) nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->FDArrayOffsets_))->size_ - 1; k++) {
    if ([((JavaUtilHashMap *) nil_chk(self->FDArrayUsed_)) containsKeyWithId:new_JavaLangInteger_initWithInt_(k)]) {
      
#line 1485
      [self seekWithInt:IOSIntArray_Get(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->FDArrayOffsets_), k)];
      while ([self getPosition] < IOSIntArray_Get(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->FDArrayOffsets_), k + 1)) {
        
#line 1488
        jint p1 = [self getPosition];
        [self getDictItem];
        jint p2 = [self getPosition];
        
#line 1493
        if (JreStringEqualsEquals(self->key_, @"Private")) {
          
#line 1495
          jint NewSize = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(nil_chk(self->args_), 0), [JavaLangInteger class])))) intValue];
          
#line 1497
          jint OrgSubrsOffsetSize = ComAowagieTextPdfCFFFontSubset_CalcSubrOffsetSizeWithInt_withInt_(self, IOSIntArray_Get(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->fdprivateOffsets_), k), IOSIntArray_Get(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->fdprivateLengths_), k));
          
#line 1499
          if (OrgSubrsOffsetSize != 0) {
            NewSize += 5 - OrgSubrsOffsetSize;
          }
          
#line 1503
          [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_DictNumberItem_initWithInt_(NewSize)];
          (void) IOSObjectArray_SetAndConsume(nil_chk(fdPrivate), k, new_ComAowagieTextPdfCFFFont_DictOffsetItem_init());
          [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:IOSObjectArray_Get(fdPrivate, k)];
          [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) 18)];
          
#line 1508
          [self seekWithInt:p2];
        }
        else {
          
#line 1512
          [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_RangeItem_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_withInt_(self->buf_, p1, p2 - p1)];
        }
      }
    }
    
#line 1517
    [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_IndexMarkerItem_initWithComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_IndexBaseItem_(IOSObjectArray_Get(fdOffsets, k), fdArrayBase)];
  }
}

void ComAowagieTextPdfCFFFontSubset_ReconstructPrivateDictWithInt_withComAowagieTextPdfCFFFont_OffsetItemArray_withComAowagieTextPdfCFFFont_IndexBaseItemArray_withComAowagieTextPdfCFFFont_OffsetItemArray_(ComAowagieTextPdfCFFFontSubset *self, jint Font, IOSObjectArray *fdPrivate, IOSObjectArray *fdPrivateBase, IOSObjectArray *fdSubrs) {
  
#line 1534
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->fdprivateOffsets_))->size_; i++) {
    
#line 1536
    if ([((JavaUtilHashMap *) nil_chk(self->FDArrayUsed_)) containsKeyWithId:new_JavaLangInteger_initWithInt_(i)]) {
      
#line 1539
      [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_MarkerItem_initWithComAowagieTextPdfCFFFont_OffsetItem_(IOSObjectArray_Get(nil_chk(fdPrivate), i))];
      (void) IOSObjectArray_SetAndConsume(nil_chk(fdPrivateBase), i, new_ComAowagieTextPdfCFFFont_IndexBaseItem_init());
      [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:IOSObjectArray_Get(fdPrivateBase, i)];
      
#line 1543
      [self seekWithInt:IOSIntArray_Get(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->fdprivateOffsets_), i)];
      while ([self getPosition] < IOSIntArray_Get(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->fdprivateOffsets_), i) + IOSIntArray_Get(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->fdprivateLengths_), i)) {
        
#line 1546
        jint p1 = [self getPosition];
        [self getDictItem];
        jint p2 = [self getPosition];
        
#line 1551
        if (JreStringEqualsEquals(self->key_, @"Subrs")) {
          (void) IOSObjectArray_SetAndConsume(nil_chk(fdSubrs), i, new_ComAowagieTextPdfCFFFont_DictOffsetItem_init());
          [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:IOSObjectArray_Get(fdSubrs, i)];
          [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) 19)];
        }
        else {
          
#line 1558
          [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_RangeItem_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_withInt_(self->buf_, p1, p2 - p1)];
        }
      }
    }
  }
}


#line 1572
void ComAowagieTextPdfCFFFontSubset_ReconstructPrivateSubrsWithInt_withComAowagieTextPdfCFFFont_IndexBaseItemArray_withComAowagieTextPdfCFFFont_OffsetItemArray_(ComAowagieTextPdfCFFFontSubset *self, jint Font, IOSObjectArray *fdPrivateBase, IOSObjectArray *fdSubrs) {
  
#line 1576
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->fdprivateLengths_))->size_; i++) {
    
#line 1580
    if (IOSObjectArray_Get(nil_chk(fdSubrs), i) != nil && IOSIntArray_Get(nil_chk(((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->PrivateSubrsOffset_), i) >= 0) {
      
#line 1582
      [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_SubrMarkerItem_initWithComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_IndexBaseItem_(IOSObjectArray_Get(fdSubrs, i), IOSObjectArray_Get(nil_chk(fdPrivateBase), i))];
      [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_RangeItem_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_withInt_(new_ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_(IOSObjectArray_Get(nil_chk(self->NewLSubrsIndex_), i)), 0, ((IOSByteArray *) nil_chk(IOSObjectArray_Get(nil_chk(self->NewLSubrsIndex_), i)))->size_)];
    }
  }
}


#line 1595
jint ComAowagieTextPdfCFFFontSubset_CalcSubrOffsetSizeWithInt_withInt_(ComAowagieTextPdfCFFFontSubset *self, jint Offset, jint Size) {
  
#line 1598
  jint OffsetSize = 0;
  
#line 1600
  [self seekWithInt:Offset];
  
#line 1602
  while ([self getPosition] < Offset + Size) {
    
#line 1604
    jint p1 = [self getPosition];
    [self getDictItem];
    jint p2 = [self getPosition];
    
#line 1608
    if (JreStringEqualsEquals(self->key_, @"Subrs")) {
      
#line 1610
      OffsetSize = p2 - p1 - 1;
    }
  }
  
#line 1615
  return OffsetSize;
}


#line 1626
void ComAowagieTextPdfCFFFontSubset_CreateNonCIDPrivateWithInt_withComAowagieTextPdfCFFFont_OffsetItem_(ComAowagieTextPdfCFFFontSubset *self, jint Font, ComAowagieTextPdfCFFFont_OffsetItem *Subr) {
  
#line 1629
  [self seekWithInt:((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->privateOffset_];
  while ([self getPosition] < ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(self->fonts_), Font)))->privateOffset_ + ((ComAowagieTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(self->fonts_, Font)))->privateLength_) {
    
#line 1632
    jint p1 = [self getPosition];
    [self getDictItem];
    jint p2 = [self getPosition];
    
#line 1637
    if (JreStringEqualsEquals(self->key_, @"Subrs")) {
      [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:Subr];
      [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_UInt8Item_initWithChar_((jchar) 19)];
    }
    else {
      
#line 1643
      [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_RangeItem_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_withInt_(self->buf_, p1, p2 - p1)];
    }
  }
}


#line 1655
void ComAowagieTextPdfCFFFontSubset_CreateNonCIDSubrsWithInt_withComAowagieTextPdfCFFFont_IndexBaseItem_withComAowagieTextPdfCFFFont_OffsetItem_(ComAowagieTextPdfCFFFontSubset *self, jint Font, ComAowagieTextPdfCFFFont_IndexBaseItem *PrivateBase, ComAowagieTextPdfCFFFont_OffsetItem *Subrs) {
  
#line 1658
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_SubrMarkerItem_initWithComAowagieTextPdfCFFFont_OffsetItem_withComAowagieTextPdfCFFFont_IndexBaseItem_(Subrs, PrivateBase)];
  
#line 1660
  [((JavaUtilLinkedList *) nil_chk(self->OutputList_)) addLastWithId:new_ComAowagieTextPdfCFFFont_RangeItem_initWithComAowagieTextPdfRandomAccessFileOrArray_withInt_withInt_(new_ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_(self->NewSubrsIndexNonCID_), 0, ((IOSByteArray *) nil_chk(self->NewSubrsIndexNonCID_))->size_)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfCFFFontSubset)
