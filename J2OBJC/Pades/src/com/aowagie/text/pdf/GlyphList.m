//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/GlyphList.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/pdf/BaseFont.h"
#include "com/aowagie/text/pdf/GlyphList.h"
#include "com/aowagie/text/pdf/PdfEncodings.h"
#include "com/aowagie/text/pdf/fonts/FontsResourceAnchor.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/StringTokenizer.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/GlyphList must be compiled with ARC (-fobjc-arc)"
#endif

inline JavaUtilHashMap *ComAowagieTextPdfGlyphList_get_unicode2names(void);
inline JavaUtilHashMap *ComAowagieTextPdfGlyphList_set_unicode2names(JavaUtilHashMap *value);
static JavaUtilHashMap *ComAowagieTextPdfGlyphList_unicode2names;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfGlyphList, unicode2names, JavaUtilHashMap *)

inline JavaUtilHashMap *ComAowagieTextPdfGlyphList_get_names2unicode(void);
inline JavaUtilHashMap *ComAowagieTextPdfGlyphList_set_names2unicode(JavaUtilHashMap *value);
static JavaUtilHashMap *ComAowagieTextPdfGlyphList_names2unicode;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfGlyphList, names2unicode, JavaUtilHashMap *)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/GlyphList.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfGlyphList)


#line 60
@implementation ComAowagieTextPdfGlyphList


#line 60
- (instancetype)initPackagePrivate {
  ComAowagieTextPdfGlyphList_initPackagePrivate(self);
  return self;
}


#line 121
+ (IOSIntArray *)nameToUnicodeWithNSString:(NSString *)name {
  return ComAowagieTextPdfGlyphList_nameToUnicodeWithNSString_(name);
}

+ (NSString *)unicodeToNameWithInt:(jint)num {
  return ComAowagieTextPdfGlyphList_unicodeToNameWithInt_(num);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(nameToUnicodeWithNSString:);
  methods[2].selector = @selector(unicodeToNameWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "unicode2names", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0xa, -1, 4, -1, -1 },
    { "names2unicode", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0xa, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "nameToUnicode", "LNSString;", "unicodeToName", "I", &ComAowagieTextPdfGlyphList_unicode2names, &ComAowagieTextPdfGlyphList_names2unicode };
  static const J2ObjcClassInfo _ComAowagieTextPdfGlyphList = { "GlyphList", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 3, 2, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfGlyphList;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfGlyphList class]) {
    ComAowagieTextPdfGlyphList_unicode2names = new_JavaUtilLinkedHashMap_init();
    ComAowagieTextPdfGlyphList_names2unicode = new_JavaUtilLinkedHashMap_init();
    {
      
#line 65
      JavaIoInputStream *is = nil;
      @try {
        is = ComAowagieTextPdfBaseFont_getResourceStreamWithNSString_withJavaLangClassLoader_(JreStrcat("$$", ComAowagieTextPdfBaseFont_RESOURCE_PATH, @"glyphlist.txt"), [[new_ComAowagieTextPdfFontsFontsResourceAnchor_init() java_getClass] getClassLoader]);
        if (is == nil) {
          NSString *msg = @"glyphlist.txt not found as resource. (It must exist as resource in the package com.aowagie.text.pdf.fonts)";
          @throw new_JavaLangException_initWithNSString_(msg);
        }
        IOSByteArray *buf = [IOSByteArray newArrayWithLength:1024];
        JavaIoByteArrayOutputStream *out = new_JavaIoByteArrayOutputStream_init();
        while (true) {
          jint size = [is readWithByteArray:buf];
          if (size < 0) {
            break;
          }
          [out writeWithByteArray:buf withInt:0 withInt:size];
        }
        [is close];
        is = nil;
        NSString *s = ComAowagieTextPdfPdfEncodings_convertToStringWithByteArray_withNSString_([out toByteArray], nil);
        JavaUtilStringTokenizer *tk = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(s, @"\x0d\n");
        while ([tk hasMoreTokens]) {
          NSString *line = [tk nextToken];
          if ([((NSString *) nil_chk(line)) java_hasPrefix:@"#"]) {
            continue;
          }
          JavaUtilStringTokenizer *t2 = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(line, @" ;\x0d\n\t\x0c");
          NSString *name = nil;
          NSString *hex = nil;
          if (![t2 hasMoreTokens]) {
            continue;
          }
          name = [t2 nextToken];
          if (![t2 hasMoreTokens]) {
            continue;
          }
          hex = [t2 nextToken];
          JavaLangInteger *num = JavaLangInteger_valueOfWithNSString_withInt_(hex, 16);
          (void) [((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfGlyphList_unicode2names)) putWithId:num withId:name];
          (void) [((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfGlyphList_names2unicode)) putWithId:name withId:[IOSIntArray newArrayWithInts:(jint[]){ [((JavaLangInteger *) nil_chk(num)) intValue] } count:1]];
        }
      }
      @catch (JavaLangException *e) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"glyphlist.txt loading error: ", [e getMessage])];
      }
      @finally {
        if (is != nil) {
          @try {
            [is close];
          }
          @catch (JavaLangException *e) {
          }
        }
      }
    }
    J2OBJC_SET_INITIALIZED(ComAowagieTextPdfGlyphList)
  }
}

@end


#line 60
void ComAowagieTextPdfGlyphList_initPackagePrivate(ComAowagieTextPdfGlyphList *self) {
  NSObject_init(self);
}


#line 60
ComAowagieTextPdfGlyphList *new_ComAowagieTextPdfGlyphList_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfGlyphList, initPackagePrivate)
}


#line 60
ComAowagieTextPdfGlyphList *create_ComAowagieTextPdfGlyphList_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfGlyphList, initPackagePrivate)
}


#line 121
IOSIntArray *ComAowagieTextPdfGlyphList_nameToUnicodeWithNSString_(NSString *name) {
  ComAowagieTextPdfGlyphList_initialize();
  
#line 122
  return (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfGlyphList_names2unicode)) getWithId:name], [IOSIntArray class]);
}


#line 125
NSString *ComAowagieTextPdfGlyphList_unicodeToNameWithInt_(jint num) {
  ComAowagieTextPdfGlyphList_initialize();
  
#line 126
  return (NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfGlyphList_unicode2names)) getWithId:new_JavaLangInteger_initWithInt_(num)], [NSString class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfGlyphList)
