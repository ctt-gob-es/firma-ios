//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfLine.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/Chunk.h"
#include "com/aowagie/text/Element.h"
#include "com/aowagie/text/Image.h"
#include "com/aowagie/text/ListItem.h"
#include "com/aowagie/text/pdf/BaseFont.h"
#include "com/aowagie/text/pdf/PdfChunk.h"
#include "com/aowagie/text/pdf/PdfFont.h"
#include "com/aowagie/text/pdf/PdfLine.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/PdfLine must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfPdfLine () {
 @public
  /*!
   @brief The arraylist containing the chunks.
   */
  JavaUtilArrayList *line_;
  /*!
   @brief The left indentation of the line.
   */
  jfloat left_;
  /*!
   @brief The width of the line.
   */
  jfloat width_;
  /*!
   @brief The alignment of the line.
   */
  jint alignment_;
  /*!
   @brief The listsymbol (if necessary).
   */
  ComAowagieTextChunk *listSymbol_;
  /*!
   @brief The listsymbol (if necessary).
   */
  jfloat symbolIndent_;
  /*!
   @brief <CODE>true</CODE> if the chunk splitting was caused by a newline.
   */
  jboolean newlineSplit_;
  /*!
   @brief The original width.
   */
  jfloat originalWidth_;
  jboolean isRTL_;
}

- (void)addToLineWithComAowagieTextPdfPdfChunk:(ComAowagieTextPdfPdfChunk *)chunk;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfLine, line_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfLine, listSymbol_, ComAowagieTextChunk *)

__attribute__((unused)) static void ComAowagieTextPdfPdfLine_addToLineWithComAowagieTextPdfPdfChunk_(ComAowagieTextPdfPdfLine *self, ComAowagieTextPdfPdfChunk *chunk);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfLine.java"


#line 64
@implementation ComAowagieTextPdfPdfLine


#line 108
- (instancetype)initPackagePrivateWithFloat:(jfloat)left
                                  withFloat:(jfloat)right
                                    withInt:(jint)alignment
                                  withFloat:(jfloat)height {
  ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withInt_withFloat_(self, left, right, alignment, height);
  return self;
}


#line 127
- (instancetype)initPackagePrivateWithFloat:(jfloat)left
                                  withFloat:(jfloat)originalWidth
                                  withFloat:(jfloat)remainingWidth
                                    withInt:(jint)alignment
                                withBoolean:(jboolean)newlineSplit
                      withJavaUtilArrayList:(JavaUtilArrayList *)line
                                withBoolean:(jboolean)isRTL {
  ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withFloat_withInt_withBoolean_withJavaUtilArrayList_withBoolean_(self, left, originalWidth, remainingWidth, alignment, newlineSplit, line, isRTL);
  return self;
}


#line 148
- (ComAowagieTextPdfPdfChunk *)addWithComAowagieTextPdfPdfChunk:(ComAowagieTextPdfPdfChunk *)chunk {
  
#line 150
  if (chunk == nil || [((NSString *) nil_chk([chunk description])) isEqual:@""]) {
    return nil;
  }
  
#line 155
  ComAowagieTextPdfPdfChunk *overflow = [chunk splitWithFloat:self->width_];
  self->newlineSplit_ = ([chunk isNewlineSplit] || overflow == nil);
  
#line 159
  if ([chunk isTab]) {
    IOSObjectArray *tab = (IOSObjectArray *) cast_check([chunk getAttributeWithNSString:ComAowagieTextChunk_TAB], IOSClass_arrayType(NSObject_class_(), 1));
    jfloat tabPosition = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(nil_chk(tab), 1), [JavaLangFloat class])))) floatValue];
    jboolean newline = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk(IOSObjectArray_Get(tab, 2), [JavaLangBoolean class])))) booleanValue];
    if (newline && tabPosition < self->originalWidth_ - self->width_) {
      return chunk;
    }
    self->width_ = self->originalWidth_ - tabPosition;
    [chunk adjustLeftWithFloat:self->left_];
    ComAowagieTextPdfPdfLine_addToLineWithComAowagieTextPdfPdfChunk_(self, chunk);
  }
  else
#line 171
  if ([chunk length] > 0 || [chunk isImage]) {
    if (overflow != nil) {
      [chunk trimLastSpace];
    }
    JreMinusAssignFloatF(&self->width_, [chunk width]);
    ComAowagieTextPdfPdfLine_addToLineWithComAowagieTextPdfPdfChunk_(self, chunk);
  }
  else
#line 180
  if ([((JavaUtilArrayList *) nil_chk(self->line_)) size] < 1) {
    chunk = overflow;
    overflow = [((ComAowagieTextPdfPdfChunk *) nil_chk(chunk)) truncateWithFloat:self->width_];
    JreMinusAssignFloatF(&self->width_, [chunk width]);
    if ([chunk length] > 0) {
      ComAowagieTextPdfPdfLine_addToLineWithComAowagieTextPdfPdfChunk_(self, chunk);
      return overflow;
    }
    else {
      
#line 190
      if (overflow != nil) {
        ComAowagieTextPdfPdfLine_addToLineWithComAowagieTextPdfPdfChunk_(self, overflow);
      }
      return nil;
    }
  }
  else {
    JrePlusAssignFloatF(&self->width_, [((ComAowagieTextPdfPdfChunk *) nil_chk(((ComAowagieTextPdfPdfChunk *) cast_chk([self->line_ getWithInt:[self->line_ size] - 1], [ComAowagieTextPdfPdfChunk class])))) trimLastSpace]);
  }
  return overflow;
}


#line 202
- (void)addToLineWithComAowagieTextPdfPdfChunk:(ComAowagieTextPdfPdfChunk *)chunk {
  ComAowagieTextPdfPdfLine_addToLineWithComAowagieTextPdfPdfChunk_(self, chunk);
}


#line 220
- (jint)size {
  return [((JavaUtilArrayList *) nil_chk(self->line_)) size];
}


#line 230
- (id<JavaUtilIterator>)iterator {
  return [((JavaUtilArrayList *) nil_chk(self->line_)) iterator];
}


#line 240
- (jfloat)height {
  return self->height_;
}


#line 250
- (jfloat)indentLeft {
  if (self->isRTL_) {
    switch (self->alignment_) {
      case ComAowagieTextElement_ALIGN_LEFT:
      return self->left_ + self->width_;
      case ComAowagieTextElement_ALIGN_CENTER:
      return self->left_ + self->width_ / 2.0f;
      default:
      return self->left_;
    }
  }
  else if ([self getSeparatorCount] == 0) {
    switch (self->alignment_) {
      case ComAowagieTextElement_ALIGN_RIGHT:
      return self->left_ + self->width_;
      case ComAowagieTextElement_ALIGN_CENTER:
      return self->left_ + self->width_ / 2.0f;
    }
  }
  return self->left_;
}


#line 278
- (jboolean)hasToBeJustified {
  return (self->alignment_ == ComAowagieTextElement_ALIGN_JUSTIFIED || self->alignment_ == ComAowagieTextElement_ALIGN_JUSTIFIED_ALL) && self->width_ != 0;
}


#line 289
- (void)resetAlignment {
  if (self->alignment_ == ComAowagieTextElement_ALIGN_JUSTIFIED) {
    self->alignment_ = ComAowagieTextElement_ALIGN_LEFT;
  }
}


#line 303
- (jfloat)widthLeft {
  return self->width_;
}


#line 313
- (jint)numberOfSpaces {
  NSString *string = [self description];
  jint length = [((NSString *) nil_chk(string)) java_length];
  jint numberOfSpaces = 0;
  for (jint i = 0; i < length; i++) {
    if ([string charAtWithInt:i] == ' ') {
      numberOfSpaces++;
    }
  }
  return numberOfSpaces;
}


#line 333
- (void)setListItemWithComAowagieTextListItem:(ComAowagieTextListItem *)listItem {
  self->listSymbol_ = [((ComAowagieTextListItem *) nil_chk(listItem)) getListSymbol];
  self->symbolIndent_ = [listItem getIndentationLeft];
}


#line 344
- (ComAowagieTextChunk *)listSymbol {
  return self->listSymbol_;
}


#line 354
- (jfloat)listIndent {
  return self->symbolIndent_;
}


#line 364
- (NSString *)description {
  
#line 366
  JavaLangStringBuffer *tmp = new_JavaLangStringBuffer_init();
  for (id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(self->line_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    (void) [tmp appendWithNSString:[((ComAowagieTextPdfPdfChunk *) nil_chk(((ComAowagieTextPdfPdfChunk *) cast_chk([i next], [ComAowagieTextPdfPdfChunk class])))) description]];
  }
  return [tmp description];
}


#line 378
- (jint)GetLineLengthUtf32 {
  jint total = 0;
  for (id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(self->line_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    total += [((ComAowagieTextPdfPdfChunk *) nil_chk(((ComAowagieTextPdfPdfChunk *) cast_chk([i next], [ComAowagieTextPdfPdfChunk class])))) lengthUtf32];
  }
  return total;
}


#line 390
- (jboolean)isNewlineSplit {
  return self->newlineSplit_ && self->alignment_ != ComAowagieTextElement_ALIGN_JUSTIFIED_ALL;
}


#line 398
- (jint)getLastStrokeChunk {
  jint lastIdx = [((JavaUtilArrayList *) nil_chk(self->line_)) size] - 1;
  for (; lastIdx >= 0; --lastIdx) {
    ComAowagieTextPdfPdfChunk *chunk = (ComAowagieTextPdfPdfChunk *) cast_chk([self->line_ getWithInt:lastIdx], [ComAowagieTextPdfPdfChunk class]);
    if ([((ComAowagieTextPdfPdfChunk *) nil_chk(chunk)) isStroked]) {
      break;
    }
  }
  return lastIdx;
}


#line 414
- (ComAowagieTextPdfPdfChunk *)getChunkWithInt:(jint)idx {
  if (idx < 0 || idx >= [((JavaUtilArrayList *) nil_chk(self->line_)) size]) {
    return nil;
  }
  return (ComAowagieTextPdfPdfChunk *) cast_chk([((JavaUtilArrayList *) nil_chk(self->line_)) getWithInt:idx], [ComAowagieTextPdfPdfChunk class]);
}


#line 425
- (jfloat)getOriginalWidth {
  return self->originalWidth_;
}


#line 454
- (IOSFloatArray *)getMaxSize {
  jfloat normal_leading = 0;
  jfloat image_leading = -10000;
  ComAowagieTextPdfPdfChunk *chunk;
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(self->line_)) size]; ++k) {
    chunk = (ComAowagieTextPdfPdfChunk *) cast_chk([self->line_ getWithInt:k], [ComAowagieTextPdfPdfChunk class]);
    if (![((ComAowagieTextPdfPdfChunk *) nil_chk(chunk)) isImage]) {
      normal_leading = JavaLangMath_maxWithFloat_withFloat_([((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) size], normal_leading);
    }
    else {
      image_leading = JavaLangMath_maxWithFloat_withFloat_([((ComAowagieTextImage *) nil_chk([chunk getImage])) getScaledHeight] + [chunk getImageOffsetY], image_leading);
    }
  }
  return [IOSFloatArray newArrayWithFloats:(jfloat[]){ normal_leading, image_leading } count:2];
}

- (jboolean)isRTL {
  return self->isRTL_;
}


#line 479
- (jint)getSeparatorCount {
  jint s = 0;
  ComAowagieTextPdfPdfChunk *ck;
  for (id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(self->line_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ck = (ComAowagieTextPdfPdfChunk *) cast_chk([i next], [ComAowagieTextPdfPdfChunk class]);
    if ([((ComAowagieTextPdfPdfChunk *) nil_chk(ck)) isTab]) {
      return 0;
    }
    if ([ck isHorizontalSeparator]) {
      s++;
    }
  }
  return s;
}


#line 501
- (jfloat)getAscender {
  jfloat ascender = 0;
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(self->line_)) size]; ++k) {
    ComAowagieTextPdfPdfChunk *ck = (ComAowagieTextPdfPdfChunk *) cast_chk([self->line_ getWithInt:k], [ComAowagieTextPdfPdfChunk class]);
    if ([((ComAowagieTextPdfPdfChunk *) nil_chk(ck)) isImage]) {
      ascender = JavaLangMath_maxWithFloat_withFloat_(ascender, [((ComAowagieTextImage *) nil_chk([ck getImage])) getScaledHeight] + [ck getImageOffsetY]);
    }
    else {
      
#line 508
      ComAowagieTextPdfPdfFont *font = [ck font];
      ascender = JavaLangMath_maxWithFloat_withFloat_(ascender, [((ComAowagieTextPdfBaseFont *) nil_chk([((ComAowagieTextPdfPdfFont *) nil_chk(font)) getFont])) getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_ASCENT withFloat:[font size]]);
    }
  }
  return ascender;
}


#line 520
- (jfloat)getDescender {
  jfloat descender = 0;
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(self->line_)) size]; ++k) {
    ComAowagieTextPdfPdfChunk *ck = (ComAowagieTextPdfPdfChunk *) cast_chk([self->line_ getWithInt:k], [ComAowagieTextPdfPdfChunk class]);
    if ([((ComAowagieTextPdfPdfChunk *) nil_chk(ck)) isImage]) {
      descender = JavaLangMath_minWithFloat_withFloat_(descender, [ck getImageOffsetY]);
    }
    else {
      
#line 527
      ComAowagieTextPdfPdfFont *font = [ck font];
      descender = JavaLangMath_minWithFloat_withFloat_(descender, [((ComAowagieTextPdfBaseFont *) nil_chk([((ComAowagieTextPdfPdfFont *) nil_chk(font)) getFont])) getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_DESCENT withFloat:[font size]]);
    }
  }
  return descender;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfChunk;", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextChunk;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfChunk;", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithFloat:withFloat:withInt:withFloat:);
  methods[1].selector = @selector(initPackagePrivateWithFloat:withFloat:withFloat:withInt:withBoolean:withJavaUtilArrayList:withBoolean:);
  methods[2].selector = @selector(addWithComAowagieTextPdfPdfChunk:);
  methods[3].selector = @selector(addToLineWithComAowagieTextPdfPdfChunk:);
  methods[4].selector = @selector(size);
  methods[5].selector = @selector(iterator);
  methods[6].selector = @selector(height);
  methods[7].selector = @selector(indentLeft);
  methods[8].selector = @selector(hasToBeJustified);
  methods[9].selector = @selector(resetAlignment);
  methods[10].selector = @selector(widthLeft);
  methods[11].selector = @selector(numberOfSpaces);
  methods[12].selector = @selector(setListItemWithComAowagieTextListItem:);
  methods[13].selector = @selector(listSymbol);
  methods[14].selector = @selector(listIndent);
  methods[15].selector = @selector(description);
  methods[16].selector = @selector(GetLineLengthUtf32);
  methods[17].selector = @selector(isNewlineSplit);
  methods[18].selector = @selector(getLastStrokeChunk);
  methods[19].selector = @selector(getChunkWithInt:);
  methods[20].selector = @selector(getOriginalWidth);
  methods[21].selector = @selector(getMaxSize);
  methods[22].selector = @selector(isRTL);
  methods[23].selector = @selector(getSeparatorCount);
  methods[24].selector = @selector(getAscender);
  methods[25].selector = @selector(getDescender);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "line_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "left_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "width_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "alignment_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "height_", "F", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "listSymbol_", "LComAowagieTextChunk;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "symbolIndent_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "newlineSplit_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "originalWidth_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isRTL_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "FFIF", "FFFIZLJavaUtilArrayList;Z", "add", "LComAowagieTextPdfPdfChunk;", "addToLine", "setListItem", "LComAowagieTextListItem;", "toString", "getChunk", "I" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfLine = { "PdfLine", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 26, 10, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfLine;
}

@end


#line 108
void ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withInt_withFloat_(ComAowagieTextPdfPdfLine *self, jfloat left, jfloat right, jint alignment, jfloat height) {
  NSObject_init(self);
  self->listSymbol_ =
#line 84
  nil;
  self->newlineSplit_ =
#line 90
  false;
  self->isRTL_ =
#line 95
  false;
  
#line 109
  self->left_ = left;
  self->width_ = right - left;
  self->originalWidth_ = self->width_;
  self->alignment_ = alignment;
  self->height_ = height;
  self->line_ = new_JavaUtilArrayList_init();
}


#line 108
ComAowagieTextPdfPdfLine *new_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withInt_withFloat_(jfloat left, jfloat right, jint alignment, jfloat height) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfLine, initPackagePrivateWithFloat_withFloat_withInt_withFloat_, left, right, alignment, height)
}


#line 108
ComAowagieTextPdfPdfLine *create_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withInt_withFloat_(jfloat left, jfloat right, jint alignment, jfloat height) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfLine, initPackagePrivateWithFloat_withFloat_withInt_withFloat_, left, right, alignment, height)
}


#line 127
void ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withFloat_withInt_withBoolean_withJavaUtilArrayList_withBoolean_(ComAowagieTextPdfPdfLine *self, jfloat left, jfloat originalWidth, jfloat remainingWidth, jint alignment, jboolean newlineSplit, JavaUtilArrayList *line, jboolean isRTL) {
  NSObject_init(self);
  self->listSymbol_ =
#line 84
  nil;
  self->newlineSplit_ =
#line 90
  false;
  self->isRTL_ =
#line 95
  false;
  
#line 128
  self->left_ = left;
  self->originalWidth_ = originalWidth;
  self->width_ = remainingWidth;
  self->alignment_ = alignment;
  self->line_ = line;
  self->newlineSplit_ = newlineSplit;
  self->isRTL_ = isRTL;
}


#line 127
ComAowagieTextPdfPdfLine *new_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withFloat_withInt_withBoolean_withJavaUtilArrayList_withBoolean_(jfloat left, jfloat originalWidth, jfloat remainingWidth, jint alignment, jboolean newlineSplit, JavaUtilArrayList *line, jboolean isRTL) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfLine, initPackagePrivateWithFloat_withFloat_withFloat_withInt_withBoolean_withJavaUtilArrayList_withBoolean_, left, originalWidth, remainingWidth, alignment, newlineSplit, line, isRTL)
}


#line 127
ComAowagieTextPdfPdfLine *create_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withFloat_withInt_withBoolean_withJavaUtilArrayList_withBoolean_(jfloat left, jfloat originalWidth, jfloat remainingWidth, jint alignment, jboolean newlineSplit, JavaUtilArrayList *line, jboolean isRTL) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfLine, initPackagePrivateWithFloat_withFloat_withFloat_withInt_withBoolean_withJavaUtilArrayList_withBoolean_, left, originalWidth, remainingWidth, alignment, newlineSplit, line, isRTL)
}


#line 202
void ComAowagieTextPdfPdfLine_addToLineWithComAowagieTextPdfPdfChunk_(ComAowagieTextPdfPdfLine *self, ComAowagieTextPdfPdfChunk *chunk) {
  if (((ComAowagieTextPdfPdfChunk *) nil_chk(chunk))->changeLeading_ && [chunk isImage]) {
    jfloat f = [((ComAowagieTextImage *) nil_chk([chunk getImage])) getScaledHeight] + [chunk getImageOffsetY] + [((ComAowagieTextImage *) nil_chk([chunk getImage])) getBorderWidthTop];
    if (f > self->height_) {
      self->height_ = f;
    }
  }
  [((JavaUtilArrayList *) nil_chk(self->line_)) addWithId:chunk];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfLine)
