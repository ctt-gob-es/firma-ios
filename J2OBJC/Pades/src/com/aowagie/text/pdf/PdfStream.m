//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/DocWriter.h"
#include "com/aowagie/text/Document.h"
#include "com/aowagie/text/ExceptionConverter.h"
#include "com/aowagie/text/pdf/OutputStreamCounter.h"
#include "com/aowagie/text/pdf/OutputStreamEncryption.h"
#include "com/aowagie/text/pdf/PdfArray.h"
#include "com/aowagie/text/pdf/PdfDictionary.h"
#include "com/aowagie/text/pdf/PdfEncryption.h"
#include "com/aowagie/text/pdf/PdfIndirectObject.h"
#include "com/aowagie/text/pdf/PdfIndirectReference.h"
#include "com/aowagie/text/pdf/PdfName.h"
#include "com/aowagie/text/pdf/PdfNumber.h"
#include "com/aowagie/text/pdf/PdfObject.h"
#include "com/aowagie/text/pdf/PdfReader.h"
#include "com/aowagie/text/pdf/PdfStream.h"
#include "com/aowagie/text/pdf/PdfWriter.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/zip/Deflater.h"
#include "java/util/zip/DeflaterOutputStream.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/PdfStream must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfPdfStream () {
 @public
  ComAowagieTextPdfPdfIndirectReference *ref_;
  ComAowagieTextPdfPdfWriter *writer_;
}

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfStream, ref_, ComAowagieTextPdfPdfIndirectReference *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfStream, writer_, ComAowagieTextPdfPdfWriter *)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfStream.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfPdfStream)

IOSByteArray *ComAowagieTextPdfPdfStream_STARTSTREAM;
IOSByteArray *ComAowagieTextPdfPdfStream_ENDSTREAM;


#line 84
@implementation ComAowagieTextPdfPdfStream


#line 129
- (instancetype)initWithByteArray:(IOSByteArray *)bytes {
  ComAowagieTextPdfPdfStream_initWithByteArray_(self, bytes);
  return self;
}


#line 151
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inputStream
           withComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer {
  ComAowagieTextPdfPdfStream_initWithJavaIoInputStream_withComAowagieTextPdfPdfWriter_(self, inputStream, writer);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 164
- (instancetype)init {
  ComAowagieTextPdfPdfStream_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 177
- (void)writeLength {
  if (self->inputStream_ == nil) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"writeLength() can only be called in a contructed PdfStream(InputStream,PdfWriter).");
  }
  if (self->inputStreamLength_ == -1) {
    @throw new_JavaIoIOException_initWithNSString_(@"writeLength() can only be called after output of the stream body.");
  }
  (void) [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addToBodyWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(self->inputStreamLength_) withComAowagieTextPdfPdfIndirectReference:self->ref_ withBoolean:false];
}


#line 191
- (jint)getRawLength {
  return self->rawLength_;
}


#line 202
- (void)flateCompressWithInt:(jint)compressionLevel {
  if (!JreLoadStatic(ComAowagieTextDocument, compress)) {
    return;
  }
  
#line 207
  if (self->compressed_) {
    return;
  }
  self->compressionLevel_ = compressionLevel;
  if (self->inputStream_ != nil) {
    self->compressed_ = true;
    return;
  }
  
#line 216
  ComAowagieTextPdfPdfObject *filter = ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_([self getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER)]);
  if (filter != nil) {
    if ([filter isName]) {
      if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, FLATEDECODE))) isEqual:filter]) {
        return;
      }
    }
    else if ([filter isArray]) {
      if ([((ComAowagieTextPdfPdfArray *) cast_chk(filter, [ComAowagieTextPdfPdfArray class])) containsWithComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, FLATEDECODE)]) {
        return;
      }
    }
    else {
      @throw new_JavaLangRuntimeException_initWithNSString_(@"Stream could not be compressed: filter is not a name or array.");
    }
  }
  @try {
    
#line 234
    JavaIoByteArrayOutputStream *stream = new_JavaIoByteArrayOutputStream_init();
    JavaUtilZipDeflater *deflater = new_JavaUtilZipDeflater_initWithInt_(compressionLevel);
    JavaUtilZipDeflaterOutputStream *zip = new_JavaUtilZipDeflaterOutputStream_initWithJavaIoOutputStream_withJavaUtilZipDeflater_(stream, deflater);
    if (self->streamBytes_ != nil) {
      [self->streamBytes_ writeToWithJavaIoOutputStream:zip];
    }
    else {
      
#line 240
      [zip writeWithByteArray:self->bytes_];
    }
    [zip close];
    [deflater end];
    
#line 245
    self->streamBytes_ = stream;
    self->bytes_ = nil;
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_([self->streamBytes_ size])];
    if (filter == nil) {
      [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, FLATEDECODE)];
    }
    else {
      ComAowagieTextPdfPdfArray *filters = new_ComAowagieTextPdfPdfArray_initWithComAowagieTextPdfPdfObject_(filter);
      [filters addWithComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, FLATEDECODE)];
      [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER) withComAowagieTextPdfPdfObject:filters];
    }
    self->compressed_ = true;
  }
  @catch (JavaIoIOException *ioe) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(ioe);
  }
}


#line 272
- (void)superToPdfWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
                          withJavaIoOutputStream:(JavaIoOutputStream *)os {
  
#line 273
  [super toPdfWithComAowagieTextPdfPdfWriter:writer withJavaIoOutputStream:os];
}

- (void)toPdfWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
                     withJavaIoOutputStream:(JavaIoOutputStream *)os {
  if (self->inputStream_ != nil && self->compressed_) {
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, FLATEDECODE)];
  }
  ComAowagieTextPdfPdfEncryption *crypto = nil;
  if (writer != nil) {
    crypto = [writer getEncryption];
  }
  if (crypto != nil) {
    ComAowagieTextPdfPdfObject *filter = [self getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER)];
    if (filter != nil) {
      if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, CRYPT))) isEqual:filter]) {
        crypto = nil;
      }
      else
#line 293
      if ([filter isArray]) {
        ComAowagieTextPdfPdfArray *a = (ComAowagieTextPdfPdfArray *) cast_chk(filter, [ComAowagieTextPdfPdfArray class]);
        if (![a isEmpty] && [JreLoadStatic(ComAowagieTextPdfPdfName, CRYPT) isEqual:[a getPdfObjectWithInt:0]]) {
          crypto = nil;
        }
      }
    }
  }
  ComAowagieTextPdfPdfObject *nn = [self getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH)];
  if (crypto != nil && nn != nil && [nn isNumber]) {
    jint sz = [((ComAowagieTextPdfPdfNumber *) cast_chk(nn, [ComAowagieTextPdfPdfNumber class])) intValue];
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_([crypto calculateStreamSizeWithInt:sz])];
    [self superToPdfWithComAowagieTextPdfPdfWriter:writer withJavaIoOutputStream:os];
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:nn];
  }
  else {
    
#line 308
    [self superToPdfWithComAowagieTextPdfPdfWriter:writer withJavaIoOutputStream:os];
  }
  [((JavaIoOutputStream *) nil_chk(os)) writeWithByteArray:ComAowagieTextPdfPdfStream_STARTSTREAM];
  if (self->inputStream_ != nil) {
    self->rawLength_ = 0;
    JavaUtilZipDeflaterOutputStream *def = nil;
    ComAowagieTextPdfOutputStreamCounter *osc = new_ComAowagieTextPdfOutputStreamCounter_initWithJavaIoOutputStream_(os);
    ComAowagieTextPdfOutputStreamEncryption *ose = nil;
    JavaIoOutputStream *fout = osc;
    if (crypto != nil && ![crypto isEmbeddedFilesOnly]) {
      fout = ose = [crypto getEncryptionStreamWithJavaIoOutputStream:fout];
    }
    JavaUtilZipDeflater *deflater = nil;
    if (self->compressed_) {
      deflater = new_JavaUtilZipDeflater_initWithInt_(self->compressionLevel_);
      fout = def = new_JavaUtilZipDeflaterOutputStream_initWithJavaIoOutputStream_withJavaUtilZipDeflater_withInt_(fout, deflater, (jint) 0x8000);
    }
    
#line 326
    IOSByteArray *buf = [IOSByteArray newArrayWithLength:4192];
    while (true) {
      jint n = [((JavaIoInputStream *) nil_chk(self->inputStream_)) readWithByteArray:buf];
      if (n <= 0) {
        break;
      }
      [fout writeWithByteArray:buf withInt:0 withInt:n];
      self->rawLength_ += n;
    }
    if (def != nil) {
      [def finish];
      [((JavaUtilZipDeflater *) nil_chk(deflater)) end];
    }
    if (ose != nil) {
      [ose finish];
    }
    self->inputStreamLength_ = [osc getCounter];
  }
  else {
    if (crypto != nil && ![crypto isEmbeddedFilesOnly]) {
      IOSByteArray *b;
      if (self->streamBytes_ != nil) {
        b = [crypto encryptByteArrayWithByteArray:[self->streamBytes_ toByteArray]];
      }
      else {
        b = [crypto encryptByteArrayWithByteArray:self->bytes_];
      }
      [os writeWithByteArray:b];
    }
    else {
      if (self->streamBytes_ != nil) {
        [self->streamBytes_ writeToWithJavaIoOutputStream:os];
      }
      else {
        
#line 359
        [os writeWithByteArray:self->bytes_];
      }
    }
  }
  [os writeWithByteArray:ComAowagieTextPdfPdfStream_ENDSTREAM];
}


#line 371
- (void)writeContentWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  if (self->streamBytes_ != nil) {
    [self->streamBytes_ writeToWithJavaIoOutputStream:os];
  }
  else
#line 374
  if (self->bytes_ != nil) {
    [((JavaIoOutputStream *) nil_chk(os)) writeWithByteArray:self->bytes_];
  }
}

- (NSString *)description {
  
#line 384
  if ([self getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TYPE)] == nil) {
    return @"Stream";
  }
  return JreStrcat("$@", @"Stream of type: ", [self getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TYPE)]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, 2, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(initWithJavaIoInputStream:withComAowagieTextPdfPdfWriter:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(writeLength);
  methods[4].selector = @selector(getRawLength);
  methods[5].selector = @selector(flateCompressWithInt:);
  methods[6].selector = @selector(superToPdfWithComAowagieTextPdfPdfWriter:withJavaIoOutputStream:);
  methods[7].selector = @selector(toPdfWithComAowagieTextPdfPdfWriter:withJavaIoOutputStream:);
  methods[8].selector = @selector(writeContentWithJavaIoOutputStream:);
  methods[9].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_COMPRESSION", "I", .constantValue.asInt = ComAowagieTextPdfPdfStream_DEFAULT_COMPRESSION, 0x19, -1, -1, -1, -1 },
    { "NO_COMPRESSION", "I", .constantValue.asInt = ComAowagieTextPdfPdfStream_NO_COMPRESSION, 0x19, -1, -1, -1, -1 },
    { "BEST_COMPRESSION", "I", .constantValue.asInt = ComAowagieTextPdfPdfStream_BEST_COMPRESSION, 0x19, -1, -1, -1, -1 },
    { "compressed_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "compressionLevel_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "streamBytes_", "LJavaIoByteArrayOutputStream;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "inputStream_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "ref_", "LComAowagieTextPdfPdfIndirectReference;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inputStreamLength_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "writer_", "LComAowagieTextPdfPdfWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rawLength_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "STARTSTREAM", "[B", .constantValue.asLong = 0, 0x18, -1, 11, -1, -1 },
    { "ENDSTREAM", "[B", .constantValue.asLong = 0, 0x18, -1, 12, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "LJavaIoInputStream;LComAowagieTextPdfPdfWriter;", "LJavaIoIOException;", "flateCompress", "I", "superToPdf", "LComAowagieTextPdfPdfWriter;LJavaIoOutputStream;", "toPdf", "writeContent", "LJavaIoOutputStream;", "toString", &ComAowagieTextPdfPdfStream_STARTSTREAM, &ComAowagieTextPdfPdfStream_ENDSTREAM };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfStream = { "PdfStream", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x1, 10, 13, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfStream;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfPdfStream class]) {
    ComAowagieTextPdfPdfStream_STARTSTREAM = ComAowagieTextDocWriter_getISOBytesWithNSString_(
#line 121
    @"stream\n");
    ComAowagieTextPdfPdfStream_ENDSTREAM = ComAowagieTextDocWriter_getISOBytesWithNSString_(
#line 122
    @"\nendstream");
    J2OBJC_SET_INITIALIZED(ComAowagieTextPdfPdfStream)
  }
}

@end


#line 129
void ComAowagieTextPdfPdfStream_initWithByteArray_(ComAowagieTextPdfPdfStream *self, IOSByteArray *bytes) {
  ComAowagieTextPdfPdfDictionary_init(self);
  self->compressed_ =
#line 107
  false;
  self->compressionLevel_ = ComAowagieTextPdfPdfStream_NO_COMPRESSION;
  self->streamBytes_ =
#line 114
  nil;
  self->inputStreamLength_ =
#line 117
  -1;
  
#line 131
  self->type_ = ComAowagieTextPdfPdfObject_STREAM;
  self->bytes_ = bytes;
  self->rawLength_ = ((IOSByteArray *) nil_chk(bytes))->size_;
  [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(bytes->size_)];
}


#line 129
ComAowagieTextPdfPdfStream *new_ComAowagieTextPdfPdfStream_initWithByteArray_(IOSByteArray *bytes) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfStream, initWithByteArray_, bytes)
}


#line 129
ComAowagieTextPdfPdfStream *create_ComAowagieTextPdfPdfStream_initWithByteArray_(IOSByteArray *bytes) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfStream, initWithByteArray_, bytes)
}


#line 151
void ComAowagieTextPdfPdfStream_initWithJavaIoInputStream_withComAowagieTextPdfPdfWriter_(ComAowagieTextPdfPdfStream *self, JavaIoInputStream *inputStream, ComAowagieTextPdfPdfWriter *writer) {
  ComAowagieTextPdfPdfDictionary_init(self);
  self->compressed_ =
#line 107
  false;
  self->compressionLevel_ = ComAowagieTextPdfPdfStream_NO_COMPRESSION;
  self->streamBytes_ =
#line 114
  nil;
  self->inputStreamLength_ =
#line 117
  -1;
  
#line 153
  self->type_ = ComAowagieTextPdfPdfObject_STREAM;
  self->inputStream_ = inputStream;
  self->writer_ = writer;
  self->ref_ = [((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) getPdfIndirectReference];
  [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:self->ref_];
}


#line 151
ComAowagieTextPdfPdfStream *new_ComAowagieTextPdfPdfStream_initWithJavaIoInputStream_withComAowagieTextPdfPdfWriter_(JavaIoInputStream *inputStream, ComAowagieTextPdfPdfWriter *writer) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfStream, initWithJavaIoInputStream_withComAowagieTextPdfPdfWriter_, inputStream, writer)
}


#line 151
ComAowagieTextPdfPdfStream *create_ComAowagieTextPdfPdfStream_initWithJavaIoInputStream_withComAowagieTextPdfPdfWriter_(JavaIoInputStream *inputStream, ComAowagieTextPdfPdfWriter *writer) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfStream, initWithJavaIoInputStream_withComAowagieTextPdfPdfWriter_, inputStream, writer)
}


#line 164
void ComAowagieTextPdfPdfStream_init(ComAowagieTextPdfPdfStream *self) {
  ComAowagieTextPdfPdfDictionary_init(self);
  self->compressed_ =
#line 107
  false;
  self->compressionLevel_ = ComAowagieTextPdfPdfStream_NO_COMPRESSION;
  self->streamBytes_ =
#line 114
  nil;
  self->inputStreamLength_ =
#line 117
  -1;
  
#line 166
  self->type_ = ComAowagieTextPdfPdfObject_STREAM;
}


#line 164
ComAowagieTextPdfPdfStream *new_ComAowagieTextPdfPdfStream_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfStream, init)
}


#line 164
ComAowagieTextPdfPdfStream *create_ComAowagieTextPdfPdfStream_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfStream, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfStream)
