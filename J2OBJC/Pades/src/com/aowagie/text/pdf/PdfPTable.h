//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfPTable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComAowagieTextPdfPdfPTable")
#ifdef RESTRICT_ComAowagieTextPdfPdfPTable
#define INCLUDE_ALL_ComAowagieTextPdfPdfPTable 0
#else
#define INCLUDE_ALL_ComAowagieTextPdfPdfPTable 1
#endif
#undef RESTRICT_ComAowagieTextPdfPdfPTable

#if !defined (ComAowagieTextPdfPdfPTable_) && (INCLUDE_ALL_ComAowagieTextPdfPdfPTable || defined(INCLUDE_ComAowagieTextPdfPdfPTable))
#define ComAowagieTextPdfPdfPTable_

#define RESTRICT_ComAowagieTextLargeElement 1
#define INCLUDE_ComAowagieTextLargeElement 1
#include "com/aowagie/text/LargeElement.h"

@class ComAowagieTextPdfPdfContentByte;
@class ComAowagieTextPdfPdfPCell;
@class ComAowagieTextPdfPdfPRow;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaUtilArrayList;
@protocol ComAowagieTextPdfPdfPTableEvent;

/*!
 @brief This is a table that can be put at an absolute position but can also
  be added to the document as the class <CODE>Table</CODE>.
 In the last case when crossing pages the table always break at full rows; if a
  row is bigger than the page it is dropped silently to avoid infinite loops. 
 <P>
  A PdfPTableEvent can be associated to the table to do custom drawing
  when the table is rendered.
 @author Paulo Soares (psoares@@consiste.pt)
 */
@interface ComAowagieTextPdfPdfPTable : NSObject < ComAowagieTextLargeElement >

#pragma mark Public

/*!
 @brief Constructs a <CODE>PdfPTable</CODE> with the relative column widths.
 @param relativeWidths the relative column widths
 */
- (instancetype)initWithFloatArray:(IOSFloatArray *)relativeWidths;

/*!
 @brief Constructs a <CODE>PdfPTable</CODE> with <CODE>numColumns</CODE> columns.
 @param numColumns the number of columns
 */
- (instancetype)initWithInt:(jint)numColumns;

/*!
 @brief Adds a cell element.
 @param cell the cell element
 */
- (void)addCellWithComAowagieTextPdfPdfPCell:(ComAowagieTextPdfPdfPCell *)cell;

/*!
 @since iText 2.0.8
 - seealso: com.aowagie.text.LargeElement#flushContent()
 */
- (void)flushContent;

/*!
 @brief Gets the absolute sizes of each column width.
 @return he absolute sizes of each column width
 */
- (IOSFloatArray *)getAbsoluteWidths;

/*!
 @brief Gets all the chunks in this element.
 @return an <CODE>ArrayList</CODE>
 */
- (JavaUtilArrayList *)getChunks;

/*!
 @brief Gets the default <CODE>PdfPCell</CODE> that will be used as
  reference for all the <CODE>addCell</CODE> methods except 
 <CODE>addCell(PdfPCell)</CODE>.
 @return default <CODE>PdfPCell</CODE>
 */
- (ComAowagieTextPdfPdfPCell *)getDefaultCell;

/*!
 @brief Gets the height of the rows that constitute the footer as defined by 
 <CODE>setFooterRows()</CODE>.
 @return the height of the rows that constitute the footer
 @since 2.1.1
 */
- (jfloat)getFooterHeight;

/*!
 @brief Gets the number of rows in the footer.
 @return the number of rows in the footer
 */
- (jint)getFooterRows;

/*!
 @brief Gets the height of the rows that constitute the header as defined by 
 <CODE>setHeaderRows()</CODE>.
 @return the height of the rows that constitute the header and footer
 */
- (jfloat)getHeaderHeight;

/*!
 @brief Gets the number of the rows that constitute the header.
 @return the number of the rows that constitute the header
 */
- (jint)getHeaderRows;

/*!
 @brief Gets the horizontal alignment of the table relative to the page.
 @return the horizontal alignment of the table relative to the page
 */
- (jint)getHorizontalAlignment;

/*!
 @brief Getter for property keepTogether
 @return true if it is tried to keep the table on one page;
  false otherwise
 */
- (jboolean)getKeepTogether;

/*!
 @brief Returns the number of columns.
 @return the number of columns.
 @since 2.1.1
 */
- (jint)getNumberOfColumns;

/*!
 @brief Gets an arraylist with all the rows in the table.
 @return an arraylist
 */
- (JavaUtilArrayList *)getRows;

/*!
 @brief Returns the run direction of the contents in the table.
 @return One of the following values:
  PdfWriter.RUN_DIRECTION_DEFAULT, PdfWriter.RUN_DIRECTION_NO_BIDI,
  PdfWriter.RUN_DIRECTION_LTR or PdfWriter.RUN_DIRECTION_RTL.
 */
- (jint)getRunDirection;

/*!
 @brief Gets the table event for this page.
 @return the table event for this page
 */
- (id<ComAowagieTextPdfPdfPTableEvent>)getTableEvent;

/*!
 @brief Gets the total height of the table.
 @return the total height of the table
 */
- (jfloat)getTotalHeight;

/*!
 @brief Gets the full width of the table.
 @return the full width of the table
 */
- (jfloat)getTotalWidth;

/*!
 @brief Gets the width percentage that the table will occupy in the page.
 @return the width percentage that the table will occupy in the page
 */
- (jfloat)getWidthPercentage;

/*!
 @since iText 2.0.8
 - seealso: com.aowagie.text.LargeElement#isComplete()
 */
- (jboolean)isComplete;

/*!
 - seealso: com.aowagie.text.Element#isContent()
 @since iText 2.0.8
 */
- (jboolean)isContent;

/*!
 @brief Gets the value of the last row extension.
 @return true if the last row will extend; false otherwise
 */
- (jboolean)isExtendLastRow;

/*!
 @brief Gets the header status inclusion in PdfPTableEvent.
 @return true if the headers are included; false otherwise
 */
- (jboolean)isHeadersInEvent;

/*!
 @brief Getter for property lockedWidth.
 @return Value of property lockedWidth.
 */
- (jboolean)isLockedWidth;

/*!
 - seealso: com.aowagie.text.Element#isNestable()
 @since iText 2.0.8
 */
- (jboolean)isNestable;

/*!
 @brief Tells you if the first header needs to be skipped
  (for instance if the header says "continued from the previous page").
 @return Value of property skipFirstHeader.
 */
- (jboolean)isSkipFirstHeader;

/*!
 @brief Tells you if the last footer needs to be skipped
  (for instance if the footer says "continued on the next page")
 @return Value of property skipLastFooter.
 @since 2.1.6
 */
- (jboolean)isSkipLastFooter;

/*!
 @brief Gets the property splitLate.
 @return the property splitLate
 */
- (jboolean)isSplitLate;

/*!
 @brief Gets the split value.
 @return true to split; false otherwise
 */
- (jboolean)isSplitRows;

/*!
 @since iText 2.0.8
 - seealso: com.aowagie.text.LargeElement#setComplete(boolean)
 */
- (void)setCompleteWithBoolean:(jboolean)complete;

/*!
 @brief When set the last row will be extended to fill all the remaining space
  to the bottom boundary.
 @param extendLastRow true to extend the last row; false otherwise
 */
- (void)setExtendLastRowWithBoolean:(jboolean)extendLastRow;

/*!
 @brief Sets the number of rows to be used for the footer.The number
  of footer rows are subtracted from the header rows.
 For
  example, for a table with two header rows and one footer row the
  code would be: 
 @code

  table.setHeaderRows(3);
  table.setFooterRows(1); 
  
@endcode
  Row 0 and 1 will be the header rows and row 2 will be the footer row.
 @param footerRows the number of rows to be used for the footer
 */
- (void)setFooterRowsWithInt:(jint)footerRows;

/*!
 @brief Sets the number of the top rows that constitute the header.
 This header has only meaning if the table is added to <CODE>Document</CODE>
  and the table crosses pages.
 @param headerRows the number of the top rows that constitute the header
 */
- (void)setHeaderRowsWithInt:(jint)headerRows;

/*!
 @brief When set the PdfPTableEvent will include the headers.
 @param headersInEvent true to include the headers; false otherwise
 */
- (void)setHeadersInEventWithBoolean:(jboolean)headersInEvent;

/*!
 @brief Sets the horizontal alignment of the table relative to the page.
 It only has meaning if the width percentage is less than 100%.
 @param horizontalAlignment the horizontal alignment of the table  relative to the page
 */
- (void)setHorizontalAlignmentWithInt:(jint)horizontalAlignment;

/*!
 @brief If true the table will be kept on one page if it fits, by forcing a
  new page if it doesn't fit on the current page.The default is to
  split the table over multiple pages.
 @param keepTogether whether to try to keep the table on one page
 */
- (void)setKeepTogetherWithBoolean:(jboolean)keepTogether;

/*!
 @brief Uses the value in <CODE>setTotalWidth()</CODE> in <CODE>Document.add()</CODE>.
 @param lockedWidth <CODE> true </CODE>  to use the value in  <CODE> setTotalWidth() </CODE>  in  <CODE> Document.add()
  </CODE>
 */
- (void)setLockedWidthWithBoolean:(jboolean)lockedWidth;

/*!
 @brief Sets the run direction of the contents of the table.
 @param runDirection One of the following values:  PdfWriter.RUN_DIRECTION_DEFAULT, PdfWriter.RUN_DIRECTION_NO_BIDI,
   PdfWriter.RUN_DIRECTION_LTR or PdfWriter.RUN_DIRECTION_RTL.
 */
- (void)setRunDirectionWithInt:(jint)runDirection;

/*!
 @brief Skips the printing of the first header.Used when printing
  tables in succession belonging to the same printed table aspect.
 @param skipFirstHeader New value of property skipFirstHeader.
 */
- (void)setSkipFirstHeaderWithBoolean:(jboolean)skipFirstHeader;

/*!
 @brief Skips the printing of the last footer.Used when printing
  tables in succession belonging to the same printed table aspect.
 @param skipLastFooter New value of property skipLastFooter.
 @since 2.1.6
 */
- (void)setSkipLastFooterWithBoolean:(jboolean)skipLastFooter;

/*!
 @brief Sets the spacing after this table.
 @param spacing the new spacing
 */
- (void)setSpacingAfterWithFloat:(jfloat)spacing;

/*!
 @brief Sets the spacing before this table.
 @param spacing the new spacing
 */
- (void)setSpacingBeforeWithFloat:(jfloat)spacing;

/*!
 @brief If true the row will only split if it's the first one in an empty page.
 It's true by default.
  It's only meaningful if setSplitRows(true).
 @param splitLate the property value
 */
- (void)setSplitLateWithBoolean:(jboolean)splitLate;

/*!
 @brief When set the rows that won't fit in the page will be split.
 Note that it takes at least twice the memory to handle a split table row
  than a normal table. <CODE>true</CODE> by default.
 @param splitRows true to split; false otherwise
 */
- (void)setSplitRowsWithBoolean:(jboolean)splitRows;

/*!
 @brief Sets the table event for this table.
 @param event the table event for this table
 */
- (void)setTableEventWithComAowagieTextPdfPdfPTableEvent:(id<ComAowagieTextPdfPdfPTableEvent>)event;

/*!
 @brief Sets the full width of the table.
 @param totalWidth the full width of the table.
 */
- (void)setTotalWidthWithFloat:(jfloat)totalWidth;

/*!
 @brief Sets the full width of the table from the absolute column width.
 @param columnWidth the absolute width of each column
 @throw DocumentExceptionif the number of widths is different than the number
  of columns
 */
- (void)setTotalWidthWithFloatArray:(IOSFloatArray *)columnWidth;

/*!
 @brief Sets the width percentage that the table will occupy in the page.
 @param widthPercentage the width percentage that the table will occupy in the page
 */
- (void)setWidthPercentageWithFloat:(jfloat)widthPercentage;

/*!
 @brief Sets the relative widths of the table.
 @param relativeWidths the relative widths of the table.
 @throw DocumentExceptionif the number of widths is different than the number
  of columns
 */
- (void)setWidthsWithFloatArray:(IOSFloatArray *)relativeWidths;

/*!
 @brief Sets the relative widths of the table.
 @param relativeWidths the relative widths of the table.
 @throw DocumentExceptionif the number of widths is different than the number
  of columns
 */
- (void)setWidthsWithIntArray:(IOSIntArray *)relativeWidths;

/*!
 @brief Gets the type of the text element.
 @return a type
 */
- (jint)type;

#pragma mark Protected

- (instancetype)init;

#pragma mark Package-Private

/*!
 @brief Constructs a copy of a <CODE>PdfPTable</CODE>.
 @param table the  <CODE> PdfPTable </CODE>  to be copied
 */
- (instancetype)initWithComAowagieTextPdfPdfPTable:(ComAowagieTextPdfPdfPTable *)table;

/*!
 @brief Gets a row with a given index
  (added by Jin-Hsia Yang).
 @param idx Index
 @return the row at position idx
 */
- (ComAowagieTextPdfPdfPRow *)getRowWithInt:(jint)idx;

/*!
 @brief Gets the height of a particular row.
 @param idx the row index (starts at 0)
 @return the height of a particular row
 */
- (jfloat)getRowHeightWithInt:(jint)idx;

/*!
 @brief Gets an arraylist with a selection of rows.
 @param start the first row in the selection
 @param end the first row that isn't part of the selection
 @return a selection of rows
 @since 2.1.6
 */
- (JavaUtilArrayList *)getRowsWithInt:(jint)start
                              withInt:(jint)end;

/*!
 @brief Checks if there are rows above belonging to a rowspan.
 @param currRow the current row to check
 @param currCol the current column to check
 @return true if there's a cell above that belongs to a rowspan
 @since 2.1.6
 */
- (jboolean)rowSpanAboveWithInt:(jint)currRow
                        withInt:(jint)currCol;

/*!
 @brief Makes a shallow copy of a table (format without content).
 @param table Table
 @return a shallow copy of the table
 */
+ (ComAowagieTextPdfPdfPTable *)shallowCopyWithComAowagieTextPdfPdfPTable:(ComAowagieTextPdfPdfPTable *)table;

/*!
 @brief Gets the number of rows in this table.
 @return the number of rows in this table
 */
- (jint)size;

/*!
 @brief Gets the spacing after this table.
 @return the spacing
 */
- (jfloat)spacingAfter;

/*!
 @brief Gets the spacing before this table.
 @return the spacing
 */
- (jfloat)spacingBefore;

/*!
 @brief Writes the selected rows to the document.
 @param rowStart the first row to be written, zero index
 @param rowEnd the last row to be written + 1. If it is -1 all the  rows to the end are written
 @param xPos the x write coordinate
 @param yPos the y write coordinate
 @param canvas the  <CODE> PdfContentByte </CODE>  where the rows will
   be written to
 @return the y coordinate position of the bottom of the last row
 */
- (jfloat)writeSelectedRowsWithInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComAowagieTextPdfPdfContentByte:(ComAowagieTextPdfPdfContentByte *)canvas;

/*!
 @brief Writes the selected rows to the document.
 <CODE>canvases</CODE> is obtained from <CODE>beginWritingRows()</CODE>.
 @param rowStart the first row to be written, zero index
 @param rowEnd the last row to be written + 1. If it is -1 all the  rows to the end are written
 @param xPos the x write coordinate
 @param yPos the y write coordinate
 @param canvases an array of 4  <CODE> PdfContentByte </CODE>  obtained from
    <CODE> beginWrittingRows() </CODE>
 @return the y coordinate position of the bottom of the last row
 - seealso: #beginWritingRows(com.aowagie.text.pdf.PdfContentByte)
 */
- (jfloat)writeSelectedRowsWithInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComAowagieTextPdfPdfContentByteArray:(IOSObjectArray *)canvases;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfPdfPTable)

/*!
 @brief The index of the duplicate <CODE>PdfContentByte</CODE> where the background will be drawn.
 */
inline jint ComAowagieTextPdfPdfPTable_get_BACKGROUNDCANVAS(void);
#define ComAowagieTextPdfPdfPTable_BACKGROUNDCANVAS 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfPTable, BACKGROUNDCANVAS, jint)

/*!
 @brief The index of the duplicate <CODE>PdfContentByte</CODE> where the border lines will be drawn.
 */
inline jint ComAowagieTextPdfPdfPTable_get_LINECANVAS(void);
#define ComAowagieTextPdfPdfPTable_LINECANVAS 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfPTable, LINECANVAS, jint)

/*!
 @brief The index of the duplicate <CODE>PdfContentByte</CODE> where the text will be drawn.
 */
inline jint ComAowagieTextPdfPdfPTable_get_TEXTCANVAS(void);
#define ComAowagieTextPdfPdfPTable_TEXTCANVAS 3
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfPTable, TEXTCANVAS, jint)

FOUNDATION_EXPORT void ComAowagieTextPdfPdfPTable_init(ComAowagieTextPdfPdfPTable *self);

FOUNDATION_EXPORT ComAowagieTextPdfPdfPTable *new_ComAowagieTextPdfPdfPTable_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfPTable *create_ComAowagieTextPdfPdfPTable_init(void);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfPTable_initWithFloatArray_(ComAowagieTextPdfPdfPTable *self, IOSFloatArray *relativeWidths);

FOUNDATION_EXPORT ComAowagieTextPdfPdfPTable *new_ComAowagieTextPdfPdfPTable_initWithFloatArray_(IOSFloatArray *relativeWidths) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfPTable *create_ComAowagieTextPdfPdfPTable_initWithFloatArray_(IOSFloatArray *relativeWidths);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfPTable_initWithInt_(ComAowagieTextPdfPdfPTable *self, jint numColumns);

FOUNDATION_EXPORT ComAowagieTextPdfPdfPTable *new_ComAowagieTextPdfPdfPTable_initWithInt_(jint numColumns) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfPTable *create_ComAowagieTextPdfPdfPTable_initWithInt_(jint numColumns);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfPTable_initWithComAowagieTextPdfPdfPTable_(ComAowagieTextPdfPdfPTable *self, ComAowagieTextPdfPdfPTable *table);

FOUNDATION_EXPORT ComAowagieTextPdfPdfPTable *new_ComAowagieTextPdfPdfPTable_initWithComAowagieTextPdfPdfPTable_(ComAowagieTextPdfPdfPTable *table) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfPTable *create_ComAowagieTextPdfPdfPTable_initWithComAowagieTextPdfPdfPTable_(ComAowagieTextPdfPdfPTable *table);

FOUNDATION_EXPORT ComAowagieTextPdfPdfPTable *ComAowagieTextPdfPdfPTable_shallowCopyWithComAowagieTextPdfPdfPTable_(ComAowagieTextPdfPdfPTable *table);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfPTable)

#endif

#pragma pop_macro("INCLUDE_ALL_ComAowagieTextPdfPdfPTable")
