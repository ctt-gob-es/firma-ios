//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfTable.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/Cell.h"
#include "com/aowagie/text/Element.h"
#include "com/aowagie/text/Rectangle.h"
#include "com/aowagie/text/Row.h"
#include "com/aowagie/text/Table.h"
#include "com/aowagie/text/pdf/PdfCell.h"
#include "com/aowagie/text/pdf/PdfTable.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/PdfTable must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfPdfTable () {
 @public
  /*!
   @brief this is the number of columns in the table.
   */
  jint columns_;
  /*!
   @brief this is the ArrayList with all the cell of the table header.
   */
  JavaUtilArrayList *headercells_;
  /*!
   @brief this is the ArrayList with all the cells in the table.
   */
  JavaUtilArrayList *cells_;
  /*!
   @brief Original table used to build this object
   */
  ComAowagieTextTable *table_;
  /*!
   @brief Cached column widths.
   */
  IOSFloatArray *positions_;
}

/*!
 @brief Updates the table row additions in the underlying table object
 */
- (void)updateRowAdditionsInternal;

/*!
 @brief Get the number of rows
 @return Rows
 */
- (jint)rows;

/*!
 @brief Returns the cellpadding of the table.
 @return the cellpadding
 */
- (jfloat)cellpadding;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfTable, headercells_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfTable, cells_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfTable, table_, ComAowagieTextTable *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfTable, positions_, IOSFloatArray *)

__attribute__((unused)) static void ComAowagieTextPdfPdfTable_updateRowAdditionsInternal(ComAowagieTextPdfPdfTable *self);

__attribute__((unused)) static jint ComAowagieTextPdfPdfTable_rows(ComAowagieTextPdfPdfTable *self);

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfTable_cellpadding(ComAowagieTextPdfPdfTable *self);

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfTable_cellspacing(ComAowagieTextPdfPdfTable *self);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfTable.java"


#line 70
@implementation ComAowagieTextPdfPdfTable


#line 101
- (instancetype)initPackagePrivateWithComAowagieTextTable:(ComAowagieTextTable *)table
                                                withFloat:(jfloat)left
                                                withFloat:(jfloat)right
                                                withFloat:(jfloat)top {
  ComAowagieTextPdfPdfTable_initPackagePrivateWithComAowagieTextTable_withFloat_withFloat_withFloat_(self, table, left, right, top);
  return self;
}


#line 131
- (void)updateRowAdditionsInternal {
  ComAowagieTextPdfPdfTable_updateRowAdditionsInternal(self);
}


#line 211
- (jint)rows {
  return ComAowagieTextPdfPdfTable_rows(self);
}


#line 216
- (jint)type {
  
#line 218
  return ComAowagieTextElement_TABLE;
}


#line 227
- (JavaUtilArrayList *)getHeaderCells {
  return self->headercells_;
}


#line 239
- (JavaUtilArrayList *)getCells {
  return self->cells_;
}


#line 249
- (jint)columns {
  return self->columns_;
}


#line 259
- (jfloat)cellpadding {
  return ComAowagieTextPdfPdfTable_cellpadding(self);
}


#line 269
- (jfloat)cellspacing {
  return ComAowagieTextPdfPdfTable_cellspacing(self);
}


#line 281
- (jboolean)hasToFitPageCells {
  return [((ComAowagieTextTable *) nil_chk(self->table_)) isCellsFitPage];
}


#line 290
- (jfloat)getOffset {
  return [((ComAowagieTextTable *) nil_chk(self->table_)) getOffset];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x12, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithComAowagieTextTable:withFloat:withFloat:withFloat:);
  methods[1].selector = @selector(updateRowAdditionsInternal);
  methods[2].selector = @selector(rows);
  methods[3].selector = @selector(type);
  methods[4].selector = @selector(getHeaderCells);
  methods[5].selector = @selector(getCells);
  methods[6].selector = @selector(columns);
  methods[7].selector = @selector(cellpadding);
  methods[8].selector = @selector(cellspacing);
  methods[9].selector = @selector(hasToFitPageCells);
  methods[10].selector = @selector(getOffset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "columns_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "headercells_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cells_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "table_", "LComAowagieTextTable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "positions_", "[F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextTable;FFF" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfTable = { "PdfTable", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 11, 5, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfTable;
}

@end


#line 101
void ComAowagieTextPdfPdfTable_initPackagePrivateWithComAowagieTextTable_withFloat_withFloat_withFloat_(ComAowagieTextPdfPdfTable *self, ComAowagieTextTable *table, jfloat left, jfloat right, jfloat top) {
  ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(self,
#line 103
  left, top, right, top);
  self->table_ = table;
  [((ComAowagieTextTable *) nil_chk(table)) complete];
  
#line 108
  [self cloneNonPositionParametersWithComAowagieTextRectangle:table];
  
#line 110
  self->columns_ = [table getColumns];
  self->positions_ = [table getWidthsWithFloat:left withFloat:right - left];
  
#line 114
  [self setLeftWithFloat:IOSFloatArray_Get(nil_chk(self->positions_), 0)];
  [self setRightWithFloat:IOSFloatArray_Get(self->positions_, self->positions_->size_ - 1)];
  
#line 117
  self->headercells_ = new_JavaUtilArrayList_init();
  self->cells_ = new_JavaUtilArrayList_init();
  
#line 120
  ComAowagieTextPdfPdfTable_updateRowAdditionsInternal(self);
}


#line 101
ComAowagieTextPdfPdfTable *new_ComAowagieTextPdfPdfTable_initPackagePrivateWithComAowagieTextTable_withFloat_withFloat_withFloat_(ComAowagieTextTable *table, jfloat left, jfloat right, jfloat top) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfTable, initPackagePrivateWithComAowagieTextTable_withFloat_withFloat_withFloat_, table, left, right, top)
}


#line 101
ComAowagieTextPdfPdfTable *create_ComAowagieTextPdfPdfTable_initPackagePrivateWithComAowagieTextTable_withFloat_withFloat_withFloat_(ComAowagieTextTable *table, jfloat left, jfloat right, jfloat top) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfTable, initPackagePrivateWithComAowagieTextTable_withFloat_withFloat_withFloat_, table, left, right, top)
}


#line 131
void ComAowagieTextPdfPdfTable_updateRowAdditionsInternal(ComAowagieTextPdfPdfTable *self) {
  
#line 133
  ComAowagieTextRow *row;
  jint prevRows = ComAowagieTextPdfPdfTable_rows(self);
  jint rowNumber = 0;
  jint groupNumber = 0;
  jboolean groupChange;
  jint firstDataRow = [((ComAowagieTextTable *) nil_chk(self->table_)) getLastHeaderRow] + 1;
  ComAowagieTextCell *cell;
  ComAowagieTextPdfPdfCell *currentCell;
  JavaUtilArrayList *newCells = new_JavaUtilArrayList_init();
  jint rows = [self->table_ size] + 1;
  IOSFloatArray *offsets = [IOSFloatArray newArrayWithLength:rows];
  for (jint i = 0; i < rows; i++) {
    *IOSFloatArray_GetRef(offsets, i) = [self getBottom];
  }
  
#line 149
  for (id<JavaUtilIterator> rowIterator = [self->table_ iterator]; [((id<JavaUtilIterator>) nil_chk(rowIterator)) hasNext]; ) {
    groupChange = false;
    row = (ComAowagieTextRow *) cast_chk([rowIterator next], [ComAowagieTextRow class]);
    if ([((ComAowagieTextRow *) nil_chk(row)) isEmpty]) {
      if (rowNumber < rows - 1 && IOSFloatArray_Get(offsets, rowNumber + 1) > IOSFloatArray_Get(offsets, rowNumber)) {
        *IOSFloatArray_GetRef(offsets, rowNumber + 1) = IOSFloatArray_Get(offsets, rowNumber);
      }
    }
    else {
      for (jint i = 0; i < [row getColumns]; i++) {
        cell = (ComAowagieTextCell *) cast_chk([row getCellWithInt:i], [ComAowagieTextCell class]);
        if (cell != nil) {
          currentCell = new_ComAowagieTextPdfPdfCell_initPackagePrivateWithComAowagieTextCell_withInt_withFloat_withFloat_withFloat_withFloat_withFloat_(cell, rowNumber + prevRows, IOSFloatArray_Get(nil_chk(self->positions_), i), IOSFloatArray_Get(self->positions_, i + [cell getColspan]), IOSFloatArray_Get(offsets, rowNumber), ComAowagieTextPdfPdfTable_cellspacing(self), ComAowagieTextPdfPdfTable_cellpadding(self));
          if (rowNumber < firstDataRow) {
            [currentCell setHeader];
            [((JavaUtilArrayList *) nil_chk(self->headercells_)) addWithId:currentCell];
            if (![self->table_ isNotAddedYet]) {
              continue;
            }
          }
          @try {
            if (IOSFloatArray_Get(offsets, rowNumber) - [currentCell getHeight] - ComAowagieTextPdfPdfTable_cellpadding(self) < IOSFloatArray_Get(offsets, rowNumber + [currentCell rowspan])) {
              *IOSFloatArray_GetRef(offsets, rowNumber + [currentCell rowspan]) = IOSFloatArray_Get(offsets, rowNumber) - [currentCell getHeight] - ComAowagieTextPdfPdfTable_cellpadding(self);
            }
          }
          @catch (JavaLangArrayIndexOutOfBoundsException *aioobe) {
            if (IOSFloatArray_Get(offsets, rowNumber) - [currentCell getHeight] < IOSFloatArray_Get(offsets, rows - 1)) {
              *IOSFloatArray_GetRef(offsets, rows - 1) = IOSFloatArray_Get(offsets, rowNumber) - [currentCell getHeight];
            }
          }
          [currentCell setGroupNumberWithInt:groupNumber];
          groupChange |= [cell getGroupChange];
          [newCells addWithId:currentCell];
        }
      }
    }
    rowNumber++;
    if (groupChange) {
      groupNumber++;
    }
  }
  
#line 192
  jint n = [newCells size];
  for (jint i = 0; i < n; i++) {
    currentCell = (ComAowagieTextPdfPdfCell *) cast_chk([newCells getWithInt:i], [ComAowagieTextPdfPdfCell class]);
    @try {
      [((ComAowagieTextPdfPdfCell *) nil_chk(currentCell)) setBottomWithFloat:IOSFloatArray_Get(offsets, [currentCell rownumber] - prevRows + [currentCell rowspan])];
    }
    @catch (JavaLangArrayIndexOutOfBoundsException *aioobe) {
      [currentCell setBottomWithFloat:IOSFloatArray_Get(offsets, rows - 1)];
    }
  }
  [((JavaUtilArrayList *) nil_chk(self->cells_)) addAllWithJavaUtilCollection:newCells];
  [self setBottomWithFloat:IOSFloatArray_Get(offsets, rows - 1)];
}


#line 211
jint ComAowagieTextPdfPdfTable_rows(ComAowagieTextPdfPdfTable *self) {
  return [((JavaUtilArrayList *) nil_chk(self->cells_)) isEmpty] ? 0 : [((ComAowagieTextPdfPdfCell *) nil_chk(((ComAowagieTextPdfPdfCell *) cast_chk([self->cells_ getWithInt:[self->cells_ size] - 1], [ComAowagieTextPdfPdfCell class])))) rownumber] + 1;
}


#line 259
jfloat ComAowagieTextPdfPdfTable_cellpadding(ComAowagieTextPdfPdfTable *self) {
  return [((ComAowagieTextTable *) nil_chk(self->table_)) getPadding];
}


#line 269
jfloat ComAowagieTextPdfPdfTable_cellspacing(ComAowagieTextPdfPdfTable *self) {
  return [((ComAowagieTextTable *) nil_chk(self->table_)) getSpacing];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfTable)
