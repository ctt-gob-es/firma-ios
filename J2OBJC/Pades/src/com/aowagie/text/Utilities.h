//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/Utilities.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComAowagieTextUtilities")
#ifdef RESTRICT_ComAowagieTextUtilities
#define INCLUDE_ALL_ComAowagieTextUtilities 0
#else
#define INCLUDE_ALL_ComAowagieTextUtilities 1
#endif
#undef RESTRICT_ComAowagieTextUtilities

#if !defined (ComAowagieTextUtilities_) && (INCLUDE_ALL_ComAowagieTextUtilities || defined(INCLUDE_ComAowagieTextUtilities))
#define ComAowagieTextUtilities_

@class IOSCharArray;
@class IOSObjectArray;
@class JavaIoInputStream;
@class JavaNetURL;
@class JavaUtilHashtable;
@class JavaUtilProperties;
@protocol JavaUtilSet;

/*!
 @brief A collection of convenience methods that were present in many different iText
  classes.
 */
@interface ComAowagieTextUtilities : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Utility method to extend an array.
 @param original the original array or 
  <CODE> null </CODE>
 @param item the item to be added to the array
 @return a new array with the item appended
 */
+ (IOSObjectArray *)addToArrayWithNSObjectArray2:(IOSObjectArray *)original
                               withNSObjectArray:(IOSObjectArray *)item;

/*!
 @brief Checks for a true/false value of a key in a Properties object.
 @param attributes Attributes
 @param key Key
 @return a true/false value of a key in a Properties object
 */
+ (jboolean)checkTrueOrFalseWithJavaUtilProperties:(JavaUtilProperties *)attributes
                                      withNSString:(NSString *)key;

/*!
 @brief Returns the code point of a UTF32 character corresponding with
  a high and a low surrogate value.
 @param highSurrogate the high surrogate value
 @param lowSurrogate the low surrogate value
 @return a code point value
 @since 2.1.2
 */
+ (jint)convertToUtf32WithChar:(jchar)highSurrogate
                      withChar:(jchar)lowSurrogate;

/*!
 @brief Converts a unicode character in a character array to a UTF 32 code point value.
 @param text a character array that has the unicode character(s)
 @param idx the index of the 'high' character
 @return the code point value
 @since 2.1.2
 */
+ (jint)convertToUtf32WithCharArray:(IOSCharArray *)text
                            withInt:(jint)idx;

/*!
 @brief Converts a unicode character in a String to a UTF32 code point value
 @param text a String that has the unicode character(s)
 @param idx the index of the 'high' character
 @return the codepoint value
 @since 2.1.2
 */
+ (jint)convertToUtf32WithNSString:(NSString *)text
                           withInt:(jint)idx;

/*!
 @brief Check if the value of a character belongs to a certain interval
  that indicates it's the higher part of a surrogate pair.
 @param c the character
 @return true if the character belongs to the interval
 @since 2.1.2
 */
+ (jboolean)isSurrogateHighWithChar:(jchar)c;

/*!
 @brief Checks if two subsequent characters in a character array are
  are the higher and the lower character in a surrogate
  pair (and therefore eligible for conversion to a UTF 32 character).
 @param text the character array with the high and low surrogate characters
 @param idx the index of the 'high' character in the pair
 @return true if the characters are surrogate pairs
 @since 2.1.2
 */
+ (jboolean)isSurrogatePairWithCharArray:(IOSCharArray *)text
                                 withInt:(jint)idx;

/*!
 @brief Checks if two subsequent characters in a String are
  are the higher and the lower character in a surrogate
  pair (and therefore eligible for conversion to a UTF 32 character).
 @param text the String with the high and low surrogate characters
 @param idx the index of the 'high' character in the pair
 @return true if the characters are surrogate pairs
 @since 2.1.2
 */
+ (jboolean)isSurrogatePairWithNSString:(NSString *)text
                                withInt:(jint)idx;

/*!
 @brief This method is an alternative for the <CODE>InputStream.skip()</CODE>
  -method that doesn't seem to work properly for big values of <CODE>size
  </CODE>.
 @param is the 
  <CODE> InputStream </CODE>
 @param size the number of bytes to skip
 @throw IOExceptionon error
 */
+ (void)skipWithJavaIoInputStream:(JavaIoInputStream *)is
                          withInt:(jint)size;

#pragma mark Package-Private

/*!
 @brief Gets the keys of a Hashtable
 @param table a Hashtable
 @return the keyset of a Hashtable (or an empty set if table is null)
 */
+ (id<JavaUtilSet>)getKeySetWithJavaUtilHashtable:(JavaUtilHashtable *)table;

/*!
 @brief This method makes a valid URL from a given filename.
 <P>
  This method makes the conversion of this library from the JAVA 2 platform
  to a JDK1.1.x-version easier.
 @param filename a given filename
 @return a valid URL
 @throw MalformedURLExceptionon error
 */
+ (JavaNetURL *)toURLWithNSString:(NSString *)filename;

/*!
 @brief Unescapes an URL.All the "%xx" are replaced by the 'xx' hex char value.
 @param src the url to unescape
 @return the unescaped value
 */
+ (NSString *)unEscapeURLWithNSString:(NSString *)src;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextUtilities)

FOUNDATION_EXPORT void ComAowagieTextUtilities_init(ComAowagieTextUtilities *self);

FOUNDATION_EXPORT ComAowagieTextUtilities *new_ComAowagieTextUtilities_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextUtilities *create_ComAowagieTextUtilities_init(void);

FOUNDATION_EXPORT id<JavaUtilSet> ComAowagieTextUtilities_getKeySetWithJavaUtilHashtable_(JavaUtilHashtable *table);

FOUNDATION_EXPORT IOSObjectArray *ComAowagieTextUtilities_addToArrayWithNSObjectArray2_withNSObjectArray_(IOSObjectArray *original, IOSObjectArray *item);

FOUNDATION_EXPORT jboolean ComAowagieTextUtilities_checkTrueOrFalseWithJavaUtilProperties_withNSString_(JavaUtilProperties *attributes, NSString *key);

FOUNDATION_EXPORT NSString *ComAowagieTextUtilities_unEscapeURLWithNSString_(NSString *src);

FOUNDATION_EXPORT JavaNetURL *ComAowagieTextUtilities_toURLWithNSString_(NSString *filename);

FOUNDATION_EXPORT void ComAowagieTextUtilities_skipWithJavaIoInputStream_withInt_(JavaIoInputStream *is, jint size);

FOUNDATION_EXPORT jboolean ComAowagieTextUtilities_isSurrogateHighWithChar_(jchar c);

FOUNDATION_EXPORT jboolean ComAowagieTextUtilities_isSurrogatePairWithNSString_withInt_(NSString *text, jint idx);

FOUNDATION_EXPORT jboolean ComAowagieTextUtilities_isSurrogatePairWithCharArray_withInt_(IOSCharArray *text, jint idx);

FOUNDATION_EXPORT jint ComAowagieTextUtilities_convertToUtf32WithChar_withChar_(jchar highSurrogate, jchar lowSurrogate);

FOUNDATION_EXPORT jint ComAowagieTextUtilities_convertToUtf32WithCharArray_withInt_(IOSCharArray *text, jint idx);

FOUNDATION_EXPORT jint ComAowagieTextUtilities_convertToUtf32WithNSString_withInt_(NSString *text, jint idx);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextUtilities)

#endif

#pragma pop_macro("INCLUDE_ALL_ComAowagieTextUtilities")
