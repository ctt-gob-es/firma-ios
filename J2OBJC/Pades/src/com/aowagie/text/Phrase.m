//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/Phrase.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/Chunk.h"
#include "com/aowagie/text/DocumentException.h"
#include "com/aowagie/text/Element.h"
#include "com/aowagie/text/ElementListener.h"
#include "com/aowagie/text/Font.h"
#include "com/aowagie/text/Phrase.h"
#include "com/aowagie/text/RtfElementInterface.h"
#include "com/aowagie/text/SpecialSymbol.h"
#include "com/aowagie/text/pdf/BaseFont.h"
#include "com/aowagie/text/pdf/HyphenationEvent.h"
#include "harmony/java/awt/Color.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Float.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"

static jboolean (*ComAowagieTextPhrase_super$_addWithId_)(id, SEL, id);

#if !__has_feature(objc_arc)
#error "com/aowagie/text/Phrase must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPhrase () {
 @public
  /*!
   @brief Null, unless the Phrase has to be hyphenated.
   @since 2.1.2
   */
  id<ComAowagieTextPdfHyphenationEvent> hyphenation_;
}

/*!
 @brief Adds a Chunk.
 <p>
  This method is a hack to solve a problem I had with phrases that were split between chunks
  in the wrong place.
 @param chunk a Chunk to add to the Phrase
 @return true if adding the Chunk succeeded
 */
- (jboolean)addChunkWithComAowagieTextChunk:(ComAowagieTextChunk *)chunk;

/*!
 @brief Constructs a Phrase that can be used in the static getInstance() method.
 @param dummy a dummy parameter
 */
- (instancetype)initWithBoolean:(jboolean)dummy;

/*!
 @brief Gets a special kind of Phrase that changes some characters into corresponding symbols.
 @param leading leading
 @param string string
 @param font font
 @return a newly constructed Phrase
 */
+ (ComAowagieTextPhrase *)getInstanceWithInt:(jint)leading
                                withNSString:(NSString *)string
                      withComAowagieTextFont:(ComAowagieTextFont *)font;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPhrase, hyphenation_, id<ComAowagieTextPdfHyphenationEvent>)

inline jlong ComAowagieTextPhrase_get_serialVersionUID(void);
#define ComAowagieTextPhrase_serialVersionUID 2643594602455068231LL
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPhrase, serialVersionUID, jlong)

__attribute__((unused)) static jboolean ComAowagieTextPhrase_addChunkWithComAowagieTextChunk_(ComAowagieTextPhrase *self, ComAowagieTextChunk *chunk);

__attribute__((unused)) static void ComAowagieTextPhrase_initWithBoolean_(ComAowagieTextPhrase *self, jboolean dummy);

__attribute__((unused)) static ComAowagieTextPhrase *new_ComAowagieTextPhrase_initWithBoolean_(jboolean dummy) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPhrase *create_ComAowagieTextPhrase_initWithBoolean_(jboolean dummy);

__attribute__((unused)) static ComAowagieTextPhrase *ComAowagieTextPhrase_getInstanceWithInt_withNSString_withComAowagieTextFont_(jint leading, NSString *string, ComAowagieTextFont *font);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/Phrase.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPhrase)


#line 85
@implementation ComAowagieTextPhrase

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 107
- (instancetype)init {
  ComAowagieTextPhrase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 115
- (instancetype)initWithComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase {
  ComAowagieTextPhrase_initWithComAowagieTextPhrase_(self, phrase);
  return self;
}


#line 128
- (instancetype)initWithFloat:(jfloat)leading {
  ComAowagieTextPhrase_initWithFloat_(self, leading);
  return self;
}


#line 138
- (instancetype)initWithComAowagieTextChunk:(ComAowagieTextChunk *)chunk {
  ComAowagieTextPhrase_initWithComAowagieTextChunk_(self, chunk);
  return self;
}


#line 149
- (instancetype)initWithNSString:(NSString *)string {
  ComAowagieTextPhrase_initWithNSString_(self, string);
  return self;
}


#line 159
- (instancetype)initWithNSString:(NSString *)string
          withComAowagieTextFont:(ComAowagieTextFont *)font {
  ComAowagieTextPhrase_initWithNSString_withComAowagieTextFont_(self, string, font);
  return self;
}


#line 171
- (instancetype)initWithFloat:(jfloat)leading
                 withNSString:(NSString *)string
       withComAowagieTextFont:(ComAowagieTextFont *)font {
  ComAowagieTextPhrase_initWithFloat_withNSString_withComAowagieTextFont_(self, leading, string, font);
  return self;
}


#line 189
- (jboolean)processWithComAowagieTextElementListener:(id<ComAowagieTextElementListener>)listener {
  @try {
    for (id<JavaUtilIterator> i = [self iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
      [((id<ComAowagieTextElementListener>) nil_chk(listener)) addWithComAowagieTextElement:(id<ComAowagieTextElement>) cast_check([i next], ComAowagieTextElement_class_())];
    }
    return true;
  }
  @catch (ComAowagieTextDocumentException *de) {
    return false;
  }
}


#line 206
- (jint)type {
  
#line 208
  return ComAowagieTextElement_PHRASE;
}


#line 216
- (JavaUtilArrayList *)getChunks {
  
#line 218
  JavaUtilArrayList *tmp = new_JavaUtilArrayList_init();
  for (id<JavaUtilIterator> i = [self iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    [tmp addAllWithJavaUtilCollection:[((id<ComAowagieTextElement>) nil_chk(((id<ComAowagieTextElement>) cast_check([i next], ComAowagieTextElement_class_())))) getChunks]];
  }
  return tmp;
}


#line 229
- (jboolean)isContent {
  
#line 231
  return true;
}


#line 238
- (jboolean)isNestable {
  
#line 240
  return true;
}


#line 253
- (void)addWithInt:(jint)index
            withId:(id)o {
  if (o == nil) {
    return;
  }
  @try {
    id<ComAowagieTextElement> element = (id<ComAowagieTextElement>) cast_check(o, ComAowagieTextElement_class_());
    if ([element type] == ComAowagieTextElement_CHUNK) {
      ComAowagieTextChunk *chunk = (ComAowagieTextChunk *) cast_chk(element, [ComAowagieTextChunk class]);
      if (![((ComAowagieTextFont *) nil_chk(self->font_)) isStandardFont]) {
        [chunk setFontWithComAowagieTextFont:[((ComAowagieTextFont *) nil_chk(self->font_)) differenceWithComAowagieTextFont:[chunk getFont]]];
      }
      if (self->hyphenation_ != nil && [chunk getHyphenation] == nil && ![chunk isEmpty]) {
        (void) [chunk setHyphenationWithComAowagieTextPdfHyphenationEvent:self->hyphenation_];
      }
      [super addWithInt:index withId:chunk];
    }
    else if ([element type] == ComAowagieTextElement_PHRASE ||
#line 271
    [element type] == ComAowagieTextElement_ANCHOR ||
#line 272
    [element type] == ComAowagieTextElement_ANNOTATION ||
#line 273
    [element type] == ComAowagieTextElement_TABLE ||
#line 274
    [element type] == ComAowagieTextElement_YMARK ||
#line 275
    [element type] == ComAowagieTextElement_MARKED) {
      [super addWithInt:index withId:element];
    }
    else {
      @throw new_JavaLangClassCastException_initWithNSString_(NSString_java_valueOfInt_([element type]));
    }
  }
  @catch (JavaLangClassCastException *cce) {
    @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("$$", @"Insertion of illegal Element: ", [cce getMessage]));
  }
}


#line 295
- (jboolean)addWithId:(id)o {
  
#line 297
  if (o == nil) {
    return false;
  }
  if ([o isKindOfClass:[NSString class]]) {
    return [super addWithId:new_ComAowagieTextChunk_initWithNSString_withComAowagieTextFont_((NSString *) o, self->font_)];
  }
  if ([ComAowagieTextRtfElementInterface_class_() isInstance:o]) {
    return [super addWithId:o];
  }
  @try {
    id<ComAowagieTextElement> element = (id<ComAowagieTextElement>) cast_check(o, ComAowagieTextElement_class_());
    {
      
#line 313
      ComAowagieTextPhrase *phrase;
      jboolean success;
      id<ComAowagieTextElement> e;
      
#line 308
      switch ([element type]) {
        case ComAowagieTextElement_CHUNK:
        return ComAowagieTextPhrase_addChunkWithComAowagieTextChunk_(self, (ComAowagieTextChunk *) cast_chk(o, [ComAowagieTextChunk class]));
        case ComAowagieTextElement_PHRASE:
        case ComAowagieTextElement_PARAGRAPH:
        phrase = (ComAowagieTextPhrase *) cast_chk(o, [ComAowagieTextPhrase class]);
        success = true;
        
#line 316
        for (id<JavaUtilIterator> i = [phrase iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
          e = (id<ComAowagieTextElement>) cast_check([i next], ComAowagieTextElement_class_());
          if ([e isKindOfClass:[ComAowagieTextChunk class]]) {
            success &= ComAowagieTextPhrase_addChunkWithComAowagieTextChunk_(self, (ComAowagieTextChunk *) e);
          }
          else {
            success &= [self addWithId:e];
          }
        }
        return success;
        case ComAowagieTextElement_MARKED:
        case ComAowagieTextElement_ANCHOR:
        case ComAowagieTextElement_ANNOTATION:
        case ComAowagieTextElement_TABLE:
        case ComAowagieTextElement_PTABLE:
        
#line 332
        case ComAowagieTextElement_LIST:
        case ComAowagieTextElement_YMARK:
        return [super addWithId:o];
        default:
        @throw new_JavaLangClassCastException_initWithNSString_(NSString_java_valueOfInt_([element type]));
      }
    }
  }
  @catch (
#line 339
  JavaLangClassCastException *cce) {
    @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("$$", @"Insertion of illegal Element: ", [cce getMessage]));
  }
}


#line 352
- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  
#line 354
  for (id<JavaUtilIterator> iterator = [((id<JavaUtilCollection>) nil_chk(collection)) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    [self addWithId:[iterator next]];
  }
  return true;
}


#line 368
- (jboolean)addChunkWithComAowagieTextChunk:(ComAowagieTextChunk *)chunk {
  return ComAowagieTextPhrase_addChunkWithComAowagieTextChunk_(self, chunk);
}


#line 402
- (void)addSpecialWithId:(id)object {
  [super addWithId:object];
}


#line 414
- (void)setLeadingWithFloat:(jfloat)leading {
  self->leading_ = leading;
}


#line 422
- (void)setFontWithComAowagieTextFont:(ComAowagieTextFont *)font {
  self->font_ = font;
}


#line 433
- (jfloat)getLeading {
  if (JavaLangFloat_isNaNWithFloat_(self->leading_) && self->font_ != nil) {
    return [self->font_ getCalculatedLeadingWithFloat:1.5f];
  }
  return self->leading_;
}


#line 445
- (jboolean)hasLeading {
  if (JavaLangFloat_isNaNWithFloat_(self->leading_)) {
    return false;
  }
  return true;
}


#line 457
- (ComAowagieTextFont *)getFont {
  return self->font_;
}


#line 466
- (NSString *)getContent {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  for (id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk([self getChunks])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    (void) [buf appendWithNSString:[nil_chk([i next]) description]];
  }
  return [buf description];
}


#line 480
- (jboolean)isEmpty {
  {
    
#line 486
    id<ComAowagieTextElement> element;
    
#line 482
    switch ([self size]) {
      case 0:
      return true;
      case 1:
      element = (id<ComAowagieTextElement>) cast_check([self getWithInt:0], ComAowagieTextElement_class_());
      if ([((id<ComAowagieTextElement>) nil_chk(element)) type] == ComAowagieTextElement_CHUNK && [((ComAowagieTextChunk *) cast_chk(element, [ComAowagieTextChunk class])) isEmpty]) {
        return true;
      }
      return false;
      default:
      return false;
    }
  }
}


#line 501
- (id<ComAowagieTextPdfHyphenationEvent>)getHyphenation {
  return self->hyphenation_;
}


#line 510
- (void)setHyphenationWithComAowagieTextPdfHyphenationEvent:(id<ComAowagieTextPdfHyphenationEvent>)hyphenation {
  self->hyphenation_ = hyphenation;
}


#line 521
- (instancetype)initWithBoolean:(jboolean)dummy {
  ComAowagieTextPhrase_initWithBoolean_(self, dummy);
  return self;
}


#line 531
+ (ComAowagieTextPhrase *)getInstanceWithInt:(jint)leading
                                withNSString:(NSString *)string
                      withComAowagieTextFont:(ComAowagieTextFont *)font {
  return ComAowagieTextPhrase_getInstanceWithInt_withNSString_withComAowagieTextFont_(leading, string, font);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 13, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextFont;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfHyphenationEvent;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 20, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPhrase;", 0x1a, 21, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithComAowagieTextPhrase:);
  methods[2].selector = @selector(initWithFloat:);
  methods[3].selector = @selector(initWithComAowagieTextChunk:);
  methods[4].selector = @selector(initWithNSString:);
  methods[5].selector = @selector(initWithNSString:withComAowagieTextFont:);
  methods[6].selector = @selector(initWithFloat:withNSString:withComAowagieTextFont:);
  methods[7].selector = @selector(processWithComAowagieTextElementListener:);
  methods[8].selector = @selector(type);
  methods[9].selector = @selector(getChunks);
  methods[10].selector = @selector(isContent);
  methods[11].selector = @selector(isNestable);
  methods[12].selector = @selector(addWithInt:withId:);
  methods[13].selector = @selector(addWithId:);
  methods[14].selector = @selector(addAllWithJavaUtilCollection:);
  methods[15].selector = @selector(addChunkWithComAowagieTextChunk:);
  methods[16].selector = @selector(addSpecialWithId:);
  methods[17].selector = @selector(setLeadingWithFloat:);
  methods[18].selector = @selector(setFontWithComAowagieTextFont:);
  methods[19].selector = @selector(getLeading);
  methods[20].selector = @selector(hasLeading);
  methods[21].selector = @selector(getFont);
  methods[22].selector = @selector(getContent);
  methods[23].selector = @selector(isEmpty);
  methods[24].selector = @selector(getHyphenation);
  methods[25].selector = @selector(setHyphenationWithComAowagieTextPdfHyphenationEvent:);
  methods[26].selector = @selector(initWithBoolean:);
  methods[27].selector = @selector(getInstanceWithInt:withNSString:withComAowagieTextFont:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComAowagieTextPhrase_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "leading_", "F", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "font_", "LComAowagieTextFont;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "hyphenation_", "LComAowagieTextPdfHyphenationEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPhrase;", "F", "LComAowagieTextChunk;", "LNSString;", "LNSString;LComAowagieTextFont;", "FLNSString;LComAowagieTextFont;", "process", "LComAowagieTextElementListener;", "add", "ILNSObject;", "LNSObject;", "addAll", "LJavaUtilCollection;", "addChunk", "addSpecial", "setLeading", "setFont", "LComAowagieTextFont;", "setHyphenation", "LComAowagieTextPdfHyphenationEvent;", "Z", "getInstance", "ILNSString;LComAowagieTextFont;" };
  static const J2ObjcClassInfo _ComAowagieTextPhrase = { "Phrase", "com.aowagie.text", ptrTable, methods, fields, 7, 0x1, 28, 4, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPhrase;
}

+ (void)initialize {
  if (self == [ComAowagieTextPhrase class]) {
    ComAowagieTextPhrase_super$_addWithId_ = (jboolean (*)(id, SEL, id))[JavaUtilArrayList instanceMethodForSelector:@selector(addWithId:)];
    J2OBJC_SET_INITIALIZED(ComAowagieTextPhrase)
  }
}

@end


#line 107
void ComAowagieTextPhrase_init(ComAowagieTextPhrase *self) {
  ComAowagieTextPhrase_initWithFloat_(self, 16);
}


#line 107
ComAowagieTextPhrase *new_ComAowagieTextPhrase_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPhrase, init)
}


#line 107
ComAowagieTextPhrase *create_ComAowagieTextPhrase_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPhrase, init)
}


#line 115
void ComAowagieTextPhrase_initWithComAowagieTextPhrase_(ComAowagieTextPhrase *self, ComAowagieTextPhrase *phrase) {
  JavaUtilArrayList_init(self);
  self->leading_ =
#line 92
  JavaLangFloat_NaN;
  self->hyphenation_ =
#line 100
  nil;
  
#line 117
  [self addAllWithJavaUtilCollection:phrase];
  self->leading_ = [((ComAowagieTextPhrase *) nil_chk(phrase)) getLeading];
  self->font_ = [phrase getFont];
  [self setHyphenationWithComAowagieTextPdfHyphenationEvent:[phrase getHyphenation]];
}


#line 115
ComAowagieTextPhrase *new_ComAowagieTextPhrase_initWithComAowagieTextPhrase_(ComAowagieTextPhrase *phrase) {
  J2OBJC_NEW_IMPL(ComAowagieTextPhrase, initWithComAowagieTextPhrase_, phrase)
}


#line 115
ComAowagieTextPhrase *create_ComAowagieTextPhrase_initWithComAowagieTextPhrase_(ComAowagieTextPhrase *phrase) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPhrase, initWithComAowagieTextPhrase_, phrase)
}


#line 128
void ComAowagieTextPhrase_initWithFloat_(ComAowagieTextPhrase *self, jfloat leading) {
  JavaUtilArrayList_init(self);
  self->leading_ =
#line 92
  JavaLangFloat_NaN;
  self->hyphenation_ =
#line 100
  nil;
  
#line 129
  self->leading_ = leading;
  self->font_ = new_ComAowagieTextFont_init();
}


#line 128
ComAowagieTextPhrase *new_ComAowagieTextPhrase_initWithFloat_(jfloat leading) {
  J2OBJC_NEW_IMPL(ComAowagieTextPhrase, initWithFloat_, leading)
}


#line 128
ComAowagieTextPhrase *create_ComAowagieTextPhrase_initWithFloat_(jfloat leading) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPhrase, initWithFloat_, leading)
}


#line 138
void ComAowagieTextPhrase_initWithComAowagieTextChunk_(ComAowagieTextPhrase *self, ComAowagieTextChunk *chunk) {
  JavaUtilArrayList_init(self);
  self->leading_ =
#line 92
  JavaLangFloat_NaN;
  self->hyphenation_ =
#line 100
  nil;
  
#line 139
  ComAowagieTextPhrase_super$_addWithId_(self, @selector(addWithId:), chunk);
  self->font_ = [((ComAowagieTextChunk *) nil_chk(chunk)) getFont];
  [self setHyphenationWithComAowagieTextPdfHyphenationEvent:[chunk getHyphenation]];
}


#line 138
ComAowagieTextPhrase *new_ComAowagieTextPhrase_initWithComAowagieTextChunk_(ComAowagieTextChunk *chunk) {
  J2OBJC_NEW_IMPL(ComAowagieTextPhrase, initWithComAowagieTextChunk_, chunk)
}


#line 138
ComAowagieTextPhrase *create_ComAowagieTextPhrase_initWithComAowagieTextChunk_(ComAowagieTextChunk *chunk) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPhrase, initWithComAowagieTextChunk_, chunk)
}


#line 149
void ComAowagieTextPhrase_initWithNSString_(ComAowagieTextPhrase *self, NSString *string) {
  ComAowagieTextPhrase_initWithFloat_withNSString_withComAowagieTextFont_(self, JavaLangFloat_NaN, string, new_ComAowagieTextFont_init());
}


#line 149
ComAowagieTextPhrase *new_ComAowagieTextPhrase_initWithNSString_(NSString *string) {
  J2OBJC_NEW_IMPL(ComAowagieTextPhrase, initWithNSString_, string)
}


#line 149
ComAowagieTextPhrase *create_ComAowagieTextPhrase_initWithNSString_(NSString *string) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPhrase, initWithNSString_, string)
}


#line 159
void ComAowagieTextPhrase_initWithNSString_withComAowagieTextFont_(ComAowagieTextPhrase *self, NSString *string, ComAowagieTextFont *font) {
  ComAowagieTextPhrase_initWithFloat_withNSString_withComAowagieTextFont_(self, JavaLangFloat_NaN, string, font);
}


#line 159
ComAowagieTextPhrase *new_ComAowagieTextPhrase_initWithNSString_withComAowagieTextFont_(NSString *string, ComAowagieTextFont *font) {
  J2OBJC_NEW_IMPL(ComAowagieTextPhrase, initWithNSString_withComAowagieTextFont_, string, font)
}


#line 159
ComAowagieTextPhrase *create_ComAowagieTextPhrase_initWithNSString_withComAowagieTextFont_(NSString *string, ComAowagieTextFont *font) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPhrase, initWithNSString_withComAowagieTextFont_, string, font)
}


#line 171
void ComAowagieTextPhrase_initWithFloat_withNSString_withComAowagieTextFont_(ComAowagieTextPhrase *self, jfloat leading, NSString *string, ComAowagieTextFont *font) {
  JavaUtilArrayList_init(self);
  self->leading_ =
#line 92
  JavaLangFloat_NaN;
  self->hyphenation_ =
#line 100
  nil;
  
#line 172
  self->leading_ = leading;
  self->font_ = font;
  
#line 175
  if (string != nil && [string java_length] != 0) {
    ComAowagieTextPhrase_super$_addWithId_(self, @selector(addWithId:), create_ComAowagieTextChunk_initWithNSString_withComAowagieTextFont_(string, font));
  }
}


#line 171
ComAowagieTextPhrase *new_ComAowagieTextPhrase_initWithFloat_withNSString_withComAowagieTextFont_(jfloat leading, NSString *string, ComAowagieTextFont *font) {
  J2OBJC_NEW_IMPL(ComAowagieTextPhrase, initWithFloat_withNSString_withComAowagieTextFont_, leading, string, font)
}


#line 171
ComAowagieTextPhrase *create_ComAowagieTextPhrase_initWithFloat_withNSString_withComAowagieTextFont_(jfloat leading, NSString *string, ComAowagieTextFont *font) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPhrase, initWithFloat_withNSString_withComAowagieTextFont_, leading, string, font)
}


#line 368
jboolean ComAowagieTextPhrase_addChunkWithComAowagieTextChunk_(ComAowagieTextPhrase *self, ComAowagieTextChunk *chunk) {
  ComAowagieTextFont *f = [((ComAowagieTextChunk *) nil_chk(chunk)) getFont];
  NSString *c = [chunk getContent];
  if (self->font_ != nil && ![self->font_ isStandardFont]) {
    f = [self->font_ differenceWithComAowagieTextFont:[chunk getFont]];
  }
  if ([self size] > 0 && ![chunk hasAttributes]) {
    @try {
      ComAowagieTextChunk *previous = (ComAowagieTextChunk *) cast_chk([self getWithInt:[self size] - 1], [ComAowagieTextChunk class]);
      if (![((ComAowagieTextChunk *) nil_chk(previous)) hasAttributes] &&
#line 378
      (f == nil ||
#line 379
      [f compareToWithId:[previous getFont]] == 0) &&
#line 380
      ![@"" isEqual:[((NSString *) nil_chk([previous getContent])) java_trim]] &&
#line 381
      ![@"" isEqual:[((NSString *) nil_chk(c)) java_trim]]) {
        (void) [previous appendWithNSString:c];
        return true;
      }
    }
    @catch (JavaLangClassCastException *cce) {
    }
  }
  ComAowagieTextChunk *newChunk = new_ComAowagieTextChunk_initWithNSString_withComAowagieTextFont_(c, f);
  [newChunk setAttributesWithJavaUtilHashMap:[chunk getAttributes]];
  if (self->hyphenation_ != nil && [newChunk getHyphenation] == nil && ![newChunk isEmpty]) {
    (void) [newChunk setHyphenationWithComAowagieTextPdfHyphenationEvent:self->hyphenation_];
  }
  return ComAowagieTextPhrase_super$_addWithId_(self, @selector(addWithId:), newChunk);
}


#line 521
void ComAowagieTextPhrase_initWithBoolean_(ComAowagieTextPhrase *self, jboolean dummy) {
  JavaUtilArrayList_init(self);
  self->leading_ =
#line 92
  JavaLangFloat_NaN;
  self->hyphenation_ =
#line 100
  nil;
}


#line 521
ComAowagieTextPhrase *new_ComAowagieTextPhrase_initWithBoolean_(jboolean dummy) {
  J2OBJC_NEW_IMPL(ComAowagieTextPhrase, initWithBoolean_, dummy)
}


#line 521
ComAowagieTextPhrase *create_ComAowagieTextPhrase_initWithBoolean_(jboolean dummy) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPhrase, initWithBoolean_, dummy)
}


#line 531
ComAowagieTextPhrase *ComAowagieTextPhrase_getInstanceWithInt_withNSString_withComAowagieTextFont_(jint leading, NSString *string, ComAowagieTextFont *font) {
  ComAowagieTextPhrase_initialize();
  
#line 532
  ComAowagieTextPhrase *p = new_ComAowagieTextPhrase_initWithBoolean_(true);
  [p setLeadingWithFloat:leading];
  p->font_ = font;
  if ([((ComAowagieTextFont *) nil_chk(font)) getFamily] != ComAowagieTextFont_SYMBOL && [font getFamily] != ComAowagieTextFont_ZAPFDINGBATS && [font getBaseFont] == nil) {
    jint index;
    while ((index = ComAowagieTextSpecialSymbol_indexWithNSString_(string)) > -1) {
      if (index > 0) {
        NSString *firstPart = [((NSString *) nil_chk(string)) java_substring:0 endIndex:index];
        [(p) addWithId:new_ComAowagieTextChunk_initWithNSString_withComAowagieTextFont_(firstPart, font)];
        string = [string java_substring:index];
      }
      ComAowagieTextFont *symbol = new_ComAowagieTextFont_initWithInt_withFloat_withInt_withHarmonyJavaAwtColor_(ComAowagieTextFont_SYMBOL, [font getSize], [font getStyle], [font getColor]);
      JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
      (void) [buf appendWithChar:ComAowagieTextSpecialSymbol_getCorrespondingSymbolWithChar_([((NSString *) nil_chk(string)) charAtWithInt:0])];
      string = [string java_substring:1];
      while (ComAowagieTextSpecialSymbol_indexWithNSString_(string) == 0) {
        (void) [buf appendWithChar:ComAowagieTextSpecialSymbol_getCorrespondingSymbolWithChar_([((NSString *) nil_chk(string)) charAtWithInt:0])];
        string = [string java_substring:1];
      }
      [(p) addWithId:new_ComAowagieTextChunk_initWithNSString_withComAowagieTextFont_([buf description], symbol)];
    }
  }
  if (string != nil && [string java_length] != 0) {
    [(p) addWithId:new_ComAowagieTextChunk_initWithNSString_withComAowagieTextFont_(string, font)];
  }
  return p;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPhrase)
