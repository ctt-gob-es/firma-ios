//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/Image.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComAowagieTextImage")
#ifdef RESTRICT_ComAowagieTextImage
#define INCLUDE_ALL_ComAowagieTextImage 0
#else
#define INCLUDE_ALL_ComAowagieTextImage 1
#endif
#undef RESTRICT_ComAowagieTextImage

#if !defined (ComAowagieTextImage_) && (INCLUDE_ALL_ComAowagieTextImage || defined(INCLUDE_ComAowagieTextImage))
#define ComAowagieTextImage_

#define RESTRICT_ComAowagieTextRectangle 1
#define INCLUDE_ComAowagieTextRectangle 1
#include "com/aowagie/text/Rectangle.h"

@class ComAowagieTextAnnotation;
@class ComAowagieTextPdfPRIndirectReference;
@class ComAowagieTextPdfPdfDictionary;
@class ComAowagieTextPdfPdfIndirectReference;
@class ComAowagieTextPdfPdfTemplate;
@class HarmonyJavaAwtColorICC_Profile;
@class IOSByteArray;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaLangLong;
@class JavaNetURL;
@protocol ComAowagieTextPdfPdfOCG;

/*!
 @brief An <CODE>Image</CODE> is the representation of a graphic element (JPEG, PNG
  or GIF) that has to be inserted into the document
 - seealso: Element
 - seealso: Rectangle
 */
@interface ComAowagieTextImage : ComAowagieTextRectangle {
 @public
  /*!
   @brief The image type.
   */
  jint type_;
  /*!
   @brief The URL of the image.
   */
  JavaNetURL *url_;
  /*!
   @brief The raw data of the image.
   */
  IOSByteArray *rawData_;
  /*!
   @brief The bits per component of the raw image.It also flags a CCITT image.
   */
  jint bpc_;
  /*!
   @brief The template to be treated as an image.
   */
  IOSObjectArray *template__;
  /*!
   @brief The alignment of the Image.
   */
  jint alignment_;
  /*!
   @brief Text that can be shown instead of the image.
   */
  NSString *alt_;
  /*!
   @brief This is the absolute X-position of the image.
   */
  jfloat absoluteX_;
  /*!
   @brief This is the absolute Y-position of the image.
   */
  jfloat absoluteY_;
  /*!
   @brief This is the width of the image without rotation.
   */
  jfloat plainWidth_;
  /*!
   @brief This is the width of the image without rotation.
   */
  jfloat plainHeight_;
  /*!
   @brief This is the scaled width of the image taking rotation into account.
   */
  jfloat scaledWidth_;
  /*!
   @brief This is the original height of the image taking rotation into account.
   */
  jfloat scaledHeight_;
  /*!
   @brief The compression level of the content streams.
   @since 2.1.3
   */
  jint compressionLevel_;
  /*!
   @brief an iText attributed unique id for this image.
   */
  JavaLangLong *mySerialId_;
  /*!
   @brief This is the rotation of the image in radians.
   */
  jfloat rotationRadians_;
  /*!
   @brief the indentation to the left.
   */
  jfloat indentationLeft_;
  /*!
   @brief the indentation to the right.
   */
  jfloat indentationRight_;
  /*!
   @brief The spacing before the image.
   */
  jfloat spacingBefore_;
  /*!
   @brief The spacing after the image.
   */
  jfloat spacingAfter_;
  /*!
   @brief if the annotation is not null the image will be clickable.
   */
  ComAowagieTextAnnotation *annotation_;
  /*!
   @brief Optional Content layer to which we want this Image to belong.
   */
  id<ComAowagieTextPdfPdfOCG> layer_;
  /*!
   @brief Holds value of property interpolation.
   */
  jboolean interpolation_;
  /*!
   @brief Holds value of property originalType.
   */
  jint originalType_;
  /*!
   @brief Holds value of property originalData.
   */
  IOSByteArray *originalData_;
  /*!
   @brief Holds value of property deflated.
   */
  jboolean deflated_;
  /*!
   @brief Holds value of property dpiX.
   */
  jint dpiX_;
  /*!
   @brief Holds value of property dpiY.
   */
  jint dpiY_;
  /*!
   @brief this is the colorspace of a jpeg-image.
   */
  jint colorspace_;
  /*!
   @brief Image color inversion
   */
  jboolean invert_;
  /*!
   @brief ICC Profile attached
   */
  HarmonyJavaAwtColorICC_Profile *profile_;
  /*!
   @brief Is this image a mask?
   */
  jboolean mask_;
  /*!
   @brief The image that serves as a mask for this image.
   */
  ComAowagieTextImage *imageMask_;
  /*!
   @brief this is the transparency information of the raw image
   */
  IOSIntArray *transparency_;
}

#pragma mark Public

/*!
 @brief Constructs an <CODE>Image</CODE> -object, using an <VAR>url </VAR>.
 @param url the 
  <CODE> URL </CODE>  where the image can be found.
 */
- (instancetype)initWithJavaNetURL:(JavaNetURL *)url;

/*!
 @brief Returns the absolute X position.
 @return a position
 */
- (jfloat)getAbsoluteX;

/*!
 @brief Returns the absolute Y position.
 @return a position
 */
- (jfloat)getAbsoluteY;

/*!
 @brief Getter for the dictionary with additional information.
 @return a PdfDictionary with additional information.
 */
- (ComAowagieTextPdfPdfDictionary *)getAdditional;

/*!
 @brief Gets the alignment for the image.
 @return a value
 */
- (jint)getAlignment;

/*!
 @brief Gets the alternative text for the image.
 @return a <CODE>String</CODE>
 */
- (NSString *)getAlt;

/*!
 @brief Gets the annotation.
 @return the annotation that is linked to this image
 */
- (ComAowagieTextAnnotation *)getAnnotation;

/*!
 @brief Gets the bpc for the image.
 <P>
  Remark: this only makes sense for Images of the type <CODE>RawImage
  </CODE>.
 @return a bpc value
 */
- (jint)getBpc;

/*!
 @brief Gets the colorspace for the image.
 <P>
  Remark: this only makes sense for Images of the type <CODE>Jpeg</CODE>.
 @return a colorspace value
 */
- (jint)getColorspace;

/*!
 @brief Returns the compression level used for images written as a compressed stream.
 @return the compression level (0 = best speed, 9 = best compression, -1 is default)
 @since 2.1.3
 */
- (jint)getCompressionLevel;

/*!
 @brief Getter for property directReference.
 @return Value of property directReference.
 */
- (ComAowagieTextPdfPdfIndirectReference *)getDirectReference;

/*!
 @brief Gets the dots-per-inch in the X direction.Returns 0 if not available.
 @return the dots-per-inch in the X direction
 */
- (jint)getDpiX;

/*!
 @brief Gets the dots-per-inch in the Y direction.Returns 0 if not available.
 @return the dots-per-inch in the Y direction
 */
- (jint)getDpiY;

/*!
 @brief Gets the images ICC profile.
 @return the ICC profile
 */
- (HarmonyJavaAwtColorICC_Profile *)getICCProfile;

/*!
 @brief Gets the explicit masking.
 @return the explicit masking
 */
- (ComAowagieTextImage *)getImageMask;

/*!
 @brief Gets the current image rotation in radians.
 @return the current image rotation in radians
 */
- (jfloat)getImageRotation;

/*!
 @brief Gets the left indentation.
 @return the left indentation
 */
- (jfloat)getIndentationLeft;

/*!
 @brief Gets the right indentation.
 @return the right indentation
 */
- (jfloat)getIndentationRight;

/*!
 @brief Getter for property initialRotation.
 @return Value of property initialRotation.
 */
- (jfloat)getInitialRotation;

/*!
 @brief gets an instance of an Image
 @param imgb raw image date
 @return an Image object
 @throw BadElementExceptionon error
 @throw MalformedURLExceptionon error
 @throw IOExceptionon error
 */
+ (ComAowagieTextImage *)getInstanceWithByteArray:(IOSByteArray *)imgb;

/*!
 @brief gets an instance of an Image
 @param image an Image object
 @return a new Image object
 */
+ (ComAowagieTextImage *)getInstanceWithComAowagieTextImage:(ComAowagieTextImage *)image;

/*!
 @brief Creates an Image with CCITT G3 or G4 compression.It assumes that the
  data bytes are already compressed.
 @param width the exact width of the image
 @param height the exact height of the image
 @param reverseBits reverses the bits in 
  <code> data </code> . Bit 0 is swapped             with bit 7 and so on
 @param typeCCITT the type of compression in 
  <code> data </code> . It can be             CCITTG4, CCITTG31D, CCITTG32D
 @param parameters parameters associated with this stream. Possible values are
              CCITT_BLACKIS1, CCITT_ENCODEDBYTEALIGN, CCITT_ENDOFLINE and
              CCITT_ENDOFBLOCK or a combination of them
 @param data the image data
 @return an Image object
 @throw BadElementException
 on error
 */
+ (ComAowagieTextImage *)getInstanceWithInt:(jint)width
                                    withInt:(jint)height
                                withBoolean:(jboolean)reverseBits
                                    withInt:(jint)typeCCITT
                                    withInt:(jint)parameters
                              withByteArray:(IOSByteArray *)data;

/*!
 @brief Creates an Image with CCITT G3 or G4 compression.It assumes that the
  data bytes are already compressed.
 @param width the exact width of the image
 @param height the exact height of the image
 @param reverseBits reverses the bits in 
  <code> data </code> . Bit 0 is swapped             with bit 7 and so on
 @param typeCCITT the type of compression in 
  <code> data </code> . It can be             CCITTG4, CCITTG31D, CCITTG32D
 @param parameters parameters associated with this stream. Possible values are
              CCITT_BLACKIS1, CCITT_ENCODEDBYTEALIGN, CCITT_ENDOFLINE and
              CCITT_ENDOFBLOCK or a combination of them
 @param data the image data
 @param transparency transparency information in the Mask format of the image
              dictionary
 @return an Image object
 @throw BadElementException
 on error
 */
+ (ComAowagieTextImage *)getInstanceWithInt:(jint)width
                                    withInt:(jint)height
                                withBoolean:(jboolean)reverseBits
                                    withInt:(jint)typeCCITT
                                    withInt:(jint)parameters
                              withByteArray:(IOSByteArray *)data
                               withIntArray:(IOSIntArray *)transparency;

/*!
 @brief Creates a JBIG2 Image.
 @param width the width of the image
 @param height the height of the image
 @param data the raw image data
 @param globals JBIG2 globals
 @return Image
 @since 2.1.5
 */
+ (ComAowagieTextImage *)getInstanceWithInt:(jint)width
                                    withInt:(jint)height
                              withByteArray:(IOSByteArray *)data
                              withByteArray:(IOSByteArray *)globals;

/*!
 @brief Gets an instance of an Image in raw mode.
 @param width the width of the image in pixels
 @param height the height of the image in pixels
 @param components 1,3 or 4 for GrayScale, RGB and CMYK
 @param data the image data
 @param bpc bits per component
 @return an object of type <CODE>ImgRaw</CODE>
 @throw BadElementException
 on error
 */
+ (ComAowagieTextImage *)getInstanceWithInt:(jint)width
                                    withInt:(jint)height
                                    withInt:(jint)components
                                    withInt:(jint)bpc
                              withByteArray:(IOSByteArray *)data;

/*!
 @brief Gets an instance of an Image in raw mode.
 @param width the width of the image in pixels
 @param height the height of the image in pixels
 @param components 1,3 or 4 for GrayScale, RGB and CMYK
 @param data the image data
 @param bpc bits per component
 @param transparency transparency information in the Mask format of the image
              dictionary
 @return an object of type <CODE>ImgRaw</CODE>
 @throw BadElementException
 on error
 */
+ (ComAowagieTextImage *)getInstanceWithInt:(jint)width
                                    withInt:(jint)height
                                    withInt:(jint)components
                                    withInt:(jint)bpc
                              withByteArray:(IOSByteArray *)data
                               withIntArray:(IOSIntArray *)transparency;

/*!
 @brief gets an instance of an Image
 @param template_ a PdfTemplate that has to be wrapped in an Image object
 @return an Image object
 @throw BadElementExceptionon error
 */
+ (ComAowagieTextImage *)getInstanceWithComAowagieTextPdfPdfTemplate:(ComAowagieTextPdfPdfTemplate *)template_;

/*!
 @brief Reuses an existing image.
 @param ref the reference to the image dictionary
 @throw BadElementExceptionon error
 @return the image
 */
+ (ComAowagieTextImage *)getInstanceWithComAowagieTextPdfPRIndirectReference:(ComAowagieTextPdfPRIndirectReference *)ref;

/*!
 @brief Gets an instance of an Image.
 @param filename a filename
 @return an object of type <CODE>Gif</CODE>,<CODE>Jpeg</CODE> or
          <CODE>Png</CODE>
 @throw BadElementExceptionon error
 @throw MalformedURLExceptionon error
 @throw IOExceptionon error
 */
+ (ComAowagieTextImage *)getInstanceWithNSString:(NSString *)filename;

/*!
 @brief Gets an instance of an Image.
 @param url an URL
 @return an Image
 @throw BadElementExceptionon error
 @throw MalformedURLExceptionon error
 @throw IOExceptionon error
 */
+ (ComAowagieTextImage *)getInstanceWithJavaNetURL:(JavaNetURL *)url;

/*!
 @brief Gets the layer this image belongs to.
 @return the layer this image belongs to or <code>null</code> for no
          layer defined
 */
- (id<ComAowagieTextPdfPdfOCG>)getLayer;

/*!
 @brief Returns a serial id for the Image (reuse the same image more than once)
 @return a serialId
 */
- (JavaLangLong *)getMySerialId;

/*!
 @brief Getter for property originalData.
 @return Value of property originalData.
 */
- (IOSByteArray *)getOriginalData;

/*!
 @brief Getter for property originalType.
 @return Value of property originalType.
 */
- (jint)getOriginalType;

/*!
 @brief Gets the plain height of the image.
 @return a value
 */
- (jfloat)getPlainHeight;

/*!
 @brief Gets the plain width of the image.
 @return a value
 */
- (jfloat)getPlainWidth;

/*!
 @brief Gets the raw data for the image.
 <P>
  Remark: this only makes sense for Images of the type <CODE>RawImage
  </CODE>.
 @return the raw data
 */
- (IOSByteArray *)getRawData;

/*!
 @brief Gets the scaled height of the image.
 @return a value
 */
- (jfloat)getScaledHeight;

/*!
 @brief Gets the scaled width of the image.
 @return a value
 */
- (jfloat)getScaledWidth;

/*!
 @brief Gets the spacing before this image.
 @return the spacing
 */
- (jfloat)getSpacingAfter;

/*!
 @brief Gets the spacing before this image.
 @return the spacing
 */
- (jfloat)getSpacingBefore;

/*!
 @brief Gets the template to be used as an image.
 <P>
  Remark: this only makes sense for Images of the type <CODE>ImgTemplate
  </CODE>.
 @return the template
 */
- (ComAowagieTextPdfPdfTemplate *)getTemplateData;

/*!
 @brief Returns the transparency.
 @return the transparency values
 */
- (IOSIntArray *)getTransparency;

/*!
 @brief Gets the <CODE>String</CODE> -representation of the reference to the
  image.
 @return a <CODE>String</CODE>
 */
- (JavaNetURL *)getUrl;

/*!
 @brief Getter for property widthPercentage.
 @return Value of property widthPercentage.
 */
- (jfloat)getWidthPercentage;

/*!
 @brief Gets the X/Y pixel dimensionless aspect ratio.
 @return the X/Y pixel dimensionless aspect ratio
 */
- (jfloat)getXYRatio;

/*!
 @brief Checks if the <CODE>Images</CODE> has to be added at an absolute X
  position.
 @return a boolean
 */
- (jboolean)hasAbsoluteX;

/*!
 @brief Checks if the <CODE>Images</CODE> has to be added at an absolute
  position.
 @return a boolean
 */
- (jboolean)hasAbsoluteY;

/*!
 @brief Checks is the image has an ICC profile.
 @return the ICC profile or <CODE>null</CODE>
 */
- (jboolean)hasICCProfile;

/*!
 @brief Getter for property deflated.
 @return Value of property deflated.
 */
- (jboolean)isDeflated;

/*!
 @brief Returns <CODE>true</CODE> if the image is a <CODE>ImgRaw</CODE>
  -object.
 @return a <CODE>boolean</CODE>
 */
- (jboolean)isImgRaw;

/*!
 @brief Returns <CODE>true</CODE> if the image is an <CODE>ImgTemplate</CODE>
  -object.
 @return a <CODE>boolean</CODE>
 */
- (jboolean)isImgTemplate;

/*!
 @brief Getter for property interpolation.
 @return Value of property interpolation.
 */
- (jboolean)isInterpolation;

/*!
 @brief Getter for the inverted value
 @return true if the image is inverted
 */
- (jboolean)isInverted;

/*!
 @brief Returns <CODE>true</CODE> if the image is a <CODE>Jpeg</CODE>
  -object.
 @return a <CODE>boolean</CODE>
 */
- (jboolean)isJpeg;

/*!
 @brief Returns <CODE>true</CODE> if this <CODE>Image</CODE> is a mask.
 @return <CODE>true</CODE> if this <CODE>Image</CODE> is a mask
 */
- (jboolean)isMask;

/*!
 @brief Returns <CODE>true</CODE> if this <CODE>Image</CODE> has the
  requisites to be a mask.
 @return <CODE>true</CODE> if this <CODE>Image</CODE> can be a mask
 */
- (jboolean)isMaskCandidate;

/*!
 - seealso: com.aowagie.text.Element#isNestable()
 @since iText 2.0.8
 */
- (jboolean)isNestable;

/*!
 @brief Getter for property smask.
 @return Value of property smask.
 */
- (jboolean)isSmask;

/*!
 @brief Make this <CODE>Image</CODE> a mask.
 @throw DocumentException
 if this <CODE>Image</CODE> can not be a mask
 */
- (void)makeMask;

/*!
 @brief Returns the transformation matrix of the image.
 @return an array [AX, AY, BX, BY, CX, CY, DX, DY]
 */
- (IOSFloatArray *)matrix;

/*!
 @brief Scale the image to an absolute width and an absolute height.
 @param newWidth the new width
 @param newHeight the new height
 */
- (void)scaleAbsoluteWithFloat:(jfloat)newWidth
                     withFloat:(jfloat)newHeight;

/*!
 @brief Scale the image to an absolute height.
 @param newHeight the new height
 */
- (void)scaleAbsoluteHeightWithFloat:(jfloat)newHeight;

/*!
 @brief Scale the image to an absolute width.
 @param newWidth the new width
 */
- (void)scaleAbsoluteWidthWithFloat:(jfloat)newWidth;

/*!
 @brief Scale the image to a certain percentage.
 @param percent the scaling percentage
 */
- (void)scalePercentWithFloat:(jfloat)percent;

/*!
 @brief Scale the width and height of an image to a certain percentage.
 @param percentX the scaling percentage of the width
 @param percentY the scaling percentage of the height
 */
- (void)scalePercentWithFloat:(jfloat)percentX
                    withFloat:(jfloat)percentY;

/*!
 @brief Scales the image so that it fits a certain width and height.
 @param fitWidth the width to fit
 @param fitHeight the height to fit
 */
- (void)scaleToFitWithFloat:(jfloat)fitWidth
                  withFloat:(jfloat)fitHeight;

/*!
 @brief Sets the absolute position of the <CODE>Image</CODE>.
 @param absoluteX x
 @param absoluteY y
 */
- (void)setAbsolutePositionWithFloat:(jfloat)absoluteX
                           withFloat:(jfloat)absoluteY;

/*!
 @brief Sets the /Colorspace key.
 @param additional a PdfDictionary with additional information.
 */
- (void)setAdditionalWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)additional;

/*!
 @brief Sets the alignment for the image.
 @param alignment the alignment
 */
- (void)setAlignmentWithInt:(jint)alignment;

/*!
 @brief Sets the alternative information for the image.
 @param alt the alternative information
 */
- (void)setAltWithNSString:(NSString *)alt;

/*!
 @brief Sets the annotation of this Image.
 @param annotation the annotation
 */
- (void)setAnnotationWithComAowagieTextAnnotation:(ComAowagieTextAnnotation *)annotation;

/*!
 @brief Sets the compression level to be used if the image is written as a compressed stream.
 @param compressionLevel a value between 0 (best speed) and 9 (best compression)
 @since 2.1.3
 */
- (void)setCompressionLevelWithInt:(jint)compressionLevel;

/*!
 @brief Setter for property deflated.
 @param deflated New value of property deflated.
 */
- (void)setDeflatedWithBoolean:(jboolean)deflated;

/*!
 @brief Setter for property directReference.
 @param directReference New value of property directReference.
 */
- (void)setDirectReferenceWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)directReference;

/*!
 @brief Sets the dots per inch value
 @param dpiX dpi for x coordinates
 @param dpiY dpi for y coordinates
 */
- (void)setDpiWithInt:(jint)dpiX
              withInt:(jint)dpiY;

/*!
 @brief Sets the explicit masking.
 @param mask the mask to be applied
 @throw DocumentException
 on error
 */
- (void)setImageMaskWithComAowagieTextImage:(ComAowagieTextImage *)mask;

/*!
 @brief Sets the left indentation.
 @param f identation
 */
- (void)setIndentationLeftWithFloat:(jfloat)f;

/*!
 @brief Sets the right indentation.
 @param f identation
 */
- (void)setIndentationRightWithFloat:(jfloat)f;

/*!
 @brief Some image formats, like TIFF may present the images rotated that have
  to be compensated.
 @param initialRotation New value of property initialRotation.
 */
- (void)setInitialRotationWithFloat:(jfloat)initialRotation;

/*!
 @brief Sets the image interpolation.Image interpolation attempts to produce a
  smooth transition between adjacent sample values.
 @param interpolation New value of property interpolation.
 */
- (void)setInterpolationWithBoolean:(jboolean)interpolation;

/*!
 @brief Sets inverted true or false
 @param invert true or false
 */
- (void)setInvertedWithBoolean:(jboolean)invert;

/*!
 @brief Sets the layer this image belongs to.
 @param layer the layer this image belongs to
 */
- (void)setLayerWithComAowagieTextPdfPdfOCG:(id<ComAowagieTextPdfPdfOCG>)layer;

/*!
 @brief Setter for property originalData.
 @param originalData New value of property originalData.
 */
- (void)setOriginalDataWithByteArray:(IOSByteArray *)originalData;

/*!
 @brief Setter for property originalType.
 @param originalType New value of property originalType.
 */
- (void)setOriginalTypeWithInt:(jint)originalType;

/*!
 @brief Sets the rotation of the image in radians.
 @param r rotation in radians
 */
- (void)setRotationWithFloat:(jfloat)r;

/*!
 @brief Sets the rotation of the image in degrees.
 @param deg rotation in degrees
 */
- (void)setRotationDegreesWithFloat:(jfloat)deg;

/*!
 @brief Setter for property smask.
 @param smask New value of property smask.
 */
- (void)setSmaskWithBoolean:(jboolean)smask;

/*!
 @brief Sets the spacing after this image.
 @param spacing the new spacing
 */
- (void)setSpacingAfterWithFloat:(jfloat)spacing;

/*!
 @brief Sets the spacing before this image.
 @param spacing the new spacing
 */
- (void)setSpacingBeforeWithFloat:(jfloat)spacing;

/*!
 @brief Sets data from a PdfTemplate
 @param template_ the template with the content
 */
- (void)setTemplateDataWithComAowagieTextPdfPdfTemplate:(ComAowagieTextPdfPdfTemplate *)template_;

/*!
 @brief Sets the transparency values
 @param transparency the transparency values
 */
- (void)setTransparencyWithIntArray:(IOSIntArray *)transparency;

/*!
 @brief Sets the url of the image
 @param url the url of the image
 */
- (void)setUrlWithJavaNetURL:(JavaNetURL *)url;

/*!
 @brief Setter for property widthPercentage.
 @param widthPercentage New value of property widthPercentage.
 */
- (void)setWidthPercentageWithFloat:(jfloat)widthPercentage;

/*!
 @brief Sets the X/Y pixel dimensionless aspect ratio.
 @param XYRatio the X/Y pixel dimensionless aspect ratio
 */
- (void)setXYRatioWithFloat:(jfloat)XYRatio;

/*!
 @brief Tags this image with an ICC profile.
 @param profile the profile
 */
- (void)tagICCWithHarmonyJavaAwtColorICC_Profile:(HarmonyJavaAwtColorICC_Profile *)profile;

/*!
 @brief Returns the type.
 @return a type
 */
- (jint)type;

#pragma mark Protected

/*!
 @brief Constructs an <CODE>Image</CODE> -object, using an <VAR>url </VAR>.
 @param image another Image object.
 */
- (instancetype)initWithComAowagieTextImage:(ComAowagieTextImage *)image;

/*!
 @brief Creates a new serial id.
 @return serial Id
 */
+ (JavaLangLong *)getSerialId;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithComAowagieTextRectangle:(ComAowagieTextRectangle *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithFloat:(jfloat)arg0
                    withFloat:(jfloat)arg1 NS_UNAVAILABLE;

- (instancetype)initWithFloat:(jfloat)arg0
                    withFloat:(jfloat)arg1
                    withFloat:(jfloat)arg2
                    withFloat:(jfloat)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextImage)

J2OBJC_FIELD_SETTER(ComAowagieTextImage, url_, JavaNetURL *)
J2OBJC_FIELD_SETTER(ComAowagieTextImage, rawData_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextImage, template__, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextImage, alt_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextImage, mySerialId_, JavaLangLong *)
J2OBJC_FIELD_SETTER(ComAowagieTextImage, annotation_, ComAowagieTextAnnotation *)
J2OBJC_FIELD_SETTER(ComAowagieTextImage, layer_, id<ComAowagieTextPdfPdfOCG>)
J2OBJC_FIELD_SETTER(ComAowagieTextImage, originalData_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextImage, profile_, HarmonyJavaAwtColorICC_Profile *)
J2OBJC_FIELD_SETTER(ComAowagieTextImage, imageMask_, ComAowagieTextImage *)
J2OBJC_FIELD_SETTER(ComAowagieTextImage, transparency_, IOSIntArray *)

/*!
 @brief this is a kind of image alignment.
 */
inline jint ComAowagieTextImage_get_DEFAULT(void);
#define ComAowagieTextImage_DEFAULT 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, DEFAULT, jint)

/*!
 @brief this is a kind of image alignment.
 */
inline jint ComAowagieTextImage_get_RIGHT(void);
#define ComAowagieTextImage_RIGHT 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, RIGHT, jint)

/*!
 @brief this is a kind of image alignment.
 */
inline jint ComAowagieTextImage_get_LEFT(void);
#define ComAowagieTextImage_LEFT 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, LEFT, jint)

/*!
 @brief this is a kind of image alignment.
 */
inline jint ComAowagieTextImage_get_MIDDLE(void);
#define ComAowagieTextImage_MIDDLE 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, MIDDLE, jint)

/*!
 @brief this is a kind of image alignment.
 */
inline jint ComAowagieTextImage_get_TEXTWRAP(void);
#define ComAowagieTextImage_TEXTWRAP 4
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, TEXTWRAP, jint)

/*!
 @brief this is a kind of image alignment.
 */
inline jint ComAowagieTextImage_get_UNDERLYING(void);
#define ComAowagieTextImage_UNDERLYING 8
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, UNDERLYING, jint)

/*!
 @brief This represents a coordinate in the transformation matrix.
 */
inline jint ComAowagieTextImage_get_AX(void);
#define ComAowagieTextImage_AX 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, AX, jint)

/*!
 @brief This represents a coordinate in the transformation matrix.
 */
inline jint ComAowagieTextImage_get_AY(void);
#define ComAowagieTextImage_AY 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, AY, jint)

/*!
 @brief This represents a coordinate in the transformation matrix.
 */
inline jint ComAowagieTextImage_get_BX(void);
#define ComAowagieTextImage_BX 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, BX, jint)

/*!
 @brief This represents a coordinate in the transformation matrix.
 */
inline jint ComAowagieTextImage_get_BY(void);
#define ComAowagieTextImage_BY 3
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, BY, jint)

/*!
 @brief This represents a coordinate in the transformation matrix.
 */
inline jint ComAowagieTextImage_get_CX(void);
#define ComAowagieTextImage_CX 4
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, CX, jint)

/*!
 @brief This represents a coordinate in the transformation matrix.
 */
inline jint ComAowagieTextImage_get_CY(void);
#define ComAowagieTextImage_CY 5
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, CY, jint)

/*!
 @brief This represents a coordinate in the transformation matrix.
 */
inline jint ComAowagieTextImage_get_DX(void);
#define ComAowagieTextImage_DX 6
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, DX, jint)

/*!
 @brief This represents a coordinate in the transformation matrix.
 */
inline jint ComAowagieTextImage_get_DY(void);
#define ComAowagieTextImage_DY 7
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, DY, jint)

/*!
 @brief type of image
 */
inline jint ComAowagieTextImage_get_ORIGINAL_NONE(void);
#define ComAowagieTextImage_ORIGINAL_NONE 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, ORIGINAL_NONE, jint)

/*!
 @brief type of image
 */
inline jint ComAowagieTextImage_get_ORIGINAL_JPEG(void);
#define ComAowagieTextImage_ORIGINAL_JPEG 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, ORIGINAL_JPEG, jint)

/*!
 @brief type of image
 */
inline jint ComAowagieTextImage_get_ORIGINAL_PNG(void);
#define ComAowagieTextImage_ORIGINAL_PNG 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, ORIGINAL_PNG, jint)

/*!
 @brief type of image
 */
inline jint ComAowagieTextImage_get_ORIGINAL_GIF(void);
#define ComAowagieTextImage_ORIGINAL_GIF 3
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, ORIGINAL_GIF, jint)

/*!
 @brief type of image
 */
inline jint ComAowagieTextImage_get_ORIGINAL_BMP(void);
#define ComAowagieTextImage_ORIGINAL_BMP 4
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, ORIGINAL_BMP, jint)

/*!
 @brief type of image
 */
inline jint ComAowagieTextImage_get_ORIGINAL_TIFF(void);
#define ComAowagieTextImage_ORIGINAL_TIFF 5
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, ORIGINAL_TIFF, jint)

/*!
 @brief type of image
 */
inline jint ComAowagieTextImage_get_ORIGINAL_WMF(void);
#define ComAowagieTextImage_ORIGINAL_WMF 6
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, ORIGINAL_WMF, jint)

/*!
 @brief type of image
 */
inline jint ComAowagieTextImage_get_ORIGINAL_PS(void);
#define ComAowagieTextImage_ORIGINAL_PS 7
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, ORIGINAL_PS, jint)

/*!
 @brief type of image
 */
inline jint ComAowagieTextImage_get_ORIGINAL_JPEG2000(void);
#define ComAowagieTextImage_ORIGINAL_JPEG2000 8
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, ORIGINAL_JPEG2000, jint)

/*!
 @brief type of image
 @since 2.1.5
 */
inline jint ComAowagieTextImage_get_ORIGINAL_JBIG2(void);
#define ComAowagieTextImage_ORIGINAL_JBIG2 9
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextImage, ORIGINAL_JBIG2, jint)

/*!
 @brief a static that is used for attributing a unique id to each image.
 */
inline jlong ComAowagieTextImage_get_serialId(void);
inline jlong ComAowagieTextImage_set_serialId(jlong value);
inline jlong *ComAowagieTextImage_getRef_serialId(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jlong ComAowagieTextImage_serialId;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComAowagieTextImage, serialId, jlong)

FOUNDATION_EXPORT void ComAowagieTextImage_initWithJavaNetURL_(ComAowagieTextImage *self, JavaNetURL *url);

FOUNDATION_EXPORT ComAowagieTextImage *ComAowagieTextImage_getInstanceWithJavaNetURL_(JavaNetURL *url);

FOUNDATION_EXPORT ComAowagieTextImage *ComAowagieTextImage_getInstanceWithNSString_(NSString *filename);

FOUNDATION_EXPORT ComAowagieTextImage *ComAowagieTextImage_getInstanceWithByteArray_(IOSByteArray *imgb);

FOUNDATION_EXPORT ComAowagieTextImage *ComAowagieTextImage_getInstanceWithInt_withInt_withInt_withInt_withByteArray_(jint width, jint height, jint components, jint bpc, IOSByteArray *data);

FOUNDATION_EXPORT ComAowagieTextImage *ComAowagieTextImage_getInstanceWithInt_withInt_withByteArray_withByteArray_(jint width, jint height, IOSByteArray *data, IOSByteArray *globals);

FOUNDATION_EXPORT ComAowagieTextImage *ComAowagieTextImage_getInstanceWithInt_withInt_withBoolean_withInt_withInt_withByteArray_(jint width, jint height, jboolean reverseBits, jint typeCCITT, jint parameters, IOSByteArray *data);

FOUNDATION_EXPORT ComAowagieTextImage *ComAowagieTextImage_getInstanceWithInt_withInt_withBoolean_withInt_withInt_withByteArray_withIntArray_(jint width, jint height, jboolean reverseBits, jint typeCCITT, jint parameters, IOSByteArray *data, IOSIntArray *transparency);

FOUNDATION_EXPORT ComAowagieTextImage *ComAowagieTextImage_getInstanceWithInt_withInt_withInt_withInt_withByteArray_withIntArray_(jint width, jint height, jint components, jint bpc, IOSByteArray *data, IOSIntArray *transparency);

FOUNDATION_EXPORT ComAowagieTextImage *ComAowagieTextImage_getInstanceWithComAowagieTextPdfPdfTemplate_(ComAowagieTextPdfPdfTemplate *template_);

FOUNDATION_EXPORT ComAowagieTextImage *ComAowagieTextImage_getInstanceWithComAowagieTextPdfPRIndirectReference_(ComAowagieTextPdfPRIndirectReference *ref);

FOUNDATION_EXPORT void ComAowagieTextImage_initWithComAowagieTextImage_(ComAowagieTextImage *self, ComAowagieTextImage *image);

FOUNDATION_EXPORT ComAowagieTextImage *ComAowagieTextImage_getInstanceWithComAowagieTextImage_(ComAowagieTextImage *image);

FOUNDATION_EXPORT JavaLangLong *ComAowagieTextImage_getSerialId(void);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextImage)

#endif

#pragma pop_macro("INCLUDE_ALL_ComAowagieTextImage")
