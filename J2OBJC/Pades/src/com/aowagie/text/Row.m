//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/Row.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/Cell.h"
#include "com/aowagie/text/Element.h"
#include "com/aowagie/text/Row.h"
#include "com/aowagie/text/Table.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/Row must be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

@interface ComAowagieTextRow () {
 @public
  /*!
   @brief This is the number of columns in the <CODE>Row</CODE>.
   */
  jint columns_;
  /*!
   @brief This is a valid position the <CODE>Row</CODE>.
   */
  jint currentColumn_;
  /*!
   @brief This is the array that keeps track of reserved cells.
   */
  IOSBooleanArray *reserved_;
  /*!
   @brief This is the array of Objects (<CODE>Cell</CODE> or <CODE>Table</CODE>).
   */
  IOSObjectArray *cells_;
  /*!
   @brief This is the vertical alignment.
   */
  jint horizontalAlignment_;
}

/*!
 @brief Returns the type-id of an Object.
 @param element the object of which you'd like to know the type-id, -1 if invalid
 @return the type-id of an object
 */
- (jint)getObjectIDWithId:(id)element;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextRow, reserved_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextRow, cells_, IOSObjectArray *)

/*!
 @brief id of a null element in a Row
 */
inline jint ComAowagieTextRow_get_NULL(void);
#define ComAowagieTextRow_NULL 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextRow, NULL, jint)

/*!
 @brief id of the Cell element in a Row
 */
inline jint ComAowagieTextRow_get_CELL(void);
#define ComAowagieTextRow_CELL 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextRow, CELL, jint)

/*!
 @brief id of the Table element in a Row
 */
inline jint ComAowagieTextRow_get_TABLE(void);
#define ComAowagieTextRow_TABLE 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextRow, TABLE, jint)

__attribute__((unused)) static jint ComAowagieTextRow_getObjectIDWithId_(ComAowagieTextRow *self, id element);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/Row.java"


#line 69
@implementation ComAowagieTextRow


#line 106
- (instancetype)initWithInt:(jint)columns {
  ComAowagieTextRow_initWithInt_(self, columns);
  return self;
}


#line 122
- (jint)type {
  
#line 124
  return ComAowagieTextElement_ROW;
}


#line 132
- (JavaUtilArrayList *)getChunks {
  
#line 134
  return new_JavaUtilArrayList_init();
}


#line 141
- (jboolean)isContent {
  
#line 143
  return true;
}


#line 150
- (jboolean)isNestable {
  
#line 152
  return false;
}


#line 165
- (jint)addElementWithId:(id)element
                 withInt:(jint)column {
  
#line 166
  if (element == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"addCell - null argument");
  }
  if (column < 0 || column > self->columns_) {
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(@"addCell - illegal column argument");
  }
  if (!(ComAowagieTextRow_getObjectIDWithId_(self, element) == ComAowagieTextRow_CELL || ComAowagieTextRow_getObjectIDWithId_(self, element) == ComAowagieTextRow_TABLE)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"addCell - only Cells or Tables allowed");
  }
  
#line 176
  jint lColspan = [ComAowagieTextCell_class_() isInstance:element] ? [((ComAowagieTextCell *) cast_chk(element, [ComAowagieTextCell class])) getColspan] : 1;
  
#line 178
  if (![self reserveWithInt:column withInt:lColspan]) {
    return -1;
  }
  
#line 182
  (void) IOSObjectArray_Set(nil_chk(self->cells_), column, element);
  self->currentColumn_ += lColspan - 1;
  
#line 185
  return column;
}


#line 194
- (void)setElementWithId:(id)aElement
                 withInt:(jint)column {
  
#line 195
  if (IOSBooleanArray_Get(nil_chk(self->reserved_), column)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"setElement - position already taken");
  }
  
#line 199
  (void) IOSObjectArray_Set(nil_chk(self->cells_), column, aElement);
  if (aElement != nil) {
    *IOSBooleanArray_GetRef(self->reserved_, column) = true;
  }
}


#line 212
- (jboolean)reserveWithInt:(jint)column
                   withInt:(jint)size {
  
#line 213
  if (column < 0 || column + size > self->columns_) {
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(@"reserve - incorrect column/size");
  }
  
#line 217
  for (jint i = column; i < column + size; i++) {
    
#line 219
    if (IOSBooleanArray_Get(nil_chk(self->reserved_), i)) {
      
#line 221
      for (jint j = i; j >= column; j--) {
        *IOSBooleanArray_GetRef(self->reserved_, j) = false;
      }
      return false;
    }
    *IOSBooleanArray_GetRef(self->reserved_, i) = true;
  }
  return true;
}


#line 239
- (jboolean)isReservedWithInt:(jint)column {
  return IOSBooleanArray_Get(nil_chk(self->reserved_), column);
}


#line 249
- (jint)getObjectIDWithId:(id)element {
  return ComAowagieTextRow_getObjectIDWithId_(self, element);
}


#line 267
- (id)getCellWithInt:(jint)column {
  if (column < 0 || column > self->columns_) {
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"getCell at illegal index :", column, @" max is ", self->columns_));
  }
  return IOSObjectArray_Get(nil_chk(self->cells_), column);
}


#line 279
- (jboolean)isEmpty {
  for (jint i = 0; i < self->columns_; i++) {
    if (IOSObjectArray_Get(nil_chk(self->cells_), i) != nil) {
      return false;
    }
  }
  return true;
}


#line 293
- (jint)getColumns {
  return self->columns_;
}


#line 302
- (void)setHorizontalAlignmentWithInt:(jint)value {
  self->horizontalAlignment_ = value;
}


#line 311
- (jint)getHorizontalAlignment {
  return self->horizontalAlignment_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 6, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(type);
  methods[2].selector = @selector(getChunks);
  methods[3].selector = @selector(isContent);
  methods[4].selector = @selector(isNestable);
  methods[5].selector = @selector(addElementWithId:withInt:);
  methods[6].selector = @selector(setElementWithId:withInt:);
  methods[7].selector = @selector(reserveWithInt:withInt:);
  methods[8].selector = @selector(isReservedWithInt:);
  methods[9].selector = @selector(getObjectIDWithId:);
  methods[10].selector = @selector(getCellWithInt:);
  methods[11].selector = @selector(isEmpty);
  methods[12].selector = @selector(getColumns);
  methods[13].selector = @selector(setHorizontalAlignmentWithInt:);
  methods[14].selector = @selector(getHorizontalAlignment);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NULL", "I", .constantValue.asInt = ComAowagieTextRow_NULL, 0x1a, -1, -1, -1, -1 },
    { "CELL", "I", .constantValue.asInt = ComAowagieTextRow_CELL, 0x1a, -1, -1, -1, -1 },
    { "TABLE", "I", .constantValue.asInt = ComAowagieTextRow_TABLE, 0x1a, -1, -1, -1, -1 },
    { "columns_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currentColumn_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "reserved_", "[Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cells_", "[LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "horizontalAlignment_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "addElement", "LNSObject;I", "setElement", "reserve", "II", "isReserved", "getObjectID", "LNSObject;", "getCell", "setHorizontalAlignment" };
  static const J2ObjcClassInfo _ComAowagieTextRow = { "Row", "com.aowagie.text", ptrTable, methods, fields, 7, 0x1, 15, 8, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextRow;
}

@end


#line 106
void ComAowagieTextRow_initWithInt_(ComAowagieTextRow *self, jint columns) {
  NSObject_init(self);
  
#line 107
  self->columns_ = columns;
  self->reserved_ = [IOSBooleanArray newArrayWithLength:columns];
  self->cells_ = [IOSObjectArray newArrayWithLength:columns type:NSObject_class_()];
  self->currentColumn_ = 0;
}


#line 106
ComAowagieTextRow *new_ComAowagieTextRow_initWithInt_(jint columns) {
  J2OBJC_NEW_IMPL(ComAowagieTextRow, initWithInt_, columns)
}


#line 106
ComAowagieTextRow *create_ComAowagieTextRow_initWithInt_(jint columns) {
  J2OBJC_CREATE_IMPL(ComAowagieTextRow, initWithInt_, columns)
}


#line 249
jint ComAowagieTextRow_getObjectIDWithId_(ComAowagieTextRow *self, id element) {
  if (element == nil) {
    return ComAowagieTextRow_NULL;
  }
  else
#line 252
  if ([ComAowagieTextCell_class_() isInstance:element]) {
    return ComAowagieTextRow_CELL;
  }
  else
#line 254
  if ([ComAowagieTextTable_class_() isInstance:element]) {
    return ComAowagieTextRow_TABLE;
  }
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextRow)
