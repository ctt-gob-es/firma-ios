//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/math/ec/ECAlgorithms.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/math/ec/ECAlgorithms.h"
#include "org/spongycastle/math/ec/ECConstants.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECFieldElement.h"
#include "org/spongycastle/math/ec/ECPoint.h"
#include "org/spongycastle/math/ec/ECPointMap.h"
#include "org/spongycastle/math/ec/WNafPreCompInfo.h"
#include "org/spongycastle/math/ec/WNafUtil.h"
#include "org/spongycastle/math/ec/endo/ECEndomorphism.h"
#include "org/spongycastle/math/ec/endo/GLVEndomorphism.h"
#include "org/spongycastle/math/field/FiniteField.h"
#include "org/spongycastle/math/field/PolynomialExtensionField.h"

#if !__has_feature(objc_arc)
#error "org/spongycastle/math/ec/ECAlgorithms must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleMathEcECAlgorithms ()

+ (OrgSpongycastleMathEcECPoint *)implShamirsTrickWNafWithOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)preCompP
                                                      withOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)preCompNegP
                                                                              withByteArray:(IOSByteArray *)wnafP
                                                      withOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)preCompQ
                                                      withOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)preCompNegQ
                                                                              withByteArray:(IOSByteArray *)wnafQ;

+ (OrgSpongycastleMathEcECPoint *)implSumOfMultipliesWithBooleanArray:(IOSBooleanArray *)negs
                        withOrgSpongycastleMathEcWNafPreCompInfoArray:(IOSObjectArray *)infos
                                                       withByteArray2:(IOSObjectArray *)wnafs;

@end

__attribute__((unused)) static OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgSpongycastleMathEcECPointArray_withOrgSpongycastleMathEcECPointArray_withByteArray_withOrgSpongycastleMathEcECPointArray_withOrgSpongycastleMathEcECPointArray_withByteArray_(IOSObjectArray *preCompP, IOSObjectArray *preCompNegP, IOSByteArray *wnafP, IOSObjectArray *preCompQ, IOSObjectArray *preCompNegQ, IOSByteArray *wnafQ);

__attribute__((unused)) static OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcECAlgorithms_implSumOfMultipliesWithBooleanArray_withOrgSpongycastleMathEcWNafPreCompInfoArray_withByteArray2_(IOSBooleanArray *negs, IOSObjectArray *infos, IOSObjectArray *wnafs);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/math/ec/ECAlgorithms.java"


#line 10
@implementation OrgSpongycastleMathEcECAlgorithms

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 10
- (instancetype)init {
  OrgSpongycastleMathEcECAlgorithms_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 12
+ (jboolean)isF2mCurveWithOrgSpongycastleMathEcECCurve:(OrgSpongycastleMathEcECCurve *)c {
  return OrgSpongycastleMathEcECAlgorithms_isF2mCurveWithOrgSpongycastleMathEcECCurve_(c);
}


#line 17
+ (jboolean)isF2mFieldWithOrgSpongycastleMathFieldFiniteField:(id<OrgSpongycastleMathFieldFiniteField>)field {
  return OrgSpongycastleMathEcECAlgorithms_isF2mFieldWithOrgSpongycastleMathFieldFiniteField_(field);
}


#line 23
+ (jboolean)isFpCurveWithOrgSpongycastleMathEcECCurve:(OrgSpongycastleMathEcECCurve *)c {
  return OrgSpongycastleMathEcECAlgorithms_isFpCurveWithOrgSpongycastleMathEcECCurve_(c);
}


#line 28
+ (jboolean)isFpFieldWithOrgSpongycastleMathFieldFiniteField:(id<OrgSpongycastleMathFieldFiniteField>)field {
  return OrgSpongycastleMathEcECAlgorithms_isFpFieldWithOrgSpongycastleMathFieldFiniteField_(field);
}


#line 33
+ (OrgSpongycastleMathEcECPoint *)sumOfMultipliesWithOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)ps
                                                           withJavaMathBigIntegerArray:(IOSObjectArray *)ks {
  return OrgSpongycastleMathEcECAlgorithms_sumOfMultipliesWithOrgSpongycastleMathEcECPointArray_withJavaMathBigIntegerArray_(ps, ks);
}


#line 70
+ (OrgSpongycastleMathEcECPoint *)sumOfTwoMultipliesWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)P
                                                              withJavaMathBigInteger:(JavaMathBigInteger *)a
                                                    withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)Q
                                                              withJavaMathBigInteger:(JavaMathBigInteger *)b {
  return OrgSpongycastleMathEcECAlgorithms_sumOfTwoMultipliesWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_(P, a, Q, b);
}


#line 115
+ (OrgSpongycastleMathEcECPoint *)shamirsTrickWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)P
                                                        withJavaMathBigInteger:(JavaMathBigInteger *)k
                                              withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)Q
                                                        withJavaMathBigInteger:(JavaMathBigInteger *)l {
  return OrgSpongycastleMathEcECAlgorithms_shamirsTrickWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_(P, k, Q, l);
}


#line 124
+ (OrgSpongycastleMathEcECPoint *)importPointWithOrgSpongycastleMathEcECCurve:(OrgSpongycastleMathEcECCurve *)c
                                             withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p {
  return OrgSpongycastleMathEcECAlgorithms_importPointWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_(c, p);
}


#line 134
+ (void)montgomeryTrickWithOrgSpongycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                            withInt:(jint)off
                                                            withInt:(jint)len {
  OrgSpongycastleMathEcECAlgorithms_montgomeryTrickWithOrgSpongycastleMathEcECFieldElementArray_withInt_withInt_(zs, off, len);
}


#line 139
+ (void)montgomeryTrickWithOrgSpongycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                            withInt:(jint)off
                                                            withInt:(jint)len
                            withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)scale_ {
  OrgSpongycastleMathEcECAlgorithms_montgomeryTrickWithOrgSpongycastleMathEcECFieldElementArray_withInt_withInt_withOrgSpongycastleMathEcECFieldElement_(zs, off, len, scale_);
}


#line 187
+ (OrgSpongycastleMathEcECPoint *)referenceMultiplyWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p
                                                             withJavaMathBigInteger:(JavaMathBigInteger *)k {
  return OrgSpongycastleMathEcECAlgorithms_referenceMultiplyWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_(p, k);
}


#line 210
+ (OrgSpongycastleMathEcECPoint *)validatePointWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p {
  return OrgSpongycastleMathEcECAlgorithms_validatePointWithOrgSpongycastleMathEcECPoint_(p);
}


#line 220
+ (OrgSpongycastleMathEcECPoint *)implShamirsTrickJsfWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)P
                                                               withJavaMathBigInteger:(JavaMathBigInteger *)k
                                                     withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)Q
                                                               withJavaMathBigInteger:(JavaMathBigInteger *)l {
  return OrgSpongycastleMathEcECAlgorithms_implShamirsTrickJsfWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_(P, k, Q, l);
}


#line 257
+ (OrgSpongycastleMathEcECPoint *)implShamirsTrickWNafWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)P
                                                                withJavaMathBigInteger:(JavaMathBigInteger *)k
                                                      withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)Q
                                                                withJavaMathBigInteger:(JavaMathBigInteger *)l {
  return OrgSpongycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_(P, k, Q, l);
}


#line 282
+ (OrgSpongycastleMathEcECPoint *)implShamirsTrickWNafWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)P
                                                                withJavaMathBigInteger:(JavaMathBigInteger *)k
                                                   withOrgSpongycastleMathEcECPointMap:(id<OrgSpongycastleMathEcECPointMap>)pointMapQ
                                                                withJavaMathBigInteger:(JavaMathBigInteger *)l {
  return OrgSpongycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPointMap_withJavaMathBigInteger_(P, k, pointMapQ, l);
}


#line 306
+ (OrgSpongycastleMathEcECPoint *)implShamirsTrickWNafWithOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)preCompP
                                                      withOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)preCompNegP
                                                                              withByteArray:(IOSByteArray *)wnafP
                                                      withOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)preCompQ
                                                      withOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)preCompNegQ
                                                                              withByteArray:(IOSByteArray *)wnafQ {
  return OrgSpongycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgSpongycastleMathEcECPointArray_withOrgSpongycastleMathEcECPointArray_withByteArray_withOrgSpongycastleMathEcECPointArray_withOrgSpongycastleMathEcECPointArray_withByteArray_(preCompP, preCompNegP, wnafP, preCompQ, preCompNegQ, wnafQ);
}


#line 359
+ (OrgSpongycastleMathEcECPoint *)implSumOfMultipliesWithOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)ps
                                                               withJavaMathBigIntegerArray:(IOSObjectArray *)ks {
  return OrgSpongycastleMathEcECAlgorithms_implSumOfMultipliesWithOrgSpongycastleMathEcECPointArray_withJavaMathBigIntegerArray_(ps, ks);
}


#line 378
+ (OrgSpongycastleMathEcECPoint *)implSumOfMultipliesGLVWithOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)ps
                                                                  withJavaMathBigIntegerArray:(IOSObjectArray *)ks
                                                 withOrgSpongycastleMathEcEndoGLVEndomorphism:(id<OrgSpongycastleMathEcEndoGLVEndomorphism>)glvEndomorphism {
  return OrgSpongycastleMathEcECAlgorithms_implSumOfMultipliesGLVWithOrgSpongycastleMathEcECPointArray_withJavaMathBigIntegerArray_withOrgSpongycastleMathEcEndoGLVEndomorphism_(ps, ks, glvEndomorphism);
}


#line 410
+ (OrgSpongycastleMathEcECPoint *)implSumOfMultipliesWithOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)ps
                                                       withOrgSpongycastleMathEcECPointMap:(id<OrgSpongycastleMathEcECPointMap>)pointMap
                                                               withJavaMathBigIntegerArray:(IOSObjectArray *)ks {
  return OrgSpongycastleMathEcECAlgorithms_implSumOfMultipliesWithOrgSpongycastleMathEcECPointArray_withOrgSpongycastleMathEcECPointMap_withJavaMathBigIntegerArray_(ps, pointMap, ks);
}


#line 437
+ (OrgSpongycastleMathEcECPoint *)implSumOfMultipliesWithBooleanArray:(IOSBooleanArray *)negs
                        withOrgSpongycastleMathEcWNafPreCompInfoArray:(IOSObjectArray *)infos
                                                       withByteArray2:(IOSObjectArray *)wnafs {
  return OrgSpongycastleMathEcECAlgorithms_implSumOfMultipliesWithBooleanArray_withOrgSpongycastleMathEcWNafPreCompInfoArray_withByteArray2_(negs, infos, wnafs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x9, 10, 9, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 15, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x8, 20, 9, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x8, 21, 9, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x8, 21, 22, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0xa, 21, 23, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x8, 24, 7, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x8, 25, 26, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x8, 24, 27, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0xa, 24, 28, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isF2mCurveWithOrgSpongycastleMathEcECCurve:);
  methods[2].selector = @selector(isF2mFieldWithOrgSpongycastleMathFieldFiniteField:);
  methods[3].selector = @selector(isFpCurveWithOrgSpongycastleMathEcECCurve:);
  methods[4].selector = @selector(isFpFieldWithOrgSpongycastleMathFieldFiniteField:);
  methods[5].selector = @selector(sumOfMultipliesWithOrgSpongycastleMathEcECPointArray:withJavaMathBigIntegerArray:);
  methods[6].selector = @selector(sumOfTwoMultipliesWithOrgSpongycastleMathEcECPoint:withJavaMathBigInteger:withOrgSpongycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[7].selector = @selector(shamirsTrickWithOrgSpongycastleMathEcECPoint:withJavaMathBigInteger:withOrgSpongycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[8].selector = @selector(importPointWithOrgSpongycastleMathEcECCurve:withOrgSpongycastleMathEcECPoint:);
  methods[9].selector = @selector(montgomeryTrickWithOrgSpongycastleMathEcECFieldElementArray:withInt:withInt:);
  methods[10].selector = @selector(montgomeryTrickWithOrgSpongycastleMathEcECFieldElementArray:withInt:withInt:withOrgSpongycastleMathEcECFieldElement:);
  methods[11].selector = @selector(referenceMultiplyWithOrgSpongycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[12].selector = @selector(validatePointWithOrgSpongycastleMathEcECPoint:);
  methods[13].selector = @selector(implShamirsTrickJsfWithOrgSpongycastleMathEcECPoint:withJavaMathBigInteger:withOrgSpongycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[14].selector = @selector(implShamirsTrickWNafWithOrgSpongycastleMathEcECPoint:withJavaMathBigInteger:withOrgSpongycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[15].selector = @selector(implShamirsTrickWNafWithOrgSpongycastleMathEcECPoint:withJavaMathBigInteger:withOrgSpongycastleMathEcECPointMap:withJavaMathBigInteger:);
  methods[16].selector = @selector(implShamirsTrickWNafWithOrgSpongycastleMathEcECPointArray:withOrgSpongycastleMathEcECPointArray:withByteArray:withOrgSpongycastleMathEcECPointArray:withOrgSpongycastleMathEcECPointArray:withByteArray:);
  methods[17].selector = @selector(implSumOfMultipliesWithOrgSpongycastleMathEcECPointArray:withJavaMathBigIntegerArray:);
  methods[18].selector = @selector(implSumOfMultipliesGLVWithOrgSpongycastleMathEcECPointArray:withJavaMathBigIntegerArray:withOrgSpongycastleMathEcEndoGLVEndomorphism:);
  methods[19].selector = @selector(implSumOfMultipliesWithOrgSpongycastleMathEcECPointArray:withOrgSpongycastleMathEcECPointMap:withJavaMathBigIntegerArray:);
  methods[20].selector = @selector(implSumOfMultipliesWithBooleanArray:withOrgSpongycastleMathEcWNafPreCompInfoArray:withByteArray2:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isF2mCurve", "LOrgSpongycastleMathEcECCurve;", "isF2mField", "LOrgSpongycastleMathFieldFiniteField;", "isFpCurve", "isFpField", "sumOfMultiplies", "[LOrgSpongycastleMathEcECPoint;[LJavaMathBigInteger;", "sumOfTwoMultiplies", "LOrgSpongycastleMathEcECPoint;LJavaMathBigInteger;LOrgSpongycastleMathEcECPoint;LJavaMathBigInteger;", "shamirsTrick", "importPoint", "LOrgSpongycastleMathEcECCurve;LOrgSpongycastleMathEcECPoint;", "montgomeryTrick", "[LOrgSpongycastleMathEcECFieldElement;II", "[LOrgSpongycastleMathEcECFieldElement;IILOrgSpongycastleMathEcECFieldElement;", "referenceMultiply", "LOrgSpongycastleMathEcECPoint;LJavaMathBigInteger;", "validatePoint", "LOrgSpongycastleMathEcECPoint;", "implShamirsTrickJsf", "implShamirsTrickWNaf", "LOrgSpongycastleMathEcECPoint;LJavaMathBigInteger;LOrgSpongycastleMathEcECPointMap;LJavaMathBigInteger;", "[LOrgSpongycastleMathEcECPoint;[LOrgSpongycastleMathEcECPoint;[B[LOrgSpongycastleMathEcECPoint;[LOrgSpongycastleMathEcECPoint;[B", "implSumOfMultiplies", "implSumOfMultipliesGLV", "[LOrgSpongycastleMathEcECPoint;[LJavaMathBigInteger;LOrgSpongycastleMathEcEndoGLVEndomorphism;", "[LOrgSpongycastleMathEcECPoint;LOrgSpongycastleMathEcECPointMap;[LJavaMathBigInteger;", "[Z[LOrgSpongycastleMathEcWNafPreCompInfo;[[B" };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcECAlgorithms = { "ECAlgorithms", "org.spongycastle.math.ec", ptrTable, methods, NULL, 7, 0x1, 21, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleMathEcECAlgorithms;
}

@end


#line 10
void OrgSpongycastleMathEcECAlgorithms_init(OrgSpongycastleMathEcECAlgorithms *self) {
  NSObject_init(self);
}


#line 10
OrgSpongycastleMathEcECAlgorithms *new_OrgSpongycastleMathEcECAlgorithms_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcECAlgorithms, init)
}


#line 10
OrgSpongycastleMathEcECAlgorithms *create_OrgSpongycastleMathEcECAlgorithms_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcECAlgorithms, init)
}


#line 12
jboolean OrgSpongycastleMathEcECAlgorithms_isF2mCurveWithOrgSpongycastleMathEcECCurve_(OrgSpongycastleMathEcECCurve *c) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  return OrgSpongycastleMathEcECAlgorithms_isF2mFieldWithOrgSpongycastleMathFieldFiniteField_([((OrgSpongycastleMathEcECCurve *) nil_chk(c)) getField]);
}

jboolean OrgSpongycastleMathEcECAlgorithms_isF2mFieldWithOrgSpongycastleMathFieldFiniteField_(id<OrgSpongycastleMathFieldFiniteField> field) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  return [((id<OrgSpongycastleMathFieldFiniteField>) nil_chk(field)) getDimension] > 1 && [((JavaMathBigInteger *) nil_chk([field getCharacteristic])) isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, TWO)] &&
#line 20
  [OrgSpongycastleMathFieldPolynomialExtensionField_class_() isInstance:field];
}


#line 23
jboolean OrgSpongycastleMathEcECAlgorithms_isFpCurveWithOrgSpongycastleMathEcECCurve_(OrgSpongycastleMathEcECCurve *c) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  return OrgSpongycastleMathEcECAlgorithms_isFpFieldWithOrgSpongycastleMathFieldFiniteField_([((OrgSpongycastleMathEcECCurve *) nil_chk(c)) getField]);
}

jboolean OrgSpongycastleMathEcECAlgorithms_isFpFieldWithOrgSpongycastleMathFieldFiniteField_(id<OrgSpongycastleMathFieldFiniteField> field) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  return [((id<OrgSpongycastleMathFieldFiniteField>) nil_chk(field)) getDimension] == 1;
}

OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcECAlgorithms_sumOfMultipliesWithOrgSpongycastleMathEcECPointArray_withJavaMathBigIntegerArray_(IOSObjectArray *ps, IOSObjectArray *ks) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  if (ps == nil || ks == nil || ps->size_ != ks->size_ || ps->size_ < 1) {
    
#line 37
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"point and scalar arrays should be non-null, and of equal, non-zero, length");
  }
  
#line 40
  jint count = ps->size_;
  switch (count) {
    
#line 43
    case 1:
    return [((OrgSpongycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(ps, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(ks, 0)];
    case 2:
    return OrgSpongycastleMathEcECAlgorithms_sumOfTwoMultipliesWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_(IOSObjectArray_Get(ps, 0), IOSObjectArray_Get(ks, 0), IOSObjectArray_Get(ps, 1), IOSObjectArray_Get(ks, 1));
    default:
    break;
  }
  
#line 51
  OrgSpongycastleMathEcECPoint *p = IOSObjectArray_Get(ps, 0);
  OrgSpongycastleMathEcECCurve *c = [((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getCurve];
  
#line 54
  IOSObjectArray *imported = [IOSObjectArray newArrayWithLength:count type:OrgSpongycastleMathEcECPoint_class_()];
  (void) IOSObjectArray_Set(imported, 0, p);
  for (jint i = 1; i < count; ++i) {
    
#line 58
    (void) IOSObjectArray_Set(imported, i, OrgSpongycastleMathEcECAlgorithms_importPointWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_(c, IOSObjectArray_Get(ps, i)));
  }
  
#line 61
  id<OrgSpongycastleMathEcEndoECEndomorphism> endomorphism = [((OrgSpongycastleMathEcECCurve *) nil_chk(c)) getEndomorphism];
  if ([OrgSpongycastleMathEcEndoGLVEndomorphism_class_() isInstance:endomorphism]) {
    
#line 64
    return OrgSpongycastleMathEcECAlgorithms_validatePointWithOrgSpongycastleMathEcECPoint_(OrgSpongycastleMathEcECAlgorithms_implSumOfMultipliesGLVWithOrgSpongycastleMathEcECPointArray_withJavaMathBigIntegerArray_withOrgSpongycastleMathEcEndoGLVEndomorphism_(imported, ks, (id<OrgSpongycastleMathEcEndoGLVEndomorphism>) cast_check(endomorphism, OrgSpongycastleMathEcEndoGLVEndomorphism_class_())));
  }
  
#line 67
  return OrgSpongycastleMathEcECAlgorithms_validatePointWithOrgSpongycastleMathEcECPoint_(OrgSpongycastleMathEcECAlgorithms_implSumOfMultipliesWithOrgSpongycastleMathEcECPointArray_withJavaMathBigIntegerArray_(imported, ks));
}


#line 70
OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcECAlgorithms_sumOfTwoMultipliesWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_(OrgSpongycastleMathEcECPoint *P, JavaMathBigInteger *a, OrgSpongycastleMathEcECPoint *Q, JavaMathBigInteger *b) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  
#line 73
  OrgSpongycastleMathEcECCurve *cp = [((OrgSpongycastleMathEcECPoint *) nil_chk(P)) getCurve];
  Q = OrgSpongycastleMathEcECAlgorithms_importPointWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_(cp, Q);
  
#line 77
  if ([cp isKindOfClass:[OrgSpongycastleMathEcECCurve_AbstractF2m class]]) {
    
#line 79
    OrgSpongycastleMathEcECCurve_AbstractF2m *f2mCurve = (OrgSpongycastleMathEcECCurve_AbstractF2m *) cp;
    if ([((OrgSpongycastleMathEcECCurve_AbstractF2m *) nil_chk(f2mCurve)) isKoblitz]) {
      
#line 82
      return OrgSpongycastleMathEcECAlgorithms_validatePointWithOrgSpongycastleMathEcECPoint_([((OrgSpongycastleMathEcECPoint *) nil_chk([P multiplyWithJavaMathBigInteger:a])) addWithOrgSpongycastleMathEcECPoint:[((OrgSpongycastleMathEcECPoint *) nil_chk(Q)) multiplyWithJavaMathBigInteger:b]]);
    }
  }
  
#line 86
  id<OrgSpongycastleMathEcEndoECEndomorphism> endomorphism = [((OrgSpongycastleMathEcECCurve *) nil_chk(cp)) getEndomorphism];
  if ([OrgSpongycastleMathEcEndoGLVEndomorphism_class_() isInstance:endomorphism]) {
    
#line 89
    return OrgSpongycastleMathEcECAlgorithms_validatePointWithOrgSpongycastleMathEcECPoint_(OrgSpongycastleMathEcECAlgorithms_implSumOfMultipliesGLVWithOrgSpongycastleMathEcECPointArray_withJavaMathBigIntegerArray_withOrgSpongycastleMathEcEndoGLVEndomorphism_([IOSObjectArray newArrayWithObjects:(id[]){
#line 90
      P, Q } count:2 type:OrgSpongycastleMathEcECPoint_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ a, b } count:2 type:JavaMathBigInteger_class_()], (id<OrgSpongycastleMathEcEndoGLVEndomorphism>) cast_check(endomorphism, OrgSpongycastleMathEcEndoGLVEndomorphism_class_())));
    }
    
#line 93
    return OrgSpongycastleMathEcECAlgorithms_validatePointWithOrgSpongycastleMathEcECPoint_(OrgSpongycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_(P, a, Q, b));
  }


#line 115
OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcECAlgorithms_shamirsTrickWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_(OrgSpongycastleMathEcECPoint *P, JavaMathBigInteger *k, OrgSpongycastleMathEcECPoint *Q, JavaMathBigInteger *l) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  
#line 118
  OrgSpongycastleMathEcECCurve *cp = [((OrgSpongycastleMathEcECPoint *) nil_chk(P)) getCurve];
  Q = OrgSpongycastleMathEcECAlgorithms_importPointWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_(cp, Q);
  
#line 121
  return OrgSpongycastleMathEcECAlgorithms_validatePointWithOrgSpongycastleMathEcECPoint_(OrgSpongycastleMathEcECAlgorithms_implShamirsTrickJsfWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_(P, k, Q, l));
}


#line 124
OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcECAlgorithms_importPointWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_(OrgSpongycastleMathEcECCurve *c, OrgSpongycastleMathEcECPoint *p) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  OrgSpongycastleMathEcECCurve *cp = [((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getCurve];
  if (![((OrgSpongycastleMathEcECCurve *) nil_chk(c)) equalsWithOrgSpongycastleMathEcECCurve:cp]) {
    
#line 129
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Point must be on the same curve");
  }
  return [c importPointWithOrgSpongycastleMathEcECPoint:p];
}


#line 134
void OrgSpongycastleMathEcECAlgorithms_montgomeryTrickWithOrgSpongycastleMathEcECFieldElementArray_withInt_withInt_(IOSObjectArray *zs, jint off, jint len) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  OrgSpongycastleMathEcECAlgorithms_montgomeryTrickWithOrgSpongycastleMathEcECFieldElementArray_withInt_withInt_withOrgSpongycastleMathEcECFieldElement_(zs, off, len, nil);
}

void OrgSpongycastleMathEcECAlgorithms_montgomeryTrickWithOrgSpongycastleMathEcECFieldElementArray_withInt_withInt_withOrgSpongycastleMathEcECFieldElement_(IOSObjectArray *zs, jint off, jint len, OrgSpongycastleMathEcECFieldElement *scale_) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  
#line 148
  IOSObjectArray *c = [IOSObjectArray newArrayWithLength:len type:OrgSpongycastleMathEcECFieldElement_class_()];
  (void) IOSObjectArray_Set(c, 0, IOSObjectArray_Get(nil_chk(zs), off));
  
#line 151
  jint i = 0;
  while (++i < len) {
    
#line 154
    (void) IOSObjectArray_Set(c, i, [((OrgSpongycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(c, i - 1))) multiplyWithOrgSpongycastleMathEcECFieldElement:IOSObjectArray_Get(zs, off + i)]);
  }
  
#line 157
  --i;
  
#line 159
  if (scale_ != nil) {
    
#line 161
    (void) IOSObjectArray_Set(c, i, [((OrgSpongycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(c, i))) multiplyWithOrgSpongycastleMathEcECFieldElement:scale_]);
  }
  
#line 164
  OrgSpongycastleMathEcECFieldElement *u = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(c, i))) invert];
  
#line 166
  while (i > 0) {
    
#line 168
    jint j = off + i--;
    OrgSpongycastleMathEcECFieldElement *tmp = IOSObjectArray_Get(zs, j);
    (void) IOSObjectArray_Set(zs, j, [((OrgSpongycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(c, i))) multiplyWithOrgSpongycastleMathEcECFieldElement:u]);
    u = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(u)) multiplyWithOrgSpongycastleMathEcECFieldElement:tmp];
  }
  
#line 174
  (void) IOSObjectArray_Set(zs, off, u);
}


#line 187
OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcECAlgorithms_referenceMultiplyWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_(OrgSpongycastleMathEcECPoint *p, JavaMathBigInteger *k) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  JavaMathBigInteger *x = [((JavaMathBigInteger *) nil_chk(k)) abs];
  OrgSpongycastleMathEcECPoint *q = [((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getCurve])) getInfinity];
  jint t = [((JavaMathBigInteger *) nil_chk(x)) bitLength];
  if (t > 0) {
    
#line 194
    if ([x testBitWithInt:0]) {
      
#line 196
      q = p;
    }
    for (jint i = 1; i < t; i++) {
      
#line 200
      p = [((OrgSpongycastleMathEcECPoint *) nil_chk(p)) twice];
      if ([x testBitWithInt:i]) {
        
#line 203
        q = [((OrgSpongycastleMathEcECPoint *) nil_chk(q)) addWithOrgSpongycastleMathEcECPoint:p];
      }
    }
  }
  return [k signum] < 0 ? [((OrgSpongycastleMathEcECPoint *) nil_chk(q)) negate] : q;
}


#line 210
OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcECAlgorithms_validatePointWithOrgSpongycastleMathEcECPoint_(OrgSpongycastleMathEcECPoint *p) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  if (![((OrgSpongycastleMathEcECPoint *) nil_chk(p)) isValid]) {
    
#line 214
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid point");
  }
  
#line 217
  return p;
}


#line 220
OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcECAlgorithms_implShamirsTrickJsfWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_(OrgSpongycastleMathEcECPoint *P, JavaMathBigInteger *k, OrgSpongycastleMathEcECPoint *Q, JavaMathBigInteger *l) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  
#line 223
  OrgSpongycastleMathEcECCurve *curve = [((OrgSpongycastleMathEcECPoint *) nil_chk(P)) getCurve];
  OrgSpongycastleMathEcECPoint *infinity = [((OrgSpongycastleMathEcECCurve *) nil_chk(curve)) getInfinity];
  
#line 227
  OrgSpongycastleMathEcECPoint *PaddQ = [P addWithOrgSpongycastleMathEcECPoint:Q];
  OrgSpongycastleMathEcECPoint *PsubQ = [P subtractWithOrgSpongycastleMathEcECPoint:Q];
  
#line 230
  IOSObjectArray *points = [IOSObjectArray newArrayWithObjects:(id[]){ Q, PsubQ, P, PaddQ } count:4 type:OrgSpongycastleMathEcECPoint_class_()];
  [curve normalizeAllWithOrgSpongycastleMathEcECPointArray:points];
  
#line 233
  IOSObjectArray *table = [IOSObjectArray newArrayWithObjects:(id[]){
#line 234
    [((OrgSpongycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(points, 3))) negate], [((OrgSpongycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(points, 2))) negate], [((OrgSpongycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(points, 1))) negate],
#line 235
    [((OrgSpongycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(points, 0))) negate], infinity, IOSObjectArray_Get(points, 0), IOSObjectArray_Get(
#line 236
    points, 1), IOSObjectArray_Get(points, 2), IOSObjectArray_Get(points, 3) } count:9 type:OrgSpongycastleMathEcECPoint_class_()];
    
#line 238
    IOSByteArray *jsf = OrgSpongycastleMathEcWNafUtil_generateJSFWithJavaMathBigInteger_withJavaMathBigInteger_(k, l);
    
#line 240
    OrgSpongycastleMathEcECPoint *R = infinity;
    
#line 242
    jint i = ((IOSByteArray *) nil_chk(jsf))->size_;
    while (--i >= 0) {
      
#line 245
      jint jsfi = IOSByteArray_Get(jsf, i);
      
#line 248
      jint kDigit = (JreRShift32((JreLShift32(jsfi, 24)), 28));
      
#line 248
      jint lDigit = (JreRShift32((JreLShift32(jsfi, 28)), 28));
      
#line 250
      jint index = 4 + (kDigit * 3) + lDigit;
      R = [((OrgSpongycastleMathEcECPoint *) nil_chk(R)) twicePlusWithOrgSpongycastleMathEcECPoint:IOSObjectArray_Get(table, index)];
    }
    
#line 254
    return R;
  }


#line 257
OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_(OrgSpongycastleMathEcECPoint *P, JavaMathBigInteger *k, OrgSpongycastleMathEcECPoint *Q, JavaMathBigInteger *l) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  
#line 260
  jboolean negK = [((JavaMathBigInteger *) nil_chk(k)) signum] < 0;
  
#line 260
  jboolean negL = [((JavaMathBigInteger *) nil_chk(l)) signum] < 0;
  
#line 262
  k = [k abs];
  l = [l abs];
  
#line 265
  jint widthP = JavaLangMath_maxWithInt_withInt_(2, JavaLangMath_minWithInt_withInt_(16, OrgSpongycastleMathEcWNafUtil_getWindowSizeWithInt_([((JavaMathBigInteger *) nil_chk(k)) bitLength])));
  jint widthQ = JavaLangMath_maxWithInt_withInt_(2, JavaLangMath_minWithInt_withInt_(16, OrgSpongycastleMathEcWNafUtil_getWindowSizeWithInt_([((JavaMathBigInteger *) nil_chk(l)) bitLength])));
  
#line 268
  OrgSpongycastleMathEcWNafPreCompInfo *infoP = OrgSpongycastleMathEcWNafUtil_precomputeWithOrgSpongycastleMathEcECPoint_withInt_withBoolean_(P, widthP, true);
  OrgSpongycastleMathEcWNafPreCompInfo *infoQ = OrgSpongycastleMathEcWNafUtil_precomputeWithOrgSpongycastleMathEcECPoint_withInt_withBoolean_(Q, widthQ, true);
  
#line 271
  IOSObjectArray *preCompP = negK ? [((OrgSpongycastleMathEcWNafPreCompInfo *) nil_chk(infoP)) getPreCompNeg] : [((OrgSpongycastleMathEcWNafPreCompInfo *) nil_chk(infoP)) getPreComp];
  IOSObjectArray *preCompQ = negL ? [((OrgSpongycastleMathEcWNafPreCompInfo *) nil_chk(infoQ)) getPreCompNeg] : [((OrgSpongycastleMathEcWNafPreCompInfo *) nil_chk(infoQ)) getPreComp];
  IOSObjectArray *preCompNegP = negK ? [infoP getPreComp] : [infoP getPreCompNeg];
  IOSObjectArray *preCompNegQ = negL ? [infoQ getPreComp] : [infoQ getPreCompNeg];
  
#line 276
  IOSByteArray *wnafP = OrgSpongycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(widthP, k);
  IOSByteArray *wnafQ = OrgSpongycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(widthQ, l);
  
#line 279
  return OrgSpongycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgSpongycastleMathEcECPointArray_withOrgSpongycastleMathEcECPointArray_withByteArray_withOrgSpongycastleMathEcECPointArray_withOrgSpongycastleMathEcECPointArray_withByteArray_(preCompP, preCompNegP, wnafP, preCompQ, preCompNegQ, wnafQ);
}


#line 282
OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPointMap_withJavaMathBigInteger_(OrgSpongycastleMathEcECPoint *P, JavaMathBigInteger *k, id<OrgSpongycastleMathEcECPointMap> pointMapQ, JavaMathBigInteger *l) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  jboolean negK = [((JavaMathBigInteger *) nil_chk(k)) signum] < 0;
  
#line 284
  jboolean negL = [((JavaMathBigInteger *) nil_chk(l)) signum] < 0;
  
#line 286
  k = [k abs];
  l = [l abs];
  
#line 289
  jint width = JavaLangMath_maxWithInt_withInt_(2, JavaLangMath_minWithInt_withInt_(16, OrgSpongycastleMathEcWNafUtil_getWindowSizeWithInt_(JavaLangMath_maxWithInt_withInt_([((JavaMathBigInteger *) nil_chk(k)) bitLength], [((JavaMathBigInteger *) nil_chk(l)) bitLength]))));
  
#line 291
  OrgSpongycastleMathEcECPoint *Q = OrgSpongycastleMathEcWNafUtil_mapPointWithPrecompWithOrgSpongycastleMathEcECPoint_withInt_withBoolean_withOrgSpongycastleMathEcECPointMap_(P, width, true, pointMapQ);
  OrgSpongycastleMathEcWNafPreCompInfo *infoP = OrgSpongycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgSpongycastleMathEcECPoint_(P);
  OrgSpongycastleMathEcWNafPreCompInfo *infoQ = OrgSpongycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgSpongycastleMathEcECPoint_(Q);
  
#line 295
  IOSObjectArray *preCompP = negK ? [((OrgSpongycastleMathEcWNafPreCompInfo *) nil_chk(infoP)) getPreCompNeg] : [((OrgSpongycastleMathEcWNafPreCompInfo *) nil_chk(infoP)) getPreComp];
  IOSObjectArray *preCompQ = negL ? [((OrgSpongycastleMathEcWNafPreCompInfo *) nil_chk(infoQ)) getPreCompNeg] : [((OrgSpongycastleMathEcWNafPreCompInfo *) nil_chk(infoQ)) getPreComp];
  IOSObjectArray *preCompNegP = negK ? [infoP getPreComp] : [infoP getPreCompNeg];
  IOSObjectArray *preCompNegQ = negL ? [infoQ getPreComp] : [infoQ getPreCompNeg];
  
#line 300
  IOSByteArray *wnafP = OrgSpongycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(width, k);
  IOSByteArray *wnafQ = OrgSpongycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(width, l);
  
#line 303
  return OrgSpongycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgSpongycastleMathEcECPointArray_withOrgSpongycastleMathEcECPointArray_withByteArray_withOrgSpongycastleMathEcECPointArray_withOrgSpongycastleMathEcECPointArray_withByteArray_(preCompP, preCompNegP, wnafP, preCompQ, preCompNegQ, wnafQ);
}


#line 306
OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgSpongycastleMathEcECPointArray_withOrgSpongycastleMathEcECPointArray_withByteArray_withOrgSpongycastleMathEcECPointArray_withOrgSpongycastleMathEcECPointArray_withByteArray_(IOSObjectArray *preCompP, IOSObjectArray *preCompNegP, IOSByteArray *wnafP, IOSObjectArray *preCompQ, IOSObjectArray *preCompNegQ, IOSByteArray *wnafQ) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  
#line 309
  jint len = JavaLangMath_maxWithInt_withInt_(((IOSByteArray *) nil_chk(wnafP))->size_, ((IOSByteArray *) nil_chk(wnafQ))->size_);
  
#line 311
  OrgSpongycastleMathEcECCurve *curve = [((OrgSpongycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(nil_chk(preCompP), 0))) getCurve];
  OrgSpongycastleMathEcECPoint *infinity = [((OrgSpongycastleMathEcECCurve *) nil_chk(curve)) getInfinity];
  
#line 314
  OrgSpongycastleMathEcECPoint *R = infinity;
  jint zeroes = 0;
  
#line 317
  for (jint i = len - 1; i >= 0; --i) {
    
#line 319
    jint wiP = i < wnafP->size_ ? IOSByteArray_Get(wnafP, i) : 0;
    jint wiQ = i < wnafQ->size_ ? IOSByteArray_Get(wnafQ, i) : 0;
    
#line 322
    if ((wiP | wiQ) == 0) {
      
#line 324
      ++zeroes;
      continue;
    }
    
#line 328
    OrgSpongycastleMathEcECPoint *r = infinity;
    if (wiP != 0) {
      
#line 331
      jint nP = JavaLangMath_absWithInt_(wiP);
      IOSObjectArray *tableP = wiP < 0 ? preCompNegP : preCompP;
      r = [((OrgSpongycastleMathEcECPoint *) nil_chk(r)) addWithOrgSpongycastleMathEcECPoint:IOSObjectArray_Get(tableP, JreURShift32(nP, 1))];
    }
    if (wiQ != 0) {
      
#line 337
      jint nQ = JavaLangMath_absWithInt_(wiQ);
      IOSObjectArray *tableQ = wiQ < 0 ? preCompNegQ : preCompQ;
      r = [((OrgSpongycastleMathEcECPoint *) nil_chk(r)) addWithOrgSpongycastleMathEcECPoint:IOSObjectArray_Get(tableQ, JreURShift32(nQ, 1))];
    }
    
#line 342
    if (zeroes > 0) {
      
#line 344
      R = [((OrgSpongycastleMathEcECPoint *) nil_chk(R)) timesPow2WithInt:zeroes];
      zeroes = 0;
    }
    
#line 348
    R = [((OrgSpongycastleMathEcECPoint *) nil_chk(R)) twicePlusWithOrgSpongycastleMathEcECPoint:r];
  }
  
#line 351
  if (zeroes > 0) {
    
#line 353
    R = [((OrgSpongycastleMathEcECPoint *) nil_chk(R)) timesPow2WithInt:zeroes];
  }
  
#line 356
  return R;
}


#line 359
OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcECAlgorithms_implSumOfMultipliesWithOrgSpongycastleMathEcECPointArray_withJavaMathBigIntegerArray_(IOSObjectArray *ps, IOSObjectArray *ks) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  jint count = ((IOSObjectArray *) nil_chk(ps))->size_;
  IOSBooleanArray *negs = [IOSBooleanArray newArrayWithLength:count];
  IOSObjectArray *infos = [IOSObjectArray newArrayWithLength:count type:OrgSpongycastleMathEcWNafPreCompInfo_class_()];
  IOSObjectArray *wnafs = [IOSObjectArray newArrayWithLength:count type:IOSClass_byteArray(1)];
  
#line 366
  for (jint i = 0; i < count; ++i) {
    
#line 368
    JavaMathBigInteger *ki = IOSObjectArray_Get(nil_chk(ks), i);
    
#line 368
    *IOSBooleanArray_GetRef(negs, i) = ([((JavaMathBigInteger *) nil_chk(ki)) signum] < 0);
    
#line 368
    ki = [ki abs];
    
#line 370
    jint width = JavaLangMath_maxWithInt_withInt_(2, JavaLangMath_minWithInt_withInt_(16, OrgSpongycastleMathEcWNafUtil_getWindowSizeWithInt_([((JavaMathBigInteger *) nil_chk(ki)) bitLength])));
    (void) IOSObjectArray_Set(infos, i, OrgSpongycastleMathEcWNafUtil_precomputeWithOrgSpongycastleMathEcECPoint_withInt_withBoolean_(IOSObjectArray_Get(ps, i), width, true));
    (void) IOSObjectArray_Set(wnafs, i, OrgSpongycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(width, ki));
  }
  
#line 375
  return OrgSpongycastleMathEcECAlgorithms_implSumOfMultipliesWithBooleanArray_withOrgSpongycastleMathEcWNafPreCompInfoArray_withByteArray2_(negs, infos, wnafs);
}


#line 378
OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcECAlgorithms_implSumOfMultipliesGLVWithOrgSpongycastleMathEcECPointArray_withJavaMathBigIntegerArray_withOrgSpongycastleMathEcEndoGLVEndomorphism_(IOSObjectArray *ps, IOSObjectArray *ks, id<OrgSpongycastleMathEcEndoGLVEndomorphism> glvEndomorphism) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  JavaMathBigInteger *n = [((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(nil_chk(ps), 0))) getCurve])) getOrder];
  
#line 382
  jint len = ps->size_;
  
#line 384
  IOSObjectArray *abs = [IOSObjectArray newArrayWithLength:JreLShift32(len, 1) type:JavaMathBigInteger_class_()];
  for (jint i = 0, j = 0; i < len; ++i) {
    
#line 387
    IOSObjectArray *ab = [((id<OrgSpongycastleMathEcEndoGLVEndomorphism>) nil_chk(glvEndomorphism)) decomposeScalarWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(ks), i))) modWithJavaMathBigInteger:n]];
    (void) IOSObjectArray_Set(abs, j++, IOSObjectArray_Get(nil_chk(ab), 0));
    (void) IOSObjectArray_Set(abs, j++, IOSObjectArray_Get(ab, 1));
  }
  
#line 392
  id<OrgSpongycastleMathEcECPointMap> pointMap = [((id<OrgSpongycastleMathEcEndoGLVEndomorphism>) nil_chk(glvEndomorphism)) getPointMap];
  if ([glvEndomorphism hasEfficientPointMap]) {
    
#line 395
    return OrgSpongycastleMathEcECAlgorithms_implSumOfMultipliesWithOrgSpongycastleMathEcECPointArray_withOrgSpongycastleMathEcECPointMap_withJavaMathBigIntegerArray_(ps, pointMap, abs);
  }
  
#line 398
  IOSObjectArray *pqs = [IOSObjectArray newArrayWithLength:JreLShift32(len, 1) type:OrgSpongycastleMathEcECPoint_class_()];
  for (jint i = 0, j = 0; i < len; ++i) {
    
#line 401
    OrgSpongycastleMathEcECPoint *p = IOSObjectArray_Get(ps, i);
    
#line 401
    OrgSpongycastleMathEcECPoint *q = [((id<OrgSpongycastleMathEcECPointMap>) nil_chk(pointMap)) mapWithOrgSpongycastleMathEcECPoint:p];
    (void) IOSObjectArray_Set(pqs, j++, p);
    (void) IOSObjectArray_Set(pqs, j++, q);
  }
  
#line 406
  return OrgSpongycastleMathEcECAlgorithms_implSumOfMultipliesWithOrgSpongycastleMathEcECPointArray_withJavaMathBigIntegerArray_(pqs, abs);
}


#line 410
OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcECAlgorithms_implSumOfMultipliesWithOrgSpongycastleMathEcECPointArray_withOrgSpongycastleMathEcECPointMap_withJavaMathBigIntegerArray_(IOSObjectArray *ps, id<OrgSpongycastleMathEcECPointMap> pointMap, IOSObjectArray *ks) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  jint halfCount = ((IOSObjectArray *) nil_chk(ps))->size_;
  
#line 412
  jint fullCount = JreLShift32(halfCount, 1);
  
#line 414
  IOSBooleanArray *negs = [IOSBooleanArray newArrayWithLength:fullCount];
  IOSObjectArray *infos = [IOSObjectArray newArrayWithLength:fullCount type:OrgSpongycastleMathEcWNafPreCompInfo_class_()];
  IOSObjectArray *wnafs = [IOSObjectArray newArrayWithLength:fullCount type:IOSClass_byteArray(1)];
  
#line 418
  for (jint i = 0; i < halfCount; ++i) {
    
#line 420
    jint j0 = JreLShift32(i, 1);
    
#line 420
    jint j1 = j0 + 1;
    
#line 422
    JavaMathBigInteger *kj0 = IOSObjectArray_Get(nil_chk(ks), j0);
    
#line 422
    *IOSBooleanArray_GetRef(negs, j0) = ([((JavaMathBigInteger *) nil_chk(kj0)) signum] < 0);
    
#line 422
    kj0 = [kj0 abs];
    JavaMathBigInteger *kj1 = IOSObjectArray_Get(ks, j1);
    
#line 423
    *IOSBooleanArray_GetRef(negs, j1) = ([((JavaMathBigInteger *) nil_chk(kj1)) signum] < 0);
    
#line 423
    kj1 = [kj1 abs];
    
#line 425
    jint width = JavaLangMath_maxWithInt_withInt_(2, JavaLangMath_minWithInt_withInt_(16, OrgSpongycastleMathEcWNafUtil_getWindowSizeWithInt_(JavaLangMath_maxWithInt_withInt_([((JavaMathBigInteger *) nil_chk(kj0)) bitLength], [((JavaMathBigInteger *) nil_chk(kj1)) bitLength]))));
    
#line 427
    OrgSpongycastleMathEcECPoint *P = IOSObjectArray_Get(ps, i);
    
#line 427
    OrgSpongycastleMathEcECPoint *Q = OrgSpongycastleMathEcWNafUtil_mapPointWithPrecompWithOrgSpongycastleMathEcECPoint_withInt_withBoolean_withOrgSpongycastleMathEcECPointMap_(P, width, true, pointMap);
    (void) IOSObjectArray_Set(infos, j0, OrgSpongycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgSpongycastleMathEcECPoint_(P));
    (void) IOSObjectArray_Set(infos, j1, OrgSpongycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgSpongycastleMathEcECPoint_(Q));
    (void) IOSObjectArray_Set(wnafs, j0, OrgSpongycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(width, kj0));
    (void) IOSObjectArray_Set(wnafs, j1, OrgSpongycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(width, kj1));
  }
  
#line 434
  return OrgSpongycastleMathEcECAlgorithms_implSumOfMultipliesWithBooleanArray_withOrgSpongycastleMathEcWNafPreCompInfoArray_withByteArray2_(negs, infos, wnafs);
}


#line 437
OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcECAlgorithms_implSumOfMultipliesWithBooleanArray_withOrgSpongycastleMathEcWNafPreCompInfoArray_withByteArray2_(IOSBooleanArray *negs, IOSObjectArray *infos, IOSObjectArray *wnafs) {
  OrgSpongycastleMathEcECAlgorithms_initialize();
  jint len = 0;
  
#line 439
  jint count = ((IOSObjectArray *) nil_chk(wnafs))->size_;
  for (jint i = 0; i < count; ++i) {
    
#line 442
    len = JavaLangMath_maxWithInt_withInt_(len, ((IOSByteArray *) nil_chk(IOSObjectArray_Get(wnafs, i)))->size_);
  }
  
#line 445
  OrgSpongycastleMathEcECCurve *curve = [((OrgSpongycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(nil_chk([((OrgSpongycastleMathEcWNafPreCompInfo *) nil_chk(IOSObjectArray_Get(nil_chk(infos), 0))) getPreComp]), 0))) getCurve];
  OrgSpongycastleMathEcECPoint *infinity = [((OrgSpongycastleMathEcECCurve *) nil_chk(curve)) getInfinity];
  
#line 448
  OrgSpongycastleMathEcECPoint *R = infinity;
  jint zeroes = 0;
  
#line 451
  for (jint i = len - 1; i >= 0; --i) {
    
#line 453
    OrgSpongycastleMathEcECPoint *r = infinity;
    
#line 455
    for (jint j = 0; j < count; ++j) {
      
#line 457
      IOSByteArray *wnaf = IOSObjectArray_Get(wnafs, j);
      jint wi = i < ((IOSByteArray *) nil_chk(wnaf))->size_ ? IOSByteArray_Get(wnaf, i) : 0;
      if (wi != 0) {
        
#line 461
        jint n = JavaLangMath_absWithInt_(wi);
        OrgSpongycastleMathEcWNafPreCompInfo *info = IOSObjectArray_Get(infos, j);
        IOSObjectArray *table = (wi < 0 == IOSBooleanArray_Get(nil_chk(negs), j)) ? [((OrgSpongycastleMathEcWNafPreCompInfo *) nil_chk(info)) getPreComp] : [((OrgSpongycastleMathEcWNafPreCompInfo *) nil_chk(info)) getPreCompNeg];
        r = [((OrgSpongycastleMathEcECPoint *) nil_chk(r)) addWithOrgSpongycastleMathEcECPoint:IOSObjectArray_Get(table, JreURShift32(n, 1))];
      }
    }
    
#line 468
    if (JreObjectEqualsEquals(r, infinity)) {
      
#line 470
      ++zeroes;
      continue;
    }
    
#line 474
    if (zeroes > 0) {
      
#line 476
      R = [((OrgSpongycastleMathEcECPoint *) nil_chk(R)) timesPow2WithInt:zeroes];
      zeroes = 0;
    }
    
#line 480
    R = [((OrgSpongycastleMathEcECPoint *) nil_chk(R)) twicePlusWithOrgSpongycastleMathEcECPoint:r];
  }
  
#line 483
  if (zeroes > 0) {
    
#line 485
    R = [((OrgSpongycastleMathEcECPoint *) nil_chk(R)) timesPow2WithInt:zeroes];
  }
  
#line 488
  return R;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcECAlgorithms)
