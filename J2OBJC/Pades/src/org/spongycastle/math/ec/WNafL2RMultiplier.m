//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/math/ec/WNafL2RMultiplier.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/math/ec/AbstractECMultiplier.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECPoint.h"
#include "org/spongycastle/math/ec/LongArray.h"
#include "org/spongycastle/math/ec/WNafL2RMultiplier.h"
#include "org/spongycastle/math/ec/WNafPreCompInfo.h"
#include "org/spongycastle/math/ec/WNafUtil.h"

#if !__has_feature(objc_arc)
#error "org/spongycastle/math/ec/WNafL2RMultiplier must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/math/ec/WNafL2RMultiplier.java"


#line 9
@implementation OrgSpongycastleMathEcWNafL2RMultiplier

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 9
- (instancetype)init {
  OrgSpongycastleMathEcWNafL2RMultiplier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 18
- (OrgSpongycastleMathEcECPoint *)multiplyPositiveWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p
                                                            withJavaMathBigInteger:(JavaMathBigInteger *)k {
  
#line 21
  jint width = JavaLangMath_maxWithInt_withInt_(2, JavaLangMath_minWithInt_withInt_(16, [self getWindowSizeWithInt:[((JavaMathBigInteger *) nil_chk(k)) bitLength]]));
  
#line 23
  OrgSpongycastleMathEcWNafPreCompInfo *wnafPreCompInfo = OrgSpongycastleMathEcWNafUtil_precomputeWithOrgSpongycastleMathEcECPoint_withInt_withBoolean_(p, width, true);
  IOSObjectArray *preComp = [((OrgSpongycastleMathEcWNafPreCompInfo *) nil_chk(wnafPreCompInfo)) getPreComp];
  IOSObjectArray *preCompNeg = [wnafPreCompInfo getPreCompNeg];
  
#line 27
  IOSIntArray *wnaf = OrgSpongycastleMathEcWNafUtil_generateCompactWindowNafWithInt_withJavaMathBigInteger_(width, k);
  
#line 29
  OrgSpongycastleMathEcECPoint *R = [((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getCurve])) getInfinity];
  
#line 31
  jint i = ((IOSIntArray *) nil_chk(wnaf))->size_;
  
#line 37
  if (i > 1) {
    
#line 39
    jint wi = IOSIntArray_Get(wnaf, --i);
    jint digit = JreRShift32(wi, 16);
    
#line 40
    jint zeroes = wi & (jint) 0xFFFF;
    
#line 42
    jint n = JavaLangMath_absWithInt_(digit);
    IOSObjectArray *table = digit < 0 ? preCompNeg : preComp;
    
#line 46
    if ((JreLShift32(n, 2)) < (JreLShift32(1, width))) {
      
#line 48
      jint highest = IOSByteArray_Get(nil_chk(JreLoadStatic(OrgSpongycastleMathEcLongArray, bitLengths)), n);
      
#line 51
      jint scale_ = width - highest;
      jint lowBits = n ^ (JreLShift32(1, (highest - 1)));
      
#line 54
      jint i1 = ((JreLShift32(1, (width - 1))) - 1);
      jint i2 = (JreLShift32(lowBits, scale_)) + 1;
      R = [((OrgSpongycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(table, JreURShift32(i1, 1)))) addWithOrgSpongycastleMathEcECPoint:IOSObjectArray_Get(table, JreURShift32(i2, 1))];
      
#line 58
      zeroes -= scale_;
    }
    else {
      
#line 64
      R = IOSObjectArray_Get(table, JreURShift32(n, 1));
    }
    
#line 67
    R = [((OrgSpongycastleMathEcECPoint *) nil_chk(R)) timesPow2WithInt:zeroes];
  }
  
#line 70
  while (i > 0) {
    
#line 72
    jint wi = IOSIntArray_Get(wnaf, --i);
    jint digit = JreRShift32(wi, 16);
    
#line 73
    jint zeroes = wi & (jint) 0xFFFF;
    
#line 75
    jint n = JavaLangMath_absWithInt_(digit);
    IOSObjectArray *table = digit < 0 ? preCompNeg : preComp;
    OrgSpongycastleMathEcECPoint *r = IOSObjectArray_Get(table, JreURShift32(n, 1));
    
#line 79
    R = [((OrgSpongycastleMathEcECPoint *) nil_chk(R)) twicePlusWithOrgSpongycastleMathEcECPoint:r];
    R = [((OrgSpongycastleMathEcECPoint *) nil_chk(R)) timesPow2WithInt:zeroes];
  }
  
#line 83
  return R;
}


#line 92
- (jint)getWindowSizeWithInt:(jint)bits {
  
#line 94
  return OrgSpongycastleMathEcWNafUtil_getWindowSizeWithInt_(bits);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(multiplyPositiveWithOrgSpongycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[2].selector = @selector(getWindowSizeWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "multiplyPositive", "LOrgSpongycastleMathEcECPoint;LJavaMathBigInteger;", "getWindowSize", "I" };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcWNafL2RMultiplier = { "WNafL2RMultiplier", "org.spongycastle.math.ec", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleMathEcWNafL2RMultiplier;
}

@end


#line 9
void OrgSpongycastleMathEcWNafL2RMultiplier_init(OrgSpongycastleMathEcWNafL2RMultiplier *self) {
  OrgSpongycastleMathEcAbstractECMultiplier_init(self);
}


#line 9
OrgSpongycastleMathEcWNafL2RMultiplier *new_OrgSpongycastleMathEcWNafL2RMultiplier_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcWNafL2RMultiplier, init)
}


#line 9
OrgSpongycastleMathEcWNafL2RMultiplier *create_OrgSpongycastleMathEcWNafL2RMultiplier_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcWNafL2RMultiplier, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcWNafL2RMultiplier)
