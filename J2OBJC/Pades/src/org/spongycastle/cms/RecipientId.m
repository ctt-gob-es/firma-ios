//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/cms/RecipientId.java
//

#include "J2ObjC_source.h"
#include "org/spongycastle/cms/RecipientId.h"

#if !__has_feature(objc_arc)
#error "org/spongycastle/cms/RecipientId must be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgSpongycastleCmsRecipientId () {
 @public
  jint type_;
}

@end

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/cms/RecipientId.java"


#line 5
@implementation OrgSpongycastleCmsRecipientId


#line 15
- (instancetype)initWithInt:(jint)type {
  OrgSpongycastleCmsRecipientId_initWithInt_(self, type);
  return self;
}


#line 25
- (jint)getType {
  
#line 27
  return type_;
}


#line 30
- (id)java_clone {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)clone {
  return [self java_clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(getType);
  methods[2].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keyTrans", "I", .constantValue.asInt = OrgSpongycastleCmsRecipientId_keyTrans, 0x19, -1, -1, -1, -1 },
    { "kek", "I", .constantValue.asInt = OrgSpongycastleCmsRecipientId_kek, 0x19, -1, -1, -1, -1 },
    { "keyAgree", "I", .constantValue.asInt = OrgSpongycastleCmsRecipientId_keyAgree, 0x19, -1, -1, -1, -1 },
    { "password", "I", .constantValue.asInt = OrgSpongycastleCmsRecipientId_password, 0x19, -1, -1, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "clone" };
  static const J2ObjcClassInfo _OrgSpongycastleCmsRecipientId = { "RecipientId", "org.spongycastle.cms", ptrTable, methods, fields, 7, 0x401, 3, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCmsRecipientId;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end


#line 15
void OrgSpongycastleCmsRecipientId_initWithInt_(OrgSpongycastleCmsRecipientId *self, jint type) {
  NSObject_init(self);
  self->type_ = type;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCmsRecipientId)
