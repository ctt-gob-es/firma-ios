//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/util/Properties.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/math/BigInteger.h"
#include "java/security/AccessControlException.h"
#include "java/security/AccessController.h"
#include "java/security/PrivilegedAction.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"
#include "org/spongycastle/util/Properties.h"
#include "org/spongycastle/util/Strings.h"

#if !__has_feature(objc_arc)
#error "org/spongycastle/util/Properties must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleUtilProperties ()

- (instancetype)init;

+ (NSString *)fetchPropertyWithNSString:(NSString *)propertyName;

@end

inline JavaLangThreadLocal *OrgSpongycastleUtilProperties_get_threadProperties(void);
static JavaLangThreadLocal *OrgSpongycastleUtilProperties_threadProperties;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleUtilProperties, threadProperties, JavaLangThreadLocal *)

__attribute__((unused)) static void OrgSpongycastleUtilProperties_init(OrgSpongycastleUtilProperties *self);

__attribute__((unused)) static OrgSpongycastleUtilProperties *new_OrgSpongycastleUtilProperties_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleUtilProperties *create_OrgSpongycastleUtilProperties_init(void);

__attribute__((unused)) static NSString *OrgSpongycastleUtilProperties_fetchPropertyWithNSString_(NSString *propertyName);

@interface OrgSpongycastleUtilProperties_1 : NSObject < JavaSecurityPrivilegedAction > {
 @public
  NSString *val$propertyName_;
}

- (instancetype)initWithNSString:(NSString *)capture$0;

- (id)run;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleUtilProperties_1)

__attribute__((unused)) static void OrgSpongycastleUtilProperties_1_initWithNSString_(OrgSpongycastleUtilProperties_1 *self, NSString *capture$0);

__attribute__((unused)) static OrgSpongycastleUtilProperties_1 *new_OrgSpongycastleUtilProperties_1_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleUtilProperties_1 *create_OrgSpongycastleUtilProperties_1_initWithNSString_(NSString *capture$0);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/util/Properties.java"

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleUtilProperties)


#line 17
@implementation OrgSpongycastleUtilProperties

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 19
- (instancetype)init {
  OrgSpongycastleUtilProperties_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 32
+ (jboolean)isOverrideSetWithNSString:(NSString *)propertyName {
  return OrgSpongycastleUtilProperties_isOverrideSetWithNSString_(propertyName);
}


#line 58
+ (jboolean)setThreadOverrideWithNSString:(NSString *)propertyName
                              withBoolean:(jboolean)enable {
  return OrgSpongycastleUtilProperties_setThreadOverrideWithNSString_withBoolean_(propertyName, enable);
}


#line 81
+ (jboolean)removeThreadOverrideWithNSString:(NSString *)propertyName {
  return OrgSpongycastleUtilProperties_removeThreadOverrideWithNSString_(propertyName);
}


#line 105
+ (JavaMathBigInteger *)asBigIntegerWithNSString:(NSString *)propertyName {
  return OrgSpongycastleUtilProperties_asBigIntegerWithNSString_(propertyName);
}


#line 117
+ (id<JavaUtilSet>)asKeySetWithNSString:(NSString *)propertyName {
  return OrgSpongycastleUtilProperties_asKeySetWithNSString_(propertyName);
}


#line 135
+ (NSString *)fetchPropertyWithNSString:(NSString *)propertyName {
  return OrgSpongycastleUtilProperties_fetchPropertyWithNSString_(propertyName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 6, 1, -1, 7, -1, -1 },
    { NULL, "LNSString;", 0xa, 8, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isOverrideSetWithNSString:);
  methods[2].selector = @selector(setThreadOverrideWithNSString:withBoolean:);
  methods[3].selector = @selector(removeThreadOverrideWithNSString:);
  methods[4].selector = @selector(asBigIntegerWithNSString:);
  methods[5].selector = @selector(asKeySetWithNSString:);
  methods[6].selector = @selector(fetchPropertyWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "threadProperties", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "isOverrideSet", "LNSString;", "setThreadOverride", "LNSString;Z", "removeThreadOverride", "asBigInteger", "asKeySet", "(Ljava/lang/String;)Ljava/util/Set<Ljava/lang/String;>;", "fetchProperty", &OrgSpongycastleUtilProperties_threadProperties };
  static const J2ObjcClassInfo _OrgSpongycastleUtilProperties = { "Properties", "org.spongycastle.util", ptrTable, methods, fields, 7, 0x1, 7, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleUtilProperties;
}

+ (void)initialize {
  if (self == [OrgSpongycastleUtilProperties class]) {
    OrgSpongycastleUtilProperties_threadProperties = new_JavaLangThreadLocal_init();
    J2OBJC_SET_INITIALIZED(OrgSpongycastleUtilProperties)
  }
}

@end


#line 19
void OrgSpongycastleUtilProperties_init(OrgSpongycastleUtilProperties *self) {
  NSObject_init(self);
}


#line 19
OrgSpongycastleUtilProperties *new_OrgSpongycastleUtilProperties_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleUtilProperties, init)
}


#line 19
OrgSpongycastleUtilProperties *create_OrgSpongycastleUtilProperties_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleUtilProperties, init)
}


#line 32
jboolean OrgSpongycastleUtilProperties_isOverrideSetWithNSString_(NSString *propertyName) {
  OrgSpongycastleUtilProperties_initialize();
  @try {
    
#line 36
    NSString *p = OrgSpongycastleUtilProperties_fetchPropertyWithNSString_(propertyName);
    
#line 38
    if (p != nil) {
      
#line 40
      return [@"true" isEqual:OrgSpongycastleUtilStrings_toLowerCaseWithNSString_(p)];
    }
    
#line 43
    return false;
  }
  @catch (JavaSecurityAccessControlException *e) {
    
#line 47
    return false;
  }
}


#line 58
jboolean OrgSpongycastleUtilProperties_setThreadOverrideWithNSString_withBoolean_(NSString *propertyName, jboolean enable) {
  OrgSpongycastleUtilProperties_initialize();
  jboolean isSet = OrgSpongycastleUtilProperties_isOverrideSetWithNSString_(propertyName);
  
#line 62
  id<JavaUtilMap> localProps = (id<JavaUtilMap>) cast_check([((JavaLangThreadLocal *) nil_chk(OrgSpongycastleUtilProperties_threadProperties)) get], JavaUtilMap_class_());
  if (localProps == nil) {
    
#line 65
    localProps = new_JavaUtilHashMap_init();
  }
  
#line 68
  (void) [localProps putWithId:propertyName withId:enable ? @"true" : @"false"];
  
#line 70
  [OrgSpongycastleUtilProperties_threadProperties setWithId:localProps];
  
#line 72
  return isSet;
}


#line 81
jboolean OrgSpongycastleUtilProperties_removeThreadOverrideWithNSString_(NSString *propertyName) {
  OrgSpongycastleUtilProperties_initialize();
  jboolean isSet = OrgSpongycastleUtilProperties_isOverrideSetWithNSString_(propertyName);
  
#line 85
  id<JavaUtilMap> localProps = (id<JavaUtilMap>) cast_check([((JavaLangThreadLocal *) nil_chk(OrgSpongycastleUtilProperties_threadProperties)) get], JavaUtilMap_class_());
  if (localProps == nil) {
    
#line 88
    return false;
  }
  
#line 91
  (void) [localProps removeWithId:propertyName];
  
#line 93
  if ([localProps isEmpty]) {
    
#line 95
    [OrgSpongycastleUtilProperties_threadProperties remove];
  }
  else {
    
#line 99
    [OrgSpongycastleUtilProperties_threadProperties setWithId:localProps];
  }
  
#line 102
  return isSet;
}


#line 105
JavaMathBigInteger *OrgSpongycastleUtilProperties_asBigIntegerWithNSString_(NSString *propertyName) {
  OrgSpongycastleUtilProperties_initialize();
  NSString *p = OrgSpongycastleUtilProperties_fetchPropertyWithNSString_(propertyName);
  
#line 109
  if (p != nil) {
    
#line 111
    return new_JavaMathBigInteger_initWithNSString_(p);
  }
  
#line 114
  return nil;
}


#line 117
id<JavaUtilSet> OrgSpongycastleUtilProperties_asKeySetWithNSString_(NSString *propertyName) {
  OrgSpongycastleUtilProperties_initialize();
  id<JavaUtilSet> set = new_JavaUtilHashSet_init();
  
#line 121
  NSString *p = OrgSpongycastleUtilProperties_fetchPropertyWithNSString_(propertyName);
  
#line 123
  if (p != nil) {
    
#line 125
    JavaUtilStringTokenizer *sTok = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(p, @",");
    while ([sTok hasMoreElements]) {
      
#line 128
      [set addWithId:[((NSString *) nil_chk(OrgSpongycastleUtilStrings_toLowerCaseWithNSString_([sTok nextToken]))) java_trim]];
    }
  }
  
#line 132
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(set);
}


#line 135
NSString *OrgSpongycastleUtilProperties_fetchPropertyWithNSString_(NSString *propertyName) {
  OrgSpongycastleUtilProperties_initialize();
  return (NSString *) cast_chk(JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedAction_(new_OrgSpongycastleUtilProperties_1_initWithNSString_(propertyName)), [NSString class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleUtilProperties)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/util/Properties.java"


#line 138
@implementation OrgSpongycastleUtilProperties_1


#line 138
- (instancetype)initWithNSString:(NSString *)capture$0 {
  OrgSpongycastleUtilProperties_1_initWithNSString_(self, capture$0);
  return self;
}


#line 139
- (id)run {
  
#line 141
  id<JavaUtilMap> localProps = (id<JavaUtilMap>) cast_check([((JavaLangThreadLocal *) nil_chk(JreLoadStatic(OrgSpongycastleUtilProperties, threadProperties))) get], JavaUtilMap_class_());
  if (localProps != nil) {
    
#line 144
    return JreRetainedLocalValue([localProps getWithId:val$propertyName_]);
  }
  
#line 147
  return JavaLangSystem_getPropertyWithNSString_(val$propertyName_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$propertyName_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LOrgSpongycastleUtilProperties;", "fetchPropertyWithNSString:" };
  static const J2ObjcClassInfo _OrgSpongycastleUtilProperties_1 = { "", "org.spongycastle.util", ptrTable, methods, fields, 7, 0x8000, 2, 1, 1, -1, 2, -1, -1 };
  return &_OrgSpongycastleUtilProperties_1;
}

@end


#line 138
void OrgSpongycastleUtilProperties_1_initWithNSString_(OrgSpongycastleUtilProperties_1 *self, NSString *capture$0) {
  self->val$propertyName_ = capture$0;
  NSObject_init(self);
}


#line 138
OrgSpongycastleUtilProperties_1 *new_OrgSpongycastleUtilProperties_1_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(OrgSpongycastleUtilProperties_1, initWithNSString_, capture$0)
}


#line 138
OrgSpongycastleUtilProperties_1 *create_OrgSpongycastleUtilProperties_1_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleUtilProperties_1, initWithNSString_, capture$0)
}
