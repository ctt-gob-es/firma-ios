//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/util/Strings.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/security/AccessController.h"
#include "java/security/PrivilegedAction.h"
#include "java/util/ArrayList.h"
#include "java/util/Vector.h"
#include "org/spongycastle/util/StringList.h"
#include "org/spongycastle/util/Strings.h"

#if !__has_feature(objc_arc)
#error "org/spongycastle/util/Strings must be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline NSString *OrgSpongycastleUtilStrings_get_LINE_SEPARATOR(void);
inline NSString *OrgSpongycastleUtilStrings_set_LINE_SEPARATOR(NSString *value);
static NSString *OrgSpongycastleUtilStrings_LINE_SEPARATOR;
J2OBJC_STATIC_FIELD_OBJ(OrgSpongycastleUtilStrings, LINE_SEPARATOR, NSString *)

@interface OrgSpongycastleUtilStrings_1 : NSObject < JavaSecurityPrivilegedAction >

- (instancetype)init;

- (NSString *)run;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleUtilStrings_1)

__attribute__((unused)) static void OrgSpongycastleUtilStrings_1_init(OrgSpongycastleUtilStrings_1 *self);

__attribute__((unused)) static OrgSpongycastleUtilStrings_1 *new_OrgSpongycastleUtilStrings_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleUtilStrings_1 *create_OrgSpongycastleUtilStrings_1_init(void);

@interface OrgSpongycastleUtilStrings_StringListImpl : JavaUtilArrayList < OrgSpongycastleUtilStringList >

- (instancetype)init;

- (jboolean)addWithId:(NSString *)s;

- (NSString *)setWithInt:(jint)index
                  withId:(NSString *)element;

- (void)addWithInt:(jint)index
            withId:(NSString *)element;

- (IOSObjectArray *)toStringArray;

- (IOSObjectArray *)toStringArrayWithInt:(jint)from
                                 withInt:(jint)to;

- (NSString *)removeWithInt:(jint)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleUtilStrings_StringListImpl)

__attribute__((unused)) static void OrgSpongycastleUtilStrings_StringListImpl_init(OrgSpongycastleUtilStrings_StringListImpl *self);

__attribute__((unused)) static OrgSpongycastleUtilStrings_StringListImpl *new_OrgSpongycastleUtilStrings_StringListImpl_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleUtilStrings_StringListImpl *create_OrgSpongycastleUtilStrings_StringListImpl_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleUtilStrings_StringListImpl)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/util/Strings.java"

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleUtilStrings)


#line 14
@implementation OrgSpongycastleUtilStrings

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 14
- (instancetype)init {
  OrgSpongycastleUtilStrings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 46
+ (NSString *)fromUTF8ByteArrayWithByteArray:(IOSByteArray *)bytes {
  return OrgSpongycastleUtilStrings_fromUTF8ByteArrayWithByteArray_(bytes);
}


#line 121
+ (IOSByteArray *)toUTF8ByteArrayWithNSString:(NSString *)string {
  return OrgSpongycastleUtilStrings_toUTF8ByteArrayWithNSString_(string);
}


#line 126
+ (IOSByteArray *)toUTF8ByteArrayWithCharArray:(IOSCharArray *)string {
  return OrgSpongycastleUtilStrings_toUTF8ByteArrayWithCharArray_(string);
}


#line 142
+ (void)toUTF8ByteArrayWithCharArray:(IOSCharArray *)string
              withJavaIoOutputStream:(JavaIoOutputStream *)sOut {
  OrgSpongycastleUtilStrings_toUTF8ByteArrayWithCharArray_withJavaIoOutputStream_(string, sOut);
}


#line 202
+ (NSString *)toUpperCaseWithNSString:(NSString *)string {
  return OrgSpongycastleUtilStrings_toUpperCaseWithNSString_(string);
}


#line 231
+ (NSString *)toLowerCaseWithNSString:(NSString *)string {
  return OrgSpongycastleUtilStrings_toLowerCaseWithNSString_(string);
}


#line 254
+ (IOSByteArray *)toByteArrayWithCharArray:(IOSCharArray *)chars {
  return OrgSpongycastleUtilStrings_toByteArrayWithCharArray_(chars);
}


#line 266
+ (IOSByteArray *)toByteArrayWithNSString:(NSString *)string {
  return OrgSpongycastleUtilStrings_toByteArrayWithNSString_(string);
}


#line 280
+ (jint)toByteArrayWithNSString:(NSString *)s
                  withByteArray:(IOSByteArray *)buf
                        withInt:(jint)off {
  return OrgSpongycastleUtilStrings_toByteArrayWithNSString_withByteArray_withInt_(s, buf, off);
}


#line 297
+ (NSString *)fromByteArrayWithByteArray:(IOSByteArray *)bytes {
  return OrgSpongycastleUtilStrings_fromByteArrayWithByteArray_(bytes);
}


#line 308
+ (IOSCharArray *)asCharArrayWithByteArray:(IOSByteArray *)bytes {
  return OrgSpongycastleUtilStrings_asCharArrayWithByteArray_(bytes);
}


#line 320
+ (IOSObjectArray *)splitWithNSString:(NSString *)input
                             withChar:(jchar)delimiter {
  return OrgSpongycastleUtilStrings_splitWithNSString_withChar_(input, delimiter);
}


#line 351
+ (id<OrgSpongycastleUtilStringList>)newList {
  return OrgSpongycastleUtilStrings_newList();
}


#line 356
+ (NSString *)lineSeparator {
  return OrgSpongycastleUtilStrings_lineSeparator();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 5, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 8, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 9, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 9, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 11, 1, -1, -1, -1, -1 },
    { NULL, "[C", 0x9, 12, 1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleUtilStringList;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(fromUTF8ByteArrayWithByteArray:);
  methods[2].selector = @selector(toUTF8ByteArrayWithNSString:);
  methods[3].selector = @selector(toUTF8ByteArrayWithCharArray:);
  methods[4].selector = @selector(toUTF8ByteArrayWithCharArray:withJavaIoOutputStream:);
  methods[5].selector = @selector(toUpperCaseWithNSString:);
  methods[6].selector = @selector(toLowerCaseWithNSString:);
  methods[7].selector = @selector(toByteArrayWithCharArray:);
  methods[8].selector = @selector(toByteArrayWithNSString:);
  methods[9].selector = @selector(toByteArrayWithNSString:withByteArray:withInt:);
  methods[10].selector = @selector(fromByteArrayWithByteArray:);
  methods[11].selector = @selector(asCharArrayWithByteArray:);
  methods[12].selector = @selector(splitWithNSString:withChar:);
  methods[13].selector = @selector(newList);
  methods[14].selector = @selector(lineSeparator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LINE_SEPARATOR", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 15, -1, -1 },
  };
  static const void *ptrTable[] = { "fromUTF8ByteArray", "[B", "toUTF8ByteArray", "LNSString;", "[C", "[CLJavaIoOutputStream;", "LJavaIoIOException;", "toUpperCase", "toLowerCase", "toByteArray", "LNSString;[BI", "fromByteArray", "asCharArray", "split", "LNSString;C", &OrgSpongycastleUtilStrings_LINE_SEPARATOR, "LOrgSpongycastleUtilStrings_StringListImpl;" };
  static const J2ObjcClassInfo _OrgSpongycastleUtilStrings = { "Strings", "org.spongycastle.util", ptrTable, methods, fields, 7, 0x11, 15, 1, -1, 16, -1, -1, -1 };
  return &_OrgSpongycastleUtilStrings;
}

+ (void)initialize {
  if (self == [OrgSpongycastleUtilStrings class]) {
    {
      
#line 20
      @try {
        
#line 22
        OrgSpongycastleUtilStrings_LINE_SEPARATOR = JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedAction_(new_OrgSpongycastleUtilStrings_1_init());
      }
      @catch (
#line 32
      JavaLangException *e) {
        
#line 34
        @try {
          
#line 37
          OrgSpongycastleUtilStrings_LINE_SEPARATOR = NSString_java_formatWithNSString_withNSObjectArray_(@"%n", [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
        }
        @catch (JavaLangException *ef) {
          
#line 41
          OrgSpongycastleUtilStrings_LINE_SEPARATOR = @"\n";
        }
      }
    }
    J2OBJC_SET_INITIALIZED(OrgSpongycastleUtilStrings)
  }
}

@end


#line 14
void OrgSpongycastleUtilStrings_init(OrgSpongycastleUtilStrings *self) {
  NSObject_init(self);
}


#line 14
OrgSpongycastleUtilStrings *new_OrgSpongycastleUtilStrings_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleUtilStrings, init)
}


#line 14
OrgSpongycastleUtilStrings *create_OrgSpongycastleUtilStrings_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleUtilStrings, init)
}


#line 46
NSString *OrgSpongycastleUtilStrings_fromUTF8ByteArrayWithByteArray_(IOSByteArray *bytes) {
  OrgSpongycastleUtilStrings_initialize();
  jint i = 0;
  jint length = 0;
  
#line 51
  while (i < ((IOSByteArray *) nil_chk(bytes))->size_) {
    
#line 53
    length++;
    if ((IOSByteArray_Get(bytes, i) & (jint) 0xf0) == (jint) 0xf0) {
      
#line 57
      length++;
      i += 4;
    }
    else if ((IOSByteArray_Get(bytes, i) & (jint) 0xe0) == (jint) 0xe0) {
      
#line 62
      i += 3;
    }
    else if ((IOSByteArray_Get(bytes, i) & (jint) 0xc0) == (jint) 0xc0) {
      
#line 66
      i += 2;
    }
    else {
      
#line 70
      i += 1;
    }
  }
  
#line 74
  IOSCharArray *cs = [IOSCharArray newArrayWithLength:length];
  
#line 76
  i = 0;
  length = 0;
  
#line 79
  while (i < bytes->size_) {
    
#line 81
    jchar ch;
    
#line 83
    if ((IOSByteArray_Get(bytes, i) & (jint) 0xf0) == (jint) 0xf0) {
      
#line 85
      jint codePoint = (JreLShift32((IOSByteArray_Get(bytes, i) & (jint) 0x03), 18)) | (JreLShift32((IOSByteArray_Get(bytes, i + 1) & (jint) 0x3F), 12)) | (JreLShift32((IOSByteArray_Get(bytes, i + 2) & (jint) 0x3F), 6)) | (IOSByteArray_Get(bytes, i + 3) & (jint) 0x3F);
      jint U = codePoint - (jint) 0x10000;
      jchar W1 = (jchar) ((jint) 0xD800 | (JreRShift32(U, 10)));
      jchar W2 = (jchar) ((jint) 0xDC00 | (U & (jint) 0x3FF));
      *IOSCharArray_GetRef(cs, length++) = W1;
      ch = W2;
      i += 4;
    }
    else if ((IOSByteArray_Get(bytes, i) & (jint) 0xe0) == (jint) 0xe0) {
      
#line 95
      ch = (jchar) ((JreLShift32((IOSByteArray_Get(bytes, i) & (jint) 0x0f), 12)) |
#line 96
      (JreLShift32((IOSByteArray_Get(bytes, i + 1) & (jint) 0x3f), 6)) | (IOSByteArray_Get(bytes, i + 2) & (jint) 0x3f));
      i += 3;
    }
    else if ((IOSByteArray_Get(bytes, i) & (jint) 0xd0) == (jint) 0xd0) {
      
#line 101
      ch = (jchar) ((JreLShift32((IOSByteArray_Get(bytes, i) & (jint) 0x1f), 6)) | (IOSByteArray_Get(bytes, i + 1) & (jint) 0x3f));
      i += 2;
    }
    else if ((IOSByteArray_Get(bytes, i) & (jint) 0xc0) == (jint) 0xc0) {
      
#line 106
      ch = (jchar) ((JreLShift32((IOSByteArray_Get(bytes, i) & (jint) 0x1f), 6)) | (IOSByteArray_Get(bytes, i + 1) & (jint) 0x3f));
      i += 2;
    }
    else {
      
#line 111
      ch = (jchar) (IOSByteArray_Get(bytes, i) & (jint) 0xff);
      i += 1;
    }
    
#line 115
    *IOSCharArray_GetRef(cs, length++) = ch;
  }
  
#line 118
  return [NSString java_stringWithCharacters:cs];
}


#line 121
IOSByteArray *OrgSpongycastleUtilStrings_toUTF8ByteArrayWithNSString_(NSString *string) {
  OrgSpongycastleUtilStrings_initialize();
  return OrgSpongycastleUtilStrings_toUTF8ByteArrayWithCharArray_([((NSString *) nil_chk(string)) java_toCharArray]);
}

IOSByteArray *OrgSpongycastleUtilStrings_toUTF8ByteArrayWithCharArray_(IOSCharArray *string) {
  OrgSpongycastleUtilStrings_initialize();
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  
#line 130
  @try {
    
#line 132
    OrgSpongycastleUtilStrings_toUTF8ByteArrayWithCharArray_withJavaIoOutputStream_(string, bOut);
  }
  @catch (JavaIoIOException *e) {
    
#line 136
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cannot encode string to byte array!");
  }
  
#line 139
  return [bOut toByteArray];
}


#line 142
void OrgSpongycastleUtilStrings_toUTF8ByteArrayWithCharArray_withJavaIoOutputStream_(IOSCharArray *string, JavaIoOutputStream *sOut) {
  OrgSpongycastleUtilStrings_initialize();
  
#line 145
  IOSCharArray *c = string;
  jint i = 0;
  
#line 148
  while (i < ((IOSCharArray *) nil_chk(c))->size_) {
    
#line 150
    jchar ch = IOSCharArray_Get(c, i);
    
#line 152
    if (ch < (jint) 0x0080) {
      
#line 154
      [((JavaIoOutputStream *) nil_chk(sOut)) writeWithInt:ch];
    }
    else if (ch < (jint) 0x0800) {
      
#line 158
      [((JavaIoOutputStream *) nil_chk(sOut)) writeWithInt:(jint) 0xc0 | (JreRShift32(ch, 6))];
      [sOut writeWithInt:(jint) 0x80 | (ch & (jint) 0x3f)];
    }
    else
#line 162
    if (ch >= (jint) 0xD800 && ch <= (jint) 0xDFFF) {
      
#line 166
      if (i + 1 >= c->size_) {
        
#line 168
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"invalid UTF-16 codepoint");
      }
      jchar W1 = ch;
      ch = IOSCharArray_Get(c, ++i);
      jchar W2 = ch;
      
#line 175
      if (W1 > (jint) 0xDBFF) {
        
#line 177
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"invalid UTF-16 codepoint");
      }
      jint codePoint = ((JreLShift32((W1 & (jint) 0x03FF), 10)) | (W2 & (jint) 0x03FF)) + (jint) 0x10000;
      [((JavaIoOutputStream *) nil_chk(sOut)) writeWithInt:(jint) 0xf0 | (JreRShift32(codePoint, 18))];
      [sOut writeWithInt:(jint) 0x80 | ((JreRShift32(codePoint, 12)) & (jint) 0x3F)];
      [sOut writeWithInt:(jint) 0x80 | ((JreRShift32(codePoint, 6)) & (jint) 0x3F)];
      [sOut writeWithInt:(jint) 0x80 | (codePoint & (jint) 0x3F)];
    }
    else {
      
#line 187
      [((JavaIoOutputStream *) nil_chk(sOut)) writeWithInt:(jint) 0xe0 | (JreRShift32(ch, 12))];
      [sOut writeWithInt:(jint) 0x80 | ((JreRShift32(ch, 6)) & (jint) 0x3F)];
      [sOut writeWithInt:(jint) 0x80 | (ch & (jint) 0x3F)];
    }
    
#line 192
    i++;
  }
}


#line 202
NSString *OrgSpongycastleUtilStrings_toUpperCaseWithNSString_(NSString *string) {
  OrgSpongycastleUtilStrings_initialize();
  jboolean changed = false;
  IOSCharArray *chars = [((NSString *) nil_chk(string)) java_toCharArray];
  
#line 207
  for (jint i = 0; i != ((IOSCharArray *) nil_chk(chars))->size_; i++) {
    
#line 209
    jchar ch = IOSCharArray_Get(chars, i);
    if ('a' <= ch && 'z' >= ch) {
      
#line 212
      changed = true;
      *IOSCharArray_GetRef(chars, i) = (jchar) (ch - 'a' + 'A');
    }
  }
  
#line 217
  if (changed) {
    
#line 219
    return [NSString java_stringWithCharacters:chars];
  }
  
#line 222
  return string;
}

NSString *OrgSpongycastleUtilStrings_toLowerCaseWithNSString_(NSString *string) {
  OrgSpongycastleUtilStrings_initialize();
  jboolean changed = false;
  IOSCharArray *chars = [((NSString *) nil_chk(string)) java_toCharArray];
  
#line 236
  for (jint i = 0; i != ((IOSCharArray *) nil_chk(chars))->size_; i++) {
    
#line 238
    jchar ch = IOSCharArray_Get(chars, i);
    if ('A' <= ch && 'Z' >= ch) {
      
#line 241
      changed = true;
      *IOSCharArray_GetRef(chars, i) = (jchar) (ch - 'A' + 'a');
    }
  }
  
#line 246
  if (changed) {
    
#line 248
    return [NSString java_stringWithCharacters:chars];
  }
  
#line 251
  return string;
}


#line 254
IOSByteArray *OrgSpongycastleUtilStrings_toByteArrayWithCharArray_(IOSCharArray *chars) {
  OrgSpongycastleUtilStrings_initialize();
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:((IOSCharArray *) nil_chk(chars))->size_];
  
#line 258
  for (jint i = 0; i != bytes->size_; i++) {
    
#line 260
    *IOSByteArray_GetRef(bytes, i) = (jbyte) IOSCharArray_Get(chars, i);
  }
  
#line 263
  return bytes;
}


#line 266
IOSByteArray *OrgSpongycastleUtilStrings_toByteArrayWithNSString_(NSString *string) {
  OrgSpongycastleUtilStrings_initialize();
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:[((NSString *) nil_chk(string)) java_length]];
  
#line 270
  for (jint i = 0; i != bytes->size_; i++) {
    
#line 272
    jchar ch = [string charAtWithInt:i];
    
#line 274
    *IOSByteArray_GetRef(bytes, i) = (jbyte) ch;
  }
  
#line 277
  return bytes;
}


#line 280
jint OrgSpongycastleUtilStrings_toByteArrayWithNSString_withByteArray_withInt_(NSString *s, IOSByteArray *buf, jint off) {
  OrgSpongycastleUtilStrings_initialize();
  jint count = [((NSString *) nil_chk(s)) java_length];
  for (jint i = 0; i < count; ++i) {
    
#line 285
    jchar c = [s charAtWithInt:i];
    *IOSByteArray_GetRef(nil_chk(buf), off + i) = (jbyte) c;
  }
  return count;
}


#line 297
NSString *OrgSpongycastleUtilStrings_fromByteArrayWithByteArray_(IOSByteArray *bytes) {
  OrgSpongycastleUtilStrings_initialize();
  return [NSString java_stringWithCharacters:OrgSpongycastleUtilStrings_asCharArrayWithByteArray_(bytes)];
}


#line 308
IOSCharArray *OrgSpongycastleUtilStrings_asCharArrayWithByteArray_(IOSByteArray *bytes) {
  OrgSpongycastleUtilStrings_initialize();
  IOSCharArray *chars = [IOSCharArray newArrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_];
  
#line 312
  for (jint i = 0; i != chars->size_; i++) {
    
#line 314
    *IOSCharArray_GetRef(chars, i) = (jchar) (IOSByteArray_Get(bytes, i) & (jint) 0xff);
  }
  
#line 317
  return chars;
}


#line 320
IOSObjectArray *OrgSpongycastleUtilStrings_splitWithNSString_withChar_(NSString *input, jchar delimiter) {
  OrgSpongycastleUtilStrings_initialize();
  JavaUtilVector *v = new_JavaUtilVector_init();
  jboolean moreTokens = true;
  NSString *subString;
  
#line 326
  while (moreTokens) {
    
#line 328
    jint tokenLocation = [((NSString *) nil_chk(input)) java_indexOf:delimiter];
    if (tokenLocation > 0) {
      
#line 331
      subString = [input java_substring:0 endIndex:tokenLocation];
      [v addElementWithId:subString];
      input = [input java_substring:tokenLocation + 1];
    }
    else {
      
#line 337
      moreTokens = false;
      [v addElementWithId:input];
    }
  }
  
#line 342
  IOSObjectArray *res = [IOSObjectArray newArrayWithLength:[v size] type:NSString_class_()];
  
#line 344
  for (jint i = 0; i != res->size_; i++) {
    
#line 346
    (void) IOSObjectArray_Set(res, i, (NSString *) cast_chk([v elementAtWithInt:i], [NSString class]));
  }
  return res;
}


#line 351
id<OrgSpongycastleUtilStringList> OrgSpongycastleUtilStrings_newList() {
  OrgSpongycastleUtilStrings_initialize();
  return new_OrgSpongycastleUtilStrings_StringListImpl_init();
}

NSString *OrgSpongycastleUtilStrings_lineSeparator() {
  OrgSpongycastleUtilStrings_initialize();
  return OrgSpongycastleUtilStrings_LINE_SEPARATOR;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleUtilStrings)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/util/Strings.java"


#line 23
@implementation OrgSpongycastleUtilStrings_1

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 23
- (instancetype)init {
  OrgSpongycastleUtilStrings_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 24
- (NSString *)run {
  
#line 27
  return JavaLangSystem_getPropertyWithNSString_(@"line.separator");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgSpongycastleUtilStrings;", "Ljava/lang/Object;Ljava/security/PrivilegedAction<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgSpongycastleUtilStrings_1 = { "", "org.spongycastle.util", ptrTable, methods, NULL, 7, 0x8000, 2, 0, 0, -1, -1, 1, -1 };
  return &_OrgSpongycastleUtilStrings_1;
}

@end


#line 23
void OrgSpongycastleUtilStrings_1_init(OrgSpongycastleUtilStrings_1 *self) {
  NSObject_init(self);
}


#line 23
OrgSpongycastleUtilStrings_1 *new_OrgSpongycastleUtilStrings_1_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleUtilStrings_1, init)
}


#line 23
OrgSpongycastleUtilStrings_1 *create_OrgSpongycastleUtilStrings_1_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleUtilStrings_1, init)
}

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/util/Strings.java"


#line 361
@implementation OrgSpongycastleUtilStrings_StringListImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 361
- (instancetype)init {
  OrgSpongycastleUtilStrings_StringListImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 365
- (jboolean)addWithId:(NSString *)s {
  
#line 367
  return [super addWithId:s];
}


#line 370
- (NSString *)setWithInt:(jint)index
                  withId:(NSString *)element {
  return [super setWithInt:index withId:element];
}

- (void)addWithInt:(jint)index
            withId:(NSString *)element {
  [super addWithInt:index withId:element];
}

- (IOSObjectArray *)toStringArray {
  
#line 382
  IOSObjectArray *strs = [IOSObjectArray newArrayWithLength:[self size] type:NSString_class_()];
  
#line 384
  for (jint i = 0; i != strs->size_; i++) {
    
#line 386
    (void) IOSObjectArray_Set(strs, i, [self getWithInt:i]);
  }
  
#line 389
  return strs;
}


#line 392
- (IOSObjectArray *)toStringArrayWithInt:(jint)from
                                 withInt:(jint)to {
  IOSObjectArray *strs = [IOSObjectArray newArrayWithLength:to - from type:NSString_class_()];
  
#line 396
  for (jint i = from; i != [self size] && i != to; i++) {
    
#line 398
    (void) IOSObjectArray_Set(strs, i - from, [self getWithInt:i]);
  }
  
#line 401
  return strs;
}

- (jboolean)addWithNSString:(NSString *)arg0 {
  return [self addWithId:arg0];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 3, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addWithId:);
  methods[2].selector = @selector(setWithInt:withId:);
  methods[3].selector = @selector(addWithInt:withId:);
  methods[4].selector = @selector(toStringArray);
  methods[5].selector = @selector(toStringArrayWithInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "add", "LNSString;", "set", "ILNSString;", "toStringArray", "II", "LOrgSpongycastleUtilStrings;", "Ljava/util/ArrayList<Ljava/lang/String;>;Lorg/spongycastle/util/StringList;" };
  static const J2ObjcClassInfo _OrgSpongycastleUtilStrings_StringListImpl = { "StringListImpl", "org.spongycastle.util", ptrTable, methods, NULL, 7, 0xa, 6, 0, 6, -1, -1, 7, -1 };
  return &_OrgSpongycastleUtilStrings_StringListImpl;
}

@end


#line 361
void OrgSpongycastleUtilStrings_StringListImpl_init(OrgSpongycastleUtilStrings_StringListImpl *self) {
  JavaUtilArrayList_init(self);
}


#line 361
OrgSpongycastleUtilStrings_StringListImpl *new_OrgSpongycastleUtilStrings_StringListImpl_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleUtilStrings_StringListImpl, init)
}


#line 361
OrgSpongycastleUtilStrings_StringListImpl *create_OrgSpongycastleUtilStrings_StringListImpl_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleUtilStrings_StringListImpl, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleUtilStrings_StringListImpl)
