//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/util/io/Streams.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleUtilIoStreams")
#ifdef RESTRICT_OrgSpongycastleUtilIoStreams
#define INCLUDE_ALL_OrgSpongycastleUtilIoStreams 0
#else
#define INCLUDE_ALL_OrgSpongycastleUtilIoStreams 1
#endif
#undef RESTRICT_OrgSpongycastleUtilIoStreams

#if !defined (OrgSpongycastleUtilIoStreams_) && (INCLUDE_ALL_OrgSpongycastleUtilIoStreams || defined(INCLUDE_OrgSpongycastleUtilIoStreams))
#define OrgSpongycastleUtilIoStreams_

@class IOSByteArray;
@class JavaIoByteArrayOutputStream;
@class JavaIoInputStream;
@class JavaIoOutputStream;

/*!
 @brief Utility methods to assist with stream processing.
 */
@interface OrgSpongycastleUtilIoStreams : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Read stream till EOF is encountered.
 @param inStr stream to be emptied.
 @throw IOExceptionin case of underlying IOException.
 */
+ (void)drainWithJavaIoInputStream:(JavaIoInputStream *)inStr;

/*!
 @brief Write the full contents of inStr to the destination stream outStr.
 @param inStr source input stream.
 @param outStr destination output stream.
 @throw IOExceptionin case of underlying IOException.
 */
+ (void)pipeAllWithJavaIoInputStream:(JavaIoInputStream *)inStr
              withJavaIoOutputStream:(JavaIoOutputStream *)outStr;

/*!
 @brief Write up to limit bytes of data from inStr to the destination stream outStr.
 @param inStr source input stream.
 @param limit the maximum number of bytes allowed to be read.
 @param outStr destination output stream.
 @throw IOExceptionin case of underlying IOException, or if limit is reached on inStr still has data in it.
 */
+ (jlong)pipeAllLimitedWithJavaIoInputStream:(JavaIoInputStream *)inStr
                                    withLong:(jlong)limit
                      withJavaIoOutputStream:(JavaIoOutputStream *)outStr;

/*!
 @brief Read stream fully, returning contents in a byte array.
 @param inStr stream to be read.
 @return a byte array representing the contents of inStr.
 @throw IOExceptionin case of underlying IOException.
 */
+ (IOSByteArray *)readAllWithJavaIoInputStream:(JavaIoInputStream *)inStr;

/*!
 @brief Read from inStr up to a maximum number of bytes, throwing an exception if more the maximum amount
  of requested data is available.
 @param inStr stream to be read.
 @param limit maximum number of bytes that can be read.
 @return a byte array representing the contents of inStr.
 @throw IOExceptionin case of underlying IOException, or if limit is reached on inStr still has data in it.
 */
+ (IOSByteArray *)readAllLimitedWithJavaIoInputStream:(JavaIoInputStream *)inStr
                                              withInt:(jint)limit;

/*!
 @brief Fully read in buf's length in data, or up to EOF, whichever occurs first,
 @param inStr the stream to be read.
 @param buf the buffer to be read into.
 @return the number of bytes read into the buffer.
 @throw IOExceptionin case of underlying IOException.
 */
+ (jint)readFullyWithJavaIoInputStream:(JavaIoInputStream *)inStr
                         withByteArray:(IOSByteArray *)buf;

/*!
 @brief Fully read in len's bytes of data into buf, or up to EOF, whichever occurs first,
 @param inStr the stream to be read.
 @param buf the buffer to be read into.
 @param off offset into buf to start putting bytes into.
 @param len the number of bytes to be read.
 @return the number of bytes read into the buffer.
 @throw IOExceptionin case of underlying IOException.
 */
+ (jint)readFullyWithJavaIoInputStream:(JavaIoInputStream *)inStr
                         withByteArray:(IOSByteArray *)buf
                               withInt:(jint)off
                               withInt:(jint)len;

+ (void)writeBufToWithJavaIoByteArrayOutputStream:(JavaIoByteArrayOutputStream *)buf
                           withJavaIoOutputStream:(JavaIoOutputStream *)output;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleUtilIoStreams)

FOUNDATION_EXPORT void OrgSpongycastleUtilIoStreams_init(OrgSpongycastleUtilIoStreams *self);

FOUNDATION_EXPORT OrgSpongycastleUtilIoStreams *new_OrgSpongycastleUtilIoStreams_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleUtilIoStreams *create_OrgSpongycastleUtilIoStreams_init(void);

FOUNDATION_EXPORT void OrgSpongycastleUtilIoStreams_drainWithJavaIoInputStream_(JavaIoInputStream *inStr);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilIoStreams_readAllWithJavaIoInputStream_(JavaIoInputStream *inStr);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilIoStreams_readAllLimitedWithJavaIoInputStream_withInt_(JavaIoInputStream *inStr, jint limit);

FOUNDATION_EXPORT jint OrgSpongycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_(JavaIoInputStream *inStr, IOSByteArray *buf);

FOUNDATION_EXPORT jint OrgSpongycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_withInt_withInt_(JavaIoInputStream *inStr, IOSByteArray *buf, jint off, jint len);

FOUNDATION_EXPORT void OrgSpongycastleUtilIoStreams_pipeAllWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *inStr, JavaIoOutputStream *outStr);

FOUNDATION_EXPORT jlong OrgSpongycastleUtilIoStreams_pipeAllLimitedWithJavaIoInputStream_withLong_withJavaIoOutputStream_(JavaIoInputStream *inStr, jlong limit, JavaIoOutputStream *outStr);

FOUNDATION_EXPORT void OrgSpongycastleUtilIoStreams_writeBufToWithJavaIoByteArrayOutputStream_withJavaIoOutputStream_(JavaIoByteArrayOutputStream *buf, JavaIoOutputStream *output);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleUtilIoStreams)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleUtilIoStreams")
