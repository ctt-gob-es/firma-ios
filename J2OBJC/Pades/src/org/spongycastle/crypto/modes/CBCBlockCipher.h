//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/crypto/modes/CBCBlockCipher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoModesCBCBlockCipher")
#ifdef RESTRICT_OrgSpongycastleCryptoModesCBCBlockCipher
#define INCLUDE_ALL_OrgSpongycastleCryptoModesCBCBlockCipher 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoModesCBCBlockCipher 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoModesCBCBlockCipher

#if !defined (OrgSpongycastleCryptoModesCBCBlockCipher_) && (INCLUDE_ALL_OrgSpongycastleCryptoModesCBCBlockCipher || defined(INCLUDE_OrgSpongycastleCryptoModesCBCBlockCipher))
#define OrgSpongycastleCryptoModesCBCBlockCipher_

#define RESTRICT_OrgSpongycastleCryptoBlockCipher 1
#define INCLUDE_OrgSpongycastleCryptoBlockCipher 1
#include "org/spongycastle/crypto/BlockCipher.h"

@class IOSByteArray;
@protocol OrgSpongycastleCryptoCipherParameters;

/*!
 @brief implements Cipher-Block-Chaining (CBC) mode on top of a simple cipher.
 */
@interface OrgSpongycastleCryptoModesCBCBlockCipher : NSObject < OrgSpongycastleCryptoBlockCipher >

#pragma mark Public

/*!
 @brief Basic constructor.
 @param cipher the block cipher to be used as the basis of chaining.
 */
- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher;

/*!
 @brief return the algorithm name and mode.
 @return the name of the underlying algorithm followed by "/CBC".
 */
- (NSString *)getAlgorithmName;

/*!
 @brief return the block size of the underlying cipher.
 @return the block size of the underlying cipher.
 */
- (jint)getBlockSize;

/*!
 @brief return the underlying block cipher that we are wrapping.
 @return the underlying block cipher that we are wrapping.
 */
- (id<OrgSpongycastleCryptoBlockCipher>)getUnderlyingCipher;

/*!
 @brief Initialise the cipher and, possibly, the initialisation vector (IV).
 If an IV isn't passed as part of the parameter, the IV will be all zeros.
 @param encrypting if true the cipher is initialised for   encryption, if false for decryption.
 @param params the key and other data required by the cipher.
 @throw IllegalArgumentExceptionif the params argument is
  inappropriate.
 */
- (void)init__WithBoolean:(jboolean)encrypting
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Process one block of input from the array in and write it to
  the out array.
 @param inArg the array containing the input data.
 @param inOff offset into the in array the data starts at.
 @param outArg the array the output data will be copied into.
 @param outOff the offset into the out array the output will start at.
 @throw DataLengthExceptionif there isn't enough data in in, or
  space in out.
 @throw IllegalStateExceptionif the cipher isn't initialised.
 @return the number of bytes processed and produced.
 */
- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

/*!
 @brief reset the chaining vector back to the IV and reset the underlying
  cipher.
 */
- (void)reset;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoModesCBCBlockCipher)

FOUNDATION_EXPORT void OrgSpongycastleCryptoModesCBCBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(OrgSpongycastleCryptoModesCBCBlockCipher *self, id<OrgSpongycastleCryptoBlockCipher> cipher);

FOUNDATION_EXPORT OrgSpongycastleCryptoModesCBCBlockCipher *new_OrgSpongycastleCryptoModesCBCBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoModesCBCBlockCipher *create_OrgSpongycastleCryptoModesCBCBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> cipher);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoModesCBCBlockCipher)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoModesCBCBlockCipher")
