//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/crypto/modes/CBCBlockCipher.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/BlockCipher.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/modes/CBCBlockCipher.h"
#include "org/spongycastle/crypto/params/ParametersWithIV.h"
#include "org/spongycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/spongycastle/crypto/modes/CBCBlockCipher must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleCryptoModesCBCBlockCipher () {
 @public
  IOSByteArray *IV_;
  IOSByteArray *cbcV_;
  IOSByteArray *cbcNextV_;
  jint blockSize_;
  id<OrgSpongycastleCryptoBlockCipher> cipher_;
  jboolean encrypting_;
}

/*!
 @brief Do the appropriate chaining step for CBC mode encryption.
 @param inArg the array containing the data to be encrypted.
 @param inOff offset into the in array the data starts at.
 @param outArg the array the encrypted data will be copied into.
 @param outOff the offset into the out array the output will start at.
 @throw DataLengthExceptionif there isn't enough data in in, or
  space in out.
 @throw IllegalStateExceptionif the cipher isn't initialised.
 @return the number of bytes processed and produced.
 */
- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

/*!
 @brief Do the appropriate chaining step for CBC mode decryption.
 @param inArg the array containing the data to be decrypted.
 @param inOff offset into the in array the data starts at.
 @param outArg the array the decrypted data will be copied into.
 @param outOff the offset into the out array the output will start at.
 @throw DataLengthExceptionif there isn't enough data in in, or
  space in out.
 @throw IllegalStateExceptionif the cipher isn't initialised.
 @return the number of bytes processed and produced.
 */
- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesCBCBlockCipher, IV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesCBCBlockCipher, cbcV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesCBCBlockCipher, cbcNextV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesCBCBlockCipher, cipher_, id<OrgSpongycastleCryptoBlockCipher>)

__attribute__((unused)) static jint OrgSpongycastleCryptoModesCBCBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoModesCBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static jint OrgSpongycastleCryptoModesCBCBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoModesCBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/crypto/modes/CBCBlockCipher.java"


#line 12
@implementation OrgSpongycastleCryptoModesCBCBlockCipher


#line 28
- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher {
  OrgSpongycastleCryptoModesCBCBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(self, cipher);
  return self;
}


#line 44
- (id<OrgSpongycastleCryptoBlockCipher>)getUnderlyingCipher {
  
#line 46
  return cipher_;
}


#line 59
- (void)init__WithBoolean:(jboolean)encrypting
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  
#line 64
  jboolean oldEncrypting = self->encrypting_;
  
#line 66
  self->encrypting_ = encrypting;
  
#line 68
  if ([params isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithIV class]]) {
    
#line 70
    OrgSpongycastleCryptoParamsParametersWithIV *ivParam = (OrgSpongycastleCryptoParamsParametersWithIV *) params;
    IOSByteArray *iv = [((OrgSpongycastleCryptoParamsParametersWithIV *) nil_chk(ivParam)) getIV];
    
#line 73
    if (((IOSByteArray *) nil_chk(iv))->size_ != blockSize_) {
      
#line 75
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"initialisation vector must be the same length as block size");
    }
    
#line 78
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, IV_, 0, iv->size_);
    
#line 80
    [self reset];
    
#line 83
    if ([ivParam getParameters] != nil) {
      
#line 85
      [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:encrypting withOrgSpongycastleCryptoCipherParameters:[ivParam getParameters]];
    }
    else if (oldEncrypting != encrypting) {
      
#line 89
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cannot change encrypting state without providing key.");
    }
  }
  else {
    
#line 94
    [self reset];
    
#line 97
    if (params != nil) {
      
#line 99
      [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:encrypting withOrgSpongycastleCryptoCipherParameters:params];
    }
    else if (oldEncrypting != encrypting) {
      
#line 103
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cannot change encrypting state without providing key.");
    }
  }
}


#line 113
- (NSString *)getAlgorithmName {
  
#line 115
  return JreStrcat("$$", [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) getAlgorithmName], @"/CBC");
}


#line 123
- (jint)getBlockSize {
  
#line 125
  return [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize];
}


#line 141
- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  
#line 148
  return (encrypting_) ? OrgSpongycastleCryptoModesCBCBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff) : OrgSpongycastleCryptoModesCBCBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}


#line 155
- (void)reset {
  
#line 157
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IV_, 0, cbcV_, 0, ((IOSByteArray *) nil_chk(IV_))->size_);
  OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(cbcNextV_, (jbyte) 0);
  
#line 160
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) reset];
}


#line 175
- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return OrgSpongycastleCryptoModesCBCBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}


#line 218
- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return OrgSpongycastleCryptoModesCBCBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoBlockCipher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 5, 6, -1, -1, -1 },
    { NULL, "I", 0x2, 8, 5, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:);
  methods[1].selector = @selector(getUnderlyingCipher);
  methods[2].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[3].selector = @selector(getAlgorithmName);
  methods[4].selector = @selector(getBlockSize);
  methods[5].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[6].selector = @selector(reset);
  methods[7].selector = @selector(encryptBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[8].selector = @selector(decryptBlockWithByteArray:withInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cbcV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cbcNextV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipher_", "LOrgSpongycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encrypting_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoBlockCipher;", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "processBlock", "[BI[BI", "LOrgSpongycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "encryptBlock", "decryptBlock" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoModesCBCBlockCipher = { "CBCBlockCipher", "org.spongycastle.crypto.modes", ptrTable, methods, fields, 7, 0x1, 9, 6, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoModesCBCBlockCipher;
}

@end


#line 28
void OrgSpongycastleCryptoModesCBCBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(OrgSpongycastleCryptoModesCBCBlockCipher *self, id<OrgSpongycastleCryptoBlockCipher> cipher) {
  NSObject_init(self);
  self->cipher_ =
#line 20
  nil;
  
#line 31
  self->cipher_ = cipher;
  self->blockSize_ = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize];
  
#line 34
  self->IV_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->cbcV_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->cbcNextV_ = [IOSByteArray newArrayWithLength:self->blockSize_];
}


#line 28
OrgSpongycastleCryptoModesCBCBlockCipher *new_OrgSpongycastleCryptoModesCBCBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoModesCBCBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_, cipher)
}


#line 28
OrgSpongycastleCryptoModesCBCBlockCipher *create_OrgSpongycastleCryptoModesCBCBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoModesCBCBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_, cipher)
}


#line 175
jint OrgSpongycastleCryptoModesCBCBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoModesCBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  
#line 182
  if ((inOff + self->blockSize_) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    
#line 184
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  
#line 191
  for (jint i = 0; i < self->blockSize_; i++) {
    
#line 193
    *IOSByteArray_GetRef(nil_chk(self->cbcV_), i) ^= IOSByteArray_Get(inArg, inOff + i);
  }
  
#line 196
  jint length = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:self->cbcV_ withInt:0 withByteArray:outArg withInt:outOff];
  
#line 201
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(outArg, outOff, self->cbcV_, 0, ((IOSByteArray *) nil_chk(self->cbcV_))->size_);
  
#line 203
  return length;
}


#line 218
jint OrgSpongycastleCryptoModesCBCBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoModesCBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  
#line 225
  if ((inOff + self->blockSize_) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    
#line 227
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  
#line 230
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, self->cbcNextV_, 0, self->blockSize_);
  
#line 232
  jint length = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:inArg withInt:inOff withByteArray:outArg withInt:outOff];
  
#line 237
  for (jint i = 0; i < self->blockSize_; i++) {
    
#line 239
    *IOSByteArray_GetRef(nil_chk(outArg), outOff + i) ^= IOSByteArray_Get(nil_chk(self->cbcV_), i);
  }
  
#line 245
  IOSByteArray *tmp;
  
#line 247
  tmp = self->cbcV_;
  self->cbcV_ = self->cbcNextV_;
  self->cbcNextV_ = tmp;
  
#line 251
  return length;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoModesCBCBlockCipher)
