//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/x509/BCAttributeCertificateIssuer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "java/security/Principal.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "javax/security/auth/x500/X500Principal.h"
#include "org/spongycastle/asn1/ASN1Encodable.h"
#include "org/spongycastle/asn1/ASN1Integer.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/DERSequence.h"
#include "org/spongycastle/asn1/x509/AttCertIssuer.h"
#include "org/spongycastle/asn1/x509/GeneralName.h"
#include "org/spongycastle/asn1/x509/GeneralNames.h"
#include "org/spongycastle/asn1/x509/IssuerSerial.h"
#include "org/spongycastle/asn1/x509/V2Form.h"
#include "org/spongycastle/jce/X509Principal.h"
#include "org/spongycastle/x509/BCAttributeCertificateIssuer.h"

#if !__has_feature(objc_arc)
#error "org/spongycastle/x509/BCAttributeCertificateIssuer must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleX509BCAttributeCertificateIssuer ()

- (IOSObjectArray *)getNames;

- (jboolean)matchesDNWithJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)subject
                    withOrgSpongycastleAsn1X509GeneralNames:(OrgSpongycastleAsn1X509GeneralNames *)targets;

@end

__attribute__((unused)) static IOSObjectArray *OrgSpongycastleX509BCAttributeCertificateIssuer_getNames(OrgSpongycastleX509BCAttributeCertificateIssuer *self);

__attribute__((unused)) static jboolean OrgSpongycastleX509BCAttributeCertificateIssuer_matchesDNWithJavaxSecurityAuthX500X500Principal_withOrgSpongycastleAsn1X509GeneralNames_(OrgSpongycastleX509BCAttributeCertificateIssuer *self, JavaxSecurityAuthX500X500Principal *subject, OrgSpongycastleAsn1X509GeneralNames *targets);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/x509/BCAttributeCertificateIssuer.java"


#line 26
@implementation OrgSpongycastleX509BCAttributeCertificateIssuer


#line 36
- (instancetype)initWithOrgSpongycastleAsn1X509AttCertIssuer:(OrgSpongycastleAsn1X509AttCertIssuer *)issuer {
  OrgSpongycastleX509BCAttributeCertificateIssuer_initWithOrgSpongycastleAsn1X509AttCertIssuer_(self, issuer);
  return self;
}

- (instancetype)initWithJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)principal {
  OrgSpongycastleX509BCAttributeCertificateIssuer_initWithJavaxSecurityAuthX500X500Principal_(self, principal);
  return self;
}


#line 47
- (instancetype)initWithOrgSpongycastleJceX509Principal:(OrgSpongycastleJceX509Principal *)principal {
  OrgSpongycastleX509BCAttributeCertificateIssuer_initWithOrgSpongycastleJceX509Principal_(self, principal);
  return self;
}

- (IOSObjectArray *)getNames {
  return OrgSpongycastleX509BCAttributeCertificateIssuer_getNames(self);
}


#line 94
- (IOSObjectArray *)getPrincipals {
  
#line 96
  IOSObjectArray *p = OrgSpongycastleX509BCAttributeCertificateIssuer_getNames(self);
  id<JavaUtilList> l = new_JavaUtilArrayList_init();
  
#line 99
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(p))->size_; i++) {
    
#line 101
    if ([JavaSecurityPrincipal_class_() isInstance:IOSObjectArray_Get(p, i)]) {
      
#line 103
      [l addWithId:IOSObjectArray_Get(p, i)];
    }
  }
  
#line 107
  return (IOSObjectArray *) cast_check([l toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[l size] type:JavaSecurityPrincipal_class_()]], IOSClass_arrayType(JavaSecurityPrincipal_class_(), 1));
}


#line 110
- (jboolean)matchesDNWithJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)subject
                    withOrgSpongycastleAsn1X509GeneralNames:(OrgSpongycastleAsn1X509GeneralNames *)targets {
  return OrgSpongycastleX509BCAttributeCertificateIssuer_matchesDNWithJavaxSecurityAuthX500X500Principal_withOrgSpongycastleAsn1X509GeneralNames_(self, subject, targets);
}


#line 136
- (id)java_clone {
  
#line 138
  return new_OrgSpongycastleX509BCAttributeCertificateIssuer_initWithOrgSpongycastleAsn1X509AttCertIssuer_(OrgSpongycastleAsn1X509AttCertIssuer_getInstanceWithId_(form_));
}


#line 141
- (jboolean)matchWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert {
  
#line 143
  if (!([cert isKindOfClass:[JavaSecurityCertX509Certificate class]])) {
    
#line 145
    return false;
  }
  
#line 148
  JavaSecurityCertX509Certificate *x509Cert = (JavaSecurityCertX509Certificate *) cast_chk(cert, [JavaSecurityCertX509Certificate class]);
  
#line 150
  if ([form_ isKindOfClass:[OrgSpongycastleAsn1X509V2Form class]]) {
    
#line 152
    OrgSpongycastleAsn1X509V2Form *issuer = (OrgSpongycastleAsn1X509V2Form *) form_;
    if ([((OrgSpongycastleAsn1X509V2Form *) nil_chk(issuer)) getBaseCertificateID] != nil) {
      
#line 155
      return [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1ASN1Integer *) nil_chk([((OrgSpongycastleAsn1X509IssuerSerial *) nil_chk([issuer getBaseCertificateID])) getSerial])) getValue])) isEqual:[((JavaSecurityCertX509Certificate *) nil_chk(x509Cert)) getSerialNumber]] && OrgSpongycastleX509BCAttributeCertificateIssuer_matchesDNWithJavaxSecurityAuthX500X500Principal_withOrgSpongycastleAsn1X509GeneralNames_(self,
#line 156
      [x509Cert getIssuerX500Principal], [((OrgSpongycastleAsn1X509IssuerSerial *) nil_chk([issuer getBaseCertificateID])) getIssuer]);
    }
    
#line 159
    OrgSpongycastleAsn1X509GeneralNames *name = [issuer getIssuerName];
    if (OrgSpongycastleX509BCAttributeCertificateIssuer_matchesDNWithJavaxSecurityAuthX500X500Principal_withOrgSpongycastleAsn1X509GeneralNames_(self, [((JavaSecurityCertX509Certificate *) nil_chk(x509Cert)) getSubjectX500Principal], name)) {
      
#line 162
      return true;
    }
  }
  else {
    
#line 167
    OrgSpongycastleAsn1X509GeneralNames *name = (OrgSpongycastleAsn1X509GeneralNames *) cast_chk(form_, [OrgSpongycastleAsn1X509GeneralNames class]);
    if (OrgSpongycastleX509BCAttributeCertificateIssuer_matchesDNWithJavaxSecurityAuthX500X500Principal_withOrgSpongycastleAsn1X509GeneralNames_(self, [((JavaSecurityCertX509Certificate *) nil_chk(x509Cert)) getSubjectX500Principal], name)) {
      
#line 170
      return true;
    }
  }
  
#line 174
  return false;
}


#line 177
- (jboolean)isEqual:(id)obj {
  
#line 179
  if (JreObjectEqualsEquals(obj, self)) {
    
#line 181
    return true;
  }
  
#line 184
  if (!([obj isKindOfClass:[OrgSpongycastleX509BCAttributeCertificateIssuer class]])) {
    
#line 186
    return false;
  }
  
#line 189
  OrgSpongycastleX509BCAttributeCertificateIssuer *other = (OrgSpongycastleX509BCAttributeCertificateIssuer *) cast_chk(obj, [OrgSpongycastleX509BCAttributeCertificateIssuer class]);
  
#line 191
  return [((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk(self->form_)) isEqual:((OrgSpongycastleX509BCAttributeCertificateIssuer *) nil_chk(other))->form_];
}


#line 194
- (NSUInteger)hash {
  
#line 196
  return ((jint) [((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk(self->form_)) hash]);
}


#line 199
- (jboolean)matchWithId:(id)obj {
  
#line 201
  if (!([obj isKindOfClass:[JavaSecurityCertX509Certificate class]])) {
    
#line 203
    return false;
  }
  
#line 206
  return [self matchWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *) cast_chk(obj, [JavaSecurityCertCertificate class])];
}

- (id)clone {
  return [self java_clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaSecurityPrincipal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleAsn1X509AttCertIssuer:);
  methods[1].selector = @selector(initWithJavaxSecurityAuthX500X500Principal:);
  methods[2].selector = @selector(initWithOrgSpongycastleJceX509Principal:);
  methods[3].selector = @selector(getNames);
  methods[4].selector = @selector(getPrincipals);
  methods[5].selector = @selector(matchesDNWithJavaxSecurityAuthX500X500Principal:withOrgSpongycastleAsn1X509GeneralNames:);
  methods[6].selector = @selector(java_clone);
  methods[7].selector = @selector(matchWithJavaSecurityCertCertificate:);
  methods[8].selector = @selector(isEqual:);
  methods[9].selector = @selector(hash);
  methods[10].selector = @selector(matchWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "form_", "LOrgSpongycastleAsn1ASN1Encodable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleAsn1X509AttCertIssuer;", "LJavaxSecurityAuthX500X500Principal;", "LJavaIoIOException;", "LOrgSpongycastleJceX509Principal;", "matchesDN", "LJavaxSecurityAuthX500X500Principal;LOrgSpongycastleAsn1X509GeneralNames;", "clone", "match", "LJavaSecurityCertCertificate;", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgSpongycastleX509BCAttributeCertificateIssuer = { "BCAttributeCertificateIssuer", "org.spongycastle.x509", ptrTable, methods, fields, 7, 0x1, 11, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleX509BCAttributeCertificateIssuer;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end


#line 36
void OrgSpongycastleX509BCAttributeCertificateIssuer_initWithOrgSpongycastleAsn1X509AttCertIssuer_(OrgSpongycastleX509BCAttributeCertificateIssuer *self, OrgSpongycastleAsn1X509AttCertIssuer *issuer) {
  NSObject_init(self);
  self->form_ = [((OrgSpongycastleAsn1X509AttCertIssuer *) nil_chk(issuer)) getIssuer];
}


#line 36
OrgSpongycastleX509BCAttributeCertificateIssuer *new_OrgSpongycastleX509BCAttributeCertificateIssuer_initWithOrgSpongycastleAsn1X509AttCertIssuer_(OrgSpongycastleAsn1X509AttCertIssuer *issuer) {
  J2OBJC_NEW_IMPL(OrgSpongycastleX509BCAttributeCertificateIssuer, initWithOrgSpongycastleAsn1X509AttCertIssuer_, issuer)
}


#line 36
OrgSpongycastleX509BCAttributeCertificateIssuer *create_OrgSpongycastleX509BCAttributeCertificateIssuer_initWithOrgSpongycastleAsn1X509AttCertIssuer_(OrgSpongycastleAsn1X509AttCertIssuer *issuer) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleX509BCAttributeCertificateIssuer, initWithOrgSpongycastleAsn1X509AttCertIssuer_, issuer)
}


#line 41
void OrgSpongycastleX509BCAttributeCertificateIssuer_initWithJavaxSecurityAuthX500X500Principal_(OrgSpongycastleX509BCAttributeCertificateIssuer *self, JavaxSecurityAuthX500X500Principal *principal) {
  OrgSpongycastleX509BCAttributeCertificateIssuer_initWithOrgSpongycastleJceX509Principal_(self, new_OrgSpongycastleJceX509Principal_initWithByteArray_(
#line 44
  [((JavaxSecurityAuthX500X500Principal *) nil_chk(principal)) getEncoded]));
}


#line 41
OrgSpongycastleX509BCAttributeCertificateIssuer *new_OrgSpongycastleX509BCAttributeCertificateIssuer_initWithJavaxSecurityAuthX500X500Principal_(JavaxSecurityAuthX500X500Principal *principal) {
  J2OBJC_NEW_IMPL(OrgSpongycastleX509BCAttributeCertificateIssuer, initWithJavaxSecurityAuthX500X500Principal_, principal)
}


#line 41
OrgSpongycastleX509BCAttributeCertificateIssuer *create_OrgSpongycastleX509BCAttributeCertificateIssuer_initWithJavaxSecurityAuthX500X500Principal_(JavaxSecurityAuthX500X500Principal *principal) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleX509BCAttributeCertificateIssuer, initWithJavaxSecurityAuthX500X500Principal_, principal)
}


#line 47
void OrgSpongycastleX509BCAttributeCertificateIssuer_initWithOrgSpongycastleJceX509Principal_(OrgSpongycastleX509BCAttributeCertificateIssuer *self, OrgSpongycastleJceX509Principal *principal) {
  NSObject_init(self);
  self->form_ = new_OrgSpongycastleAsn1X509V2Form_initWithOrgSpongycastleAsn1X509GeneralNames_(OrgSpongycastleAsn1X509GeneralNames_getInstanceWithId_(new_OrgSpongycastleAsn1DERSequence_initWithOrgSpongycastleAsn1ASN1Encodable_(new_OrgSpongycastleAsn1X509GeneralName_initWithOrgSpongycastleAsn1X509X509Name_(principal))));
}


#line 47
OrgSpongycastleX509BCAttributeCertificateIssuer *new_OrgSpongycastleX509BCAttributeCertificateIssuer_initWithOrgSpongycastleJceX509Principal_(OrgSpongycastleJceX509Principal *principal) {
  J2OBJC_NEW_IMPL(OrgSpongycastleX509BCAttributeCertificateIssuer, initWithOrgSpongycastleJceX509Principal_, principal)
}


#line 47
OrgSpongycastleX509BCAttributeCertificateIssuer *create_OrgSpongycastleX509BCAttributeCertificateIssuer_initWithOrgSpongycastleJceX509Principal_(OrgSpongycastleJceX509Principal *principal) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleX509BCAttributeCertificateIssuer, initWithOrgSpongycastleJceX509Principal_, principal)
}


#line 52
IOSObjectArray *OrgSpongycastleX509BCAttributeCertificateIssuer_getNames(OrgSpongycastleX509BCAttributeCertificateIssuer *self) {
  
#line 54
  OrgSpongycastleAsn1X509GeneralNames *name;
  
#line 56
  if ([self->form_ isKindOfClass:[OrgSpongycastleAsn1X509V2Form class]]) {
    
#line 58
    name = [((OrgSpongycastleAsn1X509V2Form *) nil_chk(((OrgSpongycastleAsn1X509V2Form *) self->form_))) getIssuerName];
  }
  else {
    
#line 62
    name = (OrgSpongycastleAsn1X509GeneralNames *) cast_chk(self->form_, [OrgSpongycastleAsn1X509GeneralNames class]);
  }
  
#line 65
  IOSObjectArray *names = [((OrgSpongycastleAsn1X509GeneralNames *) nil_chk(name)) getNames];
  
#line 67
  id<JavaUtilList> l = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(names))->size_);
  
#line 69
  for (jint i = 0; i != names->size_; i++) {
    
#line 71
    if ([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(names, i))) getTagNo] == OrgSpongycastleAsn1X509GeneralName_directoryName) {
      
#line 73
      @try {
        
#line 75
        [l addWithId:new_JavaxSecurityAuthX500X500Principal_initWithByteArray_(
#line 76
        [((OrgSpongycastleAsn1ASN1Primitive *) nil_chk([((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk(([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(names, i))) getName]))) toASN1Primitive])) getEncoded])];
      }
      @catch (JavaIoIOException *e) {
        
#line 80
        @throw new_JavaLangRuntimeException_initWithNSString_(@"badly formed Name object");
      }
    }
  }
  
#line 85
  return [l toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[l size] type:NSObject_class_()]];
}


#line 110
jboolean OrgSpongycastleX509BCAttributeCertificateIssuer_matchesDNWithJavaxSecurityAuthX500X500Principal_withOrgSpongycastleAsn1X509GeneralNames_(OrgSpongycastleX509BCAttributeCertificateIssuer *self, JavaxSecurityAuthX500X500Principal *subject, OrgSpongycastleAsn1X509GeneralNames *targets) {
  
#line 112
  IOSObjectArray *names = [((OrgSpongycastleAsn1X509GeneralNames *) nil_chk(targets)) getNames];
  
#line 114
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(names))->size_; i++) {
    
#line 116
    OrgSpongycastleAsn1X509GeneralName *gn = IOSObjectArray_Get(names, i);
    
#line 118
    if ([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(gn)) getTagNo] == OrgSpongycastleAsn1X509GeneralName_directoryName) {
      
#line 120
      @try {
        
#line 122
        if ([new_JavaxSecurityAuthX500X500Principal_initWithByteArray_([((OrgSpongycastleAsn1ASN1Primitive *) nil_chk([((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk(([gn getName]))) toASN1Primitive])) getEncoded]) isEqual:subject]) {
          
#line 124
          return true;
        }
      }
      @catch (JavaIoIOException *e) {
      }
    }
  }
  
#line 133
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleX509BCAttributeCertificateIssuer)
