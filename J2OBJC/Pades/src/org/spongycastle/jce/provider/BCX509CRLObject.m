//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jce/provider/BCX509CRLObject.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/Principal.h"
#include "java/security/Provider.h"
#include "java/security/PublicKey.h"
#include "java/security/Signature.h"
#include "java/security/SignatureException.h"
#include "java/security/cert/CRLException.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateEncodingException.h"
#include "java/security/cert/X509CRL.h"
#include "java/security/cert/X509CRLEntry.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "javax/security/auth/x500/X500Principal.h"
#include "org/spongycastle/asn1/ASN1Encodable.h"
#include "org/spongycastle/asn1/ASN1Encoding.h"
#include "org/spongycastle/asn1/ASN1InputStream.h"
#include "org/spongycastle/asn1/ASN1Integer.h"
#include "org/spongycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/spongycastle/asn1/ASN1OctetString.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/DERBitString.h"
#include "org/spongycastle/asn1/util/ASN1Dump.h"
#include "org/spongycastle/asn1/x500/X500Name.h"
#include "org/spongycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/spongycastle/asn1/x509/BCTime.h"
#include "org/spongycastle/asn1/x509/CRLDistPoint.h"
#include "org/spongycastle/asn1/x509/CRLNumber.h"
#include "org/spongycastle/asn1/x509/Certificate.h"
#include "org/spongycastle/asn1/x509/CertificateList.h"
#include "org/spongycastle/asn1/x509/Extension.h"
#include "org/spongycastle/asn1/x509/Extensions.h"
#include "org/spongycastle/asn1/x509/GeneralName.h"
#include "org/spongycastle/asn1/x509/GeneralNames.h"
#include "org/spongycastle/asn1/x509/IssuingDistributionPoint.h"
#include "org/spongycastle/asn1/x509/TBSCertList.h"
#include "org/spongycastle/jce/X509Principal.h"
#include "org/spongycastle/jce/provider/BCExtCRLException.h"
#include "org/spongycastle/jce/provider/BCX509CRLEntryObject.h"
#include "org/spongycastle/jce/provider/BCX509CRLObject.h"
#include "org/spongycastle/jce/provider/BCX509SignatureUtil.h"
#include "org/spongycastle/jce/provider/BouncyCastleProvider.h"
#include "org/spongycastle/jce/provider/RFC3280CertPathUtilities.h"
#include "org/spongycastle/util/Strings.h"
#include "org/spongycastle/util/encoders/Hex.h"

#if !__has_feature(objc_arc)
#error "org/spongycastle/jce/provider/BCX509CRLObject must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleJceProviderBCX509CRLObject () {
 @public
  OrgSpongycastleAsn1X509CertificateList *c_;
  NSString *sigAlgName_;
  IOSByteArray *sigAlgParams_;
  jboolean isIndirect_;
  jboolean isHashCodeSet_;
  jint hashCodeValue_;
}

- (id<JavaUtilSet>)getExtensionOIDsWithBoolean:(jboolean)critical;

- (void)doVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                withJavaSecuritySignature:(JavaSecuritySignature *)sig;

- (id<JavaUtilSet>)loadCRLEntries;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderBCX509CRLObject, c_, OrgSpongycastleAsn1X509CertificateList *)
J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderBCX509CRLObject, sigAlgName_, NSString *)
J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderBCX509CRLObject, sigAlgParams_, IOSByteArray *)

__attribute__((unused)) static id<JavaUtilSet> OrgSpongycastleJceProviderBCX509CRLObject_getExtensionOIDsWithBoolean_(OrgSpongycastleJceProviderBCX509CRLObject *self, jboolean critical);

__attribute__((unused)) static void OrgSpongycastleJceProviderBCX509CRLObject_doVerifyWithJavaSecurityPublicKey_withJavaSecuritySignature_(OrgSpongycastleJceProviderBCX509CRLObject *self, id<JavaSecurityPublicKey> key, JavaSecuritySignature *sig);

__attribute__((unused)) static id<JavaUtilSet> OrgSpongycastleJceProviderBCX509CRLObject_loadCRLEntries(OrgSpongycastleJceProviderBCX509CRLObject *self);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jce/provider/BCX509CRLObject.java"


#line 58
@implementation OrgSpongycastleJceProviderBCX509CRLObject


#line 68
+ (jboolean)isIndirectCRLWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl {
  return OrgSpongycastleJceProviderBCX509CRLObject_isIndirectCRLWithJavaSecurityCertX509CRL_(crl);
}


#line 84
- (instancetype)initWithOrgSpongycastleAsn1X509CertificateList:(OrgSpongycastleAsn1X509CertificateList *)c {
  OrgSpongycastleJceProviderBCX509CRLObject_initWithOrgSpongycastleAsn1X509CertificateList_(self, c);
  return self;
}


#line 115
- (jboolean)hasUnsupportedCriticalExtension {
  
#line 117
  id<JavaUtilSet> extns = [self getCriticalExtensionOIDs];
  
#line 119
  if (extns == nil) {
    
#line 121
    return false;
  }
  
#line 124
  [extns removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, ISSUING_DISTRIBUTION_POINT)];
  [extns removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, DELTA_CRL_INDICATOR)];
  
#line 127
  return ![extns isEmpty];
}


#line 130
- (id<JavaUtilSet>)getExtensionOIDsWithBoolean:(jboolean)critical {
  return OrgSpongycastleJceProviderBCX509CRLObject_getExtensionOIDsWithBoolean_(self, critical);
}


#line 159
- (id<JavaUtilSet>)getCriticalExtensionOIDs {
  
#line 161
  return OrgSpongycastleJceProviderBCX509CRLObject_getExtensionOIDsWithBoolean_(self, true);
}


#line 164
- (id<JavaUtilSet>)getNonCriticalExtensionOIDs {
  
#line 166
  return OrgSpongycastleJceProviderBCX509CRLObject_getExtensionOIDsWithBoolean_(self, false);
}


#line 169
- (IOSByteArray *)getExtensionValueWithNSString:(NSString *)oid {
  
#line 171
  OrgSpongycastleAsn1X509Extensions *exts = [((OrgSpongycastleAsn1X509TBSCertList *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getTBSCertList])) getExtensions];
  
#line 173
  if (exts != nil) {
    
#line 175
    OrgSpongycastleAsn1X509Extension *ext = [exts getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:new_OrgSpongycastleAsn1ASN1ObjectIdentifier_initWithNSString_(oid)];
    
#line 177
    if (ext != nil) {
      
#line 179
      @try {
        
#line 181
        return [((OrgSpongycastleAsn1ASN1OctetString *) nil_chk([ext getExtnValue])) getEncoded];
      }
      @catch (JavaLangException *e) {
        
#line 185
        @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"error parsing ", [e description]));
      }
    }
  }
  
#line 190
  return nil;
}


#line 193
- (IOSByteArray *)getEncoded {
  
#line 196
  @try {
    
#line 198
    return [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
  }
  @catch (JavaIoIOException *e) {
    
#line 202
    @throw new_JavaSecurityCertCRLException_initWithNSString_([e description]);
  }
}


#line 206
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  
#line 210
  JavaSecuritySignature *sig;
  
#line 212
  @try {
    
#line 214
    sig = JavaSecuritySignature_getInstanceWithNSString_withNSString_([self getSigAlgName], OrgSpongycastleJceProviderBouncyCastleProvider_PROVIDER_NAME);
  }
  @catch (JavaLangException *e) {
    
#line 218
    sig = JavaSecuritySignature_getInstanceWithNSString_([self getSigAlgName]);
  }
  
#line 221
  OrgSpongycastleJceProviderBCX509CRLObject_doVerifyWithJavaSecurityPublicKey_withJavaSecuritySignature_(self, key, sig);
}


#line 224
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                           withNSString:(NSString *)sigProvider {
  
#line 228
  JavaSecuritySignature *sig;
  
#line 230
  if (sigProvider != nil) {
    
#line 232
    sig = JavaSecuritySignature_getInstanceWithNSString_withNSString_([self getSigAlgName], sigProvider);
  }
  else {
    
#line 236
    sig = JavaSecuritySignature_getInstanceWithNSString_([self getSigAlgName]);
  }
  
#line 239
  OrgSpongycastleJceProviderBCX509CRLObject_doVerifyWithJavaSecurityPublicKey_withJavaSecuritySignature_(self, key, sig);
}


#line 242
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
               withJavaSecurityProvider:(JavaSecurityProvider *)sigProvider {
  
#line 246
  JavaSecuritySignature *sig;
  
#line 248
  if (sigProvider != nil) {
    
#line 250
    sig = JavaSecuritySignature_getInstanceWithNSString_withJavaSecurityProvider_([self getSigAlgName], sigProvider);
  }
  else {
    
#line 254
    sig = JavaSecuritySignature_getInstanceWithNSString_([self getSigAlgName]);
  }
  
#line 257
  OrgSpongycastleJceProviderBCX509CRLObject_doVerifyWithJavaSecurityPublicKey_withJavaSecuritySignature_(self, key, sig);
}


#line 260
- (void)doVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                withJavaSecuritySignature:(JavaSecuritySignature *)sig {
  OrgSpongycastleJceProviderBCX509CRLObject_doVerifyWithJavaSecurityPublicKey_withJavaSecuritySignature_(self, key, sig);
}


#line 278
- (jint)getVersion {
  
#line 280
  return [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getVersionNumber];
}


#line 283
- (id<JavaSecurityPrincipal>)getIssuerDN {
  
#line 285
  return new_OrgSpongycastleJceX509Principal_initWithOrgSpongycastleAsn1X500X500Name_(OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([((OrgSpongycastleAsn1X500X500Name *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getIssuer])) toASN1Primitive]));
}


#line 288
- (JavaxSecurityAuthX500X500Principal *)getIssuerX500Principal {
  
#line 290
  @try {
    
#line 292
    return new_JavaxSecurityAuthX500X500Principal_initWithByteArray_([((OrgSpongycastleAsn1X500X500Name *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getIssuer])) getEncoded]);
  }
  @catch (JavaIoIOException *e) {
    
#line 296
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"can't encode issuer DN");
  }
}


#line 300
- (JavaUtilDate *)getThisUpdate {
  
#line 302
  return [((OrgSpongycastleAsn1X509BCTime *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getThisUpdate])) getDate];
}


#line 305
- (JavaUtilDate *)getNextUpdate {
  
#line 307
  if ([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getNextUpdate] != nil) {
    
#line 309
    return [((OrgSpongycastleAsn1X509BCTime *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getNextUpdate])) getDate];
  }
  
#line 312
  return nil;
}


#line 315
- (id<JavaUtilSet>)loadCRLEntries {
  return OrgSpongycastleJceProviderBCX509CRLObject_loadCRLEntries(self);
}


#line 340
- (JavaSecurityCertX509CRLEntry *)getRevokedCertificateWithJavaMathBigInteger:(JavaMathBigInteger *)serialNumber {
  
#line 342
  id<JavaUtilEnumeration> certs = [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getRevokedCertificateEnumeration];
  
#line 344
  OrgSpongycastleAsn1X500X500Name *previousCertificateIssuer = nil;
  while ([((id<JavaUtilEnumeration>) nil_chk(certs)) hasMoreElements]) {
    
#line 347
    OrgSpongycastleAsn1X509TBSCertList_CRLEntry *entry_ = (OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) cast_chk([certs nextElement], [OrgSpongycastleAsn1X509TBSCertList_CRLEntry class]);
    
#line 349
    if ([((JavaMathBigInteger *) nil_chk(serialNumber)) isEqual:[((OrgSpongycastleAsn1ASN1Integer *) nil_chk([((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) getUserCertificate])) getValue]]) {
      
#line 351
      return new_OrgSpongycastleJceProviderBCX509CRLEntryObject_initWithOrgSpongycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgSpongycastleAsn1X500X500Name_(entry_, isIndirect_, previousCertificateIssuer);
    }
    
#line 354
    if (isIndirect_ && [entry_ hasExtensions]) {
      
#line 356
      OrgSpongycastleAsn1X509Extension *currentCaName = [((OrgSpongycastleAsn1X509Extensions *) nil_chk([entry_ getExtensions])) getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgSpongycastleAsn1X509Extension, certificateIssuer)];
      
#line 358
      if (currentCaName != nil) {
        
#line 360
        previousCertificateIssuer = OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(nil_chk([((OrgSpongycastleAsn1X509GeneralNames *) nil_chk(OrgSpongycastleAsn1X509GeneralNames_getInstanceWithId_([currentCaName getParsedValue]))) getNames]), 0))) getName]);
      }
    }
  }
  
#line 365
  return nil;
}


#line 368
- (id<JavaUtilSet>)getRevokedCertificates {
  
#line 370
  id<JavaUtilSet> entrySet = OrgSpongycastleJceProviderBCX509CRLObject_loadCRLEntries(self);
  
#line 372
  if (![((id<JavaUtilSet>) nil_chk(entrySet)) isEmpty]) {
    
#line 374
    return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(entrySet);
  }
  
#line 377
  return nil;
}


#line 380
- (IOSByteArray *)getTBSCertList {
  
#line 383
  @try {
    
#line 385
    return [((OrgSpongycastleAsn1X509TBSCertList *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getTBSCertList])) getEncodedWithNSString:@"DER"];
  }
  @catch (JavaIoIOException *e) {
    
#line 389
    @throw new_JavaSecurityCertCRLException_initWithNSString_([e description]);
  }
}


#line 393
- (IOSByteArray *)getSignature {
  
#line 395
  return [((OrgSpongycastleAsn1DERBitString *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getSignature])) getOctets];
}


#line 398
- (NSString *)getSigAlgName {
  
#line 400
  return sigAlgName_;
}


#line 403
- (NSString *)getSigAlgOID {
  
#line 405
  return [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getSignatureAlgorithm])) getAlgorithm])) getId];
}


#line 408
- (IOSByteArray *)getSigAlgParams {
  
#line 410
  if (sigAlgParams_ != nil) {
    
#line 412
    IOSByteArray *tmp = [IOSByteArray newArrayWithLength:sigAlgParams_->size_];
    
#line 414
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sigAlgParams_, 0, tmp, 0, tmp->size_);
    
#line 416
    return tmp;
  }
  
#line 419
  return nil;
}

- (NSString *)description {
  
#line 429
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  NSString *nl = OrgSpongycastleUtilStrings_lineSeparator();
  
#line 432
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"              Version: "])) appendWithInt:[self getVersion]])) appendWithNSString:
#line 433
  nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"             IssuerDN: "])) appendWithId:[self getIssuerDN]])) appendWithNSString:
#line 435
  nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"          This update: "])) appendWithId:[self getThisUpdate]])) appendWithNSString:
#line 437
  nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"          Next update: "])) appendWithId:[self getNextUpdate]])) appendWithNSString:
#line 439
  nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"  Signature Algorithm: "])) appendWithNSString:[self getSigAlgName]])) appendWithNSString:
#line 441
  nl];
  
#line 443
  IOSByteArray *sig = [self getSignature];
  
#line 445
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            Signature: "])) appendWithNSString:[NSString java_stringWithBytes:OrgSpongycastleUtilEncodersHex_encodeWithByteArray_withInt_withInt_(
#line 446
  sig, 0, 20)]])) appendWithNSString:nl];
  for (jint i = 20; i < ((IOSByteArray *) nil_chk(sig))->size_; i += 20) {
    
#line 449
    if (i < sig->size_ - 20) {
      
#line 451
      (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"                       "])) appendWithNSString:[NSString java_stringWithBytes:OrgSpongycastleUtilEncodersHex_encodeWithByteArray_withInt_withInt_(
#line 452
      sig, i, 20)]])) appendWithNSString:nl];
    }
    else {
      
#line 456
      (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"                       "])) appendWithNSString:[NSString java_stringWithBytes:OrgSpongycastleUtilEncodersHex_encodeWithByteArray_withInt_withInt_(
#line 457
      sig, i, sig->size_ - i)]])) appendWithNSString:nl];
    }
  }
  
#line 461
  OrgSpongycastleAsn1X509Extensions *extensions = [((OrgSpongycastleAsn1X509TBSCertList *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getTBSCertList])) getExtensions];
  
#line 463
  if (extensions != nil) {
    
#line 465
    id<JavaUtilEnumeration> e = [extensions oids];
    
#line 467
    if ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
      
#line 469
      (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"           Extensions: "])) appendWithNSString:nl];
    }
    
#line 472
    while ([e hasMoreElements]) {
      
#line 474
      OrgSpongycastleAsn1ASN1ObjectIdentifier *oid = (OrgSpongycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [OrgSpongycastleAsn1ASN1ObjectIdentifier class]);
      OrgSpongycastleAsn1X509Extension *ext = [extensions getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:oid];
      
#line 477
      if ([((OrgSpongycastleAsn1X509Extension *) nil_chk(ext)) getExtnValue] != nil) {
        
#line 479
        IOSByteArray *octs = [((OrgSpongycastleAsn1ASN1OctetString *) nil_chk([ext getExtnValue])) getOctets];
        OrgSpongycastleAsn1ASN1InputStream *dIn = new_OrgSpongycastleAsn1ASN1InputStream_initWithByteArray_(octs);
        (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"                       critical("])) appendWithBoolean:
#line 482
        [ext isCritical]])) appendWithNSString:@") "];
        @try {
          
#line 485
          if ([((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) isEqual:JreLoadStatic(OrgSpongycastleAsn1X509Extension, cRLNumber)]) {
            
#line 487
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:new_OrgSpongycastleAsn1X509CRLNumber_initWithJavaMathBigInteger_(
#line 488
            [((OrgSpongycastleAsn1ASN1Integer *) nil_chk(OrgSpongycastleAsn1ASN1Integer_getInstanceWithId_(
#line 489
            [dIn readObject]))) getPositiveValue])])) appendWithNSString:
#line 490
            nl];
          }
          else if ([oid isEqual:JreLoadStatic(OrgSpongycastleAsn1X509Extension, deltaCRLIndicator)]) {
            
#line 494
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:JreStrcat("$@", @"Base CRL: ", new_OrgSpongycastleAsn1X509CRLNumber_initWithJavaMathBigInteger_(
#line 496
            [((OrgSpongycastleAsn1ASN1Integer *) nil_chk(OrgSpongycastleAsn1ASN1Integer_getInstanceWithId_(
#line 497
            [dIn readObject]))) getPositiveValue]))])) appendWithNSString:
#line 498
            nl];
          }
          else if ([oid isEqual:JreLoadStatic(OrgSpongycastleAsn1X509Extension, issuingDistributionPoint)]) {
            
#line 503
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:OrgSpongycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_(
#line 504
            [dIn readObject])])) appendWithNSString:nl];
          }
          else if ([oid isEqual:JreLoadStatic(OrgSpongycastleAsn1X509Extension, cRLDistributionPoints)]) {
            
#line 509
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:OrgSpongycastleAsn1X509CRLDistPoint_getInstanceWithId_(
#line 510
            [dIn readObject])])) appendWithNSString:nl];
          }
          else if ([oid isEqual:JreLoadStatic(OrgSpongycastleAsn1X509Extension, freshestCRL)]) {
            
#line 514
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:OrgSpongycastleAsn1X509CRLDistPoint_getInstanceWithId_(
#line 515
            [dIn readObject])])) appendWithNSString:nl];
          }
          else {
            
#line 519
            (void) [buf appendWithNSString:[oid getId]];
            (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" value = "])) appendWithNSString:OrgSpongycastleAsn1UtilASN1Dump_dumpAsStringWithId_(
#line 521
            [dIn readObject])])) appendWithNSString:
#line 522
            nl];
          }
        }
        @catch (JavaLangException *ex) {
          
#line 527
          (void) [buf appendWithNSString:[oid getId]];
          (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" value = "])) appendWithNSString:@"*****"])) appendWithNSString:nl];
        }
      }
      else {
        
#line 533
        (void) [buf appendWithNSString:nl];
      }
    }
  }
  id<JavaUtilSet> set = [self getRevokedCertificates];
  if (set != nil) {
    
#line 540
    id<JavaUtilIterator> it = [set iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      
#line 543
      (void) [buf appendWithId:[it next]];
      (void) [buf appendWithNSString:nl];
    }
  }
  return [buf description];
}


#line 557
- (jboolean)isRevokedWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert {
  
#line 559
  if (![((NSString *) nil_chk([((JavaSecurityCertCertificate *) nil_chk(cert)) getType])) isEqual:@"X.509"]) {
    
#line 561
    @throw new_JavaLangRuntimeException_initWithNSString_(@"X.509 CRL used with non X.509 Cert");
  }
  
#line 564
  id<JavaUtilEnumeration> certs = [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getRevokedCertificateEnumeration];
  
#line 566
  OrgSpongycastleAsn1X500X500Name *caName = [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getIssuer];
  
#line 568
  if (certs != nil) {
    
#line 570
    JavaMathBigInteger *serial = [((JavaSecurityCertX509Certificate *) cast_chk(cert, [JavaSecurityCertX509Certificate class])) getSerialNumber];
    
#line 572
    while ([certs hasMoreElements]) {
      
#line 574
      OrgSpongycastleAsn1X509TBSCertList_CRLEntry *entry_ = OrgSpongycastleAsn1X509TBSCertList_CRLEntry_getInstanceWithId_([certs nextElement]);
      
#line 576
      if (isIndirect_ && [((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) hasExtensions]) {
        
#line 578
        OrgSpongycastleAsn1X509Extension *currentCaName = [((OrgSpongycastleAsn1X509Extensions *) nil_chk([((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) getExtensions])) getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgSpongycastleAsn1X509Extension, certificateIssuer)];
        
#line 580
        if (currentCaName != nil) {
          
#line 582
          caName = OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(nil_chk([((OrgSpongycastleAsn1X509GeneralNames *) nil_chk(OrgSpongycastleAsn1X509GeneralNames_getInstanceWithId_([currentCaName getParsedValue]))) getNames]), 0))) getName]);
        }
      }
      
#line 586
      if ([((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1ASN1Integer *) nil_chk([((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) getUserCertificate])) getValue])) isEqual:serial]) {
        
#line 588
        OrgSpongycastleAsn1X500X500Name *issuer;
        
#line 590
        if ([cert isKindOfClass:[JavaSecurityCertX509Certificate class]]) {
          
#line 592
          issuer = OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([((JavaxSecurityAuthX500X500Principal *) nil_chk([((JavaSecurityCertX509Certificate *) cert) getIssuerX500Principal])) getEncoded]);
        }
        else {
          
#line 596
          @try {
            
#line 598
            issuer = [((OrgSpongycastleAsn1X509Certificate *) nil_chk(OrgSpongycastleAsn1X509Certificate_getInstanceWithId_([cert getEncoded]))) getIssuer];
          }
          @catch (JavaSecurityCertCertificateEncodingException *e) {
            
#line 602
            @throw new_JavaLangRuntimeException_initWithNSString_(@"Cannot process certificate");
          }
        }
        
#line 606
        if (![((OrgSpongycastleAsn1X500X500Name *) nil_chk(caName)) isEqual:issuer]) {
          
#line 608
          return false;
        }
        
#line 611
        return true;
      }
    }
  }
  
#line 616
  return false;
}


#line 619
- (jboolean)isEqual:(id)other {
  
#line 621
  if (JreObjectEqualsEquals(self, other)) {
    
#line 623
    return true;
  }
  
#line 626
  if (!([other isKindOfClass:[JavaSecurityCertX509CRL class]])) {
    
#line 628
    return false;
  }
  
#line 631
  if ([other isKindOfClass:[OrgSpongycastleJceProviderBCX509CRLObject class]]) {
    
#line 633
    OrgSpongycastleJceProviderBCX509CRLObject *crlObject = (OrgSpongycastleJceProviderBCX509CRLObject *) other;
    
#line 635
    if (isHashCodeSet_) {
      
#line 637
      jboolean otherIsHashCodeSet = ((OrgSpongycastleJceProviderBCX509CRLObject *) nil_chk(crlObject))->isHashCodeSet_;
      if (otherIsHashCodeSet) {
        
#line 640
        if (crlObject->hashCodeValue_ != hashCodeValue_) {
          
#line 642
          return false;
        }
      }
    }
    
#line 647
    return [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(self->c_)) isEqual:((OrgSpongycastleJceProviderBCX509CRLObject *) nil_chk(crlObject))->c_];
  }
  
#line 650
  return [super isEqual:other];
}


#line 653
- (NSUInteger)hash {
  
#line 655
  if (!isHashCodeSet_) {
    
#line 657
    isHashCodeSet_ = true;
    hashCodeValue_ = ((jint) [super hash]);
  }
  
#line 661
  return hashCodeValue_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 11, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 12, 13, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, 13, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPrincipal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxSecurityAuthX500X500Principal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509CRLEntry;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 23, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(isIndirectCRLWithJavaSecurityCertX509CRL:);
  methods[1].selector = @selector(initWithOrgSpongycastleAsn1X509CertificateList:);
  methods[2].selector = @selector(hasUnsupportedCriticalExtension);
  methods[3].selector = @selector(getExtensionOIDsWithBoolean:);
  methods[4].selector = @selector(getCriticalExtensionOIDs);
  methods[5].selector = @selector(getNonCriticalExtensionOIDs);
  methods[6].selector = @selector(getExtensionValueWithNSString:);
  methods[7].selector = @selector(getEncoded);
  methods[8].selector = @selector(verifyWithJavaSecurityPublicKey:);
  methods[9].selector = @selector(verifyWithJavaSecurityPublicKey:withNSString:);
  methods[10].selector = @selector(verifyWithJavaSecurityPublicKey:withJavaSecurityProvider:);
  methods[11].selector = @selector(doVerifyWithJavaSecurityPublicKey:withJavaSecuritySignature:);
  methods[12].selector = @selector(getVersion);
  methods[13].selector = @selector(getIssuerDN);
  methods[14].selector = @selector(getIssuerX500Principal);
  methods[15].selector = @selector(getThisUpdate);
  methods[16].selector = @selector(getNextUpdate);
  methods[17].selector = @selector(loadCRLEntries);
  methods[18].selector = @selector(getRevokedCertificateWithJavaMathBigInteger:);
  methods[19].selector = @selector(getRevokedCertificates);
  methods[20].selector = @selector(getTBSCertList);
  methods[21].selector = @selector(getSignature);
  methods[22].selector = @selector(getSigAlgName);
  methods[23].selector = @selector(getSigAlgOID);
  methods[24].selector = @selector(getSigAlgParams);
  methods[25].selector = @selector(description);
  methods[26].selector = @selector(isRevokedWithJavaSecurityCertCertificate:);
  methods[27].selector = @selector(isEqual:);
  methods[28].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "c_", "LOrgSpongycastleAsn1X509CertificateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sigAlgName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sigAlgParams_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isIndirect_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isHashCodeSet_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashCodeValue_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isIndirectCRL", "LJavaSecurityCertX509CRL;", "LJavaSecurityCertCRLException;", "LOrgSpongycastleAsn1X509CertificateList;", "getExtensionOIDs", "Z", "getExtensionValue", "LNSString;", "verify", "LJavaSecurityPublicKey;", "LJavaSecurityCertCRLException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;LJavaSecurityNoSuchProviderException;LJavaSecuritySignatureException;", "LJavaSecurityPublicKey;LNSString;", "LJavaSecurityPublicKey;LJavaSecurityProvider;", "LJavaSecurityCertCRLException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;LJavaSecuritySignatureException;", "doVerify", "LJavaSecurityPublicKey;LJavaSecuritySignature;", "getRevokedCertificate", "LJavaMathBigInteger;", "toString", "isRevoked", "LJavaSecurityCertCertificate;", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgSpongycastleJceProviderBCX509CRLObject = { "BCX509CRLObject", "org.spongycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 29, 6, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleJceProviderBCX509CRLObject;
}

@end


#line 68
jboolean OrgSpongycastleJceProviderBCX509CRLObject_isIndirectCRLWithJavaSecurityCertX509CRL_(JavaSecurityCertX509CRL *crl) {
  OrgSpongycastleJceProviderBCX509CRLObject_initialize();
  
#line 71
  @try {
    
#line 73
    IOSByteArray *idp = [((JavaSecurityCertX509CRL *) nil_chk(crl)) getExtensionValueWithNSString:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, issuingDistributionPoint))) getId]];
    return idp != nil &&
#line 75
    [((OrgSpongycastleAsn1X509IssuingDistributionPoint *) nil_chk(OrgSpongycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_([((OrgSpongycastleAsn1ASN1OctetString *) nil_chk(OrgSpongycastleAsn1ASN1OctetString_getInstanceWithId_(idp))) getOctets]))) isIndirectCRL];
  }
  @catch (JavaLangException *e) {
    
#line 79
    @throw new_OrgSpongycastleJceProviderBCExtCRLException_initPackagePrivateWithNSString_withJavaLangThrowable_(
#line 80
    @"Exception reading IssuingDistributionPoint", e);
  }
}


#line 84
void OrgSpongycastleJceProviderBCX509CRLObject_initWithOrgSpongycastleAsn1X509CertificateList_(OrgSpongycastleJceProviderBCX509CRLObject *self, OrgSpongycastleAsn1X509CertificateList *c) {
  JavaSecurityCertX509CRL_init(self);
  self->isHashCodeSet_ =
#line 65
  false;
  
#line 88
  self->c_ = c;
  
#line 90
  @try {
    
#line 92
    self->sigAlgName_ = OrgSpongycastleJceProviderBCX509SignatureUtil_getSignatureNameWithOrgSpongycastleAsn1X509AlgorithmIdentifier_([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c)) getSignatureAlgorithm]);
    
#line 94
    if ([((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([c getSignatureAlgorithm])) getParameters] != nil) {
      
#line 96
      self->sigAlgParams_ = [((OrgSpongycastleAsn1ASN1Primitive *) nil_chk([((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk(([((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([c getSignatureAlgorithm])) getParameters]))) toASN1Primitive])) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
    }
    else {
      
#line 100
      self->sigAlgParams_ = nil;
    }
    
#line 103
    self->isIndirect_ = OrgSpongycastleJceProviderBCX509CRLObject_isIndirectCRLWithJavaSecurityCertX509CRL_(self);
  }
  @catch (JavaLangException *e) {
    
#line 107
    @throw new_JavaSecurityCertCRLException_initWithNSString_(JreStrcat("$@", @"CRL contents invalid: ", e));
  }
}


#line 84
OrgSpongycastleJceProviderBCX509CRLObject *new_OrgSpongycastleJceProviderBCX509CRLObject_initWithOrgSpongycastleAsn1X509CertificateList_(OrgSpongycastleAsn1X509CertificateList *c) {
  J2OBJC_NEW_IMPL(OrgSpongycastleJceProviderBCX509CRLObject, initWithOrgSpongycastleAsn1X509CertificateList_, c)
}


#line 84
OrgSpongycastleJceProviderBCX509CRLObject *create_OrgSpongycastleJceProviderBCX509CRLObject_initWithOrgSpongycastleAsn1X509CertificateList_(OrgSpongycastleAsn1X509CertificateList *c) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJceProviderBCX509CRLObject, initWithOrgSpongycastleAsn1X509CertificateList_, c)
}


#line 130
id<JavaUtilSet> OrgSpongycastleJceProviderBCX509CRLObject_getExtensionOIDsWithBoolean_(OrgSpongycastleJceProviderBCX509CRLObject *self, jboolean critical) {
  
#line 132
  if ([self getVersion] == 2) {
    
#line 134
    OrgSpongycastleAsn1X509Extensions *extensions = [((OrgSpongycastleAsn1X509TBSCertList *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(self->c_)) getTBSCertList])) getExtensions];
    
#line 136
    if (extensions != nil) {
      
#line 138
      id<JavaUtilSet> set = new_JavaUtilHashSet_init();
      id<JavaUtilEnumeration> e = [extensions oids];
      
#line 141
      while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
        
#line 143
        OrgSpongycastleAsn1ASN1ObjectIdentifier *oid = (OrgSpongycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [OrgSpongycastleAsn1ASN1ObjectIdentifier class]);
        OrgSpongycastleAsn1X509Extension *ext = [extensions getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:oid];
        
#line 146
        if (critical == [((OrgSpongycastleAsn1X509Extension *) nil_chk(ext)) isCritical]) {
          
#line 148
          [set addWithId:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) getId]];
        }
      }
      
#line 152
      return set;
    }
  }
  
#line 156
  return nil;
}


#line 260
void OrgSpongycastleJceProviderBCX509CRLObject_doVerifyWithJavaSecurityPublicKey_withJavaSecuritySignature_(OrgSpongycastleJceProviderBCX509CRLObject *self, id<JavaSecurityPublicKey> key, JavaSecuritySignature *sig) {
  
#line 264
  if (![((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(self->c_)) getSignatureAlgorithm])) isEqual:[((OrgSpongycastleAsn1X509TBSCertList *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(self->c_)) getTBSCertList])) getSignature]]) {
    
#line 266
    @throw new_JavaSecurityCertCRLException_initWithNSString_(@"Signature algorithm on CertificateList does not match TBSCertList.");
  }
  
#line 269
  [((JavaSecuritySignature *) nil_chk(sig)) initVerifyWithJavaSecurityPublicKey:key];
  [sig updateWithByteArray:[self getTBSCertList]];
  
#line 272
  if (![sig verifyWithByteArray:[self getSignature]]) {
    
#line 274
    @throw new_JavaSecuritySignatureException_initWithNSString_(@"CRL does not verify with supplied public key.");
  }
}


#line 315
id<JavaUtilSet> OrgSpongycastleJceProviderBCX509CRLObject_loadCRLEntries(OrgSpongycastleJceProviderBCX509CRLObject *self) {
  
#line 317
  id<JavaUtilSet> entrySet = new_JavaUtilHashSet_init();
  id<JavaUtilEnumeration> certs = [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(self->c_)) getRevokedCertificateEnumeration];
  
#line 320
  OrgSpongycastleAsn1X500X500Name *previousCertificateIssuer = nil;
  while ([((id<JavaUtilEnumeration>) nil_chk(certs)) hasMoreElements]) {
    
#line 323
    OrgSpongycastleAsn1X509TBSCertList_CRLEntry *entry_ = (OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) cast_chk([certs nextElement], [OrgSpongycastleAsn1X509TBSCertList_CRLEntry class]);
    OrgSpongycastleJceProviderBCX509CRLEntryObject *crlEntry = new_OrgSpongycastleJceProviderBCX509CRLEntryObject_initWithOrgSpongycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgSpongycastleAsn1X500X500Name_(entry_, self->isIndirect_, previousCertificateIssuer);
    [entrySet addWithId:crlEntry];
    if (self->isIndirect_ && [((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) hasExtensions]) {
      
#line 328
      OrgSpongycastleAsn1X509Extension *currentCaName = [((OrgSpongycastleAsn1X509Extensions *) nil_chk([((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) getExtensions])) getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgSpongycastleAsn1X509Extension, certificateIssuer)];
      
#line 330
      if (currentCaName != nil) {
        
#line 332
        previousCertificateIssuer = OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(nil_chk([((OrgSpongycastleAsn1X509GeneralNames *) nil_chk(OrgSpongycastleAsn1X509GeneralNames_getInstanceWithId_([currentCaName getParsedValue]))) getNames]), 0))) getName]);
      }
    }
  }
  
#line 337
  return entrySet;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleJceProviderBCX509CRLObject)
