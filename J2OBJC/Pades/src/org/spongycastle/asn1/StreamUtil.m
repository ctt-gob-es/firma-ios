//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/asn1/StreamUtil.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Integer.h"
#include "java/lang/Runtime.h"
#include "java/nio/channels/FileChannel.h"
#include "org/spongycastle/asn1/ASN1InputStream.h"
#include "org/spongycastle/asn1/LimitedInputStream.h"
#include "org/spongycastle/asn1/StreamUtil.h"

#if !__has_feature(objc_arc)
#error "org/spongycastle/asn1/StreamUtil must be compiled with ARC (-fobjc-arc)"
#endif

inline jlong OrgSpongycastleAsn1StreamUtil_get_MAX_MEMORY(void);
static jlong OrgSpongycastleAsn1StreamUtil_MAX_MEMORY;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgSpongycastleAsn1StreamUtil, MAX_MEMORY, jlong)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/asn1/StreamUtil.java"

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleAsn1StreamUtil)


#line 9
@implementation OrgSpongycastleAsn1StreamUtil


#line 9
- (instancetype)initPackagePrivate {
  OrgSpongycastleAsn1StreamUtil_initPackagePrivate(self);
  return self;
}


#line 19
+ (jint)findLimitWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return OrgSpongycastleAsn1StreamUtil_findLimitWithJavaIoInputStream_(inArg);
}


#line 59
+ (jint)calculateBodyLengthWithInt:(jint)length {
  return OrgSpongycastleAsn1StreamUtil_calculateBodyLengthWithInt_(length);
}


#line 83
+ (jint)calculateTagLengthWithInt:(jint)tagNo {
  return OrgSpongycastleAsn1StreamUtil_calculateTagLengthWithInt_(tagNo);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 4, 3, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(findLimitWithJavaIoInputStream:);
  methods[2].selector = @selector(calculateBodyLengthWithInt:);
  methods[3].selector = @selector(calculateTagLengthWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_MEMORY", "J", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "findLimit", "LJavaIoInputStream;", "calculateBodyLength", "I", "calculateTagLength", "LJavaIoIOException;", &OrgSpongycastleAsn1StreamUtil_MAX_MEMORY };
  static const J2ObjcClassInfo _OrgSpongycastleAsn1StreamUtil = { "StreamUtil", "org.spongycastle.asn1", ptrTable, methods, fields, 7, 0x0, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleAsn1StreamUtil;
}

+ (void)initialize {
  if (self == [OrgSpongycastleAsn1StreamUtil class]) {
    OrgSpongycastleAsn1StreamUtil_MAX_MEMORY =
#line 11
    [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) maxMemory];
    J2OBJC_SET_INITIALIZED(OrgSpongycastleAsn1StreamUtil)
  }
}

@end


#line 9
void OrgSpongycastleAsn1StreamUtil_initPackagePrivate(OrgSpongycastleAsn1StreamUtil *self) {
  NSObject_init(self);
}


#line 9
OrgSpongycastleAsn1StreamUtil *new_OrgSpongycastleAsn1StreamUtil_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1StreamUtil, initPackagePrivate)
}


#line 9
OrgSpongycastleAsn1StreamUtil *create_OrgSpongycastleAsn1StreamUtil_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1StreamUtil, initPackagePrivate)
}


#line 19
jint OrgSpongycastleAsn1StreamUtil_findLimitWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  OrgSpongycastleAsn1StreamUtil_initialize();
  if ([inArg isKindOfClass:[OrgSpongycastleAsn1LimitedInputStream class]]) {
    
#line 23
    return [((OrgSpongycastleAsn1LimitedInputStream *) nil_chk(((OrgSpongycastleAsn1LimitedInputStream *) inArg))) getRemaining];
  }
  else if ([inArg isKindOfClass:[OrgSpongycastleAsn1ASN1InputStream class]]) {
    
#line 27
    return [((OrgSpongycastleAsn1ASN1InputStream *) nil_chk(((OrgSpongycastleAsn1ASN1InputStream *) inArg))) getLimit];
  }
  else if ([inArg isKindOfClass:[JavaIoByteArrayInputStream class]]) {
    
#line 31
    return [((JavaIoByteArrayInputStream *) nil_chk(((JavaIoByteArrayInputStream *) inArg))) available];
  }
  else if ([inArg isKindOfClass:[JavaIoFileInputStream class]]) {
    
#line 35
    @try {
      
#line 37
      JavaNioChannelsFileChannel *channel = [((JavaIoFileInputStream *) nil_chk(((JavaIoFileInputStream *) inArg))) getChannel];
      jlong size = (channel != nil) ? [((JavaNioChannelsFileChannel *) nil_chk(channel)) size] : JavaLangInteger_MAX_VALUE;
      
#line 40
      if (size < JavaLangInteger_MAX_VALUE) {
        
#line 42
        return (jint) size;
      }
    }
    @catch (JavaIoIOException *e) {
    }
  }
  
#line 51
  if (OrgSpongycastleAsn1StreamUtil_MAX_MEMORY > JavaLangInteger_MAX_VALUE) {
    
#line 53
    return JavaLangInteger_MAX_VALUE;
  }
  
#line 56
  return (jint) OrgSpongycastleAsn1StreamUtil_MAX_MEMORY;
}


#line 59
jint OrgSpongycastleAsn1StreamUtil_calculateBodyLengthWithInt_(jint length) {
  OrgSpongycastleAsn1StreamUtil_initialize();
  
#line 62
  jint count = 1;
  
#line 64
  if (length > 127) {
    
#line 66
    jint size = 1;
    jint val = length;
    
#line 69
    while ((JreURShiftAssignInt(&val, 8)) != 0) {
      
#line 71
      size++;
    }
    
#line 74
    for (jint i = (size - 1) * 8; i >= 0; i -= 8) {
      
#line 76
      count++;
    }
  }
  
#line 80
  return count;
}


#line 83
jint OrgSpongycastleAsn1StreamUtil_calculateTagLengthWithInt_(jint tagNo) {
  OrgSpongycastleAsn1StreamUtil_initialize();
  
#line 86
  jint length = 1;
  
#line 88
  if (tagNo >= 31) {
    
#line 90
    if (tagNo < 128) {
      
#line 92
      length++;
    }
    else {
      
#line 96
      IOSByteArray *stack = [IOSByteArray newArrayWithLength:5];
      jint pos = stack->size_;
      
#line 99
      *IOSByteArray_GetRef(stack, --pos) = (jbyte) (tagNo & (jint) 0x7F);
      
#line 101
      do {
        
#line 103
        JreRShiftAssignInt(&tagNo, 7);
        *IOSByteArray_GetRef(stack, --pos) = (jbyte) ((tagNo & (jint) 0x7F) | (jint) 0x80);
      }
      while (tagNo > 127);
      
#line 108
      length += stack->size_ - pos;
    }
  }
  
#line 112
  return length;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleAsn1StreamUtil)
