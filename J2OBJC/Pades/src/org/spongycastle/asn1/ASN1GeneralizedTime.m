//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/asn1/ASN1GeneralizedTime.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/SimpleTimeZone.h"
#include "java/util/TimeZone.h"
#include "org/spongycastle/asn1/ASN1GeneralizedTime.h"
#include "org/spongycastle/asn1/ASN1OctetString.h"
#include "org/spongycastle/asn1/ASN1OutputStream.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/ASN1TaggedObject.h"
#include "org/spongycastle/asn1/BERTags.h"
#include "org/spongycastle/asn1/StreamUtil.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/Strings.h"

#if !__has_feature(objc_arc)
#error "org/spongycastle/asn1/ASN1GeneralizedTime must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleAsn1ASN1GeneralizedTime () {
 @public
  IOSByteArray *time_;
}

- (NSString *)calculateGMTOffset;

- (NSString *)convertWithInt:(jint)time;

- (jboolean)hasFractionalSeconds;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleAsn1ASN1GeneralizedTime, time_, IOSByteArray *)

__attribute__((unused)) static NSString *OrgSpongycastleAsn1ASN1GeneralizedTime_calculateGMTOffset(OrgSpongycastleAsn1ASN1GeneralizedTime *self);

__attribute__((unused)) static NSString *OrgSpongycastleAsn1ASN1GeneralizedTime_convertWithInt_(OrgSpongycastleAsn1ASN1GeneralizedTime *self, jint time);

__attribute__((unused)) static jboolean OrgSpongycastleAsn1ASN1GeneralizedTime_hasFractionalSeconds(OrgSpongycastleAsn1ASN1GeneralizedTime *self);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/asn1/ASN1GeneralizedTime.java"


#line 44
@implementation OrgSpongycastleAsn1ASN1GeneralizedTime


#line 56
+ (OrgSpongycastleAsn1ASN1GeneralizedTime *)getInstanceWithId:(id)obj {
  return OrgSpongycastleAsn1ASN1GeneralizedTime_getInstanceWithId_(obj);
}


#line 89
+ (OrgSpongycastleAsn1ASN1GeneralizedTime *)getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject:(OrgSpongycastleAsn1ASN1TaggedObject *)obj
                                                                                   withBoolean:(jboolean)explicit_ {
  return OrgSpongycastleAsn1ASN1GeneralizedTime_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_);
}


#line 114
- (instancetype)initWithNSString:(NSString *)time {
  OrgSpongycastleAsn1ASN1GeneralizedTime_initWithNSString_(self, time);
  return self;
}


#line 133
- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time {
  OrgSpongycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_(self, time);
  return self;
}


#line 150
- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgSpongycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_withJavaUtilLocale_(self, time, locale);
  return self;
}


#line 161
- (instancetype)initWithByteArray:(IOSByteArray *)bytes {
  OrgSpongycastleAsn1ASN1GeneralizedTime_initWithByteArray_(self, bytes);
  return self;
}


#line 172
- (NSString *)getTimeString {
  
#line 174
  return OrgSpongycastleUtilStrings_fromByteArrayWithByteArray_(time_);
}


#line 191
- (NSString *)getTime {
  
#line 193
  NSString *stime = OrgSpongycastleUtilStrings_fromByteArrayWithByteArray_(time_);
  
#line 198
  if ([((NSString *) nil_chk(stime)) charAtWithInt:[stime java_length] - 1] == 'Z') {
    
#line 200
    return JreStrcat("$$", [stime java_substring:0 endIndex:[stime java_length] - 1], @"GMT+00:00");
  }
  else {
    
#line 204
    jint signPos = [stime java_length] - 5;
    jchar sign = [stime charAtWithInt:signPos];
    if (sign == '-' || sign == '+') {
      
#line 208
      return JreStrcat("$$$C$", [stime java_substring:0 endIndex:signPos], @"GMT",
#line 210
      [stime java_substring:signPos endIndex:signPos + 3], ':',
#line 212
      [stime java_substring:signPos + 3]);
    }
    else {
      
#line 216
      signPos = [stime java_length] - 3;
      sign = [stime charAtWithInt:signPos];
      if (sign == '-' || sign == '+') {
        
#line 220
        return JreStrcat("$$$$", [stime java_substring:0 endIndex:signPos], @"GMT",
#line 222
        [stime java_substring:signPos], @":00");
      }
    }
  }
  
#line 227
  return JreStrcat("$$", stime, OrgSpongycastleAsn1ASN1GeneralizedTime_calculateGMTOffset(self));
}


#line 230
- (NSString *)calculateGMTOffset {
  return OrgSpongycastleAsn1ASN1GeneralizedTime_calculateGMTOffset(self);
}


#line 258
- (NSString *)convertWithInt:(jint)time {
  return OrgSpongycastleAsn1ASN1GeneralizedTime_convertWithInt_(self, time);
}


#line 268
- (JavaUtilDate *)getDate {
  
#line 271
  JavaTextSimpleDateFormat *dateF;
  NSString *stime = OrgSpongycastleUtilStrings_fromByteArrayWithByteArray_(time_);
  NSString *d = stime;
  
#line 275
  if ([((NSString *) nil_chk(stime)) java_hasSuffix:@"Z"]) {
    
#line 277
    if (OrgSpongycastleAsn1ASN1GeneralizedTime_hasFractionalSeconds(self)) {
      
#line 279
      dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmss.SSS'Z'");
    }
    else {
      
#line 283
      dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmss'Z'");
    }
    
#line 286
    [dateF setTimeZoneWithJavaUtilTimeZone:new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z")];
  }
  else if ([stime java_indexOf:'-'] > 0 || [stime java_indexOf:'+'] > 0) {
    
#line 290
    d = [self getTime];
    if (OrgSpongycastleAsn1ASN1GeneralizedTime_hasFractionalSeconds(self)) {
      
#line 293
      dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmss.SSSz");
    }
    else {
      
#line 297
      dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmssz");
    }
    
#line 300
    [dateF setTimeZoneWithJavaUtilTimeZone:new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z")];
  }
  else {
    
#line 304
    if (OrgSpongycastleAsn1ASN1GeneralizedTime_hasFractionalSeconds(self)) {
      
#line 306
      dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmss.SSS");
    }
    else {
      
#line 310
      dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmss");
    }
    
#line 313
    [dateF setTimeZoneWithJavaUtilTimeZone:new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, [((JavaUtilTimeZone *) nil_chk(JavaUtilTimeZone_getDefault())) getID])];
  }
  
#line 316
  if (OrgSpongycastleAsn1ASN1GeneralizedTime_hasFractionalSeconds(self)) {
    
#line 319
    NSString *frac = [((NSString *) nil_chk(d)) java_substring:14];
    jint index;
    for (index = 1; index < [((NSString *) nil_chk(frac)) java_length]; index++) {
      
#line 323
      jchar ch = [frac charAtWithInt:index];
      if (!('0' <= ch && ch <= '9')) {
        
#line 326
        break;
      }
    }
    
#line 330
    if (index - 1 > 3) {
      
#line 332
      frac = JreStrcat("$$", [frac java_substring:0 endIndex:4], [frac java_substring:index]);
      d = JreStrcat("$$", [d java_substring:0 endIndex:14], frac);
    }
    else if (index - 1 == 1) {
      
#line 337
      frac = JreStrcat("$$$", [frac java_substring:0 endIndex:index], @"00", [frac java_substring:index]);
      d = JreStrcat("$$", [d java_substring:0 endIndex:14], frac);
    }
    else if (index - 1 == 2) {
      
#line 342
      frac = JreStrcat("$C$", [frac java_substring:0 endIndex:index], '0', [frac java_substring:index]);
      d = JreStrcat("$$", [d java_substring:0 endIndex:14], frac);
    }
  }
  
#line 347
  return [dateF parseWithNSString:d];
}


#line 350
- (jboolean)hasFractionalSeconds {
  return OrgSpongycastleAsn1ASN1GeneralizedTime_hasFractionalSeconds(self);
}


#line 365
- (jboolean)isConstructed {
  
#line 367
  return false;
}


#line 370
- (jint)encodedLength {
  
#line 372
  jint length = ((IOSByteArray *) nil_chk(time_))->size_;
  
#line 374
  return 1 + OrgSpongycastleAsn1StreamUtil_calculateBodyLengthWithInt_(length) + length;
}


#line 377
- (void)encodeWithOrgSpongycastleAsn1ASN1OutputStream:(OrgSpongycastleAsn1ASN1OutputStream *)outArg {
  
#line 381
  [((OrgSpongycastleAsn1ASN1OutputStream *) nil_chk(outArg)) writeEncodedWithInt:OrgSpongycastleAsn1BERTags_GENERALIZED_TIME withByteArray:time_];
}


#line 384
- (jboolean)asn1EqualsWithOrgSpongycastleAsn1ASN1Primitive:(OrgSpongycastleAsn1ASN1Primitive *)o {
  
#line 387
  if (!([o isKindOfClass:[OrgSpongycastleAsn1ASN1GeneralizedTime class]])) {
    
#line 389
    return false;
  }
  
#line 392
  return OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_(time_, ((OrgSpongycastleAsn1ASN1GeneralizedTime *) nil_chk(((OrgSpongycastleAsn1ASN1GeneralizedTime *) cast_chk(o, [OrgSpongycastleAsn1ASN1GeneralizedTime class]))))->time_);
}


#line 395
- (NSUInteger)hash {
  
#line 397
  return OrgSpongycastleUtilArrays_hashCodeWithByteArray_(time_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgSpongycastleAsn1ASN1GeneralizedTime;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1GeneralizedTime;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, 9, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, 12, -1, -1, -1 },
    { NULL, "Z", 0x0, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithId:);
  methods[1].selector = @selector(getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject:withBoolean:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithJavaUtilDate:);
  methods[4].selector = @selector(initWithJavaUtilDate:withJavaUtilLocale:);
  methods[5].selector = @selector(initWithByteArray:);
  methods[6].selector = @selector(getTimeString);
  methods[7].selector = @selector(getTime);
  methods[8].selector = @selector(calculateGMTOffset);
  methods[9].selector = @selector(convertWithInt:);
  methods[10].selector = @selector(getDate);
  methods[11].selector = @selector(hasFractionalSeconds);
  methods[12].selector = @selector(isConstructed);
  methods[13].selector = @selector(encodedLength);
  methods[14].selector = @selector(encodeWithOrgSpongycastleAsn1ASN1OutputStream:);
  methods[15].selector = @selector(asn1EqualsWithOrgSpongycastleAsn1ASN1Primitive:);
  methods[16].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "time_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LNSObject;", "LOrgSpongycastleAsn1ASN1TaggedObject;Z", "LNSString;", "LJavaUtilDate;", "LJavaUtilDate;LJavaUtilLocale;", "[B", "convert", "I", "LJavaTextParseException;", "encode", "LOrgSpongycastleAsn1ASN1OutputStream;", "LJavaIoIOException;", "asn1Equals", "LOrgSpongycastleAsn1ASN1Primitive;", "hashCode" };
  static const J2ObjcClassInfo _OrgSpongycastleAsn1ASN1GeneralizedTime = { "ASN1GeneralizedTime", "org.spongycastle.asn1", ptrTable, methods, fields, 7, 0x1, 17, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleAsn1ASN1GeneralizedTime;
}

@end


#line 56
OrgSpongycastleAsn1ASN1GeneralizedTime *OrgSpongycastleAsn1ASN1GeneralizedTime_getInstanceWithId_(id obj) {
  OrgSpongycastleAsn1ASN1GeneralizedTime_initialize();
  
#line 59
  if (obj == nil || [obj isKindOfClass:[OrgSpongycastleAsn1ASN1GeneralizedTime class]]) {
    
#line 61
    return (OrgSpongycastleAsn1ASN1GeneralizedTime *) cast_chk(obj, [OrgSpongycastleAsn1ASN1GeneralizedTime class]);
  }
  
#line 64
  if ([obj isKindOfClass:[IOSByteArray class]]) {
    
#line 66
    @try {
      
#line 68
      return (OrgSpongycastleAsn1ASN1GeneralizedTime *) cast_chk(OrgSpongycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_((IOSByteArray *) cast_chk(obj, [IOSByteArray class])), [OrgSpongycastleAsn1ASN1GeneralizedTime class]);
    }
    @catch (JavaLangException *e) {
      
#line 72
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"encoding error in getInstance: ", [e description]));
    }
  }
  
#line 76
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"illegal object in getInstance: ", [[obj java_getClass] getName]));
}


#line 89
OrgSpongycastleAsn1ASN1GeneralizedTime *OrgSpongycastleAsn1ASN1GeneralizedTime_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(OrgSpongycastleAsn1ASN1TaggedObject *obj, jboolean explicit_) {
  OrgSpongycastleAsn1ASN1GeneralizedTime_initialize();
  
#line 93
  OrgSpongycastleAsn1ASN1Primitive *o = [((OrgSpongycastleAsn1ASN1TaggedObject *) nil_chk(obj)) getObject];
  
#line 95
  if (explicit_ || [o isKindOfClass:[OrgSpongycastleAsn1ASN1GeneralizedTime class]]) {
    
#line 97
    return OrgSpongycastleAsn1ASN1GeneralizedTime_getInstanceWithId_(o);
  }
  else {
    
#line 101
    return new_OrgSpongycastleAsn1ASN1GeneralizedTime_initWithByteArray_([((OrgSpongycastleAsn1ASN1OctetString *) nil_chk(((OrgSpongycastleAsn1ASN1OctetString *) cast_chk(o, [OrgSpongycastleAsn1ASN1OctetString class])))) getOctets]);
  }
}


#line 114
void OrgSpongycastleAsn1ASN1GeneralizedTime_initWithNSString_(OrgSpongycastleAsn1ASN1GeneralizedTime *self, NSString *time) {
  OrgSpongycastleAsn1ASN1Primitive_init(self);
  
#line 117
  self->time_ = OrgSpongycastleUtilStrings_toByteArrayWithNSString_(time);
  @try {
    
#line 120
    (void) [self getDate];
  }
  @catch (JavaTextParseException *e) {
    
#line 124
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid date string: ", [e getMessage]));
  }
}


#line 114
OrgSpongycastleAsn1ASN1GeneralizedTime *new_OrgSpongycastleAsn1ASN1GeneralizedTime_initWithNSString_(NSString *time) {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1ASN1GeneralizedTime, initWithNSString_, time)
}


#line 114
OrgSpongycastleAsn1ASN1GeneralizedTime *create_OrgSpongycastleAsn1ASN1GeneralizedTime_initWithNSString_(NSString *time) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1ASN1GeneralizedTime, initWithNSString_, time)
}


#line 133
void OrgSpongycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_(OrgSpongycastleAsn1ASN1GeneralizedTime *self, JavaUtilDate *time) {
  OrgSpongycastleAsn1ASN1Primitive_init(self);
  
#line 136
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmss'Z'");
  
#line 138
  [dateF setTimeZoneWithJavaUtilTimeZone:new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z")];
  
#line 140
  self->time_ = OrgSpongycastleUtilStrings_toByteArrayWithNSString_([dateF formatWithJavaUtilDate:time]);
}


#line 133
OrgSpongycastleAsn1ASN1GeneralizedTime *new_OrgSpongycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_(JavaUtilDate *time) {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1ASN1GeneralizedTime, initWithJavaUtilDate_, time)
}


#line 133
OrgSpongycastleAsn1ASN1GeneralizedTime *create_OrgSpongycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_(JavaUtilDate *time) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1ASN1GeneralizedTime, initWithJavaUtilDate_, time)
}


#line 150
void OrgSpongycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_withJavaUtilLocale_(OrgSpongycastleAsn1ASN1GeneralizedTime *self, JavaUtilDate *time, JavaUtilLocale *locale) {
  OrgSpongycastleAsn1ASN1Primitive_init(self);
  
#line 154
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"yyyyMMddHHmmss'Z'", locale);
  
#line 156
  [dateF setTimeZoneWithJavaUtilTimeZone:new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z")];
  
#line 158
  self->time_ = OrgSpongycastleUtilStrings_toByteArrayWithNSString_([dateF formatWithJavaUtilDate:time]);
}


#line 150
OrgSpongycastleAsn1ASN1GeneralizedTime *new_OrgSpongycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1ASN1GeneralizedTime, initWithJavaUtilDate_withJavaUtilLocale_, time, locale)
}


#line 150
OrgSpongycastleAsn1ASN1GeneralizedTime *create_OrgSpongycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1ASN1GeneralizedTime, initWithJavaUtilDate_withJavaUtilLocale_, time, locale)
}


#line 161
void OrgSpongycastleAsn1ASN1GeneralizedTime_initWithByteArray_(OrgSpongycastleAsn1ASN1GeneralizedTime *self, IOSByteArray *bytes) {
  OrgSpongycastleAsn1ASN1Primitive_init(self);
  
#line 164
  self->time_ = bytes;
}


#line 161
OrgSpongycastleAsn1ASN1GeneralizedTime *new_OrgSpongycastleAsn1ASN1GeneralizedTime_initWithByteArray_(IOSByteArray *bytes) {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1ASN1GeneralizedTime, initWithByteArray_, bytes)
}


#line 161
OrgSpongycastleAsn1ASN1GeneralizedTime *create_OrgSpongycastleAsn1ASN1GeneralizedTime_initWithByteArray_(IOSByteArray *bytes) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1ASN1GeneralizedTime, initWithByteArray_, bytes)
}


#line 230
NSString *OrgSpongycastleAsn1ASN1GeneralizedTime_calculateGMTOffset(OrgSpongycastleAsn1ASN1GeneralizedTime *self) {
  
#line 232
  NSString *sign = @"+";
  JavaUtilTimeZone *timeZone = JavaUtilTimeZone_getDefault();
  jint offset = [((JavaUtilTimeZone *) nil_chk(timeZone)) getRawOffset];
  if (offset < 0) {
    
#line 237
    sign = @"-";
    offset = -offset;
  }
  jint hours = JreIntDiv(offset, (60 * 60 * 1000));
  jint minutes = JreIntDiv((offset - (hours * 60 * 60 * 1000)), (60 * 1000));
  
#line 243
  @try {
    
#line 245
    if ([timeZone useDaylightTime] && [timeZone inDaylightTimeWithJavaUtilDate:[self getDate]]) {
      
#line 247
      hours += [sign isEqual:@"+"] ? 1 : -1;
    }
  }
  @catch (JavaTextParseException *e) {
  }
  
#line 255
  return JreStrcat("$$$C$", @"GMT", sign, OrgSpongycastleAsn1ASN1GeneralizedTime_convertWithInt_(self, hours), ':', OrgSpongycastleAsn1ASN1GeneralizedTime_convertWithInt_(self, minutes));
}


#line 258
NSString *OrgSpongycastleAsn1ASN1GeneralizedTime_convertWithInt_(OrgSpongycastleAsn1ASN1GeneralizedTime *self, jint time) {
  
#line 260
  if (time < 10) {
    
#line 262
    return JreStrcat("CI", '0', time);
  }
  
#line 265
  return JavaLangInteger_toStringWithInt_(time);
}


#line 350
jboolean OrgSpongycastleAsn1ASN1GeneralizedTime_hasFractionalSeconds(OrgSpongycastleAsn1ASN1GeneralizedTime *self) {
  
#line 352
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(self->time_))->size_; i++) {
    
#line 354
    if (IOSByteArray_Get(self->time_, i) == '.') {
      
#line 356
      if (i == 14) {
        
#line 358
        return true;
      }
    }
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleAsn1ASN1GeneralizedTime)
