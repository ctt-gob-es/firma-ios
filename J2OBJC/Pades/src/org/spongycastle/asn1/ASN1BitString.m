//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/asn1/ASN1BitString.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuffer.h"
#include "org/spongycastle/asn1/ASN1BitString.h"
#include "org/spongycastle/asn1/ASN1OutputStream.h"
#include "org/spongycastle/asn1/ASN1ParsingException.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/DERBitString.h"
#include "org/spongycastle/asn1/DLBitString.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/io/Streams.h"

#if !__has_feature(objc_arc)
#error "org/spongycastle/asn1/ASN1BitString must be compiled with ARC (-fobjc-arc)"
#endif

inline IOSCharArray *OrgSpongycastleAsn1ASN1BitString_get_table(void);
static IOSCharArray *OrgSpongycastleAsn1ASN1BitString_table;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleAsn1ASN1BitString, table, IOSCharArray *)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/asn1/ASN1BitString.java"

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleAsn1ASN1BitString)


#line 14
@implementation OrgSpongycastleAsn1ASN1BitString


#line 28
+ (jint)getPadBitsWithInt:(jint)bitString {
  return OrgSpongycastleAsn1ASN1BitString_getPadBitsWithInt_(bitString);
}


#line 76
+ (IOSByteArray *)getBytesWithInt:(jint)bitString {
  return OrgSpongycastleAsn1ASN1BitString_getBytesWithInt_(bitString);
}


#line 108
- (instancetype)initWithByteArray:(IOSByteArray *)data
                          withInt:(jint)padBits {
  OrgSpongycastleAsn1ASN1BitString_initWithByteArray_withInt_(self, data, padBits);
  return self;
}


#line 134
- (NSString *)getString {
  
#line 136
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_initWithNSString_(@"#");
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  OrgSpongycastleAsn1ASN1OutputStream *aOut = new_OrgSpongycastleAsn1ASN1OutputStream_initWithJavaIoOutputStream_(bOut);
  
#line 140
  @try {
    
#line 142
    [aOut writeObjectWithOrgSpongycastleAsn1ASN1Encodable:self];
  }
  @catch (JavaIoIOException *e) {
    
#line 146
    @throw new_OrgSpongycastleAsn1ASN1ParsingException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Internal error encoding BitString: ", [e getMessage]), e);
  }
  
#line 149
  IOSByteArray *string = [bOut toByteArray];
  
#line 151
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(string))->size_; i++) {
    
#line 153
    (void) [buf appendWithChar:IOSCharArray_Get(nil_chk(OrgSpongycastleAsn1ASN1BitString_table), (JreURShift32(IOSByteArray_Get(string, i), 4)) & (jint) 0xf)];
    (void) [buf appendWithChar:IOSCharArray_Get(OrgSpongycastleAsn1ASN1BitString_table, IOSByteArray_Get(string, i) & (jint) 0xf)];
  }
  
#line 157
  return [buf description];
}


#line 163
- (jint)intValue {
  
#line 165
  jint value = 0;
  IOSByteArray *string = data_;
  
#line 168
  if (padBits_ > 0 && ((IOSByteArray *) nil_chk(data_))->size_ <= 4) {
    
#line 170
    string = OrgSpongycastleAsn1ASN1BitString_derFormWithByteArray_withInt_(data_, padBits_);
  }
  
#line 173
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(string))->size_ && i != 4; i++) {
    
#line 175
    value |= JreLShift32((IOSByteArray_Get(string, i) & (jint) 0xff), (8 * i));
  }
  
#line 178
  return value;
}


#line 188
- (IOSByteArray *)getOctets {
  
#line 190
  if (padBits_ != 0) {
    
#line 192
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"attempt to get non-octet aligned data from BIT STRING");
  }
  
#line 195
  return OrgSpongycastleUtilArrays_cloneWithByteArray_(data_);
}


#line 198
- (IOSByteArray *)getBytes {
  
#line 200
  return OrgSpongycastleAsn1ASN1BitString_derFormWithByteArray_withInt_(data_, padBits_);
}


#line 203
- (jint)getPadBits {
  
#line 205
  return padBits_;
}


#line 208
- (NSString *)description {
  
#line 210
  return [self getString];
}


#line 213
- (NSUInteger)hash {
  
#line 215
  return padBits_ ^ OrgSpongycastleUtilArrays_hashCodeWithByteArray_([self getBytes]);
}


#line 218
- (jboolean)asn1EqualsWithOrgSpongycastleAsn1ASN1Primitive:(OrgSpongycastleAsn1ASN1Primitive *)o {
  
#line 221
  if (!([o isKindOfClass:[OrgSpongycastleAsn1ASN1BitString class]])) {
    
#line 223
    return false;
  }
  
#line 226
  OrgSpongycastleAsn1ASN1BitString *other = (OrgSpongycastleAsn1ASN1BitString *) cast_chk(o, [OrgSpongycastleAsn1ASN1BitString class]);
  
#line 228
  return self->padBits_ == ((OrgSpongycastleAsn1ASN1BitString *) nil_chk(other))->padBits_ && OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_(
#line 229
  [self getBytes], [other getBytes]);
}


#line 232
+ (IOSByteArray *)derFormWithByteArray:(IOSByteArray *)data
                               withInt:(jint)padBits {
  return OrgSpongycastleAsn1ASN1BitString_derFormWithByteArray_withInt_(data, padBits);
}


#line 244
+ (OrgSpongycastleAsn1ASN1BitString *)fromInputStreamWithInt:(jint)length
                                       withJavaIoInputStream:(JavaIoInputStream *)stream {
  return OrgSpongycastleAsn1ASN1BitString_fromInputStreamWithInt_withJavaIoInputStream_(length, stream);
}


#line 274
- (OrgSpongycastleAsn1ASN1Primitive *)getLoadedObject {
  
#line 276
  return [self toASN1Primitive];
}


#line 279
- (OrgSpongycastleAsn1ASN1Primitive *)toDERObject {
  
#line 281
  return new_OrgSpongycastleAsn1DERBitString_initWithByteArray_withInt_(data_, padBits_);
}


#line 284
- (OrgSpongycastleAsn1ASN1Primitive *)toDLObject {
  
#line 286
  return new_OrgSpongycastleAsn1DLBitString_initWithByteArray_withInt_(data_, padBits_);
}


#line 289
- (void)encodeWithOrgSpongycastleAsn1ASN1OutputStream:(OrgSpongycastleAsn1ASN1OutputStream *)outArg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0xc, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0xc, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0xc, 8, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1BitString;", 0x8, 9, 10, 11, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1Primitive;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1Primitive;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 12, 13, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getPadBitsWithInt:);
  methods[1].selector = @selector(getBytesWithInt:);
  methods[2].selector = @selector(initWithByteArray:withInt:);
  methods[3].selector = @selector(getString);
  methods[4].selector = @selector(intValue);
  methods[5].selector = @selector(getOctets);
  methods[6].selector = @selector(getBytes);
  methods[7].selector = @selector(getPadBits);
  methods[8].selector = @selector(description);
  methods[9].selector = @selector(hash);
  methods[10].selector = @selector(asn1EqualsWithOrgSpongycastleAsn1ASN1Primitive:);
  methods[11].selector = @selector(derFormWithByteArray:withInt:);
  methods[12].selector = @selector(fromInputStreamWithInt:withJavaIoInputStream:);
  methods[13].selector = @selector(getLoadedObject);
  methods[14].selector = @selector(toDERObject);
  methods[15].selector = @selector(toDLObject);
  methods[16].selector = @selector(encodeWithOrgSpongycastleAsn1ASN1OutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "table", "[C", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "data_", "[B", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "padBits_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getPadBits", "I", "getBytes", "[BI", "toString", "hashCode", "asn1Equals", "LOrgSpongycastleAsn1ASN1Primitive;", "derForm", "fromInputStream", "ILJavaIoInputStream;", "LJavaIoIOException;", "encode", "LOrgSpongycastleAsn1ASN1OutputStream;", &OrgSpongycastleAsn1ASN1BitString_table };
  static const J2ObjcClassInfo _OrgSpongycastleAsn1ASN1BitString = { "ASN1BitString", "org.spongycastle.asn1", ptrTable, methods, fields, 7, 0x401, 17, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleAsn1ASN1BitString;
}

+ (void)initialize {
  if (self == [OrgSpongycastleAsn1ASN1BitString class]) {
    OrgSpongycastleAsn1ASN1BitString_table = [IOSCharArray newArrayWithChars:(jchar[]){
#line 18
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' } count:16];
      J2OBJC_SET_INITIALIZED(OrgSpongycastleAsn1ASN1BitString)
    }
  }

@end


#line 28
jint OrgSpongycastleAsn1ASN1BitString_getPadBitsWithInt_(jint bitString) {
  OrgSpongycastleAsn1ASN1BitString_initialize();
  
#line 31
  jint val = 0;
  for (jint i = 3; i >= 0; i--) {
    
#line 38
    if (i != 0) {
      
#line 40
      if ((JreRShift32(bitString, (i * 8))) != 0) {
        
#line 42
        val = (JreRShift32(bitString, (i * 8))) & (jint) 0xFF;
        break;
      }
    }
    else {
      
#line 48
      if (bitString != 0) {
        
#line 50
        val = bitString & (jint) 0xFF;
        break;
      }
    }
  }
  
#line 56
  if (val == 0) {
    
#line 58
    return 0;
  }
  
#line 61
  jint bits = 1;
  
#line 63
  while (((JreLShiftAssignInt(&val, 1)) & (jint) 0xFF) != 0) {
    
#line 65
    bits++;
  }
  
#line 68
  return 8 - bits;
}


#line 76
IOSByteArray *OrgSpongycastleAsn1ASN1BitString_getBytesWithInt_(jint bitString) {
  OrgSpongycastleAsn1ASN1BitString_initialize();
  if (bitString == 0) {
    
#line 80
    return [IOSByteArray newArrayWithLength:0];
  }
  
#line 83
  jint bytes = 4;
  for (jint i = 3; i >= 1; i--) {
    
#line 86
    if ((bitString & (JreLShift32((jint) 0xFF, (i * 8)))) != 0) {
      
#line 88
      break;
    }
    bytes--;
  }
  
#line 93
  IOSByteArray *result = [IOSByteArray newArrayWithLength:bytes];
  for (jint i = 0; i < bytes; i++) {
    
#line 96
    *IOSByteArray_GetRef(result, i) = (jbyte) ((JreRShift32(bitString, (i * 8))) & (jint) 0xFF);
  }
  
#line 99
  return result;
}


#line 108
void OrgSpongycastleAsn1ASN1BitString_initWithByteArray_withInt_(OrgSpongycastleAsn1ASN1BitString *self, IOSByteArray *data, jint padBits) {
  OrgSpongycastleAsn1ASN1Primitive_init(self);
  
#line 112
  if (data == nil) {
    
#line 114
    @throw new_JavaLangNullPointerException_initWithNSString_(@"data cannot be null");
  }
  if (data->size_ == 0 && padBits != 0) {
    
#line 118
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"zero length data with non-zero pad bits");
  }
  if (padBits > 7 || padBits < 0) {
    
#line 122
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"pad bits cannot be greater than 7 or less than 0");
  }
  
#line 125
  self->data_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(data);
  self->padBits_ = padBits;
}


#line 232
IOSByteArray *OrgSpongycastleAsn1ASN1BitString_derFormWithByteArray_withInt_(IOSByteArray *data, jint padBits) {
  OrgSpongycastleAsn1ASN1BitString_initialize();
  IOSByteArray *rv = OrgSpongycastleUtilArrays_cloneWithByteArray_(data);
  
#line 236
  if (padBits > 0) {
    
#line 238
    *IOSByteArray_GetRef(nil_chk(rv), ((IOSByteArray *) nil_chk(data))->size_ - 1) &= JreLShift32((jint) 0xff, padBits);
  }
  
#line 241
  return rv;
}


#line 244
OrgSpongycastleAsn1ASN1BitString *OrgSpongycastleAsn1ASN1BitString_fromInputStreamWithInt_withJavaIoInputStream_(jint length, JavaIoInputStream *stream) {
  OrgSpongycastleAsn1ASN1BitString_initialize();
  
#line 247
  if (length < 1) {
    
#line 249
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"truncated BIT STRING detected");
  }
  
#line 252
  jint padBits = [((JavaIoInputStream *) nil_chk(stream)) read];
  IOSByteArray *data = [IOSByteArray newArrayWithLength:length - 1];
  
#line 255
  if (data->size_ != 0) {
    
#line 257
    if (OrgSpongycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_(stream, data) != data->size_) {
      
#line 259
      @throw new_JavaIoEOFException_initWithNSString_(@"EOF encountered in middle of BIT STRING");
    }
    
#line 262
    if (padBits > 0 && padBits < 8) {
      
#line 264
      if (IOSByteArray_Get(data, data->size_ - 1) != (jbyte) (IOSByteArray_Get(data, data->size_ - 1) & (JreLShift32((jint) 0xff, padBits)))) {
        
#line 266
        return new_OrgSpongycastleAsn1DLBitString_initWithByteArray_withInt_(data, padBits);
      }
    }
  }
  
#line 271
  return new_OrgSpongycastleAsn1DERBitString_initWithByteArray_withInt_(data, padBits);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleAsn1ASN1BitString)
