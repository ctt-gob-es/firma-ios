//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/asn1/ASN1TaggedObject.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleAsn1ASN1TaggedObject")
#ifdef RESTRICT_OrgSpongycastleAsn1ASN1TaggedObject
#define INCLUDE_ALL_OrgSpongycastleAsn1ASN1TaggedObject 0
#else
#define INCLUDE_ALL_OrgSpongycastleAsn1ASN1TaggedObject 1
#endif
#undef RESTRICT_OrgSpongycastleAsn1ASN1TaggedObject

#if !defined (OrgSpongycastleAsn1ASN1TaggedObject_) && (INCLUDE_ALL_OrgSpongycastleAsn1ASN1TaggedObject || defined(INCLUDE_OrgSpongycastleAsn1ASN1TaggedObject))
#define OrgSpongycastleAsn1ASN1TaggedObject_

#define RESTRICT_OrgSpongycastleAsn1ASN1Primitive 1
#define INCLUDE_OrgSpongycastleAsn1ASN1Primitive 1
#include "org/spongycastle/asn1/ASN1Primitive.h"

#define RESTRICT_OrgSpongycastleAsn1ASN1TaggedObjectParser 1
#define INCLUDE_OrgSpongycastleAsn1ASN1TaggedObjectParser 1
#include "org/spongycastle/asn1/ASN1TaggedObjectParser.h"

@class OrgSpongycastleAsn1ASN1OutputStream;
@protocol OrgSpongycastleAsn1ASN1Encodable;

/*!
 @brief ASN.1 TaggedObject - in ASN.1 notation this is any object preceded by
  a [n] where n is some number - these are assumed to follow the construction
  rules (as with sequences).
 */
@interface OrgSpongycastleAsn1ASN1TaggedObject : OrgSpongycastleAsn1ASN1Primitive < OrgSpongycastleAsn1ASN1TaggedObjectParser > {
 @public
  jint tagNo_;
  jboolean empty_;
  jboolean explicit__;
  id<OrgSpongycastleAsn1ASN1Encodable> obj_;
}

#pragma mark Public

/*!
 @brief Create a tagged object with the style given by the value of explicit.
 <p>
  If the object implements ASN1Choice the tag style will always be changed
  to explicit in accordance with the ASN.1 encoding rules. 
 </p>
 @param explicit_ true if the object is explicitly tagged.
 @param tagNo the tag number for this object.
 @param obj the tagged object.
 */
- (instancetype)initWithBoolean:(jboolean)explicit_
                        withInt:(jint)tagNo
withOrgSpongycastleAsn1ASN1Encodable:(id<OrgSpongycastleAsn1ASN1Encodable>)obj;

+ (OrgSpongycastleAsn1ASN1TaggedObject *)getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject:(OrgSpongycastleAsn1ASN1TaggedObject *)obj
                                                                                withBoolean:(jboolean)explicit_;

+ (OrgSpongycastleAsn1ASN1TaggedObject *)getInstanceWithId:(id)obj;

- (OrgSpongycastleAsn1ASN1Primitive *)getLoadedObject;

/*!
 @brief Return whatever was following the tag.
 <p>
  Note: tagged objects are generally context dependent if you're
  trying to extract a tagged object you should be going via the
  appropriate getInstance method.
 */
- (OrgSpongycastleAsn1ASN1Primitive *)getObject;

/*!
 @brief Return the object held in this tagged object as a parser assuming it has
  the type of the passed in tag.If the object doesn't have a parser
  associated with it, the base object is returned.
 */
- (id<OrgSpongycastleAsn1ASN1Encodable>)getObjectParserWithInt:(jint)tag
                                                   withBoolean:(jboolean)isExplicit;

/*!
 @brief Return the tag number associated with this object.
 @return the tag number.
 */
- (jint)getTagNo;

- (NSUInteger)hash;

- (jboolean)isEmpty;

/*!
 @brief return whether or not the object may be explicitly tagged.
 <p>
  Note: if the object has been read from an input stream, the only
  time you can be sure if isExplicit is returning the true state of
  affairs is if it returns false. An implicitly tagged object may appear
  to be explicitly tagged, so you need to understand the context under
  which the reading was done as well, see getObject below.
 */
- (jboolean)isExplicit;

- (NSString *)description;

#pragma mark Package-Private

- (jboolean)asn1EqualsWithOrgSpongycastleAsn1ASN1Primitive:(OrgSpongycastleAsn1ASN1Primitive *)o;

- (void)encodeWithOrgSpongycastleAsn1ASN1OutputStream:(OrgSpongycastleAsn1ASN1OutputStream *)outArg;

- (OrgSpongycastleAsn1ASN1Primitive *)toDERObject;

- (OrgSpongycastleAsn1ASN1Primitive *)toDLObject;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleAsn1ASN1TaggedObject)

J2OBJC_FIELD_SETTER(OrgSpongycastleAsn1ASN1TaggedObject, obj_, id<OrgSpongycastleAsn1ASN1Encodable>)

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1TaggedObject *OrgSpongycastleAsn1ASN1TaggedObject_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(OrgSpongycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1TaggedObject *OrgSpongycastleAsn1ASN1TaggedObject_getInstanceWithId_(id obj);

FOUNDATION_EXPORT void OrgSpongycastleAsn1ASN1TaggedObject_initWithBoolean_withInt_withOrgSpongycastleAsn1ASN1Encodable_(OrgSpongycastleAsn1ASN1TaggedObject *self, jboolean explicit_, jint tagNo, id<OrgSpongycastleAsn1ASN1Encodable> obj);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleAsn1ASN1TaggedObject)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleAsn1ASN1TaggedObject")
