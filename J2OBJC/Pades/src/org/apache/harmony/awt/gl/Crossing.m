//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/apache/harmony/awt/gl/Crossing.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "harmony/java/awt/Shape.h"
#include "harmony/java/awt/geom/PathIterator.h"
#include "harmony/java/awt/geom/Rectangle2D.h"
#include "java/lang/Math.h"
#include "org/apache/harmony/awt/gl/Crossing.h"

#if !__has_feature(objc_arc)
#error "org/apache/harmony/awt/gl/Crossing must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/apache/harmony/awt/gl/Crossing.java"


#line 25
@implementation OrgApacheHarmonyAwtGlCrossing

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 25
- (instancetype)init {
  OrgApacheHarmonyAwtGlCrossing_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 56
+ (jint)solveQuadWithDoubleArray:(IOSDoubleArray *)eqn
                 withDoubleArray:(IOSDoubleArray *)res {
  return OrgApacheHarmonyAwtGlCrossing_solveQuadWithDoubleArray_withDoubleArray_(eqn, res);
}


#line 91
+ (jint)solveCubicWithDoubleArray:(IOSDoubleArray *)eqn
                  withDoubleArray:(IOSDoubleArray *)res {
  return OrgApacheHarmonyAwtGlCrossing_solveCubicWithDoubleArray_withDoubleArray_(eqn, res);
}


#line 147
+ (jint)fixRootsWithDoubleArray:(IOSDoubleArray *)res
                        withInt:(jint)rc {
  return OrgApacheHarmonyAwtGlCrossing_fixRootsWithDoubleArray_withInt_(res, rc);
}


#line 382
+ (jint)crossLineWithDouble:(jdouble)x1
                 withDouble:(jdouble)y1
                 withDouble:(jdouble)x2
                 withDouble:(jdouble)y2
                 withDouble:(jdouble)x
                 withDouble:(jdouble)y {
  return OrgApacheHarmonyAwtGlCrossing_crossLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, x2, y2, x, y);
}


#line 425
+ (jint)crossQuadWithDouble:(jdouble)x1
                 withDouble:(jdouble)y1
                 withDouble:(jdouble)cx
                 withDouble:(jdouble)cy
                 withDouble:(jdouble)x2
                 withDouble:(jdouble)y2
                 withDouble:(jdouble)x
                 withDouble:(jdouble)y {
  return OrgApacheHarmonyAwtGlCrossing_crossQuadWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, cx, cy, x2, y2, x, y);
}


#line 465
+ (jint)crossCubicWithDouble:(jdouble)x1
                  withDouble:(jdouble)y1
                  withDouble:(jdouble)cx1
                  withDouble:(jdouble)cy1
                  withDouble:(jdouble)cx2
                  withDouble:(jdouble)cy2
                  withDouble:(jdouble)x2
                  withDouble:(jdouble)y2
                  withDouble:(jdouble)x
                  withDouble:(jdouble)y {
  return OrgApacheHarmonyAwtGlCrossing_crossCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, cx1, cy1, cx2, cy2, x2, y2, x, y);
}


#line 498
+ (jint)crossPathWithHarmonyJavaAwtGeomPathIterator:(id<HarmonyJavaAwtGeomPathIterator>)p
                                         withDouble:(jdouble)x
                                         withDouble:(jdouble)y {
  return OrgApacheHarmonyAwtGlCrossing_crossPathWithHarmonyJavaAwtGeomPathIterator_withDouble_withDouble_(p, x, y);
}


#line 552
+ (jint)crossShapeWithHarmonyJavaAwtShape:(id<HarmonyJavaAwtShape>)s
                               withDouble:(jdouble)x
                               withDouble:(jdouble)y {
  return OrgApacheHarmonyAwtGlCrossing_crossShapeWithHarmonyJavaAwtShape_withDouble_withDouble_(s, x, y);
}


#line 564
+ (jboolean)isZeroWithDouble:(jdouble)val {
  return OrgApacheHarmonyAwtGlCrossing_isZeroWithDouble_(val);
}


#line 573
+ (void)sortBoundWithDoubleArray:(IOSDoubleArray *)bound
                         withInt:(jint)bc {
  OrgApacheHarmonyAwtGlCrossing_sortBoundWithDoubleArray_withInt_(bound, bc);
}


#line 606
+ (jint)crossBoundWithDoubleArray:(IOSDoubleArray *)bound
                          withInt:(jint)bc
                       withDouble:(jdouble)py1
                       withDouble:(jdouble)py2 {
  return OrgApacheHarmonyAwtGlCrossing_crossBoundWithDoubleArray_withInt_withDouble_withDouble_(bound, bc, py1, py2);
}


#line 660
+ (jint)intersectLineWithDouble:(jdouble)x1
                     withDouble:(jdouble)y1
                     withDouble:(jdouble)x2
                     withDouble:(jdouble)y2
                     withDouble:(jdouble)rx1
                     withDouble:(jdouble)ry1
                     withDouble:(jdouble)rx2
                     withDouble:(jdouble)ry2 {
  return OrgApacheHarmonyAwtGlCrossing_intersectLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, x2, y2, rx1, ry1, rx2, ry2);
}


#line 739
+ (jint)intersectQuadWithDouble:(jdouble)x1
                     withDouble:(jdouble)y1
                     withDouble:(jdouble)cx
                     withDouble:(jdouble)cy
                     withDouble:(jdouble)x2
                     withDouble:(jdouble)y2
                     withDouble:(jdouble)rx1
                     withDouble:(jdouble)ry1
                     withDouble:(jdouble)rx2
                     withDouble:(jdouble)ry2 {
  return OrgApacheHarmonyAwtGlCrossing_intersectQuadWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, cx, cy, x2, y2, rx1, ry1, rx2, ry2);
}


#line 823
+ (jint)intersectCubicWithDouble:(jdouble)x1
                      withDouble:(jdouble)y1
                      withDouble:(jdouble)cx1
                      withDouble:(jdouble)cy1
                      withDouble:(jdouble)cx2
                      withDouble:(jdouble)cy2
                      withDouble:(jdouble)x2
                      withDouble:(jdouble)y2
                      withDouble:(jdouble)rx1
                      withDouble:(jdouble)ry1
                      withDouble:(jdouble)rx2
                      withDouble:(jdouble)ry2 {
  return OrgApacheHarmonyAwtGlCrossing_intersectCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, cx1, cy1, cx2, cy2, x2, y2, rx1, ry1, rx2, ry2);
}


#line 902
+ (jint)intersectPathWithHarmonyJavaAwtGeomPathIterator:(id<HarmonyJavaAwtGeomPathIterator>)p
                                             withDouble:(jdouble)x
                                             withDouble:(jdouble)y
                                             withDouble:(jdouble)w
                                             withDouble:(jdouble)h {
  return OrgApacheHarmonyAwtGlCrossing_intersectPathWithHarmonyJavaAwtGeomPathIterator_withDouble_withDouble_withDouble_withDouble_(p, x, y, w, h);
}


#line 968
+ (jint)intersectShapeWithHarmonyJavaAwtShape:(id<HarmonyJavaAwtShape>)s
                                   withDouble:(jdouble)x
                                   withDouble:(jdouble)y
                                   withDouble:(jdouble)w
                                   withDouble:(jdouble)h {
  return OrgApacheHarmonyAwtGlCrossing_intersectShapeWithHarmonyJavaAwtShape_withDouble_withDouble_withDouble_withDouble_(s, x, y, w, h);
}


#line 981
+ (jboolean)isInsideNonZeroWithInt:(jint)cross {
  return OrgApacheHarmonyAwtGlCrossing_isInsideNonZeroWithInt_(cross);
}


#line 991
+ (jboolean)isInsideEvenOddWithInt:(jint)cross {
  return OrgApacheHarmonyAwtGlCrossing_isInsideEvenOddWithInt_(cross);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 17, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 18, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 20, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 21, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 22, 23, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 24, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 26, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 28, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 30, 29, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(solveQuadWithDoubleArray:withDoubleArray:);
  methods[2].selector = @selector(solveCubicWithDoubleArray:withDoubleArray:);
  methods[3].selector = @selector(fixRootsWithDoubleArray:withInt:);
  methods[4].selector = @selector(crossLineWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[5].selector = @selector(crossQuadWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[6].selector = @selector(crossCubicWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[7].selector = @selector(crossPathWithHarmonyJavaAwtGeomPathIterator:withDouble:withDouble:);
  methods[8].selector = @selector(crossShapeWithHarmonyJavaAwtShape:withDouble:withDouble:);
  methods[9].selector = @selector(isZeroWithDouble:);
  methods[10].selector = @selector(sortBoundWithDoubleArray:withInt:);
  methods[11].selector = @selector(crossBoundWithDoubleArray:withInt:withDouble:withDouble:);
  methods[12].selector = @selector(intersectLineWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[13].selector = @selector(intersectQuadWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[14].selector = @selector(intersectCubicWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[15].selector = @selector(intersectPathWithHarmonyJavaAwtGeomPathIterator:withDouble:withDouble:withDouble:withDouble:);
  methods[16].selector = @selector(intersectShapeWithHarmonyJavaAwtShape:withDouble:withDouble:withDouble:withDouble:);
  methods[17].selector = @selector(isInsideNonZeroWithInt:);
  methods[18].selector = @selector(isInsideEvenOddWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DELTA", "D", .constantValue.asDouble = OrgApacheHarmonyAwtGlCrossing_DELTA, 0x18, -1, -1, -1, -1 },
    { "ROOT_DELTA", "D", .constantValue.asDouble = OrgApacheHarmonyAwtGlCrossing_ROOT_DELTA, 0x18, -1, -1, -1, -1 },
    { "CROSSING", "I", .constantValue.asInt = OrgApacheHarmonyAwtGlCrossing_CROSSING, 0x19, -1, -1, -1, -1 },
    { "UNKNOWN", "I", .constantValue.asInt = OrgApacheHarmonyAwtGlCrossing_UNKNOWN, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "solveQuad", "[D[D", "solveCubic", "fixRoots", "[DI", "crossLine", "DDDDDD", "crossQuad", "DDDDDDDD", "crossCubic", "DDDDDDDDDD", "crossPath", "LHarmonyJavaAwtGeomPathIterator;DD", "crossShape", "LHarmonyJavaAwtShape;DD", "isZero", "D", "sortBound", "crossBound", "[DIDD", "intersectLine", "intersectQuad", "intersectCubic", "DDDDDDDDDDDD", "intersectPath", "LHarmonyJavaAwtGeomPathIterator;DDDD", "intersectShape", "LHarmonyJavaAwtShape;DDDD", "isInsideNonZero", "I", "isInsideEvenOdd", "LOrgApacheHarmonyAwtGlCrossing_QuadCurve;LOrgApacheHarmonyAwtGlCrossing_CubicCurve;" };
  static const J2ObjcClassInfo _OrgApacheHarmonyAwtGlCrossing = { "Crossing", "org.apache.harmony.awt.gl", ptrTable, methods, fields, 7, 0x1, 19, 4, -1, 31, -1, -1, -1 };
  return &_OrgApacheHarmonyAwtGlCrossing;
}

@end


#line 25
void OrgApacheHarmonyAwtGlCrossing_init(OrgApacheHarmonyAwtGlCrossing *self) {
  NSObject_init(self);
}


#line 25
OrgApacheHarmonyAwtGlCrossing *new_OrgApacheHarmonyAwtGlCrossing_init() {
  J2OBJC_NEW_IMPL(OrgApacheHarmonyAwtGlCrossing, init)
}


#line 25
OrgApacheHarmonyAwtGlCrossing *create_OrgApacheHarmonyAwtGlCrossing_init() {
  J2OBJC_CREATE_IMPL(OrgApacheHarmonyAwtGlCrossing, init)
}


#line 56
jint OrgApacheHarmonyAwtGlCrossing_solveQuadWithDoubleArray_withDoubleArray_(IOSDoubleArray *eqn, IOSDoubleArray *res) {
  OrgApacheHarmonyAwtGlCrossing_initialize();
  
#line 57
  jdouble a = IOSDoubleArray_Get(nil_chk(eqn), 2);
  jdouble b = IOSDoubleArray_Get(eqn, 1);
  jdouble c = IOSDoubleArray_Get(eqn, 0);
  jint rc = 0;
  if (a == 0.0) {
    if (b == 0.0) {
      return -1;
    }
    *IOSDoubleArray_GetRef(nil_chk(res), rc++) = -c / b;
  }
  else {
    
#line 67
    jdouble d = b * b - 4.0 * a * c;
    
#line 69
    if (d < 0.0) {
      return 0;
    }
    d = JavaLangMath_sqrtWithDouble_(d);
    *IOSDoubleArray_GetRef(nil_chk(res), rc++) = (-b + d) / (a * 2.0);
    
#line 75
    if (d != 0.0) {
      *IOSDoubleArray_GetRef(res, rc++) = (-b - d) / (a * 2.0);
    }
  }
  return OrgApacheHarmonyAwtGlCrossing_fixRootsWithDoubleArray_withInt_(res, rc);
}


#line 91
jint OrgApacheHarmonyAwtGlCrossing_solveCubicWithDoubleArray_withDoubleArray_(IOSDoubleArray *eqn, IOSDoubleArray *res) {
  OrgApacheHarmonyAwtGlCrossing_initialize();
  
#line 92
  jdouble d = IOSDoubleArray_Get(nil_chk(eqn), 3);
  if (d == 0) {
    return OrgApacheHarmonyAwtGlCrossing_solveQuadWithDoubleArray_withDoubleArray_(eqn, res);
  }
  jdouble a = IOSDoubleArray_Get(eqn, 2) / d;
  jdouble b = IOSDoubleArray_Get(eqn, 1) / d;
  jdouble c = IOSDoubleArray_Get(eqn, 0) / d;
  jint rc = 0;
  
#line 101
  jdouble Q = (a * a - 3.0 * b) / 9.0;
  jdouble R = (2.0 * a * a * a - 9.0 * a * b + 27.0 * c) / 54.0;
  jdouble Q3 = Q * Q * Q;
  jdouble R2 = R * R;
  jdouble n = -a / 3.0;
  
#line 107
  if (R2 < Q3) {
    jdouble t = JavaLangMath_acosWithDouble_(R / JavaLangMath_sqrtWithDouble_(Q3)) / 3.0;
    jdouble p = 2.0 * JavaLangMath_PI / 3.0;
    jdouble m = -2.0 * JavaLangMath_sqrtWithDouble_(Q);
    *IOSDoubleArray_GetRef(nil_chk(res), rc++) = m * JavaLangMath_cosWithDouble_(t) + n;
    *IOSDoubleArray_GetRef(res, rc++) = m * JavaLangMath_cosWithDouble_(t + p) + n;
    *IOSDoubleArray_GetRef(res, rc++) = m * JavaLangMath_cosWithDouble_(t - p) + n;
  }
  else {
    jdouble A = JavaLangMath_powWithDouble_withDouble_(JavaLangMath_absWithDouble_(R) + JavaLangMath_sqrtWithDouble_(R2 - Q3), 1.0 / 3.0);
    if (R > 0.0) {
      A = -A;
    }
    
#line 121
    if (-OrgApacheHarmonyAwtGlCrossing_ROOT_DELTA < A && A < OrgApacheHarmonyAwtGlCrossing_ROOT_DELTA) {
      *IOSDoubleArray_GetRef(nil_chk(res), rc++) = n;
    }
    else {
      
#line 124
      jdouble B = Q / A;
      *IOSDoubleArray_GetRef(nil_chk(res), rc++) = A + B + n;
      
#line 127
      jdouble delta = R2 - Q3;
      if (-OrgApacheHarmonyAwtGlCrossing_ROOT_DELTA < delta && delta < OrgApacheHarmonyAwtGlCrossing_ROOT_DELTA) {
        *IOSDoubleArray_GetRef(res, rc++) = -(A + B) / 2.0 + n;
      }
    }
  }
  
#line 134
  return OrgApacheHarmonyAwtGlCrossing_fixRootsWithDoubleArray_withInt_(res, rc);
}


#line 147
jint OrgApacheHarmonyAwtGlCrossing_fixRootsWithDoubleArray_withInt_(IOSDoubleArray *res, jint rc) {
  OrgApacheHarmonyAwtGlCrossing_initialize();
  
#line 148
  jint tc = 0;
  for (jint i = 0; i < rc; i++) {
    {
      for (jint j = i + 1; j < rc; j++) {
        if (OrgApacheHarmonyAwtGlCrossing_isZeroWithDouble_(IOSDoubleArray_Get(nil_chk(res), i) - IOSDoubleArray_Get(res, j))) {
          goto break_out;
        }
      }
      *IOSDoubleArray_GetRef(nil_chk(res), tc++) = IOSDoubleArray_Get(res, i);
    }
    break_out: ;
  }
  
#line 159
  return tc;
}


#line 382
jint OrgApacheHarmonyAwtGlCrossing_crossLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble x, jdouble y) {
  OrgApacheHarmonyAwtGlCrossing_initialize();
  
#line 385
  if ((x < x1 && x < x2) || (x > x1 && x > x2) || (y > y1 && y > y2) || (x1 == x2)) {
    return 0;
  }
  
#line 390
  if (y < y1 && y < y2) {
  }
  else {
    if ((y2 - y1) * (x - x1) / (x2 - x1) <= y - y1) {
      
#line 395
      return 0;
    }
  }
  
#line 400
  if (x == x1) {
    return x1 < x2 ? 0 : -1;
  }
  
#line 405
  if (x == x2) {
    return x1 < x2 ? 1 : 0;
  }
  
#line 410
  return x1 < x2 ? 1 : -1;
}


#line 425
jint OrgApacheHarmonyAwtGlCrossing_crossQuadWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble cx, jdouble cy, jdouble x2, jdouble y2, jdouble x, jdouble y) {
  OrgApacheHarmonyAwtGlCrossing_initialize();
  
#line 428
  if ((x < x1 && x < cx && x < x2) || (x > x1 && x > cx && x > x2) || (y > y1 && y > cy && y > y2) ||
#line 429
  (x1 == cx && cx == x2)) {
    return 0;
  }
  
#line 434
  if (y < y1 && y < cy && y < y2 && x != x1 && x != x2) {
    if (x1 < x2) {
      return x1 < x && x < x2 ? 1 : 0;
    }
    return x2 < x && x < x1 ? -1 : 0;
  }
  
#line 442
  OrgApacheHarmonyAwtGlCrossing_QuadCurve *c = new_OrgApacheHarmonyAwtGlCrossing_QuadCurve_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, cx, cy, x2, y2);
  jdouble px = x - x1;
  jdouble py = y - y1;
  IOSDoubleArray *res = [IOSDoubleArray newArrayWithLength:3];
  jint rc = [c solvePointWithDoubleArray:res withDouble:px];
  
#line 448
  return [c crossWithDoubleArray:res withInt:rc withDouble:py withDouble:py];
}


#line 465
jint OrgApacheHarmonyAwtGlCrossing_crossCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble cx1, jdouble cy1, jdouble cx2, jdouble cy2, jdouble x2, jdouble y2, jdouble x, jdouble y) {
  OrgApacheHarmonyAwtGlCrossing_initialize();
  
#line 469
  if ((x < x1 && x < cx1 && x < cx2 && x < x2) || (x > x1 && x > cx1 && x > cx2 && x > x2) ||
#line 470
  (y > y1 && y > cy1 && y > cy2 && y > y2) || (x1 == cx1 && cx1 == cx2 && cx2 == x2)) {
    return 0;
  }
  
#line 475
  if (y < y1 && y < cy1 && y < cy2 && y < y2 && x != x1 && x != x2) {
    if (x1 < x2) {
      return x1 < x && x < x2 ? 1 : 0;
    }
    return x2 < x && x < x1 ? -1 : 0;
  }
  
#line 483
  OrgApacheHarmonyAwtGlCrossing_CubicCurve *c = new_OrgApacheHarmonyAwtGlCrossing_CubicCurve_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, cx1, cy1, cx2, cy2, x2, y2);
  jdouble px = x - x1;
  jdouble py = y - y1;
  IOSDoubleArray *res = [IOSDoubleArray newArrayWithLength:3];
  jint rc = [c solvePointWithDoubleArray:res withDouble:px];
  return [c crossWithDoubleArray:res withInt:rc withDouble:py withDouble:py];
}


#line 498
jint OrgApacheHarmonyAwtGlCrossing_crossPathWithHarmonyJavaAwtGeomPathIterator_withDouble_withDouble_(id<HarmonyJavaAwtGeomPathIterator> p, jdouble x, jdouble y) {
  OrgApacheHarmonyAwtGlCrossing_initialize();
  
#line 499
  jint cross = 0;
  jdouble mx;
  
#line 500
  jdouble my;
  
#line 500
  jdouble cx;
  
#line 500
  jdouble cy;
  mx = my = cx = cy = 0.0;
  IOSDoubleArray *coords = [IOSDoubleArray newArrayWithLength:6];
  
#line 504
  while (![((id<HarmonyJavaAwtGeomPathIterator>) nil_chk(p)) isDone]) {
    switch ([p currentSegmentWithDoubleArray:coords]) {
      case HarmonyJavaAwtGeomPathIterator_SEG_MOVETO:
      if (cx != mx || cy != my) {
        cross += OrgApacheHarmonyAwtGlCrossing_crossLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(cx, cy, mx, my, x, y);
      }
      mx = cx = IOSDoubleArray_Get(coords, 0);
      my = cy = IOSDoubleArray_Get(coords, 1);
      break;
      case HarmonyJavaAwtGeomPathIterator_SEG_LINETO:
      {
        jdouble unseq$1 =
#line 514
        cx;
        jdouble unseq$2 =
#line 514
        cy;
        
#line 514
        cross += OrgApacheHarmonyAwtGlCrossing_crossLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(unseq$1, unseq$2, cx = IOSDoubleArray_Get(coords, 0), cy = IOSDoubleArray_Get(coords, 1), x, y);
      }
      
#line 515
      break;
      case HarmonyJavaAwtGeomPathIterator_SEG_QUADTO:
      {
        jdouble unseq$3 =
#line 517
        cx;
        jdouble unseq$4 =
#line 517
        cy;
        
#line 517
        cross += OrgApacheHarmonyAwtGlCrossing_crossQuadWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(unseq$3, unseq$4, IOSDoubleArray_Get(coords, 0), IOSDoubleArray_Get(coords, 1), cx = IOSDoubleArray_Get(coords, 2), cy = IOSDoubleArray_Get(coords, 3), x, y);
      }
      
#line 518
      break;
      case HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO:
      {
        jdouble unseq$5 =
#line 520
        cx;
        jdouble unseq$6 =
#line 520
        cy;
        
#line 520
        cross += OrgApacheHarmonyAwtGlCrossing_crossCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(unseq$5, unseq$6, IOSDoubleArray_Get(coords, 0), IOSDoubleArray_Get(coords, 1), IOSDoubleArray_Get(coords, 2), IOSDoubleArray_Get(coords, 3), cx = IOSDoubleArray_Get(coords, 4), cy = IOSDoubleArray_Get(coords, 5),
#line 521
        x, y);
      }
      
#line 522
      break;
      case HarmonyJavaAwtGeomPathIterator_SEG_CLOSE:
      if (cy != my || cx != mx) {
        jdouble unseq$7 = cx;
        jdouble unseq$8 =
#line 525
        cy;
        
#line 525
        cross += OrgApacheHarmonyAwtGlCrossing_crossLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(unseq$7, unseq$8, cx = mx, cy = my, x, y);
      }
      break;
    }
    
#line 532
    if (x == cx && y == cy) {
      cross = 0;
      cy = my;
      break;
    }
    [p next];
  }
  if (cy != my) {
    cross += OrgApacheHarmonyAwtGlCrossing_crossLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(cx, cy, mx, my, x, y);
  }
  return cross;
}


#line 552
jint OrgApacheHarmonyAwtGlCrossing_crossShapeWithHarmonyJavaAwtShape_withDouble_withDouble_(id<HarmonyJavaAwtShape> s, jdouble x, jdouble y) {
  OrgApacheHarmonyAwtGlCrossing_initialize();
  
#line 553
  if (![((HarmonyJavaAwtGeomRectangle2D *) nil_chk([((id<HarmonyJavaAwtShape>) nil_chk(s)) getBounds2D])) containsWithDouble:x withDouble:y]) {
    return 0;
  }
  return OrgApacheHarmonyAwtGlCrossing_crossPathWithHarmonyJavaAwtGeomPathIterator_withDouble_withDouble_([s getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:nil], x, y);
}


#line 564
jboolean OrgApacheHarmonyAwtGlCrossing_isZeroWithDouble_(jdouble val) {
  OrgApacheHarmonyAwtGlCrossing_initialize();
  
#line 565
  return -OrgApacheHarmonyAwtGlCrossing_DELTA < val && val < OrgApacheHarmonyAwtGlCrossing_DELTA;
}


#line 573
void OrgApacheHarmonyAwtGlCrossing_sortBoundWithDoubleArray_withInt_(IOSDoubleArray *bound, jint bc) {
  OrgApacheHarmonyAwtGlCrossing_initialize();
  
#line 574
  for (jint i = 0; i < bc - 4; i += 4) {
    jint k = i;
    for (jint j = i + 4; j < bc; j += 4) {
      if (IOSDoubleArray_Get(nil_chk(bound), k) > IOSDoubleArray_Get(bound, j)) {
        k = j;
      }
    }
    if (k != i) {
      jdouble tmp = IOSDoubleArray_Get(nil_chk(bound), i);
      *IOSDoubleArray_GetRef(bound, i) = IOSDoubleArray_Get(bound, k);
      *IOSDoubleArray_GetRef(bound, k) = tmp;
      tmp = IOSDoubleArray_Get(bound, i + 1);
      *IOSDoubleArray_GetRef(bound, i + 1) = IOSDoubleArray_Get(bound, k + 1);
      *IOSDoubleArray_GetRef(bound, k + 1) = tmp;
      tmp = IOSDoubleArray_Get(bound, i + 2);
      *IOSDoubleArray_GetRef(bound, i + 2) = IOSDoubleArray_Get(bound, k + 2);
      *IOSDoubleArray_GetRef(bound, k + 2) = tmp;
      tmp = IOSDoubleArray_Get(bound, i + 3);
      *IOSDoubleArray_GetRef(bound, i + 3) = IOSDoubleArray_Get(bound, k + 3);
      *IOSDoubleArray_GetRef(bound, k + 3) = tmp;
    }
  }
}


#line 606
jint OrgApacheHarmonyAwtGlCrossing_crossBoundWithDoubleArray_withInt_withDouble_withDouble_(IOSDoubleArray *bound, jint bc, jdouble py1, jdouble py2) {
  OrgApacheHarmonyAwtGlCrossing_initialize();
  
#line 609
  if (bc == 0) {
    return 0;
  }
  
#line 614
  jint up = 0;
  jint down = 0;
  for (jint i = 2; i < bc; i += 4) {
    if (IOSDoubleArray_Get(nil_chk(bound), i) < py1) {
      up++;
      continue;
    }
    if (IOSDoubleArray_Get(bound, i) > py2) {
      down++;
      continue;
    }
    return OrgApacheHarmonyAwtGlCrossing_CROSSING;
  }
  
#line 629
  if (down == 0) {
    return 0;
  }
  
#line 633
  if (up != 0) {
    
#line 635
    OrgApacheHarmonyAwtGlCrossing_sortBoundWithDoubleArray_withInt_(bound, bc);
    jboolean sign = IOSDoubleArray_Get(nil_chk(bound), 2) > py2;
    for (jint i = 6; i < bc; i += 4) {
      jboolean sign2 = IOSDoubleArray_Get(bound, i) > py2;
      if (sign != sign2 && IOSDoubleArray_Get(bound, i + 1) != IOSDoubleArray_Get(bound, i - 3)) {
        return OrgApacheHarmonyAwtGlCrossing_CROSSING;
      }
      sign = sign2;
    }
  }
  return OrgApacheHarmonyAwtGlCrossing_UNKNOWN;
}


#line 660
jint OrgApacheHarmonyAwtGlCrossing_intersectLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble rx1, jdouble ry1, jdouble rx2, jdouble ry2) {
  OrgApacheHarmonyAwtGlCrossing_initialize();
  
#line 664
  if ((rx2 < x1 && rx2 < x2) || (rx1 > x1 && rx1 > x2) || (ry1 > y1 && ry1 > y2)) {
    return 0;
  }
  
#line 669
  if (ry2 < y1 && ry2 < y2) {
  }
  else {
    
#line 673
    if (x1 == x2) {
      return OrgApacheHarmonyAwtGlCrossing_CROSSING;
    }
    
#line 678
    jdouble bx1;
    
#line 678
    jdouble bx2;
    if (x1 < x2) {
      bx1 = x1 < rx1 ? rx1 : x1;
      bx2 = x2 < rx2 ? x2 : rx2;
    }
    else {
      
#line 683
      bx1 = x2 < rx1 ? rx1 : x2;
      bx2 = x1 < rx2 ? x1 : rx2;
    }
    jdouble k = (y2 - y1) / (x2 - x1);
    jdouble by1 = k * (bx1 - x1) + y1;
    jdouble by2 = k * (bx2 - x1) + y1;
    
#line 691
    if (by1 < ry1 && by2 < ry1) {
      return 0;
    }
    
#line 696
    if (by1 > ry2 && by2 > ry2) {
    }
    else {
      
#line 698
      return OrgApacheHarmonyAwtGlCrossing_CROSSING;
    }
  }
  
#line 703
  if (x1 == x2) {
    return 0;
  }
  
#line 708
  if (rx1 == x1) {
    return x1 < x2 ? 0 : -1;
  }
  
#line 713
  if (rx1 == x2) {
    return x1 < x2 ? 1 : 0;
  }
  
#line 717
  if (x1 < x2) {
    return x1 < rx1 && rx1 < x2 ? 1 : 0;
  }
  return x2 < rx1 && rx1 < x1 ? -1 : 0;
}


#line 739
jint OrgApacheHarmonyAwtGlCrossing_intersectQuadWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble cx, jdouble cy, jdouble x2, jdouble y2, jdouble rx1, jdouble ry1, jdouble rx2, jdouble ry2) {
  OrgApacheHarmonyAwtGlCrossing_initialize();
  
#line 743
  if ((rx2 < x1 && rx2 < cx && rx2 < x2) || (rx1 > x1 && rx1 > cx && rx1 > x2) ||
#line 744
  (ry1 > y1 && ry1 > cy && ry1 > y2)) {
    return 0;
  }
  
#line 749
  if (ry2 < y1 && ry2 < cy && ry2 < y2 && rx1 != x1 && rx1 != x2) {
    if (x1 < x2) {
      return x1 < rx1 && rx1 < x2 ? 1 : 0;
    }
    return x2 < rx1 && rx1 < x1 ? -1 : 0;
  }
  
#line 757
  OrgApacheHarmonyAwtGlCrossing_QuadCurve *c = new_OrgApacheHarmonyAwtGlCrossing_QuadCurve_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, cx, cy, x2, y2);
  jdouble px1 = rx1 - x1;
  jdouble py1 = ry1 - y1;
  jdouble px2 = rx2 - x1;
  jdouble py2 = ry2 - y1;
  
#line 763
  IOSDoubleArray *res1 = [IOSDoubleArray newArrayWithLength:3];
  IOSDoubleArray *res2 = [IOSDoubleArray newArrayWithLength:3];
  jint rc1 = [c solvePointWithDoubleArray:res1 withDouble:px1];
  jint rc2 = [c solvePointWithDoubleArray:res2 withDouble:px2];
  
#line 769
  if (rc1 == 0 && rc2 == 0) {
    return 0;
  }
  
#line 774
  jdouble minX = px1 - OrgApacheHarmonyAwtGlCrossing_DELTA;
  jdouble maxX = px2 + OrgApacheHarmonyAwtGlCrossing_DELTA;
  IOSDoubleArray *bound = [IOSDoubleArray newArrayWithLength:28];
  jint bc = 0;
  
#line 779
  bc = [c addBoundWithDoubleArray:bound withInt:bc withDoubleArray:res1 withInt:rc1 withDouble:minX withDouble:maxX withBoolean:false withInt:0];
  bc = [c addBoundWithDoubleArray:bound withInt:bc withDoubleArray:res2 withInt:rc2 withDouble:minX withDouble:maxX withBoolean:false withInt:1];
  
#line 782
  rc2 = [c solveExtremWithDoubleArray:res2];
  bc = [c addBoundWithDoubleArray:bound withInt:bc withDoubleArray:res2 withInt:rc2 withDouble:minX withDouble:maxX withBoolean:true withInt:2];
  
#line 785
  if (rx1 < x1 && x1 < rx2) {
    *IOSDoubleArray_GetRef(bound, bc++) = 0.0;
    *IOSDoubleArray_GetRef(bound, bc++) = 0.0;
    *IOSDoubleArray_GetRef(bound, bc++) = 0.0;
    *IOSDoubleArray_GetRef(bound, bc++) = 4;
  }
  if (rx1 < x2 && x2 < rx2) {
    *IOSDoubleArray_GetRef(bound, bc++) = 1.0;
    *IOSDoubleArray_GetRef(bound, bc++) = c->ax_;
    *IOSDoubleArray_GetRef(bound, bc++) = c->ay_;
    *IOSDoubleArray_GetRef(bound, bc++) = 5;
  }
  
#line 799
  jint cross = OrgApacheHarmonyAwtGlCrossing_crossBoundWithDoubleArray_withInt_withDouble_withDouble_(bound, bc, py1, py2);
  if (cross != OrgApacheHarmonyAwtGlCrossing_UNKNOWN) {
    return cross;
  }
  return [c crossWithDoubleArray:res1 withInt:rc1 withDouble:py1 withDouble:py2];
}


#line 823
jint OrgApacheHarmonyAwtGlCrossing_intersectCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble cx1, jdouble cy1, jdouble cx2, jdouble cy2, jdouble x2, jdouble y2, jdouble rx1, jdouble ry1, jdouble rx2, jdouble ry2) {
  OrgApacheHarmonyAwtGlCrossing_initialize();
  
#line 827
  if ((rx2 < x1 && rx2 < cx1 && rx2 < cx2 && rx2 < x2) || (rx1 > x1 && rx1 > cx1 && rx1 > cx2 && rx1 > x2) ||
#line 828
  (ry1 > y1 && ry1 > cy1 && ry1 > cy2 && ry1 > y2)) {
    return 0;
  }
  
#line 833
  if (ry2 < y1 && ry2 < cy1 && ry2 < cy2 && ry2 < y2 && rx1 != x1 && rx1 != x2) {
    if (x1 < x2) {
      return x1 < rx1 && rx1 < x2 ? 1 : 0;
    }
    return x2 < rx1 && rx1 < x1 ? -1 : 0;
  }
  
#line 841
  OrgApacheHarmonyAwtGlCrossing_CubicCurve *c = new_OrgApacheHarmonyAwtGlCrossing_CubicCurve_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, cx1, cy1, cx2, cy2, x2, y2);
  jdouble px1 = rx1 - x1;
  jdouble py1 = ry1 - y1;
  jdouble px2 = rx2 - x1;
  jdouble py2 = ry2 - y1;
  
#line 847
  IOSDoubleArray *res1 = [IOSDoubleArray newArrayWithLength:3];
  IOSDoubleArray *res2 = [IOSDoubleArray newArrayWithLength:3];
  jint rc1 = [c solvePointWithDoubleArray:res1 withDouble:px1];
  jint rc2 = [c solvePointWithDoubleArray:res2 withDouble:px2];
  
#line 853
  if (rc1 == 0 && rc2 == 0) {
    return 0;
  }
  
#line 857
  jdouble minX = px1 - OrgApacheHarmonyAwtGlCrossing_DELTA;
  jdouble maxX = px2 + OrgApacheHarmonyAwtGlCrossing_DELTA;
  
#line 861
  IOSDoubleArray *bound = [IOSDoubleArray newArrayWithLength:40];
  jint bc = 0;
  
#line 864
  bc = [c addBoundWithDoubleArray:bound withInt:bc withDoubleArray:res1 withInt:rc1 withDouble:minX withDouble:maxX withBoolean:false withInt:0];
  bc = [c addBoundWithDoubleArray:bound withInt:bc withDoubleArray:res2 withInt:rc2 withDouble:minX withDouble:maxX withBoolean:false withInt:1];
  
#line 867
  rc2 = [c solveExtremXWithDoubleArray:res2];
  bc = [c addBoundWithDoubleArray:bound withInt:bc withDoubleArray:res2 withInt:rc2 withDouble:minX withDouble:maxX withBoolean:true withInt:2];
  rc2 = [c solveExtremYWithDoubleArray:res2];
  bc = [c addBoundWithDoubleArray:bound withInt:bc withDoubleArray:res2 withInt:rc2 withDouble:minX withDouble:maxX withBoolean:true withInt:4];
  
#line 872
  if (rx1 < x1 && x1 < rx2) {
    *IOSDoubleArray_GetRef(bound, bc++) = 0.0;
    *IOSDoubleArray_GetRef(bound, bc++) = 0.0;
    *IOSDoubleArray_GetRef(bound, bc++) = 0.0;
    *IOSDoubleArray_GetRef(bound, bc++) = 6;
  }
  if (rx1 < x2 && x2 < rx2) {
    *IOSDoubleArray_GetRef(bound, bc++) = 1.0;
    *IOSDoubleArray_GetRef(bound, bc++) = c->ax_;
    *IOSDoubleArray_GetRef(bound, bc++) = c->ay_;
    *IOSDoubleArray_GetRef(bound, bc++) = 7;
  }
  
#line 886
  jint cross = OrgApacheHarmonyAwtGlCrossing_crossBoundWithDoubleArray_withInt_withDouble_withDouble_(bound, bc, py1, py2);
  if (cross != OrgApacheHarmonyAwtGlCrossing_UNKNOWN) {
    return cross;
  }
  return [c crossWithDoubleArray:res1 withInt:rc1 withDouble:py1 withDouble:py2];
}


#line 902
jint OrgApacheHarmonyAwtGlCrossing_intersectPathWithHarmonyJavaAwtGeomPathIterator_withDouble_withDouble_withDouble_withDouble_(id<HarmonyJavaAwtGeomPathIterator> p, jdouble x, jdouble y, jdouble w, jdouble h) {
  OrgApacheHarmonyAwtGlCrossing_initialize();
  jint cross = 0;
  jint count;
  jdouble mx;
  
#line 906
  jdouble my;
  
#line 906
  jdouble cx;
  
#line 906
  jdouble cy;
  mx = my = cx = cy = 0.0;
  IOSDoubleArray *coords = [IOSDoubleArray newArrayWithLength:6];
  
#line 910
  jdouble rx1 = x;
  jdouble ry1 = y;
  jdouble rx2 = x + w;
  jdouble ry2 = y + h;
  
#line 915
  while (![((id<HarmonyJavaAwtGeomPathIterator>) nil_chk(p)) isDone]) {
    count = 0;
    switch ([p currentSegmentWithDoubleArray:coords]) {
      case HarmonyJavaAwtGeomPathIterator_SEG_MOVETO:
      if (cx != mx || cy != my) {
        count = OrgApacheHarmonyAwtGlCrossing_intersectLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(cx, cy, mx, my, rx1, ry1, rx2, ry2);
      }
      mx = cx = IOSDoubleArray_Get(coords, 0);
      my = cy = IOSDoubleArray_Get(coords, 1);
      break;
      case HarmonyJavaAwtGeomPathIterator_SEG_LINETO:
      {
        jdouble unseq$1 =
#line 926
        cx;
        jdouble unseq$2 =
#line 926
        cy;
        
#line 926
        count = OrgApacheHarmonyAwtGlCrossing_intersectLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(unseq$1, unseq$2, cx = IOSDoubleArray_Get(coords, 0), cy = IOSDoubleArray_Get(coords, 1), rx1, ry1, rx2, ry2);
      }
      
#line 927
      break;
      case HarmonyJavaAwtGeomPathIterator_SEG_QUADTO:
      {
        jdouble unseq$3 =
#line 929
        cx;
        jdouble unseq$4 =
#line 929
        cy;
        
#line 929
        count = OrgApacheHarmonyAwtGlCrossing_intersectQuadWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(unseq$3, unseq$4, IOSDoubleArray_Get(coords, 0), IOSDoubleArray_Get(coords, 1), cx = IOSDoubleArray_Get(coords, 2), cy = IOSDoubleArray_Get(coords, 3), rx1, ry1, rx2, ry2);
      }
      
#line 930
      break;
      case HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO:
      {
        jdouble unseq$5 =
#line 932
        cx;
        jdouble unseq$6 =
#line 932
        cy;
        
#line 932
        count = OrgApacheHarmonyAwtGlCrossing_intersectCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(unseq$5, unseq$6, IOSDoubleArray_Get(coords, 0), IOSDoubleArray_Get(coords, 1), IOSDoubleArray_Get(coords, 2), IOSDoubleArray_Get(coords, 3), cx = IOSDoubleArray_Get(coords, 4),
#line 933
        cy = IOSDoubleArray_Get(coords, 5), rx1, ry1, rx2, ry2);
      }
      
#line 934
      break;
      case HarmonyJavaAwtGeomPathIterator_SEG_CLOSE:
      if (cy != my || cx != mx) {
        count = OrgApacheHarmonyAwtGlCrossing_intersectLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(cx, cy, mx, my, rx1, ry1, rx2, ry2);
      }
      cx = mx;
      cy = my;
      break;
    }
    if (count == OrgApacheHarmonyAwtGlCrossing_CROSSING) {
      return OrgApacheHarmonyAwtGlCrossing_CROSSING;
    }
    cross += count;
    [p next];
  }
  if (cy != my) {
    count = OrgApacheHarmonyAwtGlCrossing_intersectLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(cx, cy, mx, my, rx1, ry1, rx2, ry2);
    if (count == OrgApacheHarmonyAwtGlCrossing_CROSSING) {
      return OrgApacheHarmonyAwtGlCrossing_CROSSING;
    }
    cross += count;
  }
  return cross;
}


#line 968
jint OrgApacheHarmonyAwtGlCrossing_intersectShapeWithHarmonyJavaAwtShape_withDouble_withDouble_withDouble_withDouble_(id<HarmonyJavaAwtShape> s, jdouble x, jdouble y, jdouble w, jdouble h) {
  OrgApacheHarmonyAwtGlCrossing_initialize();
  
#line 969
  if (![((HarmonyJavaAwtGeomRectangle2D *) nil_chk([((id<HarmonyJavaAwtShape>) nil_chk(s)) getBounds2D])) intersectsWithDouble:x withDouble:y withDouble:w withDouble:h]) {
    return 0;
  }
  return OrgApacheHarmonyAwtGlCrossing_intersectPathWithHarmonyJavaAwtGeomPathIterator_withDouble_withDouble_withDouble_withDouble_([s getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:nil], x, y, w, h);
}


#line 981
jboolean OrgApacheHarmonyAwtGlCrossing_isInsideNonZeroWithInt_(jint cross) {
  OrgApacheHarmonyAwtGlCrossing_initialize();
  
#line 982
  return cross != 0;
}


#line 991
jboolean OrgApacheHarmonyAwtGlCrossing_isInsideEvenOddWithInt_(jint cross) {
  OrgApacheHarmonyAwtGlCrossing_initialize();
  
#line 992
  return (cross & 1) != 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheHarmonyAwtGlCrossing)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/apache/harmony/awt/gl/Crossing.java"


#line 166
@implementation OrgApacheHarmonyAwtGlCrossing_QuadCurve


#line 171
- (instancetype)initWithDouble:(jdouble)x1
                    withDouble:(jdouble)y1
                    withDouble:(jdouble)cx
                    withDouble:(jdouble)cy
                    withDouble:(jdouble)x2
                    withDouble:(jdouble)y2 {
  OrgApacheHarmonyAwtGlCrossing_QuadCurve_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(self, x1, y1, cx, cy, x2, y2);
  return self;
}


#line 184
- (jint)crossWithDoubleArray:(IOSDoubleArray *)res
                     withInt:(jint)rc
                  withDouble:(jdouble)py1
                  withDouble:(jdouble)py2 {
  
#line 185
  jint cross = 0;
  
#line 187
  for (jint i = 0; i < rc; i++) {
    jdouble t = IOSDoubleArray_Get(nil_chk(res), i);
    
#line 191
    if (t < -OrgApacheHarmonyAwtGlCrossing_DELTA || t > 1 + OrgApacheHarmonyAwtGlCrossing_DELTA) {
      continue;
    }
    
#line 195
    if (t < OrgApacheHarmonyAwtGlCrossing_DELTA) {
      if (py1 < 0.0 && (bx_ != 0.0 ? bx_ : ax_ - bx_) < 0.0) {
        cross--;
      }
      continue;
    }
    
#line 202
    if (t > 1 - OrgApacheHarmonyAwtGlCrossing_DELTA) {
      if (py1 < ay_ && (ax_ != bx_ ? ax_ - bx_ : bx_) > 0.0) {
        cross++;
      }
      continue;
    }
    
#line 209
    jdouble ry = t * (t * Ay_ + By_);
    
#line 211
    if (ry > py2) {
      jdouble rxt = t * Ax_ + bx_;
      
#line 214
      if (rxt > -OrgApacheHarmonyAwtGlCrossing_DELTA && rxt < OrgApacheHarmonyAwtGlCrossing_DELTA) {
        continue;
      }
      cross += rxt > 0.0 ? 1 : -1;
    }
  }
  
#line 221
  return cross;
}


#line 224
- (jint)solvePointWithDoubleArray:(IOSDoubleArray *)res
                       withDouble:(jdouble)px {
  
#line 225
  IOSDoubleArray *eqn = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -px, Bx_, Ax_ } count:3];
  return OrgApacheHarmonyAwtGlCrossing_solveQuadWithDoubleArray_withDoubleArray_(eqn, res);
}


#line 229
- (jint)solveExtremWithDoubleArray:(IOSDoubleArray *)res {
  jint rc = 0;
  if (Ax_ != 0.0) {
    *IOSDoubleArray_GetRef(nil_chk(res), rc++) = -Bx_ / (Ax_ + Ax_);
  }
  if (Ay_ != 0.0) {
    *IOSDoubleArray_GetRef(nil_chk(res), rc++) = -By_ / (Ay_ + Ay_);
  }
  return rc;
}

- (jint)addBoundWithDoubleArray:(IOSDoubleArray *)bound
                        withInt:(jint)bc
                withDoubleArray:(IOSDoubleArray *)res
                        withInt:(jint)rc
                     withDouble:(jdouble)minX
                     withDouble:(jdouble)maxX
                    withBoolean:(jboolean)changeId
                        withInt:(jint)id_ {
  
#line 241
  for (jint i = 0; i < rc; i++) {
    jdouble t = IOSDoubleArray_Get(nil_chk(res), i);
    if (t > -OrgApacheHarmonyAwtGlCrossing_DELTA && t < 1 + OrgApacheHarmonyAwtGlCrossing_DELTA) {
      jdouble rx = t * (t * Ax_ + Bx_);
      if (minX <= rx && rx <= maxX) {
        *IOSDoubleArray_GetRef(nil_chk(bound), bc++) = t;
        *IOSDoubleArray_GetRef(bound, bc++) = rx;
        *IOSDoubleArray_GetRef(bound, bc++) = t * (t * Ay_ + By_);
        *IOSDoubleArray_GetRef(bound, bc++) = id_;
        if (changeId) {
          id_++;
        }
      }
    }
  }
  return bc;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[1].selector = @selector(crossWithDoubleArray:withInt:withDouble:withDouble:);
  methods[2].selector = @selector(solvePointWithDoubleArray:withDouble:);
  methods[3].selector = @selector(solveExtremWithDoubleArray:);
  methods[4].selector = @selector(addBoundWithDoubleArray:withInt:withDoubleArray:withInt:withDouble:withDouble:withBoolean:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ax_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ay_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bx_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "by_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "Ax_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "Ay_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "Bx_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "By_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "DDDDDD", "cross", "[DIDD", "solvePoint", "[DD", "solveExtrem", "[D", "addBound", "[DI[DIDDZI", "LOrgApacheHarmonyAwtGlCrossing;" };
  static const J2ObjcClassInfo _OrgApacheHarmonyAwtGlCrossing_QuadCurve = { "QuadCurve", "org.apache.harmony.awt.gl", ptrTable, methods, fields, 7, 0x9, 5, 8, 9, -1, -1, -1, -1 };
  return &_OrgApacheHarmonyAwtGlCrossing_QuadCurve;
}

@end


#line 171
void OrgApacheHarmonyAwtGlCrossing_QuadCurve_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(OrgApacheHarmonyAwtGlCrossing_QuadCurve *self, jdouble x1, jdouble y1, jdouble cx, jdouble cy, jdouble x2, jdouble y2) {
  NSObject_init(self);
  
#line 172
  self->ax_ = x2 - x1;
  self->ay_ = y2 - y1;
  self->bx_ = cx - x1;
  self->by_ = cy - y1;
  
#line 177
  self->Bx_ = self->bx_ + self->bx_;
  self->Ax_ = self->ax_ - self->Bx_;
  
#line 180
  self->By_ = self->by_ + self->by_;
  self->Ay_ = self->ay_ - self->By_;
}


#line 171
OrgApacheHarmonyAwtGlCrossing_QuadCurve *new_OrgApacheHarmonyAwtGlCrossing_QuadCurve_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble cx, jdouble cy, jdouble x2, jdouble y2) {
  J2OBJC_NEW_IMPL(OrgApacheHarmonyAwtGlCrossing_QuadCurve, initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_, x1, y1, cx, cy, x2, y2)
}


#line 171
OrgApacheHarmonyAwtGlCrossing_QuadCurve *create_OrgApacheHarmonyAwtGlCrossing_QuadCurve_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble cx, jdouble cy, jdouble x2, jdouble y2) {
  J2OBJC_CREATE_IMPL(OrgApacheHarmonyAwtGlCrossing_QuadCurve, initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_, x1, y1, cx, cy, x2, y2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheHarmonyAwtGlCrossing_QuadCurve)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/apache/harmony/awt/gl/Crossing.java"


#line 265
@implementation OrgApacheHarmonyAwtGlCrossing_CubicCurve


#line 271
- (instancetype)initWithDouble:(jdouble)x1
                    withDouble:(jdouble)y1
                    withDouble:(jdouble)cx1
                    withDouble:(jdouble)cy1
                    withDouble:(jdouble)cx2
                    withDouble:(jdouble)cy2
                    withDouble:(jdouble)x2
                    withDouble:(jdouble)y2 {
  OrgApacheHarmonyAwtGlCrossing_CubicCurve_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(self, x1, y1, cx1, cy1, cx2, cy2, x2, y2);
  return self;
}


#line 291
- (jint)crossWithDoubleArray:(IOSDoubleArray *)res
                     withInt:(jint)rc
                  withDouble:(jdouble)py1
                  withDouble:(jdouble)py2 {
  
#line 292
  jint cross = 0;
  for (jint i = 0; i < rc; i++) {
    jdouble t = IOSDoubleArray_Get(nil_chk(res), i);
    
#line 297
    if (t < -OrgApacheHarmonyAwtGlCrossing_DELTA || t > 1 + OrgApacheHarmonyAwtGlCrossing_DELTA) {
      continue;
    }
    
#line 301
    if (t < OrgApacheHarmonyAwtGlCrossing_DELTA) {
      if (py1 < 0.0 && (bx_ != 0.0 ? bx_ : (cx_ != bx_ ? cx_ - bx_ : ax_ - cx_)) < 0.0) {
        cross--;
      }
      continue;
    }
    
#line 308
    if (t > 1 - OrgApacheHarmonyAwtGlCrossing_DELTA) {
      if (py1 < ay_ && (ax_ != cx_ ? ax_ - cx_ : (cx_ != bx_ ? cx_ - bx_ : bx_)) > 0.0) {
        cross++;
      }
      continue;
    }
    
#line 315
    jdouble ry = t * (t * (t * Ay_ + By_) + Cy_);
    
#line 317
    if (ry > py2) {
      jdouble rxt = t * (t * Ax3_ + Bx2_) + Cx_;
      
#line 320
      if (rxt > -OrgApacheHarmonyAwtGlCrossing_DELTA && rxt < OrgApacheHarmonyAwtGlCrossing_DELTA) {
        rxt = t * (Ax3_ + Ax3_) + Bx2_;
        
#line 323
        if (rxt < -OrgApacheHarmonyAwtGlCrossing_DELTA || rxt > OrgApacheHarmonyAwtGlCrossing_DELTA) {
          
#line 325
          continue;
        }
        rxt = ax_;
      }
      cross += rxt > 0.0 ? 1 : -1;
    }
  }
  
#line 333
  return cross;
}


#line 336
- (jint)solvePointWithDoubleArray:(IOSDoubleArray *)res
                       withDouble:(jdouble)px {
  
#line 337
  IOSDoubleArray *eqn = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ -px, Cx_, Bx_, Ax_ } count:4];
  return OrgApacheHarmonyAwtGlCrossing_solveCubicWithDoubleArray_withDoubleArray_(eqn, res);
}


#line 341
- (jint)solveExtremXWithDoubleArray:(IOSDoubleArray *)res {
  IOSDoubleArray *eqn = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ Cx_, Bx2_, Ax3_ } count:3];
  return OrgApacheHarmonyAwtGlCrossing_solveQuadWithDoubleArray_withDoubleArray_(eqn, res);
}

- (jint)solveExtremYWithDoubleArray:(IOSDoubleArray *)res {
  IOSDoubleArray *eqn = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ Cy_, By_ + By_, Ay_ + Ay_ + Ay_ } count:3];
  return OrgApacheHarmonyAwtGlCrossing_solveQuadWithDoubleArray_withDoubleArray_(eqn, res);
}

- (jint)addBoundWithDoubleArray:(IOSDoubleArray *)bound
                        withInt:(jint)bc
                withDoubleArray:(IOSDoubleArray *)res
                        withInt:(jint)rc
                     withDouble:(jdouble)minX
                     withDouble:(jdouble)maxX
                    withBoolean:(jboolean)changeId
                        withInt:(jint)id_ {
  
#line 352
  for (jint i = 0; i < rc; i++) {
    jdouble t = IOSDoubleArray_Get(nil_chk(res), i);
    if (t > -OrgApacheHarmonyAwtGlCrossing_DELTA && t < 1 + OrgApacheHarmonyAwtGlCrossing_DELTA) {
      jdouble rx = t * (t * (t * Ax_ + Bx_) + Cx_);
      if (minX <= rx && rx <= maxX) {
        *IOSDoubleArray_GetRef(nil_chk(bound), bc++) = t;
        *IOSDoubleArray_GetRef(bound, bc++) = rx;
        *IOSDoubleArray_GetRef(bound, bc++) = t * (t * (t * Ay_ + By_) + Cy_);
        *IOSDoubleArray_GetRef(bound, bc++) = id_;
        if (changeId) {
          id_++;
        }
      }
    }
  }
  return bc;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 7, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[1].selector = @selector(crossWithDoubleArray:withInt:withDouble:withDouble:);
  methods[2].selector = @selector(solvePointWithDoubleArray:withDouble:);
  methods[3].selector = @selector(solveExtremXWithDoubleArray:);
  methods[4].selector = @selector(solveExtremYWithDoubleArray:);
  methods[5].selector = @selector(addBoundWithDoubleArray:withInt:withDoubleArray:withInt:withDouble:withDouble:withBoolean:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ax_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ay_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bx_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "by_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cx_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cy_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "Ax_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "Ay_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "Bx_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "By_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "Cx_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "Cy_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "Ax3_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "Bx2_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "DDDDDDDD", "cross", "[DIDD", "solvePoint", "[DD", "solveExtremX", "[D", "solveExtremY", "addBound", "[DI[DIDDZI", "LOrgApacheHarmonyAwtGlCrossing;" };
  static const J2ObjcClassInfo _OrgApacheHarmonyAwtGlCrossing_CubicCurve = { "CubicCurve", "org.apache.harmony.awt.gl", ptrTable, methods, fields, 7, 0x9, 6, 14, 10, -1, -1, -1, -1 };
  return &_OrgApacheHarmonyAwtGlCrossing_CubicCurve;
}

@end


#line 271
void OrgApacheHarmonyAwtGlCrossing_CubicCurve_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(OrgApacheHarmonyAwtGlCrossing_CubicCurve *self, jdouble x1, jdouble y1, jdouble cx1, jdouble cy1, jdouble cx2, jdouble cy2, jdouble x2, jdouble y2) {
  NSObject_init(self);
  
#line 272
  self->ax_ = x2 - x1;
  self->ay_ = y2 - y1;
  self->bx_ = cx1 - x1;
  self->by_ = cy1 - y1;
  self->cx_ = cx2 - x1;
  self->cy_ = cy2 - y1;
  
#line 279
  self->Cx_ = self->bx_ + self->bx_ + self->bx_;
  self->Bx_ = self->cx_ + self->cx_ + self->cx_ - self->Cx_ - self->Cx_;
  self->Ax_ = self->ax_ - self->Bx_ - self->Cx_;
  
#line 283
  self->Cy_ = self->by_ + self->by_ + self->by_;
  self->By_ = self->cy_ + self->cy_ + self->cy_ - self->Cy_ - self->Cy_;
  self->Ay_ = self->ay_ - self->By_ - self->Cy_;
  
#line 287
  self->Ax3_ = self->Ax_ + self->Ax_ + self->Ax_;
  self->Bx2_ = self->Bx_ + self->Bx_;
}


#line 271
OrgApacheHarmonyAwtGlCrossing_CubicCurve *new_OrgApacheHarmonyAwtGlCrossing_CubicCurve_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble cx1, jdouble cy1, jdouble cx2, jdouble cy2, jdouble x2, jdouble y2) {
  J2OBJC_NEW_IMPL(OrgApacheHarmonyAwtGlCrossing_CubicCurve, initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_, x1, y1, cx1, cy1, cx2, cy2, x2, y2)
}


#line 271
OrgApacheHarmonyAwtGlCrossing_CubicCurve *create_OrgApacheHarmonyAwtGlCrossing_CubicCurve_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble cx1, jdouble cy1, jdouble cx2, jdouble cy2, jdouble x2, jdouble y2) {
  J2OBJC_CREATE_IMPL(OrgApacheHarmonyAwtGlCrossing_CubicCurve, initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_, x1, y1, cx1, cy1, cx2, cy2, x2, y2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheHarmonyAwtGlCrossing_CubicCurve)
