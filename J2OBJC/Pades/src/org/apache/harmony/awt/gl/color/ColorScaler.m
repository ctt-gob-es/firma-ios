//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/apache/harmony/awt/gl/color/ColorScaler.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "harmony/java/awt/color/ColorSpace.h"
#include "harmony/java/awt/color/ICC_Profile.h"
#include "org/apache/harmony/awt/gl/color/ColorScaler.h"

#if !__has_feature(objc_arc)
#error "org/apache/harmony/awt/gl/color/ColorScaler must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheHarmonyAwtGlColorColorScaler () {
 @public
  IOSFloatArray *channelMinValues_;
  IOSFloatArray *channelMulipliers_;
  IOSFloatArray *invChannelMulipliers_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheHarmonyAwtGlColorColorScaler, channelMinValues_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(OrgApacheHarmonyAwtGlColorColorScaler, channelMulipliers_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(OrgApacheHarmonyAwtGlColorColorScaler, invChannelMulipliers_, IOSFloatArray *)

inline jfloat OrgApacheHarmonyAwtGlColorColorScaler_get_MAX_SHORT(void);
#define OrgApacheHarmonyAwtGlColorColorScaler_MAX_SHORT 65535.0f
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheHarmonyAwtGlColorColorScaler, MAX_SHORT, jfloat)

inline jfloat OrgApacheHarmonyAwtGlColorColorScaler_get_MAX_SIGNED_SHORT(void);
#define OrgApacheHarmonyAwtGlColorColorScaler_MAX_SIGNED_SHORT 32767.0f
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheHarmonyAwtGlColorColorScaler, MAX_SIGNED_SHORT, jfloat)

inline jfloat OrgApacheHarmonyAwtGlColorColorScaler_get_MAX_XYZ(void);
#define OrgApacheHarmonyAwtGlColorColorScaler_MAX_XYZ 1.9999695f
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheHarmonyAwtGlColorColorScaler, MAX_XYZ, jfloat)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/apache/harmony/awt/gl/color/ColorScaler.java"


#line 29
@implementation OrgApacheHarmonyAwtGlColorColorScaler

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 29
- (instancetype)init {
  OrgApacheHarmonyAwtGlColorColorScaler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 106
- (void)loadScalingDataWithHarmonyJavaAwtColorICC_Profile:(HarmonyJavaAwtColorICC_Profile *)pf {
  
#line 108
  isTTypeIntegral_ = false;
  
#line 110
  nColorChannels_ = [((HarmonyJavaAwtColorICC_Profile *) nil_chk(pf)) getNumComponents];
  
#line 114
  IOSFloatArray *maxValues = [IOSFloatArray newArrayWithLength:nColorChannels_];
  IOSFloatArray *minValues = [IOSFloatArray newArrayWithLength:nColorChannels_];
  
#line 117
  switch ([pf getColorSpaceType]) {
    case HarmonyJavaAwtColorColorSpace_TYPE_XYZ:
    *IOSFloatArray_GetRef(minValues, 0) = 0;
    *IOSFloatArray_GetRef(minValues, 1) = 0;
    *IOSFloatArray_GetRef(minValues, 2) = 0;
    *IOSFloatArray_GetRef(maxValues, 0) = OrgApacheHarmonyAwtGlColorColorScaler_MAX_XYZ;
    *IOSFloatArray_GetRef(maxValues, 1) = OrgApacheHarmonyAwtGlColorColorScaler_MAX_XYZ;
    *IOSFloatArray_GetRef(maxValues, 2) = OrgApacheHarmonyAwtGlColorColorScaler_MAX_XYZ;
    break;
    case HarmonyJavaAwtColorColorSpace_TYPE_Lab:
    *IOSFloatArray_GetRef(minValues, 0) = 0;
    *IOSFloatArray_GetRef(minValues, 1) = -128;
    *IOSFloatArray_GetRef(minValues, 2) = -128;
    *IOSFloatArray_GetRef(maxValues, 0) = 100;
    *IOSFloatArray_GetRef(maxValues, 1) = 127;
    *IOSFloatArray_GetRef(maxValues, 2) = 127;
    break;
    default:
    for (jint i = 0; i < nColorChannels_; i++) {
      *IOSFloatArray_GetRef(minValues, i) = 0;
      *IOSFloatArray_GetRef(maxValues, i) = 1;
    }
  }
  
#line 141
  channelMinValues_ = minValues;
  channelMulipliers_ = [IOSFloatArray newArrayWithLength:nColorChannels_];
  invChannelMulipliers_ = [IOSFloatArray newArrayWithLength:nColorChannels_];
  
#line 145
  for (jint i = 0; i < nColorChannels_; i++) {
    *IOSFloatArray_GetRef(channelMulipliers_, i) = OrgApacheHarmonyAwtGlColorColorScaler_MAX_SHORT / (IOSFloatArray_Get(maxValues, i) - IOSFloatArray_Get(channelMinValues_, i));
    
#line 148
    *IOSFloatArray_GetRef(invChannelMulipliers_, i) = (IOSFloatArray_Get(maxValues, i) - IOSFloatArray_Get(channelMinValues_, i)) / OrgApacheHarmonyAwtGlColorColorScaler_MAX_SHORT;
  }
}


#line 158
- (void)loadScalingDataWithHarmonyJavaAwtColorColorSpace:(HarmonyJavaAwtColorColorSpace *)cs {
  nColorChannels_ = [((HarmonyJavaAwtColorColorSpace *) nil_chk(cs)) getNumComponents];
  
#line 161
  channelMinValues_ = [IOSFloatArray newArrayWithLength:nColorChannels_];
  channelMulipliers_ = [IOSFloatArray newArrayWithLength:nColorChannels_];
  invChannelMulipliers_ = [IOSFloatArray newArrayWithLength:nColorChannels_];
  
#line 165
  for (jint i = 0; i < nColorChannels_; i++) {
    *IOSFloatArray_GetRef(channelMinValues_, i) = [cs getMinValueWithInt:i];
    
#line 168
    *IOSFloatArray_GetRef(nil_chk(channelMulipliers_), i) = OrgApacheHarmonyAwtGlColorColorScaler_MAX_SHORT / ([cs getMaxValueWithInt:i] - IOSFloatArray_Get(nil_chk(channelMinValues_), i));
    
#line 170
    *IOSFloatArray_GetRef(nil_chk(invChannelMulipliers_), i) = ([cs getMaxValueWithInt:i] - IOSFloatArray_Get(nil_chk(channelMinValues_), i)) / OrgApacheHarmonyAwtGlColorColorScaler_MAX_SHORT;
  }
}


#line 347
- (void)scale__WithFloatArray:(IOSFloatArray *)pixelData
               withShortArray:(IOSShortArray *)chanData
                      withInt:(jint)chanDataOffset {
  
#line 348
  for (jint chan = 0; chan < nColorChannels_; chan++) {
    *IOSShortArray_GetRef(nil_chk(chanData), chanDataOffset + chan) = (jshort) JreFpToInt(((IOSFloatArray_Get(nil_chk(pixelData), chan) - IOSFloatArray_Get(nil_chk(channelMinValues_), chan)) * IOSFloatArray_Get(nil_chk(
#line 350
    channelMulipliers_), chan) + 0.5f));
  }
}


#line 364
- (void)unscaleWithFloatArray:(IOSFloatArray *)pixelData
               withShortArray:(IOSShortArray *)chanData
                      withInt:(jint)chanDataOffset {
  
#line 365
  for (jint chan = 0; chan < nColorChannels_; chan++) {
    *IOSFloatArray_GetRef(nil_chk(pixelData), chan) = (IOSShortArray_Get(nil_chk(chanData), chanDataOffset + chan) & (jint) 0xFFFF) * IOSFloatArray_Get(nil_chk(invChannelMulipliers_), chan) + IOSFloatArray_Get(nil_chk(
#line 367
    channelMinValues_), chan);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(loadScalingDataWithHarmonyJavaAwtColorICC_Profile:);
  methods[2].selector = @selector(loadScalingDataWithHarmonyJavaAwtColorColorSpace:);
  methods[3].selector = @selector(scale__WithFloatArray:withShortArray:withInt:);
  methods[4].selector = @selector(unscaleWithFloatArray:withShortArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_SHORT", "F", .constantValue.asFloat = OrgApacheHarmonyAwtGlColorColorScaler_MAX_SHORT, 0x1a, -1, -1, -1, -1 },
    { "MAX_SIGNED_SHORT", "F", .constantValue.asFloat = OrgApacheHarmonyAwtGlColorColorScaler_MAX_SIGNED_SHORT, 0x1a, -1, -1, -1, -1 },
    { "MAX_XYZ", "F", .constantValue.asFloat = OrgApacheHarmonyAwtGlColorColorScaler_MAX_XYZ, 0x1a, -1, -1, -1, -1 },
    { "channelMinValues_", "[F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "channelMulipliers_", "[F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "invChannelMulipliers_", "[F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nColorChannels_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isTTypeIntegral_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadScalingData", "LHarmonyJavaAwtColorICC_Profile;", "LHarmonyJavaAwtColorColorSpace;", "scale", "[F[SI", "unscale" };
  static const J2ObjcClassInfo _OrgApacheHarmonyAwtGlColorColorScaler = { "ColorScaler", "org.apache.harmony.awt.gl.color", ptrTable, methods, fields, 7, 0x1, 5, 8, -1, -1, -1, -1, -1 };
  return &_OrgApacheHarmonyAwtGlColorColorScaler;
}

@end


#line 29
void OrgApacheHarmonyAwtGlColorColorScaler_init(OrgApacheHarmonyAwtGlColorColorScaler *self) {
  NSObject_init(self);
  self->channelMinValues_ =
#line 36
  nil;
  self->channelMulipliers_ = nil;
  self->invChannelMulipliers_ = nil;
  self->nColorChannels_ =
#line 40
  0;
  self->isTTypeIntegral_ =
#line 43
  false;
}


#line 29
OrgApacheHarmonyAwtGlColorColorScaler *new_OrgApacheHarmonyAwtGlColorColorScaler_init() {
  J2OBJC_NEW_IMPL(OrgApacheHarmonyAwtGlColorColorScaler, init)
}


#line 29
OrgApacheHarmonyAwtGlColorColorScaler *create_OrgApacheHarmonyAwtGlColorColorScaler_init() {
  J2OBJC_CREATE_IMPL(OrgApacheHarmonyAwtGlColorColorScaler, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheHarmonyAwtGlColorColorScaler)
