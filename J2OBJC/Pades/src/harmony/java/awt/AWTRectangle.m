//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/AWTRectangle.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "harmony/java/awt/AWTRectangle.h"
#include "harmony/java/awt/Dimension.h"
#include "harmony/java/awt/Point.h"
#include "harmony/java/awt/geom/Rectangle2D.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Math.h"
#include "java/lang/annotation/Annotation.h"

#if !__has_feature(objc_arc)
#error "harmony/java/awt/AWTRectangle must be compiled with ARC (-fobjc-arc)"
#endif

inline jlong HarmonyJavaAwtAWTRectangle_get_serialVersionUID(void);
#define HarmonyJavaAwtAWTRectangle_serialVersionUID -4345857070255674764LL
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtAWTRectangle, serialVersionUID, jlong)

__attribute__((unused)) static IOSObjectArray *HarmonyJavaAwtAWTRectangle__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *HarmonyJavaAwtAWTRectangle__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *HarmonyJavaAwtAWTRectangle__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *HarmonyJavaAwtAWTRectangle__Annotations$3(void);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/AWTRectangle.java"


#line 26
@implementation HarmonyJavaAwtAWTRectangle

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 35
- (instancetype)init {
  HarmonyJavaAwtAWTRectangle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 39
- (instancetype)initWithHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)p {
  HarmonyJavaAwtAWTRectangle_initWithHarmonyJavaAwtPoint_(self, p);
  return self;
}


#line 43
- (instancetype)initWithHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)p
                withHarmonyJavaAwtDimension:(HarmonyJavaAwtDimension *)d {
  HarmonyJavaAwtAWTRectangle_initWithHarmonyJavaAwtPoint_withHarmonyJavaAwtDimension_(self, p, d);
  return self;
}


#line 47
- (instancetype)initWithInt:(jint)x
                    withInt:(jint)y
                    withInt:(jint)width
                    withInt:(jint)height {
  HarmonyJavaAwtAWTRectangle_initWithInt_withInt_withInt_withInt_(self, x, y, width, height);
  return self;
}


#line 51
- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height {
  HarmonyJavaAwtAWTRectangle_initWithInt_withInt_(self, width, height);
  return self;
}


#line 55
- (instancetype)initWithHarmonyJavaAwtAWTRectangle:(HarmonyJavaAwtAWTRectangle *)r {
  HarmonyJavaAwtAWTRectangle_initWithHarmonyJavaAwtAWTRectangle_(self, r);
  return self;
}


#line 59
- (instancetype)initWithHarmonyJavaAwtDimension:(HarmonyJavaAwtDimension *)d {
  HarmonyJavaAwtAWTRectangle_initWithHarmonyJavaAwtDimension_(self, d);
  return self;
}


#line 63
- (jdouble)getX {
  
#line 65
  return x_;
}


#line 68
- (jdouble)getY {
  
#line 70
  return y_;
}


#line 73
- (jdouble)getHeight {
  
#line 75
  return height_;
}


#line 78
- (jdouble)getWidth {
  
#line 80
  return width_;
}


#line 83
- (jboolean)isEmpty {
  
#line 85
  return width_ <= 0 || height_ <= 0;
}


#line 88
- (HarmonyJavaAwtDimension *)getSize {
  return new_HarmonyJavaAwtDimension_initWithInt_withInt_(width_, height_);
}

- (void)setSizeWithInt:(jint)width
               withInt:(jint)height {
  
#line 93
  self->width_ = width;
  self->height_ = height;
}


#line 97
- (void)setSizeWithHarmonyJavaAwtDimension:(HarmonyJavaAwtDimension *)d {
  [self setSizeWithInt:((HarmonyJavaAwtDimension *) nil_chk(d))->width_ withInt:d->height_];
}

- (HarmonyJavaAwtPoint *)getLocation {
  return new_HarmonyJavaAwtPoint_initWithInt_withInt_(x_, y_);
}

- (void)setLocationWithInt:(jint)x
                   withInt:(jint)y {
  
#line 106
  self->x_ = x;
  self->y_ = y;
}


#line 110
- (void)setLocationWithHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)p {
  [self setLocationWithInt:((HarmonyJavaAwtPoint *) nil_chk(p))->x_ withInt:p->y_];
}


#line 119
- (void)moveWithInt:(jint)x
            withInt:(jint)y {
  [self setLocationWithInt:x withInt:y];
}

- (void)setRectWithDouble:(jdouble)x
               withDouble:(jdouble)y
               withDouble:(jdouble)width
               withDouble:(jdouble)height {
  
#line 126
  jint x1 = JreFpToInt(JavaLangMath_floorWithDouble_(x));
  jint y1 = JreFpToInt(JavaLangMath_floorWithDouble_(y));
  jint x2 = JreFpToInt(JavaLangMath_ceilWithDouble_(x + width));
  jint y2 = JreFpToInt(JavaLangMath_ceilWithDouble_(y + height));
  [self setBoundsWithInt:x1 withInt:y1 withInt:x2 - x1 withInt:y2 - y1];
}


#line 138
- (void)resizeWithInt:(jint)width
              withInt:(jint)height {
  [self setBoundsWithInt:x_ withInt:y_ withInt:width withInt:height];
}


#line 150
- (void)reshapeWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)width
               withInt:(jint)height {
  
#line 152
  [self setBoundsWithInt:x withInt:y withInt:width withInt:height];
}


#line 155
- (HarmonyJavaAwtAWTRectangle *)getBounds {
  
#line 157
  return new_HarmonyJavaAwtAWTRectangle_initWithInt_withInt_withInt_withInt_(x_, y_, width_, height_);
}


#line 160
- (HarmonyJavaAwtGeomRectangle2D *)getBounds2D {
  
#line 162
  return [self getBounds];
}


#line 165
- (void)setBoundsWithInt:(jint)x
                 withInt:(jint)y
                 withInt:(jint)width
                 withInt:(jint)height {
  
#line 166
  self->x_ = x;
  self->y_ = y;
  self->height_ = height;
  self->width_ = width;
}


#line 172
- (void)setBoundsWithHarmonyJavaAwtAWTRectangle:(HarmonyJavaAwtAWTRectangle *)r {
  [self setBoundsWithInt:((HarmonyJavaAwtAWTRectangle *) nil_chk(r))->x_ withInt:r->y_ withInt:r->width_ withInt:r->height_];
}

- (void)growWithInt:(jint)dx
            withInt:(jint)dy {
  
#line 177
  x_ -= dx;
  y_ -= dy;
  width_ += dx + dx;
  height_ += dy + dy;
}


#line 183
- (void)translateWithInt:(jint)mx
                 withInt:(jint)my {
  
#line 184
  x_ += mx;
  y_ += my;
}


#line 188
- (void)addWithInt:(jint)px
           withInt:(jint)py {
  
#line 189
  jint x1 = JavaLangMath_minWithInt_withInt_(x_, px);
  jint x2 = JavaLangMath_maxWithInt_withInt_(x_ + width_, px);
  jint y1 = JavaLangMath_minWithInt_withInt_(y_, py);
  jint y2 = JavaLangMath_maxWithInt_withInt_(y_ + height_, py);
  [self setBoundsWithInt:x1 withInt:y1 withInt:x2 - x1 withInt:y2 - y1];
}


#line 196
- (void)addWithHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)p {
  [self addWithInt:((HarmonyJavaAwtPoint *) nil_chk(p))->x_ withInt:p->y_];
}

- (void)addWithHarmonyJavaAwtAWTRectangle:(HarmonyJavaAwtAWTRectangle *)r {
  jint x1 = JavaLangMath_minWithInt_withInt_(x_, ((HarmonyJavaAwtAWTRectangle *) nil_chk(r))->x_);
  jint x2 = JavaLangMath_maxWithInt_withInt_(x_ + width_, r->x_ + r->width_);
  jint y1 = JavaLangMath_minWithInt_withInt_(y_, r->y_);
  jint y2 = JavaLangMath_maxWithInt_withInt_(y_ + height_, r->y_ + r->height_);
  [self setBoundsWithInt:x1 withInt:y1 withInt:x2 - x1 withInt:y2 - y1];
}

- (jboolean)containsWithInt:(jint)px
                    withInt:(jint)py {
  
#line 209
  if ([self isEmpty]) {
    return false;
  }
  if (px < x_ || py < y_) {
    return false;
  }
  px -= x_;
  py -= y_;
  return px < width_ && py < height_;
}


#line 220
- (jboolean)containsWithHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)p {
  return [self containsWithInt:((HarmonyJavaAwtPoint *) nil_chk(p))->x_ withInt:p->y_];
}

- (jboolean)containsWithInt:(jint)rx
                    withInt:(jint)ry
                    withInt:(jint)rw
                    withInt:(jint)rh {
  
#line 225
  return [self containsWithInt:rx withInt:ry] && [self containsWithInt:rx + rw - 1 withInt:ry + rh - 1];
}


#line 228
- (jboolean)containsWithHarmonyJavaAwtAWTRectangle:(HarmonyJavaAwtAWTRectangle *)r {
  return [self containsWithInt:((HarmonyJavaAwtAWTRectangle *) nil_chk(r))->x_ withInt:r->y_ withInt:r->width_ withInt:r->height_];
}


#line 238
- (jboolean)insideWithInt:(jint)px
                  withInt:(jint)py {
  return [self containsWithInt:px withInt:py];
}

- (HarmonyJavaAwtGeomRectangle2D *)createIntersectionWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)r {
  
#line 245
  if ([r isKindOfClass:[HarmonyJavaAwtAWTRectangle class]]) {
    return [self intersectionWithHarmonyJavaAwtAWTRectangle:(HarmonyJavaAwtAWTRectangle *) r];
  }
  HarmonyJavaAwtGeomRectangle2D *dst = new_HarmonyJavaAwtGeomRectangle2D_Double_init();
  HarmonyJavaAwtGeomRectangle2D_intersectWithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_(self, r, dst);
  return dst;
}


#line 253
- (HarmonyJavaAwtAWTRectangle *)intersectionWithHarmonyJavaAwtAWTRectangle:(HarmonyJavaAwtAWTRectangle *)r {
  jint x1 = JavaLangMath_maxWithInt_withInt_(x_, ((HarmonyJavaAwtAWTRectangle *) nil_chk(r))->x_);
  jint y1 = JavaLangMath_maxWithInt_withInt_(y_, r->y_);
  jint x2 = JavaLangMath_minWithInt_withInt_(x_ + width_, r->x_ + r->width_);
  jint y2 = JavaLangMath_minWithInt_withInt_(y_ + height_, r->y_ + r->height_);
  return new_HarmonyJavaAwtAWTRectangle_initWithInt_withInt_withInt_withInt_(x1, y1, x2 - x1, y2 - y1);
}

- (jboolean)intersectsWithHarmonyJavaAwtAWTRectangle:(HarmonyJavaAwtAWTRectangle *)r {
  return ![((HarmonyJavaAwtAWTRectangle *) nil_chk([self intersectionWithHarmonyJavaAwtAWTRectangle:r])) isEmpty];
}

- (jint)outcodeWithDouble:(jdouble)px
               withDouble:(jdouble)py {
  jint code = 0;
  
#line 269
  if (width_ <= 0) {
    code |= HarmonyJavaAwtGeomRectangle2D_OUT_LEFT | HarmonyJavaAwtGeomRectangle2D_OUT_RIGHT;
  }
  else
#line 271
  if (px < x_) {
    code |= HarmonyJavaAwtGeomRectangle2D_OUT_LEFT;
  }
  else
#line 273
  if (px > x_ + width_) {
    code |= HarmonyJavaAwtGeomRectangle2D_OUT_RIGHT;
  }
  
#line 277
  if (height_ <= 0) {
    code |= HarmonyJavaAwtGeomRectangle2D_OUT_TOP | HarmonyJavaAwtGeomRectangle2D_OUT_BOTTOM;
  }
  else
#line 279
  if (py < y_) {
    code |= HarmonyJavaAwtGeomRectangle2D_OUT_TOP;
  }
  else
#line 281
  if (py > y_ + height_) {
    code |= HarmonyJavaAwtGeomRectangle2D_OUT_BOTTOM;
  }
  
#line 285
  return code;
}


#line 288
- (HarmonyJavaAwtGeomRectangle2D *)createUnionWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)r {
  
#line 290
  if ([r isKindOfClass:[HarmonyJavaAwtAWTRectangle class]]) {
    return [self union__WithHarmonyJavaAwtAWTRectangle:(HarmonyJavaAwtAWTRectangle *) r];
  }
  HarmonyJavaAwtGeomRectangle2D *dst = new_HarmonyJavaAwtGeomRectangle2D_Double_init();
  HarmonyJavaAwtGeomRectangle2D_union__WithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_(self, r, dst);
  return dst;
}


#line 298
- (HarmonyJavaAwtAWTRectangle *)union__WithHarmonyJavaAwtAWTRectangle:(HarmonyJavaAwtAWTRectangle *)r {
  HarmonyJavaAwtAWTRectangle *dst = new_HarmonyJavaAwtAWTRectangle_initWithHarmonyJavaAwtAWTRectangle_(self);
  [dst addWithHarmonyJavaAwtAWTRectangle:r];
  return dst;
}

- (jboolean)isEqual:(id)obj {
  
#line 306
  if (JreObjectEqualsEquals(obj, self)) {
    return true;
  }
  if ([obj isKindOfClass:[HarmonyJavaAwtAWTRectangle class]]) {
    HarmonyJavaAwtAWTRectangle *r = (HarmonyJavaAwtAWTRectangle *) obj;
    return ((HarmonyJavaAwtAWTRectangle *) nil_chk(r))->x_ == x_ && r->y_ == y_ && r->width_ == width_ && r->height_ == height_;
  }
  return false;
}


#line 316
- (NSString *)description {
  
#line 321
  return JreStrcat("$$I$I$I$IC", [[self java_getClass] getName], @"[x=", x_, @",y=", y_, @",width=",
#line 322
  width_, @",height=", height_, ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtDimension;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 3, -1, -1, 9, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 3, -1, -1, 13, -1 },
    { NULL, "V", 0x1, 14, 2, -1, -1, 15, -1 },
    { NULL, "LHarmonyJavaAwtAWTRectangle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 3, -1, -1, 22, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtAWTRectangle;", 0x1, 25, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 26, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x1, 29, 24, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtAWTRectangle;", 0x1, 30, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 33, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithHarmonyJavaAwtPoint:);
  methods[2].selector = @selector(initWithHarmonyJavaAwtPoint:withHarmonyJavaAwtDimension:);
  methods[3].selector = @selector(initWithInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(initWithInt:withInt:);
  methods[5].selector = @selector(initWithHarmonyJavaAwtAWTRectangle:);
  methods[6].selector = @selector(initWithHarmonyJavaAwtDimension:);
  methods[7].selector = @selector(getX);
  methods[8].selector = @selector(getY);
  methods[9].selector = @selector(getHeight);
  methods[10].selector = @selector(getWidth);
  methods[11].selector = @selector(isEmpty);
  methods[12].selector = @selector(getSize);
  methods[13].selector = @selector(setSizeWithInt:withInt:);
  methods[14].selector = @selector(setSizeWithHarmonyJavaAwtDimension:);
  methods[15].selector = @selector(getLocation);
  methods[16].selector = @selector(setLocationWithInt:withInt:);
  methods[17].selector = @selector(setLocationWithHarmonyJavaAwtPoint:);
  methods[18].selector = @selector(moveWithInt:withInt:);
  methods[19].selector = @selector(setRectWithDouble:withDouble:withDouble:withDouble:);
  methods[20].selector = @selector(resizeWithInt:withInt:);
  methods[21].selector = @selector(reshapeWithInt:withInt:withInt:withInt:);
  methods[22].selector = @selector(getBounds);
  methods[23].selector = @selector(getBounds2D);
  methods[24].selector = @selector(setBoundsWithInt:withInt:withInt:withInt:);
  methods[25].selector = @selector(setBoundsWithHarmonyJavaAwtAWTRectangle:);
  methods[26].selector = @selector(growWithInt:withInt:);
  methods[27].selector = @selector(translateWithInt:withInt:);
  methods[28].selector = @selector(addWithInt:withInt:);
  methods[29].selector = @selector(addWithHarmonyJavaAwtPoint:);
  methods[30].selector = @selector(addWithHarmonyJavaAwtAWTRectangle:);
  methods[31].selector = @selector(containsWithInt:withInt:);
  methods[32].selector = @selector(containsWithHarmonyJavaAwtPoint:);
  methods[33].selector = @selector(containsWithInt:withInt:withInt:withInt:);
  methods[34].selector = @selector(containsWithHarmonyJavaAwtAWTRectangle:);
  methods[35].selector = @selector(insideWithInt:withInt:);
  methods[36].selector = @selector(createIntersectionWithHarmonyJavaAwtGeomRectangle2D:);
  methods[37].selector = @selector(intersectionWithHarmonyJavaAwtAWTRectangle:);
  methods[38].selector = @selector(intersectsWithHarmonyJavaAwtAWTRectangle:);
  methods[39].selector = @selector(outcodeWithDouble:withDouble:);
  methods[40].selector = @selector(createUnionWithHarmonyJavaAwtGeomRectangle2D:);
  methods[41].selector = @selector(union__WithHarmonyJavaAwtAWTRectangle:);
  methods[42].selector = @selector(isEqual:);
  methods[43].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = HarmonyJavaAwtAWTRectangle_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "x_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "y_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "width_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "height_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LHarmonyJavaAwtPoint;", "LHarmonyJavaAwtPoint;LHarmonyJavaAwtDimension;", "IIII", "II", "LHarmonyJavaAwtAWTRectangle;", "LHarmonyJavaAwtDimension;", "setSize", "setLocation", "move", (void *)&HarmonyJavaAwtAWTRectangle__Annotations$0, "setRect", "DDDD", "resize", (void *)&HarmonyJavaAwtAWTRectangle__Annotations$1, "reshape", (void *)&HarmonyJavaAwtAWTRectangle__Annotations$2, "setBounds", "grow", "translate", "add", "contains", "inside", (void *)&HarmonyJavaAwtAWTRectangle__Annotations$3, "createIntersection", "LHarmonyJavaAwtGeomRectangle2D;", "intersection", "intersects", "outcode", "DD", "createUnion", "union", "equals", "LNSObject;", "toString" };
  static const J2ObjcClassInfo _HarmonyJavaAwtAWTRectangle = { "AWTRectangle", "harmony.java.awt", ptrTable, methods, fields, 7, 0x1, 44, 5, -1, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtAWTRectangle;
}

@end


#line 35
void HarmonyJavaAwtAWTRectangle_init(HarmonyJavaAwtAWTRectangle *self) {
  HarmonyJavaAwtGeomRectangle2D_init(self);
  
#line 36
  [self setBoundsWithInt:0 withInt:0 withInt:0 withInt:0];
}


#line 35
HarmonyJavaAwtAWTRectangle *new_HarmonyJavaAwtAWTRectangle_init() {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtAWTRectangle, init)
}


#line 35
HarmonyJavaAwtAWTRectangle *create_HarmonyJavaAwtAWTRectangle_init() {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtAWTRectangle, init)
}

void HarmonyJavaAwtAWTRectangle_initWithHarmonyJavaAwtPoint_(HarmonyJavaAwtAWTRectangle *self, HarmonyJavaAwtPoint *p) {
  HarmonyJavaAwtGeomRectangle2D_init(self);
  
#line 40
  [self setBoundsWithInt:((HarmonyJavaAwtPoint *) nil_chk(p))->x_ withInt:p->y_ withInt:0 withInt:0];
}


#line 39
HarmonyJavaAwtAWTRectangle *new_HarmonyJavaAwtAWTRectangle_initWithHarmonyJavaAwtPoint_(HarmonyJavaAwtPoint *p) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtAWTRectangle, initWithHarmonyJavaAwtPoint_, p)
}


#line 39
HarmonyJavaAwtAWTRectangle *create_HarmonyJavaAwtAWTRectangle_initWithHarmonyJavaAwtPoint_(HarmonyJavaAwtPoint *p) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtAWTRectangle, initWithHarmonyJavaAwtPoint_, p)
}

void HarmonyJavaAwtAWTRectangle_initWithHarmonyJavaAwtPoint_withHarmonyJavaAwtDimension_(HarmonyJavaAwtAWTRectangle *self, HarmonyJavaAwtPoint *p, HarmonyJavaAwtDimension *d) {
  HarmonyJavaAwtGeomRectangle2D_init(self);
  
#line 44
  [self setBoundsWithInt:((HarmonyJavaAwtPoint *) nil_chk(p))->x_ withInt:p->y_ withInt:((HarmonyJavaAwtDimension *) nil_chk(d))->width_ withInt:d->height_];
}


#line 43
HarmonyJavaAwtAWTRectangle *new_HarmonyJavaAwtAWTRectangle_initWithHarmonyJavaAwtPoint_withHarmonyJavaAwtDimension_(HarmonyJavaAwtPoint *p, HarmonyJavaAwtDimension *d) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtAWTRectangle, initWithHarmonyJavaAwtPoint_withHarmonyJavaAwtDimension_, p, d)
}


#line 43
HarmonyJavaAwtAWTRectangle *create_HarmonyJavaAwtAWTRectangle_initWithHarmonyJavaAwtPoint_withHarmonyJavaAwtDimension_(HarmonyJavaAwtPoint *p, HarmonyJavaAwtDimension *d) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtAWTRectangle, initWithHarmonyJavaAwtPoint_withHarmonyJavaAwtDimension_, p, d)
}

void HarmonyJavaAwtAWTRectangle_initWithInt_withInt_withInt_withInt_(HarmonyJavaAwtAWTRectangle *self, jint x, jint y, jint width, jint height) {
  HarmonyJavaAwtGeomRectangle2D_init(self);
  
#line 48
  [self setBoundsWithInt:x withInt:y withInt:width withInt:height];
}


#line 47
HarmonyJavaAwtAWTRectangle *new_HarmonyJavaAwtAWTRectangle_initWithInt_withInt_withInt_withInt_(jint x, jint y, jint width, jint height) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtAWTRectangle, initWithInt_withInt_withInt_withInt_, x, y, width, height)
}


#line 47
HarmonyJavaAwtAWTRectangle *create_HarmonyJavaAwtAWTRectangle_initWithInt_withInt_withInt_withInt_(jint x, jint y, jint width, jint height) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtAWTRectangle, initWithInt_withInt_withInt_withInt_, x, y, width, height)
}

void HarmonyJavaAwtAWTRectangle_initWithInt_withInt_(HarmonyJavaAwtAWTRectangle *self, jint width, jint height) {
  HarmonyJavaAwtGeomRectangle2D_init(self);
  
#line 52
  [self setBoundsWithInt:0 withInt:0 withInt:width withInt:height];
}


#line 51
HarmonyJavaAwtAWTRectangle *new_HarmonyJavaAwtAWTRectangle_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtAWTRectangle, initWithInt_withInt_, width, height)
}


#line 51
HarmonyJavaAwtAWTRectangle *create_HarmonyJavaAwtAWTRectangle_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtAWTRectangle, initWithInt_withInt_, width, height)
}

void HarmonyJavaAwtAWTRectangle_initWithHarmonyJavaAwtAWTRectangle_(HarmonyJavaAwtAWTRectangle *self, HarmonyJavaAwtAWTRectangle *r) {
  HarmonyJavaAwtGeomRectangle2D_init(self);
  
#line 56
  [self setBoundsWithInt:((HarmonyJavaAwtAWTRectangle *) nil_chk(r))->x_ withInt:r->y_ withInt:r->width_ withInt:r->height_];
}


#line 55
HarmonyJavaAwtAWTRectangle *new_HarmonyJavaAwtAWTRectangle_initWithHarmonyJavaAwtAWTRectangle_(HarmonyJavaAwtAWTRectangle *r) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtAWTRectangle, initWithHarmonyJavaAwtAWTRectangle_, r)
}


#line 55
HarmonyJavaAwtAWTRectangle *create_HarmonyJavaAwtAWTRectangle_initWithHarmonyJavaAwtAWTRectangle_(HarmonyJavaAwtAWTRectangle *r) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtAWTRectangle, initWithHarmonyJavaAwtAWTRectangle_, r)
}

void HarmonyJavaAwtAWTRectangle_initWithHarmonyJavaAwtDimension_(HarmonyJavaAwtAWTRectangle *self, HarmonyJavaAwtDimension *d) {
  HarmonyJavaAwtGeomRectangle2D_init(self);
  
#line 60
  [self setBoundsWithInt:0 withInt:0 withInt:((HarmonyJavaAwtDimension *) nil_chk(d))->width_ withInt:d->height_];
}


#line 59
HarmonyJavaAwtAWTRectangle *new_HarmonyJavaAwtAWTRectangle_initWithHarmonyJavaAwtDimension_(HarmonyJavaAwtDimension *d) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtAWTRectangle, initWithHarmonyJavaAwtDimension_, d)
}


#line 59
HarmonyJavaAwtAWTRectangle *create_HarmonyJavaAwtAWTRectangle_initWithHarmonyJavaAwtDimension_(HarmonyJavaAwtDimension *d) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtAWTRectangle, initWithHarmonyJavaAwtDimension_, d)
}

IOSObjectArray *HarmonyJavaAwtAWTRectangle__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *HarmonyJavaAwtAWTRectangle__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *HarmonyJavaAwtAWTRectangle__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *HarmonyJavaAwtAWTRectangle__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtAWTRectangle)
