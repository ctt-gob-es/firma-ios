//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/geom/RoundRectangle2D.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "harmony/java/awt/geom/AffineTransform.h"
#include "harmony/java/awt/geom/PathIterator.h"
#include "harmony/java/awt/geom/Rectangle2D.h"
#include "harmony/java/awt/geom/RectangularShape.h"
#include "harmony/java/awt/geom/RoundRectangle2D.h"
#include "java/lang/Math.h"
#include "java/util/NoSuchElementException.h"
#include "org/apache/harmony/awt/internal/nls/Messages.h"

#if !__has_feature(objc_arc)
#error "harmony/java/awt/geom/RoundRectangle2D must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/geom/RoundRectangle2D.java"


#line 26
@implementation HarmonyJavaAwtGeomRoundRectangle2D

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 339
- (instancetype)init {
  HarmonyJavaAwtGeomRoundRectangle2D_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 342
- (jdouble)getArcWidth {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 344
- (jdouble)getArcHeight {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 346
- (void)setRoundRectWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)width
                    withDouble:(jdouble)height
                    withDouble:(jdouble)arcWidth
                    withDouble:(jdouble)arcHeight {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 348
- (void)setRoundRectWithHarmonyJavaAwtGeomRoundRectangle2D:(HarmonyJavaAwtGeomRoundRectangle2D *)rr {
  [self setRoundRectWithDouble:[((HarmonyJavaAwtGeomRoundRectangle2D *) nil_chk(rr)) getX] withDouble:[rr getY] withDouble:[rr getWidth] withDouble:[rr getHeight] withDouble:[rr getArcWidth] withDouble:[rr getArcHeight]];
}

- (void)setFrameWithDouble:(jdouble)x
                withDouble:(jdouble)y
                withDouble:(jdouble)width
                withDouble:(jdouble)height {
  
#line 354
  [self setRoundRectWithDouble:x withDouble:y withDouble:width withDouble:height withDouble:[self getArcWidth] withDouble:[self getArcHeight]];
}


#line 357
- (jboolean)containsWithDouble:(jdouble)px
                    withDouble:(jdouble)py {
  
#line 358
  if ([self isEmpty]) {
    return false;
  }
  
#line 362
  jdouble rx1 = [self getX];
  jdouble ry1 = [self getY];
  jdouble rx2 = rx1 + [self getWidth];
  jdouble ry2 = ry1 + [self getHeight];
  
#line 367
  if (px < rx1 || px >= rx2 || py < ry1 || py >= ry2) {
    return false;
  }
  
#line 371
  jdouble aw = [self getArcWidth] / 2.0;
  jdouble ah = [self getArcHeight] / 2.0;
  
#line 374
  jdouble cx;
  
#line 374
  jdouble cy;
  
#line 376
  if (px < rx1 + aw) {
    cx = rx1 + aw;
  }
  else
#line 378
  if (px > rx2 - aw) {
    cx = rx2 - aw;
  }
  else {
    
#line 381
    return true;
  }
  
#line 384
  if (py < ry1 + ah) {
    cy = ry1 + ah;
  }
  else
#line 386
  if (py > ry2 - ah) {
    cy = ry2 - ah;
  }
  else {
    
#line 389
    return true;
  }
  
#line 392
  px = (px - cx) / aw;
  py = (py - cy) / ah;
  return px * px + py * py <= 1.0;
}


#line 397
- (jboolean)intersectsWithDouble:(jdouble)rx
                      withDouble:(jdouble)ry
                      withDouble:(jdouble)rw
                      withDouble:(jdouble)rh {
  
#line 398
  if ([self isEmpty] || rw <= 0.0 || rh <= 0.0) {
    return false;
  }
  
#line 402
  jdouble x1 = [self getX];
  jdouble y1 = [self getY];
  jdouble x2 = x1 + [self getWidth];
  jdouble y2 = y1 + [self getHeight];
  
#line 407
  jdouble rx1 = rx;
  jdouble ry1 = ry;
  jdouble rx2 = rx + rw;
  jdouble ry2 = ry + rh;
  
#line 412
  if (rx2 < x1 || x2 < rx1 || ry2 < y1 || y2 < ry1) {
    return false;
  }
  
#line 416
  jdouble cx = (x1 + x2) / 2.0;
  jdouble cy = (y1 + y2) / 2.0;
  
#line 419
  jdouble nx = cx < rx1 ? rx1 : (cx > rx2 ? rx2 : cx);
  jdouble ny = cy < ry1 ? ry1 : (cy > ry2 ? ry2 : cy);
  
#line 422
  return [self containsWithDouble:nx withDouble:ny];
}


#line 425
- (jboolean)containsWithDouble:(jdouble)rx
                    withDouble:(jdouble)ry
                    withDouble:(jdouble)rw
                    withDouble:(jdouble)rh {
  
#line 426
  if ([self isEmpty] || rw <= 0.0 || rh <= 0.0) {
    return false;
  }
  
#line 430
  jdouble rx1 = rx;
  jdouble ry1 = ry;
  jdouble rx2 = rx + rw;
  jdouble ry2 = ry + rh;
  
#line 435
  return [self containsWithDouble:rx1 withDouble:ry1] && [self containsWithDouble:rx2 withDouble:ry1] && [self containsWithDouble:rx2 withDouble:ry2] && [self containsWithDouble:rx1 withDouble:ry2];
}


#line 438
- (id<HarmonyJavaAwtGeomPathIterator>)getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)at {
  return new_HarmonyJavaAwtGeomRoundRectangle2D_Iterator_initWithHarmonyJavaAwtGeomRoundRectangle2D_withHarmonyJavaAwtGeomRoundRectangle2D_withHarmonyJavaAwtGeomAffineTransform_(self, self, at);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPathIterator;", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getArcWidth);
  methods[2].selector = @selector(getArcHeight);
  methods[3].selector = @selector(setRoundRectWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[4].selector = @selector(setRoundRectWithHarmonyJavaAwtGeomRoundRectangle2D:);
  methods[5].selector = @selector(setFrameWithDouble:withDouble:withDouble:withDouble:);
  methods[6].selector = @selector(containsWithDouble:withDouble:);
  methods[7].selector = @selector(intersectsWithDouble:withDouble:withDouble:withDouble:);
  methods[8].selector = @selector(containsWithDouble:withDouble:withDouble:withDouble:);
  methods[9].selector = @selector(getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "setRoundRect", "DDDDDD", "LHarmonyJavaAwtGeomRoundRectangle2D;", "setFrame", "DDDD", "contains", "DD", "intersects", "getPathIterator", "LHarmonyJavaAwtGeomAffineTransform;", "LHarmonyJavaAwtGeomRoundRectangle2D_Float;LHarmonyJavaAwtGeomRoundRectangle2D_Double;LHarmonyJavaAwtGeomRoundRectangle2D_Iterator;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomRoundRectangle2D = { "RoundRectangle2D", "harmony.java.awt.geom", ptrTable, methods, NULL, 7, 0x401, 10, 0, -1, 10, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomRoundRectangle2D;
}

@end


#line 339
void HarmonyJavaAwtGeomRoundRectangle2D_init(HarmonyJavaAwtGeomRoundRectangle2D *self) {
  HarmonyJavaAwtGeomRectangularShape_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomRoundRectangle2D)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/geom/RoundRectangle2D.java"


#line 28
@implementation HarmonyJavaAwtGeomRoundRectangle2D_Float

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 37
- (instancetype)init {
  HarmonyJavaAwtGeomRoundRectangle2D_Float_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 40
- (instancetype)initWithFloat:(jfloat)x
                    withFloat:(jfloat)y
                    withFloat:(jfloat)width
                    withFloat:(jfloat)height
                    withFloat:(jfloat)arcwidth
                    withFloat:(jfloat)archeight {
  HarmonyJavaAwtGeomRoundRectangle2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(self, x, y, width, height, arcwidth, archeight);
  return self;
}


#line 44
- (jdouble)getX {
  
#line 46
  return x_;
}


#line 49
- (jdouble)getY {
  
#line 51
  return y_;
}


#line 54
- (jdouble)getWidth {
  
#line 56
  return width_;
}


#line 59
- (jdouble)getHeight {
  
#line 61
  return height_;
}


#line 64
- (jdouble)getArcWidth {
  
#line 66
  return arcwidth_;
}


#line 69
- (jdouble)getArcHeight {
  
#line 71
  return archeight_;
}


#line 74
- (jboolean)isEmpty {
  
#line 76
  return width_ <= 0.0f || height_ <= 0.0f;
}


#line 79
- (void)setRoundRectWithFloat:(jfloat)x
                    withFloat:(jfloat)y
                    withFloat:(jfloat)width
                    withFloat:(jfloat)height
                    withFloat:(jfloat)arcwidth
                    withFloat:(jfloat)archeight {
  
#line 80
  self->x_ = x;
  self->y_ = y;
  self->width_ = width;
  self->height_ = height;
  self->arcwidth_ = arcwidth;
  self->archeight_ = archeight;
}


#line 88
- (void)setRoundRectWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)width
                    withDouble:(jdouble)height
                    withDouble:(jdouble)arcwidth
                    withDouble:(jdouble)archeight {
  
#line 90
  self->x_ = (jfloat) x;
  self->y_ = (jfloat) y;
  self->width_ = (jfloat) width;
  self->height_ = (jfloat) height;
  self->arcwidth_ = (jfloat) arcwidth;
  self->archeight_ = (jfloat) archeight;
}


#line 98
- (void)setRoundRectWithHarmonyJavaAwtGeomRoundRectangle2D:(HarmonyJavaAwtGeomRoundRectangle2D *)rr {
  
#line 100
  self->x_ = (jfloat) [((HarmonyJavaAwtGeomRoundRectangle2D *) nil_chk(rr)) getX];
  self->y_ = (jfloat) [rr getY];
  self->width_ = (jfloat) [rr getWidth];
  self->height_ = (jfloat) [rr getHeight];
  self->arcwidth_ = (jfloat) [rr getArcWidth];
  self->archeight_ = (jfloat) [rr getArcHeight];
}


#line 108
- (HarmonyJavaAwtGeomRectangle2D *)getBounds2D {
  return new_HarmonyJavaAwtGeomRectangle2D_Float_initWithFloat_withFloat_withFloat_withFloat_(x_, y_, width_, height_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:);
  methods[2].selector = @selector(getX);
  methods[3].selector = @selector(getY);
  methods[4].selector = @selector(getWidth);
  methods[5].selector = @selector(getHeight);
  methods[6].selector = @selector(getArcWidth);
  methods[7].selector = @selector(getArcHeight);
  methods[8].selector = @selector(isEmpty);
  methods[9].selector = @selector(setRoundRectWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:);
  methods[10].selector = @selector(setRoundRectWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[11].selector = @selector(setRoundRectWithHarmonyJavaAwtGeomRoundRectangle2D:);
  methods[12].selector = @selector(getBounds2D);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "x_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "y_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "width_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "height_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "arcwidth_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "archeight_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "FFFFFF", "setRoundRect", "DDDDDD", "LHarmonyJavaAwtGeomRoundRectangle2D;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomRoundRectangle2D_Float = { "Float", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x9, 13, 6, 3, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomRoundRectangle2D_Float;
}

@end


#line 37
void HarmonyJavaAwtGeomRoundRectangle2D_Float_init(HarmonyJavaAwtGeomRoundRectangle2D_Float *self) {
  HarmonyJavaAwtGeomRoundRectangle2D_init(self);
}


#line 37
HarmonyJavaAwtGeomRoundRectangle2D_Float *new_HarmonyJavaAwtGeomRoundRectangle2D_Float_init() {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomRoundRectangle2D_Float, init)
}


#line 37
HarmonyJavaAwtGeomRoundRectangle2D_Float *create_HarmonyJavaAwtGeomRoundRectangle2D_Float_init() {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomRoundRectangle2D_Float, init)
}


#line 40
void HarmonyJavaAwtGeomRoundRectangle2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(HarmonyJavaAwtGeomRoundRectangle2D_Float *self, jfloat x, jfloat y, jfloat width, jfloat height, jfloat arcwidth, jfloat archeight) {
  HarmonyJavaAwtGeomRoundRectangle2D_init(self);
  
#line 41
  [self setRoundRectWithFloat:x withFloat:y withFloat:width withFloat:height withFloat:arcwidth withFloat:archeight];
}


#line 40
HarmonyJavaAwtGeomRoundRectangle2D_Float *new_HarmonyJavaAwtGeomRoundRectangle2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(jfloat x, jfloat y, jfloat width, jfloat height, jfloat arcwidth, jfloat archeight) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomRoundRectangle2D_Float, initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_, x, y, width, height, arcwidth, archeight)
}


#line 40
HarmonyJavaAwtGeomRoundRectangle2D_Float *create_HarmonyJavaAwtGeomRoundRectangle2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(jfloat x, jfloat y, jfloat width, jfloat height, jfloat arcwidth, jfloat archeight) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomRoundRectangle2D_Float, initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_, x, y, width, height, arcwidth, archeight)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomRoundRectangle2D_Float)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/geom/RoundRectangle2D.java"


#line 113
@implementation HarmonyJavaAwtGeomRoundRectangle2D_Double

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 122
- (instancetype)init {
  HarmonyJavaAwtGeomRoundRectangle2D_Double_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 125
- (instancetype)initWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)width
                    withDouble:(jdouble)height
                    withDouble:(jdouble)arcwidth
                    withDouble:(jdouble)archeight {
  HarmonyJavaAwtGeomRoundRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(self, x, y, width, height, arcwidth, archeight);
  return self;
}


#line 129
- (jdouble)getX {
  
#line 131
  return x_;
}


#line 134
- (jdouble)getY {
  
#line 136
  return y_;
}


#line 139
- (jdouble)getWidth {
  
#line 141
  return width_;
}


#line 144
- (jdouble)getHeight {
  
#line 146
  return height_;
}


#line 149
- (jdouble)getArcWidth {
  
#line 151
  return arcwidth_;
}


#line 154
- (jdouble)getArcHeight {
  
#line 156
  return archeight_;
}


#line 159
- (jboolean)isEmpty {
  
#line 161
  return width_ <= 0.0 || height_ <= 0.0;
}


#line 164
- (void)setRoundRectWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)width
                    withDouble:(jdouble)height
                    withDouble:(jdouble)arcwidth
                    withDouble:(jdouble)archeight {
  
#line 166
  self->x_ = x;
  self->y_ = y;
  self->width_ = width;
  self->height_ = height;
  self->arcwidth_ = arcwidth;
  self->archeight_ = archeight;
}


#line 174
- (void)setRoundRectWithHarmonyJavaAwtGeomRoundRectangle2D:(HarmonyJavaAwtGeomRoundRectangle2D *)rr {
  
#line 176
  self->x_ = [((HarmonyJavaAwtGeomRoundRectangle2D *) nil_chk(rr)) getX];
  self->y_ = [rr getY];
  self->width_ = [rr getWidth];
  self->height_ = [rr getHeight];
  self->arcwidth_ = [rr getArcWidth];
  self->archeight_ = [rr getArcHeight];
}


#line 184
- (HarmonyJavaAwtGeomRectangle2D *)getBounds2D {
  return new_HarmonyJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_(x_, y_, width_, height_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[2].selector = @selector(getX);
  methods[3].selector = @selector(getY);
  methods[4].selector = @selector(getWidth);
  methods[5].selector = @selector(getHeight);
  methods[6].selector = @selector(getArcWidth);
  methods[7].selector = @selector(getArcHeight);
  methods[8].selector = @selector(isEmpty);
  methods[9].selector = @selector(setRoundRectWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[10].selector = @selector(setRoundRectWithHarmonyJavaAwtGeomRoundRectangle2D:);
  methods[11].selector = @selector(getBounds2D);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "x_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "y_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "width_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "height_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "arcwidth_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "archeight_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "DDDDDD", "setRoundRect", "LHarmonyJavaAwtGeomRoundRectangle2D;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomRoundRectangle2D_Double = { "Double", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x9, 12, 6, 2, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomRoundRectangle2D_Double;
}

@end


#line 122
void HarmonyJavaAwtGeomRoundRectangle2D_Double_init(HarmonyJavaAwtGeomRoundRectangle2D_Double *self) {
  HarmonyJavaAwtGeomRoundRectangle2D_init(self);
}


#line 122
HarmonyJavaAwtGeomRoundRectangle2D_Double *new_HarmonyJavaAwtGeomRoundRectangle2D_Double_init() {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomRoundRectangle2D_Double, init)
}


#line 122
HarmonyJavaAwtGeomRoundRectangle2D_Double *create_HarmonyJavaAwtGeomRoundRectangle2D_Double_init() {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomRoundRectangle2D_Double, init)
}


#line 125
void HarmonyJavaAwtGeomRoundRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(HarmonyJavaAwtGeomRoundRectangle2D_Double *self, jdouble x, jdouble y, jdouble width, jdouble height, jdouble arcwidth, jdouble archeight) {
  HarmonyJavaAwtGeomRoundRectangle2D_init(self);
  
#line 126
  [self setRoundRectWithDouble:x withDouble:y withDouble:width withDouble:height withDouble:arcwidth withDouble:archeight];
}


#line 125
HarmonyJavaAwtGeomRoundRectangle2D_Double *new_HarmonyJavaAwtGeomRoundRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble width, jdouble height, jdouble arcwidth, jdouble archeight) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomRoundRectangle2D_Double, initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_, x, y, width, height, arcwidth, archeight)
}


#line 125
HarmonyJavaAwtGeomRoundRectangle2D_Double *create_HarmonyJavaAwtGeomRoundRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble width, jdouble height, jdouble arcwidth, jdouble archeight) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomRoundRectangle2D_Double, initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_, x, y, width, height, arcwidth, archeight)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomRoundRectangle2D_Double)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/geom/RoundRectangle2D.java"


#line 192
@implementation HarmonyJavaAwtGeomRoundRectangle2D_Iterator


#line 272
- (instancetype)initWithHarmonyJavaAwtGeomRoundRectangle2D:(HarmonyJavaAwtGeomRoundRectangle2D *)outer$
                    withHarmonyJavaAwtGeomRoundRectangle2D:(HarmonyJavaAwtGeomRoundRectangle2D *)rr
                     withHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)at {
  HarmonyJavaAwtGeomRoundRectangle2D_Iterator_initWithHarmonyJavaAwtGeomRoundRectangle2D_withHarmonyJavaAwtGeomRoundRectangle2D_withHarmonyJavaAwtGeomAffineTransform_(self, outer$, rr, at);
  return self;
}


#line 285
- (jint)getWindingRule {
  return HarmonyJavaAwtGeomPathIterator_WIND_NON_ZERO;
}

- (jboolean)isDone {
  return index_ > ((IOSObjectArray *) nil_chk(points_))->size_;
}

- (void)next {
  index_++;
}

- (jint)currentSegmentWithDoubleArray:(IOSDoubleArray *)coords {
  if ([self isDone]) {
    
#line 300
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(OrgApacheHarmonyAwtInternalNlsMessages_getStringWithNSString_(@"awt.4B"));
  }
  if (index_ == ((IOSObjectArray *) nil_chk(points_))->size_) {
    return HarmonyJavaAwtGeomPathIterator_SEG_CLOSE;
  }
  jint j = 0;
  IOSDoubleArray *p = IOSObjectArray_Get(points_, index_);
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(p))->size_; i += 4) {
    *IOSDoubleArray_GetRef(nil_chk(coords), j++) = x_ + IOSDoubleArray_Get(p, i + 0) * width_ + IOSDoubleArray_Get(p, i + 1) * aw_;
    *IOSDoubleArray_GetRef(coords, j++) = y_ + IOSDoubleArray_Get(p, i + 2) * height_ + IOSDoubleArray_Get(p, i + 3) * ah_;
  }
  if (t_ != nil) {
    [t_ transformWithDoubleArray:coords withInt:0 withDoubleArray:coords withInt:0 withInt:JreIntDiv(j, 2)];
  }
  return IOSIntArray_Get(nil_chk(types_), index_);
}


#line 317
- (jint)currentSegmentWithFloatArray:(IOSFloatArray *)coords {
  if ([self isDone]) {
    
#line 320
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(OrgApacheHarmonyAwtInternalNlsMessages_getStringWithNSString_(@"awt.4B"));
  }
  if (index_ == ((IOSObjectArray *) nil_chk(points_))->size_) {
    return HarmonyJavaAwtGeomPathIterator_SEG_CLOSE;
  }
  jint j = 0;
  IOSDoubleArray *p = IOSObjectArray_Get(points_, index_);
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(p))->size_; i += 4) {
    *IOSFloatArray_GetRef(nil_chk(coords), j++) = (jfloat) (x_ + IOSDoubleArray_Get(p, i + 0) * width_ + IOSDoubleArray_Get(p, i + 1) * aw_);
    *IOSFloatArray_GetRef(coords, j++) = (jfloat) (y_ + IOSDoubleArray_Get(p, i + 2) * height_ + IOSDoubleArray_Get(p, i + 3) * ah_);
  }
  if (t_ != nil) {
    [t_ transformWithFloatArray:coords withInt:0 withFloatArray:coords withInt:0 withInt:JreIntDiv(j, 2)];
  }
  return IOSIntArray_Get(nil_chk(types_), index_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithHarmonyJavaAwtGeomRoundRectangle2D:withHarmonyJavaAwtGeomRoundRectangle2D:withHarmonyJavaAwtGeomAffineTransform:);
  methods[1].selector = @selector(getWindingRule);
  methods[2].selector = @selector(isDone);
  methods[3].selector = @selector(next);
  methods[4].selector = @selector(currentSegmentWithDoubleArray:);
  methods[5].selector = @selector(currentSegmentWithFloatArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "u_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "points_", "[[D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "types_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "x_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "y_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "width_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "height_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "aw_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ah_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "t_", "LHarmonyJavaAwtGeomAffineTransform;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LHarmonyJavaAwtGeomRoundRectangle2D;LHarmonyJavaAwtGeomRoundRectangle2D;LHarmonyJavaAwtGeomAffineTransform;", "currentSegment", "[D", "[F", "LHarmonyJavaAwtGeomRoundRectangle2D;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomRoundRectangle2D_Iterator = { "Iterator", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x0, 6, 11, 4, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomRoundRectangle2D_Iterator;
}

@end


#line 272
void HarmonyJavaAwtGeomRoundRectangle2D_Iterator_initWithHarmonyJavaAwtGeomRoundRectangle2D_withHarmonyJavaAwtGeomRoundRectangle2D_withHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomRoundRectangle2D_Iterator *self, HarmonyJavaAwtGeomRoundRectangle2D *outer$, HarmonyJavaAwtGeomRoundRectangle2D *rr, HarmonyJavaAwtGeomAffineTransform *at) {
  NSObject_init(self);
  self->u_ =
#line 201
  0.5 - 2.0 / 3.0 * (JavaLangMath_sqrtWithDouble_(2.0) - 1.0);
  self->points_ = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){
#line 206
    0.0, 0.5, 0.0, 0.0 } count:4], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){
#line 207
      1.0, -0.5, 0.0, 0.0 } count:4], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){
#line 208
        1.0, -self->u_, 0.0, 0.0,
#line 209
        1.0, 0.0, 0.0, self->u_, 1.0, 0.0, 0.0, 0.5 } count:12], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1.0, 0.0, 1.0, -0.5 } count:4], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){
#line 210
          1.0, 0.0, 1.0, -self->u_,
#line 211
          1.0, -self->u_, 1.0, 0.0, 1.0, -0.5, 1.0, 0.0 } count:12], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.0, 0.5, 1.0, 0.0 } count:4], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){
#line 212
            0.0, self->u_, 1.0, 0.0,
#line 213
            0.0, 0.0, 1.0, -self->u_, 0.0, 0.0, 1.0, -0.5 } count:12], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.0, 0.0, 0.0, 0.5 } count:4], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){
#line 214
              0.0, 0.0, 0.0, self->u_,
#line 215
              0.0, self->u_, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0 } count:12] } count:9 type:IOSClass_doubleArray(1)];
              self->types_ = [IOSIntArray newArrayWithInts:(jint[]){ HarmonyJavaAwtGeomPathIterator_SEG_MOVETO, HarmonyJavaAwtGeomPathIterator_SEG_LINETO, HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO, HarmonyJavaAwtGeomPathIterator_SEG_LINETO, HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO, HarmonyJavaAwtGeomPathIterator_SEG_LINETO, HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO, HarmonyJavaAwtGeomPathIterator_SEG_LINETO, HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO } count:9];
              
#line 273
              self->x_ = [((HarmonyJavaAwtGeomRoundRectangle2D *) nil_chk(rr)) getX];
              self->y_ = [rr getY];
              self->width_ = [rr getWidth];
              self->height_ = [rr getHeight];
              self->aw_ = JavaLangMath_minWithDouble_withDouble_(self->width_, [rr getArcWidth]);
              self->ah_ = JavaLangMath_minWithDouble_withDouble_(self->height_, [rr getArcHeight]);
              self->t_ = at;
              if (self->width_ < 0.0 || self->height_ < 0.0 || self->aw_ < 0.0 || self->ah_ < 0.0) {
                self->index_ = ((IOSObjectArray *) nil_chk(self->points_))->size_;
              }
            }


#line 272
HarmonyJavaAwtGeomRoundRectangle2D_Iterator *new_HarmonyJavaAwtGeomRoundRectangle2D_Iterator_initWithHarmonyJavaAwtGeomRoundRectangle2D_withHarmonyJavaAwtGeomRoundRectangle2D_withHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomRoundRectangle2D *outer$, HarmonyJavaAwtGeomRoundRectangle2D *rr, HarmonyJavaAwtGeomAffineTransform *at) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomRoundRectangle2D_Iterator, initWithHarmonyJavaAwtGeomRoundRectangle2D_withHarmonyJavaAwtGeomRoundRectangle2D_withHarmonyJavaAwtGeomAffineTransform_, outer$, rr, at)
}


#line 272
HarmonyJavaAwtGeomRoundRectangle2D_Iterator *create_HarmonyJavaAwtGeomRoundRectangle2D_Iterator_initWithHarmonyJavaAwtGeomRoundRectangle2D_withHarmonyJavaAwtGeomRoundRectangle2D_withHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomRoundRectangle2D *outer$, HarmonyJavaAwtGeomRoundRectangle2D *rr, HarmonyJavaAwtGeomAffineTransform *at) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomRoundRectangle2D_Iterator, initWithHarmonyJavaAwtGeomRoundRectangle2D_withHarmonyJavaAwtGeomRoundRectangle2D_withHarmonyJavaAwtGeomAffineTransform_, outer$, rr, at)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomRoundRectangle2D_Iterator)
