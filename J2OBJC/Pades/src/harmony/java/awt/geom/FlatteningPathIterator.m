//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/geom/FlatteningPathIterator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "harmony/java/awt/geom/CubicCurve2D.h"
#include "harmony/java/awt/geom/FlatteningPathIterator.h"
#include "harmony/java/awt/geom/PathIterator.h"
#include "harmony/java/awt/geom/QuadCurve2D.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/util/NoSuchElementException.h"
#include "org/apache/harmony/awt/internal/nls/Messages.h"

#if !__has_feature(objc_arc)
#error "harmony/java/awt/geom/FlatteningPathIterator must be compiled with ARC (-fobjc-arc)"
#endif

/*!
 @brief The default points buffer size
 */
inline jint HarmonyJavaAwtGeomFlatteningPathIterator_get_BUFFER_SIZE(void);
#define HarmonyJavaAwtGeomFlatteningPathIterator_BUFFER_SIZE 16
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtGeomFlatteningPathIterator, BUFFER_SIZE, jint)

/*!
 @brief The default curve subdivision limit
 */
inline jint HarmonyJavaAwtGeomFlatteningPathIterator_get_BUFFER_LIMIT(void);
#define HarmonyJavaAwtGeomFlatteningPathIterator_BUFFER_LIMIT 16
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtGeomFlatteningPathIterator, BUFFER_LIMIT, jint)

/*!
 @brief The points buffer capacity
 */
inline jint HarmonyJavaAwtGeomFlatteningPathIterator_get_BUFFER_CAPACITY(void);
#define HarmonyJavaAwtGeomFlatteningPathIterator_BUFFER_CAPACITY 16
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtGeomFlatteningPathIterator, BUFFER_CAPACITY, jint)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/geom/FlatteningPathIterator.java"


#line 26
@implementation HarmonyJavaAwtGeomFlatteningPathIterator


#line 108
- (instancetype)initWithHarmonyJavaAwtGeomPathIterator:(id<HarmonyJavaAwtGeomPathIterator>)path
                                            withDouble:(jdouble)flatness {
  HarmonyJavaAwtGeomFlatteningPathIterator_initWithHarmonyJavaAwtGeomPathIterator_withDouble_(self, path, flatness);
  return self;
}


#line 112
- (instancetype)initWithHarmonyJavaAwtGeomPathIterator:(id<HarmonyJavaAwtGeomPathIterator>)path
                                            withDouble:(jdouble)flatness
                                               withInt:(jint)limit {
  HarmonyJavaAwtGeomFlatteningPathIterator_initWithHarmonyJavaAwtGeomPathIterator_withDouble_withInt_(self, path, flatness, limit);
  return self;
}


#line 134
- (jdouble)getFlatness {
  return flatness_;
}

- (jint)getRecursionLimit {
  return bufLimit_;
}

- (jint)getWindingRule {
  return [((id<HarmonyJavaAwtGeomPathIterator>) nil_chk(p_)) getWindingRule];
}

- (jboolean)isDone {
  return bufEmpty_ && [((id<HarmonyJavaAwtGeomPathIterator>) nil_chk(p_)) isDone];
}


#line 161
- (void)evaluate {
  if (bufEmpty_) {
    bufType_ = [((id<HarmonyJavaAwtGeomPathIterator>) nil_chk(p_)) currentSegmentWithDoubleArray:coords_];
  }
  
#line 166
  switch (bufType_) {
    case HarmonyJavaAwtGeomPathIterator_SEG_MOVETO:
    case HarmonyJavaAwtGeomPathIterator_SEG_LINETO:
    px_ = IOSDoubleArray_Get(nil_chk(coords_), 0);
    py_ = IOSDoubleArray_Get(coords_, 1);
    break;
    case HarmonyJavaAwtGeomPathIterator_SEG_QUADTO:
    if (bufEmpty_) {
      bufIndex_ -= 6;
      *IOSDoubleArray_GetRef(nil_chk(buf_), bufIndex_ + 0) = px_;
      *IOSDoubleArray_GetRef(buf_, bufIndex_ + 1) = py_;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(coords_, 0, buf_, bufIndex_ + 2, 4);
      bufSubdiv_ = 0;
    }
    
#line 181
    while (bufSubdiv_ < bufLimit_) {
      if (HarmonyJavaAwtGeomQuadCurve2D_getFlatnessSqWithDoubleArray_withInt_(buf_, bufIndex_) < flatness2_) {
        break;
      }
      
#line 187
      if (bufIndex_ <= 4) {
        IOSDoubleArray *tmp = [IOSDoubleArray newArrayWithLength:bufSize_ + HarmonyJavaAwtGeomFlatteningPathIterator_BUFFER_CAPACITY];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, bufIndex_, tmp, bufIndex_ + HarmonyJavaAwtGeomFlatteningPathIterator_BUFFER_CAPACITY, bufSize_ - bufIndex_);
        buf_ = tmp;
        bufSize_ += HarmonyJavaAwtGeomFlatteningPathIterator_BUFFER_CAPACITY;
        bufIndex_ += HarmonyJavaAwtGeomFlatteningPathIterator_BUFFER_CAPACITY;
      }
      
#line 195
      HarmonyJavaAwtGeomQuadCurve2D_subdivideWithDoubleArray_withInt_withDoubleArray_withInt_withDoubleArray_withInt_(buf_, bufIndex_, buf_, bufIndex_ - 4, buf_, bufIndex_);
      
#line 197
      bufIndex_ -= 4;
      bufSubdiv_++;
    }
    
#line 201
    bufIndex_ += 4;
    px_ = IOSDoubleArray_Get(nil_chk(buf_), bufIndex_);
    py_ = IOSDoubleArray_Get(buf_, bufIndex_ + 1);
    
#line 205
    bufEmpty_ = (bufIndex_ == bufSize_ - 2);
    if (bufEmpty_) {
      bufIndex_ = bufSize_;
      bufType_ = HarmonyJavaAwtGeomPathIterator_SEG_LINETO;
    }
    break;
    case HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO:
    if (bufEmpty_) {
      bufIndex_ -= 8;
      *IOSDoubleArray_GetRef(nil_chk(buf_), bufIndex_ + 0) = px_;
      *IOSDoubleArray_GetRef(buf_, bufIndex_ + 1) = py_;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(coords_, 0, buf_, bufIndex_ + 2, 6);
      bufSubdiv_ = 0;
    }
    
#line 220
    while (bufSubdiv_ < bufLimit_) {
      if (HarmonyJavaAwtGeomCubicCurve2D_getFlatnessSqWithDoubleArray_withInt_(buf_, bufIndex_) < flatness2_) {
        break;
      }
      
#line 226
      if (bufIndex_ <= 6) {
        IOSDoubleArray *tmp = [IOSDoubleArray newArrayWithLength:bufSize_ + HarmonyJavaAwtGeomFlatteningPathIterator_BUFFER_CAPACITY];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, bufIndex_, tmp, bufIndex_ + HarmonyJavaAwtGeomFlatteningPathIterator_BUFFER_CAPACITY, bufSize_ - bufIndex_);
        buf_ = tmp;
        bufSize_ += HarmonyJavaAwtGeomFlatteningPathIterator_BUFFER_CAPACITY;
        bufIndex_ += HarmonyJavaAwtGeomFlatteningPathIterator_BUFFER_CAPACITY;
      }
      
#line 234
      HarmonyJavaAwtGeomCubicCurve2D_subdivideWithDoubleArray_withInt_withDoubleArray_withInt_withDoubleArray_withInt_(buf_, bufIndex_, buf_, bufIndex_ - 6, buf_, bufIndex_);
      
#line 236
      bufIndex_ -= 6;
      bufSubdiv_++;
    }
    
#line 240
    bufIndex_ += 6;
    px_ = IOSDoubleArray_Get(nil_chk(buf_), bufIndex_);
    py_ = IOSDoubleArray_Get(buf_, bufIndex_ + 1);
    
#line 244
    bufEmpty_ = (bufIndex_ == bufSize_ - 2);
    if (bufEmpty_) {
      bufIndex_ = bufSize_;
      bufType_ = HarmonyJavaAwtGeomPathIterator_SEG_LINETO;
    }
    break;
  }
}


#line 254
- (void)next {
  if (bufEmpty_) {
    [((id<HarmonyJavaAwtGeomPathIterator>) nil_chk(p_)) next];
  }
}

- (jint)currentSegmentWithFloatArray:(IOSFloatArray *)coords {
  if ([self isDone]) {
    
#line 263
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(OrgApacheHarmonyAwtInternalNlsMessages_getStringWithNSString_(@"awt.4Bx"));
  }
  [self evaluate];
  jint type = bufType_;
  if (type != HarmonyJavaAwtGeomPathIterator_SEG_CLOSE) {
    *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) px_;
    *IOSFloatArray_GetRef(coords, 1) = (jfloat) py_;
    if (type != HarmonyJavaAwtGeomPathIterator_SEG_MOVETO) {
      type = HarmonyJavaAwtGeomPathIterator_SEG_LINETO;
    }
  }
  return type;
}


#line 277
- (jint)currentSegmentWithDoubleArray:(IOSDoubleArray *)coords {
  if ([self isDone]) {
    
#line 280
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(OrgApacheHarmonyAwtInternalNlsMessages_getStringWithNSString_(@"awt.4B"));
  }
  [self evaluate];
  jint type = bufType_;
  if (type != HarmonyJavaAwtGeomPathIterator_SEG_CLOSE) {
    *IOSDoubleArray_GetRef(nil_chk(coords), 0) = px_;
    *IOSDoubleArray_GetRef(coords, 1) = py_;
    if (type != HarmonyJavaAwtGeomPathIterator_SEG_MOVETO) {
      type = HarmonyJavaAwtGeomPathIterator_SEG_LINETO;
    }
  }
  return type;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithHarmonyJavaAwtGeomPathIterator:withDouble:);
  methods[1].selector = @selector(initWithHarmonyJavaAwtGeomPathIterator:withDouble:withInt:);
  methods[2].selector = @selector(getFlatness);
  methods[3].selector = @selector(getRecursionLimit);
  methods[4].selector = @selector(getWindingRule);
  methods[5].selector = @selector(isDone);
  methods[6].selector = @selector(evaluate);
  methods[7].selector = @selector(next);
  methods[8].selector = @selector(currentSegmentWithFloatArray:);
  methods[9].selector = @selector(currentSegmentWithDoubleArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BUFFER_SIZE", "I", .constantValue.asInt = HarmonyJavaAwtGeomFlatteningPathIterator_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "BUFFER_LIMIT", "I", .constantValue.asInt = HarmonyJavaAwtGeomFlatteningPathIterator_BUFFER_LIMIT, 0x1a, -1, -1, -1, -1 },
    { "BUFFER_CAPACITY", "I", .constantValue.asInt = HarmonyJavaAwtGeomFlatteningPathIterator_BUFFER_CAPACITY, 0x1a, -1, -1, -1, -1 },
    { "bufType_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bufLimit_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bufSize_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bufIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bufSubdiv_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "buf_", "[D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bufEmpty_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p_", "LHarmonyJavaAwtGeomPathIterator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "flatness_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "flatness2_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "px_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "py_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "coords_", "[D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LHarmonyJavaAwtGeomPathIterator;D", "LHarmonyJavaAwtGeomPathIterator;DI", "currentSegment", "[F", "[D" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomFlatteningPathIterator = { "FlatteningPathIterator", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x1, 10, 16, -1, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomFlatteningPathIterator;
}

@end


#line 108
void HarmonyJavaAwtGeomFlatteningPathIterator_initWithHarmonyJavaAwtGeomPathIterator_withDouble_(HarmonyJavaAwtGeomFlatteningPathIterator *self, id<HarmonyJavaAwtGeomPathIterator> path, jdouble flatness) {
  HarmonyJavaAwtGeomFlatteningPathIterator_initWithHarmonyJavaAwtGeomPathIterator_withDouble_withInt_(self, path, flatness, HarmonyJavaAwtGeomFlatteningPathIterator_BUFFER_LIMIT);
}


#line 108
HarmonyJavaAwtGeomFlatteningPathIterator *new_HarmonyJavaAwtGeomFlatteningPathIterator_initWithHarmonyJavaAwtGeomPathIterator_withDouble_(id<HarmonyJavaAwtGeomPathIterator> path, jdouble flatness) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomFlatteningPathIterator, initWithHarmonyJavaAwtGeomPathIterator_withDouble_, path, flatness)
}


#line 108
HarmonyJavaAwtGeomFlatteningPathIterator *create_HarmonyJavaAwtGeomFlatteningPathIterator_initWithHarmonyJavaAwtGeomPathIterator_withDouble_(id<HarmonyJavaAwtGeomPathIterator> path, jdouble flatness) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomFlatteningPathIterator, initWithHarmonyJavaAwtGeomPathIterator_withDouble_, path, flatness)
}

void HarmonyJavaAwtGeomFlatteningPathIterator_initWithHarmonyJavaAwtGeomPathIterator_withDouble_withInt_(HarmonyJavaAwtGeomFlatteningPathIterator *self, id<HarmonyJavaAwtGeomPathIterator> path, jdouble flatness, jint limit) {
  NSObject_init(self);
  self->bufEmpty_ =
#line 76
  true;
  self->coords_ = [IOSDoubleArray newArrayWithLength:
#line 106
  6];
  
#line 113
  if (flatness < 0.0) {
    
#line 115
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(OrgApacheHarmonyAwtInternalNlsMessages_getStringWithNSString_(@"awt.206"));
  }
  if (limit < 0) {
    
#line 119
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(OrgApacheHarmonyAwtInternalNlsMessages_getStringWithNSString_(@"awt.207"));
  }
  if (path == nil) {
    
#line 123
    @throw new_JavaLangNullPointerException_initWithNSString_(OrgApacheHarmonyAwtInternalNlsMessages_getStringWithNSString_(@"awt.208"));
  }
  self->p_ = path;
  self->flatness_ = flatness;
  self->flatness2_ = flatness * flatness;
  self->bufLimit_ = limit;
  self->bufSize_ = JavaLangMath_minWithInt_withInt_(self->bufLimit_, HarmonyJavaAwtGeomFlatteningPathIterator_BUFFER_SIZE);
  self->buf_ = [IOSDoubleArray newArrayWithLength:self->bufSize_];
  self->bufIndex_ = self->bufSize_;
}


#line 112
HarmonyJavaAwtGeomFlatteningPathIterator *new_HarmonyJavaAwtGeomFlatteningPathIterator_initWithHarmonyJavaAwtGeomPathIterator_withDouble_withInt_(id<HarmonyJavaAwtGeomPathIterator> path, jdouble flatness, jint limit) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomFlatteningPathIterator, initWithHarmonyJavaAwtGeomPathIterator_withDouble_withInt_, path, flatness, limit)
}


#line 112
HarmonyJavaAwtGeomFlatteningPathIterator *create_HarmonyJavaAwtGeomFlatteningPathIterator_initWithHarmonyJavaAwtGeomPathIterator_withDouble_withInt_(id<HarmonyJavaAwtGeomPathIterator> path, jdouble flatness, jint limit) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomFlatteningPathIterator, initWithHarmonyJavaAwtGeomPathIterator_withDouble_withInt_, path, flatness, limit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomFlatteningPathIterator)
