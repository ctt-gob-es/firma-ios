//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cms/SignerInformation.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1EncodableVector.h"
#include "org/bouncycastle/asn1/ASN1Encoding.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1OctetString.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1Set.h"
#include "org/bouncycastle/asn1/DERNull.h"
#include "org/bouncycastle/asn1/DERSet.h"
#include "org/bouncycastle/asn1/cms/Attribute.h"
#include "org/bouncycastle/asn1/cms/AttributeTable.h"
#include "org/bouncycastle/asn1/cms/CMSAlgorithmProtection.h"
#include "org/bouncycastle/asn1/cms/CMSAttributes.h"
#include "org/bouncycastle/asn1/cms/IssuerAndSerialNumber.h"
#include "org/bouncycastle/asn1/cms/SignerIdentifier.h"
#include "org/bouncycastle/asn1/cms/SignerInfo.h"
#include "org/bouncycastle/asn1/cms/Time.h"
#include "org/bouncycastle/asn1/x500/X500Name.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/asn1/x509/DigestInfo.h"
#include "org/bouncycastle/cert/X509CertificateHolder.h"
#include "org/bouncycastle/cms/CMSException.h"
#include "org/bouncycastle/cms/CMSProcessable.h"
#include "org/bouncycastle/cms/CMSProcessableByteArray.h"
#include "org/bouncycastle/cms/CMSSignedHelper.h"
#include "org/bouncycastle/cms/CMSSignerDigestMismatchException.h"
#include "org/bouncycastle/cms/CMSUtils.h"
#include "org/bouncycastle/cms/CMSVerifierCertificateNotValidException.h"
#include "org/bouncycastle/cms/SignerId.h"
#include "org/bouncycastle/cms/SignerInformation.h"
#include "org/bouncycastle/cms/SignerInformationStore.h"
#include "org/bouncycastle/cms/SignerInformationVerifier.h"
#include "org/bouncycastle/operator/ContentVerifier.h"
#include "org/bouncycastle/operator/DigestCalculator.h"
#include "org/bouncycastle/operator/OperatorCreationException.h"
#include "org/bouncycastle/operator/RawContentVerifier.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/io/TeeOutputStream.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/cms/SignerInformation must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCmsSignerInformation () {
 @public
  OrgBouncycastleCmsSignerId *sid_;
  id<OrgBouncycastleCmsCMSProcessable> content_;
  IOSByteArray *signature_;
  OrgBouncycastleAsn1ASN1ObjectIdentifier *contentType_;
  jboolean isCounterSignature_;
  OrgBouncycastleAsn1CmsAttributeTable *signedAttributeValues_;
  OrgBouncycastleAsn1CmsAttributeTable *unsignedAttributeValues_;
  IOSByteArray *resultDigest_;
}

- (IOSByteArray *)encodeObjWithOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)obj;

- (jboolean)doVerifyWithOrgBouncycastleCmsSignerInformationVerifier:(OrgBouncycastleCmsSignerInformationVerifier *)verifier;

/*!
 @brief RFC 3852 11.1 Check the content-type attribute is correct
 @throw CMSExceptionwhen content-type was invalid.
 */
- (void)verifyContentTypeAttributeValue;

/*!
 @brief RFC 3852 11.2 Check the message-digest attribute is correct
 @throw CMSExceptionwhen message-digest attribute was rejected
 */
- (void)verifyMessageDigestAttribute;

/*!
 @brief RFC 6211 Validate Algorithm Identifier protection attribute if present
 @param signedAttrTable signed attributes
 @throw CMSExceptionwhen cmsAlgorihmProtect attribute was rejected
 */
- (void)verifyAlgorithmIdentifierProtectionAttributeWithOrgBouncycastleAsn1CmsAttributeTable:(OrgBouncycastleAsn1CmsAttributeTable *)signedAttrTable;

/*!
 @brief RFC 3852 11.4 Validate countersignature attribute(s)
 @param signedAttrTable signed attributes
 @throw CMSExceptionwhen countersignature attribute was rejected
 */
- (void)verifyCounterSignatureAttributeWithOrgBouncycastleAsn1CmsAttributeTable:(OrgBouncycastleAsn1CmsAttributeTable *)signedAttrTable;

- (OrgBouncycastleAsn1ASN1Primitive *)getSingleValuedSignedAttributeWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)attrOID
                                                                                                   withNSString:(NSString *)printableName;

- (OrgBouncycastleAsn1CmsTime *)getSigningTime;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCmsSignerInformation, sid_, OrgBouncycastleCmsSignerId *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCmsSignerInformation, content_, id<OrgBouncycastleCmsCMSProcessable>)
J2OBJC_FIELD_SETTER(OrgBouncycastleCmsSignerInformation, signature_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCmsSignerInformation, contentType_, OrgBouncycastleAsn1ASN1ObjectIdentifier *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCmsSignerInformation, signedAttributeValues_, OrgBouncycastleAsn1CmsAttributeTable *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCmsSignerInformation, unsignedAttributeValues_, OrgBouncycastleAsn1CmsAttributeTable *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCmsSignerInformation, resultDigest_, IOSByteArray *)

__attribute__((unused)) static IOSByteArray *OrgBouncycastleCmsSignerInformation_encodeObjWithOrgBouncycastleAsn1ASN1Encodable_(OrgBouncycastleCmsSignerInformation *self, id<OrgBouncycastleAsn1ASN1Encodable> obj);

__attribute__((unused)) static jboolean OrgBouncycastleCmsSignerInformation_doVerifyWithOrgBouncycastleCmsSignerInformationVerifier_(OrgBouncycastleCmsSignerInformation *self, OrgBouncycastleCmsSignerInformationVerifier *verifier);

__attribute__((unused)) static void OrgBouncycastleCmsSignerInformation_verifyContentTypeAttributeValue(OrgBouncycastleCmsSignerInformation *self);

__attribute__((unused)) static void OrgBouncycastleCmsSignerInformation_verifyMessageDigestAttribute(OrgBouncycastleCmsSignerInformation *self);

__attribute__((unused)) static void OrgBouncycastleCmsSignerInformation_verifyAlgorithmIdentifierProtectionAttributeWithOrgBouncycastleAsn1CmsAttributeTable_(OrgBouncycastleCmsSignerInformation *self, OrgBouncycastleAsn1CmsAttributeTable *signedAttrTable);

__attribute__((unused)) static void OrgBouncycastleCmsSignerInformation_verifyCounterSignatureAttributeWithOrgBouncycastleAsn1CmsAttributeTable_(OrgBouncycastleCmsSignerInformation *self, OrgBouncycastleAsn1CmsAttributeTable *signedAttrTable);

__attribute__((unused)) static OrgBouncycastleAsn1ASN1Primitive *OrgBouncycastleCmsSignerInformation_getSingleValuedSignedAttributeWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withNSString_(OrgBouncycastleCmsSignerInformation *self, OrgBouncycastleAsn1ASN1ObjectIdentifier *attrOID, NSString *printableName);

__attribute__((unused)) static OrgBouncycastleAsn1CmsTime *OrgBouncycastleCmsSignerInformation_getSigningTime(OrgBouncycastleCmsSignerInformation *self);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cms/SignerInformation.java"


#line 40
@implementation OrgBouncycastleCmsSignerInformation


#line 59
- (instancetype)initWithOrgBouncycastleAsn1CmsSignerInfo:(OrgBouncycastleAsn1CmsSignerInfo *)info
             withOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)contentType
                    withOrgBouncycastleCmsCMSProcessable:(id<OrgBouncycastleCmsCMSProcessable>)content
                                           withByteArray:(IOSByteArray *)resultDigest {
  OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleAsn1CmsSignerInfo_withOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleCmsCMSProcessable_withByteArray_(self, info, contentType, content, resultDigest);
  return self;
}


#line 101
- (instancetype)initWithOrgBouncycastleCmsSignerInformation:(OrgBouncycastleCmsSignerInformation *)baseInfo {
  OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleCmsSignerInformation_(self, baseInfo);
  return self;
}


#line 114
- (instancetype)initWithOrgBouncycastleCmsSignerInformation:(OrgBouncycastleCmsSignerInformation *)baseInfo
                       withOrgBouncycastleAsn1CmsSignerInfo:(OrgBouncycastleAsn1CmsSignerInfo *)info {
  OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleCmsSignerInformation_withOrgBouncycastleAsn1CmsSignerInfo_(self, baseInfo, info);
  return self;
}


#line 131
- (jboolean)isCounterSignature {
  
#line 133
  return isCounterSignature_;
}


#line 136
- (OrgBouncycastleAsn1ASN1ObjectIdentifier *)getContentType {
  
#line 138
  return self->contentType_;
}


#line 141
- (IOSByteArray *)encodeObjWithOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)obj {
  return OrgBouncycastleCmsSignerInformation_encodeObjWithOrgBouncycastleAsn1ASN1Encodable_(self, obj);
}


#line 153
- (OrgBouncycastleCmsSignerId *)getSID {
  
#line 155
  return sid_;
}


#line 161
- (jint)getVersion {
  
#line 163
  return [((OrgBouncycastleAsn1ASN1Integer *) nil_chk([((OrgBouncycastleAsn1CmsSignerInfo *) nil_chk(info_)) getVersion])) intValueExact];
}


#line 166
- (OrgBouncycastleAsn1X509AlgorithmIdentifier *)getDigestAlgorithmID {
  
#line 168
  return digestAlgorithm_;
}


#line 174
- (NSString *)getDigestAlgOID {
  
#line 176
  return [((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(digestAlgorithm_)) getAlgorithm])) getId];
}


#line 182
- (IOSByteArray *)getDigestAlgParams {
  
#line 184
  @try {
    
#line 186
    return OrgBouncycastleCmsSignerInformation_encodeObjWithOrgBouncycastleAsn1ASN1Encodable_(self, [((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(digestAlgorithm_)) getParameters]);
  }
  @catch (JavaLangException *e) {
    
#line 190
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"exception getting digest parameters ", e));
  }
}

- (IOSByteArray *)getContentDigest {
  
#line 199
  if (resultDigest_ == nil) {
    
#line 201
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"method can only be called after verify.");
  }
  
#line 204
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(resultDigest_);
}

- (NSString *)getEncryptionAlgOID {
  
#line 212
  return [((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(encryptionAlgorithm_)) getAlgorithm])) getId];
}


#line 219
- (IOSByteArray *)getEncryptionAlgParams {
  
#line 221
  @try {
    
#line 223
    return OrgBouncycastleCmsSignerInformation_encodeObjWithOrgBouncycastleAsn1ASN1Encodable_(self, [((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(encryptionAlgorithm_)) getParameters]);
  }
  @catch (JavaLangException *e) {
    
#line 227
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"exception getting encryption parameters ", e));
  }
}


#line 235
- (OrgBouncycastleAsn1CmsAttributeTable *)getSignedAttributes {
  
#line 237
  if (signedAttributeSet_ != nil && signedAttributeValues_ == nil) {
    
#line 239
    signedAttributeValues_ = new_OrgBouncycastleAsn1CmsAttributeTable_initWithOrgBouncycastleAsn1ASN1Set_(signedAttributeSet_);
  }
  
#line 242
  return signedAttributeValues_;
}


#line 249
- (OrgBouncycastleAsn1CmsAttributeTable *)getUnsignedAttributes {
  
#line 251
  if (unsignedAttributeSet_ != nil && unsignedAttributeValues_ == nil) {
    
#line 253
    unsignedAttributeValues_ = new_OrgBouncycastleAsn1CmsAttributeTable_initWithOrgBouncycastleAsn1ASN1Set_(unsignedAttributeSet_);
  }
  
#line 256
  return unsignedAttributeValues_;
}

- (IOSByteArray *)getSignature {
  
#line 264
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(signature_);
}


#line 271
- (OrgBouncycastleCmsSignerInformationStore *)getCounterSignatures {
  
#line 280
  OrgBouncycastleAsn1CmsAttributeTable *unsignedAttributeTable = [self getUnsignedAttributes];
  if (unsignedAttributeTable == nil) {
    
#line 283
    return new_OrgBouncycastleCmsSignerInformationStore_initWithJavaUtilCollection_(new_JavaUtilArrayList_initWithInt_(0));
  }
  
#line 286
  id<JavaUtilList> counterSignatures = new_JavaUtilArrayList_init();
  
#line 293
  OrgBouncycastleAsn1ASN1EncodableVector *allCSAttrs = [unsignedAttributeTable getAllWithOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgBouncycastleAsn1CmsCMSAttributes, counterSignature)];
  
#line 295
  for (jint i = 0; i < [((OrgBouncycastleAsn1ASN1EncodableVector *) nil_chk(allCSAttrs)) size]; ++i) {
    
#line 297
    OrgBouncycastleAsn1CmsAttribute *counterSignatureAttribute = (OrgBouncycastleAsn1CmsAttribute *) cast_chk([allCSAttrs getWithInt:i], [OrgBouncycastleAsn1CmsAttribute class]);
    
#line 304
    OrgBouncycastleAsn1ASN1Set *values = [((OrgBouncycastleAsn1CmsAttribute *) nil_chk(counterSignatureAttribute)) getAttrValues];
    if ([((OrgBouncycastleAsn1ASN1Set *) nil_chk(values)) size] < 1) {
    }
    
#line 310
    for (id<JavaUtilEnumeration> en = [values getObjects]; [((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]; ) {
      
#line 326
      OrgBouncycastleAsn1CmsSignerInfo *si = OrgBouncycastleAsn1CmsSignerInfo_getInstanceWithId_([en nextElement]);
      
#line 328
      [counterSignatures addWithId:new_OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleAsn1CmsSignerInfo_withOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleCmsCMSProcessable_withByteArray_(si, nil, new_OrgBouncycastleCmsCMSProcessableByteArray_initWithByteArray_([self getSignature]), nil)];
    }
  }
  
#line 332
  return new_OrgBouncycastleCmsSignerInformationStore_initWithJavaUtilCollection_(counterSignatures);
}


#line 340
- (IOSByteArray *)getEncodedSignedAttributes {
  
#line 343
  if (signedAttributeSet_ != nil) {
    
#line 345
    return [signedAttributeSet_ getEncodedWithNSString:OrgBouncycastleAsn1ASN1Encoding_DER];
  }
  
#line 348
  return nil;
}


#line 351
- (jboolean)doVerifyWithOrgBouncycastleCmsSignerInformationVerifier:(OrgBouncycastleCmsSignerInformationVerifier *)verifier {
  return OrgBouncycastleCmsSignerInformation_doVerifyWithOrgBouncycastleCmsSignerInformationVerifier_(self, verifier);
}


#line 485
- (void)verifyContentTypeAttributeValue {
  OrgBouncycastleCmsSignerInformation_verifyContentTypeAttributeValue(self);
}


#line 523
- (void)verifyMessageDigestAttribute {
  OrgBouncycastleCmsSignerInformation_verifyMessageDigestAttribute(self);
}


#line 557
- (void)verifyAlgorithmIdentifierProtectionAttributeWithOrgBouncycastleAsn1CmsAttributeTable:(OrgBouncycastleAsn1CmsAttributeTable *)signedAttrTable {
  OrgBouncycastleCmsSignerInformation_verifyAlgorithmIdentifierProtectionAttributeWithOrgBouncycastleAsn1CmsAttributeTable_(self, signedAttrTable);
}


#line 602
- (void)verifyCounterSignatureAttributeWithOrgBouncycastleAsn1CmsAttributeTable:(OrgBouncycastleAsn1CmsAttributeTable *)signedAttrTable {
  OrgBouncycastleCmsSignerInformation_verifyCounterSignatureAttributeWithOrgBouncycastleAsn1CmsAttributeTable_(self, signedAttrTable);
}


#line 637
- (jboolean)verifyWithOrgBouncycastleCmsSignerInformationVerifier:(OrgBouncycastleCmsSignerInformationVerifier *)verifier {
  
#line 640
  OrgBouncycastleAsn1CmsTime *signingTime = OrgBouncycastleCmsSignerInformation_getSigningTime(self);
  
#line 642
  if ([((OrgBouncycastleCmsSignerInformationVerifier *) nil_chk(verifier)) hasAssociatedCertificate]) {
    
#line 644
    if (signingTime != nil) {
      
#line 646
      OrgBouncycastleCertX509CertificateHolder *dcv = [verifier getAssociatedCertificate];
      
#line 648
      if (![((OrgBouncycastleCertX509CertificateHolder *) nil_chk(dcv)) isValidOnWithJavaUtilDate:[signingTime getDate]]) {
        
#line 650
        @throw new_OrgBouncycastleCmsCMSVerifierCertificateNotValidException_initWithNSString_(@"verifier not valid at signingTime");
      }
    }
  }
  
#line 655
  return OrgBouncycastleCmsSignerInformation_doVerifyWithOrgBouncycastleCmsSignerInformationVerifier_(self, verifier);
}


#line 663
- (OrgBouncycastleAsn1CmsSignerInfo *)toASN1Structure {
  
#line 665
  return info_;
}


#line 668
- (OrgBouncycastleAsn1ASN1Primitive *)getSingleValuedSignedAttributeWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)attrOID
                                                                                                   withNSString:(NSString *)printableName {
  return OrgBouncycastleCmsSignerInformation_getSingleValuedSignedAttributeWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withNSString_(self, attrOID, printableName);
}


#line 709
- (OrgBouncycastleAsn1CmsTime *)getSigningTime {
  return OrgBouncycastleCmsSignerInformation_getSigningTime(self);
}


#line 739
+ (OrgBouncycastleCmsSignerInformation *)replaceUnsignedAttributesWithOrgBouncycastleCmsSignerInformation:(OrgBouncycastleCmsSignerInformation *)signerInformation
                                                                 withOrgBouncycastleAsn1CmsAttributeTable:(OrgBouncycastleAsn1CmsAttributeTable *)unsignedAttributes {
  return OrgBouncycastleCmsSignerInformation_replaceUnsignedAttributesWithOrgBouncycastleCmsSignerInformation_withOrgBouncycastleAsn1CmsAttributeTable_(signerInformation, unsignedAttributes);
}


#line 765
+ (OrgBouncycastleCmsSignerInformation *)addCounterSignersWithOrgBouncycastleCmsSignerInformation:(OrgBouncycastleCmsSignerInformation *)signerInformation
                                                     withOrgBouncycastleCmsSignerInformationStore:(OrgBouncycastleCmsSignerInformationStore *)counterSigners {
  return OrgBouncycastleCmsSignerInformation_addCounterSignersWithOrgBouncycastleCmsSignerInformation_withOrgBouncycastleCmsSignerInformationStore_(signerInformation, counterSigners);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 3, 4, 5, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCmsSignerId;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509AlgorithmIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1CmsAttributeTable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1CmsAttributeTable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCmsSignerInformationStore;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "Z", 0x2, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, 8, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 10, 8, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 7, 8, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1CmsSignerInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x2, 13, 14, 8, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1CmsTime;", 0x2, -1, -1, 8, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCmsSignerInformation;", 0x9, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCmsSignerInformation;", 0x9, 17, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleAsn1CmsSignerInfo:withOrgBouncycastleAsn1ASN1ObjectIdentifier:withOrgBouncycastleCmsCMSProcessable:withByteArray:);
  methods[1].selector = @selector(initWithOrgBouncycastleCmsSignerInformation:);
  methods[2].selector = @selector(initWithOrgBouncycastleCmsSignerInformation:withOrgBouncycastleAsn1CmsSignerInfo:);
  methods[3].selector = @selector(isCounterSignature);
  methods[4].selector = @selector(getContentType);
  methods[5].selector = @selector(encodeObjWithOrgBouncycastleAsn1ASN1Encodable:);
  methods[6].selector = @selector(getSID);
  methods[7].selector = @selector(getVersion);
  methods[8].selector = @selector(getDigestAlgorithmID);
  methods[9].selector = @selector(getDigestAlgOID);
  methods[10].selector = @selector(getDigestAlgParams);
  methods[11].selector = @selector(getContentDigest);
  methods[12].selector = @selector(getEncryptionAlgOID);
  methods[13].selector = @selector(getEncryptionAlgParams);
  methods[14].selector = @selector(getSignedAttributes);
  methods[15].selector = @selector(getUnsignedAttributes);
  methods[16].selector = @selector(getSignature);
  methods[17].selector = @selector(getCounterSignatures);
  methods[18].selector = @selector(getEncodedSignedAttributes);
  methods[19].selector = @selector(doVerifyWithOrgBouncycastleCmsSignerInformationVerifier:);
  methods[20].selector = @selector(verifyContentTypeAttributeValue);
  methods[21].selector = @selector(verifyMessageDigestAttribute);
  methods[22].selector = @selector(verifyAlgorithmIdentifierProtectionAttributeWithOrgBouncycastleAsn1CmsAttributeTable:);
  methods[23].selector = @selector(verifyCounterSignatureAttributeWithOrgBouncycastleAsn1CmsAttributeTable:);
  methods[24].selector = @selector(verifyWithOrgBouncycastleCmsSignerInformationVerifier:);
  methods[25].selector = @selector(toASN1Structure);
  methods[26].selector = @selector(getSingleValuedSignedAttributeWithOrgBouncycastleAsn1ASN1ObjectIdentifier:withNSString:);
  methods[27].selector = @selector(getSigningTime);
  methods[28].selector = @selector(replaceUnsignedAttributesWithOrgBouncycastleCmsSignerInformation:withOrgBouncycastleAsn1CmsAttributeTable:);
  methods[29].selector = @selector(addCounterSignersWithOrgBouncycastleCmsSignerInformation:withOrgBouncycastleCmsSignerInformationStore:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sid_", "LOrgBouncycastleCmsSignerId;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "content_", "LOrgBouncycastleCmsCMSProcessable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "signature_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "contentType_", "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isCounterSignature_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "signedAttributeValues_", "LOrgBouncycastleAsn1CmsAttributeTable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "unsignedAttributeValues_", "LOrgBouncycastleAsn1CmsAttributeTable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "resultDigest_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "info_", "LOrgBouncycastleAsn1CmsSignerInfo;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "digestAlgorithm_", "LOrgBouncycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "encryptionAlgorithm_", "LOrgBouncycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "signedAttributeSet_", "LOrgBouncycastleAsn1ASN1Set;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "unsignedAttributeSet_", "LOrgBouncycastleAsn1ASN1Set;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleAsn1CmsSignerInfo;LOrgBouncycastleAsn1ASN1ObjectIdentifier;LOrgBouncycastleCmsCMSProcessable;[B", "LOrgBouncycastleCmsSignerInformation;", "LOrgBouncycastleCmsSignerInformation;LOrgBouncycastleAsn1CmsSignerInfo;", "encodeObj", "LOrgBouncycastleAsn1ASN1Encodable;", "LJavaIoIOException;", "doVerify", "LOrgBouncycastleCmsSignerInformationVerifier;", "LOrgBouncycastleCmsCMSException;", "verifyAlgorithmIdentifierProtectionAttribute", "LOrgBouncycastleAsn1CmsAttributeTable;", "verifyCounterSignatureAttribute", "verify", "getSingleValuedSignedAttribute", "LOrgBouncycastleAsn1ASN1ObjectIdentifier;LNSString;", "replaceUnsignedAttributes", "LOrgBouncycastleCmsSignerInformation;LOrgBouncycastleAsn1CmsAttributeTable;", "addCounterSigners", "LOrgBouncycastleCmsSignerInformation;LOrgBouncycastleCmsSignerInformationStore;" };
  static const J2ObjcClassInfo _OrgBouncycastleCmsSignerInformation = { "SignerInformation", "org.bouncycastle.cms", ptrTable, methods, fields, 7, 0x1, 30, 13, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCmsSignerInformation;
}

@end


#line 59
void OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleAsn1CmsSignerInfo_withOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleCmsCMSProcessable_withByteArray_(OrgBouncycastleCmsSignerInformation *self, OrgBouncycastleAsn1CmsSignerInfo *info, OrgBouncycastleAsn1ASN1ObjectIdentifier *contentType, id<OrgBouncycastleCmsCMSProcessable> content, IOSByteArray *resultDigest) {
  NSObject_init(self);
  
#line 65
  self->info_ = info;
  self->contentType_ = contentType;
  self->isCounterSignature_ = (contentType == nil);
  
#line 69
  OrgBouncycastleAsn1CmsSignerIdentifier *s = [((OrgBouncycastleAsn1CmsSignerInfo *) nil_chk(info)) getSID];
  
#line 71
  if ([((OrgBouncycastleAsn1CmsSignerIdentifier *) nil_chk(s)) isTagged]) {
    
#line 73
    OrgBouncycastleAsn1ASN1OctetString *octs = OrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([s getId]);
    
#line 75
    self->sid_ = new_OrgBouncycastleCmsSignerId_initWithByteArray_([((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(octs)) getOctets]);
  }
  else {
    
#line 79
    OrgBouncycastleAsn1CmsIssuerAndSerialNumber *iAnds = OrgBouncycastleAsn1CmsIssuerAndSerialNumber_getInstanceWithId_([s getId]);
    
#line 81
    self->sid_ = new_OrgBouncycastleCmsSignerId_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_([((OrgBouncycastleAsn1CmsIssuerAndSerialNumber *) nil_chk(iAnds)) getName], [((OrgBouncycastleAsn1ASN1Integer *) nil_chk([iAnds getSerialNumber])) getValue]);
  }
  
#line 84
  self->digestAlgorithm_ = [info getDigestAlgorithm];
  self->signedAttributeSet_ = [info getAuthenticatedAttributes];
  self->unsignedAttributeSet_ = [info getUnauthenticatedAttributes];
  self->encryptionAlgorithm_ = [info getDigestEncryptionAlgorithm];
  self->signature_ = [((OrgBouncycastleAsn1ASN1OctetString *) nil_chk([info getEncryptedDigest])) getOctets];
  
#line 90
  self->content_ = content;
  self->resultDigest_ = resultDigest;
}


#line 59
OrgBouncycastleCmsSignerInformation *new_OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleAsn1CmsSignerInfo_withOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleCmsCMSProcessable_withByteArray_(OrgBouncycastleAsn1CmsSignerInfo *info, OrgBouncycastleAsn1ASN1ObjectIdentifier *contentType, id<OrgBouncycastleCmsCMSProcessable> content, IOSByteArray *resultDigest) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCmsSignerInformation, initWithOrgBouncycastleAsn1CmsSignerInfo_withOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleCmsCMSProcessable_withByteArray_, info, contentType, content, resultDigest)
}


#line 59
OrgBouncycastleCmsSignerInformation *create_OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleAsn1CmsSignerInfo_withOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleCmsCMSProcessable_withByteArray_(OrgBouncycastleAsn1CmsSignerInfo *info, OrgBouncycastleAsn1ASN1ObjectIdentifier *contentType, id<OrgBouncycastleCmsCMSProcessable> content, IOSByteArray *resultDigest) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCmsSignerInformation, initWithOrgBouncycastleAsn1CmsSignerInfo_withOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleCmsCMSProcessable_withByteArray_, info, contentType, content, resultDigest)
}


#line 101
void OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleCmsSignerInformation_(OrgBouncycastleCmsSignerInformation *self, OrgBouncycastleCmsSignerInformation *baseInfo) {
  OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleCmsSignerInformation_withOrgBouncycastleAsn1CmsSignerInfo_(self,
#line 103
  baseInfo, ((OrgBouncycastleCmsSignerInformation *) nil_chk(baseInfo))->info_);
}


#line 101
OrgBouncycastleCmsSignerInformation *new_OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleCmsSignerInformation_(OrgBouncycastleCmsSignerInformation *baseInfo) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCmsSignerInformation, initWithOrgBouncycastleCmsSignerInformation_, baseInfo)
}


#line 101
OrgBouncycastleCmsSignerInformation *create_OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleCmsSignerInformation_(OrgBouncycastleCmsSignerInformation *baseInfo) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCmsSignerInformation, initWithOrgBouncycastleCmsSignerInformation_, baseInfo)
}


#line 114
void OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleCmsSignerInformation_withOrgBouncycastleAsn1CmsSignerInfo_(OrgBouncycastleCmsSignerInformation *self, OrgBouncycastleCmsSignerInformation *baseInfo, OrgBouncycastleAsn1CmsSignerInfo *info) {
  NSObject_init(self);
  self->info_ = info;
  self->contentType_ = ((OrgBouncycastleCmsSignerInformation *) nil_chk(baseInfo))->contentType_;
  self->isCounterSignature_ = [baseInfo isCounterSignature];
  self->sid_ = [baseInfo getSID];
  self->digestAlgorithm_ = [((OrgBouncycastleAsn1CmsSignerInfo *) nil_chk(info)) getDigestAlgorithm];
  self->signedAttributeSet_ = [info getAuthenticatedAttributes];
  self->unsignedAttributeSet_ = [info getUnauthenticatedAttributes];
  self->encryptionAlgorithm_ = [info getDigestEncryptionAlgorithm];
  self->signature_ = [((OrgBouncycastleAsn1ASN1OctetString *) nil_chk([info getEncryptedDigest])) getOctets];
  self->content_ = baseInfo->content_;
  self->resultDigest_ = baseInfo->resultDigest_;
  self->signedAttributeValues_ = [self getSignedAttributes];
  self->unsignedAttributeValues_ = [self getUnsignedAttributes];
}


#line 114
OrgBouncycastleCmsSignerInformation *new_OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleCmsSignerInformation_withOrgBouncycastleAsn1CmsSignerInfo_(OrgBouncycastleCmsSignerInformation *baseInfo, OrgBouncycastleAsn1CmsSignerInfo *info) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCmsSignerInformation, initWithOrgBouncycastleCmsSignerInformation_withOrgBouncycastleAsn1CmsSignerInfo_, baseInfo, info)
}


#line 114
OrgBouncycastleCmsSignerInformation *create_OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleCmsSignerInformation_withOrgBouncycastleAsn1CmsSignerInfo_(OrgBouncycastleCmsSignerInformation *baseInfo, OrgBouncycastleAsn1CmsSignerInfo *info) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCmsSignerInformation, initWithOrgBouncycastleCmsSignerInformation_withOrgBouncycastleAsn1CmsSignerInfo_, baseInfo, info)
}


#line 141
IOSByteArray *OrgBouncycastleCmsSignerInformation_encodeObjWithOrgBouncycastleAsn1ASN1Encodable_(OrgBouncycastleCmsSignerInformation *self, id<OrgBouncycastleAsn1ASN1Encodable> obj) {
  
#line 145
  if (obj != nil) {
    
#line 147
    return [((OrgBouncycastleAsn1ASN1Primitive *) nil_chk([obj toASN1Primitive])) getEncoded];
  }
  
#line 150
  return nil;
}


#line 351
jboolean OrgBouncycastleCmsSignerInformation_doVerifyWithOrgBouncycastleCmsSignerInformationVerifier_(OrgBouncycastleCmsSignerInformation *self, OrgBouncycastleCmsSignerInformationVerifier *verifier) {
  
#line 355
  NSString *encName = [((OrgBouncycastleCmsCMSSignedHelper *) nil_chk(JreLoadStatic(OrgBouncycastleCmsCMSSignedHelper, INSTANCE))) getEncryptionAlgNameWithNSString:[self getEncryptionAlgOID]];
  id<OrgBouncycastleOperatorContentVerifier> contentVerifier;
  
#line 358
  @try {
    
#line 360
    contentVerifier = [((OrgBouncycastleCmsSignerInformationVerifier *) nil_chk(verifier)) getContentVerifierWithOrgBouncycastleAsn1X509AlgorithmIdentifier:self->encryptionAlgorithm_ withOrgBouncycastleAsn1X509AlgorithmIdentifier:[((OrgBouncycastleAsn1CmsSignerInfo *) nil_chk(self->info_)) getDigestAlgorithm]];
  }
  @catch (OrgBouncycastleOperatorOperatorCreationException *e) {
    
#line 364
    @throw new_OrgBouncycastleCmsCMSException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"can't create content verifier: ", [e getMessage]), e);
  }
  
#line 367
  @try {
    
#line 369
    JavaIoOutputStream *sigOut = [((id<OrgBouncycastleOperatorContentVerifier>) nil_chk(contentVerifier)) getOutputStream];
    
#line 371
    if (self->resultDigest_ == nil) {
      
#line 373
      id<OrgBouncycastleOperatorDigestCalculator> calc = [verifier getDigestCalculatorWithOrgBouncycastleAsn1X509AlgorithmIdentifier:[self getDigestAlgorithmID]];
      if (self->content_ != nil) {
        
#line 376
        JavaIoOutputStream *digOut = [((id<OrgBouncycastleOperatorDigestCalculator>) nil_chk(calc)) getOutputStream];
        
#line 378
        if (self->signedAttributeSet_ == nil) {
          
#line 380
          if ([OrgBouncycastleOperatorRawContentVerifier_class_() isInstance:contentVerifier]) {
            
#line 382
            [self->content_ writeWithJavaIoOutputStream:digOut];
          }
          else {
            
#line 386
            JavaIoOutputStream *cOut = new_OrgBouncycastleUtilIoTeeOutputStream_initWithJavaIoOutputStream_withJavaIoOutputStream_(digOut, sigOut);
            
#line 388
            [self->content_ writeWithJavaIoOutputStream:cOut];
            
#line 390
            [cOut close];
          }
        }
        else {
          
#line 395
          [self->content_ writeWithJavaIoOutputStream:digOut];
          [((JavaIoOutputStream *) nil_chk(sigOut)) writeWithByteArray:[self getEncodedSignedAttributes]];
        }
        
#line 399
        [((JavaIoOutputStream *) nil_chk(digOut)) close];
      }
      else if (self->signedAttributeSet_ != nil) {
        
#line 403
        [((JavaIoOutputStream *) nil_chk(sigOut)) writeWithByteArray:[self getEncodedSignedAttributes]];
      }
      else {
        
#line 408
        @throw new_OrgBouncycastleCmsCMSException_initWithNSString_(@"data not encapsulated in signature - use detached constructor.");
      }
      
#line 411
      self->resultDigest_ = [((id<OrgBouncycastleOperatorDigestCalculator>) nil_chk(calc)) getDigest];
    }
    else {
      
#line 415
      if (self->signedAttributeSet_ == nil) {
        
#line 417
        if (self->content_ != nil) {
          
#line 419
          [self->content_ writeWithJavaIoOutputStream:sigOut];
        }
      }
      else {
        
#line 424
        [((JavaIoOutputStream *) nil_chk(sigOut)) writeWithByteArray:[self getEncodedSignedAttributes]];
      }
    }
    
#line 428
    [((JavaIoOutputStream *) nil_chk(sigOut)) close];
  }
  @catch (JavaIoIOException *e) {
    
#line 432
    @throw new_OrgBouncycastleCmsCMSException_initWithNSString_withJavaLangException_(@"can't process mime object to create signature.", e);
  }
  @catch (OrgBouncycastleOperatorOperatorCreationException *e) {
    
#line 436
    @throw new_OrgBouncycastleCmsCMSException_initWithNSString_withJavaLangException_(JreStrcat("$$", @"can't create digest calculator: ", [e getMessage]), e);
  }
  
#line 440
  OrgBouncycastleCmsSignerInformation_verifyContentTypeAttributeValue(self);
  
#line 442
  OrgBouncycastleAsn1CmsAttributeTable *signedAttrTable = [self getSignedAttributes];
  
#line 445
  OrgBouncycastleCmsSignerInformation_verifyAlgorithmIdentifierProtectionAttributeWithOrgBouncycastleAsn1CmsAttributeTable_(self, signedAttrTable);
  
#line 448
  OrgBouncycastleCmsSignerInformation_verifyMessageDigestAttribute(self);
  
#line 451
  OrgBouncycastleCmsSignerInformation_verifyCounterSignatureAttributeWithOrgBouncycastleAsn1CmsAttributeTable_(self, signedAttrTable);
  
#line 453
  @try {
    
#line 455
    if (self->signedAttributeSet_ == nil && self->resultDigest_ != nil) {
      
#line 457
      if ([OrgBouncycastleOperatorRawContentVerifier_class_() isInstance:contentVerifier]) {
        
#line 459
        id<OrgBouncycastleOperatorRawContentVerifier> rawVerifier = (id<OrgBouncycastleOperatorRawContentVerifier>) cast_check(contentVerifier, OrgBouncycastleOperatorRawContentVerifier_class_());
        
#line 461
        if ([((NSString *) nil_chk(encName)) isEqual:@"RSA"]) {
          
#line 463
          OrgBouncycastleAsn1X509DigestInfo *digInfo = new_OrgBouncycastleAsn1X509DigestInfo_initWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(new_OrgBouncycastleAsn1X509AlgorithmIdentifier_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleAsn1ASN1Encodable_([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(self->digestAlgorithm_)) getAlgorithm], JreLoadStatic(OrgBouncycastleAsn1DERNull, INSTANCE)), self->resultDigest_);
          
#line 465
          return [rawVerifier verifyWithByteArray:[digInfo getEncodedWithNSString:OrgBouncycastleAsn1ASN1Encoding_DER] withByteArray:[self getSignature]];
        }
        
#line 468
        return [rawVerifier verifyWithByteArray:self->resultDigest_ withByteArray:[self getSignature]];
      }
    }
    
#line 472
    return [contentVerifier verifyWithByteArray:[self getSignature]];
  }
  @catch (JavaIoIOException *e) {
    
#line 476
    @throw new_OrgBouncycastleCmsCMSException_initWithNSString_withJavaLangException_(@"can't process mime object to create signature.", e);
  }
}


#line 485
void OrgBouncycastleCmsSignerInformation_verifyContentTypeAttributeValue(OrgBouncycastleCmsSignerInformation *self) {
  
#line 488
  OrgBouncycastleAsn1ASN1Primitive *validContentType = OrgBouncycastleCmsSignerInformation_getSingleValuedSignedAttributeWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withNSString_(self, JreLoadStatic(OrgBouncycastleAsn1CmsCMSAttributes, contentType),
#line 489
  @"content-type");
  if (validContentType == nil) {
    
#line 492
    if (!self->isCounterSignature_ && self->signedAttributeSet_ != nil) {
      
#line 494
      @throw new_OrgBouncycastleCmsCMSException_initWithNSString_(@"The content-type attribute type MUST be present whenever signed attributes are present in signed-data");
    }
  }
  else {
    
#line 499
    if (self->isCounterSignature_) {
      
#line 501
      @throw new_OrgBouncycastleCmsCMSException_initWithNSString_(@"[For counter signatures,] the signedAttributes field MUST NOT contain a content-type attribute");
    }
    
#line 504
    if (!([validContentType isKindOfClass:[OrgBouncycastleAsn1ASN1ObjectIdentifier class]])) {
      
#line 506
      @throw new_OrgBouncycastleCmsCMSException_initWithNSString_(@"content-type attribute value not of ASN.1 type 'OBJECT IDENTIFIER'");
    }
    
#line 509
    OrgBouncycastleAsn1ASN1ObjectIdentifier *signedContentType = (OrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk(validContentType, [OrgBouncycastleAsn1ASN1ObjectIdentifier class]);
    
#line 511
    if (![signedContentType equalsWithOrgBouncycastleAsn1ASN1Primitive:self->contentType_]) {
      
#line 513
      @throw new_OrgBouncycastleCmsCMSException_initWithNSString_(@"content-type attribute value does not match eContentType");
    }
  }
}


#line 523
void OrgBouncycastleCmsSignerInformation_verifyMessageDigestAttribute(OrgBouncycastleCmsSignerInformation *self) {
  
#line 526
  OrgBouncycastleAsn1ASN1Primitive *validMessageDigest = OrgBouncycastleCmsSignerInformation_getSingleValuedSignedAttributeWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withNSString_(self, JreLoadStatic(OrgBouncycastleAsn1CmsCMSAttributes, messageDigest),
#line 527
  @"message-digest");
  if (validMessageDigest == nil) {
    
#line 530
    if (self->signedAttributeSet_ != nil) {
      
#line 532
      @throw new_OrgBouncycastleCmsCMSException_initWithNSString_(@"the message-digest signed attribute type MUST be present when there are any signed attributes present");
    }
  }
  else {
    
#line 537
    if (!([validMessageDigest isKindOfClass:[OrgBouncycastleAsn1ASN1OctetString class]])) {
      
#line 539
      @throw new_OrgBouncycastleCmsCMSException_initWithNSString_(@"message-digest attribute value not of ASN.1 type 'OCTET STRING'");
    }
    
#line 542
    OrgBouncycastleAsn1ASN1OctetString *signedMessageDigest = (OrgBouncycastleAsn1ASN1OctetString *) cast_chk(validMessageDigest, [OrgBouncycastleAsn1ASN1OctetString class]);
    
#line 544
    if (!OrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(self->resultDigest_, [signedMessageDigest getOctets])) {
      
#line 546
      @throw new_OrgBouncycastleCmsCMSSignerDigestMismatchException_initWithNSString_(@"message-digest attribute value does not match calculated value");
    }
  }
}


#line 557
void OrgBouncycastleCmsSignerInformation_verifyAlgorithmIdentifierProtectionAttributeWithOrgBouncycastleAsn1CmsAttributeTable_(OrgBouncycastleCmsSignerInformation *self, OrgBouncycastleAsn1CmsAttributeTable *signedAttrTable) {
  
#line 560
  OrgBouncycastleAsn1CmsAttributeTable *unsignedAttrTable = [self getUnsignedAttributes];
  if (unsignedAttrTable != nil && [((OrgBouncycastleAsn1ASN1EncodableVector *) nil_chk([unsignedAttrTable getAllWithOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgBouncycastleAsn1CmsCMSAttributes, cmsAlgorithmProtect)])) size] > 0) {
    
#line 563
    @throw new_OrgBouncycastleCmsCMSException_initWithNSString_(@"A cmsAlgorithmProtect attribute MUST be a signed attribute");
  }
  if (signedAttrTable != nil) {
    
#line 567
    OrgBouncycastleAsn1ASN1EncodableVector *protectionAttributes = [signedAttrTable getAllWithOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgBouncycastleAsn1CmsCMSAttributes, cmsAlgorithmProtect)];
    if ([((OrgBouncycastleAsn1ASN1EncodableVector *) nil_chk(protectionAttributes)) size] > 1) {
      
#line 570
      @throw new_OrgBouncycastleCmsCMSException_initWithNSString_(@"Only one instance of a cmsAlgorithmProtect attribute can be present");
    }
    
#line 573
    if ([protectionAttributes size] > 0) {
      
#line 575
      OrgBouncycastleAsn1CmsAttribute *attr = OrgBouncycastleAsn1CmsAttribute_getInstanceWithId_([protectionAttributes getWithInt:0]);
      if ([((OrgBouncycastleAsn1ASN1Set *) nil_chk([((OrgBouncycastleAsn1CmsAttribute *) nil_chk(attr)) getAttrValues])) size] != 1) {
        
#line 578
        @throw new_OrgBouncycastleCmsCMSException_initWithNSString_(@"A cmsAlgorithmProtect attribute MUST contain exactly one value");
      }
      
#line 581
      OrgBouncycastleAsn1CmsCMSAlgorithmProtection *algorithmProtection = OrgBouncycastleAsn1CmsCMSAlgorithmProtection_getInstanceWithId_(IOSObjectArray_Get(nil_chk([attr getAttributeValues]), 0));
      
#line 583
      if (!OrgBouncycastleCmsCMSUtils_isEquivalentWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1X509AlgorithmIdentifier_([((OrgBouncycastleAsn1CmsCMSAlgorithmProtection *) nil_chk(algorithmProtection)) getDigestAlgorithm], [((OrgBouncycastleAsn1CmsSignerInfo *) nil_chk(self->info_)) getDigestAlgorithm])) {
        
#line 585
        @throw new_OrgBouncycastleCmsCMSException_initWithNSString_(@"CMS Algorithm Identifier Protection check failed for digestAlgorithm");
      }
      
#line 588
      if (!OrgBouncycastleCmsCMSUtils_isEquivalentWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1X509AlgorithmIdentifier_([algorithmProtection getSignatureAlgorithm], [self->info_ getDigestEncryptionAlgorithm])) {
        
#line 590
        @throw new_OrgBouncycastleCmsCMSException_initWithNSString_(@"CMS Algorithm Identifier Protection check failed for signatureAlgorithm");
      }
    }
  }
}


#line 602
void OrgBouncycastleCmsSignerInformation_verifyCounterSignatureAttributeWithOrgBouncycastleAsn1CmsAttributeTable_(OrgBouncycastleCmsSignerInformation *self, OrgBouncycastleAsn1CmsAttributeTable *signedAttrTable) {
  
#line 605
  if (signedAttrTable != nil &&
#line 606
  [((OrgBouncycastleAsn1ASN1EncodableVector *) nil_chk([signedAttrTable getAllWithOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgBouncycastleAsn1CmsCMSAttributes, counterSignature)])) size] > 0) {
    
#line 608
    @throw new_OrgBouncycastleCmsCMSException_initWithNSString_(@"A countersignature attribute MUST NOT be a signed attribute");
  }
  
#line 611
  OrgBouncycastleAsn1CmsAttributeTable *unsignedAttrTable = [self getUnsignedAttributes];
  if (unsignedAttrTable != nil) {
    
#line 614
    OrgBouncycastleAsn1ASN1EncodableVector *csAttrs = [unsignedAttrTable getAllWithOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgBouncycastleAsn1CmsCMSAttributes, counterSignature)];
    for (jint i = 0; i < [((OrgBouncycastleAsn1ASN1EncodableVector *) nil_chk(csAttrs)) size]; ++i) {
      
#line 617
      OrgBouncycastleAsn1CmsAttribute *csAttr = OrgBouncycastleAsn1CmsAttribute_getInstanceWithId_([csAttrs getWithInt:i]);
      if ([((OrgBouncycastleAsn1ASN1Set *) nil_chk([((OrgBouncycastleAsn1CmsAttribute *) nil_chk(csAttr)) getAttrValues])) size] < 1) {
        
#line 620
        @throw new_OrgBouncycastleCmsCMSException_initWithNSString_(@"A countersignature attribute MUST contain at least one AttributeValue");
      }
    }
  }
}


#line 668
OrgBouncycastleAsn1ASN1Primitive *OrgBouncycastleCmsSignerInformation_getSingleValuedSignedAttributeWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withNSString_(OrgBouncycastleCmsSignerInformation *self, OrgBouncycastleAsn1ASN1ObjectIdentifier *attrOID, NSString *printableName) {
  
#line 672
  OrgBouncycastleAsn1CmsAttributeTable *unsignedAttrTable = [self getUnsignedAttributes];
  if (unsignedAttrTable != nil &&
#line 674
  [((OrgBouncycastleAsn1ASN1EncodableVector *) nil_chk([unsignedAttrTable getAllWithOrgBouncycastleAsn1ASN1ObjectIdentifier:attrOID])) size] > 0) {
    
#line 676
    @throw new_OrgBouncycastleCmsCMSException_initWithNSString_(JreStrcat("$$$", @"The ", printableName, @" attribute MUST NOT be an unsigned attribute"));
  }
  
#line 680
  OrgBouncycastleAsn1CmsAttributeTable *signedAttrTable = [self getSignedAttributes];
  if (signedAttrTable == nil) {
    
#line 683
    return nil;
  }
  
#line 686
  OrgBouncycastleAsn1ASN1EncodableVector *v = [signedAttrTable getAllWithOrgBouncycastleAsn1ASN1ObjectIdentifier:attrOID];
  switch ([((OrgBouncycastleAsn1ASN1EncodableVector *) nil_chk(v)) size]) {
    
#line 689
    case 0:
    return nil;
    case 1:
    {
      OrgBouncycastleAsn1CmsAttribute *t = (OrgBouncycastleAsn1CmsAttribute *) cast_chk([v getWithInt:0], [OrgBouncycastleAsn1CmsAttribute class]);
      OrgBouncycastleAsn1ASN1Set *attrValues = [((OrgBouncycastleAsn1CmsAttribute *) nil_chk(t)) getAttrValues];
      if ([((OrgBouncycastleAsn1ASN1Set *) nil_chk(attrValues)) size] != 1) {
        
#line 697
        @throw new_OrgBouncycastleCmsCMSException_initWithNSString_(JreStrcat("$$$", @"A ", printableName, @" attribute MUST have a single attribute value"));
      }
      
#line 701
      return [((id<OrgBouncycastleAsn1ASN1Encodable>) nil_chk([attrValues getObjectAtWithInt:0])) toASN1Primitive];
    }
    default:
    @throw new_OrgBouncycastleCmsCMSException_initWithNSString_(JreStrcat("$$$", @"The SignedAttributes in a signerInfo MUST NOT include multiple instances of the ",
#line 705
    printableName, @" attribute"));
  }
}


#line 709
OrgBouncycastleAsn1CmsTime *OrgBouncycastleCmsSignerInformation_getSigningTime(OrgBouncycastleCmsSignerInformation *self) {
  
#line 712
  OrgBouncycastleAsn1ASN1Primitive *validSigningTime = OrgBouncycastleCmsSignerInformation_getSingleValuedSignedAttributeWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withNSString_(self, JreLoadStatic(OrgBouncycastleAsn1CmsCMSAttributes, signingTime),
#line 713
  @"signing-time");
  
#line 715
  if (validSigningTime == nil) {
    
#line 717
    return nil;
  }
  
#line 720
  @try {
    
#line 722
    return OrgBouncycastleAsn1CmsTime_getInstanceWithId_(validSigningTime);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    
#line 726
    @throw new_OrgBouncycastleCmsCMSException_initWithNSString_(@"signing-time attribute value not a valid 'Time' structure");
  }
}


#line 739
OrgBouncycastleCmsSignerInformation *OrgBouncycastleCmsSignerInformation_replaceUnsignedAttributesWithOrgBouncycastleCmsSignerInformation_withOrgBouncycastleAsn1CmsAttributeTable_(OrgBouncycastleCmsSignerInformation *signerInformation, OrgBouncycastleAsn1CmsAttributeTable *unsignedAttributes) {
  OrgBouncycastleCmsSignerInformation_initialize();
  
#line 743
  OrgBouncycastleAsn1CmsSignerInfo *sInfo = ((OrgBouncycastleCmsSignerInformation *) nil_chk(signerInformation))->info_;
  OrgBouncycastleAsn1ASN1Set *unsignedAttr = nil;
  
#line 746
  if (unsignedAttributes != nil) {
    
#line 748
    unsignedAttr = new_OrgBouncycastleAsn1DERSet_initWithOrgBouncycastleAsn1ASN1EncodableVector_([unsignedAttributes toASN1EncodableVector]);
  }
  
#line 751
  return new_OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleAsn1CmsSignerInfo_withOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleCmsCMSProcessable_withByteArray_(new_OrgBouncycastleAsn1CmsSignerInfo_initWithOrgBouncycastleAsn1CmsSignerIdentifier_withOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1ASN1Set_withOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1ASN1OctetString_withOrgBouncycastleAsn1ASN1Set_(
#line 752
  [((OrgBouncycastleAsn1CmsSignerInfo *) nil_chk(sInfo)) getSID], [sInfo getDigestAlgorithm],
#line 753
  [sInfo getAuthenticatedAttributes], [sInfo getDigestEncryptionAlgorithm], [sInfo getEncryptedDigest], unsignedAttr),
#line 754
  signerInformation->contentType_, signerInformation->content_, nil);
}


#line 765
OrgBouncycastleCmsSignerInformation *OrgBouncycastleCmsSignerInformation_addCounterSignersWithOrgBouncycastleCmsSignerInformation_withOrgBouncycastleCmsSignerInformationStore_(OrgBouncycastleCmsSignerInformation *signerInformation, OrgBouncycastleCmsSignerInformationStore *counterSigners) {
  OrgBouncycastleCmsSignerInformation_initialize();
  
#line 771
  OrgBouncycastleAsn1CmsSignerInfo *sInfo = ((OrgBouncycastleCmsSignerInformation *) nil_chk(signerInformation))->info_;
  OrgBouncycastleAsn1CmsAttributeTable *unsignedAttr = [signerInformation getUnsignedAttributes];
  OrgBouncycastleAsn1ASN1EncodableVector *v;
  
#line 775
  if (unsignedAttr != nil) {
    
#line 777
    v = [unsignedAttr toASN1EncodableVector];
  }
  else {
    
#line 781
    v = new_OrgBouncycastleAsn1ASN1EncodableVector_init();
  }
  
#line 784
  OrgBouncycastleAsn1ASN1EncodableVector *sigs = new_OrgBouncycastleAsn1ASN1EncodableVector_init();
  
#line 786
  for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((OrgBouncycastleCmsSignerInformationStore *) nil_chk(counterSigners)) getSigners])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 788
    [sigs addWithOrgBouncycastleAsn1ASN1Encodable:[((OrgBouncycastleCmsSignerInformation *) nil_chk(((OrgBouncycastleCmsSignerInformation *) cast_chk([it next], [OrgBouncycastleCmsSignerInformation class])))) toASN1Structure]];
  }
  
#line 791
  [((OrgBouncycastleAsn1ASN1EncodableVector *) nil_chk(v)) addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1CmsAttribute_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleAsn1ASN1Set_(JreLoadStatic(OrgBouncycastleAsn1CmsCMSAttributes, counterSignature), new_OrgBouncycastleAsn1DERSet_initWithOrgBouncycastleAsn1ASN1EncodableVector_(sigs))];
  
#line 793
  return new_OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleAsn1CmsSignerInfo_withOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleCmsCMSProcessable_withByteArray_(new_OrgBouncycastleAsn1CmsSignerInfo_initWithOrgBouncycastleAsn1CmsSignerIdentifier_withOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1ASN1Set_withOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1ASN1OctetString_withOrgBouncycastleAsn1ASN1Set_(
#line 794
  [((OrgBouncycastleAsn1CmsSignerInfo *) nil_chk(sInfo)) getSID], [sInfo getDigestAlgorithm],
#line 795
  [sInfo getAuthenticatedAttributes], [sInfo getDigestEncryptionAlgorithm], [sInfo getEncryptedDigest], new_OrgBouncycastleAsn1DERSet_initWithOrgBouncycastleAsn1ASN1EncodableVector_(v)),
#line 796
  signerInformation->contentType_, signerInformation->content_, nil);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCmsSignerInformation)
