//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cms/CMSSignedData.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCmsCMSSignedData")
#ifdef RESTRICT_OrgBouncycastleCmsCMSSignedData
#define INCLUDE_ALL_OrgBouncycastleCmsCMSSignedData 0
#else
#define INCLUDE_ALL_OrgBouncycastleCmsCMSSignedData 1
#endif
#undef RESTRICT_OrgBouncycastleCmsCMSSignedData

#if !defined (OrgBouncycastleCmsCMSSignedData_) && (INCLUDE_ALL_OrgBouncycastleCmsCMSSignedData || defined(INCLUDE_OrgBouncycastleCmsCMSSignedData))
#define OrgBouncycastleCmsCMSSignedData_

#define RESTRICT_OrgBouncycastleUtilEncodable 1
#define INCLUDE_OrgBouncycastleUtilEncodable 1
#include "org/bouncycastle/util/Encodable.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class OrgBouncycastleAsn1ASN1ObjectIdentifier;
@class OrgBouncycastleAsn1CmsContentInfo;
@class OrgBouncycastleAsn1CmsSignedData;
@class OrgBouncycastleAsn1X509AlgorithmIdentifier;
@class OrgBouncycastleCmsSignerInformationStore;
@protocol JavaUtilMap;
@protocol JavaUtilSet;
@protocol OrgBouncycastleCmsCMSProcessable;
@protocol OrgBouncycastleCmsCMSTypedData;
@protocol OrgBouncycastleCmsSignerInformationVerifierProvider;
@protocol OrgBouncycastleUtilStore;

/*!
 @brief general class for handling a pkcs7-signature message.
 A simple example of usage - note, in the example below the validity of
  the certificate isn't verified, just the fact that one of the certs
  matches the given signer... 
 @code

   Store                   certStore = s.getCertificates();
   SignerInformationStore  signers = s.getSignerInfos();
   Collection              c = signers.getSigners();
   Iterator                it = c.iterator();
   while (it.hasNext())
   {
       SignerInformation   signer = (SignerInformation)it.next();
       Collection          certCollection = certStore.getMatches(signer.getSID());
       Iterator              certIt = certCollection.iterator();
       X509CertificateHolder cert = (X509CertificateHolder)certIt.next();
       if (signer.verify(new JcaSimpleSignerInfoVerifierBuilder().setProvider("BC").build(cert)))
       {
           verified++;
       }     }    
  
@endcode
 */
@interface OrgBouncycastleCmsCMSSignedData : NSObject < OrgBouncycastleUtilEncodable > {
 @public
  OrgBouncycastleAsn1CmsSignedData *signedData_;
  OrgBouncycastleAsn1CmsContentInfo *contentInfo_;
  id<OrgBouncycastleCmsCMSTypedData> signedContent_;
  OrgBouncycastleCmsSignerInformationStore *signerInfoStore_;
}

#pragma mark Public

- (instancetype)initWithByteArray:(IOSByteArray *)sigBlock;

- (instancetype)initWithOrgBouncycastleCmsCMSProcessable:(id<OrgBouncycastleCmsCMSProcessable>)signedContent
                                           withByteArray:(IOSByteArray *)sigBlock;

- (instancetype)initWithOrgBouncycastleCmsCMSProcessable:(id<OrgBouncycastleCmsCMSProcessable>)signedContent
                   withOrgBouncycastleAsn1CmsContentInfo:(OrgBouncycastleAsn1CmsContentInfo *)sigData;

/*!
 @brief base constructor - content with detached signature.
 @param signedContent the content that was signed.
 @param sigData the signature object.
 */
- (instancetype)initWithOrgBouncycastleCmsCMSProcessable:(id<OrgBouncycastleCmsCMSProcessable>)signedContent
                                   withJavaIoInputStream:(JavaIoInputStream *)sigData;

- (instancetype)initWithOrgBouncycastleAsn1CmsContentInfo:(OrgBouncycastleAsn1CmsContentInfo *)sigData;

/*!
 @brief base constructor - with encapsulated content
 */
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)sigData;

/*!
 @brief Content with detached signature, digests precomputed
 @param hashes a map of precomputed digests for content indexed by name of hash.
 @param sigBlock the signature object.
 */
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)hashes
                      withByteArray:(IOSByteArray *)sigBlock;

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)hashes
withOrgBouncycastleAsn1CmsContentInfo:(OrgBouncycastleAsn1CmsContentInfo *)sigData;

/*!
 @brief Return a new CMSSignedData which guarantees to have the passed in digestAlgorithm
  in it.
 @param signedData the signed data object to be used as a base.
 @param digestAlgorithm the digest algorithm to be added to the signed data.
 @return a new signed data object.
 */
+ (OrgBouncycastleCmsCMSSignedData *)addDigestAlgorithmWithOrgBouncycastleCmsCMSSignedData:(OrgBouncycastleCmsCMSSignedData *)signedData
                                            withOrgBouncycastleAsn1X509AlgorithmIdentifier:(OrgBouncycastleAsn1X509AlgorithmIdentifier *)digestAlgorithm;

/*!
 @brief Return any X.509 attribute certificate objects in this SignedData structure as a Store of X509AttributeCertificateHolder objects.
 @return a Store of X509AttributeCertificateHolder objects.
 */
- (id<OrgBouncycastleUtilStore>)getAttributeCertificates;

/*!
 @brief Return any X.509 certificate objects in this SignedData structure as a Store of X509CertificateHolder objects.
 @return a Store of X509CertificateHolder objects.
 */
- (id<OrgBouncycastleUtilStore>)getCertificates;

/*!
 @brief Return any X.509 CRL objects in this SignedData structure as a Store of X509CRLHolder objects.
 @return a Store of X509CRLHolder objects.
 */
- (id<OrgBouncycastleUtilStore>)getCRLs;

/*!
 @brief Return the digest algorithm identifiers for the SignedData object
 @return the set of digest algorithm identifiers
 */
- (id<JavaUtilSet>)getDigestAlgorithmIDs;

/*!
 @brief return the ASN.1 encoded representation of this object.
 */
- (IOSByteArray *)getEncoded;

/*!
 @brief return the ASN.1 encoded representation of this object using the specified encoding.
 @param encoding the ASN.1 encoding format to use ("BER", "DL", or "DER").
 */
- (IOSByteArray *)getEncodedWithNSString:(NSString *)encoding;

/*!
 @brief Return any OtherRevocationInfo OtherRevInfo objects of the type indicated by otherRevocationInfoFormat in
  this SignedData structure.
 @param otherRevocationInfoFormat OID of the format type been looked for.
 @return a Store of ASN1Encodable objects representing any objects of otherRevocationInfoFormat found.
 */
- (id<OrgBouncycastleUtilStore>)getOtherRevocationInfoWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)otherRevocationInfoFormat;

- (id<OrgBouncycastleCmsCMSTypedData>)getSignedContent;

/*!
 @brief Return the a string representation of the OID associated with the
  encapsulated content info structure carried in the signed data.
 @return the OID for the content type.
 */
- (NSString *)getSignedContentTypeOID;

/*!
 @brief return the collection of signers that are associated with the
  signatures for the message.
 */
- (OrgBouncycastleCmsSignerInformationStore *)getSignerInfos;

/*!
 @brief Return the version number for this object
 */
- (jint)getVersion;

/*!
 @brief Return if this is object represents a certificate management message.
 @return true if the message has no signers or content, false otherwise.
 */
- (jboolean)isCertificateManagementMessage;

/*!
 @brief Return if this is object represents a detached signature.
 @return true if this message represents a detached signature, false otherwise.
 */
- (jboolean)isDetachedSignature;

/*!
 @brief Replace the certificate and CRL information associated with this
  CMSSignedData object with the new one passed in.
 @param signedData the signed data object to be used as a base.
 @param certificates the new certificates to be used.
 @param attrCerts the new attribute certificates to be used.
 @param revocations the new CRLs to be used - a collection of X509CRLHolder objects, OtherRevocationInfoFormat, or both.
 @return a new signed data object.
 @throw CMSExceptionif there is an error processing the CertStore
 */
+ (OrgBouncycastleCmsCMSSignedData *)replaceCertificatesAndCRLsWithOrgBouncycastleCmsCMSSignedData:(OrgBouncycastleCmsCMSSignedData *)signedData
                                                                      withOrgBouncycastleUtilStore:(id<OrgBouncycastleUtilStore>)certificates
                                                                      withOrgBouncycastleUtilStore:(id<OrgBouncycastleUtilStore>)attrCerts
                                                                      withOrgBouncycastleUtilStore:(id<OrgBouncycastleUtilStore>)revocations;

/*!
 @brief Replace the SignerInformation store associated with this
  CMSSignedData object with the new one passed in.You would
  probably only want to do this if you wanted to change the unsigned
  attributes associated with a signer, or perhaps delete one.
 @param signedData the signed data object to be used as a base.
 @param signerInformationStore the new signer information store to use.
 @return a new signed data object.
 */
+ (OrgBouncycastleCmsCMSSignedData *)replaceSignersWithOrgBouncycastleCmsCMSSignedData:(OrgBouncycastleCmsCMSSignedData *)signedData
                                          withOrgBouncycastleCmsSignerInformationStore:(OrgBouncycastleCmsSignerInformationStore *)signerInformationStore;

/*!
 @brief return the ContentInfo
 */
- (OrgBouncycastleAsn1CmsContentInfo *)toASN1Structure;

/*!
 @brief Verify all the SignerInformation objects and their associated counter signatures attached
  to this CMS SignedData object.
 @param verifierProvider a provider of SignerInformationVerifier objects.
 @return true if all verify, false otherwise.
 @throw CMSExceptionif an exception occurs during the verification process.
 */
- (jboolean)verifySignaturesWithOrgBouncycastleCmsSignerInformationVerifierProvider:(id<OrgBouncycastleCmsSignerInformationVerifierProvider>)verifierProvider;

/*!
 @brief Verify all the SignerInformation objects and optionally their associated counter signatures attached
  to this CMS SignedData object.
 @param verifierProvider a provider of SignerInformationVerifier objects.
 @param ignoreCounterSignatures if true don't check counter signatures. If false check counter signatures as well.
 @return true if all verify, false otherwise.
 @throw CMSExceptionif an exception occurs during the verification process.
 */
- (jboolean)verifySignaturesWithOrgBouncycastleCmsSignerInformationVerifierProvider:(id<OrgBouncycastleCmsSignerInformationVerifierProvider>)verifierProvider
                                                                        withBoolean:(jboolean)ignoreCounterSignatures;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleCmsCMSSignedData)

J2OBJC_FIELD_SETTER(OrgBouncycastleCmsCMSSignedData, signedData_, OrgBouncycastleAsn1CmsSignedData *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCmsCMSSignedData, contentInfo_, OrgBouncycastleAsn1CmsContentInfo *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCmsCMSSignedData, signedContent_, id<OrgBouncycastleCmsCMSTypedData>)
J2OBJC_FIELD_SETTER(OrgBouncycastleCmsCMSSignedData, signerInfoStore_, OrgBouncycastleCmsSignerInformationStore *)

FOUNDATION_EXPORT void OrgBouncycastleCmsCMSSignedData_initWithByteArray_(OrgBouncycastleCmsCMSSignedData *self, IOSByteArray *sigBlock);

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *new_OrgBouncycastleCmsCMSSignedData_initWithByteArray_(IOSByteArray *sigBlock) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *create_OrgBouncycastleCmsCMSSignedData_initWithByteArray_(IOSByteArray *sigBlock);

FOUNDATION_EXPORT void OrgBouncycastleCmsCMSSignedData_initWithOrgBouncycastleCmsCMSProcessable_withByteArray_(OrgBouncycastleCmsCMSSignedData *self, id<OrgBouncycastleCmsCMSProcessable> signedContent, IOSByteArray *sigBlock);

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *new_OrgBouncycastleCmsCMSSignedData_initWithOrgBouncycastleCmsCMSProcessable_withByteArray_(id<OrgBouncycastleCmsCMSProcessable> signedContent, IOSByteArray *sigBlock) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *create_OrgBouncycastleCmsCMSSignedData_initWithOrgBouncycastleCmsCMSProcessable_withByteArray_(id<OrgBouncycastleCmsCMSProcessable> signedContent, IOSByteArray *sigBlock);

FOUNDATION_EXPORT void OrgBouncycastleCmsCMSSignedData_initWithJavaUtilMap_withByteArray_(OrgBouncycastleCmsCMSSignedData *self, id<JavaUtilMap> hashes, IOSByteArray *sigBlock);

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *new_OrgBouncycastleCmsCMSSignedData_initWithJavaUtilMap_withByteArray_(id<JavaUtilMap> hashes, IOSByteArray *sigBlock) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *create_OrgBouncycastleCmsCMSSignedData_initWithJavaUtilMap_withByteArray_(id<JavaUtilMap> hashes, IOSByteArray *sigBlock);

FOUNDATION_EXPORT void OrgBouncycastleCmsCMSSignedData_initWithOrgBouncycastleCmsCMSProcessable_withJavaIoInputStream_(OrgBouncycastleCmsCMSSignedData *self, id<OrgBouncycastleCmsCMSProcessable> signedContent, JavaIoInputStream *sigData);

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *new_OrgBouncycastleCmsCMSSignedData_initWithOrgBouncycastleCmsCMSProcessable_withJavaIoInputStream_(id<OrgBouncycastleCmsCMSProcessable> signedContent, JavaIoInputStream *sigData) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *create_OrgBouncycastleCmsCMSSignedData_initWithOrgBouncycastleCmsCMSProcessable_withJavaIoInputStream_(id<OrgBouncycastleCmsCMSProcessable> signedContent, JavaIoInputStream *sigData);

FOUNDATION_EXPORT void OrgBouncycastleCmsCMSSignedData_initWithJavaIoInputStream_(OrgBouncycastleCmsCMSSignedData *self, JavaIoInputStream *sigData);

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *new_OrgBouncycastleCmsCMSSignedData_initWithJavaIoInputStream_(JavaIoInputStream *sigData) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *create_OrgBouncycastleCmsCMSSignedData_initWithJavaIoInputStream_(JavaIoInputStream *sigData);

FOUNDATION_EXPORT void OrgBouncycastleCmsCMSSignedData_initWithOrgBouncycastleCmsCMSProcessable_withOrgBouncycastleAsn1CmsContentInfo_(OrgBouncycastleCmsCMSSignedData *self, id<OrgBouncycastleCmsCMSProcessable> signedContent, OrgBouncycastleAsn1CmsContentInfo *sigData);

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *new_OrgBouncycastleCmsCMSSignedData_initWithOrgBouncycastleCmsCMSProcessable_withOrgBouncycastleAsn1CmsContentInfo_(id<OrgBouncycastleCmsCMSProcessable> signedContent, OrgBouncycastleAsn1CmsContentInfo *sigData) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *create_OrgBouncycastleCmsCMSSignedData_initWithOrgBouncycastleCmsCMSProcessable_withOrgBouncycastleAsn1CmsContentInfo_(id<OrgBouncycastleCmsCMSProcessable> signedContent, OrgBouncycastleAsn1CmsContentInfo *sigData);

FOUNDATION_EXPORT void OrgBouncycastleCmsCMSSignedData_initWithJavaUtilMap_withOrgBouncycastleAsn1CmsContentInfo_(OrgBouncycastleCmsCMSSignedData *self, id<JavaUtilMap> hashes, OrgBouncycastleAsn1CmsContentInfo *sigData);

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *new_OrgBouncycastleCmsCMSSignedData_initWithJavaUtilMap_withOrgBouncycastleAsn1CmsContentInfo_(id<JavaUtilMap> hashes, OrgBouncycastleAsn1CmsContentInfo *sigData) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *create_OrgBouncycastleCmsCMSSignedData_initWithJavaUtilMap_withOrgBouncycastleAsn1CmsContentInfo_(id<JavaUtilMap> hashes, OrgBouncycastleAsn1CmsContentInfo *sigData);

FOUNDATION_EXPORT void OrgBouncycastleCmsCMSSignedData_initWithOrgBouncycastleAsn1CmsContentInfo_(OrgBouncycastleCmsCMSSignedData *self, OrgBouncycastleAsn1CmsContentInfo *sigData);

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *new_OrgBouncycastleCmsCMSSignedData_initWithOrgBouncycastleAsn1CmsContentInfo_(OrgBouncycastleAsn1CmsContentInfo *sigData) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *create_OrgBouncycastleCmsCMSSignedData_initWithOrgBouncycastleAsn1CmsContentInfo_(OrgBouncycastleAsn1CmsContentInfo *sigData);

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *OrgBouncycastleCmsCMSSignedData_addDigestAlgorithmWithOrgBouncycastleCmsCMSSignedData_withOrgBouncycastleAsn1X509AlgorithmIdentifier_(OrgBouncycastleCmsCMSSignedData *signedData, OrgBouncycastleAsn1X509AlgorithmIdentifier *digestAlgorithm);

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *OrgBouncycastleCmsCMSSignedData_replaceSignersWithOrgBouncycastleCmsCMSSignedData_withOrgBouncycastleCmsSignerInformationStore_(OrgBouncycastleCmsCMSSignedData *signedData, OrgBouncycastleCmsSignerInformationStore *signerInformationStore);

FOUNDATION_EXPORT OrgBouncycastleCmsCMSSignedData *OrgBouncycastleCmsCMSSignedData_replaceCertificatesAndCRLsWithOrgBouncycastleCmsCMSSignedData_withOrgBouncycastleUtilStore_withOrgBouncycastleUtilStore_withOrgBouncycastleUtilStore_(OrgBouncycastleCmsCMSSignedData *signedData, id<OrgBouncycastleUtilStore> certificates, id<OrgBouncycastleUtilStore> attrCerts, id<OrgBouncycastleUtilStore> revocations);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCmsCMSSignedData)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCmsCMSSignedData")
