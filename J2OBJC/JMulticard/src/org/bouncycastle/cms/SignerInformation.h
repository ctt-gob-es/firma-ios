//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cms/SignerInformation.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCmsSignerInformation")
#ifdef RESTRICT_OrgBouncycastleCmsSignerInformation
#define INCLUDE_ALL_OrgBouncycastleCmsSignerInformation 0
#else
#define INCLUDE_ALL_OrgBouncycastleCmsSignerInformation 1
#endif
#undef RESTRICT_OrgBouncycastleCmsSignerInformation

#if !defined (OrgBouncycastleCmsSignerInformation_) && (INCLUDE_ALL_OrgBouncycastleCmsSignerInformation || defined(INCLUDE_OrgBouncycastleCmsSignerInformation))
#define OrgBouncycastleCmsSignerInformation_

@class IOSByteArray;
@class OrgBouncycastleAsn1ASN1ObjectIdentifier;
@class OrgBouncycastleAsn1ASN1Set;
@class OrgBouncycastleAsn1CmsAttributeTable;
@class OrgBouncycastleAsn1CmsSignerInfo;
@class OrgBouncycastleAsn1X509AlgorithmIdentifier;
@class OrgBouncycastleCmsSignerId;
@class OrgBouncycastleCmsSignerInformationStore;
@class OrgBouncycastleCmsSignerInformationVerifier;
@protocol OrgBouncycastleCmsCMSProcessable;

/*!
 @brief an expanded SignerInfo block from a CMS Signed message
 */
@interface OrgBouncycastleCmsSignerInformation : NSObject {
 @public
  OrgBouncycastleAsn1CmsSignerInfo *info_;
  OrgBouncycastleAsn1X509AlgorithmIdentifier *digestAlgorithm_;
  OrgBouncycastleAsn1X509AlgorithmIdentifier *encryptionAlgorithm_;
  OrgBouncycastleAsn1ASN1Set *signedAttributeSet_;
  OrgBouncycastleAsn1ASN1Set *unsignedAttributeSet_;
}

#pragma mark Public

/*!
 @brief Return a signer information object with passed in SignerInformationStore representing counter
  signatures attached as an unsigned attribute.
 @param signerInformation the signerInfo to be used as the basis.
 @param counterSigners signer info objects carrying counter signature.
 @return a copy of the original SignerInformationObject with the changed attributes.
 */
+ (OrgBouncycastleCmsSignerInformation *)addCounterSignersWithOrgBouncycastleCmsSignerInformation:(OrgBouncycastleCmsSignerInformation *)signerInformation
                                                     withOrgBouncycastleCmsSignerInformationStore:(OrgBouncycastleCmsSignerInformationStore *)counterSigners;

/*!
 @brief return the content digest that was calculated during verification.
 */
- (IOSByteArray *)getContentDigest;

- (OrgBouncycastleAsn1ASN1ObjectIdentifier *)getContentType;

/*!
 @brief Return a SignerInformationStore containing the counter signatures attached to this
  signer.If no counter signatures are present an empty store is returned.
 */
- (OrgBouncycastleCmsSignerInformationStore *)getCounterSignatures;

/*!
 @brief return the object identifier for the signature.
 */
- (NSString *)getDigestAlgOID;

- (OrgBouncycastleAsn1X509AlgorithmIdentifier *)getDigestAlgorithmID;

/*!
 @brief return the signature parameters, or null if there aren't any.
 */
- (IOSByteArray *)getDigestAlgParams;

/*!
 @brief return the DER encoding of the signed attributes.
 @throw IOExceptionif an encoding error occurs.
 */
- (IOSByteArray *)getEncodedSignedAttributes;

/*!
 @brief return the object identifier for the signature.
 */
- (NSString *)getEncryptionAlgOID;

/*!
 @brief return the signature/encryption algorithm parameters, or null if
  there aren't any.
 */
- (IOSByteArray *)getEncryptionAlgParams;

- (OrgBouncycastleCmsSignerId *)getSID;

/*!
 @brief return the encoded signature
 */
- (IOSByteArray *)getSignature;

/*!
 @brief return a table of the signed attributes - indexed by
  the OID of the attribute.
 */
- (OrgBouncycastleAsn1CmsAttributeTable *)getSignedAttributes;

/*!
 @brief return a table of the unsigned attributes indexed by
  the OID of the attribute.
 */
- (OrgBouncycastleAsn1CmsAttributeTable *)getUnsignedAttributes;

/*!
 @brief return the version number for this objects underlying SignerInfo structure.
 */
- (jint)getVersion;

- (jboolean)isCounterSignature;

/*!
 @brief Return a signer information object with the passed in unsigned
  attributes replacing the ones that are current associated with
  the object passed in.
 @param signerInformation the signerInfo to be used as the basis.
 @param unsignedAttributes the unsigned attributes to add.
 @return a copy of the original SignerInformationObject with the changed attributes.
 */
+ (OrgBouncycastleCmsSignerInformation *)replaceUnsignedAttributesWithOrgBouncycastleCmsSignerInformation:(OrgBouncycastleCmsSignerInformation *)signerInformation
                                                                 withOrgBouncycastleAsn1CmsAttributeTable:(OrgBouncycastleAsn1CmsAttributeTable *)unsignedAttributes;

/*!
 @brief Return the underlying ASN.1 object defining this SignerInformation object.
 @return a SignerInfo.
 */
- (OrgBouncycastleAsn1CmsSignerInfo *)toASN1Structure;

/*!
 @brief Verify that the given verifier can successfully verify the signature on
  this SignerInformation object.
 @param verifier a suitably configured SignerInformationVerifier.
 @return true if the signer information is verified, false otherwise.
 @throw org.bouncycastle.cms.CMSVerifierCertificateNotValidExceptionif the provider has an associated certificate and the certificate is not valid at the time given as the SignerInfo's signing time.
 @throw org.bouncycastle.cms.CMSExceptionif the verifier is unable to create a ContentVerifiers or DigestCalculators.
 */
- (jboolean)verifyWithOrgBouncycastleCmsSignerInformationVerifier:(OrgBouncycastleCmsSignerInformationVerifier *)verifier;

#pragma mark Protected

/*!
 @brief Protected constructor.In some cases clients have their own idea about how to encode
  the signed attributes and calculate the signature.
 This constructor is to allow developers
  to deal with that by extending off the class and overriding methods like getSignedAttributes().
 @param baseInfo the SignerInformation to base this one on.
 */
- (instancetype)initWithOrgBouncycastleCmsSignerInformation:(OrgBouncycastleCmsSignerInformation *)baseInfo;

/*!
 @brief Protected constructor.In some cases clients also have their own ideas about what
  goes in various SignerInfo fields.
 This constructor is to allow developers to deal with
  that by also tweaking the SignerInfo so that these issues can be dealt with.
 @param baseInfo the SignerInformation to base this one on.
 @param info the SignerInfo to associate with the existing baseInfo data.
 */
- (instancetype)initWithOrgBouncycastleCmsSignerInformation:(OrgBouncycastleCmsSignerInformation *)baseInfo
                       withOrgBouncycastleAsn1CmsSignerInfo:(OrgBouncycastleAsn1CmsSignerInfo *)info;

#pragma mark Package-Private

- (instancetype)initWithOrgBouncycastleAsn1CmsSignerInfo:(OrgBouncycastleAsn1CmsSignerInfo *)info
             withOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)contentType
                    withOrgBouncycastleCmsCMSProcessable:(id<OrgBouncycastleCmsCMSProcessable>)content
                                           withByteArray:(IOSByteArray *)resultDigest;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCmsSignerInformation)

J2OBJC_FIELD_SETTER(OrgBouncycastleCmsSignerInformation, info_, OrgBouncycastleAsn1CmsSignerInfo *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCmsSignerInformation, digestAlgorithm_, OrgBouncycastleAsn1X509AlgorithmIdentifier *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCmsSignerInformation, encryptionAlgorithm_, OrgBouncycastleAsn1X509AlgorithmIdentifier *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCmsSignerInformation, signedAttributeSet_, OrgBouncycastleAsn1ASN1Set *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCmsSignerInformation, unsignedAttributeSet_, OrgBouncycastleAsn1ASN1Set *)

FOUNDATION_EXPORT void OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleAsn1CmsSignerInfo_withOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleCmsCMSProcessable_withByteArray_(OrgBouncycastleCmsSignerInformation *self, OrgBouncycastleAsn1CmsSignerInfo *info, OrgBouncycastleAsn1ASN1ObjectIdentifier *contentType, id<OrgBouncycastleCmsCMSProcessable> content, IOSByteArray *resultDigest);

FOUNDATION_EXPORT OrgBouncycastleCmsSignerInformation *new_OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleAsn1CmsSignerInfo_withOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleCmsCMSProcessable_withByteArray_(OrgBouncycastleAsn1CmsSignerInfo *info, OrgBouncycastleAsn1ASN1ObjectIdentifier *contentType, id<OrgBouncycastleCmsCMSProcessable> content, IOSByteArray *resultDigest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCmsSignerInformation *create_OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleAsn1CmsSignerInfo_withOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleCmsCMSProcessable_withByteArray_(OrgBouncycastleAsn1CmsSignerInfo *info, OrgBouncycastleAsn1ASN1ObjectIdentifier *contentType, id<OrgBouncycastleCmsCMSProcessable> content, IOSByteArray *resultDigest);

FOUNDATION_EXPORT void OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleCmsSignerInformation_(OrgBouncycastleCmsSignerInformation *self, OrgBouncycastleCmsSignerInformation *baseInfo);

FOUNDATION_EXPORT OrgBouncycastleCmsSignerInformation *new_OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleCmsSignerInformation_(OrgBouncycastleCmsSignerInformation *baseInfo) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCmsSignerInformation *create_OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleCmsSignerInformation_(OrgBouncycastleCmsSignerInformation *baseInfo);

FOUNDATION_EXPORT void OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleCmsSignerInformation_withOrgBouncycastleAsn1CmsSignerInfo_(OrgBouncycastleCmsSignerInformation *self, OrgBouncycastleCmsSignerInformation *baseInfo, OrgBouncycastleAsn1CmsSignerInfo *info);

FOUNDATION_EXPORT OrgBouncycastleCmsSignerInformation *new_OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleCmsSignerInformation_withOrgBouncycastleAsn1CmsSignerInfo_(OrgBouncycastleCmsSignerInformation *baseInfo, OrgBouncycastleAsn1CmsSignerInfo *info) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCmsSignerInformation *create_OrgBouncycastleCmsSignerInformation_initWithOrgBouncycastleCmsSignerInformation_withOrgBouncycastleAsn1CmsSignerInfo_(OrgBouncycastleCmsSignerInformation *baseInfo, OrgBouncycastleAsn1CmsSignerInfo *info);

FOUNDATION_EXPORT OrgBouncycastleCmsSignerInformation *OrgBouncycastleCmsSignerInformation_replaceUnsignedAttributesWithOrgBouncycastleCmsSignerInformation_withOrgBouncycastleAsn1CmsAttributeTable_(OrgBouncycastleCmsSignerInformation *signerInformation, OrgBouncycastleAsn1CmsAttributeTable *unsignedAttributes);

FOUNDATION_EXPORT OrgBouncycastleCmsSignerInformation *OrgBouncycastleCmsSignerInformation_addCounterSignersWithOrgBouncycastleCmsSignerInformation_withOrgBouncycastleCmsSignerInformationStore_(OrgBouncycastleCmsSignerInformation *signerInformation, OrgBouncycastleCmsSignerInformationStore *counterSigners);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCmsSignerInformation)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCmsSignerInformation")
