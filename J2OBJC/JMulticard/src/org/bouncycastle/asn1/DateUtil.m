//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/DateUtil.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "org/bouncycastle/asn1/DateUtil.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/asn1/DateUtil must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleAsn1DateUtil ()

+ (JavaUtilLocale *)forEN;

+ (JavaLangLong *)longValueOfWithLong:(jlong)v;

@end

inline JavaLangLong *OrgBouncycastleAsn1DateUtil_get_ZERO(void);
inline JavaLangLong *OrgBouncycastleAsn1DateUtil_set_ZERO(JavaLangLong *value);
static JavaLangLong *OrgBouncycastleAsn1DateUtil_ZERO;
J2OBJC_STATIC_FIELD_OBJ(OrgBouncycastleAsn1DateUtil, ZERO, JavaLangLong *)

inline id<JavaUtilMap> OrgBouncycastleAsn1DateUtil_get_localeCache(void);
static id<JavaUtilMap> OrgBouncycastleAsn1DateUtil_localeCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleAsn1DateUtil, localeCache, id<JavaUtilMap>)

__attribute__((unused)) static JavaUtilLocale *OrgBouncycastleAsn1DateUtil_forEN(void);

__attribute__((unused)) static JavaLangLong *OrgBouncycastleAsn1DateUtil_longValueOfWithLong_(jlong v);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/DateUtil.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleAsn1DateUtil)

JavaUtilLocale *OrgBouncycastleAsn1DateUtil_EN_Locale;


#line 10
@implementation OrgBouncycastleAsn1DateUtil


#line 10
- (instancetype)initPackagePrivate {
  OrgBouncycastleAsn1DateUtil_initPackagePrivate(self);
  return self;
}


#line 18
+ (JavaUtilLocale *)forEN {
  return OrgBouncycastleAsn1DateUtil_forEN();
}


#line 37
+ (JavaUtilDate *)epochAdjustWithJavaUtilDate:(JavaUtilDate *)date {
  return OrgBouncycastleAsn1DateUtil_epochAdjustWithJavaUtilDate_(date);
}


#line 76
+ (JavaLangLong *)longValueOfWithLong:(jlong)v {
  return OrgBouncycastleAsn1DateUtil_longValueOfWithLong_(v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLocale;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x8, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0xa, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(forEN);
  methods[2].selector = @selector(epochAdjustWithJavaUtilDate:);
  methods[3].selector = @selector(longValueOfWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO", "LJavaLangLong;", .constantValue.asLong = 0, 0xa, -1, 5, -1, -1 },
    { "localeCache", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "EN_Locale", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x8, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "epochAdjust", "LJavaUtilDate;", "LJavaTextParseException;", "longValueOf", "J", &OrgBouncycastleAsn1DateUtil_ZERO, &OrgBouncycastleAsn1DateUtil_localeCache, &OrgBouncycastleAsn1DateUtil_EN_Locale };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1DateUtil = { "DateUtil", "org.bouncycastle.asn1", ptrTable, methods, fields, 7, 0x0, 4, 3, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1DateUtil;
}

+ (void)initialize {
  if (self == [OrgBouncycastleAsn1DateUtil class]) {
    OrgBouncycastleAsn1DateUtil_ZERO = OrgBouncycastleAsn1DateUtil_longValueOfWithLong_(
#line 12
    0);
    OrgBouncycastleAsn1DateUtil_localeCache = new_JavaUtilHashMap_init();
    OrgBouncycastleAsn1DateUtil_EN_Locale = OrgBouncycastleAsn1DateUtil_forEN();
    J2OBJC_SET_INITIALIZED(OrgBouncycastleAsn1DateUtil)
  }
}

@end


#line 10
void OrgBouncycastleAsn1DateUtil_initPackagePrivate(OrgBouncycastleAsn1DateUtil *self) {
  NSObject_init(self);
}


#line 10
OrgBouncycastleAsn1DateUtil *new_OrgBouncycastleAsn1DateUtil_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1DateUtil, initPackagePrivate)
}


#line 10
OrgBouncycastleAsn1DateUtil *create_OrgBouncycastleAsn1DateUtil_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1DateUtil, initPackagePrivate)
}


#line 18
JavaUtilLocale *OrgBouncycastleAsn1DateUtil_forEN() {
  OrgBouncycastleAsn1DateUtil_initialize();
  if ([@"en" java_equalsIgnoreCase:[((JavaUtilLocale *) nil_chk(JavaUtilLocale_getDefault())) getLanguage]]) {
    
#line 22
    return JavaUtilLocale_getDefault();
  }
  
#line 25
  IOSObjectArray *locales = JavaUtilLocale_getAvailableLocales();
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(locales))->size_; i++) {
    
#line 28
    if ([@"en" java_equalsIgnoreCase:[((JavaUtilLocale *) nil_chk(IOSObjectArray_Get(locales, i))) getLanguage]]) {
      
#line 30
      return IOSObjectArray_Get(locales, i);
    }
  }
  
#line 34
  return JavaUtilLocale_getDefault();
}


#line 37
JavaUtilDate *OrgBouncycastleAsn1DateUtil_epochAdjustWithJavaUtilDate_(JavaUtilDate *date) {
  OrgBouncycastleAsn1DateUtil_initialize();
  
#line 40
  JavaUtilLocale *locale = JavaUtilLocale_getDefault();
  if (locale == nil) {
    
#line 43
    return date;
  }
  
#line 46
  @synchronized(OrgBouncycastleAsn1DateUtil_localeCache) {
    
#line 48
    JavaLangLong *adj = (JavaLangLong *) cast_chk([((id<JavaUtilMap>) nil_chk(OrgBouncycastleAsn1DateUtil_localeCache)) getWithId:locale], [JavaLangLong class]);
    
#line 50
    if (adj == nil) {
      
#line 52
      JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmssz");
      jlong v = [((JavaUtilDate *) nil_chk([dateF parseWithNSString:@"19700101000000GMT+00:00"])) getTime];
      
#line 55
      if (v == 0) {
        
#line 57
        adj = OrgBouncycastleAsn1DateUtil_ZERO;
      }
      else {
        
#line 61
        adj = OrgBouncycastleAsn1DateUtil_longValueOfWithLong_(v);
      }
      
#line 64
      (void) [OrgBouncycastleAsn1DateUtil_localeCache putWithId:locale withId:adj];
    }
    
#line 67
    if (!JreObjectEqualsEquals(adj, OrgBouncycastleAsn1DateUtil_ZERO)) {
      
#line 69
      return new_JavaUtilDate_initWithLong_([((JavaUtilDate *) nil_chk(date)) getTime] - [((JavaLangLong *) nil_chk(adj)) longLongValue]);
    }
    
#line 72
    return JreRetainedLocalValue(date);
  }
}


#line 76
JavaLangLong *OrgBouncycastleAsn1DateUtil_longValueOfWithLong_(jlong v) {
  OrgBouncycastleAsn1DateUtil_initialize();
  return JavaLangLong_valueOfWithLong_(v);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1DateUtil)
