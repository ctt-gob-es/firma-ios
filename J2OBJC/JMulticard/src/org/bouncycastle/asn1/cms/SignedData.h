//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/cms/SignedData.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1CmsSignedData")
#ifdef RESTRICT_OrgBouncycastleAsn1CmsSignedData
#define INCLUDE_ALL_OrgBouncycastleAsn1CmsSignedData 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1CmsSignedData 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1CmsSignedData

#if !defined (OrgBouncycastleAsn1CmsSignedData_) && (INCLUDE_ALL_OrgBouncycastleAsn1CmsSignedData || defined(INCLUDE_OrgBouncycastleAsn1CmsSignedData))
#define OrgBouncycastleAsn1CmsSignedData_

#define RESTRICT_OrgBouncycastleAsn1ASN1Object 1
#define INCLUDE_OrgBouncycastleAsn1ASN1Object 1
#include "org/bouncycastle/asn1/ASN1Object.h"

@class OrgBouncycastleAsn1ASN1Integer;
@class OrgBouncycastleAsn1ASN1Primitive;
@class OrgBouncycastleAsn1ASN1Set;
@class OrgBouncycastleAsn1CmsContentInfo;

/*!
 @brief <a href="https://tools.ietf.org/html/rfc5652#section-5.1">RFC 5652</a>:
 <p>
  A signed data object containing multitude of <code>SignerInfo</code>s.
 @code

  SignedData ::= SEQUENCE {
      version CMSVersion,
      digestAlgorithms DigestAlgorithmIdentifiers,
      encapContentInfo EncapsulatedContentInfo,
      certificates [0] IMPLICIT CertificateSet OPTIONAL,
      crls [1] IMPLICIT CertificateRevocationLists OPTIONAL,
      signerInfos SignerInfos
    }
  DigestAlgorithmIdentifiers ::= SET OF DigestAlgorithmIdentifier
  SignerInfos ::= SET OF SignerInfo 
  
@endcode
  <p>
  The version calculation uses following ruleset from RFC 5652 section 5.1: 
 @code

  IF ((certificates is present) AND
     (any certificates with a type of other are present)) OR
     ((crls is present) AND
     (any crls with a type of other are present))
  THEN version MUST be 5
  ELSE
     IF (certificates is present) AND
        (any version 2 attribute certificates are present)
     THEN version MUST be 4
     ELSE
        IF ((certificates is present) AND
           (any version 1 attribute certificates are present)) OR
           (any SignerInfo structures are version 3) OR
           (encapContentInfo eContentType is other than id-data)
        THEN version MUST be 3
        ELSE version MUST be 1 
  
@endcode
  <p>
 */
@interface OrgBouncycastleAsn1CmsSignedData : OrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype)initWithOrgBouncycastleAsn1ASN1Set:(OrgBouncycastleAsn1ASN1Set *)digestAlgorithms
             withOrgBouncycastleAsn1CmsContentInfo:(OrgBouncycastleAsn1CmsContentInfo *)contentInfo
                    withOrgBouncycastleAsn1ASN1Set:(OrgBouncycastleAsn1ASN1Set *)certificates
                    withOrgBouncycastleAsn1ASN1Set:(OrgBouncycastleAsn1ASN1Set *)crls
                    withOrgBouncycastleAsn1ASN1Set:(OrgBouncycastleAsn1ASN1Set *)signerInfos;

- (OrgBouncycastleAsn1ASN1Set *)getCertificates;

- (OrgBouncycastleAsn1ASN1Set *)getCRLs;

- (OrgBouncycastleAsn1ASN1Set *)getDigestAlgorithms;

- (OrgBouncycastleAsn1CmsContentInfo *)getEncapContentInfo;

/*!
 @brief Return a SignedData object from the given object.
 <p>
  Accepted inputs: 
 <ul>
  <li> null &rarr; null 
 <li> <code>SignedData</code> object 
 <li> <code>ASN1Sequence</code> input formats with SignedData structure inside 
 </ul>
 @param o the object we want converted.
 @return a reference that can be assigned to SignedData (may be null)
 @throw IllegalArgumentExceptionif the object cannot be converted.
 */
+ (OrgBouncycastleAsn1CmsSignedData *)getInstanceWithId:(id)o;

- (OrgBouncycastleAsn1ASN1Set *)getSignerInfos;

- (OrgBouncycastleAsn1ASN1Integer *)getVersion;

/*!
 @brief Produce an object suitable for an ASN1OutputStream.
 */
- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleAsn1CmsSignedData)

FOUNDATION_EXPORT OrgBouncycastleAsn1CmsSignedData *OrgBouncycastleAsn1CmsSignedData_getInstanceWithId_(id o);

FOUNDATION_EXPORT void OrgBouncycastleAsn1CmsSignedData_initWithOrgBouncycastleAsn1ASN1Set_withOrgBouncycastleAsn1CmsContentInfo_withOrgBouncycastleAsn1ASN1Set_withOrgBouncycastleAsn1ASN1Set_withOrgBouncycastleAsn1ASN1Set_(OrgBouncycastleAsn1CmsSignedData *self, OrgBouncycastleAsn1ASN1Set *digestAlgorithms, OrgBouncycastleAsn1CmsContentInfo *contentInfo, OrgBouncycastleAsn1ASN1Set *certificates, OrgBouncycastleAsn1ASN1Set *crls, OrgBouncycastleAsn1ASN1Set *signerInfos);

FOUNDATION_EXPORT OrgBouncycastleAsn1CmsSignedData *new_OrgBouncycastleAsn1CmsSignedData_initWithOrgBouncycastleAsn1ASN1Set_withOrgBouncycastleAsn1CmsContentInfo_withOrgBouncycastleAsn1ASN1Set_withOrgBouncycastleAsn1ASN1Set_withOrgBouncycastleAsn1ASN1Set_(OrgBouncycastleAsn1ASN1Set *digestAlgorithms, OrgBouncycastleAsn1CmsContentInfo *contentInfo, OrgBouncycastleAsn1ASN1Set *certificates, OrgBouncycastleAsn1ASN1Set *crls, OrgBouncycastleAsn1ASN1Set *signerInfos) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1CmsSignedData *create_OrgBouncycastleAsn1CmsSignedData_initWithOrgBouncycastleAsn1ASN1Set_withOrgBouncycastleAsn1CmsContentInfo_withOrgBouncycastleAsn1ASN1Set_withOrgBouncycastleAsn1ASN1Set_withOrgBouncycastleAsn1ASN1Set_(OrgBouncycastleAsn1ASN1Set *digestAlgorithms, OrgBouncycastleAsn1CmsContentInfo *contentInfo, OrgBouncycastleAsn1ASN1Set *certificates, OrgBouncycastleAsn1ASN1Set *crls, OrgBouncycastleAsn1ASN1Set *signerInfos);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1CmsSignedData)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1CmsSignedData")
