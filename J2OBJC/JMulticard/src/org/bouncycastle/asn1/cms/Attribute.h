//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/cms/Attribute.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1CmsAttribute")
#ifdef RESTRICT_OrgBouncycastleAsn1CmsAttribute
#define INCLUDE_ALL_OrgBouncycastleAsn1CmsAttribute 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1CmsAttribute 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1CmsAttribute

#if !defined (OrgBouncycastleAsn1CmsAttribute_) && (INCLUDE_ALL_OrgBouncycastleAsn1CmsAttribute || defined(INCLUDE_OrgBouncycastleAsn1CmsAttribute))
#define OrgBouncycastleAsn1CmsAttribute_

#define RESTRICT_OrgBouncycastleAsn1ASN1Object 1
#define INCLUDE_OrgBouncycastleAsn1ASN1Object 1
#include "org/bouncycastle/asn1/ASN1Object.h"

@class IOSObjectArray;
@class OrgBouncycastleAsn1ASN1ObjectIdentifier;
@class OrgBouncycastleAsn1ASN1Primitive;
@class OrgBouncycastleAsn1ASN1Set;

/*!
 @brief <a href="https://tools.ietf.org/html/rfc5652#page-14">RFC 5652</a>:
  Attribute is a pair of OID (as type identifier) + set of values.
 <p>
  @code

  Attribute ::= SEQUENCE {
      attrType OBJECT IDENTIFIER,
      attrValues SET OF AttributeValue
  }
  AttributeValue ::= ANY 
  
@endcode
  <p>
  General rule on values is that same AttributeValue must not be included
  multiple times into the set. That is, if the value is a SET OF INTEGERs,
  then having same value repeated is wrong: (1, 1), but different values is OK: (1, 2).
  Normally the AttributeValue syntaxes are more complicated than that. 
 <p>
  General rule of Attribute usage is that the <code>Attributes</code> containers
  must not have multiple Attribute:s with same attrType (OID) there.
 */
@interface OrgBouncycastleAsn1CmsAttribute : OrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype)initWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)attrType
                                 withOrgBouncycastleAsn1ASN1Set:(OrgBouncycastleAsn1ASN1Set *)attrValues;

- (IOSObjectArray *)getAttributeValues;

- (OrgBouncycastleAsn1ASN1ObjectIdentifier *)getAttrType;

- (OrgBouncycastleAsn1ASN1Set *)getAttrValues;

/*!
 @brief Return an Attribute object from the given object.
 <p>
  Accepted inputs: 
 <ul>
  <li> null &rarr; null 
 <li> <code>Attribute</code> object 
 <li> <code>ASN1Sequence</code> input formats with Attribute structure inside 
 </ul>
 @param o the object we want converted.
 @throw IllegalArgumentExceptionif the object cannot be converted.
 */
+ (OrgBouncycastleAsn1CmsAttribute *)getInstanceWithId:(id)o;

/*!
 @brief Produce an object suitable for an ASN1OutputStream.
 */
- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleAsn1CmsAttribute)

FOUNDATION_EXPORT OrgBouncycastleAsn1CmsAttribute *OrgBouncycastleAsn1CmsAttribute_getInstanceWithId_(id o);

FOUNDATION_EXPORT void OrgBouncycastleAsn1CmsAttribute_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleAsn1ASN1Set_(OrgBouncycastleAsn1CmsAttribute *self, OrgBouncycastleAsn1ASN1ObjectIdentifier *attrType, OrgBouncycastleAsn1ASN1Set *attrValues);

FOUNDATION_EXPORT OrgBouncycastleAsn1CmsAttribute *new_OrgBouncycastleAsn1CmsAttribute_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleAsn1ASN1Set_(OrgBouncycastleAsn1ASN1ObjectIdentifier *attrType, OrgBouncycastleAsn1ASN1Set *attrValues) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1CmsAttribute *create_OrgBouncycastleAsn1CmsAttribute_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleAsn1ASN1Set_(OrgBouncycastleAsn1ASN1ObjectIdentifier *attrType, OrgBouncycastleAsn1ASN1Set *attrValues);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1CmsAttribute)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1CmsAttribute")
