//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/DLBitStringParser.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalStateException.h"
#include "org/bouncycastle/asn1/ASN1BitString.h"
#include "org/bouncycastle/asn1/ASN1ParsingException.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/DLBitStringParser.h"
#include "org/bouncycastle/asn1/DefiniteLengthInputStream.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/asn1/DLBitStringParser must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleAsn1DLBitStringParser () {
 @public
  OrgBouncycastleAsn1DefiniteLengthInputStream *stream_;
  jint padBits_;
}

- (JavaIoInputStream *)getBitStreamWithBoolean:(jboolean)octetAligned;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1DLBitStringParser, stream_, OrgBouncycastleAsn1DefiniteLengthInputStream *)

__attribute__((unused)) static JavaIoInputStream *OrgBouncycastleAsn1DLBitStringParser_getBitStreamWithBoolean_(OrgBouncycastleAsn1DLBitStringParser *self, jboolean octetAligned);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/DLBitStringParser.java"


#line 9
@implementation OrgBouncycastleAsn1DLBitStringParser


#line 15
- (instancetype)initWithOrgBouncycastleAsn1DefiniteLengthInputStream:(OrgBouncycastleAsn1DefiniteLengthInputStream *)stream {
  OrgBouncycastleAsn1DLBitStringParser_initWithOrgBouncycastleAsn1DefiniteLengthInputStream_(self, stream);
  return self;
}


#line 21
- (JavaIoInputStream *)getBitStream {
  
#line 24
  return OrgBouncycastleAsn1DLBitStringParser_getBitStreamWithBoolean_(self, false);
}

- (JavaIoInputStream *)getOctetStream {
  
#line 30
  return OrgBouncycastleAsn1DLBitStringParser_getBitStreamWithBoolean_(self, true);
}

- (jint)getPadBits {
  
#line 36
  return padBits_;
}

- (OrgBouncycastleAsn1ASN1Primitive *)getLoadedObject {
  
#line 43
  return OrgBouncycastleAsn1ASN1BitString_createPrimitiveWithByteArray_([((OrgBouncycastleAsn1DefiniteLengthInputStream *) nil_chk(stream_)) toByteArray]);
}


#line 46
- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  
#line 49
  @try {
    
#line 51
    return [self getLoadedObject];
  }
  @catch (JavaIoIOException *e) {
    
#line 55
    @throw new_OrgBouncycastleAsn1ASN1ParsingException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"IOException converting stream to byte array: ", [e getMessage]), e);
  }
}


#line 59
- (JavaIoInputStream *)getBitStreamWithBoolean:(jboolean)octetAligned {
  return OrgBouncycastleAsn1DLBitStringParser_getBitStreamWithBoolean_(self, octetAligned);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x2, 2, 3, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleAsn1DefiniteLengthInputStream:);
  methods[1].selector = @selector(getBitStream);
  methods[2].selector = @selector(getOctetStream);
  methods[3].selector = @selector(getPadBits);
  methods[4].selector = @selector(getLoadedObject);
  methods[5].selector = @selector(toASN1Primitive);
  methods[6].selector = @selector(getBitStreamWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stream_", "LOrgBouncycastleAsn1DefiniteLengthInputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "padBits_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleAsn1DefiniteLengthInputStream;", "LJavaIoIOException;", "getBitStream", "Z" };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1DLBitStringParser = { "DLBitStringParser", "org.bouncycastle.asn1", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1DLBitStringParser;
}

@end


#line 15
void OrgBouncycastleAsn1DLBitStringParser_initWithOrgBouncycastleAsn1DefiniteLengthInputStream_(OrgBouncycastleAsn1DLBitStringParser *self, OrgBouncycastleAsn1DefiniteLengthInputStream *stream) {
  NSObject_init(self);
  self->padBits_ =
#line 13
  0;
  
#line 18
  self->stream_ = stream;
}


#line 15
OrgBouncycastleAsn1DLBitStringParser *new_OrgBouncycastleAsn1DLBitStringParser_initWithOrgBouncycastleAsn1DefiniteLengthInputStream_(OrgBouncycastleAsn1DefiniteLengthInputStream *stream) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1DLBitStringParser, initWithOrgBouncycastleAsn1DefiniteLengthInputStream_, stream)
}


#line 15
OrgBouncycastleAsn1DLBitStringParser *create_OrgBouncycastleAsn1DLBitStringParser_initWithOrgBouncycastleAsn1DefiniteLengthInputStream_(OrgBouncycastleAsn1DefiniteLengthInputStream *stream) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1DLBitStringParser, initWithOrgBouncycastleAsn1DefiniteLengthInputStream_, stream)
}


#line 59
JavaIoInputStream *OrgBouncycastleAsn1DLBitStringParser_getBitStreamWithBoolean_(OrgBouncycastleAsn1DLBitStringParser *self, jboolean octetAligned) {
  
#line 61
  jint length = [((OrgBouncycastleAsn1DefiniteLengthInputStream *) nil_chk(self->stream_)) getRemaining];
  if (length < 1) {
    
#line 64
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"content octets cannot be empty");
  }
  
#line 67
  self->padBits_ = [self->stream_ read];
  if (self->padBits_ > 0) {
    
#line 70
    if (length < 2) {
      
#line 72
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"zero length data with non-zero pad bits");
    }
    if (self->padBits_ > 7) {
      
#line 76
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"pad bits cannot be greater than 7 or less than 0");
    }
    if (octetAligned) {
      
#line 80
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"expected octet-aligned bitstring, but found padBits: ", self->padBits_));
    }
  }
  
#line 84
  return self->stream_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1DLBitStringParser)
