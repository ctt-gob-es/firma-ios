//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1BitString.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1ASN1BitString")
#ifdef RESTRICT_OrgBouncycastleAsn1ASN1BitString
#define INCLUDE_ALL_OrgBouncycastleAsn1ASN1BitString 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1ASN1BitString 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1ASN1BitString

#if !defined (OrgBouncycastleAsn1ASN1BitString_) && (INCLUDE_ALL_OrgBouncycastleAsn1ASN1BitString || defined(INCLUDE_OrgBouncycastleAsn1ASN1BitString))
#define OrgBouncycastleAsn1ASN1BitString_

#define RESTRICT_OrgBouncycastleAsn1ASN1Primitive 1
#define INCLUDE_OrgBouncycastleAsn1ASN1Primitive 1
#include "org/bouncycastle/asn1/ASN1Primitive.h"

#define RESTRICT_OrgBouncycastleAsn1ASN1String 1
#define INCLUDE_OrgBouncycastleAsn1ASN1String 1
#include "org/bouncycastle/asn1/ASN1String.h"

#define RESTRICT_OrgBouncycastleAsn1ASN1BitStringParser 1
#define INCLUDE_OrgBouncycastleAsn1ASN1BitStringParser 1
#include "org/bouncycastle/asn1/ASN1BitStringParser.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class OrgBouncycastleAsn1ASN1TaggedObject;
@class OrgBouncycastleAsn1ASN1UniversalType;

/*!
 @brief Base class for BIT STRING objects
 */
@interface OrgBouncycastleAsn1ASN1BitString : OrgBouncycastleAsn1ASN1Primitive < OrgBouncycastleAsn1ASN1String, OrgBouncycastleAsn1ASN1BitStringParser > {
 @public
  IOSByteArray *contents_;
}

#pragma mark Public

- (JavaIoInputStream *)getBitStream;

- (IOSByteArray *)getBytes;

+ (OrgBouncycastleAsn1ASN1BitString *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)taggedObject
                                                                             withBoolean:(jboolean)explicit_;

+ (OrgBouncycastleAsn1ASN1BitString *)getInstanceWithId:(id)obj;

- (OrgBouncycastleAsn1ASN1Primitive *)getLoadedObject;

/*!
 @brief Return the octets contained in this BIT STRING, checking that this BIT STRING really
  does represent an octet aligned string.Only use this method when the standard you are
  following dictates that the BIT STRING will be octet aligned.
 @return a copy of the octet aligned data.
 */
- (IOSByteArray *)getOctets;

- (JavaIoInputStream *)getOctetStream;

- (jint)getPadBits;

/*!
 @brief Return a String representation of this BIT STRING
 @return a String representation.
 */
- (NSString *)getString;

- (NSUInteger)hash;

/*!
 @return the value of the bit string as an int (truncating if necessary)
 */
- (jint)intValue;

- (id<OrgBouncycastleAsn1ASN1BitStringParser>)parser;

- (NSString *)description;

#pragma mark Protected

/*!
 @param bitString an int containing the BIT STRING
 @return the correct number of bytes for a bit string defined in
  a 32 bit constant
 */
+ (IOSByteArray *)getBytesWithInt:(jint)bitString;

/*!
 @param bitString an int containing the BIT STRING
 @return the correct number of pad bits for a bit string defined in
  a 32 bit constant
 */
+ (jint)getPadBitsWithInt:(jint)bitString;

#pragma mark Package-Private

- (instancetype)initWithByte:(jbyte)data
                     withInt:(jint)padBits;

- (instancetype)initWithByteArray:(IOSByteArray *)contents
                      withBoolean:(jboolean)check;

/*!
 @brief Base constructor.
 @param data the octets making up the bit string.
 @param padBits the number of extra bits at the end of the string.
 */
- (instancetype)initWithByteArray:(IOSByteArray *)data
                          withInt:(jint)padBits;

- (jboolean)asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:(OrgBouncycastleAsn1ASN1Primitive *)other;

+ (OrgBouncycastleAsn1ASN1BitString *)createPrimitiveWithByteArray:(IOSByteArray *)contents;

- (OrgBouncycastleAsn1ASN1Primitive *)toDERObject;

- (OrgBouncycastleAsn1ASN1Primitive *)toDLObject;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleAsn1ASN1BitString)

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1ASN1BitString, contents_, IOSByteArray *)

inline OrgBouncycastleAsn1ASN1UniversalType *OrgBouncycastleAsn1ASN1BitString_get_TYPE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1UniversalType *OrgBouncycastleAsn1ASN1BitString_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleAsn1ASN1BitString, TYPE, OrgBouncycastleAsn1ASN1UniversalType *)

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1BitString *OrgBouncycastleAsn1ASN1BitString_getInstanceWithId_(id obj);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1BitString *OrgBouncycastleAsn1ASN1BitString_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *taggedObject, jboolean explicit_);

FOUNDATION_EXPORT jint OrgBouncycastleAsn1ASN1BitString_getPadBitsWithInt_(jint bitString);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleAsn1ASN1BitString_getBytesWithInt_(jint bitString);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1BitString_initWithByte_withInt_(OrgBouncycastleAsn1ASN1BitString *self, jbyte data, jint padBits);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1BitString_initWithByteArray_withInt_(OrgBouncycastleAsn1ASN1BitString *self, IOSByteArray *data, jint padBits);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1BitString_initWithByteArray_withBoolean_(OrgBouncycastleAsn1ASN1BitString *self, IOSByteArray *contents, jboolean check);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1BitString *OrgBouncycastleAsn1ASN1BitString_createPrimitiveWithByteArray_(IOSByteArray *contents);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1ASN1BitString)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1ASN1BitString")
