//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x500/style/IETFUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"
#include "java/util/Vector.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1Encoding.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1String.h"
#include "org/bouncycastle/asn1/ASN1UniversalString.h"
#include "org/bouncycastle/asn1/x500/AttributeTypeAndValue.h"
#include "org/bouncycastle/asn1/x500/RDN.h"
#include "org/bouncycastle/asn1/x500/X500Name.h"
#include "org/bouncycastle/asn1/x500/X500NameBuilder.h"
#include "org/bouncycastle/asn1/x500/X500NameStyle.h"
#include "org/bouncycastle/asn1/x500/style/IETFUtils.h"
#include "org/bouncycastle/asn1/x500/style/X500NameTokenizer.h"
#include "org/bouncycastle/util/Strings.h"
#include "org/bouncycastle/util/encoders/Hex.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/asn1/x500/style/IETFUtils must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleAsn1X500StyleIETFUtils ()

+ (NSString *)unescapeWithNSString:(NSString *)elt;

+ (jboolean)isHexDigitWithChar:(jchar)c;

+ (jint)convertHexWithChar:(jchar)c;

+ (IOSObjectArray *)toValueArrayWithJavaUtilVector:(JavaUtilVector *)values;

+ (IOSObjectArray *)toOIDArrayWithJavaUtilVector:(JavaUtilVector *)oids;

+ (OrgBouncycastleAsn1ASN1Primitive *)decodeObjectWithNSString:(NSString *)oValue;

+ (jboolean)atvAreEqualWithOrgBouncycastleAsn1X500AttributeTypeAndValue:(OrgBouncycastleAsn1X500AttributeTypeAndValue *)atv1
                       withOrgBouncycastleAsn1X500AttributeTypeAndValue:(OrgBouncycastleAsn1X500AttributeTypeAndValue *)atv2;

@end

__attribute__((unused)) static NSString *OrgBouncycastleAsn1X500StyleIETFUtils_unescapeWithNSString_(NSString *elt);

__attribute__((unused)) static jboolean OrgBouncycastleAsn1X500StyleIETFUtils_isHexDigitWithChar_(jchar c);

__attribute__((unused)) static jint OrgBouncycastleAsn1X500StyleIETFUtils_convertHexWithChar_(jchar c);

__attribute__((unused)) static IOSObjectArray *OrgBouncycastleAsn1X500StyleIETFUtils_toValueArrayWithJavaUtilVector_(JavaUtilVector *values);

__attribute__((unused)) static IOSObjectArray *OrgBouncycastleAsn1X500StyleIETFUtils_toOIDArrayWithJavaUtilVector_(JavaUtilVector *oids);

__attribute__((unused)) static OrgBouncycastleAsn1ASN1Primitive *OrgBouncycastleAsn1X500StyleIETFUtils_decodeObjectWithNSString_(NSString *oValue);

__attribute__((unused)) static jboolean OrgBouncycastleAsn1X500StyleIETFUtils_atvAreEqualWithOrgBouncycastleAsn1X500AttributeTypeAndValue_withOrgBouncycastleAsn1X500AttributeTypeAndValue_(OrgBouncycastleAsn1X500AttributeTypeAndValue *atv1, OrgBouncycastleAsn1X500AttributeTypeAndValue *atv2);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x500/style/IETFUtils.java"


#line 21
@implementation OrgBouncycastleAsn1X500StyleIETFUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 21
- (instancetype)init {
  OrgBouncycastleAsn1X500StyleIETFUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 23
+ (NSString *)unescapeWithNSString:(NSString *)elt {
  return OrgBouncycastleAsn1X500StyleIETFUtils_unescapeWithNSString_(elt);
}


#line 111
+ (jboolean)isHexDigitWithChar:(jchar)c {
  return OrgBouncycastleAsn1X500StyleIETFUtils_isHexDigitWithChar_(c);
}


#line 116
+ (jint)convertHexWithChar:(jchar)c {
  return OrgBouncycastleAsn1X500StyleIETFUtils_convertHexWithChar_(c);
}


#line 129
+ (IOSObjectArray *)rDNsFromStringWithNSString:(NSString *)name
      withOrgBouncycastleAsn1X500X500NameStyle:(id<OrgBouncycastleAsn1X500X500NameStyle>)x500Style {
  return OrgBouncycastleAsn1X500StyleIETFUtils_rDNsFromStringWithNSString_withOrgBouncycastleAsn1X500X500NameStyle_(name, x500Style);
}


#line 208
+ (IOSObjectArray *)toValueArrayWithJavaUtilVector:(JavaUtilVector *)values {
  return OrgBouncycastleAsn1X500StyleIETFUtils_toValueArrayWithJavaUtilVector_(values);
}


#line 220
+ (IOSObjectArray *)toOIDArrayWithJavaUtilVector:(JavaUtilVector *)oids {
  return OrgBouncycastleAsn1X500StyleIETFUtils_toOIDArrayWithJavaUtilVector_(oids);
}


#line 232
+ (IOSObjectArray *)findAttrNamesForOIDWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                                                             withJavaUtilHashtable:(JavaUtilHashtable *)lookup {
  return OrgBouncycastleAsn1X500StyleIETFUtils_findAttrNamesForOIDWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilHashtable_(oid, lookup);
}


#line 260
+ (OrgBouncycastleAsn1ASN1ObjectIdentifier *)decodeAttrNameWithNSString:(NSString *)name
                                                  withJavaUtilHashtable:(JavaUtilHashtable *)lookUp {
  return OrgBouncycastleAsn1X500StyleIETFUtils_decodeAttrNameWithNSString_withJavaUtilHashtable_(name, lookUp);
}


#line 282
+ (id<OrgBouncycastleAsn1ASN1Encodable>)valueFromHexStringWithNSString:(NSString *)str
                                                               withInt:(jint)off {
  return OrgBouncycastleAsn1X500StyleIETFUtils_valueFromHexStringWithNSString_withInt_(str, off);
}


#line 299
+ (void)appendRDNWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
           withOrgBouncycastleAsn1X500RDN:(OrgBouncycastleAsn1X500RDN *)rdn
                    withJavaUtilHashtable:(JavaUtilHashtable *)oidSymbols {
  OrgBouncycastleAsn1X500StyleIETFUtils_appendRDNWithJavaLangStringBuffer_withOrgBouncycastleAsn1X500RDN_withJavaUtilHashtable_(buf, rdn, oidSymbols);
}


#line 332
+ (void)appendTypeAndValueWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf
  withOrgBouncycastleAsn1X500AttributeTypeAndValue:(OrgBouncycastleAsn1X500AttributeTypeAndValue *)typeAndValue
                             withJavaUtilHashtable:(JavaUtilHashtable *)oidSymbols {
  OrgBouncycastleAsn1X500StyleIETFUtils_appendTypeAndValueWithJavaLangStringBuffer_withOrgBouncycastleAsn1X500AttributeTypeAndValue_withJavaUtilHashtable_(buf, typeAndValue, oidSymbols);
}


#line 353
+ (NSString *)valueToStringWithOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)value {
  return OrgBouncycastleAsn1X500StyleIETFUtils_valueToStringWithOrgBouncycastleAsn1ASN1Encodable_(value);
}


#line 436
+ (NSString *)canonicalizeWithNSString:(NSString *)s {
  return OrgBouncycastleAsn1X500StyleIETFUtils_canonicalizeWithNSString_(s);
}


#line 475
+ (NSString *)canonicalStringWithOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)value {
  return OrgBouncycastleAsn1X500StyleIETFUtils_canonicalStringWithOrgBouncycastleAsn1ASN1Encodable_(value);
}


#line 480
+ (OrgBouncycastleAsn1ASN1Primitive *)decodeObjectWithNSString:(NSString *)oValue {
  return OrgBouncycastleAsn1X500StyleIETFUtils_decodeObjectWithNSString_(oValue);
}


#line 492
+ (NSString *)stripInternalSpacesWithNSString:(NSString *)str {
  return OrgBouncycastleAsn1X500StyleIETFUtils_stripInternalSpacesWithNSString_(str);
}


#line 518
+ (jboolean)rDNAreEqualWithOrgBouncycastleAsn1X500RDN:(OrgBouncycastleAsn1X500RDN *)rdn1
                       withOrgBouncycastleAsn1X500RDN:(OrgBouncycastleAsn1X500RDN *)rdn2 {
  return OrgBouncycastleAsn1X500StyleIETFUtils_rDNAreEqualWithOrgBouncycastleAsn1X500RDN_withOrgBouncycastleAsn1X500RDN_(rdn1, rdn2);
}


#line 544
+ (jboolean)atvAreEqualWithOrgBouncycastleAsn1X500AttributeTypeAndValue:(OrgBouncycastleAsn1X500AttributeTypeAndValue *)atv1
                       withOrgBouncycastleAsn1X500AttributeTypeAndValue:(OrgBouncycastleAsn1X500AttributeTypeAndValue *)atv2 {
  return OrgBouncycastleAsn1X500StyleIETFUtils_atvAreEqualWithOrgBouncycastleAsn1X500AttributeTypeAndValue_withOrgBouncycastleAsn1X500AttributeTypeAndValue_(atv1, atv2);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 4, 3, -1, -1, -1, -1 },
    { NULL, "[LOrgBouncycastleAsn1X500RDN;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "[LOrgBouncycastleAsn1ASN1ObjectIdentifier;", 0xa, 9, 8, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Encodable;", 0x9, 14, 15, 16, -1, -1, -1 },
    { NULL, "V", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 23, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 24, 22, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0xa, 25, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 26, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 27, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 29, 30, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(unescapeWithNSString:);
  methods[2].selector = @selector(isHexDigitWithChar:);
  methods[3].selector = @selector(convertHexWithChar:);
  methods[4].selector = @selector(rDNsFromStringWithNSString:withOrgBouncycastleAsn1X500X500NameStyle:);
  methods[5].selector = @selector(toValueArrayWithJavaUtilVector:);
  methods[6].selector = @selector(toOIDArrayWithJavaUtilVector:);
  methods[7].selector = @selector(findAttrNamesForOIDWithOrgBouncycastleAsn1ASN1ObjectIdentifier:withJavaUtilHashtable:);
  methods[8].selector = @selector(decodeAttrNameWithNSString:withJavaUtilHashtable:);
  methods[9].selector = @selector(valueFromHexStringWithNSString:withInt:);
  methods[10].selector = @selector(appendRDNWithJavaLangStringBuffer:withOrgBouncycastleAsn1X500RDN:withJavaUtilHashtable:);
  methods[11].selector = @selector(appendTypeAndValueWithJavaLangStringBuffer:withOrgBouncycastleAsn1X500AttributeTypeAndValue:withJavaUtilHashtable:);
  methods[12].selector = @selector(valueToStringWithOrgBouncycastleAsn1ASN1Encodable:);
  methods[13].selector = @selector(canonicalizeWithNSString:);
  methods[14].selector = @selector(canonicalStringWithOrgBouncycastleAsn1ASN1Encodable:);
  methods[15].selector = @selector(decodeObjectWithNSString:);
  methods[16].selector = @selector(stripInternalSpacesWithNSString:);
  methods[17].selector = @selector(rDNAreEqualWithOrgBouncycastleAsn1X500RDN:withOrgBouncycastleAsn1X500RDN:);
  methods[18].selector = @selector(atvAreEqualWithOrgBouncycastleAsn1X500AttributeTypeAndValue:withOrgBouncycastleAsn1X500AttributeTypeAndValue:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "unescape", "LNSString;", "isHexDigit", "C", "convertHex", "rDNsFromString", "LNSString;LOrgBouncycastleAsn1X500X500NameStyle;", "toValueArray", "LJavaUtilVector;", "toOIDArray", "findAttrNamesForOID", "LOrgBouncycastleAsn1ASN1ObjectIdentifier;LJavaUtilHashtable;", "decodeAttrName", "LNSString;LJavaUtilHashtable;", "valueFromHexString", "LNSString;I", "LJavaIoIOException;", "appendRDN", "LJavaLangStringBuffer;LOrgBouncycastleAsn1X500RDN;LJavaUtilHashtable;", "appendTypeAndValue", "LJavaLangStringBuffer;LOrgBouncycastleAsn1X500AttributeTypeAndValue;LJavaUtilHashtable;", "valueToString", "LOrgBouncycastleAsn1ASN1Encodable;", "canonicalize", "canonicalString", "decodeObject", "stripInternalSpaces", "rDNAreEqual", "LOrgBouncycastleAsn1X500RDN;LOrgBouncycastleAsn1X500RDN;", "atvAreEqual", "LOrgBouncycastleAsn1X500AttributeTypeAndValue;LOrgBouncycastleAsn1X500AttributeTypeAndValue;" };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1X500StyleIETFUtils = { "IETFUtils", "org.bouncycastle.asn1.x500.style", ptrTable, methods, NULL, 7, 0x1, 19, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1X500StyleIETFUtils;
}

@end


#line 21
void OrgBouncycastleAsn1X500StyleIETFUtils_init(OrgBouncycastleAsn1X500StyleIETFUtils *self) {
  NSObject_init(self);
}


#line 21
OrgBouncycastleAsn1X500StyleIETFUtils *new_OrgBouncycastleAsn1X500StyleIETFUtils_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1X500StyleIETFUtils, init)
}


#line 21
OrgBouncycastleAsn1X500StyleIETFUtils *create_OrgBouncycastleAsn1X500StyleIETFUtils_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1X500StyleIETFUtils, init)
}


#line 23
NSString *OrgBouncycastleAsn1X500StyleIETFUtils_unescapeWithNSString_(NSString *elt) {
  OrgBouncycastleAsn1X500StyleIETFUtils_initialize();
  if ([((NSString *) nil_chk(elt)) java_length] == 0 || ([elt java_indexOf:'\\'] < 0 && [elt java_indexOf:'"'] < 0)) {
    
#line 27
    return [elt java_trim];
  }
  
#line 30
  IOSCharArray *elts = [elt java_toCharArray];
  jboolean escaped = false;
  jboolean quoted = false;
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_initWithInt_([elt java_length]);
  jint start = 0;
  
#line 38
  if (IOSCharArray_Get(nil_chk(elts), 0) == '\\') {
    
#line 40
    if (IOSCharArray_Get(elts, 1) == '#') {
      
#line 42
      start = 2;
      (void) [buf appendWithNSString:@"\\#"];
    }
  }
  
#line 47
  jboolean nonWhiteSpaceEncountered = false;
  jint lastEscaped = 0;
  jchar hex1 = 0;
  
#line 51
  for (jint i = start; i != elts->size_; i++) {
    
#line 53
    jchar c = IOSCharArray_Get(elts, i);
    
#line 55
    if (c != ' ') {
      
#line 57
      nonWhiteSpaceEncountered = true;
    }
    
#line 60
    if (c == '"') {
      
#line 62
      if (!escaped) {
        
#line 64
        quoted = !quoted;
      }
      else {
        
#line 68
        (void) [buf appendWithChar:c];
      }
      escaped = false;
    }
    else if (c == '\\' && !(escaped || quoted)) {
      
#line 74
      escaped = true;
      lastEscaped = [buf java_length];
    }
    else {
      
#line 79
      if (c == ' ' && !escaped && !nonWhiteSpaceEncountered) {
        
#line 81
        continue;
      }
      if (escaped && OrgBouncycastleAsn1X500StyleIETFUtils_isHexDigitWithChar_(c)) {
        
#line 85
        if (hex1 != 0) {
          
#line 87
          (void) [buf appendWithChar:(jchar) (OrgBouncycastleAsn1X500StyleIETFUtils_convertHexWithChar_(hex1) * 16 + OrgBouncycastleAsn1X500StyleIETFUtils_convertHexWithChar_(c))];
          escaped = false;
          hex1 = 0;
          continue;
        }
        hex1 = c;
        continue;
      }
      (void) [buf appendWithChar:c];
      escaped = false;
    }
  }
  
#line 100
  if ([buf java_length] > 0) {
    
#line 102
    while ([buf charAtWithInt:[buf java_length] - 1] == ' ' && lastEscaped != ([buf java_length] - 1)) {
      
#line 104
      [buf setLengthWithInt:[buf java_length] - 1];
    }
  }
  
#line 108
  return [buf description];
}


#line 111
jboolean OrgBouncycastleAsn1X500StyleIETFUtils_isHexDigitWithChar_(jchar c) {
  OrgBouncycastleAsn1X500StyleIETFUtils_initialize();
  return ('0' <= c && c <= '9') || ('a' <= c && c <= 'f') || ('A' <= c && c <= 'F');
}

jint OrgBouncycastleAsn1X500StyleIETFUtils_convertHexWithChar_(jchar c) {
  OrgBouncycastleAsn1X500StyleIETFUtils_initialize();
  if ('0' <= c && c <= '9') {
    
#line 120
    return c - '0';
  }
  if ('a' <= c && c <= 'f') {
    
#line 124
    return c - 'a' + 10;
  }
  return c - 'A' + 10;
}


#line 129
IOSObjectArray *OrgBouncycastleAsn1X500StyleIETFUtils_rDNsFromStringWithNSString_withOrgBouncycastleAsn1X500X500NameStyle_(NSString *name, id<OrgBouncycastleAsn1X500X500NameStyle> x500Style) {
  OrgBouncycastleAsn1X500StyleIETFUtils_initialize();
  OrgBouncycastleAsn1X500StyleX500NameTokenizer *nTok = new_OrgBouncycastleAsn1X500StyleX500NameTokenizer_initWithNSString_(name);
  OrgBouncycastleAsn1X500X500NameBuilder *builder = new_OrgBouncycastleAsn1X500X500NameBuilder_initWithOrgBouncycastleAsn1X500X500NameStyle_(x500Style);
  
#line 134
  while ([nTok hasMoreTokens]) {
    
#line 136
    NSString *token = [nTok nextToken];
    
#line 138
    if ([((NSString *) nil_chk(token)) java_indexOf:'+'] > 0) {
      
#line 140
      OrgBouncycastleAsn1X500StyleX500NameTokenizer *pTok = new_OrgBouncycastleAsn1X500StyleX500NameTokenizer_initWithNSString_withChar_(token, '+');
      OrgBouncycastleAsn1X500StyleX500NameTokenizer *vTok = new_OrgBouncycastleAsn1X500StyleX500NameTokenizer_initWithNSString_withChar_([pTok nextToken], '=');
      
#line 143
      NSString *attr = [vTok nextToken];
      
#line 145
      if (![vTok hasMoreTokens]) {
        
#line 147
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"badly formatted directory string");
      }
      
#line 150
      NSString *value = [vTok nextToken];
      OrgBouncycastleAsn1ASN1ObjectIdentifier *oid = [((id<OrgBouncycastleAsn1X500X500NameStyle>) nil_chk(x500Style)) attrNameToOIDWithNSString:[((NSString *) nil_chk(attr)) java_trim]];
      
#line 153
      if ([pTok hasMoreTokens]) {
        
#line 155
        JavaUtilVector *oids = new_JavaUtilVector_init();
        JavaUtilVector *values = new_JavaUtilVector_init();
        
#line 158
        [oids addElementWithId:oid];
        [values addElementWithId:OrgBouncycastleAsn1X500StyleIETFUtils_unescapeWithNSString_(value)];
        
#line 161
        while ([pTok hasMoreTokens]) {
          
#line 163
          vTok = new_OrgBouncycastleAsn1X500StyleX500NameTokenizer_initWithNSString_withChar_([pTok nextToken], '=');
          
#line 165
          attr = [vTok nextToken];
          
#line 167
          if (![vTok hasMoreTokens]) {
            
#line 169
            @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"badly formatted directory string");
          }
          
#line 172
          value = [vTok nextToken];
          oid = [x500Style attrNameToOIDWithNSString:[((NSString *) nil_chk(attr)) java_trim]];
          
#line 176
          [oids addElementWithId:oid];
          [values addElementWithId:OrgBouncycastleAsn1X500StyleIETFUtils_unescapeWithNSString_(value)];
        }
        
#line 180
        (void) [builder addMultiValuedRDNWithOrgBouncycastleAsn1ASN1ObjectIdentifierArray:OrgBouncycastleAsn1X500StyleIETFUtils_toOIDArrayWithJavaUtilVector_(oids) withNSStringArray:OrgBouncycastleAsn1X500StyleIETFUtils_toValueArrayWithJavaUtilVector_(values)];
      }
      else {
        
#line 184
        (void) [builder addRDNWithOrgBouncycastleAsn1ASN1ObjectIdentifier:oid withNSString:OrgBouncycastleAsn1X500StyleIETFUtils_unescapeWithNSString_(value)];
      }
    }
    else {
      
#line 189
      OrgBouncycastleAsn1X500StyleX500NameTokenizer *vTok = new_OrgBouncycastleAsn1X500StyleX500NameTokenizer_initWithNSString_withChar_(token, '=');
      
#line 191
      NSString *attr = [vTok nextToken];
      
#line 193
      if (![vTok hasMoreTokens]) {
        
#line 195
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"badly formatted directory string");
      }
      
#line 198
      NSString *value = [vTok nextToken];
      OrgBouncycastleAsn1ASN1ObjectIdentifier *oid = [((id<OrgBouncycastleAsn1X500X500NameStyle>) nil_chk(x500Style)) attrNameToOIDWithNSString:[((NSString *) nil_chk(attr)) java_trim]];
      
#line 201
      (void) [builder addRDNWithOrgBouncycastleAsn1ASN1ObjectIdentifier:oid withNSString:OrgBouncycastleAsn1X500StyleIETFUtils_unescapeWithNSString_(value)];
    }
  }
  
#line 205
  return [((OrgBouncycastleAsn1X500X500Name *) nil_chk([builder build])) getRDNs];
}


#line 208
IOSObjectArray *OrgBouncycastleAsn1X500StyleIETFUtils_toValueArrayWithJavaUtilVector_(JavaUtilVector *values) {
  OrgBouncycastleAsn1X500StyleIETFUtils_initialize();
  IOSObjectArray *tmp = [IOSObjectArray newArrayWithLength:[((JavaUtilVector *) nil_chk(values)) size] type:NSString_class_()];
  
#line 212
  for (jint i = 0; i != tmp->size_; i++) {
    
#line 214
    (void) IOSObjectArray_Set(tmp, i, (NSString *) cast_chk([values elementAtWithInt:i], [NSString class]));
  }
  
#line 217
  return tmp;
}


#line 220
IOSObjectArray *OrgBouncycastleAsn1X500StyleIETFUtils_toOIDArrayWithJavaUtilVector_(JavaUtilVector *oids) {
  OrgBouncycastleAsn1X500StyleIETFUtils_initialize();
  IOSObjectArray *tmp = [IOSObjectArray newArrayWithLength:[((JavaUtilVector *) nil_chk(oids)) size] type:OrgBouncycastleAsn1ASN1ObjectIdentifier_class_()];
  
#line 224
  for (jint i = 0; i != tmp->size_; i++) {
    
#line 226
    (void) IOSObjectArray_Set(tmp, i, (OrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([oids elementAtWithInt:i], [OrgBouncycastleAsn1ASN1ObjectIdentifier class]));
  }
  
#line 229
  return tmp;
}


#line 232
IOSObjectArray *OrgBouncycastleAsn1X500StyleIETFUtils_findAttrNamesForOIDWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withJavaUtilHashtable_(OrgBouncycastleAsn1ASN1ObjectIdentifier *oid, JavaUtilHashtable *lookup) {
  OrgBouncycastleAsn1X500StyleIETFUtils_initialize();
  
#line 236
  jint count = 0;
  for (id<JavaUtilEnumeration> en = [((JavaUtilHashtable *) nil_chk(lookup)) elements]; [((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]; ) {
    
#line 239
    if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) isEqual:[en nextElement]]) {
      
#line 241
      count++;
    }
  }
  
#line 245
  IOSObjectArray *aliases = [IOSObjectArray newArrayWithLength:count type:NSString_class_()];
  count = 0;
  
#line 248
  for (id<JavaUtilEnumeration> en = [lookup keys]; [((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]; ) {
    
#line 250
    NSString *key = (NSString *) cast_chk([en nextElement], [NSString class]);
    if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) isEqual:[lookup getWithId:key]]) {
      
#line 253
      (void) IOSObjectArray_Set(aliases, count++, key);
    }
  }
  
#line 257
  return aliases;
}


#line 260
OrgBouncycastleAsn1ASN1ObjectIdentifier *OrgBouncycastleAsn1X500StyleIETFUtils_decodeAttrNameWithNSString_withJavaUtilHashtable_(NSString *name, JavaUtilHashtable *lookUp) {
  OrgBouncycastleAsn1X500StyleIETFUtils_initialize();
  
#line 264
  if ([((NSString *) nil_chk(OrgBouncycastleUtilStrings_toUpperCaseWithNSString_(name))) java_hasPrefix:@"OID."]) {
    
#line 266
    return new_OrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_([((NSString *) nil_chk(name)) java_substring:4]);
  }
  else if ([((NSString *) nil_chk(name)) charAtWithInt:0] >= '0' && [name charAtWithInt:0] <= '9') {
    
#line 270
    return new_OrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_(name);
  }
  
#line 273
  OrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (OrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([((JavaUtilHashtable *) nil_chk(lookUp)) getWithId:OrgBouncycastleUtilStrings_toLowerCaseWithNSString_(name)], [OrgBouncycastleAsn1ASN1ObjectIdentifier class]);
  if (oid == nil) {
    
#line 276
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Unknown object id - ", name, @" - passed to distinguished name"));
  }
  
#line 279
  return oid;
}


#line 282
id<OrgBouncycastleAsn1ASN1Encodable> OrgBouncycastleAsn1X500StyleIETFUtils_valueFromHexStringWithNSString_withInt_(NSString *str, jint off) {
  OrgBouncycastleAsn1X500StyleIETFUtils_initialize();
  
#line 287
  IOSByteArray *data = [IOSByteArray newArrayWithLength:JreIntDiv(([((NSString *) nil_chk(str)) java_length] - off), 2)];
  for (jint index = 0; index != data->size_; index++) {
    
#line 290
    jchar left = [str charAtWithInt:(index * 2) + off];
    jchar right = [str charAtWithInt:(index * 2) + off + 1];
    
#line 293
    *IOSByteArray_GetRef(data, index) = (jbyte) ((JreLShift32(OrgBouncycastleAsn1X500StyleIETFUtils_convertHexWithChar_(left), 4)) | OrgBouncycastleAsn1X500StyleIETFUtils_convertHexWithChar_(right));
  }
  
#line 296
  return OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(data);
}


#line 299
void OrgBouncycastleAsn1X500StyleIETFUtils_appendRDNWithJavaLangStringBuffer_withOrgBouncycastleAsn1X500RDN_withJavaUtilHashtable_(JavaLangStringBuffer *buf, OrgBouncycastleAsn1X500RDN *rdn, JavaUtilHashtable *oidSymbols) {
  OrgBouncycastleAsn1X500StyleIETFUtils_initialize();
  
#line 304
  if ([((OrgBouncycastleAsn1X500RDN *) nil_chk(rdn)) isMultiValued]) {
    
#line 306
    IOSObjectArray *atv = [rdn getTypesAndValues];
    jboolean firstAtv = true;
    
#line 309
    for (jint j = 0; j != ((IOSObjectArray *) nil_chk(atv))->size_; j++) {
      
#line 311
      if (firstAtv) {
        
#line 313
        firstAtv = false;
      }
      else {
        
#line 317
        (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithChar:'+'];
      }
      
#line 320
      OrgBouncycastleAsn1X500StyleIETFUtils_appendTypeAndValueWithJavaLangStringBuffer_withOrgBouncycastleAsn1X500AttributeTypeAndValue_withJavaUtilHashtable_(buf, IOSObjectArray_Get(atv, j), oidSymbols);
    }
  }
  else {
    
#line 325
    if ([rdn getFirst] != nil) {
      
#line 327
      OrgBouncycastleAsn1X500StyleIETFUtils_appendTypeAndValueWithJavaLangStringBuffer_withOrgBouncycastleAsn1X500AttributeTypeAndValue_withJavaUtilHashtable_(buf, [rdn getFirst], oidSymbols);
    }
  }
}


#line 332
void OrgBouncycastleAsn1X500StyleIETFUtils_appendTypeAndValueWithJavaLangStringBuffer_withOrgBouncycastleAsn1X500AttributeTypeAndValue_withJavaUtilHashtable_(JavaLangStringBuffer *buf, OrgBouncycastleAsn1X500AttributeTypeAndValue *typeAndValue, JavaUtilHashtable *oidSymbols) {
  OrgBouncycastleAsn1X500StyleIETFUtils_initialize();
  
#line 337
  NSString *sym = (NSString *) cast_chk([((JavaUtilHashtable *) nil_chk(oidSymbols)) getWithId:[((OrgBouncycastleAsn1X500AttributeTypeAndValue *) nil_chk(typeAndValue)) getType]], [NSString class]);
  
#line 339
  if (sym != nil) {
    
#line 341
    (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithNSString:sym];
  }
  else {
    
#line 345
    (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithNSString:[((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([typeAndValue getType])) getId]];
  }
  
#line 348
  (void) [buf appendWithChar:'='];
  
#line 350
  (void) [buf appendWithNSString:OrgBouncycastleAsn1X500StyleIETFUtils_valueToStringWithOrgBouncycastleAsn1ASN1Encodable_([typeAndValue getValue])];
}


#line 353
NSString *OrgBouncycastleAsn1X500StyleIETFUtils_valueToStringWithOrgBouncycastleAsn1ASN1Encodable_(id<OrgBouncycastleAsn1ASN1Encodable> value) {
  OrgBouncycastleAsn1X500StyleIETFUtils_initialize();
  JavaLangStringBuffer *vBuf = new_JavaLangStringBuffer_init();
  
#line 357
  if ([OrgBouncycastleAsn1ASN1String_class_() isInstance:value] && !([value isKindOfClass:[OrgBouncycastleAsn1ASN1UniversalString class]])) {
    
#line 359
    NSString *v = [((id<OrgBouncycastleAsn1ASN1String>) nil_chk(((id<OrgBouncycastleAsn1ASN1String>) cast_check(value, OrgBouncycastleAsn1ASN1String_class_())))) getString];
    if ([((NSString *) nil_chk(v)) java_length] > 0 && [v charAtWithInt:0] == '#') {
      
#line 362
      (void) [vBuf appendWithChar:'\\'];
    }
    
#line 365
    (void) [vBuf appendWithNSString:v];
  }
  else {
    
#line 369
    @try {
      
#line 371
      (void) [vBuf appendWithChar:'#'];
      
#line 373
      (void) [vBuf appendWithNSString:OrgBouncycastleUtilEncodersHex_toHexStringWithByteArray_([((OrgBouncycastleAsn1ASN1Primitive *) nil_chk([((id<OrgBouncycastleAsn1ASN1Encodable>) nil_chk(value)) toASN1Primitive])) getEncodedWithNSString:OrgBouncycastleAsn1ASN1Encoding_DER])];
    }
    @catch (JavaIoIOException *e) {
      
#line 377
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Other value has no encoded form");
    }
  }
  
#line 381
  jint end = [vBuf java_length];
  jint index = 0;
  
#line 384
  if ([vBuf java_length] >= 2 && [vBuf charAtWithInt:0] == '\\' && [vBuf charAtWithInt:1] == '#') {
    
#line 386
    index += 2;
  }
  
#line 389
  while (index != end) {
    
#line 391
    switch ([vBuf charAtWithInt:index]) {
      
#line 393
      case ',':
      case '"':
      case '\\':
      case '+':
      case '=':
      case '<':
      case '>':
      case ';':
      {
        (void) [vBuf insertWithInt:index withNSString:@"\\"];
        index += 2;
        ++end;
        break;
      }
      default:
      {
        ++index;
        break;
      }
    }
  }
  
#line 415
  jint start = 0;
  if ([vBuf java_length] > 0) {
    
#line 418
    while ([vBuf java_length] > start && [vBuf charAtWithInt:start] == ' ') {
      
#line 420
      (void) [vBuf insertWithInt:start withNSString:@"\\"];
      start += 2;
    }
  }
  
#line 425
  jint endBuf = [vBuf java_length] - 1;
  
#line 427
  while (endBuf >= 0 && [vBuf charAtWithInt:endBuf] == ' ') {
    
#line 429
    (void) [vBuf insertWithInt:endBuf withChar:'\\'];
    endBuf--;
  }
  
#line 433
  return [vBuf description];
}


#line 436
NSString *OrgBouncycastleAsn1X500StyleIETFUtils_canonicalizeWithNSString_(NSString *s) {
  OrgBouncycastleAsn1X500StyleIETFUtils_initialize();
  if ([((NSString *) nil_chk(s)) java_length] > 0 && [s charAtWithInt:0] == '#') {
    
#line 440
    OrgBouncycastleAsn1ASN1Primitive *obj = OrgBouncycastleAsn1X500StyleIETFUtils_decodeObjectWithNSString_(s);
    if ([OrgBouncycastleAsn1ASN1String_class_() isInstance:obj]) {
      
#line 443
      s = [((id<OrgBouncycastleAsn1ASN1String>) nil_chk(((id<OrgBouncycastleAsn1ASN1String>) cast_check(obj, OrgBouncycastleAsn1ASN1String_class_())))) getString];
    }
  }
  
#line 447
  s = OrgBouncycastleUtilStrings_toLowerCaseWithNSString_(s);
  
#line 449
  jint length = [((NSString *) nil_chk(s)) java_length];
  if (length < 2) {
    
#line 452
    return s;
  }
  
#line 455
  jint start = 0;
  
#line 455
  jint last = length - 1;
  while (start < last && [s charAtWithInt:start] == '\\' && [s charAtWithInt:start + 1] == ' ') {
    
#line 458
    start += 2;
  }
  
#line 461
  jint end = last;
  
#line 461
  jint first = start + 1;
  while (end > first && [s charAtWithInt:end - 1] == '\\' && [s charAtWithInt:end] == ' ') {
    
#line 464
    end -= 2;
  }
  
#line 467
  if (start > 0 || end < last) {
    
#line 469
    s = [s java_substring:start endIndex:end + 1];
  }
  
#line 472
  return OrgBouncycastleAsn1X500StyleIETFUtils_stripInternalSpacesWithNSString_(s);
}


#line 475
NSString *OrgBouncycastleAsn1X500StyleIETFUtils_canonicalStringWithOrgBouncycastleAsn1ASN1Encodable_(id<OrgBouncycastleAsn1ASN1Encodable> value) {
  OrgBouncycastleAsn1X500StyleIETFUtils_initialize();
  return OrgBouncycastleAsn1X500StyleIETFUtils_canonicalizeWithNSString_(OrgBouncycastleAsn1X500StyleIETFUtils_valueToStringWithOrgBouncycastleAsn1ASN1Encodable_(value));
}

OrgBouncycastleAsn1ASN1Primitive *OrgBouncycastleAsn1X500StyleIETFUtils_decodeObjectWithNSString_(NSString *oValue) {
  OrgBouncycastleAsn1X500StyleIETFUtils_initialize();
  @try {
    
#line 484
    return OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(OrgBouncycastleUtilEncodersHex_decodeStrictWithNSString_withInt_withInt_(oValue, 1, [((NSString *) nil_chk(oValue)) java_length] - 1));
  }
  @catch (JavaIoIOException *e) {
    
#line 488
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"unknown encoding in name: ", e));
  }
}


#line 492
NSString *OrgBouncycastleAsn1X500StyleIETFUtils_stripInternalSpacesWithNSString_(NSString *str) {
  OrgBouncycastleAsn1X500StyleIETFUtils_initialize();
  
#line 495
  if ([((NSString *) nil_chk(str)) java_indexOfString:@"  "] < 0) {
    
#line 497
    return str;
  }
  
#line 500
  JavaLangStringBuffer *res = new_JavaLangStringBuffer_init();
  
#line 502
  jchar c1 = [str charAtWithInt:0];
  (void) [res appendWithChar:c1];
  
#line 505
  for (jint k = 1; k < [str java_length]; k++) {
    
#line 507
    jchar c2 = [str charAtWithInt:k];
    if (!(c1 == ' ' && c2 == ' ')) {
      
#line 510
      (void) [res appendWithChar:c2];
      c1 = c2;
    }
  }
  
#line 515
  return [res description];
}


#line 518
jboolean OrgBouncycastleAsn1X500StyleIETFUtils_rDNAreEqualWithOrgBouncycastleAsn1X500RDN_withOrgBouncycastleAsn1X500RDN_(OrgBouncycastleAsn1X500RDN *rdn1, OrgBouncycastleAsn1X500RDN *rdn2) {
  OrgBouncycastleAsn1X500StyleIETFUtils_initialize();
  if ([((OrgBouncycastleAsn1X500RDN *) nil_chk(rdn1)) size] != [((OrgBouncycastleAsn1X500RDN *) nil_chk(rdn2)) size]) {
    
#line 522
    return false;
  }
  
#line 525
  IOSObjectArray *atvs1 = [rdn1 getTypesAndValues];
  IOSObjectArray *atvs2 = [rdn2 getTypesAndValues];
  
#line 528
  if (((IOSObjectArray *) nil_chk(atvs1))->size_ != ((IOSObjectArray *) nil_chk(atvs2))->size_) {
    
#line 530
    return false;
  }
  
#line 533
  for (jint i = 0; i != atvs1->size_; i++) {
    
#line 535
    if (!OrgBouncycastleAsn1X500StyleIETFUtils_atvAreEqualWithOrgBouncycastleAsn1X500AttributeTypeAndValue_withOrgBouncycastleAsn1X500AttributeTypeAndValue_(IOSObjectArray_Get(atvs1, i), IOSObjectArray_Get(atvs2, i))) {
      
#line 537
      return false;
    }
  }
  
#line 541
  return true;
}


#line 544
jboolean OrgBouncycastleAsn1X500StyleIETFUtils_atvAreEqualWithOrgBouncycastleAsn1X500AttributeTypeAndValue_withOrgBouncycastleAsn1X500AttributeTypeAndValue_(OrgBouncycastleAsn1X500AttributeTypeAndValue *atv1, OrgBouncycastleAsn1X500AttributeTypeAndValue *atv2) {
  OrgBouncycastleAsn1X500StyleIETFUtils_initialize();
  if (JreObjectEqualsEquals(atv1, atv2)) {
    
#line 548
    return true;
  }
  
#line 551
  if (nil == atv1 || nil == atv2) {
    
#line 553
    return false;
  }
  
#line 556
  OrgBouncycastleAsn1ASN1ObjectIdentifier *o1 = [atv1 getType];
  OrgBouncycastleAsn1ASN1ObjectIdentifier *o2 = [atv2 getType];
  
#line 559
  if (![((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(o1)) equalsWithOrgBouncycastleAsn1ASN1Primitive:o2]) {
    
#line 561
    return false;
  }
  
#line 564
  NSString *v1 = OrgBouncycastleAsn1X500StyleIETFUtils_canonicalStringWithOrgBouncycastleAsn1ASN1Encodable_([atv1 getValue]);
  NSString *v2 = OrgBouncycastleAsn1X500StyleIETFUtils_canonicalStringWithOrgBouncycastleAsn1ASN1Encodable_([atv2 getValue]);
  
#line 567
  if (![((NSString *) nil_chk(v1)) isEqual:v2]) {
    
#line 569
    return false;
  }
  
#line 572
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1X500StyleIETFUtils)
