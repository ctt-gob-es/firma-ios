//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x500/style/X500NameTokenizer.java
//

#include "J2ObjC_source.h"
#include "java/lang/StringBuffer.h"
#include "org/bouncycastle/asn1/x500/style/X500NameTokenizer.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/asn1/x500/style/X500NameTokenizer must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleAsn1X500StyleX500NameTokenizer () {
 @public
  NSString *value_;
  jint index_;
  jchar separator_;
  JavaLangStringBuffer *buf_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1X500StyleX500NameTokenizer, value_, NSString *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1X500StyleX500NameTokenizer, buf_, JavaLangStringBuffer *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x500/style/X500NameTokenizer.java"


#line 9
@implementation OrgBouncycastleAsn1X500StyleX500NameTokenizer


#line 16
- (instancetype)initWithNSString:(NSString *)oid {
  OrgBouncycastleAsn1X500StyleX500NameTokenizer_initWithNSString_(self, oid);
  return self;
}


#line 22
- (instancetype)initWithNSString:(NSString *)oid
                        withChar:(jchar)separator {
  OrgBouncycastleAsn1X500StyleX500NameTokenizer_initWithNSString_withChar_(self, oid, separator);
  return self;
}


#line 31
- (jboolean)hasMoreTokens {
  
#line 33
  return (index_ != [((NSString *) nil_chk(value_)) java_length]);
}


#line 36
- (NSString *)nextToken {
  
#line 38
  if (index_ == [((NSString *) nil_chk(value_)) java_length]) {
    
#line 40
    return nil;
  }
  
#line 43
  jint end = index_ + 1;
  jboolean quoted = false;
  jboolean escaped = false;
  
#line 47
  [((JavaLangStringBuffer *) nil_chk(buf_)) setLengthWithInt:0];
  
#line 49
  while (end != [((NSString *) nil_chk(value_)) java_length]) {
    
#line 51
    jchar c = [((NSString *) nil_chk(value_)) charAtWithInt:end];
    
#line 53
    if (c == '"') {
      
#line 55
      if (!escaped) {
        
#line 57
        quoted = !quoted;
      }
      (void) [((JavaLangStringBuffer *) nil_chk(buf_)) appendWithChar:c];
      escaped = false;
    }
    else {
      
#line 64
      if (escaped || quoted) {
        
#line 66
        (void) [((JavaLangStringBuffer *) nil_chk(buf_)) appendWithChar:c];
        escaped = false;
      }
      else if (c == '\\') {
        
#line 71
        (void) [((JavaLangStringBuffer *) nil_chk(buf_)) appendWithChar:c];
        escaped = true;
      }
      else if (c == separator_) {
        
#line 76
        break;
      }
      else {
        
#line 80
        (void) [((JavaLangStringBuffer *) nil_chk(buf_)) appendWithChar:c];
      }
    }
    end++;
  }
  
#line 86
  index_ = end;
  
#line 88
  return [((JavaLangStringBuffer *) nil_chk(buf_)) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withChar:);
  methods[2].selector = @selector(hasMoreTokens);
  methods[3].selector = @selector(nextToken);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "separator_", "C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buf_", "LJavaLangStringBuffer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;C" };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1X500StyleX500NameTokenizer = { "X500NameTokenizer", "org.bouncycastle.asn1.x500.style", ptrTable, methods, fields, 7, 0x1, 4, 4, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1X500StyleX500NameTokenizer;
}

@end


#line 16
void OrgBouncycastleAsn1X500StyleX500NameTokenizer_initWithNSString_(OrgBouncycastleAsn1X500StyleX500NameTokenizer *self, NSString *oid) {
  OrgBouncycastleAsn1X500StyleX500NameTokenizer_initWithNSString_withChar_(self,
#line 19
  oid, ',');
}


#line 16
OrgBouncycastleAsn1X500StyleX500NameTokenizer *new_OrgBouncycastleAsn1X500StyleX500NameTokenizer_initWithNSString_(NSString *oid) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1X500StyleX500NameTokenizer, initWithNSString_, oid)
}


#line 16
OrgBouncycastleAsn1X500StyleX500NameTokenizer *create_OrgBouncycastleAsn1X500StyleX500NameTokenizer_initWithNSString_(NSString *oid) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1X500StyleX500NameTokenizer, initWithNSString_, oid)
}


#line 22
void OrgBouncycastleAsn1X500StyleX500NameTokenizer_initWithNSString_withChar_(OrgBouncycastleAsn1X500StyleX500NameTokenizer *self, NSString *oid, jchar separator) {
  NSObject_init(self);
  self->buf_ = new_JavaLangStringBuffer_init();
  
#line 26
  self->value_ = oid;
  self->index_ = -1;
  self->separator_ = separator;
}


#line 22
OrgBouncycastleAsn1X500StyleX500NameTokenizer *new_OrgBouncycastleAsn1X500StyleX500NameTokenizer_initWithNSString_withChar_(NSString *oid, jchar separator) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1X500StyleX500NameTokenizer, initWithNSString_withChar_, oid, separator)
}


#line 22
OrgBouncycastleAsn1X500StyleX500NameTokenizer *create_OrgBouncycastleAsn1X500StyleX500NameTokenizer_initWithNSString_withChar_(NSString *oid, jchar separator) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1X500StyleX500NameTokenizer, initWithNSString_withChar_, oid, separator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1X500StyleX500NameTokenizer)
