//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1Primitive.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/ClassCastException.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1InputStream.h"
#include "org/bouncycastle/asn1/ASN1Object.h"
#include "org/bouncycastle/asn1/ASN1OutputStream.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/asn1/ASN1Primitive must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1Primitive.java"


#line 9
@implementation OrgBouncycastleAsn1ASN1Primitive

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgBouncycastleAsn1ASN1Primitive_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 16
- (void)encodeToWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  
#line 19
  OrgBouncycastleAsn1ASN1OutputStream *asn1Out = OrgBouncycastleAsn1ASN1OutputStream_createWithJavaIoOutputStream_(output);
  [((OrgBouncycastleAsn1ASN1OutputStream *) nil_chk(asn1Out)) writePrimitiveWithOrgBouncycastleAsn1ASN1Primitive:self withBoolean:true];
  [asn1Out flushInternal];
}

- (void)encodeToWithJavaIoOutputStream:(JavaIoOutputStream *)output
                          withNSString:(NSString *)encoding {
  
#line 27
  OrgBouncycastleAsn1ASN1OutputStream *asn1Out = OrgBouncycastleAsn1ASN1OutputStream_createWithJavaIoOutputStream_withNSString_(output, encoding);
  [((OrgBouncycastleAsn1ASN1OutputStream *) nil_chk(asn1Out)) writePrimitiveWithOrgBouncycastleAsn1ASN1Primitive:self withBoolean:true];
  [asn1Out flushInternal];
}


#line 39
+ (OrgBouncycastleAsn1ASN1Primitive *)fromByteArrayWithByteArray:(IOSByteArray *)data {
  return OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(data);
}


#line 61
- (jboolean)isEqual:(id)o {
  
#line 64
  if (JreObjectEqualsEquals(self, o)) {
    
#line 66
    return true;
  }
  
#line 69
  return ([OrgBouncycastleAsn1ASN1Encodable_class_() isInstance:o]) && [self asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:[((id<OrgBouncycastleAsn1ASN1Encodable>) nil_chk(((id<OrgBouncycastleAsn1ASN1Encodable>) cast_check(o, OrgBouncycastleAsn1ASN1Encodable_class_())))) toASN1Primitive]];
}


#line 72
- (jboolean)equalsWithOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)other {
  
#line 74
  return JreObjectEqualsEquals(self, other) || (nil != other && [self asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:[other toASN1Primitive]]);
}


#line 77
- (jboolean)equalsWithOrgBouncycastleAsn1ASN1Primitive:(OrgBouncycastleAsn1ASN1Primitive *)other {
  
#line 79
  return JreObjectEqualsEquals(self, other) || [self asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:other];
}


#line 82
- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  
#line 85
  return self;
}


#line 93
- (OrgBouncycastleAsn1ASN1Primitive *)toDERObject {
  
#line 95
  return self;
}


#line 103
- (OrgBouncycastleAsn1ASN1Primitive *)toDLObject {
  
#line 105
  return self;
}


#line 108
- (NSUInteger)hash {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 115
- (jboolean)encodeConstructed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 117
- (jint)encodedLengthWithBoolean:(jboolean)withTag {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 119
- (void)encodeWithOrgBouncycastleAsn1ASN1OutputStream:(OrgBouncycastleAsn1ASN1OutputStream *)outArg
                                          withBoolean:(jboolean)withTag {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 124
- (jboolean)asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:(OrgBouncycastleAsn1ASN1Primitive *)o {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 3, 2, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x9, 4, 5, 2, -1, -1, -1 },
    { NULL, "Z", 0x11, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 6, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 6, 9, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 10, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x400, 11, 12, 2, -1, -1, -1 },
    { NULL, "V", 0x400, 13, 14, 2, -1, -1, -1 },
    { NULL, "Z", 0x400, 15, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(encodeToWithJavaIoOutputStream:);
  methods[2].selector = @selector(encodeToWithJavaIoOutputStream:withNSString:);
  methods[3].selector = @selector(fromByteArrayWithByteArray:);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(equalsWithOrgBouncycastleAsn1ASN1Encodable:);
  methods[6].selector = @selector(equalsWithOrgBouncycastleAsn1ASN1Primitive:);
  methods[7].selector = @selector(toASN1Primitive);
  methods[8].selector = @selector(toDERObject);
  methods[9].selector = @selector(toDLObject);
  methods[10].selector = @selector(hash);
  methods[11].selector = @selector(encodeConstructed);
  methods[12].selector = @selector(encodedLengthWithBoolean:);
  methods[13].selector = @selector(encodeWithOrgBouncycastleAsn1ASN1OutputStream:withBoolean:);
  methods[14].selector = @selector(asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "encodeTo", "LJavaIoOutputStream;", "LJavaIoIOException;", "LJavaIoOutputStream;LNSString;", "fromByteArray", "[B", "equals", "LNSObject;", "LOrgBouncycastleAsn1ASN1Encodable;", "LOrgBouncycastleAsn1ASN1Primitive;", "hashCode", "encodedLength", "Z", "encode", "LOrgBouncycastleAsn1ASN1OutputStream;Z", "asn1Equals" };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1ASN1Primitive = { "ASN1Primitive", "org.bouncycastle.asn1", ptrTable, methods, NULL, 7, 0x401, 15, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1ASN1Primitive;
}

@end


#line 12
void OrgBouncycastleAsn1ASN1Primitive_init(OrgBouncycastleAsn1ASN1Primitive *self) {
  OrgBouncycastleAsn1ASN1Object_init(self);
}


#line 39
OrgBouncycastleAsn1ASN1Primitive *OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(IOSByteArray *data) {
  OrgBouncycastleAsn1ASN1Primitive_initialize();
  
#line 42
  OrgBouncycastleAsn1ASN1InputStream *aIn = new_OrgBouncycastleAsn1ASN1InputStream_initWithByteArray_(data);
  
#line 44
  @try {
    
#line 46
    OrgBouncycastleAsn1ASN1Primitive *o = [aIn readObject];
    
#line 48
    if ([aIn available] != 0) {
      
#line 50
      @throw new_JavaIoIOException_initWithNSString_(@"Extra data detected in stream");
    }
    
#line 53
    return o;
  }
  @catch (JavaLangClassCastException *e) {
    
#line 57
    @throw new_JavaIoIOException_initWithNSString_(@"cannot recognise object in stream");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1ASN1Primitive)
