//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1Object.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/OutputStream.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1Object.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/asn1/ASN1Object must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1Object.java"


#line 12
@implementation OrgBouncycastleAsn1ASN1Object

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 12
- (instancetype)init {
  OrgBouncycastleAsn1ASN1Object_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 15
- (void)encodeToWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  
#line 17
  [((OrgBouncycastleAsn1ASN1Primitive *) nil_chk([self toASN1Primitive])) encodeToWithJavaIoOutputStream:output];
}


#line 20
- (void)encodeToWithJavaIoOutputStream:(JavaIoOutputStream *)output
                          withNSString:(NSString *)encoding {
  [((OrgBouncycastleAsn1ASN1Primitive *) nil_chk([self toASN1Primitive])) encodeToWithJavaIoOutputStream:output withNSString:encoding];
}


#line 31
- (IOSByteArray *)getEncoded {
  
#line 34
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  [((OrgBouncycastleAsn1ASN1Primitive *) nil_chk([self toASN1Primitive])) encodeToWithJavaIoOutputStream:bOut];
  return [bOut toByteArray];
}


#line 46
- (IOSByteArray *)getEncodedWithNSString:(NSString *)encoding {
  
#line 48
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  [((OrgBouncycastleAsn1ASN1Primitive *) nil_chk([self toASN1Primitive])) encodeToWithJavaIoOutputStream:bOut withNSString:encoding];
  return [bOut toByteArray];
}


#line 53
- (NSUInteger)hash {
  
#line 56
  return ((jint) [((OrgBouncycastleAsn1ASN1Primitive *) nil_chk([self toASN1Primitive])) hash]);
}

- (jboolean)isEqual:(id)o {
  
#line 63
  if (JreObjectEqualsEquals(self, o)) {
    
#line 65
    return true;
  }
  
#line 68
  if (!([OrgBouncycastleAsn1ASN1Encodable_class_() isInstance:o])) {
    
#line 70
    return false;
  }
  
#line 73
  id<OrgBouncycastleAsn1ASN1Encodable> other = (id<OrgBouncycastleAsn1ASN1Encodable>) cast_check(o, OrgBouncycastleAsn1ASN1Encodable_class_());
  
#line 75
  return [((OrgBouncycastleAsn1ASN1Primitive *) nil_chk([self toASN1Primitive])) equalsWithOrgBouncycastleAsn1ASN1Primitive:[((id<OrgBouncycastleAsn1ASN1Encodable>) nil_chk(other)) toASN1Primitive]];
}


#line 85
+ (jboolean)hasEncodedTagValueWithId:(id)obj
                             withInt:(jint)tagValue {
  return OrgBouncycastleAsn1ASN1Object_hasEncodedTagValueWithId_withInt_(obj, tagValue);
}


#line 94
- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 3, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, 2, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(encodeToWithJavaIoOutputStream:);
  methods[2].selector = @selector(encodeToWithJavaIoOutputStream:withNSString:);
  methods[3].selector = @selector(getEncoded);
  methods[4].selector = @selector(getEncodedWithNSString:);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(hasEncodedTagValueWithId:withInt:);
  methods[8].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "encodeTo", "LJavaIoOutputStream;", "LJavaIoIOException;", "LJavaIoOutputStream;LNSString;", "getEncoded", "LNSString;", "hashCode", "equals", "LNSObject;", "hasEncodedTagValue", "LNSObject;I" };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1ASN1Object = { "ASN1Object", "org.bouncycastle.asn1", ptrTable, methods, NULL, 7, 0x401, 9, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1ASN1Object;
}

@end


#line 12
void OrgBouncycastleAsn1ASN1Object_init(OrgBouncycastleAsn1ASN1Object *self) {
  NSObject_init(self);
}


#line 85
jboolean OrgBouncycastleAsn1ASN1Object_hasEncodedTagValueWithId_withInt_(id obj, jint tagValue) {
  OrgBouncycastleAsn1ASN1Object_initialize();
  return ([obj isKindOfClass:[IOSByteArray class]]) && IOSByteArray_Get(nil_chk(((IOSByteArray *) cast_chk(obj, [IOSByteArray class]))), 0) == tagValue;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1ASN1Object)
