//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1ParsingException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1ASN1ParsingException")
#ifdef RESTRICT_OrgBouncycastleAsn1ASN1ParsingException
#define INCLUDE_ALL_OrgBouncycastleAsn1ASN1ParsingException 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1ASN1ParsingException 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1ASN1ParsingException

#if !defined (OrgBouncycastleAsn1ASN1ParsingException_) && (INCLUDE_ALL_OrgBouncycastleAsn1ASN1ParsingException || defined(INCLUDE_OrgBouncycastleAsn1ASN1ParsingException))
#define OrgBouncycastleAsn1ASN1ParsingException_

#define RESTRICT_JavaLangIllegalStateException 1
#define INCLUDE_JavaLangIllegalStateException 1
#include "java/lang/IllegalStateException.h"

@class JavaLangThrowable;

/*!
 @brief Exception thrown when correctly encoded, but unexpected data is found in a stream while building an object.
 */
@interface OrgBouncycastleAsn1ASN1ParsingException : JavaLangIllegalStateException

#pragma mark Public

/*!
 @brief Base constructor
 @param message a message concerning the exception.
 */
- (instancetype)initWithNSString:(NSString *)message;

/*!
 @brief Constructor when this exception is due to another one.
 @param message a message concerning the exception.
 @param cause the exception that caused this exception to be thrown.
 */
- (instancetype)initWithNSString:(NSString *)message
           withJavaLangThrowable:(JavaLangThrowable *)cause;

/*!
 @brief Return the underlying cause of this exception, if any.
 @return the exception causing this one, null if there isn't one.
 */
- (JavaLangThrowable *)getCause;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleAsn1ASN1ParsingException)

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1ParsingException_initWithNSString_(OrgBouncycastleAsn1ASN1ParsingException *self, NSString *message);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1ParsingException *new_OrgBouncycastleAsn1ASN1ParsingException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1ParsingException *create_OrgBouncycastleAsn1ASN1ParsingException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1ParsingException_initWithNSString_withJavaLangThrowable_(OrgBouncycastleAsn1ASN1ParsingException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1ParsingException *new_OrgBouncycastleAsn1ASN1ParsingException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1ParsingException *create_OrgBouncycastleAsn1ASN1ParsingException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1ASN1ParsingException)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1ASN1ParsingException")
