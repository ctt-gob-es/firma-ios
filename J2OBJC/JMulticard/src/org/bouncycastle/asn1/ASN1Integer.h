//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1Integer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1ASN1Integer")
#ifdef RESTRICT_OrgBouncycastleAsn1ASN1Integer
#define INCLUDE_ALL_OrgBouncycastleAsn1ASN1Integer 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1ASN1Integer 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1ASN1Integer

#if !defined (OrgBouncycastleAsn1ASN1Integer_) && (INCLUDE_ALL_OrgBouncycastleAsn1ASN1Integer || defined(INCLUDE_OrgBouncycastleAsn1ASN1Integer))
#define OrgBouncycastleAsn1ASN1Integer_

#define RESTRICT_OrgBouncycastleAsn1ASN1Primitive 1
#define INCLUDE_OrgBouncycastleAsn1ASN1Primitive 1
#include "org/bouncycastle/asn1/ASN1Primitive.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class OrgBouncycastleAsn1ASN1OutputStream;
@class OrgBouncycastleAsn1ASN1TaggedObject;
@class OrgBouncycastleAsn1ASN1UniversalType;

/*!
 @brief Class representing the ASN.1 INTEGER type.
 */
@interface OrgBouncycastleAsn1ASN1Integer : OrgBouncycastleAsn1ASN1Primitive

#pragma mark Public

/*!
 @brief Construct an INTEGER from the passed in BigInteger value.
 @param value the BigInteger representing the value desired.
 */
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)value;

/*!
 @brief Construct an INTEGER from the passed in byte array.
 <p>
  <b>NB: Strict Validation applied by default.</b>
  </p>
  <p>
  It has turned out that there are still a few applications that struggle with
  the ASN.1 BER encoding rules for an INTEGER as described in:
  https://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf
  Section 8.3.2. 
 </p>
  <p>
  Users can set the 'org.bouncycastle.asn1.allow_unsafe_integer' to 'true'
  and a looser validation will be applied. Users must recognise that this is
  not ideal and may pave the way for an exploit based around a faulty encoding
  in the future. 
 </p>
 @param bytes the byte array representing a 2's complement encoding of a BigInteger.
 */
- (instancetype)initWithByteArray:(IOSByteArray *)bytes;

/*!
 @brief Construct an INTEGER from the passed in long value.
 @param value the long representing the value desired.
 */
- (instancetype)initWithLong:(jlong)value;

/*!
 @brief Return an Integer from a tagged object.
 @param taggedObject the tagged object holding the object we want
 @param explicit_ true if the object is meant to be explicitly                  tagged false otherwise.
 @return an ASN1Integer instance.
 @throw IllegalArgumentExceptionif the tagged object cannot
  be converted.
 */
+ (OrgBouncycastleAsn1ASN1Integer *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)taggedObject
                                                                           withBoolean:(jboolean)explicit_;

/*!
 @brief Return an integer from the passed in object.
 @param obj an ASN1Integer or an object that can be converted into one.
 @return an ASN1Integer instance.
 @throw IllegalArgumentExceptionif the object cannot be converted.
 */
+ (OrgBouncycastleAsn1ASN1Integer *)getInstanceWithId:(id)obj;

/*!
 @brief in some cases positive values get crammed into a space,
  that's not quite big enough...
 @return the BigInteger that results from treating this ASN.1 INTEGER as unsigned.
 */
- (JavaMathBigInteger *)getPositiveValue;

- (JavaMathBigInteger *)getValue;

- (NSUInteger)hash;

- (jboolean)hasValueWithJavaMathBigInteger:(JavaMathBigInteger *)x;

- (jboolean)hasValueWithInt:(jint)x;

- (jboolean)hasValueWithLong:(jlong)x;

- (jint)intPositiveValueExact;

- (jint)intValueExact;

- (jlong)longValueExact;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initWithByteArray:(IOSByteArray *)bytes
                      withBoolean:(jboolean)clone;

- (jboolean)asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:(OrgBouncycastleAsn1ASN1Primitive *)o;

+ (OrgBouncycastleAsn1ASN1Integer *)createPrimitiveWithByteArray:(IOSByteArray *)contents;

- (void)encodeWithOrgBouncycastleAsn1ASN1OutputStream:(OrgBouncycastleAsn1ASN1OutputStream *)outArg
                                          withBoolean:(jboolean)withTag;

- (jboolean)encodeConstructed;

- (jint)encodedLengthWithBoolean:(jboolean)withTag;

+ (jint)intValueWithByteArray:(IOSByteArray *)bytes
                      withInt:(jint)start
                      withInt:(jint)signExt;

/*!
 @brief Apply the correct validation for an INTEGER primitive following the BER rules.
 @param bytes The raw encoding of the integer.
 @return true if the (in)put fails this validation.
 */
+ (jboolean)isMalformedWithByteArray:(IOSByteArray *)bytes;

+ (jlong)longValueWithByteArray:(IOSByteArray *)bytes
                        withInt:(jint)start
                        withInt:(jint)signExt;

+ (jint)signBytesToSkipWithByteArray:(IOSByteArray *)bytes;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleAsn1ASN1Integer)

inline OrgBouncycastleAsn1ASN1UniversalType *OrgBouncycastleAsn1ASN1Integer_get_TYPE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1UniversalType *OrgBouncycastleAsn1ASN1Integer_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleAsn1ASN1Integer, TYPE, OrgBouncycastleAsn1ASN1UniversalType *)

inline jint OrgBouncycastleAsn1ASN1Integer_get_SIGN_EXT_SIGNED(void);
#define OrgBouncycastleAsn1ASN1Integer_SIGN_EXT_SIGNED -1
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1ASN1Integer, SIGN_EXT_SIGNED, jint)

inline jint OrgBouncycastleAsn1ASN1Integer_get_SIGN_EXT_UNSIGNED(void);
#define OrgBouncycastleAsn1ASN1Integer_SIGN_EXT_UNSIGNED 255
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1ASN1Integer, SIGN_EXT_UNSIGNED, jint)

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1Integer *OrgBouncycastleAsn1ASN1Integer_getInstanceWithId_(id obj);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1Integer *OrgBouncycastleAsn1ASN1Integer_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *taggedObject, jboolean explicit_);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1Integer_initWithLong_(OrgBouncycastleAsn1ASN1Integer *self, jlong value);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1Integer *new_OrgBouncycastleAsn1ASN1Integer_initWithLong_(jlong value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1Integer *create_OrgBouncycastleAsn1ASN1Integer_initWithLong_(jlong value);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(OrgBouncycastleAsn1ASN1Integer *self, JavaMathBigInteger *value);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1Integer *new_OrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(JavaMathBigInteger *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1Integer *create_OrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(JavaMathBigInteger *value);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1Integer_initWithByteArray_(OrgBouncycastleAsn1ASN1Integer *self, IOSByteArray *bytes);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1Integer *new_OrgBouncycastleAsn1ASN1Integer_initWithByteArray_(IOSByteArray *bytes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1Integer *create_OrgBouncycastleAsn1ASN1Integer_initWithByteArray_(IOSByteArray *bytes);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1Integer_initWithByteArray_withBoolean_(OrgBouncycastleAsn1ASN1Integer *self, IOSByteArray *bytes, jboolean clone);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1Integer *new_OrgBouncycastleAsn1ASN1Integer_initWithByteArray_withBoolean_(IOSByteArray *bytes, jboolean clone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1Integer *create_OrgBouncycastleAsn1ASN1Integer_initWithByteArray_withBoolean_(IOSByteArray *bytes, jboolean clone);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1Integer *OrgBouncycastleAsn1ASN1Integer_createPrimitiveWithByteArray_(IOSByteArray *contents);

FOUNDATION_EXPORT jint OrgBouncycastleAsn1ASN1Integer_intValueWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint start, jint signExt);

FOUNDATION_EXPORT jlong OrgBouncycastleAsn1ASN1Integer_longValueWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint start, jint signExt);

FOUNDATION_EXPORT jboolean OrgBouncycastleAsn1ASN1Integer_isMalformedWithByteArray_(IOSByteArray *bytes);

FOUNDATION_EXPORT jint OrgBouncycastleAsn1ASN1Integer_signBytesToSkipWithByteArray_(IOSByteArray *bytes);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1ASN1Integer)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1ASN1Integer")
