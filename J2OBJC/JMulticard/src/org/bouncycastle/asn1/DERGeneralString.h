//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/DERGeneralString.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1DERGeneralString")
#ifdef RESTRICT_OrgBouncycastleAsn1DERGeneralString
#define INCLUDE_ALL_OrgBouncycastleAsn1DERGeneralString 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1DERGeneralString 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1DERGeneralString

#if !defined (OrgBouncycastleAsn1DERGeneralString_) && (INCLUDE_ALL_OrgBouncycastleAsn1DERGeneralString || defined(INCLUDE_OrgBouncycastleAsn1DERGeneralString))
#define OrgBouncycastleAsn1DERGeneralString_

#define RESTRICT_OrgBouncycastleAsn1ASN1GeneralString 1
#define INCLUDE_OrgBouncycastleAsn1ASN1GeneralString 1
#include "org/bouncycastle/asn1/ASN1GeneralString.h"

@class IOSByteArray;
@class OrgBouncycastleAsn1ASN1TaggedObject;

/*!
 @brief ASN.1 GENERAL-STRING data type.
 <p>
  This is an 8-bit encoded ISO 646 (ASCII) character set
  with optional escapes to other character sets. 
 </p>
 */
@interface OrgBouncycastleAsn1DERGeneralString : OrgBouncycastleAsn1ASN1GeneralString

#pragma mark Public

/*!
 @brief Construct a GeneralString from the passed in String.
 @param string the string to be contained in this object.
 */
- (instancetype)initWithNSString:(NSString *)string;

/*!
 @brief Return a GeneralString from a tagged object.
 @param obj the tagged object holding the object we want
 @param explicit_ true if the object is meant to be explicitly tagged false                  otherwise.
 @throw IllegalArgumentExceptionif the tagged object cannot be converted.
 @return a DERGeneralString instance.
 */
+ (OrgBouncycastleAsn1DERGeneralString *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                withBoolean:(jboolean)explicit_;

/*!
 @brief Return a GeneralString from the given object.
 @param obj the object we want converted.
 @throw IllegalArgumentExceptionif the object cannot be converted.
 @return a DERBMPString instance, or null.
 */
+ (OrgBouncycastleAsn1DERGeneralString *)getInstanceWithId:(id)obj;

#pragma mark Package-Private

- (instancetype)initWithByteArray:(IOSByteArray *)contents
                      withBoolean:(jboolean)clone;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleAsn1DERGeneralString)

FOUNDATION_EXPORT OrgBouncycastleAsn1DERGeneralString *OrgBouncycastleAsn1DERGeneralString_getInstanceWithId_(id obj);

FOUNDATION_EXPORT OrgBouncycastleAsn1DERGeneralString *OrgBouncycastleAsn1DERGeneralString_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT void OrgBouncycastleAsn1DERGeneralString_initWithNSString_(OrgBouncycastleAsn1DERGeneralString *self, NSString *string);

FOUNDATION_EXPORT OrgBouncycastleAsn1DERGeneralString *new_OrgBouncycastleAsn1DERGeneralString_initWithNSString_(NSString *string) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1DERGeneralString *create_OrgBouncycastleAsn1DERGeneralString_initWithNSString_(NSString *string);

FOUNDATION_EXPORT void OrgBouncycastleAsn1DERGeneralString_initWithByteArray_withBoolean_(OrgBouncycastleAsn1DERGeneralString *self, IOSByteArray *contents, jboolean clone);

FOUNDATION_EXPORT OrgBouncycastleAsn1DERGeneralString *new_OrgBouncycastleAsn1DERGeneralString_initWithByteArray_withBoolean_(IOSByteArray *contents, jboolean clone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1DERGeneralString *create_OrgBouncycastleAsn1DERGeneralString_initWithByteArray_withBoolean_(IOSByteArray *contents, jboolean clone);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1DERGeneralString)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1DERGeneralString")
