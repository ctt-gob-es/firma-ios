//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1TaggedObject.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1ASN1TaggedObject")
#ifdef RESTRICT_OrgBouncycastleAsn1ASN1TaggedObject
#define INCLUDE_ALL_OrgBouncycastleAsn1ASN1TaggedObject 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1ASN1TaggedObject 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1ASN1TaggedObject

#if !defined (OrgBouncycastleAsn1ASN1TaggedObject_) && (INCLUDE_ALL_OrgBouncycastleAsn1ASN1TaggedObject || defined(INCLUDE_OrgBouncycastleAsn1ASN1TaggedObject))
#define OrgBouncycastleAsn1ASN1TaggedObject_

#define RESTRICT_OrgBouncycastleAsn1ASN1Primitive 1
#define INCLUDE_OrgBouncycastleAsn1ASN1Primitive 1
#include "org/bouncycastle/asn1/ASN1Primitive.h"

#define RESTRICT_OrgBouncycastleAsn1ASN1TaggedObjectParser 1
#define INCLUDE_OrgBouncycastleAsn1ASN1TaggedObjectParser 1
#include "org/bouncycastle/asn1/ASN1TaggedObjectParser.h"

@class IOSByteArray;
@class OrgBouncycastleAsn1ASN1EncodableVector;
@class OrgBouncycastleAsn1ASN1Object;
@class OrgBouncycastleAsn1ASN1Sequence;
@class OrgBouncycastleAsn1ASN1UniversalType;
@protocol OrgBouncycastleAsn1ASN1Encodable;

/*!
 @brief ASN.1 TaggedObject - in ASN.1 notation this is any object preceded by
  a [n] where n is some number - these are assumed to follow the construction
  rules (as with sequences).
 */
@interface OrgBouncycastleAsn1ASN1TaggedObject : OrgBouncycastleAsn1ASN1Primitive < OrgBouncycastleAsn1ASN1TaggedObjectParser > {
 @public
  jint explicitness_;
  jint tagClass_;
  jint tagNo_;
  id<OrgBouncycastleAsn1ASN1Encodable> obj_;
}

#pragma mark Public

/*!
 @brief Needed for open types, until we have better type-guided parsing support.Use sparingly for other
  purposes, and prefer <code>getExplicitBaseTagged()</code>, <code>getImplicitBaseTagged(int, int)</code> or 
 <code>getBaseUniversal(boolean, int)</code> where possible.
 Before using, check for matching tag 
 <code>class</code> and <code>number</code>.
 */
- (OrgBouncycastleAsn1ASN1Object *)getBaseObject;

/*!
 @brief Note: tagged objects are generally context dependent.Before trying to
  extract a tagged object this way, make sure you have checked that both the 
 <code>tag class</code> and <code>tag number</code> match
  what you are looking for.
 @param declaredExplicit Whether the tagged type for this object was declared                          EXPLICIT.
 @param tagNo The universal <code>tag number</code>  of the                          expected base object.
 */
- (OrgBouncycastleAsn1ASN1Primitive *)getBaseUniversalWithBoolean:(jboolean)declaredExplicit
                                                          withInt:(jint)tagNo;

/*!
 @brief Needed for open types, until we have better type-guided parsing support.Use
  sparingly for other purposes, and prefer <code>getExplicitBaseTagged()</code> or 
 <code>getBaseUniversal(boolean, int)</code> where possible.
 Before using, check
  for matching tag <code>class</code> and <code>number</code>.
 */
- (OrgBouncycastleAsn1ASN1Object *)getExplicitBaseObject;

- (OrgBouncycastleAsn1ASN1TaggedObject *)getExplicitBaseTagged;

- (OrgBouncycastleAsn1ASN1TaggedObject *)getImplicitBaseTaggedWithInt:(jint)baseTagClass
                                                              withInt:(jint)baseTagNo;

+ (OrgBouncycastleAsn1ASN1TaggedObject *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)taggedObject
                                                                                withBoolean:(jboolean)declaredExplicit;

+ (OrgBouncycastleAsn1ASN1TaggedObject *)getInstanceWithId:(id)obj;

- (OrgBouncycastleAsn1ASN1Primitive *)getLoadedObject;

/*!
 @brief Return whatever was following the tag.
 <p>
  Note: tagged objects are generally context dependent. If you're trying to
  extract a tagged object you should be going via the appropriate getInstance
  method.
 */
- (OrgBouncycastleAsn1ASN1Primitive *)getObject;

/*!
 */
- (id<OrgBouncycastleAsn1ASN1Encodable>)getObjectParserWithInt:(jint)tag
                                                   withBoolean:(jboolean)isExplicit;

- (jint)getTagClass;

/*!
 @brief Return the tag number associated with this object.
 @return the tag number.
 */
- (jint)getTagNo;

- (jboolean)hasContextTagWithInt:(jint)tagNo;

- (NSUInteger)hash;

- (jboolean)hasTagWithInt:(jint)tagClass
                  withInt:(jint)tagNo;

/*!
 @brief return whether or not the object may be explicitly tagged.
 <p>
  Note: if the object has been read from an input stream, the only
  time you can be sure if isExplicit is returning the true state of
  affairs is if it returns false. An implicitly tagged object may appear
  to be explicitly tagged, so you need to understand the context under
  which the reading was done as well, see getObject below.
 */
- (jboolean)isExplicit;

- (id<OrgBouncycastleAsn1ASN1Encodable>)parseBaseUniversalWithBoolean:(jboolean)declaredExplicit
                                                              withInt:(jint)baseTagNo;

- (id<OrgBouncycastleAsn1ASN1Encodable>)parseExplicitBaseObject;

- (id<OrgBouncycastleAsn1ASN1TaggedObjectParser>)parseExplicitBaseTagged;

- (id<OrgBouncycastleAsn1ASN1TaggedObjectParser>)parseImplicitBaseTaggedWithInt:(jint)baseTagClass
                                                                        withInt:(jint)baseTagNo;

- (NSString *)description;

#pragma mark Protected

/*!
 @brief Create a tagged object with the style given by the value of explicit.
 <p>
  If the object implements ASN1Choice the tag style will always be changed
  to explicit in accordance with the ASN.1 encoding rules. 
 </p>
 @param explicit_ true if the object is explicitly tagged.
 @param tagNo the tag number for this object.
 @param obj the tagged object.
 */
- (instancetype)initWithBoolean:(jboolean)explicit_
                        withInt:(jint)tagNo
withOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)obj;

- (instancetype)initWithBoolean:(jboolean)explicit_
                        withInt:(jint)tagClass
                        withInt:(jint)tagNo
withOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)obj;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)explicitness
                    withInt:(jint)tagClass
                    withInt:(jint)tagNo
withOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)obj;

- (jboolean)asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:(OrgBouncycastleAsn1ASN1Primitive *)other;

+ (OrgBouncycastleAsn1ASN1Primitive *)createConstructedDLWithInt:(jint)tagClass
                                                         withInt:(jint)tagNo
                      withOrgBouncycastleAsn1ASN1EncodableVector:(OrgBouncycastleAsn1ASN1EncodableVector *)contentsElements;

+ (OrgBouncycastleAsn1ASN1Primitive *)createConstructedILWithInt:(jint)tagClass
                                                         withInt:(jint)tagNo
                      withOrgBouncycastleAsn1ASN1EncodableVector:(OrgBouncycastleAsn1ASN1EncodableVector *)contentsElements;

+ (OrgBouncycastleAsn1ASN1Primitive *)createPrimitiveWithInt:(jint)tagClass
                                                     withInt:(jint)tagNo
                                               withByteArray:(IOSByteArray *)contentsOctets;

- (NSString *)getASN1Encoding;

- (OrgBouncycastleAsn1ASN1Primitive *)getBaseUniversalWithBoolean:(jboolean)declaredExplicit
                         withOrgBouncycastleAsn1ASN1UniversalType:(OrgBouncycastleAsn1ASN1UniversalType *)universalType;

/*!
 @brief Return the contents of this object as a byte[]
 @return the encoded contents of the object.
 */
- (IOSByteArray *)getContents;

/*!
 @brief Return true if the object is marked as constructed, false otherwise.
 @return true if constructed, otherwise false.
 */
- (jboolean)isConstructed;

- (jboolean)isParsed;

- (OrgBouncycastleAsn1ASN1Sequence *)rebuildConstructedWithOrgBouncycastleAsn1ASN1Primitive:(OrgBouncycastleAsn1ASN1Primitive *)primitive;

- (OrgBouncycastleAsn1ASN1TaggedObject *)replaceTagWithInt:(jint)tagClass
                                                   withInt:(jint)tagNo;

- (OrgBouncycastleAsn1ASN1Primitive *)toDERObject;

- (OrgBouncycastleAsn1ASN1Primitive *)toDLObject;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleAsn1ASN1TaggedObject)

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1ASN1TaggedObject, obj_, id<OrgBouncycastleAsn1ASN1Encodable>)

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1TaggedObject *OrgBouncycastleAsn1ASN1TaggedObject_getInstanceWithId_(id obj);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1TaggedObject *OrgBouncycastleAsn1ASN1TaggedObject_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *taggedObject, jboolean declaredExplicit);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1TaggedObject_initWithBoolean_withInt_withOrgBouncycastleAsn1ASN1Encodable_(OrgBouncycastleAsn1ASN1TaggedObject *self, jboolean explicit_, jint tagNo, id<OrgBouncycastleAsn1ASN1Encodable> obj);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1TaggedObject_initWithBoolean_withInt_withInt_withOrgBouncycastleAsn1ASN1Encodable_(OrgBouncycastleAsn1ASN1TaggedObject *self, jboolean explicit_, jint tagClass, jint tagNo, id<OrgBouncycastleAsn1ASN1Encodable> obj);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1TaggedObject_initWithInt_withInt_withInt_withOrgBouncycastleAsn1ASN1Encodable_(OrgBouncycastleAsn1ASN1TaggedObject *self, jint explicitness, jint tagClass, jint tagNo, id<OrgBouncycastleAsn1ASN1Encodable> obj);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1Primitive *OrgBouncycastleAsn1ASN1TaggedObject_createConstructedDLWithInt_withInt_withOrgBouncycastleAsn1ASN1EncodableVector_(jint tagClass, jint tagNo, OrgBouncycastleAsn1ASN1EncodableVector *contentsElements);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1Primitive *OrgBouncycastleAsn1ASN1TaggedObject_createConstructedILWithInt_withInt_withOrgBouncycastleAsn1ASN1EncodableVector_(jint tagClass, jint tagNo, OrgBouncycastleAsn1ASN1EncodableVector *contentsElements);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1Primitive *OrgBouncycastleAsn1ASN1TaggedObject_createPrimitiveWithInt_withInt_withByteArray_(jint tagClass, jint tagNo, IOSByteArray *contentsOctets);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1ASN1TaggedObject)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1ASN1TaggedObject")
