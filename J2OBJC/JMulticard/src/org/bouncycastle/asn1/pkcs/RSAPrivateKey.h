//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/pkcs/RSAPrivateKey.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1PkcsRSAPrivateKey")
#ifdef RESTRICT_OrgBouncycastleAsn1PkcsRSAPrivateKey
#define INCLUDE_ALL_OrgBouncycastleAsn1PkcsRSAPrivateKey 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1PkcsRSAPrivateKey 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1PkcsRSAPrivateKey

#if !defined (OrgBouncycastleAsn1PkcsRSAPrivateKey_) && (INCLUDE_ALL_OrgBouncycastleAsn1PkcsRSAPrivateKey || defined(INCLUDE_OrgBouncycastleAsn1PkcsRSAPrivateKey))
#define OrgBouncycastleAsn1PkcsRSAPrivateKey_

#define RESTRICT_OrgBouncycastleAsn1ASN1Object 1
#define INCLUDE_OrgBouncycastleAsn1ASN1Object 1
#include "org/bouncycastle/asn1/ASN1Object.h"

@class JavaMathBigInteger;
@class OrgBouncycastleAsn1ASN1Primitive;
@class OrgBouncycastleAsn1ASN1TaggedObject;

@interface OrgBouncycastleAsn1PkcsRSAPrivateKey : OrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)modulus
                    withJavaMathBigInteger:(JavaMathBigInteger *)publicExponent
                    withJavaMathBigInteger:(JavaMathBigInteger *)privateExponent
                    withJavaMathBigInteger:(JavaMathBigInteger *)prime1
                    withJavaMathBigInteger:(JavaMathBigInteger *)prime2
                    withJavaMathBigInteger:(JavaMathBigInteger *)exponent1
                    withJavaMathBigInteger:(JavaMathBigInteger *)exponent2
                    withJavaMathBigInteger:(JavaMathBigInteger *)coefficient;

- (JavaMathBigInteger *)getCoefficient;

- (JavaMathBigInteger *)getExponent1;

- (JavaMathBigInteger *)getExponent2;

+ (OrgBouncycastleAsn1PkcsRSAPrivateKey *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                 withBoolean:(jboolean)explicit_;

+ (OrgBouncycastleAsn1PkcsRSAPrivateKey *)getInstanceWithId:(id)obj;

- (JavaMathBigInteger *)getModulus;

- (JavaMathBigInteger *)getPrime1;

- (JavaMathBigInteger *)getPrime2;

- (JavaMathBigInteger *)getPrivateExponent;

- (JavaMathBigInteger *)getPublicExponent;

- (JavaMathBigInteger *)getVersion;

/*!
 @brief This outputs the key in PKCS1v2 format.
 @code

       RSAPrivateKey ::= SEQUENCE {
                           version Version,
                           modulus INTEGER, -- n
                           publicExponent INTEGER, -- e
                           privateExponent INTEGER, -- d
                           prime1 INTEGER, -- p
                           prime2 INTEGER, -- q
                           exponent1 INTEGER, -- d mod (p-1)
                           exponent2 INTEGER, -- d mod (q-1)
                           coefficient INTEGER, -- (inverse of q) mod p
                           otherPrimeInfos OtherPrimeInfos OPTIONAL
                       }
       Version ::= INTEGER { two-prime(0), multi(1) }
         (CONSTRAINED BY {-- version must be multi if otherPrimeInfos present --}) 
  
@endcode
  <p>
  This routine is written to output PKCS1 version 2.1, private keys.
 */
- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleAsn1PkcsRSAPrivateKey)

FOUNDATION_EXPORT OrgBouncycastleAsn1PkcsRSAPrivateKey *OrgBouncycastleAsn1PkcsRSAPrivateKey_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT OrgBouncycastleAsn1PkcsRSAPrivateKey *OrgBouncycastleAsn1PkcsRSAPrivateKey_getInstanceWithId_(id obj);

FOUNDATION_EXPORT void OrgBouncycastleAsn1PkcsRSAPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleAsn1PkcsRSAPrivateKey *self, JavaMathBigInteger *modulus, JavaMathBigInteger *publicExponent, JavaMathBigInteger *privateExponent, JavaMathBigInteger *prime1, JavaMathBigInteger *prime2, JavaMathBigInteger *exponent1, JavaMathBigInteger *exponent2, JavaMathBigInteger *coefficient);

FOUNDATION_EXPORT OrgBouncycastleAsn1PkcsRSAPrivateKey *new_OrgBouncycastleAsn1PkcsRSAPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *modulus, JavaMathBigInteger *publicExponent, JavaMathBigInteger *privateExponent, JavaMathBigInteger *prime1, JavaMathBigInteger *prime2, JavaMathBigInteger *exponent1, JavaMathBigInteger *exponent2, JavaMathBigInteger *coefficient) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1PkcsRSAPrivateKey *create_OrgBouncycastleAsn1PkcsRSAPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *modulus, JavaMathBigInteger *publicExponent, JavaMathBigInteger *privateExponent, JavaMathBigInteger *prime1, JavaMathBigInteger *prime2, JavaMathBigInteger *exponent1, JavaMathBigInteger *exponent2, JavaMathBigInteger *coefficient);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1PkcsRSAPrivateKey)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1PkcsRSAPrivateKey")
