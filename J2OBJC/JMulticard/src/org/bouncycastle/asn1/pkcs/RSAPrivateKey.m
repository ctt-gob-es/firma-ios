//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/pkcs/RSAPrivateKey.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/util/Enumeration.h"
#include "org/bouncycastle/asn1/ASN1EncodableVector.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/ASN1Object.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1Sequence.h"
#include "org/bouncycastle/asn1/ASN1TaggedObject.h"
#include "org/bouncycastle/asn1/DERSequence.h"
#include "org/bouncycastle/asn1/pkcs/RSAPrivateKey.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/asn1/pkcs/RSAPrivateKey must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleAsn1PkcsRSAPrivateKey () {
 @public
  JavaMathBigInteger *version__;
  JavaMathBigInteger *modulus_;
  JavaMathBigInteger *publicExponent_;
  JavaMathBigInteger *privateExponent_;
  JavaMathBigInteger *prime1_;
  JavaMathBigInteger *prime2_;
  JavaMathBigInteger *exponent1_;
  JavaMathBigInteger *exponent2_;
  JavaMathBigInteger *coefficient_;
  OrgBouncycastleAsn1ASN1Sequence *otherPrimeInfos_;
}

- (instancetype)initWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1PkcsRSAPrivateKey, version__, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1PkcsRSAPrivateKey, modulus_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1PkcsRSAPrivateKey, publicExponent_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1PkcsRSAPrivateKey, privateExponent_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1PkcsRSAPrivateKey, prime1_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1PkcsRSAPrivateKey, prime2_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1PkcsRSAPrivateKey, exponent1_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1PkcsRSAPrivateKey, exponent2_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1PkcsRSAPrivateKey, coefficient_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1PkcsRSAPrivateKey, otherPrimeInfos_, OrgBouncycastleAsn1ASN1Sequence *)

__attribute__((unused)) static void OrgBouncycastleAsn1PkcsRSAPrivateKey_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1PkcsRSAPrivateKey *self, OrgBouncycastleAsn1ASN1Sequence *seq);

__attribute__((unused)) static OrgBouncycastleAsn1PkcsRSAPrivateKey *new_OrgBouncycastleAsn1PkcsRSAPrivateKey_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleAsn1PkcsRSAPrivateKey *create_OrgBouncycastleAsn1PkcsRSAPrivateKey_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence *seq);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/pkcs/RSAPrivateKey.java"


#line 14
@implementation OrgBouncycastleAsn1PkcsRSAPrivateKey


#line 26
+ (OrgBouncycastleAsn1PkcsRSAPrivateKey *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                 withBoolean:(jboolean)explicit_ {
  return OrgBouncycastleAsn1PkcsRSAPrivateKey_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_);
}


#line 33
+ (OrgBouncycastleAsn1PkcsRSAPrivateKey *)getInstanceWithId:(id)obj {
  return OrgBouncycastleAsn1PkcsRSAPrivateKey_getInstanceWithId_(obj);
}


#line 49
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)modulus
                    withJavaMathBigInteger:(JavaMathBigInteger *)publicExponent
                    withJavaMathBigInteger:(JavaMathBigInteger *)privateExponent
                    withJavaMathBigInteger:(JavaMathBigInteger *)prime1
                    withJavaMathBigInteger:(JavaMathBigInteger *)prime2
                    withJavaMathBigInteger:(JavaMathBigInteger *)exponent1
                    withJavaMathBigInteger:(JavaMathBigInteger *)exponent2
                    withJavaMathBigInteger:(JavaMathBigInteger *)coefficient {
  OrgBouncycastleAsn1PkcsRSAPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, modulus, publicExponent, privateExponent, prime1, prime2, exponent1, exponent2, coefficient);
  return self;
}


#line 70
- (instancetype)initWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq {
  OrgBouncycastleAsn1PkcsRSAPrivateKey_initWithOrgBouncycastleAsn1ASN1Sequence_(self, seq);
  return self;
}


#line 98
- (JavaMathBigInteger *)getVersion {
  
#line 100
  return version__;
}


#line 103
- (JavaMathBigInteger *)getModulus {
  
#line 105
  return modulus_;
}


#line 108
- (JavaMathBigInteger *)getPublicExponent {
  
#line 110
  return publicExponent_;
}


#line 113
- (JavaMathBigInteger *)getPrivateExponent {
  
#line 115
  return privateExponent_;
}


#line 118
- (JavaMathBigInteger *)getPrime1 {
  
#line 120
  return prime1_;
}


#line 123
- (JavaMathBigInteger *)getPrime2 {
  
#line 125
  return prime2_;
}


#line 128
- (JavaMathBigInteger *)getExponent1 {
  
#line 130
  return exponent1_;
}


#line 133
- (JavaMathBigInteger *)getExponent2 {
  
#line 135
  return exponent2_;
}


#line 138
- (JavaMathBigInteger *)getCoefficient {
  
#line 140
  return coefficient_;
}


#line 165
- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  
#line 168
  OrgBouncycastleAsn1ASN1EncodableVector *v = new_OrgBouncycastleAsn1ASN1EncodableVector_initWithInt_(10);
  
#line 170
  [v addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(version__)];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([self getModulus])];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([self getPublicExponent])];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([self getPrivateExponent])];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([self getPrime1])];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([self getPrime2])];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([self getExponent1])];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([self getExponent2])];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_([self getCoefficient])];
  
#line 180
  if (otherPrimeInfos_ != nil) {
    
#line 182
    [v addWithOrgBouncycastleAsn1ASN1Encodable:otherPrimeInfos_];
  }
  
#line 185
  return new_OrgBouncycastleAsn1DERSequence_initWithOrgBouncycastleAsn1ASN1EncodableVector_(v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgBouncycastleAsn1PkcsRSAPrivateKey;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1PkcsRSAPrivateKey;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 4, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:withBoolean:);
  methods[1].selector = @selector(getInstanceWithId:);
  methods[2].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[3].selector = @selector(initWithOrgBouncycastleAsn1ASN1Sequence:);
  methods[4].selector = @selector(getVersion);
  methods[5].selector = @selector(getModulus);
  methods[6].selector = @selector(getPublicExponent);
  methods[7].selector = @selector(getPrivateExponent);
  methods[8].selector = @selector(getPrime1);
  methods[9].selector = @selector(getPrime2);
  methods[10].selector = @selector(getExponent1);
  methods[11].selector = @selector(getExponent2);
  methods[12].selector = @selector(getCoefficient);
  methods[13].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "version__", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, 5, -1, -1, -1 },
    { "modulus_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "publicExponent_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "privateExponent_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "prime1_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "prime2_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "exponent1_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "exponent2_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "coefficient_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "otherPrimeInfos_", "LOrgBouncycastleAsn1ASN1Sequence;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LOrgBouncycastleAsn1ASN1TaggedObject;Z", "LNSObject;", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "LOrgBouncycastleAsn1ASN1Sequence;", "version" };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1PkcsRSAPrivateKey = { "RSAPrivateKey", "org.bouncycastle.asn1.pkcs", ptrTable, methods, fields, 7, 0x1, 14, 10, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1PkcsRSAPrivateKey;
}

@end


#line 26
OrgBouncycastleAsn1PkcsRSAPrivateKey *OrgBouncycastleAsn1PkcsRSAPrivateKey_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_) {
  OrgBouncycastleAsn1PkcsRSAPrivateKey_initialize();
  
#line 30
  return OrgBouncycastleAsn1PkcsRSAPrivateKey_getInstanceWithId_(OrgBouncycastleAsn1ASN1Sequence_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_));
}

OrgBouncycastleAsn1PkcsRSAPrivateKey *OrgBouncycastleAsn1PkcsRSAPrivateKey_getInstanceWithId_(id obj) {
  OrgBouncycastleAsn1PkcsRSAPrivateKey_initialize();
  
#line 36
  if ([obj isKindOfClass:[OrgBouncycastleAsn1PkcsRSAPrivateKey class]]) {
    
#line 38
    return (OrgBouncycastleAsn1PkcsRSAPrivateKey *) obj;
  }
  
#line 41
  if (obj != nil) {
    
#line 43
    return new_OrgBouncycastleAsn1PkcsRSAPrivateKey_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(obj));
  }
  
#line 46
  return nil;
}


#line 49
void OrgBouncycastleAsn1PkcsRSAPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleAsn1PkcsRSAPrivateKey *self, JavaMathBigInteger *modulus, JavaMathBigInteger *publicExponent, JavaMathBigInteger *privateExponent, JavaMathBigInteger *prime1, JavaMathBigInteger *prime2, JavaMathBigInteger *exponent1, JavaMathBigInteger *exponent2, JavaMathBigInteger *coefficient) {
  OrgBouncycastleAsn1ASN1Object_init(self);
  self->otherPrimeInfos_ =
#line 24
  nil;
  
#line 59
  self->version__ = JavaMathBigInteger_valueOfWithLong_(0);
  self->modulus_ = modulus;
  self->publicExponent_ = publicExponent;
  self->privateExponent_ = privateExponent;
  self->prime1_ = prime1;
  self->prime2_ = prime2;
  self->exponent1_ = exponent1;
  self->exponent2_ = exponent2;
  self->coefficient_ = coefficient;
}


#line 49
OrgBouncycastleAsn1PkcsRSAPrivateKey *new_OrgBouncycastleAsn1PkcsRSAPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *modulus, JavaMathBigInteger *publicExponent, JavaMathBigInteger *privateExponent, JavaMathBigInteger *prime1, JavaMathBigInteger *prime2, JavaMathBigInteger *exponent1, JavaMathBigInteger *exponent2, JavaMathBigInteger *coefficient) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1PkcsRSAPrivateKey, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, modulus, publicExponent, privateExponent, prime1, prime2, exponent1, exponent2, coefficient)
}


#line 49
OrgBouncycastleAsn1PkcsRSAPrivateKey *create_OrgBouncycastleAsn1PkcsRSAPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *modulus, JavaMathBigInteger *publicExponent, JavaMathBigInteger *privateExponent, JavaMathBigInteger *prime1, JavaMathBigInteger *prime2, JavaMathBigInteger *exponent1, JavaMathBigInteger *exponent2, JavaMathBigInteger *coefficient) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1PkcsRSAPrivateKey, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, modulus, publicExponent, privateExponent, prime1, prime2, exponent1, exponent2, coefficient)
}


#line 70
void OrgBouncycastleAsn1PkcsRSAPrivateKey_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1PkcsRSAPrivateKey *self, OrgBouncycastleAsn1ASN1Sequence *seq) {
  OrgBouncycastleAsn1ASN1Object_init(self);
  self->otherPrimeInfos_ =
#line 24
  nil;
  
#line 73
  id<JavaUtilEnumeration> e = [((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjects];
  
#line 75
  OrgBouncycastleAsn1ASN1Integer *v = (OrgBouncycastleAsn1ASN1Integer *) cast_chk([((id<JavaUtilEnumeration>) nil_chk(e)) nextElement], [OrgBouncycastleAsn1ASN1Integer class]);
  jint versionValue = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(v)) intValueExact];
  if (versionValue < 0 || versionValue > 1) {
    
#line 79
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"wrong version for RSA private key");
  }
  
#line 82
  self->version__ = [v getValue];
  self->modulus_ = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(((OrgBouncycastleAsn1ASN1Integer *) cast_chk([e nextElement], [OrgBouncycastleAsn1ASN1Integer class])))) getValue];
  self->publicExponent_ = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(((OrgBouncycastleAsn1ASN1Integer *) cast_chk([e nextElement], [OrgBouncycastleAsn1ASN1Integer class])))) getValue];
  self->privateExponent_ = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(((OrgBouncycastleAsn1ASN1Integer *) cast_chk([e nextElement], [OrgBouncycastleAsn1ASN1Integer class])))) getValue];
  self->prime1_ = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(((OrgBouncycastleAsn1ASN1Integer *) cast_chk([e nextElement], [OrgBouncycastleAsn1ASN1Integer class])))) getValue];
  self->prime2_ = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(((OrgBouncycastleAsn1ASN1Integer *) cast_chk([e nextElement], [OrgBouncycastleAsn1ASN1Integer class])))) getValue];
  self->exponent1_ = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(((OrgBouncycastleAsn1ASN1Integer *) cast_chk([e nextElement], [OrgBouncycastleAsn1ASN1Integer class])))) getValue];
  self->exponent2_ = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(((OrgBouncycastleAsn1ASN1Integer *) cast_chk([e nextElement], [OrgBouncycastleAsn1ASN1Integer class])))) getValue];
  self->coefficient_ = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(((OrgBouncycastleAsn1ASN1Integer *) cast_chk([e nextElement], [OrgBouncycastleAsn1ASN1Integer class])))) getValue];
  
#line 92
  if ([e hasMoreElements]) {
    
#line 94
    self->otherPrimeInfos_ = (OrgBouncycastleAsn1ASN1Sequence *) cast_chk([e nextElement], [OrgBouncycastleAsn1ASN1Sequence class]);
  }
}


#line 70
OrgBouncycastleAsn1PkcsRSAPrivateKey *new_OrgBouncycastleAsn1PkcsRSAPrivateKey_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1PkcsRSAPrivateKey, initWithOrgBouncycastleAsn1ASN1Sequence_, seq)
}


#line 70
OrgBouncycastleAsn1PkcsRSAPrivateKey *create_OrgBouncycastleAsn1PkcsRSAPrivateKey_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1PkcsRSAPrivateKey, initWithOrgBouncycastleAsn1ASN1Sequence_, seq)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1PkcsRSAPrivateKey)
