//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/pkcs/PrivateKeyInfo.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1PkcsPrivateKeyInfo")
#ifdef RESTRICT_OrgBouncycastleAsn1PkcsPrivateKeyInfo
#define INCLUDE_ALL_OrgBouncycastleAsn1PkcsPrivateKeyInfo 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1PkcsPrivateKeyInfo 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1PkcsPrivateKeyInfo

#if !defined (OrgBouncycastleAsn1PkcsPrivateKeyInfo_) && (INCLUDE_ALL_OrgBouncycastleAsn1PkcsPrivateKeyInfo || defined(INCLUDE_OrgBouncycastleAsn1PkcsPrivateKeyInfo))
#define OrgBouncycastleAsn1PkcsPrivateKeyInfo_

#define RESTRICT_OrgBouncycastleAsn1ASN1Object 1
#define INCLUDE_OrgBouncycastleAsn1ASN1Object 1
#include "org/bouncycastle/asn1/ASN1Object.h"

@class IOSByteArray;
@class OrgBouncycastleAsn1ASN1BitString;
@class OrgBouncycastleAsn1ASN1Integer;
@class OrgBouncycastleAsn1ASN1OctetString;
@class OrgBouncycastleAsn1ASN1Primitive;
@class OrgBouncycastleAsn1ASN1Set;
@class OrgBouncycastleAsn1ASN1TaggedObject;
@class OrgBouncycastleAsn1X509AlgorithmIdentifier;
@protocol OrgBouncycastleAsn1ASN1Encodable;

/*!
 @brief RFC 5958
 @code

   [IMPLICIT TAGS]
   OneAsymmetricKey ::= SEQUENCE {
       version                   Version,
       privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,
       privateKey                PrivateKey,
       attributes            [0] Attributes OPTIONAL,
       ...,
       [[2: publicKey        [1] PublicKey OPTIONAL ]],
       ...
   }
   PrivateKeyInfo ::= OneAsymmetricKey
   Version ::= INTEGER { v1(0), v2(1) } (v1, ..., v2)
   PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier
                                      { PUBLIC-KEY,
                                        { PrivateKeyAlgorithms } }
   PrivateKey ::= OCTET STRING
                      -- Content varies based on type of key.
 The
                      -- algorithm identifier dictates the format of
                      -- the key.
   PublicKey ::= BIT STRING
                      -- Content varies based on type of key.  The
                      -- algorithm identifier dictates the format of
                      -- the key.
   Attributes ::= SET OF Attribute { { OneAsymmetricKeyAttributes } }  
  
@endcode
 */
@interface OrgBouncycastleAsn1PkcsPrivateKeyInfo : OrgBouncycastleAsn1ASN1Object

#pragma mark Public

- (instancetype)initWithOrgBouncycastleAsn1X509AlgorithmIdentifier:(OrgBouncycastleAsn1X509AlgorithmIdentifier *)privateKeyAlgorithm
                              withOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)privateKey;

- (instancetype)initWithOrgBouncycastleAsn1X509AlgorithmIdentifier:(OrgBouncycastleAsn1X509AlgorithmIdentifier *)privateKeyAlgorithm
                              withOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)privateKey
                                    withOrgBouncycastleAsn1ASN1Set:(OrgBouncycastleAsn1ASN1Set *)attributes;

- (instancetype)initWithOrgBouncycastleAsn1X509AlgorithmIdentifier:(OrgBouncycastleAsn1X509AlgorithmIdentifier *)privateKeyAlgorithm
                              withOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)privateKey
                                    withOrgBouncycastleAsn1ASN1Set:(OrgBouncycastleAsn1ASN1Set *)attributes
                                                     withByteArray:(IOSByteArray *)publicKey;

- (OrgBouncycastleAsn1ASN1Set *)getAttributes;

+ (OrgBouncycastleAsn1PkcsPrivateKeyInfo *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                  withBoolean:(jboolean)explicit_;

+ (OrgBouncycastleAsn1PkcsPrivateKeyInfo *)getInstanceWithId:(id)obj;

- (OrgBouncycastleAsn1ASN1OctetString *)getPrivateKey;

- (OrgBouncycastleAsn1X509AlgorithmIdentifier *)getPrivateKeyAlgorithm;

/*!
 @brief for when the public key is raw bits.
 @return the public key as the raw bit string...
 */
- (OrgBouncycastleAsn1ASN1BitString *)getPublicKeyData;

- (OrgBouncycastleAsn1ASN1Integer *)getVersion;

/*!
 @brief Return true if a public key is present, false otherwise.
 @return true if public included, otherwise false.
 */
- (jboolean)hasPublicKey;

- (id<OrgBouncycastleAsn1ASN1Encodable>)parsePrivateKey;

/*!
 @brief for when the public key is an encoded object - if the bitstring
  can't be decoded this routine throws an IOException.
 @return the public key as an ASN.1 primitive.
 @throw IOException- if the bit string doesn't represent a DER
  encoded object.
 */
- (id<OrgBouncycastleAsn1ASN1Encodable>)parsePublicKey;

- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleAsn1PkcsPrivateKeyInfo)

FOUNDATION_EXPORT OrgBouncycastleAsn1PkcsPrivateKeyInfo *OrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT OrgBouncycastleAsn1PkcsPrivateKeyInfo *OrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_(id obj);

FOUNDATION_EXPORT void OrgBouncycastleAsn1PkcsPrivateKeyInfo_initWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1ASN1Encodable_(OrgBouncycastleAsn1PkcsPrivateKeyInfo *self, OrgBouncycastleAsn1X509AlgorithmIdentifier *privateKeyAlgorithm, id<OrgBouncycastleAsn1ASN1Encodable> privateKey);

FOUNDATION_EXPORT OrgBouncycastleAsn1PkcsPrivateKeyInfo *new_OrgBouncycastleAsn1PkcsPrivateKeyInfo_initWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1ASN1Encodable_(OrgBouncycastleAsn1X509AlgorithmIdentifier *privateKeyAlgorithm, id<OrgBouncycastleAsn1ASN1Encodable> privateKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1PkcsPrivateKeyInfo *create_OrgBouncycastleAsn1PkcsPrivateKeyInfo_initWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1ASN1Encodable_(OrgBouncycastleAsn1X509AlgorithmIdentifier *privateKeyAlgorithm, id<OrgBouncycastleAsn1ASN1Encodable> privateKey);

FOUNDATION_EXPORT void OrgBouncycastleAsn1PkcsPrivateKeyInfo_initWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1ASN1Encodable_withOrgBouncycastleAsn1ASN1Set_(OrgBouncycastleAsn1PkcsPrivateKeyInfo *self, OrgBouncycastleAsn1X509AlgorithmIdentifier *privateKeyAlgorithm, id<OrgBouncycastleAsn1ASN1Encodable> privateKey, OrgBouncycastleAsn1ASN1Set *attributes);

FOUNDATION_EXPORT OrgBouncycastleAsn1PkcsPrivateKeyInfo *new_OrgBouncycastleAsn1PkcsPrivateKeyInfo_initWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1ASN1Encodable_withOrgBouncycastleAsn1ASN1Set_(OrgBouncycastleAsn1X509AlgorithmIdentifier *privateKeyAlgorithm, id<OrgBouncycastleAsn1ASN1Encodable> privateKey, OrgBouncycastleAsn1ASN1Set *attributes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1PkcsPrivateKeyInfo *create_OrgBouncycastleAsn1PkcsPrivateKeyInfo_initWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1ASN1Encodable_withOrgBouncycastleAsn1ASN1Set_(OrgBouncycastleAsn1X509AlgorithmIdentifier *privateKeyAlgorithm, id<OrgBouncycastleAsn1ASN1Encodable> privateKey, OrgBouncycastleAsn1ASN1Set *attributes);

FOUNDATION_EXPORT void OrgBouncycastleAsn1PkcsPrivateKeyInfo_initWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1ASN1Encodable_withOrgBouncycastleAsn1ASN1Set_withByteArray_(OrgBouncycastleAsn1PkcsPrivateKeyInfo *self, OrgBouncycastleAsn1X509AlgorithmIdentifier *privateKeyAlgorithm, id<OrgBouncycastleAsn1ASN1Encodable> privateKey, OrgBouncycastleAsn1ASN1Set *attributes, IOSByteArray *publicKey);

FOUNDATION_EXPORT OrgBouncycastleAsn1PkcsPrivateKeyInfo *new_OrgBouncycastleAsn1PkcsPrivateKeyInfo_initWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1ASN1Encodable_withOrgBouncycastleAsn1ASN1Set_withByteArray_(OrgBouncycastleAsn1X509AlgorithmIdentifier *privateKeyAlgorithm, id<OrgBouncycastleAsn1ASN1Encodable> privateKey, OrgBouncycastleAsn1ASN1Set *attributes, IOSByteArray *publicKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1PkcsPrivateKeyInfo *create_OrgBouncycastleAsn1PkcsPrivateKeyInfo_initWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1ASN1Encodable_withOrgBouncycastleAsn1ASN1Set_withByteArray_(OrgBouncycastleAsn1X509AlgorithmIdentifier *privateKeyAlgorithm, id<OrgBouncycastleAsn1ASN1Encodable> privateKey, OrgBouncycastleAsn1ASN1Set *attributes, IOSByteArray *publicKey);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1PkcsPrivateKeyInfo)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1PkcsPrivateKeyInfo")
