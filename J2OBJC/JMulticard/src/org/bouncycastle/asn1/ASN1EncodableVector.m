//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1EncodableVector.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1EncodableVector.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/asn1/ASN1EncodableVector must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleAsn1ASN1EncodableVector () {
 @public
  IOSObjectArray *elements_;
  jint elementCount_;
  jboolean copyOnWrite_;
}

- (void)doAddAllWithOrgBouncycastleAsn1ASN1EncodableArray:(IOSObjectArray *)others
                                             withNSString:(NSString *)nullMsg;

- (void)reallocateWithInt:(jint)minCapacity;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1ASN1EncodableVector, elements_, IOSObjectArray *)

inline jint OrgBouncycastleAsn1ASN1EncodableVector_get_DEFAULT_CAPACITY(void);
#define OrgBouncycastleAsn1ASN1EncodableVector_DEFAULT_CAPACITY 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1ASN1EncodableVector, DEFAULT_CAPACITY, jint)

__attribute__((unused)) static void OrgBouncycastleAsn1ASN1EncodableVector_doAddAllWithOrgBouncycastleAsn1ASN1EncodableArray_withNSString_(OrgBouncycastleAsn1ASN1EncodableVector *self, IOSObjectArray *others, NSString *nullMsg);

__attribute__((unused)) static void OrgBouncycastleAsn1ASN1EncodableVector_reallocateWithInt_(OrgBouncycastleAsn1ASN1EncodableVector *self, jint minCapacity);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1EncodableVector.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleAsn1ASN1EncodableVector)

IOSObjectArray *OrgBouncycastleAsn1ASN1EncodableVector_EMPTY_ELEMENTS;


#line 6
@implementation OrgBouncycastleAsn1ASN1EncodableVector

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 16
- (instancetype)init {
  OrgBouncycastleAsn1ASN1EncodableVector_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 21
- (instancetype)initWithInt:(jint)initialCapacity {
  OrgBouncycastleAsn1ASN1EncodableVector_initWithInt_(self, initialCapacity);
  return self;
}


#line 33
- (void)addWithOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)element {
  
#line 35
  if (nil == element) {
    
#line 37
    @throw new_JavaLangNullPointerException_initWithNSString_(@"'element' cannot be null");
  }
  
#line 40
  jint capacity = ((IOSObjectArray *) nil_chk(elements_))->size_;
  jint minCapacity = elementCount_ + 1;
  if ((minCapacity > capacity) | copyOnWrite_) {
    
#line 44
    OrgBouncycastleAsn1ASN1EncodableVector_reallocateWithInt_(self, minCapacity);
  }
  
#line 47
  (void) IOSObjectArray_Set(nil_chk(self->elements_), elementCount_, element);
  self->elementCount_ = minCapacity;
}


#line 51
- (void)addAllWithOrgBouncycastleAsn1ASN1EncodableArray:(IOSObjectArray *)others {
  
#line 53
  if (nil == others) {
    
#line 55
    @throw new_JavaLangNullPointerException_initWithNSString_(@"'others' cannot be null");
  }
  
#line 58
  OrgBouncycastleAsn1ASN1EncodableVector_doAddAllWithOrgBouncycastleAsn1ASN1EncodableArray_withNSString_(self, others, @"'others' elements cannot be null");
}


#line 61
- (void)addAllWithOrgBouncycastleAsn1ASN1EncodableVector:(OrgBouncycastleAsn1ASN1EncodableVector *)other {
  
#line 63
  if (nil == other) {
    
#line 65
    @throw new_JavaLangNullPointerException_initWithNSString_(@"'other' cannot be null");
  }
  
#line 68
  OrgBouncycastleAsn1ASN1EncodableVector_doAddAllWithOrgBouncycastleAsn1ASN1EncodableArray_withNSString_(self, other->elements_, @"'other' elements cannot be null");
}


#line 71
- (void)doAddAllWithOrgBouncycastleAsn1ASN1EncodableArray:(IOSObjectArray *)others
                                             withNSString:(NSString *)nullMsg {
  OrgBouncycastleAsn1ASN1EncodableVector_doAddAllWithOrgBouncycastleAsn1ASN1EncodableArray_withNSString_(self, others, nullMsg);
}


#line 108
- (id<OrgBouncycastleAsn1ASN1Encodable>)getWithInt:(jint)i {
  
#line 110
  if (i >= elementCount_) {
    
#line 112
    @throw new_JavaLangArrayIndexOutOfBoundsException_initWithNSString_(JreStrcat("I$I", i, @" >= ", elementCount_));
  }
  
#line 115
  return IOSObjectArray_Get(nil_chk(elements_), i);
}


#line 123
- (jint)size {
  
#line 125
  return elementCount_;
}


#line 128
- (IOSObjectArray *)copyElements {
  
#line 130
  if (0 == elementCount_) {
    
#line 132
    return OrgBouncycastleAsn1ASN1EncodableVector_EMPTY_ELEMENTS;
  }
  
#line 135
  IOSObjectArray *copy_ = [IOSObjectArray newArrayWithLength:elementCount_ type:OrgBouncycastleAsn1ASN1Encodable_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(elements_, 0, copy_, 0, elementCount_);
  return copy_;
}


#line 140
- (IOSObjectArray *)takeElements {
  
#line 142
  if (0 == elementCount_) {
    
#line 144
    return OrgBouncycastleAsn1ASN1EncodableVector_EMPTY_ELEMENTS;
  }
  
#line 147
  if (((IOSObjectArray *) nil_chk(elements_))->size_ == elementCount_) {
    
#line 149
    self->copyOnWrite_ = true;
    return elements_;
  }
  
#line 153
  IOSObjectArray *copy_ = [IOSObjectArray newArrayWithLength:elementCount_ type:OrgBouncycastleAsn1ASN1Encodable_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(elements_, 0, copy_, 0, elementCount_);
  return copy_;
}


#line 158
- (void)reallocateWithInt:(jint)minCapacity {
  OrgBouncycastleAsn1ASN1EncodableVector_reallocateWithInt_(self, minCapacity);
}


#line 170
+ (IOSObjectArray *)cloneElementsWithOrgBouncycastleAsn1ASN1EncodableArray:(IOSObjectArray *)elements {
  return OrgBouncycastleAsn1ASN1EncodableVector_cloneElementsWithOrgBouncycastleAsn1ASN1EncodableArray_(elements);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Encodable;", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgBouncycastleAsn1ASN1Encodable;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgBouncycastleAsn1ASN1Encodable;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 0, -1, -1, -1, -1 },
    { NULL, "[LOrgBouncycastleAsn1ASN1Encodable;", 0x8, 10, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(addWithOrgBouncycastleAsn1ASN1Encodable:);
  methods[3].selector = @selector(addAllWithOrgBouncycastleAsn1ASN1EncodableArray:);
  methods[4].selector = @selector(addAllWithOrgBouncycastleAsn1ASN1EncodableVector:);
  methods[5].selector = @selector(doAddAllWithOrgBouncycastleAsn1ASN1EncodableArray:withNSString:);
  methods[6].selector = @selector(getWithInt:);
  methods[7].selector = @selector(size);
  methods[8].selector = @selector(copyElements);
  methods[9].selector = @selector(takeElements);
  methods[10].selector = @selector(reallocateWithInt:);
  methods[11].selector = @selector(cloneElementsWithOrgBouncycastleAsn1ASN1EncodableArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_ELEMENTS", "[LOrgBouncycastleAsn1ASN1Encodable;", .constantValue.asLong = 0, 0x18, -1, 11, -1, -1 },
    { "DEFAULT_CAPACITY", "I", .constantValue.asInt = OrgBouncycastleAsn1ASN1EncodableVector_DEFAULT_CAPACITY, 0x1a, -1, -1, -1, -1 },
    { "elements_", "[LOrgBouncycastleAsn1ASN1Encodable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "elementCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "copyOnWrite_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "add", "LOrgBouncycastleAsn1ASN1Encodable;", "addAll", "[LOrgBouncycastleAsn1ASN1Encodable;", "LOrgBouncycastleAsn1ASN1EncodableVector;", "doAddAll", "[LOrgBouncycastleAsn1ASN1Encodable;LNSString;", "get", "reallocate", "cloneElements", &OrgBouncycastleAsn1ASN1EncodableVector_EMPTY_ELEMENTS };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1ASN1EncodableVector = { "ASN1EncodableVector", "org.bouncycastle.asn1", ptrTable, methods, fields, 7, 0x1, 12, 5, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1ASN1EncodableVector;
}

+ (void)initialize {
  if (self == [OrgBouncycastleAsn1ASN1EncodableVector class]) {
    OrgBouncycastleAsn1ASN1EncodableVector_EMPTY_ELEMENTS = [IOSObjectArray newArrayWithLength:
#line 8
    0 type:OrgBouncycastleAsn1ASN1Encodable_class_()];
    J2OBJC_SET_INITIALIZED(OrgBouncycastleAsn1ASN1EncodableVector)
  }
}

@end


#line 16
void OrgBouncycastleAsn1ASN1EncodableVector_init(OrgBouncycastleAsn1ASN1EncodableVector *self) {
  OrgBouncycastleAsn1ASN1EncodableVector_initWithInt_(self, OrgBouncycastleAsn1ASN1EncodableVector_DEFAULT_CAPACITY);
}


#line 16
OrgBouncycastleAsn1ASN1EncodableVector *new_OrgBouncycastleAsn1ASN1EncodableVector_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1ASN1EncodableVector, init)
}


#line 16
OrgBouncycastleAsn1ASN1EncodableVector *create_OrgBouncycastleAsn1ASN1EncodableVector_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1ASN1EncodableVector, init)
}


#line 21
void OrgBouncycastleAsn1ASN1EncodableVector_initWithInt_(OrgBouncycastleAsn1ASN1EncodableVector *self, jint initialCapacity) {
  NSObject_init(self);
  if (initialCapacity < 0) {
    
#line 25
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'initialCapacity' must not be negative");
  }
  
#line 28
  self->elements_ = (initialCapacity == 0) ? OrgBouncycastleAsn1ASN1EncodableVector_EMPTY_ELEMENTS : [IOSObjectArray newArrayWithLength:initialCapacity type:OrgBouncycastleAsn1ASN1Encodable_class_()];
  self->elementCount_ = 0;
  self->copyOnWrite_ = false;
}


#line 21
OrgBouncycastleAsn1ASN1EncodableVector *new_OrgBouncycastleAsn1ASN1EncodableVector_initWithInt_(jint initialCapacity) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1ASN1EncodableVector, initWithInt_, initialCapacity)
}


#line 21
OrgBouncycastleAsn1ASN1EncodableVector *create_OrgBouncycastleAsn1ASN1EncodableVector_initWithInt_(jint initialCapacity) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1ASN1EncodableVector, initWithInt_, initialCapacity)
}


#line 71
void OrgBouncycastleAsn1ASN1EncodableVector_doAddAllWithOrgBouncycastleAsn1ASN1EncodableArray_withNSString_(OrgBouncycastleAsn1ASN1EncodableVector *self, IOSObjectArray *others, NSString *nullMsg) {
  
#line 73
  jint otherElementCount = ((IOSObjectArray *) nil_chk(others))->size_;
  if (otherElementCount < 1) {
    
#line 76
    return;
  }
  
#line 79
  jint capacity = ((IOSObjectArray *) nil_chk(self->elements_))->size_;
  jint minCapacity = self->elementCount_ + otherElementCount;
  if ((minCapacity > capacity) | self->copyOnWrite_) {
    
#line 83
    OrgBouncycastleAsn1ASN1EncodableVector_reallocateWithInt_(self, minCapacity);
  }
  
#line 86
  jint i = 0;
  do {
    
#line 89
    id<OrgBouncycastleAsn1ASN1Encodable> otherElement = IOSObjectArray_Get(others, i);
    if (nil == otherElement) {
      
#line 92
      @throw new_JavaLangNullPointerException_initWithNSString_(nullMsg);
    }
    
#line 95
    (void) IOSObjectArray_Set(nil_chk(self->elements_), self->elementCount_ + i, otherElement);
  }
  while (++i < otherElementCount);
  
#line 99
  self->elementCount_ = minCapacity;
}


#line 158
void OrgBouncycastleAsn1ASN1EncodableVector_reallocateWithInt_(OrgBouncycastleAsn1ASN1EncodableVector *self, jint minCapacity) {
  
#line 160
  jint oldCapacity = ((IOSObjectArray *) nil_chk(self->elements_))->size_;
  jint newCapacity = JavaLangMath_maxWithInt_withInt_(oldCapacity, minCapacity + (JreRShift32(minCapacity, 1)));
  
#line 163
  IOSObjectArray *copy_ = [IOSObjectArray newArrayWithLength:newCapacity type:OrgBouncycastleAsn1ASN1Encodable_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->elements_, 0, copy_, 0, self->elementCount_);
  
#line 166
  self->elements_ = copy_;
  self->copyOnWrite_ = false;
}


#line 170
IOSObjectArray *OrgBouncycastleAsn1ASN1EncodableVector_cloneElementsWithOrgBouncycastleAsn1ASN1EncodableArray_(IOSObjectArray *elements) {
  OrgBouncycastleAsn1ASN1EncodableVector_initialize();
  return ((IOSObjectArray *) nil_chk(elements))->size_ < 1 ? OrgBouncycastleAsn1ASN1EncodableVector_EMPTY_ELEMENTS : [elements java_clone];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1ASN1EncodableVector)
