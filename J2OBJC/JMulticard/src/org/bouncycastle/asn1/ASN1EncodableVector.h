//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1EncodableVector.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1ASN1EncodableVector")
#ifdef RESTRICT_OrgBouncycastleAsn1ASN1EncodableVector
#define INCLUDE_ALL_OrgBouncycastleAsn1ASN1EncodableVector 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1ASN1EncodableVector 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1ASN1EncodableVector

#if !defined (OrgBouncycastleAsn1ASN1EncodableVector_) && (INCLUDE_ALL_OrgBouncycastleAsn1ASN1EncodableVector || defined(INCLUDE_OrgBouncycastleAsn1ASN1EncodableVector))
#define OrgBouncycastleAsn1ASN1EncodableVector_

@class IOSObjectArray;
@protocol OrgBouncycastleAsn1ASN1Encodable;

/*!
 @brief Mutable class for building ASN.1 constructed objects such as SETs or SEQUENCEs.
 */
@interface OrgBouncycastleAsn1ASN1EncodableVector : NSObject

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithInt:(jint)initialCapacity;

- (void)addWithOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)element;

- (void)addAllWithOrgBouncycastleAsn1ASN1EncodableArray:(IOSObjectArray *)others;

- (void)addAllWithOrgBouncycastleAsn1ASN1EncodableVector:(OrgBouncycastleAsn1ASN1EncodableVector *)other;

/*!
 @brief Return the object at position i in this vector.
 @param i the index of the object of interest.
 @return the object at position i.
 */
- (id<OrgBouncycastleAsn1ASN1Encodable>)getWithInt:(jint)i;

/*!
 @brief Return the size of the vector.
 @return the object count in the vector.
 */
- (jint)size;

#pragma mark Package-Private

+ (IOSObjectArray *)cloneElementsWithOrgBouncycastleAsn1ASN1EncodableArray:(IOSObjectArray *)elements;

- (IOSObjectArray *)copyElements OBJC_METHOD_FAMILY_NONE;

- (IOSObjectArray *)takeElements;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleAsn1ASN1EncodableVector)

inline IOSObjectArray *OrgBouncycastleAsn1ASN1EncodableVector_get_EMPTY_ELEMENTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *OrgBouncycastleAsn1ASN1EncodableVector_EMPTY_ELEMENTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleAsn1ASN1EncodableVector, EMPTY_ELEMENTS, IOSObjectArray *)

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1EncodableVector_init(OrgBouncycastleAsn1ASN1EncodableVector *self);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1EncodableVector *new_OrgBouncycastleAsn1ASN1EncodableVector_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1EncodableVector *create_OrgBouncycastleAsn1ASN1EncodableVector_init(void);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1EncodableVector_initWithInt_(OrgBouncycastleAsn1ASN1EncodableVector *self, jint initialCapacity);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1EncodableVector *new_OrgBouncycastleAsn1ASN1EncodableVector_initWithInt_(jint initialCapacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1EncodableVector *create_OrgBouncycastleAsn1ASN1EncodableVector_initWithInt_(jint initialCapacity);

FOUNDATION_EXPORT IOSObjectArray *OrgBouncycastleAsn1ASN1EncodableVector_cloneElementsWithOrgBouncycastleAsn1ASN1EncodableArray_(IOSObjectArray *elements);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1ASN1EncodableVector)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1ASN1EncodableVector")
