//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x509/Time.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/SimpleTimeZone.h"
#include "org/bouncycastle/asn1/ASN1GeneralizedTime.h"
#include "org/bouncycastle/asn1/ASN1Object.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1TaggedObject.h"
#include "org/bouncycastle/asn1/ASN1UTCTime.h"
#include "org/bouncycastle/asn1/DERGeneralizedTime.h"
#include "org/bouncycastle/asn1/DERUTCTime.h"
#include "org/bouncycastle/asn1/x509/Time.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/asn1/x509/Time must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x509/Time.java"


#line 18
@implementation OrgBouncycastleAsn1X509Time


#line 24
+ (OrgBouncycastleAsn1X509Time *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                        withBoolean:(jboolean)explicit_ {
  return OrgBouncycastleAsn1X509Time_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_);
}


#line 31
- (instancetype)initWithOrgBouncycastleAsn1ASN1Primitive:(OrgBouncycastleAsn1ASN1Primitive *)time {
  OrgBouncycastleAsn1X509Time_initWithOrgBouncycastleAsn1ASN1Primitive_(self, time);
  return self;
}


#line 50
- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time {
  OrgBouncycastleAsn1X509Time_initWithJavaUtilDate_(self, time);
  return self;
}


#line 80
- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgBouncycastleAsn1X509Time_initWithJavaUtilDate_withJavaUtilLocale_(self, time, locale);
  return self;
}


#line 102
+ (OrgBouncycastleAsn1X509Time *)getInstanceWithId:(id)obj {
  return OrgBouncycastleAsn1X509Time_getInstanceWithId_(obj);
}


#line 121
- (NSString *)getTime {
  
#line 123
  if ([time_ isKindOfClass:[OrgBouncycastleAsn1ASN1UTCTime class]]) {
    
#line 125
    return [((OrgBouncycastleAsn1ASN1UTCTime *) nil_chk(((OrgBouncycastleAsn1ASN1UTCTime *) time_))) getAdjustedTime];
  }
  else {
    
#line 129
    return [((OrgBouncycastleAsn1ASN1GeneralizedTime *) nil_chk(((OrgBouncycastleAsn1ASN1GeneralizedTime *) cast_chk(time_, [OrgBouncycastleAsn1ASN1GeneralizedTime class])))) getTime];
  }
}


#line 133
- (JavaUtilDate *)getDate {
  
#line 135
  @try {
    
#line 137
    if ([time_ isKindOfClass:[OrgBouncycastleAsn1ASN1UTCTime class]]) {
      
#line 139
      return [((OrgBouncycastleAsn1ASN1UTCTime *) nil_chk(((OrgBouncycastleAsn1ASN1UTCTime *) time_))) getAdjustedDate];
    }
    else {
      
#line 143
      return [((OrgBouncycastleAsn1ASN1GeneralizedTime *) nil_chk(((OrgBouncycastleAsn1ASN1GeneralizedTime *) cast_chk(time_, [OrgBouncycastleAsn1ASN1GeneralizedTime class])))) getDate];
    }
  }
  @catch (JavaTextParseException *e) {
    
#line 148
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"invalid date string: ", [e getMessage]));
  }
}


#line 160
- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  
#line 163
  return time_;
}

- (NSString *)description {
  
#line 169
  return [self getTime];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgBouncycastleAsn1X509Time;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509Time;", 0x9, 0, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:withBoolean:);
  methods[1].selector = @selector(initWithOrgBouncycastleAsn1ASN1Primitive:);
  methods[2].selector = @selector(initWithJavaUtilDate:);
  methods[3].selector = @selector(initWithJavaUtilDate:withJavaUtilLocale:);
  methods[4].selector = @selector(getInstanceWithId:);
  methods[5].selector = @selector(getTime);
  methods[6].selector = @selector(getDate);
  methods[7].selector = @selector(toASN1Primitive);
  methods[8].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "time_", "LOrgBouncycastleAsn1ASN1Primitive;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LOrgBouncycastleAsn1ASN1TaggedObject;Z", "LOrgBouncycastleAsn1ASN1Primitive;", "LJavaUtilDate;", "LJavaUtilDate;LJavaUtilLocale;", "LNSObject;", "toString" };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1X509Time = { "Time", "org.bouncycastle.asn1.x509", ptrTable, methods, fields, 7, 0x1, 9, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1X509Time;
}

@end


#line 24
OrgBouncycastleAsn1X509Time *OrgBouncycastleAsn1X509Time_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_) {
  OrgBouncycastleAsn1X509Time_initialize();
  
#line 28
  return OrgBouncycastleAsn1X509Time_getInstanceWithId_([((OrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(obj)) getObject]);
}

void OrgBouncycastleAsn1X509Time_initWithOrgBouncycastleAsn1ASN1Primitive_(OrgBouncycastleAsn1X509Time *self, OrgBouncycastleAsn1ASN1Primitive *time) {
  OrgBouncycastleAsn1ASN1Object_init(self);
  
#line 34
  if (!([time isKindOfClass:[OrgBouncycastleAsn1ASN1UTCTime class]]) &&
#line 35
  !([time isKindOfClass:[OrgBouncycastleAsn1ASN1GeneralizedTime class]])) {
    
#line 37
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unknown object passed to Time");
  }
  
#line 40
  self->time_ = time;
}


#line 31
OrgBouncycastleAsn1X509Time *new_OrgBouncycastleAsn1X509Time_initWithOrgBouncycastleAsn1ASN1Primitive_(OrgBouncycastleAsn1ASN1Primitive *time) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1X509Time, initWithOrgBouncycastleAsn1ASN1Primitive_, time)
}


#line 31
OrgBouncycastleAsn1X509Time *create_OrgBouncycastleAsn1X509Time_initWithOrgBouncycastleAsn1ASN1Primitive_(OrgBouncycastleAsn1ASN1Primitive *time) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1X509Time, initWithOrgBouncycastleAsn1ASN1Primitive_, time)
}


#line 50
void OrgBouncycastleAsn1X509Time_initWithJavaUtilDate_(OrgBouncycastleAsn1X509Time *self, JavaUtilDate *time) {
  OrgBouncycastleAsn1ASN1Object_init(self);
  
#line 53
  JavaUtilSimpleTimeZone *tz = new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z");
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmss");
  
#line 56
  [dateF setTimeZoneWithJavaUtilTimeZone:tz];
  
#line 58
  NSString *d = JreStrcat("$C", [dateF formatWithJavaUtilDate:time], 'Z');
  jint year = JavaLangInteger_parseIntWithNSString_([d java_substring:0 endIndex:4]);
  
#line 61
  if (year < 1950 || year > 2049) {
    
#line 63
    self->time_ = new_OrgBouncycastleAsn1DERGeneralizedTime_initWithNSString_(d);
  }
  else {
    
#line 67
    self->time_ = new_OrgBouncycastleAsn1DERUTCTime_initWithNSString_([d java_substring:2]);
  }
}


#line 50
OrgBouncycastleAsn1X509Time *new_OrgBouncycastleAsn1X509Time_initWithJavaUtilDate_(JavaUtilDate *time) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1X509Time, initWithJavaUtilDate_, time)
}


#line 50
OrgBouncycastleAsn1X509Time *create_OrgBouncycastleAsn1X509Time_initWithJavaUtilDate_(JavaUtilDate *time) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1X509Time, initWithJavaUtilDate_, time)
}


#line 80
void OrgBouncycastleAsn1X509Time_initWithJavaUtilDate_withJavaUtilLocale_(OrgBouncycastleAsn1X509Time *self, JavaUtilDate *time, JavaUtilLocale *locale) {
  OrgBouncycastleAsn1ASN1Object_init(self);
  
#line 84
  JavaUtilSimpleTimeZone *tz = new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z");
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"yyyyMMddHHmmss", locale);
  
#line 87
  [dateF setTimeZoneWithJavaUtilTimeZone:tz];
  
#line 89
  NSString *d = JreStrcat("$C", [dateF formatWithJavaUtilDate:time], 'Z');
  jint year = JavaLangInteger_parseIntWithNSString_([d java_substring:0 endIndex:4]);
  
#line 92
  if (year < 1950 || year > 2049) {
    
#line 94
    self->time_ = new_OrgBouncycastleAsn1DERGeneralizedTime_initWithNSString_(d);
  }
  else {
    
#line 98
    self->time_ = new_OrgBouncycastleAsn1DERUTCTime_initWithNSString_([d java_substring:2]);
  }
}


#line 80
OrgBouncycastleAsn1X509Time *new_OrgBouncycastleAsn1X509Time_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1X509Time, initWithJavaUtilDate_withJavaUtilLocale_, time, locale)
}


#line 80
OrgBouncycastleAsn1X509Time *create_OrgBouncycastleAsn1X509Time_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1X509Time, initWithJavaUtilDate_withJavaUtilLocale_, time, locale)
}


#line 102
OrgBouncycastleAsn1X509Time *OrgBouncycastleAsn1X509Time_getInstanceWithId_(id obj) {
  OrgBouncycastleAsn1X509Time_initialize();
  
#line 105
  if (obj == nil || [obj isKindOfClass:[OrgBouncycastleAsn1X509Time class]]) {
    
#line 107
    return (OrgBouncycastleAsn1X509Time *) cast_chk(obj, [OrgBouncycastleAsn1X509Time class]);
  }
  else if ([obj isKindOfClass:[OrgBouncycastleAsn1ASN1UTCTime class]]) {
    
#line 111
    return new_OrgBouncycastleAsn1X509Time_initWithOrgBouncycastleAsn1ASN1Primitive_((OrgBouncycastleAsn1ASN1UTCTime *) obj);
  }
  else if ([obj isKindOfClass:[OrgBouncycastleAsn1ASN1GeneralizedTime class]]) {
    
#line 115
    return new_OrgBouncycastleAsn1X509Time_initWithOrgBouncycastleAsn1ASN1Primitive_((OrgBouncycastleAsn1ASN1GeneralizedTime *) obj);
  }
  
#line 118
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unknown object in factory: ", [[obj java_getClass] getName]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1X509Time)
