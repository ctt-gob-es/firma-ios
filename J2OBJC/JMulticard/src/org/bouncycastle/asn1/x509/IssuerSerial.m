//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x509/IssuerSerial.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/asn1/ASN1BitString.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1EncodableVector.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/ASN1Object.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1Sequence.h"
#include "org/bouncycastle/asn1/ASN1TaggedObject.h"
#include "org/bouncycastle/asn1/DERBitString.h"
#include "org/bouncycastle/asn1/DERSequence.h"
#include "org/bouncycastle/asn1/x500/X500Name.h"
#include "org/bouncycastle/asn1/x509/GeneralName.h"
#include "org/bouncycastle/asn1/x509/GeneralNames.h"
#include "org/bouncycastle/asn1/x509/IssuerSerial.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/asn1/x509/IssuerSerial must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleAsn1X509IssuerSerial ()

- (instancetype)initWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq;

@end

__attribute__((unused)) static void OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1X509IssuerSerial *self, OrgBouncycastleAsn1ASN1Sequence *seq);

__attribute__((unused)) static OrgBouncycastleAsn1X509IssuerSerial *new_OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleAsn1X509IssuerSerial *create_OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence *seq);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x509/IssuerSerial.java"


#line 16
@implementation OrgBouncycastleAsn1X509IssuerSerial


#line 23
+ (OrgBouncycastleAsn1X509IssuerSerial *)getInstanceWithId:(id)obj {
  return OrgBouncycastleAsn1X509IssuerSerial_getInstanceWithId_(obj);
}


#line 39
+ (OrgBouncycastleAsn1X509IssuerSerial *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                withBoolean:(jboolean)explicit_ {
  return OrgBouncycastleAsn1X509IssuerSerial_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_);
}


#line 46
- (instancetype)initWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq {
  OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1ASN1Sequence_(self, seq);
  return self;
}


#line 63
- (instancetype)initWithOrgBouncycastleAsn1X500X500Name:(OrgBouncycastleAsn1X500X500Name *)issuer
                                 withJavaMathBigInteger:(JavaMathBigInteger *)serial {
  OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_(self, issuer, serial);
  return self;
}


#line 70
- (instancetype)initWithOrgBouncycastleAsn1X509GeneralNames:(OrgBouncycastleAsn1X509GeneralNames *)issuer
                                     withJavaMathBigInteger:(JavaMathBigInteger *)serial {
  OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X509GeneralNames_withJavaMathBigInteger_(self, issuer, serial);
  return self;
}


#line 77
- (instancetype)initWithOrgBouncycastleAsn1X509GeneralNames:(OrgBouncycastleAsn1X509GeneralNames *)issuer
                         withOrgBouncycastleAsn1ASN1Integer:(OrgBouncycastleAsn1ASN1Integer *)serial {
  OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X509GeneralNames_withOrgBouncycastleAsn1ASN1Integer_(self, issuer, serial);
  return self;
}


#line 85
- (OrgBouncycastleAsn1X509GeneralNames *)getIssuer {
  
#line 87
  return issuer_;
}


#line 90
- (OrgBouncycastleAsn1ASN1Integer *)getSerial {
  
#line 92
  return serial_;
}


#line 95
- (OrgBouncycastleAsn1ASN1BitString *)getIssuerUID {
  
#line 97
  return issuerUID_;
}


#line 110
- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  
#line 113
  OrgBouncycastleAsn1ASN1EncodableVector *v = new_OrgBouncycastleAsn1ASN1EncodableVector_initWithInt_(3);
  
#line 115
  [v addWithOrgBouncycastleAsn1ASN1Encodable:issuer_];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:serial_];
  
#line 118
  if (issuerUID_ != nil) {
    
#line 120
    [v addWithOrgBouncycastleAsn1ASN1Encodable:issuerUID_];
  }
  
#line 123
  return new_OrgBouncycastleAsn1DERSequence_initWithOrgBouncycastleAsn1ASN1EncodableVector_(v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgBouncycastleAsn1X509IssuerSerial;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509IssuerSerial;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509GeneralNames;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Integer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1BitString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithId:);
  methods[1].selector = @selector(getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:withBoolean:);
  methods[2].selector = @selector(initWithOrgBouncycastleAsn1ASN1Sequence:);
  methods[3].selector = @selector(initWithOrgBouncycastleAsn1X500X500Name:withJavaMathBigInteger:);
  methods[4].selector = @selector(initWithOrgBouncycastleAsn1X509GeneralNames:withJavaMathBigInteger:);
  methods[5].selector = @selector(initWithOrgBouncycastleAsn1X509GeneralNames:withOrgBouncycastleAsn1ASN1Integer:);
  methods[6].selector = @selector(getIssuer);
  methods[7].selector = @selector(getSerial);
  methods[8].selector = @selector(getIssuerUID);
  methods[9].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "issuer_", "LOrgBouncycastleAsn1X509GeneralNames;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "serial_", "LOrgBouncycastleAsn1ASN1Integer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "issuerUID_", "LOrgBouncycastleAsn1ASN1BitString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LNSObject;", "LOrgBouncycastleAsn1ASN1TaggedObject;Z", "LOrgBouncycastleAsn1ASN1Sequence;", "LOrgBouncycastleAsn1X500X500Name;LJavaMathBigInteger;", "LOrgBouncycastleAsn1X509GeneralNames;LJavaMathBigInteger;", "LOrgBouncycastleAsn1X509GeneralNames;LOrgBouncycastleAsn1ASN1Integer;" };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1X509IssuerSerial = { "IssuerSerial", "org.bouncycastle.asn1.x509", ptrTable, methods, fields, 7, 0x1, 10, 3, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1X509IssuerSerial;
}

@end


#line 23
OrgBouncycastleAsn1X509IssuerSerial *OrgBouncycastleAsn1X509IssuerSerial_getInstanceWithId_(id obj) {
  OrgBouncycastleAsn1X509IssuerSerial_initialize();
  
#line 26
  if ([obj isKindOfClass:[OrgBouncycastleAsn1X509IssuerSerial class]]) {
    
#line 28
    return (OrgBouncycastleAsn1X509IssuerSerial *) obj;
  }
  
#line 31
  if (obj != nil) {
    
#line 33
    return new_OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(obj));
  }
  
#line 36
  return nil;
}


#line 39
OrgBouncycastleAsn1X509IssuerSerial *OrgBouncycastleAsn1X509IssuerSerial_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_) {
  OrgBouncycastleAsn1X509IssuerSerial_initialize();
  
#line 43
  return OrgBouncycastleAsn1X509IssuerSerial_getInstanceWithId_(OrgBouncycastleAsn1ASN1Sequence_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_));
}

void OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1X509IssuerSerial *self, OrgBouncycastleAsn1ASN1Sequence *seq) {
  OrgBouncycastleAsn1ASN1Object_init(self);
  
#line 49
  if ([((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) size] != 2 && [seq size] != 3) {
    
#line 51
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Bad sequence size: ", [seq size]));
  }
  
#line 54
  self->issuer_ = OrgBouncycastleAsn1X509GeneralNames_getInstanceWithId_([seq getObjectAtWithInt:0]);
  self->serial_ = OrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([seq getObjectAtWithInt:1]);
  
#line 57
  if ([seq size] == 3) {
    
#line 59
    self->issuerUID_ = OrgBouncycastleAsn1DERBitString_getInstanceWithId_([seq getObjectAtWithInt:2]);
  }
}


#line 46
OrgBouncycastleAsn1X509IssuerSerial *new_OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1X509IssuerSerial, initWithOrgBouncycastleAsn1ASN1Sequence_, seq)
}


#line 46
OrgBouncycastleAsn1X509IssuerSerial *create_OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1X509IssuerSerial, initWithOrgBouncycastleAsn1ASN1Sequence_, seq)
}


#line 63
void OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_(OrgBouncycastleAsn1X509IssuerSerial *self, OrgBouncycastleAsn1X500X500Name *issuer, JavaMathBigInteger *serial) {
  OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X509GeneralNames_withOrgBouncycastleAsn1ASN1Integer_(self, new_OrgBouncycastleAsn1X509GeneralNames_initWithOrgBouncycastleAsn1X509GeneralName_(new_OrgBouncycastleAsn1X509GeneralName_initWithOrgBouncycastleAsn1X500X500Name_(
#line 67
  issuer)), new_OrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(serial));
}


#line 63
OrgBouncycastleAsn1X509IssuerSerial *new_OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_(OrgBouncycastleAsn1X500X500Name *issuer, JavaMathBigInteger *serial) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1X509IssuerSerial, initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_, issuer, serial)
}


#line 63
OrgBouncycastleAsn1X509IssuerSerial *create_OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_(OrgBouncycastleAsn1X500X500Name *issuer, JavaMathBigInteger *serial) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1X509IssuerSerial, initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_, issuer, serial)
}


#line 70
void OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X509GeneralNames_withJavaMathBigInteger_(OrgBouncycastleAsn1X509IssuerSerial *self, OrgBouncycastleAsn1X509GeneralNames *issuer, JavaMathBigInteger *serial) {
  OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X509GeneralNames_withOrgBouncycastleAsn1ASN1Integer_(self,
#line 74
  issuer, new_OrgBouncycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(serial));
}


#line 70
OrgBouncycastleAsn1X509IssuerSerial *new_OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X509GeneralNames_withJavaMathBigInteger_(OrgBouncycastleAsn1X509GeneralNames *issuer, JavaMathBigInteger *serial) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1X509IssuerSerial, initWithOrgBouncycastleAsn1X509GeneralNames_withJavaMathBigInteger_, issuer, serial)
}


#line 70
OrgBouncycastleAsn1X509IssuerSerial *create_OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X509GeneralNames_withJavaMathBigInteger_(OrgBouncycastleAsn1X509GeneralNames *issuer, JavaMathBigInteger *serial) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1X509IssuerSerial, initWithOrgBouncycastleAsn1X509GeneralNames_withJavaMathBigInteger_, issuer, serial)
}


#line 77
void OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X509GeneralNames_withOrgBouncycastleAsn1ASN1Integer_(OrgBouncycastleAsn1X509IssuerSerial *self, OrgBouncycastleAsn1X509GeneralNames *issuer, OrgBouncycastleAsn1ASN1Integer *serial) {
  OrgBouncycastleAsn1ASN1Object_init(self);
  
#line 81
  self->issuer_ = issuer;
  self->serial_ = serial;
}


#line 77
OrgBouncycastleAsn1X509IssuerSerial *new_OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X509GeneralNames_withOrgBouncycastleAsn1ASN1Integer_(OrgBouncycastleAsn1X509GeneralNames *issuer, OrgBouncycastleAsn1ASN1Integer *serial) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1X509IssuerSerial, initWithOrgBouncycastleAsn1X509GeneralNames_withOrgBouncycastleAsn1ASN1Integer_, issuer, serial)
}


#line 77
OrgBouncycastleAsn1X509IssuerSerial *create_OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X509GeneralNames_withOrgBouncycastleAsn1ASN1Integer_(OrgBouncycastleAsn1X509GeneralNames *issuer, OrgBouncycastleAsn1ASN1Integer *serial) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1X509IssuerSerial, initWithOrgBouncycastleAsn1X509GeneralNames_withOrgBouncycastleAsn1ASN1Integer_, issuer, serial)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1X509IssuerSerial)
