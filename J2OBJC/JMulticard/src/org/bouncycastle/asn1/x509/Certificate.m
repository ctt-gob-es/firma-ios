//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x509/Certificate.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/bouncycastle/asn1/ASN1BitString.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/ASN1Object.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1Sequence.h"
#include "org/bouncycastle/asn1/ASN1TaggedObject.h"
#include "org/bouncycastle/asn1/x500/X500Name.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/asn1/x509/Certificate.h"
#include "org/bouncycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/bouncycastle/asn1/x509/TBSCertificate.h"
#include "org/bouncycastle/asn1/x509/Time.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/asn1/x509/Certificate must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleAsn1X509Certificate ()

- (instancetype)initWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq;

@end

__attribute__((unused)) static void OrgBouncycastleAsn1X509Certificate_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1X509Certificate *self, OrgBouncycastleAsn1ASN1Sequence *seq);

__attribute__((unused)) static OrgBouncycastleAsn1X509Certificate *new_OrgBouncycastleAsn1X509Certificate_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleAsn1X509Certificate *create_OrgBouncycastleAsn1X509Certificate_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence *seq);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x509/Certificate.java"


#line 21
@implementation OrgBouncycastleAsn1X509Certificate


#line 29
+ (OrgBouncycastleAsn1X509Certificate *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                               withBoolean:(jboolean)explicit_ {
  return OrgBouncycastleAsn1X509Certificate_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_);
}


#line 36
+ (OrgBouncycastleAsn1X509Certificate *)getInstanceWithId:(id)obj {
  return OrgBouncycastleAsn1X509Certificate_getInstanceWithId_(obj);
}


#line 51
- (instancetype)initWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq {
  OrgBouncycastleAsn1X509Certificate_initWithOrgBouncycastleAsn1ASN1Sequence_(self, seq);
  return self;
}


#line 72
- (OrgBouncycastleAsn1X509TBSCertificate *)getTBSCertificate {
  
#line 74
  return tbsCert_;
}


#line 77
- (OrgBouncycastleAsn1ASN1Integer *)getVersion {
  
#line 79
  return [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk(tbsCert_)) getVersion];
}


#line 82
- (jint)getVersionNumber {
  
#line 84
  return [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk(tbsCert_)) getVersionNumber];
}


#line 87
- (OrgBouncycastleAsn1ASN1Integer *)getSerialNumber {
  
#line 89
  return [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk(tbsCert_)) getSerialNumber];
}


#line 92
- (OrgBouncycastleAsn1X500X500Name *)getIssuer {
  
#line 94
  return [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk(tbsCert_)) getIssuer];
}


#line 97
- (OrgBouncycastleAsn1X509Time *)getStartDate {
  
#line 99
  return [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk(tbsCert_)) getStartDate];
}


#line 102
- (OrgBouncycastleAsn1X509Time *)getEndDate {
  
#line 104
  return [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk(tbsCert_)) getEndDate];
}


#line 107
- (OrgBouncycastleAsn1X500X500Name *)getSubject {
  
#line 109
  return [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk(tbsCert_)) getSubject];
}


#line 112
- (OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)getSubjectPublicKeyInfo {
  
#line 114
  return [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk(tbsCert_)) getSubjectPublicKeyInfo];
}


#line 117
- (OrgBouncycastleAsn1X509AlgorithmIdentifier *)getSignatureAlgorithm {
  
#line 119
  return sigAlgId_;
}


#line 122
- (OrgBouncycastleAsn1ASN1BitString *)getSignature {
  
#line 124
  return sig_;
}


#line 127
- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  
#line 130
  return seq_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgBouncycastleAsn1X509Certificate;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509Certificate;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509TBSCertificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Integer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Integer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509Time;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509Time;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509AlgorithmIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1BitString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:withBoolean:);
  methods[1].selector = @selector(getInstanceWithId:);
  methods[2].selector = @selector(initWithOrgBouncycastleAsn1ASN1Sequence:);
  methods[3].selector = @selector(getTBSCertificate);
  methods[4].selector = @selector(getVersion);
  methods[5].selector = @selector(getVersionNumber);
  methods[6].selector = @selector(getSerialNumber);
  methods[7].selector = @selector(getIssuer);
  methods[8].selector = @selector(getStartDate);
  methods[9].selector = @selector(getEndDate);
  methods[10].selector = @selector(getSubject);
  methods[11].selector = @selector(getSubjectPublicKeyInfo);
  methods[12].selector = @selector(getSignatureAlgorithm);
  methods[13].selector = @selector(getSignature);
  methods[14].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "seq_", "LOrgBouncycastleAsn1ASN1Sequence;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tbsCert_", "LOrgBouncycastleAsn1X509TBSCertificate;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sigAlgId_", "LOrgBouncycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sig_", "LOrgBouncycastleAsn1ASN1BitString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LOrgBouncycastleAsn1ASN1TaggedObject;Z", "LNSObject;", "LOrgBouncycastleAsn1ASN1Sequence;" };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1X509Certificate = { "Certificate", "org.bouncycastle.asn1.x509", ptrTable, methods, fields, 7, 0x1, 15, 4, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1X509Certificate;
}

@end


#line 29
OrgBouncycastleAsn1X509Certificate *OrgBouncycastleAsn1X509Certificate_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_) {
  OrgBouncycastleAsn1X509Certificate_initialize();
  
#line 33
  return OrgBouncycastleAsn1X509Certificate_getInstanceWithId_(OrgBouncycastleAsn1ASN1Sequence_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_));
}

OrgBouncycastleAsn1X509Certificate *OrgBouncycastleAsn1X509Certificate_getInstanceWithId_(id obj) {
  OrgBouncycastleAsn1X509Certificate_initialize();
  
#line 39
  if ([obj isKindOfClass:[OrgBouncycastleAsn1X509Certificate class]]) {
    
#line 41
    return (OrgBouncycastleAsn1X509Certificate *) obj;
  }
  else if (obj != nil) {
    
#line 45
    return new_OrgBouncycastleAsn1X509Certificate_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(obj));
  }
  
#line 48
  return nil;
}


#line 51
void OrgBouncycastleAsn1X509Certificate_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1X509Certificate *self, OrgBouncycastleAsn1ASN1Sequence *seq) {
  OrgBouncycastleAsn1ASN1Object_init(self);
  
#line 54
  self->seq_ = seq;
  
#line 59
  if ([((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) size] == 3) {
    
#line 61
    self->tbsCert_ = OrgBouncycastleAsn1X509TBSCertificate_getInstanceWithId_([seq getObjectAtWithInt:0]);
    self->sigAlgId_ = OrgBouncycastleAsn1X509AlgorithmIdentifier_getInstanceWithId_([seq getObjectAtWithInt:1]);
    
#line 64
    self->sig_ = OrgBouncycastleAsn1ASN1BitString_getInstanceWithId_([seq getObjectAtWithInt:2]);
  }
  else {
    
#line 68
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sequence wrong size for a certificate");
  }
}


#line 51
OrgBouncycastleAsn1X509Certificate *new_OrgBouncycastleAsn1X509Certificate_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1X509Certificate, initWithOrgBouncycastleAsn1ASN1Sequence_, seq)
}


#line 51
OrgBouncycastleAsn1X509Certificate *create_OrgBouncycastleAsn1X509Certificate_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1X509Certificate, initWithOrgBouncycastleAsn1ASN1Sequence_, seq)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1X509Certificate)
