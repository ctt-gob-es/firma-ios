//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x509/Targets.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1X509Targets")
#ifdef RESTRICT_OrgBouncycastleAsn1X509Targets
#define INCLUDE_ALL_OrgBouncycastleAsn1X509Targets 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1X509Targets 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1X509Targets

#if !defined (OrgBouncycastleAsn1X509Targets_) && (INCLUDE_ALL_OrgBouncycastleAsn1X509Targets || defined(INCLUDE_OrgBouncycastleAsn1X509Targets))
#define OrgBouncycastleAsn1X509Targets_

#define RESTRICT_OrgBouncycastleAsn1ASN1Object 1
#define INCLUDE_OrgBouncycastleAsn1ASN1Object 1
#include "org/bouncycastle/asn1/ASN1Object.h"

@class IOSObjectArray;
@class OrgBouncycastleAsn1ASN1Primitive;

/*!
 @brief Targets structure used in target information extension for attribute
  certificates from RFC 3281.
 @code

             Targets ::= SEQUENCE OF Target
             Target  ::= CHOICE {
               targetName          [0] GeneralName,
               targetGroup         [1] GeneralName,
               targetCert          [2] TargetCert
             }
             TargetCert  ::= SEQUENCE {
               targetCertificate    IssuerSerial,
               targetName           GeneralName OPTIONAL,
               certDigestInfo       ObjectDigestInfo OPTIONAL
             } 
  
@endcode
 - seealso: org.bouncycastle.asn1.x509.Target
 - seealso: org.bouncycastle.asn1.x509.TargetInformation
 */
@interface OrgBouncycastleAsn1X509Targets : OrgBouncycastleAsn1ASN1Object

#pragma mark Public

/*!
 @brief Constructor from given targets.
 <p>
  The vector is copied.
 @param targets A  <code> Vector </code>  of <code>Target</code>
  s.
 - seealso: Target
 @throw IllegalArgumentExceptionif the vector contains not only Targets.
 */
- (instancetype)initWithOrgBouncycastleAsn1X509TargetArray:(IOSObjectArray *)targets;

/*!
 @brief Creates an instance of a Targets from the given object.
 <p>
  <code>obj</code> can be a Targets or a <code>ASN1Sequence</code>
 @param obj The object.
 @return A Targets instance.
 @throw IllegalArgumentExceptionif the given object cannot be
              interpreted as Target.
 */
+ (OrgBouncycastleAsn1X509Targets *)getInstanceWithId:(id)obj;

/*!
 @brief Returns the targets in a <code>Vector</code>.
 <p>
  The vector is cloned before it is returned.
 @return Returns the targets.
 */
- (IOSObjectArray *)getTargets;

/*!
 @brief Produce an object suitable for an ASN1OutputStream.
 Returns:
  
 @code

             Targets ::= SEQUENCE OF Target 
  
@endcode
 @return a ASN1Primitive
 */
- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleAsn1X509Targets)

FOUNDATION_EXPORT OrgBouncycastleAsn1X509Targets *OrgBouncycastleAsn1X509Targets_getInstanceWithId_(id obj);

FOUNDATION_EXPORT void OrgBouncycastleAsn1X509Targets_initWithOrgBouncycastleAsn1X509TargetArray_(OrgBouncycastleAsn1X509Targets *self, IOSObjectArray *targets);

FOUNDATION_EXPORT OrgBouncycastleAsn1X509Targets *new_OrgBouncycastleAsn1X509Targets_initWithOrgBouncycastleAsn1X509TargetArray_(IOSObjectArray *targets) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1X509Targets *create_OrgBouncycastleAsn1X509Targets_initWithOrgBouncycastleAsn1X509TargetArray_(IOSObjectArray *targets);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1X509Targets)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1X509Targets")
