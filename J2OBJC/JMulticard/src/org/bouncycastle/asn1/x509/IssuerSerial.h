//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x509/IssuerSerial.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1X509IssuerSerial")
#ifdef RESTRICT_OrgBouncycastleAsn1X509IssuerSerial
#define INCLUDE_ALL_OrgBouncycastleAsn1X509IssuerSerial 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1X509IssuerSerial 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1X509IssuerSerial

#if !defined (OrgBouncycastleAsn1X509IssuerSerial_) && (INCLUDE_ALL_OrgBouncycastleAsn1X509IssuerSerial || defined(INCLUDE_OrgBouncycastleAsn1X509IssuerSerial))
#define OrgBouncycastleAsn1X509IssuerSerial_

#define RESTRICT_OrgBouncycastleAsn1ASN1Object 1
#define INCLUDE_OrgBouncycastleAsn1ASN1Object 1
#include "org/bouncycastle/asn1/ASN1Object.h"

@class JavaMathBigInteger;
@class OrgBouncycastleAsn1ASN1BitString;
@class OrgBouncycastleAsn1ASN1Integer;
@class OrgBouncycastleAsn1ASN1Primitive;
@class OrgBouncycastleAsn1ASN1TaggedObject;
@class OrgBouncycastleAsn1X500X500Name;
@class OrgBouncycastleAsn1X509GeneralNames;

@interface OrgBouncycastleAsn1X509IssuerSerial : OrgBouncycastleAsn1ASN1Object {
 @public
  OrgBouncycastleAsn1X509GeneralNames *issuer_;
  OrgBouncycastleAsn1ASN1Integer *serial_;
  OrgBouncycastleAsn1ASN1BitString *issuerUID_;
}

#pragma mark Public

- (instancetype)initWithOrgBouncycastleAsn1X509GeneralNames:(OrgBouncycastleAsn1X509GeneralNames *)issuer
                         withOrgBouncycastleAsn1ASN1Integer:(OrgBouncycastleAsn1ASN1Integer *)serial;

- (instancetype)initWithOrgBouncycastleAsn1X509GeneralNames:(OrgBouncycastleAsn1X509GeneralNames *)issuer
                                     withJavaMathBigInteger:(JavaMathBigInteger *)serial;

- (instancetype)initWithOrgBouncycastleAsn1X500X500Name:(OrgBouncycastleAsn1X500X500Name *)issuer
                                 withJavaMathBigInteger:(JavaMathBigInteger *)serial;

+ (OrgBouncycastleAsn1X509IssuerSerial *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                withBoolean:(jboolean)explicit_;

+ (OrgBouncycastleAsn1X509IssuerSerial *)getInstanceWithId:(id)obj;

- (OrgBouncycastleAsn1X509GeneralNames *)getIssuer;

- (OrgBouncycastleAsn1ASN1BitString *)getIssuerUID;

- (OrgBouncycastleAsn1ASN1Integer *)getSerial;

/*!
 @brief Produce an object suitable for an ASN1OutputStream.
 @code

   IssuerSerial  ::=  SEQUENCE {
        issuer         GeneralNames,
        serial         CertificateSerialNumber,
        issuerUID      UniqueIdentifier OPTIONAL
   } 
  
@endcode
 */
- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleAsn1X509IssuerSerial)

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1X509IssuerSerial, issuer_, OrgBouncycastleAsn1X509GeneralNames *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1X509IssuerSerial, serial_, OrgBouncycastleAsn1ASN1Integer *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1X509IssuerSerial, issuerUID_, OrgBouncycastleAsn1ASN1BitString *)

FOUNDATION_EXPORT OrgBouncycastleAsn1X509IssuerSerial *OrgBouncycastleAsn1X509IssuerSerial_getInstanceWithId_(id obj);

FOUNDATION_EXPORT OrgBouncycastleAsn1X509IssuerSerial *OrgBouncycastleAsn1X509IssuerSerial_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT void OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_(OrgBouncycastleAsn1X509IssuerSerial *self, OrgBouncycastleAsn1X500X500Name *issuer, JavaMathBigInteger *serial);

FOUNDATION_EXPORT OrgBouncycastleAsn1X509IssuerSerial *new_OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_(OrgBouncycastleAsn1X500X500Name *issuer, JavaMathBigInteger *serial) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1X509IssuerSerial *create_OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_(OrgBouncycastleAsn1X500X500Name *issuer, JavaMathBigInteger *serial);

FOUNDATION_EXPORT void OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X509GeneralNames_withJavaMathBigInteger_(OrgBouncycastleAsn1X509IssuerSerial *self, OrgBouncycastleAsn1X509GeneralNames *issuer, JavaMathBigInteger *serial);

FOUNDATION_EXPORT OrgBouncycastleAsn1X509IssuerSerial *new_OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X509GeneralNames_withJavaMathBigInteger_(OrgBouncycastleAsn1X509GeneralNames *issuer, JavaMathBigInteger *serial) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1X509IssuerSerial *create_OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X509GeneralNames_withJavaMathBigInteger_(OrgBouncycastleAsn1X509GeneralNames *issuer, JavaMathBigInteger *serial);

FOUNDATION_EXPORT void OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X509GeneralNames_withOrgBouncycastleAsn1ASN1Integer_(OrgBouncycastleAsn1X509IssuerSerial *self, OrgBouncycastleAsn1X509GeneralNames *issuer, OrgBouncycastleAsn1ASN1Integer *serial);

FOUNDATION_EXPORT OrgBouncycastleAsn1X509IssuerSerial *new_OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X509GeneralNames_withOrgBouncycastleAsn1ASN1Integer_(OrgBouncycastleAsn1X509GeneralNames *issuer, OrgBouncycastleAsn1ASN1Integer *serial) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1X509IssuerSerial *create_OrgBouncycastleAsn1X509IssuerSerial_initWithOrgBouncycastleAsn1X509GeneralNames_withOrgBouncycastleAsn1ASN1Integer_(OrgBouncycastleAsn1X509GeneralNames *issuer, OrgBouncycastleAsn1ASN1Integer *serial);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1X509IssuerSerial)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1X509IssuerSerial")
