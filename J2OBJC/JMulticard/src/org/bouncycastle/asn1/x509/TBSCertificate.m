//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x509/TBSCertificate.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/bouncycastle/asn1/ASN1BitString.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1EncodableVector.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/ASN1Object.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1Sequence.h"
#include "org/bouncycastle/asn1/ASN1TaggedObject.h"
#include "org/bouncycastle/asn1/DERBitString.h"
#include "org/bouncycastle/asn1/DERSequence.h"
#include "org/bouncycastle/asn1/DERTaggedObject.h"
#include "org/bouncycastle/asn1/x500/X500Name.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/asn1/x509/Extensions.h"
#include "org/bouncycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/bouncycastle/asn1/x509/TBSCertificate.h"
#include "org/bouncycastle/asn1/x509/Time.h"
#include "org/bouncycastle/util/Properties.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/asn1/x509/TBSCertificate must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleAsn1X509TBSCertificate ()

- (instancetype)initWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq;

@end

__attribute__((unused)) static void OrgBouncycastleAsn1X509TBSCertificate_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1X509TBSCertificate *self, OrgBouncycastleAsn1ASN1Sequence *seq);

__attribute__((unused)) static OrgBouncycastleAsn1X509TBSCertificate *new_OrgBouncycastleAsn1X509TBSCertificate_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleAsn1X509TBSCertificate *create_OrgBouncycastleAsn1X509TBSCertificate_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence *seq);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x509/TBSCertificate.java"


#line 36
@implementation OrgBouncycastleAsn1X509TBSCertificate


#line 52
+ (OrgBouncycastleAsn1X509TBSCertificate *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)obj
                                                                                  withBoolean:(jboolean)explicit_ {
  return OrgBouncycastleAsn1X509TBSCertificate_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_);
}


#line 59
+ (OrgBouncycastleAsn1X509TBSCertificate *)getInstanceWithId:(id)obj {
  return OrgBouncycastleAsn1X509TBSCertificate_getInstanceWithId_(obj);
}


#line 74
- (instancetype)initWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq {
  OrgBouncycastleAsn1X509TBSCertificate_initWithOrgBouncycastleAsn1ASN1Sequence_(self, seq);
  return self;
}


#line 162
- (jint)getVersionNumber {
  
#line 164
  return [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(version__)) intValueExact] + 1;
}


#line 167
- (OrgBouncycastleAsn1ASN1Integer *)getVersion {
  
#line 169
  return version__;
}


#line 172
- (OrgBouncycastleAsn1ASN1Integer *)getSerialNumber {
  
#line 174
  return serialNumber_;
}


#line 177
- (OrgBouncycastleAsn1X509AlgorithmIdentifier *)getSignature {
  
#line 179
  return signature_;
}


#line 182
- (OrgBouncycastleAsn1X500X500Name *)getIssuer {
  
#line 184
  return issuer_;
}


#line 187
- (OrgBouncycastleAsn1X509Time *)getStartDate {
  
#line 189
  return startDate_;
}


#line 192
- (OrgBouncycastleAsn1X509Time *)getEndDate {
  
#line 194
  return endDate_;
}


#line 197
- (OrgBouncycastleAsn1X500X500Name *)getSubject {
  
#line 199
  return subject_;
}


#line 202
- (OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)getSubjectPublicKeyInfo {
  
#line 204
  return subjectPublicKeyInfo_;
}


#line 207
- (OrgBouncycastleAsn1ASN1BitString *)getIssuerUniqueId {
  
#line 209
  return issuerUniqueId_;
}


#line 212
- (OrgBouncycastleAsn1ASN1BitString *)getSubjectUniqueId {
  
#line 214
  return subjectUniqueId_;
}


#line 217
- (OrgBouncycastleAsn1X509Extensions *)getExtensions {
  
#line 219
  return extensions_;
}


#line 222
- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  
#line 225
  if (OrgBouncycastleUtilProperties_getPropertyValueWithNSString_(@"org.bouncycastle.x509.allow_non-der_tbscert") != nil) {
    
#line 227
    if (OrgBouncycastleUtilProperties_isOverrideSetWithNSString_(@"org.bouncycastle.x509.allow_non-der_tbscert")) {
      
#line 229
      return seq_;
    }
  }
  else {
    
#line 234
    return seq_;
  }
  
#line 237
  OrgBouncycastleAsn1ASN1EncodableVector *v = new_OrgBouncycastleAsn1ASN1EncodableVector_init();
  
#line 240
  if (![((OrgBouncycastleAsn1ASN1Integer *) nil_chk(version__)) hasValueWithInt:0]) {
    
#line 242
    [v addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1DERTaggedObject_initWithBoolean_withInt_withOrgBouncycastleAsn1ASN1Encodable_(true, 0, version__)];
  }
  
#line 245
  [v addWithOrgBouncycastleAsn1ASN1Encodable:serialNumber_];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:signature_];
  [v addWithOrgBouncycastleAsn1ASN1Encodable:issuer_];
  {
    
#line 253
    OrgBouncycastleAsn1ASN1EncodableVector *validity = new_OrgBouncycastleAsn1ASN1EncodableVector_initWithInt_(2);
    [validity addWithOrgBouncycastleAsn1ASN1Encodable:startDate_];
    [validity addWithOrgBouncycastleAsn1ASN1Encodable:endDate_];
    
#line 257
    [v addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1DERSequence_initWithOrgBouncycastleAsn1ASN1EncodableVector_(validity)];
  }
  
#line 260
  if (subject_ != nil) {
    
#line 262
    [v addWithOrgBouncycastleAsn1ASN1Encodable:subject_];
  }
  else {
    
#line 266
    [v addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1DERSequence_init()];
  }
  
#line 269
  [v addWithOrgBouncycastleAsn1ASN1Encodable:subjectPublicKeyInfo_];
  
#line 272
  if (issuerUniqueId_ != nil) {
    
#line 274
    [v addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1DERTaggedObject_initWithBoolean_withInt_withOrgBouncycastleAsn1ASN1Encodable_(false, 1, issuerUniqueId_)];
  }
  
#line 278
  if (subjectUniqueId_ != nil) {
    
#line 280
    [v addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1DERTaggedObject_initWithBoolean_withInt_withOrgBouncycastleAsn1ASN1Encodable_(false, 2, subjectUniqueId_)];
  }
  
#line 283
  if (extensions_ != nil) {
    
#line 285
    [v addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1DERTaggedObject_initWithBoolean_withInt_withOrgBouncycastleAsn1ASN1Encodable_(true, 3, extensions_)];
  }
  
#line 288
  return new_OrgBouncycastleAsn1DERSequence_initWithOrgBouncycastleAsn1ASN1EncodableVector_(v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgBouncycastleAsn1X509TBSCertificate;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509TBSCertificate;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Integer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Integer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509AlgorithmIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509Time;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509Time;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1BitString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1BitString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509Extensions;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:withBoolean:);
  methods[1].selector = @selector(getInstanceWithId:);
  methods[2].selector = @selector(initWithOrgBouncycastleAsn1ASN1Sequence:);
  methods[3].selector = @selector(getVersionNumber);
  methods[4].selector = @selector(getVersion);
  methods[5].selector = @selector(getSerialNumber);
  methods[6].selector = @selector(getSignature);
  methods[7].selector = @selector(getIssuer);
  methods[8].selector = @selector(getStartDate);
  methods[9].selector = @selector(getEndDate);
  methods[10].selector = @selector(getSubject);
  methods[11].selector = @selector(getSubjectPublicKeyInfo);
  methods[12].selector = @selector(getIssuerUniqueId);
  methods[13].selector = @selector(getSubjectUniqueId);
  methods[14].selector = @selector(getExtensions);
  methods[15].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "seq_", "LOrgBouncycastleAsn1ASN1Sequence;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "version__", "LOrgBouncycastleAsn1ASN1Integer;", .constantValue.asLong = 0, 0x0, 4, -1, -1, -1 },
    { "serialNumber_", "LOrgBouncycastleAsn1ASN1Integer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "signature_", "LOrgBouncycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "issuer_", "LOrgBouncycastleAsn1X500X500Name;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "startDate_", "LOrgBouncycastleAsn1X509Time;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "endDate_", "LOrgBouncycastleAsn1X509Time;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subject_", "LOrgBouncycastleAsn1X500X500Name;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subjectPublicKeyInfo_", "LOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "issuerUniqueId_", "LOrgBouncycastleAsn1ASN1BitString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subjectUniqueId_", "LOrgBouncycastleAsn1ASN1BitString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "extensions_", "LOrgBouncycastleAsn1X509Extensions;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LOrgBouncycastleAsn1ASN1TaggedObject;Z", "LNSObject;", "LOrgBouncycastleAsn1ASN1Sequence;", "version" };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1X509TBSCertificate = { "TBSCertificate", "org.bouncycastle.asn1.x509", ptrTable, methods, fields, 7, 0x1, 16, 12, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1X509TBSCertificate;
}

@end


#line 52
OrgBouncycastleAsn1X509TBSCertificate *OrgBouncycastleAsn1X509TBSCertificate_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *obj, jboolean explicit_) {
  OrgBouncycastleAsn1X509TBSCertificate_initialize();
  
#line 56
  return OrgBouncycastleAsn1X509TBSCertificate_getInstanceWithId_(OrgBouncycastleAsn1ASN1Sequence_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_));
}

OrgBouncycastleAsn1X509TBSCertificate *OrgBouncycastleAsn1X509TBSCertificate_getInstanceWithId_(id obj) {
  OrgBouncycastleAsn1X509TBSCertificate_initialize();
  
#line 62
  if ([obj isKindOfClass:[OrgBouncycastleAsn1X509TBSCertificate class]]) {
    
#line 64
    return (OrgBouncycastleAsn1X509TBSCertificate *) obj;
  }
  else if (obj != nil) {
    
#line 68
    return new_OrgBouncycastleAsn1X509TBSCertificate_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(obj));
  }
  
#line 71
  return nil;
}


#line 74
void OrgBouncycastleAsn1X509TBSCertificate_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1X509TBSCertificate *self, OrgBouncycastleAsn1ASN1Sequence *seq) {
  OrgBouncycastleAsn1ASN1Object_init(self);
  
#line 77
  jint seqStart = 0;
  
#line 79
  self->seq_ = seq;
  
#line 84
  if ([[((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjectAtWithInt:0] isKindOfClass:[OrgBouncycastleAsn1ASN1TaggedObject class]]) {
    
#line 86
    self->version__ = OrgBouncycastleAsn1ASN1Integer_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_((OrgBouncycastleAsn1ASN1TaggedObject *) cast_chk([seq getObjectAtWithInt:0], [OrgBouncycastleAsn1ASN1TaggedObject class]), true);
  }
  else {
    
#line 90
    seqStart = -1;
    self->version__ = new_OrgBouncycastleAsn1ASN1Integer_initWithLong_(0);
  }
  
#line 94
  jboolean isV1 = false;
  jboolean isV2 = false;
  
#line 97
  if ([((OrgBouncycastleAsn1ASN1Integer *) nil_chk(self->version__)) hasValueWithInt:0]) {
    
#line 99
    isV1 = true;
  }
  else if ([((OrgBouncycastleAsn1ASN1Integer *) nil_chk(self->version__)) hasValueWithInt:1]) {
    
#line 103
    isV2 = true;
  }
  else if (![((OrgBouncycastleAsn1ASN1Integer *) nil_chk(self->version__)) hasValueWithInt:2]) {
    
#line 107
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"version number not recognised");
  }
  
#line 110
  self->serialNumber_ = OrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([seq getObjectAtWithInt:seqStart + 1]);
  
#line 112
  self->signature_ = OrgBouncycastleAsn1X509AlgorithmIdentifier_getInstanceWithId_([seq getObjectAtWithInt:seqStart + 2]);
  self->issuer_ = OrgBouncycastleAsn1X500X500Name_getInstanceWithId_([seq getObjectAtWithInt:seqStart + 3]);
  
#line 118
  OrgBouncycastleAsn1ASN1Sequence *dates = (OrgBouncycastleAsn1ASN1Sequence *) cast_chk([seq getObjectAtWithInt:seqStart + 4], [OrgBouncycastleAsn1ASN1Sequence class]);
  
#line 120
  self->startDate_ = OrgBouncycastleAsn1X509Time_getInstanceWithId_([((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(dates)) getObjectAtWithInt:0]);
  self->endDate_ = OrgBouncycastleAsn1X509Time_getInstanceWithId_([dates getObjectAtWithInt:1]);
  
#line 123
  self->subject_ = OrgBouncycastleAsn1X500X500Name_getInstanceWithId_([seq getObjectAtWithInt:seqStart + 5]);
  
#line 128
  self->subjectPublicKeyInfo_ = OrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_([seq getObjectAtWithInt:seqStart + 6]);
  
#line 130
  jint extras = [seq size] - (seqStart + 6) - 1;
  if (extras != 0 && isV1) {
    
#line 133
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"version 1 certificate contains extra data");
  }
  
#line 136
  while (extras > 0) {
    
#line 138
    OrgBouncycastleAsn1ASN1TaggedObject *extra = (OrgBouncycastleAsn1ASN1TaggedObject *) cast_chk([seq getObjectAtWithInt:seqStart + 6 + extras], [OrgBouncycastleAsn1ASN1TaggedObject class]);
    
#line 140
    switch ([((OrgBouncycastleAsn1ASN1TaggedObject *) nil_chk(extra)) getTagNo]) {
      
#line 142
      case 1:
      self->issuerUniqueId_ = OrgBouncycastleAsn1DERBitString_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(extra, false);
      break;
      case 2:
      self->subjectUniqueId_ = OrgBouncycastleAsn1DERBitString_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(extra, false);
      break;
      case 3:
      if (isV2) {
        
#line 151
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"version 2 certificate cannot contain extensions");
      }
      self->extensions_ = OrgBouncycastleAsn1X509Extensions_getInstanceWithId_(OrgBouncycastleAsn1ASN1Sequence_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(extra, true));
      break;
      default:
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Unknown tag encountered in structure: ", [extra getTagNo]));
    }
    extras--;
  }
}


#line 74
OrgBouncycastleAsn1X509TBSCertificate *new_OrgBouncycastleAsn1X509TBSCertificate_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1X509TBSCertificate, initWithOrgBouncycastleAsn1ASN1Sequence_, seq)
}


#line 74
OrgBouncycastleAsn1X509TBSCertificate *create_OrgBouncycastleAsn1X509TBSCertificate_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1X509TBSCertificate, initWithOrgBouncycastleAsn1ASN1Sequence_, seq)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1X509TBSCertificate)
