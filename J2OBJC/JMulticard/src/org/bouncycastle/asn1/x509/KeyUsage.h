//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x509/KeyUsage.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1X509KeyUsage")
#ifdef RESTRICT_OrgBouncycastleAsn1X509KeyUsage
#define INCLUDE_ALL_OrgBouncycastleAsn1X509KeyUsage 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1X509KeyUsage 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1X509KeyUsage

#if !defined (OrgBouncycastleAsn1X509KeyUsage_) && (INCLUDE_ALL_OrgBouncycastleAsn1X509KeyUsage || defined(INCLUDE_OrgBouncycastleAsn1X509KeyUsage))
#define OrgBouncycastleAsn1X509KeyUsage_

#define RESTRICT_OrgBouncycastleAsn1ASN1Object 1
#define INCLUDE_OrgBouncycastleAsn1ASN1Object 1
#include "org/bouncycastle/asn1/ASN1Object.h"

@class IOSByteArray;
@class OrgBouncycastleAsn1ASN1Primitive;
@class OrgBouncycastleAsn1X509Extensions;

/*!
 @brief The KeyUsage object.
 @code

     id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
     KeyUsage ::= BIT STRING {
          digitalSignature        (0),
          nonRepudiation          (1),
          keyEncipherment         (2),
          dataEncipherment        (3),
          keyAgreement            (4),
          keyCertSign             (5),
          cRLSign                 (6),
          encipherOnly            (7),
          decipherOnly            (8) } 
  
@endcode
 */
@interface OrgBouncycastleAsn1X509KeyUsage : OrgBouncycastleAsn1ASN1Object

#pragma mark Public

/*!
 @brief Basic constructor.
 @param usage - the bitwise OR of the Key Usage flags giving the  allowed uses for the key.
   e.g. (KeyUsage.keyEncipherment | KeyUsage.dataEncipherment)
 */
- (instancetype)initWithInt:(jint)usage;

+ (OrgBouncycastleAsn1X509KeyUsage *)fromExtensionsWithOrgBouncycastleAsn1X509Extensions:(OrgBouncycastleAsn1X509Extensions *)extensions;

- (IOSByteArray *)getBytes;

+ (OrgBouncycastleAsn1X509KeyUsage *)getInstanceWithId:(id)obj;

- (jint)getPadBits;

/*!
 @brief Return true if a given usage bit is set, false otherwise.
 @param usages combination of usage flags.
 @return true if all bits are set, false otherwise.
 */
- (jboolean)hasUsagesWithInt:(jint)usages;

- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleAsn1X509KeyUsage)

inline jint OrgBouncycastleAsn1X509KeyUsage_get_digitalSignature(void);
#define OrgBouncycastleAsn1X509KeyUsage_digitalSignature 128
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1X509KeyUsage, digitalSignature, jint)

inline jint OrgBouncycastleAsn1X509KeyUsage_get_nonRepudiation(void);
#define OrgBouncycastleAsn1X509KeyUsage_nonRepudiation 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1X509KeyUsage, nonRepudiation, jint)

inline jint OrgBouncycastleAsn1X509KeyUsage_get_keyEncipherment(void);
#define OrgBouncycastleAsn1X509KeyUsage_keyEncipherment 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1X509KeyUsage, keyEncipherment, jint)

inline jint OrgBouncycastleAsn1X509KeyUsage_get_dataEncipherment(void);
#define OrgBouncycastleAsn1X509KeyUsage_dataEncipherment 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1X509KeyUsage, dataEncipherment, jint)

inline jint OrgBouncycastleAsn1X509KeyUsage_get_keyAgreement(void);
#define OrgBouncycastleAsn1X509KeyUsage_keyAgreement 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1X509KeyUsage, keyAgreement, jint)

inline jint OrgBouncycastleAsn1X509KeyUsage_get_keyCertSign(void);
#define OrgBouncycastleAsn1X509KeyUsage_keyCertSign 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1X509KeyUsage, keyCertSign, jint)

inline jint OrgBouncycastleAsn1X509KeyUsage_get_cRLSign(void);
#define OrgBouncycastleAsn1X509KeyUsage_cRLSign 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1X509KeyUsage, cRLSign, jint)

inline jint OrgBouncycastleAsn1X509KeyUsage_get_encipherOnly(void);
#define OrgBouncycastleAsn1X509KeyUsage_encipherOnly 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1X509KeyUsage, encipherOnly, jint)

inline jint OrgBouncycastleAsn1X509KeyUsage_get_decipherOnly(void);
#define OrgBouncycastleAsn1X509KeyUsage_decipherOnly 32768
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1X509KeyUsage, decipherOnly, jint)

FOUNDATION_EXPORT OrgBouncycastleAsn1X509KeyUsage *OrgBouncycastleAsn1X509KeyUsage_getInstanceWithId_(id obj);

FOUNDATION_EXPORT OrgBouncycastleAsn1X509KeyUsage *OrgBouncycastleAsn1X509KeyUsage_fromExtensionsWithOrgBouncycastleAsn1X509Extensions_(OrgBouncycastleAsn1X509Extensions *extensions);

FOUNDATION_EXPORT void OrgBouncycastleAsn1X509KeyUsage_initWithInt_(OrgBouncycastleAsn1X509KeyUsage *self, jint usage);

FOUNDATION_EXPORT OrgBouncycastleAsn1X509KeyUsage *new_OrgBouncycastleAsn1X509KeyUsage_initWithInt_(jint usage) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1X509KeyUsage *create_OrgBouncycastleAsn1X509KeyUsage_initWithInt_(jint usage);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1X509KeyUsage)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1X509KeyUsage")
