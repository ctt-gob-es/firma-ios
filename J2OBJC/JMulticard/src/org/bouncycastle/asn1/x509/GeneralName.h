//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x509/GeneralName.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1X509GeneralName")
#ifdef RESTRICT_OrgBouncycastleAsn1X509GeneralName
#define INCLUDE_ALL_OrgBouncycastleAsn1X509GeneralName 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1X509GeneralName 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1X509GeneralName

#if !defined (OrgBouncycastleAsn1X509GeneralName_) && (INCLUDE_ALL_OrgBouncycastleAsn1X509GeneralName || defined(INCLUDE_OrgBouncycastleAsn1X509GeneralName))
#define OrgBouncycastleAsn1X509GeneralName_

#define RESTRICT_OrgBouncycastleAsn1ASN1Object 1
#define INCLUDE_OrgBouncycastleAsn1ASN1Object 1
#include "org/bouncycastle/asn1/ASN1Object.h"

#define RESTRICT_OrgBouncycastleAsn1ASN1Choice 1
#define INCLUDE_OrgBouncycastleAsn1ASN1Choice 1
#include "org/bouncycastle/asn1/ASN1Choice.h"

@class OrgBouncycastleAsn1ASN1Primitive;
@class OrgBouncycastleAsn1ASN1TaggedObject;
@class OrgBouncycastleAsn1X500X500Name;
@class OrgBouncycastleAsn1X509X509Name;
@protocol OrgBouncycastleAsn1ASN1Encodable;

/*!
 @brief The GeneralName object.
 @code

  GeneralName ::= CHOICE {
       otherName                       [0]     OtherName,
       rfc822Name                      [1]     IA5String,
       dNSName                         [2]     IA5String,
       x400Address                     [3]     ORAddress,
       directoryName                   [4]     Name,
       ediPartyName                    [5]     EDIPartyName,
       uniformResourceIdentifier       [6]     IA5String,
       iPAddress                       [7]     OCTET STRING,
       registeredID                    [8]     OBJECT IDENTIFIER}
  OtherName ::= SEQUENCE {
       type-id    OBJECT IDENTIFIER,
       value      [0] EXPLICIT ANY DEFINED BY type-id }
  EDIPartyName ::= SEQUENCE {
       nameAssigner            [0]     DirectoryString OPTIONAL,
       partyName               [1]     DirectoryString }
  Name ::= CHOICE { RDNSequence } 
  
@endcode
 */
@interface OrgBouncycastleAsn1X509GeneralName : OrgBouncycastleAsn1ASN1Object < OrgBouncycastleAsn1ASN1Choice >

#pragma mark Public

/*!
 @brief When the subjectAltName extension contains an Internet mail address,
  the address MUST be included as an rfc822Name.The format of an
  rfc822Name is an "addr-spec" as defined in RFC 822 [RFC 822].
 When the subjectAltName extension contains a domain name service
  label, the domain name MUST be stored in the dNSName (an IA5String).
  The name MUST be in the "preferred name syntax," as specified by RFC
  1034 [RFC 1034].
  When the subjectAltName extension contains a URI, the name MUST be
  stored in the uniformResourceIdentifier (an IA5String). The name MUST
  be a non-relative URL, and MUST follow the URL syntax and encoding
  rules specified in [RFC 1738].  The name must include both a scheme
  (e.g., "http" or "ftp") and a scheme-specific-part.  The scheme-
  specific-part must include a fully qualified domain name or IP
  address as the host.
  When the subjectAltName extension contains a iPAddress, the address
  MUST be stored in the octet string in "network byte order," as
  specified in RFC 791 [RFC 791]. The least significant bit (LSB) of
  each octet is the LSB of the corresponding byte in the network
  address. For IP Version 4, as specified in RFC 791, the octet string
  MUST contain exactly four octets.  For IP Version 6, as specified in
  RFC 1883, the octet string MUST contain exactly sixteen octets [RFC
  1883].
 */
- (instancetype)initWithInt:(jint)tag
withOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)name;

/*!
 @brief Create a GeneralName for the given tag from the passed in String.
 <p>
  This constructor can handle: 
 <ul>
  <li>rfc822Name
  <li>iPAddress
  <li>directoryName
  <li>dNSName
  <li>uniformResourceIdentifier
  <li>registeredID
  </ul>
  For x400Address, otherName and ediPartyName there is no common string
  format defined. 
 <p>
  Note: A directory name can be encoded in different ways into a byte
  representation. Be aware of this if the byte representation is used for
  comparing results.
 @param tag tag number
 @param name string representation of name
 @throw IllegalArgumentExceptionif the string encoding is not correct or     *             not supported.
 */
- (instancetype)initWithInt:(jint)tag
               withNSString:(NSString *)name;

- (instancetype)initWithOrgBouncycastleAsn1X500X500Name:(OrgBouncycastleAsn1X500X500Name *)dirName;

/*!
 @param dirName
 */
- (instancetype)initWithOrgBouncycastleAsn1X509X509Name:(OrgBouncycastleAsn1X509X509Name *)dirName;

+ (OrgBouncycastleAsn1X509GeneralName *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)tagObj
                                                                               withBoolean:(jboolean)explicit_;

+ (OrgBouncycastleAsn1X509GeneralName *)getInstanceWithId:(id)obj;

- (id<OrgBouncycastleAsn1ASN1Encodable>)getName;

- (jint)getTagNo;

- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleAsn1X509GeneralName)

inline jint OrgBouncycastleAsn1X509GeneralName_get_otherName(void);
#define OrgBouncycastleAsn1X509GeneralName_otherName 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1X509GeneralName, otherName, jint)

inline jint OrgBouncycastleAsn1X509GeneralName_get_rfc822Name(void);
#define OrgBouncycastleAsn1X509GeneralName_rfc822Name 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1X509GeneralName, rfc822Name, jint)

inline jint OrgBouncycastleAsn1X509GeneralName_get_dNSName(void);
#define OrgBouncycastleAsn1X509GeneralName_dNSName 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1X509GeneralName, dNSName, jint)

inline jint OrgBouncycastleAsn1X509GeneralName_get_x400Address(void);
#define OrgBouncycastleAsn1X509GeneralName_x400Address 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1X509GeneralName, x400Address, jint)

inline jint OrgBouncycastleAsn1X509GeneralName_get_directoryName(void);
#define OrgBouncycastleAsn1X509GeneralName_directoryName 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1X509GeneralName, directoryName, jint)

inline jint OrgBouncycastleAsn1X509GeneralName_get_ediPartyName(void);
#define OrgBouncycastleAsn1X509GeneralName_ediPartyName 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1X509GeneralName, ediPartyName, jint)

inline jint OrgBouncycastleAsn1X509GeneralName_get_uniformResourceIdentifier(void);
#define OrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1X509GeneralName, uniformResourceIdentifier, jint)

inline jint OrgBouncycastleAsn1X509GeneralName_get_iPAddress(void);
#define OrgBouncycastleAsn1X509GeneralName_iPAddress 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1X509GeneralName, iPAddress, jint)

inline jint OrgBouncycastleAsn1X509GeneralName_get_registeredID(void);
#define OrgBouncycastleAsn1X509GeneralName_registeredID 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleAsn1X509GeneralName, registeredID, jint)

FOUNDATION_EXPORT void OrgBouncycastleAsn1X509GeneralName_initWithOrgBouncycastleAsn1X509X509Name_(OrgBouncycastleAsn1X509GeneralName *self, OrgBouncycastleAsn1X509X509Name *dirName);

FOUNDATION_EXPORT OrgBouncycastleAsn1X509GeneralName *new_OrgBouncycastleAsn1X509GeneralName_initWithOrgBouncycastleAsn1X509X509Name_(OrgBouncycastleAsn1X509X509Name *dirName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1X509GeneralName *create_OrgBouncycastleAsn1X509GeneralName_initWithOrgBouncycastleAsn1X509X509Name_(OrgBouncycastleAsn1X509X509Name *dirName);

FOUNDATION_EXPORT void OrgBouncycastleAsn1X509GeneralName_initWithOrgBouncycastleAsn1X500X500Name_(OrgBouncycastleAsn1X509GeneralName *self, OrgBouncycastleAsn1X500X500Name *dirName);

FOUNDATION_EXPORT OrgBouncycastleAsn1X509GeneralName *new_OrgBouncycastleAsn1X509GeneralName_initWithOrgBouncycastleAsn1X500X500Name_(OrgBouncycastleAsn1X500X500Name *dirName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1X509GeneralName *create_OrgBouncycastleAsn1X509GeneralName_initWithOrgBouncycastleAsn1X500X500Name_(OrgBouncycastleAsn1X500X500Name *dirName);

FOUNDATION_EXPORT void OrgBouncycastleAsn1X509GeneralName_initWithInt_withOrgBouncycastleAsn1ASN1Encodable_(OrgBouncycastleAsn1X509GeneralName *self, jint tag, id<OrgBouncycastleAsn1ASN1Encodable> name);

FOUNDATION_EXPORT OrgBouncycastleAsn1X509GeneralName *new_OrgBouncycastleAsn1X509GeneralName_initWithInt_withOrgBouncycastleAsn1ASN1Encodable_(jint tag, id<OrgBouncycastleAsn1ASN1Encodable> name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1X509GeneralName *create_OrgBouncycastleAsn1X509GeneralName_initWithInt_withOrgBouncycastleAsn1ASN1Encodable_(jint tag, id<OrgBouncycastleAsn1ASN1Encodable> name);

FOUNDATION_EXPORT void OrgBouncycastleAsn1X509GeneralName_initWithInt_withNSString_(OrgBouncycastleAsn1X509GeneralName *self, jint tag, NSString *name);

FOUNDATION_EXPORT OrgBouncycastleAsn1X509GeneralName *new_OrgBouncycastleAsn1X509GeneralName_initWithInt_withNSString_(jint tag, NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1X509GeneralName *create_OrgBouncycastleAsn1X509GeneralName_initWithInt_withNSString_(jint tag, NSString *name);

FOUNDATION_EXPORT OrgBouncycastleAsn1X509GeneralName *OrgBouncycastleAsn1X509GeneralName_getInstanceWithId_(id obj);

FOUNDATION_EXPORT OrgBouncycastleAsn1X509GeneralName *OrgBouncycastleAsn1X509GeneralName_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *tagObj, jboolean explicit_);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1X509GeneralName)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1X509GeneralName")
