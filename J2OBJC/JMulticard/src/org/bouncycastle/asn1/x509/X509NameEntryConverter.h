//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x509/X509NameEntryConverter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1X509X509NameEntryConverter")
#ifdef RESTRICT_OrgBouncycastleAsn1X509X509NameEntryConverter
#define INCLUDE_ALL_OrgBouncycastleAsn1X509X509NameEntryConverter 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1X509X509NameEntryConverter 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1X509X509NameEntryConverter

#if !defined (OrgBouncycastleAsn1X509X509NameEntryConverter_) && (INCLUDE_ALL_OrgBouncycastleAsn1X509X509NameEntryConverter || defined(INCLUDE_OrgBouncycastleAsn1X509X509NameEntryConverter))
#define OrgBouncycastleAsn1X509X509NameEntryConverter_

@class OrgBouncycastleAsn1ASN1ObjectIdentifier;
@class OrgBouncycastleAsn1ASN1Primitive;

/*!
 @brief It turns out that the number of standard ways the fields in a DN should be 
  encoded into their ASN.1 counterparts is rapidly approaching the
  number of machines on the internet.By default the X509Name class 
  will produce UTF8Strings in line with the current recommendations (RFC 3280).
 <p>
  An example of an encoder look like below: 
 @code

  public class X509DirEntryConverter
      extends X509NameEntryConverter
  {
      public ASN1Primitive getConvertedValue(
          ASN1ObjectIdentifier  oid,
          String               value)
      {
          if (str.length() != 0 &amp;&amp; str.charAt(0) == '#')
          {
              return convertHexEncoded(str, 1);
          }
          if (oid.equals(EmailAddress))
          {
              return new DERIA5String(str);
          }
          else if (canBePrintable(str))
          {
              return new DERPrintableString(str);
          }
          else if (canBeUTF8(str))
          {
              return new DERUTF8String(str);
          }
          else
          {
              return new DERBMPString(str);
          }        }        }        
  
@endcode
 */
@interface OrgBouncycastleAsn1X509X509NameEntryConverter : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Convert the passed in String value into the appropriate ASN.1
  encoded object.
 @param oid the oid associated with the value in the DN.
 @param value the value of the particular DN component.
 @return the ASN.1 equivalent for the value.
 */
- (OrgBouncycastleAsn1ASN1Primitive *)getConvertedValueWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)oid
                                                                                      withNSString:(NSString *)value;

#pragma mark Protected

/*!
 @brief return true if the passed in String can be represented without
  loss as a PrintableString, false otherwise.
 */
- (jboolean)canBePrintableWithNSString:(NSString *)str;

/*!
 @brief Convert an inline encoded hex string rendition of an ASN.1
  object back into its corresponding ASN.1 object.
 @param str the hex encoded object
 @param off the index at which the encoding starts
 @return the decoded object
 */
- (OrgBouncycastleAsn1ASN1Primitive *)convertHexEncodedWithNSString:(NSString *)str
                                                            withInt:(jint)off;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleAsn1X509X509NameEntryConverter)

FOUNDATION_EXPORT void OrgBouncycastleAsn1X509X509NameEntryConverter_init(OrgBouncycastleAsn1X509X509NameEntryConverter *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1X509X509NameEntryConverter)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1X509X509NameEntryConverter")
