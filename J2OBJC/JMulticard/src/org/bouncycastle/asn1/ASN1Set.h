//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1Set.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1ASN1Set")
#ifdef RESTRICT_OrgBouncycastleAsn1ASN1Set
#define INCLUDE_ALL_OrgBouncycastleAsn1ASN1Set 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1ASN1Set 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1ASN1Set

#if !defined (OrgBouncycastleAsn1ASN1Set_) && (INCLUDE_ALL_OrgBouncycastleAsn1ASN1Set || defined(INCLUDE_OrgBouncycastleAsn1ASN1Set))
#define OrgBouncycastleAsn1ASN1Set_

#define RESTRICT_OrgBouncycastleAsn1ASN1Primitive 1
#define INCLUDE_OrgBouncycastleAsn1ASN1Primitive 1
#include "org/bouncycastle/asn1/ASN1Primitive.h"

#define RESTRICT_OrgBouncycastleUtilIterable 1
#define INCLUDE_OrgBouncycastleUtilIterable 1
#include "org/bouncycastle/util/Iterable.h"

@class IOSObjectArray;
@class OrgBouncycastleAsn1ASN1EncodableVector;
@class OrgBouncycastleAsn1ASN1TaggedObject;
@class OrgBouncycastleAsn1ASN1UniversalType;
@protocol JavaUtilEnumeration;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;
@protocol OrgBouncycastleAsn1ASN1Encodable;
@protocol OrgBouncycastleAsn1ASN1SetParser;

/*!
 @brief ASN.1 <code>SET</code> and <code>SET OF</code> constructs.
 <p>
  Note: This does not know which syntax the set is!
  (The difference: ordering of SET elements or not ordering.) 
 </p><p>
  DER form is always definite form length fields, while
  BER support uses indefinite form. 
 </p><p>
  The CER form support does not exist. 
 </p><p>
  <h2>X.690</h2>
  <h3>8: Basic encoding rules</h3>
  <h4>8.11 Encoding of a set value </h4>
  <b>8.11.1</b> The encoding of a set value shall be constructed 
 <p>
  <b>8.11.2</b> The contents octets shall consist of the complete
  encoding of a data value from each of the types listed in the
  ASN.1 definition of the set type, in an order chosen by the sender,
  unless the type was referenced with the keyword 
 <b>OPTIONAL</b> or the keyword <b>DEFAULT</b>.
  </p><p>
  <b>8.11.3</b> The encoding of a data value may, but need not,
  be present for a type which was referenced with the keyword 
 <b>OPTIONAL</b> or the keyword <b>DEFAULT</b>.
  <blockquote>
  NOTE &mdash; The order of data values in a set value is not significant,
  and places no constraints on the order during transfer 
 </blockquote>
  <h4>8.12 Encoding of a set-of value</h4>
  <p>
  <b>8.12.1</b> The encoding of a set-of value shall be constructed. 
 </p><p>
  <b>8.12.2</b> The text of 8.10.2 applies: 
 <i>The contents octets shall consist of zero,
  one or more complete encodings of data values from the type listed in
  the ASN.1 definition.</i>
  </p><p>
  <b>8.12.3</b> The order of data values need not be preserved by
  the encoding and subsequent decoding. 
 <h3>9: Canonical encoding rules</h3>
  <h4>9.1 Length forms</h4>
  If the encoding is constructed, it shall employ the indefinite-length form.
  If the encoding is primitive, it shall include the fewest length octets necessary.
  [Contrast with 8.1.3.2 b).] 
 <h4>9.3 Set components</h4>
  The encodings of the component values of a set value shall
  appear in an order determined by their tags as specified
  in 8.6 of ITU-T Rec. X.680 | ISO/IEC 8824-1.
  Additionally, for the purposes of determining the order in which
  components are encoded when one or more component is an untagged
  choice type, each untagged choice type is ordered as though it
  has a tag equal to that of the smallest tag in that choice type
  or any untagged choice types nested within. 
 <h3>10: Distinguished encoding rules</h3>
  <h4>10.1 Length forms</h4>
  The definite form of length encoding shall be used,
  encoded in the minimum number of octets.
  [Contrast with 8.1.3.2 b).] 
 <h4>10.3 Set components</h4>
  The encodings of the component values of a set value shall appear
  in an order determined by their tags as specified
  in 8.6 of ITU-T Rec. X.680 | ISO/IEC 8824-1. 
 <blockquote>
  NOTE &mdash; Where a component of the set is an untagged choice type,
  the location of that component in the ordering will depend on
  the tag of the choice component being encoded. 
 </blockquote>
  
 <h3>11: Restrictions on BER employed by both CER and DER</h3>
  <h4>11.5 Set and sequence components with default value </h4>
  The encoding of a set value or sequence value shall not include
  an encoding for any component value which is equal to
  its default value. 
 <h4>11.6 Set-of components </h4>
  <p>
  The encodings of the component values of a set-of value
  shall appear in ascending order, the encodings being compared
  as octet strings with the shorter components being padded at
  their trailing end with 0-octets. 
 <blockquote>
  NOTE &mdash; The padding octets are for comparison purposes only
  and do not appear in the encodings. 
 </blockquote>
 */
@interface OrgBouncycastleAsn1ASN1Set : OrgBouncycastleAsn1ASN1Primitive < OrgBouncycastleUtilIterable > {
 @public
  IOSObjectArray *elements_;
  jboolean isSorted_;
}

#pragma mark Public

/*!
 @brief Return an ASN1 set from a tagged object.There is a special
  case here, if an object appears to have been explicitly tagged on
  reading but we were expecting it to be implicitly tagged in the
  normal course of events it indicates that we lost the surrounding
  set - so we need to add it back (this will happen if the tagged
  object is a sequence that contains other sequences).
 If you are
  dealing with implicitly tagged sets you really <b>should</b>
  be using this method.
 @param taggedObject the tagged object.
 @param explicit_ true if the object is meant to be explicitly tagged           false otherwise.
 @throw IllegalArgumentExceptionif the tagged object cannot
           be converted.
 @return an ASN1Set instance.
 */
+ (OrgBouncycastleAsn1ASN1Set *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)taggedObject
                                                                       withBoolean:(jboolean)explicit_;

/*!
 @brief return an ASN1Set from the given object.
 @param obj the object we want converted.
 @throw IllegalArgumentExceptionif the object cannot be converted.
 @return an ASN1Set instance, or null.
 */
+ (OrgBouncycastleAsn1ASN1Set *)getInstanceWithId:(id)obj;

/*!
 @brief return the object at the set position indicated by index.
 @param index the set number (starting at zero) of the object
 @return the object at the set position indicated by index.
 */
- (id<OrgBouncycastleAsn1ASN1Encodable>)getObjectAtWithInt:(jint)index;

- (id<JavaUtilEnumeration>)getObjects;

- (NSUInteger)hash;

- (id<JavaUtilIterator>)iterator;

- (id<OrgBouncycastleAsn1ASN1SetParser>)parser;

/*!
 @brief return the number of objects in this set.
 @return the number of objects in this set.
 */
- (jint)size;

- (IOSObjectArray *)toArray;

- (NSString *)description;

#pragma mark Protected

- (instancetype)init;

/*!
 @brief Create a SET containing one object
 @param element object to be added to the SET.
 */
- (instancetype)initWithOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)element;

/*!
 @brief Create a SET containing an array of objects.
 @param elements an array of objects to make up the SET.
 @param doSort true if should be sorted DER style, false otherwise.
 */
- (instancetype)initWithOrgBouncycastleAsn1ASN1EncodableArray:(IOSObjectArray *)elements
                                                  withBoolean:(jboolean)doSort;

/*!
 @brief Create a SET containing a vector of objects.
 @param elementVector a vector of objects to make up the SET.
 @param doSort true if should be sorted DER style, false otherwise.
 */
- (instancetype)initWithOrgBouncycastleAsn1ASN1EncodableVector:(OrgBouncycastleAsn1ASN1EncodableVector *)elementVector
                                                   withBoolean:(jboolean)doSort;

#pragma mark Package-Private

- (instancetype)initWithBoolean:(jboolean)isSorted
withOrgBouncycastleAsn1ASN1EncodableArray:(IOSObjectArray *)elements;

- (jboolean)asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:(OrgBouncycastleAsn1ASN1Primitive *)other;

- (jboolean)encodeConstructed;

/*!
 @brief Change current SET object to be encoded as <code>DERSet</code>.
 This is part of Distinguished Encoding Rules form serialization.
 */
- (OrgBouncycastleAsn1ASN1Primitive *)toDERObject;

/*!
 @brief Change current SET object to be encoded as <code>DLSet</code>.
 This is part of Direct Length form serialization.
 */
- (OrgBouncycastleAsn1ASN1Primitive *)toDLObject;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleAsn1ASN1Set)

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1ASN1Set, elements_, IOSObjectArray *)

inline OrgBouncycastleAsn1ASN1UniversalType *OrgBouncycastleAsn1ASN1Set_get_TYPE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1UniversalType *OrgBouncycastleAsn1ASN1Set_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleAsn1ASN1Set, TYPE, OrgBouncycastleAsn1ASN1UniversalType *)

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1Set *OrgBouncycastleAsn1ASN1Set_getInstanceWithId_(id obj);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1Set *OrgBouncycastleAsn1ASN1Set_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *taggedObject, jboolean explicit_);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1Set_init(OrgBouncycastleAsn1ASN1Set *self);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1Set_initWithOrgBouncycastleAsn1ASN1Encodable_(OrgBouncycastleAsn1ASN1Set *self, id<OrgBouncycastleAsn1ASN1Encodable> element);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1Set_initWithOrgBouncycastleAsn1ASN1EncodableVector_withBoolean_(OrgBouncycastleAsn1ASN1Set *self, OrgBouncycastleAsn1ASN1EncodableVector *elementVector, jboolean doSort);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1Set_initWithOrgBouncycastleAsn1ASN1EncodableArray_withBoolean_(OrgBouncycastleAsn1ASN1Set *self, IOSObjectArray *elements, jboolean doSort);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1Set_initWithBoolean_withOrgBouncycastleAsn1ASN1EncodableArray_(OrgBouncycastleAsn1ASN1Set *self, jboolean isSorted, IOSObjectArray *elements);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1ASN1Set)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1ASN1Set")
