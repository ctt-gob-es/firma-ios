//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1GeneralizedTime.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/SimpleTimeZone.h"
#include "java/util/TimeZone.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1GeneralizedTime.h"
#include "org/bouncycastle/asn1/ASN1OutputStream.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1TaggedObject.h"
#include "org/bouncycastle/asn1/ASN1UniversalType.h"
#include "org/bouncycastle/asn1/BERTags.h"
#include "org/bouncycastle/asn1/DERGeneralizedTime.h"
#include "org/bouncycastle/asn1/DEROctetString.h"
#include "org/bouncycastle/asn1/DateUtil.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/Strings.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/asn1/ASN1GeneralizedTime must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleAsn1ASN1GeneralizedTime ()

- (NSString *)calculateGMTOffsetWithNSString:(NSString *)stime;

- (JavaTextSimpleDateFormat *)calculateGMTDateFormat;

- (NSString *)pruneFractionalSecondsWithNSString:(NSString *)origTime;

- (NSString *)convertWithInt:(jint)time;

- (jboolean)isDigitWithInt:(jint)pos;

@end

__attribute__((unused)) static NSString *OrgBouncycastleAsn1ASN1GeneralizedTime_calculateGMTOffsetWithNSString_(OrgBouncycastleAsn1ASN1GeneralizedTime *self, NSString *stime);

__attribute__((unused)) static JavaTextSimpleDateFormat *OrgBouncycastleAsn1ASN1GeneralizedTime_calculateGMTDateFormat(OrgBouncycastleAsn1ASN1GeneralizedTime *self);

__attribute__((unused)) static NSString *OrgBouncycastleAsn1ASN1GeneralizedTime_pruneFractionalSecondsWithNSString_(OrgBouncycastleAsn1ASN1GeneralizedTime *self, NSString *origTime);

__attribute__((unused)) static NSString *OrgBouncycastleAsn1ASN1GeneralizedTime_convertWithInt_(OrgBouncycastleAsn1ASN1GeneralizedTime *self, jint time);

__attribute__((unused)) static jboolean OrgBouncycastleAsn1ASN1GeneralizedTime_isDigitWithInt_(OrgBouncycastleAsn1ASN1GeneralizedTime *self, jint pos);

@interface OrgBouncycastleAsn1ASN1GeneralizedTime_1 : OrgBouncycastleAsn1ASN1UniversalType

- (instancetype)initWithIOSClass:(IOSClass *)javaClass
                         withInt:(jint)tagNumber;

- (OrgBouncycastleAsn1ASN1Primitive *)fromImplicitPrimitiveWithOrgBouncycastleAsn1DEROctetString:(OrgBouncycastleAsn1DEROctetString *)octetString;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleAsn1ASN1GeneralizedTime_1)

__attribute__((unused)) static void OrgBouncycastleAsn1ASN1GeneralizedTime_1_initWithIOSClass_withInt_(OrgBouncycastleAsn1ASN1GeneralizedTime_1 *self, IOSClass *javaClass, jint tagNumber);

__attribute__((unused)) static OrgBouncycastleAsn1ASN1GeneralizedTime_1 *new_OrgBouncycastleAsn1ASN1GeneralizedTime_1_initWithIOSClass_withInt_(IOSClass *javaClass, jint tagNumber) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleAsn1ASN1GeneralizedTime_1 *create_OrgBouncycastleAsn1ASN1GeneralizedTime_1_initWithIOSClass_withInt_(IOSClass *javaClass, jint tagNumber);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1GeneralizedTime.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleAsn1ASN1GeneralizedTime)

OrgBouncycastleAsn1ASN1UniversalType *OrgBouncycastleAsn1ASN1GeneralizedTime_TYPE;


#line 44
@implementation OrgBouncycastleAsn1ASN1GeneralizedTime


#line 63
+ (OrgBouncycastleAsn1ASN1GeneralizedTime *)getInstanceWithId:(id)obj {
  return OrgBouncycastleAsn1ASN1GeneralizedTime_getInstanceWithId_(obj);
}


#line 102
+ (OrgBouncycastleAsn1ASN1GeneralizedTime *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)taggedObject
                                                                                   withBoolean:(jboolean)explicit_ {
  return OrgBouncycastleAsn1ASN1GeneralizedTime_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(taggedObject, explicit_);
}


#line 118
- (instancetype)initWithNSString:(NSString *)time {
  OrgBouncycastleAsn1ASN1GeneralizedTime_initWithNSString_(self, time);
  return self;
}


#line 137
- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time {
  OrgBouncycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_(self, time);
  return self;
}


#line 154
- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgBouncycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_withJavaUtilLocale_(self, time, locale);
  return self;
}


#line 165
- (instancetype)initWithByteArray:(IOSByteArray *)bytes {
  OrgBouncycastleAsn1ASN1GeneralizedTime_initWithByteArray_(self, bytes);
  return self;
}


#line 185
- (NSString *)getTimeString {
  
#line 187
  return OrgBouncycastleUtilStrings_fromByteArrayWithByteArray_(contents_);
}


#line 203
- (NSString *)getTime {
  
#line 205
  NSString *stime = OrgBouncycastleUtilStrings_fromByteArrayWithByteArray_(contents_);
  
#line 210
  if ([((NSString *) nil_chk(stime)) charAtWithInt:[stime java_length] - 1] == 'Z') {
    
#line 212
    return JreStrcat("$$", [stime java_substring:0 endIndex:[stime java_length] - 1], @"GMT+00:00");
  }
  else {
    
#line 216
    jint signPos = [stime java_length] - 6;
    jchar sign = [stime charAtWithInt:signPos];
    if ((sign == '-' || sign == '+') && [stime java_indexOfString:@"GMT"] == signPos - 3) {
      
#line 221
      return stime;
    }
    
#line 224
    signPos = [stime java_length] - 5;
    sign = [stime charAtWithInt:signPos];
    if (sign == '-' || sign == '+') {
      
#line 228
      return JreStrcat("$$$C$", [stime java_substring:0 endIndex:signPos], @"GMT",
#line 230
      [stime java_substring:signPos endIndex:signPos + 3], ':',
#line 232
      [stime java_substring:signPos + 3]);
    }
    
#line 235
    signPos = [stime java_length] - 3;
    sign = [stime charAtWithInt:signPos];
    if (sign == '-' || sign == '+') {
      
#line 239
      return JreStrcat("$$$$", [stime java_substring:0 endIndex:signPos], @"GMT",
#line 241
      [stime java_substring:signPos], @":00");
    }
  }
  
#line 245
  return JreStrcat("$$", stime, OrgBouncycastleAsn1ASN1GeneralizedTime_calculateGMTOffsetWithNSString_(self, stime));
}


#line 248
- (NSString *)calculateGMTOffsetWithNSString:(NSString *)stime {
  return OrgBouncycastleAsn1ASN1GeneralizedTime_calculateGMTOffsetWithNSString_(self, stime);
}


#line 285
- (JavaTextSimpleDateFormat *)calculateGMTDateFormat {
  return OrgBouncycastleAsn1ASN1GeneralizedTime_calculateGMTDateFormat(self);
}


#line 310
- (NSString *)pruneFractionalSecondsWithNSString:(NSString *)origTime {
  return OrgBouncycastleAsn1ASN1GeneralizedTime_pruneFractionalSecondsWithNSString_(self, origTime);
}


#line 343
- (NSString *)convertWithInt:(jint)time {
  return OrgBouncycastleAsn1ASN1GeneralizedTime_convertWithInt_(self, time);
}


#line 353
- (JavaUtilDate *)getDate {
  
#line 356
  JavaTextSimpleDateFormat *dateF;
  NSString *stime = OrgBouncycastleUtilStrings_fromByteArrayWithByteArray_(contents_);
  NSString *d = stime;
  
#line 360
  if ([((NSString *) nil_chk(stime)) java_hasSuffix:@"Z"]) {
    
#line 362
    if ([self hasFractionalSeconds]) {
      
#line 364
      dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmss.SSS'Z'");
    }
    else if ([self hasSeconds]) {
      
#line 368
      dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmss'Z'");
    }
    else if ([self hasMinutes]) {
      
#line 372
      dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmm'Z'");
    }
    else {
      
#line 376
      dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHH'Z'");
    }
    
#line 379
    [dateF setTimeZoneWithJavaUtilTimeZone:new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z")];
  }
  else if ([stime java_indexOf:'-'] > 0 || [stime java_indexOf:'+'] > 0) {
    
#line 383
    d = [self getTime];
    dateF = OrgBouncycastleAsn1ASN1GeneralizedTime_calculateGMTDateFormat(self);
  }
  else {
    
#line 388
    if ([self hasFractionalSeconds]) {
      
#line 390
      dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmss.SSS");
    }
    else if ([self hasSeconds]) {
      
#line 394
      dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmss");
    }
    else if ([self hasMinutes]) {
      
#line 398
      dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmm");
    }
    else {
      
#line 402
      dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHH");
    }
    
#line 405
    [dateF setTimeZoneWithJavaUtilTimeZone:new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, [((JavaUtilTimeZone *) nil_chk(JavaUtilTimeZone_getDefault())) getID])];
  }
  
#line 408
  if ([self hasFractionalSeconds]) {
    
#line 410
    d = OrgBouncycastleAsn1ASN1GeneralizedTime_pruneFractionalSecondsWithNSString_(self, d);
  }
  
#line 413
  return OrgBouncycastleAsn1DateUtil_epochAdjustWithJavaUtilDate_([((JavaTextSimpleDateFormat *) nil_chk(dateF)) parseWithNSString:d]);
}


#line 416
- (jboolean)hasFractionalSeconds {
  
#line 418
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(contents_))->size_; i++) {
    
#line 420
    if ((IOSByteArray_Get(contents_, i) == '.') && (i == 14)) {
      
#line 422
      return true;
    }
  }
  return false;
}


#line 428
- (jboolean)hasSeconds {
  
#line 430
  return OrgBouncycastleAsn1ASN1GeneralizedTime_isDigitWithInt_(self, 12) && OrgBouncycastleAsn1ASN1GeneralizedTime_isDigitWithInt_(self, 13);
}


#line 433
- (jboolean)hasMinutes {
  
#line 435
  return OrgBouncycastleAsn1ASN1GeneralizedTime_isDigitWithInt_(self, 10) && OrgBouncycastleAsn1ASN1GeneralizedTime_isDigitWithInt_(self, 11);
}


#line 438
- (jboolean)isDigitWithInt:(jint)pos {
  return OrgBouncycastleAsn1ASN1GeneralizedTime_isDigitWithInt_(self, pos);
}


#line 443
- (jboolean)encodeConstructed {
  
#line 446
  return false;
}

- (jint)encodedLengthWithBoolean:(jboolean)withTag {
  
#line 452
  return OrgBouncycastleAsn1ASN1OutputStream_getLengthOfEncodingDLWithBoolean_withInt_(withTag, ((IOSByteArray *) nil_chk(contents_))->size_);
}

- (void)encodeWithOrgBouncycastleAsn1ASN1OutputStream:(OrgBouncycastleAsn1ASN1OutputStream *)outArg
                                          withBoolean:(jboolean)withTag {
  
#line 458
  [((OrgBouncycastleAsn1ASN1OutputStream *) nil_chk(outArg)) writeEncodingDLWithBoolean:withTag withInt:OrgBouncycastleAsn1BERTags_GENERALIZED_TIME withByteArray:contents_];
}


#line 461
- (OrgBouncycastleAsn1ASN1Primitive *)toDERObject {
  
#line 464
  return new_OrgBouncycastleAsn1DERGeneralizedTime_initWithByteArray_(contents_);
}

- (OrgBouncycastleAsn1ASN1Primitive *)toDLObject {
  
#line 470
  return new_OrgBouncycastleAsn1DERGeneralizedTime_initWithByteArray_(contents_);
}

- (jboolean)asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:(OrgBouncycastleAsn1ASN1Primitive *)o {
  
#line 476
  if (!([o isKindOfClass:[OrgBouncycastleAsn1ASN1GeneralizedTime class]])) {
    
#line 478
    return false;
  }
  
#line 481
  return OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(contents_, ((OrgBouncycastleAsn1ASN1GeneralizedTime *) nil_chk(((OrgBouncycastleAsn1ASN1GeneralizedTime *) cast_chk(o, [OrgBouncycastleAsn1ASN1GeneralizedTime class]))))->contents_);
}


#line 484
- (NSUInteger)hash {
  
#line 487
  return OrgBouncycastleUtilArrays_hashCodeWithByteArray_(contents_);
}

+ (OrgBouncycastleAsn1ASN1GeneralizedTime *)createPrimitiveWithByteArray:(IOSByteArray *)contents {
  return OrgBouncycastleAsn1ASN1GeneralizedTime_createPrimitiveWithByteArray_(contents);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgBouncycastleAsn1ASN1GeneralizedTime;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1GeneralizedTime;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 7, 3, -1, -1, -1, -1 },
    { NULL, "LJavaTextSimpleDateFormat;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 8, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, 11, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 12, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 16, 17, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 18, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 20, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1GeneralizedTime;", 0x8, 21, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithId:);
  methods[1].selector = @selector(getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:withBoolean:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithJavaUtilDate:);
  methods[4].selector = @selector(initWithJavaUtilDate:withJavaUtilLocale:);
  methods[5].selector = @selector(initWithByteArray:);
  methods[6].selector = @selector(getTimeString);
  methods[7].selector = @selector(getTime);
  methods[8].selector = @selector(calculateGMTOffsetWithNSString:);
  methods[9].selector = @selector(calculateGMTDateFormat);
  methods[10].selector = @selector(pruneFractionalSecondsWithNSString:);
  methods[11].selector = @selector(convertWithInt:);
  methods[12].selector = @selector(getDate);
  methods[13].selector = @selector(hasFractionalSeconds);
  methods[14].selector = @selector(hasSeconds);
  methods[15].selector = @selector(hasMinutes);
  methods[16].selector = @selector(isDigitWithInt:);
  methods[17].selector = @selector(encodeConstructed);
  methods[18].selector = @selector(encodedLengthWithBoolean:);
  methods[19].selector = @selector(encodeWithOrgBouncycastleAsn1ASN1OutputStream:withBoolean:);
  methods[20].selector = @selector(toDERObject);
  methods[21].selector = @selector(toDLObject);
  methods[22].selector = @selector(asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:);
  methods[23].selector = @selector(hash);
  methods[24].selector = @selector(createPrimitiveWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE", "LOrgBouncycastleAsn1ASN1UniversalType;", .constantValue.asLong = 0, 0x18, -1, 22, -1, -1 },
    { "contents_", "[B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LNSObject;", "LOrgBouncycastleAsn1ASN1TaggedObject;Z", "LNSString;", "LJavaUtilDate;", "LJavaUtilDate;LJavaUtilLocale;", "[B", "calculateGMTOffset", "pruneFractionalSeconds", "convert", "I", "LJavaTextParseException;", "isDigit", "encodedLength", "Z", "encode", "LOrgBouncycastleAsn1ASN1OutputStream;Z", "LJavaIoIOException;", "asn1Equals", "LOrgBouncycastleAsn1ASN1Primitive;", "hashCode", "createPrimitive", &OrgBouncycastleAsn1ASN1GeneralizedTime_TYPE };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1ASN1GeneralizedTime = { "ASN1GeneralizedTime", "org.bouncycastle.asn1", ptrTable, methods, fields, 7, 0x1, 25, 2, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1ASN1GeneralizedTime;
}

+ (void)initialize {
  if (self == [OrgBouncycastleAsn1ASN1GeneralizedTime class]) {
    OrgBouncycastleAsn1ASN1GeneralizedTime_TYPE = new_OrgBouncycastleAsn1ASN1GeneralizedTime_1_initWithIOSClass_withInt_(
#line 47
    OrgBouncycastleAsn1ASN1GeneralizedTime_class_(), OrgBouncycastleAsn1BERTags_GENERALIZED_TIME);
    J2OBJC_SET_INITIALIZED(OrgBouncycastleAsn1ASN1GeneralizedTime)
  }
}

@end


#line 63
OrgBouncycastleAsn1ASN1GeneralizedTime *OrgBouncycastleAsn1ASN1GeneralizedTime_getInstanceWithId_(id obj) {
  OrgBouncycastleAsn1ASN1GeneralizedTime_initialize();
  
#line 66
  if (obj == nil || [obj isKindOfClass:[OrgBouncycastleAsn1ASN1GeneralizedTime class]]) {
    
#line 68
    return (OrgBouncycastleAsn1ASN1GeneralizedTime *) cast_chk(obj, [OrgBouncycastleAsn1ASN1GeneralizedTime class]);
  }
  if ([OrgBouncycastleAsn1ASN1Encodable_class_() isInstance:obj]) {
    
#line 72
    OrgBouncycastleAsn1ASN1Primitive *primitive = [((id<OrgBouncycastleAsn1ASN1Encodable>) cast_check(obj, OrgBouncycastleAsn1ASN1Encodable_class_())) toASN1Primitive];
    if ([primitive isKindOfClass:[OrgBouncycastleAsn1ASN1GeneralizedTime class]]) {
      
#line 75
      return (OrgBouncycastleAsn1ASN1GeneralizedTime *) primitive;
    }
  }
  if ([obj isKindOfClass:[IOSByteArray class]]) {
    
#line 80
    @try {
      
#line 82
      return (OrgBouncycastleAsn1ASN1GeneralizedTime *) cast_chk([((OrgBouncycastleAsn1ASN1UniversalType *) nil_chk(OrgBouncycastleAsn1ASN1GeneralizedTime_TYPE)) fromByteArrayWithByteArray:(IOSByteArray *) cast_chk(obj, [IOSByteArray class])], [OrgBouncycastleAsn1ASN1GeneralizedTime class]);
    }
    @catch (JavaLangException *e) {
      
#line 86
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"encoding error in getInstance: ", [e description]));
    }
  }
  
#line 90
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"illegal object in getInstance: ", [[obj java_getClass] getName]));
}


#line 102
OrgBouncycastleAsn1ASN1GeneralizedTime *OrgBouncycastleAsn1ASN1GeneralizedTime_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *taggedObject, jboolean explicit_) {
  OrgBouncycastleAsn1ASN1GeneralizedTime_initialize();
  return (OrgBouncycastleAsn1ASN1GeneralizedTime *) cast_chk([((OrgBouncycastleAsn1ASN1UniversalType *) nil_chk(OrgBouncycastleAsn1ASN1GeneralizedTime_TYPE)) getContextInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:taggedObject withBoolean:explicit_], [OrgBouncycastleAsn1ASN1GeneralizedTime class]);
}


#line 118
void OrgBouncycastleAsn1ASN1GeneralizedTime_initWithNSString_(OrgBouncycastleAsn1ASN1GeneralizedTime *self, NSString *time) {
  OrgBouncycastleAsn1ASN1Primitive_init(self);
  
#line 121
  self->contents_ = OrgBouncycastleUtilStrings_toByteArrayWithNSString_(time);
  @try {
    
#line 124
    (void) [self getDate];
  }
  @catch (JavaTextParseException *e) {
    
#line 128
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid date string: ", [e getMessage]));
  }
}


#line 118
OrgBouncycastleAsn1ASN1GeneralizedTime *new_OrgBouncycastleAsn1ASN1GeneralizedTime_initWithNSString_(NSString *time) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1ASN1GeneralizedTime, initWithNSString_, time)
}


#line 118
OrgBouncycastleAsn1ASN1GeneralizedTime *create_OrgBouncycastleAsn1ASN1GeneralizedTime_initWithNSString_(NSString *time) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1ASN1GeneralizedTime, initWithNSString_, time)
}


#line 137
void OrgBouncycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_(OrgBouncycastleAsn1ASN1GeneralizedTime *self, JavaUtilDate *time) {
  OrgBouncycastleAsn1ASN1Primitive_init(self);
  
#line 140
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"yyyyMMddHHmmss'Z'", JreLoadStatic(OrgBouncycastleAsn1DateUtil, EN_Locale));
  
#line 142
  [dateF setTimeZoneWithJavaUtilTimeZone:new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z")];
  
#line 144
  self->contents_ = OrgBouncycastleUtilStrings_toByteArrayWithNSString_([dateF formatWithJavaUtilDate:time]);
}


#line 137
OrgBouncycastleAsn1ASN1GeneralizedTime *new_OrgBouncycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_(JavaUtilDate *time) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1ASN1GeneralizedTime, initWithJavaUtilDate_, time)
}


#line 137
OrgBouncycastleAsn1ASN1GeneralizedTime *create_OrgBouncycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_(JavaUtilDate *time) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1ASN1GeneralizedTime, initWithJavaUtilDate_, time)
}


#line 154
void OrgBouncycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_withJavaUtilLocale_(OrgBouncycastleAsn1ASN1GeneralizedTime *self, JavaUtilDate *time, JavaUtilLocale *locale) {
  OrgBouncycastleAsn1ASN1Primitive_init(self);
  
#line 158
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"yyyyMMddHHmmss'Z'", locale);
  
#line 160
  [dateF setTimeZoneWithJavaUtilTimeZone:new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z")];
  
#line 162
  self->contents_ = OrgBouncycastleUtilStrings_toByteArrayWithNSString_([dateF formatWithJavaUtilDate:time]);
}


#line 154
OrgBouncycastleAsn1ASN1GeneralizedTime *new_OrgBouncycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1ASN1GeneralizedTime, initWithJavaUtilDate_withJavaUtilLocale_, time, locale)
}


#line 154
OrgBouncycastleAsn1ASN1GeneralizedTime *create_OrgBouncycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1ASN1GeneralizedTime, initWithJavaUtilDate_withJavaUtilLocale_, time, locale)
}


#line 165
void OrgBouncycastleAsn1ASN1GeneralizedTime_initWithByteArray_(OrgBouncycastleAsn1ASN1GeneralizedTime *self, IOSByteArray *bytes) {
  OrgBouncycastleAsn1ASN1Primitive_init(self);
  
#line 168
  if (((IOSByteArray *) nil_chk(bytes))->size_ < 4) {
    
#line 170
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"GeneralizedTime string too short");
  }
  self->contents_ = bytes;
  
#line 174
  if ((!OrgBouncycastleAsn1ASN1GeneralizedTime_isDigitWithInt_(self, 0) || !OrgBouncycastleAsn1ASN1GeneralizedTime_isDigitWithInt_(self, 1) || !OrgBouncycastleAsn1ASN1GeneralizedTime_isDigitWithInt_(self, 2) || !OrgBouncycastleAsn1ASN1GeneralizedTime_isDigitWithInt_(self, 3))) {
    
#line 176
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"illegal characters in GeneralizedTime string");
  }
}


#line 165
OrgBouncycastleAsn1ASN1GeneralizedTime *new_OrgBouncycastleAsn1ASN1GeneralizedTime_initWithByteArray_(IOSByteArray *bytes) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1ASN1GeneralizedTime, initWithByteArray_, bytes)
}


#line 165
OrgBouncycastleAsn1ASN1GeneralizedTime *create_OrgBouncycastleAsn1ASN1GeneralizedTime_initWithByteArray_(IOSByteArray *bytes) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1ASN1GeneralizedTime, initWithByteArray_, bytes)
}


#line 248
NSString *OrgBouncycastleAsn1ASN1GeneralizedTime_calculateGMTOffsetWithNSString_(OrgBouncycastleAsn1ASN1GeneralizedTime *self, NSString *stime) {
  
#line 250
  NSString *sign = @"+";
  JavaUtilTimeZone *timeZone = JavaUtilTimeZone_getDefault();
  jint offset = [((JavaUtilTimeZone *) nil_chk(timeZone)) getRawOffset];
  if (offset < 0) {
    
#line 255
    sign = @"-";
    offset = -offset;
  }
  jint hours = JreIntDiv(offset, (60 * 60 * 1000));
  jint minutes = JreIntDiv((offset - hours * 60 * 60 * 1000), (60 * 1000));
  
#line 261
  @try {
    
#line 263
    if ([timeZone useDaylightTime]) {
      
#line 265
      if ([self hasFractionalSeconds]) {
        
#line 267
        stime = OrgBouncycastleAsn1ASN1GeneralizedTime_pruneFractionalSecondsWithNSString_(self, stime);
      }
      JavaTextSimpleDateFormat *dateF = OrgBouncycastleAsn1ASN1GeneralizedTime_calculateGMTDateFormat(self);
      if ([timeZone inDaylightTimeWithJavaUtilDate:
#line 271
      [((JavaTextSimpleDateFormat *) nil_chk(dateF)) parseWithNSString:JreStrcat("$$$$C$", stime, @"GMT", sign, OrgBouncycastleAsn1ASN1GeneralizedTime_convertWithInt_(self, hours), ':', OrgBouncycastleAsn1ASN1GeneralizedTime_convertWithInt_(self, minutes))]]) {
        
#line 273
        hours += [@"+" isEqual:sign] ? 1 : -1;
      }
    }
  }
  @catch (JavaTextParseException *e) {
  }
  
#line 282
  return JreStrcat("$$$C$", @"GMT", sign, OrgBouncycastleAsn1ASN1GeneralizedTime_convertWithInt_(self, hours), ':', OrgBouncycastleAsn1ASN1GeneralizedTime_convertWithInt_(self, minutes));
}


#line 285
JavaTextSimpleDateFormat *OrgBouncycastleAsn1ASN1GeneralizedTime_calculateGMTDateFormat(OrgBouncycastleAsn1ASN1GeneralizedTime *self) {
  
#line 287
  JavaTextSimpleDateFormat *dateF;
  
#line 289
  if ([self hasFractionalSeconds]) {
    
#line 291
    dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmss.SSSz");
  }
  else if ([self hasSeconds]) {
    
#line 295
    dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmssz");
  }
  else if ([self hasMinutes]) {
    
#line 299
    dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmz");
  }
  else {
    
#line 303
    dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHz");
  }
  
#line 306
  [dateF setTimeZoneWithJavaUtilTimeZone:new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z")];
  return dateF;
}


#line 310
NSString *OrgBouncycastleAsn1ASN1GeneralizedTime_pruneFractionalSecondsWithNSString_(OrgBouncycastleAsn1ASN1GeneralizedTime *self, NSString *origTime) {
  
#line 313
  NSString *frac = [((NSString *) nil_chk(origTime)) java_substring:14];
  jint index;
  for (index = 1; index < [((NSString *) nil_chk(frac)) java_length]; index++) {
    
#line 317
    jchar ch = [frac charAtWithInt:index];
    if ((('0' > ch) || (ch > '9'))) {
      
#line 320
      break;
    }
  }
  
#line 324
  if (index - 1 > 3) {
    
#line 326
    frac = JreStrcat("$$", [frac java_substring:0 endIndex:4], [frac java_substring:index]);
    origTime = JreStrcat("$$", [origTime java_substring:0 endIndex:14], frac);
  }
  else if (index - 1 == 1) {
    
#line 331
    frac = JreStrcat("$$$", [frac java_substring:0 endIndex:index], @"00", [frac java_substring:index]);
    origTime = JreStrcat("$$", [origTime java_substring:0 endIndex:14], frac);
  }
  else if (index - 1 == 2) {
    
#line 336
    frac = JreStrcat("$C$", [frac java_substring:0 endIndex:index], '0', [frac java_substring:index]);
    origTime = JreStrcat("$$", [origTime java_substring:0 endIndex:14], frac);
  }
  
#line 340
  return origTime;
}


#line 343
NSString *OrgBouncycastleAsn1ASN1GeneralizedTime_convertWithInt_(OrgBouncycastleAsn1ASN1GeneralizedTime *self, jint time) {
  
#line 345
  if (time < 10) {
    
#line 347
    return JreStrcat("CI", '0', time);
  }
  
#line 350
  return JavaLangInteger_toStringWithInt_(time);
}


#line 438
jboolean OrgBouncycastleAsn1ASN1GeneralizedTime_isDigitWithInt_(OrgBouncycastleAsn1ASN1GeneralizedTime *self, jint pos) {
  
#line 440
  return ((IOSByteArray *) nil_chk(self->contents_))->size_ > pos && IOSByteArray_Get(self->contents_, pos) >= '0' && IOSByteArray_Get(self->contents_, pos) <= '9';
}


#line 490
OrgBouncycastleAsn1ASN1GeneralizedTime *OrgBouncycastleAsn1ASN1GeneralizedTime_createPrimitiveWithByteArray_(IOSByteArray *contents) {
  OrgBouncycastleAsn1ASN1GeneralizedTime_initialize();
  return new_OrgBouncycastleAsn1ASN1GeneralizedTime_initWithByteArray_(contents);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1ASN1GeneralizedTime)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1GeneralizedTime.java"


#line 48
@implementation OrgBouncycastleAsn1ASN1GeneralizedTime_1


#line 48
- (instancetype)initWithIOSClass:(IOSClass *)javaClass
                         withInt:(jint)tagNumber {
  OrgBouncycastleAsn1ASN1GeneralizedTime_1_initWithIOSClass_withInt_(self, javaClass, tagNumber);
  return self;
}


#line 49
- (OrgBouncycastleAsn1ASN1Primitive *)fromImplicitPrimitiveWithOrgBouncycastleAsn1DEROctetString:(OrgBouncycastleAsn1DEROctetString *)octetString {
  
#line 52
  return OrgBouncycastleAsn1ASN1GeneralizedTime_createPrimitiveWithByteArray_([((OrgBouncycastleAsn1DEROctetString *) nil_chk(octetString)) getOctets]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:withInt:);
  methods[1].selector = @selector(fromImplicitPrimitiveWithOrgBouncycastleAsn1DEROctetString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIOSClass;I", "fromImplicitPrimitive", "LOrgBouncycastleAsn1DEROctetString;", "LOrgBouncycastleAsn1ASN1GeneralizedTime;" };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1ASN1GeneralizedTime_1 = { "", "org.bouncycastle.asn1", ptrTable, methods, NULL, 7, 0x8000, 2, 0, 3, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1ASN1GeneralizedTime_1;
}

@end


#line 48
void OrgBouncycastleAsn1ASN1GeneralizedTime_1_initWithIOSClass_withInt_(OrgBouncycastleAsn1ASN1GeneralizedTime_1 *self, IOSClass *javaClass, jint tagNumber) {
  OrgBouncycastleAsn1ASN1UniversalType_initPackagePrivateWithIOSClass_withInt_(self,
#line 48
  javaClass, tagNumber);
}


#line 48
OrgBouncycastleAsn1ASN1GeneralizedTime_1 *new_OrgBouncycastleAsn1ASN1GeneralizedTime_1_initWithIOSClass_withInt_(IOSClass *javaClass, jint tagNumber) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1ASN1GeneralizedTime_1, initWithIOSClass_withInt_, javaClass, tagNumber)
}


#line 48
OrgBouncycastleAsn1ASN1GeneralizedTime_1 *create_OrgBouncycastleAsn1ASN1GeneralizedTime_1_initWithIOSClass_withInt_(IOSClass *javaClass, jint tagNumber) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1ASN1GeneralizedTime_1, initWithIOSClass_withInt_, javaClass, tagNumber)
}
