//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/DLSequence.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1DLSequence")
#ifdef RESTRICT_OrgBouncycastleAsn1DLSequence
#define INCLUDE_ALL_OrgBouncycastleAsn1DLSequence 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1DLSequence 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1DLSequence

#if !defined (OrgBouncycastleAsn1DLSequence_) && (INCLUDE_ALL_OrgBouncycastleAsn1DLSequence || defined(INCLUDE_OrgBouncycastleAsn1DLSequence))
#define OrgBouncycastleAsn1DLSequence_

#define RESTRICT_OrgBouncycastleAsn1ASN1Sequence 1
#define INCLUDE_OrgBouncycastleAsn1ASN1Sequence 1
#include "org/bouncycastle/asn1/ASN1Sequence.h"

@class IOSObjectArray;
@class OrgBouncycastleAsn1ASN1BitString;
@class OrgBouncycastleAsn1ASN1EncodableVector;
@class OrgBouncycastleAsn1ASN1External;
@class OrgBouncycastleAsn1ASN1OctetString;
@class OrgBouncycastleAsn1ASN1OutputStream;
@class OrgBouncycastleAsn1ASN1Primitive;
@class OrgBouncycastleAsn1ASN1Set;
@protocol OrgBouncycastleAsn1ASN1Encodable;

/*!
 @brief The DLSequence encodes a SEQUENCE using definite length form.
 */
@interface OrgBouncycastleAsn1DLSequence : OrgBouncycastleAsn1ASN1Sequence

#pragma mark Public

/*!
 @brief Create an empty sequence
 */
- (instancetype)init;

/*!
 @brief create a sequence containing one object
 @param element the object to go in the sequence.
 */
- (instancetype)initWithOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)element;

/*!
 @brief create a sequence containing an array of objects.
 @param elements the array of objects to make up the sequence.
 */
- (instancetype)initWithOrgBouncycastleAsn1ASN1EncodableArray:(IOSObjectArray *)elements;

/*!
 @brief create a sequence containing a vector of objects.
 @param elementVector the vector of objects to make up the sequence.
 */
- (instancetype)initWithOrgBouncycastleAsn1ASN1EncodableVector:(OrgBouncycastleAsn1ASN1EncodableVector *)elementVector;

#pragma mark Package-Private

- (instancetype)initWithOrgBouncycastleAsn1ASN1EncodableArray:(IOSObjectArray *)elements
                                                  withBoolean:(jboolean)clone;

/*!
 @brief A note on the implementation:
 <p>
  As DL requires the constructed, definite-length model to
  be used for structured types, this varies slightly from the
  ASN.1 descriptions given.
 Rather than just outputting SEQUENCE,
  we also have to specify CONSTRUCTED, and the objects length.
 */
- (void)encodeWithOrgBouncycastleAsn1ASN1OutputStream:(OrgBouncycastleAsn1ASN1OutputStream *)outArg
                                          withBoolean:(jboolean)withTag;

- (jint)encodedLengthWithBoolean:(jboolean)withTag;

- (OrgBouncycastleAsn1ASN1BitString *)toASN1BitString;

- (OrgBouncycastleAsn1ASN1External *)toASN1External;

- (OrgBouncycastleAsn1ASN1OctetString *)toASN1OctetString;

- (OrgBouncycastleAsn1ASN1Set *)toASN1Set;

- (OrgBouncycastleAsn1ASN1Primitive *)toDLObject;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleAsn1DLSequence)

FOUNDATION_EXPORT void OrgBouncycastleAsn1DLSequence_init(OrgBouncycastleAsn1DLSequence *self);

FOUNDATION_EXPORT OrgBouncycastleAsn1DLSequence *new_OrgBouncycastleAsn1DLSequence_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1DLSequence *create_OrgBouncycastleAsn1DLSequence_init(void);

FOUNDATION_EXPORT void OrgBouncycastleAsn1DLSequence_initWithOrgBouncycastleAsn1ASN1Encodable_(OrgBouncycastleAsn1DLSequence *self, id<OrgBouncycastleAsn1ASN1Encodable> element);

FOUNDATION_EXPORT OrgBouncycastleAsn1DLSequence *new_OrgBouncycastleAsn1DLSequence_initWithOrgBouncycastleAsn1ASN1Encodable_(id<OrgBouncycastleAsn1ASN1Encodable> element) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1DLSequence *create_OrgBouncycastleAsn1DLSequence_initWithOrgBouncycastleAsn1ASN1Encodable_(id<OrgBouncycastleAsn1ASN1Encodable> element);

FOUNDATION_EXPORT void OrgBouncycastleAsn1DLSequence_initWithOrgBouncycastleAsn1ASN1EncodableVector_(OrgBouncycastleAsn1DLSequence *self, OrgBouncycastleAsn1ASN1EncodableVector *elementVector);

FOUNDATION_EXPORT OrgBouncycastleAsn1DLSequence *new_OrgBouncycastleAsn1DLSequence_initWithOrgBouncycastleAsn1ASN1EncodableVector_(OrgBouncycastleAsn1ASN1EncodableVector *elementVector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1DLSequence *create_OrgBouncycastleAsn1DLSequence_initWithOrgBouncycastleAsn1ASN1EncodableVector_(OrgBouncycastleAsn1ASN1EncodableVector *elementVector);

FOUNDATION_EXPORT void OrgBouncycastleAsn1DLSequence_initWithOrgBouncycastleAsn1ASN1EncodableArray_(OrgBouncycastleAsn1DLSequence *self, IOSObjectArray *elements);

FOUNDATION_EXPORT OrgBouncycastleAsn1DLSequence *new_OrgBouncycastleAsn1DLSequence_initWithOrgBouncycastleAsn1ASN1EncodableArray_(IOSObjectArray *elements) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1DLSequence *create_OrgBouncycastleAsn1DLSequence_initWithOrgBouncycastleAsn1ASN1EncodableArray_(IOSObjectArray *elements);

FOUNDATION_EXPORT void OrgBouncycastleAsn1DLSequence_initWithOrgBouncycastleAsn1ASN1EncodableArray_withBoolean_(OrgBouncycastleAsn1DLSequence *self, IOSObjectArray *elements, jboolean clone);

FOUNDATION_EXPORT OrgBouncycastleAsn1DLSequence *new_OrgBouncycastleAsn1DLSequence_initWithOrgBouncycastleAsn1ASN1EncodableArray_withBoolean_(IOSObjectArray *elements, jboolean clone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1DLSequence *create_OrgBouncycastleAsn1DLSequence_initWithOrgBouncycastleAsn1ASN1EncodableArray_withBoolean_(IOSObjectArray *elements, jboolean clone);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1DLSequence)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1DLSequence")
