//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1BitString.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "org/bouncycastle/asn1/ASN1BitString.h"
#include "org/bouncycastle/asn1/ASN1BitStringParser.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1OctetString.h"
#include "org/bouncycastle/asn1/ASN1ParsingException.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1Sequence.h"
#include "org/bouncycastle/asn1/ASN1TaggedObject.h"
#include "org/bouncycastle/asn1/ASN1UniversalType.h"
#include "org/bouncycastle/asn1/BERTags.h"
#include "org/bouncycastle/asn1/DERBitString.h"
#include "org/bouncycastle/asn1/DEROctetString.h"
#include "org/bouncycastle/asn1/DLBitString.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/asn1/ASN1BitString must be compiled with ARC (-fobjc-arc)"
#endif

inline IOSCharArray *OrgBouncycastleAsn1ASN1BitString_get_table(void);
static IOSCharArray *OrgBouncycastleAsn1ASN1BitString_table;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleAsn1ASN1BitString, table, IOSCharArray *)

@interface OrgBouncycastleAsn1ASN1BitString_1 : OrgBouncycastleAsn1ASN1UniversalType

- (instancetype)initWithIOSClass:(IOSClass *)javaClass
                         withInt:(jint)tagNumber;

- (OrgBouncycastleAsn1ASN1Primitive *)fromImplicitPrimitiveWithOrgBouncycastleAsn1DEROctetString:(OrgBouncycastleAsn1DEROctetString *)octetString;

- (OrgBouncycastleAsn1ASN1Primitive *)fromImplicitConstructedWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)sequence;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleAsn1ASN1BitString_1)

__attribute__((unused)) static void OrgBouncycastleAsn1ASN1BitString_1_initWithIOSClass_withInt_(OrgBouncycastleAsn1ASN1BitString_1 *self, IOSClass *javaClass, jint tagNumber);

__attribute__((unused)) static OrgBouncycastleAsn1ASN1BitString_1 *new_OrgBouncycastleAsn1ASN1BitString_1_initWithIOSClass_withInt_(IOSClass *javaClass, jint tagNumber) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleAsn1ASN1BitString_1 *create_OrgBouncycastleAsn1ASN1BitString_1_initWithIOSClass_withInt_(IOSClass *javaClass, jint tagNumber);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1BitString.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleAsn1ASN1BitString)

OrgBouncycastleAsn1ASN1UniversalType *OrgBouncycastleAsn1ASN1BitString_TYPE;


#line 12
@implementation OrgBouncycastleAsn1ASN1BitString


#line 31
+ (OrgBouncycastleAsn1ASN1BitString *)getInstanceWithId:(id)obj {
  return OrgBouncycastleAsn1ASN1BitString_getInstanceWithId_(obj);
}


#line 61
+ (OrgBouncycastleAsn1ASN1BitString *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)taggedObject
                                                                             withBoolean:(jboolean)explicit_ {
  return OrgBouncycastleAsn1ASN1BitString_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(taggedObject, explicit_);
}


#line 73
+ (jint)getPadBitsWithInt:(jint)bitString {
  return OrgBouncycastleAsn1ASN1BitString_getPadBitsWithInt_(bitString);
}


#line 118
+ (IOSByteArray *)getBytesWithInt:(jint)bitString {
  return OrgBouncycastleAsn1ASN1BitString_getBytesWithInt_(bitString);
}


#line 146
- (instancetype)initWithByte:(jbyte)data
                     withInt:(jint)padBits {
  OrgBouncycastleAsn1ASN1BitString_initWithByte_withInt_(self, data, padBits);
  return self;
}


#line 162
- (instancetype)initWithByteArray:(IOSByteArray *)data
                          withInt:(jint)padBits {
  OrgBouncycastleAsn1ASN1BitString_initWithByteArray_withInt_(self, data, padBits);
  return self;
}


#line 180
- (instancetype)initWithByteArray:(IOSByteArray *)contents
                      withBoolean:(jboolean)check {
  OrgBouncycastleAsn1ASN1BitString_initWithByteArray_withBoolean_(self, contents, check);
  return self;
}


#line 210
- (JavaIoInputStream *)getBitStream {
  
#line 213
  return new_JavaIoByteArrayInputStream_initWithByteArray_withInt_withInt_(contents_, 1, ((IOSByteArray *) nil_chk(contents_))->size_ - 1);
}

- (JavaIoInputStream *)getOctetStream {
  
#line 219
  jint padBits = IOSByteArray_Get(nil_chk(contents_), 0) & (jint) 0xFF;
  if (0 != padBits) {
    
#line 222
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"expected octet-aligned bitstring, but found padBits: ", padBits));
  }
  
#line 225
  return [self getBitStream];
}


#line 228
- (id<OrgBouncycastleAsn1ASN1BitStringParser>)parser {
  
#line 230
  return self;
}


#line 238
- (NSString *)getString {
  
#line 241
  IOSByteArray *string;
  @try {
    
#line 244
    string = [self getEncoded];
  }
  @catch (JavaIoIOException *e) {
    
#line 248
    @throw new_OrgBouncycastleAsn1ASN1ParsingException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Internal error encoding BitString: ", [e getMessage]), e);
  }
  
#line 251
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_initWithInt_(1 + ((IOSByteArray *) nil_chk(string))->size_ * 2);
  (void) [buf appendWithChar:'#'];
  {
    IOSByteArray *a__ = string;
    jbyte const *b__ = a__->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte b = *b__++;
      
#line 255
      (void) [buf appendWithChar:IOSCharArray_Get(nil_chk(OrgBouncycastleAsn1ASN1BitString_table), (JreURShift32(b, 4)) & (jint) 0xf)];
      (void) [buf appendWithChar:IOSCharArray_Get(OrgBouncycastleAsn1ASN1BitString_table, b & (jint) 0xf)];
    }
  }
  return [buf description];
}


#line 265
- (jint)intValue {
  
#line 267
  jint value = 0;
  jint end = JavaLangMath_minWithInt_withInt_(5, ((IOSByteArray *) nil_chk(contents_))->size_ - 1);
  for (jint i = 1; i < end; ++i) {
    
#line 271
    value |= JreLShift32((IOSByteArray_Get(contents_, i) & (jint) 0xFF), 8 * (i - 1));
  }
  if (1 <= end && end < 5) {
    
#line 275
    jint padBits = IOSByteArray_Get(contents_, 0) & (jint) 0xFF;
    jbyte der = (jbyte) (IOSByteArray_Get(contents_, end) & (JreLShift32((jint) 0xFF, padBits)));
    value |= JreLShift32((der & (jint) 0xFF), 8 * (end - 1));
  }
  return value;
}


#line 289
- (IOSByteArray *)getOctets {
  
#line 291
  if (IOSByteArray_Get(nil_chk(contents_), 0) != 0) {
    
#line 293
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"attempt to get non-octet aligned data from BIT STRING");
  }
  
#line 296
  return OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(contents_, 1, contents_->size_);
}


#line 299
- (IOSByteArray *)getBytes {
  
#line 301
  if (((IOSByteArray *) nil_chk(contents_))->size_ == 1) {
    
#line 303
    return JreLoadStatic(OrgBouncycastleAsn1ASN1OctetString, EMPTY_OCTETS);
  }
  
#line 306
  jint padBits = IOSByteArray_Get(contents_, 0) & (jint) 0xFF;
  IOSByteArray *rv = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(contents_, 1, contents_->size_);
  
#line 309
  *IOSByteArray_GetRef(rv, ((IOSByteArray *) nil_chk(rv))->size_ - 1) &= (jbyte) (JreLShift32((jint) 0xFF, padBits));
  return rv;
}


#line 313
- (jint)getPadBits {
  
#line 316
  return IOSByteArray_Get(nil_chk(contents_), 0) & (jint) 0xFF;
}

- (NSString *)description {
  
#line 322
  return [self getString];
}

- (NSUInteger)hash {
  
#line 328
  if (((IOSByteArray *) nil_chk(contents_))->size_ < 2) {
    
#line 330
    return 1;
  }
  
#line 333
  jint padBits = IOSByteArray_Get(contents_, 0) & (jint) 0xFF;
  jint last = contents_->size_ - 1;
  
#line 336
  jbyte lastOctetDER = (jbyte) (IOSByteArray_Get(contents_, last) & (JreLShift32((jint) 0xFF, padBits)));
  
#line 338
  jint hc = OrgBouncycastleUtilArrays_hashCodeWithByteArray_withInt_withInt_(contents_, 0, last);
  hc *= 257;
  hc ^= lastOctetDER;
  return hc;
}


#line 344
- (jboolean)asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:(OrgBouncycastleAsn1ASN1Primitive *)other {
  
#line 347
  if (!([other isKindOfClass:[OrgBouncycastleAsn1ASN1BitString class]])) {
    
#line 349
    return false;
  }
  
#line 352
  OrgBouncycastleAsn1ASN1BitString *that = (OrgBouncycastleAsn1ASN1BitString *) cast_chk(other, [OrgBouncycastleAsn1ASN1BitString class]);
  IOSByteArray *thisContents = contents_;
  
#line 353
  IOSByteArray *thatContents = ((OrgBouncycastleAsn1ASN1BitString *) nil_chk(that))->contents_;
  
#line 355
  jint length = ((IOSByteArray *) nil_chk(thisContents))->size_;
  if (((IOSByteArray *) nil_chk(thatContents))->size_ != length) {
    
#line 358
    return false;
  }
  if (length == 1) {
    
#line 362
    return true;
  }
  
#line 365
  jint last = length - 1;
  for (jint i = 0; i < last; ++i) {
    
#line 368
    if (IOSByteArray_Get(thisContents, i) != IOSByteArray_Get(thatContents, i)) {
      
#line 370
      return false;
    }
  }
  
#line 374
  jint padBits = IOSByteArray_Get(thisContents, 0) & (jint) 0xFF;
  jbyte thisLastOctetDER = (jbyte) (IOSByteArray_Get(thisContents, last) & (JreLShift32((jint) 0xFF, padBits)));
  jbyte thatLastOctetDER = (jbyte) (IOSByteArray_Get(thatContents, last) & (JreLShift32((jint) 0xFF, padBits)));
  
#line 378
  return thisLastOctetDER == thatLastOctetDER;
}


#line 381
- (OrgBouncycastleAsn1ASN1Primitive *)getLoadedObject {
  
#line 384
  return [self toASN1Primitive];
}

- (OrgBouncycastleAsn1ASN1Primitive *)toDERObject {
  
#line 390
  return new_OrgBouncycastleAsn1DERBitString_initWithByteArray_withBoolean_(contents_, false);
}

- (OrgBouncycastleAsn1ASN1Primitive *)toDLObject {
  
#line 396
  return new_OrgBouncycastleAsn1DLBitString_initWithByteArray_withBoolean_(contents_, false);
}

+ (OrgBouncycastleAsn1ASN1BitString *)createPrimitiveWithByteArray:(IOSByteArray *)contents {
  return OrgBouncycastleAsn1ASN1BitString_createPrimitiveWithByteArray_(contents);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgBouncycastleAsn1ASN1BitString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1BitString;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "I", 0xc, 3, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0xc, 5, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 8, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, 9, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, 9, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1BitStringParser;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1BitString;", 0x8, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithId:);
  methods[1].selector = @selector(getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:withBoolean:);
  methods[2].selector = @selector(getPadBitsWithInt:);
  methods[3].selector = @selector(getBytesWithInt:);
  methods[4].selector = @selector(initWithByte:withInt:);
  methods[5].selector = @selector(initWithByteArray:withInt:);
  methods[6].selector = @selector(initWithByteArray:withBoolean:);
  methods[7].selector = @selector(getBitStream);
  methods[8].selector = @selector(getOctetStream);
  methods[9].selector = @selector(parser);
  methods[10].selector = @selector(getString);
  methods[11].selector = @selector(intValue);
  methods[12].selector = @selector(getOctets);
  methods[13].selector = @selector(getBytes);
  methods[14].selector = @selector(getPadBits);
  methods[15].selector = @selector(description);
  methods[16].selector = @selector(hash);
  methods[17].selector = @selector(asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:);
  methods[18].selector = @selector(getLoadedObject);
  methods[19].selector = @selector(toDERObject);
  methods[20].selector = @selector(toDLObject);
  methods[21].selector = @selector(createPrimitiveWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE", "LOrgBouncycastleAsn1ASN1UniversalType;", .constantValue.asLong = 0, 0x18, -1, 16, -1, -1 },
    { "table", "[C", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "contents_", "[B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LNSObject;", "LOrgBouncycastleAsn1ASN1TaggedObject;Z", "getPadBits", "I", "getBytes", "BI", "[BI", "[BZ", "LJavaIoIOException;", "toString", "hashCode", "asn1Equals", "LOrgBouncycastleAsn1ASN1Primitive;", "createPrimitive", "[B", &OrgBouncycastleAsn1ASN1BitString_TYPE, &OrgBouncycastleAsn1ASN1BitString_table };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1ASN1BitString = { "ASN1BitString", "org.bouncycastle.asn1", ptrTable, methods, fields, 7, 0x401, 22, 3, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1ASN1BitString;
}

+ (void)initialize {
  if (self == [OrgBouncycastleAsn1ASN1BitString class]) {
    OrgBouncycastleAsn1ASN1BitString_TYPE = new_OrgBouncycastleAsn1ASN1BitString_1_initWithIOSClass_withInt_(
#line 16
    OrgBouncycastleAsn1ASN1BitString_class_(), OrgBouncycastleAsn1BERTags_BIT_STRING);
    OrgBouncycastleAsn1ASN1BitString_table = [IOSCharArray newArrayWithChars:(jchar[]){
#line 66
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' } count:16];
      J2OBJC_SET_INITIALIZED(OrgBouncycastleAsn1ASN1BitString)
    }
  }

@end


#line 31
OrgBouncycastleAsn1ASN1BitString *OrgBouncycastleAsn1ASN1BitString_getInstanceWithId_(id obj) {
  OrgBouncycastleAsn1ASN1BitString_initialize();
  if (obj == nil || [obj isKindOfClass:[OrgBouncycastleAsn1ASN1BitString class]]) {
    
#line 35
    return (OrgBouncycastleAsn1ASN1BitString *) cast_chk(obj, [OrgBouncycastleAsn1ASN1BitString class]);
  }
  else
#line 38
  if ([OrgBouncycastleAsn1ASN1Encodable_class_() isInstance:obj]) {
    
#line 40
    OrgBouncycastleAsn1ASN1Primitive *primitive = [((id<OrgBouncycastleAsn1ASN1Encodable>) cast_check(obj, OrgBouncycastleAsn1ASN1Encodable_class_())) toASN1Primitive];
    if ([primitive isKindOfClass:[OrgBouncycastleAsn1ASN1BitString class]]) {
      
#line 43
      return (OrgBouncycastleAsn1ASN1BitString *) primitive;
    }
  }
  else if ([obj isKindOfClass:[IOSByteArray class]]) {
    
#line 48
    @try {
      
#line 50
      return (OrgBouncycastleAsn1ASN1BitString *) cast_chk([((OrgBouncycastleAsn1ASN1UniversalType *) nil_chk(OrgBouncycastleAsn1ASN1BitString_TYPE)) fromByteArrayWithByteArray:(IOSByteArray *) cast_chk(obj, [IOSByteArray class])], [OrgBouncycastleAsn1ASN1BitString class]);
    }
    @catch (JavaIoIOException *e) {
      
#line 54
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"failed to construct BIT STRING from byte[]: ", [e getMessage]));
    }
  }
  
#line 58
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"illegal object in getInstance: ", [[obj java_getClass] getName]));
}


#line 61
OrgBouncycastleAsn1ASN1BitString *OrgBouncycastleAsn1ASN1BitString_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *taggedObject, jboolean explicit_) {
  OrgBouncycastleAsn1ASN1BitString_initialize();
  return (OrgBouncycastleAsn1ASN1BitString *) cast_chk([((OrgBouncycastleAsn1ASN1UniversalType *) nil_chk(OrgBouncycastleAsn1ASN1BitString_TYPE)) getContextInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:taggedObject withBoolean:explicit_], [OrgBouncycastleAsn1ASN1BitString class]);
}


#line 73
jint OrgBouncycastleAsn1ASN1BitString_getPadBitsWithInt_(jint bitString) {
  OrgBouncycastleAsn1ASN1BitString_initialize();
  
#line 76
  jint val = 0;
  for (jint i = 3; i >= 0; i--) {
    
#line 83
    if (i != 0) {
      
#line 85
      if (JreRShift32(bitString, i * 8) != 0) {
        
#line 87
        val = (JreRShift32(bitString, i * 8)) & (jint) 0xFF;
        break;
      }
    }
    else
#line 90
    if (bitString != 0) {
      
#line 92
      val = bitString & (jint) 0xFF;
      break;
    }
  }
  
#line 97
  if (val == 0) {
    
#line 99
    return 0;
  }
  
#line 103
  jint bits = 1;
  
#line 105
  while (((JreLShiftAssignInt(&val, 1)) & (jint) 0xFF) != 0) {
    
#line 107
    bits++;
  }
  
#line 110
  return 8 - bits;
}


#line 118
IOSByteArray *OrgBouncycastleAsn1ASN1BitString_getBytesWithInt_(jint bitString) {
  OrgBouncycastleAsn1ASN1BitString_initialize();
  if (bitString == 0) {
    
#line 122
    return [IOSByteArray newArrayWithLength:0];
  }
  
#line 125
  jint bytes = 4;
  for (jint i = 3; i >= 1; i--) {
    
#line 128
    if ((bitString & (JreLShift32((jint) 0xFF, i * 8))) != 0) {
      
#line 130
      break;
    }
    bytes--;
  }
  
#line 135
  IOSByteArray *result = [IOSByteArray newArrayWithLength:bytes];
  for (jint i = 0; i < bytes; i++) {
    
#line 138
    *IOSByteArray_GetRef(result, i) = (jbyte) ((JreRShift32(bitString, i * 8)) & (jint) 0xFF);
  }
  
#line 141
  return result;
}


#line 146
void OrgBouncycastleAsn1ASN1BitString_initWithByte_withInt_(OrgBouncycastleAsn1ASN1BitString *self, jbyte data, jint padBits) {
  OrgBouncycastleAsn1ASN1Primitive_init(self);
  if (padBits > 7 || padBits < 0) {
    
#line 150
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"pad bits cannot be greater than 7 or less than 0");
  }
  
#line 153
  self->contents_ = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) padBits, data } count:2];
}


#line 162
void OrgBouncycastleAsn1ASN1BitString_initWithByteArray_withInt_(OrgBouncycastleAsn1ASN1BitString *self, IOSByteArray *data, jint padBits) {
  OrgBouncycastleAsn1ASN1Primitive_init(self);
  if (data == nil) {
    
#line 166
    @throw new_JavaLangNullPointerException_initWithNSString_(@"'data' cannot be null");
  }
  if (data->size_ == 0 && padBits != 0) {
    
#line 170
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"zero length data with non-zero pad bits");
  }
  if (padBits > 7 || padBits < 0) {
    
#line 174
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"pad bits cannot be greater than 7 or less than 0");
  }
  
#line 177
  self->contents_ = OrgBouncycastleUtilArrays_prependWithByteArray_withByte_(data, (jbyte) padBits);
}


#line 180
void OrgBouncycastleAsn1ASN1BitString_initWithByteArray_withBoolean_(OrgBouncycastleAsn1ASN1BitString *self, IOSByteArray *contents, jboolean check) {
  OrgBouncycastleAsn1ASN1Primitive_init(self);
  if (check) {
    
#line 184
    if (nil == contents) {
      
#line 186
      @throw new_JavaLangNullPointerException_initWithNSString_(@"'contents' cannot be null");
    }
    if (contents->size_ < 1) {
      
#line 190
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'contents' cannot be empty");
    }
    
#line 193
    jint padBits = IOSByteArray_Get(contents, 0) & (jint) 0xFF;
    if (padBits > 0) {
      
#line 196
      if (contents->size_ < 2) {
        
#line 198
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"zero length data with non-zero pad bits");
      }
      if (padBits > 7) {
        
#line 202
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"pad bits cannot be greater than 7 or less than 0");
      }
    }
  }
  
#line 207
  self->contents_ = contents;
}


#line 399
OrgBouncycastleAsn1ASN1BitString *OrgBouncycastleAsn1ASN1BitString_createPrimitiveWithByteArray_(IOSByteArray *contents) {
  OrgBouncycastleAsn1ASN1BitString_initialize();
  jint length = ((IOSByteArray *) nil_chk(contents))->size_;
  if (length < 1) {
    
#line 404
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"truncated BIT STRING detected");
  }
  
#line 407
  jint padBits = IOSByteArray_Get(contents, 0) & (jint) 0xFF;
  if (padBits > 0) {
    
#line 410
    if (padBits > 7 || length < 2) {
      
#line 412
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid pad bits detected");
    }
    
#line 415
    jbyte finalOctet = IOSByteArray_Get(contents, length - 1);
    if (finalOctet != (jbyte) (finalOctet & (JreLShift32((jint) 0xFF, padBits)))) {
      
#line 418
      return new_OrgBouncycastleAsn1DLBitString_initWithByteArray_withBoolean_(contents, false);
    }
  }
  
#line 422
  return new_OrgBouncycastleAsn1DERBitString_initWithByteArray_withBoolean_(contents, false);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1ASN1BitString)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1BitString.java"


#line 17
@implementation OrgBouncycastleAsn1ASN1BitString_1


#line 17
- (instancetype)initWithIOSClass:(IOSClass *)javaClass
                         withInt:(jint)tagNumber {
  OrgBouncycastleAsn1ASN1BitString_1_initWithIOSClass_withInt_(self, javaClass, tagNumber);
  return self;
}


#line 18
- (OrgBouncycastleAsn1ASN1Primitive *)fromImplicitPrimitiveWithOrgBouncycastleAsn1DEROctetString:(OrgBouncycastleAsn1DEROctetString *)octetString {
  
#line 21
  return OrgBouncycastleAsn1ASN1BitString_createPrimitiveWithByteArray_([((OrgBouncycastleAsn1DEROctetString *) nil_chk(octetString)) getOctets]);
}

- (OrgBouncycastleAsn1ASN1Primitive *)fromImplicitConstructedWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)sequence {
  
#line 27
  return JreRetainedLocalValue([((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(sequence)) toASN1BitString]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x0, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:withInt:);
  methods[1].selector = @selector(fromImplicitPrimitiveWithOrgBouncycastleAsn1DEROctetString:);
  methods[2].selector = @selector(fromImplicitConstructedWithOrgBouncycastleAsn1ASN1Sequence:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIOSClass;I", "fromImplicitPrimitive", "LOrgBouncycastleAsn1DEROctetString;", "fromImplicitConstructed", "LOrgBouncycastleAsn1ASN1Sequence;", "LOrgBouncycastleAsn1ASN1BitString;" };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1ASN1BitString_1 = { "", "org.bouncycastle.asn1", ptrTable, methods, NULL, 7, 0x8000, 3, 0, 5, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1ASN1BitString_1;
}

@end


#line 17
void OrgBouncycastleAsn1ASN1BitString_1_initWithIOSClass_withInt_(OrgBouncycastleAsn1ASN1BitString_1 *self, IOSClass *javaClass, jint tagNumber) {
  OrgBouncycastleAsn1ASN1UniversalType_initPackagePrivateWithIOSClass_withInt_(self,
#line 17
  javaClass, tagNumber);
}


#line 17
OrgBouncycastleAsn1ASN1BitString_1 *new_OrgBouncycastleAsn1ASN1BitString_1_initWithIOSClass_withInt_(IOSClass *javaClass, jint tagNumber) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1ASN1BitString_1, initWithIOSClass_withInt_, javaClass, tagNumber)
}


#line 17
OrgBouncycastleAsn1ASN1BitString_1 *create_OrgBouncycastleAsn1ASN1BitString_1_initWithIOSClass_withInt_(IOSClass *javaClass, jint tagNumber) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1ASN1BitString_1, initWithIOSClass_withInt_, javaClass, tagNumber)
}
