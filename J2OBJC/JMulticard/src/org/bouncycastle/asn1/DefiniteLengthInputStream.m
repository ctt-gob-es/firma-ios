//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/DefiniteLengthInputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "org/bouncycastle/asn1/DefiniteLengthInputStream.h"
#include "org/bouncycastle/asn1/LimitedInputStream.h"
#include "org/bouncycastle/util/io/Streams.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/asn1/DefiniteLengthInputStream must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleAsn1DefiniteLengthInputStream () {
 @public
  jint _originalLength_;
  jint _remaining_;
}

@end

inline IOSByteArray *OrgBouncycastleAsn1DefiniteLengthInputStream_get_EMPTY_BYTES(void);
static IOSByteArray *OrgBouncycastleAsn1DefiniteLengthInputStream_EMPTY_BYTES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleAsn1DefiniteLengthInputStream, EMPTY_BYTES, IOSByteArray *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/DefiniteLengthInputStream.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleAsn1DefiniteLengthInputStream)


#line 12
@implementation OrgBouncycastleAsn1DefiniteLengthInputStream


#line 21
- (instancetype)initPackagePrivateWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                                withInt:(jint)length
                                                withInt:(jint)limit {
  OrgBouncycastleAsn1DefiniteLengthInputStream_initPackagePrivateWithJavaIoInputStream_withInt_withInt_(self, inArg, length, limit);
  return self;
}


#line 42
- (jint)getRemaining {
  
#line 44
  return _remaining_;
}


#line 47
- (jint)read {
  
#line 51
  if (_remaining_ == 0) {
    
#line 53
    return -1;
  }
  
#line 56
  jint b = [((JavaIoInputStream *) nil_chk(_in_)) read];
  
#line 58
  if (b < 0) {
    
#line 60
    @throw new_JavaIoEOFException_initWithNSString_(JreStrcat("$I$I", @"DEF length ", _originalLength_, @" object truncated by ", _remaining_));
  }
  
#line 63
  if (--_remaining_ == 0) {
    
#line 65
    [self setParentEofDetectWithBoolean:true];
  }
  
#line 68
  return b;
}


#line 71
- (jint)readWithByteArray:(IOSByteArray *)buf
                  withInt:(jint)off
                  withInt:(jint)len {
  
#line 75
  if (_remaining_ == 0) {
    
#line 77
    return -1;
  }
  
#line 80
  jint toRead = JavaLangMath_minWithInt_withInt_(len, _remaining_);
  jint numRead = [((JavaIoInputStream *) nil_chk(_in_)) readWithByteArray:buf withInt:off withInt:toRead];
  
#line 83
  if (numRead < 0) {
    
#line 85
    @throw new_JavaIoEOFException_initWithNSString_(JreStrcat("$I$I", @"DEF length ", _originalLength_, @" object truncated by ", _remaining_));
  }
  
#line 88
  if ((_remaining_ -= numRead) == 0) {
    
#line 90
    [self setParentEofDetectWithBoolean:true];
  }
  
#line 93
  return numRead;
}


#line 96
- (void)readAllIntoByteArrayWithByteArray:(IOSByteArray *)buf {
  
#line 99
  if (_remaining_ != ((IOSByteArray *) nil_chk(buf))->size_) {
    
#line 101
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"buffer length not right for data");
  }
  
#line 104
  if (_remaining_ == 0) {
    
#line 106
    return;
  }
  
#line 110
  jint limit = [self getLimit];
  if (_remaining_ >= limit) {
    
#line 113
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I$I", @"corrupted stream - out of bounds length found: ", _remaining_, @" >= ", limit));
  }
  
#line 116
  if ((_remaining_ -= OrgBouncycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_withInt_withInt_(_in_, buf, 0, buf->size_)) != 0) {
    
#line 118
    @throw new_JavaIoEOFException_initWithNSString_(JreStrcat("$I$I", @"DEF length ", _originalLength_, @" object truncated by ", _remaining_));
  }
  [self setParentEofDetectWithBoolean:true];
}


#line 123
- (IOSByteArray *)toByteArray {
  
#line 126
  if (_remaining_ == 0) {
    
#line 128
    return OrgBouncycastleAsn1DefiniteLengthInputStream_EMPTY_BYTES;
  }
  
#line 132
  jint limit = [self getLimit];
  if (_remaining_ >= limit) {
    
#line 135
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I$I", @"corrupted stream - out of bounds length found: ", _remaining_, @" >= ", limit));
  }
  
#line 138
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:_remaining_];
  if ((_remaining_ -= OrgBouncycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_withInt_withInt_(_in_, bytes, 0, bytes->size_)) != 0) {
    
#line 141
    @throw new_JavaIoEOFException_initWithNSString_(JreStrcat("$I$I", @"DEF length ", _originalLength_, @" object truncated by ", _remaining_));
  }
  [self setParentEofDetectWithBoolean:true];
  return bytes;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, 1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithJavaIoInputStream:withInt:withInt:);
  methods[1].selector = @selector(getRemaining);
  methods[2].selector = @selector(read);
  methods[3].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(readAllIntoByteArrayWithByteArray:);
  methods[5].selector = @selector(toByteArray);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_BYTES", "[B", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "_originalLength_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_remaining_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;II", "LJavaIoIOException;", "read", "[BII", "readAllIntoByteArray", "[B", &OrgBouncycastleAsn1DefiniteLengthInputStream_EMPTY_BYTES };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1DefiniteLengthInputStream = { "DefiniteLengthInputStream", "org.bouncycastle.asn1", ptrTable, methods, fields, 7, 0x0, 6, 3, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1DefiniteLengthInputStream;
}

+ (void)initialize {
  if (self == [OrgBouncycastleAsn1DefiniteLengthInputStream class]) {
    OrgBouncycastleAsn1DefiniteLengthInputStream_EMPTY_BYTES = [IOSByteArray newArrayWithLength:
#line 15
    0];
    J2OBJC_SET_INITIALIZED(OrgBouncycastleAsn1DefiniteLengthInputStream)
  }
}

@end


#line 21
void OrgBouncycastleAsn1DefiniteLengthInputStream_initPackagePrivateWithJavaIoInputStream_withInt_withInt_(OrgBouncycastleAsn1DefiniteLengthInputStream *self, JavaIoInputStream *inArg, jint length, jint limit) {
  OrgBouncycastleAsn1LimitedInputStream_initPackagePrivateWithJavaIoInputStream_withInt_(self,
#line 26
  inArg, limit);
  
#line 28
  if (length <= 0) {
    
#line 30
    if (length < 0) {
      
#line 32
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"negative lengths not allowed");
    }
    
#line 35
    [self setParentEofDetectWithBoolean:true];
  }
  
#line 38
  self->_originalLength_ = length;
  self->_remaining_ = length;
}


#line 21
OrgBouncycastleAsn1DefiniteLengthInputStream *new_OrgBouncycastleAsn1DefiniteLengthInputStream_initPackagePrivateWithJavaIoInputStream_withInt_withInt_(JavaIoInputStream *inArg, jint length, jint limit) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1DefiniteLengthInputStream, initPackagePrivateWithJavaIoInputStream_withInt_withInt_, inArg, length, limit)
}


#line 21
OrgBouncycastleAsn1DefiniteLengthInputStream *create_OrgBouncycastleAsn1DefiniteLengthInputStream_initPackagePrivateWithJavaIoInputStream_withInt_withInt_(JavaIoInputStream *inArg, jint length, jint limit) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1DefiniteLengthInputStream, initPackagePrivateWithJavaIoInputStream_withInt_withInt_, inArg, length, limit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1DefiniteLengthInputStream)
