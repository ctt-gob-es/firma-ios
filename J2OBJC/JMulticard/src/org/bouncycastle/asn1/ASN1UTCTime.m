//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1UTCTime.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/SimpleTimeZone.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1OutputStream.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1TaggedObject.h"
#include "org/bouncycastle/asn1/ASN1UTCTime.h"
#include "org/bouncycastle/asn1/ASN1UniversalType.h"
#include "org/bouncycastle/asn1/BERTags.h"
#include "org/bouncycastle/asn1/DEROctetString.h"
#include "org/bouncycastle/asn1/DateUtil.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/Strings.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/asn1/ASN1UTCTime must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleAsn1ASN1UTCTime ()

- (jboolean)isDigitWithInt:(jint)pos;

@end

__attribute__((unused)) static jboolean OrgBouncycastleAsn1ASN1UTCTime_isDigitWithInt_(OrgBouncycastleAsn1ASN1UTCTime *self, jint pos);

@interface OrgBouncycastleAsn1ASN1UTCTime_1 : OrgBouncycastleAsn1ASN1UniversalType

- (instancetype)initWithIOSClass:(IOSClass *)javaClass
                         withInt:(jint)tagNumber;

- (OrgBouncycastleAsn1ASN1Primitive *)fromImplicitPrimitiveWithOrgBouncycastleAsn1DEROctetString:(OrgBouncycastleAsn1DEROctetString *)octetString;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleAsn1ASN1UTCTime_1)

__attribute__((unused)) static void OrgBouncycastleAsn1ASN1UTCTime_1_initWithIOSClass_withInt_(OrgBouncycastleAsn1ASN1UTCTime_1 *self, IOSClass *javaClass, jint tagNumber);

__attribute__((unused)) static OrgBouncycastleAsn1ASN1UTCTime_1 *new_OrgBouncycastleAsn1ASN1UTCTime_1_initWithIOSClass_withInt_(IOSClass *javaClass, jint tagNumber) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleAsn1ASN1UTCTime_1 *create_OrgBouncycastleAsn1ASN1UTCTime_1_initWithIOSClass_withInt_(IOSClass *javaClass, jint tagNumber);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1UTCTime.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleAsn1ASN1UTCTime)

OrgBouncycastleAsn1ASN1UniversalType *OrgBouncycastleAsn1ASN1UTCTime_TYPE;


#line 34
@implementation OrgBouncycastleAsn1ASN1UTCTime


#line 53
+ (OrgBouncycastleAsn1ASN1UTCTime *)getInstanceWithId:(id)obj {
  return OrgBouncycastleAsn1ASN1UTCTime_getInstanceWithId_(obj);
}


#line 92
+ (OrgBouncycastleAsn1ASN1UTCTime *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)taggedObject
                                                                           withBoolean:(jboolean)explicit_ {
  return OrgBouncycastleAsn1ASN1UTCTime_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(taggedObject, explicit_);
}


#line 109
- (instancetype)initWithNSString:(NSString *)time {
  OrgBouncycastleAsn1ASN1UTCTime_initWithNSString_(self, time);
  return self;
}


#line 127
- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time {
  OrgBouncycastleAsn1ASN1UTCTime_initWithJavaUtilDate_(self, time);
  return self;
}


#line 144
- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgBouncycastleAsn1ASN1UTCTime_initWithJavaUtilDate_withJavaUtilLocale_(self, time, locale);
  return self;
}


#line 155
- (instancetype)initWithByteArray:(IOSByteArray *)contents {
  OrgBouncycastleAsn1ASN1UTCTime_initWithByteArray_(self, contents);
  return self;
}


#line 175
- (JavaUtilDate *)getDate {
  
#line 178
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyMMddHHmmssz");
  
#line 180
  return OrgBouncycastleAsn1DateUtil_epochAdjustWithJavaUtilDate_([dateF parseWithNSString:[self getTime]]);
}


#line 190
- (JavaUtilDate *)getAdjustedDate {
  
#line 193
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMddHHmmssz");
  
#line 195
  [dateF setTimeZoneWithJavaUtilTimeZone:new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z")];
  
#line 197
  return OrgBouncycastleAsn1DateUtil_epochAdjustWithJavaUtilDate_([dateF parseWithNSString:[self getAdjustedTime]]);
}


#line 216
- (NSString *)getTime {
  
#line 218
  NSString *stime = OrgBouncycastleUtilStrings_fromByteArrayWithByteArray_(contents_);
  
#line 223
  if ([((NSString *) nil_chk(stime)) java_indexOf:'-'] < 0 && [stime java_indexOf:'+'] < 0) {
    
#line 225
    if ([stime java_length] == 11) {
      
#line 227
      return JreStrcat("$$", [stime java_substring:0 endIndex:10], @"00GMT+00:00");
    }
    else {
      
#line 231
      return JreStrcat("$$", [stime java_substring:0 endIndex:12], @"GMT+00:00");
    }
  }
  else {
    
#line 236
    jint index = [stime java_indexOf:'-'];
    if (index < 0) {
      
#line 239
      index = [stime java_indexOf:'+'];
    }
    NSString *d = stime;
    
#line 243
    if (index == [stime java_length] - 3) {
      
#line 245
      (void) JreStrAppendStrong(&d, "$", @"00");
    }
    
#line 248
    if (index == 10) {
      
#line 250
      return JreStrcat("$$$C$", [d java_substring:0 endIndex:10], @"00GMT", [d java_substring:10 endIndex:13], ':', [d java_substring:13 endIndex:15]);
    }
    else {
      
#line 254
      return JreStrcat("$$$C$", [d java_substring:0 endIndex:12], @"GMT", [d java_substring:12 endIndex:15], ':', [d java_substring:15 endIndex:17]);
    }
  }
}


#line 263
- (NSString *)getAdjustedTime {
  
#line 265
  NSString *d = [self getTime];
  
#line 267
  if ([((NSString *) nil_chk(d)) charAtWithInt:0] < '5') {
    
#line 269
    return JreStrcat("$$", @"20", d);
  }
  else {
    
#line 273
    return JreStrcat("$$", @"19", d);
  }
}


#line 277
- (jboolean)isDigitWithInt:(jint)pos {
  return OrgBouncycastleAsn1ASN1UTCTime_isDigitWithInt_(self, pos);
}


#line 282
- (jboolean)encodeConstructed {
  
#line 285
  return false;
}

- (jint)encodedLengthWithBoolean:(jboolean)withTag {
  
#line 291
  return OrgBouncycastleAsn1ASN1OutputStream_getLengthOfEncodingDLWithBoolean_withInt_(withTag, ((IOSByteArray *) nil_chk(contents_))->size_);
}

- (void)encodeWithOrgBouncycastleAsn1ASN1OutputStream:(OrgBouncycastleAsn1ASN1OutputStream *)outArg
                                          withBoolean:(jboolean)withTag {
  
#line 297
  [((OrgBouncycastleAsn1ASN1OutputStream *) nil_chk(outArg)) writeEncodingDLWithBoolean:withTag withInt:OrgBouncycastleAsn1BERTags_UTC_TIME withByteArray:contents_];
}


#line 300
- (jboolean)asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:(OrgBouncycastleAsn1ASN1Primitive *)o {
  
#line 304
  if (!([o isKindOfClass:[OrgBouncycastleAsn1ASN1UTCTime class]])) {
    
#line 306
    return false;
  }
  
#line 309
  return OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(contents_, ((OrgBouncycastleAsn1ASN1UTCTime *) nil_chk(((OrgBouncycastleAsn1ASN1UTCTime *) cast_chk(o, [OrgBouncycastleAsn1ASN1UTCTime class]))))->contents_);
}


#line 312
- (NSUInteger)hash {
  
#line 315
  return OrgBouncycastleUtilArrays_hashCodeWithByteArray_(contents_);
}

- (NSString *)description {
  
#line 321
  return OrgBouncycastleUtilStrings_fromByteArrayWithByteArray_(contents_);
}

+ (OrgBouncycastleAsn1ASN1UTCTime *)createPrimitiveWithByteArray:(IOSByteArray *)contents {
  return OrgBouncycastleAsn1ASN1UTCTime_createPrimitiveWithByteArray_(contents);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgBouncycastleAsn1ASN1UTCTime;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1UTCTime;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 13, 14, -1, -1, -1 },
    { NULL, "Z", 0x0, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1UTCTime;", 0x8, 19, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithId:);
  methods[1].selector = @selector(getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:withBoolean:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithJavaUtilDate:);
  methods[4].selector = @selector(initWithJavaUtilDate:withJavaUtilLocale:);
  methods[5].selector = @selector(initWithByteArray:);
  methods[6].selector = @selector(getDate);
  methods[7].selector = @selector(getAdjustedDate);
  methods[8].selector = @selector(getTime);
  methods[9].selector = @selector(getAdjustedTime);
  methods[10].selector = @selector(isDigitWithInt:);
  methods[11].selector = @selector(encodeConstructed);
  methods[12].selector = @selector(encodedLengthWithBoolean:);
  methods[13].selector = @selector(encodeWithOrgBouncycastleAsn1ASN1OutputStream:withBoolean:);
  methods[14].selector = @selector(asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:);
  methods[15].selector = @selector(hash);
  methods[16].selector = @selector(description);
  methods[17].selector = @selector(createPrimitiveWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE", "LOrgBouncycastleAsn1ASN1UniversalType;", .constantValue.asLong = 0, 0x18, -1, 20, -1, -1 },
    { "contents_", "[B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LNSObject;", "LOrgBouncycastleAsn1ASN1TaggedObject;Z", "LNSString;", "LJavaUtilDate;", "LJavaUtilDate;LJavaUtilLocale;", "[B", "LJavaTextParseException;", "isDigit", "I", "encodedLength", "Z", "encode", "LOrgBouncycastleAsn1ASN1OutputStream;Z", "LJavaIoIOException;", "asn1Equals", "LOrgBouncycastleAsn1ASN1Primitive;", "hashCode", "toString", "createPrimitive", &OrgBouncycastleAsn1ASN1UTCTime_TYPE };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1ASN1UTCTime = { "ASN1UTCTime", "org.bouncycastle.asn1", ptrTable, methods, fields, 7, 0x1, 18, 2, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1ASN1UTCTime;
}

+ (void)initialize {
  if (self == [OrgBouncycastleAsn1ASN1UTCTime class]) {
    OrgBouncycastleAsn1ASN1UTCTime_TYPE = new_OrgBouncycastleAsn1ASN1UTCTime_1_initWithIOSClass_withInt_(
#line 37
    OrgBouncycastleAsn1ASN1UTCTime_class_(), OrgBouncycastleAsn1BERTags_UTC_TIME);
    J2OBJC_SET_INITIALIZED(OrgBouncycastleAsn1ASN1UTCTime)
  }
}

@end


#line 53
OrgBouncycastleAsn1ASN1UTCTime *OrgBouncycastleAsn1ASN1UTCTime_getInstanceWithId_(id obj) {
  OrgBouncycastleAsn1ASN1UTCTime_initialize();
  
#line 56
  if (obj == nil || [obj isKindOfClass:[OrgBouncycastleAsn1ASN1UTCTime class]]) {
    
#line 58
    return (OrgBouncycastleAsn1ASN1UTCTime *) cast_chk(obj, [OrgBouncycastleAsn1ASN1UTCTime class]);
  }
  if ([OrgBouncycastleAsn1ASN1Encodable_class_() isInstance:obj]) {
    
#line 62
    OrgBouncycastleAsn1ASN1Primitive *primitive = [((id<OrgBouncycastleAsn1ASN1Encodable>) cast_check(obj, OrgBouncycastleAsn1ASN1Encodable_class_())) toASN1Primitive];
    if ([primitive isKindOfClass:[OrgBouncycastleAsn1ASN1UTCTime class]]) {
      
#line 65
      return (OrgBouncycastleAsn1ASN1UTCTime *) primitive;
    }
  }
  if ([obj isKindOfClass:[IOSByteArray class]]) {
    
#line 70
    @try {
      
#line 72
      return (OrgBouncycastleAsn1ASN1UTCTime *) cast_chk([((OrgBouncycastleAsn1ASN1UniversalType *) nil_chk(OrgBouncycastleAsn1ASN1UTCTime_TYPE)) fromByteArrayWithByteArray:(IOSByteArray *) cast_chk(obj, [IOSByteArray class])], [OrgBouncycastleAsn1ASN1UTCTime class]);
    }
    @catch (JavaLangException *e) {
      
#line 76
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"encoding error in getInstance: ", [e description]));
    }
  }
  
#line 80
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"illegal object in getInstance: ", [[obj java_getClass] getName]));
}


#line 92
OrgBouncycastleAsn1ASN1UTCTime *OrgBouncycastleAsn1ASN1UTCTime_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *taggedObject, jboolean explicit_) {
  OrgBouncycastleAsn1ASN1UTCTime_initialize();
  return (OrgBouncycastleAsn1ASN1UTCTime *) cast_chk([((OrgBouncycastleAsn1ASN1UniversalType *) nil_chk(OrgBouncycastleAsn1ASN1UTCTime_TYPE)) getContextInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:taggedObject withBoolean:explicit_], [OrgBouncycastleAsn1ASN1UTCTime class]);
}


#line 109
void OrgBouncycastleAsn1ASN1UTCTime_initWithNSString_(OrgBouncycastleAsn1ASN1UTCTime *self, NSString *time) {
  OrgBouncycastleAsn1ASN1Primitive_init(self);
  
#line 112
  self->contents_ = OrgBouncycastleUtilStrings_toByteArrayWithNSString_(time);
  @try {
    
#line 115
    (void) [self getDate];
  }
  @catch (JavaTextParseException *e) {
    
#line 119
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid date string: ", [e getMessage]));
  }
}


#line 109
OrgBouncycastleAsn1ASN1UTCTime *new_OrgBouncycastleAsn1ASN1UTCTime_initWithNSString_(NSString *time) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1ASN1UTCTime, initWithNSString_, time)
}


#line 109
OrgBouncycastleAsn1ASN1UTCTime *create_OrgBouncycastleAsn1ASN1UTCTime_initWithNSString_(NSString *time) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1ASN1UTCTime, initWithNSString_, time)
}


#line 127
void OrgBouncycastleAsn1ASN1UTCTime_initWithJavaUtilDate_(OrgBouncycastleAsn1ASN1UTCTime *self, JavaUtilDate *time) {
  OrgBouncycastleAsn1ASN1Primitive_init(self);
  
#line 130
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"yyMMddHHmmss'Z'", JreLoadStatic(OrgBouncycastleAsn1DateUtil, EN_Locale));
  
#line 132
  [dateF setTimeZoneWithJavaUtilTimeZone:new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z")];
  
#line 134
  self->contents_ = OrgBouncycastleUtilStrings_toByteArrayWithNSString_([dateF formatWithJavaUtilDate:time]);
}


#line 127
OrgBouncycastleAsn1ASN1UTCTime *new_OrgBouncycastleAsn1ASN1UTCTime_initWithJavaUtilDate_(JavaUtilDate *time) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1ASN1UTCTime, initWithJavaUtilDate_, time)
}


#line 127
OrgBouncycastleAsn1ASN1UTCTime *create_OrgBouncycastleAsn1ASN1UTCTime_initWithJavaUtilDate_(JavaUtilDate *time) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1ASN1UTCTime, initWithJavaUtilDate_, time)
}


#line 144
void OrgBouncycastleAsn1ASN1UTCTime_initWithJavaUtilDate_withJavaUtilLocale_(OrgBouncycastleAsn1ASN1UTCTime *self, JavaUtilDate *time, JavaUtilLocale *locale) {
  OrgBouncycastleAsn1ASN1Primitive_init(self);
  
#line 148
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"yyMMddHHmmss'Z'", locale);
  
#line 150
  [dateF setTimeZoneWithJavaUtilTimeZone:new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z")];
  
#line 152
  self->contents_ = OrgBouncycastleUtilStrings_toByteArrayWithNSString_([dateF formatWithJavaUtilDate:time]);
}


#line 144
OrgBouncycastleAsn1ASN1UTCTime *new_OrgBouncycastleAsn1ASN1UTCTime_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1ASN1UTCTime, initWithJavaUtilDate_withJavaUtilLocale_, time, locale)
}


#line 144
OrgBouncycastleAsn1ASN1UTCTime *create_OrgBouncycastleAsn1ASN1UTCTime_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1ASN1UTCTime, initWithJavaUtilDate_withJavaUtilLocale_, time, locale)
}


#line 155
void OrgBouncycastleAsn1ASN1UTCTime_initWithByteArray_(OrgBouncycastleAsn1ASN1UTCTime *self, IOSByteArray *contents) {
  OrgBouncycastleAsn1ASN1Primitive_init(self);
  if (((IOSByteArray *) nil_chk(contents))->size_ < 2) {
    
#line 159
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"UTCTime string too short");
  }
  self->contents_ = contents;
  if (!(OrgBouncycastleAsn1ASN1UTCTime_isDigitWithInt_(self, 0) && OrgBouncycastleAsn1ASN1UTCTime_isDigitWithInt_(self, 1))) {
    
#line 164
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"illegal characters in UTCTime string");
  }
}


#line 155
OrgBouncycastleAsn1ASN1UTCTime *new_OrgBouncycastleAsn1ASN1UTCTime_initWithByteArray_(IOSByteArray *contents) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1ASN1UTCTime, initWithByteArray_, contents)
}


#line 155
OrgBouncycastleAsn1ASN1UTCTime *create_OrgBouncycastleAsn1ASN1UTCTime_initWithByteArray_(IOSByteArray *contents) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1ASN1UTCTime, initWithByteArray_, contents)
}


#line 277
jboolean OrgBouncycastleAsn1ASN1UTCTime_isDigitWithInt_(OrgBouncycastleAsn1ASN1UTCTime *self, jint pos) {
  
#line 279
  return ((IOSByteArray *) nil_chk(self->contents_))->size_ > pos && IOSByteArray_Get(self->contents_, pos) >= '0' && IOSByteArray_Get(self->contents_, pos) <= '9';
}


#line 324
OrgBouncycastleAsn1ASN1UTCTime *OrgBouncycastleAsn1ASN1UTCTime_createPrimitiveWithByteArray_(IOSByteArray *contents) {
  OrgBouncycastleAsn1ASN1UTCTime_initialize();
  return new_OrgBouncycastleAsn1ASN1UTCTime_initWithByteArray_(contents);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1ASN1UTCTime)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1UTCTime.java"


#line 38
@implementation OrgBouncycastleAsn1ASN1UTCTime_1


#line 38
- (instancetype)initWithIOSClass:(IOSClass *)javaClass
                         withInt:(jint)tagNumber {
  OrgBouncycastleAsn1ASN1UTCTime_1_initWithIOSClass_withInt_(self, javaClass, tagNumber);
  return self;
}


#line 39
- (OrgBouncycastleAsn1ASN1Primitive *)fromImplicitPrimitiveWithOrgBouncycastleAsn1DEROctetString:(OrgBouncycastleAsn1DEROctetString *)octetString {
  
#line 42
  return OrgBouncycastleAsn1ASN1UTCTime_createPrimitiveWithByteArray_([((OrgBouncycastleAsn1DEROctetString *) nil_chk(octetString)) getOctets]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:withInt:);
  methods[1].selector = @selector(fromImplicitPrimitiveWithOrgBouncycastleAsn1DEROctetString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LIOSClass;I", "fromImplicitPrimitive", "LOrgBouncycastleAsn1DEROctetString;", "LOrgBouncycastleAsn1ASN1UTCTime;" };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1ASN1UTCTime_1 = { "", "org.bouncycastle.asn1", ptrTable, methods, NULL, 7, 0x8000, 2, 0, 3, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1ASN1UTCTime_1;
}

@end


#line 38
void OrgBouncycastleAsn1ASN1UTCTime_1_initWithIOSClass_withInt_(OrgBouncycastleAsn1ASN1UTCTime_1 *self, IOSClass *javaClass, jint tagNumber) {
  OrgBouncycastleAsn1ASN1UniversalType_initPackagePrivateWithIOSClass_withInt_(self,
#line 38
  javaClass, tagNumber);
}


#line 38
OrgBouncycastleAsn1ASN1UTCTime_1 *new_OrgBouncycastleAsn1ASN1UTCTime_1_initWithIOSClass_withInt_(IOSClass *javaClass, jint tagNumber) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1ASN1UTCTime_1, initWithIOSClass_withInt_, javaClass, tagNumber)
}


#line 38
OrgBouncycastleAsn1ASN1UTCTime_1 *create_OrgBouncycastleAsn1ASN1UTCTime_1_initWithIOSClass_withInt_(IOSClass *javaClass, jint tagNumber) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1ASN1UTCTime_1, initWithIOSClass_withInt_, javaClass, tagNumber)
}
