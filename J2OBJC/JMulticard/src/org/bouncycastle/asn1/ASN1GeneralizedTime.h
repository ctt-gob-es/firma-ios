//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1GeneralizedTime.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1ASN1GeneralizedTime")
#ifdef RESTRICT_OrgBouncycastleAsn1ASN1GeneralizedTime
#define INCLUDE_ALL_OrgBouncycastleAsn1ASN1GeneralizedTime 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1ASN1GeneralizedTime 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1ASN1GeneralizedTime

#if !defined (OrgBouncycastleAsn1ASN1GeneralizedTime_) && (INCLUDE_ALL_OrgBouncycastleAsn1ASN1GeneralizedTime || defined(INCLUDE_OrgBouncycastleAsn1ASN1GeneralizedTime))
#define OrgBouncycastleAsn1ASN1GeneralizedTime_

#define RESTRICT_OrgBouncycastleAsn1ASN1Primitive 1
#define INCLUDE_OrgBouncycastleAsn1ASN1Primitive 1
#include "org/bouncycastle/asn1/ASN1Primitive.h"

@class IOSByteArray;
@class JavaUtilDate;
@class JavaUtilLocale;
@class OrgBouncycastleAsn1ASN1OutputStream;
@class OrgBouncycastleAsn1ASN1TaggedObject;
@class OrgBouncycastleAsn1ASN1UniversalType;

/*!
 @brief Base class representing the ASN.1 GeneralizedTime type.
 <p>
  The main difference between these and UTC time is a 4 digit year. 
 </p>
  <p>
  One second resolution date+time on UTC timezone (Z)
  with 4 digit year (valid from 0001 to 9999). 
 </p><p>
  Timestamp format is:  yyyymmddHHMMSS'Z' 
 </p><p>
  <h2>X.690</h2>
  This is what is called "restricted string",
  and it uses ASCII characters to encode digits and supplemental data. 
 <h3>11: Restrictions on BER employed by both CER and DER</h3>
  <h4>11.7 GeneralizedTime </h4>
  <p>
  <b>11.7.1</b> The encoding shall terminate with a "Z",
  as described in the ITU-T Rec. X.680 | ISO/IEC 8824-1 clause on
  GeneralizedTime. 
 </p><p>
  <b>11.7.2</b> The seconds element shall always be present. 
 </p>
  <p>
  <b>11.7.3</b> The fractional-seconds elements, if present,
  shall omit all trailing zeros; if the elements correspond to 0,
  they shall be wholly omitted, and the decimal point element also
  shall be omitted.
 */
@interface OrgBouncycastleAsn1ASN1GeneralizedTime : OrgBouncycastleAsn1ASN1Primitive {
 @public
  IOSByteArray *contents_;
}

#pragma mark Public

/*!
 @brief Base constructor from a java.util.date object
 @param time a date object representing the time of interest.
 */
- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time;

/*!
 @brief Base constructor from a java.util.date and Locale - you may need to use this if the default locale
  doesn't use a Gregorian calender so that the GeneralizedTime produced is compatible with other ASN.1 implementations.
 @param time a date object representing the time of interest.
 @param locale an appropriate Locale for producing an ASN.1 GeneralizedTime value.
 */
- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time
                  withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief The correct format for this is YYYYMMDDHHMMSS[.f]Z, or without the Z
  for local time, or Z+-HHMM on the end, for difference between local
  time and UTC time.The fractional second amount f must consist of at
  least one number with trailing zeroes removed.
 @param time the time string.
 @throw IllegalArgumentExceptionif String is an illegal format.
 */
- (instancetype)initWithNSString:(NSString *)time;

- (JavaUtilDate *)getDate;

/*!
 @brief return a Generalized Time object from a tagged object.
 @param taggedObject the tagged object holding the object we want
 @param explicit_ true if the object is meant to be explicitly tagged false                      otherwise.
 @return an ASN1GeneralizedTime instance.
 @throw IllegalArgumentExceptionif the tagged object cannot be converted.
 */
+ (OrgBouncycastleAsn1ASN1GeneralizedTime *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)taggedObject
                                                                                   withBoolean:(jboolean)explicit_;

/*!
 @brief return a generalized time from the passed in object
 @param obj an ASN1GeneralizedTime or an object that can be converted into one.
 @return an ASN1GeneralizedTime instance, or null.
 @throw IllegalArgumentExceptionif the object cannot be converted.
 */
+ (OrgBouncycastleAsn1ASN1GeneralizedTime *)getInstanceWithId:(id)obj;

/*!
 @brief return the time - always in the form of
  YYYYMMDDhhmmssGMT(+hh:mm|-hh:mm).
 <p>
  Normally in a certificate we would expect "Z" rather than "GMT",
  however adding the "GMT" means we can just use: 
 @code

      dateF = new SimpleDateFormat("yyyyMMddHHmmssz"); 
  
@endcode
  To read in the time and get a date which is compatible with our local
  time zone.
 @return a String representation of the time.
 */
- (NSString *)getTime;

/*!
 @brief Return the time.
 @return The time string as it appeared in the encoded object.
 */
- (NSString *)getTimeString;

- (NSUInteger)hash;

#pragma mark Protected

- (jboolean)hasFractionalSeconds;

- (jboolean)hasMinutes;

- (jboolean)hasSeconds;

#pragma mark Package-Private

- (instancetype)initWithByteArray:(IOSByteArray *)bytes;

- (jboolean)asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:(OrgBouncycastleAsn1ASN1Primitive *)o;

+ (OrgBouncycastleAsn1ASN1GeneralizedTime *)createPrimitiveWithByteArray:(IOSByteArray *)contents;

- (void)encodeWithOrgBouncycastleAsn1ASN1OutputStream:(OrgBouncycastleAsn1ASN1OutputStream *)outArg
                                          withBoolean:(jboolean)withTag;

- (jboolean)encodeConstructed;

- (jint)encodedLengthWithBoolean:(jboolean)withTag;

- (OrgBouncycastleAsn1ASN1Primitive *)toDERObject;

- (OrgBouncycastleAsn1ASN1Primitive *)toDLObject;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleAsn1ASN1GeneralizedTime)

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1ASN1GeneralizedTime, contents_, IOSByteArray *)

inline OrgBouncycastleAsn1ASN1UniversalType *OrgBouncycastleAsn1ASN1GeneralizedTime_get_TYPE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1UniversalType *OrgBouncycastleAsn1ASN1GeneralizedTime_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleAsn1ASN1GeneralizedTime, TYPE, OrgBouncycastleAsn1ASN1UniversalType *)

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1GeneralizedTime *OrgBouncycastleAsn1ASN1GeneralizedTime_getInstanceWithId_(id obj);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1GeneralizedTime *OrgBouncycastleAsn1ASN1GeneralizedTime_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *taggedObject, jboolean explicit_);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1GeneralizedTime_initWithNSString_(OrgBouncycastleAsn1ASN1GeneralizedTime *self, NSString *time);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1GeneralizedTime *new_OrgBouncycastleAsn1ASN1GeneralizedTime_initWithNSString_(NSString *time) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1GeneralizedTime *create_OrgBouncycastleAsn1ASN1GeneralizedTime_initWithNSString_(NSString *time);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_(OrgBouncycastleAsn1ASN1GeneralizedTime *self, JavaUtilDate *time);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1GeneralizedTime *new_OrgBouncycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_(JavaUtilDate *time) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1GeneralizedTime *create_OrgBouncycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_(JavaUtilDate *time);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_withJavaUtilLocale_(OrgBouncycastleAsn1ASN1GeneralizedTime *self, JavaUtilDate *time, JavaUtilLocale *locale);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1GeneralizedTime *new_OrgBouncycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1GeneralizedTime *create_OrgBouncycastleAsn1ASN1GeneralizedTime_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1GeneralizedTime_initWithByteArray_(OrgBouncycastleAsn1ASN1GeneralizedTime *self, IOSByteArray *bytes);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1GeneralizedTime *new_OrgBouncycastleAsn1ASN1GeneralizedTime_initWithByteArray_(IOSByteArray *bytes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1GeneralizedTime *create_OrgBouncycastleAsn1ASN1GeneralizedTime_initWithByteArray_(IOSByteArray *bytes);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1GeneralizedTime *OrgBouncycastleAsn1ASN1GeneralizedTime_createPrimitiveWithByteArray_(IOSByteArray *contents);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1ASN1GeneralizedTime)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1ASN1GeneralizedTime")
