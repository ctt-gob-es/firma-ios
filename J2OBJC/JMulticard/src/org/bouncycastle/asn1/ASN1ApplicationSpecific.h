//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1ApplicationSpecific.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1ASN1ApplicationSpecific")
#ifdef RESTRICT_OrgBouncycastleAsn1ASN1ApplicationSpecific
#define INCLUDE_ALL_OrgBouncycastleAsn1ASN1ApplicationSpecific 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1ASN1ApplicationSpecific 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1ASN1ApplicationSpecific

#if !defined (OrgBouncycastleAsn1ASN1ApplicationSpecific_) && (INCLUDE_ALL_OrgBouncycastleAsn1ASN1ApplicationSpecific || defined(INCLUDE_OrgBouncycastleAsn1ASN1ApplicationSpecific))
#define OrgBouncycastleAsn1ASN1ApplicationSpecific_

#define RESTRICT_OrgBouncycastleAsn1ASN1TaggedObject 1
#define INCLUDE_OrgBouncycastleAsn1ASN1TaggedObject 1
#include "org/bouncycastle/asn1/ASN1TaggedObject.h"

#define RESTRICT_OrgBouncycastleAsn1ASN1ApplicationSpecificParser 1
#define INCLUDE_OrgBouncycastleAsn1ASN1ApplicationSpecificParser 1
#include "org/bouncycastle/asn1/ASN1ApplicationSpecificParser.h"

@class IOSByteArray;
@class OrgBouncycastleAsn1ASN1OutputStream;
@class OrgBouncycastleAsn1ASN1Primitive;
@class OrgBouncycastleAsn1ASN1Sequence;
@protocol OrgBouncycastleAsn1ASN1Encodable;
@protocol OrgBouncycastleAsn1ASN1TaggedObjectParser;

/*!
 @brief Base class for an ASN.1 ApplicationSpecific object
 */
@interface OrgBouncycastleAsn1ASN1ApplicationSpecific : OrgBouncycastleAsn1ASN1TaggedObject < OrgBouncycastleAsn1ASN1ApplicationSpecificParser > {
 @public
  OrgBouncycastleAsn1ASN1TaggedObject *taggedObject_;
}

#pragma mark Public

/*!
 @brief Return the tag number associated with this object,
 @return the application tag number.
 */
- (jint)getApplicationTag;

/*!
 @brief Return the contents of this object as a byte[]
 @return the encoded contents of the object.
 */
- (IOSByteArray *)getContents;

/*!
 @brief Return the enclosed object assuming explicit tagging.
 @return the resulting object
 @throw IOExceptionif reconstruction fails.
 */
- (OrgBouncycastleAsn1ASN1Primitive *)getEnclosedObject;

/*!
 @brief Return an ASN1ApplicationSpecific from the passed in object, which may be a byte array, or null.
 @param obj the object to be converted.
 @return obj's representation as an ASN1ApplicationSpecific object.
 */
+ (OrgBouncycastleAsn1ASN1ApplicationSpecific *)getInstanceWithId:(id)obj;

/*!
 @brief Return the enclosed object assuming implicit tagging.
 @param tagNo the type tag that should be applied to the object's contents.
 @return the resulting object
 @throw IOExceptionif reconstruction fails.
 */
- (OrgBouncycastleAsn1ASN1Primitive *)getObjectWithInt:(jint)tagNo;

- (id<OrgBouncycastleAsn1ASN1Encodable>)getObjectParserWithInt:(jint)tag
                                                   withBoolean:(jboolean)isExplicit;

/*!
 @brief ASN1ApplicationSpecific uses an internal ASN1TaggedObject for the
  implementation, and will soon be deprecated in favour of using
  ASN1TaggedObject with a tag class of <code>BERTags.APPLICATION</code>.This method
  lets you get the internal ASN1TaggedObject so that client code can begin the
  migration.
 */
- (OrgBouncycastleAsn1ASN1TaggedObject *)getTaggedObject;

- (jboolean)hasApplicationTagWithInt:(jint)tagNo;

- (jboolean)hasContextTagWithInt:(jint)tagNo;

/*!
 @brief Return true if the object is marked as constructed, false otherwise.
 @return true if constructed, otherwise false.
 */
- (jboolean)isConstructed;

- (id<OrgBouncycastleAsn1ASN1Encodable>)parseBaseUniversalWithBoolean:(jboolean)declaredExplicit
                                                              withInt:(jint)baseTagNo;

- (id<OrgBouncycastleAsn1ASN1Encodable>)parseExplicitBaseObject;

- (id<OrgBouncycastleAsn1ASN1TaggedObjectParser>)parseExplicitBaseTagged;

- (id<OrgBouncycastleAsn1ASN1TaggedObjectParser>)parseImplicitBaseTaggedWithInt:(jint)baseTagClass
                                                                        withInt:(jint)baseTagNo;

- (id<OrgBouncycastleAsn1ASN1Encodable>)readObject;

#pragma mark Package-Private

- (instancetype)initWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)taggedObject;

- (void)encodeWithOrgBouncycastleAsn1ASN1OutputStream:(OrgBouncycastleAsn1ASN1OutputStream *)outArg
                                          withBoolean:(jboolean)withTag;

- (jboolean)encodeConstructed;

- (jint)encodedLengthWithBoolean:(jboolean)withTag;

- (NSString *)getASN1Encoding;

- (OrgBouncycastleAsn1ASN1Sequence *)rebuildConstructedWithOrgBouncycastleAsn1ASN1Primitive:(OrgBouncycastleAsn1ASN1Primitive *)primitive;

- (OrgBouncycastleAsn1ASN1TaggedObject *)replaceTagWithInt:(jint)tagClass
                                                   withInt:(jint)tagNo;

- (OrgBouncycastleAsn1ASN1Primitive *)toDERObject;

- (OrgBouncycastleAsn1ASN1Primitive *)toDLObject;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithBoolean:(jboolean)arg0
                        withInt:(jint)arg1
                        withInt:(jint)arg2
withOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)arg3 NS_UNAVAILABLE;

- (instancetype)initWithBoolean:(jboolean)arg0
                        withInt:(jint)arg1
withOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)arg2 NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0
                    withInt:(jint)arg1
                    withInt:(jint)arg2
withOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleAsn1ASN1ApplicationSpecific)

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1ASN1ApplicationSpecific, taggedObject_, OrgBouncycastleAsn1ASN1TaggedObject *)

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1ApplicationSpecific *OrgBouncycastleAsn1ASN1ApplicationSpecific_getInstanceWithId_(id obj);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1ApplicationSpecific_initWithOrgBouncycastleAsn1ASN1TaggedObject_(OrgBouncycastleAsn1ASN1ApplicationSpecific *self, OrgBouncycastleAsn1ASN1TaggedObject *taggedObject);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1ASN1ApplicationSpecific)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1ASN1ApplicationSpecific")
