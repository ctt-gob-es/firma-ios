//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/nist/NISTNamedCurves.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1NistNISTNamedCurves")
#ifdef RESTRICT_OrgBouncycastleAsn1NistNISTNamedCurves
#define INCLUDE_ALL_OrgBouncycastleAsn1NistNISTNamedCurves 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1NistNISTNamedCurves 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1NistNISTNamedCurves

#if !defined (OrgBouncycastleAsn1NistNISTNamedCurves_) && (INCLUDE_ALL_OrgBouncycastleAsn1NistNISTNamedCurves || defined(INCLUDE_OrgBouncycastleAsn1NistNISTNamedCurves))
#define OrgBouncycastleAsn1NistNISTNamedCurves_

@class JavaUtilHashtable;
@class OrgBouncycastleAsn1ASN1ObjectIdentifier;
@class OrgBouncycastleAsn1X9X9ECParameters;
@class OrgBouncycastleAsn1X9X9ECParametersHolder;
@protocol JavaUtilEnumeration;

/*!
 @brief Utility class for fetching curves using their NIST names as published in FIPS-PUB 186-3
 */
@interface OrgBouncycastleAsn1NistNISTNamedCurves : NSObject

#pragma mark Public

- (instancetype)init;

+ (OrgBouncycastleAsn1X9X9ECParameters *)getByNameWithNSString:(NSString *)name;

+ (OrgBouncycastleAsn1X9X9ECParametersHolder *)getByNameLazyWithNSString:(NSString *)name;

/*!
 @brief return the X9ECParameters object for the named curve represented by
  the passed in object identifier.Null if the curve isn't present.
 @param oid an object identifier representing a named curve, if present.
 */
+ (OrgBouncycastleAsn1X9X9ECParameters *)getByOIDWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)oid;

+ (OrgBouncycastleAsn1X9X9ECParametersHolder *)getByOIDLazyWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)oid;

/*!
 @brief return the named curve name represented by the given object identifier.
 */
+ (NSString *)getNameWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)oid;

/*!
 @brief returns an enumeration containing the name strings for curves
  contained in this structure.
 */
+ (id<JavaUtilEnumeration>)getNames;

/*!
 @brief return the object identifier signified by the passed in name.Null
  if there is no object identifier associated with name.
 @return the object identifier associated with name, if present.
 */
+ (OrgBouncycastleAsn1ASN1ObjectIdentifier *)getOIDWithNSString:(NSString *)name;

#pragma mark Package-Private

+ (void)defineCurveWithNSString:(NSString *)name
withOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)oid;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleAsn1NistNISTNamedCurves)

inline JavaUtilHashtable *OrgBouncycastleAsn1NistNISTNamedCurves_get_objIds(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilHashtable *OrgBouncycastleAsn1NistNISTNamedCurves_objIds;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleAsn1NistNISTNamedCurves, objIds, JavaUtilHashtable *)

inline JavaUtilHashtable *OrgBouncycastleAsn1NistNISTNamedCurves_get_names(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilHashtable *OrgBouncycastleAsn1NistNISTNamedCurves_names;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleAsn1NistNISTNamedCurves, names, JavaUtilHashtable *)

FOUNDATION_EXPORT void OrgBouncycastleAsn1NistNISTNamedCurves_init(OrgBouncycastleAsn1NistNISTNamedCurves *self);

FOUNDATION_EXPORT OrgBouncycastleAsn1NistNISTNamedCurves *new_OrgBouncycastleAsn1NistNISTNamedCurves_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleAsn1NistNISTNamedCurves *create_OrgBouncycastleAsn1NistNISTNamedCurves_init(void);

FOUNDATION_EXPORT void OrgBouncycastleAsn1NistNISTNamedCurves_defineCurveWithNSString_withOrgBouncycastleAsn1ASN1ObjectIdentifier_(NSString *name, OrgBouncycastleAsn1ASN1ObjectIdentifier *oid);

FOUNDATION_EXPORT OrgBouncycastleAsn1X9X9ECParameters *OrgBouncycastleAsn1NistNISTNamedCurves_getByNameWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgBouncycastleAsn1X9X9ECParametersHolder *OrgBouncycastleAsn1NistNISTNamedCurves_getByNameLazyWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgBouncycastleAsn1X9X9ECParameters *OrgBouncycastleAsn1NistNISTNamedCurves_getByOIDWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(OrgBouncycastleAsn1ASN1ObjectIdentifier *oid);

FOUNDATION_EXPORT OrgBouncycastleAsn1X9X9ECParametersHolder *OrgBouncycastleAsn1NistNISTNamedCurves_getByOIDLazyWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(OrgBouncycastleAsn1ASN1ObjectIdentifier *oid);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1ObjectIdentifier *OrgBouncycastleAsn1NistNISTNamedCurves_getOIDWithNSString_(NSString *name);

FOUNDATION_EXPORT NSString *OrgBouncycastleAsn1NistNISTNamedCurves_getNameWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(OrgBouncycastleAsn1ASN1ObjectIdentifier *oid);

FOUNDATION_EXPORT id<JavaUtilEnumeration> OrgBouncycastleAsn1NistNISTNamedCurves_getNames(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1NistNISTNamedCurves)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1NistNISTNamedCurves")
