//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x9/X9Curve.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1EncodableVector.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/ASN1Object.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1OctetString.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1Sequence.h"
#include "org/bouncycastle/asn1/DERBitString.h"
#include "org/bouncycastle/asn1/DERSequence.h"
#include "org/bouncycastle/asn1/x9/X9Curve.h"
#include "org/bouncycastle/asn1/x9/X9FieldElement.h"
#include "org/bouncycastle/asn1/x9/X9FieldID.h"
#include "org/bouncycastle/asn1/x9/X9ObjectIdentifiers.h"
#include "org/bouncycastle/math/ec/ECAlgorithms.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECFieldElement.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/asn1/x9/X9Curve must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleAsn1X9X9Curve () {
 @public
  OrgBouncycastleMathEcECCurve *curve_;
  IOSByteArray *seed_;
  OrgBouncycastleAsn1ASN1ObjectIdentifier *fieldIdentifier_;
}

- (void)setFieldIdentifier;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1X9X9Curve, curve_, OrgBouncycastleMathEcECCurve *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1X9X9Curve, seed_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1X9X9Curve, fieldIdentifier_, OrgBouncycastleAsn1ASN1ObjectIdentifier *)

__attribute__((unused)) static void OrgBouncycastleAsn1X9X9Curve_setFieldIdentifier(OrgBouncycastleAsn1X9X9Curve *self);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/x9/X9Curve.java"


#line 22
@implementation OrgBouncycastleAsn1X9X9Curve


#line 30
- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve {
  OrgBouncycastleAsn1X9X9Curve_initWithOrgBouncycastleMathEcECCurve_(self, curve);
  return self;
}


#line 36
- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve
                                       withByteArray:(IOSByteArray *)seed {
  OrgBouncycastleAsn1X9X9Curve_initWithOrgBouncycastleMathEcECCurve_withByteArray_(self, curve, seed);
  return self;
}


#line 45
- (instancetype)initWithOrgBouncycastleAsn1X9X9FieldID:(OrgBouncycastleAsn1X9X9FieldID *)fieldID
                                withJavaMathBigInteger:(JavaMathBigInteger *)order
                                withJavaMathBigInteger:(JavaMathBigInteger *)cofactor
                   withOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq {
  OrgBouncycastleAsn1X9X9Curve_initWithOrgBouncycastleAsn1X9X9FieldID_withJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleAsn1ASN1Sequence_(self, fieldID, order, cofactor, seq);
  return self;
}


#line 102
- (void)setFieldIdentifier {
  OrgBouncycastleAsn1X9X9Curve_setFieldIdentifier(self);
}


#line 118
- (OrgBouncycastleMathEcECCurve *)getCurve {
  
#line 120
  return curve_;
}


#line 123
- (IOSByteArray *)getSeed {
  
#line 125
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(seed_);
}


#line 138
- (OrgBouncycastleAsn1ASN1Primitive *)toASN1Primitive {
  
#line 141
  OrgBouncycastleAsn1ASN1EncodableVector *v = new_OrgBouncycastleAsn1ASN1EncodableVector_initWithInt_(3);
  
#line 143
  if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(fieldIdentifier_)) equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X9X9ObjectIdentifiers, prime_field)] || [((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(fieldIdentifier_)) equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X9X9ObjectIdentifiers, characteristic_two_field)]) {
    
#line 145
    [v addWithOrgBouncycastleAsn1ASN1Encodable:[new_OrgBouncycastleAsn1X9X9FieldElement_initWithOrgBouncycastleMathEcECFieldElement_([((OrgBouncycastleMathEcECCurve *) nil_chk(curve_)) getA]) toASN1Primitive]];
    [v addWithOrgBouncycastleAsn1ASN1Encodable:[new_OrgBouncycastleAsn1X9X9FieldElement_initWithOrgBouncycastleMathEcECFieldElement_([((OrgBouncycastleMathEcECCurve *) nil_chk(curve_)) getB]) toASN1Primitive]];
  }
  
#line 149
  if (seed_ != nil) {
    
#line 151
    [v addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1DERBitString_initWithByteArray_(seed_)];
  }
  
#line 154
  return new_OrgBouncycastleAsn1DERSequence_initWithOrgBouncycastleAsn1ASN1EncodableVector_(v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECCurve;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleMathEcECCurve:);
  methods[1].selector = @selector(initWithOrgBouncycastleMathEcECCurve:withByteArray:);
  methods[2].selector = @selector(initWithOrgBouncycastleAsn1X9X9FieldID:withJavaMathBigInteger:withJavaMathBigInteger:withOrgBouncycastleAsn1ASN1Sequence:);
  methods[3].selector = @selector(setFieldIdentifier);
  methods[4].selector = @selector(getCurve);
  methods[5].selector = @selector(getSeed);
  methods[6].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "curve_", "LOrgBouncycastleMathEcECCurve;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "seed_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fieldIdentifier_", "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleMathEcECCurve;", "LOrgBouncycastleMathEcECCurve;[B", "LOrgBouncycastleAsn1X9X9FieldID;LJavaMathBigInteger;LJavaMathBigInteger;LOrgBouncycastleAsn1ASN1Sequence;" };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1X9X9Curve = { "X9Curve", "org.bouncycastle.asn1.x9", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1X9X9Curve;
}

@end


#line 30
void OrgBouncycastleAsn1X9X9Curve_initWithOrgBouncycastleMathEcECCurve_(OrgBouncycastleAsn1X9X9Curve *self, OrgBouncycastleMathEcECCurve *curve) {
  OrgBouncycastleAsn1X9X9Curve_initWithOrgBouncycastleMathEcECCurve_withByteArray_(self,
#line 33
  curve, nil);
}


#line 30
OrgBouncycastleAsn1X9X9Curve *new_OrgBouncycastleAsn1X9X9Curve_initWithOrgBouncycastleMathEcECCurve_(OrgBouncycastleMathEcECCurve *curve) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1X9X9Curve, initWithOrgBouncycastleMathEcECCurve_, curve)
}


#line 30
OrgBouncycastleAsn1X9X9Curve *create_OrgBouncycastleAsn1X9X9Curve_initWithOrgBouncycastleMathEcECCurve_(OrgBouncycastleMathEcECCurve *curve) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1X9X9Curve, initWithOrgBouncycastleMathEcECCurve_, curve)
}


#line 36
void OrgBouncycastleAsn1X9X9Curve_initWithOrgBouncycastleMathEcECCurve_withByteArray_(OrgBouncycastleAsn1X9X9Curve *self, OrgBouncycastleMathEcECCurve *curve, IOSByteArray *seed) {
  OrgBouncycastleAsn1ASN1Object_init(self);
  self->fieldIdentifier_ =
#line 28
  nil;
  
#line 40
  self->curve_ = curve;
  self->seed_ = OrgBouncycastleUtilArrays_cloneWithByteArray_(seed);
  OrgBouncycastleAsn1X9X9Curve_setFieldIdentifier(self);
}


#line 36
OrgBouncycastleAsn1X9X9Curve *new_OrgBouncycastleAsn1X9X9Curve_initWithOrgBouncycastleMathEcECCurve_withByteArray_(OrgBouncycastleMathEcECCurve *curve, IOSByteArray *seed) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1X9X9Curve, initWithOrgBouncycastleMathEcECCurve_withByteArray_, curve, seed)
}


#line 36
OrgBouncycastleAsn1X9X9Curve *create_OrgBouncycastleAsn1X9X9Curve_initWithOrgBouncycastleMathEcECCurve_withByteArray_(OrgBouncycastleMathEcECCurve *curve, IOSByteArray *seed) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1X9X9Curve, initWithOrgBouncycastleMathEcECCurve_withByteArray_, curve, seed)
}


#line 45
void OrgBouncycastleAsn1X9X9Curve_initWithOrgBouncycastleAsn1X9X9FieldID_withJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1X9X9Curve *self, OrgBouncycastleAsn1X9X9FieldID *fieldID, JavaMathBigInteger *order, JavaMathBigInteger *cofactor, OrgBouncycastleAsn1ASN1Sequence *seq) {
  OrgBouncycastleAsn1ASN1Object_init(self);
  self->fieldIdentifier_ =
#line 28
  nil;
  
#line 51
  self->fieldIdentifier_ = [((OrgBouncycastleAsn1X9X9FieldID *) nil_chk(fieldID)) getIdentifier];
  if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(self->fieldIdentifier_)) equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X9X9ObjectIdentifiers, prime_field)]) {
    
#line 54
    JavaMathBigInteger *p = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(((OrgBouncycastleAsn1ASN1Integer *) cast_chk([fieldID getParameters], [OrgBouncycastleAsn1ASN1Integer class])))) getValue];
    JavaMathBigInteger *A = new_JavaMathBigInteger_initWithInt_withByteArray_(1, [((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(OrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjectAtWithInt:0]))) getOctets]);
    JavaMathBigInteger *B = new_JavaMathBigInteger_initWithInt_withByteArray_(1, [((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(OrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([seq getObjectAtWithInt:1]))) getOctets]);
    self->curve_ = new_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(p, A, B, order, cofactor);
  }
  else if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(self->fieldIdentifier_)) equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X9X9ObjectIdentifiers, characteristic_two_field)]) {
    
#line 62
    OrgBouncycastleAsn1ASN1Sequence *parameters = OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([fieldID getParameters]);
    jint m = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(((OrgBouncycastleAsn1ASN1Integer *) cast_chk([((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(parameters)) getObjectAtWithInt:0], [OrgBouncycastleAsn1ASN1Integer class])))) intValueExact];
    OrgBouncycastleAsn1ASN1ObjectIdentifier *representation = (OrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([parameters getObjectAtWithInt:1], [OrgBouncycastleAsn1ASN1ObjectIdentifier class]);
    
#line 66
    jint k1 = 0;
    jint k2 = 0;
    jint k3 = 0;
    
#line 70
    if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(representation)) equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X9X9ObjectIdentifiers, tpBasis)]) {
      
#line 73
      k1 = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(OrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([parameters getObjectAtWithInt:2]))) intValueExact];
    }
    else if ([representation equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X9X9ObjectIdentifiers, ppBasis)]) {
      
#line 78
      OrgBouncycastleAsn1ASN1Sequence *pentanomial = OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([parameters getObjectAtWithInt:2]);
      k1 = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(OrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(pentanomial)) getObjectAtWithInt:0]))) intValueExact];
      k2 = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(OrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([pentanomial getObjectAtWithInt:1]))) intValueExact];
      k3 = [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(OrgBouncycastleAsn1ASN1Integer_getInstanceWithId_([pentanomial getObjectAtWithInt:2]))) intValueExact];
    }
    else {
      
#line 85
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"This type of EC basis is not implemented");
    }
    JavaMathBigInteger *A = new_JavaMathBigInteger_initWithInt_withByteArray_(1, [((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(OrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjectAtWithInt:0]))) getOctets]);
    JavaMathBigInteger *B = new_JavaMathBigInteger_initWithInt_withByteArray_(1, [((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(OrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([seq getObjectAtWithInt:1]))) getOctets]);
    self->curve_ = new_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(m, k1, k2, k3, A, B, order, cofactor);
  }
  else {
    
#line 93
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"This type of ECCurve is not implemented");
  }
  
#line 96
  if ([seq size] == 3) {
    
#line 98
    self->seed_ = [((OrgBouncycastleAsn1DERBitString *) nil_chk(((OrgBouncycastleAsn1DERBitString *) cast_chk([seq getObjectAtWithInt:2], [OrgBouncycastleAsn1DERBitString class])))) getBytes];
  }
}


#line 45
OrgBouncycastleAsn1X9X9Curve *new_OrgBouncycastleAsn1X9X9Curve_initWithOrgBouncycastleAsn1X9X9FieldID_withJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1X9X9FieldID *fieldID, JavaMathBigInteger *order, JavaMathBigInteger *cofactor, OrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1X9X9Curve, initWithOrgBouncycastleAsn1X9X9FieldID_withJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleAsn1ASN1Sequence_, fieldID, order, cofactor, seq)
}


#line 45
OrgBouncycastleAsn1X9X9Curve *create_OrgBouncycastleAsn1X9X9Curve_initWithOrgBouncycastleAsn1X9X9FieldID_withJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1X9X9FieldID *fieldID, JavaMathBigInteger *order, JavaMathBigInteger *cofactor, OrgBouncycastleAsn1ASN1Sequence *seq) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1X9X9Curve, initWithOrgBouncycastleAsn1X9X9FieldID_withJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleAsn1ASN1Sequence_, fieldID, order, cofactor, seq)
}


#line 102
void OrgBouncycastleAsn1X9X9Curve_setFieldIdentifier(OrgBouncycastleAsn1X9X9Curve *self) {
  
#line 104
  if (OrgBouncycastleMathEcECAlgorithms_isFpCurveWithOrgBouncycastleMathEcECCurve_(self->curve_)) {
    
#line 106
    self->fieldIdentifier_ = JreLoadStatic(OrgBouncycastleAsn1X9X9ObjectIdentifiers, prime_field);
  }
  else if (OrgBouncycastleMathEcECAlgorithms_isF2mCurveWithOrgBouncycastleMathEcECCurve_(self->curve_)) {
    
#line 110
    self->fieldIdentifier_ = JreLoadStatic(OrgBouncycastleAsn1X9X9ObjectIdentifiers, characteristic_two_field);
  }
  else {
    
#line 114
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"This type of ECCurve is not implemented");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1X9X9Curve)
