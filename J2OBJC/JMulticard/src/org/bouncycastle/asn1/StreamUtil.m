//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/StreamUtil.java
//

#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Integer.h"
#include "java/lang/Runtime.h"
#include "java/nio/channels/FileChannel.h"
#include "org/bouncycastle/asn1/ASN1InputStream.h"
#include "org/bouncycastle/asn1/LimitedInputStream.h"
#include "org/bouncycastle/asn1/StreamUtil.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/asn1/StreamUtil must be compiled with ARC (-fobjc-arc)"
#endif

inline jlong OrgBouncycastleAsn1StreamUtil_get_MAX_MEMORY(void);
static jlong OrgBouncycastleAsn1StreamUtil_MAX_MEMORY;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgBouncycastleAsn1StreamUtil, MAX_MEMORY, jlong)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/StreamUtil.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleAsn1StreamUtil)


#line 9
@implementation OrgBouncycastleAsn1StreamUtil


#line 9
- (instancetype)initPackagePrivate {
  OrgBouncycastleAsn1StreamUtil_initPackagePrivate(self);
  return self;
}


#line 19
+ (jint)findLimitWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return OrgBouncycastleAsn1StreamUtil_findLimitWithJavaIoInputStream_(inArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(findLimitWithJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_MEMORY", "J", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "findLimit", "LJavaIoInputStream;", &OrgBouncycastleAsn1StreamUtil_MAX_MEMORY };
  static const J2ObjcClassInfo _OrgBouncycastleAsn1StreamUtil = { "StreamUtil", "org.bouncycastle.asn1", ptrTable, methods, fields, 7, 0x0, 2, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleAsn1StreamUtil;
}

+ (void)initialize {
  if (self == [OrgBouncycastleAsn1StreamUtil class]) {
    OrgBouncycastleAsn1StreamUtil_MAX_MEMORY =
#line 11
    [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) maxMemory];
    J2OBJC_SET_INITIALIZED(OrgBouncycastleAsn1StreamUtil)
  }
}

@end


#line 9
void OrgBouncycastleAsn1StreamUtil_initPackagePrivate(OrgBouncycastleAsn1StreamUtil *self) {
  NSObject_init(self);
}


#line 9
OrgBouncycastleAsn1StreamUtil *new_OrgBouncycastleAsn1StreamUtil_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastleAsn1StreamUtil, initPackagePrivate)
}


#line 9
OrgBouncycastleAsn1StreamUtil *create_OrgBouncycastleAsn1StreamUtil_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleAsn1StreamUtil, initPackagePrivate)
}


#line 19
jint OrgBouncycastleAsn1StreamUtil_findLimitWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  OrgBouncycastleAsn1StreamUtil_initialize();
  if ([inArg isKindOfClass:[OrgBouncycastleAsn1LimitedInputStream class]]) {
    
#line 23
    return [((OrgBouncycastleAsn1LimitedInputStream *) nil_chk(((OrgBouncycastleAsn1LimitedInputStream *) inArg))) getLimit];
  }
  else if ([inArg isKindOfClass:[OrgBouncycastleAsn1ASN1InputStream class]]) {
    
#line 27
    return [((OrgBouncycastleAsn1ASN1InputStream *) nil_chk(((OrgBouncycastleAsn1ASN1InputStream *) inArg))) getLimit];
  }
  else if ([inArg isKindOfClass:[JavaIoByteArrayInputStream class]]) {
    
#line 31
    return [((JavaIoByteArrayInputStream *) nil_chk(((JavaIoByteArrayInputStream *) inArg))) available];
  }
  else if ([inArg isKindOfClass:[JavaIoFileInputStream class]]) {
    
#line 35
    @try {
      
#line 37
      JavaNioChannelsFileChannel *channel = [((JavaIoFileInputStream *) nil_chk(((JavaIoFileInputStream *) inArg))) getChannel];
      jlong size = channel != nil ? [channel size] : JavaLangInteger_MAX_VALUE;
      
#line 40
      if (size < JavaLangInteger_MAX_VALUE) {
        
#line 42
        return (jint) size;
      }
    }
    @catch (JavaIoIOException *e) {
    }
  }
  
#line 51
  if (OrgBouncycastleAsn1StreamUtil_MAX_MEMORY > JavaLangInteger_MAX_VALUE) {
    
#line 53
    return JavaLangInteger_MAX_VALUE;
  }
  
#line 56
  return (jint) OrgBouncycastleAsn1StreamUtil_MAX_MEMORY;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleAsn1StreamUtil)
