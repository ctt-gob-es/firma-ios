//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/asn1/ASN1OctetString.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleAsn1ASN1OctetString")
#ifdef RESTRICT_OrgBouncycastleAsn1ASN1OctetString
#define INCLUDE_ALL_OrgBouncycastleAsn1ASN1OctetString 0
#else
#define INCLUDE_ALL_OrgBouncycastleAsn1ASN1OctetString 1
#endif
#undef RESTRICT_OrgBouncycastleAsn1ASN1OctetString

#if !defined (OrgBouncycastleAsn1ASN1OctetString_) && (INCLUDE_ALL_OrgBouncycastleAsn1ASN1OctetString || defined(INCLUDE_OrgBouncycastleAsn1ASN1OctetString))
#define OrgBouncycastleAsn1ASN1OctetString_

#define RESTRICT_OrgBouncycastleAsn1ASN1Primitive 1
#define INCLUDE_OrgBouncycastleAsn1ASN1Primitive 1
#include "org/bouncycastle/asn1/ASN1Primitive.h"

#define RESTRICT_OrgBouncycastleAsn1ASN1OctetStringParser 1
#define INCLUDE_OrgBouncycastleAsn1ASN1OctetStringParser 1
#include "org/bouncycastle/asn1/ASN1OctetStringParser.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class OrgBouncycastleAsn1ASN1TaggedObject;
@class OrgBouncycastleAsn1ASN1UniversalType;

/*!
 @brief Abstract base for the ASN.1 OCTET STRING data type
 <p>
  This supports BER, and DER forms of the data.
 </p><p>
  DER form is always primitive single OCTET STRING, while
  BER support includes the constructed forms. 
 </p>
  <p><b>X.690</b></p>
  <p><b>8: Basic encoding rules</b></p>
  <p><b>8.7 Encoding of an octetstring value</b></p>
  <p>
  <b>8.7.1</b> The encoding of an octetstring value shall be
  either primitive or constructed at the option of the sender. 
 <blockquote>
  NOTE &mdash; Where it is necessary to transfer part of an octet string
  before the entire OCTET STRING is available, the constructed encoding
  is used. 
 </blockquote>
  <p>
  <b>8.7.2</b> The primitive encoding contains zero,
  one or more contents octets equal in value to the octets
  in the data value, in the order they appear in the data value,
  and with the most significant bit of an octet of the data value
  aligned with the most significant bit of an octet of the contents octets. 
 </p>
  <p>
  <b>8.7.3</b> The contents octets for the constructed encoding shall consist
  of zero, one, or more encodings. 
 </p>
  <blockquote>
  NOTE &mdash; Each such encoding includes identifier, length, and contents octets,
  and may include end-of-contents octets if it is constructed. 
 </blockquote>
  <p>
  <b>8.7.3.1</b> To encode an octetstring value in this way,
  it is segmented. Each segment shall consist of a series of
  consecutive octets of the value. There shall be no significance
  placed on the segment boundaries.</p>
  <blockquote>
  NOTE &mdash; A segment may be of size zero, i.e. contain no octets. 
 </blockquote>
  <p>
  <b>8.7.3.2</b> Each encoding in the contents octets shall represent
  a segment of the overall octetstring, the encoding arising from
  a recursive application of this subclause.
  In this recursive application, each segment is treated as if it were
  a octetstring value. The encodings of the segments shall appear in the contents
  octets in the order in which their octets appear in the overall value. 
 </p>
  <blockquote>
  NOTE 1 &mdash; As a consequence of this recursion,
  each encoding in the contents octets may itself
  be primitive or constructed.
  However, such encodings will usually be primitive. 
 </blockquote>
  <blockquote>
  NOTE 2 &mdash; In particular, the tags in the contents octets are always universal class, number 4. 
 </blockquote>
  <p><b>9: Canonical encoding rules</b></p>
  <p><b>9.1 Length forms</b></p>
  <p>
  If the encoding is constructed, it shall employ the indefinite-length form.
  If the encoding is primitive, it shall include the fewest length octets necessary.
  [Contrast with 8.1.3.2 b).] 
 </p>
  <p><b>9.2 String encoding forms</b></p>
  <p>
  BIT STRING, OCTET STRING,and restricted character string
  values shall be encoded with a primitive encoding if they would
  require no more than 1000 contents octets, and as a constructed
  encoding otherwise. The string fragments contained in
  the constructed encoding shall be encoded with a primitive encoding.
  The encoding of each fragment, except possibly
  the last, shall have 1000 contents octets. (Contrast with 8.21.6.) 
 </p><p>
  <b>10: Distinguished encoding rules</b>
  </p><p>
  <b>10.1 Length forms</b>
  The definite form of length encoding shall be used,
  encoded in the minimum number of octets.
  [Contrast with 8.1.3.2 b).] 
 </p><p>
  <b>10.2 String encoding forms</b>
  For BIT STRING, OCTET STRING and restricted character string types,
  the constructed form of encoding shall not be used.
  (Contrast with 8.21.6.)
 */
@interface OrgBouncycastleAsn1ASN1OctetString : OrgBouncycastleAsn1ASN1Primitive < OrgBouncycastleAsn1ASN1OctetStringParser > {
 @public
  IOSByteArray *string_;
}

#pragma mark Public

/*!
 @brief Base constructor.
 @param string the octets making up the octet string.
 */
- (instancetype)initWithByteArray:(IOSByteArray *)string;

/*!
 @brief return an Octet String from a tagged object.
 @param taggedObject the tagged object holding the object we want.
 @param explicit_ true if the object is meant to be explicitly               tagged false otherwise.
 @throw IllegalArgumentExceptionif the tagged object cannot
               be converted.
 */
+ (OrgBouncycastleAsn1ASN1OctetString *)getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject:(OrgBouncycastleAsn1ASN1TaggedObject *)taggedObject
                                                                               withBoolean:(jboolean)explicit_;

/*!
 @brief return an Octet String from the given object.
 @param obj the object we want converted.
 @throw IllegalArgumentExceptionif the object cannot be converted.
 */
+ (OrgBouncycastleAsn1ASN1OctetString *)getInstanceWithId:(id)obj;

- (OrgBouncycastleAsn1ASN1Primitive *)getLoadedObject;

/*!
 @brief Return the content of the OCTET STRING as a byte array.
 @return the byte[] representing the OCTET STRING's content.
 */
- (IOSByteArray *)getOctets;

/*!
 @brief Return the content of the OCTET STRING as an InputStream.
 @return an InputStream representing the OCTET STRING's content.
 */
- (JavaIoInputStream *)getOctetStream;

- (NSUInteger)hash;

/*!
 @brief Return the parser associated with this object.
 @return a parser based on this OCTET STRING
 */
- (id<OrgBouncycastleAsn1ASN1OctetStringParser>)parser;

- (NSString *)description;

#pragma mark Package-Private

- (jboolean)asn1EqualsWithOrgBouncycastleAsn1ASN1Primitive:(OrgBouncycastleAsn1ASN1Primitive *)o;

+ (OrgBouncycastleAsn1ASN1OctetString *)createPrimitiveWithByteArray:(IOSByteArray *)contents;

- (OrgBouncycastleAsn1ASN1Primitive *)toDERObject;

- (OrgBouncycastleAsn1ASN1Primitive *)toDLObject;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleAsn1ASN1OctetString)

J2OBJC_FIELD_SETTER(OrgBouncycastleAsn1ASN1OctetString, string_, IOSByteArray *)

inline OrgBouncycastleAsn1ASN1UniversalType *OrgBouncycastleAsn1ASN1OctetString_get_TYPE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1UniversalType *OrgBouncycastleAsn1ASN1OctetString_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleAsn1ASN1OctetString, TYPE, OrgBouncycastleAsn1ASN1UniversalType *)

inline IOSByteArray *OrgBouncycastleAsn1ASN1OctetString_get_EMPTY_OCTETS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleAsn1ASN1OctetString_EMPTY_OCTETS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleAsn1ASN1OctetString, EMPTY_OCTETS, IOSByteArray *)

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1OctetString *OrgBouncycastleAsn1ASN1OctetString_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(OrgBouncycastleAsn1ASN1TaggedObject *taggedObject, jboolean explicit_);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1OctetString *OrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_(id obj);

FOUNDATION_EXPORT void OrgBouncycastleAsn1ASN1OctetString_initWithByteArray_(OrgBouncycastleAsn1ASN1OctetString *self, IOSByteArray *string);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1OctetString *OrgBouncycastleAsn1ASN1OctetString_createPrimitiveWithByteArray_(IOSByteArray *contents);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleAsn1ASN1OctetString)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleAsn1ASN1OctetString")
