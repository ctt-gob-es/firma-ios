//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/rainbow/RainbowKeyPairGenerator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/bouncycastle/crypto/CryptoServicesRegistrar.h"
#include "org/bouncycastle/crypto/KeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/rainbow/Layer.h"
#include "org/bouncycastle/pqc/crypto/rainbow/RainbowKeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/rainbow/RainbowKeyPairGenerator.h"
#include "org/bouncycastle/pqc/crypto/rainbow/RainbowParameters.h"
#include "org/bouncycastle/pqc/crypto/rainbow/RainbowPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/rainbow/RainbowPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/rainbow/util/ComputeInField.h"
#include "org/bouncycastle/pqc/crypto/rainbow/util/GF2Field.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/rainbow/RainbowKeyPairGenerator must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator () {
 @public
  jboolean initialized_;
  JavaSecuritySecureRandom *sr_;
  OrgBouncycastlePqcCryptoRainbowRainbowKeyGenerationParameters *rainbowParams_;
  IOSObjectArray *A1_;
  IOSObjectArray *A1inv_;
  IOSShortArray *b1_;
  IOSObjectArray *A2_;
  IOSObjectArray *A2inv_;
  IOSShortArray *b2_;
  jint numOfLayers_;
  IOSObjectArray *layers_;
  IOSIntArray *vi_;
  IOSObjectArray *pub_quadratic_;
  IOSObjectArray *pub_singular_;
  IOSShortArray *pub_scalar_;
}

- (void)initializeDefault OBJC_METHOD_FAMILY_NONE;

/*!
 @brief This function calls the functions for the random generation of the coefficients
  and the matrices needed for the private key and the method for computing the public key.
 */
- (void)keygen;

/*!
 @brief This function generates the invertible affine linear map L1 = A1*x + b1
 <p>
  The translation part b1, is stored in a separate array.
 The inverse of
  the matrix-part of L1 A1inv is also computed here. 
 </p><p>
  This linear map hides the output of the map F. It is on k^(n-v1). 
 </p>
 */
- (void)generateL1;

/*!
 @brief This function generates the invertible affine linear map L2 = A2*x + b2
 <p>
  The translation part b2, is stored in a separate array.
 The inverse of
  the matrix-part of L2 A2inv is also computed here. 
 </p><p>
  This linear map hides the output of the map F. It is on k^(n). 
 </p>
 */
- (void)generateL2;

/*!
 @brief This function generates the private map F, which consists of u-1 layers.
 Each layer consists of oi polynomials where oi = vi[i+1]-vi[i]. 
 <p>
  The methods for the generation of the coefficients of these polynomials
  are called here. 
 </p>
 */
- (void)generateF;

/*!
 @brief This function computes the public key from the private key.
 <p>
  The composition of F with L2 is computed, followed by applying L1 to the
  composition's result. The singular and scalar values constitute to the
  public key as is, the quadratic terms are compacted in 
 <tt>compactPublicKey()</tt>
  </p>
 */
- (void)computePublicKey;

/*!
 @brief The quadratic (or mixed) terms of the public key are compacted from a n x
  n matrix per polynomial to an upper diagonal matrix stored in one integer
  array of n (n + 1) / 2 elements per polynomial.The ordering of elements
  is lexicographic and the result is updating <tt>this.pub_quadratic</tt>,
  which stores the quadratic elements of the public key.
 @param coeff_quadratic_to_compact 3-dimensional array containing a n x n Matrix for each of the                                    n - v1 polynomials
 */
- (void)compactPublicKeyWithShortArray3:(IOSObjectArray *)coeff_quadratic_to_compact;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator, sr_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator, rainbowParams_, OrgBouncycastlePqcCryptoRainbowRainbowKeyGenerationParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator, A1_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator, A1inv_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator, b1_, IOSShortArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator, A2_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator, A2inv_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator, b2_, IOSShortArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator, layers_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator, vi_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator, pub_quadratic_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator, pub_singular_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator, pub_scalar_, IOSShortArray *)

__attribute__((unused)) static void OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_initializeDefault(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *self);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_keygen(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *self);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_generateL1(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *self);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_generateL2(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *self);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_generateF(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *self);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_computePublicKey(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *self);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_compactPublicKeyWithShortArray3_(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *self, IOSObjectArray *coeff_quadratic_to_compact);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/rainbow/RainbowKeyPairGenerator.java"


#line 21
@implementation OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 54
- (instancetype)init {
  OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 64
- (OrgBouncycastleCryptoAsymmetricCipherKeyPair *)genKeyPair {
  
#line 66
  OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *privKey;
  OrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters *pubKey;
  
#line 69
  if (!initialized_) {
    
#line 71
    OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_initializeDefault(self);
  }
  
#line 75
  OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_keygen(self);
  
#line 78
  privKey = new_OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters_initWithShortArray2_withShortArray_withShortArray2_withShortArray_withIntArray_withOrgBouncycastlePqcCryptoRainbowLayerArray_(A1inv_, b1_, A2inv_, b2_, vi_, layers_);
  
#line 82
  pubKey = new_OrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters_initWithInt_withShortArray2_withShortArray2_withShortArray_(IOSIntArray_Get(vi_, ((IOSIntArray *) nil_chk(vi_))->size_ - 1) - IOSIntArray_Get(vi_, 0), pub_quadratic_, pub_singular_, pub_scalar_);
  
#line 84
  return new_OrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(pubKey, privKey);
}


#line 88
- (void)initialize__WithOrgBouncycastleCryptoKeyGenerationParameters:(OrgBouncycastleCryptoKeyGenerationParameters *)param {
  
#line 91
  self->rainbowParams_ = (OrgBouncycastlePqcCryptoRainbowRainbowKeyGenerationParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoRainbowRainbowKeyGenerationParameters class]);
  
#line 94
  self->sr_ = [((OrgBouncycastlePqcCryptoRainbowRainbowKeyGenerationParameters *) nil_chk(rainbowParams_)) getRandom];
  
#line 97
  self->vi_ = [((OrgBouncycastlePqcCryptoRainbowRainbowParameters *) nil_chk([((OrgBouncycastlePqcCryptoRainbowRainbowKeyGenerationParameters *) nil_chk(self->rainbowParams_)) getParameters])) getVi];
  self->numOfLayers_ = [((OrgBouncycastlePqcCryptoRainbowRainbowParameters *) nil_chk([((OrgBouncycastlePqcCryptoRainbowRainbowKeyGenerationParameters *) nil_chk(self->rainbowParams_)) getParameters])) getNumOfLayers];
  
#line 100
  self->initialized_ = true;
}


#line 103
- (void)initializeDefault {
  OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_initializeDefault(self);
}


#line 113
- (void)keygen {
  OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_keygen(self);
}


#line 130
- (void)generateL1 {
  OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_generateL1(self);
}


#line 169
- (void)generateL2 {
  OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_generateL2(self);
}


#line 207
- (void)generateF {
  OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_generateF(self);
}


#line 226
- (void)computePublicKey {
  OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_computePublicKey(self);
}


#line 378
- (void)compactPublicKeyWithShortArray3:(IOSObjectArray *)coeff_quadratic_to_compact {
  OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_compactPublicKeyWithShortArray3_(self, coeff_quadratic_to_compact);
}


#line 409
- (void)init__WithOrgBouncycastleCryptoKeyGenerationParameters:(OrgBouncycastleCryptoKeyGenerationParameters *)param {
  
#line 412
  [self initialize__WithOrgBouncycastleCryptoKeyGenerationParameters:param];
}

- (OrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  
#line 418
  return [self genKeyPair];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(genKeyPair);
  methods[2].selector = @selector(initialize__WithOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[3].selector = @selector(initializeDefault);
  methods[4].selector = @selector(keygen);
  methods[5].selector = @selector(generateL1);
  methods[6].selector = @selector(generateL2);
  methods[7].selector = @selector(generateF);
  methods[8].selector = @selector(computePublicKey);
  methods[9].selector = @selector(compactPublicKeyWithShortArray3:);
  methods[10].selector = @selector(init__WithOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[11].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "initialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sr_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rainbowParams_", "LOrgBouncycastlePqcCryptoRainbowRainbowKeyGenerationParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "A1_", "[[S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "A1inv_", "[[S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "b1_", "[S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "A2_", "[[S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "A2inv_", "[[S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "b2_", "[S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numOfLayers_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "layers_", "[LOrgBouncycastlePqcCryptoRainbowLayer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "vi_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pub_quadratic_", "[[S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pub_singular_", "[[S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pub_scalar_", "[S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "initialize", "LOrgBouncycastleCryptoKeyGenerationParameters;", "compactPublicKey", "[[[S", "init" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator = { "RainbowKeyPairGenerator", "org.bouncycastle.pqc.crypto.rainbow", ptrTable, methods, fields, 7, 0x1, 12, 15, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator;
}

@end


#line 54
void OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_init(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *self) {
  NSObject_init(self);
  self->initialized_ =
#line 24
  false;
}


#line 54
OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *new_OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator, init)
}


#line 54
OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *create_OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator, init)
}


#line 103
void OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_initializeDefault(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *self) {
  
#line 105
  OrgBouncycastlePqcCryptoRainbowRainbowKeyGenerationParameters *rbKGParams = new_OrgBouncycastlePqcCryptoRainbowRainbowKeyGenerationParameters_initWithJavaSecuritySecureRandom_withOrgBouncycastlePqcCryptoRainbowRainbowParameters_(OrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom(), new_OrgBouncycastlePqcCryptoRainbowRainbowParameters_init());
  [self initialize__WithOrgBouncycastleCryptoKeyGenerationParameters:rbKGParams];
}


#line 113
void OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_keygen(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *self) {
  
#line 115
  OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_generateL1(self);
  OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_generateL2(self);
  OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_generateF(self);
  OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_computePublicKey(self);
}


#line 130
void OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_generateL1(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *self) {
  
#line 134
  jint dim = IOSIntArray_Get(self->vi_, ((IOSIntArray *) nil_chk(self->vi_))->size_ - 1) - IOSIntArray_Get(self->vi_, 0);
  self->A1_ = [IOSShortArray newArrayWithDimensions:2 lengths:(jint[]){ dim, dim }];
  self->A1inv_ = nil;
  OrgBouncycastlePqcCryptoRainbowUtilComputeInField *c = new_OrgBouncycastlePqcCryptoRainbowUtilComputeInField_init();
  
#line 140
  while (self->A1inv_ == nil) {
    
#line 142
    for (jint i = 0; i < dim; i++) {
      
#line 144
      for (jint j = 0; j < dim; j++) {
        
#line 146
        *IOSShortArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->A1_), i)), j) = (jshort) ([((JavaSecuritySecureRandom *) nil_chk(self->sr_)) nextInt] & OrgBouncycastlePqcCryptoRainbowUtilGF2Field_MASK);
      }
    }
    self->A1inv_ = [c inverseWithShortArray2:self->A1_];
  }
  
#line 153
  self->b1_ = [IOSShortArray newArrayWithLength:dim];
  for (jint i = 0; i < dim; i++) {
    
#line 156
    *IOSShortArray_GetRef(nil_chk(self->b1_), i) = (jshort) ([((JavaSecuritySecureRandom *) nil_chk(self->sr_)) nextInt] & OrgBouncycastlePqcCryptoRainbowUtilGF2Field_MASK);
  }
}


#line 169
void OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_generateL2(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *self) {
  
#line 173
  jint dim = IOSIntArray_Get(self->vi_, ((IOSIntArray *) nil_chk(self->vi_))->size_ - 1);
  self->A2_ = [IOSShortArray newArrayWithDimensions:2 lengths:(jint[]){ dim, dim }];
  self->A2inv_ = nil;
  OrgBouncycastlePqcCryptoRainbowUtilComputeInField *c = new_OrgBouncycastlePqcCryptoRainbowUtilComputeInField_init();
  
#line 179
  while (self->A2inv_ == nil) {
    
#line 181
    for (jint i = 0; i < dim; i++) {
      
#line 183
      for (jint j = 0; j < dim; j++) {
        
#line 185
        *IOSShortArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->A2_), i)), j) = (jshort) ([((JavaSecuritySecureRandom *) nil_chk(self->sr_)) nextInt] & OrgBouncycastlePqcCryptoRainbowUtilGF2Field_MASK);
      }
    }
    self->A2inv_ = [c inverseWithShortArray2:self->A2_];
  }
  
#line 191
  self->b2_ = [IOSShortArray newArrayWithLength:dim];
  for (jint i = 0; i < dim; i++) {
    
#line 194
    *IOSShortArray_GetRef(nil_chk(self->b2_), i) = (jshort) ([((JavaSecuritySecureRandom *) nil_chk(self->sr_)) nextInt] & OrgBouncycastlePqcCryptoRainbowUtilGF2Field_MASK);
  }
}


#line 207
void OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_generateF(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *self) {
  
#line 210
  self->layers_ = [IOSObjectArray newArrayWithLength:self->numOfLayers_ type:OrgBouncycastlePqcCryptoRainbowLayer_class_()];
  for (jint i = 0; i < self->numOfLayers_; i++) {
    
#line 213
    (void) IOSObjectArray_SetAndConsume(nil_chk(self->layers_), i, new_OrgBouncycastlePqcCryptoRainbowLayer_initWithInt_withInt_withJavaSecuritySecureRandom_(IOSIntArray_Get(nil_chk(self->vi_), i), IOSIntArray_Get(self->vi_, i + 1), self->sr_));
  }
}


#line 226
void OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_computePublicKey(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *self) {
  
#line 229
  OrgBouncycastlePqcCryptoRainbowUtilComputeInField *c = new_OrgBouncycastlePqcCryptoRainbowUtilComputeInField_init();
  jint rows = IOSIntArray_Get(self->vi_, ((IOSIntArray *) nil_chk(self->vi_))->size_ - 1) - IOSIntArray_Get(self->vi_, 0);
  jint vars = IOSIntArray_Get(self->vi_, self->vi_->size_ - 1);
  
#line 233
  IOSObjectArray *coeff_quadratic_3dim = [IOSShortArray newArrayWithDimensions:3 lengths:(jint[]){ rows, vars, vars }];
  self->pub_singular_ = [IOSShortArray newArrayWithDimensions:2 lengths:(jint[]){ rows, vars }];
  self->pub_scalar_ = [IOSShortArray newArrayWithLength:rows];
  
#line 238
  IOSObjectArray *coeff_alpha;
  IOSObjectArray *coeff_beta;
  IOSObjectArray *coeff_gamma;
  IOSShortArray *coeff_eta;
  
#line 244
  jint oils = 0;
  jint vins = 0;
  jint crnt_row = 0;
  
#line 248
  IOSShortArray *vect_tmp = [IOSShortArray newArrayWithLength:vars];
  jshort sclr_tmp = 0;
  
#line 252
  for (jint l = 0; l < ((IOSObjectArray *) nil_chk(self->layers_))->size_; l++) {
    
#line 255
    coeff_alpha = [((OrgBouncycastlePqcCryptoRainbowLayer *) nil_chk(IOSObjectArray_Get(self->layers_, l))) getCoeffAlpha];
    coeff_beta = [((OrgBouncycastlePqcCryptoRainbowLayer *) nil_chk(IOSObjectArray_Get(nil_chk(self->layers_), l))) getCoeffBeta];
    coeff_gamma = [((OrgBouncycastlePqcCryptoRainbowLayer *) nil_chk(IOSObjectArray_Get(nil_chk(self->layers_), l))) getCoeffGamma];
    coeff_eta = [((OrgBouncycastlePqcCryptoRainbowLayer *) nil_chk(IOSObjectArray_Get(nil_chk(self->layers_), l))) getCoeffEta];
    oils = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(coeff_alpha), 0)))->size_;
    vins = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(coeff_beta), 0)))->size_;
    
#line 262
    for (jint p = 0; p < oils; p++) {
      
#line 265
      for (jint x1 = 0; x1 < oils; x1++) {
        
#line 267
        for (jint x2 = 0; x2 < vins; x2++) {
          
#line 270
          vect_tmp = [c multVectWithShort:IOSShortArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff_alpha, p)), x1)), x2) withShortArray:IOSObjectArray_Get(nil_chk(
#line 271
          self->A2_), x1 + vins)];
          (void) IOSObjectArray_Set(coeff_quadratic_3dim, crnt_row + p, [c addSquareMatrixWithShortArray2:IOSObjectArray_Get(
#line 273
          coeff_quadratic_3dim, crnt_row + p) withShortArray2:[c multVectsWithShortArray:
#line 274
          vect_tmp withShortArray:IOSObjectArray_Get(nil_chk(self->A2_), x2)]]);
          
#line 276
          vect_tmp = [c multVectWithShort:IOSShortArray_Get(nil_chk(self->b2_), x2) withShortArray:vect_tmp];
          (void) IOSObjectArray_Set(nil_chk(self->pub_singular_), crnt_row + p, [c addVectWithShortArray:vect_tmp withShortArray:IOSObjectArray_Get(
#line 278
          self->pub_singular_, crnt_row + p)]);
          
#line 280
          vect_tmp = [c multVectWithShort:IOSShortArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff_alpha, p)), x1)), x2) withShortArray:IOSObjectArray_Get(nil_chk(
#line 281
          self->A2_), x2)];
          vect_tmp = [c multVectWithShort:IOSShortArray_Get(nil_chk(self->b2_), x1 + vins) withShortArray:vect_tmp];
          (void) IOSObjectArray_Set(nil_chk(self->pub_singular_), crnt_row + p, [c addVectWithShortArray:vect_tmp withShortArray:IOSObjectArray_Get(
#line 284
          self->pub_singular_, crnt_row + p)]);
          
#line 286
          sclr_tmp = OrgBouncycastlePqcCryptoRainbowUtilGF2Field_multElemWithShort_withShort_(IOSShortArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff_alpha, p)), x1)), x2), IOSShortArray_Get(nil_chk(
#line 287
          self->b2_), x1 + vins));
          *IOSShortArray_GetRef(nil_chk(self->pub_scalar_), crnt_row + p) = OrgBouncycastlePqcCryptoRainbowUtilGF2Field_addElemWithShort_withShort_(IOSShortArray_Get(
#line 289
          self->pub_scalar_, crnt_row + p), OrgBouncycastlePqcCryptoRainbowUtilGF2Field_multElemWithShort_withShort_(
#line 290
          sclr_tmp, IOSShortArray_Get(nil_chk(self->b2_), x2)));
        }
      }
      
#line 294
      for (jint x1 = 0; x1 < vins; x1++) {
        
#line 296
        for (jint x2 = 0; x2 < vins; x2++) {
          
#line 299
          vect_tmp = [c multVectWithShort:IOSShortArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff_beta, p)), x1)), x2) withShortArray:IOSObjectArray_Get(nil_chk(
#line 300
          self->A2_), x1)];
          (void) IOSObjectArray_Set(coeff_quadratic_3dim, crnt_row + p, [c addSquareMatrixWithShortArray2:IOSObjectArray_Get(
#line 302
          coeff_quadratic_3dim, crnt_row + p) withShortArray2:[c multVectsWithShortArray:
#line 303
          vect_tmp withShortArray:IOSObjectArray_Get(nil_chk(self->A2_), x2)]]);
          
#line 305
          vect_tmp = [c multVectWithShort:IOSShortArray_Get(nil_chk(self->b2_), x2) withShortArray:vect_tmp];
          (void) IOSObjectArray_Set(nil_chk(self->pub_singular_), crnt_row + p, [c addVectWithShortArray:vect_tmp withShortArray:IOSObjectArray_Get(
#line 307
          self->pub_singular_, crnt_row + p)]);
          
#line 309
          vect_tmp = [c multVectWithShort:IOSShortArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff_beta, p)), x1)), x2) withShortArray:IOSObjectArray_Get(nil_chk(
#line 310
          self->A2_), x2)];
          vect_tmp = [c multVectWithShort:IOSShortArray_Get(nil_chk(self->b2_), x1) withShortArray:vect_tmp];
          (void) IOSObjectArray_Set(nil_chk(self->pub_singular_), crnt_row + p, [c addVectWithShortArray:vect_tmp withShortArray:IOSObjectArray_Get(
#line 313
          self->pub_singular_, crnt_row + p)]);
          
#line 315
          sclr_tmp = OrgBouncycastlePqcCryptoRainbowUtilGF2Field_multElemWithShort_withShort_(IOSShortArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff_beta, p)), x1)), x2), IOSShortArray_Get(nil_chk(
#line 316
          self->b2_), x1));
          *IOSShortArray_GetRef(nil_chk(self->pub_scalar_), crnt_row + p) = OrgBouncycastlePqcCryptoRainbowUtilGF2Field_addElemWithShort_withShort_(IOSShortArray_Get(
#line 318
          self->pub_scalar_, crnt_row + p), OrgBouncycastlePqcCryptoRainbowUtilGF2Field_multElemWithShort_withShort_(
#line 319
          sclr_tmp, IOSShortArray_Get(nil_chk(self->b2_), x2)));
        }
      }
      
#line 323
      for (jint n = 0; n < vins + oils; n++) {
        
#line 326
        vect_tmp = [c multVectWithShort:IOSShortArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(coeff_gamma), p)), n) withShortArray:IOSObjectArray_Get(nil_chk(self->A2_), n)];
        (void) IOSObjectArray_Set(nil_chk(self->pub_singular_), crnt_row + p, [c addVectWithShortArray:vect_tmp withShortArray:IOSObjectArray_Get(
#line 328
        self->pub_singular_, crnt_row + p)]);
        
#line 330
        *IOSShortArray_GetRef(nil_chk(self->pub_scalar_), crnt_row + p) = OrgBouncycastlePqcCryptoRainbowUtilGF2Field_addElemWithShort_withShort_(IOSShortArray_Get(
#line 331
        self->pub_scalar_, crnt_row + p), OrgBouncycastlePqcCryptoRainbowUtilGF2Field_multElemWithShort_withShort_(IOSShortArray_Get(nil_chk(IOSObjectArray_Get(
#line 332
        coeff_gamma, p)), n), IOSShortArray_Get(nil_chk(self->b2_), n)));
      }
      
#line 335
      *IOSShortArray_GetRef(nil_chk(self->pub_scalar_), crnt_row + p) = OrgBouncycastlePqcCryptoRainbowUtilGF2Field_addElemWithShort_withShort_(IOSShortArray_Get(
#line 336
      self->pub_scalar_, crnt_row + p), IOSShortArray_Get(nil_chk(coeff_eta), p));
    }
    crnt_row = crnt_row + oils;
  }
  {
    
#line 344
    IOSObjectArray *tmp_c_quad = [IOSShortArray newArrayWithDimensions:3 lengths:(jint[]){ rows, vars, vars }];
    IOSObjectArray *tmp_c_sing = [IOSShortArray newArrayWithDimensions:2 lengths:(jint[]){ rows, vars }];
    IOSShortArray *tmp_c_scal = [IOSShortArray newArrayWithLength:rows];
    for (jint r = 0; r < rows; r++) {
      
#line 349
      for (jint q = 0; q < ((IOSObjectArray *) nil_chk(self->A1_))->size_; q++) {
        
#line 351
        (void) IOSObjectArray_Set(tmp_c_quad, r, [c addSquareMatrixWithShortArray2:IOSObjectArray_Get(tmp_c_quad, r) withShortArray2:[c multMatrixWithShort:IOSShortArray_Get(nil_chk(IOSObjectArray_Get(self->A1_,
#line 352
        r)), q) withShortArray2:IOSObjectArray_Get(coeff_quadratic_3dim, q)]]);
        (void) IOSObjectArray_Set(tmp_c_sing, r, [c addVectWithShortArray:IOSObjectArray_Get(tmp_c_sing, r) withShortArray:[c multVectWithShort:IOSShortArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->A1_),
#line 354
        r)), q) withShortArray:IOSObjectArray_Get(nil_chk(self->pub_singular_), q)]]);
        *IOSShortArray_GetRef(tmp_c_scal, r) = OrgBouncycastlePqcCryptoRainbowUtilGF2Field_addElemWithShort_withShort_(IOSShortArray_Get(tmp_c_scal, r), OrgBouncycastlePqcCryptoRainbowUtilGF2Field_multElemWithShort_withShort_(IOSShortArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->A1_),
#line 356
        r)), q), IOSShortArray_Get(nil_chk(self->pub_scalar_), q)));
      }
      *IOSShortArray_GetRef(tmp_c_scal, r) = OrgBouncycastlePqcCryptoRainbowUtilGF2Field_addElemWithShort_withShort_(IOSShortArray_Get(tmp_c_scal, r), IOSShortArray_Get(nil_chk(self->b1_), r));
    }
    
#line 361
    coeff_quadratic_3dim = tmp_c_quad;
    self->pub_singular_ = tmp_c_sing;
    self->pub_scalar_ = tmp_c_scal;
  }
  OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_compactPublicKeyWithShortArray3_(self, coeff_quadratic_3dim);
}


#line 378
void OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_compactPublicKeyWithShortArray3_(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *self, IOSObjectArray *coeff_quadratic_to_compact) {
  
#line 380
  jint polynomials = ((IOSObjectArray *) nil_chk(coeff_quadratic_to_compact))->size_;
  jint n = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(coeff_quadratic_to_compact, 0)))->size_;
  jint entries = JreIntDiv(n * (n + 1), 2);
  self->pub_quadratic_ = [IOSShortArray newArrayWithDimensions:2 lengths:(jint[]){ polynomials, entries }];
  jint offset = 0;
  
#line 386
  for (jint p = 0; p < polynomials; p++) {
    
#line 388
    offset = 0;
    for (jint x = 0; x < n; x++) {
      
#line 391
      for (jint y = x; y < n; y++) {
        
#line 393
        if (y == x) {
          
#line 395
          *IOSShortArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->pub_quadratic_), p)), offset) = IOSShortArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff_quadratic_to_compact, p)), x)), y);
        }
        else {
          
#line 399
          *IOSShortArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->pub_quadratic_), p)), offset) = OrgBouncycastlePqcCryptoRainbowUtilGF2Field_addElemWithShort_withShort_(IOSShortArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(
#line 400
          coeff_quadratic_to_compact, p)), x)), y), IOSShortArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(
#line 401
          coeff_quadratic_to_compact, p)), y)), x));
        }
        offset++;
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator)
