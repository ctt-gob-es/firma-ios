//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/rainbow/RainbowSigner.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/CryptoServicesRegistrar.h"
#include "org/bouncycastle/crypto/params/ParametersWithRandom.h"
#include "org/bouncycastle/pqc/crypto/rainbow/Layer.h"
#include "org/bouncycastle/pqc/crypto/rainbow/RainbowKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/rainbow/RainbowPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/rainbow/RainbowPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/rainbow/RainbowSigner.h"
#include "org/bouncycastle/pqc/crypto/rainbow/util/ComputeInField.h"
#include "org/bouncycastle/pqc/crypto/rainbow/util/GF2Field.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/rainbow/RainbowSigner must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoRainbowRainbowSigner () {
 @public
  JavaSecuritySecureRandom *random_;
  IOSShortArray *x_;
  OrgBouncycastlePqcCryptoRainbowUtilComputeInField *cf_;
}

/*!
 @brief initial operations before solving the Linear equation system.
 @param layer the current layer for which a LES is to be solved.
 @param msg the message that should be signed.
 @return Y_ the modified document needed for solving LES, (Y_ =
  A1^{-1}*(Y-b1)) linear map L1 = A1 x + b1.
 */
- (IOSShortArray *)initSignWithOrgBouncycastlePqcCryptoRainbowLayerArray:(IOSObjectArray *)layer
                                                          withShortArray:(IOSShortArray *)msg OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Signature verification using public key
 @param signature vector of dimension n
 @return document hash of length n - v1
 */
- (IOSShortArray *)verifySignatureInternWithShortArray:(IOSShortArray *)signature;

/*!
 @brief This function creates the representative of the message which gets signed
  or verified.
 @param message the message
 @return message representative
 */
- (IOSShortArray *)makeMessageRepresentativeWithByteArray:(IOSByteArray *)message;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoRainbowRainbowSigner, random_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoRainbowRainbowSigner, x_, IOSShortArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoRainbowRainbowSigner, cf_, OrgBouncycastlePqcCryptoRainbowUtilComputeInField *)

inline jint OrgBouncycastlePqcCryptoRainbowRainbowSigner_get_MAXITS(void);
#define OrgBouncycastlePqcCryptoRainbowRainbowSigner_MAXITS 65536
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoRainbowRainbowSigner, MAXITS, jint)

__attribute__((unused)) static IOSShortArray *OrgBouncycastlePqcCryptoRainbowRainbowSigner_initSignWithOrgBouncycastlePqcCryptoRainbowLayerArray_withShortArray_(OrgBouncycastlePqcCryptoRainbowRainbowSigner *self, IOSObjectArray *layer, IOSShortArray *msg);

__attribute__((unused)) static IOSShortArray *OrgBouncycastlePqcCryptoRainbowRainbowSigner_verifySignatureInternWithShortArray_(OrgBouncycastlePqcCryptoRainbowRainbowSigner *self, IOSShortArray *signature);

__attribute__((unused)) static IOSShortArray *OrgBouncycastlePqcCryptoRainbowRainbowSigner_makeMessageRepresentativeWithByteArray_(OrgBouncycastlePqcCryptoRainbowRainbowSigner *self, IOSByteArray *message);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/rainbow/RainbowSigner.java"


#line 22
@implementation OrgBouncycastlePqcCryptoRainbowRainbowSigner

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 22
- (instancetype)init {
  OrgBouncycastlePqcCryptoRainbowRainbowSigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 40
- (void)init__WithBoolean:(jboolean)forSigning
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)param {
  
#line 44
  if (forSigning) {
    
#line 46
    if ([param isKindOfClass:[OrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      
#line 48
      OrgBouncycastleCryptoParamsParametersWithRandom *rParam = (OrgBouncycastleCryptoParamsParametersWithRandom *) param;
      
#line 50
      random_ = [((OrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
      key_ = (OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) cast_chk([rParam getParameters], [OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters class]);
    }
    else {
      
#line 57
      random_ = OrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
      key_ = (OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters class]);
    }
  }
  else {
    
#line 63
    key_ = (OrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters class]);
  }
  
#line 66
  signableDocumentLength_ = [((OrgBouncycastlePqcCryptoRainbowRainbowKeyParameters *) nil_chk(key_)) getDocLength];
}


#line 78
- (IOSShortArray *)initSignWithOrgBouncycastlePqcCryptoRainbowLayerArray:(IOSObjectArray *)layer
                                                          withShortArray:(IOSShortArray *)msg {
  return OrgBouncycastlePqcCryptoRainbowRainbowSigner_initSignWithOrgBouncycastlePqcCryptoRainbowLayerArray_withShortArray_(self, layer, msg);
}


#line 112
- (IOSByteArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  
#line 115
  IOSObjectArray *layer = [((OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters class])))) getLayers];
  jint numberOfLayers = ((IOSObjectArray *) nil_chk(layer))->size_;
  
#line 118
  x_ = [IOSShortArray newArrayWithLength:((IOSObjectArray *) nil_chk([((OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters class])))) getInvA2]))->size_];
  
#line 120
  IOSShortArray *Y_;
  IOSShortArray *y_i;
  jint counter;
  
#line 124
  IOSShortArray *solVec;
  IOSShortArray *tmpVec;
  
#line 128
  IOSShortArray *signature;
  
#line 130
  IOSByteArray *S = [IOSByteArray newArrayWithLength:[((OrgBouncycastlePqcCryptoRainbowLayer *) nil_chk(IOSObjectArray_Get(layer, numberOfLayers - 1))) getViNext]];
  
#line 132
  IOSShortArray *msgHashVals = OrgBouncycastlePqcCryptoRainbowRainbowSigner_makeMessageRepresentativeWithByteArray_(self, message);
  jint itCount = 0;
  
#line 136
  jboolean ok;
  do {
    
#line 139
    ok = true;
    counter = 0;
    @try {
      
#line 143
      Y_ = OrgBouncycastlePqcCryptoRainbowRainbowSigner_initSignWithOrgBouncycastlePqcCryptoRainbowLayerArray_withShortArray_(self, layer, msgHashVals);
      
#line 145
      for (jint i = 0; i < numberOfLayers; i++) {
        
#line 148
        y_i = [IOSShortArray newArrayWithLength:[((OrgBouncycastlePqcCryptoRainbowLayer *) nil_chk(IOSObjectArray_Get(layer, i))) getOi]];
        solVec = [IOSShortArray newArrayWithLength:[((OrgBouncycastlePqcCryptoRainbowLayer *) nil_chk(IOSObjectArray_Get(layer, i))) getOi]];
        
#line 152
        for (jint k = 0; k < [((OrgBouncycastlePqcCryptoRainbowLayer *) nil_chk(IOSObjectArray_Get(layer, i))) getOi]; k++) {
          
#line 154
          *IOSShortArray_GetRef(y_i, k) = IOSShortArray_Get(nil_chk(Y_), counter);
          counter++;
        }
        
#line 162
        solVec = [((OrgBouncycastlePqcCryptoRainbowUtilComputeInField *) nil_chk(cf_)) solveEquationWithShortArray2:[((OrgBouncycastlePqcCryptoRainbowLayer *) nil_chk(IOSObjectArray_Get(layer, i))) plugInVinegarsWithShortArray:x_] withShortArray:y_i];
        
#line 164
        if (solVec == nil) {
          
#line 166
          @throw new_JavaLangException_initWithNSString_(@"LES is not solveable!");
        }
        
#line 170
        for (jint j = 0; j < solVec->size_; j++) {
          
#line 172
          *IOSShortArray_GetRef(nil_chk(x_), [((OrgBouncycastlePqcCryptoRainbowLayer *) nil_chk(IOSObjectArray_Get(layer, i))) getVi] + j) = IOSShortArray_Get(solVec, j);
        }
      }
      
#line 177
      tmpVec = [((OrgBouncycastlePqcCryptoRainbowUtilComputeInField *) nil_chk(cf_)) addVectWithShortArray:[((OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters class])))) getB2] withShortArray:x_];
      signature = [cf_ multiplyMatrixWithShortArray2:[((OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters class])))) getInvA2] withShortArray:tmpVec];
      
#line 181
      for (jint i = 0; i < S->size_; i++) {
        
#line 183
        *IOSByteArray_GetRef(S, i) = (jbyte) IOSShortArray_Get(nil_chk(signature), i);
      }
    }
    @catch (JavaLangException *se) {
      
#line 189
      ok = false;
    }
  }
  while (!ok && ++itCount < OrgBouncycastlePqcCryptoRainbowRainbowSigner_MAXITS);
  
#line 195
  if (itCount == OrgBouncycastlePqcCryptoRainbowRainbowSigner_MAXITS) {
    
#line 197
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"unable to generate signature - LES not solvable");
  }
  
#line 200
  return S;
}


#line 211
- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                           withByteArray:(IOSByteArray *)signature {
  
#line 214
  IOSShortArray *sigInt = [IOSShortArray newArrayWithLength:((IOSByteArray *) nil_chk(signature))->size_];
  jshort tmp;
  
#line 217
  for (jint i = 0; i < signature->size_; i++) {
    
#line 219
    tmp = IOSByteArray_Get(signature, i);
    tmp &= (jshort) (jint) 0xff;
    *IOSShortArray_GetRef(sigInt, i) = tmp;
  }
  
#line 224
  IOSShortArray *msgHashVal = OrgBouncycastlePqcCryptoRainbowRainbowSigner_makeMessageRepresentativeWithByteArray_(self, message);
  
#line 227
  IOSShortArray *verificationResult = OrgBouncycastlePqcCryptoRainbowRainbowSigner_verifySignatureInternWithShortArray_(self, sigInt);
  
#line 230
  jboolean verified = true;
  if (((IOSShortArray *) nil_chk(msgHashVal))->size_ != ((IOSShortArray *) nil_chk(verificationResult))->size_) {
    
#line 233
    return false;
  }
  for (jint i = 0; i < msgHashVal->size_; i++) {
    
#line 237
    verified = (verified && IOSShortArray_Get(msgHashVal, i) == IOSShortArray_Get(verificationResult, i));
  }
  
#line 240
  return verified;
}


#line 249
- (IOSShortArray *)verifySignatureInternWithShortArray:(IOSShortArray *)signature {
  return OrgBouncycastlePqcCryptoRainbowRainbowSigner_verifySignatureInternWithShortArray_(self, signature);
}


#line 292
- (IOSShortArray *)makeMessageRepresentativeWithByteArray:(IOSByteArray *)message {
  return OrgBouncycastlePqcCryptoRainbowRainbowSigner_makeMessageRepresentativeWithByteArray_(self, message);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[S", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "[S", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "[S", 0x2, 10, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(initSignWithOrgBouncycastlePqcCryptoRainbowLayerArray:withShortArray:);
  methods[3].selector = @selector(generateSignatureWithByteArray:);
  methods[4].selector = @selector(verifySignatureWithByteArray:withByteArray:);
  methods[5].selector = @selector(verifySignatureInternWithShortArray:);
  methods[6].selector = @selector(makeMessageRepresentativeWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAXITS", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoRainbowRainbowSigner_MAXITS, 0x1a, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "signableDocumentLength_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "x_", "[S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cf_", "LOrgBouncycastlePqcCryptoRainbowUtilComputeInField;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "key_", "LOrgBouncycastlePqcCryptoRainbowRainbowKeyParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgBouncycastleCryptoCipherParameters;", "initSign", "[LOrgBouncycastlePqcCryptoRainbowLayer;[S", "generateSignature", "[B", "verifySignature", "[B[B", "verifySignatureIntern", "[S", "makeMessageRepresentative" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoRainbowRainbowSigner = { "RainbowSigner", "org.bouncycastle.pqc.crypto.rainbow", ptrTable, methods, fields, 7, 0x1, 7, 6, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoRainbowRainbowSigner;
}

@end


#line 22
void OrgBouncycastlePqcCryptoRainbowRainbowSigner_init(OrgBouncycastlePqcCryptoRainbowRainbowSigner *self) {
  NSObject_init(self);
  self->cf_ = new_OrgBouncycastlePqcCryptoRainbowUtilComputeInField_init();
}


#line 22
OrgBouncycastlePqcCryptoRainbowRainbowSigner *new_OrgBouncycastlePqcCryptoRainbowRainbowSigner_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoRainbowRainbowSigner, init)
}


#line 22
OrgBouncycastlePqcCryptoRainbowRainbowSigner *create_OrgBouncycastlePqcCryptoRainbowRainbowSigner_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoRainbowRainbowSigner, init)
}


#line 78
IOSShortArray *OrgBouncycastlePqcCryptoRainbowRainbowSigner_initSignWithOrgBouncycastlePqcCryptoRainbowLayerArray_withShortArray_(OrgBouncycastlePqcCryptoRainbowRainbowSigner *self, IOSObjectArray *layer, IOSShortArray *msg) {
  
#line 83
  IOSShortArray *tmpVec = [IOSShortArray newArrayWithLength:((IOSShortArray *) nil_chk(msg))->size_];
  
#line 85
  tmpVec = [((OrgBouncycastlePqcCryptoRainbowUtilComputeInField *) nil_chk(self->cf_)) addVectWithShortArray:[((OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) cast_chk(self->key_, [OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters class])))) getB1] withShortArray:msg];
  
#line 88
  IOSShortArray *Y_ = [self->cf_ multiplyMatrixWithShortArray2:[((OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) cast_chk(self->key_, [OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters class])))) getInvA1] withShortArray:tmpVec];
  
#line 91
  for (jint i = 0; i < [((OrgBouncycastlePqcCryptoRainbowLayer *) nil_chk(IOSObjectArray_Get(nil_chk(layer), 0))) getVi]; i++) {
    
#line 93
    *IOSShortArray_GetRef(nil_chk(self->x_), i) = (jshort) [((JavaSecuritySecureRandom *) nil_chk(self->random_)) nextInt];
    *IOSShortArray_GetRef(nil_chk(self->x_), i) = (jshort) (IOSShortArray_Get(self->x_, i) & OrgBouncycastlePqcCryptoRainbowUtilGF2Field_MASK);
  }
  
#line 97
  return Y_;
}


#line 249
IOSShortArray *OrgBouncycastlePqcCryptoRainbowRainbowSigner_verifySignatureInternWithShortArray_(OrgBouncycastlePqcCryptoRainbowRainbowSigner *self, IOSShortArray *signature) {
  
#line 252
  IOSObjectArray *coeff_quadratic = [((OrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters *) cast_chk(self->key_, [OrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters class])))) getCoeffQuadratic];
  IOSObjectArray *coeff_singular = [((OrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters *) cast_chk(self->key_, [OrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters class])))) getCoeffSingular];
  IOSShortArray *coeff_scalar = [((OrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters *) cast_chk(self->key_, [OrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters class])))) getCoeffScalar];
  
#line 256
  IOSShortArray *rslt = [IOSShortArray newArrayWithLength:((IOSObjectArray *) nil_chk(coeff_quadratic))->size_];
  jint n = ((IOSShortArray *) nil_chk(IOSObjectArray_Get(nil_chk(coeff_singular), 0)))->size_;
  jint offset = 0;
  jshort tmp = 0;
  
#line 261
  for (jint p = 0; p < coeff_quadratic->size_; p++) {
    
#line 263
    offset = 0;
    for (jint x = 0; x < n; x++) {
      
#line 267
      for (jint y = x; y < n; y++) {
        
#line 269
        tmp = OrgBouncycastlePqcCryptoRainbowUtilGF2Field_multElemWithShort_withShort_(IOSShortArray_Get(nil_chk(IOSObjectArray_Get(coeff_quadratic, p)), offset), OrgBouncycastlePqcCryptoRainbowUtilGF2Field_multElemWithShort_withShort_(IOSShortArray_Get(nil_chk(
#line 270
        signature), x), IOSShortArray_Get(signature, y)));
        *IOSShortArray_GetRef(rslt, p) = OrgBouncycastlePqcCryptoRainbowUtilGF2Field_addElemWithShort_withShort_(IOSShortArray_Get(rslt, p), tmp);
        offset++;
      }
      
#line 275
      tmp = OrgBouncycastlePqcCryptoRainbowUtilGF2Field_multElemWithShort_withShort_(IOSShortArray_Get(nil_chk(IOSObjectArray_Get(coeff_singular, p)), x), IOSShortArray_Get(nil_chk(signature), x));
      *IOSShortArray_GetRef(rslt, p) = OrgBouncycastlePqcCryptoRainbowUtilGF2Field_addElemWithShort_withShort_(IOSShortArray_Get(rslt, p), tmp);
    }
    
#line 279
    *IOSShortArray_GetRef(rslt, p) = OrgBouncycastlePqcCryptoRainbowUtilGF2Field_addElemWithShort_withShort_(IOSShortArray_Get(rslt, p), IOSShortArray_Get(nil_chk(coeff_scalar), p));
  }
  
#line 282
  return rslt;
}


#line 292
IOSShortArray *OrgBouncycastlePqcCryptoRainbowRainbowSigner_makeMessageRepresentativeWithByteArray_(OrgBouncycastlePqcCryptoRainbowRainbowSigner *self, IOSByteArray *message) {
  
#line 295
  IOSShortArray *output = [IOSShortArray newArrayWithLength:self->signableDocumentLength_];
  
#line 297
  jint h = 0;
  jint i = 0;
  do {
    
#line 301
    if (i >= ((IOSByteArray *) nil_chk(message))->size_) {
      
#line 303
      break;
    }
    *IOSShortArray_GetRef(output, i) = IOSByteArray_Get(message, h);
    *IOSShortArray_GetRef(output, i) &= (jshort) (jint) 0xff;
    h++;
    i++;
  }
  while (i < output->size_);
  
#line 312
  return output;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoRainbowRainbowSigner)
