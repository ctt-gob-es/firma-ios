//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/rainbow/RainbowKeyPairGenerator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator")
#ifdef RESTRICT_OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator 1
#endif
#undef RESTRICT_OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator

#if !defined (OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator || defined(INCLUDE_OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator))
#define OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_

#define RESTRICT_OrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator 1
#define INCLUDE_OrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator 1
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPairGenerator.h"

@class OrgBouncycastleCryptoAsymmetricCipherKeyPair;
@class OrgBouncycastleCryptoKeyGenerationParameters;

/*!
 @brief This class implements AsymmetricCipherKeyPairGenerator.It is used
  as a generator for the private and public key of the Rainbow Signature
  Scheme.
 <p>
  Detailed information about the key generation is to be found in the paper of
  Jintai Ding, Dieter Schmidt: Rainbow, a New Multivariable Polynomial
  Signature Scheme. ACNS 2005: 164-175 (https://dx.doi.org/10.1007/11496137_12)
 */
@interface OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator : NSObject < OrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator >

#pragma mark Public

/*!
 @brief The standard constructor tries to generate the Rainbow algorithm identifier
  with the corresponding OID.
 */
- (instancetype)init;

- (OrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair;

/*!
 @brief This function generates a Rainbow key pair.
 @return the generated key pair
 */
- (OrgBouncycastleCryptoAsymmetricCipherKeyPair *)genKeyPair;

- (void)init__WithOrgBouncycastleCryptoKeyGenerationParameters:(OrgBouncycastleCryptoKeyGenerationParameters *)param OBJC_METHOD_FAMILY_NONE;

- (void)initialize__WithOrgBouncycastleCryptoKeyGenerationParameters:(OrgBouncycastleCryptoKeyGenerationParameters *)param OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_init(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *new_OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *create_OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator")
