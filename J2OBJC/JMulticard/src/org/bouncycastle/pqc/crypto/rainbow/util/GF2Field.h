//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/rainbow/util/GF2Field.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoRainbowUtilGF2Field")
#ifdef RESTRICT_OrgBouncycastlePqcCryptoRainbowUtilGF2Field
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoRainbowUtilGF2Field 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoRainbowUtilGF2Field 1
#endif
#undef RESTRICT_OrgBouncycastlePqcCryptoRainbowUtilGF2Field

#if !defined (OrgBouncycastlePqcCryptoRainbowUtilGF2Field_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoRainbowUtilGF2Field || defined(INCLUDE_OrgBouncycastlePqcCryptoRainbowUtilGF2Field))
#define OrgBouncycastlePqcCryptoRainbowUtilGF2Field_

@class IOSShortArray;

/*!
 @brief This class provides the basic operations like addition, multiplication and
  finding the multiplicative inverse of an element in GF2^8.
 <p>
  The operations are implemented using the irreducible polynomial
  1+x^2+x^3+x^6+x^8 ( 1 0100 1101 = 0x14d ) 
 <p>
  This class makes use of lookup tables(exps and logs) for implementing the
  operations in order to increase the efficiency of Rainbow.
 */
@interface OrgBouncycastlePqcCryptoRainbowUtilGF2Field : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief This function calculates the sum of two elements as an operation in GF2^8
 @param x the first element that is to be added
 @param y the second element that should be add
 @return the sum of the two elements x and y in GF2^8
 */
+ (jshort)addElemWithShort:(jshort)x
                 withShort:(jshort)y;

/*!
 @brief This function returns the values of exps-lookup table which correspond to
  the input
 @param x the index in the lookup table exps
 @return exps-value, corresponding to the input
 */
+ (jshort)getExpWithShort:(jshort)x;

/*!
 @brief This function returns the values of logs-lookup table which correspond to
  the input
 @param x the index in the lookup table logs
 @return logs-value, corresponding to the input
 */
+ (jshort)getLogWithShort:(jshort)x;

/*!
 @brief This function computes the multiplicative inverse of a given element in
  GF2^8 The 0 has no multiplicative inverse and in this case 0 is returned.
 @param x the element which multiplicative inverse is to be computed
 @return the multiplicative inverse of the given element, in case it
          exists or 0, otherwise
 */
+ (jshort)invElemWithShort:(jshort)x;

/*!
 @brief This function multiplies two elements in GF2^8.If one of the two
  elements is 0, 0 is returned.
 @param x the first element to be multiplied.
 @param y the second element to be multiplied.
 @return the product of the two input elements in GF2^8.
 */
+ (jshort)multElemWithShort:(jshort)x
                  withShort:(jshort)y;

@end

J2OBJC_STATIC_INIT(OrgBouncycastlePqcCryptoRainbowUtilGF2Field)

inline jint OrgBouncycastlePqcCryptoRainbowUtilGF2Field_get_MASK(void);
#define OrgBouncycastlePqcCryptoRainbowUtilGF2Field_MASK 255
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoRainbowUtilGF2Field, MASK, jint)

inline IOSShortArray *OrgBouncycastlePqcCryptoRainbowUtilGF2Field_get_exps(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSShortArray *OrgBouncycastlePqcCryptoRainbowUtilGF2Field_exps;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcCryptoRainbowUtilGF2Field, exps, IOSShortArray *)

inline IOSShortArray *OrgBouncycastlePqcCryptoRainbowUtilGF2Field_get_logs(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSShortArray *OrgBouncycastlePqcCryptoRainbowUtilGF2Field_logs;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcCryptoRainbowUtilGF2Field, logs, IOSShortArray *)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoRainbowUtilGF2Field_init(OrgBouncycastlePqcCryptoRainbowUtilGF2Field *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoRainbowUtilGF2Field *new_OrgBouncycastlePqcCryptoRainbowUtilGF2Field_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoRainbowUtilGF2Field *create_OrgBouncycastlePqcCryptoRainbowUtilGF2Field_init(void);

FOUNDATION_EXPORT jshort OrgBouncycastlePqcCryptoRainbowUtilGF2Field_addElemWithShort_withShort_(jshort x, jshort y);

FOUNDATION_EXPORT jshort OrgBouncycastlePqcCryptoRainbowUtilGF2Field_invElemWithShort_(jshort x);

FOUNDATION_EXPORT jshort OrgBouncycastlePqcCryptoRainbowUtilGF2Field_multElemWithShort_withShort_(jshort x, jshort y);

FOUNDATION_EXPORT jshort OrgBouncycastlePqcCryptoRainbowUtilGF2Field_getExpWithShort_(jshort x);

FOUNDATION_EXPORT jshort OrgBouncycastlePqcCryptoRainbowUtilGF2Field_getLogWithShort_(jshort x);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoRainbowUtilGF2Field)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoRainbowUtilGF2Field")
