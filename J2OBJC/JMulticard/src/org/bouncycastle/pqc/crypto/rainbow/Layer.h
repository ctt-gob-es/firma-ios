//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/rainbow/Layer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoRainbowLayer")
#ifdef RESTRICT_OrgBouncycastlePqcCryptoRainbowLayer
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoRainbowLayer 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoRainbowLayer 1
#endif
#undef RESTRICT_OrgBouncycastlePqcCryptoRainbowLayer

#if !defined (OrgBouncycastlePqcCryptoRainbowLayer_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoRainbowLayer || defined(INCLUDE_OrgBouncycastlePqcCryptoRainbowLayer))
#define OrgBouncycastlePqcCryptoRainbowLayer_

@class IOSObjectArray;
@class IOSShortArray;
@class JavaSecuritySecureRandom;

/*!
 @brief This class represents a layer of the Rainbow Oil- and Vinegar Map.Each Layer
  consists of oi polynomials with their coefficients, generated at random.
 <p>
  To sign a document, we solve a LES (linear equation system) for each layer in
  order to find the oil variables of that layer and to be able to use the
  variables to compute the signature. This functionality is implemented in the
  RainbowSignature-class, by the aid of the private key. 
 <p>
  Each layer is a part of the private key. 
 <p>
  More information about the layer can be found in the paper of Jintai Ding,
  Dieter Schmidt: Rainbow, a New Multivariable Polynomial Signature Scheme.
  ACNS 2005: 164-175 (https://dx.doi.org/10.1007/11496137_12)
 */
@interface OrgBouncycastlePqcCryptoRainbowLayer : NSObject

#pragma mark Public

/*!
 @brief Constructor
 @param vi number of vinegar variables of this layer
 @param viNext number of vinegar variables of next layer. It's the same as                    (num of oils) + (num of vinegars) of this layer.
 @param coeffAlpha alpha-coefficients in the polynomials of this layer
 @param coeffBeta beta-coefficients in the polynomials of this layer
 @param coeffGamma gamma-coefficients in the polynomials of this layer
 @param coeffEta eta-coefficients in the polynomials of this layer
 */
- (instancetype)initWithByte:(jbyte)vi
                    withByte:(jbyte)viNext
             withShortArray3:(IOSObjectArray *)coeffAlpha
             withShortArray3:(IOSObjectArray *)coeffBeta
             withShortArray2:(IOSObjectArray *)coeffGamma
              withShortArray:(IOSShortArray *)coeffEta;

/*!
 @brief This function generates the coefficients of all polynomials in this layer
  at random using random generator.
 @param sr the random generator which is to be used
 */
- (instancetype)initWithInt:(jint)vi
                    withInt:(jint)viNext
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr;

/*!
 @brief This function compares this Layer with another object.
 @param other the other object
 @return the result of the comparison
 */
- (jboolean)isEqual:(id)other;

/*!
 @brief Getter for the alpha-coefficients of the polynomials in this layer.
 @return the coefficients of alpha-terms of this layer.
 */
- (IOSObjectArray *)getCoeffAlpha;

/*!
 @brief Getter for the beta-coefficients of the polynomials in this layer.
 @return the coefficients of beta-terms of this layer.
 */
- (IOSObjectArray *)getCoeffBeta;

/*!
 @brief Getter for the eta-coefficients of the polynomials in this layer.
 @return the coefficients eta of this layer
 */
- (IOSShortArray *)getCoeffEta;

/*!
 @brief Getter for the gamma-coefficients of the polynomials in this layer.
 @return the coefficients of gamma-terms of this layer
 */
- (IOSObjectArray *)getCoeffGamma;

/*!
 @brief Getter for the number of Oil variables of this layer.
 @return the number of oil variables of this layer.
 */
- (jint)getOi;

/*!
 @brief Getter for the number of vinegar variables of this layer.
 @return the number of vinegar variables of this layer.
 */
- (jint)getVi;

/*!
 @brief Getter for the number of vinegar variables of the next layer.
 @return the number of vinegar variables of the next layer.
 */
- (jint)getViNext;

- (NSUInteger)hash;

/*!
 @brief This method plugs in the vinegar variables into the polynomials of this
  layer and computes the coefficients of the Oil-variables as well as the
  free coefficient in each polynomial.
 <p>
  It is needed for computing the Oil variables while signing.
 @param x vinegar variables of this layer that should be plugged into           the polynomials.
 @return coeff the coefficients of Oil variables and the free coeff in the
          polynomials of this layer.
 */
- (IOSObjectArray *)plugInVinegarsWithShortArray:(IOSShortArray *)x;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoRainbowLayer)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoRainbowLayer_initWithByte_withByte_withShortArray3_withShortArray3_withShortArray2_withShortArray_(OrgBouncycastlePqcCryptoRainbowLayer *self, jbyte vi, jbyte viNext, IOSObjectArray *coeffAlpha, IOSObjectArray *coeffBeta, IOSObjectArray *coeffGamma, IOSShortArray *coeffEta);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoRainbowLayer *new_OrgBouncycastlePqcCryptoRainbowLayer_initWithByte_withByte_withShortArray3_withShortArray3_withShortArray2_withShortArray_(jbyte vi, jbyte viNext, IOSObjectArray *coeffAlpha, IOSObjectArray *coeffBeta, IOSObjectArray *coeffGamma, IOSShortArray *coeffEta) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoRainbowLayer *create_OrgBouncycastlePqcCryptoRainbowLayer_initWithByte_withByte_withShortArray3_withShortArray3_withShortArray2_withShortArray_(jbyte vi, jbyte viNext, IOSObjectArray *coeffAlpha, IOSObjectArray *coeffBeta, IOSObjectArray *coeffGamma, IOSShortArray *coeffEta);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoRainbowLayer_initWithInt_withInt_withJavaSecuritySecureRandom_(OrgBouncycastlePqcCryptoRainbowLayer *self, jint vi, jint viNext, JavaSecuritySecureRandom *sr);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoRainbowLayer *new_OrgBouncycastlePqcCryptoRainbowLayer_initWithInt_withInt_withJavaSecuritySecureRandom_(jint vi, jint viNext, JavaSecuritySecureRandom *sr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoRainbowLayer *create_OrgBouncycastlePqcCryptoRainbowLayer_initWithInt_withInt_withJavaSecuritySecureRandom_(jint vi, jint viNext, JavaSecuritySecureRandom *sr);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoRainbowLayer)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoRainbowLayer")
