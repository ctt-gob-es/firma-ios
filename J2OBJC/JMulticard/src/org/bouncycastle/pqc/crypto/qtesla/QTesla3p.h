//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/qtesla/QTesla3p.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTesla3p")
#ifdef RESTRICT_OrgBouncycastlePqcCryptoQteslaQTesla3p
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTesla3p 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTesla3p 1
#endif
#undef RESTRICT_OrgBouncycastlePqcCryptoQteslaQTesla3p

#if !defined (OrgBouncycastlePqcCryptoQteslaQTesla3p_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTesla3p || defined(INCLUDE_OrgBouncycastlePqcCryptoQteslaQTesla3p))
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_

@class IOSByteArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSShortArray;
@class JavaSecuritySecureRandom;

@interface OrgBouncycastlePqcCryptoQteslaQTesla3p : NSObject

#pragma mark Package-Private

- (instancetype)initPackagePrivate;

+ (jint)atWithByteArray:(IOSByteArray *)bs
                withInt:(jint)base
                withInt:(jint)index;

+ (void)decodePublicKeyWithIntArray:(IOSIntArray *)publicKey
                      withByteArray:(IOSByteArray *)seedA
                            withInt:(jint)seedAOffset
                      withByteArray:(IOSByteArray *)publicKeyInput;

+ (void)decodeSignatureWithByteArray:(IOSByteArray *)C
                       withLongArray:(IOSLongArray *)Z
                       withByteArray:(IOSByteArray *)signature
                             withInt:(jint)signatureOffset;

+ (void)encodeCWithIntArray:(IOSIntArray *)positionList
             withShortArray:(IOSShortArray *)signList
              withByteArray:(IOSByteArray *)output
                    withInt:(jint)outputOffset;

+ (void)encodePrivateKeyWithByteArray:(IOSByteArray *)privateKey
                        withLongArray:(IOSLongArray *)secretPolynomial
                        withLongArray:(IOSLongArray *)errorPolynomial
                        withByteArray:(IOSByteArray *)seed
                              withInt:(jint)seedOffset
                        withByteArray:(IOSByteArray *)publicKey;

+ (void)encodePublicKeyWithByteArray:(IOSByteArray *)publicKey
                       withLongArray:(IOSLongArray *)T
                       withByteArray:(IOSByteArray *)seedA
                             withInt:(jint)seedAOffset;

+ (void)encodeSignatureWithByteArray:(IOSByteArray *)signature
                             withInt:(jint)signatureOffset
                       withByteArray:(IOSByteArray *)C
                             withInt:(jint)cOffset
                       withLongArray:(IOSLongArray *)Z;

+ (jint)generateKeyPairWithByteArray:(IOSByteArray *)publicKey
                       withByteArray:(IOSByteArray *)privateKey
        withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

+ (jint)generateSignatureWithByteArray:(IOSByteArray *)signature
                         withByteArray:(IOSByteArray *)message
                               withInt:(jint)messageOffset
                               withInt:(jint)messageLength
                         withByteArray:(IOSByteArray *)privateKey
          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

+ (jint)lE24BitToIntWithByteArray:(IOSByteArray *)bs
                          withInt:(jint)off;

+ (jboolean)memoryEqualWithByteArray:(IOSByteArray *)left
                             withInt:(jint)leftOffset
                       withByteArray:(IOSByteArray *)right
                             withInt:(jint)rightOffset
                             withInt:(jint)length;

+ (void)sample_yWithLongArray:(IOSLongArray *)y
                withByteArray:(IOSByteArray *)seed
                      withInt:(jint)seedOffset
                      withInt:(jint)nonce;

+ (jboolean)test_correctnessWithLongArray:(IOSLongArray *)v
                                  withInt:(jint)vpos;

+ (jint)verifyingWithByteArray:(IOSByteArray *)message
                 withByteArray:(IOSByteArray *)signature
                       withInt:(jint)signatureOffset
                       withInt:(jint)signatureLength
                 withByteArray:(IOSByteArray *)publicKey;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoQteslaQTesla3p)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_CRYPTO_BYTES(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_BYTES 5664
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, CRYPTO_BYTES, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_CRYPTO_SECRETKEYBYTES(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SECRETKEYBYTES 12392
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, CRYPTO_SECRETKEYBYTES, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_CRYPTO_PUBLICKEYBYTES(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_PUBLICKEYBYTES 38432
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, CRYPTO_PUBLICKEYBYTES, jint)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_initPackagePrivate(OrgBouncycastlePqcCryptoQteslaQTesla3p *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoQteslaQTesla3p *new_OrgBouncycastlePqcCryptoQteslaQTesla3p_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoQteslaQTesla3p *create_OrgBouncycastlePqcCryptoQteslaQTesla3p_initPackagePrivate(void);

FOUNDATION_EXPORT jint OrgBouncycastlePqcCryptoQteslaQTesla3p_generateKeyPairWithByteArray_withByteArray_withJavaSecuritySecureRandom_(IOSByteArray *publicKey, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT jint OrgBouncycastlePqcCryptoQteslaQTesla3p_generateSignatureWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(IOSByteArray *signature, IOSByteArray *message, jint messageOffset, jint messageLength, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT jint OrgBouncycastlePqcCryptoQteslaQTesla3p_verifyingWithByteArray_withByteArray_withInt_withInt_withByteArray_(IOSByteArray *message, IOSByteArray *signature, jint signatureOffset, jint signatureLength, IOSByteArray *publicKey);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_encodePrivateKeyWithByteArray_withLongArray_withLongArray_withByteArray_withInt_withByteArray_(IOSByteArray *privateKey, IOSLongArray *secretPolynomial, IOSLongArray *errorPolynomial, IOSByteArray *seed, jint seedOffset, IOSByteArray *publicKey);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_encodePublicKeyWithByteArray_withLongArray_withByteArray_withInt_(IOSByteArray *publicKey, IOSLongArray *T, IOSByteArray *seedA, jint seedAOffset);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_decodePublicKeyWithIntArray_withByteArray_withInt_withByteArray_(IOSIntArray *publicKey, IOSByteArray *seedA, jint seedAOffset, IOSByteArray *publicKeyInput);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_encodeSignatureWithByteArray_withInt_withByteArray_withInt_withLongArray_(IOSByteArray *signature, jint signatureOffset, IOSByteArray *C, jint cOffset, IOSLongArray *Z);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_decodeSignatureWithByteArray_withLongArray_withByteArray_withInt_(IOSByteArray *C, IOSLongArray *Z, IOSByteArray *signature, jint signatureOffset);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_encodeCWithIntArray_withShortArray_withByteArray_withInt_(IOSIntArray *positionList, IOSShortArray *signList, IOSByteArray *output, jint outputOffset);

FOUNDATION_EXPORT jint OrgBouncycastlePqcCryptoQteslaQTesla3p_lE24BitToIntWithByteArray_withInt_(IOSByteArray *bs, jint off);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_sample_yWithLongArray_withByteArray_withInt_withInt_(IOSLongArray *y, IOSByteArray *seed, jint seedOffset, jint nonce);

FOUNDATION_EXPORT jint OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(IOSByteArray *bs, jint base, jint index);

FOUNDATION_EXPORT jboolean OrgBouncycastlePqcCryptoQteslaQTesla3p_test_correctnessWithLongArray_withInt_(IOSLongArray *v, jint vpos);

FOUNDATION_EXPORT jboolean OrgBouncycastlePqcCryptoQteslaQTesla3p_memoryEqualWithByteArray_withInt_withByteArray_withInt_withInt_(IOSByteArray *left, jint leftOffset, IOSByteArray *right, jint rightOffset, jint length);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoQteslaQTesla3p)

#endif

#if !defined (OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTesla3p || defined(INCLUDE_OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian))
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_

@class IOSByteArray;
@class IOSLongArray;

@interface OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian : NSObject

#pragma mark Package-Private

- (instancetype)init;

+ (void)sample_gauss_polyWithInt:(jint)nonce
                   withByteArray:(IOSByteArray *)seed
                         withInt:(jint)seedOffset
                   withLongArray:(IOSLongArray *)poly
                         withInt:(jint)polyOffset;

@end

J2OBJC_STATIC_INIT(OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_init(OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian *new_OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian *create_OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_init(void);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_sample_gauss_polyWithInt_withByteArray_withInt_withLongArray_withInt_(jint nonce, IOSByteArray *seed, jint seedOffset, IOSLongArray *poly, jint polyOffset);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian)

#endif

#if !defined (OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTesla3p || defined(INCLUDE_OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial))
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_

@class IOSByteArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSShortArray;

@interface OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial : NSObject

#pragma mark Package-Private

- (instancetype)init;

+ (jlong)barr_reduceWithLong:(jlong)a;

+ (void)nttWithLongArray:(IOSLongArray *)a
           withLongArray:(IOSLongArray *)w;

+ (void)nttinvWithLongArray:(IOSLongArray *)a
                    withInt:(jint)aPos
              withLongArray:(IOSLongArray *)w;

+ (void)nttinvWithLongArray:(IOSLongArray *)a
              withLongArray:(IOSLongArray *)w;

+ (void)poly_addWithLongArray:(IOSLongArray *)result
                withLongArray:(IOSLongArray *)x
                withLongArray:(IOSLongArray *)y;

+ (void)poly_add_correctWithLongArray:(IOSLongArray *)result
                              withInt:(jint)rpos
                        withLongArray:(IOSLongArray *)x
                              withInt:(jint)xpos
                        withLongArray:(IOSLongArray *)y
                              withInt:(jint)ypos;

+ (void)poly_mulWithLongArray:(IOSLongArray *)result
                      withInt:(jint)rpos
                withLongArray:(IOSLongArray *)x
                      withInt:(jint)xpos
                withLongArray:(IOSLongArray *)y;

+ (void)poly_mulWithLongArray:(IOSLongArray *)result
                withLongArray:(IOSLongArray *)x
                withLongArray:(IOSLongArray *)y;

+ (void)poly_nttWithLongArray:(IOSLongArray *)x_ntt
                withLongArray:(IOSLongArray *)x;

+ (void)poly_pointwiseWithLongArray:(IOSLongArray *)result
                            withInt:(jint)rpos
                      withLongArray:(IOSLongArray *)x
                            withInt:(jint)xpos
                      withLongArray:(IOSLongArray *)y;

+ (void)poly_pointwiseWithLongArray:(IOSLongArray *)result
                      withLongArray:(IOSLongArray *)x
                      withLongArray:(IOSLongArray *)y;

+ (void)poly_subWithLongArray:(IOSLongArray *)result
                      withInt:(jint)rpos
                withLongArray:(IOSLongArray *)x
                      withInt:(jint)xpos
                withLongArray:(IOSLongArray *)y
                      withInt:(jint)ypos;

+ (void)poly_sub_correctWithIntArray:(IOSIntArray *)result
                        withIntArray:(IOSIntArray *)x
                        withIntArray:(IOSIntArray *)y;

+ (void)poly_uniformWithLongArray:(IOSLongArray *)a
                    withByteArray:(IOSByteArray *)seed
                          withInt:(jint)seedOffset;

+ (jlong)reduceWithLong:(jlong)a;

+ (void)sparse_mul16WithIntArray:(IOSIntArray *)prod
                    withIntArray:(IOSIntArray *)s
                    withIntArray:(IOSIntArray *)pos_list
                  withShortArray:(IOSShortArray *)sign_list;

+ (void)sparse_mul32WithIntArray:(IOSIntArray *)prod
                    withIntArray:(IOSIntArray *)pk
                    withIntArray:(IOSIntArray *)pos_list
                  withShortArray:(IOSShortArray *)sign_list;

+ (void)sparse_mul32WithLongArray:(IOSLongArray *)prod
                          withInt:(jint)ppos
                     withIntArray:(IOSIntArray *)pk
                          withInt:(jint)pkPos
                     withIntArray:(IOSIntArray *)pos_list
                   withShortArray:(IOSShortArray *)sign_list;

+ (void)sparse_mul8WithLongArray:(IOSLongArray *)prod
                   withByteArray:(IOSByteArray *)s
                    withIntArray:(IOSIntArray *)pos_list
                  withShortArray:(IOSShortArray *)sign_list;

+ (void)sparse_mul8WithLongArray:(IOSLongArray *)prod
                         withInt:(jint)ppos
                   withByteArray:(IOSByteArray *)s
                         withInt:(jint)spos
                    withIntArray:(IOSIntArray *)pos_list
                  withShortArray:(IOSShortArray *)sign_list;

@end

J2OBJC_STATIC_INIT(OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_init(OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial *new_OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial *create_OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_init(void);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_uniformWithLongArray_withByteArray_withInt_(IOSLongArray *a, IOSByteArray *seed, jint seedOffset);

FOUNDATION_EXPORT jlong OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_reduceWithLong_(jlong a);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_nttWithLongArray_withLongArray_(IOSLongArray *a, IOSLongArray *w);

FOUNDATION_EXPORT jlong OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_barr_reduceWithLong_(jlong a);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_nttinvWithLongArray_withLongArray_(IOSLongArray *a, IOSLongArray *w);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_nttinvWithLongArray_withInt_withLongArray_(IOSLongArray *a, jint aPos, IOSLongArray *w);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_nttWithLongArray_withLongArray_(IOSLongArray *x_ntt, IOSLongArray *x);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_pointwiseWithLongArray_withLongArray_withLongArray_(IOSLongArray *result, IOSLongArray *x, IOSLongArray *y);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_pointwiseWithLongArray_withInt_withLongArray_withInt_withLongArray_(IOSLongArray *result, jint rpos, IOSLongArray *x, jint xpos, IOSLongArray *y);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_mulWithLongArray_withLongArray_withLongArray_(IOSLongArray *result, IOSLongArray *x, IOSLongArray *y);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_mulWithLongArray_withInt_withLongArray_withInt_withLongArray_(IOSLongArray *result, jint rpos, IOSLongArray *x, jint xpos, IOSLongArray *y);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_addWithLongArray_withLongArray_withLongArray_(IOSLongArray *result, IOSLongArray *x, IOSLongArray *y);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_subWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_(IOSLongArray *result, jint rpos, IOSLongArray *x, jint xpos, IOSLongArray *y, jint ypos);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_add_correctWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_(IOSLongArray *result, jint rpos, IOSLongArray *x, jint xpos, IOSLongArray *y, jint ypos);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_sub_correctWithIntArray_withIntArray_withIntArray_(IOSIntArray *result, IOSIntArray *x, IOSIntArray *y);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_sparse_mul8WithLongArray_withInt_withByteArray_withInt_withIntArray_withShortArray_(IOSLongArray *prod, jint ppos, IOSByteArray *s, jint spos, IOSIntArray *pos_list, IOSShortArray *sign_list);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_sparse_mul8WithLongArray_withByteArray_withIntArray_withShortArray_(IOSLongArray *prod, IOSByteArray *s, IOSIntArray *pos_list, IOSShortArray *sign_list);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_sparse_mul16WithIntArray_withIntArray_withIntArray_withShortArray_(IOSIntArray *prod, IOSIntArray *s, IOSIntArray *pos_list, IOSShortArray *sign_list);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_sparse_mul32WithIntArray_withIntArray_withIntArray_withShortArray_(IOSIntArray *prod, IOSIntArray *pk, IOSIntArray *pos_list, IOSShortArray *sign_list);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_sparse_mul32WithLongArray_withInt_withIntArray_withInt_withIntArray_withShortArray_(IOSLongArray *prod, jint ppos, IOSIntArray *pk, jint pkPos, IOSIntArray *pos_list, IOSShortArray *sign_list);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTesla3p")
