//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/qtesla/QTesla3p.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/pqc/crypto/qtesla/HashUtils.h"
#include "org/bouncycastle/pqc/crypto/qtesla/QTesla3p.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/Pack.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/qtesla/QTesla3p must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoQteslaQTesla3p ()

+ (jboolean)testZWithLongArray:(IOSLongArray *)Z;

+ (void)hashFunctionWithByteArray:(IOSByteArray *)output
                          withInt:(jint)outputOff
                    withLongArray:(IOSLongArray *)v
                    withByteArray:(IOSByteArray *)hm
                          withInt:(jint)hmOff;

+ (void)atWithByteArray:(IOSByteArray *)bs
                withInt:(jint)base
                withInt:(jint)index
                withInt:(jint)value;

+ (jboolean)testRejectionWithLongArray:(IOSLongArray *)Z;

+ (jint)absoluteWithInt:(jint)value;

+ (jlong)absoluteWithLong:(jlong)value;

+ (jboolean)checkPolynomialWithLongArray:(IOSLongArray *)polynomial
                                 withInt:(jint)polyOffset
                                 withInt:(jint)bound;

@end

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_PARAM_N(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N 2048
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, PARAM_N, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_PARAM_Q(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q 856145921
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, PARAM_Q, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_PARAM_Q_LOG(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q_LOG 30
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, PARAM_Q_LOG, jint)

inline jlong OrgBouncycastlePqcCryptoQteslaQTesla3p_get_PARAM_QINV(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_QINV 587710463LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, PARAM_QINV, jlong)

inline jlong OrgBouncycastlePqcCryptoQteslaQTesla3p_get_PARAM_BARR_MULT(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_BARR_MULT 5LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, PARAM_BARR_MULT, jlong)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_PARAM_BARR_DIV(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_BARR_DIV 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, PARAM_BARR_DIV, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_PARAM_B(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_B 2097151
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, PARAM_B, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_PARAM_B_BITS(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_B_BITS 21
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, PARAM_B_BITS, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_PARAM_K(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, PARAM_K, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_PARAM_H(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_H 40
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, PARAM_H, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_PARAM_D(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_D 24
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, PARAM_D, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_PARAM_GEN_A(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_GEN_A 180
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, PARAM_GEN_A, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_PARAM_KEYGEN_BOUND_E(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_KEYGEN_BOUND_E 901
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, PARAM_KEYGEN_BOUND_E, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_PARAM_E(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_E 901
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, PARAM_E, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_PARAM_KEYGEN_BOUND_S(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_KEYGEN_BOUND_S 901
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, PARAM_KEYGEN_BOUND_S, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_PARAM_S(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_S 901
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, PARAM_S, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_PARAM_R2_INVN(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_R2_INVN 513161157
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, PARAM_R2_INVN, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_CRYPTO_RANDOMBYTES(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_RANDOMBYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, CRYPTO_RANDOMBYTES, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_CRYPTO_SEEDBYTES(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, CRYPTO_SEEDBYTES, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_CRYPTO_C_BYTES(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_C_BYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, CRYPTO_C_BYTES, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_HM_BYTES(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_HM_BYTES 40
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, HM_BYTES, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_RADIX32(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_RADIX32 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, RADIX32, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_maskb1(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_maskb1 4194303
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p, maskb1, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_NBLOCKS_SHAKE(void);
inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_set_NBLOCKS_SHAKE(jint value);
inline jint *OrgBouncycastlePqcCryptoQteslaQTesla3p_getRef_NBLOCKS_SHAKE(void);
static jint OrgBouncycastlePqcCryptoQteslaQTesla3p_NBLOCKS_SHAKE = 56;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgBouncycastlePqcCryptoQteslaQTesla3p, NBLOCKS_SHAKE, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_get_BPLUS1BYTES(void);
inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_set_BPLUS1BYTES(jint value);
inline jint *OrgBouncycastlePqcCryptoQteslaQTesla3p_getRef_BPLUS1BYTES(void);
static jint OrgBouncycastlePqcCryptoQteslaQTesla3p_BPLUS1BYTES = 3;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgBouncycastlePqcCryptoQteslaQTesla3p, BPLUS1BYTES, jint)

__attribute__((unused)) static jboolean OrgBouncycastlePqcCryptoQteslaQTesla3p_testZWithLongArray_(IOSLongArray *Z);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoQteslaQTesla3p_hashFunctionWithByteArray_withInt_withLongArray_withByteArray_withInt_(IOSByteArray *output, jint outputOff, IOSLongArray *v, IOSByteArray *hm, jint hmOff);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(IOSByteArray *bs, jint base, jint index, jint value);

__attribute__((unused)) static jboolean OrgBouncycastlePqcCryptoQteslaQTesla3p_testRejectionWithLongArray_(IOSLongArray *Z);

__attribute__((unused)) static jint OrgBouncycastlePqcCryptoQteslaQTesla3p_absoluteWithInt_(jint value);

__attribute__((unused)) static jlong OrgBouncycastlePqcCryptoQteslaQTesla3p_absoluteWithLong_(jlong value);

__attribute__((unused)) static jboolean OrgBouncycastlePqcCryptoQteslaQTesla3p_checkPolynomialWithLongArray_withInt_withInt_(IOSLongArray *polynomial, jint polyOffset, jint bound);

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_get_CDT_ROWS(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_CDT_ROWS 111
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian, CDT_ROWS, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_get_CDT_COLS(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_CDT_COLS 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian, CDT_COLS, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_get_CHUNK_SIZE(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_CHUNK_SIZE 512
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian, CHUNK_SIZE, jint)

inline IOSLongArray *OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_get_cdt_v(void);
static IOSLongArray *OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_cdt_v;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian, cdt_v, IOSLongArray *)

inline IOSLongArray *OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_get_zeta(void);
static IOSLongArray *OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_zeta;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial, zeta, IOSLongArray *)

inline IOSLongArray *OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_get_zetainv(void);
static IOSLongArray *OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_zetainv;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial, zetainv, IOSLongArray *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/qtesla/QTesla3p.java"


#line 8
@implementation OrgBouncycastlePqcCryptoQteslaQTesla3p


#line 8
- (instancetype)initPackagePrivate {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initPackagePrivate(self);
  return self;
}


#line 48
+ (jint)generateKeyPairWithByteArray:(IOSByteArray *)publicKey
                       withByteArray:(IOSByteArray *)privateKey
        withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  return OrgBouncycastlePqcCryptoQteslaQTesla3p_generateKeyPairWithByteArray_withByteArray_withJavaSecuritySecureRandom_(publicKey, privateKey, secureRandom);
}


#line 114
+ (jint)generateSignatureWithByteArray:(IOSByteArray *)signature
                         withByteArray:(IOSByteArray *)message
                               withInt:(jint)messageOffset
                               withInt:(jint)messageLength
                         withByteArray:(IOSByteArray *)privateKey
          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  return OrgBouncycastlePqcCryptoQteslaQTesla3p_generateSignatureWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(signature, message, messageOffset, messageLength, privateKey, secureRandom);
}


#line 202
+ (jint)verifyingWithByteArray:(IOSByteArray *)message
                 withByteArray:(IOSByteArray *)signature
                       withInt:(jint)signatureOffset
                       withInt:(jint)signatureLength
                 withByteArray:(IOSByteArray *)publicKey {
  return OrgBouncycastlePqcCryptoQteslaQTesla3p_verifyingWithByteArray_withByteArray_withInt_withInt_withByteArray_(message, signature, signatureOffset, signatureLength, publicKey);
}


#line 264
+ (void)encodePrivateKeyWithByteArray:(IOSByteArray *)privateKey
                        withLongArray:(IOSLongArray *)secretPolynomial
                        withLongArray:(IOSLongArray *)errorPolynomial
                        withByteArray:(IOSByteArray *)seed
                              withInt:(jint)seedOffset
                        withByteArray:(IOSByteArray *)publicKey {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_encodePrivateKeyWithByteArray_withLongArray_withLongArray_withByteArray_withInt_withByteArray_(privateKey, secretPolynomial, errorPolynomial, seed, seedOffset, publicKey);
}


#line 297
+ (void)encodePublicKeyWithByteArray:(IOSByteArray *)publicKey
                       withLongArray:(IOSLongArray *)T
                       withByteArray:(IOSByteArray *)seedA
                             withInt:(jint)seedAOffset {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_encodePublicKeyWithByteArray_withLongArray_withByteArray_withInt_(publicKey, T, seedA, seedAOffset);
}


#line 326
+ (void)decodePublicKeyWithIntArray:(IOSIntArray *)publicKey
                      withByteArray:(IOSByteArray *)seedA
                            withInt:(jint)seedAOffset
                      withByteArray:(IOSByteArray *)publicKeyInput {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_decodePublicKeyWithIntArray_withByteArray_withInt_withByteArray_(publicKey, seedA, seedAOffset, publicKeyInput);
}


#line 360
+ (jboolean)testZWithLongArray:(IOSLongArray *)Z {
  return OrgBouncycastlePqcCryptoQteslaQTesla3p_testZWithLongArray_(Z);
}


#line 382
+ (void)encodeSignatureWithByteArray:(IOSByteArray *)signature
                             withInt:(jint)signatureOffset
                       withByteArray:(IOSByteArray *)C
                             withInt:(jint)cOffset
                       withLongArray:(IOSLongArray *)Z {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_encodeSignatureWithByteArray_withInt_withByteArray_withInt_withLongArray_(signature, signatureOffset, C, cOffset, Z);
}


#line 405
+ (void)decodeSignatureWithByteArray:(IOSByteArray *)C
                       withLongArray:(IOSLongArray *)Z
                       withByteArray:(IOSByteArray *)signature
                             withInt:(jint)signatureOffset {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_decodeSignatureWithByteArray_withLongArray_withByteArray_withInt_(C, Z, signature, signatureOffset);
}


#line 443
+ (void)encodeCWithIntArray:(IOSIntArray *)positionList
             withShortArray:(IOSShortArray *)signList
              withByteArray:(IOSByteArray *)output
                    withInt:(jint)outputOffset {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_encodeCWithIntArray_withShortArray_withByteArray_withInt_(positionList, signList, output, outputOffset);
}


#line 504
+ (void)hashFunctionWithByteArray:(IOSByteArray *)output
                          withInt:(jint)outputOff
                    withLongArray:(IOSLongArray *)v
                    withByteArray:(IOSByteArray *)hm
                          withInt:(jint)hmOff {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_hashFunctionWithByteArray_withInt_withLongArray_withByteArray_withInt_(output, outputOff, v, hm, hmOff);
}


#line 534
+ (jint)lE24BitToIntWithByteArray:(IOSByteArray *)bs
                          withInt:(jint)off {
  return OrgBouncycastlePqcCryptoQteslaQTesla3p_lE24BitToIntWithByteArray_withInt_(bs, off);
}


#line 547
+ (void)sample_yWithLongArray:(IOSLongArray *)y
                withByteArray:(IOSByteArray *)seed
                      withInt:(jint)seedOffset
                      withInt:(jint)nonce {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_sample_yWithLongArray_withByteArray_withInt_withInt_(y, seed, seedOffset, nonce);
}


#line 580
+ (void)atWithByteArray:(IOSByteArray *)bs
                withInt:(jint)base
                withInt:(jint)index
                withInt:(jint)value {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(bs, base, index, value);
}


#line 585
+ (jint)atWithByteArray:(IOSByteArray *)bs
                withInt:(jint)base
                withInt:(jint)index {
  return OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(bs, base, index);
}


#line 597
+ (jboolean)test_correctnessWithLongArray:(IOSLongArray *)v
                                  withInt:(jint)vpos {
  return OrgBouncycastlePqcCryptoQteslaQTesla3p_test_correctnessWithLongArray_withInt_(v, vpos);
}


#line 627
+ (jboolean)testRejectionWithLongArray:(IOSLongArray *)Z {
  return OrgBouncycastlePqcCryptoQteslaQTesla3p_testRejectionWithLongArray_(Z);
}


#line 642
+ (jint)absoluteWithInt:(jint)value {
  return OrgBouncycastlePqcCryptoQteslaQTesla3p_absoluteWithInt_(value);
}


#line 649
+ (jlong)absoluteWithLong:(jlong)value {
  return OrgBouncycastlePqcCryptoQteslaQTesla3p_absoluteWithLong_(value);
}


#line 657
+ (jboolean)checkPolynomialWithLongArray:(IOSLongArray *)polynomial
                                 withInt:(jint)polyOffset
                                 withInt:(jint)bound {
  return OrgBouncycastlePqcCryptoQteslaQTesla3p_checkPolynomialWithLongArray_withInt_withInt_(polynomial, polyOffset, bound);
}


#line 848
+ (jboolean)memoryEqualWithByteArray:(IOSByteArray *)left
                             withInt:(jint)leftOffset
                       withByteArray:(IOSByteArray *)right
                             withInt:(jint)rightOffset
                             withInt:(jint)length {
  return OrgBouncycastlePqcCryptoQteslaQTesla3p_memoryEqualWithByteArray_withInt_withByteArray_withInt_withInt_(left, leftOffset, right, rightOffset, length);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 16, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 19, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 25, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 25, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 28, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 30, 13, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 31, 32, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 31, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 34, 35, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 36, 37, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(generateKeyPairWithByteArray:withByteArray:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(generateSignatureWithByteArray:withByteArray:withInt:withInt:withByteArray:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(verifyingWithByteArray:withByteArray:withInt:withInt:withByteArray:);
  methods[4].selector = @selector(encodePrivateKeyWithByteArray:withLongArray:withLongArray:withByteArray:withInt:withByteArray:);
  methods[5].selector = @selector(encodePublicKeyWithByteArray:withLongArray:withByteArray:withInt:);
  methods[6].selector = @selector(decodePublicKeyWithIntArray:withByteArray:withInt:withByteArray:);
  methods[7].selector = @selector(testZWithLongArray:);
  methods[8].selector = @selector(encodeSignatureWithByteArray:withInt:withByteArray:withInt:withLongArray:);
  methods[9].selector = @selector(decodeSignatureWithByteArray:withLongArray:withByteArray:withInt:);
  methods[10].selector = @selector(encodeCWithIntArray:withShortArray:withByteArray:withInt:);
  methods[11].selector = @selector(hashFunctionWithByteArray:withInt:withLongArray:withByteArray:withInt:);
  methods[12].selector = @selector(lE24BitToIntWithByteArray:withInt:);
  methods[13].selector = @selector(sample_yWithLongArray:withByteArray:withInt:withInt:);
  methods[14].selector = @selector(atWithByteArray:withInt:withInt:withInt:);
  methods[15].selector = @selector(atWithByteArray:withInt:withInt:);
  methods[16].selector = @selector(test_correctnessWithLongArray:withInt:);
  methods[17].selector = @selector(testRejectionWithLongArray:);
  methods[18].selector = @selector(absoluteWithInt:);
  methods[19].selector = @selector(absoluteWithLong:);
  methods[20].selector = @selector(checkPolynomialWithLongArray:withInt:withInt:);
  methods[21].selector = @selector(memoryEqualWithByteArray:withInt:withByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PARAM_N", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, 0x1a, -1, -1, -1, -1 },
    { "PARAM_Q", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q, 0x1a, -1, -1, -1, -1 },
    { "PARAM_Q_LOG", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q_LOG, 0x1a, -1, -1, -1, -1 },
    { "PARAM_QINV", "J", .constantValue.asLong = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_QINV, 0x1a, -1, -1, -1, -1 },
    { "PARAM_BARR_MULT", "J", .constantValue.asLong = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_BARR_MULT, 0x1a, -1, -1, -1, -1 },
    { "PARAM_BARR_DIV", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_BARR_DIV, 0x1a, -1, -1, -1, -1 },
    { "PARAM_B", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_B, 0x1a, -1, -1, -1, -1 },
    { "PARAM_B_BITS", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_B_BITS, 0x1a, -1, -1, -1, -1 },
    { "PARAM_K", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K, 0x1a, -1, -1, -1, -1 },
    { "PARAM_H", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_H, 0x1a, -1, -1, -1, -1 },
    { "PARAM_D", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_D, 0x1a, -1, -1, -1, -1 },
    { "PARAM_GEN_A", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_GEN_A, 0x1a, -1, -1, -1, -1 },
    { "PARAM_KEYGEN_BOUND_E", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_KEYGEN_BOUND_E, 0x1a, -1, -1, -1, -1 },
    { "PARAM_E", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_E, 0x1a, -1, -1, -1, -1 },
    { "PARAM_KEYGEN_BOUND_S", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_KEYGEN_BOUND_S, 0x1a, -1, -1, -1, -1 },
    { "PARAM_S", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_S, 0x1a, -1, -1, -1, -1 },
    { "PARAM_R2_INVN", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_R2_INVN, 0x1a, -1, -1, -1, -1 },
    { "CRYPTO_RANDOMBYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_RANDOMBYTES, 0x1a, -1, -1, -1, -1 },
    { "CRYPTO_SEEDBYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES, 0x1a, -1, -1, -1, -1 },
    { "CRYPTO_C_BYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_C_BYTES, 0x1a, -1, -1, -1, -1 },
    { "HM_BYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_HM_BYTES, 0x1a, -1, -1, -1, -1 },
    { "RADIX32", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_RADIX32, 0x1a, -1, -1, -1, -1 },
    { "CRYPTO_BYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_BYTES, 0x18, -1, -1, -1, -1 },
    { "CRYPTO_SECRETKEYBYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SECRETKEYBYTES, 0x18, -1, -1, -1, -1 },
    { "CRYPTO_PUBLICKEYBYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_PUBLICKEYBYTES, 0x18, -1, -1, -1, -1 },
    { "maskb1", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_maskb1, 0x1a, -1, -1, -1, -1 },
    { "NBLOCKS_SHAKE", "I", .constantValue.asLong = 0, 0xa, -1, 38, -1, -1 },
    { "BPLUS1BYTES", "I", .constantValue.asLong = 0, 0xa, -1, 39, -1, -1 },
  };
  static const void *ptrTable[] = { "generateKeyPair", "[B[BLJavaSecuritySecureRandom;", "generateSignature", "[B[BII[BLJavaSecuritySecureRandom;", "verifying", "[B[BII[B", "encodePrivateKey", "[B[J[J[BI[B", "encodePublicKey", "[B[J[BI", "decodePublicKey", "[I[BI[B", "testZ", "[J", "encodeSignature", "[BI[BI[J", "decodeSignature", "encodeC", "[I[S[BI", "hashFunction", "[BI[J[BI", "lE24BitToInt", "[BI", "sample_y", "[J[BII", "at", "[BIII", "[BII", "test_correctness", "[JI", "testRejection", "absolute", "I", "J", "checkPolynomial", "[JII", "memoryEqual", "[BI[BII", &OrgBouncycastlePqcCryptoQteslaQTesla3p_NBLOCKS_SHAKE, &OrgBouncycastlePqcCryptoQteslaQTesla3p_BPLUS1BYTES, "LOrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian;LOrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoQteslaQTesla3p = { "QTesla3p", "org.bouncycastle.pqc.crypto.qtesla", ptrTable, methods, fields, 7, 0x0, 22, 28, -1, 40, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoQteslaQTesla3p;
}

@end


#line 8
void OrgBouncycastlePqcCryptoQteslaQTesla3p_initPackagePrivate(OrgBouncycastlePqcCryptoQteslaQTesla3p *self) {
  NSObject_init(self);
}


#line 8
OrgBouncycastlePqcCryptoQteslaQTesla3p *new_OrgBouncycastlePqcCryptoQteslaQTesla3p_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoQteslaQTesla3p, initPackagePrivate)
}


#line 8
OrgBouncycastlePqcCryptoQteslaQTesla3p *create_OrgBouncycastlePqcCryptoQteslaQTesla3p_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoQteslaQTesla3p, initPackagePrivate)
}


#line 48
jint OrgBouncycastlePqcCryptoQteslaQTesla3p_generateKeyPairWithByteArray_withByteArray_withJavaSecuritySecureRandom_(IOSByteArray *publicKey, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  
#line 51
  jint nonce = 0;
  
#line 53
  IOSByteArray *randomness = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_RANDOMBYTES];
  
#line 56
  IOSByteArray *randomnessExtended = [IOSByteArray newArrayWithLength:(OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K + 3) * OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES];
  
#line 58
  IOSLongArray *secretPolynomial = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N];
  IOSLongArray *errorPolynomial = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K];
  IOSLongArray *A = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K];
  IOSLongArray *T = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K];
  
#line 63
  IOSLongArray *s_ntt = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N];
  
#line 66
  [((JavaSecuritySecureRandom *) nil_chk(secureRandom)) nextBytesWithByteArray:randomness];
  
#line 68
  OrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(
#line 69
  randomnessExtended, 0, (OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K + 3) * OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES,
#line 70
  randomness, 0, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_RANDOMBYTES);
  
#line 78
  for (jint k = 0; k < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K; k++) {
    
#line 80
    do {
      
#line 82
      OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_sample_gauss_polyWithInt_withByteArray_withInt_withLongArray_withInt_(++nonce, randomnessExtended, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES, errorPolynomial, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N);
    }
    while (OrgBouncycastlePqcCryptoQteslaQTesla3p_checkPolynomialWithLongArray_withInt_withInt_(errorPolynomial, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_KEYGEN_BOUND_E));
  }
  
#line 92
  do {
    
#line 94
    OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_sample_gauss_polyWithInt_withByteArray_withInt_withLongArray_withInt_(++nonce, randomnessExtended, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES, secretPolynomial, 0);
  }
  while (OrgBouncycastlePqcCryptoQteslaQTesla3p_checkPolynomialWithLongArray_withInt_withInt_(secretPolynomial, 0, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_KEYGEN_BOUND_S));
  
#line 98
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_uniformWithLongArray_withByteArray_withInt_(A, randomnessExtended, (OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K + 1) * OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES);
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_nttWithLongArray_withLongArray_(s_ntt, secretPolynomial);
  
#line 101
  for (jint k = 0; k < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K; k++) {
    
#line 103
    OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_mulWithLongArray_withInt_withLongArray_withInt_withLongArray_(T, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, A, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, s_ntt);
    OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_add_correctWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_(T, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, T, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, errorPolynomial, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N);
  }
  
#line 108
  OrgBouncycastlePqcCryptoQteslaQTesla3p_encodePublicKeyWithByteArray_withLongArray_withByteArray_withInt_(publicKey, T, randomnessExtended, (OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K + 1) * OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES);
  OrgBouncycastlePqcCryptoQteslaQTesla3p_encodePrivateKeyWithByteArray_withLongArray_withLongArray_withByteArray_withInt_withByteArray_(privateKey, secretPolynomial, errorPolynomial, randomnessExtended, (OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K + 1) * OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES, publicKey);
  
#line 111
  return 0;
}


#line 114
jint OrgBouncycastlePqcCryptoQteslaQTesla3p_generateSignatureWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(IOSByteArray *signature, IOSByteArray *message, jint messageOffset, jint messageLength, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  
#line 119
  IOSByteArray *c = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_C_BYTES];
  IOSByteArray *randomness = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES];
  IOSByteArray *randomness_input = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES + OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_RANDOMBYTES + 2 * OrgBouncycastlePqcCryptoQteslaQTesla3p_HM_BYTES];
  IOSIntArray *pos_list = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_H];
  IOSShortArray *sign_list = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_H];
  IOSLongArray *y = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N];
  
#line 126
  IOSLongArray *y_ntt = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N];
  IOSLongArray *Sc = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N];
  IOSLongArray *z = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N];
  
#line 130
  IOSLongArray *v = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K];
  IOSLongArray *Ec = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K];
  IOSLongArray *a = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K];
  
#line 134
  jint k;
  jint nonce = 0;
  jboolean rsp = false;
  
#line 138
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(privateKey, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SECRETKEYBYTES - OrgBouncycastlePqcCryptoQteslaQTesla3p_HM_BYTES - OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES, randomness_input, 0, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES);
  {
    
#line 141
    IOSByteArray *tmp = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_RANDOMBYTES];
    [((JavaSecuritySecureRandom *) nil_chk(secureRandom)) nextBytesWithByteArray:tmp];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tmp, 0, randomness_input, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_RANDOMBYTES);
  }
  
#line 146
  OrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(
#line 147
  randomness_input, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES + OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_RANDOMBYTES, OrgBouncycastlePqcCryptoQteslaQTesla3p_HM_BYTES,
#line 148
  message, 0, messageLength);
  
#line 150
  OrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(
#line 151
  randomness, 0, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES,
#line 152
  randomness_input, 0, randomness_input->size_ - OrgBouncycastlePqcCryptoQteslaQTesla3p_HM_BYTES);
  
#line 154
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(privateKey, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SECRETKEYBYTES - OrgBouncycastlePqcCryptoQteslaQTesla3p_HM_BYTES, randomness_input, randomness_input->size_ - OrgBouncycastlePqcCryptoQteslaQTesla3p_HM_BYTES, OrgBouncycastlePqcCryptoQteslaQTesla3p_HM_BYTES);
  
#line 156
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_uniformWithLongArray_withByteArray_withInt_(a, privateKey, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SECRETKEYBYTES - OrgBouncycastlePqcCryptoQteslaQTesla3p_HM_BYTES - 2 * OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES);
  
#line 158
  while (true) {
    
#line 160
    OrgBouncycastlePqcCryptoQteslaQTesla3p_sample_yWithLongArray_withByteArray_withInt_withInt_(y, randomness, 0, ++nonce);
    
#line 162
    OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_nttWithLongArray_withLongArray_(y_ntt, y);
    for (k = 0; k < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K; k++) {
      
#line 165
      OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_mulWithLongArray_withInt_withLongArray_withInt_withLongArray_(v, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, a, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, y_ntt);
    }
    
#line 168
    OrgBouncycastlePqcCryptoQteslaQTesla3p_hashFunctionWithByteArray_withInt_withLongArray_withByteArray_withInt_(c, 0, v, randomness_input, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES + OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_RANDOMBYTES);
    OrgBouncycastlePqcCryptoQteslaQTesla3p_encodeCWithIntArray_withShortArray_withByteArray_withInt_(pos_list, sign_list, c, 0);
    
#line 171
    OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_sparse_mul8WithLongArray_withByteArray_withIntArray_withShortArray_(Sc, privateKey, pos_list, sign_list);
    
#line 173
    OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_addWithLongArray_withLongArray_withLongArray_(z, y, Sc);
    
#line 175
    if (OrgBouncycastlePqcCryptoQteslaQTesla3p_testRejectionWithLongArray_(z)) {
      
#line 177
      continue;
    }
    
#line 180
    for (k = 0; k < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K; k++) {
      
#line 182
      OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_sparse_mul8WithLongArray_withInt_withByteArray_withInt_withIntArray_withShortArray_(Ec, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, privateKey, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * (k + 1), pos_list, sign_list);
      OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_subWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_(v, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, v, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, Ec, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N);
      rsp = OrgBouncycastlePqcCryptoQteslaQTesla3p_test_correctnessWithLongArray_withInt_(v, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N);
      if (rsp) {
        
#line 187
        break;
      }
    }
    if (rsp) {
      
#line 192
      continue;
    }
    
#line 195
    OrgBouncycastlePqcCryptoQteslaQTesla3p_encodeSignatureWithByteArray_withInt_withByteArray_withInt_withLongArray_(signature, 0, c, 0, z);
    return 0;
  }
}


#line 202
jint OrgBouncycastlePqcCryptoQteslaQTesla3p_verifyingWithByteArray_withByteArray_withInt_withInt_withByteArray_(IOSByteArray *message, IOSByteArray *signature, jint signatureOffset, jint signatureLength, IOSByteArray *publicKey) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  
#line 207
  IOSByteArray *c = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_C_BYTES];
  IOSByteArray *c_sig = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_C_BYTES];
  IOSByteArray *seed = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES];
  IOSByteArray *hm = [IOSByteArray newArrayWithLength:2 * OrgBouncycastlePqcCryptoQteslaQTesla3p_HM_BYTES];
  IOSIntArray *pos_list = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_H];
  IOSShortArray *sign_list = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_H];
  IOSIntArray *pk_t = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K];
  IOSLongArray *w = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K];
  IOSLongArray *a = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K];
  IOSLongArray *Tc = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K];
  
#line 218
  IOSLongArray *z = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N];
  IOSLongArray *z_ntt = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N];
  
#line 221
  jint k = 0;
  
#line 223
  if (signatureLength != OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_BYTES) {
    
#line 225
    return -1;
  }
  
#line 228
  OrgBouncycastlePqcCryptoQteslaQTesla3p_decodeSignatureWithByteArray_withLongArray_withByteArray_withInt_(c, z, signature, signatureOffset);
  if (OrgBouncycastlePqcCryptoQteslaQTesla3p_testZWithLongArray_(z)) {
    
#line 231
    return -2;
  }
  OrgBouncycastlePqcCryptoQteslaQTesla3p_decodePublicKeyWithIntArray_withByteArray_withInt_withByteArray_(pk_t, seed, 0, publicKey);
  
#line 236
  OrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(
#line 237
  hm, 0, OrgBouncycastlePqcCryptoQteslaQTesla3p_HM_BYTES,
#line 238
  message, 0, ((IOSByteArray *) nil_chk(message))->size_);
  OrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(
#line 240
  hm, OrgBouncycastlePqcCryptoQteslaQTesla3p_HM_BYTES, OrgBouncycastlePqcCryptoQteslaQTesla3p_HM_BYTES,
#line 241
  publicKey, 0, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_PUBLICKEYBYTES - OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES);
  
#line 243
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_uniformWithLongArray_withByteArray_withInt_(a, seed, 0);
  OrgBouncycastlePqcCryptoQteslaQTesla3p_encodeCWithIntArray_withShortArray_withByteArray_withInt_(pos_list, sign_list, c, 0);
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_nttWithLongArray_withLongArray_(z_ntt, z);
  
#line 247
  for (k = 0; k < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K; k++) {
    
#line 249
    OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_sparse_mul32WithLongArray_withInt_withIntArray_withInt_withIntArray_withShortArray_(Tc, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, pk_t, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, pos_list, sign_list);
    OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_mulWithLongArray_withInt_withLongArray_withInt_withLongArray_(w, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, a, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, z_ntt);
    OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_subWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_(w, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, w, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, Tc, k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N);
  }
  
#line 254
  OrgBouncycastlePqcCryptoQteslaQTesla3p_hashFunctionWithByteArray_withInt_withLongArray_withByteArray_withInt_(c_sig, 0, w, hm, 0);
  
#line 256
  if (!OrgBouncycastlePqcCryptoQteslaQTesla3p_memoryEqualWithByteArray_withInt_withByteArray_withInt_withInt_(c, 0, c_sig, 0, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_C_BYTES)) {
    
#line 258
    return -3;
  }
  
#line 261
  return 0;
}


#line 264
void OrgBouncycastlePqcCryptoQteslaQTesla3p_encodePrivateKeyWithByteArray_withLongArray_withLongArray_withByteArray_withInt_withByteArray_(IOSByteArray *privateKey, IOSLongArray *secretPolynomial, IOSLongArray *errorPolynomial, IOSByteArray *seed, jint seedOffset, IOSByteArray *publicKey) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  
#line 267
  jint i;
  
#line 267
  jint k = 0;
  jint skPtr = 0;
  
#line 270
  for (i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i++) {
    
#line 272
    *IOSByteArray_GetRef(nil_chk(privateKey), skPtr + i) = (jbyte) IOSLongArray_Get(nil_chk(secretPolynomial), i);
  }
  skPtr += OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N;
  
#line 276
  for (k = 0; k < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K; k++) {
    
#line 278
    for (i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i++) {
      
#line 280
      *IOSByteArray_GetRef(nil_chk(privateKey), skPtr + k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N + i) = (jbyte) IOSLongArray_Get(nil_chk(errorPolynomial), k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N + i);
    }
  }
  skPtr += OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N;
  
#line 285
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(seed, seedOffset, privateKey, skPtr, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES * 2);
  skPtr += OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES * 2;
  
#line 289
  OrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(
#line 290
  privateKey, skPtr, OrgBouncycastlePqcCryptoQteslaQTesla3p_HM_BYTES,
#line 291
  publicKey, 0, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_PUBLICKEYBYTES - OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES);
  skPtr += OrgBouncycastlePqcCryptoQteslaQTesla3p_HM_BYTES;
}


#line 297
void OrgBouncycastlePqcCryptoQteslaQTesla3p_encodePublicKeyWithByteArray_withLongArray_withByteArray_withInt_(IOSByteArray *publicKey, IOSLongArray *T, IOSByteArray *seedA, jint seedAOffset) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  jint j = 0;
  
#line 301
  for (jint i = 0; i < JreIntDiv(OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q_LOG, 32); i += 15) {
    
#line 303
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 0, (jint) (IOSLongArray_Get(nil_chk(T), j) | (JreLShift64(IOSLongArray_Get(T, j + 1), 30))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 1, (jint) ((JreRShift64(IOSLongArray_Get(T, j + 1), 2)) | (JreLShift64(IOSLongArray_Get(T, j + 2), 28))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 2, (jint) ((JreRShift64(IOSLongArray_Get(T, j + 2), 4)) | (JreLShift64(IOSLongArray_Get(T, j + 3), 26))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 3, (jint) ((JreRShift64(IOSLongArray_Get(T, j + 3), 6)) | (JreLShift64(IOSLongArray_Get(T, j + 4), 24))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 4, (jint) ((JreRShift64(IOSLongArray_Get(T, j + 4), 8)) | (JreLShift64(IOSLongArray_Get(T, j + 5), 22))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 5, (jint) ((JreRShift64(IOSLongArray_Get(T, j + 5), 10)) | (JreLShift64(IOSLongArray_Get(T, j + 6), 20))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 6, (jint) ((JreRShift64(IOSLongArray_Get(T, j + 6), 12)) | (JreLShift64(IOSLongArray_Get(T, j + 7), 18))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 7, (jint) ((JreRShift64(IOSLongArray_Get(T, j + 7), 14)) | (JreLShift64(IOSLongArray_Get(T, j + 8), 16))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 8, (jint) ((JreRShift64(IOSLongArray_Get(T, j + 8), 16)) | (JreLShift64(IOSLongArray_Get(T, j + 9), 14))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 9, (jint) ((JreRShift64(IOSLongArray_Get(T, j + 9), 18)) | (JreLShift64(IOSLongArray_Get(T, j + 10), 12))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 10, (jint) ((JreRShift64(IOSLongArray_Get(T, j + 10), 20)) | (JreLShift64(IOSLongArray_Get(T, j + 11), 10))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 11, (jint) ((JreRShift64(IOSLongArray_Get(T, j + 11), 22)) | (JreLShift64(IOSLongArray_Get(T, j + 12), 8))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 12, (jint) ((JreRShift64(IOSLongArray_Get(T, j + 12), 24)) | (JreLShift64(IOSLongArray_Get(T, j + 13), 6))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 13, (jint) ((JreRShift64(IOSLongArray_Get(T, j + 13), 26)) | (JreLShift64(IOSLongArray_Get(T, j + 14), 4))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 14, (jint) ((JreRShift64(IOSLongArray_Get(T, j + 14), 28)) | (JreLShift64(IOSLongArray_Get(T, j + 15), 2))));
    j += 16;
  }
  
#line 321
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(seedA, seedAOffset, publicKey, JreIntDiv(OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q_LOG, 8), OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES);
}


#line 326
void OrgBouncycastlePqcCryptoQteslaQTesla3p_decodePublicKeyWithIntArray_withByteArray_withInt_withByteArray_(IOSIntArray *publicKey, IOSByteArray *seedA, jint seedAOffset, IOSByteArray *publicKeyInput) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  
#line 329
  jint j = 0;
  IOSByteArray *pt = publicKeyInput;
  jint maskq = (JreLShift32(1, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q_LOG)) - 1;
  
#line 334
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K; i += 16) {
    
#line 336
    *IOSIntArray_GetRef(nil_chk(publicKey), i) = OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 0) & maskq;
    *IOSIntArray_GetRef(publicKey, i + 1) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 0), 30)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 1), 2))) & maskq;
    *IOSIntArray_GetRef(publicKey, i + 2) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 1), 28)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 2), 4))) & maskq;
    *IOSIntArray_GetRef(publicKey, i + 3) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 2), 26)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 3), 6))) & maskq;
    *IOSIntArray_GetRef(publicKey, i + 4) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 3), 24)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 4), 8))) & maskq;
    *IOSIntArray_GetRef(publicKey, i + 5) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 4), 22)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 5), 10))) & maskq;
    *IOSIntArray_GetRef(publicKey, i + 6) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 5), 20)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 6), 12))) & maskq;
    *IOSIntArray_GetRef(publicKey, i + 7) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 6), 18)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 7), 14))) & maskq;
    *IOSIntArray_GetRef(publicKey, i + 8) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 7), 16)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 8), 16))) & maskq;
    *IOSIntArray_GetRef(publicKey, i + 9) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 8), 14)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 9), 18))) & maskq;
    *IOSIntArray_GetRef(publicKey, i + 10) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 9), 12)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 10), 20))) & maskq;
    *IOSIntArray_GetRef(publicKey, i + 11) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 10), 10)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 11), 22))) & maskq;
    *IOSIntArray_GetRef(publicKey, i + 12) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 11), 8)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 12), 24))) & maskq;
    *IOSIntArray_GetRef(publicKey, i + 13) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 12), 6)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 13), 26))) & maskq;
    *IOSIntArray_GetRef(publicKey, i + 14) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 13), 4)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 14), 28))) & maskq;
    *IOSIntArray_GetRef(publicKey, i + 15) = (JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(pt, j, 14), 2)) & maskq;
    j += 15;
  }
  
#line 356
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(publicKeyInput, JreIntDiv(OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q_LOG, 8), seedA, seedAOffset, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES);
}


#line 360
jboolean OrgBouncycastlePqcCryptoQteslaQTesla3p_testZWithLongArray_(IOSLongArray *Z) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  
#line 364
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i++) {
    
#line 367
    if (IOSLongArray_Get(nil_chk(Z), i) < -(OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_B - OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_S) || IOSLongArray_Get(Z, i) > OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_B - OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_S) {
      
#line 370
      return true;
    }
  }
  
#line 376
  return false;
}


#line 382
void OrgBouncycastlePqcCryptoQteslaQTesla3p_encodeSignatureWithByteArray_withInt_withByteArray_withInt_withLongArray_(IOSByteArray *signature, jint signatureOffset, IOSByteArray *C, jint cOffset, IOSLongArray *Z) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  jint j = 0;
  
#line 386
  for (jint i = 0; i < JreIntDiv(OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * (OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_B_BITS + 1), 32); i += 11) {
    
#line 388
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(signature, i, 0, (jint) ((IOSLongArray_Get(nil_chk(Z), j + 0) & ((JreLShift32(1, 22)) - 1)) | (JreLShift64(IOSLongArray_Get(Z, j + 1), 22))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(signature, i, 1, (jint) (((JreURShift64(IOSLongArray_Get(Z, j + 1), 10)) & ((JreLShift32(1, 12)) - 1)) | (JreLShift64(IOSLongArray_Get(Z, j + 2), 12))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(signature, i, 2, (jint) (((JreURShift64(IOSLongArray_Get(Z, j + 2), 20)) & ((JreLShift32(1, 2)) - 1)) | (JreLShift64((IOSLongArray_Get(Z, j + 3) & OrgBouncycastlePqcCryptoQteslaQTesla3p_maskb1), 2)) | (JreLShift64(IOSLongArray_Get(Z, j + 4), 24))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(signature, i, 3, (jint) (((JreURShift64(IOSLongArray_Get(Z, j + 4), 8)) & ((JreLShift32(1, 14)) - 1)) | (JreLShift64(IOSLongArray_Get(Z, j + 5), 14))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(signature, i, 4, (jint) (((JreURShift64(IOSLongArray_Get(Z, j + 5), 18)) & ((JreLShift32(1, 4)) - 1)) | (JreLShift64((IOSLongArray_Get(Z, j + 6) & OrgBouncycastlePqcCryptoQteslaQTesla3p_maskb1), 4)) | (JreLShift64(IOSLongArray_Get(Z, j + 7), 26))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(signature, i, 5, (jint) (((JreURShift64(IOSLongArray_Get(Z, j + 7), 6)) & ((JreLShift32(1, 16)) - 1)) | (JreLShift64(IOSLongArray_Get(Z, j + 8), 16))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(signature, i, 6, (jint) (((JreURShift64(IOSLongArray_Get(Z, j + 8), 16)) & ((JreLShift32(1, 6)) - 1)) | (JreLShift64((IOSLongArray_Get(Z, j + 9) & OrgBouncycastlePqcCryptoQteslaQTesla3p_maskb1), 6)) | (JreLShift64(IOSLongArray_Get(Z, j + 10), 28))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(signature, i, 7, (jint) (((JreURShift64(IOSLongArray_Get(Z, j + 10), 4)) & ((JreLShift32(1, 18)) - 1)) | (JreLShift64(IOSLongArray_Get(Z, j + 11), 18))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(signature, i, 8, (jint) (((JreURShift64(IOSLongArray_Get(Z, j + 11), 14)) & ((JreLShift32(1, 8)) - 1)) | (JreLShift64((IOSLongArray_Get(Z, j + 12) & OrgBouncycastlePqcCryptoQteslaQTesla3p_maskb1), 8)) | (JreLShift64(IOSLongArray_Get(Z, j + 13), 30))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(signature, i, 9, (jint) (((JreURShift64(IOSLongArray_Get(Z, j + 13), 2)) & ((JreLShift32(1, 20)) - 1)) | (JreLShift64(IOSLongArray_Get(Z, j + 14), 20))));
    OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(signature, i, 10, (jint) (((JreURShift64(IOSLongArray_Get(Z, j + 14), 12)) & ((JreLShift32(1, 10)) - 1)) | (JreLShift64(IOSLongArray_Get(Z, j + 15), 10))));
    j += 16;
  }
  
#line 402
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(C, cOffset, signature, signatureOffset + JreIntDiv(OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * (OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_B_BITS + 1), 8), OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_C_BYTES);
}


#line 405
void OrgBouncycastlePqcCryptoQteslaQTesla3p_decodeSignatureWithByteArray_withLongArray_withByteArray_withInt_(IOSByteArray *C, IOSLongArray *Z, IOSByteArray *signature, jint signatureOffset) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  jint j = 0;
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i += 16) {
    
#line 410
    jint s0 = OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(signature, j, 0);
    jint s1 = OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(signature, j, 1);
    jint s2 = OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(signature, j, 2);
    jint s3 = OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(signature, j, 3);
    jint s4 = OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(signature, j, 4);
    jint s5 = OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(signature, j, 5);
    jint s6 = OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(signature, j, 6);
    jint s7 = OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(signature, j, 7);
    jint s8 = OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(signature, j, 8);
    jint s9 = OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(signature, j, 9);
    jint s10 = OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(signature, j, 10);
    
#line 422
    *IOSLongArray_GetRef(nil_chk(Z), i) = JreRShift32(JreLShift32(s0, 10), 10);
    *IOSLongArray_GetRef(Z, i + 1) = (JreURShift32(s0, 22)) | (JreRShift32(JreLShift32(s1, 20), 10));
    *IOSLongArray_GetRef(Z, i + 2) = (JreURShift32(s1, 12)) | (JreRShift32(JreLShift32(s2, 30), 10));
    *IOSLongArray_GetRef(Z, i + 3) = JreRShift32(JreLShift32(s2, 8), 10);
    *IOSLongArray_GetRef(Z, i + 4) = (JreURShift32(s2, 24)) | (JreRShift32(JreLShift32(s3, 18), 10));
    *IOSLongArray_GetRef(Z, i + 5) = (JreURShift32(s3, 14)) | (JreRShift32(JreLShift32(s4, 28), 10));
    *IOSLongArray_GetRef(Z, i + 6) = JreRShift32(JreLShift32(s4, 6), 10);
    *IOSLongArray_GetRef(Z, i + 7) = (JreURShift32(s4, 26)) | (JreRShift32(JreLShift32(s5, 16), 10));
    *IOSLongArray_GetRef(Z, i + 8) = (JreURShift32(s5, 16)) | (JreRShift32(JreLShift32(s6, 26), 10));
    *IOSLongArray_GetRef(Z, i + 9) = JreRShift32(JreLShift32(s6, 4), 10);
    *IOSLongArray_GetRef(Z, i + 10) = (JreURShift32(s6, 28)) | (JreRShift32(JreLShift32(s7, 14), 10));
    *IOSLongArray_GetRef(Z, i + 11) = (JreURShift32(s7, 18)) | (JreRShift32(JreLShift32(s8, 24), 10));
    *IOSLongArray_GetRef(Z, i + 12) = JreRShift32(JreLShift32(s8, 2), 10);
    *IOSLongArray_GetRef(Z, i + 13) = (JreURShift32(s8, 30)) | (JreRShift32(JreLShift32(s9, 12), 10));
    *IOSLongArray_GetRef(Z, i + 14) = (JreURShift32(s9, 20)) | (JreRShift32(JreLShift32(s10, 22), 10));
    *IOSLongArray_GetRef(Z, i + 15) = JreRShift32(s10, 10);
    j += 11;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(signature, signatureOffset + JreIntDiv(OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * (OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_B_BITS + 1), 8), C, 0, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_C_BYTES);
}


#line 443
void OrgBouncycastlePqcCryptoQteslaQTesla3p_encodeCWithIntArray_withShortArray_withByteArray_withInt_(IOSIntArray *positionList, IOSShortArray *signList, IOSByteArray *output, jint outputOffset) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  jint count = 0;
  jint position;
  jshort domainSeparator = 0;
  IOSShortArray *C = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N];
  IOSByteArray *randomness = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE];
  
#line 452
  OrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(
#line 453
  randomness, 0, OrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE,
#line 454
  domainSeparator++,
#line 455
  output, outputOffset, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_RANDOMBYTES);
  
#line 459
  OrgBouncycastleUtilArrays_fillWithShortArray_withShort_(C, (jshort) 0);
  
#line 464
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_H; ) {
    
#line 466
    if (count > OrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE - 3) {
      
#line 469
      OrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(
#line 470
      randomness, 0, OrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE,
#line 471
      domainSeparator++,
#line 472
      output, outputOffset, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_RANDOMBYTES);
      
#line 475
      count = 0;
    }
    
#line 478
    position = (JreLShift32(IOSByteArray_Get(randomness, count), 8)) | (IOSByteArray_Get(randomness, count + 1) & (jint) 0xFF);
    position &= OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N - 1;
    
#line 484
    if (IOSShortArray_Get(C, position) == 0) {
      
#line 486
      if ((IOSByteArray_Get(randomness, count + 2) & 1) == 1) {
        
#line 488
        *IOSShortArray_GetRef(C, position) = -1;
      }
      else {
        
#line 492
        *IOSShortArray_GetRef(C, position) = 1;
      }
      
#line 495
      *IOSIntArray_GetRef(nil_chk(positionList), i) = position;
      *IOSShortArray_GetRef(nil_chk(signList), i) = IOSShortArray_Get(C, position);
      i++;
    }
    
#line 500
    count += 3;
  }
}


#line 504
void OrgBouncycastlePqcCryptoQteslaQTesla3p_hashFunctionWithByteArray_withInt_withLongArray_withByteArray_withInt_(IOSByteArray *output, jint outputOff, IOSLongArray *v, IOSByteArray *hm, jint hmOff) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  jint mask;
  
#line 506
  jint cL;
  
#line 508
  IOSByteArray *T = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N + 2 * OrgBouncycastlePqcCryptoQteslaQTesla3p_HM_BYTES];
  
#line 510
  for (jint k = 0; k < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K; k++) {
    
#line 512
    jint index = k * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N;
    for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i++) {
      
#line 515
      jint temp = (jint) IOSLongArray_Get(nil_chk(v), index);
      
#line 517
      mask = JreRShift32(JreIntDiv(OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q, 2) - temp, OrgBouncycastlePqcCryptoQteslaQTesla3p_RADIX32 - 1);
      temp = ((temp - OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q) & mask) | (temp & ~mask);
      
#line 520
      cL = temp & ((JreLShift32(1, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_D)) - 1);
      
#line 522
      mask = JreRShift32((JreLShift32(1, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_D - 1)) - cL, OrgBouncycastlePqcCryptoQteslaQTesla3p_RADIX32 - 1);
      cL = ((cL - (JreLShift32(1, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_D))) & mask) | (cL & ~mask);
      *IOSByteArray_GetRef(T, index++) = (jbyte) (JreRShift32(temp - cL, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_D));
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hm, hmOff, T, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, 2 * OrgBouncycastlePqcCryptoQteslaQTesla3p_HM_BYTES);
  
#line 529
  OrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(
#line 530
  output, outputOff, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_C_BYTES,
#line 531
  T, 0, T->size_);
}


#line 534
jint OrgBouncycastlePqcCryptoQteslaQTesla3p_lE24BitToIntWithByteArray_withInt_(IOSByteArray *bs, jint off) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  jint n = IOSByteArray_Get(nil_chk(bs), off) & (jint) 0xff;
  n |= JreLShift32((IOSByteArray_Get(bs, ++off) & (jint) 0xff), 8);
  n |= JreLShift32((IOSByteArray_Get(bs, ++off) & (jint) 0xff), 16);
  return n;
}


#line 547
void OrgBouncycastlePqcCryptoQteslaQTesla3p_sample_yWithLongArray_withByteArray_withInt_withInt_(IOSLongArray *y, IOSByteArray *seed, jint seedOffset, jint nonce) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  jint i = 0;
  
#line 549
  jint pos = 0;
  
#line 549
  jint nblocks = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N;
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla3p_BPLUS1BYTES + 1];
  jint nbytes = OrgBouncycastlePqcCryptoQteslaQTesla3p_BPLUS1BYTES;
  jshort dmsp = (jshort) (JreLShift32(nonce, 8));
  
#line 554
  OrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK256SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(
#line 555
  buf, 0, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * nbytes, dmsp++, seed, seedOffset, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_RANDOMBYTES);
  
#line 559
  while (i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N) {
    
#line 561
    if (pos >= nblocks * nbytes) {
      
#line 563
      nblocks = OrgBouncycastlePqcCryptoQteslaQTesla3p_NBLOCKS_SHAKE;
      OrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK256SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(
#line 565
      buf, 0, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N * nbytes, dmsp++, seed, seedOffset, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_RANDOMBYTES);
      
#line 567
      pos = 0;
    }
    *IOSLongArray_GetRef(nil_chk(y), i) = OrgBouncycastlePqcCryptoQteslaQTesla3p_lE24BitToIntWithByteArray_withInt_(buf, pos) & ((JreLShift32(1, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_B_BITS + 1)) - 1);
    *IOSLongArray_GetRef(y, i) -= OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_B;
    if (IOSLongArray_Get(y, i) != JreLShift32(1, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_B_BITS)) {
      
#line 573
      i++;
    }
    pos += nbytes;
  }
}


#line 580
void OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_withInt_(IOSByteArray *bs, jint base, jint index, jint value) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  OrgBouncycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(value, bs, base * 4 + index * 4);
}

jint OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(IOSByteArray *bs, jint base, jint index) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  jint off = base * 4 + index * 4;
  
#line 589
  jint n = IOSByteArray_Get(nil_chk(bs), off) & (jint) 0xff;
  n |= JreLShift32((IOSByteArray_Get(bs, ++off) & (jint) 0xff), 8);
  n |= JreLShift32((IOSByteArray_Get(bs, ++off) & (jint) 0xff), 16);
  n |= JreLShift32(IOSByteArray_Get(bs, ++off), 24);
  return n;
}

jboolean OrgBouncycastlePqcCryptoQteslaQTesla3p_test_correctnessWithLongArray_withInt_(IOSLongArray *v, jint vpos) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  
#line 601
  jint mask;
  
#line 601
  jint left;
  
#line 601
  jint val;
  jint t0;
  
#line 602
  jint t1;
  
#line 604
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i++) {
    
#line 607
    mask = JreRShift32((jint) (JreIntDiv(OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q, 2) - IOSLongArray_Get(nil_chk(v), vpos + i)), OrgBouncycastlePqcCryptoQteslaQTesla3p_RADIX32 - 1);
    val = (jint) (((IOSLongArray_Get(v, vpos + i) - OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q) & mask) | (IOSLongArray_Get(v, vpos + i) & ~mask));
    
#line 610
    t0 = JreURShift32(~(OrgBouncycastlePqcCryptoQteslaQTesla3p_absoluteWithInt_(val) - (JreIntDiv(OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q, 2) - OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_E)), OrgBouncycastlePqcCryptoQteslaQTesla3p_RADIX32 - 1);
    
#line 612
    left = val;
    val = JreRShift32(val + (JreLShift32(1, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_D - 1)) - 1, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_D);
    val = left - (JreLShift32(val, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_D));
    
#line 616
    t1 = JreURShift32(~(OrgBouncycastlePqcCryptoQteslaQTesla3p_absoluteWithInt_(val) - ((JreLShift32(1, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_D - 1)) - OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_E)), OrgBouncycastlePqcCryptoQteslaQTesla3p_RADIX32 - 1);
    
#line 618
    if ((t0 | t1) == 1) {
      
#line 620
      return true;
    }
  }
  return false;
}


#line 627
jboolean OrgBouncycastlePqcCryptoQteslaQTesla3p_testRejectionWithLongArray_(IOSLongArray *Z) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  
#line 630
  jint valid = 0;
  
#line 632
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i++) {
    
#line 634
    valid |= OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_B - OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_S - OrgBouncycastlePqcCryptoQteslaQTesla3p_absoluteWithLong_(IOSLongArray_Get(nil_chk(Z), i));
  }
  
#line 638
  return JreURShift32(valid, 31) > 0;
}


#line 642
jint OrgBouncycastlePqcCryptoQteslaQTesla3p_absoluteWithInt_(jint value) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  
#line 645
  return (JreRShift32(value, 31) ^ value) - (JreRShift32(value, 31));
}

jlong OrgBouncycastlePqcCryptoQteslaQTesla3p_absoluteWithLong_(jlong value) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  
#line 652
  return (JreRShift64(value, 63) ^ value) - (JreRShift64(value, 63));
}


#line 657
jboolean OrgBouncycastlePqcCryptoQteslaQTesla3p_checkPolynomialWithLongArray_withInt_withInt_(IOSLongArray *polynomial, jint polyOffset, jint bound) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  
#line 660
  jint i;
  
#line 660
  jint j;
  
#line 660
  jint sum = 0;
  
#line 660
  jint limit = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N;
  jlong temp;
  
#line 661
  jlong mask;
  IOSLongArray *list = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N];
  
#line 664
  for (j = 0; j < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; j++) {
    
#line 666
    *IOSLongArray_GetRef(list, j) = OrgBouncycastlePqcCryptoQteslaQTesla3p_absoluteWithInt_((jint) IOSLongArray_Get(nil_chk(polynomial), polyOffset + j));
  }
  
#line 669
  for (j = 0; j < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_H; j++) {
    
#line 671
    for (i = 0; i < limit - 1; i++) {
      
#line 674
      mask = JreRShift64(IOSLongArray_Get(list, i + 1) - IOSLongArray_Get(list, i), OrgBouncycastlePqcCryptoQteslaQTesla3p_RADIX32 - 1);
      temp = (IOSLongArray_Get(list, i + 1) & mask) | (IOSLongArray_Get(list, i) & ~mask);
      *IOSLongArray_GetRef(list, i + 1) = (IOSLongArray_Get(list, i) & mask) | (IOSLongArray_Get(list, i + 1) & ~mask);
      *IOSLongArray_GetRef(list, i) = temp;
    }
    sum += (jint) IOSLongArray_Get(list, limit - 1);
    limit -= 1;
  }
  
#line 683
  return sum > bound;
}


#line 848
jboolean OrgBouncycastlePqcCryptoQteslaQTesla3p_memoryEqualWithByteArray_withInt_withByteArray_withInt_withInt_(IOSByteArray *left, jint leftOffset, IOSByteArray *right, jint rightOffset, jint length) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_initialize();
  
#line 851
  if ((leftOffset + length > ((IOSByteArray *) nil_chk(left))->size_) || (rightOffset + length > ((IOSByteArray *) nil_chk(right))->size_)) {
    
#line 853
    return false;
  }
  
#line 856
  for (jint i = 0; i < length; i++) {
    
#line 859
    if (IOSByteArray_Get(left, leftOffset + i) != IOSByteArray_Get(nil_chk(right), rightOffset + i)) {
      
#line 862
      return false;
    }
  }
  
#line 868
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoQteslaQTesla3p)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/qtesla/QTesla3p.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian)


#line 689
@implementation OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 689
- (instancetype)init {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 811
+ (void)sample_gauss_polyWithInt:(jint)nonce
                   withByteArray:(IOSByteArray *)seed
                         withInt:(jint)seedOffset
                   withLongArray:(IOSLongArray *)poly
                         withInt:(jint)polyOffset {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_sample_gauss_polyWithInt_withByteArray_withInt_withLongArray_withInt_(nonce, seed, seedOffset, poly, polyOffset);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(sample_gauss_polyWithInt:withByteArray:withInt:withLongArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CDT_ROWS", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_CDT_ROWS, 0x1a, -1, -1, -1, -1 },
    { "CDT_COLS", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_CDT_COLS, 0x1a, -1, -1, -1, -1 },
    { "CHUNK_SIZE", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_CHUNK_SIZE, 0x1a, -1, -1, -1, -1 },
    { "cdt_v", "[J", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "sample_gauss_poly", "I[BI[JI", &OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_cdt_v, "LOrgBouncycastlePqcCryptoQteslaQTesla3p;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian = { "Gaussian", "org.bouncycastle.pqc.crypto.qtesla", ptrTable, methods, fields, 7, 0x8, 2, 4, 3, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian;
}

+ (void)initialize {
  if (self == [OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian class]) {
    OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_cdt_v = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 697
      (jlong) 0x00000000LL, (jlong) 0x00000000LL, (jlong) 0x00000000LL, (jlong) 0x00000000LL,
#line 698
      (jlong) 0x0601F22ALL, (jlong) 0x280663D4LL, (jlong) 0x2E1B038CLL, (jlong) 0x1E75FCA7LL,
#line 699
      (jlong) 0x11F09FFALL, (jlong) 0x162FE23DLL, (jlong) 0x403739B4LL, (jlong) 0x3F2AA531LL,
#line 700
      (jlong) 0x1DA089E9LL, (jlong) 0x437226E8LL, (jlong) 0x115E99C8LL, (jlong) 0x68C472A6LL,
#line 701
      (jlong) 0x28EAB25DLL, (jlong) 0x04C51FE2LL, (jlong) 0x13F63FD0LL, (jlong) 0x1E56BF40LL,
#line 702
      (jlong) 0x33AC2F26LL, (jlong) 0x14FDBA70LL, (jlong) 0x6618880FLL, (jlong) 0x792CE93ELL,
#line 703
      (jlong) 0x3DC767DCLL, (jlong) 0x4565C95FLL, (jlong) 0x7EAC4790LL, (jlong) 0x163F4D99LL,
#line 704
      (jlong) 0x4724FC62LL, (jlong) 0x3342C78ALL, (jlong) 0x390873B2LL, (jlong) 0x13A12ACELL,
#line 705
      (jlong) 0x4FB448F4LL, (jlong) 0x5229D06DLL, (jlong) 0x09A6C84BLL, (jlong) 0x1D13CB0DLL,
#line 706
      (jlong) 0x576B8599LL, (jlong) 0x7423407FLL, (jlong) 0x1287EE2FLL, (jlong) 0x7B908556LL,
#line 707
      (jlong) 0x5E4786DALL, (jlong) 0x3210BAF6LL, (jlong) 0x6881795CLL, (jlong) 0x13DF4F59LL,
#line 708
      (jlong) 0x644B2C92LL, (jlong) 0x431B3946LL, (jlong) 0x63F188D9LL, (jlong) 0x22AFB6DELL,
#line 709
      (jlong) 0x697E90CELL, (jlong) 0x77C362C3LL, (jlong) 0x600A627ELL, (jlong) 0x66AEDF96LL,
#line 710
      (jlong) 0x6DEE0B96LL, (jlong) 0x2798C9CELL, (jlong) 0x147A98F9LL, (jlong) 0x27427F24LL,
#line 711
      (jlong) 0x71A92144LL, (jlong) 0x5765FCE4LL, (jlong) 0x0FF04C94LL, (jlong) 0x74183C18LL,
#line 712
      (jlong) 0x74C16FD5LL, (jlong) 0x1E2A0990LL, (jlong) 0x13EB545FLL, (jlong) 0x1CD9A2ADLL,
#line 713
      (jlong) 0x7749AC92LL, (jlong) 0x0DF36EEBLL, (jlong) 0x414629E5LL, (jlong) 0x66610A51LL,
#line 714
      (jlong) 0x7954BFA4LL, (jlong) 0x28079289LL, (jlong) 0x29D5B127LL, (jlong) 0x29B69601LL,
#line 715
      (jlong) 0x7AF5067ALL, (jlong) 0x2EDC2050LL, (jlong) 0x2B486556LL, (jlong) 0x43BF4664LL,
#line 716
      (jlong) 0x7C3BC17CLL, (jlong) 0x123D5E7ALL, (jlong) 0x63D4DD26LL, (jlong) 0x3B1E3755LL,
#line 717
      (jlong) 0x7D38AD76LL, (jlong) 0x2A9381D9LL, (jlong) 0x1D20D034LL, (jlong) 0x77C09C55LL,
#line 718
      (jlong) 0x7DF9C5DFLL, (jlong) 0x0E868CA7LL, (jlong) 0x23627687LL, (jlong) 0x78864423LL,
#line 719
      (jlong) 0x7E8B2ABALL, (jlong) 0x18E5C810LL, (jlong) 0x7C85B42CLL, (jlong) 0x7AC98BCCLL,
#line 720
      (jlong) 0x7EF7237CLL, (jlong) 0x00908272LL, (jlong) 0x3D4B170ELL, (jlong) 0x3CD572E3LL,
#line 721
      (jlong) 0x7F4637C5LL, (jlong) 0x6DBA5125LL, (jlong) 0x5B0285ECLL, (jlong) 0x46661EB9LL,
#line 722
      (jlong) 0x7F7F5707LL, (jlong) 0x4A52EDEBLL, (jlong) 0x50ECECB1LL, (jlong) 0x7384DC42LL,
#line 723
      (jlong) 0x7FA808CCLL, (jlong) 0x23290598LL, (jlong) 0x704F7A4DLL, (jlong) 0x08532154LL,
#line 724
      (jlong) 0x7FC4A083LL, (jlong) 0x69BDF2D4LL, (jlong) 0x73B67B27LL, (jlong) 0x3AE237ADLL,
#line 725
      (jlong) 0x7FD870CALL, (jlong) 0x42275557LL, (jlong) 0x6F2AE034LL, (jlong) 0x4E4B0395LL,
#line 726
      (jlong) 0x7FE5FB5DLL, (jlong) 0x3EF82C1BLL, (jlong) 0x256E2EB0LL, (jlong) 0x09E42B11LL,
#line 727
      (jlong) 0x7FEF1BFALL, (jlong) 0x6C03A362LL, (jlong) 0x07334BD4LL, (jlong) 0x22B6B15FLL,
#line 728
      (jlong) 0x7FF52D4ELL, (jlong) 0x316C2C8CLL, (jlong) 0x1C77A4C3LL, (jlong) 0x1C3A974ELL,
#line 729
      (jlong) 0x7FF927BALL, (jlong) 0x12AE54AELL, (jlong) 0x6CC24956LL, (jlong) 0x3BA9A3E4LL,
#line 730
      (jlong) 0x7FFBBA43LL, (jlong) 0x749CC0E2LL, (jlong) 0x044B3068LL, (jlong) 0x620F14DALL,
#line 731
      (jlong) 0x7FFD5E3DLL, (jlong) 0x4524AD91LL, (jlong) 0x31F84A1FLL, (jlong) 0x4D23AF51LL,
#line 732
      (jlong) 0x7FFE6664LL, (jlong) 0x535785B4LL, (jlong) 0x683C9E5ELL, (jlong) 0x2BD857DFLL,
#line 733
      (jlong) 0x7FFF0A41LL, (jlong) 0x0B291681LL, (jlong) 0x1CB4CE6FLL, (jlong) 0x32B314B9LL,
#line 734
      (jlong) 0x7FFF6E81LL, (jlong) 0x132C3D6FLL, (jlong) 0x4C8771CCLL, (jlong) 0x67421A75LL,
#line 735
      (jlong) 0x7FFFAAFELL, (jlong) 0x4DBC6BEDLL, (jlong) 0x4E8644D2LL, (jlong) 0x5158A208LL,
#line 736
      (jlong) 0x7FFFCEFDLL, (jlong) 0x7A1E2D14LL, (jlong) 0x2CF905AALL, (jlong) 0x79BFABD9LL,
#line 737
      (jlong) 0x7FFFE41ELL, (jlong) 0x4C6EC115LL, (jlong) 0x2D648F1ALL, (jlong) 0x4B01BA3ELL,
#line 738
      (jlong) 0x7FFFF059LL, (jlong) 0x319503C8LL, (jlong) 0x2CBEB96ALL, (jlong) 0x52FF656ELL,
#line 739
      (jlong) 0x7FFFF754LL, (jlong) 0x5DDD0D40LL, (jlong) 0x09D07206LL, (jlong) 0x6BF97EB5LL,
#line 740
      (jlong) 0x7FFFFB43LL, (jlong) 0x0B9E9822LL, (jlong) 0x5B584BE0LL, (jlong) 0x4974ED83LL,
#line 741
      (jlong) 0x7FFFFD71LL, (jlong) 0x76B81AE1LL, (jlong) 0x3C93755CLL, (jlong) 0x375F857BLL,
#line 742
      (jlong) 0x7FFFFEA3LL, (jlong) 0x7E66A1ECLL, (jlong) 0x3E342087LL, (jlong) 0x44ED1696LL,
#line 743
      (jlong) 0x7FFFFF49LL, (jlong) 0x26F6E190LL, (jlong) 0x7E3625F9LL, (jlong) 0x2F4F5849LL,
#line 744
      (jlong) 0x7FFFFFA1LL, (jlong) 0x2FA31694LL, (jlong) 0x0D53F684LL, (jlong) 0x59931C0DLL,
#line 745
      (jlong) 0x7FFFFFCFLL, (jlong) 0x5247BEC8LL, (jlong) 0x5CC20735LL, (jlong) 0x397CE966LL,
#line 746
      (jlong) 0x7FFFFFE7LL, (jlong) 0x4F4127C6LL, (jlong) 0x64926788LL, (jlong) 0x01CFEF66LL,
#line 747
      (jlong) 0x7FFFFFF3LL, (jlong) 0x6FAA69FDLL, (jlong) 0x26A67DC3LL, (jlong) 0x1FFA2528LL,
#line 748
      (jlong) 0x7FFFFFFALL, (jlong) 0x0630D072LL, (jlong) 0x7AA0C1B7LL, (jlong) 0x7E90AAE6LL,
#line 749
      (jlong) 0x7FFFFFFDLL, (jlong) 0x0F2957BBLL, (jlong) 0x3ADCE1E6LL, (jlong) 0x5A311C28LL,
#line 750
      (jlong) 0x7FFFFFFELL, (jlong) 0x4FD29431LL, (jlong) 0x6429F9EDLL, (jlong) 0x04653965LL,
#line 751
      (jlong) 0x7FFFFFFFLL, (jlong) 0x2CFAD60DLL, (jlong) 0x52ED82D1LL, (jlong) 0x26455881LL,
#line 752
      (jlong) 0x7FFFFFFFLL, (jlong) 0x5967A92FLL, (jlong) 0x5C85AB2DLL, (jlong) 0x188033BELL,
#line 753
      (jlong) 0x7FFFFFFFLL, (jlong) 0x6E4C9DFELL, (jlong) 0x76798EAFLL, (jlong) 0x0DC0BA65LL,
#line 754
      (jlong) 0x7FFFFFFFLL, (jlong) 0x77FDCCC8LL, (jlong) 0x194FF9ACLL, (jlong) 0x2C3FA855LL,
#line 755
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7C6CE89ELL, (jlong) 0x01FA1A72LL, (jlong) 0x6C3DC40BLL,
#line 756
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7E6D116ELL, (jlong) 0x5F82B352LL, (jlong) 0x57B67FCELL,
#line 757
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7F50FA31LL, (jlong) 0x31856599LL, (jlong) 0x579DC24BLL,
#line 758
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FB50089LL, (jlong) 0x43E64BB5LL, (jlong) 0x7F498E42LL,
#line 759
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FE04C2CLL, (jlong) 0x56CBFAEFLL, (jlong) 0x7FC9C15FLL,
#line 760
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FF2C7C0LL, (jlong) 0x5D509634LL, (jlong) 0x41DCA82BLL,
#line 761
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFA8FE3LL, (jlong) 0x24F6020DLL, (jlong) 0x7B594401LL,
#line 762
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFDCB1BLL, (jlong) 0x2D294BB3LL, (jlong) 0x1D1631BFLL,
#line 763
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFF1DE1LL, (jlong) 0x5D75B704LL, (jlong) 0x323B12FELL,
#line 764
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFA6B6LL, (jlong) 0x7E983E86LL, (jlong) 0x23392636LL,
#line 765
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFDD39LL, (jlong) 0x029CCA2CLL, (jlong) 0x035F7017LL,
#line 766
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFF2A3LL, (jlong) 0x205DBF7BLL, (jlong) 0x173D7F90LL,
#line 767
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFAEFLL, (jlong) 0x3F79145BLL, (jlong) 0x642F005DLL,
#line 768
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFE1BLL, (jlong) 0x23B2C7E4LL, (jlong) 0x6CA216CFLL,
#line 769
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFF4DLL, (jlong) 0x1E959E3FLL, (jlong) 0x4A29BB03LL,
#line 770
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFBELL, (jlong) 0x7C23D3D9LL, (jlong) 0x71DC92E4LL,
#line 771
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFE8LL, (jlong) 0x55110485LL, (jlong) 0x0E1813E2LL,
#line 772
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFF7LL, (jlong) 0x5EBC7B7BLL, (jlong) 0x2DFEE922LL,
#line 773
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFDLL, (jlong) 0x0EDB0975LL, (jlong) 0x0C9F1639LL,
#line 774
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x00DDA1A1LL, (jlong) 0x6DE86AA0LL,
#line 775
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x54CF6D87LL, (jlong) 0x023F1F47LL,
#line 776
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7186FF6ALL, (jlong) 0x5B71BF8CLL,
#line 777
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7B375EBCLL, (jlong) 0x767A89DCLL,
#line 778
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7E70BA89LL, (jlong) 0x44EBCEAALL,
#line 779
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7F7F98B5LL, (jlong) 0x44C8E44ALL,
#line 780
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FD744C2LL, (jlong) 0x448EE5A4LL,
#line 781
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FF34165LL, (jlong) 0x008855D0LL,
#line 782
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFC1110LL, (jlong) 0x754A60B6LL,
#line 783
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFECD77LL, (jlong) 0x44BE6D4ALL,
#line 784
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFA3F4LL, (jlong) 0x7400A73ELL,
#line 785
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFE4BDLL, (jlong) 0x1143830BLL,
#line 786
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFF809LL, (jlong) 0x1A385059LL,
#line 787
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFDB4LL, (jlong) 0x41CA0794LL,
#line 788
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFF59LL, (jlong) 0x02FFB605LL,
#line 789
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFD1LL, (jlong) 0x18360E8DLL,
#line 790
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFF3LL, (jlong) 0x072A0E9ALL,
#line 791
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFCLL, (jlong) 0x3C1BFEB0LL,
#line 792
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x066EBCDDLL,
#line 793
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x5FBE171ALL,
#line 794
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x778EB81FLL,
#line 795
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7DD211FELL,
#line 796
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7F71F071LL,
#line 797
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FDC528FLL,
#line 798
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FF7298CLL,
#line 799
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFDD739LL,
#line 800
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFF7ACALL,
#line 801
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFE056LL,
#line 802
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFF893LL,
#line 803
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFE48LL,
#line 804
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFF9CLL,
#line 805
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFE9LL,
#line 806
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFBLL,
#line 807
      (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL, (jlong) 0x7FFFFFFFLL } count:444];
      J2OBJC_SET_INITIALIZED(OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian)
    }
  }

@end


#line 689
void OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_init(OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian *self) {
  NSObject_init(self);
}


#line 689
OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian *new_OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian, init)
}


#line 689
OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian *create_OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian, init)
}


#line 811
void OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_sample_gauss_polyWithInt_withByteArray_withInt_withLongArray_withInt_(jint nonce, IOSByteArray *seed, jint seedOffset, IOSLongArray *poly, jint polyOffset) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_initialize();
  jint dmsp = JreLShift32(nonce, 8);
  
#line 815
  IOSByteArray *samp = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_CHUNK_SIZE * OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_CDT_COLS * 4];
  IOSIntArray *c = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_CDT_COLS];
  jint borrow;
  
#line 817
  jint sign;
  jint mask = JreURShift32(-1, 1);
  
#line 820
  for (jint chunk = 0; chunk < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; chunk += OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_CHUNK_SIZE) {
    
#line 823
    OrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK256SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(
#line 824
    samp, 0, OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_CHUNK_SIZE * OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_CDT_COLS * 4, (jshort) dmsp++, seed, seedOffset, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_SEEDBYTES);
    
#line 826
    for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_CHUNK_SIZE; i++) {
      
#line 828
      *IOSLongArray_GetRef(nil_chk(poly), polyOffset + chunk + i) = 0;
      for (jint j = 1; j < OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_CDT_ROWS; j++) {
        
#line 831
        borrow = 0;
        for (jint k = OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_CDT_COLS - 1; k >= 0; k--) {
          
#line 834
          *IOSIntArray_GetRef(c, k) = (jint) ((OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(samp, 0, i * OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_CDT_COLS + k) & mask) - (IOSLongArray_Get(nil_chk(OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_cdt_v), j * OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_CDT_COLS + k) + borrow));
          borrow = JreRShift32(IOSIntArray_Get(c, k), OrgBouncycastlePqcCryptoQteslaQTesla3p_RADIX32 - 1);
        }
        *IOSLongArray_GetRef(poly, polyOffset + chunk + i) += ~borrow & 1;
      }
      sign = JreRShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_atWithByteArray_withInt_withInt_(samp, 0, i * OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian_CDT_COLS), OrgBouncycastlePqcCryptoQteslaQTesla3p_RADIX32 - 1);
      *IOSLongArray_GetRef(poly, polyOffset + chunk + i) = (sign & -IOSLongArray_Get(poly, polyOffset + chunk + i)) | (~sign & IOSLongArray_Get(poly, polyOffset + chunk + i));
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoQteslaQTesla3p_Gaussian)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/qtesla/QTesla3p.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial)


#line 873
@implementation OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 873
- (instancetype)init {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 1140
+ (void)poly_uniformWithLongArray:(IOSLongArray *)a
                    withByteArray:(IOSByteArray *)seed
                          withInt:(jint)seedOffset {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_uniformWithLongArray_withByteArray_withInt_(a, seed, seedOffset);
}


#line 1201
+ (jlong)reduceWithLong:(jlong)a {
  return OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_reduceWithLong_(a);
}


#line 1212
+ (void)nttWithLongArray:(IOSLongArray *)a
           withLongArray:(IOSLongArray *)w {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_nttWithLongArray_withLongArray_(a, w);
}


#line 1233
+ (jlong)barr_reduceWithLong:(jlong)a {
  return OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_barr_reduceWithLong_(a);
}


#line 1240
+ (void)nttinvWithLongArray:(IOSLongArray *)a
              withLongArray:(IOSLongArray *)w {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_nttinvWithLongArray_withLongArray_(a, w);
}


#line 1260
+ (void)nttinvWithLongArray:(IOSLongArray *)a
                    withInt:(jint)aPos
              withLongArray:(IOSLongArray *)w {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_nttinvWithLongArray_withInt_withLongArray_(a, aPos, w);
}


#line 1281
+ (void)poly_nttWithLongArray:(IOSLongArray *)x_ntt
                withLongArray:(IOSLongArray *)x {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_nttWithLongArray_withLongArray_(x_ntt, x);
}


#line 1292
+ (void)poly_pointwiseWithLongArray:(IOSLongArray *)result
                      withLongArray:(IOSLongArray *)x
                      withLongArray:(IOSLongArray *)y {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_pointwiseWithLongArray_withLongArray_withLongArray_(result, x, y);
}


#line 1301
+ (void)poly_pointwiseWithLongArray:(IOSLongArray *)result
                            withInt:(jint)rpos
                      withLongArray:(IOSLongArray *)x
                            withInt:(jint)xpos
                      withLongArray:(IOSLongArray *)y {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_pointwiseWithLongArray_withInt_withLongArray_withInt_withLongArray_(result, rpos, x, xpos, y);
}


#line 1311
+ (void)poly_mulWithLongArray:(IOSLongArray *)result
                withLongArray:(IOSLongArray *)x
                withLongArray:(IOSLongArray *)y {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_mulWithLongArray_withLongArray_withLongArray_(result, x, y);
}


#line 1327
+ (void)poly_mulWithLongArray:(IOSLongArray *)result
                      withInt:(jint)rpos
                withLongArray:(IOSLongArray *)x
                      withInt:(jint)xpos
                withLongArray:(IOSLongArray *)y {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_mulWithLongArray_withInt_withLongArray_withInt_withLongArray_(result, rpos, x, xpos, y);
}

+ (void)poly_addWithLongArray:(IOSLongArray *)result
                withLongArray:(IOSLongArray *)x
                withLongArray:(IOSLongArray *)y {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_addWithLongArray_withLongArray_withLongArray_(result, x, y);
}


#line 1344
+ (void)poly_subWithLongArray:(IOSLongArray *)result
                      withInt:(jint)rpos
                withLongArray:(IOSLongArray *)x
                      withInt:(jint)xpos
                withLongArray:(IOSLongArray *)y
                      withInt:(jint)ypos {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_subWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_(result, rpos, x, xpos, y, ypos);
}


#line 1354
+ (void)poly_add_correctWithLongArray:(IOSLongArray *)result
                              withInt:(jint)rpos
                        withLongArray:(IOSLongArray *)x
                              withInt:(jint)xpos
                        withLongArray:(IOSLongArray *)y
                              withInt:(jint)ypos {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_add_correctWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_(result, rpos, x, xpos, y, ypos);
}


#line 1366
+ (void)poly_sub_correctWithIntArray:(IOSIntArray *)result
                        withIntArray:(IOSIntArray *)x
                        withIntArray:(IOSIntArray *)y {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_sub_correctWithIntArray_withIntArray_withIntArray_(result, x, y);
}


#line 1377
+ (void)sparse_mul8WithLongArray:(IOSLongArray *)prod
                         withInt:(jint)ppos
                   withByteArray:(IOSByteArray *)s
                         withInt:(jint)spos
                    withIntArray:(IOSIntArray *)pos_list
                  withShortArray:(IOSShortArray *)sign_list {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_sparse_mul8WithLongArray_withInt_withByteArray_withInt_withIntArray_withShortArray_(prod, ppos, s, spos, pos_list, sign_list);
}


#line 1401
+ (void)sparse_mul8WithLongArray:(IOSLongArray *)prod
                   withByteArray:(IOSByteArray *)s
                    withIntArray:(IOSIntArray *)pos_list
                  withShortArray:(IOSShortArray *)sign_list {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_sparse_mul8WithLongArray_withByteArray_withIntArray_withShortArray_(prod, s, pos_list, sign_list);
}


#line 1426
+ (void)sparse_mul16WithIntArray:(IOSIntArray *)prod
                    withIntArray:(IOSIntArray *)s
                    withIntArray:(IOSIntArray *)pos_list
                  withShortArray:(IOSShortArray *)sign_list {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_sparse_mul16WithIntArray_withIntArray_withIntArray_withShortArray_(prod, s, pos_list, sign_list);
}


#line 1451
+ (void)sparse_mul32WithIntArray:(IOSIntArray *)prod
                    withIntArray:(IOSIntArray *)pk
                    withIntArray:(IOSIntArray *)pos_list
                  withShortArray:(IOSShortArray *)sign_list {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_sparse_mul32WithIntArray_withIntArray_withIntArray_withShortArray_(prod, pk, pos_list, sign_list);
}


#line 1474
+ (void)sparse_mul32WithLongArray:(IOSLongArray *)prod
                          withInt:(jint)ppos
                     withIntArray:(IOSIntArray *)pk
                          withInt:(jint)pkPos
                     withIntArray:(IOSIntArray *)pos_list
                   withShortArray:(IOSShortArray *)sign_list {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_sparse_mul32WithLongArray_withInt_withIntArray_withInt_withIntArray_withShortArray_(prod, ppos, pk, pkPos, pos_list, sign_list);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x8, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 7, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 9, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 10, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 13, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 14, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 17, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 20, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 25, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 25, 26, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(poly_uniformWithLongArray:withByteArray:withInt:);
  methods[2].selector = @selector(reduceWithLong:);
  methods[3].selector = @selector(nttWithLongArray:withLongArray:);
  methods[4].selector = @selector(barr_reduceWithLong:);
  methods[5].selector = @selector(nttinvWithLongArray:withLongArray:);
  methods[6].selector = @selector(nttinvWithLongArray:withInt:withLongArray:);
  methods[7].selector = @selector(poly_nttWithLongArray:withLongArray:);
  methods[8].selector = @selector(poly_pointwiseWithLongArray:withLongArray:withLongArray:);
  methods[9].selector = @selector(poly_pointwiseWithLongArray:withInt:withLongArray:withInt:withLongArray:);
  methods[10].selector = @selector(poly_mulWithLongArray:withLongArray:withLongArray:);
  methods[11].selector = @selector(poly_mulWithLongArray:withInt:withLongArray:withInt:withLongArray:);
  methods[12].selector = @selector(poly_addWithLongArray:withLongArray:withLongArray:);
  methods[13].selector = @selector(poly_subWithLongArray:withInt:withLongArray:withInt:withLongArray:withInt:);
  methods[14].selector = @selector(poly_add_correctWithLongArray:withInt:withLongArray:withInt:withLongArray:withInt:);
  methods[15].selector = @selector(poly_sub_correctWithIntArray:withIntArray:withIntArray:);
  methods[16].selector = @selector(sparse_mul8WithLongArray:withInt:withByteArray:withInt:withIntArray:withShortArray:);
  methods[17].selector = @selector(sparse_mul8WithLongArray:withByteArray:withIntArray:withShortArray:);
  methods[18].selector = @selector(sparse_mul16WithIntArray:withIntArray:withIntArray:withShortArray:);
  methods[19].selector = @selector(sparse_mul32WithIntArray:withIntArray:withIntArray:withShortArray:);
  methods[20].selector = @selector(sparse_mul32WithLongArray:withInt:withIntArray:withInt:withIntArray:withShortArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "zeta", "[J", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "zetainv", "[J", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
  };
  static const void *ptrTable[] = { "poly_uniform", "[J[BI", "reduce", "J", "ntt", "[J[J", "barr_reduce", "nttinv", "[JI[J", "poly_ntt", "poly_pointwise", "[J[J[J", "[JI[JI[J", "poly_mul", "poly_add", "poly_sub", "[JI[JI[JI", "poly_add_correct", "poly_sub_correct", "[I[I[I", "sparse_mul8", "[JI[BI[I[S", "[J[B[I[S", "sparse_mul16", "[I[I[I[S", "sparse_mul32", "[JI[II[I[S", &OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_zeta, &OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_zetainv, "LOrgBouncycastlePqcCryptoQteslaQTesla3p;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial = { "QTesla3PPolynomial", "org.bouncycastle.pqc.crypto.qtesla", ptrTable, methods, fields, 7, 0x8, 21, 2, 29, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial;
}

+ (void)initialize {
  if (self == [OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial class]) {
    OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_zeta = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 878
      147314272, 762289503, 284789571, 461457674, 723990704, 123382358, 685457283, 458774590, 644795450, 723622678, 441493948, 676062368, 648739792, 214990524, 261899220, 138474554,
#line 879
      205277234, 788000393, 541334956, 769530525, 786231394, 812002793, 251385069, 152717354, 674883688, 458756880, 323745289, 823881240, 686340396, 716163820, 107735873, 144028791,
#line 880
      586327243, 71257244, 739303131, 487030542, 313626215, 396596783, 664640087, 728258996, 854656117, 567834989, 2315110, 210792230, 795895843, 433034260, 432732757, 480454055,
#line 881
      750130006, 47628047, 2271301, 98590211, 729637734, 683553815, 476917424, 121851414, 296210757, 820475433, 403416438, 605633242, 804828963, 435181077, 781182803, 276684653,
#line 882
      329135201, 697859430, 248472020, 396579594, 109340098, 97605675, 755271019, 565755143, 534799496, 378374148, 85686225, 298978496, 650100484, 712463562, 818417023, 283716467,
#line 883
      269132585, 153024538, 223768950, 331863760, 761523727, 586019306, 805044248, 810909760, 77905343, 401203343, 162625701, 616243024, 659789238, 385270982, 720521140, 545633566,
#line 884
      688663167, 740046782, 257189758, 115795491, 101106443, 409863172, 622399622, 405606434, 498832246, 730567206, 350755879, 41236295, 561547732, 525723591, 18655497, 3396399,
#line 885
      289694332, 221478904, 738940554, 769726362, 32128402, 693016435, 275431006, 65292213, 601823865, 469363520, 480544944, 607230206, 473150754, 267072604, 463615065, 412972775,
#line 886
      197544577, 770873783, 189036815, 407973558, 110878446, 442760341, 667560342, 756992079, 663708407, 585601880, 763637579, 660019224, 424935088, 249313490, 844593983, 664952705,
#line 887
      274981537, 40233161, 655530034, 742724096, 8926394, 67709207, 616610795, 539664358, 306118645, 741629065, 283521858, 621397947, 369041534, 162477412, 258256937, 269480966,
#line 888
      75469364, 815614830, 724060729, 510819743, 489239410, 265607303, 103024793, 434961090, 474838542, 234701483, 505818866, 450427360, 188113529, 650423376, 599263141, 720479782,
#line 889
      755079140, 469798456, 745591660, 432033717, 530128582, 94480771, 722477467, 169342233, 35413255, 89769525, 424389771, 240236288, 360665614, 66702784, 76128663, 565345206,
#line 890
      605031892, 393503210, 249841967, 485930917, 45880284, 746120091, 684031522, 537926896, 408749937, 608644803, 692593939, 515424474, 748771159, 155377700, 347101257, 393516280,
#line 891
      708186062, 809233270, 562547654, 768251664, 651110951, 574473323, 588028067, 352359235, 646902518, 410726541, 134129459, 460099853, 829152883, 819102028, 7270760, 562515302,
#line 892
      419641762, 347973450, 161011009, 401974733, 619807719, 559105457, 276126568, 165473862, 380215069, 356617900, 347744328, 615885981, 824819772, 811367929, 6451967, 515345658,
#line 893
      648239021, 56427040, 709160497, 71545092, 390921213, 17177139, 194174898, 825533429, 497469884, 88988508, 64227614, 641021859, 159258883, 529265733, 823190295, 567280997,
#line 894
      414094239, 238392498, 695610059, 416342151, 90807038, 206865379, 568337348, 168011486, 844375038, 777332780, 147582038, 199025846, 396231915, 151630666, 466807217, 12672521,
#line 895
      570774644, 764098787, 283719496, 779154504, 383628791, 851035387, 395488461, 291115871, 52707730, 776449280, 479801706, 73403989, 402014636, 255214342, 56904698, 446531030,
#line 896
      639487570, 848061696, 202732901, 739018922, 653983847, 453022791, 391722680, 584290855, 270911670, 390838431, 653070075, 535876472, 83207555, 131151682, 505677504, 778583044,
#line 897
      472363568, 734419459, 768500943, 321131696, 371745445, 751887879, 51797676, 157604159, 838805925, 358099697, 763440819, 776721566, 719570904, 304610785, 656838485, 239522278,
#line 898
      796234199, 659506535, 825373307, 674901303, 250484891, 54612517, 410236408, 111976920, 728940855, 720463104, 559960962, 514189554, 637176165, 436151981, 485801800, 802811374,
#line 899
      549456481, 808832355, 112672706, 199163132, 807410080, 645955491, 365378122, 222316474, 381896744, 693909930, 402130292, 199856804, 277639257, 6848838, 648262319, 601521139,
#line 900
      108516632, 392382841, 563420106, 475932203, 249861415, 99274558, 152886431, 744977783, 269184267, 562674804, 760959275, 733098096, 771348891, 674288361, 631521272, 513632066,
#line 901
      476339117, 621937967, 206834230, 507101607, 420341698, 528715580, 853092790, 580174958, 278044321, 432350205, 603769437, 144426940, 733518338, 365468467, 848983278, 385382826,
#line 902
      846062026, 593903051, 216589699, 219997638, 350708517, 733669279, 624754239, 499821820, 772548008, 199677439, 287505007, 144199205, 215073292, 825467700, 101591831, 571728784,
#line 903
      841898341, 420897808, 61323616, 823475752, 72494861, 89946011, 236594097, 379582577, 539401967, 221244669, 479250487, 100726882, 263096036, 647161225, 491060387, 419890898,
#line 904
      816149055, 546441322, 690509770, 215789647, 5870948, 821456387, 294091098, 783700004, 278643020, 520754327, 813718894, 123610053, 157045201, 265331664, 807174256, 258134244,
#line 905
      703519669, 300265991, 41892125, 662173055, 439638698, 494124024, 700655120, 535348417, 37146186, 379568907, 644973451, 554904963, 594757858, 477812802, 266085643, 46337543,
#line 906
      454847754, 496027901, 701947604, 5722633, 790588605, 233501932, 728956461, 462020148, 214013660, 155806979, 159935426, 423504958, 638889309, 602641304, 277759403, 71654804,
#line 907
      710920410, 108337831, 641924564, 252946326, 463082282, 23277660, 142056200, 263317553, 9044238, 367816044, 349695658, 291597086, 230031083, 385106216, 281069679, 644033142,
#line 908
      134221740, 212497862, 686686078, 787489098, 781698667, 748299513, 774414792, 380836293, 114027649, 766161763, 10536612, 707355910, 100516219, 637517297, 21478533, 769067854,
#line 909
      668364559, 410803198, 64949715, 643421522, 525590993, 585289785, 423839840, 554109325, 450599860, 295350132, 435789550, 306634115, 611298620, 777817576, 553655202, 804525538,
#line 910
      794474290, 138542076, 780958763, 62228371, 738032107, 684994110, 661486955, 67099069, 68865906, 32413094, 358393763, 205008770, 849715545, 289798348, 384767209, 787328590,
#line 911
      823677120, 47455925, 706001331, 612392717, 487804928, 731804935, 520572665, 442307581, 351275150, 726042356, 667657829, 254929787, 459520026, 625393223, 319307882, 77267096,
#line 912
      815224795, 335964550, 408353208, 604252110, 574953308, 563501897, 515015302, 313600371, 178773384, 417549087, 510834475, 167049599, 488791556, 664276219, 82933775, 822541833,
#line 913
      17111190, 409659978, 96304098, 500484311, 269766378, 327037310, 584926256, 538611363, 404132255, 170931824, 744460626, 154011192, 322194096, 215888234, 258344560, 702851111,
#line 914
      192046250, 738511820, 530780560, 57197515, 335425579, 410968369, 830078545, 448351649, 208921555, 356653676, 718038774, 424362596, 158929491, 420096666, 387056270, 797383293,
#line 915
      381201911, 466480709, 373815662, 84912008, 4969808, 524614597, 93448903, 559481007, 400813998, 665223025, 601707338, 466022707, 192709574, 615503265, 822863744, 639854175,
#line 916
      158713505, 12757666, 389196370, 823105438, 682974863, 468401586, 93508626, 402414043, 806357152, 180544963, 27876186, 321527031, 329857607, 669501423, 829809824, 333202822,
#line 917
      106923493, 368991112, 282317903, 790323774, 517381333, 548329656, 236147848, 700119793, 404187488, 343578810, 798813301, 497964535, 656188346, 678161787, 736817175, 518031339,
#line 918
      716647183, 674797219, 308643560, 714308544, 516103468, 605229646, 564549717, 47650358, 706404486, 494887760, 152496104, 54954356, 271435602, 76951527, 136123931, 601823638,
#line 919
      329273401, 252710411, 754980731, 351648254, 49239731, 837833233, 88830509, 598216539, 155534490, 669603727, 418388693, 79322074, 636251444, 703683994, 796989459, 126497707,
#line 920
      644863316, 730359063, 265213001, 64483814, 552208981, 8135537, 782474322, 780853310, 733976806, 395661138, 128188419, 266691358, 407092046, 447349747, 526245954, 119272088,
#line 921
      359659635, 812410956, 669835517, 565139408, 248981831, 139910745, 685462294, 406991131, 709944045, 589819925, 714299787, 72923680, 648836181, 145321778, 392775383, 243093077,
#line 922
      412955839, 174619485, 310936394, 699727061, 421087619, 745421519, 539546394, 29471558, 116471631, 852650639, 443777703, 773131303, 81618669, 756719012, 702785073, 847088653,
#line 923
      851830586, 300908692, 430974543, 463215976, 668971423, 414271988, 108350516, 345933325, 716417649, 174980945, 679092437, 384030489, 814050910, 506580116, 249434097, 178438885,
#line 924
      146797119, 10369463, 296359082, 215645133, 149545847, 483689845, 322009569, 308978588, 38531178, 328571637, 815396967, 709744233, 765487128, 645413104, 564779557, 213794315,
#line 925
      280607549, 124792697, 423470554, 631348430, 21223627, 220718413, 598791979, 47797633, 734556299, 590321944, 168292920, 484802055, 340999812, 769601438, 42675060, 116026587,
#line 926
      227462622, 543574607, 444066479, 467277895, 278798674, 597413704, 350168725, 301936652, 82885511, 656047519, 765110538, 52228202, 533005731, 621989298, 148235931, 317833915,
#line 927
      118463894, 522391939, 451332724, 548031654, 73854149, 527786213, 583308898, 840663438, 275278054, 362931963, 587861579, 830807449, 431695707, 178004048, 75513216, 60681147,
#line 928
      638603143, 470791469, 490903319, 527370962, 102981857, 224220555, 756514239, 293859807, 797926303, 620196520, 466126507, 646136763, 265504163, 213257337, 92270416, 398713724,
#line 929
      91810366, 724247342, 855386762, 631553083, 376095634, 833728623, 636218061, 510719408, 378530670, 737821436, 127781731, 3443282, 770116208, 769633348, 430675947, 40370755,
#line 930
      52361322, 844601468, 442556599, 128290354, 494328514, 405616679, 651440882, 421541290, 171560170, 386143493, 284277254, 450756213, 248305939, 526718005, 300780198, 714218239,
#line 931
      68021827, 527353904, 236472015, 309320156, 683815803, 527980097, 598849444, 779607597, 339852811, 845420163, 96001931, 326760873, 609319751, 520803868, 140143851, 766988701,
#line 932
      844896794, 532008178, 388459130, 574799295, 760406065, 773758517, 453271555, 134636434, 155747417, 105505251, 796987277, 399016325, 71156680, 709579308, 274279004, 96962867,
#line 933
      476741915, 585319990, 709143538, 721328791, 293159344, 640577897, 138404614, 572892015, 394460832, 465897068, 325895331, 413861636, 447337182, 376950267, 721061932, 181671909,
#line 934
      272138750, 247768905, 634973622, 280653872, 165108426, 134241779, 15142090, 153256717, 783424845, 773227607, 172477802, 504458250, 349868083, 461422806, 487725644, 586146740,
#line 935
      561546455, 815406759, 468110471, 126476456, 285774551, 522013234, 801943660, 79684345, 654558548, 188038414, 249923934, 551812615, 562560206, 407120348, 384535446, 176837117,
#line 936
      433155458, 82591339, 459412819, 435604627, 312211805, 98158590, 752137480, 446017293, 666480139, 60261988, 275386848, 642778031, 8582401, 677484160, 819506256, 333441964,
#line 937
      25465219, 190315429, 91529631, 754681170, 563660271, 167135649, 20270015, 115773732, 658954441, 132923202, 844102455, 453432758, 250487209, 423813160, 632223296, 537494486,
#line 938
      158265753, 327949044, 494109748, 659672289, 67984726, 422358258, 345141182, 164372996, 338500924, 41400311, 207638305, 832074651, 50853458, 228267776, 621895888, 635834787,
#line 939
      484972544, 181125024, 558134871, 282159878, 788157855, 145576343, 194837894, 501440949, 63641414, 252098681, 835930645, 662856247, 456140980, 206147937, 565198503, 449503819,
#line 940
      684013129, 494002381, 793836418, 649296754, 444313288, 136544068, 540002286, 355912945, 613175147, 134541429, 843111781, 672612536, 541098995, 734996181, 211869705, 620777828,
#line 941
      756152791, 242128346, 795442420, 73925532, 735232214, 738668090, 530800757, 266183732, 97165934, 803231879, 10057267, 175942047, 181460965, 320684297, 637472526, 213840116,
#line 942
      182671953, 152704513, 388004388, 597349323, 473851493, 445333546, 679315863, 267078568, 46538491, 530171754, 698082287, 75308587, 266467406, 96440883, 759196579, 470119952,
#line 943
      381731475, 428392158, 10628712, 173921356, 116809433, 323843928, 812172630, 403459283, 655501128, 261944441, 774418023, 790520709, 589149480, 264133112, 806274256, 752372117,
#line 944
      66236193, 713859568, 90804933, 551864345, 843839891, 600244073, 719230074, 803646506, 254956426, 138935723, 738829647, 109576220, 105819621, 249706947, 110623114, 10002331,
#line 945
      795710911, 547062229, 721440199, 820747461, 397666160, 685179945, 463869301, 470338753, 641244231, 652990696, 698429485, 41147155, 638072709, 515832968, 241130026, 314161759,
#line 946
      526815813, 529167244, 53391331, 782008115, 822962086, 337706389, 648197286, 209496506, 760818531, 781900302, 717270807, 709143641, 740503641, 734328409, 514061476, 844010670,
#line 947
      67993787, 712083588, 319801387, 338260400, 48758556, 304195768, 478833380, 841413917, 710197685, 196321647, 777595184, 775983866, 147506314, 620961439, 399972264, 398715644,
#line 948
      684489092, 659918078, 664075287, 723890579, 643103903, 508525962, 375409248, 501237729, 740609783, 639854810, 510797913, 521151016, 421045341, 193698327, 800266392, 93518128,
#line 949
      443879633, 699245445, 194001794, 123905867, 75572337, 242620749, 463111940, 755239011, 31718790, 162155292, 386689240, 381413538, 745322913, 367897558, 343088005, 31706107,
#line 950
      10842029, 404961623, 537521191, 281624684, 372852160, 55286017, 534907560, 264398082, 667644310, 486871690, 716964533, 734731419, 143593638, 293949413, 760014789, 594443755,
#line 951
      147804127, 537704286, 460110740, 596458323, 577775570, 333025386, 260094086, 711487611, 359384182, 323339045, 716675075, 248179763, 525311626, 76326208, 559009987, 548139736,
#line 952
      541721430, 31450329, 653923741, 676193285, 295171241, 558845563, 387079118, 403184480, 807941436, 501042343, 284608894, 705710380, 82388415, 763336555, 126077422, 438548854,
#line 953
      606252517, 144569238, 126964439, 809559381, 263253751, 547929033, 236704198, 377978058, 59501955, 749500335, 254242336, 605755194, 408388953, 116242711, 116340056, 691021496,
#line 954
      48100285, 371076069, 638156108, 211570763, 185945242, 653505761, 667569173, 335131755, 736662207, 572078378, 755939949, 840393623, 322934679, 520522390, 252068808, 491370519,
#line 955
      200565770, 552637112, 182345569, 394747039, 822229467, 817698102, 644484388, 156591766, 729600982, 695826242, 509682463, 785132583, 746139100, 188369785, 628995003, 406654440,
#line 956
      650660075, 676485042, 540766742, 493428142, 753346328, 82608613, 670846442, 145894970, 770907988, 621807160, 14676199, 793865193, 36579515, 619741404, 303691972, 794920577,
#line 957
      134684826, 190038753, 538889970, 836657477, 643017556, 316870164, 464572481, 305395359, 446406992, 587814221, 423552502, 122802120, 146043780, 173756097, 130720237, 445515559,
#line 958
      109884833, 133119099, 804139234, 834841519, 458514524, 74213698, 490363622, 119287122, 165016718, 351506713, 433750226, 439149867, 348281119, 319795826, 320785867, 446561207,
#line 959
      705678831, 714536161, 172299381, 552925586, 635421942, 851853231, 208071525, 142303096, 93164236, 207534795, 655906672, 558127940, 98870558, 388322132, 87475979, 835970665,
#line 960
      61996500, 298060757, 256194194, 563529863, 249184704, 451295997, 73892211, 559049908, 44006160, 832886345, 720732161, 255948582, 827295342, 629663637, 323103159, 155698755,
#line 961
      598913314, 586685341, 761273875, 135225209, 324099714, 391112815, 493469140, 796490769, 667498514, 148390126, 721802249, 781884558, 309264043, 603401759, 503111668, 563611748,
#line 962
      363342598, 383209405, 108340736, 758017880, 145907493, 312330194, 608895549, 45540348, 143092704, 772401556, 806068040, 853177536, 662120004, 463347842, 495085709, 560431884,
#line 963
      274002454, 76985308, 519320299, 253092838, 727478114, 593752634, 490277266, 206283832, 701277908, 504787112, 816832531, 730997507, 27807749, 58254704, 584933136, 515463756,
#line 964
      241104222, 251881934, 566567573, 592887586, 528932268, 88111104, 523103099, 448331392, 351083975, 157811347, 758866581, 802151021, 843579185, 481417280, 507414106, 462708367,
#line 965
      461501222, 790988186, 462220673, 727683888, 159759683, 59757110, 310746434, 326369241, 305829588, 457718309, 529317279, 503631310, 661769334, 343160359, 472216278, 740498212,
#line 966
      11312284, 760170115, 513391009, 538224236, 710934956, 491998229, 539829044, 610387964, 86624968, 72542777, 493966272, 132327984, 371526334, 182549152, 51622114, 173997077,
#line 967
      550633787, 205437301, 435219235, 406409162, 414751325, 33371226, 40899348, 77245052, 763383124, 817701136, 598256078, 357440859, 468418959, 353612800, 721601331, 262567156,
#line 968
      521577430, 232027892, 75986872, 443113391, 107360999, 482079354, 563502258, 782475535, 402866161, 515580626, 742688144, 677398836, 425899303, 42066550, 537192943, 430672016,
#line 969
      115368023, 64053241, 92008456, 74327791, 572607165, 681138002, 378104858, 695786430, 844827190, 436817825, 751393351, 142965259, 81300919, 688342617, 433082724, 221191094,
#line 970
      712003270, 301076404, 747091407, 514191589, 814985450, 260951422, 187161058, 22316970, 806106670, 759397054, 158423624, 419813636, 462241316, 438231460, 108466764, 212745115,
#line 971
      386264342, 176072326, 767127195, 399981627, 762991681, 173125691, 464627163, 770046798, 179369718, 829917528, 693004603, 178596003, 422852852, 182684967, 662425026, 713404098,
#line 972
      766206683, 130088738, 321282752, 134898541, 86701214, 120555423, 464987852, 82865891, 758340585, 138256323, 308997895, 659614345, 510091933, 822699180, 464631718, 819896232,
#line 973
      120792059, 160708255, 462868879, 72974246, 260451492, 120601343, 228097712, 369436704, 155304088, 74380537, 732305166, 203294189, 307421597, 96510570, 634243454, 486539430,
#line 974
      16204477, 241987531, 317824421, 510180366, 794475492, 262770124, 441034891, 741864347, 205569410, 684844547, 340863522, 440616421, 454438375, 26285496, 141886125, 648947081,
#line 975
      3791510, 529746935, 317826713, 411458050, 661690316, 45696331, 679684665, 184597094, 829228068, 375683582, 591739456, 855242340, 628594662, 30968619, 363932244, 103091463,
#line 976
      614269714, 465960778, 791477766, 332731888, 853151007, 266045534, 132189407, 435008168, 65667470, 669304246, 760035868, 481409581, 36650645, 523634336, 702968013, 351902214,
#line 977
      284360680, 34261165, 593134528, 337534074, 239112910, 710342799, 163287447, 20209506, 780785984, 480727309, 125776519, 691236193, 603228570, 48261672, 183120677, 73638683,
#line 978
      3430616, 568026489, 808739797, 298585898, 64471573, 724550960, 568093636, 187449517, 655699449, 672689645, 829049456, 263525899, 612969883, 621652807, 186362075, 731851539,
#line 979
      377104257, 39335761, 210768226, 253965025, 201921517, 715681274, 369453531, 18897741, 612559390, 660723864, 476963596, 585483298, 318614839, 227626072, 298891387, 110505944,
#line 980
      814885802, 177563961, 443724544, 374856237, 577963338, 617516835, 475669105, 633353115, 12579943, 796644307, 569746680, 22381253, 343603333, 724567543, 845363898, 4023795,
#line 981
      801359177, 347489967, 214644600, 78674056, 131782857, 284041623, 660502381, 161470286, 668158595, 765738294, 715872268, 678418089, 280458288, 758715787, 9311288, 490771912,
#line 982
      757112000, 253990619, 698573830, 390611635, 52593584, 421202448, 494394112, 386893540, 29349323, 533111491, 774401558, 108660117, 405990553, 143728136, 852741683, 354532633,
#line 983
      440222591, 663461253, 593338391, 298882952, 758170600, 660294062, 332348846, 541714172, 77716403, 169377728, 71932929, 110210904, 776771173, 645222398, 162195941, 792388932,
#line 984
      502165627, 146897021, 243625970, 139123400, 462352793, 409369440, 247509680, 270865496, 539140627, 16949766, 245869282, 637926655, 37386603, 383033875, 316560876, 707909555,
#line 985
      367315004, 173821041, 529529257, 227507318, 831716891, 830055847, 228911074, 205127100, 178872273, 819938491, 129875615, 764680417, 97028082, 560682982, 433649390, 727508847,
#line 986
      494848582, 81279272, 435186566, 174468080, 69172161, 241860102, 692179355, 333985572, 788895276, 469576414, 594155471, 157828532, 182105752, 310394758, 673085082, 695719789,
#line 987
      39004854, 251000641, 98748282, 744318650, 815050298, 622456803, 240419561, 403871914, 202214044, 627433637, 649505808, 668918393, 334630440, 386856024, 352649543, 135139523,
#line 988
      216499252, 736376783, 269223150, 468318208, 801808348, 180378366, 640086372, 672618369, 291378195, 732195369, 805632553, 518515631, 603280165, 629836417, 59712833, 531020081,
#line 989
      708771168, 539819295, 179149444, 552251927, 458994127, 584987693, 238644928, 640603619, 46728500, 843989005, 688747457, 236924093, 261539965, 705411056, 765907765, 38095657,
#line 990
      382461698, 146650814, 351462947, 749417520, 628887925, 800857475, 790554154, 695483946, 160495923, 40896482, 471385785, 535516195, 197056285, 622795937, 368016917, 696525353,
#line 991
      377315918, 58087122, 246518254, 431338589, 795949654, 611141265, 406307405, 365750089, 396243561, 843849531, 33802729, 573076974, 557841126, 411725124, 109489622, 370935707,
#line 992
      372610558, 769825999, 367932152, 231499145, 240819898, 22648665, 418344529, 142438794, 552806180, 669450690, 614608056, 784369586, 258710636, 474742428, 166021530, 805595815,
#line 993
      603578176, 686703780, 412868426, 26588048, 379895115, 77550061, 751188758, 294447541, 433574579, 234362222, 821492181, 23912038, 681093196, 483584545, 404339808, 396405029,
#line 994
      744756742, 702481685, 413127074, 204115019, 187381271, 633523978, 433629465, 628184183, 783160918, 268799033, 646479372, 160458176, 602612912, 644506365, 391554011, 676966578,
#line 995
      386430153, 98736426, 412745127, 296141927, 685909285, 355152260, 361415843, 127323093, 586337666, 1734791, 368678692, 155431915, 597290023, 109507713, 291804866, 135016081,
#line 996
      144077689, 35054937, 16808265, 431962815, 534195521, 629326143, 309352001, 319948849, 443083246, 336744161, 100845182, 314804947, 476736581, 468528479, 416978018, 35141019,
#line 997
      43314058, 384847955, 665126798, 295857628, 768013680, 741182796, 157855570, 695547618, 145251639, 818473396, 708640763, 87460130, 736400748, 465173936, 376720282, 437268868,
#line 998
      137236663, 693860377, 247960644, 402124416, 656418852, 231401654, 248187016, 628418583, 224261112, 120581342, 49749199, 588812480, 309599954, 111357387, 14507354, 754564049,
#line 999
      513444423, 816496110, 509193085, 361635970, 190608265, 697367838, 230953561, 140447357, 27745100, 163340427, 607823059, 325305463, 383028479, 269707244, 475022415, 708990989,
#line 1000
      738971809, 797646021, 126610937, 589310701, 191123172, 819715815, 337443183, 432224976, 337343783, 257301390, 172631141, 560659319, 646332329, 55110483, 467212803, 442977895,
#line 1001
      311159578, 569890333, 669396086, 536323022, 542648615, 366162176, 88951009, 408335586, 276237497, 384733042, 525960156, 74199534, 338209206, 676233089, 264342641, 241682204,
#line 1002
      226505461, 165013960, 129858819, 664852498, 432090291, 165700308, 382150900, 537002255, 368893910, 61006155, 238726881, 92317627, 632392147, 404715651, 802622348, 126100061,
#line 1003
      306024238, 397891265, 214661020, 211132870, 783722518, 149847645, 665379914, 624725195, 85864665, 496272723, 304811252, 29995710, 410500887, 756406394, 31206753, 647154006,
#line 1004
      596539568, 783214792, 286381882, 24560691, 681500270, 774933112, 506538708, 850347997, 611696036, 512607061, 251719669, 367108021, 456442965, 636694730, 399940257, 73870039,
#line 1005
      85190759, 264953709, 238854238, 395048514, 612738126, 27417876, 652695826, 188238483, 324168828, 736238139, 789061724, 529275445, 382304068, 176318391, 709989466, 14237691 } count:2048];
      OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_zetainv = [IOSLongArray newArrayWithLongs:(jlong[]){
#line 1009
        146156455, 679827530, 473841853, 326870476, 67084197, 119907782, 531977093, 667907438, 203450095, 828728045, 243407795, 461097407, 617291683, 591192212, 770955162, 782275882,
#line 1010
        456205664, 219451191, 399702956, 489037900, 604426252, 343538860, 244449885, 5797924, 349607213, 81212809, 174645651, 831585230, 569764039, 72931129, 259606353, 208991915,
#line 1011
        824939168, 99739527, 445645034, 826150211, 551334669, 359873198, 770281256, 231420726, 190766007, 706298276, 72423403, 645013051, 641484901, 458254656, 550121683, 730045860,
#line 1012
        53523573, 451430270, 223753774, 763828294, 617419040, 795139766, 487252011, 319143666, 473995021, 690445613, 424055630, 191293423, 726287102, 691131961, 629640460, 614463717,
#line 1013
        591803280, 179912832, 517936715, 781946387, 330185765, 471412879, 579908424, 447810335, 767194912, 489983745, 313497306, 319822899, 186749835, 286255588, 544986343, 413168026,
#line 1014
        388933118, 801035438, 209813592, 295486602, 683514780, 598844531, 518802138, 423920945, 518702738, 36430106, 665022749, 266835220, 729534984, 58499900, 117174112, 147154932,
#line 1015
        381123506, 586438677, 473117442, 530840458, 248322862, 692805494, 828400821, 715698564, 625192360, 158778083, 665537656, 494509951, 346952836, 39649811, 342701498, 101581872,
#line 1016
        841638567, 744788534, 546545967, 267333441, 806396722, 735564579, 631884809, 227727338, 607958905, 624744267, 199727069, 454021505, 608185277, 162285544, 718909258, 418877053,
#line 1017
        479425639, 390971985, 119745173, 768685791, 147505158, 37672525, 710894282, 160598303, 698290351, 114963125, 88132241, 560288293, 191019123, 471297966, 812831863, 821004902,
#line 1018
        439167903, 387617442, 379409340, 541340974, 755300739, 519401760, 413062675, 536197072, 546793920, 226819778, 321950400, 424183106, 839337656, 821090984, 712068232, 721129840,
#line 1019
        564341055, 746638208, 258855898, 700714006, 487467229, 854411130, 269808255, 728822828, 494730078, 500993661, 170236636, 560003994, 443400794, 757409495, 469715768, 179179343,
#line 1020
        464591910, 211639556, 253533009, 695687745, 209666549, 587346888, 72985003, 227961738, 422516456, 222621943, 668764650, 652030902, 443018847, 153664236, 111389179, 459740892,
#line 1021
        451806113, 372561376, 175052725, 832233883, 34653740, 621783699, 422571342, 561698380, 104957163, 778595860, 476250806, 829557873, 443277495, 169442141, 252567745, 50550106,
#line 1022
        690124391, 381403493, 597435285, 71776335, 241537865, 186695231, 303339741, 713707127, 437801392, 833497256, 615326023, 624646776, 488213769, 86319922, 483535363, 485210214,
#line 1023
        746656299, 444420797, 298304795, 283068947, 822343192, 12296390, 459902360, 490395832, 449838516, 245004656, 60196267, 424807332, 609627667, 798058799, 478830003, 159620568,
#line 1024
        488129004, 233349984, 659089636, 320629726, 384760136, 815249439, 695649998, 160661975, 65591767, 55288446, 227257996, 106728401, 504682974, 709495107, 473684223, 818050264,
#line 1025
        90238156, 150734865, 594605956, 619221828, 167398464, 12156916, 809417421, 215542302, 617500993, 271158228, 397151794, 303893994, 676996477, 316326626, 147374753, 325125840,
#line 1026
        796433088, 226309504, 252865756, 337630290, 50513368, 123950552, 564767726, 183527552, 216059549, 675767555, 54337573, 387827713, 586922771, 119769138, 639646669, 721006398,
#line 1027
        503496378, 469289897, 521515481, 187227528, 206640113, 228712284, 653931877, 452274007, 615726360, 233689118, 41095623, 111827271, 757397639, 605145280, 817141067, 160426132,
#line 1028
        183060839, 545751163, 674040169, 698317389, 261990450, 386569507, 67250645, 522160349, 163966566, 614285819, 786973760, 681677841, 420959355, 774866649, 361297339, 128637074,
#line 1029
        422496531, 295462939, 759117839, 91465504, 726270306, 36207430, 677273648, 651018821, 627234847, 26090074, 24429030, 628638603, 326616664, 682324880, 488830917, 148236366,
#line 1030
        539585045, 473112046, 818759318, 218219266, 610276639, 839196155, 317005294, 585280425, 608636241, 446776481, 393793128, 717022521, 612519951, 709248900, 353980294, 63756989,
#line 1031
        693949980, 210923523, 79374748, 745935017, 784212992, 686768193, 778429518, 314431749, 523797075, 195851859, 97975321, 557262969, 262807530, 192684668, 415923330, 501613288,
#line 1032
        3404238, 712417785, 450155368, 747485804, 81744363, 323034430, 826796598, 469252381, 361751809, 434943473, 803552337, 465534286, 157572091, 602155302, 99033921, 365374009,
#line 1033
        846834633, 97430134, 575687633, 177727832, 140273653, 90407627, 187987326, 694675635, 195643540, 572104298, 724363064, 777471865, 641501321, 508655954, 54786744, 852122126,
#line 1034
        10782023, 131578378, 512542588, 833764668, 286399241, 59501614, 843565978, 222792806, 380476816, 238629086, 278182583, 481289684, 412421377, 678581960, 41260119, 745639977,
#line 1035
        557254534, 628519849, 537531082, 270662623, 379182325, 195422057, 243586531, 837248180, 486692390, 140464647, 654224404, 602180896, 645377695, 816810160, 479041664, 124294382,
#line 1036
        669783846, 234493114, 243176038, 592620022, 27096465, 183456276, 200446472, 668696404, 288052285, 131594961, 791674348, 557560023, 47406124, 288119432, 852715305, 782507238,
#line 1037
        673025244, 807884249, 252917351, 164909728, 730369402, 375418612, 75359937, 835936415, 692858474, 145803122, 617033011, 518611847, 263011393, 821884756, 571785241, 504243707,
#line 1038
        153177908, 332511585, 819495276, 374736340, 96110053, 186841675, 790478451, 421137753, 723956514, 590100387, 2994914, 523414033, 64668155, 390185143, 241876207, 753054458,
#line 1039
        492213677, 825177302, 227551259, 903581, 264406465, 480462339, 26917853, 671548827, 176461256, 810449590, 194455605, 444687871, 538319208, 326398986, 852354411, 207198840,
#line 1040
        714259796, 829860425, 401707546, 415529500, 515282399, 171301374, 650576511, 114281574, 415111030, 593375797, 61670429, 345965555, 538321500, 614158390, 839941444, 369606491,
#line 1041
        221902467, 759635351, 548724324, 652851732, 123840755, 781765384, 700841833, 486709217, 628048209, 735544578, 595694429, 783171675, 393277042, 695437666, 735353862, 36249689,
#line 1042
        391514203, 33446741, 346053988, 196531576, 547148026, 717889598, 97805336, 773280030, 391158069, 735590498, 769444707, 721247380, 534863169, 726057183, 89939238, 142741823,
#line 1043
        193720895, 673460954, 433293069, 677549918, 163141318, 26228393, 676776203, 86099123, 391518758, 683020230, 93154240, 456164294, 89018726, 680073595, 469881579, 643400806,
#line 1044
        747679157, 417914461, 393904605, 436332285, 697722297, 96748867, 50039251, 833828951, 668984863, 595194499, 41160471, 341954332, 109054514, 555069517, 144142651, 634954827,
#line 1045
        423063197, 167803304, 774845002, 713180662, 104752570, 419328096, 11318731, 160359491, 478041063, 175007919, 283538756, 781818130, 764137465, 792092680, 740777898, 425473905,
#line 1046
        318952978, 814079371, 430246618, 178747085, 113457777, 340565295, 453279760, 73670386, 292643663, 374066567, 748784922, 413032530, 780159049, 624118029, 334568491, 593578765,
#line 1047
        134544590, 502533121, 387726962, 498705062, 257889843, 38444785, 92762797, 778900869, 815246573, 822774695, 441394596, 449736759, 420926686, 650708620, 305512134, 682148844,
#line 1048
        804523807, 673596769, 484619587, 723817937, 362179649, 783603144, 769520953, 245757957, 316316877, 364147692, 145210965, 317921685, 342754912, 95975806, 844833637, 115647709,
#line 1049
        383929643, 512985562, 194376587, 352514611, 326828642, 398427612, 550316333, 529776680, 545399487, 796388811, 696386238, 128462033, 393925248, 65157735, 394644699, 393437554,
#line 1050
        348731815, 374728641, 12566736, 53994900, 97279340, 698334574, 505061946, 407814529, 333042822, 768034817, 327213653, 263258335, 289578348, 604263987, 615041699, 340682165,
#line 1051
        271212785, 797891217, 828338172, 125148414, 39313390, 351358809, 154868013, 649862089, 365868655, 262393287, 128667807, 603053083, 336825622, 779160613, 582143467, 295714037,
#line 1052
        361060212, 392798079, 194025917, 2968385, 50077881, 83744365, 713053217, 810605573, 247250372, 543815727, 710238428, 98128041, 747805185, 472936516, 492803323, 292534173,
#line 1053
        353034253, 252744162, 546881878, 74261363, 134343672, 707755795, 188647407, 59655152, 362676781, 465033106, 532046207, 720920712, 94872046, 269460580, 257232607, 700447166,
#line 1054
        533042762, 226482284, 28850579, 600197339, 135413760, 23259576, 812139761, 297096013, 782253710, 404849924, 606961217, 292616058, 599951727, 558085164, 794149421, 20175256,
#line 1055
        768669942, 467823789, 757275363, 298017981, 200239249, 648611126, 762981685, 713842825, 648074396, 4292690, 220723979, 303220335, 683846540, 141609760, 150467090, 409584714,
#line 1056
        535360054, 536350095, 507864802, 416996054, 422395695, 504639208, 691129203, 736858799, 365782299, 781932223, 397631397, 21304402, 52006687, 723026822, 746261088, 410630362,
#line 1057
        725425684, 682389824, 710102141, 733343801, 432593419, 268331700, 409738929, 550750562, 391573440, 539275757, 213128365, 19488444, 317255951, 666107168, 721461095, 61225344,
#line 1058
        552453949, 236404517, 819566406, 62280728, 841469722, 234338761, 85237933, 710250951, 185299479, 773537308, 102799593, 362717779, 315379179, 179660879, 205485846, 449491481,
#line 1059
        227150918, 667776136, 110006821, 71013338, 346463458, 160319679, 126544939, 699554155, 211661533, 38447819, 33916454, 461398882, 673800352, 303508809, 655580151, 364775402,
#line 1060
        604077113, 335623531, 533211242, 15752298, 100205972, 284067543, 119483714, 521014166, 188576748, 202640160, 670200679, 644575158, 217989813, 485069852, 808045636, 165124425,
#line 1061
        739805865, 739903210, 447756968, 250390727, 601903585, 106645586, 796643966, 478167863, 619441723, 308216888, 592892170, 46586540, 729181482, 711576683, 249893404, 417597067,
#line 1062
        730068499, 92809366, 773757506, 150435541, 571537027, 355103578, 48204485, 452961441, 469066803, 297300358, 560974680, 179952636, 202222180, 824695592, 314424491, 308006185,
#line 1063
        297135934, 779819713, 330834295, 607966158, 139470846, 532806876, 496761739, 144658310, 596051835, 523120535, 278370351, 259687598, 396035181, 318441635, 708341794, 261702166,
#line 1064
        96131132, 562196508, 712552283, 121414502, 139181388, 369274231, 188501611, 591747839, 321238361, 800859904, 483293761, 574521237, 318624730, 451184298, 845303892, 824439814,
#line 1065
        513057916, 488248363, 110823008, 474732383, 469456681, 693990629, 824427131, 100906910, 393033981, 613525172, 780573584, 732240054, 662144127, 156900476, 412266288, 762627793,
#line 1066
        55879529, 662447594, 435100580, 334994905, 345348008, 216291111, 115536138, 354908192, 480736673, 347619959, 213042018, 132255342, 192070634, 196227843, 171656829, 457430277,
#line 1067
        456173657, 235184482, 708639607, 80162055, 78550737, 659824274, 145948236, 14732004, 377312541, 551950153, 807387365, 517885521, 536344534, 144062333, 788152134, 12135251,
#line 1068
        342084445, 121817512, 115642280, 147002280, 138875114, 74245619, 95327390, 646649415, 207948635, 518439532, 33183835, 74137806, 802754590, 326978677, 329330108, 541984162,
#line 1069
        615015895, 340312953, 218073212, 814998766, 157716436, 203155225, 214901690, 385807168, 392276620, 170965976, 458479761, 35398460, 134705722, 309083692, 60435010, 846143590,
#line 1070
        745522807, 606438974, 750326300, 746569701, 117316274, 717210198, 601189495, 52499415, 136915847, 255901848, 12306030, 304281576, 765340988, 142286353, 789909728, 103773804,
#line 1071
        49871665, 592012809, 266996441, 65625212, 81727898, 594201480, 200644793, 452686638, 43973291, 532301993, 739336488, 682224565, 845517209, 427753763, 474414446, 386025969,
#line 1072
        96949342, 759705038, 589678515, 780837334, 158063634, 325974167, 809607430, 589067353, 176830058, 410812375, 382294428, 258796598, 468141533, 703441408, 673473968, 642305805,
#line 1073
        218673395, 535461624, 674684956, 680203874, 846088654, 52914042, 758979987, 589962189, 325345164, 117477831, 120913707, 782220389, 60703501, 614017575, 99993130, 235368093,
#line 1074
        644276216, 121149740, 315046926, 183533385, 13034140, 721604492, 242970774, 500232976, 316143635, 719601853, 411832633, 206849167, 62309503, 362143540, 172132792, 406642102,
#line 1075
        290947418, 649997984, 400004941, 193289674, 20215276, 604047240, 792504507, 354704972, 661308027, 710569578, 67988066, 573986043, 298011050, 675020897, 371173377, 220311134,
#line 1076
        234250033, 627878145, 805292463, 24071270, 648507616, 814745610, 517644997, 691772925, 511004739, 433787663, 788161195, 196473632, 362036173, 528196877, 697880168, 318651435,
#line 1077
        223922625, 432332761, 605658712, 402713163, 12043466, 723222719, 197191480, 740372189, 835875906, 689010272, 292485650, 101464751, 764616290, 665830492, 830680702, 522703957,
#line 1078
        36639665, 178661761, 847563520, 213367890, 580759073, 795883933, 189665782, 410128628, 104008441, 757987331, 543934116, 420541294, 396733102, 773554582, 422990463, 679308804,
#line 1079
        471610475, 449025573, 293585715, 304333306, 606221987, 668107507, 201587373, 776461576, 54202261, 334132687, 570371370, 729669465, 388035450, 40739162, 294599466, 269999181,
#line 1080
        368420277, 394723115, 506277838, 351687671, 683668119, 82918314, 72721076, 702889204, 841003831, 721904142, 691037495, 575492049, 221172299, 608377016, 584007171, 674474012,
#line 1081
        135083989, 479195654, 408808739, 442284285, 530250590, 390248853, 461685089, 283253906, 717741307, 215568024, 562986577, 134817130, 147002383, 270825931, 379404006, 759183054,
#line 1082
        581866917, 146566613, 784989241, 457129596, 59158644, 750640670, 700398504, 721509487, 402874366, 82387404, 95739856, 281346626, 467686791, 324137743, 11249127, 89157220,
#line 1083
        716002070, 335342053, 246826170, 529385048, 760143990, 10725758, 516293110, 76538324, 257296477, 328165824, 172330118, 546825765, 619673906, 328792017, 788124094, 141927682,
#line 1084
        555365723, 329427916, 607839982, 405389708, 571868667, 470002428, 684585751, 434604631, 204705039, 450529242, 361817407, 727855567, 413589322, 11544453, 803784599, 815775166,
#line 1085
        425469974, 86512573, 86029713, 852702639, 728364190, 118324485, 477615251, 345426513, 219927860, 22417298, 480050287, 224592838, 759159, 131898579, 764335555, 457432197,
#line 1086
        763875505, 642888584, 590641758, 210009158, 390019414, 235949401, 58219618, 562286114, 99631682, 631925366, 753164064, 328774959, 365242602, 385354452, 217542778, 795464774,
#line 1087
        780632705, 678141873, 424450214, 25338472, 268284342, 493213958, 580867867, 15482483, 272837023, 328359708, 782291772, 308114267, 404813197, 333753982, 737682027, 538312006,
#line 1088
        707909990, 234156623, 323140190, 803917719, 91035383, 200098402, 773260410, 554209269, 505977196, 258732217, 577347247, 388868026, 412079442, 312571314, 628683299, 740119334,
#line 1089
        813470861, 86544483, 515146109, 371343866, 687853001, 265823977, 121589622, 808348288, 257353942, 635427508, 834922294, 224797491, 432675367, 731353224, 575538372, 642351606,
#line 1090
        291366364, 210732817, 90658793, 146401688, 40748954, 527574284, 817614743, 547167333, 534136352, 372456076, 706600074, 640500788, 559786839, 845776458, 709348802, 677707036,
#line 1091
        606711824, 349565805, 42095011, 472115432, 177053484, 681164976, 139728272, 510212596, 747795405, 441873933, 187174498, 392929945, 425171378, 555237229, 4315335, 9057268,
#line 1092
        153360848, 99426909, 774527252, 83014618, 412368218, 3495282, 739674290, 826674363, 316599527, 110724402, 435058302, 156418860, 545209527, 681526436, 443190082, 613052844,
#line 1093
        463370538, 710824143, 207309740, 783222241, 141846134, 266325996, 146201876, 449154790, 170683627, 716235176, 607164090, 291006513, 186310404, 43734965, 496486286, 736873833,
#line 1094
        329899967, 408796174, 449053875, 589454563, 727957502, 460484783, 122169115, 75292611, 73671599, 848010384, 303936940, 791662107, 590932920, 125786858, 211282605, 729648214,
#line 1095
        59156462, 152461927, 219894477, 776823847, 437757228, 186542194, 700611431, 257929382, 767315412, 18312688, 806906190, 504497667, 101165190, 603435510, 526872520, 254322283,
#line 1096
        720021990, 779194394, 584710319, 801191565, 703649817, 361258161, 149741435, 808495563, 291596204, 250916275, 340042453, 141837377, 547502361, 181348702, 139498738, 338114582,
#line 1097
        119328746, 177984134, 199957575, 358181386, 57332620, 512567111, 451958433, 156026128, 619998073, 307816265, 338764588, 65822147, 573828018, 487154809, 749222428, 522943099,
#line 1098
        26336097, 186644498, 526288314, 534618890, 828269735, 675600958, 49788769, 453731878, 762637295, 387744335, 173171058, 33040483, 466949551, 843388255, 697432416, 216291746,
#line 1099
        33282177, 240642656, 663436347, 390123214, 254438583, 190922896, 455331923, 296664914, 762697018, 331531324, 851176113, 771233913, 482330259, 389665212, 474944010, 58762628,
#line 1100
        469089651, 436049255, 697216430, 431783325, 138107147, 499492245, 647224366, 407794272, 26067376, 445177552, 520720342, 798948406, 325365361, 117634101, 664099671, 153294810,
#line 1101
        597801361, 640257687, 533951825, 702134729, 111685295, 685214097, 452013666, 317534558, 271219665, 529108611, 586379543, 355661610, 759841823, 446485943, 839034731, 33604088,
#line 1102
        773212146, 191869702, 367354365, 689096322, 345311446, 438596834, 677372537, 542545550, 341130619, 292644024, 281192613, 251893811, 447792713, 520181371, 40921126, 778878825,
#line 1103
        536838039, 230752698, 396625895, 601216134, 188488092, 130103565, 504870771, 413838340, 335573256, 124340986, 368340993, 243753204, 150144590, 808689996, 32468801, 68817331,
#line 1104
        471378712, 566347573, 6430376, 651137151, 497752158, 823732827, 787280015, 789046852, 194658966, 171151811, 118113814, 793917550, 75187158, 717603845, 61671631, 51620383,
#line 1105
        302490719, 78328345, 244847301, 549511806, 420356371, 560795789, 405546061, 302036596, 432306081, 270856136, 330554928, 212724399, 791196206, 445342723, 187781362, 87078067,
#line 1106
        834667388, 218628624, 755629702, 148790011, 845609309, 89984158, 742118272, 475309628, 81731129, 107846408, 74447254, 68656823, 169459843, 643648059, 721924181, 212112779,
#line 1107
        575076242, 471039705, 626114838, 564548835, 506450263, 488329877, 847101683, 592828368, 714089721, 832868261, 393063639, 603199595, 214221357, 747808090, 145225511, 784491117,
#line 1108
        578386518, 253504617, 217256612, 432640963, 696210495, 700338942, 642132261, 394125773, 127189460, 622643989, 65557316, 850423288, 154198317, 360118020, 401298167, 809808378,
#line 1109
        590060278, 378333119, 261388063, 301240958, 211172470, 476577014, 818999735, 320797504, 155490801, 362021897, 416507223, 193972866, 814253796, 555879930, 152626252, 598011677,
#line 1110
        48971665, 590814257, 699100720, 732535868, 42427027, 335391594, 577502901, 72445917, 562054823, 34689534, 850274973, 640356274, 165636151, 309704599, 39996866, 436255023,
#line 1111
        365085534, 208984696, 593049885, 755419039, 376895434, 634901252, 316743954, 476563344, 619551824, 766199910, 783651060, 32670169, 794822305, 435248113, 14247580, 284417137,
#line 1112
        754554090, 30678221, 641072629, 711946716, 568640914, 656468482, 83597913, 356324101, 231391682, 122476642, 505437404, 636148283, 639556222, 262242870, 10083895, 470763095,
#line 1113
        7162643, 490677454, 122627583, 711718981, 252376484, 423795716, 578101600, 275970963, 3053131, 327430341, 435804223, 349044314, 649311691, 234207954, 379806804, 342513855,
#line 1114
        224624649, 181857560, 84797030, 123047825, 95186646, 293471117, 586961654, 111168138, 703259490, 756871363, 606284506, 380213718, 292725815, 463763080, 747629289, 254624782,
#line 1115
        207883602, 849297083, 578506664, 656289117, 454015629, 162235991, 474249177, 633829447, 490767799, 210190430, 48735841, 656982789, 743473215, 47313566, 306689440, 53334547,
#line 1116
        370344121, 419993940, 218969756, 341956367, 296184959, 135682817, 127205066, 744169001, 445909513, 801533404, 605661030, 181244618, 30772614, 196639386, 59911722, 616623643,
#line 1117
        199307436, 551535136, 136575017, 79424355, 92705102, 498046224, 17339996, 698541762, 804348245, 104258042, 484400476, 535014225, 87644978, 121726462, 383782353, 77562877,
#line 1118
        350468417, 724994239, 772938366, 320269449, 203075846, 465307490, 585234251, 271855066, 464423241, 403123130, 202162074, 117126999, 653413020, 8084225, 216658351, 409614891,
#line 1119
        799241223, 600931579, 454131285, 782741932, 376344215, 79696641, 803438191, 565030050, 460657460, 5110534, 472517130, 76991417, 572426425, 92047134, 285371277, 843473400,
#line 1120
        389338704, 704515255, 459914006, 657120075, 708563883, 78813141, 11770883, 688134435, 287808573, 649280542, 765338883, 439803770, 160535862, 617753423, 442051682, 288864924,
#line 1121
        32955626, 326880188, 696887038, 215124062, 791918307, 767157413, 358676037, 30612492, 661971023, 838968782, 465224708, 784600829, 146985424, 799718881, 207906900, 340800263,
#line 1122
        849693954, 44777992, 31326149, 240259940, 508401593, 499528021, 475930852, 690672059, 580019353, 297040464, 236338202, 454171188, 695134912, 508172471, 436504159, 293630619,
#line 1123
        848875161, 37043893, 26993038, 396046068, 722016462, 445419380, 209243403, 503786686, 268117854, 281672598, 205034970, 87894257, 293598267, 46912651, 147959859, 462629641,
#line 1124
        509044664, 700768221, 107374762, 340721447, 163551982, 247501118, 447395984, 318219025, 172114399, 110025830, 810265637, 370215004, 606303954, 462642711, 251114029, 290800715,
#line 1125
        780017258, 789443137, 495480307, 615909633, 431756150, 766376396, 820732666, 686803688, 133668454, 761665150, 326017339, 424112204, 110554261, 386347465, 101066781, 135666139,
#line 1126
        256882780, 205722545, 668032392, 405718561, 350327055, 621444438, 381307379, 421184831, 753121128, 590538618, 366906511, 345326178, 132085192, 40531091, 780676557, 586664955,
#line 1127
        597888984, 693668509, 487104387, 234747974, 572624063, 114516856, 550027276, 316481563, 239535126, 788436714, 847219527, 113421825, 200615887, 815912760, 581164384, 191193216,
#line 1128
        11551938, 606832431, 431210833, 196126697, 92508342, 270544041, 192437514, 99153842, 188585579, 413385580, 745267475, 448172363, 667109106, 85272138, 658601344, 443173146,
#line 1129
        392530856, 589073317, 382995167, 248915715, 375600977, 386782401, 254322056, 790853708, 580714915, 163129486, 824017519, 86419559, 117205367, 634667017, 566451589, 852749522,
#line 1130
        837490424, 330422330, 294598189, 814909626, 505390042, 125578715, 357313675, 450539487, 233746299, 446282749, 755039478, 740350430, 598956163, 116099139, 167482754, 310512355,
#line 1131
        135624781, 470874939, 196356683, 239902897, 693520220, 454942578, 778240578, 45236161, 51101673, 270126615, 94622194, 524282161, 632376971, 703121383, 587013336, 572429454,
#line 1132
        37728898, 143682359, 206045437, 557167425, 770459696, 477771773, 321346425, 290390778, 100874902, 758540246, 746805823, 459566327, 607673901, 158286491, 527010720, 579461268,
#line 1133
        74963118, 420964844, 51316958, 250512679, 452729483, 35670488, 559935164, 734294507, 379228497, 172592106, 126508187, 757555710, 853874620, 808517874, 106015915, 375691866,
#line 1134
        423413164, 423111661, 60250078, 645353691, 853830811, 288310932, 1489804, 127886925, 191505834, 459549138, 542519706, 369115379, 116842790, 784888677, 269818678, 712117130,
#line 1135
        748410048, 139982101, 169805525, 32264681, 532400632, 397389041, 181262233, 703428567, 604760852, 44143128, 69914527, 86615396, 314810965, 68145528, 650868687, 717671367,
#line 1136
        594246701, 641155397, 207406129, 180083553, 414651973, 132523243, 211350471, 397371331, 170688638, 732763563, 132155217, 394688247, 571356350, 93856418, 708831649, 841908230 } count:2048];
        J2OBJC_SET_INITIALIZED(OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial)
      }
    }

@end


#line 873
void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_init(OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial *self) {
  NSObject_init(self);
}


#line 873
OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial *new_OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial, init)
}


#line 873
OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial *create_OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial, init)
}


#line 1140
void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_uniformWithLongArray_withByteArray_withInt_(IOSLongArray *a, IOSByteArray *seed, jint seedOffset) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  jint pos = 0;
  
#line 1142
  jint i = 0;
  jint nbytes = JreIntDiv((OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q_LOG + 7), 8);
  jint nblocks = OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_GEN_A;
  jint val1;
  
#line 1145
  jint val2;
  
#line 1145
  jint val3;
  
#line 1145
  jint val4;
  jint mask = (JreLShift32(1, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q_LOG)) - 1;
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_GEN_A];
  jshort dmsp = 0;
  
#line 1151
  OrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(
#line 1152
  buf, 0, OrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_GEN_A,
#line 1153
  dmsp++,
#line 1154
  seed, seedOffset, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_RANDOMBYTES);
  
#line 1158
  while (i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N) {
    
#line 1160
    if (pos > OrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE * nblocks - 4 * nbytes) {
      
#line 1162
      nblocks = 1;
      
#line 1165
      OrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(
#line 1166
      buf, 0, OrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_GEN_A,
#line 1167
      dmsp++,
#line 1168
      seed, seedOffset, OrgBouncycastlePqcCryptoQteslaQTesla3p_CRYPTO_RANDOMBYTES);
      
#line 1171
      pos = 0;
    }
    val1 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(buf, pos) & mask;
    pos += nbytes;
    val2 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(buf, pos) & mask;
    pos += nbytes;
    val3 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(buf, pos) & mask;
    pos += nbytes;
    val4 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(buf, pos) & mask;
    pos += nbytes;
    if (val1 < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q && i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N) {
      
#line 1183
      *IOSLongArray_GetRef(nil_chk(a), i++) = OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_reduceWithLong_((jlong) val1 * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_R2_INVN);
    }
    if (val2 < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q && i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N) {
      
#line 1187
      *IOSLongArray_GetRef(nil_chk(a), i++) = OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_reduceWithLong_((jlong) val2 * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_R2_INVN);
    }
    if (val3 < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q && i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N) {
      
#line 1191
      *IOSLongArray_GetRef(nil_chk(a), i++) = OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_reduceWithLong_((jlong) val3 * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_R2_INVN);
    }
    if (val4 < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q && i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N) {
      
#line 1195
      *IOSLongArray_GetRef(nil_chk(a), i++) = OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_reduceWithLong_((jlong) val4 * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_R2_INVN);
    }
  }
}


#line 1201
jlong OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_reduceWithLong_(jlong a) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  jlong u;
  
#line 1205
  u = (a * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_QINV) & (jlong) 0xFFFFFFFFLL;
  u *= OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q;
  a += u;
  return JreRShift64(a, 32);
}

void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_nttWithLongArray_withLongArray_(IOSLongArray *a, IOSLongArray *w) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  jint NumoProblems = JreRShift32(OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N, 1);
  
#line 1214
  jint jTwiddle = 0;
  
#line 1216
  for (; NumoProblems > 0; JreRShiftAssignInt(&NumoProblems, 1)) {
    
#line 1218
    jint jFirst;
    
#line 1218
    jint j = 0;
    for (jFirst = 0; jFirst < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; jFirst = j + NumoProblems) {
      
#line 1221
      jint W = (jint) IOSLongArray_Get(nil_chk(w), jTwiddle++);
      for (j = jFirst; j < jFirst + NumoProblems; j++) {
        
#line 1224
        jlong temp = OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_barr_reduceWithLong_(OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_reduceWithLong_(W * IOSLongArray_Get(nil_chk(a), j + NumoProblems)));
        *IOSLongArray_GetRef(a, j + NumoProblems) = OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_barr_reduceWithLong_(IOSLongArray_Get(a, j) + 2LL * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q - temp);
        *IOSLongArray_GetRef(a, j) = OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_barr_reduceWithLong_(temp + IOSLongArray_Get(a, j));
      }
    }
  }
}


#line 1233
jlong OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_barr_reduceWithLong_(jlong a) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  jlong u = JreRShift64(a * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_BARR_MULT, OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_BARR_DIV);
  return a - u * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q;
}


#line 1240
void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_nttinvWithLongArray_withLongArray_(IOSLongArray *a, IOSLongArray *w) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  jint NumoProblems = 1;
  
#line 1242
  jint jTwiddle = 0;
  for (NumoProblems = 1; NumoProblems < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; NumoProblems *= 2) {
    
#line 1245
    jint jFirst;
    
#line 1245
    jint j = 0;
    for (jFirst = 0; jFirst < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; jFirst = j + NumoProblems) {
      
#line 1248
      jint W = (jint) IOSLongArray_Get(nil_chk(w), jTwiddle++);
      for (j = jFirst; j < jFirst + NumoProblems; j++) {
        
#line 1251
        jlong temp = IOSLongArray_Get(nil_chk(a), j);
        
#line 1253
        *IOSLongArray_GetRef(a, j) = OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_barr_reduceWithLong_(temp + IOSLongArray_Get(a, j + NumoProblems));
        *IOSLongArray_GetRef(a, j + NumoProblems) = OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_barr_reduceWithLong_(OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_reduceWithLong_(W * (temp + 2LL * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q - IOSLongArray_Get(a, j + NumoProblems))));
      }
    }
  }
}


#line 1260
void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_nttinvWithLongArray_withInt_withLongArray_(IOSLongArray *a, jint aPos, IOSLongArray *w) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  jint NumoProblems = 1;
  
#line 1262
  jint jTwiddle = 0;
  for (NumoProblems = 1; NumoProblems < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; NumoProblems *= 2) {
    
#line 1265
    jint jFirst;
    
#line 1265
    jint j = 0;
    for (jFirst = 0; jFirst < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; jFirst = j + NumoProblems) {
      
#line 1268
      jint W = (jint) IOSLongArray_Get(nil_chk(w), jTwiddle++);
      for (j = jFirst; j < jFirst + NumoProblems; j++) {
        
#line 1271
        jlong temp = IOSLongArray_Get(nil_chk(a), aPos + j);
        *IOSLongArray_GetRef(a, aPos + j) = OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_barr_reduceWithLong_(temp + IOSLongArray_Get(a, aPos + j + NumoProblems));
        *IOSLongArray_GetRef(a, aPos + j + NumoProblems) = OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_barr_reduceWithLong_(OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_reduceWithLong_(W * (temp + 2LL * OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q - IOSLongArray_Get(a, aPos + j + NumoProblems))));
      }
    }
  }
}


#line 1281
void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_nttWithLongArray_withLongArray_(IOSLongArray *x_ntt, IOSLongArray *x) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  
#line 1284
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i++) {
    
#line 1286
    *IOSLongArray_GetRef(nil_chk(x_ntt), i) = IOSLongArray_Get(nil_chk(x), i);
  }
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_nttWithLongArray_withLongArray_(x_ntt, OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_zeta);
}


#line 1292
void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_pointwiseWithLongArray_withLongArray_withLongArray_(IOSLongArray *result, IOSLongArray *x, IOSLongArray *y) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  
#line 1295
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i++) {
    
#line 1297
    *IOSLongArray_GetRef(nil_chk(result), i) = OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_reduceWithLong_(IOSLongArray_Get(nil_chk(x), i) * IOSLongArray_Get(nil_chk(y), i));
  }
}


#line 1301
void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_pointwiseWithLongArray_withInt_withLongArray_withInt_withLongArray_(IOSLongArray *result, jint rpos, IOSLongArray *x, jint xpos, IOSLongArray *y) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  
#line 1304
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i++) {
    
#line 1306
    *IOSLongArray_GetRef(nil_chk(result), i + rpos) = OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_reduceWithLong_(IOSLongArray_Get(nil_chk(x), i + xpos) * IOSLongArray_Get(nil_chk(y), i));
  }
}


#line 1311
void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_mulWithLongArray_withLongArray_withLongArray_(IOSLongArray *result, IOSLongArray *x, IOSLongArray *y) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  
#line 1322
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_pointwiseWithLongArray_withLongArray_withLongArray_(result, x, y);
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_nttinvWithLongArray_withLongArray_(result, OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_zetainv);
}


#line 1327
void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_mulWithLongArray_withInt_withLongArray_withInt_withLongArray_(IOSLongArray *result, jint rpos, IOSLongArray *x, jint xpos, IOSLongArray *y) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  
#line 1330
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_pointwiseWithLongArray_withInt_withLongArray_withInt_withLongArray_(result, rpos, x, xpos, y);
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_nttinvWithLongArray_withInt_withLongArray_(result, rpos, OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_zetainv);
}

void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_addWithLongArray_withLongArray_withLongArray_(IOSLongArray *result, IOSLongArray *x, IOSLongArray *y) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  
#line 1338
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i++) {
    
#line 1340
    *IOSLongArray_GetRef(nil_chk(result), i) = IOSLongArray_Get(nil_chk(x), i) + IOSLongArray_Get(nil_chk(y), i);
  }
}


#line 1344
void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_subWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_(IOSLongArray *result, jint rpos, IOSLongArray *x, jint xpos, IOSLongArray *y, jint ypos) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  
#line 1347
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i++) {
    
#line 1349
    *IOSLongArray_GetRef(nil_chk(result), rpos + i) = OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_barr_reduceWithLong_(IOSLongArray_Get(nil_chk(x), xpos + i) - IOSLongArray_Get(nil_chk(y), ypos + i));
  }
}


#line 1354
void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_add_correctWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_(IOSLongArray *result, jint rpos, IOSLongArray *x, jint xpos, IOSLongArray *y, jint ypos) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  
#line 1357
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i++) {
    
#line 1359
    *IOSLongArray_GetRef(nil_chk(result), rpos + i) = IOSLongArray_Get(nil_chk(x), xpos + i) + IOSLongArray_Get(nil_chk(y), ypos + i);
    *IOSLongArray_GetRef(result, rpos + i) -= OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q;
    *IOSLongArray_GetRef(result, rpos + i) += (JreRShift64(IOSLongArray_Get(result, rpos + i), OrgBouncycastlePqcCryptoQteslaQTesla3p_RADIX32 - 1)) & OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q;
  }
}


#line 1366
void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_poly_sub_correctWithIntArray_withIntArray_withIntArray_(IOSIntArray *result, IOSIntArray *x, IOSIntArray *y) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  
#line 1369
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i++) {
    
#line 1371
    *IOSIntArray_GetRef(nil_chk(result), i) = IOSIntArray_Get(nil_chk(x), i) - IOSIntArray_Get(nil_chk(y), i);
    *IOSIntArray_GetRef(result, i) += (JreRShift32(IOSIntArray_Get(result, i), OrgBouncycastlePqcCryptoQteslaQTesla3p_RADIX32 - 1)) & OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_Q;
  }
}


#line 1377
void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_sparse_mul8WithLongArray_withInt_withByteArray_withInt_withIntArray_withShortArray_(IOSLongArray *prod, jint ppos, IOSByteArray *s, jint spos, IOSIntArray *pos_list, IOSShortArray *sign_list) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  jint i;
  
#line 1379
  jint j;
  
#line 1379
  jint pos;
  
#line 1381
  for (i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i++) {
    
#line 1383
    *IOSLongArray_GetRef(nil_chk(prod), ppos + i) = 0;
  }
  
#line 1386
  for (i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_H; i++) {
    
#line 1388
    pos = IOSIntArray_Get(nil_chk(pos_list), i);
    for (j = 0; j < pos; j++) {
      
#line 1391
      *IOSLongArray_GetRef(nil_chk(prod), ppos + j) = IOSLongArray_Get(prod, ppos + j) - IOSShortArray_Get(nil_chk(sign_list), i) * IOSByteArray_Get(nil_chk(s), spos + j + OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N - pos);
    }
    for (j = pos; j < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; j++) {
      
#line 1395
      *IOSLongArray_GetRef(nil_chk(prod), ppos + j) = IOSLongArray_Get(prod, ppos + j) + IOSShortArray_Get(nil_chk(sign_list), i) * IOSByteArray_Get(nil_chk(s), spos + j - pos);
    }
  }
}


#line 1401
void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_sparse_mul8WithLongArray_withByteArray_withIntArray_withShortArray_(IOSLongArray *prod, IOSByteArray *s, IOSIntArray *pos_list, IOSShortArray *sign_list) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  jint i;
  
#line 1403
  jint j;
  
#line 1403
  jint pos;
  IOSByteArray *t = s;
  
#line 1406
  for (i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i++) {
    
#line 1408
    *IOSLongArray_GetRef(nil_chk(prod), i) = 0;
  }
  
#line 1411
  for (i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_H; i++) {
    
#line 1413
    pos = IOSIntArray_Get(nil_chk(pos_list), i);
    for (j = 0; j < pos; j++) {
      
#line 1416
      *IOSLongArray_GetRef(nil_chk(prod), j) = IOSLongArray_Get(prod, j) - IOSShortArray_Get(nil_chk(sign_list), i) * IOSByteArray_Get(nil_chk(t), j + OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N - pos);
    }
    for (j = pos; j < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; j++) {
      
#line 1420
      *IOSLongArray_GetRef(nil_chk(prod), j) = IOSLongArray_Get(prod, j) + IOSShortArray_Get(nil_chk(sign_list), i) * IOSByteArray_Get(nil_chk(t), j - pos);
    }
  }
}


#line 1426
void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_sparse_mul16WithIntArray_withIntArray_withIntArray_withShortArray_(IOSIntArray *prod, IOSIntArray *s, IOSIntArray *pos_list, IOSShortArray *sign_list) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  jint i;
  
#line 1428
  jint j;
  
#line 1428
  jint pos;
  
#line 1431
  for (i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i++) {
    
#line 1433
    *IOSIntArray_GetRef(nil_chk(prod), i) = 0;
  }
  
#line 1436
  for (i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_H; i++) {
    
#line 1438
    pos = IOSIntArray_Get(nil_chk(pos_list), i);
    for (j = 0; j < pos; j++) {
      
#line 1441
      *IOSIntArray_GetRef(nil_chk(prod), j) = IOSIntArray_Get(prod, j) - IOSShortArray_Get(nil_chk(sign_list), i) * IOSIntArray_Get(nil_chk(s), j + OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N - pos);
    }
    for (j = pos; j < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; j++) {
      
#line 1445
      *IOSIntArray_GetRef(nil_chk(prod), j) = IOSIntArray_Get(prod, j) + IOSShortArray_Get(nil_chk(sign_list), i) * IOSIntArray_Get(nil_chk(s), j - pos);
    }
  }
}


#line 1451
void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_sparse_mul32WithIntArray_withIntArray_withIntArray_withShortArray_(IOSIntArray *prod, IOSIntArray *pk, IOSIntArray *pos_list, IOSShortArray *sign_list) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  jint i;
  
#line 1453
  jint j;
  
#line 1453
  jint pos;
  
#line 1455
  for (i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i++) {
    
#line 1457
    *IOSIntArray_GetRef(nil_chk(prod), i) = 0;
  }
  
#line 1460
  for (i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_H; i++) {
    
#line 1462
    pos = IOSIntArray_Get(nil_chk(pos_list), i);
    for (j = 0; j < pos; j++) {
      
#line 1465
      *IOSIntArray_GetRef(nil_chk(prod), j) = IOSIntArray_Get(prod, j) - IOSShortArray_Get(nil_chk(sign_list), i) * IOSIntArray_Get(nil_chk(pk), j + OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N - pos);
    }
    for (j = pos; j < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; j++) {
      
#line 1469
      *IOSIntArray_GetRef(nil_chk(prod), j) = IOSIntArray_Get(prod, j) + IOSShortArray_Get(nil_chk(sign_list), i) * IOSIntArray_Get(nil_chk(pk), j - pos);
    }
  }
}


#line 1474
void OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_sparse_mul32WithLongArray_withInt_withIntArray_withInt_withIntArray_withShortArray_(IOSLongArray *prod, jint ppos, IOSIntArray *pk, jint pkPos, IOSIntArray *pos_list, IOSShortArray *sign_list) {
  OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial_initialize();
  jint i;
  
#line 1476
  jint j;
  
#line 1476
  jint pos;
  
#line 1478
  for (i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; i++) {
    
#line 1480
    *IOSLongArray_GetRef(nil_chk(prod), ppos + i) = 0;
  }
  
#line 1483
  for (i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_H; i++) {
    
#line 1485
    pos = IOSIntArray_Get(nil_chk(pos_list), i);
    for (j = 0; j < pos; j++) {
      
#line 1488
      *IOSLongArray_GetRef(nil_chk(prod), ppos + j) = IOSLongArray_Get(prod, ppos + j) - IOSShortArray_Get(nil_chk(sign_list), i) * IOSIntArray_Get(nil_chk(pk), pkPos + j + OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N - pos);
    }
    for (j = pos; j < OrgBouncycastlePqcCryptoQteslaQTesla3p_PARAM_N; j++) {
      
#line 1492
      *IOSLongArray_GetRef(nil_chk(prod), ppos + j) = IOSLongArray_Get(prod, ppos + j) + IOSShortArray_Get(nil_chk(sign_list), i) * IOSIntArray_Get(nil_chk(pk), pkPos + j - pos);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoQteslaQTesla3p_QTesla3PPolynomial)
