//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/qtesla/QTesla1p.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTesla1p")
#ifdef RESTRICT_OrgBouncycastlePqcCryptoQteslaQTesla1p
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTesla1p 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTesla1p 1
#endif
#undef RESTRICT_OrgBouncycastlePqcCryptoQteslaQTesla1p

#if !defined (OrgBouncycastlePqcCryptoQteslaQTesla1p_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTesla1p || defined(INCLUDE_OrgBouncycastlePqcCryptoQteslaQTesla1p))
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_

@class IOSByteArray;
@class IOSIntArray;
@class IOSShortArray;
@class JavaSecuritySecureRandom;

@interface OrgBouncycastlePqcCryptoQteslaQTesla1p : NSObject

#pragma mark Package-Private

- (instancetype)initPackagePrivate;

+ (void)decodePublicKeyWithIntArray:(IOSIntArray *)publicKey
                      withByteArray:(IOSByteArray *)seedA
                            withInt:(jint)seedAOffset
                      withByteArray:(IOSByteArray *)publicKeyInput;

+ (void)decodeSignatureWithByteArray:(IOSByteArray *)C
                        withIntArray:(IOSIntArray *)Z
                       withByteArray:(IOSByteArray *)signature
                             withInt:(jint)signatureOffset;

+ (void)encodeCWithIntArray:(IOSIntArray *)positionList
             withShortArray:(IOSShortArray *)signList
              withByteArray:(IOSByteArray *)output
                    withInt:(jint)outputOffset;

+ (void)encodePrivateKeyWithByteArray:(IOSByteArray *)privateKey
                         withIntArray:(IOSIntArray *)secretPolynomial
                         withIntArray:(IOSIntArray *)errorPolynomial
                        withByteArray:(IOSByteArray *)seed
                              withInt:(jint)seedOffset
                        withByteArray:(IOSByteArray *)publicKey;

+ (void)encodePublicKeyWithByteArray:(IOSByteArray *)publicKey
                        withIntArray:(IOSIntArray *)T
                       withByteArray:(IOSByteArray *)seedA
                             withInt:(jint)seedAOffset;

+ (void)encodeSignatureWithByteArray:(IOSByteArray *)signature
                             withInt:(jint)signatureOffset
                       withByteArray:(IOSByteArray *)C
                             withInt:(jint)cOffset
                        withIntArray:(IOSIntArray *)Z;

+ (jint)generateKeyPairWithByteArray:(IOSByteArray *)publicKey
                       withByteArray:(IOSByteArray *)privateKey
        withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

+ (jint)generateSignatureWithByteArray:(IOSByteArray *)signature
                         withByteArray:(IOSByteArray *)message
                               withInt:(jint)messageOffset
                               withInt:(jint)messageLength
                         withByteArray:(IOSByteArray *)privateKey
          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

+ (jint)littleEndianToInt24WithByteArray:(IOSByteArray *)bs
                                 withInt:(jint)off;

+ (jboolean)memoryEqualWithByteArray:(IOSByteArray *)left
                             withInt:(jint)leftOffset
                       withByteArray:(IOSByteArray *)right
                             withInt:(jint)rightOffset
                             withInt:(jint)length;

+ (void)sample_yWithIntArray:(IOSIntArray *)y
               withByteArray:(IOSByteArray *)seed
                     withInt:(jint)seedOffset
                     withInt:(jint)nonce;

+ (jboolean)test_correctnessWithIntArray:(IOSIntArray *)v
                                 withInt:(jint)vpos;

+ (jint)verifyingWithByteArray:(IOSByteArray *)message
                 withByteArray:(IOSByteArray *)signature
                       withInt:(jint)signatureOffset
                       withInt:(jint)signatureLength
                 withByteArray:(IOSByteArray *)publicKey;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoQteslaQTesla1p)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_CRYPTO_BYTES(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_BYTES 2592
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, CRYPTO_BYTES, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_CRYPTO_SECRETKEYBYTES(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SECRETKEYBYTES 5224
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, CRYPTO_SECRETKEYBYTES, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_CRYPTO_PUBLICKEYBYTES(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_PUBLICKEYBYTES 14880
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, CRYPTO_PUBLICKEYBYTES, jint)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_initPackagePrivate(OrgBouncycastlePqcCryptoQteslaQTesla1p *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoQteslaQTesla1p *new_OrgBouncycastlePqcCryptoQteslaQTesla1p_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoQteslaQTesla1p *create_OrgBouncycastlePqcCryptoQteslaQTesla1p_initPackagePrivate(void);

FOUNDATION_EXPORT jint OrgBouncycastlePqcCryptoQteslaQTesla1p_generateKeyPairWithByteArray_withByteArray_withJavaSecuritySecureRandom_(IOSByteArray *publicKey, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT jint OrgBouncycastlePqcCryptoQteslaQTesla1p_generateSignatureWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(IOSByteArray *signature, IOSByteArray *message, jint messageOffset, jint messageLength, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT jint OrgBouncycastlePqcCryptoQteslaQTesla1p_verifyingWithByteArray_withByteArray_withInt_withInt_withByteArray_(IOSByteArray *message, IOSByteArray *signature, jint signatureOffset, jint signatureLength, IOSByteArray *publicKey);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_encodePrivateKeyWithByteArray_withIntArray_withIntArray_withByteArray_withInt_withByteArray_(IOSByteArray *privateKey, IOSIntArray *secretPolynomial, IOSIntArray *errorPolynomial, IOSByteArray *seed, jint seedOffset, IOSByteArray *publicKey);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_encodePublicKeyWithByteArray_withIntArray_withByteArray_withInt_(IOSByteArray *publicKey, IOSIntArray *T, IOSByteArray *seedA, jint seedAOffset);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_decodePublicKeyWithIntArray_withByteArray_withInt_withByteArray_(IOSIntArray *publicKey, IOSByteArray *seedA, jint seedAOffset, IOSByteArray *publicKeyInput);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_encodeSignatureWithByteArray_withInt_withByteArray_withInt_withIntArray_(IOSByteArray *signature, jint signatureOffset, IOSByteArray *C, jint cOffset, IOSIntArray *Z);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_decodeSignatureWithByteArray_withIntArray_withByteArray_withInt_(IOSByteArray *C, IOSIntArray *Z, IOSByteArray *signature, jint signatureOffset);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_encodeCWithIntArray_withShortArray_withByteArray_withInt_(IOSIntArray *positionList, IOSShortArray *signList, IOSByteArray *output, jint outputOffset);

FOUNDATION_EXPORT jint OrgBouncycastlePqcCryptoQteslaQTesla1p_littleEndianToInt24WithByteArray_withInt_(IOSByteArray *bs, jint off);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_sample_yWithIntArray_withByteArray_withInt_withInt_(IOSIntArray *y, IOSByteArray *seed, jint seedOffset, jint nonce);

FOUNDATION_EXPORT jboolean OrgBouncycastlePqcCryptoQteslaQTesla1p_test_correctnessWithIntArray_withInt_(IOSIntArray *v, jint vpos);

FOUNDATION_EXPORT jboolean OrgBouncycastlePqcCryptoQteslaQTesla1p_memoryEqualWithByteArray_withInt_withByteArray_withInt_withInt_(IOSByteArray *left, jint leftOffset, IOSByteArray *right, jint rightOffset, jint length);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoQteslaQTesla1p)

#endif

#if !defined (OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTesla1p || defined(INCLUDE_OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian))
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_

@class IOSByteArray;
@class IOSIntArray;

@interface OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian : NSObject

#pragma mark Package-Private

- (instancetype)init;

+ (void)sample_gauss_polyWithInt:(jint)nonce
                   withByteArray:(IOSByteArray *)seed
                         withInt:(jint)seedOffset
                    withIntArray:(IOSIntArray *)poly
                         withInt:(jint)polyOffset;

@end

J2OBJC_STATIC_INIT(OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_init(OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian *new_OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian *create_OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_init(void);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_sample_gauss_polyWithInt_withByteArray_withInt_withIntArray_withInt_(jint nonce, IOSByteArray *seed, jint seedOffset, IOSIntArray *poly, jint polyOffset);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian)

#endif

#if !defined (OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTesla1p || defined(INCLUDE_OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial))
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_

@class IOSByteArray;
@class IOSIntArray;
@class IOSShortArray;

@interface OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial : NSObject

#pragma mark Package-Private

- (instancetype)init;

+ (void)nttWithIntArray:(IOSIntArray *)a
           withIntArray:(IOSIntArray *)w;

+ (void)nttinvWithIntArray:(IOSIntArray *)a
                   withInt:(jint)aPos
              withIntArray:(IOSIntArray *)w;

+ (void)poly_addWithIntArray:(IOSIntArray *)result
                withIntArray:(IOSIntArray *)x
                withIntArray:(IOSIntArray *)y;

+ (void)poly_add_correctWithIntArray:(IOSIntArray *)result
                             withInt:(jint)rpos
                        withIntArray:(IOSIntArray *)x
                             withInt:(jint)xpos
                        withIntArray:(IOSIntArray *)y
                             withInt:(jint)ypos;

+ (void)poly_mulWithIntArray:(IOSIntArray *)result
                     withInt:(jint)rpos
                withIntArray:(IOSIntArray *)x
                     withInt:(jint)xpos
                withIntArray:(IOSIntArray *)y;

+ (void)poly_nttWithIntArray:(IOSIntArray *)x_ntt
                withIntArray:(IOSIntArray *)x;

+ (void)poly_pointwiseWithIntArray:(IOSIntArray *)result
                           withInt:(jint)rpos
                      withIntArray:(IOSIntArray *)x
                           withInt:(jint)xpos
                      withIntArray:(IOSIntArray *)y;

+ (void)poly_subWithIntArray:(IOSIntArray *)result
                     withInt:(jint)rpos
                withIntArray:(IOSIntArray *)x
                     withInt:(jint)xpos
                withIntArray:(IOSIntArray *)y
                     withInt:(jint)ypos;

+ (void)poly_sub_reduceWithIntArray:(IOSIntArray *)result
                            withInt:(jint)rpos
                       withIntArray:(IOSIntArray *)x
                            withInt:(jint)xpos
                       withIntArray:(IOSIntArray *)y
                            withInt:(jint)ypos;

+ (void)poly_uniformWithIntArray:(IOSIntArray *)a
                   withByteArray:(IOSByteArray *)seed
                         withInt:(jint)seedOffset;

+ (jint)reduceWithLong:(jlong)a;

+ (void)sparse_mul32WithIntArray:(IOSIntArray *)prod
                         withInt:(jint)ppos
                    withIntArray:(IOSIntArray *)pk
                         withInt:(jint)pkPos
                    withIntArray:(IOSIntArray *)pos_list
                  withShortArray:(IOSShortArray *)sign_list;

+ (void)sparse_mul8WithIntArray:(IOSIntArray *)prod
                        withInt:(jint)ppos
                  withByteArray:(IOSByteArray *)s
                        withInt:(jint)spos
                   withIntArray:(IOSIntArray *)pos_list
                 withShortArray:(IOSShortArray *)sign_list;

@end

J2OBJC_STATIC_INIT(OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_init(OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial *new_OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial *create_OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_init(void);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_uniformWithIntArray_withByteArray_withInt_(IOSIntArray *a, IOSByteArray *seed, jint seedOffset);

FOUNDATION_EXPORT jint OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_reduceWithLong_(jlong a);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_nttWithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *w);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_nttinvWithIntArray_withInt_withIntArray_(IOSIntArray *a, jint aPos, IOSIntArray *w);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_nttWithIntArray_withIntArray_(IOSIntArray *x_ntt, IOSIntArray *x);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_pointwiseWithIntArray_withInt_withIntArray_withInt_withIntArray_(IOSIntArray *result, jint rpos, IOSIntArray *x, jint xpos, IOSIntArray *y);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_mulWithIntArray_withInt_withIntArray_withInt_withIntArray_(IOSIntArray *result, jint rpos, IOSIntArray *x, jint xpos, IOSIntArray *y);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_addWithIntArray_withIntArray_withIntArray_(IOSIntArray *result, IOSIntArray *x, IOSIntArray *y);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_add_correctWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(IOSIntArray *result, jint rpos, IOSIntArray *x, jint xpos, IOSIntArray *y, jint ypos);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_subWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(IOSIntArray *result, jint rpos, IOSIntArray *x, jint xpos, IOSIntArray *y, jint ypos);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_sub_reduceWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(IOSIntArray *result, jint rpos, IOSIntArray *x, jint xpos, IOSIntArray *y, jint ypos);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_sparse_mul8WithIntArray_withInt_withByteArray_withInt_withIntArray_withShortArray_(IOSIntArray *prod, jint ppos, IOSByteArray *s, jint spos, IOSIntArray *pos_list, IOSShortArray *sign_list);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_sparse_mul32WithIntArray_withInt_withIntArray_withInt_withIntArray_withShortArray_(IOSIntArray *prod, jint ppos, IOSIntArray *pk, jint pkPos, IOSIntArray *pos_list, IOSShortArray *sign_list);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTesla1p")
