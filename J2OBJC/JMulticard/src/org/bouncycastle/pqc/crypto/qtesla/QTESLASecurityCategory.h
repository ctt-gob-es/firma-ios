//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/qtesla/QTESLASecurityCategory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory")
#ifdef RESTRICT_OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory 1
#endif
#undef RESTRICT_OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory

#if !defined (OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory || defined(INCLUDE_OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory))
#define OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_

/*!
 @brief The qTESLA security categories.
 */
@interface OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory : NSObject

#pragma mark Public

/*!
 @brief Return a standard name for the security category.
 @param securityCategory the category of interest.
 @return the name for the category.
 */
+ (NSString *)getNameWithInt:(jint)securityCategory;

#pragma mark Package-Private

+ (jint)getPrivateSizeWithInt:(jint)securityCategory;

+ (jint)getPublicSizeWithInt:(jint)securityCategory;

+ (jint)getSignatureSizeWithInt:(jint)securityCategory;

+ (void)validateWithInt:(jint)securityCategory;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory)

inline jint OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_get_PROVABLY_SECURE_I(void);
#define OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_PROVABLY_SECURE_I 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory, PROVABLY_SECURE_I, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_get_PROVABLY_SECURE_III(void);
#define OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_PROVABLY_SECURE_III 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory, PROVABLY_SECURE_III, jint)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_validateWithInt_(jint securityCategory);

FOUNDATION_EXPORT jint OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_getPrivateSizeWithInt_(jint securityCategory);

FOUNDATION_EXPORT jint OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_getPublicSizeWithInt_(jint securityCategory);

FOUNDATION_EXPORT jint OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_getSignatureSizeWithInt_(jint securityCategory);

FOUNDATION_EXPORT NSString *OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory_getNameWithInt_(jint securityCategory);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaQTESLASecurityCategory")
