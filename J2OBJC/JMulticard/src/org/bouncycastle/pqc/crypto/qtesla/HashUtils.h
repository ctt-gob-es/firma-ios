//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/qtesla/HashUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaHashUtils")
#ifdef RESTRICT_OrgBouncycastlePqcCryptoQteslaHashUtils
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaHashUtils 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaHashUtils 1
#endif
#undef RESTRICT_OrgBouncycastlePqcCryptoQteslaHashUtils

#if !defined (OrgBouncycastlePqcCryptoQteslaHashUtils_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaHashUtils || defined(INCLUDE_OrgBouncycastlePqcCryptoQteslaHashUtils))
#define OrgBouncycastlePqcCryptoQteslaHashUtils_

@class IOSByteArray;

@interface OrgBouncycastlePqcCryptoQteslaHashUtils : NSObject

#pragma mark Package-Private

- (instancetype)initPackagePrivate;

+ (void)customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray:(IOSByteArray *)output
                                                            withInt:(jint)outputOffset
                                                            withInt:(jint)outputLength
                                                          withShort:(jshort)continuousTimeStochasticModelling
                                                      withByteArray:(IOSByteArray *)input
                                                            withInt:(jint)inputOffset
                                                            withInt:(jint)inputLength;

+ (void)customizableSecureHashAlgorithmKECCAK256SimpleWithByteArray:(IOSByteArray *)output
                                                            withInt:(jint)outputOffset
                                                            withInt:(jint)outputLength
                                                          withShort:(jshort)continuousTimeStochasticModelling
                                                      withByteArray:(IOSByteArray *)input
                                                            withInt:(jint)inputOffset
                                                            withInt:(jint)inputLength;

/*!
 @brief Description:    The Secure-Hash-Algorithm-3 Extendable-Output Function That Generally Supports 128 Bits of Security Strength, If the Output is Sufficiently Long
 */
+ (void)secureHashAlgorithmKECCAK128WithByteArray:(IOSByteArray *)output
                                          withInt:(jint)outputOffset
                                          withInt:(jint)outputLength
                                    withByteArray:(IOSByteArray *)input
                                          withInt:(jint)inputOffset
                                          withInt:(jint)inputLength;

/*!
 @brief Description:    The Secure-Hash-Algorithm-3 Extendable-Output Function That Generally Supports 256 Bits of Security Strength, If the Output is Sufficiently Long
 */
+ (void)secureHashAlgorithmKECCAK256WithByteArray:(IOSByteArray *)output
                                          withInt:(jint)outputOffset
                                          withInt:(jint)outputLength
                                    withByteArray:(IOSByteArray *)input
                                          withInt:(jint)inputOffset
                                          withInt:(jint)inputLength;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoQteslaHashUtils)

inline jint OrgBouncycastlePqcCryptoQteslaHashUtils_get_SECURE_HASH_ALGORITHM_KECCAK_128_RATE(void);
#define OrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE 168
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaHashUtils, SECURE_HASH_ALGORITHM_KECCAK_128_RATE, jint)

inline jint OrgBouncycastlePqcCryptoQteslaHashUtils_get_SECURE_HASH_ALGORITHM_KECCAK_256_RATE(void);
#define OrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_256_RATE 136
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaHashUtils, SECURE_HASH_ALGORITHM_KECCAK_256_RATE, jint)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaHashUtils_initPackagePrivate(OrgBouncycastlePqcCryptoQteslaHashUtils *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoQteslaHashUtils *new_OrgBouncycastlePqcCryptoQteslaHashUtils_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoQteslaHashUtils *create_OrgBouncycastlePqcCryptoQteslaHashUtils_initPackagePrivate(void);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(IOSByteArray *output, jint outputOffset, jint outputLength, IOSByteArray *input, jint inputOffset, jint inputLength);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK256WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(IOSByteArray *output, jint outputOffset, jint outputLength, IOSByteArray *input, jint inputOffset, jint inputLength);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(IOSByteArray *output, jint outputOffset, jint outputLength, jshort continuousTimeStochasticModelling, IOSByteArray *input, jint inputOffset, jint inputLength);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK256SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(IOSByteArray *output, jint outputOffset, jint outputLength, jshort continuousTimeStochasticModelling, IOSByteArray *input, jint inputOffset, jint inputLength);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoQteslaHashUtils)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoQteslaHashUtils")
