//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/qtesla/QTesla1p.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/pqc/crypto/qtesla/HashUtils.h"
#include "org/bouncycastle/pqc/crypto/qtesla/QTesla1p.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/Pack.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/qtesla/QTesla1p must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoQteslaQTesla1p ()

+ (jboolean)testZWithIntArray:(IOSIntArray *)Z;

+ (void)hashFunctionWithByteArray:(IOSByteArray *)output
                          withInt:(jint)outputOffset
                     withIntArray:(IOSIntArray *)v
                    withByteArray:(IOSByteArray *)message
                          withInt:(jint)messageOffset;

+ (void)atWithByteArray:(IOSByteArray *)bs
                withInt:(jint)base
                withInt:(jint)index
                withInt:(jint)value;

+ (jint)atWithByteArray:(IOSByteArray *)bs
                withInt:(jint)base
                withInt:(jint)index;

+ (jboolean)testRejectionWithIntArray:(IOSIntArray *)Z;

+ (jint)absoluteWithInt:(jint)value;

+ (jboolean)checkPolynomialWithIntArray:(IOSIntArray *)polynomial
                                withInt:(jint)polyOffset
                                withInt:(jint)bound;

@end

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_PARAM_N(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N 1024
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, PARAM_N, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_PARAM_Q(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q 343576577
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, PARAM_Q, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_PARAM_Q_LOG(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q_LOG 29
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, PARAM_Q_LOG, jint)

inline jlong OrgBouncycastlePqcCryptoQteslaQTesla1p_get_PARAM_QINV(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_QINV 2205847551LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, PARAM_QINV, jlong)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_PARAM_BARR_MULT(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_BARR_MULT 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, PARAM_BARR_MULT, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_PARAM_BARR_DIV(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_BARR_DIV 30
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, PARAM_BARR_DIV, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_PARAM_B(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_B 524287
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, PARAM_B, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_PARAM_B_BITS(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_B_BITS 19
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, PARAM_B_BITS, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_PARAM_S_BITS(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_S_BITS 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, PARAM_S_BITS, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_PARAM_K(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, PARAM_K, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_PARAM_H(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_H 25
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, PARAM_H, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_PARAM_D(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_D 22
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, PARAM_D, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_PARAM_GEN_A(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_GEN_A 108
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, PARAM_GEN_A, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_PARAM_KEYGEN_BOUND_E(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_KEYGEN_BOUND_E 554
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, PARAM_KEYGEN_BOUND_E, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_PARAM_E(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_E 554
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, PARAM_E, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_PARAM_KEYGEN_BOUND_S(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_KEYGEN_BOUND_S 554
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, PARAM_KEYGEN_BOUND_S, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_PARAM_S(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_S 554
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, PARAM_S, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_PARAM_R2_INVN(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_R2_INVN 13632409
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, PARAM_R2_INVN, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_CRYPTO_RANDOMBYTES(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_RANDOMBYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, CRYPTO_RANDOMBYTES, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_CRYPTO_SEEDBYTES(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, CRYPTO_SEEDBYTES, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_CRYPTO_C_BYTES(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_C_BYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, CRYPTO_C_BYTES, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_HM_BYTES(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_HM_BYTES 40
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, HM_BYTES, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_RADIX32(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_RADIX32 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, RADIX32, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_maskb1(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_maskb1 1048575
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p, maskb1, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_NBLOCKS_SHAKE(void);
inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_set_NBLOCKS_SHAKE(jint value);
inline jint *OrgBouncycastlePqcCryptoQteslaQTesla1p_getRef_NBLOCKS_SHAKE(void);
static jint OrgBouncycastlePqcCryptoQteslaQTesla1p_NBLOCKS_SHAKE = 56;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgBouncycastlePqcCryptoQteslaQTesla1p, NBLOCKS_SHAKE, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_get_BPLUS1BYTES(void);
inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_set_BPLUS1BYTES(jint value);
inline jint *OrgBouncycastlePqcCryptoQteslaQTesla1p_getRef_BPLUS1BYTES(void);
static jint OrgBouncycastlePqcCryptoQteslaQTesla1p_BPLUS1BYTES = 3;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgBouncycastlePqcCryptoQteslaQTesla1p, BPLUS1BYTES, jint)

__attribute__((unused)) static jboolean OrgBouncycastlePqcCryptoQteslaQTesla1p_testZWithIntArray_(IOSIntArray *Z);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoQteslaQTesla1p_hashFunctionWithByteArray_withInt_withIntArray_withByteArray_withInt_(IOSByteArray *output, jint outputOffset, IOSIntArray *v, IOSByteArray *message, jint messageOffset);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(IOSByteArray *bs, jint base, jint index, jint value);

__attribute__((unused)) static jint OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(IOSByteArray *bs, jint base, jint index);

__attribute__((unused)) static jboolean OrgBouncycastlePqcCryptoQteslaQTesla1p_testRejectionWithIntArray_(IOSIntArray *Z);

__attribute__((unused)) static jint OrgBouncycastlePqcCryptoQteslaQTesla1p_absoluteWithInt_(jint value);

__attribute__((unused)) static jboolean OrgBouncycastlePqcCryptoQteslaQTesla1p_checkPolynomialWithIntArray_withInt_withInt_(IOSIntArray *polynomial, jint polyOffset, jint bound);

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_get_CDT_ROWS(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_CDT_ROWS 78
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian, CDT_ROWS, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_get_CDT_COLS(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_CDT_COLS 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian, CDT_COLS, jint)

inline jint OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_get_CHUNK_SIZE(void);
#define OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_CHUNK_SIZE 512
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian, CHUNK_SIZE, jint)

inline IOSIntArray *OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_get_cdt_v(void);
static IOSIntArray *OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_cdt_v;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian, cdt_v, IOSIntArray *)

@interface OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial ()

+ (jint)barr_reduceWithInt:(jint)a;

+ (jint)barr_reduce64WithLong:(jlong)a;

+ (jint)correctWithInt:(jint)x;

@end

inline IOSIntArray *OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_get_zeta(void);
static IOSIntArray *OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_zeta;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial, zeta, IOSIntArray *)

inline IOSIntArray *OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_get_zetainv(void);
static IOSIntArray *OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_zetainv;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial, zetainv, IOSIntArray *)

__attribute__((unused)) static jint OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_barr_reduceWithInt_(jint a);

__attribute__((unused)) static jint OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_barr_reduce64WithLong_(jlong a);

__attribute__((unused)) static jint OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_correctWithInt_(jint x);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/qtesla/QTesla1p.java"


#line 8
@implementation OrgBouncycastlePqcCryptoQteslaQTesla1p


#line 8
- (instancetype)initPackagePrivate {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initPackagePrivate(self);
  return self;
}


#line 50
+ (jint)generateKeyPairWithByteArray:(IOSByteArray *)publicKey
                       withByteArray:(IOSByteArray *)privateKey
        withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  return OrgBouncycastlePqcCryptoQteslaQTesla1p_generateKeyPairWithByteArray_withByteArray_withJavaSecuritySecureRandom_(publicKey, privateKey, secureRandom);
}


#line 116
+ (jint)generateSignatureWithByteArray:(IOSByteArray *)signature
                         withByteArray:(IOSByteArray *)message
                               withInt:(jint)messageOffset
                               withInt:(jint)messageLength
                         withByteArray:(IOSByteArray *)privateKey
          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  return OrgBouncycastlePqcCryptoQteslaQTesla1p_generateSignatureWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(signature, message, messageOffset, messageLength, privateKey, secureRandom);
}


#line 200
+ (jint)verifyingWithByteArray:(IOSByteArray *)message
                 withByteArray:(IOSByteArray *)signature
                       withInt:(jint)signatureOffset
                       withInt:(jint)signatureLength
                 withByteArray:(IOSByteArray *)publicKey {
  return OrgBouncycastlePqcCryptoQteslaQTesla1p_verifyingWithByteArray_withByteArray_withInt_withInt_withByteArray_(message, signature, signatureOffset, signatureLength, publicKey);
}


#line 259
+ (void)encodePrivateKeyWithByteArray:(IOSByteArray *)privateKey
                         withIntArray:(IOSIntArray *)secretPolynomial
                         withIntArray:(IOSIntArray *)errorPolynomial
                        withByteArray:(IOSByteArray *)seed
                              withInt:(jint)seedOffset
                        withByteArray:(IOSByteArray *)publicKey {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_encodePrivateKeyWithByteArray_withIntArray_withIntArray_withByteArray_withInt_withByteArray_(privateKey, secretPolynomial, errorPolynomial, seed, seedOffset, publicKey);
}


#line 292
+ (void)encodePublicKeyWithByteArray:(IOSByteArray *)publicKey
                        withIntArray:(IOSIntArray *)T
                       withByteArray:(IOSByteArray *)seedA
                             withInt:(jint)seedAOffset {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_encodePublicKeyWithByteArray_withIntArray_withByteArray_withInt_(publicKey, T, seedA, seedAOffset);
}


#line 333
+ (void)decodePublicKeyWithIntArray:(IOSIntArray *)publicKey
                      withByteArray:(IOSByteArray *)seedA
                            withInt:(jint)seedAOffset
                      withByteArray:(IOSByteArray *)publicKeyInput {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_decodePublicKeyWithIntArray_withByteArray_withInt_withByteArray_(publicKey, seedA, seedAOffset, publicKeyInput);
}


#line 383
+ (jboolean)testZWithIntArray:(IOSIntArray *)Z {
  return OrgBouncycastlePqcCryptoQteslaQTesla1p_testZWithIntArray_(Z);
}


#line 399
+ (void)encodeSignatureWithByteArray:(IOSByteArray *)signature
                             withInt:(jint)signatureOffset
                       withByteArray:(IOSByteArray *)C
                             withInt:(jint)cOffset
                        withIntArray:(IOSIntArray *)Z {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_encodeSignatureWithByteArray_withInt_withByteArray_withInt_withIntArray_(signature, signatureOffset, C, cOffset, Z);
}


#line 421
+ (void)decodeSignatureWithByteArray:(IOSByteArray *)C
                        withIntArray:(IOSIntArray *)Z
                       withByteArray:(IOSByteArray *)signature
                             withInt:(jint)signatureOffset {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_decodeSignatureWithByteArray_withIntArray_withByteArray_withInt_(C, Z, signature, signatureOffset);
}


#line 458
+ (void)encodeCWithIntArray:(IOSIntArray *)positionList
             withShortArray:(IOSShortArray *)signList
              withByteArray:(IOSByteArray *)output
                    withInt:(jint)outputOffset {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_encodeCWithIntArray_withShortArray_withByteArray_withInt_(positionList, signList, output, outputOffset);
}


#line 525
+ (void)hashFunctionWithByteArray:(IOSByteArray *)output
                          withInt:(jint)outputOffset
                     withIntArray:(IOSIntArray *)v
                    withByteArray:(IOSByteArray *)message
                          withInt:(jint)messageOffset {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_hashFunctionWithByteArray_withInt_withIntArray_withByteArray_withInt_(output, outputOffset, v, message, messageOffset);
}


#line 556
+ (jint)littleEndianToInt24WithByteArray:(IOSByteArray *)bs
                                 withInt:(jint)off {
  return OrgBouncycastlePqcCryptoQteslaQTesla1p_littleEndianToInt24WithByteArray_withInt_(bs, off);
}


#line 567
+ (void)sample_yWithIntArray:(IOSIntArray *)y
               withByteArray:(IOSByteArray *)seed
                     withInt:(jint)seedOffset
                     withInt:(jint)nonce {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_sample_yWithIntArray_withByteArray_withInt_withInt_(y, seed, seedOffset, nonce);
}


#line 598
+ (void)atWithByteArray:(IOSByteArray *)bs
                withInt:(jint)base
                withInt:(jint)index
                withInt:(jint)value {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(bs, base, index, value);
}


#line 603
+ (jint)atWithByteArray:(IOSByteArray *)bs
                withInt:(jint)base
                withInt:(jint)index {
  return OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(bs, base, index);
}


#line 608
+ (jboolean)test_correctnessWithIntArray:(IOSIntArray *)v
                                 withInt:(jint)vpos {
  return OrgBouncycastlePqcCryptoQteslaQTesla1p_test_correctnessWithIntArray_withInt_(v, vpos);
}


#line 638
+ (jboolean)testRejectionWithIntArray:(IOSIntArray *)Z {
  return OrgBouncycastlePqcCryptoQteslaQTesla1p_testRejectionWithIntArray_(Z);
}


#line 650
+ (jint)absoluteWithInt:(jint)value {
  return OrgBouncycastlePqcCryptoQteslaQTesla1p_absoluteWithInt_(value);
}


#line 656
+ (jboolean)checkPolynomialWithIntArray:(IOSIntArray *)polynomial
                                withInt:(jint)polyOffset
                                withInt:(jint)bound {
  return OrgBouncycastlePqcCryptoQteslaQTesla1p_checkPolynomialWithIntArray_withInt_withInt_(polynomial, polyOffset, bound);
}


#line 685
+ (jboolean)memoryEqualWithByteArray:(IOSByteArray *)left
                             withInt:(jint)leftOffset
                       withByteArray:(IOSByteArray *)right
                             withInt:(jint)rightOffset
                             withInt:(jint)length {
  return OrgBouncycastlePqcCryptoQteslaQTesla1p_memoryEqualWithByteArray_withInt_withByteArray_withInt_withInt_(left, leftOffset, right, rightOffset, length);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 16, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 19, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 25, 26, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 25, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 28, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 30, 13, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 31, 32, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 33, 34, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(generateKeyPairWithByteArray:withByteArray:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(generateSignatureWithByteArray:withByteArray:withInt:withInt:withByteArray:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(verifyingWithByteArray:withByteArray:withInt:withInt:withByteArray:);
  methods[4].selector = @selector(encodePrivateKeyWithByteArray:withIntArray:withIntArray:withByteArray:withInt:withByteArray:);
  methods[5].selector = @selector(encodePublicKeyWithByteArray:withIntArray:withByteArray:withInt:);
  methods[6].selector = @selector(decodePublicKeyWithIntArray:withByteArray:withInt:withByteArray:);
  methods[7].selector = @selector(testZWithIntArray:);
  methods[8].selector = @selector(encodeSignatureWithByteArray:withInt:withByteArray:withInt:withIntArray:);
  methods[9].selector = @selector(decodeSignatureWithByteArray:withIntArray:withByteArray:withInt:);
  methods[10].selector = @selector(encodeCWithIntArray:withShortArray:withByteArray:withInt:);
  methods[11].selector = @selector(hashFunctionWithByteArray:withInt:withIntArray:withByteArray:withInt:);
  methods[12].selector = @selector(littleEndianToInt24WithByteArray:withInt:);
  methods[13].selector = @selector(sample_yWithIntArray:withByteArray:withInt:withInt:);
  methods[14].selector = @selector(atWithByteArray:withInt:withInt:withInt:);
  methods[15].selector = @selector(atWithByteArray:withInt:withInt:);
  methods[16].selector = @selector(test_correctnessWithIntArray:withInt:);
  methods[17].selector = @selector(testRejectionWithIntArray:);
  methods[18].selector = @selector(absoluteWithInt:);
  methods[19].selector = @selector(checkPolynomialWithIntArray:withInt:withInt:);
  methods[20].selector = @selector(memoryEqualWithByteArray:withInt:withByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PARAM_N", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N, 0x1a, -1, -1, -1, -1 },
    { "PARAM_Q", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q, 0x1a, -1, -1, -1, -1 },
    { "PARAM_Q_LOG", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q_LOG, 0x1a, -1, -1, -1, -1 },
    { "PARAM_QINV", "J", .constantValue.asLong = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_QINV, 0x1a, -1, -1, -1, -1 },
    { "PARAM_BARR_MULT", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_BARR_MULT, 0x1a, -1, -1, -1, -1 },
    { "PARAM_BARR_DIV", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_BARR_DIV, 0x1a, -1, -1, -1, -1 },
    { "PARAM_B", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_B, 0x1a, -1, -1, -1, -1 },
    { "PARAM_B_BITS", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_B_BITS, 0x1a, -1, -1, -1, -1 },
    { "PARAM_S_BITS", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_S_BITS, 0x1a, -1, -1, -1, -1 },
    { "PARAM_K", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K, 0x1a, -1, -1, -1, -1 },
    { "PARAM_H", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_H, 0x1a, -1, -1, -1, -1 },
    { "PARAM_D", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_D, 0x1a, -1, -1, -1, -1 },
    { "PARAM_GEN_A", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_GEN_A, 0x1a, -1, -1, -1, -1 },
    { "PARAM_KEYGEN_BOUND_E", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_KEYGEN_BOUND_E, 0x1a, -1, -1, -1, -1 },
    { "PARAM_E", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_E, 0x1a, -1, -1, -1, -1 },
    { "PARAM_KEYGEN_BOUND_S", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_KEYGEN_BOUND_S, 0x1a, -1, -1, -1, -1 },
    { "PARAM_S", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_S, 0x1a, -1, -1, -1, -1 },
    { "PARAM_R2_INVN", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_R2_INVN, 0x1a, -1, -1, -1, -1 },
    { "CRYPTO_RANDOMBYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_RANDOMBYTES, 0x1a, -1, -1, -1, -1 },
    { "CRYPTO_SEEDBYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES, 0x1a, -1, -1, -1, -1 },
    { "CRYPTO_C_BYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_C_BYTES, 0x1a, -1, -1, -1, -1 },
    { "HM_BYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_HM_BYTES, 0x1a, -1, -1, -1, -1 },
    { "RADIX32", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_RADIX32, 0x1a, -1, -1, -1, -1 },
    { "CRYPTO_BYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_BYTES, 0x18, -1, -1, -1, -1 },
    { "CRYPTO_SECRETKEYBYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SECRETKEYBYTES, 0x18, -1, -1, -1, -1 },
    { "CRYPTO_PUBLICKEYBYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_PUBLICKEYBYTES, 0x18, -1, -1, -1, -1 },
    { "maskb1", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_maskb1, 0x1a, -1, -1, -1, -1 },
    { "NBLOCKS_SHAKE", "I", .constantValue.asLong = 0, 0xa, -1, 37, -1, -1 },
    { "BPLUS1BYTES", "I", .constantValue.asLong = 0, 0xa, -1, 38, -1, -1 },
  };
  static const void *ptrTable[] = { "generateKeyPair", "[B[BLJavaSecuritySecureRandom;", "generateSignature", "[B[BII[BLJavaSecuritySecureRandom;", "verifying", "[B[BII[B", "encodePrivateKey", "[B[I[I[BI[B", "encodePublicKey", "[B[I[BI", "decodePublicKey", "[I[BI[B", "testZ", "[I", "encodeSignature", "[BI[BI[I", "decodeSignature", "encodeC", "[I[S[BI", "hashFunction", "[BI[I[BI", "littleEndianToInt24", "[BI", "sample_y", "[I[BII", "at", "[BIII", "[BII", "test_correctness", "[II", "testRejection", "absolute", "I", "checkPolynomial", "[III", "memoryEqual", "[BI[BII", &OrgBouncycastlePqcCryptoQteslaQTesla1p_NBLOCKS_SHAKE, &OrgBouncycastlePqcCryptoQteslaQTesla1p_BPLUS1BYTES, "LOrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian;LOrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoQteslaQTesla1p = { "QTesla1p", "org.bouncycastle.pqc.crypto.qtesla", ptrTable, methods, fields, 7, 0x0, 21, 29, -1, 39, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoQteslaQTesla1p;
}

@end


#line 8
void OrgBouncycastlePqcCryptoQteslaQTesla1p_initPackagePrivate(OrgBouncycastlePqcCryptoQteslaQTesla1p *self) {
  NSObject_init(self);
}


#line 8
OrgBouncycastlePqcCryptoQteslaQTesla1p *new_OrgBouncycastlePqcCryptoQteslaQTesla1p_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoQteslaQTesla1p, initPackagePrivate)
}


#line 8
OrgBouncycastlePqcCryptoQteslaQTesla1p *create_OrgBouncycastlePqcCryptoQteslaQTesla1p_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoQteslaQTesla1p, initPackagePrivate)
}


#line 50
jint OrgBouncycastlePqcCryptoQteslaQTesla1p_generateKeyPairWithByteArray_withByteArray_withJavaSecuritySecureRandom_(IOSByteArray *publicKey, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  
#line 53
  jint nonce = 0;
  
#line 55
  IOSByteArray *randomness = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_RANDOMBYTES];
  
#line 58
  IOSByteArray *randomnessExtended = [IOSByteArray newArrayWithLength:(OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K + 3) * OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES];
  
#line 60
  IOSIntArray *secretPolynomial = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N];
  IOSIntArray *errorPolynomial = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K];
  IOSIntArray *A = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K];
  IOSIntArray *T = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K];
  
#line 65
  IOSIntArray *s_ntt = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N];
  
#line 69
  [((JavaSecuritySecureRandom *) nil_chk(secureRandom)) nextBytesWithByteArray:randomness];
  
#line 71
  OrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(
#line 72
  randomnessExtended, 0, (OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K + 3) * OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES,
#line 73
  randomness, 0, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_RANDOMBYTES);
  
#line 80
  for (jint k = 0; k < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K; k++) {
    
#line 82
    do {
      
#line 84
      OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_sample_gauss_polyWithInt_withByteArray_withInt_withIntArray_withInt_(++nonce, randomnessExtended, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES, errorPolynomial, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N);
    }
    while (OrgBouncycastlePqcCryptoQteslaQTesla1p_checkPolynomialWithIntArray_withInt_withInt_(errorPolynomial, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_KEYGEN_BOUND_E));
  }
  
#line 94
  do {
    
#line 96
    OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_sample_gauss_polyWithInt_withByteArray_withInt_withIntArray_withInt_(++nonce, randomnessExtended, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES, secretPolynomial, 0);
  }
  while (OrgBouncycastlePqcCryptoQteslaQTesla1p_checkPolynomialWithIntArray_withInt_withInt_(secretPolynomial, 0, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_KEYGEN_BOUND_S));
  
#line 100
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_uniformWithIntArray_withByteArray_withInt_(A, randomnessExtended, (OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K + 1) * OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES);
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_nttWithIntArray_withIntArray_(s_ntt, secretPolynomial);
  
#line 103
  for (jint k = 0; k < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K; k++) {
    
#line 105
    OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_mulWithIntArray_withInt_withIntArray_withInt_withIntArray_(T, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N, A, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N, s_ntt);
    OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_add_correctWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(T, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N, T, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N, errorPolynomial, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N);
  }
  
#line 110
  OrgBouncycastlePqcCryptoQteslaQTesla1p_encodePublicKeyWithByteArray_withIntArray_withByteArray_withInt_(publicKey, T, randomnessExtended, (OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K + 1) * OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES);
  OrgBouncycastlePqcCryptoQteslaQTesla1p_encodePrivateKeyWithByteArray_withIntArray_withIntArray_withByteArray_withInt_withByteArray_(privateKey, secretPolynomial, errorPolynomial, randomnessExtended, (OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K + 1) * OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES, publicKey);
  
#line 113
  return 0;
}


#line 116
jint OrgBouncycastlePqcCryptoQteslaQTesla1p_generateSignatureWithByteArray_withByteArray_withInt_withInt_withByteArray_withJavaSecuritySecureRandom_(IOSByteArray *signature, IOSByteArray *message, jint messageOffset, jint messageLength, IOSByteArray *privateKey, JavaSecuritySecureRandom *secureRandom) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  
#line 119
  IOSByteArray *c = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_C_BYTES];
  IOSByteArray *randomness = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES];
  IOSByteArray *randomness_input = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES + OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_RANDOMBYTES + 2 * OrgBouncycastlePqcCryptoQteslaQTesla1p_HM_BYTES];
  IOSIntArray *pos_list = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_H];
  IOSShortArray *sign_list = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_H];
  IOSIntArray *y = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N];
  
#line 126
  IOSIntArray *y_ntt = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N];
  IOSIntArray *Sc = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N];
  IOSIntArray *z = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N];
  
#line 130
  IOSIntArray *v = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K];
  IOSIntArray *Ec = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K];
  IOSIntArray *a = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K];
  
#line 134
  jint k;
  jint nonce = 0;
  jboolean rsp = false;
  
#line 138
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(privateKey, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SECRETKEYBYTES - OrgBouncycastlePqcCryptoQteslaQTesla1p_HM_BYTES - OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES, randomness_input, 0, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES);
  {
    
#line 141
    IOSByteArray *tmp = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_RANDOMBYTES];
    [((JavaSecuritySecureRandom *) nil_chk(secureRandom)) nextBytesWithByteArray:tmp];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tmp, 0, randomness_input, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_RANDOMBYTES);
  }
  
#line 146
  OrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(
#line 147
  randomness_input, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES + OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_RANDOMBYTES, OrgBouncycastlePqcCryptoQteslaQTesla1p_HM_BYTES,
#line 148
  message, 0, messageLength);
  
#line 150
  OrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(
#line 151
  randomness, 0, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES,
#line 152
  randomness_input, 0, randomness_input->size_ - OrgBouncycastlePqcCryptoQteslaQTesla1p_HM_BYTES);
  
#line 154
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(privateKey, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SECRETKEYBYTES - OrgBouncycastlePqcCryptoQteslaQTesla1p_HM_BYTES, randomness_input, randomness_input->size_ - OrgBouncycastlePqcCryptoQteslaQTesla1p_HM_BYTES, OrgBouncycastlePqcCryptoQteslaQTesla1p_HM_BYTES);
  
#line 156
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_uniformWithIntArray_withByteArray_withInt_(a, privateKey, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SECRETKEYBYTES - OrgBouncycastlePqcCryptoQteslaQTesla1p_HM_BYTES - 2 * OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES);
  
#line 158
  while (true) {
    
#line 160
    OrgBouncycastlePqcCryptoQteslaQTesla1p_sample_yWithIntArray_withByteArray_withInt_withInt_(y, randomness, 0, ++nonce);
    
#line 162
    OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_nttWithIntArray_withIntArray_(y_ntt, y);
    for (k = 0; k < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K; k++) {
      
#line 165
      OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_mulWithIntArray_withInt_withIntArray_withInt_withIntArray_(v, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N, a, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N, y_ntt);
    }
    
#line 168
    OrgBouncycastlePqcCryptoQteslaQTesla1p_hashFunctionWithByteArray_withInt_withIntArray_withByteArray_withInt_(c, 0, v, randomness_input, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES + OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_RANDOMBYTES);
    OrgBouncycastlePqcCryptoQteslaQTesla1p_encodeCWithIntArray_withShortArray_withByteArray_withInt_(pos_list, sign_list, c, 0);
    
#line 171
    OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_sparse_mul8WithIntArray_withInt_withByteArray_withInt_withIntArray_withShortArray_(Sc, 0, privateKey, 0, pos_list, sign_list);
    
#line 173
    OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_addWithIntArray_withIntArray_withIntArray_(z, y, Sc);
    
#line 175
    if (OrgBouncycastlePqcCryptoQteslaQTesla1p_testRejectionWithIntArray_(z)) {
      
#line 177
      continue;
    }
    
#line 180
    for (k = 0; k < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K; k++) {
      
#line 182
      OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_sparse_mul8WithIntArray_withInt_withByteArray_withInt_withIntArray_withShortArray_(Ec, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N, privateKey, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * (k + 1), pos_list, sign_list);
      OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_subWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(v, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N, v, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N, Ec, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N);
      rsp = OrgBouncycastlePqcCryptoQteslaQTesla1p_test_correctnessWithIntArray_withInt_(v, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N);
      if (rsp) {
        
#line 187
        break;
      }
    }
    if (rsp) {
      
#line 192
      continue;
    }
    
#line 195
    OrgBouncycastlePqcCryptoQteslaQTesla1p_encodeSignatureWithByteArray_withInt_withByteArray_withInt_withIntArray_(signature, 0, c, 0, z);
    return 0;
  }
}


#line 200
jint OrgBouncycastlePqcCryptoQteslaQTesla1p_verifyingWithByteArray_withByteArray_withInt_withInt_withByteArray_(IOSByteArray *message, IOSByteArray *signature, jint signatureOffset, jint signatureLength, IOSByteArray *publicKey) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  
#line 203
  IOSByteArray *c = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_C_BYTES];
  IOSByteArray *c_sig = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_C_BYTES];
  IOSByteArray *seed = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES];
  IOSByteArray *hm = [IOSByteArray newArrayWithLength:2 * OrgBouncycastlePqcCryptoQteslaQTesla1p_HM_BYTES];
  IOSIntArray *pos_list = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_H];
  IOSShortArray *sign_list = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_H];
  IOSIntArray *pk_t = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K];
  IOSIntArray *w = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K];
  IOSIntArray *a = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K];
  IOSIntArray *Tc = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K];
  
#line 214
  IOSIntArray *z = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N];
  IOSIntArray *z_ntt = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N];
  
#line 217
  jint k = 0;
  
#line 219
  if (signatureLength != OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_BYTES) {
    
#line 221
    return -1;
  }
  
#line 224
  OrgBouncycastlePqcCryptoQteslaQTesla1p_decodeSignatureWithByteArray_withIntArray_withByteArray_withInt_(c, z, signature, signatureOffset);
  if (OrgBouncycastlePqcCryptoQteslaQTesla1p_testZWithIntArray_(z)) {
    
#line 227
    return -2;
  }
  OrgBouncycastlePqcCryptoQteslaQTesla1p_decodePublicKeyWithIntArray_withByteArray_withInt_withByteArray_(pk_t, seed, 0, publicKey);
  
#line 232
  OrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(
#line 233
  hm, 0, OrgBouncycastlePqcCryptoQteslaQTesla1p_HM_BYTES,
#line 234
  message, 0, ((IOSByteArray *) nil_chk(message))->size_);
  OrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(
#line 236
  hm, OrgBouncycastlePqcCryptoQteslaQTesla1p_HM_BYTES, OrgBouncycastlePqcCryptoQteslaQTesla1p_HM_BYTES,
#line 237
  publicKey, 0, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_PUBLICKEYBYTES - OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES);
  
#line 239
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_uniformWithIntArray_withByteArray_withInt_(a, seed, 0);
  OrgBouncycastlePqcCryptoQteslaQTesla1p_encodeCWithIntArray_withShortArray_withByteArray_withInt_(pos_list, sign_list, c, 0);
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_nttWithIntArray_withIntArray_(z_ntt, z);
  
#line 243
  for (k = 0; k < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K; k++) {
    
#line 245
    OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_sparse_mul32WithIntArray_withInt_withIntArray_withInt_withIntArray_withShortArray_(Tc, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N, pk_t, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N, pos_list, sign_list);
    OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_mulWithIntArray_withInt_withIntArray_withInt_withIntArray_(w, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N, a, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N, z_ntt);
    OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_sub_reduceWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(w, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N, w, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N, Tc, k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N);
  }
  OrgBouncycastlePqcCryptoQteslaQTesla1p_hashFunctionWithByteArray_withInt_withIntArray_withByteArray_withInt_(c_sig, 0, w, hm, 0);
  
#line 251
  if (!OrgBouncycastlePqcCryptoQteslaQTesla1p_memoryEqualWithByteArray_withInt_withByteArray_withInt_withInt_(c, 0, c_sig, 0, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_C_BYTES)) {
    
#line 253
    return -3;
  }
  
#line 256
  return 0;
}


#line 259
void OrgBouncycastlePqcCryptoQteslaQTesla1p_encodePrivateKeyWithByteArray_withIntArray_withIntArray_withByteArray_withInt_withByteArray_(IOSByteArray *privateKey, IOSIntArray *secretPolynomial, IOSIntArray *errorPolynomial, IOSByteArray *seed, jint seedOffset, IOSByteArray *publicKey) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  
#line 262
  jint i;
  
#line 262
  jint k = 0;
  jint skPtr = 0;
  
#line 265
  for (i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; i++) {
    
#line 267
    *IOSByteArray_GetRef(nil_chk(privateKey), skPtr + i) = (jbyte) IOSIntArray_Get(nil_chk(secretPolynomial), i);
  }
  skPtr += OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N;
  
#line 271
  for (k = 0; k < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K; k++) {
    
#line 273
    for (i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; i++) {
      
#line 275
      *IOSByteArray_GetRef(nil_chk(privateKey), skPtr + k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N + i) = (jbyte) IOSIntArray_Get(nil_chk(errorPolynomial), k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N + i);
    }
  }
  skPtr += OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N;
  
#line 280
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(seed, seedOffset, privateKey, skPtr, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES * 2);
  skPtr += OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES * 2;
  
#line 284
  OrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(
#line 285
  privateKey, skPtr, OrgBouncycastlePqcCryptoQteslaQTesla1p_HM_BYTES,
#line 286
  publicKey, 0, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_PUBLICKEYBYTES - OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES);
  skPtr += OrgBouncycastlePqcCryptoQteslaQTesla1p_HM_BYTES;
}


#line 292
void OrgBouncycastlePqcCryptoQteslaQTesla1p_encodePublicKeyWithByteArray_withIntArray_withByteArray_withInt_(IOSByteArray *publicKey, IOSIntArray *T, IOSByteArray *seedA, jint seedAOffset) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  jint j = 0;
  
#line 296
  for (jint i = 0; i < JreIntDiv(OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q_LOG, 32); i += OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q_LOG) {
    
#line 298
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 0, IOSIntArray_Get(nil_chk(T), j) | (JreLShift32(IOSIntArray_Get(T, j + 1), 29)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 1, (JreRShift32(IOSIntArray_Get(T, j + 1), 3)) | (JreLShift32(IOSIntArray_Get(T, j + 2), 26)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 2, (JreRShift32(IOSIntArray_Get(T, j + 2), 6)) | (JreLShift32(IOSIntArray_Get(T, j + 3), 23)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 3, (JreRShift32(IOSIntArray_Get(T, j + 3), 9)) | (JreLShift32(IOSIntArray_Get(T, j + 4), 20)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 4, (JreRShift32(IOSIntArray_Get(T, j + 4), 12)) | (JreLShift32(IOSIntArray_Get(T, j + 5), 17)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 5, (JreRShift32(IOSIntArray_Get(T, j + 5), 15)) | (JreLShift32(IOSIntArray_Get(T, j + 6), 14)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 6, (JreRShift32(IOSIntArray_Get(T, j + 6), 18)) | (JreLShift32(IOSIntArray_Get(T, j + 7), 11)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 7, (JreRShift32(IOSIntArray_Get(T, j + 7), 21)) | (JreLShift32(IOSIntArray_Get(T, j + 8), 8)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 8, (JreRShift32(IOSIntArray_Get(T, j + 8), 24)) | (JreLShift32(IOSIntArray_Get(T, j + 9), 5)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 9, (JreRShift32(IOSIntArray_Get(T, j + 9), 27)) | (JreLShift32(IOSIntArray_Get(T, j + 10), 2)) | (JreLShift32(IOSIntArray_Get(T, j + 11), 31)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 10, (JreRShift32(IOSIntArray_Get(T, j + 11), 1)) | (JreLShift32(IOSIntArray_Get(T, j + 12), 28)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 11, (JreRShift32(IOSIntArray_Get(T, j + 12), 4)) | (JreLShift32(IOSIntArray_Get(T, j + 13), 25)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 12, (JreRShift32(IOSIntArray_Get(T, j + 13), 7)) | (JreLShift32(IOSIntArray_Get(T, j + 14), 22)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 13, (JreRShift32(IOSIntArray_Get(T, j + 14), 10)) | (JreLShift32(IOSIntArray_Get(T, j + 15), 19)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 14, (JreRShift32(IOSIntArray_Get(T, j + 15), 13)) | (JreLShift32(IOSIntArray_Get(T, j + 16), 16)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 15, (JreRShift32(IOSIntArray_Get(T, j + 16), 16)) | (JreLShift32(IOSIntArray_Get(T, j + 17), 13)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 16, (JreRShift32(IOSIntArray_Get(T, j + 17), 19)) | (JreLShift32(IOSIntArray_Get(T, j + 18), 10)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 17, (JreRShift32(IOSIntArray_Get(T, j + 18), 22)) | (JreLShift32(IOSIntArray_Get(T, j + 19), 7)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 18, (JreRShift32(IOSIntArray_Get(T, j + 19), 25)) | (JreLShift32(IOSIntArray_Get(T, j + 20), 4)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 19, (JreRShift32(IOSIntArray_Get(T, j + 20), 28)) | (JreLShift32(IOSIntArray_Get(T, j + 21), 1)) | (JreLShift32(IOSIntArray_Get(T, j + 22), 30)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 20, (JreRShift32(IOSIntArray_Get(T, j + 22), 2)) | (JreLShift32(IOSIntArray_Get(T, j + 23), 27)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 21, (JreRShift32(IOSIntArray_Get(T, j + 23), 5)) | (JreLShift32(IOSIntArray_Get(T, j + 24), 24)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 22, (JreRShift32(IOSIntArray_Get(T, j + 24), 8)) | (JreLShift32(IOSIntArray_Get(T, j + 25), 21)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 23, (JreRShift32(IOSIntArray_Get(T, j + 25), 11)) | (JreLShift32(IOSIntArray_Get(T, j + 26), 18)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 24, (JreRShift32(IOSIntArray_Get(T, j + 26), 14)) | (JreLShift32(IOSIntArray_Get(T, j + 27), 15)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 25, (JreRShift32(IOSIntArray_Get(T, j + 27), 17)) | (JreLShift32(IOSIntArray_Get(T, j + 28), 12)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 26, (JreRShift32(IOSIntArray_Get(T, j + 28), 20)) | (JreLShift32(IOSIntArray_Get(T, j + 29), 9)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 27, (JreRShift32(IOSIntArray_Get(T, j + 29), 23)) | (JreLShift32(IOSIntArray_Get(T, j + 30), 6)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(publicKey, i, 28, (JreRShift32(IOSIntArray_Get(T, j + 30), 26)) | (JreLShift32(IOSIntArray_Get(T, j + 31), 3)));
    j += 32;
  }
  
#line 330
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(seedA, seedAOffset, publicKey, JreIntDiv(OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q_LOG, 8), OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES);
}


#line 333
void OrgBouncycastlePqcCryptoQteslaQTesla1p_decodePublicKeyWithIntArray_withByteArray_withInt_withByteArray_(IOSIntArray *publicKey, IOSByteArray *seedA, jint seedAOffset, IOSByteArray *publicKeyInput) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  
#line 336
  jint j = 0;
  IOSByteArray *pt = publicKeyInput;
  jint mask29 = (JreLShift32(1, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q_LOG)) - 1;
  
#line 341
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K; i += 32) {
    
#line 343
    *IOSIntArray_GetRef(nil_chk(publicKey), i) = OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 0) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 1) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 0), 29)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 1), 3))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 2) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 1), 26)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 2), 6))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 3) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 2), 23)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 3), 9))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 4) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 3), 20)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 4), 12))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 5) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 4), 17)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 5), 15))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 6) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 5), 14)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 6), 18))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 7) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 6), 11)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 7), 21))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 8) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 7), 8)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 8), 24))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 9) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 8), 5)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 9), 27))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 10) = (JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 9), 2)) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 11) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 9), 31)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 10), 1))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 12) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 10), 28)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 11), 4))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 13) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 11), 25)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 12), 7))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 14) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 12), 22)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 13), 10))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 15) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 13), 19)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 14), 13))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 16) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 14), 16)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 15), 16))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 17) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 15), 13)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 16), 19))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 18) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 16), 10)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 17), 22))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 19) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 17), 7)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 18), 25))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 20) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 18), 4)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 19), 28))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 21) = (JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 19), 1)) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 22) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 19), 30)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 20), 2))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 23) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 20), 27)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 21), 5))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 24) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 21), 24)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 22), 8))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 25) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 22), 21)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 23), 11))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 26) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 23), 18)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 24), 14))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 27) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 24), 15)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 25), 17))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 28) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 25), 12)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 26), 20))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 29) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 26), 9)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 27), 23))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 30) = ((JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 27), 6)) | (JreLShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 28), 26))) & mask29;
    *IOSIntArray_GetRef(publicKey, i + 31) = JreURShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(pt, j, 28), 3);
    j += 29;
  }
  
#line 379
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(publicKeyInput, JreIntDiv(OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q_LOG, 8), seedA, seedAOffset, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES);
}


#line 383
jboolean OrgBouncycastlePqcCryptoQteslaQTesla1p_testZWithIntArray_(IOSIntArray *Z) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  
#line 387
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; i++) {
    
#line 389
    if (IOSIntArray_Get(nil_chk(Z), i) < -(OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_B - OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_S) || IOSIntArray_Get(Z, i) > OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_B - OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_S) {
      
#line 391
      return true;
    }
  }
  return false;
}

void OrgBouncycastlePqcCryptoQteslaQTesla1p_encodeSignatureWithByteArray_withInt_withByteArray_withInt_withIntArray_(IOSByteArray *signature, jint signatureOffset, IOSByteArray *C, jint cOffset, IOSIntArray *Z) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  jint j = 0;
  
#line 403
  for (jint i = 0; i < JreIntDiv(OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * (OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_B_BITS + 1), 32); i += 10) {
    
#line 405
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(signature, i, 0, (IOSIntArray_Get(nil_chk(Z), j) & ((JreLShift32(1, 20)) - 1)) | (JreLShift32(IOSIntArray_Get(Z, j + 1), 20)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(signature, i, 1, ((JreURShift32(IOSIntArray_Get(Z, j + 1), 12)) & ((JreLShift32(1, 8)) - 1)) | (JreLShift32((IOSIntArray_Get(Z, j + 2) & OrgBouncycastlePqcCryptoQteslaQTesla1p_maskb1), 8)) | (JreLShift32(IOSIntArray_Get(Z, j + 3), 28)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(signature, i, 2, ((JreURShift32(IOSIntArray_Get(Z, j + 3), 4)) & ((JreLShift32(1, 16)) - 1)) | (JreLShift32(IOSIntArray_Get(Z, j + 4), 16)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(signature, i, 3, ((JreURShift32(IOSIntArray_Get(Z, j + 4), 16)) & ((JreLShift32(1, 4)) - 1)) | (JreLShift32((IOSIntArray_Get(Z, j + 5) & OrgBouncycastlePqcCryptoQteslaQTesla1p_maskb1), 4)) | (JreLShift32(IOSIntArray_Get(Z, j + 6), 24)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(signature, i, 4, ((JreURShift32(IOSIntArray_Get(Z, j + 6), 8)) & ((JreLShift32(1, 12)) - 1)) | (JreLShift32(IOSIntArray_Get(Z, j + 7), 12)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(signature, i, 5, (IOSIntArray_Get(Z, j + 8) & ((JreLShift32(1, 20)) - 1)) | (JreLShift32(IOSIntArray_Get(Z, j + 9), 20)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(signature, i, 6, ((JreURShift32(IOSIntArray_Get(Z, j + 9), 12)) & ((JreLShift32(1, 8)) - 1)) | (JreLShift32((IOSIntArray_Get(Z, j + 10) & OrgBouncycastlePqcCryptoQteslaQTesla1p_maskb1), 8)) | (JreLShift32(IOSIntArray_Get(Z, j + 11), 28)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(signature, i, 7, ((JreURShift32(IOSIntArray_Get(Z, j + 11), 4)) & ((JreLShift32(1, 16)) - 1)) | (JreLShift32(IOSIntArray_Get(Z, j + 12), 16)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(signature, i, 8, ((JreURShift32(IOSIntArray_Get(Z, j + 12), 16)) & ((JreLShift32(1, 4)) - 1)) | (JreLShift32((IOSIntArray_Get(Z, j + 13) & OrgBouncycastlePqcCryptoQteslaQTesla1p_maskb1), 4)) | (JreLShift32(IOSIntArray_Get(Z, j + 14), 24)));
    OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(signature, i, 9, ((JreURShift32(IOSIntArray_Get(Z, j + 14), 8)) & ((JreLShift32(1, 12)) - 1)) | (JreLShift32(IOSIntArray_Get(Z, j + 15), 12)));
    j += 16;
  }
  
#line 418
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(C, cOffset, signature, signatureOffset + JreIntDiv(OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * (OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_B_BITS + 1), 8), OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_C_BYTES);
}


#line 421
void OrgBouncycastlePqcCryptoQteslaQTesla1p_decodeSignatureWithByteArray_withIntArray_withByteArray_withInt_(IOSByteArray *C, IOSIntArray *Z, IOSByteArray *signature, jint signatureOffset) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  jint j = 0;
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; i += 16) {
    
#line 426
    jint s0 = OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(signature, j, 0);
    jint s1 = OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(signature, j, 1);
    jint s2 = OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(signature, j, 2);
    jint s3 = OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(signature, j, 3);
    jint s4 = OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(signature, j, 4);
    jint s5 = OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(signature, j, 5);
    jint s6 = OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(signature, j, 6);
    jint s7 = OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(signature, j, 7);
    jint s8 = OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(signature, j, 8);
    jint s9 = OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(signature, j, 9);
    
#line 437
    *IOSIntArray_GetRef(nil_chk(Z), i) = JreRShift32(JreLShift32(s0, 12), 12);
    *IOSIntArray_GetRef(Z, i + 1) = (JreURShift32(s0, 20)) | (JreRShift32(JreLShift32(s1, 24), 12));
    *IOSIntArray_GetRef(Z, i + 2) = JreRShift32(JreLShift32(s1, 4), 12);
    *IOSIntArray_GetRef(Z, i + 3) = (JreURShift32(s1, 28)) | (JreRShift32(JreLShift32(s2, 16), 12));
    *IOSIntArray_GetRef(Z, i + 4) = (JreURShift32(s2, 16)) | (JreRShift32(JreLShift32(s3, 28), 12));
    *IOSIntArray_GetRef(Z, i + 5) = JreRShift32(JreLShift32(s3, 8), 12);
    *IOSIntArray_GetRef(Z, i + 6) = (JreURShift32(s3, 24)) | (JreRShift32(JreLShift32(s4, 20), 12));
    *IOSIntArray_GetRef(Z, i + 7) = JreRShift32(s4, 12);
    *IOSIntArray_GetRef(Z, i + 8) = JreRShift32(JreLShift32(s5, 12), 12);
    *IOSIntArray_GetRef(Z, i + 9) = (JreURShift32(s5, 20)) | (JreRShift32(JreLShift32(s6, 24), 12));
    *IOSIntArray_GetRef(Z, i + 10) = JreRShift32(JreLShift32(s6, 4), 12);
    *IOSIntArray_GetRef(Z, i + 11) = (JreURShift32(s6, 28)) | (JreRShift32(JreLShift32(s7, 16), 12));
    *IOSIntArray_GetRef(Z, i + 12) = (JreURShift32(s7, 16)) | (JreRShift32(JreLShift32(s8, 28), 12));
    *IOSIntArray_GetRef(Z, i + 13) = JreRShift32(JreLShift32(s8, 8), 12);
    *IOSIntArray_GetRef(Z, i + 14) = (JreURShift32(s8, 24)) | (JreRShift32(JreLShift32(s9, 20), 12));
    *IOSIntArray_GetRef(Z, i + 15) = JreRShift32(s9, 12);
    j += 10;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(signature, signatureOffset + JreIntDiv(OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * (OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_B_BITS + 1), 8), C, 0, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_C_BYTES);
}


#line 458
void OrgBouncycastlePqcCryptoQteslaQTesla1p_encodeCWithIntArray_withShortArray_withByteArray_withInt_(IOSIntArray *positionList, IOSShortArray *signList, IOSByteArray *output, jint outputOffset) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  jint count = 0;
  jint position;
  jshort domainSeparator = 0;
  IOSShortArray *C = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N];
  IOSByteArray *randomness = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE];
  
#line 467
  OrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(
#line 468
  randomness, 0, OrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE,
#line 469
  domainSeparator++,
#line 470
  output, outputOffset, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_RANDOMBYTES);
  
#line 474
  OrgBouncycastleUtilArrays_fillWithShortArray_withShort_(C, (jshort) 0);
  
#line 479
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_H; ) {
    
#line 481
    if (count > OrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE - 3) {
      
#line 484
      OrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(
#line 485
      randomness, 0, OrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE,
#line 486
      domainSeparator++,
#line 487
      output, outputOffset, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_RANDOMBYTES);
      
#line 490
      count = 0;
    }
    
#line 493
    position = (JreLShift32(IOSByteArray_Get(randomness, count), 8)) | (IOSByteArray_Get(randomness, count + 1) & (jint) 0xFF);
    position &= OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N - 1;
    
#line 499
    if (IOSShortArray_Get(C, position) == 0) {
      
#line 502
      if ((IOSByteArray_Get(randomness, count + 2) & 1) == 1) {
        
#line 505
        *IOSShortArray_GetRef(C, position) = -1;
      }
      else {
        
#line 511
        *IOSShortArray_GetRef(C, position) = 1;
      }
      
#line 515
      *IOSIntArray_GetRef(nil_chk(positionList), i) = position;
      *IOSShortArray_GetRef(nil_chk(signList), i) = IOSShortArray_Get(C, position);
      i++;
    }
    
#line 521
    count += 3;
  }
}


#line 525
void OrgBouncycastlePqcCryptoQteslaQTesla1p_hashFunctionWithByteArray_withInt_withIntArray_withByteArray_withInt_(IOSByteArray *output, jint outputOffset, IOSIntArray *v, IOSByteArray *message, jint messageOffset) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  jint mask;
  jint cL;
  
#line 530
  IOSByteArray *T = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N + 2 * OrgBouncycastlePqcCryptoQteslaQTesla1p_HM_BYTES];
  
#line 532
  for (jint k = 0; k < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K; k++) {
    
#line 534
    jint index = k * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N;
    for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; i++) {
      
#line 537
      jint temp = IOSIntArray_Get(nil_chk(v), index);
      
#line 539
      mask = JreRShift32(JreIntDiv(OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q, 2) - temp, OrgBouncycastlePqcCryptoQteslaQTesla1p_RADIX32 - 1);
      temp = ((temp - OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q) & mask) | (temp & ~mask);
      
#line 542
      cL = temp & ((JreLShift32(1, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_D)) - 1);
      
#line 544
      mask = JreRShift32((JreLShift32(1, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_D - 1)) - cL, OrgBouncycastlePqcCryptoQteslaQTesla1p_RADIX32 - 1);
      cL = ((cL - (JreLShift32(1, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_D))) & mask) | (cL & ~mask);
      *IOSByteArray_GetRef(T, index++) = (jbyte) (JreRShift32(temp - cL, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_D));
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(message, messageOffset, T, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K, 2 * OrgBouncycastlePqcCryptoQteslaQTesla1p_HM_BYTES);
  
#line 551
  OrgBouncycastlePqcCryptoQteslaHashUtils_secureHashAlgorithmKECCAK128WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(
#line 552
  output, outputOffset, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_C_BYTES,
#line 553
  T, 0, T->size_);
}


#line 556
jint OrgBouncycastlePqcCryptoQteslaQTesla1p_littleEndianToInt24WithByteArray_withInt_(IOSByteArray *bs, jint off) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  jint n = IOSByteArray_Get(nil_chk(bs), off) & (jint) 0xff;
  n |= JreLShift32((IOSByteArray_Get(bs, ++off) & (jint) 0xff), 8);
  n |= JreLShift32((IOSByteArray_Get(bs, ++off) & (jint) 0xff), 16);
  return n;
}


#line 567
void OrgBouncycastlePqcCryptoQteslaQTesla1p_sample_yWithIntArray_withByteArray_withInt_withInt_(IOSIntArray *y, IOSByteArray *seed, jint seedOffset, jint nonce) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  jint i = 0;
  
#line 569
  jint pos = 0;
  
#line 569
  jint nblocks = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N;
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * OrgBouncycastlePqcCryptoQteslaQTesla1p_BPLUS1BYTES + 1];
  jint nbytes = OrgBouncycastlePqcCryptoQteslaQTesla1p_BPLUS1BYTES;
  jshort dmsp = (jshort) (JreLShift32(nonce, 8));
  
#line 574
  OrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(
#line 575
  buf, 0, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * nbytes, dmsp++, seed, seedOffset, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_RANDOMBYTES);
  
#line 578
  while (i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N) {
    
#line 580
    if (pos >= nblocks * nbytes) {
      
#line 582
      nblocks = OrgBouncycastlePqcCryptoQteslaQTesla1p_NBLOCKS_SHAKE;
      OrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(
#line 584
      buf, 0, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N * nbytes, dmsp++, seed, seedOffset, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_RANDOMBYTES);
      
#line 586
      pos = 0;
    }
    *IOSIntArray_GetRef(nil_chk(y), i) = OrgBouncycastlePqcCryptoQteslaQTesla1p_littleEndianToInt24WithByteArray_withInt_(buf, pos) & ((JreLShift32(1, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_B_BITS + 1)) - 1);
    *IOSIntArray_GetRef(y, i) -= OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_B;
    if (IOSIntArray_Get(y, i) != JreLShift32(1, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_B_BITS)) {
      
#line 592
      i++;
    }
    pos += nbytes;
  }
}


#line 598
void OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_withInt_(IOSByteArray *bs, jint base, jint index, jint value) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  OrgBouncycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(value, bs, JreLShift32(base + index, 2));
}

jint OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(IOSByteArray *bs, jint base, jint index) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  return OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(bs, JreLShift32(base + index, 2));
}

jboolean OrgBouncycastlePqcCryptoQteslaQTesla1p_test_correctnessWithIntArray_withInt_(IOSIntArray *v, jint vpos) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  
#line 612
  jint mask;
  
#line 612
  jint left;
  
#line 612
  jint val;
  jint t0;
  
#line 613
  jint t1;
  
#line 615
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; i++) {
    
#line 618
    jint a = IOSIntArray_Get(nil_chk(v), vpos + i);
    mask = JreRShift32(JreIntDiv(OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q, 2) - a, OrgBouncycastlePqcCryptoQteslaQTesla1p_RADIX32 - 1);
    val = ((a - OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q) & mask) | (a & ~mask);
    
#line 622
    t0 = JreURShift32(~(OrgBouncycastlePqcCryptoQteslaQTesla1p_absoluteWithInt_(val) - (JreIntDiv(OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q, 2) - OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_E)), OrgBouncycastlePqcCryptoQteslaQTesla1p_RADIX32 - 1);
    
#line 624
    left = val;
    val = JreRShift32(val + (JreLShift32(1, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_D - 1)) - 1, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_D);
    val = left - (JreLShift32(val, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_D));
    
#line 628
    t1 = JreURShift32(~(OrgBouncycastlePqcCryptoQteslaQTesla1p_absoluteWithInt_(val) - ((JreLShift32(1, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_D - 1)) - OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_E)), OrgBouncycastlePqcCryptoQteslaQTesla1p_RADIX32 - 1);
    
#line 630
    if ((t0 | t1) == 1) {
      
#line 632
      return true;
    }
  }
  return false;
}


#line 638
jboolean OrgBouncycastlePqcCryptoQteslaQTesla1p_testRejectionWithIntArray_(IOSIntArray *Z) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  jint valid = 0;
  
#line 642
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; i++) {
    
#line 644
    valid |= OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_B - OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_S - OrgBouncycastlePqcCryptoQteslaQTesla1p_absoluteWithInt_(IOSIntArray_Get(nil_chk(Z), i));
  }
  
#line 647
  return JreURShift32(valid, 31) != 0;
}


#line 650
jint OrgBouncycastlePqcCryptoQteslaQTesla1p_absoluteWithInt_(jint value) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  jint sign = JreRShift32(value, OrgBouncycastlePqcCryptoQteslaQTesla1p_RADIX32 - 1);
  return (sign ^ value) - sign;
}

jboolean OrgBouncycastlePqcCryptoQteslaQTesla1p_checkPolynomialWithIntArray_withInt_withInt_(IOSIntArray *polynomial, jint polyOffset, jint bound) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  jint i;
  
#line 658
  jint j;
  
#line 658
  jint sum = 0;
  
#line 658
  jint limit = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N;
  jint temp;
  
#line 659
  jint mask;
  IOSIntArray *list = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N];
  
#line 662
  for (j = 0; j < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; j++) {
    
#line 664
    *IOSIntArray_GetRef(list, j) = OrgBouncycastlePqcCryptoQteslaQTesla1p_absoluteWithInt_(IOSIntArray_Get(nil_chk(polynomial), polyOffset + j));
  }
  
#line 667
  for (j = 0; j < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_H; j++) {
    
#line 669
    for (i = 0; i < limit - 1; i++) {
      
#line 671
      jint a = IOSIntArray_Get(list, i);
      
#line 671
      jint b = IOSIntArray_Get(list, i + 1);
      
#line 673
      mask = JreRShift32(b - a, OrgBouncycastlePqcCryptoQteslaQTesla1p_RADIX32 - 1);
      temp = (b & mask) | (a & ~mask);
      *IOSIntArray_GetRef(list, i + 1) = (a & mask) | (b & ~mask);
      *IOSIntArray_GetRef(list, i) = temp;
    }
    sum += IOSIntArray_Get(list, limit - 1);
    limit -= 1;
  }
  
#line 682
  return sum > bound;
}


#line 685
jboolean OrgBouncycastlePqcCryptoQteslaQTesla1p_memoryEqualWithByteArray_withInt_withByteArray_withInt_withInt_(IOSByteArray *left, jint leftOffset, IOSByteArray *right, jint rightOffset, jint length) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_initialize();
  
#line 688
  if (leftOffset + length <= ((IOSByteArray *) nil_chk(left))->size_ && rightOffset + length <= ((IOSByteArray *) nil_chk(right))->size_) {
    
#line 691
    for (jint i = 0; i < length; i++) {
      
#line 694
      if (IOSByteArray_Get(left, leftOffset + i) != IOSByteArray_Get(nil_chk(right), rightOffset + i)) {
        
#line 697
        return false;
      }
    }
    
#line 703
    return true;
  }
  else {
    
#line 709
    return false;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoQteslaQTesla1p)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/qtesla/QTesla1p.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian)


#line 717
@implementation OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 717
- (instancetype)init {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 804
+ (void)sample_gauss_polyWithInt:(jint)nonce
                   withByteArray:(IOSByteArray *)seed
                         withInt:(jint)seedOffset
                    withIntArray:(IOSIntArray *)poly
                         withInt:(jint)polyOffset {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_sample_gauss_polyWithInt_withByteArray_withInt_withIntArray_withInt_(nonce, seed, seedOffset, poly, polyOffset);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(sample_gauss_polyWithInt:withByteArray:withInt:withIntArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CDT_ROWS", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_CDT_ROWS, 0x1a, -1, -1, -1, -1 },
    { "CDT_COLS", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_CDT_COLS, 0x1a, -1, -1, -1, -1 },
    { "CHUNK_SIZE", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_CHUNK_SIZE, 0x1a, -1, -1, -1, -1 },
    { "cdt_v", "[I", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "sample_gauss_poly", "I[BI[II", &OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_cdt_v, "LOrgBouncycastlePqcCryptoQteslaQTesla1p;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian = { "Gaussian", "org.bouncycastle.pqc.crypto.qtesla", ptrTable, methods, fields, 7, 0x8, 2, 4, 3, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian;
}

+ (void)initialize {
  if (self == [OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian class]) {
    OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_cdt_v = [IOSIntArray newArrayWithInts:(jint[]){
#line 724
      (jint) 0x00000000, (jint) 0x00000000,
#line 725
      (jint) 0x0601F22A, (jint) 0x280663D4,
#line 726
      (jint) 0x11F09FFA, (jint) 0x162FE23D,
#line 727
      (jint) 0x1DA089E9, (jint) 0x437226E8,
#line 728
      (jint) 0x28EAB25D, (jint) 0x04C51FE2,
#line 729
      (jint) 0x33AC2F26, (jint) 0x14FDBA70,
#line 730
      (jint) 0x3DC767DC, (jint) 0x4565C960,
#line 731
      (jint) 0x4724FC62, (jint) 0x3342C78A,
#line 732
      (jint) 0x4FB448F4, (jint) 0x5229D06D,
#line 733
      (jint) 0x576B8599, (jint) 0x7423407F,
#line 734
      (jint) 0x5E4786DA, (jint) 0x3210BAF7,
#line 735
      (jint) 0x644B2C92, (jint) 0x431B3947,
#line 736
      (jint) 0x697E90CE, (jint) 0x77C362C4,
#line 737
      (jint) 0x6DEE0B96, (jint) 0x2798C9CE,
#line 738
      (jint) 0x71A92144, (jint) 0x5765FCE4,
#line 739
      (jint) 0x74C16FD5, (jint) 0x1E2A0990,
#line 740
      (jint) 0x7749AC92, (jint) 0x0DF36EEB,
#line 741
      (jint) 0x7954BFA4, (jint) 0x28079289,
#line 742
      (jint) 0x7AF5067A, (jint) 0x2EDC2050,
#line 743
      (jint) 0x7C3BC17C, (jint) 0x123D5E7B,
#line 744
      (jint) 0x7D38AD76, (jint) 0x2A9381D9,
#line 745
      (jint) 0x7DF9C5DF, (jint) 0x0E868CA7,
#line 746
      (jint) 0x7E8B2ABA, (jint) 0x18E5C811,
#line 747
      (jint) 0x7EF7237C, (jint) 0x00908272,
#line 748
      (jint) 0x7F4637C5, (jint) 0x6DBA5126,
#line 749
      (jint) 0x7F7F5707, (jint) 0x4A52EDEB,
#line 750
      (jint) 0x7FA808CC, (jint) 0x23290599,
#line 751
      (jint) 0x7FC4A083, (jint) 0x69BDF2D5,
#line 752
      (jint) 0x7FD870CA, (jint) 0x42275558,
#line 753
      (jint) 0x7FE5FB5D, (jint) 0x3EF82C1B,
#line 754
      (jint) 0x7FEF1BFA, (jint) 0x6C03A362,
#line 755
      (jint) 0x7FF52D4E, (jint) 0x316C2C8C,
#line 756
      (jint) 0x7FF927BA, (jint) 0x12AE54AF,
#line 757
      (jint) 0x7FFBBA43, (jint) 0x749CC0E2,
#line 758
      (jint) 0x7FFD5E3D, (jint) 0x4524AD91,
#line 759
      (jint) 0x7FFE6664, (jint) 0x535785B5,
#line 760
      (jint) 0x7FFF0A41, (jint) 0x0B291681,
#line 761
      (jint) 0x7FFF6E81, (jint) 0x132C3D6F,
#line 762
      (jint) 0x7FFFAAFE, (jint) 0x4DBC6BED,
#line 763
      (jint) 0x7FFFCEFD, (jint) 0x7A1E2D14,
#line 764
      (jint) 0x7FFFE41E, (jint) 0x4C6EC115,
#line 765
      (jint) 0x7FFFF059, (jint) 0x319503C8,
#line 766
      (jint) 0x7FFFF754, (jint) 0x5DDD0D40,
#line 767
      (jint) 0x7FFFFB43, (jint) 0x0B9E9823,
#line 768
      (jint) 0x7FFFFD71, (jint) 0x76B81AE1,
#line 769
      (jint) 0x7FFFFEA3, (jint) 0x7E66A1EC,
#line 770
      (jint) 0x7FFFFF49, (jint) 0x26F6E191,
#line 771
      (jint) 0x7FFFFFA1, (jint) 0x2FA31694,
#line 772
      (jint) 0x7FFFFFCF, (jint) 0x5247BEC9,
#line 773
      (jint) 0x7FFFFFE7, (jint) 0x4F4127C7,
#line 774
      (jint) 0x7FFFFFF3, (jint) 0x6FAA69FD,
#line 775
      (jint) 0x7FFFFFFA, (jint) 0x0630D073,
#line 776
      (jint) 0x7FFFFFFD, (jint) 0x0F2957BB,
#line 777
      (jint) 0x7FFFFFFE, (jint) 0x4FD29432,
#line 778
      (jint) 0x7FFFFFFF, (jint) 0x2CFAD60D,
#line 779
      (jint) 0x7FFFFFFF, (jint) 0x5967A930,
#line 780
      (jint) 0x7FFFFFFF, (jint) 0x6E4C9DFF,
#line 781
      (jint) 0x7FFFFFFF, (jint) 0x77FDCCC8,
#line 782
      (jint) 0x7FFFFFFF, (jint) 0x7C6CE89E,
#line 783
      (jint) 0x7FFFFFFF, (jint) 0x7E6D116F,
#line 784
      (jint) 0x7FFFFFFF, (jint) 0x7F50FA31,
#line 785
      (jint) 0x7FFFFFFF, (jint) 0x7FB50089,
#line 786
      (jint) 0x7FFFFFFF, (jint) 0x7FE04C2D,
#line 787
      (jint) 0x7FFFFFFF, (jint) 0x7FF2C7C1,
#line 788
      (jint) 0x7FFFFFFF, (jint) 0x7FFA8FE3,
#line 789
      (jint) 0x7FFFFFFF, (jint) 0x7FFDCB1B,
#line 790
      (jint) 0x7FFFFFFF, (jint) 0x7FFF1DE2,
#line 791
      (jint) 0x7FFFFFFF, (jint) 0x7FFFA6B7,
#line 792
      (jint) 0x7FFFFFFF, (jint) 0x7FFFDD39,
#line 793
      (jint) 0x7FFFFFFF, (jint) 0x7FFFF2A3,
#line 794
      (jint) 0x7FFFFFFF, (jint) 0x7FFFFAEF,
#line 795
      (jint) 0x7FFFFFFF, (jint) 0x7FFFFE1B,
#line 796
      (jint) 0x7FFFFFFF, (jint) 0x7FFFFF4D,
#line 797
      (jint) 0x7FFFFFFF, (jint) 0x7FFFFFBF,
#line 798
      (jint) 0x7FFFFFFF, (jint) 0x7FFFFFE9,
#line 799
      (jint) 0x7FFFFFFF, (jint) 0x7FFFFFF8,
#line 800
      (jint) 0x7FFFFFFF, (jint) 0x7FFFFFFD,
#line 801
      (jint) 0x7FFFFFFF, (jint) 0x7FFFFFFF } count:156];
      J2OBJC_SET_INITIALIZED(OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian)
    }
  }

@end


#line 717
void OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_init(OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian *self) {
  NSObject_init(self);
}


#line 717
OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian *new_OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian, init)
}


#line 717
OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian *create_OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian, init)
}


#line 804
void OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_sample_gauss_polyWithInt_withByteArray_withInt_withIntArray_withInt_(jint nonce, IOSByteArray *seed, jint seedOffset, IOSIntArray *poly, jint polyOffset) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_initialize();
  jint dmsp = JreLShift32(nonce, 8);
  
#line 808
  IOSByteArray *samp = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_CHUNK_SIZE * OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_CDT_COLS * 4];
  IOSIntArray *c = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_CDT_COLS];
  jint borrow;
  
#line 810
  jint sign;
  jint mask = JreURShift32(-1, 1);
  
#line 813
  for (jint chunk = 0; chunk < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; chunk += OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_CHUNK_SIZE) {
    
#line 815
    OrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(
#line 816
    samp, 0, OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_CHUNK_SIZE * OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_CDT_COLS * 4, (jshort) dmsp++, seed, seedOffset, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_SEEDBYTES);
    
#line 818
    for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_CHUNK_SIZE; i++) {
      
#line 820
      *IOSIntArray_GetRef(nil_chk(poly), polyOffset + chunk + i) = 0;
      for (jint j = 1; j < OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_CDT_ROWS; j++) {
        
#line 823
        borrow = 0;
        for (jint k = OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_CDT_COLS - 1; k >= 0; k--) {
          
#line 826
          *IOSIntArray_GetRef(c, k) = (OrgBouncycastlePqcCryptoQteslaQTesla1p_atWithByteArray_withInt_withInt_(samp, i * OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_CDT_COLS, k) & mask) - (IOSIntArray_Get(nil_chk(OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_cdt_v), j * OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_CDT_COLS + k) + borrow);
          borrow = JreRShift32(IOSIntArray_Get(c, k), OrgBouncycastlePqcCryptoQteslaQTesla1p_RADIX32 - 1);
        }
        *IOSIntArray_GetRef(poly, polyOffset + chunk + i) += ~borrow & 1;
      }
      
#line 833
      sign = JreRShift32(IOSByteArray_Get(samp, (JreLShift32(i * OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian_CDT_COLS, 2)) + 3), OrgBouncycastlePqcCryptoQteslaQTesla1p_RADIX32 - 1);
      
#line 835
      *IOSIntArray_GetRef(poly, polyOffset + chunk + i) = (sign & -IOSIntArray_Get(poly, polyOffset + chunk + i)) | (~sign & IOSIntArray_Get(poly, polyOffset + chunk + i));
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoQteslaQTesla1p_Gaussian)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/qtesla/QTesla1p.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial)


#line 841
@implementation OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 841
- (instancetype)init {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 977
+ (void)poly_uniformWithIntArray:(IOSIntArray *)a
                   withByteArray:(IOSByteArray *)seed
                         withInt:(jint)seedOffset {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_uniformWithIntArray_withByteArray_withInt_(a, seed, seedOffset);
}


#line 1038
+ (jint)reduceWithLong:(jlong)a {
  return OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_reduceWithLong_(a);
}


#line 1048
+ (void)nttWithIntArray:(IOSIntArray *)a
           withIntArray:(IOSIntArray *)w {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_nttWithIntArray_withIntArray_(a, w);
}


#line 1069
+ (jint)barr_reduceWithInt:(jint)a {
  return OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_barr_reduceWithInt_(a);
}


#line 1075
+ (jint)barr_reduce64WithLong:(jlong)a {
  return OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_barr_reduce64WithLong_(a);
}


#line 1081
+ (jint)correctWithInt:(jint)x {
  return OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_correctWithInt_(x);
}


#line 1086
+ (void)nttinvWithIntArray:(IOSIntArray *)a
                   withInt:(jint)aPos
              withIntArray:(IOSIntArray *)w {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_nttinvWithIntArray_withInt_withIntArray_(a, aPos, w);
}


#line 1105
+ (void)poly_nttWithIntArray:(IOSIntArray *)x_ntt
                withIntArray:(IOSIntArray *)x {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_nttWithIntArray_withIntArray_(x_ntt, x);
}


#line 1115
+ (void)poly_pointwiseWithIntArray:(IOSIntArray *)result
                           withInt:(jint)rpos
                      withIntArray:(IOSIntArray *)x
                           withInt:(jint)xpos
                      withIntArray:(IOSIntArray *)y {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_pointwiseWithIntArray_withInt_withIntArray_withInt_withIntArray_(result, rpos, x, xpos, y);
}


#line 1124
+ (void)poly_mulWithIntArray:(IOSIntArray *)result
                     withInt:(jint)rpos
                withIntArray:(IOSIntArray *)x
                     withInt:(jint)xpos
                withIntArray:(IOSIntArray *)y {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_mulWithIntArray_withInt_withIntArray_withInt_withIntArray_(result, rpos, x, xpos, y);
}


#line 1131
+ (void)poly_addWithIntArray:(IOSIntArray *)result
                withIntArray:(IOSIntArray *)x
                withIntArray:(IOSIntArray *)y {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_addWithIntArray_withIntArray_withIntArray_(result, x, y);
}


#line 1140
+ (void)poly_add_correctWithIntArray:(IOSIntArray *)result
                             withInt:(jint)rpos
                        withIntArray:(IOSIntArray *)x
                             withInt:(jint)xpos
                        withIntArray:(IOSIntArray *)y
                             withInt:(jint)ypos {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_add_correctWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(result, rpos, x, xpos, y, ypos);
}


#line 1150
+ (void)poly_subWithIntArray:(IOSIntArray *)result
                     withInt:(jint)rpos
                withIntArray:(IOSIntArray *)x
                     withInt:(jint)xpos
                withIntArray:(IOSIntArray *)y
                     withInt:(jint)ypos {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_subWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(result, rpos, x, xpos, y, ypos);
}

+ (void)poly_sub_reduceWithIntArray:(IOSIntArray *)result
                            withInt:(jint)rpos
                       withIntArray:(IOSIntArray *)x
                            withInt:(jint)xpos
                       withIntArray:(IOSIntArray *)y
                            withInt:(jint)ypos {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_sub_reduceWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(result, rpos, x, xpos, y, ypos);
}

+ (void)sparse_mul8WithIntArray:(IOSIntArray *)prod
                        withInt:(jint)ppos
                  withByteArray:(IOSByteArray *)s
                        withInt:(jint)spos
                   withIntArray:(IOSIntArray *)pos_list
                 withShortArray:(IOSShortArray *)sign_list {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_sparse_mul8WithIntArray_withInt_withByteArray_withInt_withIntArray_withShortArray_(prod, ppos, s, spos, pos_list, sign_list);
}


#line 1192
+ (void)sparse_mul32WithIntArray:(IOSIntArray *)prod
                         withInt:(jint)ppos
                    withIntArray:(IOSIntArray *)pk
                         withInt:(jint)pkPos
                    withIntArray:(IOSIntArray *)pos_list
                  withShortArray:(IOSShortArray *)sign_list {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_sparse_mul32WithIntArray_withInt_withIntArray_withInt_withIntArray_withShortArray_(prod, ppos, pk, pkPos, pos_list, sign_list);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 8, 3, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 12, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 20, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 21, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 24, 25, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(poly_uniformWithIntArray:withByteArray:withInt:);
  methods[2].selector = @selector(reduceWithLong:);
  methods[3].selector = @selector(nttWithIntArray:withIntArray:);
  methods[4].selector = @selector(barr_reduceWithInt:);
  methods[5].selector = @selector(barr_reduce64WithLong:);
  methods[6].selector = @selector(correctWithInt:);
  methods[7].selector = @selector(nttinvWithIntArray:withInt:withIntArray:);
  methods[8].selector = @selector(poly_nttWithIntArray:withIntArray:);
  methods[9].selector = @selector(poly_pointwiseWithIntArray:withInt:withIntArray:withInt:withIntArray:);
  methods[10].selector = @selector(poly_mulWithIntArray:withInt:withIntArray:withInt:withIntArray:);
  methods[11].selector = @selector(poly_addWithIntArray:withIntArray:withIntArray:);
  methods[12].selector = @selector(poly_add_correctWithIntArray:withInt:withIntArray:withInt:withIntArray:withInt:);
  methods[13].selector = @selector(poly_subWithIntArray:withInt:withIntArray:withInt:withIntArray:withInt:);
  methods[14].selector = @selector(poly_sub_reduceWithIntArray:withInt:withIntArray:withInt:withIntArray:withInt:);
  methods[15].selector = @selector(sparse_mul8WithIntArray:withInt:withByteArray:withInt:withIntArray:withShortArray:);
  methods[16].selector = @selector(sparse_mul32WithIntArray:withInt:withIntArray:withInt:withIntArray:withShortArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "zeta", "[I", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "zetainv", "[I", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
  };
  static const void *ptrTable[] = { "poly_uniform", "[I[BI", "reduce", "J", "ntt", "[I[I", "barr_reduce", "I", "barr_reduce64", "correct", "nttinv", "[II[I", "poly_ntt", "poly_pointwise", "[II[II[I", "poly_mul", "poly_add", "[I[I[I", "poly_add_correct", "[II[II[II", "poly_sub", "poly_sub_reduce", "sparse_mul8", "[II[BI[I[S", "sparse_mul32", "[II[II[I[S", &OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_zeta, &OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_zetainv, "LOrgBouncycastlePqcCryptoQteslaQTesla1p;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial = { "QTesla1PPolynomial", "org.bouncycastle.pqc.crypto.qtesla", ptrTable, methods, fields, 7, 0x8, 17, 2, 28, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial;
}

+ (void)initialize {
  if (self == [OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial class]) {
    OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_zeta = [IOSIntArray newArrayWithInts:(jint[]){
#line 844
      184007114, 341297933, 172127038, 306069179, 260374244, 269720605, 20436325, 2157599, 36206659, 61987110, 112759694, 92762708, 278504038, 139026960, 183642748, 298230187,
#line 845
      37043356, 230730845, 107820937, 97015745, 156688276, 38891102, 170244636, 259345227, 170077366, 141586883, 100118513, 328793523, 289946488, 263574185, 132014089, 14516260,
#line 846
      87424978, 192691578, 190961717, 262687761, 333967048, 12957952, 326574509, 273585413, 151922543, 195893203, 261889302, 120488377, 169571794, 44896463, 128576039, 68257019,
#line 847
      20594664, 44164717, 36060712, 256009818, 172063915, 211967562, 135533785, 104908181, 203788155, 52968398, 123297488, 44711423, 329131026, 245797804, 220629853, 200431766,
#line 848
      92905498, 215466666, 227373088, 120513729, 274875394, 236766448, 84216704, 97363940, 224003799, 167341181, 333540791, 225846253, 290150331, 137934911, 101127339, 95054535,
#line 849
      7072757, 58600117, 264117725, 207480694, 268253444, 292044590, 166300682, 256585624, 133577520, 119707476, 58169614, 188489502, 184778640, 156039906, 286669262, 112658784,
#line 850
      89254003, 266568758, 290599527, 80715937, 180664712, 225980378, 103512701, 304604206, 327443646, 92082345, 296093912, 144843084, 309484036, 329737605, 141656867, 264967053,
#line 851
      227847682, 328674715, 208663554, 309005608, 315790590, 182996330, 333212133, 203436199, 13052895, 23858345, 173478900, 97132319, 57066271, 70747422, 202106993, 309870606,
#line 852
      56390934, 336126437, 189147643, 219236223, 293351741, 305570320, 18378834, 336914091, 59506067, 277923611, 217306643, 129369847, 308113789, 56954705, 190254906, 199465001,
#line 853
      119331054, 143640880, 17590914, 309468163, 172483421, 153376031, 58864560, 70957183, 237697179, 116097341, 62196815, 80692520, 310642530, 328595292, 12121494, 71200620,
#line 854
      200016287, 235006678, 21821056, 102505389, 183332133, 59734849, 283127491, 313646880, 30359439, 163176989, 50717815, 100183661, 322975554, 92821217, 283119421, 34453836,
#line 855
      303758926, 89460722, 147514506, 175603941, 76494101, 220775631, 304963431, 38821441, 217317485, 301302769, 328727631, 101476595, 270750726, 253708871, 176201368, 324059659,
#line 856
      114780906, 304156831, 273708648, 144095014, 263545324, 179240984, 187811389, 244886526, 202581571, 209325648, 117231636, 182195945, 217965216, 252295904, 332003328, 46153749,
#line 857
      334740528, 62618402, 301165510, 283016648, 212224416, 234984074, 107363471, 125430881, 172821269, 270409387, 156316970, 311644197, 50537885, 248376507, 154072039, 331539029,
#line 858
      48454192, 267029920, 225963915, 16753350, 76840946, 226444843, 108106635, 154887261, 326283837, 101291223, 204194230, 54014060, 104099734, 104245071, 260949411, 333985274,
#line 859
      291682234, 328313139, 29607387, 106291750, 162553334, 275058303, 64179189, 263147140, 15599810, 325103190, 137254480, 66787068, 4755224, 308520011, 181897417, 325162685,
#line 860
      221099032, 131741505, 147534370, 131533267, 144073688, 166398146, 155829711, 252509898, 251605008, 323547097, 216038649, 232629333, 95137254, 287931575, 235583527, 32386598,
#line 861
      76722491, 60825791, 138354268, 400761, 51907675, 197369064, 319840588, 98618414, 84343982, 108113946, 314679670, 134518178, 64988900, 4333172, 295712261, 200707216,
#line 862
      147647414, 318013383, 77682006, 92518996, 42154619, 87464521, 285037574, 332936592, 62635246, 5534097, 308862707, 91097989, 269726589, 273280832, 251670430, 95492698,
#line 863
      21676891, 182964692, 177187742, 294825274, 85128609, 273594538, 93115857, 116308166, 312212122, 18665807, 32192823, 313249299, 98777368, 273984239, 312125377, 205655336,
#line 864
      264861277, 178920022, 341054719, 232663249, 173564046, 176591124, 157537342, 305058098, 277279130, 170028356, 228573747, 31628995, 175280663, 37304323, 122111670, 210658936,
#line 865
      175704183, 314649282, 325535066, 266783938, 301319742, 327923297, 279787306, 304633001, 304153402, 292839078, 147442886, 94150133, 40461238, 221384781, 269671052, 265445273,
#line 866
      208370149, 160863546, 287765159, 339146643, 129600429, 96192870, 113146118, 95879915, 216708053, 285201955, 67756451, 79028039, 309141895, 138447809, 212246614, 12641916,
#line 867
      243544995, 33459809, 76979779, 71155723, 152521243, 200750888, 36425947, 339074467, 319204591, 188312744, 266105966, 280016981, 183723313, 238915015, 23277613, 160934729,
#line 868
      200611286, 163282810, 297928823, 226921588, 86839172, 145317111, 202226936, 51887320, 318474782, 282270658, 221219795, 207597867, 132089009, 334627662, 163952597, 67529059,
#line 869
      173759630, 234865017, 255217646, 277806158, 61964704, 216678166, 96126463, 39218331, 70028373, 4899005, 238135514, 242700690, 284680271, 81041980, 332906491, 463527,
#line 870
      299280916, 204600651, 149654879, 222229829, 26825157, 81825189, 127990873, 200962599, 16149163, 108812393, 217708971, 152638110, 28735779, 5272794, 19720409, 231726324,
#line 871
      49854178, 118319174, 185669526, 223407181, 243138094, 259020958, 308825615, 164156486, 341391280, 192526841, 97036052, 279986894, 20263748, 32228956, 43816679, 343421811,
#line 872
      124320208, 3484106, 31711063, 147679160, 195369505, 54243678, 279088595, 149119313, 301997352, 244557309, 19700779, 138872683, 230523717, 113507709, 135291486, 313025300,
#line 873
      254384479, 219815764, 253574481, 220646316, 124744817, 123915741, 325760383, 123516396, 138140410, 154060994, 314730104, 57286356, 222353426, 76630003, 145380041, 52039855,
#line 874
      229881219, 332902036, 152308429, 95071889, 124799350, 270141530, 47897266, 119620601, 133269057, 138561303, 341820265, 66049665, 273409631, 304306012, 212490958, 210388603,
#line 875
      277413768, 280793261, 223131872, 162407285, 44911970, 316685837, 298709373, 252812339, 230786851, 230319350, 56863422, 341141914, 177295413, 248222411, 215148650, 97970603,
#line 876
      291678055, 161911155, 339645428, 206445182, 31895080, 279676698, 78257775, 268845232, 92545841, 336725589, 47384597, 62216335, 82290365, 89893410, 266117967, 791867,
#line 877
      28042243, 110563426, 183316855, 281174508, 166338432, 86326996, 261473803, 164647535, 84749290, 157518777, 214336587, 72257047, 13358702, 229010735, 204196474, 179927635,
#line 878
      21786785, 330554989, 164559635, 144505300, 280425045, 324057501, 268227440, 323362437, 26891539, 228523003, 166709094, 61174973, 13532911, 42168701, 133044957, 158219357,
#line 879
      220115616, 15174468, 281706353, 283813987, 263212325, 289818392, 247170937, 276072317, 197581495, 33713097, 181695825, 96829354, 32991226, 228583784, 4040287, 65188717,
#line 880
      258204083, 96366799, 176298395, 341574369, 306098123, 218746932, 29191888, 311810435, 305844323, 31614267, 28130094, 72716426, 38568041, 197579396, 14876445, 228525674,
#line 881
      294569685, 2451649, 165929882, 112195415, 204786047, 138216235, 3438132, 126150615, 59754608, 158965324, 268160978, 266231264, 244422459, 306155336, 218178824, 301806695,
#line 882
      208837335, 212153467, 209725081, 269355286, 295716530, 13980580, 264284060, 301901789, 275319045, 107139083, 4006959, 143908623, 139848274, 25357089, 21607040, 340818603,
#line 883
      91260932, 198869267, 45119941, 224113252, 269556513, 42857483, 268925602, 188501450, 235382337, 324688793, 113056679, 177232352, 98280013, 117743899, 87369665, 330110286,
#line 884
      310895756, 268425063, 27568325, 266303142, 181405304, 65876631, 246283438, 127636847, 16153922, 210256884, 9257227, 147272724, 235571791, 340876897, 31558760, 224463520,
#line 885
      229909008, 40943950, 263351999, 14865952, 27279162, 51980445, 99553161, 108121152, 145230283, 217402431, 84060866, 190168688, 46894008, 205718237, 296935065, 331646198,
#line 886
      59709076, 265829428, 214503586, 310273189, 86051634, 247210969, 275872780, 55395653, 302717617, 155583500, 207999042, 293597246, 305796948, 139332832, 198434142, 104197059,
#line 887
      320317582, 101819543, 70813687, 43594385, 241913829, 210308279, 298735610, 151599086, 92093482, 24654121, 52528801, 134711941, 324580593, 293101038, 121757877, 323940193,
#line 888
      276114751, 33522997, 218880483, 46953248, 33126382, 294367143, 161595040, 208968904, 129221110, 323693686, 234366848, 50155901, 123936119, 72127416, 34243899, 171824126,
#line 889
      26019236, 93997235, 28452989, 24219933, 188331672, 181161011, 146526219, 186502916, 258266311, 207146754, 206589869, 189836867, 107762500, 129011227, 222324073, 331319091,
#line 890
      36618753, 141615400, 273319528, 246222615, 156139193, 290104141, 154851520, 310226922, 60187406, 73704819, 225899604, 87931539, 142487643, 152682959, 45891249, 212048348,
#line 891
      148547910, 207745063, 4405848, 179269204, 216233362, 230307487, 303352796, 41616117, 47140231, 13452075, 94626849, 48892822, 78453712, 214721933, 300785835, 1512599,
#line 892
      173577933, 163255132, 239883248, 205714288, 306118903, 106953300, 150085654, 77068348, 246390345, 199698311, 280165539, 256497526, 194381508, 78125966, 168327358, 180735395,
#line 893
      145983352, 243342736, 198463602, 83165996, 286431792, 22885329, 271516106, 66137359, 243561376, 324886778, 149497212, 24531379, 32857894, 62778029, 56960216, 224996784,
#line 894
      129315394, 81068505, 277744916, 215817366, 117205172, 195090165, 287841567, 57750901, 162987791, 259309908, 135370005, 194853269, 236792732, 219249166, 42349628, 27805769,
#line 895
      186263338, 310699018, 6491000, 228545163, 315890485, 22219119, 144392189, 15505150, 87848372, 155973124, 20446561, 177725890, 226669021, 205315635, 269580641, 133696452,
#line 896
      189388357, 314652032, 317225560, 304194584, 157633737, 298144493, 185785271, 337434647, 559796, 4438732, 249110619, 184824722, 221490126, 205632858, 172362641, 176702767,
#line 897
      276712118, 296075254, 111221225, 259809961, 15438443, 198021462, 134378223, 162261445, 170746654, 256890644, 125206341, 307078324, 279553989, 170124925, 296845387, 188226544,
#line 898
      295437875, 315053523, 172025817, 279046062, 189967278, 158662482, 192989875, 326540363, 135446089, 98631439, 257379933, 325004289, 26554274, 62190249, 228828648, 274361329,
#line 899
      18518762, 184854759, 210189061, 186836398, 230859454, 206912014, 201250021, 276332768, 119984643, 91358832, 325377399, 69085488, 307352479, 308876137, 208756649, 32865966,
#line 900
      152976045, 207821125, 66426662, 67585526, 118828370, 3107192, 322037257, 146029104, 106553806, 266958791, 89567376, 153815988, 90786397, 271042585, 203781777, 169087756,
#line 901
      315867500, 306916544, 7528726, 327732739, 227901532, 2263402, 14357894, 269740764, 322090105, 59838559, 298337502, 292797139, 337635349, 66476915, 75612762, 328089387,
#line 902
      155232910, 87069405, 36163560, 273715413, 321325749, 218096743, 308178877, 21861281, 180676741, 135208372, 119891712, 122406065, 267537516, 341350322, 87789083, 196340943,
#line 903
      217070591, 83564209, 159382818, 253921239, 184673854, 213569600, 194031064, 35973794, 18071215, 250854127, 115090766, 147707843, 330337973, 266187164, 27853295, 296801215,
#line 904
      254949704, 43331190, 73930201, 35703461, 119780800, 216998106, 12687572, 250863345, 243908221, 330555990, 296216993, 202100577, 111307303, 151049872, 103451600, 237710099,
#line 905
      78658022, 121490075, 134292528, 88277916, 177315676, 186629690, 77848818, 211822377, 145696683, 289190386, 274721999, 328391282, 218772820, 91324151, 321725584, 277577004,
#line 906
      65732866, 275538085, 144429136, 204062923, 177280727, 214204692, 264758257, 169151951, 335535576, 334002493, 281131703, 305997258, 310527888, 136973519, 216764406, 235954329,
#line 907
      254049694, 285174861, 264316834, 11792643, 149333889, 214699018, 261331547, 317320791, 24527858, 118790777, 264146824, 174296812, 332779737, 94199786, 288227027, 172048372 } count:1024];
      OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_zetainv = [IOSIntArray newArrayWithInts:(jint[]){
#line 911
        55349550, 249376791, 10796840, 169279765, 79429753, 224785800, 319048719, 26255786, 82245030, 128877559, 194242688, 331783934, 79259743, 58401716, 89526883, 107622248,
#line 912
        126812171, 206603058, 33048689, 37579319, 62444874, 9574084, 8041001, 174424626, 78818320, 129371885, 166295850, 139513654, 199147441, 68038492, 277843711, 65999573,
#line 913
        21850993, 252252426, 124803757, 15185295, 68854578, 54386191, 197879894, 131754200, 265727759, 156946887, 166260901, 255298661, 209284049, 222086502, 264918555, 105866478,
#line 914
        240124977, 192526705, 232269274, 141476000, 47359584, 13020587, 99668356, 92713232, 330889005, 126578471, 223795777, 307873116, 269646376, 300245387, 88626873, 46775362,
#line 915
        315723282, 77389413, 13238604, 195868734, 228485811, 92722450, 325505362, 307602783, 149545513, 130006977, 158902723, 89655338, 184193759, 260012368, 126505986, 147235634,
#line 916
        255787494, 2226255, 76039061, 221170512, 223684865, 208368205, 162899836, 321715296, 35397700, 125479834, 22250828, 69861164, 307413017, 256507172, 188343667, 15487190,
#line 917
        267963815, 277099662, 5941228, 50779438, 45239075, 283738018, 21486472, 73835813, 329218683, 341313175, 115675045, 15843838, 336047851, 36660033, 27709077, 174488821,
#line 918
        139794800, 72533992, 252790180, 189760589, 254009201, 76617786, 237022771, 197547473, 21539320, 340469385, 224748207, 275991051, 277149915, 135755452, 190600532, 310710611,
#line 919
        134819928, 34700440, 36224098, 274491089, 18199178, 252217745, 223591934, 67243809, 142326556, 136664563, 112717123, 156740179, 133387516, 158721818, 325057815, 69215248,
#line 920
        114747929, 281386328, 317022303, 18572288, 86196644, 244945138, 208130488, 17036214, 150586702, 184914095, 153609299, 64530515, 171550760, 28523054, 48138702, 155350033,
#line 921
        46731190, 173451652, 64022588, 36498253, 218370236, 86685933, 172829923, 181315132, 209198354, 145555115, 328138134, 83766616, 232355352, 47501323, 66864459, 166873810,
#line 922
        171213936, 137943719, 122086451, 158751855, 94465958, 339137845, 343016781, 6141930, 157791306, 45432084, 185942840, 39381993, 26351017, 28924545, 154188220, 209880125,
#line 923
        73995936, 138260942, 116907556, 165850687, 323130016, 187603453, 255728205, 328071427, 199184388, 321357458, 27686092, 115031414, 337085577, 32877559, 157313239, 315770808,
#line 924
        301226949, 124327411, 106783845, 148723308, 208206572, 84266669, 180588786, 285825676, 55735010, 148486412, 226371405, 127759211, 65831661, 262508072, 214261183, 118579793,
#line 925
        286616361, 280798548, 310718683, 319045198, 194079365, 18689799, 100015201, 277439218, 72060471, 320691248, 57144785, 260410581, 145112975, 100233841, 197593225, 162841182,
#line 926
        175249219, 265450611, 149195069, 87079051, 63411038, 143878266, 97186232, 266508229, 193490923, 236623277, 37457674, 137862289, 103693329, 180321445, 169998644, 342063978,
#line 927
        42790742, 128854644, 265122865, 294683755, 248949728, 330124502, 296436346, 301960460, 40223781, 113269090, 127343215, 164307373, 339170729, 135831514, 195028667, 131528229,
#line 928
        297685328, 190893618, 201088934, 255645038, 117676973, 269871758, 283389171, 33349655, 188725057, 53472436, 187437384, 97353962, 70257049, 201961177, 306957824, 12257486,
#line 929
        121252504, 214565350, 235814077, 153739710, 136986708, 136429823, 85310266, 157073661, 197050358, 162415566, 155244905, 319356644, 315123588, 249579342, 317557341, 171752451,
#line 930
        309332678, 271449161, 219640458, 293420676, 109209729, 19882891, 214355467, 134607673, 181981537, 49209434, 310450195, 296623329, 124696094, 310053580, 67461826, 19636384,
#line 931
        221818700, 50475539, 18995984, 208864636, 291047776, 318922456, 251483095, 191977491, 44840967, 133268298, 101662748, 299982192, 272762890, 241757034, 23258995, 239379518,
#line 932
        145142435, 204243745, 37779629, 49979331, 135577535, 187993077, 40858960, 288180924, 67703797, 96365608, 257524943, 33303388, 129072991, 77747149, 283867501, 11930379,
#line 933
        46641512, 137858340, 296682569, 153407889, 259515711, 126174146, 198346294, 235455425, 244023416, 291596132, 316297415, 328710625, 80224578, 302632627, 113667569, 119113057,
#line 934
        312017817, 2699680, 108004786, 196303853, 334319350, 133319693, 327422655, 215939730, 97293139, 277699946, 162171273, 77273435, 316008252, 75151514, 32680821, 13466291,
#line 935
        256206912, 225832678, 245296564, 166344225, 230519898, 18887784, 108194240, 155075127, 74650975, 300719094, 74020064, 119463325, 298456636, 144707310, 252315645, 2757974,
#line 936
        321969537, 318219488, 203728303, 199667954, 339569618, 236437494, 68257532, 41674788, 79292517, 329595997, 47860047, 74221291, 133851496, 131423110, 134739242, 41769882,
#line 937
        125397753, 37421241, 99154118, 77345313, 75415599, 184611253, 283821969, 217425962, 340138445, 205360342, 138790530, 231381162, 177646695, 341124928, 49006892, 115050903,
#line 938
        328700132, 145997181, 305008536, 270860151, 315446483, 311962310, 37732254, 31766142, 314384689, 124829645, 37478454, 2002208, 167278182, 247209778, 85372494, 278387860,
#line 939
        339536290, 114992793, 310585351, 246747223, 161880752, 309863480, 145995082, 67504260, 96405640, 53758185, 80364252, 59762590, 61870224, 328402109, 123460961, 185357220,
#line 940
        210531620, 301407876, 330043666, 282401604, 176867483, 115053574, 316685038, 20214140, 75349137, 19519076, 63151532, 199071277, 179016942, 13021588, 321789792, 163648942,
#line 941
        139380103, 114565842, 330217875, 271319530, 129239990, 186057800, 258827287, 178929042, 82102774, 257249581, 177238145, 62402069, 160259722, 233013151, 315534334, 342784710,
#line 942
        77458610, 253683167, 261286212, 281360242, 296191980, 6850988, 251030736, 74731345, 265318802, 63899879, 311681497, 137131395, 3931149, 181665422, 51898522, 245605974,
#line 943
        128427927, 95354166, 166281164, 2434663, 286713155, 113257227, 112789726, 90764238, 44867204, 26890740, 298664607, 181169292, 120444705, 62783316, 66162809, 133187974,
#line 944
        131085619, 39270565, 70166946, 277526912, 1756312, 205015274, 210307520, 223955976, 295679311, 73435047, 218777227, 248504688, 191268148, 10674541, 113695358, 291536722,
#line 945
        198196536, 266946574, 121223151, 286290221, 28846473, 189515583, 205436167, 220060181, 17816194, 219660836, 218831760, 122930261, 90002096, 123760813, 89192098, 30551277,
#line 946
        208285091, 230068868, 113052860, 204703894, 323875798, 99019268, 41579225, 194457264, 64487982, 289332899, 148207072, 195897417, 311865514, 340092471, 219256369, 154766,
#line 947
        299759898, 311347621, 323312829, 63589683, 246540525, 151049736, 2185297, 179420091, 34750962, 84555619, 100438483, 120169396, 157907051, 225257403, 293722399, 111850253,
#line 948
        323856168, 338303783, 314840798, 190938467, 125867606, 234764184, 327427414, 142613978, 215585704, 261751388, 316751420, 121346748, 193921698, 138975926, 44295661, 343113050,
#line 949
        10670086, 262534597, 58896306, 100875887, 105441063, 338677572, 273548204, 304358246, 247450114, 126898411, 281611873, 65770419, 88358931, 108711560, 169816947, 276047518,
#line 950
        179623980, 8948915, 211487568, 135978710, 122356782, 61305919, 25101795, 291689257, 141349641, 198259466, 256737405, 116654989, 45647754, 180293767, 142965291, 182641848,
#line 951
        320298964, 104661562, 159853264, 63559596, 77470611, 155263833, 24371986, 4502110, 307150630, 142825689, 191055334, 272420854, 266596798, 310116768, 100031582, 330934661,
#line 952
        131329963, 205128768, 34434682, 264548538, 275820126, 58374622, 126868524, 247696662, 230430459, 247383707, 213976148, 4429934, 55811418, 182713031, 135206428, 78131304,
#line 953
        73905525, 122191796, 303115339, 249426444, 196133691, 50737499, 39423175, 38943576, 63789271, 15653280, 42256835, 76792639, 18041511, 28927295, 167872394, 132917641,
#line 954
        221464907, 306272254, 168295914, 311947582, 115002830, 173548221, 66297447, 38518479, 186039235, 166985453, 170012531, 110913328, 2521858, 164656555, 78715300, 137921241,
#line 955
        31451200, 69592338, 244799209, 30327278, 311383754, 324910770, 31364455, 227268411, 250460720, 69982039, 258447968, 48751303, 166388835, 160611885, 321899686, 248083879,
#line 956
        91906147, 70295745, 73849988, 252478588, 34713870, 338042480, 280941331, 10639985, 58539003, 256112056, 301421958, 251057581, 265894571, 25563194, 195929163, 142869361,
#line 957
        47864316, 339243405, 278587677, 209058399, 28896907, 235462631, 259232595, 244958163, 23735989, 146207513, 291668902, 343175816, 205222309, 282750786, 266854086, 311189979,
#line 958
        107993050, 55645002, 248439323, 110947244, 127537928, 20029480, 91971569, 91066679, 187746866, 177178431, 199502889, 212043310, 196042207, 211835072, 122477545, 18413892,
#line 959
        161679160, 35056566, 338821353, 276789509, 206322097, 18473387, 327976767, 80429437, 279397388, 68518274, 181023243, 237284827, 313969190, 15263438, 51894343, 9591303,
#line 960
        82627166, 239331506, 239476843, 289562517, 139382347, 242285354, 17292740, 188689316, 235469942, 117131734, 266735631, 326823227, 117612662, 76546657, 295122385, 12037548,
#line 961
        189504538, 95200070, 293038692, 31932380, 187259607, 73167190, 170755308, 218145696, 236213106, 108592503, 131352161, 60559929, 42411067, 280958175, 8836049, 297422828,
#line 962
        11573249, 91280673, 125611361, 161380632, 226344941, 134250929, 140995006, 98690051, 155765188, 164335593, 80031253, 199481563, 69867929, 39419746, 228795671, 19516918,
#line 963
        167375209, 89867706, 72825851, 242099982, 14848946, 42273808, 126259092, 304755136, 38613146, 122800946, 267082476, 167972636, 196062071, 254115855, 39817651, 309122741,
#line 964
        60457156, 250755360, 20601023, 243392916, 292858762, 180399588, 313217138, 29929697, 60449086, 283841728, 160244444, 241071188, 321755521, 108569899, 143560290, 272375957,
#line 965
        331455083, 14981285, 32934047, 262884057, 281379762, 227479236, 105879398, 272619394, 284712017, 190200546, 171093156, 34108414, 325985663, 199935697, 224245523, 144111576,
#line 966
        153321671, 286621872, 35462788, 214206730, 126269934, 65652966, 284070510, 6662486, 325197743, 38006257, 50224836, 124340354, 154428934, 7450140, 287185643, 33705971,
#line 967
        141469584, 272829155, 286510306, 246444258, 170097677, 319718232, 330523682, 140140378, 10364444, 160580247, 27785987, 34570969, 134913023, 14901862, 115728895, 78609524,
#line 968
        201919710, 13838972, 34092541, 198733493, 47482665, 251494232, 16132931, 38972371, 240063876, 117596199, 162911865, 262860640, 52977050, 77007819, 254322574, 230917793,
#line 969
        56907315, 187536671, 158797937, 155087075, 285406963, 223869101, 209999057, 86990953, 177275895, 51531987, 75323133, 136095883, 79458852, 284976460, 336503820, 248522042,
#line 970
        242449238, 205641666, 53426246, 117730324, 10035786, 176235396, 119572778, 246212637, 259359873, 106810129, 68701183, 223062848, 116203489, 128109911, 250671079, 143144811,
#line 971
        122946724, 97778773, 14445551, 298865154, 220279089, 290608179, 139788422, 238668396, 208042792, 131609015, 171512662, 87566759, 307515865, 299411860, 322981913, 275319558,
#line 972
        215000538, 298680114, 174004783, 223088200, 81687275, 147683374, 191654034, 69991164, 17002068, 330618625, 9609529, 80888816, 152614860, 150884999, 256151599, 329060317,
#line 973
        211562488, 80002392, 53630089, 14783054, 243458064, 201989694, 173499211, 84231350, 173331941, 304685475, 186888301, 246560832, 235755640, 112845732, 306533221, 45346390,
#line 974
        159933829, 204549617, 65072539, 250813869, 230816883, 281589467, 307369918, 341418978, 323140252, 73855972, 83202333, 37507398, 171449539, 2278644, 159569463, 171528205 } count:1024];
        J2OBJC_SET_INITIALIZED(OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial)
      }
    }

@end


#line 841
void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_init(OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial *self) {
  NSObject_init(self);
}


#line 841
OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial *new_OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial, init)
}


#line 841
OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial *create_OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial, init)
}


#line 977
void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_uniformWithIntArray_withByteArray_withInt_(IOSIntArray *a, IOSByteArray *seed, jint seedOffset) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_initialize();
  jint pos = 0;
  
#line 979
  jint i = 0;
  jint nbytes = JreIntDiv((OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q_LOG + 7), 8);
  jint nblocks = OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_GEN_A;
  jint val1;
  
#line 982
  jint val2;
  
#line 982
  jint val3;
  
#line 982
  jint val4;
  jint mask = (JreLShift32(1, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q_LOG)) - 1;
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_GEN_A];
  jshort dmsp = 0;
  
#line 988
  OrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(
#line 989
  buf, 0, OrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_GEN_A,
#line 990
  dmsp++,
#line 991
  seed, seedOffset, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_RANDOMBYTES);
  
#line 994
  while (i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N) {
    
#line 996
    if (pos > OrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE * nblocks - 4 * nbytes) {
      
#line 998
      nblocks = 1;
      
#line 1001
      OrgBouncycastlePqcCryptoQteslaHashUtils_customizableSecureHashAlgorithmKECCAK128SimpleWithByteArray_withInt_withInt_withShort_withByteArray_withInt_withInt_(
#line 1002
      buf, 0, OrgBouncycastlePqcCryptoQteslaHashUtils_SECURE_HASH_ALGORITHM_KECCAK_128_RATE * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_GEN_A,
#line 1003
      dmsp++,
#line 1004
      seed, seedOffset, OrgBouncycastlePqcCryptoQteslaQTesla1p_CRYPTO_RANDOMBYTES);
      
#line 1007
      pos = 0;
    }
    
#line 1010
    val1 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(buf, pos) & mask;
    pos += nbytes;
    val2 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(buf, pos) & mask;
    pos += nbytes;
    val3 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(buf, pos) & mask;
    pos += nbytes;
    val4 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(buf, pos) & mask;
    pos += nbytes;
    
#line 1019
    if (val1 < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q && i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N) {
      
#line 1021
      *IOSIntArray_GetRef(nil_chk(a), i++) = OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_reduceWithLong_((jlong) val1 * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_R2_INVN);
    }
    if (val2 < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q && i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N) {
      
#line 1025
      *IOSIntArray_GetRef(nil_chk(a), i++) = OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_reduceWithLong_((jlong) val2 * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_R2_INVN);
    }
    if (val3 < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q && i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N) {
      
#line 1029
      *IOSIntArray_GetRef(nil_chk(a), i++) = OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_reduceWithLong_((jlong) val3 * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_R2_INVN);
    }
    if (val4 < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q && i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_K * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N) {
      
#line 1033
      *IOSIntArray_GetRef(nil_chk(a), i++) = OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_reduceWithLong_((jlong) val4 * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_R2_INVN);
    }
  }
}


#line 1038
jint OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_reduceWithLong_(jlong a) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_initialize();
  jlong u;
  
#line 1042
  u = (a * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_QINV) & (jlong) 0xFFFFFFFFLL;
  u *= OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q;
  a += u;
  return (jint) (JreRShift64(a, 32));
}


#line 1048
void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_nttWithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *w) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_initialize();
  jint NumoProblems = JreRShift32(OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N, 1);
  
#line 1050
  jint jTwiddle = 0;
  
#line 1052
  for (; NumoProblems > 0; JreRShiftAssignInt(&NumoProblems, 1)) {
    
#line 1054
    jint jFirst;
    
#line 1054
    jint j = 0;
    for (jFirst = 0; jFirst < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; jFirst = j + NumoProblems) {
      
#line 1057
      jint W = IOSIntArray_Get(nil_chk(w), jTwiddle++);
      for (j = jFirst; j < jFirst + NumoProblems; j++) {
        
#line 1060
        jint a_j = IOSIntArray_Get(nil_chk(a), j);
        
#line 1060
        jint a_n = IOSIntArray_Get(a, j + NumoProblems);
        jint temp = OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_reduceWithLong_((jlong) W * a_n);
        *IOSIntArray_GetRef(a, j) = OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_correctWithInt_(a_j + temp - OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q);
        *IOSIntArray_GetRef(a, j + NumoProblems) = OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_correctWithInt_(a_j - temp);
      }
    }
  }
}


#line 1069
jint OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_barr_reduceWithInt_(jint a) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_initialize();
  jint u = (jint) (JreRShift64((jlong) a * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_BARR_MULT, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_BARR_DIV));
  return a - u * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q;
}

jint OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_barr_reduce64WithLong_(jlong a) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_initialize();
  jlong u = JreRShift64(a * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_BARR_MULT, OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_BARR_DIV);
  return (jint) (a - u * OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q);
}

jint OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_correctWithInt_(jint x) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_initialize();
  return x + ((JreRShift32(x, OrgBouncycastlePqcCryptoQteslaQTesla1p_RADIX32 - 1)) & OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q);
}

void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_nttinvWithIntArray_withInt_withIntArray_(IOSIntArray *a, jint aPos, IOSIntArray *w) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_initialize();
  jint NumoProblems = 1;
  
#line 1088
  jint jTwiddle = 0;
  for (NumoProblems = 1; NumoProblems < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; NumoProblems *= 2) {
    
#line 1091
    jint jFirst;
    
#line 1091
    jint j = 0;
    for (jFirst = 0; jFirst < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; jFirst = j + NumoProblems) {
      
#line 1094
      jint W = IOSIntArray_Get(nil_chk(w), jTwiddle++);
      for (j = jFirst; j < jFirst + NumoProblems; j++) {
        
#line 1097
        jint temp = IOSIntArray_Get(nil_chk(a), aPos + j);
        *IOSIntArray_GetRef(a, aPos + j) = OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_barr_reduceWithInt_(temp + IOSIntArray_Get(a, aPos + j + NumoProblems));
        *IOSIntArray_GetRef(a, aPos + j + NumoProblems) = OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_reduceWithLong_((jlong) W * (temp - IOSIntArray_Get(a, aPos + j + NumoProblems)));
      }
    }
  }
}


#line 1105
void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_nttWithIntArray_withIntArray_(IOSIntArray *x_ntt, IOSIntArray *x) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_initialize();
  
#line 1108
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; i++) {
    
#line 1110
    *IOSIntArray_GetRef(nil_chk(x_ntt), i) = IOSIntArray_Get(nil_chk(x), i);
  }
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_nttWithIntArray_withIntArray_(x_ntt, OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_zeta);
}


#line 1115
void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_pointwiseWithIntArray_withInt_withIntArray_withInt_withIntArray_(IOSIntArray *result, jint rpos, IOSIntArray *x, jint xpos, IOSIntArray *y) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_initialize();
  
#line 1118
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; i++) {
    
#line 1120
    *IOSIntArray_GetRef(nil_chk(result), i + rpos) = OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_reduceWithLong_((jlong) IOSIntArray_Get(nil_chk(x), i + xpos) * IOSIntArray_Get(nil_chk(y), i));
  }
}


#line 1124
void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_mulWithIntArray_withInt_withIntArray_withInt_withIntArray_(IOSIntArray *result, jint rpos, IOSIntArray *x, jint xpos, IOSIntArray *y) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_initialize();
  
#line 1127
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_pointwiseWithIntArray_withInt_withIntArray_withInt_withIntArray_(result, rpos, x, xpos, y);
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_nttinvWithIntArray_withInt_withIntArray_(result, rpos, OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_zetainv);
}


#line 1131
void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_addWithIntArray_withIntArray_withIntArray_(IOSIntArray *result, IOSIntArray *x, IOSIntArray *y) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_initialize();
  
#line 1134
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; i++) {
    
#line 1136
    *IOSIntArray_GetRef(nil_chk(result), i) = IOSIntArray_Get(nil_chk(x), i) + IOSIntArray_Get(nil_chk(y), i);
  }
}


#line 1140
void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_add_correctWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(IOSIntArray *result, jint rpos, IOSIntArray *x, jint xpos, IOSIntArray *y, jint ypos) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_initialize();
  
#line 1143
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; i++) {
    
#line 1145
    jint ri = OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_correctWithInt_(IOSIntArray_Get(nil_chk(x), xpos + i) + IOSIntArray_Get(nil_chk(y), ypos + i));
    *IOSIntArray_GetRef(nil_chk(result), rpos + i) = OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_correctWithInt_(ri - OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_Q);
  }
}


#line 1150
void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_subWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(IOSIntArray *result, jint rpos, IOSIntArray *x, jint xpos, IOSIntArray *y, jint ypos) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_initialize();
  
#line 1153
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; i++) {
    
#line 1155
    *IOSIntArray_GetRef(nil_chk(result), rpos + i) = IOSIntArray_Get(nil_chk(x), xpos + i) - IOSIntArray_Get(nil_chk(y), ypos + i);
  }
}


#line 1159
void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_poly_sub_reduceWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(IOSIntArray *result, jint rpos, IOSIntArray *x, jint xpos, IOSIntArray *y, jint ypos) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_initialize();
  
#line 1162
  for (jint i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; i++) {
    
#line 1164
    *IOSIntArray_GetRef(nil_chk(result), rpos + i) = OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_barr_reduceWithInt_(IOSIntArray_Get(nil_chk(x), xpos + i) - IOSIntArray_Get(nil_chk(y), ypos + i));
  }
}


#line 1168
void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_sparse_mul8WithIntArray_withInt_withByteArray_withInt_withIntArray_withShortArray_(IOSIntArray *prod, jint ppos, IOSByteArray *s, jint spos, IOSIntArray *pos_list, IOSShortArray *sign_list) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_initialize();
  
#line 1171
  jint i;
  
#line 1171
  jint j;
  
#line 1171
  jint pos;
  
#line 1173
  for (i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; i++) {
    
#line 1175
    *IOSIntArray_GetRef(nil_chk(prod), ppos + i) = 0;
  }
  
#line 1178
  for (i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_H; i++) {
    
#line 1180
    pos = IOSIntArray_Get(nil_chk(pos_list), i);
    for (j = 0; j < pos; j++) {
      
#line 1183
      *IOSIntArray_GetRef(nil_chk(prod), ppos + j) = IOSIntArray_Get(prod, ppos + j) - IOSShortArray_Get(nil_chk(sign_list), i) * IOSByteArray_Get(nil_chk(s), spos + j + OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N - pos);
    }
    for (j = pos; j < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; j++) {
      
#line 1187
      *IOSIntArray_GetRef(nil_chk(prod), ppos + j) = IOSIntArray_Get(prod, ppos + j) + IOSShortArray_Get(nil_chk(sign_list), i) * IOSByteArray_Get(nil_chk(s), spos + j - pos);
    }
  }
}


#line 1192
void OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_sparse_mul32WithIntArray_withInt_withIntArray_withInt_withIntArray_withShortArray_(IOSIntArray *prod, jint ppos, IOSIntArray *pk, jint pkPos, IOSIntArray *pos_list, IOSShortArray *sign_list) {
  OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_initialize();
  jint i;
  
#line 1194
  jint j;
  
#line 1194
  jint pos;
  IOSLongArray *temp = [IOSLongArray newArrayWithLength:OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N];
  
#line 1197
  for (i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_H; i++) {
    
#line 1199
    pos = IOSIntArray_Get(nil_chk(pos_list), i);
    for (j = 0; j < pos; j++) {
      
#line 1202
      *IOSLongArray_GetRef(temp, j) = IOSLongArray_Get(temp, j) - IOSShortArray_Get(nil_chk(sign_list), i) * IOSIntArray_Get(nil_chk(pk), pkPos + j + OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N - pos);
    }
    for (j = pos; j < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; j++) {
      
#line 1206
      *IOSLongArray_GetRef(temp, j) = IOSLongArray_Get(temp, j) + IOSShortArray_Get(nil_chk(sign_list), i) * IOSIntArray_Get(nil_chk(pk), pkPos + j - pos);
    }
  }
  
#line 1210
  for (i = 0; i < OrgBouncycastlePqcCryptoQteslaQTesla1p_PARAM_N; i++) {
    
#line 1212
    *IOSIntArray_GetRef(nil_chk(prod), ppos + i) = OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial_barr_reduce64WithLong_(IOSLongArray_Get(temp, i));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoQteslaQTesla1p_QTesla1PPolynomial)
