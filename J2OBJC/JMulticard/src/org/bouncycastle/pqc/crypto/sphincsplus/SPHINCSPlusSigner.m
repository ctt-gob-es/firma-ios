//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusSigner.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/params/ParametersWithRandom.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/ADRS.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/Fors.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/HT.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/IndexedDigest.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/PK.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SIG.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SIG_FORS.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SK.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusEngine.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusSigner.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusSigner must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusSigner () {
 @public
  OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPrivateKeyParameters *privKey_;
  OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters *pubKey_;
  JavaSecuritySecureRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusSigner, privKey_, OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusSigner, pubKey_, OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusSigner, random_, JavaSecuritySecureRandom *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusSigner.java"


#line 20
@implementation OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusSigner

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 31
- (instancetype)init {
  OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusSigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 35
- (void)init__WithBoolean:(jboolean)forSigning
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)param {
  
#line 38
  if (forSigning) {
    
#line 40
    if ([param isKindOfClass:[OrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      
#line 42
      privKey_ = (OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPrivateKeyParameters *) cast_chk([((OrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(((OrgBouncycastleCryptoParamsParametersWithRandom *) param))) getParameters], [OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPrivateKeyParameters class]);
      random_ = [((OrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(((OrgBouncycastleCryptoParamsParametersWithRandom *) param))) getRandom];
    }
    else {
      
#line 47
      privKey_ = (OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPrivateKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPrivateKeyParameters class]);
    }
  }
  else {
    
#line 52
    pubKey_ = (OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters class]);
  }
}


#line 56
- (IOSByteArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  
#line 63
  OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *engine = [((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters *) nil_chk([((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPrivateKeyParameters *) nil_chk(privKey_)) getParameters])) getEngine];
  
#line 66
  IOSByteArray *optRand = [IOSByteArray newArrayWithLength:((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine))->N_];
  if (random_ != nil) {
    
#line 69
    [random_ nextBytesWithByteArray:optRand];
  }
  else {
    
#line 73
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(((OrgBouncycastlePqcCryptoSphincsplusPK *) nil_chk(((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPrivateKeyParameters *) nil_chk(privKey_))->pk_))->seed_, 0, optRand, 0, optRand->size_);
  }
  
#line 76
  OrgBouncycastlePqcCryptoSphincsplusFors *fors = new_OrgBouncycastlePqcCryptoSphincsplusFors_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine_(engine);
  IOSByteArray *R = [engine PRF_msgWithByteArray:((OrgBouncycastlePqcCryptoSphincsplusSK *) nil_chk(((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPrivateKeyParameters *) nil_chk(privKey_))->sk_))->prf_ withByteArray:optRand withByteArray:message];
  
#line 79
  OrgBouncycastlePqcCryptoSphincsplusIndexedDigest *idxDigest = [engine H_msgWithByteArray:R withByteArray:((OrgBouncycastlePqcCryptoSphincsplusPK *) nil_chk(((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPrivateKeyParameters *) nil_chk(privKey_))->pk_))->seed_ withByteArray:privKey_->pk_->root_ withByteArray:message];
  IOSByteArray *mHash = ((OrgBouncycastlePqcCryptoSphincsplusIndexedDigest *) nil_chk(idxDigest))->digest_;
  jlong idx_tree = idxDigest->idx_tree_;
  jint idx_leaf = idxDigest->idx_leaf_;
  
#line 84
  OrgBouncycastlePqcCryptoSphincsplusADRS *adrs = new_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivate();
  [adrs setTypeWithInt:OrgBouncycastlePqcCryptoSphincsplusADRS_FORS_TREE];
  [adrs setTreeAddressWithLong:idx_tree];
  [adrs setKeyPairAddressWithInt:idx_leaf];
  IOSObjectArray *sig_fors = [fors signWithByteArray:mHash withByteArray:((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPrivateKeyParameters *) nil_chk(privKey_))->sk_->seed_ withByteArray:privKey_->pk_->seed_ withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs];
  
#line 90
  IOSByteArray *PK_FORS = [fors pkFromSigWithOrgBouncycastlePqcCryptoSphincsplusSIG_FORSArray:sig_fors withByteArray:mHash withByteArray:((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPrivateKeyParameters *) nil_chk(privKey_))->pk_->seed_ withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs];
  
#line 93
  OrgBouncycastlePqcCryptoSphincsplusADRS *treeAdrs = new_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivate();
  [treeAdrs setTypeWithInt:OrgBouncycastlePqcCryptoSphincsplusADRS_TREE];
  
#line 96
  OrgBouncycastlePqcCryptoSphincsplusHT *ht = new_OrgBouncycastlePqcCryptoSphincsplusHT_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine_withByteArray_withByteArray_(engine, [((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPrivateKeyParameters *) nil_chk(privKey_)) getSeed], [((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPrivateKeyParameters *) nil_chk(privKey_)) getPublicSeed]);
  IOSByteArray *SIG_HT = [ht signWithByteArray:PK_FORS withLong:idx_tree withInt:idx_leaf];
  IOSObjectArray *sigComponents = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(sig_fors))->size_ + 2 type:IOSClass_byteArray(1)];
  (void) IOSObjectArray_Set(sigComponents, 0, R);
  
#line 101
  for (jint i = 0; i != sig_fors->size_; i++) {
    
#line 103
    (void) IOSObjectArray_Set(sigComponents, 1 + i, OrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_(((OrgBouncycastlePqcCryptoSphincsplusSIG_FORS *) nil_chk(IOSObjectArray_Get(sig_fors, i)))->sk_, OrgBouncycastleUtilArrays_concatenateWithByteArray2_(((OrgBouncycastlePqcCryptoSphincsplusSIG_FORS *) nil_chk(IOSObjectArray_Get(sig_fors, i)))->authPath_)));
  }
  (void) IOSObjectArray_Set(sigComponents, sigComponents->size_ - 1, SIG_HT);
  
#line 107
  return OrgBouncycastleUtilArrays_concatenateWithByteArray2_(sigComponents);
}


#line 110
- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                           withByteArray:(IOSByteArray *)signature {
  
#line 117
  OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *engine = [((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters *) nil_chk([((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters *) nil_chk(pubKey_)) getParameters])) getEngine];
  
#line 119
  OrgBouncycastlePqcCryptoSphincsplusADRS *adrs = new_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivate();
  OrgBouncycastlePqcCryptoSphincsplusSIG *sig = new_OrgBouncycastlePqcCryptoSphincsplusSIG_initPackagePrivateWithInt_withInt_withInt_withInt_withInt_withInt_withByteArray_(((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine))->N_, engine->K_, engine->A_, engine->D_, engine->H_PRIME_, engine->WOTS_LEN_, signature);
  
#line 122
  IOSByteArray *R = [sig getR];
  IOSObjectArray *sig_fors = [sig getSIG_FORS];
  IOSObjectArray *SIG_HT = [sig getSIG_HT];
  
#line 127
  OrgBouncycastlePqcCryptoSphincsplusIndexedDigest *idxDigest = [engine H_msgWithByteArray:R withByteArray:[((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters *) nil_chk(pubKey_)) getSeed] withByteArray:[((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters *) nil_chk(pubKey_)) getRoot] withByteArray:message];
  IOSByteArray *mHash = ((OrgBouncycastlePqcCryptoSphincsplusIndexedDigest *) nil_chk(idxDigest))->digest_;
  jlong idx_tree = idxDigest->idx_tree_;
  jint idx_leaf = idxDigest->idx_leaf_;
  
#line 133
  [adrs setLayerAddressWithInt:0];
  [adrs setTreeAddressWithLong:idx_tree];
  [adrs setTypeWithInt:OrgBouncycastlePqcCryptoSphincsplusADRS_FORS_TREE];
  [adrs setKeyPairAddressWithInt:idx_leaf];
  IOSByteArray *PK_FORS = [new_OrgBouncycastlePqcCryptoSphincsplusFors_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine_(engine) pkFromSigWithOrgBouncycastlePqcCryptoSphincsplusSIG_FORSArray:sig_fors withByteArray:mHash withByteArray:[((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters *) nil_chk(pubKey_)) getSeed] withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs];
  
#line 139
  [adrs setTypeWithInt:OrgBouncycastlePqcCryptoSphincsplusADRS_TREE];
  OrgBouncycastlePqcCryptoSphincsplusHT *ht = new_OrgBouncycastlePqcCryptoSphincsplusHT_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine_withByteArray_withByteArray_(engine, nil, [((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters *) nil_chk(pubKey_)) getSeed]);
  return [ht verifyWithByteArray:PK_FORS withOrgBouncycastlePqcCryptoSphincsplusSIG_XMSSArray:SIG_HT withByteArray:[((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters *) nil_chk(pubKey_)) getSeed] withLong:idx_tree withInt:idx_leaf withByteArray:[((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters *) nil_chk(pubKey_)) getRoot]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(generateSignatureWithByteArray:);
  methods[3].selector = @selector(verifySignatureWithByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "privKey_", "LOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pubKey_", "LOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgBouncycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[B[B" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusSigner = { "SPHINCSPlusSigner", "org.bouncycastle.pqc.crypto.sphincsplus", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusSigner;
}

@end


#line 31
void OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusSigner_init(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusSigner *self) {
  NSObject_init(self);
}


#line 31
OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusSigner *new_OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusSigner_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusSigner, init)
}


#line 31
OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusSigner *create_OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusSigner_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusSigner, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusSigner)
