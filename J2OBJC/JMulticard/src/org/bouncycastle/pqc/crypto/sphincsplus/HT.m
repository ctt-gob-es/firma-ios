//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincsplus/HT.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/LinkedList.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/ADRS.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/HT.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/NodeEntry.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SIG_XMSS.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusEngine.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/WotsPlus.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/sphincsplus/HT must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoSphincsplusHT () {
 @public
  IOSByteArray *skSeed_;
  IOSByteArray *pkSeed_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsplusHT, skSeed_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsplusHT, pkSeed_, IOSByteArray *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincsplus/HT.java"


#line 7
@implementation OrgBouncycastlePqcCryptoSphincsplusHT


#line 16
- (instancetype)initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine:(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *)engine
                                                                             withByteArray:(IOSByteArray *)skSeed
                                                                             withByteArray:(IOSByteArray *)pkSeed {
  OrgBouncycastlePqcCryptoSphincsplusHT_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine_withByteArray_withByteArray_(self, engine, skSeed, pkSeed);
  return self;
}


#line 38
- (IOSByteArray *)signWithByteArray:(IOSByteArray *)M
                           withLong:(jlong)idx_tree
                            withInt:(jint)idx_leaf {
  OrgBouncycastlePqcCryptoSphincsplusADRS *adrs = new_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivate();
  
#line 43
  [adrs setLayerAddressWithInt:0];
  [adrs setTreeAddressWithLong:idx_tree];
  OrgBouncycastlePqcCryptoSphincsplusSIG_XMSS *SIG_tmp = [self xmss_signWithByteArray:M withByteArray:skSeed_ withInt:idx_leaf withByteArray:pkSeed_ withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs];
  IOSObjectArray *SIG_HT = [IOSObjectArray newArrayWithLength:((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_))->D_ type:OrgBouncycastlePqcCryptoSphincsplusSIG_XMSS_class_()];
  (void) IOSObjectArray_Set(SIG_HT, 0, SIG_tmp);
  
#line 49
  [adrs setLayerAddressWithInt:0];
  [adrs setTreeAddressWithLong:idx_tree];
  
#line 52
  IOSByteArray *root = [self xmss_pkFromSigWithInt:idx_leaf withOrgBouncycastlePqcCryptoSphincsplusSIG_XMSS:SIG_tmp withByteArray:M withByteArray:pkSeed_ withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs];
  
#line 54
  for (jint j = 1; j < ((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_))->D_; j++) {
    
#line 56
    idx_leaf = (jint) (idx_tree & ((JreLShift32(1, engine_->H_PRIME_)) - 1));
    JreURShiftAssignLong(&idx_tree, engine_->H_PRIME_);
    [adrs setLayerAddressWithInt:j];
    [adrs setTreeAddressWithLong:idx_tree];
    SIG_tmp = [self xmss_signWithByteArray:root withByteArray:skSeed_ withInt:idx_leaf withByteArray:pkSeed_ withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs];
    (void) IOSObjectArray_Set(SIG_HT, j, SIG_tmp);
    if (j < ((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_))->D_ - 1) {
      
#line 64
      root = [self xmss_pkFromSigWithInt:idx_leaf withOrgBouncycastlePqcCryptoSphincsplusSIG_XMSS:SIG_tmp withByteArray:root withByteArray:pkSeed_ withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs];
    }
  }
  
#line 68
  IOSObjectArray *totSigs = [IOSObjectArray newArrayWithLength:SIG_HT->size_ type:IOSClass_byteArray(1)];
  for (jint i = 0; i != totSigs->size_; i++) {
    
#line 71
    (void) IOSObjectArray_Set(totSigs, i, OrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_(((OrgBouncycastlePqcCryptoSphincsplusSIG_XMSS *) nil_chk(IOSObjectArray_Get(SIG_HT, i)))->sig_, OrgBouncycastleUtilArrays_concatenateWithByteArray2_(((OrgBouncycastlePqcCryptoSphincsplusSIG_XMSS *) nil_chk(IOSObjectArray_Get(SIG_HT, i)))->auth_)));
  }
  
#line 74
  return OrgBouncycastleUtilArrays_concatenateWithByteArray2_(totSigs);
}


#line 77
- (IOSByteArray *)xmss_PKgenWithByteArray:(IOSByteArray *)skSeed
                            withByteArray:(IOSByteArray *)pkSeed
withOrgBouncycastlePqcCryptoSphincsplusADRS:(OrgBouncycastlePqcCryptoSphincsplusADRS *)adrs {
  
#line 79
  return [self treehashWithByteArray:skSeed withInt:0 withInt:((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_))->H_PRIME_ withByteArray:pkSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs];
}


#line 84
- (IOSByteArray *)xmss_pkFromSigWithInt:(jint)idx
withOrgBouncycastlePqcCryptoSphincsplusSIG_XMSS:(OrgBouncycastlePqcCryptoSphincsplusSIG_XMSS *)sig_xmss
                          withByteArray:(IOSByteArray *)M
                          withByteArray:(IOSByteArray *)pkSeed
withOrgBouncycastlePqcCryptoSphincsplusADRS:(OrgBouncycastlePqcCryptoSphincsplusADRS *)paramAdrs {
  
#line 86
  OrgBouncycastlePqcCryptoSphincsplusADRS *adrs = new_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusADRS_(paramAdrs);
  
#line 89
  [adrs setTypeWithInt:OrgBouncycastlePqcCryptoSphincsplusADRS_WOTS_HASH];
  [adrs setKeyPairAddressWithInt:idx];
  IOSByteArray *sig = [((OrgBouncycastlePqcCryptoSphincsplusSIG_XMSS *) nil_chk(sig_xmss)) getWOTSSig];
  IOSObjectArray *AUTH = [sig_xmss getXMSSAUTH];
  
#line 94
  IOSByteArray *node0 = [((OrgBouncycastlePqcCryptoSphincsplusWotsPlus *) nil_chk(wots_)) pkFromSigWithByteArray:sig withByteArray:M withByteArray:pkSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs];
  IOSByteArray *node1 = nil;
  
#line 98
  [adrs setTypeWithInt:OrgBouncycastlePqcCryptoSphincsplusADRS_TREE];
  [adrs setTreeIndexWithInt:idx];
  for (jint k = 0; k < ((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_))->H_PRIME_; k++) {
    
#line 102
    [adrs setTreeHeightWithInt:k + 1];
    if (JreIntMod(JreIntDiv(idx, (JreLShift32(1, k))), 2) == 0) {
      
#line 105
      [adrs setTreeIndexWithInt:JreIntDiv([adrs getTreeIndex], 2)];
      node1 = [((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_)) HWithByteArray:pkSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs withByteArray:node0 withByteArray:IOSObjectArray_Get(nil_chk(AUTH), k)];
    }
    else {
      
#line 110
      [adrs setTreeIndexWithInt:JreIntDiv(([adrs getTreeIndex] - 1), 2)];
      node1 = [((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_)) HWithByteArray:pkSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs withByteArray:IOSObjectArray_Get(nil_chk(AUTH), k) withByteArray:node0];
    }
    node0 = node1;
  }
  return node0;
}


#line 121
- (OrgBouncycastlePqcCryptoSphincsplusSIG_XMSS *)xmss_signWithByteArray:(IOSByteArray *)M
                                                          withByteArray:(IOSByteArray *)skSeed
                                                                withInt:(jint)idx
                                                          withByteArray:(IOSByteArray *)pkSeed
                            withOrgBouncycastlePqcCryptoSphincsplusADRS:(OrgBouncycastlePqcCryptoSphincsplusADRS *)adrs {
  
#line 123
  IOSObjectArray *AUTH = [IOSObjectArray newArrayWithLength:((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_))->H_PRIME_ type:IOSClass_byteArray(1)];
  
#line 126
  for (jint j = 0; j < ((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_))->H_PRIME_; j++) {
    
#line 128
    jint k = JreIntDiv(idx, (JreLShift32(1, j))) ^ 1;
    (void) IOSObjectArray_Set(AUTH, j, [self treehashWithByteArray:skSeed withInt:k * (JreLShift32(1, j)) withInt:j withByteArray:pkSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs]);
  }
  adrs = new_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusADRS_(adrs);
  [adrs setTypeWithInt:OrgBouncycastlePqcCryptoSphincsplusADRS_WOTS_HASH];
  [adrs setKeyPairAddressWithInt:idx];
  
#line 135
  IOSByteArray *sig = [((OrgBouncycastlePqcCryptoSphincsplusWotsPlus *) nil_chk(wots_)) signWithByteArray:M withByteArray:skSeed withByteArray:pkSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs];
  return new_OrgBouncycastlePqcCryptoSphincsplusSIG_XMSS_initPackagePrivateWithByteArray_withByteArray2_(sig, AUTH);
}


#line 143
- (IOSByteArray *)treehashWithByteArray:(IOSByteArray *)skSeed
                                withInt:(jint)s
                                withInt:(jint)z
                          withByteArray:(IOSByteArray *)pkSeed
withOrgBouncycastlePqcCryptoSphincsplusADRS:(OrgBouncycastlePqcCryptoSphincsplusADRS *)adrsParam {
  
#line 145
  OrgBouncycastlePqcCryptoSphincsplusADRS *adrs = new_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusADRS_(adrsParam);
  
#line 147
  JavaUtilLinkedList *stack = new_JavaUtilLinkedList_init();
  
#line 149
  if (JreIntMod(s, (JreLShift32(1, z))) != 0) {
    
#line 151
    return nil;
  }
  
#line 154
  for (jint idx = 0; idx < JreLShift32(1, z); idx++) {
    
#line 156
    [adrs setTypeWithInt:OrgBouncycastlePqcCryptoSphincsplusADRS_WOTS_HASH];
    [adrs setKeyPairAddressWithInt:s + idx];
    IOSByteArray *node = [((OrgBouncycastlePqcCryptoSphincsplusWotsPlus *) nil_chk(wots_)) pkGenWithByteArray:skSeed withByteArray:pkSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs];
    
#line 160
    [adrs setTypeWithInt:OrgBouncycastlePqcCryptoSphincsplusADRS_TREE];
    [adrs setTreeHeightWithInt:1];
    [adrs setTreeIndexWithInt:s + idx];
    
#line 165
    while (![stack isEmpty] &&
#line 166
    ((OrgBouncycastlePqcCryptoSphincsplusNodeEntry *) nil_chk([stack getWithInt:0]))->nodeHeight_ == [adrs getTreeHeight]) {
      
#line 168
      [adrs setTreeIndexWithInt:JreIntDiv(([adrs getTreeIndex] - 1), 2)];
      OrgBouncycastlePqcCryptoSphincsplusNodeEntry *current = [stack removeWithInt:0];
      
#line 171
      node = [((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_)) HWithByteArray:pkSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs withByteArray:((OrgBouncycastlePqcCryptoSphincsplusNodeEntry *) nil_chk(current))->nodeValue_ withByteArray:node];
      
#line 173
      [adrs setTreeHeightWithInt:[adrs getTreeHeight] + 1];
    }
    
#line 176
    [stack addWithInt:0 withId:new_OrgBouncycastlePqcCryptoSphincsplusNodeEntry_initPackagePrivateWithByteArray_withInt_(node, [adrs getTreeHeight])];
  }
  
#line 179
  return ((OrgBouncycastlePqcCryptoSphincsplusNodeEntry *) nil_chk([stack getWithInt:0]))->nodeValue_;
}


#line 185
- (jboolean)verifyWithByteArray:(IOSByteArray *)M
withOrgBouncycastlePqcCryptoSphincsplusSIG_XMSSArray:(IOSObjectArray *)sig_ht
                  withByteArray:(IOSByteArray *)pkSeed
                       withLong:(jlong)idx_tree
                        withInt:(jint)idx_leaf
                  withByteArray:(IOSByteArray *)PK_HT {
  
#line 188
  OrgBouncycastlePqcCryptoSphincsplusADRS *adrs = new_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivate();
  
#line 190
  OrgBouncycastlePqcCryptoSphincsplusSIG_XMSS *SIG_tmp = IOSObjectArray_Get(nil_chk(sig_ht), 0);
  [adrs setLayerAddressWithInt:0];
  [adrs setTreeAddressWithLong:idx_tree];
  IOSByteArray *node = [self xmss_pkFromSigWithInt:idx_leaf withOrgBouncycastlePqcCryptoSphincsplusSIG_XMSS:SIG_tmp withByteArray:M withByteArray:pkSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs];
  for (jint j = 1; j < ((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_))->D_; j++) {
    
#line 196
    idx_leaf = (jint) (idx_tree & ((JreLShift32(1, engine_->H_PRIME_)) - 1));
    JreURShiftAssignLong(&idx_tree, engine_->H_PRIME_);
    SIG_tmp = IOSObjectArray_Get(sig_ht, j);
    [adrs setLayerAddressWithInt:j];
    [adrs setTreeAddressWithLong:idx_tree];
    node = [self xmss_pkFromSigWithInt:idx_leaf withOrgBouncycastlePqcCryptoSphincsplusSIG_XMSS:SIG_tmp withByteArray:node withByteArray:pkSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs];
  }
  return OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(PK_HT, node);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoSphincsplusSIG_XMSS;", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine:withByteArray:withByteArray:);
  methods[1].selector = @selector(signWithByteArray:withLong:withInt:);
  methods[2].selector = @selector(xmss_PKgenWithByteArray:withByteArray:withOrgBouncycastlePqcCryptoSphincsplusADRS:);
  methods[3].selector = @selector(xmss_pkFromSigWithInt:withOrgBouncycastlePqcCryptoSphincsplusSIG_XMSS:withByteArray:withByteArray:withOrgBouncycastlePqcCryptoSphincsplusADRS:);
  methods[4].selector = @selector(xmss_signWithByteArray:withByteArray:withInt:withByteArray:withOrgBouncycastlePqcCryptoSphincsplusADRS:);
  methods[5].selector = @selector(treehashWithByteArray:withInt:withInt:withByteArray:withOrgBouncycastlePqcCryptoSphincsplusADRS:);
  methods[6].selector = @selector(verifyWithByteArray:withOrgBouncycastlePqcCryptoSphincsplusSIG_XMSSArray:withByteArray:withLong:withInt:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "skSeed_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pkSeed_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "engine_", "LOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "wots_", "LOrgBouncycastlePqcCryptoSphincsplusWotsPlus;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "htPubKey_", "[B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine;[B[B", "sign", "[BJI", "xmss_PKgen", "[B[BLOrgBouncycastlePqcCryptoSphincsplusADRS;", "xmss_pkFromSig", "ILOrgBouncycastlePqcCryptoSphincsplusSIG_XMSS;[B[BLOrgBouncycastlePqcCryptoSphincsplusADRS;", "xmss_sign", "[B[BI[BLOrgBouncycastlePqcCryptoSphincsplusADRS;", "treehash", "[BII[BLOrgBouncycastlePqcCryptoSphincsplusADRS;", "verify", "[B[LOrgBouncycastlePqcCryptoSphincsplusSIG_XMSS;[BJI[B" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSphincsplusHT = { "HT", "org.bouncycastle.pqc.crypto.sphincsplus", ptrTable, methods, fields, 7, 0x0, 7, 5, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSphincsplusHT;
}

@end


#line 16
void OrgBouncycastlePqcCryptoSphincsplusHT_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoSphincsplusHT *self, OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *engine, IOSByteArray *skSeed, IOSByteArray *pkSeed) {
  NSObject_init(self);
  self->skSeed_ = skSeed;
  self->pkSeed_ = pkSeed;
  
#line 21
  self->engine_ = engine;
  self->wots_ = new_OrgBouncycastlePqcCryptoSphincsplusWotsPlus_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine_(engine);
  
#line 24
  OrgBouncycastlePqcCryptoSphincsplusADRS *adrs = new_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivate();
  [adrs setLayerAddressWithInt:((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine))->D_ - 1];
  [adrs setTreeAddressWithLong:0];
  
#line 28
  if (skSeed != nil) {
    
#line 30
    self->htPubKey_ = [self xmss_PKgenWithByteArray:skSeed withByteArray:pkSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs];
  }
  else {
    
#line 34
    self->htPubKey_ = nil;
  }
}


#line 16
OrgBouncycastlePqcCryptoSphincsplusHT *new_OrgBouncycastlePqcCryptoSphincsplusHT_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *engine, IOSByteArray *skSeed, IOSByteArray *pkSeed) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsplusHT, initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine_withByteArray_withByteArray_, engine, skSeed, pkSeed)
}


#line 16
OrgBouncycastlePqcCryptoSphincsplusHT *create_OrgBouncycastlePqcCryptoSphincsplusHT_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *engine, IOSByteArray *skSeed, IOSByteArray *pkSeed) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsplusHT, initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine_withByteArray_withByteArray_, engine, skSeed, pkSeed)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSphincsplusHT)
