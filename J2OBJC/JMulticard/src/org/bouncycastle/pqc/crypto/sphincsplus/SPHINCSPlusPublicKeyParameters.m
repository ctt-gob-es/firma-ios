//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusPublicKeyParameters.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/PK.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusEngine.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusPublicKeyParameters.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/Pack.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusPublicKeyParameters must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters () {
 @public
  OrgBouncycastlePqcCryptoSphincsplusPK *pk_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters, pk_, OrgBouncycastlePqcCryptoSphincsplusPK *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusPublicKeyParameters.java"


#line 6
@implementation OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters


#line 11
- (instancetype)initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters:(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters *)parameters
                                                                   withByteArray:(IOSByteArray *)pkEncoded {
  OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters_initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_withByteArray_(self, parameters, pkEncoded);
  return self;
}


#line 22
- (instancetype)initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters:(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters *)parameters
                                       withOrgBouncycastlePqcCryptoSphincsplusPK:(OrgBouncycastlePqcCryptoSphincsplusPK *)pk {
  OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters_initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_withOrgBouncycastlePqcCryptoSphincsplusPK_(self, parameters, pk);
  return self;
}

- (IOSByteArray *)getSeed {
  
#line 30
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(((OrgBouncycastlePqcCryptoSphincsplusPK *) nil_chk(pk_))->seed_);
}


#line 33
- (IOSByteArray *)getRoot {
  
#line 35
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(((OrgBouncycastlePqcCryptoSphincsplusPK *) nil_chk(pk_))->root_);
}


#line 38
- (IOSByteArray *)getEncoded {
  
#line 40
  return OrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_(OrgBouncycastleUtilPack_intToBigEndianWithInt_([((JavaLangInteger *) nil_chk(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_getIDWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_([self getParameters]))) intValue]), ((OrgBouncycastlePqcCryptoSphincsplusPK *) nil_chk(pk_))->seed_, pk_->root_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters:withByteArray:);
  methods[1].selector = @selector(initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters:withOrgBouncycastlePqcCryptoSphincsplusPK:);
  methods[2].selector = @selector(getSeed);
  methods[3].selector = @selector(getRoot);
  methods[4].selector = @selector(getEncoded);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pk_", "LOrgBouncycastlePqcCryptoSphincsplusPK;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters;[B", "LOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters;LOrgBouncycastlePqcCryptoSphincsplusPK;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters = { "SPHINCSPlusPublicKeyParameters", "org.bouncycastle.pqc.crypto.sphincsplus", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters;
}

@end


#line 11
void OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters_initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_withByteArray_(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters *self, OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters *parameters, IOSByteArray *pkEncoded) {
  OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyParameters_initWithBoolean_withOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_(self,
#line 13
  false, parameters);
  jint n = ((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk([((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters *) nil_chk(parameters)) getEngine]))->N_;
  if (((IOSByteArray *) nil_chk(pkEncoded))->size_ != 2 * n) {
    
#line 17
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"public key encoding does not match parameters");
  }
  self->pk_ = new_OrgBouncycastlePqcCryptoSphincsplusPK_initPackagePrivateWithByteArray_withByteArray_(OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(pkEncoded, 0, n), OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(pkEncoded, n, 2 * n));
}


#line 11
OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters *new_OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters_initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_withByteArray_(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters *parameters, IOSByteArray *pkEncoded) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters, initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_withByteArray_, parameters, pkEncoded)
}


#line 11
OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters *create_OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters_initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_withByteArray_(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters *parameters, IOSByteArray *pkEncoded) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters, initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_withByteArray_, parameters, pkEncoded)
}


#line 22
void OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters_initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_withOrgBouncycastlePqcCryptoSphincsplusPK_(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters *self, OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters *parameters, OrgBouncycastlePqcCryptoSphincsplusPK *pk) {
  OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyParameters_initWithBoolean_withOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_(self,
#line 24
  false, parameters);
  self->pk_ = pk;
}


#line 22
OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters *new_OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters_initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_withOrgBouncycastlePqcCryptoSphincsplusPK_(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters *parameters, OrgBouncycastlePqcCryptoSphincsplusPK *pk) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters, initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_withOrgBouncycastlePqcCryptoSphincsplusPK_, parameters, pk)
}


#line 22
OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters *create_OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters_initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_withOrgBouncycastlePqcCryptoSphincsplusPK_(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters *parameters, OrgBouncycastlePqcCryptoSphincsplusPK *pk) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters, initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_withOrgBouncycastlePqcCryptoSphincsplusPK_, parameters, pk)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters)
