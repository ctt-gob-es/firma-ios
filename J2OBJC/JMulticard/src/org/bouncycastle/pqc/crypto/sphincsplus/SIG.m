//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincsplus/SIG.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SIG.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SIG_FORS.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SIG_XMSS.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/sphincsplus/SIG must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoSphincsplusSIG () {
 @public
  IOSByteArray *r_;
  IOSObjectArray *sig_fors_;
  IOSObjectArray *sig_ht_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsplusSIG, r_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsplusSIG, sig_fors_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsplusSIG, sig_ht_, IOSObjectArray *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincsplus/SIG.java"


#line 3
@implementation OrgBouncycastlePqcCryptoSphincsplusSIG


#line 9
- (instancetype)initPackagePrivateWithInt:(jint)n
                                  withInt:(jint)k
                                  withInt:(jint)a
                                  withInt:(jint)d
                                  withInt:(jint)hPrime
                                  withInt:(jint)wots_len
                            withByteArray:(IOSByteArray *)signature {
  OrgBouncycastlePqcCryptoSphincsplusSIG_initPackagePrivateWithInt_withInt_withInt_withInt_withInt_withInt_withByteArray_(self, n, k, a, d, hPrime, wots_len, signature);
  return self;
}


#line 52
- (IOSByteArray *)getR {
  
#line 54
  return r_;
}


#line 57
- (IOSObjectArray *)getSIG_FORS {
  
#line 59
  return sig_fors_;
}


#line 62
- (IOSObjectArray *)getSIG_HT {
  
#line 64
  return sig_ht_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgBouncycastlePqcCryptoSphincsplusSIG_FORS;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgBouncycastlePqcCryptoSphincsplusSIG_XMSS;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithInt:withInt:withInt:withInt:withInt:withInt:withByteArray:);
  methods[1].selector = @selector(getR);
  methods[2].selector = @selector(getSIG_FORS);
  methods[3].selector = @selector(getSIG_HT);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "r_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sig_fors_", "[LOrgBouncycastlePqcCryptoSphincsplusSIG_FORS;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sig_ht_", "[LOrgBouncycastlePqcCryptoSphincsplusSIG_XMSS;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIIIII[B" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSphincsplusSIG = { "SIG", "org.bouncycastle.pqc.crypto.sphincsplus", ptrTable, methods, fields, 7, 0x0, 4, 3, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSphincsplusSIG;
}

@end


#line 9
void OrgBouncycastlePqcCryptoSphincsplusSIG_initPackagePrivateWithInt_withInt_withInt_withInt_withInt_withInt_withByteArray_(OrgBouncycastlePqcCryptoSphincsplusSIG *self, jint n, jint k, jint a, jint d, jint hPrime, jint wots_len, IOSByteArray *signature) {
  NSObject_init(self);
  self->r_ = [IOSByteArray newArrayWithLength:n];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(signature, 0, self->r_, 0, n);
  
#line 14
  self->sig_fors_ = [IOSObjectArray newArrayWithLength:k type:OrgBouncycastlePqcCryptoSphincsplusSIG_FORS_class_()];
  jint offset = n;
  for (jint i = 0; i != k; i++) {
    
#line 18
    IOSByteArray *sk = [IOSByteArray newArrayWithLength:n];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(signature, offset, sk, 0, n);
    offset += n;
    IOSObjectArray *authPath = [IOSObjectArray newArrayWithLength:a type:IOSClass_byteArray(1)];
    for (jint j = 0; j != a; j++) {
      
#line 24
      (void) IOSObjectArray_SetAndConsume(authPath, j, [IOSByteArray newArrayWithLength:n]);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(signature, offset, IOSObjectArray_Get(authPath, j), 0, n);
      offset += n;
    }
    (void) IOSObjectArray_SetAndConsume(self->sig_fors_, i, new_OrgBouncycastlePqcCryptoSphincsplusSIG_FORS_initPackagePrivateWithByteArray_withByteArray2_(sk, authPath));
  }
  
#line 31
  self->sig_ht_ = [IOSObjectArray newArrayWithLength:d type:OrgBouncycastlePqcCryptoSphincsplusSIG_XMSS_class_()];
  for (jint i = 0; i != d; i++) {
    
#line 34
    IOSByteArray *sig = [IOSByteArray newArrayWithLength:wots_len * n];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(signature, offset, sig, 0, sig->size_);
    offset += sig->size_;
    IOSObjectArray *authPath = [IOSObjectArray newArrayWithLength:hPrime type:IOSClass_byteArray(1)];
    for (jint j = 0; j != hPrime; j++) {
      
#line 40
      (void) IOSObjectArray_SetAndConsume(authPath, j, [IOSByteArray newArrayWithLength:n]);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(signature, offset, IOSObjectArray_Get(authPath, j), 0, n);
      offset += n;
    }
    (void) IOSObjectArray_SetAndConsume(self->sig_ht_, i, new_OrgBouncycastlePqcCryptoSphincsplusSIG_XMSS_initPackagePrivateWithByteArray_withByteArray2_(sig, authPath));
  }
  if (offset != ((IOSByteArray *) nil_chk(signature))->size_) {
    
#line 48
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"signature wrong length");
  }
}


#line 9
OrgBouncycastlePqcCryptoSphincsplusSIG *new_OrgBouncycastlePqcCryptoSphincsplusSIG_initPackagePrivateWithInt_withInt_withInt_withInt_withInt_withInt_withByteArray_(jint n, jint k, jint a, jint d, jint hPrime, jint wots_len, IOSByteArray *signature) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsplusSIG, initPackagePrivateWithInt_withInt_withInt_withInt_withInt_withInt_withByteArray_, n, k, a, d, hPrime, wots_len, signature)
}


#line 9
OrgBouncycastlePqcCryptoSphincsplusSIG *create_OrgBouncycastlePqcCryptoSphincsplusSIG_initPackagePrivateWithInt_withInt_withInt_withInt_withInt_withInt_withByteArray_(jint n, jint k, jint a, jint d, jint hPrime, jint wots_len, IOSByteArray *signature) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsplusSIG, initPackagePrivateWithInt_withInt_withInt_withInt_withInt_withInt_withByteArray_, n, k, a, d, hPrime, wots_len, signature)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSphincsplusSIG)
