//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincsplus/ADRS.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/ADRS.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/Pack.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/sphincsplus/ADRS must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincsplus/ADRS.java"


#line 6
@implementation OrgBouncycastlePqcCryptoSphincsplusADRS


#line 25
- (instancetype)initPackagePrivate {
  OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivate(self);
  return self;
}


#line 29
- (instancetype)initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusADRS:(OrgBouncycastlePqcCryptoSphincsplusADRS *)adrs {
  OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusADRS_(self, adrs);
  return self;
}

- (void)setLayerAddressWithInt:(jint)layer {
  
#line 36
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(layer, value_, OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_LAYER);
}


#line 39
- (jint)getLayerAddress {
  
#line 41
  return OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(value_, OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_LAYER);
}


#line 44
- (void)setTreeAddressWithLong:(jlong)tree {
  
#line 47
  OrgBouncycastleUtilPack_longToBigEndianWithLong_withByteArray_withInt_(tree, value_, OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_TREE + 4);
}

- (jlong)getTreeAddress {
  
#line 52
  return OrgBouncycastleUtilPack_bigEndianToLongWithByteArray_withInt_(value_, OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_TREE + 4);
}


#line 55
- (void)setTreeHeightWithInt:(jint)height {
  
#line 57
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(height, value_, OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_TREE_HGT);
}


#line 60
- (jint)getTreeHeight {
  
#line 62
  return OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(value_, OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_TREE_HGT);
}


#line 65
- (void)setTreeIndexWithInt:(jint)index {
  
#line 67
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(index, value_, OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_TREE_INDEX);
}


#line 70
- (jint)getTreeIndex {
  
#line 72
  return OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(value_, OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_TREE_INDEX);
}

- (void)setTypeWithInt:(jint)type {
  
#line 78
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(type, value_, OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_TYPE);
  
#line 80
  OrgBouncycastleUtilArrays_fillWithByteArray_withInt_withInt_withByte_(value_, 20, ((IOSByteArray *) nil_chk(value_))->size_, (jbyte) 0);
}


#line 83
- (jint)getType {
  
#line 85
  return OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(value_, OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_TYPE);
}


#line 88
- (void)setKeyPairAddressWithInt:(jint)keyPairAddr {
  
#line 90
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(keyPairAddr, value_, OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_KP_ADDR);
}


#line 93
- (jint)getKeyPairAddress {
  
#line 95
  return OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(value_, OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_KP_ADDR);
}


#line 98
- (void)setHashAddressWithInt:(jint)hashAddr {
  
#line 100
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(hashAddr, value_, OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_HASH_ADDR);
}


#line 103
- (void)setChainAddressWithInt:(jint)chainAddr {
  
#line 105
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(chainAddr, value_, OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_CHAIN_ADDR);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusADRS:);
  methods[2].selector = @selector(setLayerAddressWithInt:);
  methods[3].selector = @selector(getLayerAddress);
  methods[4].selector = @selector(setTreeAddressWithLong:);
  methods[5].selector = @selector(getTreeAddress);
  methods[6].selector = @selector(setTreeHeightWithInt:);
  methods[7].selector = @selector(getTreeHeight);
  methods[8].selector = @selector(setTreeIndexWithInt:);
  methods[9].selector = @selector(getTreeIndex);
  methods[10].selector = @selector(setTypeWithInt:);
  methods[11].selector = @selector(getType);
  methods[12].selector = @selector(setKeyPairAddressWithInt:);
  methods[13].selector = @selector(getKeyPairAddress);
  methods[14].selector = @selector(setHashAddressWithInt:);
  methods[15].selector = @selector(setChainAddressWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "WOTS_HASH", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsplusADRS_WOTS_HASH, 0x19, -1, -1, -1, -1 },
    { "WOTS_PK", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsplusADRS_WOTS_PK, 0x19, -1, -1, -1, -1 },
    { "TREE", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsplusADRS_TREE, 0x19, -1, -1, -1, -1 },
    { "FORS_TREE", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsplusADRS_FORS_TREE, 0x19, -1, -1, -1, -1 },
    { "FORS_ROOTS", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsplusADRS_FORS_ROOTS, 0x19, -1, -1, -1, -1 },
    { "OFFSET_LAYER", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_LAYER, 0x18, -1, -1, -1, -1 },
    { "OFFSET_TREE", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_TREE, 0x18, -1, -1, -1, -1 },
    { "OFFSET_TREE_HGT", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_TREE_HGT, 0x18, -1, -1, -1, -1 },
    { "OFFSET_TREE_INDEX", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_TREE_INDEX, 0x18, -1, -1, -1, -1 },
    { "OFFSET_TYPE", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_TYPE, 0x18, -1, -1, -1, -1 },
    { "OFFSET_KP_ADDR", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_KP_ADDR, 0x18, -1, -1, -1, -1 },
    { "OFFSET_CHAIN_ADDR", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_CHAIN_ADDR, 0x18, -1, -1, -1, -1 },
    { "OFFSET_HASH_ADDR", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_HASH_ADDR, 0x18, -1, -1, -1, -1 },
    { "value_", "[B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcCryptoSphincsplusADRS;", "setLayerAddress", "I", "setTreeAddress", "J", "setTreeHeight", "setTreeIndex", "setType", "setKeyPairAddress", "setHashAddress", "setChainAddress" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSphincsplusADRS = { "ADRS", "org.bouncycastle.pqc.crypto.sphincsplus", ptrTable, methods, fields, 7, 0x0, 16, 14, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSphincsplusADRS;
}

@end


#line 25
void OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivate(OrgBouncycastlePqcCryptoSphincsplusADRS *self) {
  NSObject_init(self);
  self->value_ = [IOSByteArray newArrayWithLength:
#line 23
  32];
}


#line 25
OrgBouncycastlePqcCryptoSphincsplusADRS *new_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsplusADRS, initPackagePrivate)
}


#line 25
OrgBouncycastlePqcCryptoSphincsplusADRS *create_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsplusADRS, initPackagePrivate)
}

void OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusADRS_(OrgBouncycastlePqcCryptoSphincsplusADRS *self, OrgBouncycastlePqcCryptoSphincsplusADRS *adrs) {
  NSObject_init(self);
  self->value_ = [IOSByteArray newArrayWithLength:
#line 23
  32];
  
#line 31
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(((OrgBouncycastlePqcCryptoSphincsplusADRS *) nil_chk(adrs))->value_, 0, self->value_, 0, adrs->value_->size_);
}


#line 29
OrgBouncycastlePqcCryptoSphincsplusADRS *new_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusADRS_(OrgBouncycastlePqcCryptoSphincsplusADRS *adrs) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsplusADRS, initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusADRS_, adrs)
}


#line 29
OrgBouncycastlePqcCryptoSphincsplusADRS *create_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusADRS_(OrgBouncycastlePqcCryptoSphincsplusADRS *adrs) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsplusADRS, initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusADRS_, adrs)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSphincsplusADRS)
