//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusKeyPairGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/bouncycastle/crypto/KeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/HT.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/PK.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SK.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusEngine.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusKeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusKeyPairGenerator.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusPublicKeyParameters.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusKeyPairGenerator must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator () {
 @public
  JavaSecuritySecureRandom *random_;
  OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters *parameters_;
}

- (IOSByteArray *)sec_randWithInt:(jint)n;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator, random_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator, parameters_, OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters *)

__attribute__((unused)) static IOSByteArray *OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator_sec_randWithInt_(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator *self, jint n);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusKeyPairGenerator.java"


#line 9
@implementation OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 9
- (instancetype)init {
  OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithOrgBouncycastleCryptoKeyGenerationParameters:(OrgBouncycastleCryptoKeyGenerationParameters *)param {
  
#line 18
  random_ = [((OrgBouncycastleCryptoKeyGenerationParameters *) nil_chk(param)) getRandom];
  parameters_ = [((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyGenerationParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyGenerationParameters class])) getParameters];
}

- (OrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  
#line 25
  OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *engine = [((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters *) nil_chk(parameters_)) getEngine];
  
#line 27
  OrgBouncycastlePqcCryptoSphincsplusSK *sk = new_OrgBouncycastlePqcCryptoSphincsplusSK_initPackagePrivateWithByteArray_withByteArray_(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator_sec_randWithInt_(self, ((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine))->N_), OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator_sec_randWithInt_(self, engine->N_));
  IOSByteArray *pkSeed = OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator_sec_randWithInt_(self, engine->N_);
  
#line 30
  OrgBouncycastlePqcCryptoSphincsplusPK *pk = new_OrgBouncycastlePqcCryptoSphincsplusPK_initPackagePrivateWithByteArray_withByteArray_(pkSeed, new_OrgBouncycastlePqcCryptoSphincsplusHT_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine_withByteArray_withByteArray_(engine, sk->seed_, pkSeed)->htPubKey_);
  
#line 32
  return new_OrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(new_OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPublicKeyParameters_initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_withOrgBouncycastlePqcCryptoSphincsplusPK_(parameters_, pk), new_OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPrivateKeyParameters_initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_withOrgBouncycastlePqcCryptoSphincsplusSK_withOrgBouncycastlePqcCryptoSphincsplusPK_(
#line 33
  parameters_, sk, pk));
}


#line 36
- (IOSByteArray *)sec_randWithInt:(jint)n {
  return OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator_sec_randWithInt_(self, n);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[2].selector = @selector(generateKeyPair);
  methods[3].selector = @selector(sec_randWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parameters_", "LOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LOrgBouncycastleCryptoKeyGenerationParameters;", "sec_rand", "I" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator = { "SPHINCSPlusKeyPairGenerator", "org.bouncycastle.pqc.crypto.sphincsplus", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator;
}

@end


#line 9
void OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator_init(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator *self) {
  NSObject_init(self);
}


#line 9
OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator *new_OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator, init)
}


#line 9
OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator *create_OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator, init)
}


#line 36
IOSByteArray *OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator_sec_randWithInt_(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator *self, jint n) {
  
#line 38
  IOSByteArray *rv = [IOSByteArray newArrayWithLength:n];
  
#line 40
  [((JavaSecuritySecureRandom *) nil_chk(self->random_)) nextBytesWithByteArray:rv];
  
#line 42
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusKeyPairGenerator)
