//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincsplus/ADRS.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoSphincsplusADRS")
#ifdef RESTRICT_OrgBouncycastlePqcCryptoSphincsplusADRS
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoSphincsplusADRS 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoSphincsplusADRS 1
#endif
#undef RESTRICT_OrgBouncycastlePqcCryptoSphincsplusADRS

#if !defined (OrgBouncycastlePqcCryptoSphincsplusADRS_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoSphincsplusADRS || defined(INCLUDE_OrgBouncycastlePqcCryptoSphincsplusADRS))
#define OrgBouncycastlePqcCryptoSphincsplusADRS_

@class IOSByteArray;

@interface OrgBouncycastlePqcCryptoSphincsplusADRS : NSObject {
 @public
  IOSByteArray *value_;
}

#pragma mark Public

- (jint)getKeyPairAddress;

- (jint)getLayerAddress;

- (jlong)getTreeAddress;

- (jint)getTreeHeight;

- (jint)getTreeIndex;

- (jint)getType;

- (void)setChainAddressWithInt:(jint)chainAddr;

- (void)setHashAddressWithInt:(jint)hashAddr;

- (void)setKeyPairAddressWithInt:(jint)keyPairAddr;

- (void)setLayerAddressWithInt:(jint)layer;

- (void)setTreeAddressWithLong:(jlong)tree;

- (void)setTreeHeightWithInt:(jint)height;

- (void)setTreeIndexWithInt:(jint)index;

- (void)setTypeWithInt:(jint)type;

#pragma mark Package-Private

- (instancetype)initPackagePrivate;

- (instancetype)initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusADRS:(OrgBouncycastlePqcCryptoSphincsplusADRS *)adrs;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoSphincsplusADRS)

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsplusADRS, value_, IOSByteArray *)

inline jint OrgBouncycastlePqcCryptoSphincsplusADRS_get_WOTS_HASH(void);
#define OrgBouncycastlePqcCryptoSphincsplusADRS_WOTS_HASH 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSphincsplusADRS, WOTS_HASH, jint)

inline jint OrgBouncycastlePqcCryptoSphincsplusADRS_get_WOTS_PK(void);
#define OrgBouncycastlePqcCryptoSphincsplusADRS_WOTS_PK 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSphincsplusADRS, WOTS_PK, jint)

inline jint OrgBouncycastlePqcCryptoSphincsplusADRS_get_TREE(void);
#define OrgBouncycastlePqcCryptoSphincsplusADRS_TREE 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSphincsplusADRS, TREE, jint)

inline jint OrgBouncycastlePqcCryptoSphincsplusADRS_get_FORS_TREE(void);
#define OrgBouncycastlePqcCryptoSphincsplusADRS_FORS_TREE 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSphincsplusADRS, FORS_TREE, jint)

inline jint OrgBouncycastlePqcCryptoSphincsplusADRS_get_FORS_ROOTS(void);
#define OrgBouncycastlePqcCryptoSphincsplusADRS_FORS_ROOTS 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSphincsplusADRS, FORS_ROOTS, jint)

inline jint OrgBouncycastlePqcCryptoSphincsplusADRS_get_OFFSET_LAYER(void);
#define OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_LAYER 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSphincsplusADRS, OFFSET_LAYER, jint)

inline jint OrgBouncycastlePqcCryptoSphincsplusADRS_get_OFFSET_TREE(void);
#define OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_TREE 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSphincsplusADRS, OFFSET_TREE, jint)

inline jint OrgBouncycastlePqcCryptoSphincsplusADRS_get_OFFSET_TREE_HGT(void);
#define OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_TREE_HGT 24
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSphincsplusADRS, OFFSET_TREE_HGT, jint)

inline jint OrgBouncycastlePqcCryptoSphincsplusADRS_get_OFFSET_TREE_INDEX(void);
#define OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_TREE_INDEX 28
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSphincsplusADRS, OFFSET_TREE_INDEX, jint)

inline jint OrgBouncycastlePqcCryptoSphincsplusADRS_get_OFFSET_TYPE(void);
#define OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_TYPE 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSphincsplusADRS, OFFSET_TYPE, jint)

inline jint OrgBouncycastlePqcCryptoSphincsplusADRS_get_OFFSET_KP_ADDR(void);
#define OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_KP_ADDR 20
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSphincsplusADRS, OFFSET_KP_ADDR, jint)

inline jint OrgBouncycastlePqcCryptoSphincsplusADRS_get_OFFSET_CHAIN_ADDR(void);
#define OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_CHAIN_ADDR 24
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSphincsplusADRS, OFFSET_CHAIN_ADDR, jint)

inline jint OrgBouncycastlePqcCryptoSphincsplusADRS_get_OFFSET_HASH_ADDR(void);
#define OrgBouncycastlePqcCryptoSphincsplusADRS_OFFSET_HASH_ADDR 28
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSphincsplusADRS, OFFSET_HASH_ADDR, jint)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivate(OrgBouncycastlePqcCryptoSphincsplusADRS *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoSphincsplusADRS *new_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoSphincsplusADRS *create_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivate(void);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusADRS_(OrgBouncycastlePqcCryptoSphincsplusADRS *self, OrgBouncycastlePqcCryptoSphincsplusADRS *adrs);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoSphincsplusADRS *new_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusADRS_(OrgBouncycastlePqcCryptoSphincsplusADRS *adrs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoSphincsplusADRS *create_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusADRS_(OrgBouncycastlePqcCryptoSphincsplusADRS *adrs);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoSphincsplusADRS)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoSphincsplusADRS")
