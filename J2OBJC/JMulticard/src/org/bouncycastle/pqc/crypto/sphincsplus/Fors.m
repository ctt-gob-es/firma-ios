//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincsplus/Fors.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/LinkedList.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/ADRS.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/Fors.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/NodeEntry.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SIG_FORS.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusEngine.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/sphincsplus/Fors must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincsplus/Fors.java"


#line 7
@implementation OrgBouncycastlePqcCryptoSphincsplusFors


#line 11
- (instancetype)initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine:(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *)engine {
  OrgBouncycastlePqcCryptoSphincsplusFors_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine_(self, engine);
  return self;
}


#line 18
- (IOSByteArray *)treehashWithByteArray:(IOSByteArray *)skSeed
                                withInt:(jint)s
                                withInt:(jint)z
                          withByteArray:(IOSByteArray *)pkSeed
withOrgBouncycastlePqcCryptoSphincsplusADRS:(OrgBouncycastlePqcCryptoSphincsplusADRS *)adrsParam {
  
#line 20
  OrgBouncycastlePqcCryptoSphincsplusADRS *adrs = new_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusADRS_(adrsParam);
  
#line 22
  JavaUtilLinkedList *stack = new_JavaUtilLinkedList_init();
  
#line 24
  if (JreIntMod(s, (JreLShift32(1, z))) != 0) {
    
#line 26
    return nil;
  }
  
#line 29
  for (jint idx = 0; idx < JreLShift32(1, z); idx++) {
    
#line 31
    [adrs setTreeHeightWithInt:0];
    [adrs setTreeIndexWithInt:s + idx];
    
#line 34
    IOSByteArray *sk = [((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_)) PRFWithByteArray:pkSeed withByteArray:skSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs];
    IOSByteArray *node = [((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_)) FWithByteArray:pkSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs withByteArray:sk];
    
#line 37
    [adrs setTreeHeightWithInt:1];
    [adrs setTreeIndexWithInt:s + idx];
    
#line 41
    while (![stack isEmpty] &&
#line 42
    ((OrgBouncycastlePqcCryptoSphincsplusNodeEntry *) nil_chk([stack getWithInt:0]))->nodeHeight_ == [adrs getTreeHeight]) {
      
#line 44
      [adrs setTreeIndexWithInt:JreIntDiv(([adrs getTreeIndex] - 1), 2)];
      OrgBouncycastlePqcCryptoSphincsplusNodeEntry *current = [stack removeWithInt:0];
      
#line 47
      node = [((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_)) HWithByteArray:pkSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs withByteArray:((OrgBouncycastlePqcCryptoSphincsplusNodeEntry *) nil_chk(current))->nodeValue_ withByteArray:node];
      
#line 49
      [adrs setTreeHeightWithInt:[adrs getTreeHeight] + 1];
    }
    
#line 52
    [stack addWithInt:0 withId:new_OrgBouncycastlePqcCryptoSphincsplusNodeEntry_initPackagePrivateWithByteArray_withInt_(node, [adrs getTreeHeight])];
  }
  
#line 55
  return ((OrgBouncycastlePqcCryptoSphincsplusNodeEntry *) nil_chk([stack getWithInt:0]))->nodeValue_;
}


#line 58
- (IOSObjectArray *)signWithByteArray:(IOSByteArray *)md
                        withByteArray:(IOSByteArray *)skSeed
                        withByteArray:(IOSByteArray *)pkSeed
withOrgBouncycastlePqcCryptoSphincsplusADRS:(OrgBouncycastlePqcCryptoSphincsplusADRS *)adrs {
  
#line 60
  IOSIntArray *idxs = OrgBouncycastlePqcCryptoSphincsplusFors_message_to_idxsWithByteArray_withInt_withInt_(md, ((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_))->K_, engine_->A_);
  IOSObjectArray *sig_fors = [IOSObjectArray newArrayWithLength:((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_))->K_ type:OrgBouncycastlePqcCryptoSphincsplusSIG_FORS_class_()];
  
#line 63
  jint t = engine_->T_;
  for (jint i = 0; i < ((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_))->K_; i++) {
    
#line 67
    jint idx = IOSIntArray_Get(nil_chk(idxs), i);
    
#line 70
    [((OrgBouncycastlePqcCryptoSphincsplusADRS *) nil_chk(adrs)) setTreeHeightWithInt:0];
    [adrs setTreeIndexWithInt:i * t + idx];
    IOSByteArray *sk = [((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_)) PRFWithByteArray:pkSeed withByteArray:skSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs];
    IOSObjectArray *authPath = [IOSObjectArray newArrayWithLength:((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_))->A_ type:IOSClass_byteArray(1)];
    
#line 75
    for (jint j = 0; j < ((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_))->A_; j++) {
      
#line 77
      jint s = JreIntDiv(idx, (JreLShift32(1, j))) ^ 1;
      (void) IOSObjectArray_Set(authPath, j, [self treehashWithByteArray:skSeed withInt:i * t + s * (JreLShift32(1, j)) withInt:j withByteArray:pkSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs]);
    }
    (void) IOSObjectArray_SetAndConsume(sig_fors, i, new_OrgBouncycastlePqcCryptoSphincsplusSIG_FORS_initPackagePrivateWithByteArray_withByteArray2_(sk, authPath));
  }
  return sig_fors;
}


#line 85
- (IOSByteArray *)pkFromSigWithOrgBouncycastlePqcCryptoSphincsplusSIG_FORSArray:(IOSObjectArray *)sig_fors
                                                                  withByteArray:(IOSByteArray *)message
                                                                  withByteArray:(IOSByteArray *)pkSeed
                                    withOrgBouncycastlePqcCryptoSphincsplusADRS:(OrgBouncycastlePqcCryptoSphincsplusADRS *)adrs {
  
#line 87
  IOSObjectArray *node = [IOSObjectArray newArrayWithLength:2 type:IOSClass_byteArray(1)];
  IOSObjectArray *root = [IOSObjectArray newArrayWithLength:((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_))->K_ type:IOSClass_byteArray(1)];
  jint t = engine_->T_;
  
#line 91
  IOSIntArray *idxs = OrgBouncycastlePqcCryptoSphincsplusFors_message_to_idxsWithByteArray_withInt_withInt_(message, engine_->K_, engine_->A_);
  
#line 93
  for (jint i = 0; i < ((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_))->K_; i++) {
    
#line 96
    jint idx = IOSIntArray_Get(nil_chk(idxs), i);
    
#line 98
    IOSByteArray *sk = [((OrgBouncycastlePqcCryptoSphincsplusSIG_FORS *) nil_chk(IOSObjectArray_Get(nil_chk(sig_fors), i))) getSK];
    [((OrgBouncycastlePqcCryptoSphincsplusADRS *) nil_chk(adrs)) setTreeHeightWithInt:0];
    [adrs setTreeIndexWithInt:i * t + idx];
    (void) IOSObjectArray_Set(node, 0, [((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_)) FWithByteArray:pkSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs withByteArray:sk]);
    
#line 103
    IOSObjectArray *authPath = [((OrgBouncycastlePqcCryptoSphincsplusSIG_FORS *) nil_chk(IOSObjectArray_Get(sig_fors, i))) getAuthPath];
    
#line 105
    [adrs setTreeIndexWithInt:i * t + idx];
    for (jint j = 0; j < ((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_))->A_; j++) {
      
#line 108
      [adrs setTreeHeightWithInt:j + 1];
      if (JreIntMod(JreIntDiv(idx, (JreLShift32(1, j))), 2) == 0) {
        
#line 111
        [adrs setTreeIndexWithInt:JreIntDiv([adrs getTreeIndex], 2)];
        (void) IOSObjectArray_Set(node, 1, [((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_)) HWithByteArray:pkSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs withByteArray:IOSObjectArray_Get(node, 0) withByteArray:IOSObjectArray_Get(nil_chk(authPath), j)]);
      }
      else {
        
#line 116
        [adrs setTreeIndexWithInt:JreIntDiv(([adrs getTreeIndex] - 1), 2)];
        (void) IOSObjectArray_Set(node, 1, [((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_)) HWithByteArray:pkSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:adrs withByteArray:IOSObjectArray_Get(nil_chk(authPath), j) withByteArray:IOSObjectArray_Get(node, 0)]);
      }
      (void) IOSObjectArray_Set(node, 0, IOSObjectArray_Get(node, 1));
    }
    (void) IOSObjectArray_Set(root, i, IOSObjectArray_Get(node, 0));
  }
  OrgBouncycastlePqcCryptoSphincsplusADRS *forspkADRS = new_OrgBouncycastlePqcCryptoSphincsplusADRS_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusADRS_(adrs);
  [forspkADRS setTypeWithInt:OrgBouncycastlePqcCryptoSphincsplusADRS_FORS_ROOTS];
  [forspkADRS setKeyPairAddressWithInt:[((OrgBouncycastlePqcCryptoSphincsplusADRS *) nil_chk(adrs)) getKeyPairAddress]];
  return [((OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *) nil_chk(engine_)) T_lWithByteArray:pkSeed withOrgBouncycastlePqcCryptoSphincsplusADRS:forspkADRS withByteArray:OrgBouncycastleUtilArrays_concatenateWithByteArray2_(root)];
}


#line 134
+ (IOSIntArray *)message_to_idxsWithByteArray:(IOSByteArray *)msg
                                      withInt:(jint)fors_trees
                                      withInt:(jint)fors_height {
  return OrgBouncycastlePqcCryptoSphincsplusFors_message_to_idxsWithByteArray_withInt_withInt_(msg, fors_trees, fors_height);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "[LOrgBouncycastlePqcCryptoSphincsplusSIG_FORS;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "[I", 0x8, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine:);
  methods[1].selector = @selector(treehashWithByteArray:withInt:withInt:withByteArray:withOrgBouncycastlePqcCryptoSphincsplusADRS:);
  methods[2].selector = @selector(signWithByteArray:withByteArray:withByteArray:withOrgBouncycastlePqcCryptoSphincsplusADRS:);
  methods[3].selector = @selector(pkFromSigWithOrgBouncycastlePqcCryptoSphincsplusSIG_FORSArray:withByteArray:withByteArray:withOrgBouncycastlePqcCryptoSphincsplusADRS:);
  methods[4].selector = @selector(message_to_idxsWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "engine_", "LOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine;", "treehash", "[BII[BLOrgBouncycastlePqcCryptoSphincsplusADRS;", "sign", "[B[B[BLOrgBouncycastlePqcCryptoSphincsplusADRS;", "pkFromSig", "[LOrgBouncycastlePqcCryptoSphincsplusSIG_FORS;[B[BLOrgBouncycastlePqcCryptoSphincsplusADRS;", "message_to_idxs", "[BII" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSphincsplusFors = { "Fors", "org.bouncycastle.pqc.crypto.sphincsplus", ptrTable, methods, fields, 7, 0x0, 5, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSphincsplusFors;
}

@end


#line 11
void OrgBouncycastlePqcCryptoSphincsplusFors_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine_(OrgBouncycastlePqcCryptoSphincsplusFors *self, OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *engine) {
  NSObject_init(self);
  self->engine_ = engine;
}


#line 11
OrgBouncycastlePqcCryptoSphincsplusFors *new_OrgBouncycastlePqcCryptoSphincsplusFors_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine_(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *engine) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsplusFors, initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine_, engine)
}


#line 11
OrgBouncycastlePqcCryptoSphincsplusFors *create_OrgBouncycastlePqcCryptoSphincsplusFors_initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine_(OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine *engine) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsplusFors, initPackagePrivateWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusEngine_, engine)
}


#line 134
IOSIntArray *OrgBouncycastlePqcCryptoSphincsplusFors_message_to_idxsWithByteArray_withInt_withInt_(IOSByteArray *msg, jint fors_trees, jint fors_height) {
  OrgBouncycastlePqcCryptoSphincsplusFors_initialize();
  jint offset = 0;
  IOSIntArray *idxs = [IOSIntArray newArrayWithLength:fors_trees];
  for (jint i = 0; i < fors_trees; i++) {
    
#line 140
    *IOSIntArray_GetRef(idxs, i) = 0;
    for (jint j = 0; j < fors_height; j++) {
      
#line 143
      *IOSIntArray_GetRef(idxs, i) ^= JreLShift32(((JreRShift32(IOSByteArray_Get(nil_chk(msg), JreRShift32(offset, 3)), (offset & (jint) 0x7))) & (jint) 0x1), j);
      offset++;
    }
  }
  return idxs;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSphincsplusFors)
