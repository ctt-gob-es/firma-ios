//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/saber/SABEREngine.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/Xof.h"
#include "org/bouncycastle/crypto/digests/SHA3Digest.h"
#include "org/bouncycastle/crypto/digests/SHAKEDigest.h"
#include "org/bouncycastle/pqc/crypto/saber/Poly.h"
#include "org/bouncycastle/pqc/crypto/saber/SABEREngine.h"
#include "org/bouncycastle/pqc/crypto/saber/Utils.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/saber/SABEREngine must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoSaberSABEREngine () {
 @public
  jint SABER_L_;
  jint SABER_MU_;
  jint SABER_ET_;
  jint SABER_POLYCOINBYTES_;
  jint SABER_POLYBYTES_;
  jint SABER_POLYVECBYTES_;
  jint SABER_POLYCOMPRESSEDBYTES_;
  jint SABER_POLYVECCOMPRESSEDBYTES_;
  jint SABER_SCALEBYTES_KEM_;
  jint SABER_INDCPA_PUBLICKEYBYTES_;
  jint SABER_INDCPA_SECRETKEYBYTES_;
  jint SABER_PUBLICKEYBYTES_;
  jint SABER_SECRETKEYBYTES_;
  jint SABER_BYTES_CCA_DEC_;
  jint defaultKeySize_;
  jint h1_;
  jint h2_;
  OrgBouncycastlePqcCryptoSaberUtils *utils_;
  OrgBouncycastlePqcCryptoSaberPoly *poly_;
}

- (void)indcpa_kem_keypairWithByteArray:(IOSByteArray *)pk
                          withByteArray:(IOSByteArray *)sk
           withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)indcpa_kem_encWithByteArray:(IOSByteArray *)m
                      withByteArray:(IOSByteArray *)seed_sp
                      withByteArray:(IOSByteArray *)pk
                      withByteArray:(IOSByteArray *)ciphertext;

- (void)indcpa_kem_decWithByteArray:(IOSByteArray *)sk
                      withByteArray:(IOSByteArray *)ciphertext
                      withByteArray:(IOSByteArray *)m;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSaberSABEREngine, utils_, OrgBouncycastlePqcCryptoSaberUtils *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSaberSABEREngine, poly_, OrgBouncycastlePqcCryptoSaberPoly *)

inline jint OrgBouncycastlePqcCryptoSaberSABEREngine_get_SABER_SEEDBYTES(void);
#define OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_SEEDBYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSaberSABEREngine, SABER_SEEDBYTES, jint)

inline jint OrgBouncycastlePqcCryptoSaberSABEREngine_get_SABER_NOISE_SEEDBYTES(void);
#define OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_NOISE_SEEDBYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSaberSABEREngine, SABER_NOISE_SEEDBYTES, jint)

inline jint OrgBouncycastlePqcCryptoSaberSABEREngine_get_SABER_KEYBYTES(void);
#define OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_KEYBYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSaberSABEREngine, SABER_KEYBYTES, jint)

inline jint OrgBouncycastlePqcCryptoSaberSABEREngine_get_SABER_HASHBYTES(void);
#define OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_HASHBYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSaberSABEREngine, SABER_HASHBYTES, jint)

__attribute__((unused)) static void OrgBouncycastlePqcCryptoSaberSABEREngine_indcpa_kem_keypairWithByteArray_withByteArray_withJavaSecuritySecureRandom_(OrgBouncycastlePqcCryptoSaberSABEREngine *self, IOSByteArray *pk, IOSByteArray *sk, JavaSecuritySecureRandom *random);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoSaberSABEREngine_indcpa_kem_encWithByteArray_withByteArray_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoSaberSABEREngine *self, IOSByteArray *m, IOSByteArray *seed_sp, IOSByteArray *pk, IOSByteArray *ciphertext);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoSaberSABEREngine_indcpa_kem_decWithByteArray_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoSaberSABEREngine *self, IOSByteArray *sk, IOSByteArray *ciphertext, IOSByteArray *m);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/saber/SABEREngine.java"


#line 10
@implementation OrgBouncycastlePqcCryptoSaberSABEREngine


#line 48
- (jint)getSABER_N {
  
#line 50
  return OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N;
}


#line 53
- (jint)getSABER_EP {
  
#line 55
  return OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EP;
}


#line 58
- (jint)getSABER_KEYBYTES {
  
#line 60
  return OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_KEYBYTES;
}


#line 63
- (jint)getSABER_L {
  
#line 65
  return SABER_L_;
}


#line 68
- (jint)getSABER_ET {
  
#line 70
  return SABER_ET_;
}


#line 73
- (jint)getSABER_POLYBYTES {
  
#line 75
  return SABER_POLYBYTES_;
}


#line 77
- (jint)getSABER_POLYVECBYTES {
  
#line 79
  return SABER_POLYVECBYTES_;
}


#line 82
- (jint)getSABER_SEEDBYTES {
  
#line 84
  return OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_SEEDBYTES;
}


#line 87
- (jint)getSABER_POLYCOINBYTES {
  
#line 89
  return SABER_POLYCOINBYTES_;
}


#line 92
- (jint)getSABER_NOISE_SEEDBYTES {
  
#line 94
  return OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_NOISE_SEEDBYTES;
}


#line 97
- (jint)getSABER_MU {
  
#line 99
  return SABER_MU_;
}


#line 102
- (OrgBouncycastlePqcCryptoSaberUtils *)getUtils {
  
#line 104
  return utils_;
}


#line 107
- (jint)getSessionKeySize {
  
#line 110
  return JreIntDiv(defaultKeySize_, 8);
}


#line 112
- (jint)getCipherTextSize {
  
#line 114
  return SABER_BYTES_CCA_DEC_;
}


#line 116
- (jint)getPublicKeySize {
  
#line 118
  return SABER_PUBLICKEYBYTES_;
}


#line 120
- (jint)getPrivateKeySize {
  
#line 122
  return SABER_SECRETKEYBYTES_;
}


#line 125
- (instancetype)initPackagePrivateWithInt:(jint)l
                                  withInt:(jint)defaultKeySize {
  OrgBouncycastlePqcCryptoSaberSABEREngine_initPackagePrivateWithInt_withInt_(self, l, defaultKeySize);
  return self;
}


#line 163
- (void)indcpa_kem_keypairWithByteArray:(IOSByteArray *)pk
                          withByteArray:(IOSByteArray *)sk
           withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  OrgBouncycastlePqcCryptoSaberSABEREngine_indcpa_kem_keypairWithByteArray_withByteArray_withJavaSecuritySecureRandom_(self, pk, sk, random);
}


#line 201
- (jint)crypto_kem_keypairWithByteArray:(IOSByteArray *)pk
                          withByteArray:(IOSByteArray *)sk
           withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  
#line 203
  jint i;
  OrgBouncycastlePqcCryptoSaberSABEREngine_indcpa_kem_keypairWithByteArray_withByteArray_withJavaSecuritySecureRandom_(self, pk, sk, random);
  for (i = 0; i < SABER_INDCPA_PUBLICKEYBYTES_; i++)
#line 206
  *IOSByteArray_GetRef(nil_chk(sk), i + SABER_INDCPA_SECRETKEYBYTES_) = IOSByteArray_Get(nil_chk(pk), i);
  
#line 209
  OrgBouncycastleCryptoDigestsSHA3Digest *digest = new_OrgBouncycastleCryptoDigestsSHA3Digest_initWithInt_(256);
  [digest updateWithByteArray:pk withInt:0 withInt:SABER_INDCPA_PUBLICKEYBYTES_];
  [digest doFinalWithByteArray:sk withInt:SABER_SECRETKEYBYTES_ - 64];
  
#line 214
  IOSByteArray *nonce = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_KEYBYTES];
  [((JavaSecuritySecureRandom *) nil_chk(random)) nextBytesWithByteArray:nonce];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(nonce, 0, sk, SABER_SECRETKEYBYTES_ - OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_KEYBYTES, nonce->size_);
  
#line 219
  return 0;
}


#line 223
- (void)indcpa_kem_encWithByteArray:(IOSByteArray *)m
                      withByteArray:(IOSByteArray *)seed_sp
                      withByteArray:(IOSByteArray *)pk
                      withByteArray:(IOSByteArray *)ciphertext {
  OrgBouncycastlePqcCryptoSaberSABEREngine_indcpa_kem_encWithByteArray_withByteArray_withByteArray_withByteArray_(self, m, seed_sp, pk, ciphertext);
}


#line 260
- (jint)crypto_kem_encWithByteArray:(IOSByteArray *)c
                      withByteArray:(IOSByteArray *)k
                      withByteArray:(IOSByteArray *)pk
       withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  
#line 262
  IOSByteArray *kr = [IOSByteArray newArrayWithLength:64];
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:64];
  
#line 265
  IOSByteArray *nonce = [IOSByteArray newArrayWithLength:32];
  [((JavaSecuritySecureRandom *) nil_chk(random)) nextBytesWithByteArray:nonce];
  
#line 268
  OrgBouncycastleCryptoDigestsSHA3Digest *digest_256 = new_OrgBouncycastleCryptoDigestsSHA3Digest_initWithInt_(256);
  OrgBouncycastleCryptoDigestsSHA3Digest *digest_512 = new_OrgBouncycastleCryptoDigestsSHA3Digest_initWithInt_(512);
  
#line 272
  [digest_256 updateWithByteArray:nonce withInt:0 withInt:32];
  [digest_256 doFinalWithByteArray:nonce withInt:0];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(nonce, 0, buf, 0, 32);
  
#line 277
  [digest_256 updateWithByteArray:pk withInt:0 withInt:SABER_INDCPA_PUBLICKEYBYTES_];
  [digest_256 doFinalWithByteArray:buf withInt:32];
  
#line 281
  [digest_512 updateWithByteArray:buf withInt:0 withInt:64];
  [digest_512 doFinalWithByteArray:kr withInt:0];
  
#line 287
  OrgBouncycastlePqcCryptoSaberSABEREngine_indcpa_kem_encWithByteArray_withByteArray_withByteArray_withByteArray_(self, buf, OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(kr, 32, kr->size_), pk, c);
  
#line 289
  [digest_256 updateWithByteArray:c withInt:0 withInt:SABER_BYTES_CCA_DEC_];
  [digest_256 doFinalWithByteArray:kr withInt:32];
  
#line 294
  IOSByteArray *temp_k = [IOSByteArray newArrayWithLength:32];
  [digest_256 updateWithByteArray:kr withInt:0 withInt:64];
  [digest_256 doFinalWithByteArray:temp_k withInt:0];
  
#line 298
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(temp_k, 0, k, 0, JreIntDiv(defaultKeySize_, 8));
  
#line 302
  return 0;
}


#line 305
- (void)indcpa_kem_decWithByteArray:(IOSByteArray *)sk
                      withByteArray:(IOSByteArray *)ciphertext
                      withByteArray:(IOSByteArray *)m {
  OrgBouncycastlePqcCryptoSaberSABEREngine_indcpa_kem_decWithByteArray_withByteArray_withByteArray_(self, sk, ciphertext, m);
}


#line 326
- (jint)crypto_kem_decWithByteArray:(IOSByteArray *)k
                      withByteArray:(IOSByteArray *)c
                      withByteArray:(IOSByteArray *)sk {
  
#line 328
  jint i;
  
#line 328
  jint fail;
  IOSByteArray *cmp = [IOSByteArray newArrayWithLength:SABER_BYTES_CCA_DEC_];
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:64];
  IOSByteArray *kr = [IOSByteArray newArrayWithLength:64];
  IOSByteArray *pk = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(sk, SABER_INDCPA_SECRETKEYBYTES_, ((IOSByteArray *) nil_chk(sk))->size_);
  
#line 334
  OrgBouncycastlePqcCryptoSaberSABEREngine_indcpa_kem_decWithByteArray_withByteArray_withByteArray_(self, sk, c, buf);
  
#line 337
  for (i = 0; i < 32; i++)
#line 338
  *IOSByteArray_GetRef(buf, 32 + i) = IOSByteArray_Get(sk, SABER_SECRETKEYBYTES_ - 64 + i);
  
#line 341
  OrgBouncycastleCryptoDigestsSHA3Digest *digest_256 = new_OrgBouncycastleCryptoDigestsSHA3Digest_initWithInt_(256);
  OrgBouncycastleCryptoDigestsSHA3Digest *digest_512 = new_OrgBouncycastleCryptoDigestsSHA3Digest_initWithInt_(512);
  
#line 344
  [digest_512 updateWithByteArray:buf withInt:0 withInt:64];
  [digest_512 doFinalWithByteArray:kr withInt:0];
  
#line 347
  OrgBouncycastlePqcCryptoSaberSABEREngine_indcpa_kem_encWithByteArray_withByteArray_withByteArray_withByteArray_(self, buf, OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(kr, 32, kr->size_), pk, cmp);
  
#line 349
  fail = OrgBouncycastlePqcCryptoSaberSABEREngine_verifyWithByteArray_withByteArray_withInt_(c, cmp, SABER_BYTES_CCA_DEC_);
  
#line 353
  [digest_256 updateWithByteArray:c withInt:0 withInt:SABER_BYTES_CCA_DEC_];
  [digest_256 doFinalWithByteArray:kr withInt:32];
  
#line 356
  OrgBouncycastlePqcCryptoSaberSABEREngine_cmovWithByteArray_withByteArray_withInt_withInt_withByte_(kr, sk, SABER_SECRETKEYBYTES_ - OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_KEYBYTES, OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_KEYBYTES, (jbyte) fail);
  
#line 360
  IOSByteArray *temp_k = [IOSByteArray newArrayWithLength:32];
  [digest_256 updateWithByteArray:kr withInt:0 withInt:64];
  [digest_256 doFinalWithByteArray:temp_k withInt:0];
  
#line 364
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(temp_k, 0, k, 0, JreIntDiv(defaultKeySize_, 8));
  return 0;
}


#line 370
+ (jint)verifyWithByteArray:(IOSByteArray *)a
              withByteArray:(IOSByteArray *)b
                    withInt:(jint)len {
  return OrgBouncycastlePqcCryptoSaberSABEREngine_verifyWithByteArray_withByteArray_withInt_(a, b, len);
}


#line 384
+ (void)cmovWithByteArray:(IOSByteArray *)r
            withByteArray:(IOSByteArray *)x
                  withInt:(jint)x_offset
                  withInt:(jint)len
                 withByte:(jbyte)b {
  OrgBouncycastlePqcCryptoSaberSABEREngine_cmovWithByteArray_withByteArray_withInt_withInt_withByte_(r, x, x_offset, len, b);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoSaberUtils;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getSABER_N);
  methods[1].selector = @selector(getSABER_EP);
  methods[2].selector = @selector(getSABER_KEYBYTES);
  methods[3].selector = @selector(getSABER_L);
  methods[4].selector = @selector(getSABER_ET);
  methods[5].selector = @selector(getSABER_POLYBYTES);
  methods[6].selector = @selector(getSABER_POLYVECBYTES);
  methods[7].selector = @selector(getSABER_SEEDBYTES);
  methods[8].selector = @selector(getSABER_POLYCOINBYTES);
  methods[9].selector = @selector(getSABER_NOISE_SEEDBYTES);
  methods[10].selector = @selector(getSABER_MU);
  methods[11].selector = @selector(getUtils);
  methods[12].selector = @selector(getSessionKeySize);
  methods[13].selector = @selector(getCipherTextSize);
  methods[14].selector = @selector(getPublicKeySize);
  methods[15].selector = @selector(getPrivateKeySize);
  methods[16].selector = @selector(initPackagePrivateWithInt:withInt:);
  methods[17].selector = @selector(indcpa_kem_keypairWithByteArray:withByteArray:withJavaSecuritySecureRandom:);
  methods[18].selector = @selector(crypto_kem_keypairWithByteArray:withByteArray:withJavaSecuritySecureRandom:);
  methods[19].selector = @selector(indcpa_kem_encWithByteArray:withByteArray:withByteArray:withByteArray:);
  methods[20].selector = @selector(crypto_kem_encWithByteArray:withByteArray:withByteArray:withJavaSecuritySecureRandom:);
  methods[21].selector = @selector(indcpa_kem_decWithByteArray:withByteArray:withByteArray:);
  methods[22].selector = @selector(crypto_kem_decWithByteArray:withByteArray:withByteArray:);
  methods[23].selector = @selector(verifyWithByteArray:withByteArray:withInt:);
  methods[24].selector = @selector(cmovWithByteArray:withByteArray:withInt:withInt:withByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SABER_EQ", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EQ, 0x19, -1, -1, -1, -1 },
    { "SABER_EP", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EP, 0x19, -1, -1, -1, -1 },
    { "SABER_N", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N, 0x19, -1, -1, -1, -1 },
    { "SABER_SEEDBYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_SEEDBYTES, 0x1a, -1, -1, -1, -1 },
    { "SABER_NOISE_SEEDBYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_NOISE_SEEDBYTES, 0x1a, -1, -1, -1, -1 },
    { "SABER_KEYBYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_KEYBYTES, 0x1a, -1, -1, -1, -1 },
    { "SABER_HASHBYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_HASHBYTES, 0x1a, -1, -1, -1, -1 },
    { "SABER_L_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_MU_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_ET_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_POLYCOINBYTES_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_POLYBYTES_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_POLYVECBYTES_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_POLYCOMPRESSEDBYTES_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_POLYVECCOMPRESSEDBYTES_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_SCALEBYTES_KEM_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_INDCPA_PUBLICKEYBYTES_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_INDCPA_SECRETKEYBYTES_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_PUBLICKEYBYTES_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_SECRETKEYBYTES_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_BYTES_CCA_DEC_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "defaultKeySize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "h1_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "h2_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "utils_", "LOrgBouncycastlePqcCryptoSaberUtils;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "poly_", "LOrgBouncycastlePqcCryptoSaberPoly;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "indcpa_kem_keypair", "[B[BLJavaSecuritySecureRandom;", "crypto_kem_keypair", "indcpa_kem_enc", "[B[B[B[B", "crypto_kem_enc", "[B[B[BLJavaSecuritySecureRandom;", "indcpa_kem_dec", "[B[B[B", "crypto_kem_dec", "verify", "[B[BI", "cmov", "[B[BIIB" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSaberSABEREngine = { "SABEREngine", "org.bouncycastle.pqc.crypto.saber", ptrTable, methods, fields, 7, 0x0, 25, 26, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSaberSABEREngine;
}

@end


#line 125
void OrgBouncycastlePqcCryptoSaberSABEREngine_initPackagePrivateWithInt_withInt_(OrgBouncycastlePqcCryptoSaberSABEREngine *self, jint l, jint defaultKeySize) {
  NSObject_init(self);
  self->defaultKeySize_ = defaultKeySize;
  
#line 129
  self->SABER_L_ = l;
  if (l == 2) {
    
#line 132
    self->SABER_MU_ = 10;
    self->SABER_ET_ = 3;
  }
  else if (l == 3) {
    
#line 137
    self->SABER_MU_ = 8;
    self->SABER_ET_ = 4;
  }
  else {
    
#line 142
    self->SABER_MU_ = 6;
    self->SABER_ET_ = 6;
  }
  self->SABER_POLYCOINBYTES_ = (JreIntDiv(self->SABER_MU_ * OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N, 8));
  self->SABER_POLYBYTES_ = (JreIntDiv(OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EQ * OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N, 8));
  self->SABER_POLYVECBYTES_ = (self->SABER_L_ * self->SABER_POLYBYTES_);
  self->SABER_POLYCOMPRESSEDBYTES_ = (JreIntDiv(OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EP * OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N, 8));
  self->SABER_POLYVECCOMPRESSEDBYTES_ = (self->SABER_L_ * self->SABER_POLYCOMPRESSEDBYTES_);
  self->SABER_SCALEBYTES_KEM_ = (JreIntDiv(self->SABER_ET_ * OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N, 8));
  self->SABER_INDCPA_PUBLICKEYBYTES_ = (self->SABER_POLYVECCOMPRESSEDBYTES_ + OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_SEEDBYTES);
  self->SABER_INDCPA_SECRETKEYBYTES_ = (self->SABER_POLYVECBYTES_);
  self->SABER_PUBLICKEYBYTES_ = (self->SABER_INDCPA_PUBLICKEYBYTES_);
  self->SABER_SECRETKEYBYTES_ = (self->SABER_INDCPA_SECRETKEYBYTES_ + self->SABER_INDCPA_PUBLICKEYBYTES_ + OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_HASHBYTES + OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_KEYBYTES);
  self->SABER_BYTES_CCA_DEC_ = (self->SABER_POLYVECCOMPRESSEDBYTES_ + self->SABER_SCALEBYTES_KEM_);
  
#line 157
  self->h1_ = (JreLShift32(1, (OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EQ - OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EP - 1)));
  self->h2_ = ((JreLShift32(1, (OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EP - 2))) - (JreLShift32(1, (OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EP - self->SABER_ET_ - 1))) + (JreLShift32(1, (OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EQ - OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EP - 1))));
  self->utils_ = new_OrgBouncycastlePqcCryptoSaberUtils_initPackagePrivateWithOrgBouncycastlePqcCryptoSaberSABEREngine_(self);
  self->poly_ = new_OrgBouncycastlePqcCryptoSaberPoly_initPackagePrivateWithOrgBouncycastlePqcCryptoSaberSABEREngine_(self);
}


#line 125
OrgBouncycastlePqcCryptoSaberSABEREngine *new_OrgBouncycastlePqcCryptoSaberSABEREngine_initPackagePrivateWithInt_withInt_(jint l, jint defaultKeySize) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSaberSABEREngine, initPackagePrivateWithInt_withInt_, l, defaultKeySize)
}


#line 125
OrgBouncycastlePqcCryptoSaberSABEREngine *create_OrgBouncycastlePqcCryptoSaberSABEREngine_initPackagePrivateWithInt_withInt_(jint l, jint defaultKeySize) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSaberSABEREngine, initPackagePrivateWithInt_withInt_, l, defaultKeySize)
}


#line 163
void OrgBouncycastlePqcCryptoSaberSABEREngine_indcpa_kem_keypairWithByteArray_withByteArray_withJavaSecuritySecureRandom_(OrgBouncycastlePqcCryptoSaberSABEREngine *self, IOSByteArray *pk, IOSByteArray *sk, JavaSecuritySecureRandom *random) {
  
#line 165
  IOSObjectArray *A = [IOSShortArray newArrayWithDimensions:3 lengths:(jint[]){ self->SABER_L_, self->SABER_L_, OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N }];
  IOSObjectArray *s = [IOSShortArray newArrayWithDimensions:2 lengths:(jint[]){ self->SABER_L_, OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N }];
  IOSObjectArray *b = [IOSShortArray newArrayWithDimensions:2 lengths:(jint[]){ self->SABER_L_, OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N }];
  
#line 169
  IOSByteArray *seed_A = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_SEEDBYTES];
  IOSByteArray *seed_s = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_NOISE_SEEDBYTES];
  jint i;
  
#line 171
  jint j;
  
#line 173
  [((JavaSecuritySecureRandom *) nil_chk(random)) nextBytesWithByteArray:seed_A];
  
#line 175
  id<OrgBouncycastleCryptoXof> digest = new_OrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(128);
  [digest updateWithByteArray:seed_A withInt:0 withInt:OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_SEEDBYTES];
  [digest doFinalWithByteArray:seed_A withInt:0 withInt:OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_SEEDBYTES];
  
#line 179
  [random nextBytesWithByteArray:seed_s];
  
#line 181
  [((OrgBouncycastlePqcCryptoSaberPoly *) nil_chk(self->poly_)) GenMatrixWithShortArray3:A withByteArray:seed_A];
  
#line 183
  [self->poly_ GenSecretWithShortArray2:s withByteArray:seed_s];
  
#line 185
  [self->poly_ MatrixVectorMulWithShortArray3:A withShortArray2:s withShortArray2:b withInt:1];
  
#line 187
  for (i = 0; i < self->SABER_L_; i++) {
    
#line 189
    for (j = 0; j < OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N; j++) {
      
#line 191
      *IOSShortArray_GetRef(nil_chk(IOSObjectArray_Get(b, i)), j) = (jshort) (JreURShift32(((IOSShortArray_Get(nil_chk(IOSObjectArray_Get(b, i)), j) + self->h1_) & (jint) 0xffff), (OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EQ - OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EP)));
    }
  }
  
#line 195
  [((OrgBouncycastlePqcCryptoSaberUtils *) nil_chk(self->utils_)) POLVECq2BSWithByteArray:sk withShortArray2:s];
  [self->utils_ POLVECp2BSWithByteArray:pk withShortArray2:b];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(seed_A, 0, pk, self->SABER_POLYVECCOMPRESSEDBYTES_, seed_A->size_);
}


#line 223
void OrgBouncycastlePqcCryptoSaberSABEREngine_indcpa_kem_encWithByteArray_withByteArray_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoSaberSABEREngine *self, IOSByteArray *m, IOSByteArray *seed_sp, IOSByteArray *pk, IOSByteArray *ciphertext) {
  
#line 225
  IOSObjectArray *A = [IOSShortArray newArrayWithDimensions:3 lengths:(jint[]){ self->SABER_L_, self->SABER_L_, OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N }];
  IOSObjectArray *sp = [IOSShortArray newArrayWithDimensions:2 lengths:(jint[]){ self->SABER_L_, OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N }];
  IOSObjectArray *bp = [IOSShortArray newArrayWithDimensions:2 lengths:(jint[]){ self->SABER_L_, OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N }];
  IOSObjectArray *b = [IOSShortArray newArrayWithDimensions:2 lengths:(jint[]){ self->SABER_L_, OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N }];
  IOSShortArray *mp = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N];
  IOSShortArray *vp = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N];
  jint i;
  
#line 231
  jint j;
  IOSByteArray *seed_A = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(pk, self->SABER_POLYVECCOMPRESSEDBYTES_, ((IOSByteArray *) nil_chk(pk))->size_);
  
#line 234
  [((OrgBouncycastlePqcCryptoSaberPoly *) nil_chk(self->poly_)) GenMatrixWithShortArray3:A withByteArray:seed_A];
  [self->poly_ GenSecretWithShortArray2:sp withByteArray:seed_sp];
  [self->poly_ MatrixVectorMulWithShortArray3:A withShortArray2:sp withShortArray2:bp withInt:0];
  
#line 238
  for (i = 0; i < self->SABER_L_; i++) {
    
#line 240
    for (j = 0; j < OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N; j++) {
      
#line 242
      *IOSShortArray_GetRef(nil_chk(IOSObjectArray_Get(bp, i)), j) = (jshort) (JreURShift32(((IOSShortArray_Get(nil_chk(IOSObjectArray_Get(bp, i)), j) + self->h1_) & (jint) 0xffff), (OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EQ - OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EP)));
    }
  }
  
#line 246
  [((OrgBouncycastlePqcCryptoSaberUtils *) nil_chk(self->utils_)) POLVECp2BSWithByteArray:ciphertext withShortArray2:bp];
  [self->utils_ BS2POLVECpWithByteArray:pk withShortArray2:b];
  [self->poly_ InnerProdWithShortArray2:b withShortArray2:sp withShortArray:vp];
  
#line 250
  [self->utils_ BS2POLmsgWithByteArray:m withShortArray:mp];
  
#line 252
  for (j = 0; j < OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N; j++) {
    
#line 254
    *IOSShortArray_GetRef(vp, j) = (jshort) (JreURShift32(((IOSShortArray_Get(vp, j) - (JreLShift32(IOSShortArray_Get(mp, j), (OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EP - 1))) + self->h1_) & (jint) 0xffff), (OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EP - self->SABER_ET_)));
  }
  
#line 257
  [self->utils_ POLT2BSWithByteArray:ciphertext withInt:self->SABER_POLYVECCOMPRESSEDBYTES_ withShortArray:vp];
}


#line 305
void OrgBouncycastlePqcCryptoSaberSABEREngine_indcpa_kem_decWithByteArray_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoSaberSABEREngine *self, IOSByteArray *sk, IOSByteArray *ciphertext, IOSByteArray *m) {
  
#line 307
  IOSObjectArray *s = [IOSShortArray newArrayWithDimensions:2 lengths:(jint[]){ self->SABER_L_, OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N }];
  IOSObjectArray *b = [IOSShortArray newArrayWithDimensions:2 lengths:(jint[]){ self->SABER_L_, OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N }];
  IOSShortArray *v = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N];
  IOSShortArray *cm = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N];
  jint i;
  
#line 313
  [((OrgBouncycastlePqcCryptoSaberUtils *) nil_chk(self->utils_)) BS2POLVECqWithByteArray:sk withInt:0 withShortArray2:s];
  [self->utils_ BS2POLVECpWithByteArray:ciphertext withShortArray2:b];
  [((OrgBouncycastlePqcCryptoSaberPoly *) nil_chk(self->poly_)) InnerProdWithShortArray2:b withShortArray2:s withShortArray:v];
  [self->utils_ BS2POLTWithByteArray:ciphertext withInt:self->SABER_POLYVECCOMPRESSEDBYTES_ withShortArray:cm];
  
#line 318
  for (i = 0; i < OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_N; i++) {
    
#line 320
    *IOSShortArray_GetRef(v, i) = (jshort) (JreRShift32(((IOSShortArray_Get(v, i) + self->h2_ - (JreLShift32(IOSShortArray_Get(cm, i), (OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EP - self->SABER_ET_)))) & (jint) 0xffff), (OrgBouncycastlePqcCryptoSaberSABEREngine_SABER_EP - 1)));
  }
  
#line 323
  [self->utils_ POLmsg2BSWithByteArray:m withShortArray:v];
}


#line 370
jint OrgBouncycastlePqcCryptoSaberSABEREngine_verifyWithByteArray_withByteArray_withInt_(IOSByteArray *a, IOSByteArray *b, jint len) {
  OrgBouncycastlePqcCryptoSaberSABEREngine_initialize();
  jlong r;
  jint i;
  r = 0;
  
#line 376
  for (i = 0; i < len; i++)
#line 377
  r |= IOSByteArray_Get(nil_chk(a), i) ^ IOSByteArray_Get(nil_chk(b), i);
  
#line 379
  r = JreURShift64((-r), 63);
  return (jint) r;
}


#line 384
void OrgBouncycastlePqcCryptoSaberSABEREngine_cmovWithByteArray_withByteArray_withInt_withInt_withByte_(IOSByteArray *r, IOSByteArray *x, jint x_offset, jint len, jbyte b) {
  OrgBouncycastlePqcCryptoSaberSABEREngine_initialize();
  jint i;
  
#line 388
  b = (jbyte) -b;
  for (i = 0; i < len; i++)
#line 390
  *IOSByteArray_GetRef(nil_chk(r), i) ^= b & (IOSByteArray_Get(nil_chk(x), i + x_offset) ^ IOSByteArray_Get(r, i));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSaberSABEREngine)
