//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/saber/Utils.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/bouncycastle/pqc/crypto/saber/SABEREngine.h"
#include "org/bouncycastle/pqc/crypto/saber/Utils.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/saber/Utils must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoSaberUtils () {
 @public
  jint SABER_N_;
  jint SABER_L_;
  jint SABER_ET_;
  jint SABER_POLYBYTES_;
  jint SABER_EP_;
  jint SABER_KEYBYTES_;
}

- (void)POLq2BSWithByteArray:(IOSByteArray *)bytes
                     withInt:(jint)byteIndex
              withShortArray:(IOSShortArray *)data;

- (void)BS2POLqWithByteArray:(IOSByteArray *)bytes
                     withInt:(jint)byteIndex
              withShortArray:(IOSShortArray *)data;

- (void)POLp2BSWithByteArray:(IOSByteArray *)bytes
                     withInt:(jint)byteIndex
              withShortArray:(IOSShortArray *)data;

@end

__attribute__((unused)) static void OrgBouncycastlePqcCryptoSaberUtils_POLq2BSWithByteArray_withInt_withShortArray_(OrgBouncycastlePqcCryptoSaberUtils *self, IOSByteArray *bytes, jint byteIndex, IOSShortArray *data);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoSaberUtils_BS2POLqWithByteArray_withInt_withShortArray_(OrgBouncycastlePqcCryptoSaberUtils *self, IOSByteArray *bytes, jint byteIndex, IOSShortArray *data);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoSaberUtils_POLp2BSWithByteArray_withInt_withShortArray_(OrgBouncycastlePqcCryptoSaberUtils *self, IOSByteArray *bytes, jint byteIndex, IOSShortArray *data);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/saber/Utils.java"


#line 3
@implementation OrgBouncycastlePqcCryptoSaberUtils


#line 13
- (instancetype)initPackagePrivateWithOrgBouncycastlePqcCryptoSaberSABEREngine:(OrgBouncycastlePqcCryptoSaberSABEREngine *)engine {
  OrgBouncycastlePqcCryptoSaberUtils_initPackagePrivateWithOrgBouncycastlePqcCryptoSaberSABEREngine_(self, engine);
  return self;
}


#line 23
- (void)POLT2BSWithByteArray:(IOSByteArray *)bytes
                     withInt:(jint)byteIndex
              withShortArray:(IOSShortArray *)data {
  
#line 25
  jshort j;
  
#line 25
  jshort offset_byte;
  
#line 25
  jshort offset_data;
  if (SABER_ET_ == 3) {
    
#line 28
    for (j = 0; j < JreIntDiv(SABER_N_, 8); j++) {
      
#line 30
      offset_byte = (jshort) (3 * j);
      offset_data = (jshort) (8 * j);
      *IOSByteArray_GetRef(nil_chk(bytes), byteIndex + offset_byte + 0) = (jbyte) ((IOSShortArray_Get(nil_chk(data), offset_data + 0) & (jint) 0x7) | (JreLShift32((IOSShortArray_Get(data, offset_data + 1) & (jint) 0x7), 3)) | (JreLShift32((IOSShortArray_Get(data, offset_data + 2) & (jint) 0x3), 6)));
      *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 1) = (jbyte) (((JreRShift32(IOSShortArray_Get(data, offset_data + 2), 2)) & (jint) 0x01) | (JreLShift32((IOSShortArray_Get(data, offset_data + 3) & (jint) 0x7), 1)) | (JreLShift32((IOSShortArray_Get(data, offset_data + 4) & (jint) 0x7), 4)) | (JreLShift32(((IOSShortArray_Get(data, offset_data + 5)) & (jint) 0x01), 7)));
      *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 2) = (jbyte) (((JreRShift32(IOSShortArray_Get(data, offset_data + 5), 1)) & (jint) 0x03) | (JreLShift32((IOSShortArray_Get(data, offset_data + 6) & (jint) 0x7), 2)) | (JreLShift32((IOSShortArray_Get(data, offset_data + 7) & (jint) 0x7), 5)));
    }
  }
  else if (SABER_ET_ == 4) {
    
#line 39
    for (j = 0; j < JreIntDiv(SABER_N_, 2); j++) {
      
#line 41
      offset_byte = j;
      offset_data = (jshort) (2 * j);
      *IOSByteArray_GetRef(nil_chk(bytes), byteIndex + offset_byte) = (jbyte) ((IOSShortArray_Get(nil_chk(data), offset_data) & (jint) 0x0f) | (JreLShift32((IOSShortArray_Get(data, offset_data + 1) & (jint) 0x0f), 4)));
    }
  }
  else if (SABER_ET_ == 6) {
    
#line 48
    for (j = 0; j < JreIntDiv(SABER_N_, 4); j++) {
      
#line 50
      offset_byte = (jshort) (3 * j);
      offset_data = (jshort) (4 * j);
      *IOSByteArray_GetRef(nil_chk(bytes), byteIndex + offset_byte + 0) = (jbyte) ((IOSShortArray_Get(nil_chk(data), offset_data + 0) & (jint) 0x3f) | (JreLShift32((IOSShortArray_Get(data, offset_data + 1) & (jint) 0x03), 6)));
      *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 1) = (jbyte) (((JreRShift32(IOSShortArray_Get(data, offset_data + 1), 2)) & (jint) 0x0f) | (JreLShift32((IOSShortArray_Get(data, offset_data + 2) & (jint) 0x0f), 4)));
      *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 2) = (jbyte) (((JreRShift32(IOSShortArray_Get(data, offset_data + 2), 4)) & (jint) 0x03) | (JreLShift32((IOSShortArray_Get(data, offset_data + 3) & (jint) 0x3f), 2)));
    }
  }
}


#line 59
- (void)BS2POLTWithByteArray:(IOSByteArray *)bytes
                     withInt:(jint)byteIndex
              withShortArray:(IOSShortArray *)data {
  
#line 61
  jshort j;
  
#line 61
  jshort offset_byte;
  
#line 61
  jshort offset_data;
  if (SABER_ET_ == 3) {
    
#line 64
    for (j = 0; j < JreIntDiv(SABER_N_, 8); j++) {
      
#line 66
      offset_byte = (jshort) (3 * j);
      offset_data = (jshort) (8 * j);
      *IOSShortArray_GetRef(nil_chk(data), offset_data + 0) = (jshort) ((IOSByteArray_Get(nil_chk(bytes), byteIndex + offset_byte + 0)) & (jint) 0x07);
      *IOSShortArray_GetRef(data, offset_data + 1) = (jshort) ((JreRShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 0)), 3)) & (jint) 0x07);
      *IOSShortArray_GetRef(data, offset_data + 2) = (jshort) (((JreRShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 0)), 6)) & (jint) 0x03) | (JreLShift32(((IOSByteArray_Get(bytes, byteIndex + offset_byte + 1)) & (jint) 0x01), 2)));
      *IOSShortArray_GetRef(data, offset_data + 3) = (jshort) ((JreRShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 1)), 1)) & (jint) 0x07);
      *IOSShortArray_GetRef(data, offset_data + 4) = (jshort) ((JreRShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 1)), 4)) & (jint) 0x07);
      *IOSShortArray_GetRef(data, offset_data + 5) = (jshort) (((JreRShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 1)), 7)) & (jint) 0x01) | (JreLShift32(((IOSByteArray_Get(bytes, byteIndex + offset_byte + 2)) & (jint) 0x03), 1)));
      *IOSShortArray_GetRef(data, offset_data + 6) = (jshort) ((JreRShift32(IOSByteArray_Get(bytes, byteIndex + offset_byte + 2), 2)) & (jint) 0x07);
      *IOSShortArray_GetRef(data, offset_data + 7) = (jshort) ((JreRShift32(IOSByteArray_Get(bytes, byteIndex + offset_byte + 2), 5)) & (jint) 0x07);
    }
  }
  else if (SABER_ET_ == 4) {
    
#line 80
    for (j = 0; j < JreIntDiv(SABER_N_, 2); j++) {
      
#line 82
      offset_byte = j;
      offset_data = (jshort) (2 * j);
      *IOSShortArray_GetRef(nil_chk(data), offset_data) = (jshort) (IOSByteArray_Get(nil_chk(bytes), byteIndex + offset_byte) & (jint) 0x0f);
      *IOSShortArray_GetRef(data, offset_data + 1) = (jshort) ((JreRShift32(IOSByteArray_Get(bytes, byteIndex + offset_byte), 4)) & (jint) 0x0f);
    }
  }
  else if (SABER_ET_ == 6) {
    
#line 90
    for (j = 0; j < JreIntDiv(SABER_N_, 4); j++) {
      
#line 92
      offset_byte = (jshort) (3 * j);
      offset_data = (jshort) (4 * j);
      *IOSShortArray_GetRef(nil_chk(data), offset_data + 0) = (jshort) (IOSByteArray_Get(nil_chk(bytes), byteIndex + offset_byte + 0) & (jint) 0x3f);
      *IOSShortArray_GetRef(data, offset_data + 1) = (jshort) (((JreRShift32(IOSByteArray_Get(bytes, byteIndex + offset_byte + 0), 6)) & (jint) 0x03) | (JreLShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 1) & (jint) 0x0f), 2)));
      *IOSShortArray_GetRef(data, offset_data + 2) = (jshort) ((JreRShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 1) & (jint) 0xff), 4)) | (JreLShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 2) & (jint) 0x03), 4)));
      *IOSShortArray_GetRef(data, offset_data + 3) = (jshort) (JreRShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 2) & (jint) 0xff), 2));
    }
  }
}


#line 103
- (void)POLq2BSWithByteArray:(IOSByteArray *)bytes
                     withInt:(jint)byteIndex
              withShortArray:(IOSShortArray *)data {
  OrgBouncycastlePqcCryptoSaberUtils_POLq2BSWithByteArray_withInt_withShortArray_(self, bytes, byteIndex, data);
}


#line 126
- (void)BS2POLqWithByteArray:(IOSByteArray *)bytes
                     withInt:(jint)byteIndex
              withShortArray:(IOSShortArray *)data {
  OrgBouncycastlePqcCryptoSaberUtils_BS2POLqWithByteArray_withInt_withShortArray_(self, bytes, byteIndex, data);
}


#line 144
- (void)POLp2BSWithByteArray:(IOSByteArray *)bytes
                     withInt:(jint)byteIndex
              withShortArray:(IOSShortArray *)data {
  OrgBouncycastlePqcCryptoSaberUtils_POLp2BSWithByteArray_withInt_withShortArray_(self, bytes, byteIndex, data);
}


#line 159
- (void)BS2POLpWithByteArray:(IOSByteArray *)bytes
                     withInt:(jint)byteIndex
              withShortArray:(IOSShortArray *)data {
  
#line 161
  jshort j;
  
#line 161
  jshort offset_byte;
  
#line 161
  jshort offset_data;
  for (j = 0; j < JreIntDiv(SABER_N_, 4); j++) {
    
#line 164
    offset_byte = (jshort) (5 * j);
    offset_data = (jshort) (4 * j);
    *IOSShortArray_GetRef(nil_chk(data), offset_data + 0) = (jshort) ((IOSByteArray_Get(nil_chk(bytes), byteIndex + offset_byte + 0) & ((jint) 0xff)) | (JreLShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 1) & (jint) 0x03), 8)));
    *IOSShortArray_GetRef(data, offset_data + 1) = (jshort) (((JreRShift32(IOSByteArray_Get(bytes, byteIndex + offset_byte + 1), 2)) & ((jint) 0x3f)) | (JreLShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 2) & (jint) 0x0f), 6)));
    *IOSShortArray_GetRef(data, offset_data + 2) = (jshort) (((JreRShift32(IOSByteArray_Get(bytes, byteIndex + offset_byte + 2), 4)) & ((jint) 0x0f)) | (JreLShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 3) & (jint) 0x3f), 4)));
    *IOSShortArray_GetRef(data, offset_data + 3) = (jshort) (((JreRShift32(IOSByteArray_Get(bytes, byteIndex + offset_byte + 3), 6)) & ((jint) 0x03)) | (JreLShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 4) & (jint) 0xff), 2)));
  }
}


#line 173
- (void)POLVECq2BSWithByteArray:(IOSByteArray *)bytes
                withShortArray2:(IOSObjectArray *)data {
  jbyte i;
  for (i = 0; i < SABER_L_; i++) {
    
#line 178
    OrgBouncycastlePqcCryptoSaberUtils_POLq2BSWithByteArray_withInt_withShortArray_(self, bytes, i * SABER_POLYBYTES_, IOSObjectArray_Get(nil_chk(data), i));
  }
}


#line 182
- (void)BS2POLVECqWithByteArray:(IOSByteArray *)bytes
                        withInt:(jint)byteIndex
                withShortArray2:(IOSObjectArray *)data {
  
#line 184
  jbyte i;
  for (i = 0; i < SABER_L_; i++) {
    
#line 187
    OrgBouncycastlePqcCryptoSaberUtils_BS2POLqWithByteArray_withInt_withShortArray_(self, bytes, byteIndex + i * SABER_POLYBYTES_, IOSObjectArray_Get(nil_chk(data), i));
  }
}


#line 191
- (void)POLVECp2BSWithByteArray:(IOSByteArray *)bytes
                withShortArray2:(IOSObjectArray *)data {
  jbyte i;
  for (i = 0; i < SABER_L_; i++) {
    
#line 196
    OrgBouncycastlePqcCryptoSaberUtils_POLp2BSWithByteArray_withInt_withShortArray_(self, bytes, i * (JreIntDiv(SABER_EP_ * SABER_N_, 8)), IOSObjectArray_Get(nil_chk(data), i));
  }
}


#line 200
- (void)BS2POLVECpWithByteArray:(IOSByteArray *)bytes
                withShortArray2:(IOSObjectArray *)data {
  jbyte i;
  for (i = 0; i < SABER_L_; i++) {
    
#line 205
    [self BS2POLpWithByteArray:bytes withInt:i * (JreIntDiv(SABER_EP_ * SABER_N_, 8)) withShortArray:IOSObjectArray_Get(nil_chk(data), i)];
  }
}


#line 209
- (void)BS2POLmsgWithByteArray:(IOSByteArray *)bytes
                withShortArray:(IOSShortArray *)data {
  jbyte i;
  
#line 211
  jbyte j;
  for (j = 0; j < SABER_KEYBYTES_; j++) {
    
#line 214
    for (i = 0; i < 8; i++) {
      
#line 216
      *IOSShortArray_GetRef(nil_chk(data), j * 8 + i) = (jshort) ((JreRShift32(IOSByteArray_Get(nil_chk(bytes), j), i)) & (jint) 0x01);
    }
  }
}


#line 221
- (void)POLmsg2BSWithByteArray:(IOSByteArray *)bytes
                withShortArray:(IOSShortArray *)data {
  jbyte i;
  
#line 223
  jbyte j;
  for (j = 0; j < SABER_KEYBYTES_; j++) {
    
#line 226
    for (i = 0; i < 8; i++) {
      
#line 228
      *IOSByteArray_GetRef(nil_chk(bytes), j) = (jbyte) (IOSByteArray_Get(bytes, j) | (JreLShift32((IOSShortArray_Get(nil_chk(data), j * 8 + i) & (jint) 0x01), i)));
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgBouncycastlePqcCryptoSaberSABEREngine:);
  methods[1].selector = @selector(POLT2BSWithByteArray:withInt:withShortArray:);
  methods[2].selector = @selector(BS2POLTWithByteArray:withInt:withShortArray:);
  methods[3].selector = @selector(POLq2BSWithByteArray:withInt:withShortArray:);
  methods[4].selector = @selector(BS2POLqWithByteArray:withInt:withShortArray:);
  methods[5].selector = @selector(POLp2BSWithByteArray:withInt:withShortArray:);
  methods[6].selector = @selector(BS2POLpWithByteArray:withInt:withShortArray:);
  methods[7].selector = @selector(POLVECq2BSWithByteArray:withShortArray2:);
  methods[8].selector = @selector(BS2POLVECqWithByteArray:withInt:withShortArray2:);
  methods[9].selector = @selector(POLVECp2BSWithByteArray:withShortArray2:);
  methods[10].selector = @selector(BS2POLVECpWithByteArray:withShortArray2:);
  methods[11].selector = @selector(BS2POLmsgWithByteArray:withShortArray:);
  methods[12].selector = @selector(POLmsg2BSWithByteArray:withShortArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SABER_N_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_L_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_ET_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_POLYBYTES_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_EP_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_KEYBYTES_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcCryptoSaberSABEREngine;", "POLT2BS", "[BI[S", "BS2POLT", "POLq2BS", "BS2POLq", "POLp2BS", "BS2POLp", "POLVECq2BS", "[B[[S", "BS2POLVECq", "[BI[[S", "POLVECp2BS", "BS2POLVECp", "BS2POLmsg", "[B[S", "POLmsg2BS" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSaberUtils = { "Utils", "org.bouncycastle.pqc.crypto.saber", ptrTable, methods, fields, 7, 0x0, 13, 6, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSaberUtils;
}

@end


#line 13
void OrgBouncycastlePqcCryptoSaberUtils_initPackagePrivateWithOrgBouncycastlePqcCryptoSaberSABEREngine_(OrgBouncycastlePqcCryptoSaberUtils *self, OrgBouncycastlePqcCryptoSaberSABEREngine *engine) {
  NSObject_init(self);
  self->SABER_N_ = [((OrgBouncycastlePqcCryptoSaberSABEREngine *) nil_chk(engine)) getSABER_N];
  self->SABER_L_ = [engine getSABER_L];
  self->SABER_ET_ = [engine getSABER_ET];
  self->SABER_POLYBYTES_ = [engine getSABER_POLYBYTES];
  self->SABER_EP_ = [engine getSABER_EP];
  self->SABER_KEYBYTES_ = [engine getSABER_KEYBYTES];
}


#line 13
OrgBouncycastlePqcCryptoSaberUtils *new_OrgBouncycastlePqcCryptoSaberUtils_initPackagePrivateWithOrgBouncycastlePqcCryptoSaberSABEREngine_(OrgBouncycastlePqcCryptoSaberSABEREngine *engine) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSaberUtils, initPackagePrivateWithOrgBouncycastlePqcCryptoSaberSABEREngine_, engine)
}


#line 13
OrgBouncycastlePqcCryptoSaberUtils *create_OrgBouncycastlePqcCryptoSaberUtils_initPackagePrivateWithOrgBouncycastlePqcCryptoSaberSABEREngine_(OrgBouncycastlePqcCryptoSaberSABEREngine *engine) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSaberUtils, initPackagePrivateWithOrgBouncycastlePqcCryptoSaberSABEREngine_, engine)
}


#line 103
void OrgBouncycastlePqcCryptoSaberUtils_POLq2BSWithByteArray_withInt_withShortArray_(OrgBouncycastlePqcCryptoSaberUtils *self, IOSByteArray *bytes, jint byteIndex, IOSShortArray *data) {
  
#line 105
  jshort j;
  
#line 105
  jshort offset_byte;
  
#line 105
  jshort offset_data;
  for (j = 0; j < JreIntDiv(self->SABER_N_, 8); j++) {
    
#line 108
    offset_byte = (jshort) (13 * j);
    offset_data = (jshort) (8 * j);
    *IOSByteArray_GetRef(nil_chk(bytes), byteIndex + offset_byte + 0) = (jbyte) (IOSShortArray_Get(nil_chk(data), offset_data + 0) & ((jint) 0xff));
    *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 1) = (jbyte) (((JreRShift32(IOSShortArray_Get(data, offset_data + 0), 8)) & (jint) 0x1f) | (JreLShift32((IOSShortArray_Get(data, offset_data + 1) & (jint) 0x07), 5)));
    *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 2) = (jbyte) ((JreRShift32(IOSShortArray_Get(data, offset_data + 1), 3)) & (jint) 0xff);
    *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 3) = (jbyte) (((JreRShift32(IOSShortArray_Get(data, offset_data + 1), 11)) & (jint) 0x03) | (JreLShift32((IOSShortArray_Get(data, offset_data + 2) & (jint) 0x3f), 2)));
    *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 4) = (jbyte) (((JreRShift32(IOSShortArray_Get(data, offset_data + 2), 6)) & (jint) 0x7f) | (JreLShift32((IOSShortArray_Get(data, offset_data + 3) & (jint) 0x01), 7)));
    *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 5) = (jbyte) ((JreRShift32(IOSShortArray_Get(data, offset_data + 3), 1)) & (jint) 0xff);
    *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 6) = (jbyte) (((JreRShift32(IOSShortArray_Get(data, offset_data + 3), 9)) & (jint) 0x0f) | (JreLShift32((IOSShortArray_Get(data, offset_data + 4) & (jint) 0x0f), 4)));
    *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 7) = (jbyte) ((JreRShift32(IOSShortArray_Get(data, offset_data + 4), 4)) & (jint) 0xff);
    *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 8) = (jbyte) (((JreRShift32(IOSShortArray_Get(data, offset_data + 4), 12)) & (jint) 0x01) | (JreLShift32((IOSShortArray_Get(data, offset_data + 5) & (jint) 0x7f), 1)));
    *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 9) = (jbyte) (((JreRShift32(IOSShortArray_Get(data, offset_data + 5), 7)) & (jint) 0x3f) | (JreLShift32((IOSShortArray_Get(data, offset_data + 6) & (jint) 0x03), 6)));
    *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 10) = (jbyte) ((JreRShift32(IOSShortArray_Get(data, offset_data + 6), 2)) & (jint) 0xff);
    *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 11) = (jbyte) (((JreRShift32(IOSShortArray_Get(data, offset_data + 6), 10)) & (jint) 0x07) | (JreLShift32((IOSShortArray_Get(data, offset_data + 7) & (jint) 0x1f), 3)));
    *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 12) = (jbyte) ((JreRShift32(IOSShortArray_Get(data, offset_data + 7), 5)) & (jint) 0xff);
  }
}


#line 126
void OrgBouncycastlePqcCryptoSaberUtils_BS2POLqWithByteArray_withInt_withShortArray_(OrgBouncycastlePqcCryptoSaberUtils *self, IOSByteArray *bytes, jint byteIndex, IOSShortArray *data) {
  
#line 128
  jshort j;
  
#line 128
  jshort offset_byte;
  
#line 128
  jshort offset_data;
  for (j = 0; j < JreIntDiv(self->SABER_N_, 8); j++) {
    
#line 131
    offset_byte = (jshort) (13 * j);
    offset_data = (jshort) (8 * j);
    *IOSShortArray_GetRef(nil_chk(data), offset_data + 0) = (jshort) ((IOSByteArray_Get(nil_chk(bytes), byteIndex + offset_byte + 0) & ((jint) 0xff)) | (JreLShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 1) & (jint) 0x1f), 8)));
    *IOSShortArray_GetRef(data, offset_data + 1) = (jshort) (((JreRShift32(IOSByteArray_Get(bytes, byteIndex + offset_byte + 1), 5)) & ((jint) 0x07)) | (JreLShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 2) & (jint) 0xff), 3)) | (JreLShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 3) & (jint) 0x03), 11)));
    *IOSShortArray_GetRef(data, offset_data + 2) = (jshort) (((JreRShift32(IOSByteArray_Get(bytes, byteIndex + offset_byte + 3), 2)) & ((jint) 0x3f)) | (JreLShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 4) & (jint) 0x7f), 6)));
    *IOSShortArray_GetRef(data, offset_data + 3) = (jshort) (((JreRShift32(IOSByteArray_Get(bytes, byteIndex + offset_byte + 4), 7)) & ((jint) 0x01)) | (JreLShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 5) & (jint) 0xff), 1)) | (JreLShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 6) & (jint) 0x0f), 9)));
    *IOSShortArray_GetRef(data, offset_data + 4) = (jshort) (((JreRShift32(IOSByteArray_Get(bytes, byteIndex + offset_byte + 6), 4)) & ((jint) 0x0f)) | (JreLShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 7) & (jint) 0xff), 4)) | (JreLShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 8) & (jint) 0x01), 12)));
    *IOSShortArray_GetRef(data, offset_data + 5) = (jshort) (((JreRShift32(IOSByteArray_Get(bytes, byteIndex + offset_byte + 8), 1)) & ((jint) 0x7f)) | (JreLShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 9) & (jint) 0x3f), 7)));
    *IOSShortArray_GetRef(data, offset_data + 6) = (jshort) (((JreRShift32(IOSByteArray_Get(bytes, byteIndex + offset_byte + 9), 6)) & ((jint) 0x03)) | (JreLShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 10) & (jint) 0xff), 2)) | (JreLShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 11) & (jint) 0x07), 10)));
    *IOSShortArray_GetRef(data, offset_data + 7) = (jshort) (((JreRShift32(IOSByteArray_Get(bytes, byteIndex + offset_byte + 11), 3)) & ((jint) 0x1f)) | (JreLShift32((IOSByteArray_Get(bytes, byteIndex + offset_byte + 12) & (jint) 0xff), 5)));
  }
}


#line 144
void OrgBouncycastlePqcCryptoSaberUtils_POLp2BSWithByteArray_withInt_withShortArray_(OrgBouncycastlePqcCryptoSaberUtils *self, IOSByteArray *bytes, jint byteIndex, IOSShortArray *data) {
  
#line 146
  jshort j;
  
#line 146
  jshort offset_byte;
  
#line 146
  jshort offset_data;
  for (j = 0; j < JreIntDiv(self->SABER_N_, 4); j++) {
    
#line 149
    offset_byte = (jshort) (5 * j);
    offset_data = (jshort) (4 * j);
    *IOSByteArray_GetRef(nil_chk(bytes), byteIndex + offset_byte + 0) = (jbyte) (IOSShortArray_Get(nil_chk(data), offset_data + 0) & ((jint) 0xff));
    *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 1) = (jbyte) (((JreRShift32(IOSShortArray_Get(data, offset_data + 0), 8)) & (jint) 0x03) | (JreLShift32((IOSShortArray_Get(data, offset_data + 1) & (jint) 0x3f), 2)));
    *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 2) = (jbyte) (((JreRShift32(IOSShortArray_Get(data, offset_data + 1), 6)) & (jint) 0x0f) | (JreLShift32((IOSShortArray_Get(data, offset_data + 2) & (jint) 0x0f), 4)));
    *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 3) = (jbyte) (((JreRShift32(IOSShortArray_Get(data, offset_data + 2), 4)) & (jint) 0x3f) | (JreLShift32((IOSShortArray_Get(data, offset_data + 3) & (jint) 0x03), 6)));
    *IOSByteArray_GetRef(bytes, byteIndex + offset_byte + 4) = (jbyte) ((JreRShift32(IOSShortArray_Get(data, offset_data + 3), 2)) & (jint) 0xff);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSaberUtils)
