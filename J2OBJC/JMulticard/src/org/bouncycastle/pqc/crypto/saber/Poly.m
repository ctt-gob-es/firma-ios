//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/saber/Poly.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/bouncycastle/crypto/Xof.h"
#include "org/bouncycastle/crypto/digests/SHAKEDigest.h"
#include "org/bouncycastle/pqc/crypto/saber/Poly.h"
#include "org/bouncycastle/pqc/crypto/saber/SABEREngine.h"
#include "org/bouncycastle/pqc/crypto/saber/Utils.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/saber/Poly must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoSaberPoly () {
 @public
  jint N_RES_;
  jint N_SB_;
  jint N_SB_RES_;
  jint SABER_N_;
  jint SABER_L_;
  OrgBouncycastlePqcCryptoSaberSABEREngine *engine_;
  OrgBouncycastlePqcCryptoSaberUtils *utils_;
}

- (jlong)load_littleendianWithByteArray:(IOSByteArray *)x
                                withInt:(jint)offset
                                withInt:(jint)bytes;

- (void)cbdWithShortArray:(IOSShortArray *)s
            withByteArray:(IOSByteArray *)buf
                  withInt:(jint)offset;

- (jshort)OVERFLOWING_MULWithInt:(jint)x
                         withInt:(jint)y;

- (void)karatsuba_simpleWithIntArray:(IOSIntArray *)a_1
                        withIntArray:(IOSIntArray *)b_1
                        withIntArray:(IOSIntArray *)result_final;

- (void)toom_cook_4wayWithShortArray:(IOSShortArray *)a1
                      withShortArray:(IOSShortArray *)b1
                      withShortArray:(IOSShortArray *)result;

- (void)poly_mul_accWithShortArray:(IOSShortArray *)a
                    withShortArray:(IOSShortArray *)b
                    withShortArray:(IOSShortArray *)res;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSaberPoly, engine_, OrgBouncycastlePqcCryptoSaberSABEREngine *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSaberPoly, utils_, OrgBouncycastlePqcCryptoSaberUtils *)

inline jint OrgBouncycastlePqcCryptoSaberPoly_get_KARATSUBA_N(void);
#define OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSaberPoly, KARATSUBA_N, jint)

inline jint OrgBouncycastlePqcCryptoSaberPoly_get_SCHB_N(void);
inline jint OrgBouncycastlePqcCryptoSaberPoly_set_SCHB_N(jint value);
inline jint *OrgBouncycastlePqcCryptoSaberPoly_getRef_SCHB_N(void);
static jint OrgBouncycastlePqcCryptoSaberPoly_SCHB_N = 16;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgBouncycastlePqcCryptoSaberPoly, SCHB_N, jint)

__attribute__((unused)) static jlong OrgBouncycastlePqcCryptoSaberPoly_load_littleendianWithByteArray_withInt_withInt_(OrgBouncycastlePqcCryptoSaberPoly *self, IOSByteArray *x, jint offset, jint bytes);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoSaberPoly_cbdWithShortArray_withByteArray_withInt_(OrgBouncycastlePqcCryptoSaberPoly *self, IOSShortArray *s, IOSByteArray *buf, jint offset);

__attribute__((unused)) static jshort OrgBouncycastlePqcCryptoSaberPoly_OVERFLOWING_MULWithInt_withInt_(OrgBouncycastlePqcCryptoSaberPoly *self, jint x, jint y);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoSaberPoly_karatsuba_simpleWithIntArray_withIntArray_withIntArray_(OrgBouncycastlePqcCryptoSaberPoly *self, IOSIntArray *a_1, IOSIntArray *b_1, IOSIntArray *result_final);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoSaberPoly_toom_cook_4wayWithShortArray_withShortArray_withShortArray_(OrgBouncycastlePqcCryptoSaberPoly *self, IOSShortArray *a1, IOSShortArray *b1, IOSShortArray *result);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoSaberPoly_poly_mul_accWithShortArray_withShortArray_withShortArray_(OrgBouncycastlePqcCryptoSaberPoly *self, IOSShortArray *a, IOSShortArray *b, IOSShortArray *res);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/saber/Poly.java"


#line 6
@implementation OrgBouncycastlePqcCryptoSaberPoly


#line 22
- (instancetype)initPackagePrivateWithOrgBouncycastlePqcCryptoSaberSABEREngine:(OrgBouncycastlePqcCryptoSaberSABEREngine *)engine {
  OrgBouncycastlePqcCryptoSaberPoly_initPackagePrivateWithOrgBouncycastlePqcCryptoSaberSABEREngine_(self, engine);
  return self;
}


#line 33
- (void)GenMatrixWithShortArray3:(IOSObjectArray *)A
                   withByteArray:(IOSByteArray *)seed {
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:SABER_L_ * [((OrgBouncycastlePqcCryptoSaberSABEREngine *) nil_chk(engine_)) getSABER_POLYVECBYTES]];
  jint i;
  
#line 38
  id<OrgBouncycastleCryptoXof> digest = new_OrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(128);
  [digest updateWithByteArray:seed withInt:0 withInt:[engine_ getSABER_SEEDBYTES]];
  [digest doFinalWithByteArray:buf withInt:0 withInt:buf->size_];
  
#line 42
  for (i = 0; i < SABER_L_; i++) {
    
#line 44
    [((OrgBouncycastlePqcCryptoSaberUtils *) nil_chk(utils_)) BS2POLVECqWithByteArray:buf withInt:i * [engine_ getSABER_POLYVECBYTES] withShortArray2:IOSObjectArray_Get(nil_chk(A), i)];
  }
}


#line 48
- (void)GenSecretWithShortArray2:(IOSObjectArray *)s
                   withByteArray:(IOSByteArray *)seed {
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:SABER_L_ * [((OrgBouncycastlePqcCryptoSaberSABEREngine *) nil_chk(engine_)) getSABER_POLYCOINBYTES]];
  jint i;
  id<OrgBouncycastleCryptoXof> digest = new_OrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(128);
  [digest updateWithByteArray:seed withInt:0 withInt:[engine_ getSABER_NOISE_SEEDBYTES]];
  [digest doFinalWithByteArray:buf withInt:0 withInt:buf->size_];
  
#line 56
  for (i = 0; i < SABER_L_; i++) {
    
#line 58
    OrgBouncycastlePqcCryptoSaberPoly_cbdWithShortArray_withByteArray_withInt_(self, IOSObjectArray_Get(nil_chk(s), i), buf, i * [engine_ getSABER_POLYCOINBYTES]);
  }
}


#line 63
- (jlong)load_littleendianWithByteArray:(IOSByteArray *)x
                                withInt:(jint)offset
                                withInt:(jint)bytes {
  return OrgBouncycastlePqcCryptoSaberPoly_load_littleendianWithByteArray_withInt_withInt_(self, x, offset, bytes);
}


#line 74
- (void)cbdWithShortArray:(IOSShortArray *)s
            withByteArray:(IOSByteArray *)buf
                  withInt:(jint)offset {
  OrgBouncycastlePqcCryptoSaberPoly_cbdWithShortArray_withByteArray_withInt_(self, s, buf, offset);
}


#line 156
- (jshort)OVERFLOWING_MULWithInt:(jint)x
                         withInt:(jint)y {
  return OrgBouncycastlePqcCryptoSaberPoly_OVERFLOWING_MULWithInt_withInt_(self, x, y);
}

- (void)karatsuba_simpleWithIntArray:(IOSIntArray *)a_1
                        withIntArray:(IOSIntArray *)b_1
                        withIntArray:(IOSIntArray *)result_final {
  OrgBouncycastlePqcCryptoSaberPoly_karatsuba_simpleWithIntArray_withIntArray_withIntArray_(self, a_1, b_1, result_final);
}


#line 254
- (void)toom_cook_4wayWithShortArray:(IOSShortArray *)a1
                      withShortArray:(IOSShortArray *)b1
                      withShortArray:(IOSShortArray *)result {
  OrgBouncycastlePqcCryptoSaberPoly_toom_cook_4wayWithShortArray_withShortArray_withShortArray_(self, a1, b1, result);
}


#line 387
- (void)poly_mul_accWithShortArray:(IOSShortArray *)a
                    withShortArray:(IOSShortArray *)b
                    withShortArray:(IOSShortArray *)res {
  OrgBouncycastlePqcCryptoSaberPoly_poly_mul_accWithShortArray_withShortArray_withShortArray_(self, a, b, res);
}


#line 402
- (void)MatrixVectorMulWithShortArray3:(IOSObjectArray *)A
                       withShortArray2:(IOSObjectArray *)s
                       withShortArray2:(IOSObjectArray *)res
                               withInt:(jint)transpose {
  
#line 404
  jint i;
  
#line 404
  jint j;
  for (i = 0; i < SABER_L_; i++) {
    
#line 407
    for (j = 0; j < SABER_L_; j++) {
      
#line 409
      if (transpose == 1) {
        
#line 411
        OrgBouncycastlePqcCryptoSaberPoly_poly_mul_accWithShortArray_withShortArray_withShortArray_(self, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(A), j)), i), IOSObjectArray_Get(nil_chk(s), j), IOSObjectArray_Get(nil_chk(res), i));
      }
      else {
        
#line 415
        OrgBouncycastlePqcCryptoSaberPoly_poly_mul_accWithShortArray_withShortArray_withShortArray_(self, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(A), i)), j), IOSObjectArray_Get(nil_chk(s), j), IOSObjectArray_Get(nil_chk(res), i));
      }
    }
  }
}


#line 421
- (void)InnerProdWithShortArray2:(IOSObjectArray *)b
                 withShortArray2:(IOSObjectArray *)s
                  withShortArray:(IOSShortArray *)res {
  
#line 423
  jint j;
  for (j = 0; j < SABER_L_; j++) {
    
#line 426
    OrgBouncycastlePqcCryptoSaberPoly_poly_mul_accWithShortArray_withShortArray_withShortArray_(self, IOSObjectArray_Get(nil_chk(b), j), IOSObjectArray_Get(nil_chk(s), j), res);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "S", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgBouncycastlePqcCryptoSaberSABEREngine:);
  methods[1].selector = @selector(GenMatrixWithShortArray3:withByteArray:);
  methods[2].selector = @selector(GenSecretWithShortArray2:withByteArray:);
  methods[3].selector = @selector(load_littleendianWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(cbdWithShortArray:withByteArray:withInt:);
  methods[5].selector = @selector(OVERFLOWING_MULWithInt:withInt:);
  methods[6].selector = @selector(karatsuba_simpleWithIntArray:withIntArray:withIntArray:);
  methods[7].selector = @selector(toom_cook_4wayWithShortArray:withShortArray:withShortArray:);
  methods[8].selector = @selector(poly_mul_accWithShortArray:withShortArray:withShortArray:);
  methods[9].selector = @selector(MatrixVectorMulWithShortArray3:withShortArray2:withShortArray2:withInt:);
  methods[10].selector = @selector(InnerProdWithShortArray2:withShortArray2:withShortArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "KARATSUBA_N", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 0x1a, -1, -1, -1, -1 },
    { "SCHB_N", "I", .constantValue.asLong = 0, 0xa, -1, 20, -1, -1 },
    { "N_RES_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "N_SB_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "N_SB_RES_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_N_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SABER_L_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "engine_", "LOrgBouncycastlePqcCryptoSaberSABEREngine;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "utils_", "LOrgBouncycastlePqcCryptoSaberUtils;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcCryptoSaberSABEREngine;", "GenMatrix", "[[[S[B", "GenSecret", "[[S[B", "load_littleendian", "[BII", "cbd", "[S[BI", "OVERFLOWING_MUL", "II", "karatsuba_simple", "[I[I[I", "toom_cook_4way", "[S[S[S", "poly_mul_acc", "MatrixVectorMul", "[[[S[[S[[SI", "InnerProd", "[[S[[S[S", &OrgBouncycastlePqcCryptoSaberPoly_SCHB_N };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSaberPoly = { "Poly", "org.bouncycastle.pqc.crypto.saber", ptrTable, methods, fields, 7, 0x0, 11, 9, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSaberPoly;
}

@end


#line 22
void OrgBouncycastlePqcCryptoSaberPoly_initPackagePrivateWithOrgBouncycastlePqcCryptoSaberSABEREngine_(OrgBouncycastlePqcCryptoSaberPoly *self, OrgBouncycastlePqcCryptoSaberSABEREngine *engine) {
  NSObject_init(self);
  self->engine_ = engine;
  self->SABER_L_ = [((OrgBouncycastlePqcCryptoSaberSABEREngine *) nil_chk(engine)) getSABER_L];
  self->SABER_N_ = [engine getSABER_N];
  self->N_RES_ = (JreLShift32(self->SABER_N_, 1));
  self->N_SB_ = (JreRShift32(self->SABER_N_, 2));
  self->N_SB_RES_ = (2 * self->N_SB_ - 1);
  self->utils_ = [engine getUtils];
}


#line 22
OrgBouncycastlePqcCryptoSaberPoly *new_OrgBouncycastlePqcCryptoSaberPoly_initPackagePrivateWithOrgBouncycastlePqcCryptoSaberSABEREngine_(OrgBouncycastlePqcCryptoSaberSABEREngine *engine) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSaberPoly, initPackagePrivateWithOrgBouncycastlePqcCryptoSaberSABEREngine_, engine)
}


#line 22
OrgBouncycastlePqcCryptoSaberPoly *create_OrgBouncycastlePqcCryptoSaberPoly_initPackagePrivateWithOrgBouncycastlePqcCryptoSaberSABEREngine_(OrgBouncycastlePqcCryptoSaberSABEREngine *engine) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSaberPoly, initPackagePrivateWithOrgBouncycastlePqcCryptoSaberSABEREngine_, engine)
}


#line 63
jlong OrgBouncycastlePqcCryptoSaberPoly_load_littleendianWithByteArray_withInt_withInt_(OrgBouncycastlePqcCryptoSaberPoly *self, IOSByteArray *x, jint offset, jint bytes) {
  
#line 65
  jint i;
  jlong r = (IOSByteArray_Get(nil_chk(x), offset + 0) & (jint) 0xff);
  for (i = 1; i < bytes; i++) {
    
#line 69
    r |= JreLShift64(((jlong) (IOSByteArray_Get(x, offset + i) & (jint) 0xff)), (8 * i));
  }
  return r;
}


#line 74
void OrgBouncycastlePqcCryptoSaberPoly_cbdWithShortArray_withByteArray_withInt_(OrgBouncycastlePqcCryptoSaberPoly *self, IOSShortArray *s, IOSByteArray *buf, jint offset) {
  
#line 76
  IOSIntArray *a = [IOSIntArray newArrayWithLength:4];
  
#line 76
  IOSIntArray *b = [IOSIntArray newArrayWithLength:4];
  jint i;
  
#line 77
  jint j;
  if ([((OrgBouncycastlePqcCryptoSaberSABEREngine *) nil_chk(self->engine_)) getSABER_MU] == 6) {
    
#line 80
    jint t;
    
#line 80
    jint d;
    for (i = 0; i < JreIntDiv(self->SABER_N_, 4); i++) {
      
#line 83
      t = (jint) OrgBouncycastlePqcCryptoSaberPoly_load_littleendianWithByteArray_withInt_withInt_(self, buf, offset + 3 * i, 3);
      d = 0;
      for (j = 0; j < 3; j++)
#line 86
      d += (JreRShift32(t, j)) & (jint) 0x249249;
      
#line 88
      *IOSIntArray_GetRef(a, 0) = d & (jint) 0x7;
      *IOSIntArray_GetRef(b, 0) = (JreURShift32(d, 3)) & (jint) 0x7;
      *IOSIntArray_GetRef(a, 1) = (JreURShift32(d, 6)) & (jint) 0x7;
      *IOSIntArray_GetRef(b, 1) = (JreURShift32(d, 9)) & (jint) 0x7;
      *IOSIntArray_GetRef(a, 2) = (JreURShift32(d, 12)) & (jint) 0x7;
      *IOSIntArray_GetRef(b, 2) = (JreURShift32(d, 15)) & (jint) 0x7;
      *IOSIntArray_GetRef(a, 3) = (JreURShift32(d, 18)) & (jint) 0x7;
      *IOSIntArray_GetRef(b, 3) = (JreURShift32(d, 21));
      
#line 97
      *IOSShortArray_GetRef(nil_chk(s), 4 * i + 0) = (jshort) (IOSIntArray_Get(a, 0) - IOSIntArray_Get(b, 0));
      *IOSShortArray_GetRef(s, 4 * i + 1) = (jshort) (IOSIntArray_Get(a, 1) - IOSIntArray_Get(b, 1));
      *IOSShortArray_GetRef(s, 4 * i + 2) = (jshort) (IOSIntArray_Get(a, 2) - IOSIntArray_Get(b, 2));
      *IOSShortArray_GetRef(s, 4 * i + 3) = (jshort) (IOSIntArray_Get(a, 3) - IOSIntArray_Get(b, 3));
    }
  }
  else if ([self->engine_ getSABER_MU] == 8) {
    
#line 105
    jint t;
    
#line 105
    jint d;
    for (i = 0; i < JreIntDiv(self->SABER_N_, 4); i++) {
      
#line 109
      t = (jint) OrgBouncycastlePqcCryptoSaberPoly_load_littleendianWithByteArray_withInt_withInt_(self, buf, offset + 4 * i, 4);
      d = 0;
      for (j = 0; j < 4; j++)
#line 112
      d += (JreURShift32(t, j)) & (jint) 0x11111111;
      
#line 114
      *IOSIntArray_GetRef(a, 0) = d & (jint) 0xf;
      *IOSIntArray_GetRef(b, 0) = (JreURShift32(d, 4)) & (jint) 0xf;
      *IOSIntArray_GetRef(a, 1) = (JreURShift32(d, 8)) & (jint) 0xf;
      *IOSIntArray_GetRef(b, 1) = (JreURShift32(d, 12)) & (jint) 0xf;
      *IOSIntArray_GetRef(a, 2) = (JreURShift32(d, 16)) & (jint) 0xf;
      *IOSIntArray_GetRef(b, 2) = (JreURShift32(d, 20)) & (jint) 0xf;
      *IOSIntArray_GetRef(a, 3) = (JreURShift32(d, 24)) & (jint) 0xf;
      *IOSIntArray_GetRef(b, 3) = (JreURShift32(d, 28));
      
#line 123
      *IOSShortArray_GetRef(nil_chk(s), 4 * i + 0) = (jshort) (IOSIntArray_Get(a, 0) - IOSIntArray_Get(b, 0));
      *IOSShortArray_GetRef(s, 4 * i + 1) = (jshort) (IOSIntArray_Get(a, 1) - IOSIntArray_Get(b, 1));
      *IOSShortArray_GetRef(s, 4 * i + 2) = (jshort) (IOSIntArray_Get(a, 2) - IOSIntArray_Get(b, 2));
      *IOSShortArray_GetRef(s, 4 * i + 3) = (jshort) (IOSIntArray_Get(a, 3) - IOSIntArray_Get(b, 3));
    }
  }
  else if ([self->engine_ getSABER_MU] == 10) {
    
#line 131
    jlong t;
    
#line 131
    jlong d;
    for (i = 0; i < JreIntDiv(self->SABER_N_, 4); i++) {
      
#line 134
      t = OrgBouncycastlePqcCryptoSaberPoly_load_littleendianWithByteArray_withInt_withInt_(self, buf, offset + 5 * i, 5);
      d = 0;
      for (j = 0; j < 5; j++)
#line 137
      d += (JreURShift64(t, j)) & (jlong) 0x0842108421LL;
      
#line 139
      *IOSIntArray_GetRef(a, 0) = (jint) (d & (jint) 0x1f);
      *IOSIntArray_GetRef(b, 0) = (jint) ((JreURShift64(d, 5)) & (jint) 0x1f);
      *IOSIntArray_GetRef(a, 1) = (jint) ((JreURShift64(d, 10)) & (jint) 0x1f);
      *IOSIntArray_GetRef(b, 1) = (jint) ((JreURShift64(d, 15)) & (jint) 0x1f);
      *IOSIntArray_GetRef(a, 2) = (jint) ((JreURShift64(d, 20)) & (jint) 0x1f);
      *IOSIntArray_GetRef(b, 2) = (jint) ((JreURShift64(d, 25)) & (jint) 0x1f);
      *IOSIntArray_GetRef(a, 3) = (jint) ((JreURShift64(d, 30)) & (jint) 0x1f);
      *IOSIntArray_GetRef(b, 3) = (jint) (JreURShift64(d, 35));
      
#line 148
      *IOSShortArray_GetRef(nil_chk(s), 4 * i + 0) = (jshort) (IOSIntArray_Get(a, 0) - IOSIntArray_Get(b, 0));
      *IOSShortArray_GetRef(s, 4 * i + 1) = (jshort) (IOSIntArray_Get(a, 1) - IOSIntArray_Get(b, 1));
      *IOSShortArray_GetRef(s, 4 * i + 2) = (jshort) (IOSIntArray_Get(a, 2) - IOSIntArray_Get(b, 2));
      *IOSShortArray_GetRef(s, 4 * i + 3) = (jshort) (IOSIntArray_Get(a, 3) - IOSIntArray_Get(b, 3));
    }
  }
}


#line 156
jshort OrgBouncycastlePqcCryptoSaberPoly_OVERFLOWING_MULWithInt_withInt_(OrgBouncycastlePqcCryptoSaberPoly *self, jint x, jint y) {
  
#line 158
  return (jshort) (x * y);
}


#line 161
void OrgBouncycastlePqcCryptoSaberPoly_karatsuba_simpleWithIntArray_withIntArray_withIntArray_(OrgBouncycastlePqcCryptoSaberPoly *self, IOSIntArray *a_1, IOSIntArray *b_1, IOSIntArray *result_final) {
  
#line 163
  IOSIntArray *d01 = [IOSIntArray newArrayWithLength:JreIntDiv(OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 2) - 1];
  IOSIntArray *d0123 = [IOSIntArray newArrayWithLength:JreIntDiv(OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 2) - 1];
  IOSIntArray *d23 = [IOSIntArray newArrayWithLength:JreIntDiv(OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 2) - 1];
  IOSIntArray *result_d01 = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N - 1];
  
#line 168
  jint i;
  
#line 168
  jint j;
  jint acc1;
  
#line 169
  jint acc2;
  
#line 169
  jint acc3;
  
#line 169
  jint acc4;
  
#line 169
  jint acc5;
  
#line 169
  jint acc6;
  
#line 169
  jint acc7;
  
#line 169
  jint acc8;
  
#line 169
  jint acc9;
  
#line 169
  jint acc10;
  
#line 171
  for (i = 0; i < JreIntDiv(OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4); i++) {
    
#line 173
    acc1 = IOSIntArray_Get(nil_chk(a_1), i);
    acc2 = IOSIntArray_Get(a_1, i + JreIntDiv(OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4));
    acc3 = IOSIntArray_Get(a_1, i + JreIntDiv(2 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4));
    acc4 = IOSIntArray_Get(a_1, i + JreIntDiv(3 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4));
    for (j = 0; j < JreIntDiv(OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4); j++) {
      
#line 180
      acc5 = IOSIntArray_Get(nil_chk(b_1), j);
      acc6 = IOSIntArray_Get(b_1, j + JreIntDiv(OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4));
      
#line 183
      *IOSIntArray_GetRef(nil_chk(result_final), i + j + JreIntDiv(0 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) = (IOSIntArray_Get(result_final, i + j + JreIntDiv(0 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) + OrgBouncycastlePqcCryptoSaberPoly_OVERFLOWING_MULWithInt_withInt_(self, acc1, acc5));
      *IOSIntArray_GetRef(result_final, i + j + JreIntDiv(2 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) = (IOSIntArray_Get(result_final, i + j + JreIntDiv(2 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) + OrgBouncycastlePqcCryptoSaberPoly_OVERFLOWING_MULWithInt_withInt_(self, acc2, acc6));
      
#line 186
      acc7 = (acc5 + acc6);
      acc8 = (acc1 + acc2);
      *IOSIntArray_GetRef(d01, i + j) = (jint) (IOSIntArray_Get(d01, i + j) + (acc7 * (jlong) acc8));
      
#line 191
      acc7 = IOSIntArray_Get(b_1, j + JreIntDiv(2 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4));
      acc8 = IOSIntArray_Get(b_1, j + JreIntDiv(3 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4));
      *IOSIntArray_GetRef(result_final, i + j + JreIntDiv(4 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) =
#line 194
      (IOSIntArray_Get(result_final, i + j + JreIntDiv(4 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) + OrgBouncycastlePqcCryptoSaberPoly_OVERFLOWING_MULWithInt_withInt_(self,
#line 195
      acc7, acc3));
      
#line 197
      *IOSIntArray_GetRef(result_final, i + j + JreIntDiv(6 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) =
#line 198
      (IOSIntArray_Get(result_final, i + j + JreIntDiv(6 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) + OrgBouncycastlePqcCryptoSaberPoly_OVERFLOWING_MULWithInt_withInt_(self,
#line 199
      acc8, acc4));
      
#line 201
      acc9 = (acc3 + acc4);
      acc10 = (acc7 + acc8);
      *IOSIntArray_GetRef(d23, i + j) = (IOSIntArray_Get(d23, i + j) + OrgBouncycastlePqcCryptoSaberPoly_OVERFLOWING_MULWithInt_withInt_(self, acc9, acc10));
      
#line 206
      acc5 = (acc5 + acc7);
      acc7 = (acc1 + acc3);
      *IOSIntArray_GetRef(result_d01, i + j + JreIntDiv(0 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) =
#line 209
      (IOSIntArray_Get(result_d01, i + j + JreIntDiv(0 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) + OrgBouncycastlePqcCryptoSaberPoly_OVERFLOWING_MULWithInt_withInt_(self,
#line 210
      acc5, acc7));
      
#line 212
      acc6 = (acc6 + acc8);
      acc8 = (acc2 + acc4);
      *IOSIntArray_GetRef(result_d01, i + j + JreIntDiv(2 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) =
#line 215
      (IOSIntArray_Get(result_d01, i + j + JreIntDiv(2 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) + OrgBouncycastlePqcCryptoSaberPoly_OVERFLOWING_MULWithInt_withInt_(self,
#line 216
      acc6, acc8));
      
#line 218
      acc5 = (acc5 + acc6);
      acc7 = (acc7 + acc8);
      *IOSIntArray_GetRef(d0123, i + j) = (IOSIntArray_Get(d0123, i + j) + OrgBouncycastlePqcCryptoSaberPoly_OVERFLOWING_MULWithInt_withInt_(self, acc5, acc7));
    }
  }
  
#line 226
  for (i = 0; i < JreIntDiv(OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 2) - 1; i++) {
    
#line 228
    *IOSIntArray_GetRef(d0123, i) = (IOSIntArray_Get(d0123, i) - IOSIntArray_Get(result_d01, i + JreIntDiv(0 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) - IOSIntArray_Get(result_d01, i + JreIntDiv(2 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)));
    *IOSIntArray_GetRef(d01, i) = (IOSIntArray_Get(d01, i) - IOSIntArray_Get(nil_chk(result_final), i + JreIntDiv(0 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) - IOSIntArray_Get(result_final, i + JreIntDiv(2 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)));
    *IOSIntArray_GetRef(d23, i) = (IOSIntArray_Get(d23, i) - IOSIntArray_Get(result_final, i + JreIntDiv(4 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) - IOSIntArray_Get(result_final, i + JreIntDiv(6 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)));
  }
  
#line 233
  for (i = 0; i < JreIntDiv(OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 2) - 1; i++) {
    
#line 235
    *IOSIntArray_GetRef(result_d01, i + JreIntDiv(1 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) = (IOSIntArray_Get(result_d01, i + JreIntDiv(1 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) + IOSIntArray_Get(d0123, i));
    *IOSIntArray_GetRef(nil_chk(result_final), i + JreIntDiv(1 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) = (IOSIntArray_Get(result_final, i + JreIntDiv(1 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) + IOSIntArray_Get(d01, i));
    *IOSIntArray_GetRef(result_final, i + JreIntDiv(5 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) = (IOSIntArray_Get(result_final, i + JreIntDiv(5 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 4)) + IOSIntArray_Get(d23, i));
  }
  
#line 241
  for (i = 0; i < OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N - 1; i++) {
    
#line 243
    *IOSIntArray_GetRef(result_d01, i) = (IOSIntArray_Get(result_d01, i) - IOSIntArray_Get(nil_chk(result_final), i) - IOSIntArray_Get(result_final, i + OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N));
  }
  
#line 246
  for (i = 0; i < OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N - 1; i++) {
    
#line 248
    *IOSIntArray_GetRef(nil_chk(result_final), i + JreIntDiv(1 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 2)) = (IOSIntArray_Get(result_final, i + JreIntDiv(1 * OrgBouncycastlePqcCryptoSaberPoly_KARATSUBA_N, 2)) + IOSIntArray_Get(result_d01, i));
  }
}


#line 254
void OrgBouncycastlePqcCryptoSaberPoly_toom_cook_4wayWithShortArray_withShortArray_withShortArray_(OrgBouncycastlePqcCryptoSaberPoly *self, IOSShortArray *a1, IOSShortArray *b1, IOSShortArray *result) {
  
#line 256
  jint inv3 = 43691;
  
#line 256
  jint inv9 = 36409;
  
#line 256
  jint inv15 = 61167;
  
#line 258
  IOSIntArray *aw1 = [IOSIntArray newArrayWithLength:self->N_SB_];
  
#line 258
  IOSIntArray *aw2 = [IOSIntArray newArrayWithLength:self->N_SB_];
  
#line 258
  IOSIntArray *aw3 = [IOSIntArray newArrayWithLength:self->N_SB_];
  
#line 258
  IOSIntArray *aw4 = [IOSIntArray newArrayWithLength:self->N_SB_];
  
#line 258
  IOSIntArray *aw5 = [IOSIntArray newArrayWithLength:self->N_SB_];
  
#line 258
  IOSIntArray *aw6 = [IOSIntArray newArrayWithLength:self->N_SB_];
  
#line 258
  IOSIntArray *aw7 = [IOSIntArray newArrayWithLength:self->N_SB_];
  
#line 266
  IOSIntArray *bw1 = [IOSIntArray newArrayWithLength:self->N_SB_];
  
#line 266
  IOSIntArray *bw2 = [IOSIntArray newArrayWithLength:self->N_SB_];
  
#line 266
  IOSIntArray *bw3 = [IOSIntArray newArrayWithLength:self->N_SB_];
  
#line 266
  IOSIntArray *bw4 = [IOSIntArray newArrayWithLength:self->N_SB_];
  
#line 266
  IOSIntArray *bw5 = [IOSIntArray newArrayWithLength:self->N_SB_];
  
#line 266
  IOSIntArray *bw6 = [IOSIntArray newArrayWithLength:self->N_SB_];
  
#line 266
  IOSIntArray *bw7 = [IOSIntArray newArrayWithLength:self->N_SB_];
  
#line 274
  IOSIntArray *w1 = [IOSIntArray newArrayWithLength:self->N_SB_RES_];
  
#line 274
  IOSIntArray *w2 = [IOSIntArray newArrayWithLength:self->N_SB_RES_];
  
#line 274
  IOSIntArray *w3 = [IOSIntArray newArrayWithLength:self->N_SB_RES_];
  
#line 274
  IOSIntArray *w4 = [IOSIntArray newArrayWithLength:self->N_SB_RES_];
  
#line 274
  IOSIntArray *w5 = [IOSIntArray newArrayWithLength:self->N_SB_RES_];
  
#line 274
  IOSIntArray *w6 = [IOSIntArray newArrayWithLength:self->N_SB_RES_];
  
#line 274
  IOSIntArray *w7 = [IOSIntArray newArrayWithLength:self->N_SB_RES_];
  
#line 282
  jint r0;
  
#line 282
  jint r1;
  
#line 282
  jint r2;
  
#line 282
  jint r3;
  
#line 282
  jint r4;
  
#line 282
  jint r5;
  
#line 282
  jint r6;
  
#line 282
  jint r7;
  IOSShortArray *C;
  C = result;
  
#line 286
  jint i;
  
#line 286
  jint j;
  
#line 289
  for (j = 0; j < self->N_SB_; ++j) {
    
#line 291
    r0 = IOSShortArray_Get(nil_chk(a1), j);
    r1 = IOSShortArray_Get(a1, j + self->N_SB_);
    r2 = IOSShortArray_Get(a1, j + self->N_SB_ * 2);
    r3 = IOSShortArray_Get(a1, j + self->N_SB_ * 3);
    r4 = (jshort) (r0 + r2);
    r5 = (jshort) (r1 + r3);
    r6 = (jshort) (r4 + r5);
    r7 = (jshort) (r4 - r5);
    *IOSIntArray_GetRef(aw3, j) = r6;
    *IOSIntArray_GetRef(aw4, j) = r7;
    r4 = (jshort) (JreLShift32(((JreLShift32(r0, 2)) + r2), 1));
    r5 = (jshort) ((JreLShift32(r1, 2)) + r3);
    r6 = (jshort) (r4 + r5);
    r7 = (jshort) (r4 - r5);
    *IOSIntArray_GetRef(aw5, j) = r6;
    *IOSIntArray_GetRef(aw6, j) = r7;
    r4 = (jshort) ((JreLShift32(r3, 3)) + (JreLShift32(r2, 2)) + (JreLShift32(r1, 1)) + r0);
    *IOSIntArray_GetRef(aw2, j) = r4;
    *IOSIntArray_GetRef(aw7, j) = r0;
    *IOSIntArray_GetRef(aw1, j) = r3;
  }
  for (j = 0; j < self->N_SB_; ++j) {
    
#line 314
    r0 = IOSShortArray_Get(nil_chk(b1), j);
    r1 = IOSShortArray_Get(b1, j + self->N_SB_);
    r2 = IOSShortArray_Get(b1, j + self->N_SB_ * 2);
    r3 = IOSShortArray_Get(b1, j + self->N_SB_ * 3);
    r4 = r0 + r2;
    r5 = r1 + r3;
    r6 = r4 + r5;
    r7 = r4 - r5;
    *IOSIntArray_GetRef(bw3, j) = r6;
    *IOSIntArray_GetRef(bw4, j) = r7;
    r4 = JreLShift32(((JreLShift32(r0, 2)) + r2), 1);
    r5 = (JreLShift32(r1, 2)) + r3;
    r6 = r4 + r5;
    r7 = r4 - r5;
    *IOSIntArray_GetRef(bw5, j) = r6;
    *IOSIntArray_GetRef(bw6, j) = r7;
    r4 = ((JreLShift32(r3, 3)) + (JreLShift32(r2, 2)) + (JreLShift32(r1, 1)) + r0);
    *IOSIntArray_GetRef(bw2, j) = r4;
    *IOSIntArray_GetRef(bw7, j) = r0;
    *IOSIntArray_GetRef(bw1, j) = r3;
  }
  
#line 338
  OrgBouncycastlePqcCryptoSaberPoly_karatsuba_simpleWithIntArray_withIntArray_withIntArray_(self, aw1, bw1, w1);
  OrgBouncycastlePqcCryptoSaberPoly_karatsuba_simpleWithIntArray_withIntArray_withIntArray_(self, aw2, bw2, w2);
  OrgBouncycastlePqcCryptoSaberPoly_karatsuba_simpleWithIntArray_withIntArray_withIntArray_(self, aw3, bw3, w3);
  OrgBouncycastlePqcCryptoSaberPoly_karatsuba_simpleWithIntArray_withIntArray_withIntArray_(self, aw4, bw4, w4);
  OrgBouncycastlePqcCryptoSaberPoly_karatsuba_simpleWithIntArray_withIntArray_withIntArray_(self, aw5, bw5, w5);
  OrgBouncycastlePqcCryptoSaberPoly_karatsuba_simpleWithIntArray_withIntArray_withIntArray_(self, aw6, bw6, w6);
  OrgBouncycastlePqcCryptoSaberPoly_karatsuba_simpleWithIntArray_withIntArray_withIntArray_(self, aw7, bw7, w7);
  
#line 347
  for (i = 0; i < self->N_SB_RES_; ++i) {
    
#line 349
    r0 = IOSIntArray_Get(w1, i);
    r1 = IOSIntArray_Get(w2, i);
    r2 = IOSIntArray_Get(w3, i);
    r3 = IOSIntArray_Get(w4, i);
    r4 = IOSIntArray_Get(w5, i);
    r5 = IOSIntArray_Get(w6, i);
    r6 = IOSIntArray_Get(w7, i);
    
#line 358
    r1 = r1 + r4;
    r5 = (r5 - r4);
    r3 = JreURShift32(((r3 & (jint) 0xffff) - (r2 & (jint) 0xffff)), 1);
    r4 = (r4 - r0);
    r4 = (r4 - (JreLShift32(r6, 6)));
    r4 = ((JreLShift32(r4, 1)) + r5);
    r2 = (r2 + r3);
    r1 = (r1 - (JreLShift32(r2, 6)) - r2);
    r2 = (r2 - r6);
    r2 = (r2 - r0);
    r1 = (r1 + 45 * r2);
    r4 = (JreRShift32(((((r4 & (jint) 0xffff) - (JreLShift32(r2, 3))) * inv3)), 3));
    r5 = (r5 + r1);
    r1 = JreRShift32(((r1 & (jint) 0xffff) + (JreLShift32((r3 & (jint) 0xffff), 4))) * inv9, 1);
    r3 = -(r3 + r1);
    r5 = JreRShift32(((30 * (r1 & (jint) 0xffff) - (r5 & (jint) 0xffff)) * inv15), 2);
    r2 = (r2 - r4);
    r1 = (r1 - r5);
    
#line 377
    *IOSShortArray_GetRef(nil_chk(C), i) += (r6 & (jint) 0xffff);
    *IOSShortArray_GetRef(C, i + 64) += (r5 & (jint) 0xffff);
    *IOSShortArray_GetRef(C, i + 128) += (r4 & (jint) 0xffff);
    *IOSShortArray_GetRef(C, i + 192) += (r3 & (jint) 0xffff);
    *IOSShortArray_GetRef(C, i + 256) += (r2 & (jint) 0xffff);
    *IOSShortArray_GetRef(C, i + 320) += (r1 & (jint) 0xffff);
    *IOSShortArray_GetRef(C, i + 384) += (r0 & (jint) 0xffff);
  }
}


#line 387
void OrgBouncycastlePqcCryptoSaberPoly_poly_mul_accWithShortArray_withShortArray_withShortArray_(OrgBouncycastlePqcCryptoSaberPoly *self, IOSShortArray *a, IOSShortArray *b, IOSShortArray *res) {
  
#line 389
  jint i;
  
#line 391
  IOSShortArray *c = [IOSShortArray newArrayWithLength:2 * self->SABER_N_];
  
#line 393
  OrgBouncycastlePqcCryptoSaberPoly_toom_cook_4wayWithShortArray_withShortArray_withShortArray_(self, a, b, c);
  
#line 396
  for (i = self->SABER_N_; i < 2 * self->SABER_N_; i++) {
    
#line 398
    *IOSShortArray_GetRef(nil_chk(res), i - self->SABER_N_) += (IOSShortArray_Get(c, i - self->SABER_N_) - IOSShortArray_Get(c, i));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSaberPoly)
