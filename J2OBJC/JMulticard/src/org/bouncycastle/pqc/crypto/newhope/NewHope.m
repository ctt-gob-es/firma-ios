//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/newhope/NewHope.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/digests/SHA3Digest.h"
#include "org/bouncycastle/pqc/crypto/newhope/ErrorCorrection.h"
#include "org/bouncycastle/pqc/crypto/newhope/NewHope.h"
#include "org/bouncycastle/pqc/crypto/newhope/Params.h"
#include "org/bouncycastle/pqc/crypto/newhope/Poly.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/newhope/NewHope must be compiled with ARC (-fobjc-arc)"
#endif

inline jboolean OrgBouncycastlePqcCryptoNewhopeNewHope_get_STATISTICAL_TEST(void);
#define OrgBouncycastlePqcCryptoNewhopeNewHope_STATISTICAL_TEST false
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoNewhopeNewHope, STATISTICAL_TEST, jboolean)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/newhope/NewHope.java"


#line 10
@implementation OrgBouncycastlePqcCryptoNewhopeNewHope


#line 10
- (instancetype)initPackagePrivate {
  OrgBouncycastlePqcCryptoNewhopeNewHope_initPackagePrivate(self);
  return self;
}


#line 19
+ (void)keygenWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)rand
                             withByteArray:(IOSByteArray *)send
                            withShortArray:(IOSShortArray *)sk {
  OrgBouncycastlePqcCryptoNewhopeNewHope_keygenWithJavaSecuritySecureRandom_withByteArray_withShortArray_(rand, send, sk);
}


#line 48
+ (void)sharedBWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)rand
                              withByteArray:(IOSByteArray *)sharedKey
                              withByteArray:(IOSByteArray *)send
                              withByteArray:(IOSByteArray *)received {
  OrgBouncycastlePqcCryptoNewhopeNewHope_sharedBWithJavaSecuritySecureRandom_withByteArray_withByteArray_withByteArray_(rand, sharedKey, send, received);
}


#line 93
+ (void)sharedAWithByteArray:(IOSByteArray *)sharedKey
              withShortArray:(IOSShortArray *)sk
               withByteArray:(IOSByteArray *)received {
  OrgBouncycastlePqcCryptoNewhopeNewHope_sharedAWithByteArray_withShortArray_withByteArray_(sharedKey, sk, received);
}


#line 111
+ (void)decodeAWithShortArray:(IOSShortArray *)pk
                withByteArray:(IOSByteArray *)seed
                withByteArray:(IOSByteArray *)r {
  OrgBouncycastlePqcCryptoNewhopeNewHope_decodeAWithShortArray_withByteArray_withByteArray_(pk, seed, r);
}

+ (void)decodeBWithShortArray:(IOSShortArray *)b
               withShortArray:(IOSShortArray *)c
                withByteArray:(IOSByteArray *)r {
  OrgBouncycastlePqcCryptoNewhopeNewHope_decodeBWithShortArray_withShortArray_withByteArray_(b, c, r);
}


#line 132
+ (void)encodeAWithByteArray:(IOSByteArray *)r
              withShortArray:(IOSShortArray *)pk
               withByteArray:(IOSByteArray *)seed {
  OrgBouncycastlePqcCryptoNewhopeNewHope_encodeAWithByteArray_withShortArray_withByteArray_(r, pk, seed);
}

+ (void)encodeBWithByteArray:(IOSByteArray *)r
              withShortArray:(IOSShortArray *)b
              withShortArray:(IOSShortArray *)c {
  OrgBouncycastlePqcCryptoNewhopeNewHope_encodeBWithByteArray_withShortArray_withShortArray_(r, b, c);
}


#line 149
+ (void)generateAWithShortArray:(IOSShortArray *)a
                  withByteArray:(IOSByteArray *)seed {
  OrgBouncycastlePqcCryptoNewhopeNewHope_generateAWithShortArray_withByteArray_(a, seed);
}

+ (void)sha3WithByteArray:(IOSByteArray *)sharedKey {
  OrgBouncycastlePqcCryptoNewhopeNewHope_sha3WithByteArray_(sharedKey);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 10, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(keygenWithJavaSecuritySecureRandom:withByteArray:withShortArray:);
  methods[2].selector = @selector(sharedBWithJavaSecuritySecureRandom:withByteArray:withByteArray:withByteArray:);
  methods[3].selector = @selector(sharedAWithByteArray:withShortArray:withByteArray:);
  methods[4].selector = @selector(decodeAWithShortArray:withByteArray:withByteArray:);
  methods[5].selector = @selector(decodeBWithShortArray:withShortArray:withByteArray:);
  methods[6].selector = @selector(encodeAWithByteArray:withShortArray:withByteArray:);
  methods[7].selector = @selector(encodeBWithByteArray:withShortArray:withShortArray:);
  methods[8].selector = @selector(generateAWithShortArray:withByteArray:);
  methods[9].selector = @selector(sha3WithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STATISTICAL_TEST", "Z", .constantValue.asBOOL = OrgBouncycastlePqcCryptoNewhopeNewHope_STATISTICAL_TEST, 0x1a, -1, -1, -1, -1 },
    { "AGREEMENT_SIZE", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoNewhopeNewHope_AGREEMENT_SIZE, 0x19, -1, -1, -1, -1 },
    { "POLY_SIZE", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoNewhopeNewHope_POLY_SIZE, 0x19, -1, -1, -1, -1 },
    { "SENDA_BYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoNewhopeNewHope_SENDA_BYTES, 0x19, -1, -1, -1, -1 },
    { "SENDB_BYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoNewhopeNewHope_SENDB_BYTES, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "keygen", "LJavaSecuritySecureRandom;[B[S", "sharedB", "LJavaSecuritySecureRandom;[B[B[B", "sharedA", "[B[S[B", "decodeA", "[S[B[B", "decodeB", "[S[S[B", "encodeA", "encodeB", "[B[S[S", "generateA", "[S[B", "sha3", "[B" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoNewhopeNewHope = { "NewHope", "org.bouncycastle.pqc.crypto.newhope", ptrTable, methods, fields, 7, 0x0, 10, 5, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoNewhopeNewHope;
}

@end


#line 10
void OrgBouncycastlePqcCryptoNewhopeNewHope_initPackagePrivate(OrgBouncycastlePqcCryptoNewhopeNewHope *self) {
  NSObject_init(self);
}


#line 10
OrgBouncycastlePqcCryptoNewhopeNewHope *new_OrgBouncycastlePqcCryptoNewhopeNewHope_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoNewhopeNewHope, initPackagePrivate)
}


#line 10
OrgBouncycastlePqcCryptoNewhopeNewHope *create_OrgBouncycastlePqcCryptoNewhopeNewHope_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoNewhopeNewHope, initPackagePrivate)
}


#line 19
void OrgBouncycastlePqcCryptoNewhopeNewHope_keygenWithJavaSecuritySecureRandom_withByteArray_withShortArray_(JavaSecuritySecureRandom *rand, IOSByteArray *send, IOSShortArray *sk) {
  OrgBouncycastlePqcCryptoNewhopeNewHope_initialize();
  IOSByteArray *seed = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeParams_SEED_BYTES];
  [((JavaSecuritySecureRandom *) nil_chk(rand)) nextBytesWithByteArray:seed];
  
#line 24
  OrgBouncycastlePqcCryptoNewhopeNewHope_sha3WithByteArray_(seed);
  
#line 26
  IOSShortArray *a = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeParams_N];
  OrgBouncycastlePqcCryptoNewhopeNewHope_generateAWithShortArray_withByteArray_(a, seed);
  
#line 29
  IOSByteArray *noiseSeed = [IOSByteArray newArrayWithLength:32];
  [rand nextBytesWithByteArray:noiseSeed];
  
#line 32
  OrgBouncycastlePqcCryptoNewhopePoly_getNoiseWithShortArray_withByteArray_withByte_(sk, noiseSeed, (jbyte) 0);
  OrgBouncycastlePqcCryptoNewhopePoly_toNTTWithShortArray_(sk);
  
#line 35
  IOSShortArray *e = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeParams_N];
  OrgBouncycastlePqcCryptoNewhopePoly_getNoiseWithShortArray_withByteArray_withByte_(e, noiseSeed, (jbyte) 1);
  OrgBouncycastlePqcCryptoNewhopePoly_toNTTWithShortArray_(e);
  
#line 39
  IOSShortArray *r = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeParams_N];
  OrgBouncycastlePqcCryptoNewhopePoly_pointWiseWithShortArray_withShortArray_withShortArray_(a, sk, r);
  
#line 42
  IOSShortArray *pk = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeParams_N];
  OrgBouncycastlePqcCryptoNewhopePoly_addWithShortArray_withShortArray_withShortArray_(r, e, pk);
  
#line 45
  OrgBouncycastlePqcCryptoNewhopeNewHope_encodeAWithByteArray_withShortArray_withByteArray_(send, pk, seed);
}


#line 48
void OrgBouncycastlePqcCryptoNewhopeNewHope_sharedBWithJavaSecuritySecureRandom_withByteArray_withByteArray_withByteArray_(JavaSecuritySecureRandom *rand, IOSByteArray *sharedKey, IOSByteArray *send, IOSByteArray *received) {
  OrgBouncycastlePqcCryptoNewhopeNewHope_initialize();
  IOSShortArray *pkA = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeParams_N];
  IOSByteArray *seed = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeParams_SEED_BYTES];
  OrgBouncycastlePqcCryptoNewhopeNewHope_decodeAWithShortArray_withByteArray_withByteArray_(pkA, seed, received);
  
#line 54
  IOSShortArray *a = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeParams_N];
  OrgBouncycastlePqcCryptoNewhopeNewHope_generateAWithShortArray_withByteArray_(a, seed);
  
#line 57
  IOSByteArray *noiseSeed = [IOSByteArray newArrayWithLength:32];
  [((JavaSecuritySecureRandom *) nil_chk(rand)) nextBytesWithByteArray:noiseSeed];
  
#line 60
  IOSShortArray *sp = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeParams_N];
  OrgBouncycastlePqcCryptoNewhopePoly_getNoiseWithShortArray_withByteArray_withByte_(sp, noiseSeed, (jbyte) 0);
  OrgBouncycastlePqcCryptoNewhopePoly_toNTTWithShortArray_(sp);
  
#line 64
  IOSShortArray *ep = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeParams_N];
  OrgBouncycastlePqcCryptoNewhopePoly_getNoiseWithShortArray_withByteArray_withByte_(ep, noiseSeed, (jbyte) 1);
  OrgBouncycastlePqcCryptoNewhopePoly_toNTTWithShortArray_(ep);
  
#line 68
  IOSShortArray *bp = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeParams_N];
  OrgBouncycastlePqcCryptoNewhopePoly_pointWiseWithShortArray_withShortArray_withShortArray_(a, sp, bp);
  OrgBouncycastlePqcCryptoNewhopePoly_addWithShortArray_withShortArray_withShortArray_(bp, ep, bp);
  
#line 72
  IOSShortArray *v = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeParams_N];
  OrgBouncycastlePqcCryptoNewhopePoly_pointWiseWithShortArray_withShortArray_withShortArray_(pkA, sp, v);
  OrgBouncycastlePqcCryptoNewhopePoly_fromNTTWithShortArray_(v);
  
#line 76
  IOSShortArray *epp = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeParams_N];
  OrgBouncycastlePqcCryptoNewhopePoly_getNoiseWithShortArray_withByteArray_withByte_(epp, noiseSeed, (jbyte) 2);
  OrgBouncycastlePqcCryptoNewhopePoly_addWithShortArray_withShortArray_withShortArray_(v, epp, v);
  
#line 80
  IOSShortArray *c = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeParams_N];
  OrgBouncycastlePqcCryptoNewhopeErrorCorrection_helpRecWithShortArray_withShortArray_withByteArray_withByte_(c, v, noiseSeed, (jbyte) 3);
  
#line 83
  OrgBouncycastlePqcCryptoNewhopeNewHope_encodeBWithByteArray_withShortArray_withShortArray_(send, bp, c);
  
#line 85
  OrgBouncycastlePqcCryptoNewhopeErrorCorrection_recWithByteArray_withShortArray_withShortArray_(sharedKey, v, c);
  {
    
#line 89
    OrgBouncycastlePqcCryptoNewhopeNewHope_sha3WithByteArray_(sharedKey);
  }
}


#line 93
void OrgBouncycastlePqcCryptoNewhopeNewHope_sharedAWithByteArray_withShortArray_withByteArray_(IOSByteArray *sharedKey, IOSShortArray *sk, IOSByteArray *received) {
  OrgBouncycastlePqcCryptoNewhopeNewHope_initialize();
  IOSShortArray *bp = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeParams_N];
  IOSShortArray *c = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeParams_N];
  OrgBouncycastlePqcCryptoNewhopeNewHope_decodeBWithShortArray_withShortArray_withByteArray_(bp, c, received);
  
#line 99
  IOSShortArray *v = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeParams_N];
  OrgBouncycastlePqcCryptoNewhopePoly_pointWiseWithShortArray_withShortArray_withShortArray_(sk, bp, v);
  OrgBouncycastlePqcCryptoNewhopePoly_fromNTTWithShortArray_(v);
  
#line 103
  OrgBouncycastlePqcCryptoNewhopeErrorCorrection_recWithByteArray_withShortArray_withShortArray_(sharedKey, v, c);
  {
    
#line 107
    OrgBouncycastlePqcCryptoNewhopeNewHope_sha3WithByteArray_(sharedKey);
  }
}


#line 111
void OrgBouncycastlePqcCryptoNewhopeNewHope_decodeAWithShortArray_withByteArray_withByteArray_(IOSShortArray *pk, IOSByteArray *seed, IOSByteArray *r) {
  OrgBouncycastlePqcCryptoNewhopeNewHope_initialize();
  OrgBouncycastlePqcCryptoNewhopePoly_fromBytesWithShortArray_withByteArray_(pk, r);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(r, OrgBouncycastlePqcCryptoNewhopeParams_POLY_BYTES, seed, 0, OrgBouncycastlePqcCryptoNewhopeParams_SEED_BYTES);
}

void OrgBouncycastlePqcCryptoNewhopeNewHope_decodeBWithShortArray_withShortArray_withByteArray_(IOSShortArray *b, IOSShortArray *c, IOSByteArray *r) {
  OrgBouncycastlePqcCryptoNewhopeNewHope_initialize();
  OrgBouncycastlePqcCryptoNewhopePoly_fromBytesWithShortArray_withByteArray_(b, r);
  
#line 121
  for (jint i = 0; i < JreIntDiv(OrgBouncycastlePqcCryptoNewhopeParams_N, 4); ++i) {
    
#line 123
    jint j = 4 * i;
    jint ri = IOSByteArray_Get(nil_chk(r), OrgBouncycastlePqcCryptoNewhopeParams_POLY_BYTES + i) & (jint) 0xFF;
    *IOSShortArray_GetRef(nil_chk(c), j + 0) = (jshort) (ri & (jint) 0x03);
    *IOSShortArray_GetRef(c, j + 1) = (jshort) ((JreURShift32(ri, 2)) & (jint) 0x03);
    *IOSShortArray_GetRef(c, j + 2) = (jshort) ((JreURShift32(ri, 4)) & (jint) 0x03);
    *IOSShortArray_GetRef(c, j + 3) = (jshort) (JreURShift32(ri, 6));
  }
}


#line 132
void OrgBouncycastlePqcCryptoNewhopeNewHope_encodeAWithByteArray_withShortArray_withByteArray_(IOSByteArray *r, IOSShortArray *pk, IOSByteArray *seed) {
  OrgBouncycastlePqcCryptoNewhopeNewHope_initialize();
  OrgBouncycastlePqcCryptoNewhopePoly_toBytesWithByteArray_withShortArray_(r, pk);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(seed, 0, r, OrgBouncycastlePqcCryptoNewhopeParams_POLY_BYTES, OrgBouncycastlePqcCryptoNewhopeParams_SEED_BYTES);
}

void OrgBouncycastlePqcCryptoNewhopeNewHope_encodeBWithByteArray_withShortArray_withShortArray_(IOSByteArray *r, IOSShortArray *b, IOSShortArray *c) {
  OrgBouncycastlePqcCryptoNewhopeNewHope_initialize();
  OrgBouncycastlePqcCryptoNewhopePoly_toBytesWithByteArray_withShortArray_(r, b);
  
#line 142
  for (jint i = 0; i < JreIntDiv(OrgBouncycastlePqcCryptoNewhopeParams_N, 4); ++i) {
    
#line 144
    jint j = 4 * i;
    *IOSByteArray_GetRef(nil_chk(r), OrgBouncycastlePqcCryptoNewhopeParams_POLY_BYTES + i) = (jbyte) (IOSShortArray_Get(nil_chk(c), j) | (JreLShift32(IOSShortArray_Get(c, j + 1), 2)) | (JreLShift32(IOSShortArray_Get(c, j + 2), 4)) | (JreLShift32(IOSShortArray_Get(c, j + 3), 6)));
  }
}


#line 149
void OrgBouncycastlePqcCryptoNewhopeNewHope_generateAWithShortArray_withByteArray_(IOSShortArray *a, IOSByteArray *seed) {
  OrgBouncycastlePqcCryptoNewhopeNewHope_initialize();
  OrgBouncycastlePqcCryptoNewhopePoly_uniformWithShortArray_withByteArray_(a, seed);
}

void OrgBouncycastlePqcCryptoNewhopeNewHope_sha3WithByteArray_(IOSByteArray *sharedKey) {
  OrgBouncycastlePqcCryptoNewhopeNewHope_initialize();
  OrgBouncycastleCryptoDigestsSHA3Digest *d = new_OrgBouncycastleCryptoDigestsSHA3Digest_initWithInt_(256);
  [d updateWithByteArray:sharedKey withInt:0 withInt:32];
  [d doFinalWithByteArray:sharedKey withInt:0];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoNewhopeNewHope)
