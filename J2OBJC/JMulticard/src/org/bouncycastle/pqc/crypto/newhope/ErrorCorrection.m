//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/newhope/ErrorCorrection.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/bouncycastle/pqc/crypto/newhope/ChaCha20.h"
#include "org/bouncycastle/pqc/crypto/newhope/ErrorCorrection.h"
#include "org/bouncycastle/pqc/crypto/newhope/Params.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/newhope/ErrorCorrection must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/newhope/ErrorCorrection.java"


#line 5
@implementation OrgBouncycastlePqcCryptoNewhopeErrorCorrection


#line 5
- (instancetype)initPackagePrivate {
  OrgBouncycastlePqcCryptoNewhopeErrorCorrection_initPackagePrivate(self);
  return self;
}


#line 7
+ (jint)absWithInt:(jint)v {
  return OrgBouncycastlePqcCryptoNewhopeErrorCorrection_absWithInt_(v);
}


#line 13
+ (jint)fWithIntArray:(IOSIntArray *)v
              withInt:(jint)off0
              withInt:(jint)off1
              withInt:(jint)x {
  return OrgBouncycastlePqcCryptoNewhopeErrorCorrection_fWithIntArray_withInt_withInt_withInt_(v, off0, off1, x);
}


#line 36
+ (jint)gWithInt:(jint)x {
  return OrgBouncycastlePqcCryptoNewhopeErrorCorrection_gWithInt_(x);
}


#line 56
+ (void)helpRecWithShortArray:(IOSShortArray *)c
               withShortArray:(IOSShortArray *)v
                withByteArray:(IOSByteArray *)seed
                     withByte:(jbyte)nonce {
  OrgBouncycastlePqcCryptoNewhopeErrorCorrection_helpRecWithShortArray_withShortArray_withByteArray_withByte_(c, v, seed, nonce);
}


#line 92
+ (jshort)LDDecodeWithInt:(jint)xi0
                  withInt:(jint)xi1
                  withInt:(jint)xi2
                  withInt:(jint)xi3 {
  return OrgBouncycastlePqcCryptoNewhopeErrorCorrection_LDDecodeWithInt_withInt_withInt_withInt_(xi0, xi1, xi2, xi3);
}


#line 106
+ (void)recWithByteArray:(IOSByteArray *)key
          withShortArray:(IOSShortArray *)v
          withShortArray:(IOSShortArray *)c {
  OrgBouncycastlePqcCryptoNewhopeErrorCorrection_recWithByteArray_withShortArray_withShortArray_(key, v, c);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 5, 6, -1, -1, -1, -1 },
    { NULL, "S", 0x8, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(absWithInt:);
  methods[2].selector = @selector(fWithIntArray:withInt:withInt:withInt:);
  methods[3].selector = @selector(gWithInt:);
  methods[4].selector = @selector(helpRecWithShortArray:withShortArray:withByteArray:withByte:);
  methods[5].selector = @selector(LDDecodeWithInt:withInt:withInt:withInt:);
  methods[6].selector = @selector(recWithByteArray:withShortArray:withShortArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "abs", "I", "f", "[IIII", "g", "helpRec", "[S[S[BB", "LDDecode", "IIII", "rec", "[B[S[S" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoNewhopeErrorCorrection = { "ErrorCorrection", "org.bouncycastle.pqc.crypto.newhope", ptrTable, methods, NULL, 7, 0x0, 7, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoNewhopeErrorCorrection;
}

@end


#line 5
void OrgBouncycastlePqcCryptoNewhopeErrorCorrection_initPackagePrivate(OrgBouncycastlePqcCryptoNewhopeErrorCorrection *self) {
  NSObject_init(self);
}


#line 5
OrgBouncycastlePqcCryptoNewhopeErrorCorrection *new_OrgBouncycastlePqcCryptoNewhopeErrorCorrection_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoNewhopeErrorCorrection, initPackagePrivate)
}


#line 5
OrgBouncycastlePqcCryptoNewhopeErrorCorrection *create_OrgBouncycastlePqcCryptoNewhopeErrorCorrection_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoNewhopeErrorCorrection, initPackagePrivate)
}


#line 7
jint OrgBouncycastlePqcCryptoNewhopeErrorCorrection_absWithInt_(jint v) {
  OrgBouncycastlePqcCryptoNewhopeErrorCorrection_initialize();
  jint mask = JreRShift32(v, 31);
  return (v ^ mask) - mask;
}

jint OrgBouncycastlePqcCryptoNewhopeErrorCorrection_fWithIntArray_withInt_withInt_withInt_(IOSIntArray *v, jint off0, jint off1, jint x) {
  OrgBouncycastlePqcCryptoNewhopeErrorCorrection_initialize();
  jint xit;
  
#line 15
  jint t;
  
#line 15
  jint r;
  
#line 15
  jint b;
  
#line 18
  b = x * 2730;
  t = JreRShift32(b, 25);
  b = x - t * OrgBouncycastlePqcCryptoNewhopeParams_Q;
  b = 12288 - b;
  JreRShiftAssignInt(&b, 31);
  t -= b;
  
#line 25
  r = t & 1;
  xit = JreRShift32(t, 1);
  *IOSIntArray_GetRef(nil_chk(v), off0) = xit + r;
  
#line 29
  t -= 1;
  r = t & 1;
  *IOSIntArray_GetRef(v, off1) = (JreRShift32(t, 1)) + r;
  
#line 33
  return OrgBouncycastlePqcCryptoNewhopeErrorCorrection_absWithInt_(x - IOSIntArray_Get(v, off0) * 2 * OrgBouncycastlePqcCryptoNewhopeParams_Q);
}


#line 36
jint OrgBouncycastlePqcCryptoNewhopeErrorCorrection_gWithInt_(jint x) {
  OrgBouncycastlePqcCryptoNewhopeErrorCorrection_initialize();
  jint t;
  
#line 38
  jint c;
  
#line 38
  jint b;
  
#line 41
  b = x * 2730;
  t = JreRShift32(b, 27);
  b = x - t * 49156;
  b = 49155 - b;
  JreRShiftAssignInt(&b, 31);
  t -= b;
  
#line 48
  c = t & 1;
  t = (JreRShift32(t, 1)) + c;
  
#line 51
  t *= 8 * OrgBouncycastlePqcCryptoNewhopeParams_Q;
  
#line 53
  return OrgBouncycastlePqcCryptoNewhopeErrorCorrection_absWithInt_(t - x);
}


#line 56
void OrgBouncycastlePqcCryptoNewhopeErrorCorrection_helpRecWithShortArray_withShortArray_withByteArray_withByte_(IOSShortArray *c, IOSShortArray *v, IOSByteArray *seed, jbyte nonce) {
  OrgBouncycastlePqcCryptoNewhopeErrorCorrection_initialize();
  IOSByteArray *iv = [IOSByteArray newArrayWithLength:8];
  
#line 60
  *IOSByteArray_GetRef(iv, 0) = nonce;
  
#line 62
  IOSByteArray *rand = [IOSByteArray newArrayWithLength:32];
  OrgBouncycastlePqcCryptoNewhopeChaCha20_processWithByteArray_withByteArray_withByteArray_withInt_withInt_(seed, iv, rand, 0, rand->size_);
  
#line 66
  IOSIntArray *vs = [IOSIntArray newArrayWithLength:8];
  
#line 66
  IOSIntArray *vTmp = [IOSIntArray newArrayWithLength:4];
  jint k;
  
#line 69
  for (jint i = 0; i < 256; ++i) {
    
#line 71
    jint rBit = (JreURShift32(IOSByteArray_Get(rand, JreURShift32(i, 3)), (i & 7))) & 1;
    
#line 73
    k = OrgBouncycastlePqcCryptoNewhopeErrorCorrection_fWithIntArray_withInt_withInt_withInt_(vs, 0, 4, 8 * IOSShortArray_Get(nil_chk(v), 0 + i) + 4 * rBit);
    k += OrgBouncycastlePqcCryptoNewhopeErrorCorrection_fWithIntArray_withInt_withInt_withInt_(vs, 1, 5, 8 * IOSShortArray_Get(v, 256 + i) + 4 * rBit);
    k += OrgBouncycastlePqcCryptoNewhopeErrorCorrection_fWithIntArray_withInt_withInt_withInt_(vs, 2, 6, 8 * IOSShortArray_Get(v, 512 + i) + 4 * rBit);
    k += OrgBouncycastlePqcCryptoNewhopeErrorCorrection_fWithIntArray_withInt_withInt_withInt_(vs, 3, 7, 8 * IOSShortArray_Get(v, 768 + i) + 4 * rBit);
    
#line 78
    k = JreRShift32(2 * OrgBouncycastlePqcCryptoNewhopeParams_Q - 1 - k, 31);
    
#line 80
    *IOSIntArray_GetRef(vTmp, 0) = ~k & IOSIntArray_Get(vs, 0) ^ k & IOSIntArray_Get(vs, 4);
    *IOSIntArray_GetRef(vTmp, 1) = ~k & IOSIntArray_Get(vs, 1) ^ k & IOSIntArray_Get(vs, 5);
    *IOSIntArray_GetRef(vTmp, 2) = ~k & IOSIntArray_Get(vs, 2) ^ k & IOSIntArray_Get(vs, 6);
    *IOSIntArray_GetRef(vTmp, 3) = ~k & IOSIntArray_Get(vs, 3) ^ k & IOSIntArray_Get(vs, 7);
    
#line 85
    *IOSShortArray_GetRef(nil_chk(c), 0 + i) = (jshort) ((IOSIntArray_Get(vTmp, 0) - IOSIntArray_Get(vTmp, 3)) & 3);
    *IOSShortArray_GetRef(c, 256 + i) = (jshort) ((IOSIntArray_Get(vTmp, 1) - IOSIntArray_Get(vTmp, 3)) & 3);
    *IOSShortArray_GetRef(c, 512 + i) = (jshort) ((IOSIntArray_Get(vTmp, 2) - IOSIntArray_Get(vTmp, 3)) & 3);
    *IOSShortArray_GetRef(c, 768 + i) = (jshort) ((-k + 2 * IOSIntArray_Get(vTmp, 3)) & 3);
  }
}


#line 92
jshort OrgBouncycastlePqcCryptoNewhopeErrorCorrection_LDDecodeWithInt_withInt_withInt_withInt_(jint xi0, jint xi1, jint xi2, jint xi3) {
  OrgBouncycastlePqcCryptoNewhopeErrorCorrection_initialize();
  jint t;
  
#line 96
  t = OrgBouncycastlePqcCryptoNewhopeErrorCorrection_gWithInt_(xi0);
  t += OrgBouncycastlePqcCryptoNewhopeErrorCorrection_gWithInt_(xi1);
  t += OrgBouncycastlePqcCryptoNewhopeErrorCorrection_gWithInt_(xi2);
  t += OrgBouncycastlePqcCryptoNewhopeErrorCorrection_gWithInt_(xi3);
  
#line 101
  t -= 8 * OrgBouncycastlePqcCryptoNewhopeParams_Q;
  
#line 103
  return (jshort) (JreURShift32(t, 31));
}


#line 106
void OrgBouncycastlePqcCryptoNewhopeErrorCorrection_recWithByteArray_withShortArray_withShortArray_(IOSByteArray *key, IOSShortArray *v, IOSShortArray *c) {
  OrgBouncycastlePqcCryptoNewhopeErrorCorrection_initialize();
  OrgBouncycastleUtilArrays_fillWithByteArray_withByte_(key, (jbyte) 0);
  
#line 110
  IOSIntArray *tmp = [IOSIntArray newArrayWithLength:4];
  for (jint i = 0; i < 256; ++i) {
    
#line 113
    *IOSIntArray_GetRef(tmp, 0) = 16 * OrgBouncycastlePqcCryptoNewhopeParams_Q + 8 * IOSShortArray_Get(nil_chk(v), 0 + i) - OrgBouncycastlePqcCryptoNewhopeParams_Q * (2 * IOSShortArray_Get(nil_chk(c), 0 + i) + IOSShortArray_Get(c, 768 + i));
    *IOSIntArray_GetRef(tmp, 1) = 16 * OrgBouncycastlePqcCryptoNewhopeParams_Q + 8 * IOSShortArray_Get(v, 256 + i) - OrgBouncycastlePqcCryptoNewhopeParams_Q * (2 * IOSShortArray_Get(c, 256 + i) + IOSShortArray_Get(c, 768 + i));
    *IOSIntArray_GetRef(tmp, 2) = 16 * OrgBouncycastlePqcCryptoNewhopeParams_Q + 8 * IOSShortArray_Get(v, 512 + i) - OrgBouncycastlePqcCryptoNewhopeParams_Q * (2 * IOSShortArray_Get(c, 512 + i) + IOSShortArray_Get(c, 768 + i));
    *IOSIntArray_GetRef(tmp, 3) = 16 * OrgBouncycastlePqcCryptoNewhopeParams_Q + 8 * IOSShortArray_Get(v, 768 + i) - OrgBouncycastlePqcCryptoNewhopeParams_Q * IOSShortArray_Get(c, 768 + i);
    
#line 118
    *IOSByteArray_GetRef(nil_chk(key), JreURShift32(i, 3)) |= JreLShift32(OrgBouncycastlePqcCryptoNewhopeErrorCorrection_LDDecodeWithInt_withInt_withInt_withInt_(IOSIntArray_Get(tmp, 0), IOSIntArray_Get(tmp, 1), IOSIntArray_Get(tmp, 2), IOSIntArray_Get(tmp, 3)), (i & 7));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoNewhopeErrorCorrection)
