//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/newhope/NHExchangePairGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/pqc/crypto/ExchangePair.h"
#include "org/bouncycastle/pqc/crypto/newhope/NHExchangePairGenerator.h"
#include "org/bouncycastle/pqc/crypto/newhope/NHPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/newhope/NewHope.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/newhope/NHExchangePairGenerator must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator () {
 @public
  JavaSecuritySecureRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator, random_, JavaSecuritySecureRandom *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/newhope/NHExchangePairGenerator.java"


#line 9
@implementation OrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator


#line 14
- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  OrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator_initWithJavaSecuritySecureRandom_(self, random);
  return self;
}

- (OrgBouncycastlePqcCryptoExchangePair *)GenerateExchangeWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)senderPublicKey {
  
#line 21
  return [self generateExchangeWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter:senderPublicKey];
}


#line 24
- (OrgBouncycastlePqcCryptoExchangePair *)generateExchangeWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)senderPublicKey {
  
#line 27
  OrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *pubKey = (OrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *) cast_chk(senderPublicKey, [OrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters class]);
  
#line 29
  IOSByteArray *sharedValue = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeNewHope_AGREEMENT_SIZE];
  IOSByteArray *publicKeyValue = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoNewhopeNewHope_SENDB_BYTES];
  
#line 32
  OrgBouncycastlePqcCryptoNewhopeNewHope_sharedBWithJavaSecuritySecureRandom_withByteArray_withByteArray_withByteArray_(random_, sharedValue, publicKeyValue, ((OrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *) nil_chk(pubKey))->pubData_);
  
#line 34
  return new_OrgBouncycastlePqcCryptoExchangePair_initWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withByteArray_(new_OrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters_initWithByteArray_(publicKeyValue), sharedValue);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoExchangePair;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoExchangePair;", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaSecuritySecureRandom:);
  methods[1].selector = @selector(GenerateExchangeWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  methods[2].selector = @selector(generateExchangeWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecuritySecureRandom;", "GenerateExchange", "LOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", "generateExchange" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator = { "NHExchangePairGenerator", "org.bouncycastle.pqc.crypto.newhope", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator;
}

@end


#line 14
void OrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator_initWithJavaSecuritySecureRandom_(OrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator *self, JavaSecuritySecureRandom *random) {
  NSObject_init(self);
  self->random_ = random;
}


#line 14
OrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator *new_OrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *random) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator, initWithJavaSecuritySecureRandom_, random)
}


#line 14
OrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator *create_OrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *random) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator, initWithJavaSecuritySecureRandom_, random)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator)
