//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/lms/LMSSigner.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMS.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSSignature.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSSigner.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/lms/LMSSigner must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoLmsLMSSigner () {
 @public
  OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *privKey_;
  OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *pubKey_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoLmsLMSSigner, privKey_, OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoLmsLMSSigner, pubKey_, OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/lms/LMSSigner.java"


#line 8
@implementation OrgBouncycastlePqcCryptoLmsLMSSigner

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 8
- (instancetype)init {
  OrgBouncycastlePqcCryptoLmsLMSSigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forSigning
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)param {
  
#line 17
  if (forSigning) {
    
#line 19
    privKey_ = (OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters class]);
  }
  else {
    
#line 23
    pubKey_ = (OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters class]);
  }
}


#line 27
- (IOSByteArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  
#line 30
  @try {
    
#line 32
    return [((OrgBouncycastlePqcCryptoLmsLMSSignature *) nil_chk(OrgBouncycastlePqcCryptoLmsLMS_generateSignWithOrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters_withByteArray_(privKey_, message))) getEncoded];
  }
  @catch (JavaIoIOException *e) {
    
#line 36
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"unable to encode signature: ", [e getMessage]));
  }
}


#line 40
- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                           withByteArray:(IOSByteArray *)signature {
  
#line 43
  @try {
    
#line 45
    return OrgBouncycastlePqcCryptoLmsLMS_verifySignatureWithOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_withOrgBouncycastlePqcCryptoLmsLMSSignature_withByteArray_(pubKey_, OrgBouncycastlePqcCryptoLmsLMSSignature_getInstanceWithId_(signature), message);
  }
  @catch (JavaIoIOException *e) {
    
#line 49
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"unable to decode signature: ", [e getMessage]));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(generateSignatureWithByteArray:);
  methods[3].selector = @selector(verifySignatureWithByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "privKey_", "LOrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pubKey_", "LOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgBouncycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[B[B" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoLmsLMSSigner = { "LMSSigner", "org.bouncycastle.pqc.crypto.lms", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoLmsLMSSigner;
}

@end


#line 8
void OrgBouncycastlePqcCryptoLmsLMSSigner_init(OrgBouncycastlePqcCryptoLmsLMSSigner *self) {
  NSObject_init(self);
}


#line 8
OrgBouncycastlePqcCryptoLmsLMSSigner *new_OrgBouncycastlePqcCryptoLmsLMSSigner_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoLmsLMSSigner, init)
}


#line 8
OrgBouncycastlePqcCryptoLmsLMSSigner *create_OrgBouncycastlePqcCryptoLmsLMSSigner_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoLmsLMSSigner, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoLmsLMSSigner)
