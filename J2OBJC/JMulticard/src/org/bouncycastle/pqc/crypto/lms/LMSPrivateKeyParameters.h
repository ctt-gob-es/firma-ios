//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/lms/LMSPrivateKeyParameters.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters")
#ifdef RESTRICT_OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters 1
#endif
#undef RESTRICT_OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters

#if !defined (OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters || defined(INCLUDE_OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters))
#define OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters_

#define RESTRICT_OrgBouncycastlePqcCryptoLmsLMSKeyParameters 1
#define INCLUDE_OrgBouncycastlePqcCryptoLmsLMSKeyParameters 1
#include "org/bouncycastle/pqc/crypto/lms/LMSKeyParameters.h"

#define RESTRICT_OrgBouncycastlePqcCryptoLmsLMSContextBasedSigner 1
#define INCLUDE_OrgBouncycastlePqcCryptoLmsLMSContextBasedSigner 1
#include "org/bouncycastle/pqc/crypto/lms/LMSContextBasedSigner.h"

@class IOSByteArray;
@class OrgBouncycastlePqcCryptoLmsLMOtsParameters;
@class OrgBouncycastlePqcCryptoLmsLMOtsPrivateKey;
@class OrgBouncycastlePqcCryptoLmsLMSContext;
@class OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters;
@class OrgBouncycastlePqcCryptoLmsLMSigParameters;

@interface OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters : OrgBouncycastlePqcCryptoLmsLMSKeyParameters < OrgBouncycastlePqcCryptoLmsLMSContextBasedSigner >

#pragma mark Public

- (instancetype)initWithOrgBouncycastlePqcCryptoLmsLMSigParameters:(OrgBouncycastlePqcCryptoLmsLMSigParameters *)lmsParameter
                    withOrgBouncycastlePqcCryptoLmsLMOtsParameters:(OrgBouncycastlePqcCryptoLmsLMOtsParameters *)otsParameters
                                                           withInt:(jint)q
                                                     withByteArray:(IOSByteArray *)I
                                                           withInt:(jint)maxQ
                                                     withByteArray:(IOSByteArray *)masterSecret;

- (jboolean)isEqual:(id)o;

/*!
 @brief Return a key that can be used usageCount times.
 <p>
  Note: this will use the range [index...index + usageCount) for the current key. 
 </p>
 @param usageCount the number of usages the key should have.
 @return a key based on the current key that can be used usageCount times.
 */
- (OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *)extractKeyShardWithInt:(jint)usageCount;

- (OrgBouncycastlePqcCryptoLmsLMSContext *)generateLMSContext;

- (IOSByteArray *)generateSignatureWithOrgBouncycastlePqcCryptoLmsLMSContext:(OrgBouncycastlePqcCryptoLmsLMSContext *)context;

- (IOSByteArray *)getEncoded;

- (IOSByteArray *)getI;

/*!
 @brief Return the key index (the q value).
 @return private key index number.
 */
- (jint)getIndex;

+ (OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *)getInstanceWithByteArray:(IOSByteArray *)privEnc
                                                                   withByteArray:(IOSByteArray *)pubEnc;

+ (OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *)getInstanceWithId:(id)src;

- (IOSByteArray *)getMasterSecret;

- (OrgBouncycastlePqcCryptoLmsLMOtsParameters *)getOtsParameters;

- (OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *)getPublicKey;

- (OrgBouncycastlePqcCryptoLmsLMSigParameters *)getSigParameters;

- (jlong)getUsagesRemaining;

- (NSUInteger)hash;

#pragma mark Package-Private

- (IOSByteArray *)findTWithInt:(jint)r;

- (OrgBouncycastlePqcCryptoLmsLMOtsPrivateKey *)getCurrentOTSKey;

- (OrgBouncycastlePqcCryptoLmsLMOtsPrivateKey *)getNextOtsPrivateKey;

- (void)incIndex;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters_initWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_withInt_withByteArray_withInt_withByteArray_(OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *self, OrgBouncycastlePqcCryptoLmsLMSigParameters *lmsParameter, OrgBouncycastlePqcCryptoLmsLMOtsParameters *otsParameters, jint q, IOSByteArray *I, jint maxQ, IOSByteArray *masterSecret);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *new_OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters_initWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_withInt_withByteArray_withInt_withByteArray_(OrgBouncycastlePqcCryptoLmsLMSigParameters *lmsParameter, OrgBouncycastlePqcCryptoLmsLMOtsParameters *otsParameters, jint q, IOSByteArray *I, jint maxQ, IOSByteArray *masterSecret) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *create_OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters_initWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_withInt_withByteArray_withInt_withByteArray_(OrgBouncycastlePqcCryptoLmsLMSigParameters *lmsParameter, OrgBouncycastlePqcCryptoLmsLMOtsParameters *otsParameters, jint q, IOSByteArray *I, jint maxQ, IOSByteArray *masterSecret);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters_getInstanceWithByteArray_withByteArray_(IOSByteArray *privEnc, IOSByteArray *pubEnc);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters_getInstanceWithId_(id src);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters")
