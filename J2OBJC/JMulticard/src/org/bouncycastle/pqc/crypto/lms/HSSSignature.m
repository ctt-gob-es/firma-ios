//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/lms/HSSSignature.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/DataInputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/Arrays.h"
#include "org/bouncycastle/pqc/crypto/lms/Composer.h"
#include "org/bouncycastle/pqc/crypto/lms/HSSSignature.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSSignature.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSSignedPubKey.h"
#include "org/bouncycastle/util/io/Streams.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/lms/HSSSignature must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoLmsHSSSignature () {
 @public
  jint lMinus1_;
  IOSObjectArray *signedPubKey_;
  OrgBouncycastlePqcCryptoLmsLMSSignature *signature_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoLmsHSSSignature, signedPubKey_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoLmsHSSSignature, signature_, OrgBouncycastlePqcCryptoLmsLMSSignature *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/lms/HSSSignature.java"


#line 12
@implementation OrgBouncycastlePqcCryptoLmsHSSSignature


#line 19
- (instancetype)initWithInt:(jint)lMinus1
withOrgBouncycastlePqcCryptoLmsLMSSignedPubKeyArray:(IOSObjectArray *)signedPubKey
withOrgBouncycastlePqcCryptoLmsLMSSignature:(OrgBouncycastlePqcCryptoLmsLMSSignature *)signature {
  OrgBouncycastlePqcCryptoLmsHSSSignature_initWithInt_withOrgBouncycastlePqcCryptoLmsLMSSignedPubKeyArray_withOrgBouncycastlePqcCryptoLmsLMSSignature_(self, lMinus1, signedPubKey, signature);
  return self;
}


#line 33
+ (OrgBouncycastlePqcCryptoLmsHSSSignature *)getInstanceWithId:(id)src
                                                       withInt:(jint)L {
  return OrgBouncycastlePqcCryptoLmsHSSSignature_getInstanceWithId_withInt_(src, L);
}


#line 82
- (jint)getlMinus1 {
  
#line 84
  return lMinus1_;
}


#line 87
- (IOSObjectArray *)getSignedPubKey {
  
#line 89
  return signedPubKey_;
}


#line 92
- (OrgBouncycastlePqcCryptoLmsLMSSignature *)getSignature {
  
#line 94
  return signature_;
}


#line 97
- (jboolean)isEqual:(id)o {
  
#line 100
  if (JreObjectEqualsEquals(self, o)) {
    
#line 102
    return true;
  }
  if (o == nil || !JreObjectEqualsEquals([self java_getClass], [o java_getClass])) {
    
#line 106
    return false;
  }
  
#line 109
  OrgBouncycastlePqcCryptoLmsHSSSignature *signature1 = (OrgBouncycastlePqcCryptoLmsHSSSignature *) cast_chk(o, [OrgBouncycastlePqcCryptoLmsHSSSignature class]);
  
#line 111
  if (lMinus1_ != signature1->lMinus1_) {
    
#line 113
    return false;
  }
  
#line 117
  if (((IOSObjectArray *) nil_chk(signedPubKey_))->size_ != signature1->signedPubKey_->size_) {
    
#line 119
    return false;
  }
  
#line 122
  for (jint t = 0; t < signedPubKey_->size_; t++) {
    
#line 124
    if (![((OrgBouncycastlePqcCryptoLmsLMSSignedPubKey *) nil_chk(IOSObjectArray_Get(signedPubKey_, t))) isEqual:IOSObjectArray_Get(signature1->signedPubKey_, t)]) {
      
#line 126
      return false;
    }
  }
  
#line 130
  return signature_ != nil ? [signature_ isEqual:signature1->signature_] : signature1->signature_ == nil;
}


#line 133
- (NSUInteger)hash {
  
#line 136
  jint result = lMinus1_;
  result = 31 * result + JavaUtilArrays_hashCodeWithNSObjectArray_(signedPubKey_);
  result = 31 * result + (signature_ != nil ? ((jint) [signature_ hash]) : 0);
  return result;
}

- (IOSByteArray *)getEncoded {
  
#line 146
  OrgBouncycastlePqcCryptoLmsComposer *composer = OrgBouncycastlePqcCryptoLmsComposer_compose();
  (void) [((OrgBouncycastlePqcCryptoLmsComposer *) nil_chk(composer)) u32strWithInt:lMinus1_];
  if (signedPubKey_ != nil) {
    {
      IOSObjectArray *a__ = signedPubKey_;
      OrgBouncycastlePqcCryptoLmsLMSSignedPubKey * const *b__ = a__->buffer_;
      OrgBouncycastlePqcCryptoLmsLMSSignedPubKey * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgBouncycastlePqcCryptoLmsLMSSignedPubKey *sigPub = *b__++;
        
#line 152
        (void) [composer bytesWithOrgBouncycastleUtilEncodable:sigPub];
      }
    }
  }
  
#line 155
  (void) [composer bytesWithOrgBouncycastleUtilEncodable:signature_];
  return [composer build];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoLmsHSSSignature;", 0x9, 1, 2, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgBouncycastlePqcCryptoLmsLMSSignedPubKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoLmsLMSSignature;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withOrgBouncycastlePqcCryptoLmsLMSSignedPubKeyArray:withOrgBouncycastlePqcCryptoLmsLMSSignature:);
  methods[1].selector = @selector(getInstanceWithId:withInt:);
  methods[2].selector = @selector(getlMinus1);
  methods[3].selector = @selector(getSignedPubKey);
  methods[4].selector = @selector(getSignature);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(hash);
  methods[7].selector = @selector(getEncoded);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lMinus1_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "signedPubKey_", "[LOrgBouncycastlePqcCryptoLmsLMSSignedPubKey;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "signature_", "LOrgBouncycastlePqcCryptoLmsLMSSignature;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I[LOrgBouncycastlePqcCryptoLmsLMSSignedPubKey;LOrgBouncycastlePqcCryptoLmsLMSSignature;", "getInstance", "LNSObject;I", "LJavaIoIOException;", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoLmsHSSSignature = { "HSSSignature", "org.bouncycastle.pqc.crypto.lms", ptrTable, methods, fields, 7, 0x1, 8, 3, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoLmsHSSSignature;
}

@end


#line 19
void OrgBouncycastlePqcCryptoLmsHSSSignature_initWithInt_withOrgBouncycastlePqcCryptoLmsLMSSignedPubKeyArray_withOrgBouncycastlePqcCryptoLmsLMSSignature_(OrgBouncycastlePqcCryptoLmsHSSSignature *self, jint lMinus1, IOSObjectArray *signedPubKey, OrgBouncycastlePqcCryptoLmsLMSSignature *signature) {
  NSObject_init(self);
  self->lMinus1_ = lMinus1;
  self->signedPubKey_ = signedPubKey;
  self->signature_ = signature;
}


#line 19
OrgBouncycastlePqcCryptoLmsHSSSignature *new_OrgBouncycastlePqcCryptoLmsHSSSignature_initWithInt_withOrgBouncycastlePqcCryptoLmsLMSSignedPubKeyArray_withOrgBouncycastlePqcCryptoLmsLMSSignature_(jint lMinus1, IOSObjectArray *signedPubKey, OrgBouncycastlePqcCryptoLmsLMSSignature *signature) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoLmsHSSSignature, initWithInt_withOrgBouncycastlePqcCryptoLmsLMSSignedPubKeyArray_withOrgBouncycastlePqcCryptoLmsLMSSignature_, lMinus1, signedPubKey, signature)
}


#line 19
OrgBouncycastlePqcCryptoLmsHSSSignature *create_OrgBouncycastlePqcCryptoLmsHSSSignature_initWithInt_withOrgBouncycastlePqcCryptoLmsLMSSignedPubKeyArray_withOrgBouncycastlePqcCryptoLmsLMSSignature_(jint lMinus1, IOSObjectArray *signedPubKey, OrgBouncycastlePqcCryptoLmsLMSSignature *signature) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoLmsHSSSignature, initWithInt_withOrgBouncycastlePqcCryptoLmsLMSSignedPubKeyArray_withOrgBouncycastlePqcCryptoLmsLMSSignature_, lMinus1, signedPubKey, signature)
}


#line 33
OrgBouncycastlePqcCryptoLmsHSSSignature *OrgBouncycastlePqcCryptoLmsHSSSignature_getInstanceWithId_withInt_(id src, jint L) {
  OrgBouncycastlePqcCryptoLmsHSSSignature_initialize();
  
#line 36
  if ([src isKindOfClass:[OrgBouncycastlePqcCryptoLmsHSSSignature class]]) {
    
#line 38
    return (OrgBouncycastlePqcCryptoLmsHSSSignature *) src;
  }
  else if ([src isKindOfClass:[JavaIoDataInputStream class]]) {
    
#line 43
    jint lminus = [((JavaIoDataInputStream *) nil_chk(((JavaIoDataInputStream *) src))) readInt];
    if (lminus != L - 1) {
      
#line 46
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"nspk exceeded maxNspk");
    }
    IOSObjectArray *signedPubKeys = [IOSObjectArray newArrayWithLength:lminus type:OrgBouncycastlePqcCryptoLmsLMSSignedPubKey_class_()];
    if (lminus != 0) {
      
#line 51
      for (jint t = 0; t < signedPubKeys->size_; t++) {
        
#line 53
        (void) IOSObjectArray_SetAndConsume(signedPubKeys, t, new_OrgBouncycastlePqcCryptoLmsLMSSignedPubKey_initPackagePrivateWithOrgBouncycastlePqcCryptoLmsLMSSignature_withOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_(OrgBouncycastlePqcCryptoLmsLMSSignature_getInstanceWithId_(src), OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_getInstanceWithId_(src)));
      }
    }
    OrgBouncycastlePqcCryptoLmsLMSSignature *sig = OrgBouncycastlePqcCryptoLmsLMSSignature_getInstanceWithId_(src);
    
#line 58
    return new_OrgBouncycastlePqcCryptoLmsHSSSignature_initWithInt_withOrgBouncycastlePqcCryptoLmsLMSSignedPubKeyArray_withOrgBouncycastlePqcCryptoLmsLMSSignature_(lminus, signedPubKeys, sig);
  }
  else if ([src isKindOfClass:[IOSByteArray class]]) {
    
#line 62
    JavaIoInputStream *in = nil;
    @try {
      
#line 65
      in = new_JavaIoDataInputStream_initWithJavaIoInputStream_(new_JavaIoByteArrayInputStream_initWithByteArray_((IOSByteArray *) cast_chk(src, [IOSByteArray class])));
      return OrgBouncycastlePqcCryptoLmsHSSSignature_getInstanceWithId_withInt_(in, L);
    }
    @finally {
      
#line 70
      if (in != nil) [in close];
    }
  }
  else if ([src isKindOfClass:[JavaIoInputStream class]]) {
    
#line 75
    return OrgBouncycastlePqcCryptoLmsHSSSignature_getInstanceWithId_withInt_(OrgBouncycastleUtilIoStreams_readAllWithJavaIoInputStream_((JavaIoInputStream *) src), L);
  }
  
#line 78
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"cannot parse ", src));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoLmsHSSSignature)
