//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/lms/HSSPrivateKeyParameters.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters")
#ifdef RESTRICT_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters 1
#endif
#undef RESTRICT_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters

#if !defined (OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters || defined(INCLUDE_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters))
#define OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_

#define RESTRICT_OrgBouncycastlePqcCryptoLmsLMSKeyParameters 1
#define INCLUDE_OrgBouncycastlePqcCryptoLmsLMSKeyParameters 1
#include "org/bouncycastle/pqc/crypto/lms/LMSKeyParameters.h"

#define RESTRICT_OrgBouncycastlePqcCryptoLmsLMSContextBasedSigner 1
#define INCLUDE_OrgBouncycastlePqcCryptoLmsLMSContextBasedSigner 1
#include "org/bouncycastle/pqc/crypto/lms/LMSContextBasedSigner.h"

@class IOSByteArray;
@class IOSObjectArray;
@class OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters;
@class OrgBouncycastlePqcCryptoLmsLMSContext;
@class OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters;
@protocol JavaUtilList;

@interface OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters : OrgBouncycastlePqcCryptoLmsLMSKeyParameters < OrgBouncycastlePqcCryptoLmsLMSContextBasedSigner >

#pragma mark Public

- (instancetype)initWithInt:(jint)l
           withJavaUtilList:(id<JavaUtilList>)keys
           withJavaUtilList:(id<JavaUtilList>)sig
                   withLong:(jlong)index
                   withLong:(jlong)indexLimit;

- (jboolean)isEqual:(id)o;

/*!
 @brief Return a key that can be used usageCount times.
 <p>
  Note: this will use the range [index...index + usageCount) for the current key. 
 </p>
 @param usageCount the number of usages the key should have.
 @return a key based on the current key that can be used usageCount times.
 */
- (OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *)extractKeyShardWithInt:(jint)usageCount;

- (OrgBouncycastlePqcCryptoLmsLMSContext *)generateLMSContext;

- (IOSByteArray *)generateSignatureWithOrgBouncycastlePqcCryptoLmsLMSContext:(OrgBouncycastlePqcCryptoLmsLMSContext *)context;

- (IOSByteArray *)getEncoded;

- (jlong)getIndex;

+ (OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *)getInstanceWithByteArray:(IOSByteArray *)privEnc
                                                                   withByteArray:(IOSByteArray *)pubEnc;

+ (OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *)getInstanceWithId:(id)src;

- (jint)getL;

- (IOSObjectArray *)getLMSParameters;

- (OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters *)getPublicKey;

- (jlong)getUsagesRemaining;

- (NSUInteger)hash;

#pragma mark Protected

- (id)java_clone;

- (void)updateHierarchyWithOrgBouncycastlePqcCryptoLmsLMSPrivateKeyParametersArray:(IOSObjectArray *)newKeys
                                  withOrgBouncycastlePqcCryptoLmsLMSSignatureArray:(IOSObjectArray *)newSig;

#pragma mark Package-Private

- (jlong)getIndexLimit;

- (id<JavaUtilList>)getKeys;

- (OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *)getRootKey;

- (id<JavaUtilList>)getSig;

- (void)incIndex;

- (jboolean)isShard;

- (void)replaceConsumedKeyWithInt:(jint)d;

/*!
 @brief Reset to index will ensure that all LMS keys are correct for a given HSS index value.
 Normally LMS keys updated in sync with their parent HSS key but in cases of sharding
  the normal monotonic updating does not apply and the state of the LMS keys needs to be
  reset to match the current HSS index.
 */
- (void)resetKeyToIndex;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_(OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *self, jint l, id<JavaUtilList> keys, id<JavaUtilList> sig, jlong index, jlong indexLimit);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *new_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_(jint l, id<JavaUtilList> keys, id<JavaUtilList> sig, jlong index, jlong indexLimit) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *create_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_(jint l, id<JavaUtilList> keys, id<JavaUtilList> sig, jlong index, jlong indexLimit);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_getInstanceWithByteArray_withByteArray_(IOSByteArray *privEnc, IOSByteArray *pubEnc);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_getInstanceWithId_(id src);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters")
