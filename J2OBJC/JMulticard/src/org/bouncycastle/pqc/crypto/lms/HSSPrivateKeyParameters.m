//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/lms/HSSPrivateKeyParameters.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/DataInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/crypto/Digest.h"
#include "org/bouncycastle/pqc/crypto/lms/Composer.h"
#include "org/bouncycastle/pqc/crypto/lms/DigestUtil.h"
#include "org/bouncycastle/pqc/crypto/lms/HSS.h"
#include "org/bouncycastle/pqc/crypto/lms/HSSPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/HSSPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/HSSSignature.h"
#include "org/bouncycastle/pqc/crypto/lms/LMOtsParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMOtsPrivateKey.h"
#include "org/bouncycastle/pqc/crypto/lms/LMS.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSContext.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSSignature.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSSignedPubKey.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSigParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/SeedDerive.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/io/Streams.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/lms/HSSPrivateKeyParameters must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters () {
 @public
  jint l_;
  jboolean isShard_;
  id<JavaUtilList> keys_;
  id<JavaUtilList> sig_;
  jlong indexLimit_;
  jlong index_;
  OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters *publicKey_;
}

- (instancetype)initWithInt:(jint)l
           withJavaUtilList:(id<JavaUtilList>)keys
           withJavaUtilList:(id<JavaUtilList>)sig
                   withLong:(jlong)index
                   withLong:(jlong)indexLimit
                withBoolean:(jboolean)isShard;

+ (OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *)makeCopyWithOrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters:(OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *)privateKeyParameters;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters, keys_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters, sig_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters, publicKey_, OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters *)

__attribute__((unused)) static void OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_withBoolean_(OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *self, jint l, id<JavaUtilList> keys, id<JavaUtilList> sig, jlong index, jlong indexLimit, jboolean isShard);

__attribute__((unused)) static OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *new_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_withBoolean_(jint l, id<JavaUtilList> keys, id<JavaUtilList> sig, jlong index, jlong indexLimit, jboolean isShard) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *create_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_withBoolean_(jint l, id<JavaUtilList> keys, id<JavaUtilList> sig, jlong index, jlong indexLimit, jboolean isShard);

__attribute__((unused)) static OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_makeCopyWithOrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_(OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *privateKeyParameters);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/lms/HSSPrivateKeyParameters.java"


#line 16
@implementation OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters


#line 29
- (instancetype)initWithInt:(jint)l
           withJavaUtilList:(id<JavaUtilList>)keys
           withJavaUtilList:(id<JavaUtilList>)sig
                   withLong:(jlong)index
                   withLong:(jlong)indexLimit {
  OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_(self, l, keys, sig, index, indexLimit);
  return self;
}


#line 46
- (instancetype)initWithInt:(jint)l
           withJavaUtilList:(id<JavaUtilList>)keys
           withJavaUtilList:(id<JavaUtilList>)sig
                   withLong:(jlong)index
                   withLong:(jlong)indexLimit
                withBoolean:(jboolean)isShard {
  OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_withBoolean_(self, l, keys, sig, index, indexLimit, isShard);
  return self;
}


#line 58
+ (OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *)getInstanceWithByteArray:(IOSByteArray *)privEnc
                                                                   withByteArray:(IOSByteArray *)pubEnc {
  return OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_getInstanceWithByteArray_withByteArray_(privEnc, pubEnc);
}


#line 68
+ (OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *)getInstanceWithId:(id)src {
  return OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_getInstanceWithId_(src);
}


#line 125
- (jint)getL {
  
#line 127
  return l_;
}


#line 130
- (jlong)getIndex {
  @synchronized(self) {
    return index_;
  }
}


#line 135
- (IOSObjectArray *)getLMSParameters {
  @synchronized(self) {
    jint len = [((id<JavaUtilList>) nil_chk(keys_)) size];
    
#line 139
    IOSObjectArray *parms = [IOSObjectArray newArrayWithLength:len type:OrgBouncycastlePqcCryptoLmsLMSParameters_class_()];
    
#line 141
    for (jint i = 0; i < len; i++) {
      
#line 143
      OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *lmsPrivateKey = [((id<JavaUtilList>) nil_chk(keys_)) getWithInt:i];
      
#line 145
      (void) IOSObjectArray_SetAndConsume(parms, i, new_OrgBouncycastlePqcCryptoLmsLMSParameters_initWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_([((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk(lmsPrivateKey)) getSigParameters], [lmsPrivateKey getOtsParameters]));
    }
    
#line 148
    return JreRetainedLocalValue(parms);
  }
}


#line 151
- (void)incIndex {
  @synchronized(self) {
    index_++;
  }
}


#line 156
+ (OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *)makeCopyWithOrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters:(OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *)privateKeyParameters {
  return OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_makeCopyWithOrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_(privateKeyParameters);
}


#line 168
- (void)updateHierarchyWithOrgBouncycastlePqcCryptoLmsLMSPrivateKeyParametersArray:(IOSObjectArray *)newKeys
                                  withOrgBouncycastlePqcCryptoLmsLMSSignatureArray:(IOSObjectArray *)newSig {
  @synchronized(self) {
    
#line 172
    keys_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(JavaUtilArrays_asListWithNSObjectArray_(newKeys));
    sig_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(JavaUtilArrays_asListWithNSObjectArray_(newSig));
  }
}


#line 177
- (jboolean)isShard {
  
#line 179
  return isShard_;
}


#line 182
- (jlong)getIndexLimit {
  
#line 184
  return indexLimit_;
}


#line 187
- (jlong)getUsagesRemaining {
  
#line 190
  return indexLimit_ - index_;
}

- (OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *)getRootKey {
  
#line 195
  return [((id<JavaUtilList>) nil_chk(keys_)) getWithInt:0];
}


#line 207
- (OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *)extractKeyShardWithInt:(jint)usageCount {
  
#line 209
  @synchronized(self) {
    
#line 212
    if ([self getUsagesRemaining] < usageCount) {
      
#line 214
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"usageCount exceeds usages remaining in current leaf");
    }
    
#line 217
    jlong maxIndexForShard = index_ + usageCount;
    jlong shardStartIndex = index_;
    
#line 223
    index_ += usageCount;
    
#line 225
    id<JavaUtilList> keys = new_JavaUtilArrayList_initWithJavaUtilCollection_([self getKeys]);
    id<JavaUtilList> sig = new_JavaUtilArrayList_initWithJavaUtilCollection_([self getSig]);
    
#line 228
    OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *shard = OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_makeCopyWithOrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_(new_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_withBoolean_(l_, keys, sig, shardStartIndex, maxIndexForShard, true));
    
#line 230
    [self resetKeyToIndex];
    
#line 232
    return JreRetainedLocalValue(shard);
  }
}


#line 237
- (id<JavaUtilList>)getKeys {
  @synchronized(self) {
    return JreRetainedLocalValue(keys_);
  }
}


#line 242
- (id<JavaUtilList>)getSig {
  @synchronized(self) {
    return JreRetainedLocalValue(sig_);
  }
}


#line 253
- (void)resetKeyToIndex {
  
#line 256
  id<JavaUtilList> originalKeys = [self getKeys];
  
#line 259
  IOSLongArray *qTreePath = [IOSLongArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(originalKeys)) size]];
  jlong q = [self getIndex];
  
#line 262
  for (jint t = [originalKeys size] - 1; t >= 0; t--) {
    
#line 264
    OrgBouncycastlePqcCryptoLmsLMSigParameters *sigParameters = [((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk([originalKeys getWithInt:t])) getSigParameters];
    jint mask = (JreLShift32(1, [((OrgBouncycastlePqcCryptoLmsLMSigParameters *) nil_chk(sigParameters)) getH])) - 1;
    *IOSLongArray_GetRef(qTreePath, t) = q & mask;
    JreURShiftAssignLong(&q, [sigParameters getH]);
  }
  
#line 270
  jboolean changed = false;
  IOSObjectArray *keys = [originalKeys toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[originalKeys size] type:OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters_class_()]];
  IOSObjectArray *sig = [((id<JavaUtilList>) nil_chk(self->sig_)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[self->sig_ size] type:OrgBouncycastlePqcCryptoLmsLMSSignature_class_()]];
  
#line 274
  OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *originalRootKey = [self getRootKey];
  
#line 280
  if ([((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk(IOSObjectArray_Get(nil_chk(keys), 0))) getIndex] - 1 != IOSLongArray_Get(qTreePath, 0)) {
    
#line 282
    (void) IOSObjectArray_Set(keys, 0, OrgBouncycastlePqcCryptoLmsLMS_generateKeysWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_withInt_withByteArray_withByteArray_(
#line 283
    [((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk(originalRootKey)) getSigParameters],
#line 284
    [originalRootKey getOtsParameters],
#line 285
    (jint) IOSLongArray_Get(qTreePath, 0), [originalRootKey getI], [originalRootKey getMasterSecret]));
    changed = true;
  }
  
#line 290
  for (jint i = 1; i < qTreePath->size_; i++) {
    
#line 293
    OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *intermediateKey = IOSObjectArray_Get(keys, i - 1);
    
#line 295
    IOSByteArray *childI = [IOSByteArray newArrayWithLength:16];
    IOSByteArray *childSeed = [IOSByteArray newArrayWithLength:32];
    OrgBouncycastlePqcCryptoLmsSeedDerive *derive = new_OrgBouncycastlePqcCryptoLmsSeedDerive_initPackagePrivateWithByteArray_withByteArray_withOrgBouncycastleCryptoDigest_(
#line 298
    [((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk(intermediateKey)) getI],
#line 299
    [intermediateKey getMasterSecret], OrgBouncycastlePqcCryptoLmsDigestUtil_getDigestWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(
#line 300
    [((OrgBouncycastlePqcCryptoLmsLMOtsParameters *) nil_chk([intermediateKey getOtsParameters])) getDigestOID]));
    [derive setQWithInt:(jint) IOSLongArray_Get(qTreePath, i - 1)];
    [derive setJWithInt:~1];
    
#line 304
    [derive deriveSeedWithByteArray:childSeed withBoolean:true];
    IOSByteArray *postImage = [IOSByteArray newArrayWithLength:32];
    [derive deriveSeedWithByteArray:postImage withBoolean:false];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(postImage, 0, childI, 0, childI->size_);
    
#line 314
    jboolean lmsQMatch =
#line 315
    (i < qTreePath->size_ - 1) ? IOSLongArray_Get(qTreePath, i) == [((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk(IOSObjectArray_Get(keys, i))) getIndex] - 1 : IOSLongArray_Get(qTreePath, i) == [((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk(IOSObjectArray_Get(keys, i))) getIndex];
    
#line 321
    jboolean seedEquals = OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(childI, [((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk(IOSObjectArray_Get(keys, i))) getI]) && OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(
#line 322
    childSeed, [((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk(IOSObjectArray_Get(keys, i))) getMasterSecret]);
    
#line 325
    if (!seedEquals) {
      
#line 330
      (void) IOSObjectArray_Set(keys, i, OrgBouncycastlePqcCryptoLmsLMS_generateKeysWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_withInt_withByteArray_withByteArray_(
#line 331
      [((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk([originalKeys getWithInt:i])) getSigParameters],
#line 332
      [((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk([originalKeys getWithInt:i])) getOtsParameters],
#line 333
      (jint) IOSLongArray_Get(qTreePath, i), childI, childSeed));
      
#line 338
      (void) IOSObjectArray_Set(nil_chk(sig), i - 1, OrgBouncycastlePqcCryptoLmsLMS_generateSignWithOrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters_withByteArray_(IOSObjectArray_Get(keys, i - 1), [((OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *) nil_chk([((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk(IOSObjectArray_Get(keys, i))) getPublicKey])) toByteArray]));
      changed = true;
    }
    else if (!lmsQMatch) {
      
#line 348
      (void) IOSObjectArray_Set(keys, i, OrgBouncycastlePqcCryptoLmsLMS_generateKeysWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_withInt_withByteArray_withByteArray_(
#line 349
      [((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk([originalKeys getWithInt:i])) getSigParameters],
#line 350
      [((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk([originalKeys getWithInt:i])) getOtsParameters],
#line 351
      (jint) IOSLongArray_Get(qTreePath, i), childI, childSeed));
      changed = true;
    }
  }
  
#line 358
  if (changed) {
    
#line 361
    [self updateHierarchyWithOrgBouncycastlePqcCryptoLmsLMSPrivateKeyParametersArray:keys withOrgBouncycastlePqcCryptoLmsLMSSignatureArray:sig];
  }
}


#line 366
- (OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters *)getPublicKey {
  @synchronized(self) {
    return new_OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters_initWithInt_withOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_(l_, [((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk([self getRootKey])) getPublicKey]);
  }
}


#line 371
- (void)replaceConsumedKeyWithInt:(jint)d {
  
#line 374
  OrgBouncycastlePqcCryptoLmsSeedDerive *deriver = [((OrgBouncycastlePqcCryptoLmsLMOtsPrivateKey *) nil_chk([((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk([((id<JavaUtilList>) nil_chk(keys_)) getWithInt:d - 1])) getCurrentOTSKey])) getDerivationFunction];
  [((OrgBouncycastlePqcCryptoLmsSeedDerive *) nil_chk(deriver)) setJWithInt:~1];
  IOSByteArray *childRootSeed = [IOSByteArray newArrayWithLength:32];
  [deriver deriveSeedWithByteArray:childRootSeed withBoolean:true];
  IOSByteArray *postImage = [IOSByteArray newArrayWithLength:32];
  [deriver deriveSeedWithByteArray:postImage withBoolean:false];
  IOSByteArray *childI = [IOSByteArray newArrayWithLength:16];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(postImage, 0, childI, 0, childI->size_);
  
#line 383
  id<JavaUtilList> newKeys = new_JavaUtilArrayList_initWithJavaUtilCollection_(keys_);
  
#line 388
  OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *oldPk = [((id<JavaUtilList>) nil_chk(keys_)) getWithInt:d];
  
#line 391
  (void) [newKeys setWithInt:d withId:OrgBouncycastlePqcCryptoLmsLMS_generateKeysWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_withInt_withByteArray_withByteArray_([((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk(oldPk)) getSigParameters], [oldPk getOtsParameters], 0, childI, childRootSeed)];
  
#line 393
  id<JavaUtilList> newSig = new_JavaUtilArrayList_initWithJavaUtilCollection_(sig_);
  
#line 395
  (void) [newSig setWithInt:d - 1 withId:OrgBouncycastlePqcCryptoLmsLMS_generateSignWithOrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters_withByteArray_([newKeys getWithInt:d - 1], [((OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *) nil_chk([((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk([newKeys getWithInt:d])) getPublicKey])) toByteArray])];
  
#line 398
  self->keys_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(newKeys);
  self->sig_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(newSig);
}

- (jboolean)isEqual:(id)o {
  
#line 406
  if (JreObjectEqualsEquals(self, o)) {
    
#line 408
    return true;
  }
  if (o == nil || !JreObjectEqualsEquals([self java_getClass], [o java_getClass])) {
    
#line 412
    return false;
  }
  
#line 415
  OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *that = (OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *) cast_chk(o, [OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters class]);
  
#line 417
  if (l_ != that->l_) {
    
#line 419
    return false;
  }
  if (isShard_ != that->isShard_) {
    
#line 423
    return false;
  }
  if (indexLimit_ != that->indexLimit_) {
    
#line 427
    return false;
  }
  if (index_ != that->index_) {
    
#line 431
    return false;
  }
  if (![((id<JavaUtilList>) nil_chk(keys_)) isEqual:that->keys_]) {
    
#line 435
    return false;
  }
  return [((id<JavaUtilList>) nil_chk(sig_)) isEqual:that->sig_];
}


#line 440
- (IOSByteArray *)getEncoded {
  @synchronized(self) {
    
#line 448
    OrgBouncycastlePqcCryptoLmsComposer *composer = [((OrgBouncycastlePqcCryptoLmsComposer *) nil_chk([((OrgBouncycastlePqcCryptoLmsComposer *) nil_chk([((OrgBouncycastlePqcCryptoLmsComposer *) nil_chk([((OrgBouncycastlePqcCryptoLmsComposer *) nil_chk([((OrgBouncycastlePqcCryptoLmsComposer *) nil_chk(OrgBouncycastlePqcCryptoLmsComposer_compose())) u32strWithInt:
#line 449
    0])) u32strWithInt:
#line 450
    l_])) u64strWithLong:
#line 451
    index_])) u64strWithLong:
#line 452
    indexLimit_])) bool__WithBoolean:
#line 453
    isShard_];
    
#line 455
    for (OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters * __strong key in nil_chk(keys_)) {
      
#line 457
      (void) [((OrgBouncycastlePqcCryptoLmsComposer *) nil_chk(composer)) bytesWithOrgBouncycastleUtilEncodable:key];
    }
    
#line 460
    for (OrgBouncycastlePqcCryptoLmsLMSSignature * __strong s in nil_chk(sig_)) {
      
#line 462
      (void) [((OrgBouncycastlePqcCryptoLmsComposer *) nil_chk(composer)) bytesWithOrgBouncycastleUtilEncodable:s];
    }
    
#line 465
    return JreRetainedLocalValue([((OrgBouncycastlePqcCryptoLmsComposer *) nil_chk(composer)) build]);
  }
}


#line 468
- (NSUInteger)hash {
  
#line 471
  jint result = l_;
  result = 31 * result + (isShard_ ? 1 : 0);
  result = 31 * result + ((jint) [((id<JavaUtilList>) nil_chk(keys_)) hash]);
  result = 31 * result + ((jint) [((id<JavaUtilList>) nil_chk(sig_)) hash]);
  result = 31 * result + (jint) (indexLimit_ ^ (JreURShift64(indexLimit_, 32)));
  result = 31 * result + (jint) (index_ ^ (JreURShift64(index_, 32)));
  return result;
}

- (id)java_clone {
  
#line 484
  return OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_makeCopyWithOrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_(self);
}


#line 487
- (OrgBouncycastlePqcCryptoLmsLMSContext *)generateLMSContext {
  
#line 490
  IOSObjectArray *signed_pub_key;
  OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *nextKey;
  jint L = [self getL];
  
#line 494
  @synchronized(self) {
    
#line 496
    OrgBouncycastlePqcCryptoLmsHSS_rangeTestKeysWithOrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_(self);
    
#line 498
    id<JavaUtilList> keys = [self getKeys];
    id<JavaUtilList> sig = [self getSig];
    
#line 501
    nextKey = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk([self getKeys])) getWithInt:L - 1]);
    
#line 504
    jint i = 0;
    signed_pub_key = JreRetainedLocalValue([IOSObjectArray newArrayWithLength:L - 1 type:OrgBouncycastlePqcCryptoLmsLMSSignedPubKey_class_()]);
    while (i < L - 1) {
      
#line 508
      (void) IOSObjectArray_SetAndConsume(signed_pub_key, i, new_OrgBouncycastlePqcCryptoLmsLMSSignedPubKey_initPackagePrivateWithOrgBouncycastlePqcCryptoLmsLMSSignature_withOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_(
#line 509
      [((id<JavaUtilList>) nil_chk(sig)) getWithInt:i],
#line 510
      [((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk([((id<JavaUtilList>) nil_chk(keys)) getWithInt:i + 1])) getPublicKey]));
      i = i + 1;
    }
    
#line 517
    [self incIndex];
  }
  
#line 520
  return [((OrgBouncycastlePqcCryptoLmsLMSContext *) nil_chk([((OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) nil_chk(nextKey)) generateLMSContext])) withSignedPublicKeysWithOrgBouncycastlePqcCryptoLmsLMSSignedPubKeyArray:signed_pub_key];
}


#line 523
- (IOSByteArray *)generateSignatureWithOrgBouncycastlePqcCryptoLmsLMSContext:(OrgBouncycastlePqcCryptoLmsLMSContext *)context {
  
#line 526
  @try {
    
#line 528
    return [((OrgBouncycastlePqcCryptoLmsHSSSignature *) nil_chk(OrgBouncycastlePqcCryptoLmsHSS_generateSignatureWithInt_withOrgBouncycastlePqcCryptoLmsLMSContext_([self getL], context))) getEncoded];
  }
  @catch (JavaIoIOException *e) {
    
#line 532
    @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"unable to encode signature: ", [e getMessage]), e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, 3, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters;", 0x9, 4, 5, 6, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters;", 0x9, 4, 7, 6, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgBouncycastlePqcCryptoLmsLMSParameters;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters;", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x20, -1, -1, -1, 14, -1, -1 },
    { NULL, "LJavaUtilList;", 0x20, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x21, -1, -1, 6, -1, -1, -1 },
    { NULL, "I", 0x1, 18, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 19, -1, 20, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoLmsLMSContext;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 21, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withJavaUtilList:withJavaUtilList:withLong:withLong:);
  methods[1].selector = @selector(initWithInt:withJavaUtilList:withJavaUtilList:withLong:withLong:withBoolean:);
  methods[2].selector = @selector(getInstanceWithByteArray:withByteArray:);
  methods[3].selector = @selector(getInstanceWithId:);
  methods[4].selector = @selector(getL);
  methods[5].selector = @selector(getIndex);
  methods[6].selector = @selector(getLMSParameters);
  methods[7].selector = @selector(incIndex);
  methods[8].selector = @selector(makeCopyWithOrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters:);
  methods[9].selector = @selector(updateHierarchyWithOrgBouncycastlePqcCryptoLmsLMSPrivateKeyParametersArray:withOrgBouncycastlePqcCryptoLmsLMSSignatureArray:);
  methods[10].selector = @selector(isShard);
  methods[11].selector = @selector(getIndexLimit);
  methods[12].selector = @selector(getUsagesRemaining);
  methods[13].selector = @selector(getRootKey);
  methods[14].selector = @selector(extractKeyShardWithInt:);
  methods[15].selector = @selector(getKeys);
  methods[16].selector = @selector(getSig);
  methods[17].selector = @selector(resetKeyToIndex);
  methods[18].selector = @selector(getPublicKey);
  methods[19].selector = @selector(replaceConsumedKeyWithInt:);
  methods[20].selector = @selector(isEqual:);
  methods[21].selector = @selector(getEncoded);
  methods[22].selector = @selector(hash);
  methods[23].selector = @selector(java_clone);
  methods[24].selector = @selector(generateLMSContext);
  methods[25].selector = @selector(generateSignatureWithOrgBouncycastlePqcCryptoLmsLMSContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "l_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isShard_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keys_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 23, -1 },
    { "sig_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 24, -1 },
    { "indexLimit_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicKey_", "LOrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILJavaUtilList;LJavaUtilList;JJ", "(ILjava/util/List<Lorg/bouncycastle/pqc/crypto/lms/LMSPrivateKeyParameters;>;Ljava/util/List<Lorg/bouncycastle/pqc/crypto/lms/LMSSignature;>;JJ)V", "ILJavaUtilList;LJavaUtilList;JJZ", "(ILjava/util/List<Lorg/bouncycastle/pqc/crypto/lms/LMSPrivateKeyParameters;>;Ljava/util/List<Lorg/bouncycastle/pqc/crypto/lms/LMSSignature;>;JJZ)V", "getInstance", "[B[B", "LJavaIoIOException;", "LNSObject;", "makeCopy", "LOrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters;", "updateHierarchy", "[LOrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters;[LOrgBouncycastlePqcCryptoLmsLMSSignature;", "extractKeyShard", "I", "()Ljava/util/List<Lorg/bouncycastle/pqc/crypto/lms/LMSPrivateKeyParameters;>;", "()Ljava/util/List<Lorg/bouncycastle/pqc/crypto/lms/LMSSignature;>;", "replaceConsumedKey", "equals", "hashCode", "clone", "LJavaLangCloneNotSupportedException;", "generateSignature", "LOrgBouncycastlePqcCryptoLmsLMSContext;", "Ljava/util/List<Lorg/bouncycastle/pqc/crypto/lms/LMSPrivateKeyParameters;>;", "Ljava/util/List<Lorg/bouncycastle/pqc/crypto/lms/LMSSignature;>;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters = { "HSSPrivateKeyParameters", "org.bouncycastle.pqc.crypto.lms", ptrTable, methods, fields, 7, 0x1, 26, 7, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters;
}

@end


#line 29
void OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_(OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *self, jint l, id<JavaUtilList> keys, id<JavaUtilList> sig, jlong index, jlong indexLimit) {
  OrgBouncycastlePqcCryptoLmsLMSKeyParameters_initWithBoolean_(self,
#line 31
  true);
  self->index_ =
#line 25
  0;
  
#line 33
  self->l_ = l;
  self->keys_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(keys);
  self->sig_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(sig);
  self->index_ = index;
  self->indexLimit_ = indexLimit;
  self->isShard_ = false;
  
#line 43
  [self resetKeyToIndex];
}


#line 29
OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *new_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_(jint l, id<JavaUtilList> keys, id<JavaUtilList> sig, jlong index, jlong indexLimit) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters, initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_, l, keys, sig, index, indexLimit)
}


#line 29
OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *create_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_(jint l, id<JavaUtilList> keys, id<JavaUtilList> sig, jlong index, jlong indexLimit) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters, initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_, l, keys, sig, index, indexLimit)
}


#line 46
void OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_withBoolean_(OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *self, jint l, id<JavaUtilList> keys, id<JavaUtilList> sig, jlong index, jlong indexLimit, jboolean isShard) {
  OrgBouncycastlePqcCryptoLmsLMSKeyParameters_initWithBoolean_(self,
#line 48
  true);
  self->index_ =
#line 25
  0;
  
#line 50
  self->l_ = l;
  self->keys_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(keys);
  self->sig_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(sig);
  self->index_ = index;
  self->indexLimit_ = indexLimit;
  self->isShard_ = isShard;
}


#line 46
OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *new_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_withBoolean_(jint l, id<JavaUtilList> keys, id<JavaUtilList> sig, jlong index, jlong indexLimit, jboolean isShard) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters, initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_withBoolean_, l, keys, sig, index, indexLimit, isShard)
}


#line 46
OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *create_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_withBoolean_(jint l, id<JavaUtilList> keys, id<JavaUtilList> sig, jlong index, jlong indexLimit, jboolean isShard) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters, initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_withBoolean_, l, keys, sig, index, indexLimit, isShard)
}


#line 58
OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_getInstanceWithByteArray_withByteArray_(IOSByteArray *privEnc, IOSByteArray *pubEnc) {
  OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initialize();
  
#line 61
  OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *pKey = OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_getInstanceWithId_(privEnc);
  
#line 63
  ((OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *) nil_chk(pKey))->publicKey_ = OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters_getInstanceWithId_(pubEnc);
  
#line 65
  return pKey;
}


#line 68
OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_getInstanceWithId_(id src) {
  OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initialize();
  
#line 71
  if ([src isKindOfClass:[OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters class]]) {
    
#line 73
    return (OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *) src;
  }
  else if ([src isKindOfClass:[JavaIoDataInputStream class]]) {
    
#line 77
    if ([((JavaIoDataInputStream *) nil_chk(((JavaIoDataInputStream *) src))) readInt] != 0) {
      
#line 79
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unknown version for hss private key");
    }
    jint d = [((JavaIoDataInputStream *) nil_chk(((JavaIoDataInputStream *) src))) readInt];
    jlong index = [((JavaIoDataInputStream *) nil_chk(((JavaIoDataInputStream *) src))) readLong];
    jlong maxIndex = [((JavaIoDataInputStream *) nil_chk(((JavaIoDataInputStream *) src))) readLong];
    jboolean limited = [((JavaIoDataInputStream *) nil_chk(((JavaIoDataInputStream *) src))) readBoolean];
    
#line 86
    JavaUtilArrayList *keys = new_JavaUtilArrayList_init();
    JavaUtilArrayList *signatures = new_JavaUtilArrayList_init();
    
#line 89
    for (jint t = 0; t < d; t++) {
      
#line 91
      [keys addWithId:OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters_getInstanceWithId_(src)];
    }
    
#line 94
    for (jint t = 0; t < d - 1; t++) {
      
#line 96
      [signatures addWithId:OrgBouncycastlePqcCryptoLmsLMSSignature_getInstanceWithId_(src)];
    }
    
#line 99
    return new_OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initWithInt_withJavaUtilList_withJavaUtilList_withLong_withLong_withBoolean_(d, keys, signatures, index, maxIndex, limited);
  }
  else if ([src isKindOfClass:[IOSByteArray class]]) {
    
#line 103
    JavaIoInputStream *in = nil;
    @try {
      
#line 106
      in = new_JavaIoDataInputStream_initWithJavaIoInputStream_(new_JavaIoByteArrayInputStream_initWithByteArray_((IOSByteArray *) cast_chk(src, [IOSByteArray class])));
      return OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_getInstanceWithId_(in);
    }
    @finally {
      
#line 111
      if (in != nil) {
        
#line 113
        [in close];
      }
    }
  }
  else if ([src isKindOfClass:[JavaIoInputStream class]]) {
    
#line 119
    return OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_getInstanceWithId_(OrgBouncycastleUtilIoStreams_readAllWithJavaIoInputStream_((JavaIoInputStream *) src));
  }
  
#line 122
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"cannot parse ", src));
}


#line 156
OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_makeCopyWithOrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_(OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *privateKeyParameters) {
  OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_initialize();
  @try {
    
#line 160
    return OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_getInstanceWithId_([((OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *) nil_chk(privateKeyParameters)) getEncoded]);
  }
  @catch (JavaLangException *ex) {
    
#line 164
    @throw new_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_([ex getMessage], ex);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters)
