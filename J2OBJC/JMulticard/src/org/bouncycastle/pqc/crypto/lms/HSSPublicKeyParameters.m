//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/lms/HSSPublicKeyParameters.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/DataInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "org/bouncycastle/pqc/crypto/lms/Composer.h"
#include "org/bouncycastle/pqc/crypto/lms/HSSPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/HSSSignature.h"
#include "org/bouncycastle/pqc/crypto/lms/LMS.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSContext.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSSignature.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSSignedPubKey.h"
#include "org/bouncycastle/util/io/Streams.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/lms/HSSPublicKeyParameters must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters () {
 @public
  jint l_;
  OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *lmsPublicKey_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters, lmsPublicKey_, OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/lms/HSSPublicKeyParameters.java"


#line 10
@implementation OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters


#line 17
- (instancetype)initWithInt:(jint)l
withOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters:(OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *)lmsPublicKey {
  OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters_initWithInt_withOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_(self, l, lmsPublicKey);
  return self;
}


#line 25
+ (OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters *)getInstanceWithId:(id)src {
  return OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters_getInstanceWithId_(src);
}


#line 59
- (jint)getL {
  
#line 61
  return l_;
}


#line 64
- (OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *)getLMSPublicKey {
  
#line 66
  return lmsPublicKey_;
}


#line 69
- (jboolean)isEqual:(id)o {
  
#line 72
  if (JreObjectEqualsEquals(self, o)) {
    
#line 74
    return true;
  }
  if (o == nil || !JreObjectEqualsEquals([self java_getClass], [o java_getClass])) {
    
#line 78
    return false;
  }
  
#line 81
  OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters *publicKey = (OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters *) cast_chk(o, [OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters class]);
  
#line 83
  if (l_ != publicKey->l_) {
    
#line 85
    return false;
  }
  return [((OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *) nil_chk(lmsPublicKey_)) isEqual:publicKey->lmsPublicKey_];
}


#line 90
- (NSUInteger)hash {
  
#line 93
  jint result = l_;
  result = 31 * result + ((jint) [((OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *) nil_chk(lmsPublicKey_)) hash]);
  return result;
}

- (IOSByteArray *)getEncoded {
  
#line 102
  return [((OrgBouncycastlePqcCryptoLmsComposer *) nil_chk([((OrgBouncycastlePqcCryptoLmsComposer *) nil_chk([((OrgBouncycastlePqcCryptoLmsComposer *) nil_chk(OrgBouncycastlePqcCryptoLmsComposer_compose())) u32strWithInt:l_])) bytesWithByteArray:
#line 103
  [((OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *) nil_chk(lmsPublicKey_)) getEncoded]])) build];
}


#line 107
- (OrgBouncycastlePqcCryptoLmsLMSContext *)generateLMSContextWithByteArray:(IOSByteArray *)sigEnc {
  
#line 110
  OrgBouncycastlePqcCryptoLmsHSSSignature *signature;
  @try {
    
#line 113
    signature = OrgBouncycastlePqcCryptoLmsHSSSignature_getInstanceWithId_withInt_(sigEnc, [self getL]);
  }
  @catch (JavaIoIOException *e) {
    
#line 117
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"cannot parse signature: ", [e getMessage]));
  }
  
#line 120
  IOSObjectArray *signedPubKeys = [((OrgBouncycastlePqcCryptoLmsHSSSignature *) nil_chk(signature)) getSignedPubKey];
  OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *key = [((OrgBouncycastlePqcCryptoLmsLMSSignedPubKey *) nil_chk(IOSObjectArray_Get(signedPubKeys, ((IOSObjectArray *) nil_chk(signedPubKeys))->size_ - 1))) getPublicKey];
  
#line 123
  return [((OrgBouncycastlePqcCryptoLmsLMSContext *) nil_chk([((OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *) nil_chk(key)) generateOtsContextWithOrgBouncycastlePqcCryptoLmsLMSSignature:[signature getSignature]])) withSignedPublicKeysWithOrgBouncycastlePqcCryptoLmsLMSSignedPubKeyArray:signedPubKeys];
}


#line 126
- (jboolean)verifyWithOrgBouncycastlePqcCryptoLmsLMSContext:(OrgBouncycastlePqcCryptoLmsLMSContext *)context {
  
#line 129
  jboolean failed = false;
  
#line 131
  IOSObjectArray *sigKeys = [((OrgBouncycastlePqcCryptoLmsLMSContext *) nil_chk(context)) getSignedPubKeys];
  
#line 133
  if (((IOSObjectArray *) nil_chk(sigKeys))->size_ != [self getL] - 1) {
    
#line 135
    return false;
  }
  
#line 138
  OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *key = [self getLMSPublicKey];
  
#line 140
  for (jint i = 0; i < sigKeys->size_; i++) {
    
#line 142
    OrgBouncycastlePqcCryptoLmsLMSSignature *sig = [((OrgBouncycastlePqcCryptoLmsLMSSignedPubKey *) nil_chk(IOSObjectArray_Get(sigKeys, i))) getSignature];
    IOSByteArray *msg = [((OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *) nil_chk([((OrgBouncycastlePqcCryptoLmsLMSSignedPubKey *) nil_chk(IOSObjectArray_Get(sigKeys, i))) getPublicKey])) toByteArray];
    if (!OrgBouncycastlePqcCryptoLmsLMS_verifySignatureWithOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_withOrgBouncycastlePqcCryptoLmsLMSSignature_withByteArray_(key, sig, msg)) {
      
#line 146
      failed = true;
    }
    key = [((OrgBouncycastlePqcCryptoLmsLMSSignedPubKey *) nil_chk(IOSObjectArray_Get(sigKeys, i))) getPublicKey];
  }
  
#line 151
  return !failed & [((OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *) nil_chk(key)) verifyWithOrgBouncycastlePqcCryptoLmsLMSContext:context];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters;", 0x9, 1, 2, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoLmsLMSContext;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters:);
  methods[1].selector = @selector(getInstanceWithId:);
  methods[2].selector = @selector(getL);
  methods[3].selector = @selector(getLMSPublicKey);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(getEncoded);
  methods[7].selector = @selector(generateLMSContextWithByteArray:);
  methods[8].selector = @selector(verifyWithOrgBouncycastlePqcCryptoLmsLMSContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "l_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lmsPublicKey_", "LOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters;", "getInstance", "LNSObject;", "LJavaIoIOException;", "equals", "hashCode", "generateLMSContext", "[B", "verify", "LOrgBouncycastlePqcCryptoLmsLMSContext;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters = { "HSSPublicKeyParameters", "org.bouncycastle.pqc.crypto.lms", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters;
}

@end


#line 17
void OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters_initWithInt_withOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_(OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters *self, jint l, OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *lmsPublicKey) {
  OrgBouncycastlePqcCryptoLmsLMSKeyParameters_initWithBoolean_(self,
#line 19
  false);
  
#line 21
  self->l_ = l;
  self->lmsPublicKey_ = lmsPublicKey;
}


#line 17
OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters *new_OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters_initWithInt_withOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_(jint l, OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *lmsPublicKey) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters, initWithInt_withOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_, l, lmsPublicKey)
}


#line 17
OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters *create_OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters_initWithInt_withOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_(jint l, OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *lmsPublicKey) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters, initWithInt_withOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_, l, lmsPublicKey)
}


#line 25
OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters *OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters_getInstanceWithId_(id src) {
  OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters_initialize();
  
#line 28
  if ([src isKindOfClass:[OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters class]]) {
    
#line 30
    return (OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters *) src;
  }
  else if ([src isKindOfClass:[JavaIoDataInputStream class]]) {
    
#line 34
    jint L = [((JavaIoDataInputStream *) nil_chk(((JavaIoDataInputStream *) src))) readInt];
    OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *lmsPublicKey = OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_getInstanceWithId_(src);
    return new_OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters_initWithInt_withOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_(L, lmsPublicKey);
  }
  else if ([src isKindOfClass:[IOSByteArray class]]) {
    
#line 40
    JavaIoInputStream *in = nil;
    @try {
      
#line 43
      in = new_JavaIoDataInputStream_initWithJavaIoInputStream_(new_JavaIoByteArrayInputStream_initWithByteArray_((IOSByteArray *) cast_chk(src, [IOSByteArray class])));
      return OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters_getInstanceWithId_(in);
    }
    @finally {
      
#line 48
      if (in != nil) [in close];
    }
  }
  else if ([src isKindOfClass:[JavaIoInputStream class]]) {
    
#line 53
    return OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters_getInstanceWithId_(OrgBouncycastleUtilIoStreams_readAllWithJavaIoInputStream_((JavaIoInputStream *) src));
  }
  
#line 56
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"cannot parse ", src));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters)
