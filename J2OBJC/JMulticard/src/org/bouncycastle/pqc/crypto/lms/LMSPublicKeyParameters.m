//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/lms/LMSPublicKeyParameters.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/DataInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Throwable.h"
#include "org/bouncycastle/pqc/crypto/lms/Composer.h"
#include "org/bouncycastle/pqc/crypto/lms/LMOtsParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMOtsPublicKey.h"
#include "org/bouncycastle/pqc/crypto/lms/LMOtsSignature.h"
#include "org/bouncycastle/pqc/crypto/lms/LMS.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSContext.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSSignature.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSigParameters.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/io/Streams.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/lms/LMSPublicKeyParameters must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters () {
 @public
  OrgBouncycastlePqcCryptoLmsLMSigParameters *parameterSet_;
  OrgBouncycastlePqcCryptoLmsLMOtsParameters *lmOtsType_;
  IOSByteArray *I_;
  IOSByteArray *T1_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters, parameterSet_, OrgBouncycastlePqcCryptoLmsLMSigParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters, lmOtsType_, OrgBouncycastlePqcCryptoLmsLMOtsParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters, I_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters, T1_, IOSByteArray *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/lms/LMSPublicKeyParameters.java"


#line 11
@implementation OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters


#line 20
- (instancetype)initWithOrgBouncycastlePqcCryptoLmsLMSigParameters:(OrgBouncycastlePqcCryptoLmsLMSigParameters *)parameterSet
                    withOrgBouncycastlePqcCryptoLmsLMOtsParameters:(OrgBouncycastlePqcCryptoLmsLMOtsParameters *)lmOtsType
                                                     withByteArray:(IOSByteArray *)T1
                                                     withByteArray:(IOSByteArray *)I {
  OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_initWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_withByteArray_withByteArray_(self, parameterSet, lmOtsType, T1, I);
  return self;
}


#line 30
+ (OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *)getInstanceWithId:(id)src {
  return OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_getInstanceWithId_(src);
}


#line 66
- (IOSByteArray *)getEncoded {
  
#line 70
  return [self toByteArray];
}


#line 73
- (OrgBouncycastlePqcCryptoLmsLMSigParameters *)getSigParameters {
  
#line 75
  return parameterSet_;
}


#line 78
- (OrgBouncycastlePqcCryptoLmsLMOtsParameters *)getOtsParameters {
  
#line 80
  return lmOtsType_;
}


#line 83
- (OrgBouncycastlePqcCryptoLmsLMSParameters *)getLMSParameters {
  
#line 85
  return new_OrgBouncycastlePqcCryptoLmsLMSParameters_initWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_([self getSigParameters], [self getOtsParameters]);
}


#line 88
- (IOSByteArray *)getT1 {
  
#line 90
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(T1_);
}


#line 93
- (jboolean)matchesT1WithByteArray:(IOSByteArray *)sig {
  
#line 95
  return OrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(T1_, sig);
}


#line 98
- (IOSByteArray *)getI {
  
#line 100
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(I_);
}


#line 103
- (IOSByteArray *)refI {
  
#line 105
  return I_;
}


#line 108
- (jboolean)isEqual:(id)o {
  
#line 111
  if (JreObjectEqualsEquals(self, o)) {
    
#line 113
    return true;
  }
  if (o == nil || !JreObjectEqualsEquals([self java_getClass], [o java_getClass])) {
    
#line 117
    return false;
  }
  
#line 120
  OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *publicKey = (OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *) cast_chk(o, [OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters class]);
  
#line 122
  if (![((OrgBouncycastlePqcCryptoLmsLMSigParameters *) nil_chk(parameterSet_)) isEqual:publicKey->parameterSet_] || ![((OrgBouncycastlePqcCryptoLmsLMOtsParameters *) nil_chk(lmOtsType_)) isEqual:publicKey->lmOtsType_] || !OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(I_, publicKey->I_)) {
    
#line 124
    return false;
  }
  return OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(T1_, publicKey->T1_);
}


#line 129
- (NSUInteger)hash {
  
#line 132
  jint result = ((jint) [((OrgBouncycastlePqcCryptoLmsLMSigParameters *) nil_chk(parameterSet_)) hash]);
  result = 31 * result + ((jint) [((OrgBouncycastlePqcCryptoLmsLMOtsParameters *) nil_chk(lmOtsType_)) hash]);
  result = 31 * result + OrgBouncycastleUtilArrays_hashCodeWithByteArray_(I_);
  return 31 * result + OrgBouncycastleUtilArrays_hashCodeWithByteArray_(T1_);
}

- (IOSByteArray *)toByteArray {
  
#line 140
  return [((OrgBouncycastlePqcCryptoLmsComposer *) nil_chk([((OrgBouncycastlePqcCryptoLmsComposer *) nil_chk([((OrgBouncycastlePqcCryptoLmsComposer *) nil_chk([((OrgBouncycastlePqcCryptoLmsComposer *) nil_chk([((OrgBouncycastlePqcCryptoLmsComposer *) nil_chk(OrgBouncycastlePqcCryptoLmsComposer_compose())) u32strWithInt:
#line 141
  [((OrgBouncycastlePqcCryptoLmsLMSigParameters *) nil_chk(parameterSet_)) getType]])) u32strWithInt:
#line 142
  [((OrgBouncycastlePqcCryptoLmsLMOtsParameters *) nil_chk(lmOtsType_)) getType]])) bytesWithByteArray:
#line 143
  I_])) bytesWithByteArray:
#line 144
  T1_])) build];
}


#line 148
- (OrgBouncycastlePqcCryptoLmsLMSContext *)generateLMSContextWithByteArray:(IOSByteArray *)signature {
  
#line 151
  @try {
    
#line 153
    return [self generateOtsContextWithOrgBouncycastlePqcCryptoLmsLMSSignature:OrgBouncycastlePqcCryptoLmsLMSSignature_getInstanceWithId_(signature)];
  }
  @catch (JavaIoIOException *e) {
    
#line 157
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"cannot parse signature: ", [e getMessage]));
  }
}


#line 161
- (OrgBouncycastlePqcCryptoLmsLMSContext *)generateOtsContextWithOrgBouncycastlePqcCryptoLmsLMSSignature:(OrgBouncycastlePqcCryptoLmsLMSSignature *)S {
  
#line 163
  jint ots_typecode = [((OrgBouncycastlePqcCryptoLmsLMOtsParameters *) nil_chk([self getOtsParameters])) getType];
  if ([((OrgBouncycastlePqcCryptoLmsLMOtsParameters *) nil_chk([((OrgBouncycastlePqcCryptoLmsLMOtsSignature *) nil_chk([((OrgBouncycastlePqcCryptoLmsLMSSignature *) nil_chk(S)) getOtsSignature])) getType])) getType] != ots_typecode) {
    
#line 166
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"ots type from lsm signature does not match ots signature type from embedded ots signature");
  }
  
#line 170
  return [new_OrgBouncycastlePqcCryptoLmsLMOtsPublicKey_initPackagePrivateWithOrgBouncycastlePqcCryptoLmsLMOtsParameters_withByteArray_withInt_withByteArray_(OrgBouncycastlePqcCryptoLmsLMOtsParameters_getParametersForTypeWithInt_(ots_typecode), I_, [S getQ], nil) createOtsContextWithOrgBouncycastlePqcCryptoLmsLMSSignature:S];
}


#line 173
- (jboolean)verifyWithOrgBouncycastlePqcCryptoLmsLMSContext:(OrgBouncycastlePqcCryptoLmsLMSContext *)context {
  
#line 176
  return OrgBouncycastlePqcCryptoLmsLMS_verifySignatureWithOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_withOrgBouncycastlePqcCryptoLmsLMSContext_(self, context);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters;", 0x9, 1, 2, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoLmsLMSigParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoLmsLMOtsParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoLmsLMSParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoLmsLMSContext;", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoLmsLMSContext;", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastlePqcCryptoLmsLMSigParameters:withOrgBouncycastlePqcCryptoLmsLMOtsParameters:withByteArray:withByteArray:);
  methods[1].selector = @selector(getInstanceWithId:);
  methods[2].selector = @selector(getEncoded);
  methods[3].selector = @selector(getSigParameters);
  methods[4].selector = @selector(getOtsParameters);
  methods[5].selector = @selector(getLMSParameters);
  methods[6].selector = @selector(getT1);
  methods[7].selector = @selector(matchesT1WithByteArray:);
  methods[8].selector = @selector(getI);
  methods[9].selector = @selector(refI);
  methods[10].selector = @selector(isEqual:);
  methods[11].selector = @selector(hash);
  methods[12].selector = @selector(toByteArray);
  methods[13].selector = @selector(generateLMSContextWithByteArray:);
  methods[14].selector = @selector(generateOtsContextWithOrgBouncycastlePqcCryptoLmsLMSSignature:);
  methods[15].selector = @selector(verifyWithOrgBouncycastlePqcCryptoLmsLMSContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parameterSet_", "LOrgBouncycastlePqcCryptoLmsLMSigParameters;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lmOtsType_", "LOrgBouncycastlePqcCryptoLmsLMOtsParameters;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "I_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "T1_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcCryptoLmsLMSigParameters;LOrgBouncycastlePqcCryptoLmsLMOtsParameters;[B[B", "getInstance", "LNSObject;", "LJavaIoIOException;", "matchesT1", "[B", "equals", "hashCode", "generateLMSContext", "generateOtsContext", "LOrgBouncycastlePqcCryptoLmsLMSSignature;", "verify", "LOrgBouncycastlePqcCryptoLmsLMSContext;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters = { "LMSPublicKeyParameters", "org.bouncycastle.pqc.crypto.lms", ptrTable, methods, fields, 7, 0x1, 16, 4, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters;
}

@end


#line 20
void OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_initWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *self, OrgBouncycastlePqcCryptoLmsLMSigParameters *parameterSet, OrgBouncycastlePqcCryptoLmsLMOtsParameters *lmOtsType, IOSByteArray *T1, IOSByteArray *I) {
  OrgBouncycastlePqcCryptoLmsLMSKeyParameters_initWithBoolean_(self,
#line 22
  false);
  
#line 24
  self->parameterSet_ = parameterSet;
  self->lmOtsType_ = lmOtsType;
  self->I_ = OrgBouncycastleUtilArrays_cloneWithByteArray_(I);
  self->T1_ = OrgBouncycastleUtilArrays_cloneWithByteArray_(T1);
}


#line 20
OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *new_OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_initWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoLmsLMSigParameters *parameterSet, OrgBouncycastlePqcCryptoLmsLMOtsParameters *lmOtsType, IOSByteArray *T1, IOSByteArray *I) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters, initWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_withByteArray_withByteArray_, parameterSet, lmOtsType, T1, I)
}


#line 20
OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *create_OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_initWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoLmsLMSigParameters *parameterSet, OrgBouncycastlePqcCryptoLmsLMOtsParameters *lmOtsType, IOSByteArray *T1, IOSByteArray *I) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters, initWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_withByteArray_withByteArray_, parameterSet, lmOtsType, T1, I)
}


#line 30
OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_getInstanceWithId_(id src) {
  OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_initialize();
  
#line 33
  if ([src isKindOfClass:[OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters class]]) {
    
#line 35
    return (OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *) src;
  }
  else if ([src isKindOfClass:[JavaIoDataInputStream class]]) {
    
#line 39
    jint pubType = [((JavaIoDataInputStream *) nil_chk(((JavaIoDataInputStream *) src))) readInt];
    OrgBouncycastlePqcCryptoLmsLMSigParameters *lmsParameter = OrgBouncycastlePqcCryptoLmsLMSigParameters_getParametersForTypeWithInt_(pubType);
    OrgBouncycastlePqcCryptoLmsLMOtsParameters *ostTypeCode = OrgBouncycastlePqcCryptoLmsLMOtsParameters_getParametersForTypeWithInt_([((JavaIoDataInputStream *) nil_chk(((JavaIoDataInputStream *) src))) readInt]);
    
#line 43
    IOSByteArray *I = [IOSByteArray newArrayWithLength:16];
    [((JavaIoDataInputStream *) nil_chk(((JavaIoDataInputStream *) src))) readFullyWithByteArray:I];
    
#line 46
    IOSByteArray *T1 = [IOSByteArray newArrayWithLength:[((OrgBouncycastlePqcCryptoLmsLMSigParameters *) nil_chk(lmsParameter)) getM]];
    [((JavaIoDataInputStream *) nil_chk(((JavaIoDataInputStream *) src))) readFullyWithByteArray:T1];
    return new_OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_initWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_withByteArray_withByteArray_(lmsParameter, ostTypeCode, T1, I);
  }
  else if ([src isKindOfClass:[IOSByteArray class]]) {
    JavaIoInputStream *in = new_JavaIoDataInputStream_initWithJavaIoInputStream_(new_JavaIoByteArrayInputStream_initWithByteArray_(
#line 53
    (IOSByteArray *) cast_chk(src, [IOSByteArray class])));
    JavaLangThrowable *__primaryException1 = nil;
    
#line 53
    @try {
      
#line 55
      return OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_getInstanceWithId_(in);
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (in != nil) {
        if (__primaryException1 != nil) {
          @try {
            [in close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [in close];
        }
      }
    }
  }
  else
#line 58
  if ([src isKindOfClass:[JavaIoInputStream class]]) {
    
#line 60
    return OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters_getInstanceWithId_(OrgBouncycastleUtilIoStreams_readAllWithJavaIoInputStream_((JavaIoInputStream *) src));
  }
  
#line 63
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"cannot parse ", src));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters)
