//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/ExchangePair.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoExchangePair")
#ifdef RESTRICT_OrgBouncycastlePqcCryptoExchangePair
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoExchangePair 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoExchangePair 1
#endif
#undef RESTRICT_OrgBouncycastlePqcCryptoExchangePair

#if !defined (OrgBouncycastlePqcCryptoExchangePair_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoExchangePair || defined(INCLUDE_OrgBouncycastlePqcCryptoExchangePair))
#define OrgBouncycastlePqcCryptoExchangePair_

@class IOSByteArray;
@class OrgBouncycastleCryptoParamsAsymmetricKeyParameter;

/*!
 @brief Pair for a value exchange algorithm where the responding party has no private key, such as NewHope.
 */
@interface OrgBouncycastlePqcCryptoExchangePair : NSObject

#pragma mark Public

/*!
 @brief Base constructor.
 @param publicKey The responding party's public key.
 @param shared the calculated shared value.
 */
- (instancetype)initWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)publicKey
                                                            withByteArray:(IOSByteArray *)shared;

/*!
 @brief Return the responding party's public key.
 @return the public key calculated for the exchange.
 */
- (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKey;

/*!
 @brief Return the shared value calculated with public key.
 @return the shared value.
 */
- (IOSByteArray *)getSharedValue;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoExchangePair)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoExchangePair_initWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withByteArray_(OrgBouncycastlePqcCryptoExchangePair *self, OrgBouncycastleCryptoParamsAsymmetricKeyParameter *publicKey, IOSByteArray *shared);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoExchangePair *new_OrgBouncycastlePqcCryptoExchangePair_initWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withByteArray_(OrgBouncycastleCryptoParamsAsymmetricKeyParameter *publicKey, IOSByteArray *shared) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoExchangePair *create_OrgBouncycastlePqcCryptoExchangePair_initWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withByteArray_(OrgBouncycastleCryptoParamsAsymmetricKeyParameter *publicKey, IOSByteArray *shared);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoExchangePair)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoExchangePair")
