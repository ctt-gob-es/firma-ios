//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/util/PrivateKeyFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPrivateKeyFactory")
#ifdef RESTRICT_OrgBouncycastlePqcCryptoUtilPrivateKeyFactory
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPrivateKeyFactory 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPrivateKeyFactory 1
#endif
#undef RESTRICT_OrgBouncycastlePqcCryptoUtilPrivateKeyFactory

#if !defined (OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPrivateKeyFactory || defined(INCLUDE_OrgBouncycastlePqcCryptoUtilPrivateKeyFactory))
#define OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_

@class IOSByteArray;
@class JavaIoInputStream;
@class OrgBouncycastleAsn1PkcsPrivateKeyInfo;
@class OrgBouncycastleCryptoParamsAsymmetricKeyParameter;

/*!
 @brief Factory for creating private key objects from PKCS8 PrivateKeyInfo objects.
 */
@interface OrgBouncycastlePqcCryptoUtilPrivateKeyFactory : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Create a private key parameter from a PKCS8 PrivateKeyInfo encoding.
 @param privateKeyInfoData the PrivateKeyInfo encoding
 @return a suitable private key parameter
 @throw IOExceptionon an error decoding the key
 */
+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithByteArray:(IOSByteArray *)privateKeyInfoData;

/*!
 @brief Create a private key parameter from a PKCS8 PrivateKeyInfo encoding read from a
  stream.
 @param inStr the stream to read the PrivateKeyInfo encoding from
 @return a suitable private key parameter
 @throw IOExceptionon an error decoding the key
 */
+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithJavaIoInputStream:(JavaIoInputStream *)inStr;

/*!
 @brief Create a private key parameter from the passed in PKCS8 PrivateKeyInfo object.
 @param keyInfo the PrivateKeyInfo object containing the key material
 @return a suitable private key parameter
 @throw IOExceptionon an error decoding the key
 */
+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithOrgBouncycastleAsn1PkcsPrivateKeyInfo:(OrgBouncycastleAsn1PkcsPrivateKeyInfo *)keyInfo;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoUtilPrivateKeyFactory)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_init(OrgBouncycastlePqcCryptoUtilPrivateKeyFactory *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoUtilPrivateKeyFactory *new_OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoUtilPrivateKeyFactory *create_OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_init(void);

FOUNDATION_EXPORT OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_createKeyWithByteArray_(IOSByteArray *privateKeyInfoData);

FOUNDATION_EXPORT OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_createKeyWithJavaIoInputStream_(JavaIoInputStream *inStr);

FOUNDATION_EXPORT OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_createKeyWithOrgBouncycastleAsn1PkcsPrivateKeyInfo_(OrgBouncycastleAsn1PkcsPrivateKeyInfo *keyInfo);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoUtilPrivateKeyFactory)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPrivateKeyFactory")
