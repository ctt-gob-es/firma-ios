//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/util/PrivateKeyInfoFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPrivateKeyInfoFactory")
#ifdef RESTRICT_OrgBouncycastlePqcCryptoUtilPrivateKeyInfoFactory
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPrivateKeyInfoFactory 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPrivateKeyInfoFactory 1
#endif
#undef RESTRICT_OrgBouncycastlePqcCryptoUtilPrivateKeyInfoFactory

#if !defined (OrgBouncycastlePqcCryptoUtilPrivateKeyInfoFactory_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPrivateKeyInfoFactory || defined(INCLUDE_OrgBouncycastlePqcCryptoUtilPrivateKeyInfoFactory))
#define OrgBouncycastlePqcCryptoUtilPrivateKeyInfoFactory_

@class OrgBouncycastleAsn1ASN1Set;
@class OrgBouncycastleAsn1PkcsPrivateKeyInfo;
@class OrgBouncycastleCryptoParamsAsymmetricKeyParameter;

/*!
 @brief Factory to create ASN.1 private key info objects from lightweight private keys.
 */
@interface OrgBouncycastlePqcCryptoUtilPrivateKeyInfoFactory : NSObject

#pragma mark Public

/*!
 @brief Create a PrivateKeyInfo representation of a private key.
 @param privateKey the key to be encoded into the info object.
 @return the appropriate PrivateKeyInfo
 @throw java.io.IOExceptionon an error encoding the key
 */
+ (OrgBouncycastleAsn1PkcsPrivateKeyInfo *)createPrivateKeyInfoWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privateKey;

/*!
 @brief Create a PrivateKeyInfo representation of a private key with attributes.
 @param privateKey the key to be encoded into the info object.
 @param attributes the set of attributes to be included.
 @return the appropriate PrivateKeyInfo
 @throw java.io.IOExceptionon an error encoding the key
 */
+ (OrgBouncycastleAsn1PkcsPrivateKeyInfo *)createPrivateKeyInfoWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)privateKey
                                                                                      withOrgBouncycastleAsn1ASN1Set:(OrgBouncycastleAsn1ASN1Set *)attributes;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoUtilPrivateKeyInfoFactory)

FOUNDATION_EXPORT OrgBouncycastleAsn1PkcsPrivateKeyInfo *OrgBouncycastlePqcCryptoUtilPrivateKeyInfoFactory_createPrivateKeyInfoWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(OrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateKey);

FOUNDATION_EXPORT OrgBouncycastleAsn1PkcsPrivateKeyInfo *OrgBouncycastlePqcCryptoUtilPrivateKeyInfoFactory_createPrivateKeyInfoWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withOrgBouncycastleAsn1ASN1Set_(OrgBouncycastleCryptoParamsAsymmetricKeyParameter *privateKey, OrgBouncycastleAsn1ASN1Set *attributes);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoUtilPrivateKeyInfoFactory)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPrivateKeyInfoFactory")
