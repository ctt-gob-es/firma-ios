//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/util/PrivateKeyFactory.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "org/bouncycastle/asn1/ASN1BitString.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1InputStream.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1OctetString.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/bc/BCObjectIdentifiers.h"
#include "org/bouncycastle/asn1/pkcs/PKCSObjectIdentifiers.h"
#include "org/bouncycastle/asn1/pkcs/PrivateKeyInfo.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/pqc/asn1/CMCEPrivateKey.h"
#include "org/bouncycastle/pqc/asn1/McElieceCCA2PrivateKey.h"
#include "org/bouncycastle/pqc/asn1/PQCObjectIdentifiers.h"
#include "org/bouncycastle/pqc/asn1/SPHINCS256KeyParams.h"
#include "org/bouncycastle/pqc/crypto/cmce/CMCEParameters.h"
#include "org/bouncycastle/pqc/crypto/cmce/CMCEPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/frodo/FrodoParameters.h"
#include "org/bouncycastle/pqc/crypto/frodo/FrodoPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/HSSPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2PrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/newhope/NHPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/qtesla/QTESLAPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/saber/SABERParameters.h"
#include "org/bouncycastle/pqc/crypto/saber/SABERPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCSPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincsplus/SPHINCSPlusPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/util/PrivateKeyFactory.h"
#include "org/bouncycastle/pqc/crypto/util/Utils.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2mField.h"
#include "org/bouncycastle/pqc/math/linearalgebra/Permutation.h"
#include "org/bouncycastle/pqc/math/linearalgebra/PolynomialGF2mSmallM.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/Integers.h"
#include "org/bouncycastle/util/Pack.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/util/PrivateKeyFactory must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoUtilPrivateKeyFactory ()

+ (IOSShortArray *)convertWithByteArray:(IOSByteArray *)octets;

@end

__attribute__((unused)) static IOSShortArray *OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_convertWithByteArray_(IOSByteArray *octets);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/util/PrivateKeyFactory.java"


#line 41
@implementation OrgBouncycastlePqcCryptoUtilPrivateKeyFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 41
- (instancetype)init {
  OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 50
+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithByteArray:(IOSByteArray *)privateKeyInfoData {
  return OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_createKeyWithByteArray_(privateKeyInfoData);
}


#line 63
+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithJavaIoInputStream:(JavaIoInputStream *)inStr {
  return OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_createKeyWithJavaIoInputStream_(inStr);
}


#line 75
+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithOrgBouncycastleAsn1PkcsPrivateKeyInfo:(OrgBouncycastleAsn1PkcsPrivateKeyInfo *)keyInfo {
  return OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_createKeyWithOrgBouncycastleAsn1PkcsPrivateKeyInfo_(keyInfo);
}


#line 162
+ (IOSShortArray *)convertWithByteArray:(IOSByteArray *)octets {
  return OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_convertWithByteArray_(octets);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 3, 2, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 4, 2, -1, -1, -1 },
    { NULL, "[S", 0xa, 5, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createKeyWithByteArray:);
  methods[2].selector = @selector(createKeyWithJavaIoInputStream:);
  methods[3].selector = @selector(createKeyWithOrgBouncycastleAsn1PkcsPrivateKeyInfo:);
  methods[4].selector = @selector(convertWithByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createKey", "[B", "LJavaIoIOException;", "LJavaIoInputStream;", "LOrgBouncycastleAsn1PkcsPrivateKeyInfo;", "convert" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoUtilPrivateKeyFactory = { "PrivateKeyFactory", "org.bouncycastle.pqc.crypto.util", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoUtilPrivateKeyFactory;
}

@end


#line 41
void OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_init(OrgBouncycastlePqcCryptoUtilPrivateKeyFactory *self) {
  NSObject_init(self);
}


#line 41
OrgBouncycastlePqcCryptoUtilPrivateKeyFactory *new_OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoUtilPrivateKeyFactory, init)
}


#line 41
OrgBouncycastlePqcCryptoUtilPrivateKeyFactory *create_OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoUtilPrivateKeyFactory, init)
}


#line 50
OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_createKeyWithByteArray_(IOSByteArray *privateKeyInfoData) {
  OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_initialize();
  return OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_createKeyWithOrgBouncycastleAsn1PkcsPrivateKeyInfo_(OrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_(OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(privateKeyInfoData)));
}


#line 63
OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_createKeyWithJavaIoInputStream_(JavaIoInputStream *inStr) {
  OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_initialize();
  return OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_createKeyWithOrgBouncycastleAsn1PkcsPrivateKeyInfo_(OrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_([new_OrgBouncycastleAsn1ASN1InputStream_initWithJavaIoInputStream_(inStr) readObject]));
}


#line 75
OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_createKeyWithOrgBouncycastleAsn1PkcsPrivateKeyInfo_(OrgBouncycastleAsn1PkcsPrivateKeyInfo *keyInfo) {
  OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_initialize();
  OrgBouncycastleAsn1X509AlgorithmIdentifier *algId = [((OrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(keyInfo)) getPrivateKeyAlgorithm];
  OrgBouncycastleAsn1ASN1ObjectIdentifier *algOID = [((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(algId)) getAlgorithm];
  
#line 80
  if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(algOID)) onWithOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgBouncycastleAsn1BcBCObjectIdentifiers, qTESLA)]) {
    
#line 82
    OrgBouncycastleAsn1ASN1OctetString *qTESLAPriv = OrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([keyInfo parsePrivateKey]);
    
#line 84
    return new_OrgBouncycastlePqcCryptoQteslaQTESLAPrivateKeyParameters_initWithInt_withByteArray_(OrgBouncycastlePqcCryptoUtilUtils_qTeslaLookupSecurityCategoryWithOrgBouncycastleAsn1X509AlgorithmIdentifier_([keyInfo getPrivateKeyAlgorithm]), [((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(qTESLAPriv)) getOctets]);
  }
  if ([algOID equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1BcBCObjectIdentifiers, sphincs256)]) {
    
#line 88
    return new_OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters_initWithByteArray_withNSString_([((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(OrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([keyInfo parsePrivateKey]))) getOctets], OrgBouncycastlePqcCryptoUtilUtils_sphincs256LookupTreeAlgNameWithOrgBouncycastlePqcAsn1SPHINCS256KeyParams_(OrgBouncycastlePqcAsn1SPHINCS256KeyParams_getInstanceWithId_(
#line 89
    [((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([keyInfo getPrivateKeyAlgorithm])) getParameters])));
  }
  if ([algOID equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1BcBCObjectIdentifiers, newHope)]) {
    
#line 93
    return new_OrgBouncycastlePqcCryptoNewhopeNHPrivateKeyParameters_initWithShortArray_(OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_convertWithByteArray_([((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(OrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([keyInfo parsePrivateKey]))) getOctets]));
  }
  if ([algOID equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, id_alg_hss_lms_hashsig)]) {
    
#line 97
    IOSByteArray *keyEnc = [((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(OrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([keyInfo parsePrivateKey]))) getOctets];
    OrgBouncycastleAsn1ASN1BitString *pubKey = [keyInfo getPublicKeyData];
    
#line 100
    if (OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(keyEnc, 0) == 1) {
      
#line 102
      if (pubKey != nil) {
        
#line 104
        IOSByteArray *pubEnc = [pubKey getOctets];
        
#line 106
        return OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters_getInstanceWithByteArray_withByteArray_(OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(keyEnc, 4, ((IOSByteArray *) nil_chk(keyEnc))->size_), OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(pubEnc, 4, ((IOSByteArray *) nil_chk(pubEnc))->size_));
      }
      return OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters_getInstanceWithId_(OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(keyEnc, 4, ((IOSByteArray *) nil_chk(keyEnc))->size_));
    }
    if (pubKey != nil) {
      
#line 112
      IOSByteArray *pubEnc = [pubKey getOctets];
      
#line 114
      return OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_getInstanceWithByteArray_withByteArray_(OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(keyEnc, 4, ((IOSByteArray *) nil_chk(keyEnc))->size_), pubEnc);
    }
    return OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters_getInstanceWithId_(OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(keyEnc, 4, ((IOSByteArray *) nil_chk(keyEnc))->size_));
  }
  if ([algOID onWithOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgBouncycastleAsn1BcBCObjectIdentifiers, sphincsPlus)]) {
    
#line 120
    IOSByteArray *keyEnc = [((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(OrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([keyInfo parsePrivateKey]))) getOctets];
    OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters *spParams = OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_getParamsWithJavaLangInteger_(OrgBouncycastleUtilIntegers_valueOfWithInt_(OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(keyEnc, 0)));
    
#line 123
    return new_OrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusPrivateKeyParameters_initWithOrgBouncycastlePqcCryptoSphincsplusSPHINCSPlusParameters_withByteArray_(spParams, OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(keyEnc, 4, ((IOSByteArray *) nil_chk(keyEnc))->size_));
  }
  if ([algOID onWithOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgBouncycastleAsn1BcBCObjectIdentifiers, pqc_kem_mceliece)]) {
    
#line 127
    OrgBouncycastlePqcAsn1CMCEPrivateKey *cmceKey = OrgBouncycastlePqcAsn1CMCEPrivateKey_getInstanceWithId_([keyInfo parsePrivateKey]);
    OrgBouncycastlePqcCryptoCmceCMCEParameters *spParams = OrgBouncycastlePqcCryptoUtilUtils_mcElieceParamsLookupWithOrgBouncycastleAsn1ASN1ObjectIdentifier_([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([keyInfo getPrivateKeyAlgorithm])) getAlgorithm]);
    
#line 130
    return new_OrgBouncycastlePqcCryptoCmceCMCEPrivateKeyParameters_initWithOrgBouncycastlePqcCryptoCmceCMCEParameters_withByteArray_withByteArray_withByteArray_withByteArray_withByteArray_(spParams, [((OrgBouncycastlePqcAsn1CMCEPrivateKey *) nil_chk(cmceKey)) getDelta], [cmceKey getC], [cmceKey getG], [cmceKey getAlpha], [cmceKey getS]);
  }
  else if ([algOID onWithOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgBouncycastleAsn1BcBCObjectIdentifiers, pqc_kem_frodo)]) {
    
#line 134
    IOSByteArray *keyEnc = [((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(OrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([keyInfo parsePrivateKey]))) getOctets];
    OrgBouncycastlePqcCryptoFrodoFrodoParameters *spParams = OrgBouncycastlePqcCryptoUtilUtils_frodoParamsLookupWithOrgBouncycastleAsn1ASN1ObjectIdentifier_([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([keyInfo getPrivateKeyAlgorithm])) getAlgorithm]);
    
#line 137
    return new_OrgBouncycastlePqcCryptoFrodoFrodoPrivateKeyParameters_initWithOrgBouncycastlePqcCryptoFrodoFrodoParameters_withByteArray_(spParams, keyEnc);
  }
  else if ([algOID onWithOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgBouncycastleAsn1BcBCObjectIdentifiers, pqc_kem_saber)]) {
    
#line 141
    IOSByteArray *keyEnc = [((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(OrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([keyInfo parsePrivateKey]))) getOctets];
    OrgBouncycastlePqcCryptoSaberSABERParameters *spParams = OrgBouncycastlePqcCryptoUtilUtils_saberParamsLookupWithOrgBouncycastleAsn1ASN1ObjectIdentifier_([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([keyInfo getPrivateKeyAlgorithm])) getAlgorithm]);
    
#line 144
    return new_OrgBouncycastlePqcCryptoSaberSABERPrivateKeyParameters_initWithOrgBouncycastlePqcCryptoSaberSABERParameters_withByteArray_(spParams, keyEnc);
  }
  else if ([algOID equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1BcBCObjectIdentifiers, xmss)] || [algOID equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastlePqcAsn1PQCObjectIdentifiers, xmss_mt)]) {
    
#line 148
    @throw new_JavaIoIOException_initWithNSString_(@"Modificacion para JMultiCard");
  }
  else if ([algOID equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastlePqcAsn1PQCObjectIdentifiers, mcElieceCca2)]) {
    
#line 152
    OrgBouncycastlePqcAsn1McElieceCCA2PrivateKey *mKey = OrgBouncycastlePqcAsn1McElieceCCA2PrivateKey_getInstanceWithId_([keyInfo parsePrivateKey]);
    
#line 154
    return new_OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_initWithInt_withInt_withOrgBouncycastlePqcMathLinearalgebraGF2mField_withOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_withOrgBouncycastlePqcMathLinearalgebraPermutation_withNSString_([((OrgBouncycastlePqcAsn1McElieceCCA2PrivateKey *) nil_chk(mKey)) getN], [mKey getK], [mKey getField], [mKey getGoppaPoly], [mKey getP], OrgBouncycastlePqcCryptoUtilUtils_getDigestNameWithOrgBouncycastleAsn1ASN1ObjectIdentifier_([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([mKey getDigest])) getAlgorithm]));
  }
  else {
    
#line 158
    @throw new_JavaLangRuntimeException_initWithNSString_(@"algorithm identifier in private key not recognised");
  }
}


#line 162
IOSShortArray *OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_convertWithByteArray_(IOSByteArray *octets) {
  OrgBouncycastlePqcCryptoUtilPrivateKeyFactory_initialize();
  IOSShortArray *rv = [IOSShortArray newArrayWithLength:JreIntDiv(((IOSByteArray *) nil_chk(octets))->size_, 2)];
  
#line 166
  for (jint i = 0; i != rv->size_; i++) {
    
#line 168
    *IOSShortArray_GetRef(rv, i) = OrgBouncycastleUtilPack_littleEndianToShortWithByteArray_withInt_(octets, i * 2);
  }
  
#line 171
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoUtilPrivateKeyFactory)
