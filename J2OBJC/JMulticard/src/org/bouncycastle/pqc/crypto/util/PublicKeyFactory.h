//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/util/PublicKeyFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPublicKeyFactory")
#ifdef RESTRICT_OrgBouncycastlePqcCryptoUtilPublicKeyFactory
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPublicKeyFactory 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPublicKeyFactory 1
#endif
#undef RESTRICT_OrgBouncycastlePqcCryptoUtilPublicKeyFactory
#ifdef INCLUDE_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_FrodoConverter
#define INCLUDE_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter 1
#endif
#ifdef INCLUDE_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_CMCEConverter
#define INCLUDE_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter 1
#endif
#ifdef INCLUDE_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_XMSSMTConverter
#define INCLUDE_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter 1
#endif
#ifdef INCLUDE_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_NHConverter
#define INCLUDE_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter 1
#endif
#ifdef INCLUDE_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SPHINCSConverter
#define INCLUDE_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter 1
#endif

#if !defined (OrgBouncycastlePqcCryptoUtilPublicKeyFactory_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPublicKeyFactory || defined(INCLUDE_OrgBouncycastlePqcCryptoUtilPublicKeyFactory))
#define OrgBouncycastlePqcCryptoUtilPublicKeyFactory_

@class IOSByteArray;
@class JavaIoInputStream;
@class OrgBouncycastleAsn1X509SubjectPublicKeyInfo;
@class OrgBouncycastleCryptoParamsAsymmetricKeyParameter;

/*!
 @brief Factory to create asymmetric public key parameters for asymmetric ciphers from range of
  ASN.1 encoded SubjectPublicKeyInfo objects.
 */
@interface OrgBouncycastlePqcCryptoUtilPublicKeyFactory : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Create a public key from a SubjectPublicKeyInfo encoding
 @param keyInfoData the SubjectPublicKeyInfo encoding
 @return the appropriate key parameter
 @throw IOExceptionon an error decoding the key
 */
+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithByteArray:(IOSByteArray *)keyInfoData;

/*!
 @brief Create a public key from a SubjectPublicKeyInfo encoding read from a stream
 @param inStr the stream to read the SubjectPublicKeyInfo encoding from
 @return the appropriate key parameter
 @throw IOExceptionon an error decoding the key
 */
+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithJavaIoInputStream:(JavaIoInputStream *)inStr;

/*!
 @brief Create a public key from the passed in SubjectPublicKeyInfo
 @param keyInfo the SubjectPublicKeyInfo containing the key data
 @return the appropriate key parameter
 @throw IOExceptionon an error decoding the key
 */
+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo;

/*!
 @brief Create a public key from the passed in SubjectPublicKeyInfo
 @param keyInfo the SubjectPublicKeyInfo containing the key data
 @param defaultParams default parameters that might be needed.
 @return the appropriate key parameter
 @throw IOExceptionon an error decoding the key
 */
+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                         withId:(id)defaultParams;

@end

J2OBJC_STATIC_INIT(OrgBouncycastlePqcCryptoUtilPublicKeyFactory)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoUtilPublicKeyFactory_init(OrgBouncycastlePqcCryptoUtilPublicKeyFactory *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoUtilPublicKeyFactory *new_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoUtilPublicKeyFactory *create_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_init(void);

FOUNDATION_EXPORT OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastlePqcCryptoUtilPublicKeyFactory_createKeyWithByteArray_(IOSByteArray *keyInfoData);

FOUNDATION_EXPORT OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastlePqcCryptoUtilPublicKeyFactory_createKeyWithJavaIoInputStream_(JavaIoInputStream *inStr);

FOUNDATION_EXPORT OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastlePqcCryptoUtilPublicKeyFactory_createKeyWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo);

FOUNDATION_EXPORT OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastlePqcCryptoUtilPublicKeyFactory_createKeyWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withId_(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo, id defaultParams);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoUtilPublicKeyFactory)

#endif

#if !defined (OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPublicKeyFactory || defined(INCLUDE_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter))
#define OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter_

@class OrgBouncycastleAsn1X509SubjectPublicKeyInfo;
@class OrgBouncycastleCryptoParamsAsymmetricKeyParameter;

@interface OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter : NSObject

#pragma mark Package-Private

- (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                      withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter)

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter)

#endif

#if !defined (OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SPHINCSConverter_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPublicKeyFactory || defined(INCLUDE_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SPHINCSConverter))
#define OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SPHINCSConverter_

@class OrgBouncycastleAsn1X509SubjectPublicKeyInfo;
@class OrgBouncycastleCryptoParamsAsymmetricKeyParameter;

@interface OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SPHINCSConverter : OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

#pragma mark Package-Private

- (instancetype)init;

- (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                      withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SPHINCSConverter)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SPHINCSConverter_init(OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SPHINCSConverter *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SPHINCSConverter *new_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SPHINCSConverter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SPHINCSConverter *create_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SPHINCSConverter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SPHINCSConverter)

#endif

#if !defined (OrgBouncycastlePqcCryptoUtilPublicKeyFactory_NHConverter_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPublicKeyFactory || defined(INCLUDE_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_NHConverter))
#define OrgBouncycastlePqcCryptoUtilPublicKeyFactory_NHConverter_

@class OrgBouncycastleAsn1X509SubjectPublicKeyInfo;
@class OrgBouncycastleCryptoParamsAsymmetricKeyParameter;

@interface OrgBouncycastlePqcCryptoUtilPublicKeyFactory_NHConverter : OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

#pragma mark Package-Private

- (instancetype)init;

- (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                      withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoUtilPublicKeyFactory_NHConverter)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoUtilPublicKeyFactory_NHConverter_init(OrgBouncycastlePqcCryptoUtilPublicKeyFactory_NHConverter *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoUtilPublicKeyFactory_NHConverter *new_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_NHConverter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoUtilPublicKeyFactory_NHConverter *create_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_NHConverter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoUtilPublicKeyFactory_NHConverter)

#endif

#if !defined (OrgBouncycastlePqcCryptoUtilPublicKeyFactory_XMSSMTConverter_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPublicKeyFactory || defined(INCLUDE_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_XMSSMTConverter))
#define OrgBouncycastlePqcCryptoUtilPublicKeyFactory_XMSSMTConverter_

@class OrgBouncycastleAsn1X509SubjectPublicKeyInfo;
@class OrgBouncycastleCryptoParamsAsymmetricKeyParameter;

@interface OrgBouncycastlePqcCryptoUtilPublicKeyFactory_XMSSMTConverter : OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

#pragma mark Package-Private

- (instancetype)init;

- (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                      withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoUtilPublicKeyFactory_XMSSMTConverter)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoUtilPublicKeyFactory_XMSSMTConverter_init(OrgBouncycastlePqcCryptoUtilPublicKeyFactory_XMSSMTConverter *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoUtilPublicKeyFactory_XMSSMTConverter *new_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_XMSSMTConverter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoUtilPublicKeyFactory_XMSSMTConverter *create_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_XMSSMTConverter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoUtilPublicKeyFactory_XMSSMTConverter)

#endif

#if !defined (OrgBouncycastlePqcCryptoUtilPublicKeyFactory_CMCEConverter_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPublicKeyFactory || defined(INCLUDE_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_CMCEConverter))
#define OrgBouncycastlePqcCryptoUtilPublicKeyFactory_CMCEConverter_

@class OrgBouncycastleAsn1X509SubjectPublicKeyInfo;
@class OrgBouncycastleCryptoParamsAsymmetricKeyParameter;

@interface OrgBouncycastlePqcCryptoUtilPublicKeyFactory_CMCEConverter : OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

#pragma mark Package-Private

- (instancetype)init;

- (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                      withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoUtilPublicKeyFactory_CMCEConverter)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoUtilPublicKeyFactory_CMCEConverter_init(OrgBouncycastlePqcCryptoUtilPublicKeyFactory_CMCEConverter *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoUtilPublicKeyFactory_CMCEConverter *new_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_CMCEConverter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoUtilPublicKeyFactory_CMCEConverter *create_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_CMCEConverter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoUtilPublicKeyFactory_CMCEConverter)

#endif

#if !defined (OrgBouncycastlePqcCryptoUtilPublicKeyFactory_FrodoConverter_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPublicKeyFactory || defined(INCLUDE_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_FrodoConverter))
#define OrgBouncycastlePqcCryptoUtilPublicKeyFactory_FrodoConverter_

@class OrgBouncycastleAsn1X509SubjectPublicKeyInfo;
@class OrgBouncycastleCryptoParamsAsymmetricKeyParameter;

@interface OrgBouncycastlePqcCryptoUtilPublicKeyFactory_FrodoConverter : OrgBouncycastlePqcCryptoUtilPublicKeyFactory_SubjectPublicKeyInfoConverter

#pragma mark Package-Private

- (instancetype)init;

- (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getPublicKeyParametersWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo
                                                                                                                      withId:(id)defaultParams;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoUtilPublicKeyFactory_FrodoConverter)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoUtilPublicKeyFactory_FrodoConverter_init(OrgBouncycastlePqcCryptoUtilPublicKeyFactory_FrodoConverter *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoUtilPublicKeyFactory_FrodoConverter *new_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_FrodoConverter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoUtilPublicKeyFactory_FrodoConverter *create_OrgBouncycastlePqcCryptoUtilPublicKeyFactory_FrodoConverter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoUtilPublicKeyFactory_FrodoConverter)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoUtilPublicKeyFactory")
