//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/frodo/FrodoEngine.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/Xof.h"
#include "org/bouncycastle/pqc/crypto/frodo/FrodoEngine.h"
#include "org/bouncycastle/pqc/crypto/frodo/FrodoMatrixGenerator.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/Pack.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/frodo/FrodoEngine must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoFrodoFrodoEngine () {
 @public
  jint D_;
  jint q_;
  jint n_;
  jint B_;
  jint len_sk_bytes_;
  jint len_pk_bytes_;
  jint len_ct_bytes_;
  IOSShortArray *T_chi_;
  jint len_mu_;
  jint len_seedSE_;
  jint len_s_;
  jint len_k_;
  jint len_pkh_;
  jint len_ss_;
  jint len_mu_bytes_;
  jint len_seedSE_bytes_;
  jint len_s_bytes_;
  jint len_k_bytes_;
  jint len_pkh_bytes_;
  jint len_ss_bytes_;
  id<OrgBouncycastleCryptoXof> digest_;
  OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator *gen_;
}

- (jshort)sampleWithShort:(jshort)r;

- (IOSShortArray *)sample_matrixWithShortArray:(IOSShortArray *)r
                                       withInt:(jint)offset
                                       withInt:(jint)n1
                                       withInt:(jint)n2;

- (IOSShortArray *)matrix_transposeWithShortArray:(IOSShortArray *)X
                                          withInt:(jint)n1
                                          withInt:(jint)n2;

- (IOSShortArray *)matrix_mulWithShortArray:(IOSShortArray *)X
                                    withInt:(jint)Xrow
                                    withInt:(jint)Xcol
                             withShortArray:(IOSShortArray *)Y
                                    withInt:(jint)Yrow
                                    withInt:(jint)Ycol;

- (IOSShortArray *)matrix_addWithShortArray:(IOSShortArray *)X
                             withShortArray:(IOSShortArray *)Y
                                    withInt:(jint)n1
                                    withInt:(jint)m1;

- (IOSByteArray *)packWithShortArray:(IOSShortArray *)C;

- (IOSShortArray *)unpackWithByteArray:(IOSByteArray *)inArg
                               withInt:(jint)n1
                               withInt:(jint)n2;

- (IOSShortArray *)encodeWithByteArray:(IOSByteArray *)k;

- (IOSShortArray *)matrix_subWithShortArray:(IOSShortArray *)X
                             withShortArray:(IOSShortArray *)Y
                                    withInt:(jint)n1
                                    withInt:(jint)n2;

- (IOSByteArray *)decodeWithShortArray:(IOSShortArray *)inArg;

- (jshort)ctverifyWithShortArray:(IOSShortArray *)a1
                  withShortArray:(IOSShortArray *)a2
                  withShortArray:(IOSShortArray *)b1
                  withShortArray:(IOSShortArray *)b2;

- (IOSByteArray *)ctselectWithByteArray:(IOSByteArray *)a
                          withByteArray:(IOSByteArray *)b
                              withShort:(jshort)selector;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoFrodoFrodoEngine, T_chi_, IOSShortArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoFrodoFrodoEngine, digest_, id<OrgBouncycastleCryptoXof>)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoFrodoFrodoEngine, gen_, OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator *)

inline jint OrgBouncycastlePqcCryptoFrodoFrodoEngine_get_nbar(void);
#define OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoFrodoFrodoEngine, nbar, jint)

inline jint OrgBouncycastlePqcCryptoFrodoFrodoEngine_get_mbar(void);
#define OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoFrodoFrodoEngine, mbar, jint)

inline jint OrgBouncycastlePqcCryptoFrodoFrodoEngine_get_len_seedA(void);
#define OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_seedA 128
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoFrodoFrodoEngine, len_seedA, jint)

inline jint OrgBouncycastlePqcCryptoFrodoFrodoEngine_get_len_z(void);
#define OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_z 128
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoFrodoFrodoEngine, len_z, jint)

inline jint OrgBouncycastlePqcCryptoFrodoFrodoEngine_get_len_chi(void);
#define OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_chi 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoFrodoFrodoEngine, len_chi, jint)

inline jint OrgBouncycastlePqcCryptoFrodoFrodoEngine_get_len_seedA_bytes(void);
#define OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_seedA_bytes 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoFrodoFrodoEngine, len_seedA_bytes, jint)

inline jint OrgBouncycastlePqcCryptoFrodoFrodoEngine_get_len_z_bytes(void);
#define OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_z_bytes 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoFrodoFrodoEngine, len_z_bytes, jint)

inline jint OrgBouncycastlePqcCryptoFrodoFrodoEngine_get_len_chi_bytes(void);
#define OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_chi_bytes 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoFrodoFrodoEngine, len_chi_bytes, jint)

__attribute__((unused)) static jshort OrgBouncycastlePqcCryptoFrodoFrodoEngine_sampleWithShort_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, jshort r);

__attribute__((unused)) static IOSShortArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_sample_matrixWithShortArray_withInt_withInt_withInt_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSShortArray *r, jint offset, jint n1, jint n2);

__attribute__((unused)) static IOSShortArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_transposeWithShortArray_withInt_withInt_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSShortArray *X, jint n1, jint n2);

__attribute__((unused)) static IOSShortArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_mulWithShortArray_withInt_withInt_withShortArray_withInt_withInt_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSShortArray *X, jint Xrow, jint Xcol, IOSShortArray *Y, jint Yrow, jint Ycol);

__attribute__((unused)) static IOSShortArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_addWithShortArray_withShortArray_withInt_withInt_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSShortArray *X, IOSShortArray *Y, jint n1, jint m1);

__attribute__((unused)) static IOSByteArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_packWithShortArray_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSShortArray *C);

__attribute__((unused)) static IOSShortArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_unpackWithByteArray_withInt_withInt_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSByteArray *inArg, jint n1, jint n2);

__attribute__((unused)) static IOSShortArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_encodeWithByteArray_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSByteArray *k);

__attribute__((unused)) static IOSShortArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_subWithShortArray_withShortArray_withInt_withInt_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSShortArray *X, IOSShortArray *Y, jint n1, jint n2);

__attribute__((unused)) static IOSByteArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_decodeWithShortArray_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSShortArray *inArg);

__attribute__((unused)) static jshort OrgBouncycastlePqcCryptoFrodoFrodoEngine_ctverifyWithShortArray_withShortArray_withShortArray_withShortArray_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSShortArray *a1, IOSShortArray *a2, IOSShortArray *b1, IOSShortArray *b2);

__attribute__((unused)) static IOSByteArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_ctselectWithByteArray_withByteArray_withShort_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSByteArray *a, IOSByteArray *b, jshort selector);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/frodo/FrodoEngine.java"


#line 9
@implementation OrgBouncycastlePqcCryptoFrodoFrodoEngine


#line 52
- (jint)getCipherTextSize {
  
#line 54
  return len_ct_bytes_;
}


#line 57
- (jint)getSessionKeySize {
  
#line 59
  return len_ss_bytes_;
}


#line 62
- (jint)getPrivateKeySize {
  
#line 64
  return len_sk_bytes_;
}


#line 67
- (jint)getPublicKeySize {
  
#line 69
  return len_pk_bytes_;
}


#line 72
- (instancetype)initPackagePrivateWithInt:(jint)n
                                  withInt:(jint)D
                                  withInt:(jint)B
                           withShortArray:(IOSShortArray *)cdf_table
             withOrgBouncycastleCryptoXof:(id<OrgBouncycastleCryptoXof>)digest
withOrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator:(OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator *)mGen {
  OrgBouncycastlePqcCryptoFrodoFrodoEngine_initPackagePrivateWithInt_withInt_withInt_withShortArray_withOrgBouncycastleCryptoXof_withOrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_(self, n, D, B, cdf_table, digest, mGen);
  return self;
}


#line 102
- (jshort)sampleWithShort:(jshort)r {
  return OrgBouncycastlePqcCryptoFrodoFrodoEngine_sampleWithShort_(self, r);
}


#line 121
- (IOSShortArray *)sample_matrixWithShortArray:(IOSShortArray *)r
                                       withInt:(jint)offset
                                       withInt:(jint)n1
                                       withInt:(jint)n2 {
  return OrgBouncycastlePqcCryptoFrodoFrodoEngine_sample_matrixWithShortArray_withInt_withInt_withInt_(self, r, offset, n1, n2);
}


#line 130
- (IOSShortArray *)matrix_transposeWithShortArray:(IOSShortArray *)X
                                          withInt:(jint)n1
                                          withInt:(jint)n2 {
  return OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_transposeWithShortArray_withInt_withInt_(self, X, n1, n2);
}


#line 140
- (IOSShortArray *)matrix_mulWithShortArray:(IOSShortArray *)X
                                    withInt:(jint)Xrow
                                    withInt:(jint)Xcol
                             withShortArray:(IOSShortArray *)Y
                                    withInt:(jint)Yrow
                                    withInt:(jint)Ycol {
  return OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_mulWithShortArray_withInt_withInt_withShortArray_withInt_withInt_(self, X, Xrow, Xcol, Y, Yrow, Ycol);
}


#line 153
- (IOSShortArray *)matrix_addWithShortArray:(IOSShortArray *)X
                             withShortArray:(IOSShortArray *)Y
                                    withInt:(jint)n1
                                    withInt:(jint)m1 {
  return OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_addWithShortArray_withShortArray_withInt_withInt_(self, X, Y, n1, m1);
}


#line 164
- (IOSByteArray *)packWithShortArray:(IOSShortArray *)C {
  return OrgBouncycastlePqcCryptoFrodoFrodoEngine_packWithShortArray_(self, C);
}


#line 208
- (void)kem_keypairWithByteArray:(IOSByteArray *)pk
                   withByteArray:(IOSByteArray *)sk
    withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  IOSByteArray *s_seedSE_z = [IOSByteArray newArrayWithLength:len_s_bytes_ + len_seedSE_bytes_ + OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_z_bytes];
  [((JavaSecuritySecureRandom *) nil_chk(random)) nextBytesWithByteArray:s_seedSE_z];
  
#line 214
  IOSByteArray *s = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(s_seedSE_z, 0, len_s_bytes_);
  IOSByteArray *seedSE = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(s_seedSE_z, len_s_bytes_, len_s_bytes_ + len_seedSE_bytes_);
  IOSByteArray *z = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(s_seedSE_z, len_s_bytes_ + len_seedSE_bytes_, len_s_bytes_ + len_seedSE_bytes_ + OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_z_bytes);
  
#line 219
  IOSByteArray *seedA = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_seedA_bytes];
  [((id<OrgBouncycastleCryptoXof>) nil_chk(digest_)) updateWithByteArray:z withInt:0 withInt:((IOSByteArray *) nil_chk(z))->size_];
  [digest_ doFinalWithByteArray:seedA withInt:0 withInt:seedA->size_];
  
#line 224
  IOSShortArray *A = [((OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator *) nil_chk(gen_)) genMatrixWithByteArray:seedA];
  
#line 227
  IOSByteArray *rbytes = [IOSByteArray newArrayWithLength:2 * n_ * OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar * OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_chi_bytes];
  
#line 229
  [digest_ updateWithByte:(jbyte) (jint) 0x5f];
  [digest_ updateWithByteArray:seedSE withInt:0 withInt:((IOSByteArray *) nil_chk(seedSE))->size_];
  [digest_ doFinalWithByteArray:rbytes withInt:0 withInt:rbytes->size_];
  
#line 233
  IOSShortArray *r = [IOSShortArray newArrayWithLength:2 * n_ * OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar];
  for (jint i = 0; i < r->size_; i++)
#line 235
  *IOSShortArray_GetRef(r, i) = OrgBouncycastleUtilPack_littleEndianToShortWithByteArray_withInt_(rbytes, i * 2);
  
#line 238
  IOSShortArray *S_T = OrgBouncycastlePqcCryptoFrodoFrodoEngine_sample_matrixWithShortArray_withInt_withInt_withInt_(self, r, 0, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar, n_);
  IOSShortArray *S = OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_transposeWithShortArray_withInt_withInt_(self, S_T, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar, n_);
  
#line 242
  IOSShortArray *E = OrgBouncycastlePqcCryptoFrodoFrodoEngine_sample_matrixWithShortArray_withInt_withInt_withInt_(self, r, n_ * OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar, n_, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar);
  
#line 245
  IOSShortArray *B = OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_addWithShortArray_withShortArray_withInt_withInt_(self, OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_mulWithShortArray_withInt_withInt_withShortArray_withInt_withInt_(self, A, n_, n_, S, n_, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar), E, n_, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar);
  
#line 248
  IOSByteArray *b = OrgBouncycastlePqcCryptoFrodoFrodoEngine_packWithShortArray_(self, B);
  
#line 252
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(OrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_(seedA, b), 0, pk, 0, len_pk_bytes_);
  
#line 254
  IOSByteArray *pkh = [IOSByteArray newArrayWithLength:len_pkh_bytes_];
  [digest_ updateWithByteArray:pk withInt:0 withInt:((IOSByteArray *) nil_chk(pk))->size_];
  [digest_ doFinalWithByteArray:pkh withInt:0 withInt:pkh->size_];
  
#line 259
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(OrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_(s, pk), 0,
#line 260
  sk, 0, len_s_bytes_ + len_pk_bytes_);
  
#line 262
  for (jint i = 0; i < OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar; i++)
#line 263
  for (jint j = 0; j < n_; j++)
#line 264
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(OrgBouncycastleUtilPack_shortToLittleEndianWithShort_(IOSShortArray_Get(nil_chk(S_T), i * n_ + j)), 0,
#line 265
  sk, len_s_bytes_ + len_pk_bytes_ + i * n_ * 2 + j * 2, 2);
  
#line 267
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(pkh, 0, sk, len_sk_bytes_ - len_pkh_bytes_, len_pkh_bytes_);
}


#line 270
- (IOSShortArray *)unpackWithByteArray:(IOSByteArray *)inArg
                               withInt:(jint)n1
                               withInt:(jint)n2 {
  return OrgBouncycastlePqcCryptoFrodoFrodoEngine_unpackWithByteArray_withInt_withInt_(self, inArg, n1, n2);
}


#line 314
- (IOSShortArray *)encodeWithByteArray:(IOSByteArray *)k {
  return OrgBouncycastlePqcCryptoFrodoFrodoEngine_encodeWithByteArray_(self, k);
}


#line 349
- (void)kem_encWithByteArray:(IOSByteArray *)ct
               withByteArray:(IOSByteArray *)ss
               withByteArray:(IOSByteArray *)pk
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  
#line 352
  IOSByteArray *seedA = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(pk, 0, OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_seedA_bytes);
  IOSByteArray *b = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(pk, OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_seedA_bytes, len_pk_bytes_);
  
#line 356
  IOSByteArray *mu = [IOSByteArray newArrayWithLength:len_mu_bytes_];
  [((JavaSecuritySecureRandom *) nil_chk(random)) nextBytesWithByteArray:mu];
  
#line 360
  IOSByteArray *pkh = [IOSByteArray newArrayWithLength:len_pkh_bytes_];
  [((id<OrgBouncycastleCryptoXof>) nil_chk(digest_)) updateWithByteArray:pk withInt:0 withInt:len_pk_bytes_];
  [digest_ doFinalWithByteArray:pkh withInt:0 withInt:len_pkh_bytes_];
  
#line 365
  IOSByteArray *seedSE_k = [IOSByteArray newArrayWithLength:len_seedSE_ + len_k_];
  [digest_ updateWithByteArray:pkh withInt:0 withInt:len_pkh_bytes_];
  [digest_ updateWithByteArray:mu withInt:0 withInt:len_mu_bytes_];
  [digest_ doFinalWithByteArray:seedSE_k withInt:0 withInt:len_seedSE_bytes_ + len_k_bytes_];
  
#line 370
  IOSByteArray *seedSE = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(seedSE_k, 0, len_seedSE_bytes_);
  IOSByteArray *k = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(seedSE_k, len_seedSE_bytes_, len_seedSE_bytes_ + len_k_bytes_);
  
#line 374
  IOSByteArray *rbytes = [IOSByteArray newArrayWithLength:(2 * OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar * n_ + OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar * OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar) * OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_chi_bytes];
  [digest_ updateWithByte:(jbyte) (jint) 0x96];
  [digest_ updateWithByteArray:seedSE withInt:0 withInt:((IOSByteArray *) nil_chk(seedSE))->size_];
  [digest_ doFinalWithByteArray:rbytes withInt:0 withInt:rbytes->size_];
  
#line 379
  IOSShortArray *r = [IOSShortArray newArrayWithLength:JreIntDiv(rbytes->size_, 2)];
  for (jint i = 0; i < r->size_; i++)
#line 381
  *IOSShortArray_GetRef(r, i) = OrgBouncycastleUtilPack_littleEndianToShortWithByteArray_withInt_(rbytes, i * 2);
  
#line 384
  IOSShortArray *Sprime = OrgBouncycastlePqcCryptoFrodoFrodoEngine_sample_matrixWithShortArray_withInt_withInt_withInt_(self, r, 0, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, n_);
  
#line 387
  IOSShortArray *Eprime = OrgBouncycastlePqcCryptoFrodoFrodoEngine_sample_matrixWithShortArray_withInt_withInt_withInt_(self, r, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar * n_, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, n_);
  
#line 390
  IOSShortArray *A = [((OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator *) nil_chk(gen_)) genMatrixWithByteArray:seedA];
  
#line 393
  IOSShortArray *Bprime = OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_addWithShortArray_withShortArray_withInt_withInt_(self, OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_mulWithShortArray_withInt_withInt_withShortArray_withInt_withInt_(self, Sprime, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, n_, A, n_, n_), Eprime, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, n_);
  
#line 396
  IOSByteArray *c1 = OrgBouncycastlePqcCryptoFrodoFrodoEngine_packWithShortArray_(self, Bprime);
  
#line 399
  IOSShortArray *Eprimeprime = OrgBouncycastlePqcCryptoFrodoFrodoEngine_sample_matrixWithShortArray_withInt_withInt_withInt_(self, r, 2 * OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar * n_, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar);
  
#line 402
  IOSShortArray *B = OrgBouncycastlePqcCryptoFrodoFrodoEngine_unpackWithByteArray_withInt_withInt_(self, b, n_, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar);
  
#line 406
  IOSShortArray *V = OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_addWithShortArray_withShortArray_withInt_withInt_(self, OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_mulWithShortArray_withInt_withInt_withShortArray_withInt_withInt_(self, Sprime, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, n_, B, n_, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar), Eprimeprime, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar);
  
#line 409
  IOSShortArray *EncodedMU = OrgBouncycastlePqcCryptoFrodoFrodoEngine_encodeWithByteArray_(self, mu);
  IOSShortArray *C = OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_addWithShortArray_withShortArray_withInt_withInt_(self, V, EncodedMU, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar);
  
#line 413
  IOSByteArray *c2 = OrgBouncycastlePqcCryptoFrodoFrodoEngine_packWithShortArray_(self, C);
  
#line 417
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(OrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_(c1, c2), 0, ct, 0, len_ct_bytes_);
  [digest_ updateWithByteArray:c1 withInt:0 withInt:((IOSByteArray *) nil_chk(c1))->size_];
  [digest_ updateWithByteArray:c2 withInt:0 withInt:((IOSByteArray *) nil_chk(c2))->size_];
  [digest_ updateWithByteArray:k withInt:0 withInt:len_k_bytes_];
  [digest_ doFinalWithByteArray:ss withInt:0 withInt:len_s_bytes_];
}


#line 424
- (IOSShortArray *)matrix_subWithShortArray:(IOSShortArray *)X
                             withShortArray:(IOSShortArray *)Y
                                    withInt:(jint)n1
                                    withInt:(jint)n2 {
  return OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_subWithShortArray_withShortArray_withInt_withInt_(self, X, Y, n1, n2);
}


#line 434
- (IOSByteArray *)decodeWithShortArray:(IOSShortArray *)inArg {
  return OrgBouncycastlePqcCryptoFrodoFrodoEngine_decodeWithShortArray_(self, inArg);
}


#line 460
- (jshort)ctverifyWithShortArray:(IOSShortArray *)a1
                  withShortArray:(IOSShortArray *)a2
                  withShortArray:(IOSShortArray *)b1
                  withShortArray:(IOSShortArray *)b2 {
  return OrgBouncycastlePqcCryptoFrodoFrodoEngine_ctverifyWithShortArray_withShortArray_withShortArray_withShortArray_(self, a1, a2, b1, b2);
}


#line 478
- (IOSByteArray *)ctselectWithByteArray:(IOSByteArray *)a
                          withByteArray:(IOSByteArray *)b
                              withShort:(jshort)selector {
  return OrgBouncycastlePqcCryptoFrodoFrodoEngine_ctselectWithByteArray_withByteArray_withShort_(self, a, b, selector);
}


#line 489
- (void)kem_decWithByteArray:(IOSByteArray *)ss
               withByteArray:(IOSByteArray *)ct
               withByteArray:(IOSByteArray *)sk {
  jint offset = 0;
  jint length = JreIntDiv(OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar * n_ * D_, 8);
  IOSByteArray *c1 = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(ct, offset, offset + length);
  
#line 496
  offset += length;
  length = JreIntDiv(OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar * OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar * D_, 8);
  IOSByteArray *c2 = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(ct, offset, offset + length);
  
#line 501
  offset = 0;
  length = len_s_bytes_;
  IOSByteArray *s = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(sk, offset, offset + length);
  
#line 505
  offset += length;
  length = OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_seedA_bytes;
  IOSByteArray *seedA = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(sk, offset, offset + length);
  
#line 509
  offset += length;
  length = JreIntDiv((D_ * n_ * OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar), 8);
  IOSByteArray *b = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(sk, offset, offset + length);
  
#line 513
  offset += length;
  length = JreIntDiv(n_ * OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar * 16, 8);
  IOSByteArray *Sbytes = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(sk, offset, offset + length);
  
#line 517
  IOSShortArray *Stransposed = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar * n_];
  
#line 519
  for (jint i = 0; i < OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar; i++)
#line 520
  for (jint j = 0; j < n_; j++)
#line 521
  *IOSShortArray_GetRef(Stransposed, i * n_ + j) = OrgBouncycastleUtilPack_littleEndianToShortWithByteArray_withInt_(Sbytes, i * n_ * 2 + j * 2);
  
#line 523
  IOSShortArray *S = OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_transposeWithShortArray_withInt_withInt_(self, Stransposed, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar, n_);
  
#line 525
  offset += length;
  length = len_pkh_bytes_;
  IOSByteArray *pkh = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(sk, offset, offset + length);
  
#line 530
  IOSShortArray *Bprime = OrgBouncycastlePqcCryptoFrodoFrodoEngine_unpackWithByteArray_withInt_withInt_(self, c1, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, n_);
  
#line 533
  IOSShortArray *C = OrgBouncycastlePqcCryptoFrodoFrodoEngine_unpackWithByteArray_withInt_withInt_(self, c2, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar);
  
#line 536
  IOSShortArray *BprimeS = OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_mulWithShortArray_withInt_withInt_withShortArray_withInt_withInt_(self, Bprime, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, n_, S, n_, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar);
  IOSShortArray *M = OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_subWithShortArray_withShortArray_withInt_withInt_(self, C, BprimeS, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar);
  
#line 540
  IOSByteArray *muprime = OrgBouncycastlePqcCryptoFrodoFrodoEngine_decodeWithShortArray_(self, M);
  
#line 545
  IOSByteArray *seedSEprime_kprime = [IOSByteArray newArrayWithLength:len_seedSE_bytes_ + len_k_bytes_];
  [((id<OrgBouncycastleCryptoXof>) nil_chk(digest_)) updateWithByteArray:pkh withInt:0 withInt:len_pkh_bytes_];
  [digest_ updateWithByteArray:muprime withInt:0 withInt:len_mu_bytes_];
  [digest_ doFinalWithByteArray:seedSEprime_kprime withInt:0 withInt:len_seedSE_bytes_ + len_k_bytes_];
  
#line 550
  IOSByteArray *kprime = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(seedSEprime_kprime, len_seedSE_bytes_, len_seedSE_bytes_ + len_k_bytes_);
  
#line 553
  IOSByteArray *rbytes = [IOSByteArray newArrayWithLength:(2 * OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar * n_ + OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar * OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar) * OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_chi_bytes];
  [digest_ updateWithByte:(jbyte) (jint) 0x96];
  [digest_ updateWithByteArray:seedSEprime_kprime withInt:0 withInt:len_seedSE_bytes_];
  [digest_ doFinalWithByteArray:rbytes withInt:0 withInt:rbytes->size_];
  
#line 558
  IOSShortArray *r = [IOSShortArray newArrayWithLength:2 * OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar * n_ + OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar * OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar];
  for (jint i = 0; i < r->size_; i++) {
    
#line 561
    *IOSShortArray_GetRef(r, i) = OrgBouncycastleUtilPack_littleEndianToShortWithByteArray_withInt_(rbytes, i * 2);
  }
  
#line 565
  IOSShortArray *Sprime = OrgBouncycastlePqcCryptoFrodoFrodoEngine_sample_matrixWithShortArray_withInt_withInt_withInt_(self, r, 0, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, n_);
  
#line 568
  IOSShortArray *Eprime = OrgBouncycastlePqcCryptoFrodoFrodoEngine_sample_matrixWithShortArray_withInt_withInt_withInt_(self, r, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar * n_, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, n_);
  
#line 571
  IOSShortArray *A = [((OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator *) nil_chk(gen_)) genMatrixWithByteArray:seedA];
  
#line 574
  IOSShortArray *Bprimeprime = OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_addWithShortArray_withShortArray_withInt_withInt_(self, OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_mulWithShortArray_withInt_withInt_withShortArray_withInt_withInt_(self, Sprime, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, n_, A, n_, n_), Eprime, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, n_);
  
#line 577
  IOSShortArray *Eprimeprime = OrgBouncycastlePqcCryptoFrodoFrodoEngine_sample_matrixWithShortArray_withInt_withInt_withInt_(self, r, 2 * OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar * n_, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar);
  
#line 580
  IOSShortArray *B = OrgBouncycastlePqcCryptoFrodoFrodoEngine_unpackWithByteArray_withInt_withInt_(self, b, n_, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar);
  
#line 583
  IOSShortArray *V = OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_addWithShortArray_withShortArray_withInt_withInt_(self, OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_mulWithShortArray_withInt_withInt_withShortArray_withInt_withInt_(self, Sprime, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, n_, B, n_, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar), Eprimeprime, OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar);
  
#line 586
  IOSShortArray *Cprime = OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_addWithShortArray_withShortArray_withInt_withInt_(self, V, OrgBouncycastlePqcCryptoFrodoFrodoEngine_encodeWithByteArray_(self, muprime), OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar);
  
#line 593
  jshort use_kprime = OrgBouncycastlePqcCryptoFrodoFrodoEngine_ctverifyWithShortArray_withShortArray_withShortArray_withShortArray_(self, Bprime, C, Bprimeprime, Cprime);
  IOSByteArray *kbar = OrgBouncycastlePqcCryptoFrodoFrodoEngine_ctselectWithByteArray_withByteArray_withShort_(self, kprime, s, use_kprime);
  
#line 597
  [digest_ updateWithByteArray:c1 withInt:0 withInt:((IOSByteArray *) nil_chk(c1))->size_];
  [digest_ updateWithByteArray:c2 withInt:0 withInt:((IOSByteArray *) nil_chk(c2))->size_];
  [digest_ updateWithByteArray:kbar withInt:0 withInt:((IOSByteArray *) nil_chk(kbar))->size_];
  [digest_ doFinalWithByteArray:ss withInt:0 withInt:len_ss_bytes_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "S", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "[S", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "[S", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "[S", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "[S", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "[S", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "[S", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "[S", 0x2, 21, 10, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 22, 12, -1, -1, -1, -1 },
    { NULL, "S", 0x2, 23, 24, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getCipherTextSize);
  methods[1].selector = @selector(getSessionKeySize);
  methods[2].selector = @selector(getPrivateKeySize);
  methods[3].selector = @selector(getPublicKeySize);
  methods[4].selector = @selector(initPackagePrivateWithInt:withInt:withInt:withShortArray:withOrgBouncycastleCryptoXof:withOrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator:);
  methods[5].selector = @selector(sampleWithShort:);
  methods[6].selector = @selector(sample_matrixWithShortArray:withInt:withInt:withInt:);
  methods[7].selector = @selector(matrix_transposeWithShortArray:withInt:withInt:);
  methods[8].selector = @selector(matrix_mulWithShortArray:withInt:withInt:withShortArray:withInt:withInt:);
  methods[9].selector = @selector(matrix_addWithShortArray:withShortArray:withInt:withInt:);
  methods[10].selector = @selector(packWithShortArray:);
  methods[11].selector = @selector(kem_keypairWithByteArray:withByteArray:withJavaSecuritySecureRandom:);
  methods[12].selector = @selector(unpackWithByteArray:withInt:withInt:);
  methods[13].selector = @selector(encodeWithByteArray:);
  methods[14].selector = @selector(kem_encWithByteArray:withByteArray:withByteArray:withJavaSecuritySecureRandom:);
  methods[15].selector = @selector(matrix_subWithShortArray:withShortArray:withInt:withInt:);
  methods[16].selector = @selector(decodeWithShortArray:);
  methods[17].selector = @selector(ctverifyWithShortArray:withShortArray:withShortArray:withShortArray:);
  methods[18].selector = @selector(ctselectWithByteArray:withByteArray:withShort:);
  methods[19].selector = @selector(kem_decWithByteArray:withByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nbar", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar, 0x1a, -1, -1, -1, -1 },
    { "mbar", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar, 0x1a, -1, -1, -1, -1 },
    { "len_seedA", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_seedA, 0x1a, -1, -1, -1, -1 },
    { "len_z", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_z, 0x1a, -1, -1, -1, -1 },
    { "len_chi", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_chi, 0x1a, -1, -1, -1, -1 },
    { "len_seedA_bytes", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_seedA_bytes, 0x1a, -1, -1, -1, -1 },
    { "len_z_bytes", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_z_bytes, 0x1a, -1, -1, -1, -1 },
    { "len_chi_bytes", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_chi_bytes, 0x1a, -1, -1, -1, -1 },
    { "D_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "q_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "B_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len_sk_bytes_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len_pk_bytes_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len_ct_bytes_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "T_chi_", "[S", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len_mu_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len_seedSE_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len_s_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len_k_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len_pkh_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len_ss_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len_mu_bytes_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len_seedSE_bytes_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len_s_bytes_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len_k_bytes_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len_pkh_bytes_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "len_ss_bytes_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "digest_", "LOrgBouncycastleCryptoXof;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "gen_", "LOrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "III[SLOrgBouncycastleCryptoXof;LOrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator;", "sample", "S", "sample_matrix", "[SIII", "matrix_transpose", "[SII", "matrix_mul", "[SII[SII", "matrix_add", "[S[SII", "pack", "[S", "kem_keypair", "[B[BLJavaSecuritySecureRandom;", "unpack", "[BII", "encode", "[B", "kem_enc", "[B[B[BLJavaSecuritySecureRandom;", "matrix_sub", "decode", "ctverify", "[S[S[S[S", "ctselect", "[B[BS", "kem_dec", "[B[B[B" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoFrodoFrodoEngine = { "FrodoEngine", "org.bouncycastle.pqc.crypto.frodo", ptrTable, methods, fields, 7, 0x0, 20, 30, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoFrodoFrodoEngine;
}

@end


#line 72
void OrgBouncycastlePqcCryptoFrodoFrodoEngine_initPackagePrivateWithInt_withInt_withInt_withShortArray_withOrgBouncycastleCryptoXof_withOrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, jint n, jint D, jint B, IOSShortArray *cdf_table, id<OrgBouncycastleCryptoXof> digest, OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator *mGen) {
  NSObject_init(self);
  self->n_ = n;
  self->D_ = D;
  self->q_ = (JreLShift32(1, D));
  self->B_ = B;
  
#line 79
  self->len_mu_ = (B * OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar * OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar);
  self->len_seedSE_ = self->len_mu_;
  self->len_s_ = self->len_mu_;
  self->len_k_ = self->len_mu_;
  self->len_pkh_ = self->len_mu_;
  self->len_ss_ = self->len_mu_;
  
#line 86
  self->len_mu_bytes_ = JreIntDiv(self->len_mu_, 8);
  self->len_seedSE_bytes_ = JreIntDiv(self->len_seedSE_, 8);
  self->len_s_bytes_ = JreIntDiv(self->len_s_, 8);
  self->len_k_bytes_ = JreIntDiv(self->len_k_, 8);
  self->len_pkh_bytes_ = JreIntDiv(self->len_pkh_, 8);
  self->len_ss_bytes_ = JreIntDiv(self->len_ss_, 8);
  
#line 93
  self->len_ct_bytes_ = JreIntDiv((D * n * OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar), 8) + JreIntDiv((D * OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar * OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar), 8);
  self->len_pk_bytes_ = OrgBouncycastlePqcCryptoFrodoFrodoEngine_len_seedA_bytes + JreIntDiv((D * n * OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar), 8);
  self->len_sk_bytes_ = self->len_s_bytes_ + self->len_pk_bytes_ + (2 * n * OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar + self->len_pkh_bytes_);
  
#line 97
  self->T_chi_ = cdf_table;
  self->digest_ = digest;
  self->gen_ = mGen;
}


#line 72
OrgBouncycastlePqcCryptoFrodoFrodoEngine *new_OrgBouncycastlePqcCryptoFrodoFrodoEngine_initPackagePrivateWithInt_withInt_withInt_withShortArray_withOrgBouncycastleCryptoXof_withOrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_(jint n, jint D, jint B, IOSShortArray *cdf_table, id<OrgBouncycastleCryptoXof> digest, OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator *mGen) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoFrodoFrodoEngine, initPackagePrivateWithInt_withInt_withInt_withShortArray_withOrgBouncycastleCryptoXof_withOrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_, n, D, B, cdf_table, digest, mGen)
}


#line 72
OrgBouncycastlePqcCryptoFrodoFrodoEngine *create_OrgBouncycastlePqcCryptoFrodoFrodoEngine_initPackagePrivateWithInt_withInt_withInt_withShortArray_withOrgBouncycastleCryptoXof_withOrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_(jint n, jint D, jint B, IOSShortArray *cdf_table, id<OrgBouncycastleCryptoXof> digest, OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator *mGen) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoFrodoFrodoEngine, initPackagePrivateWithInt_withInt_withInt_withShortArray_withOrgBouncycastleCryptoXof_withOrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_, n, D, B, cdf_table, digest, mGen)
}


#line 102
jshort OrgBouncycastlePqcCryptoFrodoFrodoEngine_sampleWithShort_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, jshort r) {
  
#line 104
  jshort t;
  
#line 104
  jshort e;
  
#line 106
  t = (jshort) (JreURShift32((r & (jint) 0xffff), 1));
  e = 0;
  for (jint z = 0; z < ((IOSShortArray *) nil_chk(self->T_chi_))->size_; z++) {
    
#line 110
    if (t > IOSShortArray_Get(self->T_chi_, z))
#line 111
    e++;
  }
  
#line 115
  if ((JreIntMod((r & (jint) 0xffff), 2)) == 1)
#line 116
  e = (jshort) (((e) * (-1)) & (jint) 0xffff);
  
#line 118
  return e;
}


#line 121
IOSShortArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_sample_matrixWithShortArray_withInt_withInt_withInt_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSShortArray *r, jint offset, jint n1, jint n2) {
  
#line 123
  IOSShortArray *E = [IOSShortArray newArrayWithLength:n1 * n2];
  for (jint i = 0; i < n1; i++)
#line 125
  for (jint j = 0; j < n2; j++)
#line 126
  *IOSShortArray_GetRef(E, i * n2 + j) = OrgBouncycastlePqcCryptoFrodoFrodoEngine_sampleWithShort_(self, IOSShortArray_Get(nil_chk(r), i * n2 + j + offset));
  return E;
}


#line 130
IOSShortArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_transposeWithShortArray_withInt_withInt_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSShortArray *X, jint n1, jint n2) {
  
#line 132
  IOSShortArray *res = [IOSShortArray newArrayWithLength:n1 * n2];
  
#line 134
  for (jint i = 0; i < n2; i++)
#line 135
  for (jint j = 0; j < n1; j++)
#line 136
  *IOSShortArray_GetRef(res, i * n1 + j) = IOSShortArray_Get(nil_chk(X), j * n2 + i);
  return res;
}


#line 140
IOSShortArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_mulWithShortArray_withInt_withInt_withShortArray_withInt_withInt_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSShortArray *X, jint Xrow, jint Xcol, IOSShortArray *Y, jint Yrow, jint Ycol) {
  
#line 142
  IOSShortArray *res = [IOSShortArray newArrayWithLength:Xrow * Ycol];
  for (jint i = 0; i < Xrow; i++)
#line 144
  for (jint j = 0; j < Ycol; j++) {
    
#line 146
    for (jint k = 0; k < Xcol; k++)
#line 147
    *IOSShortArray_GetRef(res, i * Ycol + j) = (jshort) (((IOSShortArray_Get(res, i * Ycol + j) & (jint) 0xffff) + ((IOSShortArray_Get(nil_chk(X), i * Xcol + k) & (jint) 0xffff) * (IOSShortArray_Get(nil_chk(Y), k * Ycol + j) & (jint) 0xffff))) & (jint) 0xffff);
    *IOSShortArray_GetRef(res, i * Ycol + j) = (jshort) ((JreIntMod((IOSShortArray_Get(res, i * Ycol + j) & (jint) 0xffff), self->q_)) & (jint) 0xffff);
  }
  return res;
}


#line 153
IOSShortArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_addWithShortArray_withShortArray_withInt_withInt_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSShortArray *X, IOSShortArray *Y, jint n1, jint m1) {
  
#line 155
  IOSShortArray *res = [IOSShortArray newArrayWithLength:n1 * m1];
  for (jint i = 0; i < n1; i++)
#line 157
  for (jint j = 0; j < m1; j++)
#line 158
  *IOSShortArray_GetRef(res, i * m1 + j) = (jshort) (JreIntMod(((IOSShortArray_Get(nil_chk(X), i * m1 + j) & (jint) 0xffff) + (IOSShortArray_Get(nil_chk(Y), i * m1 + j) & (jint) 0xffff)), self->q_));
  
#line 160
  return res;
}


#line 164
IOSByteArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_packWithShortArray_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSShortArray *C) {
  
#line 166
  jint n = ((IOSShortArray *) nil_chk(C))->size_;
  IOSByteArray *out = [IOSByteArray newArrayWithLength:JreIntDiv(self->D_ * n, 8)];
  jshort i = 0;
  jshort j = 0;
  jshort w = 0;
  jbyte bits = 0;
  
#line 173
  while (i < out->size_ && (j < n || ((j == n) && (bits > 0)))) {
    
#line 176
    jbyte b = 0;
    while (b < 8) {
      
#line 179
      jint nbits = JavaLangMath_minWithInt_withInt_(8 - b, bits);
      jshort mask = (jshort) ((JreLShift32(1, nbits)) - 1);
      jbyte t = (jbyte) ((JreRShift32(w, (bits - nbits))) & mask);
      *IOSByteArray_GetRef(out, i) = (jbyte) (IOSByteArray_Get(out, i) + (JreLShift32(t, (8 - b - nbits))));
      b += nbits;
      bits -= nbits;
      
#line 186
      if (bits == 0) {
        
#line 188
        if (j < n) {
          
#line 190
          w = IOSShortArray_Get(C, j);
          bits = (jbyte) self->D_;
          j++;
        }
        else {
          
#line 196
          break;
        }
      }
    }
    if (b == 8) {
      
#line 202
      i++;
    }
  }
  return out;
}


#line 270
IOSShortArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_unpackWithByteArray_withInt_withInt_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSByteArray *inArg, jint n1, jint n2) {
  
#line 272
  IOSShortArray *out = [IOSShortArray newArrayWithLength:n1 * n2];
  
#line 274
  jshort i = 0;
  jshort j = 0;
  jbyte w = 0;
  jbyte bits = 0;
  
#line 279
  while (i < out->size_ && (j < ((IOSByteArray *) nil_chk(inArg))->size_ || ((j == inArg->size_) && (bits > 0)))) {
    
#line 281
    jbyte b = 0;
    while (b < self->D_) {
      
#line 284
      jint nbits = JavaLangMath_minWithInt_withInt_(self->D_ - b, bits);
      jshort mask = (jshort) (((JreLShift32(1, nbits)) - 1) & (jint) 0xffff);
      jbyte t = (jbyte) (((JreURShift32((w & (jint) 0xff), ((bits & (jint) 0xff) - nbits))) & (mask & (jint) 0xffff)) & (jint) 0xff);
      *IOSShortArray_GetRef(out, i) = (jshort) (((IOSShortArray_Get(out, i) & (jint) 0xffff) + ((JreLShift32((t & (jint) 0xff), (self->D_ - (b & (jint) 0xff) - nbits))))) & (jint) 0xffff);
      b += nbits;
      bits -= nbits;
      w &= ~(JreLShift32(mask, bits));
      
#line 292
      if (bits == 0) {
        
#line 294
        if (j < ((IOSByteArray *) nil_chk(inArg))->size_) {
          
#line 296
          w = IOSByteArray_Get(inArg, j);
          bits = 8;
          j++;
        }
        else {
          
#line 302
          break;
        }
      }
    }
    if (b == self->D_) {
      
#line 308
      i++;
    }
  }
  return out;
}


#line 314
IOSShortArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_encodeWithByteArray_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSByteArray *k) {
  
#line 316
  jint l;
  
#line 316
  jint byte_index = 0;
  jbyte mask = 1;
  IOSShortArray *K = [IOSShortArray newArrayWithLength:OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar * OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar];
  jint temp;
  
#line 321
  for (jint i = 0; i < OrgBouncycastlePqcCryptoFrodoFrodoEngine_mbar; i++) {
    
#line 324
    for (jint j = 0; j < OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar; j++) {
      
#line 327
      temp = 0;
      for (l = 0; l < self->B_; l++) {
        
#line 331
        if ((IOSByteArray_Get(nil_chk(k), byte_index) & mask) == mask) {
          
#line 333
          temp += (JreLShift32(1, l));
        }
        JreLShiftAssignByte(&mask, 1);
        if (mask == 0) {
          
#line 338
          mask = 1;
          byte_index++;
        }
      }
      
#line 343
      *IOSShortArray_GetRef(K, i * OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar + j) = (jshort) (temp * (JreIntDiv(self->q_, (JreLShift32(1, self->B_)))));
    }
  }
  return K;
}


#line 424
IOSShortArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_matrix_subWithShortArray_withShortArray_withInt_withInt_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSShortArray *X, IOSShortArray *Y, jint n1, jint n2) {
  
#line 426
  IOSShortArray *res = [IOSShortArray newArrayWithLength:n1 * n2];
  for (jint i = 0; i < n1; i++)
#line 428
  for (jint j = 0; j < n2; j++)
#line 429
  *IOSShortArray_GetRef(res, i * n2 + j) = (jshort) (JreIntMod((((IOSShortArray_Get(nil_chk(X), i * n2 + j)) - (IOSShortArray_Get(nil_chk(Y), i * n2 + j))) & (jint) 0xffff), self->q_));
  
#line 431
  return res;
}


#line 434
IOSByteArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_decodeWithShortArray_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSShortArray *inArg) {
  
#line 436
  jint i;
  
#line 436
  jint j;
  
#line 436
  jint index = 0;
  
#line 436
  jint npieces_word = 8;
  jint nwords = JreIntDiv((OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar * OrgBouncycastlePqcCryptoFrodoFrodoEngine_nbar), 8);
  jshort temp;
  jshort maskex = (jshort) ((JreLShift32(1, self->B_)) - 1);
  jshort maskq = (jshort) ((JreLShift32(1, self->D_)) - 1);
  IOSByteArray *out = [IOSByteArray newArrayWithLength:npieces_word * self->B_];
  jlong templong;
  
#line 444
  for (i = 0; i < nwords; i++) {
    
#line 446
    templong = 0;
    for (j = 0; j < npieces_word; j++) {
      
#line 449
      temp = (jshort) (JreRShift32(((IOSShortArray_Get(nil_chk(inArg), index) & maskq) + (JreLShift32(1, (self->D_ - self->B_ - 1)))), (self->D_ - self->B_)));
      templong |= JreLShift64(((jlong) (temp & maskex)), (self->B_ * j));
      index++;
    }
    for (j = 0; j < self->B_; j++)
#line 454
    *IOSByteArray_GetRef(out, i * self->B_ + j) = (jbyte) ((JreRShift64(templong, (8 * j))) & (jint) 0xFF);
  }
  return out;
}


#line 460
jshort OrgBouncycastlePqcCryptoFrodoFrodoEngine_ctverifyWithShortArray_withShortArray_withShortArray_withShortArray_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSShortArray *a1, IOSShortArray *a2, IOSShortArray *b1, IOSShortArray *b2) {
  
#line 464
  jshort r = 0;
  
#line 466
  for (jshort i = 0; i < ((IOSShortArray *) nil_chk(a1))->size_; i++)
#line 467
  r |= IOSShortArray_Get(a1, i) ^ IOSShortArray_Get(nil_chk(b1), i);
  
#line 469
  for (jshort i = 0; i < ((IOSShortArray *) nil_chk(a2))->size_; i++)
#line 470
  r |= IOSShortArray_Get(a2, i) ^ IOSShortArray_Get(nil_chk(b2), i);
  
#line 473
  if (r == 0)
#line 474
  return 0;
  return -1;
}


#line 478
IOSByteArray *OrgBouncycastlePqcCryptoFrodoFrodoEngine_ctselectWithByteArray_withByteArray_withShort_(OrgBouncycastlePqcCryptoFrodoFrodoEngine *self, IOSByteArray *a, IOSByteArray *b, jshort selector) {
  
#line 482
  IOSByteArray *r = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++)
#line 484
  *IOSByteArray_GetRef(r, i) = (jbyte) (((~selector & IOSByteArray_Get(a, i)) & (jint) 0xff) | ((selector & IOSByteArray_Get(nil_chk(b), i)) & (jint) 0xff));
  
#line 486
  return r;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoFrodoFrodoEngine)
