//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/frodo/FrodoMatrixGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "org/bouncycastle/crypto/BufferedBlockCipher.h"
#include "org/bouncycastle/crypto/InvalidCipherTextException.h"
#include "org/bouncycastle/crypto/Xof.h"
#include "org/bouncycastle/crypto/digests/SHAKEDigest.h"
#include "org/bouncycastle/crypto/engines/AESEngine.h"
#include "org/bouncycastle/crypto/params/KeyParameter.h"
#include "org/bouncycastle/pqc/crypto/frodo/FrodoMatrixGenerator.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/Exceptions.h"
#include "org/bouncycastle/util/Pack.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/frodo/FrodoMatrixGenerator must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/frodo/FrodoMatrixGenerator.java"


#line 13
@implementation OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator


#line 18
- (instancetype)initPackagePrivateWithInt:(jint)n
                                  withInt:(jint)q {
  OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_initPackagePrivateWithInt_withInt_(self, n, q);
  return self;
}

- (IOSShortArray *)genMatrixWithByteArray:(IOSByteArray *)seedA {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[S", 0x400, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithInt:withInt:);
  methods[1].selector = @selector(genMatrixWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "n_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "q_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "genMatrix", "[B", "LOrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Shake128MatrixGenerator;LOrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Aes128MatrixGenerator;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator = { "FrodoMatrixGenerator", "org.bouncycastle.pqc.crypto.frodo", ptrTable, methods, fields, 7, 0x400, 2, 2, -1, 3, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator;
}

@end


#line 18
void OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_initPackagePrivateWithInt_withInt_(OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator *self, jint n, jint q) {
  NSObject_init(self);
  self->n_ = n;
  self->q_ = q;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/frodo/FrodoMatrixGenerator.java"


#line 26
@implementation OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Shake128MatrixGenerator


#line 29
- (instancetype)initWithInt:(jint)n
                    withInt:(jint)q {
  OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Shake128MatrixGenerator_initWithInt_withInt_(self, n, q);
  return self;
}


#line 34
- (IOSShortArray *)genMatrixWithByteArray:(IOSByteArray *)seedA {
  
#line 37
  IOSShortArray *A = [IOSShortArray newArrayWithLength:n_ * n_];
  jshort i;
  
#line 38
  jshort j;
  IOSByteArray *b;
  
#line 39
  IOSByteArray *tmp = [IOSByteArray newArrayWithLength:JreIntDiv((16 * n_), 8)];
  for (i = 0; i < n_; i++) {
    
#line 43
    b = OrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_(OrgBouncycastleUtilPack_shortToLittleEndianWithShort_(i), seedA);
    
#line 46
    id<OrgBouncycastleCryptoXof> digest = new_OrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(128);
    [digest updateWithByteArray:b withInt:0 withInt:((IOSByteArray *) nil_chk(b))->size_];
    [digest doFinalWithByteArray:tmp withInt:0 withInt:tmp->size_];
    for (j = 0; j < n_; j++) {
      
#line 51
      *IOSShortArray_GetRef(A, i * n_ + j) = (jshort) (JreIntMod(OrgBouncycastleUtilPack_littleEndianToShortWithByteArray_withInt_(tmp, 2 * j), q_));
    }
  }
  return A;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[S", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(genMatrixWithByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "II", "genMatrix", "[B", "LOrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Shake128MatrixGenerator = { "Shake128MatrixGenerator", "org.bouncycastle.pqc.crypto.frodo", ptrTable, methods, NULL, 7, 0x8, 2, 0, 3, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Shake128MatrixGenerator;
}

@end


#line 29
void OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Shake128MatrixGenerator_initWithInt_withInt_(OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Shake128MatrixGenerator *self, jint n, jint q) {
  OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_initPackagePrivateWithInt_withInt_(self,
#line 31
  n, q);
}


#line 29
OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Shake128MatrixGenerator *new_OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Shake128MatrixGenerator_initWithInt_withInt_(jint n, jint q) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Shake128MatrixGenerator, initWithInt_withInt_, n, q)
}


#line 29
OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Shake128MatrixGenerator *create_OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Shake128MatrixGenerator_initWithInt_withInt_(jint n, jint q) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Shake128MatrixGenerator, initWithInt_withInt_, n, q)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Shake128MatrixGenerator)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/frodo/FrodoMatrixGenerator.java"


#line 58
@implementation OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Aes128MatrixGenerator


#line 62
- (instancetype)initWithInt:(jint)n
                    withInt:(jint)q {
  OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Aes128MatrixGenerator_initWithInt_withInt_(self, n, q);
  return self;
}


#line 69
- (IOSShortArray *)genMatrixWithByteArray:(IOSByteArray *)seedA {
  
#line 74
  IOSShortArray *A = [IOSShortArray newArrayWithLength:n_ * n_];
  IOSByteArray *b = [IOSByteArray newArrayWithLength:16];
  IOSByteArray *c = [IOSByteArray newArrayWithLength:16];
  
#line 79
  for (jint i = 0; i < n_; i++) {
    
#line 82
    for (jint j = 0; j < n_; j += 8) {
      
#line 86
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(OrgBouncycastleUtilPack_shortToLittleEndianWithShort_((jshort) (i & (jint) 0xffff)), 0, b, 0, 2);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(OrgBouncycastleUtilPack_shortToLittleEndianWithShort_((jshort) (j & (jint) 0xffff)), 0, b, 2, 2);
      
#line 92
      [self aes128WithByteArray:c withByteArray:seedA withByteArray:b];
      
#line 94
      for (jint k = 0; k < 8; k++) {
        
#line 97
        *IOSShortArray_GetRef(A, i * n_ + j + k) = (jshort) (JreIntMod(OrgBouncycastleUtilPack_littleEndianToShortWithByteArray_withInt_(c, 2 * k), q_));
      }
    }
  }
  return A;
}


#line 104
- (void)aes128WithByteArray:(IOSByteArray *)outArg
              withByteArray:(IOSByteArray *)keyBytes
              withByteArray:(IOSByteArray *)msg {
  
#line 106
  @try {
    
#line 108
    OrgBouncycastleCryptoParamsKeyParameter *kp = new_OrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(keyBytes);
    [((OrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) init__WithBoolean:true withOrgBouncycastleCryptoCipherParameters:kp];
    jint len = [((OrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) processBytesWithByteArray:msg withInt:0 withInt:((IOSByteArray *) nil_chk(msg))->size_ withByteArray:outArg withInt:0];
    [((OrgBouncycastleCryptoBufferedBlockCipher *) nil_chk(cipher_)) doFinalWithByteArray:outArg withInt:len];
  }
  @catch (OrgBouncycastleCryptoInvalidCipherTextException *e) {
    
#line 115
    @throw nil_chk(OrgBouncycastleUtilExceptions_illegalStateExceptionWithNSString_withJavaLangThrowable_([e description], e));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[S", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(genMatrixWithByteArray:);
  methods[2].selector = @selector(aes128WithByteArray:withByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cipher_", "LOrgBouncycastleCryptoBufferedBlockCipher;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "genMatrix", "[B", "aes128", "[B[B[B", "LOrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Aes128MatrixGenerator = { "Aes128MatrixGenerator", "org.bouncycastle.pqc.crypto.frodo", ptrTable, methods, fields, 7, 0x8, 3, 1, 5, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Aes128MatrixGenerator;
}

@end


#line 62
void OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Aes128MatrixGenerator_initWithInt_withInt_(OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Aes128MatrixGenerator *self, jint n, jint q) {
  OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_initPackagePrivateWithInt_withInt_(self,
#line 64
  n, q);
  self->cipher_ = new_OrgBouncycastleCryptoBufferedBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(new_OrgBouncycastleCryptoEnginesAESEngine_init());
}


#line 62
OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Aes128MatrixGenerator *new_OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Aes128MatrixGenerator_initWithInt_withInt_(jint n, jint q) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Aes128MatrixGenerator, initWithInt_withInt_, n, q)
}


#line 62
OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Aes128MatrixGenerator *create_OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Aes128MatrixGenerator_initWithInt_withInt_(jint n, jint q) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Aes128MatrixGenerator, initWithInt_withInt_, n, q)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoFrodoFrodoMatrixGenerator_Aes128MatrixGenerator)
