//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSS.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/pqc/crypto/xmss/BDS.h"
#include "org/bouncycastle/pqc/crypto/xmss/OTSHashAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlus.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlusSignature.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSS.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSKeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSKeyPairGenerator.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSSigner.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/xmss/XMSS must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoXmssXMSS () {
 @public
  /*!
   @brief XMSS parameters.
   */
  OrgBouncycastlePqcCryptoXmssXMSSParameters *params_;
  /*!
   @brief WOTS+ instance.
   */
  OrgBouncycastlePqcCryptoXmssWOTSPlus *wotsPlus_;
  /*!
   @brief PRNG.
   */
  JavaSecuritySecureRandom *prng_;
  /*!
   @brief XMSS private key.
   */
  OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *privateKey_;
  /*!
   @brief XMSS public key.
   */
  OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *publicKey_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSS, params_, OrgBouncycastlePqcCryptoXmssXMSSParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSS, wotsPlus_, OrgBouncycastlePqcCryptoXmssWOTSPlus *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSS, prng_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSS, privateKey_, OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSS, publicKey_, OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSS.java"


#line 12
@implementation OrgBouncycastlePqcCryptoXmssXMSS


#line 42
- (instancetype)initWithOrgBouncycastlePqcCryptoXmssXMSSParameters:(OrgBouncycastlePqcCryptoXmssXMSSParameters *)params
                                      withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)prng {
  OrgBouncycastlePqcCryptoXmssXMSS_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(self, params, prng);
  return self;
}


#line 101
- (void)generateKeys {
  
#line 103
  OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator *kpGen = new_OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator_init();
  
#line 105
  [kpGen init__WithOrgBouncycastleCryptoKeyGenerationParameters:new_OrgBouncycastlePqcCryptoXmssXMSSKeyGenerationParameters_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_([self getParams], prng_)];
  
#line 107
  OrgBouncycastleCryptoAsymmetricCipherKeyPair *kp = [kpGen generateKeyPair];
  
#line 109
  privateKey_ = (OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) cast_chk([((OrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(kp)) getPrivate], [OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters class]);
  publicKey_ = (OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *) cast_chk([kp getPublic], [OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters class]);
  
#line 112
  [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getTreeDigestSize]] withByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(self->privateKey_)) getPublicSeed]];
}


#line 115
- (void)importStateWithOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters:(OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *)privateKey
                    withOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters:(OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *)publicKey {
  if (!OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey)) getRoot], [((OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *) nil_chk(publicKey)) getRoot])) {
    
#line 119
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"root of private key and public key do not match");
  }
  if (!OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_([privateKey getPublicSeed], [publicKey getPublicSeed])) {
    
#line 123
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"public seed of private key and public key do not match");
  }
  
#line 126
  self->privateKey_ = privateKey;
  self->publicKey_ = publicKey;
  
#line 129
  [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getTreeDigestSize]] withByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(self->privateKey_)) getPublicSeed]];
}


#line 138
- (void)importStateWithByteArray:(IOSByteArray *)privateKey
                   withByteArray:(IOSByteArray *)publicKey {
  if (privateKey == nil) {
    
#line 142
    @throw new_JavaLangNullPointerException_initWithNSString_(@"privateKey == null");
  }
  if (publicKey == nil) {
    
#line 146
    @throw new_JavaLangNullPointerException_initWithNSString_(@"publicKey == null");
  }
  
#line 149
  OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *tmpPrivateKey = [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withPrivateKeyWithByteArray:
#line 150
  privateKey])) build];
  OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *tmpPublicKey = [((OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withPublicKeyWithByteArray:publicKey])) build];
  
#line 153
  if (!OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(tmpPrivateKey)) getRoot], [((OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *) nil_chk(tmpPublicKey)) getRoot])) {
    
#line 155
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"root of private key and public key do not match");
  }
  if (!OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_([tmpPrivateKey getPublicSeed], [tmpPublicKey getPublicSeed])) {
    
#line 159
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"public seed of private key and public key do not match");
  }
  
#line 162
  self->privateKey_ = tmpPrivateKey;
  self->publicKey_ = tmpPublicKey;
  [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getTreeDigestSize]] withByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(self->privateKey_)) getPublicSeed]];
}


#line 173
- (IOSByteArray *)signWithByteArray:(IOSByteArray *)message {
  
#line 175
  if (message == nil) {
    
#line 177
    @throw new_JavaLangNullPointerException_initWithNSString_(@"message == null");
  }
  OrgBouncycastlePqcCryptoXmssXMSSSigner *signer = new_OrgBouncycastlePqcCryptoXmssXMSSSigner_init();
  
#line 181
  [signer init__WithBoolean:true withOrgBouncycastleCryptoCipherParameters:privateKey_];
  
#line 183
  IOSByteArray *signature = [signer generateSignatureWithByteArray:message];
  
#line 185
  privateKey_ = (OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) cast_chk([signer getUpdatedPrivateKey], [OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters class]);
  
#line 187
  [self importStateWithOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters:privateKey_ withOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters:publicKey_];
  
#line 189
  return signature;
}


#line 201
- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                           withByteArray:(IOSByteArray *)signature
                           withByteArray:(IOSByteArray *)publicKey {
  if (message == nil) {
    
#line 206
    @throw new_JavaLangNullPointerException_initWithNSString_(@"message == null");
  }
  if (signature == nil) {
    
#line 210
    @throw new_JavaLangNullPointerException_initWithNSString_(@"signature == null");
  }
  if (publicKey == nil) {
    
#line 214
    @throw new_JavaLangNullPointerException_initWithNSString_(@"publicKey == null");
  }
  
#line 217
  OrgBouncycastlePqcCryptoXmssXMSSSigner *signer = new_OrgBouncycastlePqcCryptoXmssXMSSSigner_init();
  
#line 219
  [signer init__WithBoolean:false withOrgBouncycastleCryptoCipherParameters:[((OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_([self getParams]) withPublicKeyWithByteArray:publicKey])) build]];
  
#line 221
  return [signer verifySignatureWithByteArray:message withByteArray:signature];
}


#line 229
- (OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *)exportPrivateKey {
  
#line 231
  return privateKey_;
}


#line 239
- (OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *)exportPublicKey {
  
#line 241
  return publicKey_;
}


#line 252
- (OrgBouncycastlePqcCryptoXmssWOTSPlusSignature *)wotsSignWithByteArray:(IOSByteArray *)messageDigest
                          withOrgBouncycastlePqcCryptoXmssOTSHashAddress:(OrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  if (((IOSByteArray *) nil_chk(messageDigest))->size_ != [((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getTreeDigestSize]) {
    
#line 256
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of messageDigest needs to be equal to size of digest");
  }
  if (otsHashAddress == nil) {
    
#line 260
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  
#line 263
  [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[wotsPlus_ getWOTSPlusSecretKeyWithByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeySeed] withOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress] withByteArray:[self getPublicSeed]];
  
#line 265
  return [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) signWithByteArray:messageDigest withOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress];
}


#line 273
- (OrgBouncycastlePqcCryptoXmssXMSSParameters *)getParams {
  
#line 275
  return params_;
}


#line 283
- (OrgBouncycastlePqcCryptoXmssWOTSPlus *)getWOTSPlus {
  
#line 285
  return wotsPlus_;
}


#line 293
- (IOSByteArray *)getRoot {
  
#line 295
  return [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getRoot];
}


#line 298
- (void)setRootWithByteArray:(IOSByteArray *)root {
  
#line 300
  privateKey_ = [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withSecretKeySeedWithByteArray:
#line 301
  [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeySeed]])) withSecretKeyPRFWithByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeyPRF]])) withPublicSeedWithByteArray:
#line 302
  [self getPublicSeed]])) withRootWithByteArray:root])) withBDSStateWithOrgBouncycastlePqcCryptoXmssBDS:[((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getBDSState]])) build];
  publicKey_ = [((OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withRootWithByteArray:root])) withPublicSeedWithByteArray:[self getPublicSeed]])) build];
}


#line 312
- (jint)getIndex {
  
#line 314
  return [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getIndex];
}


#line 317
- (void)setIndexWithInt:(jint)index {
  
#line 319
  privateKey_ = [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withSecretKeySeedWithByteArray:
#line 320
  [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeySeed]])) withSecretKeyPRFWithByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeyPRF]])) withPublicSeedWithByteArray:
#line 321
  [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getPublicSeed]])) withRootWithByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getRoot]])) withBDSStateWithOrgBouncycastlePqcCryptoXmssBDS:
#line 322
  [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getBDSState]])) build];
}


#line 330
- (IOSByteArray *)getPublicSeed {
  
#line 332
  return [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getPublicSeed];
}


#line 335
- (void)setPublicSeedWithByteArray:(IOSByteArray *)publicSeed {
  
#line 337
  privateKey_ = [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withSecretKeySeedWithByteArray:
#line 338
  [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeySeed]])) withSecretKeyPRFWithByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeyPRF]])) withPublicSeedWithByteArray:
#line 339
  publicSeed])) withRootWithByteArray:[self getRoot]])) withBDSStateWithOrgBouncycastlePqcCryptoXmssBDS:[((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getBDSState]])) build];
  publicKey_ = [((OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withRootWithByteArray:[self getRoot]])) withPublicSeedWithByteArray:publicSeed])) build];
  
#line 343
  [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getTreeDigestSize]] withByteArray:publicSeed];
}


#line 346
- (OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *)getPrivateKey {
  
#line 348
  return privateKey_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssWOTSPlusSignature;", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssWOTSPlus;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 13, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 5, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastlePqcCryptoXmssXMSSParameters:withJavaSecuritySecureRandom:);
  methods[1].selector = @selector(generateKeys);
  methods[2].selector = @selector(importStateWithOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters:withOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters:);
  methods[3].selector = @selector(importStateWithByteArray:withByteArray:);
  methods[4].selector = @selector(signWithByteArray:);
  methods[5].selector = @selector(verifySignatureWithByteArray:withByteArray:withByteArray:);
  methods[6].selector = @selector(exportPrivateKey);
  methods[7].selector = @selector(exportPublicKey);
  methods[8].selector = @selector(wotsSignWithByteArray:withOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[9].selector = @selector(getParams);
  methods[10].selector = @selector(getWOTSPlus);
  methods[11].selector = @selector(getRoot);
  methods[12].selector = @selector(setRootWithByteArray:);
  methods[13].selector = @selector(getIndex);
  methods[14].selector = @selector(setIndexWithInt:);
  methods[15].selector = @selector(getPublicSeed);
  methods[16].selector = @selector(setPublicSeedWithByteArray:);
  methods[17].selector = @selector(getPrivateKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LOrgBouncycastlePqcCryptoXmssXMSSParameters;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "wotsPlus_", "LOrgBouncycastlePqcCryptoXmssWOTSPlus;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prng_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "privateKey_", "LOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicKey_", "LOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcCryptoXmssXMSSParameters;LJavaSecuritySecureRandom;", "importState", "LOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters;LOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters;", "[B[B", "sign", "[B", "verifySignature", "[B[B[B", "LJavaTextParseException;", "wotsSign", "[BLOrgBouncycastlePqcCryptoXmssOTSHashAddress;", "setRoot", "setIndex", "I", "setPublicSeed" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoXmssXMSS = { "XMSS", "org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x1, 18, 5, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoXmssXMSS;
}

@end


#line 42
void OrgBouncycastlePqcCryptoXmssXMSS_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(OrgBouncycastlePqcCryptoXmssXMSS *self, OrgBouncycastlePqcCryptoXmssXMSSParameters *params, JavaSecuritySecureRandom *prng) {
  NSObject_init(self);
  
#line 45
  if (params == nil) {
    
#line 47
    @throw new_JavaLangNullPointerException_initWithNSString_(@"params == null");
  }
  self->params_ = params;
  self->wotsPlus_ = [params getWOTSPlus];
  self->prng_ = prng;
}


#line 42
OrgBouncycastlePqcCryptoXmssXMSS *new_OrgBouncycastlePqcCryptoXmssXMSS_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(OrgBouncycastlePqcCryptoXmssXMSSParameters *params, JavaSecuritySecureRandom *prng) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssXMSS, initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_, params, prng)
}


#line 42
OrgBouncycastlePqcCryptoXmssXMSS *create_OrgBouncycastlePqcCryptoXmssXMSS_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(OrgBouncycastlePqcCryptoXmssXMSSParameters *params, JavaSecuritySecureRandom *prng) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssXMSS, initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_, params, prng)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoXmssXMSS)
