//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSMTSigner.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/List.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/pqc/crypto/xmss/BDS.h"
#include "org/bouncycastle/pqc/crypto/xmss/BDSStateMap.h"
#include "org/bouncycastle/pqc/crypto/xmss/KeyedHashFunctions.h"
#include "org/bouncycastle/pqc/crypto/xmss/OTSHashAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlus.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlusSignature.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTSignature.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTSigner.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSNode.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSReducedSignature.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSUtil.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSVerifierUtil.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/xmss/XMSSMTSigner must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoXmssXMSSMTSigner () {
 @public
  OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *privateKey_;
  OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *publicKey_;
  OrgBouncycastlePqcCryptoXmssXMSSMTParameters *params_;
  OrgBouncycastlePqcCryptoXmssXMSSParameters *xmssParams_;
  OrgBouncycastlePqcCryptoXmssWOTSPlus *wotsPlus_;
  jboolean hasGenerated_;
  jboolean initSign_;
}

- (OrgBouncycastlePqcCryptoXmssWOTSPlusSignature *)wotsSignWithByteArray:(IOSByteArray *)messageDigest
                          withOrgBouncycastlePqcCryptoXmssOTSHashAddress:(OrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTSigner, privateKey_, OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTSigner, publicKey_, OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTSigner, params_, OrgBouncycastlePqcCryptoXmssXMSSMTParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTSigner, xmssParams_, OrgBouncycastlePqcCryptoXmssXMSSParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTSigner, wotsPlus_, OrgBouncycastlePqcCryptoXmssWOTSPlus *)

__attribute__((unused)) static OrgBouncycastlePqcCryptoXmssWOTSPlusSignature *OrgBouncycastlePqcCryptoXmssXMSSMTSigner_wotsSignWithByteArray_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(OrgBouncycastlePqcCryptoXmssXMSSMTSigner *self, IOSByteArray *messageDigest, OrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSMTSigner.java"


#line 11
@implementation OrgBouncycastlePqcCryptoXmssXMSSMTSigner

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 11
- (instancetype)init {
  OrgBouncycastlePqcCryptoXmssXMSSMTSigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 24
- (void)init__WithBoolean:(jboolean)forSigning
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)param {
  
#line 27
  if (forSigning) {
    
#line 29
    initSign_ = true;
    hasGenerated_ = false;
    privateKey_ = (OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters class]);
    
#line 33
    params_ = [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getParameters];
  }
  else {
    
#line 37
    initSign_ = false;
    publicKey_ = (OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters class]);
    
#line 40
    params_ = [((OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *) nil_chk(publicKey_)) getParameters];
  }
  xmssParams_ = [((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getXMSSParameters];
  
#line 44
  wotsPlus_ = [((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getWOTSPlus];
}


#line 47
- (IOSByteArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  
#line 50
  if (message == nil) {
    
#line 52
    @throw new_JavaLangNullPointerException_initWithNSString_(@"message == null");
  }
  
#line 55
  if (initSign_) {
    
#line 57
    if (privateKey_ == nil) {
      
#line 59
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"signing key no longer usable");
    }
  }
  else {
    
#line 64
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"signer not initialized for signature generation");
  }
  
#line 67
  @synchronized(privateKey_) {
    
#line 69
    if ([privateKey_ getUsagesRemaining] <= 0) {
      
#line 71
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"no usages of private key remaining");
    }
    if ([((OrgBouncycastlePqcCryptoXmssBDSStateMap *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getBDSState])) isEmpty]) {
      
#line 75
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"not initialized");
    }
    
#line 78
    @try {
      
#line 81
      OrgBouncycastlePqcCryptoXmssBDSStateMap *bdsState = [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getBDSState];
      
#line 84
      jlong globalIndex = [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getIndex];
      jint totalHeight = [((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getHeight];
      jint xmssHeight = [((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(xmssParams_)) getHeight];
      if ([((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getUsagesRemaining] <= 0) {
        
#line 89
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"index out of bounds");
      }
      
#line 93
      IOSByteArray *random = [((OrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk([((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) getKhf])) PRFWithByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeyPRF] withByteArray:OrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(globalIndex, 32)];
      IOSByteArray *concatenated = OrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_(random, [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getRoot], OrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(
#line 95
      globalIndex, [((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getTreeDigestSize]));
      IOSByteArray *messageDigest = [((OrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk([((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) getKhf])) HMsgWithByteArray:concatenated withByteArray:message];
      
#line 98
      hasGenerated_ = true;
      
#line 100
      OrgBouncycastlePqcCryptoXmssXMSSMTSignature *signature = [((OrgBouncycastlePqcCryptoXmssXMSSMTSignature_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSMTSignature_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSMTSignature_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(params_) withIndexWithLong:globalIndex])) withRandomWithByteArray:random])) build];
      
#line 104
      jlong indexTree = OrgBouncycastlePqcCryptoXmssXMSSUtil_getTreeIndexWithLong_withInt_(globalIndex, xmssHeight);
      jint indexLeaf = OrgBouncycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(globalIndex, xmssHeight);
      
#line 108
      [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getTreeDigestSize]] withByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getPublicSeed]];
      
#line 112
      OrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress = (OrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withTreeAddressWithLong:indexTree])) withOTSAddressWithInt:
#line 113
      indexLeaf])) build], [OrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
      
#line 116
      if ([((OrgBouncycastlePqcCryptoXmssBDSStateMap *) nil_chk(bdsState)) getWithInt:0] == nil || indexLeaf == 0) {
        
#line 118
        [bdsState putWithInt:0 withOrgBouncycastlePqcCryptoXmssBDS:new_OrgBouncycastlePqcCryptoXmssBDS_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(xmssParams_, [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getPublicSeed], [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeySeed], otsHashAddress)];
      }
      
#line 122
      OrgBouncycastlePqcCryptoXmssWOTSPlusSignature *wotsPlusSignature = OrgBouncycastlePqcCryptoXmssXMSSMTSigner_wotsSignWithByteArray_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, messageDigest, otsHashAddress);
      
#line 124
      OrgBouncycastlePqcCryptoXmssXMSSReducedSignature *reducedSignature = [((OrgBouncycastlePqcCryptoXmssXMSSReducedSignature_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSReducedSignature_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSReducedSignature_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_(xmssParams_) withWOTSPlusSignatureWithOrgBouncycastlePqcCryptoXmssWOTSPlusSignature:
#line 125
      wotsPlusSignature])) withAuthPathWithJavaUtilList:[((OrgBouncycastlePqcCryptoXmssBDS *) nil_chk([bdsState getWithInt:0])) getAuthenticationPath]])) build];
      
#line 128
      [((id<JavaUtilList>) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSMTSignature *) nil_chk(signature)) getReducedSignatures])) addWithId:reducedSignature];
      
#line 130
      for (jint layer = 1; layer < [((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getLayers]; layer++) {
        
#line 133
        OrgBouncycastlePqcCryptoXmssXMSSNode *root = [((OrgBouncycastlePqcCryptoXmssBDS *) nil_chk([bdsState getWithInt:layer - 1])) getRoot];
        
#line 135
        indexLeaf = OrgBouncycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(indexTree, xmssHeight);
        indexTree = OrgBouncycastlePqcCryptoXmssXMSSUtil_getTreeIndexWithLong_withInt_(indexTree, xmssHeight);
        
#line 139
        otsHashAddress = (OrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:layer])) withTreeAddressWithLong:
#line 140
        indexTree])) withOTSAddressWithInt:indexLeaf])) build], [OrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
        
#line 143
        wotsPlusSignature = OrgBouncycastlePqcCryptoXmssXMSSMTSigner_wotsSignWithByteArray_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, [((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(root)) getValue], otsHashAddress);
        
#line 145
        if ([bdsState getWithInt:layer] == nil || OrgBouncycastlePqcCryptoXmssXMSSUtil_isNewBDSInitNeededWithLong_withInt_withInt_(globalIndex, xmssHeight, layer)) {
          
#line 147
          [bdsState putWithInt:layer withOrgBouncycastlePqcCryptoXmssBDS:new_OrgBouncycastlePqcCryptoXmssBDS_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(xmssParams_, [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getPublicSeed], [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeySeed], otsHashAddress)];
        }
        
#line 150
        reducedSignature = [((OrgBouncycastlePqcCryptoXmssXMSSReducedSignature_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSReducedSignature_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSReducedSignature_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_(xmssParams_) withWOTSPlusSignatureWithOrgBouncycastlePqcCryptoXmssWOTSPlusSignature:
#line 151
        wotsPlusSignature])) withAuthPathWithJavaUtilList:
#line 152
        [((OrgBouncycastlePqcCryptoXmssBDS *) nil_chk([bdsState getWithInt:layer])) getAuthenticationPath]])) build];
        
#line 154
        [((id<JavaUtilList>) nil_chk([signature getReducedSignatures])) addWithId:reducedSignature];
      }
      
#line 157
      return JreRetainedLocalValue([signature toByteArray]);
    }
    @finally {
      
#line 161
      (void) [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) rollKey];
    }
  }
}


#line 166
- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                           withByteArray:(IOSByteArray *)signature {
  
#line 169
  if (message == nil) {
    
#line 171
    @throw new_JavaLangNullPointerException_initWithNSString_(@"message == null");
  }
  if (signature == nil) {
    
#line 175
    @throw new_JavaLangNullPointerException_initWithNSString_(@"signature == null");
  }
  if (publicKey_ == nil) {
    
#line 179
    @throw new_JavaLangNullPointerException_initWithNSString_(@"publicKey == null");
  }
  
#line 182
  OrgBouncycastlePqcCryptoXmssXMSSMTSignature *sig = [((OrgBouncycastlePqcCryptoXmssXMSSMTSignature_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSMTSignature_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(params_) withSignatureWithByteArray:signature])) build];
  
#line 184
  IOSByteArray *concatenated = OrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_([((OrgBouncycastlePqcCryptoXmssXMSSMTSignature *) nil_chk(sig)) getRandom], [((OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *) nil_chk(publicKey_)) getRoot], OrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(
#line 185
  [sig getIndex], [((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getTreeDigestSize]));
  IOSByteArray *messageDigest = [((OrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk([((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) getKhf])) HMsgWithByteArray:concatenated withByteArray:message];
  
#line 188
  jlong globalIndex = [sig getIndex];
  jint xmssHeight = [((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(xmssParams_)) getHeight];
  jlong indexTree = OrgBouncycastlePqcCryptoXmssXMSSUtil_getTreeIndexWithLong_withInt_(globalIndex, xmssHeight);
  jint indexLeaf = OrgBouncycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(globalIndex, xmssHeight);
  
#line 194
  [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getTreeDigestSize]] withByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *) nil_chk(publicKey_)) getPublicSeed]];
  
#line 197
  OrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress = (OrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withTreeAddressWithLong:indexTree])) withOTSAddressWithInt:
#line 198
  indexLeaf])) build], [OrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
  
#line 201
  OrgBouncycastlePqcCryptoXmssXMSSReducedSignature *xmssMTSignature = [((id<JavaUtilList>) nil_chk([sig getReducedSignatures])) getWithInt:0];
  OrgBouncycastlePqcCryptoXmssXMSSNode *rootNode = OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_getRootNodeFromSignatureWithOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withByteArray_withOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_(wotsPlus_, xmssHeight, messageDigest, xmssMTSignature, otsHashAddress, indexLeaf);
  for (jint layer = 1; layer < [((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getLayers]; layer++) {
    
#line 205
    xmssMTSignature = [((id<JavaUtilList>) nil_chk([sig getReducedSignatures])) getWithInt:layer];
    indexLeaf = OrgBouncycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(indexTree, xmssHeight);
    indexTree = OrgBouncycastlePqcCryptoXmssXMSSUtil_getTreeIndexWithLong_withInt_(indexTree, xmssHeight);
    
#line 210
    otsHashAddress = (OrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:layer])) withTreeAddressWithLong:
#line 211
    indexTree])) withOTSAddressWithInt:indexLeaf])) build], [OrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
    
#line 214
    rootNode = OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_getRootNodeFromSignatureWithOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withByteArray_withOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_(wotsPlus_, xmssHeight, [((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(rootNode)) getValue], xmssMTSignature, otsHashAddress, indexLeaf);
  }
  
#line 218
  return OrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_([((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(rootNode)) getValue], [((OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *) nil_chk(publicKey_)) getRoot]);
}


#line 221
- (OrgBouncycastlePqcCryptoXmssWOTSPlusSignature *)wotsSignWithByteArray:(IOSByteArray *)messageDigest
                          withOrgBouncycastlePqcCryptoXmssOTSHashAddress:(OrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  return OrgBouncycastlePqcCryptoXmssXMSSMTSigner_wotsSignWithByteArray_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, messageDigest, otsHashAddress);
}


#line 237
- (jlong)getUsagesRemaining {
  
#line 239
  return [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getUsagesRemaining];
}


#line 242
- (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getUpdatedPrivateKey {
  
#line 247
  if (hasGenerated_) {
    
#line 249
    OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *privKey = privateKey_;
    
#line 251
    privateKey_ = nil;
    
#line 253
    return privKey;
  }
  else {
    
#line 257
    OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *privKey = privateKey_;
    
#line 259
    if (privKey != nil) {
      
#line 261
      privateKey_ = [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getNextKey];
    }
    
#line 264
    return privKey;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssWOTSPlusSignature;", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(generateSignatureWithByteArray:);
  methods[3].selector = @selector(verifySignatureWithByteArray:withByteArray:);
  methods[4].selector = @selector(wotsSignWithByteArray:withOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[5].selector = @selector(getUsagesRemaining);
  methods[6].selector = @selector(getUpdatedPrivateKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "privateKey_", "LOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicKey_", "LOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "params_", "LOrgBouncycastlePqcCryptoXmssXMSSMTParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "xmssParams_", "LOrgBouncycastlePqcCryptoXmssXMSSParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "wotsPlus_", "LOrgBouncycastlePqcCryptoXmssWOTSPlus;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasGenerated_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initSign_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgBouncycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[B[B", "wotsSign", "[BLOrgBouncycastlePqcCryptoXmssOTSHashAddress;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoXmssXMSSMTSigner = { "XMSSMTSigner", "org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x1, 7, 7, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoXmssXMSSMTSigner;
}

@end


#line 11
void OrgBouncycastlePqcCryptoXmssXMSSMTSigner_init(OrgBouncycastlePqcCryptoXmssXMSSMTSigner *self) {
  NSObject_init(self);
}


#line 11
OrgBouncycastlePqcCryptoXmssXMSSMTSigner *new_OrgBouncycastlePqcCryptoXmssXMSSMTSigner_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssXMSSMTSigner, init)
}


#line 11
OrgBouncycastlePqcCryptoXmssXMSSMTSigner *create_OrgBouncycastlePqcCryptoXmssXMSSMTSigner_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssXMSSMTSigner, init)
}


#line 221
OrgBouncycastlePqcCryptoXmssWOTSPlusSignature *OrgBouncycastlePqcCryptoXmssXMSSMTSigner_wotsSignWithByteArray_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(OrgBouncycastlePqcCryptoXmssXMSSMTSigner *self, IOSByteArray *messageDigest, OrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress) {
  
#line 223
  if (((IOSByteArray *) nil_chk(messageDigest))->size_ != [((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(self->params_)) getTreeDigestSize]) {
    
#line 225
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of messageDigest needs to be equal to size of digest");
  }
  if (otsHashAddress == nil) {
    
#line 229
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  
#line 232
  [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(self->wotsPlus_)) importKeysWithByteArray:[self->wotsPlus_ getWOTSPlusSecretKeyWithByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(self->privateKey_)) getSecretKeySeed] withOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress] withByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(self->privateKey_)) getPublicSeed]];
  
#line 234
  return [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(self->wotsPlus_)) signWithByteArray:messageDigest withOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoXmssXMSSMTSigner)
