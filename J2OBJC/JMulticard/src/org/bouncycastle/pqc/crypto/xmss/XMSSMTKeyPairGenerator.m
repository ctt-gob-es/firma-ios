//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSMTKeyPairGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/bouncycastle/crypto/KeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/BDS.h"
#include "org/bouncycastle/pqc/crypto/xmss/BDSStateMap.h"
#include "org/bouncycastle/pqc/crypto/xmss/OTSHashAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlus.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTKeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTKeyPairGenerator.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSNode.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSParameters.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/xmss/XMSSMTKeyPairGenerator must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator () {
 @public
  OrgBouncycastlePqcCryptoXmssXMSSMTParameters *params_;
  OrgBouncycastlePqcCryptoXmssXMSSParameters *xmssParams_;
  JavaSecuritySecureRandom *prng_;
}

- (OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *)generatePrivateKeyWithOrgBouncycastlePqcCryptoXmssBDSStateMap:(OrgBouncycastlePqcCryptoXmssBDSStateMap *)bdsState;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator, params_, OrgBouncycastlePqcCryptoXmssXMSSMTParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator, xmssParams_, OrgBouncycastlePqcCryptoXmssXMSSParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator, prng_, JavaSecuritySecureRandom *)

__attribute__((unused)) static OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator_generatePrivateKeyWithOrgBouncycastlePqcCryptoXmssBDSStateMap_(OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator *self, OrgBouncycastlePqcCryptoXmssBDSStateMap *bdsState);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSMTKeyPairGenerator.java"


#line 12
@implementation OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 24
- (instancetype)init {
  OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 28
- (void)init__WithOrgBouncycastleCryptoKeyGenerationParameters:(OrgBouncycastleCryptoKeyGenerationParameters *)param {
  
#line 32
  OrgBouncycastlePqcCryptoXmssXMSSMTKeyGenerationParameters *parameters = (OrgBouncycastlePqcCryptoXmssXMSSMTKeyGenerationParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoXmssXMSSMTKeyGenerationParameters class]);
  
#line 34
  prng_ = [((OrgBouncycastlePqcCryptoXmssXMSSMTKeyGenerationParameters *) nil_chk(parameters)) getRandom];
  self->params_ = [parameters getParameters];
  self->xmssParams_ = [((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getXMSSParameters];
}


#line 42
- (OrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  
#line 45
  OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *privateKey;
  OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *publicKey;
  
#line 49
  privateKey = OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator_generatePrivateKeyWithOrgBouncycastlePqcCryptoXmssBDSStateMap_(self, [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(params_) build])) getBDSState]);
  
#line 52
  [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(xmssParams_)) getWOTSPlus])) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getTreeDigestSize]] withByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey)) getPublicSeed]];
  
#line 55
  jint rootLayerIndex = [((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getLayers] - 1;
  OrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress = (OrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:rootLayerIndex])) build], [OrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
  
#line 60
  OrgBouncycastlePqcCryptoXmssBDS *bdsRoot = new_OrgBouncycastlePqcCryptoXmssBDS_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(xmssParams_, [privateKey getPublicSeed], [privateKey getSecretKeySeed], otsHashAddress);
  OrgBouncycastlePqcCryptoXmssXMSSNode *root = [bdsRoot getRoot];
  [((OrgBouncycastlePqcCryptoXmssBDSStateMap *) nil_chk([privateKey getBDSState])) putWithInt:rootLayerIndex withOrgBouncycastlePqcCryptoXmssBDS:bdsRoot];
  
#line 65
  privateKey = [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(params_) withSecretKeySeedWithByteArray:[privateKey getSecretKeySeed]])) withSecretKeyPRFWithByteArray:
#line 66
  [privateKey getSecretKeyPRF]])) withPublicSeedWithByteArray:[privateKey getPublicSeed]])) withRootWithByteArray:
#line 67
  [((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(root)) getValue]])) withBDSStateWithOrgBouncycastlePqcCryptoXmssBDSStateMap:[privateKey getBDSState]])) build];
  publicKey = [((OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(params_) withRootWithByteArray:[root getValue]])) withPublicSeedWithByteArray:
#line 69
  [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey)) getPublicSeed]])) build];
  
#line 71
  return new_OrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(publicKey, privateKey);
}


#line 74
- (OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *)generatePrivateKeyWithOrgBouncycastlePqcCryptoXmssBDSStateMap:(OrgBouncycastlePqcCryptoXmssBDSStateMap *)bdsState {
  return OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator_generatePrivateKeyWithOrgBouncycastlePqcCryptoXmssBDSStateMap_(self, bdsState);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters;", 0x2, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[2].selector = @selector(generateKeyPair);
  methods[3].selector = @selector(generatePrivateKeyWithOrgBouncycastlePqcCryptoXmssBDSStateMap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LOrgBouncycastlePqcCryptoXmssXMSSMTParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "xmssParams_", "LOrgBouncycastlePqcCryptoXmssXMSSParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prng_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LOrgBouncycastleCryptoKeyGenerationParameters;", "generatePrivateKey", "LOrgBouncycastlePqcCryptoXmssBDSStateMap;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator = { "XMSSMTKeyPairGenerator", "org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x11, 4, 3, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator;
}

@end


#line 24
void OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator_init(OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator *self) {
  NSObject_init(self);
}


#line 24
OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator *new_OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator, init)
}


#line 24
OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator *create_OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator, init)
}


#line 74
OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator_generatePrivateKeyWithOrgBouncycastlePqcCryptoXmssBDSStateMap_(OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator *self, OrgBouncycastlePqcCryptoXmssBDSStateMap *bdsState) {
  
#line 76
  jint n = [((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(self->params_)) getTreeDigestSize];
  IOSByteArray *secretKeySeed = [IOSByteArray newArrayWithLength:n];
  [((JavaSecuritySecureRandom *) nil_chk(self->prng_)) nextBytesWithByteArray:secretKeySeed];
  IOSByteArray *secretKeyPRF = [IOSByteArray newArrayWithLength:n];
  [((JavaSecuritySecureRandom *) nil_chk(self->prng_)) nextBytesWithByteArray:secretKeyPRF];
  IOSByteArray *publicSeed = [IOSByteArray newArrayWithLength:n];
  [((JavaSecuritySecureRandom *) nil_chk(self->prng_)) nextBytesWithByteArray:publicSeed];
  
#line 84
  OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *privateKey = nil;
  
#line 86
  privateKey = [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(self->params_) withSecretKeySeedWithByteArray:secretKeySeed])) withSecretKeyPRFWithByteArray:
#line 87
  secretKeyPRF])) withPublicSeedWithByteArray:publicSeed])) withBDSStateWithOrgBouncycastlePqcCryptoXmssBDSStateMap:
#line 88
  bdsState])) build];
  
#line 90
  return privateKey;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator)
