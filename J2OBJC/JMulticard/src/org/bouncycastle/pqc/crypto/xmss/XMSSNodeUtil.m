//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSNodeUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "org/bouncycastle/pqc/crypto/xmss/HashTreeAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/KeyedHashFunctions.h"
#include "org/bouncycastle/pqc/crypto/xmss/LTreeAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlus.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlusParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlusPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSNode.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSNodeUtil.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/xmss/XMSSNodeUtil must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSNodeUtil.java"


#line 3
@implementation OrgBouncycastlePqcCryptoXmssXMSSNodeUtil


#line 3
- (instancetype)initPackagePrivate {
  OrgBouncycastlePqcCryptoXmssXMSSNodeUtil_initPackagePrivate(self);
  return self;
}


#line 12
+ (OrgBouncycastlePqcCryptoXmssXMSSNode *)lTreeWithOrgBouncycastlePqcCryptoXmssWOTSPlus:(OrgBouncycastlePqcCryptoXmssWOTSPlus *)wotsPlus
                            withOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters:(OrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters *)publicKey
                                           withOrgBouncycastlePqcCryptoXmssLTreeAddress:(OrgBouncycastlePqcCryptoXmssLTreeAddress *)address {
  return OrgBouncycastlePqcCryptoXmssXMSSNodeUtil_lTreeWithOrgBouncycastlePqcCryptoXmssWOTSPlus_withOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters_withOrgBouncycastlePqcCryptoXmssLTreeAddress_(wotsPlus, publicKey, address);
}


#line 64
+ (OrgBouncycastlePqcCryptoXmssXMSSNode *)randomizeHashWithOrgBouncycastlePqcCryptoXmssWOTSPlus:(OrgBouncycastlePqcCryptoXmssWOTSPlus *)wotsPlus
                                                       withOrgBouncycastlePqcCryptoXmssXMSSNode:(OrgBouncycastlePqcCryptoXmssXMSSNode *)left
                                                       withOrgBouncycastlePqcCryptoXmssXMSSNode:(OrgBouncycastlePqcCryptoXmssXMSSNode *)right
                                                    withOrgBouncycastlePqcCryptoXmssXMSSAddress:(OrgBouncycastlePqcCryptoXmssXMSSAddress *)address {
  return OrgBouncycastlePqcCryptoXmssXMSSNodeUtil_randomizeHashWithOrgBouncycastlePqcCryptoXmssWOTSPlus_withOrgBouncycastlePqcCryptoXmssXMSSNode_withOrgBouncycastlePqcCryptoXmssXMSSNode_withOrgBouncycastlePqcCryptoXmssXMSSAddress_(wotsPlus, left, right, address);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSNode;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSNode;", 0x8, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(lTreeWithOrgBouncycastlePqcCryptoXmssWOTSPlus:withOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters:withOrgBouncycastlePqcCryptoXmssLTreeAddress:);
  methods[2].selector = @selector(randomizeHashWithOrgBouncycastlePqcCryptoXmssWOTSPlus:withOrgBouncycastlePqcCryptoXmssXMSSNode:withOrgBouncycastlePqcCryptoXmssXMSSNode:withOrgBouncycastlePqcCryptoXmssXMSSAddress:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "lTree", "LOrgBouncycastlePqcCryptoXmssWOTSPlus;LOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters;LOrgBouncycastlePqcCryptoXmssLTreeAddress;", "randomizeHash", "LOrgBouncycastlePqcCryptoXmssWOTSPlus;LOrgBouncycastlePqcCryptoXmssXMSSNode;LOrgBouncycastlePqcCryptoXmssXMSSNode;LOrgBouncycastlePqcCryptoXmssXMSSAddress;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoXmssXMSSNodeUtil = { "XMSSNodeUtil", "org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, NULL, 7, 0x0, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoXmssXMSSNodeUtil;
}

@end


#line 3
void OrgBouncycastlePqcCryptoXmssXMSSNodeUtil_initPackagePrivate(OrgBouncycastlePqcCryptoXmssXMSSNodeUtil *self) {
  NSObject_init(self);
}


#line 3
OrgBouncycastlePqcCryptoXmssXMSSNodeUtil *new_OrgBouncycastlePqcCryptoXmssXMSSNodeUtil_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssXMSSNodeUtil, initPackagePrivate)
}


#line 3
OrgBouncycastlePqcCryptoXmssXMSSNodeUtil *create_OrgBouncycastlePqcCryptoXmssXMSSNodeUtil_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssXMSSNodeUtil, initPackagePrivate)
}


#line 12
OrgBouncycastlePqcCryptoXmssXMSSNode *OrgBouncycastlePqcCryptoXmssXMSSNodeUtil_lTreeWithOrgBouncycastlePqcCryptoXmssWOTSPlus_withOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters_withOrgBouncycastlePqcCryptoXmssLTreeAddress_(OrgBouncycastlePqcCryptoXmssWOTSPlus *wotsPlus, OrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters *publicKey, OrgBouncycastlePqcCryptoXmssLTreeAddress *address) {
  OrgBouncycastlePqcCryptoXmssXMSSNodeUtil_initialize();
  if (publicKey == nil) {
    
#line 16
    @throw new_JavaLangNullPointerException_initWithNSString_(@"publicKey == null");
  }
  if (address == nil) {
    
#line 20
    @throw new_JavaLangNullPointerException_initWithNSString_(@"address == null");
  }
  jint len = [((OrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk([((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus)) getParams])) getLen];
  
#line 24
  IOSObjectArray *publicKeyBytes = [publicKey toByteArray];
  IOSObjectArray *publicKeyNodes = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(publicKeyBytes))->size_ type:OrgBouncycastlePqcCryptoXmssXMSSNode_class_()];
  for (jint i = 0; i < publicKeyBytes->size_; i++) {
    
#line 28
    (void) IOSObjectArray_SetAndConsume(publicKeyNodes, i, new_OrgBouncycastlePqcCryptoXmssXMSSNode_initWithInt_withByteArray_(0, IOSObjectArray_Get(publicKeyBytes, i)));
  }
  address = (OrgBouncycastlePqcCryptoXmssLTreeAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder_init() withLayerAddressWithInt:[address getLayerAddress]])) withTreeAddressWithLong:
#line 31
  [address getTreeAddress]])) withLTreeAddressWithInt:[address getLTreeAddress]])) withTreeHeightWithInt:0])) withTreeIndexWithInt:
#line 32
  [address getTreeIndex]])) withKeyAndMaskWithInt:[address getKeyAndMask]])) build], [OrgBouncycastlePqcCryptoXmssLTreeAddress class]);
  while (len > 1) {
    
#line 35
    for (jint i = 0; i < JreFpToInt(JavaLangMath_floorWithDouble_(JreIntDiv(len, 2))); i++) {
      
#line 37
      address = (OrgBouncycastlePqcCryptoXmssLTreeAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder_init() withLayerAddressWithInt:[((OrgBouncycastlePqcCryptoXmssLTreeAddress *) nil_chk(address)) getLayerAddress]])) withTreeAddressWithLong:
#line 38
      [address getTreeAddress]])) withLTreeAddressWithInt:[address getLTreeAddress]])) withTreeHeightWithInt:
#line 39
      [address getTreeHeight]])) withTreeIndexWithInt:i])) withKeyAndMaskWithInt:
#line 40
      [address getKeyAndMask]])) build], [OrgBouncycastlePqcCryptoXmssLTreeAddress class]);
      (void) IOSObjectArray_Set(publicKeyNodes, i, OrgBouncycastlePqcCryptoXmssXMSSNodeUtil_randomizeHashWithOrgBouncycastlePqcCryptoXmssWOTSPlus_withOrgBouncycastlePqcCryptoXmssXMSSNode_withOrgBouncycastlePqcCryptoXmssXMSSNode_withOrgBouncycastlePqcCryptoXmssXMSSAddress_(wotsPlus, IOSObjectArray_Get(publicKeyNodes, 2 * i), IOSObjectArray_Get(publicKeyNodes, 2 * i + 1), address));
    }
    if (JreIntMod(len, 2) == 1) {
      
#line 45
      (void) IOSObjectArray_Set(publicKeyNodes, JreFpToInt(JavaLangMath_floorWithDouble_(JreIntDiv(len, 2))), IOSObjectArray_Get(publicKeyNodes, len - 1));
    }
    len = JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) len / 2));
    address = (OrgBouncycastlePqcCryptoXmssLTreeAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder_init() withLayerAddressWithInt:[((OrgBouncycastlePqcCryptoXmssLTreeAddress *) nil_chk(address)) getLayerAddress]])) withTreeAddressWithLong:
#line 49
    [address getTreeAddress]])) withLTreeAddressWithInt:[address getLTreeAddress]])) withTreeHeightWithInt:
#line 50
    [address getTreeHeight] + 1])) withTreeIndexWithInt:[address getTreeIndex]])) withKeyAndMaskWithInt:
#line 51
    [address getKeyAndMask]])) build], [OrgBouncycastlePqcCryptoXmssLTreeAddress class]);
  }
  return IOSObjectArray_Get(publicKeyNodes, 0);
}


#line 64
OrgBouncycastlePqcCryptoXmssXMSSNode *OrgBouncycastlePqcCryptoXmssXMSSNodeUtil_randomizeHashWithOrgBouncycastlePqcCryptoXmssWOTSPlus_withOrgBouncycastlePqcCryptoXmssXMSSNode_withOrgBouncycastlePqcCryptoXmssXMSSNode_withOrgBouncycastlePqcCryptoXmssXMSSAddress_(OrgBouncycastlePqcCryptoXmssWOTSPlus *wotsPlus, OrgBouncycastlePqcCryptoXmssXMSSNode *left, OrgBouncycastlePqcCryptoXmssXMSSNode *right, OrgBouncycastlePqcCryptoXmssXMSSAddress *address) {
  OrgBouncycastlePqcCryptoXmssXMSSNodeUtil_initialize();
  if (left == nil) {
    
#line 68
    @throw new_JavaLangNullPointerException_initWithNSString_(@"left == null");
  }
  if (right == nil) {
    
#line 72
    @throw new_JavaLangNullPointerException_initWithNSString_(@"right == null");
  }
  if ([left getHeight] != [right getHeight]) {
    
#line 76
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"height of both nodes must be equal");
  }
  if (address == nil) {
    
#line 80
    @throw new_JavaLangNullPointerException_initWithNSString_(@"address == null");
  }
  IOSByteArray *publicSeed = [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus)) getPublicSeed];
  
#line 84
  if ([address isKindOfClass:[OrgBouncycastlePqcCryptoXmssLTreeAddress class]]) {
    
#line 86
    OrgBouncycastlePqcCryptoXmssLTreeAddress *tmpAddress = (OrgBouncycastlePqcCryptoXmssLTreeAddress *) address;
    address = [((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder_init() withLayerAddressWithInt:[tmpAddress getLayerAddress]])) withTreeAddressWithLong:
#line 88
    [tmpAddress getTreeAddress]])) withLTreeAddressWithInt:[tmpAddress getLTreeAddress]])) withTreeHeightWithInt:
#line 89
    [tmpAddress getTreeHeight]])) withTreeIndexWithInt:[tmpAddress getTreeIndex]])) withKeyAndMaskWithInt:
#line 90
    0])) build];
  }
  else if ([address isKindOfClass:[OrgBouncycastlePqcCryptoXmssHashTreeAddress class]]) {
    
#line 94
    OrgBouncycastlePqcCryptoXmssHashTreeAddress *tmpAddress = (OrgBouncycastlePqcCryptoXmssHashTreeAddress *) address;
    address = [((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[tmpAddress getLayerAddress]])) withTreeAddressWithLong:
#line 96
    [tmpAddress getTreeAddress]])) withTreeHeightWithInt:[tmpAddress getTreeHeight]])) withTreeIndexWithInt:
#line 97
    [tmpAddress getTreeIndex]])) withKeyAndMaskWithInt:0])) build];
  }
  
#line 100
  IOSByteArray *key = [((OrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk([wotsPlus getKhf])) PRFWithByteArray:publicSeed withByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSAddress *) nil_chk(address)) toByteArray]];
  
#line 102
  if ([address isKindOfClass:[OrgBouncycastlePqcCryptoXmssLTreeAddress class]]) {
    
#line 104
    OrgBouncycastlePqcCryptoXmssLTreeAddress *tmpAddress = (OrgBouncycastlePqcCryptoXmssLTreeAddress *) address;
    address = [((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder_init() withLayerAddressWithInt:[tmpAddress getLayerAddress]])) withTreeAddressWithLong:
#line 106
    [tmpAddress getTreeAddress]])) withLTreeAddressWithInt:[tmpAddress getLTreeAddress]])) withTreeHeightWithInt:
#line 107
    [tmpAddress getTreeHeight]])) withTreeIndexWithInt:[tmpAddress getTreeIndex]])) withKeyAndMaskWithInt:
#line 108
    1])) build];
  }
  else if ([address isKindOfClass:[OrgBouncycastlePqcCryptoXmssHashTreeAddress class]]) {
    
#line 112
    OrgBouncycastlePqcCryptoXmssHashTreeAddress *tmpAddress = (OrgBouncycastlePqcCryptoXmssHashTreeAddress *) address;
    address = [((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[tmpAddress getLayerAddress]])) withTreeAddressWithLong:
#line 114
    [tmpAddress getTreeAddress]])) withTreeHeightWithInt:[tmpAddress getTreeHeight]])) withTreeIndexWithInt:
#line 115
    [tmpAddress getTreeIndex]])) withKeyAndMaskWithInt:1])) build];
  }
  
#line 118
  IOSByteArray *bitmask0 = [((OrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk([wotsPlus getKhf])) PRFWithByteArray:publicSeed withByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSAddress *) nil_chk(address)) toByteArray]];
  
#line 120
  if ([address isKindOfClass:[OrgBouncycastlePqcCryptoXmssLTreeAddress class]]) {
    
#line 122
    OrgBouncycastlePqcCryptoXmssLTreeAddress *tmpAddress = (OrgBouncycastlePqcCryptoXmssLTreeAddress *) address;
    address = [((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder_init() withLayerAddressWithInt:[tmpAddress getLayerAddress]])) withTreeAddressWithLong:
#line 124
    [tmpAddress getTreeAddress]])) withLTreeAddressWithInt:[tmpAddress getLTreeAddress]])) withTreeHeightWithInt:
#line 125
    [tmpAddress getTreeHeight]])) withTreeIndexWithInt:[tmpAddress getTreeIndex]])) withKeyAndMaskWithInt:
#line 126
    2])) build];
  }
  else if ([address isKindOfClass:[OrgBouncycastlePqcCryptoXmssHashTreeAddress class]]) {
    
#line 130
    OrgBouncycastlePqcCryptoXmssHashTreeAddress *tmpAddress = (OrgBouncycastlePqcCryptoXmssHashTreeAddress *) address;
    address = [((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[tmpAddress getLayerAddress]])) withTreeAddressWithLong:
#line 132
    [tmpAddress getTreeAddress]])) withTreeHeightWithInt:[tmpAddress getTreeHeight]])) withTreeIndexWithInt:
#line 133
    [tmpAddress getTreeIndex]])) withKeyAndMaskWithInt:2])) build];
  }
  
#line 136
  IOSByteArray *bitmask1 = [((OrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk([wotsPlus getKhf])) PRFWithByteArray:publicSeed withByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSAddress *) nil_chk(address)) toByteArray]];
  jint n = [((OrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk([wotsPlus getParams])) getTreeDigestSize];
  IOSByteArray *tmpMask = [IOSByteArray newArrayWithLength:2 * n];
  for (jint i = 0; i < n; i++) {
    
#line 141
    *IOSByteArray_GetRef(tmpMask, i) = (jbyte) (IOSByteArray_Get(nil_chk([left getValue]), i) ^ IOSByteArray_Get(nil_chk(bitmask0), i));
  }
  for (jint i = 0; i < n; i++) {
    
#line 145
    *IOSByteArray_GetRef(tmpMask, i + n) = (jbyte) (IOSByteArray_Get(nil_chk([right getValue]), i) ^ IOSByteArray_Get(nil_chk(bitmask1), i));
  }
  IOSByteArray *out = [((OrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk([wotsPlus getKhf])) HWithByteArray:key withByteArray:tmpMask];
  return new_OrgBouncycastlePqcCryptoXmssXMSSNode_initWithInt_withByteArray_([left getHeight], out);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoXmssXMSSNodeUtil)
