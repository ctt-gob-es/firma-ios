//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSKeyPairGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/bouncycastle/crypto/KeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/BDS.h"
#include "org/bouncycastle/pqc/crypto/xmss/OTSHashAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSKeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSKeyPairGenerator.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSNode.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSPublicKeyParameters.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/xmss/XMSSKeyPairGenerator must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator () {
 @public
  OrgBouncycastlePqcCryptoXmssXMSSParameters *params_;
  JavaSecuritySecureRandom *prng_;
}

/*!
 @brief Generate an XMSS private key.
 @return XMSS private key.
 */
- (OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *)generatePrivateKeyWithOrgBouncycastlePqcCryptoXmssXMSSParameters:(OrgBouncycastlePqcCryptoXmssXMSSParameters *)params
                                                                                              withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)prng;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator, params_, OrgBouncycastlePqcCryptoXmssXMSSParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator, prng_, JavaSecuritySecureRandom *)

__attribute__((unused)) static OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator_generatePrivateKeyWithOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator *self, OrgBouncycastlePqcCryptoXmssXMSSParameters *params, JavaSecuritySecureRandom *prng);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSKeyPairGenerator.java"


#line 12
@implementation OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 21
- (instancetype)init {
  OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 25
- (void)init__WithOrgBouncycastleCryptoKeyGenerationParameters:(OrgBouncycastleCryptoKeyGenerationParameters *)param {
  
#line 29
  OrgBouncycastlePqcCryptoXmssXMSSKeyGenerationParameters *parameters = (OrgBouncycastlePqcCryptoXmssXMSSKeyGenerationParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoXmssXMSSKeyGenerationParameters class]);
  
#line 31
  self->prng_ = [((OrgBouncycastlePqcCryptoXmssXMSSKeyGenerationParameters *) nil_chk(parameters)) getRandom];
  self->params_ = [parameters getParameters];
}


#line 38
- (OrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  
#line 42
  OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *privateKey = OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator_generatePrivateKeyWithOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(self, params_, prng_);
  OrgBouncycastlePqcCryptoXmssXMSSNode *root = [((OrgBouncycastlePqcCryptoXmssBDS *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey)) getBDSState])) getRoot];
  
#line 45
  privateKey = [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withSecretKeySeedWithByteArray:
#line 46
  [privateKey getSecretKeySeed]])) withSecretKeyPRFWithByteArray:[privateKey getSecretKeyPRF]])) withPublicSeedWithByteArray:
#line 47
  [privateKey getPublicSeed]])) withRootWithByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(root)) getValue]])) withBDSStateWithOrgBouncycastlePqcCryptoXmssBDS:
#line 48
  [privateKey getBDSState]])) build];
  
#line 50
  OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *publicKey = [((OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withRootWithByteArray:[root getValue]])) withPublicSeedWithByteArray:
#line 51
  [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey)) getPublicSeed]])) build];
  
#line 53
  return new_OrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(publicKey, privateKey);
}


#line 61
- (OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *)generatePrivateKeyWithOrgBouncycastlePqcCryptoXmssXMSSParameters:(OrgBouncycastlePqcCryptoXmssXMSSParameters *)params
                                                                                              withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)prng {
  return OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator_generatePrivateKeyWithOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(self, params, prng);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters;", 0x2, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[2].selector = @selector(generateKeyPair);
  methods[3].selector = @selector(generatePrivateKeyWithOrgBouncycastlePqcCryptoXmssXMSSParameters:withJavaSecuritySecureRandom:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LOrgBouncycastlePqcCryptoXmssXMSSParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prng_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LOrgBouncycastleCryptoKeyGenerationParameters;", "generatePrivateKey", "LOrgBouncycastlePqcCryptoXmssXMSSParameters;LJavaSecuritySecureRandom;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator = { "XMSSKeyPairGenerator", "org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x11, 4, 2, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator;
}

@end


#line 21
void OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator_init(OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator *self) {
  NSObject_init(self);
}


#line 21
OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator *new_OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator, init)
}


#line 21
OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator *create_OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator, init)
}


#line 61
OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator_generatePrivateKeyWithOrgBouncycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator *self, OrgBouncycastlePqcCryptoXmssXMSSParameters *params, JavaSecuritySecureRandom *prng) {
  
#line 63
  jint n = [((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params)) getTreeDigestSize];
  IOSByteArray *secretKeySeed = [IOSByteArray newArrayWithLength:n];
  [((JavaSecuritySecureRandom *) nil_chk(prng)) nextBytesWithByteArray:secretKeySeed];
  IOSByteArray *secretKeyPRF = [IOSByteArray newArrayWithLength:n];
  [prng nextBytesWithByteArray:secretKeyPRF];
  IOSByteArray *publicSeed = [IOSByteArray newArrayWithLength:n];
  [prng nextBytesWithByteArray:publicSeed];
  
#line 71
  OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *privateKey = [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_(params) withSecretKeySeedWithByteArray:secretKeySeed])) withSecretKeyPRFWithByteArray:
#line 72
  secretKeyPRF])) withPublicSeedWithByteArray:publicSeed])) withBDSStateWithOrgBouncycastlePqcCryptoXmssBDS:new_OrgBouncycastlePqcCryptoXmssBDS_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(
#line 73
  params, publicSeed, secretKeySeed, (OrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([new_OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() build], [OrgBouncycastlePqcCryptoXmssOTSHashAddress class]))])) build];
  
#line 75
  return privateKey;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoXmssXMSSKeyPairGenerator)
