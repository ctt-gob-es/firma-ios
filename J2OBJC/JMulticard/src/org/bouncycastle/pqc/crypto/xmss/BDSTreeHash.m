//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/BDSTreeHash.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Stack.h"
#include "org/bouncycastle/pqc/crypto/xmss/BDSTreeHash.h"
#include "org/bouncycastle/pqc/crypto/xmss/HashTreeAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/LTreeAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/OTSHashAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlus.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlusPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSNode.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSNodeUtil.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/xmss/BDSTreeHash must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoXmssBDSTreeHash () {
 @public
  OrgBouncycastlePqcCryptoXmssXMSSNode *tailNode_;
  jint initialHeight_;
  jint height_;
  jint nextIndex_;
  jboolean initialized_;
  jboolean finished_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssBDSTreeHash, tailNode_, OrgBouncycastlePqcCryptoXmssXMSSNode *)

inline jlong OrgBouncycastlePqcCryptoXmssBDSTreeHash_get_serialVersionUID(void);
#define OrgBouncycastlePqcCryptoXmssBDSTreeHash_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoXmssBDSTreeHash, serialVersionUID, jlong)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/BDSTreeHash.java"


#line 7
@implementation OrgBouncycastlePqcCryptoXmssBDSTreeHash


#line 19
- (instancetype)initPackagePrivateWithInt:(jint)initialHeight {
  OrgBouncycastlePqcCryptoXmssBDSTreeHash_initPackagePrivateWithInt_(self, initialHeight);
  return self;
}


#line 27
- (void)initialize__WithInt:(jint)nextIndex {
  
#line 29
  tailNode_ = nil;
  height_ = initialHeight_;
  self->nextIndex_ = nextIndex;
  initialized_ = true;
  finished_ = false;
}


#line 36
- (void)updateWithJavaUtilStack:(JavaUtilStack *)stack
withOrgBouncycastlePqcCryptoXmssWOTSPlus:(OrgBouncycastlePqcCryptoXmssWOTSPlus *)wotsPlus
                  withByteArray:(IOSByteArray *)publicSeed
                  withByteArray:(IOSByteArray *)secretSeed
withOrgBouncycastlePqcCryptoXmssOTSHashAddress:(OrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  
#line 38
  if (otsHashAddress == nil) {
    
#line 40
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  if (finished_ || !initialized_) {
    
#line 44
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"finished or not initialized");
  }
  
#line 47
  otsHashAddress = (OrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:
#line 48
  [otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withOTSAddressWithInt:
#line 49
  nextIndex_])) withChainAddressWithInt:[otsHashAddress getChainAddress]])) withHashAddressWithInt:
#line 50
  [otsHashAddress getHashAddress]])) withKeyAndMaskWithInt:[otsHashAddress getKeyAndMask]])) build], [OrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
  
#line 52
  OrgBouncycastlePqcCryptoXmssLTreeAddress *lTreeAddress = (OrgBouncycastlePqcCryptoXmssLTreeAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder_init() withLayerAddressWithInt:
#line 53
  [((OrgBouncycastlePqcCryptoXmssOTSHashAddress *) nil_chk(otsHashAddress)) getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withLTreeAddressWithInt:
#line 54
  nextIndex_])) build], [OrgBouncycastlePqcCryptoXmssLTreeAddress class]);
  OrgBouncycastlePqcCryptoXmssHashTreeAddress *hashTreeAddress = (OrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:
#line 56
  [otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withTreeIndexWithInt:
#line 57
  nextIndex_])) build], [OrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
  
#line 59
  [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus)) importKeysWithByteArray:[wotsPlus getWOTSPlusSecretKeyWithByteArray:secretSeed withOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress] withByteArray:publicSeed];
  OrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters *wotsPlusPublicKey = [wotsPlus getPublicKeyWithOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress];
  OrgBouncycastlePqcCryptoXmssXMSSNode *node = OrgBouncycastlePqcCryptoXmssXMSSNodeUtil_lTreeWithOrgBouncycastlePqcCryptoXmssWOTSPlus_withOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters_withOrgBouncycastlePqcCryptoXmssLTreeAddress_(wotsPlus, wotsPlusPublicKey, lTreeAddress);
  
#line 63
  while (![((JavaUtilStack *) nil_chk(stack)) isEmpty] && [((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk([stack peek])) getHeight] == [((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(node)) getHeight] &&
#line 64
  [((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk([stack peek])) getHeight] != initialHeight_) {
    
#line 66
    hashTreeAddress = (OrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:
#line 67
    [((OrgBouncycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:
#line 68
    [hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:
#line 69
    [hashTreeAddress getTreeHeight]])) withTreeIndexWithInt:JreIntDiv(
#line 70
    ([hashTreeAddress getTreeIndex] - 1), 2)])) withKeyAndMaskWithInt:
#line 71
    [hashTreeAddress getKeyAndMask]])) build], [OrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
    node = OrgBouncycastlePqcCryptoXmssXMSSNodeUtil_randomizeHashWithOrgBouncycastlePqcCryptoXmssWOTSPlus_withOrgBouncycastlePqcCryptoXmssXMSSNode_withOrgBouncycastlePqcCryptoXmssXMSSNode_withOrgBouncycastlePqcCryptoXmssXMSSAddress_(wotsPlus, [stack pop], node, hashTreeAddress);
    node = new_OrgBouncycastlePqcCryptoXmssXMSSNode_initWithInt_withByteArray_([((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(node)) getHeight] + 1, [node getValue]);
    hashTreeAddress = (OrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:
#line 75
    [((OrgBouncycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:
#line 76
    [hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:
#line 77
    [hashTreeAddress getTreeHeight] + 1])) withTreeIndexWithInt:
#line 78
    [hashTreeAddress getTreeIndex]])) withKeyAndMaskWithInt:[hashTreeAddress getKeyAndMask]])) build], [OrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
  }
  
#line 82
  if (tailNode_ == nil) {
    
#line 84
    tailNode_ = node;
  }
  else {
    
#line 88
    if ([tailNode_ getHeight] == [((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(node)) getHeight]) {
      
#line 90
      hashTreeAddress = (OrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:
#line 91
      [((OrgBouncycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:
#line 92
      [hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:
#line 93
      [hashTreeAddress getTreeHeight]])) withTreeIndexWithInt:JreIntDiv(
#line 94
      ([hashTreeAddress getTreeIndex] - 1), 2)])) withKeyAndMaskWithInt:
#line 95
      [hashTreeAddress getKeyAndMask]])) build], [OrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
      node = OrgBouncycastlePqcCryptoXmssXMSSNodeUtil_randomizeHashWithOrgBouncycastlePqcCryptoXmssWOTSPlus_withOrgBouncycastlePqcCryptoXmssXMSSNode_withOrgBouncycastlePqcCryptoXmssXMSSNode_withOrgBouncycastlePqcCryptoXmssXMSSAddress_(wotsPlus, tailNode_, node, hashTreeAddress);
      node = new_OrgBouncycastlePqcCryptoXmssXMSSNode_initWithInt_withByteArray_([((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(tailNode_)) getHeight] + 1, [((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(node)) getValue]);
      tailNode_ = node;
      hashTreeAddress = (OrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:
#line 100
      [((OrgBouncycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:
#line 101
      [hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:
#line 102
      [hashTreeAddress getTreeHeight] + 1])) withTreeIndexWithInt:
#line 103
      [hashTreeAddress getTreeIndex]])) withKeyAndMaskWithInt:
#line 104
      [hashTreeAddress getKeyAndMask]])) build], [OrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
    }
    else {
      
#line 108
      (void) [stack pushWithId:node];
    }
  }
  
#line 112
  if ([((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(tailNode_)) getHeight] == initialHeight_) {
    
#line 114
    finished_ = true;
  }
  else {
    
#line 118
    height_ = [((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(node)) getHeight];
    nextIndex_++;
  }
}


#line 123
- (jint)getHeight {
  
#line 125
  if (!initialized_ || finished_) {
    
#line 127
    return JavaLangInteger_MAX_VALUE;
  }
  return height_;
}


#line 132
- (jint)getIndexLeaf {
  
#line 134
  return nextIndex_;
}


#line 137
- (void)setNodeWithOrgBouncycastlePqcCryptoXmssXMSSNode:(OrgBouncycastlePqcCryptoXmssXMSSNode *)node {
  
#line 139
  tailNode_ = node;
  height_ = [((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(node)) getHeight];
  if (height_ == initialHeight_) {
    
#line 143
    finished_ = true;
  }
}


#line 147
- (jboolean)isFinished {
  
#line 149
  return finished_;
}


#line 152
- (jboolean)isInitialized {
  
#line 154
  return initialized_;
}


#line 157
- (OrgBouncycastlePqcCryptoXmssXMSSNode *)getTailNode {
  
#line 159
  return tailNode_;
}


#line 162
- (OrgBouncycastlePqcCryptoXmssBDSTreeHash *)java_clone {
  
#line 165
  OrgBouncycastlePqcCryptoXmssBDSTreeHash *th = new_OrgBouncycastlePqcCryptoXmssBDSTreeHash_initPackagePrivateWithInt_(self->initialHeight_);
  
#line 167
  th->tailNode_ = self->tailNode_;
  th->height_ = self->height_;
  th->nextIndex_ = self->nextIndex_;
  th->initialized_ = self->initialized_;
  th->finished_ = self->finished_;
  
#line 173
  return th;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, 4, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssBDSTreeHash;", 0x4, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithInt:);
  methods[1].selector = @selector(initialize__WithInt:);
  methods[2].selector = @selector(updateWithJavaUtilStack:withOrgBouncycastlePqcCryptoXmssWOTSPlus:withByteArray:withByteArray:withOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[3].selector = @selector(getHeight);
  methods[4].selector = @selector(getIndexLeaf);
  methods[5].selector = @selector(setNodeWithOrgBouncycastlePqcCryptoXmssXMSSNode:);
  methods[6].selector = @selector(isFinished);
  methods[7].selector = @selector(isInitialized);
  methods[8].selector = @selector(getTailNode);
  methods[9].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgBouncycastlePqcCryptoXmssBDSTreeHash_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "tailNode_", "LOrgBouncycastlePqcCryptoXmssXMSSNode;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialHeight_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "height_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "finished_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "initialize", "update", "LJavaUtilStack;LOrgBouncycastlePqcCryptoXmssWOTSPlus;[B[BLOrgBouncycastlePqcCryptoXmssOTSHashAddress;", "(Ljava/util/Stack<Lorg/bouncycastle/pqc/crypto/xmss/XMSSNode;>;Lorg/bouncycastle/pqc/crypto/xmss/WOTSPlus;[B[BLorg/bouncycastle/pqc/crypto/xmss/OTSHashAddress;)V", "setNode", "LOrgBouncycastlePqcCryptoXmssXMSSNode;", "clone" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoXmssBDSTreeHash = { "BDSTreeHash", "org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x0, 10, 7, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoXmssBDSTreeHash;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end


#line 19
void OrgBouncycastlePqcCryptoXmssBDSTreeHash_initPackagePrivateWithInt_(OrgBouncycastlePqcCryptoXmssBDSTreeHash *self, jint initialHeight) {
  NSObject_init(self);
  
#line 22
  self->initialHeight_ = initialHeight;
  self->initialized_ = false;
  self->finished_ = false;
}


#line 19
OrgBouncycastlePqcCryptoXmssBDSTreeHash *new_OrgBouncycastlePqcCryptoXmssBDSTreeHash_initPackagePrivateWithInt_(jint initialHeight) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssBDSTreeHash, initPackagePrivateWithInt_, initialHeight)
}


#line 19
OrgBouncycastlePqcCryptoXmssBDSTreeHash *create_OrgBouncycastlePqcCryptoXmssBDSTreeHash_initPackagePrivateWithInt_(jint initialHeight) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssBDSTreeHash, initPackagePrivateWithInt_, initialHeight)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoXmssBDSTreeHash)
