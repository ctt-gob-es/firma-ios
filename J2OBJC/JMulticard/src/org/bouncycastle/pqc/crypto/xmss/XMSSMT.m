//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSMT.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlus.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMT.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTKeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTKeyPairGenerator.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTSigner.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSParameters.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/xmss/XMSSMT must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoXmssXMSSMT () {
 @public
  OrgBouncycastlePqcCryptoXmssXMSSMTParameters *params_;
  OrgBouncycastlePqcCryptoXmssXMSSParameters *xmssParams_;
  JavaSecuritySecureRandom *prng_;
  OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *privateKey_;
  OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *publicKey_;
}

- (void)importStateWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters:(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *)privateKey
                    withOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters:(OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *)publicKey;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMT, params_, OrgBouncycastlePqcCryptoXmssXMSSMTParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMT, xmssParams_, OrgBouncycastlePqcCryptoXmssXMSSParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMT, prng_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMT, privateKey_, OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMT, publicKey_, OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *)

__attribute__((unused)) static void OrgBouncycastlePqcCryptoXmssXMSSMT_importStateWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_withOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters_(OrgBouncycastlePqcCryptoXmssXMSSMT *self, OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *privateKey, OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *publicKey);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSMT.java"


#line 12
@implementation OrgBouncycastlePqcCryptoXmssXMSSMT


#line 26
- (instancetype)initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters:(OrgBouncycastlePqcCryptoXmssXMSSMTParameters *)params
                                        withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)prng {
  OrgBouncycastlePqcCryptoXmssXMSSMT_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_withJavaSecuritySecureRandom_(self, params, prng);
  return self;
}


#line 44
- (void)generateKeys {
  
#line 46
  OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator *kpGen = new_OrgBouncycastlePqcCryptoXmssXMSSMTKeyPairGenerator_init();
  
#line 48
  [kpGen init__WithOrgBouncycastleCryptoKeyGenerationParameters:new_OrgBouncycastlePqcCryptoXmssXMSSMTKeyGenerationParameters_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_withJavaSecuritySecureRandom_([self getParams], prng_)];
  
#line 50
  OrgBouncycastleCryptoAsymmetricCipherKeyPair *kp = [kpGen generateKeyPair];
  
#line 52
  privateKey_ = (OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) cast_chk([((OrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(kp)) getPrivate], [OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters class]);
  publicKey_ = (OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *) cast_chk([kp getPublic], [OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters class]);
  
#line 55
  OrgBouncycastlePqcCryptoXmssXMSSMT_importStateWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_withOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters_(self, privateKey_, publicKey_);
}


#line 58
- (void)importStateWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters:(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *)privateKey
                    withOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters:(OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *)publicKey {
  OrgBouncycastlePqcCryptoXmssXMSSMT_importStateWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_withOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters_(self, privateKey, publicKey);
}


#line 73
- (void)importStateWithByteArray:(IOSByteArray *)privateKey
                   withByteArray:(IOSByteArray *)publicKey {
  if (privateKey == nil) {
    
#line 77
    @throw new_JavaLangNullPointerException_initWithNSString_(@"privateKey == null");
  }
  if (publicKey == nil) {
    
#line 81
    @throw new_JavaLangNullPointerException_initWithNSString_(@"publicKey == null");
  }
  OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *xmssMTPrivateKey = [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(params_) withPrivateKeyWithByteArray:
#line 84
  privateKey])) build];
  OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *xmssMTPublicKey = [((OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(params_) withPublicKeyWithByteArray:
#line 86
  publicKey])) build];
  if (!OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_([((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(xmssMTPrivateKey)) getRoot], [((OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *) nil_chk(xmssMTPublicKey)) getRoot])) {
    
#line 89
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"root of private key and public key do not match");
  }
  if (!OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_([xmssMTPrivateKey getPublicSeed], [xmssMTPublicKey getPublicSeed])) {
    
#line 93
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"public seed of private key and public key do not match");
  }
  
#line 97
  [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(xmssParams_)) getWOTSPlus])) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getTreeDigestSize]] withByteArray:[xmssMTPrivateKey getPublicSeed]];
  
#line 99
  self->privateKey_ = xmssMTPrivateKey;
  self->publicKey_ = xmssMTPublicKey;
}


#line 109
- (IOSByteArray *)signWithByteArray:(IOSByteArray *)message {
  
#line 111
  if (message == nil) {
    
#line 113
    @throw new_JavaLangNullPointerException_initWithNSString_(@"message == null");
  }
  
#line 116
  OrgBouncycastlePqcCryptoXmssXMSSMTSigner *signer = new_OrgBouncycastlePqcCryptoXmssXMSSMTSigner_init();
  
#line 118
  [signer init__WithBoolean:true withOrgBouncycastleCryptoCipherParameters:privateKey_];
  
#line 120
  IOSByteArray *signature = [signer generateSignatureWithByteArray:message];
  
#line 122
  privateKey_ = (OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) cast_chk([signer getUpdatedPrivateKey], [OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters class]);
  
#line 124
  OrgBouncycastlePqcCryptoXmssXMSSMT_importStateWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_withOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters_(self, privateKey_, publicKey_);
  
#line 126
  return signature;
}


#line 138
- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                           withByteArray:(IOSByteArray *)signature
                           withByteArray:(IOSByteArray *)publicKey {
  if (message == nil) {
    
#line 143
    @throw new_JavaLangNullPointerException_initWithNSString_(@"message == null");
  }
  if (signature == nil) {
    
#line 147
    @throw new_JavaLangNullPointerException_initWithNSString_(@"signature == null");
  }
  if (publicKey == nil) {
    
#line 151
    @throw new_JavaLangNullPointerException_initWithNSString_(@"publicKey == null");
  }
  
#line 154
  OrgBouncycastlePqcCryptoXmssXMSSMTSigner *signer = new_OrgBouncycastlePqcCryptoXmssXMSSMTSigner_init();
  
#line 156
  [signer init__WithBoolean:false withOrgBouncycastleCryptoCipherParameters:[((OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_([self getParams]) withPublicKeyWithByteArray:publicKey])) build]];
  
#line 158
  return [signer verifySignatureWithByteArray:message withByteArray:signature];
}


#line 166
- (IOSByteArray *)exportPrivateKey {
  
#line 168
  return [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) toByteArray];
}


#line 176
- (IOSByteArray *)exportPublicKey {
  
#line 178
  return [((OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *) nil_chk(publicKey_)) toByteArray];
}


#line 186
- (OrgBouncycastlePqcCryptoXmssXMSSMTParameters *)getParams {
  
#line 188
  return params_;
}


#line 197
- (IOSByteArray *)getPublicSeed {
  
#line 199
  return [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getPublicSeed];
}


#line 202
- (OrgBouncycastlePqcCryptoXmssXMSSParameters *)getXMSS {
  
#line 204
  return xmssParams_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSMTParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSParameters;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters:withJavaSecuritySecureRandom:);
  methods[1].selector = @selector(generateKeys);
  methods[2].selector = @selector(importStateWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters:withOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters:);
  methods[3].selector = @selector(importStateWithByteArray:withByteArray:);
  methods[4].selector = @selector(signWithByteArray:);
  methods[5].selector = @selector(verifySignatureWithByteArray:withByteArray:withByteArray:);
  methods[6].selector = @selector(exportPrivateKey);
  methods[7].selector = @selector(exportPublicKey);
  methods[8].selector = @selector(getParams);
  methods[9].selector = @selector(getPublicSeed);
  methods[10].selector = @selector(getXMSS);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LOrgBouncycastlePqcCryptoXmssXMSSMTParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "xmssParams_", "LOrgBouncycastlePqcCryptoXmssXMSSParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prng_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "privateKey_", "LOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicKey_", "LOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcCryptoXmssXMSSMTParameters;LJavaSecuritySecureRandom;", "importState", "LOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters;LOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters;", "[B[B", "sign", "[B", "verifySignature", "[B[B[B", "LJavaTextParseException;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoXmssXMSSMT = { "XMSSMT", "org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x11, 11, 5, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoXmssXMSSMT;
}

@end


#line 26
void OrgBouncycastlePqcCryptoXmssXMSSMT_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_withJavaSecuritySecureRandom_(OrgBouncycastlePqcCryptoXmssXMSSMT *self, OrgBouncycastlePqcCryptoXmssXMSSMTParameters *params, JavaSecuritySecureRandom *prng) {
  NSObject_init(self);
  
#line 29
  if (params == nil) {
    
#line 31
    @throw new_JavaLangNullPointerException_initWithNSString_(@"params == null");
  }
  self->params_ = params;
  self->xmssParams_ = [params getXMSSParameters];
  self->prng_ = prng;
  
#line 37
  self->privateKey_ = [new_OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(params) build];
  self->publicKey_ = [new_OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(params) build];
}


#line 26
OrgBouncycastlePqcCryptoXmssXMSSMT *new_OrgBouncycastlePqcCryptoXmssXMSSMT_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_withJavaSecuritySecureRandom_(OrgBouncycastlePqcCryptoXmssXMSSMTParameters *params, JavaSecuritySecureRandom *prng) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssXMSSMT, initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_withJavaSecuritySecureRandom_, params, prng)
}


#line 26
OrgBouncycastlePqcCryptoXmssXMSSMT *create_OrgBouncycastlePqcCryptoXmssXMSSMT_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_withJavaSecuritySecureRandom_(OrgBouncycastlePqcCryptoXmssXMSSMTParameters *params, JavaSecuritySecureRandom *prng) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssXMSSMT, initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_withJavaSecuritySecureRandom_, params, prng)
}


#line 58
void OrgBouncycastlePqcCryptoXmssXMSSMT_importStateWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_withOrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters_(OrgBouncycastlePqcCryptoXmssXMSSMT *self, OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *privateKey, OrgBouncycastlePqcCryptoXmssXMSSMTPublicKeyParameters *publicKey) {
  
#line 61
  [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(self->xmssParams_)) getWOTSPlus])) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(self->params_)) getTreeDigestSize]] withByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(self->privateKey_)) getPublicSeed]];
  
#line 63
  self->privateKey_ = privateKey;
  self->publicKey_ = publicKey;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoXmssXMSSMT)
