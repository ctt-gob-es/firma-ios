//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSVerifierUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/util/List.h"
#include "org/bouncycastle/pqc/crypto/xmss/HashTreeAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/LTreeAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/OTSHashAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlus.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlusParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlusPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlusSignature.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSNode.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSNodeUtil.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSReducedSignature.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSVerifierUtil.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/xmss/XMSSVerifierUtil must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSVerifierUtil.java"


#line 3
@implementation OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil


#line 3
- (instancetype)initPackagePrivate {
  OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_initPackagePrivate(self);
  return self;
}


#line 12
+ (OrgBouncycastlePqcCryptoXmssXMSSNode *)getRootNodeFromSignatureWithOrgBouncycastlePqcCryptoXmssWOTSPlus:(OrgBouncycastlePqcCryptoXmssWOTSPlus *)wotsPlus
                                                                                                   withInt:(jint)height
                                                                                             withByteArray:(IOSByteArray *)messageDigest
                                                      withOrgBouncycastlePqcCryptoXmssXMSSReducedSignature:(OrgBouncycastlePqcCryptoXmssXMSSReducedSignature *)signature
                                                            withOrgBouncycastlePqcCryptoXmssOTSHashAddress:(OrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress
                                                                                                   withInt:(jint)indexLeaf {
  return OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_getRootNodeFromSignatureWithOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withByteArray_withOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_(wotsPlus, height, messageDigest, signature, otsHashAddress, indexLeaf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSNode;", 0x8, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(getRootNodeFromSignatureWithOrgBouncycastlePqcCryptoXmssWOTSPlus:withInt:withByteArray:withOrgBouncycastlePqcCryptoXmssXMSSReducedSignature:withOrgBouncycastlePqcCryptoXmssOTSHashAddress:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getRootNodeFromSignature", "LOrgBouncycastlePqcCryptoXmssWOTSPlus;I[BLOrgBouncycastlePqcCryptoXmssXMSSReducedSignature;LOrgBouncycastlePqcCryptoXmssOTSHashAddress;I" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil = { "XMSSVerifierUtil", "org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, NULL, 7, 0x0, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil;
}

@end


#line 3
void OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_initPackagePrivate(OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil *self) {
  NSObject_init(self);
}


#line 3
OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil *new_OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil, initPackagePrivate)
}


#line 3
OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil *create_OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil, initPackagePrivate)
}


#line 12
OrgBouncycastlePqcCryptoXmssXMSSNode *OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_getRootNodeFromSignatureWithOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withByteArray_withOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_(OrgBouncycastlePqcCryptoXmssWOTSPlus *wotsPlus, jint height, IOSByteArray *messageDigest, OrgBouncycastlePqcCryptoXmssXMSSReducedSignature *signature, OrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress, jint indexLeaf) {
  OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_initialize();
  
#line 15
  if (((IOSByteArray *) nil_chk(messageDigest))->size_ != [((OrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk([((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus)) getParams])) getTreeDigestSize]) {
    
#line 17
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of messageDigest needs to be equal to size of digest");
  }
  if (signature == nil) {
    
#line 21
    @throw new_JavaLangNullPointerException_initWithNSString_(@"signature == null");
  }
  if (otsHashAddress == nil) {
    
#line 25
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  
#line 29
  OrgBouncycastlePqcCryptoXmssLTreeAddress *lTreeAddress = (OrgBouncycastlePqcCryptoXmssLTreeAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssLTreeAddress_Builder_init() withLayerAddressWithInt:
#line 30
  [otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withLTreeAddressWithInt:
#line 31
  [otsHashAddress getOTSAddress]])) build], [OrgBouncycastlePqcCryptoXmssLTreeAddress class]);
  OrgBouncycastlePqcCryptoXmssHashTreeAddress *hashTreeAddress = (OrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:
#line 33
  [otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withTreeIndexWithInt:
#line 34
  [otsHashAddress getOTSAddress]])) build], [OrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
  
#line 38
  OrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters *wotsPlusPK = [wotsPlus getPublicKeyFromSignatureWithByteArray:messageDigest withOrgBouncycastlePqcCryptoXmssWOTSPlusSignature:
#line 39
  [signature getWOTSPlusSignature] withOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress];
  IOSObjectArray *node = [IOSObjectArray newArrayWithLength:2 type:OrgBouncycastlePqcCryptoXmssXMSSNode_class_()];
  (void) IOSObjectArray_Set(node, 0, OrgBouncycastlePqcCryptoXmssXMSSNodeUtil_lTreeWithOrgBouncycastlePqcCryptoXmssWOTSPlus_withOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters_withOrgBouncycastlePqcCryptoXmssLTreeAddress_(wotsPlus, wotsPlusPK, lTreeAddress));
  
#line 43
  for (jint k = 0; k < height; k++) {
    
#line 45
    hashTreeAddress = (OrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:
#line 46
    [((OrgBouncycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:
#line 47
    [hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:k])) withTreeIndexWithInt:
#line 48
    [hashTreeAddress getTreeIndex]])) withKeyAndMaskWithInt:[hashTreeAddress getKeyAndMask]])) build], [OrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
    
#line 50
    if (fmod(JavaLangMath_floorWithDouble_(JreIntDiv(indexLeaf, (JreLShift32(1, k)))), 2) == 0) {
      
#line 52
      hashTreeAddress = (OrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:
#line 53
      [((OrgBouncycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:
#line 54
      [hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:
#line 55
      [hashTreeAddress getTreeHeight]])) withTreeIndexWithInt:JreIntDiv(
#line 56
      [hashTreeAddress getTreeIndex], 2)])) withKeyAndMaskWithInt:
#line 57
      [hashTreeAddress getKeyAndMask]])) build], [OrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
      (void) IOSObjectArray_Set(node, 1, OrgBouncycastlePqcCryptoXmssXMSSNodeUtil_randomizeHashWithOrgBouncycastlePqcCryptoXmssWOTSPlus_withOrgBouncycastlePqcCryptoXmssXMSSNode_withOrgBouncycastlePqcCryptoXmssXMSSNode_withOrgBouncycastlePqcCryptoXmssXMSSAddress_(wotsPlus, IOSObjectArray_Get(node, 0), [((id<JavaUtilList>) nil_chk([signature getAuthPath])) getWithInt:k], hashTreeAddress));
      (void) IOSObjectArray_SetAndConsume(node, 1, new_OrgBouncycastlePqcCryptoXmssXMSSNode_initWithInt_withByteArray_([((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(IOSObjectArray_Get(node, 1))) getHeight] + 1, [((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(IOSObjectArray_Get(node, 1))) getValue]));
    }
    else {
      
#line 63
      hashTreeAddress = (OrgBouncycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:
#line 64
      [((OrgBouncycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:
#line 65
      [hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:
#line 66
      [hashTreeAddress getTreeHeight]])) withTreeIndexWithInt:JreIntDiv(
#line 67
      ([hashTreeAddress getTreeIndex] - 1), 2)])) withKeyAndMaskWithInt:
#line 68
      [hashTreeAddress getKeyAndMask]])) build], [OrgBouncycastlePqcCryptoXmssHashTreeAddress class]);
      (void) IOSObjectArray_Set(node, 1, OrgBouncycastlePqcCryptoXmssXMSSNodeUtil_randomizeHashWithOrgBouncycastlePqcCryptoXmssWOTSPlus_withOrgBouncycastlePqcCryptoXmssXMSSNode_withOrgBouncycastlePqcCryptoXmssXMSSNode_withOrgBouncycastlePqcCryptoXmssXMSSAddress_(wotsPlus, [((id<JavaUtilList>) nil_chk([signature getAuthPath])) getWithInt:k], IOSObjectArray_Get(node, 0), hashTreeAddress));
      (void) IOSObjectArray_SetAndConsume(node, 1, new_OrgBouncycastlePqcCryptoXmssXMSSNode_initWithInt_withByteArray_([((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(IOSObjectArray_Get(node, 1))) getHeight] + 1, [((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(IOSObjectArray_Get(node, 1))) getValue]));
    }
    (void) IOSObjectArray_Set(node, 0, IOSObjectArray_Get(node, 1));
  }
  return IOSObjectArray_Get(node, 0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil)
