//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InvalidClassException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/ObjectStreamClass.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "org/bouncycastle/crypto/Digest.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSUtil.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/encoders/Hex.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/xmss/XMSSUtil must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream : JavaIoObjectInputStream {
 @public
  IOSClass *mainClass_;
  jboolean found_;
}

- (instancetype)initWithIOSClass:(IOSClass *)mainClass
           withJavaIoInputStream:(JavaIoInputStream *)inArg;

- (IOSClass *)resolveClassWithJavaIoObjectStreamClass:(JavaIoObjectStreamClass *)desc;

@end

J2OBJC_STATIC_INIT(OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream)

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream, mainClass_, IOSClass *)

inline id<JavaUtilSet> OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_get_components(void);
static id<JavaUtilSet> OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_components;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream, components, id<JavaUtilSet>)

__attribute__((unused)) static void OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_initWithIOSClass_withJavaIoInputStream_(OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream *self, IOSClass *mainClass, JavaIoInputStream *inArg);

__attribute__((unused)) static OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream *new_OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_initWithIOSClass_withJavaIoInputStream_(IOSClass *mainClass, JavaIoInputStream *inArg) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream *create_OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_initWithIOSClass_withJavaIoInputStream_(IOSClass *mainClass, JavaIoInputStream *inArg);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java"


#line 21
@implementation OrgBouncycastlePqcCryptoXmssXMSSUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 21
- (instancetype)init {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 30
+ (jint)log2WithInt:(jint)n {
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_log2WithInt_(n);
}


#line 47
+ (IOSByteArray *)toBytesBigEndianWithLong:(jlong)value
                                   withInt:(jint)sizeInByte {
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(value, sizeInByte);
}


#line 61
+ (void)longToBigEndianWithLong:(jlong)value
                  withByteArray:(IOSByteArray *)inArg
                        withInt:(jint)offset {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_longToBigEndianWithLong_withByteArray_withInt_(value, inArg, offset);
}


#line 84
+ (jlong)bytesToXBigEndianWithByteArray:(IOSByteArray *)inArg
                                withInt:(jint)offset
                                withInt:(jint)size {
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_bytesToXBigEndianWithByteArray_withInt_withInt_(inArg, offset, size);
}


#line 104
+ (IOSByteArray *)cloneArrayWithByteArray:(IOSByteArray *)inArg {
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_cloneArrayWithByteArray_(inArg);
}


#line 121
+ (IOSObjectArray *)cloneArrayWithByteArray2:(IOSObjectArray *)inArg {
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_cloneArrayWithByteArray2_(inArg);
}


#line 143
+ (jboolean)areEqualWithByteArray2:(IOSObjectArray *)a
                    withByteArray2:(IOSObjectArray *)b {
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_areEqualWithByteArray2_withByteArray2_(a, b);
}


#line 164
+ (void)dumpByteArrayWithByteArray2:(IOSObjectArray *)x {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_dumpByteArrayWithByteArray2_(x);
}


#line 184
+ (jboolean)hasNullPointerWithByteArray2:(IOSObjectArray *)inArg {
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_hasNullPointerWithByteArray2_(inArg);
}


#line 207
+ (void)copyBytesAtOffsetWithByteArray:(IOSByteArray *)dst
                         withByteArray:(IOSByteArray *)src
                               withInt:(jint)offset {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_copyBytesAtOffsetWithByteArray_withByteArray_withInt_(dst, src, offset);
}


#line 239
+ (IOSByteArray *)extractBytesAtOffsetWithByteArray:(IOSByteArray *)src
                                            withInt:(jint)offset
                                            withInt:(jint)length {
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_extractBytesAtOffsetWithByteArray_withInt_withInt_(src, offset, length);
}


#line 272
+ (jboolean)isIndexValidWithInt:(jint)height
                       withLong:(jlong)index {
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_isIndexValidWithInt_withLong_(height, index);
}


#line 287
+ (jint)getDigestSizeWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)digest {
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_getDigestSizeWithOrgBouncycastleCryptoDigest_(digest);
}


#line 305
+ (jlong)getTreeIndexWithLong:(jlong)index
                      withInt:(jint)xmssTreeHeight {
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_getTreeIndexWithLong_withInt_(index, xmssTreeHeight);
}

+ (jint)getLeafIndexWithLong:(jlong)index
                     withInt:(jint)xmssTreeHeight {
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(index, xmssTreeHeight);
}

+ (IOSByteArray *)serializeWithId:(id)obj {
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_serializeWithId_(obj);
}


#line 325
+ (id)deserializeWithByteArray:(IOSByteArray *)data
                  withIOSClass:(IOSClass *)clazz {
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_deserializeWithByteArray_withIOSClass_(data, clazz);
}


#line 348
+ (jint)calculateTauWithInt:(jint)index
                    withInt:(jint)height {
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_calculateTauWithInt_withInt_(index, height);
}


#line 362
+ (jboolean)isNewBDSInitNeededWithLong:(jlong)globalIndex
                               withInt:(jint)xmssHeight
                               withInt:(jint)layer {
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_isNewBDSInitNeededWithLong_withInt_withInt_(globalIndex, xmssHeight, layer);
}


#line 371
+ (jboolean)isNewAuthenticationPathNeededWithLong:(jlong)globalIndex
                                          withInt:(jint)xmssHeight
                                          withInt:(jint)layer {
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_isNewAuthenticationPathNeededWithLong_withInt_withInt_(globalIndex, xmssHeight, layer);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "[[B", 0x9, 8, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 14, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 16, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 17, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 20, 21, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 22, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 23, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 24, 25, 26, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 27, 28, 29, -1, -1, -1 },
    { NULL, "I", 0x9, 30, 31, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 32, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 34, 33, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(log2WithInt:);
  methods[2].selector = @selector(toBytesBigEndianWithLong:withInt:);
  methods[3].selector = @selector(longToBigEndianWithLong:withByteArray:withInt:);
  methods[4].selector = @selector(bytesToXBigEndianWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(cloneArrayWithByteArray:);
  methods[6].selector = @selector(cloneArrayWithByteArray2:);
  methods[7].selector = @selector(areEqualWithByteArray2:withByteArray2:);
  methods[8].selector = @selector(dumpByteArrayWithByteArray2:);
  methods[9].selector = @selector(hasNullPointerWithByteArray2:);
  methods[10].selector = @selector(copyBytesAtOffsetWithByteArray:withByteArray:withInt:);
  methods[11].selector = @selector(extractBytesAtOffsetWithByteArray:withInt:withInt:);
  methods[12].selector = @selector(isIndexValidWithInt:withLong:);
  methods[13].selector = @selector(getDigestSizeWithOrgBouncycastleCryptoDigest:);
  methods[14].selector = @selector(getTreeIndexWithLong:withInt:);
  methods[15].selector = @selector(getLeafIndexWithLong:withInt:);
  methods[16].selector = @selector(serializeWithId:);
  methods[17].selector = @selector(deserializeWithByteArray:withIOSClass:);
  methods[18].selector = @selector(calculateTauWithInt:withInt:);
  methods[19].selector = @selector(isNewBDSInitNeededWithLong:withInt:withInt:);
  methods[20].selector = @selector(isNewAuthenticationPathNeededWithLong:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "log2", "I", "toBytesBigEndian", "JI", "longToBigEndian", "J[BI", "bytesToXBigEndian", "[BII", "cloneArray", "[B", "[[B", "areEqual", "[[B[[B", "dumpByteArray", "hasNullPointer", "copyBytesAtOffset", "[B[BI", "extractBytesAtOffset", "isIndexValid", "IJ", "getDigestSize", "LOrgBouncycastleCryptoDigest;", "getTreeIndex", "getLeafIndex", "serialize", "LNSObject;", "LJavaIoIOException;", "deserialize", "[BLIOSClass;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "calculateTau", "II", "isNewBDSInitNeeded", "JII", "isNewAuthenticationPathNeeded", "LOrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoXmssXMSSUtil = { "XMSSUtil", "org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, NULL, 7, 0x1, 21, 0, -1, 35, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoXmssXMSSUtil;
}

@end


#line 21
void OrgBouncycastlePqcCryptoXmssXMSSUtil_init(OrgBouncycastlePqcCryptoXmssXMSSUtil *self) {
  NSObject_init(self);
}


#line 21
OrgBouncycastlePqcCryptoXmssXMSSUtil *new_OrgBouncycastlePqcCryptoXmssXMSSUtil_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssXMSSUtil, init)
}


#line 21
OrgBouncycastlePqcCryptoXmssXMSSUtil *create_OrgBouncycastlePqcCryptoXmssXMSSUtil_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssXMSSUtil, init)
}


#line 30
jint OrgBouncycastlePqcCryptoXmssXMSSUtil_log2WithInt_(jint n) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  jint log = 0;
  while ((JreRShiftAssignInt(&n, 1)) != 0) {
    
#line 35
    log++;
  }
  return log;
}


#line 47
IOSByteArray *OrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(jlong value, jint sizeInByte) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  IOSByteArray *out = [IOSByteArray newArrayWithLength:sizeInByte];
  for (jint i = (sizeInByte - 1); i >= 0; i--) {
    
#line 52
    *IOSByteArray_GetRef(out, i) = (jbyte) value;
    JreURShiftAssignLong(&value, 8);
  }
  return out;
}


#line 61
void OrgBouncycastlePqcCryptoXmssXMSSUtil_longToBigEndianWithLong_withByteArray_withInt_(jlong value, IOSByteArray *inArg, jint offset) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  if (inArg == nil) {
    
#line 65
    @throw new_JavaLangNullPointerException_initWithNSString_(@"in == null");
  }
  if ((inArg->size_ - offset) < 8) {
    
#line 69
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"not enough space in array");
  }
  *IOSByteArray_GetRef(inArg, offset) = (jbyte) ((JreRShift64(value, 56)) & (jint) 0xff);
  *IOSByteArray_GetRef(inArg, offset + 1) = (jbyte) ((JreRShift64(value, 48)) & (jint) 0xff);
  *IOSByteArray_GetRef(inArg, offset + 2) = (jbyte) ((JreRShift64(value, 40)) & (jint) 0xff);
  *IOSByteArray_GetRef(inArg, offset + 3) = (jbyte) ((JreRShift64(value, 32)) & (jint) 0xff);
  *IOSByteArray_GetRef(inArg, offset + 4) = (jbyte) ((JreRShift64(value, 24)) & (jint) 0xff);
  *IOSByteArray_GetRef(inArg, offset + 5) = (jbyte) ((JreRShift64(value, 16)) & (jint) 0xff);
  *IOSByteArray_GetRef(inArg, offset + 6) = (jbyte) ((JreRShift64(value, 8)) & (jint) 0xff);
  *IOSByteArray_GetRef(inArg, offset + 7) = (jbyte) ((value) & (jint) 0xff);
}


#line 84
jlong OrgBouncycastlePqcCryptoXmssXMSSUtil_bytesToXBigEndianWithByteArray_withInt_withInt_(IOSByteArray *inArg, jint offset, jint size) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  if (inArg == nil) {
    
#line 88
    @throw new_JavaLangNullPointerException_initWithNSString_(@"in == null");
  }
  jlong res = 0;
  for (jint i = offset; i < (offset + size); i++) {
    
#line 93
    res = (JreLShift64(res, 8)) | (IOSByteArray_Get(inArg, i) & (jint) 0xff);
  }
  return res;
}


#line 104
IOSByteArray *OrgBouncycastlePqcCryptoXmssXMSSUtil_cloneArrayWithByteArray_(IOSByteArray *inArg) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  if (inArg == nil) {
    
#line 108
    @throw new_JavaLangNullPointerException_initWithNSString_(@"in == null");
  }
  IOSByteArray *out = [IOSByteArray newArrayWithLength:inArg->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, 0, out, 0, inArg->size_);
  return out;
}


#line 121
IOSObjectArray *OrgBouncycastlePqcCryptoXmssXMSSUtil_cloneArrayWithByteArray2_(IOSObjectArray *inArg) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  if (OrgBouncycastlePqcCryptoXmssXMSSUtil_hasNullPointerWithByteArray2_(inArg)) {
    
#line 125
    @throw new_JavaLangNullPointerException_initWithNSString_(@"in has null pointers");
  }
  IOSObjectArray *out = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(inArg))->size_ type:IOSClass_byteArray(1)];
  for (jint i = 0; i < inArg->size_; i++) {
    
#line 130
    (void) IOSObjectArray_SetAndConsume(out, i, [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(IOSObjectArray_Get(inArg, i)))->size_]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(inArg, i), 0, IOSObjectArray_Get(out, i), 0, ((IOSByteArray *) nil_chk(IOSObjectArray_Get(inArg, i)))->size_);
  }
  return out;
}


#line 143
jboolean OrgBouncycastlePqcCryptoXmssXMSSUtil_areEqualWithByteArray2_withByteArray2_(IOSObjectArray *a, IOSObjectArray *b) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  if (OrgBouncycastlePqcCryptoXmssXMSSUtil_hasNullPointerWithByteArray2_(a) || OrgBouncycastlePqcCryptoXmssXMSSUtil_hasNullPointerWithByteArray2_(b)) {
    
#line 147
    @throw new_JavaLangNullPointerException_initWithNSString_(@"a or b == null");
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(a))->size_; i++) {
    
#line 151
    if (!OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(IOSObjectArray_Get(a, i), IOSObjectArray_Get(nil_chk(b), i))) {
      
#line 153
      return false;
    }
  }
  return true;
}


#line 164
void OrgBouncycastlePqcCryptoXmssXMSSUtil_dumpByteArrayWithByteArray2_(IOSObjectArray *x) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  if (OrgBouncycastlePqcCryptoXmssXMSSUtil_hasNullPointerWithByteArray2_(x)) {
    
#line 168
    @throw new_JavaLangNullPointerException_initWithNSString_(@"x has null pointers");
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(x))->size_; i++) {
    
#line 174
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:OrgBouncycastleUtilEncodersHex_toHexStringWithByteArray_(IOSObjectArray_Get(x, i))];
  }
}


#line 184
jboolean OrgBouncycastlePqcCryptoXmssXMSSUtil_hasNullPointerWithByteArray2_(IOSObjectArray *inArg) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  if (inArg == nil) {
    
#line 188
    return true;
  }
  for (jint i = 0; i < inArg->size_; i++) {
    
#line 192
    if (IOSObjectArray_Get(inArg, i) == nil) {
      
#line 194
      return true;
    }
  }
  return false;
}


#line 207
void OrgBouncycastlePqcCryptoXmssXMSSUtil_copyBytesAtOffsetWithByteArray_withByteArray_withInt_(IOSByteArray *dst, IOSByteArray *src, jint offset) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  if (dst == nil) {
    
#line 211
    @throw new_JavaLangNullPointerException_initWithNSString_(@"dst == null");
  }
  if (src == nil) {
    
#line 215
    @throw new_JavaLangNullPointerException_initWithNSString_(@"src == null");
  }
  if (offset < 0) {
    
#line 219
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"offset hast to be >= 0");
  }
  if ((src->size_ + offset) > dst->size_) {
    
#line 223
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"src length + offset must not be greater than size of destination");
  }
  for (jint i = 0; i < src->size_; i++) {
    
#line 227
    *IOSByteArray_GetRef(dst, offset + i) = IOSByteArray_Get(src, i);
  }
}


#line 239
IOSByteArray *OrgBouncycastlePqcCryptoXmssXMSSUtil_extractBytesAtOffsetWithByteArray_withInt_withInt_(IOSByteArray *src, jint offset, jint length) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  if (src == nil) {
    
#line 243
    @throw new_JavaLangNullPointerException_initWithNSString_(@"src == null");
  }
  if (offset < 0) {
    
#line 247
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"offset hast to be >= 0");
  }
  if (length < 0) {
    
#line 251
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"length hast to be >= 0");
  }
  if ((offset + length) > src->size_) {
    
#line 255
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"offset + length must not be greater then size of source array");
  }
  IOSByteArray *out = [IOSByteArray newArrayWithLength:length];
  for (jint i = 0; i < out->size_; i++) {
    
#line 260
    *IOSByteArray_GetRef(out, i) = IOSByteArray_Get(src, offset + i);
  }
  return out;
}


#line 272
jboolean OrgBouncycastlePqcCryptoXmssXMSSUtil_isIndexValidWithInt_withLong_(jint height, jlong index) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  if (index < 0) {
    
#line 276
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"index must not be negative");
  }
  return index < (JreLShift64(1LL, height));
}


#line 287
jint OrgBouncycastlePqcCryptoXmssXMSSUtil_getDigestSizeWithOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> digest) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  if (digest == nil) {
    
#line 291
    @throw new_JavaLangNullPointerException_initWithNSString_(@"digest == null");
  }
  NSString *algorithmName = [digest getAlgorithmName];
  if ([((NSString *) nil_chk(algorithmName)) isEqual:@"SHAKE128"]) {
    
#line 296
    return 32;
  }
  if ([algorithmName isEqual:@"SHAKE256"]) {
    
#line 300
    return 64;
  }
  return [digest getDigestSize];
}


#line 305
jlong OrgBouncycastlePqcCryptoXmssXMSSUtil_getTreeIndexWithLong_withInt_(jlong index, jint xmssTreeHeight) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  return JreRShift64(index, xmssTreeHeight);
}

jint OrgBouncycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(jlong index, jint xmssTreeHeight) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  return (jint) (index & ((JreLShift64(1LL, xmssTreeHeight)) - 1LL));
}

IOSByteArray *OrgBouncycastlePqcCryptoXmssXMSSUtil_serializeWithId_(id obj) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  
#line 318
  JavaIoByteArrayOutputStream *out = new_JavaIoByteArrayOutputStream_init();
  JavaIoObjectOutputStream *oos = new_JavaIoObjectOutputStream_initWithJavaIoOutputStream_(out);
  [oos writeObjectWithId:obj];
  [oos flush];
  return [out toByteArray];
}


#line 325
id OrgBouncycastlePqcCryptoXmssXMSSUtil_deserializeWithByteArray_withIOSClass_(IOSByteArray *data, IOSClass *clazz) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  
#line 328
  JavaIoByteArrayInputStream *in = new_JavaIoByteArrayInputStream_initWithByteArray_(data);
  JavaIoObjectInputStream *is = new_OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_initWithIOSClass_withJavaIoInputStream_(clazz, in);
  
#line 331
  id obj = [is readObject];
  
#line 333
  if ([is available] != 0) {
    
#line 335
    @throw new_JavaIoIOException_initWithNSString_(@"unexpected data found at end of ObjectInputStream");
  }
  
#line 338
  if ([((IOSClass *) nil_chk(clazz)) isInstance:obj]) {
    
#line 340
    return obj;
  }
  else {
    
#line 344
    @throw new_JavaIoIOException_initWithNSString_(@"unexpected class found in ObjectInputStream");
  }
}


#line 348
jint OrgBouncycastlePqcCryptoXmssXMSSUtil_calculateTauWithInt_withInt_(jint index, jint height) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  jint tau = 0;
  for (jint i = 0; i < height; i++) {
    
#line 353
    if (((JreRShift32(index, i)) & 1) == 0) {
      
#line 355
      tau = i;
      break;
    }
  }
  return tau;
}


#line 362
jboolean OrgBouncycastlePqcCryptoXmssXMSSUtil_isNewBDSInitNeededWithLong_withInt_withInt_(jlong globalIndex, jint xmssHeight, jint layer) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  if (globalIndex == 0) {
    
#line 366
    return false;
  }
  return (JreLongMod(globalIndex, JreFpToLong(JavaLangMath_powWithDouble_withDouble_((JreLShift32(1, xmssHeight)), layer + 1))) == 0) ? true : false;
}


#line 371
jboolean OrgBouncycastlePqcCryptoXmssXMSSUtil_isNewAuthenticationPathNeededWithLong_withInt_withInt_(jlong globalIndex, jint xmssHeight, jint layer) {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_initialize();
  if (globalIndex == 0) {
    
#line 375
    return false;
  }
  return (JreLongMod((globalIndex + 1), JreFpToLong(JavaLangMath_powWithDouble_withDouble_((JreLShift32(1, xmssHeight)), layer))) == 0) ? true : false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoXmssXMSSUtil)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream)


#line 380
@implementation OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream


#line 404
- (instancetype)initWithIOSClass:(IOSClass *)mainClass
           withJavaIoInputStream:(JavaIoInputStream *)inArg {
  OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_initWithIOSClass_withJavaIoInputStream_(self, mainClass, inArg);
  return self;
}


#line 412
- (IOSClass *)resolveClassWithJavaIoObjectStreamClass:(JavaIoObjectStreamClass *)desc {
  
#line 417
  if (!found_) {
    
#line 419
    if (![((NSString *) nil_chk([((JavaIoObjectStreamClass *) nil_chk(desc)) getName])) isEqual:[((IOSClass *) nil_chk(mainClass_)) getName]]) {
      
#line 421
      @throw new_JavaIoInvalidClassException_initWithNSString_withNSString_(
#line 422
      @"unexpected class: ", [desc getName]);
    }
    else {
      
#line 426
      found_ = true;
    }
  }
  else {
    
#line 431
    if (![((id<JavaUtilSet>) nil_chk(OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_components)) containsWithId:[((JavaIoObjectStreamClass *) nil_chk(desc)) getName]]) {
      
#line 433
      @throw new_JavaIoInvalidClassException_initWithNSString_withNSString_(
#line 434
      @"unexpected class: ", [desc getName]);
    }
  }
  return [super resolveClassWithJavaIoObjectStreamClass:desc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x4, 2, 3, 4, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:withJavaIoInputStream:);
  methods[1].selector = @selector(resolveClassWithJavaIoObjectStreamClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "components", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "mainClass_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "found_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;LJavaIoInputStream;", "LJavaIoIOException;", "resolveClass", "LJavaIoObjectStreamClass;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "(Ljava/io/ObjectStreamClass;)Ljava/lang/Class<*>;", &OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_components, "LOrgBouncycastlePqcCryptoXmssXMSSUtil;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream = { "CheckingStream", "org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0xa, 2, 3, 7, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream;
}

+ (void)initialize {
  if (self == [OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream class]) {
    OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_components = new_JavaUtilHashSet_init();
    {
      
#line 387
      [OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_components addWithId:@"java.util.TreeMap"];
      [OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_components addWithId:@"java.lang.Integer"];
      [OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_components addWithId:@"java.lang.Number"];
      [OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_components addWithId:@"org.bouncycastle.pqc.crypto.xmss.BDS"];
      [OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_components addWithId:@"java.util.ArrayList"];
      [OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_components addWithId:@"org.bouncycastle.pqc.crypto.xmss.XMSSNode"];
      [OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_components addWithId:@"[B"];
      [OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_components addWithId:@"java.util.LinkedList"];
      [OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_components addWithId:@"java.util.Stack"];
      [OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_components addWithId:@"java.util.Vector"];
      [OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_components addWithId:@"[Ljava.lang.Object;"];
      [OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_components addWithId:@"org.bouncycastle.pqc.crypto.xmss.BDSTreeHash"];
    }
    J2OBJC_SET_INITIALIZED(OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream)
  }
}

@end


#line 404
void OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_initWithIOSClass_withJavaIoInputStream_(OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream *self, IOSClass *mainClass, JavaIoInputStream *inArg) {
  JavaIoObjectInputStream_initWithJavaIoInputStream_(self,
#line 407
  inArg);
  self->found_ =
#line 402
  false;
  
#line 409
  self->mainClass_ = mainClass;
}


#line 404
OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream *new_OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_initWithIOSClass_withJavaIoInputStream_(IOSClass *mainClass, JavaIoInputStream *inArg) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream, initWithIOSClass_withJavaIoInputStream_, mainClass, inArg)
}


#line 404
OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream *create_OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream_initWithIOSClass_withJavaIoInputStream_(IOSClass *mainClass, JavaIoInputStream *inArg) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream, initWithIOSClass_withJavaIoInputStream_, mainClass, inArg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoXmssXMSSUtil_CheckingStream)
