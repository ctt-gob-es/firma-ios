//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/BDSStateMap.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/Integer.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/pqc/crypto/xmss/BDS.h"
#include "org/bouncycastle/pqc/crypto/xmss/BDSStateMap.h"
#include "org/bouncycastle/pqc/crypto/xmss/OTSHashAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSUtil.h"
#include "org/bouncycastle/util/Integers.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/xmss/BDSStateMap must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoXmssBDSStateMap () {
 @public
  id<JavaUtilMap> bdsState_;
  jlong maxIndex_;
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssBDSStateMap, bdsState_, id<JavaUtilMap>)

inline jlong OrgBouncycastlePqcCryptoXmssBDSStateMap_get_serialVersionUID(void);
#define OrgBouncycastlePqcCryptoXmssBDSStateMap_serialVersionUID -3464451825208522308LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoXmssBDSStateMap, serialVersionUID, jlong)

__attribute__((unused)) static void OrgBouncycastlePqcCryptoXmssBDSStateMap_readObjectWithJavaIoObjectInputStream_(OrgBouncycastlePqcCryptoXmssBDSStateMap *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoXmssBDSStateMap_writeObjectWithJavaIoObjectOutputStream_(OrgBouncycastlePqcCryptoXmssBDSStateMap *self, JavaIoObjectOutputStream *outArg);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/BDSStateMap.java"


#line 14
@implementation OrgBouncycastlePqcCryptoXmssBDSStateMap


#line 23
- (instancetype)initWithLong:(jlong)maxIndex {
  OrgBouncycastlePqcCryptoXmssBDSStateMap_initWithLong_(self, maxIndex);
  return self;
}

- (instancetype)initWithOrgBouncycastlePqcCryptoXmssBDSStateMap:(OrgBouncycastlePqcCryptoXmssBDSStateMap *)stateMap
                                                       withLong:(jlong)maxIndex {
  OrgBouncycastlePqcCryptoXmssBDSStateMap_initWithOrgBouncycastlePqcCryptoXmssBDSStateMap_withLong_(self, stateMap, maxIndex);
  return self;
}


#line 39
- (instancetype)initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters:(OrgBouncycastlePqcCryptoXmssXMSSMTParameters *)params
                                                            withLong:(jlong)globalIndex
                                                       withByteArray:(IOSByteArray *)publicSeed
                                                       withByteArray:(IOSByteArray *)secretKeySeed {
  OrgBouncycastlePqcCryptoXmssBDSStateMap_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_withLong_withByteArray_withByteArray_(self, params, globalIndex, publicSeed, secretKeySeed);
  return self;
}


#line 48
- (jlong)getMaxIndex {
  
#line 50
  return maxIndex_;
}


#line 53
- (void)updateStateWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters:(OrgBouncycastlePqcCryptoXmssXMSSMTParameters *)params
                                                           withLong:(jlong)globalIndex
                                                      withByteArray:(IOSByteArray *)publicSeed
                                                      withByteArray:(IOSByteArray *)secretKeySeed {
  
#line 55
  OrgBouncycastlePqcCryptoXmssXMSSParameters *xmssParams = [((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params)) getXMSSParameters];
  jint xmssHeight = [((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(xmssParams)) getHeight];
  
#line 61
  jlong indexTree = OrgBouncycastlePqcCryptoXmssXMSSUtil_getTreeIndexWithLong_withInt_(globalIndex, xmssHeight);
  jint indexLeaf = OrgBouncycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(globalIndex, xmssHeight);
  
#line 64
  OrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress = (OrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withTreeAddressWithLong:indexTree])) withOTSAddressWithInt:
#line 65
  indexLeaf])) build], [OrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
  
#line 68
  if (indexLeaf < ((JreLShift32(1, xmssHeight)) - 1)) {
    
#line 70
    if ([self getWithInt:0] == nil || indexLeaf == 0) {
      
#line 72
      [self putWithInt:0 withOrgBouncycastlePqcCryptoXmssBDS:new_OrgBouncycastlePqcCryptoXmssBDS_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(xmssParams, publicSeed, secretKeySeed, otsHashAddress)];
    }
    
#line 75
    (void) [self updateWithInt:0 withByteArray:publicSeed withByteArray:secretKeySeed withOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress];
  }
  
#line 79
  for (jint layer = 1; layer < [params getLayers]; layer++) {
    
#line 82
    indexLeaf = OrgBouncycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(indexTree, xmssHeight);
    indexTree = OrgBouncycastlePqcCryptoXmssXMSSUtil_getTreeIndexWithLong_withInt_(indexTree, xmssHeight);
    
#line 85
    otsHashAddress = (OrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:layer])) withTreeAddressWithLong:
#line 86
    indexTree])) withOTSAddressWithInt:indexLeaf])) build], [OrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
    
#line 89
    if ([((id<JavaUtilMap>) nil_chk(bdsState_)) getWithId:JavaLangInteger_valueOfWithInt_(layer)] == nil || OrgBouncycastlePqcCryptoXmssXMSSUtil_isNewBDSInitNeededWithLong_withInt_withInt_(globalIndex, xmssHeight, layer)) {
      
#line 91
      (void) [bdsState_ putWithId:JavaLangInteger_valueOfWithInt_(layer) withId:new_OrgBouncycastlePqcCryptoXmssBDS_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(xmssParams, publicSeed, secretKeySeed, otsHashAddress)];
    }
    
#line 94
    if (indexLeaf < ((JreLShift32(1, xmssHeight)) - 1) && OrgBouncycastlePqcCryptoXmssXMSSUtil_isNewAuthenticationPathNeededWithLong_withInt_withInt_(
#line 95
    globalIndex, xmssHeight, layer)) {
      
#line 97
      (void) [self updateWithInt:layer withByteArray:publicSeed withByteArray:secretKeySeed withOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress];
    }
  }
}


#line 102
- (jboolean)isEmpty {
  
#line 104
  return [((id<JavaUtilMap>) nil_chk(bdsState_)) isEmpty];
}


#line 107
- (OrgBouncycastlePqcCryptoXmssBDS *)getWithInt:(jint)index {
  
#line 109
  return [((id<JavaUtilMap>) nil_chk(bdsState_)) getWithId:OrgBouncycastleUtilIntegers_valueOfWithInt_(index)];
}


#line 112
- (OrgBouncycastlePqcCryptoXmssBDS *)updateWithInt:(jint)index
                                     withByteArray:(IOSByteArray *)publicSeed
                                     withByteArray:(IOSByteArray *)secretKeySeed
    withOrgBouncycastlePqcCryptoXmssOTSHashAddress:(OrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  
#line 114
  return [((id<JavaUtilMap>) nil_chk(bdsState_)) putWithId:OrgBouncycastleUtilIntegers_valueOfWithInt_(index) withId:[((OrgBouncycastlePqcCryptoXmssBDS *) nil_chk([bdsState_ getWithId:OrgBouncycastleUtilIntegers_valueOfWithInt_(index)])) getNextStateWithByteArray:publicSeed withByteArray:secretKeySeed withOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress]];
}


#line 117
- (void)putWithInt:(jint)index
withOrgBouncycastlePqcCryptoXmssBDS:(OrgBouncycastlePqcCryptoXmssBDS *)bds {
  (void) [((id<JavaUtilMap>) nil_chk(bdsState_)) putWithId:OrgBouncycastleUtilIntegers_valueOfWithInt_(index) withId:bds];
}

- (OrgBouncycastlePqcCryptoXmssBDSStateMap *)withWOTSDigestWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)digestName {
  
#line 124
  OrgBouncycastlePqcCryptoXmssBDSStateMap *newStateMap = new_OrgBouncycastlePqcCryptoXmssBDSStateMap_initWithLong_(self->maxIndex_);
  
#line 126
  for (id<JavaUtilIterator> keys = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(bdsState_)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(keys)) hasNext]; ) {
    
#line 128
    JavaLangInteger *key = [keys next];
    
#line 130
    (void) [newStateMap->bdsState_ putWithId:key withId:[((OrgBouncycastlePqcCryptoXmssBDS *) nil_chk([bdsState_ getWithId:key])) withWOTSDigestWithOrgBouncycastleAsn1ASN1ObjectIdentifier:digestName]];
  }
  
#line 133
  return newStateMap;
}


#line 136
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  OrgBouncycastlePqcCryptoXmssBDSStateMap_readObjectWithJavaIoObjectInputStream_(self, inArg);
}


#line 152
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  OrgBouncycastlePqcCryptoXmssBDSStateMap_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssBDS;", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssBDS;", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssBDSStateMap;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, 14, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 16, 17, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLong:);
  methods[1].selector = @selector(initWithOrgBouncycastlePqcCryptoXmssBDSStateMap:withLong:);
  methods[2].selector = @selector(initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters:withLong:withByteArray:withByteArray:);
  methods[3].selector = @selector(getMaxIndex);
  methods[4].selector = @selector(updateStateWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters:withLong:withByteArray:withByteArray:);
  methods[5].selector = @selector(isEmpty);
  methods[6].selector = @selector(getWithInt:);
  methods[7].selector = @selector(updateWithInt:withByteArray:withByteArray:withOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[8].selector = @selector(putWithInt:withOrgBouncycastlePqcCryptoXmssBDS:);
  methods[9].selector = @selector(withWOTSDigestWithOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[10].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[11].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgBouncycastlePqcCryptoXmssBDSStateMap_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "bdsState_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "maxIndex_", "J", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "LOrgBouncycastlePqcCryptoXmssBDSStateMap;J", "LOrgBouncycastlePqcCryptoXmssXMSSMTParameters;J[B[B", "updateState", "get", "I", "update", "I[B[BLOrgBouncycastlePqcCryptoXmssOTSHashAddress;", "put", "ILOrgBouncycastlePqcCryptoXmssBDS;", "withWOTSDigest", "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "Ljava/util/Map<Ljava/lang/Integer;Lorg/bouncycastle/pqc/crypto/xmss/BDS;>;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoXmssBDSStateMap = { "BDSStateMap", "org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x1, 12, 3, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoXmssBDSStateMap;
}

@end


#line 23
void OrgBouncycastlePqcCryptoXmssBDSStateMap_initWithLong_(OrgBouncycastlePqcCryptoXmssBDSStateMap *self, jlong maxIndex) {
  NSObject_init(self);
  self->bdsState_ = new_JavaUtilTreeMap_init();
  
#line 25
  self->maxIndex_ = maxIndex;
}


#line 23
OrgBouncycastlePqcCryptoXmssBDSStateMap *new_OrgBouncycastlePqcCryptoXmssBDSStateMap_initWithLong_(jlong maxIndex) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssBDSStateMap, initWithLong_, maxIndex)
}


#line 23
OrgBouncycastlePqcCryptoXmssBDSStateMap *create_OrgBouncycastlePqcCryptoXmssBDSStateMap_initWithLong_(jlong maxIndex) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssBDSStateMap, initWithLong_, maxIndex)
}


#line 28
void OrgBouncycastlePqcCryptoXmssBDSStateMap_initWithOrgBouncycastlePqcCryptoXmssBDSStateMap_withLong_(OrgBouncycastlePqcCryptoXmssBDSStateMap *self, OrgBouncycastlePqcCryptoXmssBDSStateMap *stateMap, jlong maxIndex) {
  NSObject_init(self);
  self->bdsState_ = new_JavaUtilTreeMap_init();
  
#line 30
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((OrgBouncycastlePqcCryptoXmssBDSStateMap *) nil_chk(stateMap))->bdsState_ keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 32
    JavaLangInteger *key = (JavaLangInteger *) cast_chk([it next], [JavaLangInteger class]);
    
#line 34
    (void) [self->bdsState_ putWithId:key withId:new_OrgBouncycastlePqcCryptoXmssBDS_initWithOrgBouncycastlePqcCryptoXmssBDS_([stateMap->bdsState_ getWithId:key])];
  }
  self->maxIndex_ = maxIndex;
}


#line 28
OrgBouncycastlePqcCryptoXmssBDSStateMap *new_OrgBouncycastlePqcCryptoXmssBDSStateMap_initWithOrgBouncycastlePqcCryptoXmssBDSStateMap_withLong_(OrgBouncycastlePqcCryptoXmssBDSStateMap *stateMap, jlong maxIndex) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssBDSStateMap, initWithOrgBouncycastlePqcCryptoXmssBDSStateMap_withLong_, stateMap, maxIndex)
}


#line 28
OrgBouncycastlePqcCryptoXmssBDSStateMap *create_OrgBouncycastlePqcCryptoXmssBDSStateMap_initWithOrgBouncycastlePqcCryptoXmssBDSStateMap_withLong_(OrgBouncycastlePqcCryptoXmssBDSStateMap *stateMap, jlong maxIndex) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssBDSStateMap, initWithOrgBouncycastlePqcCryptoXmssBDSStateMap_withLong_, stateMap, maxIndex)
}


#line 39
void OrgBouncycastlePqcCryptoXmssBDSStateMap_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_withLong_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoXmssBDSStateMap *self, OrgBouncycastlePqcCryptoXmssXMSSMTParameters *params, jlong globalIndex, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed) {
  NSObject_init(self);
  self->bdsState_ = new_JavaUtilTreeMap_init();
  
#line 41
  self->maxIndex_ = (JreLShift64(1LL, [((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params)) getHeight])) - 1;
  for (jlong index = 0; index < globalIndex; index++) {
    
#line 44
    [self updateStateWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters:params withLong:index withByteArray:publicSeed withByteArray:secretKeySeed];
  }
}


#line 39
OrgBouncycastlePqcCryptoXmssBDSStateMap *new_OrgBouncycastlePqcCryptoXmssBDSStateMap_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_withLong_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoXmssXMSSMTParameters *params, jlong globalIndex, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssBDSStateMap, initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_withLong_withByteArray_withByteArray_, params, globalIndex, publicSeed, secretKeySeed)
}


#line 39
OrgBouncycastlePqcCryptoXmssBDSStateMap *create_OrgBouncycastlePqcCryptoXmssBDSStateMap_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_withLong_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoXmssXMSSMTParameters *params, jlong globalIndex, IOSByteArray *publicSeed, IOSByteArray *secretKeySeed) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssBDSStateMap, initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_withLong_withByteArray_withByteArray_, params, globalIndex, publicSeed, secretKeySeed)
}


#line 136
void OrgBouncycastlePqcCryptoXmssBDSStateMap_readObjectWithJavaIoObjectInputStream_(OrgBouncycastlePqcCryptoXmssBDSStateMap *self, JavaIoObjectInputStream *inArg) {
  
#line 140
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  
#line 142
  if ([inArg available] != 0) {
    
#line 144
    self->maxIndex_ = [inArg readLong];
  }
  else {
    
#line 148
    self->maxIndex_ = 0;
  }
}


#line 152
void OrgBouncycastlePqcCryptoXmssBDSStateMap_writeObjectWithJavaIoObjectOutputStream_(OrgBouncycastlePqcCryptoXmssBDSStateMap *self, JavaIoObjectOutputStream *outArg) {
  
#line 156
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  
#line 158
  [outArg writeLongWithLong:self->maxIndex_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoXmssBDSStateMap)
