//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSMTPrivateKeyParameters.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/annotation/Annotation.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/pqc/crypto/xmss/BDSStateMap.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSMTPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSUtil.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/xmss/XMSSMTPrivateKeyParameters must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters () {
 @public
  OrgBouncycastlePqcCryptoXmssXMSSMTParameters *params_;
  IOSByteArray *secretKeySeed_;
  IOSByteArray *secretKeyPRF_;
  IOSByteArray *publicSeed_;
  IOSByteArray *root_;
  volatile_jlong index_;
  volatile_id bdsState_;
  volatile_jboolean used_;
}

- (instancetype)initWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder:(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *)builder;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters, params_, OrgBouncycastlePqcCryptoXmssXMSSMTParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters, secretKeySeed_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters, secretKeyPRF_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters, publicSeed_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters, root_, IOSByteArray *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters, bdsState_, OrgBouncycastlePqcCryptoXmssBDSStateMap *)

__attribute__((unused)) static void OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_initWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *self, OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *builder);

__attribute__((unused)) static OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *new_OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_initWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *builder) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *create_OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_initWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *builder);

__attribute__((unused)) static IOSObjectArray *OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters__Annotations$0(void);

@interface OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder () {
 @public
  OrgBouncycastlePqcCryptoXmssXMSSMTParameters *params_;
  jlong index_;
  jlong maxIndex_;
  IOSByteArray *secretKeySeed_;
  IOSByteArray *secretKeyPRF_;
  IOSByteArray *publicSeed_;
  IOSByteArray *root_;
  OrgBouncycastlePqcCryptoXmssBDSStateMap *bdsState_;
  IOSByteArray *privateKey_;
  OrgBouncycastlePqcCryptoXmssXMSSParameters *xmss_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder, params_, OrgBouncycastlePqcCryptoXmssXMSSMTParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder, secretKeySeed_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder, secretKeyPRF_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder, publicSeed_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder, root_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder, bdsState_, OrgBouncycastlePqcCryptoXmssBDSStateMap *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder, privateKey_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder, xmss_, OrgBouncycastlePqcCryptoXmssXMSSParameters *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSMTPrivateKeyParameters.java"


#line 11
@implementation OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters


#line 25
- (instancetype)initWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder:(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *)builder {
  OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_initWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_(self, builder);
  return self;
}


#line 166
- (IOSByteArray *)getEncoded {
  
#line 170
  @synchronized(self) {
    
#line 172
    return JreRetainedLocalValue([self toByteArray]);
  }
}


#line 261
- (IOSByteArray *)toByteArray {
  
#line 265
  @synchronized(self) {
    
#line 268
    jint n = [((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getTreeDigestSize];
    jint indexSize = JreIntDiv(([params_ getHeight] + 7), 8);
    jint secretKeySize = n;
    jint secretKeyPRFSize = n;
    jint publicSeedSize = n;
    jint rootSize = n;
    jint totalSize = indexSize + secretKeySize + secretKeyPRFSize + publicSeedSize + rootSize;
    IOSByteArray *out = [IOSByteArray newArrayWithLength:totalSize];
    jint position = 0;
    
#line 278
    IOSByteArray *indexBytes = OrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(JreLoadVolatileLong(&index_), indexSize);
    OrgBouncycastlePqcCryptoXmssXMSSUtil_copyBytesAtOffsetWithByteArray_withByteArray_withInt_(out, indexBytes, position);
    position += indexSize;
    
#line 282
    OrgBouncycastlePqcCryptoXmssXMSSUtil_copyBytesAtOffsetWithByteArray_withByteArray_withInt_(out, secretKeySeed_, position);
    position += secretKeySize;
    
#line 285
    OrgBouncycastlePqcCryptoXmssXMSSUtil_copyBytesAtOffsetWithByteArray_withByteArray_withInt_(out, secretKeyPRF_, position);
    position += secretKeyPRFSize;
    
#line 288
    OrgBouncycastlePqcCryptoXmssXMSSUtil_copyBytesAtOffsetWithByteArray_withByteArray_withInt_(out, publicSeed_, position);
    position += publicSeedSize;
    
#line 291
    OrgBouncycastlePqcCryptoXmssXMSSUtil_copyBytesAtOffsetWithByteArray_withByteArray_withInt_(out, root_, position);
    
#line 293
    @try {
      
#line 295
      return OrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_(out, OrgBouncycastlePqcCryptoXmssXMSSUtil_serializeWithId_(JreLoadVolatileId(&bdsState_)));
    }
    @catch (JavaIoIOException *e) {
      
#line 299
      @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"error serializing bds state: ", [e getMessage]), e);
    }
  }
}


#line 304
- (jlong)getIndex {
  
#line 306
  return JreLoadVolatileLong(&index_);
}


#line 309
- (jlong)getUsagesRemaining {
  
#line 311
  @synchronized(self) {
    
#line 313
    return [((OrgBouncycastlePqcCryptoXmssBDSStateMap *) nil_chk(JreLoadVolatileId(&bdsState_))) getMaxIndex] - [self getIndex] + 1;
  }
}


#line 317
- (IOSByteArray *)getSecretKeySeed {
  
#line 319
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_cloneArrayWithByteArray_(secretKeySeed_);
}


#line 322
- (IOSByteArray *)getSecretKeyPRF {
  
#line 324
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_cloneArrayWithByteArray_(secretKeyPRF_);
}


#line 327
- (IOSByteArray *)getPublicSeed {
  
#line 329
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_cloneArrayWithByteArray_(publicSeed_);
}


#line 332
- (IOSByteArray *)getRoot {
  
#line 334
  return OrgBouncycastlePqcCryptoXmssXMSSUtil_cloneArrayWithByteArray_(root_);
}


#line 337
- (OrgBouncycastlePqcCryptoXmssBDSStateMap *)getBDSState {
  
#line 339
  return JreLoadVolatileId(&bdsState_);
}


#line 342
- (OrgBouncycastlePqcCryptoXmssXMSSMTParameters *)getParameters {
  
#line 344
  return params_;
}


#line 347
- (OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *)getNextKey {
  
#line 349
  @synchronized(self) {
    
#line 351
    return JreRetainedLocalValue([self extractKeyShardWithInt:1]);
  }
}


#line 355
- (OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *)rollKey {
  
#line 357
  @synchronized(self) {
    
#line 359
    if ([self getIndex] < [((OrgBouncycastlePqcCryptoXmssBDSStateMap *) nil_chk(JreLoadVolatileId(&bdsState_))) getMaxIndex]) {
      
#line 361
      [((OrgBouncycastlePqcCryptoXmssBDSStateMap *) nil_chk(JreLoadVolatileId(&bdsState_))) updateStateWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters:params_ withLong:JreLoadVolatileLong(&index_) withByteArray:publicSeed_ withByteArray:secretKeySeed_];
      JreAssignVolatileLong(&index_, JreLoadVolatileLong(&index_) + 1);
    }
    else {
      
#line 366
      JreAssignVolatileLong(&index_, [((OrgBouncycastlePqcCryptoXmssBDSStateMap *) nil_chk(JreLoadVolatileId(&bdsState_))) getMaxIndex] + 1);
      (void) JreVolatileStrongAssign(&bdsState_, new_OrgBouncycastlePqcCryptoXmssBDSStateMap_initWithLong_([((OrgBouncycastlePqcCryptoXmssBDSStateMap *) nil_chk(JreLoadVolatileId(&bdsState_))) getMaxIndex]));
    }
    JreAssignVolatileBoolean(&used_, false);
    
#line 371
    return JreRetainedLocalValue(self);
  }
}


#line 383
- (OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *)extractKeyShardWithInt:(jint)usageCount {
  
#line 385
  if (usageCount < 1) {
    
#line 387
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cannot ask for a shard with 0 keys");
  }
  @synchronized(self) {
    
#line 392
    if (usageCount <= [self getUsagesRemaining]) {
      
#line 394
      OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *keyParams = [((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(params_) withSecretKeySeedWithByteArray:
#line 395
      secretKeySeed_])) withSecretKeyPRFWithByteArray:secretKeyPRF_])) withPublicSeedWithByteArray:
#line 396
      publicSeed_])) withRootWithByteArray:root_])) withIndexWithLong:
#line 397
      [self getIndex]])) withBDSStateWithOrgBouncycastlePqcCryptoXmssBDSStateMap:new_OrgBouncycastlePqcCryptoXmssBDSStateMap_initWithOrgBouncycastlePqcCryptoXmssBDSStateMap_withLong_(JreLoadVolatileId(&
#line 398
      bdsState_), [self getIndex] + usageCount - 1)])) build];
      
#line 400
      for (jint i = 0; i != usageCount; i++) {
        
#line 402
        (void) [self rollKey];
      }
      
#line 405
      return JreRetainedLocalValue(keyParams);
    }
    else {
      
#line 409
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"usageCount exceeds usages remaining");
    }
  }
}

- (void)__javaClone:(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&bdsState_, &original->bdsState_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, 2, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssBDSStateMap;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSMTParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters;", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder:);
  methods[1].selector = @selector(getEncoded);
  methods[2].selector = @selector(toByteArray);
  methods[3].selector = @selector(getIndex);
  methods[4].selector = @selector(getUsagesRemaining);
  methods[5].selector = @selector(getSecretKeySeed);
  methods[6].selector = @selector(getSecretKeyPRF);
  methods[7].selector = @selector(getPublicSeed);
  methods[8].selector = @selector(getRoot);
  methods[9].selector = @selector(getBDSState);
  methods[10].selector = @selector(getParameters);
  methods[11].selector = @selector(getNextKey);
  methods[12].selector = @selector(rollKey);
  methods[13].selector = @selector(extractKeyShardWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LOrgBouncycastlePqcCryptoXmssXMSSMTParameters;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "secretKeySeed_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "secretKeyPRF_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "publicSeed_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "root_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "bdsState_", "LOrgBouncycastlePqcCryptoXmssBDSStateMap;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "used_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder;", "LJavaIoIOException;", (void *)&OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters__Annotations$0, "extractKeyShard", "I" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters = { "XMSSMTPrivateKeyParameters", "org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x11, 14, 8, -1, 0, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters;
}

@end


#line 25
void OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_initWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *self, OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *builder) {
  OrgBouncycastlePqcCryptoXmssXMSSMTKeyParameters_initWithBoolean_withNSString_(self,
#line 27
  true, [((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(((OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *) nil_chk(builder))->params_)) getTreeDigest]);
  self->params_ = builder->params_;
  
#line 30
  if (self->params_ == nil) {
    
#line 32
    @throw new_JavaLangNullPointerException_initWithNSString_(@"params == null");
  }
  jint n = [self->params_ getTreeDigestSize];
  IOSByteArray *privateKey = builder->privateKey_;
  if (privateKey != nil) {
    
#line 38
    if (builder->xmss_ == nil) {
      
#line 40
      @throw new_JavaLangNullPointerException_initWithNSString_(@"xmss == null");
    }
    
#line 43
    jint totalHeight = [self->params_ getHeight];
    jint indexSize = JreIntDiv((totalHeight + 7), 8);
    jint secretKeySize = n;
    jint secretKeyPRFSize = n;
    jint publicSeedSize = n;
    jint rootSize = n;
    
#line 55
    jint position = 0;
    JreAssignVolatileLong(&self->index_, OrgBouncycastlePqcCryptoXmssXMSSUtil_bytesToXBigEndianWithByteArray_withInt_withInt_(privateKey, position, indexSize));
    if (!OrgBouncycastlePqcCryptoXmssXMSSUtil_isIndexValidWithInt_withLong_(totalHeight, JreLoadVolatileLong(&self->index_))) {
      
#line 59
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"index out of bounds");
    }
    position += indexSize;
    self->secretKeySeed_ = OrgBouncycastlePqcCryptoXmssXMSSUtil_extractBytesAtOffsetWithByteArray_withInt_withInt_(privateKey, position, secretKeySize);
    position += secretKeySize;
    self->secretKeyPRF_ = OrgBouncycastlePqcCryptoXmssXMSSUtil_extractBytesAtOffsetWithByteArray_withInt_withInt_(privateKey, position, secretKeyPRFSize);
    position += secretKeyPRFSize;
    self->publicSeed_ = OrgBouncycastlePqcCryptoXmssXMSSUtil_extractBytesAtOffsetWithByteArray_withInt_withInt_(privateKey, position, publicSeedSize);
    position += publicSeedSize;
    self->root_ = OrgBouncycastlePqcCryptoXmssXMSSUtil_extractBytesAtOffsetWithByteArray_withInt_withInt_(privateKey, position, rootSize);
    position += rootSize;
    
#line 71
    IOSByteArray *bdsStateBinary = OrgBouncycastlePqcCryptoXmssXMSSUtil_extractBytesAtOffsetWithByteArray_withInt_withInt_(privateKey, position, privateKey->size_ - position);
    
#line 73
    @try {
      
#line 75
      OrgBouncycastlePqcCryptoXmssBDSStateMap *bdsImport = (OrgBouncycastlePqcCryptoXmssBDSStateMap *) cast_chk(OrgBouncycastlePqcCryptoXmssXMSSUtil_deserializeWithByteArray_withIOSClass_(bdsStateBinary, OrgBouncycastlePqcCryptoXmssBDSStateMap_class_()), [OrgBouncycastlePqcCryptoXmssBDSStateMap class]);
      
#line 77
      (void) JreVolatileStrongAssign(&self->bdsState_, [((OrgBouncycastlePqcCryptoXmssBDSStateMap *) nil_chk(bdsImport)) withWOTSDigestWithOrgBouncycastleAsn1ASN1ObjectIdentifier:[((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(builder->xmss_)) getTreeDigestOID]]);
    }
    @catch (JavaIoIOException *e) {
      
#line 81
      @throw new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_([e getMessage], e);
    }
    @catch (
#line 79
    JavaLangClassNotFoundException *e) {
      
#line 81
      @throw new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_([e getMessage], e);
    }
  }
  else {
    
#line 87
    JreAssignVolatileLong(&self->index_, builder->index_);
    IOSByteArray *tmpSecretKeySeed = builder->secretKeySeed_;
    if (tmpSecretKeySeed != nil) {
      
#line 91
      if (tmpSecretKeySeed->size_ != n) {
        
#line 93
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of secretKeySeed needs to be equal size of digest");
      }
      self->secretKeySeed_ = tmpSecretKeySeed;
    }
    else {
      
#line 99
      self->secretKeySeed_ = [IOSByteArray newArrayWithLength:n];
    }
    IOSByteArray *tmpSecretKeyPRF = builder->secretKeyPRF_;
    if (tmpSecretKeyPRF != nil) {
      
#line 104
      if (tmpSecretKeyPRF->size_ != n) {
        
#line 106
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of secretKeyPRF needs to be equal size of digest");
      }
      self->secretKeyPRF_ = tmpSecretKeyPRF;
    }
    else {
      
#line 112
      self->secretKeyPRF_ = [IOSByteArray newArrayWithLength:n];
    }
    IOSByteArray *tmpPublicSeed = builder->publicSeed_;
    if (tmpPublicSeed != nil) {
      
#line 117
      if (tmpPublicSeed->size_ != n) {
        
#line 119
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of publicSeed needs to be equal size of digest");
      }
      self->publicSeed_ = tmpPublicSeed;
    }
    else {
      
#line 125
      self->publicSeed_ = [IOSByteArray newArrayWithLength:n];
    }
    IOSByteArray *tmpRoot = builder->root_;
    if (tmpRoot != nil) {
      
#line 130
      if (tmpRoot->size_ != n) {
        
#line 132
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of root needs to be equal size of digest");
      }
      self->root_ = tmpRoot;
    }
    else {
      
#line 138
      self->root_ = [IOSByteArray newArrayWithLength:n];
    }
    OrgBouncycastlePqcCryptoXmssBDSStateMap *tmpBDSState = builder->bdsState_;
    if (tmpBDSState != nil) {
      
#line 143
      (void) JreVolatileStrongAssign(&self->bdsState_, tmpBDSState);
    }
    else {
      
#line 147
      jlong globalIndex = builder->index_;
      jint totalHeight = [self->params_ getHeight];
      
#line 150
      if (OrgBouncycastlePqcCryptoXmssXMSSUtil_isIndexValidWithInt_withLong_(totalHeight, globalIndex) && tmpPublicSeed != nil && tmpSecretKeySeed != nil) {
        
#line 152
        (void) JreVolatileStrongAssign(&self->bdsState_, new_OrgBouncycastlePqcCryptoXmssBDSStateMap_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_withLong_withByteArray_withByteArray_(self->params_, builder->index_, tmpPublicSeed, tmpSecretKeySeed));
      }
      else {
        
#line 156
        (void) JreVolatileStrongAssign(&self->bdsState_, new_OrgBouncycastlePqcCryptoXmssBDSStateMap_initWithLong_(builder->maxIndex_ + 1));
      }
    }
    if (builder->maxIndex_ >= 0 && builder->maxIndex_ != [((OrgBouncycastlePqcCryptoXmssBDSStateMap *) nil_chk(JreLoadVolatileId(&self->bdsState_))) getMaxIndex]) {
      
#line 161
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"maxIndex set but not reflected in state");
    }
  }
}


#line 25
OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *new_OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_initWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *builder) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters, initWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_, builder)
}


#line 25
OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *create_OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_initWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *builder) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters, initWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_, builder)
}

IOSObjectArray *OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSMTPrivateKeyParameters.java"


#line 176
@implementation OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder


#line 191
- (instancetype)initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters:(OrgBouncycastlePqcCryptoXmssXMSSMTParameters *)params {
  OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(self, params);
  return self;
}

- (OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *)withIndexWithLong:(jlong)val {
  
#line 198
  index_ = val;
  return self;
}


#line 202
- (OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *)withMaxIndexWithLong:(jlong)val {
  
#line 204
  maxIndex_ = val;
  return self;
}


#line 208
- (OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *)withSecretKeySeedWithByteArray:(IOSByteArray *)val {
  
#line 210
  secretKeySeed_ = OrgBouncycastlePqcCryptoXmssXMSSUtil_cloneArrayWithByteArray_(val);
  return self;
}


#line 214
- (OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *)withSecretKeyPRFWithByteArray:(IOSByteArray *)val {
  
#line 216
  secretKeyPRF_ = OrgBouncycastlePqcCryptoXmssXMSSUtil_cloneArrayWithByteArray_(val);
  return self;
}


#line 220
- (OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *)withPublicSeedWithByteArray:(IOSByteArray *)val {
  
#line 222
  publicSeed_ = OrgBouncycastlePqcCryptoXmssXMSSUtil_cloneArrayWithByteArray_(val);
  return self;
}


#line 226
- (OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *)withRootWithByteArray:(IOSByteArray *)val {
  
#line 228
  root_ = OrgBouncycastlePqcCryptoXmssXMSSUtil_cloneArrayWithByteArray_(val);
  return self;
}


#line 232
- (OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *)withBDSStateWithOrgBouncycastlePqcCryptoXmssBDSStateMap:(OrgBouncycastlePqcCryptoXmssBDSStateMap *)val {
  
#line 234
  if ([((OrgBouncycastlePqcCryptoXmssBDSStateMap *) nil_chk(val)) getMaxIndex] == 0) {
    
#line 236
    bdsState_ = new_OrgBouncycastlePqcCryptoXmssBDSStateMap_initWithOrgBouncycastlePqcCryptoXmssBDSStateMap_withLong_(val, (JreLShift64(1LL, [((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getHeight])) - 1);
  }
  else {
    
#line 240
    bdsState_ = val;
  }
  return self;
}


#line 245
- (OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *)withPrivateKeyWithByteArray:(IOSByteArray *)privateKeyVal {
  
#line 247
  privateKey_ = OrgBouncycastlePqcCryptoXmssXMSSUtil_cloneArrayWithByteArray_(privateKeyVal);
  xmss_ = [((OrgBouncycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getXMSSParameters];
  return self;
}


#line 252
- (OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *)build {
  
#line 254
  return new_OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_initWithOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder;", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder;", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder;", 0x1, 11, 5, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters:);
  methods[1].selector = @selector(withIndexWithLong:);
  methods[2].selector = @selector(withMaxIndexWithLong:);
  methods[3].selector = @selector(withSecretKeySeedWithByteArray:);
  methods[4].selector = @selector(withSecretKeyPRFWithByteArray:);
  methods[5].selector = @selector(withPublicSeedWithByteArray:);
  methods[6].selector = @selector(withRootWithByteArray:);
  methods[7].selector = @selector(withBDSStateWithOrgBouncycastlePqcCryptoXmssBDSStateMap:);
  methods[8].selector = @selector(withPrivateKeyWithByteArray:);
  methods[9].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LOrgBouncycastlePqcCryptoXmssXMSSMTParameters;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "index_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxIndex_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "secretKeySeed_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "secretKeyPRF_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicSeed_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "root_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bdsState_", "LOrgBouncycastlePqcCryptoXmssBDSStateMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "privateKey_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "xmss_", "LOrgBouncycastlePqcCryptoXmssXMSSParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcCryptoXmssXMSSMTParameters;", "withIndex", "J", "withMaxIndex", "withSecretKeySeed", "[B", "withSecretKeyPRF", "withPublicSeed", "withRoot", "withBDSState", "LOrgBouncycastlePqcCryptoXmssBDSStateMap;", "withPrivateKey", "LOrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder = { "Builder", "org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x9, 10, 10, 12, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder;
}

@end


#line 191
void OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *self, OrgBouncycastlePqcCryptoXmssXMSSMTParameters *params) {
  NSObject_init(self);
  self->index_ =
#line 181
  0LL;
  self->maxIndex_ = -1LL;
  self->secretKeySeed_ = nil;
  self->secretKeyPRF_ = nil;
  self->publicSeed_ = nil;
  self->root_ = nil;
  self->bdsState_ = nil;
  self->privateKey_ = nil;
  self->xmss_ = nil;
  
#line 193
  self->params_ = params;
}


#line 191
OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *new_OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(OrgBouncycastlePqcCryptoXmssXMSSMTParameters *params) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder, initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_, params)
}


#line 191
OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder *create_OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_(OrgBouncycastlePqcCryptoXmssXMSSMTParameters *params) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder, initWithOrgBouncycastlePqcCryptoXmssXMSSMTParameters_, params)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoXmssXMSSMTPrivateKeyParameters_Builder)
