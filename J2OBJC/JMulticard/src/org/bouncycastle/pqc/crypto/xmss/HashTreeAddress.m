//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/HashTreeAddress.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/bouncycastle/pqc/crypto/xmss/HashTreeAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSAddress.h"
#include "org/bouncycastle/util/Pack.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/xmss/HashTreeAddress must be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgBouncycastlePqcCryptoXmssHashTreeAddress () {
 @public
  jint padding_;
  jint treeHeight_;
  jint treeIndex_;
}

@end

inline jint OrgBouncycastlePqcCryptoXmssHashTreeAddress_get_TYPE(void);
#define OrgBouncycastlePqcCryptoXmssHashTreeAddress_TYPE 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoXmssHashTreeAddress, TYPE, jint)

inline jint OrgBouncycastlePqcCryptoXmssHashTreeAddress_get_PADDING(void);
#define OrgBouncycastlePqcCryptoXmssHashTreeAddress_PADDING 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoXmssHashTreeAddress, PADDING, jint)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/HashTreeAddress.java"


#line 8
@implementation OrgBouncycastlePqcCryptoXmssHashTreeAddress


#line 19
- (instancetype)initPackagePrivateWithOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder:(OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *)builder {
  OrgBouncycastlePqcCryptoXmssHashTreeAddress_initPackagePrivateWithOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_(self, builder);
  return self;
}


#line 64
- (IOSByteArray *)toByteArray {
  
#line 67
  IOSByteArray *byteRepresentation = [super toByteArray];
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(padding_, byteRepresentation, 16);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(treeHeight_, byteRepresentation, 20);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(treeIndex_, byteRepresentation, 24);
  return byteRepresentation;
}

- (jint)getPadding {
  
#line 76
  return padding_;
}


#line 79
- (jint)getTreeHeight {
  
#line 81
  return treeHeight_;
}


#line 84
- (jint)getTreeIndex {
  
#line 86
  return treeIndex_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder:);
  methods[1].selector = @selector(toByteArray);
  methods[2].selector = @selector(getPadding);
  methods[3].selector = @selector(getTreeHeight);
  methods[4].selector = @selector(getTreeIndex);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoXmssHashTreeAddress_TYPE, 0x1a, -1, -1, -1, -1 },
    { "PADDING", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoXmssHashTreeAddress_PADDING, 0x1a, -1, -1, -1, -1 },
    { "padding_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "treeHeight_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "treeIndex_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoXmssHashTreeAddress = { "HashTreeAddress", "org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x10, 5, 5, -1, 0, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoXmssHashTreeAddress;
}

@end


#line 19
void OrgBouncycastlePqcCryptoXmssHashTreeAddress_initPackagePrivateWithOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_(OrgBouncycastlePqcCryptoXmssHashTreeAddress *self, OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *builder) {
  OrgBouncycastlePqcCryptoXmssXMSSAddress_initWithOrgBouncycastlePqcCryptoXmssXMSSAddress_Builder_(self, builder);
  self->padding_ = OrgBouncycastlePqcCryptoXmssHashTreeAddress_PADDING;
  self->treeHeight_ = ((OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk(builder))->treeHeight_;
  self->treeIndex_ = builder->treeIndex_;
}


#line 19
OrgBouncycastlePqcCryptoXmssHashTreeAddress *new_OrgBouncycastlePqcCryptoXmssHashTreeAddress_initPackagePrivateWithOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_(OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *builder) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssHashTreeAddress, initPackagePrivateWithOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_, builder)
}


#line 19
OrgBouncycastlePqcCryptoXmssHashTreeAddress *create_OrgBouncycastlePqcCryptoXmssHashTreeAddress_initPackagePrivateWithOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_(OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *builder) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssHashTreeAddress, initPackagePrivateWithOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_, builder)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoXmssHashTreeAddress)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/HashTreeAddress.java"


#line 26
@implementation OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 34
- (instancetype)init {
  OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 39
- (OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *)withTreeHeightWithInt:(jint)val {
  
#line 41
  treeHeight_ = val;
  return self;
}


#line 45
- (OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *)withTreeIndexWithInt:(jint)val {
  
#line 47
  treeIndex_ = val;
  return self;
}


#line 51
- (OrgBouncycastlePqcCryptoXmssXMSSAddress *)build {
  
#line 54
  return new_OrgBouncycastlePqcCryptoXmssHashTreeAddress_initPackagePrivateWithOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_(self);
}

- (OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *)getThis {
  
#line 60
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder;", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder;", 0x4, 2, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssXMSSAddress;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(withTreeHeightWithInt:);
  methods[2].selector = @selector(withTreeIndexWithInt:);
  methods[3].selector = @selector(build);
  methods[4].selector = @selector(getThis);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "treeHeight_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "treeIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "withTreeHeight", "I", "withTreeIndex", "LOrgBouncycastlePqcCryptoXmssHashTreeAddress;", "Lorg/bouncycastle/pqc/crypto/xmss/XMSSAddress$Builder<Lorg/bouncycastle/pqc/crypto/xmss/HashTreeAddress$Builder;>;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder = { "Builder", "org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0xc, 5, 2, 3, -1, -1, 4, -1 };
  return &_OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder;
}

@end


#line 34
void OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init(OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *self) {
  OrgBouncycastlePqcCryptoXmssXMSSAddress_Builder_initWithInt_(self, OrgBouncycastlePqcCryptoXmssHashTreeAddress_TYPE);
  self->treeHeight_ =
#line 31
  0;
  self->treeIndex_ = 0;
}


#line 34
OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *new_OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder, init)
}


#line 34
OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder *create_OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoXmssHashTreeAddress_Builder)
