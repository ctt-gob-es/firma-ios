//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSSigner.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/List.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/pqc/crypto/ExhaustedPrivateKeyException.h"
#include "org/bouncycastle/pqc/crypto/xmss/BDS.h"
#include "org/bouncycastle/pqc/crypto/xmss/KeyedHashFunctions.h"
#include "org/bouncycastle/pqc/crypto/xmss/OTSHashAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlus.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlusSignature.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSNode.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSReducedSignature.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSSignature.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSSigner.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSUtil.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSVerifierUtil.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/xmss/XMSSSigner must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoXmssXMSSSigner () {
 @public
  OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *privateKey_;
  OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *publicKey_;
  OrgBouncycastlePqcCryptoXmssXMSSParameters *params_;
  OrgBouncycastlePqcCryptoXmssWOTSPlus *wotsPlus_;
  OrgBouncycastlePqcCryptoXmssKeyedHashFunctions *khf_;
  jboolean initSign_;
  jboolean hasGenerated_;
}

- (OrgBouncycastlePqcCryptoXmssWOTSPlusSignature *)wotsSignWithByteArray:(IOSByteArray *)messageDigest
                          withOrgBouncycastlePqcCryptoXmssOTSHashAddress:(OrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSSigner, privateKey_, OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSSigner, publicKey_, OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSSigner, params_, OrgBouncycastlePqcCryptoXmssXMSSParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSSigner, wotsPlus_, OrgBouncycastlePqcCryptoXmssWOTSPlus *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssXMSSSigner, khf_, OrgBouncycastlePqcCryptoXmssKeyedHashFunctions *)

__attribute__((unused)) static OrgBouncycastlePqcCryptoXmssWOTSPlusSignature *OrgBouncycastlePqcCryptoXmssXMSSSigner_wotsSignWithByteArray_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(OrgBouncycastlePqcCryptoXmssXMSSSigner *self, IOSByteArray *messageDigest, OrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSSigner.java"


#line 9
@implementation OrgBouncycastlePqcCryptoXmssXMSSSigner

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 9
- (instancetype)init {
  OrgBouncycastlePqcCryptoXmssXMSSSigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 21
- (void)init__WithBoolean:(jboolean)forSigning
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)param {
  
#line 24
  if (forSigning) {
    
#line 26
    initSign_ = true;
    hasGenerated_ = false;
    privateKey_ = (OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters class]);
    params_ = [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getParameters];
  }
  else {
    
#line 33
    initSign_ = false;
    publicKey_ = (OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters class]);
    
#line 36
    params_ = [((OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *) nil_chk(publicKey_)) getParameters];
  }
  
#line 39
  wotsPlus_ = [((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getWOTSPlus];
  khf_ = [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) getKhf];
}


#line 43
- (IOSByteArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  
#line 46
  if (message == nil) {
    
#line 48
    @throw new_JavaLangNullPointerException_initWithNSString_(@"message == null");
  }
  if (initSign_) {
    
#line 52
    if (privateKey_ == nil) {
      
#line 54
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"signing key no longer usable");
    }
  }
  else {
    
#line 59
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"signer not initialized for signature generation");
  }
  
#line 62
  @synchronized(privateKey_) {
    
#line 64
    if ([privateKey_ getUsagesRemaining] <= 0) {
      
#line 66
      @throw new_OrgBouncycastlePqcCryptoExhaustedPrivateKeyException_initWithNSString_(@"no usages of private key remaining");
    }
    if ([((id<JavaUtilList>) nil_chk([((OrgBouncycastlePqcCryptoXmssBDS *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getBDSState])) getAuthenticationPath])) isEmpty]) {
      
#line 70
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"not initialized");
    }
    
#line 73
    @try {
      
#line 75
      jint index = [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getIndex];
      
#line 77
      hasGenerated_ = true;
      
#line 80
      IOSByteArray *random = [((OrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk(khf_)) PRFWithByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeyPRF] withByteArray:OrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(index, 32)];
      IOSByteArray *concatenated = OrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_(random, [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getRoot], OrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(
#line 82
      index, [((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getTreeDigestSize]));
      IOSByteArray *messageDigest = [((OrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk(khf_)) HMsgWithByteArray:concatenated withByteArray:message];
      
#line 86
      OrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress = (OrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withOTSAddressWithInt:index])) build], [OrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
      OrgBouncycastlePqcCryptoXmssWOTSPlusSignature *wotsPlusSignature = OrgBouncycastlePqcCryptoXmssXMSSSigner_wotsSignWithByteArray_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, messageDigest, otsHashAddress);
      return JreRetainedLocalValue([((OrgBouncycastlePqcCryptoXmssXMSSReducedSignature *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSReducedSignature_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSReducedSignature_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSSignature_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSSignature_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSSignature_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withIndexWithInt:index])) withRandomWithByteArray:random])) withWOTSPlusSignatureWithOrgBouncycastlePqcCryptoXmssWOTSPlusSignature:
#line 89
      wotsPlusSignature])) withAuthPathWithJavaUtilList:
#line 90
      [((OrgBouncycastlePqcCryptoXmssBDS *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getBDSState])) getAuthenticationPath]])) build])) toByteArray]);
    }
    @finally {
      
#line 95
      [((OrgBouncycastlePqcCryptoXmssBDS *) nil_chk([((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getBDSState])) markUsed];
      (void) [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) rollKey];
    }
  }
}


#line 101
- (jlong)getUsagesRemaining {
  
#line 103
  return [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getUsagesRemaining];
}


#line 106
- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                           withByteArray:(IOSByteArray *)signature {
  
#line 110
  OrgBouncycastlePqcCryptoXmssXMSSSignature *sig = [((OrgBouncycastlePqcCryptoXmssXMSSSignature_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssXMSSSignature_Builder_initWithOrgBouncycastlePqcCryptoXmssXMSSParameters_(params_) withSignatureWithByteArray:signature])) build];
  
#line 113
  jint index = [((OrgBouncycastlePqcCryptoXmssXMSSSignature *) nil_chk(sig)) getIndex];
  
#line 115
  [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getTreeDigestSize]] withByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *) nil_chk(publicKey_)) getPublicSeed]];
  
#line 118
  IOSByteArray *concatenated = OrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_([sig getRandom], [((OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *) nil_chk(publicKey_)) getRoot], OrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(
#line 119
  index, [((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getTreeDigestSize]));
  IOSByteArray *messageDigest = [((OrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk(khf_)) HMsgWithByteArray:concatenated withByteArray:message];
  
#line 122
  jint xmssHeight = [((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getHeight];
  jint indexLeaf = OrgBouncycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(index, xmssHeight);
  
#line 126
  OrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress = (OrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withOTSAddressWithInt:index])) build], [OrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
  OrgBouncycastlePqcCryptoXmssXMSSNode *rootNodeFromSignature = OrgBouncycastlePqcCryptoXmssXMSSVerifierUtil_getRootNodeFromSignatureWithOrgBouncycastlePqcCryptoXmssWOTSPlus_withInt_withByteArray_withOrgBouncycastlePqcCryptoXmssXMSSReducedSignature_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_withInt_(wotsPlus_, xmssHeight, messageDigest, sig, otsHashAddress, indexLeaf);
  
#line 129
  return OrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_([((OrgBouncycastlePqcCryptoXmssXMSSNode *) nil_chk(rootNodeFromSignature)) getValue], [((OrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters *) nil_chk(publicKey_)) getRoot]);
}


#line 132
- (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getUpdatedPrivateKey {
  
#line 137
  @synchronized(privateKey_) {
    
#line 139
    if (hasGenerated_) {
      
#line 141
      OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *privKey = privateKey_;
      
#line 143
      privateKey_ = nil;
      
#line 145
      return JreRetainedLocalValue(privKey);
    }
    else {
      
#line 149
      OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *privKey = privateKey_;
      
#line 151
      if (privKey != nil) {
        
#line 153
        privateKey_ = [((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getNextKey];
      }
      
#line 156
      return JreRetainedLocalValue(privKey);
    }
  }
}


#line 161
- (OrgBouncycastlePqcCryptoXmssWOTSPlusSignature *)wotsSignWithByteArray:(IOSByteArray *)messageDigest
                          withOrgBouncycastlePqcCryptoXmssOTSHashAddress:(OrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  return OrgBouncycastlePqcCryptoXmssXMSSSigner_wotsSignWithByteArray_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, messageDigest, otsHashAddress);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssWOTSPlusSignature;", 0x2, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(generateSignatureWithByteArray:);
  methods[3].selector = @selector(getUsagesRemaining);
  methods[4].selector = @selector(verifySignatureWithByteArray:withByteArray:);
  methods[5].selector = @selector(getUpdatedPrivateKey);
  methods[6].selector = @selector(wotsSignWithByteArray:withOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "privateKey_", "LOrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicKey_", "LOrgBouncycastlePqcCryptoXmssXMSSPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "params_", "LOrgBouncycastlePqcCryptoXmssXMSSParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "wotsPlus_", "LOrgBouncycastlePqcCryptoXmssWOTSPlus;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "khf_", "LOrgBouncycastlePqcCryptoXmssKeyedHashFunctions;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initSign_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasGenerated_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgBouncycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[B[B", "wotsSign", "[BLOrgBouncycastlePqcCryptoXmssOTSHashAddress;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoXmssXMSSSigner = { "XMSSSigner", "org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x1, 7, 7, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoXmssXMSSSigner;
}

@end


#line 9
void OrgBouncycastlePqcCryptoXmssXMSSSigner_init(OrgBouncycastlePqcCryptoXmssXMSSSigner *self) {
  NSObject_init(self);
}


#line 9
OrgBouncycastlePqcCryptoXmssXMSSSigner *new_OrgBouncycastlePqcCryptoXmssXMSSSigner_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssXMSSSigner, init)
}


#line 9
OrgBouncycastlePqcCryptoXmssXMSSSigner *create_OrgBouncycastlePqcCryptoXmssXMSSSigner_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssXMSSSigner, init)
}


#line 161
OrgBouncycastlePqcCryptoXmssWOTSPlusSignature *OrgBouncycastlePqcCryptoXmssXMSSSigner_wotsSignWithByteArray_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(OrgBouncycastlePqcCryptoXmssXMSSSigner *self, IOSByteArray *messageDigest, OrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress) {
  
#line 163
  if (((IOSByteArray *) nil_chk(messageDigest))->size_ != [((OrgBouncycastlePqcCryptoXmssXMSSParameters *) nil_chk(self->params_)) getTreeDigestSize]) {
    
#line 165
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of messageDigest needs to be equal to size of digest");
  }
  if (otsHashAddress == nil) {
    
#line 169
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  
#line 172
  [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(self->wotsPlus_)) importKeysWithByteArray:[self->wotsPlus_ getWOTSPlusSecretKeyWithByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(self->privateKey_)) getSecretKeySeed] withOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress] withByteArray:[((OrgBouncycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(self->privateKey_)) getPublicSeed]];
  
#line 174
  return [((OrgBouncycastlePqcCryptoXmssWOTSPlus *) nil_chk(self->wotsPlus_)) signWithByteArray:messageDigest withOrgBouncycastlePqcCryptoXmssOTSHashAddress:otsHashAddress];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoXmssXMSSSigner)
