//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/WOTSPlus.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/pqc/crypto/xmss/KeyedHashFunctions.h"
#include "org/bouncycastle/pqc/crypto/xmss/OTSHashAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlus.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlusParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlusPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlusPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/xmss/WOTSPlusSignature.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSAddress.h"
#include "org/bouncycastle/pqc/crypto/xmss/XMSSUtil.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/xmss/WOTSPlus must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoXmssWOTSPlus () {
 @public
  /*!
   @brief WOTS+ parameters.
   */
  OrgBouncycastlePqcCryptoXmssWOTSPlusParameters *params_;
  /*!
   @brief Randomization functions.
   */
  OrgBouncycastlePqcCryptoXmssKeyedHashFunctions *khf_;
  /*!
   @brief WOTS+ secret key seed.
   */
  IOSByteArray *secretKeySeed_;
  /*!
   @brief WOTS+ public seed.
   */
  IOSByteArray *publicSeed_;
}

/*!
 @brief Computes an iteration of F on an n-byte input using outputs of PRF.
 @param startHash Starting point.
 @param startIndex Start index.
 @param steps Steps to take.
 @param otsHashAddress OTS hash address for randomization.
 @return Value obtained by iterating F for steps times on input startHash,
  using the outputs of PRF.
 */
- (IOSByteArray *)chainWithByteArray:(IOSByteArray *)startHash
                             withInt:(jint)startIndex
                             withInt:(jint)steps
withOrgBouncycastlePqcCryptoXmssOTSHashAddress:(OrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress;

/*!
 @brief Obtain base w values from Input.
 @param messageDigest Input data.
 @param w Base.
 @param outLength Length of output.
 @return outLength-length list of base w integers.
 */
- (id<JavaUtilList>)convertToBaseWWithByteArray:(IOSByteArray *)messageDigest
                                        withInt:(jint)w
                                        withInt:(jint)outLength;

/*!
 @brief Derive private key at index from secret key seed.
 @param index Index.
 @return Private key at index.
 */
- (IOSByteArray *)expandSecretKeySeedWithInt:(jint)index;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssWOTSPlus, params_, OrgBouncycastlePqcCryptoXmssWOTSPlusParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssWOTSPlus, khf_, OrgBouncycastlePqcCryptoXmssKeyedHashFunctions *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssWOTSPlus, secretKeySeed_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoXmssWOTSPlus, publicSeed_, IOSByteArray *)

__attribute__((unused)) static IOSByteArray *OrgBouncycastlePqcCryptoXmssWOTSPlus_chainWithByteArray_withInt_withInt_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(OrgBouncycastlePqcCryptoXmssWOTSPlus *self, IOSByteArray *startHash, jint startIndex, jint steps, OrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress);

__attribute__((unused)) static id<JavaUtilList> OrgBouncycastlePqcCryptoXmssWOTSPlus_convertToBaseWWithByteArray_withInt_withInt_(OrgBouncycastlePqcCryptoXmssWOTSPlus *self, IOSByteArray *messageDigest, jint w, jint outLength);

__attribute__((unused)) static IOSByteArray *OrgBouncycastlePqcCryptoXmssWOTSPlus_expandSecretKeySeedWithInt_(OrgBouncycastlePqcCryptoXmssWOTSPlus *self, jint index);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/xmss/WOTSPlus.java"


#line 11
@implementation OrgBouncycastlePqcCryptoXmssWOTSPlus


#line 37
- (instancetype)initPackagePrivateWithOrgBouncycastlePqcCryptoXmssWOTSPlusParameters:(OrgBouncycastlePqcCryptoXmssWOTSPlusParameters *)params {
  OrgBouncycastlePqcCryptoXmssWOTSPlus_initPackagePrivateWithOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_(self, params);
  return self;
}


#line 57
- (void)importKeysWithByteArray:(IOSByteArray *)secretKeySeed
                  withByteArray:(IOSByteArray *)publicSeed {
  if (secretKeySeed == nil) {
    
#line 61
    @throw new_JavaLangNullPointerException_initWithNSString_(@"secretKeySeed == null");
  }
  if (secretKeySeed->size_ != [((OrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk(params_)) getTreeDigestSize]) {
    
#line 65
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of secretKeySeed needs to be equal to size of digest");
  }
  if (publicSeed == nil) {
    
#line 69
    @throw new_JavaLangNullPointerException_initWithNSString_(@"publicSeed == null");
  }
  if (publicSeed->size_ != [params_ getTreeDigestSize]) {
    
#line 73
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of publicSeed needs to be equal to size of digest");
  }
  self->secretKeySeed_ = secretKeySeed;
  self->publicSeed_ = publicSeed;
}


#line 86
- (OrgBouncycastlePqcCryptoXmssWOTSPlusSignature *)signWithByteArray:(IOSByteArray *)messageDigest
                      withOrgBouncycastlePqcCryptoXmssOTSHashAddress:(OrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  if (messageDigest == nil) {
    
#line 90
    @throw new_JavaLangNullPointerException_initWithNSString_(@"messageDigest == null");
  }
  if (messageDigest->size_ != [((OrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk(params_)) getTreeDigestSize]) {
    
#line 94
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of messageDigest needs to be equal to size of digest");
  }
  if (otsHashAddress == nil) {
    
#line 98
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  id<JavaUtilList> baseWMessage = OrgBouncycastlePqcCryptoXmssWOTSPlus_convertToBaseWWithByteArray_withInt_withInt_(self, messageDigest, [params_ getWinternitzParameter], [params_ getLen1]);
  
#line 102
  jint checksum = 0;
  for (jint i = 0; i < [params_ getLen1]; i++) {
    
#line 105
    checksum += [params_ getWinternitzParameter] - 1 - [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(baseWMessage)) getWithInt:i])) intValue];
  }
  JreLShiftAssignInt(&checksum, (8 - (JreIntMod(([params_ getLen2] * OrgBouncycastlePqcCryptoXmssXMSSUtil_log2WithInt_([params_ getWinternitzParameter])), 8))));
  jint len2Bytes = JreFpToInt(JavaLangMath_ceilWithDouble_(
#line 109
  (jdouble) ([params_ getLen2] * OrgBouncycastlePqcCryptoXmssXMSSUtil_log2WithInt_([params_ getWinternitzParameter])) / 8));
  id<JavaUtilList> baseWChecksum = OrgBouncycastlePqcCryptoXmssWOTSPlus_convertToBaseWWithByteArray_withInt_withInt_(self, OrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(checksum, len2Bytes),
#line 111
  [params_ getWinternitzParameter], [params_ getLen2]);
  
#line 114
  [((id<JavaUtilList>) nil_chk(baseWMessage)) addAllWithJavaUtilCollection:baseWChecksum];
  
#line 117
  IOSObjectArray *signature = [IOSObjectArray newArrayWithLength:[params_ getLen] type:IOSClass_byteArray(1)];
  for (jint i = 0; i < [params_ getLen]; i++) {
    
#line 120
    otsHashAddress = (OrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:
#line 121
    [((OrgBouncycastlePqcCryptoXmssOTSHashAddress *) nil_chk(otsHashAddress)) getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withOTSAddressWithInt:
#line 122
    [otsHashAddress getOTSAddress]])) withChainAddressWithInt:i])) withHashAddressWithInt:
#line 123
    [otsHashAddress getHashAddress]])) withKeyAndMaskWithInt:[otsHashAddress getKeyAndMask]])) build], [OrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
    
#line 125
    (void) IOSObjectArray_Set(signature, i, OrgBouncycastlePqcCryptoXmssWOTSPlus_chainWithByteArray_withInt_withInt_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, OrgBouncycastlePqcCryptoXmssWOTSPlus_expandSecretKeySeedWithInt_(self, i), 0, [((JavaLangInteger *) nil_chk([baseWMessage getWithInt:i])) intValue], otsHashAddress));
  }
  return new_OrgBouncycastlePqcCryptoXmssWOTSPlusSignature_initPackagePrivateWithOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_withByteArray2_(params_, signature);
}


#line 138
- (OrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters *)getPublicKeyFromSignatureWithByteArray:(IOSByteArray *)messageDigest
                                                  withOrgBouncycastlePqcCryptoXmssWOTSPlusSignature:(OrgBouncycastlePqcCryptoXmssWOTSPlusSignature *)signature
                                                     withOrgBouncycastlePqcCryptoXmssOTSHashAddress:(OrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  if (messageDigest == nil) {
    
#line 143
    @throw new_JavaLangNullPointerException_initWithNSString_(@"messageDigest == null");
  }
  if (messageDigest->size_ != [((OrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk(params_)) getTreeDigestSize]) {
    
#line 147
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of messageDigest needs to be equal to size of digest");
  }
  if (signature == nil) {
    
#line 151
    @throw new_JavaLangNullPointerException_initWithNSString_(@"signature == null");
  }
  if (otsHashAddress == nil) {
    
#line 155
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  id<JavaUtilList> baseWMessage = OrgBouncycastlePqcCryptoXmssWOTSPlus_convertToBaseWWithByteArray_withInt_withInt_(self, messageDigest, [params_ getWinternitzParameter], [params_ getLen1]);
  
#line 159
  jint checksum = 0;
  for (jint i = 0; i < [params_ getLen1]; i++) {
    
#line 162
    checksum += [params_ getWinternitzParameter] - 1 - [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(baseWMessage)) getWithInt:i])) intValue];
  }
  JreLShiftAssignInt(&checksum, (8 - (JreIntMod(([params_ getLen2] * OrgBouncycastlePqcCryptoXmssXMSSUtil_log2WithInt_([params_ getWinternitzParameter])), 8))));
  jint len2Bytes = JreFpToInt(JavaLangMath_ceilWithDouble_(
#line 166
  (jdouble) ([params_ getLen2] * OrgBouncycastlePqcCryptoXmssXMSSUtil_log2WithInt_([params_ getWinternitzParameter])) / 8));
  id<JavaUtilList> baseWChecksum = OrgBouncycastlePqcCryptoXmssWOTSPlus_convertToBaseWWithByteArray_withInt_withInt_(self, OrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(checksum, len2Bytes),
#line 168
  [params_ getWinternitzParameter], [params_ getLen2]);
  
#line 171
  [((id<JavaUtilList>) nil_chk(baseWMessage)) addAllWithJavaUtilCollection:baseWChecksum];
  
#line 173
  IOSObjectArray *publicKey = [IOSObjectArray newArrayWithLength:[params_ getLen] type:IOSClass_byteArray(1)];
  for (jint i = 0; i < [params_ getLen]; i++) {
    
#line 176
    otsHashAddress = (OrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:
#line 177
    [((OrgBouncycastlePqcCryptoXmssOTSHashAddress *) nil_chk(otsHashAddress)) getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withOTSAddressWithInt:
#line 178
    [otsHashAddress getOTSAddress]])) withChainAddressWithInt:i])) withHashAddressWithInt:
#line 179
    [otsHashAddress getHashAddress]])) withKeyAndMaskWithInt:[otsHashAddress getKeyAndMask]])) build], [OrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
    
#line 181
    (void) IOSObjectArray_Set(publicKey, i, OrgBouncycastlePqcCryptoXmssWOTSPlus_chainWithByteArray_withInt_withInt_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, IOSObjectArray_Get(nil_chk([signature toByteArray]), i), [((JavaLangInteger *) nil_chk([baseWMessage getWithInt:i])) intValue],
#line 182
    [params_ getWinternitzParameter] - 1 - [((JavaLangInteger *) nil_chk([baseWMessage getWithInt:i])) intValue], otsHashAddress));
  }
  return new_OrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters_initPackagePrivateWithOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_withByteArray2_(params_, publicKey);
}


#line 197
- (IOSByteArray *)chainWithByteArray:(IOSByteArray *)startHash
                             withInt:(jint)startIndex
                             withInt:(jint)steps
withOrgBouncycastlePqcCryptoXmssOTSHashAddress:(OrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  return OrgBouncycastlePqcCryptoXmssWOTSPlus_chainWithByteArray_withInt_withInt_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, startHash, startIndex, steps, otsHashAddress);
}


#line 254
- (id<JavaUtilList>)convertToBaseWWithByteArray:(IOSByteArray *)messageDigest
                                        withInt:(jint)w
                                        withInt:(jint)outLength {
  return OrgBouncycastlePqcCryptoXmssWOTSPlus_convertToBaseWWithByteArray_withInt_withInt_(self, messageDigest, w, outLength);
}


#line 292
- (IOSByteArray *)getWOTSPlusSecretKeyWithByteArray:(IOSByteArray *)secretKeySeed
     withOrgBouncycastlePqcCryptoXmssOTSHashAddress:(OrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  otsHashAddress = (OrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:
#line 295
  [((OrgBouncycastlePqcCryptoXmssOTSHashAddress *) nil_chk(otsHashAddress)) getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withOTSAddressWithInt:
#line 296
  [otsHashAddress getOTSAddress]])) build], [OrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
  return [((OrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk(khf_)) PRFWithByteArray:secretKeySeed withByteArray:[((OrgBouncycastlePqcCryptoXmssOTSHashAddress *) nil_chk(otsHashAddress)) toByteArray]];
}


#line 306
- (IOSByteArray *)expandSecretKeySeedWithInt:(jint)index {
  return OrgBouncycastlePqcCryptoXmssWOTSPlus_expandSecretKeySeedWithInt_(self, index);
}


#line 320
- (OrgBouncycastlePqcCryptoXmssWOTSPlusParameters *)getParams {
  
#line 322
  return params_;
}


#line 330
- (OrgBouncycastlePqcCryptoXmssKeyedHashFunctions *)getKhf {
  
#line 332
  return khf_;
}


#line 340
- (IOSByteArray *)getSecretKeySeed {
  
#line 342
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(secretKeySeed_);
}


#line 350
- (IOSByteArray *)getPublicSeed {
  
#line 352
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(publicSeed_);
}


#line 360
- (OrgBouncycastlePqcCryptoXmssWOTSPlusPrivateKeyParameters *)getPrivateKey {
  
#line 362
  IOSObjectArray *privateKey = [IOSObjectArray newArrayWithLength:[((OrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk(params_)) getLen] type:IOSClass_byteArray(1)];
  for (jint i = 0; i < privateKey->size_; i++) {
    
#line 365
    (void) IOSObjectArray_Set(privateKey, i, OrgBouncycastlePqcCryptoXmssWOTSPlus_expandSecretKeySeedWithInt_(self, i));
  }
  return new_OrgBouncycastlePqcCryptoXmssWOTSPlusPrivateKeyParameters_initPackagePrivateWithOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_withByteArray2_(params_, privateKey);
}


#line 377
- (OrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters *)getPublicKeyWithOrgBouncycastlePqcCryptoXmssOTSHashAddress:(OrgBouncycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  
#line 379
  if (otsHashAddress == nil) {
    
#line 381
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  IOSObjectArray *publicKey = [IOSObjectArray newArrayWithLength:[((OrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk(params_)) getLen] type:IOSClass_byteArray(1)];
  
#line 385
  for (jint i = 0; i < [params_ getLen]; i++) {
    
#line 387
    otsHashAddress = (OrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:
#line 388
    [((OrgBouncycastlePqcCryptoXmssOTSHashAddress *) nil_chk(otsHashAddress)) getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withOTSAddressWithInt:
#line 389
    [otsHashAddress getOTSAddress]])) withChainAddressWithInt:i])) withHashAddressWithInt:
#line 390
    [otsHashAddress getHashAddress]])) withKeyAndMaskWithInt:[otsHashAddress getKeyAndMask]])) build], [OrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
    
#line 392
    (void) IOSObjectArray_Set(publicKey, i, OrgBouncycastlePqcCryptoXmssWOTSPlus_chainWithByteArray_withInt_withInt_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, OrgBouncycastlePqcCryptoXmssWOTSPlus_expandSecretKeySeedWithInt_(self, i), 0, [params_ getWinternitzParameter] - 1, otsHashAddress));
  }
  return new_OrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters_initPackagePrivateWithOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_withByteArray2_(params_, publicKey);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssWOTSPlusSignature;", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters;", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 9, 10, -1, 11, -1, -1 },
    { NULL, "[B", 0x4, 12, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssWOTSPlusParameters;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssKeyedHashFunctions;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssWOTSPlusPrivateKeyParameters;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcCryptoXmssWOTSPlusPublicKeyParameters;", 0x0, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgBouncycastlePqcCryptoXmssWOTSPlusParameters:);
  methods[1].selector = @selector(importKeysWithByteArray:withByteArray:);
  methods[2].selector = @selector(signWithByteArray:withOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[3].selector = @selector(getPublicKeyFromSignatureWithByteArray:withOrgBouncycastlePqcCryptoXmssWOTSPlusSignature:withOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[4].selector = @selector(chainWithByteArray:withInt:withInt:withOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[5].selector = @selector(convertToBaseWWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(getWOTSPlusSecretKeyWithByteArray:withOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  methods[7].selector = @selector(expandSecretKeySeedWithInt:);
  methods[8].selector = @selector(getParams);
  methods[9].selector = @selector(getKhf);
  methods[10].selector = @selector(getSecretKeySeed);
  methods[11].selector = @selector(getPublicSeed);
  methods[12].selector = @selector(getPrivateKey);
  methods[13].selector = @selector(getPublicKeyWithOrgBouncycastlePqcCryptoXmssOTSHashAddress:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LOrgBouncycastlePqcCryptoXmssWOTSPlusParameters;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "khf_", "LOrgBouncycastlePqcCryptoXmssKeyedHashFunctions;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "secretKeySeed_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicSeed_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcCryptoXmssWOTSPlusParameters;", "importKeys", "[B[B", "sign", "[BLOrgBouncycastlePqcCryptoXmssOTSHashAddress;", "getPublicKeyFromSignature", "[BLOrgBouncycastlePqcCryptoXmssWOTSPlusSignature;LOrgBouncycastlePqcCryptoXmssOTSHashAddress;", "chain", "[BIILOrgBouncycastlePqcCryptoXmssOTSHashAddress;", "convertToBaseW", "[BII", "([BII)Ljava/util/List<Ljava/lang/Integer;>;", "getWOTSPlusSecretKey", "expandSecretKeySeed", "I", "getPublicKey", "LOrgBouncycastlePqcCryptoXmssOTSHashAddress;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoXmssWOTSPlus = { "WOTSPlus", "org.bouncycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x10, 14, 4, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoXmssWOTSPlus;
}

@end


#line 37
void OrgBouncycastlePqcCryptoXmssWOTSPlus_initPackagePrivateWithOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_(OrgBouncycastlePqcCryptoXmssWOTSPlus *self, OrgBouncycastlePqcCryptoXmssWOTSPlusParameters *params) {
  NSObject_init(self);
  
#line 40
  if (params == nil) {
    
#line 42
    @throw new_JavaLangNullPointerException_initWithNSString_(@"params == null");
  }
  self->params_ = params;
  jint n = [params getTreeDigestSize];
  self->khf_ = new_OrgBouncycastlePqcCryptoXmssKeyedHashFunctions_initPackagePrivateWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_([params getTreeDigest], n);
  self->secretKeySeed_ = [IOSByteArray newArrayWithLength:n];
  self->publicSeed_ = [IOSByteArray newArrayWithLength:n];
}


#line 37
OrgBouncycastlePqcCryptoXmssWOTSPlus *new_OrgBouncycastlePqcCryptoXmssWOTSPlus_initPackagePrivateWithOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_(OrgBouncycastlePqcCryptoXmssWOTSPlusParameters *params) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoXmssWOTSPlus, initPackagePrivateWithOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_, params)
}


#line 37
OrgBouncycastlePqcCryptoXmssWOTSPlus *create_OrgBouncycastlePqcCryptoXmssWOTSPlus_initPackagePrivateWithOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_(OrgBouncycastlePqcCryptoXmssWOTSPlusParameters *params) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoXmssWOTSPlus, initPackagePrivateWithOrgBouncycastlePqcCryptoXmssWOTSPlusParameters_, params)
}


#line 197
IOSByteArray *OrgBouncycastlePqcCryptoXmssWOTSPlus_chainWithByteArray_withInt_withInt_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(OrgBouncycastlePqcCryptoXmssWOTSPlus *self, IOSByteArray *startHash, jint startIndex, jint steps, OrgBouncycastlePqcCryptoXmssOTSHashAddress *otsHashAddress) {
  
#line 199
  jint n = [((OrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk(self->params_)) getTreeDigestSize];
  if (startHash == nil) {
    
#line 202
    @throw new_JavaLangNullPointerException_initWithNSString_(@"startHash == null");
  }
  if (startHash->size_ != n) {
    
#line 206
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"startHash needs to be ", n, @"bytes"));
  }
  if (otsHashAddress == nil) {
    
#line 210
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  if ([otsHashAddress toByteArray] == nil) {
    
#line 214
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress byte array == null");
  }
  if ((startIndex + steps) > [self->params_ getWinternitzParameter] - 1) {
    
#line 218
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"max chain length must not be greater than w");
  }
  
#line 221
  if (steps == 0) {
    
#line 223
    return startHash;
  }
  
#line 226
  IOSByteArray *tmp = OrgBouncycastlePqcCryptoXmssWOTSPlus_chainWithByteArray_withInt_withInt_withOrgBouncycastlePqcCryptoXmssOTSHashAddress_(self, startHash, startIndex, steps - 1, otsHashAddress);
  otsHashAddress = (OrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:
#line 228
  [otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withOTSAddressWithInt:
#line 229
  [otsHashAddress getOTSAddress]])) withChainAddressWithInt:[otsHashAddress getChainAddress]])) withHashAddressWithInt:
#line 230
  startIndex + steps - 1])) withKeyAndMaskWithInt:0])) build], [OrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
  IOSByteArray *key = [((OrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk(self->khf_)) PRFWithByteArray:self->publicSeed_ withByteArray:[((OrgBouncycastlePqcCryptoXmssOTSHashAddress *) nil_chk(otsHashAddress)) toByteArray]];
  otsHashAddress = (OrgBouncycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgBouncycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:
#line 233
  [otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withOTSAddressWithInt:
#line 234
  [otsHashAddress getOTSAddress]])) withChainAddressWithInt:[otsHashAddress getChainAddress]])) withHashAddressWithInt:
#line 235
  [otsHashAddress getHashAddress]])) withKeyAndMaskWithInt:1])) build], [OrgBouncycastlePqcCryptoXmssOTSHashAddress class]);
  IOSByteArray *bitmask = [self->khf_ PRFWithByteArray:self->publicSeed_ withByteArray:[((OrgBouncycastlePqcCryptoXmssOTSHashAddress *) nil_chk(otsHashAddress)) toByteArray]];
  IOSByteArray *tmpMasked = [IOSByteArray newArrayWithLength:n];
  for (jint i = 0; i < n; i++) {
    
#line 240
    *IOSByteArray_GetRef(tmpMasked, i) = (jbyte) (IOSByteArray_Get(nil_chk(tmp), i) ^ IOSByteArray_Get(nil_chk(bitmask), i));
  }
  tmp = [self->khf_ FWithByteArray:key withByteArray:tmpMasked];
  return tmp;
}


#line 254
id<JavaUtilList> OrgBouncycastlePqcCryptoXmssWOTSPlus_convertToBaseWWithByteArray_withInt_withInt_(OrgBouncycastlePqcCryptoXmssWOTSPlus *self, IOSByteArray *messageDigest, jint w, jint outLength) {
  
#line 256
  if (messageDigest == nil) {
    
#line 258
    @throw new_JavaLangNullPointerException_initWithNSString_(@"msg == null");
  }
  if (w != 4 && w != 16) {
    
#line 262
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"w needs to be 4 or 16");
  }
  jint logW = OrgBouncycastlePqcCryptoXmssXMSSUtil_log2WithInt_(w);
  if (outLength > (JreIntDiv((8 * messageDigest->size_), logW))) {
    
#line 267
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"outLength too big");
  }
  
#line 270
  JavaUtilArrayList *res = new_JavaUtilArrayList_init();
  for (jint i = 0; i < messageDigest->size_; i++) {
    
#line 273
    for (jint j = 8 - logW; j >= 0; j -= logW) {
      
#line 275
      [res addWithId:JavaLangInteger_valueOfWithInt_((JreRShift32(IOSByteArray_Get(messageDigest, i), j)) & (w - 1))];
      if ([res size] == outLength) {
        
#line 278
        return res;
      }
    }
  }
  return res;
}


#line 306
IOSByteArray *OrgBouncycastlePqcCryptoXmssWOTSPlus_expandSecretKeySeedWithInt_(OrgBouncycastlePqcCryptoXmssWOTSPlus *self, jint index) {
  
#line 308
  if (index < 0 || index >= [((OrgBouncycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk(self->params_)) getLen]) {
    
#line 310
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"index out of bounds");
  }
  return [((OrgBouncycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk(self->khf_)) PRFWithByteArray:self->secretKeySeed_ withByteArray:OrgBouncycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(index, 32)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoXmssWOTSPlus)
