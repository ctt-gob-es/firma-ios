//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/mceliece/McElieceCipher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoMcelieceMcElieceCipher")
#ifdef RESTRICT_OrgBouncycastlePqcCryptoMcelieceMcElieceCipher
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoMcelieceMcElieceCipher 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoMcelieceMcElieceCipher 1
#endif
#undef RESTRICT_OrgBouncycastlePqcCryptoMcelieceMcElieceCipher

#if !defined (OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoMcelieceMcElieceCipher || defined(INCLUDE_OrgBouncycastlePqcCryptoMcelieceMcElieceCipher))
#define OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_

#define RESTRICT_OrgBouncycastlePqcCryptoMessageEncryptor 1
#define INCLUDE_OrgBouncycastlePqcCryptoMessageEncryptor 1
#include "org/bouncycastle/pqc/crypto/MessageEncryptor.h"

@class IOSByteArray;
@class OrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters;
@protocol OrgBouncycastleCryptoCipherParameters;

/*!
 @brief This class implements the McEliece Public Key cryptosystem (McEliecePKCS).It
  was first described in R.J.
 McEliece, "A public key cryptosystem based on
  algebraic coding theory", DSN progress report, 42-44:114-116, 1978. The
  McEliecePKCS is the first cryptosystem which is based on error correcting
  codes. The trapdoor for the McEliece cryptosystem using Goppa codes is the
  knowledge of the Goppa polynomial used to generate the code.
 */
@interface OrgBouncycastlePqcCryptoMcelieceMcElieceCipher : NSObject < OrgBouncycastlePqcCryptoMessageEncryptor > {
 @public
  jint maxPlainTextSize_;
  jint cipherTextSize_;
}

#pragma mark Public

- (instancetype)init;

/*!
 @brief Return the key size of the given key object.
 @param key the McElieceKeyParameters object
 @return the keysize of the given key object
 */
- (jint)getKeySizeWithOrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters *)key;

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)param OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Decrypt a cipher text.
 @param input the cipher text
 @return the plain text
 @throw InvalidCipherTextExceptionif the cipher text is invalid.
 */
- (IOSByteArray *)messageDecryptWithByteArray:(IOSByteArray *)input;

/*!
 @brief Encrypt a plain text.
 @param input the plain text
 @return the cipher text
 */
- (IOSByteArray *)messageEncryptWithByteArray:(IOSByteArray *)input;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoMcelieceMcElieceCipher)

/*!
 @brief The OID of the algorithm.
 */
inline NSString *OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_get_OID(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_OID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcCryptoMcelieceMcElieceCipher, OID, NSString *)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_init(OrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoMcelieceMcElieceCipher *new_OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoMcelieceMcElieceCipher *create_OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoMcelieceMcElieceCipher)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoMcelieceMcElieceCipher")
