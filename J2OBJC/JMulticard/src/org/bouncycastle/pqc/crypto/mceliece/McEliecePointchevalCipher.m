//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/mceliece/McEliecePointchevalCipher.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/CryptoServicesRegistrar.h"
#include "org/bouncycastle/crypto/Digest.h"
#include "org/bouncycastle/crypto/InvalidCipherTextException.h"
#include "org/bouncycastle/crypto/digests/SHA1Digest.h"
#include "org/bouncycastle/crypto/params/ParametersWithRandom.h"
#include "org/bouncycastle/crypto/prng/DigestRandomGenerator.h"
#include "org/bouncycastle/pqc/crypto/mceliece/Conversions.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2KeyParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2Primitives.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2PrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2PublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McEliecePointchevalCipher.h"
#include "org/bouncycastle/pqc/crypto/mceliece/Utils.h"
#include "org/bouncycastle/pqc/math/linearalgebra/ByteUtils.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2Vector.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/mceliece/McEliecePointchevalCipher must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher () {
 @public
  id<OrgBouncycastleCryptoDigest> messDigest_;
  JavaSecuritySecureRandom *sr_;
  /*!
   @brief The McEliece main parameters
   */
  jint n_;
  /*!
   @brief The McEliece main parameters
   */
  jint k_;
  /*!
   @brief The McEliece main parameters
   */
  jint t_;
  jboolean forEncryption_;
}

- (void)initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *)pubKey OBJC_METHOD_FAMILY_NONE;

- (void)initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *)privKey OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher, messDigest_, id<OrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher, sr_, JavaSecuritySecureRandom *)

__attribute__((unused)) static void OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher *self, OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *pubKey);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher *self, OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *privKey);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/mceliece/McEliecePointchevalCipher.java"

NSString *OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_OID = @"1.3.6.1.4.1.8301.3.1.3.4.2.2";


#line 23
@implementation OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 23
- (instancetype)init {
  OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 45
- (void)init__WithBoolean:(jboolean)forEncryption
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)param {
  
#line 49
  self->forEncryption_ = forEncryption;
  
#line 51
  if (forEncryption) {
    
#line 53
    if ([param isKindOfClass:[OrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      
#line 55
      OrgBouncycastleCryptoParamsParametersWithRandom *rParam = (OrgBouncycastleCryptoParamsParametersWithRandom *) param;
      
#line 57
      self->sr_ = [((OrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
      self->key_ = (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk([rParam getParameters], [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]);
      OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(self, (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]));
    }
    else {
      
#line 64
      self->sr_ = OrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
      self->key_ = (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]);
      OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(self, (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]));
    }
  }
  else {
    
#line 71
    self->key_ = (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]);
    OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(self, (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]));
  }
}


#line 84
- (jint)getKeySizeWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters *)key {
  
#line 88
  if ([key isKindOfClass:[OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]]) {
    
#line 90
    return [((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) key))) getN];
  }
  
#line 93
  if ([key isKindOfClass:[OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]]) {
    
#line 95
    return [((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) key))) getN];
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported type");
}

- (jint)decryptOutputSizeWithInt:(jint)inLen {
  
#line 104
  return 0;
}


#line 107
- (jint)encryptOutputSizeWithInt:(jint)inLen {
  
#line 109
  return 0;
}

- (void)initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *)pubKey {
  OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(self, pubKey);
}


#line 121
- (void)initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *)privKey {
  OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(self, privKey);
}


#line 129
- (IOSByteArray *)messageEncryptWithByteArray:(IOSByteArray *)input {
  
#line 132
  if (!forEncryption_) {
    
#line 134
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher initialised for decryption");
  }
  
#line 137
  jint kDiv8 = JreRShift32(k_, 3);
  
#line 140
  IOSByteArray *r = [IOSByteArray newArrayWithLength:kDiv8];
  [((JavaSecuritySecureRandom *) nil_chk(sr_)) nextBytesWithByteArray:r];
  
#line 144
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *rPrime = new_OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withJavaSecuritySecureRandom_(k_, sr_);
  
#line 147
  IOSByteArray *rPrimeBytes = [rPrime getEncoded];
  
#line 150
  IOSByteArray *mr = OrgBouncycastlePqcMathLinearalgebraByteUtils_concatenateWithByteArray_withByteArray_(input, r);
  
#line 153
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) updateWithByteArray:mr withInt:0 withInt:((IOSByteArray *) nil_chk(mr))->size_];
  IOSByteArray *hmr = [IOSByteArray newArrayWithLength:[((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) getDigestSize]];
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) doFinalWithByteArray:hmr withInt:0];
  
#line 159
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *z = OrgBouncycastlePqcCryptoMcelieceConversions_encodeWithInt_withInt_withByteArray_(n_, t_, hmr);
  
#line 162
  IOSByteArray *c1 = [((OrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Primitives_encryptionPrimitiveWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_withOrgBouncycastlePqcMathLinearalgebraGF2Vector_withOrgBouncycastlePqcMathLinearalgebraGF2Vector_((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]), rPrime,
#line 163
  z))) getEncoded];
  
#line 166
  OrgBouncycastleCryptoPrngDigestRandomGenerator *sr0 = new_OrgBouncycastleCryptoPrngDigestRandomGenerator_initWithOrgBouncycastleCryptoDigest_(new_OrgBouncycastleCryptoDigestsSHA1Digest_init());
  
#line 169
  [sr0 addSeedMaterialWithByteArray:rPrimeBytes];
  
#line 172
  IOSByteArray *c2 = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(input))->size_ + kDiv8];
  [sr0 nextBytesWithByteArray:c2];
  
#line 176
  for (jint i = 0; i < input->size_; i++) {
    
#line 178
    *IOSByteArray_GetRef(c2, i) ^= IOSByteArray_Get(input, i);
  }
  
#line 181
  for (jint i = 0; i < kDiv8; i++) {
    
#line 183
    *IOSByteArray_GetRef(c2, input->size_ + i) ^= IOSByteArray_Get(r, i);
  }
  
#line 187
  return OrgBouncycastlePqcMathLinearalgebraByteUtils_concatenateWithByteArray_withByteArray_(c1, c2);
}


#line 190
- (IOSByteArray *)messageDecryptWithByteArray:(IOSByteArray *)input {
  
#line 194
  if (forEncryption_) {
    
#line 196
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher initialised for decryption");
  }
  
#line 199
  jint c1Len = JreRShift32((n_ + 7), 3);
  jint c2Len = ((IOSByteArray *) nil_chk(input))->size_ - c1Len;
  
#line 203
  IOSObjectArray *c1c2 = OrgBouncycastlePqcMathLinearalgebraByteUtils_splitWithByteArray_withInt_(input, c1Len);
  IOSByteArray *c1 = IOSObjectArray_Get(nil_chk(c1c2), 0);
  IOSByteArray *c2 = IOSObjectArray_Get(c1c2, 1);
  
#line 208
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *c1Vec = OrgBouncycastlePqcMathLinearalgebraGF2Vector_OS2VPWithInt_withByteArray_(n_, c1);
  IOSObjectArray *c1Dec = OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Primitives_decryptionPrimitiveWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_withOrgBouncycastlePqcMathLinearalgebraGF2Vector_((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]),
#line 210
  c1Vec);
  IOSByteArray *rPrimeBytes = [((OrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(IOSObjectArray_Get(nil_chk(c1Dec), 0))) getEncoded];
  
#line 213
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *z = IOSObjectArray_Get(c1Dec, 1);
  
#line 216
  OrgBouncycastleCryptoPrngDigestRandomGenerator *sr0 = new_OrgBouncycastleCryptoPrngDigestRandomGenerator_initWithOrgBouncycastleCryptoDigest_(new_OrgBouncycastleCryptoDigestsSHA1Digest_init());
  
#line 219
  [sr0 addSeedMaterialWithByteArray:rPrimeBytes];
  
#line 222
  IOSByteArray *mrBytes = [IOSByteArray newArrayWithLength:c2Len];
  [sr0 nextBytesWithByteArray:mrBytes];
  
#line 226
  for (jint i = 0; i < c2Len; i++) {
    
#line 228
    *IOSByteArray_GetRef(mrBytes, i) ^= IOSByteArray_Get(nil_chk(c2), i);
  }
  
#line 232
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) updateWithByteArray:mrBytes withInt:0 withInt:mrBytes->size_];
  IOSByteArray *hmr = [IOSByteArray newArrayWithLength:[((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) getDigestSize]];
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) doFinalWithByteArray:hmr withInt:0];
  
#line 237
  c1Vec = OrgBouncycastlePqcCryptoMcelieceConversions_encodeWithInt_withInt_withByteArray_(n_, t_, hmr);
  
#line 240
  if (![((OrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(c1Vec)) isEqual:z]) {
    
#line 242
    @throw new_OrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"Bad Padding: Invalid ciphertext.");
  }
  
#line 246
  jint kDiv8 = JreRShift32(k_, 3);
  IOSObjectArray *mr = OrgBouncycastlePqcMathLinearalgebraByteUtils_splitWithByteArray_withInt_(mrBytes, c2Len - kDiv8);
  
#line 250
  return IOSObjectArray_Get(nil_chk(mr), 0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "I", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 14, 13, 15, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getKeySizeWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters:);
  methods[3].selector = @selector(decryptOutputSizeWithInt:);
  methods[4].selector = @selector(encryptOutputSizeWithInt:);
  methods[5].selector = @selector(initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters:);
  methods[6].selector = @selector(initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters:);
  methods[7].selector = @selector(messageEncryptWithByteArray:);
  methods[8].selector = @selector(messageDecryptWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "messDigest_", "LOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sr_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "t_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "LOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgBouncycastleCryptoCipherParameters;", "getKeySize", "LOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters;", "LJavaLangIllegalArgumentException;", "decryptOutputSize", "I", "encryptOutputSize", "initCipherEncrypt", "LOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters;", "initCipherDecrypt", "LOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters;", "messageEncrypt", "[B", "messageDecrypt", "LOrgBouncycastleCryptoInvalidCipherTextException;", &OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_OID };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher = { "McEliecePointchevalCipher", "org.bouncycastle.pqc.crypto.mceliece", ptrTable, methods, fields, 7, 0x1, 9, 8, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher;
}

@end


#line 23
void OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_init(OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher *self) {
  NSObject_init(self);
}


#line 23
OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher *new_OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher, init)
}


#line 23
OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher *create_OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher, init)
}


#line 113
void OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher *self, OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *pubKey) {
  
#line 115
  self->messDigest_ = OrgBouncycastlePqcCryptoMcelieceUtils_getDigestWithNSString_([((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) nil_chk(pubKey)) getDigest]);
  self->n_ = [pubKey getN];
  self->k_ = [pubKey getK];
  self->t_ = [pubKey getT];
}


#line 121
void OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher *self, OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *privKey) {
  
#line 123
  self->messDigest_ = OrgBouncycastlePqcCryptoMcelieceUtils_getDigestWithNSString_([((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) nil_chk(privKey)) getDigest]);
  self->n_ = [privKey getN];
  self->k_ = [privKey getK];
  self->t_ = [privKey getT];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher)
