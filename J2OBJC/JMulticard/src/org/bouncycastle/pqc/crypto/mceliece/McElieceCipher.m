//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/mceliece/McElieceCipher.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/CryptoServicesRegistrar.h"
#include "org/bouncycastle/crypto/InvalidCipherTextException.h"
#include "org/bouncycastle/crypto/params/ParametersWithRandom.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCipher.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McEliecePublicKeyParameters.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2Matrix.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2Vector.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2mField.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GoppaCode.h"
#include "org/bouncycastle/pqc/math/linearalgebra/Permutation.h"
#include "org/bouncycastle/pqc/math/linearalgebra/PolynomialGF2mSmallM.h"
#include "org/bouncycastle/pqc/math/linearalgebra/Vector.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/mceliece/McElieceCipher must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoMcelieceMcElieceCipher () {
 @public
  JavaSecuritySecureRandom *sr_;
  jint n_;
  jint k_;
  jint t_;
  OrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters *key_;
  jboolean forEncryption_;
}

- (void)initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *)pubKey OBJC_METHOD_FAMILY_NONE;

- (void)initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *)privKey OBJC_METHOD_FAMILY_NONE;

- (OrgBouncycastlePqcMathLinearalgebraGF2Vector *)computeMessageRepresentativeWithByteArray:(IOSByteArray *)input;

- (IOSByteArray *)computeMessageWithOrgBouncycastlePqcMathLinearalgebraGF2Vector:(OrgBouncycastlePqcMathLinearalgebraGF2Vector *)mr;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoMcelieceMcElieceCipher, sr_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoMcelieceMcElieceCipher, key_, OrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters *)

__attribute__((unused)) static void OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_(OrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self, OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *pubKey);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_(OrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self, OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *privKey);

__attribute__((unused)) static OrgBouncycastlePqcMathLinearalgebraGF2Vector *OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_computeMessageRepresentativeWithByteArray_(OrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self, IOSByteArray *input);

__attribute__((unused)) static IOSByteArray *OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_computeMessageWithOrgBouncycastlePqcMathLinearalgebraGF2Vector_(OrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self, OrgBouncycastlePqcMathLinearalgebraGF2Vector *mr);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/mceliece/McElieceCipher.java"

NSString *OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_OID = @"1.3.6.1.4.1.8301.3.1.3.4.1";


#line 26
@implementation OrgBouncycastlePqcCryptoMcelieceMcElieceCipher

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 26
- (instancetype)init {
  OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 52
- (void)init__WithBoolean:(jboolean)forEncryption
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)param {
  
#line 56
  self->forEncryption_ = forEncryption;
  if (forEncryption) {
    
#line 59
    if ([param isKindOfClass:[OrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      
#line 61
      OrgBouncycastleCryptoParamsParametersWithRandom *rParam = (OrgBouncycastleCryptoParamsParametersWithRandom *) param;
      
#line 63
      self->sr_ = [((OrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
      self->key_ = (OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) cast_chk([rParam getParameters], [OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class]);
      OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_(self, (OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class]));
    }
    else {
      
#line 70
      self->sr_ = OrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
      self->key_ = (OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class]);
      OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_(self, (OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class]));
    }
  }
  else {
    
#line 77
    self->key_ = (OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters class]);
    OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_(self, (OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters class]));
  }
}


#line 90
- (jint)getKeySizeWithOrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters *)key {
  
#line 93
  if ([key isKindOfClass:[OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class]]) {
    
#line 95
    return [((OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) key))) getN];
  }
  
#line 98
  if ([key isKindOfClass:[OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters class]]) {
    
#line 100
    return [((OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) key))) getN];
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported type");
}


#line 107
- (void)initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *)pubKey {
  OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_(self, pubKey);
}


#line 117
- (void)initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *)privKey {
  OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_(self, privKey);
}


#line 132
- (IOSByteArray *)messageEncryptWithByteArray:(IOSByteArray *)input {
  
#line 135
  if (!forEncryption_) {
    
#line 137
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher initialised for decryption");
  }
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *m = OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_computeMessageRepresentativeWithByteArray_(self, input);
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *z = new_OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withInt_withJavaSecuritySecureRandom_(n_, t_, sr_);
  
#line 142
  OrgBouncycastlePqcMathLinearalgebraGF2Matrix *g = [((OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class])))) getG];
  OrgBouncycastlePqcMathLinearalgebraVector *mG = [((OrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(g)) leftMultiplyWithOrgBouncycastlePqcMathLinearalgebraVector:m];
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *mGZ = (OrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((OrgBouncycastlePqcMathLinearalgebraVector *) nil_chk(mG)) addWithOrgBouncycastlePqcMathLinearalgebraVector:z], [OrgBouncycastlePqcMathLinearalgebraGF2Vector class]);
  
#line 146
  return [((OrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(mGZ)) getEncoded];
}


#line 149
- (OrgBouncycastlePqcMathLinearalgebraGF2Vector *)computeMessageRepresentativeWithByteArray:(IOSByteArray *)input {
  return OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_computeMessageRepresentativeWithByteArray_(self, input);
}


#line 164
- (IOSByteArray *)messageDecryptWithByteArray:(IOSByteArray *)input {
  
#line 168
  if (forEncryption_) {
    
#line 170
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher initialised for decryption");
  }
  
#line 173
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *vec = OrgBouncycastlePqcMathLinearalgebraGF2Vector_OS2VPWithInt_withByteArray_(n_, input);
  OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *privKey = (OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters class]);
  OrgBouncycastlePqcMathLinearalgebraGF2mField *field = [((OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) nil_chk(privKey)) getField];
  OrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *gp = [privKey getGoppaPoly];
  OrgBouncycastlePqcMathLinearalgebraGF2Matrix *sInv = [privKey getSInv];
  OrgBouncycastlePqcMathLinearalgebraPermutation *p1 = [privKey getP1];
  OrgBouncycastlePqcMathLinearalgebraPermutation *p2 = [privKey getP2];
  OrgBouncycastlePqcMathLinearalgebraGF2Matrix *h = [privKey getH];
  IOSObjectArray *qInv = [privKey getQInv];
  
#line 184
  OrgBouncycastlePqcMathLinearalgebraPermutation *p = [((OrgBouncycastlePqcMathLinearalgebraPermutation *) nil_chk(p1)) rightMultiplyWithOrgBouncycastlePqcMathLinearalgebraPermutation:p2];
  
#line 187
  OrgBouncycastlePqcMathLinearalgebraPermutation *pInv = [((OrgBouncycastlePqcMathLinearalgebraPermutation *) nil_chk(p)) computeInverse];
  
#line 190
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *cPInv = (OrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((OrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(vec)) multiplyWithOrgBouncycastlePqcMathLinearalgebraPermutation:pInv], [OrgBouncycastlePqcMathLinearalgebraGF2Vector class]);
  
#line 193
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *syndrome = (OrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((OrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(h)) rightMultiplyWithOrgBouncycastlePqcMathLinearalgebraVector:cPInv], [OrgBouncycastlePqcMathLinearalgebraGF2Vector class]);
  
#line 196
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *z = OrgBouncycastlePqcMathLinearalgebraGoppaCode_syndromeDecodeWithOrgBouncycastlePqcMathLinearalgebraGF2Vector_withOrgBouncycastlePqcMathLinearalgebraGF2mField_withOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_withOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallMArray_(syndrome, field, gp, qInv);
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *mSG = (OrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((OrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(cPInv)) addWithOrgBouncycastlePqcMathLinearalgebraVector:z], [OrgBouncycastlePqcMathLinearalgebraGF2Vector class]);
  
#line 200
  mSG = (OrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((OrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(mSG)) multiplyWithOrgBouncycastlePqcMathLinearalgebraPermutation:p1], [OrgBouncycastlePqcMathLinearalgebraGF2Vector class]);
  z = (OrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((OrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(z)) multiplyWithOrgBouncycastlePqcMathLinearalgebraPermutation:p], [OrgBouncycastlePqcMathLinearalgebraGF2Vector class]);
  
#line 204
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *mS = [((OrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(mSG)) extractRightVectorWithInt:k_];
  
#line 207
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *mVec = (OrgBouncycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((OrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(sInv)) leftMultiplyWithOrgBouncycastlePqcMathLinearalgebraVector:mS], [OrgBouncycastlePqcMathLinearalgebraGF2Vector class]);
  
#line 210
  return OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_computeMessageWithOrgBouncycastlePqcMathLinearalgebraGF2Vector_(self, mVec);
}


#line 213
- (IOSByteArray *)computeMessageWithOrgBouncycastlePqcMathLinearalgebraGF2Vector:(OrgBouncycastlePqcMathLinearalgebraGF2Vector *)mr {
  return OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_computeMessageWithOrgBouncycastlePqcMathLinearalgebraGF2Vector_(self, mr);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathLinearalgebraGF2Vector;", 0x2, 10, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 9, 12, -1, -1, -1 },
    { NULL, "[B", 0x2, 13, 14, 12, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getKeySizeWithOrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters:);
  methods[3].selector = @selector(initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters:);
  methods[4].selector = @selector(initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters:);
  methods[5].selector = @selector(messageEncryptWithByteArray:);
  methods[6].selector = @selector(computeMessageRepresentativeWithByteArray:);
  methods[7].selector = @selector(messageDecryptWithByteArray:);
  methods[8].selector = @selector(computeMessageWithOrgBouncycastlePqcMathLinearalgebraGF2Vector:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "sr_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "t_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxPlainTextSize_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "cipherTextSize_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "key_", "LOrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgBouncycastleCryptoCipherParameters;", "getKeySize", "LOrgBouncycastlePqcCryptoMcelieceMcElieceKeyParameters;", "initCipherEncrypt", "LOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters;", "initCipherDecrypt", "LOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters;", "messageEncrypt", "[B", "computeMessageRepresentative", "messageDecrypt", "LOrgBouncycastleCryptoInvalidCipherTextException;", "computeMessage", "LOrgBouncycastlePqcMathLinearalgebraGF2Vector;", &OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_OID };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoMcelieceMcElieceCipher = { "McElieceCipher", "org.bouncycastle.pqc.crypto.mceliece", ptrTable, methods, fields, 7, 0x1, 9, 9, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoMcelieceMcElieceCipher;
}

@end


#line 26
void OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_init(OrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self) {
  NSObject_init(self);
}


#line 26
OrgBouncycastlePqcCryptoMcelieceMcElieceCipher *new_OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoMcelieceMcElieceCipher, init)
}


#line 26
OrgBouncycastlePqcCryptoMcelieceMcElieceCipher *create_OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoMcelieceMcElieceCipher, init)
}


#line 107
void OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_(OrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self, OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *pubKey) {
  
#line 109
  self->n_ = [((OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) nil_chk(pubKey)) getN];
  self->k_ = [pubKey getK];
  self->t_ = [pubKey getT];
  self->cipherTextSize_ = JreRShift32(self->n_, 3);
  self->maxPlainTextSize_ = (JreRShift32(self->k_, 3));
}

void OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_(OrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self, OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *privKey) {
  
#line 119
  self->n_ = [((OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) nil_chk(privKey)) getN];
  self->k_ = [privKey getK];
  
#line 122
  self->maxPlainTextSize_ = (JreRShift32(self->k_, 3));
  self->cipherTextSize_ = JreRShift32(self->n_, 3);
}


#line 149
OrgBouncycastlePqcMathLinearalgebraGF2Vector *OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_computeMessageRepresentativeWithByteArray_(OrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self, IOSByteArray *input) {
  
#line 151
  IOSByteArray *data = [IOSByteArray newArrayWithLength:self->maxPlainTextSize_ + ((self->k_ & (jint) 0x07) != 0 ? 1 : 0)];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(input, 0, data, 0, ((IOSByteArray *) nil_chk(input))->size_);
  *IOSByteArray_GetRef(data, input->size_) = (jint) 0x01;
  return OrgBouncycastlePqcMathLinearalgebraGF2Vector_OS2VPWithInt_withByteArray_(self->k_, data);
}


#line 213
IOSByteArray *OrgBouncycastlePqcCryptoMcelieceMcElieceCipher_computeMessageWithOrgBouncycastlePqcMathLinearalgebraGF2Vector_(OrgBouncycastlePqcCryptoMcelieceMcElieceCipher *self, OrgBouncycastlePqcMathLinearalgebraGF2Vector *mr) {
  
#line 216
  IOSByteArray *mrBytes = [((OrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(mr)) getEncoded];
  
#line 218
  jint index;
  for (index = ((IOSByteArray *) nil_chk(mrBytes))->size_ - 1; index >= 0 && IOSByteArray_Get(mrBytes, index) == 0; index--) {
    
#line 221
    
    ;
  }
  
#line 225
  if (index < 0 || IOSByteArray_Get(mrBytes, index) != (jint) 0x01) {
    
#line 227
    @throw new_OrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"Bad Padding: invalid ciphertext");
  }
  
#line 231
  IOSByteArray *mBytes = [IOSByteArray newArrayWithLength:index];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mrBytes, 0, mBytes, 0, index);
  return mBytes;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoMcelieceMcElieceCipher)
