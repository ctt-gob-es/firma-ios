//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/mceliece/McEliecePointchevalCipher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher")
#ifdef RESTRICT_OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher 1
#endif
#undef RESTRICT_OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher

#if !defined (OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher || defined(INCLUDE_OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher))
#define OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_

#define RESTRICT_OrgBouncycastlePqcCryptoMessageEncryptor 1
#define INCLUDE_OrgBouncycastlePqcCryptoMessageEncryptor 1
#include "org/bouncycastle/pqc/crypto/MessageEncryptor.h"

@class IOSByteArray;
@class OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters;
@protocol OrgBouncycastleCryptoCipherParameters;

/*!
 @brief This class implements the Pointcheval conversion of the McEliecePKCS.
 Pointcheval presents a generic technique to make a CCA2-secure cryptosystem
  from any partially trapdoor one-way function in the random oracle model. For
  details, see D. Engelbert, R. Overbeck, A. Schmidt, "A Summary of McEliece-Type Cryptosystems and their Security", technical report.
   https://www.degruyter.com/document/doi/10.1515/JMC.2007.009/html
 */
@interface OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher : NSObject < OrgBouncycastlePqcCryptoMessageEncryptor > {
 @public
  OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters *key_;
}

#pragma mark Public

- (instancetype)init;

/*!
 @brief Return the key size of the given key object.
 @param key the McElieceCCA2KeyParameters object
 @return the key size of the given key object
 @throw IllegalArgumentExceptionif the key is invalid
 */
- (jint)getKeySizeWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters *)key;

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)param OBJC_METHOD_FAMILY_NONE;

- (IOSByteArray *)messageDecryptWithByteArray:(IOSByteArray *)input;

- (IOSByteArray *)messageEncryptWithByteArray:(IOSByteArray *)input;

#pragma mark Protected

- (jint)decryptOutputSizeWithInt:(jint)inLen;

- (jint)encryptOutputSizeWithInt:(jint)inLen;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher)

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher, key_, OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters *)

/*!
 @brief The OID of the algorithm.
 */
inline NSString *OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_get_OID(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_OID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher, OID, NSString *)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_init(OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher *new_OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher *create_OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoMcelieceMcEliecePointchevalCipher")
