//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/mceliece/McElieceFujisakiCipher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher")
#ifdef RESTRICT_OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher 1
#endif
#undef RESTRICT_OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher

#if !defined (OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher || defined(INCLUDE_OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher))
#define OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_

#define RESTRICT_OrgBouncycastlePqcCryptoMessageEncryptor 1
#define INCLUDE_OrgBouncycastlePqcCryptoMessageEncryptor 1
#include "org/bouncycastle/pqc/crypto/MessageEncryptor.h"

@class IOSByteArray;
@class OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters;
@protocol OrgBouncycastleCryptoCipherParameters;

/*!
 @brief This class implements the Fujisaki/Okamoto conversion of the McEliecePKCS.
 Fujisaki and Okamoto propose hybrid encryption that merges a symmetric
  encryption scheme which is secure in the find-guess model with an asymmetric
  one-way encryption scheme which is sufficiently probabilistic to obtain a
  public key cryptosystem which is CCA2-secure. For details, see D. Engelbert,
  R. Overbeck, A. Schmidt, "A Summary of McEliece-Type Cryptosystems and their Security", technical report.
  https://www.degruyter.com/document/doi/10.1515/JMC.2007.009/html
 */
@interface OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher : NSObject < OrgBouncycastlePqcCryptoMessageEncryptor > {
 @public
  OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters *key_;
}

#pragma mark Public

- (instancetype)init;

- (jint)getKeySizeWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters *)key;

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)param OBJC_METHOD_FAMILY_NONE;

- (IOSByteArray *)messageDecryptWithByteArray:(IOSByteArray *)input;

- (IOSByteArray *)messageEncryptWithByteArray:(IOSByteArray *)input;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher)

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher, key_, OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters *)

/*!
 @brief The OID of the algorithm.
 */
inline NSString *OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_get_OID(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_OID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher, OID, NSString *)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_init(OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *new_OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *create_OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher")
