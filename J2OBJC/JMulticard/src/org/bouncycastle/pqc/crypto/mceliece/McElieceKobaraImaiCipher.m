//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/mceliece/McElieceKobaraImaiCipher.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/CryptoServicesRegistrar.h"
#include "org/bouncycastle/crypto/Digest.h"
#include "org/bouncycastle/crypto/InvalidCipherTextException.h"
#include "org/bouncycastle/crypto/digests/SHA1Digest.h"
#include "org/bouncycastle/crypto/params/ParametersWithRandom.h"
#include "org/bouncycastle/crypto/prng/DigestRandomGenerator.h"
#include "org/bouncycastle/pqc/crypto/mceliece/Conversions.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2KeyParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2Primitives.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2PrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2PublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceKobaraImaiCipher.h"
#include "org/bouncycastle/pqc/crypto/mceliece/Utils.h"
#include "org/bouncycastle/pqc/math/linearalgebra/ByteUtils.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2Vector.h"
#include "org/bouncycastle/pqc/math/linearalgebra/IntegerFunctions.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/mceliece/McElieceKobaraImaiCipher must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher () {
 @public
  id<OrgBouncycastleCryptoDigest> messDigest_;
  JavaSecuritySecureRandom *sr_;
  /*!
   @brief The McEliece main parameters
   */
  jint n_;
  /*!
   @brief The McEliece main parameters
   */
  jint k_;
  /*!
   @brief The McEliece main parameters
   */
  jint t_;
  jboolean forEncryption_;
}

- (void)initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *)pubKey OBJC_METHOD_FAMILY_NONE;

- (void)initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *)privKey OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher, messDigest_, id<OrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher, sr_, JavaSecuritySecureRandom *)

inline NSString *OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_get_DEFAULT_PRNG_NAME(void);
static NSString *OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_DEFAULT_PRNG_NAME = @"SHA1PRNG";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher, DEFAULT_PRNG_NAME, NSString *)

__attribute__((unused)) static void OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher *self, OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *pubKey);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher *self, OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *privKey);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/mceliece/McElieceKobaraImaiCipher.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher)

NSString *OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_OID = @"1.3.6.1.4.1.8301.3.1.3.4.2.3";
IOSByteArray *OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT;


#line 23
@implementation OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 23
- (instancetype)init {
  OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 54
- (void)init__WithBoolean:(jboolean)forEncryption
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)param {
  
#line 58
  self->forEncryption_ = forEncryption;
  if (forEncryption) {
    
#line 61
    if ([param isKindOfClass:[OrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      
#line 63
      OrgBouncycastleCryptoParamsParametersWithRandom *rParam = (OrgBouncycastleCryptoParamsParametersWithRandom *) param;
      
#line 65
      self->sr_ = [((OrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
      self->key_ = (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk([rParam getParameters], [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]);
      OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(self, (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]));
    }
    else {
      
#line 72
      self->sr_ = OrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
      self->key_ = (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]);
      OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(self, (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]));
    }
  }
  else {
    
#line 79
    self->key_ = (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]);
    OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(self, (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]));
  }
}


#line 91
- (jint)getKeySizeWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters *)key {
  
#line 93
  if ([key isKindOfClass:[OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]]) {
    
#line 95
    return [((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) key))) getN];
  }
  
#line 98
  if ([key isKindOfClass:[OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]]) {
    
#line 100
    return [((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) key))) getN];
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported type");
}


#line 105
- (void)initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *)pubKey {
  OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(self, pubKey);
}


#line 114
- (void)initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *)privKey {
  OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(self, privKey);
}


#line 122
- (IOSByteArray *)messageEncryptWithByteArray:(IOSByteArray *)input {
  
#line 125
  if (!forEncryption_) {
    
#line 127
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher initialised for decryption");
  }
  
#line 130
  jint c2Len = [((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) getDigestSize];
  jint c4Len = JreRShift32(k_, 3);
  jint c5Len = JreRShift32(([((JavaMathBigInteger *) nil_chk(OrgBouncycastlePqcMathLinearalgebraIntegerFunctions_binomialWithInt_withInt_(n_, t_))) bitLength] - 1), 3);
  
#line 135
  jint mLen = c4Len + c5Len - c2Len - ((IOSByteArray *) nil_chk(OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT))->size_;
  if (((IOSByteArray *) nil_chk(input))->size_ > mLen) {
    
#line 138
    mLen = input->size_;
  }
  
#line 141
  jint c1Len = mLen + OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT->size_;
  jint c6Len = c1Len + c2Len - c4Len - c5Len;
  
#line 145
  IOSByteArray *mConst = [IOSByteArray newArrayWithLength:c1Len];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(input, 0, mConst, 0, input->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT, 0, mConst, mLen,
#line 148
  OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT->size_);
  
#line 151
  IOSByteArray *r = [IOSByteArray newArrayWithLength:c2Len];
  [((JavaSecuritySecureRandom *) nil_chk(sr_)) nextBytesWithByteArray:r];
  
#line 156
  OrgBouncycastleCryptoPrngDigestRandomGenerator *sr0 = new_OrgBouncycastleCryptoPrngDigestRandomGenerator_initWithOrgBouncycastleCryptoDigest_(new_OrgBouncycastleCryptoDigestsSHA1Digest_init());
  
#line 159
  [sr0 addSeedMaterialWithByteArray:r];
  
#line 162
  IOSByteArray *c1 = [IOSByteArray newArrayWithLength:c1Len];
  [sr0 nextBytesWithByteArray:c1];
  
#line 166
  for (jint i = c1Len - 1; i >= 0; i--) {
    
#line 168
    *IOSByteArray_GetRef(c1, i) ^= IOSByteArray_Get(mConst, i);
  }
  
#line 172
  IOSByteArray *c2 = [IOSByteArray newArrayWithLength:[((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) getDigestSize]];
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) updateWithByteArray:c1 withInt:0 withInt:c1->size_];
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) doFinalWithByteArray:c2 withInt:0];
  
#line 177
  for (jint i = c2Len - 1; i >= 0; i--) {
    
#line 179
    *IOSByteArray_GetRef(c2, i) ^= IOSByteArray_Get(r, i);
  }
  
#line 183
  IOSByteArray *c2c1 = OrgBouncycastlePqcMathLinearalgebraByteUtils_concatenateWithByteArray_withByteArray_(c2, c1);
  
#line 188
  IOSByteArray *c6 = [IOSByteArray newArrayWithLength:0];
  if (c6Len > 0) {
    
#line 191
    c6 = [IOSByteArray newArrayWithLength:c6Len];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c2c1, 0, c6, 0, c6Len);
  }
  
#line 195
  IOSByteArray *c5 = [IOSByteArray newArrayWithLength:c5Len];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c2c1, c6Len, c5, 0, c5Len);
  
#line 198
  IOSByteArray *c4 = [IOSByteArray newArrayWithLength:c4Len];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c2c1, c6Len + c5Len, c4, 0, c4Len);
  
#line 202
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *c4Vec = OrgBouncycastlePqcMathLinearalgebraGF2Vector_OS2VPWithInt_withByteArray_(k_, c4);
  
#line 205
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *z = OrgBouncycastlePqcCryptoMcelieceConversions_encodeWithInt_withInt_withByteArray_(n_, t_, c5);
  
#line 208
  IOSByteArray *encC4 = [((OrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Primitives_encryptionPrimitiveWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_withOrgBouncycastlePqcMathLinearalgebraGF2Vector_withOrgBouncycastlePqcMathLinearalgebraGF2Vector_((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]),
#line 209
  c4Vec, z))) getEncoded];
  
#line 212
  if (c6Len > 0) {
    
#line 215
    return OrgBouncycastlePqcMathLinearalgebraByteUtils_concatenateWithByteArray_withByteArray_(c6, encC4);
  }
  
#line 218
  return encC4;
}


#line 222
- (IOSByteArray *)messageDecryptWithByteArray:(IOSByteArray *)input {
  
#line 226
  if (forEncryption_) {
    
#line 228
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher initialised for decryption");
  }
  
#line 231
  jint nDiv8 = JreRShift32(n_, 3);
  
#line 233
  if (((IOSByteArray *) nil_chk(input))->size_ < nDiv8) {
    
#line 235
    @throw new_OrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"Bad Padding: Ciphertext too short.");
  }
  
#line 238
  jint c2Len = [((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) getDigestSize];
  jint c4Len = JreRShift32(k_, 3);
  jint c5Len = JreRShift32(([((JavaMathBigInteger *) nil_chk(OrgBouncycastlePqcMathLinearalgebraIntegerFunctions_binomialWithInt_withInt_(n_, t_))) bitLength] - 1), 3);
  jint c6Len = input->size_ - nDiv8;
  
#line 244
  IOSByteArray *c6;
  
#line 244
  IOSByteArray *encC4;
  if (c6Len > 0) {
    
#line 247
    IOSObjectArray *c6EncC4 = OrgBouncycastlePqcMathLinearalgebraByteUtils_splitWithByteArray_withInt_(input, c6Len);
    c6 = IOSObjectArray_Get(nil_chk(c6EncC4), 0);
    encC4 = IOSObjectArray_Get(c6EncC4, 1);
  }
  else {
    
#line 253
    c6 = [IOSByteArray newArrayWithLength:0];
    encC4 = input;
  }
  
#line 258
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *encC4Vec = OrgBouncycastlePqcMathLinearalgebraGF2Vector_OS2VPWithInt_withByteArray_(n_, encC4);
  
#line 261
  IOSObjectArray *c4z = OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Primitives_decryptionPrimitiveWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_withOrgBouncycastlePqcMathLinearalgebraGF2Vector_((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]),
#line 262
  encC4Vec);
  IOSByteArray *c4 = [((OrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(IOSObjectArray_Get(nil_chk(c4z), 0))) getEncoded];
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *z = IOSObjectArray_Get(c4z, 1);
  
#line 267
  if (((IOSByteArray *) nil_chk(c4))->size_ > c4Len) {
    
#line 270
    c4 = OrgBouncycastlePqcMathLinearalgebraByteUtils_subArrayWithByteArray_withInt_withInt_(c4, 0, c4Len);
  }
  
#line 274
  IOSByteArray *c5 = OrgBouncycastlePqcCryptoMcelieceConversions_decodeWithInt_withInt_withOrgBouncycastlePqcMathLinearalgebraGF2Vector_(n_, t_, z);
  
#line 277
  if (((IOSByteArray *) nil_chk(c5))->size_ < c5Len) {
    
#line 279
    IOSByteArray *paddedC5 = [IOSByteArray newArrayWithLength:c5Len];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(c5, 0, paddedC5, c5Len - c5->size_, c5->size_);
    c5 = paddedC5;
  }
  
#line 285
  IOSByteArray *c6c5c4 = OrgBouncycastlePqcMathLinearalgebraByteUtils_concatenateWithByteArray_withByteArray_(c6, c5);
  c6c5c4 = OrgBouncycastlePqcMathLinearalgebraByteUtils_concatenateWithByteArray_withByteArray_(c6c5c4, c4);
  
#line 290
  jint c1Len = ((IOSByteArray *) nil_chk(c6c5c4))->size_ - c2Len;
  IOSObjectArray *c2c1 = OrgBouncycastlePqcMathLinearalgebraByteUtils_splitWithByteArray_withInt_(c6c5c4, c2Len);
  IOSByteArray *c2 = IOSObjectArray_Get(nil_chk(c2c1), 0);
  IOSByteArray *c1 = IOSObjectArray_Get(c2c1, 1);
  
#line 296
  IOSByteArray *rPrime = [IOSByteArray newArrayWithLength:[((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) getDigestSize]];
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) updateWithByteArray:c1 withInt:0 withInt:((IOSByteArray *) nil_chk(c1))->size_];
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) doFinalWithByteArray:rPrime withInt:0];
  
#line 301
  for (jint i = c2Len - 1; i >= 0; i--) {
    
#line 303
    *IOSByteArray_GetRef(rPrime, i) ^= IOSByteArray_Get(nil_chk(c2), i);
  }
  
#line 307
  OrgBouncycastleCryptoPrngDigestRandomGenerator *sr0 = new_OrgBouncycastleCryptoPrngDigestRandomGenerator_initWithOrgBouncycastleCryptoDigest_(new_OrgBouncycastleCryptoDigestsSHA1Digest_init());
  
#line 310
  [sr0 addSeedMaterialWithByteArray:rPrime];
  
#line 313
  IOSByteArray *mConstPrime = [IOSByteArray newArrayWithLength:c1Len];
  [sr0 nextBytesWithByteArray:mConstPrime];
  
#line 317
  for (jint i = c1Len - 1; i >= 0; i--) {
    
#line 319
    *IOSByteArray_GetRef(mConstPrime, i) ^= IOSByteArray_Get(c1, i);
  }
  
#line 322
  if (mConstPrime->size_ < c1Len) {
    
#line 324
    @throw new_OrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"Bad Padding: invalid ciphertext");
  }
  
#line 327
  IOSObjectArray *temp = OrgBouncycastlePqcMathLinearalgebraByteUtils_splitWithByteArray_withInt_(mConstPrime, c1Len - ((IOSByteArray *) nil_chk(
#line 328
  OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT))->size_);
  IOSByteArray *mr = IOSObjectArray_Get(nil_chk(temp), 0);
  IOSByteArray *constPrime = IOSObjectArray_Get(temp, 1);
  
#line 332
  if (!OrgBouncycastlePqcMathLinearalgebraByteUtils_equalsWithByteArray_withByteArray_(constPrime, OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT)) {
    
#line 334
    @throw new_OrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"Bad Padding: invalid ciphertext");
  }
  
#line 337
  return mr;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 10, 9, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getKeySizeWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters:);
  methods[3].selector = @selector(initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters:);
  methods[4].selector = @selector(initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters:);
  methods[5].selector = @selector(messageEncryptWithByteArray:);
  methods[6].selector = @selector(messageDecryptWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "DEFAULT_PRNG_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "PUBLIC_CONSTANT", "[B", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "messDigest_", "LOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sr_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "LOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "t_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgBouncycastleCryptoCipherParameters;", "getKeySize", "LOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters;", "initCipherEncrypt", "LOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters;", "initCipherDecrypt", "LOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters;", "messageEncrypt", "[B", "messageDecrypt", "LOrgBouncycastleCryptoInvalidCipherTextException;", &OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_OID, &OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_DEFAULT_PRNG_NAME, &OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher = { "McElieceKobaraImaiCipher", "org.bouncycastle.pqc.crypto.mceliece", ptrTable, methods, fields, 7, 0x1, 7, 10, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher;
}

+ (void)initialize {
  if (self == [OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher class]) {
    OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_PUBLIC_CONSTANT =
#line 37
    [@"a predetermined public constant" java_getBytes];
    J2OBJC_SET_INITIALIZED(OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher)
  }
}

@end


#line 23
void OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_init(OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher *self) {
  NSObject_init(self);
}


#line 23
OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher *new_OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher, init)
}


#line 23
OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher *create_OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher, init)
}


#line 105
void OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher *self, OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *pubKey) {
  
#line 107
  self->messDigest_ = OrgBouncycastlePqcCryptoMcelieceUtils_getDigestWithNSString_([((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) nil_chk(pubKey)) getDigest]);
  self->n_ = [pubKey getN];
  self->k_ = [pubKey getK];
  self->t_ = [pubKey getT];
}

void OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher_initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher *self, OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *privKey) {
  
#line 116
  self->messDigest_ = OrgBouncycastlePqcCryptoMcelieceUtils_getDigestWithNSString_([((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) nil_chk(privKey)) getDigest]);
  self->n_ = [privKey getN];
  self->k_ = [privKey getK];
  self->t_ = [privKey getT];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoMcelieceMcElieceKobaraImaiCipher)
