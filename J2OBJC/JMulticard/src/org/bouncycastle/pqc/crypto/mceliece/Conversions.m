//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/mceliece/Conversions.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/pqc/crypto/mceliece/Conversions.h"
#include "org/bouncycastle/pqc/math/linearalgebra/BigIntUtils.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2Vector.h"
#include "org/bouncycastle/pqc/math/linearalgebra/IntegerFunctions.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/mceliece/Conversions must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoMcelieceConversions ()

/*!
 @brief Default constructor (private).
 */
- (instancetype)initPackagePrivate;

@end

inline JavaMathBigInteger *OrgBouncycastlePqcCryptoMcelieceConversions_get_ZERO(void);
static JavaMathBigInteger *OrgBouncycastlePqcCryptoMcelieceConversions_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcCryptoMcelieceConversions, ZERO, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgBouncycastlePqcCryptoMcelieceConversions_get_ONE(void);
static JavaMathBigInteger *OrgBouncycastlePqcCryptoMcelieceConversions_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcCryptoMcelieceConversions, ONE, JavaMathBigInteger *)

__attribute__((unused)) static void OrgBouncycastlePqcCryptoMcelieceConversions_initPackagePrivate(OrgBouncycastlePqcCryptoMcelieceConversions *self);

__attribute__((unused)) static OrgBouncycastlePqcCryptoMcelieceConversions *new_OrgBouncycastlePqcCryptoMcelieceConversions_initPackagePrivate(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastlePqcCryptoMcelieceConversions *create_OrgBouncycastlePqcCryptoMcelieceConversions_initPackagePrivate(void);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/mceliece/Conversions.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastlePqcCryptoMcelieceConversions)


#line 13
@implementation OrgBouncycastlePqcCryptoMcelieceConversions


#line 21
- (instancetype)initPackagePrivate {
  OrgBouncycastlePqcCryptoMcelieceConversions_initPackagePrivate(self);
  return self;
}


#line 35
+ (OrgBouncycastlePqcMathLinearalgebraGF2Vector *)encodeWithInt:(jint)n
                                                        withInt:(jint)t
                                                  withByteArray:(IOSByteArray *)m {
  return OrgBouncycastlePqcCryptoMcelieceConversions_encodeWithInt_withInt_withByteArray_(n, t, m);
}


#line 91
+ (IOSByteArray *)decodeWithInt:(jint)n
                        withInt:(jint)t
withOrgBouncycastlePqcMathLinearalgebraGF2Vector:(OrgBouncycastlePqcMathLinearalgebraGF2Vector *)vec {
  return OrgBouncycastlePqcCryptoMcelieceConversions_decodeWithInt_withInt_withOrgBouncycastlePqcMathLinearalgebraGF2Vector_(n, t, vec);
}


#line 143
+ (IOSByteArray *)signConversionWithInt:(jint)n
                                withInt:(jint)t
                          withByteArray:(IOSByteArray *)m {
  return OrgBouncycastlePqcCryptoMcelieceConversions_signConversionWithInt_withInt_withByteArray_(n, t, m);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathLinearalgebraGF2Vector;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 4, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(encodeWithInt:withInt:withByteArray:);
  methods[2].selector = @selector(decodeWithInt:withInt:withOrgBouncycastlePqcMathLinearalgebraGF2Vector:);
  methods[3].selector = @selector(signConversionWithInt:withInt:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "encode", "II[B", "decode", "IILOrgBouncycastlePqcMathLinearalgebraGF2Vector;", "signConversion", &OrgBouncycastlePqcCryptoMcelieceConversions_ZERO, &OrgBouncycastlePqcCryptoMcelieceConversions_ONE };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoMcelieceConversions = { "Conversions", "org.bouncycastle.pqc.crypto.mceliece", ptrTable, methods, fields, 7, 0x10, 4, 2, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoMcelieceConversions;
}

+ (void)initialize {
  if (self == [OrgBouncycastlePqcCryptoMcelieceConversions class]) {
    OrgBouncycastlePqcCryptoMcelieceConversions_ZERO = JavaMathBigInteger_valueOfWithLong_(
#line 15
    0);
    OrgBouncycastlePqcCryptoMcelieceConversions_ONE = JavaMathBigInteger_valueOfWithLong_(
#line 16
    1);
    J2OBJC_SET_INITIALIZED(OrgBouncycastlePqcCryptoMcelieceConversions)
  }
}

@end


#line 21
void OrgBouncycastlePqcCryptoMcelieceConversions_initPackagePrivate(OrgBouncycastlePqcCryptoMcelieceConversions *self) {
  NSObject_init(self);
}


#line 21
OrgBouncycastlePqcCryptoMcelieceConversions *new_OrgBouncycastlePqcCryptoMcelieceConversions_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoMcelieceConversions, initPackagePrivate)
}


#line 21
OrgBouncycastlePqcCryptoMcelieceConversions *create_OrgBouncycastlePqcCryptoMcelieceConversions_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoMcelieceConversions, initPackagePrivate)
}


#line 35
OrgBouncycastlePqcMathLinearalgebraGF2Vector *OrgBouncycastlePqcCryptoMcelieceConversions_encodeWithInt_withInt_withByteArray_(jint n, jint t, IOSByteArray *m) {
  OrgBouncycastlePqcCryptoMcelieceConversions_initialize();
  if (n < t) {
    
#line 39
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"n < t");
  }
  
#line 43
  JavaMathBigInteger *c = OrgBouncycastlePqcMathLinearalgebraIntegerFunctions_binomialWithInt_withInt_(n, t);
  
#line 45
  JavaMathBigInteger *i = new_JavaMathBigInteger_initWithInt_withByteArray_(1, m);
  
#line 47
  if ([i compareToWithId:c] >= 0) {
    
#line 49
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Encoded number too large.");
  }
  
#line 52
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *result = new_OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_(n);
  
#line 54
  jint nn = n;
  jint tt = t;
  for (jint j = 0; j < n; j++) {
    
#line 58
    c = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(c)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(nn - tt)])) divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(
#line 59
    nn)];
    nn--;
    if ([((JavaMathBigInteger *) nil_chk(c)) compareToWithId:i] <= 0) {
      
#line 63
      [result setBitWithInt:j];
      i = [((JavaMathBigInteger *) nil_chk(i)) subtractWithJavaMathBigInteger:c];
      tt--;
      if (nn == tt) {
        
#line 68
        c = OrgBouncycastlePqcCryptoMcelieceConversions_ONE;
      }
      else {
        
#line 72
        c = [((JavaMathBigInteger *) nil_chk(([c multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(tt + 1)]))) divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(
#line 73
        nn - tt)];
      }
    }
  }
  
#line 78
  return result;
}


#line 91
IOSByteArray *OrgBouncycastlePqcCryptoMcelieceConversions_decodeWithInt_withInt_withOrgBouncycastlePqcMathLinearalgebraGF2Vector_(jint n, jint t, OrgBouncycastlePqcMathLinearalgebraGF2Vector *vec) {
  OrgBouncycastlePqcCryptoMcelieceConversions_initialize();
  if (([((OrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(vec)) getLength] != n) || ([vec getHammingWeight] != t)) {
    
#line 95
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 96
    @"vector has wrong length or hamming weight");
  }
  IOSIntArray *vecArray = [vec getVecArray];
  
#line 100
  JavaMathBigInteger *bc = OrgBouncycastlePqcMathLinearalgebraIntegerFunctions_binomialWithInt_withInt_(n, t);
  JavaMathBigInteger *d = OrgBouncycastlePqcCryptoMcelieceConversions_ZERO;
  jint nn = n;
  jint tt = t;
  for (jint i = 0; i < n; i++) {
    
#line 106
    bc = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(bc)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(nn - tt)])) divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(
#line 107
    nn)];
    nn--;
    
#line 110
    jint q = JreRShift32(i, 5);
    jint e = IOSIntArray_Get(nil_chk(vecArray), q) & (JreLShift32(1, (i & (jint) 0x1f)));
    if (e != 0) {
      
#line 114
      d = [((JavaMathBigInteger *) nil_chk(d)) addWithJavaMathBigInteger:bc];
      tt--;
      if (nn == tt) {
        
#line 118
        bc = OrgBouncycastlePqcCryptoMcelieceConversions_ONE;
      }
      else {
        
#line 122
        bc = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(bc)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(tt + 1)])) divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(
#line 123
        nn - tt)];
      }
    }
  }
  
#line 129
  return OrgBouncycastlePqcMathLinearalgebraBigIntUtils_toMinimalByteArrayWithJavaMathBigInteger_(d);
}


#line 143
IOSByteArray *OrgBouncycastlePqcCryptoMcelieceConversions_signConversionWithInt_withInt_withByteArray_(jint n, jint t, IOSByteArray *m) {
  OrgBouncycastlePqcCryptoMcelieceConversions_initialize();
  if (n < t) {
    
#line 147
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"n < t");
  }
  
#line 150
  JavaMathBigInteger *bc = OrgBouncycastlePqcMathLinearalgebraIntegerFunctions_binomialWithInt_withInt_(n, t);
  
#line 152
  jint s = [((JavaMathBigInteger *) nil_chk(bc)) bitLength] - 1;
  
#line 154
  jint sq = JreRShift32(s, 3);
  jint sr = s & 7;
  if (sr == 0) {
    
#line 158
    sq--;
    sr = 8;
  }
  
#line 163
  jint nq = JreRShift32(n, 3);
  jint nr = n & 7;
  if (nr == 0) {
    
#line 167
    nq--;
    nr = 8;
  }
  
#line 171
  IOSByteArray *data = [IOSByteArray newArrayWithLength:nq + 1];
  if (((IOSByteArray *) nil_chk(m))->size_ < data->size_) {
    
#line 174
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(m, 0, data, 0, m->size_);
    for (jint i = m->size_; i < data->size_; i++) {
      
#line 177
      *IOSByteArray_GetRef(data, i) = 0;
    }
  }
  else {
    
#line 182
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(m, 0, data, 0, nq);
    jint h = (JreLShift32(1, nr)) - 1;
    *IOSByteArray_GetRef(data, nq) = (jbyte) (h & IOSByteArray_Get(m, nq));
  }
  
#line 187
  JavaMathBigInteger *d = OrgBouncycastlePqcCryptoMcelieceConversions_ZERO;
  jint nn = n;
  jint tt = t;
  for (jint i = 0; i < n; i++) {
    
#line 192
    bc = [((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(bc)) multiplyWithJavaMathBigInteger:new_JavaMathBigInteger_initWithNSString_(JavaLangInteger_toStringWithInt_(nn - tt))]))) divideWithJavaMathBigInteger:new_JavaMathBigInteger_initWithNSString_(JavaLangInteger_toStringWithInt_(
#line 193
    nn))];
    nn--;
    
#line 196
    jint q = JreURShift32(i, 3);
    jint r = i & 7;
    r = JreLShift32(1, r);
    jbyte e = (jbyte) (r & IOSByteArray_Get(data, q));
    if (e != 0) {
      
#line 202
      d = [((JavaMathBigInteger *) nil_chk(d)) addWithJavaMathBigInteger:bc];
      tt--;
      if (nn == tt) {
        
#line 206
        bc = OrgBouncycastlePqcCryptoMcelieceConversions_ONE;
      }
      else {
        
#line 210
        bc = [((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(bc)) multiplyWithJavaMathBigInteger:new_JavaMathBigInteger_initWithNSString_(JavaLangInteger_toStringWithInt_(
#line 211
        tt + 1))]))) divideWithJavaMathBigInteger:new_JavaMathBigInteger_initWithNSString_(JavaLangInteger_toStringWithInt_(
#line 212
        nn - tt))];
      }
    }
  }
  
#line 217
  IOSByteArray *result = [IOSByteArray newArrayWithLength:sq + 1];
  IOSByteArray *help = [((JavaMathBigInteger *) nil_chk(d)) toByteArray];
  if (((IOSByteArray *) nil_chk(help))->size_ < result->size_) {
    
#line 221
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(help, 0, result, 0, help->size_);
    for (jint i = help->size_; i < result->size_; i++) {
      
#line 224
      *IOSByteArray_GetRef(result, i) = 0;
    }
  }
  else {
    
#line 229
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(help, 0, result, 0, sq);
    *IOSByteArray_GetRef(result, sq) = (jbyte) (((JreLShift32(1, sr)) - 1) & IOSByteArray_Get(help, sq));
  }
  
#line 233
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoMcelieceConversions)
