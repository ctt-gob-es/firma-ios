//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/mceliece/McElieceKeyPairGenerator.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/bouncycastle/crypto/KeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceKeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceKeyPairGenerator.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McEliecePublicKeyParameters.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2Matrix.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2mField.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GoppaCode.h"
#include "org/bouncycastle/pqc/math/linearalgebra/Matrix.h"
#include "org/bouncycastle/pqc/math/linearalgebra/Permutation.h"
#include "org/bouncycastle/pqc/math/linearalgebra/PolynomialGF2mSmallM.h"
#include "org/bouncycastle/pqc/math/linearalgebra/PolynomialRingGF2m.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/mceliece/McElieceKeyPairGenerator must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator () {
 @public
  OrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters *mcElieceParams_;
  jint m_;
  jint n_;
  jint t_;
  jint fieldPoly_;
  JavaSecuritySecureRandom *random_;
  jboolean initialized_;
}

/*!
 @brief Default initialization of the key pair generator.
 */
- (void)initializeDefault OBJC_METHOD_FAMILY_NONE;

- (void)initialize__WithOrgBouncycastleCryptoKeyGenerationParameters:(OrgBouncycastleCryptoKeyGenerationParameters *)param OBJC_METHOD_FAMILY_NONE;

- (OrgBouncycastleCryptoAsymmetricCipherKeyPair *)genKeyPair;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator, mcElieceParams_, OrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator, random_, JavaSecuritySecureRandom *)

/*!
 @brief The OID of the algorithm.
 */
inline NSString *OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_get_OID(void);
static NSString *OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_OID = @"1.3.6.1.4.1.8301.3.1.3.4.1";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator, OID, NSString *)

__attribute__((unused)) static void OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_initializeDefault(OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *self);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_initialize__WithOrgBouncycastleCryptoKeyGenerationParameters_(OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *self, OrgBouncycastleCryptoKeyGenerationParameters *param);

__attribute__((unused)) static OrgBouncycastleCryptoAsymmetricCipherKeyPair *OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_genKeyPair(OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *self);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/mceliece/McElieceKeyPairGenerator.java"


#line 21
@implementation OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 26
- (instancetype)init {
  OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 61
- (void)initializeDefault {
  OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_initializeDefault(self);
}


#line 67
- (void)initialize__WithOrgBouncycastleCryptoKeyGenerationParameters:(OrgBouncycastleCryptoKeyGenerationParameters *)param {
  OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_initialize__WithOrgBouncycastleCryptoKeyGenerationParameters_(self, param);
}


#line 81
- (OrgBouncycastleCryptoAsymmetricCipherKeyPair *)genKeyPair {
  return OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_genKeyPair(self);
}


#line 137
- (void)init__WithOrgBouncycastleCryptoKeyGenerationParameters:(OrgBouncycastleCryptoKeyGenerationParameters *)param {
  
#line 140
  OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_initialize__WithOrgBouncycastleCryptoKeyGenerationParameters_(self, param);
}

- (OrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  
#line 146
  return OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_genKeyPair(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initializeDefault);
  methods[2].selector = @selector(initialize__WithOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[3].selector = @selector(genKeyPair);
  methods[4].selector = @selector(init__WithOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[5].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OID", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
    { "mcElieceParams_", "LOrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "t_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fieldPoly_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "initialize", "LOrgBouncycastleCryptoKeyGenerationParameters;", "init", &OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_OID };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator = { "McElieceKeyPairGenerator", "org.bouncycastle.pqc.crypto.mceliece", ptrTable, methods, fields, 7, 0x1, 6, 8, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator;
}

@end


#line 26
void OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_init(OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *self) {
  NSObject_init(self);
  self->initialized_ =
#line 55
  false;
}


#line 26
OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *new_OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator, init)
}


#line 26
OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *create_OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator, init)
}


#line 61
void OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_initializeDefault(OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *self) {
  
#line 63
  OrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters *mcParams = new_OrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters_initWithJavaSecuritySecureRandom_withOrgBouncycastlePqcCryptoMcelieceMcElieceParameters_(nil, new_OrgBouncycastlePqcCryptoMcelieceMcElieceParameters_init());
  OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_initialize__WithOrgBouncycastleCryptoKeyGenerationParameters_(self, mcParams);
}


#line 67
void OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_initialize__WithOrgBouncycastleCryptoKeyGenerationParameters_(OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *self, OrgBouncycastleCryptoKeyGenerationParameters *param) {
  
#line 70
  self->mcElieceParams_ = (OrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters class]);
  self->random_ = [((OrgBouncycastleCryptoKeyGenerationParameters *) nil_chk(param)) getRandom];
  
#line 73
  self->m_ = [((OrgBouncycastlePqcCryptoMcelieceMcElieceParameters *) nil_chk([((OrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters *) nil_chk(self->mcElieceParams_)) getParameters])) getM];
  self->n_ = [((OrgBouncycastlePqcCryptoMcelieceMcElieceParameters *) nil_chk([((OrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters *) nil_chk(self->mcElieceParams_)) getParameters])) getN];
  self->t_ = [((OrgBouncycastlePqcCryptoMcelieceMcElieceParameters *) nil_chk([((OrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters *) nil_chk(self->mcElieceParams_)) getParameters])) getT];
  self->fieldPoly_ = [((OrgBouncycastlePqcCryptoMcelieceMcElieceParameters *) nil_chk([((OrgBouncycastlePqcCryptoMcelieceMcElieceKeyGenerationParameters *) nil_chk(self->mcElieceParams_)) getParameters])) getFieldPoly];
  self->initialized_ = true;
}

OrgBouncycastleCryptoAsymmetricCipherKeyPair *OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_genKeyPair(OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator *self) {
  
#line 84
  if (!self->initialized_) {
    
#line 86
    OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator_initializeDefault(self);
  }
  
#line 90
  OrgBouncycastlePqcMathLinearalgebraGF2mField *field = new_OrgBouncycastlePqcMathLinearalgebraGF2mField_initWithInt_withInt_(self->m_, self->fieldPoly_);
  
#line 93
  OrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *gp = new_OrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithOrgBouncycastlePqcMathLinearalgebraGF2mField_withInt_withChar_withJavaSecuritySecureRandom_(field, self->t_,
#line 94
  OrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_RANDOM_IRREDUCIBLE_POLYNOMIAL, self->random_);
  OrgBouncycastlePqcMathLinearalgebraPolynomialRingGF2m *ring = new_OrgBouncycastlePqcMathLinearalgebraPolynomialRingGF2m_initWithOrgBouncycastlePqcMathLinearalgebraGF2mField_withOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_(field, gp);
  
#line 98
  IOSObjectArray *sqRootMatrix = [ring getSquareRootMatrix];
  
#line 101
  OrgBouncycastlePqcMathLinearalgebraGF2Matrix *h = OrgBouncycastlePqcMathLinearalgebraGoppaCode_createCanonicalCheckMatrixWithOrgBouncycastlePqcMathLinearalgebraGF2mField_withOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_(field, gp);
  
#line 104
  OrgBouncycastlePqcMathLinearalgebraGoppaCode_MaMaPe *mmp = OrgBouncycastlePqcMathLinearalgebraGoppaCode_computeSystematicFormWithOrgBouncycastlePqcMathLinearalgebraGF2Matrix_withJavaSecuritySecureRandom_(h, self->random_);
  OrgBouncycastlePqcMathLinearalgebraGF2Matrix *shortH = [((OrgBouncycastlePqcMathLinearalgebraGoppaCode_MaMaPe *) nil_chk(mmp)) getSecondMatrix];
  OrgBouncycastlePqcMathLinearalgebraPermutation *p1 = [mmp getPermutation];
  
#line 109
  OrgBouncycastlePqcMathLinearalgebraGF2Matrix *shortG = (OrgBouncycastlePqcMathLinearalgebraGF2Matrix *) cast_chk([((OrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(shortH)) computeTranspose], [OrgBouncycastlePqcMathLinearalgebraGF2Matrix class]);
  
#line 112
  OrgBouncycastlePqcMathLinearalgebraGF2Matrix *gPrime = [((OrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(shortG)) extendLeftCompactForm];
  
#line 115
  jint k = [shortG getNumRows];
  
#line 118
  IOSObjectArray *matrixSandInverse = OrgBouncycastlePqcMathLinearalgebraGF2Matrix_createRandomRegularMatrixAndItsInverseWithInt_withJavaSecuritySecureRandom_(
#line 119
  k, self->random_);
  
#line 122
  OrgBouncycastlePqcMathLinearalgebraPermutation *p2 = new_OrgBouncycastlePqcMathLinearalgebraPermutation_initWithInt_withJavaSecuritySecureRandom_(self->n_, self->random_);
  
#line 125
  OrgBouncycastlePqcMathLinearalgebraGF2Matrix *g = (OrgBouncycastlePqcMathLinearalgebraGF2Matrix *) cast_chk([((OrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(IOSObjectArray_Get(nil_chk(matrixSandInverse), 0))) rightMultiplyWithOrgBouncycastlePqcMathLinearalgebraMatrix:gPrime], [OrgBouncycastlePqcMathLinearalgebraGF2Matrix class]);
  g = (OrgBouncycastlePqcMathLinearalgebraGF2Matrix *) cast_chk([((OrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(g)) rightMultiplyWithOrgBouncycastlePqcMathLinearalgebraPermutation:p2], [OrgBouncycastlePqcMathLinearalgebraGF2Matrix class]);
  
#line 130
  OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *pubKey = new_OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_initWithInt_withInt_withOrgBouncycastlePqcMathLinearalgebraGF2Matrix_(self->n_, self->t_, g);
  OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *privKey = new_OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_initWithInt_withInt_withOrgBouncycastlePqcMathLinearalgebraGF2mField_withOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_withOrgBouncycastlePqcMathLinearalgebraPermutation_withOrgBouncycastlePqcMathLinearalgebraPermutation_withOrgBouncycastlePqcMathLinearalgebraGF2Matrix_(self->n_, k, field, gp, p1, p2, IOSObjectArray_Get(matrixSandInverse, 1));
  
#line 134
  return new_OrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(pubKey, privKey);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoMcelieceMcElieceKeyPairGenerator)
