//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/mceliece/McElieceFujisakiCipher.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/CryptoServicesRegistrar.h"
#include "org/bouncycastle/crypto/Digest.h"
#include "org/bouncycastle/crypto/InvalidCipherTextException.h"
#include "org/bouncycastle/crypto/digests/SHA1Digest.h"
#include "org/bouncycastle/crypto/params/ParametersWithRandom.h"
#include "org/bouncycastle/crypto/prng/DigestRandomGenerator.h"
#include "org/bouncycastle/pqc/crypto/mceliece/Conversions.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2KeyParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2Primitives.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2PrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2PublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceFujisakiCipher.h"
#include "org/bouncycastle/pqc/crypto/mceliece/Utils.h"
#include "org/bouncycastle/pqc/math/linearalgebra/ByteUtils.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2Vector.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/mceliece/McElieceFujisakiCipher must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher () {
 @public
  id<OrgBouncycastleCryptoDigest> messDigest_;
  JavaSecuritySecureRandom *sr_;
  /*!
   @brief The McEliece main parameters
   */
  jint n_;
  /*!
   @brief The McEliece main parameters
   */
  jint k_;
  /*!
   @brief The McEliece main parameters
   */
  jint t_;
  jboolean forEncryption_;
}

- (void)initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *)pubKey OBJC_METHOD_FAMILY_NONE;

- (void)initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *)privKey OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher, messDigest_, id<OrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher, sr_, JavaSecuritySecureRandom *)

inline NSString *OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_get_DEFAULT_PRNG_NAME(void);
static NSString *OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_DEFAULT_PRNG_NAME = @"SHA1PRNG";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher, DEFAULT_PRNG_NAME, NSString *)

__attribute__((unused)) static void OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *self, OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *pubKey);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *self, OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *privKey);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/mceliece/McElieceFujisakiCipher.java"

NSString *OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_OID = @"1.3.6.1.4.1.8301.3.1.3.4.2.1";


#line 25
@implementation OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 25
- (instancetype)init {
  OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 48
- (void)init__WithBoolean:(jboolean)forEncryption
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)param {
  
#line 52
  self->forEncryption_ = forEncryption;
  if (forEncryption) {
    
#line 55
    if ([param isKindOfClass:[OrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      
#line 57
      OrgBouncycastleCryptoParamsParametersWithRandom *rParam = (OrgBouncycastleCryptoParamsParametersWithRandom *) param;
      
#line 59
      self->sr_ = [((OrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
      self->key_ = (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk([rParam getParameters], [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]);
      OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(self, (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]));
    }
    else {
      
#line 66
      self->sr_ = OrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
      self->key_ = (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]);
      OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(self, (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]));
    }
  }
  else {
    
#line 73
    self->key_ = (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]);
    OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(self, (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]));
  }
}


#line 79
- (jint)getKeySizeWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters *)key {
  
#line 83
  if ([key isKindOfClass:[OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]]) {
    
#line 85
    return [((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) key))) getN];
  }
  if ([key isKindOfClass:[OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]]) {
    
#line 89
    return [((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) key))) getN];
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported type");
}


#line 96
- (void)initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *)pubKey {
  OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(self, pubKey);
}


#line 105
- (void)initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *)privKey {
  OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(self, privKey);
}


#line 113
- (IOSByteArray *)messageEncryptWithByteArray:(IOSByteArray *)input {
  
#line 116
  if (!forEncryption_) {
    
#line 118
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher initialised for decryption");
  }
  
#line 122
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *r = new_OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withJavaSecuritySecureRandom_(k_, sr_);
  
#line 125
  IOSByteArray *rBytes = [r getEncoded];
  
#line 128
  IOSByteArray *rm = OrgBouncycastlePqcMathLinearalgebraByteUtils_concatenateWithByteArray_withByteArray_(rBytes, input);
  
#line 131
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) updateWithByteArray:rm withInt:0 withInt:((IOSByteArray *) nil_chk(rm))->size_];
  IOSByteArray *hrm = [IOSByteArray newArrayWithLength:[((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) getDigestSize]];
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) doFinalWithByteArray:hrm withInt:0];
  
#line 136
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *z = OrgBouncycastlePqcCryptoMcelieceConversions_encodeWithInt_withInt_withByteArray_(n_, t_, hrm);
  
#line 139
  IOSByteArray *c1 = [((OrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Primitives_encryptionPrimitiveWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_withOrgBouncycastlePqcMathLinearalgebraGF2Vector_withOrgBouncycastlePqcMathLinearalgebraGF2Vector_((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]), r, z))) getEncoded];
  
#line 143
  OrgBouncycastleCryptoPrngDigestRandomGenerator *sr0 = new_OrgBouncycastleCryptoPrngDigestRandomGenerator_initWithOrgBouncycastleCryptoDigest_(new_OrgBouncycastleCryptoDigestsSHA1Digest_init());
  
#line 146
  [sr0 addSeedMaterialWithByteArray:rBytes];
  
#line 149
  IOSByteArray *c2 = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(input))->size_];
  [sr0 nextBytesWithByteArray:c2];
  
#line 153
  for (jint i = 0; i < input->size_; i++) {
    
#line 155
    *IOSByteArray_GetRef(c2, i) ^= IOSByteArray_Get(input, i);
  }
  
#line 159
  return OrgBouncycastlePqcMathLinearalgebraByteUtils_concatenateWithByteArray_withByteArray_(c1, c2);
}


#line 162
- (IOSByteArray *)messageDecryptWithByteArray:(IOSByteArray *)input {
  
#line 166
  if (forEncryption_) {
    
#line 168
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher initialised for decryption");
  }
  
#line 171
  jint c1Len = JreRShift32((n_ + 7), 3);
  jint c2Len = ((IOSByteArray *) nil_chk(input))->size_ - c1Len;
  
#line 175
  IOSObjectArray *c1c2 = OrgBouncycastlePqcMathLinearalgebraByteUtils_splitWithByteArray_withInt_(input, c1Len);
  IOSByteArray *c1 = IOSObjectArray_Get(nil_chk(c1c2), 0);
  IOSByteArray *c2 = IOSObjectArray_Get(c1c2, 1);
  
#line 180
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *hrmVec = OrgBouncycastlePqcMathLinearalgebraGF2Vector_OS2VPWithInt_withByteArray_(n_, c1);
  IOSObjectArray *decC1 = OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Primitives_decryptionPrimitiveWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_withOrgBouncycastlePqcMathLinearalgebraGF2Vector_((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) cast_chk(key_, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]), hrmVec);
  IOSByteArray *rBytes = [((OrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(IOSObjectArray_Get(nil_chk(decC1), 0))) getEncoded];
  
#line 184
  OrgBouncycastlePqcMathLinearalgebraGF2Vector *z = IOSObjectArray_Get(decC1, 1);
  
#line 187
  OrgBouncycastleCryptoPrngDigestRandomGenerator *sr0 = new_OrgBouncycastleCryptoPrngDigestRandomGenerator_initWithOrgBouncycastleCryptoDigest_(new_OrgBouncycastleCryptoDigestsSHA1Digest_init());
  
#line 190
  [sr0 addSeedMaterialWithByteArray:rBytes];
  
#line 193
  IOSByteArray *mBytes = [IOSByteArray newArrayWithLength:c2Len];
  [sr0 nextBytesWithByteArray:mBytes];
  
#line 197
  for (jint i = 0; i < c2Len; i++) {
    
#line 199
    *IOSByteArray_GetRef(mBytes, i) ^= IOSByteArray_Get(nil_chk(c2), i);
  }
  
#line 203
  IOSByteArray *rmBytes = OrgBouncycastlePqcMathLinearalgebraByteUtils_concatenateWithByteArray_withByteArray_(rBytes, mBytes);
  IOSByteArray *hrm = [IOSByteArray newArrayWithLength:[((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) getDigestSize]];
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) updateWithByteArray:rmBytes withInt:0 withInt:((IOSByteArray *) nil_chk(rmBytes))->size_];
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(messDigest_)) doFinalWithByteArray:hrm withInt:0];
  
#line 210
  hrmVec = OrgBouncycastlePqcCryptoMcelieceConversions_encodeWithInt_withInt_withByteArray_(n_, t_, hrm);
  
#line 213
  if (![((OrgBouncycastlePqcMathLinearalgebraGF2Vector *) nil_chk(hrmVec)) isEqual:z]) {
    
#line 215
    @throw new_OrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(@"Bad Padding: invalid ciphertext");
  }
  
#line 219
  return mBytes;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 10, 12, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getKeySizeWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters:);
  methods[3].selector = @selector(initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters:);
  methods[4].selector = @selector(initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters:);
  methods[5].selector = @selector(messageEncryptWithByteArray:);
  methods[6].selector = @selector(messageDecryptWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "DEFAULT_PRNG_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "messDigest_", "LOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sr_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "t_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "LOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgBouncycastleCryptoCipherParameters;", "getKeySize", "LOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters;", "LJavaLangIllegalArgumentException;", "initCipherEncrypt", "LOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters;", "initCipherDecrypt", "LOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters;", "messageEncrypt", "[B", "messageDecrypt", "LOrgBouncycastleCryptoInvalidCipherTextException;", &OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_OID, &OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_DEFAULT_PRNG_NAME };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher = { "McElieceFujisakiCipher", "org.bouncycastle.pqc.crypto.mceliece", ptrTable, methods, fields, 7, 0x1, 7, 9, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher;
}

@end


#line 25
void OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_init(OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *self) {
  NSObject_init(self);
}


#line 25
OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *new_OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher, init)
}


#line 25
OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *create_OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher, init)
}


#line 96
void OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_initCipherEncryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *self, OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *pubKey) {
  
#line 98
  self->messDigest_ = OrgBouncycastlePqcCryptoMcelieceUtils_getDigestWithNSString_([((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) nil_chk(pubKey)) getDigest]);
  self->n_ = [pubKey getN];
  self->k_ = [pubKey getK];
  self->t_ = [pubKey getT];
}

void OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher_initCipherDecryptWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher *self, OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *privKey) {
  
#line 107
  self->messDigest_ = OrgBouncycastlePqcCryptoMcelieceUtils_getDigestWithNSString_([((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) nil_chk(privKey)) getDigest]);
  self->n_ = [privKey getN];
  self->t_ = [privKey getT];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoMcelieceMcElieceFujisakiCipher)
