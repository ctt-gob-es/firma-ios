//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2KeyPairGenerator.java
//

#include "J2ObjC_source.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/bouncycastle/crypto/KeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2KeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2KeyPairGenerator.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2Parameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2PrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2PublicKeyParameters.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2Matrix.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2mField.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GoppaCode.h"
#include "org/bouncycastle/pqc/math/linearalgebra/Matrix.h"
#include "org/bouncycastle/pqc/math/linearalgebra/Permutation.h"
#include "org/bouncycastle/pqc/math/linearalgebra/PolynomialGF2mSmallM.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2KeyPairGenerator must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator () {
 @public
  OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *mcElieceCCA2Params_;
  jint m_;
  jint n_;
  jint t_;
  jint fieldPoly_;
  JavaSecuritySecureRandom *random_;
  jboolean initialized_;
}

/*!
 @brief Default initialization of the key pair generator.
 */
- (void)initializeDefault OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator, mcElieceCCA2Params_, OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator, random_, JavaSecuritySecureRandom *)

__attribute__((unused)) static void OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_initializeDefault(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator *self);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2KeyPairGenerator.java"

NSString *OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_OID = @"1.3.6.1.4.1.8301.3.1.3.4.2";


#line 21
@implementation OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 21
- (instancetype)init {
  OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 54
- (void)initializeDefault {
  OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_initializeDefault(self);
}


#line 61
- (void)init__WithOrgBouncycastleCryptoKeyGenerationParameters:(OrgBouncycastleCryptoKeyGenerationParameters *)param {
  
#line 65
  self->mcElieceCCA2Params_ = (OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters class]);
  
#line 68
  self->random_ = [((OrgBouncycastleCryptoKeyGenerationParameters *) nil_chk(param)) getRandom];
  
#line 70
  self->m_ = [((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Parameters *) nil_chk([((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *) nil_chk(self->mcElieceCCA2Params_)) getParameters])) getM];
  self->n_ = [((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Parameters *) nil_chk([((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *) nil_chk(self->mcElieceCCA2Params_)) getParameters])) getN];
  self->t_ = [((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Parameters *) nil_chk([((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *) nil_chk(self->mcElieceCCA2Params_)) getParameters])) getT];
  self->fieldPoly_ = [((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Parameters *) nil_chk([((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *) nil_chk(self->mcElieceCCA2Params_)) getParameters])) getFieldPoly];
  self->initialized_ = true;
}


#line 78
- (OrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  
#line 82
  if (!initialized_) {
    
#line 84
    OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_initializeDefault(self);
  }
  
#line 88
  OrgBouncycastlePqcMathLinearalgebraGF2mField *field = new_OrgBouncycastlePqcMathLinearalgebraGF2mField_initWithInt_withInt_(m_, fieldPoly_);
  
#line 91
  OrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *gp = new_OrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_initWithOrgBouncycastlePqcMathLinearalgebraGF2mField_withInt_withChar_withJavaSecuritySecureRandom_(field, t_,
#line 92
  OrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_RANDOM_IRREDUCIBLE_POLYNOMIAL, random_);
  
#line 95
  OrgBouncycastlePqcMathLinearalgebraGF2Matrix *h = OrgBouncycastlePqcMathLinearalgebraGoppaCode_createCanonicalCheckMatrixWithOrgBouncycastlePqcMathLinearalgebraGF2mField_withOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_(field, gp);
  
#line 98
  OrgBouncycastlePqcMathLinearalgebraGoppaCode_MaMaPe *mmp = OrgBouncycastlePqcMathLinearalgebraGoppaCode_computeSystematicFormWithOrgBouncycastlePqcMathLinearalgebraGF2Matrix_withJavaSecuritySecureRandom_(h, random_);
  OrgBouncycastlePqcMathLinearalgebraGF2Matrix *shortH = [((OrgBouncycastlePqcMathLinearalgebraGoppaCode_MaMaPe *) nil_chk(mmp)) getSecondMatrix];
  OrgBouncycastlePqcMathLinearalgebraPermutation *p = [mmp getPermutation];
  
#line 103
  OrgBouncycastlePqcMathLinearalgebraGF2Matrix *shortG = (OrgBouncycastlePqcMathLinearalgebraGF2Matrix *) cast_chk([((OrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(shortH)) computeTranspose], [OrgBouncycastlePqcMathLinearalgebraGF2Matrix class]);
  
#line 106
  jint k = [((OrgBouncycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(shortG)) getNumRows];
  
#line 109
  OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *pubKey = new_OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_initWithInt_withInt_withOrgBouncycastlePqcMathLinearalgebraGF2Matrix_withNSString_(n_, t_, shortG, [((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Parameters *) nil_chk([((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *) nil_chk(mcElieceCCA2Params_)) getParameters])) getDigest]);
  OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *privKey = new_OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_initWithInt_withInt_withOrgBouncycastlePqcMathLinearalgebraGF2mField_withOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_withOrgBouncycastlePqcMathLinearalgebraPermutation_withNSString_(n_, k, field, gp, p, [((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Parameters *) nil_chk([((OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *) nil_chk(mcElieceCCA2Params_)) getParameters])) getDigest]);
  
#line 113
  return new_OrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(pubKey, privKey);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initializeDefault);
  methods[2].selector = @selector(init__WithOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[3].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
    { "mcElieceCCA2Params_", "LOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "t_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fieldPoly_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LOrgBouncycastleCryptoKeyGenerationParameters;", &OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_OID };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator = { "McElieceCCA2KeyPairGenerator", "org.bouncycastle.pqc.crypto.mceliece", ptrTable, methods, fields, 7, 0x1, 4, 8, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator;
}

@end


#line 21
void OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_init(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator *self) {
  NSObject_init(self);
  self->initialized_ =
#line 49
  false;
}


#line 21
OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator *new_OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator, init)
}


#line 21
OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator *create_OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator, init)
}


#line 54
void OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator_initializeDefault(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator *self) {
  
#line 56
  OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters *mcCCA2Params = new_OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyGenerationParameters_initWithJavaSecuritySecureRandom_withOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Parameters_(nil, new_OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2Parameters_init());
  [self init__WithOrgBouncycastleCryptoKeyGenerationParameters:mcCCA2Params];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2KeyPairGenerator)
