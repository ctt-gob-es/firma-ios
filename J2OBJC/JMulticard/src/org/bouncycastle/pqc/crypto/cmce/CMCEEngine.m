//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/cmce/CMCEEngine.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/Xof.h"
#include "org/bouncycastle/crypto/digests/SHAKEDigest.h"
#include "org/bouncycastle/pqc/crypto/cmce/BENES.h"
#include "org/bouncycastle/pqc/crypto/cmce/BENES12.h"
#include "org/bouncycastle/pqc/crypto/cmce/BENES13.h"
#include "org/bouncycastle/pqc/crypto/cmce/CMCEEngine.h"
#include "org/bouncycastle/pqc/crypto/cmce/GF.h"
#include "org/bouncycastle/pqc/crypto/cmce/GF12.h"
#include "org/bouncycastle/pqc/crypto/cmce/GF13.h"
#include "org/bouncycastle/pqc/crypto/cmce/Utils.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/cmce/CMCEEngine must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoCmceCMCEEngine () {
 @public
  jint SYS_N_;
  jint SYS_T_;
  jint GFBITS_;
  jint IRR_BYTES_;
  jint COND_BYTES_;
  jint PK_NROWS_;
  jint PK_NCOLS_;
  jint PK_ROW_BYTES_;
  jint SYND_BYTES_;
  jint GFMASK_;
  IOSIntArray *poly_;
  jint defaultKeySize_;
  OrgBouncycastlePqcCryptoCmceGF *gf_;
  OrgBouncycastlePqcCryptoCmceBENES *benes_;
  jboolean usePadding_;
  jboolean countErrorIndices_;
  jboolean usePivots_;
}

- (void)syndromeWithByteArray:(IOSByteArray *)cipher_text
                withByteArray:(IOSByteArray *)pk
                withByteArray:(IOSByteArray *)error_vector;

- (void)generate_error_vectorWithByteArray:(IOSByteArray *)error_vector
              withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)encryptWithByteArray:(IOSByteArray *)cipher_text
               withByteArray:(IOSByteArray *)pk
               withByteArray:(IOSByteArray *)error_vector
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (jint)decryptWithByteArray:(IOSByteArray *)error_vector
               withByteArray:(IOSByteArray *)sk
               withByteArray:(IOSByteArray *)cipher_text;

+ (jint)minWithShort:(jshort)a
             withInt:(jint)b;

- (void)bmWithShortArray:(IOSShortArray *)outArg
          withShortArray:(IOSShortArray *)s;

- (void)syndWithShortArray:(IOSShortArray *)outArg
            withShortArray:(IOSShortArray *)f
            withShortArray:(IOSShortArray *)L
             withByteArray:(IOSByteArray *)r;

- (jint)mov_columnsWithByteArray2:(IOSObjectArray *)mat
                   withShortArray:(IOSShortArray *)pi
                    withLongArray:(IOSLongArray *)pivots;

+ (jint)ctzWithLong:(jlong)inArg;

+ (jlong)same_mask64WithShort:(jshort)x
                    withShort:(jshort)y;

+ (jbyte)same_mask32WithShort:(jshort)x
                    withShort:(jshort)y;

+ (void)layerWithShortArray:(IOSShortArray *)p
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)ptrIndex
                    withInt:(jint)s
                    withInt:(jint)n;

+ (void)controlbitsfrompermutationWithByteArray:(IOSByteArray *)outArg
                                 withShortArray:(IOSShortArray *)pi
                                       withLong:(jlong)w
                                       withLong:(jlong)n;

- (jint)pk_genWithByteArray:(IOSByteArray *)pk
              withByteArray:(IOSByteArray *)sk
               withIntArray:(IOSIntArray *)perm
             withShortArray:(IOSShortArray *)pi
              withLongArray:(IOSLongArray *)pivots;

- (jshort)evalWithShortArray:(IOSShortArray *)f
                   withShort:(jshort)a;

- (void)rootWithShortArray:(IOSShortArray *)outArg
            withShortArray:(IOSShortArray *)f
            withShortArray:(IOSShortArray *)L;

- (jint)generate_irr_polyWithShortArray:(IOSShortArray *)field;

- (void)GF_mulWithShortArray:(IOSShortArray *)outArg
              withShortArray:(IOSShortArray *)left
              withShortArray:(IOSShortArray *)right;

+ (void)sort32WithIntArray:(IOSIntArray *)temp
                   withInt:(jint)from
                   withInt:(jint)to;

+ (void)sort64WithLongArray:(IOSLongArray *)temp
                    withInt:(jint)from
                    withInt:(jint)to;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoCmceCMCEEngine, poly_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoCmceCMCEEngine, gf_, OrgBouncycastlePqcCryptoCmceGF *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoCmceCMCEEngine, benes_, OrgBouncycastlePqcCryptoCmceBENES *)

__attribute__((unused)) static void OrgBouncycastlePqcCryptoCmceCMCEEngine_syndromeWithByteArray_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSByteArray *cipher_text, IOSByteArray *pk, IOSByteArray *error_vector);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoCmceCMCEEngine_generate_error_vectorWithByteArray_withJavaSecuritySecureRandom_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSByteArray *error_vector, JavaSecuritySecureRandom *random);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoCmceCMCEEngine_encryptWithByteArray_withByteArray_withByteArray_withJavaSecuritySecureRandom_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSByteArray *cipher_text, IOSByteArray *pk, IOSByteArray *error_vector, JavaSecuritySecureRandom *random);

__attribute__((unused)) static jint OrgBouncycastlePqcCryptoCmceCMCEEngine_decryptWithByteArray_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSByteArray *error_vector, IOSByteArray *sk, IOSByteArray *cipher_text);

__attribute__((unused)) static jint OrgBouncycastlePqcCryptoCmceCMCEEngine_minWithShort_withInt_(jshort a, jint b);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoCmceCMCEEngine_bmWithShortArray_withShortArray_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSShortArray *outArg, IOSShortArray *s);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoCmceCMCEEngine_syndWithShortArray_withShortArray_withShortArray_withByteArray_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSShortArray *outArg, IOSShortArray *f, IOSShortArray *L, IOSByteArray *r);

__attribute__((unused)) static jint OrgBouncycastlePqcCryptoCmceCMCEEngine_mov_columnsWithByteArray2_withShortArray_withLongArray_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSObjectArray *mat, IOSShortArray *pi, IOSLongArray *pivots);

__attribute__((unused)) static jint OrgBouncycastlePqcCryptoCmceCMCEEngine_ctzWithLong_(jlong inArg);

__attribute__((unused)) static jlong OrgBouncycastlePqcCryptoCmceCMCEEngine_same_mask64WithShort_withShort_(jshort x, jshort y);

__attribute__((unused)) static jbyte OrgBouncycastlePqcCryptoCmceCMCEEngine_same_mask32WithShort_withShort_(jshort x, jshort y);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoCmceCMCEEngine_layerWithShortArray_withByteArray_withInt_withInt_withInt_(IOSShortArray *p, IOSByteArray *outArg, jint ptrIndex, jint s, jint n);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoCmceCMCEEngine_controlbitsfrompermutationWithByteArray_withShortArray_withLong_withLong_(IOSByteArray *outArg, IOSShortArray *pi, jlong w, jlong n);

__attribute__((unused)) static jint OrgBouncycastlePqcCryptoCmceCMCEEngine_pk_genWithByteArray_withByteArray_withIntArray_withShortArray_withLongArray_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSByteArray *pk, IOSByteArray *sk, IOSIntArray *perm, IOSShortArray *pi, IOSLongArray *pivots);

__attribute__((unused)) static jshort OrgBouncycastlePqcCryptoCmceCMCEEngine_evalWithShortArray_withShort_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSShortArray *f, jshort a);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoCmceCMCEEngine_rootWithShortArray_withShortArray_withShortArray_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSShortArray *outArg, IOSShortArray *f, IOSShortArray *L);

__attribute__((unused)) static jint OrgBouncycastlePqcCryptoCmceCMCEEngine_generate_irr_polyWithShortArray_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSShortArray *field);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoCmceCMCEEngine_GF_mulWithShortArray_withShortArray_withShortArray_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSShortArray *outArg, IOSShortArray *left, IOSShortArray *right);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoCmceCMCEEngine_sort32WithIntArray_withInt_withInt_(IOSIntArray *temp, jint from, jint to);

__attribute__((unused)) static void OrgBouncycastlePqcCryptoCmceCMCEEngine_sort64WithLongArray_withInt_withInt_(IOSLongArray *temp, jint from, jint to);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/cmce/CMCEEngine.java"


#line 9
@implementation OrgBouncycastlePqcCryptoCmceCMCEEngine


#line 37
- (jint)getIrrBytes {
  
#line 39
  return IRR_BYTES_;
}


#line 42
- (jint)getCondBytes {
  
#line 44
  return COND_BYTES_;
}


#line 47
- (jint)getPrivateKeySize {
  
#line 49
  return COND_BYTES_ + IRR_BYTES_ + JreIntDiv(SYS_N_, 8) + 40;
}


#line 52
- (jint)getPublicKeySize {
  
#line 54
  if (usePadding_) {
    
#line 56
    return PK_NROWS_ * (JreIntDiv(SYS_N_, 8) - JreIntDiv((PK_NROWS_ - 1), 8));
  }
  return JreIntDiv(PK_NROWS_ * PK_NCOLS_, 8);
}


#line 62
- (jint)getCipherTextSize {
  
#line 64
  return SYND_BYTES_ + 32;
}


#line 67
- (instancetype)initPackagePrivateWithInt:(jint)m
                                  withInt:(jint)n
                                  withInt:(jint)t
                             withIntArray:(IOSIntArray *)p
                              withBoolean:(jboolean)usePivots
                                  withInt:(jint)defaultKeySize {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_initPackagePrivateWithInt_withInt_withInt_withIntArray_withBoolean_withInt_(self, m, n, t, p, usePivots, defaultKeySize);
  return self;
}


#line 101
- (IOSByteArray *)generate_public_key_from_private_keyWithByteArray:(IOSByteArray *)sk {
  
#line 103
  IOSByteArray *pk = [IOSByteArray newArrayWithLength:[self getPublicKeySize]];
  IOSShortArray *pi = [IOSShortArray newArrayWithLength:JreLShift32(1, GFBITS_)];
  IOSLongArray *pivots = [IOSLongArray newArrayWithLongs:(jlong[]){ 0 } count:1];
  
#line 108
  IOSIntArray *perm = [IOSIntArray newArrayWithLength:JreLShift32(1, GFBITS_)];
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:JreIntDiv(SYS_N_, 8) + (JreLShift32(1, GFBITS_)) * 4];
  jint hash_idx = hash_->size_ - 32 - IRR_BYTES_ - (JreLShift32(1, GFBITS_)) * 4;
  
#line 112
  id<OrgBouncycastleCryptoXof> digest;
  digest = new_OrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(256);
  [digest updateWithByte:(jbyte) 64];
  [digest updateWithByteArray:sk withInt:0 withInt:32];
  [digest doFinalWithByteArray:hash_ withInt:0 withInt:hash_->size_];
  
#line 118
  for (jint i = 0; i < JreLShift32(1, GFBITS_); i++) {
    
#line 120
    *IOSIntArray_GetRef(perm, i) = OrgBouncycastlePqcCryptoCmceUtils_load4WithByteArray_withInt_(hash_, hash_idx + i * 4);
  }
  OrgBouncycastlePqcCryptoCmceCMCEEngine_pk_genWithByteArray_withByteArray_withIntArray_withShortArray_withLongArray_(self, pk, sk, perm, pi, pivots);
  return pk;
}


#line 127
- (IOSByteArray *)decompress_private_keyWithByteArray:(IOSByteArray *)sk {
  
#line 129
  IOSByteArray *reg_sk = [IOSByteArray newArrayWithLength:[self getPrivateKeySize]];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sk, 0, reg_sk, 0, ((IOSByteArray *) nil_chk(sk))->size_);
  
#line 137
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:JreIntDiv(SYS_N_, 8) + (JreLShift32(1, GFBITS_)) * 4 + IRR_BYTES_ + 32];
  
#line 139
  jint hash_idx = 0;
  id<OrgBouncycastleCryptoXof> digest;
  digest = new_OrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(256);
  [digest updateWithByte:(jbyte) 64];
  [digest updateWithByteArray:sk withInt:0 withInt:32];
  [digest doFinalWithByteArray:hash_ withInt:0 withInt:hash_->size_];
  
#line 148
  if (sk->size_ <= 40) {
    
#line 150
    IOSShortArray *field = [IOSShortArray newArrayWithLength:SYS_T_];
    
#line 152
    IOSByteArray *reg_g = [IOSByteArray newArrayWithLength:IRR_BYTES_];
    hash_idx = hash_->size_ - 32 - IRR_BYTES_;
    for (jint i = 0; i < SYS_T_; i++) {
      
#line 156
      *IOSShortArray_GetRef(field, i) = OrgBouncycastlePqcCryptoCmceUtils_load_gfWithByteArray_withInt_withInt_(hash_, hash_idx + i * 2, GFMASK_);
    }
    OrgBouncycastlePqcCryptoCmceCMCEEngine_generate_irr_polyWithShortArray_(self, field);
    
#line 160
    for (jint i = 0; i < SYS_T_; i++) {
      
#line 162
      OrgBouncycastlePqcCryptoCmceUtils_store_gfWithByteArray_withInt_withShort_(reg_g, i * 2, IOSShortArray_Get(field, i));
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(reg_g, 0, reg_sk, 40, IRR_BYTES_);
  }
  
#line 168
  if (sk->size_ <= 40 + IRR_BYTES_) {
    
#line 170
    IOSIntArray *perm = [IOSIntArray newArrayWithLength:JreLShift32(1, GFBITS_)];
    IOSShortArray *pi = [IOSShortArray newArrayWithLength:JreLShift32(1, GFBITS_)];
    
#line 173
    hash_idx = hash_->size_ - 32 - IRR_BYTES_ - (JreLShift32(1, GFBITS_)) * 4;
    for (jint i = 0; i < JreLShift32(1, GFBITS_); i++) {
      
#line 176
      *IOSIntArray_GetRef(perm, i) = OrgBouncycastlePqcCryptoCmceUtils_load4WithByteArray_withInt_(hash_, hash_idx + i * 4);
    }
    
#line 179
    if (usePivots_) {
      
#line 181
      IOSLongArray *pivots = [IOSLongArray newArrayWithLongs:(jlong[]){ 0 } count:1];
      OrgBouncycastlePqcCryptoCmceCMCEEngine_pk_genWithByteArray_withByteArray_withIntArray_withShortArray_withLongArray_(self, nil, reg_sk, perm, pi, pivots);
    }
    else {
      
#line 186
      IOSLongArray *buf = [IOSLongArray newArrayWithLength:JreLShift32(1, GFBITS_)];
      for (jint i = 0; i < JreLShift32(1, GFBITS_); i++) {
        
#line 189
        *IOSLongArray_GetRef(buf, i) = IOSIntArray_Get(perm, i);
        JreLShiftAssignLong(IOSLongArray_GetRef(buf, i), 31);
        *IOSLongArray_GetRef(buf, i) |= i;
        *IOSLongArray_GetRef(buf, i) &= (jlong) 0x7fffffffffffffffLL;
      }
      OrgBouncycastlePqcCryptoCmceCMCEEngine_sort64WithLongArray_withInt_withInt_(buf, 0, buf->size_);
      for (jint i = 0; i < JreLShift32(1, GFBITS_); i++) {
        
#line 197
        *IOSShortArray_GetRef(pi, i) = (jshort) (IOSLongArray_Get(buf, i) & GFMASK_);
      }
    }
    
#line 202
    IOSByteArray *out = [IOSByteArray newArrayWithLength:COND_BYTES_];
    OrgBouncycastlePqcCryptoCmceCMCEEngine_controlbitsfrompermutationWithByteArray_withShortArray_withLong_withLong_(out, pi, GFBITS_, JreLShift32(1, GFBITS_));
    
#line 205
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(out, 0, reg_sk, IRR_BYTES_ + 40, out->size_);
  }
  
#line 209
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hash_, 0, reg_sk, [self getPrivateKeySize] - JreIntDiv(SYS_N_, 8), JreIntDiv(SYS_N_, 8));
  return reg_sk;
}


#line 213
- (void)kem_keypairWithByteArray:(IOSByteArray *)pk
                   withByteArray:(IOSByteArray *)sk
    withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  
#line 217
  IOSByteArray *seed_a = [IOSByteArray newArrayWithLength:1];
  IOSByteArray *seed_b = [IOSByteArray newArrayWithLength:32];
  *IOSByteArray_GetRef(seed_a, 0) = 64;
  [((JavaSecuritySecureRandom *) nil_chk(random)) nextBytesWithByteArray:seed_b];
  
#line 224
  IOSByteArray *E = [IOSByteArray newArrayWithLength:JreIntDiv(SYS_N_, 8) + (JreLShift32(1, GFBITS_)) * 4 + SYS_T_ * 2 + 32];
  jint seedIndex;
  
#line 225
  jint skIndex = 0;
  IOSByteArray *prev_sk = seed_b;
  IOSLongArray *pivots = [IOSLongArray newArrayWithLongs:(jlong[]){ 0 } count:1];
  
#line 229
  id<OrgBouncycastleCryptoXof> digest = new_OrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(256);
  while (true) {
    
#line 233
    [digest updateWithByteArray:seed_a withInt:0 withInt:seed_a->size_];
    [digest updateWithByteArray:seed_b withInt:0 withInt:((IOSByteArray *) nil_chk(seed_b))->size_];
    [digest doFinalWithByteArray:E withInt:0 withInt:E->size_];
    
#line 241
    seedIndex = E->size_ - 32;
    seed_b = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(E, seedIndex, seedIndex + 32);
    
#line 245
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(prev_sk, 0, sk, 0, 32);
    prev_sk = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(seed_b, 0, 32);
    
#line 255
    IOSShortArray *field = [IOSShortArray newArrayWithLength:SYS_T_];
    jint sigma1_t = E->size_ - 32 - 2 * SYS_T_;
    seedIndex = sigma1_t;
    
#line 263
    for (jint i = 0; i < SYS_T_; i++) {
      
#line 265
      *IOSShortArray_GetRef(field, i) = OrgBouncycastlePqcCryptoCmceUtils_load_gfWithByteArray_withInt_withInt_(E, sigma1_t + i * 2, GFMASK_);
    }
    
#line 268
    if (OrgBouncycastlePqcCryptoCmceCMCEEngine_generate_irr_polyWithShortArray_(self, field) == -1) {
      
#line 270
      continue;
    }
    
#line 274
    skIndex = 32 + 8;
    for (jint i = 0; i < SYS_T_; i++) {
      
#line 277
      OrgBouncycastlePqcCryptoCmceUtils_store_gfWithByteArray_withInt_withShort_(sk, skIndex + i * 2, IOSShortArray_Get(field, i));
    }
    
#line 284
    IOSIntArray *perm = [IOSIntArray newArrayWithLength:JreLShift32(1, GFBITS_)];
    seedIndex -= (JreLShift32(1, GFBITS_)) * 4;
    
#line 291
    for (jint i = 0; i < JreLShift32(1, GFBITS_); i++) {
      
#line 293
      *IOSIntArray_GetRef(perm, i) = OrgBouncycastlePqcCryptoCmceUtils_load4WithByteArray_withInt_(E, seedIndex + i * 4);
    }
    
#line 296
    IOSShortArray *pi = [IOSShortArray newArrayWithLength:JreLShift32(1, GFBITS_)];
    
#line 300
    if (OrgBouncycastlePqcCryptoCmceCMCEEngine_pk_genWithByteArray_withByteArray_withIntArray_withShortArray_withLongArray_(self, pk, sk, perm, pi, pivots) == -1) {
      
#line 303
      continue;
    }
    
#line 309
    IOSByteArray *out = [IOSByteArray newArrayWithLength:COND_BYTES_];
    OrgBouncycastlePqcCryptoCmceCMCEEngine_controlbitsfrompermutationWithByteArray_withShortArray_withLong_withLong_(out, pi, GFBITS_, JreLShift32(1, GFBITS_));
    
#line 313
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(out, 0, sk, IRR_BYTES_ + 40, out->size_);
    
#line 316
    seedIndex -= JreIntDiv(SYS_N_, 8);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(E, seedIndex, sk, ((IOSByteArray *) nil_chk(sk))->size_ - JreIntDiv(SYS_N_, 8), JreIntDiv(SYS_N_, 8));
    
#line 320
    if (!usePivots_) {
      
#line 322
      OrgBouncycastlePqcCryptoCmceUtils_store8WithByteArray_withInt_withLong_(sk, 32, (jlong) 0xFFFFFFFFLL);
    }
    else {
      
#line 326
      OrgBouncycastlePqcCryptoCmceUtils_store8WithByteArray_withInt_withLong_(sk, 32, IOSLongArray_Get(pivots, 0));
    }
    
#line 331
    break;
  }
}


#line 336
- (void)syndromeWithByteArray:(IOSByteArray *)cipher_text
                withByteArray:(IOSByteArray *)pk
                withByteArray:(IOSByteArray *)error_vector {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_syndromeWithByteArray_withByteArray_withByteArray_(self, cipher_text, pk, error_vector);
}


#line 394
- (void)generate_error_vectorWithByteArray:(IOSByteArray *)error_vector
              withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_generate_error_vectorWithByteArray_withJavaSecuritySecureRandom_(self, error_vector, random);
}


#line 511
- (void)encryptWithByteArray:(IOSByteArray *)cipher_text
               withByteArray:(IOSByteArray *)pk
               withByteArray:(IOSByteArray *)error_vector
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_encryptWithByteArray_withByteArray_withByteArray_withJavaSecuritySecureRandom_(self, cipher_text, pk, error_vector, random);
}


#line 529
- (jint)kem_encWithByteArray:(IOSByteArray *)cipher_text
               withByteArray:(IOSByteArray *)key
               withByteArray:(IOSByteArray *)pk
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  
#line 531
  IOSByteArray *error_vector = [IOSByteArray newArrayWithLength:JreIntDiv(SYS_N_, 8)];
  jbyte mask;
  jint i;
  
#line 533
  jint padding_ok = 0;
  if (usePadding_) {
    
#line 536
    padding_ok = [self check_pk_paddingWithByteArray:pk];
  }
  
#line 545
  OrgBouncycastlePqcCryptoCmceCMCEEngine_encryptWithByteArray_withByteArray_withByteArray_withJavaSecuritySecureRandom_(self, cipher_text, pk, error_vector, random);
  
#line 554
  id<OrgBouncycastleCryptoXof> digest = new_OrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(256);
  [digest updateWithByte:(jbyte) (jint) 0x02];
  [digest updateWithByteArray:error_vector withInt:0 withInt:error_vector->size_];
  [digest doFinalWithByteArray:cipher_text withInt:SYND_BYTES_ withInt:32];
  
#line 565
  [digest updateWithByte:(jbyte) (jint) 0x01];
  [digest updateWithByteArray:error_vector withInt:0 withInt:error_vector->size_];
  [digest updateWithByteArray:cipher_text withInt:0 withInt:((IOSByteArray *) nil_chk(cipher_text))->size_];
  [digest doFinalWithByteArray:key withInt:0 withInt:((IOSByteArray *) nil_chk(key))->size_];
  
#line 570
  if (usePadding_) {
    
#line 574
    mask = (jbyte) padding_ok;
    mask ^= (jint) 0xFF;
    
#line 577
    for (i = 0; i < SYND_BYTES_ + 32; i++) {
      
#line 579
      *IOSByteArray_GetRef(cipher_text, i) &= mask;
    }
    
#line 582
    for (i = 0; i < 32; i++) {
      
#line 584
      *IOSByteArray_GetRef(key, i) &= mask;
    }
    
#line 587
    return padding_ok;
  }
  return 0;
}


#line 593
- (jint)kem_decWithByteArray:(IOSByteArray *)key
               withByteArray:(IOSByteArray *)cipher_text
               withByteArray:(IOSByteArray *)sk {
  
#line 595
  IOSByteArray *conf = [IOSByteArray newArrayWithLength:32];
  IOSByteArray *error_vector = [IOSByteArray newArrayWithLength:JreIntDiv(SYS_N_, 8)];
  
#line 598
  jint i;
  
#line 598
  jint padding_ok = 0;
  jbyte mask;
  if (usePadding_) {
    
#line 602
    padding_ok = [self check_c_paddingWithByteArray:cipher_text];
  }
  
#line 611
  jbyte ret_decrypt = (jbyte) OrgBouncycastlePqcCryptoCmceCMCEEngine_decryptWithByteArray_withByteArray_withByteArray_(self, error_vector, sk, cipher_text);
  
#line 620
  id<OrgBouncycastleCryptoXof> digest = new_OrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(256);
  [digest updateWithByte:(jbyte) (jint) 0x02];
  [digest updateWithByteArray:error_vector withInt:0 withInt:error_vector->size_];
  [digest doFinalWithByteArray:conf withInt:0 withInt:32];
  
#line 629
  jbyte ret_confirm = 0;
  for (i = 0; i < 32; i++) {
    
#line 632
    ret_confirm |= IOSByteArray_Get(conf, i) ^ IOSByteArray_Get(nil_chk(cipher_text), SYND_BYTES_ + i);
  }
  jshort m;
  
#line 636
  m = (jshort) (ret_decrypt | ret_confirm);
  m -= 1;
  JreRShiftAssignShort(&m, 8);
  m &= (jint) 0xff;
  
#line 641
  IOSByteArray *preimage = [IOSByteArray newArrayWithLength:1 + JreIntDiv(SYS_N_, 8) + SYND_BYTES_ + 32];
  
#line 647
  *IOSByteArray_GetRef(preimage, 0) = (jbyte) (m & 1);
  for (i = 0; i < JreIntDiv(SYS_N_, 8); i++) {
    
#line 650
    *IOSByteArray_GetRef(preimage, 1 + i) = (jbyte) ((~m & IOSByteArray_Get(nil_chk(sk), i + 40 + IRR_BYTES_ + COND_BYTES_)) | (m & IOSByteArray_Get(error_vector, i)));
  }
  for (i = 0; i < SYND_BYTES_ + 32; i++) {
    
#line 654
    *IOSByteArray_GetRef(preimage, 1 + JreIntDiv(SYS_N_, 8) + i) = IOSByteArray_Get(nil_chk(cipher_text), i);
  }
  
#line 663
  digest = new_OrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(256);
  [digest updateWithByteArray:preimage withInt:0 withInt:preimage->size_];
  [digest doFinalWithByteArray:key withInt:0 withInt:((IOSByteArray *) nil_chk(key))->size_];
  
#line 669
  if (usePadding_) {
    
#line 671
    mask = (jbyte) padding_ok;
    
#line 673
    for (i = 0; i < key->size_; i++) {
      
#line 675
      *IOSByteArray_GetRef(key, i) |= mask;
    }
    
#line 678
    return padding_ok;
  }
  return 0;
}


#line 685
- (jint)decryptWithByteArray:(IOSByteArray *)error_vector
               withByteArray:(IOSByteArray *)sk
               withByteArray:(IOSByteArray *)cipher_text {
  return OrgBouncycastlePqcCryptoCmceCMCEEngine_decryptWithByteArray_withByteArray_withByteArray_(self, error_vector, sk, cipher_text);
}


#line 783
+ (jint)minWithShort:(jshort)a
             withInt:(jint)b {
  return OrgBouncycastlePqcCryptoCmceCMCEEngine_minWithShort_withInt_(a, b);
}


#line 795
- (void)bmWithShortArray:(IOSShortArray *)outArg
          withShortArray:(IOSShortArray *)s {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_bmWithShortArray_withShortArray_(self, outArg, s);
}


#line 877
- (void)syndWithShortArray:(IOSShortArray *)outArg
            withShortArray:(IOSShortArray *)f
            withShortArray:(IOSShortArray *)L
             withByteArray:(IOSByteArray *)r {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_syndWithShortArray_withShortArray_withShortArray_withByteArray_(self, outArg, f, L, r);
}


#line 902
- (jint)mov_columnsWithByteArray2:(IOSObjectArray *)mat
                   withShortArray:(IOSShortArray *)pi
                    withLongArray:(IOSLongArray *)pivots {
  return OrgBouncycastlePqcCryptoCmceCMCEEngine_mov_columnsWithByteArray2_withShortArray_withLongArray_(self, mat, pi, pivots);
}


#line 1042
+ (jint)ctzWithLong:(jlong)inArg {
  return OrgBouncycastlePqcCryptoCmceCMCEEngine_ctzWithLong_(inArg);
}


#line 1057
+ (jlong)same_mask64WithShort:(jshort)x
                    withShort:(jshort)y {
  return OrgBouncycastlePqcCryptoCmceCMCEEngine_same_mask64WithShort_withShort_(x, y);
}


#line 1068
+ (jbyte)same_mask32WithShort:(jshort)x
                    withShort:(jshort)y {
  return OrgBouncycastlePqcCryptoCmceCMCEEngine_same_mask32WithShort_withShort_(x, y);
}


#line 1079
+ (void)layerWithShortArray:(IOSShortArray *)p
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)ptrIndex
                    withInt:(jint)s
                    withInt:(jint)n {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_layerWithShortArray_withByteArray_withInt_withInt_withInt_(p, outArg, ptrIndex, s, n);
}


#line 1101
+ (void)controlbitsfrompermutationWithByteArray:(IOSByteArray *)outArg
                                 withShortArray:(IOSShortArray *)pi
                                       withLong:(jlong)w
                                       withLong:(jlong)n {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_controlbitsfrompermutationWithByteArray_withShortArray_withLong_withLong_(outArg, pi, w, n);
}


#line 1148
+ (jshort)get_q_shortWithIntArray:(IOSIntArray *)temp
                          withInt:(jint)q_index {
  return OrgBouncycastlePqcCryptoCmceCMCEEngine_get_q_shortWithIntArray_withInt_(temp, q_index);
}


#line 1161
+ (void)cbrecursionWithByteArray:(IOSByteArray *)outArg
                        withLong:(jlong)pos
                        withLong:(jlong)step
                  withShortArray:(IOSShortArray *)pi
                         withInt:(jint)qIndex
                        withLong:(jlong)w
                        withLong:(jlong)n
                    withIntArray:(IOSIntArray *)temp {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_cbrecursionWithByteArray_withLong_withLong_withShortArray_withInt_withLong_withLong_withIntArray_(outArg, pos, step, pi, qIndex, w, n, temp);
}


#line 1378
- (jint)pk_genWithByteArray:(IOSByteArray *)pk
              withByteArray:(IOSByteArray *)sk
               withIntArray:(IOSIntArray *)perm
             withShortArray:(IOSShortArray *)pi
              withLongArray:(IOSLongArray *)pivots {
  return OrgBouncycastlePqcCryptoCmceCMCEEngine_pk_genWithByteArray_withByteArray_withIntArray_withShortArray_withLongArray_(self, pk, sk, perm, pi, pivots);
}


#line 1570
- (jshort)evalWithShortArray:(IOSShortArray *)f
                   withShort:(jshort)a {
  return OrgBouncycastlePqcCryptoCmceCMCEEngine_evalWithShortArray_withShort_(self, f, a);
}


#line 1585
- (void)rootWithShortArray:(IOSShortArray *)outArg
            withShortArray:(IOSShortArray *)f
            withShortArray:(IOSShortArray *)L {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_rootWithShortArray_withShortArray_withShortArray_(self, outArg, f, L);
}


#line 1593
- (jint)generate_irr_polyWithShortArray:(IOSShortArray *)field {
  return OrgBouncycastlePqcCryptoCmceCMCEEngine_generate_irr_polyWithShortArray_(self, field);
}


#line 1668
- (void)GF_mulWithShortArray:(IOSShortArray *)outArg
              withShortArray:(IOSShortArray *)left
              withShortArray:(IOSShortArray *)right {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_GF_mulWithShortArray_withShortArray_withShortArray_(self, outArg, left, right);
}


#line 1708
- (jint)check_pk_paddingWithByteArray:(IOSByteArray *)pk {
  
#line 1710
  jbyte b;
  jint i;
  
#line 1711
  jint ret;
  
#line 1713
  b = 0;
  for (i = 0; i < PK_NROWS_; i++) {
    
#line 1716
    b |= IOSByteArray_Get(nil_chk(pk), i * PK_ROW_BYTES_ + PK_ROW_BYTES_ - 1);
  }
  
#line 1719
  b = (jbyte) (JreURShift32((b & (jint) 0xff), JreIntMod(PK_NCOLS_, 8)));
  b -= 1;
  b = (jbyte) (JreURShift32((b & (jint) 0xff), 7));
  ret = b;
  
#line 1724
  return ret - 1;
}


#line 1728
- (jint)check_c_paddingWithByteArray:(IOSByteArray *)c {
  
#line 1730
  jbyte b;
  jint ret;
  
#line 1733
  b = (jbyte) (JreURShift32((IOSByteArray_Get(nil_chk(c), SYND_BYTES_ - 1) & (jint) 0xff), JreIntMod(PK_NROWS_, 8)));
  b -= 1;
  b = (jbyte) (JreURShift32((b & (jint) 0xff), 7));
  ret = b;
  
#line 1738
  return ret - 1;
}


#line 1741
- (jint)getDefaultSessionKeySize {
  
#line 1743
  return defaultKeySize_;
}


#line 1746
+ (void)sort32WithIntArray:(IOSIntArray *)temp
                   withInt:(jint)from
                   withInt:(jint)to {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_sort32WithIntArray_withInt_withInt_(temp, from, to);
}


#line 1799
+ (void)sort64WithLongArray:(IOSLongArray *)temp
                    withInt:(jint)from
                    withInt:(jint)to {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_sort64WithLongArray_withInt_withInt_(temp, from, to);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 14, 7, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 23, 24, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 25, 26, -1, -1, -1, -1 },
    { NULL, "B", 0xa, 27, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 30, 31, -1, -1, -1, -1 },
    { NULL, "S", 0x8, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 34, 35, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 36, 37, -1, -1, -1, -1 },
    { NULL, "S", 0x2, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 41, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 41, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 45, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 46, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 49, 50, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getIrrBytes);
  methods[1].selector = @selector(getCondBytes);
  methods[2].selector = @selector(getPrivateKeySize);
  methods[3].selector = @selector(getPublicKeySize);
  methods[4].selector = @selector(getCipherTextSize);
  methods[5].selector = @selector(initPackagePrivateWithInt:withInt:withInt:withIntArray:withBoolean:withInt:);
  methods[6].selector = @selector(generate_public_key_from_private_keyWithByteArray:);
  methods[7].selector = @selector(decompress_private_keyWithByteArray:);
  methods[8].selector = @selector(kem_keypairWithByteArray:withByteArray:withJavaSecuritySecureRandom:);
  methods[9].selector = @selector(syndromeWithByteArray:withByteArray:withByteArray:);
  methods[10].selector = @selector(generate_error_vectorWithByteArray:withJavaSecuritySecureRandom:);
  methods[11].selector = @selector(encryptWithByteArray:withByteArray:withByteArray:withJavaSecuritySecureRandom:);
  methods[12].selector = @selector(kem_encWithByteArray:withByteArray:withByteArray:withJavaSecuritySecureRandom:);
  methods[13].selector = @selector(kem_decWithByteArray:withByteArray:withByteArray:);
  methods[14].selector = @selector(decryptWithByteArray:withByteArray:withByteArray:);
  methods[15].selector = @selector(minWithShort:withInt:);
  methods[16].selector = @selector(bmWithShortArray:withShortArray:);
  methods[17].selector = @selector(syndWithShortArray:withShortArray:withShortArray:withByteArray:);
  methods[18].selector = @selector(mov_columnsWithByteArray2:withShortArray:withLongArray:);
  methods[19].selector = @selector(ctzWithLong:);
  methods[20].selector = @selector(same_mask64WithShort:withShort:);
  methods[21].selector = @selector(same_mask32WithShort:withShort:);
  methods[22].selector = @selector(layerWithShortArray:withByteArray:withInt:withInt:withInt:);
  methods[23].selector = @selector(controlbitsfrompermutationWithByteArray:withShortArray:withLong:withLong:);
  methods[24].selector = @selector(get_q_shortWithIntArray:withInt:);
  methods[25].selector = @selector(cbrecursionWithByteArray:withLong:withLong:withShortArray:withInt:withLong:withLong:withIntArray:);
  methods[26].selector = @selector(pk_genWithByteArray:withByteArray:withIntArray:withShortArray:withLongArray:);
  methods[27].selector = @selector(evalWithShortArray:withShort:);
  methods[28].selector = @selector(rootWithShortArray:withShortArray:withShortArray:);
  methods[29].selector = @selector(generate_irr_polyWithShortArray:);
  methods[30].selector = @selector(GF_mulWithShortArray:withShortArray:withShortArray:);
  methods[31].selector = @selector(check_pk_paddingWithByteArray:);
  methods[32].selector = @selector(check_c_paddingWithByteArray:);
  methods[33].selector = @selector(getDefaultSessionKeySize);
  methods[34].selector = @selector(sort32WithIntArray:withInt:withInt:);
  methods[35].selector = @selector(sort64WithLongArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SYS_N_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SYS_T_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "GFBITS_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "IRR_BYTES_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "COND_BYTES_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "PK_NROWS_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "PK_NCOLS_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "PK_ROW_BYTES_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "SYND_BYTES_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "GFMASK_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "poly_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "defaultKeySize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "gf_", "LOrgBouncycastlePqcCryptoCmceGF;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "benes_", "LOrgBouncycastlePqcCryptoCmceBENES;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "usePadding_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "countErrorIndices_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "usePivots_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "III[IZI", "generate_public_key_from_private_key", "[B", "decompress_private_key", "kem_keypair", "[B[BLJavaSecuritySecureRandom;", "syndrome", "[B[B[B", "generate_error_vector", "[BLJavaSecuritySecureRandom;", "encrypt", "[B[B[BLJavaSecuritySecureRandom;", "kem_enc", "kem_dec", "decrypt", "min", "SI", "bm", "[S[S", "synd", "[S[S[S[B", "mov_columns", "[[B[S[J", "ctz", "J", "same_mask64", "SS", "same_mask32", "layer", "[S[BIII", "controlbitsfrompermutation", "[B[SJJ", "get_q_short", "[II", "cbrecursion", "[BJJ[SIJJ[I", "pk_gen", "[B[B[I[S[J", "eval", "[SS", "root", "[S[S[S", "generate_irr_poly", "[S", "GF_mul", "check_pk_padding", "check_c_padding", "sort32", "[III", "sort64", "[JII" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoCmceCMCEEngine = { "CMCEEngine", "org.bouncycastle.pqc.crypto.cmce", ptrTable, methods, fields, 7, 0x0, 36, 17, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoCmceCMCEEngine;
}

@end


#line 67
void OrgBouncycastlePqcCryptoCmceCMCEEngine_initPackagePrivateWithInt_withInt_withInt_withIntArray_withBoolean_withInt_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, jint m, jint n, jint t, IOSIntArray *p, jboolean usePivots, jint defaultKeySize) {
  NSObject_init(self);
  self->usePivots_ = usePivots;
  self->SYS_N_ = n;
  self->SYS_T_ = t;
  self->GFBITS_ = m;
  self->poly_ = p;
  self->defaultKeySize_ = defaultKeySize;
  
#line 76
  self->IRR_BYTES_ = self->SYS_T_ * 2;
  self->COND_BYTES_ = (JreLShift32(1, self->GFBITS_ - 4)) * (2 * self->GFBITS_ - 1);
  
#line 79
  self->PK_NROWS_ = self->SYS_T_ * self->GFBITS_;
  self->PK_NCOLS_ = self->SYS_N_ - self->PK_NROWS_;
  self->PK_ROW_BYTES_ = JreIntDiv((self->PK_NCOLS_ + 7), 8);
  
#line 83
  self->SYND_BYTES_ = JreIntDiv((self->PK_NROWS_ + 7), 8);
  self->GFMASK_ = (JreLShift32(1, self->GFBITS_)) - 1;
  
#line 87
  if (self->GFBITS_ == 12) {
    
#line 89
    self->gf_ = new_OrgBouncycastlePqcCryptoCmceGF12_initPackagePrivateWithInt_(self->GFBITS_);
    self->benes_ = new_OrgBouncycastlePqcCryptoCmceBENES12_initPackagePrivateWithInt_withInt_withInt_(self->SYS_N_, self->SYS_T_, self->GFBITS_);
  }
  else {
    
#line 94
    self->gf_ = new_OrgBouncycastlePqcCryptoCmceGF13_initPackagePrivateWithInt_(self->GFBITS_);
    self->benes_ = new_OrgBouncycastlePqcCryptoCmceBENES13_initPackagePrivateWithInt_withInt_withInt_(self->SYS_N_, self->SYS_T_, self->GFBITS_);
  }
  
#line 98
  self->usePadding_ = (JreIntMod(self->SYS_T_, 8) != 0);
  self->countErrorIndices_ = (JreLShift32(1, self->GFBITS_) > self->SYS_N_);
}


#line 67
OrgBouncycastlePqcCryptoCmceCMCEEngine *new_OrgBouncycastlePqcCryptoCmceCMCEEngine_initPackagePrivateWithInt_withInt_withInt_withIntArray_withBoolean_withInt_(jint m, jint n, jint t, IOSIntArray *p, jboolean usePivots, jint defaultKeySize) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoCmceCMCEEngine, initPackagePrivateWithInt_withInt_withInt_withIntArray_withBoolean_withInt_, m, n, t, p, usePivots, defaultKeySize)
}


#line 67
OrgBouncycastlePqcCryptoCmceCMCEEngine *create_OrgBouncycastlePqcCryptoCmceCMCEEngine_initPackagePrivateWithInt_withInt_withInt_withIntArray_withBoolean_withInt_(jint m, jint n, jint t, IOSIntArray *p, jboolean usePivots, jint defaultKeySize) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoCmceCMCEEngine, initPackagePrivateWithInt_withInt_withInt_withIntArray_withBoolean_withInt_, m, n, t, p, usePivots, defaultKeySize)
}


#line 336
void OrgBouncycastlePqcCryptoCmceCMCEEngine_syndromeWithByteArray_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSByteArray *cipher_text, IOSByteArray *pk, IOSByteArray *error_vector) {
  
#line 343
  IOSShortArray *row = [IOSShortArray newArrayWithLength:JreIntDiv(self->SYS_N_, 8)];
  jint i;
  
#line 344
  jint j;
  
#line 344
  jint pk_ptr = 0;
  jbyte b;
  jint tail = JreIntMod(self->PK_NROWS_, 8);
  
#line 348
  for (i = 0; i < self->SYND_BYTES_; i++) {
    
#line 350
    *IOSByteArray_GetRef(nil_chk(cipher_text), i) = 0;
  }
  
#line 353
  for (i = 0; i < self->PK_NROWS_; i++) {
    
#line 355
    for (j = 0; j < JreIntDiv(self->SYS_N_, 8); j++) {
      
#line 357
      *IOSShortArray_GetRef(row, j) = 0;
    }
    
#line 360
    for (j = 0; j < self->PK_ROW_BYTES_; j++) {
      
#line 362
      *IOSShortArray_GetRef(row, JreIntDiv(self->SYS_N_, 8) - self->PK_ROW_BYTES_ + j) = IOSByteArray_Get(nil_chk(pk), pk_ptr + j);
    }
    if (self->usePadding_) {
      
#line 366
      for (j = JreIntDiv(self->SYS_N_, 8) - 1; j >= JreIntDiv(self->SYS_N_, 8) - self->PK_ROW_BYTES_; j--) {
        
#line 368
        *IOSShortArray_GetRef(row, j) = (jshort) (((JreLShift32((IOSShortArray_Get(row, j) & (jint) 0xff), tail)) | (JreURShift32((IOSShortArray_Get(row, j - 1) & (jint) 0xff), 8 - tail))) & (jint) 0xff);
      }
    }
    
#line 374
    *IOSShortArray_GetRef(row, JreIntDiv(i, 8)) |= JreLShift32(1, JreIntMod(i, 8));
    
#line 376
    b = 0;
    for (j = 0; j < JreIntDiv(self->SYS_N_, 8); j++) {
      
#line 379
      b ^= IOSShortArray_Get(row, j) & IOSByteArray_Get(nil_chk(error_vector), j);
    }
    
#line 382
    b ^= JreURShift32(b, 4);
    b ^= JreURShift32(b, 2);
    b ^= JreURShift32(b, 1);
    b &= 1;
    
#line 387
    *IOSByteArray_GetRef(nil_chk(cipher_text), JreIntDiv(i, 8)) |= JreLShift32(b, JreIntMod(i, 8));
    
#line 389
    pk_ptr += self->PK_ROW_BYTES_;
  }
}


#line 394
void OrgBouncycastlePqcCryptoCmceCMCEEngine_generate_error_vectorWithByteArray_withJavaSecuritySecureRandom_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSByteArray *error_vector, JavaSecuritySecureRandom *random) {
  
#line 396
  IOSByteArray *buf_bytes;
  IOSShortArray *buf_nums = [IOSShortArray newArrayWithLength:self->SYS_T_ * 2];
  IOSShortArray *ind = [IOSShortArray newArrayWithLength:self->SYS_T_];
  IOSByteArray *val = [IOSByteArray newArrayWithLength:self->SYS_T_];
  
#line 405
  while (true) {
    
#line 413
    if (self->countErrorIndices_) {
      
#line 415
      buf_bytes = [IOSByteArray newArrayWithLength:self->SYS_T_ * 4];
      
#line 417
      [((JavaSecuritySecureRandom *) nil_chk(random)) nextBytesWithByteArray:buf_bytes];
      for (jint i = 0; i < self->SYS_T_ * 2; i++) {
        
#line 420
        *IOSShortArray_GetRef(buf_nums, i) = OrgBouncycastlePqcCryptoCmceUtils_load_gfWithByteArray_withInt_withInt_(buf_bytes, i * 2, self->GFMASK_);
      }
      
#line 430
      jint count = 0;
      for (jint i = 0; i < self->SYS_T_ * 2 && count < self->SYS_T_; i++) {
        
#line 433
        if (IOSShortArray_Get(buf_nums, i) < self->SYS_N_) {
          
#line 435
          *IOSShortArray_GetRef(ind, count++) = IOSShortArray_Get(buf_nums, i);
        }
      }
      
#line 439
      if (count < self->SYS_T_) {
        
#line 442
        continue;
      }
    }
    else {
      
#line 447
      buf_bytes = [IOSByteArray newArrayWithLength:self->SYS_T_ * 2];
      [((JavaSecuritySecureRandom *) nil_chk(random)) nextBytesWithByteArray:buf_bytes];
      
#line 450
      for (jint i = 0; i < self->SYS_T_; i++) {
        
#line 452
        *IOSShortArray_GetRef(ind, i) = OrgBouncycastlePqcCryptoCmceUtils_load_gfWithByteArray_withInt_withInt_(buf_bytes, i * 2, self->GFMASK_);
      }
    }
    
#line 461
    jint eq = 0;
    
#line 463
    for (jint i = 1; i < self->SYS_T_ && eq != 1; i++) {
      
#line 465
      for (jint j = 0; j < i; j++) {
        
#line 467
        if (IOSShortArray_Get(ind, i) == IOSShortArray_Get(ind, j)) {
          
#line 469
          eq = 1;
          break;
        }
      }
    }
    
#line 475
    if (eq == 0) {
      
#line 477
      break;
    }
    else {
    }
  }
  
#line 492
  for (jint i = 0; i < self->SYS_T_; i++) {
    
#line 494
    *IOSByteArray_GetRef(val, i) = (jbyte) (JreLShift32(1, (IOSShortArray_Get(ind, i) & 7)));
  }
  
#line 497
  for (jshort i = 0; i < JreIntDiv(self->SYS_N_, 8); i++) {
    
#line 499
    *IOSByteArray_GetRef(nil_chk(error_vector), i) = 0;
    
#line 501
    for (jint j = 0; j < self->SYS_T_; j++) {
      
#line 503
      jshort mask = OrgBouncycastlePqcCryptoCmceCMCEEngine_same_mask32WithShort_withShort_(i, (jshort) (JreRShift32(IOSShortArray_Get(ind, j), 3)));
      mask &= (jint) 0xff;
      *IOSByteArray_GetRef(error_vector, i) |= IOSByteArray_Get(val, j) & mask;
    }
  }
}


#line 511
void OrgBouncycastlePqcCryptoCmceCMCEEngine_encryptWithByteArray_withByteArray_withByteArray_withJavaSecuritySecureRandom_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSByteArray *cipher_text, IOSByteArray *pk, IOSByteArray *error_vector, JavaSecuritySecureRandom *random) {
  
#line 519
  OrgBouncycastlePqcCryptoCmceCMCEEngine_generate_error_vectorWithByteArray_withJavaSecuritySecureRandom_(self, error_vector, random);
  
#line 525
  OrgBouncycastlePqcCryptoCmceCMCEEngine_syndromeWithByteArray_withByteArray_withByteArray_(self, cipher_text, pk, error_vector);
}


#line 685
jint OrgBouncycastlePqcCryptoCmceCMCEEngine_decryptWithByteArray_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSByteArray *error_vector, IOSByteArray *sk, IOSByteArray *cipher_text) {
  
#line 688
  IOSShortArray *g = [IOSShortArray newArrayWithLength:self->SYS_T_ + 1];
  IOSShortArray *L = [IOSShortArray newArrayWithLength:self->SYS_N_];
  
#line 691
  IOSShortArray *s = [IOSShortArray newArrayWithLength:self->SYS_T_ * 2];
  IOSShortArray *s_cmp = [IOSShortArray newArrayWithLength:self->SYS_T_ * 2];
  IOSShortArray *locator = [IOSShortArray newArrayWithLength:self->SYS_T_ + 1];
  IOSShortArray *images = [IOSShortArray newArrayWithLength:self->SYS_N_];
  
#line 696
  jshort t;
  
#line 698
  IOSByteArray *r = [IOSByteArray newArrayWithLength:JreIntDiv(self->SYS_N_, 8)];
  
#line 704
  for (jint i = 0; i < self->SYND_BYTES_; i++) {
    
#line 706
    *IOSByteArray_GetRef(r, i) = IOSByteArray_Get(nil_chk(cipher_text), i);
  }
  
#line 709
  for (jint i = self->SYND_BYTES_; i < JreIntDiv(self->SYS_N_, 8); i++) {
    
#line 711
    *IOSByteArray_GetRef(r, i) = 0;
  }
  
#line 714
  for (jint i = 0; i < self->SYS_T_; i++) {
    
#line 716
    *IOSShortArray_GetRef(g, i) = OrgBouncycastlePqcCryptoCmceUtils_load_gfWithByteArray_withInt_withInt_(sk, 40 + i * 2, self->GFMASK_);
  }
  *IOSShortArray_GetRef(g, self->SYS_T_) = 1;
  
#line 727
  [((OrgBouncycastlePqcCryptoCmceBENES *) nil_chk(self->benes_)) support_genWithShortArray:L withByteArray:sk];
  
#line 730
  OrgBouncycastlePqcCryptoCmceCMCEEngine_syndWithShortArray_withShortArray_withShortArray_withByteArray_(self, s, g, L, r);
  
#line 733
  OrgBouncycastlePqcCryptoCmceCMCEEngine_bmWithShortArray_withShortArray_(self, locator, s);
  
#line 736
  OrgBouncycastlePqcCryptoCmceCMCEEngine_rootWithShortArray_withShortArray_withShortArray_(self, images, locator, L);
  
#line 743
  for (jint i = 0; i < JreIntDiv(self->SYS_N_, 8); i++) {
    
#line 745
    *IOSByteArray_GetRef(nil_chk(error_vector), i) = 0;
  }
  
#line 748
  jint w = 0;
  for (jint i = 0; i < self->SYS_N_; i++) {
    
#line 751
    t = (jshort) ([((OrgBouncycastlePqcCryptoCmceGF *) nil_chk(self->gf_)) gf_iszeroWithShort:IOSShortArray_Get(images, i)] & 1);
    
#line 753
    *IOSByteArray_GetRef(nil_chk(error_vector), JreIntDiv(i, 8)) |= JreLShift32(t, JreIntMod(i, 8));
    w += t;
  }
  
#line 758
  OrgBouncycastlePqcCryptoCmceCMCEEngine_syndWithShortArray_withShortArray_withShortArray_withByteArray_(self, s_cmp, g, L, error_vector);
  
#line 764
  jint check;
  check = w;
  check ^= self->SYS_T_;
  
#line 768
  for (jint i = 0; i < self->SYS_T_ * 2; i++) {
    
#line 770
    check |= IOSShortArray_Get(s, i) ^ IOSShortArray_Get(s_cmp, i);
  }
  check -= 1;
  JreRShiftAssignInt(&check, 15);
  check &= (jint) 0x1;
  if ((check ^ 1) != 0) {
  }
  
#line 780
  return check ^ 1;
}


#line 783
jint OrgBouncycastlePqcCryptoCmceCMCEEngine_minWithShort_withInt_(jshort a, jint b) {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_initialize();
  if (a < b) {
    
#line 787
    return a;
  }
  return b;
}


#line 795
void OrgBouncycastlePqcCryptoCmceCMCEEngine_bmWithShortArray_withShortArray_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSShortArray *outArg, IOSShortArray *s) {
  
#line 797
  jint i;
  
#line 799
  jshort N = 0;
  jshort L = 0;
  jshort mle;
  jshort mne;
  
#line 804
  IOSShortArray *T = [IOSShortArray newArrayWithLength:self->SYS_T_ + 1];
  IOSShortArray *C = [IOSShortArray newArrayWithLength:self->SYS_T_ + 1];
  IOSShortArray *B = [IOSShortArray newArrayWithLength:self->SYS_T_ + 1];
  
#line 808
  jshort b = 1;
  
#line 808
  jshort d;
  
#line 808
  jshort f;
  
#line 811
  for (i = 0; i < self->SYS_T_ + 1; i++) {
    
#line 813
    *IOSShortArray_GetRef(C, i) = *IOSShortArray_GetRef(B, i) = 0;
  }
  
#line 816
  *IOSShortArray_GetRef(B, 1) = *IOSShortArray_GetRef(C, 0) = 1;
  
#line 820
  for (N = 0; N < 2 * self->SYS_T_; N++) {
    
#line 822
    d = 0;
    
#line 824
    for (i = 0; i <= OrgBouncycastlePqcCryptoCmceCMCEEngine_minWithShort_withInt_(N, self->SYS_T_); i++) {
      
#line 826
      d ^= [((OrgBouncycastlePqcCryptoCmceGF *) nil_chk(self->gf_)) gf_mulWithShort:IOSShortArray_Get(C, i) withShort:IOSShortArray_Get(nil_chk(s), N - i)];
    }
    
#line 829
    mne = d;
    mne -= 1;
    JreRShiftAssignShort(&mne, 15);
    mne &= (jint) 0x1;
    mne -= 1;
    mle = N;
    mle -= 2 * L;
    JreRShiftAssignShort(&mle, 15);
    mle &= (jint) 0x1;
    mle -= 1;
    mle &= mne;
    
#line 841
    for (i = 0; i <= self->SYS_T_; i++) {
      
#line 843
      *IOSShortArray_GetRef(T, i) = IOSShortArray_Get(C, i);
    }
    
#line 846
    f = [((OrgBouncycastlePqcCryptoCmceGF *) nil_chk(self->gf_)) gf_fracWithShort:b withShort:d];
    
#line 848
    for (i = 0; i <= self->SYS_T_; i++) {
      
#line 850
      *IOSShortArray_GetRef(C, i) ^= [((OrgBouncycastlePqcCryptoCmceGF *) nil_chk(self->gf_)) gf_mulWithShort:f withShort:IOSShortArray_Get(B, i)] & mne;
    }
    L = (jshort) ((L & ~mle) | ((N + 1 - L) & mle));
    
#line 854
    for (i = 0; i <= self->SYS_T_; i++) {
      
#line 856
      *IOSShortArray_GetRef(B, i) = (jshort) ((IOSShortArray_Get(B, i) & ~mle) | (IOSShortArray_Get(T, i) & mle));
    }
    
#line 859
    b = (jshort) ((b & ~mle) | (d & mle));
    
#line 861
    for (i = self->SYS_T_; i >= 1; i--) {
      
#line 863
      *IOSShortArray_GetRef(B, i) = IOSShortArray_Get(B, i - 1);
    }
    
#line 866
    *IOSShortArray_GetRef(B, 0) = 0;
  }
  
#line 869
  for (i = 0; i <= self->SYS_T_; i++) {
    
#line 871
    *IOSShortArray_GetRef(nil_chk(outArg), i) = IOSShortArray_Get(C, self->SYS_T_ - i);
  }
}


#line 877
void OrgBouncycastlePqcCryptoCmceCMCEEngine_syndWithShortArray_withShortArray_withShortArray_withByteArray_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSShortArray *outArg, IOSShortArray *f, IOSShortArray *L, IOSByteArray *r) {
  
#line 879
  jint i;
  
#line 879
  jint j;
  jshort e;
  
#line 880
  jshort e_inv;
  
#line 880
  jshort c;
  
#line 882
  for (j = 0; j < 2 * self->SYS_T_; j++) {
    
#line 884
    *IOSShortArray_GetRef(nil_chk(outArg), j) = 0;
  }
  
#line 887
  for (i = 0; i < self->SYS_N_; i++) {
    
#line 889
    c = (jshort) ((JreRShift32(IOSByteArray_Get(nil_chk(r), JreIntDiv(i, 8)), JreIntMod(i, 8))) & 1);
    
#line 891
    e = OrgBouncycastlePqcCryptoCmceCMCEEngine_evalWithShortArray_withShort_(self, f, IOSShortArray_Get(nil_chk(L), i));
    e_inv = [((OrgBouncycastlePqcCryptoCmceGF *) nil_chk(self->gf_)) gf_invWithShort:[self->gf_ gf_mulWithShort:e withShort:e]];
    
#line 894
    for (j = 0; j < 2 * self->SYS_T_; j++) {
      
#line 896
      *IOSShortArray_GetRef(nil_chk(outArg), j) = [((OrgBouncycastlePqcCryptoCmceGF *) nil_chk(self->gf_)) gf_addWithShort:IOSShortArray_Get(outArg, j) withShort:[self->gf_ gf_mulWithShort:e_inv withShort:c]];
      e_inv = [((OrgBouncycastlePqcCryptoCmceGF *) nil_chk(self->gf_)) gf_mulWithShort:e_inv withShort:IOSShortArray_Get(L, i)];
    }
  }
}


#line 902
jint OrgBouncycastlePqcCryptoCmceCMCEEngine_mov_columnsWithByteArray2_withShortArray_withLongArray_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSObjectArray *mat, IOSShortArray *pi, IOSLongArray *pivots) {
  
#line 904
  jint i;
  
#line 904
  jint j;
  
#line 904
  jint k;
  
#line 904
  jint s;
  
#line 904
  jint block_idx;
  
#line 904
  jint row;
  
#line 904
  jint tail;
  IOSLongArray *buf = [IOSLongArray newArrayWithLength:64];
  
#line 905
  IOSLongArray *ctz_list = [IOSLongArray newArrayWithLength:
#line 906
  32];
  jlong t;
  
#line 907
  jlong d;
  
#line 907
  jlong mask;
  jlong one = 1;
  
#line 910
  IOSByteArray *tmp = [IOSByteArray newArrayWithLength:9];
  
#line 912
  row = self->PK_NROWS_ - 32;
  block_idx = JreIntDiv(row, 8);
  tail = JreIntMod(row, 8);
  
#line 917
  if (self->usePadding_) {
    
#line 919
    for (i = 0; i < 32; i++) {
      
#line 921
      for (j = 0; j < 9; j++) {
        
#line 923
        *IOSByteArray_GetRef(tmp, j) = IOSByteArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mat), row + i)), block_idx + j);
      }
      for (j = 0; j < 8; j++) {
        
#line 927
        *IOSByteArray_GetRef(tmp, j) = (jbyte) ((JreRShift32((IOSByteArray_Get(tmp, j) & (jint) 0xff), tail)) | (JreLShift32(IOSByteArray_Get(tmp, j + 1), 8 - tail)));
      }
      
#line 930
      *IOSLongArray_GetRef(buf, i) = OrgBouncycastlePqcCryptoCmceUtils_load8WithByteArray_withInt_(tmp, 0);
    }
  }
  else {
    
#line 935
    for (i = 0; i < 32; i++) {
      
#line 937
      *IOSLongArray_GetRef(buf, i) = OrgBouncycastlePqcCryptoCmceUtils_load8WithByteArray_withInt_(IOSObjectArray_Get(nil_chk(mat), row + i), block_idx);
    }
  }
  
#line 945
  *IOSLongArray_GetRef(nil_chk(pivots), 0) = 0;
  
#line 947
  for (i = 0; i < 32; i++) {
    
#line 949
    t = IOSLongArray_Get(buf, i);
    for (j = i + 1; j < 32; j++) {
      
#line 952
      t |= IOSLongArray_Get(buf, j);
    }
    
#line 955
    if (t == 0) {
      
#line 957
      return -1;
    }
    
#line 960
    *IOSLongArray_GetRef(ctz_list, i) = s = OrgBouncycastlePqcCryptoCmceCMCEEngine_ctzWithLong_(t);
    *IOSLongArray_GetRef(pivots, 0) |= JreLShift64(one, IOSLongArray_Get(ctz_list, i));
    
#line 963
    for (j = i + 1; j < 32; j++) {
      
#line 965
      mask = (JreRShift64(IOSLongArray_Get(buf, i), s)) & 1;
      mask -= 1;
      *IOSLongArray_GetRef(buf, i) ^= IOSLongArray_Get(buf, j) & mask;
    }
    for (j = i + 1; j < 32; j++) {
      
#line 971
      mask = (JreRShift64(IOSLongArray_Get(buf, j), s)) & 1;
      mask = -mask;
      *IOSLongArray_GetRef(buf, j) ^= IOSLongArray_Get(buf, i) & mask;
    }
  }
  
#line 979
  for (j = 0; j < 32; j++) {
    
#line 981
    for (k = j + 1; k < 64; k++) {
      
#line 983
      d = IOSShortArray_Get(nil_chk(pi), row + j) ^ IOSShortArray_Get(pi, row + k);
      d &= OrgBouncycastlePqcCryptoCmceCMCEEngine_same_mask64WithShort_withShort_((jshort) k, (jshort) IOSLongArray_Get(ctz_list, j));
      *IOSShortArray_GetRef(pi, row + j) ^= d;
      *IOSShortArray_GetRef(pi, row + k) ^= d;
    }
  }
  
#line 992
  for (i = 0; i < self->PK_NROWS_; i++) {
    
#line 994
    if (self->usePadding_) {
      
#line 996
      for (k = 0; k < 9; k++) {
        
#line 998
        *IOSByteArray_GetRef(tmp, k) = IOSByteArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mat), i)), block_idx + k);
      }
      for (k = 0; k < 8; k++) {
        
#line 1002
        *IOSByteArray_GetRef(tmp, k) = (jbyte) ((JreRShift32((IOSByteArray_Get(tmp, k) & (jint) 0xff), tail)) | (JreLShift32(IOSByteArray_Get(tmp, k + 1), 8 - tail)));
      }
      t = OrgBouncycastlePqcCryptoCmceUtils_load8WithByteArray_withInt_(tmp, 0);
    }
    else {
      
#line 1008
      t = OrgBouncycastlePqcCryptoCmceUtils_load8WithByteArray_withInt_(IOSObjectArray_Get(nil_chk(mat), i), block_idx);
    }
    
#line 1011
    for (j = 0; j < 32; j++) {
      
#line 1013
      d = JreRShift64(t, j);
      d ^= JreRShift64(t, IOSLongArray_Get(ctz_list, j));
      d &= 1;
      
#line 1017
      t ^= JreLShift64(d, IOSLongArray_Get(ctz_list, j));
      t ^= JreLShift64(d, j);
    }
    if (self->usePadding_) {
      
#line 1022
      OrgBouncycastlePqcCryptoCmceUtils_store8WithByteArray_withInt_withLong_(tmp, 0, t);
      
#line 1024
      *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(mat), i)), block_idx + 8) = (jbyte) ((JreLShift32(JreURShift32((IOSByteArray_Get(nil_chk(IOSObjectArray_Get(mat, i)), block_idx + 8) & (jint) 0xff), tail), tail)) | (JreURShift32((IOSByteArray_Get(tmp, 7) & (jint) 0xff), 8 - tail)));
      *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(mat, i)), block_idx + 0) = (jbyte) ((JreLShift32((IOSByteArray_Get(tmp, 0) & (jint) 0xff), tail)) | (JreURShift32(JreLShift32((IOSByteArray_Get(nil_chk(IOSObjectArray_Get(mat, i)), block_idx) & (jint) 0xff), 8 - tail), 8 - tail)));
      
#line 1027
      for (k = 7; k >= 1; k--) {
        
#line 1029
        *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(mat, i)), block_idx + k) = (jbyte) ((JreLShift32((IOSByteArray_Get(tmp, k) & (jint) 0xff), tail)) | (JreURShift32((IOSByteArray_Get(tmp, k - 1) & (jint) 0xff), 8 - tail)));
      }
    }
    else {
      
#line 1034
      OrgBouncycastlePqcCryptoCmceUtils_store8WithByteArray_withInt_withLong_(IOSObjectArray_Get(nil_chk(mat), i), block_idx, t);
    }
  }
  
#line 1038
  return 0;
}


#line 1042
jint OrgBouncycastlePqcCryptoCmceCMCEEngine_ctzWithLong_(jlong inArg) {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_initialize();
  jint i;
  
#line 1044
  jint b;
  
#line 1044
  jint m = 0;
  
#line 1044
  jint r = 0;
  
#line 1046
  for (i = 0; i < 64; i++) {
    
#line 1048
    b = (jint) ((JreRShift64(inArg, i)) & 1);
    m |= b;
    r += (m ^ 1) & (b ^ 1);
  }
  
#line 1053
  return r;
}


#line 1057
jlong OrgBouncycastlePqcCryptoCmceCMCEEngine_same_mask64WithShort_withShort_(jshort x, jshort y) {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_initialize();
  jlong mask;
  
#line 1061
  mask = x ^ y;
  mask -= 1;
  JreURShiftAssignLong(&mask, 63);
  return -mask;
}

jbyte OrgBouncycastlePqcCryptoCmceCMCEEngine_same_mask32WithShort_withShort_(jshort x, jshort y) {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_initialize();
  jint mask;
  
#line 1072
  mask = x ^ y;
  mask -= 1;
  JreURShiftAssignInt(&mask, 31);
  mask = -mask;
  return (jbyte) (mask & (jint) 0xFF);
}


#line 1079
void OrgBouncycastlePqcCryptoCmceCMCEEngine_layerWithShortArray_withByteArray_withInt_withInt_withInt_(IOSShortArray *p, IOSByteArray *outArg, jint ptrIndex, jint s, jint n) {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_initialize();
  jint i;
  
#line 1081
  jint j;
  jint stride = JreLShift32(1, s);
  jint index = 0;
  jint d;
  
#line 1084
  jint m;
  
#line 1086
  for (i = 0; i < n; i += stride * 2) {
    
#line 1088
    for (j = 0; j < stride; j++) {
      
#line 1090
      d = IOSShortArray_Get(nil_chk(p), i + j) ^ IOSShortArray_Get(p, i + j + stride);
      m = (JreRShift32(IOSByteArray_Get(nil_chk(outArg), ptrIndex + (JreRShift32(index, 3))), (index & 7))) & 1;
      m = -m;
      d &= m;
      *IOSShortArray_GetRef(p, i + j) ^= d;
      *IOSShortArray_GetRef(p, i + j + stride) ^= d;
      index++;
    }
  }
}


#line 1101
void OrgBouncycastlePqcCryptoCmceCMCEEngine_controlbitsfrompermutationWithByteArray_withShortArray_withLong_withLong_(IOSByteArray *outArg, IOSShortArray *pi, jlong w, jlong n) {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_initialize();
  IOSIntArray *temp = [IOSIntArray newArrayWithLength:(jint) (2 * n)];
  IOSShortArray *pi_test = [IOSShortArray newArrayWithLength:(jint) n];
  jshort diff;
  jint i;
  jint ptrIndex;
  while (true) {
    
#line 1110
    for (i = 0; i < JreLongDiv((JreLongDiv((2 * w - 1) * n, 2) + 7), 8); i++) {
      
#line 1112
      *IOSByteArray_GetRef(nil_chk(outArg), i) = 0;
    }
    OrgBouncycastlePqcCryptoCmceCMCEEngine_cbrecursionWithByteArray_withLong_withLong_withShortArray_withInt_withLong_withLong_withIntArray_(outArg, 0, 1, pi, 0, w, n, temp);
    
#line 1117
    for (i = 0; i < n; i++) {
      
#line 1119
      *IOSShortArray_GetRef(pi_test, i) = (jshort) i;
    }
    
#line 1122
    ptrIndex = 0;
    for (i = 0; i < w; i++) {
      
#line 1125
      OrgBouncycastlePqcCryptoCmceCMCEEngine_layerWithShortArray_withByteArray_withInt_withInt_withInt_(pi_test, outArg, ptrIndex, i, (jint) n);
      ptrIndex += JreRShift64(n, 4);
    }
    
#line 1129
    for (i = (jint) (w - 2); i >= 0; i--) {
      
#line 1131
      OrgBouncycastlePqcCryptoCmceCMCEEngine_layerWithShortArray_withByteArray_withInt_withInt_withInt_(pi_test, outArg, ptrIndex, i, (jint) n);
      ptrIndex += JreRShift64(n, 4);
    }
    
#line 1135
    diff = 0;
    for (i = 0; i < n; i++) {
      
#line 1138
      diff |= IOSShortArray_Get(nil_chk(pi), i) ^ IOSShortArray_Get(pi_test, i);
    }
    
#line 1141
    if (diff == 0) {
      
#line 1143
      break;
    }
  }
}


#line 1148
jshort OrgBouncycastlePqcCryptoCmceCMCEEngine_get_q_shortWithIntArray_withInt_(IOSIntArray *temp, jint q_index) {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_initialize();
  jint temp_index = JreIntDiv(q_index, 2);
  if (JreIntMod(q_index, 2) == 0) {
    
#line 1153
    return (jshort) IOSIntArray_Get(nil_chk(temp), temp_index);
  }
  else {
    
#line 1157
    return (jshort) (JreRShift32((IOSIntArray_Get(nil_chk(temp), temp_index) & (jint) 0xffff0000), 16));
  }
}


#line 1161
void OrgBouncycastlePqcCryptoCmceCMCEEngine_cbrecursionWithByteArray_withLong_withLong_withShortArray_withInt_withLong_withLong_withIntArray_(IOSByteArray *outArg, jlong pos, jlong step, IOSShortArray *pi, jint qIndex, jlong w, jlong n, IOSIntArray *temp) {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_initialize();
  jlong x;
  
#line 1163
  jlong i;
  
#line 1163
  jlong j;
  
#line 1163
  jlong k;
  
#line 1165
  if (w == 1) {
    
#line 1167
    *IOSByteArray_GetRef(nil_chk(outArg), (jint) (JreRShift64(pos, 3))) ^= JreLShift32(OrgBouncycastlePqcCryptoCmceCMCEEngine_get_q_shortWithIntArray_withInt_(temp, qIndex), (pos & 7));
    return;
  }
  
#line 1171
  if (pi != nil) {
    
#line 1173
    for (x = 0; x < n; ++x) {
      
#line 1175
      *IOSIntArray_GetRef(nil_chk(temp), (jint) x) = (JreLShift32((IOSShortArray_Get(pi, (jint) x) ^ 1), 16)) | IOSShortArray_Get(pi, (jint) (x ^ 1));
    }
  }
  else {
    
#line 1180
    for (x = 0; x < n; ++x) {
      
#line 1182
      *IOSIntArray_GetRef(nil_chk(temp), (jint) x) = (JreLShift32((OrgBouncycastlePqcCryptoCmceCMCEEngine_get_q_shortWithIntArray_withInt_(temp, (jint) (qIndex + x)) ^ 1), 16)) | OrgBouncycastlePqcCryptoCmceCMCEEngine_get_q_shortWithIntArray_withInt_(temp, (jint) (qIndex + (x ^ 1)));
    }
  }
  OrgBouncycastlePqcCryptoCmceCMCEEngine_sort32WithIntArray_withInt_withInt_(temp, 0, (jint) n);
  
#line 1187
  for (x = 0; x < n; ++x) {
    
#line 1189
    jint Ax = IOSIntArray_Get(nil_chk(temp), (jint) x);
    jint px = Ax & (jint) 0xffff;
    jint cx = px;
    if (x < cx) {
      
#line 1194
      cx = (jint) x;
    }
    *IOSIntArray_GetRef(temp, (jint) (n + x)) = (JreLShift32(px, 16)) | cx;
  }
  
#line 1199
  for (x = 0; x < n; ++x) {
    
#line 1201
    *IOSIntArray_GetRef(nil_chk(temp), (jint) x) = (jint) ((JreLShift32(IOSIntArray_Get(temp, (jint) x), 16)) | x);
  }
  OrgBouncycastlePqcCryptoCmceCMCEEngine_sort32WithIntArray_withInt_withInt_(temp, 0, (jint) n);
  
#line 1205
  for (x = 0; x < n; ++x) {
    
#line 1207
    *IOSIntArray_GetRef(nil_chk(temp), (jint) x) = (JreLShift32(IOSIntArray_Get(temp, (jint) x), 16)) + (JreRShift32(IOSIntArray_Get(temp, (jint) (n + x)), 16));
  }
  OrgBouncycastlePqcCryptoCmceCMCEEngine_sort32WithIntArray_withInt_withInt_(temp, 0, (jint) n);
  
#line 1211
  if (w <= 10) {
    
#line 1213
    for (x = 0; x < n; ++x) {
      
#line 1215
      *IOSIntArray_GetRef(nil_chk(temp), (jint) (n + x)) = (JreLShift32((IOSIntArray_Get(temp, (jint) x) & (jint) 0xffff), 10)) | (IOSIntArray_Get(temp, (jint) (n + x)) & (jint) 0x3ff);
    }
    
#line 1218
    for (i = 1; i < w - 1; ++i) {
      
#line 1222
      for (x = 0; x < n; ++x) {
        
#line 1224
        *IOSIntArray_GetRef(nil_chk(temp), (jint) x) = (jint) ((JreLShift32((IOSIntArray_Get(temp, (jint) (n + x)) & ~(jint) 0x3ff), 6)) | x);
      }
      OrgBouncycastlePqcCryptoCmceCMCEEngine_sort32WithIntArray_withInt_withInt_(temp, 0, (jint) n);
      
#line 1228
      for (x = 0; x < n; ++x) {
        
#line 1230
        *IOSIntArray_GetRef(nil_chk(temp), (jint) x) = (JreLShift32(IOSIntArray_Get(temp, (jint) x), 20)) | IOSIntArray_Get(temp, (jint) (n + x));
      }
      OrgBouncycastlePqcCryptoCmceCMCEEngine_sort32WithIntArray_withInt_withInt_(temp, 0, (jint) n);
      
#line 1234
      for (x = 0; x < n; ++x) {
        
#line 1236
        jint ppcpx = IOSIntArray_Get(nil_chk(temp), (jint) x) & (jint) 0xfffff;
        jint ppcx = (IOSIntArray_Get(temp, (jint) x) & (jint) 0xffc00) | (IOSIntArray_Get(temp, (jint) (n + x)) & (jint) 0x3ff);
        if (ppcpx < ppcx) {
          
#line 1240
          ppcx = ppcpx;
        }
        *IOSIntArray_GetRef(temp, (jint) (n + x)) = ppcx;
      }
    }
    for (x = 0; x < n; ++x) {
      
#line 1247
      *IOSIntArray_GetRef(nil_chk(temp), (jint) (n + x)) &= (jint) 0x3ff;
    }
  }
  else {
    
#line 1252
    for (x = 0; x < n; ++x) {
      
#line 1254
      *IOSIntArray_GetRef(nil_chk(temp), (jint) (n + x)) = (JreLShift32(IOSIntArray_Get(temp, (jint) x), 16)) | (IOSIntArray_Get(temp, (jint) (n + x)) & (jint) 0xffff);
    }
    for (i = 1; i < w - 1; ++i) {
      
#line 1259
      for (x = 0; x < n; ++x) {
        
#line 1261
        *IOSIntArray_GetRef(nil_chk(temp), (jint) x) = (jint) ((IOSIntArray_Get(temp, (jint) (n + x)) & ~(jint) 0xffff) | x);
      }
      OrgBouncycastlePqcCryptoCmceCMCEEngine_sort32WithIntArray_withInt_withInt_(temp, 0, (jint) n);
      for (x = 0; x < n; ++x) {
        
#line 1266
        *IOSIntArray_GetRef(nil_chk(temp), (jint) x) = (JreLShift32(IOSIntArray_Get(temp, (jint) x), 16)) | (IOSIntArray_Get(temp, (jint) (n + x)) & (jint) 0xffff);
      }
      
#line 1270
      if (i < w - 2) {
        
#line 1273
        for (x = 0; x < n; ++x) {
          
#line 1275
          *IOSIntArray_GetRef(nil_chk(temp), (jint) (n + x)) = (IOSIntArray_Get(temp, (jint) x) & ~(jint) 0xffff) | (JreRShift32(IOSIntArray_Get(temp, (jint) (n + x)), 16));
        }
        
#line 1279
        OrgBouncycastlePqcCryptoCmceCMCEEngine_sort32WithIntArray_withInt_withInt_(temp, (jint) n, (jint) (n * 2));
        for (x = 0; x < n; ++x) {
          
#line 1282
          *IOSIntArray_GetRef(nil_chk(temp), (jint) (n + x)) = (JreLShift32(IOSIntArray_Get(temp, (jint) (n + x)), 16)) | (IOSIntArray_Get(temp, (jint) x) & (jint) 0xffff);
        }
      }
      
#line 1288
      OrgBouncycastlePqcCryptoCmceCMCEEngine_sort32WithIntArray_withInt_withInt_(temp, 0, (jint) n);
      
#line 1290
      for (x = 0; x < n; ++x) {
        
#line 1292
        jint cpx = (IOSIntArray_Get(nil_chk(temp), (jint) (n + x)) & ~(jint) 0xffff) | (IOSIntArray_Get(temp, (jint) x) & (jint) 0xffff);
        if (cpx < IOSIntArray_Get(temp, (jint) (n + x))) {
          
#line 1295
          *IOSIntArray_GetRef(temp, (jint) (n + x)) = cpx;
        }
      }
    }
    for (x = 0; x < n; ++x) {
      
#line 1301
      *IOSIntArray_GetRef(nil_chk(temp), (jint) (n + x)) &= (jint) 0xffff;
    }
  }
  if (pi != nil) {
    
#line 1306
    for (x = 0; x < n; ++x) {
      
#line 1308
      *IOSIntArray_GetRef(nil_chk(temp), (jint) x) = (jint) ((JreLShift32(IOSShortArray_Get(pi, (jint) x), 16)) + x);
    }
  }
  else {
    
#line 1313
    for (x = 0; x < n; ++x) {
      
#line 1315
      *IOSIntArray_GetRef(nil_chk(temp), (jint) x) = (jint) ((JreLShift32(OrgBouncycastlePqcCryptoCmceCMCEEngine_get_q_shortWithIntArray_withInt_(temp, (jint) (qIndex + x)), 16)) + x);
    }
  }
  
#line 1319
  OrgBouncycastlePqcCryptoCmceCMCEEngine_sort32WithIntArray_withInt_withInt_(temp, 0, (jint) n);
  
#line 1321
  for (j = 0; j < JreLongDiv(n, 2); ++j) {
    
#line 1323
    jlong _x = 2 * j;
    jint fj = IOSIntArray_Get(nil_chk(temp), (jint) (n + _x)) & 1;
    jint Fx = (jint) (_x + fj);
    jint Fx1 = Fx ^ 1;
    
#line 1328
    *IOSByteArray_GetRef(nil_chk(outArg), (jint) (JreRShift64(pos, 3))) ^= JreLShift32(fj, (pos & 7));
    pos += step;
    
#line 1331
    *IOSIntArray_GetRef(temp, (jint) (n + _x)) = (JreLShift32(IOSIntArray_Get(temp, (jint) _x), 16)) | Fx;
    *IOSIntArray_GetRef(temp, (jint) (n + _x + 1)) = (JreLShift32(IOSIntArray_Get(temp, (jint) (_x + 1)), 16)) | Fx1;
  }
  
#line 1336
  OrgBouncycastlePqcCryptoCmceCMCEEngine_sort32WithIntArray_withInt_withInt_(temp, (jint) n, (jint) (n * 2));
  
#line 1338
  pos += (2 * w - 3) * step * (JreLongDiv(n, 2));
  
#line 1340
  for (k = 0; k < JreLongDiv(n, 2); ++k) {
    
#line 1342
    jlong y = 2 * k;
    jint lk = IOSIntArray_Get(nil_chk(temp), (jint) (n + y)) & 1;
    jint Ly = (jint) (y + lk);
    jint Ly1 = Ly ^ 1;
    
#line 1347
    *IOSByteArray_GetRef(nil_chk(outArg), (jint) (JreRShift64(pos, 3))) ^= JreLShift32(lk, (pos & 7));
    pos += step;
    
#line 1350
    *IOSIntArray_GetRef(temp, (jint) y) = (JreLShift32(Ly, 16)) | (IOSIntArray_Get(temp, (jint) (n + y)) & (jint) 0xffff);
    *IOSIntArray_GetRef(temp, (jint) (y + 1)) = (JreLShift32(Ly1, 16)) | (IOSIntArray_Get(temp, (jint) (n + y + 1)) & (jint) 0xffff);
  }
  
#line 1355
  OrgBouncycastlePqcCryptoCmceCMCEEngine_sort32WithIntArray_withInt_withInt_(temp, 0, (jint) n);
  
#line 1357
  pos -= (2 * w - 2) * step * (JreLongDiv(n, 2));
  
#line 1359
  IOSShortArray *q = [IOSShortArray newArrayWithLength:(jint) n * 4];
  for (i = 0; i < n * 2; i++) {
    
#line 1362
    *IOSShortArray_GetRef(q, (jint) (i * 2 + 0)) = (jshort) IOSIntArray_Get(nil_chk(temp), (jint) i);
    *IOSShortArray_GetRef(q, (jint) (i * 2 + 1)) = (jshort) (JreRShift32((IOSIntArray_Get(temp, (jint) i) & (jint) 0xffff0000), 16));
  }
  for (j = 0; j < JreLongDiv(n, 2); ++j) {
    
#line 1367
    *IOSShortArray_GetRef(q, (jint) j) = (jshort) (JreURShift32((IOSIntArray_Get(nil_chk(temp), (jint) (2 * j)) & (jint) 0xffff), 1));
    *IOSShortArray_GetRef(q, (jint) (j + JreLongDiv(n, 2))) = (jshort) (JreURShift32((IOSIntArray_Get(temp, (jint) (2 * j + 1)) & (jint) 0xffff), 1));
  }
  for (i = 0; i < JreLongDiv(n, 2); i++) {
    
#line 1372
    *IOSIntArray_GetRef(nil_chk(temp), (jint) (n + JreLongDiv(n, 4) + i)) = (JreLShift32(IOSShortArray_Get(q, (jint) (i * 2 + 1)), 16)) | IOSShortArray_Get(q, (jint) (i * 2));
  }
  OrgBouncycastlePqcCryptoCmceCMCEEngine_cbrecursionWithByteArray_withLong_withLong_withShortArray_withInt_withLong_withLong_withIntArray_(outArg, pos, step * 2, nil, (jint) (n + JreLongDiv(n, 4)) * 2, w - 1, JreLongDiv(n, 2), temp);
  OrgBouncycastlePqcCryptoCmceCMCEEngine_cbrecursionWithByteArray_withLong_withLong_withShortArray_withInt_withLong_withLong_withIntArray_(outArg, pos + step, step * 2, nil, (jint) ((n + JreLongDiv(n, 4)) * 2 + JreLongDiv(n, 2)), w - 1, JreLongDiv(n, 2), temp);
}


#line 1378
jint OrgBouncycastlePqcCryptoCmceCMCEEngine_pk_genWithByteArray_withByteArray_withIntArray_withShortArray_withLongArray_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSByteArray *pk, IOSByteArray *sk, IOSIntArray *perm, IOSShortArray *pi, IOSLongArray *pivots) {
  
#line 1380
  IOSShortArray *g = [IOSShortArray newArrayWithLength:self->SYS_T_ + 1];
  jint i;
  
#line 1381
  jint j;
  
#line 1381
  jint k;
  *IOSShortArray_GetRef(g, self->SYS_T_) = 1;
  
#line 1384
  for (i = 0; i < self->SYS_T_; i++) {
    
#line 1386
    *IOSShortArray_GetRef(g, i) = OrgBouncycastlePqcCryptoCmceUtils_load_gfWithByteArray_withInt_withInt_(sk, 40 + i * 2, self->GFMASK_);
  }
  
#line 1390
  IOSLongArray *buf = [IOSLongArray newArrayWithLength:JreLShift32(1, self->GFBITS_)];
  for (i = 0; i < JreLShift32(1, self->GFBITS_); i++) {
    
#line 1393
    *IOSLongArray_GetRef(buf, i) = IOSIntArray_Get(nil_chk(perm), i);
    JreLShiftAssignLong(IOSLongArray_GetRef(buf, i), 31);
    *IOSLongArray_GetRef(buf, i) |= i;
    *IOSLongArray_GetRef(buf, i) &= (jlong) 0x7fffffffffffffffLL;
  }
  
#line 1402
  OrgBouncycastlePqcCryptoCmceCMCEEngine_sort64WithLongArray_withInt_withInt_(buf, 0, buf->size_);
  
#line 1405
  for (i = 1; i < JreLShift32(1, self->GFBITS_); i++) {
    
#line 1407
    if (JreRShift64(IOSLongArray_Get(buf, i - 1), 31) == JreRShift64(IOSLongArray_Get(buf, i), 31)) {
      
#line 1410
      return -1;
    }
  }
  
#line 1415
  IOSShortArray *L = [IOSShortArray newArrayWithLength:self->SYS_N_];
  for (i = 0; i < JreLShift32(1, self->GFBITS_); i++) {
    
#line 1418
    *IOSShortArray_GetRef(nil_chk(pi), i) = (jshort) (IOSLongArray_Get(buf, i) & self->GFMASK_);
  }
  for (i = 0; i < self->SYS_N_; i++) {
    
#line 1422
    *IOSShortArray_GetRef(L, i) = OrgBouncycastlePqcCryptoCmceUtils_bitrevWithShort_withInt_(IOSShortArray_Get(nil_chk(pi), i), self->GFBITS_);
  }
  
#line 1426
  IOSShortArray *inv = [IOSShortArray newArrayWithLength:self->SYS_N_];
  
#line 1428
  OrgBouncycastlePqcCryptoCmceCMCEEngine_rootWithShortArray_withShortArray_withShortArray_(self, inv, g, L);
  
#line 1430
  for (i = 0; i < self->SYS_N_; i++) {
    
#line 1432
    *IOSShortArray_GetRef(inv, i) = [((OrgBouncycastlePqcCryptoCmceGF *) nil_chk(self->gf_)) gf_invWithShort:IOSShortArray_Get(inv, i)];
  }
  IOSObjectArray *mat = [IOSByteArray newArrayWithDimensions:2 lengths:(jint[]){ self->PK_NROWS_, JreIntDiv(self->SYS_N_, 8) }];
  jbyte b;
  for (i = 0; i < self->PK_NROWS_; i++) {
    
#line 1438
    for (j = 0; j < JreIntDiv(self->SYS_N_, 8); j++) {
      
#line 1440
      *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(mat, i)), j) = 0;
    }
  }
  
#line 1444
  for (i = 0; i < self->SYS_T_; i++) {
    
#line 1446
    for (j = 0; j < self->SYS_N_; j += 8) {
      
#line 1448
      for (k = 0; k < self->GFBITS_; k++) {
        
#line 1450
        b = (jbyte) ((JreURShift32(IOSShortArray_Get(inv, j + 7), k)) & 1);
        JreLShiftAssignByte(&b, 1);
        b |= (JreURShift32(IOSShortArray_Get(inv, j + 6), k)) & 1;
        JreLShiftAssignByte(&b, 1);
        b |= (JreURShift32(IOSShortArray_Get(inv, j + 5), k)) & 1;
        JreLShiftAssignByte(&b, 1);
        b |= (JreURShift32(IOSShortArray_Get(inv, j + 4), k)) & 1;
        JreLShiftAssignByte(&b, 1);
        b |= (JreURShift32(IOSShortArray_Get(inv, j + 3), k)) & 1;
        JreLShiftAssignByte(&b, 1);
        b |= (JreURShift32(IOSShortArray_Get(inv, j + 2), k)) & 1;
        JreLShiftAssignByte(&b, 1);
        b |= (JreURShift32(IOSShortArray_Get(inv, j + 1), k)) & 1;
        JreLShiftAssignByte(&b, 1);
        b |= (JreURShift32(IOSShortArray_Get(inv, j + 0), k)) & 1;
        
#line 1466
        *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(mat, i * self->GFBITS_ + k)), JreIntDiv(j, 8)) = b;
      }
    }
    
#line 1470
    for (j = 0; j < self->SYS_N_; j++) {
      
#line 1472
      *IOSShortArray_GetRef(inv, j) = [((OrgBouncycastlePqcCryptoCmceGF *) nil_chk(self->gf_)) gf_mulWithShort:IOSShortArray_Get(inv, j) withShort:IOSShortArray_Get(L, j)];
    }
  }
  
#line 1477
  jint row;
  
#line 1477
  jint c;
  jbyte mask;
  for (i = 0; i < JreIntDiv((self->PK_NROWS_ + 7), 8); i++) {
    
#line 1481
    for (j = 0; j < 8; j++) {
      
#line 1483
      row = i * 8 + j;
      
#line 1485
      if (row >= self->PK_NROWS_) {
        
#line 1487
        break;
      }
      
#line 1490
      if (self->usePivots_ && row == self->PK_NROWS_ - 32) {
        
#line 1492
        if (OrgBouncycastlePqcCryptoCmceCMCEEngine_mov_columnsWithByteArray2_withShortArray_withLongArray_(self, mat, pi, pivots) != 0) {
          
#line 1495
          return -1;
        }
      }
      
#line 1499
      for (k = row + 1; k < self->PK_NROWS_; k++) {
        
#line 1501
        mask = (jbyte) (IOSByteArray_Get(nil_chk(IOSObjectArray_Get(mat, row)), i) ^ IOSByteArray_Get(nil_chk(IOSObjectArray_Get(mat, k)), i));
        JreRShiftAssignByte(&mask, j);
        mask &= 1;
        mask = (jbyte) -mask;
        
#line 1506
        for (c = 0; c < JreIntDiv(self->SYS_N_, 8); c++) {
          
#line 1508
          *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(mat, row)), c) ^= IOSByteArray_Get(nil_chk(IOSObjectArray_Get(mat, k)), c) & mask;
        }
      }
      
#line 1513
      if (((JreRShift32(IOSByteArray_Get(nil_chk(IOSObjectArray_Get(mat, row)), i), j)) & 1) == 0) {
        
#line 1516
        return -1;
      }
      
#line 1519
      for (k = 0; k < self->PK_NROWS_; k++) {
        
#line 1521
        if (k != row) {
          
#line 1523
          mask = (jbyte) (JreRShift32(IOSByteArray_Get(nil_chk(IOSObjectArray_Get(mat, k)), i), j));
          mask &= 1;
          mask = (jbyte) -mask;
          
#line 1527
          for (c = 0; c < JreIntDiv(self->SYS_N_, 8); c++) {
            
#line 1529
            *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(mat, k)), c) ^= IOSByteArray_Get(nil_chk(IOSObjectArray_Get(mat, row)), c) & mask;
          }
        }
      }
    }
  }
  
#line 1538
  if (pk != nil) {
    
#line 1540
    if (self->usePadding_) {
      
#line 1542
      jint tail;
      
#line 1542
      jint pk_index = 0;
      tail = JreIntMod(self->PK_NROWS_, 8);
      for (i = 0; i < self->PK_NROWS_; i++) {
        
#line 1546
        for (j = JreIntDiv((self->PK_NROWS_ - 1), 8); j < JreIntDiv(self->SYS_N_, 8) - 1; j++) {
          
#line 1548
          *IOSByteArray_GetRef(pk, pk_index++) = (jbyte) ((JreURShift32((IOSByteArray_Get(nil_chk(IOSObjectArray_Get(mat, i)), j) & (jint) 0xff), tail)) | (JreLShift32(IOSByteArray_Get(nil_chk(IOSObjectArray_Get(mat, i)), j + 1), 8 - tail)));
        }
        *IOSByteArray_GetRef(pk, pk_index++) = (jbyte) (JreURShift32((IOSByteArray_Get(nil_chk(IOSObjectArray_Get(mat, i)), j) & (jint) 0xff), tail));
      }
    }
    else {
      
#line 1555
      for (i = 0; i < self->PK_NROWS_; i++) {
        
#line 1557
        k = 0;
        for (j = 0; j < JreIntDiv((self->SYS_N_ - self->PK_NROWS_ + 7), 8); j++) {
          
#line 1560
          *IOSByteArray_GetRef(pk, i * (JreIntDiv((self->SYS_N_ - self->PK_NROWS_ + 7), 8)) + k) = IOSByteArray_Get(nil_chk(IOSObjectArray_Get(mat, i)), j + JreIntDiv(self->PK_NROWS_, 8));
          k++;
        }
      }
    }
  }
  return 0;
}


#line 1570
jshort OrgBouncycastlePqcCryptoCmceCMCEEngine_evalWithShortArray_withShort_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSShortArray *f, jshort a) {
  
#line 1572
  jshort r;
  
#line 1574
  r = IOSShortArray_Get(nil_chk(f), self->SYS_T_);
  
#line 1576
  for (jint i = self->SYS_T_ - 1; i >= 0; i--) {
    
#line 1578
    r = [((OrgBouncycastlePqcCryptoCmceGF *) nil_chk(self->gf_)) gf_mulWithShort:r withShort:a];
    r = [((OrgBouncycastlePqcCryptoCmceGF *) nil_chk(self->gf_)) gf_addWithShort:r withShort:IOSShortArray_Get(f, i)];
  }
  
#line 1582
  return r;
}


#line 1585
void OrgBouncycastlePqcCryptoCmceCMCEEngine_rootWithShortArray_withShortArray_withShortArray_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSShortArray *outArg, IOSShortArray *f, IOSShortArray *L) {
  
#line 1587
  for (jint i = 0; i < self->SYS_N_; i++) {
    
#line 1589
    *IOSShortArray_GetRef(nil_chk(outArg), i) = OrgBouncycastlePqcCryptoCmceCMCEEngine_evalWithShortArray_withShort_(self, f, IOSShortArray_Get(nil_chk(L), i));
  }
}


#line 1593
jint OrgBouncycastlePqcCryptoCmceCMCEEngine_generate_irr_polyWithShortArray_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSShortArray *field) {
  
#line 1598
  IOSObjectArray *m = [IOSShortArray newArrayWithDimensions:2 lengths:(jint[]){ self->SYS_T_ + 1, self->SYS_T_ }];
  
#line 1601
  *IOSShortArray_GetRef(nil_chk(IOSObjectArray_Get(m, 0)), 0) = 1;
  for (jint i = 1; i < self->SYS_T_; i++) {
    
#line 1604
    *IOSShortArray_GetRef(nil_chk(IOSObjectArray_Get(m, 0)), i) = 0;
  }
  
#line 1608
  for (jint i = 0; i < self->SYS_T_; i++) {
    
#line 1610
    *IOSShortArray_GetRef(nil_chk(IOSObjectArray_Get(m, 1)), i) = IOSShortArray_Get(nil_chk(field), i);
  }
  for (jint j = 2; j <= self->SYS_T_; j++) {
    
#line 1614
    OrgBouncycastlePqcCryptoCmceCMCEEngine_GF_mulWithShortArray_withShortArray_withShortArray_(self, IOSObjectArray_Get(m, j), IOSObjectArray_Get(m, j - 1), field);
  }
  
#line 1621
  for (jint j = 0; j < self->SYS_T_; j++) {
    
#line 1623
    for (jint k = j + 1; k < self->SYS_T_; k++) {
      
#line 1625
      jshort mask = [((OrgBouncycastlePqcCryptoCmceGF *) nil_chk(self->gf_)) gf_iszeroWithShort:IOSShortArray_Get(nil_chk(IOSObjectArray_Get(m, j)), j)];
      for (jint c = j; c < self->SYS_T_ + 1; c++) {
        
#line 1628
        jshort temp = (jshort) (IOSShortArray_Get(nil_chk(IOSObjectArray_Get(m, c)), j) ^ IOSShortArray_Get(nil_chk(IOSObjectArray_Get(m, c)), k) & mask);
        *IOSShortArray_GetRef(nil_chk(IOSObjectArray_Get(m, c)), j) = temp;
      }
    }
    
#line 1634
    if (IOSShortArray_Get(nil_chk(IOSObjectArray_Get(m, j)), j) == 0) {
      
#line 1637
      return -1;
    }
    
#line 1641
    jshort inv = [((OrgBouncycastlePqcCryptoCmceGF *) nil_chk(self->gf_)) gf_invWithShort:IOSShortArray_Get(nil_chk(IOSObjectArray_Get(m, j)), j)];
    
#line 1643
    for (jint c = j; c < self->SYS_T_ + 1; c++) {
      
#line 1645
      *IOSShortArray_GetRef(nil_chk(IOSObjectArray_Get(m, c)), j) = [((OrgBouncycastlePqcCryptoCmceGF *) nil_chk(self->gf_)) gf_mulWithShort:IOSShortArray_Get(nil_chk(IOSObjectArray_Get(m, c)), j) withShort:inv];
    }
    
#line 1648
    for (jint k = 0; k < self->SYS_T_; k++) {
      
#line 1650
      if (k != j) {
        
#line 1652
        jshort t = IOSShortArray_Get(nil_chk(IOSObjectArray_Get(m, j)), k);
        
#line 1654
        for (jint c = j; c < self->SYS_T_ + 1; c++) {
          
#line 1656
          *IOSShortArray_GetRef(nil_chk(IOSObjectArray_Get(m, c)), k) ^= [((OrgBouncycastlePqcCryptoCmceGF *) nil_chk(self->gf_)) gf_mulWithShort:IOSShortArray_Get(nil_chk(IOSObjectArray_Get(m, c)), j) withShort:t];
        }
      }
    }
  }
  for (jint i = 0; i < self->SYS_T_; i++) {
    
#line 1663
    *IOSShortArray_GetRef(nil_chk(field), i) = IOSShortArray_Get(nil_chk(IOSObjectArray_Get(m, self->SYS_T_)), i);
  }
  return 0;
}


#line 1668
void OrgBouncycastlePqcCryptoCmceCMCEEngine_GF_mulWithShortArray_withShortArray_withShortArray_(OrgBouncycastlePqcCryptoCmceCMCEEngine *self, IOSShortArray *outArg, IOSShortArray *left, IOSShortArray *right) {
  
#line 1671
  IOSShortArray *prod = [IOSShortArray newArrayWithLength:self->SYS_T_ * 2 - 1];
  for (jint i = 0; i < self->SYS_T_ * 2 - 1; i++) {
    
#line 1674
    *IOSShortArray_GetRef(prod, i) = 0;
  }
  for (jint i = 0; i < self->SYS_T_; i++) {
    
#line 1678
    for (jint j = 0; j < self->SYS_T_; j++) {
      
#line 1680
      jshort temp = [((OrgBouncycastlePqcCryptoCmceGF *) nil_chk(self->gf_)) gf_mulWithShort:IOSShortArray_Get(nil_chk(left), i) withShort:IOSShortArray_Get(nil_chk(right), j)];
      *IOSShortArray_GetRef(prod, i + j) ^= temp;
    }
  }
  
#line 1685
  for (jint i = (self->SYS_T_ - 1) * 2; i >= self->SYS_T_; i--) {
    {
      IOSIntArray *a__ = self->poly_;
      jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
      jint const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jint element = *b__++;
        
#line 1688
        jint polyIndex = element;
        if (polyIndex == 0 && self->GFBITS_ == 12) {
          
#line 1691
          *IOSShortArray_GetRef(prod, i - self->SYS_T_) ^= [((OrgBouncycastlePqcCryptoCmceGF *) nil_chk(self->gf_)) gf_mulWithShort:IOSShortArray_Get(prod, i) withShort:(jshort) 2];
        }
        else {
          
#line 1695
          *IOSShortArray_GetRef(prod, i - self->SYS_T_ + polyIndex) ^= IOSShortArray_Get(prod, i);
        }
      }
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(prod, 0, outArg, 0, self->SYS_T_);
  for (jint i = 0; i < self->SYS_T_; i++) {
    
#line 1703
    *IOSShortArray_GetRef(nil_chk(outArg), i) = IOSShortArray_Get(prod, i);
  }
}


#line 1746
void OrgBouncycastlePqcCryptoCmceCMCEEngine_sort32WithIntArray_withInt_withInt_(IOSIntArray *temp, jint from, jint to) {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_initialize();
  jint top;
  
#line 1748
  jint p;
  
#line 1748
  jint q;
  
#line 1748
  jint r;
  
#line 1748
  jint i;
  jint n = to - from;
  
#line 1751
  if (n < 2) {
    return;
  }
  top = 1;
  while (top < n - top) {
    top += top;
  }
  
#line 1759
  for (p = top; p > 0; JreURShiftAssignInt(&p, 1)) {
    
#line 1761
    for (i = 0; i < n - p; ++i) {
      
#line 1763
      if ((i & p) == 0) {
        
#line 1765
        jint ab = IOSIntArray_Get(nil_chk(temp), from + i + p) ^ IOSIntArray_Get(temp, from + i);
        jint c = IOSIntArray_Get(temp, from + i + p) - IOSIntArray_Get(temp, from + i);
        c ^= ab & (c ^ IOSIntArray_Get(temp, from + i + p));
        JreRShiftAssignInt(&c, 31);
        c &= ab;
        *IOSIntArray_GetRef(temp, from + i) ^= c;
        *IOSIntArray_GetRef(temp, from + i + p) ^= c;
      }
    }
    i = 0;
    for (q = top; q > p; JreURShiftAssignInt(&q, 1)) {
      
#line 1777
      for (; i < n - q; ++i) {
        
#line 1779
        if ((i & p) == 0) {
          
#line 1781
          jint a = IOSIntArray_Get(nil_chk(temp), from + i + p);
          for (r = q; r > p; JreURShiftAssignInt(&r, 1)) {
            
#line 1784
            jint ab = IOSIntArray_Get(temp, from + i + r) ^ a;
            jint c = IOSIntArray_Get(temp, from + i + r) - a;
            c ^= ab & (c ^ IOSIntArray_Get(temp, from + i + r));
            JreRShiftAssignInt(&c, 31);
            c &= ab;
            a ^= c;
            *IOSIntArray_GetRef(temp, from + i + r) ^= c;
          }
          *IOSIntArray_GetRef(temp, from + i + p) = a;
        }
      }
    }
  }
}


#line 1799
void OrgBouncycastlePqcCryptoCmceCMCEEngine_sort64WithLongArray_withInt_withInt_(IOSLongArray *temp, jint from, jint to) {
  OrgBouncycastlePqcCryptoCmceCMCEEngine_initialize();
  jint top;
  
#line 1801
  jint p;
  
#line 1801
  jint q;
  
#line 1801
  jint r;
  
#line 1801
  jint i;
  jint n = to - from;
  
#line 1804
  if (n < 2) {
    return;
  }
  top = 1;
  while (top < n - top) {
    top += top;
  }
  
#line 1812
  for (p = top; p > 0; JreURShiftAssignInt(&p, 1)) {
    
#line 1814
    for (i = 0; i < n - p; ++i) {
      
#line 1816
      if ((i & p) == 0) {
        
#line 1818
        jlong c = IOSLongArray_Get(nil_chk(temp), from + i + p) - IOSLongArray_Get(temp, from + i);
        JreURShiftAssignLong(&c, 63);
        c = -c;
        c &= IOSLongArray_Get(temp, from + i) ^ IOSLongArray_Get(temp, from + i + p);
        *IOSLongArray_GetRef(temp, from + i) ^= c;
        *IOSLongArray_GetRef(temp, from + i + p) ^= c;
      }
    }
    i = 0;
    for (q = top; q > p; JreURShiftAssignInt(&q, 1)) {
      
#line 1829
      for (; i < n - q; ++i) {
        
#line 1831
        if ((i & p) == 0) {
          
#line 1833
          jlong a = IOSLongArray_Get(nil_chk(temp), from + i + p);
          for (r = q; r > p; JreURShiftAssignInt(&r, 1)) {
            
#line 1836
            jlong c = IOSLongArray_Get(temp, from + i + r) - a;
            JreURShiftAssignLong(&c, 63);
            c = -c;
            c &= a ^ IOSLongArray_Get(temp, from + i + r);
            a ^= c;
            *IOSLongArray_GetRef(temp, from + i + r) ^= c;
          }
          *IOSLongArray_GetRef(temp, from + i + p) = a;
        }
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoCmceCMCEEngine)
