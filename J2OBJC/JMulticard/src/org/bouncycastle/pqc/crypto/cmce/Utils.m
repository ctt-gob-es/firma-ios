//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/cmce/Utils.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/bouncycastle/pqc/crypto/cmce/Utils.h"
#include "org/bouncycastle/util/Pack.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/cmce/Utils must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/cmce/Utils.java"


#line 5
@implementation OrgBouncycastlePqcCryptoCmceUtils


#line 5
- (instancetype)initPackagePrivate {
  OrgBouncycastlePqcCryptoCmceUtils_initPackagePrivate(self);
  return self;
}


#line 13
+ (void)store_gfWithByteArray:(IOSByteArray *)dest
                      withInt:(jint)offset
                    withShort:(jshort)a {
  OrgBouncycastlePqcCryptoCmceUtils_store_gfWithByteArray_withInt_withShort_(dest, offset, a);
}


#line 18
+ (jshort)load_gfWithByteArray:(IOSByteArray *)src
                       withInt:(jint)offset
                       withInt:(jint)gfmask {
  return OrgBouncycastlePqcCryptoCmceUtils_load_gfWithByteArray_withInt_withInt_(src, offset, gfmask);
}


#line 30
+ (jint)load4WithByteArray:(IOSByteArray *)inArg
                   withInt:(jint)offset {
  return OrgBouncycastlePqcCryptoCmceUtils_load4WithByteArray_withInt_(inArg, offset);
}


#line 44
+ (void)store8WithByteArray:(IOSByteArray *)outArg
                    withInt:(jint)offset
                   withLong:(jlong)inArg {
  OrgBouncycastlePqcCryptoCmceUtils_store8WithByteArray_withInt_withLong_(outArg, offset, inArg);
}


#line 55
+ (jlong)load8WithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)offset {
  return OrgBouncycastlePqcCryptoCmceUtils_load8WithByteArray_withInt_(inArg, offset);
}


#line 71
+ (jshort)bitrevWithShort:(jshort)a
                  withInt:(jint)GFBITS {
  return OrgBouncycastlePqcCryptoCmceUtils_bitrevWithShort_withInt_(a, GFBITS);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "S", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 6, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x8, 8, 5, -1, -1, -1, -1 },
    { NULL, "S", 0x8, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(store_gfWithByteArray:withInt:withShort:);
  methods[2].selector = @selector(load_gfWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(load4WithByteArray:withInt:);
  methods[4].selector = @selector(store8WithByteArray:withInt:withLong:);
  methods[5].selector = @selector(load8WithByteArray:withInt:);
  methods[6].selector = @selector(bitrevWithShort:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "store_gf", "[BIS", "load_gf", "[BII", "load4", "[BI", "store8", "[BIJ", "load8", "bitrev", "SI" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoCmceUtils = { "Utils", "org.bouncycastle.pqc.crypto.cmce", ptrTable, methods, NULL, 7, 0x0, 7, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoCmceUtils;
}

@end


#line 5
void OrgBouncycastlePqcCryptoCmceUtils_initPackagePrivate(OrgBouncycastlePqcCryptoCmceUtils *self) {
  NSObject_init(self);
}


#line 5
OrgBouncycastlePqcCryptoCmceUtils *new_OrgBouncycastlePqcCryptoCmceUtils_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoCmceUtils, initPackagePrivate)
}


#line 5
OrgBouncycastlePqcCryptoCmceUtils *create_OrgBouncycastlePqcCryptoCmceUtils_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoCmceUtils, initPackagePrivate)
}


#line 13
void OrgBouncycastlePqcCryptoCmceUtils_store_gfWithByteArray_withInt_withShort_(IOSByteArray *dest, jint offset, jshort a) {
  OrgBouncycastlePqcCryptoCmceUtils_initialize();
  *IOSByteArray_GetRef(nil_chk(dest), offset + 0) = (jbyte) (a & (jint) 0xFF);
  *IOSByteArray_GetRef(dest, offset + 1) = (jbyte) (JreRShift32(a, 8));
}


#line 18
jshort OrgBouncycastlePqcCryptoCmceUtils_load_gfWithByteArray_withInt_withInt_(IOSByteArray *src, jint offset, jint gfmask) {
  OrgBouncycastlePqcCryptoCmceUtils_initialize();
  
#line 22
  return (jshort) (OrgBouncycastleUtilPack_littleEndianToShortWithByteArray_withInt_(src, offset) & gfmask);
}


#line 30
jint OrgBouncycastlePqcCryptoCmceUtils_load4WithByteArray_withInt_(IOSByteArray *inArg, jint offset) {
  OrgBouncycastlePqcCryptoCmceUtils_initialize();
  
#line 33
  return OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(inArg, offset);
}


#line 44
void OrgBouncycastlePqcCryptoCmceUtils_store8WithByteArray_withInt_withLong_(IOSByteArray *outArg, jint offset, jlong inArg) {
  OrgBouncycastlePqcCryptoCmceUtils_initialize();
  *IOSByteArray_GetRef(nil_chk(outArg), offset + 0) = (jbyte) ((JreRShift64(inArg, (jint) 0x00)) & (jint) 0xFF);
  *IOSByteArray_GetRef(outArg, offset + 1) = (jbyte) ((JreRShift64(inArg, (jint) 0x08)) & (jint) 0xFF);
  *IOSByteArray_GetRef(outArg, offset + 2) = (jbyte) ((JreRShift64(inArg, (jint) 0x10)) & (jint) 0xFF);
  *IOSByteArray_GetRef(outArg, offset + 3) = (jbyte) ((JreRShift64(inArg, (jint) 0x18)) & (jint) 0xFF);
  *IOSByteArray_GetRef(outArg, offset + 4) = (jbyte) ((JreRShift64(inArg, (jint) 0x20)) & (jint) 0xFF);
  *IOSByteArray_GetRef(outArg, offset + 5) = (jbyte) ((JreRShift64(inArg, (jint) 0x28)) & (jint) 0xFF);
  *IOSByteArray_GetRef(outArg, offset + 6) = (jbyte) ((JreRShift64(inArg, (jint) 0x30)) & (jint) 0xFF);
  *IOSByteArray_GetRef(outArg, offset + 7) = (jbyte) ((JreRShift64(inArg, (jint) 0x38)) & (jint) 0xFF);
}


#line 55
jlong OrgBouncycastlePqcCryptoCmceUtils_load8WithByteArray_withInt_(IOSByteArray *inArg, jint offset) {
  OrgBouncycastlePqcCryptoCmceUtils_initialize();
  
#line 58
  return OrgBouncycastleUtilPack_littleEndianToLongWithByteArray_withInt_(inArg, offset);
}


#line 71
jshort OrgBouncycastlePqcCryptoCmceUtils_bitrevWithShort_withInt_(jshort a, jint GFBITS) {
  OrgBouncycastlePqcCryptoCmceUtils_initialize();
  a = (jshort) ((JreLShift32((a & (jint) 0x00FF), 8)) | (JreRShift32((a & (jint) 0xFF00), 8)));
  a = (jshort) ((JreLShift32((a & (jint) 0x0F0F), 4)) | (JreRShift32((a & (jint) 0xF0F0), 4)));
  a = (jshort) ((JreLShift32((a & (jint) 0x3333), 2)) | (JreRShift32((a & (jint) 0xCCCC), 2)));
  a = (jshort) ((JreLShift32((a & (jint) 0x5555), 1)) | (JreRShift32((a & (jint) 0xAAAA), 1)));
  if (GFBITS == 12)
#line 78
  return (jshort) (JreRShift32(a, 4));
  return (jshort) (JreRShift32(a, 3));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoCmceUtils)
