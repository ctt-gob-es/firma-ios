//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/cmce/GF12.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/bouncycastle/pqc/crypto/cmce/GF.h"
#include "org/bouncycastle/pqc/crypto/cmce/GF12.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/cmce/GF12 must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/cmce/GF12.java"


#line 3
@implementation OrgBouncycastlePqcCryptoCmceGF12


#line 8
- (instancetype)initPackagePrivateWithInt:(jint)gfbits {
  OrgBouncycastlePqcCryptoCmceGF12_initPackagePrivateWithInt_(self, gfbits);
  return self;
}

- (jshort)gf_mulWithShort:(jshort)left
                withShort:(jshort)right {
  
#line 16
  jint temp;
  
#line 16
  jint temp_left;
  
#line 16
  jint temp_right;
  
#line 16
  jint t;
  temp_left = left;
  temp_right = right;
  temp = temp_left * (temp_right & 1);
  
#line 21
  for (jint i = 1; i < GFBITS_; i++) {
    
#line 23
    temp ^= (temp_left * (temp_right & (JreLShift32(1, i))));
  }
  
#line 26
  t = (temp & (jint) 0x7FC000);
  temp ^= JreRShift32(t, 9);
  temp ^= JreRShift32(t, 12);
  
#line 30
  t = (temp & (jint) 0x3000);
  temp ^= JreRShift32(t, 9);
  temp ^= JreRShift32(t, 12);
  
#line 34
  jshort res = (jshort) (temp & ((JreLShift32(1, GFBITS_)) - 1));
  return res;
}


#line 39
- (jshort)gf_sqWithShort:(jshort)input {
  
#line 41
  IOSIntArray *B = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x55555555, (jint) 0x33333333, (jint) 0x0F0F0F0F, (jint) 0x00FF00FF } count:4];
  jint x = input;
  jint t;
  
#line 45
  x = (x | (JreLShift32(x, 8))) & IOSIntArray_Get(B, 3);
  x = (x | (JreLShift32(x, 4))) & IOSIntArray_Get(B, 2);
  x = (x | (JreLShift32(x, 2))) & IOSIntArray_Get(B, 1);
  x = (x | (JreLShift32(x, 1))) & IOSIntArray_Get(B, 0);
  
#line 50
  t = x & (jint) 0x7FC000;
  
#line 52
  x ^= JreRShift32(t, 9);
  x ^= JreRShift32(t, 12);
  
#line 55
  t = x & (jint) 0x3000;
  
#line 57
  x ^= JreRShift32(t, 9);
  x ^= JreRShift32(t, 12);
  
#line 60
  return (jshort) (x & ((JreLShift32(1, GFBITS_)) - 1));
}


#line 63
- (jshort)gf_invWithShort:(jshort)input {
  
#line 66
  jshort tmp_11;
  jshort tmp_1111;
  
#line 69
  jshort out = input;
  
#line 71
  out = [self gf_sqWithShort:out];
  tmp_11 = [self gf_mulWithShort:out withShort:input];
  
#line 74
  out = [self gf_sqWithShort:tmp_11];
  out = [self gf_sqWithShort:out];
  tmp_1111 = [self gf_mulWithShort:out withShort:tmp_11];
  
#line 78
  out = [self gf_sqWithShort:tmp_1111];
  out = [self gf_sqWithShort:out];
  out = [self gf_sqWithShort:out];
  out = [self gf_sqWithShort:out];
  out = [self gf_mulWithShort:out withShort:tmp_1111];
  
#line 84
  out = [self gf_sqWithShort:out];
  out = [self gf_sqWithShort:out];
  out = [self gf_mulWithShort:out withShort:tmp_11];
  
#line 88
  out = [self gf_sqWithShort:out];
  out = [self gf_mulWithShort:out withShort:input];
  
#line 91
  return [self gf_sqWithShort:out];
}


#line 94
- (jshort)gf_fracWithShort:(jshort)den
                 withShort:(jshort)num {
  
#line 97
  return [self gf_mulWithShort:[self gf_invWithShort:den] withShort:num];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "S", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "S", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "S", 0x4, 5, 4, -1, -1, -1, -1 },
    { NULL, "S", 0x4, 6, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithInt:);
  methods[1].selector = @selector(gf_mulWithShort:withShort:);
  methods[2].selector = @selector(gf_sqWithShort:);
  methods[3].selector = @selector(gf_invWithShort:);
  methods[4].selector = @selector(gf_fracWithShort:withShort:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "gf_mul", "SS", "gf_sq", "S", "gf_inv", "gf_frac" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoCmceGF12 = { "GF12", "org.bouncycastle.pqc.crypto.cmce", ptrTable, methods, NULL, 7, 0x0, 5, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoCmceGF12;
}

@end


#line 8
void OrgBouncycastlePqcCryptoCmceGF12_initPackagePrivateWithInt_(OrgBouncycastlePqcCryptoCmceGF12 *self, jint gfbits) {
  OrgBouncycastlePqcCryptoCmceGF_initPackagePrivateWithInt_(self,
#line 10
  gfbits);
}


#line 8
OrgBouncycastlePqcCryptoCmceGF12 *new_OrgBouncycastlePqcCryptoCmceGF12_initPackagePrivateWithInt_(jint gfbits) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoCmceGF12, initPackagePrivateWithInt_, gfbits)
}


#line 8
OrgBouncycastlePqcCryptoCmceGF12 *create_OrgBouncycastlePqcCryptoCmceGF12_initPackagePrivateWithInt_(jint gfbits) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoCmceGF12, initPackagePrivateWithInt_, gfbits)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoCmceGF12)
