//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/Wots.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/bouncycastle/pqc/crypto/sphincs/HashFunctions.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCS256Config.h"
#include "org/bouncycastle/pqc/crypto/sphincs/Seed.h"
#include "org/bouncycastle/pqc/crypto/sphincs/Wots.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/sphincs/Wots must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoSphincsWots ()

+ (void)clearWithByteArray:(IOSByteArray *)bytes
                   withInt:(jint)offSet
                   withInt:(jint)length;

@end

__attribute__((unused)) static void OrgBouncycastlePqcCryptoSphincsWots_clearWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint offSet, jint length);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/Wots.java"


#line 3
@implementation OrgBouncycastlePqcCryptoSphincsWots


#line 3
- (instancetype)initPackagePrivate {
  OrgBouncycastlePqcCryptoSphincsWots_initPackagePrivate(self);
  return self;
}


#line 15
+ (void)expand_seedWithByteArray:(IOSByteArray *)outseeds
                         withInt:(jint)outOff
                   withByteArray:(IOSByteArray *)inseed
                         withInt:(jint)inOff {
  OrgBouncycastlePqcCryptoSphincsWots_expand_seedWithByteArray_withInt_withByteArray_withInt_(outseeds, outOff, inseed, inOff);
}

+ (void)clearWithByteArray:(IOSByteArray *)bytes
                   withInt:(jint)offSet
                   withInt:(jint)length {
  OrgBouncycastlePqcCryptoSphincsWots_clearWithByteArray_withInt_withInt_(bytes, offSet, length);
}


#line 30
+ (void)gen_chainWithOrgBouncycastlePqcCryptoSphincsHashFunctions:(OrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                    withByteArray:(IOSByteArray *)outArg
                                                          withInt:(jint)outOff
                                                    withByteArray:(IOSByteArray *)seed
                                                          withInt:(jint)seedOff
                                                    withByteArray:(IOSByteArray *)masks
                                                          withInt:(jint)masksOff
                                                          withInt:(jint)chainlen {
  OrgBouncycastlePqcCryptoSphincsWots_gen_chainWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_(hs, outArg, outOff, seed, seedOff, masks, masksOff, chainlen);
}

- (void)wots_pkgenWithOrgBouncycastlePqcCryptoSphincsHashFunctions:(OrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                     withByteArray:(IOSByteArray *)pk
                                                           withInt:(jint)pkOff
                                                     withByteArray:(IOSByteArray *)sk
                                                           withInt:(jint)skOff
                                                     withByteArray:(IOSByteArray *)masks
                                                           withInt:(jint)masksOff {
  
#line 43
  jint i;
  OrgBouncycastlePqcCryptoSphincsWots_expand_seedWithByteArray_withInt_withByteArray_withInt_(pk, pkOff, sk, skOff);
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsWots_WOTS_L; i++)
#line 46
  OrgBouncycastlePqcCryptoSphincsWots_gen_chainWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_(hs, pk, pkOff + i * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, pk, pkOff + i * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, masks, masksOff, OrgBouncycastlePqcCryptoSphincsWots_WOTS_W - 1);
}


#line 50
- (void)wots_signWithOrgBouncycastlePqcCryptoSphincsHashFunctions:(OrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                    withByteArray:(IOSByteArray *)sig
                                                          withInt:(jint)sigOff
                                                    withByteArray:(IOSByteArray *)msg
                                                    withByteArray:(IOSByteArray *)sk
                                                    withByteArray:(IOSByteArray *)masks {
  
#line 52
  IOSIntArray *basew = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsWots_WOTS_L];
  jint i;
  
#line 53
  jint c = 0;
  
#line 55
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsWots_WOTS_L1; i += 2) {
    
#line 57
    *IOSIntArray_GetRef(basew, i) = IOSByteArray_Get(nil_chk(msg), JreIntDiv(i, 2)) & (jint) 0xf;
    *IOSIntArray_GetRef(basew, i + 1) = JreURShift32((IOSByteArray_Get(msg, JreIntDiv(i, 2)) & (jint) 0xff), 4);
    c += OrgBouncycastlePqcCryptoSphincsWots_WOTS_W - 1 - IOSIntArray_Get(basew, i);
    c += OrgBouncycastlePqcCryptoSphincsWots_WOTS_W - 1 - IOSIntArray_Get(basew, i + 1);
  }
  
#line 63
  for (; i < OrgBouncycastlePqcCryptoSphincsWots_WOTS_L; i++) {
    
#line 65
    *IOSIntArray_GetRef(basew, i) = c & (jint) 0xf;
    JreURShiftAssignInt(&c, 4);
  }
  
#line 69
  OrgBouncycastlePqcCryptoSphincsWots_expand_seedWithByteArray_withInt_withByteArray_withInt_(sig, sigOff, sk, 0);
  
#line 71
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsWots_WOTS_L; i++)
#line 72
  OrgBouncycastlePqcCryptoSphincsWots_gen_chainWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_(hs, sig, sigOff + i * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, sig, sigOff + i * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, masks, 0, IOSIntArray_Get(basew, i));
}


#line 75
- (void)wots_verifyWithOrgBouncycastlePqcCryptoSphincsHashFunctions:(OrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                      withByteArray:(IOSByteArray *)pk
                                                      withByteArray:(IOSByteArray *)sig
                                                            withInt:(jint)sigOff
                                                      withByteArray:(IOSByteArray *)msg
                                                      withByteArray:(IOSByteArray *)masks {
  
#line 77
  IOSIntArray *basew = [IOSIntArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsWots_WOTS_L];
  jint i;
  
#line 78
  jint c = 0;
  
#line 80
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsWots_WOTS_L1; i += 2) {
    
#line 82
    *IOSIntArray_GetRef(basew, i) = IOSByteArray_Get(nil_chk(msg), JreIntDiv(i, 2)) & (jint) 0xf;
    *IOSIntArray_GetRef(basew, i + 1) = JreURShift32((IOSByteArray_Get(msg, JreIntDiv(i, 2)) & (jint) 0xff), 4);
    c += OrgBouncycastlePqcCryptoSphincsWots_WOTS_W - 1 - IOSIntArray_Get(basew, i);
    c += OrgBouncycastlePqcCryptoSphincsWots_WOTS_W - 1 - IOSIntArray_Get(basew, i + 1);
  }
  
#line 88
  for (; i < OrgBouncycastlePqcCryptoSphincsWots_WOTS_L; i++) {
    
#line 90
    *IOSIntArray_GetRef(basew, i) = c & (jint) 0xf;
    JreURShiftAssignInt(&c, 4);
  }
  
#line 94
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsWots_WOTS_L; i++)
#line 95
  OrgBouncycastlePqcCryptoSphincsWots_gen_chainWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_(hs, pk, i * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, sig, sigOff + i * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, masks, (IOSIntArray_Get(basew, i) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES), OrgBouncycastlePqcCryptoSphincsWots_WOTS_W - 1 - IOSIntArray_Get(basew, i));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(expand_seedWithByteArray:withInt:withByteArray:withInt:);
  methods[2].selector = @selector(clearWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(gen_chainWithOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withInt:withByteArray:withInt:withByteArray:withInt:withInt:);
  methods[4].selector = @selector(wots_pkgenWithOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withInt:withByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(wots_signWithOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withInt:withByteArray:withByteArray:withByteArray:);
  methods[6].selector = @selector(wots_verifyWithOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withByteArray:withInt:withByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "WOTS_LOGW", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsWots_WOTS_LOGW, 0x18, -1, -1, -1, -1 },
    { "WOTS_W", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsWots_WOTS_W, 0x18, -1, -1, -1, -1 },
    { "WOTS_L1", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsWots_WOTS_L1, 0x18, -1, -1, -1, -1 },
    { "WOTS_L", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsWots_WOTS_L, 0x18, -1, -1, -1, -1 },
    { "WOTS_LOG_L", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsWots_WOTS_LOG_L, 0x18, -1, -1, -1, -1 },
    { "WOTS_SIGBYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsWots_WOTS_SIGBYTES, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "expand_seed", "[BI[BI", "clear", "[BII", "gen_chain", "LOrgBouncycastlePqcCryptoSphincsHashFunctions;[BI[BI[BII", "wots_pkgen", "LOrgBouncycastlePqcCryptoSphincsHashFunctions;[BI[BI[BI", "wots_sign", "LOrgBouncycastlePqcCryptoSphincsHashFunctions;[BI[B[B[B", "wots_verify", "LOrgBouncycastlePqcCryptoSphincsHashFunctions;[B[BI[B[B" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSphincsWots = { "Wots", "org.bouncycastle.pqc.crypto.sphincs", ptrTable, methods, fields, 7, 0x0, 7, 6, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSphincsWots;
}

@end


#line 3
void OrgBouncycastlePqcCryptoSphincsWots_initPackagePrivate(OrgBouncycastlePqcCryptoSphincsWots *self) {
  NSObject_init(self);
}


#line 3
OrgBouncycastlePqcCryptoSphincsWots *new_OrgBouncycastlePqcCryptoSphincsWots_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsWots, initPackagePrivate)
}


#line 3
OrgBouncycastlePqcCryptoSphincsWots *create_OrgBouncycastlePqcCryptoSphincsWots_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsWots, initPackagePrivate)
}


#line 15
void OrgBouncycastlePqcCryptoSphincsWots_expand_seedWithByteArray_withInt_withByteArray_withInt_(IOSByteArray *outseeds, jint outOff, IOSByteArray *inseed, jint inOff) {
  OrgBouncycastlePqcCryptoSphincsWots_initialize();
  OrgBouncycastlePqcCryptoSphincsWots_clearWithByteArray_withInt_withInt_(outseeds, outOff, OrgBouncycastlePqcCryptoSphincsWots_WOTS_L * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES);
  
#line 19
  OrgBouncycastlePqcCryptoSphincsSeed_prgWithByteArray_withInt_withLong_withByteArray_withInt_(outseeds, outOff, OrgBouncycastlePqcCryptoSphincsWots_WOTS_L * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, inseed, inOff);
}


#line 22
void OrgBouncycastlePqcCryptoSphincsWots_clearWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint offSet, jint length) {
  OrgBouncycastlePqcCryptoSphincsWots_initialize();
  for (jint i = 0; i != length; i++) {
    
#line 26
    *IOSByteArray_GetRef(nil_chk(bytes), i + offSet) = 0;
  }
}


#line 30
void OrgBouncycastlePqcCryptoSphincsWots_gen_chainWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_withInt_(OrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *outArg, jint outOff, IOSByteArray *seed, jint seedOff, IOSByteArray *masks, jint masksOff, jint chainlen) {
  OrgBouncycastlePqcCryptoSphincsWots_initialize();
  jint i;
  
#line 32
  jint j;
  for (j = 0; j < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; j++)
#line 34
  *IOSByteArray_GetRef(nil_chk(outArg), j + outOff) = IOSByteArray_Get(nil_chk(seed), j + seedOff);
  
#line 36
  for (i = 0; i < chainlen && i < OrgBouncycastlePqcCryptoSphincsWots_WOTS_W; i++)
#line 37
  [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_n_n_maskWithByteArray:outArg withInt:outOff withByteArray:outArg withInt:outOff withByteArray:masks withInt:masksOff + (i * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSphincsWots)
