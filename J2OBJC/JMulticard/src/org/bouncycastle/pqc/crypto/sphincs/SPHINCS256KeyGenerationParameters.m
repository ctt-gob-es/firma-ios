//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/SPHINCS256KeyGenerationParameters.java
//

#include "J2ObjC_source.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/Digest.h"
#include "org/bouncycastle/crypto/KeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCS256Config.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCS256KeyGenerationParameters.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/sphincs/SPHINCS256KeyGenerationParameters must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters () {
 @public
  id<OrgBouncycastleCryptoDigest> treeDigest_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters, treeDigest_, id<OrgBouncycastleCryptoDigest>)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/SPHINCS256KeyGenerationParameters.java"


#line 8
@implementation OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters


#line 13
- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                 withOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)treeDigest {
  OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters_initWithJavaSecuritySecureRandom_withOrgBouncycastleCryptoDigest_(self, random, treeDigest);
  return self;
}

- (id<OrgBouncycastleCryptoDigest>)getTreeDigest {
  
#line 21
  return treeDigest_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaSecuritySecureRandom:withOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(getTreeDigest);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "treeDigest_", "LOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecuritySecureRandom;LOrgBouncycastleCryptoDigest;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters = { "SPHINCS256KeyGenerationParameters", "org.bouncycastle.pqc.crypto.sphincs", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters;
}

@end


#line 13
void OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters_initWithJavaSecuritySecureRandom_withOrgBouncycastleCryptoDigest_(OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters *self, JavaSecuritySecureRandom *random, id<OrgBouncycastleCryptoDigest> treeDigest) {
  OrgBouncycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(self,
#line 15
  random, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_PUBLICKEYBYTES * 8);
  self->treeDigest_ = treeDigest;
}


#line 13
OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters *new_OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters_initWithJavaSecuritySecureRandom_withOrgBouncycastleCryptoDigest_(JavaSecuritySecureRandom *random, id<OrgBouncycastleCryptoDigest> treeDigest) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters, initWithJavaSecuritySecureRandom_withOrgBouncycastleCryptoDigest_, random, treeDigest)
}


#line 13
OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters *create_OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters_initWithJavaSecuritySecureRandom_withOrgBouncycastleCryptoDigest_(JavaSecuritySecureRandom *random, id<OrgBouncycastleCryptoDigest> treeDigest) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters, initWithJavaSecuritySecureRandom_withOrgBouncycastleCryptoDigest_, random, treeDigest)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters)
