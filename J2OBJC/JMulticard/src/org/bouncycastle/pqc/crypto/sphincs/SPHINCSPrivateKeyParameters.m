//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/SPHINCSPrivateKeyParameters.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCSKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCSPrivateKeyParameters.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/sphincs/SPHINCSPrivateKeyParameters must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters () {
 @public
  IOSByteArray *keyData_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters, keyData_, IOSByteArray *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/SPHINCSPrivateKeyParameters.java"


#line 5
@implementation OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters


#line 10
- (instancetype)initWithByteArray:(IOSByteArray *)keyData {
  OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters_initWithByteArray_(self, keyData);
  return self;
}


#line 16
- (instancetype)initWithByteArray:(IOSByteArray *)keyData
                     withNSString:(NSString *)treeDigest {
  OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters_initWithByteArray_withNSString_(self, keyData, treeDigest);
  return self;
}

- (IOSByteArray *)getKeyData {
  
#line 24
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(keyData_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(initWithByteArray:withNSString:);
  methods[2].selector = @selector(getKeyData);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keyData_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "[BLNSString;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters = { "SPHINCSPrivateKeyParameters", "org.bouncycastle.pqc.crypto.sphincs", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters;
}

@end


#line 10
void OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters_initWithByteArray_(OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters *self, IOSByteArray *keyData) {
  OrgBouncycastlePqcCryptoSphincsSPHINCSKeyParameters_initWithBoolean_withNSString_(self,
#line 12
  true, nil);
  self->keyData_ = OrgBouncycastleUtilArrays_cloneWithByteArray_(keyData);
}


#line 10
OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters *new_OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters_initWithByteArray_(IOSByteArray *keyData) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters, initWithByteArray_, keyData)
}


#line 10
OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters *create_OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters_initWithByteArray_(IOSByteArray *keyData) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters, initWithByteArray_, keyData)
}


#line 16
void OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters_initWithByteArray_withNSString_(OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters *self, IOSByteArray *keyData, NSString *treeDigest) {
  OrgBouncycastlePqcCryptoSphincsSPHINCSKeyParameters_initWithBoolean_withNSString_(self,
#line 18
  true, treeDigest);
  self->keyData_ = OrgBouncycastleUtilArrays_cloneWithByteArray_(keyData);
}


#line 16
OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters *new_OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters_initWithByteArray_withNSString_(IOSByteArray *keyData, NSString *treeDigest) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters, initWithByteArray_withNSString_, keyData, treeDigest)
}


#line 16
OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters *create_OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters_initWithByteArray_withNSString_(IOSByteArray *keyData, NSString *treeDigest) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters, initWithByteArray_withNSString_, keyData, treeDigest)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters)
