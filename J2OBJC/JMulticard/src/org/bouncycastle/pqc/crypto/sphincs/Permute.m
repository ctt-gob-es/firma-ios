//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/Permute.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/bouncycastle/pqc/crypto/sphincs/Permute.h"
#include "org/bouncycastle/util/Pack.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/sphincs/Permute must be compiled with ARC (-fobjc-arc)"
#endif

inline jint OrgBouncycastlePqcCryptoSphincsPermute_get_CHACHA_ROUNDS(void);
#define OrgBouncycastlePqcCryptoSphincsPermute_CHACHA_ROUNDS 12
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcCryptoSphincsPermute, CHACHA_ROUNDS, jint)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/Permute.java"


#line 5
@implementation OrgBouncycastlePqcCryptoSphincsPermute


#line 5
- (instancetype)initPackagePrivate {
  OrgBouncycastlePqcCryptoSphincsPermute_initPackagePrivate(self);
  return self;
}

+ (jint)rotlWithInt:(jint)x
            withInt:(jint)y {
  return OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x, y);
}


#line 18
+ (void)permuteWithInt:(jint)rounds
          withIntArray:(IOSIntArray *)x {
  OrgBouncycastlePqcCryptoSphincsPermute_permuteWithInt_withIntArray_(rounds, x);
}


#line 100
- (void)chacha_permuteWithByteArray:(IOSByteArray *)outArg
                      withByteArray:(IOSByteArray *)inArg {
  jint i;
  
#line 104
  IOSIntArray *x = [IOSIntArray newArrayWithLength:16];
  for (i = 0; i < 16; i++) {
    
#line 107
    *IOSIntArray_GetRef(x, i) = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(inArg, 4 * i);
  }
  
#line 110
  OrgBouncycastlePqcCryptoSphincsPermute_permuteWithInt_withIntArray_(OrgBouncycastlePqcCryptoSphincsPermute_CHACHA_ROUNDS, x);
  
#line 113
  for (i = 0; i < 16; ++i) {
    
#line 115
    OrgBouncycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(IOSIntArray_Get(x, i), outArg, 4 * i);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xc, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(rotlWithInt:withInt:);
  methods[2].selector = @selector(permuteWithInt:withIntArray:);
  methods[3].selector = @selector(chacha_permuteWithByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CHACHA_ROUNDS", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsPermute_CHACHA_ROUNDS, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "rotl", "II", "permute", "I[I", "chacha_permute", "[B[B" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSphincsPermute = { "Permute", "org.bouncycastle.pqc.crypto.sphincs", ptrTable, methods, fields, 7, 0x0, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSphincsPermute;
}

@end


#line 5
void OrgBouncycastlePqcCryptoSphincsPermute_initPackagePrivate(OrgBouncycastlePqcCryptoSphincsPermute *self) {
  NSObject_init(self);
}


#line 5
OrgBouncycastlePqcCryptoSphincsPermute *new_OrgBouncycastlePqcCryptoSphincsPermute_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsPermute, initPackagePrivate)
}


#line 5
OrgBouncycastlePqcCryptoSphincsPermute *create_OrgBouncycastlePqcCryptoSphincsPermute_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsPermute, initPackagePrivate)
}


#line 10
jint OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(jint x, jint y) {
  OrgBouncycastlePqcCryptoSphincsPermute_initialize();
  return (JreLShift32(x, y)) | (JreURShift32(x, -y));
}


#line 18
void OrgBouncycastlePqcCryptoSphincsPermute_permuteWithInt_withIntArray_(jint rounds, IOSIntArray *x) {
  OrgBouncycastlePqcCryptoSphincsPermute_initialize();
  if (((IOSIntArray *) nil_chk(x))->size_ != 16) {
    
#line 22
    @throw new_JavaLangIllegalArgumentException_init();
  }
  if (JreIntMod(rounds, 2) != 0) {
    
#line 26
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Number of rounds must be even");
  }
  
#line 29
  jint x00 = IOSIntArray_Get(x, 0);
  jint x01 = IOSIntArray_Get(x, 1);
  jint x02 = IOSIntArray_Get(x, 2);
  jint x03 = IOSIntArray_Get(x, 3);
  jint x04 = IOSIntArray_Get(x, 4);
  jint x05 = IOSIntArray_Get(x, 5);
  jint x06 = IOSIntArray_Get(x, 6);
  jint x07 = IOSIntArray_Get(x, 7);
  jint x08 = IOSIntArray_Get(x, 8);
  jint x09 = IOSIntArray_Get(x, 9);
  jint x10 = IOSIntArray_Get(x, 10);
  jint x11 = IOSIntArray_Get(x, 11);
  jint x12 = IOSIntArray_Get(x, 12);
  jint x13 = IOSIntArray_Get(x, 13);
  jint x14 = IOSIntArray_Get(x, 14);
  jint x15 = IOSIntArray_Get(x, 15);
  
#line 46
  for (jint i = rounds; i > 0; i -= 2) {
    
#line 48
    x00 += x04;
    
#line 48
    x12 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x12 ^ x00, 16);
    x08 += x12;
    
#line 49
    x04 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x04 ^ x08, 12);
    x00 += x04;
    
#line 50
    x12 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x12 ^ x00, 8);
    x08 += x12;
    
#line 51
    x04 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x04 ^ x08, 7);
    x01 += x05;
    
#line 52
    x13 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x13 ^ x01, 16);
    x09 += x13;
    
#line 53
    x05 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x05 ^ x09, 12);
    x01 += x05;
    
#line 54
    x13 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x13 ^ x01, 8);
    x09 += x13;
    
#line 55
    x05 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x05 ^ x09, 7);
    x02 += x06;
    
#line 56
    x14 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x14 ^ x02, 16);
    x10 += x14;
    
#line 57
    x06 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x06 ^ x10, 12);
    x02 += x06;
    
#line 58
    x14 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x14 ^ x02, 8);
    x10 += x14;
    
#line 59
    x06 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x06 ^ x10, 7);
    x03 += x07;
    
#line 60
    x15 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x15 ^ x03, 16);
    x11 += x15;
    
#line 61
    x07 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x07 ^ x11, 12);
    x03 += x07;
    
#line 62
    x15 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x15 ^ x03, 8);
    x11 += x15;
    
#line 63
    x07 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x07 ^ x11, 7);
    x00 += x05;
    
#line 64
    x15 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x15 ^ x00, 16);
    x10 += x15;
    
#line 65
    x05 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x05 ^ x10, 12);
    x00 += x05;
    
#line 66
    x15 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x15 ^ x00, 8);
    x10 += x15;
    
#line 67
    x05 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x05 ^ x10, 7);
    x01 += x06;
    
#line 68
    x12 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x12 ^ x01, 16);
    x11 += x12;
    
#line 69
    x06 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x06 ^ x11, 12);
    x01 += x06;
    
#line 70
    x12 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x12 ^ x01, 8);
    x11 += x12;
    
#line 71
    x06 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x06 ^ x11, 7);
    x02 += x07;
    
#line 72
    x13 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x13 ^ x02, 16);
    x08 += x13;
    
#line 73
    x07 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x07 ^ x08, 12);
    x02 += x07;
    
#line 74
    x13 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x13 ^ x02, 8);
    x08 += x13;
    
#line 75
    x07 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x07 ^ x08, 7);
    x03 += x04;
    
#line 76
    x14 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x14 ^ x03, 16);
    x09 += x14;
    
#line 77
    x04 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x04 ^ x09, 12);
    x03 += x04;
    
#line 78
    x14 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x14 ^ x03, 8);
    x09 += x14;
    
#line 79
    x04 = OrgBouncycastlePqcCryptoSphincsPermute_rotlWithInt_withInt_(x04 ^ x09, 7);
  }
  
#line 82
  *IOSIntArray_GetRef(x, 0) = x00;
  *IOSIntArray_GetRef(x, 1) = x01;
  *IOSIntArray_GetRef(x, 2) = x02;
  *IOSIntArray_GetRef(x, 3) = x03;
  *IOSIntArray_GetRef(x, 4) = x04;
  *IOSIntArray_GetRef(x, 5) = x05;
  *IOSIntArray_GetRef(x, 6) = x06;
  *IOSIntArray_GetRef(x, 7) = x07;
  *IOSIntArray_GetRef(x, 8) = x08;
  *IOSIntArray_GetRef(x, 9) = x09;
  *IOSIntArray_GetRef(x, 10) = x10;
  *IOSIntArray_GetRef(x, 11) = x11;
  *IOSIntArray_GetRef(x, 12) = x12;
  *IOSIntArray_GetRef(x, 13) = x13;
  *IOSIntArray_GetRef(x, 14) = x14;
  *IOSIntArray_GetRef(x, 15) = x15;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSphincsPermute)
