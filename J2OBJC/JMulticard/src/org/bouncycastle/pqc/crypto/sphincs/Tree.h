//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/Tree.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoSphincsTree")
#ifdef RESTRICT_OrgBouncycastlePqcCryptoSphincsTree
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoSphincsTree 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcCryptoSphincsTree 1
#endif
#undef RESTRICT_OrgBouncycastlePqcCryptoSphincsTree

#if !defined (OrgBouncycastlePqcCryptoSphincsTree_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoSphincsTree || defined(INCLUDE_OrgBouncycastlePqcCryptoSphincsTree))
#define OrgBouncycastlePqcCryptoSphincsTree_

@class IOSByteArray;
@class OrgBouncycastlePqcCryptoSphincsHashFunctions;
@class OrgBouncycastlePqcCryptoSphincsTree_leafaddr;

@interface OrgBouncycastlePqcCryptoSphincsTree : NSObject

#pragma mark Package-Private

- (instancetype)initPackagePrivate;

+ (void)gen_leaf_wotsWithOrgBouncycastlePqcCryptoSphincsHashFunctions:(OrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                        withByteArray:(IOSByteArray *)leaf
                                                              withInt:(jint)leafOff
                                                        withByteArray:(IOSByteArray *)masks
                                                              withInt:(jint)masksOff
                                                        withByteArray:(IOSByteArray *)sk
                     withOrgBouncycastlePqcCryptoSphincsTree_leafaddr:(OrgBouncycastlePqcCryptoSphincsTree_leafaddr *)a;

+ (void)l_treeWithOrgBouncycastlePqcCryptoSphincsHashFunctions:(OrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                 withByteArray:(IOSByteArray *)leaf
                                                       withInt:(jint)leafOff
                                                 withByteArray:(IOSByteArray *)wots_pk
                                                       withInt:(jint)pkOff
                                                 withByteArray:(IOSByteArray *)masks
                                                       withInt:(jint)masksOff;

+ (void)treehashWithOrgBouncycastlePqcCryptoSphincsHashFunctions:(OrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                   withByteArray:(IOSByteArray *)node
                                                         withInt:(jint)nodeOff
                                                         withInt:(jint)height
                                                   withByteArray:(IOSByteArray *)sk
                withOrgBouncycastlePqcCryptoSphincsTree_leafaddr:(OrgBouncycastlePqcCryptoSphincsTree_leafaddr *)leaf
                                                   withByteArray:(IOSByteArray *)masks
                                                         withInt:(jint)masksOff;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoSphincsTree)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoSphincsTree_initPackagePrivate(OrgBouncycastlePqcCryptoSphincsTree *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoSphincsTree *new_OrgBouncycastlePqcCryptoSphincsTree_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoSphincsTree *create_OrgBouncycastlePqcCryptoSphincsTree_initPackagePrivate(void);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoSphincsTree_l_treeWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(OrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *leaf, jint leafOff, IOSByteArray *wots_pk, jint pkOff, IOSByteArray *masks, jint masksOff);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoSphincsTree_treehashWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withInt_withByteArray_withOrgBouncycastlePqcCryptoSphincsTree_leafaddr_withByteArray_withInt_(OrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *node, jint nodeOff, jint height, IOSByteArray *sk, OrgBouncycastlePqcCryptoSphincsTree_leafaddr *leaf, IOSByteArray *masks, jint masksOff);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoSphincsTree_gen_leaf_wotsWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(OrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *leaf, jint leafOff, IOSByteArray *masks, jint masksOff, IOSByteArray *sk, OrgBouncycastlePqcCryptoSphincsTree_leafaddr *a);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoSphincsTree)

#endif

#if !defined (OrgBouncycastlePqcCryptoSphincsTree_leafaddr_) && (INCLUDE_ALL_OrgBouncycastlePqcCryptoSphincsTree || defined(INCLUDE_OrgBouncycastlePqcCryptoSphincsTree_leafaddr))
#define OrgBouncycastlePqcCryptoSphincsTree_leafaddr_

@interface OrgBouncycastlePqcCryptoSphincsTree_leafaddr : NSObject {
 @public
  jint level_;
  jlong subtree_;
  jlong subleaf_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithOrgBouncycastlePqcCryptoSphincsTree_leafaddr:(OrgBouncycastlePqcCryptoSphincsTree_leafaddr *)leafaddr;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcCryptoSphincsTree_leafaddr)

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoSphincsTree_leafaddr_init(OrgBouncycastlePqcCryptoSphincsTree_leafaddr *self);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoSphincsTree_leafaddr *new_OrgBouncycastlePqcCryptoSphincsTree_leafaddr_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoSphincsTree_leafaddr *create_OrgBouncycastlePqcCryptoSphincsTree_leafaddr_init(void);

FOUNDATION_EXPORT void OrgBouncycastlePqcCryptoSphincsTree_leafaddr_initWithOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(OrgBouncycastlePqcCryptoSphincsTree_leafaddr *self, OrgBouncycastlePqcCryptoSphincsTree_leafaddr *leafaddr);

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoSphincsTree_leafaddr *new_OrgBouncycastlePqcCryptoSphincsTree_leafaddr_initWithOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(OrgBouncycastlePqcCryptoSphincsTree_leafaddr *leafaddr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcCryptoSphincsTree_leafaddr *create_OrgBouncycastlePqcCryptoSphincsTree_leafaddr_initWithOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(OrgBouncycastlePqcCryptoSphincsTree_leafaddr *leafaddr);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcCryptoSphincsTree_leafaddr)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcCryptoSphincsTree")
