//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/Tree.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/bouncycastle/pqc/crypto/sphincs/HashFunctions.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCS256Config.h"
#include "org/bouncycastle/pqc/crypto/sphincs/Seed.h"
#include "org/bouncycastle/pqc/crypto/sphincs/Tree.h"
#include "org/bouncycastle/pqc/crypto/sphincs/Wots.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/sphincs/Tree must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/Tree.java"


#line 3
@implementation OrgBouncycastlePqcCryptoSphincsTree


#line 3
- (instancetype)initPackagePrivate {
  OrgBouncycastlePqcCryptoSphincsTree_initPackagePrivate(self);
  return self;
}


#line 24
+ (void)l_treeWithOrgBouncycastlePqcCryptoSphincsHashFunctions:(OrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                 withByteArray:(IOSByteArray *)leaf
                                                       withInt:(jint)leafOff
                                                 withByteArray:(IOSByteArray *)wots_pk
                                                       withInt:(jint)pkOff
                                                 withByteArray:(IOSByteArray *)masks
                                                       withInt:(jint)masksOff {
  OrgBouncycastlePqcCryptoSphincsTree_l_treeWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(hs, leaf, leafOff, wots_pk, pkOff, masks, masksOff);
}


#line 48
+ (void)treehashWithOrgBouncycastlePqcCryptoSphincsHashFunctions:(OrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                   withByteArray:(IOSByteArray *)node
                                                         withInt:(jint)nodeOff
                                                         withInt:(jint)height
                                                   withByteArray:(IOSByteArray *)sk
                withOrgBouncycastlePqcCryptoSphincsTree_leafaddr:(OrgBouncycastlePqcCryptoSphincsTree_leafaddr *)leaf
                                                   withByteArray:(IOSByteArray *)masks
                                                         withInt:(jint)masksOff {
  OrgBouncycastlePqcCryptoSphincsTree_treehashWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withInt_withByteArray_withOrgBouncycastlePqcCryptoSphincsTree_leafaddr_withByteArray_withInt_(hs, node, nodeOff, height, sk, leaf, masks, masksOff);
}


#line 80
+ (void)gen_leaf_wotsWithOrgBouncycastlePqcCryptoSphincsHashFunctions:(OrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                        withByteArray:(IOSByteArray *)leaf
                                                              withInt:(jint)leafOff
                                                        withByteArray:(IOSByteArray *)masks
                                                              withInt:(jint)masksOff
                                                        withByteArray:(IOSByteArray *)sk
                     withOrgBouncycastlePqcCryptoSphincsTree_leafaddr:(OrgBouncycastlePqcCryptoSphincsTree_leafaddr *)a {
  OrgBouncycastlePqcCryptoSphincsTree_gen_leaf_wotsWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(hs, leaf, leafOff, masks, masksOff, sk, a);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(l_treeWithOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withInt:withByteArray:withInt:withByteArray:withInt:);
  methods[2].selector = @selector(treehashWithOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withInt:withInt:withByteArray:withOrgBouncycastlePqcCryptoSphincsTree_leafaddr:withByteArray:withInt:);
  methods[3].selector = @selector(gen_leaf_wotsWithOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withInt:withByteArray:withInt:withByteArray:withOrgBouncycastlePqcCryptoSphincsTree_leafaddr:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "l_tree", "LOrgBouncycastlePqcCryptoSphincsHashFunctions;[BI[BI[BI", "treehash", "LOrgBouncycastlePqcCryptoSphincsHashFunctions;[BII[BLOrgBouncycastlePqcCryptoSphincsTree_leafaddr;[BI", "gen_leaf_wots", "LOrgBouncycastlePqcCryptoSphincsHashFunctions;[BI[BI[BLOrgBouncycastlePqcCryptoSphincsTree_leafaddr;", "LOrgBouncycastlePqcCryptoSphincsTree_leafaddr;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSphincsTree = { "Tree", "org.bouncycastle.pqc.crypto.sphincs", ptrTable, methods, NULL, 7, 0x0, 4, 0, -1, 6, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSphincsTree;
}

@end


#line 3
void OrgBouncycastlePqcCryptoSphincsTree_initPackagePrivate(OrgBouncycastlePqcCryptoSphincsTree *self) {
  NSObject_init(self);
}


#line 3
OrgBouncycastlePqcCryptoSphincsTree *new_OrgBouncycastlePqcCryptoSphincsTree_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsTree, initPackagePrivate)
}


#line 3
OrgBouncycastlePqcCryptoSphincsTree *create_OrgBouncycastlePqcCryptoSphincsTree_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsTree, initPackagePrivate)
}


#line 24
void OrgBouncycastlePqcCryptoSphincsTree_l_treeWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(OrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *leaf, jint leafOff, IOSByteArray *wots_pk, jint pkOff, IOSByteArray *masks, jint masksOff) {
  OrgBouncycastlePqcCryptoSphincsTree_initialize();
  jint l = OrgBouncycastlePqcCryptoSphincsWots_WOTS_L;
  jint i;
  
#line 27
  jint j = 0;
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsWots_WOTS_LOG_L; i++) {
    
#line 30
    for (j = 0; j < (JreURShift32(l, 1)); j++) {
      
#line 32
      [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:wots_pk withInt:pkOff + j * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:wots_pk withInt:pkOff + j * 2 * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:masks withInt:masksOff + i * 2 * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
    }
    
#line 35
    if ((l & 1) != 0) {
      
#line 37
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(wots_pk, pkOff + (l - 1) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, wots_pk, pkOff + (JreURShift32(l, 1)) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES);
      l = (JreURShift32(l, 1)) + 1;
    }
    else {
      
#line 42
      l = (JreURShift32(l, 1));
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(wots_pk, pkOff, leaf, leafOff, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES);
}


#line 48
void OrgBouncycastlePqcCryptoSphincsTree_treehashWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withInt_withByteArray_withOrgBouncycastlePqcCryptoSphincsTree_leafaddr_withByteArray_withInt_(OrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *node, jint nodeOff, jint height, IOSByteArray *sk, OrgBouncycastlePqcCryptoSphincsTree_leafaddr *leaf, IOSByteArray *masks, jint masksOff) {
  OrgBouncycastlePqcCryptoSphincsTree_initialize();
  OrgBouncycastlePqcCryptoSphincsTree_leafaddr *a = new_OrgBouncycastlePqcCryptoSphincsTree_leafaddr_initWithOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(leaf);
  jint lastnode;
  
#line 51
  jint i;
  IOSByteArray *stack = [IOSByteArray newArrayWithLength:(height + 1) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  IOSIntArray *stacklevels = [IOSIntArray newArrayWithLength:height + 1];
  jint stackoffset = 0;
  
#line 56
  lastnode = (jint) (a->subleaf_ + (JreLShift32(1, height)));
  
#line 58
  for (; a->subleaf_ < lastnode; a->subleaf_++) {
    
#line 60
    OrgBouncycastlePqcCryptoSphincsTree_gen_leaf_wotsWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(hs, stack, stackoffset * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, masks, masksOff, sk, a);
    *IOSIntArray_GetRef(stacklevels, stackoffset) = 0;
    stackoffset++;
    while (stackoffset > 1 && IOSIntArray_Get(stacklevels, stackoffset - 1) == IOSIntArray_Get(stacklevels, stackoffset - 2)) {
      
#line 66
      jint maskoffset = 2 * (IOSIntArray_Get(stacklevels, stackoffset - 1) + OrgBouncycastlePqcCryptoSphincsWots_WOTS_LOG_L) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
      
#line 68
      [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:stack withInt:(stackoffset - 2) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:stack withInt:(stackoffset - 2) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:
#line 69
      masks withInt:masksOff + maskoffset];
      (*IOSIntArray_GetRef(stacklevels, stackoffset - 2))++;
      stackoffset--;
    }
  }
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; i++) {
    
#line 76
    *IOSByteArray_GetRef(nil_chk(node), nodeOff + i) = IOSByteArray_Get(stack, i);
  }
}


#line 80
void OrgBouncycastlePqcCryptoSphincsTree_gen_leaf_wotsWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(OrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *leaf, jint leafOff, IOSByteArray *masks, jint masksOff, IOSByteArray *sk, OrgBouncycastlePqcCryptoSphincsTree_leafaddr *a) {
  OrgBouncycastlePqcCryptoSphincsTree_initialize();
  IOSByteArray *seed = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES];
  IOSByteArray *pk = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsWots_WOTS_L * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  
#line 85
  OrgBouncycastlePqcCryptoSphincsWots *w = new_OrgBouncycastlePqcCryptoSphincsWots_initPackagePrivate();
  
#line 87
  OrgBouncycastlePqcCryptoSphincsSeed_get_seedWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(hs, seed, 0, sk, a);
  
#line 89
  [w wots_pkgenWithOrgBouncycastlePqcCryptoSphincsHashFunctions:hs withByteArray:pk withInt:0 withByteArray:seed withInt:0 withByteArray:masks withInt:masksOff];
  
#line 91
  OrgBouncycastlePqcCryptoSphincsTree_l_treeWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(hs, leaf, leafOff, pk, 0, masks, masksOff);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSphincsTree)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/Tree.java"


#line 5
@implementation OrgBouncycastlePqcCryptoSphincsTree_leafaddr

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 11
- (instancetype)init {
  OrgBouncycastlePqcCryptoSphincsTree_leafaddr_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 16
- (instancetype)initWithOrgBouncycastlePqcCryptoSphincsTree_leafaddr:(OrgBouncycastlePqcCryptoSphincsTree_leafaddr *)leafaddr {
  OrgBouncycastlePqcCryptoSphincsTree_leafaddr_initWithOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(self, leafaddr);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgBouncycastlePqcCryptoSphincsTree_leafaddr:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "level_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subtree_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subleaf_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcCryptoSphincsTree_leafaddr;", "LOrgBouncycastlePqcCryptoSphincsTree;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSphincsTree_leafaddr = { "leafaddr", "org.bouncycastle.pqc.crypto.sphincs", ptrTable, methods, fields, 7, 0x8, 2, 3, 1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSphincsTree_leafaddr;
}

@end


#line 11
void OrgBouncycastlePqcCryptoSphincsTree_leafaddr_init(OrgBouncycastlePqcCryptoSphincsTree_leafaddr *self) {
  NSObject_init(self);
}


#line 11
OrgBouncycastlePqcCryptoSphincsTree_leafaddr *new_OrgBouncycastlePqcCryptoSphincsTree_leafaddr_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsTree_leafaddr, init)
}


#line 11
OrgBouncycastlePqcCryptoSphincsTree_leafaddr *create_OrgBouncycastlePqcCryptoSphincsTree_leafaddr_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsTree_leafaddr, init)
}


#line 16
void OrgBouncycastlePqcCryptoSphincsTree_leafaddr_initWithOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(OrgBouncycastlePqcCryptoSphincsTree_leafaddr *self, OrgBouncycastlePqcCryptoSphincsTree_leafaddr *leafaddr) {
  NSObject_init(self);
  self->level_ = ((OrgBouncycastlePqcCryptoSphincsTree_leafaddr *) nil_chk(leafaddr))->level_;
  self->subtree_ = leafaddr->subtree_;
  self->subleaf_ = leafaddr->subleaf_;
}


#line 16
OrgBouncycastlePqcCryptoSphincsTree_leafaddr *new_OrgBouncycastlePqcCryptoSphincsTree_leafaddr_initWithOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(OrgBouncycastlePqcCryptoSphincsTree_leafaddr *leafaddr) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsTree_leafaddr, initWithOrgBouncycastlePqcCryptoSphincsTree_leafaddr_, leafaddr)
}


#line 16
OrgBouncycastlePqcCryptoSphincsTree_leafaddr *create_OrgBouncycastlePqcCryptoSphincsTree_leafaddr_initWithOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(OrgBouncycastlePqcCryptoSphincsTree_leafaddr *leafaddr) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsTree_leafaddr, initWithOrgBouncycastlePqcCryptoSphincsTree_leafaddr_, leafaddr)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSphincsTree_leafaddr)
