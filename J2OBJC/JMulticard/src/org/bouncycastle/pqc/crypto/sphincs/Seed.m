//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/Seed.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/bouncycastle/crypto/StreamCipher.h"
#include "org/bouncycastle/crypto/engines/ChaChaEngine.h"
#include "org/bouncycastle/crypto/params/KeyParameter.h"
#include "org/bouncycastle/crypto/params/ParametersWithIV.h"
#include "org/bouncycastle/pqc/crypto/sphincs/HashFunctions.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCS256Config.h"
#include "org/bouncycastle/pqc/crypto/sphincs/Seed.h"
#include "org/bouncycastle/pqc/crypto/sphincs/Tree.h"
#include "org/bouncycastle/util/Pack.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/sphincs/Seed must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/Seed.java"


#line 9
@implementation OrgBouncycastlePqcCryptoSphincsSeed


#line 9
- (instancetype)initPackagePrivate {
  OrgBouncycastlePqcCryptoSphincsSeed_initPackagePrivate(self);
  return self;
}


#line 12
+ (void)get_seedWithOrgBouncycastlePqcCryptoSphincsHashFunctions:(OrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                   withByteArray:(IOSByteArray *)seed
                                                         withInt:(jint)seedOff
                                                   withByteArray:(IOSByteArray *)sk
                withOrgBouncycastlePqcCryptoSphincsTree_leafaddr:(OrgBouncycastlePqcCryptoSphincsTree_leafaddr *)a {
  OrgBouncycastlePqcCryptoSphincsSeed_get_seedWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(hs, seed, seedOff, sk, a);
}


#line 37
+ (void)prgWithByteArray:(IOSByteArray *)r
                 withInt:(jint)rOff
                withLong:(jlong)rlen
           withByteArray:(IOSByteArray *)key
                 withInt:(jint)keyOff {
  OrgBouncycastlePqcCryptoSphincsSeed_prgWithByteArray_withInt_withLong_withByteArray_withInt_(r, rOff, rlen, key, keyOff);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(get_seedWithOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withInt:withByteArray:withOrgBouncycastlePqcCryptoSphincsTree_leafaddr:);
  methods[2].selector = @selector(prgWithByteArray:withInt:withLong:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "get_seed", "LOrgBouncycastlePqcCryptoSphincsHashFunctions;[BI[BLOrgBouncycastlePqcCryptoSphincsTree_leafaddr;", "prg", "[BIJ[BI" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSphincsSeed = { "Seed", "org.bouncycastle.pqc.crypto.sphincs", ptrTable, methods, NULL, 7, 0x0, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSphincsSeed;
}

@end


#line 9
void OrgBouncycastlePqcCryptoSphincsSeed_initPackagePrivate(OrgBouncycastlePqcCryptoSphincsSeed *self) {
  NSObject_init(self);
}


#line 9
OrgBouncycastlePqcCryptoSphincsSeed *new_OrgBouncycastlePqcCryptoSphincsSeed_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsSeed, initPackagePrivate)
}


#line 9
OrgBouncycastlePqcCryptoSphincsSeed *create_OrgBouncycastlePqcCryptoSphincsSeed_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsSeed, initPackagePrivate)
}


#line 12
void OrgBouncycastlePqcCryptoSphincsSeed_get_seedWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(OrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *seed, jint seedOff, IOSByteArray *sk, OrgBouncycastlePqcCryptoSphincsTree_leafaddr *a) {
  OrgBouncycastlePqcCryptoSphincsSeed_initialize();
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES + 8];
  jlong t;
  jint i;
  
#line 18
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES; i++) {
    
#line 20
    *IOSByteArray_GetRef(buffer, i) = IOSByteArray_Get(nil_chk(sk), i);
  }
  
#line 24
  t = ((OrgBouncycastlePqcCryptoSphincsTree_leafaddr *) nil_chk(a))->level_;
  
#line 26
  t |= JreLShift64(a->subtree_, 4);
  
#line 28
  t |= JreLShift64(a->subleaf_, 59);
  
#line 30
  OrgBouncycastleUtilPack_longToLittleEndianWithLong_withByteArray_withInt_(t, buffer, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES);
  
#line 32
  [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) varlen_hashWithByteArray:seed withInt:seedOff withByteArray:buffer withInt:buffer->size_];
}


#line 37
void OrgBouncycastlePqcCryptoSphincsSeed_prgWithByteArray_withInt_withLong_withByteArray_withInt_(IOSByteArray *r, jint rOff, jlong rlen, IOSByteArray *key, jint keyOff) {
  OrgBouncycastlePqcCryptoSphincsSeed_initialize();
  IOSByteArray *nonce = [IOSByteArray newArrayWithLength:8];
  
#line 41
  id<OrgBouncycastleCryptoStreamCipher> cipher = new_OrgBouncycastleCryptoEnginesChaChaEngine_initWithInt_(12);
  
#line 43
  [cipher init__WithBoolean:true withOrgBouncycastleCryptoCipherParameters:new_OrgBouncycastleCryptoParamsParametersWithIV_initWithOrgBouncycastleCryptoCipherParameters_withByteArray_(new_OrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(key, keyOff, 32), nonce)];
  
#line 45
  [cipher processBytesWithByteArray:r withInt:rOff withInt:(jint) rlen withByteArray:r withInt:rOff];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSphincsSeed)
