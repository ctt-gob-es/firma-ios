//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/HashFunctions.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/bouncycastle/crypto/Digest.h"
#include "org/bouncycastle/pqc/crypto/sphincs/HashFunctions.h"
#include "org/bouncycastle/pqc/crypto/sphincs/Permute.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCS256Config.h"
#include "org/bouncycastle/util/Strings.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/sphincs/HashFunctions must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoSphincsHashFunctions () {
 @public
  id<OrgBouncycastleCryptoDigest> dig256_;
  id<OrgBouncycastleCryptoDigest> dig512_;
  OrgBouncycastlePqcCryptoSphincsPermute *perm_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsHashFunctions, dig256_, id<OrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsHashFunctions, dig512_, id<OrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsHashFunctions, perm_, OrgBouncycastlePqcCryptoSphincsPermute *)

inline IOSByteArray *OrgBouncycastlePqcCryptoSphincsHashFunctions_get_hashc(void);
static IOSByteArray *OrgBouncycastlePqcCryptoSphincsHashFunctions_hashc;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcCryptoSphincsHashFunctions, hashc, IOSByteArray *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/HashFunctions.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastlePqcCryptoSphincsHashFunctions)


#line 8
@implementation OrgBouncycastlePqcCryptoSphincsHashFunctions


#line 17
- (instancetype)initPackagePrivateWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)dig256 {
  OrgBouncycastlePqcCryptoSphincsHashFunctions_initPackagePrivateWithOrgBouncycastleCryptoDigest_(self, dig256);
  return self;
}

- (instancetype)initPackagePrivateWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)dig256
                                  withOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)dig512 {
  OrgBouncycastlePqcCryptoSphincsHashFunctions_initPackagePrivateWithOrgBouncycastleCryptoDigest_withOrgBouncycastleCryptoDigest_(self, dig256, dig512);
  return self;
}

- (jint)varlen_hashWithByteArray:(IOSByteArray *)outArg
                         withInt:(jint)outOff
                   withByteArray:(IOSByteArray *)inArg
                         withInt:(jint)inLen {
  
#line 30
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(dig256_)) updateWithByteArray:inArg withInt:0 withInt:inLen];
  
#line 32
  [dig256_ doFinalWithByteArray:outArg withInt:outOff];
  
#line 34
  return 0;
}


#line 37
- (id<OrgBouncycastleCryptoDigest>)getMessageHash {
  
#line 39
  return dig512_;
}


#line 42
- (jint)hash_2n_nWithByteArray:(IOSByteArray *)outArg
                       withInt:(jint)outOff
                 withByteArray:(IOSByteArray *)inArg
                       withInt:(jint)inOff {
  
#line 44
  IOSByteArray *x = [IOSByteArray newArrayWithLength:64];
  jint i;
  for (i = 0; i < 32; i++) {
    
#line 48
    *IOSByteArray_GetRef(x, i) = IOSByteArray_Get(nil_chk(inArg), inOff + i);
    *IOSByteArray_GetRef(x, i + 32) = IOSByteArray_Get(nil_chk(OrgBouncycastlePqcCryptoSphincsHashFunctions_hashc), i);
  }
  [((OrgBouncycastlePqcCryptoSphincsPermute *) nil_chk(perm_)) chacha_permuteWithByteArray:x withByteArray:x];
  for (i = 0; i < 32; i++) {
    
#line 54
    *IOSByteArray_GetRef(x, i) = (jbyte) (IOSByteArray_Get(x, i) ^ IOSByteArray_Get(nil_chk(inArg), inOff + i + 32));
  }
  [perm_ chacha_permuteWithByteArray:x withByteArray:x];
  for (i = 0; i < 32; i++) {
    
#line 59
    *IOSByteArray_GetRef(nil_chk(outArg), outOff + i) = IOSByteArray_Get(x, i);
  }
  
#line 62
  return 0;
}


#line 65
- (jint)hash_2n_n_maskWithByteArray:(IOSByteArray *)outArg
                            withInt:(jint)outOff
                      withByteArray:(IOSByteArray *)inArg
                            withInt:(jint)inOff
                      withByteArray:(IOSByteArray *)mask
                            withInt:(jint)maskOff {
  
#line 67
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:2 * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  jint i;
  for (i = 0; i < 2 * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; i++) {
    
#line 71
    *IOSByteArray_GetRef(buf, i) = (jbyte) (IOSByteArray_Get(nil_chk(inArg), inOff + i) ^ IOSByteArray_Get(nil_chk(mask), maskOff + i));
  }
  
#line 74
  jint rv = [self hash_2n_nWithByteArray:outArg withInt:outOff withByteArray:buf withInt:0];
  
#line 76
  return rv;
}


#line 79
- (jint)hash_n_nWithByteArray:(IOSByteArray *)outArg
                      withInt:(jint)outOff
                withByteArray:(IOSByteArray *)inArg
                      withInt:(jint)inOff {
  
#line 82
  IOSByteArray *x = [IOSByteArray newArrayWithLength:64];
  jint i;
  
#line 85
  for (i = 0; i < 32; i++) {
    
#line 87
    *IOSByteArray_GetRef(x, i) = IOSByteArray_Get(nil_chk(inArg), inOff + i);
    *IOSByteArray_GetRef(x, i + 32) = IOSByteArray_Get(nil_chk(OrgBouncycastlePqcCryptoSphincsHashFunctions_hashc), i);
  }
  [((OrgBouncycastlePqcCryptoSphincsPermute *) nil_chk(perm_)) chacha_permuteWithByteArray:x withByteArray:x];
  for (i = 0; i < 32; i++) {
    
#line 93
    *IOSByteArray_GetRef(nil_chk(outArg), outOff + i) = IOSByteArray_Get(x, i);
  }
  
#line 96
  return 0;
}


#line 99
- (jint)hash_n_n_maskWithByteArray:(IOSByteArray *)outArg
                           withInt:(jint)outOff
                     withByteArray:(IOSByteArray *)inArg
                           withInt:(jint)inOff
                     withByteArray:(IOSByteArray *)mask
                           withInt:(jint)maskOff {
  
#line 101
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  jint i;
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; i++) {
    
#line 105
    *IOSByteArray_GetRef(buf, i) = (jbyte) (IOSByteArray_Get(nil_chk(inArg), inOff + i) ^ IOSByteArray_Get(nil_chk(mask), maskOff + i));
  }
  return [self hash_n_nWithByteArray:outArg withInt:outOff withByteArray:buf withInt:0];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoDigest;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 7, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 8, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(initPackagePrivateWithOrgBouncycastleCryptoDigest:withOrgBouncycastleCryptoDigest:);
  methods[2].selector = @selector(varlen_hashWithByteArray:withInt:withByteArray:withInt:);
  methods[3].selector = @selector(getMessageHash);
  methods[4].selector = @selector(hash_2n_nWithByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(hash_2n_n_maskWithByteArray:withInt:withByteArray:withInt:withByteArray:withInt:);
  methods[6].selector = @selector(hash_n_nWithByteArray:withInt:withByteArray:withInt:);
  methods[7].selector = @selector(hash_n_n_maskWithByteArray:withInt:withByteArray:withInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hashc", "[B", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "dig256_", "LOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "dig512_", "LOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "perm_", "LOrgBouncycastlePqcCryptoSphincsPermute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleCryptoDigest;", "LOrgBouncycastleCryptoDigest;LOrgBouncycastleCryptoDigest;", "varlen_hash", "[BI[BI", "hash_2n_n", "hash_2n_n_mask", "[BI[BI[BI", "hash_n_n", "hash_n_n_mask", &OrgBouncycastlePqcCryptoSphincsHashFunctions_hashc };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSphincsHashFunctions = { "HashFunctions", "org.bouncycastle.pqc.crypto.sphincs", ptrTable, methods, fields, 7, 0x0, 8, 4, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSphincsHashFunctions;
}

+ (void)initialize {
  if (self == [OrgBouncycastlePqcCryptoSphincsHashFunctions class]) {
    OrgBouncycastlePqcCryptoSphincsHashFunctions_hashc = OrgBouncycastleUtilStrings_toByteArrayWithNSString_(
#line 10
    @"expand 32-byte to 64-byte state!");
    J2OBJC_SET_INITIALIZED(OrgBouncycastlePqcCryptoSphincsHashFunctions)
  }
}

@end


#line 17
void OrgBouncycastlePqcCryptoSphincsHashFunctions_initPackagePrivateWithOrgBouncycastleCryptoDigest_(OrgBouncycastlePqcCryptoSphincsHashFunctions *self, id<OrgBouncycastleCryptoDigest> dig256) {
  OrgBouncycastlePqcCryptoSphincsHashFunctions_initPackagePrivateWithOrgBouncycastleCryptoDigest_withOrgBouncycastleCryptoDigest_(self,
#line 19
  dig256, nil);
}


#line 17
OrgBouncycastlePqcCryptoSphincsHashFunctions *new_OrgBouncycastlePqcCryptoSphincsHashFunctions_initPackagePrivateWithOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> dig256) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsHashFunctions, initPackagePrivateWithOrgBouncycastleCryptoDigest_, dig256)
}


#line 17
OrgBouncycastlePqcCryptoSphincsHashFunctions *create_OrgBouncycastlePqcCryptoSphincsHashFunctions_initPackagePrivateWithOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> dig256) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsHashFunctions, initPackagePrivateWithOrgBouncycastleCryptoDigest_, dig256)
}


#line 22
void OrgBouncycastlePqcCryptoSphincsHashFunctions_initPackagePrivateWithOrgBouncycastleCryptoDigest_withOrgBouncycastleCryptoDigest_(OrgBouncycastlePqcCryptoSphincsHashFunctions *self, id<OrgBouncycastleCryptoDigest> dig256, id<OrgBouncycastleCryptoDigest> dig512) {
  NSObject_init(self);
  self->perm_ = new_OrgBouncycastlePqcCryptoSphincsPermute_initPackagePrivate();
  
#line 24
  self->dig256_ = dig256;
  self->dig512_ = dig512;
}


#line 22
OrgBouncycastlePqcCryptoSphincsHashFunctions *new_OrgBouncycastlePqcCryptoSphincsHashFunctions_initPackagePrivateWithOrgBouncycastleCryptoDigest_withOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> dig256, id<OrgBouncycastleCryptoDigest> dig512) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsHashFunctions, initPackagePrivateWithOrgBouncycastleCryptoDigest_withOrgBouncycastleCryptoDigest_, dig256, dig512)
}


#line 22
OrgBouncycastlePqcCryptoSphincsHashFunctions *create_OrgBouncycastlePqcCryptoSphincsHashFunctions_initPackagePrivateWithOrgBouncycastleCryptoDigest_withOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> dig256, id<OrgBouncycastleCryptoDigest> dig512) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsHashFunctions, initPackagePrivateWithOrgBouncycastleCryptoDigest_withOrgBouncycastleCryptoDigest_, dig256, dig512)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSphincsHashFunctions)
