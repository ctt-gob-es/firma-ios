//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/SPHINCS256KeyPairGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/bouncycastle/crypto/Digest.h"
#include "org/bouncycastle/crypto/KeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincs/HashFunctions.h"
#include "org/bouncycastle/pqc/crypto/sphincs/Horst.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCS256Config.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCS256KeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCS256KeyPairGenerator.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCSPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCSPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincs/Tree.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/sphincs/SPHINCS256KeyPairGenerator must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator () {
 @public
  JavaSecuritySecureRandom *random_;
  id<OrgBouncycastleCryptoDigest> treeDigest_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator, random_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator, treeDigest_, id<OrgBouncycastleCryptoDigest>)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/SPHINCS256KeyPairGenerator.java"


#line 10
@implementation OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 10
- (instancetype)init {
  OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithOrgBouncycastleCryptoKeyGenerationParameters:(OrgBouncycastleCryptoKeyGenerationParameters *)param {
  
#line 19
  random_ = [((OrgBouncycastleCryptoKeyGenerationParameters *) nil_chk(param)) getRandom];
  treeDigest_ = [((OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters class])) getTreeDigest];
}

- (OrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  
#line 26
  OrgBouncycastlePqcCryptoSphincsTree_leafaddr *a = new_OrgBouncycastlePqcCryptoSphincsTree_leafaddr_init();
  
#line 28
  IOSByteArray *sk = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_SECRETKEYBYTES];
  
#line 30
  [((JavaSecuritySecureRandom *) nil_chk(random_)) nextBytesWithByteArray:sk];
  
#line 32
  IOSByteArray *pk = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_PUBLICKEYBYTES];
  
#line 34
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sk, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES, pk, 0, OrgBouncycastlePqcCryptoSphincsHorst_N_MASKS * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES);
  
#line 37
  a->level_ = OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_N_LEVELS - 1;
  a->subtree_ = 0;
  a->subleaf_ = 0;
  
#line 41
  OrgBouncycastlePqcCryptoSphincsHashFunctions *hs = new_OrgBouncycastlePqcCryptoSphincsHashFunctions_initPackagePrivateWithOrgBouncycastleCryptoDigest_(treeDigest_);
  
#line 45
  OrgBouncycastlePqcCryptoSphincsTree_treehashWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withInt_withByteArray_withOrgBouncycastlePqcCryptoSphincsTree_leafaddr_withByteArray_withInt_(hs, pk, (OrgBouncycastlePqcCryptoSphincsHorst_N_MASKS * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES), OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT, sk, a, pk, 0);
  
#line 47
  return new_OrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(new_OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters_initWithByteArray_withNSString_(pk, [((id<OrgBouncycastleCryptoDigest>) nil_chk(treeDigest_)) getAlgorithmName]), new_OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters_initWithByteArray_withNSString_(
#line 48
  sk, [((id<OrgBouncycastleCryptoDigest>) nil_chk(treeDigest_)) getAlgorithmName]));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[2].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "treeDigest_", "LOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LOrgBouncycastleCryptoKeyGenerationParameters;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator = { "SPHINCS256KeyPairGenerator", "org.bouncycastle.pqc.crypto.sphincs", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator;
}

@end


#line 10
void OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator_init(OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator *self) {
  NSObject_init(self);
}


#line 10
OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator *new_OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator, init)
}


#line 10
OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator *create_OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator)
