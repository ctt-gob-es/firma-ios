//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/SPHINCS256Signer.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/Digest.h"
#include "org/bouncycastle/crypto/params/ParametersWithRandom.h"
#include "org/bouncycastle/pqc/crypto/sphincs/HashFunctions.h"
#include "org/bouncycastle/pqc/crypto/sphincs/Horst.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCS256Config.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCS256Signer.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCSPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCSPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincs/Seed.h"
#include "org/bouncycastle/pqc/crypto/sphincs/Tree.h"
#include "org/bouncycastle/pqc/crypto/sphincs/Wots.h"
#include "org/bouncycastle/util/Pack.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/sphincs/SPHINCS256Signer must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer () {
 @public
  OrgBouncycastlePqcCryptoSphincsHashFunctions *hashFunctions_;
  IOSByteArray *keyData_;
}

- (void)zerobytesWithByteArray:(IOSByteArray *)tsk
                       withInt:(jint)off
                       withInt:(jint)cryptoSecretkeybytes;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer, hashFunctions_, OrgBouncycastlePqcCryptoSphincsHashFunctions *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer, keyData_, IOSByteArray *)

__attribute__((unused)) static void OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_zerobytesWithByteArray_withInt_withInt_(OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer *self, IOSByteArray *tsk, jint off, jint cryptoSecretkeybytes);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/SPHINCS256Signer.java"


#line 21
@implementation OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer


#line 34
- (instancetype)initWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)nDigest
                    withOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)twoNDigest {
  OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_initWithOrgBouncycastleCryptoDigest_withOrgBouncycastleCryptoDigest_(self, nDigest, twoNDigest);
  return self;
}


#line 48
- (void)init__WithBoolean:(jboolean)forSigning
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)param {
  
#line 51
  if (forSigning) {
    
#line 53
    if ([param isKindOfClass:[OrgBouncycastleCryptoParamsParametersWithRandom class]]) {
      
#line 56
      keyData_ = [((OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters *) cast_chk([((OrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(((OrgBouncycastleCryptoParamsParametersWithRandom *) param))) getParameters], [OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters class])))) getKeyData];
    }
    else {
      
#line 60
      keyData_ = [((OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters class])))) getKeyData];
    }
  }
  else {
    
#line 65
    keyData_ = [((OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *) nil_chk(((OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *) cast_chk(param, [OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters class])))) getKeyData];
  }
}


#line 69
- (IOSByteArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  
#line 72
  return [self crypto_signWithOrgBouncycastlePqcCryptoSphincsHashFunctions:hashFunctions_ withByteArray:message withByteArray:keyData_];
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                           withByteArray:(IOSByteArray *)signature {
  
#line 78
  return [self verifyWithOrgBouncycastlePqcCryptoSphincsHashFunctions:hashFunctions_ withByteArray:message withByteArray:signature withByteArray:keyData_];
}


#line 81
+ (void)validate_authpathWithOrgBouncycastlePqcCryptoSphincsHashFunctions:(OrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                            withByteArray:(IOSByteArray *)root
                                                            withByteArray:(IOSByteArray *)leaf
                                                                  withInt:(jint)leafidx
                                                            withByteArray:(IOSByteArray *)authpath
                                                                  withInt:(jint)auOff
                                                            withByteArray:(IOSByteArray *)masks
                                                                  withInt:(jint)height {
  OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_validate_authpathWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(hs, root, leaf, leafidx, authpath, auOff, masks, height);
}


#line 135
+ (void)compute_authpath_wotsWithOrgBouncycastlePqcCryptoSphincsHashFunctions:(OrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                                withByteArray:(IOSByteArray *)root
                                                                withByteArray:(IOSByteArray *)authpath
                                                                      withInt:(jint)authOff
                             withOrgBouncycastlePqcCryptoSphincsTree_leafaddr:(OrgBouncycastlePqcCryptoSphincsTree_leafaddr *)a
                                                                withByteArray:(IOSByteArray *)sk
                                                                withByteArray:(IOSByteArray *)masks
                                                                      withInt:(jint)height {
  OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_compute_authpath_wotsWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withOrgBouncycastlePqcCryptoSphincsTree_leafaddr_withByteArray_withByteArray_withInt_(hs, root, authpath, authOff, a, sk, masks, height);
}


#line 191
- (IOSByteArray *)crypto_signWithOrgBouncycastlePqcCryptoSphincsHashFunctions:(OrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                                withByteArray:(IOSByteArray *)m
                                                                withByteArray:(IOSByteArray *)sk {
  
#line 193
  IOSByteArray *sm = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_BYTES];
  
#line 195
  jint i;
  jlong leafidx;
  IOSByteArray *R = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES];
  IOSByteArray *m_h = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MSGHASH_BYTES];
  IOSLongArray *rnd = [IOSLongArray newArrayWithLength:8];
  
#line 201
  IOSByteArray *root = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  IOSByteArray *seed = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES];
  IOSByteArray *masks = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsHorst_N_MASKS * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  jint pk;
  IOSByteArray *tsk = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_SECRETKEYBYTES];
  
#line 207
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_SECRETKEYBYTES; i++) {
    
#line 209
    *IOSByteArray_GetRef(tsk, i) = IOSByteArray_Get(nil_chk(sk), i);
  }
  {
    
#line 215
    jint scratch = OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_BYTES - OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SK_RAND_SEED_BYTES;
    
#line 218
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tsk, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_SECRETKEYBYTES - OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SK_RAND_SEED_BYTES, sm, scratch, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SK_RAND_SEED_BYTES);
    
#line 220
    id<OrgBouncycastleCryptoDigest> d = [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) getMessageHash];
    IOSByteArray *bRnd = [IOSByteArray newArrayWithLength:[((id<OrgBouncycastleCryptoDigest>) nil_chk(d)) getDigestSize]];
    
#line 223
    [d updateWithByteArray:sm withInt:scratch withInt:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SK_RAND_SEED_BYTES];
    
#line 225
    [d updateWithByteArray:m withInt:0 withInt:((IOSByteArray *) nil_chk(m))->size_];
    
#line 227
    [d doFinalWithByteArray:bRnd withInt:0];
    
#line 230
    OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_zerobytesWithByteArray_withInt_withInt_(self, sm, scratch, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SK_RAND_SEED_BYTES);
    
#line 232
    for (jint j = 0; j != rnd->size_; j++) {
      
#line 234
      *IOSLongArray_GetRef(rnd, j) = OrgBouncycastleUtilPack_littleEndianToLongWithByteArray_withInt_(bRnd, j * 8);
    }
    leafidx = IOSLongArray_Get(rnd, 0) & (jlong) 0xfffffffffffffffLL;
    
#line 238
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bRnd, 16, R, 0, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES);
    
#line 241
    scratch = OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_BYTES - OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES - OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_PUBLICKEYBYTES;
    
#line 244
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(R, 0, sm, scratch, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES);
    
#line 247
    OrgBouncycastlePqcCryptoSphincsTree_leafaddr *b = new_OrgBouncycastlePqcCryptoSphincsTree_leafaddr_init();
    b->level_ = OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_N_LEVELS - 1;
    b->subtree_ = 0;
    b->subleaf_ = 0;
    
#line 252
    pk = scratch + OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES;
    
#line 254
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tsk, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES, sm, pk, OrgBouncycastlePqcCryptoSphincsHorst_N_MASKS * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES);
    
#line 256
    OrgBouncycastlePqcCryptoSphincsTree_treehashWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withInt_withByteArray_withOrgBouncycastlePqcCryptoSphincsTree_leafaddr_withByteArray_withInt_(hs, sm, pk + OrgBouncycastlePqcCryptoSphincsHorst_N_MASKS * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT, tsk, b, sm, pk);
    
#line 258
    d = [hs getMessageHash];
    
#line 260
    [((id<OrgBouncycastleCryptoDigest>) nil_chk(d)) updateWithByteArray:sm withInt:scratch withInt:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES + OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_PUBLICKEYBYTES];
    [d updateWithByteArray:m withInt:0 withInt:m->size_];
    [d doFinalWithByteArray:m_h withInt:0];
  }
  
#line 265
  OrgBouncycastlePqcCryptoSphincsTree_leafaddr *a = new_OrgBouncycastlePqcCryptoSphincsTree_leafaddr_init();
  
#line 267
  a->level_ = OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_N_LEVELS;
  a->subleaf_ = (jint) (leafidx & ((JreLShift32(1, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT)) - 1));
  a->subtree_ = JreURShift64(leafidx, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT);
  
#line 271
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES; i++) {
    
#line 273
    *IOSByteArray_GetRef(sm, i) = IOSByteArray_Get(R, i);
  }
  
#line 276
  jint smOff = OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES;
  
#line 278
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tsk, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES, masks, 0, OrgBouncycastlePqcCryptoSphincsHorst_N_MASKS * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES);
  for (i = 0; i < JreIntDiv((OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_TOTALTREE_HEIGHT + 7), 8); i++) {
    
#line 281
    *IOSByteArray_GetRef(sm, smOff + i) = (jbyte) ((JreURShift64(leafidx, 8 * i)) & (jint) 0xff);
  }
  
#line 284
  smOff += JreIntDiv((OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_TOTALTREE_HEIGHT + 7), 8);
  
#line 286
  OrgBouncycastlePqcCryptoSphincsSeed_get_seedWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(hs, seed, 0, tsk, a);
  OrgBouncycastlePqcCryptoSphincsHorst *ht = new_OrgBouncycastlePqcCryptoSphincsHorst_initPackagePrivate();
  
#line 289
  jint horst_sigbytes = OrgBouncycastlePqcCryptoSphincsHorst_horst_signWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withByteArray_withByteArray_withByteArray_(hs, sm, smOff, root, seed, masks, m_h);
  
#line 291
  smOff += horst_sigbytes;
  
#line 293
  OrgBouncycastlePqcCryptoSphincsWots *w = new_OrgBouncycastlePqcCryptoSphincsWots_initPackagePrivate();
  
#line 295
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_N_LEVELS; i++) {
    
#line 297
    a->level_ = i;
    
#line 299
    OrgBouncycastlePqcCryptoSphincsSeed_get_seedWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(hs, seed, 0, tsk, a);
    
#line 301
    [w wots_signWithOrgBouncycastlePqcCryptoSphincsHashFunctions:hs withByteArray:sm withInt:smOff withByteArray:root withByteArray:seed withByteArray:masks];
    
#line 303
    smOff += OrgBouncycastlePqcCryptoSphincsWots_WOTS_SIGBYTES;
    
#line 305
    OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_compute_authpath_wotsWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withOrgBouncycastlePqcCryptoSphincsTree_leafaddr_withByteArray_withByteArray_withInt_(hs, root, sm, smOff, a, tsk, masks, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT);
    smOff += OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
    
#line 308
    a->subleaf_ = (jint) (a->subtree_ & ((JreLShift32(1, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT)) - 1));
    JreURShiftAssignLong(&a->subtree_, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT);
  }
  
#line 312
  OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_zerobytesWithByteArray_withInt_withInt_(self, tsk, 0, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_SECRETKEYBYTES);
  
#line 314
  return sm;
}


#line 317
- (void)zerobytesWithByteArray:(IOSByteArray *)tsk
                       withInt:(jint)off
                       withInt:(jint)cryptoSecretkeybytes {
  OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_zerobytesWithByteArray_withInt_withInt_(self, tsk, off, cryptoSecretkeybytes);
}


#line 325
- (jboolean)verifyWithOrgBouncycastlePqcCryptoSphincsHashFunctions:(OrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                     withByteArray:(IOSByteArray *)m
                                                     withByteArray:(IOSByteArray *)sm
                                                     withByteArray:(IOSByteArray *)pk {
  
#line 327
  jint i;
  jint smlen = ((IOSByteArray *) nil_chk(sm))->size_;
  jlong leafidx = 0;
  IOSByteArray *wots_pk = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsWots_WOTS_L * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  IOSByteArray *pkhash = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  IOSByteArray *root = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  IOSByteArray *sig = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_BYTES];
  jint sigp;
  IOSByteArray *tpk = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_PUBLICKEYBYTES];
  
#line 337
  if (smlen != OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_BYTES) {
    
#line 339
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"signature wrong size");
  }
  
#line 342
  IOSByteArray *m_h = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MSGHASH_BYTES];
  
#line 344
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_PUBLICKEYBYTES; i++) {
    
#line 346
    *IOSByteArray_GetRef(tpk, i) = IOSByteArray_Get(nil_chk(pk), i);
  }
  {
    
#line 351
    IOSByteArray *R = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES];
    
#line 353
    for (i = 0; i < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES; i++) {
      
#line 355
      *IOSByteArray_GetRef(R, i) = IOSByteArray_Get(sm, i);
    }
    
#line 358
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sm, 0, sig, 0, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_BYTES);
    
#line 360
    id<OrgBouncycastleCryptoDigest> mHash = [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) getMessageHash];
    
#line 363
    [((id<OrgBouncycastleCryptoDigest>) nil_chk(mHash)) updateWithByteArray:R withInt:0 withInt:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES];
    
#line 366
    [mHash updateWithByteArray:tpk withInt:0 withInt:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_PUBLICKEYBYTES];
    
#line 369
    [mHash updateWithByteArray:m withInt:0 withInt:((IOSByteArray *) nil_chk(m))->size_];
    
#line 371
    [mHash doFinalWithByteArray:m_h withInt:0];
  }
  
#line 374
  sigp = 0;
  
#line 376
  sigp += OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES;
  smlen -= OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES;
  
#line 380
  for (i = 0; i < JreIntDiv((OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_TOTALTREE_HEIGHT + 7), 8); i++) {
    
#line 382
    leafidx ^= JreLShift64((jlong) (IOSByteArray_Get(sig, sigp + i) & (jint) 0xff), 8 * i);
  }
  
#line 386
  OrgBouncycastlePqcCryptoSphincsHorst_horst_verifyWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withByteArray_withByteArray_(hs, root, sig, sigp + JreIntDiv((OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_TOTALTREE_HEIGHT + 7), 8),
#line 387
  tpk, m_h);
  
#line 389
  sigp += JreIntDiv((OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_TOTALTREE_HEIGHT + 7), 8);
  smlen -= JreIntDiv((OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_TOTALTREE_HEIGHT + 7), 8);
  
#line 392
  sigp += OrgBouncycastlePqcCryptoSphincsHorst_HORST_SIGBYTES;
  smlen -= OrgBouncycastlePqcCryptoSphincsHorst_HORST_SIGBYTES;
  
#line 395
  OrgBouncycastlePqcCryptoSphincsWots *w = new_OrgBouncycastlePqcCryptoSphincsWots_initPackagePrivate();
  
#line 397
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_N_LEVELS; i++) {
    
#line 399
    [w wots_verifyWithOrgBouncycastlePqcCryptoSphincsHashFunctions:hs withByteArray:wots_pk withByteArray:sig withInt:sigp withByteArray:root withByteArray:tpk];
    
#line 401
    sigp += OrgBouncycastlePqcCryptoSphincsWots_WOTS_SIGBYTES;
    smlen -= OrgBouncycastlePqcCryptoSphincsWots_WOTS_SIGBYTES;
    
#line 404
    OrgBouncycastlePqcCryptoSphincsTree_l_treeWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(hs, pkhash, 0, wots_pk, 0, tpk, 0);
    OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_validate_authpathWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(hs, root, pkhash, (jint) (leafidx & (jint) 0x1f), sig, sigp, tpk, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT);
    JreRShiftAssignLong(&leafidx, 5);
    
#line 408
    sigp += OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
    smlen -= OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
  }
  
#line 412
  jboolean verified = true;
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; i++) {
    
#line 415
    if (IOSByteArray_Get(root, i) != IOSByteArray_Get(tpk, i + OrgBouncycastlePqcCryptoSphincsHorst_N_MASKS * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES)) {
      
#line 417
      verified = false;
    }
  }
  
#line 421
  return verified;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 9, 10, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleCryptoDigest:withOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(init__WithBoolean:withOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(generateSignatureWithByteArray:);
  methods[3].selector = @selector(verifySignatureWithByteArray:withByteArray:);
  methods[4].selector = @selector(validate_authpathWithOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withByteArray:withInt:withByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(compute_authpath_wotsWithOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withByteArray:withInt:withOrgBouncycastlePqcCryptoSphincsTree_leafaddr:withByteArray:withByteArray:withInt:);
  methods[6].selector = @selector(crypto_signWithOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withByteArray:);
  methods[7].selector = @selector(zerobytesWithByteArray:withInt:withInt:);
  methods[8].selector = @selector(verifyWithOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hashFunctions_", "LOrgBouncycastlePqcCryptoSphincsHashFunctions;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keyData_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleCryptoDigest;LOrgBouncycastleCryptoDigest;", "init", "ZLOrgBouncycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[B[B", "validate_authpath", "LOrgBouncycastlePqcCryptoSphincsHashFunctions;[B[BI[BI[BI", "compute_authpath_wots", "LOrgBouncycastlePqcCryptoSphincsHashFunctions;[B[BILOrgBouncycastlePqcCryptoSphincsTree_leafaddr;[B[BI", "crypto_sign", "LOrgBouncycastlePqcCryptoSphincsHashFunctions;[B[B", "zerobytes", "[BII", "verify", "LOrgBouncycastlePqcCryptoSphincsHashFunctions;[B[B[B" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer = { "SPHINCS256Signer", "org.bouncycastle.pqc.crypto.sphincs", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer;
}

@end


#line 34
void OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_initWithOrgBouncycastleCryptoDigest_withOrgBouncycastleCryptoDigest_(OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer *self, id<OrgBouncycastleCryptoDigest> nDigest, id<OrgBouncycastleCryptoDigest> twoNDigest) {
  NSObject_init(self);
  if ([((id<OrgBouncycastleCryptoDigest>) nil_chk(nDigest)) getDigestSize] != 32) {
    
#line 38
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"n-digest needs to produce 32 bytes of output");
  }
  if ([((id<OrgBouncycastleCryptoDigest>) nil_chk(twoNDigest)) getDigestSize] != 64) {
    
#line 42
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"2n-digest needs to produce 64 bytes of output");
  }
  
#line 45
  self->hashFunctions_ = new_OrgBouncycastlePqcCryptoSphincsHashFunctions_initPackagePrivateWithOrgBouncycastleCryptoDigest_withOrgBouncycastleCryptoDigest_(nDigest, twoNDigest);
}


#line 34
OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer *new_OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_initWithOrgBouncycastleCryptoDigest_withOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> nDigest, id<OrgBouncycastleCryptoDigest> twoNDigest) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer, initWithOrgBouncycastleCryptoDigest_withOrgBouncycastleCryptoDigest_, nDigest, twoNDigest)
}


#line 34
OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer *create_OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_initWithOrgBouncycastleCryptoDigest_withOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> nDigest, id<OrgBouncycastleCryptoDigest> twoNDigest) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer, initWithOrgBouncycastleCryptoDigest_withOrgBouncycastleCryptoDigest_, nDigest, twoNDigest)
}


#line 81
void OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_validate_authpathWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(OrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *root, IOSByteArray *leaf, jint leafidx, IOSByteArray *authpath, jint auOff, IOSByteArray *masks, jint height) {
  OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_initialize();
  jint i;
  
#line 83
  jint j;
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:2 * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  
#line 86
  if ((leafidx & 1) != 0) {
    
#line 88
    for (j = 0; j < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; j++) {
      
#line 90
      *IOSByteArray_GetRef(buffer, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + j) = IOSByteArray_Get(nil_chk(leaf), j);
    }
    for (j = 0; j < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; j++) {
      
#line 94
      *IOSByteArray_GetRef(buffer, j) = IOSByteArray_Get(nil_chk(authpath), auOff + j);
    }
  }
  else {
    
#line 99
    for (j = 0; j < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; j++) {
      
#line 101
      *IOSByteArray_GetRef(buffer, j) = IOSByteArray_Get(nil_chk(leaf), j);
    }
    for (j = 0; j < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; j++) {
      
#line 105
      *IOSByteArray_GetRef(buffer, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + j) = IOSByteArray_Get(nil_chk(authpath), auOff + j);
    }
  }
  jint authOff = auOff + OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
  
#line 110
  for (i = 0; i < height - 1; i++) {
    
#line 112
    JreURShiftAssignInt(&leafidx, 1);
    if ((leafidx & 1) != 0) {
      
#line 115
      [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:buffer withInt:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:buffer withInt:0 withByteArray:masks withInt:2 * (OrgBouncycastlePqcCryptoSphincsWots_WOTS_LOG_L + i) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
      for (j = 0; j < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; j++) {
        
#line 118
        *IOSByteArray_GetRef(buffer, j) = IOSByteArray_Get(nil_chk(authpath), authOff + j);
      }
    }
    else {
      
#line 123
      [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:buffer withInt:0 withByteArray:buffer withInt:0 withByteArray:masks withInt:2 * (OrgBouncycastlePqcCryptoSphincsWots_WOTS_LOG_L + i) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
      for (j = 0; j < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; j++) {
        
#line 126
        *IOSByteArray_GetRef(buffer, j + OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES) = IOSByteArray_Get(nil_chk(authpath), authOff + j);
      }
    }
    authOff += OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
  }
  [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:root withInt:0 withByteArray:buffer withInt:0 withByteArray:masks withInt:2 * (OrgBouncycastlePqcCryptoSphincsWots_WOTS_LOG_L + height - 1) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
}


#line 135
void OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_compute_authpath_wotsWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withOrgBouncycastlePqcCryptoSphincsTree_leafaddr_withByteArray_withByteArray_withInt_(OrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *root, IOSByteArray *authpath, jint authOff, OrgBouncycastlePqcCryptoSphincsTree_leafaddr *a, IOSByteArray *sk, IOSByteArray *masks, jint height) {
  OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_initialize();
  jint i;
  
#line 137
  jint idx;
  
#line 137
  jint j;
  OrgBouncycastlePqcCryptoSphincsTree_leafaddr *ta = new_OrgBouncycastlePqcCryptoSphincsTree_leafaddr_initWithOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(a);
  
#line 140
  IOSByteArray *tree = [IOSByteArray newArrayWithLength:2 * (JreLShift32(1, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT)) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  IOSByteArray *seed = [IOSByteArray newArrayWithLength:(JreLShift32(1, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT)) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES];
  IOSByteArray *pk = [IOSByteArray newArrayWithLength:(JreLShift32(1, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT)) * OrgBouncycastlePqcCryptoSphincsWots_WOTS_L * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  
#line 145
  for (ta->subleaf_ = 0; ta->subleaf_ < JreLShift32(1, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT); ta->subleaf_++) {
    
#line 147
    OrgBouncycastlePqcCryptoSphincsSeed_get_seedWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withOrgBouncycastlePqcCryptoSphincsTree_leafaddr_(hs, seed, (jint) (ta->subleaf_ * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES), sk, ta);
  }
  
#line 150
  OrgBouncycastlePqcCryptoSphincsWots *w = new_OrgBouncycastlePqcCryptoSphincsWots_initPackagePrivate();
  
#line 152
  for (ta->subleaf_ = 0; ta->subleaf_ < JreLShift32(1, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT); ta->subleaf_++) {
    
#line 154
    [w wots_pkgenWithOrgBouncycastlePqcCryptoSphincsHashFunctions:hs withByteArray:pk withInt:(jint) (ta->subleaf_ * OrgBouncycastlePqcCryptoSphincsWots_WOTS_L * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES) withByteArray:seed withInt:(jint) (ta->subleaf_ * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES) withByteArray:masks withInt:0];
  }
  
#line 157
  for (ta->subleaf_ = 0; ta->subleaf_ < JreLShift32(1, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT); ta->subleaf_++) {
    
#line 159
    OrgBouncycastlePqcCryptoSphincsTree_l_treeWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(hs, tree, (jint) ((JreLShift32(1, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT)) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + ta->subleaf_ * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES),
#line 160
    pk, (jint) (ta->subleaf_ * OrgBouncycastlePqcCryptoSphincsWots_WOTS_L * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES), masks, 0);
  }
  
#line 163
  jint level = 0;
  
#line 166
  for (i = JreLShift32(1, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT); i > 0; JreURShiftAssignInt(&i, 1)) {
    
#line 168
    for (j = 0; j < i; j += 2) {
      
#line 170
      [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:tree withInt:(JreURShift32(i, 1)) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + (JreURShift32(j, 1)) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:
#line 171
      tree withInt:i * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + j * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:
#line 172
      masks withInt:2 * (OrgBouncycastlePqcCryptoSphincsWots_WOTS_LOG_L + level) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
    }
    
#line 175
    level++;
  }
  
#line 179
  idx = (jint) ((OrgBouncycastlePqcCryptoSphincsTree_leafaddr *) nil_chk(a))->subleaf_;
  
#line 182
  for (i = 0; i < height; i++) {
    
#line 184
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tree, (JreURShift32(JreLShift32(1, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT), i)) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + (JreURShift32(idx, i) ^ 1) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, authpath, authOff + i * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES);
  }
  
#line 188
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tree, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, root, 0, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES);
}


#line 317
void OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer_zerobytesWithByteArray_withInt_withInt_(OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer *self, IOSByteArray *tsk, jint off, jint cryptoSecretkeybytes) {
  
#line 319
  for (jint i = 0; i != cryptoSecretkeybytes; i++) {
    
#line 321
    *IOSByteArray_GetRef(nil_chk(tsk), off + i) = 0;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSphincsSPHINCS256Signer)
