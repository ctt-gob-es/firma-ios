//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/Horst.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/bouncycastle/pqc/crypto/sphincs/HashFunctions.h"
#include "org/bouncycastle/pqc/crypto/sphincs/Horst.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCS256Config.h"
#include "org/bouncycastle/pqc/crypto/sphincs/Seed.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/crypto/sphincs/Horst must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/crypto/sphincs/Horst.java"


#line 3
@implementation OrgBouncycastlePqcCryptoSphincsHorst


#line 3
- (instancetype)initPackagePrivate {
  OrgBouncycastlePqcCryptoSphincsHorst_initPackagePrivate(self);
  return self;
}


#line 13
+ (void)expand_seedWithByteArray:(IOSByteArray *)outseeds
                   withByteArray:(IOSByteArray *)inseed {
  OrgBouncycastlePqcCryptoSphincsHorst_expand_seedWithByteArray_withByteArray_(outseeds, inseed);
}

+ (jint)horst_signWithOrgBouncycastlePqcCryptoSphincsHashFunctions:(OrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                     withByteArray:(IOSByteArray *)sig
                                                           withInt:(jint)sigOff
                                                     withByteArray:(IOSByteArray *)pk
                                                     withByteArray:(IOSByteArray *)seed
                                                     withByteArray:(IOSByteArray *)masks
                                                     withByteArray:(IOSByteArray *)m_hash {
  return OrgBouncycastlePqcCryptoSphincsHorst_horst_signWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withByteArray_withByteArray_withByteArray_(hs, sig, sigOff, pk, seed, masks, m_hash);
}


#line 84
+ (jint)horst_verifyWithOrgBouncycastlePqcCryptoSphincsHashFunctions:(OrgBouncycastlePqcCryptoSphincsHashFunctions *)hs
                                                       withByteArray:(IOSByteArray *)pk
                                                       withByteArray:(IOSByteArray *)sig
                                                             withInt:(jint)sigOff
                                                       withByteArray:(IOSByteArray *)masks
                                                       withByteArray:(IOSByteArray *)m_hash {
  return OrgBouncycastlePqcCryptoSphincsHorst_horst_verifyWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withByteArray_withByteArray_(hs, pk, sig, sigOff, masks, m_hash);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(expand_seedWithByteArray:withByteArray:);
  methods[2].selector = @selector(horst_signWithOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withInt:withByteArray:withByteArray:withByteArray:withByteArray:);
  methods[3].selector = @selector(horst_verifyWithOrgBouncycastlePqcCryptoSphincsHashFunctions:withByteArray:withByteArray:withInt:withByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HORST_LOGT", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT, 0x18, -1, -1, -1, -1 },
    { "HORST_T", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsHorst_HORST_T, 0x18, -1, -1, -1, -1 },
    { "HORST_K", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsHorst_HORST_K, 0x18, -1, -1, -1, -1 },
    { "HORST_SKBYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES, 0x18, -1, -1, -1, -1 },
    { "HORST_SIGBYTES", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsHorst_HORST_SIGBYTES, 0x18, -1, -1, -1, -1 },
    { "N_MASKS", "I", .constantValue.asInt = OrgBouncycastlePqcCryptoSphincsHorst_N_MASKS, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "expand_seed", "[B[B", "horst_sign", "LOrgBouncycastlePqcCryptoSphincsHashFunctions;[BI[B[B[B[B", "horst_verify", "LOrgBouncycastlePqcCryptoSphincsHashFunctions;[B[BI[B[B" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcCryptoSphincsHorst = { "Horst", "org.bouncycastle.pqc.crypto.sphincs", ptrTable, methods, fields, 7, 0x0, 4, 6, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcCryptoSphincsHorst;
}

@end


#line 3
void OrgBouncycastlePqcCryptoSphincsHorst_initPackagePrivate(OrgBouncycastlePqcCryptoSphincsHorst *self) {
  NSObject_init(self);
}


#line 3
OrgBouncycastlePqcCryptoSphincsHorst *new_OrgBouncycastlePqcCryptoSphincsHorst_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcCryptoSphincsHorst, initPackagePrivate)
}


#line 3
OrgBouncycastlePqcCryptoSphincsHorst *create_OrgBouncycastlePqcCryptoSphincsHorst_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcCryptoSphincsHorst, initPackagePrivate)
}


#line 13
void OrgBouncycastlePqcCryptoSphincsHorst_expand_seedWithByteArray_withByteArray_(IOSByteArray *outseeds, IOSByteArray *inseed) {
  OrgBouncycastlePqcCryptoSphincsHorst_initialize();
  OrgBouncycastlePqcCryptoSphincsSeed_prgWithByteArray_withInt_withLong_withByteArray_withInt_(outseeds, 0, OrgBouncycastlePqcCryptoSphincsHorst_HORST_T * OrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES, inseed, 0);
}

jint OrgBouncycastlePqcCryptoSphincsHorst_horst_signWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withByteArray_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *sig, jint sigOff, IOSByteArray *pk, IOSByteArray *seed, IOSByteArray *masks, IOSByteArray *m_hash) {
  OrgBouncycastlePqcCryptoSphincsHorst_initialize();
  
#line 24
  IOSByteArray *sk = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcCryptoSphincsHorst_HORST_T * OrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES];
  jint idx;
  jint i;
  
#line 26
  jint j;
  
#line 26
  jint k;
  jint sigpos = sigOff;
  
#line 29
  IOSByteArray *tree = [IOSByteArray newArrayWithLength:(2 * OrgBouncycastlePqcCryptoSphincsHorst_HORST_T - 1) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  
#line 31
  OrgBouncycastlePqcCryptoSphincsHorst_expand_seedWithByteArray_withByteArray_(sk, seed);
  
#line 36
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsHorst_HORST_T; i++) {
    
#line 38
    [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_n_nWithByteArray:tree withInt:(OrgBouncycastlePqcCryptoSphincsHorst_HORST_T - 1 + i) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:sk withInt:i * OrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES];
  }
  
#line 41
  jlong offset_in;
  
#line 41
  jlong offset_out;
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT; i++) {
    
#line 44
    offset_in = (JreLShift32(1, (OrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - i))) - 1;
    offset_out = (JreLShift32(1, (OrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - i - 1))) - 1;
    for (j = 0; j < (JreLShift32(1, (OrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - i - 1))); j++) {
      
#line 48
      [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:tree withInt:(jint) ((offset_out + j) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES) withByteArray:tree withInt:(jint) ((offset_in + 2 * j) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES) withByteArray:masks withInt:2 * i * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
    }
  }
  
#line 53
  for (j = 63 * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; j < 127 * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; j++) {
    
#line 55
    *IOSByteArray_GetRef(nil_chk(sig), sigpos++) = IOSByteArray_Get(tree, j);
  }
  
#line 59
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsHorst_HORST_K; i++) {
    
#line 61
    idx = (IOSByteArray_Get(nil_chk(m_hash), 2 * i) & (jint) 0xff) + (JreLShift32((IOSByteArray_Get(m_hash, 2 * i + 1) & (jint) 0xff), 8));
    
#line 63
    for (k = 0; k < OrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES; k++)
#line 64
    *IOSByteArray_GetRef(nil_chk(sig), sigpos++) = IOSByteArray_Get(sk, idx * OrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES + k);
    
#line 66
    idx += (OrgBouncycastlePqcCryptoSphincsHorst_HORST_T - 1);
    for (j = 0; j < OrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - 6; j++) {
      
#line 69
      idx = ((idx & 1) != 0) ? idx + 1 : idx - 1;
      for (k = 0; k < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; k++)
#line 71
      *IOSByteArray_GetRef(nil_chk(sig), sigpos++) = IOSByteArray_Get(tree, idx * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + k);
      idx = JreIntDiv((idx - 1), 2);
    }
  }
  
#line 76
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; i++) {
    
#line 78
    *IOSByteArray_GetRef(nil_chk(pk), i) = IOSByteArray_Get(tree, i);
  }
  
#line 81
  return OrgBouncycastlePqcCryptoSphincsHorst_HORST_SIGBYTES;
}


#line 84
jint OrgBouncycastlePqcCryptoSphincsHorst_horst_verifyWithOrgBouncycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withByteArray_withByteArray_(OrgBouncycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *pk, IOSByteArray *sig, jint sigOff, IOSByteArray *masks, IOSByteArray *m_hash) {
  OrgBouncycastlePqcCryptoSphincsHorst_initialize();
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:32 * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  
#line 88
  jint idx;
  jint i;
  
#line 89
  jint j;
  
#line 89
  jint k;
  
#line 91
  jint sigOffset = sigOff + 64 * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
  
#line 93
  for (i = 0; i < OrgBouncycastlePqcCryptoSphincsHorst_HORST_K; i++) {
    
#line 95
    idx = (IOSByteArray_Get(nil_chk(m_hash), 2 * i) & (jint) 0xff) + (JreLShift32((IOSByteArray_Get(m_hash, 2 * i + 1) & (jint) 0xff), 8));
    
#line 97
    if ((idx & 1) == 0) {
      
#line 99
      [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_n_nWithByteArray:buffer withInt:0 withByteArray:sig withInt:sigOffset];
      for (k = 0; k < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; k++)
#line 101
      *IOSByteArray_GetRef(buffer, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + k) = IOSByteArray_Get(nil_chk(sig), sigOffset + OrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES + k);
    }
    else {
      
#line 105
      [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_n_nWithByteArray:buffer withInt:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:sig withInt:sigOffset];
      for (k = 0; k < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; k++)
#line 107
      *IOSByteArray_GetRef(buffer, k) = IOSByteArray_Get(nil_chk(sig), sigOffset + OrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES + k);
    }
    sigOffset += OrgBouncycastlePqcCryptoSphincsHorst_HORST_SKBYTES + OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
    
#line 111
    for (j = 1; j < OrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - 6; j++) {
      
#line 113
      idx = JreURShift32(idx, 1);
      
#line 115
      if ((idx & 1) == 0) {
        
#line 117
        [hs hash_2n_n_maskWithByteArray:buffer withInt:0 withByteArray:buffer withInt:0 withByteArray:masks withInt:2 * (j - 1) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
        for (k = 0; k < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; k++)
#line 119
        *IOSByteArray_GetRef(buffer, OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + k) = IOSByteArray_Get(nil_chk(sig), sigOffset + k);
      }
      else {
        
#line 124
        [hs hash_2n_n_maskWithByteArray:buffer withInt:OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:buffer withInt:0 withByteArray:masks withInt:2 * (j - 1) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
        for (k = 0; k < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; k++)
#line 126
        *IOSByteArray_GetRef(buffer, k) = IOSByteArray_Get(nil_chk(sig), sigOffset + k);
      }
      sigOffset += OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
    }
    
#line 131
    idx = JreURShift32(idx, 1);
    [hs hash_2n_n_maskWithByteArray:buffer withInt:0 withByteArray:buffer withInt:0 withByteArray:masks withInt:2 * (OrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - 7) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
    
#line 134
    for (k = 0; k < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; k++)
#line 135
    if (IOSByteArray_Get(nil_chk(sig), sigOff + idx * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + k) != IOSByteArray_Get(buffer, k)) {
      
#line 137
      for (k = 0; k < OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; k++)
#line 138
      *IOSByteArray_GetRef(nil_chk(pk), k) = 0;
      return -1;
    }
  }
  
#line 144
  for (j = 0; j < 32; j++) {
    
#line 146
    [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:buffer withInt:j * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:sig withInt:sigOff + 2 * j * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:masks withInt:2 * (OrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - 6) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  }
  
#line 150
  for (j = 0; j < 16; j++) {
    
#line 152
    [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:buffer withInt:j * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:buffer withInt:2 * j * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:masks withInt:2 * (OrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - 5) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  }
  
#line 156
  for (j = 0; j < 8; j++) {
    
#line 158
    [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:buffer withInt:j * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:buffer withInt:2 * j * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:masks withInt:2 * (OrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - 4) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  }
  
#line 162
  for (j = 0; j < 4; j++) {
    
#line 164
    [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:buffer withInt:j * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:buffer withInt:2 * j * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:masks withInt:2 * (OrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - 3) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  }
  
#line 168
  for (j = 0; j < 2; j++) {
    
#line 170
    [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:buffer withInt:j * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:buffer withInt:2 * j * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:masks withInt:2 * (OrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - 2) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  }
  
#line 174
  [((OrgBouncycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:pk withInt:0 withByteArray:buffer withInt:0 withByteArray:masks withInt:2 * (OrgBouncycastlePqcCryptoSphincsHorst_HORST_LOGT - 1) * OrgBouncycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  
#line 176
  return 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcCryptoSphincsHorst)
