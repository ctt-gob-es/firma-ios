//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/ntru/polynomial/ModularResultant.java
//

#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/pqc/math/ntru/euclid/BigIntEuclidean.h"
#include "org/bouncycastle/pqc/math/ntru/polynomial/BigIntPolynomial.h"
#include "org/bouncycastle/pqc/math/ntru/polynomial/ModularResultant.h"
#include "org/bouncycastle/pqc/math/ntru/polynomial/Resultant.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/math/ntru/polynomial/ModularResultant must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/ntru/polynomial/ModularResultant.java"


#line 10
@implementation OrgBouncycastlePqcMathNtruPolynomialModularResultant


#line 15
- (instancetype)initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)rho
                                                      withJavaMathBigInteger:(JavaMathBigInteger *)res
                                                      withJavaMathBigInteger:(JavaMathBigInteger *)modulus {
  OrgBouncycastlePqcMathNtruPolynomialModularResultant_initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_withJavaMathBigInteger_(self, rho, res, modulus);
  return self;
}


#line 30
+ (OrgBouncycastlePqcMathNtruPolynomialModularResultant *)combineRhoWithOrgBouncycastlePqcMathNtruPolynomialModularResultant:(OrgBouncycastlePqcMathNtruPolynomialModularResultant *)modRes1
                                                                    withOrgBouncycastlePqcMathNtruPolynomialModularResultant:(OrgBouncycastlePqcMathNtruPolynomialModularResultant *)modRes2 {
  return OrgBouncycastlePqcMathNtruPolynomialModularResultant_combineRhoWithOrgBouncycastlePqcMathNtruPolynomialModularResultant_withOrgBouncycastlePqcMathNtruPolynomialModularResultant_(modRes1, modRes2);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialModularResultant;", 0x8, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[1].selector = @selector(combineRhoWithOrgBouncycastlePqcMathNtruPolynomialModularResultant:withOrgBouncycastlePqcMathNtruPolynomialModularResultant:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "modulus_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial;LJavaMathBigInteger;LJavaMathBigInteger;", "combineRho", "LOrgBouncycastlePqcMathNtruPolynomialModularResultant;LOrgBouncycastlePqcMathNtruPolynomialModularResultant;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcMathNtruPolynomialModularResultant = { "ModularResultant", "org.bouncycastle.pqc.math.ntru.polynomial", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcMathNtruPolynomialModularResultant;
}

@end


#line 15
void OrgBouncycastlePqcMathNtruPolynomialModularResultant_initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastlePqcMathNtruPolynomialModularResultant *self, OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *rho, JavaMathBigInteger *res, JavaMathBigInteger *modulus) {
  OrgBouncycastlePqcMathNtruPolynomialResultant_initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_(self,
#line 17
  rho, res);
  self->modulus_ = modulus;
}


#line 15
OrgBouncycastlePqcMathNtruPolynomialModularResultant *new_OrgBouncycastlePqcMathNtruPolynomialModularResultant_initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *rho, JavaMathBigInteger *res, JavaMathBigInteger *modulus) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathNtruPolynomialModularResultant, initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_withJavaMathBigInteger_, rho, res, modulus)
}


#line 15
OrgBouncycastlePqcMathNtruPolynomialModularResultant *create_OrgBouncycastlePqcMathNtruPolynomialModularResultant_initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *rho, JavaMathBigInteger *res, JavaMathBigInteger *modulus) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathNtruPolynomialModularResultant, initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_withJavaMathBigInteger_, rho, res, modulus)
}


#line 30
OrgBouncycastlePqcMathNtruPolynomialModularResultant *OrgBouncycastlePqcMathNtruPolynomialModularResultant_combineRhoWithOrgBouncycastlePqcMathNtruPolynomialModularResultant_withOrgBouncycastlePqcMathNtruPolynomialModularResultant_(OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes1, OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes2) {
  OrgBouncycastlePqcMathNtruPolynomialModularResultant_initialize();
  JavaMathBigInteger *mod1 = ((OrgBouncycastlePqcMathNtruPolynomialModularResultant *) nil_chk(modRes1))->modulus_;
  JavaMathBigInteger *mod2 = ((OrgBouncycastlePqcMathNtruPolynomialModularResultant *) nil_chk(modRes2))->modulus_;
  JavaMathBigInteger *prod = [((JavaMathBigInteger *) nil_chk(mod1)) multiplyWithJavaMathBigInteger:mod2];
  OrgBouncycastlePqcMathNtruEuclidBigIntEuclidean *er = OrgBouncycastlePqcMathNtruEuclidBigIntEuclidean_calculateWithJavaMathBigInteger_withJavaMathBigInteger_(mod2, mod1);
  
#line 37
  OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *rho1 = (OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) cast_chk([((OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(modRes1->rho_)) java_clone], [OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial class]);
  [((OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(rho1)) multWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(((OrgBouncycastlePqcMathNtruEuclidBigIntEuclidean *) nil_chk(er))->x_)) multiplyWithJavaMathBigInteger:mod2]];
  OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *rho2 = (OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) cast_chk([((OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(modRes2->rho_)) java_clone], [OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial class]);
  [((OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(rho2)) multWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(er->y_)) multiplyWithJavaMathBigInteger:mod1]];
  [rho1 addWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:rho2];
  [rho1 modWithJavaMathBigInteger:prod];
  
#line 44
  return new_OrgBouncycastlePqcMathNtruPolynomialModularResultant_initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_withJavaMathBigInteger_(rho1, nil, prod);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcMathNtruPolynomialModularResultant)
