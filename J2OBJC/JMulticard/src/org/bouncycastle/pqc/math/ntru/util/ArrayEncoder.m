//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/ntru/util/ArrayEncoder.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/pqc/math/ntru/util/ArrayEncoder.h"
#include "org/bouncycastle/pqc/math/ntru/util/Util.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/math/ntru/util/ArrayEncoder must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcMathNtruUtilArrayEncoder ()

+ (jint)getBitWithByteArray:(IOSByteArray *)arr
                    withInt:(jint)bitIndex;

@end

/*!
 @brief Bit string to coefficient conversion table from P1363.1.Also found at 
 {@@link https://stackoverflow.com/questions/1562548/how-to-make-a-message-into-a-polynomial}
  <p>
  Convert each three-bit quantity to two ternary coefficients as follows, and concatenate the resulting
  ternary quantities to obtain [the output].
 </p><p>
  <code>
  {0, 0, 0} -> {0, 0}<br>
  {0, 0, 1} -> {0, 1}<br>
  {0, 1, 0} -> {0, -1}<br>
  {0, 1, 1} -> {1, 0}<br>
  {1, 0, 0} -> {1, 1}<br>
  {1, 0, 1} -> {1, -1}<br>
  {1, 1, 0} -> {-1, 0}<br>
  {1, 1, 1} -> {-1, 1}<br>
  </code>
  </p>
 */
inline IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_get_COEFF1_TABLE(void);
static IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_COEFF1_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcMathNtruUtilArrayEncoder, COEFF1_TABLE, IOSIntArray *)

inline IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_get_COEFF2_TABLE(void);
static IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_COEFF2_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcMathNtruUtilArrayEncoder, COEFF2_TABLE, IOSIntArray *)

/*!
 @brief Coefficient to bit string conversion table from P1363.1.Also found at 
 {@@link https://stackoverflow.com/questions/1562548/how-to-make-a-message-into-a-polynomial}
  <p>
  Convert each set of two ternary coefficients to three bits as follows, and concatenate the resulting bit
  quantities to obtain [the output]: 
 </p><p>
  <code>
  {-1, -1} -> set "fail" to 1 and set bit string to {1, 1, 1}
  {-1, 0} -> {1, 1, 0}<br>
  {-1, 1} -> {1, 1, 1}<br>
  {0, -1} -> {0, 1, 0}<br>
  {0, 0} -> {0, 0, 0}<br>
  {0, 1} -> {0, 0, 1}<br>
  {1, -1} -> {1, 0, 1}<br>
  {1, 0} -> {0, 1, 1}<br>
  {1, 1} -> {1, 0, 0}<br>
  </code>   \ 
 </p>
 */
inline IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_get_BIT1_TABLE(void);
static IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_BIT1_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcMathNtruUtilArrayEncoder, BIT1_TABLE, IOSIntArray *)

inline IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_get_BIT2_TABLE(void);
static IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_BIT2_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcMathNtruUtilArrayEncoder, BIT2_TABLE, IOSIntArray *)

inline IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_get_BIT3_TABLE(void);
static IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_BIT3_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcMathNtruUtilArrayEncoder, BIT3_TABLE, IOSIntArray *)

__attribute__((unused)) static jint OrgBouncycastlePqcMathNtruUtilArrayEncoder_getBitWithByteArray_withInt_(IOSByteArray *arr, jint bitIndex);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/ntru/util/ArrayEncoder.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastlePqcMathNtruUtilArrayEncoder)


#line 12
@implementation OrgBouncycastlePqcMathNtruUtilArrayEncoder

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 12
- (instancetype)init {
  OrgBouncycastlePqcMathNtruUtilArrayEncoder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 68
+ (IOSByteArray *)encodeModQWithIntArray:(IOSIntArray *)a
                                 withInt:(jint)q {
  return OrgBouncycastlePqcMathNtruUtilArrayEncoder_encodeModQWithIntArray_withInt_(a, q);
}


#line 106
+ (IOSIntArray *)decodeModQWithByteArray:(IOSByteArray *)data
                                 withInt:(jint)N
                                 withInt:(jint)q {
  return OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeModQWithByteArray_withInt_withInt_(data, N, q);
}


#line 134
+ (IOSIntArray *)decodeModQWithJavaIoInputStream:(JavaIoInputStream *)is
                                         withInt:(jint)N
                                         withInt:(jint)q {
  return OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeModQWithJavaIoInputStream_withInt_withInt_(is, N, q);
}


#line 153
+ (IOSIntArray *)decodeMod3SvesWithByteArray:(IOSByteArray *)data
                                     withInt:(jint)N {
  return OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeMod3SvesWithByteArray_withInt_(data, N);
}


#line 183
+ (IOSByteArray *)encodeMod3SvesWithIntArray:(IOSIntArray *)arr {
  return OrgBouncycastlePqcMathNtruUtilArrayEncoder_encodeMod3SvesWithIntArray_(arr);
}


#line 222
+ (IOSByteArray *)encodeMod3TightWithIntArray:(IOSIntArray *)intArray {
  return OrgBouncycastlePqcMathNtruUtilArrayEncoder_encodeMod3TightWithIntArray_(intArray);
}


#line 257
+ (IOSIntArray *)decodeMod3TightWithByteArray:(IOSByteArray *)b
                                      withInt:(jint)N {
  return OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeMod3TightWithByteArray_withInt_(b, N);
}


#line 280
+ (IOSIntArray *)decodeMod3TightWithJavaIoInputStream:(JavaIoInputStream *)is
                                              withInt:(jint)N {
  return OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeMod3TightWithJavaIoInputStream_withInt_(is, N);
}


#line 288
+ (jint)getBitWithByteArray:(IOSByteArray *)arr
                    withInt:(jint)bitIndex {
  return OrgBouncycastlePqcMathNtruUtilArrayEncoder_getBitWithByteArray_withInt_(arr, bitIndex);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 2, 4, 5, -1, -1, -1 },
    { NULL, "[I", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 10, 9, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 11, 7, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 11, 12, 5, -1, -1, -1 },
    { NULL, "I", 0xa, 13, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(encodeModQWithIntArray:withInt:);
  methods[2].selector = @selector(decodeModQWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(decodeModQWithJavaIoInputStream:withInt:withInt:);
  methods[4].selector = @selector(decodeMod3SvesWithByteArray:withInt:);
  methods[5].selector = @selector(encodeMod3SvesWithIntArray:);
  methods[6].selector = @selector(encodeMod3TightWithIntArray:);
  methods[7].selector = @selector(decodeMod3TightWithByteArray:withInt:);
  methods[8].selector = @selector(decodeMod3TightWithJavaIoInputStream:withInt:);
  methods[9].selector = @selector(getBitWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COEFF1_TABLE", "[I", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "COEFF2_TABLE", "[I", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "BIT1_TABLE", "[I", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "BIT2_TABLE", "[I", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "BIT3_TABLE", "[I", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
  };
  static const void *ptrTable[] = { "encodeModQ", "[II", "decodeModQ", "[BII", "LJavaIoInputStream;II", "LJavaIoIOException;", "decodeMod3Sves", "[BI", "encodeMod3Sves", "[I", "encodeMod3Tight", "decodeMod3Tight", "LJavaIoInputStream;I", "getBit", &OrgBouncycastlePqcMathNtruUtilArrayEncoder_COEFF1_TABLE, &OrgBouncycastlePqcMathNtruUtilArrayEncoder_COEFF2_TABLE, &OrgBouncycastlePqcMathNtruUtilArrayEncoder_BIT1_TABLE, &OrgBouncycastlePqcMathNtruUtilArrayEncoder_BIT2_TABLE, &OrgBouncycastlePqcMathNtruUtilArrayEncoder_BIT3_TABLE };
  static const J2ObjcClassInfo _OrgBouncycastlePqcMathNtruUtilArrayEncoder = { "ArrayEncoder", "org.bouncycastle.pqc.math.ntru.util", ptrTable, methods, fields, 7, 0x1, 10, 5, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcMathNtruUtilArrayEncoder;
}

+ (void)initialize {
  if (self == [OrgBouncycastlePqcMathNtruUtilArrayEncoder class]) {
    OrgBouncycastlePqcMathNtruUtilArrayEncoder_COEFF1_TABLE = [IOSIntArray newArrayWithInts:(jint[]){
#line 33
      0, 0, 0, 1, 1, 1, -1, -1 } count:8];
      OrgBouncycastlePqcMathNtruUtilArrayEncoder_COEFF2_TABLE = [IOSIntArray newArrayWithInts:(jint[]){
#line 34
        0, 1, -1, 0, 1, -1, 0, 1 } count:8];
        OrgBouncycastlePqcMathNtruUtilArrayEncoder_BIT1_TABLE = [IOSIntArray newArrayWithInts:(jint[]){
#line 55
          1, 1, 1, 0, 0, 0, 1, 0, 1 } count:9];
          OrgBouncycastlePqcMathNtruUtilArrayEncoder_BIT2_TABLE = [IOSIntArray newArrayWithInts:(jint[]){
#line 56
            1, 1, 1, 1, 0, 0, 0, 1, 0 } count:9];
            OrgBouncycastlePqcMathNtruUtilArrayEncoder_BIT3_TABLE = [IOSIntArray newArrayWithInts:(jint[]){
#line 57
              1, 0, 1, 0, 0, 1, 1, 1, 0 } count:9];
              J2OBJC_SET_INITIALIZED(OrgBouncycastlePqcMathNtruUtilArrayEncoder)
            }
          }

@end


#line 12
void OrgBouncycastlePqcMathNtruUtilArrayEncoder_init(OrgBouncycastlePqcMathNtruUtilArrayEncoder *self) {
  NSObject_init(self);
}


#line 12
OrgBouncycastlePqcMathNtruUtilArrayEncoder *new_OrgBouncycastlePqcMathNtruUtilArrayEncoder_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathNtruUtilArrayEncoder, init)
}


#line 12
OrgBouncycastlePqcMathNtruUtilArrayEncoder *create_OrgBouncycastlePqcMathNtruUtilArrayEncoder_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathNtruUtilArrayEncoder, init)
}


#line 68
IOSByteArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_encodeModQWithIntArray_withInt_(IOSIntArray *a, jint q) {
  OrgBouncycastlePqcMathNtruUtilArrayEncoder_initialize();
  jint bitsPerCoeff = 31 - JavaLangInteger_numberOfLeadingZerosWithInt_(q);
  jint numBits = ((IOSIntArray *) nil_chk(a))->size_ * bitsPerCoeff;
  jint numBytes = JreIntDiv((numBits + 7), 8);
  IOSByteArray *data = [IOSByteArray newArrayWithLength:numBytes];
  jint bitIndex = 0;
  jint byteIndex = 0;
  for (jint i = 0; i < a->size_; i++) {
    
#line 78
    for (jint j = 0; j < bitsPerCoeff; j++) {
      
#line 80
      jint currentBit = (JreRShift32(IOSIntArray_Get(a, i), j)) & 1;
      *IOSByteArray_GetRef(data, byteIndex) |= JreLShift32(currentBit, bitIndex);
      if (bitIndex == 7) {
        
#line 84
        bitIndex = 0;
        byteIndex++;
      }
      else {
        
#line 89
        bitIndex++;
      }
    }
  }
  return data;
}


#line 106
IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeModQWithByteArray_withInt_withInt_(IOSByteArray *data, jint N, jint q) {
  OrgBouncycastlePqcMathNtruUtilArrayEncoder_initialize();
  IOSIntArray *coeffs = [IOSIntArray newArrayWithLength:N];
  jint bitsPerCoeff = 31 - JavaLangInteger_numberOfLeadingZerosWithInt_(q);
  jint numBits = N * bitsPerCoeff;
  jint coeffIndex = 0;
  for (jint bitIndex = 0; bitIndex < numBits; bitIndex++) {
    
#line 114
    if (bitIndex > 0 && JreIntMod(bitIndex, bitsPerCoeff) == 0) {
      
#line 116
      coeffIndex++;
    }
    jint bit = OrgBouncycastlePqcMathNtruUtilArrayEncoder_getBitWithByteArray_withInt_(data, bitIndex);
    *IOSIntArray_GetRef(coeffs, coeffIndex) += JreLShift32(bit, (JreIntMod(bitIndex, bitsPerCoeff)));
  }
  return coeffs;
}


#line 134
IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeModQWithJavaIoInputStream_withInt_withInt_(JavaIoInputStream *is, jint N, jint q) {
  OrgBouncycastlePqcMathNtruUtilArrayEncoder_initialize();
  
#line 137
  jint qBits = 31 - JavaLangInteger_numberOfLeadingZerosWithInt_(q);
  jint size = JreIntDiv((N * qBits + 7), 8);
  IOSByteArray *arr = OrgBouncycastlePqcMathNtruUtilUtil_readFullLengthWithJavaIoInputStream_withInt_(is, size);
  return OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeModQWithByteArray_withInt_withInt_(arr, N, q);
}


#line 153
IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeMod3SvesWithByteArray_withInt_(IOSByteArray *data, jint N) {
  OrgBouncycastlePqcMathNtruUtilArrayEncoder_initialize();
  IOSIntArray *coeffs = [IOSIntArray newArrayWithLength:N];
  jint coeffIndex = 0;
  for (jint bitIndex = 0; bitIndex < ((IOSByteArray *) nil_chk(data))->size_ * 8; ) {
    
#line 159
    jint bit1 = OrgBouncycastlePqcMathNtruUtilArrayEncoder_getBitWithByteArray_withInt_(data, bitIndex++);
    jint bit2 = OrgBouncycastlePqcMathNtruUtilArrayEncoder_getBitWithByteArray_withInt_(data, bitIndex++);
    jint bit3 = OrgBouncycastlePqcMathNtruUtilArrayEncoder_getBitWithByteArray_withInt_(data, bitIndex++);
    jint coeffTableIndex = bit1 * 4 + bit2 * 2 + bit3;
    *IOSIntArray_GetRef(coeffs, coeffIndex++) = IOSIntArray_Get(nil_chk(OrgBouncycastlePqcMathNtruUtilArrayEncoder_COEFF1_TABLE), coeffTableIndex);
    *IOSIntArray_GetRef(coeffs, coeffIndex++) = IOSIntArray_Get(nil_chk(OrgBouncycastlePqcMathNtruUtilArrayEncoder_COEFF2_TABLE), coeffTableIndex);
    
#line 166
    if (coeffIndex > N - 2) {
      
#line 168
      break;
    }
  }
  return coeffs;
}


#line 183
IOSByteArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_encodeMod3SvesWithIntArray_(IOSIntArray *arr) {
  OrgBouncycastlePqcMathNtruUtilArrayEncoder_initialize();
  jint numBits = JreIntDiv((((IOSIntArray *) nil_chk(arr))->size_ * 3 + 1), 2);
  jint numBytes = JreIntDiv((numBits + 7), 8);
  IOSByteArray *data = [IOSByteArray newArrayWithLength:numBytes];
  jint bitIndex = 0;
  jint byteIndex = 0;
  for (jint i = 0; i < JreIntDiv(arr->size_, 2) * 2; ) {
    
#line 192
    jint coeff1 = IOSIntArray_Get(arr, i++) + 1;
    jint coeff2 = IOSIntArray_Get(arr, i++) + 1;
    if (coeff1 == 0 && coeff2 == 0) {
      
#line 196
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"Illegal encoding!");
    }
    jint bitTableIndex = coeff1 * 3 + coeff2;
    IOSIntArray *bits = [IOSIntArray newArrayWithInts:(jint[]){ IOSIntArray_Get(nil_chk(OrgBouncycastlePqcMathNtruUtilArrayEncoder_BIT1_TABLE), bitTableIndex), IOSIntArray_Get(nil_chk(OrgBouncycastlePqcMathNtruUtilArrayEncoder_BIT2_TABLE), bitTableIndex), IOSIntArray_Get(nil_chk(OrgBouncycastlePqcMathNtruUtilArrayEncoder_BIT3_TABLE), bitTableIndex) } count:3];
    for (jint j = 0; j < 3; j++) {
      
#line 202
      *IOSByteArray_GetRef(data, byteIndex) |= JreLShift32(IOSIntArray_Get(bits, j), bitIndex);
      if (bitIndex == 7) {
        
#line 205
        bitIndex = 0;
        byteIndex++;
      }
      else {
        
#line 210
        bitIndex++;
      }
    }
  }
  return data;
}

IOSByteArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_encodeMod3TightWithIntArray_(IOSIntArray *intArray) {
  OrgBouncycastlePqcMathNtruUtilArrayEncoder_initialize();
  JavaMathBigInteger *sum = JreLoadStatic(JavaMathBigInteger, ZERO);
  for (jint i = ((IOSIntArray *) nil_chk(intArray))->size_ - 1; i >= 0; i--) {
    
#line 227
    sum = [((JavaMathBigInteger *) nil_chk(sum)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(3)];
    sum = [((JavaMathBigInteger *) nil_chk(sum)) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(IOSIntArray_Get(intArray, i) + 1)];
  }
  
#line 231
  jint size = JreIntDiv(([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(3))) powWithInt:intArray->size_])) bitLength] + 7), 8);
  IOSByteArray *arr = [((JavaMathBigInteger *) nil_chk(sum)) toByteArray];
  
#line 234
  if (((IOSByteArray *) nil_chk(arr))->size_ < size) {
    
#line 237
    IOSByteArray *arr2 = [IOSByteArray newArrayWithLength:size];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(arr, 0, arr2, size - arr->size_, arr->size_);
    return arr2;
  }
  
#line 242
  if (arr->size_ > size) {
    
#line 245
    arr = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(arr, 1, arr->size_);
  }
  return arr;
}


#line 257
IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeMod3TightWithByteArray_withInt_(IOSByteArray *b, jint N) {
  OrgBouncycastlePqcMathNtruUtilArrayEncoder_initialize();
  JavaMathBigInteger *sum = new_JavaMathBigInteger_initWithInt_withByteArray_(1, b);
  IOSIntArray *coeffs = [IOSIntArray newArrayWithLength:N];
  for (jint i = 0; i < N; i++) {
    
#line 263
    *IOSIntArray_GetRef(coeffs, i) = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(sum)) modWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(3)])) intValue] - 1;
    if (IOSIntArray_Get(coeffs, i) > 1) {
      
#line 266
      *IOSIntArray_GetRef(coeffs, i) -= 3;
    }
    sum = [sum divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(3)];
  }
  return coeffs;
}


#line 280
IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeMod3TightWithJavaIoInputStream_withInt_(JavaIoInputStream *is, jint N) {
  OrgBouncycastlePqcMathNtruUtilArrayEncoder_initialize();
  
#line 283
  jint size = JreFpToInt(JavaLangMath_ceilWithDouble_(N * JavaLangMath_logWithDouble_(3) / JavaLangMath_logWithDouble_(2) / 8));
  IOSByteArray *arr = OrgBouncycastlePqcMathNtruUtilUtil_readFullLengthWithJavaIoInputStream_withInt_(is, size);
  return OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeMod3TightWithByteArray_withInt_(arr, N);
}


#line 288
jint OrgBouncycastlePqcMathNtruUtilArrayEncoder_getBitWithByteArray_withInt_(IOSByteArray *arr, jint bitIndex) {
  OrgBouncycastlePqcMathNtruUtilArrayEncoder_initialize();
  jint byteIndex = JreIntDiv(bitIndex, 8);
  jint arrElem = IOSByteArray_Get(nil_chk(arr), byteIndex) & (jint) 0xFF;
  return (JreRShift32(arrElem, (JreIntMod(bitIndex, 8)))) & 1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcMathNtruUtilArrayEncoder)
