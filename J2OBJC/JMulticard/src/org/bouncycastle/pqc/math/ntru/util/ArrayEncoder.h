//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/ntru/util/ArrayEncoder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcMathNtruUtilArrayEncoder")
#ifdef RESTRICT_OrgBouncycastlePqcMathNtruUtilArrayEncoder
#define INCLUDE_ALL_OrgBouncycastlePqcMathNtruUtilArrayEncoder 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcMathNtruUtilArrayEncoder 1
#endif
#undef RESTRICT_OrgBouncycastlePqcMathNtruUtilArrayEncoder

#if !defined (OrgBouncycastlePqcMathNtruUtilArrayEncoder_) && (INCLUDE_ALL_OrgBouncycastlePqcMathNtruUtilArrayEncoder || defined(INCLUDE_OrgBouncycastlePqcMathNtruUtilArrayEncoder))
#define OrgBouncycastlePqcMathNtruUtilArrayEncoder_

@class IOSByteArray;
@class IOSIntArray;
@class JavaIoInputStream;

/*!
 @brief Converts a coefficient array to a compact byte array and vice versa.
 */
@interface OrgBouncycastlePqcMathNtruUtilArrayEncoder : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Decodes a <code>byte</code> array encoded with <code>encodeMod3Sves(int[])</code> back to an <code>int</code> array
  with <code>N</code> coefficients between <code>-1</code> and <code>1</code>.
 <br>
  Ignores any excess bytes.<br>
  See P1363.1 section 9.2.2.
 @param data an encoded ternary polynomial
 @param N number of coefficients
 @return the decoded coefficients
 */
+ (IOSIntArray *)decodeMod3SvesWithByteArray:(IOSByteArray *)data
                                     withInt:(jint)N;

/*!
 @brief Converts a byte array produced by <code>encodeMod3Tight(int[])</code> back to an <code>int</code> array.
 @param b a byte array
 @param N number of coefficients
 @return the decoded array
 */
+ (IOSIntArray *)decodeMod3TightWithByteArray:(IOSByteArray *)b
                                      withInt:(jint)N;

/*!
 @brief Converts data produced by <code>encodeMod3Tight(int[])</code> back to an <code>int</code> array.
 @param is an input stream containing the data to decode
 @param N number of coefficients
 @return the decoded array
 */
+ (IOSIntArray *)decodeMod3TightWithJavaIoInputStream:(JavaIoInputStream *)is
                                              withInt:(jint)N;

/*!
 @brief Decodes a <code>byte</code> array encoded with <code>encodeModQ(int[], int)</code> back to an <code>int</code> array.
 <br>
  <code>N</code> is the number of coefficients.<code>q</code> must be a power of <code>2</code>.<br>
  Ignores any excess bytes.
 @param data an encoded ternary polynomial
 @param N number of coefficients
 @param q
 @return an array containing <code>N</code> coefficients between <code>0</code> and <code>q-1</code>
 */
+ (IOSIntArray *)decodeModQWithByteArray:(IOSByteArray *)data
                                 withInt:(jint)N
                                 withInt:(jint)q;

/*!
 @brief Decodes data encoded with <code>encodeModQ(int[], int)</code> back to an <code>int</code> array.
 <br>
  <code>N</code> is the number of coefficients.<code>q</code> must be a power of <code>2</code>.<br>
  Ignores any excess bytes.
 @param is an encoded ternary polynomial
 @param N number of coefficients
 @param q
 @return the decoded polynomial
 */
+ (IOSIntArray *)decodeModQWithJavaIoInputStream:(JavaIoInputStream *)is
                                         withInt:(jint)N
                                         withInt:(jint)q;

/*!
 @brief Encodes an <code>int</code> array whose elements are between <code>-1</code> and <code>1</code>, to a byte array.
 <code>coeffs[2*i]</code> and <code>coeffs[2*i+1]</code> must not both equal -1 for any integer <code>i</code>,
  so this method is only safe to use with arrays produced by <code>decodeMod3Sves(byte[], int)</code>.<br>
  See P1363.1 section 9.2.3.
 @param arr
 @return the encoded array
 */
+ (IOSByteArray *)encodeMod3SvesWithIntArray:(IOSIntArray *)arr;

/*!
 @brief Encodes an <code>int</code> array whose elements are between <code>-1</code> and <code>1</code>, to a byte array.
 @return the encoded array
 */
+ (IOSByteArray *)encodeMod3TightWithIntArray:(IOSIntArray *)intArray;

/*!
 @brief Encodes an int array whose elements are between 0 and <code>q</code>,
  to a byte array leaving no gaps between bits.
 <br>
  <code>q</code> must be a power of 2.
 @param a the input array
 @param q the modulus
 @return the encoded array
 */
+ (IOSByteArray *)encodeModQWithIntArray:(IOSIntArray *)a
                                 withInt:(jint)q;

@end

J2OBJC_STATIC_INIT(OrgBouncycastlePqcMathNtruUtilArrayEncoder)

FOUNDATION_EXPORT void OrgBouncycastlePqcMathNtruUtilArrayEncoder_init(OrgBouncycastlePqcMathNtruUtilArrayEncoder *self);

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruUtilArrayEncoder *new_OrgBouncycastlePqcMathNtruUtilArrayEncoder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruUtilArrayEncoder *create_OrgBouncycastlePqcMathNtruUtilArrayEncoder_init(void);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_encodeModQWithIntArray_withInt_(IOSIntArray *a, jint q);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeModQWithByteArray_withInt_withInt_(IOSByteArray *data, jint N, jint q);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeModQWithJavaIoInputStream_withInt_withInt_(JavaIoInputStream *is, jint N, jint q);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeMod3SvesWithByteArray_withInt_(IOSByteArray *data, jint N);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_encodeMod3SvesWithIntArray_(IOSIntArray *arr);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_encodeMod3TightWithIntArray_(IOSIntArray *intArray);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeMod3TightWithByteArray_withInt_(IOSByteArray *b, jint N);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeMod3TightWithJavaIoInputStream_withInt_(JavaIoInputStream *is, jint N);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathNtruUtilArrayEncoder)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcMathNtruUtilArrayEncoder")
