//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/ntru/polynomial/BigDecimalPolynomial.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial")
#ifdef RESTRICT_OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial
#define INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial 1
#endif
#undef RESTRICT_OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial

#if !defined (OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial_) && (INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial || defined(INCLUDE_OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial))
#define OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial_

@class IOSObjectArray;
@class OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial;

/*!
 @brief A polynomial with <code>BigDecimal</code> coefficients.
 Some methods (like <code>add</code>) change the polynomial, others (like <code>mult</code>) do
  not but return the result as a new polynomial.
 */
@interface OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial : NSObject {
 @public
  IOSObjectArray *coeffs_;
}

#pragma mark Public

/*!
 @brief Constructs a <code>BigDecimalPolynomial</code> from a <code>BigIntPolynomial</code>.The two polynomials are independent of each other.
 @param p the original polynomial
 */
- (instancetype)initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)p;

/*!
 @brief Adds another polynomial which can have a different number of coefficients.
 @param b another polynomial
 */
- (void)addWithOrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial:(OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *)b;

/*!
 @brief Makes a copy of the polynomial that is independent of the original.
 */
- (id)java_clone;

- (IOSObjectArray *)getCoeffs;

/*!
 @brief Divides all coefficients by 2.
 */
- (void)halve;

/*!
 @brief Multiplies the polynomial by another, taking the indices mod N.Does not
  change this polynomial but returns the result as a new polynomial.
 @param poly2 the polynomial to multiply by
 @return a new polynomial
 */
- (OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *)multWithOrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial:(OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *)poly2;

/*!
 @brief Multiplies the polynomial by another.Does not change this polynomial
  but returns the result as a new polynomial.
 @param poly2 the polynomial to multiply by
 @return a new polynomial
 */
- (OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *)multWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)poly2;

/*!
 @brief Rounds all coefficients to the nearest integer.
 @return a new polynomial with <code>BigInteger</code> coefficients
 */
- (OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)round;

#pragma mark Package-Private

/*!
 @brief Constructs a new polynomial with a given set of coefficients.
 @param coeffs the coefficients
 */
- (instancetype)initWithJavaMathBigDecimalArray:(IOSObjectArray *)coeffs;

/*!
 @brief Constructs a new polynomial with <code>N</code> coefficients initialized to 0.
 @param N the number of coefficients
 */
- (instancetype)initWithInt:(jint)N;

/*!
 @brief Subtracts another polynomial which can have a different number of coefficients.
 @param b
 */
- (void)subWithOrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial:(OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *)b;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial)

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial, coeffs_, IOSObjectArray *)

FOUNDATION_EXPORT void OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial_initWithInt_(OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *self, jint N);

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *new_OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial_initWithInt_(jint N) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *create_OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial_initWithInt_(jint N);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial_initWithJavaMathBigDecimalArray_(OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *self, IOSObjectArray *coeffs);

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *new_OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial_initWithJavaMathBigDecimalArray_(IOSObjectArray *coeffs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *create_OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial_initWithJavaMathBigDecimalArray_(IOSObjectArray *coeffs);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_(OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *self, OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *p);

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *new_OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *p) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *create_OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *p);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial")
