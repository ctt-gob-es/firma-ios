//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/org/bouncycastle/pqc/math/ntru/util/Util.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcMathNtruUtilUtil")
#ifdef RESTRICT_OrgBouncycastlePqcMathNtruUtilUtil
#define INCLUDE_ALL_OrgBouncycastlePqcMathNtruUtilUtil 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcMathNtruUtilUtil 1
#endif
#undef RESTRICT_OrgBouncycastlePqcMathNtruUtilUtil

#if !defined (OrgBouncycastlePqcMathNtruUtilUtil_) && (INCLUDE_ALL_OrgBouncycastlePqcMathNtruUtilUtil || defined(INCLUDE_OrgBouncycastlePqcMathNtruUtilUtil))
#define OrgBouncycastlePqcMathNtruUtilUtil_

@class IOSByteArray;
@class IOSIntArray;
@class JavaIoInputStream;
@class JavaSecuritySecureRandom;
@protocol OrgBouncycastlePqcMathNtruPolynomialTernaryPolynomial;

@interface OrgBouncycastlePqcMathNtruUtilUtil : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Generates a "sparse" or "dense" polynomial containing numOnes ints equal to 1,
  numNegOnes int equal to -1, and the rest equal to 0.
 @param N
 @param numOnes
 @param numNegOnes
 @param sparse whether to create a <code>SparseTernaryPolynomial</code>  or <code>DenseTernaryPolynomial</code>
 @return a ternary polynomial
 */
+ (id<OrgBouncycastlePqcMathNtruPolynomialTernaryPolynomial>)generateRandomTernaryWithInt:(jint)N
                                                                                  withInt:(jint)numOnes
                                                                                  withInt:(jint)numNegOnes
                                                                              withBoolean:(jboolean)sparse
                                                             withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

/*!
 @brief Generates an array containing numOnes ints equal to 1,
  numNegOnes int equal to -1, and the rest equal to 0.
 @param N
 @param numOnes
 @param numNegOnes
 @return an array of integers
 */
+ (IOSIntArray *)generateRandomTernaryWithInt:(jint)N
                                      withInt:(jint)numOnes
                                      withInt:(jint)numNegOnes
                 withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

/*!
 @brief Calculates the inverse of n mod modulus
 */
+ (jint)invertWithInt:(jint)n
              withInt:(jint)modulus;

/*!
 @brief Takes an educated guess as to whether 64 bits are supported by the JVM.
 @return <code>true</code> if 64-bit support detected, <code>false</code> otherwise
 */
+ (jboolean)is64BitJVM;

/*!
 @brief Calculates a^b mod modulus
 */
+ (jint)powWithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)modulus;

/*!
 @brief Calculates a^b mod modulus
 */
+ (jlong)powWithLong:(jlong)a
             withInt:(jint)b
            withLong:(jlong)modulus;

/*!
 @brief Reads a given number of bytes from an <code>InputStream</code>.
 If there are not enough bytes in the stream, an <code>IOException</code>
  is thrown.
 @param is
 @param length
 @return an array of length <code>length</code>
 @throw IOException
 */
+ (IOSByteArray *)readFullLengthWithJavaIoInputStream:(JavaIoInputStream *)is
                                              withInt:(jint)length;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcMathNtruUtilUtil)

FOUNDATION_EXPORT void OrgBouncycastlePqcMathNtruUtilUtil_init(OrgBouncycastlePqcMathNtruUtilUtil *self);

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruUtilUtil *new_OrgBouncycastlePqcMathNtruUtilUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruUtilUtil *create_OrgBouncycastlePqcMathNtruUtilUtil_init(void);

FOUNDATION_EXPORT jint OrgBouncycastlePqcMathNtruUtilUtil_invertWithInt_withInt_(jint n, jint modulus);

FOUNDATION_EXPORT jint OrgBouncycastlePqcMathNtruUtilUtil_powWithInt_withInt_withInt_(jint a, jint b, jint modulus);

FOUNDATION_EXPORT jlong OrgBouncycastlePqcMathNtruUtilUtil_powWithLong_withInt_withLong_(jlong a, jint b, jlong modulus);

FOUNDATION_EXPORT id<OrgBouncycastlePqcMathNtruPolynomialTernaryPolynomial> OrgBouncycastlePqcMathNtruUtilUtil_generateRandomTernaryWithInt_withInt_withInt_withBoolean_withJavaSecuritySecureRandom_(jint N, jint numOnes, jint numNegOnes, jboolean sparse, JavaSecuritySecureRandom *random);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastlePqcMathNtruUtilUtil_generateRandomTernaryWithInt_withInt_withInt_withJavaSecuritySecureRandom_(jint N, jint numOnes, jint numNegOnes, JavaSecuritySecureRandom *random);

FOUNDATION_EXPORT jboolean OrgBouncycastlePqcMathNtruUtilUtil_is64BitJVM(void);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastlePqcMathNtruUtilUtil_readFullLengthWithJavaIoInputStream_withInt_(JavaIoInputStream *is, jint length);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathNtruUtilUtil)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcMathNtruUtilUtil")
