//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "java/util/Arrays.h"
#include "org/bouncycastle/pqc/math/ntru/polynomial/BigIntPolynomial.h"
#include "org/bouncycastle/pqc/math/ntru/polynomial/IntegerPolynomial.h"
#include "org/bouncycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial.h"
#include "org/bouncycastle/pqc/math/ntru/util/ArrayEncoder.h"
#include "org/bouncycastle/pqc/math/ntru/util/Util.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial () {
 @public
  jint N_;
  IOSIntArray *ones_;
  IOSIntArray *negOnes_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial, ones_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial, negOnes_, IOSIntArray *)

/*!
 @brief Number of bits to use for each coefficient.Determines the upper bound for <code>N</code>.
 */
inline jint OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_get_BITS_PER_INDEX(void);
#define OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_BITS_PER_INDEX 11
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial, BITS_PER_INDEX, jint)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial.java"


#line 15
@implementation OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial


#line 34
- (instancetype)initWithInt:(jint)N
               withIntArray:(IOSIntArray *)ones
               withIntArray:(IOSIntArray *)negOnes {
  OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithInt_withIntArray_withIntArray_(self, N, ones, negOnes);
  return self;
}


#line 47
- (instancetype)initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)intPoly {
  OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(self, intPoly);
  return self;
}


#line 57
- (instancetype)initWithIntArray:(IOSIntArray *)coeffs {
  OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(self, coeffs);
  return self;
}


#line 95
+ (OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *)fromBinaryWithJavaIoInputStream:(JavaIoInputStream *)is
                                                                                         withInt:(jint)N
                                                                                         withInt:(jint)numOnes
                                                                                         withInt:(jint)numNegOnes {
  return OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_fromBinaryWithJavaIoInputStream_withInt_withInt_withInt_(is, N, numOnes, numNegOnes);
}


#line 120
+ (OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *)generateRandomWithInt:(jint)N
                                                                               withInt:(jint)numOnes
                                                                               withInt:(jint)numNegOnes
                                                          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_generateRandomWithInt_withInt_withInt_withJavaSecuritySecureRandom_(N, numOnes, numNegOnes, random);
}


#line 126
- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2 {
  
#line 129
  IOSIntArray *b = ((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(poly2))->coeffs_;
  if (((IOSIntArray *) nil_chk(b))->size_ != N_) {
    
#line 132
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Number of coefficients must be the same");
  }
  
#line 135
  IOSIntArray *c = [IOSIntArray newArrayWithLength:N_];
  {
    IOSIntArray *a__ =
#line 136
    ones_;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint i = *b__++;
      
#line 137
      jint j = N_ - 1 - i;
      for (jint k = N_ - 1; k >= 0; k--) {
        
#line 140
        *IOSIntArray_GetRef(c, k) += IOSIntArray_Get(b, j);
        j--;
        if (j < 0) {
          
#line 144
          j = N_ - 1;
        }
      }
    }
  }
  {
    IOSIntArray *a__ =
#line 149
    negOnes_;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint i = *b__++;
      
#line 150
      jint j = N_ - 1 - i;
      for (jint k = N_ - 1; k >= 0; k--) {
        
#line 153
        *IOSIntArray_GetRef(c, k) -= IOSIntArray_Get(b, j);
        j--;
        if (j < 0) {
          
#line 157
          j = N_ - 1;
        }
      }
    }
  }
  return new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(c);
}


#line 165
- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2
                                                                                                                 withInt:(jint)modulus {
  
#line 168
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *c = [self multWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:poly2];
  [((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(c)) modWithInt:modulus];
  return c;
}


#line 173
- (OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)multWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)poly2 {
  
#line 176
  IOSObjectArray *b = ((OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(poly2))->coeffs_;
  if (((IOSObjectArray *) nil_chk(b))->size_ != N_) {
    
#line 179
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Number of coefficients must be the same");
  }
  
#line 182
  IOSObjectArray *c = [IOSObjectArray newArrayWithLength:N_ type:JavaMathBigInteger_class_()];
  for (jint i = 0; i < N_; i++) {
    
#line 185
    (void) IOSObjectArray_Set(c, i, JreLoadStatic(JavaMathBigInteger, ZERO));
  }
  {
    IOSIntArray *a__ = ones_;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint i = *b__++;
      
#line 189
      jint j = N_ - 1 - i;
      for (jint k = N_ - 1; k >= 0; k--) {
        
#line 192
        (void) IOSObjectArray_Set(c, k, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(c, k))) addWithJavaMathBigInteger:IOSObjectArray_Get(b, j)]);
        j--;
        if (j < 0) {
          
#line 196
          j = N_ - 1;
        }
      }
    }
  }
  {
    IOSIntArray *a__ =
#line 201
    negOnes_;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint i = *b__++;
      
#line 202
      jint j = N_ - 1 - i;
      for (jint k = N_ - 1; k >= 0; k--) {
        
#line 205
        (void) IOSObjectArray_Set(c, k, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(c, k))) subtractWithJavaMathBigInteger:IOSObjectArray_Get(b, j)]);
        j--;
        if (j < 0) {
          
#line 209
          j = N_ - 1;
        }
      }
    }
  }
  return new_OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithJavaMathBigIntegerArray_(c);
}


#line 217
- (IOSIntArray *)getOnes {
  
#line 220
  return ones_;
}

- (IOSIntArray *)getNegOnes {
  
#line 226
  return negOnes_;
}


#line 234
- (IOSByteArray *)toBinary {
  
#line 236
  jint maxIndex = JreLShift32(1, OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_BITS_PER_INDEX);
  IOSByteArray *bin1 = OrgBouncycastlePqcMathNtruUtilArrayEncoder_encodeModQWithIntArray_withInt_(ones_, maxIndex);
  IOSByteArray *bin2 = OrgBouncycastlePqcMathNtruUtilArrayEncoder_encodeModQWithIntArray_withInt_(negOnes_, maxIndex);
  
#line 240
  IOSByteArray *bin = OrgBouncycastleUtilArrays_copyOfWithByteArray_withInt_(bin1, ((IOSByteArray *) nil_chk(bin1))->size_ + ((IOSByteArray *) nil_chk(bin2))->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bin2, 0, bin, bin1->size_, bin2->size_);
  return bin;
}


#line 245
- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)toIntegerPolynomial {
  
#line 248
  IOSIntArray *coeffs = [IOSIntArray newArrayWithLength:N_];
  {
    IOSIntArray *a__ =
#line 249
    ones_;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint one = *b__++;
      
#line 250
      jint i = one;
      *IOSIntArray_GetRef(coeffs, i) = 1;
    }
  }
  {
    IOSIntArray *a__ =
#line 253
    negOnes_;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint negOne = *b__++;
      
#line 254
      jint i = negOne;
      *IOSIntArray_GetRef(coeffs, i) = -1;
    }
  }
  
#line 257
  return new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(coeffs);
}


#line 260
- (jint)size {
  
#line 263
  return N_;
}

- (void)clear {
  
#line 269
  JavaUtilArrays_fillWithIntArray_withInt_(ones_, 0);
  JavaUtilArrays_fillWithIntArray_withInt_(negOnes_, 0);
}

- (NSUInteger)hash {
  
#line 276
  jint prime = 31;
  jint result = 1;
  result = prime * result + N_;
  result = prime * result + OrgBouncycastleUtilArrays_hashCodeWithIntArray_(negOnes_);
  return prime * result + OrgBouncycastleUtilArrays_hashCodeWithIntArray_(ones_);
}

- (jboolean)isEqual:(id)obj {
  
#line 286
  if (JreObjectEqualsEquals(self, obj)) {
    
#line 288
    return true;
  }
  if ((obj == nil) || (!JreObjectEqualsEquals([self java_getClass], [nil_chk(obj) java_getClass]))) {
    
#line 292
    return false;
  }
  OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *other = (OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *) cast_chk(obj, [OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial class]);
  if (N_ != ((OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *) nil_chk(other))->N_) {
    
#line 297
    return false;
  }
  if (!OrgBouncycastleUtilArrays_areEqualWithIntArray_withIntArray_(negOnes_, other->negOnes_)) {
    
#line 301
    return false;
  }
  if (!OrgBouncycastleUtilArrays_areEqualWithIntArray_withIntArray_(ones_, other->ones_)) {
    
#line 305
    return false;
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial;", 0x9, 3, 4, 5, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial;", 0x1, 8, 10, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withIntArray:withIntArray:);
  methods[1].selector = @selector(initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:);
  methods[2].selector = @selector(initWithIntArray:);
  methods[3].selector = @selector(fromBinaryWithJavaIoInputStream:withInt:withInt:withInt:);
  methods[4].selector = @selector(generateRandomWithInt:withInt:withInt:withJavaSecuritySecureRandom:);
  methods[5].selector = @selector(multWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:);
  methods[6].selector = @selector(multWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:withInt:);
  methods[7].selector = @selector(multWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:);
  methods[8].selector = @selector(getOnes);
  methods[9].selector = @selector(getNegOnes);
  methods[10].selector = @selector(toBinary);
  methods[11].selector = @selector(toIntegerPolynomial);
  methods[12].selector = @selector(size);
  methods[13].selector = @selector(clear);
  methods[14].selector = @selector(hash);
  methods[15].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BITS_PER_INDEX", "I", .constantValue.asInt = OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_BITS_PER_INDEX, 0x1a, -1, -1, -1, -1 },
    { "N_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ones_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "negOnes_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I[I[I", "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", "[I", "fromBinary", "LJavaIoInputStream;III", "LJavaIoIOException;", "generateRandom", "IIILJavaSecuritySecureRandom;", "mult", "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;I", "LOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial;", "hashCode", "equals", "LNSObject;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial = { "SparseTernaryPolynomial", "org.bouncycastle.pqc.math.ntru.polynomial", ptrTable, methods, fields, 7, 0x1, 16, 4, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial;
}

@end


#line 34
void OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithInt_withIntArray_withIntArray_(OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *self, jint N, IOSIntArray *ones, IOSIntArray *negOnes) {
  NSObject_init(self);
  self->N_ = N;
  self->ones_ = ones;
  self->negOnes_ = negOnes;
}


#line 34
OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *new_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithInt_withIntArray_withIntArray_(jint N, IOSIntArray *ones, IOSIntArray *negOnes) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial, initWithInt_withIntArray_withIntArray_, N, ones, negOnes)
}


#line 34
OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *create_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithInt_withIntArray_withIntArray_(jint N, IOSIntArray *ones, IOSIntArray *negOnes) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial, initWithInt_withIntArray_withIntArray_, N, ones, negOnes)
}


#line 47
void OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *self, OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly) {
  OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(self,
#line 49
  ((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(intPoly))->coeffs_);
}


#line 47
OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *new_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial, initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_, intPoly)
}


#line 47
OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *create_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial, initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_, intPoly)
}


#line 57
void OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *self, IOSIntArray *coeffs) {
  NSObject_init(self);
  self->N_ = ((IOSIntArray *) nil_chk(coeffs))->size_;
  self->ones_ = [IOSIntArray newArrayWithLength:self->N_];
  self->negOnes_ = [IOSIntArray newArrayWithLength:self->N_];
  jint onesIdx = 0;
  jint negOnesIdx = 0;
  for (jint i = 0; i < self->N_; i++) {
    
#line 66
    jint c = IOSIntArray_Get(coeffs, i);
    switch (c) {
      
#line 69
      case 1:
      *IOSIntArray_GetRef(self->ones_, onesIdx++) = i;
      break;
      case -1:
      *IOSIntArray_GetRef(self->negOnes_, negOnesIdx++) = i;
      break;
      case 0:
      break;
      default:
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"Illegal value: ", c, @", must be one of {-1, 0, 1}"));
    }
  }
  self->ones_ = OrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(self->ones_, onesIdx);
  self->negOnes_ = OrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(self->negOnes_, negOnesIdx);
}


#line 57
OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *new_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(IOSIntArray *coeffs) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial, initWithIntArray_, coeffs)
}


#line 57
OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *create_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(IOSIntArray *coeffs) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial, initWithIntArray_, coeffs)
}


#line 95
OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_fromBinaryWithJavaIoInputStream_withInt_withInt_withInt_(JavaIoInputStream *is, jint N, jint numOnes, jint numNegOnes) {
  OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initialize();
  
#line 98
  jint maxIndex = JreLShift32(1, OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_BITS_PER_INDEX);
  jint bitsPerIndex = 32 - JavaLangInteger_numberOfLeadingZerosWithInt_(maxIndex - 1);
  
#line 101
  jint data1Len = JreIntDiv((numOnes * bitsPerIndex + 7), 8);
  IOSByteArray *data1 = OrgBouncycastlePqcMathNtruUtilUtil_readFullLengthWithJavaIoInputStream_withInt_(is, data1Len);
  IOSIntArray *ones = OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeModQWithByteArray_withInt_withInt_(data1, numOnes, maxIndex);
  
#line 105
  jint data2Len = JreIntDiv((numNegOnes * bitsPerIndex + 7), 8);
  IOSByteArray *data2 = OrgBouncycastlePqcMathNtruUtilUtil_readFullLengthWithJavaIoInputStream_withInt_(is, data2Len);
  IOSIntArray *negOnes = OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeModQWithByteArray_withInt_withInt_(data2, numNegOnes, maxIndex);
  
#line 109
  return new_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithInt_withIntArray_withIntArray_(N, ones, negOnes);
}


#line 120
OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_generateRandomWithInt_withInt_withInt_withJavaSecuritySecureRandom_(jint N, jint numOnes, jint numNegOnes, JavaSecuritySecureRandom *random) {
  OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initialize();
  IOSIntArray *coeffs = OrgBouncycastlePqcMathNtruUtilUtil_generateRandomTernaryWithInt_withInt_withInt_withJavaSecuritySecureRandom_(N, numOnes, numNegOnes, random);
  return new_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(coeffs);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial)
