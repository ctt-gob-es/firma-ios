//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial")
#ifdef RESTRICT_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial
#define INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial 1
#endif
#undef RESTRICT_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial

#if !defined (OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_) && (INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial || defined(INCLUDE_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial))
#define OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_

#define RESTRICT_OrgBouncycastlePqcMathNtruPolynomialTernaryPolynomial 1
#define INCLUDE_OrgBouncycastlePqcMathNtruPolynomialTernaryPolynomial 1
#include "org/bouncycastle/pqc/math/ntru/polynomial/TernaryPolynomial.h"

@class IOSByteArray;
@class IOSIntArray;
@class JavaIoInputStream;
@class JavaSecuritySecureRandom;
@class OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial;
@class OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;

/*!
 @brief A <code>TernaryPolynomial</code> with a "low" number of nonzero coefficients.
 */
@interface OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial : NSObject < OrgBouncycastlePqcMathNtruPolynomialTernaryPolynomial >

#pragma mark Public

/*!
 @brief Constructs a new <code>SparseTernaryPolynomial</code> with a given set of coefficients.
 @param coeffs the coefficients
 */
- (instancetype)initWithIntArray:(IOSIntArray *)coeffs;

/*!
 @brief Constructs a <code>DenseTernaryPolynomial</code> from a <code>IntegerPolynomial</code>.The two polynomials are
  independent of each other.
 @param intPoly the original polynomial
 */
- (instancetype)initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)intPoly;

- (void)clear;

- (jboolean)isEqual:(id)obj;

/*!
 @brief Decodes a byte array encoded with <code>toBinary()</code> to a ploynomial.
 @param is an input stream containing an encoded polynomial
 @param N number of coefficients including zeros
 @param numOnes number of coefficients equal to 1
 @param numNegOnes number of coefficients equal to -1
 @return the decoded polynomial
 @throw IOException
 */
+ (OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *)fromBinaryWithJavaIoInputStream:(JavaIoInputStream *)is
                                                                                         withInt:(jint)N
                                                                                         withInt:(jint)numOnes
                                                                                         withInt:(jint)numNegOnes;

/*!
 @brief Generates a random polynomial with <code>numOnes</code> coefficients equal to 1, 
 <code>numNegOnes</code> coefficients equal to -1, and the rest equal to 0.
 @param N number of coefficients
 @param numOnes number of 1's
 @param numNegOnes number of -1's
 */
+ (OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *)generateRandomWithInt:(jint)N
                                                                               withInt:(jint)numOnes
                                                                               withInt:(jint)numNegOnes
                                                          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (IOSIntArray *)getNegOnes;

- (IOSIntArray *)getOnes;

- (NSUInteger)hash;

- (OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)multWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)poly2;

- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2;

- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2
                                                                                                                 withInt:(jint)modulus;

- (jint)size;

/*!
 @brief Encodes the polynomial to a byte array writing <code>BITS_PER_INDEX</code> bits for each coefficient.
 @return the encoded polynomial
 */
- (IOSByteArray *)toBinary;

- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)toIntegerPolynomial;

#pragma mark Package-Private

/*!
 @brief Constructs a new polynomial.
 @param N total number of coefficients including zeros
 @param ones indices of coefficients equal to 1
 @param negOnes indices of coefficients equal to -1
 */
- (instancetype)initWithInt:(jint)N
               withIntArray:(IOSIntArray *)ones
               withIntArray:(IOSIntArray *)negOnes;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial)

FOUNDATION_EXPORT void OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithInt_withIntArray_withIntArray_(OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *self, jint N, IOSIntArray *ones, IOSIntArray *negOnes);

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *new_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithInt_withIntArray_withIntArray_(jint N, IOSIntArray *ones, IOSIntArray *negOnes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *create_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithInt_withIntArray_withIntArray_(jint N, IOSIntArray *ones, IOSIntArray *negOnes);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *self, OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly);

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *new_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *create_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *self, IOSIntArray *coeffs);

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *new_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(IOSIntArray *coeffs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *create_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(IOSIntArray *coeffs);

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_fromBinaryWithJavaIoInputStream_withInt_withInt_withInt_(JavaIoInputStream *is, jint N, jint numOnes, jint numNegOnes);

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial *OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial_generateRandomWithInt_withInt_withInt_withJavaSecuritySecureRandom_(jint N, jint numOnes, jint numNegOnes, JavaSecuritySecureRandom *random);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialSparseTernaryPolynomial")
