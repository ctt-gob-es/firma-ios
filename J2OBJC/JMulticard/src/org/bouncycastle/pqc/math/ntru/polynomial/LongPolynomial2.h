//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/ntru/polynomial/LongPolynomial2.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2")
#ifdef RESTRICT_OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2
#define INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2 1
#endif
#undef RESTRICT_OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2

#if !defined (OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2_) && (INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2 || defined(INCLUDE_OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2))
#define OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2_

@class OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;

/*!
 @brief A polynomial class that combines two coefficients into one <code>long</code> value for
  faster multiplication in 64 bit environments.
 <br>
  Coefficients can be between 0 and 2047 and are stored in pairs in the bits 0..10 and 24..34 of a <code>long</code> number.
 */
@interface OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2 : NSObject

#pragma mark Public

/*!
 @brief Constructs a <code>LongPolynomial2</code> from a <code>IntegerPolynomial</code>.The two polynomials are independent of each other.
 @param p the original polynomial. Coefficients must be between 0 and 2047.
 */
- (instancetype)initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)p;

- (id)java_clone;

- (jboolean)isEqual:(id)obj;

/*!
 @brief Multiplies the polynomial with another, taking the indices mod N and the values mod 2048.
 */
- (OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2 *)multWithOrgBouncycastlePqcMathNtruPolynomialLongPolynomial2:(OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2 *)poly2;

/*!
 @brief Multiplies this polynomial by 2 and applies an AND mask to the upper and
  lower halves of each coefficients.
 @param mask a bit mask less than 2048 to apply to each 11-bit coefficient
 */
- (void)mult2AndWithInt:(jint)mask;

/*!
 @brief Subtracts another polynomial which must have the same number of coefficients,
  and applies an AND mask to the upper and lower halves of each coefficients.
 @param b another polynomial
 @param mask a bit mask less than 2048 to apply to each 11-bit coefficient
 */
- (void)subAndWithOrgBouncycastlePqcMathNtruPolynomialLongPolynomial2:(OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2 *)b
                                                              withInt:(jint)mask;

- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)toIntegerPolynomial;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2)

FOUNDATION_EXPORT void OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2 *self, OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *p);

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2 *new_OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *p) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2 *create_OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *p);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2")
