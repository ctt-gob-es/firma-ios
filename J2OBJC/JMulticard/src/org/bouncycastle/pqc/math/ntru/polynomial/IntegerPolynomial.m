//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/org/bouncycastle/pqc/math/ntru/polynomial/IntegerPolynomial.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/Runtime.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "org/bouncycastle/pqc/math/ntru/euclid/BigIntEuclidean.h"
#include "org/bouncycastle/pqc/math/ntru/polynomial/BigIntPolynomial.h"
#include "org/bouncycastle/pqc/math/ntru/polynomial/Constants.h"
#include "org/bouncycastle/pqc/math/ntru/polynomial/IntegerPolynomial.h"
#include "org/bouncycastle/pqc/math/ntru/polynomial/LongPolynomial2.h"
#include "org/bouncycastle/pqc/math/ntru/polynomial/ModularResultant.h"
#include "org/bouncycastle/pqc/math/ntru/polynomial/Resultant.h"
#include "org/bouncycastle/pqc/math/ntru/util/ArrayEncoder.h"
#include "org/bouncycastle/pqc/math/ntru/util/Util.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/math/ntru/polynomial/IntegerPolynomial must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial ()

/*!
 @brief Karazuba multiplication
 */
- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multRecursiveWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2;

/*!
 @brief Computes the inverse mod q from the inverse mod 2
 @param Fq
 @param q
 @return The inverse of this polynomial mod q
 */
- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)mod2ToModqWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)Fq
                                                                                                                       withInt:(jint)q;

/*!
 @brief Computes <code>this-b*c*(x^k) mod p</code> and stores the result in this polynomial.
 <br>
  See steps 4a,4b in EESS algorithm 2.2.7.1.
 @param b
 @param c
 @param k
 @param p
 */
- (void)multShiftSubWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)b
                                                                      withInt:(jint)c
                                                                      withInt:(jint)k
                                                                      withInt:(jint)p;

/*!
 @brief Adds the squares of all coefficients.
 @return the sum of squares
 */
- (JavaMathBigInteger *)squareSum;

/*!
 @brief Multiplies each coefficient by a 2 and applies a modulus.Does not return a new polynomial but modifies this polynomial.
 @param modulus a modulus
 */
- (void)mult2WithInt:(jint)modulus;

- (void)sortWithIntArray:(IOSIntArray *)ints;

/*!
 @brief Tests if <code>p(x) = 0</code>.
 @return true iff all coefficients are zeros
 */
- (jboolean)equalsZero;

/*!
 @brief Tests if <code>|p(x)| = 1</code>.
 @return true iff all coefficients are equal to zero, except for the lowest coefficient which must equal 1 or -1
 */
- (jboolean)equalsAbsOne;

@end

inline jint OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_get_NUM_EQUAL_RESULTANTS(void);
#define OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_NUM_EQUAL_RESULTANTS 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial, NUM_EQUAL_RESULTANTS, jint)

/*!
 @brief Prime numbers &gt; 4500 for resultant computation.Starting them below ~4400 causes incorrect results occasionally.
 Fortunately, 4500 is about the optimum number for performance.<br>
  This array contains enough prime numbers so primes never have to be computed on-line for any standard <code>org.bouncycastle.pqc.crypto.ntru.NTRUSigningParameters</code>.
 */
inline IOSIntArray *OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_get_PRIMES(void);
static IOSIntArray *OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PRIMES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial, PRIMES, IOSIntArray *)

inline id<JavaUtilList> OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_get_BIGINT_PRIMES(void);
static id<JavaUtilList> OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_BIGINT_PRIMES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial, BIGINT_PRIMES, id<JavaUtilList>)

__attribute__((unused)) static OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_multRecursiveWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self, OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *poly2);

__attribute__((unused)) static OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_mod2ToModqWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self, OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *Fq, jint q);

__attribute__((unused)) static void OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_multShiftSubWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_withInt_withInt_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self, OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *b, jint c, jint k, jint p);

__attribute__((unused)) static JavaMathBigInteger *OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_squareSum(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self);

__attribute__((unused)) static void OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_mult2WithInt_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self, jint modulus);

__attribute__((unused)) static void OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_sortWithIntArray_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self, IOSIntArray *ints);

__attribute__((unused)) static jboolean OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_equalsZero(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self);

__attribute__((unused)) static jboolean OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_equalsAbsOne(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self);

/*!
 @brief Calls <code></code>
 */
@interface OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask : NSObject < JavaUtilConcurrentCallable > {
 @public
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *this$0_;
  jint modulus_;
}

- (instancetype)initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)outer$
                                                                      withInt:(jint)modulus;

- (OrgBouncycastlePqcMathNtruPolynomialModularResultant *)call;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask)

__attribute__((unused)) static void OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask *self, OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *outer$, jint modulus);

__attribute__((unused)) static OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask *new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *outer$, jint modulus) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask *create_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *outer$, jint modulus);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask)

/*!
 @brief Calls <code></code>
 */
@interface OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask : NSObject < JavaUtilConcurrentCallable > {
 @public
  OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes1_;
  OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes2_;
}

- (instancetype)initWithOrgBouncycastlePqcMathNtruPolynomialModularResultant:(OrgBouncycastlePqcMathNtruPolynomialModularResultant *)modRes1
                    withOrgBouncycastlePqcMathNtruPolynomialModularResultant:(OrgBouncycastlePqcMathNtruPolynomialModularResultant *)modRes2;

- (OrgBouncycastlePqcMathNtruPolynomialModularResultant *)call;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask)

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask, modRes1_, OrgBouncycastlePqcMathNtruPolynomialModularResultant *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask, modRes2_, OrgBouncycastlePqcMathNtruPolynomialModularResultant *)

__attribute__((unused)) static void OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask_initWithOrgBouncycastlePqcMathNtruPolynomialModularResultant_withOrgBouncycastlePqcMathNtruPolynomialModularResultant_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask *self, OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes1, OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes2);

__attribute__((unused)) static OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask *new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask_initWithOrgBouncycastlePqcMathNtruPolynomialModularResultant_withOrgBouncycastlePqcMathNtruPolynomialModularResultant_(OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes1, OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes2) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask *create_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask_initWithOrgBouncycastlePqcMathNtruPolynomialModularResultant_withOrgBouncycastlePqcMathNtruPolynomialModularResultant_(OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes1, OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes2);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask)

@interface OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator : NSObject {
 @public
  jint index_;
  JavaMathBigInteger *prime_;
}

- (instancetype)init;

- (JavaMathBigInteger *)nextPrime;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator)

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator, prime_, JavaMathBigInteger *)

__attribute__((unused)) static void OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator_init(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator *self);

__attribute__((unused)) static OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator *new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator *create_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/org/bouncycastle/pqc/math/ntru/polynomial/IntegerPolynomial.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial)


#line 26
@implementation OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial


#line 115
- (instancetype)initWithInt:(jint)N {
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(self, N);
  return self;
}


#line 125
- (instancetype)initWithIntArray:(IOSIntArray *)coeffs {
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(self, coeffs);
  return self;
}


#line 135
- (instancetype)initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)p {
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_(self, p);
  return self;
}


#line 152
+ (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)fromBinary3SvesWithByteArray:(IOSByteArray *)data
                                                                                withInt:(jint)N {
  return OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinary3SvesWithByteArray_withInt_(data, N);
}


#line 164
+ (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)fromBinary3TightWithByteArray:(IOSByteArray *)b
                                                                                 withInt:(jint)N {
  return OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinary3TightWithByteArray_withInt_(b, N);
}


#line 176
+ (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)fromBinary3TightWithJavaIoInputStream:(JavaIoInputStream *)is
                                                                                         withInt:(jint)N {
  return OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinary3TightWithJavaIoInputStream_withInt_(is, N);
}


#line 192
+ (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)fromBinaryWithByteArray:(IOSByteArray *)data
                                                                           withInt:(jint)N
                                                                           withInt:(jint)q {
  return OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinaryWithByteArray_withInt_withInt_(data, N, q);
}


#line 207
+ (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)fromBinaryWithJavaIoInputStream:(JavaIoInputStream *)is
                                                                                   withInt:(jint)N
                                                                                   withInt:(jint)q {
  return OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinaryWithJavaIoInputStream_withInt_withInt_(is, N, q);
}


#line 220
- (IOSByteArray *)toBinary3Sves {
  
#line 222
  return OrgBouncycastlePqcMathNtruUtilArrayEncoder_encodeMod3SvesWithIntArray_(coeffs_);
}


#line 230
- (IOSByteArray *)toBinary3Tight {
  
#line 232
  JavaMathBigInteger *sum = JreLoadStatic(OrgBouncycastlePqcMathNtruPolynomialConstants, BIGINT_ZERO);
  for (jint i = ((IOSIntArray *) nil_chk(coeffs_))->size_ - 1; i >= 0; i--) {
    
#line 235
    sum = [((JavaMathBigInteger *) nil_chk(sum)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(3)];
    sum = [((JavaMathBigInteger *) nil_chk(sum)) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(IOSIntArray_Get(nil_chk(coeffs_), i) + 1)];
  }
  
#line 239
  jint size = JreIntDiv(([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(3))) powWithInt:((IOSIntArray *) nil_chk(coeffs_))->size_])) bitLength] + 7), 8);
  IOSByteArray *arr = [((JavaMathBigInteger *) nil_chk(sum)) toByteArray];
  
#line 242
  if (((IOSByteArray *) nil_chk(arr))->size_ < size) {
    
#line 245
    IOSByteArray *arr2 = [IOSByteArray newArrayWithLength:size];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(arr, 0, arr2, size - arr->size_, arr->size_);
    return arr2;
  }
  
#line 250
  if (arr->size_ > size) {
    
#line 253
    arr = OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(arr, 1, arr->size_);
  }
  return arr;
}


#line 264
- (IOSByteArray *)toBinaryWithInt:(jint)q {
  
#line 266
  return OrgBouncycastlePqcMathNtruUtilArrayEncoder_encodeModQWithIntArray_withInt_(coeffs_, q);
}


#line 272
- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2
                                                                                                                 withInt:(jint)modulus {
  
#line 275
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *c = [self multWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:poly2];
  [((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(c)) modWithInt:modulus];
  return c;
}


#line 283
- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2 {
  
#line 286
  jint N = ((IOSIntArray *) nil_chk(coeffs_))->size_;
  if (((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(poly2))->coeffs_->size_ != N) {
    
#line 289
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Number of coefficients must be the same");
  }
  
#line 292
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *c = OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_multRecursiveWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(self, poly2);
  
#line 294
  if (((IOSIntArray *) nil_chk(((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(c))->coeffs_))->size_ > N) {
    
#line 296
    for (jint k = N; k < c->coeffs_->size_; k++) {
      
#line 298
      *IOSIntArray_GetRef(c->coeffs_, k - N) += IOSIntArray_Get(c->coeffs_, k);
    }
    c->coeffs_ = OrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(c->coeffs_, N);
  }
  return c;
}


#line 305
- (OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)multWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)poly2 {
  
#line 308
  return [new_OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(self) multWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:poly2];
}


#line 314
- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multRecursiveWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2 {
  return OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_multRecursiveWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(self, poly2);
}


#line 373
- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)invertFqWithInt:(jint)q {
  
#line 375
  jint N = ((IOSIntArray *) nil_chk(coeffs_))->size_;
  jint k = 0;
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *b = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N + 1);
  *IOSIntArray_GetRef(nil_chk(b->coeffs_), 0) = 1;
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *c = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N + 1);
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *f = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N + 1);
  f->coeffs_ = OrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(coeffs_, N + 1);
  [f modPositiveWithInt:2];
  
#line 384
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *g = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N + 1);
  *IOSIntArray_GetRef(nil_chk(g->coeffs_), 0) = 1;
  *IOSIntArray_GetRef(g->coeffs_, N) = 1;
  while (true) {
    
#line 389
    while (IOSIntArray_Get(nil_chk(f->coeffs_), 0) == 0) {
      
#line 391
      for (jint i = 1; i <= N; i++) {
        
#line 393
        *IOSIntArray_GetRef(f->coeffs_, i - 1) = IOSIntArray_Get(f->coeffs_, i);
        *IOSIntArray_GetRef(c->coeffs_, N + 1 - i) = IOSIntArray_Get(c->coeffs_, N - i);
      }
      *IOSIntArray_GetRef(f->coeffs_, N) = 0;
      *IOSIntArray_GetRef(c->coeffs_, 0) = 0;
      k++;
      if (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_equalsZero(f)) {
        
#line 401
        return nil;
      }
    }
    if ([f equalsOne]) {
      
#line 406
      break;
    }
    if ([f degree] < [g degree]) {
      
#line 411
      OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *temp = f;
      f = g;
      g = temp;
      
#line 415
      temp = b;
      b = c;
      c = temp;
    }
    [f addWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:g withInt:2];
    [b addWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:c withInt:2];
  }
  
#line 423
  if (IOSIntArray_Get(nil_chk(b->coeffs_), N) != 0) {
    
#line 425
    return nil;
  }
  
#line 428
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *Fq = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N);
  jint j = 0;
  k %= N;
  for (jint i = N - 1; i >= 0; i--) {
    
#line 433
    j = i - k;
    if (j < 0) {
      
#line 436
      j += N;
    }
    *IOSIntArray_GetRef(nil_chk(Fq->coeffs_), j) = IOSIntArray_Get(b->coeffs_, i);
  }
  
#line 441
  return OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_mod2ToModqWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(self, Fq, q);
}


#line 451
- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)mod2ToModqWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)Fq
                                                                                                                       withInt:(jint)q {
  return OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_mod2ToModqWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(self, Fq, q);
}


#line 488
- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)invertF3 {
  
#line 490
  jint N = ((IOSIntArray *) nil_chk(coeffs_))->size_;
  jint k = 0;
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *b = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N + 1);
  *IOSIntArray_GetRef(nil_chk(b->coeffs_), 0) = 1;
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *c = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N + 1);
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *f = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N + 1);
  f->coeffs_ = OrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(coeffs_, N + 1);
  [f modPositiveWithInt:3];
  
#line 499
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *g = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N + 1);
  *IOSIntArray_GetRef(nil_chk(g->coeffs_), 0) = -1;
  *IOSIntArray_GetRef(g->coeffs_, N) = 1;
  while (true) {
    
#line 504
    while (IOSIntArray_Get(nil_chk(f->coeffs_), 0) == 0) {
      
#line 506
      for (jint i = 1; i <= N; i++) {
        
#line 508
        *IOSIntArray_GetRef(f->coeffs_, i - 1) = IOSIntArray_Get(f->coeffs_, i);
        *IOSIntArray_GetRef(c->coeffs_, N + 1 - i) = IOSIntArray_Get(c->coeffs_, N - i);
      }
      *IOSIntArray_GetRef(f->coeffs_, N) = 0;
      *IOSIntArray_GetRef(c->coeffs_, 0) = 0;
      k++;
      if (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_equalsZero(f)) {
        
#line 516
        return nil;
      }
    }
    if (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_equalsAbsOne(f)) {
      
#line 521
      break;
    }
    if ([f degree] < [g degree]) {
      
#line 526
      OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *temp = f;
      f = g;
      g = temp;
      
#line 530
      temp = b;
      b = c;
      c = temp;
    }
    if (IOSIntArray_Get(nil_chk(f->coeffs_), 0) == IOSIntArray_Get(g->coeffs_, 0)) {
      
#line 536
      [f subWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:g withInt:3];
      [b subWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:c withInt:3];
    }
    else {
      
#line 541
      [f addWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:g withInt:3];
      [b addWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:c withInt:3];
    }
  }
  
#line 546
  if (IOSIntArray_Get(nil_chk(b->coeffs_), N) != 0) {
    
#line 548
    return nil;
  }
  
#line 551
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *Fp = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N);
  jint j = 0;
  k %= N;
  for (jint i = N - 1; i >= 0; i--) {
    
#line 556
    j = i - k;
    if (j < 0) {
      
#line 559
      j += N;
    }
    *IOSIntArray_GetRef(nil_chk(Fp->coeffs_), j) = IOSIntArray_Get(f->coeffs_, 0) * IOSIntArray_Get(b->coeffs_, i);
  }
  
#line 564
  [Fp ensurePositiveWithInt:3];
  return Fp;
}


#line 582
- (OrgBouncycastlePqcMathNtruPolynomialResultant *)resultant {
  
#line 584
  jint N = ((IOSIntArray *) nil_chk(coeffs_))->size_;
  
#line 587
  JavaUtilLinkedList *modResultants = new_JavaUtilLinkedList_init();
  JavaMathBigInteger *pProd = JreLoadStatic(OrgBouncycastlePqcMathNtruPolynomialConstants, BIGINT_ONE);
  JavaMathBigInteger *res = JreLoadStatic(OrgBouncycastlePqcMathNtruPolynomialConstants, BIGINT_ONE);
  jint numEqual = 1;
  
#line 592
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator *primes = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator_init();
  
#line 594
  while (true) {
    
#line 596
    JavaMathBigInteger *prime = [primes nextPrime];
    OrgBouncycastlePqcMathNtruPolynomialModularResultant *crr = [self resultantWithInt:[((JavaMathBigInteger *) nil_chk(prime)) intValue]];
    [modResultants addWithId:crr];
    
#line 600
    JavaMathBigInteger *temp = [((JavaMathBigInteger *) nil_chk(pProd)) multiplyWithJavaMathBigInteger:prime];
    OrgBouncycastlePqcMathNtruEuclidBigIntEuclidean *er = OrgBouncycastlePqcMathNtruEuclidBigIntEuclidean_calculateWithJavaMathBigInteger_withJavaMathBigInteger_(prime, pProd);
    JavaMathBigInteger *resPrev = res;
    res = [((JavaMathBigInteger *) nil_chk(res)) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(((OrgBouncycastlePqcMathNtruEuclidBigIntEuclidean *) nil_chk(er))->x_)) multiplyWithJavaMathBigInteger:prime]];
    JavaMathBigInteger *res2 = [((JavaMathBigInteger *) nil_chk(((OrgBouncycastlePqcMathNtruPolynomialModularResultant *) nil_chk(crr))->res_)) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(er->y_)) multiplyWithJavaMathBigInteger:pProd]];
    res = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(res)) addWithJavaMathBigInteger:res2])) modWithJavaMathBigInteger:temp];
    pProd = temp;
    
#line 608
    JavaMathBigInteger *pProd2 = [((JavaMathBigInteger *) nil_chk(pProd)) divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(2)];
    JavaMathBigInteger *pProd2n = [((JavaMathBigInteger *) nil_chk(pProd2)) negate];
    if ([((JavaMathBigInteger *) nil_chk(res)) compareToWithId:pProd2] > 0) {
      
#line 612
      res = [res subtractWithJavaMathBigInteger:pProd];
    }
    else if ([res compareToWithId:pProd2n] < 0) {
      
#line 616
      res = [res addWithJavaMathBigInteger:pProd];
    }
    
#line 619
    if ([((JavaMathBigInteger *) nil_chk(res)) isEqual:resPrev]) {
      
#line 621
      numEqual++;
      if (numEqual >= OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_NUM_EQUAL_RESULTANTS) {
        
#line 624
        break;
      }
    }
    else {
      
#line 629
      numEqual = 1;
    }
  }
  
#line 636
  while ([modResultants size] > 1) {
    
#line 638
    OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes1 = [modResultants removeFirst];
    OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes2 = [modResultants removeFirst];
    OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes3 = OrgBouncycastlePqcMathNtruPolynomialModularResultant_combineRhoWithOrgBouncycastlePqcMathNtruPolynomialModularResultant_withOrgBouncycastlePqcMathNtruPolynomialModularResultant_(modRes1, modRes2);
    [modResultants addLastWithId:modRes3];
  }
  OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *rhoP = ((OrgBouncycastlePqcMathNtruPolynomialModularResultant *) nil_chk([modResultants getFirst]))->rho_;
  
#line 645
  JavaMathBigInteger *pProd2 = [((JavaMathBigInteger *) nil_chk(pProd)) divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(2)];
  JavaMathBigInteger *pProd2n = [((JavaMathBigInteger *) nil_chk(pProd2)) negate];
  if ([((JavaMathBigInteger *) nil_chk(res)) compareToWithId:pProd2] > 0) {
    
#line 649
    res = [res subtractWithJavaMathBigInteger:pProd];
  }
  if ([((JavaMathBigInteger *) nil_chk(res)) compareToWithId:pProd2n] < 0) {
    
#line 653
    res = [res addWithJavaMathBigInteger:pProd];
  }
  
#line 656
  for (jint i = 0; i < N; i++) {
    
#line 658
    JavaMathBigInteger *c = IOSObjectArray_Get(nil_chk(((OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(rhoP))->coeffs_), i);
    if ([((JavaMathBigInteger *) nil_chk(c)) compareToWithId:pProd2] > 0) {
      
#line 661
      (void) IOSObjectArray_Set(nil_chk(rhoP->coeffs_), i, [c subtractWithJavaMathBigInteger:pProd]);
    }
    if ([c compareToWithId:pProd2n] < 0) {
      
#line 665
      (void) IOSObjectArray_Set(nil_chk(rhoP->coeffs_), i, [c addWithJavaMathBigInteger:pProd]);
    }
  }
  
#line 669
  return new_OrgBouncycastlePqcMathNtruPolynomialResultant_initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_(rhoP, res);
}


#line 677
- (OrgBouncycastlePqcMathNtruPolynomialResultant *)resultantMultiThread {
  
#line 679
  jint N = ((IOSIntArray *) nil_chk(coeffs_))->size_;
  
#line 683
  JavaMathBigInteger *max = [((JavaMathBigInteger *) nil_chk(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_squareSum(self))) powWithInt:JreIntDiv((N + 1), 2)];
  max = [((JavaMathBigInteger *) nil_chk(max)) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(2))) powWithInt:JreIntDiv(([self degree] + 1), 2)]];
  JavaMathBigInteger *max2 = [((JavaMathBigInteger *) nil_chk(max)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(2)];
  
#line 688
  JavaMathBigInteger *prime = JavaMathBigInteger_valueOfWithLong_(10000);
  JavaMathBigInteger *pProd = JreLoadStatic(OrgBouncycastlePqcMathNtruPolynomialConstants, BIGINT_ONE);
  JavaUtilConcurrentLinkedBlockingQueue *resultantTasks = new_JavaUtilConcurrentLinkedBlockingQueue_init();
  id<JavaUtilIterator> primes = [((id<JavaUtilList>) nil_chk(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_BIGINT_PRIMES)) iterator];
  id<JavaUtilConcurrentExecutorService> executor = JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_([((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) availableProcessors]);
  while ([((JavaMathBigInteger *) nil_chk(pProd)) compareToWithId:max2] < 0) {
    
#line 695
    if ([((id<JavaUtilIterator>) nil_chk(primes)) hasNext]) {
      
#line 697
      prime = [primes next];
    }
    else {
      
#line 701
      prime = [((JavaMathBigInteger *) nil_chk(prime)) nextProbablePrime];
    }
    id<JavaUtilConcurrentFuture> task = [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) submitWithJavaUtilConcurrentCallable:new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(self, [((JavaMathBigInteger *) nil_chk(prime)) intValue])];
    [resultantTasks addWithId:task];
    pProd = [pProd multiplyWithJavaMathBigInteger:prime];
  }
  
#line 711
  OrgBouncycastlePqcMathNtruPolynomialModularResultant *overallResultant = nil;
  while (![resultantTasks isEmpty]) {
    
#line 714
    @try {
      
#line 716
      id<JavaUtilConcurrentFuture> modRes1 = [resultantTasks take];
      id<JavaUtilConcurrentFuture> modRes2 = [resultantTasks poll];
      if (modRes2 == nil) {
        
#line 721
        overallResultant = [((id<JavaUtilConcurrentFuture>) nil_chk(modRes1)) get];
        break;
      }
      id<JavaUtilConcurrentFuture> newTask = [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) submitWithJavaUtilConcurrentCallable:new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask_initWithOrgBouncycastlePqcMathNtruPolynomialModularResultant_withOrgBouncycastlePqcMathNtruPolynomialModularResultant_([((id<JavaUtilConcurrentFuture>) nil_chk(modRes1)) get], [modRes2 get])];
      [resultantTasks addWithId:newTask];
    }
    @catch (JavaLangException *e) {
      
#line 729
      @throw new_JavaLangIllegalStateException_initWithNSString_([e description]);
    }
  }
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) shutdown];
  JavaMathBigInteger *res = ((OrgBouncycastlePqcMathNtruPolynomialModularResultant *) nil_chk(overallResultant))->res_;
  OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *rhoP = overallResultant->rho_;
  
#line 736
  JavaMathBigInteger *pProd2 = [pProd divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(2)];
  JavaMathBigInteger *pProd2n = [((JavaMathBigInteger *) nil_chk(pProd2)) negate];
  
#line 739
  if ([((JavaMathBigInteger *) nil_chk(res)) compareToWithId:pProd2] > 0) {
    
#line 741
    res = [res subtractWithJavaMathBigInteger:pProd];
  }
  if ([((JavaMathBigInteger *) nil_chk(res)) compareToWithId:pProd2n] < 0) {
    
#line 745
    res = [res addWithJavaMathBigInteger:pProd];
  }
  
#line 748
  for (jint i = 0; i < N; i++) {
    
#line 750
    JavaMathBigInteger *c = IOSObjectArray_Get(nil_chk(((OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(rhoP))->coeffs_), i);
    if ([((JavaMathBigInteger *) nil_chk(c)) compareToWithId:pProd2] > 0) {
      
#line 753
      (void) IOSObjectArray_Set(nil_chk(rhoP->coeffs_), i, [c subtractWithJavaMathBigInteger:pProd]);
    }
    if ([c compareToWithId:pProd2n] < 0) {
      
#line 757
      (void) IOSObjectArray_Set(nil_chk(rhoP->coeffs_), i, [c addWithJavaMathBigInteger:pProd]);
    }
  }
  
#line 761
  return new_OrgBouncycastlePqcMathNtruPolynomialResultant_initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_(rhoP, res);
}


#line 769
- (OrgBouncycastlePqcMathNtruPolynomialModularResultant *)resultantWithInt:(jint)p {
  
#line 772
  IOSIntArray *fcoeffs = OrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(coeffs_, ((IOSIntArray *) nil_chk(coeffs_))->size_ + 1);
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *f = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(fcoeffs);
  jint N = ((IOSIntArray *) nil_chk(fcoeffs))->size_;
  
#line 776
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *a = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N);
  *IOSIntArray_GetRef(nil_chk(a->coeffs_), 0) = -1;
  *IOSIntArray_GetRef(a->coeffs_, N - 1) = 1;
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *b = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(f->coeffs_);
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *v1 = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N);
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *v2 = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N);
  *IOSIntArray_GetRef(nil_chk(v2->coeffs_), 0) = 1;
  jint da = N - 1;
  jint db = [b degree];
  jint ta = da;
  jint c = 0;
  jint r = 1;
  while (db > 0) {
    
#line 790
    c = OrgBouncycastlePqcMathNtruUtilUtil_invertWithInt_withInt_(IOSIntArray_Get(nil_chk(b->coeffs_), db), p);
    c = JreIntMod(c * IOSIntArray_Get(nil_chk(a->coeffs_), da), p);
    OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_multShiftSubWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_withInt_withInt_(a, b, c, da - db, p);
    OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_multShiftSubWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_withInt_withInt_(v1, v2, c, da - db, p);
    
#line 795
    da = [a degree];
    if (da < db) {
      
#line 798
      r *= OrgBouncycastlePqcMathNtruUtilUtil_powWithInt_withInt_withInt_(IOSIntArray_Get(nil_chk(b->coeffs_), db), ta - da, p);
      r %= p;
      if (JreIntMod(ta, 2) == 1 && JreIntMod(db, 2) == 1) {
        
#line 802
        r = JreIntMod(-r, p);
      }
      OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *temp = a;
      a = b;
      b = temp;
      jint tempdeg = da;
      da = db;
      temp = v1;
      v1 = v2;
      v2 = temp;
      ta = db;
      db = tempdeg;
    }
  }
  r *= OrgBouncycastlePqcMathNtruUtilUtil_powWithInt_withInt_withInt_(IOSIntArray_Get(nil_chk(b->coeffs_), 0), da, p);
  r %= p;
  c = OrgBouncycastlePqcMathNtruUtilUtil_invertWithInt_withInt_(IOSIntArray_Get(nil_chk(b->coeffs_), 0), p);
  [v2 multWithInt:c];
  [v2 modWithInt:p];
  [v2 multWithInt:r];
  [v2 modWithInt:p];
  
#line 825
  v2->coeffs_ = OrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(v2->coeffs_, ((IOSIntArray *) nil_chk(v2->coeffs_))->size_ - 1);
  return new_OrgBouncycastlePqcMathNtruPolynomialModularResultant_initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_withJavaMathBigInteger_(new_OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(v2), JavaMathBigInteger_valueOfWithLong_(r), JavaMathBigInteger_valueOfWithLong_(p));
}


#line 838
- (void)multShiftSubWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)b
                                                                      withInt:(jint)c
                                                                      withInt:(jint)k
                                                                      withInt:(jint)p {
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_multShiftSubWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_withInt_withInt_(self, b, c, k, p);
}


#line 852
- (JavaMathBigInteger *)squareSum {
  return OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_squareSum(self);
}


#line 866
- (jint)degree {
  
#line 868
  jint degree = ((IOSIntArray *) nil_chk(coeffs_))->size_ - 1;
  while (degree > 0 && IOSIntArray_Get(coeffs_, degree) == 0) {
    
#line 871
    degree--;
  }
  return degree;
}


#line 882
- (void)addWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)b
                                                             withInt:(jint)modulus {
  [self addWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:b];
  [self modWithInt:modulus];
}


#line 893
- (void)addWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)b {
  
#line 895
  if (((IOSIntArray *) nil_chk(((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(b))->coeffs_))->size_ > coeffs_->size_) {
    
#line 897
    coeffs_ = OrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(coeffs_, b->coeffs_->size_);
  }
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(b->coeffs_))->size_; i++) {
    
#line 901
    *IOSIntArray_GetRef(coeffs_, i) += IOSIntArray_Get(b->coeffs_, i);
  }
}


#line 911
- (void)subWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)b
                                                             withInt:(jint)modulus {
  [self subWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:b];
  [self modWithInt:modulus];
}


#line 922
- (void)subWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)b {
  
#line 924
  if (((IOSIntArray *) nil_chk(((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(b))->coeffs_))->size_ > coeffs_->size_) {
    
#line 926
    coeffs_ = OrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(coeffs_, b->coeffs_->size_);
  }
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(b->coeffs_))->size_; i++) {
    
#line 930
    *IOSIntArray_GetRef(coeffs_, i) -= IOSIntArray_Get(b->coeffs_, i);
  }
}


#line 939
- (void)subWithInt:(jint)b {
  
#line 941
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    
#line 943
    *IOSIntArray_GetRef(coeffs_, i) -= b;
  }
}


#line 952
- (void)multWithInt:(jint)factor {
  
#line 954
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    
#line 956
    *IOSIntArray_GetRef(coeffs_, i) *= factor;
  }
}


#line 965
- (void)mult2WithInt:(jint)modulus {
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_mult2WithInt_(self, modulus);
}


#line 979
- (void)mult3WithInt:(jint)modulus {
  
#line 981
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    
#line 983
    *IOSIntArray_GetRef(coeffs_, i) *= 3;
    *IOSIntArray_GetRef(coeffs_, i) %= modulus;
  }
}


#line 993
- (void)divWithInt:(jint)k {
  
#line 995
  jint k2 = JreIntDiv((k + 1), 2);
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    
#line 998
    *IOSIntArray_GetRef(coeffs_, i) += IOSIntArray_Get(coeffs_, i) > 0 ? k2 : -k2;
    *IOSIntArray_GetRef(coeffs_, i) /= k;
  }
}


#line 1006
- (void)mod3 {
  
#line 1008
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    
#line 1010
    *IOSIntArray_GetRef(coeffs_, i) %= 3;
    if (IOSIntArray_Get(coeffs_, i) > 1) {
      
#line 1013
      *IOSIntArray_GetRef(coeffs_, i) -= 3;
    }
    if (IOSIntArray_Get(coeffs_, i) < -1) {
      
#line 1017
      *IOSIntArray_GetRef(coeffs_, i) += 3;
    }
  }
}


#line 1027
- (void)modPositiveWithInt:(jint)modulus {
  
#line 1029
  [self modWithInt:modulus];
  [self ensurePositiveWithInt:modulus];
}


#line 1036
- (void)modCenterWithInt:(jint)modulus {
  
#line 1038
  [self modWithInt:modulus];
  for (jint j = 0; j < ((IOSIntArray *) nil_chk(coeffs_))->size_; j++) {
    
#line 1041
    while (IOSIntArray_Get(coeffs_, j) < JreIntDiv(modulus, 2)) {
      
#line 1043
      *IOSIntArray_GetRef(coeffs_, j) += modulus;
    }
    while (IOSIntArray_Get(coeffs_, j) >= JreIntDiv(modulus, 2)) {
      
#line 1047
      *IOSIntArray_GetRef(coeffs_, j) -= modulus;
    }
  }
}


#line 1055
- (void)modWithInt:(jint)modulus {
  
#line 1057
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    
#line 1059
    *IOSIntArray_GetRef(coeffs_, i) %= modulus;
  }
}


#line 1068
- (void)ensurePositiveWithInt:(jint)modulus {
  
#line 1070
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    
#line 1072
    while (IOSIntArray_Get(coeffs_, i) < 0) {
      
#line 1074
      *IOSIntArray_GetRef(coeffs_, i) += modulus;
    }
  }
}


#line 1085
- (jlong)centeredNormSqWithInt:(jint)q {
  
#line 1087
  jint N = ((IOSIntArray *) nil_chk(coeffs_))->size_;
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *p = (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) cast_chk([self java_clone], [OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial class]);
  [((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(p)) shiftGapWithInt:q];
  
#line 1091
  jlong sum = 0;
  jlong sqSum = 0;
  {
    IOSIntArray *a__ =
#line 1093
    p->coeffs_;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint c = *b__++;
      
#line 1094
      sum += c;
      sqSum += c * c;
    }
  }
  return sqSum - JreLongDiv(sum * sum, N);
}


#line 1106
- (void)shiftGapWithInt:(jint)q {
  
#line 1108
  [self modCenterWithInt:q];
  
#line 1110
  IOSIntArray *sorted = OrgBouncycastleUtilArrays_cloneWithIntArray_(coeffs_);
  
#line 1112
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_sortWithIntArray_(self, sorted);
  
#line 1114
  jint maxrange = 0;
  jint maxrangeStart = 0;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(sorted))->size_ - 1; i++) {
    
#line 1118
    jint range = IOSIntArray_Get(sorted, i + 1) - IOSIntArray_Get(sorted, i);
    if (range > maxrange) {
      
#line 1121
      maxrange = range;
      maxrangeStart = IOSIntArray_Get(sorted, i);
    }
  }
  
#line 1126
  jint pmin = IOSIntArray_Get(sorted, 0);
  jint pmax = IOSIntArray_Get(sorted, sorted->size_ - 1);
  
#line 1129
  jint j = q - pmax + pmin;
  jint shift;
  if (j > maxrange) {
    
#line 1133
    shift = JreIntDiv((pmax + pmin), 2);
  }
  else {
    
#line 1137
    shift = maxrangeStart + JreIntDiv(maxrange, 2) + JreIntDiv(q, 2);
  }
  
#line 1140
  [self subWithInt:shift];
}


#line 1143
- (void)sortWithIntArray:(IOSIntArray *)ints {
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_sortWithIntArray_(self, ints);
}


#line 1168
- (void)center0WithInt:(jint)q {
  
#line 1170
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    
#line 1172
    while (IOSIntArray_Get(coeffs_, i) < JreIntDiv(-q, 2)) {
      
#line 1174
      *IOSIntArray_GetRef(coeffs_, i) += q;
    }
    while (IOSIntArray_Get(coeffs_, i) > JreIntDiv(q, 2)) {
      
#line 1178
      *IOSIntArray_GetRef(coeffs_, i) -= q;
    }
  }
}


#line 1188
- (jint)sumCoeffs {
  
#line 1190
  jint sum = 0;
  {
    IOSIntArray *a__ =
#line 1191
    coeffs_;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint coeff = *b__++;
      
#line 1192
      sum += coeff;
    }
  }
  
#line 1194
  return sum;
}


#line 1202
- (jboolean)equalsZero {
  return OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_equalsZero(self);
}


#line 1218
- (jboolean)equalsOne {
  
#line 1220
  for (jint i = 1; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    
#line 1222
    if (IOSIntArray_Get(coeffs_, i) != 0) {
      
#line 1224
      return false;
    }
  }
  return IOSIntArray_Get(coeffs_, 0) == 1;
}


#line 1235
- (jboolean)equalsAbsOne {
  return OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_equalsAbsOne(self);
}


#line 1253
- (jint)countWithInt:(jint)value {
  
#line 1255
  jint count = 0;
  {
    IOSIntArray *a__ =
#line 1256
    coeffs_;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint coeff = *b__++;
      
#line 1257
      if (coeff == value) {
        
#line 1259
        count++;
      }
    }
  }
  
#line 1262
  return count;
}


#line 1268
- (void)rotate1 {
  
#line 1270
  jint clast = IOSIntArray_Get(coeffs_, ((IOSIntArray *) nil_chk(coeffs_))->size_ - 1);
  for (jint i = coeffs_->size_ - 1; i > 0; i--) {
    
#line 1273
    *IOSIntArray_GetRef(coeffs_, i) = IOSIntArray_Get(coeffs_, i - 1);
  }
  *IOSIntArray_GetRef(coeffs_, 0) = clast;
}


#line 1278
- (void)clear {
  
#line 1280
  JavaUtilArrays_fillWithIntArray_withInt_(coeffs_, 0);
}


#line 1283
- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)toIntegerPolynomial {
  
#line 1286
  return (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) cast_chk([self java_clone], [OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial class]);
}

- (id)java_clone {
  
#line 1292
  return new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_([((IOSIntArray *) nil_chk(coeffs_)) java_clone]);
}

- (jboolean)isEqual:(id)obj {
  
#line 1298
  if ([obj isKindOfClass:[OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial class]]) {
    
#line 1300
    return OrgBouncycastleUtilArrays_areEqualWithIntArray_withIntArray_(coeffs_, ((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) obj)))->coeffs_);
  }
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x9, 5, 4, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x9, 5, 6, 7, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x9, 8, 10, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x1, 12, 14, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial;", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x2, 15, 14, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x1, 16, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x2, 17, 13, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialResultant;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialResultant;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialModularResultant;", 0x1, 18, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 22, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 27, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 30, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 31, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 34, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 35, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 36, 37, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithIntArray:);
  methods[2].selector = @selector(initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:);
  methods[3].selector = @selector(fromBinary3SvesWithByteArray:withInt:);
  methods[4].selector = @selector(fromBinary3TightWithByteArray:withInt:);
  methods[5].selector = @selector(fromBinary3TightWithJavaIoInputStream:withInt:);
  methods[6].selector = @selector(fromBinaryWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(fromBinaryWithJavaIoInputStream:withInt:withInt:);
  methods[8].selector = @selector(toBinary3Sves);
  methods[9].selector = @selector(toBinary3Tight);
  methods[10].selector = @selector(toBinaryWithInt:);
  methods[11].selector = @selector(multWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:withInt:);
  methods[12].selector = @selector(multWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:);
  methods[13].selector = @selector(multWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:);
  methods[14].selector = @selector(multRecursiveWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:);
  methods[15].selector = @selector(invertFqWithInt:);
  methods[16].selector = @selector(mod2ToModqWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:withInt:);
  methods[17].selector = @selector(invertF3);
  methods[18].selector = @selector(resultant);
  methods[19].selector = @selector(resultantMultiThread);
  methods[20].selector = @selector(resultantWithInt:);
  methods[21].selector = @selector(multShiftSubWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:withInt:withInt:withInt:);
  methods[22].selector = @selector(squareSum);
  methods[23].selector = @selector(degree);
  methods[24].selector = @selector(addWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:withInt:);
  methods[25].selector = @selector(addWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:);
  methods[26].selector = @selector(subWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:withInt:);
  methods[27].selector = @selector(subWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:);
  methods[28].selector = @selector(subWithInt:);
  methods[29].selector = @selector(multWithInt:);
  methods[30].selector = @selector(mult2WithInt:);
  methods[31].selector = @selector(mult3WithInt:);
  methods[32].selector = @selector(divWithInt:);
  methods[33].selector = @selector(mod3);
  methods[34].selector = @selector(modPositiveWithInt:);
  methods[35].selector = @selector(modCenterWithInt:);
  methods[36].selector = @selector(modWithInt:);
  methods[37].selector = @selector(ensurePositiveWithInt:);
  methods[38].selector = @selector(centeredNormSqWithInt:);
  methods[39].selector = @selector(shiftGapWithInt:);
  methods[40].selector = @selector(sortWithIntArray:);
  methods[41].selector = @selector(center0WithInt:);
  methods[42].selector = @selector(sumCoeffs);
  methods[43].selector = @selector(equalsZero);
  methods[44].selector = @selector(equalsOne);
  methods[45].selector = @selector(equalsAbsOne);
  methods[46].selector = @selector(countWithInt:);
  methods[47].selector = @selector(rotate1);
  methods[48].selector = @selector(clear);
  methods[49].selector = @selector(toIntegerPolynomial);
  methods[50].selector = @selector(java_clone);
  methods[51].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NUM_EQUAL_RESULTANTS", "I", .constantValue.asInt = OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_NUM_EQUAL_RESULTANTS, 0x1a, -1, -1, -1, -1 },
    { "PRIMES", "[I", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "BIGINT_PRIMES", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "coeffs_", "[I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "[I", "LOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial;", "fromBinary3Sves", "[BI", "fromBinary3Tight", "LJavaIoInputStream;I", "LJavaIoIOException;", "fromBinary", "[BII", "LJavaIoInputStream;II", "toBinary", "mult", "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;I", "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", "multRecursive", "invertFq", "mod2ToModq", "resultant", "multShiftSub", "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;III", "add", "sub", "mult2", "mult3", "div", "modPositive", "modCenter", "mod", "ensurePositive", "centeredNormSq", "shiftGap", "sort", "center0", "count", "clone", "equals", "LNSObject;", &OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PRIMES, &OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_BIGINT_PRIMES, "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask;LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask;LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial = { "IntegerPolynomial", "org.bouncycastle.pqc.math.ntru.polynomial", ptrTable, methods, fields, 7, 0x1, 52, 4, -1, 40, -1, -1, -1 };
  return &_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;
}

+ (void)initialize {
  if (self == [OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial class]) {
    OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PRIMES = [IOSIntArray newArrayWithInts:(jint[]){
#line 36
      4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583,
#line 37
      4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657,
#line 38
      4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751,
#line 39
      4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831,
#line 40
      4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937,
#line 41
      4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003,
#line 42
      5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087,
#line 43
      5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179,
#line 44
      5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279,
#line 45
      5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387,
#line 46
      5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443,
#line 47
      5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521,
#line 48
      5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639,
#line 49
      5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693,
#line 50
      5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791,
#line 51
      5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857,
#line 52
      5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939,
#line 53
      5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053,
#line 54
      6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133,
#line 55
      6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221,
#line 56
      6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301,
#line 57
      6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367,
#line 58
      6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473,
#line 59
      6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571,
#line 60
      6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673,
#line 61
      6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761,
#line 62
      6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833,
#line 63
      6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917,
#line 64
      6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997,
#line 65
      7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103,
#line 66
      7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207,
#line 67
      7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297,
#line 68
      7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411,
#line 69
      7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499,
#line 70
      7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561,
#line 71
      7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643,
#line 72
      7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723,
#line 73
      7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829,
#line 74
      7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919,
#line 75
      7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017,
#line 76
      8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111,
#line 77
      8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219,
#line 78
      8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291,
#line 79
      8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387,
#line 80
      8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501,
#line 81
      8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597,
#line 82
      8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677,
#line 83
      8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741,
#line 84
      8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831,
#line 85
      8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929,
#line 86
      8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011,
#line 87
      9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109,
#line 88
      9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199,
#line 89
      9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283,
#line 90
      9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377,
#line 91
      9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439,
#line 92
      9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533,
#line 93
      9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631,
#line 94
      9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733,
#line 95
      9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811,
#line 96
      9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887,
#line 97
      9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973 } count:619];
      {
        
#line 102
        OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_BIGINT_PRIMES = new_JavaUtilArrayList_init();
        {
          IOSIntArray *a__ =
#line 103
          OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PRIMES;
          jint const *b__ = a__->buffer_;
          jint const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            jint element = *b__++;
            
#line 104
            [OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_BIGINT_PRIMES addWithId:JavaMathBigInteger_valueOfWithLong_(element)];
          }
        }
      }
      J2OBJC_SET_INITIALIZED(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial)
    }
  }

@end


#line 115
void OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self, jint N) {
  NSObject_init(self);
  self->coeffs_ = [IOSIntArray newArrayWithLength:N];
}


#line 115
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(jint N) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial, initWithInt_, N)
}


#line 115
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *create_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(jint N) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial, initWithInt_, N)
}


#line 125
void OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self, IOSIntArray *coeffs) {
  NSObject_init(self);
  self->coeffs_ = coeffs;
}


#line 125
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(IOSIntArray *coeffs) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial, initWithIntArray_, coeffs)
}


#line 125
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *create_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(IOSIntArray *coeffs) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial, initWithIntArray_, coeffs)
}


#line 135
void OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self, OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *p) {
  NSObject_init(self);
  self->coeffs_ = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(((OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(p))->coeffs_))->size_];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(p->coeffs_))->size_; i++) {
    
#line 140
    *IOSIntArray_GetRef(nil_chk(self->coeffs_), i) = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(p->coeffs_, i))) intValue];
  }
}


#line 135
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *p) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial, initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_, p)
}


#line 135
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *create_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *p) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial, initWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_, p)
}


#line 152
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinary3SvesWithByteArray_withInt_(IOSByteArray *data, jint N) {
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initialize();
  return new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeMod3SvesWithByteArray_withInt_(data, N));
}


#line 164
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinary3TightWithByteArray_withInt_(IOSByteArray *b, jint N) {
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initialize();
  return new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeMod3TightWithByteArray_withInt_(b, N));
}


#line 176
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinary3TightWithJavaIoInputStream_withInt_(JavaIoInputStream *is, jint N) {
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initialize();
  
#line 179
  return new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeMod3TightWithJavaIoInputStream_withInt_(is, N));
}


#line 192
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinaryWithByteArray_withInt_withInt_(IOSByteArray *data, jint N, jint q) {
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initialize();
  return new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeModQWithByteArray_withInt_withInt_(data, N, q));
}


#line 207
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinaryWithJavaIoInputStream_withInt_withInt_(JavaIoInputStream *is, jint N, jint q) {
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initialize();
  
#line 210
  return new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgBouncycastlePqcMathNtruUtilArrayEncoder_decodeModQWithJavaIoInputStream_withInt_withInt_(is, N, q));
}


#line 314
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_multRecursiveWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self, OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *poly2) {
  
#line 316
  IOSIntArray *a = self->coeffs_;
  IOSIntArray *b = ((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(poly2))->coeffs_;
  
#line 319
  jint n = ((IOSIntArray *) nil_chk(poly2->coeffs_))->size_;
  if (n > 32) {
    jint n1 = JreIntDiv(n, 2);
    
#line 323
    OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *a1 = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(a, n1));
    OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *a2 = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgBouncycastleUtilArrays_copyOfRangeWithIntArray_withInt_withInt_(a, n1, n));
    OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *b1 = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(b, n1));
    OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *b2 = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgBouncycastleUtilArrays_copyOfRangeWithIntArray_withInt_withInt_(b, n1, n));
    
#line 328
    OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *A = (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) cast_chk([a1 java_clone], [OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial class]);
    [((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(A)) addWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:a2];
    OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *B = (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) cast_chk([b1 java_clone], [OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial class]);
    [((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(B)) addWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:b2];
    
#line 333
    OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *c1 = OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_multRecursiveWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(a1, b1);
    OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *c2 = OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_multRecursiveWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(a2, b2);
    OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *c3 = OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_multRecursiveWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(A, B);
    [((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(c3)) subWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:c1];
    [c3 subWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:c2];
    
#line 339
    OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *c = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(2 * n - 1);
    for (jint i = 0; i < ((IOSIntArray *) nil_chk(((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(c1))->coeffs_))->size_; i++) {
      
#line 342
      *IOSIntArray_GetRef(c->coeffs_, i) = IOSIntArray_Get(c1->coeffs_, i);
    }
    for (jint i = 0; i < c3->coeffs_->size_; i++) {
      
#line 346
      *IOSIntArray_GetRef(c->coeffs_, n1 + i) += IOSIntArray_Get(c3->coeffs_, i);
    }
    for (jint i = 0; i < ((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(c2))->coeffs_->size_; i++) {
      
#line 350
      *IOSIntArray_GetRef(c->coeffs_, 2 * n1 + i) += IOSIntArray_Get(c2->coeffs_, i);
    }
    return c;
  }
  jint cn = 2 * n - 1;
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *c = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_([IOSIntArray newArrayWithLength:cn]);
  for (jint k = 0; k < cn; k++) {
    
#line 358
    for (jint i = JavaLangMath_maxWithInt_withInt_(0, k - n + 1); i <= JavaLangMath_minWithInt_withInt_(k, n - 1); i++) {
      
#line 360
      *IOSIntArray_GetRef(nil_chk(c->coeffs_), k) += IOSIntArray_Get(nil_chk(b), i) * IOSIntArray_Get(nil_chk(a), k - i);
    }
  }
  return c;
}


#line 451
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_mod2ToModqWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self, OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *Fq, jint q) {
  
#line 453
  if (OrgBouncycastlePqcMathNtruUtilUtil_is64BitJVM() && q == 2048) {
    
#line 455
    OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2 *thisLong = new_OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(self);
    OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2 *FqLong = new_OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(Fq);
    jint v = 2;
    while (v < q) {
      
#line 460
      v *= 2;
      OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2 *temp = (OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2 *) cast_chk([FqLong java_clone], [OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2 class]);
      [((OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2 *) nil_chk(temp)) mult2AndWithInt:v - 1];
      FqLong = [((OrgBouncycastlePqcMathNtruPolynomialLongPolynomial2 *) nil_chk([thisLong multWithOrgBouncycastlePqcMathNtruPolynomialLongPolynomial2:FqLong])) multWithOrgBouncycastlePqcMathNtruPolynomialLongPolynomial2:FqLong];
      [temp subAndWithOrgBouncycastlePqcMathNtruPolynomialLongPolynomial2:FqLong withInt:v - 1];
      FqLong = temp;
    }
    return [FqLong toIntegerPolynomial];
  }
  jint v = 2;
  while (v < q) {
    
#line 472
    v *= 2;
    OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *temp = new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(Fq))->coeffs_, ((IOSIntArray *) nil_chk(Fq->coeffs_))->size_));
    OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_mult2WithInt_(temp, v);
    Fq = [((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk([self multWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:Fq withInt:v])) multWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:Fq withInt:v];
    [temp subWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:Fq withInt:v];
    Fq = temp;
  }
  return Fq;
}


#line 838
void OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_multShiftSubWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_withInt_withInt_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self, OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *b, jint c, jint k, jint p) {
  
#line 840
  jint N = ((IOSIntArray *) nil_chk(self->coeffs_))->size_;
  for (jint i = k; i < N; i++) {
    
#line 843
    *IOSIntArray_GetRef(self->coeffs_, i) = JreIntMod((IOSIntArray_Get(self->coeffs_, i) - IOSIntArray_Get(((OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(b))->coeffs_, i - k) * c), p);
  }
}


#line 852
JavaMathBigInteger *OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_squareSum(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self) {
  
#line 854
  JavaMathBigInteger *sum = JreLoadStatic(OrgBouncycastlePqcMathNtruPolynomialConstants, BIGINT_ZERO);
  {
    IOSIntArray *a__ = self->coeffs_;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint coeff = *b__++;
      
#line 856
      sum = [((JavaMathBigInteger *) nil_chk(sum)) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(coeff * coeff)];
    }
  }
  
#line 858
  return sum;
}


#line 965
void OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_mult2WithInt_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self, jint modulus) {
  
#line 967
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(self->coeffs_))->size_; i++) {
    
#line 969
    *IOSIntArray_GetRef(self->coeffs_, i) *= 2;
    *IOSIntArray_GetRef(self->coeffs_, i) %= modulus;
  }
}


#line 1143
void OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_sortWithIntArray_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self, IOSIntArray *ints) {
  
#line 1145
  jboolean swap = true;
  
#line 1147
  while (swap) {
    
#line 1149
    swap = false;
    for (jint i = 0; i != ((IOSIntArray *) nil_chk(ints))->size_ - 1; i++) {
      
#line 1152
      if (IOSIntArray_Get(ints, i) > IOSIntArray_Get(ints, i + 1)) {
        
#line 1154
        jint tmp = IOSIntArray_Get(ints, i);
        *IOSIntArray_GetRef(ints, i) = IOSIntArray_Get(ints, i + 1);
        *IOSIntArray_GetRef(ints, i + 1) = tmp;
        swap = true;
      }
    }
  }
}


#line 1202
jboolean OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_equalsZero(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self) {
  {
    IOSIntArray *a__ = self->coeffs_;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint coeff = *b__++;
      
#line 1205
      if (coeff != 0) {
        
#line 1207
        return false;
      }
    }
  }
  
#line 1210
  return true;
}


#line 1235
jboolean OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_equalsAbsOne(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *self) {
  
#line 1237
  for (jint i = 1; i < ((IOSIntArray *) nil_chk(self->coeffs_))->size_; i++) {
    
#line 1239
    if (IOSIntArray_Get(self->coeffs_, i) != 0) {
      
#line 1241
      return false;
    }
  }
  return JavaLangMath_absWithInt_(IOSIntArray_Get(self->coeffs_, 0)) == 1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/org/bouncycastle/pqc/math/ntru/polynomial/IntegerPolynomial.java"


#line 1308
@implementation OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask


#line 1313
- (instancetype)initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)outer$
                                                                      withInt:(jint)modulus {
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(self, outer$, modulus);
  return self;
}


#line 1317
- (OrgBouncycastlePqcMathNtruPolynomialModularResultant *)call {
  
#line 1320
  return [this$0_ resultantWithInt:modulus_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialModularResultant;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:withInt:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "modulus_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;I", "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Lorg/bouncycastle/pqc/math/ntru/polynomial/ModularResultant;>;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask = { "ModResultantTask", "org.bouncycastle.pqc.math.ntru.polynomial", ptrTable, methods, fields, 7, 0x2, 2, 2, 1, -1, -1, 2, -1 };
  return &_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask;
}

@end


#line 1313
void OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask *self, OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *outer$, jint modulus) {
  self->this$0_ = outer$;
  NSObject_init(self);
  
#line 1314
  self->modulus_ = modulus;
}


#line 1313
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask *new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *outer$, jint modulus) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask, initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_, outer$, modulus)
}


#line 1313
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask *create_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *outer$, jint modulus) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask, initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_, outer$, modulus)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/org/bouncycastle/pqc/math/ntru/polynomial/IntegerPolynomial.java"


#line 1327
@implementation OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask


#line 1333
- (instancetype)initWithOrgBouncycastlePqcMathNtruPolynomialModularResultant:(OrgBouncycastlePqcMathNtruPolynomialModularResultant *)modRes1
                    withOrgBouncycastlePqcMathNtruPolynomialModularResultant:(OrgBouncycastlePqcMathNtruPolynomialModularResultant *)modRes2 {
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask_initWithOrgBouncycastlePqcMathNtruPolynomialModularResultant_withOrgBouncycastlePqcMathNtruPolynomialModularResultant_(self, modRes1, modRes2);
  return self;
}


#line 1338
- (OrgBouncycastlePqcMathNtruPolynomialModularResultant *)call {
  
#line 1340
  return OrgBouncycastlePqcMathNtruPolynomialModularResultant_combineRhoWithOrgBouncycastlePqcMathNtruPolynomialModularResultant_withOrgBouncycastlePqcMathNtruPolynomialModularResultant_(modRes1_, modRes2_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathNtruPolynomialModularResultant;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastlePqcMathNtruPolynomialModularResultant:withOrgBouncycastlePqcMathNtruPolynomialModularResultant:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "modRes1_", "LOrgBouncycastlePqcMathNtruPolynomialModularResultant;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "modRes2_", "LOrgBouncycastlePqcMathNtruPolynomialModularResultant;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcMathNtruPolynomialModularResultant;LOrgBouncycastlePqcMathNtruPolynomialModularResultant;", "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Lorg/bouncycastle/pqc/math/ntru/polynomial/ModularResultant;>;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask = { "CombineTask", "org.bouncycastle.pqc.math.ntru.polynomial", ptrTable, methods, fields, 7, 0xa, 2, 2, 1, -1, -1, 2, -1 };
  return &_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask;
}

@end


#line 1333
void OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask_initWithOrgBouncycastlePqcMathNtruPolynomialModularResultant_withOrgBouncycastlePqcMathNtruPolynomialModularResultant_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask *self, OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes1, OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes2) {
  NSObject_init(self);
  
#line 1334
  self->modRes1_ = modRes1;
  self->modRes2_ = modRes2;
}


#line 1333
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask *new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask_initWithOrgBouncycastlePqcMathNtruPolynomialModularResultant_withOrgBouncycastlePqcMathNtruPolynomialModularResultant_(OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes1, OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes2) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask, initWithOrgBouncycastlePqcMathNtruPolynomialModularResultant_withOrgBouncycastlePqcMathNtruPolynomialModularResultant_, modRes1, modRes2)
}


#line 1333
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask *create_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask_initWithOrgBouncycastlePqcMathNtruPolynomialModularResultant_withOrgBouncycastlePqcMathNtruPolynomialModularResultant_(OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes1, OrgBouncycastlePqcMathNtruPolynomialModularResultant *modRes2) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask, initWithOrgBouncycastlePqcMathNtruPolynomialModularResultant_withOrgBouncycastlePqcMathNtruPolynomialModularResultant_, modRes1, modRes2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/org/bouncycastle/pqc/math/ntru/polynomial/IntegerPolynomial.java"


#line 1344
@implementation OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 1344
- (instancetype)init {
  OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 1349
- (JavaMathBigInteger *)nextPrime {
  
#line 1351
  if (index_ < [((id<JavaUtilList>) nil_chk(JreLoadStatic(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial, BIGINT_PRIMES))) size]) {
    
#line 1353
    prime_ = (JavaMathBigInteger *) cast_chk([JreLoadStatic(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial, BIGINT_PRIMES) getWithInt:index_++], [JavaMathBigInteger class]);
  }
  else {
    
#line 1357
    prime_ = [((JavaMathBigInteger *) nil_chk(prime_)) nextProbablePrime];
  }
  
#line 1360
  return prime_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(nextPrime);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "index_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prime_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator = { "PrimeGenerator", "org.bouncycastle.pqc.math.ntru.polynomial", ptrTable, methods, fields, 7, 0xa, 2, 2, 0, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator;
}

@end


#line 1344
void OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator_init(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator *self) {
  NSObject_init(self);
  self->index_ = 0;
}


#line 1344
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator *new_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator, init)
}


#line 1344
OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator *create_OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator)
