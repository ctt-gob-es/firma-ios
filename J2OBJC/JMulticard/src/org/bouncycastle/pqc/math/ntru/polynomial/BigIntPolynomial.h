//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/ntru/polynomial/BigIntPolynomial.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial")
#ifdef RESTRICT_OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial
#define INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial 1
#endif
#undef RESTRICT_OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial

#if !defined (OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_) && (INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial || defined(INCLUDE_OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial))
#define OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_

@class IOSObjectArray;
@class JavaMathBigDecimal;
@class JavaMathBigInteger;
@class OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial;
@class OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;

/*!
 @brief A polynomial with <code>BigInteger</code> coefficients.
 <br>
  Some methods (like <code>add</code>) change the polynomial, others (like <code>mult</code>) do
  not but return the result as a new polynomial.
 */
@interface OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial : NSObject {
 @public
  IOSObjectArray *coeffs_;
}

#pragma mark Public

/*!
 @brief Constructs a <code>BigIntPolynomial</code> from a <code>IntegerPolynomial</code>.The two polynomials are
  independent of each other.
 @param p the original polynomial
 */
- (instancetype)initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)p;

/*!
 @brief Adds another polynomial which can have a different number of coefficients.
 @param b another polynomial
 */
- (void)addWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)b;

/*!
 @brief Makes a copy of the polynomial that is independent of the original.
 */
- (id)java_clone;

/*!
 @brief Divides each coefficient by a <code>BigDecimal</code> and rounds the result to <code>decimalPlaces</code> places.
 @param divisor the number to divide by
 @param decimalPlaces the number of fractional digits to round the result to
 @return a new <code>BigDecimalPolynomial</code>
 */
- (OrgBouncycastlePqcMathNtruPolynomialBigDecimalPolynomial *)divWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor
                                                                                withInt:(jint)decimalPlaces;

/*!
 @brief Divides each coefficient by a <code>BigInteger</code> and rounds the result to the nearest whole number.
 <br>
  Does not return a new polynomial but modifies this polynomial.
 @param divisor the number to divide by
 */
- (void)divWithJavaMathBigInteger:(JavaMathBigInteger *)divisor;

- (jboolean)isEqual:(id)obj;

- (IOSObjectArray *)getCoeffs;

/*!
 @brief Returns the base10 length of the largest coefficient.
 @return length of the longest coefficient
 */
- (jint)getMaxCoeffLength;

- (NSUInteger)hash;

/*!
 @brief Takes each coefficient modulo a number.
 @param modulus
 */
- (void)modWithJavaMathBigInteger:(JavaMathBigInteger *)modulus;

/*!
 @brief Multiplies each coefficient by a <code>BigInteger</code>.Does not return a new polynomial but modifies this polynomial.
 @param factor
 */
- (void)multWithJavaMathBigInteger:(JavaMathBigInteger *)factor;

/*!
 @brief Multiplies the polynomial by another, taking the indices mod N.Does not
  change this polynomial but returns the result as a new polynomial.
 <br>
  Both polynomials must have the same number of coefficients.
 @param poly2 the polynomial to multiply by
 @return a new polynomial
 */
- (OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)multWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)poly2;

/*!
 @brief Subtracts another polynomial which can have a different number of coefficients.
 @param b another polynomial
 */
- (void)subWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)b;

#pragma mark Package-Private

/*!
 @brief Constructs a new polynomial with a given set of coefficients.
 @param coeffs the coefficients
 */
- (instancetype)initWithJavaMathBigIntegerArray:(IOSObjectArray *)coeffs;

/*!
 @brief Constructs a new polynomial with <code>N</code> coefficients initialized to 0.
 @param N the number of coefficients
 */
- (instancetype)initWithInt:(jint)N;

/*!
 @brief Adds another polynomial which can have a different number of coefficients,
  and takes the coefficient values mod <code>modulus</code>.
 @param b another polynomial
 */
- (void)addWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)b
                                             withJavaMathBigInteger:(JavaMathBigInteger *)modulus;

/*!
 @brief Generates a random polynomial with <code>numOnes</code> coefficients equal to 1, 
 <code>numNegOnes</code> coefficients equal to -1, and the rest equal to 0.
 @param N number of coefficients
 @param numOnes number of 1's
 @param numNegOnes number of -1's
 @return a random polynomial.
 */
+ (OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)generateRandomSmallWithInt:(jint)N
                                                                             withInt:(jint)numOnes
                                                                             withInt:(jint)numNegOnes;

/*!
 @brief Multiplies each coefficient by a <code>int</code>.Does not return a new polynomial but modifies this polynomial.
 @param factor
 */
- (void)multWithInt:(jint)factor;

/*!
 @brief Returns the sum of all coefficients, i.e.evaluates the polynomial at 0.
 @return the sum of all coefficients
 */
- (JavaMathBigInteger *)sumCoeffs;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial)

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial, coeffs_, IOSObjectArray *)

FOUNDATION_EXPORT void OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithInt_(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *self, jint N);

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *new_OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithInt_(jint N) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *create_OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithInt_(jint N);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithJavaMathBigIntegerArray_(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *self, IOSObjectArray *coeffs);

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *new_OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithJavaMathBigIntegerArray_(IOSObjectArray *coeffs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *create_OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithJavaMathBigIntegerArray_(IOSObjectArray *coeffs);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *self, OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *p);

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *new_OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *p) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *create_OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_initWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *p);

FOUNDATION_EXPORT OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial_generateRandomSmallWithInt_withInt_withInt_(jint N, jint numOnes, jint numNegOnes);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial")
