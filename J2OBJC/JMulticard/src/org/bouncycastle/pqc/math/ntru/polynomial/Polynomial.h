//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/ntru/polynomial/Polynomial.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialPolynomial")
#ifdef RESTRICT_OrgBouncycastlePqcMathNtruPolynomialPolynomial
#define INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialPolynomial 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialPolynomial 1
#endif
#undef RESTRICT_OrgBouncycastlePqcMathNtruPolynomialPolynomial

#if !defined (OrgBouncycastlePqcMathNtruPolynomialPolynomial_) && (INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialPolynomial || defined(INCLUDE_OrgBouncycastlePqcMathNtruPolynomialPolynomial))
#define OrgBouncycastlePqcMathNtruPolynomialPolynomial_

@class OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial;
@class OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial;

@protocol OrgBouncycastlePqcMathNtruPolynomialPolynomial < JavaObject >

/*!
 @brief Multiplies the polynomial by an <code>IntegerPolynomial</code>,
  taking the indices mod <code>N</code>.
 @param poly2 a polynomial
 @return the product of the two polynomials
 */
- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2;

/*!
 @brief Multiplies the polynomial by an <code>IntegerPolynomial</code>,
  taking the coefficient values mod <code>modulus</code> and the indices mod <code>N</code>.
 @param poly2 a polynomial
 @param modulus a modulus to apply
 @return the product of the two polynomials
 */
- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithOrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2
                                                                                                                 withInt:(jint)modulus;

/*!
 @brief Returns a polynomial that is equal to this polynomial (in the sense that <code>mult(IntegerPolynomial, int)</code>
  returns equal <code>IntegerPolynomial</code>s).The new polynomial is guaranteed to be independent of the original.
 @return a new <code>IntegerPolynomial</code>.
 */
- (OrgBouncycastlePqcMathNtruPolynomialIntegerPolynomial *)toIntegerPolynomial;

/*!
 @brief Multiplies the polynomial by a <code>BigIntPolynomial</code>, taking the indices mod N.Does not
  change this polynomial but returns the result as a new polynomial.
 <br>
  Both polynomials must have the same number of coefficients.
 @param poly2 the polynomial to multiply by
 @return a new polynomial
 */
- (OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)multWithOrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial:(OrgBouncycastlePqcMathNtruPolynomialBigIntPolynomial *)poly2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcMathNtruPolynomialPolynomial)

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathNtruPolynomialPolynomial)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcMathNtruPolynomialPolynomial")
