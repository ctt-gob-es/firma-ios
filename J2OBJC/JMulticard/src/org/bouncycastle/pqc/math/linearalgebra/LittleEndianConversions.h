//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/linearalgebra/LittleEndianConversions.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions")
#ifdef RESTRICT_OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions
#define INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions 1
#endif
#undef RESTRICT_OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions

#if !defined (OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_) && (INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions || defined(INCLUDE_OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions))
#define OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_

@class IOSByteArray;
@class IOSIntArray;

/*!
 @brief This is a utility class containing data type conversions using little-endian
  byte order.
 - seealso: BigEndianConversions
 */
@interface OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions : NSObject

#pragma mark Public

/*!
 @brief Convert an integer to an octet string of length 4.
 @param x the integer to convert
 @return the converted integer
 */
+ (IOSByteArray *)I2OSPWithInt:(jint)x;

/*!
 @brief Convert an integer into a byte array beginning at the specified offset.
 @param value the integer to convert
 @param output the byte array to hold the result
 @param outOff the integer offset into the byte array
 */
+ (void)I2OSPWithInt:(jint)value
       withByteArray:(IOSByteArray *)output
             withInt:(jint)outOff;

/*!
 @brief Convert an integer to a byte array beginning at the specified offset.No
  length checking is performed (i.e., if the integer cannot be encoded with 
 <tt>length</tt> octets, it is truncated).
 @param value the integer to convert
 @param output the byte array to hold the result
 @param outOff the integer offset into the byte array
 @param outLen the length of the encoding
 */
+ (void)I2OSPWithInt:(jint)value
       withByteArray:(IOSByteArray *)output
             withInt:(jint)outOff
             withInt:(jint)outLen;

/*!
 @brief Convert an integer to a byte array of length 8.
 @param input the integer to convert
 @return the converted integer
 */
+ (IOSByteArray *)I2OSPWithLong:(jlong)input;

/*!
 @brief Convert an integer to a byte array of length 8.
 @param input the integer to convert
 @param output byte array holding the output
 @param outOff offset in output array where the result is stored
 */
+ (void)I2OSPWithLong:(jlong)input
        withByteArray:(IOSByteArray *)output
              withInt:(jint)outOff;

/*!
 @brief Convert an octet string of length 4 to an integer.No length checking is
  performed.
 @param input the byte array holding the octet string
 @return an integer representing the octet string <tt>input</tt>
 @throw ArithmeticExceptionif the length of the given octet string is larger than 4.
 */
+ (jint)OS2IPWithByteArray:(IOSByteArray *)input;

/*!
 @brief Convert an byte array of length 4 beginning at <tt>offset</tt> into an
  integer.
 @param input the byte array
 @param inOff the offset into the byte array
 @return the resulting integer
 */
+ (jint)OS2IPWithByteArray:(IOSByteArray *)input
                   withInt:(jint)inOff;

/*!
 @brief Convert a byte array of the given length beginning at <tt>offset</tt>
  into an integer.
 @param input the byte array
 @param inOff the offset into the byte array
 @param inLen the length of the encoding
 @return the resulting integer
 */
+ (jint)OS2IPWithByteArray:(IOSByteArray *)input
                   withInt:(jint)inOff
                   withInt:(jint)inLen;

/*!
 @brief Convert a byte array of length 8 beginning at <tt>inOff</tt> into a
  long integer.
 @param input the byte array
 @param inOff the offset into the byte array
 @return the resulting long integer
 */
+ (jlong)OS2LIPWithByteArray:(IOSByteArray *)input
                     withInt:(jint)inOff;

/*!
 @brief Convert an int array to a byte array of the specified length.No length
  checking is performed (i.e., if the last integer cannot be encoded with 
 <tt>length % 4</tt> octets, it is truncated).
 @param input the int array
 @param outLen the length of the converted array
 @return the converted array
 */
+ (IOSByteArray *)toByteArrayWithIntArray:(IOSIntArray *)input
                                  withInt:(jint)outLen;

/*!
 @brief Convert a byte array to an int array.
 @param input the byte array
 @return the converted array
 */
+ (IOSIntArray *)toIntArrayWithByteArray:(IOSByteArray *)input;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions)

FOUNDATION_EXPORT jint OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_OS2IPWithByteArray_(IOSByteArray *input);

FOUNDATION_EXPORT jint OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_OS2IPWithByteArray_withInt_(IOSByteArray *input, jint inOff);

FOUNDATION_EXPORT jint OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_OS2IPWithByteArray_withInt_withInt_(IOSByteArray *input, jint inOff, jint inLen);

FOUNDATION_EXPORT jlong OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_OS2LIPWithByteArray_withInt_(IOSByteArray *input, jint inOff);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_I2OSPWithInt_(jint x);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_I2OSPWithInt_withByteArray_withInt_(jint value, IOSByteArray *output, jint outOff);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_I2OSPWithInt_withByteArray_withInt_withInt_(jint value, IOSByteArray *output, jint outOff, jint outLen);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_I2OSPWithLong_(jlong input);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_I2OSPWithLong_withByteArray_withInt_(jlong input, IOSByteArray *output, jint outOff);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_toByteArrayWithIntArray_withInt_(IOSIntArray *input, jint outLen);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_toIntArrayWithByteArray_(IOSByteArray *input);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions")
