//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/linearalgebra/BigIntUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/pqc/math/linearalgebra/BigIntUtils.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/math/linearalgebra/BigIntUtils must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcMathLinearalgebraBigIntUtils ()

/*!
 @brief Default constructor (private).
 */
- (instancetype)init;

@end

__attribute__((unused)) static void OrgBouncycastlePqcMathLinearalgebraBigIntUtils_init(OrgBouncycastlePqcMathLinearalgebraBigIntUtils *self);

__attribute__((unused)) static OrgBouncycastlePqcMathLinearalgebraBigIntUtils *new_OrgBouncycastlePqcMathLinearalgebraBigIntUtils_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastlePqcMathLinearalgebraBigIntUtils *create_OrgBouncycastlePqcMathLinearalgebraBigIntUtils_init(void);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/linearalgebra/BigIntUtils.java"


#line 8
@implementation OrgBouncycastlePqcMathLinearalgebraBigIntUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 14
- (instancetype)init {
  OrgBouncycastlePqcMathLinearalgebraBigIntUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 26
+ (jboolean)equalsWithJavaMathBigIntegerArray:(IOSObjectArray *)a
                  withJavaMathBigIntegerArray:(IOSObjectArray *)b {
  return OrgBouncycastlePqcMathLinearalgebraBigIntUtils_equalsWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(a, b);
}


#line 50
+ (void)fillWithJavaMathBigIntegerArray:(IOSObjectArray *)array
                 withJavaMathBigInteger:(JavaMathBigInteger *)value {
  OrgBouncycastlePqcMathLinearalgebraBigIntUtils_fillWithJavaMathBigIntegerArray_withJavaMathBigInteger_(array, value);
}


#line 70
+ (IOSObjectArray *)subArrayWithJavaMathBigIntegerArray:(IOSObjectArray *)input
                                                withInt:(jint)start
                                                withInt:(jint)end {
  return OrgBouncycastlePqcMathLinearalgebraBigIntUtils_subArrayWithJavaMathBigIntegerArray_withInt_withInt_(input, start, end);
}


#line 84
+ (IOSIntArray *)toIntArrayWithJavaMathBigIntegerArray:(IOSObjectArray *)input {
  return OrgBouncycastlePqcMathLinearalgebraBigIntUtils_toIntArrayWithJavaMathBigIntegerArray_(input);
}


#line 104
+ (IOSIntArray *)toIntArrayModQWithInt:(jint)q
           withJavaMathBigIntegerArray:(IOSObjectArray *)input {
  return OrgBouncycastlePqcMathLinearalgebraBigIntUtils_toIntArrayModQWithInt_withJavaMathBigIntegerArray_(q, input);
}


#line 126
+ (IOSByteArray *)toMinimalByteArrayWithJavaMathBigInteger:(JavaMathBigInteger *)value {
  return OrgBouncycastlePqcMathLinearalgebraBigIntUtils_toMinimalByteArrayWithJavaMathBigInteger_(value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(equalsWithJavaMathBigIntegerArray:withJavaMathBigIntegerArray:);
  methods[2].selector = @selector(fillWithJavaMathBigIntegerArray:withJavaMathBigInteger:);
  methods[3].selector = @selector(subArrayWithJavaMathBigIntegerArray:withInt:withInt:);
  methods[4].selector = @selector(toIntArrayWithJavaMathBigIntegerArray:);
  methods[5].selector = @selector(toIntArrayModQWithInt:withJavaMathBigIntegerArray:);
  methods[6].selector = @selector(toMinimalByteArrayWithJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "equals", "[LJavaMathBigInteger;[LJavaMathBigInteger;", "fill", "[LJavaMathBigInteger;LJavaMathBigInteger;", "subArray", "[LJavaMathBigInteger;II", "toIntArray", "[LJavaMathBigInteger;", "toIntArrayModQ", "I[LJavaMathBigInteger;", "toMinimalByteArray", "LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcMathLinearalgebraBigIntUtils = { "BigIntUtils", "org.bouncycastle.pqc.math.linearalgebra", ptrTable, methods, NULL, 7, 0x11, 7, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcMathLinearalgebraBigIntUtils;
}

@end


#line 14
void OrgBouncycastlePqcMathLinearalgebraBigIntUtils_init(OrgBouncycastlePqcMathLinearalgebraBigIntUtils *self) {
  NSObject_init(self);
}


#line 14
OrgBouncycastlePqcMathLinearalgebraBigIntUtils *new_OrgBouncycastlePqcMathLinearalgebraBigIntUtils_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathLinearalgebraBigIntUtils, init)
}


#line 14
OrgBouncycastlePqcMathLinearalgebraBigIntUtils *create_OrgBouncycastlePqcMathLinearalgebraBigIntUtils_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathLinearalgebraBigIntUtils, init)
}


#line 26
jboolean OrgBouncycastlePqcMathLinearalgebraBigIntUtils_equalsWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(IOSObjectArray *a, IOSObjectArray *b) {
  OrgBouncycastlePqcMathLinearalgebraBigIntUtils_initialize();
  jint flag = 0;
  
#line 30
  if (((IOSObjectArray *) nil_chk(a))->size_ != ((IOSObjectArray *) nil_chk(b))->size_) {
    
#line 32
    return false;
  }
  for (jint i = 0; i < a->size_; i++) {
    
#line 39
    flag |= [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(a, i))) compareToWithId:IOSObjectArray_Get(b, i)];
  }
  return flag == 0;
}


#line 50
void OrgBouncycastlePqcMathLinearalgebraBigIntUtils_fillWithJavaMathBigIntegerArray_withJavaMathBigInteger_(IOSObjectArray *array, JavaMathBigInteger *value) {
  OrgBouncycastlePqcMathLinearalgebraBigIntUtils_initialize();
  for (jint i = ((IOSObjectArray *) nil_chk(array))->size_ - 1; i >= 0; i--) {
    
#line 54
    (void) IOSObjectArray_Set(array, i, value);
  }
}


#line 70
IOSObjectArray *OrgBouncycastlePqcMathLinearalgebraBigIntUtils_subArrayWithJavaMathBigIntegerArray_withInt_withInt_(IOSObjectArray *input, jint start, jint end) {
  OrgBouncycastlePqcMathLinearalgebraBigIntUtils_initialize();
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:end - start type:JavaMathBigInteger_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(input, start, result, 0, end - start);
  return result;
}


#line 84
IOSIntArray *OrgBouncycastlePqcMathLinearalgebraBigIntUtils_toIntArrayWithJavaMathBigIntegerArray_(IOSObjectArray *input) {
  OrgBouncycastlePqcMathLinearalgebraBigIntUtils_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(input))->size_];
  for (jint i = 0; i < input->size_; i++) {
    
#line 89
    *IOSIntArray_GetRef(result, i) = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(input, i))) intValue];
  }
  return result;
}


#line 104
IOSIntArray *OrgBouncycastlePqcMathLinearalgebraBigIntUtils_toIntArrayModQWithInt_withJavaMathBigIntegerArray_(jint q, IOSObjectArray *input) {
  OrgBouncycastlePqcMathLinearalgebraBigIntUtils_initialize();
  JavaMathBigInteger *bq = JavaMathBigInteger_valueOfWithLong_(q);
  IOSIntArray *result = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(input))->size_];
  for (jint i = 0; i < input->size_; i++) {
    
#line 110
    *IOSIntArray_GetRef(result, i) = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(input, i))) modWithJavaMathBigInteger:bq])) intValue];
  }
  return result;
}


#line 126
IOSByteArray *OrgBouncycastlePqcMathLinearalgebraBigIntUtils_toMinimalByteArrayWithJavaMathBigInteger_(JavaMathBigInteger *value) {
  OrgBouncycastlePqcMathLinearalgebraBigIntUtils_initialize();
  IOSByteArray *valBytes = [((JavaMathBigInteger *) nil_chk(value)) toByteArray];
  if ((((IOSByteArray *) nil_chk(valBytes))->size_ == 1) || ([value bitLength] & (jint) 0x07) != 0) {
    
#line 131
    return valBytes;
  }
  IOSByteArray *result = [IOSByteArray newArrayWithLength:JreRShift32([value bitLength], 3)];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(valBytes, 1, result, 0, result->size_);
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcMathLinearalgebraBigIntUtils)
