//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2Vector.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2Vector")
#ifdef RESTRICT_OrgBouncycastlePqcMathLinearalgebraGF2Vector
#define INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2Vector 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2Vector 1
#endif
#undef RESTRICT_OrgBouncycastlePqcMathLinearalgebraGF2Vector

#if !defined (OrgBouncycastlePqcMathLinearalgebraGF2Vector_) && (INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2Vector || defined(INCLUDE_OrgBouncycastlePqcMathLinearalgebraGF2Vector))
#define OrgBouncycastlePqcMathLinearalgebraGF2Vector_

#define RESTRICT_OrgBouncycastlePqcMathLinearalgebraVector 1
#define INCLUDE_OrgBouncycastlePqcMathLinearalgebraVector 1
#include "org/bouncycastle/pqc/math/linearalgebra/Vector.h"

@class IOSByteArray;
@class IOSIntArray;
@class JavaSecuritySecureRandom;
@class OrgBouncycastlePqcMathLinearalgebraGF2mField;
@class OrgBouncycastlePqcMathLinearalgebraGF2mVector;
@class OrgBouncycastlePqcMathLinearalgebraPermutation;

/*!
 @brief This class implements the abstract class <tt>Vector</tt> for the case of
  vectors over the finite field GF(2).
 <br>
  For the vector representation the array of type int[] is used, thus one
  element of the array holds 32 elements of the vector.
 - seealso: Vector
 */
@interface OrgBouncycastlePqcMathLinearalgebraGF2Vector : OrgBouncycastlePqcMathLinearalgebraVector

#pragma mark Public

/*!
 @brief Copy constructor.
 @param other another <code>GF2Vector</code>
 */
- (instancetype)initWithOrgBouncycastlePqcMathLinearalgebraGF2Vector:(OrgBouncycastlePqcMathLinearalgebraGF2Vector *)other;

/*!
 @brief Construct the zero vector of the given length.
 @param length the length of the vector
 */
- (instancetype)initWithInt:(jint)length;

/*!
 @brief Construct a random GF2Vector of the given length with the specified
  number of non-zero coefficients.
 @param length the length of the vector
 @param t the number of non-zero coefficients
 @param sr the source of randomness
 */
- (instancetype)initWithInt:(jint)length
                    withInt:(jint)t
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr;

/*!
 @brief Construct a GF2Vector of the given length and with elements from the
  given array.The array is copied and unused bits are masked out.
 @param length the length of the vector
 @param v the element array
 */
- (instancetype)initWithInt:(jint)length
               withIntArray:(IOSIntArray *)v;

/*!
 @brief Construct a random GF2Vector of the given length.
 @param length the length of the vector
 @param sr the source of randomness
 */
- (instancetype)initWithInt:(jint)length
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr;

/*!
 @brief Adds another GF2Vector to this vector.
 @param other another GF2Vector
 @return <tt>this + other</tt>
 @throw ArithmeticExceptionif the other vector is not a GF2Vector or has another
  length.
 */
- (OrgBouncycastlePqcMathLinearalgebraVector *)addWithOrgBouncycastlePqcMathLinearalgebraVector:(OrgBouncycastlePqcMathLinearalgebraVector *)other;

/*!
 @brief Check if the given object is equal to this vector.
 @param other vector
 @return the result of the comparison
 */
- (jboolean)isEqual:(id)other;

/*!
 @brief Return a new vector consisting of the first <tt>k</tt> elements of this
  vector.
 @param k the number of elements to extract
 @return a new <code>GF2Vector</code> consisting of the first <tt>k</tt>
          elements of this vector
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Vector *)extractLeftVectorWithInt:(jint)k;

/*!
 @brief Return a new vector consisting of the last <tt>k</tt> elements of this
  vector.
 @param k the number of elements to extract
 @return a new <code>GF2Vector</code> consisting of the last <tt>k</tt>
          elements of this vector
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Vector *)extractRightVectorWithInt:(jint)k;

/*!
 @brief Return a new vector consisting of the elements of this vector with the
  indices given by the set <tt>setJ</tt>.
 @param setJ the set of indices of elements to extract
 @return the new <code>GF2Vector</code>
          <tt>[this_setJ[0], this_setJ[1], ..., this_setJ[#setJ-1]]</tt>
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Vector *)extractVectorWithIntArray:(IOSIntArray *)setJ;

/*!
 @brief Return the value of the bit of this vector at the specified index.
 @param index the index
 @return the value of the bit (0 or 1)
 */
- (jint)getBitWithInt:(jint)index;

/*!
 @brief Encode this vector as byte array.
 @return the encoded vector
 */
- (IOSByteArray *)getEncoded;

/*!
 @brief Return the Hamming weight of this vector, i.e., compute the number of
  units of this vector.
 @return the Hamming weight of this vector
 */
- (jint)getHammingWeight;

/*!
 @return the int array representation of this vector
 */
- (IOSIntArray *)getVecArray;

/*!
 @return the hash code of this vector
 */
- (NSUInteger)hash;

/*!
 @return whether this is the zero vector (i.e., all elements are zero)
 */
- (jboolean)isZero;

/*!
 @brief Multiply this vector with a permutation.
 @param p the permutation
 @return <tt>this*p = p*this</tt>
 */
- (OrgBouncycastlePqcMathLinearalgebraVector *)multiplyWithOrgBouncycastlePqcMathLinearalgebraPermutation:(OrgBouncycastlePqcMathLinearalgebraPermutation *)p;

/*!
 @brief Construct a new GF2Vector with the given length out of the encoded
  vector.
 @param length the length of the vector
 @param encVec the encoded vector
 @return the decoded vector
 */
+ (OrgBouncycastlePqcMathLinearalgebraGF2Vector *)OS2VPWithInt:(jint)length
                                                 withByteArray:(IOSByteArray *)encVec;

/*!
 @brief Set the coefficient at the given index to 1.If the index is out of
  bounds, do nothing.
 @param index the index of the coefficient to set
 */
- (void)setBitWithInt:(jint)index;

/*!
 @brief Rewrite this vector as a vector over <tt>GF(2<sup>m</sup>)</tt> with 
 <tt>t</tt> elements.
 @param field the finite field  <tt> GF(2 <sup> m </sup> ) </tt>
 @return the converted vector over <tt>GF(2<sup>m</sup>)</tt>
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2mVector *)toExtensionFieldVectorWithOrgBouncycastlePqcMathLinearalgebraGF2mField:(OrgBouncycastlePqcMathLinearalgebraGF2mField *)field;

/*!
 @return a human readable form of this vector
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief Construct a new <code>GF2Vector</code> of the given length and with the given
  element array.The array is not changed and only a reference to the array
  is stored.
 No length checking is performed either.
 @param v the element array
 @param length the length of the vector
 */
- (instancetype)initWithIntArray:(IOSIntArray *)v
                         withInt:(jint)length;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcMathLinearalgebraGF2Vector)

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_(OrgBouncycastlePqcMathLinearalgebraGF2Vector *self, jint length);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Vector *new_OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_(jint length) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Vector *create_OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_(jint length);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withJavaSecuritySecureRandom_(OrgBouncycastlePqcMathLinearalgebraGF2Vector *self, jint length, JavaSecuritySecureRandom *sr);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Vector *new_OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withJavaSecuritySecureRandom_(jint length, JavaSecuritySecureRandom *sr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Vector *create_OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withJavaSecuritySecureRandom_(jint length, JavaSecuritySecureRandom *sr);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withInt_withJavaSecuritySecureRandom_(OrgBouncycastlePqcMathLinearalgebraGF2Vector *self, jint length, jint t, JavaSecuritySecureRandom *sr);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Vector *new_OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withInt_withJavaSecuritySecureRandom_(jint length, jint t, JavaSecuritySecureRandom *sr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Vector *create_OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withInt_withJavaSecuritySecureRandom_(jint length, jint t, JavaSecuritySecureRandom *sr);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withIntArray_(OrgBouncycastlePqcMathLinearalgebraGF2Vector *self, jint length, IOSIntArray *v);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Vector *new_OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withIntArray_(jint length, IOSIntArray *v) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Vector *create_OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithInt_withIntArray_(jint length, IOSIntArray *v);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithOrgBouncycastlePqcMathLinearalgebraGF2Vector_(OrgBouncycastlePqcMathLinearalgebraGF2Vector *self, OrgBouncycastlePqcMathLinearalgebraGF2Vector *other);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Vector *new_OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithOrgBouncycastlePqcMathLinearalgebraGF2Vector_(OrgBouncycastlePqcMathLinearalgebraGF2Vector *other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Vector *create_OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithOrgBouncycastlePqcMathLinearalgebraGF2Vector_(OrgBouncycastlePqcMathLinearalgebraGF2Vector *other);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithIntArray_withInt_(OrgBouncycastlePqcMathLinearalgebraGF2Vector *self, IOSIntArray *v, jint length);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Vector *new_OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithIntArray_withInt_(IOSIntArray *v, jint length) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Vector *create_OrgBouncycastlePqcMathLinearalgebraGF2Vector_initWithIntArray_withInt_(IOSIntArray *v, jint length);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Vector *OrgBouncycastlePqcMathLinearalgebraGF2Vector_OS2VPWithInt_withByteArray_(jint length, IOSByteArray *encVec);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathLinearalgebraGF2Vector)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2Vector")
