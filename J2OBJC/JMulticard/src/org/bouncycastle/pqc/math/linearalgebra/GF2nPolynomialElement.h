//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nPolynomialElement.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement")
#ifdef RESTRICT_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement
#define INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement 1
#endif
#undef RESTRICT_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement

#if !defined (OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_) && (INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement || defined(INCLUDE_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement))
#define OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_

#define RESTRICT_OrgBouncycastlePqcMathLinearalgebraGF2nElement 1
#define INCLUDE_OrgBouncycastlePqcMathLinearalgebraGF2nElement 1
#include "org/bouncycastle/pqc/math/linearalgebra/GF2nElement.h"

@class IOSByteArray;
@class IOSIntArray;
@class JavaMathBigInteger;
@class JavaUtilRandom;
@class OrgBouncycastlePqcMathLinearalgebraGF2Polynomial;
@class OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField;
@protocol OrgBouncycastlePqcMathLinearalgebraGFElement;

/*!
 @brief This class implements elements of finite binary fields <i>GF(2<sup>n</sup>)</i>
  using polynomial representation.For more information on the arithmetic see
  for example IEEE Standard 1363 or <a href=https://www.certicom.com/research/online.html>
  Certicom online-tutorial</a>.
 - seealso: "GF2nField"
 - seealso: GF2nPolynomialField
 - seealso: GF2nONBElement
 - seealso: GF2Polynomial
 */
@interface OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement : OrgBouncycastlePqcMathLinearalgebraGF2nElement

#pragma mark Public

/*!
 @brief Creates a new GF2nPolynomialElement by cloning the given GF2nPolynomialElement 
 <i>b</i>.
 @param other the GF2nPolynomialElement to clone
 */
- (instancetype)initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement:(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *)other;

/*!
 @brief Creates a new GF2nPolynomialElement using the given field <i>f</i> and
  byte[] <i>os</i> as value.The conversion is done according to 1363.
 @param f the GF2nField to use
 @param os the octet string to assign to this GF2nPolynomialElement
 - seealso: "P1363 5.5.5 p23, OS2FEP/OS2BSP"
 */
- (instancetype)initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField:(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *)f
                                                                 withByteArray:(IOSByteArray *)os;

/*!
 @brief Creates a new GF2nPolynomialElement using the given field and Bitstring.
 @param f the GF2nPolynomialField to use
 @param bs the desired value as Bitstring
 */
- (instancetype)initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField:(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *)f
                          withOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)bs;

/*!
 @brief Creates a new GF2nPolynomialElement using the given field <i>f</i> and
  int[] <i>is</i> as value.
 @param f the GF2nField to use
 @param is the integer string to assign to this GF2nPolynomialElement
 */
- (instancetype)initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField:(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *)f
                                                                  withIntArray:(IOSIntArray *)is;

/*!
 @brief Create a new random GF2nPolynomialElement using the given field and
  source of randomness.
 @param f the GF2nField to use
 @param rand the source of randomness
 */
- (instancetype)initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField:(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *)f
                                                            withJavaUtilRandom:(JavaUtilRandom *)rand;

/*!
 @brief Compute the sum of this element and <tt>addend</tt>.
 @param addend the addend
 @return <tt>this + other</tt> (newly created)
 */
- (id<OrgBouncycastlePqcMathLinearalgebraGFElement>)addWithOrgBouncycastlePqcMathLinearalgebraGFElement:(id<OrgBouncycastlePqcMathLinearalgebraGFElement>)addend;

/*!
 @brief Compute <tt>this + addend</tt> (overwrite <tt>this</tt>).
 @param addend the addend
 */
- (void)addToThisWithOrgBouncycastlePqcMathLinearalgebraGFElement:(id<OrgBouncycastlePqcMathLinearalgebraGFElement>)addend;

/*!
 @brief Creates a new GF2nPolynomialElement by cloning this
  GF2nPolynomialElement.
 @return a copy of this element
 */
- (id)java_clone;

/*!
 @brief Compare this element with another object.
 @param other the other object
 @return <tt>true</tt> if the two objects are equal, <tt>false</tt>
          otherwise
 */
- (jboolean)isEqual:(id)other;

/*!
 @return the hash code of this element
 */
- (NSUInteger)hash;

/*!
 @brief Returns <tt>this</tt> element + 'one".
 @return <tt>this</tt> + 'one'
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nElement *)increase;

/*!
 @brief Increases this element by 'one'.
 */
- (void)increaseThis;

/*!
 @brief Compute the multiplicative inverse of this element.
 @return <tt>this<sup>-1</sup></tt> (newly created)
 @throw ArithmeticExceptionif <tt>this</tt> is the zero element.
 - seealso: GF2nPolynomialElement#invertMAIA
 - seealso: GF2nPolynomialElement#invertEEA
 - seealso: GF2nPolynomialElement#invertSquare
 */
- (id<OrgBouncycastlePqcMathLinearalgebraGFElement>)invert;

/*!
 @brief Calculates the multiplicative inverse of <i>this</i> and returns the
  result in a new GF2nPolynomialElement.
 @return <i>this</i>^(-1)
 @throw ArithmeticExceptionif <i>this</i> equals zero
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *)invertEEA;

/*!
 @brief Calculates the multiplicative inverse of <i>this</i> using the modified
  almost inverse algorithm and returns the result in a new
  GF2nPolynomialElement.
 @return <i>this</i>^(-1)
 @throw ArithmeticExceptionif <i>this</i> equals zero
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *)invertMAIA;

/*!
 @brief Calculates the multiplicative inverse of <i>this</i> and returns the
  result in a new GF2nPolynomialElement.
 @return <i>this</i>^(-1)
 @throw ArithmeticExceptionif <i>this</i> equals zero
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *)invertSquare;

/*!
 @brief Tests if the GF2nPolynomialElement has 'one' as value.
 @return true if <i>this</i> equals one (this == 1)
 */
- (jboolean)isOne;

/*!
 @brief Checks whether this element is zero.
 @return <tt>true</tt> if <tt>this</tt> is the zero element
 */
- (jboolean)isZero;

/*!
 @brief Compute the product of this element and <tt>factor</tt>.
 @param factor the factor
 @return <tt>this * factor</tt> (newly created)
 */
- (id<OrgBouncycastlePqcMathLinearalgebraGFElement>)multiplyWithOrgBouncycastlePqcMathLinearalgebraGFElement:(id<OrgBouncycastlePqcMathLinearalgebraGFElement>)factor;

/*!
 @brief Compute <tt>this * factor</tt> (overwrite <tt>this</tt>).
 @param factor the factor
 */
- (void)multiplyThisByWithOrgBouncycastlePqcMathLinearalgebraGFElement:(id<OrgBouncycastlePqcMathLinearalgebraGFElement>)factor;

/*!
 @brief Create the one element.
 @param f the finite field
 @return the one element in the given finite field
 */
+ (OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *)ONEWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField:(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *)f;

/*!
 @brief Calculates <i>this</i> to the power of <i>k</i> and returns the result
  in a new GF2nPolynomialElement.
 @param k the power
 @return <i>this</i>^<i>k</i> in a new GF2nPolynomialElement
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *)powerWithInt:(jint)k;

/*!
 @brief Solves the quadratic equation <tt>z<sup>2</sup> + z = this</tt> if
  such a solution exists.This method returns one of the two possible
  solutions.
 The other solution is <tt>z + 1</tt>. Use z.increase() to
  compute this solution.
 @return a GF2nPolynomialElement representing one z satisfying the
          equation <tt>z<sup>2</sup> + z = this</tt>
 - seealso: "IEEE 1363, Annex A.4.7"
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nElement *)solveQuadraticEquation;

/*!
 @brief This method is used internally to map the square()-calls within
  GF2nPolynomialElement to one of the possible squaring methods.
 @return <tt>this<sup>2</sup></tt> (newly created)
 - seealso: GF2nPolynomialElement#squarePreCalc
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nElement *)square;

/*!
 @brief Squares this GF2nPolynomialElement by shifting left its Bitstring and
  reducing.This is supposed to be the slowest method.
 Use squarePreCalc or
  squareMatrix instead.
 @return <tt>this<sup>2</sup></tt> (newly created)
 - seealso: GF2nPolynomialElement#squareMatrix
 - seealso: GF2nPolynomialElement#squarePreCalc
 - seealso: GF2Polynomial#squareThisBitwise
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *)squareBitwise;

/*!
 @brief Squares this GF2nPolynomialElement using GF2nField's squaring matrix.
 This is supposed to be fast when using a polynomial (no tri- or
  pentanomial) as fieldpolynomial. Use squarePreCalc when using a tri- or
  pentanomial as fieldpolynomial instead.
 @return <tt>this<sup>2</sup></tt> (newly created)
 - seealso: GF2Polynomial#vectorMult
 - seealso: GF2nPolynomialElement#squarePreCalc
 - seealso: GF2nPolynomialElement#squareBitwise
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *)squareMatrix;

/*!
 @brief Squares this GF2nPolynomialElement by using precalculated values and
  reducing.This is supposed to de fastest when using a trinomial or
  pentanomial as field polynomial.
 Use squareMatrix when using a ordinary
  polynomial as field polynomial.
 @return <tt>this<sup>2</sup></tt> (newly created)
 - seealso: GF2nPolynomialElement#squareMatrix
 - seealso: GF2Polynomial#squareThisPreCalc
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *)squarePreCalc;

/*!
 @brief Compute the square root of this element and return the result in a new 
 <code>GF2nPolynomialElement</code>.
 @return <tt>this<sup>1/2</sup></tt> (newly created)
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nElement *)squareRoot;

/*!
 @brief Compute the square root of this element.
 */
- (void)squareRootThis;

/*!
 @brief This method is used internally to map the square()-calls within
  GF2nPolynomialElement to one of the possible squaring methods.
 */
- (void)squareThis;

/*!
 @brief Squares this GF2nPolynomialElement by shifting left its Bitstring and
  reducing.This is supposed to be the slowest method.
 Use squarePreCalc or
  squareMatrix instead.
 - seealso: GF2nPolynomialElement#squareMatrix
 - seealso: GF2nPolynomialElement#squarePreCalc
 - seealso: GF2Polynomial#squareThisBitwise
 */
- (void)squareThisBitwise;

/*!
 @brief Squares this GF2nPolynomialElement using GF2nFields squaring matrix.This
  is supposed to be fast when using a polynomial (no tri- or pentanomial)
  as fieldpolynomial.
 Use squarePreCalc when using a tri- or pentanomial as
  fieldpolynomial instead.
 - seealso: GF2Polynomial#vectorMult
 - seealso: GF2nPolynomialElement#squarePreCalc
 - seealso: GF2nPolynomialElement#squareBitwise
 */
- (void)squareThisMatrix;

/*!
 @brief Squares this GF2nPolynomialElement by using precalculated values and
  reducing.This is supposed to de fastest when using a tri- or pentanomial
  as fieldpolynomial.
 Use squareMatrix when using a ordinary polynomial as fieldpolynomial.
 - seealso: GF2nPolynomialElement#squareMatrix
 - seealso: GF2Polynomial#squareThisPreCalc
 */
- (void)squareThisPreCalc;

/*!
 @brief Returns whether the rightmost bit of the bit representation is set.This
  is needed for data conversion according to 1363.
 @return true if the rightmost bit of this element is set
 */
- (jboolean)testRightmostBit;

/*!
 @brief Converts this GF2nPolynomialElement to a byte[] according to 1363.
 @return a byte[] representing the value of this GF2nPolynomialElement
 - seealso: "P1363 5.5.2 p22f BS2OSP, FE2OSP"
 */
- (IOSByteArray *)toByteArray;

/*!
 @brief Converts this GF2nPolynomialElement to an integer according to 1363.
 @return a BigInteger representing the value of this
          GF2nPolynomialElement
 - seealso: "P1363 5.5.1 p22 BS2IP"
 */
- (JavaMathBigInteger *)toFlexiBigInt;

/*!
 @brief Returns a string representing this Bitstrings value using hexadecimal
  radix in MSB-first order.
 @return a String representing this Bitstrings value.
 */
- (NSString *)description;

/*!
 @brief Returns a string representing this Bitstrings value using hexadecimal or
  binary radix in MSB-first order.
 @param radix the radix to use (2 or 16, otherwise 2 is used)
 @return a String representing this Bitstrings value.
 */
- (NSString *)toStringWithInt:(jint)radix;

/*!
 @brief Returns the trace of this GF2nPolynomialElement.
 @return the trace of this GF2nPolynomialElement
 */
- (jint)trace;

/*!
 @brief Create the zero element.
 @param f the finite field
 @return the zero element in the given finite field
 */
+ (OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *)ZEROWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField:(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *)f;

#pragma mark Package-Private

/*!
 @brief Assigns the value 'one' to this Polynomial.
 */
- (void)assignOne;

/*!
 @brief Assigns the value 'zero' to this Polynomial.
 */
- (void)assignZero;

/*!
 @brief Checks whether the indexed bit of the bit representation is set.
 @param index the index of the bit to test
 @return <tt>true</tt> if the indexed bit is set
 */
- (jboolean)testBitWithInt:(jint)index;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement)

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField_withJavaUtilRandom_(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *self, OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *f, JavaUtilRandom *rand);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *new_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField_withJavaUtilRandom_(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *f, JavaUtilRandom *rand) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *create_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField_withJavaUtilRandom_(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *f, JavaUtilRandom *rand);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField_withOrgBouncycastlePqcMathLinearalgebraGF2Polynomial_(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *self, OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *f, OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *bs);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *new_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField_withOrgBouncycastlePqcMathLinearalgebraGF2Polynomial_(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *f, OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *bs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *create_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField_withOrgBouncycastlePqcMathLinearalgebraGF2Polynomial_(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *f, OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *bs);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField_withByteArray_(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *self, OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *f, IOSByteArray *os);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *new_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField_withByteArray_(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *f, IOSByteArray *os) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *create_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField_withByteArray_(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *f, IOSByteArray *os);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField_withIntArray_(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *self, OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *f, IOSIntArray *is);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *new_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField_withIntArray_(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *f, IOSIntArray *is) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *create_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField_withIntArray_(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *f, IOSIntArray *is);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *self, OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *other);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *new_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *other) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *create_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *other);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_ZEROWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField_(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *f);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement *OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_ONEWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField_(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialField *f);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement")
