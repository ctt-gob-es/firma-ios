//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2Polynomial.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial")
#ifdef RESTRICT_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial
#define INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial 1
#endif
#undef RESTRICT_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial

#if !defined (OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_) && (INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial || defined(INCLUDE_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial))
#define OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_

@class IOSByteArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaMathBigInteger;
@class JavaUtilRandom;

/*!
 @brief This class stores very long strings of bits and does some basic arithmetics.
 It is used by <tt>GF2nField</tt>, <tt>GF2nPolynomialField</tt> and 
 <tt>GFnPolynomialElement</tt>.
 - seealso: GF2nPolynomialElement
 - seealso: GF2nField
 */
@interface OrgBouncycastlePqcMathLinearalgebraGF2Polynomial : NSObject

#pragma mark Public

/*!
 @brief Creates a new GF2Polynomial by cloneing the given GF2Polynomial <i>b</i>.
 @param b the GF2Polynomial to clone
 */
- (instancetype)initWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)b;

/*!
 @brief Creates a new GF2Polynomial of the given <i>length</i> and value zero.
 @param length the desired number of bits to store
 */
- (instancetype)initWithInt:(jint)length;

/*!
 @brief Creates a new GF2Polynomial by converting the given FlexiBigInt <i>bi</i>
  according to 1363 and using the given <i>length</i>.
 @param length the intended length of this polynomial
 @param bi the FlexiBigInt to assign to this polynomial
 - seealso: "P1363 5.5.1 p22, I2BSP"
 */
- (instancetype)initWithInt:(jint)length
     withJavaMathBigInteger:(JavaMathBigInteger *)bi;

/*!
 @brief Creates a new GF2Polynomial by converting the given byte[] <i>os</i>
  according to 1363 and using the given <i>length</i>.
 @param length the intended length of this polynomial
 @param os the octet string to assign to this polynomial
 - seealso: "P1363 5.5.2 p22f, OS2BSP"
 */
- (instancetype)initWithInt:(jint)length
              withByteArray:(IOSByteArray *)os;

/*!
 @brief Creates a new GF2Polynomial of the given <i>length</i> using the given
  int[].LSB is contained in bs[0].
 @param length the desired number of bits to store
 @param bs contains the desired value, LSB in bs[0]
 */
- (instancetype)initWithInt:(jint)length
               withIntArray:(IOSIntArray *)bs;

/*!
 @brief Creates a new GF2Polynomial of the given <i>length</i> and random value.
 @param length the desired number of bits to store
 @param rand SecureRandom to use for randomization
 */
- (instancetype)initWithInt:(jint)length
         withJavaUtilRandom:(JavaUtilRandom *)rand;

/*!
 @brief Creates a new GF2Polynomial of the given <i>length</i> and value
  selected by <i>value</i>:
  <UL>
  <LI>ZERO</LI>
  <LI>ONE</LI>
  <LI>RANDOM</LI>
  <LI>X</LI>
  <LI>ALL</LI>
  </UL>
 @param length the desired number of bits to store
 @param value the value described by a String
 */
- (instancetype)initWithInt:(jint)length
               withNSString:(NSString *)value;

/*!
 @brief Adds two GF2Polynomials, <i>this</i> and <i>b</i>, and returns the
  result.
 <i>this</i> and <i>b</i> can be of different size.
 @param b a GF2Polynomial
 @return a new GF2Polynomial (<i>this</i> + <i>b</i>)
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)addWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)b;

/*!
 @brief Adds <i>b</i> to this GF2Polynomial and assigns the result to this
  GF2Polynomial.
 <i>b</i> can be of different size.
 @param b GF2Polynomial to add to this GF2Polynomial
 */
- (void)addToThisWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)b;

/*!
 @brief Sets all Bits to 1.
 */
- (void)assignAll;

/*!
 @brief Sets the LSB to 1 and all other to 0, assigning 'one' to this
  GF2Polynomial.
 */
- (void)assignOne;

/*!
 @brief Sets Bit 1 to 1 and all other to 0, assigning 'x' to this GF2Polynomial.
 */
- (void)assignX;

/*!
 @brief Resets all bits to zero.
 */
- (void)assignZero;

/*!
 @return a copy of this GF2Polynomial
 */
- (id)java_clone;

/*!
 @brief Divides <i>this</i> by <i>g</i> and returns the quotient and remainder
  in a new GF2Polynomial[2], quotient in [0], remainder in [1].
 @param g GF2Polynomial != 0
 @return a new GF2Polynomial[2] containing quotient and remainder
 */
- (IOSObjectArray *)divideWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)g;

/*!
 @brief Returns true if two GF2Polynomials have the same size and value and thus
  are equal.
 @param other the other GF2Polynomial
 @return true if this GF2Polynomial equals <i>b</i> (<i>this</i> ==
          <i>b</i>)
 */
- (jboolean)isEqual:(id)other;

/*!
 @brief Expands len and int[] value to <i>i</i>.This is useful before adding
  two GF2Polynomials of different size.
 @param i the intended length
 */
- (void)expandNWithInt:(jint)i;

/*!
 @brief Returns the greatest common divisor of <i>this</i> and <i>g</i> in a
  new GF2Polynomial.
 @param g GF2Polynomial != 0
 @return a new GF2Polynomial gcd(<i>this</i>,<i>g</i>)
 @throw ArithmeticExceptionif <i>this</i> and <i>g</i> both are equal to zero
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)gcdWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)g;

/*!
 @brief Returns the bit at position <i>i</i>.
 @param i int
 @return the bit at position <i>i</i> if <i>i</i> is a valid position, 0
          otherwise.
 */
- (jint)getBitWithInt:(jint)i;

/*!
 @brief Returns the length of this GF2Polynomial.The length can be greater than
  the degree.
 To get the degree call reduceN() before calling getLength().
 @return the length of this GF2Polynomial
 */
- (jint)getLength;

/*!
 @return the hash code of this polynomial
 */
- (NSUInteger)hash;

/*!
 @brief Toggles the LSB of this GF2Polynomial, increasing the value by 'one' and
  returns the result in a new GF2Polynomial.
 @return <tt>this + 1</tt>
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)increase;

/*!
 @brief Toggles the LSB of this GF2Polynomial, increasing its value by 'one'.
 */
- (void)increaseThis;

/*!
 @brief Checks if <i>this</i> is irreducible, according to IEEE P1363, A.5.5,
  p103.
 <br>
  Note: The algorithm from IEEE P1363, A5.5 can be used to check a
  polynomial with coefficients in GF(2^r) for irreducibility.As this class
  only represents polynomials with coefficients in GF(2), the algorithm is
  adapted to the case r=1.
 @return true if <i>this</i> is irreducible
 - seealso: "P1363, A.5.5, p103"
 */
- (jboolean)isIrreducible;

/*!
 @brief Tests if all bits are reset to 0 and LSB is set to 1.
 @return true if this GF2Polynomial equals 'one' (<i>this</i> == 1)
 */
- (jboolean)isOne;

/*!
 @brief Tests if all bits equal zero.
 @return true if this GF2Polynomial equals 'zero' (<i>this</i> == 0)
 */
- (jboolean)isZero;

/*!
 @brief Multiplies this GF2Polynomial with <i>b</i> and returns the result in a
  new GF2Polynomial.This method does not reduce the result in GF(2^N).
 This method uses Karatzuba multiplication.
 @param b a GF2Polynomial
 @return a new GF2Polynomial (<i>this</i> * <i>b</i>)
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)multiplyWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)b;

/*!
 @brief Multiplies this GF2Polynomial with <i>b</i> and returns the result in a
  new GF2Polynomial.This method does not reduce the result in GF(2^N).
 This method uses classic multiplication (schoolbook).
 @param b a GF2Polynomial
 @return a new GF2Polynomial (<i>this</i> * <i>b</i>)
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)multiplyClassicWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)b;

/*!
 @brief Returns the absolute quotient of <i>this</i> divided by <i>g</i> in a
  new GF2Polynomial.
 @param g GF2Polynomial != 0
 @return a new GF2Polynomial |_ <i>this</i> / <i>g</i> _|
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)quotientWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)g;

/*!
 @brief Fills all len bits of this GF2Polynomial with random values.
 */
- (void)randomize;

/*!
 @brief Fills all len bits of this GF2Polynomial with random values using the
  specified source of randomness.
 @param rand the source of randomness
 */
- (void)randomizeWithJavaUtilRandom:(JavaUtilRandom *)rand;

/*!
 @brief Reduces len by finding the most significant bit set to one and reducing
  len and blocks.
 */
- (void)reduceN;

/*!
 @brief Returns the remainder of <i>this</i> divided by <i>g</i> in a new
  GF2Polynomial.
 @param g GF2Polynomial != 0
 @return a new GF2Polynomial (<i>this</i> % <i>g</i>)
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)remainderWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)g;

/*!
 @brief Resets the bit at position <i>i</i>.
 @param i int
 @throw RuntimeExceptionif (<i>i</i> &lt; 0) || (<i>i</i> &gt; (len - 1))
 */
- (void)resetBitWithInt:(jint)i;

/*!
 @brief Sets the bit at position <i>i</i>.
 @param i int
 @throw RuntimeExceptionif (<i>i</i> &lt; 0) || (<i>i</i> &gt; (len - 1))
 */
- (void)setBitWithInt:(jint)i;

/*!
 @brief Returns this GF2Polynomial shift-left by 1 in a new GF2Polynomial.
 @return a new GF2Polynomial (this &lt;&lt; 1)
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)shiftLeft;

/*!
 @brief Returns this GF2Polynomial shift-left by <i>k</i> in a new
  GF2Polynomial.
 @param k int
 @return a new GF2Polynomial (this &lt;&lt; <i>k</i>)
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)shiftLeftWithInt:(jint)k;

/*!
 @brief Shifts left b and adds the result to Its a fast version of 
 <tt>this = add(b.shl(k));</tt>
 @param b GF2Polynomial to shift and add to this
 @param k the amount to shift
 - seealso: GF2nPolynomialElement#invertEEA
 */
- (void)shiftLeftAddThisWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)b
                                                                     withInt:(jint)k;

/*!
 @brief Shifts-left this by one and enlarges the size of value if necesary.
 */
- (void)shiftLeftThis;

/*!
 @brief Returns this GF2Polynomial shift-right by 1 in a new GF2Polynomial.
 @return a new GF2Polynomial (this &lt;&lt; 1)
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)shiftRight;

/*!
 @brief Shifts-right this GF2Polynomial by 1.
 */
- (void)shiftRightThis;

/*!
 @brief Squares this GF2Polynomial and expands it accordingly.This method does
  not reduce the result in GF(2^N).
 There exists a faster method for
  squaring in GF(2^N).
 - seealso: GF2nPolynomialElement#square
 */
- (void)squareThisBitwise;

/*!
 @brief Squares this GF2Polynomial by using precomputed values of squaringTable.
 This method does not reduce the result in GF(2^N).
 */
- (void)squareThisPreCalc;

/*!
 @brief Subtracts two GF2Polynomials, <i>this</i> and <i>b</i>, and returns the
  result in a new GF2Polynomial.
 <i>this</i> and <i>b</i> can be of
  different size.
 @param b a GF2Polynomial
 @return a new GF2Polynomial (<i>this</i> - <i>b</i>)
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)subtractWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)b;

/*!
 @brief Subtracts <i>b</i> from this GF2Polynomial and assigns the result to
  this GF2Polynomial.
 <i>b</i> can be of different size.
 @param b a GF2Polynomial
 */
- (void)subtractFromThisWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)b;

/*!
 @brief Tests the bit at position <i>i</i>.
 @param i the position of the bit to be tested
 @return true if the bit at position <i>i</i> is set (a(<i>i</i>) ==
          1). False if (<i>i</i> &lt; 0) || (<i>i</i> &gt; (len - 1))
 */
- (jboolean)testBitWithInt:(jint)i;

/*!
 @brief Converts this polynomial to a byte[] (octet string) according to 1363.
 @return a byte[] representing the value of this polynomial
 - seealso: "P1363 5.5.2 p22f, BS2OSP"
 */
- (IOSByteArray *)toByteArray;

/*!
 @brief Converts this polynomial to an integer according to 1363.
 @return a FlexiBigInt representing the value of this polynomial
 - seealso: "P1363 5.5.1 p22, BS2IP"
 */
- (JavaMathBigInteger *)toFlexiBigInt;

/*!
 @brief Returns the value of this GF2Polynomial in an int[].
 @return the value of this GF2Polynomial in a new int[], LSB in int[0]
 */
- (IOSIntArray *)toIntegerArray;

/*!
 @brief Returns a string representing this GF2Polynomials value using hexadecimal
  or binary radix in MSB-first order.
 @param radix the radix to use (2 or 16, otherwise 2 is used)
 @return a String representing this GF2Polynomials value.
 */
- (NSString *)toStringWithInt:(jint)radix;

/*!
 @brief Does a vector-multiplication modulo 2 and returns the result as boolean.
 @param b GF2Polynomial
 @return this x <i>b</i> as boolean (1-&gt;true, 0-&gt;false)
 */
- (jboolean)vectorMultWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)b;

/*!
 @brief Returns the bitwise exclusive-or of <i>this</i> and <i>b</i> in a new
  GF2Polynomial.
 <i>this</i> and <i>b</i> can be of different size.
 @param b GF2Polynomial
 @return a new GF2Polynomial (<i>this</i> ^ <i>b</i>)
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)xor__WithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)b;

/*!
 @brief Xors the bit at position <i>i</i>.
 @param i int
 @throw RuntimeExceptionif (<i>i</i> &lt; 0) || (<i>i</i> &gt; (len - 1))
 */
- (void)xorBitWithInt:(jint)i;

/*!
 @brief Computes the bitwise exclusive-or of this GF2Polynomial and <i>b</i> and
  stores the result in this GF2Polynomial.
 <i>b</i> can be of different
  size.
 @param b GF2Polynomial
 */
- (void)xorThisByWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)b;

#pragma mark Package-Private

/*!
 @brief Reduces this GF2Polynomial using the pentanomial x^<i>m</i> + x^<i>pc[2]</i> +
  x^<i>pc[1]</i> + x^<i>pc[0]</i> + 1.
 @param m the degree of the used field
 @param pc degrees of the middle x's in the pentanomial
 */
- (void)reducePentanomialWithInt:(jint)m
                    withIntArray:(IOSIntArray *)pc;

/*!
 @brief Reduces this GF2Polynomial using the trinomial x^<i>m</i> + x^<i>tc</i> +
  1.
 @param m the degree of the used field
 @param tc degree of the middle x in the trinomial
 */
- (void)reduceTrinomialWithInt:(jint)m
                       withInt:(jint)tc;

/*!
 @brief Shifts-left this GF2Polynomial's value blockwise 1 block resulting in a
  shift-left by 32.
 - seealso: GF2Polynomial#multiply
 */
- (void)shiftBlocksLeft;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial)

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *self, jint length);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *new_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_(jint length) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *create_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_(jint length);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withJavaUtilRandom_(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *self, jint length, JavaUtilRandom *rand);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *new_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withJavaUtilRandom_(jint length, JavaUtilRandom *rand) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *create_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withJavaUtilRandom_(jint length, JavaUtilRandom *rand);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withNSString_(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *self, jint length, NSString *value);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *new_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withNSString_(jint length, NSString *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *create_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withNSString_(jint length, NSString *value);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withIntArray_(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *self, jint length, IOSIntArray *bs);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *new_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withIntArray_(jint length, IOSIntArray *bs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *create_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withIntArray_(jint length, IOSIntArray *bs);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withByteArray_(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *self, jint length, IOSByteArray *os);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *new_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withByteArray_(jint length, IOSByteArray *os) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *create_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withByteArray_(jint length, IOSByteArray *os);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withJavaMathBigInteger_(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *self, jint length, JavaMathBigInteger *bi);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *new_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withJavaMathBigInteger_(jint length, JavaMathBigInteger *bi) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *create_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withJavaMathBigInteger_(jint length, JavaMathBigInteger *bi);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial_(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *self, OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *b);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *new_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial_(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *b) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *create_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial_(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *b);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial")
