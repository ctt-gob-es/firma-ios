//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2mMatrix.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2mField.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2mMatrix.h"
#include "org/bouncycastle/pqc/math/linearalgebra/IntUtils.h"
#include "org/bouncycastle/pqc/math/linearalgebra/Matrix.h"
#include "org/bouncycastle/pqc/math/linearalgebra/Permutation.h"
#include "org/bouncycastle/pqc/math/linearalgebra/Vector.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/math/linearalgebra/GF2mMatrix must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcMathLinearalgebraGF2mMatrix ()

+ (void)swapColumnsWithIntArray2:(IOSObjectArray *)matrix
                         withInt:(jint)first
                         withInt:(jint)second;

- (void)multRowWithElementThisWithIntArray:(IOSIntArray *)row
                                   withInt:(jint)element;

- (IOSIntArray *)multRowWithElementWithIntArray:(IOSIntArray *)row
                                        withInt:(jint)element;

/*!
 @brief Add one row to another.
 @param fromRow the addend
 @param toRow the row to add to
 */
- (void)addToRowWithIntArray:(IOSIntArray *)fromRow
                withIntArray:(IOSIntArray *)toRow;

@end

__attribute__((unused)) static void OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_swapColumnsWithIntArray2_withInt_withInt_(IOSObjectArray *matrix, jint first, jint second);

__attribute__((unused)) static void OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementThisWithIntArray_withInt_(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *self, IOSIntArray *row, jint element);

__attribute__((unused)) static IOSIntArray *OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementWithIntArray_withInt_(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *self, IOSIntArray *row, jint element);

__attribute__((unused)) static void OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_addToRowWithIntArray_withIntArray_(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *self, IOSIntArray *fromRow, IOSIntArray *toRow);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2mMatrix.java"


#line 9
@implementation OrgBouncycastlePqcMathLinearalgebraGF2mMatrix


#line 31
- (instancetype)initWithOrgBouncycastlePqcMathLinearalgebraGF2mField:(OrgBouncycastlePqcMathLinearalgebraGF2mField *)field
                                                       withByteArray:(IOSByteArray *)enc {
  OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_(self, field, enc);
  return self;
}


#line 88
- (instancetype)initWithOrgBouncycastlePqcMathLinearalgebraGF2mMatrix:(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *)other {
  OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_(self, other);
  return self;
}


#line 106
- (instancetype)initWithOrgBouncycastlePqcMathLinearalgebraGF2mField:(OrgBouncycastlePqcMathLinearalgebraGF2mField *)field
                                                       withIntArray2:(IOSObjectArray *)matrix {
  OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray2_(self, field, matrix);
  return self;
}


#line 117
- (IOSByteArray *)getEncoded {
  
#line 120
  jint d = 8;
  jint count = 1;
  while ([((OrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) getDegree] > d) {
    
#line 124
    count++;
    d += 8;
  }
  
#line 128
  IOSByteArray *bf = [IOSByteArray newArrayWithLength:self->numRows_ * self->numColumns_ * count + 4];
  *IOSByteArray_GetRef(bf, 0) = (jbyte) (self->numRows_ & (jint) 0xff);
  *IOSByteArray_GetRef(bf, 1) = (jbyte) ((JreURShift32(self->numRows_, 8)) & (jint) 0xff);
  *IOSByteArray_GetRef(bf, 2) = (jbyte) ((JreURShift32(self->numRows_, 16)) & (jint) 0xff);
  *IOSByteArray_GetRef(bf, 3) = (jbyte) ((JreURShift32(self->numRows_, 24)) & (jint) 0xff);
  
#line 134
  count = 4;
  for (jint i = 0; i < self->numRows_; i++) {
    
#line 137
    for (jint j = 0; j < self->numColumns_; j++) {
      
#line 139
      for (jint jj = 0; jj < d; jj += 8) {
        
#line 141
        *IOSByteArray_GetRef(bf, count++) = (jbyte) (JreURShift32(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), j), jj));
      }
    }
  }
  
#line 146
  return bf;
}


#line 154
- (jboolean)isZero {
  
#line 157
  for (jint i = 0; i < numRows_; i++) {
    
#line 159
    for (jint j = 0; j < numColumns_; j++) {
      
#line 161
      if (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), j) != 0) {
        
#line 163
        return false;
      }
    }
  }
  return true;
}


#line 175
- (OrgBouncycastlePqcMathLinearalgebraMatrix *)computeInverse {
  
#line 178
  if (numRows_ != numColumns_) {
    
#line 180
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Matrix is not invertible.");
  }
  
#line 184
  IOSObjectArray *tmpMatrix = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ numRows_, numRows_ }];
  for (jint i = numRows_ - 1; i >= 0; i--) {
    
#line 187
    (void) IOSObjectArray_Set(tmpMatrix, i, OrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(IOSObjectArray_Get(nil_chk(matrix_), i)));
  }
  
#line 191
  IOSObjectArray *invMatrix = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ numRows_, numRows_ }];
  for (jint i = numRows_ - 1; i >= 0; i--) {
    
#line 194
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(invMatrix, i)), i) = 1;
  }
  
#line 199
  for (jint i = 0; i < numRows_; i++) {
    
#line 202
    if (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(tmpMatrix, i)), i) == 0) {
      
#line 204
      jboolean foundNonZero = false;
      
#line 206
      for (jint j = i + 1; j < numRows_; j++) {
        
#line 208
        if (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(tmpMatrix, j)), i) != 0) {
          
#line 211
          foundNonZero = true;
          OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_swapColumnsWithIntArray2_withInt_withInt_(tmpMatrix, i, j);
          OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_swapColumnsWithIntArray2_withInt_withInt_(invMatrix, i, j);
          
#line 215
          j = numRows_;
          continue;
        }
      }
      
#line 220
      if (!foundNonZero) {
        
#line 223
        @throw new_JavaLangArithmeticException_initWithNSString_(@"Matrix is not invertible.");
      }
    }
    
#line 228
    jint coef = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(tmpMatrix, i)), i);
    jint invCoef = [((OrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field_)) inverseWithInt:coef];
    OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementThisWithIntArray_withInt_(self, IOSObjectArray_Get(tmpMatrix, i), invCoef);
    OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementThisWithIntArray_withInt_(self, IOSObjectArray_Get(invMatrix, i), invCoef);
    
#line 234
    for (jint j = 0; j < numRows_; j++) {
      
#line 236
      if (j != i) {
        
#line 238
        coef = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(tmpMatrix, j)), i);
        if (coef != 0) {
          
#line 241
          IOSIntArray *tmpRow = OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementWithIntArray_withInt_(self, IOSObjectArray_Get(tmpMatrix, i), coef);
          IOSIntArray *tmpInvRow = OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementWithIntArray_withInt_(self, IOSObjectArray_Get(invMatrix, i), coef);
          OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_addToRowWithIntArray_withIntArray_(self, tmpRow, IOSObjectArray_Get(tmpMatrix, j));
          OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_addToRowWithIntArray_withIntArray_(self, tmpInvRow, IOSObjectArray_Get(invMatrix, j));
        }
      }
    }
  }
  
#line 250
  return new_OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray2_(field_, invMatrix);
}


#line 253
+ (void)swapColumnsWithIntArray2:(IOSObjectArray *)matrix
                         withInt:(jint)first
                         withInt:(jint)second {
  OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_swapColumnsWithIntArray2_withInt_withInt_(matrix, first, second);
}


#line 260
- (void)multRowWithElementThisWithIntArray:(IOSIntArray *)row
                                   withInt:(jint)element {
  OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementThisWithIntArray_withInt_(self, row, element);
}


#line 268
- (IOSIntArray *)multRowWithElementWithIntArray:(IOSIntArray *)row
                                        withInt:(jint)element {
  return OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementWithIntArray_withInt_(self, row, element);
}


#line 284
- (void)addToRowWithIntArray:(IOSIntArray *)fromRow
                withIntArray:(IOSIntArray *)toRow {
  OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_addToRowWithIntArray_withIntArray_(self, fromRow, toRow);
}


#line 292
- (OrgBouncycastlePqcMathLinearalgebraMatrix *)rightMultiplyWithOrgBouncycastlePqcMathLinearalgebraMatrix:(OrgBouncycastlePqcMathLinearalgebraMatrix *)a {
  
#line 295
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Not implemented.");
}

- (OrgBouncycastlePqcMathLinearalgebraMatrix *)rightMultiplyWithOrgBouncycastlePqcMathLinearalgebraPermutation:(OrgBouncycastlePqcMathLinearalgebraPermutation *)perm {
  
#line 301
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Not implemented.");
}

- (OrgBouncycastlePqcMathLinearalgebraVector *)leftMultiplyWithOrgBouncycastlePqcMathLinearalgebraVector:(OrgBouncycastlePqcMathLinearalgebraVector *)vector {
  
#line 307
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Not implemented.");
}

- (OrgBouncycastlePqcMathLinearalgebraVector *)rightMultiplyWithOrgBouncycastlePqcMathLinearalgebraVector:(OrgBouncycastlePqcMathLinearalgebraVector *)vector {
  
#line 313
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Not implemented.");
}


#line 323
- (jboolean)isEqual:(id)other {
  
#line 327
  if (other == nil || !([other isKindOfClass:[OrgBouncycastlePqcMathLinearalgebraGF2mMatrix class]])) {
    
#line 329
    return false;
  }
  
#line 332
  OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *otherMatrix = (OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *) cast_chk(other, [OrgBouncycastlePqcMathLinearalgebraGF2mMatrix class]);
  
#line 334
  if ((![((OrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) isEqual:otherMatrix->field_]) ||
#line 335
  (otherMatrix->numRows_ != self->numColumns_) ||
#line 336
  (otherMatrix->numColumns_ != self->numColumns_)) {
    
#line 338
    return false;
  }
  
#line 341
  for (jint i = 0; i < self->numRows_; i++) {
    
#line 343
    for (jint j = 0; j < self->numColumns_; j++) {
      
#line 345
      if (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->matrix_), i)), j) != IOSIntArray_Get(nil_chk(IOSObjectArray_Get(otherMatrix->matrix_, i)), j)) {
        
#line 347
        return false;
      }
    }
  }
  
#line 352
  return true;
}


#line 355
- (NSUInteger)hash {
  
#line 358
  jint hash_ = (((jint) [((OrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) hash]) * 31 + numRows_) * 31 + numColumns_;
  for (jint i = 0; i < self->numRows_; i++) {
    
#line 361
    for (jint j = 0; j < self->numColumns_; j++) {
      
#line 363
      hash_ = hash_ * 31 + IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), j);
    }
  }
  return hash_;
}


#line 369
- (NSString *)description {
  
#line 372
  NSString *str = JreStrcat("I$I$$$", self->numRows_, @" x ", self->numColumns_, @" Matrix over ",
#line 373
  [((OrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) description], @": \n");
  
#line 375
  for (jint i = 0; i < self->numRows_; i++) {
    
#line 377
    for (jint j = 0; j < self->numColumns_; j++) {
      
#line 379
      str = JreStrcat("$$$", str, [((OrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) elementToStrWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix_), i)), j)], @" : ");
    }
    str = JreStrcat("$C", str, 0x000a);
  }
  
#line 384
  return str;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathLinearalgebraMatrix;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathLinearalgebraMatrix;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathLinearalgebraMatrix;", 0x1, 10, 12, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathLinearalgebraVector;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathLinearalgebraVector;", 0x1, 10, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastlePqcMathLinearalgebraGF2mField:withByteArray:);
  methods[1].selector = @selector(initWithOrgBouncycastlePqcMathLinearalgebraGF2mMatrix:);
  methods[2].selector = @selector(initWithOrgBouncycastlePqcMathLinearalgebraGF2mField:withIntArray2:);
  methods[3].selector = @selector(getEncoded);
  methods[4].selector = @selector(isZero);
  methods[5].selector = @selector(computeInverse);
  methods[6].selector = @selector(swapColumnsWithIntArray2:withInt:withInt:);
  methods[7].selector = @selector(multRowWithElementThisWithIntArray:withInt:);
  methods[8].selector = @selector(multRowWithElementWithIntArray:withInt:);
  methods[9].selector = @selector(addToRowWithIntArray:withIntArray:);
  methods[10].selector = @selector(rightMultiplyWithOrgBouncycastlePqcMathLinearalgebraMatrix:);
  methods[11].selector = @selector(rightMultiplyWithOrgBouncycastlePqcMathLinearalgebraPermutation:);
  methods[12].selector = @selector(leftMultiplyWithOrgBouncycastlePqcMathLinearalgebraVector:);
  methods[13].selector = @selector(rightMultiplyWithOrgBouncycastlePqcMathLinearalgebraVector:);
  methods[14].selector = @selector(isEqual:);
  methods[15].selector = @selector(hash);
  methods[16].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "LOrgBouncycastlePqcMathLinearalgebraGF2mField;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "matrix_", "[[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastlePqcMathLinearalgebraGF2mField;[B", "LOrgBouncycastlePqcMathLinearalgebraGF2mMatrix;", "LOrgBouncycastlePqcMathLinearalgebraGF2mField;[[I", "swapColumns", "[[III", "multRowWithElementThis", "[II", "multRowWithElement", "addToRow", "[I[I", "rightMultiply", "LOrgBouncycastlePqcMathLinearalgebraMatrix;", "LOrgBouncycastlePqcMathLinearalgebraPermutation;", "leftMultiply", "LOrgBouncycastlePqcMathLinearalgebraVector;", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcMathLinearalgebraGF2mMatrix = { "GF2mMatrix", "org.bouncycastle.pqc.math.linearalgebra", ptrTable, methods, fields, 7, 0x1, 17, 2, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcMathLinearalgebraGF2mMatrix;
}

@end


#line 31
void OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *self, OrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSByteArray *enc) {
  OrgBouncycastlePqcMathLinearalgebraMatrix_init(self);
  
#line 34
  self->field_ = field;
  
#line 37
  jint d = 8;
  jint count = 1;
  while ([((OrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(field)) getDegree] > d) {
    
#line 41
    count++;
    d += 8;
  }
  
#line 45
  if (((IOSByteArray *) nil_chk(enc))->size_ < 5) {
    
#line 47
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 48
    @" Error: given array is not encoded matrix over GF(2^m)");
  }
  
#line 51
  self->numRows_ = (JreLShift32((IOSByteArray_Get(enc, 3) & (jint) 0xff), 24)) ^ (JreLShift32((IOSByteArray_Get(enc, 2) & (jint) 0xff), 16)) ^
#line 52
  (JreLShift32((IOSByteArray_Get(enc, 1) & (jint) 0xff), 8)) ^ (IOSByteArray_Get(enc, 0) & (jint) 0xff);
  
#line 54
  jint n = count * self->numRows_;
  
#line 56
  if ((self->numRows_ <= 0) || ((JreIntMod((enc->size_ - 4), n)) != 0)) {
    
#line 58
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 59
    @" Error: given array is not encoded matrix over GF(2^m)");
  }
  
#line 62
  self->numColumns_ = JreIntDiv((enc->size_ - 4), n);
  
#line 64
  self->matrix_ = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ self->numRows_, self->numColumns_ }];
  count = 4;
  for (jint i = 0; i < self->numRows_; i++) {
    
#line 68
    for (jint j = 0; j < self->numColumns_; j++) {
      
#line 70
      for (jint jj = 0; jj < d; jj += 8) {
        
#line 72
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->matrix_), i)), j) ^= JreLShift32((IOSByteArray_Get(enc, count++) & (jint) 0x000000ff), jj);
      }
      if (![((OrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) isElementOfThisFieldWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->matrix_), i)), j)]) {
        
#line 76
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 77
        @" Error: given array is not encoded matrix over GF(2^m)");
      }
    }
  }
}


#line 31
OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *new_OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_(OrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSByteArray *enc) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix, initWithOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_, field, enc)
}


#line 31
OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *create_OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_(OrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSByteArray *enc) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix, initWithOrgBouncycastlePqcMathLinearalgebraGF2mField_withByteArray_, field, enc)
}


#line 88
void OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *self, OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *other) {
  OrgBouncycastlePqcMathLinearalgebraMatrix_init(self);
  self->numRows_ = ((OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *) nil_chk(other))->numRows_;
  self->numColumns_ = other->numColumns_;
  self->field_ = other->field_;
  self->matrix_ = [IOSObjectArray newArrayWithLength:self->numRows_ type:IOSClass_intArray(1)];
  for (jint i = 0; i < self->numRows_; i++) {
    
#line 96
    (void) IOSObjectArray_Set(nil_chk(self->matrix_), i, OrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(IOSObjectArray_Get(other->matrix_, i)));
  }
}


#line 88
OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *new_OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *other) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix, initWithOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_, other)
}


#line 88
OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *create_OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *other) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix, initWithOrgBouncycastlePqcMathLinearalgebraGF2mMatrix_, other)
}


#line 106
void OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray2_(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *self, OrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSObjectArray *matrix) {
  OrgBouncycastlePqcMathLinearalgebraMatrix_init(self);
  self->field_ = field;
  self->matrix_ = matrix;
  self->numRows_ = ((IOSObjectArray *) nil_chk(matrix))->size_;
  self->numColumns_ = ((IOSIntArray *) nil_chk(IOSObjectArray_Get(matrix, 0)))->size_;
}


#line 106
OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *new_OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray2_(OrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSObjectArray *matrix) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix, initWithOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray2_, field, matrix)
}


#line 106
OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *create_OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initWithOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray2_(OrgBouncycastlePqcMathLinearalgebraGF2mField *field, IOSObjectArray *matrix) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix, initWithOrgBouncycastlePqcMathLinearalgebraGF2mField_withIntArray2_, field, matrix)
}


#line 253
void OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_swapColumnsWithIntArray2_withInt_withInt_(IOSObjectArray *matrix, jint first, jint second) {
  OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_initialize();
  IOSIntArray *tmp = IOSObjectArray_Get(nil_chk(matrix), first);
  (void) IOSObjectArray_Set(matrix, first, IOSObjectArray_Get(matrix, second));
  (void) IOSObjectArray_Set(matrix, second, tmp);
}

void OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementThisWithIntArray_withInt_(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *self, IOSIntArray *row, jint element) {
  
#line 262
  for (jint i = ((IOSIntArray *) nil_chk(row))->size_ - 1; i >= 0; i--) {
    
#line 264
    *IOSIntArray_GetRef(row, i) = [((OrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) multWithInt:IOSIntArray_Get(row, i) withInt:element];
  }
}


#line 268
IOSIntArray *OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_multRowWithElementWithIntArray_withInt_(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *self, IOSIntArray *row, jint element) {
  
#line 270
  IOSIntArray *result = [IOSIntArray newArrayWithLength:((IOSIntArray *) nil_chk(row))->size_];
  for (jint i = row->size_ - 1; i >= 0; i--) {
    
#line 273
    *IOSIntArray_GetRef(result, i) = [((OrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) multWithInt:IOSIntArray_Get(row, i) withInt:element];
  }
  return result;
}


#line 284
void OrgBouncycastlePqcMathLinearalgebraGF2mMatrix_addToRowWithIntArray_withIntArray_(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix *self, IOSIntArray *fromRow, IOSIntArray *toRow) {
  
#line 286
  for (jint i = ((IOSIntArray *) nil_chk(toRow))->size_ - 1; i >= 0; i--) {
    
#line 288
    *IOSIntArray_GetRef(toRow, i) = [((OrgBouncycastlePqcMathLinearalgebraGF2mField *) nil_chk(self->field_)) addWithInt:IOSIntArray_Get(nil_chk(fromRow), i) withInt:IOSIntArray_Get(toRow, i)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcMathLinearalgebraGF2mMatrix)
