//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2Matrix.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2Matrix")
#ifdef RESTRICT_OrgBouncycastlePqcMathLinearalgebraGF2Matrix
#define INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2Matrix 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2Matrix 1
#endif
#undef RESTRICT_OrgBouncycastlePqcMathLinearalgebraGF2Matrix

#if !defined (OrgBouncycastlePqcMathLinearalgebraGF2Matrix_) && (INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2Matrix || defined(INCLUDE_OrgBouncycastlePqcMathLinearalgebraGF2Matrix))
#define OrgBouncycastlePqcMathLinearalgebraGF2Matrix_

#define RESTRICT_OrgBouncycastlePqcMathLinearalgebraMatrix 1
#define INCLUDE_OrgBouncycastlePqcMathLinearalgebraMatrix 1
#include "org/bouncycastle/pqc/math/linearalgebra/Matrix.h"

@class IOSByteArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaSecuritySecureRandom;
@class OrgBouncycastlePqcMathLinearalgebraPermutation;
@class OrgBouncycastlePqcMathLinearalgebraVector;

/*!
 @brief This class describes some operations with matrices over finite field GF(2)
  and is used in ecc and MQ-PKC (also has some specific methods and
  implementation)
 */
@interface OrgBouncycastlePqcMathLinearalgebraGF2Matrix : OrgBouncycastlePqcMathLinearalgebraMatrix

#pragma mark Public

/*!
 @brief Create the matrix from encoded form.
 @param enc the encoded matrix
 */
- (instancetype)initWithByteArray:(IOSByteArray *)enc;

/*!
 @brief Copy constructor.
 @param a another <code>GF2Matrix</code>
 */
- (instancetype)initWithOrgBouncycastlePqcMathLinearalgebraGF2Matrix:(OrgBouncycastlePqcMathLinearalgebraGF2Matrix *)a;

/*!
 @brief Create an nxn matrix of the given type.
 @param n the number of rows (and columns)
 @param typeOfMatrix the martix type (see <code>Matrix</code>  for predefined                      constants)
 */
- (instancetype)initWithInt:(jint)n
                   withChar:(jchar)typeOfMatrix;

/*!
 @brief Create an nxn matrix of the given type.
 @param n the matrix size
 @param typeOfMatrix the matrix type
 @param sr the source of randomness
 */
- (instancetype)initWithInt:(jint)n
                   withChar:(jchar)typeOfMatrix
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr;

/*!
 @brief Create the matrix with the contents of the given array.The matrix is not
  copied.
 Unused coefficients are masked out.
 @param numColumns the number of columns
 @param matrix the element array
 */
- (instancetype)initWithInt:(jint)numColumns
              withIntArray2:(IOSObjectArray *)matrix;

/*!
 @brief Compute the inverse of this matrix.
 @return the inverse of this matrix (newly created).
 @throw ArithmeticExceptionif this matrix is not invertible.
 */
- (OrgBouncycastlePqcMathLinearalgebraMatrix *)computeInverse;

/*!
 @brief Compute the transpose of this matrix.
 @return <tt>(this)<sup>T</sup></tt>
 */
- (OrgBouncycastlePqcMathLinearalgebraMatrix *)computeTranspose;

/*!
 @brief Create a nxn random regular matrix and its inverse.
 @param n number of rows (and columns)
 @param sr source of randomness
 @return the created random regular matrix and its inverse
 */
+ (IOSObjectArray *)createRandomRegularMatrixAndItsInverseWithInt:(jint)n
                                     withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr;

/*!
 @brief Compare this matrix with another object.
 @param other another object
 @return the result of the comparison
 */
- (jboolean)isEqual:(id)other;

/*!
 @brief Compute the full form matrix <tt>(this | Id)</tt> from this matrix in
  left compact form, where <tt>Id</tt> is the <tt>k x k</tt> identity
  matrix and <tt>k</tt> is the number of rows of this matrix.
 @return <tt>(this | Id)</tt>
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Matrix *)extendLeftCompactForm;

/*!
 @brief Compute the full form matrix <tt>(Id | this)</tt> from this matrix in
  right compact form, where <tt>Id</tt> is the <tt>k x k</tt> identity
  matrix and <tt>k</tt> is the number of rows of this matrix.
 @return <tt>(Id | this)</tt>
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Matrix *)extendRightCompactForm;

/*!
 @brief Returns encoded matrix, i.e., this matrix in byte array form
 @return the encoded matrix
 */
- (IOSByteArray *)getEncoded;

/*!
 @brief Returns the percentage of the number of "ones" in this matrix.
 @return the Hamming weight of this matrix (as a ratio).
 */
- (jdouble)getHammingWeight;

/*!
 @return the array keeping the matrix elements
 */
- (IOSObjectArray *)getIntArray;

/*!
 @brief Get the quadratic submatrix of this matrix consisting of the leftmost 
 <tt>numRows</tt> columns.
 @return the <tt>(numRows x numRows)</tt> submatrix
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Matrix *)getLeftSubMatrix;

/*!
 @return the length of each array representing a row of this matrix
 */
- (jint)getLength;

/*!
 @brief Get the submatrix of this matrix consisting of the rightmost 
 <tt>numColumns-numRows</tt> columns.
 @return the <tt>(numRows x (numColumns-numRows))</tt> submatrix
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Matrix *)getRightSubMatrix;

/*!
 @brief Return the row of this matrix with the given index.
 @param index the index
 @return the row of this matrix with the given index
 */
- (IOSIntArray *)getRowWithInt:(jint)index;

/*!
 @return the hash code of this matrix
 */
- (NSUInteger)hash;

/*!
 @brief Check if this is the zero matrix (i.e., all entries are zero).
 @return <tt>true</tt> if this is the zero matrix
 */
- (jboolean)isZero;

/*!
 @brief Compute the product of a permutation matrix (which is generated from an
  n-permutation) and this matrix.
 @param p the permutation
 @return <code>GF2Matrix</code> <tt>P*this</tt>
 */
- (OrgBouncycastlePqcMathLinearalgebraMatrix *)leftMultiplyWithOrgBouncycastlePqcMathLinearalgebraPermutation:(OrgBouncycastlePqcMathLinearalgebraPermutation *)p;

/*!
 @brief compute product a row vector and this matrix
 @param vec a vector over GF(2)
 @return Vector product a*matrix
 */
- (OrgBouncycastlePqcMathLinearalgebraVector *)leftMultiplyWithOrgBouncycastlePqcMathLinearalgebraVector:(OrgBouncycastlePqcMathLinearalgebraVector *)vec;

/*!
 @brief Compute the product of the matrix <tt>(this | Id)</tt> and a column
  vector, where <tt>Id</tt> is a <tt>(numRows x numRows)</tt> unit
  matrix.
 @param vec the vector over GF(2)
 @return <tt>(this | Id)*vector</tt>
 */
- (OrgBouncycastlePqcMathLinearalgebraVector *)leftMultiplyLeftCompactFormWithOrgBouncycastlePqcMathLinearalgebraVector:(OrgBouncycastlePqcMathLinearalgebraVector *)vec;

/*!
 @brief Compute the product of this matrix and a matrix A over GF(2).
 @param mat a matrix A over GF(2)
 @return matrix product <tt>this*matrixA</tt>
 */
- (OrgBouncycastlePqcMathLinearalgebraMatrix *)rightMultiplyWithOrgBouncycastlePqcMathLinearalgebraMatrix:(OrgBouncycastlePqcMathLinearalgebraMatrix *)mat;

/*!
 @brief Compute the product of this matrix and a permutation matrix which is
  generated from an n-permutation.
 @param p the permutation
 @return <code>GF2Matrix</code> <tt>this*P</tt>
 */
- (OrgBouncycastlePqcMathLinearalgebraMatrix *)rightMultiplyWithOrgBouncycastlePqcMathLinearalgebraPermutation:(OrgBouncycastlePqcMathLinearalgebraPermutation *)p;

/*!
 @brief Compute the product of this matrix and the given column vector.
 @param vec the vector over GF(2)
 @return <tt>this*vector</tt>
 */
- (OrgBouncycastlePqcMathLinearalgebraVector *)rightMultiplyWithOrgBouncycastlePqcMathLinearalgebraVector:(OrgBouncycastlePqcMathLinearalgebraVector *)vec;

/*!
 @brief Compute the product of the matrix <tt>(Id | this)</tt> and a column
  vector, where <tt>Id</tt> is a <tt>(numRows x numRows)</tt> unit
  matrix.
 @param vec the vector over GF(2)
 @return <tt>(Id | this)*vector</tt>
 */
- (OrgBouncycastlePqcMathLinearalgebraVector *)rightMultiplyRightCompactFormWithOrgBouncycastlePqcMathLinearalgebraVector:(OrgBouncycastlePqcMathLinearalgebraVector *)vec;

/*!
 @return a human readable form of the matrix
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcMathLinearalgebraGF2Matrix)

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithByteArray_(OrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, IOSByteArray *enc);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Matrix *new_OrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithByteArray_(IOSByteArray *enc) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Matrix *create_OrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithByteArray_(IOSByteArray *enc);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withIntArray2_(OrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, jint numColumns, IOSObjectArray *matrix);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Matrix *new_OrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withIntArray2_(jint numColumns, IOSObjectArray *matrix) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Matrix *create_OrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withIntArray2_(jint numColumns, IOSObjectArray *matrix);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_(OrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, jint n, jchar typeOfMatrix);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Matrix *new_OrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_(jint n, jchar typeOfMatrix) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Matrix *create_OrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_(jint n, jchar typeOfMatrix);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_withJavaSecuritySecureRandom_(OrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, jint n, jchar typeOfMatrix, JavaSecuritySecureRandom *sr);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Matrix *new_OrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_withJavaSecuritySecureRandom_(jint n, jchar typeOfMatrix, JavaSecuritySecureRandom *sr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Matrix *create_OrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithInt_withChar_withJavaSecuritySecureRandom_(jint n, jchar typeOfMatrix, JavaSecuritySecureRandom *sr);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithOrgBouncycastlePqcMathLinearalgebraGF2Matrix_(OrgBouncycastlePqcMathLinearalgebraGF2Matrix *self, OrgBouncycastlePqcMathLinearalgebraGF2Matrix *a);

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Matrix *new_OrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithOrgBouncycastlePqcMathLinearalgebraGF2Matrix_(OrgBouncycastlePqcMathLinearalgebraGF2Matrix *a) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcMathLinearalgebraGF2Matrix *create_OrgBouncycastlePqcMathLinearalgebraGF2Matrix_initWithOrgBouncycastlePqcMathLinearalgebraGF2Matrix_(OrgBouncycastlePqcMathLinearalgebraGF2Matrix *a);

FOUNDATION_EXPORT IOSObjectArray *OrgBouncycastlePqcMathLinearalgebraGF2Matrix_createRandomRegularMatrixAndItsInverseWithInt_withJavaSecuritySecureRandom_(jint n, JavaSecuritySecureRandom *sr);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathLinearalgebraGF2Matrix)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2Matrix")
