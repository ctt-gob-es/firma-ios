//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/linearalgebra/Matrix.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraMatrix")
#ifdef RESTRICT_OrgBouncycastlePqcMathLinearalgebraMatrix
#define INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraMatrix 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraMatrix 1
#endif
#undef RESTRICT_OrgBouncycastlePqcMathLinearalgebraMatrix

#if !defined (OrgBouncycastlePqcMathLinearalgebraMatrix_) && (INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraMatrix || defined(INCLUDE_OrgBouncycastlePqcMathLinearalgebraMatrix))
#define OrgBouncycastlePqcMathLinearalgebraMatrix_

@class IOSByteArray;
@class OrgBouncycastlePqcMathLinearalgebraPermutation;
@class OrgBouncycastlePqcMathLinearalgebraVector;

/*!
 @brief This abstract class defines matrices.It holds the number of rows and the
  number of columns of the matrix and defines some basic methods.
 */
@interface OrgBouncycastlePqcMathLinearalgebraMatrix : NSObject {
 @public
  /*!
   @brief number of rows
   */
  jint numRows_;
  /*!
   @brief number of columns
   */
  jint numColumns_;
}

#pragma mark Public

- (instancetype)init;

/*!
 @brief Compute the inverse of this matrix.
 @return the inverse of this matrix (newly created).
 */
- (OrgBouncycastlePqcMathLinearalgebraMatrix *)computeInverse;

/*!
 @return the encoded matrix, i.e., this matrix in byte array form.
 */
- (IOSByteArray *)getEncoded;

/*!
 @return the number of columns in the binary matrix
 */
- (jint)getNumColumns;

/*!
 @return the number of rows in the matrix
 */
- (jint)getNumRows;

/*!
 @brief Check if this is the zero matrix (i.e., all entries are zero).
 @return <tt>true</tt> if this is the zero matrix
 */
- (jboolean)isZero;

/*!
 @brief Compute the product of a vector and this matrix.If the length of the
  vector is greater than the number of rows of this matrix, the matrix is
  multiplied by each m-bit part of the vector.
 @param vector a vector
 @return <tt>vector * this</tt> (newly created)
 */
- (OrgBouncycastlePqcMathLinearalgebraVector *)leftMultiplyWithOrgBouncycastlePqcMathLinearalgebraVector:(OrgBouncycastlePqcMathLinearalgebraVector *)vector;

/*!
 @brief Compute the product of this matrix and another matrix.
 @param a the other matrix
 @return <tt>this * a</tt> (newly created)
 */
- (OrgBouncycastlePqcMathLinearalgebraMatrix *)rightMultiplyWithOrgBouncycastlePqcMathLinearalgebraMatrix:(OrgBouncycastlePqcMathLinearalgebraMatrix *)a;

/*!
 @brief Compute the product of this matrix and a permutation.
 @param p the permutation
 @return <tt>this * p</tt> (newly created)
 */
- (OrgBouncycastlePqcMathLinearalgebraMatrix *)rightMultiplyWithOrgBouncycastlePqcMathLinearalgebraPermutation:(OrgBouncycastlePqcMathLinearalgebraPermutation *)p;

/*!
 @brief Compute the product of this matrix and a vector.
 @param vector a vector
 @return <tt>this * vector</tt> (newly created)
 */
- (OrgBouncycastlePqcMathLinearalgebraVector *)rightMultiplyWithOrgBouncycastlePqcMathLinearalgebraVector:(OrgBouncycastlePqcMathLinearalgebraVector *)vector;

/*!
 @return a human readable form of the matrix.
 */
- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcMathLinearalgebraMatrix)

/*!
 @brief zero matrix
 */
inline jchar OrgBouncycastlePqcMathLinearalgebraMatrix_get_MATRIX_TYPE_ZERO(void);
#define OrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_ZERO 'Z'
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcMathLinearalgebraMatrix, MATRIX_TYPE_ZERO, jchar)

/*!
 @brief unit matrix
 */
inline jchar OrgBouncycastlePqcMathLinearalgebraMatrix_get_MATRIX_TYPE_UNIT(void);
#define OrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_UNIT 'I'
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcMathLinearalgebraMatrix, MATRIX_TYPE_UNIT, jchar)

/*!
 @brief random lower triangular matrix
 */
inline jchar OrgBouncycastlePqcMathLinearalgebraMatrix_get_MATRIX_TYPE_RANDOM_LT(void);
#define OrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_RANDOM_LT 'L'
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcMathLinearalgebraMatrix, MATRIX_TYPE_RANDOM_LT, jchar)

/*!
 @brief random upper triangular matrix
 */
inline jchar OrgBouncycastlePqcMathLinearalgebraMatrix_get_MATRIX_TYPE_RANDOM_UT(void);
#define OrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_RANDOM_UT 'U'
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcMathLinearalgebraMatrix, MATRIX_TYPE_RANDOM_UT, jchar)

/*!
 @brief random regular matrix
 */
inline jchar OrgBouncycastlePqcMathLinearalgebraMatrix_get_MATRIX_TYPE_RANDOM_REGULAR(void);
#define OrgBouncycastlePqcMathLinearalgebraMatrix_MATRIX_TYPE_RANDOM_REGULAR 'R'
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcMathLinearalgebraMatrix, MATRIX_TYPE_RANDOM_REGULAR, jchar)

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraMatrix_init(OrgBouncycastlePqcMathLinearalgebraMatrix *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathLinearalgebraMatrix)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraMatrix")
