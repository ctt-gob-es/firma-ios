//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nElement.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2nElement")
#ifdef RESTRICT_OrgBouncycastlePqcMathLinearalgebraGF2nElement
#define INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2nElement 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2nElement 1
#endif
#undef RESTRICT_OrgBouncycastlePqcMathLinearalgebraGF2nElement

#if !defined (OrgBouncycastlePqcMathLinearalgebraGF2nElement_) && (INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2nElement || defined(INCLUDE_OrgBouncycastlePqcMathLinearalgebraGF2nElement))
#define OrgBouncycastlePqcMathLinearalgebraGF2nElement_

#define RESTRICT_OrgBouncycastlePqcMathLinearalgebraGFElement 1
#define INCLUDE_OrgBouncycastlePqcMathLinearalgebraGFElement 1
#include "org/bouncycastle/pqc/math/linearalgebra/GFElement.h"

@class OrgBouncycastlePqcMathLinearalgebraGF2nField;

/*!
 @brief This abstract class implements an element of the finite field <i>GF(2)<sup>n
  </sup></i> in either <i>optimal normal basis</i> representation (<i>ONB</i>)
  or in <i>polynomial</i> representation.It is extended by the classes <a href=GF2nONBElement.html>
 <tt> GF2nONBElement</tt></a> and <a href=GF2nPolynomialElement.html>
  <tt>GF2nPolynomialElement</tt> </a>.
 - seealso: GF2nPolynomialElement
 - seealso: GF2nONBElement
 - seealso: GF2nONBField
 */
@interface OrgBouncycastlePqcMathLinearalgebraGF2nElement : NSObject < OrgBouncycastlePqcMathLinearalgebraGFElement > {
 @public
  /*!
   @brief holds a pointer to this element's corresponding field.
   */
  OrgBouncycastlePqcMathLinearalgebraGF2nField *mField_;
  /*!
   @brief holds the extension degree <i>n</i> of this element's corresponding
  field.
   */
  jint mDegree_;
}

#pragma mark Public

- (instancetype)init;

/*!
 @return a copy of this GF2nElement
 */
- (id)java_clone;

/*!
 @brief Performs a basis transformation of this element to the given GF2nField 
 <tt>basis</tt>.
 @param basis the GF2nField representation to transform this element to
 @return this element in the representation of <tt>basis</tt>
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nElement *)convertWithOrgBouncycastlePqcMathLinearalgebraGF2nField:(OrgBouncycastlePqcMathLinearalgebraGF2nField *)basis;

/*!
 @brief Returns the field of this element.
 @return the field of this element
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nField *)getField;

/*!
 @brief Returns <tt>this</tt> element + 1.
 @return <tt>this</tt> + 1
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nElement *)increase;

/*!
 @brief Increases this element by one.
 */
- (void)increaseThis;

/*!
 @brief Solves a quadratic equation.
 <br>
  Let z<sup>2</sup> + z = <tt>this</tt>.Then this method returns z.
 @return z with z<sup>2</sup> + z = <tt>this</tt>
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nElement *)solveQuadraticEquation;

/*!
 @brief Returns <tt>this</tt> element to the power of 2.
 @return <tt>this</tt><sup>2</sup>
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nElement *)square;

/*!
 @brief Compute the square root of this element and return the result in a new 
 <code>GF2nElement</code>.
 @return <tt>this<sup>1/2</sup></tt> (newly created)
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nElement *)squareRoot;

/*!
 @brief Compute the square root of this element.
 */
- (void)squareRootThis;

/*!
 @brief Squares <tt>this</tt> element.
 */
- (void)squareThis;

/*!
 @brief Compute the difference of this element and <tt>minuend</tt>.
 @param minuend the minuend
 @return <tt>this - minuend</tt> (newly created)
 */
- (id<OrgBouncycastlePqcMathLinearalgebraGFElement>)subtractWithOrgBouncycastlePqcMathLinearalgebraGFElement:(id<OrgBouncycastlePqcMathLinearalgebraGFElement>)minuend;

/*!
 @brief Compute the difference of this element and <tt>minuend</tt>,
  overwriting this element.
 @param minuend the minuend
 */
- (void)subtractFromThisWithOrgBouncycastlePqcMathLinearalgebraGFElement:(id<OrgBouncycastlePqcMathLinearalgebraGFElement>)minuend;

/*!
 @brief Returns whether the rightmost bit of the bit representation is set.This
  is needed for data conversion according to 1363.
 @return true if the rightmost bit of this element is set
 */
- (jboolean)testRightmostBit;

/*!
 @brief Returns the trace of this element.
 @return the trace of this element
 */
- (jint)trace;

#pragma mark Package-Private

/*!
 @brief Assigns the value 1 to this element.
 */
- (void)assignOne;

/*!
 @brief Assign the value 0 to this element.
 */
- (void)assignZero;

/*!
 @brief Checks whether the indexed bit of the bit representation is set
 @param index the index of the bit to test
 @return <tt>true</tt> if the indexed bit is set
 */
- (jboolean)testBitWithInt:(jint)index;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcMathLinearalgebraGF2nElement)

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcMathLinearalgebraGF2nElement, mField_, OrgBouncycastlePqcMathLinearalgebraGF2nField *)

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2nElement_init(OrgBouncycastlePqcMathLinearalgebraGF2nElement *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathLinearalgebraGF2nElement)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2nElement")
