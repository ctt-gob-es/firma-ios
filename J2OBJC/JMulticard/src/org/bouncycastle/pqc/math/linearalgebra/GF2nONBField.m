//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nONBField.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/security/SecureRandom.h"
#include "java/util/Random.h"
#include "java/util/Vector.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2Polynomial.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2nElement.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2nField.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2nONBElement.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2nONBField.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2nPolynomial.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2nPolynomialElement.h"
#include "org/bouncycastle/pqc/math/linearalgebra/IntegerFunctions.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/math/linearalgebra/GF2nONBField must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcMathLinearalgebraGF2nONBField () {
 @public
  /*!
   @brief holds the length of the array-representation of degree mDegree.
   */
  jint mLength_;
  /*!
   @brief holds the number of relevant bits in mONBPol[mLength-1].
   */
  jint mBit_;
  /*!
   @brief holds the type of mONB
   */
  jint mType_;
}

- (void)computeType;

- (void)computeMultMatrix;

- (jint)elementOfOrderWithInt:(jint)k
                      withInt:(jint)p;

@end

inline jint OrgBouncycastlePqcMathLinearalgebraGF2nONBField_get_MAXLONG(void);
#define OrgBouncycastlePqcMathLinearalgebraGF2nONBField_MAXLONG 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcMathLinearalgebraGF2nONBField, MAXLONG, jint)

__attribute__((unused)) static void OrgBouncycastlePqcMathLinearalgebraGF2nONBField_computeType(OrgBouncycastlePqcMathLinearalgebraGF2nONBField *self);

__attribute__((unused)) static void OrgBouncycastlePqcMathLinearalgebraGF2nONBField_computeMultMatrix(OrgBouncycastlePqcMathLinearalgebraGF2nONBField *self);

__attribute__((unused)) static jint OrgBouncycastlePqcMathLinearalgebraGF2nONBField_elementOfOrderWithInt_withInt_(OrgBouncycastlePqcMathLinearalgebraGF2nONBField *self, jint k, jint p);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nONBField.java"


#line 20
@implementation OrgBouncycastlePqcMathLinearalgebraGF2nONBField


#line 107
- (instancetype)initWithInt:(jint)deg
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  OrgBouncycastlePqcMathLinearalgebraGF2nONBField_initWithInt_withJavaSecuritySecureRandom_(self, deg, random);
  return self;
}


#line 157
- (jint)getONBLength {
  
#line 159
  return mLength_;
}


#line 162
- (jint)getONBBit {
  
#line 164
  return mBit_;
}


#line 178
- (OrgBouncycastlePqcMathLinearalgebraGF2nElement *)getRandomRootWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)polynomial {
  
#line 182
  OrgBouncycastlePqcMathLinearalgebraGF2nPolynomial *c;
  OrgBouncycastlePqcMathLinearalgebraGF2nPolynomial *ut;
  OrgBouncycastlePqcMathLinearalgebraGF2nElement *u;
  OrgBouncycastlePqcMathLinearalgebraGF2nPolynomial *h;
  jint hDegree;
  
#line 188
  OrgBouncycastlePqcMathLinearalgebraGF2nPolynomial *g = new_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomial_initWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial_withOrgBouncycastlePqcMathLinearalgebraGF2nField_(polynomial, self);
  jint gDegree = [g getDegree];
  jint i;
  
#line 193
  while (gDegree > 1) {
    
#line 195
    do {
      
#line 198
      u = new_OrgBouncycastlePqcMathLinearalgebraGF2nONBElement_initWithOrgBouncycastlePqcMathLinearalgebraGF2nONBField_withJavaSecuritySecureRandom_(self, random_);
      ut = new_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomial_initWithInt_withOrgBouncycastlePqcMathLinearalgebraGF2nElement_(2, OrgBouncycastlePqcMathLinearalgebraGF2nONBElement_ZEROWithOrgBouncycastlePqcMathLinearalgebraGF2nONBField_(self));
      
#line 201
      [ut setWithInt:1 withOrgBouncycastlePqcMathLinearalgebraGF2nElement:u];
      c = new_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomial_initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomial_(ut);
      
#line 204
      for (i = 1; i <= mDegree_ - 1; i++) {
        
#line 207
        c = [((OrgBouncycastlePqcMathLinearalgebraGF2nPolynomial *) nil_chk(c)) multiplyAndReduceWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomial:c withOrgBouncycastlePqcMathLinearalgebraGF2nPolynomial:g];
        c = [((OrgBouncycastlePqcMathLinearalgebraGF2nPolynomial *) nil_chk(c)) addWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomial:ut];
      }
      
#line 211
      h = [((OrgBouncycastlePqcMathLinearalgebraGF2nPolynomial *) nil_chk(c)) gcdWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomial:g];
      
#line 214
      hDegree = [((OrgBouncycastlePqcMathLinearalgebraGF2nPolynomial *) nil_chk(h)) getDegree];
      gDegree = [g getDegree];
    }
    while ((hDegree == 0) || (hDegree == gDegree));
    
#line 219
    if ((JreLShift32(hDegree, 1)) > gDegree) {
      
#line 221
      g = [g quotientWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomial:h];
    }
    else {
      
#line 226
      g = new_OrgBouncycastlePqcMathLinearalgebraGF2nPolynomial_initWithOrgBouncycastlePqcMathLinearalgebraGF2nPolynomial_(h);
    }
    gDegree = [((OrgBouncycastlePqcMathLinearalgebraGF2nPolynomial *) nil_chk(g)) getDegree];
  }
  
#line 231
  return [g atWithInt:0];
}


#line 242
- (void)computeCOBMatrixWithOrgBouncycastlePqcMathLinearalgebraGF2nField:(OrgBouncycastlePqcMathLinearalgebraGF2nField *)B1 {
  
#line 246
  if (mDegree_ != ((OrgBouncycastlePqcMathLinearalgebraGF2nField *) nil_chk(B1))->mDegree_) {
    
#line 248
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 249
    @"GF2nField.computeCOBMatrix: B1 has a different degree and thus cannot be coverted to!");
  }
  
#line 252
  jint i;
  
#line 252
  jint j;
  IOSObjectArray *gamma;
  OrgBouncycastlePqcMathLinearalgebraGF2nElement *u;
  IOSObjectArray *COBMatrix = [IOSObjectArray newArrayWithLength:mDegree_ type:OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_class_()];
  for (i = 0; i < mDegree_; i++) {
    
#line 258
    (void) IOSObjectArray_SetAndConsume(COBMatrix, i, new_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_(mDegree_));
  }
  
#line 262
  do {
    
#line 265
    u = [B1 getRandomRootWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:fieldPolynomial_];
  }
  while ([((OrgBouncycastlePqcMathLinearalgebraGF2nElement *) nil_chk(u)) isZero]);
  
#line 269
  gamma = [IOSObjectArray newArrayWithLength:mDegree_ type:OrgBouncycastlePqcMathLinearalgebraGF2nPolynomialElement_class_()];
  
#line 271
  (void) IOSObjectArray_Set(gamma, 0, (OrgBouncycastlePqcMathLinearalgebraGF2nElement *) cast_chk([u java_clone], [OrgBouncycastlePqcMathLinearalgebraGF2nElement class]));
  for (i = 1; i < mDegree_; i++) {
    
#line 274
    (void) IOSObjectArray_Set(gamma, i, [((OrgBouncycastlePqcMathLinearalgebraGF2nElement *) nil_chk(IOSObjectArray_Get(gamma, i - 1))) square]);
  }
  
#line 277
  for (i = 0; i < mDegree_; i++) {
    
#line 279
    for (j = 0; j < mDegree_; j++) {
      
#line 281
      if ([((OrgBouncycastlePqcMathLinearalgebraGF2nElement *) nil_chk(IOSObjectArray_Get(gamma, i))) testBitWithInt:j]) {
        
#line 283
        [((OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(IOSObjectArray_Get(COBMatrix, mDegree_ - j - 1))) setBitWithInt:mDegree_ - i - 1];
      }
    }
  }
  
#line 288
  [((JavaUtilVector *) nil_chk(fields_)) addElementWithId:B1];
  [((JavaUtilVector *) nil_chk(matrices_)) addElementWithId:COBMatrix];
  [((JavaUtilVector *) nil_chk(B1->fields_)) addElementWithId:self];
  [((JavaUtilVector *) nil_chk(B1->matrices_)) addElementWithId:[self invertMatrixWithOrgBouncycastlePqcMathLinearalgebraGF2PolynomialArray:COBMatrix]];
}


#line 300
- (void)computeFieldPolynomial {
  
#line 303
  if (mType_ == 1) {
    
#line 305
    fieldPolynomial_ = new_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withNSString_(mDegree_ + 1, @"ALL");
  }
  else if (mType_ == 2) {
    
#line 310
    OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *q = new_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withNSString_(mDegree_ + 1, @"ONE");
    
#line 312
    OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *p = new_OrgBouncycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withNSString_(mDegree_ + 1, @"X");
    [p addToThisWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:q];
    OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *r;
    jint i;
    
#line 317
    for (i = 1; i < mDegree_; i++) {
      
#line 320
      r = q;
      
#line 322
      q = p;
      
#line 324
      p = [q shiftLeft];
      [((OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(p)) addToThisWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:r];
    }
    fieldPolynomial_ = p;
  }
}


#line 337
- (IOSObjectArray *)invMatrixWithIntArray2:(IOSObjectArray *)a {
  
#line 340
  IOSObjectArray *A = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ mDegree_, mDegree_ }];
  A = a;
  IOSObjectArray *inv = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ mDegree_, mDegree_ }];
  
#line 344
  for (jint i = 0; i < mDegree_; i++) {
    
#line 346
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(inv, i)), i) = 1;
  }
  
#line 349
  for (jint i = 0; i < mDegree_; i++) {
    
#line 351
    for (jint j = i; j < mDegree_; j++) {
      
#line 353
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(A), mDegree_ - 1 - i)), j) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(A, i)), i);
    }
  }
  return nil;
}


#line 359
- (void)computeType {
  OrgBouncycastlePqcMathLinearalgebraGF2nONBField_computeType(self);
}


#line 396
- (void)computeMultMatrix {
  OrgBouncycastlePqcMathLinearalgebraGF2nONBField_computeMultMatrix(self);
}


#line 509
- (jint)elementOfOrderWithInt:(jint)k
                      withInt:(jint)p {
  return OrgBouncycastlePqcMathLinearalgebraGF2nONBField_elementOfOrderWithInt_withInt_(self, k, p);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathLinearalgebraGF2nElement;", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[I", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withJavaSecuritySecureRandom:);
  methods[1].selector = @selector(getONBLength);
  methods[2].selector = @selector(getONBBit);
  methods[3].selector = @selector(getRandomRootWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:);
  methods[4].selector = @selector(computeCOBMatrixWithOrgBouncycastlePqcMathLinearalgebraGF2nField:);
  methods[5].selector = @selector(computeFieldPolynomial);
  methods[6].selector = @selector(invMatrixWithIntArray2:);
  methods[7].selector = @selector(computeType);
  methods[8].selector = @selector(computeMultMatrix);
  methods[9].selector = @selector(elementOfOrderWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAXLONG", "I", .constantValue.asInt = OrgBouncycastlePqcMathLinearalgebraGF2nONBField_MAXLONG, 0x1a, -1, -1, -1, -1 },
    { "mLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMult_", "[[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILJavaSecuritySecureRandom;", "LJavaLangRuntimeException;", "getRandomRoot", "LOrgBouncycastlePqcMathLinearalgebraGF2Polynomial;", "computeCOBMatrix", "LOrgBouncycastlePqcMathLinearalgebraGF2nField;", "invMatrix", "[[I", "elementOfOrder", "II" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcMathLinearalgebraGF2nONBField = { "GF2nONBField", "org.bouncycastle.pqc.math.linearalgebra", ptrTable, methods, fields, 7, 0x1, 10, 5, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcMathLinearalgebraGF2nONBField;
}

@end


#line 107
void OrgBouncycastlePqcMathLinearalgebraGF2nONBField_initWithInt_withJavaSecuritySecureRandom_(OrgBouncycastlePqcMathLinearalgebraGF2nONBField *self, jint deg, JavaSecuritySecureRandom *random) {
  OrgBouncycastlePqcMathLinearalgebraGF2nField_initWithJavaSecuritySecureRandom_(self,
#line 110
  random);
  
#line 112
  if (deg < 3) {
    
#line 114
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"k must be at least 3");
  }
  
#line 117
  self->mDegree_ = deg;
  self->mLength_ = JreIntDiv(self->mDegree_, OrgBouncycastlePqcMathLinearalgebraGF2nONBField_MAXLONG);
  self->mBit_ = self->mDegree_ & (OrgBouncycastlePqcMathLinearalgebraGF2nONBField_MAXLONG - 1);
  if (self->mBit_ == 0) {
    
#line 122
    self->mBit_ = OrgBouncycastlePqcMathLinearalgebraGF2nONBField_MAXLONG;
  }
  else {
    
#line 126
    self->mLength_++;
  }
  
#line 129
  OrgBouncycastlePqcMathLinearalgebraGF2nONBField_computeType(self);
  
#line 133
  if (self->mType_ < 3) {
    
#line 135
    self->mMult_ = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ self->mDegree_, 2 }];
    for (jint i = 0; i < self->mDegree_; i++) {
      
#line 138
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->mMult_, i)), 0) = -1;
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->mMult_, i)), 1) = -1;
    }
    OrgBouncycastlePqcMathLinearalgebraGF2nONBField_computeMultMatrix(self);
  }
  else {
    
#line 145
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I", @"\nThe type of this field is ", self->mType_));
  }
  
#line 148
  [self computeFieldPolynomial];
  self->fields_ = new_JavaUtilVector_init();
  self->matrices_ = new_JavaUtilVector_init();
}


#line 107
OrgBouncycastlePqcMathLinearalgebraGF2nONBField *new_OrgBouncycastlePqcMathLinearalgebraGF2nONBField_initWithInt_withJavaSecuritySecureRandom_(jint deg, JavaSecuritySecureRandom *random) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathLinearalgebraGF2nONBField, initWithInt_withJavaSecuritySecureRandom_, deg, random)
}


#line 107
OrgBouncycastlePqcMathLinearalgebraGF2nONBField *create_OrgBouncycastlePqcMathLinearalgebraGF2nONBField_initWithInt_withJavaSecuritySecureRandom_(jint deg, JavaSecuritySecureRandom *random) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathLinearalgebraGF2nONBField, initWithInt_withJavaSecuritySecureRandom_, deg, random)
}


#line 359
void OrgBouncycastlePqcMathLinearalgebraGF2nONBField_computeType(OrgBouncycastlePqcMathLinearalgebraGF2nONBField *self) {
  
#line 362
  if ((self->mDegree_ & 7) == 0) {
    
#line 364
    @throw new_JavaLangRuntimeException_initWithNSString_(
#line 365
    @"The extension degree is divisible by 8!");
  }
  
#line 368
  jint s = 0;
  jint k = 0;
  self->mType_ = 1;
  for (jint d = 0; d != 1; self->mType_++) {
    
#line 373
    s = self->mType_ * self->mDegree_ + 1;
    if (OrgBouncycastlePqcMathLinearalgebraIntegerFunctions_isPrimeWithInt_(s)) {
      
#line 376
      k = OrgBouncycastlePqcMathLinearalgebraIntegerFunctions_orderWithInt_withInt_(2, s);
      d = OrgBouncycastlePqcMathLinearalgebraIntegerFunctions_gcdWithInt_withInt_(JreIntDiv(self->mType_ * self->mDegree_, k), self->mDegree_);
    }
  }
  self->mType_--;
  if (self->mType_ == 1) {
    
#line 383
    s = (JreLShift32(self->mDegree_, 1)) + 1;
    if (OrgBouncycastlePqcMathLinearalgebraIntegerFunctions_isPrimeWithInt_(s)) {
      
#line 386
      k = OrgBouncycastlePqcMathLinearalgebraIntegerFunctions_orderWithInt_withInt_(2, s);
      jint d = OrgBouncycastlePqcMathLinearalgebraIntegerFunctions_gcdWithInt_withInt_(JreIntDiv((JreLShift32(self->mDegree_, 1)), k), self->mDegree_);
      if (d == 1) {
        
#line 390
        self->mType_++;
      }
    }
  }
}


#line 396
void OrgBouncycastlePqcMathLinearalgebraGF2nONBField_computeMultMatrix(OrgBouncycastlePqcMathLinearalgebraGF2nONBField *self) {
  
#line 399
  if ((self->mType_ & 7) != 0) {
    
#line 401
    jint p = self->mType_ * self->mDegree_ + 1;
    
#line 406
    IOSIntArray *F = [IOSIntArray newArrayWithLength:p];
    
#line 408
    jint u;
    if (self->mType_ == 1) {
      
#line 411
      u = 1;
    }
    else if (self->mType_ == 2) {
      
#line 415
      u = p - 1;
    }
    else {
      
#line 419
      u = OrgBouncycastlePqcMathLinearalgebraGF2nONBField_elementOfOrderWithInt_withInt_(self, self->mType_, p);
    }
    
#line 422
    jint w = 1;
    jint n;
    for (jint j = 0; j < self->mType_; j++) {
      
#line 426
      n = w;
      
#line 428
      for (jint i = 0; i < self->mDegree_; i++) {
        
#line 430
        *IOSIntArray_GetRef(F, n) = i;
        n = JreIntMod((JreLShift32(n, 1)), p);
        if (n < 0) {
          
#line 434
          n += p;
        }
      }
      w = JreIntMod(u * w, p);
      if (w < 0) {
        
#line 440
        w += p;
      }
    }
    
#line 446
    if (self->mType_ == 1) {
      
#line 448
      for (jint k = 1; k < p - 1; k++) {
        
#line 450
        if (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->mMult_), IOSIntArray_Get(F, k + 1))), 0) == -1) {
          
#line 452
          *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->mMult_, IOSIntArray_Get(F, k + 1))), 0) = IOSIntArray_Get(F, p - k);
        }
        else {
          
#line 456
          *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->mMult_, IOSIntArray_Get(F, k + 1))), 1) = IOSIntArray_Get(F, p - k);
        }
      }
      
#line 460
      jint m_2 = JreRShift32(self->mDegree_, 1);
      for (jint k = 1; k <= m_2; k++) {
        
#line 464
        if (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->mMult_), k - 1)), 0) == -1) {
          
#line 466
          *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->mMult_, k - 1)), 0) = m_2 + k - 1;
        }
        else {
          
#line 470
          *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->mMult_, k - 1)), 1) = m_2 + k - 1;
        }
        
#line 473
        if (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->mMult_, m_2 + k - 1)), 0) == -1) {
          
#line 475
          *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->mMult_, m_2 + k - 1)), 0) = k - 1;
        }
        else {
          
#line 479
          *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->mMult_, m_2 + k - 1)), 1) = k - 1;
        }
      }
    }
    else if (self->mType_ == 2) {
      
#line 485
      for (jint k = 1; k < p - 1; k++) {
        
#line 487
        if (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->mMult_), IOSIntArray_Get(F, k + 1))), 0) == -1) {
          
#line 489
          *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->mMult_, IOSIntArray_Get(F, k + 1))), 0) = IOSIntArray_Get(F, p - k);
        }
        else {
          
#line 493
          *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->mMult_, IOSIntArray_Get(F, k + 1))), 1) = IOSIntArray_Get(F, p - k);
        }
      }
    }
    else {
      
#line 499
      @throw new_JavaLangRuntimeException_initWithNSString_(@"only type 1 or type 2 implemented");
    }
  }
  else {
    
#line 504
    @throw new_JavaLangRuntimeException_initWithNSString_(@"bisher nur fuer Gausssche Normalbasen implementiert");
  }
}


#line 509
jint OrgBouncycastlePqcMathLinearalgebraGF2nONBField_elementOfOrderWithInt_withInt_(OrgBouncycastlePqcMathLinearalgebraGF2nONBField *self, jint k, jint p) {
  
#line 511
  JavaUtilRandom *random = new_JavaUtilRandom_init();
  jint m = 0;
  while (m == 0) {
    
#line 515
    m = [random nextInt];
    m %= p - 1;
    if (m < 0) {
      
#line 519
      m += p - 1;
    }
  }
  
#line 523
  jint l = OrgBouncycastlePqcMathLinearalgebraIntegerFunctions_orderWithInt_withInt_(m, p);
  
#line 525
  while (JreIntMod(l, k) != 0 || l == 0) {
    
#line 527
    while (m == 0) {
      
#line 529
      m = [random nextInt];
      m %= p - 1;
      if (m < 0) {
        
#line 533
        m += p - 1;
      }
    }
    l = OrgBouncycastlePqcMathLinearalgebraIntegerFunctions_orderWithInt_withInt_(m, p);
  }
  jint r = m;
  
#line 540
  l = JreIntDiv(k, l);
  
#line 542
  for (jint i = 2; i <= l; i++) {
    
#line 544
    r *= m;
  }
  
#line 547
  return r;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcMathLinearalgebraGF2nONBField)
