//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/linearalgebra/Permutation.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/pqc/math/linearalgebra/IntUtils.h"
#include "org/bouncycastle/pqc/math/linearalgebra/IntegerFunctions.h"
#include "org/bouncycastle/pqc/math/linearalgebra/LittleEndianConversions.h"
#include "org/bouncycastle/pqc/math/linearalgebra/Permutation.h"
#include "org/bouncycastle/pqc/math/linearalgebra/RandUtils.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/math/linearalgebra/Permutation must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcMathLinearalgebraPermutation () {
 @public
  /*!
   @brief perm holds the elements of the permutation vector, i.e.
   <tt>[perm(0),
  perm(1), ..., perm(n-1)]</tt>
   */
  IOSIntArray *perm_;
}

/*!
 @brief Check that the given array corresponds to a permutation of the set 
 <tt>{0, 1, ..., n-1}</tt>.
 @param perm permutation vector
 @return true if perm represents an n-permutation and false otherwise
 */
- (jboolean)isPermutationWithIntArray:(IOSIntArray *)perm;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcMathLinearalgebraPermutation, perm_, IOSIntArray *)

__attribute__((unused)) static jboolean OrgBouncycastlePqcMathLinearalgebraPermutation_isPermutationWithIntArray_(OrgBouncycastlePqcMathLinearalgebraPermutation *self, IOSIntArray *perm);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/linearalgebra/Permutation.java"


#line 13
@implementation OrgBouncycastlePqcMathLinearalgebraPermutation


#line 27
- (instancetype)initWithInt:(jint)n {
  OrgBouncycastlePqcMathLinearalgebraPermutation_initWithInt_(self, n);
  return self;
}


#line 46
- (instancetype)initWithIntArray:(IOSIntArray *)perm {
  OrgBouncycastlePqcMathLinearalgebraPermutation_initWithIntArray_(self, perm);
  return self;
}


#line 62
- (instancetype)initWithByteArray:(IOSByteArray *)enc {
  OrgBouncycastlePqcMathLinearalgebraPermutation_initWithByteArray_(self, enc);
  return self;
}


#line 96
- (instancetype)initWithInt:(jint)n
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr {
  OrgBouncycastlePqcMathLinearalgebraPermutation_initWithInt_withJavaSecuritySecureRandom_(self, n, sr);
  return self;
}


#line 126
- (IOSByteArray *)getEncoded {
  
#line 128
  jint n = ((IOSIntArray *) nil_chk(perm_))->size_;
  jint size = OrgBouncycastlePqcMathLinearalgebraIntegerFunctions_ceilLog256WithInt_(n - 1);
  IOSByteArray *result = [IOSByteArray newArrayWithLength:4 + n * size];
  OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_I2OSPWithInt_withByteArray_withInt_(n, result, 0);
  for (jint i = 0; i < n; i++) {
    
#line 134
    OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_I2OSPWithInt_withByteArray_withInt_withInt_(IOSIntArray_Get(nil_chk(perm_), i), result, 4 + i * size, size);
  }
  return result;
}


#line 142
- (IOSIntArray *)getVector {
  
#line 144
  return OrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(perm_);
}


#line 152
- (OrgBouncycastlePqcMathLinearalgebraPermutation *)computeInverse {
  
#line 154
  OrgBouncycastlePqcMathLinearalgebraPermutation *result = new_OrgBouncycastlePqcMathLinearalgebraPermutation_initWithInt_(((IOSIntArray *) nil_chk(perm_))->size_);
  for (jint i = ((IOSIntArray *) nil_chk(perm_))->size_ - 1; i >= 0; i--) {
    
#line 157
    *IOSIntArray_GetRef(result->perm_, IOSIntArray_Get(perm_, i)) = i;
  }
  return result;
}


#line 168
- (OrgBouncycastlePqcMathLinearalgebraPermutation *)rightMultiplyWithOrgBouncycastlePqcMathLinearalgebraPermutation:(OrgBouncycastlePqcMathLinearalgebraPermutation *)p {
  
#line 170
  if (((IOSIntArray *) nil_chk(((OrgBouncycastlePqcMathLinearalgebraPermutation *) nil_chk(p))->perm_))->size_ != perm_->size_) {
    
#line 172
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"length mismatch");
  }
  OrgBouncycastlePqcMathLinearalgebraPermutation *result = new_OrgBouncycastlePqcMathLinearalgebraPermutation_initWithInt_(perm_->size_);
  for (jint i = ((IOSIntArray *) nil_chk(perm_))->size_ - 1; i >= 0; i--) {
    
#line 177
    *IOSIntArray_GetRef(result->perm_, i) = IOSIntArray_Get(perm_, IOSIntArray_Get(p->perm_, i));
  }
  return result;
}


#line 191
- (jboolean)isEqual:(id)other {
  
#line 195
  if (!([other isKindOfClass:[OrgBouncycastlePqcMathLinearalgebraPermutation class]])) {
    
#line 197
    return false;
  }
  OrgBouncycastlePqcMathLinearalgebraPermutation *otherPerm = (OrgBouncycastlePqcMathLinearalgebraPermutation *) cast_chk(other, [OrgBouncycastlePqcMathLinearalgebraPermutation class]);
  
#line 201
  return OrgBouncycastlePqcMathLinearalgebraIntUtils_equalsWithIntArray_withIntArray_(perm_, ((OrgBouncycastlePqcMathLinearalgebraPermutation *) nil_chk(otherPerm))->perm_);
}


#line 207
- (NSString *)description {
  
#line 210
  NSString *result = JreStrcat("CI", '[', IOSIntArray_Get(nil_chk(perm_), 0));
  for (jint i = 1; i < perm_->size_; i++) {
    
#line 213
    (void) JreStrAppendStrong(&result, "$I", @", ", IOSIntArray_Get(perm_, i));
  }
  (void) JreStrAppendStrong(&result, "$", @"]");
  return result;
}


#line 222
- (NSUInteger)hash {
  
#line 225
  return OrgBouncycastleUtilArrays_hashCodeWithIntArray_(perm_);
}


#line 235
- (jboolean)isPermutationWithIntArray:(IOSIntArray *)perm {
  return OrgBouncycastlePqcMathLinearalgebraPermutation_isPermutationWithIntArray_(self, perm);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathLinearalgebraPermutation;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastlePqcMathLinearalgebraPermutation;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 10, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithIntArray:);
  methods[2].selector = @selector(initWithByteArray:);
  methods[3].selector = @selector(initWithInt:withJavaSecuritySecureRandom:);
  methods[4].selector = @selector(getEncoded);
  methods[5].selector = @selector(getVector);
  methods[6].selector = @selector(computeInverse);
  methods[7].selector = @selector(rightMultiplyWithOrgBouncycastlePqcMathLinearalgebraPermutation:);
  methods[8].selector = @selector(isEqual:);
  methods[9].selector = @selector(description);
  methods[10].selector = @selector(hash);
  methods[11].selector = @selector(isPermutationWithIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "perm_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "[I", "[B", "ILJavaSecuritySecureRandom;", "rightMultiply", "LOrgBouncycastlePqcMathLinearalgebraPermutation;", "equals", "LNSObject;", "toString", "hashCode", "isPermutation" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcMathLinearalgebraPermutation = { "Permutation", "org.bouncycastle.pqc.math.linearalgebra", ptrTable, methods, fields, 7, 0x1, 12, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcMathLinearalgebraPermutation;
}

@end


#line 27
void OrgBouncycastlePqcMathLinearalgebraPermutation_initWithInt_(OrgBouncycastlePqcMathLinearalgebraPermutation *self, jint n) {
  NSObject_init(self);
  if (n <= 0) {
    
#line 31
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid length");
  }
  
#line 34
  self->perm_ = [IOSIntArray newArrayWithLength:n];
  for (jint i = n - 1; i >= 0; i--) {
    
#line 37
    *IOSIntArray_GetRef(self->perm_, i) = i;
  }
}


#line 27
OrgBouncycastlePqcMathLinearalgebraPermutation *new_OrgBouncycastlePqcMathLinearalgebraPermutation_initWithInt_(jint n) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathLinearalgebraPermutation, initWithInt_, n)
}


#line 27
OrgBouncycastlePqcMathLinearalgebraPermutation *create_OrgBouncycastlePqcMathLinearalgebraPermutation_initWithInt_(jint n) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathLinearalgebraPermutation, initWithInt_, n)
}


#line 46
void OrgBouncycastlePqcMathLinearalgebraPermutation_initWithIntArray_(OrgBouncycastlePqcMathLinearalgebraPermutation *self, IOSIntArray *perm) {
  NSObject_init(self);
  if (!OrgBouncycastlePqcMathLinearalgebraPermutation_isPermutationWithIntArray_(self, perm)) {
    
#line 50
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 51
    @"array is not a permutation vector");
  }
  
#line 54
  self->perm_ = OrgBouncycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(perm);
}


#line 46
OrgBouncycastlePqcMathLinearalgebraPermutation *new_OrgBouncycastlePqcMathLinearalgebraPermutation_initWithIntArray_(IOSIntArray *perm) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathLinearalgebraPermutation, initWithIntArray_, perm)
}


#line 46
OrgBouncycastlePqcMathLinearalgebraPermutation *create_OrgBouncycastlePqcMathLinearalgebraPermutation_initWithIntArray_(IOSIntArray *perm) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathLinearalgebraPermutation, initWithIntArray_, perm)
}


#line 62
void OrgBouncycastlePqcMathLinearalgebraPermutation_initWithByteArray_(OrgBouncycastlePqcMathLinearalgebraPermutation *self, IOSByteArray *enc) {
  NSObject_init(self);
  if (((IOSByteArray *) nil_chk(enc))->size_ <= 4) {
    
#line 66
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid encoding");
  }
  
#line 69
  jint n = OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_OS2IPWithByteArray_withInt_(enc, 0);
  jint size = OrgBouncycastlePqcMathLinearalgebraIntegerFunctions_ceilLog256WithInt_(n - 1);
  
#line 72
  if (enc->size_ != 4 + n * size) {
    
#line 74
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid encoding");
  }
  
#line 77
  self->perm_ = [IOSIntArray newArrayWithLength:n];
  for (jint i = 0; i < n; i++) {
    
#line 80
    *IOSIntArray_GetRef(nil_chk(self->perm_), i) = OrgBouncycastlePqcMathLinearalgebraLittleEndianConversions_OS2IPWithByteArray_withInt_withInt_(enc, 4 + i * size, size);
  }
  
#line 83
  if (!OrgBouncycastlePqcMathLinearalgebraPermutation_isPermutationWithIntArray_(self, self->perm_)) {
    
#line 85
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid encoding");
  }
}


#line 62
OrgBouncycastlePqcMathLinearalgebraPermutation *new_OrgBouncycastlePqcMathLinearalgebraPermutation_initWithByteArray_(IOSByteArray *enc) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathLinearalgebraPermutation, initWithByteArray_, enc)
}


#line 62
OrgBouncycastlePqcMathLinearalgebraPermutation *create_OrgBouncycastlePqcMathLinearalgebraPermutation_initWithByteArray_(IOSByteArray *enc) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathLinearalgebraPermutation, initWithByteArray_, enc)
}


#line 96
void OrgBouncycastlePqcMathLinearalgebraPermutation_initWithInt_withJavaSecuritySecureRandom_(OrgBouncycastlePqcMathLinearalgebraPermutation *self, jint n, JavaSecuritySecureRandom *sr) {
  NSObject_init(self);
  if (n <= 0) {
    
#line 100
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid length");
  }
  
#line 103
  self->perm_ = [IOSIntArray newArrayWithLength:n];
  
#line 105
  IOSIntArray *help = [IOSIntArray newArrayWithLength:n];
  for (jint i = 0; i < n; i++) {
    
#line 108
    *IOSIntArray_GetRef(help, i) = i;
  }
  
#line 111
  jint k = n;
  for (jint j = 0; j < n; j++) {
    
#line 114
    jint i = OrgBouncycastlePqcMathLinearalgebraRandUtils_nextIntWithJavaSecuritySecureRandom_withInt_(sr, k);
    k--;
    *IOSIntArray_GetRef(nil_chk(self->perm_), j) = IOSIntArray_Get(help, i);
    *IOSIntArray_GetRef(help, i) = IOSIntArray_Get(help, k);
  }
}


#line 96
OrgBouncycastlePqcMathLinearalgebraPermutation *new_OrgBouncycastlePqcMathLinearalgebraPermutation_initWithInt_withJavaSecuritySecureRandom_(jint n, JavaSecuritySecureRandom *sr) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcMathLinearalgebraPermutation, initWithInt_withJavaSecuritySecureRandom_, n, sr)
}


#line 96
OrgBouncycastlePqcMathLinearalgebraPermutation *create_OrgBouncycastlePqcMathLinearalgebraPermutation_initWithInt_withJavaSecuritySecureRandom_(jint n, JavaSecuritySecureRandom *sr) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcMathLinearalgebraPermutation, initWithInt_withJavaSecuritySecureRandom_, n, sr)
}


#line 235
jboolean OrgBouncycastlePqcMathLinearalgebraPermutation_isPermutationWithIntArray_(OrgBouncycastlePqcMathLinearalgebraPermutation *self, IOSIntArray *perm) {
  
#line 237
  jint n = ((IOSIntArray *) nil_chk(perm))->size_;
  IOSBooleanArray *onlyOnce = [IOSBooleanArray newArrayWithLength:n];
  
#line 240
  for (jint i = 0; i < n; i++) {
    
#line 242
    if ((IOSIntArray_Get(perm, i) < 0) || (IOSIntArray_Get(perm, i) >= n) || IOSBooleanArray_Get(onlyOnce, IOSIntArray_Get(perm, i))) {
      
#line 244
      return false;
    }
    *IOSBooleanArray_GetRef(onlyOnce, IOSIntArray_Get(perm, i)) = true;
  }
  
#line 249
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcMathLinearalgebraPermutation)
