//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nField.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2nField")
#ifdef RESTRICT_OrgBouncycastlePqcMathLinearalgebraGF2nField
#define INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2nField 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2nField 1
#endif
#undef RESTRICT_OrgBouncycastlePqcMathLinearalgebraGF2nField

#if !defined (OrgBouncycastlePqcMathLinearalgebraGF2nField_) && (INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2nField || defined(INCLUDE_OrgBouncycastlePqcMathLinearalgebraGF2nField))
#define OrgBouncycastlePqcMathLinearalgebraGF2nField_

@class IOSObjectArray;
@class JavaSecuritySecureRandom;
@class JavaUtilVector;
@class OrgBouncycastlePqcMathLinearalgebraGF2Polynomial;
@class OrgBouncycastlePqcMathLinearalgebraGF2nElement;

/*!
 @brief This abstract class defines the finite field <i>GF(2<sup>n</sup>)</i>.It
  holds the extension degree <i>n</i>, the characteristic, the irreducible
  fieldpolynomial and conversion matrices.
 GF2nField is implemented by the
  classes GF2nPolynomialField and GF2nONBField.
 - seealso: GF2nONBField
 - seealso: GF2nPolynomialField
 */
@interface OrgBouncycastlePqcMathLinearalgebraGF2nField : NSObject {
 @public
  JavaSecuritySecureRandom *random_;
  /*!
   @brief the degree of this field
   */
  jint mDegree_;
  /*!
   @brief the irreducible fieldPolynomial stored in normal order (also for ONB)
   */
  OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *fieldPolynomial_;
  /*!
   @brief holds a list of GF2nFields to which elements have been converted and thus
  a COB-Matrix exists
   */
  JavaUtilVector *fields_;
  /*!
   @brief the COB matrices
   */
  JavaUtilVector *matrices_;
}

#pragma mark Public

/*!
 @brief Converts the given element in representation according to this field to a
  new element in representation according to B1 using the change-of-basis
  matrix calculated by computeCOBMatrix.
 @param elem the GF2nElement to convert
 @param basis the basis to convert  <tt> elem </tt>  to
 @return <tt>elem</tt> converted to a new element representation
          according to <tt>basis</tt>
 - seealso: GF2nField#computeCOBMatrix
 - seealso: GF2nField#getRandomRoot
 - seealso: GF2nPolynomial
 - seealso: "P1363 A.7 p109ff"
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nElement *)convertWithOrgBouncycastlePqcMathLinearalgebraGF2nElement:(OrgBouncycastlePqcMathLinearalgebraGF2nElement *)elem
                                                             withOrgBouncycastlePqcMathLinearalgebraGF2nField:(OrgBouncycastlePqcMathLinearalgebraGF2nField *)basis;

/*!
 @brief Decides whether the given object <tt>other</tt> is the same as this
  field.
 @param other another object
 @return (this == other)
 */
- (jboolean)isEqual:(id)other;

/*!
 @brief Returns the degree <i>n</i> of this field.
 @return the degree <i>n</i> of this field
 */
- (jint)getDegree;

/*!
 @brief Returns the fieldpolynomial as a new Bitstring.
 @return a copy of the fieldpolynomial as a new Bitstring
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)getFieldPolynomial;

/*!
 @return the hash code of this field
 */
- (NSUInteger)hash;

#pragma mark Protected

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

/*!
 @brief Computes the change-of-basis matrix for basis conversion according to
  1363.The result is stored in the lists fields and matrices.
 @param B1 the GF2nField to convert to
 - seealso: "P1363 A.7.3, p111ff"
 */
- (void)computeCOBMatrixWithOrgBouncycastlePqcMathLinearalgebraGF2nField:(OrgBouncycastlePqcMathLinearalgebraGF2nField *)B1;

/*!
 @brief Computes the fieldpolynomial.This can take a long time for big degrees.
 */
- (void)computeFieldPolynomial;

/*!
 @brief Computes a random root from the given irreducible fieldpolynomial
  according to IEEE 1363 algorithm A.5.6.This cal take very long for big
  degrees.
 @param B0FieldPolynomial the fieldpolynomial if the other basis as a Bitstring
 @return a random root of BOFieldPolynomial in representation according to
          this field
 - seealso: "P1363 A.5.6, p103f"
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2nElement *)getRandomRootWithOrgBouncycastlePqcMathLinearalgebraGF2Polynomial:(OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)B0FieldPolynomial;

/*!
 @brief Inverts the given matrix represented as bitstrings.
 @param matrix the matrix to invert as a Bitstring[]
 @return matrix^(-1)
 */
- (IOSObjectArray *)invertMatrixWithOrgBouncycastlePqcMathLinearalgebraGF2PolynomialArray:(IOSObjectArray *)matrix;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcMathLinearalgebraGF2nField)

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcMathLinearalgebraGF2nField, random_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcMathLinearalgebraGF2nField, fieldPolynomial_, OrgBouncycastlePqcMathLinearalgebraGF2Polynomial *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcMathLinearalgebraGF2nField, fields_, JavaUtilVector *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcMathLinearalgebraGF2nField, matrices_, JavaUtilVector *)

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraGF2nField_initWithJavaSecuritySecureRandom_(OrgBouncycastlePqcMathLinearalgebraGF2nField *self, JavaSecuritySecureRandom *random);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathLinearalgebraGF2nField)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraGF2nField")
