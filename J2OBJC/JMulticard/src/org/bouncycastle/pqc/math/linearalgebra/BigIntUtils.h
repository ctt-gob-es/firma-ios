//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/math/linearalgebra/BigIntUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraBigIntUtils")
#ifdef RESTRICT_OrgBouncycastlePqcMathLinearalgebraBigIntUtils
#define INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraBigIntUtils 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraBigIntUtils 1
#endif
#undef RESTRICT_OrgBouncycastlePqcMathLinearalgebraBigIntUtils

#if !defined (OrgBouncycastlePqcMathLinearalgebraBigIntUtils_) && (INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraBigIntUtils || defined(INCLUDE_OrgBouncycastlePqcMathLinearalgebraBigIntUtils))
#define OrgBouncycastlePqcMathLinearalgebraBigIntUtils_

@class IOSByteArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaMathBigInteger;

/*!
 @brief FIXME: is this really necessary?!
 */
@interface OrgBouncycastlePqcMathLinearalgebraBigIntUtils : NSObject

#pragma mark Public

/*!
 @brief Checks if two BigInteger arrays contain the same entries
 @param a first BigInteger array
 @param b second BigInteger array
 @return true or false
 */
+ (jboolean)equalsWithJavaMathBigIntegerArray:(IOSObjectArray *)a
                  withJavaMathBigIntegerArray:(IOSObjectArray *)b;

/*!
 @brief Fill the given BigInteger array with the given value.
 @param array the array
 @param value the value
 */
+ (void)fillWithJavaMathBigIntegerArray:(IOSObjectArray *)array
                 withJavaMathBigInteger:(JavaMathBigInteger *)value;

/*!
 @brief Generates a subarray of a given BigInteger array.
 @param input -               the input BigInteger array
 @param start -               the start index
 @param end -               the end index
 @return a subarray of <tt>input</tt>, ranging from <tt>start</tt> to
          <tt>end</tt>
 */
+ (IOSObjectArray *)subArrayWithJavaMathBigIntegerArray:(IOSObjectArray *)input
                                                withInt:(jint)start
                                                withInt:(jint)end;

/*!
 @brief Converts a BigInteger array into an integer array
 @param input -               the BigInteger array
 @return the integer array
 */
+ (IOSIntArray *)toIntArrayWithJavaMathBigIntegerArray:(IOSObjectArray *)input;

/*!
 @brief Converts a BigInteger array into an integer array, reducing all
  BigIntegers mod q.
 @param q -               the modulus
 @param input -               the BigInteger array
 @return the integer array
 */
+ (IOSIntArray *)toIntArrayModQWithInt:(jint)q
           withJavaMathBigIntegerArray:(IOSObjectArray *)input;

/*!
 @brief Return the value of <tt>big</tt> as a byte array.Although BigInteger
  has such a method, it uses an extra bit to indicate the sign of the
  number.
 For elliptic curve cryptography, the numbers usually are
  positive. Thus, this helper method returns a byte array of minimal
  length, ignoring the sign of the number.
 @param value the  <tt> BigInteger </tt>  value to be converted to a byte
                array
 @return the value <tt>big</tt> as byte array
 */
+ (IOSByteArray *)toMinimalByteArrayWithJavaMathBigInteger:(JavaMathBigInteger *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcMathLinearalgebraBigIntUtils)

FOUNDATION_EXPORT jboolean OrgBouncycastlePqcMathLinearalgebraBigIntUtils_equalsWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(IOSObjectArray *a, IOSObjectArray *b);

FOUNDATION_EXPORT void OrgBouncycastlePqcMathLinearalgebraBigIntUtils_fillWithJavaMathBigIntegerArray_withJavaMathBigInteger_(IOSObjectArray *array, JavaMathBigInteger *value);

FOUNDATION_EXPORT IOSObjectArray *OrgBouncycastlePqcMathLinearalgebraBigIntUtils_subArrayWithJavaMathBigIntegerArray_withInt_withInt_(IOSObjectArray *input, jint start, jint end);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastlePqcMathLinearalgebraBigIntUtils_toIntArrayWithJavaMathBigIntegerArray_(IOSObjectArray *input);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastlePqcMathLinearalgebraBigIntUtils_toIntArrayModQWithInt_withJavaMathBigIntegerArray_(jint q, IOSObjectArray *input);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastlePqcMathLinearalgebraBigIntUtils_toMinimalByteArrayWithJavaMathBigInteger_(JavaMathBigInteger *value);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcMathLinearalgebraBigIntUtils)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcMathLinearalgebraBigIntUtils")
