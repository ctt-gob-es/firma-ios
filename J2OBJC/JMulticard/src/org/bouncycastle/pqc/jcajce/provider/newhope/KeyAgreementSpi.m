//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/newhope/KeyAgreementSpi.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/Key.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/util/BaseAgreementSpi.h"
#include "org/bouncycastle/pqc/crypto/ExchangePair.h"
#include "org/bouncycastle/pqc/crypto/newhope/NHAgreement.h"
#include "org/bouncycastle/pqc/crypto/newhope/NHExchangePairGenerator.h"
#include "org/bouncycastle/pqc/crypto/newhope/NHPublicKeyParameters.h"
#include "org/bouncycastle/pqc/jcajce/provider/newhope/BCNHPrivateKey.h"
#include "org/bouncycastle/pqc/jcajce/provider/newhope/BCNHPublicKey.h"
#include "org/bouncycastle/pqc/jcajce/provider/newhope/KeyAgreementSpi.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/jcajce/provider/newhope/KeyAgreementSpi must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi () {
 @public
  OrgBouncycastlePqcCryptoNewhopeNHAgreement *agreement_;
  OrgBouncycastlePqcJcajceProviderNewhopeBCNHPublicKey *otherPartyKey_;
  OrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator *exchangePairGenerator_;
  IOSByteArray *shared_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi, agreement_, OrgBouncycastlePqcCryptoNewhopeNHAgreement *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi, otherPartyKey_, OrgBouncycastlePqcJcajceProviderNewhopeBCNHPublicKey *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi, exchangePairGenerator_, OrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi, shared_, IOSByteArray *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/newhope/KeyAgreementSpi.java"


#line 19
@implementation OrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 28
- (instancetype)init {
  OrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 33
- (void)engineInitWithJavaSecurityKey:(id<JavaSecurityKey>)key
         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  
#line 37
  if (key != nil) {
    
#line 39
    agreement_ = new_OrgBouncycastlePqcCryptoNewhopeNHAgreement_init();
    
#line 41
    [agreement_ init__WithOrgBouncycastleCryptoCipherParameters:[((OrgBouncycastlePqcJcajceProviderNewhopeBCNHPrivateKey *) cast_chk(key, [OrgBouncycastlePqcJcajceProviderNewhopeBCNHPrivateKey class])) getKeyParams]];
  }
  else {
    
#line 45
    exchangePairGenerator_ = new_OrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator_initWithJavaSecuritySecureRandom_(secureRandom);
  }
}


#line 49
- (void)doInitFromKeyWithJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)algorithmParameterSpec
            withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  
#line 53
  @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"NewHope does not require parameters");
}


#line 56
- (id<JavaSecurityKey>)engineDoPhaseWithJavaSecurityKey:(id<JavaSecurityKey>)key
                                            withBoolean:(jboolean)lastPhase {
  
#line 60
  if (!lastPhase) {
    
#line 62
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"NewHope can only be between two parties.");
  }
  
#line 65
  otherPartyKey_ = (OrgBouncycastlePqcJcajceProviderNewhopeBCNHPublicKey *) cast_chk(key, [OrgBouncycastlePqcJcajceProviderNewhopeBCNHPublicKey class]);
  
#line 67
  if (exchangePairGenerator_ != nil) {
    
#line 69
    OrgBouncycastlePqcCryptoExchangePair *exchPair = [exchangePairGenerator_ generateExchangeWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter:(OrgBouncycastleCryptoParamsAsymmetricKeyParameter *) cast_chk([((OrgBouncycastlePqcJcajceProviderNewhopeBCNHPublicKey *) nil_chk(otherPartyKey_)) getKeyParams], [OrgBouncycastleCryptoParamsAsymmetricKeyParameter class])];
    
#line 71
    shared_ = [((OrgBouncycastlePqcCryptoExchangePair *) nil_chk(exchPair)) getSharedValue];
    
#line 73
    return new_OrgBouncycastlePqcJcajceProviderNewhopeBCNHPublicKey_initWithOrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters_((OrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters *) cast_chk([exchPair getPublicKey], [OrgBouncycastlePqcCryptoNewhopeNHPublicKeyParameters class]));
  }
  else {
    
#line 77
    shared_ = [((OrgBouncycastlePqcCryptoNewhopeNHAgreement *) nil_chk(agreement_)) calculateAgreementWithOrgBouncycastleCryptoCipherParameters:[((OrgBouncycastlePqcJcajceProviderNewhopeBCNHPublicKey *) nil_chk(otherPartyKey_)) getKeyParams]];
    
#line 79
    return nil;
  }
}


#line 83
- (IOSByteArray *)engineGenerateSecret {
  
#line 87
  IOSByteArray *rv = OrgBouncycastleUtilArrays_cloneWithByteArray_(shared_);
  
#line 89
  OrgBouncycastleUtilArrays_fillWithByteArray_withByte_(shared_, (jbyte) 0);
  
#line 91
  return rv;
}


#line 94
- (jint)engineGenerateSecretWithByteArray:(IOSByteArray *)bytes
                                  withInt:(jint)offset {
  
#line 98
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(shared_, 0, bytes, offset, ((IOSByteArray *) nil_chk(shared_))->size_);
  
#line 100
  OrgBouncycastleUtilArrays_fillWithByteArray_withByte_(shared_, (jbyte) 0);
  
#line 102
  return ((IOSByteArray *) nil_chk(shared_))->size_;
}


#line 105
- (IOSByteArray *)doCalcSecret {
  
#line 108
  return [self engineGenerateSecret];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, 5, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x4, 6, 7, 8, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 9, -1, -1, -1 },
    { NULL, "I", 0x4, 10, 11, 12, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineInitWithJavaSecurityKey:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(doInitFromKeyWithJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(engineDoPhaseWithJavaSecurityKey:withBoolean:);
  methods[4].selector = @selector(engineGenerateSecret);
  methods[5].selector = @selector(engineGenerateSecretWithByteArray:withInt:);
  methods[6].selector = @selector(doCalcSecret);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "agreement_", "LOrgBouncycastlePqcCryptoNewhopeNHAgreement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "otherPartyKey_", "LOrgBouncycastlePqcJcajceProviderNewhopeBCNHPublicKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "exchangePairGenerator_", "LOrgBouncycastlePqcCryptoNewhopeNHExchangePairGenerator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "shared_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "engineInit", "LJavaSecurityKey;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;", "doInitFromKey", "LJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;LJavaSecurityInvalidAlgorithmParameterException;", "engineDoPhase", "LJavaSecurityKey;Z", "LJavaSecurityInvalidKeyException;LJavaLangIllegalStateException;", "LJavaLangIllegalStateException;", "engineGenerateSecret", "[BI", "LJavaLangIllegalStateException;LJavaxCryptoShortBufferException;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi = { "KeyAgreementSpi", "org.bouncycastle.pqc.jcajce.provider.newhope", ptrTable, methods, fields, 7, 0x1, 7, 4, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi;
}

@end


#line 28
void OrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi_init(OrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi *self) {
  OrgBouncycastleJcajceProviderAsymmetricUtilBaseAgreementSpi_initWithNSString_withOrgBouncycastleCryptoDerivationFunction_(self,
#line 30
  @"NH", nil);
}


#line 28
OrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi *new_OrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi, init)
}


#line 28
OrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi *create_OrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcJcajceProviderNewhopeKeyAgreementSpi)
