//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/mceliece/McElieceKeyFactorySpi.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Key.h"
#include "java/security/KeyFactorySpi.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/spec/InvalidKeySpecException.h"
#include "java/security/spec/KeySpec.h"
#include "java/security/spec/PKCS8EncodedKeySpec.h"
#include "java/security/spec/X509EncodedKeySpec.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/pkcs/PrivateKeyInfo.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/bouncycastle/crypto/Digest.h"
#include "org/bouncycastle/crypto/digests/SHA256Digest.h"
#include "org/bouncycastle/pqc/asn1/McEliecePrivateKey.h"
#include "org/bouncycastle/pqc/asn1/McEliecePublicKey.h"
#include "org/bouncycastle/pqc/asn1/PQCObjectIdentifiers.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McEliecePublicKeyParameters.h"
#include "org/bouncycastle/pqc/jcajce/provider/mceliece/BCMcEliecePrivateKey.h"
#include "org/bouncycastle/pqc/jcajce/provider/mceliece/BCMcEliecePublicKey.h"
#include "org/bouncycastle/pqc/jcajce/provider/mceliece/McElieceKeyFactorySpi.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2Matrix.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2mField.h"
#include "org/bouncycastle/pqc/math/linearalgebra/Permutation.h"
#include "org/bouncycastle/pqc/math/linearalgebra/PolynomialGF2mSmallM.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/jcajce/provider/mceliece/McElieceKeyFactorySpi must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi ()

+ (id<OrgBouncycastleCryptoDigest>)getDigestWithOrgBouncycastleAsn1X509AlgorithmIdentifier:(OrgBouncycastleAsn1X509AlgorithmIdentifier *)algId;

@end

__attribute__((unused)) static id<OrgBouncycastleCryptoDigest> OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi_getDigestWithOrgBouncycastleAsn1X509AlgorithmIdentifier_(OrgBouncycastleAsn1X509AlgorithmIdentifier *algId);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/mceliece/McElieceKeyFactorySpi.java"

NSString *OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi_OID = @"1.3.6.1.4.1.8301.3.1.3.4.1";


#line 33
@implementation OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 33
- (instancetype)init {
  OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 50
- (id<JavaSecurityPublicKey>)engineGeneratePublicWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  
#line 54
  if ([keySpec isKindOfClass:[JavaSecuritySpecX509EncodedKeySpec class]]) {
    
#line 57
    IOSByteArray *encKey = [((JavaSecuritySpecX509EncodedKeySpec *) nil_chk(((JavaSecuritySpecX509EncodedKeySpec *) keySpec))) getEncoded];
    
#line 60
    OrgBouncycastleAsn1X509SubjectPublicKeyInfo *pki;
    @try {
      
#line 63
      pki = OrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(encKey));
    }
    @catch (JavaIoIOException *e) {
      
#line 67
      @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_([e description]);
    }
    
#line 70
    @try {
      
#line 72
      if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgBouncycastlePqcAsn1PQCObjectIdentifiers, mcEliece))) equalsWithOrgBouncycastleAsn1ASN1Primitive:[((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(pki)) getAlgorithm])) getAlgorithm]]) {
        
#line 74
        OrgBouncycastlePqcAsn1McEliecePublicKey *key = OrgBouncycastlePqcAsn1McEliecePublicKey_getInstanceWithId_([pki parsePublicKey]);
        
#line 76
        return new_OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePublicKey_initWithOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_(new_OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_initWithInt_withInt_withOrgBouncycastlePqcMathLinearalgebraGF2Matrix_([((OrgBouncycastlePqcAsn1McEliecePublicKey *) nil_chk(key)) getN], [key getT], [key getG]));
      }
      else {
        
#line 80
        @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(@"Unable to recognise OID in McEliece public key");
      }
    }
    @catch (JavaIoIOException *cce) {
      
#line 85
      @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(JreStrcat("$$", @"Unable to decode X509EncodedKeySpec: ",
#line 87
      [cce getMessage]));
    }
  }
  
#line 91
  @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(JreStrcat("$@C", @"Unsupported key specification: ",
#line 92
  [((id<JavaSecuritySpecKeySpec>) nil_chk(keySpec)) java_getClass], '.'));
}


#line 103
- (id<JavaSecurityPrivateKey>)engineGeneratePrivateWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  
#line 107
  if ([keySpec isKindOfClass:[JavaSecuritySpecPKCS8EncodedKeySpec class]]) {
    
#line 110
    IOSByteArray *encKey = [((JavaSecuritySpecPKCS8EncodedKeySpec *) nil_chk(((JavaSecuritySpecPKCS8EncodedKeySpec *) keySpec))) getEncoded];
    
#line 113
    OrgBouncycastleAsn1PkcsPrivateKeyInfo *pki;
    
#line 115
    @try {
      
#line 117
      pki = OrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_(OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(encKey));
    }
    @catch (JavaIoIOException *e) {
      
#line 121
      @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(JreStrcat("$@", @"Unable to decode PKCS8EncodedKeySpec: ", e));
    }
    
#line 124
    @try {
      
#line 126
      if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgBouncycastlePqcAsn1PQCObjectIdentifiers, mcEliece))) equalsWithOrgBouncycastleAsn1ASN1Primitive:[((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(pki)) getPrivateKeyAlgorithm])) getAlgorithm]]) {
        
#line 128
        OrgBouncycastlePqcAsn1McEliecePrivateKey *key = OrgBouncycastlePqcAsn1McEliecePrivateKey_getInstanceWithId_([pki parsePrivateKey]);
        
#line 130
        return new_OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey_initWithOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_(new_OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_initWithInt_withInt_withOrgBouncycastlePqcMathLinearalgebraGF2mField_withOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_withOrgBouncycastlePqcMathLinearalgebraPermutation_withOrgBouncycastlePqcMathLinearalgebraPermutation_withOrgBouncycastlePqcMathLinearalgebraGF2Matrix_([((OrgBouncycastlePqcAsn1McEliecePrivateKey *) nil_chk(key)) getN], [key getK], [key getField], [key getGoppaPoly], [key getP1], [key getP2], [key getSInv]));
      }
      else {
        
#line 134
        @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(@"Unable to recognise OID in McEliece private key");
      }
    }
    @catch (JavaIoIOException *cce) {
      
#line 139
      @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(
#line 140
      @"Unable to decode PKCS8EncodedKeySpec.");
    }
  }
  
#line 144
  @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(JreStrcat("$@C", @"Unsupported key specification: ",
#line 145
  [((id<JavaSecuritySpecKeySpec>) nil_chk(keySpec)) java_getClass], '.'));
}


#line 160
- (id<JavaSecuritySpecKeySpec>)getKeySpecWithJavaSecurityKey:(id<JavaSecurityKey>)key
                                                withIOSClass:(IOSClass *)keySpec {
  
#line 163
  if ([key isKindOfClass:[OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey class]]) {
    
#line 165
    if ([JavaSecuritySpecPKCS8EncodedKeySpec_class_() isAssignableFrom:keySpec]) {
      
#line 167
      return new_JavaSecuritySpecPKCS8EncodedKeySpec_initWithByteArray_([((id<JavaSecurityKey>) nil_chk(key)) getEncoded]);
    }
  }
  else if ([key isKindOfClass:[OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePublicKey class]]) {
    
#line 172
    if ([JavaSecuritySpecX509EncodedKeySpec_class_() isAssignableFrom:keySpec]) {
      
#line 174
      return new_JavaSecuritySpecX509EncodedKeySpec_initWithByteArray_([((id<JavaSecurityKey>) nil_chk(key)) getEncoded]);
    }
  }
  else {
    
#line 179
    @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(JreStrcat("$@C", @"Unsupported key type: ",
#line 180
    [((id<JavaSecurityKey>) nil_chk(key)) java_getClass], '.'));
  }
  
#line 183
  @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(JreStrcat("$@C", @"Unknown key specification: ",
#line 184
  keySpec, '.'));
}

- (id<JavaSecurityKey>)translateKeyWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  
#line 199
  if (([key isKindOfClass:[OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey class]]) ||
#line 200
  ([key isKindOfClass:[OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePublicKey class]])) {
    
#line 202
    return key;
  }
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"Unsupported key type.");
}


#line 208
- (id<JavaSecurityPublicKey>)generatePublicWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)pki {
  
#line 213
  OrgBouncycastleAsn1ASN1Primitive *innerType = [((OrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(pki)) parsePublicKey];
  OrgBouncycastlePqcAsn1McEliecePublicKey *key = OrgBouncycastlePqcAsn1McEliecePublicKey_getInstanceWithId_(innerType);
  return new_OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePublicKey_initWithOrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_(new_OrgBouncycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_initWithInt_withInt_withOrgBouncycastlePqcMathLinearalgebraGF2Matrix_([((OrgBouncycastlePqcAsn1McEliecePublicKey *) nil_chk(key)) getN], [key getT], [key getG]));
}


#line 218
- (id<JavaSecurityPrivateKey>)generatePrivateWithOrgBouncycastleAsn1PkcsPrivateKeyInfo:(OrgBouncycastleAsn1PkcsPrivateKeyInfo *)pki {
  
#line 223
  OrgBouncycastleAsn1ASN1Primitive *innerType = [((id<OrgBouncycastleAsn1ASN1Encodable>) nil_chk([((OrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(pki)) parsePrivateKey])) toASN1Primitive];
  OrgBouncycastlePqcAsn1McEliecePrivateKey *key = OrgBouncycastlePqcAsn1McEliecePrivateKey_getInstanceWithId_(innerType);
  return new_OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey_initWithOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_(new_OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_initWithInt_withInt_withOrgBouncycastlePqcMathLinearalgebraGF2mField_withOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_withOrgBouncycastlePqcMathLinearalgebraPermutation_withOrgBouncycastlePqcMathLinearalgebraPermutation_withOrgBouncycastlePqcMathLinearalgebraGF2Matrix_([((OrgBouncycastlePqcAsn1McEliecePrivateKey *) nil_chk(key)) getN], [key getK], [key getField], [key getGoppaPoly], [key getP1], [key getP2], [key getSInv]));
}


#line 228
- (id<JavaSecuritySpecKeySpec>)engineGetKeySpecWithJavaSecurityKey:(id<JavaSecurityKey>)key
                                                      withIOSClass:(IOSClass *)tClass {
  
#line 233
  return nil;
}


#line 236
- (id<JavaSecurityKey>)engineTranslateKeyWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  
#line 241
  return nil;
}


#line 244
+ (id<OrgBouncycastleCryptoDigest>)getDigestWithOrgBouncycastleAsn1X509AlgorithmIdentifier:(OrgBouncycastleAsn1X509AlgorithmIdentifier *)algId {
  return OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi_getDigestWithOrgBouncycastleAsn1X509AlgorithmIdentifier_(algId);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x4, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x4, 3, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecKeySpec;", 0x1, 4, 5, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x1, 9, 10, 11, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x1, 12, 13, 11, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecKeySpec;", 0x4, 14, 5, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x4, 15, 7, 8, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoDigest;", 0xa, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineGeneratePublicWithJavaSecuritySpecKeySpec:);
  methods[2].selector = @selector(engineGeneratePrivateWithJavaSecuritySpecKeySpec:);
  methods[3].selector = @selector(getKeySpecWithJavaSecurityKey:withIOSClass:);
  methods[4].selector = @selector(translateKeyWithJavaSecurityKey:);
  methods[5].selector = @selector(generatePublicWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  methods[6].selector = @selector(generatePrivateWithOrgBouncycastleAsn1PkcsPrivateKeyInfo:);
  methods[7].selector = @selector(engineGetKeySpecWithJavaSecurityKey:withIOSClass:);
  methods[8].selector = @selector(engineTranslateKeyWithJavaSecurityKey:);
  methods[9].selector = @selector(getDigestWithOrgBouncycastleAsn1X509AlgorithmIdentifier:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
  };
  static const void *ptrTable[] = { "engineGeneratePublic", "LJavaSecuritySpecKeySpec;", "LJavaSecuritySpecInvalidKeySpecException;", "engineGeneratePrivate", "getKeySpec", "LJavaSecurityKey;LIOSClass;", "translateKey", "LJavaSecurityKey;", "LJavaSecurityInvalidKeyException;", "generatePublic", "LOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", "LJavaIoIOException;", "generatePrivate", "LOrgBouncycastleAsn1PkcsPrivateKeyInfo;", "engineGetKeySpec", "engineTranslateKey", "getDigest", "LOrgBouncycastleAsn1X509AlgorithmIdentifier;", &OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi_OID };
  static const J2ObjcClassInfo _OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi = { "McElieceKeyFactorySpi", "org.bouncycastle.pqc.jcajce.provider.mceliece", ptrTable, methods, fields, 7, 0x1, 10, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi;
}

@end


#line 33
void OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi_init(OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi *self) {
  JavaSecurityKeyFactorySpi_init(self);
}


#line 33
OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi *new_OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi, init)
}


#line 33
OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi *create_OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi, init)
}


#line 244
id<OrgBouncycastleCryptoDigest> OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi_getDigestWithOrgBouncycastleAsn1X509AlgorithmIdentifier_(OrgBouncycastleAsn1X509AlgorithmIdentifier *algId) {
  OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi_initialize();
  return new_OrgBouncycastleCryptoDigestsSHA256Digest_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcJcajceProviderMcelieceMcElieceKeyFactorySpi)
