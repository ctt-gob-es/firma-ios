//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/sphincs/BCSphincs256PublicKey.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/pqc/asn1/PQCObjectIdentifiers.h"
#include "org/bouncycastle/pqc/asn1/SPHINCS256KeyParams.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCSPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/util/PublicKeyFactory.h"
#include "org/bouncycastle/pqc/crypto/util/SubjectPublicKeyInfoFactory.h"
#include "org/bouncycastle/pqc/jcajce/provider/sphincs/BCSphincs256PublicKey.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/jcajce/provider/sphincs/BCSphincs256PublicKey must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey () {
 @public
  OrgBouncycastleAsn1ASN1ObjectIdentifier *treeDigest_;
  OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *params_;
}

- (void)init__WithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo OBJC_METHOD_FAMILY_NONE;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey, treeDigest_, OrgBouncycastleAsn1ASN1ObjectIdentifier *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey, params_, OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *)

inline jlong OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_get_serialVersionUID(void);
#define OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey, serialVersionUID, jlong)

__attribute__((unused)) static void OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_init__WithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *self, OrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo);

__attribute__((unused)) static void OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_readObjectWithJavaIoObjectInputStream_(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_writeObjectWithJavaIoObjectOutputStream_(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *self, JavaIoObjectOutputStream *outArg);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/sphincs/BCSphincs256PublicKey.java"


#line 20
@implementation OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey


#line 28
- (instancetype)initWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)treeDigest
  withOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters:(OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *)params {
  OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters_(self, treeDigest, params);
  return self;
}


#line 36
- (instancetype)initWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo {
  OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_initWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, keyInfo);
  return self;
}


#line 42
- (void)init__WithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo {
  OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_init__WithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, keyInfo);
}


#line 55
- (jboolean)isEqual:(id)o {
  
#line 58
  if (JreObjectEqualsEquals(o, self)) {
    
#line 60
    return true;
  }
  
#line 63
  if ([o isKindOfClass:[OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey class]]) {
    
#line 65
    OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *otherKey = (OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *) o;
    
#line 67
    return [((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(treeDigest_)) equalsWithOrgBouncycastleAsn1ASN1Primitive:((OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *) nil_chk(otherKey))->treeDigest_] && OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_([((OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *) nil_chk(params_)) getKeyData], [((OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *) nil_chk(otherKey->params_)) getKeyData]);
  }
  
#line 70
  return false;
}


#line 73
- (NSUInteger)hash {
  
#line 76
  return ((jint) [((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(treeDigest_)) hash]) + 37 * OrgBouncycastleUtilArrays_hashCodeWithByteArray_([((OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *) nil_chk(params_)) getKeyData]);
}


#line 82
- (NSString *)getAlgorithm {
  
#line 85
  return @"SPHINCS-256";
}

- (IOSByteArray *)getEncoded {
  
#line 91
  @try {
    
#line 93
    OrgBouncycastleAsn1X509SubjectPublicKeyInfo *pki;
    
#line 95
    if ([((OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *) nil_chk(params_)) getTreeDigest] != nil) {
      
#line 97
      pki = OrgBouncycastlePqcCryptoUtilSubjectPublicKeyInfoFactory_createSubjectPublicKeyInfoWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(params_);
    }
    else {
      
#line 101
      OrgBouncycastleAsn1X509AlgorithmIdentifier *algorithmIdentifier = new_OrgBouncycastleAsn1X509AlgorithmIdentifier_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(OrgBouncycastlePqcAsn1PQCObjectIdentifiers, sphincs256), new_OrgBouncycastlePqcAsn1SPHINCS256KeyParams_initWithOrgBouncycastleAsn1X509AlgorithmIdentifier_(new_OrgBouncycastleAsn1X509AlgorithmIdentifier_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(treeDigest_)));
      pki = new_OrgBouncycastleAsn1X509SubjectPublicKeyInfo_initWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(algorithmIdentifier, [((OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *) nil_chk(params_)) getKeyData]);
    }
    
#line 105
    return [((OrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(pki)) getEncoded];
  }
  @catch (JavaIoIOException *e) {
    
#line 109
    return nil;
  }
}


#line 113
- (NSString *)getFormat {
  
#line 116
  return @"X.509";
}

- (IOSByteArray *)getKeyData {
  
#line 122
  return [((OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *) nil_chk(params_)) getKeyData];
}

- (OrgBouncycastleAsn1ASN1ObjectIdentifier *)getTreeDigest {
  
#line 127
  return treeDigest_;
}


#line 130
- (id<OrgBouncycastleCryptoCipherParameters>)getKeyParams {
  
#line 132
  return params_;
}


#line 135
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_readObjectWithJavaIoObjectInputStream_(self, inArg);
}


#line 146
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoCipherParameters;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, 9, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleAsn1ASN1ObjectIdentifier:withOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters:);
  methods[1].selector = @selector(initWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  methods[2].selector = @selector(init__WithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(getAlgorithm);
  methods[6].selector = @selector(getEncoded);
  methods[7].selector = @selector(getFormat);
  methods[8].selector = @selector(getKeyData);
  methods[9].selector = @selector(getTreeDigest);
  methods[10].selector = @selector(getKeyParams);
  methods[11].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[12].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "treeDigest_", "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "params_", "LOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleAsn1ASN1ObjectIdentifier;LOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters;", "LOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", "LJavaIoIOException;", "init", "equals", "LNSObject;", "hashCode", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey = { "BCSphincs256PublicKey", "org.bouncycastle.pqc.jcajce.provider.sphincs", ptrTable, methods, fields, 7, 0x1, 13, 3, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey;
}

@end


#line 28
void OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters_(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *self, OrgBouncycastleAsn1ASN1ObjectIdentifier *treeDigest, OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *params) {
  NSObject_init(self);
  
#line 32
  self->treeDigest_ = treeDigest;
  self->params_ = params;
}


#line 28
OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *new_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters_(OrgBouncycastleAsn1ASN1ObjectIdentifier *treeDigest, OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *params) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey, initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters_, treeDigest, params)
}


#line 28
OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *create_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters_(OrgBouncycastleAsn1ASN1ObjectIdentifier *treeDigest, OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *params) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey, initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters_, treeDigest, params)
}


#line 36
void OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_initWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *self, OrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo) {
  NSObject_init(self);
  
#line 39
  OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_init__WithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, keyInfo);
}


#line 36
OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *new_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_initWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo) {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey, initWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_, keyInfo)
}


#line 36
OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *create_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_initWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo) {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey, initWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_, keyInfo)
}


#line 42
void OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_init__WithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *self, OrgBouncycastleAsn1X509SubjectPublicKeyInfo *keyInfo) {
  
#line 45
  self->treeDigest_ = [((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgBouncycastlePqcAsn1SPHINCS256KeyParams *) nil_chk(OrgBouncycastlePqcAsn1SPHINCS256KeyParams_getInstanceWithId_([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) getAlgorithm])) getParameters]))) getTreeDigest])) getAlgorithm];
  self->params_ = (OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *) cast_chk(OrgBouncycastlePqcCryptoUtilPublicKeyFactory_createKeyWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(keyInfo), [OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters class]);
}


#line 135
void OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_readObjectWithJavaIoObjectInputStream_(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *self, JavaIoObjectInputStream *inArg) {
  
#line 139
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  
#line 141
  IOSByteArray *enc = (IOSByteArray *) cast_chk([inArg readObject], [IOSByteArray class]);
  
#line 143
  OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_init__WithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, OrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(enc));
}


#line 146
void OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_writeObjectWithJavaIoObjectOutputStream_(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey *self, JavaIoObjectOutputStream *outArg) {
  
#line 150
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  
#line 152
  [outArg writeObjectWithId:[self getEncoded]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey)
