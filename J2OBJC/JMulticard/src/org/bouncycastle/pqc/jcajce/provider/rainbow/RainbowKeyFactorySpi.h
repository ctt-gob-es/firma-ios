//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/rainbow/RainbowKeyFactorySpi.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi")
#ifdef RESTRICT_OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi
#define INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi 1
#endif
#undef RESTRICT_OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi

#if !defined (OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi_) && (INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi || defined(INCLUDE_OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi))
#define OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi_

#define RESTRICT_JavaSecurityKeyFactorySpi 1
#define INCLUDE_JavaSecurityKeyFactorySpi 1
#include "java/security/KeyFactorySpi.h"

#define RESTRICT_OrgBouncycastleJcajceProviderUtilAsymmetricKeyInfoConverter 1
#define INCLUDE_OrgBouncycastleJcajceProviderUtilAsymmetricKeyInfoConverter 1
#include "org/bouncycastle/jcajce/provider/util/AsymmetricKeyInfoConverter.h"

@class IOSClass;
@class OrgBouncycastleAsn1PkcsPrivateKeyInfo;
@class OrgBouncycastleAsn1X509SubjectPublicKeyInfo;
@protocol JavaSecurityKey;
@protocol JavaSecurityPrivateKey;
@protocol JavaSecurityPublicKey;
@protocol JavaSecuritySpecKeySpec;

/*!
 @brief This class transforms Rainbow keys and Rainbow key specifications.
 - seealso: BCRainbowPublicKey
 - seealso: RainbowPublicKeySpec
 - seealso: BCRainbowPrivateKey
 - seealso: RainbowPrivateKeySpec
 */
@interface OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi : JavaSecurityKeyFactorySpi < OrgBouncycastleJcajceProviderUtilAsymmetricKeyInfoConverter >

#pragma mark Public

- (instancetype)init;

/*!
 @brief Converts, if possible, a key specification into a 
 <code>BCRainbowPrivateKey</code>.Currently, the following key specifications
  are supported: <code>RainbowPrivateKeySpec</code>, <code>PKCS8EncodedKeySpec</code>.
 <p>
  The ASN.1 definition of the key structure is 
 </p>
  @code

    RainbowPrivateKey ::= SEQUENCE {
      oid        OBJECT IDENTIFIER         -- OID identifying the algorithm
      A1inv      SEQUENCE OF OCTET STRING  -- inversed matrix of L1
      b1         OCTET STRING              -- translation vector of L1
      A2inv      SEQUENCE OF OCTET STRING  -- inversed matrix of L2
      b2         OCTET STRING              -- translation vector of L2
      vi         OCTET STRING              -- num of elmts in each Set S
      layers     SEQUENCE OF Layer         -- layers of F
    }
    Layer             ::= SEQUENCE OF Poly
    Poly              ::= SEQUENCE {
      alpha      SEQUENCE OF OCTET STRING
      beta       SEQUENCE OF OCTET STRING
      gamma      OCTET STRING
      eta        OCTET
    } 
  
@endcode
 @param keySpec the key specification
 @return the Rainbow private key
 @throw InvalidKeySpecExceptionif the KeySpec is not supported.
 */
- (id<JavaSecurityPrivateKey>)engineGeneratePrivateWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec;

/*!
 @brief Converts, if possible, a key specification into a 
 <code>BCRainbowPublicKey</code>.Currently, the following key specifications are
  supported:<code>X509EncodedKeySpec</code>.
 <p>
  The ASN.1 definition of a public key's structure is 
 </p>@code

     RainbowPublicKey ::= SEQUENCE {
       oid            OBJECT IDENTIFIER        -- OID identifying the algorithm
       docLength      Integer                  -- length of signable msg
       coeffquadratic SEQUENCE OF OCTET STRING -- quadratic (mixed) coefficients
       coeffsingular  SEQUENCE OF OCTET STRING -- singular coefficients
       coeffscalar       OCTET STRING             -- scalar coefficients
        } 
  
@endcode
 @param keySpec the key specification
 @return the Rainbow public key
 @throw InvalidKeySpecExceptionif the KeySpec is not supported.
 */
- (id<JavaSecurityPublicKey>)engineGeneratePublicWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec;

/*!
 @brief Converts a given key into a key specification, if possible.Currently the
  following specs are supported: 
 <ul>
  <li>for RainbowPublicKey: X509EncodedKeySpec, RainbowPublicKeySpec</li>
  <li>for RainbowPrivateKey: PKCS8EncodedKeySpec, RainbowPrivateKeySpec</li>
  </ul>
 @param key the key
 @param keySpec the key specification
 @return the specification of the CMSS key
 @throw InvalidKeySpecExceptionif the key type or key specification is not supported.
 */
- (id<JavaSecuritySpecKeySpec>)engineGetKeySpecWithJavaSecurityKey:(id<JavaSecurityKey>)key
                                                      withIOSClass:(IOSClass *)keySpec;

/*!
 @brief Translates a key into a form known by the FlexiProvider.Currently the
  following key types are supported: RainbowPrivateKey, RainbowPublicKey.
 @param key the key
 @return a key of a known key type
 @throw InvalidKeyExceptionif the key is not supported.
 */
- (id<JavaSecurityKey>)engineTranslateKeyWithJavaSecurityKey:(id<JavaSecurityKey>)key;

- (id<JavaSecurityPrivateKey>)generatePrivateWithOrgBouncycastleAsn1PkcsPrivateKeyInfo:(OrgBouncycastleAsn1PkcsPrivateKeyInfo *)keyInfo;

- (id<JavaSecurityPublicKey>)generatePublicWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)keyInfo;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi)

FOUNDATION_EXPORT void OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi_init(OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi *self);

FOUNDATION_EXPORT OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi *new_OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi *create_OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyFactorySpi")
