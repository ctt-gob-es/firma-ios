//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/sphincs/BCSphincs256PrivateKey.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey")
#ifdef RESTRICT_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey
#define INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey 1
#endif
#undef RESTRICT_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey

#if !defined (OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey_) && (INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey || defined(INCLUDE_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey))
#define OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey_

#define RESTRICT_JavaSecurityPrivateKey 1
#define INCLUDE_JavaSecurityPrivateKey 1
#include "java/security/PrivateKey.h"

#define RESTRICT_OrgBouncycastlePqcJcajceInterfacesSPHINCSKey 1
#define INCLUDE_OrgBouncycastlePqcJcajceInterfacesSPHINCSKey 1
#include "org/bouncycastle/pqc/jcajce/interfaces/SPHINCSKey.h"

@class IOSByteArray;
@class OrgBouncycastleAsn1ASN1ObjectIdentifier;
@class OrgBouncycastleAsn1PkcsPrivateKeyInfo;
@class OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters;
@protocol OrgBouncycastleCryptoCipherParameters;

@interface OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey : NSObject < JavaSecurityPrivateKey, OrgBouncycastlePqcJcajceInterfacesSPHINCSKey >

#pragma mark Public

- (instancetype)initWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)treeDigest
 withOrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters:(OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters *)params;

- (instancetype)initWithOrgBouncycastleAsn1PkcsPrivateKeyInfo:(OrgBouncycastleAsn1PkcsPrivateKeyInfo *)keyInfo;

/*!
 @brief Compare this SPHINCS-256 private key with another object.
 @param o the other object
 @return the result of the comparison
 */
- (jboolean)isEqual:(id)o;

/*!
 @return name of the algorithm - "SPHINCS-256"
 */
- (NSString *)getAlgorithm;

- (IOSByteArray *)getEncoded;

- (NSString *)getFormat;

- (IOSByteArray *)getKeyData;

- (NSUInteger)hash;

#pragma mark Package-Private

- (id<OrgBouncycastleCryptoCipherParameters>)getKeyParams;

- (OrgBouncycastleAsn1ASN1ObjectIdentifier *)getTreeDigest;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey)

FOUNDATION_EXPORT void OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters_(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey *self, OrgBouncycastleAsn1ASN1ObjectIdentifier *treeDigest, OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters *params);

FOUNDATION_EXPORT OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey *new_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters_(OrgBouncycastleAsn1ASN1ObjectIdentifier *treeDigest, OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters *params) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey *create_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters_(OrgBouncycastleAsn1ASN1ObjectIdentifier *treeDigest, OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters *params);

FOUNDATION_EXPORT void OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey_initWithOrgBouncycastleAsn1PkcsPrivateKeyInfo_(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey *self, OrgBouncycastleAsn1PkcsPrivateKeyInfo *keyInfo);

FOUNDATION_EXPORT OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey *new_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey_initWithOrgBouncycastleAsn1PkcsPrivateKeyInfo_(OrgBouncycastleAsn1PkcsPrivateKeyInfo *keyInfo) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey *create_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey_initWithOrgBouncycastleAsn1PkcsPrivateKeyInfo_(OrgBouncycastleAsn1PkcsPrivateKeyInfo *keyInfo);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey")
