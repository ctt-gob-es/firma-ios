//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/rainbow/BCRainbowPrivateKey.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey")
#ifdef RESTRICT_OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey
#define INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey 1
#endif
#undef RESTRICT_OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey

#if !defined (OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey_) && (INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey || defined(INCLUDE_OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey))
#define OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey_

#define RESTRICT_JavaSecurityPrivateKey 1
#define INCLUDE_JavaSecurityPrivateKey 1
#include "java/security/PrivateKey.h"

@class IOSByteArray;
@class IOSIntArray;
@class IOSObjectArray;
@class IOSShortArray;
@class OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters;
@class OrgBouncycastlePqcJcajceSpecRainbowPrivateKeySpec;

/*!
 @brief The Private key in Rainbow consists of the linear affine maps L1, L2 and the
  map F, consisting of quadratic polynomials.In this implementation, we
  denote: L1 = A1*x + b1 L2 = A2*x + b2 
 <p>
  The coefficients of the polynomials in F are stored in 3-dimensional arrays
  per layer.
 The indices of these arrays denote the polynomial, and the
  variables. 
 </p><p>
  More detailed information about the private key is to be found in the paper
  of Jintai Ding, Dieter Schmidt: Rainbow, a New Multivariable Polynomial
  Signature Scheme. ACNS 2005: 164-175 (https://dx.doi.org/10.1007/11496137_12) 
 </p>
 */
@interface OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey : NSObject < JavaSecurityPrivateKey >

#pragma mark Public

- (instancetype)initWithOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters:(OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *)params;

/*!
 @brief Constructor (used by the <code>RainbowKeyFactorySpi</code>).
 @param keySpec a <code>RainbowPrivateKeySpec</code>
 */
- (instancetype)initWithOrgBouncycastlePqcJcajceSpecRainbowPrivateKeySpec:(OrgBouncycastlePqcJcajceSpecRainbowPrivateKeySpec *)keySpec;

/*!
 @brief Constructor.
 @param A1inv
 @param b1
 @param A2inv
 @param b2
 @param layers
 */
- (instancetype)initWithShortArray2:(IOSObjectArray *)A1inv
                     withShortArray:(IOSShortArray *)b1
                    withShortArray2:(IOSObjectArray *)A2inv
                     withShortArray:(IOSShortArray *)b2
                       withIntArray:(IOSIntArray *)vi
withOrgBouncycastlePqcCryptoRainbowLayerArray:(IOSObjectArray *)layers;

/*!
 @brief Compare this Rainbow private key with another object.
 @param other the other object
 @return the result of the comparison
 */
- (jboolean)isEqual:(id)other;

/*!
 @return name of the algorithm - "Rainbow"
 */
- (NSString *)getAlgorithm;

/*!
 @brief Getter for the translation part of the private quadratic map L1.
 @return b1 the translation part of L1
 */
- (IOSShortArray *)getB1;

/*!
 @brief Getter for the translation part of the private quadratic map L2.
 @return b2 the translation part of L2
 */
- (IOSShortArray *)getB2;

- (IOSByteArray *)getEncoded;

- (NSString *)getFormat;

/*!
 @brief Getter for the inverse matrix of A1.
 @return the A1inv inverse
 */
- (IOSObjectArray *)getInvA1;

/*!
 @brief Getter for the inverse matrix of A2
 @return the A2inv
 */
- (IOSObjectArray *)getInvA2;

/*!
 @brief Returns the layers contained in the private key
 @return layers
 */
- (IOSObjectArray *)getLayers;

/*!
 @brief Returns the array of vi-s
 @return the vi
 */
- (IOSIntArray *)getVi;

- (NSUInteger)hash;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey)

FOUNDATION_EXPORT void OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey_initWithShortArray2_withShortArray_withShortArray2_withShortArray_withIntArray_withOrgBouncycastlePqcCryptoRainbowLayerArray_(OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey *self, IOSObjectArray *A1inv, IOSShortArray *b1, IOSObjectArray *A2inv, IOSShortArray *b2, IOSIntArray *vi, IOSObjectArray *layers);

FOUNDATION_EXPORT OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey *new_OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey_initWithShortArray2_withShortArray_withShortArray2_withShortArray_withIntArray_withOrgBouncycastlePqcCryptoRainbowLayerArray_(IOSObjectArray *A1inv, IOSShortArray *b1, IOSObjectArray *A2inv, IOSShortArray *b2, IOSIntArray *vi, IOSObjectArray *layers) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey *create_OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey_initWithShortArray2_withShortArray_withShortArray2_withShortArray_withIntArray_withOrgBouncycastlePqcCryptoRainbowLayerArray_(IOSObjectArray *A1inv, IOSShortArray *b1, IOSObjectArray *A2inv, IOSShortArray *b2, IOSIntArray *vi, IOSObjectArray *layers);

FOUNDATION_EXPORT void OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey_initWithOrgBouncycastlePqcJcajceSpecRainbowPrivateKeySpec_(OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey *self, OrgBouncycastlePqcJcajceSpecRainbowPrivateKeySpec *keySpec);

FOUNDATION_EXPORT OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey *new_OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey_initWithOrgBouncycastlePqcJcajceSpecRainbowPrivateKeySpec_(OrgBouncycastlePqcJcajceSpecRainbowPrivateKeySpec *keySpec) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey *create_OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey_initWithOrgBouncycastlePqcJcajceSpecRainbowPrivateKeySpec_(OrgBouncycastlePqcJcajceSpecRainbowPrivateKeySpec *keySpec);

FOUNDATION_EXPORT void OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey_initWithOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters_(OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey *self, OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *params);

FOUNDATION_EXPORT OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey *new_OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey_initWithOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters_(OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *params) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey *create_OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey_initWithOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters_(OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *params);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey")
