//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/mceliece/McElieceCCA2KeyFactorySpi.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Key.h"
#include "java/security/KeyFactorySpi.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/spec/InvalidKeySpecException.h"
#include "java/security/spec/KeySpec.h"
#include "java/security/spec/PKCS8EncodedKeySpec.h"
#include "java/security/spec/X509EncodedKeySpec.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/pkcs/PrivateKeyInfo.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/bouncycastle/crypto/Digest.h"
#include "org/bouncycastle/pqc/asn1/McElieceCCA2PrivateKey.h"
#include "org/bouncycastle/pqc/asn1/McElieceCCA2PublicKey.h"
#include "org/bouncycastle/pqc/asn1/PQCObjectIdentifiers.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2PrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/mceliece/McElieceCCA2PublicKeyParameters.h"
#include "org/bouncycastle/pqc/jcajce/provider/mceliece/BCMcElieceCCA2PrivateKey.h"
#include "org/bouncycastle/pqc/jcajce/provider/mceliece/BCMcElieceCCA2PublicKey.h"
#include "org/bouncycastle/pqc/jcajce/provider/mceliece/McElieceCCA2KeyFactorySpi.h"
#include "org/bouncycastle/pqc/jcajce/provider/mceliece/Utils.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2Matrix.h"
#include "org/bouncycastle/pqc/math/linearalgebra/GF2mField.h"
#include "org/bouncycastle/pqc/math/linearalgebra/Permutation.h"
#include "org/bouncycastle/pqc/math/linearalgebra/PolynomialGF2mSmallM.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/jcajce/provider/mceliece/McElieceCCA2KeyFactorySpi must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/mceliece/McElieceCCA2KeyFactorySpi.java"

NSString *OrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeyFactorySpi_OID = @"1.3.6.1.4.1.8301.3.1.3.4.2";


#line 31
@implementation OrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeyFactorySpi

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 31
- (instancetype)init {
  OrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeyFactorySpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 51
- (id<JavaSecurityPublicKey>)engineGeneratePublicWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  
#line 55
  if ([keySpec isKindOfClass:[JavaSecuritySpecX509EncodedKeySpec class]]) {
    
#line 58
    IOSByteArray *encKey = [((JavaSecuritySpecX509EncodedKeySpec *) nil_chk(((JavaSecuritySpecX509EncodedKeySpec *) keySpec))) getEncoded];
    
#line 61
    OrgBouncycastleAsn1X509SubjectPublicKeyInfo *pki;
    @try {
      
#line 64
      pki = OrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(encKey));
    }
    @catch (JavaIoIOException *e) {
      
#line 68
      @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_([e description]);
    }
    
#line 72
    @try {
      
#line 74
      if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgBouncycastlePqcAsn1PQCObjectIdentifiers, mcElieceCca2))) equalsWithOrgBouncycastleAsn1ASN1Primitive:[((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(pki)) getAlgorithm])) getAlgorithm]]) {
        
#line 76
        OrgBouncycastlePqcAsn1McElieceCCA2PublicKey *key = OrgBouncycastlePqcAsn1McElieceCCA2PublicKey_getInstanceWithId_([pki parsePublicKey]);
        
#line 78
        return new_OrgBouncycastlePqcJcajceProviderMcelieceBCMcElieceCCA2PublicKey_initWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(new_OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_initWithInt_withInt_withOrgBouncycastlePqcMathLinearalgebraGF2Matrix_withNSString_([((OrgBouncycastlePqcAsn1McElieceCCA2PublicKey *) nil_chk(key)) getN], [key getT], [key getG], [((id<OrgBouncycastleCryptoDigest>) nil_chk(OrgBouncycastlePqcJcajceProviderMcelieceUtils_getDigestWithOrgBouncycastleAsn1X509AlgorithmIdentifier_([key getDigest]))) getAlgorithmName]));
      }
      else {
        
#line 82
        @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(@"Unable to recognise OID in McEliece private key");
      }
    }
    @catch (JavaIoIOException *cce) {
      
#line 87
      @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(JreStrcat("$$", @"Unable to decode X509EncodedKeySpec: ",
#line 89
      [cce getMessage]));
    }
  }
  
#line 93
  @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(JreStrcat("$@C", @"Unsupported key specification: ",
#line 94
  [((id<JavaSecuritySpecKeySpec>) nil_chk(keySpec)) java_getClass], '.'));
}


#line 107
- (id<JavaSecurityPrivateKey>)engineGeneratePrivateWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  
#line 111
  if ([keySpec isKindOfClass:[JavaSecuritySpecPKCS8EncodedKeySpec class]]) {
    
#line 114
    IOSByteArray *encKey = [((JavaSecuritySpecPKCS8EncodedKeySpec *) nil_chk(((JavaSecuritySpecPKCS8EncodedKeySpec *) keySpec))) getEncoded];
    
#line 117
    OrgBouncycastleAsn1PkcsPrivateKeyInfo *pki;
    
#line 119
    @try {
      
#line 121
      pki = OrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_(OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(encKey));
    }
    @catch (JavaIoIOException *e) {
      
#line 125
      @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(JreStrcat("$@", @"Unable to decode PKCS8EncodedKeySpec: ", e));
    }
    
#line 128
    @try {
      
#line 130
      if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgBouncycastlePqcAsn1PQCObjectIdentifiers, mcElieceCca2))) equalsWithOrgBouncycastleAsn1ASN1Primitive:[((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(pki)) getPrivateKeyAlgorithm])) getAlgorithm]]) {
        
#line 132
        OrgBouncycastlePqcAsn1McElieceCCA2PrivateKey *key = OrgBouncycastlePqcAsn1McElieceCCA2PrivateKey_getInstanceWithId_([pki parsePrivateKey]);
        
#line 134
        return new_OrgBouncycastlePqcJcajceProviderMcelieceBCMcElieceCCA2PrivateKey_initWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(new_OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_initWithInt_withInt_withOrgBouncycastlePqcMathLinearalgebraGF2mField_withOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_withOrgBouncycastlePqcMathLinearalgebraPermutation_withNSString_([((OrgBouncycastlePqcAsn1McElieceCCA2PrivateKey *) nil_chk(key)) getN], [key getK], [key getField], [key getGoppaPoly], [key getP], [((id<OrgBouncycastleCryptoDigest>) nil_chk(OrgBouncycastlePqcJcajceProviderMcelieceUtils_getDigestWithOrgBouncycastleAsn1X509AlgorithmIdentifier_([key getDigest]))) getAlgorithmName]));
      }
      else {
        
#line 138
        @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(@"Unable to recognise OID in McEliece public key");
      }
    }
    @catch (JavaIoIOException *cce) {
      
#line 143
      @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(
#line 144
      @"Unable to decode PKCS8EncodedKeySpec.");
    }
  }
  
#line 148
  @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(JreStrcat("$@C", @"Unsupported key specification: ", [((id<JavaSecuritySpecKeySpec>) nil_chk(keySpec)) java_getClass], '.'));
}


#line 163
- (id<JavaSecuritySpecKeySpec>)getKeySpecWithJavaSecurityKey:(id<JavaSecurityKey>)key
                                                withIOSClass:(IOSClass *)keySpec {
  
#line 166
  if ([key isKindOfClass:[OrgBouncycastlePqcJcajceProviderMcelieceBCMcElieceCCA2PrivateKey class]]) {
    
#line 168
    if ([JavaSecuritySpecPKCS8EncodedKeySpec_class_() isAssignableFrom:keySpec]) {
      
#line 170
      return new_JavaSecuritySpecPKCS8EncodedKeySpec_initWithByteArray_([((id<JavaSecurityKey>) nil_chk(key)) getEncoded]);
    }
  }
  else if ([key isKindOfClass:[OrgBouncycastlePqcJcajceProviderMcelieceBCMcElieceCCA2PublicKey class]]) {
    
#line 175
    if ([JavaSecuritySpecX509EncodedKeySpec_class_() isAssignableFrom:keySpec]) {
      
#line 177
      return new_JavaSecuritySpecX509EncodedKeySpec_initWithByteArray_([((id<JavaSecurityKey>) nil_chk(key)) getEncoded]);
    }
  }
  else {
    
#line 182
    @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(JreStrcat("$@C", @"Unsupported key type: ",
#line 183
    [((id<JavaSecurityKey>) nil_chk(key)) java_getClass], '.'));
  }
  
#line 186
  @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(JreStrcat("$@C", @"Unknown key specification: ",
#line 187
  keySpec, '.'));
}

- (id<JavaSecurityKey>)translateKeyWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  
#line 202
  if (([key isKindOfClass:[OrgBouncycastlePqcJcajceProviderMcelieceBCMcElieceCCA2PrivateKey class]]) ||
#line 203
  ([key isKindOfClass:[OrgBouncycastlePqcJcajceProviderMcelieceBCMcElieceCCA2PublicKey class]])) {
    
#line 205
    return key;
  }
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"Unsupported key type.");
}


#line 211
- (id<JavaSecurityPublicKey>)generatePublicWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)pki {
  
#line 216
  OrgBouncycastleAsn1ASN1Primitive *innerType = [((OrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(pki)) parsePublicKey];
  OrgBouncycastlePqcAsn1McElieceCCA2PublicKey *key = OrgBouncycastlePqcAsn1McElieceCCA2PublicKey_getInstanceWithId_(innerType);
  return new_OrgBouncycastlePqcJcajceProviderMcelieceBCMcElieceCCA2PublicKey_initWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(new_OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_initWithInt_withInt_withOrgBouncycastlePqcMathLinearalgebraGF2Matrix_withNSString_([((OrgBouncycastlePqcAsn1McElieceCCA2PublicKey *) nil_chk(key)) getN], [key getT], [key getG], [((id<OrgBouncycastleCryptoDigest>) nil_chk(OrgBouncycastlePqcJcajceProviderMcelieceUtils_getDigestWithOrgBouncycastleAsn1X509AlgorithmIdentifier_([key getDigest]))) getAlgorithmName]));
}


#line 221
- (id<JavaSecurityPrivateKey>)generatePrivateWithOrgBouncycastleAsn1PkcsPrivateKeyInfo:(OrgBouncycastleAsn1PkcsPrivateKeyInfo *)pki {
  
#line 226
  OrgBouncycastleAsn1ASN1Primitive *innerType = [((id<OrgBouncycastleAsn1ASN1Encodable>) nil_chk([((OrgBouncycastleAsn1PkcsPrivateKeyInfo *) nil_chk(pki)) parsePrivateKey])) toASN1Primitive];
  OrgBouncycastlePqcAsn1McElieceCCA2PrivateKey *key = OrgBouncycastlePqcAsn1McElieceCCA2PrivateKey_getInstanceWithId_(innerType);
  return new_OrgBouncycastlePqcJcajceProviderMcelieceBCMcElieceCCA2PrivateKey_initWithOrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(new_OrgBouncycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_initWithInt_withInt_withOrgBouncycastlePqcMathLinearalgebraGF2mField_withOrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM_withOrgBouncycastlePqcMathLinearalgebraPermutation_withNSString_([((OrgBouncycastlePqcAsn1McElieceCCA2PrivateKey *) nil_chk(key)) getN], [key getK], [key getField], [key getGoppaPoly], [key getP], nil));
}


#line 231
- (id<JavaSecuritySpecKeySpec>)engineGetKeySpecWithJavaSecurityKey:(id<JavaSecurityKey>)key
                                                      withIOSClass:(IOSClass *)tClass {
  
#line 236
  return nil;
}


#line 239
- (id<JavaSecurityKey>)engineTranslateKeyWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  
#line 244
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x4, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x4, 3, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecKeySpec;", 0x1, 4, 5, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x1, 9, 10, 11, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x1, 12, 13, 11, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecKeySpec;", 0x4, 14, 5, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x4, 15, 7, 8, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineGeneratePublicWithJavaSecuritySpecKeySpec:);
  methods[2].selector = @selector(engineGeneratePrivateWithJavaSecuritySpecKeySpec:);
  methods[3].selector = @selector(getKeySpecWithJavaSecurityKey:withIOSClass:);
  methods[4].selector = @selector(translateKeyWithJavaSecurityKey:);
  methods[5].selector = @selector(generatePublicWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  methods[6].selector = @selector(generatePrivateWithOrgBouncycastleAsn1PkcsPrivateKeyInfo:);
  methods[7].selector = @selector(engineGetKeySpecWithJavaSecurityKey:withIOSClass:);
  methods[8].selector = @selector(engineTranslateKeyWithJavaSecurityKey:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
  };
  static const void *ptrTable[] = { "engineGeneratePublic", "LJavaSecuritySpecKeySpec;", "LJavaSecuritySpecInvalidKeySpecException;", "engineGeneratePrivate", "getKeySpec", "LJavaSecurityKey;LIOSClass;", "translateKey", "LJavaSecurityKey;", "LJavaSecurityInvalidKeyException;", "generatePublic", "LOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", "LJavaIoIOException;", "generatePrivate", "LOrgBouncycastleAsn1PkcsPrivateKeyInfo;", "engineGetKeySpec", "engineTranslateKey", &OrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeyFactorySpi_OID };
  static const J2ObjcClassInfo _OrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeyFactorySpi = { "McElieceCCA2KeyFactorySpi", "org.bouncycastle.pqc.jcajce.provider.mceliece", ptrTable, methods, fields, 7, 0x1, 9, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeyFactorySpi;
}

@end


#line 31
void OrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeyFactorySpi_init(OrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeyFactorySpi *self) {
  JavaSecurityKeyFactorySpi_init(self);
}


#line 31
OrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeyFactorySpi *new_OrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeyFactorySpi_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeyFactorySpi, init)
}


#line 31
OrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeyFactorySpi *create_OrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeyFactorySpi_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeyFactorySpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcJcajceProviderMcelieceMcElieceCCA2KeyFactorySpi)
