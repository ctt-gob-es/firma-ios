//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/mceliece/Utils.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/nist/NISTObjectIdentifiers.h"
#include "org/bouncycastle/asn1/oiw/OIWObjectIdentifiers.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/crypto/Digest.h"
#include "org/bouncycastle/crypto/util/DigestFactory.h"
#include "org/bouncycastle/pqc/jcajce/provider/mceliece/Utils.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/jcajce/provider/mceliece/Utils must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/mceliece/Utils.java"


#line 9
@implementation OrgBouncycastlePqcJcajceProviderMcelieceUtils


#line 9
- (instancetype)initPackagePrivate {
  OrgBouncycastlePqcJcajceProviderMcelieceUtils_initPackagePrivate(self);
  return self;
}


#line 11
+ (id<OrgBouncycastleCryptoDigest>)getDigestWithOrgBouncycastleAsn1X509AlgorithmIdentifier:(OrgBouncycastleAsn1X509AlgorithmIdentifier *)digest {
  return OrgBouncycastlePqcJcajceProviderMcelieceUtils_getDigestWithOrgBouncycastleAsn1X509AlgorithmIdentifier_(digest);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoDigest;", 0x8, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(getDigestWithOrgBouncycastleAsn1X509AlgorithmIdentifier:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getDigest", "LOrgBouncycastleAsn1X509AlgorithmIdentifier;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcJcajceProviderMcelieceUtils = { "Utils", "org.bouncycastle.pqc.jcajce.provider.mceliece", ptrTable, methods, NULL, 7, 0x0, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcJcajceProviderMcelieceUtils;
}

@end


#line 9
void OrgBouncycastlePqcJcajceProviderMcelieceUtils_initPackagePrivate(OrgBouncycastlePqcJcajceProviderMcelieceUtils *self) {
  NSObject_init(self);
}


#line 9
OrgBouncycastlePqcJcajceProviderMcelieceUtils *new_OrgBouncycastlePqcJcajceProviderMcelieceUtils_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcJcajceProviderMcelieceUtils, initPackagePrivate)
}


#line 9
OrgBouncycastlePqcJcajceProviderMcelieceUtils *create_OrgBouncycastlePqcJcajceProviderMcelieceUtils_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcJcajceProviderMcelieceUtils, initPackagePrivate)
}


#line 11
id<OrgBouncycastleCryptoDigest> OrgBouncycastlePqcJcajceProviderMcelieceUtils_getDigestWithOrgBouncycastleAsn1X509AlgorithmIdentifier_(OrgBouncycastleAsn1X509AlgorithmIdentifier *digest) {
  OrgBouncycastlePqcJcajceProviderMcelieceUtils_initialize();
  if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(digest)) getAlgorithm])) equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1OiwOIWObjectIdentifiers, idSHA1)]) {
    
#line 15
    return OrgBouncycastleCryptoUtilDigestFactory_createSHA1();
  }
  if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([digest getAlgorithm])) equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha224)]) {
    
#line 19
    return OrgBouncycastleCryptoUtilDigestFactory_createSHA224();
  }
  if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([digest getAlgorithm])) equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha256)]) {
    
#line 23
    return OrgBouncycastleCryptoUtilDigestFactory_createSHA256();
  }
  if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([digest getAlgorithm])) equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha384)]) {
    
#line 27
    return OrgBouncycastleCryptoUtilDigestFactory_createSHA384();
  }
  if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([digest getAlgorithm])) equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha512)]) {
    
#line 31
    return OrgBouncycastleCryptoUtilDigestFactory_createSHA512();
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"unrecognised OID in digest algorithm identifier: ", [digest getAlgorithm]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcJcajceProviderMcelieceUtils)
