//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/xmss/DigestUtil.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/nist/NISTObjectIdentifiers.h"
#include "org/bouncycastle/crypto/Digest.h"
#include "org/bouncycastle/crypto/Xof.h"
#include "org/bouncycastle/crypto/digests/SHA256Digest.h"
#include "org/bouncycastle/crypto/digests/SHA512Digest.h"
#include "org/bouncycastle/crypto/digests/SHAKEDigest.h"
#include "org/bouncycastle/pqc/jcajce/provider/xmss/DigestUtil.h"
#include "org/bouncycastle/pqc/jcajce/spec/XMSSParameterSpec.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/jcajce/provider/xmss/DigestUtil must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/xmss/DigestUtil.java"


#line 12
@implementation OrgBouncycastlePqcJcajceProviderXmssDigestUtil


#line 12
- (instancetype)initPackagePrivate {
  OrgBouncycastlePqcJcajceProviderXmssDigestUtil_initPackagePrivate(self);
  return self;
}


#line 14
+ (id<OrgBouncycastleCryptoDigest>)getDigestWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)oid {
  return OrgBouncycastlePqcJcajceProviderXmssDigestUtil_getDigestWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
}


#line 36
+ (OrgBouncycastleAsn1ASN1ObjectIdentifier *)getDigestOIDWithNSString:(NSString *)digest {
  return OrgBouncycastlePqcJcajceProviderXmssDigestUtil_getDigestOIDWithNSString_(digest);
}


#line 58
+ (IOSByteArray *)getDigestResultWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)digest {
  return OrgBouncycastlePqcJcajceProviderXmssDigestUtil_getDigestResultWithOrgBouncycastleCryptoDigest_(digest);
}


#line 74
+ (jint)getDigestSizeWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)digest {
  return OrgBouncycastlePqcJcajceProviderXmssDigestUtil_getDigestSizeWithOrgBouncycastleCryptoDigest_(digest);
}


#line 84
+ (NSString *)getXMSSDigestNameWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)treeDigest {
  return OrgBouncycastlePqcJcajceProviderXmssDigestUtil_getXMSSDigestNameWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(treeDigest);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoDigest;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 6, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(getDigestWithOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[2].selector = @selector(getDigestOIDWithNSString:);
  methods[3].selector = @selector(getDigestResultWithOrgBouncycastleCryptoDigest:);
  methods[4].selector = @selector(getDigestSizeWithOrgBouncycastleCryptoDigest:);
  methods[5].selector = @selector(getXMSSDigestNameWithOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getDigest", "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", "getDigestOID", "LNSString;", "getDigestResult", "LOrgBouncycastleCryptoDigest;", "getDigestSize", "getXMSSDigestName" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcJcajceProviderXmssDigestUtil = { "DigestUtil", "org.bouncycastle.pqc.jcajce.provider.xmss", ptrTable, methods, NULL, 7, 0x0, 6, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcJcajceProviderXmssDigestUtil;
}

@end


#line 12
void OrgBouncycastlePqcJcajceProviderXmssDigestUtil_initPackagePrivate(OrgBouncycastlePqcJcajceProviderXmssDigestUtil *self) {
  NSObject_init(self);
}


#line 12
OrgBouncycastlePqcJcajceProviderXmssDigestUtil *new_OrgBouncycastlePqcJcajceProviderXmssDigestUtil_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcJcajceProviderXmssDigestUtil, initPackagePrivate)
}


#line 12
OrgBouncycastlePqcJcajceProviderXmssDigestUtil *create_OrgBouncycastlePqcJcajceProviderXmssDigestUtil_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcJcajceProviderXmssDigestUtil, initPackagePrivate)
}


#line 14
id<OrgBouncycastleCryptoDigest> OrgBouncycastlePqcJcajceProviderXmssDigestUtil_getDigestWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(OrgBouncycastleAsn1ASN1ObjectIdentifier *oid) {
  OrgBouncycastlePqcJcajceProviderXmssDigestUtil_initialize();
  if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha256)]) {
    
#line 18
    return new_OrgBouncycastleCryptoDigestsSHA256Digest_init();
  }
  if ([oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha512)]) {
    
#line 22
    return new_OrgBouncycastleCryptoDigestsSHA512Digest_init();
  }
  if ([oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_shake128)]) {
    
#line 26
    return new_OrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(128);
  }
  if ([oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_shake256)]) {
    
#line 30
    return new_OrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(256);
  }
  
#line 33
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"unrecognized digest OID: ", oid));
}


#line 36
OrgBouncycastleAsn1ASN1ObjectIdentifier *OrgBouncycastlePqcJcajceProviderXmssDigestUtil_getDigestOIDWithNSString_(NSString *digest) {
  OrgBouncycastlePqcJcajceProviderXmssDigestUtil_initialize();
  if ([((NSString *) nil_chk(digest)) isEqual:@"SHA-256"]) {
    
#line 40
    return JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha256);
  }
  if ([digest isEqual:@"SHA-512"]) {
    
#line 44
    return JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha512);
  }
  if ([digest isEqual:@"SHAKE128"]) {
    
#line 48
    return JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_shake128);
  }
  if ([digest isEqual:@"SHAKE256"]) {
    
#line 52
    return JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_shake256);
  }
  
#line 55
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unrecognized digest: ", digest));
}


#line 58
IOSByteArray *OrgBouncycastlePqcJcajceProviderXmssDigestUtil_getDigestResultWithOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> digest) {
  OrgBouncycastlePqcJcajceProviderXmssDigestUtil_initialize();
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:OrgBouncycastlePqcJcajceProviderXmssDigestUtil_getDigestSizeWithOrgBouncycastleCryptoDigest_(digest)];
  
#line 62
  if ([OrgBouncycastleCryptoXof_class_() isInstance:digest]) {
    
#line 64
    [((id<OrgBouncycastleCryptoXof>) nil_chk(((id<OrgBouncycastleCryptoXof>) cast_check(digest, OrgBouncycastleCryptoXof_class_())))) doFinalWithByteArray:hash_ withInt:0 withInt:hash_->size_];
  }
  else {
    
#line 68
    [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest)) doFinalWithByteArray:hash_ withInt:0];
  }
  
#line 71
  return hash_;
}


#line 74
jint OrgBouncycastlePqcJcajceProviderXmssDigestUtil_getDigestSizeWithOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> digest) {
  OrgBouncycastlePqcJcajceProviderXmssDigestUtil_initialize();
  if ([OrgBouncycastleCryptoXof_class_() isInstance:digest]) {
    
#line 78
    return [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest)) getDigestSize] * 2;
  }
  
#line 81
  return [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest)) getDigestSize];
}


#line 84
NSString *OrgBouncycastlePqcJcajceProviderXmssDigestUtil_getXMSSDigestNameWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(OrgBouncycastleAsn1ASN1ObjectIdentifier *treeDigest) {
  OrgBouncycastlePqcJcajceProviderXmssDigestUtil_initialize();
  if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(treeDigest)) equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha256)]) {
    
#line 88
    return OrgBouncycastlePqcJcajceSpecXMSSParameterSpec_SHA256;
  }
  if ([treeDigest equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha512)]) {
    
#line 92
    return OrgBouncycastlePqcJcajceSpecXMSSParameterSpec_SHA512;
  }
  if ([treeDigest equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_shake128)]) {
    
#line 96
    return OrgBouncycastlePqcJcajceSpecXMSSParameterSpec_SHAKE128;
  }
  if ([treeDigest equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_shake256)]) {
    
#line 100
    return OrgBouncycastlePqcJcajceSpecXMSSParameterSpec_SHAKE256;
  }
  
#line 103
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"unrecognized digest OID: ", treeDigest));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcJcajceProviderXmssDigestUtil)
