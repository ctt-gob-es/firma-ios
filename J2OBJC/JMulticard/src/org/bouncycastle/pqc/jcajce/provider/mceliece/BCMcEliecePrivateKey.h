//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/mceliece/BCMcEliecePrivateKey.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey")
#ifdef RESTRICT_OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey
#define INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey 0
#else
#define INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey 1
#endif
#undef RESTRICT_OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey

#if !defined (OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey_) && (INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey || defined(INCLUDE_OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey))
#define OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey_

#define RESTRICT_OrgBouncycastleCryptoCipherParameters 1
#define INCLUDE_OrgBouncycastleCryptoCipherParameters 1
#include "org/bouncycastle/crypto/CipherParameters.h"

#define RESTRICT_JavaSecurityPrivateKey 1
#define INCLUDE_JavaSecurityPrivateKey 1
#include "java/security/PrivateKey.h"

@class IOSByteArray;
@class IOSObjectArray;
@class OrgBouncycastleCryptoParamsAsymmetricKeyParameter;
@class OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters;
@class OrgBouncycastlePqcMathLinearalgebraGF2Matrix;
@class OrgBouncycastlePqcMathLinearalgebraGF2mField;
@class OrgBouncycastlePqcMathLinearalgebraPermutation;
@class OrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM;

/*!
 @brief This class implements a McEliece private key and is usually instantiated by
  the <code>McElieceKeyPairGenerator</code> or <code>McElieceKeyFactorySpi</code>.
 */
@interface OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey : NSObject < OrgBouncycastleCryptoCipherParameters, JavaSecurityPrivateKey >

#pragma mark Public

- (instancetype)initWithOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters:(OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *)params;

/*!
 @brief Compare this key with another object.
 @param other the other object
 @return the result of the comparison
 */
- (jboolean)isEqual:(id)other;

/*!
 @brief Return the name of the algorithm.
 @return "McEliece"
 */
- (NSString *)getAlgorithm;

/*!
 @brief Return the key data to encode in the SubjectPublicKeyInfo structure.
 <p>
  The ASN.1 definition of the key structure is 
 </p>
  @code

    McEliecePrivateKey ::= SEQUENCE {
      n          INTEGER                   -- length of the code
      k          INTEGER                   -- dimension of the code
      fieldPoly  OCTET STRING              -- field polynomial defining GF(2&circ;m)
      getGoppaPoly()  OCTET STRING              -- irreducible Goppa polynomial
      sInv       OCTET STRING              -- matrix S&circ;-1
      p1         OCTET STRING              -- permutation P1
      p2         OCTET STRING              -- permutation P2
      h          OCTET STRING              -- canonical check matrix
      qInv       SEQUENCE OF OCTET STRING  -- matrix used to compute square roots
    } 
  
@endcode
 @return the key data to encode in the SubjectPublicKeyInfo structure
 */
- (IOSByteArray *)getEncoded;

/*!
 @return the finite field
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2mField *)getField;

- (NSString *)getFormat;

/*!
 @return the irreducible Goppa polynomial
 */
- (OrgBouncycastlePqcMathLinearalgebraPolynomialGF2mSmallM *)getGoppaPoly;

/*!
 @return the canonical check matrix
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Matrix *)getH;

/*!
 @return the dimension of the code
 */
- (jint)getK;

/*!
 @return the length of the code
 */
- (jint)getN;

/*!
 @return the permutation used to generate the systematic check matrix
 */
- (OrgBouncycastlePqcMathLinearalgebraPermutation *)getP1;

/*!
 @return the permutation used to compute the public generator matrix
 */
- (OrgBouncycastlePqcMathLinearalgebraPermutation *)getP2;

/*!
 @return the matrix for computing square roots in <tt>(GF(2^m))^t</tt>
 */
- (IOSObjectArray *)getQInv;

/*!
 @return the k x k random binary non-singular matrix S
 */
- (OrgBouncycastlePqcMathLinearalgebraGF2Matrix *)getSInv;

/*!
 @return the hash code of this key
 */
- (NSUInteger)hash;

#pragma mark Package-Private

- (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)getKeyParams;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey)

FOUNDATION_EXPORT void OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey_initWithOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_(OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey *self, OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *params);

FOUNDATION_EXPORT OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey *new_OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey_initWithOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_(OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *params) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey *create_OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey_initWithOrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_(OrgBouncycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *params);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastlePqcJcajceProviderMcelieceBCMcEliecePrivateKey")
