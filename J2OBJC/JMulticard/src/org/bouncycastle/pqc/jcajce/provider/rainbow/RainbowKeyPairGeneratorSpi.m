//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/rainbow/RainbowKeyPairGeneratorSpi.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/bouncycastle/crypto/CryptoServicesRegistrar.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/pqc/crypto/rainbow/RainbowKeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/rainbow/RainbowKeyPairGenerator.h"
#include "org/bouncycastle/pqc/crypto/rainbow/RainbowParameters.h"
#include "org/bouncycastle/pqc/crypto/rainbow/RainbowPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/rainbow/RainbowPublicKeyParameters.h"
#include "org/bouncycastle/pqc/jcajce/provider/rainbow/BCRainbowPrivateKey.h"
#include "org/bouncycastle/pqc/jcajce/provider/rainbow/BCRainbowPublicKey.h"
#include "org/bouncycastle/pqc/jcajce/provider/rainbow/RainbowKeyPairGeneratorSpi.h"
#include "org/bouncycastle/pqc/jcajce/spec/RainbowParameterSpec.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/jcajce/provider/rainbow/RainbowKeyPairGeneratorSpi must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/rainbow/RainbowKeyPairGeneratorSpi.java"


#line 17
@implementation OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyPairGeneratorSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 26
- (instancetype)init {
  OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyPairGeneratorSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 31
- (void)initialize__WithInt:(jint)strength
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  
#line 36
  self->strength_ = strength;
  self->random_ = random;
}


#line 40
- (void)initialize__WithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                                  withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  
#line 46
  if (!([params isKindOfClass:[OrgBouncycastlePqcJcajceSpecRainbowParameterSpec class]])) {
    
#line 48
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"parameter object not a RainbowParameterSpec");
  }
  OrgBouncycastlePqcJcajceSpecRainbowParameterSpec *rainbowParams = (OrgBouncycastlePqcJcajceSpecRainbowParameterSpec *) cast_chk(params, [OrgBouncycastlePqcJcajceSpecRainbowParameterSpec class]);
  
#line 52
  param_ = new_OrgBouncycastlePqcCryptoRainbowRainbowKeyGenerationParameters_initWithJavaSecuritySecureRandom_withOrgBouncycastlePqcCryptoRainbowRainbowParameters_(random, new_OrgBouncycastlePqcCryptoRainbowRainbowParameters_initWithIntArray_([((OrgBouncycastlePqcJcajceSpecRainbowParameterSpec *) nil_chk(rainbowParams)) getVi]));
  
#line 54
  [((OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *) nil_chk(engine_)) init__WithOrgBouncycastleCryptoKeyGenerationParameters:param_];
  initialised_ = true;
}


#line 58
- (JavaSecurityKeyPair *)generateKeyPair {
  
#line 61
  if (!initialised_) {
    
#line 63
    param_ = new_OrgBouncycastlePqcCryptoRainbowRainbowKeyGenerationParameters_initWithJavaSecuritySecureRandom_withOrgBouncycastlePqcCryptoRainbowRainbowParameters_(random_, new_OrgBouncycastlePqcCryptoRainbowRainbowParameters_initWithIntArray_([new_OrgBouncycastlePqcJcajceSpecRainbowParameterSpec_init() getVi]));
    
#line 65
    [((OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *) nil_chk(engine_)) init__WithOrgBouncycastleCryptoKeyGenerationParameters:param_];
    initialised_ = true;
  }
  
#line 69
  OrgBouncycastleCryptoAsymmetricCipherKeyPair *pair = [((OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator *) nil_chk(engine_)) generateKeyPair];
  OrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters *pub = (OrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters *) cast_chk([((OrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(pair)) getPublic], [OrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters class]);
  OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *priv = (OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters *) cast_chk([pair getPrivate], [OrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters class]);
  
#line 73
  return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(new_OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPublicKey_initWithOrgBouncycastlePqcCryptoRainbowRainbowPublicKeyParameters_(pub), new_OrgBouncycastlePqcJcajceProviderRainbowBCRainbowPrivateKey_initWithOrgBouncycastlePqcCryptoRainbowRainbowPrivateKeyParameters_(
#line 74
  priv));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, 3, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialize__WithInt:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(initialize__WithJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "param_", "LOrgBouncycastlePqcCryptoRainbowRainbowKeyGenerationParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "engine_", "LOrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "strength_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "initialised_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "initialize", "ILJavaSecuritySecureRandom;", "LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidAlgorithmParameterException;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyPairGeneratorSpi = { "RainbowKeyPairGeneratorSpi", "org.bouncycastle.pqc.jcajce.provider.rainbow", ptrTable, methods, fields, 7, 0x1, 4, 5, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyPairGeneratorSpi;
}

@end


#line 26
void OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyPairGeneratorSpi_init(OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyPairGeneratorSpi *self) {
  JavaSecurityKeyPairGenerator_initWithNSString_(self,
#line 28
  @"Rainbow");
  self->engine_ = new_OrgBouncycastlePqcCryptoRainbowRainbowKeyPairGenerator_init();
  self->strength_ =
#line 22
  1024;
  self->random_ = OrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  self->initialised_ = false;
}


#line 26
OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyPairGeneratorSpi *new_OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyPairGeneratorSpi_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyPairGeneratorSpi, init)
}


#line 26
OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyPairGeneratorSpi *create_OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyPairGeneratorSpi_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyPairGeneratorSpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcJcajceProviderRainbowRainbowKeyPairGeneratorSpi)
