//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/lms/LMSKeyPairGeneratorSpi.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPairGenerator.h"
#include "org/bouncycastle/crypto/CryptoServicesRegistrar.h"
#include "org/bouncycastle/crypto/KeyGenerationParameters.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/pqc/crypto/lms/HSSKeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/HSSKeyPairGenerator.h"
#include "org/bouncycastle/pqc/crypto/lms/HSSPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/HSSPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMOtsParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSKeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSKeyPairGenerator.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSPublicKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/lms/LMSigParameters.h"
#include "org/bouncycastle/pqc/jcajce/provider/lms/BCLMSPrivateKey.h"
#include "org/bouncycastle/pqc/jcajce/provider/lms/BCLMSPublicKey.h"
#include "org/bouncycastle/pqc/jcajce/provider/lms/LMSKeyPairGeneratorSpi.h"
#include "org/bouncycastle/pqc/jcajce/spec/LMSHSSKeyGenParameterSpec.h"
#include "org/bouncycastle/pqc/jcajce/spec/LMSHSSParameterSpec.h"
#include "org/bouncycastle/pqc/jcajce/spec/LMSKeyGenParameterSpec.h"
#include "org/bouncycastle/pqc/jcajce/spec/LMSParameterSpec.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/jcajce/provider/lms/LMSKeyPairGeneratorSpi must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastlePqcJcajceProviderLmsLMSKeyPairGeneratorSpi () {
 @public
  OrgBouncycastleCryptoKeyGenerationParameters *param_;
  OrgBouncycastleAsn1ASN1ObjectIdentifier *treeDigest_;
  id<OrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator> engine_;
  JavaSecuritySecureRandom *random_;
  jboolean initialised_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastlePqcJcajceProviderLmsLMSKeyPairGeneratorSpi, param_, OrgBouncycastleCryptoKeyGenerationParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcJcajceProviderLmsLMSKeyPairGeneratorSpi, treeDigest_, OrgBouncycastleAsn1ASN1ObjectIdentifier *)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcJcajceProviderLmsLMSKeyPairGeneratorSpi, engine_, id<OrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator>)
J2OBJC_FIELD_SETTER(OrgBouncycastlePqcJcajceProviderLmsLMSKeyPairGeneratorSpi, random_, JavaSecuritySecureRandom *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/lms/LMSKeyPairGeneratorSpi.java"


#line 29
@implementation OrgBouncycastlePqcJcajceProviderLmsLMSKeyPairGeneratorSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 39
- (instancetype)init {
  OrgBouncycastlePqcJcajceProviderLmsLMSKeyPairGeneratorSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 44
- (void)initialize__WithInt:(jint)strength
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  
#line 49
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"use AlgorithmParameterSpec");
}


#line 52
- (void)initialize__WithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                                  withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  
#line 58
  if ([params isKindOfClass:[OrgBouncycastlePqcJcajceSpecLMSKeyGenParameterSpec class]]) {
    
#line 60
    OrgBouncycastlePqcJcajceSpecLMSKeyGenParameterSpec *lmsParams = (OrgBouncycastlePqcJcajceSpecLMSKeyGenParameterSpec *) params;
    
#line 62
    param_ = new_OrgBouncycastlePqcCryptoLmsLMSKeyGenerationParameters_initWithOrgBouncycastlePqcCryptoLmsLMSParameters_withJavaSecuritySecureRandom_(new_OrgBouncycastlePqcCryptoLmsLMSParameters_initWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_([((OrgBouncycastlePqcJcajceSpecLMSKeyGenParameterSpec *) nil_chk(lmsParams)) getSigParams], [lmsParams getOtsParams]), random);
    
#line 64
    engine_ = new_OrgBouncycastlePqcCryptoLmsLMSKeyPairGenerator_init();
    [engine_ init__WithOrgBouncycastleCryptoKeyGenerationParameters:param_];
  }
  else if ([params isKindOfClass:[OrgBouncycastlePqcJcajceSpecLMSHSSKeyGenParameterSpec class]]) {
    
#line 69
    IOSObjectArray *lmsParams = [((OrgBouncycastlePqcJcajceSpecLMSHSSKeyGenParameterSpec *) nil_chk(((OrgBouncycastlePqcJcajceSpecLMSHSSKeyGenParameterSpec *) params))) getLMSSpecs];
    IOSObjectArray *hssParams = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(lmsParams))->size_ type:OrgBouncycastlePqcCryptoLmsLMSParameters_class_()];
    for (jint i = 0; i != lmsParams->size_; i++) {
      
#line 73
      (void) IOSObjectArray_SetAndConsume(hssParams, i, new_OrgBouncycastlePqcCryptoLmsLMSParameters_initWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_([((OrgBouncycastlePqcJcajceSpecLMSKeyGenParameterSpec *) nil_chk(IOSObjectArray_Get(lmsParams, i))) getSigParams], [((OrgBouncycastlePqcJcajceSpecLMSKeyGenParameterSpec *) nil_chk(IOSObjectArray_Get(lmsParams, i))) getOtsParams]));
    }
    param_ = new_OrgBouncycastlePqcCryptoLmsHSSKeyGenerationParameters_initWithOrgBouncycastlePqcCryptoLmsLMSParametersArray_withJavaSecuritySecureRandom_(hssParams, random);
    
#line 77
    engine_ = new_OrgBouncycastlePqcCryptoLmsHSSKeyPairGenerator_init();
    [engine_ init__WithOrgBouncycastleCryptoKeyGenerationParameters:param_];
  }
  else if ([params isKindOfClass:[OrgBouncycastlePqcJcajceSpecLMSParameterSpec class]]) {
    
#line 82
    OrgBouncycastlePqcJcajceSpecLMSParameterSpec *lmsParams = (OrgBouncycastlePqcJcajceSpecLMSParameterSpec *) params;
    
#line 84
    param_ = new_OrgBouncycastlePqcCryptoLmsLMSKeyGenerationParameters_initWithOrgBouncycastlePqcCryptoLmsLMSParameters_withJavaSecuritySecureRandom_(new_OrgBouncycastlePqcCryptoLmsLMSParameters_initWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_([((OrgBouncycastlePqcJcajceSpecLMSParameterSpec *) nil_chk(lmsParams)) getSigParams], [lmsParams getOtsParams]), random);
    
#line 86
    engine_ = new_OrgBouncycastlePqcCryptoLmsLMSKeyPairGenerator_init();
    [engine_ init__WithOrgBouncycastleCryptoKeyGenerationParameters:param_];
  }
  else if ([params isKindOfClass:[OrgBouncycastlePqcJcajceSpecLMSHSSParameterSpec class]]) {
    
#line 91
    IOSObjectArray *lmsParams = [((OrgBouncycastlePqcJcajceSpecLMSHSSParameterSpec *) nil_chk(((OrgBouncycastlePqcJcajceSpecLMSHSSParameterSpec *) params))) getLMSSpecs];
    IOSObjectArray *hssParams = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(lmsParams))->size_ type:OrgBouncycastlePqcCryptoLmsLMSParameters_class_()];
    for (jint i = 0; i != lmsParams->size_; i++) {
      
#line 95
      (void) IOSObjectArray_SetAndConsume(hssParams, i, new_OrgBouncycastlePqcCryptoLmsLMSParameters_initWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_([((OrgBouncycastlePqcJcajceSpecLMSParameterSpec *) nil_chk(IOSObjectArray_Get(lmsParams, i))) getSigParams], [((OrgBouncycastlePqcJcajceSpecLMSParameterSpec *) nil_chk(IOSObjectArray_Get(lmsParams, i))) getOtsParams]));
    }
    param_ = new_OrgBouncycastlePqcCryptoLmsHSSKeyGenerationParameters_initWithOrgBouncycastlePqcCryptoLmsLMSParametersArray_withJavaSecuritySecureRandom_(hssParams, random);
    
#line 99
    engine_ = new_OrgBouncycastlePqcCryptoLmsHSSKeyPairGenerator_init();
    [engine_ init__WithOrgBouncycastleCryptoKeyGenerationParameters:param_];
  }
  else {
    
#line 104
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"parameter object not a LMSParameterSpec/LMSHSSParameterSpec");
  }
  
#line 107
  initialised_ = true;
}


#line 110
- (JavaSecurityKeyPair *)generateKeyPair {
  
#line 113
  if (!initialised_) {
    
#line 115
    param_ = new_OrgBouncycastlePqcCryptoLmsLMSKeyGenerationParameters_initWithOrgBouncycastlePqcCryptoLmsLMSParameters_withJavaSecuritySecureRandom_(new_OrgBouncycastlePqcCryptoLmsLMSParameters_initWithOrgBouncycastlePqcCryptoLmsLMSigParameters_withOrgBouncycastlePqcCryptoLmsLMOtsParameters_(JreLoadStatic(OrgBouncycastlePqcCryptoLmsLMSigParameters, lms_sha256_n32_h10), JreLoadStatic(OrgBouncycastlePqcCryptoLmsLMOtsParameters, sha256_n32_w2)), random_);
    
#line 117
    [((id<OrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator>) nil_chk(engine_)) init__WithOrgBouncycastleCryptoKeyGenerationParameters:param_];
    initialised_ = true;
  }
  
#line 121
  OrgBouncycastleCryptoAsymmetricCipherKeyPair *pair = [((id<OrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator>) nil_chk(engine_)) generateKeyPair];
  
#line 123
  if ([engine_ isKindOfClass:[OrgBouncycastlePqcCryptoLmsLMSKeyPairGenerator class]]) {
    
#line 125
    OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *pub = (OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters *) cast_chk([((OrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(pair)) getPublic], [OrgBouncycastlePqcCryptoLmsLMSPublicKeyParameters class]);
    OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *priv = (OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters *) cast_chk([pair getPrivate], [OrgBouncycastlePqcCryptoLmsLMSPrivateKeyParameters class]);
    
#line 128
    return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(new_OrgBouncycastlePqcJcajceProviderLmsBCLMSPublicKey_initWithOrgBouncycastlePqcCryptoLmsLMSKeyParameters_(pub), new_OrgBouncycastlePqcJcajceProviderLmsBCLMSPrivateKey_initWithOrgBouncycastlePqcCryptoLmsLMSKeyParameters_(priv));
  }
  else {
    
#line 132
    OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters *pub = (OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters *) cast_chk([((OrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(pair)) getPublic], [OrgBouncycastlePqcCryptoLmsHSSPublicKeyParameters class]);
    OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *priv = (OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters *) cast_chk([pair getPrivate], [OrgBouncycastlePqcCryptoLmsHSSPrivateKeyParameters class]);
    
#line 135
    return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(new_OrgBouncycastlePqcJcajceProviderLmsBCLMSPublicKey_initWithOrgBouncycastlePqcCryptoLmsLMSKeyParameters_(pub), new_OrgBouncycastlePqcJcajceProviderLmsBCLMSPrivateKey_initWithOrgBouncycastlePqcCryptoLmsLMSKeyParameters_(priv));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, 3, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialize__WithInt:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(initialize__WithJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "param_", "LOrgBouncycastleCryptoKeyGenerationParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "treeDigest_", "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "engine_", "LOrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialised_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "initialize", "ILJavaSecuritySecureRandom;", "LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidAlgorithmParameterException;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcJcajceProviderLmsLMSKeyPairGeneratorSpi = { "LMSKeyPairGeneratorSpi", "org.bouncycastle.pqc.jcajce.provider.lms", ptrTable, methods, fields, 7, 0x1, 4, 5, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcJcajceProviderLmsLMSKeyPairGeneratorSpi;
}

@end


#line 39
void OrgBouncycastlePqcJcajceProviderLmsLMSKeyPairGeneratorSpi_init(OrgBouncycastlePqcJcajceProviderLmsLMSKeyPairGeneratorSpi *self) {
  JavaSecurityKeyPairGenerator_initWithNSString_(self,
#line 41
  @"LMS");
  self->engine_ = new_OrgBouncycastlePqcCryptoLmsLMSKeyPairGenerator_init();
  self->random_ = OrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  self->initialised_ =
#line 37
  false;
}


#line 39
OrgBouncycastlePqcJcajceProviderLmsLMSKeyPairGeneratorSpi *new_OrgBouncycastlePqcJcajceProviderLmsLMSKeyPairGeneratorSpi_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcJcajceProviderLmsLMSKeyPairGeneratorSpi, init)
}


#line 39
OrgBouncycastlePqcJcajceProviderLmsLMSKeyPairGeneratorSpi *create_OrgBouncycastlePqcJcajceProviderLmsLMSKeyPairGeneratorSpi_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcJcajceProviderLmsLMSKeyPairGeneratorSpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcJcajceProviderLmsLMSKeyPairGeneratorSpi)
