//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/sphincs/Sphincs256KeyPairGeneratorSpi.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/nist/NISTObjectIdentifiers.h"
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/bouncycastle/crypto/CryptoServicesRegistrar.h"
#include "org/bouncycastle/crypto/digests/SHA3Digest.h"
#include "org/bouncycastle/crypto/digests/SHA512tDigest.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCS256KeyGenerationParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCS256KeyPairGenerator.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCSPrivateKeyParameters.h"
#include "org/bouncycastle/pqc/crypto/sphincs/SPHINCSPublicKeyParameters.h"
#include "org/bouncycastle/pqc/jcajce/provider/sphincs/BCSphincs256PrivateKey.h"
#include "org/bouncycastle/pqc/jcajce/provider/sphincs/BCSphincs256PublicKey.h"
#include "org/bouncycastle/pqc/jcajce/provider/sphincs/Sphincs256KeyPairGeneratorSpi.h"
#include "org/bouncycastle/pqc/jcajce/spec/SPHINCS256KeyGenParameterSpec.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/pqc/jcajce/provider/sphincs/Sphincs256KeyPairGeneratorSpi must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/pqc/jcajce/provider/sphincs/Sphincs256KeyPairGeneratorSpi.java"


#line 20
@implementation OrgBouncycastlePqcJcajceProviderSphincsSphincs256KeyPairGeneratorSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 31
- (instancetype)init {
  OrgBouncycastlePqcJcajceProviderSphincsSphincs256KeyPairGeneratorSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 36
- (void)initialize__WithInt:(jint)strength
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  
#line 41
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"use AlgorithmParameterSpec");
}


#line 44
- (void)initialize__WithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                                  withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  
#line 50
  if (!([params isKindOfClass:[OrgBouncycastlePqcJcajceSpecSPHINCS256KeyGenParameterSpec class]])) {
    
#line 52
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"parameter object not a SPHINCS256KeyGenParameterSpec");
  }
  
#line 55
  OrgBouncycastlePqcJcajceSpecSPHINCS256KeyGenParameterSpec *sphincsParams = (OrgBouncycastlePqcJcajceSpecSPHINCS256KeyGenParameterSpec *) cast_chk(params, [OrgBouncycastlePqcJcajceSpecSPHINCS256KeyGenParameterSpec class]);
  
#line 57
  if ([((NSString *) nil_chk([((OrgBouncycastlePqcJcajceSpecSPHINCS256KeyGenParameterSpec *) nil_chk(sphincsParams)) getTreeDigest])) isEqual:OrgBouncycastlePqcJcajceSpecSPHINCS256KeyGenParameterSpec_SHA512_256]) {
    
#line 59
    treeDigest_ = JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha512_256);
    param_ = new_OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters_initWithJavaSecuritySecureRandom_withOrgBouncycastleCryptoDigest_(random, new_OrgBouncycastleCryptoDigestsSHA512tDigest_initWithInt_(256));
  }
  else if ([((NSString *) nil_chk([sphincsParams getTreeDigest])) isEqual:OrgBouncycastlePqcJcajceSpecSPHINCS256KeyGenParameterSpec_SHA3_256]) {
    
#line 64
    treeDigest_ = JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha3_256);
    param_ = new_OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters_initWithJavaSecuritySecureRandom_withOrgBouncycastleCryptoDigest_(random, new_OrgBouncycastleCryptoDigestsSHA3Digest_initWithInt_(256));
  }
  
#line 68
  [((OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator *) nil_chk(engine_)) init__WithOrgBouncycastleCryptoKeyGenerationParameters:param_];
  initialised_ = true;
}


#line 72
- (JavaSecurityKeyPair *)generateKeyPair {
  
#line 75
  if (!initialised_) {
    
#line 77
    param_ = new_OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters_initWithJavaSecuritySecureRandom_withOrgBouncycastleCryptoDigest_(random_, new_OrgBouncycastleCryptoDigestsSHA512tDigest_initWithInt_(256));
    
#line 79
    [((OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator *) nil_chk(engine_)) init__WithOrgBouncycastleCryptoKeyGenerationParameters:param_];
    initialised_ = true;
  }
  
#line 83
  OrgBouncycastleCryptoAsymmetricCipherKeyPair *pair = [((OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator *) nil_chk(engine_)) generateKeyPair];
  OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *pub = (OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *) cast_chk([((OrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(pair)) getPublic], [OrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters class]);
  OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters *priv = (OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters *) cast_chk([pair getPrivate], [OrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters class]);
  
#line 87
  return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(new_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PublicKey_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastlePqcCryptoSphincsSPHINCSPublicKeyParameters_(treeDigest_, pub), new_OrgBouncycastlePqcJcajceProviderSphincsBCSphincs256PrivateKey_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters_(treeDigest_, priv));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, 3, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialize__WithInt:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(initialize__WithJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "treeDigest_", "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "param_", "LOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "engine_", "LOrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "initialised_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "initialize", "ILJavaSecuritySecureRandom;", "LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidAlgorithmParameterException;" };
  static const J2ObjcClassInfo _OrgBouncycastlePqcJcajceProviderSphincsSphincs256KeyPairGeneratorSpi = { "Sphincs256KeyPairGeneratorSpi", "org.bouncycastle.pqc.jcajce.provider.sphincs", ptrTable, methods, fields, 7, 0x1, 4, 5, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastlePqcJcajceProviderSphincsSphincs256KeyPairGeneratorSpi;
}

@end


#line 31
void OrgBouncycastlePqcJcajceProviderSphincsSphincs256KeyPairGeneratorSpi_init(OrgBouncycastlePqcJcajceProviderSphincsSphincs256KeyPairGeneratorSpi *self) {
  JavaSecurityKeyPairGenerator_initWithNSString_(self,
#line 33
  @"SPHINCS256");
  self->treeDigest_ = JreLoadStatic(OrgBouncycastleAsn1NistNISTObjectIdentifiers, id_sha512_256);
  self->engine_ = new_OrgBouncycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator_init();
  self->random_ = OrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  self->initialised_ =
#line 29
  false;
}


#line 31
OrgBouncycastlePqcJcajceProviderSphincsSphincs256KeyPairGeneratorSpi *new_OrgBouncycastlePqcJcajceProviderSphincsSphincs256KeyPairGeneratorSpi_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastlePqcJcajceProviderSphincsSphincs256KeyPairGeneratorSpi, init)
}


#line 31
OrgBouncycastlePqcJcajceProviderSphincsSphincs256KeyPairGeneratorSpi *create_OrgBouncycastlePqcJcajceProviderSphincsSphincs256KeyPairGeneratorSpi_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastlePqcJcajceProviderSphincsSphincs256KeyPairGeneratorSpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastlePqcJcajceProviderSphincsSphincs256KeyPairGeneratorSpi)
