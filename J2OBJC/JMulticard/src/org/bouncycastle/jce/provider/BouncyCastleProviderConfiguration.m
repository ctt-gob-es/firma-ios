//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jce/provider/BouncyCastleProviderConfiguration.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/SecurityManager.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/math/BigInteger.h"
#include "java/security/Permission.h"
#include "java/security/spec/DSAParameterSpec.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "javax/crypto/spec/DHParameterSpec.h"
#include "org/bouncycastle/crypto/CryptoServicesRegistrar.h"
#include "org/bouncycastle/crypto/params/DHParameters.h"
#include "org/bouncycastle/crypto/params/DSAParameters.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/util/EC5Util.h"
#include "org/bouncycastle/jcajce/provider/config/ConfigurableProvider.h"
#include "org/bouncycastle/jcajce/provider/config/ProviderConfigurationPermission.h"
#include "org/bouncycastle/jcajce/spec/DHDomainParameterSpec.h"
#include "org/bouncycastle/jce/provider/BouncyCastleProvider.h"
#include "org/bouncycastle/jce/provider/BouncyCastleProviderConfiguration.h"
#include "org/bouncycastle/jce/spec/ECParameterSpec.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/jce/provider/BouncyCastleProviderConfiguration must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleJceProviderBouncyCastleProviderConfiguration () {
 @public
  JavaLangThreadLocal *ecThreadSpec_;
  JavaLangThreadLocal *dhThreadSpec_;
  volatile_id ecImplicitCaParams_;
  volatile_id dhDefaultParams_;
  volatile_id acceptableNamedCurves_;
  volatile_id additionalECParameters_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration, ecThreadSpec_, JavaLangThreadLocal *)
J2OBJC_FIELD_SETTER(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration, dhThreadSpec_, JavaLangThreadLocal *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration, ecImplicitCaParams_, OrgBouncycastleJceSpecECParameterSpec *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration, dhDefaultParams_, id)
J2OBJC_VOLATILE_FIELD_SETTER(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration, acceptableNamedCurves_, id<JavaUtilSet>)
J2OBJC_VOLATILE_FIELD_SETTER(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration, additionalECParameters_, id<JavaUtilMap>)

inline JavaSecurityPermission *OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_get_BC_EC_LOCAL_PERMISSION(void);
inline JavaSecurityPermission *OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_set_BC_EC_LOCAL_PERMISSION(JavaSecurityPermission *value);
static JavaSecurityPermission *OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_LOCAL_PERMISSION;
J2OBJC_STATIC_FIELD_OBJ(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration, BC_EC_LOCAL_PERMISSION, JavaSecurityPermission *)

inline JavaSecurityPermission *OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_get_BC_EC_PERMISSION(void);
inline JavaSecurityPermission *OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_set_BC_EC_PERMISSION(JavaSecurityPermission *value);
static JavaSecurityPermission *OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_PERMISSION;
J2OBJC_STATIC_FIELD_OBJ(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration, BC_EC_PERMISSION, JavaSecurityPermission *)

inline JavaSecurityPermission *OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_get_BC_DH_LOCAL_PERMISSION(void);
inline JavaSecurityPermission *OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_set_BC_DH_LOCAL_PERMISSION(JavaSecurityPermission *value);
static JavaSecurityPermission *OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_DH_LOCAL_PERMISSION;
J2OBJC_STATIC_FIELD_OBJ(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration, BC_DH_LOCAL_PERMISSION, JavaSecurityPermission *)

inline JavaSecurityPermission *OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_get_BC_DH_PERMISSION(void);
inline JavaSecurityPermission *OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_set_BC_DH_PERMISSION(JavaSecurityPermission *value);
static JavaSecurityPermission *OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_DH_PERMISSION;
J2OBJC_STATIC_FIELD_OBJ(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration, BC_DH_PERMISSION, JavaSecurityPermission *)

inline JavaSecurityPermission *OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_get_BC_EC_CURVE_PERMISSION(void);
inline JavaSecurityPermission *OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_set_BC_EC_CURVE_PERMISSION(JavaSecurityPermission *value);
static JavaSecurityPermission *OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_CURVE_PERMISSION;
J2OBJC_STATIC_FIELD_OBJ(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration, BC_EC_CURVE_PERMISSION, JavaSecurityPermission *)

inline JavaSecurityPermission *OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_get_BC_ADDITIONAL_EC_CURVE_PERMISSION(void);
inline JavaSecurityPermission *OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_set_BC_ADDITIONAL_EC_CURVE_PERMISSION(JavaSecurityPermission *value);
static JavaSecurityPermission *OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_ADDITIONAL_EC_CURVE_PERMISSION;
J2OBJC_STATIC_FIELD_OBJ(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration, BC_ADDITIONAL_EC_CURVE_PERMISSION, JavaSecurityPermission *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jce/provider/BouncyCastleProviderConfiguration.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration)


#line 23
@implementation OrgBouncycastleJceProviderBouncyCastleProviderConfiguration


#line 23
- (instancetype)initPackagePrivate {
  OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_initPackagePrivate(self);
  return self;
}


#line 46
- (void)setParameterWithNSString:(NSString *)parameterName
                          withId:(id)parameter {
  JavaLangSecurityManager *securityManager = JavaLangSystem_getSecurityManager();
  
#line 50
  if ([((NSString *) nil_chk(OrgBouncycastleJcajceProviderConfigConfigurableProvider_THREAD_LOCAL_EC_IMPLICITLY_CA)) isEqual:parameterName]) {
    
#line 52
    OrgBouncycastleJceSpecECParameterSpec *curveSpec;
    
#line 54
    if (securityManager != nil) {
      
#line 56
      [securityManager checkPermissionWithJavaSecurityPermission:OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_LOCAL_PERMISSION];
    }
    
#line 59
    if ([parameter isKindOfClass:[OrgBouncycastleJceSpecECParameterSpec class]] || parameter == nil) {
      
#line 61
      curveSpec = (OrgBouncycastleJceSpecECParameterSpec *) cast_chk(parameter, [OrgBouncycastleJceSpecECParameterSpec class]);
    }
    else {
      
#line 65
      curveSpec = OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_((JavaSecuritySpecECParameterSpec *) cast_chk(parameter, [JavaSecuritySpecECParameterSpec class]));
    }
    
#line 68
    if (curveSpec == nil) {
      
#line 70
      [((JavaLangThreadLocal *) nil_chk(ecThreadSpec_)) remove];
    }
    else {
      
#line 74
      [((JavaLangThreadLocal *) nil_chk(ecThreadSpec_)) setWithId:curveSpec];
    }
  }
  else if ([((NSString *) nil_chk(OrgBouncycastleJcajceProviderConfigConfigurableProvider_EC_IMPLICITLY_CA)) isEqual:parameterName]) {
    
#line 79
    if (securityManager != nil) {
      
#line 81
      [securityManager checkPermissionWithJavaSecurityPermission:OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_PERMISSION];
    }
    
#line 84
    if ([parameter isKindOfClass:[OrgBouncycastleJceSpecECParameterSpec class]] || parameter == nil) {
      
#line 86
      (void) JreVolatileStrongAssign(&ecImplicitCaParams_, (OrgBouncycastleJceSpecECParameterSpec *) cast_chk(parameter, [OrgBouncycastleJceSpecECParameterSpec class]));
    }
    else {
      
#line 90
      (void) JreVolatileStrongAssign(&ecImplicitCaParams_, OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_((JavaSecuritySpecECParameterSpec *) cast_chk(parameter, [JavaSecuritySpecECParameterSpec class])));
    }
  }
  else if ([((NSString *) nil_chk(OrgBouncycastleJcajceProviderConfigConfigurableProvider_THREAD_LOCAL_DH_DEFAULT_PARAMS)) isEqual:parameterName]) {
    
#line 95
    id dhSpec;
    
#line 97
    if (securityManager != nil) {
      
#line 99
      [securityManager checkPermissionWithJavaSecurityPermission:OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_DH_LOCAL_PERMISSION];
    }
    
#line 102
    if ([parameter isKindOfClass:[JavaxCryptoSpecDHParameterSpec class]] || [IOSClass_arrayType(JavaxCryptoSpecDHParameterSpec_class_(), 1) isInstance:parameter] || parameter == nil) {
      
#line 104
      dhSpec = parameter;
    }
    else {
      
#line 108
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"not a valid DHParameterSpec");
    }
    
#line 111
    if (dhSpec == nil) {
      
#line 113
      [((JavaLangThreadLocal *) nil_chk(dhThreadSpec_)) remove];
    }
    else {
      
#line 117
      [((JavaLangThreadLocal *) nil_chk(dhThreadSpec_)) setWithId:dhSpec];
    }
  }
  else if ([((NSString *) nil_chk(OrgBouncycastleJcajceProviderConfigConfigurableProvider_DH_DEFAULT_PARAMS)) isEqual:parameterName]) {
    
#line 122
    if (securityManager != nil) {
      
#line 124
      [securityManager checkPermissionWithJavaSecurityPermission:OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_DH_PERMISSION];
    }
    
#line 127
    if ([parameter isKindOfClass:[JavaxCryptoSpecDHParameterSpec class]] || [IOSClass_arrayType(JavaxCryptoSpecDHParameterSpec_class_(), 1) isInstance:parameter] || parameter == nil) {
      
#line 129
      (void) JreVolatileStrongAssign(&dhDefaultParams_, parameter);
    }
    else {
      
#line 133
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"not a valid DHParameterSpec or DHParameterSpec[]");
    }
  }
  else if ([((NSString *) nil_chk(OrgBouncycastleJcajceProviderConfigConfigurableProvider_ACCEPTABLE_EC_CURVES)) isEqual:parameterName]) {
    
#line 138
    if (securityManager != nil) {
      
#line 140
      [securityManager checkPermissionWithJavaSecurityPermission:OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_CURVE_PERMISSION];
    }
    
#line 143
    (void) JreVolatileStrongAssign(&acceptableNamedCurves_, (id<JavaUtilSet>) cast_check(parameter, JavaUtilSet_class_()));
  }
  else if ([((NSString *) nil_chk(OrgBouncycastleJcajceProviderConfigConfigurableProvider_ADDITIONAL_EC_PARAMETERS)) isEqual:parameterName]) {
    
#line 147
    if (securityManager != nil) {
      
#line 149
      [securityManager checkPermissionWithJavaSecurityPermission:OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_ADDITIONAL_EC_CURVE_PERMISSION];
    }
    
#line 152
    (void) JreVolatileStrongAssign(&additionalECParameters_, (id<JavaUtilMap>) cast_check(parameter, JavaUtilMap_class_()));
  }
}


#line 156
- (OrgBouncycastleJceSpecECParameterSpec *)getEcImplicitlyCa {
  
#line 159
  OrgBouncycastleJceSpecECParameterSpec *spec = (OrgBouncycastleJceSpecECParameterSpec *) cast_chk([((JavaLangThreadLocal *) nil_chk(ecThreadSpec_)) get], [OrgBouncycastleJceSpecECParameterSpec class]);
  
#line 161
  if (spec != nil) {
    
#line 163
    return spec;
  }
  
#line 166
  return JreLoadVolatileId(&ecImplicitCaParams_);
}


#line 169
- (JavaxCryptoSpecDHParameterSpec *)getDHDefaultParametersWithInt:(jint)keySize {
  
#line 172
  id params = [((JavaLangThreadLocal *) nil_chk(dhThreadSpec_)) get];
  if (params == nil) {
    
#line 175
    params = JreLoadVolatileId(&dhDefaultParams_);
  }
  
#line 178
  if ([params isKindOfClass:[JavaxCryptoSpecDHParameterSpec class]]) {
    
#line 180
    JavaxCryptoSpecDHParameterSpec *spec = (JavaxCryptoSpecDHParameterSpec *) params;
    
#line 182
    if ([((JavaMathBigInteger *) nil_chk([((JavaxCryptoSpecDHParameterSpec *) nil_chk(spec)) getP])) bitLength] == keySize) {
      
#line 184
      return spec;
    }
  }
  else if ([IOSClass_arrayType(JavaxCryptoSpecDHParameterSpec_class_(), 1) isInstance:params]) {
    
#line 189
    IOSObjectArray *specs = (IOSObjectArray *) cast_check(params, IOSClass_arrayType(JavaxCryptoSpecDHParameterSpec_class_(), 1));
    {
      IOSObjectArray *a__ = specs;
      JavaxCryptoSpecDHParameterSpec * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaxCryptoSpecDHParameterSpec * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaxCryptoSpecDHParameterSpec *spec = *b__++;
        
#line 192
        if ([((JavaMathBigInteger *) nil_chk([((JavaxCryptoSpecDHParameterSpec *) nil_chk(spec)) getP])) bitLength] == keySize) {
          
#line 194
          return spec;
        }
      }
    }
  }
  OrgBouncycastleCryptoParamsDHParameters *dhParams = OrgBouncycastleCryptoCryptoServicesRegistrar_getSizedPropertyWithOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withInt_(JreLoadStatic(OrgBouncycastleCryptoCryptoServicesRegistrar_Property, DH_DEFAULT_PARAMS), keySize);
  if (dhParams != nil) {
    
#line 202
    return new_OrgBouncycastleJcajceSpecDHDomainParameterSpec_initWithOrgBouncycastleCryptoParamsDHParameters_(dhParams);
  }
  
#line 205
  return nil;
}


#line 208
- (JavaSecuritySpecDSAParameterSpec *)getDSADefaultParametersWithInt:(jint)keySize {
  
#line 211
  OrgBouncycastleCryptoParamsDSAParameters *dsaParams = OrgBouncycastleCryptoCryptoServicesRegistrar_getSizedPropertyWithOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withInt_(JreLoadStatic(OrgBouncycastleCryptoCryptoServicesRegistrar_Property, DSA_DEFAULT_PARAMS), keySize);
  if (dsaParams != nil) {
    
#line 214
    return new_JavaSecuritySpecDSAParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([dsaParams getP], [dsaParams getQ], [dsaParams getG]);
  }
  
#line 217
  return nil;
}


#line 220
- (id<JavaUtilSet>)getAcceptableNamedCurves {
  
#line 223
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(JreLoadVolatileId(&acceptableNamedCurves_));
}

- (id<JavaUtilMap>)getAdditionalECParameters {
  
#line 229
  return JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(JreLoadVolatileId(&additionalECParameters_));
}

- (void)__javaClone:(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&ecImplicitCaParams_, &original->ecImplicitCaParams_);
  JreCloneVolatileStrong(&dhDefaultParams_, &original->dhDefaultParams_);
  JreCloneVolatileStrong(&acceptableNamedCurves_, &original->acceptableNamedCurves_);
  JreCloneVolatileStrong(&additionalECParameters_, &original->additionalECParameters_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleJceSpecECParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxCryptoSpecDHParameterSpec;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecDSAParameterSpec;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(setParameterWithNSString:withId:);
  methods[2].selector = @selector(getEcImplicitlyCa);
  methods[3].selector = @selector(getDHDefaultParametersWithInt:);
  methods[4].selector = @selector(getDSADefaultParametersWithInt:);
  methods[5].selector = @selector(getAcceptableNamedCurves);
  methods[6].selector = @selector(getAdditionalECParameters);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BC_EC_LOCAL_PERMISSION", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0xa, -1, 5, -1, -1 },
    { "BC_EC_PERMISSION", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0xa, -1, 6, -1, -1 },
    { "BC_DH_LOCAL_PERMISSION", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0xa, -1, 7, -1, -1 },
    { "BC_DH_PERMISSION", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
    { "BC_EC_CURVE_PERMISSION", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0xa, -1, 9, -1, -1 },
    { "BC_ADDITIONAL_EC_CURVE_PERMISSION", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0xa, -1, 10, -1, -1 },
    { "ecThreadSpec_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "dhThreadSpec_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ecImplicitCaParams_", "LOrgBouncycastleJceSpecECParameterSpec;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "dhDefaultParams_", "LNSObject;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "acceptableNamedCurves_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "additionalECParameters_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setParameter", "LNSString;LNSObject;", "getDHDefaultParameters", "I", "getDSADefaultParameters", &OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_LOCAL_PERMISSION, &OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_PERMISSION, &OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_DH_LOCAL_PERMISSION, &OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_DH_PERMISSION, &OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_CURVE_PERMISSION, &OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_ADDITIONAL_EC_CURVE_PERMISSION };
  static const J2ObjcClassInfo _OrgBouncycastleJceProviderBouncyCastleProviderConfiguration = { "BouncyCastleProviderConfiguration", "org.bouncycastle.jce.provider", ptrTable, methods, fields, 7, 0x0, 7, 12, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleJceProviderBouncyCastleProviderConfiguration;
}

+ (void)initialize {
  if (self == [OrgBouncycastleJceProviderBouncyCastleProviderConfiguration class]) {
    OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_LOCAL_PERMISSION = new_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(
#line 26
    OrgBouncycastleJceProviderBouncyCastleProvider_PROVIDER_NAME, OrgBouncycastleJcajceProviderConfigConfigurableProvider_THREAD_LOCAL_EC_IMPLICITLY_CA);
    OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_PERMISSION = new_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(
#line 28
    OrgBouncycastleJceProviderBouncyCastleProvider_PROVIDER_NAME, OrgBouncycastleJcajceProviderConfigConfigurableProvider_EC_IMPLICITLY_CA);
    OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_DH_LOCAL_PERMISSION = new_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(
#line 30
    OrgBouncycastleJceProviderBouncyCastleProvider_PROVIDER_NAME, OrgBouncycastleJcajceProviderConfigConfigurableProvider_THREAD_LOCAL_DH_DEFAULT_PARAMS);
    OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_DH_PERMISSION = new_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(
#line 32
    OrgBouncycastleJceProviderBouncyCastleProvider_PROVIDER_NAME, OrgBouncycastleJcajceProviderConfigConfigurableProvider_DH_DEFAULT_PARAMS);
    OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_CURVE_PERMISSION = new_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(
#line 34
    OrgBouncycastleJceProviderBouncyCastleProvider_PROVIDER_NAME, OrgBouncycastleJcajceProviderConfigConfigurableProvider_ACCEPTABLE_EC_CURVES);
    OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_BC_ADDITIONAL_EC_CURVE_PERMISSION = new_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(
#line 36
    OrgBouncycastleJceProviderBouncyCastleProvider_PROVIDER_NAME, OrgBouncycastleJcajceProviderConfigConfigurableProvider_ADDITIONAL_EC_PARAMETERS);
    J2OBJC_SET_INITIALIZED(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration)
  }
}

@end


#line 23
void OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_initPackagePrivate(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration *self) {
  NSObject_init(self);
  self->ecThreadSpec_ = new_JavaLangThreadLocal_init();
  self->dhThreadSpec_ = new_JavaLangThreadLocal_init();
  (void) JreVolatileStrongAssign(&self->acceptableNamedCurves_, new_JavaUtilHashSet_init());
  (void) JreVolatileStrongAssign(&self->additionalECParameters_, new_JavaUtilHashMap_init());
}


#line 23
OrgBouncycastleJceProviderBouncyCastleProviderConfiguration *new_OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration, initPackagePrivate)
}


#line 23
OrgBouncycastleJceProviderBouncyCastleProviderConfiguration *create_OrgBouncycastleJceProviderBouncyCastleProviderConfiguration_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration, initPackagePrivate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleJceProviderBouncyCastleProviderConfiguration)
