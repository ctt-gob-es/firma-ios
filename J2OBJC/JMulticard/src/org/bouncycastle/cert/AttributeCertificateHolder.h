//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cert/AttributeCertificateHolder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCertAttributeCertificateHolder")
#ifdef RESTRICT_OrgBouncycastleCertAttributeCertificateHolder
#define INCLUDE_ALL_OrgBouncycastleCertAttributeCertificateHolder 0
#else
#define INCLUDE_ALL_OrgBouncycastleCertAttributeCertificateHolder 1
#endif
#undef RESTRICT_OrgBouncycastleCertAttributeCertificateHolder

#if !defined (OrgBouncycastleCertAttributeCertificateHolder_) && (INCLUDE_ALL_OrgBouncycastleCertAttributeCertificateHolder || defined(INCLUDE_OrgBouncycastleCertAttributeCertificateHolder))
#define OrgBouncycastleCertAttributeCertificateHolder_

#define RESTRICT_OrgBouncycastleUtilSelector 1
#define INCLUDE_OrgBouncycastleUtilSelector 1
#include "org/bouncycastle/util/Selector.h"

@class IOSByteArray;
@class IOSObjectArray;
@class JavaMathBigInteger;
@class OrgBouncycastleAsn1ASN1ObjectIdentifier;
@class OrgBouncycastleAsn1ASN1Sequence;
@class OrgBouncycastleAsn1X500X500Name;
@class OrgBouncycastleAsn1X509AlgorithmIdentifier;
@class OrgBouncycastleAsn1X509Holder;
@class OrgBouncycastleCertX509CertificateHolder;
@protocol OrgBouncycastleOperatorDigestCalculatorProvider;

/*!
 @brief The Holder object.
 @code

           Holder ::= SEQUENCE {
                 baseCertificateID   [0] IssuerSerial OPTIONAL,
                          -- the issuer and serial number of
                          -- the holder's Public Key Certificate
                 entityName          [1] GeneralNames OPTIONAL,
                          -- the name of the claimant or role
                 objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
                          -- used to directly authenticate the holder,
                          -- for example, an executable
           } 
  
@endcode
  <p>
  <b>Note:</b> If objectDigestInfo comparisons are to be carried out the static
  method setDigestCalculatorProvider <b>must</b> be called once to configure the class
  to do the necessary calculations. 
 </p>
 */
@interface OrgBouncycastleCertAttributeCertificateHolder : NSObject < OrgBouncycastleUtilSelector > {
 @public
  OrgBouncycastleAsn1X509Holder *holder_;
}

#pragma mark Public

/*!
 @brief Constructs a holder for v2 attribute certificates with a hash value for
  some type of object.
 <p>
  <code>digestedObjectType</code> can be one of the following: 
 <ul>
  <li>0 - publicKey - A hash of the public key of the holder must be
  passed. 
 <li>1 - publicKeyCert - A hash of the public key certificate of the
  holder must be passed. 
 <li>2 - otherObjectDigest - A hash of some other object type must be
  passed. <code>otherObjectTypeID</code> must not be empty. 
 </ul>
  <p>
  This cannot be used if a v1 attribute certificate is used.
 @param digestedObjectType The digest object type.
 @param digestAlgorithm The algorithm identifier for the hash.
 @param otherObjectTypeID The object type ID if             
  <code> digestedObjectType </code>  is             
  <code> otherObjectDigest </code> .
 @param objectDigest The hash value.
 */
- (instancetype)initWithInt:(jint)digestedObjectType
withOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)digestAlgorithm
withOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)otherObjectTypeID
              withByteArray:(IOSByteArray *)objectDigest;

/*!
 @brief Create a holder using the entityName option based on the passed in principal.
 @param principal the entityName to be associated with the attribute certificate.
 */
- (instancetype)initWithOrgBouncycastleAsn1X500X500Name:(OrgBouncycastleAsn1X500X500Name *)principal;

/*!
 @brief Create a holder using the baseCertificateID element.
 @param issuerName name of associated certificate's issuer.
 @param serialNumber serial number of associated certificate.
 */
- (instancetype)initWithOrgBouncycastleAsn1X500X500Name:(OrgBouncycastleAsn1X500X500Name *)issuerName
                                 withJavaMathBigInteger:(JavaMathBigInteger *)serialNumber;

/*!
 @brief Create a holder using the baseCertificateID option based on the passed in associated certificate,
 @param cert the certificate to be associated with this holder.
 */
- (instancetype)initWithOrgBouncycastleCertX509CertificateHolder:(OrgBouncycastleCertX509CertificateHolder *)cert;

- (id)java_clone;

- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns algorithm identifier for the digest used if ObjectDigestInfo is present.
 @return digest AlgorithmIdentifier or <code>null</code> if ObjectDigestInfo is absent.
 */
- (OrgBouncycastleAsn1X509AlgorithmIdentifier *)getDigestAlgorithm;

/*!
 @brief Returns the digest object type if an object digest info is used.
 <p>
  <ul>
  <li>0 - publicKey - A hash of the public key of the holder must be
  passed. 
 <li>1 - publicKeyCert - A hash of the public key certificate of the
  holder must be passed. 
 <li>2 - otherObjectDigest - A hash of some other object type must be
  passed. <code>otherObjectTypeID</code> must not be empty. 
 </ul>
 @return The digest object type or -1 if no object digest info is set.
 */
- (jint)getDigestedObjectType;

/*!
 @brief Return any principal objects inside the attribute certificate holder
  entity names field.
 @return an array of Principal objects (usually X500Principal), null if no
          entity names field is set.
 */
- (IOSObjectArray *)getEntityNames;

/*!
 @brief Return the principals associated with the issuer attached to this holder
 @return an array of principals, null if no BaseCertificateID is set.
 */
- (IOSObjectArray *)getIssuer;

/*!
 @brief Returns the hash if an object digest info is used.
 @return The hash or <code>null</code> if ObjectDigestInfo is absent.
 */
- (IOSByteArray *)getObjectDigest;

/*!
 @brief Returns the digest algorithm ID if an object digest info is used.
 @return The digest algorithm ID or <code>null</code> if no object
          digest info is set.
 */
- (OrgBouncycastleAsn1ASN1ObjectIdentifier *)getOtherObjectTypeID;

/*!
 @brief Return the serial number associated with the issuer attached to this
  holder.
 @return the certificate serial number, null if no BaseCertificateID is
          set.
 */
- (JavaMathBigInteger *)getSerialNumber;

- (NSUInteger)hash;

- (jboolean)matchWithId:(id)obj;

/*!
 @brief Set a digest calculator provider to be used if matches are attempted using
  ObjectDigestInfo,
 @param digCalcProvider a provider of digest calculators.
 */
+ (void)setDigestCalculatorProviderWithOrgBouncycastleOperatorDigestCalculatorProvider:(id<OrgBouncycastleOperatorDigestCalculatorProvider>)digCalcProvider;

#pragma mark Package-Private

- (instancetype)initWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCertAttributeCertificateHolder)

J2OBJC_FIELD_SETTER(OrgBouncycastleCertAttributeCertificateHolder, holder_, OrgBouncycastleAsn1X509Holder *)

FOUNDATION_EXPORT void OrgBouncycastleCertAttributeCertificateHolder_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleCertAttributeCertificateHolder *self, OrgBouncycastleAsn1ASN1Sequence *seq);

FOUNDATION_EXPORT OrgBouncycastleCertAttributeCertificateHolder *new_OrgBouncycastleCertAttributeCertificateHolder_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCertAttributeCertificateHolder *create_OrgBouncycastleCertAttributeCertificateHolder_initWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleAsn1ASN1Sequence *seq);

FOUNDATION_EXPORT void OrgBouncycastleCertAttributeCertificateHolder_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_(OrgBouncycastleCertAttributeCertificateHolder *self, OrgBouncycastleAsn1X500X500Name *issuerName, JavaMathBigInteger *serialNumber);

FOUNDATION_EXPORT OrgBouncycastleCertAttributeCertificateHolder *new_OrgBouncycastleCertAttributeCertificateHolder_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_(OrgBouncycastleAsn1X500X500Name *issuerName, JavaMathBigInteger *serialNumber) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCertAttributeCertificateHolder *create_OrgBouncycastleCertAttributeCertificateHolder_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_(OrgBouncycastleAsn1X500X500Name *issuerName, JavaMathBigInteger *serialNumber);

FOUNDATION_EXPORT void OrgBouncycastleCertAttributeCertificateHolder_initWithOrgBouncycastleCertX509CertificateHolder_(OrgBouncycastleCertAttributeCertificateHolder *self, OrgBouncycastleCertX509CertificateHolder *cert);

FOUNDATION_EXPORT OrgBouncycastleCertAttributeCertificateHolder *new_OrgBouncycastleCertAttributeCertificateHolder_initWithOrgBouncycastleCertX509CertificateHolder_(OrgBouncycastleCertX509CertificateHolder *cert) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCertAttributeCertificateHolder *create_OrgBouncycastleCertAttributeCertificateHolder_initWithOrgBouncycastleCertX509CertificateHolder_(OrgBouncycastleCertX509CertificateHolder *cert);

FOUNDATION_EXPORT void OrgBouncycastleCertAttributeCertificateHolder_initWithOrgBouncycastleAsn1X500X500Name_(OrgBouncycastleCertAttributeCertificateHolder *self, OrgBouncycastleAsn1X500X500Name *principal);

FOUNDATION_EXPORT OrgBouncycastleCertAttributeCertificateHolder *new_OrgBouncycastleCertAttributeCertificateHolder_initWithOrgBouncycastleAsn1X500X500Name_(OrgBouncycastleAsn1X500X500Name *principal) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCertAttributeCertificateHolder *create_OrgBouncycastleCertAttributeCertificateHolder_initWithOrgBouncycastleAsn1X500X500Name_(OrgBouncycastleAsn1X500X500Name *principal);

FOUNDATION_EXPORT void OrgBouncycastleCertAttributeCertificateHolder_initWithInt_withOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleAsn1ASN1ObjectIdentifier_withByteArray_(OrgBouncycastleCertAttributeCertificateHolder *self, jint digestedObjectType, OrgBouncycastleAsn1ASN1ObjectIdentifier *digestAlgorithm, OrgBouncycastleAsn1ASN1ObjectIdentifier *otherObjectTypeID, IOSByteArray *objectDigest);

FOUNDATION_EXPORT OrgBouncycastleCertAttributeCertificateHolder *new_OrgBouncycastleCertAttributeCertificateHolder_initWithInt_withOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleAsn1ASN1ObjectIdentifier_withByteArray_(jint digestedObjectType, OrgBouncycastleAsn1ASN1ObjectIdentifier *digestAlgorithm, OrgBouncycastleAsn1ASN1ObjectIdentifier *otherObjectTypeID, IOSByteArray *objectDigest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCertAttributeCertificateHolder *create_OrgBouncycastleCertAttributeCertificateHolder_initWithInt_withOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleAsn1ASN1ObjectIdentifier_withByteArray_(jint digestedObjectType, OrgBouncycastleAsn1ASN1ObjectIdentifier *digestAlgorithm, OrgBouncycastleAsn1ASN1ObjectIdentifier *otherObjectTypeID, IOSByteArray *objectDigest);

FOUNDATION_EXPORT void OrgBouncycastleCertAttributeCertificateHolder_setDigestCalculatorProviderWithOrgBouncycastleOperatorDigestCalculatorProvider_(id<OrgBouncycastleOperatorDigestCalculatorProvider> digCalcProvider);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCertAttributeCertificateHolder)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCertAttributeCertificateHolder")
