//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cert/selector/X509AttributeCertificateHolderSelector.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector")
#ifdef RESTRICT_OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector
#define INCLUDE_ALL_OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector 0
#else
#define INCLUDE_ALL_OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector 1
#endif
#undef RESTRICT_OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector

#if !defined (OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector_) && (INCLUDE_ALL_OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector || defined(INCLUDE_OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector))
#define OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector_

#define RESTRICT_OrgBouncycastleUtilSelector 1
#define INCLUDE_OrgBouncycastleUtilSelector 1
#include "org/bouncycastle/util/Selector.h"

@class JavaMathBigInteger;
@class JavaUtilDate;
@class OrgBouncycastleCertAttributeCertificateHolder;
@class OrgBouncycastleCertAttributeCertificateIssuer;
@class OrgBouncycastleCertX509AttributeCertificateHolder;
@protocol JavaUtilCollection;

/*!
 @brief This class is an <code>Selector</code> like implementation to select
  attribute certificates from a given set of criteria.
 */
@interface OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector : NSObject < OrgBouncycastleUtilSelector >

#pragma mark Public

/*!
 @brief Returns a clone of this object.
 @return the clone.
 */
- (id)java_clone;

/*!
 @brief Returns the attribute certificate holder which must be matched.
 @return Returns an X509AttributeCertificateHolder
 */
- (OrgBouncycastleCertX509AttributeCertificateHolder *)getAttributeCert;

/*!
 @brief Get the criteria for the validity.
 @return Returns the attributeCertificateValid.
 */
- (JavaUtilDate *)getAttributeCertificateValid;

/*!
 @brief Gets the holder.
 @return Returns the holder.
 */
- (OrgBouncycastleCertAttributeCertificateHolder *)getHolder;

/*!
 @brief Returns the issuer criterion.
 @return Returns the issuer.
 */
- (OrgBouncycastleCertAttributeCertificateIssuer *)getIssuer;

/*!
 @brief Gets the serial number the attribute certificate must have.
 @return Returns the serialNumber.
 */
- (JavaMathBigInteger *)getSerialNumber;

/*!
 @brief Gets the target groups.The collection consists of GeneralName objects.
 <p>
  The returned collection is immutable.
 @return The collection of target groups.
 */
- (id<JavaUtilCollection>)getTargetGroups;

/*!
 @brief Gets the target names.The collection consists of GeneralName objects.
 <p>
  The returned collection is immutable.
 @return The collection of target names
 */
- (id<JavaUtilCollection>)getTargetNames;

/*!
 @brief Decides if the given attribute certificate should be selected.
 @param obj The X509AttributeCertificateHolder which should be checked.
 @return <code>true</code> if the attribute certificate is a match
          <code>false</code> otherwise.
 */
- (jboolean)matchWithId:(id)obj;

#pragma mark Package-Private

- (instancetype)initWithOrgBouncycastleCertAttributeCertificateHolder:(OrgBouncycastleCertAttributeCertificateHolder *)holder
                    withOrgBouncycastleCertAttributeCertificateIssuer:(OrgBouncycastleCertAttributeCertificateIssuer *)issuer
                                               withJavaMathBigInteger:(JavaMathBigInteger *)serialNumber
                                                     withJavaUtilDate:(JavaUtilDate *)attributeCertificateValid
                withOrgBouncycastleCertX509AttributeCertificateHolder:(OrgBouncycastleCertX509AttributeCertificateHolder *)attributeCert
                                               withJavaUtilCollection:(id<JavaUtilCollection>)targetNames
                                               withJavaUtilCollection:(id<JavaUtilCollection>)targetGroups;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector)

FOUNDATION_EXPORT void OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector_initWithOrgBouncycastleCertAttributeCertificateHolder_withOrgBouncycastleCertAttributeCertificateIssuer_withJavaMathBigInteger_withJavaUtilDate_withOrgBouncycastleCertX509AttributeCertificateHolder_withJavaUtilCollection_withJavaUtilCollection_(OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector *self, OrgBouncycastleCertAttributeCertificateHolder *holder, OrgBouncycastleCertAttributeCertificateIssuer *issuer, JavaMathBigInteger *serialNumber, JavaUtilDate *attributeCertificateValid, OrgBouncycastleCertX509AttributeCertificateHolder *attributeCert, id<JavaUtilCollection> targetNames, id<JavaUtilCollection> targetGroups);

FOUNDATION_EXPORT OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector *new_OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector_initWithOrgBouncycastleCertAttributeCertificateHolder_withOrgBouncycastleCertAttributeCertificateIssuer_withJavaMathBigInteger_withJavaUtilDate_withOrgBouncycastleCertX509AttributeCertificateHolder_withJavaUtilCollection_withJavaUtilCollection_(OrgBouncycastleCertAttributeCertificateHolder *holder, OrgBouncycastleCertAttributeCertificateIssuer *issuer, JavaMathBigInteger *serialNumber, JavaUtilDate *attributeCertificateValid, OrgBouncycastleCertX509AttributeCertificateHolder *attributeCert, id<JavaUtilCollection> targetNames, id<JavaUtilCollection> targetGroups) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector *create_OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector_initWithOrgBouncycastleCertAttributeCertificateHolder_withOrgBouncycastleCertAttributeCertificateIssuer_withJavaMathBigInteger_withJavaUtilDate_withOrgBouncycastleCertX509AttributeCertificateHolder_withJavaUtilCollection_withJavaUtilCollection_(OrgBouncycastleCertAttributeCertificateHolder *holder, OrgBouncycastleCertAttributeCertificateIssuer *issuer, JavaMathBigInteger *serialNumber, JavaUtilDate *attributeCertificateValid, OrgBouncycastleCertX509AttributeCertificateHolder *attributeCert, id<JavaUtilCollection> targetNames, id<JavaUtilCollection> targetGroups);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector")
