//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cert/selector/X509CertificateHolderSelector.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCertSelectorX509CertificateHolderSelector")
#ifdef RESTRICT_OrgBouncycastleCertSelectorX509CertificateHolderSelector
#define INCLUDE_ALL_OrgBouncycastleCertSelectorX509CertificateHolderSelector 0
#else
#define INCLUDE_ALL_OrgBouncycastleCertSelectorX509CertificateHolderSelector 1
#endif
#undef RESTRICT_OrgBouncycastleCertSelectorX509CertificateHolderSelector

#if !defined (OrgBouncycastleCertSelectorX509CertificateHolderSelector_) && (INCLUDE_ALL_OrgBouncycastleCertSelectorX509CertificateHolderSelector || defined(INCLUDE_OrgBouncycastleCertSelectorX509CertificateHolderSelector))
#define OrgBouncycastleCertSelectorX509CertificateHolderSelector_

#define RESTRICT_OrgBouncycastleUtilSelector 1
#define INCLUDE_OrgBouncycastleUtilSelector 1
#include "org/bouncycastle/util/Selector.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class OrgBouncycastleAsn1X500X500Name;

/*!
 @brief a basic index for a X509CertificateHolder class
 */
@interface OrgBouncycastleCertSelectorX509CertificateHolderSelector : NSObject < OrgBouncycastleUtilSelector >

#pragma mark Public

/*!
 @brief Construct a selector with the value of a public key's subjectKeyId.
 @param subjectKeyId a subjectKeyId
 */
- (instancetype)initWithByteArray:(IOSByteArray *)subjectKeyId;

/*!
 @brief Construct a signer ID based on the issuer and serial number of the signer's associated
  certificate.
 @param issuer the issuer of the signer's associated certificate.
 @param serialNumber the serial number of the signer's associated certificate.
 */
- (instancetype)initWithOrgBouncycastleAsn1X500X500Name:(OrgBouncycastleAsn1X500X500Name *)issuer
                                 withJavaMathBigInteger:(JavaMathBigInteger *)serialNumber;

/*!
 @brief Construct a signer ID based on the issuer and serial number of the signer's associated
  certificate.
 @param issuer the issuer of the signer's associated certificate.
 @param serialNumber the serial number of the signer's associated certificate.
 @param subjectKeyId the subject key identifier to use to match the signers associated certificate.
 */
- (instancetype)initWithOrgBouncycastleAsn1X500X500Name:(OrgBouncycastleAsn1X500X500Name *)issuer
                                 withJavaMathBigInteger:(JavaMathBigInteger *)serialNumber
                                          withByteArray:(IOSByteArray *)subjectKeyId;

- (id)java_clone;

- (jboolean)isEqual:(id)o;

- (OrgBouncycastleAsn1X500X500Name *)getIssuer;

- (JavaMathBigInteger *)getSerialNumber;

- (IOSByteArray *)getSubjectKeyIdentifier;

- (NSUInteger)hash;

- (jboolean)matchWithId:(id)obj;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCertSelectorX509CertificateHolderSelector)

FOUNDATION_EXPORT void OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithByteArray_(OrgBouncycastleCertSelectorX509CertificateHolderSelector *self, IOSByteArray *subjectKeyId);

FOUNDATION_EXPORT OrgBouncycastleCertSelectorX509CertificateHolderSelector *new_OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithByteArray_(IOSByteArray *subjectKeyId) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCertSelectorX509CertificateHolderSelector *create_OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithByteArray_(IOSByteArray *subjectKeyId);

FOUNDATION_EXPORT void OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_(OrgBouncycastleCertSelectorX509CertificateHolderSelector *self, OrgBouncycastleAsn1X500X500Name *issuer, JavaMathBigInteger *serialNumber);

FOUNDATION_EXPORT OrgBouncycastleCertSelectorX509CertificateHolderSelector *new_OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_(OrgBouncycastleAsn1X500X500Name *issuer, JavaMathBigInteger *serialNumber) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCertSelectorX509CertificateHolderSelector *create_OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_(OrgBouncycastleAsn1X500X500Name *issuer, JavaMathBigInteger *serialNumber);

FOUNDATION_EXPORT void OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_withByteArray_(OrgBouncycastleCertSelectorX509CertificateHolderSelector *self, OrgBouncycastleAsn1X500X500Name *issuer, JavaMathBigInteger *serialNumber, IOSByteArray *subjectKeyId);

FOUNDATION_EXPORT OrgBouncycastleCertSelectorX509CertificateHolderSelector *new_OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_withByteArray_(OrgBouncycastleAsn1X500X500Name *issuer, JavaMathBigInteger *serialNumber, IOSByteArray *subjectKeyId) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCertSelectorX509CertificateHolderSelector *create_OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_withByteArray_(OrgBouncycastleAsn1X500X500Name *issuer, JavaMathBigInteger *serialNumber, IOSByteArray *subjectKeyId);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCertSelectorX509CertificateHolderSelector)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCertSelectorX509CertificateHolderSelector")
