//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cert/selector/X509CertificateHolderSelector.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1OctetString.h"
#include "org/bouncycastle/asn1/cms/IssuerAndSerialNumber.h"
#include "org/bouncycastle/asn1/x500/X500Name.h"
#include "org/bouncycastle/asn1/x509/Certificate.h"
#include "org/bouncycastle/asn1/x509/Extension.h"
#include "org/bouncycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/bouncycastle/cert/X509CertificateHolder.h"
#include "org/bouncycastle/cert/selector/MSOutlookKeyIdCalculator.h"
#include "org/bouncycastle/cert/selector/X509CertificateHolderSelector.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/cert/selector/X509CertificateHolderSelector must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCertSelectorX509CertificateHolderSelector () {
 @public
  IOSByteArray *subjectKeyId_;
  OrgBouncycastleAsn1X500X500Name *issuer_;
  JavaMathBigInteger *serialNumber_;
}

- (jboolean)equalsObjWithId:(id)a
                     withId:(id)b;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCertSelectorX509CertificateHolderSelector, subjectKeyId_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCertSelectorX509CertificateHolderSelector, issuer_, OrgBouncycastleAsn1X500X500Name *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCertSelectorX509CertificateHolderSelector, serialNumber_, JavaMathBigInteger *)

__attribute__((unused)) static jboolean OrgBouncycastleCertSelectorX509CertificateHolderSelector_equalsObjWithId_withId_(OrgBouncycastleCertSelectorX509CertificateHolderSelector *self, id a, id b);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cert/selector/X509CertificateHolderSelector.java"


#line 16
@implementation OrgBouncycastleCertSelectorX509CertificateHolderSelector


#line 29
- (instancetype)initWithByteArray:(IOSByteArray *)subjectKeyId {
  OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithByteArray_(self, subjectKeyId);
  return self;
}


#line 41
- (instancetype)initWithOrgBouncycastleAsn1X500X500Name:(OrgBouncycastleAsn1X500X500Name *)issuer
                                 withJavaMathBigInteger:(JavaMathBigInteger *)serialNumber {
  OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_(self, issuer, serialNumber);
  return self;
}


#line 54
- (instancetype)initWithOrgBouncycastleAsn1X500X500Name:(OrgBouncycastleAsn1X500X500Name *)issuer
                                 withJavaMathBigInteger:(JavaMathBigInteger *)serialNumber
                                          withByteArray:(IOSByteArray *)subjectKeyId {
  OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_withByteArray_(self, issuer, serialNumber, subjectKeyId);
  return self;
}

- (OrgBouncycastleAsn1X500X500Name *)getIssuer {
  
#line 63
  return issuer_;
}


#line 66
- (JavaMathBigInteger *)getSerialNumber {
  
#line 68
  return serialNumber_;
}


#line 71
- (IOSByteArray *)getSubjectKeyIdentifier {
  
#line 73
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(subjectKeyId_);
}


#line 76
- (NSUInteger)hash {
  
#line 79
  jint code = OrgBouncycastleUtilArrays_hashCodeWithByteArray_(subjectKeyId_);
  
#line 81
  if (self->serialNumber_ != nil) {
    
#line 83
    code ^= ((jint) [self->serialNumber_ hash]);
  }
  
#line 86
  if (self->issuer_ != nil) {
    
#line 88
    code ^= ((jint) [self->issuer_ hash]);
  }
  
#line 91
  return code;
}


#line 94
- (jboolean)isEqual:(id)o {
  
#line 98
  if (!([o isKindOfClass:[OrgBouncycastleCertSelectorX509CertificateHolderSelector class]])) {
    
#line 100
    return false;
  }
  
#line 103
  OrgBouncycastleCertSelectorX509CertificateHolderSelector *id_ = (OrgBouncycastleCertSelectorX509CertificateHolderSelector *) cast_chk(o, [OrgBouncycastleCertSelectorX509CertificateHolderSelector class]);
  
#line 105
  return OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(subjectKeyId_, ((OrgBouncycastleCertSelectorX509CertificateHolderSelector *) nil_chk(id_))->subjectKeyId_) && OrgBouncycastleCertSelectorX509CertificateHolderSelector_equalsObjWithId_withId_(self,
#line 106
  self->serialNumber_, id_->serialNumber_) && OrgBouncycastleCertSelectorX509CertificateHolderSelector_equalsObjWithId_withId_(self,
#line 107
  self->issuer_, id_->issuer_);
}


#line 110
- (jboolean)equalsObjWithId:(id)a
                     withId:(id)b {
  return OrgBouncycastleCertSelectorX509CertificateHolderSelector_equalsObjWithId_withId_(self, a, b);
}

- (jboolean)matchWithId:(id)obj {
  
#line 118
  if ([obj isKindOfClass:[OrgBouncycastleCertX509CertificateHolder class]]) {
    
#line 120
    OrgBouncycastleCertX509CertificateHolder *certHldr = (OrgBouncycastleCertX509CertificateHolder *) obj;
    
#line 122
    if ([self getSerialNumber] != nil) {
      
#line 124
      OrgBouncycastleAsn1CmsIssuerAndSerialNumber *iAndS = new_OrgBouncycastleAsn1CmsIssuerAndSerialNumber_initWithOrgBouncycastleAsn1X509Certificate_([((OrgBouncycastleCertX509CertificateHolder *) nil_chk(certHldr)) toASN1Structure]);
      
#line 126
      return [((OrgBouncycastleAsn1X500X500Name *) nil_chk([iAndS getName])) isEqual:self->issuer_] &&
#line 127
      [((OrgBouncycastleAsn1ASN1Integer *) nil_chk([iAndS getSerialNumber])) hasValueWithJavaMathBigInteger:self->serialNumber_];
    }
    else if (subjectKeyId_ != nil) {
      
#line 131
      OrgBouncycastleAsn1X509Extension *ext = [((OrgBouncycastleCertX509CertificateHolder *) nil_chk(certHldr)) getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgBouncycastleAsn1X509Extension, subjectKeyIdentifier)];
      
#line 133
      if (ext == nil) {
        
#line 135
        return OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(subjectKeyId_, OrgBouncycastleCertSelectorMSOutlookKeyIdCalculator_calculateKeyIdWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_([certHldr getSubjectPublicKeyInfo]));
      }
      
#line 138
      IOSByteArray *subKeyID = [((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(OrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([ext getParsedValue]))) getOctets];
      
#line 140
      return OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(subjectKeyId_, subKeyID);
    }
  }
  else if ([obj isKindOfClass:[IOSByteArray class]]) {
    
#line 145
    return OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(subjectKeyId_, (IOSByteArray *) cast_chk(obj, [IOSByteArray class]));
  }
  
#line 148
  return false;
}


#line 151
- (id)java_clone {
  
#line 154
  return new_OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_withByteArray_(self->issuer_, self->serialNumber_, self->subjectKeyId_);
}

- (id)clone {
  return [self java_clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(initWithOrgBouncycastleAsn1X500X500Name:withJavaMathBigInteger:);
  methods[2].selector = @selector(initWithOrgBouncycastleAsn1X500X500Name:withJavaMathBigInteger:withByteArray:);
  methods[3].selector = @selector(getIssuer);
  methods[4].selector = @selector(getSerialNumber);
  methods[5].selector = @selector(getSubjectKeyIdentifier);
  methods[6].selector = @selector(hash);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(equalsObjWithId:withId:);
  methods[9].selector = @selector(matchWithId:);
  methods[10].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "subjectKeyId_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "issuer_", "LOrgBouncycastleAsn1X500X500Name;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "serialNumber_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "LOrgBouncycastleAsn1X500X500Name;LJavaMathBigInteger;", "LOrgBouncycastleAsn1X500X500Name;LJavaMathBigInteger;[B", "hashCode", "equals", "LNSObject;", "equalsObj", "LNSObject;LNSObject;", "match", "clone" };
  static const J2ObjcClassInfo _OrgBouncycastleCertSelectorX509CertificateHolderSelector = { "X509CertificateHolderSelector", "org.bouncycastle.cert.selector", ptrTable, methods, fields, 7, 0x1, 11, 3, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCertSelectorX509CertificateHolderSelector;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end


#line 29
void OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithByteArray_(OrgBouncycastleCertSelectorX509CertificateHolderSelector *self, IOSByteArray *subjectKeyId) {
  OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_withByteArray_(self,
#line 31
  nil, nil, subjectKeyId);
}


#line 29
OrgBouncycastleCertSelectorX509CertificateHolderSelector *new_OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithByteArray_(IOSByteArray *subjectKeyId) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCertSelectorX509CertificateHolderSelector, initWithByteArray_, subjectKeyId)
}


#line 29
OrgBouncycastleCertSelectorX509CertificateHolderSelector *create_OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithByteArray_(IOSByteArray *subjectKeyId) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCertSelectorX509CertificateHolderSelector, initWithByteArray_, subjectKeyId)
}


#line 41
void OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_(OrgBouncycastleCertSelectorX509CertificateHolderSelector *self, OrgBouncycastleAsn1X500X500Name *issuer, JavaMathBigInteger *serialNumber) {
  OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_withByteArray_(self,
#line 43
  issuer, serialNumber, nil);
}


#line 41
OrgBouncycastleCertSelectorX509CertificateHolderSelector *new_OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_(OrgBouncycastleAsn1X500X500Name *issuer, JavaMathBigInteger *serialNumber) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCertSelectorX509CertificateHolderSelector, initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_, issuer, serialNumber)
}


#line 41
OrgBouncycastleCertSelectorX509CertificateHolderSelector *create_OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_(OrgBouncycastleAsn1X500X500Name *issuer, JavaMathBigInteger *serialNumber) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCertSelectorX509CertificateHolderSelector, initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_, issuer, serialNumber)
}


#line 54
void OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_withByteArray_(OrgBouncycastleCertSelectorX509CertificateHolderSelector *self, OrgBouncycastleAsn1X500X500Name *issuer, JavaMathBigInteger *serialNumber, IOSByteArray *subjectKeyId) {
  NSObject_init(self);
  self->issuer_ = issuer;
  self->serialNumber_ = serialNumber;
  self->subjectKeyId_ = subjectKeyId;
}


#line 54
OrgBouncycastleCertSelectorX509CertificateHolderSelector *new_OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_withByteArray_(OrgBouncycastleAsn1X500X500Name *issuer, JavaMathBigInteger *serialNumber, IOSByteArray *subjectKeyId) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCertSelectorX509CertificateHolderSelector, initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_withByteArray_, issuer, serialNumber, subjectKeyId)
}


#line 54
OrgBouncycastleCertSelectorX509CertificateHolderSelector *create_OrgBouncycastleCertSelectorX509CertificateHolderSelector_initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_withByteArray_(OrgBouncycastleAsn1X500X500Name *issuer, JavaMathBigInteger *serialNumber, IOSByteArray *subjectKeyId) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCertSelectorX509CertificateHolderSelector, initWithOrgBouncycastleAsn1X500X500Name_withJavaMathBigInteger_withByteArray_, issuer, serialNumber, subjectKeyId)
}


#line 110
jboolean OrgBouncycastleCertSelectorX509CertificateHolderSelector_equalsObjWithId_withId_(OrgBouncycastleCertSelectorX509CertificateHolderSelector *self, id a, id b) {
  
#line 112
  return (a != nil) ? [nil_chk(a) isEqual:b] : b == nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCertSelectorX509CertificateHolderSelector)
