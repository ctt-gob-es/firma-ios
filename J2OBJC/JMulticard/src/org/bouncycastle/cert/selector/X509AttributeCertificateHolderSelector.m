//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cert/selector/X509AttributeCertificateHolderSelector.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/x509/Extension.h"
#include "org/bouncycastle/asn1/x509/GeneralName.h"
#include "org/bouncycastle/asn1/x509/Target.h"
#include "org/bouncycastle/asn1/x509/TargetInformation.h"
#include "org/bouncycastle/asn1/x509/Targets.h"
#include "org/bouncycastle/cert/AttributeCertificateHolder.h"
#include "org/bouncycastle/cert/AttributeCertificateIssuer.h"
#include "org/bouncycastle/cert/X509AttributeCertificateHolder.h"
#include "org/bouncycastle/cert/selector/X509AttributeCertificateHolderSelector.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/cert/selector/X509AttributeCertificateHolderSelector must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector () {
 @public
  OrgBouncycastleCertAttributeCertificateHolder *holder_;
  OrgBouncycastleCertAttributeCertificateIssuer *issuer_;
  JavaMathBigInteger *serialNumber_;
  JavaUtilDate *attributeCertificateValid_;
  OrgBouncycastleCertX509AttributeCertificateHolder *attributeCert_;
  id<JavaUtilCollection> targetNames_;
  id<JavaUtilCollection> targetGroups_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector, holder_, OrgBouncycastleCertAttributeCertificateHolder *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector, issuer_, OrgBouncycastleCertAttributeCertificateIssuer *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector, serialNumber_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector, attributeCertificateValid_, JavaUtilDate *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector, attributeCert_, OrgBouncycastleCertX509AttributeCertificateHolder *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector, targetNames_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector, targetGroups_, id<JavaUtilCollection>)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cert/selector/X509AttributeCertificateHolderSelector.java"


#line 21
@implementation OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector


#line 41
- (instancetype)initWithOrgBouncycastleCertAttributeCertificateHolder:(OrgBouncycastleCertAttributeCertificateHolder *)holder
                    withOrgBouncycastleCertAttributeCertificateIssuer:(OrgBouncycastleCertAttributeCertificateIssuer *)issuer
                                               withJavaMathBigInteger:(JavaMathBigInteger *)serialNumber
                                                     withJavaUtilDate:(JavaUtilDate *)attributeCertificateValid
                withOrgBouncycastleCertX509AttributeCertificateHolder:(OrgBouncycastleCertX509AttributeCertificateHolder *)attributeCert
                                               withJavaUtilCollection:(id<JavaUtilCollection>)targetNames
                                               withJavaUtilCollection:(id<JavaUtilCollection>)targetGroups {
  OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector_initWithOrgBouncycastleCertAttributeCertificateHolder_withOrgBouncycastleCertAttributeCertificateIssuer_withJavaMathBigInteger_withJavaUtilDate_withOrgBouncycastleCertX509AttributeCertificateHolder_withJavaUtilCollection_withJavaUtilCollection_(self, holder, issuer, serialNumber, attributeCertificateValid, attributeCert, targetNames, targetGroups);
  return self;
}


#line 66
- (jboolean)matchWithId:(id)obj {
  
#line 69
  if (!([obj isKindOfClass:[OrgBouncycastleCertX509AttributeCertificateHolder class]])) {
    
#line 71
    return false;
  }
  
#line 74
  OrgBouncycastleCertX509AttributeCertificateHolder *attrCert = (OrgBouncycastleCertX509AttributeCertificateHolder *) cast_chk(obj, [OrgBouncycastleCertX509AttributeCertificateHolder class]);
  
#line 76
  if (self->attributeCert_ != nil) {
    
#line 78
    if (![self->attributeCert_ isEqual:attrCert]) {
      
#line 80
      return false;
    }
  }
  if (serialNumber_ != nil) {
    
#line 85
    if (![((JavaMathBigInteger *) nil_chk([((OrgBouncycastleCertX509AttributeCertificateHolder *) nil_chk(attrCert)) getSerialNumber])) isEqual:serialNumber_]) {
      
#line 87
      return false;
    }
  }
  if (holder_ != nil) {
    
#line 92
    if (![((OrgBouncycastleCertAttributeCertificateHolder *) nil_chk([((OrgBouncycastleCertX509AttributeCertificateHolder *) nil_chk(attrCert)) getHolder])) isEqual:holder_]) {
      
#line 94
      return false;
    }
  }
  if (issuer_ != nil) {
    
#line 99
    if (![((OrgBouncycastleCertAttributeCertificateIssuer *) nil_chk([((OrgBouncycastleCertX509AttributeCertificateHolder *) nil_chk(attrCert)) getIssuer])) isEqual:issuer_]) {
      
#line 101
      return false;
    }
  }
  
#line 105
  if (attributeCertificateValid_ != nil) {
    
#line 107
    if (![((OrgBouncycastleCertX509AttributeCertificateHolder *) nil_chk(attrCert)) isValidOnWithJavaUtilDate:attributeCertificateValid_]) {
      
#line 109
      return false;
    }
  }
  if (![((id<JavaUtilCollection>) nil_chk(targetNames_)) isEmpty] || ![((id<JavaUtilCollection>) nil_chk(targetGroups_)) isEmpty]) {
    
#line 114
    OrgBouncycastleAsn1X509Extension *targetInfoExt = [((OrgBouncycastleCertX509AttributeCertificateHolder *) nil_chk(attrCert)) getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgBouncycastleAsn1X509Extension, targetInformation)];
    if (targetInfoExt != nil) {
      
#line 117
      OrgBouncycastleAsn1X509TargetInformation *targetinfo;
      @try {
        
#line 120
        targetinfo = OrgBouncycastleAsn1X509TargetInformation_getInstanceWithId_([targetInfoExt getParsedValue]);
      }
      @catch (JavaLangIllegalArgumentException *e) {
        
#line 124
        return false;
      }
      IOSObjectArray *targetss = [((OrgBouncycastleAsn1X509TargetInformation *) nil_chk(targetinfo)) getTargetsObjects];
      if (![targetNames_ isEmpty]) {
        
#line 129
        jboolean found = false;
        
#line 131
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk(targetss))->size_; i++) {
          
#line 133
          OrgBouncycastleAsn1X509Targets *t = IOSObjectArray_Get(targetss, i);
          IOSObjectArray *targets = [((OrgBouncycastleAsn1X509Targets *) nil_chk(t)) getTargets];
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(targets))->size_; j++) {
            
#line 137
            if ([targetNames_ containsWithId:OrgBouncycastleAsn1X509GeneralName_getInstanceWithId_([((OrgBouncycastleAsn1X509Target *) nil_chk(IOSObjectArray_Get(targets, j))) getTargetName])]) {
              
#line 140
              found = true;
              break;
            }
          }
        }
        if (!found) {
          
#line 147
          return false;
        }
      }
      if (![((id<JavaUtilCollection>) nil_chk(targetGroups_)) isEmpty]) {
        
#line 152
        jboolean found = false;
        
#line 154
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk(targetss))->size_; i++) {
          
#line 156
          OrgBouncycastleAsn1X509Targets *t = IOSObjectArray_Get(targetss, i);
          IOSObjectArray *targets = [((OrgBouncycastleAsn1X509Targets *) nil_chk(t)) getTargets];
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(targets))->size_; j++) {
            
#line 160
            if ([targetGroups_ containsWithId:OrgBouncycastleAsn1X509GeneralName_getInstanceWithId_([((OrgBouncycastleAsn1X509Target *) nil_chk(IOSObjectArray_Get(targets, j))) getTargetGroup])]) {
              
#line 163
              found = true;
              break;
            }
          }
        }
        if (!found) {
          
#line 170
          return false;
        }
      }
    }
  }
  return true;
}


#line 183
- (id)java_clone {
  
#line 186
  OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector *sel = new_OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector_initWithOrgBouncycastleCertAttributeCertificateHolder_withOrgBouncycastleCertAttributeCertificateIssuer_withJavaMathBigInteger_withJavaUtilDate_withOrgBouncycastleCertX509AttributeCertificateHolder_withJavaUtilCollection_withJavaUtilCollection_(
#line 187
  holder_, issuer_, serialNumber_, attributeCertificateValid_, attributeCert_, targetNames_, targetGroups_);
  
#line 189
  return sel;
}


#line 197
- (OrgBouncycastleCertX509AttributeCertificateHolder *)getAttributeCert {
  
#line 199
  return attributeCert_;
}


#line 207
- (JavaUtilDate *)getAttributeCertificateValid {
  
#line 209
  if (attributeCertificateValid_ != nil) {
    
#line 211
    return new_JavaUtilDate_initWithLong_([attributeCertificateValid_ getTime]);
  }
  
#line 214
  return nil;
}


#line 222
- (OrgBouncycastleCertAttributeCertificateHolder *)getHolder {
  
#line 224
  return holder_;
}


#line 232
- (OrgBouncycastleCertAttributeCertificateIssuer *)getIssuer {
  
#line 234
  return issuer_;
}


#line 242
- (JavaMathBigInteger *)getSerialNumber {
  
#line 244
  return serialNumber_;
}


#line 254
- (id<JavaUtilCollection>)getTargetNames {
  
#line 256
  return targetNames_;
}


#line 266
- (id<JavaUtilCollection>)getTargetGroups {
  
#line 268
  return targetGroups_;
}

- (id)clone {
  return [self java_clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCertX509AttributeCertificateHolder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCertAttributeCertificateHolder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCertAttributeCertificateIssuer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleCertAttributeCertificateHolder:withOrgBouncycastleCertAttributeCertificateIssuer:withJavaMathBigInteger:withJavaUtilDate:withOrgBouncycastleCertX509AttributeCertificateHolder:withJavaUtilCollection:withJavaUtilCollection:);
  methods[1].selector = @selector(matchWithId:);
  methods[2].selector = @selector(java_clone);
  methods[3].selector = @selector(getAttributeCert);
  methods[4].selector = @selector(getAttributeCertificateValid);
  methods[5].selector = @selector(getHolder);
  methods[6].selector = @selector(getIssuer);
  methods[7].selector = @selector(getSerialNumber);
  methods[8].selector = @selector(getTargetNames);
  methods[9].selector = @selector(getTargetGroups);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "holder_", "LOrgBouncycastleCertAttributeCertificateHolder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "issuer_", "LOrgBouncycastleCertAttributeCertificateIssuer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serialNumber_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "attributeCertificateValid_", "LJavaUtilDate;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "attributeCert_", "LOrgBouncycastleCertX509AttributeCertificateHolder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "targetNames_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "targetGroups_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleCertAttributeCertificateHolder;LOrgBouncycastleCertAttributeCertificateIssuer;LJavaMathBigInteger;LJavaUtilDate;LOrgBouncycastleCertX509AttributeCertificateHolder;LJavaUtilCollection;LJavaUtilCollection;", "match", "LNSObject;", "clone" };
  static const J2ObjcClassInfo _OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector = { "X509AttributeCertificateHolderSelector", "org.bouncycastle.cert.selector", ptrTable, methods, fields, 7, 0x1, 10, 7, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end


#line 41
void OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector_initWithOrgBouncycastleCertAttributeCertificateHolder_withOrgBouncycastleCertAttributeCertificateIssuer_withJavaMathBigInteger_withJavaUtilDate_withOrgBouncycastleCertX509AttributeCertificateHolder_withJavaUtilCollection_withJavaUtilCollection_(OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector *self, OrgBouncycastleCertAttributeCertificateHolder *holder, OrgBouncycastleCertAttributeCertificateIssuer *issuer, JavaMathBigInteger *serialNumber, JavaUtilDate *attributeCertificateValid, OrgBouncycastleCertX509AttributeCertificateHolder *attributeCert, id<JavaUtilCollection> targetNames, id<JavaUtilCollection> targetGroups) {
  NSObject_init(self);
  
#line 50
  self->holder_ = holder;
  self->issuer_ = issuer;
  self->serialNumber_ = serialNumber;
  self->attributeCertificateValid_ = attributeCertificateValid;
  self->attributeCert_ = attributeCert;
  self->targetNames_ = targetNames;
  self->targetGroups_ = targetGroups;
}


#line 41
OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector *new_OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector_initWithOrgBouncycastleCertAttributeCertificateHolder_withOrgBouncycastleCertAttributeCertificateIssuer_withJavaMathBigInteger_withJavaUtilDate_withOrgBouncycastleCertX509AttributeCertificateHolder_withJavaUtilCollection_withJavaUtilCollection_(OrgBouncycastleCertAttributeCertificateHolder *holder, OrgBouncycastleCertAttributeCertificateIssuer *issuer, JavaMathBigInteger *serialNumber, JavaUtilDate *attributeCertificateValid, OrgBouncycastleCertX509AttributeCertificateHolder *attributeCert, id<JavaUtilCollection> targetNames, id<JavaUtilCollection> targetGroups) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector, initWithOrgBouncycastleCertAttributeCertificateHolder_withOrgBouncycastleCertAttributeCertificateIssuer_withJavaMathBigInteger_withJavaUtilDate_withOrgBouncycastleCertX509AttributeCertificateHolder_withJavaUtilCollection_withJavaUtilCollection_, holder, issuer, serialNumber, attributeCertificateValid, attributeCert, targetNames, targetGroups)
}


#line 41
OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector *create_OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector_initWithOrgBouncycastleCertAttributeCertificateHolder_withOrgBouncycastleCertAttributeCertificateIssuer_withJavaMathBigInteger_withJavaUtilDate_withOrgBouncycastleCertX509AttributeCertificateHolder_withJavaUtilCollection_withJavaUtilCollection_(OrgBouncycastleCertAttributeCertificateHolder *holder, OrgBouncycastleCertAttributeCertificateIssuer *issuer, JavaMathBigInteger *serialNumber, JavaUtilDate *attributeCertificateValid, OrgBouncycastleCertX509AttributeCertificateHolder *attributeCert, id<JavaUtilCollection> targetNames, id<JavaUtilCollection> targetGroups) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector, initWithOrgBouncycastleCertAttributeCertificateHolder_withOrgBouncycastleCertAttributeCertificateIssuer_withJavaMathBigInteger_withJavaUtilDate_withOrgBouncycastleCertX509AttributeCertificateHolder_withJavaUtilCollection_withJavaUtilCollection_, holder, issuer, serialNumber, attributeCertificateValid, attributeCert, targetNames, targetGroups)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCertSelectorX509AttributeCertificateHolderSelector)
