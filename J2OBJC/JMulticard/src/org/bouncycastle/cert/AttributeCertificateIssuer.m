//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cert/AttributeCertificateIssuer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/x500/X500Name.h"
#include "org/bouncycastle/asn1/x509/AttCertIssuer.h"
#include "org/bouncycastle/asn1/x509/GeneralName.h"
#include "org/bouncycastle/asn1/x509/GeneralNames.h"
#include "org/bouncycastle/asn1/x509/IssuerSerial.h"
#include "org/bouncycastle/asn1/x509/V2Form.h"
#include "org/bouncycastle/cert/AttributeCertificateIssuer.h"
#include "org/bouncycastle/cert/X509CertificateHolder.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/cert/AttributeCertificateIssuer must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCertAttributeCertificateIssuer ()

- (jboolean)matchesDNWithOrgBouncycastleAsn1X500X500Name:(OrgBouncycastleAsn1X500X500Name *)subject
                 withOrgBouncycastleAsn1X509GeneralNames:(OrgBouncycastleAsn1X509GeneralNames *)targets;

@end

__attribute__((unused)) static jboolean OrgBouncycastleCertAttributeCertificateIssuer_matchesDNWithOrgBouncycastleAsn1X500X500Name_withOrgBouncycastleAsn1X509GeneralNames_(OrgBouncycastleCertAttributeCertificateIssuer *self, OrgBouncycastleAsn1X500X500Name *subject, OrgBouncycastleAsn1X509GeneralNames *targets);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cert/AttributeCertificateIssuer.java"


#line 17
@implementation OrgBouncycastleCertAttributeCertificateIssuer


#line 27
- (instancetype)initWithOrgBouncycastleAsn1X509AttCertIssuer:(OrgBouncycastleAsn1X509AttCertIssuer *)issuer {
  OrgBouncycastleCertAttributeCertificateIssuer_initWithOrgBouncycastleAsn1X509AttCertIssuer_(self, issuer);
  return self;
}

- (instancetype)initWithOrgBouncycastleAsn1X500X500Name:(OrgBouncycastleAsn1X500X500Name *)principal {
  OrgBouncycastleCertAttributeCertificateIssuer_initWithOrgBouncycastleAsn1X500X500Name_(self, principal);
  return self;
}

- (IOSObjectArray *)getNames {
  
#line 39
  OrgBouncycastleAsn1X509GeneralNames *name;
  
#line 41
  if ([form_ isKindOfClass:[OrgBouncycastleAsn1X509V2Form class]]) {
    
#line 43
    name = [((OrgBouncycastleAsn1X509V2Form *) nil_chk(((OrgBouncycastleAsn1X509V2Form *) form_))) getIssuerName];
  }
  else {
    
#line 47
    name = (OrgBouncycastleAsn1X509GeneralNames *) cast_chk(form_, [OrgBouncycastleAsn1X509GeneralNames class]);
  }
  
#line 50
  IOSObjectArray *names = [((OrgBouncycastleAsn1X509GeneralNames *) nil_chk(name)) getNames];
  
#line 52
  id<JavaUtilList> l = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(names))->size_);
  
#line 54
  for (jint i = 0; i != names->size_; i++) {
    
#line 56
    if ([((OrgBouncycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(names, i))) getTagNo] == OrgBouncycastleAsn1X509GeneralName_directoryName) {
      
#line 58
      [l addWithId:OrgBouncycastleAsn1X500X500Name_getInstanceWithId_([((OrgBouncycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(names, i))) getName])];
    }
  }
  
#line 62
  return (IOSObjectArray *) cast_check([l toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[l size] type:OrgBouncycastleAsn1X500X500Name_class_()]], IOSClass_arrayType(OrgBouncycastleAsn1X500X500Name_class_(), 1));
}


#line 65
- (jboolean)matchesDNWithOrgBouncycastleAsn1X500X500Name:(OrgBouncycastleAsn1X500X500Name *)subject
                 withOrgBouncycastleAsn1X509GeneralNames:(OrgBouncycastleAsn1X509GeneralNames *)targets {
  return OrgBouncycastleCertAttributeCertificateIssuer_matchesDNWithOrgBouncycastleAsn1X500X500Name_withOrgBouncycastleAsn1X509GeneralNames_(self, subject, targets);
}


#line 85
- (id)java_clone {
  
#line 88
  return new_OrgBouncycastleCertAttributeCertificateIssuer_initWithOrgBouncycastleAsn1X509AttCertIssuer_(OrgBouncycastleAsn1X509AttCertIssuer_getInstanceWithId_(form_));
}

- (jboolean)isEqual:(id)obj {
  
#line 94
  if (JreObjectEqualsEquals(obj, self)) {
    
#line 96
    return true;
  }
  
#line 99
  if (!([obj isKindOfClass:[OrgBouncycastleCertAttributeCertificateIssuer class]])) {
    
#line 101
    return false;
  }
  
#line 104
  OrgBouncycastleCertAttributeCertificateIssuer *other = (OrgBouncycastleCertAttributeCertificateIssuer *) cast_chk(obj, [OrgBouncycastleCertAttributeCertificateIssuer class]);
  
#line 106
  return [((id<OrgBouncycastleAsn1ASN1Encodable>) nil_chk(self->form_)) isEqual:((OrgBouncycastleCertAttributeCertificateIssuer *) nil_chk(other))->form_];
}


#line 109
- (NSUInteger)hash {
  
#line 112
  return ((jint) [((id<OrgBouncycastleAsn1ASN1Encodable>) nil_chk(self->form_)) hash]);
}

- (jboolean)matchWithId:(id)obj {
  
#line 118
  if (!([obj isKindOfClass:[OrgBouncycastleCertX509CertificateHolder class]])) {
    
#line 120
    return false;
  }
  
#line 123
  OrgBouncycastleCertX509CertificateHolder *x509Cert = (OrgBouncycastleCertX509CertificateHolder *) cast_chk(obj, [OrgBouncycastleCertX509CertificateHolder class]);
  
#line 125
  if ([form_ isKindOfClass:[OrgBouncycastleAsn1X509V2Form class]]) {
    
#line 127
    OrgBouncycastleAsn1X509V2Form *issuer = (OrgBouncycastleAsn1X509V2Form *) form_;
    if ([((OrgBouncycastleAsn1X509V2Form *) nil_chk(issuer)) getBaseCertificateID] != nil) {
      
#line 130
      return [((OrgBouncycastleAsn1ASN1Integer *) nil_chk([((OrgBouncycastleAsn1X509IssuerSerial *) nil_chk([issuer getBaseCertificateID])) getSerial])) hasValueWithJavaMathBigInteger:[((OrgBouncycastleCertX509CertificateHolder *) nil_chk(x509Cert)) getSerialNumber]] && OrgBouncycastleCertAttributeCertificateIssuer_matchesDNWithOrgBouncycastleAsn1X500X500Name_withOrgBouncycastleAsn1X509GeneralNames_(self,
#line 131
      [x509Cert getIssuer], [((OrgBouncycastleAsn1X509IssuerSerial *) nil_chk([issuer getBaseCertificateID])) getIssuer]);
    }
    
#line 134
    OrgBouncycastleAsn1X509GeneralNames *name = [issuer getIssuerName];
    if (OrgBouncycastleCertAttributeCertificateIssuer_matchesDNWithOrgBouncycastleAsn1X500X500Name_withOrgBouncycastleAsn1X509GeneralNames_(self, [((OrgBouncycastleCertX509CertificateHolder *) nil_chk(x509Cert)) getSubject], name)) {
      
#line 137
      return true;
    }
  }
  else {
    
#line 142
    OrgBouncycastleAsn1X509GeneralNames *name = (OrgBouncycastleAsn1X509GeneralNames *) cast_chk(form_, [OrgBouncycastleAsn1X509GeneralNames class]);
    if (OrgBouncycastleCertAttributeCertificateIssuer_matchesDNWithOrgBouncycastleAsn1X500X500Name_withOrgBouncycastleAsn1X509GeneralNames_(self, [((OrgBouncycastleCertX509CertificateHolder *) nil_chk(x509Cert)) getSubject], name)) {
      
#line 145
      return true;
    }
  }
  
#line 149
  return false;
}

- (id)clone {
  return [self java_clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "[LOrgBouncycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleAsn1X509AttCertIssuer:);
  methods[1].selector = @selector(initWithOrgBouncycastleAsn1X500X500Name:);
  methods[2].selector = @selector(getNames);
  methods[3].selector = @selector(matchesDNWithOrgBouncycastleAsn1X500X500Name:withOrgBouncycastleAsn1X509GeneralNames:);
  methods[4].selector = @selector(java_clone);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(hash);
  methods[7].selector = @selector(matchWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "form_", "LOrgBouncycastleAsn1ASN1Encodable;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleAsn1X509AttCertIssuer;", "LOrgBouncycastleAsn1X500X500Name;", "matchesDN", "LOrgBouncycastleAsn1X500X500Name;LOrgBouncycastleAsn1X509GeneralNames;", "clone", "equals", "LNSObject;", "hashCode", "match" };
  static const J2ObjcClassInfo _OrgBouncycastleCertAttributeCertificateIssuer = { "AttributeCertificateIssuer", "org.bouncycastle.cert", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCertAttributeCertificateIssuer;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end


#line 27
void OrgBouncycastleCertAttributeCertificateIssuer_initWithOrgBouncycastleAsn1X509AttCertIssuer_(OrgBouncycastleCertAttributeCertificateIssuer *self, OrgBouncycastleAsn1X509AttCertIssuer *issuer) {
  NSObject_init(self);
  self->form_ = [((OrgBouncycastleAsn1X509AttCertIssuer *) nil_chk(issuer)) getIssuer];
}


#line 27
OrgBouncycastleCertAttributeCertificateIssuer *new_OrgBouncycastleCertAttributeCertificateIssuer_initWithOrgBouncycastleAsn1X509AttCertIssuer_(OrgBouncycastleAsn1X509AttCertIssuer *issuer) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCertAttributeCertificateIssuer, initWithOrgBouncycastleAsn1X509AttCertIssuer_, issuer)
}


#line 27
OrgBouncycastleCertAttributeCertificateIssuer *create_OrgBouncycastleCertAttributeCertificateIssuer_initWithOrgBouncycastleAsn1X509AttCertIssuer_(OrgBouncycastleAsn1X509AttCertIssuer *issuer) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCertAttributeCertificateIssuer, initWithOrgBouncycastleAsn1X509AttCertIssuer_, issuer)
}


#line 32
void OrgBouncycastleCertAttributeCertificateIssuer_initWithOrgBouncycastleAsn1X500X500Name_(OrgBouncycastleCertAttributeCertificateIssuer *self, OrgBouncycastleAsn1X500X500Name *principal) {
  NSObject_init(self);
  self->form_ = new_OrgBouncycastleAsn1X509V2Form_initWithOrgBouncycastleAsn1X509GeneralNames_(new_OrgBouncycastleAsn1X509GeneralNames_initWithOrgBouncycastleAsn1X509GeneralName_(new_OrgBouncycastleAsn1X509GeneralName_initWithOrgBouncycastleAsn1X500X500Name_(principal)));
}


#line 32
OrgBouncycastleCertAttributeCertificateIssuer *new_OrgBouncycastleCertAttributeCertificateIssuer_initWithOrgBouncycastleAsn1X500X500Name_(OrgBouncycastleAsn1X500X500Name *principal) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCertAttributeCertificateIssuer, initWithOrgBouncycastleAsn1X500X500Name_, principal)
}


#line 32
OrgBouncycastleCertAttributeCertificateIssuer *create_OrgBouncycastleCertAttributeCertificateIssuer_initWithOrgBouncycastleAsn1X500X500Name_(OrgBouncycastleAsn1X500X500Name *principal) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCertAttributeCertificateIssuer, initWithOrgBouncycastleAsn1X500X500Name_, principal)
}


#line 65
jboolean OrgBouncycastleCertAttributeCertificateIssuer_matchesDNWithOrgBouncycastleAsn1X500X500Name_withOrgBouncycastleAsn1X509GeneralNames_(OrgBouncycastleCertAttributeCertificateIssuer *self, OrgBouncycastleAsn1X500X500Name *subject, OrgBouncycastleAsn1X509GeneralNames *targets) {
  
#line 67
  IOSObjectArray *names = [((OrgBouncycastleAsn1X509GeneralNames *) nil_chk(targets)) getNames];
  
#line 69
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(names))->size_; i++) {
    
#line 71
    OrgBouncycastleAsn1X509GeneralName *gn = IOSObjectArray_Get(names, i);
    
#line 73
    if ([((OrgBouncycastleAsn1X509GeneralName *) nil_chk(gn)) getTagNo] == OrgBouncycastleAsn1X509GeneralName_directoryName) {
      
#line 75
      if ([((OrgBouncycastleAsn1X500X500Name *) nil_chk(OrgBouncycastleAsn1X500X500Name_getInstanceWithId_([gn getName]))) isEqual:subject]) {
        
#line 77
        return true;
      }
    }
  }
  
#line 82
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCertAttributeCertificateIssuer)
