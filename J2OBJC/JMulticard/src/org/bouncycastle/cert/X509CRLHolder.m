//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cert/X509CRLHolder.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/bouncycastle/asn1/ASN1BitString.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1Encoding.h"
#include "org/bouncycastle/asn1/ASN1InputStream.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/x500/X500Name.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/asn1/x509/CertificateList.h"
#include "org/bouncycastle/asn1/x509/Extension.h"
#include "org/bouncycastle/asn1/x509/Extensions.h"
#include "org/bouncycastle/asn1/x509/GeneralName.h"
#include "org/bouncycastle/asn1/x509/GeneralNames.h"
#include "org/bouncycastle/asn1/x509/IssuingDistributionPoint.h"
#include "org/bouncycastle/asn1/x509/TBSCertList.h"
#include "org/bouncycastle/asn1/x509/Time.h"
#include "org/bouncycastle/cert/CertException.h"
#include "org/bouncycastle/cert/CertIOException.h"
#include "org/bouncycastle/cert/CertUtils.h"
#include "org/bouncycastle/cert/X509CRLEntryHolder.h"
#include "org/bouncycastle/cert/X509CRLHolder.h"
#include "org/bouncycastle/operator/ContentVerifier.h"
#include "org/bouncycastle/operator/ContentVerifierProvider.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/cert/X509CRLHolder must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCertX509CRLHolder () {
 @public
  OrgBouncycastleAsn1X509CertificateList *x509CRL_;
  jboolean isIndirect_;
  OrgBouncycastleAsn1X509Extensions *extensions_;
  OrgBouncycastleAsn1X509GeneralNames *issuerName_;
}

+ (OrgBouncycastleAsn1X509CertificateList *)parseStreamWithJavaIoInputStream:(JavaIoInputStream *)stream;

+ (jboolean)isIndirectCRLWithOrgBouncycastleAsn1X509Extensions:(OrgBouncycastleAsn1X509Extensions *)extensions;

- (void)init__WithOrgBouncycastleAsn1X509CertificateList:(OrgBouncycastleAsn1X509CertificateList *)x509CRL OBJC_METHOD_FAMILY_NONE;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCertX509CRLHolder, x509CRL_, OrgBouncycastleAsn1X509CertificateList *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCertX509CRLHolder, extensions_, OrgBouncycastleAsn1X509Extensions *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCertX509CRLHolder, issuerName_, OrgBouncycastleAsn1X509GeneralNames *)

inline jlong OrgBouncycastleCertX509CRLHolder_get_serialVersionUID(void);
#define OrgBouncycastleCertX509CRLHolder_serialVersionUID 20170722001LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCertX509CRLHolder, serialVersionUID, jlong)

__attribute__((unused)) static OrgBouncycastleAsn1X509CertificateList *OrgBouncycastleCertX509CRLHolder_parseStreamWithJavaIoInputStream_(JavaIoInputStream *stream);

__attribute__((unused)) static jboolean OrgBouncycastleCertX509CRLHolder_isIndirectCRLWithOrgBouncycastleAsn1X509Extensions_(OrgBouncycastleAsn1X509Extensions *extensions);

__attribute__((unused)) static void OrgBouncycastleCertX509CRLHolder_init__WithOrgBouncycastleAsn1X509CertificateList_(OrgBouncycastleCertX509CRLHolder *self, OrgBouncycastleAsn1X509CertificateList *x509CRL);

__attribute__((unused)) static void OrgBouncycastleCertX509CRLHolder_readObjectWithJavaIoObjectInputStream_(OrgBouncycastleCertX509CRLHolder *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void OrgBouncycastleCertX509CRLHolder_writeObjectWithJavaIoObjectOutputStream_(OrgBouncycastleCertX509CRLHolder *self, JavaIoObjectOutputStream *outArg);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cert/X509CRLHolder.java"


#line 38
@implementation OrgBouncycastleCertX509CRLHolder


#line 48
+ (OrgBouncycastleAsn1X509CertificateList *)parseStreamWithJavaIoInputStream:(JavaIoInputStream *)stream {
  return OrgBouncycastleCertX509CRLHolder_parseStreamWithJavaIoInputStream_(stream);
}


#line 70
+ (jboolean)isIndirectCRLWithOrgBouncycastleAsn1X509Extensions:(OrgBouncycastleAsn1X509Extensions *)extensions {
  return OrgBouncycastleCertX509CRLHolder_isIndirectCRLWithOrgBouncycastleAsn1X509Extensions_(extensions);
}


#line 88
- (instancetype)initWithByteArray:(IOSByteArray *)crlEncoding {
  OrgBouncycastleCertX509CRLHolder_initWithByteArray_(self, crlEncoding);
  return self;
}


#line 100
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)crlStream {
  OrgBouncycastleCertX509CRLHolder_initWithJavaIoInputStream_(self, crlStream);
  return self;
}


#line 111
- (instancetype)initWithOrgBouncycastleAsn1X509CertificateList:(OrgBouncycastleAsn1X509CertificateList *)x509CRL {
  OrgBouncycastleCertX509CRLHolder_initWithOrgBouncycastleAsn1X509CertificateList_(self, x509CRL);
  return self;
}

- (void)init__WithOrgBouncycastleAsn1X509CertificateList:(OrgBouncycastleAsn1X509CertificateList *)x509CRL {
  OrgBouncycastleCertX509CRLHolder_init__WithOrgBouncycastleAsn1X509CertificateList_(self, x509CRL);
}


#line 130
- (IOSByteArray *)getEncoded {
  
#line 134
  return [((OrgBouncycastleAsn1X509CertificateList *) nil_chk(x509CRL_)) getEncoded];
}


#line 142
- (OrgBouncycastleAsn1X500X500Name *)getIssuer {
  
#line 144
  return OrgBouncycastleAsn1X500X500Name_getInstanceWithId_([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(x509CRL_)) getIssuer]);
}


#line 147
- (JavaUtilDate *)getThisUpdate {
  
#line 149
  return [((OrgBouncycastleAsn1X509Time *) nil_chk([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(x509CRL_)) getThisUpdate])) getDate];
}


#line 152
- (JavaUtilDate *)getNextUpdate {
  
#line 154
  OrgBouncycastleAsn1X509Time *update = [((OrgBouncycastleAsn1X509CertificateList *) nil_chk(x509CRL_)) getNextUpdate];
  
#line 156
  if (update != nil) {
    
#line 158
    return [update getDate];
  }
  
#line 161
  return nil;
}


#line 163
- (OrgBouncycastleCertX509CRLEntryHolder *)getRevokedCertificateWithJavaMathBigInteger:(JavaMathBigInteger *)serialNumber {
  
#line 165
  OrgBouncycastleAsn1X509GeneralNames *currentCA = issuerName_;
  for (id<JavaUtilEnumeration> en = [((OrgBouncycastleAsn1X509CertificateList *) nil_chk(x509CRL_)) getRevokedCertificateEnumeration]; [((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]; ) {
    
#line 168
    OrgBouncycastleAsn1X509TBSCertList_CRLEntry *entry_ = (OrgBouncycastleAsn1X509TBSCertList_CRLEntry *) cast_chk([en nextElement], [OrgBouncycastleAsn1X509TBSCertList_CRLEntry class]);
    
#line 170
    if ([((OrgBouncycastleAsn1ASN1Integer *) nil_chk([((OrgBouncycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) getUserCertificate])) hasValueWithJavaMathBigInteger:serialNumber]) {
      
#line 172
      return new_OrgBouncycastleCertX509CRLEntryHolder_initWithOrgBouncycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgBouncycastleAsn1X509GeneralNames_(entry_, isIndirect_, currentCA);
    }
    
#line 175
    if (isIndirect_ && [entry_ hasExtensions]) {
      
#line 177
      OrgBouncycastleAsn1X509Extension *currentCaName = [((OrgBouncycastleAsn1X509Extensions *) nil_chk([entry_ getExtensions])) getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgBouncycastleAsn1X509Extension, certificateIssuer)];
      
#line 179
      if (currentCaName != nil) {
        
#line 181
        currentCA = OrgBouncycastleAsn1X509GeneralNames_getInstanceWithId_([currentCaName getParsedValue]);
      }
    }
  }
  
#line 186
  return nil;
}


#line 195
- (id<JavaUtilCollection>)getRevokedCertificates {
  
#line 197
  IOSObjectArray *entries = [((OrgBouncycastleAsn1X509CertificateList *) nil_chk(x509CRL_)) getRevokedCertificates];
  id<JavaUtilList> l = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(entries))->size_);
  OrgBouncycastleAsn1X509GeneralNames *currentCA = issuerName_;
  
#line 201
  for (id<JavaUtilEnumeration> en = [((OrgBouncycastleAsn1X509CertificateList *) nil_chk(x509CRL_)) getRevokedCertificateEnumeration]; [((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]; ) {
    
#line 203
    OrgBouncycastleAsn1X509TBSCertList_CRLEntry *entry_ = (OrgBouncycastleAsn1X509TBSCertList_CRLEntry *) cast_chk([en nextElement], [OrgBouncycastleAsn1X509TBSCertList_CRLEntry class]);
    OrgBouncycastleCertX509CRLEntryHolder *crlEntry = new_OrgBouncycastleCertX509CRLEntryHolder_initWithOrgBouncycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgBouncycastleAsn1X509GeneralNames_(entry_, isIndirect_, currentCA);
    
#line 206
    [l addWithId:crlEntry];
    
#line 208
    currentCA = [crlEntry getCertificateIssuer];
  }
  
#line 211
  return l;
}


#line 219
- (jboolean)hasExtensions {
  
#line 221
  return extensions_ != nil;
}


#line 231
- (OrgBouncycastleAsn1X509Extension *)getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)oid {
  
#line 233
  if (extensions_ != nil) {
    
#line 235
    return [extensions_ getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:oid];
  }
  
#line 238
  return nil;
}


#line 246
- (OrgBouncycastleAsn1X509Extensions *)getExtensions {
  
#line 248
  return extensions_;
}


#line 257
- (id<JavaUtilList>)getExtensionOIDs {
  
#line 259
  return OrgBouncycastleCertCertUtils_getExtensionOIDsWithOrgBouncycastleAsn1X509Extensions_(extensions_);
}


#line 268
- (id<JavaUtilSet>)getCriticalExtensionOIDs {
  
#line 270
  return OrgBouncycastleCertCertUtils_getCriticalExtensionOIDsWithOrgBouncycastleAsn1X509Extensions_(extensions_);
}


#line 279
- (id<JavaUtilSet>)getNonCriticalExtensionOIDs {
  
#line 281
  return OrgBouncycastleCertCertUtils_getNonCriticalExtensionOIDsWithOrgBouncycastleAsn1X509Extensions_(extensions_);
}


#line 289
- (OrgBouncycastleAsn1X509CertificateList *)toASN1Structure {
  
#line 291
  return x509CRL_;
}


#line 301
- (jboolean)isSignatureValidWithOrgBouncycastleOperatorContentVerifierProvider:(id<OrgBouncycastleOperatorContentVerifierProvider>)verifierProvider {
  
#line 304
  OrgBouncycastleAsn1X509TBSCertList *tbsCRL = [((OrgBouncycastleAsn1X509CertificateList *) nil_chk(x509CRL_)) getTBSCertList];
  
#line 306
  if (!OrgBouncycastleCertCertUtils_isAlgIdEqualWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1X509AlgorithmIdentifier_([((OrgBouncycastleAsn1X509TBSCertList *) nil_chk(tbsCRL)) getSignature], [((OrgBouncycastleAsn1X509CertificateList *) nil_chk(x509CRL_)) getSignatureAlgorithm])) {
    
#line 308
    @throw new_OrgBouncycastleCertCertException_initWithNSString_(@"signature invalid - algorithm identifier mismatch");
  }
  
#line 311
  id<OrgBouncycastleOperatorContentVerifier> verifier;
  
#line 313
  @try {
    
#line 315
    verifier = [((id<OrgBouncycastleOperatorContentVerifierProvider>) nil_chk(verifierProvider)) getWithOrgBouncycastleAsn1X509AlgorithmIdentifier:([tbsCRL getSignature])];
    
#line 317
    JavaIoOutputStream *sOut = [((id<OrgBouncycastleOperatorContentVerifier>) nil_chk(verifier)) getOutputStream];
    [tbsCRL encodeToWithJavaIoOutputStream:sOut withNSString:OrgBouncycastleAsn1ASN1Encoding_DER];
    [((JavaIoOutputStream *) nil_chk(sOut)) close];
  }
  @catch (JavaLangException *e) {
    
#line 323
    @throw new_OrgBouncycastleCertCertException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"unable to process signature: ", [e getMessage]), e);
  }
  
#line 326
  return [((id<OrgBouncycastleOperatorContentVerifier>) nil_chk(verifier)) verifyWithByteArray:[((OrgBouncycastleAsn1ASN1BitString *) nil_chk([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(x509CRL_)) getSignature])) getOctets]];
}


#line 329
- (jboolean)isEqual:(id)o {
  
#line 333
  if (JreObjectEqualsEquals(o, self)) {
    
#line 335
    return true;
  }
  
#line 338
  if (!([o isKindOfClass:[OrgBouncycastleCertX509CRLHolder class]])) {
    
#line 340
    return false;
  }
  
#line 343
  OrgBouncycastleCertX509CRLHolder *other = (OrgBouncycastleCertX509CRLHolder *) cast_chk(o, [OrgBouncycastleCertX509CRLHolder class]);
  
#line 345
  return [((OrgBouncycastleAsn1X509CertificateList *) nil_chk(self->x509CRL_)) isEqual:((OrgBouncycastleCertX509CRLHolder *) nil_chk(other))->x509CRL_];
}


#line 348
- (NSUInteger)hash {
  
#line 351
  return ((jint) [((OrgBouncycastleAsn1X509CertificateList *) nil_chk(self->x509CRL_)) hash]);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  OrgBouncycastleCertX509CRLHolder_readObjectWithJavaIoObjectInputStream_(self, inArg);
}


#line 363
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  OrgBouncycastleCertX509CRLHolder_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgBouncycastleAsn1X509CertificateList;", 0xa, 0, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCertX509CRLEntryHolder;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509Extension;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509Extensions;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509CertificateList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, 14, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, 20, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(parseStreamWithJavaIoInputStream:);
  methods[1].selector = @selector(isIndirectCRLWithOrgBouncycastleAsn1X509Extensions:);
  methods[2].selector = @selector(initWithByteArray:);
  methods[3].selector = @selector(initWithJavaIoInputStream:);
  methods[4].selector = @selector(initWithOrgBouncycastleAsn1X509CertificateList:);
  methods[5].selector = @selector(init__WithOrgBouncycastleAsn1X509CertificateList:);
  methods[6].selector = @selector(getEncoded);
  methods[7].selector = @selector(getIssuer);
  methods[8].selector = @selector(getThisUpdate);
  methods[9].selector = @selector(getNextUpdate);
  methods[10].selector = @selector(getRevokedCertificateWithJavaMathBigInteger:);
  methods[11].selector = @selector(getRevokedCertificates);
  methods[12].selector = @selector(hasExtensions);
  methods[13].selector = @selector(getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[14].selector = @selector(getExtensions);
  methods[15].selector = @selector(getExtensionOIDs);
  methods[16].selector = @selector(getCriticalExtensionOIDs);
  methods[17].selector = @selector(getNonCriticalExtensionOIDs);
  methods[18].selector = @selector(toASN1Structure);
  methods[19].selector = @selector(isSignatureValidWithOrgBouncycastleOperatorContentVerifierProvider:);
  methods[20].selector = @selector(isEqual:);
  methods[21].selector = @selector(hash);
  methods[22].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[23].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgBouncycastleCertX509CRLHolder_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "x509CRL_", "LOrgBouncycastleAsn1X509CertificateList;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "isIndirect_", "Z", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "extensions_", "LOrgBouncycastleAsn1X509Extensions;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "issuerName_", "LOrgBouncycastleAsn1X509GeneralNames;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "parseStream", "LJavaIoInputStream;", "LJavaIoIOException;", "isIndirectCRL", "LOrgBouncycastleAsn1X509Extensions;", "[B", "LOrgBouncycastleAsn1X509CertificateList;", "init", "getRevokedCertificate", "LJavaMathBigInteger;", "getExtension", "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", "isSignatureValid", "LOrgBouncycastleOperatorContentVerifierProvider;", "LOrgBouncycastleCertCertException;", "equals", "LNSObject;", "hashCode", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;" };
  static const J2ObjcClassInfo _OrgBouncycastleCertX509CRLHolder = { "X509CRLHolder", "org.bouncycastle.cert", ptrTable, methods, fields, 7, 0x1, 24, 5, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCertX509CRLHolder;
}

@end


#line 48
OrgBouncycastleAsn1X509CertificateList *OrgBouncycastleCertX509CRLHolder_parseStreamWithJavaIoInputStream_(JavaIoInputStream *stream) {
  OrgBouncycastleCertX509CRLHolder_initialize();
  
#line 51
  @try {
    
#line 53
    OrgBouncycastleAsn1ASN1Primitive *obj = [new_OrgBouncycastleAsn1ASN1InputStream_initWithJavaIoInputStream_withBoolean_(stream, true) readObject];
    if (obj == nil) {
      
#line 56
      @throw new_JavaIoIOException_initWithNSString_(@"no content found");
    }
    return OrgBouncycastleAsn1X509CertificateList_getInstanceWithId_(obj);
  }
  @catch (JavaLangClassCastException *e) {
    
#line 62
    @throw new_OrgBouncycastleCertCertIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"malformed data: ", [e getMessage]), e);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    
#line 66
    @throw new_OrgBouncycastleCertCertIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"malformed data: ", [e getMessage]), e);
  }
}


#line 70
jboolean OrgBouncycastleCertX509CRLHolder_isIndirectCRLWithOrgBouncycastleAsn1X509Extensions_(OrgBouncycastleAsn1X509Extensions *extensions) {
  OrgBouncycastleCertX509CRLHolder_initialize();
  if (extensions == nil) {
    
#line 74
    return false;
  }
  
#line 77
  OrgBouncycastleAsn1X509Extension *ext = [extensions getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgBouncycastleAsn1X509Extension, issuingDistributionPoint)];
  
#line 79
  return ext != nil && [((OrgBouncycastleAsn1X509IssuingDistributionPoint *) nil_chk(OrgBouncycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_([ext getParsedValue]))) isIndirectCRL];
}


#line 88
void OrgBouncycastleCertX509CRLHolder_initWithByteArray_(OrgBouncycastleCertX509CRLHolder *self, IOSByteArray *crlEncoding) {
  OrgBouncycastleCertX509CRLHolder_initWithOrgBouncycastleAsn1X509CertificateList_(self, OrgBouncycastleCertX509CRLHolder_parseStreamWithJavaIoInputStream_(new_JavaIoByteArrayInputStream_initWithByteArray_(
#line 91
  crlEncoding)));
}


#line 88
OrgBouncycastleCertX509CRLHolder *new_OrgBouncycastleCertX509CRLHolder_initWithByteArray_(IOSByteArray *crlEncoding) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCertX509CRLHolder, initWithByteArray_, crlEncoding)
}


#line 88
OrgBouncycastleCertX509CRLHolder *create_OrgBouncycastleCertX509CRLHolder_initWithByteArray_(IOSByteArray *crlEncoding) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCertX509CRLHolder, initWithByteArray_, crlEncoding)
}


#line 100
void OrgBouncycastleCertX509CRLHolder_initWithJavaIoInputStream_(OrgBouncycastleCertX509CRLHolder *self, JavaIoInputStream *crlStream) {
  OrgBouncycastleCertX509CRLHolder_initWithOrgBouncycastleAsn1X509CertificateList_(self, OrgBouncycastleCertX509CRLHolder_parseStreamWithJavaIoInputStream_(
#line 103
  crlStream));
}


#line 100
OrgBouncycastleCertX509CRLHolder *new_OrgBouncycastleCertX509CRLHolder_initWithJavaIoInputStream_(JavaIoInputStream *crlStream) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCertX509CRLHolder, initWithJavaIoInputStream_, crlStream)
}


#line 100
OrgBouncycastleCertX509CRLHolder *create_OrgBouncycastleCertX509CRLHolder_initWithJavaIoInputStream_(JavaIoInputStream *crlStream) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCertX509CRLHolder, initWithJavaIoInputStream_, crlStream)
}


#line 111
void OrgBouncycastleCertX509CRLHolder_initWithOrgBouncycastleAsn1X509CertificateList_(OrgBouncycastleCertX509CRLHolder *self, OrgBouncycastleAsn1X509CertificateList *x509CRL) {
  NSObject_init(self);
  OrgBouncycastleCertX509CRLHolder_init__WithOrgBouncycastleAsn1X509CertificateList_(self, x509CRL);
}


#line 111
OrgBouncycastleCertX509CRLHolder *new_OrgBouncycastleCertX509CRLHolder_initWithOrgBouncycastleAsn1X509CertificateList_(OrgBouncycastleAsn1X509CertificateList *x509CRL) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCertX509CRLHolder, initWithOrgBouncycastleAsn1X509CertificateList_, x509CRL)
}


#line 111
OrgBouncycastleCertX509CRLHolder *create_OrgBouncycastleCertX509CRLHolder_initWithOrgBouncycastleAsn1X509CertificateList_(OrgBouncycastleAsn1X509CertificateList *x509CRL) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCertX509CRLHolder, initWithOrgBouncycastleAsn1X509CertificateList_, x509CRL)
}


#line 116
void OrgBouncycastleCertX509CRLHolder_init__WithOrgBouncycastleAsn1X509CertificateList_(OrgBouncycastleCertX509CRLHolder *self, OrgBouncycastleAsn1X509CertificateList *x509CRL) {
  
#line 118
  self->x509CRL_ = x509CRL;
  self->extensions_ = [((OrgBouncycastleAsn1X509TBSCertList *) nil_chk([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(x509CRL)) getTBSCertList])) getExtensions];
  self->isIndirect_ = OrgBouncycastleCertX509CRLHolder_isIndirectCRLWithOrgBouncycastleAsn1X509Extensions_(self->extensions_);
  self->issuerName_ = new_OrgBouncycastleAsn1X509GeneralNames_initWithOrgBouncycastleAsn1X509GeneralName_(new_OrgBouncycastleAsn1X509GeneralName_initWithOrgBouncycastleAsn1X500X500Name_([x509CRL getIssuer]));
}


#line 354
void OrgBouncycastleCertX509CRLHolder_readObjectWithJavaIoObjectInputStream_(OrgBouncycastleCertX509CRLHolder *self, JavaIoObjectInputStream *inArg) {
  
#line 358
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  
#line 360
  OrgBouncycastleCertX509CRLHolder_init__WithOrgBouncycastleAsn1X509CertificateList_(self, OrgBouncycastleAsn1X509CertificateList_getInstanceWithId_([inArg readObject]));
}

void OrgBouncycastleCertX509CRLHolder_writeObjectWithJavaIoObjectOutputStream_(OrgBouncycastleCertX509CRLHolder *self, JavaIoObjectOutputStream *outArg) {
  
#line 367
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  
#line 369
  [outArg writeObjectWithId:[self getEncoded]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCertX509CRLHolder)
