//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cert/X509CRLEntryHolder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCertX509CRLEntryHolder")
#ifdef RESTRICT_OrgBouncycastleCertX509CRLEntryHolder
#define INCLUDE_ALL_OrgBouncycastleCertX509CRLEntryHolder 0
#else
#define INCLUDE_ALL_OrgBouncycastleCertX509CRLEntryHolder 1
#endif
#undef RESTRICT_OrgBouncycastleCertX509CRLEntryHolder

#if !defined (OrgBouncycastleCertX509CRLEntryHolder_) && (INCLUDE_ALL_OrgBouncycastleCertX509CRLEntryHolder || defined(INCLUDE_OrgBouncycastleCertX509CRLEntryHolder))
#define OrgBouncycastleCertX509CRLEntryHolder_

@class JavaMathBigInteger;
@class JavaUtilDate;
@class OrgBouncycastleAsn1ASN1ObjectIdentifier;
@class OrgBouncycastleAsn1X509Extension;
@class OrgBouncycastleAsn1X509Extensions;
@class OrgBouncycastleAsn1X509GeneralNames;
@class OrgBouncycastleAsn1X509TBSCertList_CRLEntry;
@protocol JavaUtilList;
@protocol JavaUtilSet;

/*!
 @brief Holding class for an X.509 CRL Entry structure.
 */
@interface OrgBouncycastleCertX509CRLEntryHolder : NSObject

#pragma mark Public

/*!
 @brief Return the available names for the certificate issuer for the certificate referred to by this CRL entry.
 <p>
  Note: this will be the issuer of the CRL unless it has been specified that the CRL is indirect
  in the IssuingDistributionPoint extension and either a previous entry, or the current one,
  has specified a different CA via the certificateIssuer extension. 
 </p>
 @return the revoked certificate's issuer.
 */
- (OrgBouncycastleAsn1X509GeneralNames *)getCertificateIssuer;

/*!
 @brief Returns a set of ASN1ObjectIdentifier objects representing the OIDs of the
  critical extensions contained in this holder's CRL entry.
 @return a set of critical extension OIDs.
 */
- (id<JavaUtilSet>)getCriticalExtensionOIDs;

/*!
 @brief Look up the extension associated with the passed in OID.
 @param oid the OID of the extension of interest.
 @return the extension if present, null otherwise.
 */
- (OrgBouncycastleAsn1X509Extension *)getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)oid;

/*!
 @brief Returns a list of ASN1ObjectIdentifier objects representing the OIDs of the
  extensions contained in this holder's CRL entry.
 @return a list of extension OIDs.
 */
- (id<JavaUtilList>)getExtensionOIDs;

/*!
 @brief Return the extensions block associated with this CRL entry if there is one.
 @return the extensions block, null otherwise.
 */
- (OrgBouncycastleAsn1X509Extensions *)getExtensions;

/*!
 @brief Returns a set of ASN1ObjectIdentifier objects representing the OIDs of the
  non-critical extensions contained in this holder's CRL entry.
 @return a set of non-critical extension OIDs.
 */
- (id<JavaUtilSet>)getNonCriticalExtensionOIDs;

/*!
 @brief Return the date on which the certificate associated with this CRLEntry was revoked.
 @return the revocation date for the revoked certificate.
 */
- (JavaUtilDate *)getRevocationDate;

/*!
 @brief Return the serial number of the certificate associated with this CRLEntry.
 @return the revoked certificate's serial number.
 */
- (JavaMathBigInteger *)getSerialNumber;

/*!
 @brief Return whether or not the holder's CRL entry contains extensions.
 @return true if extension are present, false otherwise.
 */
- (jboolean)hasExtensions;

#pragma mark Package-Private

- (instancetype)initWithOrgBouncycastleAsn1X509TBSCertList_CRLEntry:(OrgBouncycastleAsn1X509TBSCertList_CRLEntry *)entry_
                                                        withBoolean:(jboolean)isIndirect
                            withOrgBouncycastleAsn1X509GeneralNames:(OrgBouncycastleAsn1X509GeneralNames *)previousCA;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCertX509CRLEntryHolder)

FOUNDATION_EXPORT void OrgBouncycastleCertX509CRLEntryHolder_initWithOrgBouncycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgBouncycastleAsn1X509GeneralNames_(OrgBouncycastleCertX509CRLEntryHolder *self, OrgBouncycastleAsn1X509TBSCertList_CRLEntry *entry_, jboolean isIndirect, OrgBouncycastleAsn1X509GeneralNames *previousCA);

FOUNDATION_EXPORT OrgBouncycastleCertX509CRLEntryHolder *new_OrgBouncycastleCertX509CRLEntryHolder_initWithOrgBouncycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgBouncycastleAsn1X509GeneralNames_(OrgBouncycastleAsn1X509TBSCertList_CRLEntry *entry_, jboolean isIndirect, OrgBouncycastleAsn1X509GeneralNames *previousCA) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCertX509CRLEntryHolder *create_OrgBouncycastleCertX509CRLEntryHolder_initWithOrgBouncycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgBouncycastleAsn1X509GeneralNames_(OrgBouncycastleAsn1X509TBSCertList_CRLEntry *entry_, jboolean isIndirect, OrgBouncycastleAsn1X509GeneralNames *previousCA);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCertX509CRLEntryHolder)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCertX509CRLEntryHolder")
