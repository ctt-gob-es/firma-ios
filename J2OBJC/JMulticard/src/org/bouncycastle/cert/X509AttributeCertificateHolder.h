//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cert/X509AttributeCertificateHolder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCertX509AttributeCertificateHolder")
#ifdef RESTRICT_OrgBouncycastleCertX509AttributeCertificateHolder
#define INCLUDE_ALL_OrgBouncycastleCertX509AttributeCertificateHolder 0
#else
#define INCLUDE_ALL_OrgBouncycastleCertX509AttributeCertificateHolder 1
#endif
#undef RESTRICT_OrgBouncycastleCertX509AttributeCertificateHolder

#if !defined (OrgBouncycastleCertX509AttributeCertificateHolder_) && (INCLUDE_ALL_OrgBouncycastleCertX509AttributeCertificateHolder || defined(INCLUDE_OrgBouncycastleCertX509AttributeCertificateHolder))
#define OrgBouncycastleCertX509AttributeCertificateHolder_

#define RESTRICT_OrgBouncycastleUtilEncodable 1
#define INCLUDE_OrgBouncycastleUtilEncodable 1
#include "org/bouncycastle/util/Encodable.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSBooleanArray;
@class IOSByteArray;
@class IOSObjectArray;
@class JavaMathBigInteger;
@class JavaUtilDate;
@class OrgBouncycastleAsn1ASN1ObjectIdentifier;
@class OrgBouncycastleAsn1X509AlgorithmIdentifier;
@class OrgBouncycastleAsn1X509AttributeCertificate;
@class OrgBouncycastleAsn1X509Extension;
@class OrgBouncycastleAsn1X509Extensions;
@class OrgBouncycastleCertAttributeCertificateHolder;
@class OrgBouncycastleCertAttributeCertificateIssuer;
@protocol JavaUtilList;
@protocol JavaUtilSet;
@protocol OrgBouncycastleOperatorContentVerifierProvider;

/*!
 @brief Holding class for an X.509 AttributeCertificate structure.
 */
@interface OrgBouncycastleCertX509AttributeCertificateHolder : NSObject < OrgBouncycastleUtilEncodable, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Create a X509AttributeCertificateHolder from the passed in ASN.1 structure.
 @param attrCert an ASN.1 AttributeCertificate structure.
 */
- (instancetype)initWithOrgBouncycastleAsn1X509AttributeCertificate:(OrgBouncycastleAsn1X509AttributeCertificate *)attrCert;

/*!
 @brief Create a X509AttributeCertificateHolder from the passed in bytes.
 @param certEncoding BER/DER encoding of the certificate.
 @throw IOExceptionin the event of corrupted data, or an incorrect structure.
 */
- (instancetype)initWithByteArray:(IOSByteArray *)certEncoding;

- (jboolean)isEqual:(id)o;

/*!
 @brief Return the attributes, if any associated with this request.
 @return an array of Attribute, zero length if none present.
 */
- (IOSObjectArray *)getAttributes;

/*!
 @brief Return an  array of attributes matching the passed in type OID.
 @param type the type of the attribute being looked for.
 @return an array of Attribute of the requested type, zero length if none present.
 */
- (IOSObjectArray *)getAttributesWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)type;

/*!
 @brief Returns a set of ASN1ObjectIdentifier objects representing the OIDs of the
  critical extensions contained in this holder's attribute certificate.
 @return a set of critical extension OIDs.
 */
- (id<JavaUtilSet>)getCriticalExtensionOIDs;

/*!
 @brief Return the ASN.1 encoding of this holder's attribute certificate.
 @return a DER encoded byte array.
 @throw IOExceptionif an encoding cannot be generated.
 */
- (IOSByteArray *)getEncoded;

/*!
 @brief Look up the extension associated with the passed in OID.
 @param oid the OID of the extension of interest.
 @return the extension if present, null otherwise.
 */
- (OrgBouncycastleAsn1X509Extension *)getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)oid;

/*!
 @brief Returns a list of ASN1ObjectIdentifier objects representing the OIDs of the
  extensions contained in this holder's attribute certificate.
 @return a list of extension OIDs.
 */
- (id<JavaUtilList>)getExtensionOIDs;

/*!
 @brief Return the extensions block associated with this certificate if there is one.
 @return the extensions block, null otherwise.
 */
- (OrgBouncycastleAsn1X509Extensions *)getExtensions;

/*!
 @brief Return the holder details for this attribute certificate.
 @return this attribute certificate's holder structure.
 */
- (OrgBouncycastleCertAttributeCertificateHolder *)getHolder;

/*!
 @brief Return the issuer details for this attribute certificate.
 @return this attribute certificate's issuer structure,
 */
- (OrgBouncycastleCertAttributeCertificateIssuer *)getIssuer;

- (IOSBooleanArray *)getIssuerUniqueID;

/*!
 @brief Returns a set of ASN1ObjectIdentifier objects representing the OIDs of the
  non-critical extensions contained in this holder's attribute certificate.
 @return a set of non-critical extension OIDs.
 */
- (id<JavaUtilSet>)getNonCriticalExtensionOIDs;

/*!
 @brief Return the date after which this attribute certificate is not valid.
 @return the final date for the attribute certificate's validity period.
 */
- (JavaUtilDate *)getNotAfter;

/*!
 @brief Return the date before which this attribute certificate is not valid.
 @return the start date for the attribute certificate's validity period.
 */
- (JavaUtilDate *)getNotBefore;

/*!
 @brief Return the serial number of this attribute certificate.
 @return the serial number.
 */
- (JavaMathBigInteger *)getSerialNumber;

/*!
 @brief Return the bytes making up the signature associated with this attribute certificate.
 @return the attribute certificate signature bytes.
 */
- (IOSByteArray *)getSignature;

/*!
 @brief Return the details of the signature algorithm used to create this attribute certificate.
 @return the AlgorithmIdentifier describing the signature algorithm used to create this attribute certificate.
 */
- (OrgBouncycastleAsn1X509AlgorithmIdentifier *)getSignatureAlgorithm;

- (jint)getVersion;

/*!
 @brief Return whether or not the holder's attribute certificate contains extensions.
 @return true if extension are present, false otherwise.
 */
- (jboolean)hasExtensions;

- (NSUInteger)hash;

/*!
 @brief Validate the signature on the attribute certificate in this holder.
 @param verifierProvider a ContentVerifierProvider that can generate a verifier for the signature.
 @return true if the signature is valid, false otherwise.
 @throw CertExceptionif the signature cannot be processed or is inappropriate.
 */
- (jboolean)isSignatureValidWithOrgBouncycastleOperatorContentVerifierProvider:(id<OrgBouncycastleOperatorContentVerifierProvider>)verifierProvider;

/*!
 @brief Return whether or not this attribute certificate is valid on a particular date.
 @param date the date of interest.
 @return true if the attribute certificate is valid, false otherwise.
 */
- (jboolean)isValidOnWithJavaUtilDate:(JavaUtilDate *)date;

/*!
 @brief Return the underlying ASN.1 structure for the attribute certificate in this holder.
 @return a AttributeCertificate object.
 */
- (OrgBouncycastleAsn1X509AttributeCertificate *)toASN1Structure;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleCertX509AttributeCertificateHolder)

FOUNDATION_EXPORT void OrgBouncycastleCertX509AttributeCertificateHolder_initWithByteArray_(OrgBouncycastleCertX509AttributeCertificateHolder *self, IOSByteArray *certEncoding);

FOUNDATION_EXPORT OrgBouncycastleCertX509AttributeCertificateHolder *new_OrgBouncycastleCertX509AttributeCertificateHolder_initWithByteArray_(IOSByteArray *certEncoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCertX509AttributeCertificateHolder *create_OrgBouncycastleCertX509AttributeCertificateHolder_initWithByteArray_(IOSByteArray *certEncoding);

FOUNDATION_EXPORT void OrgBouncycastleCertX509AttributeCertificateHolder_initWithOrgBouncycastleAsn1X509AttributeCertificate_(OrgBouncycastleCertX509AttributeCertificateHolder *self, OrgBouncycastleAsn1X509AttributeCertificate *attrCert);

FOUNDATION_EXPORT OrgBouncycastleCertX509AttributeCertificateHolder *new_OrgBouncycastleCertX509AttributeCertificateHolder_initWithOrgBouncycastleAsn1X509AttributeCertificate_(OrgBouncycastleAsn1X509AttributeCertificate *attrCert) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCertX509AttributeCertificateHolder *create_OrgBouncycastleCertX509AttributeCertificateHolder_initWithOrgBouncycastleAsn1X509AttributeCertificate_(OrgBouncycastleAsn1X509AttributeCertificate *attrCert);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCertX509AttributeCertificateHolder)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCertX509AttributeCertificateHolder")
