//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cert/X509AttributeCertificateHolder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/bouncycastle/asn1/ASN1BitString.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1Encoding.h"
#include "org/bouncycastle/asn1/ASN1GeneralizedTime.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1Sequence.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/asn1/x509/AttCertIssuer.h"
#include "org/bouncycastle/asn1/x509/AttCertValidityPeriod.h"
#include "org/bouncycastle/asn1/x509/Attribute.h"
#include "org/bouncycastle/asn1/x509/AttributeCertificate.h"
#include "org/bouncycastle/asn1/x509/AttributeCertificateInfo.h"
#include "org/bouncycastle/asn1/x509/Extension.h"
#include "org/bouncycastle/asn1/x509/Extensions.h"
#include "org/bouncycastle/asn1/x509/Holder.h"
#include "org/bouncycastle/cert/AttributeCertificateHolder.h"
#include "org/bouncycastle/cert/AttributeCertificateIssuer.h"
#include "org/bouncycastle/cert/CertException.h"
#include "org/bouncycastle/cert/CertIOException.h"
#include "org/bouncycastle/cert/CertUtils.h"
#include "org/bouncycastle/cert/X509AttributeCertificateHolder.h"
#include "org/bouncycastle/operator/ContentVerifier.h"
#include "org/bouncycastle/operator/ContentVerifierProvider.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/cert/X509AttributeCertificateHolder must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCertX509AttributeCertificateHolder () {
 @public
  OrgBouncycastleAsn1X509AttributeCertificate *attrCert_;
  OrgBouncycastleAsn1X509Extensions *extensions_;
}

+ (OrgBouncycastleAsn1X509AttributeCertificate *)parseBytesWithByteArray:(IOSByteArray *)certEncoding;

- (void)init__WithOrgBouncycastleAsn1X509AttributeCertificate:(OrgBouncycastleAsn1X509AttributeCertificate *)attrCert OBJC_METHOD_FAMILY_NONE;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCertX509AttributeCertificateHolder, attrCert_, OrgBouncycastleAsn1X509AttributeCertificate *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCertX509AttributeCertificateHolder, extensions_, OrgBouncycastleAsn1X509Extensions *)

inline jlong OrgBouncycastleCertX509AttributeCertificateHolder_get_serialVersionUID(void);
#define OrgBouncycastleCertX509AttributeCertificateHolder_serialVersionUID 20170722001LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCertX509AttributeCertificateHolder, serialVersionUID, jlong)

inline IOSObjectArray *OrgBouncycastleCertX509AttributeCertificateHolder_get_EMPTY_ARRAY(void);
inline IOSObjectArray *OrgBouncycastleCertX509AttributeCertificateHolder_set_EMPTY_ARRAY(IOSObjectArray *value);
static IOSObjectArray *OrgBouncycastleCertX509AttributeCertificateHolder_EMPTY_ARRAY;
J2OBJC_STATIC_FIELD_OBJ(OrgBouncycastleCertX509AttributeCertificateHolder, EMPTY_ARRAY, IOSObjectArray *)

__attribute__((unused)) static OrgBouncycastleAsn1X509AttributeCertificate *OrgBouncycastleCertX509AttributeCertificateHolder_parseBytesWithByteArray_(IOSByteArray *certEncoding);

__attribute__((unused)) static void OrgBouncycastleCertX509AttributeCertificateHolder_init__WithOrgBouncycastleAsn1X509AttributeCertificate_(OrgBouncycastleCertX509AttributeCertificateHolder *self, OrgBouncycastleAsn1X509AttributeCertificate *attrCert);

__attribute__((unused)) static void OrgBouncycastleCertX509AttributeCertificateHolder_readObjectWithJavaIoObjectInputStream_(OrgBouncycastleCertX509AttributeCertificateHolder *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void OrgBouncycastleCertX509AttributeCertificateHolder_writeObjectWithJavaIoObjectOutputStream_(OrgBouncycastleCertX509AttributeCertificateHolder *self, JavaIoObjectOutputStream *outArg);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cert/X509AttributeCertificateHolder.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleCertX509AttributeCertificateHolder)


#line 31
@implementation OrgBouncycastleCertX509AttributeCertificateHolder


#line 41
+ (OrgBouncycastleAsn1X509AttributeCertificate *)parseBytesWithByteArray:(IOSByteArray *)certEncoding {
  return OrgBouncycastleCertX509AttributeCertificateHolder_parseBytesWithByteArray_(certEncoding);
}


#line 64
- (instancetype)initWithByteArray:(IOSByteArray *)certEncoding {
  OrgBouncycastleCertX509AttributeCertificateHolder_initWithByteArray_(self, certEncoding);
  return self;
}


#line 75
- (instancetype)initWithOrgBouncycastleAsn1X509AttributeCertificate:(OrgBouncycastleAsn1X509AttributeCertificate *)attrCert {
  OrgBouncycastleCertX509AttributeCertificateHolder_initWithOrgBouncycastleAsn1X509AttributeCertificate_(self, attrCert);
  return self;
}

- (void)init__WithOrgBouncycastleAsn1X509AttributeCertificate:(OrgBouncycastleAsn1X509AttributeCertificate *)attrCert {
  OrgBouncycastleCertX509AttributeCertificateHolder_init__WithOrgBouncycastleAsn1X509AttributeCertificate_(self, attrCert);
}


#line 92
- (IOSByteArray *)getEncoded {
  
#line 96
  return [((OrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(attrCert_)) getEncoded];
}


#line 99
- (jint)getVersion {
  
#line 101
  return [((OrgBouncycastleAsn1ASN1Integer *) nil_chk([((OrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((OrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(attrCert_)) getAcinfo])) getVersion])) intValueExact] + 1;
}


#line 109
- (JavaMathBigInteger *)getSerialNumber {
  
#line 111
  return [((OrgBouncycastleAsn1ASN1Integer *) nil_chk([((OrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((OrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(attrCert_)) getAcinfo])) getSerialNumber])) getValue];
}


#line 119
- (OrgBouncycastleCertAttributeCertificateHolder *)getHolder {
  
#line 121
  return new_OrgBouncycastleCertAttributeCertificateHolder_initWithOrgBouncycastleAsn1ASN1Sequence_((OrgBouncycastleAsn1ASN1Sequence *) cast_chk([((OrgBouncycastleAsn1X509Holder *) nil_chk([((OrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((OrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(attrCert_)) getAcinfo])) getHolder])) toASN1Primitive], [OrgBouncycastleAsn1ASN1Sequence class]));
}


#line 129
- (OrgBouncycastleCertAttributeCertificateIssuer *)getIssuer {
  
#line 131
  return new_OrgBouncycastleCertAttributeCertificateIssuer_initWithOrgBouncycastleAsn1X509AttCertIssuer_([((OrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((OrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(attrCert_)) getAcinfo])) getIssuer]);
}


#line 139
- (JavaUtilDate *)getNotBefore {
  
#line 141
  return OrgBouncycastleCertCertUtils_recoverDateWithOrgBouncycastleAsn1ASN1GeneralizedTime_([((OrgBouncycastleAsn1X509AttCertValidityPeriod *) nil_chk([((OrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((OrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(attrCert_)) getAcinfo])) getAttrCertValidityPeriod])) getNotBeforeTime]);
}


#line 149
- (JavaUtilDate *)getNotAfter {
  
#line 151
  return OrgBouncycastleCertCertUtils_recoverDateWithOrgBouncycastleAsn1ASN1GeneralizedTime_([((OrgBouncycastleAsn1X509AttCertValidityPeriod *) nil_chk([((OrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((OrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(attrCert_)) getAcinfo])) getAttrCertValidityPeriod])) getNotAfterTime]);
}


#line 159
- (IOSObjectArray *)getAttributes {
  
#line 161
  OrgBouncycastleAsn1ASN1Sequence *seq = [((OrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((OrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(attrCert_)) getAcinfo])) getAttributes];
  IOSObjectArray *attrs = [IOSObjectArray newArrayWithLength:[((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) size] type:OrgBouncycastleAsn1X509Attribute_class_()];
  
#line 164
  for (jint i = 0; i != [seq size]; i++) {
    
#line 166
    (void) IOSObjectArray_Set(attrs, i, OrgBouncycastleAsn1X509Attribute_getInstanceWithId_([seq getObjectAtWithInt:i]));
  }
  
#line 169
  return attrs;
}


#line 178
- (IOSObjectArray *)getAttributesWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)type {
  
#line 180
  OrgBouncycastleAsn1ASN1Sequence *seq = [((OrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((OrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(attrCert_)) getAcinfo])) getAttributes];
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  
#line 183
  for (jint i = 0; i != [((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) size]; i++) {
    
#line 185
    OrgBouncycastleAsn1X509Attribute *attr = OrgBouncycastleAsn1X509Attribute_getInstanceWithId_([seq getObjectAtWithInt:i]);
    if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgBouncycastleAsn1X509Attribute *) nil_chk(attr)) getAttrType])) equalsWithOrgBouncycastleAsn1ASN1Primitive:type]) {
      
#line 188
      [list addWithId:attr];
    }
  }
  
#line 192
  if ([list size] == 0) {
    
#line 194
    return OrgBouncycastleCertX509AttributeCertificateHolder_EMPTY_ARRAY;
  }
  
#line 197
  return (IOSObjectArray *) cast_check([list toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[list size] type:OrgBouncycastleAsn1X509Attribute_class_()]], IOSClass_arrayType(OrgBouncycastleAsn1X509Attribute_class_(), 1));
}


#line 205
- (jboolean)hasExtensions {
  
#line 207
  return extensions_ != nil;
}


#line 217
- (OrgBouncycastleAsn1X509Extension *)getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)oid {
  
#line 219
  if (extensions_ != nil) {
    
#line 221
    return [extensions_ getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:oid];
  }
  
#line 224
  return nil;
}


#line 232
- (OrgBouncycastleAsn1X509Extensions *)getExtensions {
  
#line 234
  return extensions_;
}


#line 243
- (id<JavaUtilList>)getExtensionOIDs {
  
#line 245
  return OrgBouncycastleCertCertUtils_getExtensionOIDsWithOrgBouncycastleAsn1X509Extensions_(extensions_);
}


#line 254
- (id<JavaUtilSet>)getCriticalExtensionOIDs {
  
#line 256
  return OrgBouncycastleCertCertUtils_getCriticalExtensionOIDsWithOrgBouncycastleAsn1X509Extensions_(extensions_);
}


#line 265
- (id<JavaUtilSet>)getNonCriticalExtensionOIDs {
  
#line 267
  return OrgBouncycastleCertCertUtils_getNonCriticalExtensionOIDsWithOrgBouncycastleAsn1X509Extensions_(extensions_);
}


#line 270
- (IOSBooleanArray *)getIssuerUniqueID {
  
#line 272
  return OrgBouncycastleCertCertUtils_bitStringToBooleanWithOrgBouncycastleAsn1ASN1BitString_([((OrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((OrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(attrCert_)) getAcinfo])) getIssuerUniqueID]);
}


#line 280
- (OrgBouncycastleAsn1X509AlgorithmIdentifier *)getSignatureAlgorithm {
  
#line 282
  return [((OrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(attrCert_)) getSignatureAlgorithm];
}


#line 290
- (IOSByteArray *)getSignature {
  
#line 292
  return [((OrgBouncycastleAsn1ASN1BitString *) nil_chk([((OrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(attrCert_)) getSignatureValue])) getOctets];
}


#line 300
- (OrgBouncycastleAsn1X509AttributeCertificate *)toASN1Structure {
  
#line 302
  return attrCert_;
}


#line 311
- (jboolean)isValidOnWithJavaUtilDate:(JavaUtilDate *)date {
  
#line 313
  OrgBouncycastleAsn1X509AttCertValidityPeriod *certValidityPeriod = [((OrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((OrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(attrCert_)) getAcinfo])) getAttrCertValidityPeriod];
  
#line 315
  return ![((JavaUtilDate *) nil_chk(date)) beforeWithJavaUtilDate:OrgBouncycastleCertCertUtils_recoverDateWithOrgBouncycastleAsn1ASN1GeneralizedTime_([((OrgBouncycastleAsn1X509AttCertValidityPeriod *) nil_chk(certValidityPeriod)) getNotBeforeTime])] && ![date afterWithJavaUtilDate:OrgBouncycastleCertCertUtils_recoverDateWithOrgBouncycastleAsn1ASN1GeneralizedTime_([certValidityPeriod getNotAfterTime])];
}


#line 325
- (jboolean)isSignatureValidWithOrgBouncycastleOperatorContentVerifierProvider:(id<OrgBouncycastleOperatorContentVerifierProvider>)verifierProvider {
  
#line 328
  OrgBouncycastleAsn1X509AttributeCertificateInfo *acinfo = [((OrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(attrCert_)) getAcinfo];
  
#line 330
  if (!OrgBouncycastleCertCertUtils_isAlgIdEqualWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1X509AlgorithmIdentifier_([((OrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk(acinfo)) getSignature], [((OrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(attrCert_)) getSignatureAlgorithm])) {
    
#line 332
    @throw new_OrgBouncycastleCertCertException_initWithNSString_(@"signature invalid - algorithm identifier mismatch");
  }
  
#line 335
  id<OrgBouncycastleOperatorContentVerifier> verifier;
  
#line 337
  @try {
    
#line 339
    verifier = [((id<OrgBouncycastleOperatorContentVerifierProvider>) nil_chk(verifierProvider)) getWithOrgBouncycastleAsn1X509AlgorithmIdentifier:([acinfo getSignature])];
    
#line 341
    JavaIoOutputStream *sOut = [((id<OrgBouncycastleOperatorContentVerifier>) nil_chk(verifier)) getOutputStream];
    [acinfo encodeToWithJavaIoOutputStream:sOut withNSString:OrgBouncycastleAsn1ASN1Encoding_DER];
    [((JavaIoOutputStream *) nil_chk(sOut)) close];
  }
  @catch (JavaLangException *e) {
    
#line 347
    @throw new_OrgBouncycastleCertCertException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"unable to process signature: ", [e getMessage]), e);
  }
  
#line 350
  return [((id<OrgBouncycastleOperatorContentVerifier>) nil_chk(verifier)) verifyWithByteArray:[self getSignature]];
}


#line 353
- (jboolean)isEqual:(id)o {
  
#line 357
  if (JreObjectEqualsEquals(o, self)) {
    
#line 359
    return true;
  }
  
#line 362
  if (!([o isKindOfClass:[OrgBouncycastleCertX509AttributeCertificateHolder class]])) {
    
#line 364
    return false;
  }
  
#line 367
  OrgBouncycastleCertX509AttributeCertificateHolder *other = (OrgBouncycastleCertX509AttributeCertificateHolder *) cast_chk(o, [OrgBouncycastleCertX509AttributeCertificateHolder class]);
  
#line 369
  return [((OrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(self->attrCert_)) isEqual:((OrgBouncycastleCertX509AttributeCertificateHolder *) nil_chk(other))->attrCert_];
}


#line 372
- (NSUInteger)hash {
  
#line 375
  return ((jint) [((OrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(self->attrCert_)) hash]);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  OrgBouncycastleCertX509AttributeCertificateHolder_readObjectWithJavaIoObjectInputStream_(self, inArg);
}


#line 387
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  OrgBouncycastleCertX509AttributeCertificateHolder_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgBouncycastleAsn1X509AttributeCertificate;", 0xa, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCertAttributeCertificateHolder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCertAttributeCertificateIssuer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgBouncycastleAsn1X509Attribute;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgBouncycastleAsn1X509Attribute;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509Extension;", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509Extensions;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509AlgorithmIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509AttributeCertificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, 12, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, 18, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(parseBytesWithByteArray:);
  methods[1].selector = @selector(initWithByteArray:);
  methods[2].selector = @selector(initWithOrgBouncycastleAsn1X509AttributeCertificate:);
  methods[3].selector = @selector(init__WithOrgBouncycastleAsn1X509AttributeCertificate:);
  methods[4].selector = @selector(getEncoded);
  methods[5].selector = @selector(getVersion);
  methods[6].selector = @selector(getSerialNumber);
  methods[7].selector = @selector(getHolder);
  methods[8].selector = @selector(getIssuer);
  methods[9].selector = @selector(getNotBefore);
  methods[10].selector = @selector(getNotAfter);
  methods[11].selector = @selector(getAttributes);
  methods[12].selector = @selector(getAttributesWithOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[13].selector = @selector(hasExtensions);
  methods[14].selector = @selector(getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[15].selector = @selector(getExtensions);
  methods[16].selector = @selector(getExtensionOIDs);
  methods[17].selector = @selector(getCriticalExtensionOIDs);
  methods[18].selector = @selector(getNonCriticalExtensionOIDs);
  methods[19].selector = @selector(getIssuerUniqueID);
  methods[20].selector = @selector(getSignatureAlgorithm);
  methods[21].selector = @selector(getSignature);
  methods[22].selector = @selector(toASN1Structure);
  methods[23].selector = @selector(isValidOnWithJavaUtilDate:);
  methods[24].selector = @selector(isSignatureValidWithOrgBouncycastleOperatorContentVerifierProvider:);
  methods[25].selector = @selector(isEqual:);
  methods[26].selector = @selector(hash);
  methods[27].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[28].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgBouncycastleCertX509AttributeCertificateHolder_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "EMPTY_ARRAY", "[LOrgBouncycastleAsn1X509Attribute;", .constantValue.asLong = 0, 0xa, -1, 21, -1, -1 },
    { "attrCert_", "LOrgBouncycastleAsn1X509AttributeCertificate;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "extensions_", "LOrgBouncycastleAsn1X509Extensions;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "parseBytes", "[B", "LJavaIoIOException;", "LOrgBouncycastleAsn1X509AttributeCertificate;", "init", "getAttributes", "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", "getExtension", "isValidOn", "LJavaUtilDate;", "isSignatureValid", "LOrgBouncycastleOperatorContentVerifierProvider;", "LOrgBouncycastleCertCertException;", "equals", "LNSObject;", "hashCode", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;", &OrgBouncycastleCertX509AttributeCertificateHolder_EMPTY_ARRAY };
  static const J2ObjcClassInfo _OrgBouncycastleCertX509AttributeCertificateHolder = { "X509AttributeCertificateHolder", "org.bouncycastle.cert", ptrTable, methods, fields, 7, 0x1, 29, 4, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCertX509AttributeCertificateHolder;
}

+ (void)initialize {
  if (self == [OrgBouncycastleCertX509AttributeCertificateHolder class]) {
    OrgBouncycastleCertX509AttributeCertificateHolder_EMPTY_ARRAY = [IOSObjectArray newArrayWithLength:
#line 36
    0 type:OrgBouncycastleAsn1X509Attribute_class_()];
    J2OBJC_SET_INITIALIZED(OrgBouncycastleCertX509AttributeCertificateHolder)
  }
}

@end


#line 41
OrgBouncycastleAsn1X509AttributeCertificate *OrgBouncycastleCertX509AttributeCertificateHolder_parseBytesWithByteArray_(IOSByteArray *certEncoding) {
  OrgBouncycastleCertX509AttributeCertificateHolder_initialize();
  
#line 44
  @try {
    
#line 46
    return OrgBouncycastleAsn1X509AttributeCertificate_getInstanceWithId_(OrgBouncycastleCertCertUtils_parseNonEmptyASN1WithByteArray_(certEncoding));
  }
  @catch (JavaLangClassCastException *e) {
    
#line 50
    @throw new_OrgBouncycastleCertCertIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"malformed data: ", [e getMessage]), e);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    
#line 54
    @throw new_OrgBouncycastleCertCertIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"malformed data: ", [e getMessage]), e);
  }
}


#line 64
void OrgBouncycastleCertX509AttributeCertificateHolder_initWithByteArray_(OrgBouncycastleCertX509AttributeCertificateHolder *self, IOSByteArray *certEncoding) {
  OrgBouncycastleCertX509AttributeCertificateHolder_initWithOrgBouncycastleAsn1X509AttributeCertificate_(self, OrgBouncycastleCertX509AttributeCertificateHolder_parseBytesWithByteArray_(
#line 67
  certEncoding));
}


#line 64
OrgBouncycastleCertX509AttributeCertificateHolder *new_OrgBouncycastleCertX509AttributeCertificateHolder_initWithByteArray_(IOSByteArray *certEncoding) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCertX509AttributeCertificateHolder, initWithByteArray_, certEncoding)
}


#line 64
OrgBouncycastleCertX509AttributeCertificateHolder *create_OrgBouncycastleCertX509AttributeCertificateHolder_initWithByteArray_(IOSByteArray *certEncoding) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCertX509AttributeCertificateHolder, initWithByteArray_, certEncoding)
}


#line 75
void OrgBouncycastleCertX509AttributeCertificateHolder_initWithOrgBouncycastleAsn1X509AttributeCertificate_(OrgBouncycastleCertX509AttributeCertificateHolder *self, OrgBouncycastleAsn1X509AttributeCertificate *attrCert) {
  NSObject_init(self);
  OrgBouncycastleCertX509AttributeCertificateHolder_init__WithOrgBouncycastleAsn1X509AttributeCertificate_(self, attrCert);
}


#line 75
OrgBouncycastleCertX509AttributeCertificateHolder *new_OrgBouncycastleCertX509AttributeCertificateHolder_initWithOrgBouncycastleAsn1X509AttributeCertificate_(OrgBouncycastleAsn1X509AttributeCertificate *attrCert) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCertX509AttributeCertificateHolder, initWithOrgBouncycastleAsn1X509AttributeCertificate_, attrCert)
}


#line 75
OrgBouncycastleCertX509AttributeCertificateHolder *create_OrgBouncycastleCertX509AttributeCertificateHolder_initWithOrgBouncycastleAsn1X509AttributeCertificate_(OrgBouncycastleAsn1X509AttributeCertificate *attrCert) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCertX509AttributeCertificateHolder, initWithOrgBouncycastleAsn1X509AttributeCertificate_, attrCert)
}


#line 80
void OrgBouncycastleCertX509AttributeCertificateHolder_init__WithOrgBouncycastleAsn1X509AttributeCertificate_(OrgBouncycastleCertX509AttributeCertificateHolder *self, OrgBouncycastleAsn1X509AttributeCertificate *attrCert) {
  
#line 82
  self->attrCert_ = attrCert;
  self->extensions_ = [((OrgBouncycastleAsn1X509AttributeCertificateInfo *) nil_chk([((OrgBouncycastleAsn1X509AttributeCertificate *) nil_chk(attrCert)) getAcinfo])) getExtensions];
}


#line 378
void OrgBouncycastleCertX509AttributeCertificateHolder_readObjectWithJavaIoObjectInputStream_(OrgBouncycastleCertX509AttributeCertificateHolder *self, JavaIoObjectInputStream *inArg) {
  
#line 382
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  
#line 384
  OrgBouncycastleCertX509AttributeCertificateHolder_init__WithOrgBouncycastleAsn1X509AttributeCertificate_(self, OrgBouncycastleAsn1X509AttributeCertificate_getInstanceWithId_([inArg readObject]));
}

void OrgBouncycastleCertX509AttributeCertificateHolder_writeObjectWithJavaIoObjectOutputStream_(OrgBouncycastleCertX509AttributeCertificateHolder *self, JavaIoObjectOutputStream *outArg) {
  
#line 391
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  
#line 393
  [outArg writeObjectWithId:[self getEncoded]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCertX509AttributeCertificateHolder)
