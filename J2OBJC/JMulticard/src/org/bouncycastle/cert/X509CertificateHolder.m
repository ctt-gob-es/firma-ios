//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cert/X509CertificateHolder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/math/BigInteger.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/bouncycastle/asn1/ASN1BitString.h"
#include "org/bouncycastle/asn1/ASN1Encoding.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/x500/X500Name.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/asn1/x509/Certificate.h"
#include "org/bouncycastle/asn1/x509/Extension.h"
#include "org/bouncycastle/asn1/x509/Extensions.h"
#include "org/bouncycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/bouncycastle/asn1/x509/TBSCertificate.h"
#include "org/bouncycastle/asn1/x509/Time.h"
#include "org/bouncycastle/cert/CertException.h"
#include "org/bouncycastle/cert/CertIOException.h"
#include "org/bouncycastle/cert/CertUtils.h"
#include "org/bouncycastle/cert/X509CertificateHolder.h"
#include "org/bouncycastle/operator/ContentVerifier.h"
#include "org/bouncycastle/operator/ContentVerifierProvider.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/cert/X509CertificateHolder must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCertX509CertificateHolder () {
 @public
  OrgBouncycastleAsn1X509Certificate *x509Certificate_;
  OrgBouncycastleAsn1X509Extensions *extensions_;
}

+ (OrgBouncycastleAsn1X509Certificate *)parseBytesWithByteArray:(IOSByteArray *)certEncoding;

- (void)init__WithOrgBouncycastleAsn1X509Certificate:(OrgBouncycastleAsn1X509Certificate *)x509Certificate OBJC_METHOD_FAMILY_NONE;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCertX509CertificateHolder, x509Certificate_, OrgBouncycastleAsn1X509Certificate *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCertX509CertificateHolder, extensions_, OrgBouncycastleAsn1X509Extensions *)

inline jlong OrgBouncycastleCertX509CertificateHolder_get_serialVersionUID(void);
#define OrgBouncycastleCertX509CertificateHolder_serialVersionUID 20170722001LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCertX509CertificateHolder, serialVersionUID, jlong)

__attribute__((unused)) static OrgBouncycastleAsn1X509Certificate *OrgBouncycastleCertX509CertificateHolder_parseBytesWithByteArray_(IOSByteArray *certEncoding);

__attribute__((unused)) static void OrgBouncycastleCertX509CertificateHolder_init__WithOrgBouncycastleAsn1X509Certificate_(OrgBouncycastleCertX509CertificateHolder *self, OrgBouncycastleAsn1X509Certificate *x509Certificate);

__attribute__((unused)) static void OrgBouncycastleCertX509CertificateHolder_readObjectWithJavaIoObjectInputStream_(OrgBouncycastleCertX509CertificateHolder *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void OrgBouncycastleCertX509CertificateHolder_writeObjectWithJavaIoObjectOutputStream_(OrgBouncycastleCertX509CertificateHolder *self, JavaIoObjectOutputStream *outArg);

__attribute__((unused)) static IOSObjectArray *OrgBouncycastleCertX509CertificateHolder__Annotations$0(void);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/cert/X509CertificateHolder.java"


#line 29
@implementation OrgBouncycastleCertX509CertificateHolder


#line 37
+ (OrgBouncycastleAsn1X509Certificate *)parseBytesWithByteArray:(IOSByteArray *)certEncoding {
  return OrgBouncycastleCertX509CertificateHolder_parseBytesWithByteArray_(certEncoding);
}


#line 60
- (instancetype)initWithByteArray:(IOSByteArray *)certEncoding {
  OrgBouncycastleCertX509CertificateHolder_initWithByteArray_(self, certEncoding);
  return self;
}


#line 71
- (instancetype)initWithOrgBouncycastleAsn1X509Certificate:(OrgBouncycastleAsn1X509Certificate *)x509Certificate {
  OrgBouncycastleCertX509CertificateHolder_initWithOrgBouncycastleAsn1X509Certificate_(self, x509Certificate);
  return self;
}

- (void)init__WithOrgBouncycastleAsn1X509Certificate:(OrgBouncycastleAsn1X509Certificate *)x509Certificate {
  OrgBouncycastleCertX509CertificateHolder_init__WithOrgBouncycastleAsn1X509Certificate_(self, x509Certificate);
}


#line 82
- (jint)getVersionNumber {
  
#line 84
  return [((OrgBouncycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getVersionNumber];
}


#line 90
- (jint)getVersion {
  
#line 93
  return [((OrgBouncycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getVersionNumber];
}


#line 101
- (jboolean)hasExtensions {
  
#line 103
  return extensions_ != nil;
}


#line 113
- (OrgBouncycastleAsn1X509Extension *)getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)oid {
  
#line 115
  if (extensions_ != nil) {
    
#line 117
    return [extensions_ getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:oid];
  }
  
#line 120
  return nil;
}


#line 128
- (OrgBouncycastleAsn1X509Extensions *)getExtensions {
  
#line 130
  return extensions_;
}


#line 139
- (id<JavaUtilList>)getExtensionOIDs {
  
#line 141
  return OrgBouncycastleCertCertUtils_getExtensionOIDsWithOrgBouncycastleAsn1X509Extensions_(extensions_);
}


#line 150
- (id<JavaUtilSet>)getCriticalExtensionOIDs {
  
#line 152
  return OrgBouncycastleCertCertUtils_getCriticalExtensionOIDsWithOrgBouncycastleAsn1X509Extensions_(extensions_);
}


#line 161
- (id<JavaUtilSet>)getNonCriticalExtensionOIDs {
  
#line 163
  return OrgBouncycastleCertCertUtils_getNonCriticalExtensionOIDsWithOrgBouncycastleAsn1X509Extensions_(extensions_);
}


#line 171
- (JavaMathBigInteger *)getSerialNumber {
  
#line 173
  return [((OrgBouncycastleAsn1ASN1Integer *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getSerialNumber])) getValue];
}


#line 181
- (OrgBouncycastleAsn1X500X500Name *)getIssuer {
  
#line 183
  return OrgBouncycastleAsn1X500X500Name_getInstanceWithId_([((OrgBouncycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getIssuer]);
}


#line 191
- (OrgBouncycastleAsn1X500X500Name *)getSubject {
  
#line 193
  return OrgBouncycastleAsn1X500X500Name_getInstanceWithId_([((OrgBouncycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getSubject]);
}


#line 201
- (JavaUtilDate *)getNotBefore {
  
#line 203
  return [((OrgBouncycastleAsn1X509Time *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getStartDate])) getDate];
}


#line 211
- (JavaUtilDate *)getNotAfter {
  
#line 213
  return [((OrgBouncycastleAsn1X509Time *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getEndDate])) getDate];
}


#line 221
- (OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)getSubjectPublicKeyInfo {
  
#line 223
  return [((OrgBouncycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getSubjectPublicKeyInfo];
}


#line 231
- (OrgBouncycastleAsn1X509Certificate *)toASN1Structure {
  
#line 233
  return x509Certificate_;
}


#line 241
- (OrgBouncycastleAsn1X509AlgorithmIdentifier *)getSignatureAlgorithm {
  
#line 243
  return [((OrgBouncycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getSignatureAlgorithm];
}


#line 251
- (IOSByteArray *)getSignature {
  
#line 253
  return [((OrgBouncycastleAsn1ASN1BitString *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getSignature])) getOctets];
}


#line 262
- (jboolean)isValidOnWithJavaUtilDate:(JavaUtilDate *)date {
  
#line 264
  return ![((JavaUtilDate *) nil_chk(date)) beforeWithJavaUtilDate:[((OrgBouncycastleAsn1X509Time *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getStartDate])) getDate]] && ![date afterWithJavaUtilDate:[((OrgBouncycastleAsn1X509Time *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getEndDate])) getDate]];
}


#line 274
- (jboolean)isSignatureValidWithOrgBouncycastleOperatorContentVerifierProvider:(id<OrgBouncycastleOperatorContentVerifierProvider>)verifierProvider {
  
#line 277
  OrgBouncycastleAsn1X509TBSCertificate *tbsCert = [((OrgBouncycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getTBSCertificate];
  
#line 279
  if (!OrgBouncycastleCertCertUtils_isAlgIdEqualWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1X509AlgorithmIdentifier_([((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk(tbsCert)) getSignature], [((OrgBouncycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getSignatureAlgorithm])) {
    
#line 281
    @throw new_OrgBouncycastleCertCertException_initWithNSString_(@"signature invalid - algorithm identifier mismatch");
  }
  
#line 284
  id<OrgBouncycastleOperatorContentVerifier> verifier;
  
#line 286
  @try {
    
#line 288
    verifier = [((id<OrgBouncycastleOperatorContentVerifierProvider>) nil_chk(verifierProvider)) getWithOrgBouncycastleAsn1X509AlgorithmIdentifier:([tbsCert getSignature])];
    
#line 290
    JavaIoOutputStream *sOut = [((id<OrgBouncycastleOperatorContentVerifier>) nil_chk(verifier)) getOutputStream];
    [tbsCert encodeToWithJavaIoOutputStream:sOut withNSString:OrgBouncycastleAsn1ASN1Encoding_DER];
    [((JavaIoOutputStream *) nil_chk(sOut)) close];
  }
  @catch (JavaLangException *e) {
    
#line 296
    @throw new_OrgBouncycastleCertCertException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"unable to process signature: ", [e getMessage]), e);
  }
  
#line 299
  return [((id<OrgBouncycastleOperatorContentVerifier>) nil_chk(verifier)) verifyWithByteArray:[self getSignature]];
}


#line 302
- (jboolean)isEqual:(id)o {
  
#line 306
  if (JreObjectEqualsEquals(o, self)) {
    
#line 308
    return true;
  }
  
#line 311
  if (!([o isKindOfClass:[OrgBouncycastleCertX509CertificateHolder class]])) {
    
#line 313
    return false;
  }
  
#line 316
  OrgBouncycastleCertX509CertificateHolder *other = (OrgBouncycastleCertX509CertificateHolder *) cast_chk(o, [OrgBouncycastleCertX509CertificateHolder class]);
  
#line 318
  return [((OrgBouncycastleAsn1X509Certificate *) nil_chk(self->x509Certificate_)) isEqual:((OrgBouncycastleCertX509CertificateHolder *) nil_chk(other))->x509Certificate_];
}


#line 321
- (NSUInteger)hash {
  
#line 324
  return ((jint) [((OrgBouncycastleAsn1X509Certificate *) nil_chk(self->x509Certificate_)) hash]);
}


#line 333
- (IOSByteArray *)getEncoded {
  
#line 337
  return [((OrgBouncycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getEncoded];
}


#line 340
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  OrgBouncycastleCertX509CertificateHolder_readObjectWithJavaIoObjectInputStream_(self, inArg);
}


#line 349
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  OrgBouncycastleCertX509CertificateHolder_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgBouncycastleAsn1X509Certificate;", 0xa, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509Extension;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509Extensions;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509Certificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509AlgorithmIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, 12, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, 18, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(parseBytesWithByteArray:);
  methods[1].selector = @selector(initWithByteArray:);
  methods[2].selector = @selector(initWithOrgBouncycastleAsn1X509Certificate:);
  methods[3].selector = @selector(init__WithOrgBouncycastleAsn1X509Certificate:);
  methods[4].selector = @selector(getVersionNumber);
  methods[5].selector = @selector(getVersion);
  methods[6].selector = @selector(hasExtensions);
  methods[7].selector = @selector(getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[8].selector = @selector(getExtensions);
  methods[9].selector = @selector(getExtensionOIDs);
  methods[10].selector = @selector(getCriticalExtensionOIDs);
  methods[11].selector = @selector(getNonCriticalExtensionOIDs);
  methods[12].selector = @selector(getSerialNumber);
  methods[13].selector = @selector(getIssuer);
  methods[14].selector = @selector(getSubject);
  methods[15].selector = @selector(getNotBefore);
  methods[16].selector = @selector(getNotAfter);
  methods[17].selector = @selector(getSubjectPublicKeyInfo);
  methods[18].selector = @selector(toASN1Structure);
  methods[19].selector = @selector(getSignatureAlgorithm);
  methods[20].selector = @selector(getSignature);
  methods[21].selector = @selector(isValidOnWithJavaUtilDate:);
  methods[22].selector = @selector(isSignatureValidWithOrgBouncycastleOperatorContentVerifierProvider:);
  methods[23].selector = @selector(isEqual:);
  methods[24].selector = @selector(hash);
  methods[25].selector = @selector(getEncoded);
  methods[26].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[27].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgBouncycastleCertX509CertificateHolder_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "x509Certificate_", "LOrgBouncycastleAsn1X509Certificate;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "extensions_", "LOrgBouncycastleAsn1X509Extensions;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "parseBytes", "[B", "LJavaIoIOException;", "LOrgBouncycastleAsn1X509Certificate;", "init", (void *)&OrgBouncycastleCertX509CertificateHolder__Annotations$0, "getExtension", "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", "isValidOn", "LJavaUtilDate;", "isSignatureValid", "LOrgBouncycastleOperatorContentVerifierProvider;", "LOrgBouncycastleCertCertException;", "equals", "LNSObject;", "hashCode", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;" };
  static const J2ObjcClassInfo _OrgBouncycastleCertX509CertificateHolder = { "X509CertificateHolder", "org.bouncycastle.cert", ptrTable, methods, fields, 7, 0x1, 28, 3, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCertX509CertificateHolder;
}

@end


#line 37
OrgBouncycastleAsn1X509Certificate *OrgBouncycastleCertX509CertificateHolder_parseBytesWithByteArray_(IOSByteArray *certEncoding) {
  OrgBouncycastleCertX509CertificateHolder_initialize();
  
#line 40
  @try {
    
#line 42
    return OrgBouncycastleAsn1X509Certificate_getInstanceWithId_(OrgBouncycastleCertCertUtils_parseNonEmptyASN1WithByteArray_(certEncoding));
  }
  @catch (JavaLangClassCastException *e) {
    
#line 46
    @throw new_OrgBouncycastleCertCertIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"malformed data: ", [e getMessage]), e);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    
#line 50
    @throw new_OrgBouncycastleCertCertIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"malformed data: ", [e getMessage]), e);
  }
}


#line 60
void OrgBouncycastleCertX509CertificateHolder_initWithByteArray_(OrgBouncycastleCertX509CertificateHolder *self, IOSByteArray *certEncoding) {
  OrgBouncycastleCertX509CertificateHolder_initWithOrgBouncycastleAsn1X509Certificate_(self, OrgBouncycastleCertX509CertificateHolder_parseBytesWithByteArray_(
#line 63
  certEncoding));
}


#line 60
OrgBouncycastleCertX509CertificateHolder *new_OrgBouncycastleCertX509CertificateHolder_initWithByteArray_(IOSByteArray *certEncoding) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCertX509CertificateHolder, initWithByteArray_, certEncoding)
}


#line 60
OrgBouncycastleCertX509CertificateHolder *create_OrgBouncycastleCertX509CertificateHolder_initWithByteArray_(IOSByteArray *certEncoding) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCertX509CertificateHolder, initWithByteArray_, certEncoding)
}


#line 71
void OrgBouncycastleCertX509CertificateHolder_initWithOrgBouncycastleAsn1X509Certificate_(OrgBouncycastleCertX509CertificateHolder *self, OrgBouncycastleAsn1X509Certificate *x509Certificate) {
  NSObject_init(self);
  OrgBouncycastleCertX509CertificateHolder_init__WithOrgBouncycastleAsn1X509Certificate_(self, x509Certificate);
}


#line 71
OrgBouncycastleCertX509CertificateHolder *new_OrgBouncycastleCertX509CertificateHolder_initWithOrgBouncycastleAsn1X509Certificate_(OrgBouncycastleAsn1X509Certificate *x509Certificate) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCertX509CertificateHolder, initWithOrgBouncycastleAsn1X509Certificate_, x509Certificate)
}


#line 71
OrgBouncycastleCertX509CertificateHolder *create_OrgBouncycastleCertX509CertificateHolder_initWithOrgBouncycastleAsn1X509Certificate_(OrgBouncycastleAsn1X509Certificate *x509Certificate) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCertX509CertificateHolder, initWithOrgBouncycastleAsn1X509Certificate_, x509Certificate)
}


#line 76
void OrgBouncycastleCertX509CertificateHolder_init__WithOrgBouncycastleAsn1X509Certificate_(OrgBouncycastleCertX509CertificateHolder *self, OrgBouncycastleAsn1X509Certificate *x509Certificate) {
  
#line 78
  self->x509Certificate_ = x509Certificate;
  self->extensions_ = [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(x509Certificate)) getTBSCertificate])) getExtensions];
}


#line 340
void OrgBouncycastleCertX509CertificateHolder_readObjectWithJavaIoObjectInputStream_(OrgBouncycastleCertX509CertificateHolder *self, JavaIoObjectInputStream *inArg) {
  
#line 344
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  
#line 346
  OrgBouncycastleCertX509CertificateHolder_init__WithOrgBouncycastleAsn1X509Certificate_(self, OrgBouncycastleAsn1X509Certificate_getInstanceWithId_([inArg readObject]));
}

void OrgBouncycastleCertX509CertificateHolder_writeObjectWithJavaIoObjectOutputStream_(OrgBouncycastleCertX509CertificateHolder *self, JavaIoObjectOutputStream *outArg) {
  
#line 353
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  
#line 355
  [outArg writeObjectWithId:[self getEncoded]];
}

IOSObjectArray *OrgBouncycastleCertX509CertificateHolder__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCertX509CertificateHolder)
