//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/paddings/BlockCipherPadding.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoPaddingsBlockCipherPadding")
#ifdef RESTRICT_OrgBouncycastleCryptoPaddingsBlockCipherPadding
#define INCLUDE_ALL_OrgBouncycastleCryptoPaddingsBlockCipherPadding 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoPaddingsBlockCipherPadding 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoPaddingsBlockCipherPadding

#if !defined (OrgBouncycastleCryptoPaddingsBlockCipherPadding_) && (INCLUDE_ALL_OrgBouncycastleCryptoPaddingsBlockCipherPadding || defined(INCLUDE_OrgBouncycastleCryptoPaddingsBlockCipherPadding))
#define OrgBouncycastleCryptoPaddingsBlockCipherPadding_

@class IOSByteArray;
@class JavaSecuritySecureRandom;

/*!
 @brief Block cipher padders are expected to conform to this interface
 */
@protocol OrgBouncycastleCryptoPaddingsBlockCipherPadding < JavaObject >

/*!
 @brief Initialise the padder.
 @param random the source of randomness for the padding, if required.
 */
- (void)init__WithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Return the name of the algorithm the cipher implements.
 @return the name of the algorithm the cipher implements.
 */
- (NSString *)getPaddingName;

/*!
 @brief add the pad bytes to the passed in block, returning the
  number of bytes added.
 <p>
  Note: this assumes that the last block of plain text is always 
  passed to it inside in. i.e. if inOff is zero, indicating the
  entire block is to be overwritten with padding the value of in
  should be the same as the last block of plain text. The reason
  for this is that some modes such as "trailing bit compliment"
  base the padding on the last byte of plain text. 
 </p>
 */
- (jint)addPaddingWithByteArray:(IOSByteArray *)inArg
                        withInt:(jint)inOff;

/*!
 @brief return the number of pad bytes present in the block.
 @throw InvalidCipherTextExceptionif the padding is badly formed
  or invalid.
 */
- (jint)padCountWithByteArray:(IOSByteArray *)inArg;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCryptoPaddingsBlockCipherPadding)

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoPaddingsBlockCipherPadding)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoPaddingsBlockCipherPadding")
