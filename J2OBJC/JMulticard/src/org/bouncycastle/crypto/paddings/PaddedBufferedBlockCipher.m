//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/paddings/PaddedBufferedBlockCipher.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/BlockCipher.h"
#include "org/bouncycastle/crypto/BufferedBlockCipher.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/DataLengthException.h"
#include "org/bouncycastle/crypto/OutputLengthException.h"
#include "org/bouncycastle/crypto/paddings/BlockCipherPadding.h"
#include "org/bouncycastle/crypto/paddings/PKCS7Padding.h"
#include "org/bouncycastle/crypto/paddings/PaddedBufferedBlockCipher.h"
#include "org/bouncycastle/crypto/params/ParametersWithRandom.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/paddings/PaddedBufferedBlockCipher must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/paddings/PaddedBufferedBlockCipher.java"


#line 18
@implementation OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher


#line 29
- (instancetype)initWithOrgBouncycastleCryptoBlockCipher:(id<OrgBouncycastleCryptoBlockCipher>)cipher
     withOrgBouncycastleCryptoPaddingsBlockCipherPadding:(id<OrgBouncycastleCryptoPaddingsBlockCipherPadding>)padding {
  OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_withOrgBouncycastleCryptoPaddingsBlockCipherPadding_(self, cipher, padding);
  return self;
}


#line 45
- (instancetype)initWithOrgBouncycastleCryptoBlockCipher:(id<OrgBouncycastleCryptoBlockCipher>)cipher {
  OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(self, cipher);
  return self;
}


#line 60
- (void)init__WithBoolean:(jboolean)forEncryption
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)params {
  
#line 66
  self->forEncryption_ = forEncryption;
  
#line 68
  [self reset];
  
#line 70
  if ([params isKindOfClass:[OrgBouncycastleCryptoParamsParametersWithRandom class]]) {
    
#line 72
    OrgBouncycastleCryptoParamsParametersWithRandom *p = (OrgBouncycastleCryptoParamsParametersWithRandom *) params;
    
#line 74
    [((id<OrgBouncycastleCryptoPaddingsBlockCipherPadding>) nil_chk(padding_)) init__WithJavaSecuritySecureRandom:[((OrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(p)) getRandom]];
    
#line 76
    [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:forEncryption withOrgBouncycastleCryptoCipherParameters:[p getParameters]];
  }
  else {
    
#line 80
    [((id<OrgBouncycastleCryptoPaddingsBlockCipherPadding>) nil_chk(padding_)) init__WithJavaSecuritySecureRandom:nil];
    
#line 82
    [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:forEncryption withOrgBouncycastleCryptoCipherParameters:params];
  }
}


#line 94
- (jint)getOutputSizeWithInt:(jint)len {
  
#line 98
  jint total = len + bufOff_;
  jint leftOver = JreIntMod(total, ((IOSByteArray *) nil_chk(buf_))->size_);
  
#line 101
  if (leftOver == 0) {
    
#line 103
    if (forEncryption_) {
      
#line 105
      return total + buf_->size_;
    }
    
#line 108
    return total;
  }
  
#line 111
  return total - leftOver + buf_->size_;
}


#line 122
- (jint)getUpdateOutputSizeWithInt:(jint)len {
  
#line 126
  jint total = len + bufOff_;
  jint leftOver = JreIntMod(total, ((IOSByteArray *) nil_chk(buf_))->size_);
  
#line 129
  if (leftOver == 0) {
    
#line 131
    return JavaLangMath_maxWithInt_withInt_(0, total - buf_->size_);
  }
  
#line 134
  return total - leftOver;
}


#line 147
- (jint)processByteWithByte:(jbyte)inArg
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff {
  
#line 154
  jint resultLen = 0;
  
#line 156
  if (bufOff_ == ((IOSByteArray *) nil_chk(buf_))->size_) {
    
#line 158
    resultLen = [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
    bufOff_ = 0;
  }
  
#line 162
  *IOSByteArray_GetRef(nil_chk(buf_), bufOff_++) = inArg;
  
#line 164
  return resultLen;
}


#line 179
- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  
#line 188
  if (len < 0) {
    
#line 190
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't have a negative input length!");
  }
  
#line 193
  jint blockSize = [self getBlockSize];
  jint length = [self getUpdateOutputSizeWithInt:len];
  
#line 196
  if (length > 0) {
    
#line 198
    if ((outOff + length) > ((IOSByteArray *) nil_chk(outArg))->size_) {
      
#line 200
      @throw new_OrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
    }
  }
  
#line 204
  jint resultLen = 0;
  jint gapLen = ((IOSByteArray *) nil_chk(buf_))->size_ - bufOff_;
  
#line 207
  if (len > gapLen) {
    
#line 209
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, gapLen);
    
#line 211
    resultLen += [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
    
#line 213
    bufOff_ = 0;
    len -= gapLen;
    inOff += gapLen;
    
#line 217
    while (len > ((IOSByteArray *) nil_chk(buf_))->size_) {
      
#line 219
      resultLen += [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:inArg withInt:inOff withByteArray:outArg withInt:outOff + resultLen];
      
#line 221
      len -= blockSize;
      inOff += blockSize;
    }
  }
  
#line 226
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, len);
  
#line 228
  bufOff_ += len;
  
#line 230
  return resultLen;
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  
#line 253
  jint blockSize = [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize];
  jint resultLen = 0;
  
#line 256
  if (forEncryption_) {
    
#line 258
    if (bufOff_ == blockSize) {
      
#line 260
      if ((outOff + 2 * blockSize) > ((IOSByteArray *) nil_chk(outArg))->size_) {
        
#line 262
        [self reset];
        
#line 264
        @throw new_OrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
      }
      
#line 267
      resultLen = [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
      bufOff_ = 0;
    }
    
#line 271
    [((id<OrgBouncycastleCryptoPaddingsBlockCipherPadding>) nil_chk(padding_)) addPaddingWithByteArray:buf_ withInt:bufOff_];
    
#line 273
    resultLen += [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff + resultLen];
    
#line 275
    [self reset];
  }
  else {
    
#line 279
    if (bufOff_ == blockSize) {
      
#line 281
      resultLen = [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:buf_ withInt:0];
      bufOff_ = 0;
    }
    else {
      
#line 286
      [self reset];
      
#line 288
      @throw new_OrgBouncycastleCryptoDataLengthException_initWithNSString_(@"last block incomplete in decryption");
    }
    
#line 291
    @try {
      
#line 293
      resultLen -= [((id<OrgBouncycastleCryptoPaddingsBlockCipherPadding>) nil_chk(padding_)) padCountWithByteArray:buf_];
      
#line 295
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, 0, outArg, outOff, resultLen);
    }
    @finally {
      
#line 299
      [self reset];
    }
  }
  
#line 303
  return resultLen;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 9, 10, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 12, 10, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 14, 15, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleCryptoBlockCipher:withOrgBouncycastleCryptoPaddingsBlockCipherPadding:);
  methods[1].selector = @selector(initWithOrgBouncycastleCryptoBlockCipher:);
  methods[2].selector = @selector(init__WithBoolean:withOrgBouncycastleCryptoCipherParameters:);
  methods[3].selector = @selector(getOutputSizeWithInt:);
  methods[4].selector = @selector(getUpdateOutputSizeWithInt:);
  methods[5].selector = @selector(processByteWithByte:withByteArray:withInt:);
  methods[6].selector = @selector(processBytesWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[7].selector = @selector(doFinalWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "padding_", "LOrgBouncycastleCryptoPaddingsBlockCipherPadding;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleCryptoBlockCipher;LOrgBouncycastleCryptoPaddingsBlockCipherPadding;", "LOrgBouncycastleCryptoBlockCipher;", "init", "ZLOrgBouncycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "getOutputSize", "I", "getUpdateOutputSize", "processByte", "B[BI", "LOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "processBytes", "[BII[BI", "doFinal", "[BI", "LOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;LOrgBouncycastleCryptoInvalidCipherTextException;" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher = { "PaddedBufferedBlockCipher", "org.bouncycastle.crypto.paddings", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher;
}

@end


#line 29
void OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_withOrgBouncycastleCryptoPaddingsBlockCipherPadding_(OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *self, id<OrgBouncycastleCryptoBlockCipher> cipher, id<OrgBouncycastleCryptoPaddingsBlockCipherPadding> padding) {
  OrgBouncycastleCryptoBufferedBlockCipher_init(self);
  
#line 33
  self->cipher_ = cipher;
  self->padding_ = padding;
  
#line 36
  self->buf_ = [IOSByteArray newArrayWithLength:[((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize]];
  self->bufOff_ = 0;
}


#line 29
OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *new_OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_withOrgBouncycastleCryptoPaddingsBlockCipherPadding_(id<OrgBouncycastleCryptoBlockCipher> cipher, id<OrgBouncycastleCryptoPaddingsBlockCipherPadding> padding) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher, initWithOrgBouncycastleCryptoBlockCipher_withOrgBouncycastleCryptoPaddingsBlockCipherPadding_, cipher, padding)
}


#line 29
OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *create_OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_withOrgBouncycastleCryptoPaddingsBlockCipherPadding_(id<OrgBouncycastleCryptoBlockCipher> cipher, id<OrgBouncycastleCryptoPaddingsBlockCipherPadding> padding) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher, initWithOrgBouncycastleCryptoBlockCipher_withOrgBouncycastleCryptoPaddingsBlockCipherPadding_, cipher, padding)
}


#line 45
void OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *self, id<OrgBouncycastleCryptoBlockCipher> cipher) {
  OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_withOrgBouncycastleCryptoPaddingsBlockCipherPadding_(self,
#line 48
  cipher, new_OrgBouncycastleCryptoPaddingsPKCS7Padding_init());
}


#line 45
OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *new_OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(id<OrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher, initWithOrgBouncycastleCryptoBlockCipher_, cipher)
}


#line 45
OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher *create_OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(id<OrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher, initWithOrgBouncycastleCryptoBlockCipher_, cipher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher)
