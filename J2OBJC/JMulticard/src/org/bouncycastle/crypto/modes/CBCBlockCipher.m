//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "org/bouncycastle/crypto/BlockCipher.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/DataLengthException.h"
#include "org/bouncycastle/crypto/DefaultMultiBlockCipher.h"
#include "org/bouncycastle/crypto/modes/CBCBlockCipher.h"
#include "org/bouncycastle/crypto/modes/CBCModeCipher.h"
#include "org/bouncycastle/crypto/params/ParametersWithIV.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/modes/CBCBlockCipher must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoModesCBCBlockCipher () {
 @public
  IOSByteArray *IV_;
  IOSByteArray *cbcV_;
  IOSByteArray *cbcNextV_;
  jint blockSize_;
  id<OrgBouncycastleCryptoBlockCipher> cipher_;
  jboolean encrypting_;
}

/*!
 @brief Do the appropriate chaining step for CBC mode encryption.
 @param inArg the array containing the data to be encrypted.
 @param inOff offset into the in array the data starts at.
 @param outArg the array the encrypted data will be copied into.
 @param outOff the offset into the out array the output will start at.
 @throw DataLengthExceptionif there isn't enough data in in, or
  space in out.
 @throw IllegalStateExceptionif the cipher isn't initialised.
 @return the number of bytes processed and produced.
 */
- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

/*!
 @brief Do the appropriate chaining step for CBC mode decryption.
 @param inArg the array containing the data to be decrypted.
 @param inOff offset into the in array the data starts at.
 @param outArg the array the decrypted data will be copied into.
 @param outOff the offset into the out array the output will start at.
 @throw DataLengthExceptionif there isn't enough data in in, or
  space in out.
 @throw IllegalStateExceptionif the cipher isn't initialised.
 @return the number of bytes processed and produced.
 */
- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoModesCBCBlockCipher, IV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoModesCBCBlockCipher, cbcV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoModesCBCBlockCipher, cbcNextV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoModesCBCBlockCipher, cipher_, id<OrgBouncycastleCryptoBlockCipher>)

__attribute__((unused)) static jint OrgBouncycastleCryptoModesCBCBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgBouncycastleCryptoModesCBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static jint OrgBouncycastleCryptoModesCBCBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgBouncycastleCryptoModesCBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static IOSObjectArray *OrgBouncycastleCryptoModesCBCBlockCipher__Annotations$0(void);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java"


#line 13
@implementation OrgBouncycastleCryptoModesCBCBlockCipher


#line 30
+ (id<OrgBouncycastleCryptoModesCBCModeCipher>)newInstanceWithOrgBouncycastleCryptoBlockCipher:(id<OrgBouncycastleCryptoBlockCipher>)cipher {
  return OrgBouncycastleCryptoModesCBCBlockCipher_newInstanceWithOrgBouncycastleCryptoBlockCipher_(cipher);
}


#line 41
- (instancetype)initWithOrgBouncycastleCryptoBlockCipher:(id<OrgBouncycastleCryptoBlockCipher>)cipher {
  OrgBouncycastleCryptoModesCBCBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(self, cipher);
  return self;
}


#line 58
- (id<OrgBouncycastleCryptoBlockCipher>)getUnderlyingCipher {
  
#line 60
  return cipher_;
}


#line 73
- (void)init__WithBoolean:(jboolean)encrypting
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)params {
  
#line 78
  jboolean oldEncrypting = self->encrypting_;
  
#line 80
  self->encrypting_ = encrypting;
  
#line 82
  if ([params isKindOfClass:[OrgBouncycastleCryptoParamsParametersWithIV class]]) {
    
#line 84
    OrgBouncycastleCryptoParamsParametersWithIV *ivParam = (OrgBouncycastleCryptoParamsParametersWithIV *) params;
    IOSByteArray *iv = [((OrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(ivParam)) getIV];
    
#line 87
    if (((IOSByteArray *) nil_chk(iv))->size_ != blockSize_) {
      
#line 89
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"initialisation vector must be the same length as block size");
    }
    
#line 92
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, IV_, 0, iv->size_);
    
#line 94
    params = [ivParam getParameters];
  }
  else {
    
#line 98
    OrgBouncycastleUtilArrays_fillWithByteArray_withByte_(IV_, (jbyte) 0);
  }
  
#line 101
  [self reset];
  
#line 104
  if (params != nil) {
    
#line 106
    [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:encrypting withOrgBouncycastleCryptoCipherParameters:params];
  }
  else if (oldEncrypting != encrypting) {
    
#line 110
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cannot change encrypting state without providing key.");
  }
}


#line 119
- (NSString *)getAlgorithmName {
  
#line 121
  return JreStrcat("$$", [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getAlgorithmName], @"/CBC");
}


#line 129
- (jint)getBlockSize {
  
#line 131
  return [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize];
}


#line 147
- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  
#line 154
  return encrypting_ ? OrgBouncycastleCryptoModesCBCBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff) : OrgBouncycastleCryptoModesCBCBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}


#line 161
- (void)reset {
  
#line 163
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IV_, 0, cbcV_, 0, ((IOSByteArray *) nil_chk(IV_))->size_);
  OrgBouncycastleUtilArrays_fillWithByteArray_withByte_(cbcNextV_, (jbyte) 0);
  
#line 166
  [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) reset];
}


#line 181
- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return OrgBouncycastleCryptoModesCBCBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}


#line 224
- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return OrgBouncycastleCryptoModesCBCBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgBouncycastleCryptoModesCBCModeCipher;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, 2, -1 },
    { NULL, "LOrgBouncycastleCryptoBlockCipher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 9, 7, 8, -1, -1, -1 },
    { NULL, "I", 0x2, 10, 7, 8, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(newInstanceWithOrgBouncycastleCryptoBlockCipher:);
  methods[1].selector = @selector(initWithOrgBouncycastleCryptoBlockCipher:);
  methods[2].selector = @selector(getUnderlyingCipher);
  methods[3].selector = @selector(init__WithBoolean:withOrgBouncycastleCryptoCipherParameters:);
  methods[4].selector = @selector(getAlgorithmName);
  methods[5].selector = @selector(getBlockSize);
  methods[6].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[7].selector = @selector(reset);
  methods[8].selector = @selector(encryptBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[9].selector = @selector(decryptBlockWithByteArray:withInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IV_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cbcV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cbcNextV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cipher_", "LOrgBouncycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encrypting_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newInstance", "LOrgBouncycastleCryptoBlockCipher;", (void *)&OrgBouncycastleCryptoModesCBCBlockCipher__Annotations$0, "init", "ZLOrgBouncycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "processBlock", "[BI[BI", "LOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "encryptBlock", "decryptBlock" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoModesCBCBlockCipher = { "CBCBlockCipher", "org.bouncycastle.crypto.modes", ptrTable, methods, fields, 7, 0x1, 10, 6, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoModesCBCBlockCipher;
}

@end


#line 30
id<OrgBouncycastleCryptoModesCBCModeCipher> OrgBouncycastleCryptoModesCBCBlockCipher_newInstanceWithOrgBouncycastleCryptoBlockCipher_(id<OrgBouncycastleCryptoBlockCipher> cipher) {
  OrgBouncycastleCryptoModesCBCBlockCipher_initialize();
  return new_OrgBouncycastleCryptoModesCBCBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(cipher);
}


#line 41
void OrgBouncycastleCryptoModesCBCBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(OrgBouncycastleCryptoModesCBCBlockCipher *self, id<OrgBouncycastleCryptoBlockCipher> cipher) {
  OrgBouncycastleCryptoDefaultMultiBlockCipher_init(self);
  self->cipher_ =
#line 22
  nil;
  
#line 45
  self->cipher_ = cipher;
  self->blockSize_ = [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize];
  
#line 48
  self->IV_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->cbcV_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->cbcNextV_ = [IOSByteArray newArrayWithLength:self->blockSize_];
}


#line 41
OrgBouncycastleCryptoModesCBCBlockCipher *new_OrgBouncycastleCryptoModesCBCBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(id<OrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoModesCBCBlockCipher, initWithOrgBouncycastleCryptoBlockCipher_, cipher)
}


#line 41
OrgBouncycastleCryptoModesCBCBlockCipher *create_OrgBouncycastleCryptoModesCBCBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(id<OrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoModesCBCBlockCipher, initWithOrgBouncycastleCryptoBlockCipher_, cipher)
}


#line 181
jint OrgBouncycastleCryptoModesCBCBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgBouncycastleCryptoModesCBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  
#line 188
  if (inOff + self->blockSize_ > ((IOSByteArray *) nil_chk(inArg))->size_) {
    
#line 190
    @throw new_OrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  
#line 197
  for (jint i = 0; i < self->blockSize_; i++) {
    
#line 199
    *IOSByteArray_GetRef(nil_chk(self->cbcV_), i) ^= IOSByteArray_Get(inArg, inOff + i);
  }
  
#line 202
  jint length = [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:self->cbcV_ withInt:0 withByteArray:outArg withInt:outOff];
  
#line 207
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(outArg, outOff, self->cbcV_, 0, ((IOSByteArray *) nil_chk(self->cbcV_))->size_);
  
#line 209
  return length;
}


#line 224
jint OrgBouncycastleCryptoModesCBCBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgBouncycastleCryptoModesCBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  
#line 231
  if (inOff + self->blockSize_ > ((IOSByteArray *) nil_chk(inArg))->size_) {
    
#line 233
    @throw new_OrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  
#line 236
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, self->cbcNextV_, 0, self->blockSize_);
  
#line 238
  jint length = [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:inArg withInt:inOff withByteArray:outArg withInt:outOff];
  
#line 243
  for (jint i = 0; i < self->blockSize_; i++) {
    
#line 245
    *IOSByteArray_GetRef(nil_chk(outArg), outOff + i) ^= IOSByteArray_Get(nil_chk(self->cbcV_), i);
  }
  
#line 251
  IOSByteArray *tmp;
  
#line 253
  tmp = self->cbcV_;
  self->cbcV_ = self->cbcNextV_;
  self->cbcNextV_ = tmp;
  
#line 257
  return length;
}

IOSObjectArray *OrgBouncycastleCryptoModesCBCBlockCipher__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoModesCBCBlockCipher)
