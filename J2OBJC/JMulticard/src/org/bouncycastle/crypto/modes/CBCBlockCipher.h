//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoModesCBCBlockCipher")
#ifdef RESTRICT_OrgBouncycastleCryptoModesCBCBlockCipher
#define INCLUDE_ALL_OrgBouncycastleCryptoModesCBCBlockCipher 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoModesCBCBlockCipher 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoModesCBCBlockCipher

#if !defined (OrgBouncycastleCryptoModesCBCBlockCipher_) && (INCLUDE_ALL_OrgBouncycastleCryptoModesCBCBlockCipher || defined(INCLUDE_OrgBouncycastleCryptoModesCBCBlockCipher))
#define OrgBouncycastleCryptoModesCBCBlockCipher_

#define RESTRICT_OrgBouncycastleCryptoDefaultMultiBlockCipher 1
#define INCLUDE_OrgBouncycastleCryptoDefaultMultiBlockCipher 1
#include "org/bouncycastle/crypto/DefaultMultiBlockCipher.h"

#define RESTRICT_OrgBouncycastleCryptoModesCBCModeCipher 1
#define INCLUDE_OrgBouncycastleCryptoModesCBCModeCipher 1
#include "org/bouncycastle/crypto/modes/CBCModeCipher.h"

@class IOSByteArray;
@protocol OrgBouncycastleCryptoBlockCipher;
@protocol OrgBouncycastleCryptoCipherParameters;

/*!
 @brief implements Cipher-Block-Chaining (CBC) mode on top of a simple cipher.
 */
@interface OrgBouncycastleCryptoModesCBCBlockCipher : OrgBouncycastleCryptoDefaultMultiBlockCipher < OrgBouncycastleCryptoModesCBCModeCipher >

#pragma mark Public

/*!
 @brief Basic constructor.
 @param cipher the block cipher to be used as the basis of chaining.
 */
- (instancetype)initWithOrgBouncycastleCryptoBlockCipher:(id<OrgBouncycastleCryptoBlockCipher>)cipher;

/*!
 @brief return the algorithm name and mode.
 @return the name of the underlying algorithm followed by "/CBC".
 */
- (NSString *)getAlgorithmName;

/*!
 @brief return the block size of the underlying cipher.
 @return the block size of the underlying cipher.
 */
- (jint)getBlockSize;

/*!
 @brief return the underlying block cipher that we are wrapping.
 @return the underlying block cipher that we are wrapping.
 */
- (id<OrgBouncycastleCryptoBlockCipher>)getUnderlyingCipher;

/*!
 @brief Initialise the cipher and, possibly, the initialisation vector (IV).
 If an IV isn't passed as part of the parameter, the IV will be all zeros.
 @param encrypting if true the cipher is initialised for   encryption, if false for decryption.
 @param params the key and other data required by the cipher.
 @throw IllegalArgumentExceptionif the params argument is
  inappropriate.
 */
- (void)init__WithBoolean:(jboolean)encrypting
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Return a new CBC mode cipher based on the passed in base cipher
 @param cipher the base cipher for the CBC mode.
 */
+ (id<OrgBouncycastleCryptoModesCBCModeCipher>)newInstanceWithOrgBouncycastleCryptoBlockCipher:(id<OrgBouncycastleCryptoBlockCipher>)cipher OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Process one block of input from the array in and write it to
  the out array.
 @param inArg the array containing the input data.
 @param inOff offset into the in array the data starts at.
 @param outArg the array the output data will be copied into.
 @param outOff the offset into the out array the output will start at.
 @throw DataLengthExceptionif there isn't enough data in in, or
  space in out.
 @throw IllegalStateExceptionif the cipher isn't initialised.
 @return the number of bytes processed and produced.
 */
- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

/*!
 @brief reset the chaining vector back to the IV and reset the underlying
  cipher.
 */
- (void)reset;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCryptoModesCBCBlockCipher)

FOUNDATION_EXPORT id<OrgBouncycastleCryptoModesCBCModeCipher> OrgBouncycastleCryptoModesCBCBlockCipher_newInstanceWithOrgBouncycastleCryptoBlockCipher_(id<OrgBouncycastleCryptoBlockCipher> cipher);

FOUNDATION_EXPORT void OrgBouncycastleCryptoModesCBCBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(OrgBouncycastleCryptoModesCBCBlockCipher *self, id<OrgBouncycastleCryptoBlockCipher> cipher);

FOUNDATION_EXPORT OrgBouncycastleCryptoModesCBCBlockCipher *new_OrgBouncycastleCryptoModesCBCBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(id<OrgBouncycastleCryptoBlockCipher> cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoModesCBCBlockCipher *create_OrgBouncycastleCryptoModesCBCBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(id<OrgBouncycastleCryptoBlockCipher> cipher);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoModesCBCBlockCipher)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoModesCBCBlockCipher")
