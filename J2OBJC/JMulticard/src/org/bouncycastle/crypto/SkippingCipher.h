//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/SkippingCipher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoSkippingCipher")
#ifdef RESTRICT_OrgBouncycastleCryptoSkippingCipher
#define INCLUDE_ALL_OrgBouncycastleCryptoSkippingCipher 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoSkippingCipher 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoSkippingCipher

#if !defined (OrgBouncycastleCryptoSkippingCipher_) && (INCLUDE_ALL_OrgBouncycastleCryptoSkippingCipher || defined(INCLUDE_OrgBouncycastleCryptoSkippingCipher))
#define OrgBouncycastleCryptoSkippingCipher_

/*!
 @brief Ciphers producing a key stream which can be reset to particular points in the stream implement this.
 */
@protocol OrgBouncycastleCryptoSkippingCipher < JavaObject >

/*!
 @brief Skip numberOfBytes forwards, or backwards.
 @param numberOfBytes the number of bytes to skip (positive forward, negative backwards).
 @return the number of bytes actually skipped.
 @throw java.lang.IllegalArgumentExceptionif numberOfBytes is an invalid value.
 */
- (jlong)skipWithLong:(jlong)numberOfBytes;

/*!
 @brief Reset the cipher and then skip forward to a given position.
 @param position the number of bytes in to set the cipher state to.
 @return the byte position moved to.
 */
- (jlong)seekToWithLong:(jlong)position;

/*!
 @brief Return the current "position" of the cipher
 @return the current byte position.
 */
- (jlong)getPosition;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCryptoSkippingCipher)

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoSkippingCipher)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoSkippingCipher")
