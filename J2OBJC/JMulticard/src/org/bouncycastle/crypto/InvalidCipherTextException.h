//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/InvalidCipherTextException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoInvalidCipherTextException")
#ifdef RESTRICT_OrgBouncycastleCryptoInvalidCipherTextException
#define INCLUDE_ALL_OrgBouncycastleCryptoInvalidCipherTextException 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoInvalidCipherTextException 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoInvalidCipherTextException

#if !defined (OrgBouncycastleCryptoInvalidCipherTextException_) && (INCLUDE_ALL_OrgBouncycastleCryptoInvalidCipherTextException || defined(INCLUDE_OrgBouncycastleCryptoInvalidCipherTextException))
#define OrgBouncycastleCryptoInvalidCipherTextException_

#define RESTRICT_OrgBouncycastleCryptoCryptoException 1
#define INCLUDE_OrgBouncycastleCryptoCryptoException 1
#include "org/bouncycastle/crypto/CryptoException.h"

@class JavaLangThrowable;

/*!
 @brief this exception is thrown whenever we find something we don't expect in a
  message.
 */
@interface OrgBouncycastleCryptoInvalidCipherTextException : OrgBouncycastleCryptoCryptoException

#pragma mark Public

/*!
 @brief base constructor.
 */
- (instancetype)init;

/*!
 @brief create a InvalidCipherTextException with the given message.
 @param message the message to be carried with the exception.
 */
- (instancetype)initWithNSString:(NSString *)message;

/*!
 @brief create a InvalidCipherTextException with the given message.
 @param message the message to be carried with the exception.
 @param cause the root cause of the exception.
 */
- (instancetype)initWithNSString:(NSString *)message
           withJavaLangThrowable:(JavaLangThrowable *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCryptoInvalidCipherTextException)

FOUNDATION_EXPORT void OrgBouncycastleCryptoInvalidCipherTextException_init(OrgBouncycastleCryptoInvalidCipherTextException *self);

FOUNDATION_EXPORT OrgBouncycastleCryptoInvalidCipherTextException *new_OrgBouncycastleCryptoInvalidCipherTextException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoInvalidCipherTextException *create_OrgBouncycastleCryptoInvalidCipherTextException_init(void);

FOUNDATION_EXPORT void OrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(OrgBouncycastleCryptoInvalidCipherTextException *self, NSString *message);

FOUNDATION_EXPORT OrgBouncycastleCryptoInvalidCipherTextException *new_OrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoInvalidCipherTextException *create_OrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void OrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_withJavaLangThrowable_(OrgBouncycastleCryptoInvalidCipherTextException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT OrgBouncycastleCryptoInvalidCipherTextException *new_OrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoInvalidCipherTextException *create_OrgBouncycastleCryptoInvalidCipherTextException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoInvalidCipherTextException)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoInvalidCipherTextException")
