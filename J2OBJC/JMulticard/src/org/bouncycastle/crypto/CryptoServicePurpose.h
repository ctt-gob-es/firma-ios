//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/CryptoServicePurpose.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoCryptoServicePurpose")
#ifdef RESTRICT_OrgBouncycastleCryptoCryptoServicePurpose
#define INCLUDE_ALL_OrgBouncycastleCryptoCryptoServicePurpose 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoCryptoServicePurpose 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoCryptoServicePurpose

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgBouncycastleCryptoCryptoServicePurpose_) && (INCLUDE_ALL_OrgBouncycastleCryptoCryptoServicePurpose || defined(INCLUDE_OrgBouncycastleCryptoCryptoServicePurpose))
#define OrgBouncycastleCryptoCryptoServicePurpose_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, OrgBouncycastleCryptoCryptoServicePurpose_Enum) {
  OrgBouncycastleCryptoCryptoServicePurpose_Enum_AGREEMENT = 0,
  OrgBouncycastleCryptoCryptoServicePurpose_Enum_ENCRYPTION = 1,
  OrgBouncycastleCryptoCryptoServicePurpose_Enum_DECRYPTION = 2,
  OrgBouncycastleCryptoCryptoServicePurpose_Enum_KEYGEN = 3,
  OrgBouncycastleCryptoCryptoServicePurpose_Enum_SIGNING = 4,
  OrgBouncycastleCryptoCryptoServicePurpose_Enum_VERIFYING = 5,
  OrgBouncycastleCryptoCryptoServicePurpose_Enum_AUTHENTICATION = 6,
  OrgBouncycastleCryptoCryptoServicePurpose_Enum_VERIFICATION = 7,
  OrgBouncycastleCryptoCryptoServicePurpose_Enum_PRF = 8,
  OrgBouncycastleCryptoCryptoServicePurpose_Enum_ANY = 9,
};

@interface OrgBouncycastleCryptoCryptoServicePurpose : JavaLangEnum

#pragma mark Public

+ (OrgBouncycastleCryptoCryptoServicePurpose *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (OrgBouncycastleCryptoCryptoServicePurpose_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleCryptoCryptoServicePurpose)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgBouncycastleCryptoCryptoServicePurpose *OrgBouncycastleCryptoCryptoServicePurpose_values_[];

inline OrgBouncycastleCryptoCryptoServicePurpose *OrgBouncycastleCryptoCryptoServicePurpose_get_AGREEMENT(void);
J2OBJC_ENUM_CONSTANT(OrgBouncycastleCryptoCryptoServicePurpose, AGREEMENT)

inline OrgBouncycastleCryptoCryptoServicePurpose *OrgBouncycastleCryptoCryptoServicePurpose_get_ENCRYPTION(void);
J2OBJC_ENUM_CONSTANT(OrgBouncycastleCryptoCryptoServicePurpose, ENCRYPTION)

inline OrgBouncycastleCryptoCryptoServicePurpose *OrgBouncycastleCryptoCryptoServicePurpose_get_DECRYPTION(void);
J2OBJC_ENUM_CONSTANT(OrgBouncycastleCryptoCryptoServicePurpose, DECRYPTION)

inline OrgBouncycastleCryptoCryptoServicePurpose *OrgBouncycastleCryptoCryptoServicePurpose_get_KEYGEN(void);
J2OBJC_ENUM_CONSTANT(OrgBouncycastleCryptoCryptoServicePurpose, KEYGEN)

inline OrgBouncycastleCryptoCryptoServicePurpose *OrgBouncycastleCryptoCryptoServicePurpose_get_SIGNING(void);
J2OBJC_ENUM_CONSTANT(OrgBouncycastleCryptoCryptoServicePurpose, SIGNING)

inline OrgBouncycastleCryptoCryptoServicePurpose *OrgBouncycastleCryptoCryptoServicePurpose_get_VERIFYING(void);
J2OBJC_ENUM_CONSTANT(OrgBouncycastleCryptoCryptoServicePurpose, VERIFYING)

inline OrgBouncycastleCryptoCryptoServicePurpose *OrgBouncycastleCryptoCryptoServicePurpose_get_AUTHENTICATION(void);
J2OBJC_ENUM_CONSTANT(OrgBouncycastleCryptoCryptoServicePurpose, AUTHENTICATION)

inline OrgBouncycastleCryptoCryptoServicePurpose *OrgBouncycastleCryptoCryptoServicePurpose_get_VERIFICATION(void);
J2OBJC_ENUM_CONSTANT(OrgBouncycastleCryptoCryptoServicePurpose, VERIFICATION)

inline OrgBouncycastleCryptoCryptoServicePurpose *OrgBouncycastleCryptoCryptoServicePurpose_get_PRF(void);
J2OBJC_ENUM_CONSTANT(OrgBouncycastleCryptoCryptoServicePurpose, PRF)

inline OrgBouncycastleCryptoCryptoServicePurpose *OrgBouncycastleCryptoCryptoServicePurpose_get_ANY(void);
J2OBJC_ENUM_CONSTANT(OrgBouncycastleCryptoCryptoServicePurpose, ANY)

FOUNDATION_EXPORT IOSObjectArray *OrgBouncycastleCryptoCryptoServicePurpose_values(void);

FOUNDATION_EXPORT OrgBouncycastleCryptoCryptoServicePurpose *OrgBouncycastleCryptoCryptoServicePurpose_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgBouncycastleCryptoCryptoServicePurpose *OrgBouncycastleCryptoCryptoServicePurpose_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoCryptoServicePurpose)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoCryptoServicePurpose")
