//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/agreement/kdf/DHKEKGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "org/bouncycastle/asn1/ASN1EncodableVector.h"
#include "org/bouncycastle/asn1/ASN1Encoding.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/DEROctetString.h"
#include "org/bouncycastle/asn1/DERSequence.h"
#include "org/bouncycastle/asn1/DERTaggedObject.h"
#include "org/bouncycastle/crypto/DerivationParameters.h"
#include "org/bouncycastle/crypto/Digest.h"
#include "org/bouncycastle/crypto/OutputLengthException.h"
#include "org/bouncycastle/crypto/agreement/kdf/DHKDFParameters.h"
#include "org/bouncycastle/crypto/agreement/kdf/DHKEKGenerator.h"
#include "org/bouncycastle/util/Pack.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/agreement/kdf/DHKEKGenerator must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoAgreementKdfDHKEKGenerator () {
 @public
  id<OrgBouncycastleCryptoDigest> digest_;
  OrgBouncycastleAsn1ASN1ObjectIdentifier *algorithm_;
  jint keySize_;
  IOSByteArray *z_;
  IOSByteArray *partyAInfo_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoAgreementKdfDHKEKGenerator, digest_, id<OrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoAgreementKdfDHKEKGenerator, algorithm_, OrgBouncycastleAsn1ASN1ObjectIdentifier *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoAgreementKdfDHKEKGenerator, z_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoAgreementKdfDHKEKGenerator, partyAInfo_, IOSByteArray *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/agreement/kdf/DHKEKGenerator.java"


#line 21
@implementation OrgBouncycastleCryptoAgreementKdfDHKEKGenerator


#line 31
- (instancetype)initWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)digest {
  OrgBouncycastleCryptoAgreementKdfDHKEKGenerator_initWithOrgBouncycastleCryptoDigest_(self, digest);
  return self;
}


#line 37
- (void)init__WithOrgBouncycastleCryptoDerivationParameters:(id<OrgBouncycastleCryptoDerivationParameters>)param {
  
#line 40
  OrgBouncycastleCryptoAgreementKdfDHKDFParameters *params = (OrgBouncycastleCryptoAgreementKdfDHKDFParameters *) cast_chk(param, [OrgBouncycastleCryptoAgreementKdfDHKDFParameters class]);
  
#line 42
  self->algorithm_ = [((OrgBouncycastleCryptoAgreementKdfDHKDFParameters *) nil_chk(params)) getAlgorithm];
  self->keySize_ = [params getKeySize];
  self->z_ = [params getZ];
  self->partyAInfo_ = [params getExtraInfo];
}


#line 48
- (id<OrgBouncycastleCryptoDigest>)getDigest {
  
#line 50
  return digest_;
}


#line 53
- (jint)generateBytesWithByteArray:(IOSByteArray *)outArg
                           withInt:(jint)outOff
                           withInt:(jint)len {
  
#line 57
  if ((((IOSByteArray *) nil_chk(outArg))->size_ - len) < outOff) {
    
#line 59
    @throw new_OrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too small");
  }
  
#line 62
  jlong oBytes = len;
  jint outLen = [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest_)) getDigestSize];
  
#line 71
  if (oBytes > ((JreLShift64(2LL, 32)) - 1)) {
    
#line 73
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Output length too large");
  }
  
#line 76
  jint cThreshold = (jint) (JreLongDiv((oBytes + outLen - 1), outLen));
  
#line 78
  IOSByteArray *dig = [IOSByteArray newArrayWithLength:[digest_ getDigestSize]];
  
#line 80
  jint counter = 1;
  
#line 82
  for (jint i = 0; i < cThreshold; i++) {
    
#line 84
    [digest_ updateWithByteArray:z_ withInt:0 withInt:((IOSByteArray *) nil_chk(z_))->size_];
    
#line 87
    OrgBouncycastleAsn1ASN1EncodableVector *v1 = new_OrgBouncycastleAsn1ASN1EncodableVector_init();
    
#line 89
    OrgBouncycastleAsn1ASN1EncodableVector *v2 = new_OrgBouncycastleAsn1ASN1EncodableVector_init();
    
#line 91
    [v2 addWithOrgBouncycastleAsn1ASN1Encodable:algorithm_];
    [v2 addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1DEROctetString_initWithByteArray_(OrgBouncycastleUtilPack_intToBigEndianWithInt_(counter))];
    
#line 94
    [v1 addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1DERSequence_initWithOrgBouncycastleAsn1ASN1EncodableVector_(v2)];
    
#line 96
    if (partyAInfo_ != nil) {
      
#line 98
      [v1 addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1DERTaggedObject_initWithBoolean_withInt_withOrgBouncycastleAsn1ASN1Encodable_(true, 0, new_OrgBouncycastleAsn1DEROctetString_initWithByteArray_(partyAInfo_))];
    }
    
#line 101
    [v1 addWithOrgBouncycastleAsn1ASN1Encodable:new_OrgBouncycastleAsn1DERTaggedObject_initWithBoolean_withInt_withOrgBouncycastleAsn1ASN1Encodable_(true, 2, new_OrgBouncycastleAsn1DEROctetString_initWithByteArray_(OrgBouncycastleUtilPack_intToBigEndianWithInt_(keySize_)))];
    
#line 103
    @try {
      
#line 105
      IOSByteArray *other = [new_OrgBouncycastleAsn1DERSequence_initWithOrgBouncycastleAsn1ASN1EncodableVector_(v1) getEncodedWithNSString:OrgBouncycastleAsn1ASN1Encoding_DER];
      
#line 107
      [digest_ updateWithByteArray:other withInt:0 withInt:((IOSByteArray *) nil_chk(other))->size_];
    }
    @catch (JavaIoIOException *e) {
      
#line 111
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unable to encode parameter info: ", [e getMessage]));
    }
    
#line 114
    [digest_ doFinalWithByteArray:dig withInt:0];
    
#line 116
    if (len > outLen) {
      
#line 118
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(dig, 0, outArg, outOff, outLen);
      outOff += outLen;
      len -= outLen;
    }
    else {
      
#line 124
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(dig, 0, outArg, outOff, len);
    }
    
#line 127
    counter++;
  }
  
#line 130
  [digest_ reset];
  
#line 132
  return (jint) oBytes;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(init__WithOrgBouncycastleCryptoDerivationParameters:);
  methods[2].selector = @selector(getDigest);
  methods[3].selector = @selector(generateBytesWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "algorithm_", "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keySize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "z_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "partyAInfo_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleCryptoDigest;", "init", "LOrgBouncycastleCryptoDerivationParameters;", "generateBytes", "[BII", "LOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalArgumentException;" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoAgreementKdfDHKEKGenerator = { "DHKEKGenerator", "org.bouncycastle.crypto.agreement.kdf", ptrTable, methods, fields, 7, 0x1, 4, 5, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoAgreementKdfDHKEKGenerator;
}

@end


#line 31
void OrgBouncycastleCryptoAgreementKdfDHKEKGenerator_initWithOrgBouncycastleCryptoDigest_(OrgBouncycastleCryptoAgreementKdfDHKEKGenerator *self, id<OrgBouncycastleCryptoDigest> digest) {
  NSObject_init(self);
  
#line 34
  self->digest_ = digest;
}


#line 31
OrgBouncycastleCryptoAgreementKdfDHKEKGenerator *new_OrgBouncycastleCryptoAgreementKdfDHKEKGenerator_initWithOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoAgreementKdfDHKEKGenerator, initWithOrgBouncycastleCryptoDigest_, digest)
}


#line 31
OrgBouncycastleCryptoAgreementKdfDHKEKGenerator *create_OrgBouncycastleCryptoAgreementKdfDHKEKGenerator_initWithOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoAgreementKdfDHKEKGenerator, initWithOrgBouncycastleCryptoDigest_, digest)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoAgreementKdfDHKEKGenerator)
