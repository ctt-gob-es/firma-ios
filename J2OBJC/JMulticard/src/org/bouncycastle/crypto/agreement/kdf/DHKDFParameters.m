//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/agreement/kdf/DHKDFParameters.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/crypto/agreement/kdf/DHKDFParameters.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/agreement/kdf/DHKDFParameters must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoAgreementKdfDHKDFParameters () {
 @public
  OrgBouncycastleAsn1ASN1ObjectIdentifier *algorithm_;
  jint keySize_;
  IOSByteArray *z_;
  IOSByteArray *extraInfo_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoAgreementKdfDHKDFParameters, algorithm_, OrgBouncycastleAsn1ASN1ObjectIdentifier *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoAgreementKdfDHKDFParameters, z_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoAgreementKdfDHKDFParameters, extraInfo_, IOSByteArray *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/agreement/kdf/DHKDFParameters.java"


#line 6
@implementation OrgBouncycastleCryptoAgreementKdfDHKDFParameters


#line 14
- (instancetype)initWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)algorithm
                                                        withInt:(jint)keySize
                                                  withByteArray:(IOSByteArray *)z {
  OrgBouncycastleCryptoAgreementKdfDHKDFParameters_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withByteArray_(self, algorithm, keySize, z);
  return self;
}


#line 22
- (instancetype)initWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)algorithm
                                                        withInt:(jint)keySize
                                                  withByteArray:(IOSByteArray *)z
                                                  withByteArray:(IOSByteArray *)extraInfo {
  OrgBouncycastleCryptoAgreementKdfDHKDFParameters_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withByteArray_withByteArray_(self, algorithm, keySize, z, extraInfo);
  return self;
}


#line 34
- (OrgBouncycastleAsn1ASN1ObjectIdentifier *)getAlgorithm {
  
#line 36
  return algorithm_;
}


#line 39
- (jint)getKeySize {
  
#line 41
  return keySize_;
}


#line 44
- (IOSByteArray *)getZ {
  
#line 46
  return z_;
}


#line 49
- (IOSByteArray *)getExtraInfo {
  
#line 51
  return extraInfo_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleAsn1ASN1ObjectIdentifier:withInt:withByteArray:);
  methods[1].selector = @selector(initWithOrgBouncycastleAsn1ASN1ObjectIdentifier:withInt:withByteArray:withByteArray:);
  methods[2].selector = @selector(getAlgorithm);
  methods[3].selector = @selector(getKeySize);
  methods[4].selector = @selector(getZ);
  methods[5].selector = @selector(getExtraInfo);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "algorithm_", "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keySize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "z_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extraInfo_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleAsn1ASN1ObjectIdentifier;I[B", "LOrgBouncycastleAsn1ASN1ObjectIdentifier;I[B[B" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoAgreementKdfDHKDFParameters = { "DHKDFParameters", "org.bouncycastle.crypto.agreement.kdf", ptrTable, methods, fields, 7, 0x1, 6, 4, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoAgreementKdfDHKDFParameters;
}

@end


#line 14
void OrgBouncycastleCryptoAgreementKdfDHKDFParameters_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withByteArray_(OrgBouncycastleCryptoAgreementKdfDHKDFParameters *self, OrgBouncycastleAsn1ASN1ObjectIdentifier *algorithm, jint keySize, IOSByteArray *z) {
  OrgBouncycastleCryptoAgreementKdfDHKDFParameters_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withByteArray_withByteArray_(self,
#line 19
  algorithm, keySize, z, nil);
}


#line 14
OrgBouncycastleCryptoAgreementKdfDHKDFParameters *new_OrgBouncycastleCryptoAgreementKdfDHKDFParameters_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withByteArray_(OrgBouncycastleAsn1ASN1ObjectIdentifier *algorithm, jint keySize, IOSByteArray *z) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoAgreementKdfDHKDFParameters, initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withByteArray_, algorithm, keySize, z)
}


#line 14
OrgBouncycastleCryptoAgreementKdfDHKDFParameters *create_OrgBouncycastleCryptoAgreementKdfDHKDFParameters_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withByteArray_(OrgBouncycastleAsn1ASN1ObjectIdentifier *algorithm, jint keySize, IOSByteArray *z) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoAgreementKdfDHKDFParameters, initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withByteArray_, algorithm, keySize, z)
}


#line 22
void OrgBouncycastleCryptoAgreementKdfDHKDFParameters_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withByteArray_withByteArray_(OrgBouncycastleCryptoAgreementKdfDHKDFParameters *self, OrgBouncycastleAsn1ASN1ObjectIdentifier *algorithm, jint keySize, IOSByteArray *z, IOSByteArray *extraInfo) {
  NSObject_init(self);
  
#line 28
  self->algorithm_ = algorithm;
  self->keySize_ = keySize;
  self->z_ = z;
  self->extraInfo_ = extraInfo;
}


#line 22
OrgBouncycastleCryptoAgreementKdfDHKDFParameters *new_OrgBouncycastleCryptoAgreementKdfDHKDFParameters_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withByteArray_withByteArray_(OrgBouncycastleAsn1ASN1ObjectIdentifier *algorithm, jint keySize, IOSByteArray *z, IOSByteArray *extraInfo) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoAgreementKdfDHKDFParameters, initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withByteArray_withByteArray_, algorithm, keySize, z, extraInfo)
}


#line 22
OrgBouncycastleCryptoAgreementKdfDHKDFParameters *create_OrgBouncycastleCryptoAgreementKdfDHKDFParameters_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withByteArray_withByteArray_(OrgBouncycastleAsn1ASN1ObjectIdentifier *algorithm, jint keySize, IOSByteArray *z, IOSByteArray *extraInfo) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoAgreementKdfDHKDFParameters, initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withInt_withByteArray_withByteArray_, algorithm, keySize, z, extraInfo)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoAgreementKdfDHKDFParameters)
