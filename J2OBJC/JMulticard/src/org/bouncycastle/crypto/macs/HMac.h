//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/macs/HMac.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoMacsHMac")
#ifdef RESTRICT_OrgBouncycastleCryptoMacsHMac
#define INCLUDE_ALL_OrgBouncycastleCryptoMacsHMac 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoMacsHMac 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoMacsHMac

#if !defined (OrgBouncycastleCryptoMacsHMac_) && (INCLUDE_ALL_OrgBouncycastleCryptoMacsHMac || defined(INCLUDE_OrgBouncycastleCryptoMacsHMac))
#define OrgBouncycastleCryptoMacsHMac_

#define RESTRICT_OrgBouncycastleCryptoMac 1
#define INCLUDE_OrgBouncycastleCryptoMac 1
#include "org/bouncycastle/crypto/Mac.h"

@class IOSByteArray;
@protocol OrgBouncycastleCryptoCipherParameters;
@protocol OrgBouncycastleCryptoDigest;

/*!
 @brief HMAC implementation based on RFC2104
  H(K XOR opad, H(K XOR ipad, text))
 */
@interface OrgBouncycastleCryptoMacsHMac : NSObject < OrgBouncycastleCryptoMac >

#pragma mark Public

/*!
 @brief Base constructor for one of the standard digest algorithms that the
  byteLength of the algorithm is know for.
 @param digest the digest.
 */
- (instancetype)initWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)digest;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (NSString *)getAlgorithmName;

- (jint)getMacSize;

- (id<OrgBouncycastleCryptoDigest>)getUnderlyingDigest;

- (void)init__WithOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Reset the mac generator.
 */
- (void)reset;

- (void)updateWithByte:(jbyte)inArg;

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleCryptoMacsHMac)

FOUNDATION_EXPORT void OrgBouncycastleCryptoMacsHMac_initWithOrgBouncycastleCryptoDigest_(OrgBouncycastleCryptoMacsHMac *self, id<OrgBouncycastleCryptoDigest> digest);

FOUNDATION_EXPORT OrgBouncycastleCryptoMacsHMac *new_OrgBouncycastleCryptoMacsHMac_initWithOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> digest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoMacsHMac *create_OrgBouncycastleCryptoMacsHMac_initWithOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> digest);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoMacsHMac)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoMacsHMac")
