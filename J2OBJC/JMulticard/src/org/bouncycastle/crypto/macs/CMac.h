//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/macs/CMac.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoMacsCMac")
#ifdef RESTRICT_OrgBouncycastleCryptoMacsCMac
#define INCLUDE_ALL_OrgBouncycastleCryptoMacsCMac 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoMacsCMac 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoMacsCMac

#if !defined (OrgBouncycastleCryptoMacsCMac_) && (INCLUDE_ALL_OrgBouncycastleCryptoMacsCMac || defined(INCLUDE_OrgBouncycastleCryptoMacsCMac))
#define OrgBouncycastleCryptoMacsCMac_

#define RESTRICT_OrgBouncycastleCryptoMac 1
#define INCLUDE_OrgBouncycastleCryptoMac 1
#include "org/bouncycastle/crypto/Mac.h"

@class IOSByteArray;
@protocol OrgBouncycastleCryptoBlockCipher;
@protocol OrgBouncycastleCryptoCipherParameters;

/*!
 @brief CMAC - as specified at www.nuee.nagoya-u.ac.jp/labs/tiwata/omac/omac.html
 <p>
  CMAC is analogous to OMAC1 - see also en.wikipedia.org/wiki/CMAC 
 </p><p>
  CMAC is a NIST recomendation - see
  csrc.nist.gov/CryptoToolkit/modes/800-38_Series_Publications/SP800-38B.pdf 
 </p><p>
  CMAC/OMAC1 is a blockcipher-based message authentication code designed and
  analyzed by Tetsu Iwata and Kaoru Kurosawa.
 </p><p>
  CMAC/OMAC1 is a simple variant of the CBC MAC (Cipher Block Chaining Message
  Authentication Code). OMAC stands for One-Key CBC MAC. 
 </p><p>
  It supports 128- or 64-bits block ciphers, with any key size, and returns
  a MAC with dimension less or equal to the block size of the underlying
  cipher. 
 </p>
 */
@interface OrgBouncycastleCryptoMacsCMac : NSObject < OrgBouncycastleCryptoMac >

#pragma mark Public

/*!
 @brief create a standard MAC based on a CBC block cipher (64 or 128 bit block).
 This will produce an authentication code the length of the block size
  of the cipher.
 @param cipher the cipher to be used as the basis of the MAC generation.
 */
- (instancetype)initWithOrgBouncycastleCryptoBlockCipher:(id<OrgBouncycastleCryptoBlockCipher>)cipher;

/*!
 @brief create a standard MAC based on a block cipher with the size of the
  MAC been given in bits.
 <p>
  Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
  or 16 bits if being used as a data authenticator (FIPS Publication 113),
  and in general should be less than the size of the block cipher as it reduces
  the chance of an exhaustive attack (see Handbook of Applied Cryptography).
 @param cipher the cipher to be used as the basis of the MAC generation.
 @param macSizeInBits the size of the MAC in bits, must be a multiple of 8 and  &lt; = 128.
 */
- (instancetype)initWithOrgBouncycastleCryptoBlockCipher:(id<OrgBouncycastleCryptoBlockCipher>)cipher
                                                 withInt:(jint)macSizeInBits;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (NSString *)getAlgorithmName;

- (jint)getMacSize;

- (void)init__WithOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Reset the mac generator.
 */
- (void)reset;

- (void)updateWithByte:(jbyte)inArg;

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len;

#pragma mark Package-Private

- (void)validateWithOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)params;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCryptoMacsCMac)

FOUNDATION_EXPORT void OrgBouncycastleCryptoMacsCMac_initWithOrgBouncycastleCryptoBlockCipher_(OrgBouncycastleCryptoMacsCMac *self, id<OrgBouncycastleCryptoBlockCipher> cipher);

FOUNDATION_EXPORT OrgBouncycastleCryptoMacsCMac *new_OrgBouncycastleCryptoMacsCMac_initWithOrgBouncycastleCryptoBlockCipher_(id<OrgBouncycastleCryptoBlockCipher> cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoMacsCMac *create_OrgBouncycastleCryptoMacsCMac_initWithOrgBouncycastleCryptoBlockCipher_(id<OrgBouncycastleCryptoBlockCipher> cipher);

FOUNDATION_EXPORT void OrgBouncycastleCryptoMacsCMac_initWithOrgBouncycastleCryptoBlockCipher_withInt_(OrgBouncycastleCryptoMacsCMac *self, id<OrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits);

FOUNDATION_EXPORT OrgBouncycastleCryptoMacsCMac *new_OrgBouncycastleCryptoMacsCMac_initWithOrgBouncycastleCryptoBlockCipher_withInt_(id<OrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoMacsCMac *create_OrgBouncycastleCryptoMacsCMac_initWithOrgBouncycastleCryptoBlockCipher_withInt_(id<OrgBouncycastleCryptoBlockCipher> cipher, jint macSizeInBits);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoMacsCMac)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoMacsCMac")
