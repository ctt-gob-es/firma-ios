//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/macs/HMac.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Hashtable.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/Digest.h"
#include "org/bouncycastle/crypto/ExtendedDigest.h"
#include "org/bouncycastle/crypto/macs/HMac.h"
#include "org/bouncycastle/crypto/params/KeyParameter.h"
#include "org/bouncycastle/util/Integers.h"
#include "org/bouncycastle/util/Memoable.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/macs/HMac must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoMacsHMac () {
 @public
  id<OrgBouncycastleCryptoDigest> digest_;
  jint digestSize_;
  jint blockLength_;
  id<OrgBouncycastleUtilMemoable> ipadState_;
  id<OrgBouncycastleUtilMemoable> opadState_;
  IOSByteArray *inputPad_;
  IOSByteArray *outputBuf_;
}

+ (jint)getByteLengthWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)digest;

- (instancetype)initWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)digest
                                            withInt:(jint)byteLength;

+ (void)xorPadWithByteArray:(IOSByteArray *)pad
                    withInt:(jint)len
                   withByte:(jbyte)n;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoMacsHMac, digest_, id<OrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoMacsHMac, ipadState_, id<OrgBouncycastleUtilMemoable>)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoMacsHMac, opadState_, id<OrgBouncycastleUtilMemoable>)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoMacsHMac, inputPad_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoMacsHMac, outputBuf_, IOSByteArray *)

inline jbyte OrgBouncycastleCryptoMacsHMac_get_IPAD(void);
#define OrgBouncycastleCryptoMacsHMac_IPAD 54
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoMacsHMac, IPAD, jbyte)

inline jbyte OrgBouncycastleCryptoMacsHMac_get_OPAD(void);
#define OrgBouncycastleCryptoMacsHMac_OPAD 92
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoMacsHMac, OPAD, jbyte)

inline JavaUtilHashtable *OrgBouncycastleCryptoMacsHMac_get_blockLengths(void);
inline JavaUtilHashtable *OrgBouncycastleCryptoMacsHMac_set_blockLengths(JavaUtilHashtable *value);
static JavaUtilHashtable *OrgBouncycastleCryptoMacsHMac_blockLengths;
J2OBJC_STATIC_FIELD_OBJ(OrgBouncycastleCryptoMacsHMac, blockLengths, JavaUtilHashtable *)

__attribute__((unused)) static jint OrgBouncycastleCryptoMacsHMac_getByteLengthWithOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> digest);

__attribute__((unused)) static void OrgBouncycastleCryptoMacsHMac_initWithOrgBouncycastleCryptoDigest_withInt_(OrgBouncycastleCryptoMacsHMac *self, id<OrgBouncycastleCryptoDigest> digest, jint byteLength);

__attribute__((unused)) static OrgBouncycastleCryptoMacsHMac *new_OrgBouncycastleCryptoMacsHMac_initWithOrgBouncycastleCryptoDigest_withInt_(id<OrgBouncycastleCryptoDigest> digest, jint byteLength) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleCryptoMacsHMac *create_OrgBouncycastleCryptoMacsHMac_initWithOrgBouncycastleCryptoDigest_withInt_(id<OrgBouncycastleCryptoDigest> digest, jint byteLength);

__attribute__((unused)) static void OrgBouncycastleCryptoMacsHMac_xorPadWithByteArray_withInt_withByte_(IOSByteArray *pad, jint len, jbyte n);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/macs/HMac.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleCryptoMacsHMac)


#line 18
@implementation OrgBouncycastleCryptoMacsHMac


#line 58
+ (jint)getByteLengthWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)digest {
  return OrgBouncycastleCryptoMacsHMac_getByteLengthWithOrgBouncycastleCryptoDigest_(digest);
}


#line 82
- (instancetype)initWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)digest {
  OrgBouncycastleCryptoMacsHMac_initWithOrgBouncycastleCryptoDigest_(self, digest);
  return self;
}


#line 88
- (instancetype)initWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)digest
                                            withInt:(jint)byteLength {
  OrgBouncycastleCryptoMacsHMac_initWithOrgBouncycastleCryptoDigest_withInt_(self, digest, byteLength);
  return self;
}


#line 99
- (NSString *)getAlgorithmName {
  
#line 102
  return JreStrcat("$$", [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest_)) getAlgorithmName], @"/HMAC");
}

- (id<OrgBouncycastleCryptoDigest>)getUnderlyingDigest {
  
#line 107
  return digest_;
}


#line 110
- (void)init__WithOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)params {
  
#line 114
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest_)) reset];
  
#line 116
  IOSByteArray *key = [((OrgBouncycastleCryptoParamsKeyParameter *) nil_chk(((OrgBouncycastleCryptoParamsKeyParameter *) cast_chk(params, [OrgBouncycastleCryptoParamsKeyParameter class])))) getKey];
  jint keyLength = ((IOSByteArray *) nil_chk(key))->size_;
  
#line 119
  if (keyLength > blockLength_) {
    
#line 121
    [digest_ updateWithByteArray:key withInt:0 withInt:keyLength];
    [digest_ doFinalWithByteArray:inputPad_ withInt:0];
    
#line 124
    keyLength = digestSize_;
  }
  else {
    
#line 128
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, inputPad_, 0, keyLength);
  }
  
#line 131
  for (jint i = keyLength; i < ((IOSByteArray *) nil_chk(inputPad_))->size_; i++) {
    
#line 133
    *IOSByteArray_GetRef(inputPad_, i) = 0;
  }
  
#line 136
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inputPad_, 0, outputBuf_, 0, blockLength_);
  
#line 138
  OrgBouncycastleCryptoMacsHMac_xorPadWithByteArray_withInt_withByte_(inputPad_, blockLength_, OrgBouncycastleCryptoMacsHMac_IPAD);
  OrgBouncycastleCryptoMacsHMac_xorPadWithByteArray_withInt_withByte_(outputBuf_, blockLength_, OrgBouncycastleCryptoMacsHMac_OPAD);
  
#line 141
  if ([OrgBouncycastleUtilMemoable_class_() isInstance:digest_]) {
    
#line 143
    opadState_ = [((id<OrgBouncycastleUtilMemoable>) cast_check(digest_, OrgBouncycastleUtilMemoable_class_())) copy__];
    
#line 145
    [((id<OrgBouncycastleCryptoDigest>) nil_chk(((id<OrgBouncycastleCryptoDigest>) cast_check(opadState_, OrgBouncycastleCryptoDigest_class_())))) updateWithByteArray:outputBuf_ withInt:0 withInt:blockLength_];
  }
  
#line 148
  [digest_ updateWithByteArray:inputPad_ withInt:0 withInt:inputPad_->size_];
  
#line 150
  if ([OrgBouncycastleUtilMemoable_class_() isInstance:digest_]) {
    
#line 152
    ipadState_ = [((id<OrgBouncycastleUtilMemoable>) cast_check(digest_, OrgBouncycastleUtilMemoable_class_())) copy__];
  }
}


#line 156
- (jint)getMacSize {
  
#line 159
  return digestSize_;
}

- (void)updateWithByte:(jbyte)inArg {
  
#line 166
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByte:inArg];
}


#line 169
- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len {
  
#line 175
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:inArg withInt:inOff withInt:len];
}


#line 178
- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  
#line 183
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:outputBuf_ withInt:blockLength_];
  
#line 185
  if (opadState_ != nil) {
    
#line 187
    [((id<OrgBouncycastleUtilMemoable>) cast_check(digest_, OrgBouncycastleUtilMemoable_class_())) resetWithOrgBouncycastleUtilMemoable:opadState_];
    [digest_ updateWithByteArray:outputBuf_ withInt:blockLength_ withInt:[digest_ getDigestSize]];
  }
  else {
    
#line 192
    [digest_ updateWithByteArray:outputBuf_ withInt:0 withInt:((IOSByteArray *) nil_chk(outputBuf_))->size_];
  }
  
#line 195
  jint len = [digest_ doFinalWithByteArray:outArg withInt:outOff];
  
#line 197
  for (jint i = blockLength_; i < ((IOSByteArray *) nil_chk(outputBuf_))->size_; i++) {
    
#line 199
    *IOSByteArray_GetRef(outputBuf_, i) = 0;
  }
  
#line 202
  if (ipadState_ != nil) {
    
#line 204
    [((id<OrgBouncycastleUtilMemoable>) cast_check(digest_, OrgBouncycastleUtilMemoable_class_())) resetWithOrgBouncycastleUtilMemoable:ipadState_];
  }
  else {
    
#line 208
    [digest_ updateWithByteArray:inputPad_ withInt:0 withInt:((IOSByteArray *) nil_chk(inputPad_))->size_];
  }
  
#line 211
  return len;
}


#line 217
- (void)reset {
  
#line 223
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest_)) reset];
  
#line 228
  [digest_ updateWithByteArray:inputPad_ withInt:0 withInt:((IOSByteArray *) nil_chk(inputPad_))->size_];
}


#line 231
+ (void)xorPadWithByteArray:(IOSByteArray *)pad
                    withInt:(jint)len
                   withByte:(jbyte)n {
  OrgBouncycastleCryptoMacsHMac_xorPadWithByteArray_withInt_withByte_(pad, len, n);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getByteLengthWithOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(initWithOrgBouncycastleCryptoDigest:);
  methods[2].selector = @selector(initWithOrgBouncycastleCryptoDigest:withInt:);
  methods[3].selector = @selector(getAlgorithmName);
  methods[4].selector = @selector(getUnderlyingDigest);
  methods[5].selector = @selector(init__WithOrgBouncycastleCryptoCipherParameters:);
  methods[6].selector = @selector(getMacSize);
  methods[7].selector = @selector(updateWithByte:);
  methods[8].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[9].selector = @selector(doFinalWithByteArray:withInt:);
  methods[10].selector = @selector(reset);
  methods[11].selector = @selector(xorPadWithByteArray:withInt:withByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IPAD", "B", .constantValue.asChar = OrgBouncycastleCryptoMacsHMac_IPAD, 0x1a, -1, -1, -1, -1 },
    { "OPAD", "B", .constantValue.asChar = OrgBouncycastleCryptoMacsHMac_OPAD, 0x1a, -1, -1, -1, -1 },
    { "digest_", "LOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "digestSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "blockLength_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ipadState_", "LOrgBouncycastleUtilMemoable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "opadState_", "LOrgBouncycastleUtilMemoable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inputPad_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "outputBuf_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "blockLengths", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0xa, -1, 12, -1, -1 },
  };
  static const void *ptrTable[] = { "getByteLength", "LOrgBouncycastleCryptoDigest;", "LOrgBouncycastleCryptoDigest;I", "init", "LOrgBouncycastleCryptoCipherParameters;", "update", "B", "[BII", "doFinal", "[BI", "xorPad", "[BIB", &OrgBouncycastleCryptoMacsHMac_blockLengths };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoMacsHMac = { "HMac", "org.bouncycastle.crypto.macs", ptrTable, methods, fields, 7, 0x1, 12, 10, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoMacsHMac;
}

+ (void)initialize {
  if (self == [OrgBouncycastleCryptoMacsHMac class]) {
    {
      
#line 37
      OrgBouncycastleCryptoMacsHMac_blockLengths = new_JavaUtilHashtable_init();
      
#line 39
      (void) [OrgBouncycastleCryptoMacsHMac_blockLengths putWithId:@"GOST3411" withId:OrgBouncycastleUtilIntegers_valueOfWithInt_(32)];
      
#line 41
      (void) [((JavaUtilHashtable *) nil_chk(OrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"MD2" withId:OrgBouncycastleUtilIntegers_valueOfWithInt_(16)];
      (void) [((JavaUtilHashtable *) nil_chk(OrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"MD4" withId:OrgBouncycastleUtilIntegers_valueOfWithInt_(64)];
      (void) [((JavaUtilHashtable *) nil_chk(OrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"MD5" withId:OrgBouncycastleUtilIntegers_valueOfWithInt_(64)];
      
#line 45
      (void) [((JavaUtilHashtable *) nil_chk(OrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"RIPEMD128" withId:OrgBouncycastleUtilIntegers_valueOfWithInt_(64)];
      (void) [((JavaUtilHashtable *) nil_chk(OrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"RIPEMD160" withId:OrgBouncycastleUtilIntegers_valueOfWithInt_(64)];
      
#line 48
      (void) [((JavaUtilHashtable *) nil_chk(OrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"SHA-1" withId:OrgBouncycastleUtilIntegers_valueOfWithInt_(64)];
      (void) [((JavaUtilHashtable *) nil_chk(OrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"SHA-224" withId:OrgBouncycastleUtilIntegers_valueOfWithInt_(64)];
      (void) [((JavaUtilHashtable *) nil_chk(OrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"SHA-256" withId:OrgBouncycastleUtilIntegers_valueOfWithInt_(64)];
      (void) [((JavaUtilHashtable *) nil_chk(OrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"SHA-384" withId:OrgBouncycastleUtilIntegers_valueOfWithInt_(128)];
      (void) [((JavaUtilHashtable *) nil_chk(OrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"SHA-512" withId:OrgBouncycastleUtilIntegers_valueOfWithInt_(128)];
      
#line 54
      (void) [((JavaUtilHashtable *) nil_chk(OrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"Tiger" withId:OrgBouncycastleUtilIntegers_valueOfWithInt_(64)];
      (void) [((JavaUtilHashtable *) nil_chk(OrgBouncycastleCryptoMacsHMac_blockLengths)) putWithId:@"Whirlpool" withId:OrgBouncycastleUtilIntegers_valueOfWithInt_(64)];
    }
    J2OBJC_SET_INITIALIZED(OrgBouncycastleCryptoMacsHMac)
  }
}

@end


#line 58
jint OrgBouncycastleCryptoMacsHMac_getByteLengthWithOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> digest) {
  OrgBouncycastleCryptoMacsHMac_initialize();
  
#line 61
  if ([OrgBouncycastleCryptoExtendedDigest_class_() isInstance:digest]) {
    
#line 63
    return [((id<OrgBouncycastleCryptoExtendedDigest>) nil_chk(((id<OrgBouncycastleCryptoExtendedDigest>) cast_check(digest, OrgBouncycastleCryptoExtendedDigest_class_())))) getByteLength];
  }
  
#line 66
  JavaLangInteger *b = (JavaLangInteger *) cast_chk([((JavaUtilHashtable *) nil_chk(OrgBouncycastleCryptoMacsHMac_blockLengths)) getWithId:[((id<OrgBouncycastleCryptoDigest>) nil_chk(digest)) getAlgorithmName]], [JavaLangInteger class]);
  
#line 68
  if (b == nil) {
    
#line 70
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unknown digest passed: ", [digest getAlgorithmName]));
  }
  
#line 73
  return [b intValue];
}

void OrgBouncycastleCryptoMacsHMac_initWithOrgBouncycastleCryptoDigest_(OrgBouncycastleCryptoMacsHMac *self, id<OrgBouncycastleCryptoDigest> digest) {
  OrgBouncycastleCryptoMacsHMac_initWithOrgBouncycastleCryptoDigest_withInt_(self,
#line 85
  digest, OrgBouncycastleCryptoMacsHMac_getByteLengthWithOrgBouncycastleCryptoDigest_(digest));
}


#line 82
OrgBouncycastleCryptoMacsHMac *new_OrgBouncycastleCryptoMacsHMac_initWithOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoMacsHMac, initWithOrgBouncycastleCryptoDigest_, digest)
}


#line 82
OrgBouncycastleCryptoMacsHMac *create_OrgBouncycastleCryptoMacsHMac_initWithOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoMacsHMac, initWithOrgBouncycastleCryptoDigest_, digest)
}


#line 88
void OrgBouncycastleCryptoMacsHMac_initWithOrgBouncycastleCryptoDigest_withInt_(OrgBouncycastleCryptoMacsHMac *self, id<OrgBouncycastleCryptoDigest> digest, jint byteLength) {
  NSObject_init(self);
  
#line 92
  self->digest_ = digest;
  self->digestSize_ = [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest)) getDigestSize];
  self->blockLength_ = byteLength;
  self->inputPad_ = [IOSByteArray newArrayWithLength:self->blockLength_];
  self->outputBuf_ = [IOSByteArray newArrayWithLength:self->blockLength_ + self->digestSize_];
}


#line 88
OrgBouncycastleCryptoMacsHMac *new_OrgBouncycastleCryptoMacsHMac_initWithOrgBouncycastleCryptoDigest_withInt_(id<OrgBouncycastleCryptoDigest> digest, jint byteLength) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoMacsHMac, initWithOrgBouncycastleCryptoDigest_withInt_, digest, byteLength)
}


#line 88
OrgBouncycastleCryptoMacsHMac *create_OrgBouncycastleCryptoMacsHMac_initWithOrgBouncycastleCryptoDigest_withInt_(id<OrgBouncycastleCryptoDigest> digest, jint byteLength) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoMacsHMac, initWithOrgBouncycastleCryptoDigest_withInt_, digest, byteLength)
}


#line 231
void OrgBouncycastleCryptoMacsHMac_xorPadWithByteArray_withInt_withByte_(IOSByteArray *pad, jint len, jbyte n) {
  OrgBouncycastleCryptoMacsHMac_initialize();
  for (jint i = 0; i < len; ++i) {
    
#line 235
    *IOSByteArray_GetRef(nil_chk(pad), i) ^= n;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoMacsHMac)
