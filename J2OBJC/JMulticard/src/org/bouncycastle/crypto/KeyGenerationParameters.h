//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/KeyGenerationParameters.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoKeyGenerationParameters")
#ifdef RESTRICT_OrgBouncycastleCryptoKeyGenerationParameters
#define INCLUDE_ALL_OrgBouncycastleCryptoKeyGenerationParameters 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoKeyGenerationParameters 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoKeyGenerationParameters

#if !defined (OrgBouncycastleCryptoKeyGenerationParameters_) && (INCLUDE_ALL_OrgBouncycastleCryptoKeyGenerationParameters || defined(INCLUDE_OrgBouncycastleCryptoKeyGenerationParameters))
#define OrgBouncycastleCryptoKeyGenerationParameters_

@class JavaSecuritySecureRandom;

/*!
 @brief The base class for parameters to key generators.
 */
@interface OrgBouncycastleCryptoKeyGenerationParameters : NSObject

#pragma mark Public

/*!
 @brief initialise the generator with a source of randomness
  and a strength (in bits).
 @param random the random byte source.
 @param strength the size, in bits, of the keys we want to produce.
 */
- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                         withInt:(jint)strength;

/*!
 @brief return the random source associated with this
  generator.
 @return the generators random source.
 */
- (JavaSecuritySecureRandom *)getRandom;

/*!
 @brief return the bit strength for keys produced by this generator,
 @return the strength of the keys this generator produces (in bits).
 */
- (jint)getStrength;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCryptoKeyGenerationParameters)

FOUNDATION_EXPORT void OrgBouncycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(OrgBouncycastleCryptoKeyGenerationParameters *self, JavaSecuritySecureRandom *random, jint strength);

FOUNDATION_EXPORT OrgBouncycastleCryptoKeyGenerationParameters *new_OrgBouncycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(JavaSecuritySecureRandom *random, jint strength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoKeyGenerationParameters *create_OrgBouncycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(JavaSecuritySecureRandom *random, jint strength);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoKeyGenerationParameters)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoKeyGenerationParameters")
