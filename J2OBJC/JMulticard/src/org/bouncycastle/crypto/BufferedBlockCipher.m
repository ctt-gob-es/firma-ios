//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/BufferedBlockCipher.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "org/bouncycastle/crypto/BlockCipher.h"
#include "org/bouncycastle/crypto/BufferedBlockCipher.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/DataLengthException.h"
#include "org/bouncycastle/crypto/OutputLengthException.h"
#include "org/bouncycastle/crypto/StreamCipher.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/BufferedBlockCipher must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/BufferedBlockCipher.java"


#line 12
@implementation OrgBouncycastleCryptoBufferedBlockCipher

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 26
- (instancetype)init {
  OrgBouncycastleCryptoBufferedBlockCipher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 35
- (instancetype)initWithOrgBouncycastleCryptoBlockCipher:(id<OrgBouncycastleCryptoBlockCipher>)cipher {
  OrgBouncycastleCryptoBufferedBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(self, cipher);
  return self;
}


#line 66
- (id<OrgBouncycastleCryptoBlockCipher>)getUnderlyingCipher {
  
#line 68
  return cipher_;
}


#line 80
- (void)init__WithBoolean:(jboolean)forEncryption
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)params {
  
#line 85
  self->forEncryption_ = forEncryption;
  
#line 87
  [self reset];
  
#line 89
  [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:forEncryption withOrgBouncycastleCryptoCipherParameters:params];
}


#line 97
- (jint)getBlockSize {
  
#line 99
  return [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize];
}


#line 110
- (jint)getUpdateOutputSizeWithInt:(jint)len {
  
#line 113
  jint total = len + bufOff_;
  jint leftOver;
  
#line 116
  if (pgpCFB_) {
    
#line 118
    if (forEncryption_) {
      
#line 120
      leftOver = JreIntMod(total, ((IOSByteArray *) nil_chk(buf_))->size_) - ([((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize] + 2);
    }
    else {
      
#line 124
      leftOver = JreIntMod(total, ((IOSByteArray *) nil_chk(buf_))->size_);
    }
  }
  else {
    
#line 129
    leftOver = JreIntMod(total, ((IOSByteArray *) nil_chk(buf_))->size_);
  }
  
#line 132
  return total - leftOver;
}


#line 143
- (jint)getOutputSizeWithInt:(jint)length {
  
#line 147
  return length + bufOff_;
}


#line 160
- (jint)processByteWithByte:(jbyte)inArg
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff {
  
#line 166
  jint resultLen = 0;
  
#line 168
  *IOSByteArray_GetRef(nil_chk(buf_), bufOff_++) = inArg;
  
#line 170
  if (bufOff_ == buf_->size_) {
    
#line 172
    resultLen = [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
    bufOff_ = 0;
  }
  
#line 176
  return resultLen;
}


#line 191
- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  
#line 199
  if (len < 0) {
    
#line 201
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't have a negative input length!");
  }
  
#line 204
  jint blockSize = [self getBlockSize];
  jint length = [self getUpdateOutputSizeWithInt:len];
  
#line 207
  if (length > 0) {
    
#line 209
    if ((outOff + length) > ((IOSByteArray *) nil_chk(outArg))->size_) {
      
#line 211
      @throw new_OrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
    }
  }
  
#line 215
  jint resultLen = 0;
  jint gapLen = ((IOSByteArray *) nil_chk(buf_))->size_ - bufOff_;
  
#line 218
  if (len > gapLen) {
    
#line 220
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, gapLen);
    
#line 222
    resultLen += [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
    
#line 224
    bufOff_ = 0;
    len -= gapLen;
    inOff += gapLen;
    
#line 228
    while (len > ((IOSByteArray *) nil_chk(buf_))->size_) {
      
#line 230
      resultLen += [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:inArg withInt:inOff withByteArray:outArg withInt:outOff + resultLen];
      
#line 232
      len -= blockSize;
      inOff += blockSize;
    }
  }
  
#line 237
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, len);
  
#line 239
  bufOff_ += len;
  
#line 241
  if (bufOff_ == ((IOSByteArray *) nil_chk(buf_))->size_) {
    
#line 243
    resultLen += [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff + resultLen];
    bufOff_ = 0;
  }
  
#line 247
  return resultLen;
}


#line 264
- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  
#line 269
  @try {
    
#line 271
    jint resultLen = 0;
    
#line 273
    if (outOff + bufOff_ > ((IOSByteArray *) nil_chk(outArg))->size_) {
      
#line 275
      @throw new_OrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short for doFinal()");
    }
    
#line 278
    if (bufOff_ != 0) {
      
#line 280
      if (!partialBlockOkay_) {
        
#line 282
        @throw new_OrgBouncycastleCryptoDataLengthException_initWithNSString_(@"data not block size aligned");
      }
      
#line 285
      [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:buf_ withInt:0];
      resultLen = bufOff_;
      bufOff_ = 0;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, 0, outArg, outOff, resultLen);
    }
    
#line 291
    return resultLen;
  }
  @finally {
    
#line 295
    [self reset];
  }
}


#line 303
- (void)reset {
  
#line 308
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(buf_))->size_; i++) {
    
#line 310
    *IOSByteArray_GetRef(buf_, i) = 0;
  }
  
#line 313
  bufOff_ = 0;
  
#line 318
  [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) reset];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoBlockCipher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, 9, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 11, 9, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 13, 14, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgBouncycastleCryptoBlockCipher:);
  methods[2].selector = @selector(getUnderlyingCipher);
  methods[3].selector = @selector(init__WithBoolean:withOrgBouncycastleCryptoCipherParameters:);
  methods[4].selector = @selector(getBlockSize);
  methods[5].selector = @selector(getUpdateOutputSizeWithInt:);
  methods[6].selector = @selector(getOutputSizeWithInt:);
  methods[7].selector = @selector(processByteWithByte:withByteArray:withInt:);
  methods[8].selector = @selector(processBytesWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[9].selector = @selector(doFinalWithByteArray:withInt:);
  methods[10].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "buf_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "bufOff_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "cipher_", "LOrgBouncycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "partialBlockOkay_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "pgpCFB_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleCryptoBlockCipher;", "init", "ZLOrgBouncycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "getUpdateOutputSize", "I", "getOutputSize", "processByte", "B[BI", "LOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "processBytes", "[BII[BI", "doFinal", "[BI", "LOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;LOrgBouncycastleCryptoInvalidCipherTextException;" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoBufferedBlockCipher = { "BufferedBlockCipher", "org.bouncycastle.crypto", ptrTable, methods, fields, 7, 0x1, 11, 6, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoBufferedBlockCipher;
}

@end


#line 26
void OrgBouncycastleCryptoBufferedBlockCipher_init(OrgBouncycastleCryptoBufferedBlockCipher *self) {
  NSObject_init(self);
}


#line 26
OrgBouncycastleCryptoBufferedBlockCipher *new_OrgBouncycastleCryptoBufferedBlockCipher_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoBufferedBlockCipher, init)
}


#line 26
OrgBouncycastleCryptoBufferedBlockCipher *create_OrgBouncycastleCryptoBufferedBlockCipher_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoBufferedBlockCipher, init)
}


#line 35
void OrgBouncycastleCryptoBufferedBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(OrgBouncycastleCryptoBufferedBlockCipher *self, id<OrgBouncycastleCryptoBlockCipher> cipher) {
  NSObject_init(self);
  
#line 38
  self->cipher_ = cipher;
  
#line 40
  self->buf_ = [IOSByteArray newArrayWithLength:[((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize]];
  self->bufOff_ = 0;
  
#line 46
  NSString *name = [cipher getAlgorithmName];
  jint idx = [((NSString *) nil_chk(name)) java_indexOf:'/'] + 1;
  
#line 49
  self->pgpCFB_ = (idx > 0 && [name java_hasPrefix:@"PGP" offset:idx]);
  
#line 51
  if (self->pgpCFB_ || [OrgBouncycastleCryptoStreamCipher_class_() isInstance:cipher]) {
    
#line 53
    self->partialBlockOkay_ = true;
  }
  else {
    
#line 57
    self->partialBlockOkay_ = (idx > 0 && ([name java_hasPrefix:@"OpenPGP" offset:idx]));
  }
}


#line 35
OrgBouncycastleCryptoBufferedBlockCipher *new_OrgBouncycastleCryptoBufferedBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(id<OrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoBufferedBlockCipher, initWithOrgBouncycastleCryptoBlockCipher_, cipher)
}


#line 35
OrgBouncycastleCryptoBufferedBlockCipher *create_OrgBouncycastleCryptoBufferedBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(id<OrgBouncycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoBufferedBlockCipher, initWithOrgBouncycastleCryptoBlockCipher_, cipher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoBufferedBlockCipher)
