//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/CryptoException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoCryptoException")
#ifdef RESTRICT_OrgBouncycastleCryptoCryptoException
#define INCLUDE_ALL_OrgBouncycastleCryptoCryptoException 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoCryptoException 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoCryptoException

#if !defined (OrgBouncycastleCryptoCryptoException_) && (INCLUDE_ALL_OrgBouncycastleCryptoCryptoException || defined(INCLUDE_OrgBouncycastleCryptoCryptoException))
#define OrgBouncycastleCryptoCryptoException_

#define RESTRICT_JavaLangException 1
#define INCLUDE_JavaLangException 1
#include "java/lang/Exception.h"

@class JavaLangThrowable;

/*!
 @brief the foundation class for the hard exceptions thrown by the crypto packages.
 */
@interface OrgBouncycastleCryptoCryptoException : JavaLangException

#pragma mark Public

/*!
 @brief base constructor.
 */
- (instancetype)init;

/*!
 @brief create a CryptoException with the given message.
 @param message the message to be carried with the exception.
 */
- (instancetype)initWithNSString:(NSString *)message;

/*!
 @brief Create a CryptoException with the given message and underlying cause.
 @param message message describing exception.
 @param cause the throwable that was the underlying cause.
 */
- (instancetype)initWithNSString:(NSString *)message
           withJavaLangThrowable:(JavaLangThrowable *)cause;

- (JavaLangThrowable *)getCause;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0
           withJavaLangThrowable:(JavaLangThrowable *)arg1
                     withBoolean:(jboolean)arg2
                     withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCryptoCryptoException)

FOUNDATION_EXPORT void OrgBouncycastleCryptoCryptoException_init(OrgBouncycastleCryptoCryptoException *self);

FOUNDATION_EXPORT OrgBouncycastleCryptoCryptoException *new_OrgBouncycastleCryptoCryptoException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoCryptoException *create_OrgBouncycastleCryptoCryptoException_init(void);

FOUNDATION_EXPORT void OrgBouncycastleCryptoCryptoException_initWithNSString_(OrgBouncycastleCryptoCryptoException *self, NSString *message);

FOUNDATION_EXPORT OrgBouncycastleCryptoCryptoException *new_OrgBouncycastleCryptoCryptoException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoCryptoException *create_OrgBouncycastleCryptoCryptoException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void OrgBouncycastleCryptoCryptoException_initWithNSString_withJavaLangThrowable_(OrgBouncycastleCryptoCryptoException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT OrgBouncycastleCryptoCryptoException *new_OrgBouncycastleCryptoCryptoException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoCryptoException *create_OrgBouncycastleCryptoCryptoException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoCryptoException)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoCryptoException")
