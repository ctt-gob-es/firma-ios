//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/engines/ChaChaEngine.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoEnginesChaChaEngine")
#ifdef RESTRICT_OrgBouncycastleCryptoEnginesChaChaEngine
#define INCLUDE_ALL_OrgBouncycastleCryptoEnginesChaChaEngine 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoEnginesChaChaEngine 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoEnginesChaChaEngine

#if !defined (OrgBouncycastleCryptoEnginesChaChaEngine_) && (INCLUDE_ALL_OrgBouncycastleCryptoEnginesChaChaEngine || defined(INCLUDE_OrgBouncycastleCryptoEnginesChaChaEngine))
#define OrgBouncycastleCryptoEnginesChaChaEngine_

#define RESTRICT_OrgBouncycastleCryptoEnginesSalsa20Engine 1
#define INCLUDE_OrgBouncycastleCryptoEnginesSalsa20Engine 1
#include "org/bouncycastle/crypto/engines/Salsa20Engine.h"

@class IOSByteArray;
@class IOSIntArray;

/*!
 @brief Implementation of Daniel J.Bernstein's ChaCha stream cipher.
 */
@interface OrgBouncycastleCryptoEnginesChaChaEngine : OrgBouncycastleCryptoEnginesSalsa20Engine

#pragma mark Public

/*!
 @brief Creates a 20 rounds ChaCha engine.
 */
- (instancetype)init;

/*!
 @brief Creates a ChaCha engine with a specific number of rounds.
 @param rounds the number of rounds (must be an even number).
 */
- (instancetype)initWithInt:(jint)rounds;

/*!
 @brief ChaCha function
 @param input input data
 */
+ (void)chachaCoreWithInt:(jint)rounds
             withIntArray:(IOSIntArray *)input
             withIntArray:(IOSIntArray *)x;

- (NSString *)getAlgorithmName;

#pragma mark Protected

- (void)advanceCounter;

- (void)advanceCounterWithLong:(jlong)diff;

- (void)generateKeyStreamWithByteArray:(IOSByteArray *)output;

- (jlong)getCounter;

- (void)resetCounter;

- (void)retreatCounter;

- (void)retreatCounterWithLong:(jlong)diff;

- (void)setKeyWithByteArray:(IOSByteArray *)keyBytes
              withByteArray:(IOSByteArray *)ivBytes;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCryptoEnginesChaChaEngine)

FOUNDATION_EXPORT void OrgBouncycastleCryptoEnginesChaChaEngine_init(OrgBouncycastleCryptoEnginesChaChaEngine *self);

FOUNDATION_EXPORT OrgBouncycastleCryptoEnginesChaChaEngine *new_OrgBouncycastleCryptoEnginesChaChaEngine_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoEnginesChaChaEngine *create_OrgBouncycastleCryptoEnginesChaChaEngine_init(void);

FOUNDATION_EXPORT void OrgBouncycastleCryptoEnginesChaChaEngine_initWithInt_(OrgBouncycastleCryptoEnginesChaChaEngine *self, jint rounds);

FOUNDATION_EXPORT OrgBouncycastleCryptoEnginesChaChaEngine *new_OrgBouncycastleCryptoEnginesChaChaEngine_initWithInt_(jint rounds) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoEnginesChaChaEngine *create_OrgBouncycastleCryptoEnginesChaChaEngine_initWithInt_(jint rounds);

FOUNDATION_EXPORT void OrgBouncycastleCryptoEnginesChaChaEngine_chachaCoreWithInt_withIntArray_withIntArray_(jint rounds, IOSIntArray *input, IOSIntArray *x);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoEnginesChaChaEngine)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoEnginesChaChaEngine")
