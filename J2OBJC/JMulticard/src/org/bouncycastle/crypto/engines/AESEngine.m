//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/engines/AESEngine.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/annotation/Annotation.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/CryptoServicePurpose.h"
#include "org/bouncycastle/crypto/CryptoServicesRegistrar.h"
#include "org/bouncycastle/crypto/DataLengthException.h"
#include "org/bouncycastle/crypto/DefaultMultiBlockCipher.h"
#include "org/bouncycastle/crypto/MultiBlockCipher.h"
#include "org/bouncycastle/crypto/OutputLengthException.h"
#include "org/bouncycastle/crypto/constraints/DefaultServiceProperties.h"
#include "org/bouncycastle/crypto/engines/AESEngine.h"
#include "org/bouncycastle/crypto/engines/Utils.h"
#include "org/bouncycastle/crypto/params/KeyParameter.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/Pack.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/engines/AESEngine must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoEnginesAESEngine () {
 @public
  jint ROUNDS_;
  IOSObjectArray *WorkingKey_;
  jboolean forEncryption_;
  IOSByteArray *s_;
}

+ (jint)shiftWithInt:(jint)r
             withInt:(jint)shift;

+ (jint)FFmulXWithInt:(jint)x;

+ (jint)FFmulX2WithInt:(jint)x;

+ (jint)inv_mcolWithInt:(jint)x;

+ (jint)subWordWithInt:(jint)x;

/*!
 @brief Calculate the necessary round keys
  The number of calculations depends on key size and block size
  AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits
  This code is written assuming those are the only possible values
 */
- (IOSObjectArray *)generateWorkingKeyWithByteArray:(IOSByteArray *)key
                                        withBoolean:(jboolean)forEncryption;

- (void)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff
                    withIntArray2:(IOSObjectArray *)KW;

- (void)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff
                    withIntArray2:(IOSObjectArray *)KW;

- (jint)bitsOfSecurity;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoEnginesAESEngine, WorkingKey_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoEnginesAESEngine, s_, IOSByteArray *)

inline IOSByteArray *OrgBouncycastleCryptoEnginesAESEngine_get_S(void);
static IOSByteArray *OrgBouncycastleCryptoEnginesAESEngine_S;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesAESEngine, S, IOSByteArray *)

inline IOSByteArray *OrgBouncycastleCryptoEnginesAESEngine_get_Si(void);
static IOSByteArray *OrgBouncycastleCryptoEnginesAESEngine_Si;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesAESEngine, Si, IOSByteArray *)

inline IOSIntArray *OrgBouncycastleCryptoEnginesAESEngine_get_rcon(void);
static IOSIntArray *OrgBouncycastleCryptoEnginesAESEngine_rcon;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesAESEngine, rcon, IOSIntArray *)

inline IOSIntArray *OrgBouncycastleCryptoEnginesAESEngine_get_T0(void);
static IOSIntArray *OrgBouncycastleCryptoEnginesAESEngine_T0;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesAESEngine, T0, IOSIntArray *)

inline IOSIntArray *OrgBouncycastleCryptoEnginesAESEngine_get_Tinv0(void);
static IOSIntArray *OrgBouncycastleCryptoEnginesAESEngine_Tinv0;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesAESEngine, Tinv0, IOSIntArray *)

inline jint OrgBouncycastleCryptoEnginesAESEngine_get_m1(void);
#define OrgBouncycastleCryptoEnginesAESEngine_m1 -2139062144
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoEnginesAESEngine, m1, jint)

inline jint OrgBouncycastleCryptoEnginesAESEngine_get_m2(void);
#define OrgBouncycastleCryptoEnginesAESEngine_m2 2139062143
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoEnginesAESEngine, m2, jint)

inline jint OrgBouncycastleCryptoEnginesAESEngine_get_m3(void);
#define OrgBouncycastleCryptoEnginesAESEngine_m3 27
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoEnginesAESEngine, m3, jint)

inline jint OrgBouncycastleCryptoEnginesAESEngine_get_m4(void);
#define OrgBouncycastleCryptoEnginesAESEngine_m4 -1061109568
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoEnginesAESEngine, m4, jint)

inline jint OrgBouncycastleCryptoEnginesAESEngine_get_m5(void);
#define OrgBouncycastleCryptoEnginesAESEngine_m5 1061109567
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoEnginesAESEngine, m5, jint)

inline jint OrgBouncycastleCryptoEnginesAESEngine_get_BLOCK_SIZE(void);
#define OrgBouncycastleCryptoEnginesAESEngine_BLOCK_SIZE 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoEnginesAESEngine, BLOCK_SIZE, jint)

__attribute__((unused)) static jint OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(jint r, jint shift);

__attribute__((unused)) static jint OrgBouncycastleCryptoEnginesAESEngine_FFmulXWithInt_(jint x);

__attribute__((unused)) static jint OrgBouncycastleCryptoEnginesAESEngine_FFmulX2WithInt_(jint x);

__attribute__((unused)) static jint OrgBouncycastleCryptoEnginesAESEngine_inv_mcolWithInt_(jint x);

__attribute__((unused)) static jint OrgBouncycastleCryptoEnginesAESEngine_subWordWithInt_(jint x);

__attribute__((unused)) static IOSObjectArray *OrgBouncycastleCryptoEnginesAESEngine_generateWorkingKeyWithByteArray_withBoolean_(OrgBouncycastleCryptoEnginesAESEngine *self, IOSByteArray *key, jboolean forEncryption);

__attribute__((unused)) static void OrgBouncycastleCryptoEnginesAESEngine_encryptBlockWithByteArray_withInt_withByteArray_withInt_withIntArray2_(OrgBouncycastleCryptoEnginesAESEngine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff, IOSObjectArray *KW);

__attribute__((unused)) static void OrgBouncycastleCryptoEnginesAESEngine_decryptBlockWithByteArray_withInt_withByteArray_withInt_withIntArray2_(OrgBouncycastleCryptoEnginesAESEngine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff, IOSObjectArray *KW);

__attribute__((unused)) static jint OrgBouncycastleCryptoEnginesAESEngine_bitsOfSecurity(OrgBouncycastleCryptoEnginesAESEngine *self);

__attribute__((unused)) static IOSObjectArray *OrgBouncycastleCryptoEnginesAESEngine__Annotations$0(void);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/engines/AESEngine.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleCryptoEnginesAESEngine)


#line 37
@implementation OrgBouncycastleCryptoEnginesAESEngine


#line 228
+ (jint)shiftWithInt:(jint)r
             withInt:(jint)shift {
  return OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(r, shift);
}


#line 241
+ (jint)FFmulXWithInt:(jint)x {
  return OrgBouncycastleCryptoEnginesAESEngine_FFmulXWithInt_(x);
}


#line 246
+ (jint)FFmulX2WithInt:(jint)x {
  return OrgBouncycastleCryptoEnginesAESEngine_FFmulX2WithInt_(x);
}


#line 264
+ (jint)inv_mcolWithInt:(jint)x {
  return OrgBouncycastleCryptoEnginesAESEngine_inv_mcolWithInt_(x);
}


#line 275
+ (jint)subWordWithInt:(jint)x {
  return OrgBouncycastleCryptoEnginesAESEngine_subWordWithInt_(x);
}


#line 286
- (IOSObjectArray *)generateWorkingKeyWithByteArray:(IOSByteArray *)key
                                        withBoolean:(jboolean)forEncryption {
  return OrgBouncycastleCryptoEnginesAESEngine_generateWorkingKeyWithByteArray_withBoolean_(self, key, forEncryption);
}


#line 429
+ (id<OrgBouncycastleCryptoMultiBlockCipher>)newInstance {
  return OrgBouncycastleCryptoEnginesAESEngine_newInstance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 438
- (instancetype)init {
  OrgBouncycastleCryptoEnginesAESEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 452
- (void)init__WithBoolean:(jboolean)forEncryption
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)params {
  
#line 457
  if ([params isKindOfClass:[OrgBouncycastleCryptoParamsKeyParameter class]]) {
    
#line 459
    WorkingKey_ = OrgBouncycastleCryptoEnginesAESEngine_generateWorkingKeyWithByteArray_withBoolean_(self, [((OrgBouncycastleCryptoParamsKeyParameter *) nil_chk(((OrgBouncycastleCryptoParamsKeyParameter *) params))) getKey], forEncryption);
    self->forEncryption_ = forEncryption;
    if (forEncryption) {
      
#line 463
      s_ = OrgBouncycastleUtilArrays_cloneWithByteArray_(OrgBouncycastleCryptoEnginesAESEngine_S);
    }
    else {
      
#line 467
      s_ = OrgBouncycastleUtilArrays_cloneWithByteArray_(OrgBouncycastleCryptoEnginesAESEngine_Si);
    }
    
#line 470
    OrgBouncycastleCryptoCryptoServicesRegistrar_checkConstraintsWithOrgBouncycastleCryptoCryptoServiceProperties_(new_OrgBouncycastleCryptoConstraintsDefaultServiceProperties_initWithNSString_withInt_withId_withOrgBouncycastleCryptoCryptoServicePurpose_([self getAlgorithmName], OrgBouncycastleCryptoEnginesAESEngine_bitsOfSecurity(self), params, OrgBouncycastleCryptoEnginesUtils_getPurposeWithBoolean_(forEncryption)));
    
#line 472
    return;
  }
  
#line 475
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid parameter passed to AES init - ", [[((id<OrgBouncycastleCryptoCipherParameters>) nil_chk(params)) java_getClass] getName]));
}


#line 478
- (NSString *)getAlgorithmName {
  
#line 481
  return @"AES";
}

- (jint)getBlockSize {
  
#line 487
  return OrgBouncycastleCryptoEnginesAESEngine_BLOCK_SIZE;
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  
#line 493
  if (WorkingKey_ == nil) {
    
#line 495
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"AES engine not initialised");
  }
  
#line 498
  if (inOff > ((IOSByteArray *) nil_chk(inArg))->size_ - OrgBouncycastleCryptoEnginesAESEngine_BLOCK_SIZE) {
    
#line 500
    @throw new_OrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  
#line 503
  if (outOff > ((IOSByteArray *) nil_chk(outArg))->size_ - OrgBouncycastleCryptoEnginesAESEngine_BLOCK_SIZE) {
    
#line 505
    @throw new_OrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  
#line 508
  if (forEncryption_) {
    
#line 510
    OrgBouncycastleCryptoEnginesAESEngine_encryptBlockWithByteArray_withInt_withByteArray_withInt_withIntArray2_(self, inArg, inOff, outArg, outOff, WorkingKey_);
  }
  else {
    
#line 514
    OrgBouncycastleCryptoEnginesAESEngine_decryptBlockWithByteArray_withInt_withByteArray_withInt_withIntArray2_(self, inArg, inOff, outArg, outOff, WorkingKey_);
  }
  
#line 517
  return OrgBouncycastleCryptoEnginesAESEngine_BLOCK_SIZE;
}


#line 520
- (void)reset {
}


#line 525
- (void)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff
                    withIntArray2:(IOSObjectArray *)KW {
  OrgBouncycastleCryptoEnginesAESEngine_encryptBlockWithByteArray_withInt_withByteArray_withInt_withIntArray2_(self, inArg, inOff, outArg, outOff, KW);
}


#line 567
- (void)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff
                    withIntArray2:(IOSObjectArray *)KW {
  OrgBouncycastleCryptoEnginesAESEngine_decryptBlockWithByteArray_withInt_withByteArray_withInt_withIntArray2_(self, inArg, inOff, outArg, outOff, KW);
}


#line 609
- (jint)bitsOfSecurity {
  return OrgBouncycastleCryptoEnginesAESEngine_bitsOfSecurity(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 5, 3, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 6, 3, -1, -1, -1, -1 },
    { NULL, "[[I", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoMultiBlockCipher;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, 9, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(shiftWithInt:withInt:);
  methods[1].selector = @selector(FFmulXWithInt:);
  methods[2].selector = @selector(FFmulX2WithInt:);
  methods[3].selector = @selector(inv_mcolWithInt:);
  methods[4].selector = @selector(subWordWithInt:);
  methods[5].selector = @selector(generateWorkingKeyWithByteArray:withBoolean:);
  methods[6].selector = @selector(newInstance);
  methods[7].selector = @selector(init);
  methods[8].selector = @selector(init__WithBoolean:withOrgBouncycastleCryptoCipherParameters:);
  methods[9].selector = @selector(getAlgorithmName);
  methods[10].selector = @selector(getBlockSize);
  methods[11].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[12].selector = @selector(reset);
  methods[13].selector = @selector(encryptBlockWithByteArray:withInt:withByteArray:withInt:withIntArray2:);
  methods[14].selector = @selector(decryptBlockWithByteArray:withInt:withByteArray:withInt:withIntArray2:);
  methods[15].selector = @selector(bitsOfSecurity);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "S", "[B", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "Si", "[B", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "rcon", "[I", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "T0", "[I", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "Tinv0", "[I", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "m1", "I", .constantValue.asInt = OrgBouncycastleCryptoEnginesAESEngine_m1, 0x1a, -1, -1, -1, -1 },
    { "m2", "I", .constantValue.asInt = OrgBouncycastleCryptoEnginesAESEngine_m2, 0x1a, -1, -1, -1, -1 },
    { "m3", "I", .constantValue.asInt = OrgBouncycastleCryptoEnginesAESEngine_m3, 0x1a, -1, -1, -1, -1 },
    { "m4", "I", .constantValue.asInt = OrgBouncycastleCryptoEnginesAESEngine_m4, 0x1a, -1, -1, -1, -1 },
    { "m5", "I", .constantValue.asInt = OrgBouncycastleCryptoEnginesAESEngine_m5, 0x1a, -1, -1, -1, -1 },
    { "ROUNDS_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "WorkingKey_", "[[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "s_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "BLOCK_SIZE", "I", .constantValue.asInt = OrgBouncycastleCryptoEnginesAESEngine_BLOCK_SIZE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "shift", "II", "FFmulX", "I", "FFmulX2", "inv_mcol", "subWord", "generateWorkingKey", "[BZ", (void *)&OrgBouncycastleCryptoEnginesAESEngine__Annotations$0, "init", "ZLOrgBouncycastleCryptoCipherParameters;", "processBlock", "[BI[BI", "encryptBlock", "[BI[BI[[I", "decryptBlock", &OrgBouncycastleCryptoEnginesAESEngine_S, &OrgBouncycastleCryptoEnginesAESEngine_Si, &OrgBouncycastleCryptoEnginesAESEngine_rcon, &OrgBouncycastleCryptoEnginesAESEngine_T0, &OrgBouncycastleCryptoEnginesAESEngine_Tinv0 };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoEnginesAESEngine = { "AESEngine", "org.bouncycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 16, 15, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoEnginesAESEngine;
}

+ (void)initialize {
  if (self == [OrgBouncycastleCryptoEnginesAESEngine class]) {
    OrgBouncycastleCryptoEnginesAESEngine_S = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 42
      (jbyte) 99, (jbyte) 124, (jbyte) 119, (jbyte) 123, (jbyte) 242, (jbyte) 107, (jbyte) 111, (jbyte) 197,
#line 43
      (jbyte) 48, (jbyte) 1, (jbyte) 103, (jbyte) 43, (jbyte) 254, (jbyte) 215, (jbyte) 171, (jbyte) 118,
#line 44
      (jbyte) 202, (jbyte) 130, (jbyte) 201, (jbyte) 125, (jbyte) 250, (jbyte) 89, (jbyte) 71, (jbyte) 240,
#line 45
      (jbyte) 173, (jbyte) 212, (jbyte) 162, (jbyte) 175, (jbyte) 156, (jbyte) 164, (jbyte) 114, (jbyte) 192,
#line 46
      (jbyte) 183, (jbyte) 253, (jbyte) 147, (jbyte) 38, (jbyte) 54, (jbyte) 63, (jbyte) 247, (jbyte) 204,
#line 47
      (jbyte) 52, (jbyte) 165, (jbyte) 229, (jbyte) 241, (jbyte) 113, (jbyte) 216, (jbyte) 49, (jbyte) 21,
#line 48
      (jbyte) 4, (jbyte) 199, (jbyte) 35, (jbyte) 195, (jbyte) 24, (jbyte) 150, (jbyte) 5, (jbyte) 154,
#line 49
      (jbyte) 7, (jbyte) 18, (jbyte) 128, (jbyte) 226, (jbyte) 235, (jbyte) 39, (jbyte) 178, (jbyte) 117,
#line 50
      (jbyte) 9, (jbyte) 131, (jbyte) 44, (jbyte) 26, (jbyte) 27, (jbyte) 110, (jbyte) 90, (jbyte) 160,
#line 51
      (jbyte) 82, (jbyte) 59, (jbyte) 214, (jbyte) 179, (jbyte) 41, (jbyte) 227, (jbyte) 47, (jbyte) 132,
#line 52
      (jbyte) 83, (jbyte) 209, (jbyte) 0, (jbyte) 237, (jbyte) 32, (jbyte) 252, (jbyte) 177, (jbyte) 91,
#line 53
      (jbyte) 106, (jbyte) 203, (jbyte) 190, (jbyte) 57, (jbyte) 74, (jbyte) 76, (jbyte) 88, (jbyte) 207,
#line 54
      (jbyte) 208, (jbyte) 239, (jbyte) 170, (jbyte) 251, (jbyte) 67, (jbyte) 77, (jbyte) 51, (jbyte) 133,
#line 55
      (jbyte) 69, (jbyte) 249, (jbyte) 2, (jbyte) 127, (jbyte) 80, (jbyte) 60, (jbyte) 159, (jbyte) 168,
#line 56
      (jbyte) 81, (jbyte) 163, (jbyte) 64, (jbyte) 143, (jbyte) 146, (jbyte) 157, (jbyte) 56, (jbyte) 245,
#line 57
      (jbyte) 188, (jbyte) 182, (jbyte) 218, (jbyte) 33, (jbyte) 16, (jbyte) 255, (jbyte) 243, (jbyte) 210,
#line 58
      (jbyte) 205, (jbyte) 12, (jbyte) 19, (jbyte) 236, (jbyte) 95, (jbyte) 151, (jbyte) 68, (jbyte) 23,
#line 59
      (jbyte) 196, (jbyte) 167, (jbyte) 126, (jbyte) 61, (jbyte) 100, (jbyte) 93, (jbyte) 25, (jbyte) 115,
#line 60
      (jbyte) 96, (jbyte) 129, (jbyte) 79, (jbyte) 220, (jbyte) 34, (jbyte) 42, (jbyte) 144, (jbyte) 136,
#line 61
      (jbyte) 70, (jbyte) 238, (jbyte) 184, (jbyte) 20, (jbyte) 222, (jbyte) 94, (jbyte) 11, (jbyte) 219,
#line 62
      (jbyte) 224, (jbyte) 50, (jbyte) 58, (jbyte) 10, (jbyte) 73, (jbyte) 6, (jbyte) 36, (jbyte) 92,
#line 63
      (jbyte) 194, (jbyte) 211, (jbyte) 172, (jbyte) 98, (jbyte) 145, (jbyte) 149, (jbyte) 228, (jbyte) 121,
#line 64
      (jbyte) 231, (jbyte) 200, (jbyte) 55, (jbyte) 109, (jbyte) 141, (jbyte) 213, (jbyte) 78, (jbyte) 169,
#line 65
      (jbyte) 108, (jbyte) 86, (jbyte) 244, (jbyte) 234, (jbyte) 101, (jbyte) 122, (jbyte) 174, (jbyte) 8,
#line 66
      (jbyte) 186, (jbyte) 120, (jbyte) 37, (jbyte) 46, (jbyte) 28, (jbyte) 166, (jbyte) 180, (jbyte) 198,
#line 67
      (jbyte) 232, (jbyte) 221, (jbyte) 116, (jbyte) 31, (jbyte) 75, (jbyte) 189, (jbyte) 139, (jbyte) 138,
#line 68
      (jbyte) 112, (jbyte) 62, (jbyte) 181, (jbyte) 102, (jbyte) 72, (jbyte) 3, (jbyte) 246, (jbyte) 14,
#line 69
      (jbyte) 97, (jbyte) 53, (jbyte) 87, (jbyte) 185, (jbyte) 134, (jbyte) 193, (jbyte) 29, (jbyte) 158,
#line 70
      (jbyte) 225, (jbyte) 248, (jbyte) 152, (jbyte) 17, (jbyte) 105, (jbyte) 217, (jbyte) 142, (jbyte) 148,
#line 71
      (jbyte) 155, (jbyte) 30, (jbyte) 135, (jbyte) 233, (jbyte) 206, (jbyte) 85, (jbyte) 40, (jbyte) 223,
#line 72
      (jbyte) 140, (jbyte) 161, (jbyte) 137, (jbyte) 13, (jbyte) 191, (jbyte) 230, (jbyte) 66, (jbyte) 104,
#line 73
      (jbyte) 65, (jbyte) 153, (jbyte) 45, (jbyte) 15, (jbyte) 176, (jbyte) 84, (jbyte) 187, (jbyte) 22 } count:256];
      OrgBouncycastleCryptoEnginesAESEngine_Si = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 78
        (jbyte) 82, (jbyte) 9, (jbyte) 106, (jbyte) 213, (jbyte) 48, (jbyte) 54, (jbyte) 165, (jbyte) 56,
#line 79
        (jbyte) 191, (jbyte) 64, (jbyte) 163, (jbyte) 158, (jbyte) 129, (jbyte) 243, (jbyte) 215, (jbyte) 251,
#line 80
        (jbyte) 124, (jbyte) 227, (jbyte) 57, (jbyte) 130, (jbyte) 155, (jbyte) 47, (jbyte) 255, (jbyte) 135,
#line 81
        (jbyte) 52, (jbyte) 142, (jbyte) 67, (jbyte) 68, (jbyte) 196, (jbyte) 222, (jbyte) 233, (jbyte) 203,
#line 82
        (jbyte) 84, (jbyte) 123, (jbyte) 148, (jbyte) 50, (jbyte) 166, (jbyte) 194, (jbyte) 35, (jbyte) 61,
#line 83
        (jbyte) 238, (jbyte) 76, (jbyte) 149, (jbyte) 11, (jbyte) 66, (jbyte) 250, (jbyte) 195, (jbyte) 78,
#line 84
        (jbyte) 8, (jbyte) 46, (jbyte) 161, (jbyte) 102, (jbyte) 40, (jbyte) 217, (jbyte) 36, (jbyte) 178,
#line 85
        (jbyte) 118, (jbyte) 91, (jbyte) 162, (jbyte) 73, (jbyte) 109, (jbyte) 139, (jbyte) 209, (jbyte) 37,
#line 86
        (jbyte) 114, (jbyte) 248, (jbyte) 246, (jbyte) 100, (jbyte) 134, (jbyte) 104, (jbyte) 152, (jbyte) 22,
#line 87
        (jbyte) 212, (jbyte) 164, (jbyte) 92, (jbyte) 204, (jbyte) 93, (jbyte) 101, (jbyte) 182, (jbyte) 146,
#line 88
        (jbyte) 108, (jbyte) 112, (jbyte) 72, (jbyte) 80, (jbyte) 253, (jbyte) 237, (jbyte) 185, (jbyte) 218,
#line 89
        (jbyte) 94, (jbyte) 21, (jbyte) 70, (jbyte) 87, (jbyte) 167, (jbyte) 141, (jbyte) 157, (jbyte) 132,
#line 90
        (jbyte) 144, (jbyte) 216, (jbyte) 171, (jbyte) 0, (jbyte) 140, (jbyte) 188, (jbyte) 211, (jbyte) 10,
#line 91
        (jbyte) 247, (jbyte) 228, (jbyte) 88, (jbyte) 5, (jbyte) 184, (jbyte) 179, (jbyte) 69, (jbyte) 6,
#line 92
        (jbyte) 208, (jbyte) 44, (jbyte) 30, (jbyte) 143, (jbyte) 202, (jbyte) 63, (jbyte) 15, (jbyte) 2,
#line 93
        (jbyte) 193, (jbyte) 175, (jbyte) 189, (jbyte) 3, (jbyte) 1, (jbyte) 19, (jbyte) 138, (jbyte) 107,
#line 94
        (jbyte) 58, (jbyte) 145, (jbyte) 17, (jbyte) 65, (jbyte) 79, (jbyte) 103, (jbyte) 220, (jbyte) 234,
#line 95
        (jbyte) 151, (jbyte) 242, (jbyte) 207, (jbyte) 206, (jbyte) 240, (jbyte) 180, (jbyte) 230, (jbyte) 115,
#line 96
        (jbyte) 150, (jbyte) 172, (jbyte) 116, (jbyte) 34, (jbyte) 231, (jbyte) 173, (jbyte) 53, (jbyte) 133,
#line 97
        (jbyte) 226, (jbyte) 249, (jbyte) 55, (jbyte) 232, (jbyte) 28, (jbyte) 117, (jbyte) 223, (jbyte) 110,
#line 98
        (jbyte) 71, (jbyte) 241, (jbyte) 26, (jbyte) 113, (jbyte) 29, (jbyte) 41, (jbyte) 197, (jbyte) 137,
#line 99
        (jbyte) 111, (jbyte) 183, (jbyte) 98, (jbyte) 14, (jbyte) 170, (jbyte) 24, (jbyte) 190, (jbyte) 27,
#line 100
        (jbyte) 252, (jbyte) 86, (jbyte) 62, (jbyte) 75, (jbyte) 198, (jbyte) 210, (jbyte) 121, (jbyte) 32,
#line 101
        (jbyte) 154, (jbyte) 219, (jbyte) 192, (jbyte) 254, (jbyte) 120, (jbyte) 205, (jbyte) 90, (jbyte) 244,
#line 102
        (jbyte) 31, (jbyte) 221, (jbyte) 168, (jbyte) 51, (jbyte) 136, (jbyte) 7, (jbyte) 199, (jbyte) 49,
#line 103
        (jbyte) 177, (jbyte) 18, (jbyte) 16, (jbyte) 89, (jbyte) 39, (jbyte) 128, (jbyte) 236, (jbyte) 95,
#line 104
        (jbyte) 96, (jbyte) 81, (jbyte) 127, (jbyte) 169, (jbyte) 25, (jbyte) 181, (jbyte) 74, (jbyte) 13,
#line 105
        (jbyte) 45, (jbyte) 229, (jbyte) 122, (jbyte) 159, (jbyte) 147, (jbyte) 201, (jbyte) 156, (jbyte) 239,
#line 106
        (jbyte) 160, (jbyte) 224, (jbyte) 59, (jbyte) 77, (jbyte) 174, (jbyte) 42, (jbyte) 245, (jbyte) 176,
#line 107
        (jbyte) 200, (jbyte) 235, (jbyte) 187, (jbyte) 60, (jbyte) 131, (jbyte) 83, (jbyte) 153, (jbyte) 97,
#line 108
        (jbyte) 23, (jbyte) 43, (jbyte) 4, (jbyte) 126, (jbyte) 186, (jbyte) 119, (jbyte) 214, (jbyte) 38,
#line 109
        (jbyte) 225, (jbyte) 105, (jbyte) 20, (jbyte) 99, (jbyte) 85, (jbyte) 33, (jbyte) 12, (jbyte) 125 } count:256];
        OrgBouncycastleCryptoEnginesAESEngine_rcon = [IOSIntArray newArrayWithInts:(jint[]){
#line 114
          (jint) 0x01, (jint) 0x02, (jint) 0x04, (jint) 0x08, (jint) 0x10, (jint) 0x20, (jint) 0x40, (jint) 0x80, (jint) 0x1b, (jint) 0x36, (jint) 0x6c, (jint) 0xd8, (jint) 0xab, (jint) 0x4d, (jint) 0x9a,
#line 115
          (jint) 0x2f, (jint) 0x5e, (jint) 0xbc, (jint) 0x63, (jint) 0xc6, (jint) 0x97, (jint) 0x35, (jint) 0x6a, (jint) 0xd4, (jint) 0xb3, (jint) 0x7d, (jint) 0xfa, (jint) 0xef, (jint) 0xc5, (jint) 0x91 } count:30];
          OrgBouncycastleCryptoEnginesAESEngine_T0 = [IOSIntArray newArrayWithInts:(jint[]){
#line 120
            (jint) 0xa56363c6, (jint) 0x847c7cf8, (jint) 0x997777ee, (jint) 0x8d7b7bf6, (jint) 0x0df2f2ff,
#line 121
            (jint) 0xbd6b6bd6, (jint) 0xb16f6fde, (jint) 0x54c5c591, (jint) 0x50303060, (jint) 0x03010102,
#line 122
            (jint) 0xa96767ce, (jint) 0x7d2b2b56, (jint) 0x19fefee7, (jint) 0x62d7d7b5, (jint) 0xe6abab4d,
#line 123
            (jint) 0x9a7676ec, (jint) 0x45caca8f, (jint) 0x9d82821f, (jint) 0x40c9c989, (jint) 0x877d7dfa,
#line 124
            (jint) 0x15fafaef, (jint) 0xeb5959b2, (jint) 0xc947478e, (jint) 0x0bf0f0fb, (jint) 0xecadad41,
#line 125
            (jint) 0x67d4d4b3, (jint) 0xfda2a25f, (jint) 0xeaafaf45, (jint) 0xbf9c9c23, (jint) 0xf7a4a453,
#line 126
            (jint) 0x967272e4, (jint) 0x5bc0c09b, (jint) 0xc2b7b775, (jint) 0x1cfdfde1, (jint) 0xae93933d,
#line 127
            (jint) 0x6a26264c, (jint) 0x5a36366c, (jint) 0x413f3f7e, (jint) 0x02f7f7f5, (jint) 0x4fcccc83,
#line 128
            (jint) 0x5c343468, (jint) 0xf4a5a551, (jint) 0x34e5e5d1, (jint) 0x08f1f1f9, (jint) 0x937171e2,
#line 129
            (jint) 0x73d8d8ab, (jint) 0x53313162, (jint) 0x3f15152a, (jint) 0x0c040408, (jint) 0x52c7c795,
#line 130
            (jint) 0x65232346, (jint) 0x5ec3c39d, (jint) 0x28181830, (jint) 0xa1969637, (jint) 0x0f05050a,
#line 131
            (jint) 0xb59a9a2f, (jint) 0x0907070e, (jint) 0x36121224, (jint) 0x9b80801b, (jint) 0x3de2e2df,
#line 132
            (jint) 0x26ebebcd, (jint) 0x6927274e, (jint) 0xcdb2b27f, (jint) 0x9f7575ea, (jint) 0x1b090912,
#line 133
            (jint) 0x9e83831d, (jint) 0x742c2c58, (jint) 0x2e1a1a34, (jint) 0x2d1b1b36, (jint) 0xb26e6edc,
#line 134
            (jint) 0xee5a5ab4, (jint) 0xfba0a05b, (jint) 0xf65252a4, (jint) 0x4d3b3b76, (jint) 0x61d6d6b7,
#line 135
            (jint) 0xceb3b37d, (jint) 0x7b292952, (jint) 0x3ee3e3dd, (jint) 0x712f2f5e, (jint) 0x97848413,
#line 136
            (jint) 0xf55353a6, (jint) 0x68d1d1b9, (jint) 0x00000000, (jint) 0x2cededc1, (jint) 0x60202040,
#line 137
            (jint) 0x1ffcfce3, (jint) 0xc8b1b179, (jint) 0xed5b5bb6, (jint) 0xbe6a6ad4, (jint) 0x46cbcb8d,
#line 138
            (jint) 0xd9bebe67, (jint) 0x4b393972, (jint) 0xde4a4a94, (jint) 0xd44c4c98, (jint) 0xe85858b0,
#line 139
            (jint) 0x4acfcf85, (jint) 0x6bd0d0bb, (jint) 0x2aefefc5, (jint) 0xe5aaaa4f, (jint) 0x16fbfbed,
#line 140
            (jint) 0xc5434386, (jint) 0xd74d4d9a, (jint) 0x55333366, (jint) 0x94858511, (jint) 0xcf45458a,
#line 141
            (jint) 0x10f9f9e9, (jint) 0x06020204, (jint) 0x817f7ffe, (jint) 0xf05050a0, (jint) 0x443c3c78,
#line 142
            (jint) 0xba9f9f25, (jint) 0xe3a8a84b, (jint) 0xf35151a2, (jint) 0xfea3a35d, (jint) 0xc0404080,
#line 143
            (jint) 0x8a8f8f05, (jint) 0xad92923f, (jint) 0xbc9d9d21, (jint) 0x48383870, (jint) 0x04f5f5f1,
#line 144
            (jint) 0xdfbcbc63, (jint) 0xc1b6b677, (jint) 0x75dadaaf, (jint) 0x63212142, (jint) 0x30101020,
#line 145
            (jint) 0x1affffe5, (jint) 0x0ef3f3fd, (jint) 0x6dd2d2bf, (jint) 0x4ccdcd81, (jint) 0x140c0c18,
#line 146
            (jint) 0x35131326, (jint) 0x2fececc3, (jint) 0xe15f5fbe, (jint) 0xa2979735, (jint) 0xcc444488,
#line 147
            (jint) 0x3917172e, (jint) 0x57c4c493, (jint) 0xf2a7a755, (jint) 0x827e7efc, (jint) 0x473d3d7a,
#line 148
            (jint) 0xac6464c8, (jint) 0xe75d5dba, (jint) 0x2b191932, (jint) 0x957373e6, (jint) 0xa06060c0,
#line 149
            (jint) 0x98818119, (jint) 0xd14f4f9e, (jint) 0x7fdcdca3, (jint) 0x66222244, (jint) 0x7e2a2a54,
#line 150
            (jint) 0xab90903b, (jint) 0x8388880b, (jint) 0xca46468c, (jint) 0x29eeeec7, (jint) 0xd3b8b86b,
#line 151
            (jint) 0x3c141428, (jint) 0x79dedea7, (jint) 0xe25e5ebc, (jint) 0x1d0b0b16, (jint) 0x76dbdbad,
#line 152
            (jint) 0x3be0e0db, (jint) 0x56323264, (jint) 0x4e3a3a74, (jint) 0x1e0a0a14, (jint) 0xdb494992,
#line 153
            (jint) 0x0a06060c, (jint) 0x6c242448, (jint) 0xe45c5cb8, (jint) 0x5dc2c29f, (jint) 0x6ed3d3bd,
#line 154
            (jint) 0xefacac43, (jint) 0xa66262c4, (jint) 0xa8919139, (jint) 0xa4959531, (jint) 0x37e4e4d3,
#line 155
            (jint) 0x8b7979f2, (jint) 0x32e7e7d5, (jint) 0x43c8c88b, (jint) 0x5937376e, (jint) 0xb76d6dda,
#line 156
            (jint) 0x8c8d8d01, (jint) 0x64d5d5b1, (jint) 0xd24e4e9c, (jint) 0xe0a9a949, (jint) 0xb46c6cd8,
#line 157
            (jint) 0xfa5656ac, (jint) 0x07f4f4f3, (jint) 0x25eaeacf, (jint) 0xaf6565ca, (jint) 0x8e7a7af4,
#line 158
            (jint) 0xe9aeae47, (jint) 0x18080810, (jint) 0xd5baba6f, (jint) 0x887878f0, (jint) 0x6f25254a,
#line 159
            (jint) 0x722e2e5c, (jint) 0x241c1c38, (jint) 0xf1a6a657, (jint) 0xc7b4b473, (jint) 0x51c6c697,
#line 160
            (jint) 0x23e8e8cb, (jint) 0x7cdddda1, (jint) 0x9c7474e8, (jint) 0x211f1f3e, (jint) 0xdd4b4b96,
#line 161
            (jint) 0xdcbdbd61, (jint) 0x868b8b0d, (jint) 0x858a8a0f, (jint) 0x907070e0, (jint) 0x423e3e7c,
#line 162
            (jint) 0xc4b5b571, (jint) 0xaa6666cc, (jint) 0xd8484890, (jint) 0x05030306, (jint) 0x01f6f6f7,
#line 163
            (jint) 0x120e0e1c, (jint) 0xa36161c2, (jint) 0x5f35356a, (jint) 0xf95757ae, (jint) 0xd0b9b969,
#line 164
            (jint) 0x91868617, (jint) 0x58c1c199, (jint) 0x271d1d3a, (jint) 0xb99e9e27, (jint) 0x38e1e1d9,
#line 165
            (jint) 0x13f8f8eb, (jint) 0xb398982b, (jint) 0x33111122, (jint) 0xbb6969d2, (jint) 0x70d9d9a9,
#line 166
            (jint) 0x898e8e07, (jint) 0xa7949433, (jint) 0xb69b9b2d, (jint) 0x221e1e3c, (jint) 0x92878715,
#line 167
            (jint) 0x20e9e9c9, (jint) 0x49cece87, (jint) 0xff5555aa, (jint) 0x78282850, (jint) 0x7adfdfa5,
#line 168
            (jint) 0x8f8c8c03, (jint) 0xf8a1a159, (jint) 0x80898909, (jint) 0x170d0d1a, (jint) 0xdabfbf65,
#line 169
            (jint) 0x31e6e6d7, (jint) 0xc6424284, (jint) 0xb86868d0, (jint) 0xc3414182, (jint) 0xb0999929,
#line 170
            (jint) 0x772d2d5a, (jint) 0x110f0f1e, (jint) 0xcbb0b07b, (jint) 0xfc5454a8, (jint) 0xd6bbbb6d,
#line 171
            (jint) 0x3a16162c } count:256];
            OrgBouncycastleCryptoEnginesAESEngine_Tinv0 = [IOSIntArray newArrayWithInts:(jint[]){
#line 175
              (jint) 0x50a7f451, (jint) 0x5365417e, (jint) 0xc3a4171a, (jint) 0x965e273a, (jint) 0xcb6bab3b,
#line 176
              (jint) 0xf1459d1f, (jint) 0xab58faac, (jint) 0x9303e34b, (jint) 0x55fa3020, (jint) 0xf66d76ad,
#line 177
              (jint) 0x9176cc88, (jint) 0x254c02f5, (jint) 0xfcd7e54f, (jint) 0xd7cb2ac5, (jint) 0x80443526,
#line 178
              (jint) 0x8fa362b5, (jint) 0x495ab1de, (jint) 0x671bba25, (jint) 0x980eea45, (jint) 0xe1c0fe5d,
#line 179
              (jint) 0x02752fc3, (jint) 0x12f04c81, (jint) 0xa397468d, (jint) 0xc6f9d36b, (jint) 0xe75f8f03,
#line 180
              (jint) 0x959c9215, (jint) 0xeb7a6dbf, (jint) 0xda595295, (jint) 0x2d83bed4, (jint) 0xd3217458,
#line 181
              (jint) 0x2969e049, (jint) 0x44c8c98e, (jint) 0x6a89c275, (jint) 0x78798ef4, (jint) 0x6b3e5899,
#line 182
              (jint) 0xdd71b927, (jint) 0xb64fe1be, (jint) 0x17ad88f0, (jint) 0x66ac20c9, (jint) 0xb43ace7d,
#line 183
              (jint) 0x184adf63, (jint) 0x82311ae5, (jint) 0x60335197, (jint) 0x457f5362, (jint) 0xe07764b1,
#line 184
              (jint) 0x84ae6bbb, (jint) 0x1ca081fe, (jint) 0x942b08f9, (jint) 0x58684870, (jint) 0x19fd458f,
#line 185
              (jint) 0x876cde94, (jint) 0xb7f87b52, (jint) 0x23d373ab, (jint) 0xe2024b72, (jint) 0x578f1fe3,
#line 186
              (jint) 0x2aab5566, (jint) 0x0728ebb2, (jint) 0x03c2b52f, (jint) 0x9a7bc586, (jint) 0xa50837d3,
#line 187
              (jint) 0xf2872830, (jint) 0xb2a5bf23, (jint) 0xba6a0302, (jint) 0x5c8216ed, (jint) 0x2b1ccf8a,
#line 188
              (jint) 0x92b479a7, (jint) 0xf0f207f3, (jint) 0xa1e2694e, (jint) 0xcdf4da65, (jint) 0xd5be0506,
#line 189
              (jint) 0x1f6234d1, (jint) 0x8afea6c4, (jint) 0x9d532e34, (jint) 0xa055f3a2, (jint) 0x32e18a05,
#line 190
              (jint) 0x75ebf6a4, (jint) 0x39ec830b, (jint) 0xaaef6040, (jint) 0x069f715e, (jint) 0x51106ebd,
#line 191
              (jint) 0xf98a213e, (jint) 0x3d06dd96, (jint) 0xae053edd, (jint) 0x46bde64d, (jint) 0xb58d5491,
#line 192
              (jint) 0x055dc471, (jint) 0x6fd40604, (jint) 0xff155060, (jint) 0x24fb9819, (jint) 0x97e9bdd6,
#line 193
              (jint) 0xcc434089, (jint) 0x779ed967, (jint) 0xbd42e8b0, (jint) 0x888b8907, (jint) 0x385b19e7,
#line 194
              (jint) 0xdbeec879, (jint) 0x470a7ca1, (jint) 0xe90f427c, (jint) 0xc91e84f8, (jint) 0x00000000,
#line 195
              (jint) 0x83868009, (jint) 0x48ed2b32, (jint) 0xac70111e, (jint) 0x4e725a6c, (jint) 0xfbff0efd,
#line 196
              (jint) 0x5638850f, (jint) 0x1ed5ae3d, (jint) 0x27392d36, (jint) 0x64d90f0a, (jint) 0x21a65c68,
#line 197
              (jint) 0xd1545b9b, (jint) 0x3a2e3624, (jint) 0xb1670a0c, (jint) 0x0fe75793, (jint) 0xd296eeb4,
#line 198
              (jint) 0x9e919b1b, (jint) 0x4fc5c080, (jint) 0xa220dc61, (jint) 0x694b775a, (jint) 0x161a121c,
#line 199
              (jint) 0x0aba93e2, (jint) 0xe52aa0c0, (jint) 0x43e0223c, (jint) 0x1d171b12, (jint) 0x0b0d090e,
#line 200
              (jint) 0xadc78bf2, (jint) 0xb9a8b62d, (jint) 0xc8a91e14, (jint) 0x8519f157, (jint) 0x4c0775af,
#line 201
              (jint) 0xbbdd99ee, (jint) 0xfd607fa3, (jint) 0x9f2601f7, (jint) 0xbcf5725c, (jint) 0xc53b6644,
#line 202
              (jint) 0x347efb5b, (jint) 0x7629438b, (jint) 0xdcc623cb, (jint) 0x68fcedb6, (jint) 0x63f1e4b8,
#line 203
              (jint) 0xcadc31d7, (jint) 0x10856342, (jint) 0x40229713, (jint) 0x2011c684, (jint) 0x7d244a85,
#line 204
              (jint) 0xf83dbbd2, (jint) 0x1132f9ae, (jint) 0x6da129c7, (jint) 0x4b2f9e1d, (jint) 0xf330b2dc,
#line 205
              (jint) 0xec52860d, (jint) 0xd0e3c177, (jint) 0x6c16b32b, (jint) 0x99b970a9, (jint) 0xfa489411,
#line 206
              (jint) 0x2264e947, (jint) 0xc48cfca8, (jint) 0x1a3ff0a0, (jint) 0xd82c7d56, (jint) 0xef903322,
#line 207
              (jint) 0xc74e4987, (jint) 0xc1d138d9, (jint) 0xfea2ca8c, (jint) 0x360bd498, (jint) 0xcf81f5a6,
#line 208
              (jint) 0x28de7aa5, (jint) 0x268eb7da, (jint) 0xa4bfad3f, (jint) 0xe49d3a2c, (jint) 0x0d927850,
#line 209
              (jint) 0x9bcc5f6a, (jint) 0x62467e54, (jint) 0xc2138df6, (jint) 0xe8b8d890, (jint) 0x5ef7392e,
#line 210
              (jint) 0xf5afc382, (jint) 0xbe805d9f, (jint) 0x7c93d069, (jint) 0xa92dd56f, (jint) 0xb31225cf,
#line 211
              (jint) 0x3b99acc8, (jint) 0xa77d1810, (jint) 0x6e639ce8, (jint) 0x7bbb3bdb, (jint) 0x097826cd,
#line 212
              (jint) 0xf418596e, (jint) 0x01b79aec, (jint) 0xa89a4f83, (jint) 0x656e95e6, (jint) 0x7ee6ffaa,
#line 213
              (jint) 0x08cfbc21, (jint) 0xe6e815ef, (jint) 0xd99be7ba, (jint) 0xce366f4a, (jint) 0xd4099fea,
#line 214
              (jint) 0xd67cb029, (jint) 0xafb2a431, (jint) 0x31233f2a, (jint) 0x3094a5c6, (jint) 0xc066a235,
#line 215
              (jint) 0x37bc4e74, (jint) 0xa6ca82fc, (jint) 0xb0d090e0, (jint) 0x15d8a733, (jint) 0x4a9804f1,
#line 216
              (jint) 0xf7daec41, (jint) 0x0e50cd7f, (jint) 0x2ff69117, (jint) 0x8dd64d76, (jint) 0x4db0ef43,
#line 217
              (jint) 0x544daacc, (jint) 0xdf0496e4, (jint) 0xe3b5d19e, (jint) 0x1b886a4c, (jint) 0xb81f2cc1,
#line 218
              (jint) 0x7f516546, (jint) 0x04ea5e9d, (jint) 0x5d358c01, (jint) 0x737487fa, (jint) 0x2e410bfb,
#line 219
              (jint) 0x5a1d67b3, (jint) 0x52d2db92, (jint) 0x335610e9, (jint) 0x1347d66d, (jint) 0x8c61d79a,
#line 220
              (jint) 0x7a0ca137, (jint) 0x8e14f859, (jint) 0x893c13eb, (jint) 0xee27a9ce, (jint) 0x35c961b7,
#line 221
              (jint) 0xede51ce1, (jint) 0x3cb1477a, (jint) 0x59dfd29c, (jint) 0x3f73f255, (jint) 0x79ce1418,
#line 222
              (jint) 0xbf37c773, (jint) 0xeacdf753, (jint) 0x5baafd5f, (jint) 0x146f3ddf, (jint) 0x86db4478,
#line 223
              (jint) 0x81f3afca, (jint) 0x3ec468b9, (jint) 0x2c342438, (jint) 0x5f40a3c2, (jint) 0x72c31d16,
#line 224
              (jint) 0x0c25e2bc, (jint) 0x8b493c28, (jint) 0x41950dff, (jint) 0x7101a839, (jint) 0xdeb30c08,
#line 225
              (jint) 0x9ce4b4d8, (jint) 0x90c15664, (jint) 0x6184cb7b, (jint) 0x70b632d5, (jint) 0x745c6c48,
#line 226
              (jint) 0x4257b8d0 } count:256];
              J2OBJC_SET_INITIALIZED(OrgBouncycastleCryptoEnginesAESEngine)
            }
          }

@end


#line 228
jint OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(jint r, jint shift) {
  OrgBouncycastleCryptoEnginesAESEngine_initialize();
  return (JreURShift32(r, shift)) | (JreLShift32(r, -shift));
}


#line 241
jint OrgBouncycastleCryptoEnginesAESEngine_FFmulXWithInt_(jint x) {
  OrgBouncycastleCryptoEnginesAESEngine_initialize();
  return JreLShift32((x & OrgBouncycastleCryptoEnginesAESEngine_m2), 1) ^ (JreURShift32((x & OrgBouncycastleCryptoEnginesAESEngine_m1), 7)) * OrgBouncycastleCryptoEnginesAESEngine_m3;
}

jint OrgBouncycastleCryptoEnginesAESEngine_FFmulX2WithInt_(jint x) {
  OrgBouncycastleCryptoEnginesAESEngine_initialize();
  jint t0 = JreLShift32((x & OrgBouncycastleCryptoEnginesAESEngine_m5), 2);
  jint t1 = x & OrgBouncycastleCryptoEnginesAESEngine_m4;
  t1 ^= JreURShift32(t1, 1);
  return t0 ^ JreURShift32(t1, 2) ^ JreURShift32(t1, 5);
}


#line 264
jint OrgBouncycastleCryptoEnginesAESEngine_inv_mcolWithInt_(jint x) {
  OrgBouncycastleCryptoEnginesAESEngine_initialize();
  jint t0;
  
#line 266
  jint t1;
  t0 = x;
  t1 = t0 ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(t0, 8);
  t0 ^= OrgBouncycastleCryptoEnginesAESEngine_FFmulXWithInt_(t1);
  t1 ^= OrgBouncycastleCryptoEnginesAESEngine_FFmulX2WithInt_(t0);
  t0 ^= t1 ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(t1, 16);
  return t0;
}


#line 275
jint OrgBouncycastleCryptoEnginesAESEngine_subWordWithInt_(jint x) {
  OrgBouncycastleCryptoEnginesAESEngine_initialize();
  return (IOSByteArray_Get(nil_chk(OrgBouncycastleCryptoEnginesAESEngine_S), x & 255) & 255) | (JreLShift32((IOSByteArray_Get(OrgBouncycastleCryptoEnginesAESEngine_S, (JreRShift32(x, 8)) & 255) & 255), 8)) | (JreLShift32((IOSByteArray_Get(OrgBouncycastleCryptoEnginesAESEngine_S, (JreRShift32(x, 16)) & 255) & 255), 16)) | (JreLShift32(IOSByteArray_Get(OrgBouncycastleCryptoEnginesAESEngine_S, (JreRShift32(x, 24)) & 255), 24));
}


#line 286
IOSObjectArray *OrgBouncycastleCryptoEnginesAESEngine_generateWorkingKeyWithByteArray_withBoolean_(OrgBouncycastleCryptoEnginesAESEngine *self, IOSByteArray *key, jboolean forEncryption) {
  
#line 288
  jint keyLen = ((IOSByteArray *) nil_chk(key))->size_;
  if (keyLen < 16 || keyLen > 32 || (keyLen & 7) != 0) {
    
#line 291
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Key length not 128/192/256 bits.");
  }
  
#line 294
  jint KC = JreURShift32(keyLen, 2);
  self->ROUNDS_ = KC + 6;
  IOSObjectArray *W = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ self->ROUNDS_ + 1, 4 }];
  
#line 298
  switch (KC) {
    
#line 300
    case 4:
    {
      jint col0 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(key, 0);
      
#line 302
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, 0)), 0) = col0;
      jint col1 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(key, 4);
      
#line 303
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, 0)), 1) = col1;
      jint col2 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(key, 8);
      
#line 304
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, 0)), 2) = col2;
      jint col3 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(key, 12);
      
#line 305
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, 0)), 3) = col3;
      
#line 307
      for (jint i = 1; i <= 10; ++i) {
        
#line 309
        jint colx = OrgBouncycastleCryptoEnginesAESEngine_subWordWithInt_(OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(col3, 8)) ^ IOSIntArray_Get(nil_chk(OrgBouncycastleCryptoEnginesAESEngine_rcon), i - 1);
        col0 ^= colx;
        
#line 310
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i)), 0) = col0;
        col1 ^= col0;
        
#line 311
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i)), 1) = col1;
        col2 ^= col1;
        
#line 312
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i)), 2) = col2;
        col3 ^= col2;
        
#line 313
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i)), 3) = col3;
      }
      
#line 316
      break;
    }
    case 6:
    {
      jint col0 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(key, 0);
      
#line 320
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, 0)), 0) = col0;
      jint col1 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(key, 4);
      
#line 321
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, 0)), 1) = col1;
      jint col2 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(key, 8);
      
#line 322
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, 0)), 2) = col2;
      jint col3 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(key, 12);
      
#line 323
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, 0)), 3) = col3;
      
#line 325
      jint col4 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(key, 16);
      jint col5 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(key, 20);
      
#line 328
      jint i = 1;
      
#line 328
      jint rcon = 1;
      
#line 328
      jint colx;
      for (; ; ) {
        
#line 331
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i)), 0) = col4;
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i)), 1) = col5;
        colx = OrgBouncycastleCryptoEnginesAESEngine_subWordWithInt_(OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(col5, 8)) ^ rcon;
        
#line 333
        JreLShiftAssignInt(&rcon, 1);
        col0 ^= colx;
        
#line 334
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i)), 2) = col0;
        col1 ^= col0;
        
#line 335
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i)), 3) = col1;
        
#line 337
        col2 ^= col1;
        
#line 337
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i + 1)), 0) = col2;
        col3 ^= col2;
        
#line 338
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i + 1)), 1) = col3;
        col4 ^= col3;
        
#line 339
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i + 1)), 2) = col4;
        col5 ^= col4;
        
#line 340
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i + 1)), 3) = col5;
        
#line 342
        colx = OrgBouncycastleCryptoEnginesAESEngine_subWordWithInt_(OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(col5, 8)) ^ rcon;
        
#line 342
        JreLShiftAssignInt(&rcon, 1);
        col0 ^= colx;
        
#line 343
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i + 2)), 0) = col0;
        col1 ^= col0;
        
#line 344
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i + 2)), 1) = col1;
        col2 ^= col1;
        
#line 345
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i + 2)), 2) = col2;
        col3 ^= col2;
        
#line 346
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i + 2)), 3) = col3;
        
#line 348
        if ((i += 3) >= 13) {
          
#line 350
          break;
        }
        
#line 353
        col4 ^= col3;
        col5 ^= col4;
      }
      
#line 357
      break;
    }
    case 8:
    {
      jint col0 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(key, 0);
      
#line 361
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, 0)), 0) = col0;
      jint col1 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(key, 4);
      
#line 362
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, 0)), 1) = col1;
      jint col2 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(key, 8);
      
#line 363
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, 0)), 2) = col2;
      jint col3 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(key, 12);
      
#line 364
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, 0)), 3) = col3;
      
#line 366
      jint col4 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(key, 16);
      
#line 366
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, 1)), 0) = col4;
      jint col5 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(key, 20);
      
#line 367
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, 1)), 1) = col5;
      jint col6 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(key, 24);
      
#line 368
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, 1)), 2) = col6;
      jint col7 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(key, 28);
      
#line 369
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, 1)), 3) = col7;
      
#line 371
      jint i = 2;
      
#line 371
      jint rcon = 1;
      
#line 371
      jint colx;
      for (; ; ) {
        
#line 374
        colx = OrgBouncycastleCryptoEnginesAESEngine_subWordWithInt_(OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(col7, 8)) ^ rcon;
        
#line 374
        JreLShiftAssignInt(&rcon, 1);
        col0 ^= colx;
        
#line 375
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i)), 0) = col0;
        col1 ^= col0;
        
#line 376
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i)), 1) = col1;
        col2 ^= col1;
        
#line 377
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i)), 2) = col2;
        col3 ^= col2;
        
#line 378
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i)), 3) = col3;
        ++i;
        
#line 381
        if (i >= 15) {
          
#line 383
          break;
        }
        
#line 386
        colx = OrgBouncycastleCryptoEnginesAESEngine_subWordWithInt_(col3);
        col4 ^= colx;
        
#line 387
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i)), 0) = col4;
        col5 ^= col4;
        
#line 388
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i)), 1) = col5;
        col6 ^= col5;
        
#line 389
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i)), 2) = col6;
        col7 ^= col6;
        
#line 390
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, i)), 3) = col7;
        ++i;
      }
      
#line 394
      break;
    }
    default:
    {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"Should never get here");
    }
  }
  
#line 402
  if (!forEncryption) {
    
#line 404
    for (jint j = 1; j < self->ROUNDS_; j++) {
      
#line 406
      for (jint i = 0; i < 4; i++) {
        
#line 408
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(W, j)), i) = OrgBouncycastleCryptoEnginesAESEngine_inv_mcolWithInt_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(W, j)), i));
      }
    }
  }
  
#line 413
  return W;
}


#line 429
id<OrgBouncycastleCryptoMultiBlockCipher> OrgBouncycastleCryptoEnginesAESEngine_newInstance() {
  OrgBouncycastleCryptoEnginesAESEngine_initialize();
  return new_OrgBouncycastleCryptoEnginesAESEngine_init();
}


#line 438
void OrgBouncycastleCryptoEnginesAESEngine_init(OrgBouncycastleCryptoEnginesAESEngine *self) {
  OrgBouncycastleCryptoDefaultMultiBlockCipher_init(self);
  self->WorkingKey_ =
#line 417
  nil;
  
#line 441
  OrgBouncycastleCryptoCryptoServicesRegistrar_checkConstraintsWithOrgBouncycastleCryptoCryptoServiceProperties_(new_OrgBouncycastleCryptoConstraintsDefaultServiceProperties_initWithNSString_withInt_([self getAlgorithmName], 256));
}


#line 438
OrgBouncycastleCryptoEnginesAESEngine *new_OrgBouncycastleCryptoEnginesAESEngine_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoEnginesAESEngine, init)
}


#line 438
OrgBouncycastleCryptoEnginesAESEngine *create_OrgBouncycastleCryptoEnginesAESEngine_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoEnginesAESEngine, init)
}


#line 525
void OrgBouncycastleCryptoEnginesAESEngine_encryptBlockWithByteArray_withInt_withByteArray_withInt_withIntArray2_(OrgBouncycastleCryptoEnginesAESEngine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff, IOSObjectArray *KW) {
  
#line 527
  jint C0 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(inArg, inOff + 0);
  jint C1 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(inArg, inOff + 4);
  jint C2 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(inArg, inOff + 8);
  jint C3 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(inArg, inOff + 12);
  
#line 532
  jint t0 = C0 ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(KW), 0)), 0);
  jint t1 = C1 ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, 0)), 1);
  jint t2 = C2 ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, 0)), 2);
  
#line 536
  jint r = 1;
  
#line 536
  jint r0;
  
#line 536
  jint r1;
  
#line 536
  jint r2;
  
#line 536
  jint r3 = C3 ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, 0)), 3);
  while (r < self->ROUNDS_ - 1) {
    
#line 539
    r0 = IOSIntArray_Get(nil_chk(OrgBouncycastleCryptoEnginesAESEngine_T0), t0 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(t1, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(t2, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(r3, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 0);
    r1 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, t1 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(t2, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(r3, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(t0, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 1);
    r2 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, t2 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(r3, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(t0, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(t1, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 2);
    r3 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, r3 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(t0, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(t1, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(t2, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r++)), 3);
    t0 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, r0 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(r1, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(r2, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(r3, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 0);
    t1 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, r1 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(r2, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(r3, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(r0, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 1);
    t2 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, r2 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(r3, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(r0, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(r1, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 2);
    r3 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, r3 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(r0, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(r1, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(r2, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r++)), 3);
  }
  
#line 549
  r0 = IOSIntArray_Get(nil_chk(OrgBouncycastleCryptoEnginesAESEngine_T0), t0 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(t1, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(t2, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(r3, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 0);
  r1 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, t1 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(t2, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(r3, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(t0, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 1);
  r2 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, t2 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(r3, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(t0, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(t1, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 2);
  r3 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, r3 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(t0, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(t1, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_T0, (JreRShift32(t2, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r++)), 3);
  
#line 556
  C0 = IOSByteArray_Get(nil_chk(OrgBouncycastleCryptoEnginesAESEngine_S), r0 & 255) & 255 ^ JreLShift32((IOSByteArray_Get(OrgBouncycastleCryptoEnginesAESEngine_S, (JreRShift32(r1, 8)) & 255) & 255), 8) ^ JreLShift32((IOSByteArray_Get(nil_chk(self->s_), (JreRShift32(r2, 16)) & 255) & 255), 16) ^ JreLShift32(IOSByteArray_Get(self->s_, (JreRShift32(r3, 24)) & 255), 24) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 0);
  C1 = IOSByteArray_Get(self->s_, r1 & 255) & 255 ^ JreLShift32((IOSByteArray_Get(OrgBouncycastleCryptoEnginesAESEngine_S, (JreRShift32(r2, 8)) & 255) & 255), 8) ^ JreLShift32((IOSByteArray_Get(OrgBouncycastleCryptoEnginesAESEngine_S, (JreRShift32(r3, 16)) & 255) & 255), 16) ^ JreLShift32(IOSByteArray_Get(self->s_, (JreRShift32(r0, 24)) & 255), 24) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 1);
  C2 = IOSByteArray_Get(self->s_, r2 & 255) & 255 ^ JreLShift32((IOSByteArray_Get(OrgBouncycastleCryptoEnginesAESEngine_S, (JreRShift32(r3, 8)) & 255) & 255), 8) ^ JreLShift32((IOSByteArray_Get(OrgBouncycastleCryptoEnginesAESEngine_S, (JreRShift32(r0, 16)) & 255) & 255), 16) ^ JreLShift32(IOSByteArray_Get(OrgBouncycastleCryptoEnginesAESEngine_S, (JreRShift32(r1, 24)) & 255), 24) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 2);
  C3 = IOSByteArray_Get(self->s_, r3 & 255) & 255 ^ JreLShift32((IOSByteArray_Get(self->s_, (JreRShift32(r0, 8)) & 255) & 255), 8) ^ JreLShift32((IOSByteArray_Get(self->s_, (JreRShift32(r1, 16)) & 255) & 255), 16) ^ JreLShift32(IOSByteArray_Get(OrgBouncycastleCryptoEnginesAESEngine_S, (JreRShift32(r2, 24)) & 255), 24) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 3);
  
#line 561
  OrgBouncycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(C0, outArg, outOff + 0);
  OrgBouncycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(C1, outArg, outOff + 4);
  OrgBouncycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(C2, outArg, outOff + 8);
  OrgBouncycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(C3, outArg, outOff + 12);
}


#line 567
void OrgBouncycastleCryptoEnginesAESEngine_decryptBlockWithByteArray_withInt_withByteArray_withInt_withIntArray2_(OrgBouncycastleCryptoEnginesAESEngine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff, IOSObjectArray *KW) {
  
#line 569
  jint C0 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(inArg, inOff + 0);
  jint C1 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(inArg, inOff + 4);
  jint C2 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(inArg, inOff + 8);
  jint C3 = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(inArg, inOff + 12);
  
#line 574
  jint t0 = C0 ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(KW), self->ROUNDS_)), 0);
  jint t1 = C1 ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, self->ROUNDS_)), 1);
  jint t2 = C2 ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, self->ROUNDS_)), 2);
  
#line 578
  jint r = self->ROUNDS_ - 1;
  
#line 578
  jint r0;
  
#line 578
  jint r1;
  
#line 578
  jint r2;
  
#line 578
  jint r3 = C3 ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, self->ROUNDS_)), 3);
  while (r > 1) {
    
#line 581
    r0 = IOSIntArray_Get(nil_chk(OrgBouncycastleCryptoEnginesAESEngine_Tinv0), t0 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(r3, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(t2, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(t1, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 0);
    r1 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, t1 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(t0, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(r3, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(t2, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 1);
    r2 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, t2 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(t1, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(t0, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(r3, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 2);
    r3 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, r3 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(t2, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(t1, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(t0, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r--)), 3);
    t0 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, r0 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(r3, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(r2, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(r1, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 0);
    t1 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, r1 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(r0, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(r3, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(r2, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 1);
    t2 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, r2 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(r1, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(r0, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(r3, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 2);
    r3 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, r3 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(r2, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(r1, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(r0, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r--)), 3);
  }
  
#line 591
  r0 = IOSIntArray_Get(nil_chk(OrgBouncycastleCryptoEnginesAESEngine_Tinv0), t0 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(r3, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(t2, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(t1, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 0);
  r1 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, t1 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(t0, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(r3, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(t2, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 1);
  r2 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, t2 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(t1, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(t0, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(r3, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 2);
  r3 = IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, r3 & 255) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(t2, 8)) & 255), 24) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(t1, 16)) & 255), 16) ^ OrgBouncycastleCryptoEnginesAESEngine_shiftWithInt_withInt_(IOSIntArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Tinv0, (JreRShift32(t0, 24)) & 255), 8) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, r)), 3);
  
#line 598
  C0 = IOSByteArray_Get(nil_chk(OrgBouncycastleCryptoEnginesAESEngine_Si), r0 & 255) & 255 ^ JreLShift32((IOSByteArray_Get(nil_chk(self->s_), (JreRShift32(r3, 8)) & 255) & 255), 8) ^ JreLShift32((IOSByteArray_Get(self->s_, (JreRShift32(r2, 16)) & 255) & 255), 16) ^ JreLShift32(IOSByteArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Si, (JreRShift32(r1, 24)) & 255), 24) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, 0)), 0);
  C1 = IOSByteArray_Get(self->s_, r1 & 255) & 255 ^ JreLShift32((IOSByteArray_Get(self->s_, (JreRShift32(r0, 8)) & 255) & 255), 8) ^ JreLShift32((IOSByteArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Si, (JreRShift32(r3, 16)) & 255) & 255), 16) ^ JreLShift32(IOSByteArray_Get(self->s_, (JreRShift32(r2, 24)) & 255), 24) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, 0)), 1);
  C2 = IOSByteArray_Get(self->s_, r2 & 255) & 255 ^ JreLShift32((IOSByteArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Si, (JreRShift32(r1, 8)) & 255) & 255), 8) ^ JreLShift32((IOSByteArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Si, (JreRShift32(r0, 16)) & 255) & 255), 16) ^ JreLShift32(IOSByteArray_Get(self->s_, (JreRShift32(r3, 24)) & 255), 24) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, 0)), 2);
  C3 = IOSByteArray_Get(OrgBouncycastleCryptoEnginesAESEngine_Si, r3 & 255) & 255 ^ JreLShift32((IOSByteArray_Get(self->s_, (JreRShift32(r2, 8)) & 255) & 255), 8) ^ JreLShift32((IOSByteArray_Get(self->s_, (JreRShift32(r1, 16)) & 255) & 255), 16) ^ JreLShift32(IOSByteArray_Get(self->s_, (JreRShift32(r0, 24)) & 255), 24) ^ IOSIntArray_Get(nil_chk(IOSObjectArray_Get(KW, 0)), 3);
  
#line 603
  OrgBouncycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(C0, outArg, outOff + 0);
  OrgBouncycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(C1, outArg, outOff + 4);
  OrgBouncycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(C2, outArg, outOff + 8);
  OrgBouncycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(C3, outArg, outOff + 12);
}


#line 609
jint OrgBouncycastleCryptoEnginesAESEngine_bitsOfSecurity(OrgBouncycastleCryptoEnginesAESEngine *self) {
  
#line 611
  if (self->WorkingKey_ == nil) {
    
#line 613
    return 256;
  }
  return JreLShift32(self->WorkingKey_->size_ - 7, 5);
}

IOSObjectArray *OrgBouncycastleCryptoEnginesAESEngine__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoEnginesAESEngine)
