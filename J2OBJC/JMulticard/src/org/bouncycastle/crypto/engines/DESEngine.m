//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/engines/DESEngine.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/DataLengthException.h"
#include "org/bouncycastle/crypto/OutputLengthException.h"
#include "org/bouncycastle/crypto/engines/DESEngine.h"
#include "org/bouncycastle/crypto/params/KeyParameter.h"
#include "org/bouncycastle/util/Pack.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/engines/DESEngine must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoEnginesDESEngine () {
 @public
  IOSIntArray *workingKey_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoEnginesDESEngine, workingKey_, IOSIntArray *)

/*!
 @brief what follows is mainly taken from "Applied Cryptography", by
  Bruce Schneier, however it also bears great resemblance to Richard
  Outerbridge's D3DES...
 */
inline IOSShortArray *OrgBouncycastleCryptoEnginesDESEngine_get_bytebit(void);
static IOSShortArray *OrgBouncycastleCryptoEnginesDESEngine_bytebit;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesDESEngine, bytebit, IOSShortArray *)

inline IOSIntArray *OrgBouncycastleCryptoEnginesDESEngine_get_bigbyte(void);
static IOSIntArray *OrgBouncycastleCryptoEnginesDESEngine_bigbyte;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesDESEngine, bigbyte, IOSIntArray *)

inline IOSByteArray *OrgBouncycastleCryptoEnginesDESEngine_get_pc1(void);
static IOSByteArray *OrgBouncycastleCryptoEnginesDESEngine_pc1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesDESEngine, pc1, IOSByteArray *)

inline IOSByteArray *OrgBouncycastleCryptoEnginesDESEngine_get_totrot(void);
static IOSByteArray *OrgBouncycastleCryptoEnginesDESEngine_totrot;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesDESEngine, totrot, IOSByteArray *)

inline IOSByteArray *OrgBouncycastleCryptoEnginesDESEngine_get_pc2(void);
static IOSByteArray *OrgBouncycastleCryptoEnginesDESEngine_pc2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesDESEngine, pc2, IOSByteArray *)

inline IOSIntArray *OrgBouncycastleCryptoEnginesDESEngine_get_SP1(void);
static IOSIntArray *OrgBouncycastleCryptoEnginesDESEngine_SP1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesDESEngine, SP1, IOSIntArray *)

inline IOSIntArray *OrgBouncycastleCryptoEnginesDESEngine_get_SP2(void);
static IOSIntArray *OrgBouncycastleCryptoEnginesDESEngine_SP2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesDESEngine, SP2, IOSIntArray *)

inline IOSIntArray *OrgBouncycastleCryptoEnginesDESEngine_get_SP3(void);
static IOSIntArray *OrgBouncycastleCryptoEnginesDESEngine_SP3;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesDESEngine, SP3, IOSIntArray *)

inline IOSIntArray *OrgBouncycastleCryptoEnginesDESEngine_get_SP4(void);
static IOSIntArray *OrgBouncycastleCryptoEnginesDESEngine_SP4;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesDESEngine, SP4, IOSIntArray *)

inline IOSIntArray *OrgBouncycastleCryptoEnginesDESEngine_get_SP5(void);
static IOSIntArray *OrgBouncycastleCryptoEnginesDESEngine_SP5;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesDESEngine, SP5, IOSIntArray *)

inline IOSIntArray *OrgBouncycastleCryptoEnginesDESEngine_get_SP6(void);
static IOSIntArray *OrgBouncycastleCryptoEnginesDESEngine_SP6;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesDESEngine, SP6, IOSIntArray *)

inline IOSIntArray *OrgBouncycastleCryptoEnginesDESEngine_get_SP7(void);
static IOSIntArray *OrgBouncycastleCryptoEnginesDESEngine_SP7;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesDESEngine, SP7, IOSIntArray *)

inline IOSIntArray *OrgBouncycastleCryptoEnginesDESEngine_get_SP8(void);
static IOSIntArray *OrgBouncycastleCryptoEnginesDESEngine_SP8;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesDESEngine, SP8, IOSIntArray *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/engines/DESEngine.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleCryptoEnginesDESEngine)


#line 13
@implementation OrgBouncycastleCryptoEnginesDESEngine

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 23
- (instancetype)init {
  OrgBouncycastleCryptoEnginesDESEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 35
- (void)init__WithBoolean:(jboolean)encrypting
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)params {
  
#line 40
  if ([params isKindOfClass:[OrgBouncycastleCryptoParamsKeyParameter class]]) {
    
#line 42
    if (((IOSByteArray *) nil_chk([((OrgBouncycastleCryptoParamsKeyParameter *) nil_chk(((OrgBouncycastleCryptoParamsKeyParameter *) params))) getKey]))->size_ > 8) {
      
#line 44
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"DES key too long - should be 8 bytes");
    }
    
#line 47
    workingKey_ = [self generateWorkingKeyWithBoolean:encrypting withByteArray:
#line 48
    [((OrgBouncycastleCryptoParamsKeyParameter *) nil_chk(((OrgBouncycastleCryptoParamsKeyParameter *) params))) getKey]];
    
#line 50
    return;
  }
  
#line 53
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid parameter passed to DES init - ", [[((id<OrgBouncycastleCryptoCipherParameters>) nil_chk(params)) java_getClass] getName]));
}


#line 56
- (NSString *)getAlgorithmName {
  
#line 59
  return @"DES";
}

- (jint)getBlockSize {
  
#line 65
  return OrgBouncycastleCryptoEnginesDESEngine_BLOCK_SIZE;
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  
#line 75
  if (workingKey_ == nil) {
    
#line 77
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"DES engine not initialised");
  }
  
#line 80
  if ((inOff + OrgBouncycastleCryptoEnginesDESEngine_BLOCK_SIZE) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    
#line 82
    @throw new_OrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  
#line 85
  if ((outOff + OrgBouncycastleCryptoEnginesDESEngine_BLOCK_SIZE) > ((IOSByteArray *) nil_chk(outArg))->size_) {
    
#line 87
    @throw new_OrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  
#line 90
  [self desFuncWithIntArray:workingKey_ withByteArray:inArg withInt:inOff withByteArray:outArg withInt:outOff];
  
#line 92
  return OrgBouncycastleCryptoEnginesDESEngine_BLOCK_SIZE;
}


#line 95
- (void)reset {
}


#line 313
- (IOSIntArray *)generateWorkingKeyWithBoolean:(jboolean)encrypting
                                 withByteArray:(IOSByteArray *)key {
  
#line 317
  IOSIntArray *newKey = [IOSIntArray newArrayWithLength:32];
  IOSBooleanArray *pc1m = [IOSBooleanArray newArrayWithLength:56];
  
#line 318
  IOSBooleanArray *pcr = [IOSBooleanArray newArrayWithLength:
#line 319
  56];
  
#line 321
  for (jint j = 0; j < 56; j++) {
    
#line 323
    jint l = IOSByteArray_Get(nil_chk(OrgBouncycastleCryptoEnginesDESEngine_pc1), j);
    
#line 325
    *IOSBooleanArray_GetRef(pc1m, j) = ((IOSByteArray_Get(nil_chk(key), JreURShift32(l, 3)) & IOSShortArray_Get(nil_chk(OrgBouncycastleCryptoEnginesDESEngine_bytebit), l & 07)) != 0);
  }
  
#line 328
  for (jint i = 0; i < 16; i++) {
    
#line 330
    jint l;
    
#line 330
    jint m;
    
#line 330
    jint n;
    
#line 332
    if (encrypting) {
      
#line 334
      m = JreLShift32(i, 1);
    }
    else {
      
#line 338
      m = JreLShift32((15 - i), 1);
    }
    
#line 341
    n = m + 1;
    *IOSIntArray_GetRef(newKey, m) = *IOSIntArray_GetRef(newKey, n) = 0;
    
#line 344
    for (jint j = 0; j < 28; j++) {
      
#line 346
      l = j + IOSByteArray_Get(nil_chk(OrgBouncycastleCryptoEnginesDESEngine_totrot), i);
      if (l < 28) {
        
#line 349
        *IOSBooleanArray_GetRef(pcr, j) = IOSBooleanArray_Get(pc1m, l);
      }
      else {
        
#line 353
        *IOSBooleanArray_GetRef(pcr, j) = IOSBooleanArray_Get(pc1m, l - 28);
      }
    }
    
#line 357
    for (jint j = 28; j < 56; j++) {
      
#line 359
      l = j + IOSByteArray_Get(nil_chk(OrgBouncycastleCryptoEnginesDESEngine_totrot), i);
      if (l < 56) {
        
#line 362
        *IOSBooleanArray_GetRef(pcr, j) = IOSBooleanArray_Get(pc1m, l);
      }
      else {
        
#line 366
        *IOSBooleanArray_GetRef(pcr, j) = IOSBooleanArray_Get(pc1m, l - 28);
      }
    }
    
#line 370
    for (jint j = 0; j < 24; j++) {
      
#line 372
      if (IOSBooleanArray_Get(pcr, IOSByteArray_Get(nil_chk(OrgBouncycastleCryptoEnginesDESEngine_pc2), j))) {
        
#line 374
        *IOSIntArray_GetRef(newKey, m) |= IOSIntArray_Get(nil_chk(OrgBouncycastleCryptoEnginesDESEngine_bigbyte), j);
      }
      
#line 377
      if (IOSBooleanArray_Get(pcr, IOSByteArray_Get(OrgBouncycastleCryptoEnginesDESEngine_pc2, j + 24))) {
        
#line 379
        *IOSIntArray_GetRef(newKey, n) |= IOSIntArray_Get(nil_chk(OrgBouncycastleCryptoEnginesDESEngine_bigbyte), j);
      }
    }
  }
  
#line 387
  for (jint i = 0; i != 32; i += 2) {
    
#line 389
    jint i1;
    
#line 389
    jint i2;
    
#line 391
    i1 = IOSIntArray_Get(newKey, i);
    i2 = IOSIntArray_Get(newKey, i + 1);
    
#line 394
    *IOSIntArray_GetRef(newKey, i) = (JreLShift32((i1 & (jint) 0x00fc0000), 6)) | (JreLShift32((i1 & (jint) 0x00000fc0), 10)) |
#line 395
    (JreURShift32((i2 & (jint) 0x00fc0000), 10)) | (JreURShift32((i2 & (jint) 0x00000fc0), 6));
    
#line 397
    *IOSIntArray_GetRef(newKey, i + 1) = (JreLShift32((i1 & (jint) 0x0003f000), 12)) | (JreLShift32((i1 & (jint) 0x0000003f), 16)) |
#line 398
    (JreURShift32((i2 & (jint) 0x0003f000), 4)) | (i2 & (jint) 0x0000003f);
  }
  
#line 401
  return newKey;
}


#line 407
- (void)desFuncWithIntArray:(IOSIntArray *)wKey
              withByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff {
  
#line 414
  jint work;
  
#line 414
  jint right;
  
#line 414
  jint left;
  
#line 416
  left = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(inArg, inOff);
  right = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(inArg, inOff + 4);
  
#line 419
  work = ((JreURShift32(left, 4)) ^ right) & (jint) 0x0f0f0f0f;
  right ^= work;
  left ^= (JreLShift32(work, 4));
  work = ((JreURShift32(left, 16)) ^ right) & (jint) 0x0000ffff;
  right ^= work;
  left ^= (JreLShift32(work, 16));
  work = ((JreURShift32(right, 2)) ^ left) & (jint) 0x33333333;
  left ^= work;
  right ^= (JreLShift32(work, 2));
  work = ((JreURShift32(right, 8)) ^ left) & (jint) 0x00ff00ff;
  left ^= work;
  right ^= (JreLShift32(work, 8));
  right = (JreLShift32(right, 1)) | (JreURShift32(right, 31));
  work = (left ^ right) & (jint) 0xaaaaaaaa;
  left ^= work;
  right ^= work;
  left = (JreLShift32(left, 1)) | (JreURShift32(left, 31));
  
#line 437
  for (jint round = 0; round < 8; round++) {
    
#line 439
    jint fval;
    
#line 441
    work = (JreLShift32(right, 28)) | (JreURShift32(right, 4));
    work ^= IOSIntArray_Get(nil_chk(wKey), round * 4 + 0);
    fval = IOSIntArray_Get(nil_chk(OrgBouncycastleCryptoEnginesDESEngine_SP7), work & (jint) 0x3f);
    fval |= IOSIntArray_Get(nil_chk(OrgBouncycastleCryptoEnginesDESEngine_SP5), (JreURShift32(work, 8)) & (jint) 0x3f);
    fval |= IOSIntArray_Get(nil_chk(OrgBouncycastleCryptoEnginesDESEngine_SP3), (JreURShift32(work, 16)) & (jint) 0x3f);
    fval |= IOSIntArray_Get(nil_chk(OrgBouncycastleCryptoEnginesDESEngine_SP1), (JreURShift32(work, 24)) & (jint) 0x3f);
    work = right ^ IOSIntArray_Get(wKey, round * 4 + 1);
    fval |= IOSIntArray_Get(nil_chk(OrgBouncycastleCryptoEnginesDESEngine_SP8), work & (jint) 0x3f);
    fval |= IOSIntArray_Get(nil_chk(OrgBouncycastleCryptoEnginesDESEngine_SP6), (JreURShift32(work, 8)) & (jint) 0x3f);
    fval |= IOSIntArray_Get(nil_chk(OrgBouncycastleCryptoEnginesDESEngine_SP4), (JreURShift32(work, 16)) & (jint) 0x3f);
    fval |= IOSIntArray_Get(nil_chk(OrgBouncycastleCryptoEnginesDESEngine_SP2), (JreURShift32(work, 24)) & (jint) 0x3f);
    left ^= fval;
    work = (JreLShift32(left, 28)) | (JreURShift32(left, 4));
    work ^= IOSIntArray_Get(wKey, round * 4 + 2);
    fval = IOSIntArray_Get(OrgBouncycastleCryptoEnginesDESEngine_SP7, work & (jint) 0x3f);
    fval |= IOSIntArray_Get(OrgBouncycastleCryptoEnginesDESEngine_SP5, (JreURShift32(work, 8)) & (jint) 0x3f);
    fval |= IOSIntArray_Get(OrgBouncycastleCryptoEnginesDESEngine_SP3, (JreURShift32(work, 16)) & (jint) 0x3f);
    fval |= IOSIntArray_Get(OrgBouncycastleCryptoEnginesDESEngine_SP1, (JreURShift32(work, 24)) & (jint) 0x3f);
    work = left ^ IOSIntArray_Get(wKey, round * 4 + 3);
    fval |= IOSIntArray_Get(OrgBouncycastleCryptoEnginesDESEngine_SP8, work & (jint) 0x3f);
    fval |= IOSIntArray_Get(OrgBouncycastleCryptoEnginesDESEngine_SP6, (JreURShift32(work, 8)) & (jint) 0x3f);
    fval |= IOSIntArray_Get(OrgBouncycastleCryptoEnginesDESEngine_SP4, (JreURShift32(work, 16)) & (jint) 0x3f);
    fval |= IOSIntArray_Get(OrgBouncycastleCryptoEnginesDESEngine_SP2, (JreURShift32(work, 24)) & (jint) 0x3f);
    right ^= fval;
  }
  
#line 467
  right = (JreLShift32(right, 31)) | (JreURShift32(right, 1));
  work = (left ^ right) & (jint) 0xaaaaaaaa;
  left ^= work;
  right ^= work;
  left = (JreLShift32(left, 31)) | (JreURShift32(left, 1));
  work = ((JreURShift32(left, 8)) ^ right) & (jint) 0x00ff00ff;
  right ^= work;
  left ^= (JreLShift32(work, 8));
  work = ((JreURShift32(left, 2)) ^ right) & (jint) 0x33333333;
  right ^= work;
  left ^= (JreLShift32(work, 2));
  work = ((JreURShift32(right, 16)) ^ left) & (jint) 0x0000ffff;
  left ^= work;
  right ^= (JreLShift32(work, 16));
  work = ((JreURShift32(right, 4)) ^ left) & (jint) 0x0f0f0f0f;
  left ^= work;
  right ^= (JreLShift32(work, 4));
  
#line 485
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(right, outArg, outOff);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(left, outArg, outOff + 4);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(getBlockSize);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(generateWorkingKeyWithBoolean:withByteArray:);
  methods[7].selector = @selector(desFuncWithIntArray:withByteArray:withInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BLOCK_SIZE", "I", .constantValue.asInt = OrgBouncycastleCryptoEnginesDESEngine_BLOCK_SIZE, 0x1c, -1, -1, -1, -1 },
    { "workingKey_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bytebit", "[S", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "bigbyte", "[I", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "pc1", "[B", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "totrot", "[B", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "pc2", "[B", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "SP1", "[I", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "SP2", "[I", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "SP3", "[I", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "SP4", "[I", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "SP5", "[I", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "SP6", "[I", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "SP7", "[I", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "SP8", "[I", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgBouncycastleCryptoCipherParameters;", "processBlock", "[BI[BI", "generateWorkingKey", "Z[B", "desFunc", "[I[BI[BI", &OrgBouncycastleCryptoEnginesDESEngine_bytebit, &OrgBouncycastleCryptoEnginesDESEngine_bigbyte, &OrgBouncycastleCryptoEnginesDESEngine_pc1, &OrgBouncycastleCryptoEnginesDESEngine_totrot, &OrgBouncycastleCryptoEnginesDESEngine_pc2, &OrgBouncycastleCryptoEnginesDESEngine_SP1, &OrgBouncycastleCryptoEnginesDESEngine_SP2, &OrgBouncycastleCryptoEnginesDESEngine_SP3, &OrgBouncycastleCryptoEnginesDESEngine_SP4, &OrgBouncycastleCryptoEnginesDESEngine_SP5, &OrgBouncycastleCryptoEnginesDESEngine_SP6, &OrgBouncycastleCryptoEnginesDESEngine_SP7, &OrgBouncycastleCryptoEnginesDESEngine_SP8 };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoEnginesDESEngine = { "DESEngine", "org.bouncycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 8, 15, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoEnginesDESEngine;
}

+ (void)initialize {
  if (self == [OrgBouncycastleCryptoEnginesDESEngine class]) {
    OrgBouncycastleCryptoEnginesDESEngine_bytebit = [IOSShortArray newArrayWithShorts:(jshort[]){
#line 115
      0200, 0100, 040, 020, 010, 04, 02, 01 } count:8];
      OrgBouncycastleCryptoEnginesDESEngine_bigbyte = [IOSIntArray newArrayWithInts:(jint[]){
#line 120
        (jint) 0x800000, (jint) 0x400000, (jint) 0x200000, (jint) 0x100000,
#line 121
        (jint) 0x80000, (jint) 0x40000, (jint) 0x20000, (jint) 0x10000,
#line 122
        (jint) 0x8000, (jint) 0x4000, (jint) 0x2000, (jint) 0x1000,
#line 123
        (jint) 0x800, (jint) 0x400, (jint) 0x200, (jint) 0x100,
#line 124
        (jint) 0x80, (jint) 0x40, (jint) 0x20, (jint) 0x10,
#line 125
        (jint) 0x8, (jint) 0x4, (jint) 0x2, (jint) 0x1 } count:24];
        OrgBouncycastleCryptoEnginesDESEngine_pc1 = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 134
          56, 48, 40, 32, 24, 16, 8, 0, 57, 49, 41, 33, 25, 17,
#line 135
          9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35,
#line 136
          62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21,
#line 137
          13, 5, 60, 52, 44, 36, 28, 20, 12, 4, 27, 19, 11, 3 } count:56];
          OrgBouncycastleCryptoEnginesDESEngine_totrot = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 142
            1, 2, 4, 6, 8, 10, 12, 14,
#line 143
            15, 17, 19, 21, 23, 25, 27, 28 } count:16];
            OrgBouncycastleCryptoEnginesDESEngine_pc2 = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 148
              13, 16, 10, 23, 0, 4, 2, 27, 14, 5, 20, 9,
#line 149
              22, 18, 11, 3, 25, 7, 15, 6, 26, 19, 12, 1,
#line 150
              40, 51, 30, 36, 46, 54, 29, 39, 50, 44, 32, 47,
#line 151
              43, 48, 38, 55, 33, 52, 45, 41, 49, 35, 28, 31 } count:48];
              OrgBouncycastleCryptoEnginesDESEngine_SP1 = [IOSIntArray newArrayWithInts:(jint[]){
#line 155
                (jint) 0x01010400, (jint) 0x00000000, (jint) 0x00010000, (jint) 0x01010404,
#line 156
                (jint) 0x01010004, (jint) 0x00010404, (jint) 0x00000004, (jint) 0x00010000,
#line 157
                (jint) 0x00000400, (jint) 0x01010400, (jint) 0x01010404, (jint) 0x00000400,
#line 158
                (jint) 0x01000404, (jint) 0x01010004, (jint) 0x01000000, (jint) 0x00000004,
#line 159
                (jint) 0x00000404, (jint) 0x01000400, (jint) 0x01000400, (jint) 0x00010400,
#line 160
                (jint) 0x00010400, (jint) 0x01010000, (jint) 0x01010000, (jint) 0x01000404,
#line 161
                (jint) 0x00010004, (jint) 0x01000004, (jint) 0x01000004, (jint) 0x00010004,
#line 162
                (jint) 0x00000000, (jint) 0x00000404, (jint) 0x00010404, (jint) 0x01000000,
#line 163
                (jint) 0x00010000, (jint) 0x01010404, (jint) 0x00000004, (jint) 0x01010000,
#line 164
                (jint) 0x01010400, (jint) 0x01000000, (jint) 0x01000000, (jint) 0x00000400,
#line 165
                (jint) 0x01010004, (jint) 0x00010000, (jint) 0x00010400, (jint) 0x01000004,
#line 166
                (jint) 0x00000400, (jint) 0x00000004, (jint) 0x01000404, (jint) 0x00010404,
#line 167
                (jint) 0x01010404, (jint) 0x00010004, (jint) 0x01010000, (jint) 0x01000404,
#line 168
                (jint) 0x01000004, (jint) 0x00000404, (jint) 0x00010404, (jint) 0x01010400,
#line 169
                (jint) 0x00000404, (jint) 0x01000400, (jint) 0x01000400, (jint) 0x00000000,
#line 170
                (jint) 0x00010004, (jint) 0x00010400, (jint) 0x00000000, (jint) 0x01010004 } count:64];
                OrgBouncycastleCryptoEnginesDESEngine_SP2 = [IOSIntArray newArrayWithInts:(jint[]){
#line 174
                  (jint) 0x80108020, (jint) 0x80008000, (jint) 0x00008000, (jint) 0x00108020,
#line 175
                  (jint) 0x00100000, (jint) 0x00000020, (jint) 0x80100020, (jint) 0x80008020,
#line 176
                  (jint) 0x80000020, (jint) 0x80108020, (jint) 0x80108000, -0x7fffffff - 1,
#line 177
                  (jint) 0x80008000, (jint) 0x00100000, (jint) 0x00000020, (jint) 0x80100020,
#line 178
                  (jint) 0x00108000, (jint) 0x00100020, (jint) 0x80008020, (jint) 0x00000000,
#line 179
                  -0x7fffffff - 1, (jint) 0x00008000, (jint) 0x00108020, (jint) 0x80100000,
#line 180
                  (jint) 0x00100020, (jint) 0x80000020, (jint) 0x00000000, (jint) 0x00108000,
#line 181
                  (jint) 0x00008020, (jint) 0x80108000, (jint) 0x80100000, (jint) 0x00008020,
#line 182
                  (jint) 0x00000000, (jint) 0x00108020, (jint) 0x80100020, (jint) 0x00100000,
#line 183
                  (jint) 0x80008020, (jint) 0x80100000, (jint) 0x80108000, (jint) 0x00008000,
#line 184
                  (jint) 0x80100000, (jint) 0x80008000, (jint) 0x00000020, (jint) 0x80108020,
#line 185
                  (jint) 0x00108020, (jint) 0x00000020, (jint) 0x00008000, -0x7fffffff - 1,
#line 186
                  (jint) 0x00008020, (jint) 0x80108000, (jint) 0x00100000, (jint) 0x80000020,
#line 187
                  (jint) 0x00100020, (jint) 0x80008020, (jint) 0x80000020, (jint) 0x00100020,
#line 188
                  (jint) 0x00108000, (jint) 0x00000000, (jint) 0x80008000, (jint) 0x00008020,
#line 189
                  -0x7fffffff - 1, (jint) 0x80100020, (jint) 0x80108020, (jint) 0x00108000 } count:64];
                  OrgBouncycastleCryptoEnginesDESEngine_SP3 = [IOSIntArray newArrayWithInts:(jint[]){
#line 193
                    (jint) 0x00000208, (jint) 0x08020200, (jint) 0x00000000, (jint) 0x08020008,
#line 194
                    (jint) 0x08000200, (jint) 0x00000000, (jint) 0x00020208, (jint) 0x08000200,
#line 195
                    (jint) 0x00020008, (jint) 0x08000008, (jint) 0x08000008, (jint) 0x00020000,
#line 196
                    (jint) 0x08020208, (jint) 0x00020008, (jint) 0x08020000, (jint) 0x00000208,
#line 197
                    (jint) 0x08000000, (jint) 0x00000008, (jint) 0x08020200, (jint) 0x00000200,
#line 198
                    (jint) 0x00020200, (jint) 0x08020000, (jint) 0x08020008, (jint) 0x00020208,
#line 199
                    (jint) 0x08000208, (jint) 0x00020200, (jint) 0x00020000, (jint) 0x08000208,
#line 200
                    (jint) 0x00000008, (jint) 0x08020208, (jint) 0x00000200, (jint) 0x08000000,
#line 201
                    (jint) 0x08020200, (jint) 0x08000000, (jint) 0x00020008, (jint) 0x00000208,
#line 202
                    (jint) 0x00020000, (jint) 0x08020200, (jint) 0x08000200, (jint) 0x00000000,
#line 203
                    (jint) 0x00000200, (jint) 0x00020008, (jint) 0x08020208, (jint) 0x08000200,
#line 204
                    (jint) 0x08000008, (jint) 0x00000200, (jint) 0x00000000, (jint) 0x08020008,
#line 205
                    (jint) 0x08000208, (jint) 0x00020000, (jint) 0x08000000, (jint) 0x08020208,
#line 206
                    (jint) 0x00000008, (jint) 0x00020208, (jint) 0x00020200, (jint) 0x08000008,
#line 207
                    (jint) 0x08020000, (jint) 0x08000208, (jint) 0x00000208, (jint) 0x08020000,
#line 208
                    (jint) 0x00020208, (jint) 0x00000008, (jint) 0x08020008, (jint) 0x00020200 } count:64];
                    OrgBouncycastleCryptoEnginesDESEngine_SP4 = [IOSIntArray newArrayWithInts:(jint[]){
#line 212
                      (jint) 0x00802001, (jint) 0x00002081, (jint) 0x00002081, (jint) 0x00000080,
#line 213
                      (jint) 0x00802080, (jint) 0x00800081, (jint) 0x00800001, (jint) 0x00002001,
#line 214
                      (jint) 0x00000000, (jint) 0x00802000, (jint) 0x00802000, (jint) 0x00802081,
#line 215
                      (jint) 0x00000081, (jint) 0x00000000, (jint) 0x00800080, (jint) 0x00800001,
#line 216
                      (jint) 0x00000001, (jint) 0x00002000, (jint) 0x00800000, (jint) 0x00802001,
#line 217
                      (jint) 0x00000080, (jint) 0x00800000, (jint) 0x00002001, (jint) 0x00002080,
#line 218
                      (jint) 0x00800081, (jint) 0x00000001, (jint) 0x00002080, (jint) 0x00800080,
#line 219
                      (jint) 0x00002000, (jint) 0x00802080, (jint) 0x00802081, (jint) 0x00000081,
#line 220
                      (jint) 0x00800080, (jint) 0x00800001, (jint) 0x00802000, (jint) 0x00802081,
#line 221
                      (jint) 0x00000081, (jint) 0x00000000, (jint) 0x00000000, (jint) 0x00802000,
#line 222
                      (jint) 0x00002080, (jint) 0x00800080, (jint) 0x00800081, (jint) 0x00000001,
#line 223
                      (jint) 0x00802001, (jint) 0x00002081, (jint) 0x00002081, (jint) 0x00000080,
#line 224
                      (jint) 0x00802081, (jint) 0x00000081, (jint) 0x00000001, (jint) 0x00002000,
#line 225
                      (jint) 0x00800001, (jint) 0x00002001, (jint) 0x00802080, (jint) 0x00800081,
#line 226
                      (jint) 0x00002001, (jint) 0x00002080, (jint) 0x00800000, (jint) 0x00802001,
#line 227
                      (jint) 0x00000080, (jint) 0x00800000, (jint) 0x00002000, (jint) 0x00802080 } count:64];
                      OrgBouncycastleCryptoEnginesDESEngine_SP5 = [IOSIntArray newArrayWithInts:(jint[]){
#line 231
                        (jint) 0x00000100, (jint) 0x02080100, (jint) 0x02080000, (jint) 0x42000100,
#line 232
                        (jint) 0x00080000, (jint) 0x00000100, (jint) 0x40000000, (jint) 0x02080000,
#line 233
                        (jint) 0x40080100, (jint) 0x00080000, (jint) 0x02000100, (jint) 0x40080100,
#line 234
                        (jint) 0x42000100, (jint) 0x42080000, (jint) 0x00080100, (jint) 0x40000000,
#line 235
                        (jint) 0x02000000, (jint) 0x40080000, (jint) 0x40080000, (jint) 0x00000000,
#line 236
                        (jint) 0x40000100, (jint) 0x42080100, (jint) 0x42080100, (jint) 0x02000100,
#line 237
                        (jint) 0x42080000, (jint) 0x40000100, (jint) 0x00000000, (jint) 0x42000000,
#line 238
                        (jint) 0x02080100, (jint) 0x02000000, (jint) 0x42000000, (jint) 0x00080100,
#line 239
                        (jint) 0x00080000, (jint) 0x42000100, (jint) 0x00000100, (jint) 0x02000000,
#line 240
                        (jint) 0x40000000, (jint) 0x02080000, (jint) 0x42000100, (jint) 0x40080100,
#line 241
                        (jint) 0x02000100, (jint) 0x40000000, (jint) 0x42080000, (jint) 0x02080100,
#line 242
                        (jint) 0x40080100, (jint) 0x00000100, (jint) 0x02000000, (jint) 0x42080000,
#line 243
                        (jint) 0x42080100, (jint) 0x00080100, (jint) 0x42000000, (jint) 0x42080100,
#line 244
                        (jint) 0x02080000, (jint) 0x00000000, (jint) 0x40080000, (jint) 0x42000000,
#line 245
                        (jint) 0x00080100, (jint) 0x02000100, (jint) 0x40000100, (jint) 0x00080000,
#line 246
                        (jint) 0x00000000, (jint) 0x40080000, (jint) 0x02080100, (jint) 0x40000100 } count:64];
                        OrgBouncycastleCryptoEnginesDESEngine_SP6 = [IOSIntArray newArrayWithInts:(jint[]){
#line 250
                          (jint) 0x20000010, (jint) 0x20400000, (jint) 0x00004000, (jint) 0x20404010,
#line 251
                          (jint) 0x20400000, (jint) 0x00000010, (jint) 0x20404010, (jint) 0x00400000,
#line 252
                          (jint) 0x20004000, (jint) 0x00404010, (jint) 0x00400000, (jint) 0x20000010,
#line 253
                          (jint) 0x00400010, (jint) 0x20004000, (jint) 0x20000000, (jint) 0x00004010,
#line 254
                          (jint) 0x00000000, (jint) 0x00400010, (jint) 0x20004010, (jint) 0x00004000,
#line 255
                          (jint) 0x00404000, (jint) 0x20004010, (jint) 0x00000010, (jint) 0x20400010,
#line 256
                          (jint) 0x20400010, (jint) 0x00000000, (jint) 0x00404010, (jint) 0x20404000,
#line 257
                          (jint) 0x00004010, (jint) 0x00404000, (jint) 0x20404000, (jint) 0x20000000,
#line 258
                          (jint) 0x20004000, (jint) 0x00000010, (jint) 0x20400010, (jint) 0x00404000,
#line 259
                          (jint) 0x20404010, (jint) 0x00400000, (jint) 0x00004010, (jint) 0x20000010,
#line 260
                          (jint) 0x00400000, (jint) 0x20004000, (jint) 0x20000000, (jint) 0x00004010,
#line 261
                          (jint) 0x20000010, (jint) 0x20404010, (jint) 0x00404000, (jint) 0x20400000,
#line 262
                          (jint) 0x00404010, (jint) 0x20404000, (jint) 0x00000000, (jint) 0x20400010,
#line 263
                          (jint) 0x00000010, (jint) 0x00004000, (jint) 0x20400000, (jint) 0x00404010,
#line 264
                          (jint) 0x00004000, (jint) 0x00400010, (jint) 0x20004010, (jint) 0x00000000,
#line 265
                          (jint) 0x20404000, (jint) 0x20000000, (jint) 0x00400010, (jint) 0x20004010 } count:64];
                          OrgBouncycastleCryptoEnginesDESEngine_SP7 = [IOSIntArray newArrayWithInts:(jint[]){
#line 269
                            (jint) 0x00200000, (jint) 0x04200002, (jint) 0x04000802, (jint) 0x00000000,
#line 270
                            (jint) 0x00000800, (jint) 0x04000802, (jint) 0x00200802, (jint) 0x04200800,
#line 271
                            (jint) 0x04200802, (jint) 0x00200000, (jint) 0x00000000, (jint) 0x04000002,
#line 272
                            (jint) 0x00000002, (jint) 0x04000000, (jint) 0x04200002, (jint) 0x00000802,
#line 273
                            (jint) 0x04000800, (jint) 0x00200802, (jint) 0x00200002, (jint) 0x04000800,
#line 274
                            (jint) 0x04000002, (jint) 0x04200000, (jint) 0x04200800, (jint) 0x00200002,
#line 275
                            (jint) 0x04200000, (jint) 0x00000800, (jint) 0x00000802, (jint) 0x04200802,
#line 276
                            (jint) 0x00200800, (jint) 0x00000002, (jint) 0x04000000, (jint) 0x00200800,
#line 277
                            (jint) 0x04000000, (jint) 0x00200800, (jint) 0x00200000, (jint) 0x04000802,
#line 278
                            (jint) 0x04000802, (jint) 0x04200002, (jint) 0x04200002, (jint) 0x00000002,
#line 279
                            (jint) 0x00200002, (jint) 0x04000000, (jint) 0x04000800, (jint) 0x00200000,
#line 280
                            (jint) 0x04200800, (jint) 0x00000802, (jint) 0x00200802, (jint) 0x04200800,
#line 281
                            (jint) 0x00000802, (jint) 0x04000002, (jint) 0x04200802, (jint) 0x04200000,
#line 282
                            (jint) 0x00200800, (jint) 0x00000000, (jint) 0x00000002, (jint) 0x04200802,
#line 283
                            (jint) 0x00000000, (jint) 0x00200802, (jint) 0x04200000, (jint) 0x00000800,
#line 284
                            (jint) 0x04000002, (jint) 0x04000800, (jint) 0x00000800, (jint) 0x00200002 } count:64];
                            OrgBouncycastleCryptoEnginesDESEngine_SP8 = [IOSIntArray newArrayWithInts:(jint[]){
#line 288
                              (jint) 0x10001040, (jint) 0x00001000, (jint) 0x00040000, (jint) 0x10041040,
#line 289
                              (jint) 0x10000000, (jint) 0x10001040, (jint) 0x00000040, (jint) 0x10000000,
#line 290
                              (jint) 0x00040040, (jint) 0x10040000, (jint) 0x10041040, (jint) 0x00041000,
#line 291
                              (jint) 0x10041000, (jint) 0x00041040, (jint) 0x00001000, (jint) 0x00000040,
#line 292
                              (jint) 0x10040000, (jint) 0x10000040, (jint) 0x10001000, (jint) 0x00001040,
#line 293
                              (jint) 0x00041000, (jint) 0x00040040, (jint) 0x10040040, (jint) 0x10041000,
#line 294
                              (jint) 0x00001040, (jint) 0x00000000, (jint) 0x00000000, (jint) 0x10040040,
#line 295
                              (jint) 0x10000040, (jint) 0x10001000, (jint) 0x00041040, (jint) 0x00040000,
#line 296
                              (jint) 0x00041040, (jint) 0x00040000, (jint) 0x10041000, (jint) 0x00001000,
#line 297
                              (jint) 0x00000040, (jint) 0x10040040, (jint) 0x00001000, (jint) 0x00041040,
#line 298
                              (jint) 0x10001000, (jint) 0x00000040, (jint) 0x10000040, (jint) 0x10040000,
#line 299
                              (jint) 0x10040040, (jint) 0x10000000, (jint) 0x00040000, (jint) 0x10001040,
#line 300
                              (jint) 0x00000000, (jint) 0x10041040, (jint) 0x00040040, (jint) 0x10000040,
#line 301
                              (jint) 0x10040000, (jint) 0x10001000, (jint) 0x10001040, (jint) 0x00000000,
#line 302
                              (jint) 0x10041040, (jint) 0x00041000, (jint) 0x00041000, (jint) 0x00001040,
#line 303
                              (jint) 0x00001040, (jint) 0x00040040, (jint) 0x10000000, (jint) 0x10041000 } count:64];
                              J2OBJC_SET_INITIALIZED(OrgBouncycastleCryptoEnginesDESEngine)
                            }
                          }

@end


#line 23
void OrgBouncycastleCryptoEnginesDESEngine_init(OrgBouncycastleCryptoEnginesDESEngine *self) {
  NSObject_init(self);
  self->workingKey_ =
#line 18
  nil;
}


#line 23
OrgBouncycastleCryptoEnginesDESEngine *new_OrgBouncycastleCryptoEnginesDESEngine_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoEnginesDESEngine, init)
}


#line 23
OrgBouncycastleCryptoEnginesDESEngine *create_OrgBouncycastleCryptoEnginesDESEngine_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoEnginesDESEngine, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoEnginesDESEngine)
