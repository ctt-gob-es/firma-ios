//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/engines/Salsa20Engine.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoEnginesSalsa20Engine")
#ifdef RESTRICT_OrgBouncycastleCryptoEnginesSalsa20Engine
#define INCLUDE_ALL_OrgBouncycastleCryptoEnginesSalsa20Engine 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoEnginesSalsa20Engine 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoEnginesSalsa20Engine

#if !defined (OrgBouncycastleCryptoEnginesSalsa20Engine_) && (INCLUDE_ALL_OrgBouncycastleCryptoEnginesSalsa20Engine || defined(INCLUDE_OrgBouncycastleCryptoEnginesSalsa20Engine))
#define OrgBouncycastleCryptoEnginesSalsa20Engine_

#define RESTRICT_OrgBouncycastleCryptoSkippingStreamCipher 1
#define INCLUDE_OrgBouncycastleCryptoSkippingStreamCipher 1
#include "org/bouncycastle/crypto/SkippingStreamCipher.h"

@class IOSByteArray;
@class IOSIntArray;
@protocol OrgBouncycastleCryptoCipherParameters;

/*!
 @brief Implementation of Daniel J.Bernstein's Salsa20 stream cipher, Snuffle 2005
 */
@interface OrgBouncycastleCryptoEnginesSalsa20Engine : NSObject < OrgBouncycastleCryptoSkippingStreamCipher > {
 @public
  jint rounds_;
  IOSIntArray *engineState_;
  IOSIntArray *x_;
}

#pragma mark Public

/*!
 @brief Creates a 20 round Salsa20 engine.
 */
- (instancetype)init;

/*!
 @brief Creates a Salsa20 engine with a specific number of rounds.
 @param rounds the number of rounds (must be an even number).
 */
- (instancetype)initWithInt:(jint)rounds;

- (NSString *)getAlgorithmName;

- (jlong)getPosition;

/*!
 @brief initialise a Salsa20 cipher.
 @param forEncryption whether or not we are for encryption.
 @param params the parameters required to set up the cipher.
 @throw IllegalArgumentExceptionif the params argument is
  inappropriate.
 */
- (void)init__WithBoolean:(jboolean)forEncryption
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (void)reset;

- (jbyte)returnByteWithByte:(jbyte)inArg;

/*!
 @brief Salsa20 function
 @param input input data
 */
+ (void)salsaCoreWithInt:(jint)rounds
            withIntArray:(IOSIntArray *)input
            withIntArray:(IOSIntArray *)x;

- (jlong)seekToWithLong:(jlong)position;

- (jlong)skipWithLong:(jlong)numberOfBytes;

#pragma mark Protected

- (void)advanceCounter;

- (void)advanceCounterWithLong:(jlong)diff;

- (void)generateKeyStreamWithByteArray:(IOSByteArray *)output;

- (jlong)getCounter;

- (jint)getNonceSize;

- (void)packTauOrSigmaWithInt:(jint)keyLength
                 withIntArray:(IOSIntArray *)state
                      withInt:(jint)stateOffset;

- (void)resetCounter;

- (void)retreatCounter;

- (void)retreatCounterWithLong:(jlong)diff;

- (void)setKeyWithByteArray:(IOSByteArray *)keyBytes
              withByteArray:(IOSByteArray *)ivBytes;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleCryptoEnginesSalsa20Engine)

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoEnginesSalsa20Engine, engineState_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoEnginesSalsa20Engine, x_, IOSIntArray *)

inline jint OrgBouncycastleCryptoEnginesSalsa20Engine_get_DEFAULT_ROUNDS(void);
#define OrgBouncycastleCryptoEnginesSalsa20Engine_DEFAULT_ROUNDS 20
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoEnginesSalsa20Engine, DEFAULT_ROUNDS, jint)

/*!
 */
inline IOSByteArray *OrgBouncycastleCryptoEnginesSalsa20Engine_get_sigma(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleCryptoEnginesSalsa20Engine_sigma;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesSalsa20Engine, sigma, IOSByteArray *)

/*!
 */
inline IOSByteArray *OrgBouncycastleCryptoEnginesSalsa20Engine_get_tau(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleCryptoEnginesSalsa20Engine_tau;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoEnginesSalsa20Engine, tau, IOSByteArray *)

FOUNDATION_EXPORT void OrgBouncycastleCryptoEnginesSalsa20Engine_init(OrgBouncycastleCryptoEnginesSalsa20Engine *self);

FOUNDATION_EXPORT OrgBouncycastleCryptoEnginesSalsa20Engine *new_OrgBouncycastleCryptoEnginesSalsa20Engine_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoEnginesSalsa20Engine *create_OrgBouncycastleCryptoEnginesSalsa20Engine_init(void);

FOUNDATION_EXPORT void OrgBouncycastleCryptoEnginesSalsa20Engine_initWithInt_(OrgBouncycastleCryptoEnginesSalsa20Engine *self, jint rounds);

FOUNDATION_EXPORT OrgBouncycastleCryptoEnginesSalsa20Engine *new_OrgBouncycastleCryptoEnginesSalsa20Engine_initWithInt_(jint rounds) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoEnginesSalsa20Engine *create_OrgBouncycastleCryptoEnginesSalsa20Engine_initWithInt_(jint rounds);

FOUNDATION_EXPORT void OrgBouncycastleCryptoEnginesSalsa20Engine_salsaCoreWithInt_withIntArray_withIntArray_(jint rounds, IOSIntArray *input, IOSIntArray *x);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoEnginesSalsa20Engine)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoEnginesSalsa20Engine")
