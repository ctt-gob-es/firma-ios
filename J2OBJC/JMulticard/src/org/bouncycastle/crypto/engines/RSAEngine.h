//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/engines/RSAEngine.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoEnginesRSAEngine")
#ifdef RESTRICT_OrgBouncycastleCryptoEnginesRSAEngine
#define INCLUDE_ALL_OrgBouncycastleCryptoEnginesRSAEngine 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoEnginesRSAEngine 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoEnginesRSAEngine

#if !defined (OrgBouncycastleCryptoEnginesRSAEngine_) && (INCLUDE_ALL_OrgBouncycastleCryptoEnginesRSAEngine || defined(INCLUDE_OrgBouncycastleCryptoEnginesRSAEngine))
#define OrgBouncycastleCryptoEnginesRSAEngine_

#define RESTRICT_OrgBouncycastleCryptoAsymmetricBlockCipher 1
#define INCLUDE_OrgBouncycastleCryptoAsymmetricBlockCipher 1
#include "org/bouncycastle/crypto/AsymmetricBlockCipher.h"

@class IOSByteArray;
@protocol OrgBouncycastleCryptoCipherParameters;

/*!
 @brief this does your basic RSA algorithm.
 */
@interface OrgBouncycastleCryptoEnginesRSAEngine : NSObject < OrgBouncycastleCryptoAsymmetricBlockCipher >

#pragma mark Public

- (instancetype)init;

/*!
 @brief Return the maximum size for an input block to this engine.
 For RSA this is always one byte less than the key size on
  encryption, and the same length as the key size on decryption.
 @return maximum size for an input block.
 */
- (jint)getInputBlockSize;

/*!
 @brief Return the maximum size for an output block to this engine.
 For RSA this is always one byte less than the key size on
  decryption, and the same length as the key size on encryption.
 @return maximum size for an output block.
 */
- (jint)getOutputBlockSize;

/*!
 @brief initialise the RSA engine.
 @param forEncryption true if we are encrypting, false otherwise.
 @param param the necessary RSA key parameters.
 */
- (void)init__WithBoolean:(jboolean)forEncryption
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)param OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Process a single block using the basic RSA algorithm.
 @param inArg the input array.
 @param inOff the offset into the input buffer where the data starts.
 @param inLen the length of the data to be processed.
 @return the result of the RSA process.
 @throw DataLengthExceptionthe input block is too large.
 */
- (IOSByteArray *)processBlockWithByteArray:(IOSByteArray *)inArg
                                    withInt:(jint)inOff
                                    withInt:(jint)inLen;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCryptoEnginesRSAEngine)

FOUNDATION_EXPORT void OrgBouncycastleCryptoEnginesRSAEngine_init(OrgBouncycastleCryptoEnginesRSAEngine *self);

FOUNDATION_EXPORT OrgBouncycastleCryptoEnginesRSAEngine *new_OrgBouncycastleCryptoEnginesRSAEngine_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoEnginesRSAEngine *create_OrgBouncycastleCryptoEnginesRSAEngine_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoEnginesRSAEngine)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoEnginesRSAEngine")
