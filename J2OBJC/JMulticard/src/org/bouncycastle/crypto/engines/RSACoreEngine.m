//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/engines/RSACoreEngine.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/DataLengthException.h"
#include "org/bouncycastle/crypto/engines/RSACoreEngine.h"
#include "org/bouncycastle/crypto/params/ParametersWithRandom.h"
#include "org/bouncycastle/crypto/params/RSAKeyParameters.h"
#include "org/bouncycastle/crypto/params/RSAPrivateCrtKeyParameters.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/engines/RSACoreEngine must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoEnginesRSACoreEngine () {
 @public
  OrgBouncycastleCryptoParamsRSAKeyParameters *key_;
  jboolean forEncryption_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoEnginesRSACoreEngine, key_, OrgBouncycastleCryptoParamsRSAKeyParameters *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/engines/RSACoreEngine.java"


#line 15
@implementation OrgBouncycastleCryptoEnginesRSACoreEngine


#line 15
- (instancetype)initPackagePrivate {
  OrgBouncycastleCryptoEnginesRSACoreEngine_initPackagePrivate(self);
  return self;
}


#line 26
- (void)init__WithBoolean:(jboolean)forEncryption
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)param {
  
#line 30
  if ([param isKindOfClass:[OrgBouncycastleCryptoParamsParametersWithRandom class]]) {
    
#line 32
    OrgBouncycastleCryptoParamsParametersWithRandom *rParam = (OrgBouncycastleCryptoParamsParametersWithRandom *) param;
    
#line 34
    key_ = (OrgBouncycastleCryptoParamsRSAKeyParameters *) cast_chk([((OrgBouncycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getParameters], [OrgBouncycastleCryptoParamsRSAKeyParameters class]);
  }
  else {
    
#line 38
    key_ = (OrgBouncycastleCryptoParamsRSAKeyParameters *) cast_chk(param, [OrgBouncycastleCryptoParamsRSAKeyParameters class]);
  }
  
#line 41
  self->forEncryption_ = forEncryption;
}


#line 51
- (jint)getInputBlockSize {
  
#line 53
  jint bitSize = [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleCryptoParamsRSAKeyParameters *) nil_chk(key_)) getModulus])) bitLength];
  
#line 55
  if (forEncryption_) {
    
#line 57
    return JreIntDiv((bitSize + 7), 8) - 1;
  }
  else {
    
#line 61
    return JreIntDiv((bitSize + 7), 8);
  }
}


#line 72
- (jint)getOutputBlockSize {
  
#line 74
  jint bitSize = [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleCryptoParamsRSAKeyParameters *) nil_chk(key_)) getModulus])) bitLength];
  
#line 76
  if (forEncryption_) {
    
#line 78
    return JreIntDiv((bitSize + 7), 8);
  }
  else {
    
#line 82
    return JreIntDiv((bitSize + 7), 8) - 1;
  }
}


#line 86
- (JavaMathBigInteger *)convertInputWithByteArray:(IOSByteArray *)inArg
                                          withInt:(jint)inOff
                                          withInt:(jint)inLen {
  
#line 91
  if (inLen > ([self getInputBlockSize] + 1)) {
    
#line 93
    @throw new_OrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input too large for RSA cipher.");
  }
  else if (inLen == ([self getInputBlockSize] + 1) && !forEncryption_) {
    
#line 97
    @throw new_OrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input too large for RSA cipher.");
  }
  
#line 100
  IOSByteArray *block;
  
#line 102
  if (inOff != 0 || inLen != ((IOSByteArray *) nil_chk(inArg))->size_) {
    
#line 104
    block = [IOSByteArray newArrayWithLength:inLen];
    
#line 106
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, block, 0, inLen);
  }
  else {
    
#line 110
    block = inArg;
  }
  
#line 113
  JavaMathBigInteger *res = new_JavaMathBigInteger_initWithInt_withByteArray_(1, block);
  if ([res compareToWithId:[((OrgBouncycastleCryptoParamsRSAKeyParameters *) nil_chk(key_)) getModulus]] >= 0) {
    
#line 116
    @throw new_OrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input too large for RSA cipher.");
  }
  
#line 119
  return res;
}


#line 122
- (IOSByteArray *)convertOutputWithJavaMathBigInteger:(JavaMathBigInteger *)result {
  
#line 125
  IOSByteArray *output = [((JavaMathBigInteger *) nil_chk(result)) toByteArray];
  
#line 127
  if (forEncryption_) {
    
#line 129
    if (IOSByteArray_Get(nil_chk(output), 0) == 0 && output->size_ > [self getOutputBlockSize]) {
      
#line 131
      IOSByteArray *tmp = [IOSByteArray newArrayWithLength:output->size_ - 1];
      
#line 133
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(output, 1, tmp, 0, tmp->size_);
      
#line 135
      return tmp;
    }
    
#line 138
    if (output->size_ < [self getOutputBlockSize]) {
      
#line 140
      IOSByteArray *tmp = [IOSByteArray newArrayWithLength:[self getOutputBlockSize]];
      
#line 142
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(output, 0, tmp, tmp->size_ - output->size_, output->size_);
      
#line 144
      return tmp;
    }
    
#line 147
    return output;
  }
  else {
    
#line 151
    IOSByteArray *rv;
    if (IOSByteArray_Get(nil_chk(output), 0) == 0) {
      
#line 154
      rv = [IOSByteArray newArrayWithLength:output->size_ - 1];
      
#line 156
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(output, 1, rv, 0, rv->size_);
    }
    else {
      
#line 160
      rv = [IOSByteArray newArrayWithLength:output->size_];
      
#line 162
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(output, 0, rv, 0, rv->size_);
    }
    
#line 165
    OrgBouncycastleUtilArrays_fillWithByteArray_withByte_(output, (jbyte) 0);
    
#line 167
    return rv;
  }
}


#line 171
- (JavaMathBigInteger *)processBlockWithJavaMathBigInteger:(JavaMathBigInteger *)input {
  
#line 173
  if ([key_ isKindOfClass:[OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters class]]) {
    
#line 180
    OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *crtKey = (OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *) key_;
    
#line 182
    JavaMathBigInteger *p = [((OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *) nil_chk(crtKey)) getP];
    JavaMathBigInteger *q = [crtKey getQ];
    JavaMathBigInteger *dP = [crtKey getDP];
    JavaMathBigInteger *dQ = [crtKey getDQ];
    JavaMathBigInteger *qInv = [crtKey getQInv];
    
#line 188
    JavaMathBigInteger *mP;
    
#line 188
    JavaMathBigInteger *mQ;
    
#line 188
    JavaMathBigInteger *h;
    
#line 188
    JavaMathBigInteger *m;
    
#line 191
    mP = [((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(input)) remainderWithJavaMathBigInteger:p]))) modPowWithJavaMathBigInteger:dP withJavaMathBigInteger:p];
    
#line 194
    mQ = [((JavaMathBigInteger *) nil_chk(([input remainderWithJavaMathBigInteger:q]))) modPowWithJavaMathBigInteger:dQ withJavaMathBigInteger:q];
    
#line 197
    h = [((JavaMathBigInteger *) nil_chk(mP)) subtractWithJavaMathBigInteger:mQ];
    h = [((JavaMathBigInteger *) nil_chk(h)) multiplyWithJavaMathBigInteger:qInv];
    h = [((JavaMathBigInteger *) nil_chk(h)) modWithJavaMathBigInteger:p];
    
#line 202
    m = [((JavaMathBigInteger *) nil_chk(h)) multiplyWithJavaMathBigInteger:q];
    m = [((JavaMathBigInteger *) nil_chk(m)) addWithJavaMathBigInteger:mQ];
    
#line 205
    return m;
  }
  else {
    
#line 209
    return [((JavaMathBigInteger *) nil_chk(input)) modPowWithJavaMathBigInteger:
#line 210
    [((OrgBouncycastleCryptoParamsRSAKeyParameters *) nil_chk(key_)) getExponent] withJavaMathBigInteger:[((OrgBouncycastleCryptoParamsRSAKeyParameters *) nil_chk(key_)) getModulus]];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, 6, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(init__WithBoolean:withOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getInputBlockSize);
  methods[3].selector = @selector(getOutputBlockSize);
  methods[4].selector = @selector(convertInputWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(convertOutputWithJavaMathBigInteger:);
  methods[6].selector = @selector(processBlockWithJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LOrgBouncycastleCryptoParamsRSAKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgBouncycastleCryptoCipherParameters;", "convertInput", "[BII", "convertOutput", "LJavaMathBigInteger;", "processBlock" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoEnginesRSACoreEngine = { "RSACoreEngine", "org.bouncycastle.crypto.engines", ptrTable, methods, fields, 7, 0x0, 7, 2, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoEnginesRSACoreEngine;
}

@end


#line 15
void OrgBouncycastleCryptoEnginesRSACoreEngine_initPackagePrivate(OrgBouncycastleCryptoEnginesRSACoreEngine *self) {
  NSObject_init(self);
}


#line 15
OrgBouncycastleCryptoEnginesRSACoreEngine *new_OrgBouncycastleCryptoEnginesRSACoreEngine_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoEnginesRSACoreEngine, initPackagePrivate)
}


#line 15
OrgBouncycastleCryptoEnginesRSACoreEngine *create_OrgBouncycastleCryptoEnginesRSACoreEngine_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoEnginesRSACoreEngine, initPackagePrivate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoEnginesRSACoreEngine)
