//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/engines/DESEngine.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoEnginesDESEngine")
#ifdef RESTRICT_OrgBouncycastleCryptoEnginesDESEngine
#define INCLUDE_ALL_OrgBouncycastleCryptoEnginesDESEngine 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoEnginesDESEngine 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoEnginesDESEngine

#if !defined (OrgBouncycastleCryptoEnginesDESEngine_) && (INCLUDE_ALL_OrgBouncycastleCryptoEnginesDESEngine || defined(INCLUDE_OrgBouncycastleCryptoEnginesDESEngine))
#define OrgBouncycastleCryptoEnginesDESEngine_

#define RESTRICT_OrgBouncycastleCryptoBlockCipher 1
#define INCLUDE_OrgBouncycastleCryptoBlockCipher 1
#include "org/bouncycastle/crypto/BlockCipher.h"

@class IOSByteArray;
@class IOSIntArray;
@protocol OrgBouncycastleCryptoCipherParameters;

/*!
 @brief a class that provides a basic DES engine.
 */
@interface OrgBouncycastleCryptoEnginesDESEngine : NSObject < OrgBouncycastleCryptoBlockCipher >

#pragma mark Public

/*!
 @brief standard constructor.
 */
- (instancetype)init;

- (NSString *)getAlgorithmName;

- (jint)getBlockSize;

/*!
 @brief initialise a DES cipher.
 @param encrypting whether or not we are for encryption.
 @param params the parameters required to set up the cipher.
 @throw IllegalArgumentExceptionif the params argument is
  inappropriate.
 */
- (void)init__WithBoolean:(jboolean)encrypting
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (void)reset;

#pragma mark Protected

/*!
 @brief the DES engine.
 */
- (void)desFuncWithIntArray:(IOSIntArray *)wKey
              withByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff;

/*!
 @brief generate an integer based working key based on our secret key
  and what we processing we are planning to do.
 Acknowledgements for this routine go to James Gillogly &amp; Phil Karn.
          (whoever, and wherever they are!).
 */
- (IOSIntArray *)generateWorkingKeyWithBoolean:(jboolean)encrypting
                                 withByteArray:(IOSByteArray *)key;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleCryptoEnginesDESEngine)

inline jint OrgBouncycastleCryptoEnginesDESEngine_get_BLOCK_SIZE(void);
#define OrgBouncycastleCryptoEnginesDESEngine_BLOCK_SIZE 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoEnginesDESEngine, BLOCK_SIZE, jint)

FOUNDATION_EXPORT void OrgBouncycastleCryptoEnginesDESEngine_init(OrgBouncycastleCryptoEnginesDESEngine *self);

FOUNDATION_EXPORT OrgBouncycastleCryptoEnginesDESEngine *new_OrgBouncycastleCryptoEnginesDESEngine_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoEnginesDESEngine *create_OrgBouncycastleCryptoEnginesDESEngine_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoEnginesDESEngine)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoEnginesDESEngine")
