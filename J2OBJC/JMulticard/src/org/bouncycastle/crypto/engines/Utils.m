//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/engines/Utils.java
//

#include "J2ObjC_source.h"
#include "org/bouncycastle/crypto/CryptoServicePurpose.h"
#include "org/bouncycastle/crypto/engines/Utils.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/engines/Utils must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/engines/Utils.java"


#line 5
@implementation OrgBouncycastleCryptoEnginesUtils


#line 5
- (instancetype)initPackagePrivate {
  OrgBouncycastleCryptoEnginesUtils_initPackagePrivate(self);
  return self;
}


#line 7
+ (OrgBouncycastleCryptoCryptoServicePurpose *)getPurposeWithBoolean:(jboolean)forEncryption {
  return OrgBouncycastleCryptoEnginesUtils_getPurposeWithBoolean_(forEncryption);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoCryptoServicePurpose;", 0x8, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(getPurposeWithBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getPurpose", "Z" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoEnginesUtils = { "Utils", "org.bouncycastle.crypto.engines", ptrTable, methods, NULL, 7, 0x0, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoEnginesUtils;
}

@end


#line 5
void OrgBouncycastleCryptoEnginesUtils_initPackagePrivate(OrgBouncycastleCryptoEnginesUtils *self) {
  NSObject_init(self);
}


#line 5
OrgBouncycastleCryptoEnginesUtils *new_OrgBouncycastleCryptoEnginesUtils_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoEnginesUtils, initPackagePrivate)
}


#line 5
OrgBouncycastleCryptoEnginesUtils *create_OrgBouncycastleCryptoEnginesUtils_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoEnginesUtils, initPackagePrivate)
}


#line 7
OrgBouncycastleCryptoCryptoServicePurpose *OrgBouncycastleCryptoEnginesUtils_getPurposeWithBoolean_(jboolean forEncryption) {
  OrgBouncycastleCryptoEnginesUtils_initialize();
  return forEncryption ? JreLoadEnum(OrgBouncycastleCryptoCryptoServicePurpose, ENCRYPTION) : JreLoadEnum(OrgBouncycastleCryptoCryptoServicePurpose, DECRYPTION);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoEnginesUtils)
