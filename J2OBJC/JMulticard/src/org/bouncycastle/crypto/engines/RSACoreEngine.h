//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/engines/RSACoreEngine.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoEnginesRSACoreEngine")
#ifdef RESTRICT_OrgBouncycastleCryptoEnginesRSACoreEngine
#define INCLUDE_ALL_OrgBouncycastleCryptoEnginesRSACoreEngine 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoEnginesRSACoreEngine 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoEnginesRSACoreEngine

#if !defined (OrgBouncycastleCryptoEnginesRSACoreEngine_) && (INCLUDE_ALL_OrgBouncycastleCryptoEnginesRSACoreEngine || defined(INCLUDE_OrgBouncycastleCryptoEnginesRSACoreEngine))
#define OrgBouncycastleCryptoEnginesRSACoreEngine_

@class IOSByteArray;
@class JavaMathBigInteger;
@protocol OrgBouncycastleCryptoCipherParameters;

/*!
 @brief this does your basic RSA algorithm.
 */
@interface OrgBouncycastleCryptoEnginesRSACoreEngine : NSObject

#pragma mark Public

- (JavaMathBigInteger *)convertInputWithByteArray:(IOSByteArray *)inArg
                                          withInt:(jint)inOff
                                          withInt:(jint)inLen;

- (IOSByteArray *)convertOutputWithJavaMathBigInteger:(JavaMathBigInteger *)result;

/*!
 @brief Return the maximum size for an input block to this engine.
 For RSA this is always one byte less than the key size on
  encryption, and the same length as the key size on decryption.
 @return maximum size for an input block.
 */
- (jint)getInputBlockSize;

/*!
 @brief Return the maximum size for an output block to this engine.
 For RSA this is always one byte less than the key size on
  decryption, and the same length as the key size on encryption.
 @return maximum size for an output block.
 */
- (jint)getOutputBlockSize;

/*!
 @brief initialise the RSA engine.
 @param forEncryption true if we are encrypting, false otherwise.
 @param param the necessary RSA key parameters.
 */
- (void)init__WithBoolean:(jboolean)forEncryption
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)param OBJC_METHOD_FAMILY_NONE;

- (JavaMathBigInteger *)processBlockWithJavaMathBigInteger:(JavaMathBigInteger *)input;

#pragma mark Package-Private

- (instancetype)initPackagePrivate;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCryptoEnginesRSACoreEngine)

FOUNDATION_EXPORT void OrgBouncycastleCryptoEnginesRSACoreEngine_initPackagePrivate(OrgBouncycastleCryptoEnginesRSACoreEngine *self);

FOUNDATION_EXPORT OrgBouncycastleCryptoEnginesRSACoreEngine *new_OrgBouncycastleCryptoEnginesRSACoreEngine_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoEnginesRSACoreEngine *create_OrgBouncycastleCryptoEnginesRSACoreEngine_initPackagePrivate(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoEnginesRSACoreEngine)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoEnginesRSACoreEngine")
