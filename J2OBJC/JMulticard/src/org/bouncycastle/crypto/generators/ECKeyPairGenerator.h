//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/generators/ECKeyPairGenerator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoGeneratorsECKeyPairGenerator")
#ifdef RESTRICT_OrgBouncycastleCryptoGeneratorsECKeyPairGenerator
#define INCLUDE_ALL_OrgBouncycastleCryptoGeneratorsECKeyPairGenerator 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoGeneratorsECKeyPairGenerator 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoGeneratorsECKeyPairGenerator

#if !defined (OrgBouncycastleCryptoGeneratorsECKeyPairGenerator_) && (INCLUDE_ALL_OrgBouncycastleCryptoGeneratorsECKeyPairGenerator || defined(INCLUDE_OrgBouncycastleCryptoGeneratorsECKeyPairGenerator))
#define OrgBouncycastleCryptoGeneratorsECKeyPairGenerator_

#define RESTRICT_OrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator 1
#define INCLUDE_OrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator 1
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPairGenerator.h"

#define RESTRICT_OrgBouncycastleMathEcECConstants 1
#define INCLUDE_OrgBouncycastleMathEcECConstants 1
#include "org/bouncycastle/math/ec/ECConstants.h"

@class JavaSecuritySecureRandom;
@class OrgBouncycastleCryptoAsymmetricCipherKeyPair;
@class OrgBouncycastleCryptoKeyGenerationParameters;
@class OrgBouncycastleCryptoParamsECDomainParameters;
@protocol OrgBouncycastleMathEcECMultiplier;

@interface OrgBouncycastleCryptoGeneratorsECKeyPairGenerator : NSObject < OrgBouncycastleCryptoAsymmetricCipherKeyPairGenerator, OrgBouncycastleMathEcECConstants > {
 @public
  OrgBouncycastleCryptoParamsECDomainParameters *params_;
  JavaSecuritySecureRandom *random_;
}

#pragma mark Public

- (instancetype)init;

/*!
 @brief Given the domain parameters this routine generates an EC key
  pair in accordance with X9.62 section 5.2.1 pages 26, 27.
 */
- (OrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair;

- (void)init__WithOrgBouncycastleCryptoKeyGenerationParameters:(OrgBouncycastleCryptoKeyGenerationParameters *)param OBJC_METHOD_FAMILY_NONE;

#pragma mark Protected

- (id<OrgBouncycastleMathEcECMultiplier>)createBasePointMultiplier;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCryptoGeneratorsECKeyPairGenerator)

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoGeneratorsECKeyPairGenerator, params_, OrgBouncycastleCryptoParamsECDomainParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoGeneratorsECKeyPairGenerator, random_, JavaSecuritySecureRandom *)

FOUNDATION_EXPORT void OrgBouncycastleCryptoGeneratorsECKeyPairGenerator_init(OrgBouncycastleCryptoGeneratorsECKeyPairGenerator *self);

FOUNDATION_EXPORT OrgBouncycastleCryptoGeneratorsECKeyPairGenerator *new_OrgBouncycastleCryptoGeneratorsECKeyPairGenerator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoGeneratorsECKeyPairGenerator *create_OrgBouncycastleCryptoGeneratorsECKeyPairGenerator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoGeneratorsECKeyPairGenerator)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoGeneratorsECKeyPairGenerator")
