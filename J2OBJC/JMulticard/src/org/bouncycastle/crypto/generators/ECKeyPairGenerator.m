//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/generators/ECKeyPairGenerator.java
//

#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/bouncycastle/crypto/KeyGenerationParameters.h"
#include "org/bouncycastle/crypto/generators/ECKeyPairGenerator.h"
#include "org/bouncycastle/crypto/params/ECDomainParameters.h"
#include "org/bouncycastle/crypto/params/ECKeyGenerationParameters.h"
#include "org/bouncycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/bouncycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/bouncycastle/math/ec/ECConstants.h"
#include "org/bouncycastle/math/ec/ECMultiplier.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/FixedPointCombMultiplier.h"
#include "org/bouncycastle/math/ec/WNafUtil.h"
#include "org/bouncycastle/util/BigIntegers.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/generators/ECKeyPairGenerator must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/generators/ECKeyPairGenerator.java"


#line 20
@implementation OrgBouncycastleCryptoGeneratorsECKeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 20
- (instancetype)init {
  OrgBouncycastleCryptoGeneratorsECKeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithOrgBouncycastleCryptoKeyGenerationParameters:(OrgBouncycastleCryptoKeyGenerationParameters *)param {
  
#line 30
  OrgBouncycastleCryptoParamsECKeyGenerationParameters *ecP = (OrgBouncycastleCryptoParamsECKeyGenerationParameters *) cast_chk(param, [OrgBouncycastleCryptoParamsECKeyGenerationParameters class]);
  
#line 32
  self->random_ = [((OrgBouncycastleCryptoParamsECKeyGenerationParameters *) nil_chk(ecP)) getRandom];
  self->params_ = [ecP getDomainParameters];
}


#line 40
- (OrgBouncycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  
#line 43
  JavaMathBigInteger *n = [((OrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(params_)) getN];
  jint nBitLength = [((JavaMathBigInteger *) nil_chk(n)) bitLength];
  jint minWeight = JreURShift32(nBitLength, 2);
  
#line 47
  JavaMathBigInteger *d;
  for (; ; ) {
    
#line 50
    d = OrgBouncycastleUtilBigIntegers_createRandomBigIntegerWithInt_withJavaSecuritySecureRandom_(nBitLength, random_);
    
#line 52
    if ([((JavaMathBigInteger *) nil_chk(d)) compareToWithId:JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)] < 0 || ([d compareToWithId:n] >= 0)) {
      
#line 54
      continue;
    }
    
#line 57
    if (OrgBouncycastleMathEcWNafUtil_getNafWeightWithJavaMathBigInteger_(d) < minWeight) {
      
#line 59
      continue;
    }
    
#line 62
    break;
  }
  
#line 65
  OrgBouncycastleMathEcECPoint *Q = [((id<OrgBouncycastleMathEcECMultiplier>) nil_chk([self createBasePointMultiplier])) multiplyWithOrgBouncycastleMathEcECPoint:[((OrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(params_)) getG] withJavaMathBigInteger:d];
  
#line 67
  return new_OrgBouncycastleCryptoAsymmetricCipherKeyPair_initWithOrgBouncycastleCryptoParamsAsymmetricKeyParameter_withOrgBouncycastleCryptoParamsAsymmetricKeyParameter_(new_OrgBouncycastleCryptoParamsECPublicKeyParameters_initWithOrgBouncycastleMathEcECPoint_withOrgBouncycastleCryptoParamsECDomainParameters_(
#line 68
  Q, params_), new_OrgBouncycastleCryptoParamsECPrivateKeyParameters_initWithJavaMathBigInteger_withOrgBouncycastleCryptoParamsECDomainParameters_(
#line 69
  d, params_));
}


#line 72
- (id<OrgBouncycastleMathEcECMultiplier>)createBasePointMultiplier {
  
#line 74
  return new_OrgBouncycastleMathEcFixedPointCombMultiplier_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECMultiplier;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithOrgBouncycastleCryptoKeyGenerationParameters:);
  methods[2].selector = @selector(generateKeyPair);
  methods[3].selector = @selector(createBasePointMultiplier);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LOrgBouncycastleCryptoParamsECDomainParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LOrgBouncycastleCryptoKeyGenerationParameters;" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoGeneratorsECKeyPairGenerator = { "ECKeyPairGenerator", "org.bouncycastle.crypto.generators", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoGeneratorsECKeyPairGenerator;
}

@end


#line 20
void OrgBouncycastleCryptoGeneratorsECKeyPairGenerator_init(OrgBouncycastleCryptoGeneratorsECKeyPairGenerator *self) {
  NSObject_init(self);
}


#line 20
OrgBouncycastleCryptoGeneratorsECKeyPairGenerator *new_OrgBouncycastleCryptoGeneratorsECKeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoGeneratorsECKeyPairGenerator, init)
}


#line 20
OrgBouncycastleCryptoGeneratorsECKeyPairGenerator *create_OrgBouncycastleCryptoGeneratorsECKeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoGeneratorsECKeyPairGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoGeneratorsECKeyPairGenerator)
