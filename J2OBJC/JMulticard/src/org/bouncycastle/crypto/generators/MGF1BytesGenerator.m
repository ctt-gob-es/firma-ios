//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/generators/MGF1BytesGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "org/bouncycastle/crypto/DerivationParameters.h"
#include "org/bouncycastle/crypto/Digest.h"
#include "org/bouncycastle/crypto/OutputLengthException.h"
#include "org/bouncycastle/crypto/generators/MGF1BytesGenerator.h"
#include "org/bouncycastle/crypto/params/MGFParameters.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/generators/MGF1BytesGenerator must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator () {
 @public
  id<OrgBouncycastleCryptoDigest> digest_;
  IOSByteArray *seed_;
  jint hLen_;
}

/*!
 @brief int to octet string.
 */
- (void)ItoOSPWithInt:(jint)i
        withByteArray:(IOSByteArray *)sp;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator, digest_, id<OrgBouncycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator, seed_, IOSByteArray *)

__attribute__((unused)) static void OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator_ItoOSPWithInt_withByteArray_(OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator *self, jint i, IOSByteArray *sp);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/generators/MGF1BytesGenerator.java"


#line 13
@implementation OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator


#line 23
- (instancetype)initWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)digest {
  OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator_initWithOrgBouncycastleCryptoDigest_(self, digest);
  return self;
}


#line 30
- (void)init__WithOrgBouncycastleCryptoDerivationParameters:(id<OrgBouncycastleCryptoDerivationParameters>)param {
  
#line 34
  if (!([param isKindOfClass:[OrgBouncycastleCryptoParamsMGFParameters class]])) {
    
#line 36
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"MGF parameters required for MGF1Generator");
  }
  
#line 39
  OrgBouncycastleCryptoParamsMGFParameters *p = (OrgBouncycastleCryptoParamsMGFParameters *) cast_chk(param, [OrgBouncycastleCryptoParamsMGFParameters class]);
  
#line 41
  seed_ = [((OrgBouncycastleCryptoParamsMGFParameters *) nil_chk(p)) getSeed];
}


#line 47
- (id<OrgBouncycastleCryptoDigest>)getDigest {
  
#line 49
  return digest_;
}


#line 55
- (void)ItoOSPWithInt:(jint)i
        withByteArray:(IOSByteArray *)sp {
  OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator_ItoOSPWithInt_withByteArray_(self, i, sp);
}


#line 71
- (jint)generateBytesWithByteArray:(IOSByteArray *)outArg
                           withInt:(jint)outOff
                           withInt:(jint)len {
  
#line 78
  if ((((IOSByteArray *) nil_chk(outArg))->size_ - len) < outOff) {
    
#line 80
    @throw new_OrgBouncycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too small");
  }
  
#line 83
  IOSByteArray *hashBuf = [IOSByteArray newArrayWithLength:hLen_];
  IOSByteArray *C = [IOSByteArray newArrayWithLength:4];
  jint counter = 0;
  
#line 87
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest_)) reset];
  
#line 89
  if (len > hLen_) {
    
#line 91
    do {
      
#line 93
      OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator_ItoOSPWithInt_withByteArray_(self, counter, C);
      
#line 95
      [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:seed_ withInt:0 withInt:((IOSByteArray *) nil_chk(seed_))->size_];
      [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:C withInt:0 withInt:C->size_];
      [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:hashBuf withInt:0];
      
#line 99
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hashBuf, 0, outArg, outOff + counter * hLen_, hLen_);
    }
    while (++counter < (JreIntDiv(len, hLen_)));
  }
  
#line 104
  if ((counter * hLen_) < len) {
    
#line 106
    OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator_ItoOSPWithInt_withByteArray_(self, counter, C);
    
#line 108
    [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:seed_ withInt:0 withInt:((IOSByteArray *) nil_chk(seed_))->size_];
    [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:C withInt:0 withInt:C->size_];
    [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:hashBuf withInt:0];
    
#line 112
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hashBuf, 0, outArg, outOff + counter * hLen_, len - (counter * hLen_));
  }
  
#line 115
  return len;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleCryptoDigest:);
  methods[1].selector = @selector(init__WithOrgBouncycastleCryptoDerivationParameters:);
  methods[2].selector = @selector(getDigest);
  methods[3].selector = @selector(ItoOSPWithInt:withByteArray:);
  methods[4].selector = @selector(generateBytesWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LOrgBouncycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "seed_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hLen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleCryptoDigest;", "init", "LOrgBouncycastleCryptoDerivationParameters;", "ItoOSP", "I[B", "generateBytes", "[BII", "LOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalArgumentException;" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator = { "MGF1BytesGenerator", "org.bouncycastle.crypto.generators", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator;
}

@end


#line 23
void OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator_initWithOrgBouncycastleCryptoDigest_(OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator *self, id<OrgBouncycastleCryptoDigest> digest) {
  NSObject_init(self);
  
#line 26
  self->digest_ = digest;
  self->hLen_ = [((id<OrgBouncycastleCryptoDigest>) nil_chk(digest)) getDigestSize];
}


#line 23
OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator *new_OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator_initWithOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator, initWithOrgBouncycastleCryptoDigest_, digest)
}


#line 23
OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator *create_OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator_initWithOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator, initWithOrgBouncycastleCryptoDigest_, digest)
}


#line 55
void OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator_ItoOSPWithInt_withByteArray_(OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator *self, jint i, IOSByteArray *sp) {
  
#line 59
  *IOSByteArray_GetRef(nil_chk(sp), 0) = (jbyte) (JreURShift32(i, 24));
  *IOSByteArray_GetRef(sp, 1) = (jbyte) (JreURShift32(i, 16));
  *IOSByteArray_GetRef(sp, 2) = (jbyte) (JreURShift32(i, 8));
  *IOSByteArray_GetRef(sp, 3) = (jbyte) (JreURShift32(i, 0));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoGeneratorsMGF1BytesGenerator)
