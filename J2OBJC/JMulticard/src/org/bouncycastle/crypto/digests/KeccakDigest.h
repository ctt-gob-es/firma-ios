//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/digests/KeccakDigest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoDigestsKeccakDigest")
#ifdef RESTRICT_OrgBouncycastleCryptoDigestsKeccakDigest
#define INCLUDE_ALL_OrgBouncycastleCryptoDigestsKeccakDigest 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoDigestsKeccakDigest 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoDigestsKeccakDigest

#if !defined (OrgBouncycastleCryptoDigestsKeccakDigest_) && (INCLUDE_ALL_OrgBouncycastleCryptoDigestsKeccakDigest || defined(INCLUDE_OrgBouncycastleCryptoDigestsKeccakDigest))
#define OrgBouncycastleCryptoDigestsKeccakDigest_

#define RESTRICT_OrgBouncycastleCryptoExtendedDigest 1
#define INCLUDE_OrgBouncycastleCryptoExtendedDigest 1
#include "org/bouncycastle/crypto/ExtendedDigest.h"

@class IOSByteArray;
@class IOSLongArray;

/*!
 @brief implementation of Keccak based on following KeccakNISTInterface.c from https://keccak.noekeon.org/
 <p>
  Following the naming conventions used in the C source code to enable easy review of the implementation.
 */
@interface OrgBouncycastleCryptoDigestsKeccakDigest : NSObject < OrgBouncycastleCryptoExtendedDigest > {
 @public
  IOSLongArray *state_;
  IOSByteArray *dataQueue_;
  jint rate_;
  jint bitsInQueue_;
  jint fixedOutputLength_;
  jboolean squeezing_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithInt:(jint)bitLength;

- (instancetype)initWithOrgBouncycastleCryptoDigestsKeccakDigest:(OrgBouncycastleCryptoDigestsKeccakDigest *)source;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (NSString *)getAlgorithmName;

/*!
 @brief Return the size of block that the compression function is applied to in bytes.
 @return internal byte length of a block.
 */
- (jint)getByteLength;

- (jint)getDigestSize;

- (void)reset;

- (void)updateWithByte:(jbyte)inArg;

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len;

#pragma mark Protected

- (void)absorbWithByte:(jbyte)data;

- (void)absorbWithByteArray:(IOSByteArray *)data
                    withInt:(jint)off
                    withInt:(jint)len;

- (void)absorbBitsWithInt:(jint)data
                  withInt:(jint)bits;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff
                    withByte:(jbyte)partialByte
                     withInt:(jint)partialBits;

- (void)squeezeWithByteArray:(IOSByteArray *)output
                     withInt:(jint)offset
                    withLong:(jlong)outputLength;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleCryptoDigestsKeccakDigest)

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoDigestsKeccakDigest, state_, IOSLongArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoDigestsKeccakDigest, dataQueue_, IOSByteArray *)

FOUNDATION_EXPORT void OrgBouncycastleCryptoDigestsKeccakDigest_init(OrgBouncycastleCryptoDigestsKeccakDigest *self);

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsKeccakDigest *new_OrgBouncycastleCryptoDigestsKeccakDigest_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsKeccakDigest *create_OrgBouncycastleCryptoDigestsKeccakDigest_init(void);

FOUNDATION_EXPORT void OrgBouncycastleCryptoDigestsKeccakDigest_initWithInt_(OrgBouncycastleCryptoDigestsKeccakDigest *self, jint bitLength);

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsKeccakDigest *new_OrgBouncycastleCryptoDigestsKeccakDigest_initWithInt_(jint bitLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsKeccakDigest *create_OrgBouncycastleCryptoDigestsKeccakDigest_initWithInt_(jint bitLength);

FOUNDATION_EXPORT void OrgBouncycastleCryptoDigestsKeccakDigest_initWithOrgBouncycastleCryptoDigestsKeccakDigest_(OrgBouncycastleCryptoDigestsKeccakDigest *self, OrgBouncycastleCryptoDigestsKeccakDigest *source);

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsKeccakDigest *new_OrgBouncycastleCryptoDigestsKeccakDigest_initWithOrgBouncycastleCryptoDigestsKeccakDigest_(OrgBouncycastleCryptoDigestsKeccakDigest *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsKeccakDigest *create_OrgBouncycastleCryptoDigestsKeccakDigest_initWithOrgBouncycastleCryptoDigestsKeccakDigest_(OrgBouncycastleCryptoDigestsKeccakDigest *source);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoDigestsKeccakDigest)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoDigestsKeccakDigest")
