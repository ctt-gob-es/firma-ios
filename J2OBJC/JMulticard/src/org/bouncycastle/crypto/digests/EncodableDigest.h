//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/digests/EncodableDigest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoDigestsEncodableDigest")
#ifdef RESTRICT_OrgBouncycastleCryptoDigestsEncodableDigest
#define INCLUDE_ALL_OrgBouncycastleCryptoDigestsEncodableDigest 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoDigestsEncodableDigest 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoDigestsEncodableDigest

#if !defined (OrgBouncycastleCryptoDigestsEncodableDigest_) && (INCLUDE_ALL_OrgBouncycastleCryptoDigestsEncodableDigest || defined(INCLUDE_OrgBouncycastleCryptoDigestsEncodableDigest))
#define OrgBouncycastleCryptoDigestsEncodableDigest_

@class IOSByteArray;

/*!
 @brief Encodable digests allow you to download an encoded copy of their internal state.This is useful for the situation where
   you need to generate a signature on an external device and it allows for "sign with last round", so a copy of the
   internal state of the digest, plus the last few blocks of the message are all that needs to be sent, rather than the
   entire message.
 */
@protocol OrgBouncycastleCryptoDigestsEncodableDigest < JavaObject >

/*!
 @brief Return an encoded byte array for the digest's internal state
 @return an encoding of the digests internal state.
 */
- (IOSByteArray *)getEncodedState;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCryptoDigestsEncodableDigest)

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoDigestsEncodableDigest)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoDigestsEncodableDigest")
