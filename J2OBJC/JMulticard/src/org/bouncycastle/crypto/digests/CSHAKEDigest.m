//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/digests/CSHAKEDigest.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/bouncycastle/crypto/digests/CSHAKEDigest.h"
#include "org/bouncycastle/crypto/digests/SHAKEDigest.h"
#include "org/bouncycastle/crypto/digests/XofUtils.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/digests/CSHAKEDigest must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoDigestsCSHAKEDigest () {
 @public
  IOSByteArray *diff_;
}

- (void)diffPadAndAbsorb;

- (IOSByteArray *)encodeStringWithByteArray:(IOSByteArray *)str;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoDigestsCSHAKEDigest, diff_, IOSByteArray *)

inline IOSByteArray *OrgBouncycastleCryptoDigestsCSHAKEDigest_get_padding(void);
static IOSByteArray *OrgBouncycastleCryptoDigestsCSHAKEDigest_padding;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoDigestsCSHAKEDigest, padding, IOSByteArray *)

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsCSHAKEDigest_diffPadAndAbsorb(OrgBouncycastleCryptoDigestsCSHAKEDigest *self);

__attribute__((unused)) static IOSByteArray *OrgBouncycastleCryptoDigestsCSHAKEDigest_encodeStringWithByteArray_(OrgBouncycastleCryptoDigestsCSHAKEDigest *self, IOSByteArray *str);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/digests/CSHAKEDigest.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleCryptoDigestsCSHAKEDigest)


#line 8
@implementation OrgBouncycastleCryptoDigestsCSHAKEDigest


#line 21
- (instancetype)initWithInt:(jint)bitLength
              withByteArray:(IOSByteArray *)N
              withByteArray:(IOSByteArray *)S {
  OrgBouncycastleCryptoDigestsCSHAKEDigest_initWithInt_withByteArray_withByteArray_(self, bitLength, N, S);
  return self;
}


#line 36
- (instancetype)initWithOrgBouncycastleCryptoDigestsCSHAKEDigest:(OrgBouncycastleCryptoDigestsCSHAKEDigest *)source {
  OrgBouncycastleCryptoDigestsCSHAKEDigest_initWithOrgBouncycastleCryptoDigestsCSHAKEDigest_(self, source);
  return self;
}


#line 44
- (void)diffPadAndAbsorb {
  OrgBouncycastleCryptoDigestsCSHAKEDigest_diffPadAndAbsorb(self);
}


#line 66
- (IOSByteArray *)encodeStringWithByteArray:(IOSByteArray *)str {
  return OrgBouncycastleCryptoDigestsCSHAKEDigest_encodeStringWithByteArray_(self, str);
}


#line 76
- (NSString *)getAlgorithmName {
  
#line 79
  return JreStrcat("$I", @"CSHAKE", fixedOutputLength_);
}

- (jint)doOutputWithByteArray:(IOSByteArray *)outArg
                      withInt:(jint)outOff
                      withInt:(jint)outLen {
  if (diff_ != nil) {
    
#line 87
    if (!squeezing_) {
      
#line 89
      [self absorbBitsWithInt:(jint) 0x00 withInt:2];
    }
    
#line 92
    [self squeezeWithByteArray:outArg withInt:outOff withLong:((jlong) outLen) * 8];
    
#line 94
    return outLen;
  }
  else {
    
#line 98
    return [super doOutputWithByteArray:outArg withInt:outOff withInt:outLen];
  }
}


#line 102
- (void)reset {
  
#line 105
  [super reset];
  
#line 107
  if (diff_ != nil) {
    
#line 109
    OrgBouncycastleCryptoDigestsCSHAKEDigest_diffPadAndAbsorb(self);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withByteArray:withByteArray:);
  methods[1].selector = @selector(initWithOrgBouncycastleCryptoDigestsCSHAKEDigest:);
  methods[2].selector = @selector(diffPadAndAbsorb);
  methods[3].selector = @selector(encodeStringWithByteArray:);
  methods[4].selector = @selector(getAlgorithmName);
  methods[5].selector = @selector(doOutputWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "padding", "[B", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "diff_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I[B[B", "LOrgBouncycastleCryptoDigestsCSHAKEDigest;", "encodeString", "[B", "doOutput", "[BII", &OrgBouncycastleCryptoDigestsCSHAKEDigest_padding };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoDigestsCSHAKEDigest = { "CSHAKEDigest", "org.bouncycastle.crypto.digests", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoDigestsCSHAKEDigest;
}

+ (void)initialize {
  if (self == [OrgBouncycastleCryptoDigestsCSHAKEDigest class]) {
    OrgBouncycastleCryptoDigestsCSHAKEDigest_padding = [IOSByteArray newArrayWithLength:
#line 11
    100];
    J2OBJC_SET_INITIALIZED(OrgBouncycastleCryptoDigestsCSHAKEDigest)
  }
}

@end


#line 21
void OrgBouncycastleCryptoDigestsCSHAKEDigest_initWithInt_withByteArray_withByteArray_(OrgBouncycastleCryptoDigestsCSHAKEDigest *self, jint bitLength, IOSByteArray *N, IOSByteArray *S) {
  OrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(self,
#line 23
  bitLength);
  
#line 25
  if ((N == nil || N->size_ == 0) && (S == nil || S->size_ == 0)) {
    
#line 27
    self->diff_ = nil;
  }
  else {
    
#line 31
    self->diff_ = OrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_(OrgBouncycastleCryptoDigestsXofUtils_leftEncodeWithLong_(JreIntDiv(self->rate_, 8)), OrgBouncycastleCryptoDigestsCSHAKEDigest_encodeStringWithByteArray_(self, N), OrgBouncycastleCryptoDigestsCSHAKEDigest_encodeStringWithByteArray_(self, S));
    OrgBouncycastleCryptoDigestsCSHAKEDigest_diffPadAndAbsorb(self);
  }
}


#line 21
OrgBouncycastleCryptoDigestsCSHAKEDigest *new_OrgBouncycastleCryptoDigestsCSHAKEDigest_initWithInt_withByteArray_withByteArray_(jint bitLength, IOSByteArray *N, IOSByteArray *S) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoDigestsCSHAKEDigest, initWithInt_withByteArray_withByteArray_, bitLength, N, S)
}


#line 21
OrgBouncycastleCryptoDigestsCSHAKEDigest *create_OrgBouncycastleCryptoDigestsCSHAKEDigest_initWithInt_withByteArray_withByteArray_(jint bitLength, IOSByteArray *N, IOSByteArray *S) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoDigestsCSHAKEDigest, initWithInt_withByteArray_withByteArray_, bitLength, N, S)
}


#line 36
void OrgBouncycastleCryptoDigestsCSHAKEDigest_initWithOrgBouncycastleCryptoDigestsCSHAKEDigest_(OrgBouncycastleCryptoDigestsCSHAKEDigest *self, OrgBouncycastleCryptoDigestsCSHAKEDigest *source) {
  OrgBouncycastleCryptoDigestsSHAKEDigest_initWithOrgBouncycastleCryptoDigestsSHAKEDigest_(self,
#line 38
  source);
  
#line 40
  self->diff_ = OrgBouncycastleUtilArrays_cloneWithByteArray_(((OrgBouncycastleCryptoDigestsCSHAKEDigest *) nil_chk(source))->diff_);
}


#line 36
OrgBouncycastleCryptoDigestsCSHAKEDigest *new_OrgBouncycastleCryptoDigestsCSHAKEDigest_initWithOrgBouncycastleCryptoDigestsCSHAKEDigest_(OrgBouncycastleCryptoDigestsCSHAKEDigest *source) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoDigestsCSHAKEDigest, initWithOrgBouncycastleCryptoDigestsCSHAKEDigest_, source)
}


#line 36
OrgBouncycastleCryptoDigestsCSHAKEDigest *create_OrgBouncycastleCryptoDigestsCSHAKEDigest_initWithOrgBouncycastleCryptoDigestsCSHAKEDigest_(OrgBouncycastleCryptoDigestsCSHAKEDigest *source) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoDigestsCSHAKEDigest, initWithOrgBouncycastleCryptoDigestsCSHAKEDigest_, source)
}


#line 44
void OrgBouncycastleCryptoDigestsCSHAKEDigest_diffPadAndAbsorb(OrgBouncycastleCryptoDigestsCSHAKEDigest *self) {
  
#line 46
  jint blockSize = JreIntDiv(self->rate_, 8);
  [self absorbWithByteArray:self->diff_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->diff_))->size_];
  
#line 49
  jint delta = JreIntMod(self->diff_->size_, blockSize);
  
#line 52
  if (delta != 0) {
    
#line 54
    jint required = blockSize - delta;
    
#line 56
    while (required > ((IOSByteArray *) nil_chk(OrgBouncycastleCryptoDigestsCSHAKEDigest_padding))->size_) {
      
#line 58
      [self absorbWithByteArray:OrgBouncycastleCryptoDigestsCSHAKEDigest_padding withInt:0 withInt:OrgBouncycastleCryptoDigestsCSHAKEDigest_padding->size_];
      required -= OrgBouncycastleCryptoDigestsCSHAKEDigest_padding->size_;
    }
    
#line 62
    [self absorbWithByteArray:OrgBouncycastleCryptoDigestsCSHAKEDigest_padding withInt:0 withInt:required];
  }
}


#line 66
IOSByteArray *OrgBouncycastleCryptoDigestsCSHAKEDigest_encodeStringWithByteArray_(OrgBouncycastleCryptoDigestsCSHAKEDigest *self, IOSByteArray *str) {
  
#line 68
  if (str == nil || str->size_ == 0) {
    
#line 70
    return OrgBouncycastleCryptoDigestsXofUtils_leftEncodeWithLong_(0);
  }
  
#line 73
  return OrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_(OrgBouncycastleCryptoDigestsXofUtils_leftEncodeWithLong_(str->size_ * 8LL), str);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoDigestsCSHAKEDigest)
