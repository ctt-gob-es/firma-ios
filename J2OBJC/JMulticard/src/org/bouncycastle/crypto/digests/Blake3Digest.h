//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/digests/Blake3Digest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoDigestsBlake3Digest")
#ifdef RESTRICT_OrgBouncycastleCryptoDigestsBlake3Digest
#define INCLUDE_ALL_OrgBouncycastleCryptoDigestsBlake3Digest 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoDigestsBlake3Digest 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoDigestsBlake3Digest

#if !defined (OrgBouncycastleCryptoDigestsBlake3Digest_) && (INCLUDE_ALL_OrgBouncycastleCryptoDigestsBlake3Digest || defined(INCLUDE_OrgBouncycastleCryptoDigestsBlake3Digest))
#define OrgBouncycastleCryptoDigestsBlake3Digest_

#define RESTRICT_OrgBouncycastleCryptoExtendedDigest 1
#define INCLUDE_OrgBouncycastleCryptoExtendedDigest 1
#include "org/bouncycastle/crypto/ExtendedDigest.h"

#define RESTRICT_OrgBouncycastleUtilMemoable 1
#define INCLUDE_OrgBouncycastleUtilMemoable 1
#include "org/bouncycastle/util/Memoable.h"

#define RESTRICT_OrgBouncycastleCryptoXof 1
#define INCLUDE_OrgBouncycastleCryptoXof 1
#include "org/bouncycastle/crypto/Xof.h"

@class IOSByteArray;
@class OrgBouncycastleCryptoParamsBlake3Parameters;

/*!
 @brief Blake3 implementation.
 */
@interface OrgBouncycastleCryptoDigestsBlake3Digest : NSObject < OrgBouncycastleCryptoExtendedDigest, OrgBouncycastleUtilMemoable, OrgBouncycastleCryptoXof >

#pragma mark Public

/*!
 @brief Constructor.
 */
- (instancetype)init;

/*!
 @brief Constructor.
 @param pSource the source digest.
 */
- (instancetype)initWithOrgBouncycastleCryptoDigestsBlake3Digest:(OrgBouncycastleCryptoDigestsBlake3Digest *)pSource;

/*!
 @brief Constructor.
 @param pDigestLen the default digestLength
 */
- (instancetype)initWithInt:(jint)pDigestLen;

- (id<OrgBouncycastleUtilMemoable>)copy__ OBJC_METHOD_FAMILY_NONE;

- (jint)doFinalWithByteArray:(IOSByteArray *)pOutput
                     withInt:(jint)pOutOffset;

- (jint)doFinalWithByteArray:(IOSByteArray *)pOut
                     withInt:(jint)pOutOffset
                     withInt:(jint)pOutLen;

- (jint)doOutputWithByteArray:(IOSByteArray *)pOut
                      withInt:(jint)pOutOffset
                      withInt:(jint)pOutLen;

- (NSString *)getAlgorithmName;

- (jint)getByteLength;

- (jint)getDigestSize;

/*!
 @brief Initialise.
 @param pParams the parameters.
 */
- (void)init__WithOrgBouncycastleCryptoParamsBlake3Parameters:(OrgBouncycastleCryptoParamsBlake3Parameters *)pParams OBJC_METHOD_FAMILY_NONE;

- (void)reset;

- (void)resetWithOrgBouncycastleUtilMemoable:(id<OrgBouncycastleUtilMemoable>)pSource;

- (void)updateWithByte:(jbyte)b;

- (void)updateWithByteArray:(IOSByteArray *)pMessage
                    withInt:(jint)pOffset
                    withInt:(jint)pLen;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleCryptoDigestsBlake3Digest)

FOUNDATION_EXPORT void OrgBouncycastleCryptoDigestsBlake3Digest_init(OrgBouncycastleCryptoDigestsBlake3Digest *self);

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsBlake3Digest *new_OrgBouncycastleCryptoDigestsBlake3Digest_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsBlake3Digest *create_OrgBouncycastleCryptoDigestsBlake3Digest_init(void);

FOUNDATION_EXPORT void OrgBouncycastleCryptoDigestsBlake3Digest_initWithInt_(OrgBouncycastleCryptoDigestsBlake3Digest *self, jint pDigestLen);

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsBlake3Digest *new_OrgBouncycastleCryptoDigestsBlake3Digest_initWithInt_(jint pDigestLen) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsBlake3Digest *create_OrgBouncycastleCryptoDigestsBlake3Digest_initWithInt_(jint pDigestLen);

FOUNDATION_EXPORT void OrgBouncycastleCryptoDigestsBlake3Digest_initWithOrgBouncycastleCryptoDigestsBlake3Digest_(OrgBouncycastleCryptoDigestsBlake3Digest *self, OrgBouncycastleCryptoDigestsBlake3Digest *pSource);

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsBlake3Digest *new_OrgBouncycastleCryptoDigestsBlake3Digest_initWithOrgBouncycastleCryptoDigestsBlake3Digest_(OrgBouncycastleCryptoDigestsBlake3Digest *pSource) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsBlake3Digest *create_OrgBouncycastleCryptoDigestsBlake3Digest_initWithOrgBouncycastleCryptoDigestsBlake3Digest_(OrgBouncycastleCryptoDigestsBlake3Digest *pSource);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoDigestsBlake3Digest)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoDigestsBlake3Digest")
