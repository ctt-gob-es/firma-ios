//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/digests/Blake3Digest.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Stack.h"
#include "org/bouncycastle/crypto/digests/Blake3Digest.h"
#include "org/bouncycastle/crypto/params/Blake3Parameters.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/Integers.h"
#include "org/bouncycastle/util/Memoable.h"
#include "org/bouncycastle/util/Pack.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/digests/Blake3Digest must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoDigestsBlake3Digest () {
 @public
  /*!
   @brief The byte input/output buffer.
   */
  IOSByteArray *theBuffer_;
  /*!
   @brief The key.
   */
  IOSIntArray *theK_;
  /*!
   @brief The chaining value.
   */
  IOSIntArray *theChaining_;
  /*!
   @brief The state.
   */
  IOSIntArray *theV_;
  /*!
   @brief The message Buffer.
   */
  IOSIntArray *theM_;
  /*!
   @brief The indices.
   */
  IOSByteArray *theIndices_;
  /*!
   @brief The chainingStack.
   */
  JavaUtilStack *theStack_;
  /*!
   @brief The default digestLength.
   */
  jint theDigestLen_;
  /*!
   @brief Are we outputting?
   */
  jboolean outputting_;
  /*!
   @brief How many more bytes can we output?
   */
  jlong outputAvailable_;
  /*!
   @brief The current mode.
   */
  jint theMode_;
  /*!
   @brief The output mode.
   */
  jint theOutputMode_;
  /*!
   @brief The output dataLen.
   */
  jint theOutputDataLen_;
  /*!
   @brief The block counter.
   */
  jlong theCounter_;
  /*!
   @brief The # of bytes in the current block.
   */
  jint theCurrBytes_;
  /*!
   @brief The position of the next byte in the buffer.
   */
  jint thePos_;
}

/*!
 @brief Compress next block of the message.
 @param pMessage the message buffer
 @param pMsgPos the position within the message buffer
 */
- (void)compressBlockWithByteArray:(IOSByteArray *)pMessage
                           withInt:(jint)pMsgPos;

/*!
 @brief Adjust the stack.
 */
- (void)adjustStack;

/*!
 @brief Compress final block.
 @param pDataLen the data length
 */
- (void)compressFinalBlockWithInt:(jint)pDataLen;

/*!
 @brief Process the stack.
 */
- (void)processStack;

/*!
 @brief Perform compression.
 */
- (void)compress;

/*!
 @brief Perform a round.
 */
- (void)performRound;

/*!
 @brief Initialise M from message.
 @param pMessage the source message
 @param pMsgPos the message position
 */
- (void)initMWithByteArray:(IOSByteArray *)pMessage
                   withInt:(jint)pMsgPos OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Adjust Chaining after compression.
 */
- (void)adjustChaining;

/*!
 @brief Mix function G.
 @param msgIdx the message index
 @param posA position A in V
 @param posB position B in V
 @param posC position C in V
 @param posD poistion D in V
 */
- (void)mixGWithInt:(jint)msgIdx
            withInt:(jint)posA
            withInt:(jint)posB
            withInt:(jint)posC
            withInt:(jint)posD;

/*!
 @brief initialise the indices.
 */
- (void)initIndices OBJC_METHOD_FAMILY_NONE;

/*!
 @brief PermuteIndices.
 */
- (void)permuteIndices;

/*!
 @brief Initialise null key.
 */
- (void)initNullKey OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Initialise key.
 @param pKey the keyBytes
 */
- (void)initKeyWithByteArray:(IOSByteArray *)pKey OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Initialise key from context.
 */
- (void)initKeyFromContext OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Initialise chunk block.
 @param pDataLen the dataLength
 @param pFinal is this the final chunk?
 */
- (void)initChunkBlockWithInt:(jint)pDataLen
                  withBoolean:(jboolean)pFinal OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Initialise parent block.
 */
- (void)initParentBlock OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Initialise output block.
 */
- (void)nextOutputBlock;

/*!
 @brief IncrementBlockCount.
 */
- (void)incrementBlockCount;

/*!
 @brief ResetBlockCount.
 */
- (void)resetBlockCount;

/*!
 @brief Set root indication.
 */
- (void)setRoot;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoDigestsBlake3Digest, theBuffer_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoDigestsBlake3Digest, theK_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoDigestsBlake3Digest, theChaining_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoDigestsBlake3Digest, theV_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoDigestsBlake3Digest, theM_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoDigestsBlake3Digest, theIndices_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoDigestsBlake3Digest, theStack_, JavaUtilStack *)

/*!
 @brief Already outputting error.
 */
inline NSString *OrgBouncycastleCryptoDigestsBlake3Digest_get_ERR_OUTPUTTING(void);
static NSString *OrgBouncycastleCryptoDigestsBlake3Digest_ERR_OUTPUTTING = @"Already outputting";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoDigestsBlake3Digest, ERR_OUTPUTTING, NSString *)

/*!
 @brief Number of Words.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_NUMWORDS(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, NUMWORDS, jint)

/*!
 @brief Number of Rounds.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_ROUNDS(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_ROUNDS 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, ROUNDS, jint)

/*!
 @brief Buffer length.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_BLOCKLEN(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_BLOCKLEN 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, BLOCKLEN, jint)

/*!
 @brief Chunk length.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_CHUNKLEN(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_CHUNKLEN 1024
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, CHUNKLEN, jint)

/*!
 @brief ChunkStart Flag.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_CHUNKSTART(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_CHUNKSTART 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, CHUNKSTART, jint)

/*!
 @brief ChunkEnd Flag.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_CHUNKEND(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_CHUNKEND 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, CHUNKEND, jint)

/*!
 @brief Parent Flag.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_PARENT(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_PARENT 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, PARENT, jint)

/*!
 @brief Root Flag.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_ROOT(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_ROOT 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, ROOT, jint)

/*!
 @brief KeyedHash Flag.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_KEYEDHASH(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_KEYEDHASH 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, KEYEDHASH, jint)

/*!
 @brief DeriveContext Flag.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_DERIVECONTEXT(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_DERIVECONTEXT 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, DERIVECONTEXT, jint)

/*!
 @brief DeriveKey Flag.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_DERIVEKEY(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_DERIVEKEY 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, DERIVEKEY, jint)

/*!
 @brief Chaining0 State Locations.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_CHAINING0(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING0 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, CHAINING0, jint)

/*!
 @brief Chaining1 State Location.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_CHAINING1(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING1 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, CHAINING1, jint)

/*!
 @brief Chaining2 State Location.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_CHAINING2(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING2 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, CHAINING2, jint)

/*!
 @brief Chaining3 State Location.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_CHAINING3(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING3 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, CHAINING3, jint)

/*!
 @brief Chaining4 State Location.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_CHAINING4(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING4 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, CHAINING4, jint)

/*!
 @brief Chaining5 State Location.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_CHAINING5(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING5 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, CHAINING5, jint)

/*!
 @brief Chaining6 State Location.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_CHAINING6(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING6 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, CHAINING6, jint)

/*!
 @brief Chaining7 State Location.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_CHAINING7(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING7 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, CHAINING7, jint)

/*!
 @brief IV0 State Locations.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_IV0(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_IV0 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, IV0, jint)

/*!
 @brief IV1 State Location.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_IV1(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_IV1 9
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, IV1, jint)

/*!
 @brief IV2 State Location.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_IV2(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_IV2 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, IV2, jint)

/*!
 @brief IV3 State Location.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_IV3(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_IV3 11
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, IV3, jint)

/*!
 @brief Count0 State Location.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_COUNT0(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_COUNT0 12
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, COUNT0, jint)

/*!
 @brief Count1 State Location.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_COUNT1(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_COUNT1 13
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, COUNT1, jint)

/*!
 @brief DataLen State Location.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_DATALEN(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_DATALEN 14
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, DATALEN, jint)

/*!
 @brief Flags State Location.
 */
inline jint OrgBouncycastleCryptoDigestsBlake3Digest_get_FLAGS(void);
#define OrgBouncycastleCryptoDigestsBlake3Digest_FLAGS 15
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoDigestsBlake3Digest, FLAGS, jint)

/*!
 @brief Message word permutations.
 */
inline IOSByteArray *OrgBouncycastleCryptoDigestsBlake3Digest_get_SIGMA(void);
static IOSByteArray *OrgBouncycastleCryptoDigestsBlake3Digest_SIGMA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoDigestsBlake3Digest, SIGMA, IOSByteArray *)

/*!
 @brief Rotation constants.
 */
inline IOSByteArray *OrgBouncycastleCryptoDigestsBlake3Digest_get_ROTATE(void);
static IOSByteArray *OrgBouncycastleCryptoDigestsBlake3Digest_ROTATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoDigestsBlake3Digest, ROTATE, IOSByteArray *)

/*!
 @brief Blake3 Initialization Vector.
 */
inline IOSIntArray *OrgBouncycastleCryptoDigestsBlake3Digest_get_IV(void);
static IOSIntArray *OrgBouncycastleCryptoDigestsBlake3Digest_IV;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoDigestsBlake3Digest, IV, IOSIntArray *)

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_compressBlockWithByteArray_withInt_(OrgBouncycastleCryptoDigestsBlake3Digest *self, IOSByteArray *pMessage, jint pMsgPos);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_adjustStack(OrgBouncycastleCryptoDigestsBlake3Digest *self);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_compressFinalBlockWithInt_(OrgBouncycastleCryptoDigestsBlake3Digest *self, jint pDataLen);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_processStack(OrgBouncycastleCryptoDigestsBlake3Digest *self);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_compress(OrgBouncycastleCryptoDigestsBlake3Digest *self);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_performRound(OrgBouncycastleCryptoDigestsBlake3Digest *self);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_initMWithByteArray_withInt_(OrgBouncycastleCryptoDigestsBlake3Digest *self, IOSByteArray *pMessage, jint pMsgPos);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_adjustChaining(OrgBouncycastleCryptoDigestsBlake3Digest *self);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_mixGWithInt_withInt_withInt_withInt_withInt_(OrgBouncycastleCryptoDigestsBlake3Digest *self, jint msgIdx, jint posA, jint posB, jint posC, jint posD);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_initIndices(OrgBouncycastleCryptoDigestsBlake3Digest *self);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_permuteIndices(OrgBouncycastleCryptoDigestsBlake3Digest *self);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_initNullKey(OrgBouncycastleCryptoDigestsBlake3Digest *self);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_initKeyWithByteArray_(OrgBouncycastleCryptoDigestsBlake3Digest *self, IOSByteArray *pKey);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_initKeyFromContext(OrgBouncycastleCryptoDigestsBlake3Digest *self);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_initChunkBlockWithInt_withBoolean_(OrgBouncycastleCryptoDigestsBlake3Digest *self, jint pDataLen, jboolean pFinal);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_initParentBlock(OrgBouncycastleCryptoDigestsBlake3Digest *self);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_nextOutputBlock(OrgBouncycastleCryptoDigestsBlake3Digest *self);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_incrementBlockCount(OrgBouncycastleCryptoDigestsBlake3Digest *self);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_resetBlockCount(OrgBouncycastleCryptoDigestsBlake3Digest *self);

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsBlake3Digest_setRoot(OrgBouncycastleCryptoDigestsBlake3Digest *self);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/digests/Blake3Digest.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleCryptoDigestsBlake3Digest)


#line 16
@implementation OrgBouncycastleCryptoDigestsBlake3Digest

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 259
- (instancetype)init {
  OrgBouncycastleCryptoDigestsBlake3Digest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 269
- (instancetype)initWithInt:(jint)pDigestLen {
  OrgBouncycastleCryptoDigestsBlake3Digest_initWithInt_(self, pDigestLen);
  return self;
}


#line 280
- (instancetype)initWithOrgBouncycastleCryptoDigestsBlake3Digest:(OrgBouncycastleCryptoDigestsBlake3Digest *)pSource {
  OrgBouncycastleCryptoDigestsBlake3Digest_initWithOrgBouncycastleCryptoDigestsBlake3Digest_(self, pSource);
  return self;
}


#line 289
- (jint)getByteLength {
  
#line 292
  return OrgBouncycastleCryptoDigestsBlake3Digest_BLOCKLEN;
}

- (NSString *)getAlgorithmName {
  
#line 298
  return @"BLAKE3";
}

- (jint)getDigestSize {
  
#line 304
  return theDigestLen_;
}


#line 312
- (void)init__WithOrgBouncycastleCryptoParamsBlake3Parameters:(OrgBouncycastleCryptoParamsBlake3Parameters *)pParams {
  
#line 315
  IOSByteArray *myKey = pParams == nil ? nil : [pParams getKey];
  IOSByteArray *myContext = pParams == nil ? nil : [pParams getContext];
  
#line 319
  [self reset];
  
#line 322
  if (myKey != nil) {
    
#line 325
    OrgBouncycastleCryptoDigestsBlake3Digest_initKeyWithByteArray_(self, myKey);
    OrgBouncycastleUtilArrays_fillWithByteArray_withByte_(myKey, (jbyte) 0);
  }
  else
#line 330
  if (myContext != nil) {
    
#line 333
    OrgBouncycastleCryptoDigestsBlake3Digest_initNullKey(self);
    theMode_ = OrgBouncycastleCryptoDigestsBlake3Digest_DERIVECONTEXT;
    
#line 337
    [self updateWithByteArray:myContext withInt:0 withInt:myContext->size_];
    [self doFinalWithByteArray:theBuffer_ withInt:0];
    OrgBouncycastleCryptoDigestsBlake3Digest_initKeyFromContext(self);
    [self reset];
  }
  else {
    
#line 346
    OrgBouncycastleCryptoDigestsBlake3Digest_initNullKey(self);
    theMode_ = 0;
  }
}


#line 351
- (void)updateWithByte:(jbyte)b {
  
#line 355
  if (outputting_) {
    
#line 357
    @throw new_JavaLangIllegalStateException_initWithNSString_(OrgBouncycastleCryptoDigestsBlake3Digest_ERR_OUTPUTTING);
  }
  
#line 361
  jint blockLen = ((IOSByteArray *) nil_chk(theBuffer_))->size_;
  jint remainingLength = blockLen - thePos_;
  if (remainingLength == 0) {
    
#line 366
    OrgBouncycastleCryptoDigestsBlake3Digest_compressBlockWithByteArray_withInt_(self, theBuffer_, 0);
    
#line 369
    OrgBouncycastleUtilArrays_fillWithByteArray_withByte_(theBuffer_, (jbyte) 0);
    thePos_ = 0;
  }
  
#line 374
  *IOSByteArray_GetRef(theBuffer_, thePos_) = b;
  thePos_++;
}

- (void)updateWithByteArray:(IOSByteArray *)pMessage
                    withInt:(jint)pOffset
                    withInt:(jint)pLen {
  
#line 384
  if (pMessage == nil || pLen == 0) {
    
#line 386
    return;
  }
  
#line 390
  if (outputting_) {
    
#line 392
    @throw new_JavaLangIllegalStateException_initWithNSString_(OrgBouncycastleCryptoDigestsBlake3Digest_ERR_OUTPUTTING);
  }
  
#line 396
  jint remainingLen = 0;
  if (thePos_ != 0) {
    
#line 400
    remainingLen = OrgBouncycastleCryptoDigestsBlake3Digest_BLOCKLEN - thePos_;
    
#line 403
    if (remainingLen >= pLen) {
      
#line 406
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(pMessage, pOffset, theBuffer_, thePos_, pLen);
      thePos_ += pLen;
      return;
    }
    
#line 412
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(pMessage, pOffset, theBuffer_, thePos_, remainingLen);
    
#line 415
    OrgBouncycastleCryptoDigestsBlake3Digest_compressBlockWithByteArray_withInt_(self, theBuffer_, 0);
    
#line 418
    thePos_ = 0;
    OrgBouncycastleUtilArrays_fillWithByteArray_withByte_(theBuffer_, (jbyte) 0);
  }
  
#line 423
  jint messagePos;
  jint blockWiseLastPos = pOffset + pLen - OrgBouncycastleCryptoDigestsBlake3Digest_BLOCKLEN;
  for (messagePos = pOffset + remainingLen; messagePos < blockWiseLastPos; messagePos += OrgBouncycastleCryptoDigestsBlake3Digest_BLOCKLEN) {
    
#line 428
    OrgBouncycastleCryptoDigestsBlake3Digest_compressBlockWithByteArray_withInt_(self, pMessage, messagePos);
  }
  
#line 432
  jint len = pLen - messagePos;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(pMessage, messagePos, theBuffer_, 0, pOffset + len);
  thePos_ += pOffset + len;
}


#line 437
- (jint)doFinalWithByteArray:(IOSByteArray *)pOutput
                     withInt:(jint)pOutOffset {
  
#line 441
  return [self doFinalWithByteArray:pOutput withInt:pOutOffset withInt:[self getDigestSize]];
}

- (jint)doFinalWithByteArray:(IOSByteArray *)pOut
                     withInt:(jint)pOutOffset
                     withInt:(jint)pOutLen {
  
#line 450
  if (outputting_) {
    
#line 452
    @throw new_JavaLangIllegalStateException_initWithNSString_(OrgBouncycastleCryptoDigestsBlake3Digest_ERR_OUTPUTTING);
  }
  
#line 456
  jint length = [self doOutputWithByteArray:pOut withInt:pOutOffset withInt:pOutLen];
  
#line 459
  [self reset];
  return length;
}

- (jint)doOutputWithByteArray:(IOSByteArray *)pOut
                      withInt:(jint)pOutOffset
                      withInt:(jint)pOutLen {
  
#line 469
  if (!outputting_) {
    
#line 472
    OrgBouncycastleCryptoDigestsBlake3Digest_compressFinalBlockWithInt_(self, thePos_);
  }
  
#line 476
  if (pOutLen < 0 || (
#line 477
  outputAvailable_ >= 0 && pOutLen > outputAvailable_)) {
    
#line 479
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Insufficient bytes remaining");
  }
  
#line 483
  jint dataLeft = pOutLen;
  jint outPos = pOutOffset;
  if (thePos_ < OrgBouncycastleCryptoDigestsBlake3Digest_BLOCKLEN) {
    
#line 488
    jint dataToCopy = JavaLangMath_minWithInt_withInt_(dataLeft, OrgBouncycastleCryptoDigestsBlake3Digest_BLOCKLEN - thePos_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(theBuffer_, thePos_, pOut, outPos, dataToCopy);
    
#line 492
    thePos_ += dataToCopy;
    outPos += dataToCopy;
    dataLeft -= dataToCopy;
  }
  
#line 498
  while (dataLeft > 0) {
    
#line 501
    OrgBouncycastleCryptoDigestsBlake3Digest_nextOutputBlock(self);
    
#line 504
    jint dataToCopy = JavaLangMath_minWithInt_withInt_(dataLeft, OrgBouncycastleCryptoDigestsBlake3Digest_BLOCKLEN);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(theBuffer_, 0, pOut, outPos, dataToCopy);
    
#line 508
    thePos_ += dataToCopy;
    outPos += dataToCopy;
    dataLeft -= dataToCopy;
  }
  
#line 514
  outputAvailable_ -= pOutLen;
  
#line 517
  return pOutLen;
}


#line 520
- (void)reset {
  
#line 523
  OrgBouncycastleCryptoDigestsBlake3Digest_resetBlockCount(self);
  thePos_ = 0;
  outputting_ = false;
  OrgBouncycastleUtilArrays_fillWithByteArray_withByte_(theBuffer_, (jbyte) 0);
}

- (void)resetWithOrgBouncycastleUtilMemoable:(id<OrgBouncycastleUtilMemoable>)pSource {
  
#line 533
  OrgBouncycastleCryptoDigestsBlake3Digest *mySource = (OrgBouncycastleCryptoDigestsBlake3Digest *) cast_chk(pSource, [OrgBouncycastleCryptoDigestsBlake3Digest class]);
  
#line 536
  theCounter_ = ((OrgBouncycastleCryptoDigestsBlake3Digest *) nil_chk(mySource))->theCounter_;
  theCurrBytes_ = mySource->theCurrBytes_;
  theMode_ = mySource->theMode_;
  
#line 541
  outputting_ = mySource->outputting_;
  outputAvailable_ = mySource->outputAvailable_;
  theOutputMode_ = mySource->theOutputMode_;
  theOutputDataLen_ = mySource->theOutputDataLen_;
  
#line 547
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mySource->theChaining_, 0, theChaining_, 0, ((IOSIntArray *) nil_chk(theChaining_))->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mySource->theK_, 0, theK_, 0, ((IOSIntArray *) nil_chk(theK_))->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mySource->theM_, 0, theM_, 0, ((IOSIntArray *) nil_chk(theM_))->size_);
  
#line 552
  [((JavaUtilStack *) nil_chk(theStack_)) clear];
  for (id __strong element in mySource->theStack_) {
    (void) [theStack_ pushWithId:OrgBouncycastleUtilArrays_cloneWithIntArray_((IOSIntArray *) cast_chk(element, [IOSIntArray class]))];
  }
  
#line 558
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mySource->theBuffer_, 0, theBuffer_, 0, ((IOSByteArray *) nil_chk(theBuffer_))->size_);
  thePos_ = mySource->thePos_;
}


#line 562
- (id<OrgBouncycastleUtilMemoable>)copy__ {
  
#line 565
  return new_OrgBouncycastleCryptoDigestsBlake3Digest_initWithOrgBouncycastleCryptoDigestsBlake3Digest_(self);
}


#line 574
- (void)compressBlockWithByteArray:(IOSByteArray *)pMessage
                           withInt:(jint)pMsgPos {
  OrgBouncycastleCryptoDigestsBlake3Digest_compressBlockWithByteArray_withInt_(self, pMessage, pMsgPos);
}


#line 592
- (void)adjustStack {
  OrgBouncycastleCryptoDigestsBlake3Digest_adjustStack(self);
}


#line 626
- (void)compressFinalBlockWithInt:(jint)pDataLen {
  OrgBouncycastleCryptoDigestsBlake3Digest_compressFinalBlockWithInt_(self, pDataLen);
}


#line 640
- (void)processStack {
  OrgBouncycastleCryptoDigestsBlake3Digest_processStack(self);
}


#line 663
- (void)compress {
  OrgBouncycastleCryptoDigestsBlake3Digest_compress(self);
}


#line 682
- (void)performRound {
  OrgBouncycastleCryptoDigestsBlake3Digest_performRound(self);
}


#line 704
- (void)initMWithByteArray:(IOSByteArray *)pMessage
                   withInt:(jint)pMsgPos {
  OrgBouncycastleCryptoDigestsBlake3Digest_initMWithByteArray_withInt_(self, pMessage, pMsgPos);
}


#line 717
- (void)adjustChaining {
  OrgBouncycastleCryptoDigestsBlake3Digest_adjustChaining(self);
}


#line 757
- (void)mixGWithInt:(jint)msgIdx
            withInt:(jint)posA
            withInt:(jint)posB
            withInt:(jint)posC
            withInt:(jint)posD {
  OrgBouncycastleCryptoDigestsBlake3Digest_mixGWithInt_withInt_withInt_withInt_withInt_(self, msgIdx, posA, posB, posC, posD);
}


#line 781
- (void)initIndices {
  OrgBouncycastleCryptoDigestsBlake3Digest_initIndices(self);
}


#line 792
- (void)permuteIndices {
  OrgBouncycastleCryptoDigestsBlake3Digest_permuteIndices(self);
}


#line 803
- (void)initNullKey {
  OrgBouncycastleCryptoDigestsBlake3Digest_initNullKey(self);
}


#line 813
- (void)initKeyWithByteArray:(IOSByteArray *)pKey {
  OrgBouncycastleCryptoDigestsBlake3Digest_initKeyWithByteArray_(self, pKey);
}


#line 826
- (void)initKeyFromContext {
  OrgBouncycastleCryptoDigestsBlake3Digest_initKeyFromContext(self);
}


#line 838
- (void)initChunkBlockWithInt:(jint)pDataLen
                  withBoolean:(jboolean)pFinal {
  OrgBouncycastleCryptoDigestsBlake3Digest_initChunkBlockWithInt_withBoolean_(self, pDataLen, pFinal);
}


#line 869
- (void)initParentBlock {
  OrgBouncycastleCryptoDigestsBlake3Digest_initParentBlock(self);
}


#line 883
- (void)nextOutputBlock {
  OrgBouncycastleCryptoDigestsBlake3Digest_nextOutputBlock(self);
}


#line 903
- (void)incrementBlockCount {
  OrgBouncycastleCryptoDigestsBlake3Digest_incrementBlockCount(self);
}


#line 912
- (void)resetBlockCount {
  OrgBouncycastleCryptoDigestsBlake3Digest_resetBlockCount(self);
}


#line 921
- (void)setRoot {
  OrgBouncycastleCryptoDigestsBlake3Digest_setRoot(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleUtilMemoable;", 0x1, 12, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithOrgBouncycastleCryptoDigestsBlake3Digest:);
  methods[3].selector = @selector(getByteLength);
  methods[4].selector = @selector(getAlgorithmName);
  methods[5].selector = @selector(getDigestSize);
  methods[6].selector = @selector(init__WithOrgBouncycastleCryptoParamsBlake3Parameters:);
  methods[7].selector = @selector(updateWithByte:);
  methods[8].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[9].selector = @selector(doFinalWithByteArray:withInt:);
  methods[10].selector = @selector(doFinalWithByteArray:withInt:withInt:);
  methods[11].selector = @selector(doOutputWithByteArray:withInt:withInt:);
  methods[12].selector = @selector(reset);
  methods[13].selector = @selector(resetWithOrgBouncycastleUtilMemoable:);
  methods[14].selector = @selector(copy__);
  methods[15].selector = @selector(compressBlockWithByteArray:withInt:);
  methods[16].selector = @selector(adjustStack);
  methods[17].selector = @selector(compressFinalBlockWithInt:);
  methods[18].selector = @selector(processStack);
  methods[19].selector = @selector(compress);
  methods[20].selector = @selector(performRound);
  methods[21].selector = @selector(initMWithByteArray:withInt:);
  methods[22].selector = @selector(adjustChaining);
  methods[23].selector = @selector(mixGWithInt:withInt:withInt:withInt:withInt:);
  methods[24].selector = @selector(initIndices);
  methods[25].selector = @selector(permuteIndices);
  methods[26].selector = @selector(initNullKey);
  methods[27].selector = @selector(initKeyWithByteArray:);
  methods[28].selector = @selector(initKeyFromContext);
  methods[29].selector = @selector(initChunkBlockWithInt:withBoolean:);
  methods[30].selector = @selector(initParentBlock);
  methods[31].selector = @selector(nextOutputBlock);
  methods[32].selector = @selector(incrementBlockCount);
  methods[33].selector = @selector(resetBlockCount);
  methods[34].selector = @selector(setRoot);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ERR_OUTPUTTING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "NUMWORDS", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS, 0x1a, -1, -1, -1, -1 },
    { "ROUNDS", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_ROUNDS, 0x1a, -1, -1, -1, -1 },
    { "BLOCKLEN", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_BLOCKLEN, 0x1a, -1, -1, -1, -1 },
    { "CHUNKLEN", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_CHUNKLEN, 0x1a, -1, -1, -1, -1 },
    { "CHUNKSTART", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_CHUNKSTART, 0x1a, -1, -1, -1, -1 },
    { "CHUNKEND", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_CHUNKEND, 0x1a, -1, -1, -1, -1 },
    { "PARENT", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_PARENT, 0x1a, -1, -1, -1, -1 },
    { "ROOT", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_ROOT, 0x1a, -1, -1, -1, -1 },
    { "KEYEDHASH", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_KEYEDHASH, 0x1a, -1, -1, -1, -1 },
    { "DERIVECONTEXT", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_DERIVECONTEXT, 0x1a, -1, -1, -1, -1 },
    { "DERIVEKEY", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_DERIVEKEY, 0x1a, -1, -1, -1, -1 },
    { "CHAINING0", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING0, 0x1a, -1, -1, -1, -1 },
    { "CHAINING1", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING1, 0x1a, -1, -1, -1, -1 },
    { "CHAINING2", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING2, 0x1a, -1, -1, -1, -1 },
    { "CHAINING3", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING3, 0x1a, -1, -1, -1, -1 },
    { "CHAINING4", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING4, 0x1a, -1, -1, -1, -1 },
    { "CHAINING5", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING5, 0x1a, -1, -1, -1, -1 },
    { "CHAINING6", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING6, 0x1a, -1, -1, -1, -1 },
    { "CHAINING7", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING7, 0x1a, -1, -1, -1, -1 },
    { "IV0", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_IV0, 0x1a, -1, -1, -1, -1 },
    { "IV1", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_IV1, 0x1a, -1, -1, -1, -1 },
    { "IV2", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_IV2, 0x1a, -1, -1, -1, -1 },
    { "IV3", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_IV3, 0x1a, -1, -1, -1, -1 },
    { "COUNT0", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_COUNT0, 0x1a, -1, -1, -1, -1 },
    { "COUNT1", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_COUNT1, 0x1a, -1, -1, -1, -1 },
    { "DATALEN", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_DATALEN, 0x1a, -1, -1, -1, -1 },
    { "FLAGS", "I", .constantValue.asInt = OrgBouncycastleCryptoDigestsBlake3Digest_FLAGS, 0x1a, -1, -1, -1, -1 },
    { "SIGMA", "[B", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "ROTATE", "[B", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "IV", "[I", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "theBuffer_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "theK_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "theChaining_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "theV_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "theM_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "theIndices_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "theStack_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "theDigestLen_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "outputting_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "outputAvailable_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theOutputMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theOutputDataLen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theCounter_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theCurrBytes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "thePos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LOrgBouncycastleCryptoDigestsBlake3Digest;", "init", "LOrgBouncycastleCryptoParamsBlake3Parameters;", "update", "B", "[BII", "doFinal", "[BI", "doOutput", "reset", "LOrgBouncycastleUtilMemoable;", "copy", "compressBlock", "compressFinalBlock", "initM", "mixG", "IIIII", "initKey", "[B", "initChunkBlock", "IZ", &OrgBouncycastleCryptoDigestsBlake3Digest_ERR_OUTPUTTING, &OrgBouncycastleCryptoDigestsBlake3Digest_SIGMA, &OrgBouncycastleCryptoDigestsBlake3Digest_ROTATE, &OrgBouncycastleCryptoDigestsBlake3Digest_IV };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoDigestsBlake3Digest = { "Blake3Digest", "org.bouncycastle.crypto.digests", ptrTable, methods, fields, 7, 0x1, 35, 47, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoDigestsBlake3Digest;
}

+ (void)initialize {
  if (self == [OrgBouncycastleCryptoDigestsBlake3Digest class]) {
    OrgBouncycastleCryptoDigestsBlake3Digest_SIGMA = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 162
      2, 6, 3, 10, 7, 0, 4, 13, 1, 11, 12, 5, 9, 14, 15, 8 } count:16];
      OrgBouncycastleCryptoDigestsBlake3Digest_ROTATE = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 167
        16, 12, 8, 7 } count:4];
        OrgBouncycastleCryptoDigestsBlake3Digest_IV = [IOSIntArray newArrayWithInts:(jint[]){
#line 173
          (jint) 0x6a09e667, (jint) 0xbb67ae85, (jint) 0x3c6ef372, (jint) 0xa54ff53a, (jint) 0x510e527f, (jint) 0x9b05688c, (jint) 0x1f83d9ab, (jint) 0x5be0cd19 } count:8];
          J2OBJC_SET_INITIALIZED(OrgBouncycastleCryptoDigestsBlake3Digest)
        }
      }

@end


#line 259
void OrgBouncycastleCryptoDigestsBlake3Digest_init(OrgBouncycastleCryptoDigestsBlake3Digest *self) {
  OrgBouncycastleCryptoDigestsBlake3Digest_initWithInt_(self, JreRShift32(OrgBouncycastleCryptoDigestsBlake3Digest_BLOCKLEN,
#line 261
  1));
}


#line 259
OrgBouncycastleCryptoDigestsBlake3Digest *new_OrgBouncycastleCryptoDigestsBlake3Digest_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoDigestsBlake3Digest, init)
}


#line 259
OrgBouncycastleCryptoDigestsBlake3Digest *create_OrgBouncycastleCryptoDigestsBlake3Digest_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoDigestsBlake3Digest, init)
}


#line 269
void OrgBouncycastleCryptoDigestsBlake3Digest_initWithInt_(OrgBouncycastleCryptoDigestsBlake3Digest *self, jint pDigestLen) {
  NSObject_init(self);
  self->theBuffer_ = [IOSByteArray newArrayWithLength:OrgBouncycastleCryptoDigestsBlake3Digest_BLOCKLEN];
  self->theK_ = [IOSIntArray newArrayWithLength:OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS];
  self->theChaining_ = [IOSIntArray newArrayWithLength:OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS];
  self->theV_ = [IOSIntArray newArrayWithLength:JreLShift32(OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS,
#line 194
  1)];
  self->theM_ = [IOSIntArray newArrayWithLength:JreLShift32(OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS,
#line 199
  1)];
  self->theIndices_ = [IOSByteArray newArrayWithLength:JreLShift32(OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS,
#line 204
  1)];
  self->theStack_ = new_JavaUtilStack_init();
  
#line 271
  self->theDigestLen_ = pDigestLen;
  [self init__WithOrgBouncycastleCryptoParamsBlake3Parameters:nil];
}


#line 269
OrgBouncycastleCryptoDigestsBlake3Digest *new_OrgBouncycastleCryptoDigestsBlake3Digest_initWithInt_(jint pDigestLen) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoDigestsBlake3Digest, initWithInt_, pDigestLen)
}


#line 269
OrgBouncycastleCryptoDigestsBlake3Digest *create_OrgBouncycastleCryptoDigestsBlake3Digest_initWithInt_(jint pDigestLen) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoDigestsBlake3Digest, initWithInt_, pDigestLen)
}


#line 280
void OrgBouncycastleCryptoDigestsBlake3Digest_initWithOrgBouncycastleCryptoDigestsBlake3Digest_(OrgBouncycastleCryptoDigestsBlake3Digest *self, OrgBouncycastleCryptoDigestsBlake3Digest *pSource) {
  NSObject_init(self);
  self->theBuffer_ = [IOSByteArray newArrayWithLength:OrgBouncycastleCryptoDigestsBlake3Digest_BLOCKLEN];
  self->theK_ = [IOSIntArray newArrayWithLength:OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS];
  self->theChaining_ = [IOSIntArray newArrayWithLength:OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS];
  self->theV_ = [IOSIntArray newArrayWithLength:JreLShift32(OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS,
#line 194
  1)];
  self->theM_ = [IOSIntArray newArrayWithLength:JreLShift32(OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS,
#line 199
  1)];
  self->theIndices_ = [IOSByteArray newArrayWithLength:JreLShift32(OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS,
#line 204
  1)];
  self->theStack_ = new_JavaUtilStack_init();
  
#line 283
  self->theDigestLen_ = ((OrgBouncycastleCryptoDigestsBlake3Digest *) nil_chk(pSource))->theDigestLen_;
  
#line 286
  [self resetWithOrgBouncycastleUtilMemoable:pSource];
}


#line 280
OrgBouncycastleCryptoDigestsBlake3Digest *new_OrgBouncycastleCryptoDigestsBlake3Digest_initWithOrgBouncycastleCryptoDigestsBlake3Digest_(OrgBouncycastleCryptoDigestsBlake3Digest *pSource) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoDigestsBlake3Digest, initWithOrgBouncycastleCryptoDigestsBlake3Digest_, pSource)
}


#line 280
OrgBouncycastleCryptoDigestsBlake3Digest *create_OrgBouncycastleCryptoDigestsBlake3Digest_initWithOrgBouncycastleCryptoDigestsBlake3Digest_(OrgBouncycastleCryptoDigestsBlake3Digest *pSource) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoDigestsBlake3Digest, initWithOrgBouncycastleCryptoDigestsBlake3Digest_, pSource)
}


#line 574
void OrgBouncycastleCryptoDigestsBlake3Digest_compressBlockWithByteArray_withInt_(OrgBouncycastleCryptoDigestsBlake3Digest *self, IOSByteArray *pMessage, jint pMsgPos) {
  
#line 578
  OrgBouncycastleCryptoDigestsBlake3Digest_initChunkBlockWithInt_withBoolean_(self, OrgBouncycastleCryptoDigestsBlake3Digest_BLOCKLEN, false);
  OrgBouncycastleCryptoDigestsBlake3Digest_initMWithByteArray_withInt_(self, pMessage, pMsgPos);
  OrgBouncycastleCryptoDigestsBlake3Digest_compress(self);
  
#line 583
  if (self->theCurrBytes_ == 0) {
    
#line 585
    OrgBouncycastleCryptoDigestsBlake3Digest_adjustStack(self);
  }
}


#line 592
void OrgBouncycastleCryptoDigestsBlake3Digest_adjustStack(OrgBouncycastleCryptoDigestsBlake3Digest *self) {
  
#line 595
  jlong myCount = self->theCounter_;
  while (myCount > 0) {
    
#line 599
    if ((myCount & 1) == 1) {
      
#line 601
      break;
    }
    
#line 605
    IOSIntArray *myLeft = (IOSIntArray *) cast_chk([((JavaUtilStack *) nil_chk(self->theStack_)) pop], [IOSIntArray class]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(myLeft, 0, self->theM_, 0, OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->theChaining_, 0, self->theM_, OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS, OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS);
    
#line 610
    OrgBouncycastleCryptoDigestsBlake3Digest_initParentBlock(self);
    OrgBouncycastleCryptoDigestsBlake3Digest_compress(self);
    
#line 614
    JreRShiftAssignLong(&myCount, 1);
  }
  
#line 618
  (void) [((JavaUtilStack *) nil_chk(self->theStack_)) pushWithId:OrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(self->theChaining_, OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS)];
}


#line 626
void OrgBouncycastleCryptoDigestsBlake3Digest_compressFinalBlockWithInt_(OrgBouncycastleCryptoDigestsBlake3Digest *self, jint pDataLen) {
  
#line 629
  OrgBouncycastleCryptoDigestsBlake3Digest_initChunkBlockWithInt_withBoolean_(self, pDataLen, true);
  OrgBouncycastleCryptoDigestsBlake3Digest_initMWithByteArray_withInt_(self, self->theBuffer_, 0);
  OrgBouncycastleCryptoDigestsBlake3Digest_compress(self);
  
#line 634
  OrgBouncycastleCryptoDigestsBlake3Digest_processStack(self);
}


#line 640
void OrgBouncycastleCryptoDigestsBlake3Digest_processStack(OrgBouncycastleCryptoDigestsBlake3Digest *self) {
  
#line 643
  while (![((JavaUtilStack *) nil_chk(self->theStack_)) isEmpty]) {
    
#line 646
    IOSIntArray *myLeft = (IOSIntArray *) cast_chk([self->theStack_ pop], [IOSIntArray class]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(myLeft, 0, self->theM_, 0, OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->theChaining_, 0, self->theM_, OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS, OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS);
    
#line 651
    OrgBouncycastleCryptoDigestsBlake3Digest_initParentBlock(self);
    if ([self->theStack_ isEmpty]) {
      
#line 654
      OrgBouncycastleCryptoDigestsBlake3Digest_setRoot(self);
    }
    OrgBouncycastleCryptoDigestsBlake3Digest_compress(self);
  }
}


#line 663
void OrgBouncycastleCryptoDigestsBlake3Digest_compress(OrgBouncycastleCryptoDigestsBlake3Digest *self) {
  
#line 666
  OrgBouncycastleCryptoDigestsBlake3Digest_initIndices(self);
  
#line 669
  for (jint round = 0; round < OrgBouncycastleCryptoDigestsBlake3Digest_ROUNDS - 1; round++) {
    
#line 672
    OrgBouncycastleCryptoDigestsBlake3Digest_performRound(self);
    OrgBouncycastleCryptoDigestsBlake3Digest_permuteIndices(self);
  }
  OrgBouncycastleCryptoDigestsBlake3Digest_performRound(self);
  OrgBouncycastleCryptoDigestsBlake3Digest_adjustChaining(self);
}


#line 682
void OrgBouncycastleCryptoDigestsBlake3Digest_performRound(OrgBouncycastleCryptoDigestsBlake3Digest *self) {
  
#line 685
  jint idx = 0;
  OrgBouncycastleCryptoDigestsBlake3Digest_mixGWithInt_withInt_withInt_withInt_withInt_(self, idx++, OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING0, OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING4, OrgBouncycastleCryptoDigestsBlake3Digest_IV0, OrgBouncycastleCryptoDigestsBlake3Digest_COUNT0);
  OrgBouncycastleCryptoDigestsBlake3Digest_mixGWithInt_withInt_withInt_withInt_withInt_(self, idx++, OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING1, OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING5, OrgBouncycastleCryptoDigestsBlake3Digest_IV1, OrgBouncycastleCryptoDigestsBlake3Digest_COUNT1);
  OrgBouncycastleCryptoDigestsBlake3Digest_mixGWithInt_withInt_withInt_withInt_withInt_(self, idx++, OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING2, OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING6, OrgBouncycastleCryptoDigestsBlake3Digest_IV2, OrgBouncycastleCryptoDigestsBlake3Digest_DATALEN);
  OrgBouncycastleCryptoDigestsBlake3Digest_mixGWithInt_withInt_withInt_withInt_withInt_(self, idx++, OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING3, OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING7, OrgBouncycastleCryptoDigestsBlake3Digest_IV3, OrgBouncycastleCryptoDigestsBlake3Digest_FLAGS);
  
#line 692
  OrgBouncycastleCryptoDigestsBlake3Digest_mixGWithInt_withInt_withInt_withInt_withInt_(self, idx++, OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING0, OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING5, OrgBouncycastleCryptoDigestsBlake3Digest_IV2, OrgBouncycastleCryptoDigestsBlake3Digest_FLAGS);
  OrgBouncycastleCryptoDigestsBlake3Digest_mixGWithInt_withInt_withInt_withInt_withInt_(self, idx++, OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING1, OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING6, OrgBouncycastleCryptoDigestsBlake3Digest_IV3, OrgBouncycastleCryptoDigestsBlake3Digest_COUNT0);
  OrgBouncycastleCryptoDigestsBlake3Digest_mixGWithInt_withInt_withInt_withInt_withInt_(self, idx++, OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING2, OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING7, OrgBouncycastleCryptoDigestsBlake3Digest_IV0, OrgBouncycastleCryptoDigestsBlake3Digest_COUNT1);
  OrgBouncycastleCryptoDigestsBlake3Digest_mixGWithInt_withInt_withInt_withInt_withInt_(self, idx, OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING3, OrgBouncycastleCryptoDigestsBlake3Digest_CHAINING4, OrgBouncycastleCryptoDigestsBlake3Digest_IV1, OrgBouncycastleCryptoDigestsBlake3Digest_DATALEN);
}


#line 704
void OrgBouncycastleCryptoDigestsBlake3Digest_initMWithByteArray_withInt_(OrgBouncycastleCryptoDigestsBlake3Digest *self, IOSByteArray *pMessage, jint pMsgPos) {
  
#line 708
  for (jint i = 0; i < JreLShift32(OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS, 1); i++) {
    
#line 710
    *IOSIntArray_GetRef(nil_chk(self->theM_), i) = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(pMessage, pMsgPos + i * OrgBouncycastleUtilIntegers_BYTES);
  }
}


#line 717
void OrgBouncycastleCryptoDigestsBlake3Digest_adjustChaining(OrgBouncycastleCryptoDigestsBlake3Digest *self) {
  
#line 720
  if (self->outputting_) {
    
#line 723
    for (jint i = 0; i < OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS; i++) {
      
#line 725
      *IOSIntArray_GetRef(nil_chk(self->theV_), i) ^= IOSIntArray_Get(self->theV_, i + OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS);
      *IOSIntArray_GetRef(self->theV_, i + OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS) ^= IOSIntArray_Get(nil_chk(self->theChaining_), i);
    }
    
#line 730
    for (jint i = 0; i < JreLShift32(OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS, 1); i++) {
      
#line 732
      OrgBouncycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(IOSIntArray_Get(nil_chk(self->theV_), i), self->theBuffer_, i * OrgBouncycastleUtilIntegers_BYTES);
    }
    self->thePos_ = 0;
  }
  else {
    
#line 741
    for (jint i = 0; i < OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS; i++) {
      
#line 743
      *IOSIntArray_GetRef(nil_chk(self->theChaining_), i) = IOSIntArray_Get(nil_chk(self->theV_), i) ^ IOSIntArray_Get(self->theV_, i + OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS);
    }
  }
}


#line 757
void OrgBouncycastleCryptoDigestsBlake3Digest_mixGWithInt_withInt_withInt_withInt_withInt_(OrgBouncycastleCryptoDigestsBlake3Digest *self, jint msgIdx, jint posA, jint posB, jint posC, jint posD) {
  
#line 764
  jint msg = JreLShift32(msgIdx, 1);
  jint rot = 0;
  
#line 768
  *IOSIntArray_GetRef(nil_chk(self->theV_), posA) += IOSIntArray_Get(self->theV_, posB) + IOSIntArray_Get(nil_chk(self->theM_), IOSByteArray_Get(nil_chk(self->theIndices_), msg++));
  *IOSIntArray_GetRef(self->theV_, posD) = OrgBouncycastleUtilIntegers_rotateRightWithInt_withInt_(IOSIntArray_Get(self->theV_, posD) ^ IOSIntArray_Get(self->theV_, posA), IOSByteArray_Get(nil_chk(OrgBouncycastleCryptoDigestsBlake3Digest_ROTATE), rot++));
  *IOSIntArray_GetRef(self->theV_, posC) += IOSIntArray_Get(self->theV_, posD);
  *IOSIntArray_GetRef(self->theV_, posB) = OrgBouncycastleUtilIntegers_rotateRightWithInt_withInt_(IOSIntArray_Get(self->theV_, posB) ^ IOSIntArray_Get(self->theV_, posC), IOSByteArray_Get(OrgBouncycastleCryptoDigestsBlake3Digest_ROTATE, rot++));
  *IOSIntArray_GetRef(self->theV_, posA) += IOSIntArray_Get(self->theV_, posB) + IOSIntArray_Get(self->theM_, IOSByteArray_Get(self->theIndices_, msg));
  *IOSIntArray_GetRef(self->theV_, posD) = OrgBouncycastleUtilIntegers_rotateRightWithInt_withInt_(IOSIntArray_Get(self->theV_, posD) ^ IOSIntArray_Get(self->theV_, posA), IOSByteArray_Get(OrgBouncycastleCryptoDigestsBlake3Digest_ROTATE, rot++));
  *IOSIntArray_GetRef(self->theV_, posC) += IOSIntArray_Get(self->theV_, posD);
  *IOSIntArray_GetRef(self->theV_, posB) = OrgBouncycastleUtilIntegers_rotateRightWithInt_withInt_(IOSIntArray_Get(self->theV_, posB) ^ IOSIntArray_Get(self->theV_, posC), IOSByteArray_Get(OrgBouncycastleCryptoDigestsBlake3Digest_ROTATE, rot));
}


#line 781
void OrgBouncycastleCryptoDigestsBlake3Digest_initIndices(OrgBouncycastleCryptoDigestsBlake3Digest *self) {
  
#line 783
  for (jbyte i = 0; i < ((IOSByteArray *) nil_chk(self->theIndices_))->size_; i++) {
    
#line 785
    *IOSByteArray_GetRef(self->theIndices_, i) = i;
  }
}


#line 792
void OrgBouncycastleCryptoDigestsBlake3Digest_permuteIndices(OrgBouncycastleCryptoDigestsBlake3Digest *self) {
  
#line 794
  for (jbyte i = 0; i < ((IOSByteArray *) nil_chk(self->theIndices_))->size_; i++) {
    
#line 796
    *IOSByteArray_GetRef(self->theIndices_, i) = IOSByteArray_Get(nil_chk(OrgBouncycastleCryptoDigestsBlake3Digest_SIGMA), IOSByteArray_Get(self->theIndices_, i));
  }
}


#line 803
void OrgBouncycastleCryptoDigestsBlake3Digest_initNullKey(OrgBouncycastleCryptoDigestsBlake3Digest *self) {
  
#line 805
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(OrgBouncycastleCryptoDigestsBlake3Digest_IV, 0, self->theK_, 0, OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS);
}


#line 813
void OrgBouncycastleCryptoDigestsBlake3Digest_initKeyWithByteArray_(OrgBouncycastleCryptoDigestsBlake3Digest *self, IOSByteArray *pKey) {
  
#line 816
  for (jint i = 0; i < OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS; i++) {
    
#line 818
    *IOSIntArray_GetRef(nil_chk(self->theK_), i) = OrgBouncycastleUtilPack_littleEndianToIntWithByteArray_withInt_(pKey, i * OrgBouncycastleUtilIntegers_BYTES);
  }
  self->theMode_ = OrgBouncycastleCryptoDigestsBlake3Digest_KEYEDHASH;
}


#line 826
void OrgBouncycastleCryptoDigestsBlake3Digest_initKeyFromContext(OrgBouncycastleCryptoDigestsBlake3Digest *self) {
  
#line 828
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->theV_, 0, self->theK_, 0, OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS);
  self->theMode_ = OrgBouncycastleCryptoDigestsBlake3Digest_DERIVEKEY;
}


#line 838
void OrgBouncycastleCryptoDigestsBlake3Digest_initChunkBlockWithInt_withBoolean_(OrgBouncycastleCryptoDigestsBlake3Digest *self, jint pDataLen, jboolean pFinal) {
  
#line 842
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->theCurrBytes_ == 0 ? self->theK_ : self->theChaining_, 0, self->theV_, 0, OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(OrgBouncycastleCryptoDigestsBlake3Digest_IV, 0, self->theV_, OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS, JreRShift32(OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS, 1));
  *IOSIntArray_GetRef(nil_chk(self->theV_), OrgBouncycastleCryptoDigestsBlake3Digest_COUNT0) = (jint) self->theCounter_;
  *IOSIntArray_GetRef(self->theV_, OrgBouncycastleCryptoDigestsBlake3Digest_COUNT1) = (jint) (JreRShift64(self->theCounter_, OrgBouncycastleUtilIntegers_SIZE));
  *IOSIntArray_GetRef(self->theV_, OrgBouncycastleCryptoDigestsBlake3Digest_DATALEN) = pDataLen;
  *IOSIntArray_GetRef(self->theV_, OrgBouncycastleCryptoDigestsBlake3Digest_FLAGS) = self->theMode_ +
#line 848
  (self->theCurrBytes_ == 0 ? OrgBouncycastleCryptoDigestsBlake3Digest_CHUNKSTART : 0) +
#line 849
  (pFinal ? OrgBouncycastleCryptoDigestsBlake3Digest_CHUNKEND : 0);
  
#line 852
  self->theCurrBytes_ += pDataLen;
  if (self->theCurrBytes_ >= OrgBouncycastleCryptoDigestsBlake3Digest_CHUNKLEN) {
    
#line 855
    OrgBouncycastleCryptoDigestsBlake3Digest_incrementBlockCount(self);
    *IOSIntArray_GetRef(self->theV_, OrgBouncycastleCryptoDigestsBlake3Digest_FLAGS) |= OrgBouncycastleCryptoDigestsBlake3Digest_CHUNKEND;
  }
  
#line 860
  if (pFinal && [((JavaUtilStack *) nil_chk(self->theStack_)) isEmpty]) {
    
#line 862
    OrgBouncycastleCryptoDigestsBlake3Digest_setRoot(self);
  }
}

void OrgBouncycastleCryptoDigestsBlake3Digest_initParentBlock(OrgBouncycastleCryptoDigestsBlake3Digest *self) {
  
#line 872
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->theK_, 0, self->theV_, 0, OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(OrgBouncycastleCryptoDigestsBlake3Digest_IV, 0, self->theV_, OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS, JreRShift32(OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS, 1));
  *IOSIntArray_GetRef(nil_chk(self->theV_), OrgBouncycastleCryptoDigestsBlake3Digest_COUNT0) = 0;
  *IOSIntArray_GetRef(self->theV_, OrgBouncycastleCryptoDigestsBlake3Digest_COUNT1) = 0;
  *IOSIntArray_GetRef(self->theV_, OrgBouncycastleCryptoDigestsBlake3Digest_DATALEN) = OrgBouncycastleCryptoDigestsBlake3Digest_BLOCKLEN;
  *IOSIntArray_GetRef(self->theV_, OrgBouncycastleCryptoDigestsBlake3Digest_FLAGS) = self->theMode_ | OrgBouncycastleCryptoDigestsBlake3Digest_PARENT;
}


#line 883
void OrgBouncycastleCryptoDigestsBlake3Digest_nextOutputBlock(OrgBouncycastleCryptoDigestsBlake3Digest *self) {
  
#line 886
  self->theCounter_++;
  
#line 889
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->theChaining_, 0, self->theV_, 0, OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(OrgBouncycastleCryptoDigestsBlake3Digest_IV, 0, self->theV_, OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS, JreRShift32(OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS, 1));
  *IOSIntArray_GetRef(nil_chk(self->theV_), OrgBouncycastleCryptoDigestsBlake3Digest_COUNT0) = (jint) self->theCounter_;
  *IOSIntArray_GetRef(self->theV_, OrgBouncycastleCryptoDigestsBlake3Digest_COUNT1) = (jint) (JreRShift64(self->theCounter_, OrgBouncycastleUtilIntegers_SIZE));
  *IOSIntArray_GetRef(self->theV_, OrgBouncycastleCryptoDigestsBlake3Digest_DATALEN) = self->theOutputDataLen_;
  *IOSIntArray_GetRef(self->theV_, OrgBouncycastleCryptoDigestsBlake3Digest_FLAGS) = self->theOutputMode_;
  
#line 897
  OrgBouncycastleCryptoDigestsBlake3Digest_compress(self);
}


#line 903
void OrgBouncycastleCryptoDigestsBlake3Digest_incrementBlockCount(OrgBouncycastleCryptoDigestsBlake3Digest *self) {
  
#line 905
  self->theCounter_++;
  self->theCurrBytes_ = 0;
}


#line 912
void OrgBouncycastleCryptoDigestsBlake3Digest_resetBlockCount(OrgBouncycastleCryptoDigestsBlake3Digest *self) {
  
#line 914
  self->theCounter_ = 0;
  self->theCurrBytes_ = 0;
}


#line 921
void OrgBouncycastleCryptoDigestsBlake3Digest_setRoot(OrgBouncycastleCryptoDigestsBlake3Digest *self) {
  
#line 923
  *IOSIntArray_GetRef(nil_chk(self->theV_), OrgBouncycastleCryptoDigestsBlake3Digest_FLAGS) |= OrgBouncycastleCryptoDigestsBlake3Digest_ROOT;
  self->theOutputMode_ = IOSIntArray_Get(self->theV_, OrgBouncycastleCryptoDigestsBlake3Digest_FLAGS);
  self->theOutputDataLen_ = IOSIntArray_Get(self->theV_, OrgBouncycastleCryptoDigestsBlake3Digest_DATALEN);
  self->theCounter_ = 0;
  self->outputting_ = true;
  self->outputAvailable_ = -1;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->theV_, 0, self->theChaining_, 0, OrgBouncycastleCryptoDigestsBlake3Digest_NUMWORDS);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoDigestsBlake3Digest)
