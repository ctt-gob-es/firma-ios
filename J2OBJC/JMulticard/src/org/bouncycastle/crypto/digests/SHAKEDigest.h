//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/digests/SHAKEDigest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoDigestsSHAKEDigest")
#ifdef RESTRICT_OrgBouncycastleCryptoDigestsSHAKEDigest
#define INCLUDE_ALL_OrgBouncycastleCryptoDigestsSHAKEDigest 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoDigestsSHAKEDigest 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoDigestsSHAKEDigest

#if !defined (OrgBouncycastleCryptoDigestsSHAKEDigest_) && (INCLUDE_ALL_OrgBouncycastleCryptoDigestsSHAKEDigest || defined(INCLUDE_OrgBouncycastleCryptoDigestsSHAKEDigest))
#define OrgBouncycastleCryptoDigestsSHAKEDigest_

#define RESTRICT_OrgBouncycastleCryptoDigestsKeccakDigest 1
#define INCLUDE_OrgBouncycastleCryptoDigestsKeccakDigest 1
#include "org/bouncycastle/crypto/digests/KeccakDigest.h"

#define RESTRICT_OrgBouncycastleCryptoXof 1
#define INCLUDE_OrgBouncycastleCryptoXof 1
#include "org/bouncycastle/crypto/Xof.h"

@class IOSByteArray;

/*!
 @brief implementation of SHAKE based on following KeccakNISTInterface.c from https://keccak.noekeon.org/
 <p>
  Following the naming conventions used in the C source code to enable easy review of the implementation.
 */
@interface OrgBouncycastleCryptoDigestsSHAKEDigest : OrgBouncycastleCryptoDigestsKeccakDigest < OrgBouncycastleCryptoXof >

#pragma mark Public

- (instancetype)init;

/*!
 @brief Base constructor.
 @param bitLength the security strength in bits of the XOF.
 */
- (instancetype)initWithInt:(jint)bitLength;

/*!
 @brief Clone constructor
 @param source the other digest to be copied.
 */
- (instancetype)initWithOrgBouncycastleCryptoDigestsSHAKEDigest:(OrgBouncycastleCryptoDigestsSHAKEDigest *)source;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff
                     withInt:(jint)outLen;

- (jint)doOutputWithByteArray:(IOSByteArray *)outArg
                      withInt:(jint)outOff
                      withInt:(jint)outLen;

- (NSString *)getAlgorithmName;

- (jint)getDigestSize;

#pragma mark Protected

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff
                    withByte:(jbyte)partialByte
                     withInt:(jint)partialBits;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff
                     withInt:(jint)outLen
                    withByte:(jbyte)partialByte
                     withInt:(jint)partialBits;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgBouncycastleCryptoDigestsKeccakDigest:(OrgBouncycastleCryptoDigestsKeccakDigest *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCryptoDigestsSHAKEDigest)

FOUNDATION_EXPORT void OrgBouncycastleCryptoDigestsSHAKEDigest_init(OrgBouncycastleCryptoDigestsSHAKEDigest *self);

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsSHAKEDigest *new_OrgBouncycastleCryptoDigestsSHAKEDigest_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsSHAKEDigest *create_OrgBouncycastleCryptoDigestsSHAKEDigest_init(void);

FOUNDATION_EXPORT void OrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(OrgBouncycastleCryptoDigestsSHAKEDigest *self, jint bitLength);

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsSHAKEDigest *new_OrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(jint bitLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsSHAKEDigest *create_OrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(jint bitLength);

FOUNDATION_EXPORT void OrgBouncycastleCryptoDigestsSHAKEDigest_initWithOrgBouncycastleCryptoDigestsSHAKEDigest_(OrgBouncycastleCryptoDigestsSHAKEDigest *self, OrgBouncycastleCryptoDigestsSHAKEDigest *source);

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsSHAKEDigest *new_OrgBouncycastleCryptoDigestsSHAKEDigest_initWithOrgBouncycastleCryptoDigestsSHAKEDigest_(OrgBouncycastleCryptoDigestsSHAKEDigest *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsSHAKEDigest *create_OrgBouncycastleCryptoDigestsSHAKEDigest_initWithOrgBouncycastleCryptoDigestsSHAKEDigest_(OrgBouncycastleCryptoDigestsSHAKEDigest *source);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoDigestsSHAKEDigest)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoDigestsSHAKEDigest")
