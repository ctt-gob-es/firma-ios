//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/digests/SM3Digest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoDigestsSM3Digest")
#ifdef RESTRICT_OrgBouncycastleCryptoDigestsSM3Digest
#define INCLUDE_ALL_OrgBouncycastleCryptoDigestsSM3Digest 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoDigestsSM3Digest 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoDigestsSM3Digest

#if !defined (OrgBouncycastleCryptoDigestsSM3Digest_) && (INCLUDE_ALL_OrgBouncycastleCryptoDigestsSM3Digest || defined(INCLUDE_OrgBouncycastleCryptoDigestsSM3Digest))
#define OrgBouncycastleCryptoDigestsSM3Digest_

#define RESTRICT_OrgBouncycastleCryptoDigestsGeneralDigest 1
#define INCLUDE_OrgBouncycastleCryptoDigestsGeneralDigest 1
#include "org/bouncycastle/crypto/digests/GeneralDigest.h"

@class IOSByteArray;
@protocol OrgBouncycastleUtilMemoable;

/*!
 @brief Implementation of Chinese SM3 digest as described at
  https://tools.ietf.org/html/draft-shen-sm3-hash-01
  and at ....( Chinese PDF ) 
 <p>
  The specification says "process a bit stream",
  but this is written to process bytes in blocks of 4,
  meaning this will process 32-bit word groups.
 But so do also most other digest specifications,
  including the SHA-256 which was a origin for
  this specification.
 */
@interface OrgBouncycastleCryptoDigestsSM3Digest : OrgBouncycastleCryptoDigestsGeneralDigest

#pragma mark Public

/*!
 @brief Standard constructor
 */
- (instancetype)init;

/*!
 @brief Copy constructor.This will copy the state of the provided
  message digest.
 */
- (instancetype)initWithOrgBouncycastleCryptoDigestsSM3Digest:(OrgBouncycastleCryptoDigestsSM3Digest *)t;

- (id<OrgBouncycastleUtilMemoable>)copy__ OBJC_METHOD_FAMILY_NONE;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (NSString *)getAlgorithmName;

- (jint)getDigestSize;

/*!
 @brief reset the chaining variables
 */
- (void)reset;

- (void)resetWithOrgBouncycastleUtilMemoable:(id<OrgBouncycastleUtilMemoable>)other;

#pragma mark Protected

- (void)processBlock;

- (void)processLengthWithLong:(jlong)bitLength;

- (void)processWordWithByteArray:(IOSByteArray *)inArg
                         withInt:(jint)inOff;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithByteArray:(IOSByteArray *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithOrgBouncycastleCryptoDigestsGeneralDigest:(OrgBouncycastleCryptoDigestsGeneralDigest *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleCryptoDigestsSM3Digest)

FOUNDATION_EXPORT void OrgBouncycastleCryptoDigestsSM3Digest_init(OrgBouncycastleCryptoDigestsSM3Digest *self);

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsSM3Digest *new_OrgBouncycastleCryptoDigestsSM3Digest_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsSM3Digest *create_OrgBouncycastleCryptoDigestsSM3Digest_init(void);

FOUNDATION_EXPORT void OrgBouncycastleCryptoDigestsSM3Digest_initWithOrgBouncycastleCryptoDigestsSM3Digest_(OrgBouncycastleCryptoDigestsSM3Digest *self, OrgBouncycastleCryptoDigestsSM3Digest *t);

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsSM3Digest *new_OrgBouncycastleCryptoDigestsSM3Digest_initWithOrgBouncycastleCryptoDigestsSM3Digest_(OrgBouncycastleCryptoDigestsSM3Digest *t) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsSM3Digest *create_OrgBouncycastleCryptoDigestsSM3Digest_initWithOrgBouncycastleCryptoDigestsSM3Digest_(OrgBouncycastleCryptoDigestsSM3Digest *t);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoDigestsSM3Digest)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoDigestsSM3Digest")
