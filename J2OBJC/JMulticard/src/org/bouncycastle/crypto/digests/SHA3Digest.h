//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/digests/SHA3Digest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoDigestsSHA3Digest")
#ifdef RESTRICT_OrgBouncycastleCryptoDigestsSHA3Digest
#define INCLUDE_ALL_OrgBouncycastleCryptoDigestsSHA3Digest 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoDigestsSHA3Digest 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoDigestsSHA3Digest

#if !defined (OrgBouncycastleCryptoDigestsSHA3Digest_) && (INCLUDE_ALL_OrgBouncycastleCryptoDigestsSHA3Digest || defined(INCLUDE_OrgBouncycastleCryptoDigestsSHA3Digest))
#define OrgBouncycastleCryptoDigestsSHA3Digest_

#define RESTRICT_OrgBouncycastleCryptoDigestsKeccakDigest 1
#define INCLUDE_OrgBouncycastleCryptoDigestsKeccakDigest 1
#include "org/bouncycastle/crypto/digests/KeccakDigest.h"

@class IOSByteArray;

/*!
 @brief implementation of SHA-3 based on following KeccakNISTInterface.c from https://keccak.noekeon.org/
 <p>
  Following the naming conventions used in the C source code to enable easy review of the implementation.
 */
@interface OrgBouncycastleCryptoDigestsSHA3Digest : OrgBouncycastleCryptoDigestsKeccakDigest

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithInt:(jint)bitLength;

- (instancetype)initWithOrgBouncycastleCryptoDigestsSHA3Digest:(OrgBouncycastleCryptoDigestsSHA3Digest *)source;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (NSString *)getAlgorithmName;

#pragma mark Protected

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff
                    withByte:(jbyte)partialByte
                     withInt:(jint)partialBits;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgBouncycastleCryptoDigestsKeccakDigest:(OrgBouncycastleCryptoDigestsKeccakDigest *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCryptoDigestsSHA3Digest)

FOUNDATION_EXPORT void OrgBouncycastleCryptoDigestsSHA3Digest_init(OrgBouncycastleCryptoDigestsSHA3Digest *self);

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsSHA3Digest *new_OrgBouncycastleCryptoDigestsSHA3Digest_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsSHA3Digest *create_OrgBouncycastleCryptoDigestsSHA3Digest_init(void);

FOUNDATION_EXPORT void OrgBouncycastleCryptoDigestsSHA3Digest_initWithInt_(OrgBouncycastleCryptoDigestsSHA3Digest *self, jint bitLength);

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsSHA3Digest *new_OrgBouncycastleCryptoDigestsSHA3Digest_initWithInt_(jint bitLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsSHA3Digest *create_OrgBouncycastleCryptoDigestsSHA3Digest_initWithInt_(jint bitLength);

FOUNDATION_EXPORT void OrgBouncycastleCryptoDigestsSHA3Digest_initWithOrgBouncycastleCryptoDigestsSHA3Digest_(OrgBouncycastleCryptoDigestsSHA3Digest *self, OrgBouncycastleCryptoDigestsSHA3Digest *source);

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsSHA3Digest *new_OrgBouncycastleCryptoDigestsSHA3Digest_initWithOrgBouncycastleCryptoDigestsSHA3Digest_(OrgBouncycastleCryptoDigestsSHA3Digest *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsSHA3Digest *create_OrgBouncycastleCryptoDigestsSHA3Digest_initWithOrgBouncycastleCryptoDigestsSHA3Digest_(OrgBouncycastleCryptoDigestsSHA3Digest *source);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoDigestsSHA3Digest)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoDigestsSHA3Digest")
