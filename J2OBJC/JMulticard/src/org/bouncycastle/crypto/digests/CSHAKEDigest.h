//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/digests/CSHAKEDigest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoDigestsCSHAKEDigest")
#ifdef RESTRICT_OrgBouncycastleCryptoDigestsCSHAKEDigest
#define INCLUDE_ALL_OrgBouncycastleCryptoDigestsCSHAKEDigest 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoDigestsCSHAKEDigest 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoDigestsCSHAKEDigest

#if !defined (OrgBouncycastleCryptoDigestsCSHAKEDigest_) && (INCLUDE_ALL_OrgBouncycastleCryptoDigestsCSHAKEDigest || defined(INCLUDE_OrgBouncycastleCryptoDigestsCSHAKEDigest))
#define OrgBouncycastleCryptoDigestsCSHAKEDigest_

#define RESTRICT_OrgBouncycastleCryptoDigestsSHAKEDigest 1
#define INCLUDE_OrgBouncycastleCryptoDigestsSHAKEDigest 1
#include "org/bouncycastle/crypto/digests/SHAKEDigest.h"

@class IOSByteArray;

/*!
 @brief Customizable SHAKE function.
 */
@interface OrgBouncycastleCryptoDigestsCSHAKEDigest : OrgBouncycastleCryptoDigestsSHAKEDigest

#pragma mark Public

/*!
 @brief Base constructor.
 @param bitLength security strength (in bits) of the underlying SHAKE function, 128 or 256.
 @param N the function name string, note this is reserved for use by NIST. Avoid using it if not required.
 @param S the customization string - available for local use.
 */
- (instancetype)initWithInt:(jint)bitLength
              withByteArray:(IOSByteArray *)N
              withByteArray:(IOSByteArray *)S;

- (jint)doOutputWithByteArray:(IOSByteArray *)outArg
                      withInt:(jint)outOff
                      withInt:(jint)outLen;

- (NSString *)getAlgorithmName;

- (void)reset;

#pragma mark Package-Private

- (instancetype)initWithOrgBouncycastleCryptoDigestsCSHAKEDigest:(OrgBouncycastleCryptoDigestsCSHAKEDigest *)source;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

- (instancetype)initWithOrgBouncycastleCryptoDigestsSHAKEDigest:(OrgBouncycastleCryptoDigestsSHAKEDigest *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleCryptoDigestsCSHAKEDigest)

FOUNDATION_EXPORT void OrgBouncycastleCryptoDigestsCSHAKEDigest_initWithInt_withByteArray_withByteArray_(OrgBouncycastleCryptoDigestsCSHAKEDigest *self, jint bitLength, IOSByteArray *N, IOSByteArray *S);

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsCSHAKEDigest *new_OrgBouncycastleCryptoDigestsCSHAKEDigest_initWithInt_withByteArray_withByteArray_(jint bitLength, IOSByteArray *N, IOSByteArray *S) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsCSHAKEDigest *create_OrgBouncycastleCryptoDigestsCSHAKEDigest_initWithInt_withByteArray_withByteArray_(jint bitLength, IOSByteArray *N, IOSByteArray *S);

FOUNDATION_EXPORT void OrgBouncycastleCryptoDigestsCSHAKEDigest_initWithOrgBouncycastleCryptoDigestsCSHAKEDigest_(OrgBouncycastleCryptoDigestsCSHAKEDigest *self, OrgBouncycastleCryptoDigestsCSHAKEDigest *source);

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsCSHAKEDigest *new_OrgBouncycastleCryptoDigestsCSHAKEDigest_initWithOrgBouncycastleCryptoDigestsCSHAKEDigest_(OrgBouncycastleCryptoDigestsCSHAKEDigest *source) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoDigestsCSHAKEDigest *create_OrgBouncycastleCryptoDigestsCSHAKEDigest_initWithOrgBouncycastleCryptoDigestsCSHAKEDigest_(OrgBouncycastleCryptoDigestsCSHAKEDigest *source);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoDigestsCSHAKEDigest)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoDigestsCSHAKEDigest")
