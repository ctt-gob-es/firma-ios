//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/prng/DigestRandomGenerator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoPrngDigestRandomGenerator")
#ifdef RESTRICT_OrgBouncycastleCryptoPrngDigestRandomGenerator
#define INCLUDE_ALL_OrgBouncycastleCryptoPrngDigestRandomGenerator 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoPrngDigestRandomGenerator 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoPrngDigestRandomGenerator

#if !defined (OrgBouncycastleCryptoPrngDigestRandomGenerator_) && (INCLUDE_ALL_OrgBouncycastleCryptoPrngDigestRandomGenerator || defined(INCLUDE_OrgBouncycastleCryptoPrngDigestRandomGenerator))
#define OrgBouncycastleCryptoPrngDigestRandomGenerator_

#define RESTRICT_OrgBouncycastleCryptoPrngRandomGenerator 1
#define INCLUDE_OrgBouncycastleCryptoPrngRandomGenerator 1
#include "org/bouncycastle/crypto/prng/RandomGenerator.h"

@class IOSByteArray;
@protocol OrgBouncycastleCryptoDigest;

/*!
 @brief Random generation based on the digest with counter.Calling addSeedMaterial will
  always increase the entropy of the hash.
 <p>
  Internal access to the digest is synchronized so a single one of these can be shared. 
 </p>
 */
@interface OrgBouncycastleCryptoPrngDigestRandomGenerator : NSObject < OrgBouncycastleCryptoPrngRandomGenerator >

#pragma mark Public

- (instancetype)initWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)digest;

- (void)addSeedMaterialWithByteArray:(IOSByteArray *)inSeed;

- (void)addSeedMaterialWithLong:(jlong)rSeed;

- (void)nextBytesWithByteArray:(IOSByteArray *)bytes;

- (void)nextBytesWithByteArray:(IOSByteArray *)bytes
                       withInt:(jint)start
                       withInt:(jint)len;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCryptoPrngDigestRandomGenerator)

FOUNDATION_EXPORT void OrgBouncycastleCryptoPrngDigestRandomGenerator_initWithOrgBouncycastleCryptoDigest_(OrgBouncycastleCryptoPrngDigestRandomGenerator *self, id<OrgBouncycastleCryptoDigest> digest);

FOUNDATION_EXPORT OrgBouncycastleCryptoPrngDigestRandomGenerator *new_OrgBouncycastleCryptoPrngDigestRandomGenerator_initWithOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> digest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoPrngDigestRandomGenerator *create_OrgBouncycastleCryptoPrngDigestRandomGenerator_initWithOrgBouncycastleCryptoDigest_(id<OrgBouncycastleCryptoDigest> digest);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoPrngDigestRandomGenerator)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoPrngDigestRandomGenerator")
