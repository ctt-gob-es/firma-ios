//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/DefaultMultiBlockCipher.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/bouncycastle/crypto/DefaultMultiBlockCipher.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/DefaultMultiBlockCipher must be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/DefaultMultiBlockCipher.java"


#line 3
@implementation OrgBouncycastleCryptoDefaultMultiBlockCipher

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgBouncycastleCryptoDefaultMultiBlockCipher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 10
- (jint)getMultiBlockSize {
  
#line 12
  return [self getBlockSize];
}


#line 15
- (jint)processBlocksWithByteArray:(IOSByteArray *)inArg
                           withInt:(jint)inOff
                           withInt:(jint)blockCount
                     withByteArray:(IOSByteArray *)outArg
                           withInt:(jint)outOff {
  
#line 21
  jint resultLen = 0;
  jint blockSize = [self getMultiBlockSize];
  
#line 24
  for (jint i = 0; i != blockCount; i++) {
    
#line 26
    resultLen += [self processBlockWithByteArray:inArg withInt:inOff withByteArray:outArg withInt:outOff + resultLen];
    
#line 28
    inOff += blockSize;
  }
  
#line 31
  return resultLen;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMultiBlockSize);
  methods[2].selector = @selector(processBlocksWithByteArray:withInt:withInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "processBlocks", "[BII[BI", "LOrgBouncycastleCryptoDataLengthException;LJavaLangIllegalStateException;" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoDefaultMultiBlockCipher = { "DefaultMultiBlockCipher", "org.bouncycastle.crypto", ptrTable, methods, NULL, 7, 0x401, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoDefaultMultiBlockCipher;
}

@end


#line 6
void OrgBouncycastleCryptoDefaultMultiBlockCipher_init(OrgBouncycastleCryptoDefaultMultiBlockCipher *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoDefaultMultiBlockCipher)
