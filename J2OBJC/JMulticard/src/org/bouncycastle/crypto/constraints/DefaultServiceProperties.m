//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/constraints/DefaultServiceProperties.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/bouncycastle/crypto/CryptoServicePurpose.h"
#include "org/bouncycastle/crypto/constraints/DefaultServiceProperties.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/constraints/DefaultServiceProperties must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoConstraintsDefaultServiceProperties () {
 @public
  NSString *algorithm_;
  jint bitsOfSecurity_;
  id params_;
  OrgBouncycastleCryptoCryptoServicePurpose *purpose_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoConstraintsDefaultServiceProperties, algorithm_, NSString *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoConstraintsDefaultServiceProperties, params_, id)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoConstraintsDefaultServiceProperties, purpose_, OrgBouncycastleCryptoCryptoServicePurpose *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/constraints/DefaultServiceProperties.java"


#line 6
@implementation OrgBouncycastleCryptoConstraintsDefaultServiceProperties


#line 14
- (instancetype)initWithNSString:(NSString *)algorithm
                         withInt:(jint)bitsOfSecurity {
  OrgBouncycastleCryptoConstraintsDefaultServiceProperties_initWithNSString_withInt_(self, algorithm, bitsOfSecurity);
  return self;
}


#line 19
- (instancetype)initWithNSString:(NSString *)algorithm
                         withInt:(jint)bitsOfSecurity
                          withId:(id)params {
  OrgBouncycastleCryptoConstraintsDefaultServiceProperties_initWithNSString_withInt_withId_(self, algorithm, bitsOfSecurity, params);
  return self;
}


#line 24
- (instancetype)initWithNSString:(NSString *)algorithm
                         withInt:(jint)bitsOfSecurity
                          withId:(id)params
withOrgBouncycastleCryptoCryptoServicePurpose:(OrgBouncycastleCryptoCryptoServicePurpose *)purpose {
  OrgBouncycastleCryptoConstraintsDefaultServiceProperties_initWithNSString_withInt_withId_withOrgBouncycastleCryptoCryptoServicePurpose_(self, algorithm, bitsOfSecurity, params, purpose);
  return self;
}


#line 36
- (jint)bitsOfSecurity {
  
#line 39
  return bitsOfSecurity_;
}

- (NSString *)getServiceName {
  
#line 45
  return algorithm_;
}

- (OrgBouncycastleCryptoCryptoServicePurpose *)getPurpose {
  
#line 51
  return purpose_;
}

- (id)getParams {
  
#line 57
  return params_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoCryptoServicePurpose;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withInt:);
  methods[1].selector = @selector(initWithNSString:withInt:withId:);
  methods[2].selector = @selector(initWithNSString:withInt:withId:withOrgBouncycastleCryptoCryptoServicePurpose:);
  methods[3].selector = @selector(bitsOfSecurity);
  methods[4].selector = @selector(getServiceName);
  methods[5].selector = @selector(getPurpose);
  methods[6].selector = @selector(getParams);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "algorithm_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bitsOfSecurity_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "params_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "purpose_", "LOrgBouncycastleCryptoCryptoServicePurpose;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;I", "LNSString;ILNSObject;", "LNSString;ILNSObject;LOrgBouncycastleCryptoCryptoServicePurpose;" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoConstraintsDefaultServiceProperties = { "DefaultServiceProperties", "org.bouncycastle.crypto.constraints", ptrTable, methods, fields, 7, 0x1, 7, 4, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoConstraintsDefaultServiceProperties;
}

@end


#line 14
void OrgBouncycastleCryptoConstraintsDefaultServiceProperties_initWithNSString_withInt_(OrgBouncycastleCryptoConstraintsDefaultServiceProperties *self, NSString *algorithm, jint bitsOfSecurity) {
  OrgBouncycastleCryptoConstraintsDefaultServiceProperties_initWithNSString_withInt_withId_withOrgBouncycastleCryptoCryptoServicePurpose_(self,
#line 16
  algorithm, bitsOfSecurity, nil, JreLoadEnum(OrgBouncycastleCryptoCryptoServicePurpose, ANY));
}


#line 14
OrgBouncycastleCryptoConstraintsDefaultServiceProperties *new_OrgBouncycastleCryptoConstraintsDefaultServiceProperties_initWithNSString_withInt_(NSString *algorithm, jint bitsOfSecurity) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoConstraintsDefaultServiceProperties, initWithNSString_withInt_, algorithm, bitsOfSecurity)
}


#line 14
OrgBouncycastleCryptoConstraintsDefaultServiceProperties *create_OrgBouncycastleCryptoConstraintsDefaultServiceProperties_initWithNSString_withInt_(NSString *algorithm, jint bitsOfSecurity) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoConstraintsDefaultServiceProperties, initWithNSString_withInt_, algorithm, bitsOfSecurity)
}


#line 19
void OrgBouncycastleCryptoConstraintsDefaultServiceProperties_initWithNSString_withInt_withId_(OrgBouncycastleCryptoConstraintsDefaultServiceProperties *self, NSString *algorithm, jint bitsOfSecurity, id params) {
  OrgBouncycastleCryptoConstraintsDefaultServiceProperties_initWithNSString_withInt_withId_withOrgBouncycastleCryptoCryptoServicePurpose_(self,
#line 21
  algorithm, bitsOfSecurity, params, JreLoadEnum(OrgBouncycastleCryptoCryptoServicePurpose, ANY));
}


#line 19
OrgBouncycastleCryptoConstraintsDefaultServiceProperties *new_OrgBouncycastleCryptoConstraintsDefaultServiceProperties_initWithNSString_withInt_withId_(NSString *algorithm, jint bitsOfSecurity, id params) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoConstraintsDefaultServiceProperties, initWithNSString_withInt_withId_, algorithm, bitsOfSecurity, params)
}


#line 19
OrgBouncycastleCryptoConstraintsDefaultServiceProperties *create_OrgBouncycastleCryptoConstraintsDefaultServiceProperties_initWithNSString_withInt_withId_(NSString *algorithm, jint bitsOfSecurity, id params) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoConstraintsDefaultServiceProperties, initWithNSString_withInt_withId_, algorithm, bitsOfSecurity, params)
}


#line 24
void OrgBouncycastleCryptoConstraintsDefaultServiceProperties_initWithNSString_withInt_withId_withOrgBouncycastleCryptoCryptoServicePurpose_(OrgBouncycastleCryptoConstraintsDefaultServiceProperties *self, NSString *algorithm, jint bitsOfSecurity, id params, OrgBouncycastleCryptoCryptoServicePurpose *purpose) {
  NSObject_init(self);
  self->algorithm_ = algorithm;
  self->bitsOfSecurity_ = bitsOfSecurity;
  self->params_ = params;
  if ([params isKindOfClass:[OrgBouncycastleCryptoCryptoServicePurpose class]]) {
    
#line 31
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"params should not be CryptoServicePurpose");
  }
  self->purpose_ = purpose;
}


#line 24
OrgBouncycastleCryptoConstraintsDefaultServiceProperties *new_OrgBouncycastleCryptoConstraintsDefaultServiceProperties_initWithNSString_withInt_withId_withOrgBouncycastleCryptoCryptoServicePurpose_(NSString *algorithm, jint bitsOfSecurity, id params, OrgBouncycastleCryptoCryptoServicePurpose *purpose) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoConstraintsDefaultServiceProperties, initWithNSString_withInt_withId_withOrgBouncycastleCryptoCryptoServicePurpose_, algorithm, bitsOfSecurity, params, purpose)
}


#line 24
OrgBouncycastleCryptoConstraintsDefaultServiceProperties *create_OrgBouncycastleCryptoConstraintsDefaultServiceProperties_initWithNSString_withInt_withId_withOrgBouncycastleCryptoCryptoServicePurpose_(NSString *algorithm, jint bitsOfSecurity, id params, OrgBouncycastleCryptoCryptoServicePurpose *purpose) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoConstraintsDefaultServiceProperties, initWithNSString_withInt_withId_withOrgBouncycastleCryptoCryptoServicePurpose_, algorithm, bitsOfSecurity, params, purpose)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoConstraintsDefaultServiceProperties)
