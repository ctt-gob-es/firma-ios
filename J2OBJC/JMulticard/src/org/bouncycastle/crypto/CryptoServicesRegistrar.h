//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/CryptoServicesRegistrar.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoCryptoServicesRegistrar")
#ifdef RESTRICT_OrgBouncycastleCryptoCryptoServicesRegistrar
#define INCLUDE_ALL_OrgBouncycastleCryptoCryptoServicesRegistrar 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoCryptoServicesRegistrar 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoCryptoServicesRegistrar

#if !defined (OrgBouncycastleCryptoCryptoServicesRegistrar_) && (INCLUDE_ALL_OrgBouncycastleCryptoCryptoServicesRegistrar || defined(INCLUDE_OrgBouncycastleCryptoCryptoServicesRegistrar))
#define OrgBouncycastleCryptoCryptoServicesRegistrar_

@class IOSObjectArray;
@class JavaSecuritySecureRandom;
@class OrgBouncycastleCryptoCryptoServicesRegistrar_Property;
@protocol OrgBouncycastleCryptoCryptoServiceProperties;
@protocol OrgBouncycastleCryptoCryptoServicesConstraints;
@protocol OrgBouncycastleCryptoSecureRandomProvider;

/*!
 @brief Basic registrar class for providing defaults for cryptography services in this module.
 */
@interface OrgBouncycastleCryptoCryptoServicesRegistrar : NSObject

#pragma mark Public

/*!
 @brief Check a service to make sure it meets the current constraints.
 @param cryptoService the service to be checked.
 @throw CryptoServiceConstraintsExceptionif the service violates the current constraints.
 */
+ (void)checkConstraintsWithOrgBouncycastleCryptoCryptoServiceProperties:(id<OrgBouncycastleCryptoCryptoServiceProperties>)cryptoService;

/*!
 @brief Clear the global value for the passed in property.
 @param property the property to be cleared.
 @return an array of T if a value was previously set, null otherwise.
 */
+ (IOSObjectArray *)clearGlobalPropertyWithOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(OrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property;

/*!
 @brief Clear the thread local value for the passed in property.
 @param property the property to be cleared.
 @return an array of T if a value was previously set, null otherwise.
 */
+ (IOSObjectArray *)clearThreadPropertyWithOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(OrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property;

/*!
 @brief Return the default value for a particular property if one exists.The look up is done on the thread's local
  configuration first and then on the global configuration in no local configuration exists.
 @param property the property to look up.
 @return null if the property is not set, the default value otherwise,
 */
+ (id)getPropertyWithOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(OrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property;

/*!
 @brief Return the default source of randomness.
 @return the default SecureRandom
 */
+ (JavaSecuritySecureRandom *)getSecureRandom;

/*!
 @brief Return either the passed-in SecureRandom, or if it is null, then the default source of randomness.
 @param secureRandom the SecureRandom to use if it is not null.
 @return the SecureRandom parameter if it is not null, or else the default SecureRandom
 */
+ (JavaSecuritySecureRandom *)getSecureRandomWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

/*!
 @brief Return the current algorithm/services constraints.
 @return the algorithm/services constraints.
 */
+ (id<OrgBouncycastleCryptoCryptoServicesConstraints>)getServicesConstraints;

/*!
 @brief Return an array representing the current values for a sized property such as DH_DEFAULT_PARAMS or
  DSA_DEFAULT_PARAMS.
 @param property the name of the property to look up.
 @return null if the property is not set, an array of the current values otherwise.
 */
+ (IOSObjectArray *)getSizedPropertyWithOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(OrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property;

/*!
 @brief Return the value for a specific size for a sized property such as DH_DEFAULT_PARAMS or
  DSA_DEFAULT_PARAMS.
 @param property the name of the property to look up.
 @param size the size (in bits) of the defining value in the property type.
 @return the current value for the size, null if there is no value set,
 */
+ (id)getSizedPropertyWithOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(OrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property
                                                                        withInt:(jint)size;

/*!
 @brief Set the value of the the passed in property globally in the JVM.More than
  one value can be passed in for a sized property.
 If more than one value is provided the
  first value in the argument list becomes the default value.
 @param property the name of the property to set.
 @param propertyValue the values to assign to the property.
 */
+ (void)setGlobalPropertyWithOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(OrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property
                                                                 withNSObjectArray:(IOSObjectArray *)propertyValue;

/*!
 @brief Set a default secure random to be used where none is otherwise provided.
 @param secureRandom the SecureRandom to use as the default.
 */
+ (void)setSecureRandomWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

/*!
 @brief Set a default secure random provider to be used where none is otherwise provided.
 @param secureRandomProvider a provider SecureRandom to use when a default SecureRandom is requested.
 */
+ (void)setSecureRandomProviderWithOrgBouncycastleCryptoSecureRandomProvider:(id<OrgBouncycastleCryptoSecureRandomProvider>)secureRandomProvider;

/*!
 @brief Set the current algorithm constraints.
 */
+ (void)setServicesConstraintsWithOrgBouncycastleCryptoCryptoServicesConstraints:(id<OrgBouncycastleCryptoCryptoServicesConstraints>)constraints;

/*!
 @brief Set the value of the the passed in property on the current thread only.More than
  one value can be passed in for a sized property.
 If more than one value is provided the
  first value in the argument list becomes the default value.
 @param property the name of the property to set.
 @param propertyValue the values to assign to the property.
 */
+ (void)setThreadPropertyWithOrgBouncycastleCryptoCryptoServicesRegistrar_Property:(OrgBouncycastleCryptoCryptoServicesRegistrar_Property *)property
                                                                 withNSObjectArray:(IOSObjectArray *)propertyValue;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleCryptoCryptoServicesRegistrar)

FOUNDATION_EXPORT JavaSecuritySecureRandom *OrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom(void);

FOUNDATION_EXPORT JavaSecuritySecureRandom *OrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandomWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT void OrgBouncycastleCryptoCryptoServicesRegistrar_setSecureRandomWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT void OrgBouncycastleCryptoCryptoServicesRegistrar_setSecureRandomProviderWithOrgBouncycastleCryptoSecureRandomProvider_(id<OrgBouncycastleCryptoSecureRandomProvider> secureRandomProvider);

FOUNDATION_EXPORT id<OrgBouncycastleCryptoCryptoServicesConstraints> OrgBouncycastleCryptoCryptoServicesRegistrar_getServicesConstraints(void);

FOUNDATION_EXPORT void OrgBouncycastleCryptoCryptoServicesRegistrar_checkConstraintsWithOrgBouncycastleCryptoCryptoServiceProperties_(id<OrgBouncycastleCryptoCryptoServiceProperties> cryptoService);

FOUNDATION_EXPORT void OrgBouncycastleCryptoCryptoServicesRegistrar_setServicesConstraintsWithOrgBouncycastleCryptoCryptoServicesConstraints_(id<OrgBouncycastleCryptoCryptoServicesConstraints> constraints);

FOUNDATION_EXPORT id OrgBouncycastleCryptoCryptoServicesRegistrar_getPropertyWithOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(OrgBouncycastleCryptoCryptoServicesRegistrar_Property *property);

FOUNDATION_EXPORT IOSObjectArray *OrgBouncycastleCryptoCryptoServicesRegistrar_getSizedPropertyWithOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(OrgBouncycastleCryptoCryptoServicesRegistrar_Property *property);

FOUNDATION_EXPORT id OrgBouncycastleCryptoCryptoServicesRegistrar_getSizedPropertyWithOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withInt_(OrgBouncycastleCryptoCryptoServicesRegistrar_Property *property, jint size);

FOUNDATION_EXPORT void OrgBouncycastleCryptoCryptoServicesRegistrar_setThreadPropertyWithOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withNSObjectArray_(OrgBouncycastleCryptoCryptoServicesRegistrar_Property *property, IOSObjectArray *propertyValue);

FOUNDATION_EXPORT void OrgBouncycastleCryptoCryptoServicesRegistrar_setGlobalPropertyWithOrgBouncycastleCryptoCryptoServicesRegistrar_Property_withNSObjectArray_(OrgBouncycastleCryptoCryptoServicesRegistrar_Property *property, IOSObjectArray *propertyValue);

FOUNDATION_EXPORT IOSObjectArray *OrgBouncycastleCryptoCryptoServicesRegistrar_clearGlobalPropertyWithOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(OrgBouncycastleCryptoCryptoServicesRegistrar_Property *property);

FOUNDATION_EXPORT IOSObjectArray *OrgBouncycastleCryptoCryptoServicesRegistrar_clearThreadPropertyWithOrgBouncycastleCryptoCryptoServicesRegistrar_Property_(OrgBouncycastleCryptoCryptoServicesRegistrar_Property *property);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoCryptoServicesRegistrar)

#endif

#if !defined (OrgBouncycastleCryptoCryptoServicesRegistrar_Property_) && (INCLUDE_ALL_OrgBouncycastleCryptoCryptoServicesRegistrar || defined(INCLUDE_OrgBouncycastleCryptoCryptoServicesRegistrar_Property))
#define OrgBouncycastleCryptoCryptoServicesRegistrar_Property_

/*!
 @brief Available properties that can be set.
 */
@interface OrgBouncycastleCryptoCryptoServicesRegistrar_Property : NSObject

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleCryptoCryptoServicesRegistrar_Property)

/*!
 @brief The parameters to be used for processing implicitlyCA X9.62 parameters
 */
inline OrgBouncycastleCryptoCryptoServicesRegistrar_Property *OrgBouncycastleCryptoCryptoServicesRegistrar_Property_get_EC_IMPLICITLY_CA(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgBouncycastleCryptoCryptoServicesRegistrar_Property *OrgBouncycastleCryptoCryptoServicesRegistrar_Property_EC_IMPLICITLY_CA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoCryptoServicesRegistrar_Property, EC_IMPLICITLY_CA, OrgBouncycastleCryptoCryptoServicesRegistrar_Property *)

/*!
 @brief The default parameters for a particular size of Diffie-Hellman key.This is a sized property.
 */
inline OrgBouncycastleCryptoCryptoServicesRegistrar_Property *OrgBouncycastleCryptoCryptoServicesRegistrar_Property_get_DH_DEFAULT_PARAMS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgBouncycastleCryptoCryptoServicesRegistrar_Property *OrgBouncycastleCryptoCryptoServicesRegistrar_Property_DH_DEFAULT_PARAMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoCryptoServicesRegistrar_Property, DH_DEFAULT_PARAMS, OrgBouncycastleCryptoCryptoServicesRegistrar_Property *)

/*!
 @brief The default parameters for a particular size of DSA key.This is a sized property.
 */
inline OrgBouncycastleCryptoCryptoServicesRegistrar_Property *OrgBouncycastleCryptoCryptoServicesRegistrar_Property_get_DSA_DEFAULT_PARAMS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgBouncycastleCryptoCryptoServicesRegistrar_Property *OrgBouncycastleCryptoCryptoServicesRegistrar_Property_DSA_DEFAULT_PARAMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoCryptoServicesRegistrar_Property, DSA_DEFAULT_PARAMS, OrgBouncycastleCryptoCryptoServicesRegistrar_Property *)

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoCryptoServicesRegistrar_Property)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoCryptoServicesRegistrar")
