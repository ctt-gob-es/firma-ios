//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/Mac.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoMac")
#ifdef RESTRICT_OrgBouncycastleCryptoMac
#define INCLUDE_ALL_OrgBouncycastleCryptoMac 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoMac 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoMac

#if !defined (OrgBouncycastleCryptoMac_) && (INCLUDE_ALL_OrgBouncycastleCryptoMac || defined(INCLUDE_OrgBouncycastleCryptoMac))
#define OrgBouncycastleCryptoMac_

@class IOSByteArray;
@protocol OrgBouncycastleCryptoCipherParameters;

/*!
 @brief The base interface for implementations of message authentication codes (MACs).
 */
@protocol OrgBouncycastleCryptoMac < JavaObject >

/*!
 @brief Initialise the MAC.
 @param params the key and other data required by the MAC.
 @throw IllegalArgumentExceptionif the params argument is
  inappropriate.
 */
- (void)init__WithOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Return the name of the algorithm the MAC implements.
 @return the name of the algorithm the MAC implements.
 */
- (NSString *)getAlgorithmName;

/*!
 @brief Return the block size for this MAC (in bytes).
 @return the block size for this MAC in bytes.
 */
- (jint)getMacSize;

/*!
 @brief add a single byte to the mac for processing.
 @param inArg the byte to be processed.
 @throw IllegalStateExceptionif the MAC is not initialised.
 */
- (void)updateWithByte:(jbyte)inArg;

/*!
 @param inArg the array containing the input.
 @param inOff the index in the array the data begins at.
 @param len the length of the input starting at inOff.
 @throw IllegalStateExceptionif the MAC is not initialised.
 @throw DataLengthExceptionif there isn't enough data in in.
 */
- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len;

/*!
 @brief Compute the final stage of the MAC writing the output to the out
  parameter.
 <p>
  doFinal leaves the MAC in the same state it was after the last init.
 @param outArg the array the MAC is to be output to.
 @param outOff the offset into the out buffer the output is to start at.
 @throw DataLengthExceptionif there isn't enough space in out.
 @throw IllegalStateExceptionif the MAC is not initialised.
 */
- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

/*!
 @brief Reset the MAC.At the end of resetting the MAC should be in the
  in the same state it was after the last init (if there was one).
 */
- (void)reset;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCryptoMac)

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoMac)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoMac")
