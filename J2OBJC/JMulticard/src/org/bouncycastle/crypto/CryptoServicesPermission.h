//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/CryptoServicesPermission.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoCryptoServicesPermission")
#ifdef RESTRICT_OrgBouncycastleCryptoCryptoServicesPermission
#define INCLUDE_ALL_OrgBouncycastleCryptoCryptoServicesPermission 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoCryptoServicesPermission 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoCryptoServicesPermission

#if !defined (OrgBouncycastleCryptoCryptoServicesPermission_) && (INCLUDE_ALL_OrgBouncycastleCryptoCryptoServicesPermission || defined(INCLUDE_OrgBouncycastleCryptoCryptoServicesPermission))
#define OrgBouncycastleCryptoCryptoServicesPermission_

#define RESTRICT_JavaSecurityPermission 1
#define INCLUDE_JavaSecurityPermission 1
#include "java/security/Permission.h"

/*!
 @brief Permissions that need to be configured if a SecurityManager is used.
 */
@interface OrgBouncycastleCryptoCryptoServicesPermission : JavaSecurityPermission

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)name;

- (jboolean)isEqual:(id)obj;

- (NSString *)getActions;

- (NSUInteger)hash;

- (jboolean)impliesWithJavaSecurityPermission:(JavaSecurityPermission *)permission;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCryptoCryptoServicesPermission)

/*!
 @brief Enable the setting of global configuration properties.This permission implies THREAD_LOCAL_CONFIG
 */
inline NSString *OrgBouncycastleCryptoCryptoServicesPermission_get_GLOBAL_CONFIG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgBouncycastleCryptoCryptoServicesPermission_GLOBAL_CONFIG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoCryptoServicesPermission, GLOBAL_CONFIG, NSString *)

/*!
 @brief Enable the setting of thread local configuration properties.
 */
inline NSString *OrgBouncycastleCryptoCryptoServicesPermission_get_THREAD_LOCAL_CONFIG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgBouncycastleCryptoCryptoServicesPermission_THREAD_LOCAL_CONFIG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoCryptoServicesPermission, THREAD_LOCAL_CONFIG, NSString *)

/*!
 @brief Enable the setting of the default SecureRandom.
 */
inline NSString *OrgBouncycastleCryptoCryptoServicesPermission_get_DEFAULT_RANDOM(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgBouncycastleCryptoCryptoServicesPermission_DEFAULT_RANDOM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoCryptoServicesPermission, DEFAULT_RANDOM, NSString *)

/*!
 @brief Enable the setting of the constraints.
 */
inline NSString *OrgBouncycastleCryptoCryptoServicesPermission_get_CONSTRAINTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgBouncycastleCryptoCryptoServicesPermission_CONSTRAINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoCryptoServicesPermission, CONSTRAINTS, NSString *)

FOUNDATION_EXPORT void OrgBouncycastleCryptoCryptoServicesPermission_initWithNSString_(OrgBouncycastleCryptoCryptoServicesPermission *self, NSString *name);

FOUNDATION_EXPORT OrgBouncycastleCryptoCryptoServicesPermission *new_OrgBouncycastleCryptoCryptoServicesPermission_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoCryptoServicesPermission *create_OrgBouncycastleCryptoCryptoServicesPermission_initWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoCryptoServicesPermission)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoCryptoServicesPermission")
