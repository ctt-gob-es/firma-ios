//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/params/ECKeyGenerationParameters.java
//

#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/KeyGenerationParameters.h"
#include "org/bouncycastle/crypto/params/ECDomainParameters.h"
#include "org/bouncycastle/crypto/params/ECKeyGenerationParameters.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/params/ECKeyGenerationParameters must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoParamsECKeyGenerationParameters () {
 @public
  OrgBouncycastleCryptoParamsECDomainParameters *domainParams_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsECKeyGenerationParameters, domainParams_, OrgBouncycastleCryptoParamsECDomainParameters *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/params/ECKeyGenerationParameters.java"


#line 7
@implementation OrgBouncycastleCryptoParamsECKeyGenerationParameters


#line 12
- (instancetype)initWithOrgBouncycastleCryptoParamsECDomainParameters:(OrgBouncycastleCryptoParamsECDomainParameters *)domainParams
                                         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  OrgBouncycastleCryptoParamsECKeyGenerationParameters_initWithOrgBouncycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_(self, domainParams, random);
  return self;
}


#line 21
- (OrgBouncycastleCryptoParamsECDomainParameters *)getDomainParameters {
  
#line 23
  return domainParams_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsECDomainParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleCryptoParamsECDomainParameters:withJavaSecuritySecureRandom:);
  methods[1].selector = @selector(getDomainParameters);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "domainParams_", "LOrgBouncycastleCryptoParamsECDomainParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleCryptoParamsECDomainParameters;LJavaSecuritySecureRandom;" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoParamsECKeyGenerationParameters = { "ECKeyGenerationParameters", "org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoParamsECKeyGenerationParameters;
}

@end


#line 12
void OrgBouncycastleCryptoParamsECKeyGenerationParameters_initWithOrgBouncycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_(OrgBouncycastleCryptoParamsECKeyGenerationParameters *self, OrgBouncycastleCryptoParamsECDomainParameters *domainParams, JavaSecuritySecureRandom *random) {
  OrgBouncycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(self,
#line 16
  random, [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(domainParams)) getN])) bitLength]);
  
#line 18
  self->domainParams_ = domainParams;
}


#line 12
OrgBouncycastleCryptoParamsECKeyGenerationParameters *new_OrgBouncycastleCryptoParamsECKeyGenerationParameters_initWithOrgBouncycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_(OrgBouncycastleCryptoParamsECDomainParameters *domainParams, JavaSecuritySecureRandom *random) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoParamsECKeyGenerationParameters, initWithOrgBouncycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_, domainParams, random)
}


#line 12
OrgBouncycastleCryptoParamsECKeyGenerationParameters *create_OrgBouncycastleCryptoParamsECKeyGenerationParameters_initWithOrgBouncycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_(OrgBouncycastleCryptoParamsECDomainParameters *domainParams, JavaSecuritySecureRandom *random) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoParamsECKeyGenerationParameters, initWithOrgBouncycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_, domainParams, random)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoParamsECKeyGenerationParameters)
