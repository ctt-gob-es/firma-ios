//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/params/AsymmetricKeyParameter.java
//

#include "J2ObjC_source.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/params/AsymmetricKeyParameter must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/params/AsymmetricKeyParameter.java"


#line 5
@implementation OrgBouncycastleCryptoParamsAsymmetricKeyParameter


#line 10
- (instancetype)initWithBoolean:(jboolean)privateKey {
  OrgBouncycastleCryptoParamsAsymmetricKeyParameter_initWithBoolean_(self, privateKey);
  return self;
}


#line 16
- (jboolean)isPrivate {
  
#line 18
  return privateKey_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithBoolean:);
  methods[1].selector = @selector(isPrivate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "privateKey_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoParamsAsymmetricKeyParameter = { "AsymmetricKeyParameter", "org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoParamsAsymmetricKeyParameter;
}

@end


#line 10
void OrgBouncycastleCryptoParamsAsymmetricKeyParameter_initWithBoolean_(OrgBouncycastleCryptoParamsAsymmetricKeyParameter *self, jboolean privateKey) {
  NSObject_init(self);
  
#line 13
  self->privateKey_ = privateKey;
}


#line 10
OrgBouncycastleCryptoParamsAsymmetricKeyParameter *new_OrgBouncycastleCryptoParamsAsymmetricKeyParameter_initWithBoolean_(jboolean privateKey) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoParamsAsymmetricKeyParameter, initWithBoolean_, privateKey)
}


#line 10
OrgBouncycastleCryptoParamsAsymmetricKeyParameter *create_OrgBouncycastleCryptoParamsAsymmetricKeyParameter_initWithBoolean_(jboolean privateKey) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoParamsAsymmetricKeyParameter, initWithBoolean_, privateKey)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoParamsAsymmetricKeyParameter)
