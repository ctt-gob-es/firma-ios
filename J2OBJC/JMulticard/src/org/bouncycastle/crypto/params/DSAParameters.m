//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/params/DSAParameters.java
//

#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/crypto/params/DSAParameters.h"
#include "org/bouncycastle/crypto/params/DSAValidationParameters.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/params/DSAParameters must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoParamsDSAParameters () {
 @public
  JavaMathBigInteger *g_;
  JavaMathBigInteger *q_;
  JavaMathBigInteger *p_;
  OrgBouncycastleCryptoParamsDSAValidationParameters *validation_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsDSAParameters, g_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsDSAParameters, q_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsDSAParameters, p_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsDSAParameters, validation_, OrgBouncycastleCryptoParamsDSAValidationParameters *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/params/DSAParameters.java"


#line 7
@implementation OrgBouncycastleCryptoParamsDSAParameters


#line 15
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)p
                    withJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)g {
  OrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, p, q, g);
  return self;
}


#line 25
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)p
                    withJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)g
withOrgBouncycastleCryptoParamsDSAValidationParameters:(OrgBouncycastleCryptoParamsDSAValidationParameters *)params {
  OrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleCryptoParamsDSAValidationParameters_(self, p, q, g, params);
  return self;
}


#line 37
- (JavaMathBigInteger *)getP {
  
#line 39
  return p_;
}


#line 42
- (JavaMathBigInteger *)getQ {
  
#line 44
  return q_;
}


#line 47
- (JavaMathBigInteger *)getG {
  
#line 49
  return g_;
}


#line 52
- (OrgBouncycastleCryptoParamsDSAValidationParameters *)getValidationParameters {
  
#line 54
  return validation_;
}


#line 57
- (jboolean)isEqual:(id)obj {
  
#line 61
  if (!([obj isKindOfClass:[OrgBouncycastleCryptoParamsDSAParameters class]])) {
    
#line 63
    return false;
  }
  
#line 66
  OrgBouncycastleCryptoParamsDSAParameters *pm = (OrgBouncycastleCryptoParamsDSAParameters *) cast_chk(obj, [OrgBouncycastleCryptoParamsDSAParameters class]);
  
#line 68
  return ([((JavaMathBigInteger *) nil_chk([((OrgBouncycastleCryptoParamsDSAParameters *) nil_chk(pm)) getP])) isEqual:p_] && [((JavaMathBigInteger *) nil_chk([pm getQ])) isEqual:q_] && [((JavaMathBigInteger *) nil_chk([pm getG])) isEqual:g_]);
}


#line 71
- (NSUInteger)hash {
  
#line 74
  return ((jint) [((JavaMathBigInteger *) nil_chk([self getP])) hash]) ^ ((jint) [((JavaMathBigInteger *) nil_chk([self getQ])) hash]) ^ ((jint) [((JavaMathBigInteger *) nil_chk([self getG])) hash]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsDSAValidationParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[1].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withOrgBouncycastleCryptoParamsDSAValidationParameters:);
  methods[2].selector = @selector(getP);
  methods[3].selector = @selector(getQ);
  methods[4].selector = @selector(getG);
  methods[5].selector = @selector(getValidationParameters);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "g_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "q_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "p_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "validation_", "LOrgBouncycastleCryptoParamsDSAValidationParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LOrgBouncycastleCryptoParamsDSAValidationParameters;", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoParamsDSAParameters = { "DSAParameters", "org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 8, 4, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoParamsDSAParameters;
}

@end


#line 15
void OrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleCryptoParamsDSAParameters *self, JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g) {
  NSObject_init(self);
  
#line 20
  self->g_ = g;
  self->p_ = p;
  self->q_ = q;
}


#line 15
OrgBouncycastleCryptoParamsDSAParameters *new_OrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoParamsDSAParameters, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, p, q, g)
}


#line 15
OrgBouncycastleCryptoParamsDSAParameters *create_OrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoParamsDSAParameters, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, p, q, g)
}


#line 25
void OrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleCryptoParamsDSAValidationParameters_(OrgBouncycastleCryptoParamsDSAParameters *self, JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, OrgBouncycastleCryptoParamsDSAValidationParameters *params) {
  NSObject_init(self);
  
#line 31
  self->g_ = g;
  self->p_ = p;
  self->q_ = q;
  self->validation_ = params;
}


#line 25
OrgBouncycastleCryptoParamsDSAParameters *new_OrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleCryptoParamsDSAValidationParameters_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, OrgBouncycastleCryptoParamsDSAValidationParameters *params) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoParamsDSAParameters, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleCryptoParamsDSAValidationParameters_, p, q, g, params)
}


#line 25
OrgBouncycastleCryptoParamsDSAParameters *create_OrgBouncycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleCryptoParamsDSAValidationParameters_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, OrgBouncycastleCryptoParamsDSAValidationParameters *params) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoParamsDSAParameters, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleCryptoParamsDSAValidationParameters_, p, q, g, params)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoParamsDSAParameters)
