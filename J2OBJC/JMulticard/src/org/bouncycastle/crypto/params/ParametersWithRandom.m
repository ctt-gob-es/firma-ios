//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/params/ParametersWithRandom.java
//

#include "J2ObjC_source.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/CryptoServicesRegistrar.h"
#include "org/bouncycastle/crypto/params/ParametersWithRandom.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/params/ParametersWithRandom must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoParamsParametersWithRandom () {
 @public
  JavaSecuritySecureRandom *random_;
  id<OrgBouncycastleCryptoCipherParameters> parameters_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsParametersWithRandom, random_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsParametersWithRandom, parameters_, id<OrgBouncycastleCryptoCipherParameters>)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/params/ParametersWithRandom.java"


#line 8
@implementation OrgBouncycastleCryptoParamsParametersWithRandom


#line 14
- (instancetype)initWithOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)parameters
                                 withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  OrgBouncycastleCryptoParamsParametersWithRandom_initWithOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(self, parameters, random);
  return self;
}


#line 22
- (instancetype)initWithOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)parameters {
  OrgBouncycastleCryptoParamsParametersWithRandom_initWithOrgBouncycastleCryptoCipherParameters_(self, parameters);
  return self;
}


#line 28
- (JavaSecuritySecureRandom *)getRandom {
  
#line 30
  return random_;
}


#line 33
- (id<OrgBouncycastleCryptoCipherParameters>)getParameters {
  
#line 35
  return parameters_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySecureRandom;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoCipherParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleCryptoCipherParameters:withJavaSecuritySecureRandom:);
  methods[1].selector = @selector(initWithOrgBouncycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getRandom);
  methods[3].selector = @selector(getParameters);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parameters_", "LOrgBouncycastleCryptoCipherParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleCryptoCipherParameters;LJavaSecuritySecureRandom;", "LOrgBouncycastleCryptoCipherParameters;" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoParamsParametersWithRandom = { "ParametersWithRandom", "org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoParamsParametersWithRandom;
}

@end


#line 14
void OrgBouncycastleCryptoParamsParametersWithRandom_initWithOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(OrgBouncycastleCryptoParamsParametersWithRandom *self, id<OrgBouncycastleCryptoCipherParameters> parameters, JavaSecuritySecureRandom *random) {
  NSObject_init(self);
  
#line 18
  self->random_ = OrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandomWithJavaSecuritySecureRandom_(random);
  self->parameters_ = parameters;
}


#line 14
OrgBouncycastleCryptoParamsParametersWithRandom *new_OrgBouncycastleCryptoParamsParametersWithRandom_initWithOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(id<OrgBouncycastleCryptoCipherParameters> parameters, JavaSecuritySecureRandom *random) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoParamsParametersWithRandom, initWithOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_, parameters, random)
}


#line 14
OrgBouncycastleCryptoParamsParametersWithRandom *create_OrgBouncycastleCryptoParamsParametersWithRandom_initWithOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(id<OrgBouncycastleCryptoCipherParameters> parameters, JavaSecuritySecureRandom *random) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoParamsParametersWithRandom, initWithOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_, parameters, random)
}


#line 22
void OrgBouncycastleCryptoParamsParametersWithRandom_initWithOrgBouncycastleCryptoCipherParameters_(OrgBouncycastleCryptoParamsParametersWithRandom *self, id<OrgBouncycastleCryptoCipherParameters> parameters) {
  OrgBouncycastleCryptoParamsParametersWithRandom_initWithOrgBouncycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(self,
#line 25
  parameters, nil);
}


#line 22
OrgBouncycastleCryptoParamsParametersWithRandom *new_OrgBouncycastleCryptoParamsParametersWithRandom_initWithOrgBouncycastleCryptoCipherParameters_(id<OrgBouncycastleCryptoCipherParameters> parameters) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoParamsParametersWithRandom, initWithOrgBouncycastleCryptoCipherParameters_, parameters)
}


#line 22
OrgBouncycastleCryptoParamsParametersWithRandom *create_OrgBouncycastleCryptoParamsParametersWithRandom_initWithOrgBouncycastleCryptoCipherParameters_(id<OrgBouncycastleCryptoCipherParameters> parameters) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoParamsParametersWithRandom, initWithOrgBouncycastleCryptoCipherParameters_, parameters)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoParamsParametersWithRandom)
