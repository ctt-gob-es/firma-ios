//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/params/ECDomainParameters.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/asn1/x9/X9ECParameters.h"
#include "org/bouncycastle/crypto/params/ECDomainParameters.h"
#include "org/bouncycastle/math/ec/ECAlgorithms.h"
#include "org/bouncycastle/math/ec/ECConstants.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/BigIntegers.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/params/ECDomainParameters must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoParamsECDomainParameters () {
 @public
  OrgBouncycastleMathEcECCurve *curve_;
  IOSByteArray *seed_;
  OrgBouncycastleMathEcECPoint *G_;
  JavaMathBigInteger *n_;
  JavaMathBigInteger *h_;
  JavaMathBigInteger *hInv_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsECDomainParameters, curve_, OrgBouncycastleMathEcECCurve *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsECDomainParameters, seed_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsECDomainParameters, G_, OrgBouncycastleMathEcECPoint *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsECDomainParameters, n_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsECDomainParameters, h_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsECDomainParameters, hInv_, JavaMathBigInteger *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/params/ECDomainParameters.java"


#line 13
@implementation OrgBouncycastleCryptoParamsECDomainParameters


#line 24
- (instancetype)initWithOrgBouncycastleAsn1X9X9ECParameters:(OrgBouncycastleAsn1X9X9ECParameters *)x9 {
  OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleAsn1X9X9ECParameters_(self, x9);
  return self;
}

- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve
                    withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)G
                              withJavaMathBigInteger:(JavaMathBigInteger *)n {
  OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(self, curve, G, n);
  return self;
}


#line 37
- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve
                    withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)G
                              withJavaMathBigInteger:(JavaMathBigInteger *)n
                              withJavaMathBigInteger:(JavaMathBigInteger *)h {
  OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(self, curve, G, n, h);
  return self;
}


#line 46
- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve
                    withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)G
                              withJavaMathBigInteger:(JavaMathBigInteger *)n
                              withJavaMathBigInteger:(JavaMathBigInteger *)h
                                       withByteArray:(IOSByteArray *)seed {
  OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(self, curve, G, n, h, seed);
  return self;
}


#line 70
- (OrgBouncycastleMathEcECCurve *)getCurve {
  
#line 72
  return curve_;
}


#line 75
- (OrgBouncycastleMathEcECPoint *)getG {
  
#line 77
  return G_;
}


#line 80
- (JavaMathBigInteger *)getN {
  
#line 82
  return n_;
}


#line 85
- (JavaMathBigInteger *)getH {
  
#line 87
  return h_;
}


#line 90
- (JavaMathBigInteger *)getHInv {
  @synchronized(self) {
    if (hInv_ == nil) {
      
#line 94
      hInv_ = OrgBouncycastleUtilBigIntegers_modOddInverseVarWithJavaMathBigInteger_withJavaMathBigInteger_(n_, h_);
    }
    return JreRetainedLocalValue(hInv_);
  }
}


#line 99
- (IOSByteArray *)getSeed {
  
#line 101
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(seed_);
}


#line 104
- (jboolean)isEqual:(id)obj {
  
#line 108
  if (JreObjectEqualsEquals(self, obj)) {
    
#line 110
    return true;
  }
  
#line 113
  if (!([obj isKindOfClass:[OrgBouncycastleCryptoParamsECDomainParameters class]])) {
    
#line 115
    return false;
  }
  
#line 118
  OrgBouncycastleCryptoParamsECDomainParameters *other = (OrgBouncycastleCryptoParamsECDomainParameters *) cast_chk(obj, [OrgBouncycastleCryptoParamsECDomainParameters class]);
  
#line 120
  return [((OrgBouncycastleMathEcECCurve *) nil_chk(self->curve_)) equalsWithOrgBouncycastleMathEcECCurve:((OrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(other))->curve_] &&
#line 121
  [((OrgBouncycastleMathEcECPoint *) nil_chk(self->G_)) equalsWithOrgBouncycastleMathEcECPoint:other->G_] &&
#line 122
  [((JavaMathBigInteger *) nil_chk(self->n_)) isEqual:other->n_];
}


#line 125
- (NSUInteger)hash {
  
#line 129
  jint hc = 4;
  hc *= 257;
  hc ^= ((jint) [((OrgBouncycastleMathEcECCurve *) nil_chk(curve_)) hash]);
  hc *= 257;
  hc ^= ((jint) [((OrgBouncycastleMathEcECPoint *) nil_chk(G_)) hash]);
  hc *= 257;
  hc ^= ((jint) [((JavaMathBigInteger *) nil_chk(n_)) hash]);
  return hc;
}


#line 139
- (JavaMathBigInteger *)validatePrivateScalarWithJavaMathBigInteger:(JavaMathBigInteger *)d {
  
#line 141
  if (nil == d) {
    
#line 143
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Scalar cannot be null");
  }
  
#line 146
  if ([d compareToWithId:JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)] < 0 || ([d compareToWithId:[self getN]] >= 0)) {
    
#line 148
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Scalar is not in the interval [1, n - 1]");
  }
  
#line 151
  return d;
}


#line 154
- (OrgBouncycastleMathEcECPoint *)validatePublicPointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)q {
  
#line 156
  return OrgBouncycastleCryptoParamsECDomainParameters_validatePublicPointWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_([self getCurve], q);
}


#line 159
+ (OrgBouncycastleMathEcECPoint *)validatePublicPointWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)c
                                                     withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)q {
  return OrgBouncycastleCryptoParamsECDomainParameters_validatePublicPointWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(c, q);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECCurve;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x8, 9, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleAsn1X9X9ECParameters:);
  methods[1].selector = @selector(initWithOrgBouncycastleMathEcECCurve:withOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[2].selector = @selector(initWithOrgBouncycastleMathEcECCurve:withOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[3].selector = @selector(initWithOrgBouncycastleMathEcECCurve:withOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:withJavaMathBigInteger:withByteArray:);
  methods[4].selector = @selector(getCurve);
  methods[5].selector = @selector(getG);
  methods[6].selector = @selector(getN);
  methods[7].selector = @selector(getH);
  methods[8].selector = @selector(getHInv);
  methods[9].selector = @selector(getSeed);
  methods[10].selector = @selector(isEqual:);
  methods[11].selector = @selector(hash);
  methods[12].selector = @selector(validatePrivateScalarWithJavaMathBigInteger:);
  methods[13].selector = @selector(validatePublicPointWithOrgBouncycastleMathEcECPoint:);
  methods[14].selector = @selector(validatePublicPointWithOrgBouncycastleMathEcECCurve:withOrgBouncycastleMathEcECPoint:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "curve_", "LOrgBouncycastleMathEcECCurve;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "seed_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "G_", "LOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "n_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "h_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hInv_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleAsn1X9X9ECParameters;", "LOrgBouncycastleMathEcECCurve;LOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;", "LOrgBouncycastleMathEcECCurve;LOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;LJavaMathBigInteger;", "LOrgBouncycastleMathEcECCurve;LOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;LJavaMathBigInteger;[B", "equals", "LNSObject;", "hashCode", "validatePrivateScalar", "LJavaMathBigInteger;", "validatePublicPoint", "LOrgBouncycastleMathEcECPoint;", "LOrgBouncycastleMathEcECCurve;LOrgBouncycastleMathEcECPoint;" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoParamsECDomainParameters = { "ECDomainParameters", "org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 15, 6, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoParamsECDomainParameters;
}

@end


#line 24
void OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleAsn1X9X9ECParameters_(OrgBouncycastleCryptoParamsECDomainParameters *self, OrgBouncycastleAsn1X9X9ECParameters *x9) {
  OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(self,
#line 26
  [((OrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getCurve], [x9 getG], [x9 getN], [x9 getH], [x9 getSeed]);
}


#line 24
OrgBouncycastleCryptoParamsECDomainParameters *new_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleAsn1X9X9ECParameters_(OrgBouncycastleAsn1X9X9ECParameters *x9) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoParamsECDomainParameters, initWithOrgBouncycastleAsn1X9X9ECParameters_, x9)
}


#line 24
OrgBouncycastleCryptoParamsECDomainParameters *create_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleAsn1X9X9ECParameters_(OrgBouncycastleAsn1X9X9ECParameters *x9) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoParamsECDomainParameters, initWithOrgBouncycastleAsn1X9X9ECParameters_, x9)
}


#line 29
void OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(OrgBouncycastleCryptoParamsECDomainParameters *self, OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n) {
  OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(self,
#line 34
  curve, G, n, JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE), nil);
}


#line 29
OrgBouncycastleCryptoParamsECDomainParameters *new_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoParamsECDomainParameters, initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_, curve, G, n)
}


#line 29
OrgBouncycastleCryptoParamsECDomainParameters *create_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoParamsECDomainParameters, initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_, curve, G, n)
}


#line 37
void OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleCryptoParamsECDomainParameters *self, OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n, JavaMathBigInteger *h) {
  OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(self,
#line 43
  curve, G, n, h, nil);
}


#line 37
OrgBouncycastleCryptoParamsECDomainParameters *new_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n, JavaMathBigInteger *h) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoParamsECDomainParameters, initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_, curve, G, n, h)
}


#line 37
OrgBouncycastleCryptoParamsECDomainParameters *create_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n, JavaMathBigInteger *h) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoParamsECDomainParameters, initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_, curve, G, n, h)
}


#line 46
void OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(OrgBouncycastleCryptoParamsECDomainParameters *self, OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n, JavaMathBigInteger *h, IOSByteArray *seed) {
  NSObject_init(self);
  self->hInv_ =
#line 22
  nil;
  
#line 53
  if (curve == nil) {
    
#line 55
    @throw new_JavaLangNullPointerException_initWithNSString_(@"curve");
  }
  if (n == nil) {
    
#line 59
    @throw new_JavaLangNullPointerException_initWithNSString_(@"n");
  }
  
#line 63
  self->curve_ = curve;
  self->G_ = OrgBouncycastleCryptoParamsECDomainParameters_validatePublicPointWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(curve, G);
  self->n_ = n;
  self->h_ = h;
  self->seed_ = OrgBouncycastleUtilArrays_cloneWithByteArray_(seed);
}


#line 46
OrgBouncycastleCryptoParamsECDomainParameters *new_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n, JavaMathBigInteger *h, IOSByteArray *seed) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoParamsECDomainParameters, initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_, curve, G, n, h, seed)
}


#line 46
OrgBouncycastleCryptoParamsECDomainParameters *create_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECPoint *G, JavaMathBigInteger *n, JavaMathBigInteger *h, IOSByteArray *seed) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoParamsECDomainParameters, initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_, curve, G, n, h, seed)
}


#line 159
OrgBouncycastleMathEcECPoint *OrgBouncycastleCryptoParamsECDomainParameters_validatePublicPointWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECCurve *c, OrgBouncycastleMathEcECPoint *q) {
  OrgBouncycastleCryptoParamsECDomainParameters_initialize();
  if (nil == q) {
    
#line 163
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Point cannot be null");
  }
  
#line 166
  q = [((OrgBouncycastleMathEcECPoint *) nil_chk(OrgBouncycastleMathEcECAlgorithms_importPointWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(c, q))) normalize];
  
#line 168
  if ([((OrgBouncycastleMathEcECPoint *) nil_chk(q)) isInfinity]) {
    
#line 170
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Point at infinity");
  }
  
#line 173
  if (![q isValid]) {
    
#line 175
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Point not on curve");
  }
  
#line 178
  return q;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoParamsECDomainParameters)
