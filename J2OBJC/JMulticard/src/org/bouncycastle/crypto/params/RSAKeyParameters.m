//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/params/RSAKeyParameters.java
//

#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/crypto/params/RSAKeyParameters.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/params/RSAKeyParameters must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoParamsRSAKeyParameters () {
 @public
  JavaMathBigInteger *modulus_;
  JavaMathBigInteger *exponent_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsRSAKeyParameters, modulus_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsRSAKeyParameters, exponent_, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgBouncycastleCryptoParamsRSAKeyParameters_get_ONE(void);
static JavaMathBigInteger *OrgBouncycastleCryptoParamsRSAKeyParameters_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleCryptoParamsRSAKeyParameters, ONE, JavaMathBigInteger *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/params/RSAKeyParameters.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleCryptoParamsRSAKeyParameters)


#line 5
@implementation OrgBouncycastleCryptoParamsRSAKeyParameters


#line 12
- (instancetype)initWithBoolean:(jboolean)isPrivate
         withJavaMathBigInteger:(JavaMathBigInteger *)modulus
         withJavaMathBigInteger:(JavaMathBigInteger *)exponent {
  OrgBouncycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_(self, isPrivate, modulus, exponent);
  return self;
}


#line 18
- (instancetype)initWithBoolean:(jboolean)isPrivate
         withJavaMathBigInteger:(JavaMathBigInteger *)modulus
         withJavaMathBigInteger:(JavaMathBigInteger *)exponent
                    withBoolean:(jboolean)isInternal {
  OrgBouncycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_(self, isPrivate, modulus, exponent, isInternal);
  return self;
}


#line 27
- (JavaMathBigInteger *)getModulus {
  return modulus_;
}

- (JavaMathBigInteger *)getExponent {
  return exponent_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithBoolean:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[1].selector = @selector(initWithBoolean:withJavaMathBigInteger:withJavaMathBigInteger:withBoolean:);
  methods[2].selector = @selector(getModulus);
  methods[3].selector = @selector(getExponent);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
    { "modulus_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "exponent_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ZLJavaMathBigInteger;LJavaMathBigInteger;", "ZLJavaMathBigInteger;LJavaMathBigInteger;Z", &OrgBouncycastleCryptoParamsRSAKeyParameters_ONE };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoParamsRSAKeyParameters = { "RSAKeyParameters", "org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoParamsRSAKeyParameters;
}

+ (void)initialize {
  if (self == [OrgBouncycastleCryptoParamsRSAKeyParameters class]) {
    OrgBouncycastleCryptoParamsRSAKeyParameters_ONE = JavaMathBigInteger_valueOfWithLong_(
#line 7
    1);
    J2OBJC_SET_INITIALIZED(OrgBouncycastleCryptoParamsRSAKeyParameters)
  }
}

@end


#line 12
void OrgBouncycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleCryptoParamsRSAKeyParameters *self, jboolean isPrivate, JavaMathBigInteger *modulus, JavaMathBigInteger *exponent) {
  OrgBouncycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_(self,
#line 15
  isPrivate, modulus, exponent, false);
}


#line 12
OrgBouncycastleCryptoParamsRSAKeyParameters *new_OrgBouncycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_(jboolean isPrivate, JavaMathBigInteger *modulus, JavaMathBigInteger *exponent) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoParamsRSAKeyParameters, initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_, isPrivate, modulus, exponent)
}


#line 12
OrgBouncycastleCryptoParamsRSAKeyParameters *create_OrgBouncycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_(jboolean isPrivate, JavaMathBigInteger *modulus, JavaMathBigInteger *exponent) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoParamsRSAKeyParameters, initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_, isPrivate, modulus, exponent)
}


#line 18
void OrgBouncycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_(OrgBouncycastleCryptoParamsRSAKeyParameters *self, jboolean isPrivate, JavaMathBigInteger *modulus, JavaMathBigInteger *exponent, jboolean isInternal) {
  OrgBouncycastleCryptoParamsAsymmetricKeyParameter_initWithBoolean_(self,
#line 22
  isPrivate);
  self->modulus_ = modulus;
  self->exponent_ = exponent;
}


#line 18
OrgBouncycastleCryptoParamsRSAKeyParameters *new_OrgBouncycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_(jboolean isPrivate, JavaMathBigInteger *modulus, JavaMathBigInteger *exponent, jboolean isInternal) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoParamsRSAKeyParameters, initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_, isPrivate, modulus, exponent, isInternal)
}


#line 18
OrgBouncycastleCryptoParamsRSAKeyParameters *create_OrgBouncycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_(jboolean isPrivate, JavaMathBigInteger *modulus, JavaMathBigInteger *exponent, jboolean isInternal) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoParamsRSAKeyParameters, initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_, isPrivate, modulus, exponent, isInternal)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoParamsRSAKeyParameters)
