//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/params/Blake3Parameters.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoParamsBlake3Parameters")
#ifdef RESTRICT_OrgBouncycastleCryptoParamsBlake3Parameters
#define INCLUDE_ALL_OrgBouncycastleCryptoParamsBlake3Parameters 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoParamsBlake3Parameters 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoParamsBlake3Parameters

#if !defined (OrgBouncycastleCryptoParamsBlake3Parameters_) && (INCLUDE_ALL_OrgBouncycastleCryptoParamsBlake3Parameters || defined(INCLUDE_OrgBouncycastleCryptoParamsBlake3Parameters))
#define OrgBouncycastleCryptoParamsBlake3Parameters_

#define RESTRICT_OrgBouncycastleCryptoCipherParameters 1
#define INCLUDE_OrgBouncycastleCryptoCipherParameters 1
#include "org/bouncycastle/crypto/CipherParameters.h"

@class IOSByteArray;

/*!
 @brief Blake3 Parameters.
 */
@interface OrgBouncycastleCryptoParamsBlake3Parameters : NSObject < OrgBouncycastleCryptoCipherParameters >

#pragma mark Public

- (instancetype)init;

/*!
 @brief Clear the key bytes.
 */
- (void)clearKey;

/*!
 @brief Create a key parameter.
 @param pContext the context
 @return the parameter
 */
+ (OrgBouncycastleCryptoParamsBlake3Parameters *)contextWithByteArray:(IOSByteArray *)pContext;

/*!
 @brief Obtain the salt.
 @return the salt
 */
- (IOSByteArray *)getContext;

/*!
 @brief Obtain the key.
 @return the key
 */
- (IOSByteArray *)getKey;

/*!
 @brief Create a key parameter.
 @param pKey the key
 @return the parameter
 */
+ (OrgBouncycastleCryptoParamsBlake3Parameters *)keyWithByteArray:(IOSByteArray *)pKey;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleCryptoParamsBlake3Parameters)

FOUNDATION_EXPORT void OrgBouncycastleCryptoParamsBlake3Parameters_init(OrgBouncycastleCryptoParamsBlake3Parameters *self);

FOUNDATION_EXPORT OrgBouncycastleCryptoParamsBlake3Parameters *new_OrgBouncycastleCryptoParamsBlake3Parameters_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoParamsBlake3Parameters *create_OrgBouncycastleCryptoParamsBlake3Parameters_init(void);

FOUNDATION_EXPORT OrgBouncycastleCryptoParamsBlake3Parameters *OrgBouncycastleCryptoParamsBlake3Parameters_contextWithByteArray_(IOSByteArray *pContext);

FOUNDATION_EXPORT OrgBouncycastleCryptoParamsBlake3Parameters *OrgBouncycastleCryptoParamsBlake3Parameters_keyWithByteArray_(IOSByteArray *pKey);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoParamsBlake3Parameters)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoParamsBlake3Parameters")
