//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/params/DESParameters.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleCryptoParamsDESParameters")
#ifdef RESTRICT_OrgBouncycastleCryptoParamsDESParameters
#define INCLUDE_ALL_OrgBouncycastleCryptoParamsDESParameters 0
#else
#define INCLUDE_ALL_OrgBouncycastleCryptoParamsDESParameters 1
#endif
#undef RESTRICT_OrgBouncycastleCryptoParamsDESParameters

#if !defined (OrgBouncycastleCryptoParamsDESParameters_) && (INCLUDE_ALL_OrgBouncycastleCryptoParamsDESParameters || defined(INCLUDE_OrgBouncycastleCryptoParamsDESParameters))
#define OrgBouncycastleCryptoParamsDESParameters_

#define RESTRICT_OrgBouncycastleCryptoParamsKeyParameter 1
#define INCLUDE_OrgBouncycastleCryptoParamsKeyParameter 1
#include "org/bouncycastle/crypto/params/KeyParameter.h"

@class IOSByteArray;

@interface OrgBouncycastleCryptoParamsDESParameters : OrgBouncycastleCryptoParamsKeyParameter

#pragma mark Public

- (instancetype)initWithByteArray:(IOSByteArray *)key;

/*!
 @brief DES has 16 weak keys.This method will check
  if the given DES key material is weak or semi-weak.
 Key material that is too short is regarded as weak. 
 <p>
  See <a href="https://www.counterpane.com/applied.html">"Applied
  Cryptography"</a> by Bruce Schneier for more information.
 @return true if the given DES key material is weak or semi-weak,
      false otherwise.
 */
+ (jboolean)isWeakKeyWithByteArray:(IOSByteArray *)key
                           withInt:(jint)offset;

/*!
 @brief DES Keys use the LSB as the odd parity bit.This can
  be used to check for corrupt keys.
 @param bytes the byte array to set the parity on.
 */
+ (void)setOddParityWithByteArray:(IOSByteArray *)bytes;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithByteArray:(IOSByteArray *)arg0
                          withInt:(jint)arg1
                          withInt:(jint)arg2 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleCryptoParamsDESParameters)

inline jint OrgBouncycastleCryptoParamsDESParameters_get_DES_KEY_LENGTH(void);
#define OrgBouncycastleCryptoParamsDESParameters_DES_KEY_LENGTH 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoParamsDESParameters, DES_KEY_LENGTH, jint)

FOUNDATION_EXPORT void OrgBouncycastleCryptoParamsDESParameters_initWithByteArray_(OrgBouncycastleCryptoParamsDESParameters *self, IOSByteArray *key);

FOUNDATION_EXPORT OrgBouncycastleCryptoParamsDESParameters *new_OrgBouncycastleCryptoParamsDESParameters_initWithByteArray_(IOSByteArray *key) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleCryptoParamsDESParameters *create_OrgBouncycastleCryptoParamsDESParameters_initWithByteArray_(IOSByteArray *key);

FOUNDATION_EXPORT jboolean OrgBouncycastleCryptoParamsDESParameters_isWeakKeyWithByteArray_withInt_(IOSByteArray *key, jint offset);

FOUNDATION_EXPORT void OrgBouncycastleCryptoParamsDESParameters_setOddParityWithByteArray_(IOSByteArray *bytes);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleCryptoParamsDESParameters)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleCryptoParamsDESParameters")
