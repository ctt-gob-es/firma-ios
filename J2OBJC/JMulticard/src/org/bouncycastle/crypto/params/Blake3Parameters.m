//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/params/Blake3Parameters.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/bouncycastle/crypto/params/Blake3Parameters.h"
#include "org/bouncycastle/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/params/Blake3Parameters must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoParamsBlake3Parameters () {
 @public
  /*!
   @brief The key.
   */
  IOSByteArray *theKey_;
  /*!
   @brief The context.
   */
  IOSByteArray *theContext_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsBlake3Parameters, theKey_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsBlake3Parameters, theContext_, IOSByteArray *)

/*!
 @brief The key length.
 */
inline jint OrgBouncycastleCryptoParamsBlake3Parameters_get_KEYLEN(void);
#define OrgBouncycastleCryptoParamsBlake3Parameters_KEYLEN 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleCryptoParamsBlake3Parameters, KEYLEN, jint)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/params/Blake3Parameters.java"


#line 9
@implementation OrgBouncycastleCryptoParamsBlake3Parameters

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 9
- (instancetype)init {
  OrgBouncycastleCryptoParamsBlake3Parameters_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 32
+ (OrgBouncycastleCryptoParamsBlake3Parameters *)contextWithByteArray:(IOSByteArray *)pContext {
  return OrgBouncycastleCryptoParamsBlake3Parameters_contextWithByteArray_(pContext);
}


#line 48
+ (OrgBouncycastleCryptoParamsBlake3Parameters *)keyWithByteArray:(IOSByteArray *)pKey {
  return OrgBouncycastleCryptoParamsBlake3Parameters_keyWithByteArray_(pKey);
}


#line 63
- (IOSByteArray *)getKey {
  
#line 65
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(theKey_);
}


#line 71
- (void)clearKey {
  
#line 73
  OrgBouncycastleUtilArrays_fillWithByteArray_withByte_(theKey_, (jbyte) 0);
}


#line 80
- (IOSByteArray *)getContext {
  
#line 82
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(theContext_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsBlake3Parameters;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsBlake3Parameters;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(contextWithByteArray:);
  methods[2].selector = @selector(keyWithByteArray:);
  methods[3].selector = @selector(getKey);
  methods[4].selector = @selector(clearKey);
  methods[5].selector = @selector(getContext);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "KEYLEN", "I", .constantValue.asInt = OrgBouncycastleCryptoParamsBlake3Parameters_KEYLEN, 0x1a, -1, -1, -1, -1 },
    { "theKey_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theContext_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "context", "[B", "key" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoParamsBlake3Parameters = { "Blake3Parameters", "org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoParamsBlake3Parameters;
}

@end


#line 9
void OrgBouncycastleCryptoParamsBlake3Parameters_init(OrgBouncycastleCryptoParamsBlake3Parameters *self) {
  NSObject_init(self);
}


#line 9
OrgBouncycastleCryptoParamsBlake3Parameters *new_OrgBouncycastleCryptoParamsBlake3Parameters_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoParamsBlake3Parameters, init)
}


#line 9
OrgBouncycastleCryptoParamsBlake3Parameters *create_OrgBouncycastleCryptoParamsBlake3Parameters_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoParamsBlake3Parameters, init)
}


#line 32
OrgBouncycastleCryptoParamsBlake3Parameters *OrgBouncycastleCryptoParamsBlake3Parameters_contextWithByteArray_(IOSByteArray *pContext) {
  OrgBouncycastleCryptoParamsBlake3Parameters_initialize();
  if (pContext == nil) {
    
#line 36
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid context");
  }
  OrgBouncycastleCryptoParamsBlake3Parameters *myParams = new_OrgBouncycastleCryptoParamsBlake3Parameters_init();
  myParams->theContext_ = OrgBouncycastleUtilArrays_cloneWithByteArray_(pContext);
  return myParams;
}


#line 48
OrgBouncycastleCryptoParamsBlake3Parameters *OrgBouncycastleCryptoParamsBlake3Parameters_keyWithByteArray_(IOSByteArray *pKey) {
  OrgBouncycastleCryptoParamsBlake3Parameters_initialize();
  if (pKey == nil || pKey->size_ != OrgBouncycastleCryptoParamsBlake3Parameters_KEYLEN) {
    
#line 52
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid keyLength");
  }
  OrgBouncycastleCryptoParamsBlake3Parameters *myParams = new_OrgBouncycastleCryptoParamsBlake3Parameters_init();
  myParams->theKey_ = OrgBouncycastleUtilArrays_cloneWithByteArray_(pKey);
  return myParams;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoParamsBlake3Parameters)
