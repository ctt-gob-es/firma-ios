//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/params/ECKeyParameters.java
//

#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/crypto/params/ECDomainParameters.h"
#include "org/bouncycastle/crypto/params/ECKeyParameters.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/params/ECKeyParameters must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoParamsECKeyParameters () {
 @public
  OrgBouncycastleCryptoParamsECDomainParameters *parameters_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoParamsECKeyParameters, parameters_, OrgBouncycastleCryptoParamsECDomainParameters *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/params/ECKeyParameters.java"


#line 3
@implementation OrgBouncycastleCryptoParamsECKeyParameters


#line 8
- (instancetype)initWithBoolean:(jboolean)isPrivate
withOrgBouncycastleCryptoParamsECDomainParameters:(OrgBouncycastleCryptoParamsECDomainParameters *)parameters {
  OrgBouncycastleCryptoParamsECKeyParameters_initWithBoolean_withOrgBouncycastleCryptoParamsECDomainParameters_(self, isPrivate, parameters);
  return self;
}


#line 22
- (OrgBouncycastleCryptoParamsECDomainParameters *)getParameters {
  
#line 24
  return parameters_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsECDomainParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithBoolean:withOrgBouncycastleCryptoParamsECDomainParameters:);
  methods[1].selector = @selector(getParameters);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parameters_", "LOrgBouncycastleCryptoParamsECDomainParameters;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ZLOrgBouncycastleCryptoParamsECDomainParameters;" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoParamsECKeyParameters = { "ECKeyParameters", "org.bouncycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoParamsECKeyParameters;
}

@end


#line 8
void OrgBouncycastleCryptoParamsECKeyParameters_initWithBoolean_withOrgBouncycastleCryptoParamsECDomainParameters_(OrgBouncycastleCryptoParamsECKeyParameters *self, jboolean isPrivate, OrgBouncycastleCryptoParamsECDomainParameters *parameters) {
  OrgBouncycastleCryptoParamsAsymmetricKeyParameter_initWithBoolean_(self,
#line 12
  isPrivate);
  
#line 14
  if (nil == parameters) {
    
#line 16
    @throw new_JavaLangNullPointerException_initWithNSString_(@"'parameters' cannot be null");
  }
  
#line 19
  self->parameters_ = parameters;
}


#line 8
OrgBouncycastleCryptoParamsECKeyParameters *new_OrgBouncycastleCryptoParamsECKeyParameters_initWithBoolean_withOrgBouncycastleCryptoParamsECDomainParameters_(jboolean isPrivate, OrgBouncycastleCryptoParamsECDomainParameters *parameters) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoParamsECKeyParameters, initWithBoolean_withOrgBouncycastleCryptoParamsECDomainParameters_, isPrivate, parameters)
}


#line 8
OrgBouncycastleCryptoParamsECKeyParameters *create_OrgBouncycastleCryptoParamsECKeyParameters_initWithBoolean_withOrgBouncycastleCryptoParamsECDomainParameters_(jboolean isPrivate, OrgBouncycastleCryptoParamsECDomainParameters *parameters) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoParamsECKeyParameters, initWithBoolean_withOrgBouncycastleCryptoParamsECDomainParameters_, isPrivate, parameters)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoParamsECKeyParameters)
