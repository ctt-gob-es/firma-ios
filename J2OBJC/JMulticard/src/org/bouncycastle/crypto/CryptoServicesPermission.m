//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/CryptoServicesPermission.java
//

#include "J2ObjC_source.h"
#include "java/security/Permission.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "org/bouncycastle/crypto/CryptoServicesPermission.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/CryptoServicesPermission must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoCryptoServicesPermission () {
 @public
  id<JavaUtilSet> actions_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoCryptoServicesPermission, actions_, id<JavaUtilSet>)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/CryptoServicesPermission.java"

NSString *OrgBouncycastleCryptoCryptoServicesPermission_GLOBAL_CONFIG = @"globalConfig";
NSString *OrgBouncycastleCryptoCryptoServicesPermission_THREAD_LOCAL_CONFIG = @"threadLocalConfig";
NSString *OrgBouncycastleCryptoCryptoServicesPermission_DEFAULT_RANDOM = @"defaultRandomConfig";
NSString *OrgBouncycastleCryptoCryptoServicesPermission_CONSTRAINTS = @"constraints";


#line 10
@implementation OrgBouncycastleCryptoCryptoServicesPermission


#line 35
- (instancetype)initWithNSString:(NSString *)name {
  OrgBouncycastleCryptoCryptoServicesPermission_initWithNSString_(self, name);
  return self;
}


#line 42
- (jboolean)impliesWithJavaSecurityPermission:(JavaSecurityPermission *)permission {
  
#line 45
  if ([permission isKindOfClass:[OrgBouncycastleCryptoCryptoServicesPermission class]]) {
    
#line 47
    OrgBouncycastleCryptoCryptoServicesPermission *other = (OrgBouncycastleCryptoCryptoServicesPermission *) permission;
    
#line 49
    if ([((NSString *) nil_chk([self getName])) isEqual:[((OrgBouncycastleCryptoCryptoServicesPermission *) nil_chk(other)) getName]] || [((id<JavaUtilSet>) nil_chk(actions_)) containsAllWithJavaUtilCollection:other->actions_]) {
      
#line 51
      return true;
    }
  }
  
#line 55
  return false;
}


#line 58
- (jboolean)isEqual:(id)obj {
  
#line 61
  if ([obj isKindOfClass:[OrgBouncycastleCryptoCryptoServicesPermission class]]) {
    
#line 63
    OrgBouncycastleCryptoCryptoServicesPermission *other = (OrgBouncycastleCryptoCryptoServicesPermission *) obj;
    
#line 65
    if ([((id<JavaUtilSet>) nil_chk(actions_)) isEqual:((OrgBouncycastleCryptoCryptoServicesPermission *) nil_chk(other))->actions_]) {
      
#line 67
      return true;
    }
  }
  
#line 71
  return false;
}


#line 74
- (NSUInteger)hash {
  
#line 77
  return ((jint) [((id<JavaUtilSet>) nil_chk(actions_)) hash]);
}

- (NSString *)getActions {
  
#line 83
  return [((id<JavaUtilSet>) nil_chk(actions_)) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(impliesWithJavaSecurityPermission:);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(getActions);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "GLOBAL_CONFIG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "THREAD_LOCAL_CONFIG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "DEFAULT_RANDOM", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "CONSTRAINTS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "actions_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "implies", "LJavaSecurityPermission;", "equals", "LNSObject;", "hashCode", &OrgBouncycastleCryptoCryptoServicesPermission_GLOBAL_CONFIG, &OrgBouncycastleCryptoCryptoServicesPermission_THREAD_LOCAL_CONFIG, &OrgBouncycastleCryptoCryptoServicesPermission_DEFAULT_RANDOM, &OrgBouncycastleCryptoCryptoServicesPermission_CONSTRAINTS, "Ljava/util/Set<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoCryptoServicesPermission = { "CryptoServicesPermission", "org.bouncycastle.crypto", ptrTable, methods, fields, 7, 0x1, 5, 5, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoCryptoServicesPermission;
}

@end


#line 35
void OrgBouncycastleCryptoCryptoServicesPermission_initWithNSString_(OrgBouncycastleCryptoCryptoServicesPermission *self, NSString *name) {
  JavaSecurityPermission_initWithNSString_(self,
#line 37
  name);
  self->actions_ = new_JavaUtilHashSet_init();
  [self->actions_ addWithId:name];
}


#line 35
OrgBouncycastleCryptoCryptoServicesPermission *new_OrgBouncycastleCryptoCryptoServicesPermission_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoCryptoServicesPermission, initWithNSString_, name)
}


#line 35
OrgBouncycastleCryptoCryptoServicesPermission *create_OrgBouncycastleCryptoCryptoServicesPermission_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoCryptoServicesPermission, initWithNSString_, name)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoCryptoServicesPermission)
