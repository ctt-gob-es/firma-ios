//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/KeyGenerationParameters.java
//

#include "J2ObjC_source.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/CryptoServicesRegistrar.h"
#include "org/bouncycastle/crypto/KeyGenerationParameters.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/crypto/KeyGenerationParameters must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleCryptoKeyGenerationParameters () {
 @public
  JavaSecuritySecureRandom *random_;
  jint strength_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoKeyGenerationParameters, random_, JavaSecuritySecureRandom *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/crypto/KeyGenerationParameters.java"


#line 8
@implementation OrgBouncycastleCryptoKeyGenerationParameters


#line 20
- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                         withInt:(jint)strength {
  OrgBouncycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(self, random, strength);
  return self;
}


#line 34
- (JavaSecuritySecureRandom *)getRandom {
  
#line 36
  return random_;
}


#line 44
- (jint)getStrength {
  
#line 46
  return strength_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySecureRandom;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaSecuritySecureRandom:withInt:);
  methods[1].selector = @selector(getRandom);
  methods[2].selector = @selector(getStrength);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecuritySecureRandom;I" };
  static const J2ObjcClassInfo _OrgBouncycastleCryptoKeyGenerationParameters = { "KeyGenerationParameters", "org.bouncycastle.crypto", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleCryptoKeyGenerationParameters;
}

@end


#line 20
void OrgBouncycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(OrgBouncycastleCryptoKeyGenerationParameters *self, JavaSecuritySecureRandom *random, jint strength) {
  NSObject_init(self);
  
#line 24
  self->random_ = OrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandomWithJavaSecuritySecureRandom_(random);
  self->strength_ = strength;
}


#line 20
OrgBouncycastleCryptoKeyGenerationParameters *new_OrgBouncycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(JavaSecuritySecureRandom *random, jint strength) {
  J2OBJC_NEW_IMPL(OrgBouncycastleCryptoKeyGenerationParameters, initWithJavaSecuritySecureRandom_withInt_, random, strength)
}


#line 20
OrgBouncycastleCryptoKeyGenerationParameters *create_OrgBouncycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(JavaSecuritySecureRandom *random, jint strength) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleCryptoKeyGenerationParameters, initWithJavaSecuritySecureRandom_withInt_, random, strength)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoKeyGenerationParameters)
