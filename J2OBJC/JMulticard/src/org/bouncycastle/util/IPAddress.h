//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/IPAddress.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleUtilIPAddress")
#ifdef RESTRICT_OrgBouncycastleUtilIPAddress
#define INCLUDE_ALL_OrgBouncycastleUtilIPAddress 0
#else
#define INCLUDE_ALL_OrgBouncycastleUtilIPAddress 1
#endif
#undef RESTRICT_OrgBouncycastleUtilIPAddress

#if !defined (OrgBouncycastleUtilIPAddress_) && (INCLUDE_ALL_OrgBouncycastleUtilIPAddress || defined(INCLUDE_OrgBouncycastleUtilIPAddress))
#define OrgBouncycastleUtilIPAddress_

/*!
 @brief Utility methods for processing String objects containing IP addresses.
 */
@interface OrgBouncycastleUtilIPAddress : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Validate the given IPv4 or IPv6 address.
 @param address the IP address as a String.
 @return true if a valid address, false otherwise
 */
+ (jboolean)isValidWithNSString:(NSString *)address;

/*!
 @brief Validate the given IPv4 address.
 @param address the IP address as a String.
 @return true if a valid IPv4 address, false otherwise
 */
+ (jboolean)isValidIPv4WithNSString:(NSString *)address;

+ (jboolean)isValidIPv4WithNetmaskWithNSString:(NSString *)address;

/*!
 @brief Validate the given IPv6 address.
 @param address the IP address as a String.
 @return true if a valid IPv6 address, false otherwise
 */
+ (jboolean)isValidIPv6WithNSString:(NSString *)address;

+ (jboolean)isValidIPv6WithNetmaskWithNSString:(NSString *)address;

/*!
 @brief Validate the given IPv4 or IPv6 address and netmask.
 @param address the IP address as a String.
 @return true if a valid address with netmask, false otherwise
 */
+ (jboolean)isValidWithNetMaskWithNSString:(NSString *)address;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleUtilIPAddress)

FOUNDATION_EXPORT void OrgBouncycastleUtilIPAddress_init(OrgBouncycastleUtilIPAddress *self);

FOUNDATION_EXPORT OrgBouncycastleUtilIPAddress *new_OrgBouncycastleUtilIPAddress_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleUtilIPAddress *create_OrgBouncycastleUtilIPAddress_init(void);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilIPAddress_isValidWithNSString_(NSString *address);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilIPAddress_isValidWithNetMaskWithNSString_(NSString *address);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilIPAddress_isValidIPv4WithNSString_(NSString *address);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilIPAddress_isValidIPv4WithNetmaskWithNSString_(NSString *address);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilIPAddress_isValidIPv6WithNetmaskWithNSString_(NSString *address);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilIPAddress_isValidIPv6WithNSString_(NSString *address);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleUtilIPAddress)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleUtilIPAddress")
