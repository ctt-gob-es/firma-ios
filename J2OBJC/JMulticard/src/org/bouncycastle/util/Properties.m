//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/Properties.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/math/BigInteger.h"
#include "java/security/AccessControlException.h"
#include "java/security/AccessController.h"
#include "java/security/PrivilegedAction.h"
#include "java/security/Security.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"
#include "org/bouncycastle/util/Properties.h"
#include "org/bouncycastle/util/Strings.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/util/Properties must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleUtilProperties ()

- (instancetype)init;

+ (jboolean)isSetFalseWithNSString:(NSString *)p;

+ (jboolean)isSetTrueWithNSString:(NSString *)p;

@end

inline JavaLangThreadLocal *OrgBouncycastleUtilProperties_get_threadProperties(void);
static JavaLangThreadLocal *OrgBouncycastleUtilProperties_threadProperties;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleUtilProperties, threadProperties, JavaLangThreadLocal *)

__attribute__((unused)) static void OrgBouncycastleUtilProperties_init(OrgBouncycastleUtilProperties *self);

__attribute__((unused)) static OrgBouncycastleUtilProperties *new_OrgBouncycastleUtilProperties_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleUtilProperties *create_OrgBouncycastleUtilProperties_init(void);

__attribute__((unused)) static jboolean OrgBouncycastleUtilProperties_isSetFalseWithNSString_(NSString *p);

__attribute__((unused)) static jboolean OrgBouncycastleUtilProperties_isSetTrueWithNSString_(NSString *p);

@interface OrgBouncycastleUtilProperties_1 : NSObject < JavaSecurityPrivilegedAction > {
 @public
  NSString *val$propertyName_;
}

- (instancetype)initWithNSString:(NSString *)capture$0;

- (id)run;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleUtilProperties_1)

__attribute__((unused)) static void OrgBouncycastleUtilProperties_1_initWithNSString_(OrgBouncycastleUtilProperties_1 *self, NSString *capture$0);

__attribute__((unused)) static OrgBouncycastleUtilProperties_1 *new_OrgBouncycastleUtilProperties_1_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleUtilProperties_1 *create_OrgBouncycastleUtilProperties_1_initWithNSString_(NSString *capture$0);

@interface OrgBouncycastleUtilProperties_2 : NSObject < JavaSecurityPrivilegedAction > {
 @public
  NSString *val$propertyName_;
}

- (instancetype)initWithNSString:(NSString *)capture$0;

- (id)run;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleUtilProperties_2)

__attribute__((unused)) static void OrgBouncycastleUtilProperties_2_initWithNSString_(OrgBouncycastleUtilProperties_2 *self, NSString *capture$0);

__attribute__((unused)) static OrgBouncycastleUtilProperties_2 *new_OrgBouncycastleUtilProperties_2_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleUtilProperties_2 *create_OrgBouncycastleUtilProperties_2_initWithNSString_(NSString *capture$0);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/Properties.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleUtilProperties)


#line 20
@implementation OrgBouncycastleUtilProperties

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 22
- (instancetype)init {
  OrgBouncycastleUtilProperties_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 34
+ (jboolean)isOverrideSetWithNSString:(NSString *)propertyName {
  return OrgBouncycastleUtilProperties_isOverrideSetWithNSString_(propertyName);
}


#line 50
+ (jboolean)isOverrideSetToWithNSString:(NSString *)propertyName
                            withBoolean:(jboolean)isTrue {
  return OrgBouncycastleUtilProperties_isOverrideSetToWithNSString_withBoolean_(propertyName, isTrue);
}


#line 70
+ (jboolean)setThreadOverrideWithNSString:(NSString *)propertyName
                              withBoolean:(jboolean)enable {
  return OrgBouncycastleUtilProperties_setThreadOverrideWithNSString_withBoolean_(propertyName, enable);
}


#line 91
+ (jboolean)removeThreadOverrideWithNSString:(NSString *)propertyName {
  return OrgBouncycastleUtilProperties_removeThreadOverrideWithNSString_(propertyName);
}


#line 118
+ (jint)asIntegerWithNSString:(NSString *)propertyName
                      withInt:(jint)defaultValue {
  return OrgBouncycastleUtilProperties_asIntegerWithNSString_withInt_(propertyName, defaultValue);
}


#line 136
+ (JavaMathBigInteger *)asBigIntegerWithNSString:(NSString *)propertyName {
  return OrgBouncycastleUtilProperties_asBigIntegerWithNSString_(propertyName);
}


#line 148
+ (id<JavaUtilSet>)asKeySetWithNSString:(NSString *)propertyName {
  return OrgBouncycastleUtilProperties_asKeySetWithNSString_(propertyName);
}


#line 173
+ (NSString *)getPropertyValueWithNSString:(NSString *)propertyName {
  return OrgBouncycastleUtilProperties_getPropertyValueWithNSString_(propertyName);
}


#line 208
+ (jboolean)isSetFalseWithNSString:(NSString *)p {
  return OrgBouncycastleUtilProperties_isSetFalseWithNSString_(p);
}


#line 222
+ (jboolean)isSetTrueWithNSString:(NSString *)p {
  return OrgBouncycastleUtilProperties_isSetTrueWithNSString_(p);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 8, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 9, 1, -1, 10, -1, -1 },
    { NULL, "LNSString;", 0x9, 11, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 12, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 13, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isOverrideSetWithNSString:);
  methods[2].selector = @selector(isOverrideSetToWithNSString:withBoolean:);
  methods[3].selector = @selector(setThreadOverrideWithNSString:withBoolean:);
  methods[4].selector = @selector(removeThreadOverrideWithNSString:);
  methods[5].selector = @selector(asIntegerWithNSString:withInt:);
  methods[6].selector = @selector(asBigIntegerWithNSString:);
  methods[7].selector = @selector(asKeySetWithNSString:);
  methods[8].selector = @selector(getPropertyValueWithNSString:);
  methods[9].selector = @selector(isSetFalseWithNSString:);
  methods[10].selector = @selector(isSetTrueWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "threadProperties", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
  };
  static const void *ptrTable[] = { "isOverrideSet", "LNSString;", "isOverrideSetTo", "LNSString;Z", "setThreadOverride", "removeThreadOverride", "asInteger", "LNSString;I", "asBigInteger", "asKeySet", "(Ljava/lang/String;)Ljava/util/Set<Ljava/lang/String;>;", "getPropertyValue", "isSetFalse", "isSetTrue", &OrgBouncycastleUtilProperties_threadProperties };
  static const J2ObjcClassInfo _OrgBouncycastleUtilProperties = { "Properties", "org.bouncycastle.util", ptrTable, methods, fields, 7, 0x1, 11, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleUtilProperties;
}

+ (void)initialize {
  if (self == [OrgBouncycastleUtilProperties class]) {
    OrgBouncycastleUtilProperties_threadProperties = new_JavaLangThreadLocal_init();
    J2OBJC_SET_INITIALIZED(OrgBouncycastleUtilProperties)
  }
}

@end


#line 22
void OrgBouncycastleUtilProperties_init(OrgBouncycastleUtilProperties *self) {
  NSObject_init(self);
}


#line 22
OrgBouncycastleUtilProperties *new_OrgBouncycastleUtilProperties_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleUtilProperties, init)
}


#line 22
OrgBouncycastleUtilProperties *create_OrgBouncycastleUtilProperties_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleUtilProperties, init)
}


#line 34
jboolean OrgBouncycastleUtilProperties_isOverrideSetWithNSString_(NSString *propertyName) {
  OrgBouncycastleUtilProperties_initialize();
  
#line 35
  @try {
    return OrgBouncycastleUtilProperties_isSetTrueWithNSString_(OrgBouncycastleUtilProperties_getPropertyValueWithNSString_(propertyName));
  }
  @catch (JavaSecurityAccessControlException *e) {
    return false;
  }
}


#line 50
jboolean OrgBouncycastleUtilProperties_isOverrideSetToWithNSString_withBoolean_(NSString *propertyName, jboolean isTrue) {
  OrgBouncycastleUtilProperties_initialize();
  
#line 51
  @try {
    NSString *propertyValue = OrgBouncycastleUtilProperties_getPropertyValueWithNSString_(propertyName);
    if (isTrue) {
      return OrgBouncycastleUtilProperties_isSetTrueWithNSString_(propertyValue);
    }
    return OrgBouncycastleUtilProperties_isSetFalseWithNSString_(propertyValue);
  }
  @catch (JavaSecurityAccessControlException *e) {
    return false;
  }
}


#line 70
jboolean OrgBouncycastleUtilProperties_setThreadOverrideWithNSString_withBoolean_(NSString *propertyName, jboolean enable) {
  OrgBouncycastleUtilProperties_initialize();
  
#line 71
  jboolean isSet = OrgBouncycastleUtilProperties_isOverrideSetWithNSString_(propertyName);
  
#line 73
  id<JavaUtilMap> localProps = (id<JavaUtilMap>) cast_check([((JavaLangThreadLocal *) nil_chk(OrgBouncycastleUtilProperties_threadProperties)) get], JavaUtilMap_class_());
  if (localProps == nil) {
    localProps = new_JavaUtilHashMap_init();
    
#line 77
    [OrgBouncycastleUtilProperties_threadProperties setWithId:localProps];
  }
  
#line 80
  (void) [localProps putWithId:propertyName withId:enable ? @"true" : @"false"];
  
#line 82
  return isSet;
}


#line 91
jboolean OrgBouncycastleUtilProperties_removeThreadOverrideWithNSString_(NSString *propertyName) {
  OrgBouncycastleUtilProperties_initialize();
  id<JavaUtilMap> localProps = (id<JavaUtilMap>) cast_check([((JavaLangThreadLocal *) nil_chk(OrgBouncycastleUtilProperties_threadProperties)) get], JavaUtilMap_class_());
  if (localProps != nil) {
    
#line 96
    NSString *p = (NSString *) cast_chk([localProps removeWithId:propertyName], [NSString class]);
    if (p != nil) {
      
#line 99
      if ([localProps isEmpty]) {
        
#line 101
        [OrgBouncycastleUtilProperties_threadProperties remove];
      }
      
#line 104
      return [@"true" isEqual:OrgBouncycastleUtilStrings_toLowerCaseWithNSString_(p)];
    }
  }
  
#line 108
  return false;
}


#line 118
jint OrgBouncycastleUtilProperties_asIntegerWithNSString_withInt_(NSString *propertyName, jint defaultValue) {
  OrgBouncycastleUtilProperties_initialize();
  NSString *p = OrgBouncycastleUtilProperties_getPropertyValueWithNSString_(propertyName);
  
#line 122
  if (p != nil) {
    
#line 124
    return JavaLangInteger_parseIntWithNSString_(p);
  }
  
#line 127
  return defaultValue;
}


#line 136
JavaMathBigInteger *OrgBouncycastleUtilProperties_asBigIntegerWithNSString_(NSString *propertyName) {
  OrgBouncycastleUtilProperties_initialize();
  NSString *p = OrgBouncycastleUtilProperties_getPropertyValueWithNSString_(propertyName);
  
#line 140
  if (p != nil) {
    
#line 142
    return new_JavaMathBigInteger_initWithNSString_(p);
  }
  
#line 145
  return nil;
}


#line 148
id<JavaUtilSet> OrgBouncycastleUtilProperties_asKeySetWithNSString_(NSString *propertyName) {
  OrgBouncycastleUtilProperties_initialize();
  id<JavaUtilSet> set = new_JavaUtilHashSet_init();
  
#line 152
  NSString *p = OrgBouncycastleUtilProperties_getPropertyValueWithNSString_(propertyName);
  
#line 154
  if (p != nil) {
    
#line 156
    JavaUtilStringTokenizer *sTok = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(p, @",");
    while ([sTok hasMoreElements]) {
      
#line 159
      [set addWithId:[((NSString *) nil_chk(OrgBouncycastleUtilStrings_toLowerCaseWithNSString_([sTok nextToken]))) java_trim]];
    }
  }
  
#line 163
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(set);
}


#line 173
NSString *OrgBouncycastleUtilProperties_getPropertyValueWithNSString_(NSString *propertyName) {
  OrgBouncycastleUtilProperties_initialize();
  NSString *val = (NSString *) cast_chk(JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedAction_(new_OrgBouncycastleUtilProperties_1_initWithNSString_(propertyName)), [NSString class]);
  
#line 183
  if (val != nil) {
    
#line 185
    return val;
  }
  
#line 188
  id<JavaUtilMap> localProps = (id<JavaUtilMap>) cast_check([((JavaLangThreadLocal *) nil_chk(OrgBouncycastleUtilProperties_threadProperties)) get], JavaUtilMap_class_());
  if (localProps != nil) {
    
#line 191
    NSString *p = (NSString *) cast_chk([localProps getWithId:propertyName], [NSString class]);
    if (p != nil) {
      
#line 194
      return p;
    }
  }
  
#line 198
  return (NSString *) cast_chk(JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedAction_(new_OrgBouncycastleUtilProperties_2_initWithNSString_(propertyName)), [NSString class]);
}


#line 208
jboolean OrgBouncycastleUtilProperties_isSetFalseWithNSString_(NSString *p) {
  OrgBouncycastleUtilProperties_initialize();
  if (p == nil || [p java_length] != 5) {
    
#line 212
    return false;
  }
  
#line 215
  return ([p charAtWithInt:0] == 'f' || [p charAtWithInt:0] == 'F') &&
#line 216
  ([p charAtWithInt:1] == 'a' || [p charAtWithInt:1] == 'A') &&
#line 217
  ([p charAtWithInt:2] == 'l' || [p charAtWithInt:2] == 'L') &&
#line 218
  ([p charAtWithInt:3] == 's' || [p charAtWithInt:3] == 'S') &&
#line 219
  ([p charAtWithInt:4] == 'e' || [p charAtWithInt:4] == 'E');
}


#line 222
jboolean OrgBouncycastleUtilProperties_isSetTrueWithNSString_(NSString *p) {
  OrgBouncycastleUtilProperties_initialize();
  if (p == nil || [p java_length] != 4) {
    
#line 226
    return false;
  }
  
#line 229
  return ([p charAtWithInt:0] == 't' || [p charAtWithInt:0] == 'T') &&
#line 230
  ([p charAtWithInt:1] == 'r' || [p charAtWithInt:1] == 'R') &&
#line 231
  ([p charAtWithInt:2] == 'u' || [p charAtWithInt:2] == 'U') &&
#line 232
  ([p charAtWithInt:3] == 'e' || [p charAtWithInt:3] == 'E');
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleUtilProperties)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/Properties.java"


#line 176
@implementation OrgBouncycastleUtilProperties_1


#line 176
- (instancetype)initWithNSString:(NSString *)capture$0 {
  OrgBouncycastleUtilProperties_1_initWithNSString_(self, capture$0);
  return self;
}


#line 177
- (id)run {
  
#line 180
  return JavaSecuritySecurity_getPropertyWithNSString_(val$propertyName_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$propertyName_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LOrgBouncycastleUtilProperties;", "getPropertyValueWithNSString:" };
  static const J2ObjcClassInfo _OrgBouncycastleUtilProperties_1 = { "", "org.bouncycastle.util", ptrTable, methods, fields, 7, 0x8000, 2, 1, 1, -1, 2, -1, -1 };
  return &_OrgBouncycastleUtilProperties_1;
}

@end


#line 176
void OrgBouncycastleUtilProperties_1_initWithNSString_(OrgBouncycastleUtilProperties_1 *self, NSString *capture$0) {
  self->val$propertyName_ = capture$0;
  NSObject_init(self);
}


#line 176
OrgBouncycastleUtilProperties_1 *new_OrgBouncycastleUtilProperties_1_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(OrgBouncycastleUtilProperties_1, initWithNSString_, capture$0)
}


#line 176
OrgBouncycastleUtilProperties_1 *create_OrgBouncycastleUtilProperties_1_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleUtilProperties_1, initWithNSString_, capture$0)
}

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/Properties.java"


#line 199
@implementation OrgBouncycastleUtilProperties_2


#line 199
- (instancetype)initWithNSString:(NSString *)capture$0 {
  OrgBouncycastleUtilProperties_2_initWithNSString_(self, capture$0);
  return self;
}


#line 200
- (id)run {
  
#line 203
  return JavaLangSystem_getPropertyWithNSString_(val$propertyName_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$propertyName_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LOrgBouncycastleUtilProperties;", "getPropertyValueWithNSString:" };
  static const J2ObjcClassInfo _OrgBouncycastleUtilProperties_2 = { "", "org.bouncycastle.util", ptrTable, methods, fields, 7, 0x8000, 2, 1, 1, -1, 2, -1, -1 };
  return &_OrgBouncycastleUtilProperties_2;
}

@end


#line 199
void OrgBouncycastleUtilProperties_2_initWithNSString_(OrgBouncycastleUtilProperties_2 *self, NSString *capture$0) {
  self->val$propertyName_ = capture$0;
  NSObject_init(self);
}


#line 199
OrgBouncycastleUtilProperties_2 *new_OrgBouncycastleUtilProperties_2_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(OrgBouncycastleUtilProperties_2, initWithNSString_, capture$0)
}


#line 199
OrgBouncycastleUtilProperties_2 *create_OrgBouncycastleUtilProperties_2_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleUtilProperties_2, initWithNSString_, capture$0)
}
