//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/IPAddress.java
//

#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "org/bouncycastle/util/IPAddress.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/util/IPAddress must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleUtilIPAddress ()

+ (jboolean)isMaskValueWithNSString:(NSString *)component
                            withInt:(jint)size;

@end

__attribute__((unused)) static jboolean OrgBouncycastleUtilIPAddress_isMaskValueWithNSString_withInt_(NSString *component, jint size);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/IPAddress.java"


#line 6
@implementation OrgBouncycastleUtilIPAddress

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 6
- (instancetype)init {
  OrgBouncycastleUtilIPAddress_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 15
+ (jboolean)isValidWithNSString:(NSString *)address {
  return OrgBouncycastleUtilIPAddress_isValidWithNSString_(address);
}


#line 28
+ (jboolean)isValidWithNetMaskWithNSString:(NSString *)address {
  return OrgBouncycastleUtilIPAddress_isValidWithNetMaskWithNSString_(address);
}


#line 41
+ (jboolean)isValidIPv4WithNSString:(NSString *)address {
  return OrgBouncycastleUtilIPAddress_isValidIPv4WithNSString_(address);
}


#line 82
+ (jboolean)isValidIPv4WithNetmaskWithNSString:(NSString *)address {
  return OrgBouncycastleUtilIPAddress_isValidIPv4WithNetmaskWithNSString_(address);
}


#line 92
+ (jboolean)isValidIPv6WithNetmaskWithNSString:(NSString *)address {
  return OrgBouncycastleUtilIPAddress_isValidIPv6WithNetmaskWithNSString_(address);
}


#line 102
+ (jboolean)isMaskValueWithNSString:(NSString *)component
                            withInt:(jint)size {
  return OrgBouncycastleUtilIPAddress_isMaskValueWithNSString_withInt_(component, size);
}


#line 123
+ (jboolean)isValidIPv6WithNSString:(NSString *)address {
  return OrgBouncycastleUtilIPAddress_isValidIPv6WithNSString_(address);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 8, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isValidWithNSString:);
  methods[2].selector = @selector(isValidWithNetMaskWithNSString:);
  methods[3].selector = @selector(isValidIPv4WithNSString:);
  methods[4].selector = @selector(isValidIPv4WithNetmaskWithNSString:);
  methods[5].selector = @selector(isValidIPv6WithNetmaskWithNSString:);
  methods[6].selector = @selector(isMaskValueWithNSString:withInt:);
  methods[7].selector = @selector(isValidIPv6WithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isValid", "LNSString;", "isValidWithNetMask", "isValidIPv4", "isValidIPv4WithNetmask", "isValidIPv6WithNetmask", "isMaskValue", "LNSString;I", "isValidIPv6" };
  static const J2ObjcClassInfo _OrgBouncycastleUtilIPAddress = { "IPAddress", "org.bouncycastle.util", ptrTable, methods, NULL, 7, 0x1, 8, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleUtilIPAddress;
}

@end


#line 6
void OrgBouncycastleUtilIPAddress_init(OrgBouncycastleUtilIPAddress *self) {
  NSObject_init(self);
}


#line 6
OrgBouncycastleUtilIPAddress *new_OrgBouncycastleUtilIPAddress_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleUtilIPAddress, init)
}


#line 6
OrgBouncycastleUtilIPAddress *create_OrgBouncycastleUtilIPAddress_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleUtilIPAddress, init)
}


#line 15
jboolean OrgBouncycastleUtilIPAddress_isValidWithNSString_(NSString *address) {
  OrgBouncycastleUtilIPAddress_initialize();
  
#line 18
  return OrgBouncycastleUtilIPAddress_isValidIPv4WithNSString_(address) || OrgBouncycastleUtilIPAddress_isValidIPv6WithNSString_(address);
}


#line 28
jboolean OrgBouncycastleUtilIPAddress_isValidWithNetMaskWithNSString_(NSString *address) {
  OrgBouncycastleUtilIPAddress_initialize();
  
#line 31
  return OrgBouncycastleUtilIPAddress_isValidIPv4WithNetmaskWithNSString_(address) || OrgBouncycastleUtilIPAddress_isValidIPv6WithNetmaskWithNSString_(address);
}


#line 41
jboolean OrgBouncycastleUtilIPAddress_isValidIPv4WithNSString_(NSString *address) {
  OrgBouncycastleUtilIPAddress_initialize();
  
#line 44
  if ([((NSString *) nil_chk(address)) java_length] == 0) {
    
#line 46
    return false;
  }
  
#line 49
  jint octet;
  jint octets = 0;
  
#line 52
  NSString *temp = JreStrcat("$C", address, '.');
  
#line 54
  jint pos;
  jint start = 0;
  while (start < [temp java_length] &&
#line 57
  (pos = [temp java_indexOf:'.' fromIndex:start]) > start) {
    
#line 59
    if (octets == 4) {
      
#line 61
      return false;
    }
    @try {
      
#line 65
      octet = JavaLangInteger_parseIntWithNSString_([temp java_substring:start endIndex:pos]);
    }
    @catch (JavaLangNumberFormatException *ex) {
      
#line 69
      return false;
    }
    if (octet < 0 || octet > 255) {
      
#line 73
      return false;
    }
    start = pos + 1;
    octets++;
  }
  
#line 79
  return octets == 4;
}


#line 82
jboolean OrgBouncycastleUtilIPAddress_isValidIPv4WithNetmaskWithNSString_(NSString *address) {
  OrgBouncycastleUtilIPAddress_initialize();
  
#line 85
  jint index = [((NSString *) nil_chk(address)) java_indexOfString:@"/"];
  NSString *mask = [address java_substring:index + 1];
  
#line 88
  return (index > 0) && OrgBouncycastleUtilIPAddress_isValidIPv4WithNSString_([address java_substring:0 endIndex:index]) &&
#line 89
  (OrgBouncycastleUtilIPAddress_isValidIPv4WithNSString_(mask) || OrgBouncycastleUtilIPAddress_isMaskValueWithNSString_withInt_(mask, 32));
}


#line 92
jboolean OrgBouncycastleUtilIPAddress_isValidIPv6WithNetmaskWithNSString_(NSString *address) {
  OrgBouncycastleUtilIPAddress_initialize();
  
#line 95
  jint index = [((NSString *) nil_chk(address)) java_indexOfString:@"/"];
  NSString *mask = [address java_substring:index + 1];
  
#line 98
  return (index > 0) && (OrgBouncycastleUtilIPAddress_isValidIPv6WithNSString_([address java_substring:0 endIndex:index]) &&
#line 99
  (OrgBouncycastleUtilIPAddress_isValidIPv6WithNSString_(mask) || OrgBouncycastleUtilIPAddress_isMaskValueWithNSString_withInt_(mask, 128)));
}


#line 102
jboolean OrgBouncycastleUtilIPAddress_isMaskValueWithNSString_withInt_(NSString *component, jint size) {
  OrgBouncycastleUtilIPAddress_initialize();
  @try {
    
#line 106
    jint value = JavaLangInteger_parseIntWithNSString_(component);
    
#line 108
    return value >= 0 && value <= size;
  }
  @catch (JavaLangNumberFormatException *e) {
    
#line 112
    return false;
  }
}


#line 123
jboolean OrgBouncycastleUtilIPAddress_isValidIPv6WithNSString_(NSString *address) {
  OrgBouncycastleUtilIPAddress_initialize();
  
#line 126
  if ([((NSString *) nil_chk(address)) java_length] == 0) {
    
#line 128
    return false;
  }
  
#line 131
  jint octet;
  jint octets = 0;
  
#line 134
  NSString *temp = JreStrcat("$C", address, ':');
  jboolean doubleColonFound = false;
  jint pos;
  jint start = 0;
  while (start < [temp java_length] &&
#line 139
  (pos = [temp java_indexOf:':' fromIndex:start]) >= start) {
    
#line 141
    if (octets == 8) {
      
#line 143
      return false;
    }
    
#line 146
    if (start != pos) {
      
#line 148
      NSString *value = [temp java_substring:start endIndex:pos];
      
#line 150
      if (pos == ([temp java_length] - 1) && [((NSString *) nil_chk(value)) java_indexOf:'.'] > 0) {
        
#line 152
        if (!OrgBouncycastleUtilIPAddress_isValidIPv4WithNSString_(value)) {
          
#line 154
          return false;
        }
        
#line 157
        octets++;
      }
      else {
        
#line 161
        @try {
          
#line 163
          octet = JavaLangInteger_parseIntWithNSString_withInt_([temp java_substring:start endIndex:pos], 16);
        }
        @catch (JavaLangNumberFormatException *ex) {
          
#line 167
          return false;
        }
        if (octet < 0 || octet > (jint) 0xffff) {
          
#line 171
          return false;
        }
      }
    }
    else {
      
#line 177
      if (pos != 1 && pos != [temp java_length] - 1 && doubleColonFound) {
        
#line 179
        return false;
      }
      doubleColonFound = true;
    }
    start = pos + 1;
    octets++;
  }
  
#line 187
  return octets == 8 || doubleColonFound;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleUtilIPAddress)
