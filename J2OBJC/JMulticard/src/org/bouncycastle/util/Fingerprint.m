//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/Fingerprint.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/annotation/Annotation.h"
#include "org/bouncycastle/crypto/digests/SHA512tDigest.h"
#include "org/bouncycastle/crypto/digests/SHAKEDigest.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/Fingerprint.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/util/Fingerprint must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleUtilFingerprint () {
 @public
  IOSByteArray *fingerprint_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleUtilFingerprint, fingerprint_, IOSByteArray *)

inline IOSCharArray *OrgBouncycastleUtilFingerprint_get_encodingTable(void);
inline IOSCharArray *OrgBouncycastleUtilFingerprint_set_encodingTable(IOSCharArray *value);
static IOSCharArray *OrgBouncycastleUtilFingerprint_encodingTable;
J2OBJC_STATIC_FIELD_OBJ(OrgBouncycastleUtilFingerprint, encodingTable, IOSCharArray *)

__attribute__((unused)) static IOSObjectArray *OrgBouncycastleUtilFingerprint__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *OrgBouncycastleUtilFingerprint__Annotations$1(void);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/Fingerprint.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleUtilFingerprint)


#line 9
@implementation OrgBouncycastleUtilFingerprint


#line 25
- (instancetype)initWithByteArray:(IOSByteArray *)source {
  OrgBouncycastleUtilFingerprint_initWithByteArray_(self, source);
  return self;
}


#line 36
- (instancetype)initWithByteArray:(IOSByteArray *)source
                          withInt:(jint)bitLength {
  OrgBouncycastleUtilFingerprint_initWithByteArray_withInt_(self, source, bitLength);
  return self;
}


#line 48
- (instancetype)initWithByteArray:(IOSByteArray *)source
                      withBoolean:(jboolean)useSHA512t {
  OrgBouncycastleUtilFingerprint_initWithByteArray_withBoolean_(self, source, useSHA512t);
  return self;
}


#line 61
- (IOSByteArray *)getFingerprint {
  
#line 63
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(fingerprint_);
}


#line 66
- (NSString *)description {
  
#line 69
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(fingerprint_))->size_; i++) {
    
#line 72
    if (i > 0) {
      
#line 74
      (void) [sb appendWithNSString:@":"];
    }
    (void) [sb appendWithChar:IOSCharArray_Get(nil_chk(OrgBouncycastleUtilFingerprint_encodingTable), (JreURShift32(IOSByteArray_Get(fingerprint_, i), 4)) & (jint) 0xf)];
    (void) [sb appendWithChar:IOSCharArray_Get(nil_chk(OrgBouncycastleUtilFingerprint_encodingTable), IOSByteArray_Get(fingerprint_, i) & (jint) 0x0f)];
  }
  
#line 80
  return [sb description];
}


#line 83
- (jboolean)isEqual:(id)o {
  
#line 86
  if (JreObjectEqualsEquals(o, self)) {
    
#line 88
    return true;
  }
  if ([o isKindOfClass:[OrgBouncycastleUtilFingerprint class]]) {
    
#line 92
    return OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(((OrgBouncycastleUtilFingerprint *) nil_chk(((OrgBouncycastleUtilFingerprint *) o)))->fingerprint_, fingerprint_);
  }
  
#line 95
  return false;
}


#line 98
- (NSUInteger)hash {
  
#line 101
  return OrgBouncycastleUtilArrays_hashCodeWithByteArray_(fingerprint_);
}


#line 111
+ (IOSByteArray *)calculateFingerprintWithByteArray:(IOSByteArray *)input {
  return OrgBouncycastleUtilFingerprint_calculateFingerprintWithByteArray_(input);
}


#line 124
+ (IOSByteArray *)calculateFingerprintWithByteArray:(IOSByteArray *)input
                                            withInt:(jint)bitLength {
  return OrgBouncycastleUtilFingerprint_calculateFingerprintWithByteArray_withInt_(input, bitLength);
}


#line 150
+ (IOSByteArray *)calculateFingerprintSHA512_160WithByteArray:(IOSByteArray *)input {
  return OrgBouncycastleUtilFingerprint_calculateFingerprintSHA512_160WithByteArray_(input);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, 3, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 8, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 8, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 9, 0, -1, -1, 10, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(initWithByteArray:withInt:);
  methods[2].selector = @selector(initWithByteArray:withBoolean:);
  methods[3].selector = @selector(getFingerprint);
  methods[4].selector = @selector(description);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(hash);
  methods[7].selector = @selector(calculateFingerprintWithByteArray:);
  methods[8].selector = @selector(calculateFingerprintWithByteArray:withInt:);
  methods[9].selector = @selector(calculateFingerprintSHA512_160WithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "encodingTable", "[C", .constantValue.asLong = 0, 0xa, -1, 11, -1, -1 },
    { "fingerprint_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "[BI", "[BZ", (void *)&OrgBouncycastleUtilFingerprint__Annotations$0, "toString", "equals", "LNSObject;", "hashCode", "calculateFingerprint", "calculateFingerprintSHA512_160", (void *)&OrgBouncycastleUtilFingerprint__Annotations$1, &OrgBouncycastleUtilFingerprint_encodingTable };
  static const J2ObjcClassInfo _OrgBouncycastleUtilFingerprint = { "Fingerprint", "org.bouncycastle.util", ptrTable, methods, fields, 7, 0x1, 10, 2, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleUtilFingerprint;
}

+ (void)initialize {
  if (self == [OrgBouncycastleUtilFingerprint class]) {
    OrgBouncycastleUtilFingerprint_encodingTable = [IOSCharArray newArrayWithChars:(jchar[]){
#line 13
      '0', '1', '2', '3', '4', '5', '6', '7',
#line 14
      '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' } count:16];
      J2OBJC_SET_INITIALIZED(OrgBouncycastleUtilFingerprint)
    }
  }

@end


#line 25
void OrgBouncycastleUtilFingerprint_initWithByteArray_(OrgBouncycastleUtilFingerprint *self, IOSByteArray *source) {
  OrgBouncycastleUtilFingerprint_initWithByteArray_withInt_(self,
#line 27
  source, 160);
}


#line 25
OrgBouncycastleUtilFingerprint *new_OrgBouncycastleUtilFingerprint_initWithByteArray_(IOSByteArray *source) {
  J2OBJC_NEW_IMPL(OrgBouncycastleUtilFingerprint, initWithByteArray_, source)
}


#line 25
OrgBouncycastleUtilFingerprint *create_OrgBouncycastleUtilFingerprint_initWithByteArray_(IOSByteArray *source) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleUtilFingerprint, initWithByteArray_, source)
}


#line 36
void OrgBouncycastleUtilFingerprint_initWithByteArray_withInt_(OrgBouncycastleUtilFingerprint *self, IOSByteArray *source, jint bitLength) {
  NSObject_init(self);
  self->fingerprint_ = OrgBouncycastleUtilFingerprint_calculateFingerprintWithByteArray_withInt_(source, bitLength);
}


#line 36
OrgBouncycastleUtilFingerprint *new_OrgBouncycastleUtilFingerprint_initWithByteArray_withInt_(IOSByteArray *source, jint bitLength) {
  J2OBJC_NEW_IMPL(OrgBouncycastleUtilFingerprint, initWithByteArray_withInt_, source, bitLength)
}


#line 36
OrgBouncycastleUtilFingerprint *create_OrgBouncycastleUtilFingerprint_initWithByteArray_withInt_(IOSByteArray *source, jint bitLength) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleUtilFingerprint, initWithByteArray_withInt_, source, bitLength)
}


#line 48
void OrgBouncycastleUtilFingerprint_initWithByteArray_withBoolean_(OrgBouncycastleUtilFingerprint *self, IOSByteArray *source, jboolean useSHA512t) {
  NSObject_init(self);
  
#line 51
  if (useSHA512t) {
    
#line 53
    self->fingerprint_ = OrgBouncycastleUtilFingerprint_calculateFingerprintSHA512_160WithByteArray_(source);
  }
  else {
    
#line 57
    self->fingerprint_ = OrgBouncycastleUtilFingerprint_calculateFingerprintWithByteArray_(source);
  }
}


#line 48
OrgBouncycastleUtilFingerprint *new_OrgBouncycastleUtilFingerprint_initWithByteArray_withBoolean_(IOSByteArray *source, jboolean useSHA512t) {
  J2OBJC_NEW_IMPL(OrgBouncycastleUtilFingerprint, initWithByteArray_withBoolean_, source, useSHA512t)
}


#line 48
OrgBouncycastleUtilFingerprint *create_OrgBouncycastleUtilFingerprint_initWithByteArray_withBoolean_(IOSByteArray *source, jboolean useSHA512t) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleUtilFingerprint, initWithByteArray_withBoolean_, source, useSHA512t)
}


#line 111
IOSByteArray *OrgBouncycastleUtilFingerprint_calculateFingerprintWithByteArray_(IOSByteArray *input) {
  OrgBouncycastleUtilFingerprint_initialize();
  return OrgBouncycastleUtilFingerprint_calculateFingerprintWithByteArray_withInt_(input, 160);
}


#line 124
IOSByteArray *OrgBouncycastleUtilFingerprint_calculateFingerprintWithByteArray_withInt_(IOSByteArray *input, jint bitLength) {
  OrgBouncycastleUtilFingerprint_initialize();
  if (JreIntMod(bitLength, 8) != 0) {
    
#line 128
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"bitLength must be a multiple of 8");
  }
  
#line 131
  OrgBouncycastleCryptoDigestsSHAKEDigest *digest = new_OrgBouncycastleCryptoDigestsSHAKEDigest_initWithInt_(256);
  
#line 133
  [digest updateWithByteArray:input withInt:0 withInt:((IOSByteArray *) nil_chk(input))->size_];
  
#line 135
  IOSByteArray *rv = [IOSByteArray newArrayWithLength:JreIntDiv(bitLength, 8)];
  
#line 137
  [digest doFinalWithByteArray:rv withInt:0 withInt:JreIntDiv(bitLength, 8)];
  
#line 139
  return rv;
}


#line 150
IOSByteArray *OrgBouncycastleUtilFingerprint_calculateFingerprintSHA512_160WithByteArray_(IOSByteArray *input) {
  OrgBouncycastleUtilFingerprint_initialize();
  
#line 153
  OrgBouncycastleCryptoDigestsSHA512tDigest *digest = new_OrgBouncycastleCryptoDigestsSHA512tDigest_initWithInt_(160);
  
#line 155
  [digest updateWithByteArray:input withInt:0 withInt:((IOSByteArray *) nil_chk(input))->size_];
  
#line 157
  IOSByteArray *rv = [IOSByteArray newArrayWithLength:[digest getDigestSize]];
  
#line 159
  [digest doFinalWithByteArray:rv withInt:0];
  
#line 161
  return rv;
}

IOSObjectArray *OrgBouncycastleUtilFingerprint__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgBouncycastleUtilFingerprint__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleUtilFingerprint)
