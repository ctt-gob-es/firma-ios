//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/Strings.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/security/AccessController.h"
#include "java/security/PrivilegedAction.h"
#include "java/util/ArrayList.h"
#include "java/util/Vector.h"
#include "org/bouncycastle/util/StringList.h"
#include "org/bouncycastle/util/Strings.h"
#include "org/bouncycastle/util/encoders/UTF8.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/util/Strings must be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline NSString *OrgBouncycastleUtilStrings_get_LINE_SEPARATOR(void);
inline NSString *OrgBouncycastleUtilStrings_set_LINE_SEPARATOR(NSString *value);
static NSString *OrgBouncycastleUtilStrings_LINE_SEPARATOR;
J2OBJC_STATIC_FIELD_OBJ(OrgBouncycastleUtilStrings, LINE_SEPARATOR, NSString *)

@interface OrgBouncycastleUtilStrings_1 : NSObject < JavaSecurityPrivilegedAction >

- (instancetype)init;

- (NSString *)run;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleUtilStrings_1)

__attribute__((unused)) static void OrgBouncycastleUtilStrings_1_init(OrgBouncycastleUtilStrings_1 *self);

__attribute__((unused)) static OrgBouncycastleUtilStrings_1 *new_OrgBouncycastleUtilStrings_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleUtilStrings_1 *create_OrgBouncycastleUtilStrings_1_init(void);

@interface OrgBouncycastleUtilStrings_StringListImpl : JavaUtilArrayList < OrgBouncycastleUtilStringList >

- (instancetype)init;

- (jboolean)addWithId:(NSString *)s;

- (NSString *)setWithInt:(jint)index
                  withId:(NSString *)element;

- (void)addWithInt:(jint)index
            withId:(NSString *)element;

- (IOSObjectArray *)toStringArray;

- (IOSObjectArray *)toStringArrayWithInt:(jint)from
                                 withInt:(jint)to;

- (NSString *)removeWithInt:(jint)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleUtilStrings_StringListImpl)

__attribute__((unused)) static void OrgBouncycastleUtilStrings_StringListImpl_init(OrgBouncycastleUtilStrings_StringListImpl *self);

__attribute__((unused)) static OrgBouncycastleUtilStrings_StringListImpl *new_OrgBouncycastleUtilStrings_StringListImpl_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleUtilStrings_StringListImpl *create_OrgBouncycastleUtilStrings_StringListImpl_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleUtilStrings_StringListImpl)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/Strings.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleUtilStrings)


#line 16
@implementation OrgBouncycastleUtilStrings

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 16
- (instancetype)init {
  OrgBouncycastleUtilStrings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 42
+ (NSString *)fromUTF8ByteArrayWithByteArray:(IOSByteArray *)bytes {
  return OrgBouncycastleUtilStrings_fromUTF8ByteArrayWithByteArray_(bytes);
}


#line 51
+ (NSString *)fromUTF8ByteArrayWithByteArray:(IOSByteArray *)bytes
                                     withInt:(jint)off
                                     withInt:(jint)length {
  return OrgBouncycastleUtilStrings_fromUTF8ByteArrayWithByteArray_withInt_withInt_(bytes, off, length);
}


#line 60
+ (IOSByteArray *)toUTF8ByteArrayWithNSString:(NSString *)string {
  return OrgBouncycastleUtilStrings_toUTF8ByteArrayWithNSString_(string);
}

+ (IOSByteArray *)toUTF8ByteArrayWithCharArray:(IOSCharArray *)string {
  return OrgBouncycastleUtilStrings_toUTF8ByteArrayWithCharArray_(string);
}


#line 77
+ (void)toUTF8ByteArrayWithCharArray:(IOSCharArray *)string
              withJavaIoOutputStream:(JavaIoOutputStream *)sOut {
  OrgBouncycastleUtilStrings_toUTF8ByteArrayWithCharArray_withJavaIoOutputStream_(string, sOut);
}


#line 129
+ (NSString *)toUpperCaseWithNSString:(NSString *)string {
  return OrgBouncycastleUtilStrings_toUpperCaseWithNSString_(string);
}


#line 155
+ (NSString *)toLowerCaseWithNSString:(NSString *)string {
  return OrgBouncycastleUtilStrings_toLowerCaseWithNSString_(string);
}


#line 175
+ (IOSByteArray *)toByteArrayWithCharArray:(IOSCharArray *)chars {
  return OrgBouncycastleUtilStrings_toByteArrayWithCharArray_(chars);
}


#line 187
+ (IOSByteArray *)toByteArrayWithNSString:(NSString *)string {
  return OrgBouncycastleUtilStrings_toByteArrayWithNSString_(string);
}


#line 199
+ (jint)toByteArrayWithNSString:(NSString *)s
                  withByteArray:(IOSByteArray *)buf
                        withInt:(jint)off {
  return OrgBouncycastleUtilStrings_toByteArrayWithNSString_withByteArray_withInt_(s, buf, off);
}


#line 216
+ (jboolean)constantTimeAreEqualWithNSString:(NSString *)a
                                withNSString:(NSString *)b {
  return OrgBouncycastleUtilStrings_constantTimeAreEqualWithNSString_withNSString_(a, b);
}


#line 235
+ (NSString *)fromByteArrayWithByteArray:(IOSByteArray *)bytes {
  return OrgBouncycastleUtilStrings_fromByteArrayWithByteArray_(bytes);
}


#line 246
+ (IOSCharArray *)asCharArrayWithByteArray:(IOSByteArray *)bytes {
  return OrgBouncycastleUtilStrings_asCharArrayWithByteArray_(bytes);
}


#line 258
+ (IOSObjectArray *)splitWithNSString:(NSString *)input
                             withChar:(jchar)delimiter {
  return OrgBouncycastleUtilStrings_splitWithNSString_withChar_(input, delimiter);
}


#line 289
+ (id<OrgBouncycastleUtilStringList>)newList {
  return OrgBouncycastleUtilStrings_newList();
}


#line 294
+ (NSString *)lineSeparator {
  return OrgBouncycastleUtilStrings_lineSeparator();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 6, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 8, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 9, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 10, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 10, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 1, -1, -1, -1, -1 },
    { NULL, "[C", 0x9, 15, 1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleUtilStringList;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(fromUTF8ByteArrayWithByteArray:);
  methods[2].selector = @selector(fromUTF8ByteArrayWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(toUTF8ByteArrayWithNSString:);
  methods[4].selector = @selector(toUTF8ByteArrayWithCharArray:);
  methods[5].selector = @selector(toUTF8ByteArrayWithCharArray:withJavaIoOutputStream:);
  methods[6].selector = @selector(toUpperCaseWithNSString:);
  methods[7].selector = @selector(toLowerCaseWithNSString:);
  methods[8].selector = @selector(toByteArrayWithCharArray:);
  methods[9].selector = @selector(toByteArrayWithNSString:);
  methods[10].selector = @selector(toByteArrayWithNSString:withByteArray:withInt:);
  methods[11].selector = @selector(constantTimeAreEqualWithNSString:withNSString:);
  methods[12].selector = @selector(fromByteArrayWithByteArray:);
  methods[13].selector = @selector(asCharArrayWithByteArray:);
  methods[14].selector = @selector(splitWithNSString:withChar:);
  methods[15].selector = @selector(newList);
  methods[16].selector = @selector(lineSeparator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LINE_SEPARATOR", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 18, -1, -1 },
  };
  static const void *ptrTable[] = { "fromUTF8ByteArray", "[B", "[BII", "toUTF8ByteArray", "LNSString;", "[C", "[CLJavaIoOutputStream;", "LJavaIoIOException;", "toUpperCase", "toLowerCase", "toByteArray", "LNSString;[BI", "constantTimeAreEqual", "LNSString;LNSString;", "fromByteArray", "asCharArray", "split", "LNSString;C", &OrgBouncycastleUtilStrings_LINE_SEPARATOR, "LOrgBouncycastleUtilStrings_StringListImpl;" };
  static const J2ObjcClassInfo _OrgBouncycastleUtilStrings = { "Strings", "org.bouncycastle.util", ptrTable, methods, fields, 7, 0x11, 17, 1, -1, 19, -1, -1, -1 };
  return &_OrgBouncycastleUtilStrings;
}

+ (void)initialize {
  if (self == [OrgBouncycastleUtilStrings class]) {
    {
      
#line 21
      @try {
        OrgBouncycastleUtilStrings_LINE_SEPARATOR = JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedAction_(new_OrgBouncycastleUtilStrings_1_init());
      }
      @catch (
#line 31
      JavaLangException *e) {
        @try {
          
#line 34
          OrgBouncycastleUtilStrings_LINE_SEPARATOR = NSString_java_formatWithNSString_withNSObjectArray_(@"%n", [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
        }
        @catch (JavaLangException *ef) {
          OrgBouncycastleUtilStrings_LINE_SEPARATOR = @"\n";
        }
      }
    }
    J2OBJC_SET_INITIALIZED(OrgBouncycastleUtilStrings)
  }
}

@end


#line 16
void OrgBouncycastleUtilStrings_init(OrgBouncycastleUtilStrings *self) {
  NSObject_init(self);
}


#line 16
OrgBouncycastleUtilStrings *new_OrgBouncycastleUtilStrings_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleUtilStrings, init)
}


#line 16
OrgBouncycastleUtilStrings *create_OrgBouncycastleUtilStrings_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleUtilStrings, init)
}


#line 42
NSString *OrgBouncycastleUtilStrings_fromUTF8ByteArrayWithByteArray_(IOSByteArray *bytes) {
  OrgBouncycastleUtilStrings_initialize();
  
#line 43
  IOSCharArray *chars = [IOSCharArray newArrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_];
  jint len = OrgBouncycastleUtilEncodersUTF8_transcodeToUTF16WithByteArray_withCharArray_(bytes, chars);
  if (len < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid UTF-8 input");
  }
  return [NSString java_stringWithCharacters:chars offset:0 length:len];
}


#line 51
NSString *OrgBouncycastleUtilStrings_fromUTF8ByteArrayWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint off, jint length) {
  OrgBouncycastleUtilStrings_initialize();
  
#line 52
  IOSCharArray *chars = [IOSCharArray newArrayWithLength:length];
  jint len = OrgBouncycastleUtilEncodersUTF8_transcodeToUTF16WithByteArray_withInt_withInt_withCharArray_(bytes, off, length, chars);
  if (len < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid UTF-8 input");
  }
  return [NSString java_stringWithCharacters:chars offset:0 length:len];
}


#line 60
IOSByteArray *OrgBouncycastleUtilStrings_toUTF8ByteArrayWithNSString_(NSString *string) {
  OrgBouncycastleUtilStrings_initialize();
  
#line 61
  return OrgBouncycastleUtilStrings_toUTF8ByteArrayWithCharArray_([((NSString *) nil_chk(string)) java_toCharArray]);
}


#line 64
IOSByteArray *OrgBouncycastleUtilStrings_toUTF8ByteArrayWithCharArray_(IOSCharArray *string) {
  OrgBouncycastleUtilStrings_initialize();
  
#line 65
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  
#line 67
  @try {
    OrgBouncycastleUtilStrings_toUTF8ByteArrayWithCharArray_withJavaIoOutputStream_(string, bOut);
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cannot encode string to byte array!");
  }
  
#line 74
  return [bOut toByteArray];
}


#line 77
void OrgBouncycastleUtilStrings_toUTF8ByteArrayWithCharArray_withJavaIoOutputStream_(IOSCharArray *string, JavaIoOutputStream *sOut) {
  OrgBouncycastleUtilStrings_initialize();
  IOSCharArray *c = string;
  jint i = 0;
  
#line 82
  while (i < ((IOSCharArray *) nil_chk(c))->size_) {
    jchar ch = IOSCharArray_Get(c, i);
    
#line 85
    if (ch < (jint) 0x0080) {
      [((JavaIoOutputStream *) nil_chk(sOut)) writeWithInt:ch];
    }
    else if (ch < (jint) 0x0800) {
      [((JavaIoOutputStream *) nil_chk(sOut)) writeWithInt:(jint) 0xc0 | (JreRShift32(ch, 6))];
      [sOut writeWithInt:(jint) 0x80 | (ch & (jint) 0x3f)];
    }
    else
#line 93
    if (ch >= (jint) 0xD800 && ch <= (jint) 0xDFFF) {
      
#line 96
      if (i + 1 >= c->size_) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"invalid UTF-16 codepoint");
      }
      jchar W1 = ch;
      ch = IOSCharArray_Get(c, ++i);
      jchar W2 = ch;
      
#line 104
      if (W1 > (jint) 0xDBFF) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"invalid UTF-16 codepoint");
      }
      jint codePoint = ((JreLShift32((W1 & (jint) 0x03FF), 10)) | (W2 & (jint) 0x03FF)) + (jint) 0x10000;
      [((JavaIoOutputStream *) nil_chk(sOut)) writeWithInt:(jint) 0xf0 | (JreRShift32(codePoint, 18))];
      [sOut writeWithInt:(jint) 0x80 | ((JreRShift32(codePoint, 12)) & (jint) 0x3F)];
      [sOut writeWithInt:(jint) 0x80 | ((JreRShift32(codePoint, 6)) & (jint) 0x3F)];
      [sOut writeWithInt:(jint) 0x80 | (codePoint & (jint) 0x3F)];
    }
    else {
      [((JavaIoOutputStream *) nil_chk(sOut)) writeWithInt:(jint) 0xe0 | (JreRShift32(ch, 12))];
      [sOut writeWithInt:(jint) 0x80 | ((JreRShift32(ch, 6)) & (jint) 0x3F)];
      [sOut writeWithInt:(jint) 0x80 | (ch & (jint) 0x3F)];
    }
    
#line 119
    i++;
  }
}


#line 129
NSString *OrgBouncycastleUtilStrings_toUpperCaseWithNSString_(NSString *string) {
  OrgBouncycastleUtilStrings_initialize();
  jboolean changed = false;
  IOSCharArray *chars = [((NSString *) nil_chk(string)) java_toCharArray];
  
#line 134
  for (jint i = 0; i != ((IOSCharArray *) nil_chk(chars))->size_; i++) {
    jchar ch = IOSCharArray_Get(chars, i);
    if ('a' <= ch && 'z' >= ch) {
      changed = true;
      *IOSCharArray_GetRef(chars, i) = (jchar) (ch - 'a' + 'A');
    }
  }
  
#line 142
  if (changed) {
    return [NSString java_stringWithCharacters:chars];
  }
  
#line 146
  return string;
}


#line 155
NSString *OrgBouncycastleUtilStrings_toLowerCaseWithNSString_(NSString *string) {
  OrgBouncycastleUtilStrings_initialize();
  jboolean changed = false;
  IOSCharArray *chars = [((NSString *) nil_chk(string)) java_toCharArray];
  
#line 160
  for (jint i = 0; i != ((IOSCharArray *) nil_chk(chars))->size_; i++) {
    jchar ch = IOSCharArray_Get(chars, i);
    if ('A' <= ch && 'Z' >= ch) {
      changed = true;
      *IOSCharArray_GetRef(chars, i) = (jchar) (ch - 'A' + 'a');
    }
  }
  
#line 168
  if (changed) {
    return [NSString java_stringWithCharacters:chars];
  }
  
#line 172
  return string;
}


#line 175
IOSByteArray *OrgBouncycastleUtilStrings_toByteArrayWithCharArray_(IOSCharArray *chars) {
  OrgBouncycastleUtilStrings_initialize();
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:((IOSCharArray *) nil_chk(chars))->size_];
  
#line 179
  for (jint i = 0; i != bytes->size_; i++) {
    *IOSByteArray_GetRef(bytes, i) = (jbyte) IOSCharArray_Get(chars, i);
  }
  
#line 183
  return bytes;
}


#line 187
IOSByteArray *OrgBouncycastleUtilStrings_toByteArrayWithNSString_(NSString *string) {
  OrgBouncycastleUtilStrings_initialize();
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:[((NSString *) nil_chk(string)) java_length]];
  
#line 191
  for (jint i = 0; i != bytes->size_; i++) {
    jchar ch = [string charAtWithInt:i];
    *IOSByteArray_GetRef(bytes, i) = (jbyte) ch;
  }
  
#line 196
  return bytes;
}


#line 199
jint OrgBouncycastleUtilStrings_toByteArrayWithNSString_withByteArray_withInt_(NSString *s, IOSByteArray *buf, jint off) {
  OrgBouncycastleUtilStrings_initialize();
  
#line 200
  jint count = [((NSString *) nil_chk(s)) java_length];
  for (jint i = 0; i < count; ++i) {
    jchar c = [s charAtWithInt:i];
    *IOSByteArray_GetRef(nil_chk(buf), off + i) = (jbyte) c;
  }
  return count;
}


#line 216
jboolean OrgBouncycastleUtilStrings_constantTimeAreEqualWithNSString_withNSString_(NSString *a, NSString *b) {
  OrgBouncycastleUtilStrings_initialize();
  jboolean isEqual = [((NSString *) nil_chk(a)) java_length] == [((NSString *) nil_chk(b)) java_length];
  jint len = [a java_length];
  
#line 221
  for (jint i = 0; i != len; i++) {
    
#line 223
    isEqual &= ([a charAtWithInt:i] == [b charAtWithInt:i]);
  }
  
#line 226
  return isEqual;
}


#line 235
NSString *OrgBouncycastleUtilStrings_fromByteArrayWithByteArray_(IOSByteArray *bytes) {
  OrgBouncycastleUtilStrings_initialize();
  return [NSString java_stringWithCharacters:OrgBouncycastleUtilStrings_asCharArrayWithByteArray_(bytes)];
}


#line 246
IOSCharArray *OrgBouncycastleUtilStrings_asCharArrayWithByteArray_(IOSByteArray *bytes) {
  OrgBouncycastleUtilStrings_initialize();
  IOSCharArray *chars = [IOSCharArray newArrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_];
  
#line 250
  for (jint i = 0; i != chars->size_; i++) {
    
#line 252
    *IOSCharArray_GetRef(chars, i) = (jchar) (IOSByteArray_Get(bytes, i) & (jint) 0xff);
  }
  
#line 255
  return chars;
}


#line 258
IOSObjectArray *OrgBouncycastleUtilStrings_splitWithNSString_withChar_(NSString *input, jchar delimiter) {
  OrgBouncycastleUtilStrings_initialize();
  JavaUtilVector *v = new_JavaUtilVector_init();
  jboolean moreTokens = true;
  NSString *subString;
  
#line 264
  while (moreTokens) {
    
#line 266
    jint tokenLocation = [((NSString *) nil_chk(input)) java_indexOf:delimiter];
    if (tokenLocation > 0) {
      
#line 269
      subString = [input java_substring:0 endIndex:tokenLocation];
      [v addElementWithId:subString];
      input = [input java_substring:tokenLocation + 1];
    }
    else {
      
#line 275
      moreTokens = false;
      [v addElementWithId:input];
    }
  }
  
#line 280
  IOSObjectArray *res = [IOSObjectArray newArrayWithLength:[v size] type:NSString_class_()];
  
#line 282
  for (jint i = 0; i != res->size_; i++) {
    
#line 284
    (void) IOSObjectArray_Set(res, i, (NSString *) cast_chk([v elementAtWithInt:i], [NSString class]));
  }
  return res;
}


#line 289
id<OrgBouncycastleUtilStringList> OrgBouncycastleUtilStrings_newList() {
  OrgBouncycastleUtilStrings_initialize();
  return new_OrgBouncycastleUtilStrings_StringListImpl_init();
}

NSString *OrgBouncycastleUtilStrings_lineSeparator() {
  OrgBouncycastleUtilStrings_initialize();
  return OrgBouncycastleUtilStrings_LINE_SEPARATOR;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleUtilStrings)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/Strings.java"


#line 22
@implementation OrgBouncycastleUtilStrings_1

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 22
- (instancetype)init {
  OrgBouncycastleUtilStrings_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 23
- (NSString *)run {
  
#line 26
  return JavaLangSystem_getPropertyWithNSString_(@"line.separator");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgBouncycastleUtilStrings;", "Ljava/lang/Object;Ljava/security/PrivilegedAction<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgBouncycastleUtilStrings_1 = { "", "org.bouncycastle.util", ptrTable, methods, NULL, 7, 0x8000, 2, 0, 0, -1, -1, 1, -1 };
  return &_OrgBouncycastleUtilStrings_1;
}

@end


#line 22
void OrgBouncycastleUtilStrings_1_init(OrgBouncycastleUtilStrings_1 *self) {
  NSObject_init(self);
}


#line 22
OrgBouncycastleUtilStrings_1 *new_OrgBouncycastleUtilStrings_1_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleUtilStrings_1, init)
}


#line 22
OrgBouncycastleUtilStrings_1 *create_OrgBouncycastleUtilStrings_1_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleUtilStrings_1, init)
}

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/Strings.java"


#line 299
@implementation OrgBouncycastleUtilStrings_StringListImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 299
- (instancetype)init {
  OrgBouncycastleUtilStrings_StringListImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 303
- (jboolean)addWithId:(NSString *)s {
  
#line 306
  return [super addWithId:s];
}

- (NSString *)setWithInt:(jint)index
                  withId:(NSString *)element {
  
#line 312
  return [super setWithInt:index withId:element];
}


#line 315
- (void)addWithInt:(jint)index
            withId:(NSString *)element {
  
#line 318
  [super addWithInt:index withId:element];
}


#line 321
- (IOSObjectArray *)toStringArray {
  
#line 324
  IOSObjectArray *strs = [IOSObjectArray newArrayWithLength:[self size] type:NSString_class_()];
  
#line 326
  for (jint i = 0; i != strs->size_; i++) {
    
#line 328
    (void) IOSObjectArray_Set(strs, i, [self getWithInt:i]);
  }
  
#line 331
  return strs;
}


#line 334
- (IOSObjectArray *)toStringArrayWithInt:(jint)from
                                 withInt:(jint)to {
  
#line 337
  IOSObjectArray *strs = [IOSObjectArray newArrayWithLength:to - from type:NSString_class_()];
  
#line 339
  for (jint i = from; i != [self size] && i != to; i++) {
    
#line 341
    (void) IOSObjectArray_Set(strs, i - from, [self getWithInt:i]);
  }
  
#line 344
  return strs;
}

- (jboolean)addWithNSString:(NSString *)arg0 {
  return [self addWithId:arg0];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 3, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addWithId:);
  methods[2].selector = @selector(setWithInt:withId:);
  methods[3].selector = @selector(addWithInt:withId:);
  methods[4].selector = @selector(toStringArray);
  methods[5].selector = @selector(toStringArrayWithInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "add", "LNSString;", "set", "ILNSString;", "toStringArray", "II", "LOrgBouncycastleUtilStrings;", "Ljava/util/ArrayList<Ljava/lang/String;>;Lorg/bouncycastle/util/StringList;" };
  static const J2ObjcClassInfo _OrgBouncycastleUtilStrings_StringListImpl = { "StringListImpl", "org.bouncycastle.util", ptrTable, methods, NULL, 7, 0xa, 6, 0, 6, -1, -1, 7, -1 };
  return &_OrgBouncycastleUtilStrings_StringListImpl;
}

@end


#line 299
void OrgBouncycastleUtilStrings_StringListImpl_init(OrgBouncycastleUtilStrings_StringListImpl *self) {
  JavaUtilArrayList_init(self);
}


#line 299
OrgBouncycastleUtilStrings_StringListImpl *new_OrgBouncycastleUtilStrings_StringListImpl_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleUtilStrings_StringListImpl, init)
}


#line 299
OrgBouncycastleUtilStrings_StringListImpl *create_OrgBouncycastleUtilStrings_StringListImpl_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleUtilStrings_StringListImpl, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleUtilStrings_StringListImpl)
