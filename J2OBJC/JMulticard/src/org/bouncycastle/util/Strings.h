//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/Strings.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleUtilStrings")
#ifdef RESTRICT_OrgBouncycastleUtilStrings
#define INCLUDE_ALL_OrgBouncycastleUtilStrings 0
#else
#define INCLUDE_ALL_OrgBouncycastleUtilStrings 1
#endif
#undef RESTRICT_OrgBouncycastleUtilStrings

#if !defined (OrgBouncycastleUtilStrings_) && (INCLUDE_ALL_OrgBouncycastleUtilStrings || defined(INCLUDE_OrgBouncycastleUtilStrings))
#define OrgBouncycastleUtilStrings_

@class IOSByteArray;
@class IOSCharArray;
@class IOSObjectArray;
@class JavaIoOutputStream;
@protocol OrgBouncycastleUtilStringList;

/*!
 @brief String utilities.
 */
@interface OrgBouncycastleUtilStrings : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Do a simple conversion of an array of 8 bit characters into a string.
 @param bytes 8 bit characters.
 @return resulting String.
 */
+ (IOSCharArray *)asCharArrayWithByteArray:(IOSByteArray *)bytes;

/*!
 @brief Constant time string comparison.
 @param a a string.
 @param b another string to compare to a.
 @return true if a and b represent the same string, false otherwise.
 */
+ (jboolean)constantTimeAreEqualWithNSString:(NSString *)a
                                withNSString:(NSString *)b;

/*!
 @brief Convert an array of 8 bit characters into a string.
 @param bytes 8 bit characters.
 @return resulting String.
 */
+ (NSString *)fromByteArrayWithByteArray:(IOSByteArray *)bytes;

+ (NSString *)fromUTF8ByteArrayWithByteArray:(IOSByteArray *)bytes;

+ (NSString *)fromUTF8ByteArrayWithByteArray:(IOSByteArray *)bytes
                                     withInt:(jint)off
                                     withInt:(jint)length;

+ (NSString *)lineSeparator;

+ (id<OrgBouncycastleUtilStringList>)newList OBJC_METHOD_FAMILY_NONE;

+ (IOSObjectArray *)splitWithNSString:(NSString *)input
                             withChar:(jchar)delimiter;

+ (IOSByteArray *)toByteArrayWithCharArray:(IOSCharArray *)chars;

+ (IOSByteArray *)toByteArrayWithNSString:(NSString *)string;

+ (jint)toByteArrayWithNSString:(NSString *)s
                  withByteArray:(IOSByteArray *)buf
                        withInt:(jint)off;

/*!
 @brief A locale independent version of toLowerCase.
 @param string input to be converted
 @return a US ASCII lowercase version
 */
+ (NSString *)toLowerCaseWithNSString:(NSString *)string;

/*!
 @brief A locale independent version of toUpperCase.
 @param string input to be converted
 @return a US Ascii uppercase version
 */
+ (NSString *)toUpperCaseWithNSString:(NSString *)string;

+ (IOSByteArray *)toUTF8ByteArrayWithCharArray:(IOSCharArray *)string;

+ (void)toUTF8ByteArrayWithCharArray:(IOSCharArray *)string
              withJavaIoOutputStream:(JavaIoOutputStream *)sOut;

+ (IOSByteArray *)toUTF8ByteArrayWithNSString:(NSString *)string;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleUtilStrings)

FOUNDATION_EXPORT void OrgBouncycastleUtilStrings_init(OrgBouncycastleUtilStrings *self);

FOUNDATION_EXPORT OrgBouncycastleUtilStrings *new_OrgBouncycastleUtilStrings_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleUtilStrings *create_OrgBouncycastleUtilStrings_init(void);

FOUNDATION_EXPORT NSString *OrgBouncycastleUtilStrings_fromUTF8ByteArrayWithByteArray_(IOSByteArray *bytes);

FOUNDATION_EXPORT NSString *OrgBouncycastleUtilStrings_fromUTF8ByteArrayWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint off, jint length);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilStrings_toUTF8ByteArrayWithNSString_(NSString *string);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilStrings_toUTF8ByteArrayWithCharArray_(IOSCharArray *string);

FOUNDATION_EXPORT void OrgBouncycastleUtilStrings_toUTF8ByteArrayWithCharArray_withJavaIoOutputStream_(IOSCharArray *string, JavaIoOutputStream *sOut);

FOUNDATION_EXPORT NSString *OrgBouncycastleUtilStrings_toUpperCaseWithNSString_(NSString *string);

FOUNDATION_EXPORT NSString *OrgBouncycastleUtilStrings_toLowerCaseWithNSString_(NSString *string);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilStrings_toByteArrayWithCharArray_(IOSCharArray *chars);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilStrings_toByteArrayWithNSString_(NSString *string);

FOUNDATION_EXPORT jint OrgBouncycastleUtilStrings_toByteArrayWithNSString_withByteArray_withInt_(NSString *s, IOSByteArray *buf, jint off);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilStrings_constantTimeAreEqualWithNSString_withNSString_(NSString *a, NSString *b);

FOUNDATION_EXPORT NSString *OrgBouncycastleUtilStrings_fromByteArrayWithByteArray_(IOSByteArray *bytes);

FOUNDATION_EXPORT IOSCharArray *OrgBouncycastleUtilStrings_asCharArrayWithByteArray_(IOSByteArray *bytes);

FOUNDATION_EXPORT IOSObjectArray *OrgBouncycastleUtilStrings_splitWithNSString_withChar_(NSString *input, jchar delimiter);

FOUNDATION_EXPORT id<OrgBouncycastleUtilStringList> OrgBouncycastleUtilStrings_newList(void);

FOUNDATION_EXPORT NSString *OrgBouncycastleUtilStrings_lineSeparator(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleUtilStrings)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleUtilStrings")
