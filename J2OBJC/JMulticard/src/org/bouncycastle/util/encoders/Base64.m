//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/encoders/Base64.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "org/bouncycastle/util/Strings.h"
#include "org/bouncycastle/util/encoders/Base64.h"
#include "org/bouncycastle/util/encoders/Base64Encoder.h"
#include "org/bouncycastle/util/encoders/DecoderException.h"
#include "org/bouncycastle/util/encoders/Encoder.h"
#include "org/bouncycastle/util/encoders/EncoderException.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/util/encoders/Base64 must be compiled with ARC (-fobjc-arc)"
#endif

inline id<OrgBouncycastleUtilEncodersEncoder> OrgBouncycastleUtilEncodersBase64_get_encoder(void);
static id<OrgBouncycastleUtilEncodersEncoder> OrgBouncycastleUtilEncodersBase64_encoder;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleUtilEncodersBase64, encoder, id<OrgBouncycastleUtilEncodersEncoder>)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/encoders/Base64.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleUtilEncodersBase64)


#line 10
@implementation OrgBouncycastleUtilEncodersBase64

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 10
- (instancetype)init {
  OrgBouncycastleUtilEncodersBase64_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 14
+ (NSString *)toBase64StringWithByteArray:(IOSByteArray *)data {
  return OrgBouncycastleUtilEncodersBase64_toBase64StringWithByteArray_(data);
}

+ (NSString *)toBase64StringWithByteArray:(IOSByteArray *)data
                                  withInt:(jint)off
                                  withInt:(jint)length {
  return OrgBouncycastleUtilEncodersBase64_toBase64StringWithByteArray_withInt_withInt_(data, off, length);
}


#line 25
+ (IOSByteArray *)encodeWithByteArray:(IOSByteArray *)data {
  return OrgBouncycastleUtilEncodersBase64_encodeWithByteArray_(data);
}


#line 31
+ (IOSByteArray *)encodeWithByteArray:(IOSByteArray *)data
                              withInt:(jint)off
                              withInt:(jint)length {
  return OrgBouncycastleUtilEncodersBase64_encodeWithByteArray_withInt_withInt_(data, off, length);
}


#line 47
+ (jint)encodeWithByteArray:(IOSByteArray *)data
     withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  return OrgBouncycastleUtilEncodersBase64_encodeWithByteArray_withJavaIoOutputStream_(data, outArg);
}


#line 53
+ (jint)encodeWithByteArray:(IOSByteArray *)data
                    withInt:(jint)off
                    withInt:(jint)length
     withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  return OrgBouncycastleUtilEncodersBase64_encodeWithByteArray_withInt_withInt_withJavaIoOutputStream_(data, off, length, outArg);
}


#line 59
+ (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)data {
  return OrgBouncycastleUtilEncodersBase64_decodeWithByteArray_(data);
}


#line 75
+ (IOSByteArray *)decodeWithNSString:(NSString *)data {
  return OrgBouncycastleUtilEncodersBase64_decodeWithNSString_(data);
}


#line 92
+ (jint)decodeWithNSString:(NSString *)data
    withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  return OrgBouncycastleUtilEncodersBase64_decodeWithNSString_withJavaIoOutputStream_(data, outArg);
}


#line 101
+ (jint)decodeWithByteArray:(IOSByteArray *)base64Data
                    withInt:(jint)start
                    withInt:(jint)length
     withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  return OrgBouncycastleUtilEncodersBase64_decodeWithByteArray_withInt_withInt_withJavaIoOutputStream_(base64Data, start, length, outArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 4, 5, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 6, 5, -1, -1, -1 },
    { NULL, "[B", 0x9, 7, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 7, 9, 5, -1, -1, -1 },
    { NULL, "I", 0x9, 7, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(toBase64StringWithByteArray:);
  methods[2].selector = @selector(toBase64StringWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(encodeWithByteArray:);
  methods[4].selector = @selector(encodeWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(encodeWithByteArray:withJavaIoOutputStream:);
  methods[6].selector = @selector(encodeWithByteArray:withInt:withInt:withJavaIoOutputStream:);
  methods[7].selector = @selector(decodeWithByteArray:);
  methods[8].selector = @selector(decodeWithNSString:);
  methods[9].selector = @selector(decodeWithNSString:withJavaIoOutputStream:);
  methods[10].selector = @selector(decodeWithByteArray:withInt:withInt:withJavaIoOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "encoder", "LOrgBouncycastleUtilEncodersEncoder;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "toBase64String", "[B", "[BII", "encode", "[BLJavaIoOutputStream;", "LJavaIoIOException;", "[BIILJavaIoOutputStream;", "decode", "LNSString;", "LNSString;LJavaIoOutputStream;", &OrgBouncycastleUtilEncodersBase64_encoder };
  static const J2ObjcClassInfo _OrgBouncycastleUtilEncodersBase64 = { "Base64", "org.bouncycastle.util.encoders", ptrTable, methods, fields, 7, 0x1, 11, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleUtilEncodersBase64;
}

+ (void)initialize {
  if (self == [OrgBouncycastleUtilEncodersBase64 class]) {
    OrgBouncycastleUtilEncodersBase64_encoder = new_OrgBouncycastleUtilEncodersBase64Encoder_init();
    J2OBJC_SET_INITIALIZED(OrgBouncycastleUtilEncodersBase64)
  }
}

@end


#line 10
void OrgBouncycastleUtilEncodersBase64_init(OrgBouncycastleUtilEncodersBase64 *self) {
  NSObject_init(self);
}


#line 10
OrgBouncycastleUtilEncodersBase64 *new_OrgBouncycastleUtilEncodersBase64_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleUtilEncodersBase64, init)
}


#line 10
OrgBouncycastleUtilEncodersBase64 *create_OrgBouncycastleUtilEncodersBase64_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleUtilEncodersBase64, init)
}

NSString *OrgBouncycastleUtilEncodersBase64_toBase64StringWithByteArray_(IOSByteArray *data) {
  OrgBouncycastleUtilEncodersBase64_initialize();
  
#line 15
  return OrgBouncycastleUtilEncodersBase64_toBase64StringWithByteArray_withInt_withInt_(data, 0, ((IOSByteArray *) nil_chk(data))->size_);
}


#line 18
NSString *OrgBouncycastleUtilEncodersBase64_toBase64StringWithByteArray_withInt_withInt_(IOSByteArray *data, jint off, jint length) {
  OrgBouncycastleUtilEncodersBase64_initialize();
  
#line 19
  IOSByteArray *encoded = OrgBouncycastleUtilEncodersBase64_encodeWithByteArray_withInt_withInt_(data, off, length);
  return OrgBouncycastleUtilStrings_fromByteArrayWithByteArray_(encoded);
}


#line 25
IOSByteArray *OrgBouncycastleUtilEncodersBase64_encodeWithByteArray_(IOSByteArray *data) {
  OrgBouncycastleUtilEncodersBase64_initialize();
  
#line 26
  return OrgBouncycastleUtilEncodersBase64_encodeWithByteArray_withInt_withInt_(data, 0, ((IOSByteArray *) nil_chk(data))->size_);
}


#line 31
IOSByteArray *OrgBouncycastleUtilEncodersBase64_encodeWithByteArray_withInt_withInt_(IOSByteArray *data, jint off, jint length) {
  OrgBouncycastleUtilEncodersBase64_initialize();
  
#line 32
  jint len = [((id<OrgBouncycastleUtilEncodersEncoder>) nil_chk(OrgBouncycastleUtilEncodersBase64_encoder)) getEncodedLengthWithInt:length];
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_initWithInt_(len);
  
#line 35
  @try {
    [OrgBouncycastleUtilEncodersBase64_encoder encodeWithByteArray:data withInt:off withInt:length withJavaIoOutputStream:bOut];
  }
  @catch (JavaLangException *e) {
    @throw new_OrgBouncycastleUtilEncodersEncoderException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"exception encoding base64 string: ", [e getMessage]), e);
  }
  
#line 42
  return [bOut toByteArray];
}


#line 47
jint OrgBouncycastleUtilEncodersBase64_encodeWithByteArray_withJavaIoOutputStream_(IOSByteArray *data, JavaIoOutputStream *outArg) {
  OrgBouncycastleUtilEncodersBase64_initialize();
  
#line 48
  return [((id<OrgBouncycastleUtilEncodersEncoder>) nil_chk(OrgBouncycastleUtilEncodersBase64_encoder)) encodeWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_ withJavaIoOutputStream:outArg];
}


#line 53
jint OrgBouncycastleUtilEncodersBase64_encodeWithByteArray_withInt_withInt_withJavaIoOutputStream_(IOSByteArray *data, jint off, jint length, JavaIoOutputStream *outArg) {
  OrgBouncycastleUtilEncodersBase64_initialize();
  
#line 54
  return [((id<OrgBouncycastleUtilEncodersEncoder>) nil_chk(OrgBouncycastleUtilEncodersBase64_encoder)) encodeWithByteArray:data withInt:off withInt:length withJavaIoOutputStream:outArg];
}


#line 59
IOSByteArray *OrgBouncycastleUtilEncodersBase64_decodeWithByteArray_(IOSByteArray *data) {
  OrgBouncycastleUtilEncodersBase64_initialize();
  
#line 60
  jint len = JreIntDiv(((IOSByteArray *) nil_chk(data))->size_, 4) * 3;
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_initWithInt_(len);
  
#line 63
  @try {
    [((id<OrgBouncycastleUtilEncodersEncoder>) nil_chk(OrgBouncycastleUtilEncodersBase64_encoder)) decodeWithByteArray:data withInt:0 withInt:data->size_ withJavaIoOutputStream:bOut];
  }
  @catch (JavaLangException *e) {
    @throw new_OrgBouncycastleUtilEncodersDecoderException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"unable to decode base64 data: ", [e getMessage]), e);
  }
  
#line 70
  return [bOut toByteArray];
}


#line 75
IOSByteArray *OrgBouncycastleUtilEncodersBase64_decodeWithNSString_(NSString *data) {
  OrgBouncycastleUtilEncodersBase64_initialize();
  
#line 76
  jint len = JreIntDiv([((NSString *) nil_chk(data)) java_length], 4) * 3;
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_initWithInt_(len);
  
#line 79
  @try {
    [((id<OrgBouncycastleUtilEncodersEncoder>) nil_chk(OrgBouncycastleUtilEncodersBase64_encoder)) decodeWithNSString:data withJavaIoOutputStream:bOut];
  }
  @catch (JavaLangException *e) {
    @throw new_OrgBouncycastleUtilEncodersDecoderException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"unable to decode base64 string: ", [e getMessage]), e);
  }
  
#line 86
  return [bOut toByteArray];
}


#line 92
jint OrgBouncycastleUtilEncodersBase64_decodeWithNSString_withJavaIoOutputStream_(NSString *data, JavaIoOutputStream *outArg) {
  OrgBouncycastleUtilEncodersBase64_initialize();
  
#line 93
  return [((id<OrgBouncycastleUtilEncodersEncoder>) nil_chk(OrgBouncycastleUtilEncodersBase64_encoder)) decodeWithNSString:data withJavaIoOutputStream:outArg];
}


#line 101
jint OrgBouncycastleUtilEncodersBase64_decodeWithByteArray_withInt_withInt_withJavaIoOutputStream_(IOSByteArray *base64Data, jint start, jint length, JavaIoOutputStream *outArg) {
  OrgBouncycastleUtilEncodersBase64_initialize();
  
#line 102
  @try {
    return [((id<OrgBouncycastleUtilEncodersEncoder>) nil_chk(OrgBouncycastleUtilEncodersBase64_encoder)) decodeWithByteArray:base64Data withInt:start withInt:length withJavaIoOutputStream:outArg];
  }
  @catch (JavaLangException *e) {
    @throw new_OrgBouncycastleUtilEncodersDecoderException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"unable to decode base64 data: ", [e getMessage]), e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleUtilEncodersBase64)
