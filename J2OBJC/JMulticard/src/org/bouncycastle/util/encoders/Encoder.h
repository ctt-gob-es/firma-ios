//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/encoders/Encoder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleUtilEncodersEncoder")
#ifdef RESTRICT_OrgBouncycastleUtilEncodersEncoder
#define INCLUDE_ALL_OrgBouncycastleUtilEncodersEncoder 0
#else
#define INCLUDE_ALL_OrgBouncycastleUtilEncodersEncoder 1
#endif
#undef RESTRICT_OrgBouncycastleUtilEncodersEncoder

#if !defined (OrgBouncycastleUtilEncodersEncoder_) && (INCLUDE_ALL_OrgBouncycastleUtilEncodersEncoder || defined(INCLUDE_OrgBouncycastleUtilEncodersEncoder))
#define OrgBouncycastleUtilEncodersEncoder_

@class IOSByteArray;
@class JavaIoOutputStream;

/*!
 @brief Encode and decode byte arrays (typically from binary to 7-bit ASCII 
  encodings).
 */
@protocol OrgBouncycastleUtilEncodersEncoder < JavaObject >

/*!
 @brief Return the expected output length of the encoding.
 @param inputLength the input length of the data.
 @return the output length of an encoding.
 */
- (jint)getEncodedLengthWithInt:(jint)inputLength;

/*!
 @brief Return the maximum expected output length of a decoding.If padding
  is present the value returned will be greater than the decoded data length.
 @param inputLength the input length of the encoded data.
 @return the upper bound of the output length of a decoding.
 */
- (jint)getMaxDecodedLengthWithInt:(jint)inputLength;

- (jint)encodeWithByteArray:(IOSByteArray *)data
                    withInt:(jint)off
                    withInt:(jint)length
     withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

- (jint)decodeWithByteArray:(IOSByteArray *)data
                    withInt:(jint)off
                    withInt:(jint)length
     withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

- (jint)decodeWithNSString:(NSString *)data
    withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleUtilEncodersEncoder)

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleUtilEncodersEncoder)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleUtilEncodersEncoder")
