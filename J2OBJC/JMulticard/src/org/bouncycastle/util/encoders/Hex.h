//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/encoders/Hex.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleUtilEncodersHex")
#ifdef RESTRICT_OrgBouncycastleUtilEncodersHex
#define INCLUDE_ALL_OrgBouncycastleUtilEncodersHex 0
#else
#define INCLUDE_ALL_OrgBouncycastleUtilEncodersHex 1
#endif
#undef RESTRICT_OrgBouncycastleUtilEncodersHex

#if !defined (OrgBouncycastleUtilEncodersHex_) && (INCLUDE_ALL_OrgBouncycastleUtilEncodersHex || defined(INCLUDE_OrgBouncycastleUtilEncodersHex))
#define OrgBouncycastleUtilEncodersHex_

@class IOSByteArray;
@class JavaIoOutputStream;

/*!
 @brief Utility class for converting hex data to bytes and back again.
 */
@interface OrgBouncycastleUtilEncodersHex : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief decode the Hex encoded input data.It is assumed the input data is valid.
 @return a byte array representing the decoded data.
 */
+ (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)data;

/*!
 @brief decode the Hex encoded String data - whitespace will be ignored.
 @return a byte array representing the decoded data.
 */
+ (IOSByteArray *)decodeWithNSString:(NSString *)data;

/*!
 @brief decode the Hex encoded String data writing it to the given output stream,
  whitespace characters will be ignored.
 @return the number of bytes produced.
 */
+ (jint)decodeWithNSString:(NSString *)data
    withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/*!
 @brief Decode the hexadecimal-encoded string strictly i.e.any non-hexadecimal characters will be
  considered an error.
 @return a byte array representing the decoded data.
 */
+ (IOSByteArray *)decodeStrictWithNSString:(NSString *)str;

/*!
 @brief Decode the hexadecimal-encoded string strictly i.e.any non-hexadecimal characters will be
  considered an error.
 @return a byte array representing the decoded data.
 */
+ (IOSByteArray *)decodeStrictWithNSString:(NSString *)str
                                   withInt:(jint)off
                                   withInt:(jint)len;

/*!
 @brief encode the input data producing a Hex encoded byte array.
 @return a byte array containing the Hex encoded data.
 */
+ (IOSByteArray *)encodeWithByteArray:(IOSByteArray *)data;

/*!
 @brief encode the input data producing a Hex encoded byte array.
 @return a byte array containing the Hex encoded data.
 */
+ (IOSByteArray *)encodeWithByteArray:(IOSByteArray *)data
                              withInt:(jint)off
                              withInt:(jint)length;

/*!
 @brief Hex encode the byte data writing it to the given output stream.
 @return the number of bytes produced.
 */
+ (jint)encodeWithByteArray:(IOSByteArray *)data
                    withInt:(jint)off
                    withInt:(jint)length
     withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/*!
 @brief Hex encode the byte data writing it to the given output stream.
 @return the number of bytes produced.
 */
+ (jint)encodeWithByteArray:(IOSByteArray *)data
     withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

+ (NSString *)toHexStringWithByteArray:(IOSByteArray *)data;

+ (NSString *)toHexStringWithByteArray:(IOSByteArray *)data
                               withInt:(jint)off
                               withInt:(jint)length;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleUtilEncodersHex)

FOUNDATION_EXPORT void OrgBouncycastleUtilEncodersHex_init(OrgBouncycastleUtilEncodersHex *self);

FOUNDATION_EXPORT OrgBouncycastleUtilEncodersHex *new_OrgBouncycastleUtilEncodersHex_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleUtilEncodersHex *create_OrgBouncycastleUtilEncodersHex_init(void);

FOUNDATION_EXPORT NSString *OrgBouncycastleUtilEncodersHex_toHexStringWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT NSString *OrgBouncycastleUtilEncodersHex_toHexStringWithByteArray_withInt_withInt_(IOSByteArray *data, jint off, jint length);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilEncodersHex_encodeWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilEncodersHex_encodeWithByteArray_withInt_withInt_(IOSByteArray *data, jint off, jint length);

FOUNDATION_EXPORT jint OrgBouncycastleUtilEncodersHex_encodeWithByteArray_withJavaIoOutputStream_(IOSByteArray *data, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT jint OrgBouncycastleUtilEncodersHex_encodeWithByteArray_withInt_withInt_withJavaIoOutputStream_(IOSByteArray *data, jint off, jint length, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilEncodersHex_decodeWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilEncodersHex_decodeWithNSString_(NSString *data);

FOUNDATION_EXPORT jint OrgBouncycastleUtilEncodersHex_decodeWithNSString_withJavaIoOutputStream_(NSString *data, JavaIoOutputStream *outArg);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilEncodersHex_decodeStrictWithNSString_(NSString *str);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilEncodersHex_decodeStrictWithNSString_withInt_withInt_(NSString *str, jint off, jint len);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleUtilEncodersHex)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleUtilEncodersHex")
