//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/encoders/Base64Encoder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleUtilEncodersBase64Encoder")
#ifdef RESTRICT_OrgBouncycastleUtilEncodersBase64Encoder
#define INCLUDE_ALL_OrgBouncycastleUtilEncodersBase64Encoder 0
#else
#define INCLUDE_ALL_OrgBouncycastleUtilEncodersBase64Encoder 1
#endif
#undef RESTRICT_OrgBouncycastleUtilEncodersBase64Encoder

#if !defined (OrgBouncycastleUtilEncodersBase64Encoder_) && (INCLUDE_ALL_OrgBouncycastleUtilEncodersBase64Encoder || defined(INCLUDE_OrgBouncycastleUtilEncodersBase64Encoder))
#define OrgBouncycastleUtilEncodersBase64Encoder_

#define RESTRICT_OrgBouncycastleUtilEncodersEncoder 1
#define INCLUDE_OrgBouncycastleUtilEncodersEncoder 1
#include "org/bouncycastle/util/encoders/Encoder.h"

@class IOSByteArray;
@class JavaIoOutputStream;

/*!
 @brief A streaming Base64 encoder.
 */
@interface OrgBouncycastleUtilEncodersBase64Encoder : NSObject < OrgBouncycastleUtilEncodersEncoder > {
 @public
  IOSByteArray *encodingTable_;
  jbyte padding_;
  IOSByteArray *decodingTable_;
}

#pragma mark Public

- (instancetype)init;

/*!
 @brief decode the base 64 encoded byte data writing it to the given output stream,
  whitespace characters will be ignored.
 @return the number of bytes produced.
 */
- (jint)decodeWithByteArray:(IOSByteArray *)data
                    withInt:(jint)off
                    withInt:(jint)length
     withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/*!
 @brief decode the base 64 encoded String data writing it to the given output stream,
  whitespace characters will be ignored.
 @return the number of bytes produced.
 */
- (jint)decodeWithNSString:(NSString *)data
    withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

- (jint)encodeWithByteArray:(IOSByteArray *)inBuf
                    withInt:(jint)inOff
                    withInt:(jint)inLen
              withByteArray:(IOSByteArray *)outBuf
                    withInt:(jint)outOff;

/*!
 @brief encode the input data producing a base 64 output stream.
 @return the number of bytes produced.
 */
- (jint)encodeWithByteArray:(IOSByteArray *)buf
                    withInt:(jint)off
                    withInt:(jint)len
     withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

- (jint)getEncodedLengthWithInt:(jint)inputLength;

- (jint)getMaxDecodedLengthWithInt:(jint)inputLength;

#pragma mark Protected

- (void)initialiseDecodingTable OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleUtilEncodersBase64Encoder)

J2OBJC_FIELD_SETTER(OrgBouncycastleUtilEncodersBase64Encoder, encodingTable_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleUtilEncodersBase64Encoder, decodingTable_, IOSByteArray *)

FOUNDATION_EXPORT void OrgBouncycastleUtilEncodersBase64Encoder_init(OrgBouncycastleUtilEncodersBase64Encoder *self);

FOUNDATION_EXPORT OrgBouncycastleUtilEncodersBase64Encoder *new_OrgBouncycastleUtilEncodersBase64Encoder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleUtilEncodersBase64Encoder *create_OrgBouncycastleUtilEncodersBase64Encoder_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleUtilEncodersBase64Encoder)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleUtilEncodersBase64Encoder")
