//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/Exceptions.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Throwable.h"
#include "org/bouncycastle/util/Exceptions.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/util/Exceptions must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/Exceptions.java"


#line 3
@implementation OrgBouncycastleUtilExceptions

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 3
- (instancetype)init {
  OrgBouncycastleUtilExceptions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 5
+ (JavaLangIllegalArgumentException *)illegalArgumentExceptionWithNSString:(NSString *)message
                                                     withJavaLangThrowable:(JavaLangThrowable *)cause {
  return OrgBouncycastleUtilExceptions_illegalArgumentExceptionWithNSString_withJavaLangThrowable_(message, cause);
}

+ (JavaLangIllegalStateException *)illegalStateExceptionWithNSString:(NSString *)message
                                               withJavaLangThrowable:(JavaLangThrowable *)cause {
  return OrgBouncycastleUtilExceptions_illegalStateExceptionWithNSString_withJavaLangThrowable_(message, cause);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangIllegalArgumentException;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangIllegalStateException;", 0x9, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(illegalArgumentExceptionWithNSString:withJavaLangThrowable:);
  methods[2].selector = @selector(illegalStateExceptionWithNSString:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "illegalArgumentException", "LNSString;LJavaLangThrowable;", "illegalStateException" };
  static const J2ObjcClassInfo _OrgBouncycastleUtilExceptions = { "Exceptions", "org.bouncycastle.util", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleUtilExceptions;
}

@end


#line 3
void OrgBouncycastleUtilExceptions_init(OrgBouncycastleUtilExceptions *self) {
  NSObject_init(self);
}


#line 3
OrgBouncycastleUtilExceptions *new_OrgBouncycastleUtilExceptions_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleUtilExceptions, init)
}


#line 3
OrgBouncycastleUtilExceptions *create_OrgBouncycastleUtilExceptions_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleUtilExceptions, init)
}


#line 5
JavaLangIllegalArgumentException *OrgBouncycastleUtilExceptions_illegalArgumentExceptionWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) {
  OrgBouncycastleUtilExceptions_initialize();
  return new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(message, cause);
}

JavaLangIllegalStateException *OrgBouncycastleUtilExceptions_illegalStateExceptionWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) {
  OrgBouncycastleUtilExceptions_initialize();
  return new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(message, cause);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleUtilExceptions)
