//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/BigIntegers.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "java/util/Map.h"
#include "java/util/WeakHashMap.h"
#include "org/bouncycastle/math/raw/Mod.h"
#include "org/bouncycastle/math/raw/Nat.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/BigIntegers.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/util/BigIntegers must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleUtilBigIntegers ()

+ (IOSByteArray *)createRandomWithInt:(jint)bitLength
         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

@end

inline JavaMathBigInteger *OrgBouncycastleUtilBigIntegers_get_THREE(void);
static JavaMathBigInteger *OrgBouncycastleUtilBigIntegers_THREE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleUtilBigIntegers, THREE, JavaMathBigInteger *)

inline jint OrgBouncycastleUtilBigIntegers_get_MAX_ITERATIONS(void);
#define OrgBouncycastleUtilBigIntegers_MAX_ITERATIONS 1000
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleUtilBigIntegers, MAX_ITERATIONS, jint)

inline JavaMathBigInteger *OrgBouncycastleUtilBigIntegers_get_SMALL_PRIMES_PRODUCT(void);
static JavaMathBigInteger *OrgBouncycastleUtilBigIntegers_SMALL_PRIMES_PRODUCT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleUtilBigIntegers, SMALL_PRIMES_PRODUCT, JavaMathBigInteger *)

inline jint OrgBouncycastleUtilBigIntegers_get_MAX_SMALL(void);
static jint OrgBouncycastleUtilBigIntegers_MAX_SMALL;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgBouncycastleUtilBigIntegers, MAX_SMALL, jint)

__attribute__((unused)) static IOSByteArray *OrgBouncycastleUtilBigIntegers_createRandomWithInt_withJavaSecuritySecureRandom_(jint bitLength, JavaSecuritySecureRandom *random);

@interface OrgBouncycastleUtilBigIntegers_Cache () {
 @public
  id<JavaUtilMap> values_;
  IOSObjectArray *preserve_;
  jint preserveCounter_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleUtilBigIntegers_Cache, values_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgBouncycastleUtilBigIntegers_Cache, preserve_, IOSObjectArray *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/BigIntegers.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleUtilBigIntegers)

JavaMathBigInteger *OrgBouncycastleUtilBigIntegers_ZERO;
JavaMathBigInteger *OrgBouncycastleUtilBigIntegers_ONE;
JavaMathBigInteger *OrgBouncycastleUtilBigIntegers_TWO;


#line 14
@implementation OrgBouncycastleUtilBigIntegers

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 14
- (instancetype)init {
  OrgBouncycastleUtilBigIntegers_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 30
+ (IOSByteArray *)asUnsignedByteArrayWithJavaMathBigInteger:(JavaMathBigInteger *)value {
  return OrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(value);
}


#line 55
+ (IOSByteArray *)asUnsignedByteArrayWithInt:(jint)length
                      withJavaMathBigInteger:(JavaMathBigInteger *)value {
  return OrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_(length, value);
}


#line 85
+ (void)asUnsignedByteArrayWithJavaMathBigInteger:(JavaMathBigInteger *)value
                                    withByteArray:(IOSByteArray *)buf
                                          withInt:(jint)off
                                          withInt:(jint)len {
  OrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_withByteArray_withInt_withInt_(value, buf, off, len);
}


#line 116
+ (JavaMathBigInteger *)createRandomInRangeWithJavaMathBigInteger:(JavaMathBigInteger *)min
                                           withJavaMathBigInteger:(JavaMathBigInteger *)max
                                     withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return OrgBouncycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(min, max, random);
}


#line 151
+ (JavaMathBigInteger *)fromUnsignedByteArrayWithByteArray:(IOSByteArray *)buf {
  return OrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_(buf);
}


#line 156
+ (JavaMathBigInteger *)fromUnsignedByteArrayWithByteArray:(IOSByteArray *)buf
                                                   withInt:(jint)off
                                                   withInt:(jint)length {
  return OrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(buf, off, length);
}


#line 167
+ (jbyte)byteValueExactWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return OrgBouncycastleUtilBigIntegers_byteValueExactWithJavaMathBigInteger_(x);
}


#line 178
+ (jshort)shortValueExactWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return OrgBouncycastleUtilBigIntegers_shortValueExactWithJavaMathBigInteger_(x);
}


#line 189
+ (jint)intValueExactWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return OrgBouncycastleUtilBigIntegers_intValueExactWithJavaMathBigInteger_(x);
}


#line 200
+ (jlong)longValueExactWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return OrgBouncycastleUtilBigIntegers_longValueExactWithJavaMathBigInteger_(x);
}


#line 211
+ (JavaMathBigInteger *)modOddInverseWithJavaMathBigInteger:(JavaMathBigInteger *)M
                                     withJavaMathBigInteger:(JavaMathBigInteger *)X {
  return OrgBouncycastleUtilBigIntegers_modOddInverseWithJavaMathBigInteger_withJavaMathBigInteger_(M, X);
}


#line 238
+ (JavaMathBigInteger *)modOddInverseVarWithJavaMathBigInteger:(JavaMathBigInteger *)M
                                        withJavaMathBigInteger:(JavaMathBigInteger *)X {
  return OrgBouncycastleUtilBigIntegers_modOddInverseVarWithJavaMathBigInteger_withJavaMathBigInteger_(M, X);
}


#line 273
+ (jint)getUnsignedByteLengthWithJavaMathBigInteger:(JavaMathBigInteger *)n {
  return OrgBouncycastleUtilBigIntegers_getUnsignedByteLengthWithJavaMathBigInteger_(n);
}


#line 290
+ (JavaMathBigInteger *)createRandomBigIntegerWithInt:(jint)bitLength
                         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return OrgBouncycastleUtilBigIntegers_createRandomBigIntegerWithInt_withJavaSecuritySecureRandom_(bitLength, random);
}


#line 311
+ (JavaMathBigInteger *)createRandomPrimeWithInt:(jint)bitLength
                                         withInt:(jint)certainty
                    withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return OrgBouncycastleUtilBigIntegers_createRandomPrimeWithInt_withInt_withJavaSecuritySecureRandom_(bitLength, certainty, random);
}


#line 350
+ (IOSByteArray *)createRandomWithInt:(jint)bitLength
         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return OrgBouncycastleUtilBigIntegers_createRandomWithInt_withJavaSecuritySecureRandom_(bitLength, random);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 6, 8, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 9, 1, -1, -1, -1, -1 },
    { NULL, "S", 0x9, 10, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 11, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 12, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 15, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 16, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 21, 18, 22, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(asUnsignedByteArrayWithJavaMathBigInteger:);
  methods[2].selector = @selector(asUnsignedByteArrayWithInt:withJavaMathBigInteger:);
  methods[3].selector = @selector(asUnsignedByteArrayWithJavaMathBigInteger:withByteArray:withInt:withInt:);
  methods[4].selector = @selector(createRandomInRangeWithJavaMathBigInteger:withJavaMathBigInteger:withJavaSecuritySecureRandom:);
  methods[5].selector = @selector(fromUnsignedByteArrayWithByteArray:);
  methods[6].selector = @selector(fromUnsignedByteArrayWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(byteValueExactWithJavaMathBigInteger:);
  methods[8].selector = @selector(shortValueExactWithJavaMathBigInteger:);
  methods[9].selector = @selector(intValueExactWithJavaMathBigInteger:);
  methods[10].selector = @selector(longValueExactWithJavaMathBigInteger:);
  methods[11].selector = @selector(modOddInverseWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[12].selector = @selector(modOddInverseVarWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[13].selector = @selector(getUnsignedByteLengthWithJavaMathBigInteger:);
  methods[14].selector = @selector(createRandomBigIntegerWithInt:withJavaSecuritySecureRandom:);
  methods[15].selector = @selector(createRandomPrimeWithInt:withInt:withJavaSecuritySecureRandom:);
  methods[16].selector = @selector(createRandomWithInt:withJavaSecuritySecureRandom:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "TWO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "THREE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "MAX_ITERATIONS", "I", .constantValue.asInt = OrgBouncycastleUtilBigIntegers_MAX_ITERATIONS, 0x1a, -1, -1, -1, -1 },
    { "SMALL_PRIMES_PRODUCT", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "MAX_SMALL", "I", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
  };
  static const void *ptrTable[] = { "asUnsignedByteArray", "LJavaMathBigInteger;", "ILJavaMathBigInteger;", "LJavaMathBigInteger;[BII", "createRandomInRange", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaSecuritySecureRandom;", "fromUnsignedByteArray", "[B", "[BII", "byteValueExact", "shortValueExact", "intValueExact", "longValueExact", "modOddInverse", "LJavaMathBigInteger;LJavaMathBigInteger;", "modOddInverseVar", "getUnsignedByteLength", "createRandomBigInteger", "ILJavaSecuritySecureRandom;", "createRandomPrime", "IILJavaSecuritySecureRandom;", "createRandom", "LJavaLangIllegalArgumentException;", &OrgBouncycastleUtilBigIntegers_ZERO, &OrgBouncycastleUtilBigIntegers_ONE, &OrgBouncycastleUtilBigIntegers_TWO, &OrgBouncycastleUtilBigIntegers_THREE, &OrgBouncycastleUtilBigIntegers_SMALL_PRIMES_PRODUCT, &OrgBouncycastleUtilBigIntegers_MAX_SMALL, "LOrgBouncycastleUtilBigIntegers_Cache;" };
  static const J2ObjcClassInfo _OrgBouncycastleUtilBigIntegers = { "BigIntegers", "org.bouncycastle.util", ptrTable, methods, fields, 7, 0x11, 17, 7, -1, 29, -1, -1, -1 };
  return &_OrgBouncycastleUtilBigIntegers;
}

+ (void)initialize {
  if (self == [OrgBouncycastleUtilBigIntegers class]) {
    OrgBouncycastleUtilBigIntegers_ZERO = JavaMathBigInteger_valueOfWithLong_(
#line 16
    0);
    OrgBouncycastleUtilBigIntegers_ONE = JavaMathBigInteger_valueOfWithLong_(
#line 17
    1);
    OrgBouncycastleUtilBigIntegers_TWO = JavaMathBigInteger_valueOfWithLong_(
#line 18
    2);
    OrgBouncycastleUtilBigIntegers_THREE = JavaMathBigInteger_valueOfWithLong_(
#line 20
    3);
    OrgBouncycastleUtilBigIntegers_SMALL_PRIMES_PRODUCT = new_JavaMathBigInteger_initWithNSString_withInt_(
#line 297
    @"8138e8a0fcf3a4e84a771d40fd305d7f4aa59306d7251de54d98af8fe95729a1f73d893fa424cd2edc8636a6c3285e022b0e3866a565ae8108eed8591cd4fe8d2ce86165a978d719ebf647f362d33fca29cd179fb42401cbaf3df0c614056f9c8f3cfd51e474afb6bc6974f78db8aba8e9e517fded658591ab7502bd41849462f",
#line 301
    16);
    OrgBouncycastleUtilBigIntegers_MAX_SMALL =
#line 302
    [((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(743))) bitLength];
    J2OBJC_SET_INITIALIZED(OrgBouncycastleUtilBigIntegers)
  }
}

@end


#line 14
void OrgBouncycastleUtilBigIntegers_init(OrgBouncycastleUtilBigIntegers *self) {
  NSObject_init(self);
}


#line 14
OrgBouncycastleUtilBigIntegers *new_OrgBouncycastleUtilBigIntegers_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleUtilBigIntegers, init)
}


#line 14
OrgBouncycastleUtilBigIntegers *create_OrgBouncycastleUtilBigIntegers_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleUtilBigIntegers, init)
}


#line 30
IOSByteArray *OrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(JavaMathBigInteger *value) {
  OrgBouncycastleUtilBigIntegers_initialize();
  
#line 33
  IOSByteArray *bytes = [((JavaMathBigInteger *) nil_chk(value)) toByteArray];
  
#line 35
  if (IOSByteArray_Get(nil_chk(bytes), 0) == 0 && bytes->size_ != 1) {
    
#line 37
    IOSByteArray *tmp = [IOSByteArray newArrayWithLength:bytes->size_ - 1];
    
#line 39
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, 1, tmp, 0, tmp->size_);
    
#line 41
    return tmp;
  }
  
#line 44
  return bytes;
}


#line 55
IOSByteArray *OrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_(jint length, JavaMathBigInteger *value) {
  OrgBouncycastleUtilBigIntegers_initialize();
  IOSByteArray *bytes = [((JavaMathBigInteger *) nil_chk(value)) toByteArray];
  if (((IOSByteArray *) nil_chk(bytes))->size_ == length) {
    
#line 60
    return bytes;
  }
  
#line 63
  jint start = (IOSByteArray_Get(bytes, 0) == 0 && bytes->size_ != 1) ? 1 : 0;
  jint count = bytes->size_ - start;
  
#line 66
  if (count > length) {
    
#line 68
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"standard length exceeded for value");
  }
  
#line 71
  IOSByteArray *tmp = [IOSByteArray newArrayWithLength:length];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, start, tmp, tmp->size_ - count, count);
  return tmp;
}


#line 85
void OrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_withByteArray_withInt_withInt_(JavaMathBigInteger *value, IOSByteArray *buf, jint off, jint len) {
  OrgBouncycastleUtilBigIntegers_initialize();
  IOSByteArray *bytes = [((JavaMathBigInteger *) nil_chk(value)) toByteArray];
  if (((IOSByteArray *) nil_chk(bytes))->size_ == len) {
    
#line 90
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, 0, buf, off, len);
    return;
  }
  
#line 94
  jint start = (IOSByteArray_Get(bytes, 0) == 0 && bytes->size_ != 1) ? 1 : 0;
  jint count = bytes->size_ - start;
  
#line 97
  if (count > len) {
    
#line 99
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"standard length exceeded for value");
  }
  
#line 102
  jint padLen = len - count;
  OrgBouncycastleUtilArrays_fillWithByteArray_withInt_withInt_withByte_(buf, off, off + padLen, (jbyte) (jint) 0x00);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, start, buf, off + padLen, count);
}


#line 116
JavaMathBigInteger *OrgBouncycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *min, JavaMathBigInteger *max, JavaSecuritySecureRandom *random) {
  OrgBouncycastleUtilBigIntegers_initialize();
  
#line 121
  jint cmp = [((JavaMathBigInteger *) nil_chk(min)) compareToWithId:max];
  if (cmp >= 0) {
    
#line 124
    if (cmp > 0) {
      
#line 126
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'min' may not be greater than 'max'");
    }
    
#line 129
    return min;
  }
  
#line 132
  if ([min bitLength] > JreIntDiv([((JavaMathBigInteger *) nil_chk(max)) bitLength], 2)) {
    
#line 134
    return [((JavaMathBigInteger *) nil_chk(OrgBouncycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(OrgBouncycastleUtilBigIntegers_ZERO, [max subtractWithJavaMathBigInteger:min], random))) addWithJavaMathBigInteger:min];
  }
  
#line 137
  for (jint i = 0; i < OrgBouncycastleUtilBigIntegers_MAX_ITERATIONS; ++i) {
    
#line 139
    JavaMathBigInteger *x = OrgBouncycastleUtilBigIntegers_createRandomBigIntegerWithInt_withJavaSecuritySecureRandom_([max bitLength], random);
    if ([((JavaMathBigInteger *) nil_chk(x)) compareToWithId:min] >= 0 && [x compareToWithId:max] <= 0) {
      
#line 142
      return x;
    }
  }
  
#line 147
  return [((JavaMathBigInteger *) nil_chk(OrgBouncycastleUtilBigIntegers_createRandomBigIntegerWithInt_withJavaSecuritySecureRandom_([((JavaMathBigInteger *) nil_chk([max subtractWithJavaMathBigInteger:min])) bitLength] - 1, random))) addWithJavaMathBigInteger:min];
}


#line 151
JavaMathBigInteger *OrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_(IOSByteArray *buf) {
  OrgBouncycastleUtilBigIntegers_initialize();
  return new_JavaMathBigInteger_initWithInt_withByteArray_(1, buf);
}

JavaMathBigInteger *OrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(IOSByteArray *buf, jint off, jint length) {
  OrgBouncycastleUtilBigIntegers_initialize();
  IOSByteArray *mag = buf;
  if (off != 0 || length != ((IOSByteArray *) nil_chk(buf))->size_) {
    
#line 161
    mag = [IOSByteArray newArrayWithLength:length];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, off, mag, 0, length);
  }
  return new_JavaMathBigInteger_initWithInt_withByteArray_(1, mag);
}


#line 167
jbyte OrgBouncycastleUtilBigIntegers_byteValueExactWithJavaMathBigInteger_(JavaMathBigInteger *x) {
  OrgBouncycastleUtilBigIntegers_initialize();
  
#line 170
  if ([((JavaMathBigInteger *) nil_chk(x)) bitLength] > 7) {
    
#line 172
    @throw new_JavaLangArithmeticException_initWithNSString_(@"BigInteger out of int range");
  }
  
#line 175
  return [x charValue];
}


#line 178
jshort OrgBouncycastleUtilBigIntegers_shortValueExactWithJavaMathBigInteger_(JavaMathBigInteger *x) {
  OrgBouncycastleUtilBigIntegers_initialize();
  
#line 181
  if ([((JavaMathBigInteger *) nil_chk(x)) bitLength] > 15) {
    
#line 183
    @throw new_JavaLangArithmeticException_initWithNSString_(@"BigInteger out of int range");
  }
  
#line 186
  return [x shortValue];
}


#line 189
jint OrgBouncycastleUtilBigIntegers_intValueExactWithJavaMathBigInteger_(JavaMathBigInteger *x) {
  OrgBouncycastleUtilBigIntegers_initialize();
  
#line 192
  if ([((JavaMathBigInteger *) nil_chk(x)) bitLength] > 31) {
    
#line 194
    @throw new_JavaLangArithmeticException_initWithNSString_(@"BigInteger out of int range");
  }
  
#line 197
  return [x intValue];
}


#line 200
jlong OrgBouncycastleUtilBigIntegers_longValueExactWithJavaMathBigInteger_(JavaMathBigInteger *x) {
  OrgBouncycastleUtilBigIntegers_initialize();
  
#line 203
  if ([((JavaMathBigInteger *) nil_chk(x)) bitLength] > 63) {
    
#line 205
    @throw new_JavaLangArithmeticException_initWithNSString_(@"BigInteger out of long range");
  }
  
#line 208
  return [x longLongValue];
}


#line 211
JavaMathBigInteger *OrgBouncycastleUtilBigIntegers_modOddInverseWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *M, JavaMathBigInteger *X) {
  OrgBouncycastleUtilBigIntegers_initialize();
  if (![((JavaMathBigInteger *) nil_chk(M)) testBitWithInt:0]) {
    
#line 215
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'M' must be odd");
  }
  if ([M signum] != 1) {
    
#line 219
    @throw new_JavaLangArithmeticException_initWithNSString_(@"BigInteger: modulus not positive");
  }
  if ([((JavaMathBigInteger *) nil_chk(X)) signum] < 0 || [X compareToWithId:M] >= 0) {
    
#line 223
    X = [X modWithJavaMathBigInteger:M];
  }
  
#line 226
  jint bits = [M bitLength];
  IOSIntArray *m = OrgBouncycastleMathRawNat_fromBigIntegerWithInt_withJavaMathBigInteger_(bits, M);
  IOSIntArray *x = OrgBouncycastleMathRawNat_fromBigIntegerWithInt_withJavaMathBigInteger_(bits, X);
  jint len = ((IOSIntArray *) nil_chk(m))->size_;
  IOSIntArray *z = OrgBouncycastleMathRawNat_createWithInt_(len);
  if (0 == OrgBouncycastleMathRawMod_modOddInverseWithIntArray_withIntArray_withIntArray_(m, x, z)) {
    
#line 233
    @throw new_JavaLangArithmeticException_initWithNSString_(@"BigInteger not invertible.");
  }
  return OrgBouncycastleMathRawNat_toBigIntegerWithInt_withIntArray_(len, z);
}


#line 238
JavaMathBigInteger *OrgBouncycastleUtilBigIntegers_modOddInverseVarWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *M, JavaMathBigInteger *X) {
  OrgBouncycastleUtilBigIntegers_initialize();
  if (![((JavaMathBigInteger *) nil_chk(M)) testBitWithInt:0]) {
    
#line 242
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'M' must be odd");
  }
  if ([M signum] != 1) {
    
#line 246
    @throw new_JavaLangArithmeticException_initWithNSString_(@"BigInteger: modulus not positive");
  }
  if ([M isEqual:OrgBouncycastleUtilBigIntegers_ONE]) {
    
#line 250
    return OrgBouncycastleUtilBigIntegers_ZERO;
  }
  if ([((JavaMathBigInteger *) nil_chk(X)) signum] < 0 || [X compareToWithId:M] >= 0) {
    
#line 254
    X = [X modWithJavaMathBigInteger:M];
  }
  if ([((JavaMathBigInteger *) nil_chk(X)) isEqual:OrgBouncycastleUtilBigIntegers_ONE]) {
    
#line 258
    return OrgBouncycastleUtilBigIntegers_ONE;
  }
  
#line 261
  jint bits = [M bitLength];
  IOSIntArray *m = OrgBouncycastleMathRawNat_fromBigIntegerWithInt_withJavaMathBigInteger_(bits, M);
  IOSIntArray *x = OrgBouncycastleMathRawNat_fromBigIntegerWithInt_withJavaMathBigInteger_(bits, X);
  jint len = ((IOSIntArray *) nil_chk(m))->size_;
  IOSIntArray *z = OrgBouncycastleMathRawNat_createWithInt_(len);
  if (!OrgBouncycastleMathRawMod_modOddInverseVarWithIntArray_withIntArray_withIntArray_(m, x, z)) {
    
#line 268
    @throw new_JavaLangArithmeticException_initWithNSString_(@"BigInteger not invertible.");
  }
  return OrgBouncycastleMathRawNat_toBigIntegerWithInt_withIntArray_(len, z);
}


#line 273
jint OrgBouncycastleUtilBigIntegers_getUnsignedByteLengthWithJavaMathBigInteger_(JavaMathBigInteger *n) {
  OrgBouncycastleUtilBigIntegers_initialize();
  if ([((JavaMathBigInteger *) nil_chk(n)) isEqual:OrgBouncycastleUtilBigIntegers_ZERO]) {
    
#line 277
    return 1;
  }
  
#line 280
  return JreIntDiv(([n bitLength] + 7), 8);
}


#line 290
JavaMathBigInteger *OrgBouncycastleUtilBigIntegers_createRandomBigIntegerWithInt_withJavaSecuritySecureRandom_(jint bitLength, JavaSecuritySecureRandom *random) {
  OrgBouncycastleUtilBigIntegers_initialize();
  return new_JavaMathBigInteger_initWithInt_withByteArray_(1, OrgBouncycastleUtilBigIntegers_createRandomWithInt_withJavaSecuritySecureRandom_(bitLength, random));
}


#line 311
JavaMathBigInteger *OrgBouncycastleUtilBigIntegers_createRandomPrimeWithInt_withInt_withJavaSecuritySecureRandom_(jint bitLength, jint certainty, JavaSecuritySecureRandom *random) {
  OrgBouncycastleUtilBigIntegers_initialize();
  if (bitLength < 2) {
    
#line 315
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"bitLength < 2");
  }
  
#line 318
  JavaMathBigInteger *rv;
  
#line 320
  if (bitLength == 2) {
    
#line 322
    return ([((JavaSecuritySecureRandom *) nil_chk(random)) nextInt] < 0) ? OrgBouncycastleUtilBigIntegers_TWO : OrgBouncycastleUtilBigIntegers_THREE;
  }
  
#line 325
  do {
    
#line 327
    IOSByteArray *base = OrgBouncycastleUtilBigIntegers_createRandomWithInt_withJavaSecuritySecureRandom_(bitLength, random);
    
#line 329
    jint xBits = 8 * ((IOSByteArray *) nil_chk(base))->size_ - bitLength;
    jbyte lead = (jbyte) (JreLShift32(1, (7 - xBits)));
    
#line 333
    *IOSByteArray_GetRef(base, 0) |= lead;
    *IOSByteArray_GetRef(base, base->size_ - 1) |= (jint) 0x01;
    
#line 336
    rv = new_JavaMathBigInteger_initWithInt_withByteArray_(1, base);
    if (bitLength > OrgBouncycastleUtilBigIntegers_MAX_SMALL) {
      
#line 339
      while (![((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(rv)) gcdWithJavaMathBigInteger:OrgBouncycastleUtilBigIntegers_SMALL_PRIMES_PRODUCT])) isEqual:OrgBouncycastleUtilBigIntegers_ONE]) {
        
#line 341
        rv = [rv addWithJavaMathBigInteger:OrgBouncycastleUtilBigIntegers_TWO];
      }
    }
  }
  while (![rv isProbablePrimeWithInt:certainty]);
  
#line 347
  return rv;
}


#line 350
IOSByteArray *OrgBouncycastleUtilBigIntegers_createRandomWithInt_withJavaSecuritySecureRandom_(jint bitLength, JavaSecuritySecureRandom *random) {
  OrgBouncycastleUtilBigIntegers_initialize();
  
#line 353
  if (bitLength < 1) {
    
#line 355
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"bitLength must be at least 1");
  }
  
#line 358
  jint nBytes = JreIntDiv((bitLength + 7), 8);
  
#line 360
  IOSByteArray *rv = [IOSByteArray newArrayWithLength:nBytes];
  
#line 362
  [((JavaSecuritySecureRandom *) nil_chk(random)) nextBytesWithByteArray:rv];
  
#line 365
  jint xBits = 8 * nBytes - bitLength;
  *IOSByteArray_GetRef(rv, 0) &= (jbyte) (JreURShift32(255, xBits));
  
#line 368
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleUtilBigIntegers)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/BigIntegers.java"


#line 371
@implementation OrgBouncycastleUtilBigIntegers_Cache

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 371
- (instancetype)init {
  OrgBouncycastleUtilBigIntegers_Cache_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 378
- (void)addWithJavaMathBigInteger:(JavaMathBigInteger *)value {
  @synchronized(self) {
    (void) [((id<JavaUtilMap>) nil_chk(values_)) putWithId:value withId:JreLoadStatic(JavaLangBoolean, TRUE)];
    (void) IOSObjectArray_Set(nil_chk(preserve_), preserveCounter_, value);
    preserveCounter_ = JreIntMod((preserveCounter_ + 1), preserve_->size_);
  }
}


#line 385
- (jboolean)containsWithJavaMathBigInteger:(JavaMathBigInteger *)value {
  @synchronized(self) {
    return [((id<JavaUtilMap>) nil_chk(values_)) containsKeyWithId:value];
  }
}


#line 390
- (jint)size {
  @synchronized(self) {
    return [((id<JavaUtilMap>) nil_chk(values_)) size];
  }
}


#line 395
- (void)clear {
  @synchronized(self) {
    [((id<JavaUtilMap>) nil_chk(values_)) clear];
    for (jint i = 0; i != ((IOSObjectArray *) nil_chk(preserve_))->size_; i++) {
      
#line 400
      (void) IOSObjectArray_Set(preserve_, i, nil);
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addWithJavaMathBigInteger:);
  methods[2].selector = @selector(containsWithJavaMathBigInteger:);
  methods[3].selector = @selector(size);
  methods[4].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "preserve_", "[LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "preserveCounter_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "add", "LJavaMathBigInteger;", "contains", "Ljava/util/Map<Ljava/math/BigInteger;Ljava/lang/Boolean;>;", "LOrgBouncycastleUtilBigIntegers;" };
  static const J2ObjcClassInfo _OrgBouncycastleUtilBigIntegers_Cache = { "Cache", "org.bouncycastle.util", ptrTable, methods, fields, 7, 0x9, 5, 3, 4, -1, -1, -1, -1 };
  return &_OrgBouncycastleUtilBigIntegers_Cache;
}

@end


#line 371
void OrgBouncycastleUtilBigIntegers_Cache_init(OrgBouncycastleUtilBigIntegers_Cache *self) {
  NSObject_init(self);
  self->values_ = new_JavaUtilWeakHashMap_init();
  self->preserve_ = [IOSObjectArray newArrayWithLength:8 type:JavaMathBigInteger_class_()];
  self->preserveCounter_ =
#line 376
  0;
}


#line 371
OrgBouncycastleUtilBigIntegers_Cache *new_OrgBouncycastleUtilBigIntegers_Cache_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleUtilBigIntegers_Cache, init)
}


#line 371
OrgBouncycastleUtilBigIntegers_Cache *create_OrgBouncycastleUtilBigIntegers_Cache_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleUtilBigIntegers_Cache, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleUtilBigIntegers_Cache)
