//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/util/Arrays.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleUtilArrays")
#ifdef RESTRICT_OrgBouncycastleUtilArrays
#define INCLUDE_ALL_OrgBouncycastleUtilArrays 0
#else
#define INCLUDE_ALL_OrgBouncycastleUtilArrays 1
#endif
#undef RESTRICT_OrgBouncycastleUtilArrays

#if !defined (OrgBouncycastleUtilArrays_) && (INCLUDE_ALL_OrgBouncycastleUtilArrays || defined(INCLUDE_OrgBouncycastleUtilArrays))
#define OrgBouncycastleUtilArrays_

@class IOSBooleanArray;
@class IOSByteArray;
@class IOSCharArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@class IOSShortArray;

/*!
 @brief General array utilities.
 */
@interface OrgBouncycastleUtilArrays : NSObject

#pragma mark Public

+ (IOSByteArray *)appendWithByteArray:(IOSByteArray *)a
                             withByte:(jbyte)b;

+ (IOSIntArray *)appendWithIntArray:(IOSIntArray *)a
                            withInt:(jint)b;

+ (IOSShortArray *)appendWithShortArray:(IOSShortArray *)a
                              withShort:(jshort)b;

+ (IOSObjectArray *)appendWithNSStringArray:(IOSObjectArray *)a
                               withNSString:(NSString *)b;

+ (jboolean)areAllZeroesWithByteArray:(IOSByteArray *)buf
                              withInt:(jint)off
                              withInt:(jint)len;

+ (jboolean)areEqualWithBooleanArray:(IOSBooleanArray *)a
                    withBooleanArray:(IOSBooleanArray *)b;

+ (jboolean)areEqualWithByteArray:(IOSByteArray *)a
                    withByteArray:(IOSByteArray *)b;

+ (jboolean)areEqualWithByteArray:(IOSByteArray *)a
                          withInt:(jint)aFromIndex
                          withInt:(jint)aToIndex
                    withByteArray:(IOSByteArray *)b
                          withInt:(jint)bFromIndex
                          withInt:(jint)bToIndex;

+ (jboolean)areEqualWithCharArray:(IOSCharArray *)a
                    withCharArray:(IOSCharArray *)b;

+ (jboolean)areEqualWithIntArray:(IOSIntArray *)a
                    withIntArray:(IOSIntArray *)b;

+ (jboolean)areEqualWithLongArray:(IOSLongArray *)a
                    withLongArray:(IOSLongArray *)b;

+ (jboolean)areEqualWithNSObjectArray:(IOSObjectArray *)a
                    withNSObjectArray:(IOSObjectArray *)b;

+ (jboolean)areEqualWithShortArray:(IOSShortArray *)a
                    withShortArray:(IOSShortArray *)b;

/*!
 @brief Fill input array by zeros
 @param data input array
 */
+ (void)clearWithByteArray:(IOSByteArray *)data;

+ (void)clearWithIntArray:(IOSIntArray *)data;

+ (IOSObjectArray *)cloneWithJavaMathBigIntegerArray:(IOSObjectArray *)data;

+ (IOSBooleanArray *)cloneWithBooleanArray:(IOSBooleanArray *)data;

+ (IOSByteArray *)cloneWithByteArray:(IOSByteArray *)data;

+ (IOSByteArray *)cloneWithByteArray:(IOSByteArray *)data
                       withByteArray:(IOSByteArray *)existing;

+ (IOSObjectArray *)cloneWithByteArray2:(IOSObjectArray *)data;

+ (IOSObjectArray *)cloneWithByteArray3:(IOSObjectArray *)data;

+ (IOSCharArray *)cloneWithCharArray:(IOSCharArray *)data;

+ (IOSIntArray *)cloneWithIntArray:(IOSIntArray *)data;

+ (IOSLongArray *)cloneWithLongArray:(IOSLongArray *)data;

+ (IOSLongArray *)cloneWithLongArray:(IOSLongArray *)data
                       withLongArray:(IOSLongArray *)existing;

+ (IOSShortArray *)cloneWithShortArray:(IOSShortArray *)data;

+ (jint)compareUnsignedWithByteArray:(IOSByteArray *)a
                       withByteArray:(IOSByteArray *)b;

+ (IOSByteArray *)concatenateWithByteArray:(IOSByteArray *)a
                             withByteArray:(IOSByteArray *)b;

+ (IOSByteArray *)concatenateWithByteArray:(IOSByteArray *)a
                             withByteArray:(IOSByteArray *)b
                             withByteArray:(IOSByteArray *)c;

+ (IOSByteArray *)concatenateWithByteArray:(IOSByteArray *)a
                             withByteArray:(IOSByteArray *)b
                             withByteArray:(IOSByteArray *)c
                             withByteArray:(IOSByteArray *)d;

+ (IOSByteArray *)concatenateWithByteArray2:(IOSObjectArray *)arrays;

+ (IOSIntArray *)concatenateWithIntArray:(IOSIntArray *)a
                            withIntArray:(IOSIntArray *)b;

+ (IOSShortArray *)concatenateWithShortArray:(IOSShortArray *)a
                              withShortArray:(IOSShortArray *)b;

/*!
 @brief A constant time equals comparison - does not terminate early if
  test will fail.For best results always pass the expected value
  as the first parameter.
 @param expected first array
 @param supplied second array
 @return true if arrays equal, false otherwise.
 */
+ (jboolean)constantTimeAreEqualWithByteArray:(IOSByteArray *)expected
                                withByteArray:(IOSByteArray *)supplied;

+ (jboolean)constantTimeAreEqualWithInt:(jint)len
                          withByteArray:(IOSByteArray *)a
                                withInt:(jint)aOff
                          withByteArray:(IOSByteArray *)b
                                withInt:(jint)bOff;

+ (jboolean)containsWithBooleanArray:(IOSBooleanArray *)a
                         withBoolean:(jboolean)val;

+ (jboolean)containsWithByteArray:(IOSByteArray *)a
                         withByte:(jbyte)val;

+ (jboolean)containsWithCharArray:(IOSCharArray *)a
                         withChar:(jchar)val;

+ (jboolean)containsWithIntArray:(IOSIntArray *)a
                         withInt:(jint)val;

+ (jboolean)containsWithLongArray:(IOSLongArray *)a
                         withLong:(jlong)val;

+ (jboolean)containsWithShortArray:(IOSShortArray *)a
                         withShort:(jshort)val;

+ (IOSObjectArray *)copyOfWithJavaMathBigIntegerArray:(IOSObjectArray *)original
                                              withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

+ (IOSBooleanArray *)copyOfWithBooleanArray:(IOSBooleanArray *)original
                                    withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

+ (IOSByteArray *)copyOfWithByteArray:(IOSByteArray *)original
                              withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

+ (IOSCharArray *)copyOfWithCharArray:(IOSCharArray *)original
                              withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

+ (IOSIntArray *)copyOfWithIntArray:(IOSIntArray *)original
                            withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

+ (IOSLongArray *)copyOfWithLongArray:(IOSLongArray *)original
                              withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

+ (IOSShortArray *)copyOfWithShortArray:(IOSShortArray *)original
                                withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

+ (IOSObjectArray *)copyOfRangeWithJavaMathBigIntegerArray:(IOSObjectArray *)original
                                                   withInt:(jint)from
                                                   withInt:(jint)to OBJC_METHOD_FAMILY_NONE;

+ (IOSBooleanArray *)copyOfRangeWithBooleanArray:(IOSBooleanArray *)original
                                         withInt:(jint)from
                                         withInt:(jint)to OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Make a copy of a range of bytes from the passed in array.The range can extend beyond the end
  of the input array, in which case the returned array will be padded with zeroes.
 @param original the array from which the data is to be copied.
 @param from the start index at which the copying should take place.
 @param to the final index of the range (exclusive).
 @return a new byte array containing the range given.
 */
+ (IOSByteArray *)copyOfRangeWithByteArray:(IOSByteArray *)original
                                   withInt:(jint)from
                                   withInt:(jint)to OBJC_METHOD_FAMILY_NONE;

+ (IOSCharArray *)copyOfRangeWithCharArray:(IOSCharArray *)original
                                   withInt:(jint)from
                                   withInt:(jint)to OBJC_METHOD_FAMILY_NONE;

+ (IOSIntArray *)copyOfRangeWithIntArray:(IOSIntArray *)original
                                 withInt:(jint)from
                                 withInt:(jint)to OBJC_METHOD_FAMILY_NONE;

+ (IOSLongArray *)copyOfRangeWithLongArray:(IOSLongArray *)original
                                   withInt:(jint)from
                                   withInt:(jint)to OBJC_METHOD_FAMILY_NONE;

+ (IOSShortArray *)copyOfRangeWithShortArray:(IOSShortArray *)original
                                     withInt:(jint)from
                                     withInt:(jint)to OBJC_METHOD_FAMILY_NONE;

+ (void)fillWithBooleanArray:(IOSBooleanArray *)a
                 withBoolean:(jboolean)val;

+ (void)fillWithBooleanArray:(IOSBooleanArray *)a
                     withInt:(jint)fromIndex
                     withInt:(jint)toIndex
                 withBoolean:(jboolean)val;

+ (void)fillWithByteArray:(IOSByteArray *)a
                 withByte:(jbyte)val;

+ (void)fillWithByteArray:(IOSByteArray *)a
                  withInt:(jint)fromIndex
                  withInt:(jint)toIndex
                 withByte:(jbyte)val;

+ (void)fillWithCharArray:(IOSCharArray *)a
                 withChar:(jchar)val;

+ (void)fillWithCharArray:(IOSCharArray *)a
                  withInt:(jint)fromIndex
                  withInt:(jint)toIndex
                 withChar:(jchar)val;

+ (void)fillWithIntArray:(IOSIntArray *)a
                 withInt:(jint)val;

+ (void)fillWithIntArray:(IOSIntArray *)a
                 withInt:(jint)fromIndex
                 withInt:(jint)toIndex
                 withInt:(jint)val;

+ (void)fillWithLongArray:(IOSLongArray *)a
                  withInt:(jint)fromIndex
                  withInt:(jint)toIndex
                 withLong:(jlong)val;

+ (void)fillWithLongArray:(IOSLongArray *)a
                 withLong:(jlong)val;

+ (void)fillWithNSObjectArray:(IOSObjectArray *)a
                      withInt:(jint)fromIndex
                      withInt:(jint)toIndex
                       withId:(id)val;

+ (void)fillWithNSObjectArray:(IOSObjectArray *)a
                       withId:(id)val;

+ (void)fillWithShortArray:(IOSShortArray *)a
                   withInt:(jint)fromIndex
                   withInt:(jint)toIndex
                 withShort:(jshort)val;

+ (void)fillWithShortArray:(IOSShortArray *)a
                 withShort:(jshort)val;

+ (jint)hashCodeWithByteArray:(IOSByteArray *)data;

+ (jint)hashCodeWithByteArray:(IOSByteArray *)data
                      withInt:(jint)off
                      withInt:(jint)len;

+ (jint)hashCodeWithCharArray:(IOSCharArray *)data;

+ (jint)hashCodeWithIntArray:(IOSIntArray *)data;

+ (jint)hashCodeWithIntArray:(IOSIntArray *)data
                     withInt:(jint)off
                     withInt:(jint)len;

+ (jint)hashCodeWithIntArray2:(IOSObjectArray *)ints;

+ (jint)hashCodeWithLongArray:(IOSLongArray *)data;

+ (jint)hashCodeWithLongArray:(IOSLongArray *)data
                      withInt:(jint)off
                      withInt:(jint)len;

+ (jint)hashCodeWithNSObjectArray:(IOSObjectArray *)data;

+ (jint)hashCodeWithShortArray:(IOSShortArray *)data;

+ (jint)hashCodeWithShortArray2:(IOSObjectArray *)shorts;

+ (jint)hashCodeWithShortArray3:(IOSObjectArray *)shorts;

+ (jboolean)isNullOrContainsNullWithNSObjectArray:(IOSObjectArray *)array;

+ (jboolean)isNullOrEmptyWithByteArray:(IOSByteArray *)array;

+ (jboolean)isNullOrEmptyWithIntArray:(IOSIntArray *)array;

+ (jboolean)isNullOrEmptyWithNSObjectArray:(IOSObjectArray *)array;

+ (IOSByteArray *)prependWithByteArray:(IOSByteArray *)a
                              withByte:(jbyte)b;

+ (IOSIntArray *)prependWithIntArray:(IOSIntArray *)a
                             withInt:(jint)b;

+ (IOSShortArray *)prependWithShortArray:(IOSShortArray *)a
                               withShort:(jshort)b;

+ (IOSByteArray *)reverseWithByteArray:(IOSByteArray *)a;

+ (IOSIntArray *)reverseWithIntArray:(IOSIntArray *)a;

+ (IOSByteArray *)reverseInPlaceWithByteArray:(IOSByteArray *)a;

+ (IOSIntArray *)reverseInPlaceWithIntArray:(IOSIntArray *)a;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleUtilArrays)

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_areAllZeroesWithByteArray_withInt_withInt_(IOSByteArray *buf, jint off, jint len);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_areEqualWithBooleanArray_withBooleanArray_(IOSBooleanArray *a, IOSBooleanArray *b);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_areEqualWithByteArray_withInt_withInt_withByteArray_withInt_withInt_(IOSByteArray *a, jint aFromIndex, jint aToIndex, IOSByteArray *b, jint bFromIndex, jint bToIndex);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_areEqualWithCharArray_withCharArray_(IOSCharArray *a, IOSCharArray *b);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_areEqualWithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *b);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_areEqualWithLongArray_withLongArray_(IOSLongArray *a, IOSLongArray *b);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_areEqualWithNSObjectArray_withNSObjectArray_(IOSObjectArray *a, IOSObjectArray *b);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_areEqualWithShortArray_withShortArray_(IOSShortArray *a, IOSShortArray *b);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(IOSByteArray *expected, IOSByteArray *supplied);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_constantTimeAreEqualWithInt_withByteArray_withInt_withByteArray_withInt_(jint len, IOSByteArray *a, jint aOff, IOSByteArray *b, jint bOff);

FOUNDATION_EXPORT jint OrgBouncycastleUtilArrays_compareUnsignedWithByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_containsWithBooleanArray_withBoolean_(IOSBooleanArray *a, jboolean val);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_containsWithByteArray_withByte_(IOSByteArray *a, jbyte val);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_containsWithCharArray_withChar_(IOSCharArray *a, jchar val);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_containsWithIntArray_withInt_(IOSIntArray *a, jint val);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_containsWithLongArray_withLong_(IOSLongArray *a, jlong val);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_containsWithShortArray_withShort_(IOSShortArray *a, jshort val);

FOUNDATION_EXPORT void OrgBouncycastleUtilArrays_fillWithBooleanArray_withBoolean_(IOSBooleanArray *a, jboolean val);

FOUNDATION_EXPORT void OrgBouncycastleUtilArrays_fillWithBooleanArray_withInt_withInt_withBoolean_(IOSBooleanArray *a, jint fromIndex, jint toIndex, jboolean val);

FOUNDATION_EXPORT void OrgBouncycastleUtilArrays_fillWithByteArray_withByte_(IOSByteArray *a, jbyte val);

FOUNDATION_EXPORT void OrgBouncycastleUtilArrays_fillWithByteArray_withInt_withInt_withByte_(IOSByteArray *a, jint fromIndex, jint toIndex, jbyte val);

FOUNDATION_EXPORT void OrgBouncycastleUtilArrays_fillWithCharArray_withChar_(IOSCharArray *a, jchar val);

FOUNDATION_EXPORT void OrgBouncycastleUtilArrays_fillWithCharArray_withInt_withInt_withChar_(IOSCharArray *a, jint fromIndex, jint toIndex, jchar val);

FOUNDATION_EXPORT void OrgBouncycastleUtilArrays_fillWithIntArray_withInt_(IOSIntArray *a, jint val);

FOUNDATION_EXPORT void OrgBouncycastleUtilArrays_fillWithIntArray_withInt_withInt_withInt_(IOSIntArray *a, jint fromIndex, jint toIndex, jint val);

FOUNDATION_EXPORT void OrgBouncycastleUtilArrays_fillWithLongArray_withLong_(IOSLongArray *a, jlong val);

FOUNDATION_EXPORT void OrgBouncycastleUtilArrays_fillWithLongArray_withInt_withInt_withLong_(IOSLongArray *a, jint fromIndex, jint toIndex, jlong val);

FOUNDATION_EXPORT void OrgBouncycastleUtilArrays_fillWithNSObjectArray_withId_(IOSObjectArray *a, id val);

FOUNDATION_EXPORT void OrgBouncycastleUtilArrays_fillWithNSObjectArray_withInt_withInt_withId_(IOSObjectArray *a, jint fromIndex, jint toIndex, id val);

FOUNDATION_EXPORT void OrgBouncycastleUtilArrays_fillWithShortArray_withShort_(IOSShortArray *a, jshort val);

FOUNDATION_EXPORT void OrgBouncycastleUtilArrays_fillWithShortArray_withInt_withInt_withShort_(IOSShortArray *a, jint fromIndex, jint toIndex, jshort val);

FOUNDATION_EXPORT jint OrgBouncycastleUtilArrays_hashCodeWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT jint OrgBouncycastleUtilArrays_hashCodeWithByteArray_withInt_withInt_(IOSByteArray *data, jint off, jint len);

FOUNDATION_EXPORT jint OrgBouncycastleUtilArrays_hashCodeWithCharArray_(IOSCharArray *data);

FOUNDATION_EXPORT jint OrgBouncycastleUtilArrays_hashCodeWithIntArray2_(IOSObjectArray *ints);

FOUNDATION_EXPORT jint OrgBouncycastleUtilArrays_hashCodeWithIntArray_(IOSIntArray *data);

FOUNDATION_EXPORT jint OrgBouncycastleUtilArrays_hashCodeWithIntArray_withInt_withInt_(IOSIntArray *data, jint off, jint len);

FOUNDATION_EXPORT jint OrgBouncycastleUtilArrays_hashCodeWithLongArray_(IOSLongArray *data);

FOUNDATION_EXPORT jint OrgBouncycastleUtilArrays_hashCodeWithLongArray_withInt_withInt_(IOSLongArray *data, jint off, jint len);

FOUNDATION_EXPORT jint OrgBouncycastleUtilArrays_hashCodeWithShortArray3_(IOSObjectArray *shorts);

FOUNDATION_EXPORT jint OrgBouncycastleUtilArrays_hashCodeWithShortArray2_(IOSObjectArray *shorts);

FOUNDATION_EXPORT jint OrgBouncycastleUtilArrays_hashCodeWithShortArray_(IOSShortArray *data);

FOUNDATION_EXPORT jint OrgBouncycastleUtilArrays_hashCodeWithNSObjectArray_(IOSObjectArray *data);

FOUNDATION_EXPORT IOSBooleanArray *OrgBouncycastleUtilArrays_cloneWithBooleanArray_(IOSBooleanArray *data);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilArrays_cloneWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT IOSCharArray *OrgBouncycastleUtilArrays_cloneWithCharArray_(IOSCharArray *data);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastleUtilArrays_cloneWithIntArray_(IOSIntArray *data);

FOUNDATION_EXPORT IOSLongArray *OrgBouncycastleUtilArrays_cloneWithLongArray_(IOSLongArray *data);

FOUNDATION_EXPORT IOSShortArray *OrgBouncycastleUtilArrays_cloneWithShortArray_(IOSShortArray *data);

FOUNDATION_EXPORT IOSObjectArray *OrgBouncycastleUtilArrays_cloneWithJavaMathBigIntegerArray_(IOSObjectArray *data);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilArrays_cloneWithByteArray_withByteArray_(IOSByteArray *data, IOSByteArray *existing);

FOUNDATION_EXPORT IOSLongArray *OrgBouncycastleUtilArrays_cloneWithLongArray_withLongArray_(IOSLongArray *data, IOSLongArray *existing);

FOUNDATION_EXPORT IOSObjectArray *OrgBouncycastleUtilArrays_cloneWithByteArray2_(IOSObjectArray *data);

FOUNDATION_EXPORT IOSObjectArray *OrgBouncycastleUtilArrays_cloneWithByteArray3_(IOSObjectArray *data);

FOUNDATION_EXPORT IOSBooleanArray *OrgBouncycastleUtilArrays_copyOfWithBooleanArray_withInt_(IOSBooleanArray *original, jint newLength);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilArrays_copyOfWithByteArray_withInt_(IOSByteArray *original, jint newLength);

FOUNDATION_EXPORT IOSCharArray *OrgBouncycastleUtilArrays_copyOfWithCharArray_withInt_(IOSCharArray *original, jint newLength);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastleUtilArrays_copyOfWithIntArray_withInt_(IOSIntArray *original, jint newLength);

FOUNDATION_EXPORT IOSLongArray *OrgBouncycastleUtilArrays_copyOfWithLongArray_withInt_(IOSLongArray *original, jint newLength);

FOUNDATION_EXPORT IOSShortArray *OrgBouncycastleUtilArrays_copyOfWithShortArray_withInt_(IOSShortArray *original, jint newLength);

FOUNDATION_EXPORT IOSObjectArray *OrgBouncycastleUtilArrays_copyOfWithJavaMathBigIntegerArray_withInt_(IOSObjectArray *original, jint newLength);

FOUNDATION_EXPORT IOSBooleanArray *OrgBouncycastleUtilArrays_copyOfRangeWithBooleanArray_withInt_withInt_(IOSBooleanArray *original, jint from, jint to);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(IOSByteArray *original, jint from, jint to);

FOUNDATION_EXPORT IOSCharArray *OrgBouncycastleUtilArrays_copyOfRangeWithCharArray_withInt_withInt_(IOSCharArray *original, jint from, jint to);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastleUtilArrays_copyOfRangeWithIntArray_withInt_withInt_(IOSIntArray *original, jint from, jint to);

FOUNDATION_EXPORT IOSLongArray *OrgBouncycastleUtilArrays_copyOfRangeWithLongArray_withInt_withInt_(IOSLongArray *original, jint from, jint to);

FOUNDATION_EXPORT IOSShortArray *OrgBouncycastleUtilArrays_copyOfRangeWithShortArray_withInt_withInt_(IOSShortArray *original, jint from, jint to);

FOUNDATION_EXPORT IOSObjectArray *OrgBouncycastleUtilArrays_copyOfRangeWithJavaMathBigIntegerArray_withInt_withInt_(IOSObjectArray *original, jint from, jint to);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilArrays_appendWithByteArray_withByte_(IOSByteArray *a, jbyte b);

FOUNDATION_EXPORT IOSShortArray *OrgBouncycastleUtilArrays_appendWithShortArray_withShort_(IOSShortArray *a, jshort b);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastleUtilArrays_appendWithIntArray_withInt_(IOSIntArray *a, jint b);

FOUNDATION_EXPORT IOSObjectArray *OrgBouncycastleUtilArrays_appendWithNSStringArray_withNSString_(IOSObjectArray *a, NSString *b);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b);

FOUNDATION_EXPORT IOSShortArray *OrgBouncycastleUtilArrays_concatenateWithShortArray_withShortArray_(IOSShortArray *a, IOSShortArray *b);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b, IOSByteArray *c);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b, IOSByteArray *c, IOSByteArray *d);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilArrays_concatenateWithByteArray2_(IOSObjectArray *arrays);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastleUtilArrays_concatenateWithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *b);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilArrays_prependWithByteArray_withByte_(IOSByteArray *a, jbyte b);

FOUNDATION_EXPORT IOSShortArray *OrgBouncycastleUtilArrays_prependWithShortArray_withShort_(IOSShortArray *a, jshort b);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastleUtilArrays_prependWithIntArray_withInt_(IOSIntArray *a, jint b);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilArrays_reverseWithByteArray_(IOSByteArray *a);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastleUtilArrays_reverseWithIntArray_(IOSIntArray *a);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleUtilArrays_reverseInPlaceWithByteArray_(IOSByteArray *a);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastleUtilArrays_reverseInPlaceWithIntArray_(IOSIntArray *a);

FOUNDATION_EXPORT void OrgBouncycastleUtilArrays_clearWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT void OrgBouncycastleUtilArrays_clearWithIntArray_(IOSIntArray *data);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_isNullOrContainsNullWithNSObjectArray_(IOSObjectArray *array);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_isNullOrEmptyWithByteArray_(IOSByteArray *array);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_isNullOrEmptyWithIntArray_(IOSIntArray *array);

FOUNDATION_EXPORT jboolean OrgBouncycastleUtilArrays_isNullOrEmptyWithNSObjectArray_(IOSObjectArray *array);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleUtilArrays)

#endif

#if !defined (OrgBouncycastleUtilArrays_Iterator_) && (INCLUDE_ALL_OrgBouncycastleUtilArrays || defined(INCLUDE_OrgBouncycastleUtilArrays_Iterator))
#define OrgBouncycastleUtilArrays_Iterator_

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@class IOSObjectArray;
@protocol JavaUtilFunctionConsumer;

/*!
 @brief Iterator backed by a specific array.
 */
@interface OrgBouncycastleUtilArrays_Iterator : NSObject < JavaUtilIterator >

#pragma mark Public

/*!
 @brief Base constructor.
 <p>
  Note: the array is not cloned, changes to it will affect the values returned by next(). 
 </p>
 @param dataArray array backing the iterator.
 */
- (instancetype)initWithNSObjectArray:(IOSObjectArray *)dataArray;

- (jboolean)hasNext;

- (id)next;

- (void)remove;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleUtilArrays_Iterator)

FOUNDATION_EXPORT void OrgBouncycastleUtilArrays_Iterator_initWithNSObjectArray_(OrgBouncycastleUtilArrays_Iterator *self, IOSObjectArray *dataArray);

FOUNDATION_EXPORT OrgBouncycastleUtilArrays_Iterator *new_OrgBouncycastleUtilArrays_Iterator_initWithNSObjectArray_(IOSObjectArray *dataArray) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleUtilArrays_Iterator *create_OrgBouncycastleUtilArrays_Iterator_initWithNSObjectArray_(IOSObjectArray *dataArray);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleUtilArrays_Iterator)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleUtilArrays")
