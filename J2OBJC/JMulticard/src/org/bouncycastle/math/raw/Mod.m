//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/raw/Mod.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Random.h"
#include "org/bouncycastle/math/raw/Mod.h"
#include "org/bouncycastle/math/raw/Nat.h"
#include "org/bouncycastle/util/Integers.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/math/raw/Mod must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleMathRawMod ()

+ (jint)add30WithInt:(jint)len30
        withIntArray:(IOSIntArray *)D
        withIntArray:(IOSIntArray *)M;

+ (void)cnegate30WithInt:(jint)len30
                 withInt:(jint)cond
            withIntArray:(IOSIntArray *)D;

+ (void)cnormalize30WithInt:(jint)len30
                    withInt:(jint)condNegate
               withIntArray:(IOSIntArray *)D
               withIntArray:(IOSIntArray *)M;

+ (void)decode30WithInt:(jint)bits
           withIntArray:(IOSIntArray *)x
                withInt:(jint)xOff
           withIntArray:(IOSIntArray *)z
                withInt:(jint)zOff;

+ (jint)divsteps30WithInt:(jint)delta
                  withInt:(jint)f0
                  withInt:(jint)g0
             withIntArray:(IOSIntArray *)t;

+ (jint)divsteps30VarWithInt:(jint)eta
                     withInt:(jint)f0
                     withInt:(jint)g0
                withIntArray:(IOSIntArray *)t;

+ (void)encode30WithInt:(jint)bits
           withIntArray:(IOSIntArray *)x
                withInt:(jint)xOff
           withIntArray:(IOSIntArray *)z
                withInt:(jint)zOff;

+ (jint)getMaximumDivstepsWithInt:(jint)bits;

+ (jint)negate30WithInt:(jint)len30
           withIntArray:(IOSIntArray *)D;

+ (void)updateDE30WithInt:(jint)len30
             withIntArray:(IOSIntArray *)D
             withIntArray:(IOSIntArray *)E
             withIntArray:(IOSIntArray *)t
                  withInt:(jint)m0Inv32
             withIntArray:(IOSIntArray *)M;

+ (void)updateFG30WithInt:(jint)len30
             withIntArray:(IOSIntArray *)F
             withIntArray:(IOSIntArray *)G
             withIntArray:(IOSIntArray *)t;

@end

inline jint OrgBouncycastleMathRawMod_get_M30(void);
#define OrgBouncycastleMathRawMod_M30 1073741823
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleMathRawMod, M30, jint)

inline jlong OrgBouncycastleMathRawMod_get_M32L(void);
#define OrgBouncycastleMathRawMod_M32L 4294967295LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleMathRawMod, M32L, jlong)

__attribute__((unused)) static jint OrgBouncycastleMathRawMod_add30WithInt_withIntArray_withIntArray_(jint len30, IOSIntArray *D, IOSIntArray *M);

__attribute__((unused)) static void OrgBouncycastleMathRawMod_cnegate30WithInt_withInt_withIntArray_(jint len30, jint cond, IOSIntArray *D);

__attribute__((unused)) static void OrgBouncycastleMathRawMod_cnormalize30WithInt_withInt_withIntArray_withIntArray_(jint len30, jint condNegate, IOSIntArray *D, IOSIntArray *M);

__attribute__((unused)) static void OrgBouncycastleMathRawMod_decode30WithInt_withIntArray_withInt_withIntArray_withInt_(jint bits, IOSIntArray *x, jint xOff, IOSIntArray *z, jint zOff);

__attribute__((unused)) static jint OrgBouncycastleMathRawMod_divsteps30WithInt_withInt_withInt_withIntArray_(jint delta, jint f0, jint g0, IOSIntArray *t);

__attribute__((unused)) static jint OrgBouncycastleMathRawMod_divsteps30VarWithInt_withInt_withInt_withIntArray_(jint eta, jint f0, jint g0, IOSIntArray *t);

__attribute__((unused)) static void OrgBouncycastleMathRawMod_encode30WithInt_withIntArray_withInt_withIntArray_withInt_(jint bits, IOSIntArray *x, jint xOff, IOSIntArray *z, jint zOff);

__attribute__((unused)) static jint OrgBouncycastleMathRawMod_getMaximumDivstepsWithInt_(jint bits);

__attribute__((unused)) static jint OrgBouncycastleMathRawMod_negate30WithInt_withIntArray_(jint len30, IOSIntArray *D);

__attribute__((unused)) static void OrgBouncycastleMathRawMod_updateDE30WithInt_withIntArray_withIntArray_withIntArray_withInt_withIntArray_(jint len30, IOSIntArray *D, IOSIntArray *E, IOSIntArray *t, jint m0Inv32, IOSIntArray *M);

__attribute__((unused)) static void OrgBouncycastleMathRawMod_updateFG30WithInt_withIntArray_withIntArray_withIntArray_(jint len30, IOSIntArray *F, IOSIntArray *G, IOSIntArray *t);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/raw/Mod.java"


#line 12
@implementation OrgBouncycastleMathRawMod

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 12
- (instancetype)init {
  OrgBouncycastleMathRawMod_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 17
+ (void)checkedModOddInverseWithIntArray:(IOSIntArray *)m
                            withIntArray:(IOSIntArray *)x
                            withIntArray:(IOSIntArray *)z {
  OrgBouncycastleMathRawMod_checkedModOddInverseWithIntArray_withIntArray_withIntArray_(m, x, z);
}


#line 25
+ (void)checkedModOddInverseVarWithIntArray:(IOSIntArray *)m
                               withIntArray:(IOSIntArray *)x
                               withIntArray:(IOSIntArray *)z {
  OrgBouncycastleMathRawMod_checkedModOddInverseVarWithIntArray_withIntArray_withIntArray_(m, x, z);
}


#line 33
+ (jint)inverse32WithInt:(jint)d {
  return OrgBouncycastleMathRawMod_inverse32WithInt_(d);
}


#line 46
+ (jint)modOddInverseWithIntArray:(IOSIntArray *)m
                     withIntArray:(IOSIntArray *)x
                     withIntArray:(IOSIntArray *)z {
  return OrgBouncycastleMathRawMod_modOddInverseWithIntArray_withIntArray_withIntArray_(m, x, z);
}


#line 95
+ (jboolean)modOddInverseVarWithIntArray:(IOSIntArray *)m
                            withIntArray:(IOSIntArray *)x
                            withIntArray:(IOSIntArray *)z {
  return OrgBouncycastleMathRawMod_modOddInverseVarWithIntArray_withIntArray_withIntArray_(m, x, z);
}


#line 188
+ (IOSIntArray *)randomWithIntArray:(IOSIntArray *)p {
  return OrgBouncycastleMathRawMod_randomWithIntArray_(p);
}


#line 214
+ (jint)add30WithInt:(jint)len30
        withIntArray:(IOSIntArray *)D
        withIntArray:(IOSIntArray *)M {
  return OrgBouncycastleMathRawMod_add30WithInt_withIntArray_withIntArray_(len30, D, M);
}


#line 231
+ (void)cnegate30WithInt:(jint)len30
                 withInt:(jint)cond
            withIntArray:(IOSIntArray *)D {
  OrgBouncycastleMathRawMod_cnegate30WithInt_withInt_withIntArray_(len30, cond, D);
}


#line 246
+ (void)cnormalize30WithInt:(jint)len30
                    withInt:(jint)condNegate
               withIntArray:(IOSIntArray *)D
               withIntArray:(IOSIntArray *)M {
  OrgBouncycastleMathRawMod_cnormalize30WithInt_withInt_withIntArray_withIntArray_(len30, condNegate, D, M);
}


#line 284
+ (void)decode30WithInt:(jint)bits
           withIntArray:(IOSIntArray *)x
                withInt:(jint)xOff
           withIntArray:(IOSIntArray *)z
                withInt:(jint)zOff {
  OrgBouncycastleMathRawMod_decode30WithInt_withIntArray_withInt_withIntArray_withInt_(bits, x, xOff, z, zOff);
}


#line 306
+ (jint)divsteps30WithInt:(jint)delta
                  withInt:(jint)f0
                  withInt:(jint)g0
             withIntArray:(IOSIntArray *)t {
  return OrgBouncycastleMathRawMod_divsteps30WithInt_withInt_withInt_withIntArray_(delta, f0, g0, t);
}


#line 348
+ (jint)divsteps30VarWithInt:(jint)eta
                     withInt:(jint)f0
                     withInt:(jint)g0
                withIntArray:(IOSIntArray *)t {
  return OrgBouncycastleMathRawMod_divsteps30VarWithInt_withInt_withInt_withIntArray_(eta, f0, g0, t);
}


#line 413
+ (void)encode30WithInt:(jint)bits
           withIntArray:(IOSIntArray *)x
                withInt:(jint)xOff
           withIntArray:(IOSIntArray *)z
                withInt:(jint)zOff {
  OrgBouncycastleMathRawMod_encode30WithInt_withIntArray_withInt_withIntArray_withInt_(bits, x, xOff, z, zOff);
}


#line 435
+ (jint)getMaximumDivstepsWithInt:(jint)bits {
  return OrgBouncycastleMathRawMod_getMaximumDivstepsWithInt_(bits);
}


#line 440
+ (jint)negate30WithInt:(jint)len30
           withIntArray:(IOSIntArray *)D {
  return OrgBouncycastleMathRawMod_negate30WithInt_withIntArray_(len30, D);
}


#line 456
+ (void)updateDE30WithInt:(jint)len30
             withIntArray:(IOSIntArray *)D
             withIntArray:(IOSIntArray *)E
             withIntArray:(IOSIntArray *)t
                  withInt:(jint)m0Inv32
             withIntArray:(IOSIntArray *)M {
  OrgBouncycastleMathRawMod_updateDE30WithInt_withIntArray_withIntArray_withIntArray_withInt_withIntArray_(len30, D, E, t, m0Inv32, M);
}


#line 520
+ (void)updateFG30WithInt:(jint)len30
             withIntArray:(IOSIntArray *)F
             withIntArray:(IOSIntArray *)G
             withIntArray:(IOSIntArray *)t {
  OrgBouncycastleMathRawMod_updateFG30WithInt_withIntArray_withIntArray_withIntArray_(len30, F, G, t);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 6, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 19, 18, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 20, 16, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 21, 4, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 26, 27, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(checkedModOddInverseWithIntArray:withIntArray:withIntArray:);
  methods[2].selector = @selector(checkedModOddInverseVarWithIntArray:withIntArray:withIntArray:);
  methods[3].selector = @selector(inverse32WithInt:);
  methods[4].selector = @selector(modOddInverseWithIntArray:withIntArray:withIntArray:);
  methods[5].selector = @selector(modOddInverseVarWithIntArray:withIntArray:withIntArray:);
  methods[6].selector = @selector(randomWithIntArray:);
  methods[7].selector = @selector(add30WithInt:withIntArray:withIntArray:);
  methods[8].selector = @selector(cnegate30WithInt:withInt:withIntArray:);
  methods[9].selector = @selector(cnormalize30WithInt:withInt:withIntArray:withIntArray:);
  methods[10].selector = @selector(decode30WithInt:withIntArray:withInt:withIntArray:withInt:);
  methods[11].selector = @selector(divsteps30WithInt:withInt:withInt:withIntArray:);
  methods[12].selector = @selector(divsteps30VarWithInt:withInt:withInt:withIntArray:);
  methods[13].selector = @selector(encode30WithInt:withIntArray:withInt:withIntArray:withInt:);
  methods[14].selector = @selector(getMaximumDivstepsWithInt:);
  methods[15].selector = @selector(negate30WithInt:withIntArray:);
  methods[16].selector = @selector(updateDE30WithInt:withIntArray:withIntArray:withIntArray:withInt:withIntArray:);
  methods[17].selector = @selector(updateFG30WithInt:withIntArray:withIntArray:withIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "M30", "I", .constantValue.asInt = OrgBouncycastleMathRawMod_M30, 0x1a, -1, -1, -1, -1 },
    { "M32L", "J", .constantValue.asLong = OrgBouncycastleMathRawMod_M32L, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "checkedModOddInverse", "[I[I[I", "checkedModOddInverseVar", "inverse32", "I", "modOddInverse", "modOddInverseVar", "random", "[I", "add30", "I[I[I", "cnegate30", "II[I", "cnormalize30", "II[I[I", "decode30", "I[II[II", "divsteps30", "III[I", "divsteps30Var", "encode30", "getMaximumDivsteps", "negate30", "I[I", "updateDE30", "I[I[I[II[I", "updateFG30", "I[I[I[I" };
  static const J2ObjcClassInfo _OrgBouncycastleMathRawMod = { "Mod", "org.bouncycastle.math.raw", ptrTable, methods, fields, 7, 0x401, 18, 2, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathRawMod;
}

@end


#line 12
void OrgBouncycastleMathRawMod_init(OrgBouncycastleMathRawMod *self) {
  NSObject_init(self);
}


#line 17
void OrgBouncycastleMathRawMod_checkedModOddInverseWithIntArray_withIntArray_withIntArray_(IOSIntArray *m, IOSIntArray *x, IOSIntArray *z) {
  OrgBouncycastleMathRawMod_initialize();
  if (0 == OrgBouncycastleMathRawMod_modOddInverseWithIntArray_withIntArray_withIntArray_(m, x, z)) {
    
#line 21
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Inverse does not exist.");
  }
}


#line 25
void OrgBouncycastleMathRawMod_checkedModOddInverseVarWithIntArray_withIntArray_withIntArray_(IOSIntArray *m, IOSIntArray *x, IOSIntArray *z) {
  OrgBouncycastleMathRawMod_initialize();
  if (!OrgBouncycastleMathRawMod_modOddInverseVarWithIntArray_withIntArray_withIntArray_(m, x, z)) {
    
#line 29
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Inverse does not exist.");
  }
}


#line 33
jint OrgBouncycastleMathRawMod_inverse32WithInt_(jint d) {
  OrgBouncycastleMathRawMod_initialize();
  
#line 37
  jint x = d;
  x *= 2 - d * x;
  x *= 2 - d * x;
  x *= 2 - d * x;
  x *= 2 - d * x;
  
#line 43
  return x;
}


#line 46
jint OrgBouncycastleMathRawMod_modOddInverseWithIntArray_withIntArray_withIntArray_(IOSIntArray *m, IOSIntArray *x, IOSIntArray *z) {
  OrgBouncycastleMathRawMod_initialize();
  jint len32 = ((IOSIntArray *) nil_chk(m))->size_;
  
#line 53
  jint bits = (JreLShift32(len32, 5)) - OrgBouncycastleUtilIntegers_numberOfLeadingZerosWithInt_(IOSIntArray_Get(m, len32 - 1));
  jint len30 = JreIntDiv((bits + 29), 30);
  
#line 56
  IOSIntArray *t = [IOSIntArray newArrayWithLength:4];
  IOSIntArray *D = [IOSIntArray newArrayWithLength:len30];
  IOSIntArray *E = [IOSIntArray newArrayWithLength:len30];
  IOSIntArray *F = [IOSIntArray newArrayWithLength:len30];
  IOSIntArray *G = [IOSIntArray newArrayWithLength:len30];
  IOSIntArray *M = [IOSIntArray newArrayWithLength:len30];
  
#line 63
  *IOSIntArray_GetRef(E, 0) = 1;
  OrgBouncycastleMathRawMod_encode30WithInt_withIntArray_withInt_withIntArray_withInt_(bits, x, 0, G, 0);
  OrgBouncycastleMathRawMod_encode30WithInt_withIntArray_withInt_withIntArray_withInt_(bits, m, 0, M, 0);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(M, 0, F, 0, len30);
  
#line 68
  jint delta = 0;
  jint m0Inv32 = OrgBouncycastleMathRawMod_inverse32WithInt_(IOSIntArray_Get(M, 0));
  jint maxDivsteps = OrgBouncycastleMathRawMod_getMaximumDivstepsWithInt_(bits);
  
#line 72
  for (jint divSteps = 0; divSteps < maxDivsteps; divSteps += 30) {
    
#line 74
    delta = OrgBouncycastleMathRawMod_divsteps30WithInt_withInt_withInt_withIntArray_(delta, IOSIntArray_Get(F, 0), IOSIntArray_Get(G, 0), t);
    OrgBouncycastleMathRawMod_updateDE30WithInt_withIntArray_withIntArray_withIntArray_withInt_withIntArray_(len30, D, E, t, m0Inv32, M);
    OrgBouncycastleMathRawMod_updateFG30WithInt_withIntArray_withIntArray_withIntArray_(len30, F, G, t);
  }
  
#line 79
  jint signF = JreRShift32(IOSIntArray_Get(F, len30 - 1), 31);
  OrgBouncycastleMathRawMod_cnegate30WithInt_withInt_withIntArray_(len30, signF, F);
  
#line 87
  OrgBouncycastleMathRawMod_cnormalize30WithInt_withInt_withIntArray_withIntArray_(len30, signF, D, M);
  
#line 89
  OrgBouncycastleMathRawMod_decode30WithInt_withIntArray_withInt_withIntArray_withInt_(bits, D, 0, z, 0);
  
#line 92
  return OrgBouncycastleMathRawNat_equalToWithInt_withIntArray_withInt_(len30, F, 1) & OrgBouncycastleMathRawNat_equalToZeroWithInt_withIntArray_(len30, G);
}


#line 95
jboolean OrgBouncycastleMathRawMod_modOddInverseVarWithIntArray_withIntArray_withIntArray_(IOSIntArray *m, IOSIntArray *x, IOSIntArray *z) {
  OrgBouncycastleMathRawMod_initialize();
  jint len32 = ((IOSIntArray *) nil_chk(m))->size_;
  
#line 102
  jint bits = (JreLShift32(len32, 5)) - OrgBouncycastleUtilIntegers_numberOfLeadingZerosWithInt_(IOSIntArray_Get(m, len32 - 1));
  jint len30 = JreIntDiv((bits + 29), 30);
  
#line 105
  IOSIntArray *t = [IOSIntArray newArrayWithLength:4];
  IOSIntArray *D = [IOSIntArray newArrayWithLength:len30];
  IOSIntArray *E = [IOSIntArray newArrayWithLength:len30];
  IOSIntArray *F = [IOSIntArray newArrayWithLength:len30];
  IOSIntArray *G = [IOSIntArray newArrayWithLength:len30];
  IOSIntArray *M = [IOSIntArray newArrayWithLength:len30];
  
#line 112
  *IOSIntArray_GetRef(E, 0) = 1;
  OrgBouncycastleMathRawMod_encode30WithInt_withIntArray_withInt_withIntArray_withInt_(bits, x, 0, G, 0);
  OrgBouncycastleMathRawMod_encode30WithInt_withIntArray_withInt_withIntArray_withInt_(bits, m, 0, M, 0);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(M, 0, F, 0, len30);
  
#line 117
  jint clzG = OrgBouncycastleUtilIntegers_numberOfLeadingZerosWithInt_(IOSIntArray_Get(G, len30 - 1) | 1) - (len30 * 30 + 2 - bits);
  jint eta = -1 - clzG;
  jint lenDE = len30;
  
#line 119
  jint lenFG = len30;
  jint m0Inv32 = OrgBouncycastleMathRawMod_inverse32WithInt_(IOSIntArray_Get(M, 0));
  jint maxDivsteps = OrgBouncycastleMathRawMod_getMaximumDivstepsWithInt_(bits);
  
#line 123
  jint divsteps = 0;
  while (!OrgBouncycastleMathRawNat_isZeroWithInt_withIntArray_(lenFG, G)) {
    
#line 126
    if (divsteps >= maxDivsteps) {
      
#line 128
      return false;
    }
    
#line 131
    divsteps += 30;
    
#line 133
    eta = OrgBouncycastleMathRawMod_divsteps30VarWithInt_withInt_withInt_withIntArray_(eta, IOSIntArray_Get(F, 0), IOSIntArray_Get(G, 0), t);
    OrgBouncycastleMathRawMod_updateDE30WithInt_withIntArray_withIntArray_withIntArray_withInt_withIntArray_(lenDE, D, E, t, m0Inv32, M);
    OrgBouncycastleMathRawMod_updateFG30WithInt_withIntArray_withIntArray_withIntArray_(lenFG, F, G, t);
    
#line 137
    jint fn = IOSIntArray_Get(F, lenFG - 1);
    jint gn = IOSIntArray_Get(G, lenFG - 1);
    
#line 140
    jint cond = JreRShift32((lenFG - 2), 31);
    cond |= fn ^ (JreRShift32(fn, 31));
    cond |= gn ^ (JreRShift32(gn, 31));
    
#line 144
    if (cond == 0) {
      
#line 146
      *IOSIntArray_GetRef(F, lenFG - 2) |= JreLShift32(fn, 30);
      *IOSIntArray_GetRef(G, lenFG - 2) |= JreLShift32(gn, 30);
      --lenFG;
    }
  }
  
#line 152
  jint signF = JreRShift32(IOSIntArray_Get(F, lenFG - 1), 31);
  
#line 159
  jint signD = JreRShift32(IOSIntArray_Get(D, lenDE - 1), 31);
  if (signD < 0) {
    
#line 162
    signD = OrgBouncycastleMathRawMod_add30WithInt_withIntArray_withIntArray_(lenDE, D, M);
  }
  if (signF < 0) {
    
#line 166
    signD = OrgBouncycastleMathRawMod_negate30WithInt_withIntArray_(lenDE, D);
    signF = OrgBouncycastleMathRawMod_negate30WithInt_withIntArray_(lenFG, F);
  }
  
#line 171
  if (!OrgBouncycastleMathRawNat_isOneWithInt_withIntArray_(lenFG, F)) {
    
#line 173
    return false;
  }
  
#line 176
  if (signD < 0) {
    
#line 178
    signD = OrgBouncycastleMathRawMod_add30WithInt_withIntArray_withIntArray_(lenDE, D, M);
  }
  
#line 182
  OrgBouncycastleMathRawMod_decode30WithInt_withIntArray_withInt_withIntArray_withInt_(bits, D, 0, z, 0);
  
#line 185
  return true;
}


#line 188
IOSIntArray *OrgBouncycastleMathRawMod_randomWithIntArray_(IOSIntArray *p) {
  OrgBouncycastleMathRawMod_initialize();
  jint len = ((IOSIntArray *) nil_chk(p))->size_;
  JavaUtilRandom *rand = new_JavaUtilRandom_init();
  IOSIntArray *s = OrgBouncycastleMathRawNat_createWithInt_(len);
  
#line 194
  jint m = IOSIntArray_Get(p, len - 1);
  m |= JreURShift32(m, 1);
  m |= JreURShift32(m, 2);
  m |= JreURShift32(m, 4);
  m |= JreURShift32(m, 8);
  m |= JreURShift32(m, 16);
  
#line 201
  do {
    
#line 203
    for (jint i = 0; i != len; i++) {
      
#line 205
      *IOSIntArray_GetRef(nil_chk(s), i) = [rand nextInt];
    }
    *IOSIntArray_GetRef(nil_chk(s), len - 1) &= m;
  }
  while (OrgBouncycastleMathRawNat_gteWithInt_withIntArray_withIntArray_(len, s, p));
  
#line 211
  return s;
}


#line 214
jint OrgBouncycastleMathRawMod_add30WithInt_withIntArray_withIntArray_(jint len30, IOSIntArray *D, IOSIntArray *M) {
  OrgBouncycastleMathRawMod_initialize();
  
#line 220
  jint c = 0;
  
#line 220
  jint last = len30 - 1;
  for (jint i = 0; i < last; ++i) {
    
#line 223
    c += IOSIntArray_Get(nil_chk(D), i) + IOSIntArray_Get(nil_chk(M), i);
    *IOSIntArray_GetRef(D, i) = c & OrgBouncycastleMathRawMod_M30;
    
#line 224
    JreRShiftAssignInt(&c, 30);
  }
  c += IOSIntArray_Get(nil_chk(D), last) + IOSIntArray_Get(nil_chk(M), last);
  *IOSIntArray_GetRef(D, last) = c;
  
#line 227
  JreRShiftAssignInt(&c, 30);
  return c;
}


#line 231
void OrgBouncycastleMathRawMod_cnegate30WithInt_withInt_withIntArray_(jint len30, jint cond, IOSIntArray *D) {
  OrgBouncycastleMathRawMod_initialize();
  
#line 236
  jint c = 0;
  
#line 236
  jint last = len30 - 1;
  for (jint i = 0; i < last; ++i) {
    
#line 239
    c += (IOSIntArray_Get(nil_chk(D), i) ^ cond) - cond;
    *IOSIntArray_GetRef(D, i) = c & OrgBouncycastleMathRawMod_M30;
    
#line 240
    JreRShiftAssignInt(&c, 30);
  }
  c += (IOSIntArray_Get(nil_chk(D), last) ^ cond) - cond;
  *IOSIntArray_GetRef(D, last) = c;
}


#line 246
void OrgBouncycastleMathRawMod_cnormalize30WithInt_withInt_withIntArray_withIntArray_(jint len30, jint condNegate, IOSIntArray *D, IOSIntArray *M) {
  OrgBouncycastleMathRawMod_initialize();
  
#line 252
  jint last = len30 - 1;
  {
    
#line 255
    jint c = 0;
    
#line 255
    jint condAdd = JreRShift32(IOSIntArray_Get(nil_chk(D), last), 31);
    for (jint i = 0; i < last; ++i) {
      
#line 258
      jint di = IOSIntArray_Get(D, i) + (IOSIntArray_Get(nil_chk(M), i) & condAdd);
      di = (di ^ condNegate) - condNegate;
      c += di;
      
#line 260
      *IOSIntArray_GetRef(D, i) = c & OrgBouncycastleMathRawMod_M30;
      
#line 260
      JreRShiftAssignInt(&c, 30);
    }
    {
      jint di = IOSIntArray_Get(D, last) + (IOSIntArray_Get(nil_chk(M), last) & condAdd);
      di = (di ^ condNegate) - condNegate;
      c += di;
      
#line 265
      *IOSIntArray_GetRef(D, last) = c;
    }
  }
  {
    
#line 270
    jint c = 0;
    
#line 270
    jint condAdd = JreRShift32(IOSIntArray_Get(D, last), 31);
    for (jint i = 0; i < last; ++i) {
      
#line 273
      jint di = IOSIntArray_Get(D, i) + (IOSIntArray_Get(M, i) & condAdd);
      c += di;
      
#line 274
      *IOSIntArray_GetRef(D, i) = c & OrgBouncycastleMathRawMod_M30;
      
#line 274
      JreRShiftAssignInt(&c, 30);
    }
    {
      jint di = IOSIntArray_Get(D, last) + (IOSIntArray_Get(M, last) & condAdd);
      c += di;
      
#line 278
      *IOSIntArray_GetRef(D, last) = c;
    }
  }
}


#line 284
void OrgBouncycastleMathRawMod_decode30WithInt_withIntArray_withInt_withIntArray_withInt_(jint bits, IOSIntArray *x, jint xOff, IOSIntArray *z, jint zOff) {
  OrgBouncycastleMathRawMod_initialize();
  
#line 289
  jint avail = 0;
  jlong data = 0LL;
  
#line 292
  while (bits > 0) {
    
#line 294
    while (avail < JavaLangMath_minWithInt_withInt_(32, bits)) {
      
#line 296
      data |= JreLShift64((jlong) IOSIntArray_Get(nil_chk(x), xOff++), avail);
      avail += 30;
    }
    
#line 300
    *IOSIntArray_GetRef(nil_chk(z), zOff++) = (jint) data;
    
#line 300
    JreURShiftAssignLong(&data, 32);
    avail -= 32;
    bits -= 32;
  }
}


#line 306
jint OrgBouncycastleMathRawMod_divsteps30WithInt_withInt_withInt_withIntArray_(jint delta, jint f0, jint g0, IOSIntArray *t) {
  OrgBouncycastleMathRawMod_initialize();
  jint u = JreLShift32(1, 30);
  
#line 308
  jint v = 0;
  
#line 308
  jint q = 0;
  
#line 308
  jint r = JreLShift32(1, 30);
  jint f = f0;
  
#line 309
  jint g = g0;
  
#line 311
  for (jint i = 0; i < 30; ++i) {
    
#line 317
    jint c1 = JreRShift32(delta, 31);
    jint c2 = -(g & 1);
    
#line 320
    jint x = f ^ c1;
    jint y = u ^ c1;
    jint z = v ^ c1;
    
#line 324
    g -= x & c2;
    q -= y & c2;
    r -= z & c2;
    
#line 328
    c2 &= ~c1;
    delta = (delta ^ c2) - (c2 - 1);
    
#line 331
    f += g & c2;
    u += q & c2;
    v += r & c2;
    
#line 335
    JreRShiftAssignInt(&g, 1);
    JreRShiftAssignInt(&q, 1);
    JreRShiftAssignInt(&r, 1);
  }
  
#line 340
  *IOSIntArray_GetRef(nil_chk(t), 0) = u;
  *IOSIntArray_GetRef(t, 1) = v;
  *IOSIntArray_GetRef(t, 2) = q;
  *IOSIntArray_GetRef(t, 3) = r;
  
#line 345
  return delta;
}


#line 348
jint OrgBouncycastleMathRawMod_divsteps30VarWithInt_withInt_withInt_withIntArray_(jint eta, jint f0, jint g0, IOSIntArray *t) {
  OrgBouncycastleMathRawMod_initialize();
  jint u = 1;
  
#line 350
  jint v = 0;
  
#line 350
  jint q = 0;
  
#line 350
  jint r = 1;
  jint f = f0;
  
#line 351
  jint g = g0;
  
#line 351
  jint m;
  
#line 351
  jint w;
  
#line 351
  jint x;
  
#line 351
  jint y;
  
#line 351
  jint z;
  jint i = 30;
  
#line 352
  jint limit;
  
#line 352
  jint zeros;
  
#line 354
  for (; ; ) {
    
#line 357
    zeros = OrgBouncycastleUtilIntegers_numberOfTrailingZerosWithInt_(g | (JreLShift32(-1, i)));
    
#line 359
    JreRShiftAssignInt(&g, zeros);
    JreLShiftAssignInt(&u, zeros);
    JreLShiftAssignInt(&v, zeros);
    eta -= zeros;
    i -= zeros;
    
#line 365
    if (i <= 0) {
      
#line 367
      break;
    }
    
#line 375
    if (eta < 0) {
      
#line 377
      eta = -eta;
      x = f;
      
#line 378
      f = g;
      
#line 378
      g = -x;
      y = u;
      
#line 379
      u = q;
      
#line 379
      q = -y;
      z = v;
      
#line 380
      v = r;
      
#line 380
      r = -z;
      
#line 383
      limit = (eta + 1) > i ? i : (eta + 1);
      m = (JreURShift32(-1, (32 - limit))) & 63;
      
#line 386
      w = (f * g * (f * f - 2)) & m;
    }
    else {
      
#line 391
      limit = (eta + 1) > i ? i : (eta + 1);
      m = (JreURShift32(-1, (32 - limit))) & 15;
      
#line 394
      w = f + (JreLShift32(((f + 1) & 4), 1));
      w = (-w * g) & m;
    }
    
#line 398
    g += f * w;
    q += u * w;
    r += v * w;
  }
  
#line 405
  *IOSIntArray_GetRef(nil_chk(t), 0) = u;
  *IOSIntArray_GetRef(t, 1) = v;
  *IOSIntArray_GetRef(t, 2) = q;
  *IOSIntArray_GetRef(t, 3) = r;
  
#line 410
  return eta;
}


#line 413
void OrgBouncycastleMathRawMod_encode30WithInt_withIntArray_withInt_withIntArray_withInt_(jint bits, IOSIntArray *x, jint xOff, IOSIntArray *z, jint zOff) {
  OrgBouncycastleMathRawMod_initialize();
  
#line 418
  jint avail = 0;
  jlong data = 0LL;
  
#line 421
  while (bits > 0) {
    
#line 423
    if (avail < JavaLangMath_minWithInt_withInt_(30, bits)) {
      
#line 425
      data |= JreLShift64((IOSIntArray_Get(nil_chk(x), xOff++) & OrgBouncycastleMathRawMod_M32L), avail);
      avail += 32;
    }
    
#line 429
    *IOSIntArray_GetRef(nil_chk(z), zOff++) = (jint) data & OrgBouncycastleMathRawMod_M30;
    
#line 429
    JreURShiftAssignLong(&data, 30);
    avail -= 30;
    bits -= 30;
  }
}


#line 435
jint OrgBouncycastleMathRawMod_getMaximumDivstepsWithInt_(jint bits) {
  OrgBouncycastleMathRawMod_initialize();
  return JreIntDiv((49 * bits + (bits < 46 ? 80 : 47)), 17);
}

jint OrgBouncycastleMathRawMod_negate30WithInt_withIntArray_(jint len30, IOSIntArray *D) {
  OrgBouncycastleMathRawMod_initialize();
  
#line 445
  jint c = 0;
  
#line 445
  jint last = len30 - 1;
  for (jint i = 0; i < last; ++i) {
    
#line 448
    c -= IOSIntArray_Get(nil_chk(D), i);
    *IOSIntArray_GetRef(D, i) = c & OrgBouncycastleMathRawMod_M30;
    
#line 449
    JreRShiftAssignInt(&c, 30);
  }
  c -= IOSIntArray_Get(nil_chk(D), last);
  *IOSIntArray_GetRef(D, last) = c;
  
#line 452
  JreRShiftAssignInt(&c, 30);
  return c;
}


#line 456
void OrgBouncycastleMathRawMod_updateDE30WithInt_withIntArray_withIntArray_withIntArray_withInt_withIntArray_(jint len30, IOSIntArray *D, IOSIntArray *E, IOSIntArray *t, jint m0Inv32, IOSIntArray *M) {
  OrgBouncycastleMathRawMod_initialize();
  
#line 464
  jint u = IOSIntArray_Get(nil_chk(t), 0);
  
#line 464
  jint v = IOSIntArray_Get(t, 1);
  
#line 464
  jint q = IOSIntArray_Get(t, 2);
  
#line 464
  jint r = IOSIntArray_Get(t, 3);
  jint di;
  
#line 465
  jint ei;
  
#line 465
  jint i;
  
#line 465
  jint md;
  
#line 465
  jint me;
  
#line 465
  jint mi;
  
#line 465
  jint sd;
  
#line 465
  jint se;
  jlong cd;
  
#line 466
  jlong ce;
  
#line 473
  sd = JreRShift32(IOSIntArray_Get(nil_chk(D), len30 - 1), 31);
  se = JreRShift32(IOSIntArray_Get(nil_chk(E), len30 - 1), 31);
  
#line 476
  md = (u & sd) + (v & se);
  me = (q & sd) + (r & se);
  
#line 479
  mi = IOSIntArray_Get(nil_chk(M), 0);
  di = IOSIntArray_Get(D, 0);
  ei = IOSIntArray_Get(E, 0);
  
#line 483
  cd = (jlong) u * di + (jlong) v * ei;
  ce = (jlong) q * di + (jlong) r * ei;
  
#line 491
  md -= (m0Inv32 * (jint) cd + md) & OrgBouncycastleMathRawMod_M30;
  me -= (m0Inv32 * (jint) ce + me) & OrgBouncycastleMathRawMod_M30;
  
#line 494
  cd += (jlong) mi * md;
  ce += (jlong) mi * me;
  
#line 500
  JreRShiftAssignLong(&cd, 30);
  JreRShiftAssignLong(&ce, 30);
  
#line 503
  for (i = 1; i < len30; ++i) {
    
#line 505
    mi = IOSIntArray_Get(M, i);
    di = IOSIntArray_Get(D, i);
    ei = IOSIntArray_Get(E, i);
    
#line 509
    cd += (jlong) u * di + (jlong) v * ei + (jlong) mi * md;
    ce += (jlong) q * di + (jlong) r * ei + (jlong) mi * me;
    
#line 512
    *IOSIntArray_GetRef(D, i - 1) = (jint) cd & OrgBouncycastleMathRawMod_M30;
    
#line 512
    JreRShiftAssignLong(&cd, 30);
    *IOSIntArray_GetRef(E, i - 1) = (jint) ce & OrgBouncycastleMathRawMod_M30;
    
#line 513
    JreRShiftAssignLong(&ce, 30);
  }
  
#line 516
  *IOSIntArray_GetRef(D, len30 - 1) = (jint) cd;
  *IOSIntArray_GetRef(E, len30 - 1) = (jint) ce;
}


#line 520
void OrgBouncycastleMathRawMod_updateFG30WithInt_withIntArray_withIntArray_withIntArray_(jint len30, IOSIntArray *F, IOSIntArray *G, IOSIntArray *t) {
  OrgBouncycastleMathRawMod_initialize();
  
#line 526
  jint u = IOSIntArray_Get(nil_chk(t), 0);
  
#line 526
  jint v = IOSIntArray_Get(t, 1);
  
#line 526
  jint q = IOSIntArray_Get(t, 2);
  
#line 526
  jint r = IOSIntArray_Get(t, 3);
  jint fi;
  
#line 527
  jint gi;
  
#line 527
  jint i;
  jlong cf;
  
#line 528
  jlong cg;
  
#line 530
  fi = IOSIntArray_Get(nil_chk(F), 0);
  gi = IOSIntArray_Get(nil_chk(G), 0);
  
#line 533
  cf = (jlong) u * fi + (jlong) v * gi;
  cg = (jlong) q * fi + (jlong) r * gi;
  
#line 539
  JreRShiftAssignLong(&cf, 30);
  JreRShiftAssignLong(&cg, 30);
  
#line 542
  for (i = 1; i < len30; ++i) {
    
#line 544
    fi = IOSIntArray_Get(F, i);
    gi = IOSIntArray_Get(G, i);
    
#line 547
    cf += (jlong) u * fi + (jlong) v * gi;
    cg += (jlong) q * fi + (jlong) r * gi;
    
#line 550
    *IOSIntArray_GetRef(F, i - 1) = (jint) cf & OrgBouncycastleMathRawMod_M30;
    
#line 550
    JreRShiftAssignLong(&cf, 30);
    *IOSIntArray_GetRef(G, i - 1) = (jint) cg & OrgBouncycastleMathRawMod_M30;
    
#line 551
    JreRShiftAssignLong(&cg, 30);
  }
  
#line 554
  *IOSIntArray_GetRef(F, len30 - 1) = (jint) cf;
  *IOSIntArray_GetRef(G, len30 - 1) = (jint) cg;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathRawMod)
