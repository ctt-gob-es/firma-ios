//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/raw/Nat128.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleMathRawNat128")
#ifdef RESTRICT_OrgBouncycastleMathRawNat128
#define INCLUDE_ALL_OrgBouncycastleMathRawNat128 0
#else
#define INCLUDE_ALL_OrgBouncycastleMathRawNat128 1
#endif
#undef RESTRICT_OrgBouncycastleMathRawNat128

#if !defined (OrgBouncycastleMathRawNat128_) && (INCLUDE_ALL_OrgBouncycastleMathRawNat128 || defined(INCLUDE_OrgBouncycastleMathRawNat128))
#define OrgBouncycastleMathRawNat128_

@class IOSIntArray;
@class IOSLongArray;
@class JavaMathBigInteger;

@interface OrgBouncycastleMathRawNat128 : NSObject

#pragma mark Public

- (instancetype)init;

+ (jint)addWithIntArray:(IOSIntArray *)x
           withIntArray:(IOSIntArray *)y
           withIntArray:(IOSIntArray *)z;

+ (jint)addBothToWithIntArray:(IOSIntArray *)x
                 withIntArray:(IOSIntArray *)y
                 withIntArray:(IOSIntArray *)z;

+ (jint)addToWithIntArray:(IOSIntArray *)x
                  withInt:(jint)xOff
             withIntArray:(IOSIntArray *)z
                  withInt:(jint)zOff
                  withInt:(jint)cIn;

+ (jint)addToWithIntArray:(IOSIntArray *)x
             withIntArray:(IOSIntArray *)z;

+ (jint)addToEachOtherWithIntArray:(IOSIntArray *)u
                           withInt:(jint)uOff
                      withIntArray:(IOSIntArray *)v
                           withInt:(jint)vOff;

+ (void)copy__WithIntArray:(IOSIntArray *)x
                   withInt:(jint)xOff
              withIntArray:(IOSIntArray *)z
                   withInt:(jint)zOff OBJC_METHOD_FAMILY_NONE;

+ (void)copy__WithIntArray:(IOSIntArray *)x
              withIntArray:(IOSIntArray *)z OBJC_METHOD_FAMILY_NONE;

+ (void)copy64WithLongArray:(IOSLongArray *)x
                    withInt:(jint)xOff
              withLongArray:(IOSLongArray *)z
                    withInt:(jint)zOff OBJC_METHOD_FAMILY_NONE;

+ (void)copy64WithLongArray:(IOSLongArray *)x
              withLongArray:(IOSLongArray *)z OBJC_METHOD_FAMILY_NONE;

+ (IOSIntArray *)create;

+ (IOSLongArray *)create64;

+ (IOSIntArray *)createExt;

+ (IOSLongArray *)createExt64;

+ (jboolean)diffWithIntArray:(IOSIntArray *)x
                     withInt:(jint)xOff
                withIntArray:(IOSIntArray *)y
                     withInt:(jint)yOff
                withIntArray:(IOSIntArray *)z
                     withInt:(jint)zOff;

+ (jboolean)eqWithIntArray:(IOSIntArray *)x
              withIntArray:(IOSIntArray *)y;

+ (jboolean)eq64WithLongArray:(IOSLongArray *)x
                withLongArray:(IOSLongArray *)y;

+ (IOSIntArray *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x;

+ (IOSLongArray *)fromBigInteger64WithJavaMathBigInteger:(JavaMathBigInteger *)x;

+ (jint)getBitWithIntArray:(IOSIntArray *)x
                   withInt:(jint)bit;

+ (jboolean)gteWithIntArray:(IOSIntArray *)x
                    withInt:(jint)xOff
               withIntArray:(IOSIntArray *)y
                    withInt:(jint)yOff;

+ (jboolean)gteWithIntArray:(IOSIntArray *)x
               withIntArray:(IOSIntArray *)y;

+ (jboolean)isOneWithIntArray:(IOSIntArray *)x;

+ (jboolean)isOne64WithLongArray:(IOSLongArray *)x;

+ (jboolean)isZeroWithIntArray:(IOSIntArray *)x;

+ (jboolean)isZero64WithLongArray:(IOSLongArray *)x;

+ (void)mulWithIntArray:(IOSIntArray *)x
                withInt:(jint)xOff
           withIntArray:(IOSIntArray *)y
                withInt:(jint)yOff
           withIntArray:(IOSIntArray *)zz
                withInt:(jint)zzOff;

+ (void)mulWithIntArray:(IOSIntArray *)x
           withIntArray:(IOSIntArray *)y
           withIntArray:(IOSIntArray *)zz;

+ (jlong)mul33AddWithInt:(jint)w
            withIntArray:(IOSIntArray *)x
                 withInt:(jint)xOff
            withIntArray:(IOSIntArray *)y
                 withInt:(jint)yOff
            withIntArray:(IOSIntArray *)z
                 withInt:(jint)zOff;

+ (jint)mul33DWordAddWithInt:(jint)x
                    withLong:(jlong)y
                withIntArray:(IOSIntArray *)z
                     withInt:(jint)zOff;

+ (jint)mul33WordAddWithInt:(jint)x
                    withInt:(jint)y
               withIntArray:(IOSIntArray *)z
                    withInt:(jint)zOff;

+ (jint)mulAddToWithIntArray:(IOSIntArray *)x
                     withInt:(jint)xOff
                withIntArray:(IOSIntArray *)y
                     withInt:(jint)yOff
                withIntArray:(IOSIntArray *)zz
                     withInt:(jint)zzOff;

+ (jint)mulAddToWithIntArray:(IOSIntArray *)x
                withIntArray:(IOSIntArray *)y
                withIntArray:(IOSIntArray *)zz;

+ (jint)mulWordWithInt:(jint)x
          withIntArray:(IOSIntArray *)y
          withIntArray:(IOSIntArray *)z
               withInt:(jint)zOff;

+ (jint)mulWordAddExtWithInt:(jint)x
                withIntArray:(IOSIntArray *)yy
                     withInt:(jint)yyOff
                withIntArray:(IOSIntArray *)zz
                     withInt:(jint)zzOff;

+ (jint)mulWordDwordAddWithInt:(jint)x
                      withLong:(jlong)y
                  withIntArray:(IOSIntArray *)z
                       withInt:(jint)zOff;

+ (jint)mulWordsAddWithInt:(jint)x
                   withInt:(jint)y
              withIntArray:(IOSIntArray *)z
                   withInt:(jint)zOff;

+ (void)squareWithIntArray:(IOSIntArray *)x
                   withInt:(jint)xOff
              withIntArray:(IOSIntArray *)zz
                   withInt:(jint)zzOff;

+ (void)squareWithIntArray:(IOSIntArray *)x
              withIntArray:(IOSIntArray *)zz;

+ (jint)subWithIntArray:(IOSIntArray *)x
                withInt:(jint)xOff
           withIntArray:(IOSIntArray *)y
                withInt:(jint)yOff
           withIntArray:(IOSIntArray *)z
                withInt:(jint)zOff;

+ (jint)subWithIntArray:(IOSIntArray *)x
           withIntArray:(IOSIntArray *)y
           withIntArray:(IOSIntArray *)z;

+ (jint)subBothFromWithIntArray:(IOSIntArray *)x
                   withIntArray:(IOSIntArray *)y
                   withIntArray:(IOSIntArray *)z;

+ (jint)subFromWithIntArray:(IOSIntArray *)x
                    withInt:(jint)xOff
               withIntArray:(IOSIntArray *)z
                    withInt:(jint)zOff;

+ (jint)subFromWithIntArray:(IOSIntArray *)x
               withIntArray:(IOSIntArray *)z;

+ (JavaMathBigInteger *)toBigIntegerWithIntArray:(IOSIntArray *)x;

+ (JavaMathBigInteger *)toBigInteger64WithLongArray:(IOSLongArray *)x;

+ (void)zeroWithIntArray:(IOSIntArray *)z;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathRawNat128)

FOUNDATION_EXPORT void OrgBouncycastleMathRawNat128_init(OrgBouncycastleMathRawNat128 *self);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_addWithIntArray_withIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *y, IOSIntArray *z);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_addBothToWithIntArray_withIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *y, IOSIntArray *z);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_addToWithIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *z);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_addToWithIntArray_withInt_withIntArray_withInt_withInt_(IOSIntArray *x, jint xOff, IOSIntArray *z, jint zOff, jint cIn);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_addToEachOtherWithIntArray_withInt_withIntArray_withInt_(IOSIntArray *u, jint uOff, IOSIntArray *v, jint vOff);

FOUNDATION_EXPORT void OrgBouncycastleMathRawNat128_copy__WithIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *z);

FOUNDATION_EXPORT void OrgBouncycastleMathRawNat128_copy__WithIntArray_withInt_withIntArray_withInt_(IOSIntArray *x, jint xOff, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT void OrgBouncycastleMathRawNat128_copy64WithLongArray_withLongArray_(IOSLongArray *x, IOSLongArray *z);

FOUNDATION_EXPORT void OrgBouncycastleMathRawNat128_copy64WithLongArray_withInt_withLongArray_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *z, jint zOff);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastleMathRawNat128_create(void);

FOUNDATION_EXPORT IOSLongArray *OrgBouncycastleMathRawNat128_create64(void);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastleMathRawNat128_createExt(void);

FOUNDATION_EXPORT IOSLongArray *OrgBouncycastleMathRawNat128_createExt64(void);

FOUNDATION_EXPORT jboolean OrgBouncycastleMathRawNat128_diffWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(IOSIntArray *x, jint xOff, IOSIntArray *y, jint yOff, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT jboolean OrgBouncycastleMathRawNat128_eqWithIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *y);

FOUNDATION_EXPORT jboolean OrgBouncycastleMathRawNat128_eq64WithLongArray_withLongArray_(IOSLongArray *x, IOSLongArray *y);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastleMathRawNat128_fromBigIntegerWithJavaMathBigInteger_(JavaMathBigInteger *x);

FOUNDATION_EXPORT IOSLongArray *OrgBouncycastleMathRawNat128_fromBigInteger64WithJavaMathBigInteger_(JavaMathBigInteger *x);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_getBitWithIntArray_withInt_(IOSIntArray *x, jint bit);

FOUNDATION_EXPORT jboolean OrgBouncycastleMathRawNat128_gteWithIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *y);

FOUNDATION_EXPORT jboolean OrgBouncycastleMathRawNat128_gteWithIntArray_withInt_withIntArray_withInt_(IOSIntArray *x, jint xOff, IOSIntArray *y, jint yOff);

FOUNDATION_EXPORT jboolean OrgBouncycastleMathRawNat128_isOneWithIntArray_(IOSIntArray *x);

FOUNDATION_EXPORT jboolean OrgBouncycastleMathRawNat128_isOne64WithLongArray_(IOSLongArray *x);

FOUNDATION_EXPORT jboolean OrgBouncycastleMathRawNat128_isZeroWithIntArray_(IOSIntArray *x);

FOUNDATION_EXPORT jboolean OrgBouncycastleMathRawNat128_isZero64WithLongArray_(IOSLongArray *x);

FOUNDATION_EXPORT void OrgBouncycastleMathRawNat128_mulWithIntArray_withIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *y, IOSIntArray *zz);

FOUNDATION_EXPORT void OrgBouncycastleMathRawNat128_mulWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(IOSIntArray *x, jint xOff, IOSIntArray *y, jint yOff, IOSIntArray *zz, jint zzOff);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_mulAddToWithIntArray_withIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *y, IOSIntArray *zz);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_mulAddToWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(IOSIntArray *x, jint xOff, IOSIntArray *y, jint yOff, IOSIntArray *zz, jint zzOff);

FOUNDATION_EXPORT jlong OrgBouncycastleMathRawNat128_mul33AddWithInt_withIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(jint w, IOSIntArray *x, jint xOff, IOSIntArray *y, jint yOff, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_mulWordAddExtWithInt_withIntArray_withInt_withIntArray_withInt_(jint x, IOSIntArray *yy, jint yyOff, IOSIntArray *zz, jint zzOff);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_mul33DWordAddWithInt_withLong_withIntArray_withInt_(jint x, jlong y, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_mul33WordAddWithInt_withInt_withIntArray_withInt_(jint x, jint y, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_mulWordDwordAddWithInt_withLong_withIntArray_withInt_(jint x, jlong y, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_mulWordsAddWithInt_withInt_withIntArray_withInt_(jint x, jint y, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_mulWordWithInt_withIntArray_withIntArray_withInt_(jint x, IOSIntArray *y, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT void OrgBouncycastleMathRawNat128_squareWithIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *zz);

FOUNDATION_EXPORT void OrgBouncycastleMathRawNat128_squareWithIntArray_withInt_withIntArray_withInt_(IOSIntArray *x, jint xOff, IOSIntArray *zz, jint zzOff);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_subWithIntArray_withIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *y, IOSIntArray *z);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_subWithIntArray_withInt_withIntArray_withInt_withIntArray_withInt_(IOSIntArray *x, jint xOff, IOSIntArray *y, jint yOff, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_subBothFromWithIntArray_withIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *y, IOSIntArray *z);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_subFromWithIntArray_withIntArray_(IOSIntArray *x, IOSIntArray *z);

FOUNDATION_EXPORT jint OrgBouncycastleMathRawNat128_subFromWithIntArray_withInt_withIntArray_withInt_(IOSIntArray *x, jint xOff, IOSIntArray *z, jint zOff);

FOUNDATION_EXPORT JavaMathBigInteger *OrgBouncycastleMathRawNat128_toBigIntegerWithIntArray_(IOSIntArray *x);

FOUNDATION_EXPORT JavaMathBigInteger *OrgBouncycastleMathRawNat128_toBigInteger64WithLongArray_(IOSLongArray *x);

FOUNDATION_EXPORT void OrgBouncycastleMathRawNat128_zeroWithIntArray_(IOSIntArray *z);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleMathRawNat128)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleMathRawNat128")
