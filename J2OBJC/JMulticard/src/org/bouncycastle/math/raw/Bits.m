//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/raw/Bits.java
//

#include "J2ObjC_source.h"
#include "org/bouncycastle/math/raw/Bits.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/math/raw/Bits must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/raw/Bits.java"


#line 3
@implementation OrgBouncycastleMathRawBits

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 3
- (instancetype)init {
  OrgBouncycastleMathRawBits_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 5
+ (jint)bitPermuteStepWithInt:(jint)x
                      withInt:(jint)m
                      withInt:(jint)s {
  return OrgBouncycastleMathRawBits_bitPermuteStepWithInt_withInt_withInt_(x, m, s);
}


#line 10
+ (jlong)bitPermuteStepWithLong:(jlong)x
                       withLong:(jlong)m
                        withInt:(jint)s {
  return OrgBouncycastleMathRawBits_bitPermuteStepWithLong_withLong_withInt_(x, m, s);
}


#line 15
+ (jint)bitPermuteStepSimpleWithInt:(jint)x
                            withInt:(jint)m
                            withInt:(jint)s {
  return OrgBouncycastleMathRawBits_bitPermuteStepSimpleWithInt_withInt_withInt_(x, m, s);
}


#line 19
+ (jlong)bitPermuteStepSimpleWithLong:(jlong)x
                             withLong:(jlong)m
                              withInt:(jint)s {
  return OrgBouncycastleMathRawBits_bitPermuteStepSimpleWithLong_withLong_withInt_(x, m, s);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(bitPermuteStepWithInt:withInt:withInt:);
  methods[2].selector = @selector(bitPermuteStepWithLong:withLong:withInt:);
  methods[3].selector = @selector(bitPermuteStepSimpleWithInt:withInt:withInt:);
  methods[4].selector = @selector(bitPermuteStepSimpleWithLong:withLong:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "bitPermuteStep", "III", "JJI", "bitPermuteStepSimple" };
  static const J2ObjcClassInfo _OrgBouncycastleMathRawBits = { "Bits", "org.bouncycastle.math.raw", ptrTable, methods, NULL, 7, 0x401, 5, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathRawBits;
}

@end


#line 3
void OrgBouncycastleMathRawBits_init(OrgBouncycastleMathRawBits *self) {
  NSObject_init(self);
}


#line 5
jint OrgBouncycastleMathRawBits_bitPermuteStepWithInt_withInt_withInt_(jint x, jint m, jint s) {
  OrgBouncycastleMathRawBits_initialize();
  
#line 6
  jint t = (x ^ JreURShift32(x, s)) & m;
  return t ^ JreLShift32(t, s) ^ x;
}


#line 10
jlong OrgBouncycastleMathRawBits_bitPermuteStepWithLong_withLong_withInt_(jlong x, jlong m, jint s) {
  OrgBouncycastleMathRawBits_initialize();
  
#line 11
  jlong t = (x ^ JreURShift64(x, s)) & m;
  return t ^ JreLShift64(t, s) ^ x;
}


#line 15
jint OrgBouncycastleMathRawBits_bitPermuteStepSimpleWithInt_withInt_withInt_(jint x, jint m, jint s) {
  OrgBouncycastleMathRawBits_initialize();
  
#line 16
  return (JreLShift32((x & m), s)) | ((JreURShift32(x, s)) & m);
}


#line 19
jlong OrgBouncycastleMathRawBits_bitPermuteStepSimpleWithLong_withLong_withInt_(jlong x, jlong m, jint s) {
  OrgBouncycastleMathRawBits_initialize();
  
#line 20
  return (JreLShift64((x & m), s)) | ((JreURShift64(x, s)) & m);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathRawBits)
