//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/Primes.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/bouncycastle/crypto/Digest.h"
#include "org/bouncycastle/math/Primes.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/BigIntegers.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/math/Primes must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleMathPrimes ()

+ (void)checkCandidateWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                withNSString:(NSString *)name;

+ (jboolean)implHasAnySmallFactorsWithJavaMathBigInteger:(JavaMathBigInteger *)x;

+ (jboolean)implMRProbablePrimeToBaseWithJavaMathBigInteger:(JavaMathBigInteger *)w
                                     withJavaMathBigInteger:(JavaMathBigInteger *)wSubOne
                                     withJavaMathBigInteger:(JavaMathBigInteger *)m
                                                    withInt:(jint)a
                                     withJavaMathBigInteger:(JavaMathBigInteger *)b;

+ (OrgBouncycastleMathPrimes_STOutput *)implSTRandomPrimeWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)d
                                                                                 withInt:(jint)length
                                                                           withByteArray:(IOSByteArray *)primeSeed;

+ (jint)extract32WithByteArray:(IOSByteArray *)bs;

+ (void)hash__WithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)d
                                withByteArray:(IOSByteArray *)input
                                withByteArray:(IOSByteArray *)output
                                      withInt:(jint)outPos;

+ (JavaMathBigInteger *)hashGenWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)d
                                                 withByteArray:(IOSByteArray *)seed
                                                       withInt:(jint)count;

+ (void)incWithByteArray:(IOSByteArray *)seed
                 withInt:(jint)c;

+ (jboolean)isPrime32WithLong:(jlong)x;

@end

inline JavaMathBigInteger *OrgBouncycastleMathPrimes_get_ONE(void);
static JavaMathBigInteger *OrgBouncycastleMathPrimes_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleMathPrimes, ONE, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgBouncycastleMathPrimes_get_TWO(void);
static JavaMathBigInteger *OrgBouncycastleMathPrimes_TWO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleMathPrimes, TWO, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgBouncycastleMathPrimes_get_THREE(void);
static JavaMathBigInteger *OrgBouncycastleMathPrimes_THREE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleMathPrimes, THREE, JavaMathBigInteger *)

__attribute__((unused)) static void OrgBouncycastleMathPrimes_checkCandidateWithJavaMathBigInteger_withNSString_(JavaMathBigInteger *n, NSString *name);

__attribute__((unused)) static jboolean OrgBouncycastleMathPrimes_implHasAnySmallFactorsWithJavaMathBigInteger_(JavaMathBigInteger *x);

__attribute__((unused)) static jboolean OrgBouncycastleMathPrimes_implMRProbablePrimeToBaseWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withInt_withJavaMathBigInteger_(JavaMathBigInteger *w, JavaMathBigInteger *wSubOne, JavaMathBigInteger *m, jint a, JavaMathBigInteger *b);

__attribute__((unused)) static OrgBouncycastleMathPrimes_STOutput *OrgBouncycastleMathPrimes_implSTRandomPrimeWithOrgBouncycastleCryptoDigest_withInt_withByteArray_(id<OrgBouncycastleCryptoDigest> d, jint length, IOSByteArray *primeSeed);

__attribute__((unused)) static jint OrgBouncycastleMathPrimes_extract32WithByteArray_(IOSByteArray *bs);

__attribute__((unused)) static void OrgBouncycastleMathPrimes_hash__WithOrgBouncycastleCryptoDigest_withByteArray_withByteArray_withInt_(id<OrgBouncycastleCryptoDigest> d, IOSByteArray *input, IOSByteArray *output, jint outPos);

__attribute__((unused)) static JavaMathBigInteger *OrgBouncycastleMathPrimes_hashGenWithOrgBouncycastleCryptoDigest_withByteArray_withInt_(id<OrgBouncycastleCryptoDigest> d, IOSByteArray *seed, jint count);

__attribute__((unused)) static void OrgBouncycastleMathPrimes_incWithByteArray_withInt_(IOSByteArray *seed, jint c);

__attribute__((unused)) static jboolean OrgBouncycastleMathPrimes_isPrime32WithLong_(jlong x);

@interface OrgBouncycastleMathPrimes_MROutput () {
 @public
  jboolean provablyComposite_;
  JavaMathBigInteger *factor_;
}

- (instancetype)initWithBoolean:(jboolean)provablyComposite
         withJavaMathBigInteger:(JavaMathBigInteger *)factor;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleMathPrimes_MROutput, factor_, JavaMathBigInteger *)

__attribute__((unused)) static void OrgBouncycastleMathPrimes_MROutput_initWithBoolean_withJavaMathBigInteger_(OrgBouncycastleMathPrimes_MROutput *self, jboolean provablyComposite, JavaMathBigInteger *factor);

__attribute__((unused)) static OrgBouncycastleMathPrimes_MROutput *new_OrgBouncycastleMathPrimes_MROutput_initWithBoolean_withJavaMathBigInteger_(jboolean provablyComposite, JavaMathBigInteger *factor) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleMathPrimes_MROutput *create_OrgBouncycastleMathPrimes_MROutput_initWithBoolean_withJavaMathBigInteger_(jboolean provablyComposite, JavaMathBigInteger *factor);

@interface OrgBouncycastleMathPrimes_STOutput () {
 @public
  JavaMathBigInteger *prime_;
  IOSByteArray *primeSeed_;
  jint primeGenCounter_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleMathPrimes_STOutput, prime_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleMathPrimes_STOutput, primeSeed_, IOSByteArray *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/Primes.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleMathPrimes)


#line 13
@implementation OrgBouncycastleMathPrimes

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 13
- (instancetype)init {
  OrgBouncycastleMathPrimes_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 115
+ (OrgBouncycastleMathPrimes_STOutput *)generateSTRandomPrimeWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)hash_
                                                                                     withInt:(jint)length
                                                                               withByteArray:(IOSByteArray *)inputSeed {
  return OrgBouncycastleMathPrimes_generateSTRandomPrimeWithOrgBouncycastleCryptoDigest_withInt_withByteArray_(hash_, length, inputSeed);
}


#line 149
+ (OrgBouncycastleMathPrimes_MROutput *)enhancedMRProbablePrimeTestWithJavaMathBigInteger:(JavaMathBigInteger *)candidate
                                                             withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                                                  withInt:(jint)iterations {
  return OrgBouncycastleMathPrimes_enhancedMRProbablePrimeTestWithJavaMathBigInteger_withJavaSecuritySecureRandom_withInt_(candidate, random, iterations);
}


#line 252
+ (jboolean)hasAnySmallFactorsWithJavaMathBigInteger:(JavaMathBigInteger *)candidate {
  return OrgBouncycastleMathPrimes_hasAnySmallFactorsWithJavaMathBigInteger_(candidate);
}


#line 275
+ (jboolean)isMRProbablePrimeWithJavaMathBigInteger:(JavaMathBigInteger *)candidate
                       withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                            withInt:(jint)iterations {
  return OrgBouncycastleMathPrimes_isMRProbablePrimeWithJavaMathBigInteger_withJavaSecuritySecureRandom_withInt_(candidate, random, iterations);
}


#line 329
+ (jboolean)isMRProbablePrimeToBaseWithJavaMathBigInteger:(JavaMathBigInteger *)candidate
                                   withJavaMathBigInteger:(JavaMathBigInteger *)base {
  return OrgBouncycastleMathPrimes_isMRProbablePrimeToBaseWithJavaMathBigInteger_withJavaMathBigInteger_(candidate, base);
}


#line 353
+ (void)checkCandidateWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                withNSString:(NSString *)name {
  OrgBouncycastleMathPrimes_checkCandidateWithJavaMathBigInteger_withNSString_(n, name);
}


#line 361
+ (jboolean)implHasAnySmallFactorsWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return OrgBouncycastleMathPrimes_implHasAnySmallFactorsWithJavaMathBigInteger_(x);
}


#line 444
+ (jboolean)implMRProbablePrimeToBaseWithJavaMathBigInteger:(JavaMathBigInteger *)w
                                     withJavaMathBigInteger:(JavaMathBigInteger *)wSubOne
                                     withJavaMathBigInteger:(JavaMathBigInteger *)m
                                                    withInt:(jint)a
                                     withJavaMathBigInteger:(JavaMathBigInteger *)b {
  return OrgBouncycastleMathPrimes_implMRProbablePrimeToBaseWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withInt_withJavaMathBigInteger_(w, wSubOne, m, a, b);
}


#line 474
+ (OrgBouncycastleMathPrimes_STOutput *)implSTRandomPrimeWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)d
                                                                                 withInt:(jint)length
                                                                           withByteArray:(IOSByteArray *)primeSeed {
  return OrgBouncycastleMathPrimes_implSTRandomPrimeWithOrgBouncycastleCryptoDigest_withInt_withByteArray_(d, length, primeSeed);
}


#line 582
+ (jint)extract32WithByteArray:(IOSByteArray *)bs {
  return OrgBouncycastleMathPrimes_extract32WithByteArray_(bs);
}


#line 596
+ (void)hash__WithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)d
                                withByteArray:(IOSByteArray *)input
                                withByteArray:(IOSByteArray *)output
                                      withInt:(jint)outPos {
  OrgBouncycastleMathPrimes_hash__WithOrgBouncycastleCryptoDigest_withByteArray_withByteArray_withInt_(d, input, output, outPos);
}


#line 602
+ (JavaMathBigInteger *)hashGenWithOrgBouncycastleCryptoDigest:(id<OrgBouncycastleCryptoDigest>)d
                                                 withByteArray:(IOSByteArray *)seed
                                                       withInt:(jint)count {
  return OrgBouncycastleMathPrimes_hashGenWithOrgBouncycastleCryptoDigest_withByteArray_withInt_(d, seed, count);
}


#line 616
+ (void)incWithByteArray:(IOSByteArray *)seed
                 withInt:(jint)c {
  OrgBouncycastleMathPrimes_incWithByteArray_withInt_(seed, c);
}


#line 627
+ (jboolean)isPrime32WithLong:(jlong)x {
  return OrgBouncycastleMathPrimes_isPrime32WithLong_(x);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathPrimes_STOutput;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathPrimes_MROutput;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 6, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 11, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathPrimes_STOutput;", 0xa, 14, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 17, 18, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 21, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 23, 24, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generateSTRandomPrimeWithOrgBouncycastleCryptoDigest:withInt:withByteArray:);
  methods[2].selector = @selector(enhancedMRProbablePrimeTestWithJavaMathBigInteger:withJavaSecuritySecureRandom:withInt:);
  methods[3].selector = @selector(hasAnySmallFactorsWithJavaMathBigInteger:);
  methods[4].selector = @selector(isMRProbablePrimeWithJavaMathBigInteger:withJavaSecuritySecureRandom:withInt:);
  methods[5].selector = @selector(isMRProbablePrimeToBaseWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[6].selector = @selector(checkCandidateWithJavaMathBigInteger:withNSString:);
  methods[7].selector = @selector(implHasAnySmallFactorsWithJavaMathBigInteger:);
  methods[8].selector = @selector(implMRProbablePrimeToBaseWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withInt:withJavaMathBigInteger:);
  methods[9].selector = @selector(implSTRandomPrimeWithOrgBouncycastleCryptoDigest:withInt:withByteArray:);
  methods[10].selector = @selector(extract32WithByteArray:);
  methods[11].selector = @selector(hash__WithOrgBouncycastleCryptoDigest:withByteArray:withByteArray:withInt:);
  methods[12].selector = @selector(hashGenWithOrgBouncycastleCryptoDigest:withByteArray:withInt:);
  methods[13].selector = @selector(incWithByteArray:withInt:);
  methods[14].selector = @selector(isPrime32WithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SMALL_FACTOR_LIMIT", "I", .constantValue.asInt = OrgBouncycastleMathPrimes_SMALL_FACTOR_LIMIT, 0x19, -1, -1, -1, -1 },
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "TWO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "THREE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
  };
  static const void *ptrTable[] = { "generateSTRandomPrime", "LOrgBouncycastleCryptoDigest;I[B", "enhancedMRProbablePrimeTest", "LJavaMathBigInteger;LJavaSecuritySecureRandom;I", "hasAnySmallFactors", "LJavaMathBigInteger;", "isMRProbablePrime", "isMRProbablePrimeToBase", "LJavaMathBigInteger;LJavaMathBigInteger;", "checkCandidate", "LJavaMathBigInteger;LNSString;", "implHasAnySmallFactors", "implMRProbablePrimeToBase", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;ILJavaMathBigInteger;", "implSTRandomPrime", "extract32", "[B", "hash", "LOrgBouncycastleCryptoDigest;[B[BI", "hashGen", "LOrgBouncycastleCryptoDigest;[BI", "inc", "[BI", "isPrime32", "J", &OrgBouncycastleMathPrimes_ONE, &OrgBouncycastleMathPrimes_TWO, &OrgBouncycastleMathPrimes_THREE, "LOrgBouncycastleMathPrimes_MROutput;LOrgBouncycastleMathPrimes_STOutput;" };
  static const J2ObjcClassInfo _OrgBouncycastleMathPrimes = { "Primes", "org.bouncycastle.math", ptrTable, methods, fields, 7, 0x401, 15, 4, -1, 28, -1, -1, -1 };
  return &_OrgBouncycastleMathPrimes;
}

+ (void)initialize {
  if (self == [OrgBouncycastleMathPrimes class]) {
    OrgBouncycastleMathPrimes_ONE = JavaMathBigInteger_valueOfWithLong_(
#line 17
    1);
    OrgBouncycastleMathPrimes_TWO = JavaMathBigInteger_valueOfWithLong_(
#line 18
    2);
    OrgBouncycastleMathPrimes_THREE = JavaMathBigInteger_valueOfWithLong_(
#line 19
    3);
    J2OBJC_SET_INITIALIZED(OrgBouncycastleMathPrimes)
  }
}

@end


#line 13
void OrgBouncycastleMathPrimes_init(OrgBouncycastleMathPrimes *self) {
  NSObject_init(self);
}


#line 115
OrgBouncycastleMathPrimes_STOutput *OrgBouncycastleMathPrimes_generateSTRandomPrimeWithOrgBouncycastleCryptoDigest_withInt_withByteArray_(id<OrgBouncycastleCryptoDigest> hash_, jint length, IOSByteArray *inputSeed) {
  OrgBouncycastleMathPrimes_initialize();
  if (hash_ == nil) {
    
#line 119
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'hash' cannot be null");
  }
  if (length < 2) {
    
#line 123
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'length' must be >= 2");
  }
  if (inputSeed == nil || inputSeed->size_ == 0) {
    
#line 127
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'inputSeed' cannot be null or empty");
  }
  
#line 130
  return OrgBouncycastleMathPrimes_implSTRandomPrimeWithOrgBouncycastleCryptoDigest_withInt_withByteArray_(hash_, length, OrgBouncycastleUtilArrays_cloneWithByteArray_(inputSeed));
}


#line 149
OrgBouncycastleMathPrimes_MROutput *OrgBouncycastleMathPrimes_enhancedMRProbablePrimeTestWithJavaMathBigInteger_withJavaSecuritySecureRandom_withInt_(JavaMathBigInteger *candidate, JavaSecuritySecureRandom *random, jint iterations) {
  OrgBouncycastleMathPrimes_initialize();
  OrgBouncycastleMathPrimes_checkCandidateWithJavaMathBigInteger_withNSString_(candidate, @"candidate");
  
#line 153
  if (random == nil) {
    
#line 155
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'random' cannot be null");
  }
  if (iterations < 1) {
    
#line 159
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'iterations' must be > 0");
  }
  
#line 162
  if ([((JavaMathBigInteger *) nil_chk(candidate)) bitLength] == 2) {
    
#line 164
    return OrgBouncycastleMathPrimes_MROutput_probablyPrime();
  }
  if (![candidate testBitWithInt:0]) {
    
#line 168
    return OrgBouncycastleMathPrimes_MROutput_provablyCompositeWithFactorWithJavaMathBigInteger_(OrgBouncycastleMathPrimes_TWO);
  }
  
#line 171
  JavaMathBigInteger *w = candidate;
  JavaMathBigInteger *wSubOne = [candidate subtractWithJavaMathBigInteger:OrgBouncycastleMathPrimes_ONE];
  JavaMathBigInteger *wSubTwo = [candidate subtractWithJavaMathBigInteger:OrgBouncycastleMathPrimes_TWO];
  
#line 175
  jint a = [((JavaMathBigInteger *) nil_chk(wSubOne)) getLowestSetBit];
  JavaMathBigInteger *m = [wSubOne shiftRightWithInt:a];
  
#line 178
  for (jint i = 0; i < iterations; ++i) {
    
#line 180
    JavaMathBigInteger *b = OrgBouncycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(OrgBouncycastleMathPrimes_TWO, wSubTwo, random);
    JavaMathBigInteger *g = [((JavaMathBigInteger *) nil_chk(b)) gcdWithJavaMathBigInteger:w];
    
#line 183
    if ([((JavaMathBigInteger *) nil_chk(g)) compareToWithId:OrgBouncycastleMathPrimes_ONE] > 0) {
      
#line 185
      return OrgBouncycastleMathPrimes_MROutput_provablyCompositeWithFactorWithJavaMathBigInteger_(g);
    }
    
#line 188
    JavaMathBigInteger *z = [b modPowWithJavaMathBigInteger:m withJavaMathBigInteger:w];
    
#line 190
    if ([((JavaMathBigInteger *) nil_chk(z)) isEqual:OrgBouncycastleMathPrimes_ONE] || [z isEqual:wSubOne]) {
      
#line 192
      continue;
    }
    
#line 195
    jboolean primeToBase = false;
    
#line 197
    JavaMathBigInteger *x = z;
    for (jint j = 1; j < a; ++j) {
      
#line 200
      z = [z modPowWithJavaMathBigInteger:OrgBouncycastleMathPrimes_TWO withJavaMathBigInteger:w];
      
#line 202
      if ([((JavaMathBigInteger *) nil_chk(z)) isEqual:wSubOne]) {
        
#line 204
        primeToBase = true;
        break;
      }
      
#line 208
      if ([z isEqual:OrgBouncycastleMathPrimes_ONE]) {
        
#line 210
        break;
      }
      
#line 213
      x = z;
    }
    
#line 216
    if (!primeToBase) {
      
#line 218
      if (![z isEqual:OrgBouncycastleMathPrimes_ONE]) {
        
#line 220
        x = z;
        z = [z modPowWithJavaMathBigInteger:OrgBouncycastleMathPrimes_TWO withJavaMathBigInteger:w];
        
#line 223
        if (![((JavaMathBigInteger *) nil_chk(z)) isEqual:OrgBouncycastleMathPrimes_ONE]) {
          
#line 225
          x = z;
        }
      }
      
#line 229
      g = [((JavaMathBigInteger *) nil_chk([x subtractWithJavaMathBigInteger:OrgBouncycastleMathPrimes_ONE])) gcdWithJavaMathBigInteger:w];
      
#line 231
      if ([((JavaMathBigInteger *) nil_chk(g)) compareToWithId:OrgBouncycastleMathPrimes_ONE] > 0) {
        
#line 233
        return OrgBouncycastleMathPrimes_MROutput_provablyCompositeWithFactorWithJavaMathBigInteger_(g);
      }
      
#line 236
      return OrgBouncycastleMathPrimes_MROutput_provablyCompositeNotPrimePower();
    }
  }
  
#line 240
  return OrgBouncycastleMathPrimes_MROutput_probablyPrime();
}


#line 252
jboolean OrgBouncycastleMathPrimes_hasAnySmallFactorsWithJavaMathBigInteger_(JavaMathBigInteger *candidate) {
  OrgBouncycastleMathPrimes_initialize();
  OrgBouncycastleMathPrimes_checkCandidateWithJavaMathBigInteger_withNSString_(candidate, @"candidate");
  
#line 256
  return OrgBouncycastleMathPrimes_implHasAnySmallFactorsWithJavaMathBigInteger_(candidate);
}


#line 275
jboolean OrgBouncycastleMathPrimes_isMRProbablePrimeWithJavaMathBigInteger_withJavaSecuritySecureRandom_withInt_(JavaMathBigInteger *candidate, JavaSecuritySecureRandom *random, jint iterations) {
  OrgBouncycastleMathPrimes_initialize();
  OrgBouncycastleMathPrimes_checkCandidateWithJavaMathBigInteger_withNSString_(candidate, @"candidate");
  
#line 279
  if (random == nil) {
    
#line 281
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'random' cannot be null");
  }
  if (iterations < 1) {
    
#line 285
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'iterations' must be > 0");
  }
  
#line 288
  if ([((JavaMathBigInteger *) nil_chk(candidate)) bitLength] == 2) {
    
#line 290
    return true;
  }
  if (![candidate testBitWithInt:0]) {
    
#line 294
    return false;
  }
  
#line 297
  JavaMathBigInteger *w = candidate;
  JavaMathBigInteger *wSubOne = [candidate subtractWithJavaMathBigInteger:OrgBouncycastleMathPrimes_ONE];
  JavaMathBigInteger *wSubTwo = [candidate subtractWithJavaMathBigInteger:OrgBouncycastleMathPrimes_TWO];
  
#line 301
  jint a = [((JavaMathBigInteger *) nil_chk(wSubOne)) getLowestSetBit];
  JavaMathBigInteger *m = [wSubOne shiftRightWithInt:a];
  
#line 304
  for (jint i = 0; i < iterations; ++i) {
    
#line 306
    JavaMathBigInteger *b = OrgBouncycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(OrgBouncycastleMathPrimes_TWO, wSubTwo, random);
    
#line 308
    if (!OrgBouncycastleMathPrimes_implMRProbablePrimeToBaseWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withInt_withJavaMathBigInteger_(w, wSubOne, m, a, b)) {
      
#line 310
      return false;
    }
  }
  
#line 314
  return true;
}


#line 329
jboolean OrgBouncycastleMathPrimes_isMRProbablePrimeToBaseWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *candidate, JavaMathBigInteger *base) {
  OrgBouncycastleMathPrimes_initialize();
  OrgBouncycastleMathPrimes_checkCandidateWithJavaMathBigInteger_withNSString_(candidate, @"candidate");
  OrgBouncycastleMathPrimes_checkCandidateWithJavaMathBigInteger_withNSString_(base, @"base");
  
#line 334
  if ([((JavaMathBigInteger *) nil_chk(base)) compareToWithId:[((JavaMathBigInteger *) nil_chk(candidate)) subtractWithJavaMathBigInteger:OrgBouncycastleMathPrimes_ONE]] >= 0) {
    
#line 336
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'base' must be < ('candidate' - 1)");
  }
  
#line 339
  if ([candidate bitLength] == 2) {
    
#line 341
    return true;
  }
  
#line 344
  JavaMathBigInteger *w = candidate;
  JavaMathBigInteger *wSubOne = [candidate subtractWithJavaMathBigInteger:OrgBouncycastleMathPrimes_ONE];
  
#line 347
  jint a = [((JavaMathBigInteger *) nil_chk(wSubOne)) getLowestSetBit];
  JavaMathBigInteger *m = [wSubOne shiftRightWithInt:a];
  
#line 350
  return OrgBouncycastleMathPrimes_implMRProbablePrimeToBaseWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withInt_withJavaMathBigInteger_(w, wSubOne, m, a, base);
}


#line 353
void OrgBouncycastleMathPrimes_checkCandidateWithJavaMathBigInteger_withNSString_(JavaMathBigInteger *n, NSString *name) {
  OrgBouncycastleMathPrimes_initialize();
  if (n == nil || [n signum] < 1 || [n bitLength] < 2) {
    
#line 357
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("C$$", '\'', name, @"' must be non-null and >= 2"));
  }
}


#line 361
jboolean OrgBouncycastleMathPrimes_implHasAnySmallFactorsWithJavaMathBigInteger_(JavaMathBigInteger *x) {
  OrgBouncycastleMathPrimes_initialize();
  
#line 366
  jint m = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23;
  jint r = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(x)) modWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(m)])) intValue];
  if (JreIntMod(r, 2) == 0 || JreIntMod(r, 3) == 0 || JreIntMod(r, 5) == 0 || JreIntMod(r, 7) == 0 || JreIntMod(r, 11) == 0 || JreIntMod(r, 13) == 0 ||
#line 369
  JreIntMod(r, 17) == 0 || JreIntMod(r, 19) == 0 || JreIntMod(r, 23) == 0) {
    
#line 371
    return true;
  }
  
#line 374
  m = 29 * 31 * 37 * 41 * 43;
  r = [((JavaMathBigInteger *) nil_chk([x modWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(m)])) intValue];
  if (JreIntMod(r, 29) == 0 || JreIntMod(r, 31) == 0 || JreIntMod(r, 37) == 0 || JreIntMod(r, 41) == 0 || JreIntMod(r, 43) == 0) {
    
#line 378
    return true;
  }
  
#line 381
  m = 47 * 53 * 59 * 61 * 67;
  r = [((JavaMathBigInteger *) nil_chk([x modWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(m)])) intValue];
  if (JreIntMod(r, 47) == 0 || JreIntMod(r, 53) == 0 || JreIntMod(r, 59) == 0 || JreIntMod(r, 61) == 0 || JreIntMod(r, 67) == 0) {
    
#line 385
    return true;
  }
  
#line 388
  m = 71 * 73 * 79 * 83;
  r = [((JavaMathBigInteger *) nil_chk([x modWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(m)])) intValue];
  if (JreIntMod(r, 71) == 0 || JreIntMod(r, 73) == 0 || JreIntMod(r, 79) == 0 || JreIntMod(r, 83) == 0) {
    
#line 392
    return true;
  }
  
#line 395
  m = 89 * 97 * 101 * 103;
  r = [((JavaMathBigInteger *) nil_chk([x modWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(m)])) intValue];
  if (JreIntMod(r, 89) == 0 || JreIntMod(r, 97) == 0 || JreIntMod(r, 101) == 0 || JreIntMod(r, 103) == 0) {
    
#line 399
    return true;
  }
  
#line 402
  m = 107 * 109 * 113 * 127;
  r = [((JavaMathBigInteger *) nil_chk([x modWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(m)])) intValue];
  if (JreIntMod(r, 107) == 0 || JreIntMod(r, 109) == 0 || JreIntMod(r, 113) == 0 || JreIntMod(r, 127) == 0) {
    
#line 406
    return true;
  }
  
#line 409
  m = 131 * 137 * 139 * 149;
  r = [((JavaMathBigInteger *) nil_chk([x modWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(m)])) intValue];
  if (JreIntMod(r, 131) == 0 || JreIntMod(r, 137) == 0 || JreIntMod(r, 139) == 0 || JreIntMod(r, 149) == 0) {
    
#line 413
    return true;
  }
  
#line 416
  m = 151 * 157 * 163 * 167;
  r = [((JavaMathBigInteger *) nil_chk([x modWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(m)])) intValue];
  if (JreIntMod(r, 151) == 0 || JreIntMod(r, 157) == 0 || JreIntMod(r, 163) == 0 || JreIntMod(r, 167) == 0) {
    
#line 420
    return true;
  }
  
#line 423
  m = 173 * 179 * 181 * 191;
  r = [((JavaMathBigInteger *) nil_chk([x modWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(m)])) intValue];
  if (JreIntMod(r, 173) == 0 || JreIntMod(r, 179) == 0 || JreIntMod(r, 181) == 0 || JreIntMod(r, 191) == 0) {
    
#line 427
    return true;
  }
  
#line 430
  m = 193 * 197 * 199 * 211;
  r = [((JavaMathBigInteger *) nil_chk([x modWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(m)])) intValue];
  if (JreIntMod(r, 193) == 0 || JreIntMod(r, 197) == 0 || JreIntMod(r, 199) == 0 || JreIntMod(r, 211) == 0) {
    
#line 434
    return true;
  }
  
#line 441
  return false;
}


#line 444
jboolean OrgBouncycastleMathPrimes_implMRProbablePrimeToBaseWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withInt_withJavaMathBigInteger_(JavaMathBigInteger *w, JavaMathBigInteger *wSubOne, JavaMathBigInteger *m, jint a, JavaMathBigInteger *b) {
  OrgBouncycastleMathPrimes_initialize();
  JavaMathBigInteger *z = [((JavaMathBigInteger *) nil_chk(b)) modPowWithJavaMathBigInteger:m withJavaMathBigInteger:w];
  
#line 448
  if ([((JavaMathBigInteger *) nil_chk(z)) isEqual:OrgBouncycastleMathPrimes_ONE] || [z isEqual:wSubOne]) {
    
#line 450
    return true;
  }
  
#line 453
  jboolean result = false;
  
#line 455
  for (jint j = 1; j < a; ++j) {
    
#line 457
    z = [z modPowWithJavaMathBigInteger:OrgBouncycastleMathPrimes_TWO withJavaMathBigInteger:w];
    
#line 459
    if ([((JavaMathBigInteger *) nil_chk(z)) isEqual:wSubOne]) {
      
#line 461
      result = true;
      break;
    }
    
#line 465
    if ([z isEqual:OrgBouncycastleMathPrimes_ONE]) {
      
#line 467
      return false;
    }
  }
  
#line 471
  return result;
}


#line 474
OrgBouncycastleMathPrimes_STOutput *OrgBouncycastleMathPrimes_implSTRandomPrimeWithOrgBouncycastleCryptoDigest_withInt_withByteArray_(id<OrgBouncycastleCryptoDigest> d, jint length, IOSByteArray *primeSeed) {
  OrgBouncycastleMathPrimes_initialize();
  jint dLen = [((id<OrgBouncycastleCryptoDigest>) nil_chk(d)) getDigestSize];
  
#line 478
  if (length < 33) {
    
#line 480
    jint primeGenCounter = 0;
    
#line 482
    IOSByteArray *c0 = [IOSByteArray newArrayWithLength:dLen];
    IOSByteArray *c1 = [IOSByteArray newArrayWithLength:dLen];
    
#line 485
    for (; ; ) {
      
#line 487
      OrgBouncycastleMathPrimes_hash__WithOrgBouncycastleCryptoDigest_withByteArray_withByteArray_withInt_(d, primeSeed, c0, 0);
      OrgBouncycastleMathPrimes_incWithByteArray_withInt_(primeSeed, 1);
      
#line 490
      OrgBouncycastleMathPrimes_hash__WithOrgBouncycastleCryptoDigest_withByteArray_withByteArray_withInt_(d, primeSeed, c1, 0);
      OrgBouncycastleMathPrimes_incWithByteArray_withInt_(primeSeed, 1);
      
#line 493
      jint c = OrgBouncycastleMathPrimes_extract32WithByteArray_(c0) ^ OrgBouncycastleMathPrimes_extract32WithByteArray_(c1);
      c &= JreURShift32(-1, 32 - length);
      c |= (JreLShift32(1, length - 1)) | 1;
      
#line 497
      ++primeGenCounter;
      
#line 499
      jlong c64 = c & (jlong) 0xFFFFFFFFLL;
      if (OrgBouncycastleMathPrimes_isPrime32WithLong_(c64)) {
        
#line 502
        return new_OrgBouncycastleMathPrimes_STOutput_initWithJavaMathBigInteger_withByteArray_withInt_(JavaMathBigInteger_valueOfWithLong_(c64), primeSeed, primeGenCounter);
      }
      
#line 505
      if (primeGenCounter > 4 * length) {
        
#line 507
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"Too many iterations in Shawe-Taylor Random_Prime Routine");
      }
    }
  }
  
#line 512
  OrgBouncycastleMathPrimes_STOutput *rec = OrgBouncycastleMathPrimes_implSTRandomPrimeWithOrgBouncycastleCryptoDigest_withInt_withByteArray_(d, JreIntDiv((length + 3), 2), primeSeed);
  
#line 514
  JavaMathBigInteger *c0 = [((OrgBouncycastleMathPrimes_STOutput *) nil_chk(rec)) getPrime];
  primeSeed = [rec getPrimeSeed];
  jint primeGenCounter = [rec getPrimeGenCounter];
  
#line 518
  jint outlen = 8 * dLen;
  jint iterations = JreIntDiv((length - 1), outlen);
  
#line 521
  jint oldCounter = primeGenCounter;
  
#line 523
  JavaMathBigInteger *x = OrgBouncycastleMathPrimes_hashGenWithOrgBouncycastleCryptoDigest_withByteArray_withInt_(d, primeSeed, iterations + 1);
  x = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(x)) modWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(OrgBouncycastleMathPrimes_ONE)) shiftLeftWithInt:length - 1]])) setBitWithInt:length - 1];
  
#line 526
  JavaMathBigInteger *c0x2 = [((JavaMathBigInteger *) nil_chk(c0)) shiftLeftWithInt:1];
  JavaMathBigInteger *tx2 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(x)) subtractWithJavaMathBigInteger:OrgBouncycastleMathPrimes_ONE])) divideWithJavaMathBigInteger:c0x2])) addWithJavaMathBigInteger:OrgBouncycastleMathPrimes_ONE])) shiftLeftWithInt:1];
  jint dt = 0;
  
#line 530
  JavaMathBigInteger *c = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(tx2)) multiplyWithJavaMathBigInteger:c0])) addWithJavaMathBigInteger:OrgBouncycastleMathPrimes_ONE];
  
#line 536
  for (; ; ) {
    
#line 538
    if ([((JavaMathBigInteger *) nil_chk(c)) bitLength] > length) {
      
#line 540
      tx2 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([OrgBouncycastleMathPrimes_ONE shiftLeftWithInt:length - 1])) subtractWithJavaMathBigInteger:OrgBouncycastleMathPrimes_ONE])) divideWithJavaMathBigInteger:c0x2])) addWithJavaMathBigInteger:OrgBouncycastleMathPrimes_ONE])) shiftLeftWithInt:1];
      c = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(tx2)) multiplyWithJavaMathBigInteger:c0])) addWithJavaMathBigInteger:OrgBouncycastleMathPrimes_ONE];
    }
    
#line 544
    ++primeGenCounter;
    
#line 552
    if (!OrgBouncycastleMathPrimes_implHasAnySmallFactorsWithJavaMathBigInteger_(c)) {
      
#line 554
      JavaMathBigInteger *a = OrgBouncycastleMathPrimes_hashGenWithOrgBouncycastleCryptoDigest_withByteArray_withInt_(d, primeSeed, iterations + 1);
      a = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(a)) modWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(c)) subtractWithJavaMathBigInteger:OrgBouncycastleMathPrimes_THREE]])) addWithJavaMathBigInteger:OrgBouncycastleMathPrimes_TWO];
      
#line 557
      tx2 = [((JavaMathBigInteger *) nil_chk(tx2)) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(dt)];
      dt = 0;
      
#line 560
      JavaMathBigInteger *z = [((JavaMathBigInteger *) nil_chk(a)) modPowWithJavaMathBigInteger:tx2 withJavaMathBigInteger:c];
      
#line 562
      if ([((JavaMathBigInteger *) nil_chk([c gcdWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(z)) subtractWithJavaMathBigInteger:OrgBouncycastleMathPrimes_ONE]])) isEqual:OrgBouncycastleMathPrimes_ONE] && [((JavaMathBigInteger *) nil_chk([z modPowWithJavaMathBigInteger:c0 withJavaMathBigInteger:c])) isEqual:OrgBouncycastleMathPrimes_ONE]) {
        
#line 564
        return new_OrgBouncycastleMathPrimes_STOutput_initWithJavaMathBigInteger_withByteArray_withInt_(c, primeSeed, primeGenCounter);
      }
    }
    else {
      
#line 569
      OrgBouncycastleMathPrimes_incWithByteArray_withInt_(primeSeed, iterations + 1);
    }
    
#line 572
    if (primeGenCounter >= 4 * length + oldCounter) {
      
#line 574
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"Too many iterations in Shawe-Taylor Random_Prime Routine");
    }
    
#line 577
    dt += 2;
    c = [((JavaMathBigInteger *) nil_chk(c)) addWithJavaMathBigInteger:c0x2];
  }
}


#line 582
jint OrgBouncycastleMathPrimes_extract32WithByteArray_(IOSByteArray *bs) {
  OrgBouncycastleMathPrimes_initialize();
  jint result = 0;
  
#line 586
  jint count = JavaLangMath_minWithInt_withInt_(4, ((IOSByteArray *) nil_chk(bs))->size_);
  for (jint i = 0; i < count; ++i) {
    
#line 589
    jint b = IOSByteArray_Get(bs, bs->size_ - (i + 1)) & (jint) 0xFF;
    result |= JreLShift32(b, 8 * i);
  }
  
#line 593
  return result;
}


#line 596
void OrgBouncycastleMathPrimes_hash__WithOrgBouncycastleCryptoDigest_withByteArray_withByteArray_withInt_(id<OrgBouncycastleCryptoDigest> d, IOSByteArray *input, IOSByteArray *output, jint outPos) {
  OrgBouncycastleMathPrimes_initialize();
  [((id<OrgBouncycastleCryptoDigest>) nil_chk(d)) updateWithByteArray:input withInt:0 withInt:((IOSByteArray *) nil_chk(input))->size_];
  [d doFinalWithByteArray:output withInt:outPos];
}

JavaMathBigInteger *OrgBouncycastleMathPrimes_hashGenWithOrgBouncycastleCryptoDigest_withByteArray_withInt_(id<OrgBouncycastleCryptoDigest> d, IOSByteArray *seed, jint count) {
  OrgBouncycastleMathPrimes_initialize();
  jint dLen = [((id<OrgBouncycastleCryptoDigest>) nil_chk(d)) getDigestSize];
  jint pos = count * dLen;
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:pos];
  for (jint i = 0; i < count; ++i) {
    
#line 609
    pos -= dLen;
    OrgBouncycastleMathPrimes_hash__WithOrgBouncycastleCryptoDigest_withByteArray_withByteArray_withInt_(d, seed, buf, pos);
    OrgBouncycastleMathPrimes_incWithByteArray_withInt_(seed, 1);
  }
  return new_JavaMathBigInteger_initWithInt_withByteArray_(1, buf);
}


#line 616
void OrgBouncycastleMathPrimes_incWithByteArray_withInt_(IOSByteArray *seed, jint c) {
  OrgBouncycastleMathPrimes_initialize();
  jint pos = ((IOSByteArray *) nil_chk(seed))->size_;
  while (c > 0 && --pos >= 0) {
    
#line 621
    c += IOSByteArray_Get(seed, pos) & (jint) 0xFF;
    *IOSByteArray_GetRef(seed, pos) = (jbyte) c;
    JreURShiftAssignInt(&c, 8);
  }
}


#line 627
jboolean OrgBouncycastleMathPrimes_isPrime32WithLong_(jlong x) {
  OrgBouncycastleMathPrimes_initialize();
  if (JreURShift64(x, 32) != 0LL) {
    
#line 631
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Size limit exceeded");
  }
  
#line 638
  if (x <= 5LL) {
    
#line 640
    return x == 2LL || x == 3LL || x == 5LL;
  }
  
#line 643
  if ((x & 1LL) == 0LL || JreLongMod(x, 3LL) == 0LL || JreLongMod(x, 5LL) == 0LL) {
    
#line 645
    return false;
  }
  
#line 648
  IOSLongArray *ds = [IOSLongArray newArrayWithLongs:(jlong[]){ 1LL, 7LL, 11LL, 13LL, 17LL, 19LL, 23LL, 29LL } count:8];
  jlong base = 0LL;
  for (jint pos = 1; ; pos = 0) {
    
#line 655
    while (pos < ds->size_) {
      
#line 657
      jlong d = base + IOSLongArray_Get(ds, pos);
      if (JreLongMod(x, d) == 0LL) {
        
#line 660
        return x < 30LL;
      }
      ++pos;
    }
    
#line 665
    base += 30LL;
    
#line 667
    if (base * base >= x) {
      
#line 669
      return true;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathPrimes)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/Primes.java"


#line 26
@implementation OrgBouncycastleMathPrimes_MROutput

+ (OrgBouncycastleMathPrimes_MROutput *)probablyPrime {
  return OrgBouncycastleMathPrimes_MROutput_probablyPrime();
}


#line 33
+ (OrgBouncycastleMathPrimes_MROutput *)provablyCompositeWithFactorWithJavaMathBigInteger:(JavaMathBigInteger *)factor {
  return OrgBouncycastleMathPrimes_MROutput_provablyCompositeWithFactorWithJavaMathBigInteger_(factor);
}


#line 38
+ (OrgBouncycastleMathPrimes_MROutput *)provablyCompositeNotPrimePower {
  return OrgBouncycastleMathPrimes_MROutput_provablyCompositeNotPrimePower();
}


#line 46
- (instancetype)initWithBoolean:(jboolean)provablyComposite
         withJavaMathBigInteger:(JavaMathBigInteger *)factor {
  OrgBouncycastleMathPrimes_MROutput_initWithBoolean_withJavaMathBigInteger_(self, provablyComposite, factor);
  return self;
}

- (JavaMathBigInteger *)getFactor {
  
#line 54
  return factor_;
}


#line 57
- (jboolean)isProvablyComposite {
  
#line 59
  return provablyComposite_;
}


#line 62
- (jboolean)isNotPrimePower {
  
#line 64
  return provablyComposite_ && factor_ == nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgBouncycastleMathPrimes_MROutput;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathPrimes_MROutput;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathPrimes_MROutput;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(probablyPrime);
  methods[1].selector = @selector(provablyCompositeWithFactorWithJavaMathBigInteger:);
  methods[2].selector = @selector(provablyCompositeNotPrimePower);
  methods[3].selector = @selector(initWithBoolean:withJavaMathBigInteger:);
  methods[4].selector = @selector(getFactor);
  methods[5].selector = @selector(isProvablyComposite);
  methods[6].selector = @selector(isNotPrimePower);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "provablyComposite_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "factor_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "provablyCompositeWithFactor", "LJavaMathBigInteger;", "ZLJavaMathBigInteger;", "LOrgBouncycastleMathPrimes;" };
  static const J2ObjcClassInfo _OrgBouncycastleMathPrimes_MROutput = { "MROutput", "org.bouncycastle.math", ptrTable, methods, fields, 7, 0x9, 7, 2, 3, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathPrimes_MROutput;
}

@end


#line 28
OrgBouncycastleMathPrimes_MROutput *OrgBouncycastleMathPrimes_MROutput_probablyPrime() {
  OrgBouncycastleMathPrimes_MROutput_initialize();
  return new_OrgBouncycastleMathPrimes_MROutput_initWithBoolean_withJavaMathBigInteger_(false, nil);
}

OrgBouncycastleMathPrimes_MROutput *OrgBouncycastleMathPrimes_MROutput_provablyCompositeWithFactorWithJavaMathBigInteger_(JavaMathBigInteger *factor) {
  OrgBouncycastleMathPrimes_MROutput_initialize();
  return new_OrgBouncycastleMathPrimes_MROutput_initWithBoolean_withJavaMathBigInteger_(true, factor);
}

OrgBouncycastleMathPrimes_MROutput *OrgBouncycastleMathPrimes_MROutput_provablyCompositeNotPrimePower() {
  OrgBouncycastleMathPrimes_MROutput_initialize();
  return new_OrgBouncycastleMathPrimes_MROutput_initWithBoolean_withJavaMathBigInteger_(true, nil);
}


#line 46
void OrgBouncycastleMathPrimes_MROutput_initWithBoolean_withJavaMathBigInteger_(OrgBouncycastleMathPrimes_MROutput *self, jboolean provablyComposite, JavaMathBigInteger *factor) {
  NSObject_init(self);
  self->provablyComposite_ = provablyComposite;
  self->factor_ = factor;
}


#line 46
OrgBouncycastleMathPrimes_MROutput *new_OrgBouncycastleMathPrimes_MROutput_initWithBoolean_withJavaMathBigInteger_(jboolean provablyComposite, JavaMathBigInteger *factor) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathPrimes_MROutput, initWithBoolean_withJavaMathBigInteger_, provablyComposite, factor)
}


#line 46
OrgBouncycastleMathPrimes_MROutput *create_OrgBouncycastleMathPrimes_MROutput_initWithBoolean_withJavaMathBigInteger_(jboolean provablyComposite, JavaMathBigInteger *factor) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathPrimes_MROutput, initWithBoolean_withJavaMathBigInteger_, provablyComposite, factor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathPrimes_MROutput)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/Primes.java"


#line 73
@implementation OrgBouncycastleMathPrimes_STOutput


#line 79
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)prime
                             withByteArray:(IOSByteArray *)primeSeed
                                   withInt:(jint)primeGenCounter {
  OrgBouncycastleMathPrimes_STOutput_initWithJavaMathBigInteger_withByteArray_withInt_(self, prime, primeSeed, primeGenCounter);
  return self;
}


#line 85
- (JavaMathBigInteger *)getPrime {
  
#line 87
  return prime_;
}


#line 90
- (IOSByteArray *)getPrimeSeed {
  
#line 92
  return primeSeed_;
}


#line 95
- (jint)getPrimeGenCounter {
  
#line 97
  return primeGenCounter_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigInteger:withByteArray:withInt:);
  methods[1].selector = @selector(getPrime);
  methods[2].selector = @selector(getPrimeSeed);
  methods[3].selector = @selector(getPrimeGenCounter);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "prime_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "primeSeed_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "primeGenCounter_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaMathBigInteger;[BI", "LOrgBouncycastleMathPrimes;" };
  static const J2ObjcClassInfo _OrgBouncycastleMathPrimes_STOutput = { "STOutput", "org.bouncycastle.math", ptrTable, methods, fields, 7, 0x9, 4, 3, 1, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathPrimes_STOutput;
}

@end


#line 79
void OrgBouncycastleMathPrimes_STOutput_initWithJavaMathBigInteger_withByteArray_withInt_(OrgBouncycastleMathPrimes_STOutput *self, JavaMathBigInteger *prime, IOSByteArray *primeSeed, jint primeGenCounter) {
  NSObject_init(self);
  
#line 80
  self->prime_ = prime;
  self->primeSeed_ = primeSeed;
  self->primeGenCounter_ = primeGenCounter;
}


#line 79
OrgBouncycastleMathPrimes_STOutput *new_OrgBouncycastleMathPrimes_STOutput_initWithJavaMathBigInteger_withByteArray_withInt_(JavaMathBigInteger *prime, IOSByteArray *primeSeed, jint primeGenCounter) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathPrimes_STOutput, initWithJavaMathBigInteger_withByteArray_withInt_, prime, primeSeed, primeGenCounter)
}


#line 79
OrgBouncycastleMathPrimes_STOutput *create_OrgBouncycastleMathPrimes_STOutput_initWithJavaMathBigInteger_withByteArray_withInt_(JavaMathBigInteger *prime, IOSByteArray *primeSeed, jint primeGenCounter) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathPrimes_STOutput, initWithJavaMathBigInteger_withByteArray_withInt_, prime, primeSeed, primeGenCounter)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathPrimes_STOutput)
