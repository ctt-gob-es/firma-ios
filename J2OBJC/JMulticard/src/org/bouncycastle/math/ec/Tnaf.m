//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/Tnaf.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/math/ec/ECConstants.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECFieldElement.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/SimpleBigDecimal.h"
#include "org/bouncycastle/math/ec/Tnaf.h"
#include "org/bouncycastle/math/ec/ZTauElement.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/math/ec/Tnaf must be compiled with ARC (-fobjc-arc)"
#endif

inline JavaMathBigInteger *OrgBouncycastleMathEcTnaf_get_MINUS_ONE(void);
static JavaMathBigInteger *OrgBouncycastleMathEcTnaf_MINUS_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleMathEcTnaf, MINUS_ONE, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgBouncycastleMathEcTnaf_get_MINUS_TWO(void);
static JavaMathBigInteger *OrgBouncycastleMathEcTnaf_MINUS_TWO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleMathEcTnaf, MINUS_TWO, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgBouncycastleMathEcTnaf_get_MINUS_THREE(void);
static JavaMathBigInteger *OrgBouncycastleMathEcTnaf_MINUS_THREE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleMathEcTnaf, MINUS_THREE, JavaMathBigInteger *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/Tnaf.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleMathEcTnaf)

IOSObjectArray *OrgBouncycastleMathEcTnaf_alpha0;
IOSObjectArray *OrgBouncycastleMathEcTnaf_alpha0Tnaf;
IOSObjectArray *OrgBouncycastleMathEcTnaf_alpha1;
IOSObjectArray *OrgBouncycastleMathEcTnaf_alpha1Tnaf;


#line 12
@implementation OrgBouncycastleMathEcTnaf


#line 12
- (instancetype)initPackagePrivate {
  OrgBouncycastleMathEcTnaf_initPackagePrivate(self);
  return self;
}


#line 82
+ (JavaMathBigInteger *)normWithByte:(jbyte)mu
withOrgBouncycastleMathEcZTauElement:(OrgBouncycastleMathEcZTauElement *)lambda {
  return OrgBouncycastleMathEcTnaf_normWithByte_withOrgBouncycastleMathEcZTauElement_(mu, lambda);
}


#line 123
+ (OrgBouncycastleMathEcSimpleBigDecimal *)normWithByte:(jbyte)mu
              withOrgBouncycastleMathEcSimpleBigDecimal:(OrgBouncycastleMathEcSimpleBigDecimal *)u
              withOrgBouncycastleMathEcSimpleBigDecimal:(OrgBouncycastleMathEcSimpleBigDecimal *)v {
  return OrgBouncycastleMathEcTnaf_normWithByte_withOrgBouncycastleMathEcSimpleBigDecimal_withOrgBouncycastleMathEcSimpleBigDecimal_(mu, u, v);
}


#line 166
+ (OrgBouncycastleMathEcZTauElement *)roundWithOrgBouncycastleMathEcSimpleBigDecimal:(OrgBouncycastleMathEcSimpleBigDecimal *)lambda0
                                           withOrgBouncycastleMathEcSimpleBigDecimal:(OrgBouncycastleMathEcSimpleBigDecimal *)lambda1
                                                                            withByte:(jbyte)mu {
  return OrgBouncycastleMathEcTnaf_roundWithOrgBouncycastleMathEcSimpleBigDecimal_withOrgBouncycastleMathEcSimpleBigDecimal_withByte_(lambda0, lambda1, mu);
}


#line 283
+ (OrgBouncycastleMathEcSimpleBigDecimal *)approximateDivisionByNWithJavaMathBigInteger:(JavaMathBigInteger *)k
                                                                 withJavaMathBigInteger:(JavaMathBigInteger *)s
                                                                 withJavaMathBigInteger:(JavaMathBigInteger *)vm
                                                                               withByte:(jbyte)a
                                                                                withInt:(jint)m
                                                                                withInt:(jint)c {
  return OrgBouncycastleMathEcTnaf_approximateDivisionByNWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withByte_withInt_withInt_(k, s, vm, a, m, c);
}


#line 314
+ (IOSByteArray *)tauAdicNafWithByte:(jbyte)mu
withOrgBouncycastleMathEcZTauElement:(OrgBouncycastleMathEcZTauElement *)lambda {
  return OrgBouncycastleMathEcTnaf_tauAdicNafWithByte_withOrgBouncycastleMathEcZTauElement_(mu, lambda);
}


#line 393
+ (OrgBouncycastleMathEcECPoint_AbstractF2m *)tauWithOrgBouncycastleMathEcECPoint_AbstractF2m:(OrgBouncycastleMathEcECPoint_AbstractF2m *)p {
  return OrgBouncycastleMathEcTnaf_tauWithOrgBouncycastleMathEcECPoint_AbstractF2m_(p);
}


#line 408
+ (jbyte)getMuWithOrgBouncycastleMathEcECCurve_AbstractF2m:(OrgBouncycastleMathEcECCurve_AbstractF2m *)curve {
  return OrgBouncycastleMathEcTnaf_getMuWithOrgBouncycastleMathEcECCurve_AbstractF2m_(curve);
}


#line 423
+ (jbyte)getMuWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)curveA {
  return OrgBouncycastleMathEcTnaf_getMuWithOrgBouncycastleMathEcECFieldElement_(curveA);
}


#line 428
+ (jbyte)getMuWithInt:(jint)curveA {
  return OrgBouncycastleMathEcTnaf_getMuWithInt_(curveA);
}


#line 447
+ (IOSObjectArray *)getLucasWithByte:(jbyte)mu
                             withInt:(jint)k
                         withBoolean:(jboolean)doV {
  return OrgBouncycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, k, doV);
}


#line 502
+ (JavaMathBigInteger *)getTwWithByte:(jbyte)mu
                              withInt:(jint)w {
  return OrgBouncycastleMathEcTnaf_getTwWithByte_withInt_(mu, w);
}


#line 538
+ (IOSObjectArray *)getSiWithOrgBouncycastleMathEcECCurve_AbstractF2m:(OrgBouncycastleMathEcECCurve_AbstractF2m *)curve {
  return OrgBouncycastleMathEcTnaf_getSiWithOrgBouncycastleMathEcECCurve_AbstractF2m_(curve);
}


#line 563
+ (IOSObjectArray *)getSiWithInt:(jint)fieldSize
                         withInt:(jint)curveA
          withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  return OrgBouncycastleMathEcTnaf_getSiWithInt_withInt_withJavaMathBigInteger_(fieldSize, curveA, cofactor);
}


#line 581
+ (jint)getShiftsForCofactorWithJavaMathBigInteger:(JavaMathBigInteger *)h {
  return OrgBouncycastleMathEcTnaf_getShiftsForCofactorWithJavaMathBigInteger_(h);
}


#line 611
+ (OrgBouncycastleMathEcZTauElement *)partModReductionWithJavaMathBigInteger:(JavaMathBigInteger *)k
                                                                     withInt:(jint)m
                                                                    withByte:(jbyte)a
                                                 withJavaMathBigIntegerArray:(IOSObjectArray *)s
                                                                    withByte:(jbyte)mu
                                                                    withByte:(jbyte)c {
  return OrgBouncycastleMathEcTnaf_partModReductionWithJavaMathBigInteger_withInt_withByte_withJavaMathBigIntegerArray_withByte_withByte_(k, m, a, s, mu, c);
}


#line 654
+ (OrgBouncycastleMathEcECPoint_AbstractF2m *)multiplyRTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m:(OrgBouncycastleMathEcECPoint_AbstractF2m *)p
                                                                                 withJavaMathBigInteger:(JavaMathBigInteger *)k {
  return OrgBouncycastleMathEcTnaf_multiplyRTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m_withJavaMathBigInteger_(p, k);
}


#line 675
+ (OrgBouncycastleMathEcECPoint_AbstractF2m *)multiplyTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m:(OrgBouncycastleMathEcECPoint_AbstractF2m *)p
                                                                  withOrgBouncycastleMathEcZTauElement:(OrgBouncycastleMathEcZTauElement *)lambda {
  return OrgBouncycastleMathEcTnaf_multiplyTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m_withOrgBouncycastleMathEcZTauElement_(p, lambda);
}


#line 695
+ (OrgBouncycastleMathEcECPoint_AbstractF2m *)multiplyFromTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m:(OrgBouncycastleMathEcECPoint_AbstractF2m *)p
                                                                                             withByteArray:(IOSByteArray *)u {
  return OrgBouncycastleMathEcTnaf_multiplyFromTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByteArray_(p, u);
}


#line 735
+ (IOSByteArray *)tauAdicWNafWithByte:(jbyte)mu
 withOrgBouncycastleMathEcZTauElement:(OrgBouncycastleMathEcZTauElement *)lambda
                             withByte:(jbyte)width
               withJavaMathBigInteger:(JavaMathBigInteger *)pow2w
               withJavaMathBigInteger:(JavaMathBigInteger *)tw
withOrgBouncycastleMathEcZTauElementArray:(IOSObjectArray *)alpha {
  return OrgBouncycastleMathEcTnaf_tauAdicWNafWithByte_withOrgBouncycastleMathEcZTauElement_withByte_withJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleMathEcZTauElementArray_(mu, lambda, width, pow2w, tw, alpha);
}


#line 832
+ (IOSObjectArray *)getPreCompWithOrgBouncycastleMathEcECPoint_AbstractF2m:(OrgBouncycastleMathEcECPoint_AbstractF2m *)p
                                                                  withByte:(jbyte)a {
  return OrgBouncycastleMathEcTnaf_getPreCompWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByte_(p, a);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcSimpleBigDecimal;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcZTauElement;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcSimpleBigDecimal;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 7, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint_AbstractF2m;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 10, 12, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 10, 13, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x9, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x9, 18, 11, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "I", 0xc, 20, 21, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcZTauElement;", 0x9, 22, 23, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint_AbstractF2m;", 0x9, 24, 25, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint_AbstractF2m;", 0x9, 26, 27, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint_AbstractF2m;", 0x9, 28, 29, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 30, 31, -1, -1, -1, -1 },
    { NULL, "[LOrgBouncycastleMathEcECPoint_AbstractF2m;", 0x9, 32, 33, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(normWithByte:withOrgBouncycastleMathEcZTauElement:);
  methods[2].selector = @selector(normWithByte:withOrgBouncycastleMathEcSimpleBigDecimal:withOrgBouncycastleMathEcSimpleBigDecimal:);
  methods[3].selector = @selector(roundWithOrgBouncycastleMathEcSimpleBigDecimal:withOrgBouncycastleMathEcSimpleBigDecimal:withByte:);
  methods[4].selector = @selector(approximateDivisionByNWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withByte:withInt:withInt:);
  methods[5].selector = @selector(tauAdicNafWithByte:withOrgBouncycastleMathEcZTauElement:);
  methods[6].selector = @selector(tauWithOrgBouncycastleMathEcECPoint_AbstractF2m:);
  methods[7].selector = @selector(getMuWithOrgBouncycastleMathEcECCurve_AbstractF2m:);
  methods[8].selector = @selector(getMuWithOrgBouncycastleMathEcECFieldElement:);
  methods[9].selector = @selector(getMuWithInt:);
  methods[10].selector = @selector(getLucasWithByte:withInt:withBoolean:);
  methods[11].selector = @selector(getTwWithByte:withInt:);
  methods[12].selector = @selector(getSiWithOrgBouncycastleMathEcECCurve_AbstractF2m:);
  methods[13].selector = @selector(getSiWithInt:withInt:withJavaMathBigInteger:);
  methods[14].selector = @selector(getShiftsForCofactorWithJavaMathBigInteger:);
  methods[15].selector = @selector(partModReductionWithJavaMathBigInteger:withInt:withByte:withJavaMathBigIntegerArray:withByte:withByte:);
  methods[16].selector = @selector(multiplyRTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m:withJavaMathBigInteger:);
  methods[17].selector = @selector(multiplyTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m:withOrgBouncycastleMathEcZTauElement:);
  methods[18].selector = @selector(multiplyFromTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m:withByteArray:);
  methods[19].selector = @selector(tauAdicWNafWithByte:withOrgBouncycastleMathEcZTauElement:withByte:withJavaMathBigInteger:withJavaMathBigInteger:withOrgBouncycastleMathEcZTauElementArray:);
  methods[20].selector = @selector(getPreCompWithOrgBouncycastleMathEcECPoint_AbstractF2m:withByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MINUS_ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "MINUS_TWO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "MINUS_THREE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "WIDTH", "B", .constantValue.asChar = OrgBouncycastleMathEcTnaf_WIDTH, 0x19, -1, -1, -1, -1 },
    { "POW_2_WIDTH", "B", .constantValue.asChar = OrgBouncycastleMathEcTnaf_POW_2_WIDTH, 0x19, -1, -1, -1, -1 },
    { "alpha0", "[LOrgBouncycastleMathEcZTauElement;", .constantValue.asLong = 0, 0x19, -1, 37, -1, -1 },
    { "alpha0Tnaf", "[[B", .constantValue.asLong = 0, 0x19, -1, 38, -1, -1 },
    { "alpha1", "[LOrgBouncycastleMathEcZTauElement;", .constantValue.asLong = 0, 0x19, -1, 39, -1, -1 },
    { "alpha1Tnaf", "[[B", .constantValue.asLong = 0, 0x19, -1, 40, -1, -1 },
  };
  static const void *ptrTable[] = { "norm", "BLOrgBouncycastleMathEcZTauElement;", "BLOrgBouncycastleMathEcSimpleBigDecimal;LOrgBouncycastleMathEcSimpleBigDecimal;", "round", "LOrgBouncycastleMathEcSimpleBigDecimal;LOrgBouncycastleMathEcSimpleBigDecimal;B", "approximateDivisionByN", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;BII", "tauAdicNaf", "tau", "LOrgBouncycastleMathEcECPoint_AbstractF2m;", "getMu", "LOrgBouncycastleMathEcECCurve_AbstractF2m;", "LOrgBouncycastleMathEcECFieldElement;", "I", "getLucas", "BIZ", "getTw", "BI", "getSi", "IILJavaMathBigInteger;", "getShiftsForCofactor", "LJavaMathBigInteger;", "partModReduction", "LJavaMathBigInteger;IB[LJavaMathBigInteger;BB", "multiplyRTnaf", "LOrgBouncycastleMathEcECPoint_AbstractF2m;LJavaMathBigInteger;", "multiplyTnaf", "LOrgBouncycastleMathEcECPoint_AbstractF2m;LOrgBouncycastleMathEcZTauElement;", "multiplyFromTnaf", "LOrgBouncycastleMathEcECPoint_AbstractF2m;[B", "tauAdicWNaf", "BLOrgBouncycastleMathEcZTauElement;BLJavaMathBigInteger;LJavaMathBigInteger;[LOrgBouncycastleMathEcZTauElement;", "getPreComp", "LOrgBouncycastleMathEcECPoint_AbstractF2m;B", &OrgBouncycastleMathEcTnaf_MINUS_ONE, &OrgBouncycastleMathEcTnaf_MINUS_TWO, &OrgBouncycastleMathEcTnaf_MINUS_THREE, &OrgBouncycastleMathEcTnaf_alpha0, &OrgBouncycastleMathEcTnaf_alpha0Tnaf, &OrgBouncycastleMathEcTnaf_alpha1, &OrgBouncycastleMathEcTnaf_alpha1Tnaf };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcTnaf = { "Tnaf", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x0, 21, 9, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcTnaf;
}

+ (void)initialize {
  if (self == [OrgBouncycastleMathEcTnaf class]) {
    OrgBouncycastleMathEcTnaf_MINUS_ONE =
#line 14
    [((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE))) negate];
    OrgBouncycastleMathEcTnaf_MINUS_TWO =
#line 15
    [((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgBouncycastleMathEcECConstants, TWO))) negate];
    OrgBouncycastleMathEcTnaf_MINUS_THREE =
#line 16
    [((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgBouncycastleMathEcECConstants, THREE))) negate];
    OrgBouncycastleMathEcTnaf_alpha0 = [IOSObjectArray newArrayWithObjects:(id[]){
#line 40
      nil, create_OrgBouncycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE), JreLoadStatic(OrgBouncycastleMathEcECConstants, ZERO)),
#line 41
      nil, create_OrgBouncycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(
#line 42
      OrgBouncycastleMathEcTnaf_MINUS_THREE, OrgBouncycastleMathEcTnaf_MINUS_ONE), nil, create_OrgBouncycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(
#line 43
      OrgBouncycastleMathEcTnaf_MINUS_ONE, OrgBouncycastleMathEcTnaf_MINUS_ONE), nil, create_OrgBouncycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE),
#line 44
      OrgBouncycastleMathEcTnaf_MINUS_ONE), nil } count:9 type:OrgBouncycastleMathEcZTauElement_class_()];
      OrgBouncycastleMathEcTnaf_alpha0Tnaf = [IOSObjectArray newArrayWithObjects:(id[]){
#line 52
        nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ 1 } count:1], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ -1, 0, 1 } count:3], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ 1, 0, 1 } count:3], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ -1, 0, 0, 1 } count:4] } count:8 type:IOSClass_byteArray(1)];
        OrgBouncycastleMathEcTnaf_alpha1 = [IOSObjectArray newArrayWithObjects:(id[]){
#line 59
          nil, create_OrgBouncycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE), JreLoadStatic(OrgBouncycastleMathEcECConstants, ZERO)),
#line 60
          nil, create_OrgBouncycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(
#line 61
          OrgBouncycastleMathEcTnaf_MINUS_THREE, JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)), nil, create_OrgBouncycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(
#line 62
          OrgBouncycastleMathEcTnaf_MINUS_ONE, JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)), nil, create_OrgBouncycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE), JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)),
#line 63
          nil } count:9 type:OrgBouncycastleMathEcZTauElement_class_()];
          OrgBouncycastleMathEcTnaf_alpha1Tnaf = [IOSObjectArray newArrayWithObjects:(id[]){
#line 71
            nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ 1 } count:1], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ -1, 0, 1 } count:3], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ 1, 0, 1 } count:3], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ -1, 0, 0, -1 } count:4] } count:8 type:IOSClass_byteArray(1)];
            J2OBJC_SET_INITIALIZED(OrgBouncycastleMathEcTnaf)
          }
        }

@end


#line 12
void OrgBouncycastleMathEcTnaf_initPackagePrivate(OrgBouncycastleMathEcTnaf *self) {
  NSObject_init(self);
}


#line 12
OrgBouncycastleMathEcTnaf *new_OrgBouncycastleMathEcTnaf_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcTnaf, initPackagePrivate)
}


#line 12
OrgBouncycastleMathEcTnaf *create_OrgBouncycastleMathEcTnaf_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcTnaf, initPackagePrivate)
}


#line 82
JavaMathBigInteger *OrgBouncycastleMathEcTnaf_normWithByte_withOrgBouncycastleMathEcZTauElement_(jbyte mu, OrgBouncycastleMathEcZTauElement *lambda) {
  OrgBouncycastleMathEcTnaf_initialize();
  JavaMathBigInteger *norm;
  
#line 87
  JavaMathBigInteger *s1 = [((JavaMathBigInteger *) nil_chk(((OrgBouncycastleMathEcZTauElement *) nil_chk(lambda))->u_)) multiplyWithJavaMathBigInteger:lambda->u_];
  
#line 90
  JavaMathBigInteger *s2 = [lambda->u_ multiplyWithJavaMathBigInteger:lambda->v_];
  
#line 93
  JavaMathBigInteger *s3 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(lambda->v_)) multiplyWithJavaMathBigInteger:lambda->v_])) shiftLeftWithInt:1];
  
#line 95
  if (mu == 1) {
    
#line 97
    norm = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(s1)) addWithJavaMathBigInteger:s2])) addWithJavaMathBigInteger:s3];
  }
  else if (mu == -1) {
    
#line 101
    norm = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(s1)) subtractWithJavaMathBigInteger:s2])) addWithJavaMathBigInteger:s3];
  }
  else {
    
#line 105
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  
#line 108
  return norm;
}


#line 123
OrgBouncycastleMathEcSimpleBigDecimal *OrgBouncycastleMathEcTnaf_normWithByte_withOrgBouncycastleMathEcSimpleBigDecimal_withOrgBouncycastleMathEcSimpleBigDecimal_(jbyte mu, OrgBouncycastleMathEcSimpleBigDecimal *u, OrgBouncycastleMathEcSimpleBigDecimal *v) {
  OrgBouncycastleMathEcTnaf_initialize();
  
#line 126
  OrgBouncycastleMathEcSimpleBigDecimal *norm;
  
#line 129
  OrgBouncycastleMathEcSimpleBigDecimal *s1 = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(u)) multiplyWithOrgBouncycastleMathEcSimpleBigDecimal:u];
  
#line 132
  OrgBouncycastleMathEcSimpleBigDecimal *s2 = [u multiplyWithOrgBouncycastleMathEcSimpleBigDecimal:v];
  
#line 135
  OrgBouncycastleMathEcSimpleBigDecimal *s3 = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(v)) multiplyWithOrgBouncycastleMathEcSimpleBigDecimal:v])) shiftLeftWithInt:1];
  
#line 137
  if (mu == 1) {
    
#line 139
    norm = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(s1)) addWithOrgBouncycastleMathEcSimpleBigDecimal:s2])) addWithOrgBouncycastleMathEcSimpleBigDecimal:s3];
  }
  else if (mu == -1) {
    
#line 143
    norm = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(s1)) subtractWithOrgBouncycastleMathEcSimpleBigDecimal:s2])) addWithOrgBouncycastleMathEcSimpleBigDecimal:s3];
  }
  else {
    
#line 147
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  
#line 150
  return norm;
}


#line 166
OrgBouncycastleMathEcZTauElement *OrgBouncycastleMathEcTnaf_roundWithOrgBouncycastleMathEcSimpleBigDecimal_withOrgBouncycastleMathEcSimpleBigDecimal_withByte_(OrgBouncycastleMathEcSimpleBigDecimal *lambda0, OrgBouncycastleMathEcSimpleBigDecimal *lambda1, jbyte mu) {
  OrgBouncycastleMathEcTnaf_initialize();
  
#line 169
  jint scale_ = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(lambda0)) getScale];
  if ([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(lambda1)) getScale] != scale_) {
    
#line 172
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"lambda0 and lambda1 do not have same scale");
  }
  
#line 176
  if (!((mu == 1) || (mu == -1))) {
    
#line 178
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  
#line 181
  JavaMathBigInteger *f0 = [lambda0 round];
  JavaMathBigInteger *f1 = [lambda1 round];
  
#line 184
  OrgBouncycastleMathEcSimpleBigDecimal *eta0 = [lambda0 subtractWithJavaMathBigInteger:f0];
  OrgBouncycastleMathEcSimpleBigDecimal *eta1 = [lambda1 subtractWithJavaMathBigInteger:f1];
  
#line 188
  OrgBouncycastleMathEcSimpleBigDecimal *eta = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(eta0)) addWithOrgBouncycastleMathEcSimpleBigDecimal:eta0];
  if (mu == 1) {
    
#line 191
    eta = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(eta)) addWithOrgBouncycastleMathEcSimpleBigDecimal:eta1];
  }
  else {
    
#line 196
    eta = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(eta)) subtractWithOrgBouncycastleMathEcSimpleBigDecimal:eta1];
  }
  
#line 201
  OrgBouncycastleMathEcSimpleBigDecimal *threeEta1 = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(eta1)) addWithOrgBouncycastleMathEcSimpleBigDecimal:eta1])) addWithOrgBouncycastleMathEcSimpleBigDecimal:eta1];
  OrgBouncycastleMathEcSimpleBigDecimal *fourEta1 = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(threeEta1)) addWithOrgBouncycastleMathEcSimpleBigDecimal:eta1];
  OrgBouncycastleMathEcSimpleBigDecimal *check1;
  OrgBouncycastleMathEcSimpleBigDecimal *check2;
  if (mu == 1) {
    
#line 207
    check1 = [eta0 subtractWithOrgBouncycastleMathEcSimpleBigDecimal:threeEta1];
    check2 = [eta0 addWithOrgBouncycastleMathEcSimpleBigDecimal:fourEta1];
  }
  else {
    
#line 213
    check1 = [eta0 addWithOrgBouncycastleMathEcSimpleBigDecimal:threeEta1];
    check2 = [eta0 subtractWithOrgBouncycastleMathEcSimpleBigDecimal:fourEta1];
  }
  
#line 217
  jbyte h0 = 0;
  jbyte h1 = 0;
  
#line 221
  if ([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(eta)) compareToWithJavaMathBigInteger:JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)] >= 0) {
    
#line 223
    if ([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(check1)) compareToWithJavaMathBigInteger:OrgBouncycastleMathEcTnaf_MINUS_ONE] < 0) {
      
#line 225
      h1 = mu;
    }
    else {
      
#line 229
      h0 = 1;
    }
  }
  else {
    
#line 235
    if ([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(check2)) compareToWithJavaMathBigInteger:JreLoadStatic(OrgBouncycastleMathEcECConstants, TWO)] >= 0) {
      
#line 237
      h1 = mu;
    }
  }
  
#line 242
  if ([eta compareToWithJavaMathBigInteger:OrgBouncycastleMathEcTnaf_MINUS_ONE] < 0) {
    
#line 244
    if ([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(check1)) compareToWithJavaMathBigInteger:JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)] >= 0) {
      
#line 246
      h1 = (jbyte) -mu;
    }
    else {
      
#line 250
      h0 = -1;
    }
  }
  else {
    
#line 256
    if ([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(check2)) compareToWithJavaMathBigInteger:OrgBouncycastleMathEcTnaf_MINUS_TWO] < 0) {
      
#line 258
      h1 = (jbyte) -mu;
    }
  }
  
#line 262
  JavaMathBigInteger *q0 = [((JavaMathBigInteger *) nil_chk(f0)) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(h0)];
  JavaMathBigInteger *q1 = [((JavaMathBigInteger *) nil_chk(f1)) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(h1)];
  return new_OrgBouncycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(q0, q1);
}

OrgBouncycastleMathEcSimpleBigDecimal *OrgBouncycastleMathEcTnaf_approximateDivisionByNWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withByte_withInt_withInt_(JavaMathBigInteger *k, JavaMathBigInteger *s, JavaMathBigInteger *vm, jbyte a, jint m, jint c) {
  OrgBouncycastleMathEcTnaf_initialize();
  
#line 286
  jint _k = JreIntDiv((m + 5), 2) + c;
  JavaMathBigInteger *ns = [((JavaMathBigInteger *) nil_chk(k)) shiftRightWithInt:m - _k - 2 + a];
  
#line 289
  JavaMathBigInteger *gs = [((JavaMathBigInteger *) nil_chk(s)) multiplyWithJavaMathBigInteger:ns];
  
#line 291
  JavaMathBigInteger *hs = [((JavaMathBigInteger *) nil_chk(gs)) shiftRightWithInt:m];
  
#line 293
  JavaMathBigInteger *js = [((JavaMathBigInteger *) nil_chk(vm)) multiplyWithJavaMathBigInteger:hs];
  
#line 295
  JavaMathBigInteger *gsPlusJs = [gs addWithJavaMathBigInteger:js];
  JavaMathBigInteger *ls = [((JavaMathBigInteger *) nil_chk(gsPlusJs)) shiftRightWithInt:_k - c];
  if ([gsPlusJs testBitWithInt:_k - c - 1]) {
    
#line 300
    ls = [((JavaMathBigInteger *) nil_chk(ls)) addWithJavaMathBigInteger:JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)];
  }
  
#line 303
  return new_OrgBouncycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_(ls, c);
}


#line 314
IOSByteArray *OrgBouncycastleMathEcTnaf_tauAdicNafWithByte_withOrgBouncycastleMathEcZTauElement_(jbyte mu, OrgBouncycastleMathEcZTauElement *lambda) {
  OrgBouncycastleMathEcTnaf_initialize();
  if (!((mu == 1) || (mu == -1))) {
    
#line 318
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  
#line 321
  JavaMathBigInteger *norm = OrgBouncycastleMathEcTnaf_normWithByte_withOrgBouncycastleMathEcZTauElement_(mu, lambda);
  
#line 324
  jint log2Norm = [((JavaMathBigInteger *) nil_chk(norm)) bitLength];
  
#line 327
  jint maxLength = log2Norm > 30 ? log2Norm + 4 : 34;
  
#line 330
  IOSByteArray *u = [IOSByteArray newArrayWithLength:maxLength];
  jint i = 0;
  
#line 334
  jint length = 0;
  
#line 336
  JavaMathBigInteger *r0 = ((OrgBouncycastleMathEcZTauElement *) nil_chk(lambda))->u_;
  JavaMathBigInteger *r1 = lambda->v_;
  
#line 339
  while (!(([((JavaMathBigInteger *) nil_chk(r0)) isEqual:JreLoadStatic(OrgBouncycastleMathEcECConstants, ZERO)]) && ([((JavaMathBigInteger *) nil_chk(r1)) isEqual:JreLoadStatic(OrgBouncycastleMathEcECConstants, ZERO)]))) {
    
#line 342
    if ([r0 testBitWithInt:0]) {
      
#line 344
      *IOSByteArray_GetRef(u, i) = (jbyte) [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgBouncycastleMathEcECConstants, TWO))) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(([r0 subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r1)) shiftLeftWithInt:1]]))) modWithJavaMathBigInteger:JreLoadStatic(OrgBouncycastleMathEcECConstants, FOUR)]])) intValue];
      
#line 347
      if (IOSByteArray_Get(u, i) == 1) {
        
#line 349
        r0 = [r0 clearBitWithInt:0];
      }
      else {
        
#line 354
        r0 = [r0 addWithJavaMathBigInteger:JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)];
      }
      length = i;
    }
    else {
      
#line 360
      *IOSByteArray_GetRef(u, i) = 0;
    }
    
#line 363
    JavaMathBigInteger *t = r0;
    JavaMathBigInteger *s = [((JavaMathBigInteger *) nil_chk(r0)) shiftRightWithInt:1];
    if (mu == 1) {
      
#line 367
      r0 = [((JavaMathBigInteger *) nil_chk(r1)) addWithJavaMathBigInteger:s];
    }
    else {
      
#line 372
      r0 = [((JavaMathBigInteger *) nil_chk(r1)) subtractWithJavaMathBigInteger:s];
    }
    
#line 375
    r1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(t)) shiftRightWithInt:1])) negate];
    i++;
  }
  
#line 379
  length++;
  
#line 382
  IOSByteArray *tnaf = [IOSByteArray newArrayWithLength:length];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(u, 0, tnaf, 0, length);
  return tnaf;
}


#line 393
OrgBouncycastleMathEcECPoint_AbstractF2m *OrgBouncycastleMathEcTnaf_tauWithOrgBouncycastleMathEcECPoint_AbstractF2m_(OrgBouncycastleMathEcECPoint_AbstractF2m *p) {
  OrgBouncycastleMathEcTnaf_initialize();
  return [((OrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(p)) tau];
}


#line 408
jbyte OrgBouncycastleMathEcTnaf_getMuWithOrgBouncycastleMathEcECCurve_AbstractF2m_(OrgBouncycastleMathEcECCurve_AbstractF2m *curve) {
  OrgBouncycastleMathEcTnaf_initialize();
  if (![((OrgBouncycastleMathEcECCurve_AbstractF2m *) nil_chk(curve)) isKoblitz]) {
    
#line 412
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No Koblitz curve (ABC), TNAF multiplication not possible");
  }
  
#line 415
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk([curve getA])) isZero]) {
    
#line 417
    return -1;
  }
  
#line 420
  return 1;
}


#line 423
jbyte OrgBouncycastleMathEcTnaf_getMuWithOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECFieldElement *curveA) {
  OrgBouncycastleMathEcTnaf_initialize();
  return (jbyte) ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(curveA)) isZero] ? -1 : 1);
}

jbyte OrgBouncycastleMathEcTnaf_getMuWithInt_(jint curveA) {
  OrgBouncycastleMathEcTnaf_initialize();
  return (jbyte) (curveA == 0 ? -1 : 1);
}


#line 447
IOSObjectArray *OrgBouncycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(jbyte mu, jint k, jboolean doV) {
  OrgBouncycastleMathEcTnaf_initialize();
  if (!((mu == 1) || (mu == -1))) {
    
#line 451
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  
#line 454
  JavaMathBigInteger *u0;
  JavaMathBigInteger *u1;
  JavaMathBigInteger *u2;
  
#line 458
  if (doV) {
    
#line 460
    u0 = JreLoadStatic(OrgBouncycastleMathEcECConstants, TWO);
    u1 = JavaMathBigInteger_valueOfWithLong_(mu);
  }
  else {
    
#line 465
    u0 = JreLoadStatic(OrgBouncycastleMathEcECConstants, ZERO);
    u1 = JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE);
  }
  
#line 469
  for (jint i = 1; i < k; i++) {
    
#line 472
    JavaMathBigInteger *s = nil;
    if (mu == 1) {
      
#line 475
      s = u1;
    }
    else {
      
#line 480
      s = [((JavaMathBigInteger *) nil_chk(u1)) negate];
    }
    
#line 483
    u2 = [((JavaMathBigInteger *) nil_chk(s)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(u0)) shiftLeftWithInt:1]];
    u0 = u1;
    u1 = u2;
  }
  
#line 490
  IOSObjectArray *retVal = [IOSObjectArray newArrayWithObjects:(id[]){ u0, u1 } count:2 type:JavaMathBigInteger_class_()];
  return retVal;
}


#line 502
JavaMathBigInteger *OrgBouncycastleMathEcTnaf_getTwWithByte_withInt_(jbyte mu, jint w) {
  OrgBouncycastleMathEcTnaf_initialize();
  if (w == 4) {
    
#line 506
    if (mu == 1) {
      
#line 508
      return JavaMathBigInteger_valueOfWithLong_(6);
    }
    else {
      
#line 513
      return JavaMathBigInteger_valueOfWithLong_(10);
    }
  }
  else {
    
#line 519
    IOSObjectArray *us = OrgBouncycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, w, false);
    JavaMathBigInteger *twoToW = [((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgBouncycastleMathEcECConstants, ZERO))) setBitWithInt:w];
    JavaMathBigInteger *u1invert = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(us), 1))) modInverseWithJavaMathBigInteger:twoToW];
    JavaMathBigInteger *tw;
    tw = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgBouncycastleMathEcECConstants, TWO))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(us, 0)])) multiplyWithJavaMathBigInteger:u1invert])) modWithJavaMathBigInteger:twoToW];
    
#line 526
    return tw;
  }
}


#line 538
IOSObjectArray *OrgBouncycastleMathEcTnaf_getSiWithOrgBouncycastleMathEcECCurve_AbstractF2m_(OrgBouncycastleMathEcECCurve_AbstractF2m *curve) {
  OrgBouncycastleMathEcTnaf_initialize();
  if (![((OrgBouncycastleMathEcECCurve_AbstractF2m *) nil_chk(curve)) isKoblitz]) {
    
#line 542
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"si is defined for Koblitz curves only");
  }
  
#line 545
  jint m = [curve getFieldSize];
  jint a = [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([curve getA])) toBigInteger])) intValue];
  jbyte mu = OrgBouncycastleMathEcTnaf_getMuWithInt_(a);
  jint shifts = OrgBouncycastleMathEcTnaf_getShiftsForCofactorWithJavaMathBigInteger_([curve getCofactor]);
  jint index = m + 3 - a;
  IOSObjectArray *ui = OrgBouncycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, index, false);
  if (mu == 1) {
    
#line 553
    (void) IOSObjectArray_Set(nil_chk(ui), 0, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(ui, 0))) negate]);
    (void) IOSObjectArray_Set(ui, 1, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(ui, 1))) negate]);
  }
  
#line 557
  JavaMathBigInteger *dividend0 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE))) addWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(ui), 1)])) shiftRightWithInt:shifts];
  JavaMathBigInteger *dividend1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE) addWithJavaMathBigInteger:IOSObjectArray_Get(ui, 0)])) shiftRightWithInt:shifts])) negate];
  
#line 560
  return [IOSObjectArray newArrayWithObjects:(id[]){ dividend0, dividend1 } count:2 type:JavaMathBigInteger_class_()];
}


#line 563
IOSObjectArray *OrgBouncycastleMathEcTnaf_getSiWithInt_withInt_withJavaMathBigInteger_(jint fieldSize, jint curveA, JavaMathBigInteger *cofactor) {
  OrgBouncycastleMathEcTnaf_initialize();
  jbyte mu = OrgBouncycastleMathEcTnaf_getMuWithInt_(curveA);
  jint shifts = OrgBouncycastleMathEcTnaf_getShiftsForCofactorWithJavaMathBigInteger_(cofactor);
  jint index = fieldSize + 3 - curveA;
  IOSObjectArray *ui = OrgBouncycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, index, false);
  if (mu == 1) {
    
#line 571
    (void) IOSObjectArray_Set(nil_chk(ui), 0, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(ui, 0))) negate]);
    (void) IOSObjectArray_Set(ui, 1, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(ui, 1))) negate]);
  }
  
#line 575
  JavaMathBigInteger *dividend0 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE))) addWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(ui), 1)])) shiftRightWithInt:shifts];
  JavaMathBigInteger *dividend1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE) addWithJavaMathBigInteger:IOSObjectArray_Get(ui, 0)])) shiftRightWithInt:shifts])) negate];
  
#line 578
  return [IOSObjectArray newArrayWithObjects:(id[]){ dividend0, dividend1 } count:2 type:JavaMathBigInteger_class_()];
}


#line 581
jint OrgBouncycastleMathEcTnaf_getShiftsForCofactorWithJavaMathBigInteger_(JavaMathBigInteger *h) {
  OrgBouncycastleMathEcTnaf_initialize();
  if (h != nil) {
    
#line 585
    if ([h isEqual:JreLoadStatic(OrgBouncycastleMathEcECConstants, TWO)]) {
      
#line 587
      return 1;
    }
    if ([h isEqual:JreLoadStatic(OrgBouncycastleMathEcECConstants, FOUR)]) {
      
#line 591
      return 2;
    }
  }
  
#line 595
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"h (Cofactor) must be 2 or 4");
}


#line 611
OrgBouncycastleMathEcZTauElement *OrgBouncycastleMathEcTnaf_partModReductionWithJavaMathBigInteger_withInt_withByte_withJavaMathBigIntegerArray_withByte_withByte_(JavaMathBigInteger *k, jint m, jbyte a, IOSObjectArray *s, jbyte mu, jbyte c) {
  OrgBouncycastleMathEcTnaf_initialize();
  
#line 615
  JavaMathBigInteger *d0;
  if (mu == 1) {
    
#line 618
    d0 = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(s), 0))) addWithJavaMathBigInteger:IOSObjectArray_Get(s, 1)];
  }
  else {
    
#line 622
    d0 = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(s), 0))) subtractWithJavaMathBigInteger:IOSObjectArray_Get(s, 1)];
  }
  
#line 625
  IOSObjectArray *v = OrgBouncycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, m, true);
  JavaMathBigInteger *vm = IOSObjectArray_Get(nil_chk(v), 1);
  
#line 628
  OrgBouncycastleMathEcSimpleBigDecimal *lambda0 = OrgBouncycastleMathEcTnaf_approximateDivisionByNWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withByte_withInt_withInt_(
#line 629
  k, IOSObjectArray_Get(s, 0), vm, a, m, c);
  
#line 631
  OrgBouncycastleMathEcSimpleBigDecimal *lambda1 = OrgBouncycastleMathEcTnaf_approximateDivisionByNWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withByte_withInt_withInt_(
#line 632
  k, IOSObjectArray_Get(s, 1), vm, a, m, c);
  
#line 634
  OrgBouncycastleMathEcZTauElement *q = OrgBouncycastleMathEcTnaf_roundWithOrgBouncycastleMathEcSimpleBigDecimal_withOrgBouncycastleMathEcSimpleBigDecimal_withByte_(lambda0, lambda1, mu);
  
#line 637
  JavaMathBigInteger *r0 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(k)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(d0)) multiplyWithJavaMathBigInteger:((OrgBouncycastleMathEcZTauElement *) nil_chk(q))->u_]])) subtractWithJavaMathBigInteger:
#line 638
  [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(s, 1)])) multiplyWithJavaMathBigInteger:q->v_]];
  
#line 641
  JavaMathBigInteger *r1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(s, 1))) multiplyWithJavaMathBigInteger:q->u_])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(s, 0))) multiplyWithJavaMathBigInteger:q->v_]];
  
#line 643
  return new_OrgBouncycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(r0, r1);
}


#line 654
OrgBouncycastleMathEcECPoint_AbstractF2m *OrgBouncycastleMathEcTnaf_multiplyRTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m_withJavaMathBigInteger_(OrgBouncycastleMathEcECPoint_AbstractF2m *p, JavaMathBigInteger *k) {
  OrgBouncycastleMathEcTnaf_initialize();
  OrgBouncycastleMathEcECCurve_AbstractF2m *curve = (OrgBouncycastleMathEcECCurve_AbstractF2m *) cast_chk([((OrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(p)) getCurve], [OrgBouncycastleMathEcECCurve_AbstractF2m class]);
  jint m = [((OrgBouncycastleMathEcECCurve_AbstractF2m *) nil_chk(curve)) getFieldSize];
  jint a = [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([curve getA])) toBigInteger])) intValue];
  jbyte mu = OrgBouncycastleMathEcTnaf_getMuWithInt_(a);
  IOSObjectArray *s = [curve getSi];
  OrgBouncycastleMathEcZTauElement *rho = OrgBouncycastleMathEcTnaf_partModReductionWithJavaMathBigInteger_withInt_withByte_withJavaMathBigIntegerArray_withByte_withByte_(k, m, (jbyte) a, s, mu, (jbyte) 10);
  
#line 663
  return OrgBouncycastleMathEcTnaf_multiplyTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m_withOrgBouncycastleMathEcZTauElement_(p, rho);
}


#line 675
OrgBouncycastleMathEcECPoint_AbstractF2m *OrgBouncycastleMathEcTnaf_multiplyTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m_withOrgBouncycastleMathEcZTauElement_(OrgBouncycastleMathEcECPoint_AbstractF2m *p, OrgBouncycastleMathEcZTauElement *lambda) {
  OrgBouncycastleMathEcTnaf_initialize();
  OrgBouncycastleMathEcECCurve_AbstractF2m *curve = (OrgBouncycastleMathEcECCurve_AbstractF2m *) cast_chk([((OrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(p)) getCurve], [OrgBouncycastleMathEcECCurve_AbstractF2m class]);
  jbyte mu = OrgBouncycastleMathEcTnaf_getMuWithOrgBouncycastleMathEcECFieldElement_([((OrgBouncycastleMathEcECCurve_AbstractF2m *) nil_chk(curve)) getA]);
  IOSByteArray *u = OrgBouncycastleMathEcTnaf_tauAdicNafWithByte_withOrgBouncycastleMathEcZTauElement_(mu, lambda);
  
#line 681
  OrgBouncycastleMathEcECPoint_AbstractF2m *q = OrgBouncycastleMathEcTnaf_multiplyFromTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByteArray_(p, u);
  
#line 683
  return q;
}


#line 695
OrgBouncycastleMathEcECPoint_AbstractF2m *OrgBouncycastleMathEcTnaf_multiplyFromTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByteArray_(OrgBouncycastleMathEcECPoint_AbstractF2m *p, IOSByteArray *u) {
  OrgBouncycastleMathEcTnaf_initialize();
  OrgBouncycastleMathEcECCurve *curve = [((OrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(p)) getCurve];
  OrgBouncycastleMathEcECPoint_AbstractF2m *q = (OrgBouncycastleMathEcECPoint_AbstractF2m *) cast_chk([((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getInfinity], [OrgBouncycastleMathEcECPoint_AbstractF2m class]);
  OrgBouncycastleMathEcECPoint_AbstractF2m *pNeg = (OrgBouncycastleMathEcECPoint_AbstractF2m *) cast_chk([p negate], [OrgBouncycastleMathEcECPoint_AbstractF2m class]);
  jint tauCount = 0;
  for (jint i = ((IOSByteArray *) nil_chk(u))->size_ - 1; i >= 0; i--) {
    
#line 703
    ++tauCount;
    jbyte ui = IOSByteArray_Get(u, i);
    if (ui != 0) {
      
#line 707
      q = [((OrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(q)) tauPowWithInt:tauCount];
      tauCount = 0;
      
#line 710
      OrgBouncycastleMathEcECPoint *x = ui > 0 ? p : pNeg;
      q = (OrgBouncycastleMathEcECPoint_AbstractF2m *) cast_chk([((OrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(q)) addWithOrgBouncycastleMathEcECPoint:x], [OrgBouncycastleMathEcECPoint_AbstractF2m class]);
    }
  }
  if (tauCount > 0) {
    
#line 716
    q = [((OrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(q)) tauPowWithInt:tauCount];
  }
  return q;
}


#line 735
IOSByteArray *OrgBouncycastleMathEcTnaf_tauAdicWNafWithByte_withOrgBouncycastleMathEcZTauElement_withByte_withJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleMathEcZTauElementArray_(jbyte mu, OrgBouncycastleMathEcZTauElement *lambda, jbyte width, JavaMathBigInteger *pow2w, JavaMathBigInteger *tw, IOSObjectArray *alpha) {
  OrgBouncycastleMathEcTnaf_initialize();
  
#line 738
  if (!((mu == 1) || (mu == -1))) {
    
#line 740
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  
#line 743
  JavaMathBigInteger *norm = OrgBouncycastleMathEcTnaf_normWithByte_withOrgBouncycastleMathEcZTauElement_(mu, lambda);
  
#line 746
  jint log2Norm = [((JavaMathBigInteger *) nil_chk(norm)) bitLength];
  
#line 749
  jint maxLength = log2Norm > 30 ? log2Norm + 4 + width : 34 + width;
  
#line 752
  IOSByteArray *u = [IOSByteArray newArrayWithLength:maxLength];
  
#line 755
  JavaMathBigInteger *pow2wMin1 = [((JavaMathBigInteger *) nil_chk(pow2w)) shiftRightWithInt:1];
  
#line 758
  JavaMathBigInteger *r0 = ((OrgBouncycastleMathEcZTauElement *) nil_chk(lambda))->u_;
  JavaMathBigInteger *r1 = lambda->v_;
  jint i = 0;
  
#line 763
  while (!(([((JavaMathBigInteger *) nil_chk(r0)) isEqual:JreLoadStatic(OrgBouncycastleMathEcECConstants, ZERO)]) && ([((JavaMathBigInteger *) nil_chk(r1)) isEqual:JreLoadStatic(OrgBouncycastleMathEcECConstants, ZERO)]))) {
    
#line 766
    if ([r0 testBitWithInt:0]) {
      
#line 769
      JavaMathBigInteger *uUnMod =
#line 770
      [((JavaMathBigInteger *) nil_chk([r0 addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r1)) multiplyWithJavaMathBigInteger:tw]])) modWithJavaMathBigInteger:pow2w];
      
#line 772
      jbyte uLocal;
      
#line 774
      if ([((JavaMathBigInteger *) nil_chk(uUnMod)) compareToWithId:pow2wMin1] >= 0) {
        
#line 776
        uLocal = (jbyte) [((JavaMathBigInteger *) nil_chk([uUnMod subtractWithJavaMathBigInteger:pow2w])) intValue];
      }
      else {
        
#line 780
        uLocal = (jbyte) [uUnMod intValue];
      }
      
#line 784
      *IOSByteArray_GetRef(u, i) = uLocal;
      jboolean s = true;
      if (uLocal < 0) {
        
#line 788
        s = false;
        uLocal = (jbyte) -uLocal;
      }
      
#line 793
      if (s) {
        
#line 795
        r0 = [r0 subtractWithJavaMathBigInteger:((OrgBouncycastleMathEcZTauElement *) nil_chk(IOSObjectArray_Get(nil_chk(alpha), uLocal)))->u_];
        r1 = [r1 subtractWithJavaMathBigInteger:((OrgBouncycastleMathEcZTauElement *) nil_chk(IOSObjectArray_Get(alpha, uLocal)))->v_];
      }
      else {
        
#line 800
        r0 = [r0 addWithJavaMathBigInteger:((OrgBouncycastleMathEcZTauElement *) nil_chk(IOSObjectArray_Get(nil_chk(alpha), uLocal)))->u_];
        r1 = [r1 addWithJavaMathBigInteger:((OrgBouncycastleMathEcZTauElement *) nil_chk(IOSObjectArray_Get(alpha, uLocal)))->v_];
      }
    }
    else {
      
#line 806
      *IOSByteArray_GetRef(u, i) = 0;
    }
    
#line 809
    JavaMathBigInteger *t = r0;
    
#line 811
    if (mu == 1) {
      
#line 813
      r0 = [((JavaMathBigInteger *) nil_chk(r1)) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r0)) shiftRightWithInt:1]];
    }
    else {
      
#line 818
      r0 = [((JavaMathBigInteger *) nil_chk(r1)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r0)) shiftRightWithInt:1]];
    }
    r1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(t)) shiftRightWithInt:1])) negate];
    i++;
  }
  return u;
}


#line 832
IOSObjectArray *OrgBouncycastleMathEcTnaf_getPreCompWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByte_(OrgBouncycastleMathEcECPoint_AbstractF2m *p, jbyte a) {
  OrgBouncycastleMathEcTnaf_initialize();
  IOSObjectArray *alphaTnaf = (a == 0) ? OrgBouncycastleMathEcTnaf_alpha0Tnaf : OrgBouncycastleMathEcTnaf_alpha1Tnaf;
  
#line 836
  IOSObjectArray *pu = [IOSObjectArray newArrayWithLength:JreURShift32((alphaTnaf->size_ + 1), 1) type:OrgBouncycastleMathEcECPoint_AbstractF2m_class_()];
  (void) IOSObjectArray_Set(pu, 0, p);
  
#line 839
  jint precompLen = alphaTnaf->size_;
  for (jint i = 3; i < precompLen; i += 2) {
    
#line 842
    (void) IOSObjectArray_Set(pu, JreURShift32(i, 1), OrgBouncycastleMathEcTnaf_multiplyFromTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByteArray_(p, IOSObjectArray_Get(alphaTnaf, i)));
  }
  
#line 845
  [((OrgBouncycastleMathEcECCurve *) nil_chk([((OrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(p)) getCurve])) normalizeAllWithOrgBouncycastleMathEcECPointArray:pu];
  
#line 847
  return pu;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcTnaf)
