//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ValidityPrecompInfo.java
//

#include "J2ObjC_source.h"
#include "org/bouncycastle/math/ec/ValidityPrecompInfo.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/math/ec/ValidityPrecompInfo must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleMathEcValidityPrecompInfo () {
 @public
  jboolean failed_;
  jboolean curveEquationPassed_;
  jboolean orderPassed_;
}

@end

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ValidityPrecompInfo.java"

NSString *OrgBouncycastleMathEcValidityPrecompInfo_PRECOMP_NAME = @"bc_validity";


#line 3
@implementation OrgBouncycastleMathEcValidityPrecompInfo


#line 3
- (instancetype)initPackagePrivate {
  OrgBouncycastleMathEcValidityPrecompInfo_initPackagePrivate(self);
  return self;
}


#line 11
- (jboolean)hasFailed {
  
#line 13
  return failed_;
}


#line 16
- (void)reportFailed {
  
#line 18
  failed_ = true;
}


#line 21
- (jboolean)hasCurveEquationPassed {
  
#line 23
  return curveEquationPassed_;
}


#line 26
- (void)reportCurveEquationPassed {
  
#line 28
  curveEquationPassed_ = true;
}


#line 31
- (jboolean)hasOrderPassed {
  
#line 33
  return orderPassed_;
}


#line 36
- (void)reportOrderPassed {
  
#line 38
  orderPassed_ = true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(hasFailed);
  methods[2].selector = @selector(reportFailed);
  methods[3].selector = @selector(hasCurveEquationPassed);
  methods[4].selector = @selector(reportCurveEquationPassed);
  methods[5].selector = @selector(hasOrderPassed);
  methods[6].selector = @selector(reportOrderPassed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PRECOMP_NAME", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 0, -1, -1 },
    { "failed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "curveEquationPassed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "orderPassed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { &OrgBouncycastleMathEcValidityPrecompInfo_PRECOMP_NAME };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcValidityPrecompInfo = { "ValidityPrecompInfo", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x0, 7, 4, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcValidityPrecompInfo;
}

@end


#line 3
void OrgBouncycastleMathEcValidityPrecompInfo_initPackagePrivate(OrgBouncycastleMathEcValidityPrecompInfo *self) {
  NSObject_init(self);
  self->failed_ =
#line 7
  false;
  self->curveEquationPassed_ = false;
  self->orderPassed_ = false;
}


#line 3
OrgBouncycastleMathEcValidityPrecompInfo *new_OrgBouncycastleMathEcValidityPrecompInfo_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcValidityPrecompInfo, initPackagePrivate)
}


#line 3
OrgBouncycastleMathEcValidityPrecompInfo *create_OrgBouncycastleMathEcValidityPrecompInfo_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcValidityPrecompInfo, initPackagePrivate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcValidityPrecompInfo)
