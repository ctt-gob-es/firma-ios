//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECCurve.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Hashtable.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "org/bouncycastle/crypto/CryptoServicesRegistrar.h"
#include "org/bouncycastle/math/Primes.h"
#include "org/bouncycastle/math/ec/AbstractECLookupTable.h"
#include "org/bouncycastle/math/ec/ECAlgorithms.h"
#include "org/bouncycastle/math/ec/ECConstants.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECFieldElement.h"
#include "org/bouncycastle/math/ec/ECLookupTable.h"
#include "org/bouncycastle/math/ec/ECMultiplier.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/GLVMultiplier.h"
#include "org/bouncycastle/math/ec/LongArray.h"
#include "org/bouncycastle/math/ec/PreCompCallback.h"
#include "org/bouncycastle/math/ec/PreCompInfo.h"
#include "org/bouncycastle/math/ec/Tnaf.h"
#include "org/bouncycastle/math/ec/WNafL2RMultiplier.h"
#include "org/bouncycastle/math/ec/WTauNafMultiplier.h"
#include "org/bouncycastle/math/ec/endo/ECEndomorphism.h"
#include "org/bouncycastle/math/ec/endo/GLVEndomorphism.h"
#include "org/bouncycastle/math/field/FiniteField.h"
#include "org/bouncycastle/math/field/FiniteFields.h"
#include "org/bouncycastle/math/field/PolynomialExtensionField.h"
#include "org/bouncycastle/math/raw/Nat.h"
#include "org/bouncycastle/util/BigIntegers.h"
#include "org/bouncycastle/util/Integers.h"
#include "org/bouncycastle/util/Properties.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/math/ec/ECCurve must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleMathEcECCurve ()

+ (jint)getNumberOfIterationsWithInt:(jint)bits
                             withInt:(jint)certainty;

@end

__attribute__((unused)) static id<OrgBouncycastleMathEcECMultiplier> OrgBouncycastleMathEcECCurve_createDefaultMultiplier(OrgBouncycastleMathEcECCurve *self);

__attribute__((unused)) static OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECCurve_importPointWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECCurve *self, OrgBouncycastleMathEcECPoint *p);

__attribute__((unused)) static jint OrgBouncycastleMathEcECCurve_getNumberOfIterationsWithInt_withInt_(jint bits, jint certainty);

@interface OrgBouncycastleMathEcECCurve_Config () {
 @public
  OrgBouncycastleMathEcECCurve *this$0_;
}

@end

@interface OrgBouncycastleMathEcECCurve_1 : OrgBouncycastleMathEcAbstractECLookupTable {
 @public
  OrgBouncycastleMathEcECCurve *this$0_;
  jint val$len_;
  jint val$FE_BYTES_;
  IOSByteArray *val$table_;
}

- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)outer$
                                             withInt:(jint)capture$0
                                             withInt:(jint)capture$1
                                       withByteArray:(IOSByteArray *)capture$2;

- (jint)getSize;

- (OrgBouncycastleMathEcECPoint *)lookupWithInt:(jint)index;

- (OrgBouncycastleMathEcECPoint *)lookupVarWithInt:(jint)index;

- (OrgBouncycastleMathEcECPoint *)createPointWithByteArray:(IOSByteArray *)x
                                             withByteArray:(IOSByteArray *)y;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcECCurve_1)

__attribute__((unused)) static void OrgBouncycastleMathEcECCurve_1_initWithOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_(OrgBouncycastleMathEcECCurve_1 *self, OrgBouncycastleMathEcECCurve *outer$, jint capture$0, jint capture$1, IOSByteArray *capture$2);

__attribute__((unused)) static OrgBouncycastleMathEcECCurve_1 *new_OrgBouncycastleMathEcECCurve_1_initWithOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_(OrgBouncycastleMathEcECCurve *outer$, jint capture$0, jint capture$1, IOSByteArray *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleMathEcECCurve_1 *create_OrgBouncycastleMathEcECCurve_1_initWithOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_(OrgBouncycastleMathEcECCurve *outer$, jint capture$0, jint capture$1, IOSByteArray *capture$2);

__attribute__((unused)) static OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECCurve_1_createPointWithByteArray_withByteArray_(OrgBouncycastleMathEcECCurve_1 *self, IOSByteArray *x, IOSByteArray *y);

@interface OrgBouncycastleMathEcECCurve_AbstractFp ()

+ (JavaMathBigInteger *)implRandomFieldElementWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r
                                                    withJavaMathBigInteger:(JavaMathBigInteger *)p;

+ (JavaMathBigInteger *)implRandomFieldElementMultWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r
                                                        withJavaMathBigInteger:(JavaMathBigInteger *)p;

@end

__attribute__((unused)) static JavaMathBigInteger *OrgBouncycastleMathEcECCurve_AbstractFp_implRandomFieldElementWithJavaSecuritySecureRandom_withJavaMathBigInteger_(JavaSecuritySecureRandom *r, JavaMathBigInteger *p);

__attribute__((unused)) static JavaMathBigInteger *OrgBouncycastleMathEcECCurve_AbstractFp_implRandomFieldElementMultWithJavaSecuritySecureRandom_withJavaMathBigInteger_(JavaSecuritySecureRandom *r, JavaMathBigInteger *p);

inline jint OrgBouncycastleMathEcECCurve_Fp_get_FP_DEFAULT_COORDS(void);
#define OrgBouncycastleMathEcECCurve_Fp_FP_DEFAULT_COORDS 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleMathEcECCurve_Fp, FP_DEFAULT_COORDS, jint)

inline id<JavaUtilSet> OrgBouncycastleMathEcECCurve_Fp_get_knownQs(void);
static id<JavaUtilSet> OrgBouncycastleMathEcECCurve_Fp_knownQs;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleMathEcECCurve_Fp, knownQs, id<JavaUtilSet>)

inline OrgBouncycastleUtilBigIntegers_Cache *OrgBouncycastleMathEcECCurve_Fp_get_validatedQs(void);
static OrgBouncycastleUtilBigIntegers_Cache *OrgBouncycastleMathEcECCurve_Fp_validatedQs;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleMathEcECCurve_Fp, validatedQs, OrgBouncycastleUtilBigIntegers_Cache *)

__attribute__((unused)) static IOSObjectArray *OrgBouncycastleMathEcECCurve_Fp__Annotations$0(void);

@interface OrgBouncycastleMathEcECCurve_AbstractF2m () {
 @public
  /*!
   @brief The auxiliary values <code>s<sub>0</sub></code> and 
 <code>s<sub>1</sub></code> used for partial modular reduction for
  Koblitz curves.
   */
  IOSObjectArray *si_;
}

+ (id<OrgBouncycastleMathFieldFiniteField>)buildFieldWithInt:(jint)m
                                                     withInt:(jint)k1
                                                     withInt:(jint)k2
                                                     withInt:(jint)k3;

+ (JavaMathBigInteger *)implRandomFieldElementMultWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r
                                                                       withInt:(jint)m;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECCurve_AbstractF2m, si_, IOSObjectArray *)

__attribute__((unused)) static id<OrgBouncycastleMathFieldFiniteField> OrgBouncycastleMathEcECCurve_AbstractF2m_buildFieldWithInt_withInt_withInt_withInt_(jint m, jint k1, jint k2, jint k3);

__attribute__((unused)) static JavaMathBigInteger *OrgBouncycastleMathEcECCurve_AbstractF2m_implRandomFieldElementMultWithJavaSecuritySecureRandom_withInt_(JavaSecuritySecureRandom *r, jint m);

@interface OrgBouncycastleMathEcECCurve_F2m () {
 @public
  /*!
   @brief The exponent <code>m</code> of <code>F<sub>2<sup>m</sup></sub></code>.
   */
  jint m_;
  /*!
   @brief TPB: The integer <code>k</code> where <code>x<sup>m</sup> +
  x<sup>k</sup> + 1</code> represents the reduction polynomial 
 <code>f(z)</code>.
   <br>
  PPB: The integer <code>k1</code> where <code>x<sup>m</sup> +
  x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
  represents the reduction polynomial <code>f(z)</code>.<br>
   */
  jint k1_;
  /*!
   @brief TPB: Always set to <code>0</code><br>
  PPB: The integer <code>k2</code> where <code>x<sup>m</sup> +
  x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
  represents the reduction polynomial <code>f(z)</code>.
   <br>
   */
  jint k2_;
  /*!
   @brief TPB: Always set to <code>0</code><br>
  PPB: The integer <code>k3</code> where <code>x<sup>m</sup> +
  x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
  represents the reduction polynomial <code>f(z)</code>.
   <br>
   */
  jint k3_;
  /*!
   @brief The point at infinity on this curve.
   */
  OrgBouncycastleMathEcECPoint_F2m *infinity_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECCurve_F2m, infinity_, OrgBouncycastleMathEcECPoint_F2m *)

inline jint OrgBouncycastleMathEcECCurve_F2m_get_F2M_DEFAULT_COORDS(void);
#define OrgBouncycastleMathEcECCurve_F2m_F2M_DEFAULT_COORDS 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleMathEcECCurve_F2m, F2M_DEFAULT_COORDS, jint)

__attribute__((unused)) static IOSObjectArray *OrgBouncycastleMathEcECCurve_F2m__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *OrgBouncycastleMathEcECCurve_F2m__Annotations$1(void);

@interface OrgBouncycastleMathEcECCurve_F2m_1 : OrgBouncycastleMathEcAbstractECLookupTable {
 @public
  OrgBouncycastleMathEcECCurve_F2m *this$0_;
  jint val$len_;
  jint val$FE_LONGS_;
  IOSLongArray *val$table_;
  IOSIntArray *val$ks_;
}

- (instancetype)initWithOrgBouncycastleMathEcECCurve_F2m:(OrgBouncycastleMathEcECCurve_F2m *)outer$
                                                 withInt:(jint)capture$0
                                                 withInt:(jint)capture$1
                                           withLongArray:(IOSLongArray *)capture$2
                                            withIntArray:(IOSIntArray *)capture$3;

- (jint)getSize;

- (OrgBouncycastleMathEcECPoint *)lookupWithInt:(jint)index;

- (OrgBouncycastleMathEcECPoint *)lookupVarWithInt:(jint)index;

- (OrgBouncycastleMathEcECPoint *)createPointWithLongArray:(IOSLongArray *)x
                                             withLongArray:(IOSLongArray *)y;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcECCurve_F2m_1)

__attribute__((unused)) static void OrgBouncycastleMathEcECCurve_F2m_1_initWithOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_(OrgBouncycastleMathEcECCurve_F2m_1 *self, OrgBouncycastleMathEcECCurve_F2m *outer$, jint capture$0, jint capture$1, IOSLongArray *capture$2, IOSIntArray *capture$3);

__attribute__((unused)) static OrgBouncycastleMathEcECCurve_F2m_1 *new_OrgBouncycastleMathEcECCurve_F2m_1_initWithOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_(OrgBouncycastleMathEcECCurve_F2m *outer$, jint capture$0, jint capture$1, IOSLongArray *capture$2, IOSIntArray *capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleMathEcECCurve_F2m_1 *create_OrgBouncycastleMathEcECCurve_F2m_1_initWithOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_(OrgBouncycastleMathEcECCurve_F2m *outer$, jint capture$0, jint capture$1, IOSLongArray *capture$2, IOSIntArray *capture$3);

__attribute__((unused)) static OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECCurve_F2m_1_createPointWithLongArray_withLongArray_(OrgBouncycastleMathEcECCurve_F2m_1 *self, IOSLongArray *x, IOSLongArray *y);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECCurve.java"


#line 25
@implementation OrgBouncycastleMathEcECCurve


#line 36
+ (IOSIntArray *)getAllCoordinateSystems {
  return OrgBouncycastleMathEcECCurve_getAllCoordinateSystems();
}


#line 106
- (instancetype)initWithOrgBouncycastleMathFieldFiniteField:(id<OrgBouncycastleMathFieldFiniteField>)field {
  OrgBouncycastleMathEcECCurve_initWithOrgBouncycastleMathFieldFiniteField_(self, field);
  return self;
}

- (jint)getFieldSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 113
- (OrgBouncycastleMathEcECFieldElement *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 115
- (jboolean)isValidFieldElementWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 117
- (OrgBouncycastleMathEcECFieldElement *)randomFieldElementWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 119
- (OrgBouncycastleMathEcECFieldElement *)randomFieldElementMultWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 121
- (OrgBouncycastleMathEcECCurve_Config *)configure {
  @synchronized(self) {
    return new_OrgBouncycastleMathEcECCurve_Config_initWithOrgBouncycastleMathEcECCurve_withInt_withOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECMultiplier_(self, self->coord_, self->endomorphism_, self->multiplier_);
  }
}


#line 126
- (OrgBouncycastleMathEcECPoint *)validatePointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                               withJavaMathBigInteger:(JavaMathBigInteger *)y {
  OrgBouncycastleMathEcECPoint *p = [self createPointWithJavaMathBigInteger:x withJavaMathBigInteger:y];
  if (![((OrgBouncycastleMathEcECPoint *) nil_chk(p)) isValid]) {
    
#line 131
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid point coordinates");
  }
  return p;
}


#line 136
- (OrgBouncycastleMathEcECPoint *)createPointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                             withJavaMathBigInteger:(JavaMathBigInteger *)y {
  return [self createRawPointWithOrgBouncycastleMathEcECFieldElement:[self fromBigIntegerWithJavaMathBigInteger:x] withOrgBouncycastleMathEcECFieldElement:[self fromBigIntegerWithJavaMathBigInteger:y]];
}

- (OrgBouncycastleMathEcECCurve *)cloneCurve {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 143
- (OrgBouncycastleMathEcECPoint *)createRawPointWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 145
- (OrgBouncycastleMathEcECPoint *)createRawPointWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y
                                           withOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 147
- (id<OrgBouncycastleMathEcECMultiplier>)createDefaultMultiplier {
  return OrgBouncycastleMathEcECCurve_createDefaultMultiplier(self);
}


#line 157
- (jboolean)supportsCoordinateSystemWithInt:(jint)coord {
  
#line 159
  return coord == OrgBouncycastleMathEcECCurve_COORD_AFFINE;
}


#line 162
- (id<OrgBouncycastleMathEcPreCompInfo>)getPreCompInfoWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)point
                                                                          withNSString:(NSString *)name {
  [self checkPointWithOrgBouncycastleMathEcECPoint:point];
  
#line 166
  JavaUtilHashtable *table;
  @synchronized(point) {
    
#line 169
    table = JreRetainedLocalValue(((OrgBouncycastleMathEcECPoint *) nil_chk(point))->preCompTable_);
  }
  
#line 172
  if (nil == table) {
    
#line 174
    return nil;
  }
  
#line 177
  @synchronized(table) {
    
#line 179
    return JreRetainedLocalValue((id<OrgBouncycastleMathEcPreCompInfo>) cast_check([table getWithId:name], OrgBouncycastleMathEcPreCompInfo_class_()));
  }
}


#line 195
- (id<OrgBouncycastleMathEcPreCompInfo>)precomputeWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)point
                                                                      withNSString:(NSString *)name
                                          withOrgBouncycastleMathEcPreCompCallback:(id<OrgBouncycastleMathEcPreCompCallback>)callback {
  
#line 197
  [self checkPointWithOrgBouncycastleMathEcECPoint:point];
  
#line 199
  JavaUtilHashtable *table;
  @synchronized(point) {
    
#line 202
    table = JreRetainedLocalValue(((OrgBouncycastleMathEcECPoint *) nil_chk(point))->preCompTable_);
    if (nil == table) {
      
#line 205
      point->preCompTable_ = table = new_JavaUtilHashtable_initWithInt_(4);
    }
  }
  
#line 209
  @synchronized(table) {
    
#line 211
    id<OrgBouncycastleMathEcPreCompInfo> existing = (id<OrgBouncycastleMathEcPreCompInfo>) cast_check([table getWithId:name], OrgBouncycastleMathEcPreCompInfo_class_());
    id<OrgBouncycastleMathEcPreCompInfo> result = [((id<OrgBouncycastleMathEcPreCompCallback>) nil_chk(callback)) precomputeWithOrgBouncycastleMathEcPreCompInfo:existing];
    
#line 214
    if (!JreObjectEqualsEquals(result, existing)) {
      
#line 216
      (void) [table putWithId:name withId:result];
    }
    
#line 219
    return JreRetainedLocalValue(result);
  }
}


#line 223
- (OrgBouncycastleMathEcECPoint *)importPointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p {
  return OrgBouncycastleMathEcECCurve_importPointWithOrgBouncycastleMathEcECPoint_(self, p);
}


#line 250
- (void)normalizeAllWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points {
  
#line 252
  [self normalizeAllWithOrgBouncycastleMathEcECPointArray:points withInt:0 withInt:((IOSObjectArray *) nil_chk(points))->size_ withOrgBouncycastleMathEcECFieldElement:nil];
}


#line 273
- (void)normalizeAllWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points
                                                  withInt:(jint)off
                                                  withInt:(jint)len
                  withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)iso {
  
#line 275
  [self checkPointsWithOrgBouncycastleMathEcECPointArray:points withInt:off withInt:len];
  
#line 277
  switch ([self getCoordinateSystem]) {
    
#line 279
    case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    {
      if (iso != nil) {
        
#line 284
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'iso' not valid for affine coordinates");
      }
      return;
    }
  }
  
#line 293
  IOSObjectArray *zs = [IOSObjectArray newArrayWithLength:len type:OrgBouncycastleMathEcECFieldElement_class_()];
  IOSIntArray *indices = [IOSIntArray newArrayWithLength:len];
  jint count = 0;
  for (jint i = 0; i < len; ++i) {
    
#line 298
    OrgBouncycastleMathEcECPoint *p = IOSObjectArray_Get(nil_chk(points), off + i);
    if (nil != p && (iso != nil || ![p isNormalized])) {
      
#line 301
      (void) IOSObjectArray_Set(zs, count, [p getZCoordWithInt:0]);
      *IOSIntArray_GetRef(indices, count++) = off + i;
    }
  }
  
#line 306
  if (count == 0) {
    
#line 308
    return;
  }
  
#line 311
  OrgBouncycastleMathEcECAlgorithms_montgomeryTrickWithOrgBouncycastleMathEcECFieldElementArray_withInt_withInt_withOrgBouncycastleMathEcECFieldElement_(zs, 0, count, iso);
  
#line 313
  for (jint j = 0; j < count; ++j) {
    
#line 315
    jint index = IOSIntArray_Get(indices, j);
    (void) IOSObjectArray_Set(nil_chk(points), index, [((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(points, index))) normalizeWithOrgBouncycastleMathEcECFieldElement:IOSObjectArray_Get(zs, j)]);
  }
}


#line 320
- (OrgBouncycastleMathEcECPoint *)getInfinity {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 322
- (id<OrgBouncycastleMathFieldFiniteField>)getField {
  
#line 324
  return field_;
}


#line 327
- (OrgBouncycastleMathEcECFieldElement *)getA {
  
#line 329
  return a_;
}


#line 332
- (OrgBouncycastleMathEcECFieldElement *)getB {
  
#line 334
  return b_;
}


#line 337
- (JavaMathBigInteger *)getOrder {
  
#line 339
  return order_;
}


#line 342
- (JavaMathBigInteger *)getCofactor {
  
#line 344
  return cofactor_;
}


#line 347
- (jint)getCoordinateSystem {
  
#line 349
  return coord_;
}


#line 352
- (OrgBouncycastleMathEcECPoint *)decompressPointWithInt:(jint)yTilde
                                  withJavaMathBigInteger:(JavaMathBigInteger *)X1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 354
- (id<OrgBouncycastleMathEcEndoECEndomorphism>)getEndomorphism {
  
#line 356
  return endomorphism_;
}


#line 364
- (id<OrgBouncycastleMathEcECMultiplier>)getMultiplier {
  
#line 366
  if (self->multiplier_ == nil) {
    
#line 368
    self->multiplier_ = [self createDefaultMultiplier];
  }
  return self->multiplier_;
}


#line 379
- (OrgBouncycastleMathEcECPoint *)decodePointWithByteArray:(IOSByteArray *)encoded {
  
#line 381
  OrgBouncycastleMathEcECPoint *p = nil;
  jint expectedLength = JreIntDiv(([self getFieldSize] + 7), 8);
  
#line 384
  jbyte type = IOSByteArray_Get(nil_chk(encoded), 0);
  switch (type) {
    
#line 387
    case (jint) 0x00:
    {
      if (encoded->size_ != 1) {
        
#line 391
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Incorrect length for infinity encoding");
      }
      
#line 394
      p = [self getInfinity];
      break;
    }
    case (jint) 0x02:
    case (jint) 0x03:
    {
      if (encoded->size_ != (expectedLength + 1)) {
        
#line 402
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Incorrect length for compressed encoding");
      }
      
#line 405
      jint yTilde = type & 1;
      JavaMathBigInteger *X = OrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1, expectedLength);
      
#line 408
      p = [self decompressPointWithInt:yTilde withJavaMathBigInteger:X];
      if (![((OrgBouncycastleMathEcECPoint *) nil_chk(p)) implIsValidWithBoolean:true withBoolean:true]) {
        
#line 411
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid point");
      }
      
#line 414
      break;
    }
    case (jint) 0x04:
    {
      if (encoded->size_ != (2 * expectedLength + 1)) {
        
#line 420
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Incorrect length for uncompressed encoding");
      }
      
#line 423
      JavaMathBigInteger *X = OrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1, expectedLength);
      JavaMathBigInteger *Y = OrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1 + expectedLength, expectedLength);
      
#line 426
      p = [self validatePointWithJavaMathBigInteger:X withJavaMathBigInteger:Y];
      break;
    }
    case (jint) 0x06:
    case (jint) 0x07:
    {
      if (encoded->size_ != (2 * expectedLength + 1)) {
        
#line 434
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Incorrect length for hybrid encoding");
      }
      
#line 437
      JavaMathBigInteger *X = OrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1, expectedLength);
      JavaMathBigInteger *Y = OrgBouncycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1 + expectedLength, expectedLength);
      
#line 440
      if ([((JavaMathBigInteger *) nil_chk(Y)) testBitWithInt:0] != (type == (jint) 0x07)) {
        
#line 442
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Inconsistent Y coordinate in hybrid encoding");
      }
      
#line 445
      p = [self validatePointWithJavaMathBigInteger:X withJavaMathBigInteger:Y];
      break;
    }
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid point encoding 0x", JavaLangInteger_toStringWithInt_withInt_(type, 16)));
  }
  
#line 452
  if (type != (jint) 0x00 && [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) isInfinity]) {
    
#line 454
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid infinity encoding");
  }
  
#line 457
  return p;
}


#line 464
- (id<OrgBouncycastleMathEcECLookupTable>)createCacheSafeLookupTableWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points
                                                                                                  withInt:(jint)off
                                                                                                  withInt:(jint)len {
  
#line 466
  jint FE_BYTES = JreURShift32(([self getFieldSize] + 7), 3);
  
#line 468
  IOSByteArray *table = [IOSByteArray newArrayWithLength:len * FE_BYTES * 2];
  {
    jint pos = 0;
    for (jint i = 0; i < len; ++i) {
      
#line 473
      OrgBouncycastleMathEcECPoint *p = IOSObjectArray_Get(nil_chk(points), off + i);
      IOSByteArray *px = [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getRawXCoord])) toBigInteger])) toByteArray];
      IOSByteArray *py = [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([p getRawYCoord])) toBigInteger])) toByteArray];
      
#line 477
      jint pxStart = ((IOSByteArray *) nil_chk(px))->size_ > FE_BYTES ? 1 : 0;
      
#line 477
      jint pxLen = px->size_ - pxStart;
      jint pyStart = ((IOSByteArray *) nil_chk(py))->size_ > FE_BYTES ? 1 : 0;
      
#line 478
      jint pyLen = py->size_ - pyStart;
      
#line 480
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(px, pxStart, table, pos + FE_BYTES - pxLen, pxLen);
      
#line 480
      pos += FE_BYTES;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(py, pyStart, table, pos + FE_BYTES - pyLen, pyLen);
      
#line 481
      pos += FE_BYTES;
    }
  }
  
#line 485
  return new_OrgBouncycastleMathEcECCurve_1_initWithOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_(self, len, FE_BYTES, table);
}


#line 537
- (void)checkPointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)point {
  
#line 539
  if (nil == point || (!JreObjectEqualsEquals(self, [point getCurve]))) {
    
#line 541
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'point' must be non-null and on this curve");
  }
}


#line 545
- (void)checkPointsWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points {
  
#line 547
  [self checkPointsWithOrgBouncycastleMathEcECPointArray:points withInt:0 withInt:((IOSObjectArray *) nil_chk(points))->size_];
}


#line 550
- (void)checkPointsWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points
                                                 withInt:(jint)off
                                                 withInt:(jint)len {
  
#line 552
  if (points == nil) {
    
#line 554
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'points' cannot be null");
  }
  if (off < 0 || len < 0 || (off > (points->size_ - len))) {
    
#line 558
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid range specified for 'points'");
  }
  
#line 561
  for (jint i = 0; i < len; ++i) {
    
#line 563
    OrgBouncycastleMathEcECPoint *point = IOSObjectArray_Get(points, off + i);
    if (nil != point && !JreObjectEqualsEquals(self, [point getCurve])) {
      
#line 566
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'points' entries must be null or on this curve");
    }
  }
}


#line 571
- (jboolean)equalsWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)other {
  
#line 573
  return JreObjectEqualsEquals(self, other) ||
#line 574
  (nil != other &&
#line 575
  [((id<OrgBouncycastleMathFieldFiniteField>) nil_chk([self getField])) isEqual:[other getField]] &&
#line 576
  [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([self getA])) toBigInteger])) isEqual:[((OrgBouncycastleMathEcECFieldElement *) nil_chk([other getA])) toBigInteger]] &&
#line 577
  [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([self getB])) toBigInteger])) isEqual:[((OrgBouncycastleMathEcECFieldElement *) nil_chk([other getB])) toBigInteger]]);
}


#line 580
- (jboolean)isEqual:(id)obj {
  
#line 583
  return JreObjectEqualsEquals(self, obj) || ([obj isKindOfClass:[OrgBouncycastleMathEcECCurve class]] && [self equalsWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *) cast_chk(obj, [OrgBouncycastleMathEcECCurve class])]);
}

- (NSUInteger)hash {
  
#line 589
  return ((jint) [((id<OrgBouncycastleMathFieldFiniteField>) nil_chk([self getField])) hash]) ^ OrgBouncycastleUtilIntegers_rotateLeftWithInt_withInt_(((jint)
#line 590
  [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([self getA])) toBigInteger])) hash]), 8) ^ OrgBouncycastleUtilIntegers_rotateLeftWithInt_withInt_(((jint)
#line 591
  [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([self getB])) toBigInteger])) hash]), 16);
}


#line 1474
+ (jint)getNumberOfIterationsWithInt:(jint)bits
                             withInt:(jint)certainty {
  return OrgBouncycastleMathEcECCurve_getNumberOfIterationsWithInt_withInt_(bits, certainty);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x401, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 3, 2, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x401, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x401, 6, 5, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECCurve_Config;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECCurve;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x404, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x404, 10, 12, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECMultiplier;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcPreCompInfo;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcPreCompInfo;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 23, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathFieldFiniteField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x404, 24, 25, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcEndoECEndomorphism;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECMultiplier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECLookupTable;", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 30, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 31, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 31, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 32, 34, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 35, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 36, 37, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAllCoordinateSystems);
  methods[1].selector = @selector(initWithOrgBouncycastleMathFieldFiniteField:);
  methods[2].selector = @selector(getFieldSize);
  methods[3].selector = @selector(fromBigIntegerWithJavaMathBigInteger:);
  methods[4].selector = @selector(isValidFieldElementWithJavaMathBigInteger:);
  methods[5].selector = @selector(randomFieldElementWithJavaSecuritySecureRandom:);
  methods[6].selector = @selector(randomFieldElementMultWithJavaSecuritySecureRandom:);
  methods[7].selector = @selector(configure);
  methods[8].selector = @selector(validatePointWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[9].selector = @selector(createPointWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[10].selector = @selector(cloneCurve);
  methods[11].selector = @selector(createRawPointWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[12].selector = @selector(createRawPointWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElementArray:);
  methods[13].selector = @selector(createDefaultMultiplier);
  methods[14].selector = @selector(supportsCoordinateSystemWithInt:);
  methods[15].selector = @selector(getPreCompInfoWithOrgBouncycastleMathEcECPoint:withNSString:);
  methods[16].selector = @selector(precomputeWithOrgBouncycastleMathEcECPoint:withNSString:withOrgBouncycastleMathEcPreCompCallback:);
  methods[17].selector = @selector(importPointWithOrgBouncycastleMathEcECPoint:);
  methods[18].selector = @selector(normalizeAllWithOrgBouncycastleMathEcECPointArray:);
  methods[19].selector = @selector(normalizeAllWithOrgBouncycastleMathEcECPointArray:withInt:withInt:withOrgBouncycastleMathEcECFieldElement:);
  methods[20].selector = @selector(getInfinity);
  methods[21].selector = @selector(getField);
  methods[22].selector = @selector(getA);
  methods[23].selector = @selector(getB);
  methods[24].selector = @selector(getOrder);
  methods[25].selector = @selector(getCofactor);
  methods[26].selector = @selector(getCoordinateSystem);
  methods[27].selector = @selector(decompressPointWithInt:withJavaMathBigInteger:);
  methods[28].selector = @selector(getEndomorphism);
  methods[29].selector = @selector(getMultiplier);
  methods[30].selector = @selector(decodePointWithByteArray:);
  methods[31].selector = @selector(createCacheSafeLookupTableWithOrgBouncycastleMathEcECPointArray:withInt:withInt:);
  methods[32].selector = @selector(checkPointWithOrgBouncycastleMathEcECPoint:);
  methods[33].selector = @selector(checkPointsWithOrgBouncycastleMathEcECPointArray:);
  methods[34].selector = @selector(checkPointsWithOrgBouncycastleMathEcECPointArray:withInt:withInt:);
  methods[35].selector = @selector(equalsWithOrgBouncycastleMathEcECCurve:);
  methods[36].selector = @selector(isEqual:);
  methods[37].selector = @selector(hash);
  methods[38].selector = @selector(getNumberOfIterationsWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COORD_AFFINE", "I", .constantValue.asInt = OrgBouncycastleMathEcECCurve_COORD_AFFINE, 0x19, -1, -1, -1, -1 },
    { "COORD_HOMOGENEOUS", "I", .constantValue.asInt = OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS, 0x19, -1, -1, -1, -1 },
    { "COORD_JACOBIAN", "I", .constantValue.asInt = OrgBouncycastleMathEcECCurve_COORD_JACOBIAN, 0x19, -1, -1, -1, -1 },
    { "COORD_JACOBIAN_CHUDNOVSKY", "I", .constantValue.asInt = OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY, 0x19, -1, -1, -1, -1 },
    { "COORD_JACOBIAN_MODIFIED", "I", .constantValue.asInt = OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED, 0x19, -1, -1, -1, -1 },
    { "COORD_LAMBDA_AFFINE", "I", .constantValue.asInt = OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE, 0x19, -1, -1, -1, -1 },
    { "COORD_LAMBDA_PROJECTIVE", "I", .constantValue.asInt = OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE, 0x19, -1, -1, -1, -1 },
    { "COORD_SKEWED", "I", .constantValue.asInt = OrgBouncycastleMathEcECCurve_COORD_SKEWED, 0x19, -1, -1, -1, -1 },
    { "field_", "LOrgBouncycastleMathFieldFiniteField;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "a_", "LOrgBouncycastleMathEcECFieldElement;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "b_", "LOrgBouncycastleMathEcECFieldElement;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "order_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "cofactor_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "coord_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "endomorphism_", "LOrgBouncycastleMathEcEndoECEndomorphism;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "multiplier_", "LOrgBouncycastleMathEcECMultiplier;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleMathFieldFiniteField;", "fromBigInteger", "LJavaMathBigInteger;", "isValidFieldElement", "randomFieldElement", "LJavaSecuritySecureRandom;", "randomFieldElementMult", "validatePoint", "LJavaMathBigInteger;LJavaMathBigInteger;", "createPoint", "createRawPoint", "LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;", "LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;[LOrgBouncycastleMathEcECFieldElement;", "supportsCoordinateSystem", "I", "getPreCompInfo", "LOrgBouncycastleMathEcECPoint;LNSString;", "precompute", "LOrgBouncycastleMathEcECPoint;LNSString;LOrgBouncycastleMathEcPreCompCallback;", "importPoint", "LOrgBouncycastleMathEcECPoint;", "normalizeAll", "[LOrgBouncycastleMathEcECPoint;", "[LOrgBouncycastleMathEcECPoint;IILOrgBouncycastleMathEcECFieldElement;", "decompressPoint", "ILJavaMathBigInteger;", "decodePoint", "[B", "createCacheSafeLookupTable", "[LOrgBouncycastleMathEcECPoint;II", "checkPoint", "checkPoints", "equals", "LOrgBouncycastleMathEcECCurve;", "LNSObject;", "hashCode", "getNumberOfIterations", "II", "LOrgBouncycastleMathEcECCurve_Config;LOrgBouncycastleMathEcECCurve_AbstractFp;LOrgBouncycastleMathEcECCurve_Fp;LOrgBouncycastleMathEcECCurve_AbstractF2m;LOrgBouncycastleMathEcECCurve_F2m;" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECCurve = { "ECCurve", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x401, 39, 16, -1, 38, -1, -1, -1 };
  return &_OrgBouncycastleMathEcECCurve;
}

@end


#line 36
IOSIntArray *OrgBouncycastleMathEcECCurve_getAllCoordinateSystems() {
  OrgBouncycastleMathEcECCurve_initialize();
  return [IOSIntArray newArrayWithInts:(jint[]){ OrgBouncycastleMathEcECCurve_COORD_AFFINE, OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS, OrgBouncycastleMathEcECCurve_COORD_JACOBIAN, OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY,
#line 39
  OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED, OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE, OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE, OrgBouncycastleMathEcECCurve_COORD_SKEWED } count:8];
}


#line 106
void OrgBouncycastleMathEcECCurve_initWithOrgBouncycastleMathFieldFiniteField_(OrgBouncycastleMathEcECCurve *self, id<OrgBouncycastleMathFieldFiniteField> field) {
  NSObject_init(self);
  self->coord_ = OrgBouncycastleMathEcECCurve_COORD_AFFINE;
  self->endomorphism_ =
#line 103
  nil;
  self->multiplier_ = nil;
  
#line 108
  self->field_ = field;
}


#line 147
id<OrgBouncycastleMathEcECMultiplier> OrgBouncycastleMathEcECCurve_createDefaultMultiplier(OrgBouncycastleMathEcECCurve *self) {
  
#line 149
  if ([OrgBouncycastleMathEcEndoGLVEndomorphism_class_() isInstance:self->endomorphism_]) {
    
#line 151
    return new_OrgBouncycastleMathEcGLVMultiplier_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcEndoGLVEndomorphism_(self, (id<OrgBouncycastleMathEcEndoGLVEndomorphism>) cast_check(self->endomorphism_, OrgBouncycastleMathEcEndoGLVEndomorphism_class_()));
  }
  
#line 154
  return new_OrgBouncycastleMathEcWNafL2RMultiplier_init();
}


#line 223
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECCurve_importPointWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECCurve *self, OrgBouncycastleMathEcECPoint *p) {
  
#line 225
  if (JreObjectEqualsEquals(self, [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve])) {
    
#line 227
    return p;
  }
  if ([p isInfinity]) {
    
#line 231
    return [self getInfinity];
  }
  
#line 235
  p = [p normalize];
  
#line 237
  return [self createPointWithJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getXCoord])) toBigInteger] withJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk([p getYCoord])) toBigInteger]];
}


#line 1474
jint OrgBouncycastleMathEcECCurve_getNumberOfIterationsWithInt_withInt_(jint bits, jint certainty) {
  OrgBouncycastleMathEcECCurve_initialize();
  
#line 1481
  if (bits >= 1536) {
    
#line 1483
    return certainty <= 100 ? 3 :
#line 1484
    certainty <= 128 ? 4 :
#line 1485
    4 + JreIntDiv((certainty - 128 + 1), 2);
  }
  else if (bits >= 1024) {
    
#line 1489
    return certainty <= 100 ? 4 :
#line 1490
    certainty <= 112 ? 5 :
#line 1491
    5 + JreIntDiv((certainty - 112 + 1), 2);
  }
  else if (bits >= 512) {
    
#line 1495
    return certainty <= 80 ? 5 :
#line 1496
    certainty <= 100 ? 7 :
#line 1497
    7 + JreIntDiv((certainty - 100 + 1), 2);
  }
  else {
    
#line 1501
    return certainty <= 80 ? 40 :
#line 1502
    40 + JreIntDiv((certainty - 80 + 1), 2);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECCurve)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECCurve.java"


#line 42
@implementation OrgBouncycastleMathEcECCurve_Config


#line 48
- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)outer$
                                             withInt:(jint)coord
         withOrgBouncycastleMathEcEndoECEndomorphism:(id<OrgBouncycastleMathEcEndoECEndomorphism>)endomorphism
               withOrgBouncycastleMathEcECMultiplier:(id<OrgBouncycastleMathEcECMultiplier>)multiplier {
  OrgBouncycastleMathEcECCurve_Config_initWithOrgBouncycastleMathEcECCurve_withInt_withOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECMultiplier_(self, outer$, coord, endomorphism, multiplier);
  return self;
}


#line 55
- (OrgBouncycastleMathEcECCurve_Config *)setCoordinateSystemWithInt:(jint)coord {
  
#line 57
  self->coord_ = coord;
  return self;
}


#line 61
- (OrgBouncycastleMathEcECCurve_Config *)setEndomorphismWithOrgBouncycastleMathEcEndoECEndomorphism:(id<OrgBouncycastleMathEcEndoECEndomorphism>)endomorphism {
  
#line 63
  self->endomorphism_ = endomorphism;
  return self;
}


#line 67
- (OrgBouncycastleMathEcECCurve_Config *)setMultiplierWithOrgBouncycastleMathEcECMultiplier:(id<OrgBouncycastleMathEcECMultiplier>)multiplier {
  
#line 69
  self->multiplier_ = multiplier;
  return self;
}


#line 73
- (OrgBouncycastleMathEcECCurve *)create {
  
#line 75
  if (![this$0_ supportsCoordinateSystemWithInt:coord_]) {
    
#line 77
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
  }
  
#line 80
  OrgBouncycastleMathEcECCurve *c = [this$0_ cloneCurve];
  if (JreObjectEqualsEquals(c, this$0_)) {
    
#line 83
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"implementation returned current curve");
  }
  
#line 87
  @synchronized(c) {
    
#line 89
    ((OrgBouncycastleMathEcECCurve *) nil_chk(c))->coord_ = coord_;
    c->endomorphism_ = endomorphism_;
    c->multiplier_ = multiplier_;
  }
  
#line 94
  return c;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECCurve_Config;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECCurve_Config;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECCurve_Config;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECCurve;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleMathEcECCurve:withInt:withOrgBouncycastleMathEcEndoECEndomorphism:withOrgBouncycastleMathEcECMultiplier:);
  methods[1].selector = @selector(setCoordinateSystemWithInt:);
  methods[2].selector = @selector(setEndomorphismWithOrgBouncycastleMathEcEndoECEndomorphism:);
  methods[3].selector = @selector(setMultiplierWithOrgBouncycastleMathEcECMultiplier:);
  methods[4].selector = @selector(create);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgBouncycastleMathEcECCurve;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "coord_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "endomorphism_", "LOrgBouncycastleMathEcEndoECEndomorphism;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "multiplier_", "LOrgBouncycastleMathEcECMultiplier;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleMathEcECCurve;ILOrgBouncycastleMathEcEndoECEndomorphism;LOrgBouncycastleMathEcECMultiplier;", "setCoordinateSystem", "I", "setEndomorphism", "LOrgBouncycastleMathEcEndoECEndomorphism;", "setMultiplier", "LOrgBouncycastleMathEcECMultiplier;", "LOrgBouncycastleMathEcECCurve;" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECCurve_Config = { "Config", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x1, 5, 4, 7, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcECCurve_Config;
}

@end


#line 48
void OrgBouncycastleMathEcECCurve_Config_initWithOrgBouncycastleMathEcECCurve_withInt_withOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECMultiplier_(OrgBouncycastleMathEcECCurve_Config *self, OrgBouncycastleMathEcECCurve *outer$, jint coord, id<OrgBouncycastleMathEcEndoECEndomorphism> endomorphism, id<OrgBouncycastleMathEcECMultiplier> multiplier) {
  self->this$0_ = outer$;
  NSObject_init(self);
  
#line 50
  self->coord_ = coord;
  self->endomorphism_ = endomorphism;
  self->multiplier_ = multiplier;
}


#line 48
OrgBouncycastleMathEcECCurve_Config *new_OrgBouncycastleMathEcECCurve_Config_initWithOrgBouncycastleMathEcECCurve_withInt_withOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECMultiplier_(OrgBouncycastleMathEcECCurve *outer$, jint coord, id<OrgBouncycastleMathEcEndoECEndomorphism> endomorphism, id<OrgBouncycastleMathEcECMultiplier> multiplier) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECCurve_Config, initWithOrgBouncycastleMathEcECCurve_withInt_withOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECMultiplier_, outer$, coord, endomorphism, multiplier)
}


#line 48
OrgBouncycastleMathEcECCurve_Config *create_OrgBouncycastleMathEcECCurve_Config_initWithOrgBouncycastleMathEcECCurve_withInt_withOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECMultiplier_(OrgBouncycastleMathEcECCurve *outer$, jint coord, id<OrgBouncycastleMathEcEndoECEndomorphism> endomorphism, id<OrgBouncycastleMathEcECMultiplier> multiplier) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECCurve_Config, initWithOrgBouncycastleMathEcECCurve_withInt_withOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECMultiplier_, outer$, coord, endomorphism, multiplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECCurve_Config)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECCurve.java"


#line 486
@implementation OrgBouncycastleMathEcECCurve_1


#line 486
- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)outer$
                                             withInt:(jint)capture$0
                                             withInt:(jint)capture$1
                                       withByteArray:(IOSByteArray *)capture$2 {
  OrgBouncycastleMathEcECCurve_1_initWithOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_(self, outer$, capture$0, capture$1, capture$2);
  return self;
}


#line 487
- (jint)getSize {
  
#line 490
  return val$len_;
}

- (OrgBouncycastleMathEcECPoint *)lookupWithInt:(jint)index {
  
#line 496
  IOSByteArray *x = [IOSByteArray newArrayWithLength:val$FE_BYTES_];
  
#line 496
  IOSByteArray *y = [IOSByteArray newArrayWithLength:val$FE_BYTES_];
  jint pos = 0;
  
#line 499
  for (jint i = 0; i < val$len_; ++i) {
    
#line 501
    jint MASK = JreRShift32(((i ^ index) - 1), 31);
    
#line 503
    for (jint j = 0; j < val$FE_BYTES_; ++j) {
      
#line 505
      *IOSByteArray_GetRef(x, j) ^= IOSByteArray_Get(nil_chk(val$table_), pos + j) & MASK;
      *IOSByteArray_GetRef(y, j) ^= IOSByteArray_Get(val$table_, pos + val$FE_BYTES_ + j) & MASK;
    }
    
#line 509
    pos += (val$FE_BYTES_ * 2);
  }
  
#line 512
  return OrgBouncycastleMathEcECCurve_1_createPointWithByteArray_withByteArray_(self, x, y);
}


#line 515
- (OrgBouncycastleMathEcECPoint *)lookupVarWithInt:(jint)index {
  
#line 518
  IOSByteArray *x = [IOSByteArray newArrayWithLength:val$FE_BYTES_];
  
#line 518
  IOSByteArray *y = [IOSByteArray newArrayWithLength:val$FE_BYTES_];
  jint pos = index * val$FE_BYTES_ * 2;
  
#line 521
  for (jint j = 0; j < val$FE_BYTES_; ++j) {
    
#line 523
    *IOSByteArray_GetRef(x, j) = IOSByteArray_Get(nil_chk(val$table_), pos + j);
    *IOSByteArray_GetRef(y, j) = IOSByteArray_Get(val$table_, pos + val$FE_BYTES_ + j);
  }
  
#line 527
  return OrgBouncycastleMathEcECCurve_1_createPointWithByteArray_withByteArray_(self, x, y);
}


#line 530
- (OrgBouncycastleMathEcECPoint *)createPointWithByteArray:(IOSByteArray *)x
                                             withByteArray:(IOSByteArray *)y {
  return OrgBouncycastleMathEcECCurve_1_createPointWithByteArray_withByteArray_(self, x, y);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x2, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleMathEcECCurve:withInt:withInt:withByteArray:);
  methods[1].selector = @selector(getSize);
  methods[2].selector = @selector(lookupWithInt:);
  methods[3].selector = @selector(lookupVarWithInt:);
  methods[4].selector = @selector(createPointWithByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgBouncycastleMathEcECCurve;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$len_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$FE_BYTES_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$table_", "[B", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleMathEcECCurve;II[B", "lookup", "I", "lookupVar", "createPoint", "[B[B", "LOrgBouncycastleMathEcECCurve;", "createCacheSafeLookupTableWithOrgBouncycastleMathEcECPointArray:withInt:withInt:" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECCurve_1 = { "", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x8000, 5, 4, 6, -1, 7, -1, -1 };
  return &_OrgBouncycastleMathEcECCurve_1;
}

@end


#line 486
void OrgBouncycastleMathEcECCurve_1_initWithOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_(OrgBouncycastleMathEcECCurve_1 *self, OrgBouncycastleMathEcECCurve *outer$, jint capture$0, jint capture$1, IOSByteArray *capture$2) {
  self->this$0_ = outer$;
  self->val$len_ = capture$0;
  self->val$FE_BYTES_ = capture$1;
  self->val$table_ = capture$2;
  OrgBouncycastleMathEcAbstractECLookupTable_init(self);
}


#line 486
OrgBouncycastleMathEcECCurve_1 *new_OrgBouncycastleMathEcECCurve_1_initWithOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_(OrgBouncycastleMathEcECCurve *outer$, jint capture$0, jint capture$1, IOSByteArray *capture$2) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECCurve_1, initWithOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_, outer$, capture$0, capture$1, capture$2)
}


#line 486
OrgBouncycastleMathEcECCurve_1 *create_OrgBouncycastleMathEcECCurve_1_initWithOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_(OrgBouncycastleMathEcECCurve *outer$, jint capture$0, jint capture$1, IOSByteArray *capture$2) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECCurve_1, initWithOrgBouncycastleMathEcECCurve_withInt_withInt_withByteArray_, outer$, capture$0, capture$1, capture$2)
}


#line 530
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECCurve_1_createPointWithByteArray_withByteArray_(OrgBouncycastleMathEcECCurve_1 *self, IOSByteArray *x, IOSByteArray *y) {
  
#line 532
  return [self->this$0_ createRawPointWithOrgBouncycastleMathEcECFieldElement:[self->this$0_ fromBigIntegerWithJavaMathBigInteger:new_JavaMathBigInteger_initWithInt_withByteArray_(1, x)] withOrgBouncycastleMathEcECFieldElement:[self->this$0_ fromBigIntegerWithJavaMathBigInteger:new_JavaMathBigInteger_initWithInt_withByteArray_(1, y)]];
}

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECCurve.java"


#line 594
@implementation OrgBouncycastleMathEcECCurve_AbstractFp

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q {
  OrgBouncycastleMathEcECCurve_AbstractFp_initWithJavaMathBigInteger_(self, q);
  return self;
}

- (jboolean)isValidFieldElementWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  
#line 604
  return x != nil && [x signum] >= 0 && [x compareToWithId:[((id<OrgBouncycastleMathFieldFiniteField>) nil_chk([self getField])) getCharacteristic]] < 0;
}

- (OrgBouncycastleMathEcECFieldElement *)randomFieldElementWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r {
  
#line 614
  JavaMathBigInteger *p = [((id<OrgBouncycastleMathFieldFiniteField>) nil_chk([self getField])) getCharacteristic];
  OrgBouncycastleMathEcECFieldElement *fe1 = [self fromBigIntegerWithJavaMathBigInteger:OrgBouncycastleMathEcECCurve_AbstractFp_implRandomFieldElementWithJavaSecuritySecureRandom_withJavaMathBigInteger_(r, p)];
  OrgBouncycastleMathEcECFieldElement *fe2 = [self fromBigIntegerWithJavaMathBigInteger:OrgBouncycastleMathEcECCurve_AbstractFp_implRandomFieldElementWithJavaSecuritySecureRandom_withJavaMathBigInteger_(r, p)];
  return [((OrgBouncycastleMathEcECFieldElement *) nil_chk(fe1)) multiplyWithOrgBouncycastleMathEcECFieldElement:fe2];
}


#line 620
- (OrgBouncycastleMathEcECFieldElement *)randomFieldElementMultWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r {
  
#line 627
  JavaMathBigInteger *p = [((id<OrgBouncycastleMathFieldFiniteField>) nil_chk([self getField])) getCharacteristic];
  OrgBouncycastleMathEcECFieldElement *fe1 = [self fromBigIntegerWithJavaMathBigInteger:OrgBouncycastleMathEcECCurve_AbstractFp_implRandomFieldElementMultWithJavaSecuritySecureRandom_withJavaMathBigInteger_(r, p)];
  OrgBouncycastleMathEcECFieldElement *fe2 = [self fromBigIntegerWithJavaMathBigInteger:OrgBouncycastleMathEcECCurve_AbstractFp_implRandomFieldElementMultWithJavaSecuritySecureRandom_withJavaMathBigInteger_(r, p)];
  return [((OrgBouncycastleMathEcECFieldElement *) nil_chk(fe1)) multiplyWithOrgBouncycastleMathEcECFieldElement:fe2];
}


#line 633
- (OrgBouncycastleMathEcECPoint *)decompressPointWithInt:(jint)yTilde
                                  withJavaMathBigInteger:(JavaMathBigInteger *)X1 {
  
#line 636
  OrgBouncycastleMathEcECFieldElement *x = [self fromBigIntegerWithJavaMathBigInteger:X1];
  OrgBouncycastleMathEcECFieldElement *rhs = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(x)) square])) addWithOrgBouncycastleMathEcECFieldElement:self->a_])) multiplyWithOrgBouncycastleMathEcECFieldElement:x])) addWithOrgBouncycastleMathEcECFieldElement:self->b_];
  OrgBouncycastleMathEcECFieldElement *y = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(rhs)) sqrt];
  
#line 643
  if (y == nil) {
    
#line 645
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid point compression");
  }
  
#line 648
  if ([y testBitZero] != (yTilde == 1)) {
    
#line 651
    y = [y negate];
  }
  
#line 654
  return [self createRawPointWithOrgBouncycastleMathEcECFieldElement:x withOrgBouncycastleMathEcECFieldElement:y];
}


#line 657
+ (JavaMathBigInteger *)implRandomFieldElementWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r
                                                    withJavaMathBigInteger:(JavaMathBigInteger *)p {
  return OrgBouncycastleMathEcECCurve_AbstractFp_implRandomFieldElementWithJavaSecuritySecureRandom_withJavaMathBigInteger_(r, p);
}


#line 668
+ (JavaMathBigInteger *)implRandomFieldElementMultWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r
                                                        withJavaMathBigInteger:(JavaMathBigInteger *)p {
  return OrgBouncycastleMathEcECCurve_AbstractFp_implRandomFieldElementMultWithJavaSecuritySecureRandom_withJavaMathBigInteger_(r, p);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 9, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigInteger:);
  methods[1].selector = @selector(isValidFieldElementWithJavaMathBigInteger:);
  methods[2].selector = @selector(randomFieldElementWithJavaSecuritySecureRandom:);
  methods[3].selector = @selector(randomFieldElementMultWithJavaSecuritySecureRandom:);
  methods[4].selector = @selector(decompressPointWithInt:withJavaMathBigInteger:);
  methods[5].selector = @selector(implRandomFieldElementWithJavaSecuritySecureRandom:withJavaMathBigInteger:);
  methods[6].selector = @selector(implRandomFieldElementMultWithJavaSecuritySecureRandom:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaMathBigInteger;", "isValidFieldElement", "randomFieldElement", "LJavaSecuritySecureRandom;", "randomFieldElementMult", "decompressPoint", "ILJavaMathBigInteger;", "implRandomFieldElement", "LJavaSecuritySecureRandom;LJavaMathBigInteger;", "implRandomFieldElementMult", "LOrgBouncycastleMathEcECCurve;" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECCurve_AbstractFp = { "AbstractFp", "org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x409, 7, 0, 10, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcECCurve_AbstractFp;
}

@end


#line 596
void OrgBouncycastleMathEcECCurve_AbstractFp_initWithJavaMathBigInteger_(OrgBouncycastleMathEcECCurve_AbstractFp *self, JavaMathBigInteger *q) {
  OrgBouncycastleMathEcECCurve_initWithOrgBouncycastleMathFieldFiniteField_(self, OrgBouncycastleMathFieldFiniteFields_getPrimeFieldWithJavaMathBigInteger_(
#line 598
  q));
}


#line 657
JavaMathBigInteger *OrgBouncycastleMathEcECCurve_AbstractFp_implRandomFieldElementWithJavaSecuritySecureRandom_withJavaMathBigInteger_(JavaSecuritySecureRandom *r, JavaMathBigInteger *p) {
  OrgBouncycastleMathEcECCurve_AbstractFp_initialize();
  JavaMathBigInteger *x;
  do {
    
#line 662
    x = OrgBouncycastleUtilBigIntegers_createRandomBigIntegerWithInt_withJavaSecuritySecureRandom_([((JavaMathBigInteger *) nil_chk(p)) bitLength], r);
  }
  while ([((JavaMathBigInteger *) nil_chk(x)) compareToWithId:p] >= 0);
  return x;
}


#line 668
JavaMathBigInteger *OrgBouncycastleMathEcECCurve_AbstractFp_implRandomFieldElementMultWithJavaSecuritySecureRandom_withJavaMathBigInteger_(JavaSecuritySecureRandom *r, JavaMathBigInteger *p) {
  OrgBouncycastleMathEcECCurve_AbstractFp_initialize();
  JavaMathBigInteger *x;
  do {
    
#line 673
    x = OrgBouncycastleUtilBigIntegers_createRandomBigIntegerWithInt_withJavaSecuritySecureRandom_([((JavaMathBigInteger *) nil_chk(p)) bitLength], r);
  }
  while ([((JavaMathBigInteger *) nil_chk(x)) signum] <= 0 || [x compareToWithId:p] >= 0);
  return x;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECCurve_AbstractFp)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECCurve.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleMathEcECCurve_Fp)


#line 683
@implementation OrgBouncycastleMathEcECCurve_Fp


#line 695
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)a
                    withJavaMathBigInteger:(JavaMathBigInteger *)b {
  OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, q, a, b);
  return self;
}


#line 701
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)a
                    withJavaMathBigInteger:(JavaMathBigInteger *)b
                    withJavaMathBigInteger:(JavaMathBigInteger *)order
                    withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, q, a, b, order, cofactor);
  return self;
}


#line 706
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)a
                    withJavaMathBigInteger:(JavaMathBigInteger *)b
                    withJavaMathBigInteger:(JavaMathBigInteger *)order
                    withJavaMathBigInteger:(JavaMathBigInteger *)cofactor
                               withBoolean:(jboolean)isInternal {
  OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_(self, q, a, b, order, cofactor, isInternal);
  return self;
}


#line 751
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)r
   withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)a
   withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
                    withJavaMathBigInteger:(JavaMathBigInteger *)order
                    withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(self, q, r, a, b, order, cofactor);
  return self;
}


#line 766
- (OrgBouncycastleMathEcECCurve *)cloneCurve {
  
#line 769
  return new_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(self->q_, self->r_, self->a_, self->b_, self->order_, self->cofactor_);
}

- (jboolean)supportsCoordinateSystemWithInt:(jint)coord {
  
#line 775
  switch (coord) {
    
#line 777
    case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
    case OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    return true;
    default:
    return false;
  }
}


#line 787
- (JavaMathBigInteger *)getQ {
  
#line 789
  return q_;
}


#line 792
- (jint)getFieldSize {
  
#line 795
  return [((JavaMathBigInteger *) nil_chk(q_)) bitLength];
}

- (OrgBouncycastleMathEcECFieldElement *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  
#line 801
  return new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self->q_, self->r_, x);
}

- (OrgBouncycastleMathEcECPoint *)createRawPointWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  
#line 807
  return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(self, x, y);
}


#line 810
- (OrgBouncycastleMathEcECPoint *)createRawPointWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y
                                           withOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs {
  return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(self, x, y, zs);
}

- (OrgBouncycastleMathEcECPoint *)importPointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p {
  
#line 819
  if (!JreObjectEqualsEquals(self, [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve]) && [self getCoordinateSystem] == OrgBouncycastleMathEcECCurve_COORD_JACOBIAN && ![p isInfinity]) {
    
#line 821
    switch ([((OrgBouncycastleMathEcECCurve *) nil_chk([p getCurve])) getCoordinateSystem]) {
      
#line 823
      case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
      case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY:
      case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
      return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(self,
#line 827
      [self fromBigIntegerWithJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(p->x_)) toBigInteger]],
#line 828
      [self fromBigIntegerWithJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(p->y_)) toBigInteger]], [IOSObjectArray newArrayWithObjects:(id[]){
#line 829
        [self fromBigIntegerWithJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(nil_chk(p->zs_), 0))) toBigInteger]] } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()]);
        default:
        break;
      }
    }
    
#line 835
    return OrgBouncycastleMathEcECCurve_importPointWithOrgBouncycastleMathEcECPoint_(self, p);
  }


#line 838
- (OrgBouncycastleMathEcECPoint *)getInfinity {
  
#line 841
  return infinity_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, 1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 4, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECCurve;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x4, 9, 11, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[1].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[2].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withBoolean:);
  methods[3].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[4].selector = @selector(cloneCurve);
  methods[5].selector = @selector(supportsCoordinateSystemWithInt:);
  methods[6].selector = @selector(getQ);
  methods[7].selector = @selector(getFieldSize);
  methods[8].selector = @selector(fromBigIntegerWithJavaMathBigInteger:);
  methods[9].selector = @selector(createRawPointWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[10].selector = @selector(createRawPointWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElementArray:);
  methods[11].selector = @selector(importPointWithOrgBouncycastleMathEcECPoint:);
  methods[12].selector = @selector(getInfinity);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FP_DEFAULT_COORDS", "I", .constantValue.asInt = OrgBouncycastleMathEcECCurve_Fp_FP_DEFAULT_COORDS, 0x1a, -1, -1, -1, -1 },
    { "knownQs", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 14, 15, -1 },
    { "validatedQs", "LOrgBouncycastleUtilBigIntegers_Cache;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "q_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "r_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "infinity_", "LOrgBouncycastleMathEcECPoint_Fp;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", (void *)&OrgBouncycastleMathEcECCurve_Fp__Annotations$0, "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;Z", "LJavaMathBigInteger;LJavaMathBigInteger;LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;LJavaMathBigInteger;LJavaMathBigInteger;", "supportsCoordinateSystem", "I", "fromBigInteger", "LJavaMathBigInteger;", "createRawPoint", "LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;", "LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;[LOrgBouncycastleMathEcECFieldElement;", "importPoint", "LOrgBouncycastleMathEcECPoint;", &OrgBouncycastleMathEcECCurve_Fp_knownQs, "Ljava/util/Set<Ljava/math/BigInteger;>;", &OrgBouncycastleMathEcECCurve_Fp_validatedQs, "LOrgBouncycastleMathEcECCurve;" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECCurve_Fp = { "Fp", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x9, 13, 6, 17, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcECCurve_Fp;
}

+ (void)initialize {
  if (self == [OrgBouncycastleMathEcECCurve_Fp class]) {
    OrgBouncycastleMathEcECCurve_Fp_knownQs = JavaUtilCollections_synchronizedSetWithJavaUtilSet_(new_JavaUtilHashSet_init());
    OrgBouncycastleMathEcECCurve_Fp_validatedQs = new_OrgBouncycastleUtilBigIntegers_Cache_init();
    J2OBJC_SET_INITIALIZED(OrgBouncycastleMathEcECCurve_Fp)
  }
}

@end


#line 695
void OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self,
#line 698
  q, a, b, nil, nil);
}


#line 695
OrgBouncycastleMathEcECCurve_Fp *new_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, q, a, b)
}


#line 695
OrgBouncycastleMathEcECCurve_Fp *create_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, q, a, b)
}


#line 701
void OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_(self,
#line 703
  q, a, b, order, cofactor, false);
}


#line 701
OrgBouncycastleMathEcECCurve_Fp *new_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, q, a, b, order, cofactor)
}


#line 701
OrgBouncycastleMathEcECCurve_Fp *create_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, q, a, b, order, cofactor)
}


#line 706
void OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_(OrgBouncycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor, jboolean isInternal) {
  OrgBouncycastleMathEcECCurve_AbstractFp_initWithJavaMathBigInteger_(self,
#line 708
  q);
  
#line 710
  if (isInternal) {
    
#line 712
    self->q_ = q;
    [((id<JavaUtilSet>) nil_chk(OrgBouncycastleMathEcECCurve_Fp_knownQs)) addWithId:q];
  }
  else if ([((id<JavaUtilSet>) nil_chk(OrgBouncycastleMathEcECCurve_Fp_knownQs)) containsWithId:q] || [((OrgBouncycastleUtilBigIntegers_Cache *) nil_chk(OrgBouncycastleMathEcECCurve_Fp_validatedQs)) containsWithJavaMathBigInteger:q]) {
    
#line 717
    self->q_ = q;
  }
  else {
    
#line 721
    jint maxBitLength = OrgBouncycastleUtilProperties_asIntegerWithNSString_withInt_(@"org.bouncycastle.ec.fp_max_size", 1042);
    jint certainty = OrgBouncycastleUtilProperties_asIntegerWithNSString_withInt_(@"org.bouncycastle.ec.fp_certainty", 100);
    
#line 724
    jint qBitLength = [((JavaMathBigInteger *) nil_chk(q)) bitLength];
    if (maxBitLength < qBitLength) {
      
#line 727
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Fp q value out of range");
    }
    
#line 730
    if (OrgBouncycastleMathPrimes_hasAnySmallFactorsWithJavaMathBigInteger_(q) || !OrgBouncycastleMathPrimes_isMRProbablePrimeWithJavaMathBigInteger_withJavaSecuritySecureRandom_withInt_(
#line 731
    q, OrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom(), OrgBouncycastleMathEcECCurve_getNumberOfIterationsWithInt_withInt_(qBitLength, certainty))) {
      
#line 733
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Fp q value not prime");
    }
    
#line 736
    [((OrgBouncycastleUtilBigIntegers_Cache *) nil_chk(OrgBouncycastleMathEcECCurve_Fp_validatedQs)) addWithJavaMathBigInteger:q];
    
#line 738
    self->q_ = q;
  }
  
#line 741
  self->r_ = OrgBouncycastleMathEcECFieldElement_Fp_calculateResidueWithJavaMathBigInteger_(q);
  self->infinity_ = new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(self, nil, nil);
  
#line 744
  self->a_ = [self fromBigIntegerWithJavaMathBigInteger:a];
  self->b_ = [self fromBigIntegerWithJavaMathBigInteger:b];
  self->order_ = order;
  self->cofactor_ = cofactor;
  self->coord_ = OrgBouncycastleMathEcECCurve_Fp_FP_DEFAULT_COORDS;
}


#line 706
OrgBouncycastleMathEcECCurve_Fp *new_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor, jboolean isInternal) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_, q, a, b, order, cofactor, isInternal)
}


#line 706
OrgBouncycastleMathEcECCurve_Fp *create_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor, jboolean isInternal) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_, q, a, b, order, cofactor, isInternal)
}


#line 751
void OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *r, OrgBouncycastleMathEcECFieldElement *a, OrgBouncycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  OrgBouncycastleMathEcECCurve_AbstractFp_initWithJavaMathBigInteger_(self,
#line 753
  q);
  
#line 755
  self->q_ = q;
  self->r_ = r;
  self->infinity_ = new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(self, nil, nil);
  
#line 759
  self->a_ = a;
  self->b_ = b;
  self->order_ = order;
  self->cofactor_ = cofactor;
  self->coord_ = OrgBouncycastleMathEcECCurve_Fp_FP_DEFAULT_COORDS;
}


#line 751
OrgBouncycastleMathEcECCurve_Fp *new_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *r, OrgBouncycastleMathEcECFieldElement *a, OrgBouncycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_, q, r, a, b, order, cofactor)
}


#line 751
OrgBouncycastleMathEcECCurve_Fp *create_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *r, OrgBouncycastleMathEcECFieldElement *a, OrgBouncycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_, q, r, a, b, order, cofactor)
}

IOSObjectArray *OrgBouncycastleMathEcECCurve_Fp__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECCurve_Fp)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECCurve.java"


#line 845
@implementation OrgBouncycastleMathEcECCurve_AbstractF2m

+ (JavaMathBigInteger *)inverseWithInt:(jint)m
                          withIntArray:(IOSIntArray *)ks
                withJavaMathBigInteger:(JavaMathBigInteger *)x {
  return OrgBouncycastleMathEcECCurve_AbstractF2m_inverseWithInt_withIntArray_withJavaMathBigInteger_(m, ks, x);
}


#line 859
+ (id<OrgBouncycastleMathFieldFiniteField>)buildFieldWithInt:(jint)m
                                                     withInt:(jint)k1
                                                     withInt:(jint)k2
                                                     withInt:(jint)k3 {
  return OrgBouncycastleMathEcECCurve_AbstractF2m_buildFieldWithInt_withInt_withInt_withInt_(m, k1, k2, k3);
}


#line 889
- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3 {
  OrgBouncycastleMathEcECCurve_AbstractF2m_initWithInt_withInt_withInt_withInt_(self, m, k1, k2, k3);
  return self;
}


#line 894
- (OrgBouncycastleMathEcECPoint *)createPointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                             withJavaMathBigInteger:(JavaMathBigInteger *)y {
  
#line 897
  OrgBouncycastleMathEcECFieldElement *X = [self fromBigIntegerWithJavaMathBigInteger:x];
  
#line 897
  OrgBouncycastleMathEcECFieldElement *Y = [self fromBigIntegerWithJavaMathBigInteger:y];
  
#line 899
  jint coord = [self getCoordinateSystem];
  
#line 901
  switch (coord) {
    
#line 903
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X)) isZero]) {
        
#line 908
        if (![((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) square])) isEqual:[self getB]]) {
          
#line 910
          @throw new_JavaLangIllegalArgumentException_init();
        }
      }
      else {
        
#line 927
        Y = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) divideWithOrgBouncycastleMathEcECFieldElement:X])) addWithOrgBouncycastleMathEcECFieldElement:X];
      }
      break;
    }
    default:
    {
      break;
    }
  }
  
#line 937
  return [self createRawPointWithOrgBouncycastleMathEcECFieldElement:X withOrgBouncycastleMathEcECFieldElement:Y];
}


#line 940
- (jboolean)isValidFieldElementWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  
#line 943
  return x != nil && [x signum] >= 0 && [x bitLength] <= [self getFieldSize];
}

- (OrgBouncycastleMathEcECFieldElement *)randomFieldElementWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r {
  
#line 949
  jint m = [self getFieldSize];
  return [self fromBigIntegerWithJavaMathBigInteger:OrgBouncycastleUtilBigIntegers_createRandomBigIntegerWithInt_withJavaSecuritySecureRandom_(m, r)];
}

- (OrgBouncycastleMathEcECFieldElement *)randomFieldElementMultWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r {
  
#line 960
  jint m = [self getFieldSize];
  OrgBouncycastleMathEcECFieldElement *fe1 = [self fromBigIntegerWithJavaMathBigInteger:OrgBouncycastleMathEcECCurve_AbstractF2m_implRandomFieldElementMultWithJavaSecuritySecureRandom_withInt_(r, m)];
  OrgBouncycastleMathEcECFieldElement *fe2 = [self fromBigIntegerWithJavaMathBigInteger:OrgBouncycastleMathEcECCurve_AbstractF2m_implRandomFieldElementMultWithJavaSecuritySecureRandom_withInt_(r, m)];
  return [((OrgBouncycastleMathEcECFieldElement *) nil_chk(fe1)) multiplyWithOrgBouncycastleMathEcECFieldElement:fe2];
}


#line 975
- (OrgBouncycastleMathEcECPoint *)decompressPointWithInt:(jint)yTilde
                                  withJavaMathBigInteger:(JavaMathBigInteger *)X1 {
  
#line 978
  OrgBouncycastleMathEcECFieldElement *x = [self fromBigIntegerWithJavaMathBigInteger:X1];
  
#line 978
  OrgBouncycastleMathEcECFieldElement *y = nil;
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(x)) isZero]) {
    
#line 981
    y = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([self getB])) sqrt];
  }
  else {
    
#line 985
    OrgBouncycastleMathEcECFieldElement *beta = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([x square])) invert])) multiplyWithOrgBouncycastleMathEcECFieldElement:[self getB]])) addWithOrgBouncycastleMathEcECFieldElement:[self getA]])) addWithOrgBouncycastleMathEcECFieldElement:x];
    OrgBouncycastleMathEcECFieldElement *z = [self solveQuadraticEquationWithOrgBouncycastleMathEcECFieldElement:beta];
    if (z != nil) {
      
#line 989
      if ([z testBitZero] != (yTilde == 1)) {
        
#line 991
        z = [z addOne];
      }
      
#line 994
      switch ([self getCoordinateSystem]) {
        
#line 996
        case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
        case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
        {
          y = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(z)) addWithOrgBouncycastleMathEcECFieldElement:x];
          break;
        }
        default:
        {
          y = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(z)) multiplyWithOrgBouncycastleMathEcECFieldElement:x];
          break;
        }
      }
    }
  }
  
#line 1011
  if (y == nil) {
    
#line 1013
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid point compression");
  }
  
#line 1016
  return [self createRawPointWithOrgBouncycastleMathEcECFieldElement:x withOrgBouncycastleMathEcECFieldElement:y];
}


#line 1028
- (OrgBouncycastleMathEcECFieldElement *)solveQuadraticEquationWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)beta {
  
#line 1030
  OrgBouncycastleMathEcECFieldElement_AbstractF2m *betaF2m = (OrgBouncycastleMathEcECFieldElement_AbstractF2m *) cast_chk(beta, [OrgBouncycastleMathEcECFieldElement_AbstractF2m class]);
  
#line 1032
  jboolean fastTrace = [((OrgBouncycastleMathEcECFieldElement_AbstractF2m *) nil_chk(betaF2m)) hasFastTrace];
  if (fastTrace && 0 != [betaF2m trace]) {
    
#line 1035
    return nil;
  }
  
#line 1038
  jint m = [self getFieldSize];
  
#line 1041
  if (0 != (m & 1)) {
    
#line 1043
    OrgBouncycastleMathEcECFieldElement *r = [betaF2m halfTrace];
    if (fastTrace || [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(r)) square])) addWithOrgBouncycastleMathEcECFieldElement:r])) addWithOrgBouncycastleMathEcECFieldElement:beta])) isZero]) {
      
#line 1046
      return r;
    }
    return nil;
  }
  
#line 1051
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(beta)) isZero]) {
    
#line 1053
    return beta;
  }
  
#line 1056
  OrgBouncycastleMathEcECFieldElement *gamma;
  
#line 1056
  OrgBouncycastleMathEcECFieldElement *z;
  
#line 1056
  OrgBouncycastleMathEcECFieldElement *zeroElement = [self fromBigIntegerWithJavaMathBigInteger:JreLoadStatic(OrgBouncycastleMathEcECConstants, ZERO)];
  
#line 1058
  JavaUtilRandom *rand = new_JavaUtilRandom_init();
  do {
    
#line 1061
    OrgBouncycastleMathEcECFieldElement *t = [self fromBigIntegerWithJavaMathBigInteger:new_JavaMathBigInteger_initWithInt_withJavaUtilRandom_(m, rand)];
    z = zeroElement;
    OrgBouncycastleMathEcECFieldElement *w = beta;
    for (jint i = 1; i < m; i++) {
      
#line 1066
      OrgBouncycastleMathEcECFieldElement *w2 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(w)) square];
      z = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(z)) square])) addWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(w2)) multiplyWithOrgBouncycastleMathEcECFieldElement:t]];
      w = [w2 addWithOrgBouncycastleMathEcECFieldElement:beta];
    }
    if (![((OrgBouncycastleMathEcECFieldElement *) nil_chk(w)) isZero]) {
      
#line 1072
      return nil;
    }
    gamma = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(z)) square])) addWithOrgBouncycastleMathEcECFieldElement:z];
  }
  while ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(gamma)) isZero]);
  
#line 1078
  return z;
}


#line 1086
- (IOSObjectArray *)getSi {
  @synchronized(self) {
    if (si_ == nil) {
      
#line 1090
      si_ = OrgBouncycastleMathEcTnaf_getSiWithOrgBouncycastleMathEcECCurve_AbstractF2m_(self);
    }
    return JreRetainedLocalValue(si_);
  }
}


#line 1099
- (jboolean)isKoblitz {
  
#line 1101
  return self->order_ != nil && self->cofactor_ != nil && [((OrgBouncycastleMathEcECFieldElement *) nil_chk(self->b_)) isOne] && ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(self->a_)) isZero] || [((OrgBouncycastleMathEcECFieldElement *) nil_chk(self->a_)) isOne]);
}


#line 1104
+ (JavaMathBigInteger *)implRandomFieldElementMultWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r
                                                                       withInt:(jint)m {
  return OrgBouncycastleMathEcECCurve_AbstractF2m_implRandomFieldElementMultWithJavaSecuritySecureRandom_withInt_(r, m);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaMathBigInteger;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathFieldFiniteField;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x4, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x4, 13, 14, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(inverseWithInt:withIntArray:withJavaMathBigInteger:);
  methods[1].selector = @selector(buildFieldWithInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(initWithInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(createPointWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[4].selector = @selector(isValidFieldElementWithJavaMathBigInteger:);
  methods[5].selector = @selector(randomFieldElementWithJavaSecuritySecureRandom:);
  methods[6].selector = @selector(randomFieldElementMultWithJavaSecuritySecureRandom:);
  methods[7].selector = @selector(decompressPointWithInt:withJavaMathBigInteger:);
  methods[8].selector = @selector(solveQuadraticEquationWithOrgBouncycastleMathEcECFieldElement:);
  methods[9].selector = @selector(getSi);
  methods[10].selector = @selector(isKoblitz);
  methods[11].selector = @selector(implRandomFieldElementMultWithJavaSecuritySecureRandom:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "si_", "[LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "inverse", "I[ILJavaMathBigInteger;", "buildField", "IIII", "createPoint", "LJavaMathBigInteger;LJavaMathBigInteger;", "isValidFieldElement", "LJavaMathBigInteger;", "randomFieldElement", "LJavaSecuritySecureRandom;", "randomFieldElementMult", "decompressPoint", "ILJavaMathBigInteger;", "solveQuadraticEquation", "LOrgBouncycastleMathEcECFieldElement;", "implRandomFieldElementMult", "LJavaSecuritySecureRandom;I", "LOrgBouncycastleMathEcECCurve;" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECCurve_AbstractF2m = { "AbstractF2m", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x409, 12, 1, 17, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcECCurve_AbstractF2m;
}

@end


#line 847
JavaMathBigInteger *OrgBouncycastleMathEcECCurve_AbstractF2m_inverseWithInt_withIntArray_withJavaMathBigInteger_(jint m, IOSIntArray *ks, JavaMathBigInteger *x) {
  OrgBouncycastleMathEcECCurve_AbstractF2m_initialize();
  return [((OrgBouncycastleMathEcLongArray *) nil_chk([new_OrgBouncycastleMathEcLongArray_initPackagePrivateWithJavaMathBigInteger_(x) modInverseWithInt:m withIntArray:ks])) toBigInteger];
}


#line 859
id<OrgBouncycastleMathFieldFiniteField> OrgBouncycastleMathEcECCurve_AbstractF2m_buildFieldWithInt_withInt_withInt_withInt_(jint m, jint k1, jint k2, jint k3) {
  OrgBouncycastleMathEcECCurve_AbstractF2m_initialize();
  if (k1 == 0) {
    
#line 863
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"k1 must be > 0");
  }
  
#line 866
  if (k2 == 0) {
    
#line 868
    if (k3 != 0) {
      
#line 870
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"k3 must be 0 if k2 == 0");
    }
    
#line 873
    return OrgBouncycastleMathFieldFiniteFields_getBinaryExtensionFieldWithIntArray_([IOSIntArray newArrayWithInts:(jint[]){ 0, k1, m } count:3]);
  }
  
#line 876
  if (k2 <= k1) {
    
#line 878
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"k2 must be > k1");
  }
  
#line 881
  if (k3 <= k2) {
    
#line 883
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"k3 must be > k2");
  }
  
#line 886
  return OrgBouncycastleMathFieldFiniteFields_getBinaryExtensionFieldWithIntArray_([IOSIntArray newArrayWithInts:(jint[]){ 0, k1, k2, k3, m } count:5]);
}


#line 889
void OrgBouncycastleMathEcECCurve_AbstractF2m_initWithInt_withInt_withInt_withInt_(OrgBouncycastleMathEcECCurve_AbstractF2m *self, jint m, jint k1, jint k2, jint k3) {
  OrgBouncycastleMathEcECCurve_initWithOrgBouncycastleMathFieldFiniteField_(self, OrgBouncycastleMathEcECCurve_AbstractF2m_buildFieldWithInt_withInt_withInt_withInt_(
#line 891
  m, k1, k2, k3));
  self->si_ =
#line 857
  nil;
}


#line 1104
JavaMathBigInteger *OrgBouncycastleMathEcECCurve_AbstractF2m_implRandomFieldElementMultWithJavaSecuritySecureRandom_withInt_(JavaSecuritySecureRandom *r, jint m) {
  OrgBouncycastleMathEcECCurve_AbstractF2m_initialize();
  JavaMathBigInteger *x;
  do {
    
#line 1109
    x = OrgBouncycastleUtilBigIntegers_createRandomBigIntegerWithInt_withJavaSecuritySecureRandom_(m, r);
  }
  while ([((JavaMathBigInteger *) nil_chk(x)) signum] <= 0);
  return x;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECCurve_AbstractF2m)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECCurve.java"


#line 1120
@implementation OrgBouncycastleMathEcECCurve_F2m


#line 1175
- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b {
  OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k, a, b);
  return self;
}


#line 1202
- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b
     withJavaMathBigInteger:(JavaMathBigInteger *)order
     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k, a, b, order, cofactor);
  return self;
}


#line 1234
- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b {
  OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k1, k2, k3, a, b);
  return self;
}


#line 1269
- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b
     withJavaMathBigInteger:(JavaMathBigInteger *)order
     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k1, k2, k3, a, b, order, cofactor);
  return self;
}


#line 1294
- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)a
withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
     withJavaMathBigInteger:(JavaMathBigInteger *)order
     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k1, k2, k3, a, b, order, cofactor);
  return self;
}


#line 1311
- (OrgBouncycastleMathEcECCurve *)cloneCurve {
  
#line 1314
  return new_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(self->m_, self->k1_, self->k2_, self->k3_, self->a_, self->b_, self->order_, self->cofactor_);
}

- (jboolean)supportsCoordinateSystemWithInt:(jint)coord {
  
#line 1320
  switch (coord) {
    
#line 1322
    case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
    case OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    return true;
    default:
    return false;
  }
}


#line 1331
- (id<OrgBouncycastleMathEcECMultiplier>)createDefaultMultiplier {
  
#line 1334
  if ([self isKoblitz]) {
    
#line 1336
    return new_OrgBouncycastleMathEcWTauNafMultiplier_init();
  }
  
#line 1339
  return OrgBouncycastleMathEcECCurve_createDefaultMultiplier(self);
}


#line 1342
- (jint)getFieldSize {
  
#line 1345
  return m_;
}

- (OrgBouncycastleMathEcECFieldElement *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  
#line 1351
  return new_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_(self->m_, self->k1_, self->k2_, self->k3_, x);
}

- (OrgBouncycastleMathEcECPoint *)createRawPointWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  
#line 1357
  return new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(self, x, y);
}


#line 1360
- (OrgBouncycastleMathEcECPoint *)createRawPointWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y
                                           withOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs {
  return new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(self, x, y, zs);
}

- (OrgBouncycastleMathEcECPoint *)getInfinity {
  
#line 1369
  return infinity_;
}

- (jint)getM {
  
#line 1374
  return m_;
}


#line 1382
- (jboolean)isTrinomial {
  
#line 1384
  return k2_ == 0 && k3_ == 0;
}


#line 1387
- (jint)getK1 {
  
#line 1389
  return k1_;
}


#line 1392
- (jint)getK2 {
  
#line 1394
  return k2_;
}


#line 1397
- (jint)getK3 {
  
#line 1399
  return k3_;
}


#line 1402
- (id<OrgBouncycastleMathEcECLookupTable>)createCacheSafeLookupTableWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points
                                                                                                  withInt:(jint)off
                                                                                                  withInt:(jint)len {
  jint FE_LONGS = JreURShift32((m_ + 63), 6);
  IOSIntArray *ks = [self isTrinomial] ? [IOSIntArray newArrayWithInts:(jint[]){ k1_ } count:1] : [IOSIntArray newArrayWithInts:(jint[]){ k1_, k2_, k3_ } count:3];
  
#line 1408
  IOSLongArray *table = [IOSLongArray newArrayWithLength:len * FE_LONGS * 2];
  {
    jint pos = 0;
    for (jint i = 0; i < len; ++i) {
      
#line 1413
      OrgBouncycastleMathEcECPoint *p = IOSObjectArray_Get(nil_chk(points), off + i);
      [((OrgBouncycastleMathEcLongArray *) nil_chk(((OrgBouncycastleMathEcECFieldElement_F2m *) nil_chk(((OrgBouncycastleMathEcECFieldElement_F2m *) cast_chk([((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getRawXCoord], [OrgBouncycastleMathEcECFieldElement_F2m class]))))->x_)) copyToWithLongArray:table withInt:pos];
      
#line 1414
      pos += FE_LONGS;
      [((OrgBouncycastleMathEcLongArray *) nil_chk(((OrgBouncycastleMathEcECFieldElement_F2m *) nil_chk(((OrgBouncycastleMathEcECFieldElement_F2m *) cast_chk([p getRawYCoord], [OrgBouncycastleMathEcECFieldElement_F2m class]))))->x_)) copyToWithLongArray:table withInt:pos];
      
#line 1415
      pos += FE_LONGS;
    }
  }
  
#line 1419
  return new_OrgBouncycastleMathEcECCurve_F2m_1_initWithOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_(self, len, FE_LONGS, table, ks);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, 1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, 4, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 6, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECCurve;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECMultiplier;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x4, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x4, 11, 13, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECLookupTable;", 0x1, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[1].selector = @selector(initWithInt:withInt:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[2].selector = @selector(initWithInt:withInt:withInt:withInt:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[3].selector = @selector(initWithInt:withInt:withInt:withInt:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[4].selector = @selector(initWithInt:withInt:withInt:withInt:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[5].selector = @selector(cloneCurve);
  methods[6].selector = @selector(supportsCoordinateSystemWithInt:);
  methods[7].selector = @selector(createDefaultMultiplier);
  methods[8].selector = @selector(getFieldSize);
  methods[9].selector = @selector(fromBigIntegerWithJavaMathBigInteger:);
  methods[10].selector = @selector(createRawPointWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[11].selector = @selector(createRawPointWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElementArray:);
  methods[12].selector = @selector(getInfinity);
  methods[13].selector = @selector(getM);
  methods[14].selector = @selector(isTrinomial);
  methods[15].selector = @selector(getK1);
  methods[16].selector = @selector(getK2);
  methods[17].selector = @selector(getK3);
  methods[18].selector = @selector(createCacheSafeLookupTableWithOrgBouncycastleMathEcECPointArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "F2M_DEFAULT_COORDS", "I", .constantValue.asInt = OrgBouncycastleMathEcECCurve_F2m_F2M_DEFAULT_COORDS, 0x1a, -1, -1, -1, -1 },
    { "m_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k1_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k2_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k3_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "infinity_", "LOrgBouncycastleMathEcECPoint_F2m;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IILJavaMathBigInteger;LJavaMathBigInteger;", (void *)&OrgBouncycastleMathEcECCurve_F2m__Annotations$0, "IILJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "IIIILJavaMathBigInteger;LJavaMathBigInteger;", (void *)&OrgBouncycastleMathEcECCurve_F2m__Annotations$1, "IIIILJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "IIIILOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;LJavaMathBigInteger;LJavaMathBigInteger;", "supportsCoordinateSystem", "I", "fromBigInteger", "LJavaMathBigInteger;", "createRawPoint", "LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;", "LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;[LOrgBouncycastleMathEcECFieldElement;", "createCacheSafeLookupTable", "[LOrgBouncycastleMathEcECPoint;II", "LOrgBouncycastleMathEcECCurve;" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECCurve_F2m = { "F2m", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x9, 19, 6, 16, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcECCurve_F2m;
}

@end


#line 1175
void OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve_F2m *self, jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self,
#line 1182
  m, k, 0, 0, a, b, nil, nil);
}


#line 1175
OrgBouncycastleMathEcECCurve_F2m *new_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_, m, k, a, b)
}


#line 1175
OrgBouncycastleMathEcECCurve_F2m *create_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_, m, k, a, b)
}


#line 1202
void OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve_F2m *self, jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self,
#line 1210
  m, k, 0, 0, a, b, order, cofactor);
}


#line 1202
OrgBouncycastleMathEcECCurve_F2m *new_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, m, k, a, b, order, cofactor)
}


#line 1202
OrgBouncycastleMathEcECCurve_F2m *create_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, m, k, a, b, order, cofactor)
}


#line 1234
void OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve_F2m *self, jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self,
#line 1243
  m, k1, k2, k3, a, b, nil, nil);
}


#line 1234
OrgBouncycastleMathEcECCurve_F2m *new_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_, m, k1, k2, k3, a, b)
}


#line 1234
OrgBouncycastleMathEcECCurve_F2m *create_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_, m, k1, k2, k3, a, b)
}


#line 1269
void OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve_F2m *self, jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  OrgBouncycastleMathEcECCurve_AbstractF2m_initWithInt_withInt_withInt_withInt_(self,
#line 1279
  m, k1, k2, k3);
  
#line 1281
  self->m_ = m;
  self->k1_ = k1;
  self->k2_ = k2;
  self->k3_ = k3;
  self->order_ = order;
  self->cofactor_ = cofactor;
  
#line 1288
  self->infinity_ = new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(self, nil, nil);
  self->a_ = [self fromBigIntegerWithJavaMathBigInteger:a];
  self->b_ = [self fromBigIntegerWithJavaMathBigInteger:b];
  self->coord_ = OrgBouncycastleMathEcECCurve_F2m_F2M_DEFAULT_COORDS;
}


#line 1269
OrgBouncycastleMathEcECCurve_F2m *new_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, m, k1, k2, k3, a, b, order, cofactor)
}


#line 1269
OrgBouncycastleMathEcECCurve_F2m *create_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, m, k1, k2, k3, a, b, order, cofactor)
}


#line 1294
void OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve_F2m *self, jint m, jint k1, jint k2, jint k3, OrgBouncycastleMathEcECFieldElement *a, OrgBouncycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  OrgBouncycastleMathEcECCurve_AbstractF2m_initWithInt_withInt_withInt_withInt_(self,
#line 1296
  m, k1, k2, k3);
  
#line 1298
  self->m_ = m;
  self->k1_ = k1;
  self->k2_ = k2;
  self->k3_ = k3;
  self->order_ = order;
  self->cofactor_ = cofactor;
  
#line 1305
  self->infinity_ = new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(self, nil, nil);
  self->a_ = a;
  self->b_ = b;
  self->coord_ = OrgBouncycastleMathEcECCurve_F2m_F2M_DEFAULT_COORDS;
}


#line 1294
OrgBouncycastleMathEcECCurve_F2m *new_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, OrgBouncycastleMathEcECFieldElement *a, OrgBouncycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withInt_withInt_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_, m, k1, k2, k3, a, b, order, cofactor)
}


#line 1294
OrgBouncycastleMathEcECCurve_F2m *create_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, OrgBouncycastleMathEcECFieldElement *a, OrgBouncycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECCurve_F2m, initWithInt_withInt_withInt_withInt_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_, m, k1, k2, k3, a, b, order, cofactor)
}

IOSObjectArray *OrgBouncycastleMathEcECCurve_F2m__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgBouncycastleMathEcECCurve_F2m__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECCurve_F2m)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECCurve.java"


#line 1420
@implementation OrgBouncycastleMathEcECCurve_F2m_1


#line 1420
- (instancetype)initWithOrgBouncycastleMathEcECCurve_F2m:(OrgBouncycastleMathEcECCurve_F2m *)outer$
                                                 withInt:(jint)capture$0
                                                 withInt:(jint)capture$1
                                           withLongArray:(IOSLongArray *)capture$2
                                            withIntArray:(IOSIntArray *)capture$3 {
  OrgBouncycastleMathEcECCurve_F2m_1_initWithOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_(self, outer$, capture$0, capture$1, capture$2, capture$3);
  return self;
}


#line 1421
- (jint)getSize {
  
#line 1424
  return val$len_;
}

- (OrgBouncycastleMathEcECPoint *)lookupWithInt:(jint)index {
  
#line 1430
  IOSLongArray *x = OrgBouncycastleMathRawNat_create64WithInt_(val$FE_LONGS_);
  
#line 1430
  IOSLongArray *y = OrgBouncycastleMathRawNat_create64WithInt_(val$FE_LONGS_);
  jint pos = 0;
  
#line 1433
  for (jint i = 0; i < val$len_; ++i) {
    
#line 1435
    jlong MASK = JreRShift32(((i ^ index) - 1), 31);
    
#line 1437
    for (jint j = 0; j < val$FE_LONGS_; ++j) {
      
#line 1439
      *IOSLongArray_GetRef(nil_chk(x), j) ^= IOSLongArray_Get(nil_chk(val$table_), pos + j) & MASK;
      *IOSLongArray_GetRef(nil_chk(y), j) ^= IOSLongArray_Get(val$table_, pos + val$FE_LONGS_ + j) & MASK;
    }
    
#line 1443
    pos += (val$FE_LONGS_ * 2);
  }
  
#line 1446
  return OrgBouncycastleMathEcECCurve_F2m_1_createPointWithLongArray_withLongArray_(self, x, y);
}


#line 1449
- (OrgBouncycastleMathEcECPoint *)lookupVarWithInt:(jint)index {
  
#line 1452
  IOSLongArray *x = OrgBouncycastleMathRawNat_create64WithInt_(val$FE_LONGS_);
  
#line 1452
  IOSLongArray *y = OrgBouncycastleMathRawNat_create64WithInt_(val$FE_LONGS_);
  jint pos = index * val$FE_LONGS_ * 2;
  
#line 1455
  for (jint j = 0; j < val$FE_LONGS_; ++j) {
    
#line 1457
    *IOSLongArray_GetRef(nil_chk(x), j) = IOSLongArray_Get(nil_chk(val$table_), pos + j);
    *IOSLongArray_GetRef(nil_chk(y), j) = IOSLongArray_Get(val$table_, pos + val$FE_LONGS_ + j);
  }
  
#line 1461
  return OrgBouncycastleMathEcECCurve_F2m_1_createPointWithLongArray_withLongArray_(self, x, y);
}


#line 1464
- (OrgBouncycastleMathEcECPoint *)createPointWithLongArray:(IOSLongArray *)x
                                             withLongArray:(IOSLongArray *)y {
  return OrgBouncycastleMathEcECCurve_F2m_1_createPointWithLongArray_withLongArray_(self, x, y);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x2, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleMathEcECCurve_F2m:withInt:withInt:withLongArray:withIntArray:);
  methods[1].selector = @selector(getSize);
  methods[2].selector = @selector(lookupWithInt:);
  methods[3].selector = @selector(lookupVarWithInt:);
  methods[4].selector = @selector(createPointWithLongArray:withLongArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgBouncycastleMathEcECCurve_F2m;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$len_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$FE_LONGS_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$table_", "[J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$ks_", "[I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleMathEcECCurve_F2m;II[J[I", "lookup", "I", "lookupVar", "createPoint", "[J[J", "LOrgBouncycastleMathEcECCurve_F2m;", "createCacheSafeLookupTableWithOrgBouncycastleMathEcECPointArray:withInt:withInt:" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECCurve_F2m_1 = { "", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x8000, 5, 5, 6, -1, 7, -1, -1 };
  return &_OrgBouncycastleMathEcECCurve_F2m_1;
}

@end


#line 1420
void OrgBouncycastleMathEcECCurve_F2m_1_initWithOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_(OrgBouncycastleMathEcECCurve_F2m_1 *self, OrgBouncycastleMathEcECCurve_F2m *outer$, jint capture$0, jint capture$1, IOSLongArray *capture$2, IOSIntArray *capture$3) {
  self->this$0_ = outer$;
  self->val$len_ = capture$0;
  self->val$FE_LONGS_ = capture$1;
  self->val$table_ = capture$2;
  self->val$ks_ = capture$3;
  OrgBouncycastleMathEcAbstractECLookupTable_init(self);
}


#line 1420
OrgBouncycastleMathEcECCurve_F2m_1 *new_OrgBouncycastleMathEcECCurve_F2m_1_initWithOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_(OrgBouncycastleMathEcECCurve_F2m *outer$, jint capture$0, jint capture$1, IOSLongArray *capture$2, IOSIntArray *capture$3) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECCurve_F2m_1, initWithOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_, outer$, capture$0, capture$1, capture$2, capture$3)
}


#line 1420
OrgBouncycastleMathEcECCurve_F2m_1 *create_OrgBouncycastleMathEcECCurve_F2m_1_initWithOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_(OrgBouncycastleMathEcECCurve_F2m *outer$, jint capture$0, jint capture$1, IOSLongArray *capture$2, IOSIntArray *capture$3) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECCurve_F2m_1, initWithOrgBouncycastleMathEcECCurve_F2m_withInt_withInt_withLongArray_withIntArray_, outer$, capture$0, capture$1, capture$2, capture$3)
}


#line 1464
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECCurve_F2m_1_createPointWithLongArray_withLongArray_(OrgBouncycastleMathEcECCurve_F2m_1 *self, IOSLongArray *x, IOSLongArray *y) {
  
#line 1466
  OrgBouncycastleMathEcECFieldElement_F2m *X = new_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_(self->this$0_->m_, self->val$ks_, new_OrgBouncycastleMathEcLongArray_initPackagePrivateWithLongArray_(x));
  OrgBouncycastleMathEcECFieldElement_F2m *Y = new_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_(self->this$0_->m_, self->val$ks_, new_OrgBouncycastleMathEcLongArray_initPackagePrivateWithLongArray_(y));
  return [self->this$0_ createRawPointWithOrgBouncycastleMathEcECFieldElement:X withOrgBouncycastleMathEcECFieldElement:Y];
}
