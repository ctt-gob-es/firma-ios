//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/WNafUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/math/ec/ECAlgorithms.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECFieldElement.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/ECPointMap.h"
#include "org/bouncycastle/math/ec/PreCompCallback.h"
#include "org/bouncycastle/math/ec/PreCompInfo.h"
#include "org/bouncycastle/math/ec/WNafPreCompInfo.h"
#include "org/bouncycastle/math/ec/WNafUtil.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/math/ec/WNafUtil must be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgBouncycastleMathEcWNafUtil ()

+ (IOSByteArray *)trimWithByteArray:(IOSByteArray *)a
                            withInt:(jint)length;

+ (IOSIntArray *)trimWithIntArray:(IOSIntArray *)a
                          withInt:(jint)length;

@end

inline IOSIntArray *OrgBouncycastleMathEcWNafUtil_get_DEFAULT_WINDOW_SIZE_CUTOFFS(void);
static IOSIntArray *OrgBouncycastleMathEcWNafUtil_DEFAULT_WINDOW_SIZE_CUTOFFS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleMathEcWNafUtil, DEFAULT_WINDOW_SIZE_CUTOFFS, IOSIntArray *)

inline jint OrgBouncycastleMathEcWNafUtil_get_MAX_WIDTH(void);
#define OrgBouncycastleMathEcWNafUtil_MAX_WIDTH 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleMathEcWNafUtil, MAX_WIDTH, jint)

inline IOSByteArray *OrgBouncycastleMathEcWNafUtil_get_EMPTY_BYTES(void);
static IOSByteArray *OrgBouncycastleMathEcWNafUtil_EMPTY_BYTES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleMathEcWNafUtil, EMPTY_BYTES, IOSByteArray *)

inline IOSIntArray *OrgBouncycastleMathEcWNafUtil_get_EMPTY_INTS(void);
static IOSIntArray *OrgBouncycastleMathEcWNafUtil_EMPTY_INTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleMathEcWNafUtil, EMPTY_INTS, IOSIntArray *)

inline IOSObjectArray *OrgBouncycastleMathEcWNafUtil_get_EMPTY_POINTS(void);
static IOSObjectArray *OrgBouncycastleMathEcWNafUtil_EMPTY_POINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleMathEcWNafUtil, EMPTY_POINTS, IOSObjectArray *)

__attribute__((unused)) static IOSByteArray *OrgBouncycastleMathEcWNafUtil_trimWithByteArray_withInt_(IOSByteArray *a, jint length);

__attribute__((unused)) static IOSIntArray *OrgBouncycastleMathEcWNafUtil_trimWithIntArray_withInt_(IOSIntArray *a, jint length);

@interface OrgBouncycastleMathEcWNafUtil_1 : NSObject < OrgBouncycastleMathEcPreCompCallback > {
 @public
  jint val$minWidth_;
  jboolean val$includeNegated_;
  OrgBouncycastleMathEcECPoint *val$p_;
  OrgBouncycastleMathEcECCurve *val$c_;
}

- (instancetype)initWithInt:(jint)capture$0
                withBoolean:(jboolean)capture$1
withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)capture$2
withOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)capture$3;

- (id<OrgBouncycastleMathEcPreCompInfo>)precomputeWithOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)existing;

- (jboolean)checkExistingWithOrgBouncycastleMathEcWNafPreCompInfo:(OrgBouncycastleMathEcWNafPreCompInfo *)existingWNaf
                                                          withInt:(jint)width
                                                          withInt:(jint)reqPreCompLen
                                                      withBoolean:(jboolean)includeNegated;

- (jboolean)checkTableWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)table
                                                    withInt:(jint)reqLen;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcWNafUtil_1)

__attribute__((unused)) static void OrgBouncycastleMathEcWNafUtil_1_initWithInt_withBoolean_withOrgBouncycastleMathEcECPoint_withOrgBouncycastleMathEcECCurve_(OrgBouncycastleMathEcWNafUtil_1 *self, jint capture$0, jboolean capture$1, OrgBouncycastleMathEcECPoint *capture$2, OrgBouncycastleMathEcECCurve *capture$3);

__attribute__((unused)) static OrgBouncycastleMathEcWNafUtil_1 *new_OrgBouncycastleMathEcWNafUtil_1_initWithInt_withBoolean_withOrgBouncycastleMathEcECPoint_withOrgBouncycastleMathEcECCurve_(jint capture$0, jboolean capture$1, OrgBouncycastleMathEcECPoint *capture$2, OrgBouncycastleMathEcECCurve *capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleMathEcWNafUtil_1 *create_OrgBouncycastleMathEcWNafUtil_1_initWithInt_withBoolean_withOrgBouncycastleMathEcECPoint_withOrgBouncycastleMathEcECCurve_(jint capture$0, jboolean capture$1, OrgBouncycastleMathEcECPoint *capture$2, OrgBouncycastleMathEcECCurve *capture$3);

__attribute__((unused)) static jboolean OrgBouncycastleMathEcWNafUtil_1_checkExistingWithOrgBouncycastleMathEcWNafPreCompInfo_withInt_withInt_withBoolean_(OrgBouncycastleMathEcWNafUtil_1 *self, OrgBouncycastleMathEcWNafPreCompInfo *existingWNaf, jint width, jint reqPreCompLen, jboolean includeNegated);

__attribute__((unused)) static jboolean OrgBouncycastleMathEcWNafUtil_1_checkTableWithOrgBouncycastleMathEcECPointArray_withInt_(OrgBouncycastleMathEcWNafUtil_1 *self, IOSObjectArray *table, jint reqLen);

@interface OrgBouncycastleMathEcWNafUtil_2 : NSObject < OrgBouncycastleMathEcPreCompCallback > {
 @public
  OrgBouncycastleMathEcWNafPreCompInfo *val$fromWNaf_;
  jboolean val$includeNegated_;
  id<OrgBouncycastleMathEcECPointMap> val$pointMap_;
}

- (instancetype)initWithOrgBouncycastleMathEcWNafPreCompInfo:(OrgBouncycastleMathEcWNafPreCompInfo *)capture$0
                                                 withBoolean:(jboolean)capture$1
                         withOrgBouncycastleMathEcECPointMap:(id<OrgBouncycastleMathEcECPointMap>)capture$2;

- (id<OrgBouncycastleMathEcPreCompInfo>)precomputeWithOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)existing;

- (jboolean)checkExistingWithOrgBouncycastleMathEcWNafPreCompInfo:(OrgBouncycastleMathEcWNafPreCompInfo *)existingWNaf
                                                          withInt:(jint)width
                                                          withInt:(jint)reqPreCompLen
                                                      withBoolean:(jboolean)includeNegated;

- (jboolean)checkTableWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)table
                                                    withInt:(jint)reqLen;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcWNafUtil_2)

__attribute__((unused)) static void OrgBouncycastleMathEcWNafUtil_2_initWithOrgBouncycastleMathEcWNafPreCompInfo_withBoolean_withOrgBouncycastleMathEcECPointMap_(OrgBouncycastleMathEcWNafUtil_2 *self, OrgBouncycastleMathEcWNafPreCompInfo *capture$0, jboolean capture$1, id<OrgBouncycastleMathEcECPointMap> capture$2);

__attribute__((unused)) static OrgBouncycastleMathEcWNafUtil_2 *new_OrgBouncycastleMathEcWNafUtil_2_initWithOrgBouncycastleMathEcWNafPreCompInfo_withBoolean_withOrgBouncycastleMathEcECPointMap_(OrgBouncycastleMathEcWNafPreCompInfo *capture$0, jboolean capture$1, id<OrgBouncycastleMathEcECPointMap> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleMathEcWNafUtil_2 *create_OrgBouncycastleMathEcWNafUtil_2_initWithOrgBouncycastleMathEcWNafPreCompInfo_withBoolean_withOrgBouncycastleMathEcECPointMap_(OrgBouncycastleMathEcWNafPreCompInfo *capture$0, jboolean capture$1, id<OrgBouncycastleMathEcECPointMap> capture$2);

__attribute__((unused)) static jboolean OrgBouncycastleMathEcWNafUtil_2_checkExistingWithOrgBouncycastleMathEcWNafPreCompInfo_withInt_withInt_withBoolean_(OrgBouncycastleMathEcWNafUtil_2 *self, OrgBouncycastleMathEcWNafPreCompInfo *existingWNaf, jint width, jint reqPreCompLen, jboolean includeNegated);

__attribute__((unused)) static jboolean OrgBouncycastleMathEcWNafUtil_2_checkTableWithOrgBouncycastleMathEcECPointArray_withInt_(OrgBouncycastleMathEcWNafUtil_2 *self, IOSObjectArray *table, jint reqLen);

@interface OrgBouncycastleMathEcWNafUtil_$Lambda$1 : NSObject < OrgBouncycastleMathEcPreCompCallback > {
 @public
  jint val$confWidth_;
}

- (id<OrgBouncycastleMathEcPreCompInfo>)precomputeWithOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)existing;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcWNafUtil_$Lambda$1)

__attribute__((unused)) static void OrgBouncycastleMathEcWNafUtil_$Lambda$1_initWithInt_(OrgBouncycastleMathEcWNafUtil_$Lambda$1 *self, jint capture$0);

__attribute__((unused)) static OrgBouncycastleMathEcWNafUtil_$Lambda$1 *new_OrgBouncycastleMathEcWNafUtil_$Lambda$1_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleMathEcWNafUtil_$Lambda$1 *create_OrgBouncycastleMathEcWNafUtil_$Lambda$1_initWithInt_(jint capture$0);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/WNafUtil.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleMathEcWNafUtil)

NSString *OrgBouncycastleMathEcWNafUtil_PRECOMP_NAME = @"bc_wnaf";


#line 5
@implementation OrgBouncycastleMathEcWNafUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 5
- (instancetype)init {
  OrgBouncycastleMathEcWNafUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 16
+ (void)configureBasepointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p {
  OrgBouncycastleMathEcWNafUtil_configureBasepointWithOrgBouncycastleMathEcECPoint_(p);
}


#line 50
+ (IOSIntArray *)generateCompactNafWithJavaMathBigInteger:(JavaMathBigInteger *)k {
  return OrgBouncycastleMathEcWNafUtil_generateCompactNafWithJavaMathBigInteger_(k);
}


#line 88
+ (IOSIntArray *)generateCompactWindowNafWithInt:(jint)width
                          withJavaMathBigInteger:(JavaMathBigInteger *)k {
  return OrgBouncycastleMathEcWNafUtil_generateCompactWindowNafWithInt_withJavaMathBigInteger_(width, k);
}


#line 146
+ (IOSByteArray *)generateJSFWithJavaMathBigInteger:(JavaMathBigInteger *)g
                             withJavaMathBigInteger:(JavaMathBigInteger *)h {
  return OrgBouncycastleMathEcWNafUtil_generateJSFWithJavaMathBigInteger_withJavaMathBigInteger_(g, h);
}


#line 207
+ (IOSByteArray *)generateNafWithJavaMathBigInteger:(JavaMathBigInteger *)k {
  return OrgBouncycastleMathEcWNafUtil_generateNafWithJavaMathBigInteger_(k);
}


#line 247
+ (IOSByteArray *)generateWindowNafWithInt:(jint)width
                    withJavaMathBigInteger:(JavaMathBigInteger *)k {
  return OrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(width, k);
}


#line 309
+ (jint)getNafWeightWithJavaMathBigInteger:(JavaMathBigInteger *)k {
  return OrgBouncycastleMathEcWNafUtil_getNafWeightWithJavaMathBigInteger_(k);
}


#line 322
+ (OrgBouncycastleMathEcWNafPreCompInfo *)getWNafPreCompInfoWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p {
  return OrgBouncycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgBouncycastleMathEcECPoint_(p);
}


#line 327
+ (OrgBouncycastleMathEcWNafPreCompInfo *)getWNafPreCompInfoWithOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)preCompInfo {
  return OrgBouncycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgBouncycastleMathEcPreCompInfo_(preCompInfo);
}


#line 338
+ (jint)getWindowSizeWithInt:(jint)bits {
  return OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_(bits);
}


#line 350
+ (jint)getWindowSizeWithInt:(jint)bits
                     withInt:(jint)maxWidth {
  return OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withInt_(bits, maxWidth);
}


#line 362
+ (jint)getWindowSizeWithInt:(jint)bits
                withIntArray:(IOSIntArray *)windowSizeCutoffs {
  return OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withIntArray_(bits, windowSizeCutoffs);
}


#line 375
+ (jint)getWindowSizeWithInt:(jint)bits
                withIntArray:(IOSIntArray *)windowSizeCutoffs
                     withInt:(jint)maxWidth {
  return OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withIntArray_withInt_(bits, windowSizeCutoffs, maxWidth);
}


#line 389
+ (OrgBouncycastleMathEcWNafPreCompInfo *)precomputeWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p
                                                                             withInt:(jint)minWidth
                                                                         withBoolean:(jboolean)includeNegated {
  return OrgBouncycastleMathEcWNafUtil_precomputeWithOrgBouncycastleMathEcECPoint_withInt_withBoolean_(p, minWidth, includeNegated);
}


#line 569
+ (OrgBouncycastleMathEcWNafPreCompInfo *)precomputeWithPointMapWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p
                                                             withOrgBouncycastleMathEcECPointMap:(id<OrgBouncycastleMathEcECPointMap>)pointMap
                                                        withOrgBouncycastleMathEcWNafPreCompInfo:(OrgBouncycastleMathEcWNafPreCompInfo *)fromWNaf
                                                                                     withBoolean:(jboolean)includeNegated {
  return OrgBouncycastleMathEcWNafUtil_precomputeWithPointMapWithOrgBouncycastleMathEcECPoint_withOrgBouncycastleMathEcECPointMap_withOrgBouncycastleMathEcWNafPreCompInfo_withBoolean_(p, pointMap, fromWNaf, includeNegated);
}


#line 642
+ (IOSByteArray *)trimWithByteArray:(IOSByteArray *)a
                            withInt:(jint)length {
  return OrgBouncycastleMathEcWNafUtil_trimWithByteArray_withInt_(a, length);
}


#line 649
+ (IOSIntArray *)trimWithIntArray:(IOSIntArray *)a
                          withInt:(jint)length {
  return OrgBouncycastleMathEcWNafUtil_trimWithIntArray_withInt_(a, length);
}


#line 656
+ (IOSObjectArray *)resizeTableWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)a
                                                             withInt:(jint)length {
  return OrgBouncycastleMathEcWNafUtil_resizeTableWithOrgBouncycastleMathEcECPointArray_withInt_(a, length);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 8, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 9, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 10, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcWNafPreCompInfo;", 0x9, 11, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcWNafPreCompInfo;", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 13, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 13, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 13, 17, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcWNafPreCompInfo;", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcWNafPreCompInfo;", 0x9, 20, 21, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 22, 23, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, 22, 24, -1, -1, -1, -1 },
    { NULL, "[LOrgBouncycastleMathEcECPoint;", 0x8, 25, 26, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureBasepointWithOrgBouncycastleMathEcECPoint:);
  methods[2].selector = @selector(generateCompactNafWithJavaMathBigInteger:);
  methods[3].selector = @selector(generateCompactWindowNafWithInt:withJavaMathBigInteger:);
  methods[4].selector = @selector(generateJSFWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[5].selector = @selector(generateNafWithJavaMathBigInteger:);
  methods[6].selector = @selector(generateWindowNafWithInt:withJavaMathBigInteger:);
  methods[7].selector = @selector(getNafWeightWithJavaMathBigInteger:);
  methods[8].selector = @selector(getWNafPreCompInfoWithOrgBouncycastleMathEcECPoint:);
  methods[9].selector = @selector(getWNafPreCompInfoWithOrgBouncycastleMathEcPreCompInfo:);
  methods[10].selector = @selector(getWindowSizeWithInt:);
  methods[11].selector = @selector(getWindowSizeWithInt:withInt:);
  methods[12].selector = @selector(getWindowSizeWithInt:withIntArray:);
  methods[13].selector = @selector(getWindowSizeWithInt:withIntArray:withInt:);
  methods[14].selector = @selector(precomputeWithOrgBouncycastleMathEcECPoint:withInt:withBoolean:);
  methods[15].selector = @selector(precomputeWithPointMapWithOrgBouncycastleMathEcECPoint:withOrgBouncycastleMathEcECPointMap:withOrgBouncycastleMathEcWNafPreCompInfo:withBoolean:);
  methods[16].selector = @selector(trimWithByteArray:withInt:);
  methods[17].selector = @selector(trimWithIntArray:withInt:);
  methods[18].selector = @selector(resizeTableWithOrgBouncycastleMathEcECPointArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PRECOMP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "DEFAULT_WINDOW_SIZE_CUTOFFS", "[I", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "MAX_WIDTH", "I", .constantValue.asInt = OrgBouncycastleMathEcWNafUtil_MAX_WIDTH, 0x1a, -1, -1, -1, -1 },
    { "EMPTY_BYTES", "[B", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "EMPTY_INTS", "[I", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "EMPTY_POINTS", "[LOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
  };
  static const void *ptrTable[] = { "configureBasepoint", "LOrgBouncycastleMathEcECPoint;", "generateCompactNaf", "LJavaMathBigInteger;", "generateCompactWindowNaf", "ILJavaMathBigInteger;", "generateJSF", "LJavaMathBigInteger;LJavaMathBigInteger;", "generateNaf", "generateWindowNaf", "getNafWeight", "getWNafPreCompInfo", "LOrgBouncycastleMathEcPreCompInfo;", "getWindowSize", "I", "II", "I[I", "I[II", "precompute", "LOrgBouncycastleMathEcECPoint;IZ", "precomputeWithPointMap", "LOrgBouncycastleMathEcECPoint;LOrgBouncycastleMathEcECPointMap;LOrgBouncycastleMathEcWNafPreCompInfo;Z", "trim", "[BI", "[II", "resizeTable", "[LOrgBouncycastleMathEcECPoint;I", &OrgBouncycastleMathEcWNafUtil_PRECOMP_NAME, &OrgBouncycastleMathEcWNafUtil_DEFAULT_WINDOW_SIZE_CUTOFFS, &OrgBouncycastleMathEcWNafUtil_EMPTY_BYTES, &OrgBouncycastleMathEcWNafUtil_EMPTY_INTS, &OrgBouncycastleMathEcWNafUtil_EMPTY_POINTS };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcWNafUtil = { "WNafUtil", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x401, 19, 6, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcWNafUtil;
}

+ (void)initialize {
  if (self == [OrgBouncycastleMathEcWNafUtil class]) {
    OrgBouncycastleMathEcWNafUtil_DEFAULT_WINDOW_SIZE_CUTOFFS = [IOSIntArray newArrayWithInts:(jint[]){
#line 9
      13, 41, 121, 337, 897, 2305 } count:6];
      OrgBouncycastleMathEcWNafUtil_EMPTY_BYTES = [IOSByteArray newArrayWithBytes:(jbyte[]){  } count:0];
      OrgBouncycastleMathEcWNafUtil_EMPTY_INTS = [IOSIntArray newArrayWithInts:(jint[]){  } count:0];
      OrgBouncycastleMathEcWNafUtil_EMPTY_POINTS = [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:OrgBouncycastleMathEcECPoint_class_()];
      J2OBJC_SET_INITIALIZED(OrgBouncycastleMathEcWNafUtil)
    }
  }

@end


#line 5
void OrgBouncycastleMathEcWNafUtil_init(OrgBouncycastleMathEcWNafUtil *self) {
  NSObject_init(self);
}


#line 16
void OrgBouncycastleMathEcWNafUtil_configureBasepointWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECPoint *p) {
  OrgBouncycastleMathEcWNafUtil_initialize();
  
#line 17
  OrgBouncycastleMathEcECCurve *c = [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  if (nil == c) {
    return;
  }
  
#line 22
  JavaMathBigInteger *n = [c getOrder];
  jint bits = nil == n ? [c getFieldSize] + 1 : [n bitLength];
  jint confWidth = JavaLangMath_minWithInt_withInt_(OrgBouncycastleMathEcWNafUtil_MAX_WIDTH, OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_(bits) + 3);
  
#line 26
  (void) [c precomputeWithOrgBouncycastleMathEcECPoint:p withNSString:OrgBouncycastleMathEcWNafUtil_PRECOMP_NAME withOrgBouncycastleMathEcPreCompCallback:new_OrgBouncycastleMathEcWNafUtil_$Lambda$1_initWithInt_(confWidth)];
}


#line 50
IOSIntArray *OrgBouncycastleMathEcWNafUtil_generateCompactNafWithJavaMathBigInteger_(JavaMathBigInteger *k) {
  OrgBouncycastleMathEcWNafUtil_initialize();
  
#line 51
  if (JreURShift32([((JavaMathBigInteger *) nil_chk(k)) bitLength], 16) != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'k' must have bitlength < 2^16");
  }
  if ([k signum] == 0) {
    return OrgBouncycastleMathEcWNafUtil_EMPTY_INTS;
  }
  
#line 58
  JavaMathBigInteger *_3k = [((JavaMathBigInteger *) nil_chk([k shiftLeftWithInt:1])) addWithJavaMathBigInteger:k];
  
#line 60
  jint bits = [((JavaMathBigInteger *) nil_chk(_3k)) bitLength];
  IOSIntArray *naf = [IOSIntArray newArrayWithLength:JreRShift32(bits, 1)];
  
#line 63
  JavaMathBigInteger *diff = [_3k xor__WithJavaMathBigInteger:k];
  
#line 65
  jint highBit = bits - 1;
  jint length = 0;
  
#line 66
  jint zeroes = 0;
  for (jint i = 1; i < highBit; ++i) {
    if (![((JavaMathBigInteger *) nil_chk(diff)) testBitWithInt:i]) {
      ++zeroes;
      continue;
    }
    
#line 73
    jint digit = [k testBitWithInt:i] ? -1 : 1;
    *IOSIntArray_GetRef(naf, length++) = (JreLShift32(digit, 16)) | zeroes;
    zeroes = 1;
    ++i;
  }
  
#line 79
  *IOSIntArray_GetRef(naf, length++) = (JreLShift32(1, 16)) | zeroes;
  
#line 81
  if (naf->size_ > length) {
    naf = OrgBouncycastleMathEcWNafUtil_trimWithIntArray_withInt_(naf, length);
  }
  
#line 85
  return naf;
}


#line 88
IOSIntArray *OrgBouncycastleMathEcWNafUtil_generateCompactWindowNafWithInt_withJavaMathBigInteger_(jint width, JavaMathBigInteger *k) {
  OrgBouncycastleMathEcWNafUtil_initialize();
  
#line 89
  if (width == 2) {
    return OrgBouncycastleMathEcWNafUtil_generateCompactNafWithJavaMathBigInteger_(k);
  }
  
#line 93
  if (width < 2 || width > 16) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'width' must be in the range [2, 16]");
  }
  if (JreURShift32([((JavaMathBigInteger *) nil_chk(k)) bitLength], 16) != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'k' must have bitlength < 2^16");
  }
  if ([k signum] == 0) {
    return OrgBouncycastleMathEcWNafUtil_EMPTY_INTS;
  }
  
#line 103
  IOSIntArray *wnaf = [IOSIntArray newArrayWithLength:JreIntDiv([k bitLength], width) + 1];
  
#line 106
  jint pow2 = JreLShift32(1, width);
  jint mask = pow2 - 1;
  jint sign = JreURShift32(pow2, 1);
  
#line 110
  jboolean carry = false;
  jint length = 0;
  
#line 111
  jint pos = 0;
  
#line 113
  while (pos <= [k bitLength]) {
    if ([k testBitWithInt:pos] == carry) {
      ++pos;
      continue;
    }
    
#line 119
    k = [k shiftRightWithInt:pos];
    
#line 121
    jint digit = [((JavaMathBigInteger *) nil_chk(k)) intValue] & mask;
    if (carry) {
      ++digit;
    }
    
#line 126
    carry = ((digit & sign) != 0);
    if (carry) {
      
#line 129
      digit -= pow2;
    }
    
#line 132
    jint zeroes = length > 0 ? pos - 1 : pos;
    *IOSIntArray_GetRef(wnaf, length++) = (JreLShift32(digit, 16)) | zeroes;
    pos = width;
  }
  
#line 138
  if (wnaf->size_ > length) {
    
#line 140
    wnaf = OrgBouncycastleMathEcWNafUtil_trimWithIntArray_withInt_(wnaf, length);
  }
  
#line 143
  return wnaf;
}


#line 146
IOSByteArray *OrgBouncycastleMathEcWNafUtil_generateJSFWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *g, JavaMathBigInteger *h) {
  OrgBouncycastleMathEcWNafUtil_initialize();
  jint digits = JavaLangMath_maxWithInt_withInt_([((JavaMathBigInteger *) nil_chk(g)) bitLength], [((JavaMathBigInteger *) nil_chk(h)) bitLength]) + 1;
  IOSByteArray *jsf = [IOSByteArray newArrayWithLength:digits];
  
#line 151
  JavaMathBigInteger *k0 = g;
  
#line 151
  JavaMathBigInteger *k1 = h;
  jint j = 0;
  
#line 152
  jint d0 = 0;
  
#line 152
  jint d1 = 0;
  
#line 154
  jint offset = 0;
  while ((d0 | d1) != 0 || [((JavaMathBigInteger *) nil_chk(k0)) bitLength] > offset || [((JavaMathBigInteger *) nil_chk(k1)) bitLength] > offset) {
    
#line 157
    jint n0 = ((JreURShift32([((JavaMathBigInteger *) nil_chk(k0)) intValue], offset)) + d0) & 7;
    
#line 157
    jint n1 = ((JreURShift32([((JavaMathBigInteger *) nil_chk(k1)) intValue], offset)) + d1) & 7;
    
#line 159
    jint u0 = n0 & 1;
    if (u0 != 0) {
      
#line 162
      u0 -= n0 & 2;
      if (n0 + u0 == 4 && (n1 & 3) == 2) {
        
#line 165
        u0 = -u0;
      }
    }
    
#line 169
    jint u1 = n1 & 1;
    if (u1 != 0) {
      
#line 172
      u1 -= n1 & 2;
      if (n1 + u1 == 4 && (n0 & 3) == 2) {
        
#line 175
        u1 = -u1;
      }
    }
    
#line 179
    if (JreLShift32(d0, 1) == 1 + u0) {
      
#line 181
      d0 ^= 1;
    }
    if (JreLShift32(d1, 1) == 1 + u1) {
      
#line 185
      d1 ^= 1;
    }
    
#line 188
    if (++offset == 30) {
      
#line 190
      offset = 0;
      k0 = [k0 shiftRightWithInt:30];
      k1 = [k1 shiftRightWithInt:30];
    }
    
#line 195
    *IOSByteArray_GetRef(jsf, j++) = (jbyte) ((JreLShift32(u0, 4)) | (u1 & (jint) 0xF));
  }
  
#line 199
  if (jsf->size_ > j) {
    
#line 201
    jsf = OrgBouncycastleMathEcWNafUtil_trimWithByteArray_withInt_(jsf, j);
  }
  
#line 204
  return jsf;
}


#line 207
IOSByteArray *OrgBouncycastleMathEcWNafUtil_generateNafWithJavaMathBigInteger_(JavaMathBigInteger *k) {
  OrgBouncycastleMathEcWNafUtil_initialize();
  if ([((JavaMathBigInteger *) nil_chk(k)) signum] == 0) {
    
#line 211
    return OrgBouncycastleMathEcWNafUtil_EMPTY_BYTES;
  }
  
#line 214
  JavaMathBigInteger *_3k = [((JavaMathBigInteger *) nil_chk([k shiftLeftWithInt:1])) addWithJavaMathBigInteger:k];
  
#line 216
  jint digits = [((JavaMathBigInteger *) nil_chk(_3k)) bitLength] - 1;
  IOSByteArray *naf = [IOSByteArray newArrayWithLength:digits];
  
#line 219
  JavaMathBigInteger *diff = [_3k xor__WithJavaMathBigInteger:k];
  
#line 221
  for (jint i = 1; i < digits; ++i) {
    
#line 223
    if ([((JavaMathBigInteger *) nil_chk(diff)) testBitWithInt:i]) {
      
#line 225
      *IOSByteArray_GetRef(naf, i - 1) = (jbyte) ([k testBitWithInt:i] ? -1 : 1);
      ++i;
    }
  }
  
#line 230
  *IOSByteArray_GetRef(naf, digits - 1) = 1;
  
#line 232
  return naf;
}


#line 247
IOSByteArray *OrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(jint width, JavaMathBigInteger *k) {
  OrgBouncycastleMathEcWNafUtil_initialize();
  if (width == 2) {
    
#line 251
    return OrgBouncycastleMathEcWNafUtil_generateNafWithJavaMathBigInteger_(k);
  }
  
#line 254
  if (width < 2 || width > 8) {
    
#line 256
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'width' must be in the range [2, 8]");
  }
  if ([((JavaMathBigInteger *) nil_chk(k)) signum] == 0) {
    
#line 260
    return OrgBouncycastleMathEcWNafUtil_EMPTY_BYTES;
  }
  
#line 263
  IOSByteArray *wnaf = [IOSByteArray newArrayWithLength:[k bitLength] + 1];
  
#line 266
  jint pow2 = JreLShift32(1, width);
  jint mask = pow2 - 1;
  jint sign = JreURShift32(pow2, 1);
  
#line 270
  jboolean carry = false;
  jint length = 0;
  
#line 271
  jint pos = 0;
  
#line 273
  while (pos <= [k bitLength]) {
    
#line 275
    if ([k testBitWithInt:pos] == carry) {
      
#line 277
      ++pos;
      continue;
    }
    
#line 281
    k = [k shiftRightWithInt:pos];
    
#line 283
    jint digit = [((JavaMathBigInteger *) nil_chk(k)) intValue] & mask;
    if (carry) {
      
#line 286
      ++digit;
    }
    
#line 289
    carry = ((digit & sign) != 0);
    if (carry) {
      
#line 292
      digit -= pow2;
    }
    
#line 295
    length += length > 0 ? pos - 1 : pos;
    *IOSByteArray_GetRef(wnaf, length++) = (jbyte) digit;
    pos = width;
  }
  
#line 301
  if (wnaf->size_ > length) {
    
#line 303
    wnaf = OrgBouncycastleMathEcWNafUtil_trimWithByteArray_withInt_(wnaf, length);
  }
  
#line 306
  return wnaf;
}


#line 309
jint OrgBouncycastleMathEcWNafUtil_getNafWeightWithJavaMathBigInteger_(JavaMathBigInteger *k) {
  OrgBouncycastleMathEcWNafUtil_initialize();
  if ([((JavaMathBigInteger *) nil_chk(k)) signum] == 0) {
    
#line 313
    return 0;
  }
  
#line 316
  JavaMathBigInteger *_3k = [((JavaMathBigInteger *) nil_chk([k shiftLeftWithInt:1])) addWithJavaMathBigInteger:k];
  JavaMathBigInteger *diff = [((JavaMathBigInteger *) nil_chk(_3k)) xor__WithJavaMathBigInteger:k];
  
#line 319
  return [((JavaMathBigInteger *) nil_chk(diff)) bitCount];
}


#line 322
OrgBouncycastleMathEcWNafPreCompInfo *OrgBouncycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECPoint *p) {
  OrgBouncycastleMathEcWNafUtil_initialize();
  return OrgBouncycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgBouncycastleMathEcPreCompInfo_([((OrgBouncycastleMathEcECCurve *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve])) getPreCompInfoWithOrgBouncycastleMathEcECPoint:p withNSString:OrgBouncycastleMathEcWNafUtil_PRECOMP_NAME]);
}

OrgBouncycastleMathEcWNafPreCompInfo *OrgBouncycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgBouncycastleMathEcPreCompInfo_(id<OrgBouncycastleMathEcPreCompInfo> preCompInfo) {
  OrgBouncycastleMathEcWNafUtil_initialize();
  return [preCompInfo isKindOfClass:[OrgBouncycastleMathEcWNafPreCompInfo class]] ? (OrgBouncycastleMathEcWNafPreCompInfo *) cast_chk(preCompInfo, [OrgBouncycastleMathEcWNafPreCompInfo class]) : nil;
}


#line 338
jint OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_(jint bits) {
  OrgBouncycastleMathEcWNafUtil_initialize();
  return OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withIntArray_withInt_(bits, OrgBouncycastleMathEcWNafUtil_DEFAULT_WINDOW_SIZE_CUTOFFS, OrgBouncycastleMathEcWNafUtil_MAX_WIDTH);
}


#line 350
jint OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withInt_(jint bits, jint maxWidth) {
  OrgBouncycastleMathEcWNafUtil_initialize();
  return OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withIntArray_withInt_(bits, OrgBouncycastleMathEcWNafUtil_DEFAULT_WINDOW_SIZE_CUTOFFS, maxWidth);
}


#line 362
jint OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withIntArray_(jint bits, IOSIntArray *windowSizeCutoffs) {
  OrgBouncycastleMathEcWNafUtil_initialize();
  return OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withIntArray_withInt_(bits, windowSizeCutoffs, OrgBouncycastleMathEcWNafUtil_MAX_WIDTH);
}


#line 375
jint OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withIntArray_withInt_(jint bits, IOSIntArray *windowSizeCutoffs, jint maxWidth) {
  OrgBouncycastleMathEcWNafUtil_initialize();
  jint w = 0;
  for (; w < ((IOSIntArray *) nil_chk(windowSizeCutoffs))->size_; ++w) {
    
#line 380
    if (bits < IOSIntArray_Get(windowSizeCutoffs, w)) {
      
#line 382
      break;
    }
  }
  
#line 386
  return JavaLangMath_maxWithInt_withInt_(2, JavaLangMath_minWithInt_withInt_(maxWidth, w + 2));
}


#line 389
OrgBouncycastleMathEcWNafPreCompInfo *OrgBouncycastleMathEcWNafUtil_precomputeWithOrgBouncycastleMathEcECPoint_withInt_withBoolean_(OrgBouncycastleMathEcECPoint *p, jint minWidth, jboolean includeNegated) {
  OrgBouncycastleMathEcWNafUtil_initialize();
  OrgBouncycastleMathEcECCurve *c = [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  
#line 393
  return (OrgBouncycastleMathEcWNafPreCompInfo *) cast_chk([((OrgBouncycastleMathEcECCurve *) nil_chk(c)) precomputeWithOrgBouncycastleMathEcECPoint:p withNSString:OrgBouncycastleMathEcWNafUtil_PRECOMP_NAME withOrgBouncycastleMathEcPreCompCallback:new_OrgBouncycastleMathEcWNafUtil_1_initWithInt_withBoolean_withOrgBouncycastleMathEcECPoint_withOrgBouncycastleMathEcECCurve_(minWidth, includeNegated, p, c)], [OrgBouncycastleMathEcWNafPreCompInfo class]);
}


#line 569
OrgBouncycastleMathEcWNafPreCompInfo *OrgBouncycastleMathEcWNafUtil_precomputeWithPointMapWithOrgBouncycastleMathEcECPoint_withOrgBouncycastleMathEcECPointMap_withOrgBouncycastleMathEcWNafPreCompInfo_withBoolean_(OrgBouncycastleMathEcECPoint *p, id<OrgBouncycastleMathEcECPointMap> pointMap, OrgBouncycastleMathEcWNafPreCompInfo *fromWNaf, jboolean includeNegated) {
  OrgBouncycastleMathEcWNafUtil_initialize();
  
#line 572
  OrgBouncycastleMathEcECCurve *c = [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  
#line 574
  return (OrgBouncycastleMathEcWNafPreCompInfo *) cast_chk([((OrgBouncycastleMathEcECCurve *) nil_chk(c)) precomputeWithOrgBouncycastleMathEcECPoint:p withNSString:OrgBouncycastleMathEcWNafUtil_PRECOMP_NAME withOrgBouncycastleMathEcPreCompCallback:new_OrgBouncycastleMathEcWNafUtil_2_initWithOrgBouncycastleMathEcWNafPreCompInfo_withBoolean_withOrgBouncycastleMathEcECPointMap_(fromWNaf, includeNegated, pointMap)], [OrgBouncycastleMathEcWNafPreCompInfo class]);
}


#line 642
IOSByteArray *OrgBouncycastleMathEcWNafUtil_trimWithByteArray_withInt_(IOSByteArray *a, jint length) {
  OrgBouncycastleMathEcWNafUtil_initialize();
  IOSByteArray *result = [IOSByteArray newArrayWithLength:length];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, result, 0, result->size_);
  return result;
}

IOSIntArray *OrgBouncycastleMathEcWNafUtil_trimWithIntArray_withInt_(IOSIntArray *a, jint length) {
  OrgBouncycastleMathEcWNafUtil_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:length];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, result, 0, result->size_);
  return result;
}

IOSObjectArray *OrgBouncycastleMathEcWNafUtil_resizeTableWithOrgBouncycastleMathEcECPointArray_withInt_(IOSObjectArray *a, jint length) {
  OrgBouncycastleMathEcWNafUtil_initialize();
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:length type:OrgBouncycastleMathEcECPoint_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, result, 0, ((IOSObjectArray *) nil_chk(a))->size_);
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcWNafUtil)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/WNafUtil.java"


#line 394
@implementation OrgBouncycastleMathEcWNafUtil_1


#line 394
- (instancetype)initWithInt:(jint)capture$0
                withBoolean:(jboolean)capture$1
withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)capture$2
withOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)capture$3 {
  OrgBouncycastleMathEcWNafUtil_1_initWithInt_withBoolean_withOrgBouncycastleMathEcECPoint_withOrgBouncycastleMathEcECCurve_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}


#line 395
- (id<OrgBouncycastleMathEcPreCompInfo>)precomputeWithOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)existing {
  
#line 398
  OrgBouncycastleMathEcWNafPreCompInfo *existingWNaf = [existing isKindOfClass:[OrgBouncycastleMathEcWNafPreCompInfo class]] ? (OrgBouncycastleMathEcWNafPreCompInfo *) cast_chk(existing, [OrgBouncycastleMathEcWNafPreCompInfo class]) : nil;
  
#line 400
  jint width = JavaLangMath_maxWithInt_withInt_(2, JavaLangMath_minWithInt_withInt_(OrgBouncycastleMathEcWNafUtil_MAX_WIDTH, val$minWidth_));
  jint reqPreCompLen = JreLShift32(1, width - 2);
  
#line 403
  if (OrgBouncycastleMathEcWNafUtil_1_checkExistingWithOrgBouncycastleMathEcWNafPreCompInfo_withInt_withInt_withBoolean_(self, existingWNaf, width, reqPreCompLen, val$includeNegated_)) {
    
#line 405
    [existingWNaf decrementPromotionCountdown];
    return JreRetainedLocalValue(existingWNaf);
  }
  
#line 409
  OrgBouncycastleMathEcWNafPreCompInfo *result = new_OrgBouncycastleMathEcWNafPreCompInfo_init();
  
#line 411
  IOSObjectArray *preComp = nil;
  
#line 411
  IOSObjectArray *preCompNeg = nil;
  OrgBouncycastleMathEcECPoint *twiceP = nil;
  
#line 414
  if (nil != existingWNaf) {
    
#line 416
    jint promotionCountdown = [existingWNaf decrementPromotionCountdown];
    [result setPromotionCountdownWithInt:promotionCountdown];
    
#line 419
    jint confWidth = [existingWNaf getConfWidth];
    [result setConfWidthWithInt:confWidth];
    
#line 422
    preComp = [existingWNaf getPreComp];
    preCompNeg = [existingWNaf getPreCompNeg];
    twiceP = [existingWNaf getTwice];
  }
  
#line 427
  width = JavaLangMath_minWithInt_withInt_(OrgBouncycastleMathEcWNafUtil_MAX_WIDTH, JavaLangMath_maxWithInt_withInt_([result getConfWidth], width));
  reqPreCompLen = JreLShift32(1, width - 2);
  
#line 430
  jint iniPreCompLen = 0;
  if (nil == preComp) {
    
#line 433
    preComp = JreLoadStatic(OrgBouncycastleMathEcWNafUtil, EMPTY_POINTS);
  }
  else {
    
#line 437
    iniPreCompLen = preComp->size_;
  }
  
#line 440
  if (iniPreCompLen < reqPreCompLen) {
    
#line 442
    preComp = OrgBouncycastleMathEcWNafUtil_resizeTableWithOrgBouncycastleMathEcECPointArray_withInt_(preComp, reqPreCompLen);
    
#line 444
    if (reqPreCompLen == 1) {
      
#line 446
      (void) IOSObjectArray_Set(nil_chk(preComp), 0, [((OrgBouncycastleMathEcECPoint *) nil_chk(val$p_)) normalize]);
    }
    else {
      
#line 450
      jint curPreCompLen = iniPreCompLen;
      if (curPreCompLen == 0) {
        
#line 453
        (void) IOSObjectArray_Set(nil_chk(preComp), 0, val$p_);
        curPreCompLen = 1;
      }
      
#line 457
      OrgBouncycastleMathEcECFieldElement *iso = nil;
      
#line 459
      if (reqPreCompLen == 2) {
        
#line 461
        (void) IOSObjectArray_Set(nil_chk(preComp), 1, [((OrgBouncycastleMathEcECPoint *) nil_chk(val$p_)) threeTimes]);
      }
      else {
        
#line 465
        OrgBouncycastleMathEcECPoint *isoTwiceP = twiceP;
        
#line 465
        OrgBouncycastleMathEcECPoint *last = IOSObjectArray_Get(nil_chk(preComp), curPreCompLen - 1);
        if (nil == isoTwiceP) {
          
#line 468
          isoTwiceP = [((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(preComp, 0))) twice];
          twiceP = isoTwiceP;
          
#line 481
          if (![((OrgBouncycastleMathEcECPoint *) nil_chk(twiceP)) isInfinity] && OrgBouncycastleMathEcECAlgorithms_isFpCurveWithOrgBouncycastleMathEcECCurve_(val$c_) && [((OrgBouncycastleMathEcECCurve *) nil_chk(val$c_)) getFieldSize] >= 64) {
            
#line 483
            switch ([((OrgBouncycastleMathEcECCurve *) nil_chk(val$c_)) getCoordinateSystem]) {
              
#line 485
              case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
              case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY:
              case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
              {
                iso = [twiceP getZCoordWithInt:0];
                isoTwiceP = [val$c_ createPointWithJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk([twiceP getXCoord])) toBigInteger] withJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk([twiceP getYCoord])) toBigInteger]];
                
#line 493
                OrgBouncycastleMathEcECFieldElement *iso2 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(iso)) square];
                
#line 493
                OrgBouncycastleMathEcECFieldElement *iso3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(iso2)) multiplyWithOrgBouncycastleMathEcECFieldElement:iso];
                last = [((OrgBouncycastleMathEcECPoint *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk(last)) scaleXWithOrgBouncycastleMathEcECFieldElement:iso2])) scaleYWithOrgBouncycastleMathEcECFieldElement:iso3];
                
#line 496
                if (iniPreCompLen == 0) {
                  
#line 498
                  (void) IOSObjectArray_Set(preComp, 0, last);
                }
                break;
              }
            }
          }
        }
        
#line 506
        while (curPreCompLen < reqPreCompLen) {
          
#line 512
          (void) IOSObjectArray_Set(preComp, curPreCompLen++, last = [((OrgBouncycastleMathEcECPoint *) nil_chk(last)) addWithOrgBouncycastleMathEcECPoint:isoTwiceP]);
        }
      }
      
#line 519
      [((OrgBouncycastleMathEcECCurve *) nil_chk(val$c_)) normalizeAllWithOrgBouncycastleMathEcECPointArray:preComp withInt:iniPreCompLen withInt:reqPreCompLen - iniPreCompLen withOrgBouncycastleMathEcECFieldElement:iso];
    }
  }
  
#line 523
  if (val$includeNegated_) {
    
#line 525
    jint pos;
    if (nil == preCompNeg) {
      
#line 528
      pos = 0;
      preCompNeg = [IOSObjectArray newArrayWithLength:reqPreCompLen type:OrgBouncycastleMathEcECPoint_class_()];
    }
    else {
      
#line 533
      pos = preCompNeg->size_;
      if (pos < reqPreCompLen) {
        
#line 536
        preCompNeg = OrgBouncycastleMathEcWNafUtil_resizeTableWithOrgBouncycastleMathEcECPointArray_withInt_(preCompNeg, reqPreCompLen);
      }
    }
    
#line 540
    while (pos < reqPreCompLen) {
      
#line 542
      (void) IOSObjectArray_Set(nil_chk(preCompNeg), pos, [((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(nil_chk(preComp), pos))) negate]);
      ++pos;
    }
  }
  
#line 547
  [result setPreCompWithOrgBouncycastleMathEcECPointArray:preComp];
  [result setPreCompNegWithOrgBouncycastleMathEcECPointArray:preCompNeg];
  [result setTwiceWithOrgBouncycastleMathEcECPoint:twiceP];
  [result setWidthWithInt:width];
  return JreRetainedLocalValue(result);
}


#line 554
- (jboolean)checkExistingWithOrgBouncycastleMathEcWNafPreCompInfo:(OrgBouncycastleMathEcWNafPreCompInfo *)existingWNaf
                                                          withInt:(jint)width
                                                          withInt:(jint)reqPreCompLen
                                                      withBoolean:(jboolean)includeNegated {
  return OrgBouncycastleMathEcWNafUtil_1_checkExistingWithOrgBouncycastleMathEcWNafPreCompInfo_withInt_withInt_withBoolean_(self, existingWNaf, width, reqPreCompLen, includeNegated);
}


#line 562
- (jboolean)checkTableWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)table
                                                    withInt:(jint)reqLen {
  return OrgBouncycastleMathEcWNafUtil_1_checkTableWithOrgBouncycastleMathEcECPointArray_withInt_(self, table, reqLen);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcPreCompInfo;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withBoolean:withOrgBouncycastleMathEcECPoint:withOrgBouncycastleMathEcECCurve:);
  methods[1].selector = @selector(precomputeWithOrgBouncycastleMathEcPreCompInfo:);
  methods[2].selector = @selector(checkExistingWithOrgBouncycastleMathEcWNafPreCompInfo:withInt:withInt:withBoolean:);
  methods[3].selector = @selector(checkTableWithOrgBouncycastleMathEcECPointArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$minWidth_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$includeNegated_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$p_", "LOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$c_", "LOrgBouncycastleMathEcECCurve;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IZLOrgBouncycastleMathEcECPoint;LOrgBouncycastleMathEcECCurve;", "precompute", "LOrgBouncycastleMathEcPreCompInfo;", "checkExisting", "LOrgBouncycastleMathEcWNafPreCompInfo;IIZ", "checkTable", "[LOrgBouncycastleMathEcECPoint;I", "LOrgBouncycastleMathEcWNafUtil;", "precomputeWithOrgBouncycastleMathEcECPoint:withInt:withBoolean:" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcWNafUtil_1 = { "", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x8000, 4, 4, 7, -1, 8, -1, -1 };
  return &_OrgBouncycastleMathEcWNafUtil_1;
}

@end


#line 394
void OrgBouncycastleMathEcWNafUtil_1_initWithInt_withBoolean_withOrgBouncycastleMathEcECPoint_withOrgBouncycastleMathEcECCurve_(OrgBouncycastleMathEcWNafUtil_1 *self, jint capture$0, jboolean capture$1, OrgBouncycastleMathEcECPoint *capture$2, OrgBouncycastleMathEcECCurve *capture$3) {
  self->val$minWidth_ = capture$0;
  self->val$includeNegated_ = capture$1;
  self->val$p_ = capture$2;
  self->val$c_ = capture$3;
  NSObject_init(self);
}


#line 394
OrgBouncycastleMathEcWNafUtil_1 *new_OrgBouncycastleMathEcWNafUtil_1_initWithInt_withBoolean_withOrgBouncycastleMathEcECPoint_withOrgBouncycastleMathEcECCurve_(jint capture$0, jboolean capture$1, OrgBouncycastleMathEcECPoint *capture$2, OrgBouncycastleMathEcECCurve *capture$3) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcWNafUtil_1, initWithInt_withBoolean_withOrgBouncycastleMathEcECPoint_withOrgBouncycastleMathEcECCurve_, capture$0, capture$1, capture$2, capture$3)
}


#line 394
OrgBouncycastleMathEcWNafUtil_1 *create_OrgBouncycastleMathEcWNafUtil_1_initWithInt_withBoolean_withOrgBouncycastleMathEcECPoint_withOrgBouncycastleMathEcECCurve_(jint capture$0, jboolean capture$1, OrgBouncycastleMathEcECPoint *capture$2, OrgBouncycastleMathEcECCurve *capture$3) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcWNafUtil_1, initWithInt_withBoolean_withOrgBouncycastleMathEcECPoint_withOrgBouncycastleMathEcECCurve_, capture$0, capture$1, capture$2, capture$3)
}


#line 554
jboolean OrgBouncycastleMathEcWNafUtil_1_checkExistingWithOrgBouncycastleMathEcWNafPreCompInfo_withInt_withInt_withBoolean_(OrgBouncycastleMathEcWNafUtil_1 *self, OrgBouncycastleMathEcWNafPreCompInfo *existingWNaf, jint width, jint reqPreCompLen, jboolean includeNegated) {
  
#line 556
  return nil != existingWNaf &&
#line 557
  [existingWNaf getWidth] >= JavaLangMath_maxWithInt_withInt_([existingWNaf getConfWidth], width) && OrgBouncycastleMathEcWNafUtil_1_checkTableWithOrgBouncycastleMathEcECPointArray_withInt_(self,
#line 558
  [existingWNaf getPreComp], reqPreCompLen) &&
#line 559
  (!includeNegated || OrgBouncycastleMathEcWNafUtil_1_checkTableWithOrgBouncycastleMathEcECPointArray_withInt_(self, [existingWNaf getPreCompNeg], reqPreCompLen));
}


#line 562
jboolean OrgBouncycastleMathEcWNafUtil_1_checkTableWithOrgBouncycastleMathEcECPointArray_withInt_(OrgBouncycastleMathEcWNafUtil_1 *self, IOSObjectArray *table, jint reqLen) {
  
#line 564
  return nil != table && table->size_ >= reqLen;
}

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/WNafUtil.java"


#line 575
@implementation OrgBouncycastleMathEcWNafUtil_2


#line 575
- (instancetype)initWithOrgBouncycastleMathEcWNafPreCompInfo:(OrgBouncycastleMathEcWNafPreCompInfo *)capture$0
                                                 withBoolean:(jboolean)capture$1
                         withOrgBouncycastleMathEcECPointMap:(id<OrgBouncycastleMathEcECPointMap>)capture$2 {
  OrgBouncycastleMathEcWNafUtil_2_initWithOrgBouncycastleMathEcWNafPreCompInfo_withBoolean_withOrgBouncycastleMathEcECPointMap_(self, capture$0, capture$1, capture$2);
  return self;
}


#line 576
- (id<OrgBouncycastleMathEcPreCompInfo>)precomputeWithOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)existing {
  
#line 579
  OrgBouncycastleMathEcWNafPreCompInfo *existingWNaf = [existing isKindOfClass:[OrgBouncycastleMathEcWNafPreCompInfo class]] ? (OrgBouncycastleMathEcWNafPreCompInfo *) cast_chk(existing, [OrgBouncycastleMathEcWNafPreCompInfo class]) : nil;
  
#line 581
  jint width = [((OrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(val$fromWNaf_)) getWidth];
  jint reqPreCompLen = ((IOSObjectArray *) nil_chk([val$fromWNaf_ getPreComp]))->size_;
  
#line 584
  if (OrgBouncycastleMathEcWNafUtil_2_checkExistingWithOrgBouncycastleMathEcWNafPreCompInfo_withInt_withInt_withBoolean_(self, existingWNaf, width, reqPreCompLen, val$includeNegated_)) {
    
#line 586
    [existingWNaf decrementPromotionCountdown];
    return JreRetainedLocalValue(existingWNaf);
  }
  
#line 594
  OrgBouncycastleMathEcWNafPreCompInfo *result = new_OrgBouncycastleMathEcWNafPreCompInfo_init();
  
#line 596
  [result setPromotionCountdownWithInt:[val$fromWNaf_ getPromotionCountdown]];
  
#line 598
  OrgBouncycastleMathEcECPoint *twiceFrom = [val$fromWNaf_ getTwice];
  if (nil != twiceFrom) {
    
#line 601
    OrgBouncycastleMathEcECPoint *twice = [((id<OrgBouncycastleMathEcECPointMap>) nil_chk(val$pointMap_)) mapWithOrgBouncycastleMathEcECPoint:twiceFrom];
    [result setTwiceWithOrgBouncycastleMathEcECPoint:twice];
  }
  
#line 605
  IOSObjectArray *preCompFrom = [val$fromWNaf_ getPreComp];
  IOSObjectArray *preComp = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(preCompFrom))->size_ type:OrgBouncycastleMathEcECPoint_class_()];
  for (jint i = 0; i < preCompFrom->size_; ++i) {
    
#line 609
    (void) IOSObjectArray_Set(preComp, i, [((id<OrgBouncycastleMathEcECPointMap>) nil_chk(val$pointMap_)) mapWithOrgBouncycastleMathEcECPoint:IOSObjectArray_Get(preCompFrom, i)]);
  }
  [result setPreCompWithOrgBouncycastleMathEcECPointArray:preComp];
  [result setWidthWithInt:width];
  
#line 614
  if (val$includeNegated_) {
    
#line 616
    IOSObjectArray *preCompNeg = [IOSObjectArray newArrayWithLength:preComp->size_ type:OrgBouncycastleMathEcECPoint_class_()];
    for (jint i = 0; i < preCompNeg->size_; ++i) {
      
#line 619
      (void) IOSObjectArray_Set(preCompNeg, i, [((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(preComp, i))) negate]);
    }
    [result setPreCompNegWithOrgBouncycastleMathEcECPointArray:preCompNeg];
  }
  
#line 624
  return JreRetainedLocalValue(result);
}


#line 627
- (jboolean)checkExistingWithOrgBouncycastleMathEcWNafPreCompInfo:(OrgBouncycastleMathEcWNafPreCompInfo *)existingWNaf
                                                          withInt:(jint)width
                                                          withInt:(jint)reqPreCompLen
                                                      withBoolean:(jboolean)includeNegated {
  return OrgBouncycastleMathEcWNafUtil_2_checkExistingWithOrgBouncycastleMathEcWNafPreCompInfo_withInt_withInt_withBoolean_(self, existingWNaf, width, reqPreCompLen, includeNegated);
}


#line 635
- (jboolean)checkTableWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)table
                                                    withInt:(jint)reqLen {
  return OrgBouncycastleMathEcWNafUtil_2_checkTableWithOrgBouncycastleMathEcECPointArray_withInt_(self, table, reqLen);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcPreCompInfo;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleMathEcWNafPreCompInfo:withBoolean:withOrgBouncycastleMathEcECPointMap:);
  methods[1].selector = @selector(precomputeWithOrgBouncycastleMathEcPreCompInfo:);
  methods[2].selector = @selector(checkExistingWithOrgBouncycastleMathEcWNafPreCompInfo:withInt:withInt:withBoolean:);
  methods[3].selector = @selector(checkTableWithOrgBouncycastleMathEcECPointArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$fromWNaf_", "LOrgBouncycastleMathEcWNafPreCompInfo;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$includeNegated_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$pointMap_", "LOrgBouncycastleMathEcECPointMap;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleMathEcWNafPreCompInfo;ZLOrgBouncycastleMathEcECPointMap;", "precompute", "LOrgBouncycastleMathEcPreCompInfo;", "checkExisting", "LOrgBouncycastleMathEcWNafPreCompInfo;IIZ", "checkTable", "[LOrgBouncycastleMathEcECPoint;I", "LOrgBouncycastleMathEcWNafUtil;", "precomputeWithPointMapWithOrgBouncycastleMathEcECPoint:withOrgBouncycastleMathEcECPointMap:withOrgBouncycastleMathEcWNafPreCompInfo:withBoolean:" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcWNafUtil_2 = { "", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x8000, 4, 3, 7, -1, 8, -1, -1 };
  return &_OrgBouncycastleMathEcWNafUtil_2;
}

@end


#line 575
void OrgBouncycastleMathEcWNafUtil_2_initWithOrgBouncycastleMathEcWNafPreCompInfo_withBoolean_withOrgBouncycastleMathEcECPointMap_(OrgBouncycastleMathEcWNafUtil_2 *self, OrgBouncycastleMathEcWNafPreCompInfo *capture$0, jboolean capture$1, id<OrgBouncycastleMathEcECPointMap> capture$2) {
  self->val$fromWNaf_ = capture$0;
  self->val$includeNegated_ = capture$1;
  self->val$pointMap_ = capture$2;
  NSObject_init(self);
}


#line 575
OrgBouncycastleMathEcWNafUtil_2 *new_OrgBouncycastleMathEcWNafUtil_2_initWithOrgBouncycastleMathEcWNafPreCompInfo_withBoolean_withOrgBouncycastleMathEcECPointMap_(OrgBouncycastleMathEcWNafPreCompInfo *capture$0, jboolean capture$1, id<OrgBouncycastleMathEcECPointMap> capture$2) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcWNafUtil_2, initWithOrgBouncycastleMathEcWNafPreCompInfo_withBoolean_withOrgBouncycastleMathEcECPointMap_, capture$0, capture$1, capture$2)
}


#line 575
OrgBouncycastleMathEcWNafUtil_2 *create_OrgBouncycastleMathEcWNafUtil_2_initWithOrgBouncycastleMathEcWNafPreCompInfo_withBoolean_withOrgBouncycastleMathEcECPointMap_(OrgBouncycastleMathEcWNafPreCompInfo *capture$0, jboolean capture$1, id<OrgBouncycastleMathEcECPointMap> capture$2) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcWNafUtil_2, initWithOrgBouncycastleMathEcWNafPreCompInfo_withBoolean_withOrgBouncycastleMathEcECPointMap_, capture$0, capture$1, capture$2)
}


#line 627
jboolean OrgBouncycastleMathEcWNafUtil_2_checkExistingWithOrgBouncycastleMathEcWNafPreCompInfo_withInt_withInt_withBoolean_(OrgBouncycastleMathEcWNafUtil_2 *self, OrgBouncycastleMathEcWNafPreCompInfo *existingWNaf, jint width, jint reqPreCompLen, jboolean includeNegated) {
  
#line 629
  return nil != existingWNaf &&
#line 630
  [existingWNaf getWidth] >= width && OrgBouncycastleMathEcWNafUtil_2_checkTableWithOrgBouncycastleMathEcECPointArray_withInt_(self,
#line 631
  [existingWNaf getPreComp], reqPreCompLen) &&
#line 632
  (!includeNegated || OrgBouncycastleMathEcWNafUtil_2_checkTableWithOrgBouncycastleMathEcECPointArray_withInt_(self, [existingWNaf getPreCompNeg], reqPreCompLen));
}


#line 635
jboolean OrgBouncycastleMathEcWNafUtil_2_checkTableWithOrgBouncycastleMathEcECPointArray_withInt_(OrgBouncycastleMathEcWNafUtil_2 *self, IOSObjectArray *table, jint reqLen) {
  
#line 637
  return nil != table && table->size_ >= reqLen;
}

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/WNafUtil.java"

@implementation OrgBouncycastleMathEcWNafUtil_$Lambda$1

- (id<OrgBouncycastleMathEcPreCompInfo>)precomputeWithOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)existing {
  
#line 27
  OrgBouncycastleMathEcWNafPreCompInfo *existingWNaf = [existing isKindOfClass:[OrgBouncycastleMathEcWNafPreCompInfo class]] ? (OrgBouncycastleMathEcWNafPreCompInfo *) cast_chk(existing, [OrgBouncycastleMathEcWNafPreCompInfo class]) : nil;
  
#line 29
  if (nil != existingWNaf && [existingWNaf getConfWidth] == val$confWidth_) {
    [existingWNaf setPromotionCountdownWithInt:0];
    return JreRetainedLocalValue(existingWNaf);
  }
  
#line 34
  OrgBouncycastleMathEcWNafPreCompInfo *result = new_OrgBouncycastleMathEcWNafPreCompInfo_init();
  
#line 36
  [result setPromotionCountdownWithInt:0];
  [result setConfWidthWithInt:val$confWidth_];
  
#line 39
  if (nil != existingWNaf) {
    [result setPreCompWithOrgBouncycastleMathEcECPointArray:[existingWNaf getPreComp]];
    [result setPreCompNegWithOrgBouncycastleMathEcECPointArray:[existingWNaf getPreCompNeg]];
    [result setTwiceWithOrgBouncycastleMathEcECPoint:[existingWNaf getTwice]];
    [result setWidthWithInt:[existingWNaf getWidth]];
  }
  
#line 46
  return JreRetainedLocalValue(result);
}

@end

void OrgBouncycastleMathEcWNafUtil_$Lambda$1_initWithInt_(OrgBouncycastleMathEcWNafUtil_$Lambda$1 *self, jint capture$0) {
  self->val$confWidth_ = capture$0;
  NSObject_init(self);
}

OrgBouncycastleMathEcWNafUtil_$Lambda$1 *new_OrgBouncycastleMathEcWNafUtil_$Lambda$1_initWithInt_(jint capture$0) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcWNafUtil_$Lambda$1, initWithInt_, capture$0)
}

OrgBouncycastleMathEcWNafUtil_$Lambda$1 *create_OrgBouncycastleMathEcWNafUtil_$Lambda$1_initWithInt_(jint capture$0) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcWNafUtil_$Lambda$1, initWithInt_, capture$0)
}
