//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/FixedPointCombMultiplier.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/math/ec/AbstractECMultiplier.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECLookupTable.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/FixedPointCombMultiplier.h"
#include "org/bouncycastle/math/ec/FixedPointPreCompInfo.h"
#include "org/bouncycastle/math/ec/FixedPointUtil.h"
#include "org/bouncycastle/math/raw/Nat.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/math/ec/FixedPointCombMultiplier must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/FixedPointCombMultiplier.java"


#line 7
@implementation OrgBouncycastleMathEcFixedPointCombMultiplier

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 7
- (instancetype)init {
  OrgBouncycastleMathEcFixedPointCombMultiplier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 9
- (OrgBouncycastleMathEcECPoint *)multiplyPositiveWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p
                                                            withJavaMathBigInteger:(JavaMathBigInteger *)k {
  
#line 12
  OrgBouncycastleMathEcECCurve *c = [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  jint size = OrgBouncycastleMathEcFixedPointUtil_getCombSizeWithOrgBouncycastleMathEcECCurve_(c);
  
#line 15
  if ([((JavaMathBigInteger *) nil_chk(k)) bitLength] > size) {
    
#line 23
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"fixed-point comb doesn't support scalars larger than the curve order");
  }
  
#line 26
  OrgBouncycastleMathEcFixedPointPreCompInfo *info = OrgBouncycastleMathEcFixedPointUtil_precomputeWithOrgBouncycastleMathEcECPoint_(p);
  id<OrgBouncycastleMathEcECLookupTable> lookupTable = [((OrgBouncycastleMathEcFixedPointPreCompInfo *) nil_chk(info)) getLookupTable];
  jint width = [info getWidth];
  
#line 30
  jint d = JreIntDiv((size + width - 1), width);
  
#line 32
  OrgBouncycastleMathEcECPoint *R = [((OrgBouncycastleMathEcECCurve *) nil_chk(c)) getInfinity];
  
#line 34
  jint fullComb = d * width;
  IOSIntArray *K = OrgBouncycastleMathRawNat_fromBigIntegerWithInt_withJavaMathBigInteger_(fullComb, k);
  
#line 37
  jint top = fullComb - 1;
  for (jint i = 0; i < d; ++i) {
    
#line 40
    jint secretIndex = 0;
    
#line 42
    for (jint j = top - i; j >= 0; j -= d) {
      
#line 44
      jint secretBit = JreURShift32(IOSIntArray_Get(nil_chk(K), JreURShift32(j, 5)), (j & (jint) 0x1F));
      secretIndex ^= JreURShift32(secretBit, 1);
      JreLShiftAssignInt(&secretIndex, 1);
      secretIndex ^= secretBit;
    }
    
#line 50
    OrgBouncycastleMathEcECPoint *add = [((id<OrgBouncycastleMathEcECLookupTable>) nil_chk(lookupTable)) lookupWithInt:secretIndex];
    
#line 52
    R = [((OrgBouncycastleMathEcECPoint *) nil_chk(R)) twicePlusWithOrgBouncycastleMathEcECPoint:add];
  }
  
#line 55
  return [((OrgBouncycastleMathEcECPoint *) nil_chk(R)) addWithOrgBouncycastleMathEcECPoint:[info getOffset]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x4, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(multiplyPositiveWithOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "multiplyPositive", "LOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcFixedPointCombMultiplier = { "FixedPointCombMultiplier", "org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcFixedPointCombMultiplier;
}

@end


#line 7
void OrgBouncycastleMathEcFixedPointCombMultiplier_init(OrgBouncycastleMathEcFixedPointCombMultiplier *self) {
  OrgBouncycastleMathEcAbstractECMultiplier_init(self);
}


#line 7
OrgBouncycastleMathEcFixedPointCombMultiplier *new_OrgBouncycastleMathEcFixedPointCombMultiplier_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcFixedPointCombMultiplier, init)
}


#line 7
OrgBouncycastleMathEcFixedPointCombMultiplier *create_OrgBouncycastleMathEcFixedPointCombMultiplier_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcFixedPointCombMultiplier, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcFixedPointCombMultiplier)
