//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/WNafUtil.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleMathEcWNafUtil")
#ifdef RESTRICT_OrgBouncycastleMathEcWNafUtil
#define INCLUDE_ALL_OrgBouncycastleMathEcWNafUtil 0
#else
#define INCLUDE_ALL_OrgBouncycastleMathEcWNafUtil 1
#endif
#undef RESTRICT_OrgBouncycastleMathEcWNafUtil

#if !defined (OrgBouncycastleMathEcWNafUtil_) && (INCLUDE_ALL_OrgBouncycastleMathEcWNafUtil || defined(INCLUDE_OrgBouncycastleMathEcWNafUtil))
#define OrgBouncycastleMathEcWNafUtil_

@class IOSByteArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaMathBigInteger;
@class OrgBouncycastleMathEcECPoint;
@class OrgBouncycastleMathEcWNafPreCompInfo;
@protocol OrgBouncycastleMathEcECPointMap;
@protocol OrgBouncycastleMathEcPreCompInfo;

@interface OrgBouncycastleMathEcWNafUtil : NSObject

#pragma mark Public

- (instancetype)init;

+ (void)configureBasepointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p;

+ (IOSIntArray *)generateCompactNafWithJavaMathBigInteger:(JavaMathBigInteger *)k;

+ (IOSIntArray *)generateCompactWindowNafWithInt:(jint)width
                          withJavaMathBigInteger:(JavaMathBigInteger *)k;

+ (IOSByteArray *)generateJSFWithJavaMathBigInteger:(JavaMathBigInteger *)g
                             withJavaMathBigInteger:(JavaMathBigInteger *)h;

+ (IOSByteArray *)generateNafWithJavaMathBigInteger:(JavaMathBigInteger *)k;

/*!
 @brief Computes the Window NAF (non-adjacent Form) of an integer.
 @param width The width  <code> w </code>  of the Window NAF. The width is
   defined as the minimal number  <code> w </code> , such that for any  
  <code> w </code>  consecutive digits in the resulting representation, at  most one is non-zero.
 @param k The integer of which the Window NAF is computed.
 @return The Window NAF of the given width, such that the following holds: 
 <code>k = &sum;<sub>i=0</sub><sup>l-1</sup> k<sub>i</sub>2<sup>i</sup>
  </code>, where the <code>k<sub>i</sub></code> denote the elements of the
  returned <code>byte[]</code>.
 */
+ (IOSByteArray *)generateWindowNafWithInt:(jint)width
                    withJavaMathBigInteger:(JavaMathBigInteger *)k;

+ (jint)getNafWeightWithJavaMathBigInteger:(JavaMathBigInteger *)k;

/*!
 @brief Determine window width to use for a scalar multiplication of the given size.
 @param bits the bit-length of the scalar to multiply by
 @return the window size to use
 */
+ (jint)getWindowSizeWithInt:(jint)bits;

/*!
 @brief Determine window width to use for a scalar multiplication of the given size.
 @param bits the bit-length of the scalar to multiply by
 @param maxWidth the maximum window width to return
 @return the window size to use
 */
+ (jint)getWindowSizeWithInt:(jint)bits
                     withInt:(jint)maxWidth;

/*!
 @brief Determine window width to use for a scalar multiplication of the given size.
 @param bits the bit-length of the scalar to multiply by
 @param windowSizeCutoffs a monotonically increasing list of bit sizes at which to increment the window width
 @return the window size to use
 */
+ (jint)getWindowSizeWithInt:(jint)bits
                withIntArray:(IOSIntArray *)windowSizeCutoffs;

/*!
 @brief Determine window width to use for a scalar multiplication of the given size.
 @param bits the bit-length of the scalar to multiply by
 @param windowSizeCutoffs a monotonically increasing list of bit sizes at which to increment the window width
 @param maxWidth the maximum window width to return
 @return the window size to use
 */
+ (jint)getWindowSizeWithInt:(jint)bits
                withIntArray:(IOSIntArray *)windowSizeCutoffs
                     withInt:(jint)maxWidth;

+ (OrgBouncycastleMathEcWNafPreCompInfo *)getWNafPreCompInfoWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p;

+ (OrgBouncycastleMathEcWNafPreCompInfo *)getWNafPreCompInfoWithOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)preCompInfo;

+ (OrgBouncycastleMathEcWNafPreCompInfo *)precomputeWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p
                                                                             withInt:(jint)minWidth
                                                                         withBoolean:(jboolean)includeNegated;

+ (OrgBouncycastleMathEcWNafPreCompInfo *)precomputeWithPointMapWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p
                                                             withOrgBouncycastleMathEcECPointMap:(id<OrgBouncycastleMathEcECPointMap>)pointMap
                                                        withOrgBouncycastleMathEcWNafPreCompInfo:(OrgBouncycastleMathEcWNafPreCompInfo *)fromWNaf
                                                                                     withBoolean:(jboolean)includeNegated;

#pragma mark Package-Private

+ (IOSObjectArray *)resizeTableWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)a
                                                             withInt:(jint)length;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleMathEcWNafUtil)

inline NSString *OrgBouncycastleMathEcWNafUtil_get_PRECOMP_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgBouncycastleMathEcWNafUtil_PRECOMP_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleMathEcWNafUtil, PRECOMP_NAME, NSString *)

FOUNDATION_EXPORT void OrgBouncycastleMathEcWNafUtil_init(OrgBouncycastleMathEcWNafUtil *self);

FOUNDATION_EXPORT void OrgBouncycastleMathEcWNafUtil_configureBasepointWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECPoint *p);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastleMathEcWNafUtil_generateCompactNafWithJavaMathBigInteger_(JavaMathBigInteger *k);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastleMathEcWNafUtil_generateCompactWindowNafWithInt_withJavaMathBigInteger_(jint width, JavaMathBigInteger *k);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleMathEcWNafUtil_generateJSFWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *g, JavaMathBigInteger *h);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleMathEcWNafUtil_generateNafWithJavaMathBigInteger_(JavaMathBigInteger *k);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(jint width, JavaMathBigInteger *k);

FOUNDATION_EXPORT jint OrgBouncycastleMathEcWNafUtil_getNafWeightWithJavaMathBigInteger_(JavaMathBigInteger *k);

FOUNDATION_EXPORT OrgBouncycastleMathEcWNafPreCompInfo *OrgBouncycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECPoint *p);

FOUNDATION_EXPORT OrgBouncycastleMathEcWNafPreCompInfo *OrgBouncycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgBouncycastleMathEcPreCompInfo_(id<OrgBouncycastleMathEcPreCompInfo> preCompInfo);

FOUNDATION_EXPORT jint OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_(jint bits);

FOUNDATION_EXPORT jint OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withInt_(jint bits, jint maxWidth);

FOUNDATION_EXPORT jint OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withIntArray_(jint bits, IOSIntArray *windowSizeCutoffs);

FOUNDATION_EXPORT jint OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withIntArray_withInt_(jint bits, IOSIntArray *windowSizeCutoffs, jint maxWidth);

FOUNDATION_EXPORT OrgBouncycastleMathEcWNafPreCompInfo *OrgBouncycastleMathEcWNafUtil_precomputeWithOrgBouncycastleMathEcECPoint_withInt_withBoolean_(OrgBouncycastleMathEcECPoint *p, jint minWidth, jboolean includeNegated);

FOUNDATION_EXPORT OrgBouncycastleMathEcWNafPreCompInfo *OrgBouncycastleMathEcWNafUtil_precomputeWithPointMapWithOrgBouncycastleMathEcECPoint_withOrgBouncycastleMathEcECPointMap_withOrgBouncycastleMathEcWNafPreCompInfo_withBoolean_(OrgBouncycastleMathEcECPoint *p, id<OrgBouncycastleMathEcECPointMap> pointMap, OrgBouncycastleMathEcWNafPreCompInfo *fromWNaf, jboolean includeNegated);

FOUNDATION_EXPORT IOSObjectArray *OrgBouncycastleMathEcWNafUtil_resizeTableWithOrgBouncycastleMathEcECPointArray_withInt_(IOSObjectArray *a, jint length);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleMathEcWNafUtil)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleMathEcWNafUtil")
