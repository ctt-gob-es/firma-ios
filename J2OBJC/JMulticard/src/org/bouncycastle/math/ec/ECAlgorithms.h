//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECAlgorithms.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleMathEcECAlgorithms")
#ifdef RESTRICT_OrgBouncycastleMathEcECAlgorithms
#define INCLUDE_ALL_OrgBouncycastleMathEcECAlgorithms 0
#else
#define INCLUDE_ALL_OrgBouncycastleMathEcECAlgorithms 1
#endif
#undef RESTRICT_OrgBouncycastleMathEcECAlgorithms

#if !defined (OrgBouncycastleMathEcECAlgorithms_) && (INCLUDE_ALL_OrgBouncycastleMathEcECAlgorithms || defined(INCLUDE_OrgBouncycastleMathEcECAlgorithms))
#define OrgBouncycastleMathEcECAlgorithms_

@class IOSObjectArray;
@class JavaMathBigInteger;
@class OrgBouncycastleMathEcECCurve;
@class OrgBouncycastleMathEcECFieldElement;
@class OrgBouncycastleMathEcECPoint;
@protocol OrgBouncycastleMathEcEndoECEndomorphism;
@protocol OrgBouncycastleMathEcEndoGLVEndomorphism;
@protocol OrgBouncycastleMathFieldFiniteField;

@interface OrgBouncycastleMathEcECAlgorithms : NSObject

#pragma mark Public

- (instancetype)init;

+ (OrgBouncycastleMathEcECPoint *)cleanPointWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)c
                                            withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p;

+ (OrgBouncycastleMathEcECPoint *)importPointWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)c
                                             withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p;

+ (jboolean)isF2mCurveWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)c;

+ (jboolean)isF2mFieldWithOrgBouncycastleMathFieldFiniteField:(id<OrgBouncycastleMathFieldFiniteField>)field;

+ (jboolean)isFpCurveWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)c;

+ (jboolean)isFpFieldWithOrgBouncycastleMathFieldFiniteField:(id<OrgBouncycastleMathFieldFiniteField>)field;

+ (void)montgomeryTrickWithOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                            withInt:(jint)off
                                                            withInt:(jint)len;

+ (void)montgomeryTrickWithOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                            withInt:(jint)off
                                                            withInt:(jint)len
                            withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)scale_;

/*!
 @brief Simple shift-and-add multiplication.Serves as reference implementation to verify (possibly
  faster) implementations, and for very small scalars.
 CAUTION: This implementation is NOT
  constant-time in any way. It is only intended to be used for diagnostics.
 @param p The point to multiply.
 @param k The multiplier.
 @return The result of the point multiplication <code>kP</code>.
 */
+ (OrgBouncycastleMathEcECPoint *)referenceMultiplyWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p
                                                             withJavaMathBigInteger:(JavaMathBigInteger *)k;

+ (OrgBouncycastleMathEcECPoint *)shamirsTrickWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)P
                                                        withJavaMathBigInteger:(JavaMathBigInteger *)k
                                              withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)Q
                                                        withJavaMathBigInteger:(JavaMathBigInteger *)l;

+ (OrgBouncycastleMathEcECPoint *)sumOfMultipliesWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)ps
                                                           withJavaMathBigIntegerArray:(IOSObjectArray *)ks;

+ (OrgBouncycastleMathEcECPoint *)sumOfTwoMultipliesWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)P
                                                              withJavaMathBigInteger:(JavaMathBigInteger *)a
                                                    withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)Q
                                                              withJavaMathBigInteger:(JavaMathBigInteger *)b;

+ (OrgBouncycastleMathEcECPoint *)validatePointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p;

#pragma mark Package-Private

+ (OrgBouncycastleMathEcECPoint *)implCheckResultWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p;

+ (OrgBouncycastleMathEcECPoint *)implShamirsTrickJsfWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)P
                                                               withJavaMathBigInteger:(JavaMathBigInteger *)k
                                                     withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)Q
                                                               withJavaMathBigInteger:(JavaMathBigInteger *)l;

+ (OrgBouncycastleMathEcECPoint *)implShamirsTrickWNafWithOrgBouncycastleMathEcEndoECEndomorphism:(id<OrgBouncycastleMathEcEndoECEndomorphism>)endomorphism
                                                                 withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)P
                                                                           withJavaMathBigInteger:(JavaMathBigInteger *)k
                                                                           withJavaMathBigInteger:(JavaMathBigInteger *)l;

+ (OrgBouncycastleMathEcECPoint *)implShamirsTrickWNafWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)P
                                                                withJavaMathBigInteger:(JavaMathBigInteger *)k
                                                      withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)Q
                                                                withJavaMathBigInteger:(JavaMathBigInteger *)l;

+ (OrgBouncycastleMathEcECPoint *)implSumOfMultipliesWithOrgBouncycastleMathEcEndoECEndomorphism:(id<OrgBouncycastleMathEcEndoECEndomorphism>)endomorphism
                                                           withOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)ps
                                                                     withJavaMathBigIntegerArray:(IOSObjectArray *)ks;

+ (OrgBouncycastleMathEcECPoint *)implSumOfMultipliesWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)ps
                                                               withJavaMathBigIntegerArray:(IOSObjectArray *)ks;

+ (OrgBouncycastleMathEcECPoint *)implSumOfMultipliesGLVWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)ps
                                                                  withJavaMathBigIntegerArray:(IOSObjectArray *)ks
                                                 withOrgBouncycastleMathEcEndoGLVEndomorphism:(id<OrgBouncycastleMathEcEndoGLVEndomorphism>)glvEndomorphism;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcECAlgorithms)

FOUNDATION_EXPORT void OrgBouncycastleMathEcECAlgorithms_init(OrgBouncycastleMathEcECAlgorithms *self);

FOUNDATION_EXPORT OrgBouncycastleMathEcECAlgorithms *new_OrgBouncycastleMathEcECAlgorithms_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleMathEcECAlgorithms *create_OrgBouncycastleMathEcECAlgorithms_init(void);

FOUNDATION_EXPORT jboolean OrgBouncycastleMathEcECAlgorithms_isF2mCurveWithOrgBouncycastleMathEcECCurve_(OrgBouncycastleMathEcECCurve *c);

FOUNDATION_EXPORT jboolean OrgBouncycastleMathEcECAlgorithms_isF2mFieldWithOrgBouncycastleMathFieldFiniteField_(id<OrgBouncycastleMathFieldFiniteField> field);

FOUNDATION_EXPORT jboolean OrgBouncycastleMathEcECAlgorithms_isFpCurveWithOrgBouncycastleMathEcECCurve_(OrgBouncycastleMathEcECCurve *c);

FOUNDATION_EXPORT jboolean OrgBouncycastleMathEcECAlgorithms_isFpFieldWithOrgBouncycastleMathFieldFiniteField_(id<OrgBouncycastleMathFieldFiniteField> field);

FOUNDATION_EXPORT OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_sumOfMultipliesWithOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_(IOSObjectArray *ps, IOSObjectArray *ks);

FOUNDATION_EXPORT OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_sumOfTwoMultipliesWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(OrgBouncycastleMathEcECPoint *P, JavaMathBigInteger *a, OrgBouncycastleMathEcECPoint *Q, JavaMathBigInteger *b);

FOUNDATION_EXPORT OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_shamirsTrickWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(OrgBouncycastleMathEcECPoint *P, JavaMathBigInteger *k, OrgBouncycastleMathEcECPoint *Q, JavaMathBigInteger *l);

FOUNDATION_EXPORT OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_importPointWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECCurve *c, OrgBouncycastleMathEcECPoint *p);

FOUNDATION_EXPORT void OrgBouncycastleMathEcECAlgorithms_montgomeryTrickWithOrgBouncycastleMathEcECFieldElementArray_withInt_withInt_(IOSObjectArray *zs, jint off, jint len);

FOUNDATION_EXPORT void OrgBouncycastleMathEcECAlgorithms_montgomeryTrickWithOrgBouncycastleMathEcECFieldElementArray_withInt_withInt_withOrgBouncycastleMathEcECFieldElement_(IOSObjectArray *zs, jint off, jint len, OrgBouncycastleMathEcECFieldElement *scale_);

FOUNDATION_EXPORT OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_referenceMultiplyWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(OrgBouncycastleMathEcECPoint *p, JavaMathBigInteger *k);

FOUNDATION_EXPORT OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_validatePointWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECPoint *p);

FOUNDATION_EXPORT OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_cleanPointWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECCurve *c, OrgBouncycastleMathEcECPoint *p);

FOUNDATION_EXPORT OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implCheckResultWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECPoint *p);

FOUNDATION_EXPORT OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implShamirsTrickJsfWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(OrgBouncycastleMathEcECPoint *P, JavaMathBigInteger *k, OrgBouncycastleMathEcECPoint *Q, JavaMathBigInteger *l);

FOUNDATION_EXPORT OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(OrgBouncycastleMathEcECPoint *P, JavaMathBigInteger *k, OrgBouncycastleMathEcECPoint *Q, JavaMathBigInteger *l);

FOUNDATION_EXPORT OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(id<OrgBouncycastleMathEcEndoECEndomorphism> endomorphism, OrgBouncycastleMathEcECPoint *P, JavaMathBigInteger *k, JavaMathBigInteger *l);

FOUNDATION_EXPORT OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_(IOSObjectArray *ps, IOSObjectArray *ks);

FOUNDATION_EXPORT OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesGLVWithOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_withOrgBouncycastleMathEcEndoGLVEndomorphism_(IOSObjectArray *ps, IOSObjectArray *ks, id<OrgBouncycastleMathEcEndoGLVEndomorphism> glvEndomorphism);

FOUNDATION_EXPORT OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_(id<OrgBouncycastleMathEcEndoECEndomorphism> endomorphism, IOSObjectArray *ps, IOSObjectArray *ks);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleMathEcECAlgorithms)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleMathEcECAlgorithms")
