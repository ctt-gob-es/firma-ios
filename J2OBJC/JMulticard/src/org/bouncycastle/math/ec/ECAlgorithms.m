//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECAlgorithms.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/math/ec/ECAlgorithms.h"
#include "org/bouncycastle/math/ec/ECConstants.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECFieldElement.h"
#include "org/bouncycastle/math/ec/ECLookupTable.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/ECPointMap.h"
#include "org/bouncycastle/math/ec/FixedPointCombMultiplier.h"
#include "org/bouncycastle/math/ec/FixedPointPreCompInfo.h"
#include "org/bouncycastle/math/ec/FixedPointUtil.h"
#include "org/bouncycastle/math/ec/WNafPreCompInfo.h"
#include "org/bouncycastle/math/ec/WNafUtil.h"
#include "org/bouncycastle/math/ec/endo/ECEndomorphism.h"
#include "org/bouncycastle/math/ec/endo/EndoUtil.h"
#include "org/bouncycastle/math/ec/endo/GLVEndomorphism.h"
#include "org/bouncycastle/math/field/FiniteField.h"
#include "org/bouncycastle/math/field/PolynomialExtensionField.h"
#include "org/bouncycastle/math/raw/Nat.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/math/ec/ECAlgorithms must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleMathEcECAlgorithms ()

+ (OrgBouncycastleMathEcECPoint *)implShamirsTrickWNafWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)preCompP
                                                      withOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)preCompNegP
                                                                              withByteArray:(IOSByteArray *)wnafP
                                                      withOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)preCompQ
                                                      withOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)preCompNegQ
                                                                              withByteArray:(IOSByteArray *)wnafQ;

+ (OrgBouncycastleMathEcECPoint *)implSumOfMultipliesWithBooleanArray:(IOSBooleanArray *)negs
                        withOrgBouncycastleMathEcWNafPreCompInfoArray:(IOSObjectArray *)infos
                                                       withByteArray2:(IOSObjectArray *)wnafs;

+ (OrgBouncycastleMathEcECPoint *)implShamirsTrickFixedPointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p
                                                                      withJavaMathBigInteger:(JavaMathBigInteger *)k
                                                            withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)q
                                                                      withJavaMathBigInteger:(JavaMathBigInteger *)l;

@end

__attribute__((unused)) static OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgBouncycastleMathEcECPointArray_withOrgBouncycastleMathEcECPointArray_withByteArray_withOrgBouncycastleMathEcECPointArray_withOrgBouncycastleMathEcECPointArray_withByteArray_(IOSObjectArray *preCompP, IOSObjectArray *preCompNegP, IOSByteArray *wnafP, IOSObjectArray *preCompQ, IOSObjectArray *preCompNegQ, IOSByteArray *wnafQ);

__attribute__((unused)) static OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithBooleanArray_withOrgBouncycastleMathEcWNafPreCompInfoArray_withByteArray2_(IOSBooleanArray *negs, IOSObjectArray *infos, IOSObjectArray *wnafs);

__attribute__((unused)) static OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implShamirsTrickFixedPointWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(OrgBouncycastleMathEcECPoint *p, JavaMathBigInteger *k, OrgBouncycastleMathEcECPoint *q, JavaMathBigInteger *l);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECAlgorithms.java"


#line 12
@implementation OrgBouncycastleMathEcECAlgorithms

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 12
- (instancetype)init {
  OrgBouncycastleMathEcECAlgorithms_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 14
+ (jboolean)isF2mCurveWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)c {
  return OrgBouncycastleMathEcECAlgorithms_isF2mCurveWithOrgBouncycastleMathEcECCurve_(c);
}


#line 19
+ (jboolean)isF2mFieldWithOrgBouncycastleMathFieldFiniteField:(id<OrgBouncycastleMathFieldFiniteField>)field {
  return OrgBouncycastleMathEcECAlgorithms_isF2mFieldWithOrgBouncycastleMathFieldFiniteField_(field);
}


#line 25
+ (jboolean)isFpCurveWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)c {
  return OrgBouncycastleMathEcECAlgorithms_isFpCurveWithOrgBouncycastleMathEcECCurve_(c);
}


#line 30
+ (jboolean)isFpFieldWithOrgBouncycastleMathFieldFiniteField:(id<OrgBouncycastleMathFieldFiniteField>)field {
  return OrgBouncycastleMathEcECAlgorithms_isFpFieldWithOrgBouncycastleMathFieldFiniteField_(field);
}


#line 35
+ (OrgBouncycastleMathEcECPoint *)sumOfMultipliesWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)ps
                                                           withJavaMathBigIntegerArray:(IOSObjectArray *)ks {
  return OrgBouncycastleMathEcECAlgorithms_sumOfMultipliesWithOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_(ps, ks);
}


#line 72
+ (OrgBouncycastleMathEcECPoint *)sumOfTwoMultipliesWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)P
                                                              withJavaMathBigInteger:(JavaMathBigInteger *)a
                                                    withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)Q
                                                              withJavaMathBigInteger:(JavaMathBigInteger *)b {
  return OrgBouncycastleMathEcECAlgorithms_sumOfTwoMultipliesWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(P, a, Q, b);
}


#line 117
+ (OrgBouncycastleMathEcECPoint *)shamirsTrickWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)P
                                                        withJavaMathBigInteger:(JavaMathBigInteger *)k
                                              withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)Q
                                                        withJavaMathBigInteger:(JavaMathBigInteger *)l {
  return OrgBouncycastleMathEcECAlgorithms_shamirsTrickWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(P, k, Q, l);
}


#line 126
+ (OrgBouncycastleMathEcECPoint *)importPointWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)c
                                             withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p {
  return OrgBouncycastleMathEcECAlgorithms_importPointWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(c, p);
}


#line 136
+ (void)montgomeryTrickWithOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                            withInt:(jint)off
                                                            withInt:(jint)len {
  OrgBouncycastleMathEcECAlgorithms_montgomeryTrickWithOrgBouncycastleMathEcECFieldElementArray_withInt_withInt_(zs, off, len);
}


#line 141
+ (void)montgomeryTrickWithOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                            withInt:(jint)off
                                                            withInt:(jint)len
                            withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)scale_ {
  OrgBouncycastleMathEcECAlgorithms_montgomeryTrickWithOrgBouncycastleMathEcECFieldElementArray_withInt_withInt_withOrgBouncycastleMathEcECFieldElement_(zs, off, len, scale_);
}


#line 190
+ (OrgBouncycastleMathEcECPoint *)referenceMultiplyWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p
                                                             withJavaMathBigInteger:(JavaMathBigInteger *)k {
  return OrgBouncycastleMathEcECAlgorithms_referenceMultiplyWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(p, k);
}


#line 213
+ (OrgBouncycastleMathEcECPoint *)validatePointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p {
  return OrgBouncycastleMathEcECAlgorithms_validatePointWithOrgBouncycastleMathEcECPoint_(p);
}


#line 223
+ (OrgBouncycastleMathEcECPoint *)cleanPointWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)c
                                            withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p {
  return OrgBouncycastleMathEcECAlgorithms_cleanPointWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(c, p);
}


#line 234
+ (OrgBouncycastleMathEcECPoint *)implCheckResultWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p {
  return OrgBouncycastleMathEcECAlgorithms_implCheckResultWithOrgBouncycastleMathEcECPoint_(p);
}


#line 244
+ (OrgBouncycastleMathEcECPoint *)implShamirsTrickJsfWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)P
                                                               withJavaMathBigInteger:(JavaMathBigInteger *)k
                                                     withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)Q
                                                               withJavaMathBigInteger:(JavaMathBigInteger *)l {
  return OrgBouncycastleMathEcECAlgorithms_implShamirsTrickJsfWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(P, k, Q, l);
}


#line 281
+ (OrgBouncycastleMathEcECPoint *)implShamirsTrickWNafWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)P
                                                                withJavaMathBigInteger:(JavaMathBigInteger *)k
                                                      withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)Q
                                                                withJavaMathBigInteger:(JavaMathBigInteger *)l {
  return OrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(P, k, Q, l);
}


#line 320
+ (OrgBouncycastleMathEcECPoint *)implShamirsTrickWNafWithOrgBouncycastleMathEcEndoECEndomorphism:(id<OrgBouncycastleMathEcEndoECEndomorphism>)endomorphism
                                                                 withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)P
                                                                           withJavaMathBigInteger:(JavaMathBigInteger *)k
                                                                           withJavaMathBigInteger:(JavaMathBigInteger *)l {
  return OrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(endomorphism, P, k, l);
}


#line 347
+ (OrgBouncycastleMathEcECPoint *)implShamirsTrickWNafWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)preCompP
                                                      withOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)preCompNegP
                                                                              withByteArray:(IOSByteArray *)wnafP
                                                      withOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)preCompQ
                                                      withOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)preCompNegQ
                                                                              withByteArray:(IOSByteArray *)wnafQ {
  return OrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgBouncycastleMathEcECPointArray_withOrgBouncycastleMathEcECPointArray_withByteArray_withOrgBouncycastleMathEcECPointArray_withOrgBouncycastleMathEcECPointArray_withByteArray_(preCompP, preCompNegP, wnafP, preCompQ, preCompNegQ, wnafQ);
}


#line 400
+ (OrgBouncycastleMathEcECPoint *)implSumOfMultipliesWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)ps
                                                               withJavaMathBigIntegerArray:(IOSObjectArray *)ks {
  return OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_(ps, ks);
}


#line 423
+ (OrgBouncycastleMathEcECPoint *)implSumOfMultipliesGLVWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)ps
                                                                  withJavaMathBigIntegerArray:(IOSObjectArray *)ks
                                                 withOrgBouncycastleMathEcEndoGLVEndomorphism:(id<OrgBouncycastleMathEcEndoGLVEndomorphism>)glvEndomorphism {
  return OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesGLVWithOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_withOrgBouncycastleMathEcEndoGLVEndomorphism_(ps, ks, glvEndomorphism);
}


#line 454
+ (OrgBouncycastleMathEcECPoint *)implSumOfMultipliesWithOrgBouncycastleMathEcEndoECEndomorphism:(id<OrgBouncycastleMathEcEndoECEndomorphism>)endomorphism
                                                           withOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)ps
                                                                     withJavaMathBigIntegerArray:(IOSObjectArray *)ks {
  return OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_(endomorphism, ps, ks);
}


#line 490
+ (OrgBouncycastleMathEcECPoint *)implSumOfMultipliesWithBooleanArray:(IOSBooleanArray *)negs
                        withOrgBouncycastleMathEcWNafPreCompInfoArray:(IOSObjectArray *)infos
                                                       withByteArray2:(IOSObjectArray *)wnafs {
  return OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithBooleanArray_withOrgBouncycastleMathEcWNafPreCompInfoArray_withByteArray2_(negs, infos, wnafs);
}


#line 544
+ (OrgBouncycastleMathEcECPoint *)implShamirsTrickFixedPointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p
                                                                      withJavaMathBigInteger:(JavaMathBigInteger *)k
                                                            withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)q
                                                                      withJavaMathBigInteger:(JavaMathBigInteger *)l {
  return OrgBouncycastleMathEcECAlgorithms_implShamirsTrickFixedPointWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(p, k, q, l);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x9, 10, 9, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 15, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x9, 20, 12, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x8, 21, 19, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x8, 22, 9, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x8, 23, 9, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x8, 23, 24, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0xa, 23, 25, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x8, 26, 7, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x8, 27, 28, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x8, 26, 29, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0xa, 26, 30, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0xa, 31, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isF2mCurveWithOrgBouncycastleMathEcECCurve:);
  methods[2].selector = @selector(isF2mFieldWithOrgBouncycastleMathFieldFiniteField:);
  methods[3].selector = @selector(isFpCurveWithOrgBouncycastleMathEcECCurve:);
  methods[4].selector = @selector(isFpFieldWithOrgBouncycastleMathFieldFiniteField:);
  methods[5].selector = @selector(sumOfMultipliesWithOrgBouncycastleMathEcECPointArray:withJavaMathBigIntegerArray:);
  methods[6].selector = @selector(sumOfTwoMultipliesWithOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:withOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[7].selector = @selector(shamirsTrickWithOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:withOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[8].selector = @selector(importPointWithOrgBouncycastleMathEcECCurve:withOrgBouncycastleMathEcECPoint:);
  methods[9].selector = @selector(montgomeryTrickWithOrgBouncycastleMathEcECFieldElementArray:withInt:withInt:);
  methods[10].selector = @selector(montgomeryTrickWithOrgBouncycastleMathEcECFieldElementArray:withInt:withInt:withOrgBouncycastleMathEcECFieldElement:);
  methods[11].selector = @selector(referenceMultiplyWithOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[12].selector = @selector(validatePointWithOrgBouncycastleMathEcECPoint:);
  methods[13].selector = @selector(cleanPointWithOrgBouncycastleMathEcECCurve:withOrgBouncycastleMathEcECPoint:);
  methods[14].selector = @selector(implCheckResultWithOrgBouncycastleMathEcECPoint:);
  methods[15].selector = @selector(implShamirsTrickJsfWithOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:withOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[16].selector = @selector(implShamirsTrickWNafWithOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:withOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[17].selector = @selector(implShamirsTrickWNafWithOrgBouncycastleMathEcEndoECEndomorphism:withOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[18].selector = @selector(implShamirsTrickWNafWithOrgBouncycastleMathEcECPointArray:withOrgBouncycastleMathEcECPointArray:withByteArray:withOrgBouncycastleMathEcECPointArray:withOrgBouncycastleMathEcECPointArray:withByteArray:);
  methods[19].selector = @selector(implSumOfMultipliesWithOrgBouncycastleMathEcECPointArray:withJavaMathBigIntegerArray:);
  methods[20].selector = @selector(implSumOfMultipliesGLVWithOrgBouncycastleMathEcECPointArray:withJavaMathBigIntegerArray:withOrgBouncycastleMathEcEndoGLVEndomorphism:);
  methods[21].selector = @selector(implSumOfMultipliesWithOrgBouncycastleMathEcEndoECEndomorphism:withOrgBouncycastleMathEcECPointArray:withJavaMathBigIntegerArray:);
  methods[22].selector = @selector(implSumOfMultipliesWithBooleanArray:withOrgBouncycastleMathEcWNafPreCompInfoArray:withByteArray2:);
  methods[23].selector = @selector(implShamirsTrickFixedPointWithOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:withOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isF2mCurve", "LOrgBouncycastleMathEcECCurve;", "isF2mField", "LOrgBouncycastleMathFieldFiniteField;", "isFpCurve", "isFpField", "sumOfMultiplies", "[LOrgBouncycastleMathEcECPoint;[LJavaMathBigInteger;", "sumOfTwoMultiplies", "LOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;LOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;", "shamirsTrick", "importPoint", "LOrgBouncycastleMathEcECCurve;LOrgBouncycastleMathEcECPoint;", "montgomeryTrick", "[LOrgBouncycastleMathEcECFieldElement;II", "[LOrgBouncycastleMathEcECFieldElement;IILOrgBouncycastleMathEcECFieldElement;", "referenceMultiply", "LOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;", "validatePoint", "LOrgBouncycastleMathEcECPoint;", "cleanPoint", "implCheckResult", "implShamirsTrickJsf", "implShamirsTrickWNaf", "LOrgBouncycastleMathEcEndoECEndomorphism;LOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;LJavaMathBigInteger;", "[LOrgBouncycastleMathEcECPoint;[LOrgBouncycastleMathEcECPoint;[B[LOrgBouncycastleMathEcECPoint;[LOrgBouncycastleMathEcECPoint;[B", "implSumOfMultiplies", "implSumOfMultipliesGLV", "[LOrgBouncycastleMathEcECPoint;[LJavaMathBigInteger;LOrgBouncycastleMathEcEndoGLVEndomorphism;", "LOrgBouncycastleMathEcEndoECEndomorphism;[LOrgBouncycastleMathEcECPoint;[LJavaMathBigInteger;", "[Z[LOrgBouncycastleMathEcWNafPreCompInfo;[[B", "implShamirsTrickFixedPoint" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECAlgorithms = { "ECAlgorithms", "org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x1, 24, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcECAlgorithms;
}

@end


#line 12
void OrgBouncycastleMathEcECAlgorithms_init(OrgBouncycastleMathEcECAlgorithms *self) {
  NSObject_init(self);
}


#line 12
OrgBouncycastleMathEcECAlgorithms *new_OrgBouncycastleMathEcECAlgorithms_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECAlgorithms, init)
}


#line 12
OrgBouncycastleMathEcECAlgorithms *create_OrgBouncycastleMathEcECAlgorithms_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECAlgorithms, init)
}


#line 14
jboolean OrgBouncycastleMathEcECAlgorithms_isF2mCurveWithOrgBouncycastleMathEcECCurve_(OrgBouncycastleMathEcECCurve *c) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  return OrgBouncycastleMathEcECAlgorithms_isF2mFieldWithOrgBouncycastleMathFieldFiniteField_([((OrgBouncycastleMathEcECCurve *) nil_chk(c)) getField]);
}

jboolean OrgBouncycastleMathEcECAlgorithms_isF2mFieldWithOrgBouncycastleMathFieldFiniteField_(id<OrgBouncycastleMathFieldFiniteField> field) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  return [((id<OrgBouncycastleMathFieldFiniteField>) nil_chk(field)) getDimension] > 1 && [((JavaMathBigInteger *) nil_chk([field getCharacteristic])) isEqual:JreLoadStatic(OrgBouncycastleMathEcECConstants, TWO)] &&
#line 22
  [OrgBouncycastleMathFieldPolynomialExtensionField_class_() isInstance:field];
}


#line 25
jboolean OrgBouncycastleMathEcECAlgorithms_isFpCurveWithOrgBouncycastleMathEcECCurve_(OrgBouncycastleMathEcECCurve *c) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  return OrgBouncycastleMathEcECAlgorithms_isFpFieldWithOrgBouncycastleMathFieldFiniteField_([((OrgBouncycastleMathEcECCurve *) nil_chk(c)) getField]);
}

jboolean OrgBouncycastleMathEcECAlgorithms_isFpFieldWithOrgBouncycastleMathFieldFiniteField_(id<OrgBouncycastleMathFieldFiniteField> field) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  return [((id<OrgBouncycastleMathFieldFiniteField>) nil_chk(field)) getDimension] == 1;
}

OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_sumOfMultipliesWithOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_(IOSObjectArray *ps, IOSObjectArray *ks) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  if (ps == nil || ks == nil || ps->size_ != ks->size_ || ps->size_ < 1) {
    
#line 39
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"point and scalar arrays should be non-null, and of equal, non-zero, length");
  }
  
#line 42
  jint count = ps->size_;
  switch (count) {
    
#line 45
    case 1:
    return [((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(ps, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(ks, 0)];
    case 2:
    return OrgBouncycastleMathEcECAlgorithms_sumOfTwoMultipliesWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(IOSObjectArray_Get(ps, 0), IOSObjectArray_Get(ks, 0), IOSObjectArray_Get(ps, 1), IOSObjectArray_Get(ks, 1));
    default:
    break;
  }
  
#line 53
  OrgBouncycastleMathEcECPoint *p = IOSObjectArray_Get(ps, 0);
  OrgBouncycastleMathEcECCurve *c = [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  
#line 56
  IOSObjectArray *imported = [IOSObjectArray newArrayWithLength:count type:OrgBouncycastleMathEcECPoint_class_()];
  (void) IOSObjectArray_Set(imported, 0, p);
  for (jint i = 1; i < count; ++i) {
    
#line 60
    (void) IOSObjectArray_Set(imported, i, OrgBouncycastleMathEcECAlgorithms_importPointWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(c, IOSObjectArray_Get(ps, i)));
  }
  
#line 63
  id<OrgBouncycastleMathEcEndoECEndomorphism> endomorphism = [((OrgBouncycastleMathEcECCurve *) nil_chk(c)) getEndomorphism];
  if ([OrgBouncycastleMathEcEndoGLVEndomorphism_class_() isInstance:endomorphism]) {
    
#line 66
    return OrgBouncycastleMathEcECAlgorithms_implCheckResultWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesGLVWithOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_withOrgBouncycastleMathEcEndoGLVEndomorphism_(imported, ks, (id<OrgBouncycastleMathEcEndoGLVEndomorphism>) cast_check(endomorphism, OrgBouncycastleMathEcEndoGLVEndomorphism_class_())));
  }
  
#line 69
  return OrgBouncycastleMathEcECAlgorithms_implCheckResultWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_(imported, ks));
}


#line 72
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_sumOfTwoMultipliesWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(OrgBouncycastleMathEcECPoint *P, JavaMathBigInteger *a, OrgBouncycastleMathEcECPoint *Q, JavaMathBigInteger *b) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  
#line 75
  OrgBouncycastleMathEcECCurve *cp = [((OrgBouncycastleMathEcECPoint *) nil_chk(P)) getCurve];
  Q = OrgBouncycastleMathEcECAlgorithms_importPointWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(cp, Q);
  
#line 79
  if ([cp isKindOfClass:[OrgBouncycastleMathEcECCurve_AbstractF2m class]]) {
    
#line 81
    OrgBouncycastleMathEcECCurve_AbstractF2m *f2mCurve = (OrgBouncycastleMathEcECCurve_AbstractF2m *) cp;
    if ([((OrgBouncycastleMathEcECCurve_AbstractF2m *) nil_chk(f2mCurve)) isKoblitz]) {
      
#line 84
      return OrgBouncycastleMathEcECAlgorithms_implCheckResultWithOrgBouncycastleMathEcECPoint_([((OrgBouncycastleMathEcECPoint *) nil_chk([P multiplyWithJavaMathBigInteger:a])) addWithOrgBouncycastleMathEcECPoint:[((OrgBouncycastleMathEcECPoint *) nil_chk(Q)) multiplyWithJavaMathBigInteger:b]]);
    }
  }
  
#line 88
  id<OrgBouncycastleMathEcEndoECEndomorphism> endomorphism = [((OrgBouncycastleMathEcECCurve *) nil_chk(cp)) getEndomorphism];
  if ([OrgBouncycastleMathEcEndoGLVEndomorphism_class_() isInstance:endomorphism]) {
    
#line 91
    return OrgBouncycastleMathEcECAlgorithms_implCheckResultWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesGLVWithOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_withOrgBouncycastleMathEcEndoGLVEndomorphism_([IOSObjectArray newArrayWithObjects:(id[]){
#line 92
      P, Q } count:2 type:OrgBouncycastleMathEcECPoint_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ a, b } count:2 type:JavaMathBigInteger_class_()], (id<OrgBouncycastleMathEcEndoGLVEndomorphism>) cast_check(endomorphism, OrgBouncycastleMathEcEndoGLVEndomorphism_class_())));
    }
    
#line 95
    return OrgBouncycastleMathEcECAlgorithms_implCheckResultWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(P, a, Q, b));
  }


#line 117
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_shamirsTrickWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(OrgBouncycastleMathEcECPoint *P, JavaMathBigInteger *k, OrgBouncycastleMathEcECPoint *Q, JavaMathBigInteger *l) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  
#line 120
  OrgBouncycastleMathEcECCurve *cp = [((OrgBouncycastleMathEcECPoint *) nil_chk(P)) getCurve];
  Q = OrgBouncycastleMathEcECAlgorithms_importPointWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(cp, Q);
  
#line 123
  return OrgBouncycastleMathEcECAlgorithms_implCheckResultWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECAlgorithms_implShamirsTrickJsfWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(P, k, Q, l));
}


#line 126
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_importPointWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECCurve *c, OrgBouncycastleMathEcECPoint *p) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  OrgBouncycastleMathEcECCurve *cp = [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  if (![((OrgBouncycastleMathEcECCurve *) nil_chk(c)) equalsWithOrgBouncycastleMathEcECCurve:cp]) {
    
#line 131
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Point must be on the same curve");
  }
  return [c importPointWithOrgBouncycastleMathEcECPoint:p];
}


#line 136
void OrgBouncycastleMathEcECAlgorithms_montgomeryTrickWithOrgBouncycastleMathEcECFieldElementArray_withInt_withInt_(IOSObjectArray *zs, jint off, jint len) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  OrgBouncycastleMathEcECAlgorithms_montgomeryTrickWithOrgBouncycastleMathEcECFieldElementArray_withInt_withInt_withOrgBouncycastleMathEcECFieldElement_(zs, off, len, nil);
}

void OrgBouncycastleMathEcECAlgorithms_montgomeryTrickWithOrgBouncycastleMathEcECFieldElementArray_withInt_withInt_withOrgBouncycastleMathEcECFieldElement_(IOSObjectArray *zs, jint off, jint len, OrgBouncycastleMathEcECFieldElement *scale_) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  
#line 150
  IOSObjectArray *c = [IOSObjectArray newArrayWithLength:len type:OrgBouncycastleMathEcECFieldElement_class_()];
  (void) IOSObjectArray_Set(c, 0, IOSObjectArray_Get(nil_chk(zs), off));
  
#line 153
  jint i = 0;
  while (++i < len) {
    
#line 156
    (void) IOSObjectArray_Set(c, i, [((OrgBouncycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(c, i - 1))) multiplyWithOrgBouncycastleMathEcECFieldElement:IOSObjectArray_Get(zs, off + i)]);
  }
  
#line 159
  --i;
  
#line 161
  if (scale_ != nil) {
    
#line 163
    (void) IOSObjectArray_Set(c, i, [((OrgBouncycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(c, i))) multiplyWithOrgBouncycastleMathEcECFieldElement:scale_]);
  }
  
#line 166
  OrgBouncycastleMathEcECFieldElement *u = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(c, i))) invert];
  
#line 168
  while (i > 0) {
    
#line 170
    jint j = off + i--;
    OrgBouncycastleMathEcECFieldElement *tmp = IOSObjectArray_Get(zs, j);
    (void) IOSObjectArray_Set(zs, j, [((OrgBouncycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(c, i))) multiplyWithOrgBouncycastleMathEcECFieldElement:u]);
    u = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(u)) multiplyWithOrgBouncycastleMathEcECFieldElement:tmp];
  }
  
#line 176
  (void) IOSObjectArray_Set(zs, off, u);
}


#line 190
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_referenceMultiplyWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(OrgBouncycastleMathEcECPoint *p, JavaMathBigInteger *k) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  JavaMathBigInteger *x = [((JavaMathBigInteger *) nil_chk(k)) abs];
  OrgBouncycastleMathEcECPoint *q = [((OrgBouncycastleMathEcECCurve *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve])) getInfinity];
  jint t = [((JavaMathBigInteger *) nil_chk(x)) bitLength];
  if (t > 0) {
    
#line 197
    if ([x testBitWithInt:0]) {
      
#line 199
      q = p;
    }
    for (jint i = 1; i < t; i++) {
      
#line 203
      p = [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) twice];
      if ([x testBitWithInt:i]) {
        
#line 206
        q = [((OrgBouncycastleMathEcECPoint *) nil_chk(q)) addWithOrgBouncycastleMathEcECPoint:p];
      }
    }
  }
  return [k signum] < 0 ? [((OrgBouncycastleMathEcECPoint *) nil_chk(q)) negate] : q;
}


#line 213
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_validatePointWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECPoint *p) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  if (![((OrgBouncycastleMathEcECPoint *) nil_chk(p)) isValid]) {
    
#line 217
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Invalid point");
  }
  
#line 220
  return p;
}


#line 223
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_cleanPointWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECCurve *c, OrgBouncycastleMathEcECPoint *p) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  OrgBouncycastleMathEcECCurve *cp = [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  if (![((OrgBouncycastleMathEcECCurve *) nil_chk(c)) equalsWithOrgBouncycastleMathEcECCurve:cp]) {
    
#line 228
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Point must be on the same curve");
  }
  
#line 231
  return [c decodePointWithByteArray:[p getEncodedWithBoolean:false]];
}


#line 234
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implCheckResultWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECPoint *p) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  if (![((OrgBouncycastleMathEcECPoint *) nil_chk(p)) isValidPartial]) {
    
#line 238
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Invalid result");
  }
  
#line 241
  return p;
}


#line 244
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implShamirsTrickJsfWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(OrgBouncycastleMathEcECPoint *P, JavaMathBigInteger *k, OrgBouncycastleMathEcECPoint *Q, JavaMathBigInteger *l) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  
#line 247
  OrgBouncycastleMathEcECCurve *curve = [((OrgBouncycastleMathEcECPoint *) nil_chk(P)) getCurve];
  OrgBouncycastleMathEcECPoint *infinity = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getInfinity];
  
#line 251
  OrgBouncycastleMathEcECPoint *PaddQ = [P addWithOrgBouncycastleMathEcECPoint:Q];
  OrgBouncycastleMathEcECPoint *PsubQ = [P subtractWithOrgBouncycastleMathEcECPoint:Q];
  
#line 254
  IOSObjectArray *points = [IOSObjectArray newArrayWithObjects:(id[]){ Q, PsubQ, P, PaddQ } count:4 type:OrgBouncycastleMathEcECPoint_class_()];
  [curve normalizeAllWithOrgBouncycastleMathEcECPointArray:points];
  
#line 257
  IOSObjectArray *table = [IOSObjectArray newArrayWithObjects:(id[]){
#line 258
    [((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(points, 3))) negate], [((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(points, 2))) negate], [((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(points, 1))) negate],
#line 259
    [((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(points, 0))) negate], infinity, IOSObjectArray_Get(points, 0), IOSObjectArray_Get(
#line 260
    points, 1), IOSObjectArray_Get(points, 2), IOSObjectArray_Get(points, 3) } count:9 type:OrgBouncycastleMathEcECPoint_class_()];
    
#line 262
    IOSByteArray *jsf = OrgBouncycastleMathEcWNafUtil_generateJSFWithJavaMathBigInteger_withJavaMathBigInteger_(k, l);
    
#line 264
    OrgBouncycastleMathEcECPoint *R = infinity;
    
#line 266
    jint i = ((IOSByteArray *) nil_chk(jsf))->size_;
    while (--i >= 0) {
      
#line 269
      jint jsfi = IOSByteArray_Get(jsf, i);
      
#line 272
      jint kDigit = (JreRShift32((JreLShift32(jsfi, 24)), 28));
      
#line 272
      jint lDigit = (JreRShift32((JreLShift32(jsfi, 28)), 28));
      
#line 274
      jint index = 4 + (kDigit * 3) + lDigit;
      R = [((OrgBouncycastleMathEcECPoint *) nil_chk(R)) twicePlusWithOrgBouncycastleMathEcECPoint:IOSObjectArray_Get(table, index)];
    }
    
#line 278
    return R;
  }


#line 281
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(OrgBouncycastleMathEcECPoint *P, JavaMathBigInteger *k, OrgBouncycastleMathEcECPoint *Q, JavaMathBigInteger *l) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  
#line 284
  jboolean negK = [((JavaMathBigInteger *) nil_chk(k)) signum] < 0;
  
#line 284
  jboolean negL = [((JavaMathBigInteger *) nil_chk(l)) signum] < 0;
  
#line 286
  JavaMathBigInteger *kAbs = [k abs];
  
#line 286
  JavaMathBigInteger *lAbs = [l abs];
  
#line 288
  jint minWidthP = OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withInt_([((JavaMathBigInteger *) nil_chk(kAbs)) bitLength], 8);
  jint minWidthQ = OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withInt_([((JavaMathBigInteger *) nil_chk(lAbs)) bitLength], 8);
  
#line 291
  OrgBouncycastleMathEcWNafPreCompInfo *infoP = OrgBouncycastleMathEcWNafUtil_precomputeWithOrgBouncycastleMathEcECPoint_withInt_withBoolean_(P, minWidthP, true);
  OrgBouncycastleMathEcWNafPreCompInfo *infoQ = OrgBouncycastleMathEcWNafUtil_precomputeWithOrgBouncycastleMathEcECPoint_withInt_withBoolean_(Q, minWidthQ, true);
  {
    
#line 296
    OrgBouncycastleMathEcECCurve *c = [((OrgBouncycastleMathEcECPoint *) nil_chk(P)) getCurve];
    jint combSize = OrgBouncycastleMathEcFixedPointUtil_getCombSizeWithOrgBouncycastleMathEcECCurve_(c);
    if (!negK && !negL &&
#line 299
    [k bitLength] <= combSize && [l bitLength] <= combSize &&
#line 300
    [((OrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(infoP)) isPromoted] && [((OrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(infoQ)) isPromoted]) {
      
#line 302
      return OrgBouncycastleMathEcECAlgorithms_implShamirsTrickFixedPointWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(P, k, Q, l);
    }
  }
  
#line 306
  jint widthP = JavaLangMath_minWithInt_withInt_(8, [((OrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(infoP)) getWidth]);
  jint widthQ = JavaLangMath_minWithInt_withInt_(8, [((OrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(infoQ)) getWidth]);
  
#line 309
  IOSObjectArray *preCompP = negK ? [infoP getPreCompNeg] : [infoP getPreComp];
  IOSObjectArray *preCompQ = negL ? [infoQ getPreCompNeg] : [infoQ getPreComp];
  IOSObjectArray *preCompNegP = negK ? [infoP getPreComp] : [infoP getPreCompNeg];
  IOSObjectArray *preCompNegQ = negL ? [infoQ getPreComp] : [infoQ getPreCompNeg];
  
#line 314
  IOSByteArray *wnafP = OrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(widthP, kAbs);
  IOSByteArray *wnafQ = OrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(widthQ, lAbs);
  
#line 317
  return OrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgBouncycastleMathEcECPointArray_withOrgBouncycastleMathEcECPointArray_withByteArray_withOrgBouncycastleMathEcECPointArray_withOrgBouncycastleMathEcECPointArray_withByteArray_(preCompP, preCompNegP, wnafP, preCompQ, preCompNegQ, wnafQ);
}


#line 320
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(id<OrgBouncycastleMathEcEndoECEndomorphism> endomorphism, OrgBouncycastleMathEcECPoint *P, JavaMathBigInteger *k, JavaMathBigInteger *l) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  jboolean negK = [((JavaMathBigInteger *) nil_chk(k)) signum] < 0;
  
#line 322
  jboolean negL = [((JavaMathBigInteger *) nil_chk(l)) signum] < 0;
  
#line 324
  k = [k abs];
  l = [l abs];
  
#line 327
  jint minWidth = OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withInt_(JavaLangMath_maxWithInt_withInt_([((JavaMathBigInteger *) nil_chk(k)) bitLength], [((JavaMathBigInteger *) nil_chk(l)) bitLength]), 8);
  
#line 329
  OrgBouncycastleMathEcWNafPreCompInfo *infoP = OrgBouncycastleMathEcWNafUtil_precomputeWithOrgBouncycastleMathEcECPoint_withInt_withBoolean_(P, minWidth, true);
  OrgBouncycastleMathEcECPoint *Q = OrgBouncycastleMathEcEndoEndoUtil_mapPointWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPoint_(endomorphism, P);
  OrgBouncycastleMathEcWNafPreCompInfo *infoQ = OrgBouncycastleMathEcWNafUtil_precomputeWithPointMapWithOrgBouncycastleMathEcECPoint_withOrgBouncycastleMathEcECPointMap_withOrgBouncycastleMathEcWNafPreCompInfo_withBoolean_(Q, [((id<OrgBouncycastleMathEcEndoECEndomorphism>) nil_chk(endomorphism)) getPointMap], infoP, true);
  
#line 333
  jint widthP = JavaLangMath_minWithInt_withInt_(8, [((OrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(infoP)) getWidth]);
  jint widthQ = JavaLangMath_minWithInt_withInt_(8, [((OrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(infoQ)) getWidth]);
  
#line 336
  IOSObjectArray *preCompP = negK ? [infoP getPreCompNeg] : [infoP getPreComp];
  IOSObjectArray *preCompQ = negL ? [infoQ getPreCompNeg] : [infoQ getPreComp];
  IOSObjectArray *preCompNegP = negK ? [infoP getPreComp] : [infoP getPreCompNeg];
  IOSObjectArray *preCompNegQ = negL ? [infoQ getPreComp] : [infoQ getPreCompNeg];
  
#line 341
  IOSByteArray *wnafP = OrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(widthP, k);
  IOSByteArray *wnafQ = OrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(widthQ, l);
  
#line 344
  return OrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgBouncycastleMathEcECPointArray_withOrgBouncycastleMathEcECPointArray_withByteArray_withOrgBouncycastleMathEcECPointArray_withOrgBouncycastleMathEcECPointArray_withByteArray_(preCompP, preCompNegP, wnafP, preCompQ, preCompNegQ, wnafQ);
}


#line 347
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgBouncycastleMathEcECPointArray_withOrgBouncycastleMathEcECPointArray_withByteArray_withOrgBouncycastleMathEcECPointArray_withOrgBouncycastleMathEcECPointArray_withByteArray_(IOSObjectArray *preCompP, IOSObjectArray *preCompNegP, IOSByteArray *wnafP, IOSObjectArray *preCompQ, IOSObjectArray *preCompNegQ, IOSByteArray *wnafQ) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  
#line 350
  jint len = JavaLangMath_maxWithInt_withInt_(((IOSByteArray *) nil_chk(wnafP))->size_, ((IOSByteArray *) nil_chk(wnafQ))->size_);
  
#line 352
  OrgBouncycastleMathEcECCurve *curve = [((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(nil_chk(preCompP), 0))) getCurve];
  OrgBouncycastleMathEcECPoint *infinity = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getInfinity];
  
#line 355
  OrgBouncycastleMathEcECPoint *R = infinity;
  jint zeroes = 0;
  
#line 358
  for (jint i = len - 1; i >= 0; --i) {
    
#line 360
    jint wiP = i < wnafP->size_ ? IOSByteArray_Get(wnafP, i) : 0;
    jint wiQ = i < wnafQ->size_ ? IOSByteArray_Get(wnafQ, i) : 0;
    
#line 363
    if ((wiP | wiQ) == 0) {
      
#line 365
      ++zeroes;
      continue;
    }
    
#line 369
    OrgBouncycastleMathEcECPoint *r = infinity;
    if (wiP != 0) {
      
#line 372
      jint nP = JavaLangMath_absWithInt_(wiP);
      IOSObjectArray *tableP = wiP < 0 ? preCompNegP : preCompP;
      r = [((OrgBouncycastleMathEcECPoint *) nil_chk(r)) addWithOrgBouncycastleMathEcECPoint:IOSObjectArray_Get(tableP, JreURShift32(nP, 1))];
    }
    if (wiQ != 0) {
      
#line 378
      jint nQ = JavaLangMath_absWithInt_(wiQ);
      IOSObjectArray *tableQ = wiQ < 0 ? preCompNegQ : preCompQ;
      r = [((OrgBouncycastleMathEcECPoint *) nil_chk(r)) addWithOrgBouncycastleMathEcECPoint:IOSObjectArray_Get(tableQ, JreURShift32(nQ, 1))];
    }
    
#line 383
    if (zeroes > 0) {
      
#line 385
      R = [((OrgBouncycastleMathEcECPoint *) nil_chk(R)) timesPow2WithInt:zeroes];
      zeroes = 0;
    }
    
#line 389
    R = [((OrgBouncycastleMathEcECPoint *) nil_chk(R)) twicePlusWithOrgBouncycastleMathEcECPoint:r];
  }
  
#line 392
  if (zeroes > 0) {
    
#line 394
    R = [((OrgBouncycastleMathEcECPoint *) nil_chk(R)) timesPow2WithInt:zeroes];
  }
  
#line 397
  return R;
}


#line 400
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_(IOSObjectArray *ps, IOSObjectArray *ks) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  jint count = ((IOSObjectArray *) nil_chk(ps))->size_;
  IOSBooleanArray *negs = [IOSBooleanArray newArrayWithLength:count];
  IOSObjectArray *infos = [IOSObjectArray newArrayWithLength:count type:OrgBouncycastleMathEcWNafPreCompInfo_class_()];
  IOSObjectArray *wnafs = [IOSObjectArray newArrayWithLength:count type:IOSClass_byteArray(1)];
  
#line 407
  for (jint i = 0; i < count; ++i) {
    
#line 409
    JavaMathBigInteger *ki = IOSObjectArray_Get(nil_chk(ks), i);
    
#line 409
    *IOSBooleanArray_GetRef(negs, i) = ([((JavaMathBigInteger *) nil_chk(ki)) signum] < 0);
    
#line 409
    ki = [ki abs];
    
#line 411
    jint minWidth = OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withInt_([((JavaMathBigInteger *) nil_chk(ki)) bitLength], 8);
    OrgBouncycastleMathEcWNafPreCompInfo *info = OrgBouncycastleMathEcWNafUtil_precomputeWithOrgBouncycastleMathEcECPoint_withInt_withBoolean_(IOSObjectArray_Get(ps, i), minWidth, true);
    
#line 414
    jint width = JavaLangMath_minWithInt_withInt_(8, [((OrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(info)) getWidth]);
    
#line 416
    (void) IOSObjectArray_Set(infos, i, info);
    (void) IOSObjectArray_Set(wnafs, i, OrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(width, ki));
  }
  
#line 420
  return OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithBooleanArray_withOrgBouncycastleMathEcWNafPreCompInfoArray_withByteArray2_(negs, infos, wnafs);
}


#line 423
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesGLVWithOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_withOrgBouncycastleMathEcEndoGLVEndomorphism_(IOSObjectArray *ps, IOSObjectArray *ks, id<OrgBouncycastleMathEcEndoGLVEndomorphism> glvEndomorphism) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  JavaMathBigInteger *n = [((OrgBouncycastleMathEcECCurve *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(nil_chk(ps), 0))) getCurve])) getOrder];
  
#line 427
  jint len = ps->size_;
  
#line 429
  IOSObjectArray *abs = [IOSObjectArray newArrayWithLength:JreLShift32(len, 1) type:JavaMathBigInteger_class_()];
  for (jint i = 0, j = 0; i < len; ++i) {
    
#line 432
    IOSObjectArray *ab = [((id<OrgBouncycastleMathEcEndoGLVEndomorphism>) nil_chk(glvEndomorphism)) decomposeScalarWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(ks), i))) modWithJavaMathBigInteger:n]];
    (void) IOSObjectArray_Set(abs, j++, IOSObjectArray_Get(nil_chk(ab), 0));
    (void) IOSObjectArray_Set(abs, j++, IOSObjectArray_Get(ab, 1));
  }
  
#line 437
  if ([((id<OrgBouncycastleMathEcEndoGLVEndomorphism>) nil_chk(glvEndomorphism)) hasEfficientPointMap]) {
    
#line 439
    return OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_(glvEndomorphism, ps, abs);
  }
  
#line 442
  IOSObjectArray *pqs = [IOSObjectArray newArrayWithLength:JreLShift32(len, 1) type:OrgBouncycastleMathEcECPoint_class_()];
  for (jint i = 0, j = 0; i < len; ++i) {
    
#line 445
    OrgBouncycastleMathEcECPoint *p = IOSObjectArray_Get(ps, i);
    OrgBouncycastleMathEcECPoint *q = OrgBouncycastleMathEcEndoEndoUtil_mapPointWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPoint_(glvEndomorphism, p);
    (void) IOSObjectArray_Set(pqs, j++, p);
    (void) IOSObjectArray_Set(pqs, j++, q);
  }
  
#line 451
  return OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_(pqs, abs);
}


#line 454
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPointArray_withJavaMathBigIntegerArray_(id<OrgBouncycastleMathEcEndoECEndomorphism> endomorphism, IOSObjectArray *ps, IOSObjectArray *ks) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  jint halfCount = ((IOSObjectArray *) nil_chk(ps))->size_;
  
#line 456
  jint fullCount = JreLShift32(halfCount, 1);
  
#line 458
  IOSBooleanArray *negs = [IOSBooleanArray newArrayWithLength:fullCount];
  IOSObjectArray *infos = [IOSObjectArray newArrayWithLength:fullCount type:OrgBouncycastleMathEcWNafPreCompInfo_class_()];
  IOSObjectArray *wnafs = [IOSObjectArray newArrayWithLength:fullCount type:IOSClass_byteArray(1)];
  
#line 462
  id<OrgBouncycastleMathEcECPointMap> pointMap = [((id<OrgBouncycastleMathEcEndoECEndomorphism>) nil_chk(endomorphism)) getPointMap];
  
#line 464
  for (jint i = 0; i < halfCount; ++i) {
    
#line 466
    jint j0 = JreLShift32(i, 1);
    
#line 466
    jint j1 = j0 + 1;
    
#line 468
    JavaMathBigInteger *kj0 = IOSObjectArray_Get(nil_chk(ks), j0);
    
#line 468
    *IOSBooleanArray_GetRef(negs, j0) = ([((JavaMathBigInteger *) nil_chk(kj0)) signum] < 0);
    
#line 468
    kj0 = [kj0 abs];
    JavaMathBigInteger *kj1 = IOSObjectArray_Get(ks, j1);
    
#line 469
    *IOSBooleanArray_GetRef(negs, j1) = ([((JavaMathBigInteger *) nil_chk(kj1)) signum] < 0);
    
#line 469
    kj1 = [kj1 abs];
    
#line 471
    jint minWidth = OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_withInt_(JavaLangMath_maxWithInt_withInt_([((JavaMathBigInteger *) nil_chk(kj0)) bitLength], [((JavaMathBigInteger *) nil_chk(kj1)) bitLength]), 8);
    
#line 473
    OrgBouncycastleMathEcECPoint *P = IOSObjectArray_Get(ps, i);
    OrgBouncycastleMathEcWNafPreCompInfo *infoP = OrgBouncycastleMathEcWNafUtil_precomputeWithOrgBouncycastleMathEcECPoint_withInt_withBoolean_(P, minWidth, true);
    OrgBouncycastleMathEcECPoint *Q = OrgBouncycastleMathEcEndoEndoUtil_mapPointWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPoint_(endomorphism, P);
    OrgBouncycastleMathEcWNafPreCompInfo *infoQ = OrgBouncycastleMathEcWNafUtil_precomputeWithPointMapWithOrgBouncycastleMathEcECPoint_withOrgBouncycastleMathEcECPointMap_withOrgBouncycastleMathEcWNafPreCompInfo_withBoolean_(Q, pointMap, infoP, true);
    
#line 478
    jint widthP = JavaLangMath_minWithInt_withInt_(8, [((OrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(infoP)) getWidth]);
    jint widthQ = JavaLangMath_minWithInt_withInt_(8, [((OrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(infoQ)) getWidth]);
    
#line 481
    (void) IOSObjectArray_Set(infos, j0, infoP);
    (void) IOSObjectArray_Set(infos, j1, infoQ);
    (void) IOSObjectArray_Set(wnafs, j0, OrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(widthP, kj0));
    (void) IOSObjectArray_Set(wnafs, j1, OrgBouncycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(widthQ, kj1));
  }
  
#line 487
  return OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithBooleanArray_withOrgBouncycastleMathEcWNafPreCompInfoArray_withByteArray2_(negs, infos, wnafs);
}


#line 490
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implSumOfMultipliesWithBooleanArray_withOrgBouncycastleMathEcWNafPreCompInfoArray_withByteArray2_(IOSBooleanArray *negs, IOSObjectArray *infos, IOSObjectArray *wnafs) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  jint len = 0;
  
#line 492
  jint count = ((IOSObjectArray *) nil_chk(wnafs))->size_;
  for (jint i = 0; i < count; ++i) {
    
#line 495
    len = JavaLangMath_maxWithInt_withInt_(len, ((IOSByteArray *) nil_chk(IOSObjectArray_Get(wnafs, i)))->size_);
  }
  
#line 498
  OrgBouncycastleMathEcECCurve *curve = [((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(nil_chk([((OrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(IOSObjectArray_Get(nil_chk(infos), 0))) getPreComp]), 0))) getCurve];
  OrgBouncycastleMathEcECPoint *infinity = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getInfinity];
  
#line 501
  OrgBouncycastleMathEcECPoint *R = infinity;
  jint zeroes = 0;
  
#line 504
  for (jint i = len - 1; i >= 0; --i) {
    
#line 506
    OrgBouncycastleMathEcECPoint *r = infinity;
    
#line 508
    for (jint j = 0; j < count; ++j) {
      
#line 510
      IOSByteArray *wnaf = IOSObjectArray_Get(wnafs, j);
      jint wi = i < ((IOSByteArray *) nil_chk(wnaf))->size_ ? IOSByteArray_Get(wnaf, i) : 0;
      if (wi != 0) {
        
#line 514
        jint n = JavaLangMath_absWithInt_(wi);
        OrgBouncycastleMathEcWNafPreCompInfo *info = IOSObjectArray_Get(infos, j);
        IOSObjectArray *table = (wi < 0 == IOSBooleanArray_Get(nil_chk(negs), j)) ? [((OrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(info)) getPreComp] : [((OrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(info)) getPreCompNeg];
        r = [((OrgBouncycastleMathEcECPoint *) nil_chk(r)) addWithOrgBouncycastleMathEcECPoint:IOSObjectArray_Get(table, JreURShift32(n, 1))];
      }
    }
    
#line 521
    if (JreObjectEqualsEquals(r, infinity)) {
      
#line 523
      ++zeroes;
      continue;
    }
    
#line 527
    if (zeroes > 0) {
      
#line 529
      R = [((OrgBouncycastleMathEcECPoint *) nil_chk(R)) timesPow2WithInt:zeroes];
      zeroes = 0;
    }
    
#line 533
    R = [((OrgBouncycastleMathEcECPoint *) nil_chk(R)) twicePlusWithOrgBouncycastleMathEcECPoint:r];
  }
  
#line 536
  if (zeroes > 0) {
    
#line 538
    R = [((OrgBouncycastleMathEcECPoint *) nil_chk(R)) timesPow2WithInt:zeroes];
  }
  
#line 541
  return R;
}


#line 544
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECAlgorithms_implShamirsTrickFixedPointWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(OrgBouncycastleMathEcECPoint *p, JavaMathBigInteger *k, OrgBouncycastleMathEcECPoint *q, JavaMathBigInteger *l) {
  OrgBouncycastleMathEcECAlgorithms_initialize();
  OrgBouncycastleMathEcECCurve *c = [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  jint combSize = OrgBouncycastleMathEcFixedPointUtil_getCombSizeWithOrgBouncycastleMathEcECCurve_(c);
  
#line 549
  if ([((JavaMathBigInteger *) nil_chk(k)) bitLength] > combSize || [((JavaMathBigInteger *) nil_chk(l)) bitLength] > combSize) {
    
#line 557
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"fixed-point comb doesn't support scalars larger than the curve order");
  }
  
#line 560
  OrgBouncycastleMathEcFixedPointPreCompInfo *infoP = OrgBouncycastleMathEcFixedPointUtil_precomputeWithOrgBouncycastleMathEcECPoint_(p);
  OrgBouncycastleMathEcFixedPointPreCompInfo *infoQ = OrgBouncycastleMathEcFixedPointUtil_precomputeWithOrgBouncycastleMathEcECPoint_(q);
  
#line 563
  id<OrgBouncycastleMathEcECLookupTable> lookupTableP = [((OrgBouncycastleMathEcFixedPointPreCompInfo *) nil_chk(infoP)) getLookupTable];
  id<OrgBouncycastleMathEcECLookupTable> lookupTableQ = [((OrgBouncycastleMathEcFixedPointPreCompInfo *) nil_chk(infoQ)) getLookupTable];
  
#line 566
  jint widthP = [infoP getWidth];
  jint widthQ = [infoQ getWidth];
  
#line 570
  if (widthP != widthQ) {
    
#line 572
    OrgBouncycastleMathEcFixedPointCombMultiplier *m = new_OrgBouncycastleMathEcFixedPointCombMultiplier_init();
    OrgBouncycastleMathEcECPoint *r1 = [m multiplyWithOrgBouncycastleMathEcECPoint:p withJavaMathBigInteger:k];
    OrgBouncycastleMathEcECPoint *r2 = [m multiplyWithOrgBouncycastleMathEcECPoint:q withJavaMathBigInteger:l];
    return [((OrgBouncycastleMathEcECPoint *) nil_chk(r1)) addWithOrgBouncycastleMathEcECPoint:r2];
  }
  
#line 578
  jint width = widthP;
  
#line 580
  jint d = JreIntDiv((combSize + width - 1), width);
  
#line 582
  OrgBouncycastleMathEcECPoint *R = [((OrgBouncycastleMathEcECCurve *) nil_chk(c)) getInfinity];
  
#line 584
  jint fullComb = d * width;
  IOSIntArray *K = OrgBouncycastleMathRawNat_fromBigIntegerWithInt_withJavaMathBigInteger_(fullComb, k);
  IOSIntArray *L = OrgBouncycastleMathRawNat_fromBigIntegerWithInt_withJavaMathBigInteger_(fullComb, l);
  
#line 588
  jint top = fullComb - 1;
  for (jint i = 0; i < d; ++i) {
    
#line 591
    jint secretIndexK = 0;
    
#line 591
    jint secretIndexL = 0;
    
#line 593
    for (jint j = top - i; j >= 0; j -= d) {
      
#line 595
      jint secretBitK = JreURShift32(IOSIntArray_Get(nil_chk(K), JreURShift32(j, 5)), (j & (jint) 0x1F));
      secretIndexK ^= JreURShift32(secretBitK, 1);
      JreLShiftAssignInt(&secretIndexK, 1);
      secretIndexK ^= secretBitK;
      
#line 600
      jint secretBitL = JreURShift32(IOSIntArray_Get(nil_chk(L), JreURShift32(j, 5)), (j & (jint) 0x1F));
      secretIndexL ^= JreURShift32(secretBitL, 1);
      JreLShiftAssignInt(&secretIndexL, 1);
      secretIndexL ^= secretBitL;
    }
    
#line 606
    OrgBouncycastleMathEcECPoint *addP = [((id<OrgBouncycastleMathEcECLookupTable>) nil_chk(lookupTableP)) lookupVarWithInt:secretIndexK];
    OrgBouncycastleMathEcECPoint *addQ = [((id<OrgBouncycastleMathEcECLookupTable>) nil_chk(lookupTableQ)) lookupVarWithInt:secretIndexL];
    
#line 609
    OrgBouncycastleMathEcECPoint *T = [((OrgBouncycastleMathEcECPoint *) nil_chk(addP)) addWithOrgBouncycastleMathEcECPoint:addQ];
    
#line 611
    R = [((OrgBouncycastleMathEcECPoint *) nil_chk(R)) twicePlusWithOrgBouncycastleMathEcECPoint:T];
  }
  
#line 614
  return [((OrgBouncycastleMathEcECPoint *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk(R)) addWithOrgBouncycastleMathEcECPoint:[infoP getOffset]])) addWithOrgBouncycastleMathEcECPoint:[infoQ getOffset]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECAlgorithms)
