//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/WTauNafMultiplier.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/math/ec/AbstractECMultiplier.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECFieldElement.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/PreCompCallback.h"
#include "org/bouncycastle/math/ec/PreCompInfo.h"
#include "org/bouncycastle/math/ec/Tnaf.h"
#include "org/bouncycastle/math/ec/WTauNafMultiplier.h"
#include "org/bouncycastle/math/ec/WTauNafPreCompInfo.h"
#include "org/bouncycastle/math/ec/ZTauElement.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/math/ec/WTauNafMultiplier must be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgBouncycastleMathEcWTauNafMultiplier ()

/*!
 @brief Multiplies a <code>ECPoint.AbstractF2m</code>
  by an element <code>&lambda;</code> of <code><b>Z</b>[&tau;]</code> using
  the <code>&tau;</code>-adic NAF (TNAF) method.
 @param p The ECPoint.AbstractF2m to multiply.
 @param lambda The element  <code> &lambda; </code>  of   <code> <b> Z </b> [ &tau; ] </code>  of which to compute the   <code> [ &tau; ] </code> -adic NAF.
 @return <code>p</code> multiplied by <code>&lambda;</code>.
 */
- (OrgBouncycastleMathEcECPoint_AbstractF2m *)multiplyWTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m:(OrgBouncycastleMathEcECPoint_AbstractF2m *)p
                                                                   withOrgBouncycastleMathEcZTauElement:(OrgBouncycastleMathEcZTauElement *)lambda
                                                                                               withByte:(jbyte)a
                                                                                               withByte:(jbyte)mu;

/*!
 @brief Multiplies a <code>ECPoint.AbstractF2m</code>
  by an element <code>&lambda;</code> of <code><b>Z</b>[&tau;]</code>
  using the window <code>&tau;</code>-adic NAF (TNAF) method, given the
  WTNAF of <code>&lambda;</code>.
 @param p The ECPoint.AbstractF2m to multiply.
 @param u The the WTNAF of  <code> &lambda; </code> .
 @return <code>&lambda; * p</code>.
 */
+ (OrgBouncycastleMathEcECPoint_AbstractF2m *)multiplyFromWTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m:(OrgBouncycastleMathEcECPoint_AbstractF2m *)p
                                                                                              withByteArray:(IOSByteArray *)u;

@end

__attribute__((unused)) static OrgBouncycastleMathEcECPoint_AbstractF2m *OrgBouncycastleMathEcWTauNafMultiplier_multiplyWTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m_withOrgBouncycastleMathEcZTauElement_withByte_withByte_(OrgBouncycastleMathEcWTauNafMultiplier *self, OrgBouncycastleMathEcECPoint_AbstractF2m *p, OrgBouncycastleMathEcZTauElement *lambda, jbyte a, jbyte mu);

__attribute__((unused)) static OrgBouncycastleMathEcECPoint_AbstractF2m *OrgBouncycastleMathEcWTauNafMultiplier_multiplyFromWTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByteArray_(OrgBouncycastleMathEcECPoint_AbstractF2m *p, IOSByteArray *u);

@interface OrgBouncycastleMathEcWTauNafMultiplier_$Lambda$1 : NSObject < OrgBouncycastleMathEcPreCompCallback > {
 @public
  OrgBouncycastleMathEcECPoint_AbstractF2m *val$p_;
  jbyte val$a_;
}

- (id<OrgBouncycastleMathEcPreCompInfo>)precomputeWithOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)existing;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcWTauNafMultiplier_$Lambda$1)

__attribute__((unused)) static void OrgBouncycastleMathEcWTauNafMultiplier_$Lambda$1_initWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByte_(OrgBouncycastleMathEcWTauNafMultiplier_$Lambda$1 *self, OrgBouncycastleMathEcECPoint_AbstractF2m *capture$0, jbyte capture$1);

__attribute__((unused)) static OrgBouncycastleMathEcWTauNafMultiplier_$Lambda$1 *new_OrgBouncycastleMathEcWTauNafMultiplier_$Lambda$1_initWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByte_(OrgBouncycastleMathEcECPoint_AbstractF2m *capture$0, jbyte capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleMathEcWTauNafMultiplier_$Lambda$1 *create_OrgBouncycastleMathEcWTauNafMultiplier_$Lambda$1_initWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByte_(OrgBouncycastleMathEcECPoint_AbstractF2m *capture$0, jbyte capture$1);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/WTauNafMultiplier.java"

NSString *OrgBouncycastleMathEcWTauNafMultiplier_PRECOMP_NAME = @"bc_wtnaf";


#line 7
@implementation OrgBouncycastleMathEcWTauNafMultiplier

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 7
- (instancetype)init {
  OrgBouncycastleMathEcWTauNafMultiplier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 18
- (OrgBouncycastleMathEcECPoint *)multiplyPositiveWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)point
                                                            withJavaMathBigInteger:(JavaMathBigInteger *)k {
  if (!([point isKindOfClass:[OrgBouncycastleMathEcECPoint_AbstractF2m class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Only ECPoint.AbstractF2m can be used in WTauNafMultiplier");
  }
  
#line 25
  OrgBouncycastleMathEcECPoint_AbstractF2m *p = (OrgBouncycastleMathEcECPoint_AbstractF2m *) cast_chk(point, [OrgBouncycastleMathEcECPoint_AbstractF2m class]);
  OrgBouncycastleMathEcECCurve_AbstractF2m *curve = (OrgBouncycastleMathEcECCurve_AbstractF2m *) cast_chk([((OrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(p)) getCurve], [OrgBouncycastleMathEcECCurve_AbstractF2m class]);
  jint m = [((OrgBouncycastleMathEcECCurve_AbstractF2m *) nil_chk(curve)) getFieldSize];
  jbyte a = [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([curve getA])) toBigInteger])) charValue];
  jbyte mu = OrgBouncycastleMathEcTnaf_getMuWithInt_(a);
  IOSObjectArray *s = [curve getSi];
  
#line 32
  OrgBouncycastleMathEcZTauElement *rho = OrgBouncycastleMathEcTnaf_partModReductionWithJavaMathBigInteger_withInt_withByte_withJavaMathBigIntegerArray_withByte_withByte_(k, m, a, s, mu, (jbyte) 10);
  
#line 34
  return OrgBouncycastleMathEcWTauNafMultiplier_multiplyWTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m_withOrgBouncycastleMathEcZTauElement_withByte_withByte_(self, p, rho, a, mu);
}


#line 45
- (OrgBouncycastleMathEcECPoint_AbstractF2m *)multiplyWTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m:(OrgBouncycastleMathEcECPoint_AbstractF2m *)p
                                                                   withOrgBouncycastleMathEcZTauElement:(OrgBouncycastleMathEcZTauElement *)lambda
                                                                                               withByte:(jbyte)a
                                                                                               withByte:(jbyte)mu {
  return OrgBouncycastleMathEcWTauNafMultiplier_multiplyWTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m_withOrgBouncycastleMathEcZTauElement_withByte_withByte_(self, p, lambda, a, mu);
}


#line 64
+ (OrgBouncycastleMathEcECPoint_AbstractF2m *)multiplyFromWTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m:(OrgBouncycastleMathEcECPoint_AbstractF2m *)p
                                                                                              withByteArray:(IOSByteArray *)u {
  return OrgBouncycastleMathEcWTauNafMultiplier_multiplyFromWTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByteArray_(p, u);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint_AbstractF2m;", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint_AbstractF2m;", 0xa, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(multiplyPositiveWithOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[2].selector = @selector(multiplyWTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m:withOrgBouncycastleMathEcZTauElement:withByte:withByte:);
  methods[3].selector = @selector(multiplyFromWTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PRECOMP_NAME", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "multiplyPositive", "LOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;", "multiplyWTnaf", "LOrgBouncycastleMathEcECPoint_AbstractF2m;LOrgBouncycastleMathEcZTauElement;BB", "multiplyFromWTnaf", "LOrgBouncycastleMathEcECPoint_AbstractF2m;[B", &OrgBouncycastleMathEcWTauNafMultiplier_PRECOMP_NAME };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcWTauNafMultiplier = { "WTauNafMultiplier", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcWTauNafMultiplier;
}

@end


#line 7
void OrgBouncycastleMathEcWTauNafMultiplier_init(OrgBouncycastleMathEcWTauNafMultiplier *self) {
  OrgBouncycastleMathEcAbstractECMultiplier_init(self);
}


#line 7
OrgBouncycastleMathEcWTauNafMultiplier *new_OrgBouncycastleMathEcWTauNafMultiplier_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcWTauNafMultiplier, init)
}


#line 7
OrgBouncycastleMathEcWTauNafMultiplier *create_OrgBouncycastleMathEcWTauNafMultiplier_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcWTauNafMultiplier, init)
}


#line 45
OrgBouncycastleMathEcECPoint_AbstractF2m *OrgBouncycastleMathEcWTauNafMultiplier_multiplyWTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m_withOrgBouncycastleMathEcZTauElement_withByte_withByte_(OrgBouncycastleMathEcWTauNafMultiplier *self, OrgBouncycastleMathEcECPoint_AbstractF2m *p, OrgBouncycastleMathEcZTauElement *lambda, jbyte a, jbyte mu) {
  
#line 47
  IOSObjectArray *alpha = a == 0 ? JreLoadStatic(OrgBouncycastleMathEcTnaf, alpha0) : JreLoadStatic(OrgBouncycastleMathEcTnaf, alpha1);
  
#line 49
  JavaMathBigInteger *tw = OrgBouncycastleMathEcTnaf_getTwWithByte_withInt_(mu, OrgBouncycastleMathEcTnaf_WIDTH);
  
#line 51
  IOSByteArray *u = OrgBouncycastleMathEcTnaf_tauAdicWNafWithByte_withOrgBouncycastleMathEcZTauElement_withByte_withJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleMathEcZTauElementArray_(mu, lambda, OrgBouncycastleMathEcTnaf_WIDTH, JavaMathBigInteger_valueOfWithLong_(
#line 52
  OrgBouncycastleMathEcTnaf_POW_2_WIDTH), tw, alpha);
  
#line 54
  return OrgBouncycastleMathEcWTauNafMultiplier_multiplyFromWTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByteArray_(p, u);
}


#line 64
OrgBouncycastleMathEcECPoint_AbstractF2m *OrgBouncycastleMathEcWTauNafMultiplier_multiplyFromWTnafWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByteArray_(OrgBouncycastleMathEcECPoint_AbstractF2m *p, IOSByteArray *u) {
  OrgBouncycastleMathEcWTauNafMultiplier_initialize();
  
#line 65
  OrgBouncycastleMathEcECCurve_AbstractF2m *curve = (OrgBouncycastleMathEcECCurve_AbstractF2m *) cast_chk([((OrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(p)) getCurve], [OrgBouncycastleMathEcECCurve_AbstractF2m class]);
  jbyte a = [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECCurve_AbstractF2m *) nil_chk(curve)) getA])) toBigInteger])) charValue];
  
#line 68
  OrgBouncycastleMathEcWTauNafPreCompInfo *preCompInfo = (OrgBouncycastleMathEcWTauNafPreCompInfo *) cast_chk([curve precomputeWithOrgBouncycastleMathEcECPoint:p withNSString:OrgBouncycastleMathEcWTauNafMultiplier_PRECOMP_NAME withOrgBouncycastleMathEcPreCompCallback:new_OrgBouncycastleMathEcWTauNafMultiplier_$Lambda$1_initWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByte_(p, a)], [OrgBouncycastleMathEcWTauNafPreCompInfo class]);
  
#line 78
  IOSObjectArray *pu = [((OrgBouncycastleMathEcWTauNafPreCompInfo *) nil_chk(preCompInfo)) getPreComp];
  
#line 81
  IOSObjectArray *puNeg = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(pu))->size_ type:OrgBouncycastleMathEcECPoint_AbstractF2m_class_()];
  for (jint i = 0; i < pu->size_; ++i) {
    (void) IOSObjectArray_Set(puNeg, i, (OrgBouncycastleMathEcECPoint_AbstractF2m *) cast_chk([((OrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(IOSObjectArray_Get(pu, i))) negate], [OrgBouncycastleMathEcECPoint_AbstractF2m class]));
  }
  
#line 87
  OrgBouncycastleMathEcECPoint_AbstractF2m *q = (OrgBouncycastleMathEcECPoint_AbstractF2m *) cast_chk([((OrgBouncycastleMathEcECCurve *) nil_chk([p getCurve])) getInfinity], [OrgBouncycastleMathEcECPoint_AbstractF2m class]);
  
#line 89
  jint tauCount = 0;
  for (jint i = ((IOSByteArray *) nil_chk(u))->size_ - 1; i >= 0; i--) {
    ++tauCount;
    jint ui = IOSByteArray_Get(u, i);
    if (ui != 0) {
      q = [((OrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(q)) tauPowWithInt:tauCount];
      tauCount = 0;
      
#line 97
      OrgBouncycastleMathEcECPoint *x = ui > 0 ? IOSObjectArray_Get(pu, JreURShift32(ui, 1)) : IOSObjectArray_Get(puNeg, JreURShift32(-ui, 1));
      q = (OrgBouncycastleMathEcECPoint_AbstractF2m *) cast_chk([((OrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(q)) addWithOrgBouncycastleMathEcECPoint:x], [OrgBouncycastleMathEcECPoint_AbstractF2m class]);
    }
  }
  if (tauCount > 0) {
    q = [((OrgBouncycastleMathEcECPoint_AbstractF2m *) nil_chk(q)) tauPowWithInt:tauCount];
  }
  return q;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcWTauNafMultiplier)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/WTauNafMultiplier.java"

@implementation OrgBouncycastleMathEcWTauNafMultiplier_$Lambda$1

- (id<OrgBouncycastleMathEcPreCompInfo>)precomputeWithOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)existing {
  
#line 69
  if ([existing isKindOfClass:[OrgBouncycastleMathEcWTauNafPreCompInfo class]]) {
    return JreRetainedLocalValue(existing);
  }
  
#line 73
  OrgBouncycastleMathEcWTauNafPreCompInfo *result = new_OrgBouncycastleMathEcWTauNafPreCompInfo_init();
  [result setPreCompWithOrgBouncycastleMathEcECPoint_AbstractF2mArray:OrgBouncycastleMathEcTnaf_getPreCompWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByte_(val$p_, val$a_)];
  return JreRetainedLocalValue(result);
}

@end

void OrgBouncycastleMathEcWTauNafMultiplier_$Lambda$1_initWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByte_(OrgBouncycastleMathEcWTauNafMultiplier_$Lambda$1 *self, OrgBouncycastleMathEcECPoint_AbstractF2m *capture$0, jbyte capture$1) {
  self->val$p_ = capture$0;
  self->val$a_ = capture$1;
  NSObject_init(self);
}

OrgBouncycastleMathEcWTauNafMultiplier_$Lambda$1 *new_OrgBouncycastleMathEcWTauNafMultiplier_$Lambda$1_initWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByte_(OrgBouncycastleMathEcECPoint_AbstractF2m *capture$0, jbyte capture$1) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcWTauNafMultiplier_$Lambda$1, initWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByte_, capture$0, capture$1)
}

OrgBouncycastleMathEcWTauNafMultiplier_$Lambda$1 *create_OrgBouncycastleMathEcWTauNafMultiplier_$Lambda$1_initWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByte_(OrgBouncycastleMathEcECPoint_AbstractF2m *capture$0, jbyte capture$1) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcWTauNafMultiplier_$Lambda$1, initWithOrgBouncycastleMathEcECPoint_AbstractF2m_withByte_, capture$0, capture$1)
}
