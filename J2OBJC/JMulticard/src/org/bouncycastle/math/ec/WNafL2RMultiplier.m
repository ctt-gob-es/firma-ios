//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/WNafL2RMultiplier.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/math/ec/AbstractECMultiplier.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/WNafL2RMultiplier.h"
#include "org/bouncycastle/math/ec/WNafPreCompInfo.h"
#include "org/bouncycastle/math/ec/WNafUtil.h"
#include "org/bouncycastle/util/Integers.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/math/ec/WNafL2RMultiplier must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/WNafL2RMultiplier.java"


#line 11
@implementation OrgBouncycastleMathEcWNafL2RMultiplier

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 11
- (instancetype)init {
  OrgBouncycastleMathEcWNafL2RMultiplier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 20
- (OrgBouncycastleMathEcECPoint *)multiplyPositiveWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p
                                                            withJavaMathBigInteger:(JavaMathBigInteger *)k {
  
#line 23
  jint minWidth = OrgBouncycastleMathEcWNafUtil_getWindowSizeWithInt_([((JavaMathBigInteger *) nil_chk(k)) bitLength]);
  
#line 25
  OrgBouncycastleMathEcWNafPreCompInfo *info = OrgBouncycastleMathEcWNafUtil_precomputeWithOrgBouncycastleMathEcECPoint_withInt_withBoolean_(p, minWidth, true);
  IOSObjectArray *preComp = [((OrgBouncycastleMathEcWNafPreCompInfo *) nil_chk(info)) getPreComp];
  IOSObjectArray *preCompNeg = [info getPreCompNeg];
  jint width = [info getWidth];
  
#line 30
  IOSIntArray *wnaf = OrgBouncycastleMathEcWNafUtil_generateCompactWindowNafWithInt_withJavaMathBigInteger_(width, k);
  
#line 32
  OrgBouncycastleMathEcECPoint *R = [((OrgBouncycastleMathEcECCurve *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve])) getInfinity];
  
#line 34
  jint i = ((IOSIntArray *) nil_chk(wnaf))->size_;
  
#line 40
  if (i > 1) {
    
#line 42
    jint wi = IOSIntArray_Get(wnaf, --i);
    jint digit = JreRShift32(wi, 16);
    
#line 43
    jint zeroes = wi & (jint) 0xFFFF;
    
#line 45
    jint n = JavaLangMath_absWithInt_(digit);
    IOSObjectArray *table = digit < 0 ? preCompNeg : preComp;
    
#line 49
    if ((JreLShift32(n, 2)) < (JreLShift32(1, width))) {
      
#line 51
      jint highest = 32 - OrgBouncycastleUtilIntegers_numberOfLeadingZerosWithInt_(n);
      
#line 54
      jint scale_ = width - highest;
      jint lowBits = n ^ (JreLShift32(1, (highest - 1)));
      
#line 57
      jint i1 = ((JreLShift32(1, (width - 1))) - 1);
      jint i2 = (JreLShift32(lowBits, scale_)) + 1;
      R = [((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(table, JreURShift32(i1, 1)))) addWithOrgBouncycastleMathEcECPoint:IOSObjectArray_Get(table, JreURShift32(i2, 1))];
      
#line 61
      zeroes -= scale_;
    }
    else {
      
#line 67
      R = IOSObjectArray_Get(table, JreURShift32(n, 1));
    }
    
#line 70
    R = [((OrgBouncycastleMathEcECPoint *) nil_chk(R)) timesPow2WithInt:zeroes];
  }
  
#line 73
  while (i > 0) {
    
#line 75
    jint wi = IOSIntArray_Get(wnaf, --i);
    jint digit = JreRShift32(wi, 16);
    
#line 76
    jint zeroes = wi & (jint) 0xFFFF;
    
#line 78
    jint n = JavaLangMath_absWithInt_(digit);
    IOSObjectArray *table = digit < 0 ? preCompNeg : preComp;
    OrgBouncycastleMathEcECPoint *r = IOSObjectArray_Get(table, JreURShift32(n, 1));
    
#line 82
    R = [((OrgBouncycastleMathEcECPoint *) nil_chk(R)) twicePlusWithOrgBouncycastleMathEcECPoint:r];
    R = [((OrgBouncycastleMathEcECPoint *) nil_chk(R)) timesPow2WithInt:zeroes];
  }
  
#line 86
  return R;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x4, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(multiplyPositiveWithOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "multiplyPositive", "LOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcWNafL2RMultiplier = { "WNafL2RMultiplier", "org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcWNafL2RMultiplier;
}

@end


#line 11
void OrgBouncycastleMathEcWNafL2RMultiplier_init(OrgBouncycastleMathEcWNafL2RMultiplier *self) {
  OrgBouncycastleMathEcAbstractECMultiplier_init(self);
}


#line 11
OrgBouncycastleMathEcWNafL2RMultiplier *new_OrgBouncycastleMathEcWNafL2RMultiplier_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcWNafL2RMultiplier, init)
}


#line 11
OrgBouncycastleMathEcWNafL2RMultiplier *create_OrgBouncycastleMathEcWNafL2RMultiplier_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcWNafL2RMultiplier, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcWNafL2RMultiplier)
