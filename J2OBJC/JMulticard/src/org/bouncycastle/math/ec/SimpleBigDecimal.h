//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/SimpleBigDecimal.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleMathEcSimpleBigDecimal")
#ifdef RESTRICT_OrgBouncycastleMathEcSimpleBigDecimal
#define INCLUDE_ALL_OrgBouncycastleMathEcSimpleBigDecimal 0
#else
#define INCLUDE_ALL_OrgBouncycastleMathEcSimpleBigDecimal 1
#endif
#undef RESTRICT_OrgBouncycastleMathEcSimpleBigDecimal

#if !defined (OrgBouncycastleMathEcSimpleBigDecimal_) && (INCLUDE_ALL_OrgBouncycastleMathEcSimpleBigDecimal || defined(INCLUDE_OrgBouncycastleMathEcSimpleBigDecimal))
#define OrgBouncycastleMathEcSimpleBigDecimal_

@class JavaMathBigInteger;

/*!
 @brief Class representing a simple version of a big decimal.A
  <code>SimpleBigDecimal</code> is basically a 
 <code>BigInteger</code> with a few digits on the right of
  the decimal point.
 The number of (binary) digits on the right of the decimal
  point is called the <code>scale</code> of the <code>SimpleBigDecimal</code>.
  Unlike in <code>BigDecimal</code>, the scale is not adjusted
  automatically, but must be set manually. All <code>SimpleBigDecimal</code>s
  taking part in the same arithmetic operation must have equal scale. The
  result of a multiplication of two <code>SimpleBigDecimal</code>s returns a 
 <code>SimpleBigDecimal</code> with double scale.
 */
@interface OrgBouncycastleMathEcSimpleBigDecimal : NSObject

#pragma mark Public

/*!
 @brief Constructor for <code>SimpleBigDecimal</code>.The value of the
  constructed <code>SimpleBigDecimal</code> equals <code>bigInt / 
  2<sup>scale</sup></code>.
 @param bigInt The  <code> bigInt </code>  value parameter.
 @param scale_ The scale of the constructed  <code> SimpleBigDecimal </code>
  .
 */
- (instancetype)initPackagePrivateWithJavaMathBigInteger:(JavaMathBigInteger *)bigInt
                                                 withInt:(jint)scale_;

- (OrgBouncycastleMathEcSimpleBigDecimal *)addWithJavaMathBigInteger:(JavaMathBigInteger *)b;

- (OrgBouncycastleMathEcSimpleBigDecimal *)addWithOrgBouncycastleMathEcSimpleBigDecimal:(OrgBouncycastleMathEcSimpleBigDecimal *)b;

- (OrgBouncycastleMathEcSimpleBigDecimal *)adjustScaleWithInt:(jint)newScale;

- (jint)compareToWithJavaMathBigInteger:(JavaMathBigInteger *)val;

- (jint)compareToWithOrgBouncycastleMathEcSimpleBigDecimal:(OrgBouncycastleMathEcSimpleBigDecimal *)val;

- (OrgBouncycastleMathEcSimpleBigDecimal *)divideWithJavaMathBigInteger:(JavaMathBigInteger *)b;

- (OrgBouncycastleMathEcSimpleBigDecimal *)divideWithOrgBouncycastleMathEcSimpleBigDecimal:(OrgBouncycastleMathEcSimpleBigDecimal *)b;

- (jboolean)isEqual:(id)o;

- (JavaMathBigInteger *)floor;

/*!
 @brief Returns a <code>SimpleBigDecimal</code> representing the same numerical
  value as <code>value</code>.
 @param value The value of the  <code> SimpleBigDecimal </code>  to be
   created.
 @param scale_ The scale of the  <code> SimpleBigDecimal </code>  to be
   created.
 @return The such created <code>SimpleBigDecimal</code>.
 */
+ (OrgBouncycastleMathEcSimpleBigDecimal *)getInstanceWithJavaMathBigInteger:(JavaMathBigInteger *)value
                                                                     withInt:(jint)scale_;

- (jint)getScale;

- (NSUInteger)hash;

- (jint)intValue;

- (jlong)longValue;

- (OrgBouncycastleMathEcSimpleBigDecimal *)multiplyWithJavaMathBigInteger:(JavaMathBigInteger *)b;

- (OrgBouncycastleMathEcSimpleBigDecimal *)multiplyWithOrgBouncycastleMathEcSimpleBigDecimal:(OrgBouncycastleMathEcSimpleBigDecimal *)b;

- (OrgBouncycastleMathEcSimpleBigDecimal *)negate;

- (JavaMathBigInteger *)round;

- (OrgBouncycastleMathEcSimpleBigDecimal *)shiftLeftWithInt:(jint)n;

- (OrgBouncycastleMathEcSimpleBigDecimal *)subtractWithJavaMathBigInteger:(JavaMathBigInteger *)b;

- (OrgBouncycastleMathEcSimpleBigDecimal *)subtractWithOrgBouncycastleMathEcSimpleBigDecimal:(OrgBouncycastleMathEcSimpleBigDecimal *)b;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcSimpleBigDecimal)

FOUNDATION_EXPORT OrgBouncycastleMathEcSimpleBigDecimal *OrgBouncycastleMathEcSimpleBigDecimal_getInstanceWithJavaMathBigInteger_withInt_(JavaMathBigInteger *value, jint scale_);

FOUNDATION_EXPORT void OrgBouncycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_(OrgBouncycastleMathEcSimpleBigDecimal *self, JavaMathBigInteger *bigInt, jint scale_);

FOUNDATION_EXPORT OrgBouncycastleMathEcSimpleBigDecimal *new_OrgBouncycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_(JavaMathBigInteger *bigInt, jint scale_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleMathEcSimpleBigDecimal *create_OrgBouncycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_(JavaMathBigInteger *bigInt, jint scale_);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleMathEcSimpleBigDecimal)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleMathEcSimpleBigDecimal")
