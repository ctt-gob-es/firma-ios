//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECFieldElement.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleMathEcECFieldElement")
#ifdef RESTRICT_OrgBouncycastleMathEcECFieldElement
#define INCLUDE_ALL_OrgBouncycastleMathEcECFieldElement 0
#else
#define INCLUDE_ALL_OrgBouncycastleMathEcECFieldElement 1
#endif
#undef RESTRICT_OrgBouncycastleMathEcECFieldElement
#ifdef INCLUDE_OrgBouncycastleMathEcECFieldElement_F2m
#define INCLUDE_OrgBouncycastleMathEcECFieldElement_AbstractF2m 1
#endif
#ifdef INCLUDE_OrgBouncycastleMathEcECFieldElement_AbstractF2m
#define INCLUDE_OrgBouncycastleMathEcECFieldElement 1
#endif
#ifdef INCLUDE_OrgBouncycastleMathEcECFieldElement_Fp
#define INCLUDE_OrgBouncycastleMathEcECFieldElement_AbstractFp 1
#endif
#ifdef INCLUDE_OrgBouncycastleMathEcECFieldElement_AbstractFp
#define INCLUDE_OrgBouncycastleMathEcECFieldElement 1
#endif

#if !defined (OrgBouncycastleMathEcECFieldElement_) && (INCLUDE_ALL_OrgBouncycastleMathEcECFieldElement || defined(INCLUDE_OrgBouncycastleMathEcECFieldElement))
#define OrgBouncycastleMathEcECFieldElement_

#define RESTRICT_OrgBouncycastleMathEcECConstants 1
#define INCLUDE_OrgBouncycastleMathEcECConstants 1
#include "org/bouncycastle/math/ec/ECConstants.h"

@class IOSByteArray;
@class JavaMathBigInteger;

@interface OrgBouncycastleMathEcECFieldElement : NSObject < OrgBouncycastleMathEcECConstants >

#pragma mark Public

- (instancetype)init;

- (OrgBouncycastleMathEcECFieldElement *)addWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b;

- (OrgBouncycastleMathEcECFieldElement *)addOne;

- (jint)bitLength;

- (OrgBouncycastleMathEcECFieldElement *)divideWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b;

- (IOSByteArray *)getEncoded;

- (NSString *)getFieldName;

- (jint)getFieldSize;

- (OrgBouncycastleMathEcECFieldElement *)invert;

- (jboolean)isOne;

- (jboolean)isZero;

- (OrgBouncycastleMathEcECFieldElement *)multiplyWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b;

- (OrgBouncycastleMathEcECFieldElement *)multiplyMinusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
                                                             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y;

- (OrgBouncycastleMathEcECFieldElement *)multiplyPlusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
                                                            withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                            withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y;

- (OrgBouncycastleMathEcECFieldElement *)negate;

- (OrgBouncycastleMathEcECFieldElement *)sqrt;

- (OrgBouncycastleMathEcECFieldElement *)square;

- (OrgBouncycastleMathEcECFieldElement *)squareMinusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                           withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y;

- (OrgBouncycastleMathEcECFieldElement *)squarePlusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                          withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y;

- (OrgBouncycastleMathEcECFieldElement *)squarePowWithInt:(jint)pow;

- (OrgBouncycastleMathEcECFieldElement *)subtractWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b;

- (jboolean)testBitZero;

- (JavaMathBigInteger *)toBigInteger;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcECFieldElement)

FOUNDATION_EXPORT void OrgBouncycastleMathEcECFieldElement_init(OrgBouncycastleMathEcECFieldElement *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleMathEcECFieldElement)

#endif

#if !defined (OrgBouncycastleMathEcECFieldElement_AbstractFp_) && (INCLUDE_ALL_OrgBouncycastleMathEcECFieldElement || defined(INCLUDE_OrgBouncycastleMathEcECFieldElement_AbstractFp))
#define OrgBouncycastleMathEcECFieldElement_AbstractFp_

@interface OrgBouncycastleMathEcECFieldElement_AbstractFp : OrgBouncycastleMathEcECFieldElement

#pragma mark Public

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcECFieldElement_AbstractFp)

FOUNDATION_EXPORT void OrgBouncycastleMathEcECFieldElement_AbstractFp_init(OrgBouncycastleMathEcECFieldElement_AbstractFp *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleMathEcECFieldElement_AbstractFp)

#endif

#if !defined (OrgBouncycastleMathEcECFieldElement_Fp_) && (INCLUDE_ALL_OrgBouncycastleMathEcECFieldElement || defined(INCLUDE_OrgBouncycastleMathEcECFieldElement_Fp))
#define OrgBouncycastleMathEcECFieldElement_Fp_

@class JavaMathBigInteger;
@class OrgBouncycastleMathEcECFieldElement;

@interface OrgBouncycastleMathEcECFieldElement_Fp : OrgBouncycastleMathEcECFieldElement_AbstractFp {
 @public
  JavaMathBigInteger *q_;
  JavaMathBigInteger *r_;
  JavaMathBigInteger *x_;
}

#pragma mark Public

- (OrgBouncycastleMathEcECFieldElement *)addWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b;

- (OrgBouncycastleMathEcECFieldElement *)addOne;

- (OrgBouncycastleMathEcECFieldElement *)divideWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b;

- (jboolean)isEqual:(id)other;

/*!
 @brief return the field name for this field.
 @return the string "Fp".
 */
- (NSString *)getFieldName;

- (jint)getFieldSize;

- (JavaMathBigInteger *)getQ;

- (NSUInteger)hash;

- (OrgBouncycastleMathEcECFieldElement *)invert;

- (OrgBouncycastleMathEcECFieldElement *)multiplyWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b;

- (OrgBouncycastleMathEcECFieldElement *)multiplyMinusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
                                                             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y;

- (OrgBouncycastleMathEcECFieldElement *)multiplyPlusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
                                                            withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                            withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y;

- (OrgBouncycastleMathEcECFieldElement *)negate;

/*!
 @brief return a sqrt root - the routine verifies that the calculation
  returns the right value - if none exists it returns null.
 */
- (OrgBouncycastleMathEcECFieldElement *)sqrt;

- (OrgBouncycastleMathEcECFieldElement *)square;

- (OrgBouncycastleMathEcECFieldElement *)squareMinusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                           withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y;

- (OrgBouncycastleMathEcECFieldElement *)squarePlusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                          withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y;

- (OrgBouncycastleMathEcECFieldElement *)subtractWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b;

- (JavaMathBigInteger *)toBigInteger;

#pragma mark Protected

- (JavaMathBigInteger *)modAddWithJavaMathBigInteger:(JavaMathBigInteger *)x1
                              withJavaMathBigInteger:(JavaMathBigInteger *)x2;

- (JavaMathBigInteger *)modDoubleWithJavaMathBigInteger:(JavaMathBigInteger *)x;

- (JavaMathBigInteger *)modHalfWithJavaMathBigInteger:(JavaMathBigInteger *)x;

- (JavaMathBigInteger *)modHalfAbsWithJavaMathBigInteger:(JavaMathBigInteger *)x;

- (JavaMathBigInteger *)modInverseWithJavaMathBigInteger:(JavaMathBigInteger *)x;

- (JavaMathBigInteger *)modMultWithJavaMathBigInteger:(JavaMathBigInteger *)x1
                               withJavaMathBigInteger:(JavaMathBigInteger *)x2;

- (JavaMathBigInteger *)modReduceWithJavaMathBigInteger:(JavaMathBigInteger *)x;

- (JavaMathBigInteger *)modSubtractWithJavaMathBigInteger:(JavaMathBigInteger *)x1
                                   withJavaMathBigInteger:(JavaMathBigInteger *)x2;

#pragma mark Package-Private

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)r
                    withJavaMathBigInteger:(JavaMathBigInteger *)x;

+ (JavaMathBigInteger *)calculateResidueWithJavaMathBigInteger:(JavaMathBigInteger *)p;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcECFieldElement_Fp)

J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECFieldElement_Fp, q_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECFieldElement_Fp, r_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECFieldElement_Fp, x_, JavaMathBigInteger *)

FOUNDATION_EXPORT JavaMathBigInteger *OrgBouncycastleMathEcECFieldElement_Fp_calculateResidueWithJavaMathBigInteger_(JavaMathBigInteger *p);

FOUNDATION_EXPORT void OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECFieldElement_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *r, JavaMathBigInteger *x);

FOUNDATION_EXPORT OrgBouncycastleMathEcECFieldElement_Fp *new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *r, JavaMathBigInteger *x) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleMathEcECFieldElement_Fp *create_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *r, JavaMathBigInteger *x);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleMathEcECFieldElement_Fp)

#endif

#if !defined (OrgBouncycastleMathEcECFieldElement_AbstractF2m_) && (INCLUDE_ALL_OrgBouncycastleMathEcECFieldElement || defined(INCLUDE_OrgBouncycastleMathEcECFieldElement_AbstractF2m))
#define OrgBouncycastleMathEcECFieldElement_AbstractF2m_

@class OrgBouncycastleMathEcECFieldElement;

@interface OrgBouncycastleMathEcECFieldElement_AbstractF2m : OrgBouncycastleMathEcECFieldElement

#pragma mark Public

- (instancetype)init;

- (OrgBouncycastleMathEcECFieldElement *)halfTrace;

- (jboolean)hasFastTrace;

- (jint)trace;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcECFieldElement_AbstractF2m)

FOUNDATION_EXPORT void OrgBouncycastleMathEcECFieldElement_AbstractF2m_init(OrgBouncycastleMathEcECFieldElement_AbstractF2m *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleMathEcECFieldElement_AbstractF2m)

#endif

#if !defined (OrgBouncycastleMathEcECFieldElement_F2m_) && (INCLUDE_ALL_OrgBouncycastleMathEcECFieldElement || defined(INCLUDE_OrgBouncycastleMathEcECFieldElement_F2m))
#define OrgBouncycastleMathEcECFieldElement_F2m_

@class IOSIntArray;
@class JavaMathBigInteger;
@class OrgBouncycastleMathEcECFieldElement;
@class OrgBouncycastleMathEcLongArray;

/*!
 @brief Class representing the Elements of the finite field 
 <code>F<sub>2<sup>m</sup></sub></code> in polynomial basis (PB)
  representation.Both trinomial (TPB) and pentanomial (PPB) polynomial
  basis representations are supported.
 Gaussian normal basis (GNB)
  representation is not supported.
 */
@interface OrgBouncycastleMathEcECFieldElement_F2m : OrgBouncycastleMathEcECFieldElement_AbstractF2m {
 @public
  /*!
   @brief The <code>LongArray</code> holding the bits.
   */
  OrgBouncycastleMathEcLongArray *x_;
}

#pragma mark Public

- (OrgBouncycastleMathEcECFieldElement *)addWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b;

- (OrgBouncycastleMathEcECFieldElement *)addOne;

- (jint)bitLength;

- (OrgBouncycastleMathEcECFieldElement *)divideWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b;

- (jboolean)isEqual:(id)anObject;

- (NSString *)getFieldName;

- (jint)getFieldSize;

/*!
 @return TPB: The integer <code>k</code> where <code>x<sup>m</sup> +
  x<sup>k</sup> + 1</code> represents the reduction polynomial 
 <code>f(z)</code>.<br>
  PPB: The integer <code>k1</code> where <code>x<sup>m</sup> +
  x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
  represents the reduction polynomial <code>f(z)</code>.<br>
 */
- (jint)getK1;

/*!
 @return TPB: Always returns <code>0</code><br>
  PPB: The integer <code>k2</code> where <code>x<sup>m</sup> +
  x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
  represents the reduction polynomial <code>f(z)</code>.<br>
 */
- (jint)getK2;

/*!
 @return TPB: Always set to <code>0</code><br>
  PPB: The integer <code>k3</code> where <code>x<sup>m</sup> +
  x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
  represents the reduction polynomial <code>f(z)</code>.<br>
 */
- (jint)getK3;

/*!
 @return the degree <code>m</code> of the reduction polynomial 
 <code>f(z)</code>.
 */
- (jint)getM;

/*!
 @return the representation of the field 
 <code>F<sub>2<sup>m</sup></sub></code>, either of
  TPB (trinomial
  basis representation) or
  PPB (pentanomial
  basis representation).
 */
- (jint)getRepresentation;

- (NSUInteger)hash;

- (OrgBouncycastleMathEcECFieldElement *)invert;

- (jboolean)isOne;

- (jboolean)isZero;

- (OrgBouncycastleMathEcECFieldElement *)multiplyWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b;

- (OrgBouncycastleMathEcECFieldElement *)multiplyMinusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
                                                             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y;

- (OrgBouncycastleMathEcECFieldElement *)multiplyPlusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
                                                            withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                            withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y;

- (OrgBouncycastleMathEcECFieldElement *)negate;

- (OrgBouncycastleMathEcECFieldElement *)sqrt;

- (OrgBouncycastleMathEcECFieldElement *)square;

- (OrgBouncycastleMathEcECFieldElement *)squareMinusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                           withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y;

- (OrgBouncycastleMathEcECFieldElement *)squarePlusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                          withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y;

- (OrgBouncycastleMathEcECFieldElement *)squarePowWithInt:(jint)pow;

- (OrgBouncycastleMathEcECFieldElement *)subtractWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b;

- (jboolean)testBitZero;

- (JavaMathBigInteger *)toBigInteger;

#pragma mark Package-Private

/*!
 @brief Constructor for PPB.
 @param m The exponent  <code> m </code>  of
    <code> F <sub> 2 <sup> m </sup> </sub> </code> .
 @param k1 The integer  <code> k1 </code>  where  <code> x <sup> m </sup>
   +  x <sup> k3 </sup>  + x <sup> k2 </sup>  + x <sup> k1 </sup>  + 1
  </code>  represents the reduction polynomial  <code> f(z) </code>
  .
 @param k2 The integer  <code> k2 </code>  where  <code> x <sup> m </sup>
   +  x <sup> k3 </sup>  + x <sup> k2 </sup>  + x <sup> k1 </sup>  + 1
  </code>  represents the reduction polynomial  <code> f(z) </code>
  .
 @param k3 The integer  <code> k3 </code>  where  <code> x <sup> m </sup>
   +  x <sup> k3 </sup>  + x <sup> k2 </sup>  + x <sup> k1 </sup>  + 1
  </code>  represents the reduction polynomial  <code> f(z) </code>
  .
 @param x The BigInteger representing the value of the field element.
 */
- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
     withJavaMathBigInteger:(JavaMathBigInteger *)x;

- (instancetype)initWithInt:(jint)m
               withIntArray:(IOSIntArray *)ks
withOrgBouncycastleMathEcLongArray:(OrgBouncycastleMathEcLongArray *)x;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcECFieldElement_F2m)

J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECFieldElement_F2m, x_, OrgBouncycastleMathEcLongArray *)

/*!
 @brief Indicates gaussian normal basis representation (GNB).Number chosen
  according to X9.62.
 GNB is not implemented at present.
 */
inline jint OrgBouncycastleMathEcECFieldElement_F2m_get_GNB(void);
#define OrgBouncycastleMathEcECFieldElement_F2m_GNB 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleMathEcECFieldElement_F2m, GNB, jint)

/*!
 @brief Indicates trinomial basis representation (TPB).Number chosen
  according to X9.62.
 */
inline jint OrgBouncycastleMathEcECFieldElement_F2m_get_TPB(void);
#define OrgBouncycastleMathEcECFieldElement_F2m_TPB 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleMathEcECFieldElement_F2m, TPB, jint)

/*!
 @brief Indicates pentanomial basis representation (PPB).Number chosen
  according to X9.62.
 */
inline jint OrgBouncycastleMathEcECFieldElement_F2m_get_PPB(void);
#define OrgBouncycastleMathEcECFieldElement_F2m_PPB 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleMathEcECFieldElement_F2m, PPB, jint)

FOUNDATION_EXPORT void OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_(OrgBouncycastleMathEcECFieldElement_F2m *self, jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *x);

FOUNDATION_EXPORT OrgBouncycastleMathEcECFieldElement_F2m *new_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *x) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleMathEcECFieldElement_F2m *create_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *x);

FOUNDATION_EXPORT void OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_(OrgBouncycastleMathEcECFieldElement_F2m *self, jint m, IOSIntArray *ks, OrgBouncycastleMathEcLongArray *x);

FOUNDATION_EXPORT OrgBouncycastleMathEcECFieldElement_F2m *new_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_(jint m, IOSIntArray *ks, OrgBouncycastleMathEcLongArray *x) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleMathEcECFieldElement_F2m *create_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_(jint m, IOSIntArray *ks, OrgBouncycastleMathEcLongArray *x);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleMathEcECFieldElement_F2m)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleMathEcECFieldElement")
