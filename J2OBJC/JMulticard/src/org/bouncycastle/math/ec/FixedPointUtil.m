//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/FixedPointUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECLookupTable.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/FixedPointPreCompInfo.h"
#include "org/bouncycastle/math/ec/FixedPointUtil.h"
#include "org/bouncycastle/math/ec/PreCompCallback.h"
#include "org/bouncycastle/math/ec/PreCompInfo.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/math/ec/FixedPointUtil must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleMathEcFixedPointUtil_1 : NSObject < OrgBouncycastleMathEcPreCompCallback > {
 @public
  OrgBouncycastleMathEcECCurve *val$c_;
  OrgBouncycastleMathEcECPoint *val$p_;
}

- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)capture$0
                    withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)capture$1;

- (id<OrgBouncycastleMathEcPreCompInfo>)precomputeWithOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)existing;

- (jboolean)checkExistingWithOrgBouncycastleMathEcFixedPointPreCompInfo:(OrgBouncycastleMathEcFixedPointPreCompInfo *)existingFP
                                                                withInt:(jint)n;

- (jboolean)checkTableWithOrgBouncycastleMathEcECLookupTable:(id<OrgBouncycastleMathEcECLookupTable>)table
                                                     withInt:(jint)n;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcFixedPointUtil_1)

__attribute__((unused)) static void OrgBouncycastleMathEcFixedPointUtil_1_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcFixedPointUtil_1 *self, OrgBouncycastleMathEcECCurve *capture$0, OrgBouncycastleMathEcECPoint *capture$1);

__attribute__((unused)) static OrgBouncycastleMathEcFixedPointUtil_1 *new_OrgBouncycastleMathEcFixedPointUtil_1_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECCurve *capture$0, OrgBouncycastleMathEcECPoint *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleMathEcFixedPointUtil_1 *create_OrgBouncycastleMathEcFixedPointUtil_1_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECCurve *capture$0, OrgBouncycastleMathEcECPoint *capture$1);

__attribute__((unused)) static jboolean OrgBouncycastleMathEcFixedPointUtil_1_checkExistingWithOrgBouncycastleMathEcFixedPointPreCompInfo_withInt_(OrgBouncycastleMathEcFixedPointUtil_1 *self, OrgBouncycastleMathEcFixedPointPreCompInfo *existingFP, jint n);

__attribute__((unused)) static jboolean OrgBouncycastleMathEcFixedPointUtil_1_checkTableWithOrgBouncycastleMathEcECLookupTable_withInt_(OrgBouncycastleMathEcFixedPointUtil_1 *self, id<OrgBouncycastleMathEcECLookupTable> table, jint n);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/FixedPointUtil.java"

NSString *OrgBouncycastleMathEcFixedPointUtil_PRECOMP_NAME = @"bc_fixed_point";


#line 5
@implementation OrgBouncycastleMathEcFixedPointUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 5
- (instancetype)init {
  OrgBouncycastleMathEcFixedPointUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 9
+ (jint)getCombSizeWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)c {
  return OrgBouncycastleMathEcFixedPointUtil_getCombSizeWithOrgBouncycastleMathEcECCurve_(c);
}


#line 15
+ (OrgBouncycastleMathEcFixedPointPreCompInfo *)getFixedPointPreCompInfoWithOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)preCompInfo {
  return OrgBouncycastleMathEcFixedPointUtil_getFixedPointPreCompInfoWithOrgBouncycastleMathEcPreCompInfo_(preCompInfo);
}


#line 20
+ (OrgBouncycastleMathEcFixedPointPreCompInfo *)precomputeWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p {
  return OrgBouncycastleMathEcFixedPointUtil_precomputeWithOrgBouncycastleMathEcECPoint_(p);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcFixedPointPreCompInfo;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcFixedPointPreCompInfo;", 0x9, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getCombSizeWithOrgBouncycastleMathEcECCurve:);
  methods[2].selector = @selector(getFixedPointPreCompInfoWithOrgBouncycastleMathEcPreCompInfo:);
  methods[3].selector = @selector(precomputeWithOrgBouncycastleMathEcECPoint:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PRECOMP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "getCombSize", "LOrgBouncycastleMathEcECCurve;", "getFixedPointPreCompInfo", "LOrgBouncycastleMathEcPreCompInfo;", "precompute", "LOrgBouncycastleMathEcECPoint;", &OrgBouncycastleMathEcFixedPointUtil_PRECOMP_NAME };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcFixedPointUtil = { "FixedPointUtil", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcFixedPointUtil;
}

@end


#line 5
void OrgBouncycastleMathEcFixedPointUtil_init(OrgBouncycastleMathEcFixedPointUtil *self) {
  NSObject_init(self);
}


#line 5
OrgBouncycastleMathEcFixedPointUtil *new_OrgBouncycastleMathEcFixedPointUtil_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcFixedPointUtil, init)
}


#line 5
OrgBouncycastleMathEcFixedPointUtil *create_OrgBouncycastleMathEcFixedPointUtil_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcFixedPointUtil, init)
}

jint OrgBouncycastleMathEcFixedPointUtil_getCombSizeWithOrgBouncycastleMathEcECCurve_(OrgBouncycastleMathEcECCurve *c) {
  OrgBouncycastleMathEcFixedPointUtil_initialize();
  JavaMathBigInteger *order = [((OrgBouncycastleMathEcECCurve *) nil_chk(c)) getOrder];
  return order == nil ? [c getFieldSize] + 1 : [order bitLength];
}

OrgBouncycastleMathEcFixedPointPreCompInfo *OrgBouncycastleMathEcFixedPointUtil_getFixedPointPreCompInfoWithOrgBouncycastleMathEcPreCompInfo_(id<OrgBouncycastleMathEcPreCompInfo> preCompInfo) {
  OrgBouncycastleMathEcFixedPointUtil_initialize();
  return ([preCompInfo isKindOfClass:[OrgBouncycastleMathEcFixedPointPreCompInfo class]]) ? (OrgBouncycastleMathEcFixedPointPreCompInfo *) cast_chk(preCompInfo, [OrgBouncycastleMathEcFixedPointPreCompInfo class]) : nil;
}

OrgBouncycastleMathEcFixedPointPreCompInfo *OrgBouncycastleMathEcFixedPointUtil_precomputeWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECPoint *p) {
  OrgBouncycastleMathEcFixedPointUtil_initialize();
  OrgBouncycastleMathEcECCurve *c = [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  
#line 24
  return (OrgBouncycastleMathEcFixedPointPreCompInfo *) cast_chk([((OrgBouncycastleMathEcECCurve *) nil_chk(c)) precomputeWithOrgBouncycastleMathEcECPoint:p withNSString:OrgBouncycastleMathEcFixedPointUtil_PRECOMP_NAME withOrgBouncycastleMathEcPreCompCallback:new_OrgBouncycastleMathEcFixedPointUtil_1_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(c, p)], [OrgBouncycastleMathEcFixedPointPreCompInfo class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcFixedPointUtil)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/FixedPointUtil.java"


#line 25
@implementation OrgBouncycastleMathEcFixedPointUtil_1


#line 25
- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)capture$0
                    withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)capture$1 {
  OrgBouncycastleMathEcFixedPointUtil_1_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(self, capture$0, capture$1);
  return self;
}


#line 26
- (id<OrgBouncycastleMathEcPreCompInfo>)precomputeWithOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)existing {
  
#line 29
  OrgBouncycastleMathEcFixedPointPreCompInfo *existingFP = ([existing isKindOfClass:[OrgBouncycastleMathEcFixedPointPreCompInfo class]]) ? (OrgBouncycastleMathEcFixedPointPreCompInfo *) cast_chk(existing, [OrgBouncycastleMathEcFixedPointPreCompInfo class]) : nil;
  
#line 31
  jint bits = OrgBouncycastleMathEcFixedPointUtil_getCombSizeWithOrgBouncycastleMathEcECCurve_(val$c_);
  jint minWidth = bits > 250 ? 6 : 5;
  jint n = JreLShift32(1, minWidth);
  
#line 35
  if (OrgBouncycastleMathEcFixedPointUtil_1_checkExistingWithOrgBouncycastleMathEcFixedPointPreCompInfo_withInt_(self, existingFP, n)) {
    
#line 37
    return JreRetainedLocalValue(existingFP);
  }
  
#line 40
  jint d = JreIntDiv((bits + minWidth - 1), minWidth);
  
#line 42
  IOSObjectArray *pow2Table = [IOSObjectArray newArrayWithLength:minWidth + 1 type:OrgBouncycastleMathEcECPoint_class_()];
  (void) IOSObjectArray_Set(pow2Table, 0, val$p_);
  for (jint i = 1; i < minWidth; ++i) {
    
#line 46
    (void) IOSObjectArray_Set(pow2Table, i, [((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(pow2Table, i - 1))) timesPow2WithInt:d]);
  }
  
#line 50
  (void) IOSObjectArray_Set(pow2Table, minWidth, [((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(pow2Table, 0))) subtractWithOrgBouncycastleMathEcECPoint:IOSObjectArray_Get(pow2Table, 1)]);
  
#line 52
  [((OrgBouncycastleMathEcECCurve *) nil_chk(val$c_)) normalizeAllWithOrgBouncycastleMathEcECPointArray:pow2Table];
  
#line 54
  IOSObjectArray *lookupTable = [IOSObjectArray newArrayWithLength:n type:OrgBouncycastleMathEcECPoint_class_()];
  (void) IOSObjectArray_Set(lookupTable, 0, IOSObjectArray_Get(pow2Table, 0));
  
#line 57
  for (jint bit = minWidth - 1; bit >= 0; --bit) {
    
#line 59
    OrgBouncycastleMathEcECPoint *pow2 = IOSObjectArray_Get(pow2Table, bit);
    
#line 61
    jint step = JreLShift32(1, bit);
    for (jint i = step; i < n; i += (JreLShift32(step, 1))) {
      
#line 64
      (void) IOSObjectArray_Set(lookupTable, i, [((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(lookupTable, i - step))) addWithOrgBouncycastleMathEcECPoint:pow2]);
    }
  }
  
#line 68
  [val$c_ normalizeAllWithOrgBouncycastleMathEcECPointArray:lookupTable];
  
#line 70
  OrgBouncycastleMathEcFixedPointPreCompInfo *result = new_OrgBouncycastleMathEcFixedPointPreCompInfo_init();
  [result setLookupTableWithOrgBouncycastleMathEcECLookupTable:[val$c_ createCacheSafeLookupTableWithOrgBouncycastleMathEcECPointArray:lookupTable withInt:0 withInt:lookupTable->size_]];
  [result setOffsetWithOrgBouncycastleMathEcECPoint:IOSObjectArray_Get(pow2Table, minWidth)];
  [result setWidthWithInt:minWidth];
  return JreRetainedLocalValue(result);
}


#line 77
- (jboolean)checkExistingWithOrgBouncycastleMathEcFixedPointPreCompInfo:(OrgBouncycastleMathEcFixedPointPreCompInfo *)existingFP
                                                                withInt:(jint)n {
  return OrgBouncycastleMathEcFixedPointUtil_1_checkExistingWithOrgBouncycastleMathEcFixedPointPreCompInfo_withInt_(self, existingFP, n);
}

- (jboolean)checkTableWithOrgBouncycastleMathEcECLookupTable:(id<OrgBouncycastleMathEcECLookupTable>)table
                                                     withInt:(jint)n {
  return OrgBouncycastleMathEcFixedPointUtil_1_checkTableWithOrgBouncycastleMathEcECLookupTable_withInt_(self, table, n);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcPreCompInfo;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleMathEcECCurve:withOrgBouncycastleMathEcECPoint:);
  methods[1].selector = @selector(precomputeWithOrgBouncycastleMathEcPreCompInfo:);
  methods[2].selector = @selector(checkExistingWithOrgBouncycastleMathEcFixedPointPreCompInfo:withInt:);
  methods[3].selector = @selector(checkTableWithOrgBouncycastleMathEcECLookupTable:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$c_", "LOrgBouncycastleMathEcECCurve;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$p_", "LOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleMathEcECCurve;LOrgBouncycastleMathEcECPoint;", "precompute", "LOrgBouncycastleMathEcPreCompInfo;", "checkExisting", "LOrgBouncycastleMathEcFixedPointPreCompInfo;I", "checkTable", "LOrgBouncycastleMathEcECLookupTable;I", "LOrgBouncycastleMathEcFixedPointUtil;", "precomputeWithOrgBouncycastleMathEcECPoint:" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcFixedPointUtil_1 = { "", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x8000, 4, 2, 7, -1, 8, -1, -1 };
  return &_OrgBouncycastleMathEcFixedPointUtil_1;
}

@end


#line 25
void OrgBouncycastleMathEcFixedPointUtil_1_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcFixedPointUtil_1 *self, OrgBouncycastleMathEcECCurve *capture$0, OrgBouncycastleMathEcECPoint *capture$1) {
  self->val$c_ = capture$0;
  self->val$p_ = capture$1;
  NSObject_init(self);
}


#line 25
OrgBouncycastleMathEcFixedPointUtil_1 *new_OrgBouncycastleMathEcFixedPointUtil_1_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECCurve *capture$0, OrgBouncycastleMathEcECPoint *capture$1) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcFixedPointUtil_1, initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_, capture$0, capture$1)
}


#line 25
OrgBouncycastleMathEcFixedPointUtil_1 *create_OrgBouncycastleMathEcFixedPointUtil_1_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECCurve *capture$0, OrgBouncycastleMathEcECPoint *capture$1) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcFixedPointUtil_1, initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_, capture$0, capture$1)
}


#line 77
jboolean OrgBouncycastleMathEcFixedPointUtil_1_checkExistingWithOrgBouncycastleMathEcFixedPointPreCompInfo_withInt_(OrgBouncycastleMathEcFixedPointUtil_1 *self, OrgBouncycastleMathEcFixedPointPreCompInfo *existingFP, jint n) {
  
#line 79
  return existingFP != nil && OrgBouncycastleMathEcFixedPointUtil_1_checkTableWithOrgBouncycastleMathEcECLookupTable_withInt_(self, [existingFP getLookupTable], n);
}


#line 82
jboolean OrgBouncycastleMathEcFixedPointUtil_1_checkTableWithOrgBouncycastleMathEcECLookupTable_withInt_(OrgBouncycastleMathEcFixedPointUtil_1 *self, id<OrgBouncycastleMathEcECLookupTable> table, jint n) {
  
#line 84
  return table != nil && [table getSize] >= n;
}
