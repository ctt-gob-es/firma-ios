//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/AbstractECMultiplier.java
//

#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/math/ec/AbstractECMultiplier.h"
#include "org/bouncycastle/math/ec/ECAlgorithms.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECPoint.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/math/ec/AbstractECMultiplier must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/AbstractECMultiplier.java"


#line 5
@implementation OrgBouncycastleMathEcAbstractECMultiplier

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 5
- (instancetype)init {
  OrgBouncycastleMathEcAbstractECMultiplier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 7
- (OrgBouncycastleMathEcECPoint *)multiplyWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p
                                                    withJavaMathBigInteger:(JavaMathBigInteger *)k {
  
#line 10
  jint sign = [((JavaMathBigInteger *) nil_chk(k)) signum];
  if (sign == 0 || [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) isInfinity]) {
    
#line 13
    return [((OrgBouncycastleMathEcECCurve *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve])) getInfinity];
  }
  
#line 16
  OrgBouncycastleMathEcECPoint *positive = [self multiplyPositiveWithOrgBouncycastleMathEcECPoint:p withJavaMathBigInteger:[k abs]];
  OrgBouncycastleMathEcECPoint *result = sign > 0 ? positive : [((OrgBouncycastleMathEcECPoint *) nil_chk(positive)) negate];
  
#line 23
  return [self checkResultWithOrgBouncycastleMathEcECPoint:result];
}

- (OrgBouncycastleMathEcECPoint *)multiplyPositiveWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p
                                                            withJavaMathBigInteger:(JavaMathBigInteger *)k {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 28
- (OrgBouncycastleMathEcECPoint *)checkResultWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p {
  
#line 30
  return OrgBouncycastleMathEcECAlgorithms_implCheckResultWithOrgBouncycastleMathEcECPoint_(p);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x404, 2, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x4, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(multiplyWithOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[2].selector = @selector(multiplyPositiveWithOrgBouncycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[3].selector = @selector(checkResultWithOrgBouncycastleMathEcECPoint:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "multiply", "LOrgBouncycastleMathEcECPoint;LJavaMathBigInteger;", "multiplyPositive", "checkResult", "LOrgBouncycastleMathEcECPoint;" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcAbstractECMultiplier = { "AbstractECMultiplier", "org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x401, 4, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcAbstractECMultiplier;
}

@end


#line 5
void OrgBouncycastleMathEcAbstractECMultiplier_init(OrgBouncycastleMathEcAbstractECMultiplier *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcAbstractECMultiplier)
