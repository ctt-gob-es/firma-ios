//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/endo/EndoUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/math/ec/ECConstants.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/ECPointMap.h"
#include "org/bouncycastle/math/ec/PreCompCallback.h"
#include "org/bouncycastle/math/ec/PreCompInfo.h"
#include "org/bouncycastle/math/ec/endo/ECEndomorphism.h"
#include "org/bouncycastle/math/ec/endo/EndoPreCompInfo.h"
#include "org/bouncycastle/math/ec/endo/EndoUtil.h"
#include "org/bouncycastle/math/ec/endo/ScalarSplitParameters.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/math/ec/endo/EndoUtil must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleMathEcEndoEndoUtil ()

+ (JavaMathBigInteger *)calculateBWithJavaMathBigInteger:(JavaMathBigInteger *)k
                                  withJavaMathBigInteger:(JavaMathBigInteger *)g
                                                 withInt:(jint)t;

@end

__attribute__((unused)) static JavaMathBigInteger *OrgBouncycastleMathEcEndoEndoUtil_calculateBWithJavaMathBigInteger_withJavaMathBigInteger_withInt_(JavaMathBigInteger *k, JavaMathBigInteger *g, jint t);

@interface OrgBouncycastleMathEcEndoEndoUtil_1 : NSObject < OrgBouncycastleMathEcPreCompCallback > {
 @public
  id<OrgBouncycastleMathEcEndoECEndomorphism> val$endomorphism_;
  OrgBouncycastleMathEcECPoint *val$p_;
}

- (instancetype)initWithOrgBouncycastleMathEcEndoECEndomorphism:(id<OrgBouncycastleMathEcEndoECEndomorphism>)capture$0
                               withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)capture$1;

- (id<OrgBouncycastleMathEcPreCompInfo>)precomputeWithOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)existing;

- (jboolean)checkExistingWithOrgBouncycastleMathEcEndoEndoPreCompInfo:(OrgBouncycastleMathEcEndoEndoPreCompInfo *)existingEndo
                          withOrgBouncycastleMathEcEndoECEndomorphism:(id<OrgBouncycastleMathEcEndoECEndomorphism>)endomorphism;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcEndoEndoUtil_1)

__attribute__((unused)) static void OrgBouncycastleMathEcEndoEndoUtil_1_initWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcEndoEndoUtil_1 *self, id<OrgBouncycastleMathEcEndoECEndomorphism> capture$0, OrgBouncycastleMathEcECPoint *capture$1);

__attribute__((unused)) static OrgBouncycastleMathEcEndoEndoUtil_1 *new_OrgBouncycastleMathEcEndoEndoUtil_1_initWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPoint_(id<OrgBouncycastleMathEcEndoECEndomorphism> capture$0, OrgBouncycastleMathEcECPoint *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleMathEcEndoEndoUtil_1 *create_OrgBouncycastleMathEcEndoEndoUtil_1_initWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPoint_(id<OrgBouncycastleMathEcEndoECEndomorphism> capture$0, OrgBouncycastleMathEcECPoint *capture$1);

__attribute__((unused)) static jboolean OrgBouncycastleMathEcEndoEndoUtil_1_checkExistingWithOrgBouncycastleMathEcEndoEndoPreCompInfo_withOrgBouncycastleMathEcEndoECEndomorphism_(OrgBouncycastleMathEcEndoEndoUtil_1 *self, OrgBouncycastleMathEcEndoEndoPreCompInfo *existingEndo, id<OrgBouncycastleMathEcEndoECEndomorphism> endomorphism);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/endo/EndoUtil.java"

NSString *OrgBouncycastleMathEcEndoEndoUtil_PRECOMP_NAME = @"bc_endo";


#line 11
@implementation OrgBouncycastleMathEcEndoEndoUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 11
- (instancetype)init {
  OrgBouncycastleMathEcEndoEndoUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 15
+ (IOSObjectArray *)decomposeScalarWithOrgBouncycastleMathEcEndoScalarSplitParameters:(OrgBouncycastleMathEcEndoScalarSplitParameters *)p
                                                               withJavaMathBigInteger:(JavaMathBigInteger *)k {
  return OrgBouncycastleMathEcEndoEndoUtil_decomposeScalarWithOrgBouncycastleMathEcEndoScalarSplitParameters_withJavaMathBigInteger_(p, k);
}


#line 27
+ (OrgBouncycastleMathEcECPoint *)mapPointWithOrgBouncycastleMathEcEndoECEndomorphism:(id<OrgBouncycastleMathEcEndoECEndomorphism>)endomorphism
                                                     withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p {
  return OrgBouncycastleMathEcEndoEndoUtil_mapPointWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPoint_(endomorphism, p);
}


#line 62
+ (JavaMathBigInteger *)calculateBWithJavaMathBigInteger:(JavaMathBigInteger *)k
                                  withJavaMathBigInteger:(JavaMathBigInteger *)g
                                                 withInt:(jint)t {
  return OrgBouncycastleMathEcEndoEndoUtil_calculateBWithJavaMathBigInteger_withJavaMathBigInteger_withInt_(k, g, t);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(decomposeScalarWithOrgBouncycastleMathEcEndoScalarSplitParameters:withJavaMathBigInteger:);
  methods[2].selector = @selector(mapPointWithOrgBouncycastleMathEcEndoECEndomorphism:withOrgBouncycastleMathEcECPoint:);
  methods[3].selector = @selector(calculateBWithJavaMathBigInteger:withJavaMathBigInteger:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PRECOMP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "decomposeScalar", "LOrgBouncycastleMathEcEndoScalarSplitParameters;LJavaMathBigInteger;", "mapPoint", "LOrgBouncycastleMathEcEndoECEndomorphism;LOrgBouncycastleMathEcECPoint;", "calculateB", "LJavaMathBigInteger;LJavaMathBigInteger;I", &OrgBouncycastleMathEcEndoEndoUtil_PRECOMP_NAME };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcEndoEndoUtil = { "EndoUtil", "org.bouncycastle.math.ec.endo", ptrTable, methods, fields, 7, 0x401, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcEndoEndoUtil;
}

@end


#line 11
void OrgBouncycastleMathEcEndoEndoUtil_init(OrgBouncycastleMathEcEndoEndoUtil *self) {
  NSObject_init(self);
}

IOSObjectArray *OrgBouncycastleMathEcEndoEndoUtil_decomposeScalarWithOrgBouncycastleMathEcEndoScalarSplitParameters_withJavaMathBigInteger_(OrgBouncycastleMathEcEndoScalarSplitParameters *p, JavaMathBigInteger *k) {
  OrgBouncycastleMathEcEndoEndoUtil_initialize();
  jint bits = [((OrgBouncycastleMathEcEndoScalarSplitParameters *) nil_chk(p)) getBits];
  JavaMathBigInteger *b1 = OrgBouncycastleMathEcEndoEndoUtil_calculateBWithJavaMathBigInteger_withJavaMathBigInteger_withInt_(k, [p getG1], bits);
  JavaMathBigInteger *b2 = OrgBouncycastleMathEcEndoEndoUtil_calculateBWithJavaMathBigInteger_withJavaMathBigInteger_withInt_(k, [p getG2], bits);
  
#line 21
  JavaMathBigInteger *a = [((JavaMathBigInteger *) nil_chk(k)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(b1)) multiplyWithJavaMathBigInteger:[p getV1A]]))) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(b2)) multiplyWithJavaMathBigInteger:[p getV2A]]]];
  JavaMathBigInteger *b = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(([b1 multiplyWithJavaMathBigInteger:[p getV1B]]))) addWithJavaMathBigInteger:[b2 multiplyWithJavaMathBigInteger:[p getV2B]]])) negate];
  
#line 24
  return [IOSObjectArray newArrayWithObjects:(id[]){ a, b } count:2 type:JavaMathBigInteger_class_()];
}


#line 27
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcEndoEndoUtil_mapPointWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPoint_(id<OrgBouncycastleMathEcEndoECEndomorphism> endomorphism, OrgBouncycastleMathEcECPoint *p) {
  OrgBouncycastleMathEcEndoEndoUtil_initialize();
  OrgBouncycastleMathEcECCurve *c = [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  
#line 31
  OrgBouncycastleMathEcEndoEndoPreCompInfo *precomp = (OrgBouncycastleMathEcEndoEndoPreCompInfo *) cast_chk([((OrgBouncycastleMathEcECCurve *) nil_chk(c)) precomputeWithOrgBouncycastleMathEcECPoint:p withNSString:OrgBouncycastleMathEcEndoEndoUtil_PRECOMP_NAME withOrgBouncycastleMathEcPreCompCallback:new_OrgBouncycastleMathEcEndoEndoUtil_1_initWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPoint_(endomorphism, p)], [OrgBouncycastleMathEcEndoEndoPreCompInfo class]);
  
#line 59
  return [((OrgBouncycastleMathEcEndoEndoPreCompInfo *) nil_chk(precomp)) getMappedPoint];
}


#line 62
JavaMathBigInteger *OrgBouncycastleMathEcEndoEndoUtil_calculateBWithJavaMathBigInteger_withJavaMathBigInteger_withInt_(JavaMathBigInteger *k, JavaMathBigInteger *g, jint t) {
  OrgBouncycastleMathEcEndoEndoUtil_initialize();
  jboolean negative = ([((JavaMathBigInteger *) nil_chk(g)) signum] < 0);
  JavaMathBigInteger *b = [((JavaMathBigInteger *) nil_chk(k)) multiplyWithJavaMathBigInteger:[g abs]];
  jboolean extra = [((JavaMathBigInteger *) nil_chk(b)) testBitWithInt:t - 1];
  b = [b shiftRightWithInt:t];
  if (extra) {
    
#line 70
    b = [((JavaMathBigInteger *) nil_chk(b)) addWithJavaMathBigInteger:JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)];
  }
  return negative ? [((JavaMathBigInteger *) nil_chk(b)) negate] : b;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcEndoEndoUtil)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/endo/EndoUtil.java"


#line 32
@implementation OrgBouncycastleMathEcEndoEndoUtil_1


#line 32
- (instancetype)initWithOrgBouncycastleMathEcEndoECEndomorphism:(id<OrgBouncycastleMathEcEndoECEndomorphism>)capture$0
                               withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)capture$1 {
  OrgBouncycastleMathEcEndoEndoUtil_1_initWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPoint_(self, capture$0, capture$1);
  return self;
}


#line 33
- (id<OrgBouncycastleMathEcPreCompInfo>)precomputeWithOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)existing {
  
#line 36
  OrgBouncycastleMathEcEndoEndoPreCompInfo *existingEndo = ([existing isKindOfClass:[OrgBouncycastleMathEcEndoEndoPreCompInfo class]]) ? (OrgBouncycastleMathEcEndoEndoPreCompInfo *) cast_chk(existing, [OrgBouncycastleMathEcEndoEndoPreCompInfo class]) : nil;
  
#line 38
  if (OrgBouncycastleMathEcEndoEndoUtil_1_checkExistingWithOrgBouncycastleMathEcEndoEndoPreCompInfo_withOrgBouncycastleMathEcEndoECEndomorphism_(self, existingEndo, val$endomorphism_)) {
    
#line 40
    return JreRetainedLocalValue(existingEndo);
  }
  
#line 43
  OrgBouncycastleMathEcECPoint *mappedPoint = [((id<OrgBouncycastleMathEcECPointMap>) nil_chk([((id<OrgBouncycastleMathEcEndoECEndomorphism>) nil_chk(val$endomorphism_)) getPointMap])) mapWithOrgBouncycastleMathEcECPoint:val$p_];
  
#line 45
  OrgBouncycastleMathEcEndoEndoPreCompInfo *result = new_OrgBouncycastleMathEcEndoEndoPreCompInfo_init();
  [result setEndomorphismWithOrgBouncycastleMathEcEndoECEndomorphism:val$endomorphism_];
  [result setMappedPointWithOrgBouncycastleMathEcECPoint:mappedPoint];
  return JreRetainedLocalValue(result);
}


#line 51
- (jboolean)checkExistingWithOrgBouncycastleMathEcEndoEndoPreCompInfo:(OrgBouncycastleMathEcEndoEndoPreCompInfo *)existingEndo
                          withOrgBouncycastleMathEcEndoECEndomorphism:(id<OrgBouncycastleMathEcEndoECEndomorphism>)endomorphism {
  return OrgBouncycastleMathEcEndoEndoUtil_1_checkExistingWithOrgBouncycastleMathEcEndoEndoPreCompInfo_withOrgBouncycastleMathEcEndoECEndomorphism_(self, existingEndo, endomorphism);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcPreCompInfo;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleMathEcEndoECEndomorphism:withOrgBouncycastleMathEcECPoint:);
  methods[1].selector = @selector(precomputeWithOrgBouncycastleMathEcPreCompInfo:);
  methods[2].selector = @selector(checkExistingWithOrgBouncycastleMathEcEndoEndoPreCompInfo:withOrgBouncycastleMathEcEndoECEndomorphism:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$endomorphism_", "LOrgBouncycastleMathEcEndoECEndomorphism;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$p_", "LOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleMathEcEndoECEndomorphism;LOrgBouncycastleMathEcECPoint;", "precompute", "LOrgBouncycastleMathEcPreCompInfo;", "checkExisting", "LOrgBouncycastleMathEcEndoEndoPreCompInfo;LOrgBouncycastleMathEcEndoECEndomorphism;", "LOrgBouncycastleMathEcEndoEndoUtil;", "mapPointWithOrgBouncycastleMathEcEndoECEndomorphism:withOrgBouncycastleMathEcECPoint:" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcEndoEndoUtil_1 = { "", "org.bouncycastle.math.ec.endo", ptrTable, methods, fields, 7, 0x8000, 3, 2, 5, -1, 6, -1, -1 };
  return &_OrgBouncycastleMathEcEndoEndoUtil_1;
}

@end


#line 32
void OrgBouncycastleMathEcEndoEndoUtil_1_initWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcEndoEndoUtil_1 *self, id<OrgBouncycastleMathEcEndoECEndomorphism> capture$0, OrgBouncycastleMathEcECPoint *capture$1) {
  self->val$endomorphism_ = capture$0;
  self->val$p_ = capture$1;
  NSObject_init(self);
}


#line 32
OrgBouncycastleMathEcEndoEndoUtil_1 *new_OrgBouncycastleMathEcEndoEndoUtil_1_initWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPoint_(id<OrgBouncycastleMathEcEndoECEndomorphism> capture$0, OrgBouncycastleMathEcECPoint *capture$1) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcEndoEndoUtil_1, initWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPoint_, capture$0, capture$1)
}


#line 32
OrgBouncycastleMathEcEndoEndoUtil_1 *create_OrgBouncycastleMathEcEndoEndoUtil_1_initWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPoint_(id<OrgBouncycastleMathEcEndoECEndomorphism> capture$0, OrgBouncycastleMathEcECPoint *capture$1) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcEndoEndoUtil_1, initWithOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECPoint_, capture$0, capture$1)
}


#line 51
jboolean OrgBouncycastleMathEcEndoEndoUtil_1_checkExistingWithOrgBouncycastleMathEcEndoEndoPreCompInfo_withOrgBouncycastleMathEcEndoECEndomorphism_(OrgBouncycastleMathEcEndoEndoUtil_1 *self, OrgBouncycastleMathEcEndoEndoPreCompInfo *existingEndo, id<OrgBouncycastleMathEcEndoECEndomorphism> endomorphism) {
  
#line 53
  return nil != existingEndo && JreObjectEqualsEquals(
#line 54
  [existingEndo getEndomorphism], endomorphism) &&
#line 55
  [existingEndo getMappedPoint] != nil;
}
