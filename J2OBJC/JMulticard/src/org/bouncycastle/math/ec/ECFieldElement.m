//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECFieldElement.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "java/util/Random.h"
#include "org/bouncycastle/math/ec/ECConstants.h"
#include "org/bouncycastle/math/ec/ECFieldElement.h"
#include "org/bouncycastle/math/ec/LongArray.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/BigIntegers.h"
#include "org/bouncycastle/util/Integers.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/math/ec/ECFieldElement must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleMathEcECFieldElement_Fp ()

- (OrgBouncycastleMathEcECFieldElement *)checkSqrtWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)z;

- (IOSObjectArray *)lucasSequenceWithJavaMathBigInteger:(JavaMathBigInteger *)P
                                 withJavaMathBigInteger:(JavaMathBigInteger *)Q
                                 withJavaMathBigInteger:(JavaMathBigInteger *)k;

@end

__attribute__((unused)) static OrgBouncycastleMathEcECFieldElement *OrgBouncycastleMathEcECFieldElement_Fp_checkSqrtWithOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECFieldElement_Fp *self, OrgBouncycastleMathEcECFieldElement *z);

__attribute__((unused)) static IOSObjectArray *OrgBouncycastleMathEcECFieldElement_Fp_lucasSequenceWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECFieldElement_Fp *self, JavaMathBigInteger *P, JavaMathBigInteger *Q, JavaMathBigInteger *k);

@interface OrgBouncycastleMathEcECFieldElement_F2m () {
 @public
  /*!
   @brief TPB or PPB.
   */
  jint representation_;
  /*!
   @brief The exponent <code>m</code> of <code>F<sub>2<sup>m</sup></sub></code>.
   */
  jint m_;
  IOSIntArray *ks_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECFieldElement_F2m, ks_, IOSIntArray *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECFieldElement.java"


#line 10
@implementation OrgBouncycastleMathEcECFieldElement


#line 13
- (JavaMathBigInteger *)toBigInteger {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 14
- (NSString *)getFieldName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 15
- (jint)getFieldSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 16
- (OrgBouncycastleMathEcECFieldElement *)addWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 17
- (OrgBouncycastleMathEcECFieldElement *)addOne {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 18
- (OrgBouncycastleMathEcECFieldElement *)subtractWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 19
- (OrgBouncycastleMathEcECFieldElement *)multiplyWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 20
- (OrgBouncycastleMathEcECFieldElement *)divideWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 21
- (OrgBouncycastleMathEcECFieldElement *)negate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 22
- (OrgBouncycastleMathEcECFieldElement *)square {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 23
- (OrgBouncycastleMathEcECFieldElement *)invert {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 24
- (OrgBouncycastleMathEcECFieldElement *)sqrt {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 26
- (instancetype)init {
  OrgBouncycastleMathEcECFieldElement_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 31
- (jint)bitLength {
  
#line 33
  return [((JavaMathBigInteger *) nil_chk([self toBigInteger])) bitLength];
}


#line 36
- (jboolean)isOne {
  
#line 38
  return [self bitLength] == 1;
}


#line 41
- (jboolean)isZero {
  
#line 43
  return 0 == [((JavaMathBigInteger *) nil_chk([self toBigInteger])) signum];
}


#line 46
- (OrgBouncycastleMathEcECFieldElement *)multiplyMinusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
                                                             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  
#line 48
  return [((OrgBouncycastleMathEcECFieldElement *) nil_chk([self multiplyWithOrgBouncycastleMathEcECFieldElement:b])) subtractWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(x)) multiplyWithOrgBouncycastleMathEcECFieldElement:y]];
}


#line 51
- (OrgBouncycastleMathEcECFieldElement *)multiplyPlusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
                                                            withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                            withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  
#line 53
  return [((OrgBouncycastleMathEcECFieldElement *) nil_chk([self multiplyWithOrgBouncycastleMathEcECFieldElement:b])) addWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(x)) multiplyWithOrgBouncycastleMathEcECFieldElement:y]];
}


#line 56
- (OrgBouncycastleMathEcECFieldElement *)squareMinusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                           withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  return [((OrgBouncycastleMathEcECFieldElement *) nil_chk([self square])) subtractWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(x)) multiplyWithOrgBouncycastleMathEcECFieldElement:y]];
}

- (OrgBouncycastleMathEcECFieldElement *)squarePlusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                          withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  return [((OrgBouncycastleMathEcECFieldElement *) nil_chk([self square])) addWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(x)) multiplyWithOrgBouncycastleMathEcECFieldElement:y]];
}

- (OrgBouncycastleMathEcECFieldElement *)squarePowWithInt:(jint)pow {
  
#line 68
  OrgBouncycastleMathEcECFieldElement *r = self;
  for (jint i = 0; i < pow; ++i) {
    
#line 71
    r = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(r)) square];
  }
  return r;
}


#line 76
- (jboolean)testBitZero {
  
#line 78
  return [((JavaMathBigInteger *) nil_chk([self toBigInteger])) testBitWithInt:0];
}


#line 81
- (NSString *)description {
  
#line 84
  return [((JavaMathBigInteger *) nil_chk([self toBigInteger])) toStringWithInt:16];
}

- (IOSByteArray *)getEncoded {
  
#line 89
  return OrgBouncycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_(JreIntDiv(([self getFieldSize] + 7), 8), [self toBigInteger]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaMathBigInteger;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x401, 2, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x401, 3, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x401, 4, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(toBigInteger);
  methods[1].selector = @selector(getFieldName);
  methods[2].selector = @selector(getFieldSize);
  methods[3].selector = @selector(addWithOrgBouncycastleMathEcECFieldElement:);
  methods[4].selector = @selector(addOne);
  methods[5].selector = @selector(subtractWithOrgBouncycastleMathEcECFieldElement:);
  methods[6].selector = @selector(multiplyWithOrgBouncycastleMathEcECFieldElement:);
  methods[7].selector = @selector(divideWithOrgBouncycastleMathEcECFieldElement:);
  methods[8].selector = @selector(negate);
  methods[9].selector = @selector(square);
  methods[10].selector = @selector(invert);
  methods[11].selector = @selector(sqrt);
  methods[12].selector = @selector(init);
  methods[13].selector = @selector(bitLength);
  methods[14].selector = @selector(isOne);
  methods[15].selector = @selector(isZero);
  methods[16].selector = @selector(multiplyMinusProductWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[17].selector = @selector(multiplyPlusProductWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[18].selector = @selector(squareMinusProductWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[19].selector = @selector(squarePlusProductWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[20].selector = @selector(squarePowWithInt:);
  methods[21].selector = @selector(testBitZero);
  methods[22].selector = @selector(description);
  methods[23].selector = @selector(getEncoded);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "add", "LOrgBouncycastleMathEcECFieldElement;", "subtract", "multiply", "divide", "multiplyMinusProduct", "LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;", "multiplyPlusProduct", "squareMinusProduct", "LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;", "squarePlusProduct", "squarePow", "I", "toString", "LOrgBouncycastleMathEcECFieldElement_AbstractFp;LOrgBouncycastleMathEcECFieldElement_Fp;LOrgBouncycastleMathEcECFieldElement_AbstractF2m;LOrgBouncycastleMathEcECFieldElement_F2m;" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECFieldElement = { "ECFieldElement", "org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x401, 24, 0, -1, 14, -1, -1, -1 };
  return &_OrgBouncycastleMathEcECFieldElement;
}

@end


#line 26
void OrgBouncycastleMathEcECFieldElement_init(OrgBouncycastleMathEcECFieldElement *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECFieldElement)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECFieldElement.java"


#line 92
@implementation OrgBouncycastleMathEcECFieldElement_AbstractFp

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 92
- (instancetype)init {
  OrgBouncycastleMathEcECFieldElement_AbstractFp_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgBouncycastleMathEcECFieldElement;" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECFieldElement_AbstractFp = { "AbstractFp", "org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x409, 1, 0, 0, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcECFieldElement_AbstractFp;
}

@end


#line 92
void OrgBouncycastleMathEcECFieldElement_AbstractFp_init(OrgBouncycastleMathEcECFieldElement_AbstractFp *self) {
  OrgBouncycastleMathEcECFieldElement_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECFieldElement_AbstractFp)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECFieldElement.java"


#line 96
@implementation OrgBouncycastleMathEcECFieldElement_Fp


#line 100
+ (JavaMathBigInteger *)calculateResidueWithJavaMathBigInteger:(JavaMathBigInteger *)p {
  return OrgBouncycastleMathEcECFieldElement_Fp_calculateResidueWithJavaMathBigInteger_(p);
}


#line 114
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)r
                    withJavaMathBigInteger:(JavaMathBigInteger *)x {
  OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, q, r, x);
  return self;
}


#line 126
- (JavaMathBigInteger *)toBigInteger {
  
#line 129
  return x_;
}


#line 137
- (NSString *)getFieldName {
  
#line 140
  return @"Fp";
}

- (jint)getFieldSize {
  
#line 146
  return [((JavaMathBigInteger *) nil_chk(q_)) bitLength];
}

- (JavaMathBigInteger *)getQ {
  
#line 151
  return q_;
}


#line 154
- (OrgBouncycastleMathEcECFieldElement *)addWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b {
  
#line 157
  return new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modAddWithJavaMathBigInteger:x_ withJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(b)) toBigInteger]]);
}

- (OrgBouncycastleMathEcECFieldElement *)addOne {
  
#line 163
  JavaMathBigInteger *x2 = [((JavaMathBigInteger *) nil_chk(x_)) addWithJavaMathBigInteger:JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)];
  if ([((JavaMathBigInteger *) nil_chk(x2)) compareToWithId:q_] == 0) {
    
#line 166
    x2 = JreLoadStatic(OrgBouncycastleMathEcECConstants, ZERO);
  }
  return new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, x2);
}


#line 171
- (OrgBouncycastleMathEcECFieldElement *)subtractWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b {
  
#line 174
  return new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modSubtractWithJavaMathBigInteger:x_ withJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(b)) toBigInteger]]);
}

- (OrgBouncycastleMathEcECFieldElement *)multiplyWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b {
  
#line 180
  return new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modMultWithJavaMathBigInteger:x_ withJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(b)) toBigInteger]]);
}

- (OrgBouncycastleMathEcECFieldElement *)multiplyMinusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
                                                             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  JavaMathBigInteger *ax = self->x_;
  
#line 186
  JavaMathBigInteger *bx = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(b)) toBigInteger];
  
#line 186
  JavaMathBigInteger *xx = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(x)) toBigInteger];
  
#line 186
  JavaMathBigInteger *yx = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(y)) toBigInteger];
  JavaMathBigInteger *ab = [((JavaMathBigInteger *) nil_chk(ax)) multiplyWithJavaMathBigInteger:bx];
  JavaMathBigInteger *xy = [((JavaMathBigInteger *) nil_chk(xx)) multiplyWithJavaMathBigInteger:yx];
  return new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(ab)) subtractWithJavaMathBigInteger:xy]]);
}


#line 192
- (OrgBouncycastleMathEcECFieldElement *)multiplyPlusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
                                                            withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                            withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  JavaMathBigInteger *ax = self->x_;
  
#line 195
  JavaMathBigInteger *bx = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(b)) toBigInteger];
  
#line 195
  JavaMathBigInteger *xx = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(x)) toBigInteger];
  
#line 195
  JavaMathBigInteger *yx = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(y)) toBigInteger];
  JavaMathBigInteger *ab = [((JavaMathBigInteger *) nil_chk(ax)) multiplyWithJavaMathBigInteger:bx];
  JavaMathBigInteger *xy = [((JavaMathBigInteger *) nil_chk(xx)) multiplyWithJavaMathBigInteger:yx];
  return new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(ab)) addWithJavaMathBigInteger:xy]]);
}


#line 201
- (OrgBouncycastleMathEcECFieldElement *)divideWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b {
  
#line 204
  return new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modMultWithJavaMathBigInteger:x_ withJavaMathBigInteger:[self modInverseWithJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(b)) toBigInteger]]]);
}

- (OrgBouncycastleMathEcECFieldElement *)negate {
  
#line 210
  return [((JavaMathBigInteger *) nil_chk(x_)) signum] == 0 ? self : new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [((JavaMathBigInteger *) nil_chk(q_)) subtractWithJavaMathBigInteger:x_]);
}

- (OrgBouncycastleMathEcECFieldElement *)square {
  
#line 216
  return new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modMultWithJavaMathBigInteger:x_ withJavaMathBigInteger:x_]);
}

- (OrgBouncycastleMathEcECFieldElement *)squareMinusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                           withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  
#line 222
  JavaMathBigInteger *ax = self->x_;
  
#line 222
  JavaMathBigInteger *xx = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(x)) toBigInteger];
  
#line 222
  JavaMathBigInteger *yx = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(y)) toBigInteger];
  JavaMathBigInteger *aa = [((JavaMathBigInteger *) nil_chk(ax)) multiplyWithJavaMathBigInteger:ax];
  JavaMathBigInteger *xy = [((JavaMathBigInteger *) nil_chk(xx)) multiplyWithJavaMathBigInteger:yx];
  return new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(aa)) subtractWithJavaMathBigInteger:xy]]);
}


#line 228
- (OrgBouncycastleMathEcECFieldElement *)squarePlusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                          withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  
#line 231
  JavaMathBigInteger *ax = self->x_;
  
#line 231
  JavaMathBigInteger *xx = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(x)) toBigInteger];
  
#line 231
  JavaMathBigInteger *yx = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(y)) toBigInteger];
  JavaMathBigInteger *aa = [((JavaMathBigInteger *) nil_chk(ax)) multiplyWithJavaMathBigInteger:ax];
  JavaMathBigInteger *xy = [((JavaMathBigInteger *) nil_chk(xx)) multiplyWithJavaMathBigInteger:yx];
  return new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(aa)) addWithJavaMathBigInteger:xy]]);
}


#line 237
- (OrgBouncycastleMathEcECFieldElement *)invert {
  
#line 241
  return new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modInverseWithJavaMathBigInteger:x_]);
}


#line 249
- (OrgBouncycastleMathEcECFieldElement *)sqrt {
  
#line 252
  if ([self isZero] || [self isOne]) {
    
#line 254
    return self;
  }
  
#line 257
  if (![((JavaMathBigInteger *) nil_chk(q_)) testBitWithInt:0]) {
    
#line 259
    @throw new_JavaLangRuntimeException_initWithNSString_(@"not done yet");
  }
  
#line 265
  if ([((JavaMathBigInteger *) nil_chk(q_)) testBitWithInt:1]) {
    
#line 267
    JavaMathBigInteger *e = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(q_)) shiftRightWithInt:2])) addWithJavaMathBigInteger:JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)];
    return OrgBouncycastleMathEcECFieldElement_Fp_checkSqrtWithOrgBouncycastleMathEcECFieldElement_(self, new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [((JavaMathBigInteger *) nil_chk(x_)) modPowWithJavaMathBigInteger:e withJavaMathBigInteger:q_]));
  }
  
#line 271
  if ([((JavaMathBigInteger *) nil_chk(q_)) testBitWithInt:2]) {
    
#line 273
    JavaMathBigInteger *t1 = [((JavaMathBigInteger *) nil_chk(x_)) modPowWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(q_)) shiftRightWithInt:3] withJavaMathBigInteger:q_];
    JavaMathBigInteger *t2 = [self modMultWithJavaMathBigInteger:t1 withJavaMathBigInteger:x_];
    JavaMathBigInteger *t3 = [self modMultWithJavaMathBigInteger:t2 withJavaMathBigInteger:t1];
    
#line 277
    if ([((JavaMathBigInteger *) nil_chk(t3)) isEqual:JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)]) {
      
#line 279
      return OrgBouncycastleMathEcECFieldElement_Fp_checkSqrtWithOrgBouncycastleMathEcECFieldElement_(self, new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, t2));
    }
    
#line 283
    JavaMathBigInteger *t4 = [((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgBouncycastleMathEcECConstants, TWO))) modPowWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(q_)) shiftRightWithInt:2] withJavaMathBigInteger:q_];
    
#line 285
    JavaMathBigInteger *y = [self modMultWithJavaMathBigInteger:t2 withJavaMathBigInteger:t4];
    
#line 287
    return OrgBouncycastleMathEcECFieldElement_Fp_checkSqrtWithOrgBouncycastleMathEcECFieldElement_(self, new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, y));
  }
  
#line 292
  JavaMathBigInteger *legendreExponent = [((JavaMathBigInteger *) nil_chk(q_)) shiftRightWithInt:1];
  if (![((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(x_)) modPowWithJavaMathBigInteger:legendreExponent withJavaMathBigInteger:q_])) isEqual:JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)]) {
    
#line 295
    return nil;
  }
  
#line 298
  JavaMathBigInteger *X = x_;
  JavaMathBigInteger *fourX = [self modDoubleWithJavaMathBigInteger:[self modDoubleWithJavaMathBigInteger:X]];
  
#line 301
  JavaMathBigInteger *k = [((JavaMathBigInteger *) nil_chk(legendreExponent)) addWithJavaMathBigInteger:JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)];
  
#line 301
  JavaMathBigInteger *qMinusOne = [((JavaMathBigInteger *) nil_chk(q_)) subtractWithJavaMathBigInteger:JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)];
  
#line 303
  JavaMathBigInteger *U;
  
#line 303
  JavaMathBigInteger *V;
  JavaUtilRandom *rand = new_JavaUtilRandom_init();
  do {
    
#line 307
    JavaMathBigInteger *P;
    do {
      
#line 310
      P = new_JavaMathBigInteger_initWithInt_withJavaUtilRandom_([((JavaMathBigInteger *) nil_chk(q_)) bitLength], rand);
    }
    while ([P compareToWithId:q_] >= 0 ||
#line 313
    ![((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([P multiplyWithJavaMathBigInteger:P])) subtractWithJavaMathBigInteger:fourX]])) modPowWithJavaMathBigInteger:legendreExponent withJavaMathBigInteger:q_])) isEqual:qMinusOne]);
    
#line 315
    IOSObjectArray *result = OrgBouncycastleMathEcECFieldElement_Fp_lucasSequenceWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, P, X, k);
    U = IOSObjectArray_Get(nil_chk(result), 0);
    V = IOSObjectArray_Get(result, 1);
    
#line 319
    if ([((JavaMathBigInteger *) nil_chk([self modMultWithJavaMathBigInteger:V withJavaMathBigInteger:V])) isEqual:fourX]) {
      
#line 321
      return new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modHalfAbsWithJavaMathBigInteger:V]);
    }
  }
  while ([((JavaMathBigInteger *) nil_chk(U)) isEqual:JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)] || [U isEqual:qMinusOne]);
  
#line 326
  return nil;
}


#line 329
- (OrgBouncycastleMathEcECFieldElement *)checkSqrtWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)z {
  return OrgBouncycastleMathEcECFieldElement_Fp_checkSqrtWithOrgBouncycastleMathEcECFieldElement_(self, z);
}


#line 334
- (IOSObjectArray *)lucasSequenceWithJavaMathBigInteger:(JavaMathBigInteger *)P
                                 withJavaMathBigInteger:(JavaMathBigInteger *)Q
                                 withJavaMathBigInteger:(JavaMathBigInteger *)k {
  return OrgBouncycastleMathEcECFieldElement_Fp_lucasSequenceWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, P, Q, k);
}


#line 388
- (JavaMathBigInteger *)modAddWithJavaMathBigInteger:(JavaMathBigInteger *)x1
                              withJavaMathBigInteger:(JavaMathBigInteger *)x2 {
  JavaMathBigInteger *x3 = [((JavaMathBigInteger *) nil_chk(x1)) addWithJavaMathBigInteger:x2];
  if ([((JavaMathBigInteger *) nil_chk(x3)) compareToWithId:q_] >= 0) {
    
#line 393
    x3 = [x3 subtractWithJavaMathBigInteger:q_];
  }
  return x3;
}


#line 398
- (JavaMathBigInteger *)modDoubleWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  
#line 400
  JavaMathBigInteger *_2x = [((JavaMathBigInteger *) nil_chk(x)) shiftLeftWithInt:1];
  if ([((JavaMathBigInteger *) nil_chk(_2x)) compareToWithId:q_] >= 0) {
    
#line 403
    _2x = [_2x subtractWithJavaMathBigInteger:q_];
  }
  return _2x;
}


#line 408
- (JavaMathBigInteger *)modHalfWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  
#line 410
  if ([((JavaMathBigInteger *) nil_chk(x)) testBitWithInt:0]) {
    
#line 412
    x = [((JavaMathBigInteger *) nil_chk(q_)) addWithJavaMathBigInteger:x];
  }
  return [((JavaMathBigInteger *) nil_chk(x)) shiftRightWithInt:1];
}


#line 417
- (JavaMathBigInteger *)modHalfAbsWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  
#line 419
  if ([((JavaMathBigInteger *) nil_chk(x)) testBitWithInt:0]) {
    
#line 421
    x = [((JavaMathBigInteger *) nil_chk(q_)) subtractWithJavaMathBigInteger:x];
  }
  return [((JavaMathBigInteger *) nil_chk(x)) shiftRightWithInt:1];
}


#line 426
- (JavaMathBigInteger *)modInverseWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  
#line 428
  return OrgBouncycastleUtilBigIntegers_modOddInverseWithJavaMathBigInteger_withJavaMathBigInteger_(q_, x);
}


#line 431
- (JavaMathBigInteger *)modMultWithJavaMathBigInteger:(JavaMathBigInteger *)x1
                               withJavaMathBigInteger:(JavaMathBigInteger *)x2 {
  return [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(x1)) multiplyWithJavaMathBigInteger:x2]];
}

- (JavaMathBigInteger *)modReduceWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  
#line 438
  if (r_ != nil) {
    
#line 440
    jboolean negative = [((JavaMathBigInteger *) nil_chk(x)) signum] < 0;
    if (negative) {
      
#line 443
      x = [x abs];
    }
    jint qLen = [((JavaMathBigInteger *) nil_chk(q_)) bitLength];
    jboolean rIsOne = [((JavaMathBigInteger *) nil_chk(r_)) isEqual:JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)];
    while ([((JavaMathBigInteger *) nil_chk(x)) bitLength] > qLen + 1) {
      
#line 449
      JavaMathBigInteger *u = [x shiftRightWithInt:qLen];
      JavaMathBigInteger *v = [x subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(u)) shiftLeftWithInt:qLen]];
      if (!rIsOne) {
        
#line 453
        u = [u multiplyWithJavaMathBigInteger:r_];
      }
      x = [((JavaMathBigInteger *) nil_chk(u)) addWithJavaMathBigInteger:v];
    }
    while ([((JavaMathBigInteger *) nil_chk(x)) compareToWithId:q_] >= 0) {
      
#line 459
      x = [x subtractWithJavaMathBigInteger:q_];
    }
    if (negative && [x signum] != 0) {
      
#line 463
      x = [((JavaMathBigInteger *) nil_chk(q_)) subtractWithJavaMathBigInteger:x];
    }
  }
  else {
    
#line 468
    x = [((JavaMathBigInteger *) nil_chk(x)) modWithJavaMathBigInteger:q_];
  }
  return x;
}


#line 473
- (JavaMathBigInteger *)modSubtractWithJavaMathBigInteger:(JavaMathBigInteger *)x1
                                   withJavaMathBigInteger:(JavaMathBigInteger *)x2 {
  JavaMathBigInteger *x3 = [((JavaMathBigInteger *) nil_chk(x1)) subtractWithJavaMathBigInteger:x2];
  if ([((JavaMathBigInteger *) nil_chk(x3)) signum] < 0) {
    
#line 478
    x3 = [x3 addWithJavaMathBigInteger:q_];
  }
  return x3;
}


#line 483
- (jboolean)isEqual:(id)other {
  
#line 486
  if (JreObjectEqualsEquals(other, self)) {
    
#line 488
    return true;
  }
  
#line 491
  if (!([other isKindOfClass:[OrgBouncycastleMathEcECFieldElement_Fp class]])) {
    
#line 493
    return false;
  }
  
#line 496
  OrgBouncycastleMathEcECFieldElement_Fp *o = (OrgBouncycastleMathEcECFieldElement_Fp *) cast_chk(other, [OrgBouncycastleMathEcECFieldElement_Fp class]);
  return [((JavaMathBigInteger *) nil_chk(q_)) isEqual:((OrgBouncycastleMathEcECFieldElement_Fp *) nil_chk(o))->q_] && [((JavaMathBigInteger *) nil_chk(x_)) isEqual:o->x_];
}


#line 500
- (NSUInteger)hash {
  
#line 503
  return ((jint) [((JavaMathBigInteger *) nil_chk(q_)) hash]) ^ ((jint) [((JavaMathBigInteger *) nil_chk(x_)) hash]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaMathBigInteger;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x2, 14, 4, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x2, 15, 2, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 16, 17, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 18, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 19, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 20, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 21, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 22, 17, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 23, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 24, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(calculateResidueWithJavaMathBigInteger:);
  methods[1].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[2].selector = @selector(toBigInteger);
  methods[3].selector = @selector(getFieldName);
  methods[4].selector = @selector(getFieldSize);
  methods[5].selector = @selector(getQ);
  methods[6].selector = @selector(addWithOrgBouncycastleMathEcECFieldElement:);
  methods[7].selector = @selector(addOne);
  methods[8].selector = @selector(subtractWithOrgBouncycastleMathEcECFieldElement:);
  methods[9].selector = @selector(multiplyWithOrgBouncycastleMathEcECFieldElement:);
  methods[10].selector = @selector(multiplyMinusProductWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[11].selector = @selector(multiplyPlusProductWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[12].selector = @selector(divideWithOrgBouncycastleMathEcECFieldElement:);
  methods[13].selector = @selector(negate);
  methods[14].selector = @selector(square);
  methods[15].selector = @selector(squareMinusProductWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[16].selector = @selector(squarePlusProductWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[17].selector = @selector(invert);
  methods[18].selector = @selector(sqrt);
  methods[19].selector = @selector(checkSqrtWithOrgBouncycastleMathEcECFieldElement:);
  methods[20].selector = @selector(lucasSequenceWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[21].selector = @selector(modAddWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[22].selector = @selector(modDoubleWithJavaMathBigInteger:);
  methods[23].selector = @selector(modHalfWithJavaMathBigInteger:);
  methods[24].selector = @selector(modHalfAbsWithJavaMathBigInteger:);
  methods[25].selector = @selector(modInverseWithJavaMathBigInteger:);
  methods[26].selector = @selector(modMultWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[27].selector = @selector(modReduceWithJavaMathBigInteger:);
  methods[28].selector = @selector(modSubtractWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[29].selector = @selector(isEqual:);
  methods[30].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "q_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "r_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "x_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "calculateResidue", "LJavaMathBigInteger;", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "add", "LOrgBouncycastleMathEcECFieldElement;", "subtract", "multiply", "multiplyMinusProduct", "LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;", "multiplyPlusProduct", "divide", "squareMinusProduct", "LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;", "squarePlusProduct", "checkSqrt", "lucasSequence", "modAdd", "LJavaMathBigInteger;LJavaMathBigInteger;", "modDouble", "modHalf", "modHalfAbs", "modInverse", "modMult", "modReduce", "modSubtract", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECFieldElement_Fp = { "Fp", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x9, 31, 3, 4, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcECFieldElement_Fp;
}

@end


#line 100
JavaMathBigInteger *OrgBouncycastleMathEcECFieldElement_Fp_calculateResidueWithJavaMathBigInteger_(JavaMathBigInteger *p) {
  OrgBouncycastleMathEcECFieldElement_Fp_initialize();
  jint bitLength = [((JavaMathBigInteger *) nil_chk(p)) bitLength];
  if (bitLength >= 96) {
    
#line 105
    JavaMathBigInteger *firstWord = [p shiftRightWithInt:bitLength - 64];
    if ([((JavaMathBigInteger *) nil_chk(firstWord)) longLongValue] == -1LL) {
      
#line 108
      return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE))) shiftLeftWithInt:bitLength])) subtractWithJavaMathBigInteger:p];
    }
  }
  return nil;
}


#line 114
void OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECFieldElement_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *r, JavaMathBigInteger *x) {
  OrgBouncycastleMathEcECFieldElement_AbstractFp_init(self);
  if (x == nil || [x signum] < 0 || [x compareToWithId:q] >= 0) {
    
#line 118
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"x value invalid in Fp field element");
  }
  
#line 121
  self->q_ = q;
  self->r_ = r;
  self->x_ = x;
}


#line 114
OrgBouncycastleMathEcECFieldElement_Fp *new_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *r, JavaMathBigInteger *x) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECFieldElement_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, q, r, x)
}


#line 114
OrgBouncycastleMathEcECFieldElement_Fp *create_OrgBouncycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *r, JavaMathBigInteger *x) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECFieldElement_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, q, r, x)
}


#line 329
OrgBouncycastleMathEcECFieldElement *OrgBouncycastleMathEcECFieldElement_Fp_checkSqrtWithOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECFieldElement_Fp *self, OrgBouncycastleMathEcECFieldElement *z) {
  
#line 331
  return [self isEqual:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(z)) square]] ? z : nil;
}


#line 334
IOSObjectArray *OrgBouncycastleMathEcECFieldElement_Fp_lucasSequenceWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECFieldElement_Fp *self, JavaMathBigInteger *P, JavaMathBigInteger *Q, JavaMathBigInteger *k) {
  
#line 341
  jint n = [((JavaMathBigInteger *) nil_chk(k)) bitLength];
  jint s = [k getLowestSetBit];
  
#line 346
  JavaMathBigInteger *Uh = JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE);
  JavaMathBigInteger *Vl = JreLoadStatic(OrgBouncycastleMathEcECConstants, TWO);
  JavaMathBigInteger *Vh = P;
  JavaMathBigInteger *Ql = JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE);
  JavaMathBigInteger *Qh = JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE);
  
#line 352
  for (jint j = n - 1; j >= s + 1; --j) {
    
#line 354
    Ql = [self modMultWithJavaMathBigInteger:Ql withJavaMathBigInteger:Qh];
    
#line 356
    if ([k testBitWithInt:j]) {
      
#line 358
      Qh = [self modMultWithJavaMathBigInteger:Ql withJavaMathBigInteger:Q];
      Uh = [self modMultWithJavaMathBigInteger:Uh withJavaMathBigInteger:Vh];
      Vl = [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(Vh)) multiplyWithJavaMathBigInteger:Vl])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(P)) multiplyWithJavaMathBigInteger:Ql]]];
      Vh = [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([Vh multiplyWithJavaMathBigInteger:Vh])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(Qh)) shiftLeftWithInt:1]]];
    }
    else {
      
#line 365
      Qh = Ql;
      Uh = [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(Uh)) multiplyWithJavaMathBigInteger:Vl])) subtractWithJavaMathBigInteger:Ql]];
      Vh = [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(Vh)) multiplyWithJavaMathBigInteger:Vl])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(P)) multiplyWithJavaMathBigInteger:Ql]]];
      Vl = [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(Vl)) multiplyWithJavaMathBigInteger:Vl])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(Ql)) shiftLeftWithInt:1]]];
    }
  }
  
#line 372
  Ql = [self modMultWithJavaMathBigInteger:Ql withJavaMathBigInteger:Qh];
  Qh = [self modMultWithJavaMathBigInteger:Ql withJavaMathBigInteger:Q];
  Uh = [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(Uh)) multiplyWithJavaMathBigInteger:Vl])) subtractWithJavaMathBigInteger:Ql]];
  Vl = [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(Vh)) multiplyWithJavaMathBigInteger:Vl])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(P)) multiplyWithJavaMathBigInteger:Ql]]];
  Ql = [self modMultWithJavaMathBigInteger:Ql withJavaMathBigInteger:Qh];
  
#line 378
  for (jint j = 1; j <= s; ++j) {
    
#line 380
    Uh = [self modMultWithJavaMathBigInteger:Uh withJavaMathBigInteger:Vl];
    Vl = [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(Vl)) multiplyWithJavaMathBigInteger:Vl])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(Ql)) shiftLeftWithInt:1]]];
    Ql = [self modMultWithJavaMathBigInteger:Ql withJavaMathBigInteger:Ql];
  }
  
#line 385
  return [IOSObjectArray newArrayWithObjects:(id[]){ Uh, Vl } count:2 type:JavaMathBigInteger_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECFieldElement_Fp)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECFieldElement.java"


#line 507
@implementation OrgBouncycastleMathEcECFieldElement_AbstractF2m

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 507
- (instancetype)init {
  OrgBouncycastleMathEcECFieldElement_AbstractF2m_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 509
- (OrgBouncycastleMathEcECFieldElement *)halfTrace {
  
#line 511
  jint m = [self getFieldSize];
  if ((m & 1) == 0) {
    
#line 514
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Half-trace only defined for odd m");
  }
  
#line 523
  jint n = JreURShift32(m + 1, 1);
  jint k = 31 - OrgBouncycastleUtilIntegers_numberOfLeadingZerosWithInt_(n);
  jint nk = 1;
  
#line 527
  OrgBouncycastleMathEcECFieldElement *ht = self;
  while (k > 0) {
    
#line 530
    ht = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(ht)) squarePowWithInt:JreLShift32(nk, 1)])) addWithOrgBouncycastleMathEcECFieldElement:ht];
    nk = JreURShift32(n, --k);
    if (0 != (nk & 1)) {
      
#line 534
      ht = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(ht)) squarePowWithInt:2])) addWithOrgBouncycastleMathEcECFieldElement:self];
    }
  }
  
#line 538
  return ht;
}


#line 541
- (jboolean)hasFastTrace {
  
#line 543
  return false;
}


#line 546
- (jint)trace {
  
#line 548
  jint m = [self getFieldSize];
  
#line 556
  jint k = 31 - OrgBouncycastleUtilIntegers_numberOfLeadingZerosWithInt_(m);
  jint mk = 1;
  
#line 559
  OrgBouncycastleMathEcECFieldElement *tr = self;
  while (k > 0) {
    
#line 562
    tr = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(tr)) squarePowWithInt:mk])) addWithOrgBouncycastleMathEcECFieldElement:tr];
    mk = JreURShift32(m, --k);
    if (0 != (mk & 1)) {
      
#line 566
      tr = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(tr)) square])) addWithOrgBouncycastleMathEcECFieldElement:self];
    }
  }
  
#line 570
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(tr)) isZero]) {
    
#line 572
    return 0;
  }
  if ([tr isOne]) {
    
#line 576
    return 1;
  }
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"Internal error in trace calculation");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(halfTrace);
  methods[2].selector = @selector(hasFastTrace);
  methods[3].selector = @selector(trace);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgBouncycastleMathEcECFieldElement;" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECFieldElement_AbstractF2m = { "AbstractF2m", "org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x409, 4, 0, 0, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcECFieldElement_AbstractF2m;
}

@end


#line 507
void OrgBouncycastleMathEcECFieldElement_AbstractF2m_init(OrgBouncycastleMathEcECFieldElement_AbstractF2m *self) {
  OrgBouncycastleMathEcECFieldElement_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECFieldElement_AbstractF2m)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECFieldElement.java"


#line 589
@implementation OrgBouncycastleMathEcECFieldElement_F2m


#line 641
- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
     withJavaMathBigInteger:(JavaMathBigInteger *)x {
  OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_(self, m, k1, k2, k3, x);
  return self;
}


#line 678
- (instancetype)initWithInt:(jint)m
               withIntArray:(IOSIntArray *)ks
withOrgBouncycastleMathEcLongArray:(OrgBouncycastleMathEcLongArray *)x {
  OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_(self, m, ks, x);
  return self;
}


#line 686
- (jint)bitLength {
  
#line 689
  return [((OrgBouncycastleMathEcLongArray *) nil_chk(x_)) degree];
}

- (jboolean)isOne {
  
#line 695
  return [((OrgBouncycastleMathEcLongArray *) nil_chk(x_)) isOne];
}

- (jboolean)isZero {
  
#line 701
  return [((OrgBouncycastleMathEcLongArray *) nil_chk(x_)) isZero];
}

- (jboolean)testBitZero {
  
#line 707
  return [((OrgBouncycastleMathEcLongArray *) nil_chk(x_)) testBitZero];
}

- (JavaMathBigInteger *)toBigInteger {
  
#line 713
  return [((OrgBouncycastleMathEcLongArray *) nil_chk(x_)) toBigInteger];
}

- (NSString *)getFieldName {
  
#line 719
  return @"F2m";
}

- (jint)getFieldSize {
  
#line 725
  return m_;
}

- (OrgBouncycastleMathEcECFieldElement *)addWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b {
  
#line 734
  OrgBouncycastleMathEcLongArray *iarrClone = (OrgBouncycastleMathEcLongArray *) cast_chk([((OrgBouncycastleMathEcLongArray *) nil_chk(x_)) java_clone], [OrgBouncycastleMathEcLongArray class]);
  OrgBouncycastleMathEcECFieldElement_F2m *bF2m = (OrgBouncycastleMathEcECFieldElement_F2m *) cast_chk(b, [OrgBouncycastleMathEcECFieldElement_F2m class]);
  [((OrgBouncycastleMathEcLongArray *) nil_chk(iarrClone)) addShiftedByWordsWithOrgBouncycastleMathEcLongArray:((OrgBouncycastleMathEcECFieldElement_F2m *) nil_chk(bF2m))->x_ withInt:0];
  return new_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_(m_, ks_, iarrClone);
}


#line 740
- (OrgBouncycastleMathEcECFieldElement *)addOne {
  
#line 743
  return new_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_(m_, ks_, [((OrgBouncycastleMathEcLongArray *) nil_chk(x_)) addOne]);
}

- (OrgBouncycastleMathEcECFieldElement *)subtractWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b {
  
#line 750
  return [self addWithOrgBouncycastleMathEcECFieldElement:b];
}


#line 753
- (OrgBouncycastleMathEcECFieldElement *)multiplyWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b {
  
#line 763
  return new_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_(m_, ks_, [((OrgBouncycastleMathEcLongArray *) nil_chk(x_)) modMultiplyWithOrgBouncycastleMathEcLongArray:((OrgBouncycastleMathEcECFieldElement_F2m *) nil_chk(((OrgBouncycastleMathEcECFieldElement_F2m *) cast_chk(b, [OrgBouncycastleMathEcECFieldElement_F2m class]))))->x_ withInt:m_ withIntArray:ks_]);
}


#line 766
- (OrgBouncycastleMathEcECFieldElement *)multiplyMinusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
                                                             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  return [self multiplyPlusProductWithOrgBouncycastleMathEcECFieldElement:b withOrgBouncycastleMathEcECFieldElement:x withOrgBouncycastleMathEcECFieldElement:y];
}

- (OrgBouncycastleMathEcECFieldElement *)multiplyPlusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
                                                            withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                            withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  OrgBouncycastleMathEcLongArray *ax = self->x_;
  
#line 775
  OrgBouncycastleMathEcLongArray *bx = ((OrgBouncycastleMathEcECFieldElement_F2m *) nil_chk(((OrgBouncycastleMathEcECFieldElement_F2m *) cast_chk(b, [OrgBouncycastleMathEcECFieldElement_F2m class]))))->x_;
  
#line 775
  OrgBouncycastleMathEcLongArray *xx = ((OrgBouncycastleMathEcECFieldElement_F2m *) nil_chk(((OrgBouncycastleMathEcECFieldElement_F2m *) cast_chk(x, [OrgBouncycastleMathEcECFieldElement_F2m class]))))->x_;
  
#line 775
  OrgBouncycastleMathEcLongArray *yx = ((OrgBouncycastleMathEcECFieldElement_F2m *) nil_chk(((OrgBouncycastleMathEcECFieldElement_F2m *) cast_chk(y, [OrgBouncycastleMathEcECFieldElement_F2m class]))))->x_;
  
#line 777
  OrgBouncycastleMathEcLongArray *ab = [((OrgBouncycastleMathEcLongArray *) nil_chk(ax)) multiplyWithOrgBouncycastleMathEcLongArray:bx withInt:m_ withIntArray:ks_];
  OrgBouncycastleMathEcLongArray *xy = [((OrgBouncycastleMathEcLongArray *) nil_chk(xx)) multiplyWithOrgBouncycastleMathEcLongArray:yx withInt:m_ withIntArray:ks_];
  
#line 780
  if (JreObjectEqualsEquals(ab, ax) || JreObjectEqualsEquals(ab, bx)) {
    
#line 782
    ab = (OrgBouncycastleMathEcLongArray *) cast_chk([((OrgBouncycastleMathEcLongArray *) nil_chk(ab)) java_clone], [OrgBouncycastleMathEcLongArray class]);
  }
  
#line 785
  [((OrgBouncycastleMathEcLongArray *) nil_chk(ab)) addShiftedByWordsWithOrgBouncycastleMathEcLongArray:xy withInt:0];
  [ab reduceWithInt:m_ withIntArray:ks_];
  
#line 788
  return new_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_(m_, ks_, ab);
}


#line 791
- (OrgBouncycastleMathEcECFieldElement *)divideWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b {
  
#line 795
  OrgBouncycastleMathEcECFieldElement *bInv = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(b)) invert];
  return [self multiplyWithOrgBouncycastleMathEcECFieldElement:bInv];
}


#line 799
- (OrgBouncycastleMathEcECFieldElement *)negate {
  
#line 803
  return self;
}


#line 806
- (OrgBouncycastleMathEcECFieldElement *)square {
  
#line 809
  return new_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_(m_, ks_, [((OrgBouncycastleMathEcLongArray *) nil_chk(x_)) modSquareWithInt:m_ withIntArray:ks_]);
}

- (OrgBouncycastleMathEcECFieldElement *)squareMinusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                           withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  
#line 815
  return [self squarePlusProductWithOrgBouncycastleMathEcECFieldElement:x withOrgBouncycastleMathEcECFieldElement:y];
}


#line 818
- (OrgBouncycastleMathEcECFieldElement *)squarePlusProductWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                          withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  
#line 821
  OrgBouncycastleMathEcLongArray *ax = self->x_;
  
#line 821
  OrgBouncycastleMathEcLongArray *xx = ((OrgBouncycastleMathEcECFieldElement_F2m *) nil_chk(((OrgBouncycastleMathEcECFieldElement_F2m *) cast_chk(x, [OrgBouncycastleMathEcECFieldElement_F2m class]))))->x_;
  
#line 821
  OrgBouncycastleMathEcLongArray *yx = ((OrgBouncycastleMathEcECFieldElement_F2m *) nil_chk(((OrgBouncycastleMathEcECFieldElement_F2m *) cast_chk(y, [OrgBouncycastleMathEcECFieldElement_F2m class]))))->x_;
  
#line 823
  OrgBouncycastleMathEcLongArray *aa = [((OrgBouncycastleMathEcLongArray *) nil_chk(ax)) squareWithInt:m_ withIntArray:ks_];
  OrgBouncycastleMathEcLongArray *xy = [((OrgBouncycastleMathEcLongArray *) nil_chk(xx)) multiplyWithOrgBouncycastleMathEcLongArray:yx withInt:m_ withIntArray:ks_];
  
#line 826
  if (JreObjectEqualsEquals(aa, ax)) {
    
#line 828
    aa = (OrgBouncycastleMathEcLongArray *) cast_chk([((OrgBouncycastleMathEcLongArray *) nil_chk(aa)) java_clone], [OrgBouncycastleMathEcLongArray class]);
  }
  
#line 831
  [((OrgBouncycastleMathEcLongArray *) nil_chk(aa)) addShiftedByWordsWithOrgBouncycastleMathEcLongArray:xy withInt:0];
  [aa reduceWithInt:m_ withIntArray:ks_];
  
#line 834
  return new_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_(m_, ks_, aa);
}


#line 837
- (OrgBouncycastleMathEcECFieldElement *)squarePowWithInt:(jint)pow {
  
#line 840
  return pow < 1 ? self : new_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_(m_, ks_, [((OrgBouncycastleMathEcLongArray *) nil_chk(x_)) modSquareNWithInt:pow withInt:m_ withIntArray:ks_]);
}

- (OrgBouncycastleMathEcECFieldElement *)invert {
  
#line 846
  return new_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_(m_, ks_, [((OrgBouncycastleMathEcLongArray *) nil_chk(x_)) modInverseWithInt:m_ withIntArray:ks_]);
}

- (OrgBouncycastleMathEcECFieldElement *)sqrt {
  
#line 852
  return [((OrgBouncycastleMathEcLongArray *) nil_chk(x_)) isZero] || [((OrgBouncycastleMathEcLongArray *) nil_chk(x_)) isOne] ? self : [self squarePowWithInt:m_ - 1];
}


#line 863
- (jint)getRepresentation {
  
#line 865
  return representation_;
}


#line 872
- (jint)getM {
  
#line 874
  return m_;
}


#line 885
- (jint)getK1 {
  
#line 887
  return IOSIntArray_Get(nil_chk(ks_), 0);
}


#line 896
- (jint)getK2 {
  
#line 898
  return ((IOSIntArray *) nil_chk(ks_))->size_ >= 2 ? IOSIntArray_Get(ks_, 1) : 0;
}


#line 907
- (jint)getK3 {
  
#line 909
  return ((IOSIntArray *) nil_chk(ks_))->size_ >= 3 ? IOSIntArray_Get(ks_, 2) : 0;
}


#line 912
- (jboolean)isEqual:(id)anObject {
  
#line 915
  if (JreObjectEqualsEquals(anObject, self)) {
    
#line 917
    return true;
  }
  
#line 920
  if (!([anObject isKindOfClass:[OrgBouncycastleMathEcECFieldElement_F2m class]])) {
    
#line 922
    return false;
  }
  
#line 925
  OrgBouncycastleMathEcECFieldElement_F2m *b = (OrgBouncycastleMathEcECFieldElement_F2m *) cast_chk(anObject, [OrgBouncycastleMathEcECFieldElement_F2m class]);
  
#line 927
  return m_ == ((OrgBouncycastleMathEcECFieldElement_F2m *) nil_chk(b))->m_ &&
#line 928
  representation_ == b->representation_ && OrgBouncycastleUtilArrays_areEqualWithIntArray_withIntArray_(
#line 929
  ks_, b->ks_) &&
#line 930
  [((OrgBouncycastleMathEcLongArray *) nil_chk(x_)) isEqual:b->x_];
}


#line 933
- (NSUInteger)hash {
  
#line 936
  return ((jint) [((OrgBouncycastleMathEcLongArray *) nil_chk(x_)) hash]) ^ m_ ^ OrgBouncycastleUtilArrays_hashCodeWithIntArray_(ks_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 9, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 12, 11, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:withInt:withJavaMathBigInteger:);
  methods[1].selector = @selector(initWithInt:withIntArray:withOrgBouncycastleMathEcLongArray:);
  methods[2].selector = @selector(bitLength);
  methods[3].selector = @selector(isOne);
  methods[4].selector = @selector(isZero);
  methods[5].selector = @selector(testBitZero);
  methods[6].selector = @selector(toBigInteger);
  methods[7].selector = @selector(getFieldName);
  methods[8].selector = @selector(getFieldSize);
  methods[9].selector = @selector(addWithOrgBouncycastleMathEcECFieldElement:);
  methods[10].selector = @selector(addOne);
  methods[11].selector = @selector(subtractWithOrgBouncycastleMathEcECFieldElement:);
  methods[12].selector = @selector(multiplyWithOrgBouncycastleMathEcECFieldElement:);
  methods[13].selector = @selector(multiplyMinusProductWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[14].selector = @selector(multiplyPlusProductWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[15].selector = @selector(divideWithOrgBouncycastleMathEcECFieldElement:);
  methods[16].selector = @selector(negate);
  methods[17].selector = @selector(square);
  methods[18].selector = @selector(squareMinusProductWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[19].selector = @selector(squarePlusProductWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[20].selector = @selector(squarePowWithInt:);
  methods[21].selector = @selector(invert);
  methods[22].selector = @selector(sqrt);
  methods[23].selector = @selector(getRepresentation);
  methods[24].selector = @selector(getM);
  methods[25].selector = @selector(getK1);
  methods[26].selector = @selector(getK2);
  methods[27].selector = @selector(getK3);
  methods[28].selector = @selector(isEqual:);
  methods[29].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "GNB", "I", .constantValue.asInt = OrgBouncycastleMathEcECFieldElement_F2m_GNB, 0x19, -1, -1, -1, -1 },
    { "TPB", "I", .constantValue.asInt = OrgBouncycastleMathEcECFieldElement_F2m_TPB, 0x19, -1, -1, -1, -1 },
    { "PPB", "I", .constantValue.asInt = OrgBouncycastleMathEcECFieldElement_F2m_PPB, 0x19, -1, -1, -1, -1 },
    { "representation_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ks_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "x_", "LOrgBouncycastleMathEcLongArray;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIIILJavaMathBigInteger;", "I[ILOrgBouncycastleMathEcLongArray;", "add", "LOrgBouncycastleMathEcECFieldElement;", "subtract", "multiply", "multiplyMinusProduct", "LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;", "multiplyPlusProduct", "divide", "squareMinusProduct", "LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;", "squarePlusProduct", "squarePow", "I", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECFieldElement_F2m = { "F2m", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x9, 30, 7, 3, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcECFieldElement_F2m;
}

@end


#line 641
void OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_(OrgBouncycastleMathEcECFieldElement_F2m *self, jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *x) {
  OrgBouncycastleMathEcECFieldElement_AbstractF2m_init(self);
  
#line 648
  if (x == nil || [x signum] < 0 || [x bitLength] > m) {
    
#line 650
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"x value invalid in F2m field element");
  }
  
#line 653
  if (k2 == 0 && k3 == 0) {
    
#line 655
    self->representation_ = OrgBouncycastleMathEcECFieldElement_F2m_TPB;
    self->ks_ = [IOSIntArray newArrayWithInts:(jint[]){ k1 } count:1];
  }
  else {
    
#line 660
    if (k2 >= k3) {
      
#line 662
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 663
      @"k2 must be smaller than k3");
    }
    if (k2 <= 0) {
      
#line 667
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 668
      @"k2 must be larger than 0");
    }
    self->representation_ = OrgBouncycastleMathEcECFieldElement_F2m_PPB;
    self->ks_ = [IOSIntArray newArrayWithInts:(jint[]){ k1, k2, k3 } count:3];
  }
  
#line 674
  self->m_ = m;
  self->x_ = new_OrgBouncycastleMathEcLongArray_initPackagePrivateWithJavaMathBigInteger_(x);
}


#line 641
OrgBouncycastleMathEcECFieldElement_F2m *new_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *x) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECFieldElement_F2m, initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_, m, k1, k2, k3, x)
}


#line 641
OrgBouncycastleMathEcECFieldElement_F2m *create_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *x) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECFieldElement_F2m, initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_, m, k1, k2, k3, x)
}


#line 678
void OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_(OrgBouncycastleMathEcECFieldElement_F2m *self, jint m, IOSIntArray *ks, OrgBouncycastleMathEcLongArray *x) {
  OrgBouncycastleMathEcECFieldElement_AbstractF2m_init(self);
  self->m_ = m;
  self->representation_ = ((IOSIntArray *) nil_chk(ks))->size_ == 1 ? OrgBouncycastleMathEcECFieldElement_F2m_TPB : OrgBouncycastleMathEcECFieldElement_F2m_PPB;
  self->ks_ = ks;
  self->x_ = x;
}


#line 678
OrgBouncycastleMathEcECFieldElement_F2m *new_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_(jint m, IOSIntArray *ks, OrgBouncycastleMathEcLongArray *x) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECFieldElement_F2m, initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_, m, ks, x)
}


#line 678
OrgBouncycastleMathEcECFieldElement_F2m *create_OrgBouncycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_(jint m, IOSIntArray *ks, OrgBouncycastleMathEcLongArray *x) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECFieldElement_F2m, initWithInt_withIntArray_withOrgBouncycastleMathEcLongArray_, m, ks, x)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECFieldElement_F2m)
