//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECPoint.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "java/util/Hashtable.h"
#include "org/bouncycastle/crypto/CryptoServicesRegistrar.h"
#include "org/bouncycastle/math/ec/ECAlgorithms.h"
#include "org/bouncycastle/math/ec/ECConstants.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECFieldElement.h"
#include "org/bouncycastle/math/ec/ECMultiplier.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/PreCompCallback.h"
#include "org/bouncycastle/math/ec/PreCompInfo.h"
#include "org/bouncycastle/math/ec/ValidityPrecompInfo.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/math/ec/ECPoint must be compiled with ARC (-fobjc-arc)"
#endif

__attribute__((unused)) static jboolean OrgBouncycastleMathEcECPoint_satisfiesOrder(OrgBouncycastleMathEcECPoint *self);

__attribute__((unused)) static OrgBouncycastleMathEcECFieldElement *OrgBouncycastleMathEcECPoint_getZCoordWithInt_(OrgBouncycastleMathEcECPoint *self, jint index);

__attribute__((unused)) static OrgBouncycastleMathEcECFieldElement *OrgBouncycastleMathEcECPoint_getRawXCoord(OrgBouncycastleMathEcECPoint *self);

__attribute__((unused)) static OrgBouncycastleMathEcECFieldElement *OrgBouncycastleMathEcECPoint_getRawYCoord(OrgBouncycastleMathEcECPoint *self);

__attribute__((unused)) static IOSObjectArray *OrgBouncycastleMathEcECPoint_getRawZCoords(OrgBouncycastleMathEcECPoint *self);

__attribute__((unused)) static OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECPoint_scaleXWithOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECPoint *self, OrgBouncycastleMathEcECFieldElement *scale_);

__attribute__((unused)) static OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECPoint_scaleYWithOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECPoint *self, OrgBouncycastleMathEcECFieldElement *scale_);

@interface OrgBouncycastleMathEcECPoint_1 : NSObject < OrgBouncycastleMathEcPreCompCallback > {
 @public
  OrgBouncycastleMathEcECPoint *this$0_;
  jboolean val$decompressed_;
  jboolean val$checkOrder_;
}

- (instancetype)initWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)outer$
                                         withBoolean:(jboolean)capture$0
                                         withBoolean:(jboolean)capture$1;

- (id<OrgBouncycastleMathEcPreCompInfo>)precomputeWithOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)existing;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcECPoint_1)

__attribute__((unused)) static void OrgBouncycastleMathEcECPoint_1_initWithOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_(OrgBouncycastleMathEcECPoint_1 *self, OrgBouncycastleMathEcECPoint *outer$, jboolean capture$0, jboolean capture$1);

__attribute__((unused)) static OrgBouncycastleMathEcECPoint_1 *new_OrgBouncycastleMathEcECPoint_1_initWithOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_(OrgBouncycastleMathEcECPoint *outer$, jboolean capture$0, jboolean capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleMathEcECPoint_1 *create_OrgBouncycastleMathEcECPoint_1_initWithOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_(OrgBouncycastleMathEcECPoint *outer$, jboolean capture$0, jboolean capture$1);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECPoint.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleMathEcECPoint)

IOSObjectArray *OrgBouncycastleMathEcECPoint_EMPTY_ZS;


#line 12
@implementation OrgBouncycastleMathEcECPoint


#line 16
+ (IOSObjectArray *)getInitialZCoordsWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve {
  return OrgBouncycastleMathEcECPoint_getInitialZCoordsWithOrgBouncycastleMathEcECCurve_(curve);
}


#line 55
- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  OrgBouncycastleMathEcECPoint_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(self, curve, x, y);
  return self;
}


#line 60
- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y
        withOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs {
  OrgBouncycastleMathEcECPoint_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(self, curve, x, y, zs);
  return self;
}

- (jboolean)satisfiesCurveEquation {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 70
- (jboolean)satisfiesOrder {
  return OrgBouncycastleMathEcECPoint_satisfiesOrder(self);
}


#line 84
- (OrgBouncycastleMathEcECPoint *)getDetachedPoint {
  
#line 86
  return [((OrgBouncycastleMathEcECPoint *) nil_chk([self normalize])) detach];
}


#line 89
- (OrgBouncycastleMathEcECCurve *)getCurve {
  
#line 91
  return curve_;
}


#line 94
- (OrgBouncycastleMathEcECPoint *)detach {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 96
- (jint)getCurveCoordinateSystem {
  
#line 99
  return nil == curve_ ? OrgBouncycastleMathEcECCurve_COORD_AFFINE : [curve_ getCoordinateSystem];
}


#line 108
- (OrgBouncycastleMathEcECFieldElement *)getAffineXCoord {
  
#line 110
  [self checkNormalized];
  return [self getXCoord];
}


#line 120
- (OrgBouncycastleMathEcECFieldElement *)getAffineYCoord {
  
#line 122
  [self checkNormalized];
  return [self getYCoord];
}


#line 136
- (OrgBouncycastleMathEcECFieldElement *)getXCoord {
  
#line 138
  return x_;
}


#line 151
- (OrgBouncycastleMathEcECFieldElement *)getYCoord {
  
#line 153
  return y_;
}


#line 156
- (OrgBouncycastleMathEcECFieldElement *)getZCoordWithInt:(jint)index {
  return OrgBouncycastleMathEcECPoint_getZCoordWithInt_(self, index);
}


#line 161
- (IOSObjectArray *)getZCoords {
  
#line 163
  jint zsLen = ((IOSObjectArray *) nil_chk(zs_))->size_;
  if (zsLen == 0) {
    
#line 166
    return OrgBouncycastleMathEcECPoint_EMPTY_ZS;
  }
  IOSObjectArray *copy_ = [IOSObjectArray newArrayWithLength:zsLen type:OrgBouncycastleMathEcECFieldElement_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(zs_, 0, copy_, 0, zsLen);
  return copy_;
}


#line 173
- (OrgBouncycastleMathEcECFieldElement *)getRawXCoord {
  return OrgBouncycastleMathEcECPoint_getRawXCoord(self);
}


#line 178
- (OrgBouncycastleMathEcECFieldElement *)getRawYCoord {
  return OrgBouncycastleMathEcECPoint_getRawYCoord(self);
}


#line 183
- (IOSObjectArray *)getRawZCoords {
  return OrgBouncycastleMathEcECPoint_getRawZCoords(self);
}


#line 188
- (void)checkNormalized {
  
#line 190
  if (![self isNormalized]) {
    
#line 192
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"point not in normal form");
  }
}


#line 196
- (jboolean)isNormalized {
  
#line 198
  jint coord = [self getCurveCoordinateSystem];
  
#line 200
  return coord == OrgBouncycastleMathEcECCurve_COORD_AFFINE ||
#line 201
  coord == OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE ||
#line 202
  [self isInfinity] ||
#line 203
  [((OrgBouncycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(nil_chk(zs_), 0))) isOne];
}


#line 212
- (OrgBouncycastleMathEcECPoint *)normalize {
  
#line 214
  if ([self isInfinity]) {
    
#line 216
    return self;
  }
  
#line 219
  switch ([self getCurveCoordinateSystem]) {
    
#line 221
    case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    {
      return self;
    }
    default:
    {
      OrgBouncycastleMathEcECFieldElement *z = [self getZCoordWithInt:0];
      if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(z)) isOne]) {
        
#line 231
        return self;
      }
      
#line 234
      if (nil == curve_) {
        
#line 236
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"Detached points must be in affine coordinates");
      }
      
#line 249
      JavaSecuritySecureRandom *r = OrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
      OrgBouncycastleMathEcECFieldElement *b = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve_)) randomFieldElementMultWithJavaSecuritySecureRandom:r];
      OrgBouncycastleMathEcECFieldElement *zInv = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([z multiplyWithOrgBouncycastleMathEcECFieldElement:b])) invert])) multiplyWithOrgBouncycastleMathEcECFieldElement:b];
      return [self normalizeWithOrgBouncycastleMathEcECFieldElement:zInv];
    }
  }
}


#line 257
- (OrgBouncycastleMathEcECPoint *)normalizeWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)zInv {
  
#line 259
  switch ([self getCurveCoordinateSystem]) {
    
#line 261
    case OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      return [self createScaledPointWithOrgBouncycastleMathEcECFieldElement:zInv withOrgBouncycastleMathEcECFieldElement:zInv];
    }
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY:
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    {
      OrgBouncycastleMathEcECFieldElement *zInv2 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(zInv)) square];
      
#line 270
      OrgBouncycastleMathEcECFieldElement *zInv3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(zInv2)) multiplyWithOrgBouncycastleMathEcECFieldElement:zInv];
      return [self createScaledPointWithOrgBouncycastleMathEcECFieldElement:zInv2 withOrgBouncycastleMathEcECFieldElement:zInv3];
    }
    default:
    {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"not a projective coordinate system");
    }
  }
}


#line 280
- (OrgBouncycastleMathEcECPoint *)createScaledPointWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)sx
                                                   withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)sy {
  return [((OrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) createRawPointWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(OrgBouncycastleMathEcECPoint_getRawXCoord(self))) multiplyWithOrgBouncycastleMathEcECFieldElement:sx] withOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(OrgBouncycastleMathEcECPoint_getRawYCoord(self))) multiplyWithOrgBouncycastleMathEcECFieldElement:sy]];
}

- (jboolean)isInfinity {
  
#line 287
  return x_ == nil || y_ == nil || (((IOSObjectArray *) nil_chk(zs_))->size_ > 0 && [((OrgBouncycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(zs_, 0))) isZero]);
}


#line 290
- (jboolean)isValid {
  
#line 292
  return [self implIsValidWithBoolean:false withBoolean:true];
}


#line 295
- (jboolean)isValidPartial {
  
#line 297
  return [self implIsValidWithBoolean:false withBoolean:false];
}


#line 300
- (jboolean)implIsValidWithBoolean:(jboolean)decompressed
                       withBoolean:(jboolean)checkOrder {
  if ([self isInfinity]) {
    
#line 304
    return true;
  }
  
#line 307
  OrgBouncycastleMathEcValidityPrecompInfo *validity = (OrgBouncycastleMathEcValidityPrecompInfo *) cast_chk([((OrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) precomputeWithOrgBouncycastleMathEcECPoint:self withNSString:OrgBouncycastleMathEcValidityPrecompInfo_PRECOMP_NAME withOrgBouncycastleMathEcPreCompCallback:new_OrgBouncycastleMathEcECPoint_1_initWithOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_(self, decompressed, checkOrder)], [OrgBouncycastleMathEcValidityPrecompInfo class]);
  
#line 344
  return ![((OrgBouncycastleMathEcValidityPrecompInfo *) nil_chk(validity)) hasFailed];
}


#line 347
- (OrgBouncycastleMathEcECPoint *)scaleXWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)scale_ {
  return OrgBouncycastleMathEcECPoint_scaleXWithOrgBouncycastleMathEcECFieldElement_(self, scale_);
}


#line 354
- (OrgBouncycastleMathEcECPoint *)scaleXNegateYWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)scale_ {
  
#line 356
  return [self isInfinity] ?
#line 357
  self :
#line 358
  [((OrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) createRawPointWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(OrgBouncycastleMathEcECPoint_getRawXCoord(self))) multiplyWithOrgBouncycastleMathEcECFieldElement:scale_] withOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(OrgBouncycastleMathEcECPoint_getRawYCoord(self))) negate] withOrgBouncycastleMathEcECFieldElementArray:OrgBouncycastleMathEcECPoint_getRawZCoords(self)];
}


#line 361
- (OrgBouncycastleMathEcECPoint *)scaleYWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)scale_ {
  return OrgBouncycastleMathEcECPoint_scaleYWithOrgBouncycastleMathEcECFieldElement_(self, scale_);
}


#line 368
- (OrgBouncycastleMathEcECPoint *)scaleYNegateXWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)scale_ {
  
#line 370
  return [self isInfinity] ?
#line 371
  self :
#line 372
  [((OrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) createRawPointWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(OrgBouncycastleMathEcECPoint_getRawXCoord(self))) negate] withOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(OrgBouncycastleMathEcECPoint_getRawYCoord(self))) multiplyWithOrgBouncycastleMathEcECFieldElement:scale_] withOrgBouncycastleMathEcECFieldElementArray:OrgBouncycastleMathEcECPoint_getRawZCoords(self)];
}


#line 375
- (jboolean)equalsWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)other {
  
#line 377
  if (nil == other) {
    
#line 379
    return false;
  }
  
#line 382
  OrgBouncycastleMathEcECCurve *c1 = [self getCurve];
  
#line 382
  OrgBouncycastleMathEcECCurve *c2 = [other getCurve];
  jboolean n1 = nil == c1;
  
#line 383
  jboolean n2 = nil == c2;
  jboolean i1 = [self isInfinity];
  
#line 384
  jboolean i2 = [other isInfinity];
  
#line 386
  if (i1 || i2) {
    
#line 388
    return i1 && i2 && (n1 || n2 || [((OrgBouncycastleMathEcECCurve *) nil_chk(c1)) equalsWithOrgBouncycastleMathEcECCurve:c2]);
  }
  
#line 391
  OrgBouncycastleMathEcECPoint *p1 = self;
  
#line 391
  OrgBouncycastleMathEcECPoint *p2 = other;
  if (n1 && n2) {
  }
  else
#line 396
  if (n1) {
    
#line 398
    p2 = [p2 normalize];
  }
  else if (n2) {
    
#line 402
    p1 = [p1 normalize];
  }
  else if (![((OrgBouncycastleMathEcECCurve *) nil_chk(c1)) equalsWithOrgBouncycastleMathEcECCurve:c2]) {
    
#line 406
    return false;
  }
  else {
    
#line 412
    IOSObjectArray *points = [IOSObjectArray newArrayWithObjects:(id[]){ self, [c1 importPointWithOrgBouncycastleMathEcECPoint:p2] } count:2 type:OrgBouncycastleMathEcECPoint_class_()];
    
#line 415
    [c1 normalizeAllWithOrgBouncycastleMathEcECPointArray:points];
    
#line 417
    p1 = IOSObjectArray_Get(points, 0);
    p2 = IOSObjectArray_Get(points, 1);
  }
  
#line 421
  return [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk(p1)) getXCoord])) isEqual:[((OrgBouncycastleMathEcECPoint *) nil_chk(p2)) getXCoord]] && [((OrgBouncycastleMathEcECFieldElement *) nil_chk([p1 getYCoord])) isEqual:[p2 getYCoord]];
}


#line 424
- (jboolean)isEqual:(id)other {
  
#line 427
  if (JreObjectEqualsEquals(other, self)) {
    
#line 429
    return true;
  }
  
#line 432
  if (!([other isKindOfClass:[OrgBouncycastleMathEcECPoint class]])) {
    
#line 434
    return false;
  }
  
#line 437
  return [self equalsWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *) cast_chk(other, [OrgBouncycastleMathEcECPoint class])];
}


#line 440
- (NSUInteger)hash {
  
#line 443
  OrgBouncycastleMathEcECCurve *c = [self getCurve];
  jint hc = nil == c ? 0 : ~((jint) [c hash]);
  
#line 446
  if (![self isInfinity]) {
    
#line 450
    OrgBouncycastleMathEcECPoint *p = [self normalize];
    
#line 452
    hc ^= ((jint) [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getXCoord])) hash]) * 17;
    hc ^= ((jint) [((OrgBouncycastleMathEcECFieldElement *) nil_chk([p getYCoord])) hash]) * 257;
  }
  
#line 456
  return hc;
}


#line 459
- (NSString *)description {
  
#line 462
  if ([self isInfinity]) {
    
#line 464
    return @"INF";
  }
  
#line 467
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithChar:'('];
  (void) [sb appendWithId:OrgBouncycastleMathEcECPoint_getRawXCoord(self)];
  (void) [sb appendWithChar:','];
  (void) [sb appendWithId:OrgBouncycastleMathEcECPoint_getRawYCoord(self)];
  {
    IOSObjectArray *a__ =
#line 472
    zs_;
    OrgBouncycastleMathEcECFieldElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgBouncycastleMathEcECFieldElement * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgBouncycastleMathEcECFieldElement *element = *b__++;
      
#line 473
      (void) [sb appendWithChar:','];
      (void) [sb appendWithId:element];
    }
  }
  
#line 476
  (void) [sb appendWithChar:')'];
  return [sb description];
}


#line 486
- (IOSByteArray *)getEncodedWithBoolean:(jboolean)compressed {
  
#line 488
  if ([self isInfinity]) {
    
#line 490
    return [IOSByteArray newArrayWithLength:1];
  }
  
#line 493
  OrgBouncycastleMathEcECPoint *normed = [self normalize];
  
#line 495
  IOSByteArray *X = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk(normed)) getXCoord])) getEncoded];
  
#line 497
  if (compressed) {
    
#line 499
    IOSByteArray *PO = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(X))->size_ + 1];
    *IOSByteArray_GetRef(PO, 0) = (jbyte) ([normed getCompressionYTilde] ? (jint) 0x03 : (jint) 0x02);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(X, 0, PO, 1, X->size_);
    return PO;
  }
  
#line 505
  IOSByteArray *Y = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([normed getYCoord])) getEncoded];
  
#line 507
  IOSByteArray *PO = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(X))->size_ + ((IOSByteArray *) nil_chk(Y))->size_ + 1];
  *IOSByteArray_GetRef(PO, 0) = (jint) 0x04;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(X, 0, PO, 1, X->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(Y, 0, PO, X->size_ + 1, Y->size_);
  return PO;
}


#line 514
- (jboolean)getCompressionYTilde {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 516
- (OrgBouncycastleMathEcECPoint *)addWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 518
- (OrgBouncycastleMathEcECPoint *)negate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 520
- (OrgBouncycastleMathEcECPoint *)subtractWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 522
- (OrgBouncycastleMathEcECPoint *)timesPow2WithInt:(jint)e {
  
#line 524
  if (e < 0) {
    
#line 526
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'e' cannot be negative");
  }
  
#line 529
  OrgBouncycastleMathEcECPoint *p = self;
  while (--e >= 0) {
    
#line 532
    p = [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) twice];
  }
  return p;
}


#line 537
- (OrgBouncycastleMathEcECPoint *)twice {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 539
- (OrgBouncycastleMathEcECPoint *)twicePlusWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)b {
  
#line 541
  return [((OrgBouncycastleMathEcECPoint *) nil_chk([self twice])) addWithOrgBouncycastleMathEcECPoint:b];
}


#line 544
- (OrgBouncycastleMathEcECPoint *)threeTimes {
  
#line 546
  return [self twicePlusWithOrgBouncycastleMathEcECPoint:self];
}


#line 554
- (OrgBouncycastleMathEcECPoint *)multiplyWithJavaMathBigInteger:(JavaMathBigInteger *)k {
  
#line 556
  return [((id<OrgBouncycastleMathEcECMultiplier>) nil_chk([((OrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) getMultiplier])) multiplyWithOrgBouncycastleMathEcECPoint:self withJavaMathBigInteger:k];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOrgBouncycastleMathEcECFieldElement;", 0xc, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECCurve;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "[LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgBouncycastleMathEcECFieldElement;", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 12, 7, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 13, 7, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 14, 7, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 15, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 19, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 20, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x401, 23, 17, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x401, 24, 17, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 25, 5, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 26, 17, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 27, 28, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInitialZCoordsWithOrgBouncycastleMathEcECCurve:);
  methods[1].selector = @selector(initWithOrgBouncycastleMathEcECCurve:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[2].selector = @selector(initWithOrgBouncycastleMathEcECCurve:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElementArray:);
  methods[3].selector = @selector(satisfiesCurveEquation);
  methods[4].selector = @selector(satisfiesOrder);
  methods[5].selector = @selector(getDetachedPoint);
  methods[6].selector = @selector(getCurve);
  methods[7].selector = @selector(detach);
  methods[8].selector = @selector(getCurveCoordinateSystem);
  methods[9].selector = @selector(getAffineXCoord);
  methods[10].selector = @selector(getAffineYCoord);
  methods[11].selector = @selector(getXCoord);
  methods[12].selector = @selector(getYCoord);
  methods[13].selector = @selector(getZCoordWithInt:);
  methods[14].selector = @selector(getZCoords);
  methods[15].selector = @selector(getRawXCoord);
  methods[16].selector = @selector(getRawYCoord);
  methods[17].selector = @selector(getRawZCoords);
  methods[18].selector = @selector(checkNormalized);
  methods[19].selector = @selector(isNormalized);
  methods[20].selector = @selector(normalize);
  methods[21].selector = @selector(normalizeWithOrgBouncycastleMathEcECFieldElement:);
  methods[22].selector = @selector(createScaledPointWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[23].selector = @selector(isInfinity);
  methods[24].selector = @selector(isValid);
  methods[25].selector = @selector(isValidPartial);
  methods[26].selector = @selector(implIsValidWithBoolean:withBoolean:);
  methods[27].selector = @selector(scaleXWithOrgBouncycastleMathEcECFieldElement:);
  methods[28].selector = @selector(scaleXNegateYWithOrgBouncycastleMathEcECFieldElement:);
  methods[29].selector = @selector(scaleYWithOrgBouncycastleMathEcECFieldElement:);
  methods[30].selector = @selector(scaleYNegateXWithOrgBouncycastleMathEcECFieldElement:);
  methods[31].selector = @selector(equalsWithOrgBouncycastleMathEcECPoint:);
  methods[32].selector = @selector(isEqual:);
  methods[33].selector = @selector(hash);
  methods[34].selector = @selector(description);
  methods[35].selector = @selector(getEncodedWithBoolean:);
  methods[36].selector = @selector(getCompressionYTilde);
  methods[37].selector = @selector(addWithOrgBouncycastleMathEcECPoint:);
  methods[38].selector = @selector(negate);
  methods[39].selector = @selector(subtractWithOrgBouncycastleMathEcECPoint:);
  methods[40].selector = @selector(timesPow2WithInt:);
  methods[41].selector = @selector(twice);
  methods[42].selector = @selector(twicePlusWithOrgBouncycastleMathEcECPoint:);
  methods[43].selector = @selector(threeTimes);
  methods[44].selector = @selector(multiplyWithJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_ZS", "[LOrgBouncycastleMathEcECFieldElement;", .constantValue.asLong = 0, 0x1c, -1, 29, -1, -1 },
    { "curve_", "LOrgBouncycastleMathEcECCurve;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "x_", "LOrgBouncycastleMathEcECFieldElement;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "y_", "LOrgBouncycastleMathEcECFieldElement;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "zs_", "[LOrgBouncycastleMathEcECFieldElement;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "preCompTable_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInitialZCoords", "LOrgBouncycastleMathEcECCurve;", "LOrgBouncycastleMathEcECCurve;LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;", "LOrgBouncycastleMathEcECCurve;LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;[LOrgBouncycastleMathEcECFieldElement;", "getZCoord", "I", "normalize", "LOrgBouncycastleMathEcECFieldElement;", "createScaledPoint", "LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;", "implIsValid", "ZZ", "scaleX", "scaleXNegateY", "scaleY", "scaleYNegateX", "equals", "LOrgBouncycastleMathEcECPoint;", "LNSObject;", "hashCode", "toString", "getEncoded", "Z", "add", "subtract", "timesPow2", "twicePlus", "multiply", "LJavaMathBigInteger;", &OrgBouncycastleMathEcECPoint_EMPTY_ZS, "LOrgBouncycastleMathEcECPoint_AbstractFp;LOrgBouncycastleMathEcECPoint_Fp;LOrgBouncycastleMathEcECPoint_AbstractF2m;LOrgBouncycastleMathEcECPoint_F2m;" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECPoint = { "ECPoint", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x401, 45, 6, -1, 30, -1, -1, -1 };
  return &_OrgBouncycastleMathEcECPoint;
}

+ (void)initialize {
  if (self == [OrgBouncycastleMathEcECPoint class]) {
    OrgBouncycastleMathEcECPoint_EMPTY_ZS = [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:OrgBouncycastleMathEcECFieldElement_class_()];
    J2OBJC_SET_INITIALIZED(OrgBouncycastleMathEcECPoint)
  }
}

@end


#line 16
IOSObjectArray *OrgBouncycastleMathEcECPoint_getInitialZCoordsWithOrgBouncycastleMathEcECCurve_(OrgBouncycastleMathEcECCurve *curve) {
  OrgBouncycastleMathEcECPoint_initialize();
  
#line 19
  jint coord = nil == curve ? OrgBouncycastleMathEcECCurve_COORD_AFFINE : [curve getCoordinateSystem];
  
#line 21
  switch (coord) {
    
#line 23
    case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    return OrgBouncycastleMathEcECPoint_EMPTY_ZS;
    default:
    break;
  }
  
#line 30
  OrgBouncycastleMathEcECFieldElement *one = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) fromBigIntegerWithJavaMathBigInteger:JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)];
  
#line 32
  switch (coord) {
    
#line 34
    case OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    return [IOSObjectArray newArrayWithObjects:(id[]){ one } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()];
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY:
    return [IOSObjectArray newArrayWithObjects:(id[]){ one, one, one } count:3 type:OrgBouncycastleMathEcECFieldElement_class_()];
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    return [IOSObjectArray newArrayWithObjects:(id[]){ one, [curve getA] } count:2 type:OrgBouncycastleMathEcECFieldElement_class_()];
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unknown coordinate system");
  }
}


#line 55
void OrgBouncycastleMathEcECPoint_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECPoint *self, OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *x, OrgBouncycastleMathEcECFieldElement *y) {
  OrgBouncycastleMathEcECPoint_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(self,
#line 57
  curve, x, y, OrgBouncycastleMathEcECPoint_getInitialZCoordsWithOrgBouncycastleMathEcECCurve_(curve));
}


#line 60
void OrgBouncycastleMathEcECPoint_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(OrgBouncycastleMathEcECPoint *self, OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *x, OrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs) {
  NSObject_init(self);
  self->preCompTable_ =
#line 53
  nil;
  
#line 62
  self->curve_ = curve;
  self->x_ = x;
  self->y_ = y;
  self->zs_ = zs;
}


#line 70
jboolean OrgBouncycastleMathEcECPoint_satisfiesOrder(OrgBouncycastleMathEcECPoint *self) {
  
#line 72
  if ([((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE))) isEqual:[((OrgBouncycastleMathEcECCurve *) nil_chk(self->curve_)) getCofactor]]) {
    
#line 74
    return true;
  }
  
#line 77
  JavaMathBigInteger *n = [((OrgBouncycastleMathEcECCurve *) nil_chk(self->curve_)) getOrder];
  
#line 81
  return n == nil || [((OrgBouncycastleMathEcECPoint *) nil_chk(OrgBouncycastleMathEcECAlgorithms_referenceMultiplyWithOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_(self, n))) isInfinity];
}


#line 156
OrgBouncycastleMathEcECFieldElement *OrgBouncycastleMathEcECPoint_getZCoordWithInt_(OrgBouncycastleMathEcECPoint *self, jint index) {
  
#line 158
  return index < 0 || index >= ((IOSObjectArray *) nil_chk(self->zs_))->size_ ? nil : IOSObjectArray_Get(nil_chk(self->zs_), index);
}


#line 173
OrgBouncycastleMathEcECFieldElement *OrgBouncycastleMathEcECPoint_getRawXCoord(OrgBouncycastleMathEcECPoint *self) {
  
#line 175
  return self->x_;
}


#line 178
OrgBouncycastleMathEcECFieldElement *OrgBouncycastleMathEcECPoint_getRawYCoord(OrgBouncycastleMathEcECPoint *self) {
  
#line 180
  return self->y_;
}


#line 183
IOSObjectArray *OrgBouncycastleMathEcECPoint_getRawZCoords(OrgBouncycastleMathEcECPoint *self) {
  
#line 185
  return self->zs_;
}


#line 347
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECPoint_scaleXWithOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECPoint *self, OrgBouncycastleMathEcECFieldElement *scale_) {
  
#line 349
  return [self isInfinity] ? self :
#line 351
  [((OrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) createRawPointWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(OrgBouncycastleMathEcECPoint_getRawXCoord(self))) multiplyWithOrgBouncycastleMathEcECFieldElement:scale_] withOrgBouncycastleMathEcECFieldElement:OrgBouncycastleMathEcECPoint_getRawYCoord(self) withOrgBouncycastleMathEcECFieldElementArray:OrgBouncycastleMathEcECPoint_getRawZCoords(self)];
}


#line 361
OrgBouncycastleMathEcECPoint *OrgBouncycastleMathEcECPoint_scaleYWithOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECPoint *self, OrgBouncycastleMathEcECFieldElement *scale_) {
  
#line 363
  return [self isInfinity] ? self :
#line 365
  [((OrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) createRawPointWithOrgBouncycastleMathEcECFieldElement:OrgBouncycastleMathEcECPoint_getRawXCoord(self) withOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(OrgBouncycastleMathEcECPoint_getRawYCoord(self))) multiplyWithOrgBouncycastleMathEcECFieldElement:scale_] withOrgBouncycastleMathEcECFieldElementArray:OrgBouncycastleMathEcECPoint_getRawZCoords(self)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECPoint)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECPoint.java"


#line 308
@implementation OrgBouncycastleMathEcECPoint_1


#line 308
- (instancetype)initWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)outer$
                                         withBoolean:(jboolean)capture$0
                                         withBoolean:(jboolean)capture$1 {
  OrgBouncycastleMathEcECPoint_1_initWithOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_(self, outer$, capture$0, capture$1);
  return self;
}


#line 309
- (id<OrgBouncycastleMathEcPreCompInfo>)precomputeWithOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)existing {
  
#line 312
  OrgBouncycastleMathEcValidityPrecompInfo *info = [existing isKindOfClass:[OrgBouncycastleMathEcValidityPrecompInfo class]] ? (OrgBouncycastleMathEcValidityPrecompInfo *) cast_chk(existing, [OrgBouncycastleMathEcValidityPrecompInfo class]) : nil;
  if (info == nil) {
    
#line 315
    info = new_OrgBouncycastleMathEcValidityPrecompInfo_initPackagePrivate();
  }
  
#line 318
  if ([info hasFailed]) {
    
#line 320
    return JreRetainedLocalValue(info);
  }
  if (![info hasCurveEquationPassed]) {
    
#line 324
    if (!val$decompressed_ && ![this$0_ satisfiesCurveEquation]) {
      
#line 326
      [info reportFailed];
      return JreRetainedLocalValue(info);
    }
    [info reportCurveEquationPassed];
  }
  if (val$checkOrder_ && ![info hasOrderPassed]) {
    
#line 333
    if (![this$0_ satisfiesOrder]) {
      
#line 335
      [info reportFailed];
      return JreRetainedLocalValue(info);
    }
    [info reportOrderPassed];
  }
  return JreRetainedLocalValue(info);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcPreCompInfo;", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleMathEcECPoint:withBoolean:withBoolean:);
  methods[1].selector = @selector(precomputeWithOrgBouncycastleMathEcPreCompInfo:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgBouncycastleMathEcECPoint;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$decompressed_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$checkOrder_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleMathEcECPoint;ZZ", "precompute", "LOrgBouncycastleMathEcPreCompInfo;", "LOrgBouncycastleMathEcECPoint;", "implIsValidWithBoolean:withBoolean:" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECPoint_1 = { "", "org.bouncycastle.math.ec", ptrTable, methods, fields, 7, 0x8000, 2, 3, 3, -1, 4, -1, -1 };
  return &_OrgBouncycastleMathEcECPoint_1;
}

@end


#line 308
void OrgBouncycastleMathEcECPoint_1_initWithOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_(OrgBouncycastleMathEcECPoint_1 *self, OrgBouncycastleMathEcECPoint *outer$, jboolean capture$0, jboolean capture$1) {
  self->this$0_ = outer$;
  self->val$decompressed_ = capture$0;
  self->val$checkOrder_ = capture$1;
  NSObject_init(self);
}


#line 308
OrgBouncycastleMathEcECPoint_1 *new_OrgBouncycastleMathEcECPoint_1_initWithOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_(OrgBouncycastleMathEcECPoint *outer$, jboolean capture$0, jboolean capture$1) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECPoint_1, initWithOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_, outer$, capture$0, capture$1)
}


#line 308
OrgBouncycastleMathEcECPoint_1 *create_OrgBouncycastleMathEcECPoint_1_initWithOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_(OrgBouncycastleMathEcECPoint *outer$, jboolean capture$0, jboolean capture$1) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECPoint_1, initWithOrgBouncycastleMathEcECPoint_withBoolean_withBoolean_, outer$, capture$0, capture$1)
}

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECPoint.java"


#line 559
@implementation OrgBouncycastleMathEcECPoint_AbstractFp

- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  OrgBouncycastleMathEcECPoint_AbstractFp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(self, curve, x, y);
  return self;
}


#line 566
- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y
        withOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs {
  OrgBouncycastleMathEcECPoint_AbstractFp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(self, curve, x, y, zs);
  return self;
}


#line 571
- (jboolean)getCompressionYTilde {
  
#line 574
  return [((OrgBouncycastleMathEcECFieldElement *) nil_chk([self getAffineYCoord])) testBitZero];
}

- (jboolean)satisfiesCurveEquation {
  
#line 580
  OrgBouncycastleMathEcECFieldElement *X = x_;
  
#line 580
  OrgBouncycastleMathEcECFieldElement *Y = y_;
  OrgBouncycastleMathEcECFieldElement *A = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve_)) getA];
  
#line 581
  OrgBouncycastleMathEcECFieldElement *B = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve_)) getB];
  OrgBouncycastleMathEcECFieldElement *lhs = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) square];
  
#line 584
  switch ([self getCurveCoordinateSystem]) {
    
#line 586
    case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
    break;
    case OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    {
      OrgBouncycastleMathEcECFieldElement *Z = IOSObjectArray_Get(nil_chk(zs_), 0);
      if (![((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z)) isOne]) {
        
#line 593
        OrgBouncycastleMathEcECFieldElement *Z2 = [Z square];
        
#line 593
        OrgBouncycastleMathEcECFieldElement *Z3 = [Z multiplyWithOrgBouncycastleMathEcECFieldElement:Z2];
        lhs = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(lhs)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z];
        A = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(A)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z2];
        B = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(B)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z3];
      }
      break;
    }
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY:
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    {
      OrgBouncycastleMathEcECFieldElement *Z = IOSObjectArray_Get(nil_chk(zs_), 0);
      if (![((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z)) isOne]) {
        
#line 607
        OrgBouncycastleMathEcECFieldElement *Z2 = [Z square];
        
#line 607
        OrgBouncycastleMathEcECFieldElement *Z4 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z2)) square];
        
#line 607
        OrgBouncycastleMathEcECFieldElement *Z6 = [Z2 multiplyWithOrgBouncycastleMathEcECFieldElement:Z4];
        A = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(A)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z4];
        B = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(B)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z6];
      }
      break;
    }
    default:
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
  }
  
#line 617
  OrgBouncycastleMathEcECFieldElement *rhs = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X)) square])) addWithOrgBouncycastleMathEcECFieldElement:A])) multiplyWithOrgBouncycastleMathEcECFieldElement:X])) addWithOrgBouncycastleMathEcECFieldElement:B];
  return [((OrgBouncycastleMathEcECFieldElement *) nil_chk(lhs)) isEqual:rhs];
}


#line 621
- (OrgBouncycastleMathEcECPoint *)subtractWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)b {
  
#line 624
  if ([((OrgBouncycastleMathEcECPoint *) nil_chk(b)) isInfinity]) {
    
#line 626
    return self;
  }
  
#line 630
  return [self addWithOrgBouncycastleMathEcECPoint:[b negate]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleMathEcECCurve:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[1].selector = @selector(initWithOrgBouncycastleMathEcECCurve:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElementArray:);
  methods[2].selector = @selector(getCompressionYTilde);
  methods[3].selector = @selector(satisfiesCurveEquation);
  methods[4].selector = @selector(subtractWithOrgBouncycastleMathEcECPoint:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgBouncycastleMathEcECCurve;LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;", "LOrgBouncycastleMathEcECCurve;LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;[LOrgBouncycastleMathEcECFieldElement;", "subtract", "LOrgBouncycastleMathEcECPoint;" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECPoint_AbstractFp = { "AbstractFp", "org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x409, 5, 0, 3, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcECPoint_AbstractFp;
}

@end


#line 561
void OrgBouncycastleMathEcECPoint_AbstractFp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECPoint_AbstractFp *self, OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *x, OrgBouncycastleMathEcECFieldElement *y) {
  OrgBouncycastleMathEcECPoint_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(self,
#line 563
  curve, x, y);
}


#line 566
void OrgBouncycastleMathEcECPoint_AbstractFp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(OrgBouncycastleMathEcECPoint_AbstractFp *self, OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *x, OrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs) {
  OrgBouncycastleMathEcECPoint_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(self,
#line 568
  curve, x, y, zs);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECPoint_AbstractFp)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECPoint.java"


#line 637
@implementation OrgBouncycastleMathEcECPoint_Fp

- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(self, curve, x, y);
  return self;
}


#line 644
- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y
        withOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs {
  OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(self, curve, x, y, zs);
  return self;
}


#line 649
- (OrgBouncycastleMathEcECPoint *)detach {
  
#line 652
  return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(nil, [self getAffineXCoord], [self getAffineYCoord]);
}

- (OrgBouncycastleMathEcECFieldElement *)getZCoordWithInt:(jint)index {
  
#line 658
  if (index == 1 && OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED == [self getCurveCoordinateSystem]) {
    
#line 660
    return [self getJacobianModifiedW];
  }
  
#line 663
  return OrgBouncycastleMathEcECPoint_getZCoordWithInt_(self, index);
}


#line 667
- (OrgBouncycastleMathEcECPoint *)addWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)b {
  
#line 670
  if ([self isInfinity]) {
    
#line 672
    return b;
  }
  if ([((OrgBouncycastleMathEcECPoint *) nil_chk(b)) isInfinity]) {
    
#line 676
    return self;
  }
  if (JreObjectEqualsEquals(self, b)) {
    
#line 680
    return [self twice];
  }
  
#line 683
  OrgBouncycastleMathEcECCurve *curve = [self getCurve];
  jint coord = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  
#line 686
  OrgBouncycastleMathEcECFieldElement *X1 = x_;
  
#line 686
  OrgBouncycastleMathEcECFieldElement *Y1 = y_;
  OrgBouncycastleMathEcECFieldElement *X2 = b->x_;
  
#line 687
  OrgBouncycastleMathEcECFieldElement *Y2 = b->y_;
  
#line 689
  switch (coord) {
    
#line 691
    case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
    {
      OrgBouncycastleMathEcECFieldElement *dx = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X2)) subtractWithOrgBouncycastleMathEcECFieldElement:X1];
      
#line 693
      OrgBouncycastleMathEcECFieldElement *dy = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y2)) subtractWithOrgBouncycastleMathEcECFieldElement:Y1];
      
#line 695
      if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(dx)) isZero]) {
        
#line 697
        if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(dy)) isZero]) {
          
#line 700
          return [self twice];
        }
        
#line 704
        return [curve getInfinity];
      }
      
#line 707
      OrgBouncycastleMathEcECFieldElement *gamma = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(dy)) divideWithOrgBouncycastleMathEcECFieldElement:dx];
      OrgBouncycastleMathEcECFieldElement *X3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(gamma)) square])) subtractWithOrgBouncycastleMathEcECFieldElement:X1])) subtractWithOrgBouncycastleMathEcECFieldElement:X2];
      OrgBouncycastleMathEcECFieldElement *Y3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([gamma multiplyWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) subtractWithOrgBouncycastleMathEcECFieldElement:X3]])) subtractWithOrgBouncycastleMathEcECFieldElement:Y1];
      
#line 711
      return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(curve, X3, Y3);
    }
    
#line 714
    case OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    {
      OrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(zs_), 0);
      OrgBouncycastleMathEcECFieldElement *Z2 = IOSObjectArray_Get(b->zs_, 0);
      
#line 719
      jboolean Z1IsOne = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) isOne];
      jboolean Z2IsOne = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z2)) isOne];
      
#line 722
      OrgBouncycastleMathEcECFieldElement *u1 = Z1IsOne ? Y2 : [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y2)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
      OrgBouncycastleMathEcECFieldElement *u2 = Z2IsOne ? Y1 : [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z2];
      OrgBouncycastleMathEcECFieldElement *u = [u1 subtractWithOrgBouncycastleMathEcECFieldElement:u2];
      OrgBouncycastleMathEcECFieldElement *v1 = Z1IsOne ? X2 : [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X2)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
      OrgBouncycastleMathEcECFieldElement *v2 = Z2IsOne ? X1 : [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z2];
      OrgBouncycastleMathEcECFieldElement *v = [v1 subtractWithOrgBouncycastleMathEcECFieldElement:v2];
      
#line 730
      if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(v)) isZero]) {
        
#line 732
        if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(u)) isZero]) {
          
#line 735
          return [self twice];
        }
        
#line 739
        return [curve getInfinity];
      }
      
#line 743
      OrgBouncycastleMathEcECFieldElement *w = Z1IsOne ? Z2 : Z2IsOne ? Z1 : [Z1 multiplyWithOrgBouncycastleMathEcECFieldElement:Z2];
      OrgBouncycastleMathEcECFieldElement *vSquared = [v square];
      OrgBouncycastleMathEcECFieldElement *vCubed = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(vSquared)) multiplyWithOrgBouncycastleMathEcECFieldElement:v];
      OrgBouncycastleMathEcECFieldElement *vSquaredV2 = [vSquared multiplyWithOrgBouncycastleMathEcECFieldElement:v2];
      OrgBouncycastleMathEcECFieldElement *A = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(u)) square])) multiplyWithOrgBouncycastleMathEcECFieldElement:w])) subtractWithOrgBouncycastleMathEcECFieldElement:vCubed])) subtractWithOrgBouncycastleMathEcECFieldElement:[self twoWithOrgBouncycastleMathEcECFieldElement:vSquaredV2]];
      
#line 749
      OrgBouncycastleMathEcECFieldElement *X3 = [v multiplyWithOrgBouncycastleMathEcECFieldElement:A];
      OrgBouncycastleMathEcECFieldElement *Y3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(vSquaredV2)) subtractWithOrgBouncycastleMathEcECFieldElement:A])) multiplyMinusProductWithOrgBouncycastleMathEcECFieldElement:u withOrgBouncycastleMathEcECFieldElement:u2 withOrgBouncycastleMathEcECFieldElement:vCubed];
      OrgBouncycastleMathEcECFieldElement *Z3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(vCubed)) multiplyWithOrgBouncycastleMathEcECFieldElement:w];
      
#line 753
      return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(curve, X3, Y3, [IOSObjectArray newArrayWithObjects:(id[]){ Z3 } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()]);
    }
    
#line 756
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    {
      OrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(zs_), 0);
      OrgBouncycastleMathEcECFieldElement *Z2 = IOSObjectArray_Get(b->zs_, 0);
      
#line 762
      jboolean Z1IsOne = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) isOne];
      
#line 764
      OrgBouncycastleMathEcECFieldElement *X3;
      
#line 764
      OrgBouncycastleMathEcECFieldElement *Y3;
      
#line 764
      OrgBouncycastleMathEcECFieldElement *Z3;
      
#line 764
      OrgBouncycastleMathEcECFieldElement *Z3Squared = nil;
      
#line 766
      if (!Z1IsOne && [Z1 isEqual:Z2]) {
        
#line 770
        OrgBouncycastleMathEcECFieldElement *dx = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) subtractWithOrgBouncycastleMathEcECFieldElement:X2];
        
#line 770
        OrgBouncycastleMathEcECFieldElement *dy = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) subtractWithOrgBouncycastleMathEcECFieldElement:Y2];
        if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(dx)) isZero]) {
          
#line 773
          if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(dy)) isZero]) {
            
#line 775
            return [self twice];
          }
          return [curve getInfinity];
        }
        
#line 780
        OrgBouncycastleMathEcECFieldElement *C = [dx square];
        OrgBouncycastleMathEcECFieldElement *W1 = [X1 multiplyWithOrgBouncycastleMathEcECFieldElement:C];
        
#line 781
        OrgBouncycastleMathEcECFieldElement *W2 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X2)) multiplyWithOrgBouncycastleMathEcECFieldElement:C];
        OrgBouncycastleMathEcECFieldElement *A1 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(W1)) subtractWithOrgBouncycastleMathEcECFieldElement:W2])) multiplyWithOrgBouncycastleMathEcECFieldElement:Y1];
        
#line 784
        X3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(dy)) square])) subtractWithOrgBouncycastleMathEcECFieldElement:W1])) subtractWithOrgBouncycastleMathEcECFieldElement:W2];
        Y3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([W1 subtractWithOrgBouncycastleMathEcECFieldElement:X3])) multiplyWithOrgBouncycastleMathEcECFieldElement:dy])) subtractWithOrgBouncycastleMathEcECFieldElement:A1];
        Z3 = dx;
        
#line 788
        Z3 = [Z3 multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
      }
      else {
        
#line 792
        OrgBouncycastleMathEcECFieldElement *Z1Squared;
        
#line 792
        OrgBouncycastleMathEcECFieldElement *U2;
        
#line 792
        OrgBouncycastleMathEcECFieldElement *S2;
        if (Z1IsOne) {
          
#line 795
          Z1Squared = Z1;
          
#line 795
          U2 = X2;
          
#line 795
          S2 = Y2;
        }
        else {
          
#line 799
          Z1Squared = [Z1 square];
          U2 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z1Squared)) multiplyWithOrgBouncycastleMathEcECFieldElement:X2];
          OrgBouncycastleMathEcECFieldElement *Z1Cubed = [Z1Squared multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
          S2 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z1Cubed)) multiplyWithOrgBouncycastleMathEcECFieldElement:Y2];
        }
        
#line 805
        jboolean Z2IsOne = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z2)) isOne];
        OrgBouncycastleMathEcECFieldElement *Z2Squared;
        
#line 806
        OrgBouncycastleMathEcECFieldElement *U1;
        
#line 806
        OrgBouncycastleMathEcECFieldElement *S1;
        if (Z2IsOne) {
          
#line 809
          Z2Squared = Z2;
          
#line 809
          U1 = X1;
          
#line 809
          S1 = Y1;
        }
        else {
          
#line 813
          Z2Squared = [Z2 square];
          U1 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z2Squared)) multiplyWithOrgBouncycastleMathEcECFieldElement:X1];
          OrgBouncycastleMathEcECFieldElement *Z2Cubed = [Z2Squared multiplyWithOrgBouncycastleMathEcECFieldElement:Z2];
          S1 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z2Cubed)) multiplyWithOrgBouncycastleMathEcECFieldElement:Y1];
        }
        
#line 819
        OrgBouncycastleMathEcECFieldElement *H = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(U1)) subtractWithOrgBouncycastleMathEcECFieldElement:U2];
        OrgBouncycastleMathEcECFieldElement *R = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(S1)) subtractWithOrgBouncycastleMathEcECFieldElement:S2];
        
#line 823
        if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(H)) isZero]) {
          
#line 825
          if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(R)) isZero]) {
            
#line 828
            return [self twice];
          }
          
#line 832
          return [curve getInfinity];
        }
        
#line 835
        OrgBouncycastleMathEcECFieldElement *HSquared = [H square];
        OrgBouncycastleMathEcECFieldElement *G = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(HSquared)) multiplyWithOrgBouncycastleMathEcECFieldElement:H];
        OrgBouncycastleMathEcECFieldElement *V = [HSquared multiplyWithOrgBouncycastleMathEcECFieldElement:U1];
        
#line 839
        X3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(R)) square])) addWithOrgBouncycastleMathEcECFieldElement:G])) subtractWithOrgBouncycastleMathEcECFieldElement:[self twoWithOrgBouncycastleMathEcECFieldElement:V]];
        Y3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(V)) subtractWithOrgBouncycastleMathEcECFieldElement:X3])) multiplyMinusProductWithOrgBouncycastleMathEcECFieldElement:R withOrgBouncycastleMathEcECFieldElement:G withOrgBouncycastleMathEcECFieldElement:S1];
        
#line 842
        Z3 = H;
        if (!Z1IsOne) {
          
#line 845
          Z3 = [Z3 multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
        }
        if (!Z2IsOne) {
          
#line 849
          Z3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z3)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z2];
        }
        
#line 857
        if (JreObjectEqualsEquals(Z3, H)) {
          
#line 859
          Z3Squared = HSquared;
        }
      }
      
#line 863
      IOSObjectArray *zs;
      if (coord == OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED) {
        
#line 867
        OrgBouncycastleMathEcECFieldElement *W3 = [self calculateJacobianModifiedWWithOrgBouncycastleMathEcECFieldElement:Z3 withOrgBouncycastleMathEcECFieldElement:Z3Squared];
        
#line 869
        zs = [IOSObjectArray newArrayWithObjects:(id[]){ Z3, W3 } count:2 type:OrgBouncycastleMathEcECFieldElement_class_()];
      }
      else {
        
#line 873
        zs = [IOSObjectArray newArrayWithObjects:(id[]){ Z3 } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()];
      }
      
#line 876
      return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(curve, X3, Y3, zs);
    }
    
#line 879
    default:
    {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
    }
  }
}


#line 887
- (OrgBouncycastleMathEcECPoint *)twice {
  
#line 890
  if ([self isInfinity]) {
    
#line 892
    return self;
  }
  
#line 895
  OrgBouncycastleMathEcECCurve *curve = [self getCurve];
  
#line 897
  OrgBouncycastleMathEcECFieldElement *Y1 = y_;
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) isZero]) {
    
#line 900
    return [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getInfinity];
  }
  
#line 903
  jint coord = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  
#line 905
  OrgBouncycastleMathEcECFieldElement *X1 = x_;
  
#line 907
  switch (coord) {
    
#line 909
    case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
    {
      OrgBouncycastleMathEcECFieldElement *X1Squared = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) square];
      OrgBouncycastleMathEcECFieldElement *gamma = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([self threeWithOrgBouncycastleMathEcECFieldElement:X1Squared])) addWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) getA]])) divideWithOrgBouncycastleMathEcECFieldElement:[self twoWithOrgBouncycastleMathEcECFieldElement:Y1]];
      OrgBouncycastleMathEcECFieldElement *X3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(gamma)) square])) subtractWithOrgBouncycastleMathEcECFieldElement:[self twoWithOrgBouncycastleMathEcECFieldElement:X1]];
      OrgBouncycastleMathEcECFieldElement *Y3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([gamma multiplyWithOrgBouncycastleMathEcECFieldElement:[X1 subtractWithOrgBouncycastleMathEcECFieldElement:X3]])) subtractWithOrgBouncycastleMathEcECFieldElement:Y1];
      
#line 916
      return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(curve, X3, Y3);
    }
    
#line 919
    case OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    {
      OrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(zs_), 0);
      
#line 923
      jboolean Z1IsOne = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) isOne];
      
#line 926
      OrgBouncycastleMathEcECFieldElement *w = [curve getA];
      if (![((OrgBouncycastleMathEcECFieldElement *) nil_chk(w)) isZero] && !Z1IsOne) {
        
#line 929
        w = [w multiplyWithOrgBouncycastleMathEcECFieldElement:[Z1 square]];
      }
      w = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(w)) addWithOrgBouncycastleMathEcECFieldElement:[self threeWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) square]]];
      
#line 933
      OrgBouncycastleMathEcECFieldElement *s = Z1IsOne ? Y1 : [Y1 multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
      OrgBouncycastleMathEcECFieldElement *t = Z1IsOne ? [Y1 square] : [s multiplyWithOrgBouncycastleMathEcECFieldElement:Y1];
      OrgBouncycastleMathEcECFieldElement *B = [X1 multiplyWithOrgBouncycastleMathEcECFieldElement:t];
      OrgBouncycastleMathEcECFieldElement *_4B = [self fourWithOrgBouncycastleMathEcECFieldElement:B];
      OrgBouncycastleMathEcECFieldElement *h = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(w)) square])) subtractWithOrgBouncycastleMathEcECFieldElement:[self twoWithOrgBouncycastleMathEcECFieldElement:_4B]];
      
#line 939
      OrgBouncycastleMathEcECFieldElement *_2s = [self twoWithOrgBouncycastleMathEcECFieldElement:s];
      OrgBouncycastleMathEcECFieldElement *X3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(h)) multiplyWithOrgBouncycastleMathEcECFieldElement:_2s];
      OrgBouncycastleMathEcECFieldElement *_2t = [self twoWithOrgBouncycastleMathEcECFieldElement:t];
      OrgBouncycastleMathEcECFieldElement *Y3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(_4B)) subtractWithOrgBouncycastleMathEcECFieldElement:h])) multiplyWithOrgBouncycastleMathEcECFieldElement:w])) subtractWithOrgBouncycastleMathEcECFieldElement:[self twoWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(_2t)) square]]];
      OrgBouncycastleMathEcECFieldElement *_4sSquared = Z1IsOne ? [self twoWithOrgBouncycastleMathEcECFieldElement:_2t] : [((OrgBouncycastleMathEcECFieldElement *) nil_chk(_2s)) square];
      OrgBouncycastleMathEcECFieldElement *Z3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([self twoWithOrgBouncycastleMathEcECFieldElement:_4sSquared])) multiplyWithOrgBouncycastleMathEcECFieldElement:s];
      
#line 946
      return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(curve, X3, Y3, [IOSObjectArray newArrayWithObjects:(id[]){ Z3 } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()]);
    }
    
#line 949
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
    {
      OrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(zs_), 0);
      
#line 953
      jboolean Z1IsOne = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) isOne];
      
#line 955
      OrgBouncycastleMathEcECFieldElement *Y1Squared = [Y1 square];
      OrgBouncycastleMathEcECFieldElement *T = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y1Squared)) square];
      
#line 958
      OrgBouncycastleMathEcECFieldElement *a4 = [curve getA];
      OrgBouncycastleMathEcECFieldElement *a4Neg = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(a4)) negate];
      
#line 961
      OrgBouncycastleMathEcECFieldElement *M;
      
#line 961
      OrgBouncycastleMathEcECFieldElement *S;
      if ([((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(a4Neg)) toBigInteger])) isEqual:JavaMathBigInteger_valueOfWithLong_(3)]) {
        
#line 964
        OrgBouncycastleMathEcECFieldElement *Z1Squared = Z1IsOne ? Z1 : [Z1 square];
        M = [self threeWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) addWithOrgBouncycastleMathEcECFieldElement:Z1Squared])) multiplyWithOrgBouncycastleMathEcECFieldElement:[X1 subtractWithOrgBouncycastleMathEcECFieldElement:Z1Squared]]];
        S = [self fourWithOrgBouncycastleMathEcECFieldElement:[Y1Squared multiplyWithOrgBouncycastleMathEcECFieldElement:X1]];
      }
      else {
        
#line 970
        OrgBouncycastleMathEcECFieldElement *X1Squared = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) square];
        M = [self threeWithOrgBouncycastleMathEcECFieldElement:X1Squared];
        if (Z1IsOne) {
          
#line 974
          M = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(M)) addWithOrgBouncycastleMathEcECFieldElement:a4];
        }
        else if (![a4 isZero]) {
          
#line 978
          OrgBouncycastleMathEcECFieldElement *Z1Squared = [Z1 square];
          OrgBouncycastleMathEcECFieldElement *Z1Pow4 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z1Squared)) square];
          if ([a4Neg bitLength] < [a4 bitLength]) {
            
#line 982
            M = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(M)) subtractWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z1Pow4)) multiplyWithOrgBouncycastleMathEcECFieldElement:a4Neg]];
          }
          else {
            
#line 986
            M = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(M)) addWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z1Pow4)) multiplyWithOrgBouncycastleMathEcECFieldElement:a4]];
          }
        }
        
#line 990
        S = [self fourWithOrgBouncycastleMathEcECFieldElement:[X1 multiplyWithOrgBouncycastleMathEcECFieldElement:Y1Squared]];
      }
      
#line 993
      OrgBouncycastleMathEcECFieldElement *X3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(M)) square])) subtractWithOrgBouncycastleMathEcECFieldElement:[self twoWithOrgBouncycastleMathEcECFieldElement:S]];
      OrgBouncycastleMathEcECFieldElement *Y3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(S)) subtractWithOrgBouncycastleMathEcECFieldElement:X3])) multiplyWithOrgBouncycastleMathEcECFieldElement:M])) subtractWithOrgBouncycastleMathEcECFieldElement:[self eightWithOrgBouncycastleMathEcECFieldElement:T]];
      
#line 996
      OrgBouncycastleMathEcECFieldElement *Z3 = [self twoWithOrgBouncycastleMathEcECFieldElement:Y1];
      if (!Z1IsOne) {
        
#line 999
        Z3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z3)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
      }
      
#line 1005
      return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(curve, X3, Y3, [IOSObjectArray newArrayWithObjects:(id[]){ Z3 } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()]);
    }
    
#line 1008
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    {
      return [self twiceJacobianModifiedWithBoolean:true];
    }
    
#line 1013
    default:
    {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
    }
  }
}


#line 1020
- (OrgBouncycastleMathEcECPoint *)twicePlusWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)b {
  
#line 1023
  if (JreObjectEqualsEquals(self, b)) {
    
#line 1025
    return [self threeTimes];
  }
  if ([self isInfinity]) {
    
#line 1029
    return b;
  }
  if ([((OrgBouncycastleMathEcECPoint *) nil_chk(b)) isInfinity]) {
    
#line 1033
    return [self twice];
  }
  
#line 1036
  OrgBouncycastleMathEcECFieldElement *Y1 = y_;
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) isZero]) {
    
#line 1039
    return b;
  }
  
#line 1042
  OrgBouncycastleMathEcECCurve *curve = [self getCurve];
  jint coord = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  
#line 1045
  switch (coord) {
    
#line 1047
    case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
    {
      OrgBouncycastleMathEcECFieldElement *X1 = x_;
      OrgBouncycastleMathEcECFieldElement *X2 = b->x_;
      
#line 1050
      OrgBouncycastleMathEcECFieldElement *Y2 = b->y_;
      
#line 1052
      OrgBouncycastleMathEcECFieldElement *dx = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X2)) subtractWithOrgBouncycastleMathEcECFieldElement:X1];
      
#line 1052
      OrgBouncycastleMathEcECFieldElement *dy = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y2)) subtractWithOrgBouncycastleMathEcECFieldElement:Y1];
      
#line 1054
      if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(dx)) isZero]) {
        
#line 1056
        if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(dy)) isZero]) {
          
#line 1059
          return [self threeTimes];
        }
        
#line 1063
        return self;
      }
      
#line 1071
      OrgBouncycastleMathEcECFieldElement *X = [dx square];
      
#line 1071
      OrgBouncycastleMathEcECFieldElement *Y = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(dy)) square];
      OrgBouncycastleMathEcECFieldElement *d = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X)) multiplyWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk([self twoWithOrgBouncycastleMathEcECFieldElement:X1])) addWithOrgBouncycastleMathEcECFieldElement:X2]])) subtractWithOrgBouncycastleMathEcECFieldElement:Y];
      if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(d)) isZero]) {
        
#line 1075
        return [curve getInfinity];
      }
      
#line 1078
      OrgBouncycastleMathEcECFieldElement *D = [d multiplyWithOrgBouncycastleMathEcECFieldElement:dx];
      OrgBouncycastleMathEcECFieldElement *I = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(D)) invert];
      OrgBouncycastleMathEcECFieldElement *L1 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([d multiplyWithOrgBouncycastleMathEcECFieldElement:I])) multiplyWithOrgBouncycastleMathEcECFieldElement:dy];
      OrgBouncycastleMathEcECFieldElement *L2 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([self twoWithOrgBouncycastleMathEcECFieldElement:Y1])) multiplyWithOrgBouncycastleMathEcECFieldElement:X])) multiplyWithOrgBouncycastleMathEcECFieldElement:dx])) multiplyWithOrgBouncycastleMathEcECFieldElement:I])) subtractWithOrgBouncycastleMathEcECFieldElement:L1];
      OrgBouncycastleMathEcECFieldElement *X4 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(L2)) subtractWithOrgBouncycastleMathEcECFieldElement:L1])) multiplyWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(L1)) addWithOrgBouncycastleMathEcECFieldElement:L2]])) addWithOrgBouncycastleMathEcECFieldElement:X2];
      OrgBouncycastleMathEcECFieldElement *Y4 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) subtractWithOrgBouncycastleMathEcECFieldElement:X4])) multiplyWithOrgBouncycastleMathEcECFieldElement:L2])) subtractWithOrgBouncycastleMathEcECFieldElement:Y1];
      
#line 1085
      return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(curve, X4, Y4);
    }
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    {
      return [((OrgBouncycastleMathEcECPoint_Fp *) nil_chk([self twiceJacobianModifiedWithBoolean:false])) addWithOrgBouncycastleMathEcECPoint:b];
    }
    default:
    {
      return [((OrgBouncycastleMathEcECPoint *) nil_chk([self twice])) addWithOrgBouncycastleMathEcECPoint:b];
    }
  }
}


#line 1098
- (OrgBouncycastleMathEcECPoint *)threeTimes {
  
#line 1101
  if ([self isInfinity]) {
    
#line 1103
    return self;
  }
  
#line 1106
  OrgBouncycastleMathEcECFieldElement *Y1 = y_;
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) isZero]) {
    
#line 1109
    return self;
  }
  
#line 1112
  OrgBouncycastleMathEcECCurve *curve = [self getCurve];
  jint coord = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  
#line 1115
  switch (coord) {
    
#line 1117
    case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
    {
      OrgBouncycastleMathEcECFieldElement *X1 = x_;
      
#line 1121
      OrgBouncycastleMathEcECFieldElement *_2Y1 = [self twoWithOrgBouncycastleMathEcECFieldElement:Y1];
      OrgBouncycastleMathEcECFieldElement *X = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(_2Y1)) square];
      OrgBouncycastleMathEcECFieldElement *Z = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([self threeWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) square]])) addWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) getA]];
      OrgBouncycastleMathEcECFieldElement *Y = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z)) square];
      
#line 1126
      OrgBouncycastleMathEcECFieldElement *d = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([self threeWithOrgBouncycastleMathEcECFieldElement:X1])) multiplyWithOrgBouncycastleMathEcECFieldElement:X])) subtractWithOrgBouncycastleMathEcECFieldElement:Y];
      if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(d)) isZero]) {
        
#line 1129
        return [((OrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) getInfinity];
      }
      
#line 1132
      OrgBouncycastleMathEcECFieldElement *D = [d multiplyWithOrgBouncycastleMathEcECFieldElement:_2Y1];
      OrgBouncycastleMathEcECFieldElement *I = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(D)) invert];
      OrgBouncycastleMathEcECFieldElement *L1 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([d multiplyWithOrgBouncycastleMathEcECFieldElement:I])) multiplyWithOrgBouncycastleMathEcECFieldElement:Z];
      OrgBouncycastleMathEcECFieldElement *L2 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X)) square])) multiplyWithOrgBouncycastleMathEcECFieldElement:I])) subtractWithOrgBouncycastleMathEcECFieldElement:L1];
      
#line 1137
      OrgBouncycastleMathEcECFieldElement *X4 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(L2)) subtractWithOrgBouncycastleMathEcECFieldElement:L1])) multiplyWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(L1)) addWithOrgBouncycastleMathEcECFieldElement:L2]])) addWithOrgBouncycastleMathEcECFieldElement:X1];
      OrgBouncycastleMathEcECFieldElement *Y4 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([X1 subtractWithOrgBouncycastleMathEcECFieldElement:X4])) multiplyWithOrgBouncycastleMathEcECFieldElement:L2])) subtractWithOrgBouncycastleMathEcECFieldElement:Y1];
      return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(curve, X4, Y4);
    }
    case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    {
      return [((OrgBouncycastleMathEcECPoint_Fp *) nil_chk([self twiceJacobianModifiedWithBoolean:false])) addWithOrgBouncycastleMathEcECPoint:self];
    }
    default:
    {
      
#line 1148
      return [((OrgBouncycastleMathEcECPoint *) nil_chk([self twice])) addWithOrgBouncycastleMathEcECPoint:self];
    }
  }
}


#line 1153
- (OrgBouncycastleMathEcECPoint *)timesPow2WithInt:(jint)e {
  
#line 1156
  if (e < 0) {
    
#line 1158
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'e' cannot be negative");
  }
  if (e == 0 || [self isInfinity]) {
    
#line 1162
    return self;
  }
  if (e == 1) {
    
#line 1166
    return [self twice];
  }
  
#line 1169
  OrgBouncycastleMathEcECCurve *curve = [self getCurve];
  
#line 1171
  OrgBouncycastleMathEcECFieldElement *Y1 = y_;
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) isZero]) {
    
#line 1174
    return [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getInfinity];
  }
  
#line 1177
  jint coord = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  
#line 1179
  OrgBouncycastleMathEcECFieldElement *W1 = [curve getA];
  OrgBouncycastleMathEcECFieldElement *X1 = x_;
  OrgBouncycastleMathEcECFieldElement *Z1 = ((IOSObjectArray *) nil_chk(zs_))->size_ < 1 ? [curve fromBigIntegerWithJavaMathBigInteger:JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)] : IOSObjectArray_Get(zs_, 0);
  
#line 1183
  if (![Z1 isOne]) {
    {
      
#line 1190
      OrgBouncycastleMathEcECFieldElement *Z1Sq;
      
#line 1185
      switch (coord) {
        
#line 1187
        case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
        break;
        case OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
        Z1Sq = [Z1 square];
        X1 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
        Y1 = [Y1 multiplyWithOrgBouncycastleMathEcECFieldElement:Z1Sq];
        W1 = [self calculateJacobianModifiedWWithOrgBouncycastleMathEcECFieldElement:Z1 withOrgBouncycastleMathEcECFieldElement:Z1Sq];
        break;
        case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
        W1 = [self calculateJacobianModifiedWWithOrgBouncycastleMathEcECFieldElement:Z1 withOrgBouncycastleMathEcECFieldElement:nil];
        break;
        case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
        W1 = [self getJacobianModifiedW];
        break;
        default:
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
      }
    }
  }
  for (jint i = 0; i < e; ++i) {
    
#line 1208
    if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) isZero]) {
      
#line 1210
      return [curve getInfinity];
    }
    
#line 1213
    OrgBouncycastleMathEcECFieldElement *X1Squared = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) square];
    OrgBouncycastleMathEcECFieldElement *M = [self threeWithOrgBouncycastleMathEcECFieldElement:X1Squared];
    OrgBouncycastleMathEcECFieldElement *_2Y1 = [self twoWithOrgBouncycastleMathEcECFieldElement:Y1];
    OrgBouncycastleMathEcECFieldElement *_2Y1Squared = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(_2Y1)) multiplyWithOrgBouncycastleMathEcECFieldElement:Y1];
    OrgBouncycastleMathEcECFieldElement *S = [self twoWithOrgBouncycastleMathEcECFieldElement:[X1 multiplyWithOrgBouncycastleMathEcECFieldElement:_2Y1Squared]];
    OrgBouncycastleMathEcECFieldElement *_4T = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(_2Y1Squared)) square];
    OrgBouncycastleMathEcECFieldElement *_8T = [self twoWithOrgBouncycastleMathEcECFieldElement:_4T];
    
#line 1221
    if (![((OrgBouncycastleMathEcECFieldElement *) nil_chk(W1)) isZero]) {
      
#line 1223
      M = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(M)) addWithOrgBouncycastleMathEcECFieldElement:W1];
      W1 = [self twoWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(_8T)) multiplyWithOrgBouncycastleMathEcECFieldElement:W1]];
    }
    
#line 1227
    X1 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(M)) square])) subtractWithOrgBouncycastleMathEcECFieldElement:[self twoWithOrgBouncycastleMathEcECFieldElement:S]];
    Y1 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([M multiplyWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(S)) subtractWithOrgBouncycastleMathEcECFieldElement:X1]])) subtractWithOrgBouncycastleMathEcECFieldElement:_8T];
    Z1 = [Z1 isOne] ? _2Y1 : [_2Y1 multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
  }
  {
    
#line 1235
    OrgBouncycastleMathEcECFieldElement *zInv;
    
#line 1235
    OrgBouncycastleMathEcECFieldElement *zInv2;
    
#line 1235
    OrgBouncycastleMathEcECFieldElement *zInv3;
    
#line 1232
    switch (coord) {
      
#line 1234
      case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
      zInv = [Z1 invert];
      zInv2 =
#line 1235
      [((OrgBouncycastleMathEcECFieldElement *) nil_chk(zInv)) square];
      zInv3 =
#line 1235
      [((OrgBouncycastleMathEcECFieldElement *) nil_chk(zInv2)) multiplyWithOrgBouncycastleMathEcECFieldElement:zInv];
      return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(curve, [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) multiplyWithOrgBouncycastleMathEcECFieldElement:zInv2], [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) multiplyWithOrgBouncycastleMathEcECFieldElement:zInv3]);
      case OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
      X1 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
      Z1 = [Z1 multiplyWithOrgBouncycastleMathEcECFieldElement:[Z1 square]];
      return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(curve, X1, Y1, [IOSObjectArray newArrayWithObjects:(id[]){ Z1 } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()]);
      case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN:
      return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(curve, X1, Y1, [IOSObjectArray newArrayWithObjects:(id[]){ Z1 } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()]);
      case OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
      return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(curve, X1, Y1, [IOSObjectArray newArrayWithObjects:(id[]){ Z1, W1 } count:2 type:OrgBouncycastleMathEcECFieldElement_class_()]);
      default:
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
    }
  }
}


#line 1250
- (OrgBouncycastleMathEcECFieldElement *)twoWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x {
  
#line 1252
  return [((OrgBouncycastleMathEcECFieldElement *) nil_chk(x)) addWithOrgBouncycastleMathEcECFieldElement:x];
}


#line 1255
- (OrgBouncycastleMathEcECFieldElement *)threeWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x {
  
#line 1257
  return [((OrgBouncycastleMathEcECFieldElement *) nil_chk([self twoWithOrgBouncycastleMathEcECFieldElement:x])) addWithOrgBouncycastleMathEcECFieldElement:x];
}


#line 1260
- (OrgBouncycastleMathEcECFieldElement *)fourWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x {
  
#line 1262
  return [self twoWithOrgBouncycastleMathEcECFieldElement:[self twoWithOrgBouncycastleMathEcECFieldElement:x]];
}


#line 1265
- (OrgBouncycastleMathEcECFieldElement *)eightWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x {
  
#line 1267
  return [self fourWithOrgBouncycastleMathEcECFieldElement:[self twoWithOrgBouncycastleMathEcECFieldElement:x]];
}


#line 1270
- (OrgBouncycastleMathEcECFieldElement *)doubleProductFromSquaresWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)a
                                                                 withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
                                                                 withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)aSquared
                                                                 withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)bSquared {
  
#line 1277
  return [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(a)) addWithOrgBouncycastleMathEcECFieldElement:b])) square])) subtractWithOrgBouncycastleMathEcECFieldElement:aSquared])) subtractWithOrgBouncycastleMathEcECFieldElement:bSquared];
}


#line 1280
- (OrgBouncycastleMathEcECPoint *)negate {
  
#line 1283
  if ([self isInfinity]) {
    
#line 1285
    return self;
  }
  
#line 1288
  OrgBouncycastleMathEcECCurve *curve = [self getCurve];
  jint coord = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  
#line 1291
  if (OrgBouncycastleMathEcECCurve_COORD_AFFINE != coord) {
    
#line 1293
    return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(curve, x_, [((OrgBouncycastleMathEcECFieldElement *) nil_chk(y_)) negate], zs_);
  }
  
#line 1296
  return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(curve, x_, [((OrgBouncycastleMathEcECFieldElement *) nil_chk(y_)) negate]);
}


#line 1299
- (OrgBouncycastleMathEcECFieldElement *)calculateJacobianModifiedWWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)Z
                                                                   withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)ZSquared {
  OrgBouncycastleMathEcECFieldElement *a4 = [((OrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) getA];
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(a4)) isZero] || [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z)) isOne]) {
    
#line 1304
    return a4;
  }
  
#line 1307
  if (ZSquared == nil) {
    
#line 1309
    ZSquared = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z)) square];
  }
  
#line 1312
  OrgBouncycastleMathEcECFieldElement *W = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(ZSquared)) square];
  OrgBouncycastleMathEcECFieldElement *a4Neg = [a4 negate];
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(a4Neg)) bitLength] < [a4 bitLength]) {
    
#line 1316
    W = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(W)) multiplyWithOrgBouncycastleMathEcECFieldElement:a4Neg])) negate];
  }
  else {
    
#line 1320
    W = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(W)) multiplyWithOrgBouncycastleMathEcECFieldElement:a4];
  }
  return W;
}


#line 1325
- (OrgBouncycastleMathEcECFieldElement *)getJacobianModifiedW {
  
#line 1327
  OrgBouncycastleMathEcECFieldElement *W = IOSObjectArray_Get(nil_chk(zs_), 1);
  if (W == nil) {
    
#line 1331
    (void) IOSObjectArray_Set(zs_, 1, W = [self calculateJacobianModifiedWWithOrgBouncycastleMathEcECFieldElement:IOSObjectArray_Get(zs_, 0) withOrgBouncycastleMathEcECFieldElement:nil]);
  }
  return W;
}


#line 1336
- (OrgBouncycastleMathEcECPoint_Fp *)twiceJacobianModifiedWithBoolean:(jboolean)calculateW {
  
#line 1338
  OrgBouncycastleMathEcECFieldElement *X1 = x_;
  
#line 1338
  OrgBouncycastleMathEcECFieldElement *Y1 = y_;
  
#line 1338
  OrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(zs_), 0);
  
#line 1338
  OrgBouncycastleMathEcECFieldElement *W1 = [self getJacobianModifiedW];
  
#line 1340
  OrgBouncycastleMathEcECFieldElement *X1Squared = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) square];
  OrgBouncycastleMathEcECFieldElement *M = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([self threeWithOrgBouncycastleMathEcECFieldElement:X1Squared])) addWithOrgBouncycastleMathEcECFieldElement:W1];
  OrgBouncycastleMathEcECFieldElement *_2Y1 = [self twoWithOrgBouncycastleMathEcECFieldElement:Y1];
  OrgBouncycastleMathEcECFieldElement *_2Y1Squared = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(_2Y1)) multiplyWithOrgBouncycastleMathEcECFieldElement:Y1];
  OrgBouncycastleMathEcECFieldElement *S = [self twoWithOrgBouncycastleMathEcECFieldElement:[X1 multiplyWithOrgBouncycastleMathEcECFieldElement:_2Y1Squared]];
  OrgBouncycastleMathEcECFieldElement *X3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(M)) square])) subtractWithOrgBouncycastleMathEcECFieldElement:[self twoWithOrgBouncycastleMathEcECFieldElement:S]];
  OrgBouncycastleMathEcECFieldElement *_4T = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(_2Y1Squared)) square];
  OrgBouncycastleMathEcECFieldElement *_8T = [self twoWithOrgBouncycastleMathEcECFieldElement:_4T];
  OrgBouncycastleMathEcECFieldElement *Y3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([M multiplyWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(S)) subtractWithOrgBouncycastleMathEcECFieldElement:X3]])) subtractWithOrgBouncycastleMathEcECFieldElement:_8T];
  OrgBouncycastleMathEcECFieldElement *W3 = calculateW ? [self twoWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(_8T)) multiplyWithOrgBouncycastleMathEcECFieldElement:W1]] : nil;
  OrgBouncycastleMathEcECFieldElement *Z3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) isOne] ? _2Y1 : [_2Y1 multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
  
#line 1352
  return new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_([self getCurve], X3, Y3, [IOSObjectArray newArrayWithObjects:(id[]){ Z3, W3 } count:2 type:OrgBouncycastleMathEcECFieldElement_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x4, 10, 9, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x4, 11, 9, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x4, 12, 9, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x4, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x4, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint_Fp;", 0x4, 17, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleMathEcECCurve:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[1].selector = @selector(initWithOrgBouncycastleMathEcECCurve:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElementArray:);
  methods[2].selector = @selector(detach);
  methods[3].selector = @selector(getZCoordWithInt:);
  methods[4].selector = @selector(addWithOrgBouncycastleMathEcECPoint:);
  methods[5].selector = @selector(twice);
  methods[6].selector = @selector(twicePlusWithOrgBouncycastleMathEcECPoint:);
  methods[7].selector = @selector(threeTimes);
  methods[8].selector = @selector(timesPow2WithInt:);
  methods[9].selector = @selector(twoWithOrgBouncycastleMathEcECFieldElement:);
  methods[10].selector = @selector(threeWithOrgBouncycastleMathEcECFieldElement:);
  methods[11].selector = @selector(fourWithOrgBouncycastleMathEcECFieldElement:);
  methods[12].selector = @selector(eightWithOrgBouncycastleMathEcECFieldElement:);
  methods[13].selector = @selector(doubleProductFromSquaresWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[14].selector = @selector(negate);
  methods[15].selector = @selector(calculateJacobianModifiedWWithOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[16].selector = @selector(getJacobianModifiedW);
  methods[17].selector = @selector(twiceJacobianModifiedWithBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgBouncycastleMathEcECCurve;LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;", "LOrgBouncycastleMathEcECCurve;LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;[LOrgBouncycastleMathEcECFieldElement;", "getZCoord", "I", "add", "LOrgBouncycastleMathEcECPoint;", "twicePlus", "timesPow2", "two", "LOrgBouncycastleMathEcECFieldElement;", "three", "four", "eight", "doubleProductFromSquares", "LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;", "calculateJacobianModifiedW", "LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;", "twiceJacobianModified", "Z" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECPoint_Fp = { "Fp", "org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x9, 18, 0, 5, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcECPoint_Fp;
}

@end


#line 639
void OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECPoint_Fp *self, OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *x, OrgBouncycastleMathEcECFieldElement *y) {
  OrgBouncycastleMathEcECPoint_AbstractFp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(self,
#line 641
  curve, x, y);
}


#line 639
OrgBouncycastleMathEcECPoint_Fp *new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *x, OrgBouncycastleMathEcECFieldElement *y) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECPoint_Fp, initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_, curve, x, y)
}


#line 639
OrgBouncycastleMathEcECPoint_Fp *create_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *x, OrgBouncycastleMathEcECFieldElement *y) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECPoint_Fp, initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_, curve, x, y)
}


#line 644
void OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(OrgBouncycastleMathEcECPoint_Fp *self, OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *x, OrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs) {
  OrgBouncycastleMathEcECPoint_AbstractFp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(self,
#line 646
  curve, x, y, zs);
}


#line 644
OrgBouncycastleMathEcECPoint_Fp *new_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *x, OrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECPoint_Fp, initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_, curve, x, y, zs)
}


#line 644
OrgBouncycastleMathEcECPoint_Fp *create_OrgBouncycastleMathEcECPoint_Fp_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *x, OrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECPoint_Fp, initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_, curve, x, y, zs)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECPoint_Fp)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECPoint.java"


#line 1356
@implementation OrgBouncycastleMathEcECPoint_AbstractF2m

- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  OrgBouncycastleMathEcECPoint_AbstractF2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(self, curve, x, y);
  return self;
}


#line 1363
- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y
        withOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs {
  OrgBouncycastleMathEcECPoint_AbstractF2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(self, curve, x, y, zs);
  return self;
}


#line 1368
- (jboolean)satisfiesCurveEquation {
  
#line 1371
  OrgBouncycastleMathEcECCurve *curve = [self getCurve];
  OrgBouncycastleMathEcECFieldElement *X = x_;
  OrgBouncycastleMathEcECFieldElement *A = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getA];
  
#line 1373
  OrgBouncycastleMathEcECFieldElement *B = [curve getB];
  
#line 1375
  jint coord = [curve getCoordinateSystem];
  if (coord == OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE) {
    
#line 1378
    OrgBouncycastleMathEcECFieldElement *Z = IOSObjectArray_Get(nil_chk(zs_), 0);
    jboolean ZIsOne = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z)) isOne];
    
#line 1381
    if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X)) isZero]) {
      
#line 1384
      OrgBouncycastleMathEcECFieldElement *Y = y_;
      OrgBouncycastleMathEcECFieldElement *lhs = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) square];
      OrgBouncycastleMathEcECFieldElement *rhs = B;
      if (!ZIsOne) {
        
#line 1389
        rhs = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(rhs)) multiplyWithOrgBouncycastleMathEcECFieldElement:[Z square]];
      }
      return [((OrgBouncycastleMathEcECFieldElement *) nil_chk(lhs)) isEqual:rhs];
    }
    
#line 1394
    OrgBouncycastleMathEcECFieldElement *L = y_;
    
#line 1394
    OrgBouncycastleMathEcECFieldElement *X2 = [X square];
    OrgBouncycastleMathEcECFieldElement *lhs;
    
#line 1395
    OrgBouncycastleMathEcECFieldElement *rhs;
    if (ZIsOne) {
      
#line 1398
      lhs = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(L)) square])) addWithOrgBouncycastleMathEcECFieldElement:L])) addWithOrgBouncycastleMathEcECFieldElement:A];
      rhs = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X2)) square])) addWithOrgBouncycastleMathEcECFieldElement:B];
    }
    else {
      
#line 1403
      OrgBouncycastleMathEcECFieldElement *Z2 = [Z square];
      
#line 1403
      OrgBouncycastleMathEcECFieldElement *Z4 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z2)) square];
      lhs = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(L)) addWithOrgBouncycastleMathEcECFieldElement:Z])) multiplyPlusProductWithOrgBouncycastleMathEcECFieldElement:L withOrgBouncycastleMathEcECFieldElement:A withOrgBouncycastleMathEcECFieldElement:Z2];
      
#line 1406
      rhs = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X2)) squarePlusProductWithOrgBouncycastleMathEcECFieldElement:B withOrgBouncycastleMathEcECFieldElement:Z4];
    }
    lhs = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(lhs)) multiplyWithOrgBouncycastleMathEcECFieldElement:X2];
    return [((OrgBouncycastleMathEcECFieldElement *) nil_chk(lhs)) isEqual:rhs];
  }
  
#line 1412
  OrgBouncycastleMathEcECFieldElement *Y = y_;
  OrgBouncycastleMathEcECFieldElement *lhs = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) addWithOrgBouncycastleMathEcECFieldElement:X])) multiplyWithOrgBouncycastleMathEcECFieldElement:Y];
  
#line 1415
  switch (coord) {
    
#line 1417
    case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
    break;
    case OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    {
      OrgBouncycastleMathEcECFieldElement *Z = IOSObjectArray_Get(nil_chk(zs_), 0);
      if (![((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z)) isOne]) {
        
#line 1424
        OrgBouncycastleMathEcECFieldElement *Z2 = [Z square];
        
#line 1424
        OrgBouncycastleMathEcECFieldElement *Z3 = [Z multiplyWithOrgBouncycastleMathEcECFieldElement:Z2];
        lhs = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(lhs)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z];
        A = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(A)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z];
        B = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(B)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z3];
      }
      break;
    }
    default:
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
  }
  
#line 1435
  OrgBouncycastleMathEcECFieldElement *rhs = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X)) addWithOrgBouncycastleMathEcECFieldElement:A])) multiplyWithOrgBouncycastleMathEcECFieldElement:[X square]])) addWithOrgBouncycastleMathEcECFieldElement:B];
  return [((OrgBouncycastleMathEcECFieldElement *) nil_chk(lhs)) isEqual:rhs];
}


#line 1439
- (jboolean)satisfiesOrder {
  
#line 1442
  JavaMathBigInteger *cofactor = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve_)) getCofactor];
  if ([((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgBouncycastleMathEcECConstants, TWO))) isEqual:cofactor]) {
    
#line 1451
    OrgBouncycastleMathEcECPoint *N = [self normalize];
    OrgBouncycastleMathEcECFieldElement *X = [((OrgBouncycastleMathEcECPoint *) nil_chk(N)) getAffineXCoord];
    return 0 != [((OrgBouncycastleMathEcECFieldElement_AbstractF2m *) nil_chk(((OrgBouncycastleMathEcECFieldElement_AbstractF2m *) cast_chk(X, [OrgBouncycastleMathEcECFieldElement_AbstractF2m class])))) trace];
  }
  if ([((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgBouncycastleMathEcECConstants, FOUR))) isEqual:cofactor]) {
    
#line 1462
    OrgBouncycastleMathEcECPoint *N = [self normalize];
    OrgBouncycastleMathEcECFieldElement *X = [((OrgBouncycastleMathEcECPoint *) nil_chk(N)) getAffineXCoord];
    OrgBouncycastleMathEcECFieldElement *L = [((OrgBouncycastleMathEcECCurve_AbstractF2m *) nil_chk(((OrgBouncycastleMathEcECCurve_AbstractF2m *) cast_chk(curve_, [OrgBouncycastleMathEcECCurve_AbstractF2m class])))) solveQuadraticEquationWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(X)) addWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECCurve *) nil_chk(curve_)) getA]]];
    if (nil == L) {
      
#line 1467
      return false;
    }
    
#line 1473
    OrgBouncycastleMathEcECFieldElement *Y = [N getAffineYCoord];
    OrgBouncycastleMathEcECFieldElement *T = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([X multiplyWithOrgBouncycastleMathEcECFieldElement:L])) addWithOrgBouncycastleMathEcECFieldElement:Y];
    
#line 1485
    return 0 == [((OrgBouncycastleMathEcECFieldElement_AbstractF2m *) nil_chk(((OrgBouncycastleMathEcECFieldElement_AbstractF2m *) cast_chk(T, [OrgBouncycastleMathEcECFieldElement_AbstractF2m class])))) trace];
  }
  
#line 1488
  return OrgBouncycastleMathEcECPoint_satisfiesOrder(self);
}


#line 1491
- (OrgBouncycastleMathEcECPoint *)scaleXWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)scale_ {
  
#line 1494
  if ([self isInfinity]) {
    
#line 1496
    return self;
  }
  
#line 1499
  jint coord = [self getCurveCoordinateSystem];
  
#line 1501
  switch (coord) {
    
#line 1503
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    {
      
#line 1506
      OrgBouncycastleMathEcECFieldElement *X = OrgBouncycastleMathEcECPoint_getRawXCoord(self);
      
#line 1506
      OrgBouncycastleMathEcECFieldElement *L = OrgBouncycastleMathEcECPoint_getRawYCoord(self);
      
#line 1508
      OrgBouncycastleMathEcECFieldElement *X2 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X)) multiplyWithOrgBouncycastleMathEcECFieldElement:scale_];
      OrgBouncycastleMathEcECFieldElement *L2 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(L)) addWithOrgBouncycastleMathEcECFieldElement:X])) divideWithOrgBouncycastleMathEcECFieldElement:scale_])) addWithOrgBouncycastleMathEcECFieldElement:X2];
      
#line 1511
      return [((OrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) createRawPointWithOrgBouncycastleMathEcECFieldElement:X withOrgBouncycastleMathEcECFieldElement:L2 withOrgBouncycastleMathEcECFieldElementArray:OrgBouncycastleMathEcECPoint_getRawZCoords(self)];
    }
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      
#line 1516
      OrgBouncycastleMathEcECFieldElement *X = OrgBouncycastleMathEcECPoint_getRawXCoord(self);
      
#line 1516
      OrgBouncycastleMathEcECFieldElement *L = OrgBouncycastleMathEcECPoint_getRawYCoord(self);
      
#line 1516
      OrgBouncycastleMathEcECFieldElement *Z = IOSObjectArray_Get(nil_chk(OrgBouncycastleMathEcECPoint_getRawZCoords(self)), 0);
      
#line 1519
      OrgBouncycastleMathEcECFieldElement *X2 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X)) multiplyWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(scale_)) square]];
      OrgBouncycastleMathEcECFieldElement *L2 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(L)) addWithOrgBouncycastleMathEcECFieldElement:X])) addWithOrgBouncycastleMathEcECFieldElement:X2];
      OrgBouncycastleMathEcECFieldElement *Z2 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z)) multiplyWithOrgBouncycastleMathEcECFieldElement:scale_];
      
#line 1523
      return [((OrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) createRawPointWithOrgBouncycastleMathEcECFieldElement:X2 withOrgBouncycastleMathEcECFieldElement:L2 withOrgBouncycastleMathEcECFieldElementArray:[IOSObjectArray newArrayWithObjects:(id[]){ Z2 } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()]];
    }
    default:
    {
      return OrgBouncycastleMathEcECPoint_scaleXWithOrgBouncycastleMathEcECFieldElement_(self, scale_);
    }
  }
}


#line 1532
- (OrgBouncycastleMathEcECPoint *)scaleXNegateYWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)scale_ {
  
#line 1535
  return [self scaleXWithOrgBouncycastleMathEcECFieldElement:scale_];
}

- (OrgBouncycastleMathEcECPoint *)scaleYWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)scale_ {
  
#line 1541
  if ([self isInfinity]) {
    
#line 1543
    return self;
  }
  
#line 1546
  jint coord = [self getCurveCoordinateSystem];
  
#line 1548
  switch (coord) {
    
#line 1550
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      OrgBouncycastleMathEcECFieldElement *X = OrgBouncycastleMathEcECPoint_getRawXCoord(self);
      
#line 1553
      OrgBouncycastleMathEcECFieldElement *L = OrgBouncycastleMathEcECPoint_getRawYCoord(self);
      
#line 1556
      OrgBouncycastleMathEcECFieldElement *L2 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(L)) addWithOrgBouncycastleMathEcECFieldElement:X])) multiplyWithOrgBouncycastleMathEcECFieldElement:scale_])) addWithOrgBouncycastleMathEcECFieldElement:X];
      
#line 1558
      return [((OrgBouncycastleMathEcECCurve *) nil_chk([self getCurve])) createRawPointWithOrgBouncycastleMathEcECFieldElement:X withOrgBouncycastleMathEcECFieldElement:L2 withOrgBouncycastleMathEcECFieldElementArray:OrgBouncycastleMathEcECPoint_getRawZCoords(self)];
    }
    default:
    {
      return OrgBouncycastleMathEcECPoint_scaleYWithOrgBouncycastleMathEcECFieldElement_(self, scale_);
    }
  }
}


#line 1567
- (OrgBouncycastleMathEcECPoint *)scaleYNegateXWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)scale_ {
  
#line 1570
  return [self scaleYWithOrgBouncycastleMathEcECFieldElement:scale_];
}

- (OrgBouncycastleMathEcECPoint *)subtractWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)b {
  
#line 1576
  if ([((OrgBouncycastleMathEcECPoint *) nil_chk(b)) isInfinity]) {
    
#line 1578
    return self;
  }
  
#line 1582
  return [self addWithOrgBouncycastleMathEcECPoint:[b negate]];
}


#line 1585
- (OrgBouncycastleMathEcECPoint_AbstractF2m *)tau {
  
#line 1587
  if ([self isInfinity]) {
    
#line 1589
    return self;
  }
  
#line 1592
  OrgBouncycastleMathEcECCurve *curve = [self getCurve];
  jint coord = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  
#line 1595
  OrgBouncycastleMathEcECFieldElement *X1 = x_;
  
#line 1597
  switch (coord) {
    
#line 1599
    case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    {
      OrgBouncycastleMathEcECFieldElement *Y1 = y_;
      return (OrgBouncycastleMathEcECPoint_AbstractF2m *) cast_chk([curve createRawPointWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) square] withOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) square]], [OrgBouncycastleMathEcECPoint_AbstractF2m class]);
    }
    case OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      OrgBouncycastleMathEcECFieldElement *Y1 = y_;
      
#line 1608
      OrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(zs_), 0);
      return (OrgBouncycastleMathEcECPoint_AbstractF2m *) cast_chk([curve createRawPointWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) square] withOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) square] withOrgBouncycastleMathEcECFieldElementArray:[IOSObjectArray newArrayWithObjects:(id[]){
#line 1610
        [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) square] } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()]], [OrgBouncycastleMathEcECPoint_AbstractF2m class]);
      }
      default:
      {
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
      }
    }
  }


#line 1619
- (OrgBouncycastleMathEcECPoint_AbstractF2m *)tauPowWithInt:(jint)pow {
  
#line 1621
  if ([self isInfinity]) {
    
#line 1623
    return self;
  }
  
#line 1626
  OrgBouncycastleMathEcECCurve *curve = [self getCurve];
  jint coord = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  
#line 1629
  OrgBouncycastleMathEcECFieldElement *X1 = x_;
  
#line 1631
  switch (coord) {
    
#line 1633
    case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    {
      OrgBouncycastleMathEcECFieldElement *Y1 = y_;
      return (OrgBouncycastleMathEcECPoint_AbstractF2m *) cast_chk([curve createRawPointWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) squarePowWithInt:pow] withOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) squarePowWithInt:pow]], [OrgBouncycastleMathEcECPoint_AbstractF2m class]);
    }
    case OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      OrgBouncycastleMathEcECFieldElement *Y1 = y_;
      
#line 1642
      OrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(zs_), 0);
      return (OrgBouncycastleMathEcECPoint_AbstractF2m *) cast_chk([curve createRawPointWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) squarePowWithInt:pow] withOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) squarePowWithInt:pow] withOrgBouncycastleMathEcECFieldElementArray:[IOSObjectArray newArrayWithObjects:(id[]){
#line 1644
        [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) squarePowWithInt:pow] } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()]], [OrgBouncycastleMathEcECPoint_AbstractF2m class]);
      }
      default:
      {
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
      }
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint_AbstractF2m;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint_AbstractF2m;", 0x1, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleMathEcECCurve:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[1].selector = @selector(initWithOrgBouncycastleMathEcECCurve:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElementArray:);
  methods[2].selector = @selector(satisfiesCurveEquation);
  methods[3].selector = @selector(satisfiesOrder);
  methods[4].selector = @selector(scaleXWithOrgBouncycastleMathEcECFieldElement:);
  methods[5].selector = @selector(scaleXNegateYWithOrgBouncycastleMathEcECFieldElement:);
  methods[6].selector = @selector(scaleYWithOrgBouncycastleMathEcECFieldElement:);
  methods[7].selector = @selector(scaleYNegateXWithOrgBouncycastleMathEcECFieldElement:);
  methods[8].selector = @selector(subtractWithOrgBouncycastleMathEcECPoint:);
  methods[9].selector = @selector(tau);
  methods[10].selector = @selector(tauPowWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgBouncycastleMathEcECCurve;LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;", "LOrgBouncycastleMathEcECCurve;LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;[LOrgBouncycastleMathEcECFieldElement;", "scaleX", "LOrgBouncycastleMathEcECFieldElement;", "scaleXNegateY", "scaleY", "scaleYNegateX", "subtract", "LOrgBouncycastleMathEcECPoint;", "tauPow", "I" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECPoint_AbstractF2m = { "AbstractF2m", "org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x409, 11, 0, 8, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcECPoint_AbstractF2m;
}

@end


#line 1358
void OrgBouncycastleMathEcECPoint_AbstractF2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECPoint_AbstractF2m *self, OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *x, OrgBouncycastleMathEcECFieldElement *y) {
  OrgBouncycastleMathEcECPoint_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(self,
#line 1360
  curve, x, y);
}


#line 1363
void OrgBouncycastleMathEcECPoint_AbstractF2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(OrgBouncycastleMathEcECPoint_AbstractF2m *self, OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *x, OrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs) {
  OrgBouncycastleMathEcECPoint_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(self,
#line 1365
  curve, x, y, zs);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECPoint_AbstractF2m)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECPoint.java"


#line 1657
@implementation OrgBouncycastleMathEcECPoint_F2m

- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y {
  OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(self, curve, x, y);
  return self;
}

- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)curve
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
             withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y
        withOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs {
  OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(self, curve, x, y, zs);
  return self;
}


#line 1673
- (OrgBouncycastleMathEcECPoint *)detach {
  
#line 1676
  return new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(nil, [self getAffineXCoord], [self getAffineYCoord]);
}

- (OrgBouncycastleMathEcECFieldElement *)getYCoord {
  
#line 1682
  jint coord = [self getCurveCoordinateSystem];
  
#line 1684
  switch (coord) {
    
#line 1686
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      OrgBouncycastleMathEcECFieldElement *X = x_;
      
#line 1689
      OrgBouncycastleMathEcECFieldElement *L = y_;
      
#line 1691
      if ([self isInfinity] || [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X)) isZero]) {
        
#line 1693
        return L;
      }
      
#line 1697
      OrgBouncycastleMathEcECFieldElement *Y = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(L)) addWithOrgBouncycastleMathEcECFieldElement:X])) multiplyWithOrgBouncycastleMathEcECFieldElement:X];
      if (OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE == coord) {
        
#line 1700
        OrgBouncycastleMathEcECFieldElement *Z = IOSObjectArray_Get(nil_chk(zs_), 0);
        if (![((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z)) isOne]) {
          
#line 1703
          Y = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) divideWithOrgBouncycastleMathEcECFieldElement:Z];
        }
      }
      return Y;
    }
    default:
    {
      return y_;
    }
  }
}


#line 1715
- (jboolean)getCompressionYTilde {
  
#line 1718
  OrgBouncycastleMathEcECFieldElement *X = OrgBouncycastleMathEcECPoint_getRawXCoord(self);
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X)) isZero]) {
    
#line 1721
    return false;
  }
  
#line 1724
  OrgBouncycastleMathEcECFieldElement *Y = OrgBouncycastleMathEcECPoint_getRawYCoord(self);
  
#line 1726
  switch ([self getCurveCoordinateSystem]) {
    
#line 1728
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      
#line 1732
      return [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) testBitZero] != [X testBitZero];
    }
    default:
    {
      return [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) divideWithOrgBouncycastleMathEcECFieldElement:X])) testBitZero];
    }
  }
}


#line 1741
- (OrgBouncycastleMathEcECPoint *)addWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)b {
  
#line 1744
  if ([self isInfinity]) {
    
#line 1746
    return b;
  }
  if ([((OrgBouncycastleMathEcECPoint *) nil_chk(b)) isInfinity]) {
    
#line 1750
    return self;
  }
  
#line 1753
  OrgBouncycastleMathEcECCurve *curve = [self getCurve];
  jint coord = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  
#line 1756
  OrgBouncycastleMathEcECFieldElement *X1 = x_;
  OrgBouncycastleMathEcECFieldElement *X2 = b->x_;
  
#line 1759
  switch (coord) {
    
#line 1761
    case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
    {
      OrgBouncycastleMathEcECFieldElement *Y1 = y_;
      OrgBouncycastleMathEcECFieldElement *Y2 = b->y_;
      
#line 1766
      OrgBouncycastleMathEcECFieldElement *dx = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) addWithOrgBouncycastleMathEcECFieldElement:X2];
      
#line 1766
      OrgBouncycastleMathEcECFieldElement *dy = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) addWithOrgBouncycastleMathEcECFieldElement:Y2];
      if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(dx)) isZero]) {
        
#line 1769
        if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(dy)) isZero]) {
          
#line 1771
          return [self twice];
        }
        
#line 1774
        return [curve getInfinity];
      }
      
#line 1777
      OrgBouncycastleMathEcECFieldElement *L = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(dy)) divideWithOrgBouncycastleMathEcECFieldElement:dx];
      
#line 1779
      OrgBouncycastleMathEcECFieldElement *X3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(L)) square])) addWithOrgBouncycastleMathEcECFieldElement:L])) addWithOrgBouncycastleMathEcECFieldElement:dx])) addWithOrgBouncycastleMathEcECFieldElement:[curve getA]];
      OrgBouncycastleMathEcECFieldElement *Y3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([L multiplyWithOrgBouncycastleMathEcECFieldElement:[X1 addWithOrgBouncycastleMathEcECFieldElement:X3]])) addWithOrgBouncycastleMathEcECFieldElement:X3])) addWithOrgBouncycastleMathEcECFieldElement:Y1];
      
#line 1782
      return new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(curve, X3, Y3);
    }
    case OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    {
      OrgBouncycastleMathEcECFieldElement *Y1 = y_;
      
#line 1786
      OrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(zs_), 0);
      OrgBouncycastleMathEcECFieldElement *Y2 = b->y_;
      
#line 1787
      OrgBouncycastleMathEcECFieldElement *Z2 = IOSObjectArray_Get(b->zs_, 0);
      
#line 1789
      jboolean Z2IsOne = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z2)) isOne];
      
#line 1791
      OrgBouncycastleMathEcECFieldElement *U1 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) multiplyWithOrgBouncycastleMathEcECFieldElement:Y2];
      OrgBouncycastleMathEcECFieldElement *U2 = Z2IsOne ? Y1 : [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z2];
      OrgBouncycastleMathEcECFieldElement *U = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(U1)) addWithOrgBouncycastleMathEcECFieldElement:U2];
      OrgBouncycastleMathEcECFieldElement *V1 = [Z1 multiplyWithOrgBouncycastleMathEcECFieldElement:X2];
      OrgBouncycastleMathEcECFieldElement *V2 = Z2IsOne ? X1 : [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z2];
      OrgBouncycastleMathEcECFieldElement *V = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(V1)) addWithOrgBouncycastleMathEcECFieldElement:V2];
      
#line 1798
      if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(V)) isZero]) {
        
#line 1800
        if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(U)) isZero]) {
          
#line 1802
          return [self twice];
        }
        
#line 1805
        return [curve getInfinity];
      }
      
#line 1808
      OrgBouncycastleMathEcECFieldElement *VSq = [V square];
      OrgBouncycastleMathEcECFieldElement *VCu = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(VSq)) multiplyWithOrgBouncycastleMathEcECFieldElement:V];
      OrgBouncycastleMathEcECFieldElement *W = Z2IsOne ? Z1 : [Z1 multiplyWithOrgBouncycastleMathEcECFieldElement:Z2];
      OrgBouncycastleMathEcECFieldElement *uv = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(U)) addWithOrgBouncycastleMathEcECFieldElement:V];
      OrgBouncycastleMathEcECFieldElement *A = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(uv)) multiplyPlusProductWithOrgBouncycastleMathEcECFieldElement:U withOrgBouncycastleMathEcECFieldElement:VSq withOrgBouncycastleMathEcECFieldElement:[curve getA]])) multiplyWithOrgBouncycastleMathEcECFieldElement:W])) addWithOrgBouncycastleMathEcECFieldElement:VCu];
      
#line 1814
      OrgBouncycastleMathEcECFieldElement *X3 = [V multiplyWithOrgBouncycastleMathEcECFieldElement:A];
      OrgBouncycastleMathEcECFieldElement *VSqZ2 = Z2IsOne ? VSq : [VSq multiplyWithOrgBouncycastleMathEcECFieldElement:Z2];
      OrgBouncycastleMathEcECFieldElement *Y3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([U multiplyPlusProductWithOrgBouncycastleMathEcECFieldElement:X1 withOrgBouncycastleMathEcECFieldElement:V withOrgBouncycastleMathEcECFieldElement:Y1])) multiplyPlusProductWithOrgBouncycastleMathEcECFieldElement:VSqZ2 withOrgBouncycastleMathEcECFieldElement:uv withOrgBouncycastleMathEcECFieldElement:A];
      OrgBouncycastleMathEcECFieldElement *Z3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(VCu)) multiplyWithOrgBouncycastleMathEcECFieldElement:W];
      
#line 1819
      return new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(curve, X3, Y3, [IOSObjectArray newArrayWithObjects:(id[]){ Z3 } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()]);
    }
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) isZero]) {
        
#line 1825
        if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X2)) isZero]) {
          
#line 1827
          return [curve getInfinity];
        }
        
#line 1830
        return [b addWithOrgBouncycastleMathEcECPoint:self];
      }
      
#line 1833
      OrgBouncycastleMathEcECFieldElement *L1 = y_;
      
#line 1833
      OrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(zs_), 0);
      OrgBouncycastleMathEcECFieldElement *L2 = b->y_;
      
#line 1834
      OrgBouncycastleMathEcECFieldElement *Z2 = IOSObjectArray_Get(b->zs_, 0);
      
#line 1836
      jboolean Z1IsOne = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) isOne];
      OrgBouncycastleMathEcECFieldElement *U2 = X2;
      
#line 1837
      OrgBouncycastleMathEcECFieldElement *S2 = L2;
      if (!Z1IsOne) {
        
#line 1840
        U2 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(U2)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
        S2 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(S2)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
      }
      
#line 1844
      jboolean Z2IsOne = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z2)) isOne];
      OrgBouncycastleMathEcECFieldElement *U1 = X1;
      
#line 1845
      OrgBouncycastleMathEcECFieldElement *S1 = L1;
      if (!Z2IsOne) {
        
#line 1848
        U1 = [U1 multiplyWithOrgBouncycastleMathEcECFieldElement:Z2];
        S1 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(S1)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z2];
      }
      
#line 1852
      OrgBouncycastleMathEcECFieldElement *A = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(S1)) addWithOrgBouncycastleMathEcECFieldElement:S2];
      OrgBouncycastleMathEcECFieldElement *B = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(U1)) addWithOrgBouncycastleMathEcECFieldElement:U2];
      
#line 1855
      if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(B)) isZero]) {
        
#line 1857
        if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(A)) isZero]) {
          
#line 1859
          return [self twice];
        }
        
#line 1862
        return [curve getInfinity];
      }
      
#line 1865
      OrgBouncycastleMathEcECFieldElement *X3;
      
#line 1865
      OrgBouncycastleMathEcECFieldElement *L3;
      
#line 1865
      OrgBouncycastleMathEcECFieldElement *Z3;
      if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X2)) isZero]) {
        
#line 1869
        OrgBouncycastleMathEcECPoint *p = [self normalize];
        X1 = [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getXCoord];
        OrgBouncycastleMathEcECFieldElement *Y1 = [p getYCoord];
        
#line 1873
        OrgBouncycastleMathEcECFieldElement *Y2 = L2;
        OrgBouncycastleMathEcECFieldElement *L = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) addWithOrgBouncycastleMathEcECFieldElement:Y2])) divideWithOrgBouncycastleMathEcECFieldElement:X1];
        
#line 1876
        X3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(L)) square])) addWithOrgBouncycastleMathEcECFieldElement:L])) addWithOrgBouncycastleMathEcECFieldElement:X1])) addWithOrgBouncycastleMathEcECFieldElement:[curve getA]];
        if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X3)) isZero]) {
          
#line 1879
          return new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(curve, X3, [((OrgBouncycastleMathEcECFieldElement *) nil_chk([curve getB])) sqrt]);
        }
        
#line 1882
        OrgBouncycastleMathEcECFieldElement *Y3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([L multiplyWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) addWithOrgBouncycastleMathEcECFieldElement:X3]])) addWithOrgBouncycastleMathEcECFieldElement:X3])) addWithOrgBouncycastleMathEcECFieldElement:Y1];
        L3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y3)) divideWithOrgBouncycastleMathEcECFieldElement:X3])) addWithOrgBouncycastleMathEcECFieldElement:X3];
        Z3 = [curve fromBigIntegerWithJavaMathBigInteger:JreLoadStatic(OrgBouncycastleMathEcECConstants, ONE)];
      }
      else {
        
#line 1888
        B = [B square];
        
#line 1890
        OrgBouncycastleMathEcECFieldElement *AU1 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(A)) multiplyWithOrgBouncycastleMathEcECFieldElement:U1];
        OrgBouncycastleMathEcECFieldElement *AU2 = [A multiplyWithOrgBouncycastleMathEcECFieldElement:U2];
        
#line 1893
        X3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(AU1)) multiplyWithOrgBouncycastleMathEcECFieldElement:AU2];
        if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X3)) isZero]) {
          
#line 1896
          return new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(curve, X3, [((OrgBouncycastleMathEcECFieldElement *) nil_chk([curve getB])) sqrt]);
        }
        
#line 1899
        OrgBouncycastleMathEcECFieldElement *ABZ2 = [A multiplyWithOrgBouncycastleMathEcECFieldElement:B];
        if (!Z2IsOne) {
          
#line 1902
          ABZ2 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(ABZ2)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z2];
        }
        
#line 1905
        L3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(AU2)) addWithOrgBouncycastleMathEcECFieldElement:B])) squarePlusProductWithOrgBouncycastleMathEcECFieldElement:ABZ2 withOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk(L1)) addWithOrgBouncycastleMathEcECFieldElement:Z1]];
        
#line 1907
        Z3 = ABZ2;
        if (!Z1IsOne) {
          
#line 1910
          Z3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z3)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
        }
      }
      
#line 1914
      return new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(curve, X3, L3, [IOSObjectArray newArrayWithObjects:(id[]){ Z3 } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()]);
    }
    default:
    {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
    }
  }
}


#line 1923
- (OrgBouncycastleMathEcECPoint *)twice {
  
#line 1926
  if ([self isInfinity]) {
    
#line 1928
    return self;
  }
  
#line 1931
  OrgBouncycastleMathEcECCurve *curve = [self getCurve];
  
#line 1933
  OrgBouncycastleMathEcECFieldElement *X1 = x_;
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) isZero]) {
    
#line 1937
    return [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getInfinity];
  }
  
#line 1940
  jint coord = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  
#line 1942
  switch (coord) {
    
#line 1944
    case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
    {
      OrgBouncycastleMathEcECFieldElement *Y1 = y_;
      
#line 1948
      OrgBouncycastleMathEcECFieldElement *L1 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) divideWithOrgBouncycastleMathEcECFieldElement:X1])) addWithOrgBouncycastleMathEcECFieldElement:X1];
      
#line 1950
      OrgBouncycastleMathEcECFieldElement *X3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(L1)) square])) addWithOrgBouncycastleMathEcECFieldElement:L1])) addWithOrgBouncycastleMathEcECFieldElement:[curve getA]];
      OrgBouncycastleMathEcECFieldElement *Y3 = [X1 squarePlusProductWithOrgBouncycastleMathEcECFieldElement:X3 withOrgBouncycastleMathEcECFieldElement:[L1 addOne]];
      
#line 1953
      return new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(curve, X3, Y3);
    }
    case OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    {
      OrgBouncycastleMathEcECFieldElement *Y1 = y_;
      
#line 1957
      OrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(zs_), 0);
      
#line 1959
      jboolean Z1IsOne = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) isOne];
      OrgBouncycastleMathEcECFieldElement *X1Z1 = Z1IsOne ? X1 : [X1 multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
      OrgBouncycastleMathEcECFieldElement *Y1Z1 = Z1IsOne ? Y1 : [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y1)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
      
#line 1963
      OrgBouncycastleMathEcECFieldElement *X1Sq = [X1 square];
      OrgBouncycastleMathEcECFieldElement *S = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1Sq)) addWithOrgBouncycastleMathEcECFieldElement:Y1Z1];
      OrgBouncycastleMathEcECFieldElement *V = X1Z1;
      OrgBouncycastleMathEcECFieldElement *vSquared = [V square];
      OrgBouncycastleMathEcECFieldElement *sv = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(S)) addWithOrgBouncycastleMathEcECFieldElement:V];
      OrgBouncycastleMathEcECFieldElement *h = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(sv)) multiplyPlusProductWithOrgBouncycastleMathEcECFieldElement:S withOrgBouncycastleMathEcECFieldElement:vSquared withOrgBouncycastleMathEcECFieldElement:[curve getA]];
      
#line 1970
      OrgBouncycastleMathEcECFieldElement *X3 = [V multiplyWithOrgBouncycastleMathEcECFieldElement:h];
      OrgBouncycastleMathEcECFieldElement *Y3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([X1Sq square])) multiplyPlusProductWithOrgBouncycastleMathEcECFieldElement:V withOrgBouncycastleMathEcECFieldElement:h withOrgBouncycastleMathEcECFieldElement:sv];
      OrgBouncycastleMathEcECFieldElement *Z3 = [V multiplyWithOrgBouncycastleMathEcECFieldElement:vSquared];
      
#line 1974
      return new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(curve, X3, Y3, [IOSObjectArray newArrayWithObjects:(id[]){ Z3 } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()]);
    }
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      OrgBouncycastleMathEcECFieldElement *L1 = y_;
      
#line 1978
      OrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(zs_), 0);
      
#line 1980
      jboolean Z1IsOne = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) isOne];
      OrgBouncycastleMathEcECFieldElement *L1Z1 = Z1IsOne ? L1 : [((OrgBouncycastleMathEcECFieldElement *) nil_chk(L1)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
      OrgBouncycastleMathEcECFieldElement *Z1Sq = Z1IsOne ? Z1 : [Z1 square];
      OrgBouncycastleMathEcECFieldElement *a = [curve getA];
      OrgBouncycastleMathEcECFieldElement *aZ1Sq = Z1IsOne ? a : [((OrgBouncycastleMathEcECFieldElement *) nil_chk(a)) multiplyWithOrgBouncycastleMathEcECFieldElement:Z1Sq];
      OrgBouncycastleMathEcECFieldElement *T = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(L1)) square])) addWithOrgBouncycastleMathEcECFieldElement:L1Z1])) addWithOrgBouncycastleMathEcECFieldElement:aZ1Sq];
      if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(T)) isZero]) {
        
#line 1988
        return new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(curve, T, [((OrgBouncycastleMathEcECFieldElement *) nil_chk([curve getB])) sqrt]);
      }
      
#line 1991
      OrgBouncycastleMathEcECFieldElement *X3 = [T square];
      OrgBouncycastleMathEcECFieldElement *Z3 = Z1IsOne ? T : [T multiplyWithOrgBouncycastleMathEcECFieldElement:Z1Sq];
      
#line 1994
      OrgBouncycastleMathEcECFieldElement *b = [curve getB];
      OrgBouncycastleMathEcECFieldElement *L3;
      if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(b)) bitLength] < JreRShift32([curve getFieldSize], 1)) {
        
#line 1998
        OrgBouncycastleMathEcECFieldElement *t1 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([L1 addWithOrgBouncycastleMathEcECFieldElement:X1])) square];
        OrgBouncycastleMathEcECFieldElement *t2;
        if ([b isOne]) {
          
#line 2002
          t2 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([aZ1Sq addWithOrgBouncycastleMathEcECFieldElement:Z1Sq])) square];
        }
        else {
          
#line 2007
          t2 = [aZ1Sq squarePlusProductWithOrgBouncycastleMathEcECFieldElement:b withOrgBouncycastleMathEcECFieldElement:[Z1Sq square]];
        }
        L3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(t1)) addWithOrgBouncycastleMathEcECFieldElement:T])) addWithOrgBouncycastleMathEcECFieldElement:Z1Sq])) multiplyWithOrgBouncycastleMathEcECFieldElement:t1])) addWithOrgBouncycastleMathEcECFieldElement:t2])) addWithOrgBouncycastleMathEcECFieldElement:X3];
        if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(a)) isZero]) {
          
#line 2012
          L3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(L3)) addWithOrgBouncycastleMathEcECFieldElement:Z3];
        }
        else if (![a isOne]) {
          
#line 2016
          L3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(L3)) addWithOrgBouncycastleMathEcECFieldElement:[((OrgBouncycastleMathEcECFieldElement *) nil_chk([a addOne])) multiplyWithOrgBouncycastleMathEcECFieldElement:Z3]];
        }
      }
      else {
        
#line 2021
        OrgBouncycastleMathEcECFieldElement *X1Z1 = Z1IsOne ? X1 : [X1 multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
        L3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([X1Z1 squarePlusProductWithOrgBouncycastleMathEcECFieldElement:T withOrgBouncycastleMathEcECFieldElement:L1Z1])) addWithOrgBouncycastleMathEcECFieldElement:X3])) addWithOrgBouncycastleMathEcECFieldElement:Z3];
      }
      
#line 2025
      return new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(curve, X3, L3, [IOSObjectArray newArrayWithObjects:(id[]){ Z3 } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()]);
    }
    default:
    {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
    }
  }
}


#line 2034
- (OrgBouncycastleMathEcECPoint *)twicePlusWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)b {
  
#line 2037
  if ([self isInfinity]) {
    
#line 2039
    return b;
  }
  if ([((OrgBouncycastleMathEcECPoint *) nil_chk(b)) isInfinity]) {
    
#line 2043
    return [self twice];
  }
  
#line 2046
  OrgBouncycastleMathEcECCurve *curve = [self getCurve];
  
#line 2048
  OrgBouncycastleMathEcECFieldElement *X1 = x_;
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X1)) isZero]) {
    
#line 2052
    return b;
  }
  
#line 2055
  jint coord = [((OrgBouncycastleMathEcECCurve *) nil_chk(curve)) getCoordinateSystem];
  
#line 2057
  switch (coord) {
    
#line 2059
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      
#line 2062
      OrgBouncycastleMathEcECFieldElement *X2 = b->x_;
      
#line 2062
      OrgBouncycastleMathEcECFieldElement *Z2 = IOSObjectArray_Get(nil_chk(b->zs_), 0);
      if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X2)) isZero] || ![((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z2)) isOne]) {
        
#line 2065
        return [((OrgBouncycastleMathEcECPoint *) nil_chk([self twice])) addWithOrgBouncycastleMathEcECPoint:b];
      }
      
#line 2068
      OrgBouncycastleMathEcECFieldElement *L1 = y_;
      
#line 2068
      OrgBouncycastleMathEcECFieldElement *Z1 = IOSObjectArray_Get(nil_chk(zs_), 0);
      OrgBouncycastleMathEcECFieldElement *L2 = b->y_;
      
#line 2071
      OrgBouncycastleMathEcECFieldElement *X1Sq = [X1 square];
      OrgBouncycastleMathEcECFieldElement *L1Sq = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(L1)) square];
      OrgBouncycastleMathEcECFieldElement *Z1Sq = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Z1)) square];
      OrgBouncycastleMathEcECFieldElement *L1Z1 = [L1 multiplyWithOrgBouncycastleMathEcECFieldElement:Z1];
      
#line 2076
      OrgBouncycastleMathEcECFieldElement *T = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([curve getA])) multiplyWithOrgBouncycastleMathEcECFieldElement:Z1Sq])) addWithOrgBouncycastleMathEcECFieldElement:L1Sq])) addWithOrgBouncycastleMathEcECFieldElement:L1Z1];
      OrgBouncycastleMathEcECFieldElement *L2plus1 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk(L2)) addOne];
      OrgBouncycastleMathEcECFieldElement *A = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([curve getA])) addWithOrgBouncycastleMathEcECFieldElement:L2plus1])) multiplyWithOrgBouncycastleMathEcECFieldElement:Z1Sq])) addWithOrgBouncycastleMathEcECFieldElement:L1Sq])) multiplyPlusProductWithOrgBouncycastleMathEcECFieldElement:T withOrgBouncycastleMathEcECFieldElement:X1Sq withOrgBouncycastleMathEcECFieldElement:Z1Sq];
      OrgBouncycastleMathEcECFieldElement *X2Z1Sq = [X2 multiplyWithOrgBouncycastleMathEcECFieldElement:Z1Sq];
      OrgBouncycastleMathEcECFieldElement *B = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X2Z1Sq)) addWithOrgBouncycastleMathEcECFieldElement:T])) square];
      
#line 2082
      if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(B)) isZero]) {
        
#line 2084
        if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(A)) isZero]) {
          
#line 2086
          return [b twice];
        }
        
#line 2089
        return [curve getInfinity];
      }
      
#line 2092
      if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(A)) isZero]) {
        
#line 2094
        return new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(curve, A, [((OrgBouncycastleMathEcECFieldElement *) nil_chk([curve getB])) sqrt]);
      }
      
#line 2097
      OrgBouncycastleMathEcECFieldElement *X3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([A square])) multiplyWithOrgBouncycastleMathEcECFieldElement:X2Z1Sq];
      OrgBouncycastleMathEcECFieldElement *Z3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([A multiplyWithOrgBouncycastleMathEcECFieldElement:B])) multiplyWithOrgBouncycastleMathEcECFieldElement:Z1Sq];
      OrgBouncycastleMathEcECFieldElement *L3 = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([A addWithOrgBouncycastleMathEcECFieldElement:B])) square])) multiplyPlusProductWithOrgBouncycastleMathEcECFieldElement:T withOrgBouncycastleMathEcECFieldElement:L2plus1 withOrgBouncycastleMathEcECFieldElement:Z3];
      
#line 2101
      return new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(curve, X3, L3, [IOSObjectArray newArrayWithObjects:(id[]){ Z3 } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()]);
    }
    default:
    {
      return [((OrgBouncycastleMathEcECPoint *) nil_chk([self twice])) addWithOrgBouncycastleMathEcECPoint:b];
    }
  }
}


#line 2110
- (OrgBouncycastleMathEcECPoint *)negate {
  
#line 2113
  if ([self isInfinity]) {
    
#line 2115
    return self;
  }
  
#line 2118
  OrgBouncycastleMathEcECFieldElement *X = x_;
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk(X)) isZero]) {
    
#line 2121
    return self;
  }
  
#line 2124
  switch ([self getCurveCoordinateSystem]) {
    
#line 2126
    case OrgBouncycastleMathEcECCurve_COORD_AFFINE:
    {
      OrgBouncycastleMathEcECFieldElement *Y = y_;
      return new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(curve_, X, [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) addWithOrgBouncycastleMathEcECFieldElement:X]);
    }
    case OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS:
    {
      OrgBouncycastleMathEcECFieldElement *Y = y_;
      
#line 2133
      OrgBouncycastleMathEcECFieldElement *Z = IOSObjectArray_Get(nil_chk(zs_), 0);
      return new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(curve_, X, [((OrgBouncycastleMathEcECFieldElement *) nil_chk(Y)) addWithOrgBouncycastleMathEcECFieldElement:X], [IOSObjectArray newArrayWithObjects:(id[]){ Z } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()]);
    }
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    {
      OrgBouncycastleMathEcECFieldElement *L = y_;
      return new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(curve_, X, [((OrgBouncycastleMathEcECFieldElement *) nil_chk(L)) addOne]);
    }
    case OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      
#line 2144
      OrgBouncycastleMathEcECFieldElement *L = y_;
      
#line 2144
      OrgBouncycastleMathEcECFieldElement *Z = IOSObjectArray_Get(nil_chk(zs_), 0);
      return new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(curve_, X, [((OrgBouncycastleMathEcECFieldElement *) nil_chk(L)) addWithOrgBouncycastleMathEcECFieldElement:Z], [IOSObjectArray newArrayWithObjects:(id[]){ Z } count:1 type:OrgBouncycastleMathEcECFieldElement_class_()]);
    }
    default:
    {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleMathEcECCurve:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:);
  methods[1].selector = @selector(initWithOrgBouncycastleMathEcECCurve:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElement:withOrgBouncycastleMathEcECFieldElementArray:);
  methods[2].selector = @selector(detach);
  methods[3].selector = @selector(getYCoord);
  methods[4].selector = @selector(getCompressionYTilde);
  methods[5].selector = @selector(addWithOrgBouncycastleMathEcECPoint:);
  methods[6].selector = @selector(twice);
  methods[7].selector = @selector(twicePlusWithOrgBouncycastleMathEcECPoint:);
  methods[8].selector = @selector(negate);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgBouncycastleMathEcECCurve;LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;", "LOrgBouncycastleMathEcECCurve;LOrgBouncycastleMathEcECFieldElement;LOrgBouncycastleMathEcECFieldElement;[LOrgBouncycastleMathEcECFieldElement;", "add", "LOrgBouncycastleMathEcECPoint;", "twicePlus" };
  static const J2ObjcClassInfo _OrgBouncycastleMathEcECPoint_F2m = { "F2m", "org.bouncycastle.math.ec", ptrTable, methods, NULL, 7, 0x9, 9, 0, 3, -1, -1, -1, -1 };
  return &_OrgBouncycastleMathEcECPoint_F2m;
}

@end


#line 1659
void OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECPoint_F2m *self, OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *x, OrgBouncycastleMathEcECFieldElement *y) {
  OrgBouncycastleMathEcECPoint_AbstractF2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(self,
#line 1661
  curve, x, y);
}


#line 1659
OrgBouncycastleMathEcECPoint_F2m *new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *x, OrgBouncycastleMathEcECFieldElement *y) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECPoint_F2m, initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_, curve, x, y)
}


#line 1659
OrgBouncycastleMathEcECPoint_F2m *create_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_(OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *x, OrgBouncycastleMathEcECFieldElement *y) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECPoint_F2m, initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_, curve, x, y)
}


#line 1666
void OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(OrgBouncycastleMathEcECPoint_F2m *self, OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *x, OrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs) {
  OrgBouncycastleMathEcECPoint_AbstractF2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(self,
#line 1668
  curve, x, y, zs);
}


#line 1666
OrgBouncycastleMathEcECPoint_F2m *new_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *x, OrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs) {
  J2OBJC_NEW_IMPL(OrgBouncycastleMathEcECPoint_F2m, initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_, curve, x, y, zs)
}


#line 1666
OrgBouncycastleMathEcECPoint_F2m *create_OrgBouncycastleMathEcECPoint_F2m_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_(OrgBouncycastleMathEcECCurve *curve, OrgBouncycastleMathEcECFieldElement *x, OrgBouncycastleMathEcECFieldElement *y, IOSObjectArray *zs) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleMathEcECPoint_F2m, initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElementArray_, curve, x, y, zs)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcECPoint_F2m)
