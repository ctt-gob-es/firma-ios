//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECMultiplier.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleMathEcECMultiplier")
#ifdef RESTRICT_OrgBouncycastleMathEcECMultiplier
#define INCLUDE_ALL_OrgBouncycastleMathEcECMultiplier 0
#else
#define INCLUDE_ALL_OrgBouncycastleMathEcECMultiplier 1
#endif
#undef RESTRICT_OrgBouncycastleMathEcECMultiplier

#if !defined (OrgBouncycastleMathEcECMultiplier_) && (INCLUDE_ALL_OrgBouncycastleMathEcECMultiplier || defined(INCLUDE_OrgBouncycastleMathEcECMultiplier))
#define OrgBouncycastleMathEcECMultiplier_

@class JavaMathBigInteger;
@class OrgBouncycastleMathEcECPoint;

/*!
 @brief Interface for classes encapsulating a point multiplication algorithm for 
 <code>ECPoint</code>s.
 */
@protocol OrgBouncycastleMathEcECMultiplier < JavaObject >

/*!
 @brief Multiplies the <code>ECPoint p</code> by <code>k</code>, i.e.
 <code>p</code> is added <code>k</code> times to itself.
 @param p The  <code> ECPoint </code>  to be multiplied.
 @param k The factor by which  <code> p </code>  is multiplied.
 @return <code>p</code> multiplied by <code>k</code>.
 */
- (OrgBouncycastleMathEcECPoint *)multiplyWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p
                                                    withJavaMathBigInteger:(JavaMathBigInteger *)k;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcECMultiplier)

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleMathEcECMultiplier)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleMathEcECMultiplier")
