//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/math/ec/ECCurve.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleMathEcECCurve")
#ifdef RESTRICT_OrgBouncycastleMathEcECCurve
#define INCLUDE_ALL_OrgBouncycastleMathEcECCurve 0
#else
#define INCLUDE_ALL_OrgBouncycastleMathEcECCurve 1
#endif
#undef RESTRICT_OrgBouncycastleMathEcECCurve
#ifdef INCLUDE_OrgBouncycastleMathEcECCurve_F2m
#define INCLUDE_OrgBouncycastleMathEcECCurve_AbstractF2m 1
#endif
#ifdef INCLUDE_OrgBouncycastleMathEcECCurve_AbstractF2m
#define INCLUDE_OrgBouncycastleMathEcECCurve 1
#endif
#ifdef INCLUDE_OrgBouncycastleMathEcECCurve_Fp
#define INCLUDE_OrgBouncycastleMathEcECCurve_AbstractFp 1
#endif
#ifdef INCLUDE_OrgBouncycastleMathEcECCurve_AbstractFp
#define INCLUDE_OrgBouncycastleMathEcECCurve 1
#endif

#if !defined (OrgBouncycastleMathEcECCurve_) && (INCLUDE_ALL_OrgBouncycastleMathEcECCurve || defined(INCLUDE_OrgBouncycastleMathEcECCurve))
#define OrgBouncycastleMathEcECCurve_

@class IOSByteArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaMathBigInteger;
@class JavaSecuritySecureRandom;
@class OrgBouncycastleMathEcECCurve_Config;
@class OrgBouncycastleMathEcECFieldElement;
@class OrgBouncycastleMathEcECPoint;
@protocol OrgBouncycastleMathEcECLookupTable;
@protocol OrgBouncycastleMathEcECMultiplier;
@protocol OrgBouncycastleMathEcEndoECEndomorphism;
@protocol OrgBouncycastleMathEcPreCompCallback;
@protocol OrgBouncycastleMathEcPreCompInfo;
@protocol OrgBouncycastleMathFieldFiniteField;

/*!
 @brief base class for an elliptic curve
 */
@interface OrgBouncycastleMathEcECCurve : NSObject {
 @public
  id<OrgBouncycastleMathFieldFiniteField> field_;
  OrgBouncycastleMathEcECFieldElement *a_;
  OrgBouncycastleMathEcECFieldElement *b_;
  JavaMathBigInteger *order_;
  JavaMathBigInteger *cofactor_;
  jint coord_;
  id<OrgBouncycastleMathEcEndoECEndomorphism> endomorphism_;
  id<OrgBouncycastleMathEcECMultiplier> multiplier_;
}

#pragma mark Public

- (OrgBouncycastleMathEcECCurve_Config *)configure;

/*!
 @brief Create a cache-safe lookup table for the specified sequence of points.All the points MUST
  belong to this <code>ECCurve</code> instance, and MUST already be normalized.
 */
- (id<OrgBouncycastleMathEcECLookupTable>)createCacheSafeLookupTableWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points
                                                                                                  withInt:(jint)off
                                                                                                  withInt:(jint)len;

- (OrgBouncycastleMathEcECPoint *)createPointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                             withJavaMathBigInteger:(JavaMathBigInteger *)y;

/*!
 @brief Decode a point on this curve from its ASN.1 encoding.The different
  encodings are taken account of, including point compression for 
 <code>F<sub>p</sub></code> (X9.62 s 4.2.1 pg 17).
 @return The decoded point.
 */
- (OrgBouncycastleMathEcECPoint *)decodePointWithByteArray:(IOSByteArray *)encoded;

- (jboolean)equalsWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)other;

- (jboolean)isEqual:(id)obj;

- (OrgBouncycastleMathEcECFieldElement *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x;

- (OrgBouncycastleMathEcECFieldElement *)getA;

+ (IOSIntArray *)getAllCoordinateSystems;

- (OrgBouncycastleMathEcECFieldElement *)getB;

- (JavaMathBigInteger *)getCofactor;

- (jint)getCoordinateSystem;

- (id<OrgBouncycastleMathEcEndoECEndomorphism>)getEndomorphism;

- (id<OrgBouncycastleMathFieldFiniteField>)getField;

- (jint)getFieldSize;

- (OrgBouncycastleMathEcECPoint *)getInfinity;

/*!
 @brief Sets the default <code>ECMultiplier</code>, unless already set.
 We avoid synchronizing for performance reasons, so there is no uniqueness guarantee.
 */
- (id<OrgBouncycastleMathEcECMultiplier>)getMultiplier;

- (JavaMathBigInteger *)getOrder;

- (id<OrgBouncycastleMathEcPreCompInfo>)getPreCompInfoWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)point
                                                                          withNSString:(NSString *)name;

- (NSUInteger)hash;

- (OrgBouncycastleMathEcECPoint *)importPointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p;

- (jboolean)isValidFieldElementWithJavaMathBigInteger:(JavaMathBigInteger *)x;

/*!
 @brief Normalization ensures that any projective coordinate is 1, and therefore that the x, y
  coordinates reflect those of the equivalent point in an affine coordinate system.Where more
  than one point is to be normalized, this method will generally be more efficient than
  normalizing each point separately.
 @param points An array of points that will be updated in place with their normalized versions,
              where necessary
 */
- (void)normalizeAllWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points;

/*!
 @brief Normalization ensures that any projective coordinate is 1, and therefore that the x, y
  coordinates reflect those of the equivalent point in an affine coordinate system.Where more
  than one point is to be normalized, this method will generally be more efficient than
  normalizing each point separately.
 An (optional) z-scaling factor can be applied; effectively
  each z coordinate is scaled by this value prior to normalization (but only one
  actual multiplication is needed).
 @param points An array of points that will be updated in place with their normalized versions,
              where necessary
 @param off The start of the range of points to normalize
 @param len The length of the range of points to normalize
 @param iso The (optional) z-scaling factor - can be null
 */
- (void)normalizeAllWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points
                                                  withInt:(jint)off
                                                  withInt:(jint)len
                  withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)iso;

/*!
 @brief Compute a <code>PreCompInfo</code> for a point on this curve, under a given name.Used by 
 <code>ECMultiplier</code>s to save the precomputation for this <code>ECPoint</code> for use
  by subsequent multiplication.
 @param point The 
  <code> ECPoint </code>  to store precomputations for.
 @param name A 
  <code> String </code>  used to index precomputations of different types.
 @param callback Called to calculate the 
  <code> PreCompInfo </code> .
 */
- (id<OrgBouncycastleMathEcPreCompInfo>)precomputeWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)point
                                                                      withNSString:(NSString *)name
                                          withOrgBouncycastleMathEcPreCompCallback:(id<OrgBouncycastleMathEcPreCompCallback>)callback;

- (OrgBouncycastleMathEcECFieldElement *)randomFieldElementWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r;

- (OrgBouncycastleMathEcECFieldElement *)randomFieldElementMultWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r;

- (jboolean)supportsCoordinateSystemWithInt:(jint)coord;

- (OrgBouncycastleMathEcECPoint *)validatePointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                               withJavaMathBigInteger:(JavaMathBigInteger *)y;

#pragma mark Protected

- (instancetype)initWithOrgBouncycastleMathFieldFiniteField:(id<OrgBouncycastleMathFieldFiniteField>)field;

- (void)checkPointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)point;

- (void)checkPointsWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points;

- (void)checkPointsWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points
                                                 withInt:(jint)off
                                                 withInt:(jint)len;

- (OrgBouncycastleMathEcECCurve *)cloneCurve;

- (id<OrgBouncycastleMathEcECMultiplier>)createDefaultMultiplier;

- (OrgBouncycastleMathEcECPoint *)createRawPointWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y;

- (OrgBouncycastleMathEcECPoint *)createRawPointWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y
                                           withOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs;

- (OrgBouncycastleMathEcECPoint *)decompressPointWithInt:(jint)yTilde
                                  withJavaMathBigInteger:(JavaMathBigInteger *)X1;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcECCurve)

J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECCurve, field_, id<OrgBouncycastleMathFieldFiniteField>)
J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECCurve, a_, OrgBouncycastleMathEcECFieldElement *)
J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECCurve, b_, OrgBouncycastleMathEcECFieldElement *)
J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECCurve, order_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECCurve, cofactor_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECCurve, endomorphism_, id<OrgBouncycastleMathEcEndoECEndomorphism>)
J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECCurve, multiplier_, id<OrgBouncycastleMathEcECMultiplier>)

inline jint OrgBouncycastleMathEcECCurve_get_COORD_AFFINE(void);
#define OrgBouncycastleMathEcECCurve_COORD_AFFINE 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleMathEcECCurve, COORD_AFFINE, jint)

inline jint OrgBouncycastleMathEcECCurve_get_COORD_HOMOGENEOUS(void);
#define OrgBouncycastleMathEcECCurve_COORD_HOMOGENEOUS 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleMathEcECCurve, COORD_HOMOGENEOUS, jint)

inline jint OrgBouncycastleMathEcECCurve_get_COORD_JACOBIAN(void);
#define OrgBouncycastleMathEcECCurve_COORD_JACOBIAN 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleMathEcECCurve, COORD_JACOBIAN, jint)

inline jint OrgBouncycastleMathEcECCurve_get_COORD_JACOBIAN_CHUDNOVSKY(void);
#define OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleMathEcECCurve, COORD_JACOBIAN_CHUDNOVSKY, jint)

inline jint OrgBouncycastleMathEcECCurve_get_COORD_JACOBIAN_MODIFIED(void);
#define OrgBouncycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleMathEcECCurve, COORD_JACOBIAN_MODIFIED, jint)

inline jint OrgBouncycastleMathEcECCurve_get_COORD_LAMBDA_AFFINE(void);
#define OrgBouncycastleMathEcECCurve_COORD_LAMBDA_AFFINE 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleMathEcECCurve, COORD_LAMBDA_AFFINE, jint)

inline jint OrgBouncycastleMathEcECCurve_get_COORD_LAMBDA_PROJECTIVE(void);
#define OrgBouncycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleMathEcECCurve, COORD_LAMBDA_PROJECTIVE, jint)

inline jint OrgBouncycastleMathEcECCurve_get_COORD_SKEWED(void);
#define OrgBouncycastleMathEcECCurve_COORD_SKEWED 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleMathEcECCurve, COORD_SKEWED, jint)

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastleMathEcECCurve_getAllCoordinateSystems(void);

FOUNDATION_EXPORT void OrgBouncycastleMathEcECCurve_initWithOrgBouncycastleMathFieldFiniteField_(OrgBouncycastleMathEcECCurve *self, id<OrgBouncycastleMathFieldFiniteField> field);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleMathEcECCurve)

#endif

#if !defined (OrgBouncycastleMathEcECCurve_Config_) && (INCLUDE_ALL_OrgBouncycastleMathEcECCurve || defined(INCLUDE_OrgBouncycastleMathEcECCurve_Config))
#define OrgBouncycastleMathEcECCurve_Config_

@class OrgBouncycastleMathEcECCurve;
@protocol OrgBouncycastleMathEcECMultiplier;
@protocol OrgBouncycastleMathEcEndoECEndomorphism;

@interface OrgBouncycastleMathEcECCurve_Config : NSObject {
 @public
  jint coord_;
  id<OrgBouncycastleMathEcEndoECEndomorphism> endomorphism_;
  id<OrgBouncycastleMathEcECMultiplier> multiplier_;
}

#pragma mark Public

- (OrgBouncycastleMathEcECCurve *)create;

- (OrgBouncycastleMathEcECCurve_Config *)setCoordinateSystemWithInt:(jint)coord;

- (OrgBouncycastleMathEcECCurve_Config *)setEndomorphismWithOrgBouncycastleMathEcEndoECEndomorphism:(id<OrgBouncycastleMathEcEndoECEndomorphism>)endomorphism;

- (OrgBouncycastleMathEcECCurve_Config *)setMultiplierWithOrgBouncycastleMathEcECMultiplier:(id<OrgBouncycastleMathEcECMultiplier>)multiplier;

#pragma mark Package-Private

- (instancetype)initWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)outer$
                                             withInt:(jint)coord
         withOrgBouncycastleMathEcEndoECEndomorphism:(id<OrgBouncycastleMathEcEndoECEndomorphism>)endomorphism
               withOrgBouncycastleMathEcECMultiplier:(id<OrgBouncycastleMathEcECMultiplier>)multiplier;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcECCurve_Config)

J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECCurve_Config, endomorphism_, id<OrgBouncycastleMathEcEndoECEndomorphism>)
J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECCurve_Config, multiplier_, id<OrgBouncycastleMathEcECMultiplier>)

FOUNDATION_EXPORT void OrgBouncycastleMathEcECCurve_Config_initWithOrgBouncycastleMathEcECCurve_withInt_withOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECMultiplier_(OrgBouncycastleMathEcECCurve_Config *self, OrgBouncycastleMathEcECCurve *outer$, jint coord, id<OrgBouncycastleMathEcEndoECEndomorphism> endomorphism, id<OrgBouncycastleMathEcECMultiplier> multiplier);

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_Config *new_OrgBouncycastleMathEcECCurve_Config_initWithOrgBouncycastleMathEcECCurve_withInt_withOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECMultiplier_(OrgBouncycastleMathEcECCurve *outer$, jint coord, id<OrgBouncycastleMathEcEndoECEndomorphism> endomorphism, id<OrgBouncycastleMathEcECMultiplier> multiplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_Config *create_OrgBouncycastleMathEcECCurve_Config_initWithOrgBouncycastleMathEcECCurve_withInt_withOrgBouncycastleMathEcEndoECEndomorphism_withOrgBouncycastleMathEcECMultiplier_(OrgBouncycastleMathEcECCurve *outer$, jint coord, id<OrgBouncycastleMathEcEndoECEndomorphism> endomorphism, id<OrgBouncycastleMathEcECMultiplier> multiplier);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleMathEcECCurve_Config)

#endif

#if !defined (OrgBouncycastleMathEcECCurve_AbstractFp_) && (INCLUDE_ALL_OrgBouncycastleMathEcECCurve || defined(INCLUDE_OrgBouncycastleMathEcECCurve_AbstractFp))
#define OrgBouncycastleMathEcECCurve_AbstractFp_

@class JavaMathBigInteger;
@class JavaSecuritySecureRandom;
@class OrgBouncycastleMathEcECFieldElement;
@class OrgBouncycastleMathEcECPoint;
@protocol OrgBouncycastleMathFieldFiniteField;

@interface OrgBouncycastleMathEcECCurve_AbstractFp : OrgBouncycastleMathEcECCurve

#pragma mark Public

- (jboolean)isValidFieldElementWithJavaMathBigInteger:(JavaMathBigInteger *)x;

- (OrgBouncycastleMathEcECFieldElement *)randomFieldElementWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r;

- (OrgBouncycastleMathEcECFieldElement *)randomFieldElementMultWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r;

#pragma mark Protected

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q;

- (OrgBouncycastleMathEcECPoint *)decompressPointWithInt:(jint)yTilde
                                  withJavaMathBigInteger:(JavaMathBigInteger *)X1;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgBouncycastleMathFieldFiniteField:(id<OrgBouncycastleMathFieldFiniteField>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcECCurve_AbstractFp)

FOUNDATION_EXPORT void OrgBouncycastleMathEcECCurve_AbstractFp_initWithJavaMathBigInteger_(OrgBouncycastleMathEcECCurve_AbstractFp *self, JavaMathBigInteger *q);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleMathEcECCurve_AbstractFp)

#endif

#if !defined (OrgBouncycastleMathEcECCurve_Fp_) && (INCLUDE_ALL_OrgBouncycastleMathEcECCurve || defined(INCLUDE_OrgBouncycastleMathEcECCurve_Fp))
#define OrgBouncycastleMathEcECCurve_Fp_

@class IOSObjectArray;
@class JavaMathBigInteger;
@class OrgBouncycastleMathEcECCurve;
@class OrgBouncycastleMathEcECFieldElement;
@class OrgBouncycastleMathEcECPoint;
@class OrgBouncycastleMathEcECPoint_Fp;

/*!
 @brief Elliptic curve over Fp
 */
@interface OrgBouncycastleMathEcECCurve_Fp : OrgBouncycastleMathEcECCurve_AbstractFp {
 @public
  JavaMathBigInteger *q_;
  JavaMathBigInteger *r_;
  OrgBouncycastleMathEcECPoint_Fp *infinity_;
}

#pragma mark Public

/*!
 */
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)a
                    withJavaMathBigInteger:(JavaMathBigInteger *)b;

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)a
                    withJavaMathBigInteger:(JavaMathBigInteger *)b
                    withJavaMathBigInteger:(JavaMathBigInteger *)order
                    withJavaMathBigInteger:(JavaMathBigInteger *)cofactor;

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)a
                    withJavaMathBigInteger:(JavaMathBigInteger *)b
                    withJavaMathBigInteger:(JavaMathBigInteger *)order
                    withJavaMathBigInteger:(JavaMathBigInteger *)cofactor
                               withBoolean:(jboolean)isInternal;

- (OrgBouncycastleMathEcECFieldElement *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x;

- (jint)getFieldSize;

- (OrgBouncycastleMathEcECPoint *)getInfinity;

- (JavaMathBigInteger *)getQ;

- (OrgBouncycastleMathEcECPoint *)importPointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p;

- (jboolean)supportsCoordinateSystemWithInt:(jint)coord;

#pragma mark Protected

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)r
   withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)a
   withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
                    withJavaMathBigInteger:(JavaMathBigInteger *)order
                    withJavaMathBigInteger:(JavaMathBigInteger *)cofactor;

- (OrgBouncycastleMathEcECCurve *)cloneCurve;

- (OrgBouncycastleMathEcECPoint *)createRawPointWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y;

- (OrgBouncycastleMathEcECPoint *)createRawPointWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y
                                           withOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgBouncycastleMathEcECCurve_Fp)

J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECCurve_Fp, q_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECCurve_Fp, r_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgBouncycastleMathEcECCurve_Fp, infinity_, OrgBouncycastleMathEcECPoint_Fp *)

FOUNDATION_EXPORT void OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_Fp *new_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_Fp *create_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT void OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_Fp *new_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_Fp *create_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

FOUNDATION_EXPORT void OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_(OrgBouncycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor, jboolean isInternal);

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_Fp *new_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor, jboolean isInternal) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_Fp *create_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor, jboolean isInternal);

FOUNDATION_EXPORT void OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *r, OrgBouncycastleMathEcECFieldElement *a, OrgBouncycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_Fp *new_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *r, OrgBouncycastleMathEcECFieldElement *a, OrgBouncycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_Fp *create_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *r, OrgBouncycastleMathEcECFieldElement *a, OrgBouncycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleMathEcECCurve_Fp)

#endif

#if !defined (OrgBouncycastleMathEcECCurve_AbstractF2m_) && (INCLUDE_ALL_OrgBouncycastleMathEcECCurve || defined(INCLUDE_OrgBouncycastleMathEcECCurve_AbstractF2m))
#define OrgBouncycastleMathEcECCurve_AbstractF2m_

@class IOSIntArray;
@class IOSObjectArray;
@class JavaMathBigInteger;
@class JavaSecuritySecureRandom;
@class OrgBouncycastleMathEcECFieldElement;
@class OrgBouncycastleMathEcECPoint;
@protocol OrgBouncycastleMathFieldFiniteField;

@interface OrgBouncycastleMathEcECCurve_AbstractF2m : OrgBouncycastleMathEcECCurve

#pragma mark Public

- (OrgBouncycastleMathEcECPoint *)createPointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                             withJavaMathBigInteger:(JavaMathBigInteger *)y;

+ (JavaMathBigInteger *)inverseWithInt:(jint)m
                          withIntArray:(IOSIntArray *)ks
                withJavaMathBigInteger:(JavaMathBigInteger *)x;

/*!
 @brief Returns true if this is a Koblitz curve (ABC curve).
 @return true if this is a Koblitz curve (ABC curve), false otherwise
 */
- (jboolean)isKoblitz;

- (jboolean)isValidFieldElementWithJavaMathBigInteger:(JavaMathBigInteger *)x;

- (OrgBouncycastleMathEcECFieldElement *)randomFieldElementWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r;

- (OrgBouncycastleMathEcECFieldElement *)randomFieldElementMultWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r;

#pragma mark Protected

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3;

/*!
 @brief Decompresses a compressed point P = (xp, yp) (X9.62 s 4.2.2).
 @param yTilde ~yp, an indication bit for the decompression of yp.
 @param X1 The field element xp.
 @return the decompressed point.
 */
- (OrgBouncycastleMathEcECPoint *)decompressPointWithInt:(jint)yTilde
                                  withJavaMathBigInteger:(JavaMathBigInteger *)X1;

/*!
 @brief Solves a quadratic equation <code>z<sup>2</sup> + z = beta</code>(X9.62
  D.1.6) The other solution is <code>z + 1</code>.
 @param beta The value to solve the quadratic equation for.
 @return the solution for <code>z<sup>2</sup> + z = beta</code> or
          <code>null</code> if no solution exists.
 */
- (OrgBouncycastleMathEcECFieldElement *)solveQuadraticEquationWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)beta;

#pragma mark Package-Private

/*!
 @return the auxiliary values <code>s<sub>0</sub></code> and 
 <code>s<sub>1</sub></code> used for partial modular reduction for
  Koblitz curves.
 */
- (IOSObjectArray *)getSi;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgBouncycastleMathFieldFiniteField:(id<OrgBouncycastleMathFieldFiniteField>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcECCurve_AbstractF2m)

FOUNDATION_EXPORT JavaMathBigInteger *OrgBouncycastleMathEcECCurve_AbstractF2m_inverseWithInt_withIntArray_withJavaMathBigInteger_(jint m, IOSIntArray *ks, JavaMathBigInteger *x);

FOUNDATION_EXPORT void OrgBouncycastleMathEcECCurve_AbstractF2m_initWithInt_withInt_withInt_withInt_(OrgBouncycastleMathEcECCurve_AbstractF2m *self, jint m, jint k1, jint k2, jint k3);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleMathEcECCurve_AbstractF2m)

#endif

#if !defined (OrgBouncycastleMathEcECCurve_F2m_) && (INCLUDE_ALL_OrgBouncycastleMathEcECCurve || defined(INCLUDE_OrgBouncycastleMathEcECCurve_F2m))
#define OrgBouncycastleMathEcECCurve_F2m_

@class IOSObjectArray;
@class JavaMathBigInteger;
@class OrgBouncycastleMathEcECCurve;
@class OrgBouncycastleMathEcECFieldElement;
@class OrgBouncycastleMathEcECPoint;
@protocol OrgBouncycastleMathEcECLookupTable;
@protocol OrgBouncycastleMathEcECMultiplier;

/*!
 @brief Elliptic curves over F2m.The Weierstrass equation is given by 
 <code>y<sup>2</sup> + xy = x<sup>3</sup> + ax<sup>2</sup> + b</code>.
 */
@interface OrgBouncycastleMathEcECCurve_F2m : OrgBouncycastleMathEcECCurve_AbstractF2m

#pragma mark Public

/*!
 @brief Constructor for Trinomial Polynomial Basis (TPB).
 @param m The exponent  <code> m </code>  of
    <code> F <sub> 2 <sup> m </sup> </sub> </code> .
 @param k The integer  <code> k </code>  where  <code> x <sup> m </sup>
   +  x <sup> k </sup>  + 1 </code>  represents the reduction
   polynomial  <code> f(z) </code> .
 @param a The coefficient  <code> a </code>  in the Weierstrass equation
   for non-supersingular elliptic curves over   <code>
  F <sub> 2 <sup> m </sup> </sub> </code> .
 @param b The coefficient  <code> b </code>  in the Weierstrass equation
   for non-supersingular elliptic curves over   <code>
  F <sub> 2 <sup> m </sup> </sub> </code> .
 */
- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b;

/*!
 @brief Constructor for Trinomial Polynomial Basis (TPB).
 @param m The exponent  <code> m </code>  of
    <code> F <sub> 2 <sup> m </sup> </sub> </code> .
 @param k The integer  <code> k </code>  where  <code> x <sup> m </sup>
   +  x <sup> k </sup>  + 1 </code>  represents the reduction
   polynomial  <code> f(z) </code> .
 @param a The coefficient  <code> a </code>  in the Weierstrass equation
   for non-supersingular elliptic curves over   <code>
  F <sub> 2 <sup> m </sup> </sub> </code> .
 @param b The coefficient  <code> b </code>  in the Weierstrass equation
   for non-supersingular elliptic curves over   <code>
  F <sub> 2 <sup> m </sup> </sub> </code> .
 @param order The order of the main subgroup of the elliptic curve.
 @param cofactor The cofactor of the elliptic curve, i.e.  
  <code> #E <sub> a </sub> (F <sub> 2 <sup> m </sup> </sub> ) = h * n </code>
  .
 */
- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b
     withJavaMathBigInteger:(JavaMathBigInteger *)order
     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor;

/*!
 @brief Constructor for Pentanomial Polynomial Basis (PPB).
 @param m The exponent  <code> m </code>  of
    <code> F <sub> 2 <sup> m </sup> </sub> </code> .
 @param k1 The integer  <code> k1 </code>  where  <code> x <sup> m </sup>
   +  x <sup> k3 </sup>  + x <sup> k2 </sup>  + x <sup> k1 </sup>  + 1
  </code>  represents the reduction polynomial  <code> f(z) </code>
  .
 @param k2 The integer  <code> k2 </code>  where  <code> x <sup> m </sup>
   +  x <sup> k3 </sup>  + x <sup> k2 </sup>  + x <sup> k1 </sup>  + 1
  </code>  represents the reduction polynomial  <code> f(z) </code>
  .
 @param k3 The integer  <code> k3 </code>  where  <code> x <sup> m </sup>
   +  x <sup> k3 </sup>  + x <sup> k2 </sup>  + x <sup> k1 </sup>  + 1
  </code>  represents the reduction polynomial  <code> f(z) </code>
  .
 @param a The coefficient  <code> a </code>  in the Weierstrass equation
   for non-supersingular elliptic curves over   <code>
  F <sub> 2 <sup> m </sup> </sub> </code> .
 @param b The coefficient  <code> b </code>  in the Weierstrass equation
   for non-supersingular elliptic curves over   <code>
  F <sub> 2 <sup> m </sup> </sub> </code> .
 */
- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b;

/*!
 @brief Constructor for Pentanomial Polynomial Basis (PPB).
 @param m The exponent  <code> m </code>  of
    <code> F <sub> 2 <sup> m </sup> </sub> </code> .
 @param k1 The integer  <code> k1 </code>  where  <code> x <sup> m </sup>
   +  x <sup> k3 </sup>  + x <sup> k2 </sup>  + x <sup> k1 </sup>  + 1
  </code>  represents the reduction polynomial  <code> f(z) </code>
  .
 @param k2 The integer  <code> k2 </code>  where  <code> x <sup> m </sup>
   +  x <sup> k3 </sup>  + x <sup> k2 </sup>  + x <sup> k1 </sup>  + 1
  </code>  represents the reduction polynomial  <code> f(z) </code>
  .
 @param k3 The integer  <code> k3 </code>  where  <code> x <sup> m </sup>
   +  x <sup> k3 </sup>  + x <sup> k2 </sup>  + x <sup> k1 </sup>  + 1
  </code>  represents the reduction polynomial  <code> f(z) </code>
  .
 @param a The coefficient  <code> a </code>  in the Weierstrass equation
   for non-supersingular elliptic curves over   <code>
  F <sub> 2 <sup> m </sup> </sub> </code> .
 @param b The coefficient  <code> b </code>  in the Weierstrass equation
   for non-supersingular elliptic curves over   <code>
  F <sub> 2 <sup> m </sup> </sub> </code> .
 @param order The order of the main subgroup of the elliptic curve.
 @param cofactor The cofactor of the elliptic curve, i.e.  
  <code> #E <sub> a </sub> (F <sub> 2 <sup> m </sup> </sub> ) = h * n </code>
  .
 */
- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b
     withJavaMathBigInteger:(JavaMathBigInteger *)order
     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor;

- (id<OrgBouncycastleMathEcECLookupTable>)createCacheSafeLookupTableWithOrgBouncycastleMathEcECPointArray:(IOSObjectArray *)points
                                                                                                  withInt:(jint)off
                                                                                                  withInt:(jint)len;

- (OrgBouncycastleMathEcECFieldElement *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x;

- (jint)getFieldSize;

- (OrgBouncycastleMathEcECPoint *)getInfinity;

- (jint)getK1;

- (jint)getK2;

- (jint)getK3;

- (jint)getM;

/*!
 @brief Return true if curve uses a Trinomial basis.
 @return true if curve Trinomial, false otherwise.
 */
- (jboolean)isTrinomial;

- (jboolean)supportsCoordinateSystemWithInt:(jint)coord;

#pragma mark Protected

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)a
withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)b
     withJavaMathBigInteger:(JavaMathBigInteger *)order
     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor;

- (OrgBouncycastleMathEcECCurve *)cloneCurve;

- (id<OrgBouncycastleMathEcECMultiplier>)createDefaultMultiplier;

- (OrgBouncycastleMathEcECPoint *)createRawPointWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y;

- (OrgBouncycastleMathEcECPoint *)createRawPointWithOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)x
                                                withOrgBouncycastleMathEcECFieldElement:(OrgBouncycastleMathEcECFieldElement *)y
                                           withOrgBouncycastleMathEcECFieldElementArray:(IOSObjectArray *)zs;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithInt:(jint)arg0
                    withInt:(jint)arg1
                    withInt:(jint)arg2
                    withInt:(jint)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleMathEcECCurve_F2m)

FOUNDATION_EXPORT void OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve_F2m *self, jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_F2m *new_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_F2m *create_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT void OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve_F2m *self, jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_F2m *new_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_F2m *create_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

FOUNDATION_EXPORT void OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve_F2m *self, jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_F2m *new_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_F2m *create_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT void OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve_F2m *self, jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_F2m *new_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_F2m *create_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

FOUNDATION_EXPORT void OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECCurve_F2m *self, jint m, jint k1, jint k2, jint k3, OrgBouncycastleMathEcECFieldElement *a, OrgBouncycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_F2m *new_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, OrgBouncycastleMathEcECFieldElement *a, OrgBouncycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleMathEcECCurve_F2m *create_OrgBouncycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withOrgBouncycastleMathEcECFieldElement_withOrgBouncycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, OrgBouncycastleMathEcECFieldElement *a, OrgBouncycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleMathEcECCurve_F2m)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleMathEcECCurve")
