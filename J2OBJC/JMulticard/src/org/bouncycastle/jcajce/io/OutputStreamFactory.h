//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/io/OutputStreamFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleJcajceIoOutputStreamFactory")
#ifdef RESTRICT_OrgBouncycastleJcajceIoOutputStreamFactory
#define INCLUDE_ALL_OrgBouncycastleJcajceIoOutputStreamFactory 0
#else
#define INCLUDE_ALL_OrgBouncycastleJcajceIoOutputStreamFactory 1
#endif
#undef RESTRICT_OrgBouncycastleJcajceIoOutputStreamFactory

#if !defined (OrgBouncycastleJcajceIoOutputStreamFactory_) && (INCLUDE_ALL_OrgBouncycastleJcajceIoOutputStreamFactory || defined(INCLUDE_OrgBouncycastleJcajceIoOutputStreamFactory))
#define OrgBouncycastleJcajceIoOutputStreamFactory_

@class JavaIoOutputStream;
@class JavaSecurityMessageDigest;
@class JavaSecuritySignature;
@class JavaxCryptoMac;

/*!
 @brief Utility class for creating OutputStreams from different JCA/JCE operators.
 */
@interface OrgBouncycastleJcajceIoOutputStreamFactory : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Create an OutputStream that wraps a mac.
 @param mac the signature to be updated as the stream is written to.
 @return an OutputStream.
 */
+ (JavaIoOutputStream *)createStreamWithJavaxCryptoMac:(JavaxCryptoMac *)mac;

/*!
 @brief Create an OutputStream that wraps a digest.
 @param digest the digest to be updated as the stream is written to.
 @return an OutputStream.
 */
+ (JavaIoOutputStream *)createStreamWithJavaSecurityMessageDigest:(JavaSecurityMessageDigest *)digest;

/*!
 @brief Create an OutputStream that wraps a signature.
 @param signature the signature to be updated as the stream is written to.
 @return an OutputStream.
 */
+ (JavaIoOutputStream *)createStreamWithJavaSecuritySignature:(JavaSecuritySignature *)signature;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleJcajceIoOutputStreamFactory)

FOUNDATION_EXPORT void OrgBouncycastleJcajceIoOutputStreamFactory_init(OrgBouncycastleJcajceIoOutputStreamFactory *self);

FOUNDATION_EXPORT OrgBouncycastleJcajceIoOutputStreamFactory *new_OrgBouncycastleJcajceIoOutputStreamFactory_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleJcajceIoOutputStreamFactory *create_OrgBouncycastleJcajceIoOutputStreamFactory_init(void);

FOUNDATION_EXPORT JavaIoOutputStream *OrgBouncycastleJcajceIoOutputStreamFactory_createStreamWithJavaSecuritySignature_(JavaSecuritySignature *signature);

FOUNDATION_EXPORT JavaIoOutputStream *OrgBouncycastleJcajceIoOutputStreamFactory_createStreamWithJavaSecurityMessageDigest_(JavaSecurityMessageDigest *digest);

FOUNDATION_EXPORT JavaIoOutputStream *OrgBouncycastleJcajceIoOutputStreamFactory_createStreamWithJavaxCryptoMac_(JavaxCryptoMac *mac);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleJcajceIoOutputStreamFactory)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleJcajceIoOutputStreamFactory")
