//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/CompositePublicKey.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/PublicKey.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/bouncycastle/asn1/ASN1EncodableVector.h"
#include "org/bouncycastle/asn1/ASN1Encoding.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/DERSequence.h"
#include "org/bouncycastle/asn1/misc/MiscObjectIdentifiers.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/bouncycastle/jcajce/CompositePublicKey.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/jcajce/CompositePublicKey must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleJcajceCompositePublicKey () {
 @public
  id<JavaUtilList> keys_;
}

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceCompositePublicKey, keys_, id<JavaUtilList>)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/CompositePublicKey.java"


#line 19
@implementation OrgBouncycastleJcajceCompositePublicKey


#line 29
- (instancetype)initWithJavaSecurityPublicKeyArray:(IOSObjectArray *)keys {
  OrgBouncycastleJcajceCompositePublicKey_initWithJavaSecurityPublicKeyArray_(self, keys);
  return self;
}


#line 49
- (id<JavaUtilList>)getPublicKeys {
  
#line 51
  return keys_;
}


#line 54
- (NSString *)getAlgorithm {
  
#line 57
  return @"Composite";
}

- (NSString *)getFormat {
  
#line 63
  return @"X.509";
}

- (IOSByteArray *)getEncoded {
  
#line 69
  OrgBouncycastleAsn1ASN1EncodableVector *v = new_OrgBouncycastleAsn1ASN1EncodableVector_init();
  
#line 71
  for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(keys_)) size]; i++) {
    
#line 73
    [v addWithOrgBouncycastleAsn1ASN1Encodable:OrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_([((id<JavaSecurityPublicKey>) nil_chk([keys_ getWithInt:i])) getEncoded])];
  }
  
#line 76
  @try {
    
#line 78
    return [new_OrgBouncycastleAsn1X509SubjectPublicKeyInfo_initWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1ASN1Encodable_(new_OrgBouncycastleAsn1X509AlgorithmIdentifier_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(JreLoadStatic(OrgBouncycastleAsn1MiscMiscObjectIdentifiers, id_alg_composite)), new_OrgBouncycastleAsn1DERSequence_initWithOrgBouncycastleAsn1ASN1EncodableVector_(
#line 79
    v)) getEncodedWithNSString:OrgBouncycastleAsn1ASN1Encoding_DER];
  }
  @catch (JavaIoIOException *e) {
    
#line 83
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"unable to encode composite key: ", [e getMessage]));
  }
}


#line 87
- (NSUInteger)hash {
  
#line 90
  return ((jint) [((id<JavaUtilList>) nil_chk(keys_)) hash]);
}

- (jboolean)isEqual:(id)o {
  
#line 96
  if (JreObjectEqualsEquals(o, self)) {
    
#line 98
    return true;
  }
  
#line 101
  if ([o isKindOfClass:[OrgBouncycastleJcajceCompositePublicKey class]]) {
    
#line 103
    return [((id<JavaUtilList>) nil_chk(keys_)) isEqual:((OrgBouncycastleJcajceCompositePublicKey *) nil_chk(((OrgBouncycastleJcajceCompositePublicKey *) o)))->keys_];
  }
  
#line 106
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaSecurityPublicKeyArray:);
  methods[1].selector = @selector(getPublicKeys);
  methods[2].selector = @selector(getAlgorithm);
  methods[3].selector = @selector(getFormat);
  methods[4].selector = @selector(getEncoded);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keys_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "[LJavaSecurityPublicKey;", "()Ljava/util/List<Ljava/security/PublicKey;>;", "hashCode", "equals", "LNSObject;", "Ljava/util/List<Ljava/security/PublicKey;>;" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceCompositePublicKey = { "CompositePublicKey", "org.bouncycastle.jcajce", ptrTable, methods, fields, 7, 0x1, 7, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleJcajceCompositePublicKey;
}

@end


#line 29
void OrgBouncycastleJcajceCompositePublicKey_initWithJavaSecurityPublicKeyArray_(OrgBouncycastleJcajceCompositePublicKey *self, IOSObjectArray *keys) {
  NSObject_init(self);
  if (keys == nil || keys->size_ == 0) {
    
#line 33
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"at least one public key must be provided");
  }
  
#line 36
  id<JavaUtilList> keyList = new_JavaUtilArrayList_initWithInt_(keys->size_);
  for (jint i = 0; i != keys->size_; i++) {
    
#line 39
    [keyList addWithId:IOSObjectArray_Get(keys, i)];
  }
  self->keys_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(keyList);
}


#line 29
OrgBouncycastleJcajceCompositePublicKey *new_OrgBouncycastleJcajceCompositePublicKey_initWithJavaSecurityPublicKeyArray_(IOSObjectArray *keys) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceCompositePublicKey, initWithJavaSecurityPublicKeyArray_, keys)
}


#line 29
OrgBouncycastleJcajceCompositePublicKey *create_OrgBouncycastleJcajceCompositePublicKey_initWithJavaSecurityPublicKeyArray_(IOSObjectArray *keys) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceCompositePublicKey, initWithJavaSecurityPublicKeyArray_, keys)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleJcajceCompositePublicKey)
