//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/util/NamedJcaJceHelper.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "java/security/AlgorithmParameterGenerator.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/KeyFactory.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/KeyStore.h"
#include "java/security/MessageDigest.h"
#include "java/security/SecureRandom.h"
#include "java/security/Signature.h"
#include "java/security/cert/CertPathBuilder.h"
#include "java/security/cert/CertPathValidator.h"
#include "java/security/cert/CertStore.h"
#include "java/security/cert/CertStoreParameters.h"
#include "java/security/cert/CertificateFactory.h"
#include "javax/crypto/Cipher.h"
#include "javax/crypto/ExemptionMechanism.h"
#include "javax/crypto/KeyAgreement.h"
#include "javax/crypto/KeyGenerator.h"
#include "javax/crypto/Mac.h"
#include "javax/crypto/SecretKeyFactory.h"
#include "org/bouncycastle/jcajce/util/NamedJcaJceHelper.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/jcajce/util/NamedJcaJceHelper must be compiled with ARC (-fobjc-arc)"
#endif

__attribute__((unused)) static IOSObjectArray *OrgBouncycastleJcajceUtilNamedJcaJceHelper__Annotations$0(void);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/util/NamedJcaJceHelper.java"


#line 33
@implementation OrgBouncycastleJcajceUtilNamedJcaJceHelper


#line 38
- (instancetype)initWithNSString:(NSString *)providerName {
  OrgBouncycastleJcajceUtilNamedJcaJceHelper_initWithNSString_(self, providerName);
  return self;
}

- (JavaxCryptoCipher *)createCipherWithNSString:(NSString *)algorithm {
  
#line 48
  return JavaxCryptoCipher_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}


#line 51
- (JavaxCryptoMac *)createMacWithNSString:(NSString *)algorithm {
  
#line 55
  return JavaxCryptoMac_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}


#line 58
- (JavaxCryptoKeyAgreement *)createKeyAgreementWithNSString:(NSString *)algorithm {
  
#line 62
  return JavaxCryptoKeyAgreement_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}


#line 65
- (JavaSecurityAlgorithmParameterGenerator *)createAlgorithmParameterGeneratorWithNSString:(NSString *)algorithm {
  
#line 69
  return JavaSecurityAlgorithmParameterGenerator_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}


#line 72
- (JavaSecurityAlgorithmParameters *)createAlgorithmParametersWithNSString:(NSString *)algorithm {
  
#line 76
  return JavaSecurityAlgorithmParameters_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}


#line 79
- (JavaxCryptoKeyGenerator *)createKeyGeneratorWithNSString:(NSString *)algorithm {
  
#line 83
  return JavaxCryptoKeyGenerator_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}


#line 86
- (JavaSecurityKeyFactory *)createKeyFactoryWithNSString:(NSString *)algorithm {
  
#line 90
  return JavaSecurityKeyFactory_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}


#line 93
- (JavaxCryptoSecretKeyFactory *)createSecretKeyFactoryWithNSString:(NSString *)algorithm {
  
#line 97
  return JavaxCryptoSecretKeyFactory_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}


#line 100
- (JavaSecurityKeyPairGenerator *)createKeyPairGeneratorWithNSString:(NSString *)algorithm {
  
#line 104
  return JavaSecurityKeyPairGenerator_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}


#line 108
- (JavaSecurityMessageDigest *)createDigestWithNSString:(NSString *)algorithm {
  
#line 113
  return JavaSecurityMessageDigest_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}


#line 116
- (JavaSecurityMessageDigest *)createMessageDigestWithNSString:(NSString *)algorithm {
  
#line 120
  return JavaSecurityMessageDigest_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}


#line 123
- (JavaSecuritySignature *)createSignatureWithNSString:(NSString *)algorithm {
  
#line 127
  return JavaSecuritySignature_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}


#line 130
- (JavaSecurityCertCertificateFactory *)createCertificateFactoryWithNSString:(NSString *)algorithm {
  
#line 134
  return JavaSecurityCertCertificateFactory_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}


#line 137
- (JavaSecuritySecureRandom *)createSecureRandomWithNSString:(NSString *)algorithm {
  
#line 141
  return JavaSecuritySecureRandom_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}


#line 144
- (JavaSecurityCertCertPathBuilder *)createCertPathBuilderWithNSString:(NSString *)algorithm {
  
#line 148
  return JavaSecurityCertCertPathBuilder_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}


#line 151
- (JavaSecurityCertCertPathValidator *)createCertPathValidatorWithNSString:(NSString *)algorithm {
  
#line 155
  return JavaSecurityCertCertPathValidator_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}


#line 158
- (JavaSecurityCertCertStore *)createCertStoreWithNSString:(NSString *)type
                   withJavaSecurityCertCertStoreParameters:(id<JavaSecurityCertCertStoreParameters>)params {
  
#line 162
  return JavaSecurityCertCertStore_getInstanceWithNSString_withJavaSecurityCertCertStoreParameters_withNSString_(type, params, providerName_);
}

- (JavaxCryptoExemptionMechanism *)createExemptionMechanismWithNSString:(NSString *)algorithm {
  
#line 169
  return JavaxCryptoExemptionMechanism_getInstanceWithNSString_withNSString_(algorithm, providerName_);
}


#line 172
- (JavaSecurityKeyStore *)createKeyStoreWithNSString:(NSString *)type {
  
#line 176
  return JavaSecurityKeyStore_getInstanceWithNSString_withNSString_(type, providerName_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaxCryptoCipher;", 0x1, 1, 0, 2, -1, -1, -1 },
    { NULL, "LJavaxCryptoMac;", 0x1, 3, 0, 4, -1, -1, -1 },
    { NULL, "LJavaxCryptoKeyAgreement;", 0x1, 5, 0, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameterGenerator;", 0x1, 6, 0, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameters;", 0x1, 7, 0, 4, -1, -1, -1 },
    { NULL, "LJavaxCryptoKeyGenerator;", 0x1, 8, 0, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyFactory;", 0x1, 9, 0, 4, -1, -1, -1 },
    { NULL, "LJavaxCryptoSecretKeyFactory;", 0x1, 10, 0, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPairGenerator;", 0x1, 11, 0, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityMessageDigest;", 0x1, 12, 0, 4, -1, 13, -1 },
    { NULL, "LJavaSecurityMessageDigest;", 0x1, 14, 0, 4, -1, -1, -1 },
    { NULL, "LJavaSecuritySignature;", 0x1, 15, 0, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertificateFactory;", 0x1, 16, 0, 17, -1, -1, -1 },
    { NULL, "LJavaSecuritySecureRandom;", 0x1, 18, 0, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPathBuilder;", 0x1, 19, 0, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPathValidator;", 0x1, 20, 0, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertStore;", 0x1, 21, 22, 23, -1, -1, -1 },
    { NULL, "LJavaxCryptoExemptionMechanism;", 0x1, 24, 0, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyStore;", 0x1, 25, 0, 26, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(createCipherWithNSString:);
  methods[2].selector = @selector(createMacWithNSString:);
  methods[3].selector = @selector(createKeyAgreementWithNSString:);
  methods[4].selector = @selector(createAlgorithmParameterGeneratorWithNSString:);
  methods[5].selector = @selector(createAlgorithmParametersWithNSString:);
  methods[6].selector = @selector(createKeyGeneratorWithNSString:);
  methods[7].selector = @selector(createKeyFactoryWithNSString:);
  methods[8].selector = @selector(createSecretKeyFactoryWithNSString:);
  methods[9].selector = @selector(createKeyPairGeneratorWithNSString:);
  methods[10].selector = @selector(createDigestWithNSString:);
  methods[11].selector = @selector(createMessageDigestWithNSString:);
  methods[12].selector = @selector(createSignatureWithNSString:);
  methods[13].selector = @selector(createCertificateFactoryWithNSString:);
  methods[14].selector = @selector(createSecureRandomWithNSString:);
  methods[15].selector = @selector(createCertPathBuilderWithNSString:);
  methods[16].selector = @selector(createCertPathValidatorWithNSString:);
  methods[17].selector = @selector(createCertStoreWithNSString:withJavaSecurityCertCertStoreParameters:);
  methods[18].selector = @selector(createExemptionMechanismWithNSString:);
  methods[19].selector = @selector(createKeyStoreWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "providerName_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "createCipher", "LJavaSecurityNoSuchAlgorithmException;LJavaxCryptoNoSuchPaddingException;LJavaSecurityNoSuchProviderException;", "createMac", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityNoSuchProviderException;", "createKeyAgreement", "createAlgorithmParameterGenerator", "createAlgorithmParameters", "createKeyGenerator", "createKeyFactory", "createSecretKeyFactory", "createKeyPairGenerator", "createDigest", (void *)&OrgBouncycastleJcajceUtilNamedJcaJceHelper__Annotations$0, "createMessageDigest", "createSignature", "createCertificateFactory", "LJavaSecurityCertCertificateException;LJavaSecurityNoSuchProviderException;", "createSecureRandom", "createCertPathBuilder", "createCertPathValidator", "createCertStore", "LNSString;LJavaSecurityCertCertStoreParameters;", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidAlgorithmParameterException;LJavaSecurityNoSuchProviderException;", "createExemptionMechanism", "createKeyStore", "LJavaSecurityKeyStoreException;LJavaSecurityNoSuchProviderException;" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceUtilNamedJcaJceHelper = { "NamedJcaJceHelper", "org.bouncycastle.jcajce.util", ptrTable, methods, fields, 7, 0x1, 20, 1, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleJcajceUtilNamedJcaJceHelper;
}

@end


#line 38
void OrgBouncycastleJcajceUtilNamedJcaJceHelper_initWithNSString_(OrgBouncycastleJcajceUtilNamedJcaJceHelper *self, NSString *providerName) {
  NSObject_init(self);
  self->providerName_ = providerName;
}


#line 38
OrgBouncycastleJcajceUtilNamedJcaJceHelper *new_OrgBouncycastleJcajceUtilNamedJcaJceHelper_initWithNSString_(NSString *providerName) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceUtilNamedJcaJceHelper, initWithNSString_, providerName)
}


#line 38
OrgBouncycastleJcajceUtilNamedJcaJceHelper *create_OrgBouncycastleJcajceUtilNamedJcaJceHelper_initWithNSString_(NSString *providerName) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceUtilNamedJcaJceHelper, initWithNSString_, providerName)
}

IOSObjectArray *OrgBouncycastleJcajceUtilNamedJcaJceHelper__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleJcajceUtilNamedJcaJceHelper)
