//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/util/JcaJceHelper.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "org/bouncycastle/jcajce/util/JcaJceHelper.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/jcajce/util/JcaJceHelper must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleJcajceUtilJcaJceHelper : NSObject

@end

__attribute__((unused)) static IOSObjectArray *OrgBouncycastleJcajceUtilJcaJceHelper__Annotations$0(void);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/util/JcaJceHelper.java"


#line 33
@implementation OrgBouncycastleJcajceUtilJcaJceHelper

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaxCryptoCipher;", 0x401, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaxCryptoMac;", 0x401, 3, 1, 4, -1, -1, -1 },
    { NULL, "LJavaxCryptoKeyAgreement;", 0x401, 5, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameterGenerator;", 0x401, 6, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameters;", 0x401, 7, 1, 4, -1, -1, -1 },
    { NULL, "LJavaxCryptoKeyGenerator;", 0x401, 8, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyFactory;", 0x401, 9, 1, 4, -1, -1, -1 },
    { NULL, "LJavaxCryptoSecretKeyFactory;", 0x401, 10, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPairGenerator;", 0x401, 11, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityMessageDigest;", 0x401, 12, 1, 4, -1, 13, -1 },
    { NULL, "LJavaSecurityMessageDigest;", 0x401, 14, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecuritySignature;", 0x401, 15, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertificateFactory;", 0x401, 16, 1, 17, -1, -1, -1 },
    { NULL, "LJavaSecuritySecureRandom;", 0x401, 18, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPathBuilder;", 0x401, 19, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPathValidator;", 0x401, 20, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertStore;", 0x401, 21, 22, 23, -1, -1, -1 },
    { NULL, "LJavaxCryptoExemptionMechanism;", 0x401, 24, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyStore;", 0x401, 25, 1, 26, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(createCipherWithNSString:);
  methods[1].selector = @selector(createMacWithNSString:);
  methods[2].selector = @selector(createKeyAgreementWithNSString:);
  methods[3].selector = @selector(createAlgorithmParameterGeneratorWithNSString:);
  methods[4].selector = @selector(createAlgorithmParametersWithNSString:);
  methods[5].selector = @selector(createKeyGeneratorWithNSString:);
  methods[6].selector = @selector(createKeyFactoryWithNSString:);
  methods[7].selector = @selector(createSecretKeyFactoryWithNSString:);
  methods[8].selector = @selector(createKeyPairGeneratorWithNSString:);
  methods[9].selector = @selector(createDigestWithNSString:);
  methods[10].selector = @selector(createMessageDigestWithNSString:);
  methods[11].selector = @selector(createSignatureWithNSString:);
  methods[12].selector = @selector(createCertificateFactoryWithNSString:);
  methods[13].selector = @selector(createSecureRandomWithNSString:);
  methods[14].selector = @selector(createCertPathBuilderWithNSString:);
  methods[15].selector = @selector(createCertPathValidatorWithNSString:);
  methods[16].selector = @selector(createCertStoreWithNSString:withJavaSecurityCertCertStoreParameters:);
  methods[17].selector = @selector(createExemptionMechanismWithNSString:);
  methods[18].selector = @selector(createKeyStoreWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createCipher", "LNSString;", "LJavaSecurityNoSuchAlgorithmException;LJavaxCryptoNoSuchPaddingException;LJavaSecurityNoSuchProviderException;", "createMac", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityNoSuchProviderException;", "createKeyAgreement", "createAlgorithmParameterGenerator", "createAlgorithmParameters", "createKeyGenerator", "createKeyFactory", "createSecretKeyFactory", "createKeyPairGenerator", "createDigest", (void *)&OrgBouncycastleJcajceUtilJcaJceHelper__Annotations$0, "createMessageDigest", "createSignature", "createCertificateFactory", "LJavaSecurityNoSuchProviderException;LJavaSecurityCertCertificateException;", "createSecureRandom", "createCertPathBuilder", "createCertPathValidator", "createCertStore", "LNSString;LJavaSecurityCertCertStoreParameters;", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidAlgorithmParameterException;LJavaSecurityNoSuchProviderException;", "createExemptionMechanism", "createKeyStore", "LJavaSecurityKeyStoreException;LJavaSecurityNoSuchProviderException;" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceUtilJcaJceHelper = { "JcaJceHelper", "org.bouncycastle.jcajce.util", ptrTable, methods, NULL, 7, 0x609, 19, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleJcajceUtilJcaJceHelper;
}

@end

IOSObjectArray *OrgBouncycastleJcajceUtilJcaJceHelper__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgBouncycastleJcajceUtilJcaJceHelper)
