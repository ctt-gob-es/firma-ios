//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/util/ProviderJcaJceHelper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleJcajceUtilProviderJcaJceHelper")
#ifdef RESTRICT_OrgBouncycastleJcajceUtilProviderJcaJceHelper
#define INCLUDE_ALL_OrgBouncycastleJcajceUtilProviderJcaJceHelper 0
#else
#define INCLUDE_ALL_OrgBouncycastleJcajceUtilProviderJcaJceHelper 1
#endif
#undef RESTRICT_OrgBouncycastleJcajceUtilProviderJcaJceHelper

#if !defined (OrgBouncycastleJcajceUtilProviderJcaJceHelper_) && (INCLUDE_ALL_OrgBouncycastleJcajceUtilProviderJcaJceHelper || defined(INCLUDE_OrgBouncycastleJcajceUtilProviderJcaJceHelper))
#define OrgBouncycastleJcajceUtilProviderJcaJceHelper_

#define RESTRICT_OrgBouncycastleJcajceUtilJcaJceHelper 1
#define INCLUDE_OrgBouncycastleJcajceUtilJcaJceHelper 1
#include "org/bouncycastle/jcajce/util/JcaJceHelper.h"

@class JavaSecurityAlgorithmParameterGenerator;
@class JavaSecurityAlgorithmParameters;
@class JavaSecurityCertCertPathBuilder;
@class JavaSecurityCertCertPathValidator;
@class JavaSecurityCertCertStore;
@class JavaSecurityCertCertificateFactory;
@class JavaSecurityKeyFactory;
@class JavaSecurityKeyPairGenerator;
@class JavaSecurityKeyStore;
@class JavaSecurityMessageDigest;
@class JavaSecurityProvider;
@class JavaSecuritySecureRandom;
@class JavaSecuritySignature;
@class JavaxCryptoCipher;
@class JavaxCryptoExemptionMechanism;
@class JavaxCryptoKeyAgreement;
@class JavaxCryptoKeyGenerator;
@class JavaxCryptoMac;
@class JavaxCryptoSecretKeyFactory;
@protocol JavaSecurityCertCertStoreParameters;

/*!
 @brief <code>JcaJceHelper</code> that obtains all algorithms from a specific <code>Provider</code> instance.
 */
@interface OrgBouncycastleJcajceUtilProviderJcaJceHelper : NSObject < OrgBouncycastleJcajceUtilJcaJceHelper > {
 @public
  JavaSecurityProvider *provider_;
}

#pragma mark Public

- (instancetype)initWithJavaSecurityProvider:(JavaSecurityProvider *)provider;

- (JavaSecurityAlgorithmParameterGenerator *)createAlgorithmParameterGeneratorWithNSString:(NSString *)algorithm;

- (JavaSecurityAlgorithmParameters *)createAlgorithmParametersWithNSString:(NSString *)algorithm;

- (JavaSecurityCertCertificateFactory *)createCertificateFactoryWithNSString:(NSString *)algorithm;

- (JavaSecurityCertCertPathBuilder *)createCertPathBuilderWithNSString:(NSString *)algorithm;

- (JavaSecurityCertCertPathValidator *)createCertPathValidatorWithNSString:(NSString *)algorithm;

- (JavaSecurityCertCertStore *)createCertStoreWithNSString:(NSString *)type
                   withJavaSecurityCertCertStoreParameters:(id<JavaSecurityCertCertStoreParameters>)params;

- (JavaxCryptoCipher *)createCipherWithNSString:(NSString *)algorithm;

/*!
 */
- (JavaSecurityMessageDigest *)createDigestWithNSString:(NSString *)algorithm;

- (JavaxCryptoExemptionMechanism *)createExemptionMechanismWithNSString:(NSString *)algorithm;

- (JavaxCryptoKeyAgreement *)createKeyAgreementWithNSString:(NSString *)algorithm;

- (JavaSecurityKeyFactory *)createKeyFactoryWithNSString:(NSString *)algorithm;

- (JavaxCryptoKeyGenerator *)createKeyGeneratorWithNSString:(NSString *)algorithm;

- (JavaSecurityKeyPairGenerator *)createKeyPairGeneratorWithNSString:(NSString *)algorithm;

- (JavaSecurityKeyStore *)createKeyStoreWithNSString:(NSString *)type;

- (JavaxCryptoMac *)createMacWithNSString:(NSString *)algorithm;

- (JavaSecurityMessageDigest *)createMessageDigestWithNSString:(NSString *)algorithm;

- (JavaxCryptoSecretKeyFactory *)createSecretKeyFactoryWithNSString:(NSString *)algorithm;

- (JavaSecuritySecureRandom *)createSecureRandomWithNSString:(NSString *)algorithm;

- (JavaSecuritySignature *)createSignatureWithNSString:(NSString *)algorithm;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleJcajceUtilProviderJcaJceHelper)

J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceUtilProviderJcaJceHelper, provider_, JavaSecurityProvider *)

FOUNDATION_EXPORT void OrgBouncycastleJcajceUtilProviderJcaJceHelper_initWithJavaSecurityProvider_(OrgBouncycastleJcajceUtilProviderJcaJceHelper *self, JavaSecurityProvider *provider);

FOUNDATION_EXPORT OrgBouncycastleJcajceUtilProviderJcaJceHelper *new_OrgBouncycastleJcajceUtilProviderJcaJceHelper_initWithJavaSecurityProvider_(JavaSecurityProvider *provider) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleJcajceUtilProviderJcaJceHelper *create_OrgBouncycastleJcajceUtilProviderJcaJceHelper_initWithJavaSecurityProvider_(JavaSecurityProvider *provider);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleJcajceUtilProviderJcaJceHelper)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleJcajceUtilProviderJcaJceHelper")
