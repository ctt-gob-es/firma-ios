//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/spec/DHDomainParameterSpec.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleJcajceSpecDHDomainParameterSpec")
#ifdef RESTRICT_OrgBouncycastleJcajceSpecDHDomainParameterSpec
#define INCLUDE_ALL_OrgBouncycastleJcajceSpecDHDomainParameterSpec 0
#else
#define INCLUDE_ALL_OrgBouncycastleJcajceSpecDHDomainParameterSpec 1
#endif
#undef RESTRICT_OrgBouncycastleJcajceSpecDHDomainParameterSpec

#if !defined (OrgBouncycastleJcajceSpecDHDomainParameterSpec_) && (INCLUDE_ALL_OrgBouncycastleJcajceSpecDHDomainParameterSpec || defined(INCLUDE_OrgBouncycastleJcajceSpecDHDomainParameterSpec))
#define OrgBouncycastleJcajceSpecDHDomainParameterSpec_

#define RESTRICT_JavaxCryptoSpecDHParameterSpec 1
#define INCLUDE_JavaxCryptoSpecDHParameterSpec 1
#include "javax/crypto/spec/DHParameterSpec.h"

@class JavaMathBigInteger;
@class OrgBouncycastleCryptoParamsDHParameters;

/*!
 @brief Extension class for DHParameterSpec that wraps a DHDomainParameters object and provides the q domain parameter.
 */
@interface OrgBouncycastleJcajceSpecDHDomainParameterSpec : JavaxCryptoSpecDHParameterSpec

#pragma mark Public

/*!
 @brief Minimal constructor for parameters able to be used to verify a public key, or use with MQV.
 @param p the prime p defining the Galois field.
 @param g the generator of the multiplicative subgroup of order g.
 @param q specifies the prime factor of p - 1
 */
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)p
                    withJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)g;

/*!
 @brief X9.42 parameters with private value length.
 @param p the prime p defining the Galois field.
 @param g the generator of the multiplicative subgroup of order g.
 @param q specifies the prime factor of p - 1
 @param j optionally specifies the value that satisfies the equation p = jq+1
 @param l the maximum bit length for the private value.
 */
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)p
                    withJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)g
                    withJavaMathBigInteger:(JavaMathBigInteger *)j
                                   withInt:(jint)l;

/*!
 @brief Base constructor - the full domain parameter set.
 @param p the prime p defining the Galois field.
 @param g the generator of the multiplicative subgroup of order g.
 @param q specifies the prime factor of p - 1
 @param j optionally specifies the value that satisfies the equation p = jq+1
 @param m the minimum bit length for the private value.
 @param l the maximum bit length for the private value.
 */
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)p
                    withJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)g
                    withJavaMathBigInteger:(JavaMathBigInteger *)j
                                   withInt:(jint)m
                                   withInt:(jint)l;

/*!
 @brief Minimal constructor for parameters able to be used to verify a public key, or use with MQV, and a private value length.
 @param p the prime p defining the Galois field.
 @param g the generator of the multiplicative subgroup of order g.
 @param q specifies the prime factor of p - 1
 @param l the maximum bit length for the private value.
 */
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)p
                    withJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)g
                                   withInt:(jint)l;

/*!
 @brief Base constructor - use the values in an existing set of domain parameters.
 @param domainParameters the Diffie-Hellman domain parameters to wrap.
 */
- (instancetype)initWithOrgBouncycastleCryptoParamsDHParameters:(OrgBouncycastleCryptoParamsDHParameters *)domainParameters;

/*!
 @brief Return the DHDomainParameters object we represent.
 @return the internal DHDomainParameters.
 */
- (OrgBouncycastleCryptoParamsDHParameters *)getDomainParameters;

/*!
 @brief Return the J value for the domain parameter set if available.
 @return the value J, null otherwise.
 */
- (JavaMathBigInteger *)getJ;

/*!
 @brief Return the minimum bitlength for a private value to be generated from these parameters, 0 if not set.
 @return minimum bitlength for private value.
 */
- (jint)getM;

/*!
 @brief Return the Q value for the domain parameter set.
 @return the value Q.
 */
- (JavaMathBigInteger *)getQ;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)arg0
                    withJavaMathBigInteger:(JavaMathBigInteger *)arg1 NS_UNAVAILABLE;

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)arg0
                    withJavaMathBigInteger:(JavaMathBigInteger *)arg1
                                   withInt:(jint)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleJcajceSpecDHDomainParameterSpec)

FOUNDATION_EXPORT void OrgBouncycastleJcajceSpecDHDomainParameterSpec_initWithOrgBouncycastleCryptoParamsDHParameters_(OrgBouncycastleJcajceSpecDHDomainParameterSpec *self, OrgBouncycastleCryptoParamsDHParameters *domainParameters);

FOUNDATION_EXPORT OrgBouncycastleJcajceSpecDHDomainParameterSpec *new_OrgBouncycastleJcajceSpecDHDomainParameterSpec_initWithOrgBouncycastleCryptoParamsDHParameters_(OrgBouncycastleCryptoParamsDHParameters *domainParameters) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleJcajceSpecDHDomainParameterSpec *create_OrgBouncycastleJcajceSpecDHDomainParameterSpec_initWithOrgBouncycastleCryptoParamsDHParameters_(OrgBouncycastleCryptoParamsDHParameters *domainParameters);

FOUNDATION_EXPORT void OrgBouncycastleJcajceSpecDHDomainParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleJcajceSpecDHDomainParameterSpec *self, JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g);

FOUNDATION_EXPORT OrgBouncycastleJcajceSpecDHDomainParameterSpec *new_OrgBouncycastleJcajceSpecDHDomainParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleJcajceSpecDHDomainParameterSpec *create_OrgBouncycastleJcajceSpecDHDomainParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g);

FOUNDATION_EXPORT void OrgBouncycastleJcajceSpecDHDomainParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withInt_(OrgBouncycastleJcajceSpecDHDomainParameterSpec *self, JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, jint l);

FOUNDATION_EXPORT OrgBouncycastleJcajceSpecDHDomainParameterSpec *new_OrgBouncycastleJcajceSpecDHDomainParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withInt_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, jint l) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleJcajceSpecDHDomainParameterSpec *create_OrgBouncycastleJcajceSpecDHDomainParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withInt_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, jint l);

FOUNDATION_EXPORT void OrgBouncycastleJcajceSpecDHDomainParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withInt_(OrgBouncycastleJcajceSpecDHDomainParameterSpec *self, JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, JavaMathBigInteger *j, jint l);

FOUNDATION_EXPORT OrgBouncycastleJcajceSpecDHDomainParameterSpec *new_OrgBouncycastleJcajceSpecDHDomainParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withInt_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, JavaMathBigInteger *j, jint l) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleJcajceSpecDHDomainParameterSpec *create_OrgBouncycastleJcajceSpecDHDomainParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withInt_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, JavaMathBigInteger *j, jint l);

FOUNDATION_EXPORT void OrgBouncycastleJcajceSpecDHDomainParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withInt_withInt_(OrgBouncycastleJcajceSpecDHDomainParameterSpec *self, JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, JavaMathBigInteger *j, jint m, jint l);

FOUNDATION_EXPORT OrgBouncycastleJcajceSpecDHDomainParameterSpec *new_OrgBouncycastleJcajceSpecDHDomainParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withInt_withInt_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, JavaMathBigInteger *j, jint m, jint l) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleJcajceSpecDHDomainParameterSpec *create_OrgBouncycastleJcajceSpecDHDomainParameterSpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withInt_withInt_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, JavaMathBigInteger *j, jint m, jint l);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleJcajceSpecDHDomainParameterSpec)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleJcajceSpecDHDomainParameterSpec")
