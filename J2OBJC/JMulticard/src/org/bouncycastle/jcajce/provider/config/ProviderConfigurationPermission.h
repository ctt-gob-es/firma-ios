//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/config/ProviderConfigurationPermission.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission")
#ifdef RESTRICT_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission
#define INCLUDE_ALL_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission 0
#else
#define INCLUDE_ALL_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission 1
#endif
#undef RESTRICT_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission

#if !defined (OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_) && (INCLUDE_ALL_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission || defined(INCLUDE_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission))
#define OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_

#define RESTRICT_JavaSecurityBasicPermission 1
#define INCLUDE_JavaSecurityBasicPermission 1
#include "java/security/BasicPermission.h"

@class JavaSecurityPermission;

/*!
 @brief A permission class to define what can be done with the ConfigurableProvider interface.
 <p>
  Available permissions are "threadLocalEcImplicitlyCa" and "ecImplicitlyCa" which allow the setting
  of the thread local and global ecImplicitlyCa parameters respectively. 
 </p>
  <p>
  Examples: 
 <ul>
  <li>ProviderConfigurationPermission("BC"); // enable all permissions</li>
  <li>ProviderConfigurationPermission("BC", "threadLocalEcImplicitlyCa"); // enable thread local only</li>
  <li>ProviderConfigurationPermission("BC", "ecImplicitlyCa"); // enable global setting only</li>
  <li>ProviderConfigurationPermission("BC", "threadLocalEcImplicitlyCa, ecImplicitlyCa"); // enable both explicitly</li>
  </ul>
  <p>
  Note: permission checks are only enforced if a security manager is present. 
 </p>
 */
@interface OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission : JavaSecurityBasicPermission

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)name;

- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)actions;

- (jboolean)isEqual:(id)obj;

- (NSString *)getActions;

- (NSUInteger)hash;

- (jboolean)impliesWithJavaSecurityPermission:(JavaSecurityPermission *)permission;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission)

FOUNDATION_EXPORT void OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *self, NSString *name);

FOUNDATION_EXPORT OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *new_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_(NSString *name) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *create_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_(NSString *name);

FOUNDATION_EXPORT void OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *self, NSString *name, NSString *actions);

FOUNDATION_EXPORT OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *new_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(NSString *name, NSString *actions) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *create_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(NSString *name, NSString *actions);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission")
