//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/config/ProviderConfigurationPermission.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/BasicPermission.h"
#include "java/security/Permission.h"
#include "java/util/StringTokenizer.h"
#include "org/bouncycastle/jcajce/provider/config/ProviderConfigurationPermission.h"
#include "org/bouncycastle/util/Strings.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/jcajce/provider/config/ProviderConfigurationPermission must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission () {
 @public
  NSString *actions_;
  jint permissionMask_;
}

- (jint)calculateMaskWithNSString:(NSString *)actions;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, actions_, NSString *)

inline jint OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_get_THREAD_LOCAL_EC_IMPLICITLY_CA(void);
#define OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_THREAD_LOCAL_EC_IMPLICITLY_CA 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, THREAD_LOCAL_EC_IMPLICITLY_CA, jint)

inline jint OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_get_EC_IMPLICITLY_CA(void);
#define OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_EC_IMPLICITLY_CA 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, EC_IMPLICITLY_CA, jint)

inline jint OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_get_THREAD_LOCAL_DH_DEFAULT_PARAMS(void);
#define OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_THREAD_LOCAL_DH_DEFAULT_PARAMS 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, THREAD_LOCAL_DH_DEFAULT_PARAMS, jint)

inline jint OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_get_DH_DEFAULT_PARAMS(void);
#define OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_DH_DEFAULT_PARAMS 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, DH_DEFAULT_PARAMS, jint)

inline jint OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_get_ACCEPTABLE_EC_CURVES(void);
#define OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ACCEPTABLE_EC_CURVES 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, ACCEPTABLE_EC_CURVES, jint)

inline jint OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_get_ADDITIONAL_EC_PARAMETERS(void);
#define OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ADDITIONAL_EC_PARAMETERS 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, ADDITIONAL_EC_PARAMETERS, jint)

inline jint OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_get_ALL(void);
#define OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ALL 63
J2OBJC_STATIC_FIELD_CONSTANT(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, ALL, jint)

inline NSString *OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_get_THREAD_LOCAL_EC_IMPLICITLY_CA_STR(void);
static NSString *OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_THREAD_LOCAL_EC_IMPLICITLY_CA_STR = @"threadlocalecimplicitlyca";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, THREAD_LOCAL_EC_IMPLICITLY_CA_STR, NSString *)

inline NSString *OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_get_EC_IMPLICITLY_CA_STR(void);
static NSString *OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_EC_IMPLICITLY_CA_STR = @"ecimplicitlyca";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, EC_IMPLICITLY_CA_STR, NSString *)

inline NSString *OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_get_THREAD_LOCAL_DH_DEFAULT_PARAMS_STR(void);
static NSString *OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_THREAD_LOCAL_DH_DEFAULT_PARAMS_STR = @"threadlocaldhdefaultparams";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, THREAD_LOCAL_DH_DEFAULT_PARAMS_STR, NSString *)

inline NSString *OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_get_DH_DEFAULT_PARAMS_STR(void);
static NSString *OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_DH_DEFAULT_PARAMS_STR = @"dhdefaultparams";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, DH_DEFAULT_PARAMS_STR, NSString *)

inline NSString *OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_get_ACCEPTABLE_EC_CURVES_STR(void);
static NSString *OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ACCEPTABLE_EC_CURVES_STR = @"acceptableeccurves";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, ACCEPTABLE_EC_CURVES_STR, NSString *)

inline NSString *OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_get_ADDITIONAL_EC_PARAMETERS_STR(void);
static NSString *OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ADDITIONAL_EC_PARAMETERS_STR = @"additionalecparameters";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, ADDITIONAL_EC_PARAMETERS_STR, NSString *)

inline NSString *OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_get_ALL_STR(void);
static NSString *OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ALL_STR = @"all";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, ALL_STR, NSString *)

__attribute__((unused)) static jint OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_calculateMaskWithNSString_(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *self, NSString *actions);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/config/ProviderConfigurationPermission.java"


#line 27
@implementation OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission


#line 52
- (instancetype)initWithNSString:(NSString *)name {
  OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_(self, name);
  return self;
}


#line 59
- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)actions {
  OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(self, name, actions);
  return self;
}


#line 66
- (jint)calculateMaskWithNSString:(NSString *)actions {
  return OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_calculateMaskWithNSString_(self, actions);
}


#line 114
- (NSString *)getActions {
  
#line 117
  return actions_;
}

- (jboolean)impliesWithJavaSecurityPermission:(JavaSecurityPermission *)permission {
  
#line 124
  if (!([permission isKindOfClass:[OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission class]])) {
    
#line 126
    return false;
  }
  
#line 129
  if (![((NSString *) nil_chk([self getName])) isEqual:[((JavaSecurityPermission *) nil_chk(permission)) getName]]) {
    
#line 131
    return false;
  }
  
#line 134
  OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *other = (OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *) cast_chk(permission, [OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission class]);
  
#line 136
  return (self->permissionMask_ & other->permissionMask_) == other->permissionMask_;
}


#line 139
- (jboolean)isEqual:(id)obj {
  
#line 143
  if (JreObjectEqualsEquals(obj, self)) {
    
#line 145
    return true;
  }
  
#line 148
  if ([obj isKindOfClass:[OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission class]]) {
    
#line 150
    OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *other = (OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *) obj;
    
#line 152
    return self->permissionMask_ == ((OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *) nil_chk(other))->permissionMask_ && [((NSString *) nil_chk([self getName])) isEqual:[other getName]];
  }
  
#line 155
  return false;
}


#line 158
- (NSUInteger)hash {
  
#line 161
  return ((jint) [((NSString *) nil_chk([self getName])) hash]) + self->permissionMask_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 2, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withNSString:);
  methods[2].selector = @selector(calculateMaskWithNSString:);
  methods[3].selector = @selector(getActions);
  methods[4].selector = @selector(impliesWithJavaSecurityPermission:);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "THREAD_LOCAL_EC_IMPLICITLY_CA", "I", .constantValue.asInt = OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_THREAD_LOCAL_EC_IMPLICITLY_CA, 0x1a, -1, -1, -1, -1 },
    { "EC_IMPLICITLY_CA", "I", .constantValue.asInt = OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_EC_IMPLICITLY_CA, 0x1a, -1, -1, -1, -1 },
    { "THREAD_LOCAL_DH_DEFAULT_PARAMS", "I", .constantValue.asInt = OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_THREAD_LOCAL_DH_DEFAULT_PARAMS, 0x1a, -1, -1, -1, -1 },
    { "DH_DEFAULT_PARAMS", "I", .constantValue.asInt = OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_DH_DEFAULT_PARAMS, 0x1a, -1, -1, -1, -1 },
    { "ACCEPTABLE_EC_CURVES", "I", .constantValue.asInt = OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ACCEPTABLE_EC_CURVES, 0x1a, -1, -1, -1, -1 },
    { "ADDITIONAL_EC_PARAMETERS", "I", .constantValue.asInt = OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ADDITIONAL_EC_PARAMETERS, 0x1a, -1, -1, -1, -1 },
    { "ALL", "I", .constantValue.asInt = OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ALL, 0x1a, -1, -1, -1, -1 },
    { "THREAD_LOCAL_EC_IMPLICITLY_CA_STR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "EC_IMPLICITLY_CA_STR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "THREAD_LOCAL_DH_DEFAULT_PARAMS_STR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "DH_DEFAULT_PARAMS_STR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "ACCEPTABLE_EC_CURVES_STR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "ADDITIONAL_EC_PARAMETERS_STR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "ALL_STR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "actions_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "permissionMask_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;LNSString;", "calculateMask", "implies", "LJavaSecurityPermission;", "equals", "LNSObject;", "hashCode", &OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_THREAD_LOCAL_EC_IMPLICITLY_CA_STR, &OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_EC_IMPLICITLY_CA_STR, &OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_THREAD_LOCAL_DH_DEFAULT_PARAMS_STR, &OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_DH_DEFAULT_PARAMS_STR, &OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ACCEPTABLE_EC_CURVES_STR, &OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ADDITIONAL_EC_PARAMETERS_STR, &OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ALL_STR };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission = { "ProviderConfigurationPermission", "org.bouncycastle.jcajce.provider.config", ptrTable, methods, fields, 7, 0x1, 7, 16, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission;
}

@end


#line 52
void OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *self, NSString *name) {
  JavaSecurityBasicPermission_initWithNSString_(self,
#line 54
  name);
  self->actions_ = @"all";
  self->permissionMask_ = OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ALL;
}


#line 52
OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *new_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, initWithNSString_, name)
}


#line 52
OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *create_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, initWithNSString_, name)
}


#line 59
void OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *self, NSString *name, NSString *actions) {
  JavaSecurityBasicPermission_initWithNSString_withNSString_(self,
#line 61
  name, actions);
  self->actions_ = actions;
  self->permissionMask_ = OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_calculateMaskWithNSString_(self, actions);
}


#line 59
OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *new_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(NSString *name, NSString *actions) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, initWithNSString_withNSString_, name, actions)
}


#line 59
OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *create_OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(NSString *name, NSString *actions) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission, initWithNSString_withNSString_, name, actions)
}


#line 66
jint OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_calculateMaskWithNSString_(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission *self, NSString *actions) {
  
#line 69
  JavaUtilStringTokenizer *tok = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(OrgBouncycastleUtilStrings_toLowerCaseWithNSString_(actions), @" ,");
  jint mask = 0;
  
#line 72
  while ([tok hasMoreTokens]) {
    
#line 74
    NSString *s = [tok nextToken];
    
#line 76
    if ([((NSString *) nil_chk(s)) isEqual:OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_THREAD_LOCAL_EC_IMPLICITLY_CA_STR]) {
      
#line 78
      mask |= OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_THREAD_LOCAL_EC_IMPLICITLY_CA;
    }
    else if ([s isEqual:OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_EC_IMPLICITLY_CA_STR]) {
      
#line 82
      mask |= OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_EC_IMPLICITLY_CA;
    }
    else if ([s isEqual:OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_THREAD_LOCAL_DH_DEFAULT_PARAMS_STR]) {
      
#line 86
      mask |= OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_THREAD_LOCAL_DH_DEFAULT_PARAMS;
    }
    else if ([s isEqual:OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_DH_DEFAULT_PARAMS_STR]) {
      
#line 90
      mask |= OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_DH_DEFAULT_PARAMS;
    }
    else if ([s isEqual:OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ACCEPTABLE_EC_CURVES_STR]) {
      
#line 94
      mask |= OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ACCEPTABLE_EC_CURVES;
    }
    else if ([s isEqual:OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ADDITIONAL_EC_PARAMETERS_STR]) {
      
#line 98
      mask |= OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ADDITIONAL_EC_PARAMETERS;
    }
    else if ([s isEqual:OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ALL_STR]) {
      
#line 102
      mask |= OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission_ALL;
    }
  }
  
#line 106
  if (mask == 0) {
    
#line 108
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unknown permissions passed to mask");
  }
  
#line 111
  return mask;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleJcajceProviderConfigProviderConfigurationPermission)
