//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLEntryObject.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject")
#ifdef RESTRICT_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject
#define INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject 0
#else
#define INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject 1
#endif
#undef RESTRICT_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject

#if !defined (OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject_) && (INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject || defined(INCLUDE_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject))
#define OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject_

#define RESTRICT_JavaSecurityCertX509CRLEntry 1
#define INCLUDE_JavaSecurityCertX509CRLEntry 1
#include "java/security/cert/X509CRLEntry.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class JavaUtilDate;
@class JavaxSecurityAuthX500X500Principal;
@class OrgBouncycastleAsn1X500X500Name;
@class OrgBouncycastleAsn1X509TBSCertList_CRLEntry;
@protocol JavaUtilSet;

/*!
 @brief The following extensions are listed in RFC 2459 as relevant to CRL Entries 
  ReasonCode Hode Instruction Code Invalidity Date Certificate Issuer
  (critical)
 */
@interface OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject : JavaSecurityCertX509CRLEntry

#pragma mark Public

- (jboolean)isEqual:(id)other;

- (JavaxSecurityAuthX500X500Principal *)getCertificateIssuer;

- (id<JavaUtilSet>)getCriticalExtensionOIDs;

- (IOSByteArray *)getEncoded;

- (IOSByteArray *)getExtensionValueWithNSString:(NSString *)oid;

- (id<JavaUtilSet>)getNonCriticalExtensionOIDs;

- (JavaUtilDate *)getRevocationDate;

- (JavaMathBigInteger *)getSerialNumber;

- (jboolean)hasExtensions;

/*!
 @brief Cache the hashCode value - calculating it with the standard method.
 @return calculated hashCode.
 */
- (NSUInteger)hash;

/*!
 @brief Will return true if any extensions are present and marked as critical as
  we currently don't handle any extensions!
 */
- (jboolean)hasUnsupportedCriticalExtension;

- (NSString *)description;

#pragma mark Protected

- (instancetype)initPackagePrivateWithOrgBouncycastleAsn1X509TBSCertList_CRLEntry:(OrgBouncycastleAsn1X509TBSCertList_CRLEntry *)c;

/*!
 @brief Constructor for CRLEntries of indirect CRLs.If <code>isIndirect</code>
  is <code>false</code> <code>getCertificateIssuer()</code> will always
  return <code>null</code>, <code>previousCertificateIssuer</code> is
  ignored.
 If this <code>isIndirect</code> is specified and this CRLEntry
  has no certificate issuer CRL entry extension 
 <code>previousCertificateIssuer</code> is returned by 
 <code>getCertificateIssuer()</code>.
 @param c TBSCertList.CRLEntry object.
 @param isIndirect <code>
  true </code>  if the corresponding CRL is a indirect             CRL.
 @param previousCertificateIssuer Certificate issuer of the previous CRLEntry.
 */
- (instancetype)initPackagePrivateWithOrgBouncycastleAsn1X509TBSCertList_CRLEntry:(OrgBouncycastleAsn1X509TBSCertList_CRLEntry *)c
                                                                      withBoolean:(jboolean)isIndirect
                                              withOrgBouncycastleAsn1X500X500Name:(OrgBouncycastleAsn1X500X500Name *)previousCertificateIssuer;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject)

FOUNDATION_EXPORT void OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject_initPackagePrivateWithOrgBouncycastleAsn1X509TBSCertList_CRLEntry_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject *self, OrgBouncycastleAsn1X509TBSCertList_CRLEntry *c);

FOUNDATION_EXPORT OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject *new_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject_initPackagePrivateWithOrgBouncycastleAsn1X509TBSCertList_CRLEntry_(OrgBouncycastleAsn1X509TBSCertList_CRLEntry *c) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject *create_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject_initPackagePrivateWithOrgBouncycastleAsn1X509TBSCertList_CRLEntry_(OrgBouncycastleAsn1X509TBSCertList_CRLEntry *c);

FOUNDATION_EXPORT void OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject_initPackagePrivateWithOrgBouncycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgBouncycastleAsn1X500X500Name_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject *self, OrgBouncycastleAsn1X509TBSCertList_CRLEntry *c, jboolean isIndirect, OrgBouncycastleAsn1X500X500Name *previousCertificateIssuer);

FOUNDATION_EXPORT OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject *new_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject_initPackagePrivateWithOrgBouncycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgBouncycastleAsn1X500X500Name_(OrgBouncycastleAsn1X509TBSCertList_CRLEntry *c, jboolean isIndirect, OrgBouncycastleAsn1X500X500Name *previousCertificateIssuer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject *create_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject_initPackagePrivateWithOrgBouncycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgBouncycastleAsn1X500X500Name_(OrgBouncycastleAsn1X509TBSCertList_CRLEntry *c, jboolean isIndirect, OrgBouncycastleAsn1X500X500Name *previousCertificateIssuer);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject")
