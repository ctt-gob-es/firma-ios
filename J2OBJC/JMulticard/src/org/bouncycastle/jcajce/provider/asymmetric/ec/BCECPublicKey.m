//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/BCECPublicKey.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/security/interfaces/ECPublicKey.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/ECPoint.h"
#include "java/security/spec/ECPublicKeySpec.h"
#include "java/security/spec/EllipticCurve.h"
#include "org/bouncycastle/asn1/ASN1BitString.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1OctetString.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/DEROctetString.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/bouncycastle/asn1/x9/X962Parameters.h"
#include "org/bouncycastle/asn1/x9/X9ECPoint.h"
#include "org/bouncycastle/asn1/x9/X9IntegerConverter.h"
#include "org/bouncycastle/asn1/x9/X9ObjectIdentifiers.h"
#include "org/bouncycastle/crypto/params/ECDomainParameters.h"
#include "org/bouncycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/ec/BCECPublicKey.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/ec/ECUtils.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/util/EC5Util.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/util/ECUtil.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/util/KeyUtil.h"
#include "org/bouncycastle/jcajce/provider/config/ProviderConfiguration.h"
#include "org/bouncycastle/jce/provider/BouncyCastleProvider.h"
#include "org/bouncycastle/jce/spec/ECParameterSpec.h"
#include "org/bouncycastle/jce/spec/ECPublicKeySpec.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECFieldElement.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/Properties.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/jcajce/provider/asymmetric/ec/BCECPublicKey must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey () {
 @public
  NSString *algorithm_;
  jboolean withCompression_;
  OrgBouncycastleCryptoParamsECPublicKeyParameters *ecPublicKey_;
  JavaSecuritySpecECParameterSpec *ecSpec_;
  id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration_;
  IOSByteArray *encoding_;
  jboolean oldPcSet_;
}

- (JavaSecuritySpecECParameterSpec *)createSpecWithJavaSecuritySpecEllipticCurve:(JavaSecuritySpecEllipticCurve *)ellipticCurve
                               withOrgBouncycastleCryptoParamsECDomainParameters:(OrgBouncycastleCryptoParamsECDomainParameters *)dp;

- (void)populateFromPubKeyInfoWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)info;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, algorithm_, NSString *)
J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, ecPublicKey_, OrgBouncycastleCryptoParamsECPublicKeyParameters *)
J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, ecSpec_, JavaSecuritySpecECParameterSpec *)
J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, configuration_, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>)
J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, encoding_, IOSByteArray *)

__attribute__((unused)) static JavaSecuritySpecECParameterSpec *OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withOrgBouncycastleCryptoParamsECDomainParameters_(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, JavaSecuritySpecEllipticCurve *ellipticCurve, OrgBouncycastleCryptoParamsECDomainParameters *dp);

__attribute__((unused)) static void OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_populateFromPubKeyInfoWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, OrgBouncycastleAsn1X509SubjectPublicKeyInfo *info);

__attribute__((unused)) static void OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_readObjectWithJavaIoObjectInputStream_(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_writeObjectWithJavaIoObjectOutputStream_(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, JavaIoObjectOutputStream *outArg);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/BCECPublicKey.java"


#line 34
@implementation OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey


#line 48
- (instancetype)initWithNSString:(NSString *)algorithm
withOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey:(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *)key {
  OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_(self, algorithm, key);
  return self;
}


#line 59
- (instancetype)initWithNSString:(NSString *)algorithm
withJavaSecuritySpecECPublicKeySpec:(JavaSecuritySpecECPublicKeySpec *)spec
withOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withJavaSecuritySpecECPublicKeySpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, algorithm, spec, configuration);
  return self;
}


#line 70
- (instancetype)initWithNSString:(NSString *)algorithm
withOrgBouncycastleJceSpecECPublicKeySpec:(OrgBouncycastleJceSpecECPublicKeySpec *)spec
withOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleJceSpecECPublicKeySpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, algorithm, spec, configuration);
  return self;
}


#line 98
- (instancetype)initWithNSString:(NSString *)algorithm
withOrgBouncycastleCryptoParamsECPublicKeyParameters:(OrgBouncycastleCryptoParamsECPublicKeyParameters *)params
withJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)spec
withOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, algorithm, params, spec, configuration);
  return self;
}


#line 123
- (instancetype)initWithNSString:(NSString *)algorithm
withOrgBouncycastleCryptoParamsECPublicKeyParameters:(OrgBouncycastleCryptoParamsECPublicKeyParameters *)params
withOrgBouncycastleJceSpecECParameterSpec:(OrgBouncycastleJceSpecECParameterSpec *)spec
withOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withOrgBouncycastleJceSpecECParameterSpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, algorithm, params, spec, configuration);
  return self;
}


#line 153
- (instancetype)initWithNSString:(NSString *)algorithm
withOrgBouncycastleCryptoParamsECPublicKeyParameters:(OrgBouncycastleCryptoParamsECPublicKeyParameters *)params
withOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, algorithm, params, configuration);
  return self;
}


#line 164
- (instancetype)initWithJavaSecurityInterfacesECPublicKey:(id<JavaSecurityInterfacesECPublicKey>)key
withOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithJavaSecurityInterfacesECPublicKey_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, key, configuration);
  return self;
}


#line 174
- (instancetype)initWithNSString:(NSString *)algorithm
withOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)info
withOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, algorithm, info, configuration);
  return self;
}


#line 184
- (JavaSecuritySpecECParameterSpec *)createSpecWithJavaSecuritySpecEllipticCurve:(JavaSecuritySpecEllipticCurve *)ellipticCurve
                               withOrgBouncycastleCryptoParamsECDomainParameters:(OrgBouncycastleCryptoParamsECDomainParameters *)dp {
  return OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withOrgBouncycastleCryptoParamsECDomainParameters_(self, ellipticCurve, dp);
}


#line 193
- (void)populateFromPubKeyInfoWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:(OrgBouncycastleAsn1X509SubjectPublicKeyInfo *)info {
  OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_populateFromPubKeyInfoWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, info);
}


#line 229
- (NSString *)getAlgorithm {
  
#line 232
  return algorithm_;
}

- (NSString *)getFormat {
  
#line 238
  return @"X.509";
}

- (IOSByteArray *)getEncoded {
  
#line 244
  jboolean pcSet = OrgBouncycastleUtilProperties_isOverrideSetWithNSString_(@"org.bouncycastle.ec.enable_pc");
  if (encoding_ == nil || oldPcSet_ != pcSet) {
    
#line 247
    jboolean compress = withCompression_ || pcSet;
    
#line 249
    OrgBouncycastleAsn1X509AlgorithmIdentifier *algId = new_OrgBouncycastleAsn1X509AlgorithmIdentifier_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleAsn1ASN1Encodable_(JreLoadStatic(OrgBouncycastleAsn1X9X9ObjectIdentifiers, id_ecPublicKey), OrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromNameWithJavaSecuritySpecECParameterSpec_withBoolean_(
#line 251
    ecSpec_, compress));
    
#line 253
    IOSByteArray *pubKeyOctets = [((OrgBouncycastleMathEcECPoint *) nil_chk([((OrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(ecPublicKey_)) getQ])) getEncodedWithBoolean:compress];
    
#line 256
    encoding_ = OrgBouncycastleJcajceProviderAsymmetricUtilKeyUtil_getEncodedSubjectPublicKeyInfoWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withByteArray_(algId, pubKeyOctets);
    oldPcSet_ = pcSet;
  }
  
#line 260
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(encoding_);
}


#line 263
- (JavaSecuritySpecECParameterSpec *)getParams {
  
#line 266
  return ecSpec_;
}

- (OrgBouncycastleJceSpecECParameterSpec *)getParameters {
  
#line 272
  if (ecSpec_ == nil) {
    
#line 274
    return nil;
  }
  
#line 277
  return OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_(ecSpec_);
}


#line 280
- (JavaSecuritySpecECPoint *)getW {
  
#line 283
  return OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithOrgBouncycastleMathEcECPoint_([((OrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(ecPublicKey_)) getQ]);
}

- (OrgBouncycastleMathEcECPoint *)getQ {
  
#line 289
  OrgBouncycastleMathEcECPoint *q = [((OrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(ecPublicKey_)) getQ];
  
#line 291
  if (ecSpec_ == nil) {
    
#line 293
    return [((OrgBouncycastleMathEcECPoint *) nil_chk(q)) getDetachedPoint];
  }
  
#line 296
  return q;
}


#line 299
- (OrgBouncycastleCryptoParamsECPublicKeyParameters *)engineGetKeyParameters {
  
#line 301
  return ecPublicKey_;
}


#line 304
- (OrgBouncycastleJceSpecECParameterSpec *)engineGetSpec {
  
#line 306
  if (ecSpec_ != nil) {
    
#line 308
    return OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_(ecSpec_);
  }
  
#line 311
  return [((id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(configuration_)) getEcImplicitlyCa];
}


#line 314
- (NSString *)description {
  
#line 317
  return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_publicKeyToStringWithNSString_withOrgBouncycastleMathEcECPoint_withOrgBouncycastleJceSpecECParameterSpec_(@"EC", [((OrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(ecPublicKey_)) getQ], [self engineGetSpec]);
}

- (void)setPointFormatWithNSString:(NSString *)style {
  
#line 323
  withCompression_ = !([@"UNCOMPRESSED" java_equalsIgnoreCase:style]);
  encoding_ = nil;
}

- (jboolean)isEqual:(id)o {
  
#line 330
  if ([o isKindOfClass:[OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey class]]) {
    
#line 332
    OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *other = (OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *) o;
    
#line 334
    return [((OrgBouncycastleMathEcECPoint *) nil_chk([((OrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(ecPublicKey_)) getQ])) equalsWithOrgBouncycastleMathEcECPoint:[((OrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(((OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *) nil_chk(other))->ecPublicKey_)) getQ]] && ([((OrgBouncycastleJceSpecECParameterSpec *) nil_chk([self engineGetSpec])) isEqual:[other engineGetSpec]]);
  }
  
#line 337
  if ([JavaSecurityInterfacesECPublicKey_class_() isInstance:o]) {
    
#line 339
    id<JavaSecurityInterfacesECPublicKey> other = (id<JavaSecurityInterfacesECPublicKey>) cast_check(o, JavaSecurityInterfacesECPublicKey_class_());
    
#line 341
    return OrgBouncycastleUtilArrays_areEqualWithByteArray_withByteArray_([self getEncoded], [((id<JavaSecurityInterfacesECPublicKey>) nil_chk(other)) getEncoded]);
  }
  
#line 344
  return false;
}


#line 347
- (NSUInteger)hash {
  
#line 350
  return ((jint) [((OrgBouncycastleMathEcECPoint *) nil_chk([((OrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(ecPublicKey_)) getQ])) hash]) ^ ((jint) [((OrgBouncycastleJceSpecECParameterSpec *) nil_chk([self engineGetSpec])) hash]);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_readObjectWithJavaIoObjectInputStream_(self, inArg);
}


#line 366
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 7, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECParameterSpec;", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleJceSpecECParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsECPublicKeyParameters;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleJceSpecECParameterSpec;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, 20, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, 23, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey:);
  methods[1].selector = @selector(initWithNSString:withJavaSecuritySpecECPublicKeySpec:withOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[2].selector = @selector(initWithNSString:withOrgBouncycastleJceSpecECPublicKeySpec:withOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[3].selector = @selector(initWithNSString:withOrgBouncycastleCryptoParamsECPublicKeyParameters:withJavaSecuritySpecECParameterSpec:withOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[4].selector = @selector(initWithNSString:withOrgBouncycastleCryptoParamsECPublicKeyParameters:withOrgBouncycastleJceSpecECParameterSpec:withOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[5].selector = @selector(initWithNSString:withOrgBouncycastleCryptoParamsECPublicKeyParameters:withOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[6].selector = @selector(initWithJavaSecurityInterfacesECPublicKey:withOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[7].selector = @selector(initWithNSString:withOrgBouncycastleAsn1X509SubjectPublicKeyInfo:withOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[8].selector = @selector(createSpecWithJavaSecuritySpecEllipticCurve:withOrgBouncycastleCryptoParamsECDomainParameters:);
  methods[9].selector = @selector(populateFromPubKeyInfoWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo:);
  methods[10].selector = @selector(getAlgorithm);
  methods[11].selector = @selector(getFormat);
  methods[12].selector = @selector(getEncoded);
  methods[13].selector = @selector(getParams);
  methods[14].selector = @selector(getParameters);
  methods[15].selector = @selector(getW);
  methods[16].selector = @selector(getQ);
  methods[17].selector = @selector(engineGetKeyParameters);
  methods[18].selector = @selector(engineGetSpec);
  methods[19].selector = @selector(description);
  methods[20].selector = @selector(setPointFormatWithNSString:);
  methods[21].selector = @selector(isEqual:);
  methods[22].selector = @selector(hash);
  methods[23].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[24].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_serialVersionUID, 0x18, -1, -1, -1, -1 },
    { "algorithm_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "withCompression_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ecPublicKey_", "LOrgBouncycastleCryptoParamsECPublicKeyParameters;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "ecSpec_", "LJavaSecuritySpecECParameterSpec;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "configuration_", "LOrgBouncycastleJcajceProviderConfigProviderConfiguration;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "encoding_", "[B", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "oldPcSet_", "Z", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey;", "LNSString;LJavaSecuritySpecECPublicKeySpec;LOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "LNSString;LOrgBouncycastleJceSpecECPublicKeySpec;LOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "LNSString;LOrgBouncycastleCryptoParamsECPublicKeyParameters;LJavaSecuritySpecECParameterSpec;LOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "LNSString;LOrgBouncycastleCryptoParamsECPublicKeyParameters;LOrgBouncycastleJceSpecECParameterSpec;LOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "LNSString;LOrgBouncycastleCryptoParamsECPublicKeyParameters;LOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "LJavaSecurityInterfacesECPublicKey;LOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "LNSString;LOrgBouncycastleAsn1X509SubjectPublicKeyInfo;LOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "createSpec", "LJavaSecuritySpecEllipticCurve;LOrgBouncycastleCryptoParamsECDomainParameters;", "populateFromPubKeyInfo", "LOrgBouncycastleAsn1X509SubjectPublicKeyInfo;", "toString", "setPointFormat", "LNSString;", "equals", "LNSObject;", "hashCode", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey = { "BCECPublicKey", "org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, fields, 7, 0x1, 25, 8, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey;
}

@end


#line 48
void OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, NSString *algorithm, OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *key) {
  NSObject_init(self);
  self->algorithm_ =
#line 39
  @"EC";
  
#line 52
  self->algorithm_ = algorithm;
  self->ecPublicKey_ = ((OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *) nil_chk(key))->ecPublicKey_;
  self->ecSpec_ = key->ecSpec_;
  self->withCompression_ = key->withCompression_;
  self->configuration_ = key->configuration_;
}


#line 48
OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *new_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_(NSString *algorithm, OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *key) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_, algorithm, key)
}


#line 48
OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *create_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_(NSString *algorithm, OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *key) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_, algorithm, key)
}


#line 59
void OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withJavaSecuritySpecECPublicKeySpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, NSString *algorithm, JavaSecuritySpecECPublicKeySpec *spec, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ =
#line 39
  @"EC";
  
#line 64
  self->algorithm_ = algorithm;
  self->ecSpec_ = [((JavaSecuritySpecECPublicKeySpec *) nil_chk(spec)) getParams];
  self->ecPublicKey_ = new_OrgBouncycastleCryptoParamsECPublicKeyParameters_initWithOrgBouncycastleMathEcECPoint_withOrgBouncycastleCryptoParamsECDomainParameters_(OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithJavaSecuritySpecECParameterSpec_withJavaSecuritySpecECPoint_(self->ecSpec_, [spec getW]), OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_getDomainParametersWithOrgBouncycastleJcajceProviderConfigProviderConfiguration_withJavaSecuritySpecECParameterSpec_(configuration, [spec getParams]));
  self->configuration_ = configuration;
}


#line 59
OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *new_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withJavaSecuritySpecECPublicKeySpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, JavaSecuritySpecECPublicKeySpec *spec, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withJavaSecuritySpecECPublicKeySpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, spec, configuration)
}


#line 59
OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *create_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withJavaSecuritySpecECPublicKeySpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, JavaSecuritySpecECPublicKeySpec *spec, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withJavaSecuritySpecECPublicKeySpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, spec, configuration)
}


#line 70
void OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleJceSpecECPublicKeySpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, NSString *algorithm, OrgBouncycastleJceSpecECPublicKeySpec *spec, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ =
#line 39
  @"EC";
  
#line 75
  self->algorithm_ = algorithm;
  
#line 77
  if ([((OrgBouncycastleJceSpecECPublicKeySpec *) nil_chk(spec)) getParams] != nil) {
    
#line 79
    OrgBouncycastleMathEcECCurve *curve = [((OrgBouncycastleJceSpecECParameterSpec *) nil_chk([spec getParams])) getCurve];
    JavaSecuritySpecEllipticCurve *ellipticCurve = OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithOrgBouncycastleMathEcECCurve_withByteArray_(curve, [((OrgBouncycastleJceSpecECParameterSpec *) nil_chk([spec getParams])) getSeed]);
    
#line 83
    self->ecPublicKey_ = new_OrgBouncycastleCryptoParamsECPublicKeyParameters_initWithOrgBouncycastleMathEcECPoint_withOrgBouncycastleCryptoParamsECDomainParameters_(
#line 84
    [spec getQ], OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getDomainParametersWithOrgBouncycastleJcajceProviderConfigProviderConfiguration_withOrgBouncycastleJceSpecECParameterSpec_(configuration, [spec getParams]));
    self->ecSpec_ = OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecEllipticCurve_withOrgBouncycastleJceSpecECParameterSpec_(ellipticCurve, [spec getParams]);
  }
  else {
    
#line 89
    OrgBouncycastleJceSpecECParameterSpec *s = [((id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(configuration)) getEcImplicitlyCa];
    
#line 91
    self->ecPublicKey_ = new_OrgBouncycastleCryptoParamsECPublicKeyParameters_initWithOrgBouncycastleMathEcECPoint_withOrgBouncycastleCryptoParamsECDomainParameters_([((OrgBouncycastleMathEcECCurve *) nil_chk([((OrgBouncycastleJceSpecECParameterSpec *) nil_chk(s)) getCurve])) createPointWithJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk([spec getQ])) getAffineXCoord])) toBigInteger] withJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk([spec getQ])) getAffineYCoord])) toBigInteger]], OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_getDomainParametersWithOrgBouncycastleJcajceProviderConfigProviderConfiguration_withJavaSecuritySpecECParameterSpec_(configuration, nil));
    self->ecSpec_ = nil;
  }
  
#line 95
  self->configuration_ = configuration;
}


#line 70
OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *new_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleJceSpecECPublicKeySpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, OrgBouncycastleJceSpecECPublicKeySpec *spec, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withOrgBouncycastleJceSpecECPublicKeySpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, spec, configuration)
}


#line 70
OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *create_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleJceSpecECPublicKeySpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, OrgBouncycastleJceSpecECPublicKeySpec *spec, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withOrgBouncycastleJceSpecECPublicKeySpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, spec, configuration)
}


#line 98
void OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, NSString *algorithm, OrgBouncycastleCryptoParamsECPublicKeyParameters *params, JavaSecuritySpecECParameterSpec *spec, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ =
#line 39
  @"EC";
  
#line 104
  OrgBouncycastleCryptoParamsECDomainParameters *dp = [((OrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(params)) getParameters];
  
#line 106
  self->algorithm_ = algorithm;
  self->ecPublicKey_ = params;
  
#line 109
  if (spec == nil) {
    
#line 111
    JavaSecuritySpecEllipticCurve *ellipticCurve = OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithOrgBouncycastleMathEcECCurve_withByteArray_([((OrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(dp)) getCurve], [dp getSeed]);
    
#line 113
    self->ecSpec_ = OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withOrgBouncycastleCryptoParamsECDomainParameters_(self, ellipticCurve, dp);
  }
  else {
    
#line 117
    self->ecSpec_ = spec;
  }
  
#line 120
  self->configuration_ = configuration;
}


#line 98
OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *new_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, OrgBouncycastleCryptoParamsECPublicKeyParameters *params, JavaSecuritySpecECParameterSpec *spec, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, params, spec, configuration)
}


#line 98
OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *create_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, OrgBouncycastleCryptoParamsECPublicKeyParameters *params, JavaSecuritySpecECParameterSpec *spec, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, params, spec, configuration)
}


#line 123
void OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withOrgBouncycastleJceSpecECParameterSpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, NSString *algorithm, OrgBouncycastleCryptoParamsECPublicKeyParameters *params, OrgBouncycastleJceSpecECParameterSpec *spec, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ =
#line 39
  @"EC";
  
#line 129
  OrgBouncycastleCryptoParamsECDomainParameters *dp = [((OrgBouncycastleCryptoParamsECPublicKeyParameters *) nil_chk(params)) getParameters];
  
#line 131
  self->algorithm_ = algorithm;
  
#line 133
  if (spec == nil) {
    
#line 135
    JavaSecuritySpecEllipticCurve *ellipticCurve = OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithOrgBouncycastleMathEcECCurve_withByteArray_([((OrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(dp)) getCurve], [dp getSeed]);
    
#line 137
    self->ecSpec_ = OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withOrgBouncycastleCryptoParamsECDomainParameters_(self, ellipticCurve, dp);
  }
  else {
    
#line 141
    JavaSecuritySpecEllipticCurve *ellipticCurve = OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithOrgBouncycastleMathEcECCurve_withByteArray_([spec getCurve], [spec getSeed]);
    
#line 143
    self->ecSpec_ = OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecEllipticCurve_withOrgBouncycastleJceSpecECParameterSpec_(ellipticCurve, spec);
  }
  
#line 146
  self->ecPublicKey_ = params;
  self->configuration_ = configuration;
}


#line 123
OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *new_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withOrgBouncycastleJceSpecECParameterSpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, OrgBouncycastleCryptoParamsECPublicKeyParameters *params, OrgBouncycastleJceSpecECParameterSpec *spec, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withOrgBouncycastleJceSpecECParameterSpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, params, spec, configuration)
}


#line 123
OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *create_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withOrgBouncycastleJceSpecECParameterSpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, OrgBouncycastleCryptoParamsECPublicKeyParameters *params, OrgBouncycastleJceSpecECParameterSpec *spec, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withOrgBouncycastleJceSpecECParameterSpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, params, spec, configuration)
}


#line 153
void OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, NSString *algorithm, OrgBouncycastleCryptoParamsECPublicKeyParameters *params, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ =
#line 39
  @"EC";
  
#line 158
  self->algorithm_ = algorithm;
  self->ecPublicKey_ = params;
  self->ecSpec_ = nil;
  self->configuration_ = configuration;
}


#line 153
OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *new_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, OrgBouncycastleCryptoParamsECPublicKeyParameters *params, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, params, configuration)
}


#line 153
OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *create_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, OrgBouncycastleCryptoParamsECPublicKeyParameters *params, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, params, configuration)
}


#line 164
void OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithJavaSecurityInterfacesECPublicKey_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, id<JavaSecurityInterfacesECPublicKey> key, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ =
#line 39
  @"EC";
  
#line 168
  self->algorithm_ = [((id<JavaSecurityInterfacesECPublicKey>) nil_chk(key)) getAlgorithm];
  self->ecSpec_ = [key getParams];
  self->ecPublicKey_ = new_OrgBouncycastleCryptoParamsECPublicKeyParameters_initWithOrgBouncycastleMathEcECPoint_withOrgBouncycastleCryptoParamsECDomainParameters_(OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithJavaSecuritySpecECParameterSpec_withJavaSecuritySpecECPoint_(self->ecSpec_, [key getW]), OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_getDomainParametersWithOrgBouncycastleJcajceProviderConfigProviderConfiguration_withJavaSecuritySpecECParameterSpec_(configuration, [key getParams]));
  self->configuration_ = configuration;
}


#line 164
OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *new_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithJavaSecurityInterfacesECPublicKey_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(id<JavaSecurityInterfacesECPublicKey> key, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithJavaSecurityInterfacesECPublicKey_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_, key, configuration)
}


#line 164
OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *create_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithJavaSecurityInterfacesECPublicKey_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(id<JavaSecurityInterfacesECPublicKey> key, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithJavaSecurityInterfacesECPublicKey_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_, key, configuration)
}


#line 174
void OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, NSString *algorithm, OrgBouncycastleAsn1X509SubjectPublicKeyInfo *info, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ =
#line 39
  @"EC";
  
#line 179
  self->algorithm_ = algorithm;
  self->configuration_ = configuration;
  OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_populateFromPubKeyInfoWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, info);
}


#line 174
OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *new_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, OrgBouncycastleAsn1X509SubjectPublicKeyInfo *info, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, info, configuration)
}


#line 174
OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *create_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, OrgBouncycastleAsn1X509SubjectPublicKeyInfo *info, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey, initWithNSString_withOrgBouncycastleAsn1X509SubjectPublicKeyInfo_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, info, configuration)
}


#line 184
JavaSecuritySpecECParameterSpec *OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withOrgBouncycastleCryptoParamsECDomainParameters_(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, JavaSecuritySpecEllipticCurve *ellipticCurve, OrgBouncycastleCryptoParamsECDomainParameters *dp) {
  
#line 186
  return new_JavaSecuritySpecECParameterSpec_initWithJavaSecuritySpecEllipticCurve_withJavaSecuritySpecECPoint_withJavaMathBigInteger_withInt_(
#line 187
  ellipticCurve, OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithOrgBouncycastleMathEcECPoint_(
#line 188
  [((OrgBouncycastleCryptoParamsECDomainParameters *) nil_chk(dp)) getG]),
#line 189
  [dp getN],
#line 190
  [((JavaMathBigInteger *) nil_chk([dp getH])) intValue]);
}


#line 193
void OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_populateFromPubKeyInfoWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, OrgBouncycastleAsn1X509SubjectPublicKeyInfo *info) {
  
#line 195
  OrgBouncycastleAsn1X9X962Parameters *params = OrgBouncycastleAsn1X9X962Parameters_getInstanceWithId_([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgBouncycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(info)) getAlgorithm])) getParameters]);
  OrgBouncycastleMathEcECCurve *curve = OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_getCurveWithOrgBouncycastleJcajceProviderConfigProviderConfiguration_withOrgBouncycastleAsn1X9X962Parameters_(self->configuration_, params);
  self->ecSpec_ = OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertToSpecWithOrgBouncycastleAsn1X9X962Parameters_withOrgBouncycastleMathEcECCurve_(params, curve);
  
#line 199
  OrgBouncycastleAsn1ASN1BitString *bits = [info getPublicKeyData];
  IOSByteArray *data = [((OrgBouncycastleAsn1ASN1BitString *) nil_chk(bits)) getBytes];
  OrgBouncycastleAsn1ASN1OctetString *key = new_OrgBouncycastleAsn1DEROctetString_initWithByteArray_(data);
  
#line 206
  if (IOSByteArray_Get(nil_chk(data), 0) == (jint) 0x04 && IOSByteArray_Get(data, 1) == data->size_ - 2 &&
#line 207
  (IOSByteArray_Get(data, 2) == (jint) 0x02 || IOSByteArray_Get(data, 2) == (jint) 0x03)) {
    
#line 209
    jint qLength = [new_OrgBouncycastleAsn1X9X9IntegerConverter_init() getByteLengthWithOrgBouncycastleMathEcECCurve:curve];
    
#line 211
    if (qLength >= data->size_ - 3) {
      
#line 213
      @try {
        
#line 215
        key = (OrgBouncycastleAsn1ASN1OctetString *) cast_chk(OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(data), [OrgBouncycastleAsn1ASN1OctetString class]);
      }
      @catch (JavaIoIOException *ex) {
        
#line 219
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"error recovering public key");
      }
    }
  }
  
#line 224
  OrgBouncycastleAsn1X9X9ECPoint *derQ = new_OrgBouncycastleAsn1X9X9ECPoint_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleAsn1ASN1OctetString_(curve, key);
  
#line 226
  self->ecPublicKey_ = new_OrgBouncycastleCryptoParamsECPublicKeyParameters_initWithOrgBouncycastleMathEcECPoint_withOrgBouncycastleCryptoParamsECDomainParameters_([derQ getPoint], OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getDomainParametersWithOrgBouncycastleJcajceProviderConfigProviderConfiguration_withOrgBouncycastleAsn1X9X962Parameters_(self->configuration_, params));
}


#line 353
void OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_readObjectWithJavaIoObjectInputStream_(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, JavaIoObjectInputStream *inArg) {
  
#line 357
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  
#line 359
  IOSByteArray *enc = (IOSByteArray *) cast_chk([inArg readObject], [IOSByteArray class]);
  
#line 361
  self->configuration_ = JreLoadStatic(OrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION);
  
#line 363
  OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_populateFromPubKeyInfoWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(self, OrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(enc)));
}


#line 366
void OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_writeObjectWithJavaIoObjectOutputStream_(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *self, JavaIoObjectOutputStream *outArg) {
  
#line 370
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  
#line 372
  [outArg writeObjectWithId:[self getEncoded]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey)
