//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateImpl.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/math/BigInteger.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/NoSuchProviderException.h"
#include "java/security/Principal.h"
#include "java/security/Provider.h"
#include "java/security/PublicKey.h"
#include "java/security/Signature.h"
#include "java/security/SignatureException.h"
#include "java/security/cert/CertificateEncodingException.h"
#include "java/security/cert/CertificateException.h"
#include "java/security/cert/CertificateExpiredException.h"
#include "java/security/cert/CertificateNotYetValidException.h"
#include "java/security/cert/CertificateParsingException.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "javax/security/auth/x500/X500Principal.h"
#include "org/bouncycastle/asn1/ASN1BitString.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1Encoding.h"
#include "org/bouncycastle/asn1/ASN1IA5String.h"
#include "org/bouncycastle/asn1/ASN1InputStream.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1OctetString.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1Sequence.h"
#include "org/bouncycastle/asn1/ASN1String.h"
#include "org/bouncycastle/asn1/DERBitString.h"
#include "org/bouncycastle/asn1/DERNull.h"
#include "org/bouncycastle/asn1/misc/MiscObjectIdentifiers.h"
#include "org/bouncycastle/asn1/misc/NetscapeCertType.h"
#include "org/bouncycastle/asn1/misc/NetscapeRevocationURL.h"
#include "org/bouncycastle/asn1/misc/VerisignCzagExtension.h"
#include "org/bouncycastle/asn1/util/ASN1Dump.h"
#include "org/bouncycastle/asn1/x500/X500Name.h"
#include "org/bouncycastle/asn1/x500/X500NameStyle.h"
#include "org/bouncycastle/asn1/x500/style/RFC4519Style.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/asn1/x509/BasicConstraints.h"
#include "org/bouncycastle/asn1/x509/Certificate.h"
#include "org/bouncycastle/asn1/x509/Extension.h"
#include "org/bouncycastle/asn1/x509/Extensions.h"
#include "org/bouncycastle/asn1/x509/GeneralName.h"
#include "org/bouncycastle/asn1/x509/KeyUsage.h"
#include "org/bouncycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/bouncycastle/asn1/x509/TBSCertificate.h"
#include "org/bouncycastle/asn1/x509/Time.h"
#include "org/bouncycastle/jcajce/CompositePublicKey.h"
#include "org/bouncycastle/jcajce/io/OutputStreamFactory.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/x509/SignatureCreator.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateImpl.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/x509/X509SignatureUtil.h"
#include "org/bouncycastle/jcajce/util/JcaJceHelper.h"
#include "org/bouncycastle/jce/X509Principal.h"
#include "org/bouncycastle/jce/provider/BouncyCastleProvider.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/Integers.h"
#include "org/bouncycastle/util/Properties.h"
#include "org/bouncycastle/util/Strings.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateImpl must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl ()

- (void)doVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
withOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator:(id<OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator>)signatureCreator;

- (void)checkSignatureWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                      withJavaSecuritySignature:(JavaSecuritySignature *)signature
           withOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)params
                                  withByteArray:(IOSByteArray *)sigBytes;

- (jboolean)isAlgIdEqualWithOrgBouncycastleAsn1X509AlgorithmIdentifier:(OrgBouncycastleAsn1X509AlgorithmIdentifier *)id1
                        withOrgBouncycastleAsn1X509AlgorithmIdentifier:(OrgBouncycastleAsn1X509AlgorithmIdentifier *)id2;

+ (id<JavaUtilCollection>)getAlternativeNamesWithOrgBouncycastleAsn1X509Certificate:(OrgBouncycastleAsn1X509Certificate *)c
                                                                       withNSString:(NSString *)oid;

@end

__attribute__((unused)) static void OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_doVerifyWithJavaSecurityPublicKey_withOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator_(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl *self, id<JavaSecurityPublicKey> key, id<OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator> signatureCreator);

__attribute__((unused)) static void OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_withOrgBouncycastleAsn1ASN1Encodable_withByteArray_(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl *self, id<JavaSecurityPublicKey> key, JavaSecuritySignature *signature, id<OrgBouncycastleAsn1ASN1Encodable> params, IOSByteArray *sigBytes);

__attribute__((unused)) static jboolean OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_isAlgIdEqualWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1X509AlgorithmIdentifier_(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl *self, OrgBouncycastleAsn1X509AlgorithmIdentifier *id1, OrgBouncycastleAsn1X509AlgorithmIdentifier *id2);

__attribute__((unused)) static id<JavaUtilCollection> OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_getAlternativeNamesWithOrgBouncycastleAsn1X509Certificate_withNSString_(OrgBouncycastleAsn1X509Certificate *c, NSString *oid);

@interface OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1 : NSObject < OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator > {
 @public
  OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl *this$0_;
}

- (instancetype)initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl:(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl *)outer$;

- (JavaSecuritySignature *)createSignatureWithNSString:(NSString *)sigName;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1)

__attribute__((unused)) static void OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1 *self, OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl *outer$);

__attribute__((unused)) static OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1 *new_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1 *create_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl *outer$);

@interface OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2 : NSObject < OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator > {
 @public
  NSString *val$sigProvider_;
}

- (instancetype)initWithNSString:(NSString *)capture$0;

- (JavaSecuritySignature *)createSignatureWithNSString:(NSString *)sigName;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2)

__attribute__((unused)) static void OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2_initWithNSString_(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2 *self, NSString *capture$0);

__attribute__((unused)) static OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2 *new_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2 *create_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2_initWithNSString_(NSString *capture$0);

@interface OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3 : NSObject < OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator > {
 @public
  JavaSecurityProvider *val$sigProvider_;
}

- (instancetype)initWithJavaSecurityProvider:(JavaSecurityProvider *)capture$0;

- (JavaSecuritySignature *)createSignatureWithNSString:(NSString *)sigName;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3)

__attribute__((unused)) static void OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3_initWithJavaSecurityProvider_(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3 *self, JavaSecurityProvider *capture$0);

__attribute__((unused)) static OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3 *new_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3_initWithJavaSecurityProvider_(JavaSecurityProvider *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3 *create_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3_initWithJavaSecurityProvider_(JavaSecurityProvider *capture$0);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateImpl.java"


#line 72
@implementation OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl


#line 83
- (instancetype)initPackagePrivateWithOrgBouncycastleJcajceUtilJcaJceHelper:(id<OrgBouncycastleJcajceUtilJcaJceHelper>)bcHelper
                                     withOrgBouncycastleAsn1X509Certificate:(OrgBouncycastleAsn1X509Certificate *)c
                                withOrgBouncycastleAsn1X509BasicConstraints:(OrgBouncycastleAsn1X509BasicConstraints *)basicConstraints
                                                           withBooleanArray:(IOSBooleanArray *)keyUsage
                                                               withNSString:(NSString *)sigAlgName
                                                              withByteArray:(IOSByteArray *)sigAlgParams {
  OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_initPackagePrivateWithOrgBouncycastleJcajceUtilJcaJceHelper_withOrgBouncycastleAsn1X509Certificate_withOrgBouncycastleAsn1X509BasicConstraints_withBooleanArray_withNSString_withByteArray_(self, bcHelper, c, basicConstraints, keyUsage, sigAlgName, sigAlgParams);
  return self;
}


#line 94
- (OrgBouncycastleAsn1X500X500Name *)getIssuerX500Name {
  
#line 97
  return [((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getIssuer];
}

- (OrgBouncycastleAsn1X509TBSCertificate *)getTBSCertificateNative {
  
#line 103
  return [((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getTBSCertificate];
}

- (OrgBouncycastleAsn1X500X500Name *)getSubjectX500Name {
  
#line 109
  return [((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getSubject];
}

- (void)checkValidity {
  
#line 116
  [self checkValidityWithJavaUtilDate:new_JavaUtilDate_init()];
}


#line 119
- (void)checkValidityWithJavaUtilDate:(JavaUtilDate *)date {
  
#line 124
  if ([((JavaUtilDate *) nil_chk(date)) getTime] > [((JavaUtilDate *) nil_chk([self getNotAfter])) getTime]) {
    
#line 126
    @throw new_JavaSecurityCertCertificateExpiredException_initWithNSString_(JreStrcat("$$", @"certificate expired on ", [((OrgBouncycastleAsn1X509Time *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getEndDate])) getTime]));
  }
  
#line 129
  if ([date getTime] < [((JavaUtilDate *) nil_chk([self getNotBefore])) getTime]) {
    
#line 131
    @throw new_JavaSecurityCertCertificateNotYetValidException_initWithNSString_(JreStrcat("$$", @"certificate not valid till ", [((OrgBouncycastleAsn1X509Time *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getStartDate])) getTime]));
  }
}


#line 135
- (jint)getVersion {
  
#line 138
  return [((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getVersionNumber];
}

- (JavaMathBigInteger *)getSerialNumber {
  
#line 144
  return [((OrgBouncycastleAsn1ASN1Integer *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getSerialNumber])) getValue];
}

- (id<JavaSecurityPrincipal>)getIssuerDN {
  
#line 150
  return new_OrgBouncycastleJceX509Principal_initWithOrgBouncycastleAsn1X500X500Name_([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getIssuer]);
}

- (JavaxSecurityAuthX500X500Principal *)getIssuerX500Principal {
  
#line 156
  @try {
    
#line 158
    IOSByteArray *encoding = [((OrgBouncycastleAsn1X500X500Name *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getIssuer])) getEncodedWithNSString:OrgBouncycastleAsn1ASN1Encoding_DER];
    
#line 160
    return new_JavaxSecurityAuthX500X500Principal_initWithByteArray_(encoding);
  }
  @catch (JavaIoIOException *e) {
    
#line 164
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"can't encode issuer DN");
  }
}


#line 168
- (id<JavaSecurityPrincipal>)getSubjectDN {
  
#line 171
  return new_OrgBouncycastleJceX509Principal_initWithOrgBouncycastleAsn1X500X500Name_([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getSubject]);
}

- (JavaxSecurityAuthX500X500Principal *)getSubjectX500Principal {
  
#line 177
  @try {
    
#line 179
    IOSByteArray *encoding = [((OrgBouncycastleAsn1X500X500Name *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getSubject])) getEncodedWithNSString:OrgBouncycastleAsn1ASN1Encoding_DER];
    
#line 181
    return new_JavaxSecurityAuthX500X500Principal_initWithByteArray_(encoding);
  }
  @catch (JavaIoIOException *e) {
    
#line 185
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"can't encode subject DN");
  }
}


#line 189
- (JavaUtilDate *)getNotBefore {
  
#line 192
  return [((OrgBouncycastleAsn1X509Time *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getStartDate])) getDate];
}

- (JavaUtilDate *)getNotAfter {
  
#line 198
  return [((OrgBouncycastleAsn1X509Time *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getEndDate])) getDate];
}

- (IOSByteArray *)getTBSCertificate {
  
#line 205
  @try {
    
#line 207
    return [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getTBSCertificate])) getEncodedWithNSString:OrgBouncycastleAsn1ASN1Encoding_DER];
  }
  @catch (JavaIoIOException *e) {
    
#line 211
    @throw new_JavaSecurityCertCertificateEncodingException_initWithNSString_([e description]);
  }
}


#line 215
- (IOSByteArray *)getSignature {
  
#line 218
  return [((OrgBouncycastleAsn1ASN1BitString *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getSignature])) getOctets];
}


#line 225
- (NSString *)getSigAlgName {
  
#line 228
  return sigAlgName_;
}


#line 234
- (NSString *)getSigAlgOID {
  
#line 237
  return [((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getSignatureAlgorithm])) getAlgorithm])) getId];
}


#line 243
- (IOSByteArray *)getSigAlgParams {
  
#line 246
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(sigAlgParams_);
}

- (IOSBooleanArray *)getIssuerUniqueID {
  
#line 252
  OrgBouncycastleAsn1ASN1BitString *id_ = [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getTBSCertificate])) getIssuerUniqueId];
  
#line 254
  if (id_ != nil) {
    
#line 256
    IOSByteArray *bytes = [id_ getBytes];
    IOSBooleanArray *boolId = [IOSBooleanArray newArrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_ * 8 - [id_ getPadBits]];
    
#line 259
    for (jint i = 0; i != boolId->size_; i++) {
      
#line 261
      *IOSBooleanArray_GetRef(boolId, i) = ((IOSByteArray_Get(bytes, JreIntDiv(i, 8)) & (JreURShift32((jint) 0x80, JreIntMod(i, 8)))) != 0);
    }
    
#line 264
    return boolId;
  }
  
#line 267
  return nil;
}


#line 270
- (IOSBooleanArray *)getSubjectUniqueID {
  
#line 273
  OrgBouncycastleAsn1ASN1BitString *id_ = [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getTBSCertificate])) getSubjectUniqueId];
  
#line 275
  if (id_ != nil) {
    
#line 277
    IOSByteArray *bytes = [id_ getBytes];
    IOSBooleanArray *boolId = [IOSBooleanArray newArrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_ * 8 - [id_ getPadBits]];
    
#line 280
    for (jint i = 0; i != boolId->size_; i++) {
      
#line 282
      *IOSBooleanArray_GetRef(boolId, i) = ((IOSByteArray_Get(bytes, JreIntDiv(i, 8)) & (JreURShift32((jint) 0x80, JreIntMod(i, 8)))) != 0);
    }
    
#line 285
    return boolId;
  }
  
#line 288
  return nil;
}


#line 291
- (IOSBooleanArray *)getKeyUsage {
  
#line 294
  return OrgBouncycastleUtilArrays_cloneWithBooleanArray_(keyUsage_);
}

- (id<JavaUtilList>)getExtendedKeyUsage {
  
#line 301
  IOSByteArray *extOctets = OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_getExtensionOctetsWithOrgBouncycastleAsn1X509Certificate_withNSString_(c_, @"2.5.29.37");
  if (nil == extOctets) {
    
#line 304
    return nil;
  }
  
#line 307
  @try {
    
#line 309
    OrgBouncycastleAsn1ASN1Sequence *seq = OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(extOctets));
    
#line 311
    id<JavaUtilList> list = new_JavaUtilArrayList_init();
    for (jint i = 0; i != [((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) size]; i++) {
      
#line 314
      [list addWithId:[((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(((OrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([seq getObjectAtWithInt:i], [OrgBouncycastleAsn1ASN1ObjectIdentifier class])))) getId]];
    }
    return JavaUtilCollections_unmodifiableListWithJavaUtilList_(list);
  }
  @catch (JavaLangException *e) {
    
#line 320
    @throw new_JavaSecurityCertCertificateParsingException_initWithNSString_(@"error processing extended key usage extension");
  }
}


#line 324
- (jint)getBasicConstraints {
  
#line 327
  if (basicConstraints_ != nil) {
    
#line 329
    if ([basicConstraints_ isCA]) {
      
#line 331
      if ([((OrgBouncycastleAsn1X509BasicConstraints *) nil_chk(basicConstraints_)) getPathLenConstraint] == nil) {
        
#line 333
        return JavaLangInteger_MAX_VALUE;
      }
      else {
        
#line 337
        return [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleAsn1X509BasicConstraints *) nil_chk(basicConstraints_)) getPathLenConstraint])) intValue];
      }
    }
    else {
    }
  }
  
#line 345
  return -1;
}


#line 348
- (id<JavaUtilCollection>)getSubjectAlternativeNames {
  
#line 352
  return OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_getAlternativeNamesWithOrgBouncycastleAsn1X509Certificate_withNSString_(c_, [((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgBouncycastleAsn1X509Extension, subjectAlternativeName))) getId]);
}


#line 355
- (id<JavaUtilCollection>)getIssuerAlternativeNames {
  
#line 359
  return OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_getAlternativeNamesWithOrgBouncycastleAsn1X509Certificate_withNSString_(c_, [((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgBouncycastleAsn1X509Extension, issuerAlternativeName))) getId]);
}


#line 362
- (id<JavaUtilSet>)getCriticalExtensionOIDs {
  
#line 365
  if ([self getVersion] == 3) {
    
#line 367
    id<JavaUtilSet> set = new_JavaUtilHashSet_init();
    OrgBouncycastleAsn1X509Extensions *extensions = [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getTBSCertificate])) getExtensions];
    
#line 370
    if (extensions != nil) {
      
#line 372
      id<JavaUtilEnumeration> e = [extensions oids];
      
#line 374
      while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
        
#line 376
        OrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (OrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [OrgBouncycastleAsn1ASN1ObjectIdentifier class]);
        OrgBouncycastleAsn1X509Extension *ext = [extensions getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:oid];
        
#line 379
        if ([((OrgBouncycastleAsn1X509Extension *) nil_chk(ext)) isCritical]) {
          
#line 381
          [set addWithId:[((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) getId]];
        }
      }
      
#line 385
      return set;
    }
  }
  
#line 389
  return nil;
}


#line 392
- (IOSByteArray *)getExtensionValueWithNSString:(NSString *)oid {
  
#line 395
  OrgBouncycastleAsn1ASN1OctetString *extValue = OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_getExtensionValueWithOrgBouncycastleAsn1X509Certificate_withNSString_(c_, oid);
  if (nil != extValue) {
    
#line 398
    @try {
      
#line 400
      return [extValue getEncoded];
    }
    @catch (JavaLangException *e) {
      
#line 404
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"error parsing ", [e description]));
    }
  }
  
#line 408
  return nil;
}


#line 411
- (id<JavaUtilSet>)getNonCriticalExtensionOIDs {
  
#line 414
  if ([self getVersion] == 3) {
    
#line 416
    id<JavaUtilSet> set = new_JavaUtilHashSet_init();
    OrgBouncycastleAsn1X509Extensions *extensions = [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getTBSCertificate])) getExtensions];
    
#line 419
    if (extensions != nil) {
      
#line 421
      id<JavaUtilEnumeration> e = [extensions oids];
      
#line 423
      while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
        
#line 425
        OrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (OrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [OrgBouncycastleAsn1ASN1ObjectIdentifier class]);
        OrgBouncycastleAsn1X509Extension *ext = [extensions getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:oid];
        
#line 428
        if (![((OrgBouncycastleAsn1X509Extension *) nil_chk(ext)) isCritical]) {
          
#line 430
          [set addWithId:[((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) getId]];
        }
      }
      
#line 434
      return set;
    }
  }
  
#line 438
  return nil;
}


#line 441
- (jboolean)hasUnsupportedCriticalExtension {
  
#line 444
  if ([self getVersion] == 3) {
    
#line 446
    OrgBouncycastleAsn1X509Extensions *extensions = [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getTBSCertificate])) getExtensions];
    
#line 448
    if (extensions != nil) {
      
#line 450
      id<JavaUtilEnumeration> e = [extensions oids];
      
#line 452
      while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
        
#line 454
        OrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (OrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [OrgBouncycastleAsn1ASN1ObjectIdentifier class]);
        
#line 456
        if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X509Extension, keyUsage)] ||
#line 457
        [oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X509Extension, certificatePolicies)] ||
#line 458
        [oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X509Extension, policyMappings)] ||
#line 459
        [oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X509Extension, inhibitAnyPolicy)] ||
#line 460
        [oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X509Extension, cRLDistributionPoints)] ||
#line 461
        [oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X509Extension, issuingDistributionPoint)] ||
#line 462
        [oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X509Extension, deltaCRLIndicator)] ||
#line 463
        [oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X509Extension, policyConstraints)] ||
#line 464
        [oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X509Extension, basicConstraints)] ||
#line 465
        [oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X509Extension, subjectAlternativeName)] ||
#line 466
        [oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X509Extension, nameConstraints)]) {
          
#line 468
          continue;
        }
        
#line 471
        OrgBouncycastleAsn1X509Extension *ext = [extensions getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:oid];
        
#line 473
        if ([((OrgBouncycastleAsn1X509Extension *) nil_chk(ext)) isCritical]) {
          
#line 475
          return true;
        }
      }
    }
  }
  
#line 481
  return false;
}


#line 484
- (id<JavaSecurityPublicKey>)getPublicKey {
  
#line 487
  @try {
    
#line 489
    return OrgBouncycastleJceProviderBouncyCastleProvider_getPublicKeyWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getSubjectPublicKeyInfo]);
  }
  @catch (JavaIoIOException *e) {
    
#line 493
    return nil;
  }
}


#line 497
- (NSString *)description {
  
#line 500
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  NSString *nl = OrgBouncycastleUtilStrings_lineSeparator();
  
#line 503
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"  [0]         Version: "])) appendWithInt:[self getVersion]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"         SerialNumber: "])) appendWithId:[self getSerialNumber]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"             IssuerDN: "])) appendWithId:[self getIssuerDN]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"           Start Date: "])) appendWithId:[self getNotBefore]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"           Final Date: "])) appendWithId:[self getNotAfter]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            SubjectDN: "])) appendWithId:[self getSubjectDN]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"           Public Key: "])) appendWithId:[self getPublicKey]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"  Signature Algorithm: "])) appendWithNSString:[self getSigAlgName]])) appendWithNSString:nl];
  
#line 512
  OrgBouncycastleJcajceProviderAsymmetricX509X509SignatureUtil_prettyPrintSignatureWithByteArray_withJavaLangStringBuffer_withNSString_([self getSignature], buf, nl);
  
#line 514
  OrgBouncycastleAsn1X509Extensions *extensions = [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c_)) getTBSCertificate])) getExtensions];
  
#line 516
  if (extensions != nil) {
    
#line 518
    id<JavaUtilEnumeration> e = [extensions oids];
    
#line 520
    if ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
      
#line 522
      (void) [buf appendWithNSString:@"       Extensions: \n"];
    }
    
#line 525
    while ([e hasMoreElements]) {
      
#line 527
      OrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (OrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [OrgBouncycastleAsn1ASN1ObjectIdentifier class]);
      OrgBouncycastleAsn1X509Extension *ext = [extensions getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:oid];
      
#line 530
      if ([((OrgBouncycastleAsn1X509Extension *) nil_chk(ext)) getExtnValue] != nil) {
        
#line 532
        IOSByteArray *octs = [((OrgBouncycastleAsn1ASN1OctetString *) nil_chk([ext getExtnValue])) getOctets];
        OrgBouncycastleAsn1ASN1InputStream *dIn = new_OrgBouncycastleAsn1ASN1InputStream_initWithByteArray_(octs);
        (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"                       critical("])) appendWithBoolean:[ext isCritical]])) appendWithNSString:@") "];
        @try {
          
#line 537
          if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X509Extension, basicConstraints)]) {
            
#line 539
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:OrgBouncycastleAsn1X509BasicConstraints_getInstanceWithId_([dIn readObject])])) appendWithNSString:nl];
          }
          else if ([oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X509Extension, keyUsage)]) {
            
#line 543
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:OrgBouncycastleAsn1X509KeyUsage_getInstanceWithId_([dIn readObject])])) appendWithNSString:nl];
          }
          else if ([oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1MiscMiscObjectIdentifiers, netscapeCertType)]) {
            
#line 547
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:new_OrgBouncycastleAsn1MiscNetscapeCertType_initWithOrgBouncycastleAsn1ASN1BitString_(OrgBouncycastleAsn1DERBitString_getInstanceWithId_([dIn readObject]))])) appendWithNSString:nl];
          }
          else if ([oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1MiscMiscObjectIdentifiers, netscapeRevocationURL)]) {
            
#line 551
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:new_OrgBouncycastleAsn1MiscNetscapeRevocationURL_initWithOrgBouncycastleAsn1ASN1IA5String_(OrgBouncycastleAsn1ASN1IA5String_getInstanceWithId_([dIn readObject]))])) appendWithNSString:nl];
          }
          else if ([oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1MiscMiscObjectIdentifiers, verisignCzagExtension)]) {
            
#line 555
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:new_OrgBouncycastleAsn1MiscVerisignCzagExtension_initWithOrgBouncycastleAsn1ASN1IA5String_(OrgBouncycastleAsn1ASN1IA5String_getInstanceWithId_([dIn readObject]))])) appendWithNSString:nl];
          }
          else {
            
#line 559
            (void) [buf appendWithNSString:[oid getId]];
            (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" value = "])) appendWithNSString:OrgBouncycastleAsn1UtilASN1Dump_dumpAsStringWithId_([dIn readObject])])) appendWithNSString:nl];
          }
        }
        @catch (
#line 564
        JavaLangException *ex) {
          
#line 566
          (void) [buf appendWithNSString:[oid getId]];
          
#line 568
          (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" value = "])) appendWithNSString:@"*****"])) appendWithNSString:nl];
        }
      }
      else {
        
#line 573
        (void) [buf appendWithNSString:nl];
      }
    }
  }
  
#line 578
  return [buf description];
}


#line 581
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  
#line 587
  OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_doVerifyWithJavaSecurityPublicKey_withOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator_(self, key, new_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_(self));
}


#line 605
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                           withNSString:(NSString *)sigProvider {
  
#line 612
  OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_doVerifyWithJavaSecurityPublicKey_withOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator_(self, key, new_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2_initWithNSString_(sigProvider));
}


#line 630
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
               withJavaSecurityProvider:(JavaSecurityProvider *)sigProvider {
  
#line 637
  @try {
    
#line 639
    OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_doVerifyWithJavaSecurityPublicKey_withOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator_(self, key, new_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3_initWithJavaSecurityProvider_(sigProvider));
  }
  @catch (
#line 656
  JavaSecurityNoSuchProviderException *e) {
    
#line 659
    @throw new_JavaSecurityNoSuchAlgorithmException_initWithNSString_(JreStrcat("$$", @"provider issue: ", [e getMessage]));
  }
}


#line 663
- (void)doVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
withOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator:(id<OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator>)signatureCreator {
  OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_doVerifyWithJavaSecurityPublicKey_withOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator_(self, key, signatureCreator);
}


#line 790
- (void)checkSignatureWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                      withJavaSecuritySignature:(JavaSecuritySignature *)signature
           withOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)params
                                  withByteArray:(IOSByteArray *)sigBytes {
  OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_withOrgBouncycastleAsn1ASN1Encodable_withByteArray_(self, key, signature, params, sigBytes);
}


#line 827
- (jboolean)isAlgIdEqualWithOrgBouncycastleAsn1X509AlgorithmIdentifier:(OrgBouncycastleAsn1X509AlgorithmIdentifier *)id1
                        withOrgBouncycastleAsn1X509AlgorithmIdentifier:(OrgBouncycastleAsn1X509AlgorithmIdentifier *)id2 {
  return OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_isAlgIdEqualWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1X509AlgorithmIdentifier_(self, id1, id2);
}


#line 870
+ (id<JavaUtilCollection>)getAlternativeNamesWithOrgBouncycastleAsn1X509Certificate:(OrgBouncycastleAsn1X509Certificate *)c
                                                                       withNSString:(NSString *)oid {
  return OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_getAlternativeNamesWithOrgBouncycastleAsn1X509Certificate_withNSString_(c, oid);
}


#line 936
+ (IOSByteArray *)getExtensionOctetsWithOrgBouncycastleAsn1X509Certificate:(OrgBouncycastleAsn1X509Certificate *)c
                                                              withNSString:(NSString *)oid {
  return OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_getExtensionOctetsWithOrgBouncycastleAsn1X509Certificate_withNSString_(c, oid);
}


#line 946
+ (OrgBouncycastleAsn1ASN1OctetString *)getExtensionValueWithOrgBouncycastleAsn1X509Certificate:(OrgBouncycastleAsn1X509Certificate *)c
                                                                                   withNSString:(NSString *)oid {
  return OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_getExtensionValueWithOrgBouncycastleAsn1X509Certificate_withNSString_(c, oid);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X509TBSCertificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPrincipal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxSecurityAuthX500X500Principal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPrincipal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxSecurityAuthX500X500Principal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 9, 10, 11, -1, -1, -1 },
    { NULL, "V", 0x11, 9, 12, 11, -1, -1, -1 },
    { NULL, "V", 0x11, 9, 13, 14, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 16, 17, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, 20, -1, -1, -1 },
    { NULL, "Z", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0xa, 23, 24, 5, -1, -1, -1 },
    { NULL, "[B", 0xc, 25, 24, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1OctetString;", 0xc, 6, 24, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgBouncycastleJcajceUtilJcaJceHelper:withOrgBouncycastleAsn1X509Certificate:withOrgBouncycastleAsn1X509BasicConstraints:withBooleanArray:withNSString:withByteArray:);
  methods[1].selector = @selector(getIssuerX500Name);
  methods[2].selector = @selector(getTBSCertificateNative);
  methods[3].selector = @selector(getSubjectX500Name);
  methods[4].selector = @selector(checkValidity);
  methods[5].selector = @selector(checkValidityWithJavaUtilDate:);
  methods[6].selector = @selector(getVersion);
  methods[7].selector = @selector(getSerialNumber);
  methods[8].selector = @selector(getIssuerDN);
  methods[9].selector = @selector(getIssuerX500Principal);
  methods[10].selector = @selector(getSubjectDN);
  methods[11].selector = @selector(getSubjectX500Principal);
  methods[12].selector = @selector(getNotBefore);
  methods[13].selector = @selector(getNotAfter);
  methods[14].selector = @selector(getTBSCertificate);
  methods[15].selector = @selector(getSignature);
  methods[16].selector = @selector(getSigAlgName);
  methods[17].selector = @selector(getSigAlgOID);
  methods[18].selector = @selector(getSigAlgParams);
  methods[19].selector = @selector(getIssuerUniqueID);
  methods[20].selector = @selector(getSubjectUniqueID);
  methods[21].selector = @selector(getKeyUsage);
  methods[22].selector = @selector(getExtendedKeyUsage);
  methods[23].selector = @selector(getBasicConstraints);
  methods[24].selector = @selector(getSubjectAlternativeNames);
  methods[25].selector = @selector(getIssuerAlternativeNames);
  methods[26].selector = @selector(getCriticalExtensionOIDs);
  methods[27].selector = @selector(getExtensionValueWithNSString:);
  methods[28].selector = @selector(getNonCriticalExtensionOIDs);
  methods[29].selector = @selector(hasUnsupportedCriticalExtension);
  methods[30].selector = @selector(getPublicKey);
  methods[31].selector = @selector(description);
  methods[32].selector = @selector(verifyWithJavaSecurityPublicKey:);
  methods[33].selector = @selector(verifyWithJavaSecurityPublicKey:withNSString:);
  methods[34].selector = @selector(verifyWithJavaSecurityPublicKey:withJavaSecurityProvider:);
  methods[35].selector = @selector(doVerifyWithJavaSecurityPublicKey:withOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator:);
  methods[36].selector = @selector(checkSignatureWithJavaSecurityPublicKey:withJavaSecuritySignature:withOrgBouncycastleAsn1ASN1Encodable:withByteArray:);
  methods[37].selector = @selector(isAlgIdEqualWithOrgBouncycastleAsn1X509AlgorithmIdentifier:withOrgBouncycastleAsn1X509AlgorithmIdentifier:);
  methods[38].selector = @selector(getAlternativeNamesWithOrgBouncycastleAsn1X509Certificate:withNSString:);
  methods[39].selector = @selector(getExtensionOctetsWithOrgBouncycastleAsn1X509Certificate:withNSString:);
  methods[40].selector = @selector(getExtensionValueWithOrgBouncycastleAsn1X509Certificate:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bcHelper_", "LOrgBouncycastleJcajceUtilJcaJceHelper;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "c_", "LOrgBouncycastleAsn1X509Certificate;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "basicConstraints_", "LOrgBouncycastleAsn1X509BasicConstraints;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "keyUsage_", "[Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sigAlgName_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sigAlgParams_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleJcajceUtilJcaJceHelper;LOrgBouncycastleAsn1X509Certificate;LOrgBouncycastleAsn1X509BasicConstraints;[ZLNSString;[B", "LJavaSecurityCertCertificateExpiredException;LJavaSecurityCertCertificateNotYetValidException;", "checkValidity", "LJavaUtilDate;", "LJavaSecurityCertCertificateEncodingException;", "LJavaSecurityCertCertificateParsingException;", "getExtensionValue", "LNSString;", "toString", "verify", "LJavaSecurityPublicKey;", "LJavaSecurityCertCertificateException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;LJavaSecurityNoSuchProviderException;LJavaSecuritySignatureException;", "LJavaSecurityPublicKey;LNSString;", "LJavaSecurityPublicKey;LJavaSecurityProvider;", "LJavaSecurityCertCertificateException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;LJavaSecuritySignatureException;", "doVerify", "LJavaSecurityPublicKey;LOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator;", "LJavaSecurityCertCertificateException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;LJavaSecuritySignatureException;LJavaSecurityNoSuchProviderException;", "checkSignature", "LJavaSecurityPublicKey;LJavaSecuritySignature;LOrgBouncycastleAsn1ASN1Encodable;[B", "LJavaSecurityCertCertificateException;LJavaSecurityNoSuchAlgorithmException;LJavaSecuritySignatureException;LJavaSecurityInvalidKeyException;", "isAlgIdEqual", "LOrgBouncycastleAsn1X509AlgorithmIdentifier;LOrgBouncycastleAsn1X509AlgorithmIdentifier;", "getAlternativeNames", "LOrgBouncycastleAsn1X509Certificate;LNSString;", "getExtensionOctets" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl = { "X509CertificateImpl", "org.bouncycastle.jcajce.provider.asymmetric.x509", ptrTable, methods, fields, 7, 0x400, 41, 6, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl;
}

@end


#line 83
void OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_initPackagePrivateWithOrgBouncycastleJcajceUtilJcaJceHelper_withOrgBouncycastleAsn1X509Certificate_withOrgBouncycastleAsn1X509BasicConstraints_withBooleanArray_withNSString_withByteArray_(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl *self, id<OrgBouncycastleJcajceUtilJcaJceHelper> bcHelper, OrgBouncycastleAsn1X509Certificate *c, OrgBouncycastleAsn1X509BasicConstraints *basicConstraints, IOSBooleanArray *keyUsage, NSString *sigAlgName, IOSByteArray *sigAlgParams) {
  JavaSecurityCertX509Certificate_init(self);
  
#line 86
  self->bcHelper_ = bcHelper;
  self->c_ = c;
  self->basicConstraints_ = basicConstraints;
  self->keyUsage_ = keyUsage;
  self->sigAlgName_ = sigAlgName;
  self->sigAlgParams_ = sigAlgParams;
}


#line 663
void OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_doVerifyWithJavaSecurityPublicKey_withOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator_(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl *self, id<JavaSecurityPublicKey> key, id<OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator> signatureCreator) {
  
#line 669
  if ([key isKindOfClass:[OrgBouncycastleJcajceCompositePublicKey class]] && OrgBouncycastleJcajceProviderAsymmetricX509X509SignatureUtil_isCompositeAlgorithmWithOrgBouncycastleAsn1X509AlgorithmIdentifier_([((OrgBouncycastleAsn1X509Certificate *) nil_chk(self->c_)) getSignatureAlgorithm])) {
    
#line 671
    id<JavaUtilList> pubKeys = [((OrgBouncycastleJcajceCompositePublicKey *) nil_chk(((OrgBouncycastleJcajceCompositePublicKey *) cast_chk(key, [OrgBouncycastleJcajceCompositePublicKey class])))) getPublicKeys];
    OrgBouncycastleAsn1ASN1Sequence *keySeq = OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(self->c_)) getSignatureAlgorithm])) getParameters]);
    OrgBouncycastleAsn1ASN1Sequence *sigSeq = OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([((OrgBouncycastleAsn1DERBitString *) nil_chk(OrgBouncycastleAsn1DERBitString_getInstanceWithId_([((OrgBouncycastleAsn1X509Certificate *) nil_chk(self->c_)) getSignature]))) getBytes]);
    
#line 675
    jboolean success = false;
    for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(pubKeys)) size]; i++) {
      
#line 678
      if ([pubKeys getWithInt:i] == nil) {
        
#line 680
        continue;
      }
      OrgBouncycastleAsn1X509AlgorithmIdentifier *sigAlg = OrgBouncycastleAsn1X509AlgorithmIdentifier_getInstanceWithId_([((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(keySeq)) getObjectAtWithInt:i]);
      NSString *sigName = OrgBouncycastleJcajceProviderAsymmetricX509X509SignatureUtil_getSignatureNameWithOrgBouncycastleAsn1X509AlgorithmIdentifier_(sigAlg);
      
#line 685
      JavaSecuritySignature *signature = [((id<OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator>) nil_chk(signatureCreator)) createSignatureWithNSString:sigName];
      
#line 687
      JavaSecuritySignatureException *sigExc = nil;
      
#line 689
      @try {
        
#line 691
        OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_withOrgBouncycastleAsn1ASN1Encodable_withByteArray_(self,
#line 692
        [pubKeys getWithInt:i], signature,
#line 693
        [((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(sigAlg)) getParameters],
#line 694
        [((OrgBouncycastleAsn1DERBitString *) nil_chk(OrgBouncycastleAsn1DERBitString_getInstanceWithId_([((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(sigSeq)) getObjectAtWithInt:i]))) getBytes]);
        success = true;
      }
      @catch (JavaSecuritySignatureException *e) {
        
#line 699
        sigExc = e;
      }
      
#line 702
      if (sigExc != nil) {
        
#line 704
        @throw sigExc;
      }
    }
    
#line 708
    if (!success) {
      
#line 710
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"no matching key found");
    }
  }
  else if (OrgBouncycastleJcajceProviderAsymmetricX509X509SignatureUtil_isCompositeAlgorithmWithOrgBouncycastleAsn1X509AlgorithmIdentifier_([((OrgBouncycastleAsn1X509Certificate *) nil_chk(self->c_)) getSignatureAlgorithm])) {
    
#line 715
    OrgBouncycastleAsn1ASN1Sequence *keySeq = OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(self->c_)) getSignatureAlgorithm])) getParameters]);
    OrgBouncycastleAsn1ASN1Sequence *sigSeq = OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([((OrgBouncycastleAsn1DERBitString *) nil_chk(OrgBouncycastleAsn1DERBitString_getInstanceWithId_([((OrgBouncycastleAsn1X509Certificate *) nil_chk(self->c_)) getSignature]))) getBytes]);
    
#line 718
    jboolean success = false;
    for (jint i = 0; i != [((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(sigSeq)) size]; i++) {
      
#line 721
      OrgBouncycastleAsn1X509AlgorithmIdentifier *sigAlg = OrgBouncycastleAsn1X509AlgorithmIdentifier_getInstanceWithId_([((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(keySeq)) getObjectAtWithInt:i]);
      NSString *sigName = OrgBouncycastleJcajceProviderAsymmetricX509X509SignatureUtil_getSignatureNameWithOrgBouncycastleAsn1X509AlgorithmIdentifier_(sigAlg);
      
#line 724
      JavaSecuritySignatureException *sigExc = nil;
      
#line 726
      @try {
        
#line 728
        JavaSecuritySignature *signature = [((id<OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator>) nil_chk(signatureCreator)) createSignatureWithNSString:sigName];
        
#line 730
        OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_withOrgBouncycastleAsn1ASN1Encodable_withByteArray_(self,
#line 731
        key, signature,
#line 732
        [((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(sigAlg)) getParameters],
#line 733
        [((OrgBouncycastleAsn1DERBitString *) nil_chk(OrgBouncycastleAsn1DERBitString_getInstanceWithId_([sigSeq getObjectAtWithInt:i]))) getBytes]);
        
#line 735
        success = true;
      }
      @catch (JavaSecurityInvalidKeyException *e) {
      }
      @catch (
#line 737
      JavaSecurityNoSuchAlgorithmException *e) {
      }
      @catch (
#line 741
      JavaSecuritySignatureException *e) {
        
#line 743
        sigExc = e;
      }
      
#line 746
      if (sigExc != nil) {
        
#line 748
        @throw sigExc;
      }
    }
    
#line 752
    if (!success) {
      
#line 754
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"no matching key found");
    }
  }
  else {
    
#line 759
    NSString *sigName = OrgBouncycastleJcajceProviderAsymmetricX509X509SignatureUtil_getSignatureNameWithOrgBouncycastleAsn1X509AlgorithmIdentifier_([((OrgBouncycastleAsn1X509Certificate *) nil_chk(self->c_)) getSignatureAlgorithm]);
    
#line 761
    JavaSecuritySignature *signature = [((id<OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator>) nil_chk(signatureCreator)) createSignatureWithNSString:sigName];
    
#line 763
    if ([key isKindOfClass:[OrgBouncycastleJcajceCompositePublicKey class]]) {
      
#line 765
      id<JavaUtilList> keys = [((OrgBouncycastleJcajceCompositePublicKey *) nil_chk(((OrgBouncycastleJcajceCompositePublicKey *) key))) getPublicKeys];
      
#line 767
      for (id<JavaSecurityPublicKey> __strong key2 in nil_chk(keys)) {
        @try {
          
#line 770
          OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_withOrgBouncycastleAsn1ASN1Encodable_withByteArray_(self, key2, signature,
#line 771
          [((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(self->c_)) getSignatureAlgorithm])) getParameters], [self getSignature]);
          return;
        }
        @catch (JavaSecurityInvalidKeyException *e) {
        }
      }
      
#line 780
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"no matching signature found");
    }
    else {
      
#line 784
      OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_withOrgBouncycastleAsn1ASN1Encodable_withByteArray_(self, key, signature,
#line 785
      [((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(self->c_)) getSignatureAlgorithm])) getParameters], [self getSignature]);
    }
  }
}


#line 790
void OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_withOrgBouncycastleAsn1ASN1Encodable_withByteArray_(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl *self, id<JavaSecurityPublicKey> key, JavaSecuritySignature *signature, id<OrgBouncycastleAsn1ASN1Encodable> params, IOSByteArray *sigBytes) {
  
#line 798
  if (!OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_isAlgIdEqualWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1X509AlgorithmIdentifier_(self, [((OrgBouncycastleAsn1X509Certificate *) nil_chk(self->c_)) getSignatureAlgorithm], [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(self->c_)) getTBSCertificate])) getSignature])) {
    
#line 800
    @throw new_JavaSecurityCertCertificateException_initWithNSString_(@"signature algorithm in TBS cert not same as outer cert");
  }
  
#line 804
  OrgBouncycastleJcajceProviderAsymmetricX509X509SignatureUtil_setSignatureParametersWithJavaSecuritySignature_withOrgBouncycastleAsn1ASN1Encodable_(signature, params);
  
#line 806
  [((JavaSecuritySignature *) nil_chk(signature)) initVerifyWithJavaSecurityPublicKey:key];
  
#line 808
  @try {
    
#line 810
    JavaIoOutputStream *sigOut = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_withInt_(OrgBouncycastleJcajceIoOutputStreamFactory_createStreamWithJavaSecuritySignature_(signature), 512);
    
#line 812
    [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(self->c_)) getTBSCertificate])) encodeToWithJavaIoOutputStream:sigOut withNSString:OrgBouncycastleAsn1ASN1Encoding_DER];
    
#line 814
    [sigOut close];
  }
  @catch (JavaIoIOException *e) {
    
#line 818
    @throw new_JavaSecurityCertCertificateEncodingException_initWithNSString_([e description]);
  }
  
#line 821
  if (![signature verifyWithByteArray:sigBytes]) {
    
#line 823
    @throw new_JavaSecuritySignatureException_initWithNSString_(@"certificate does not verify with supplied key");
  }
}


#line 827
jboolean OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_isAlgIdEqualWithOrgBouncycastleAsn1X509AlgorithmIdentifier_withOrgBouncycastleAsn1X509AlgorithmIdentifier_(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl *self, OrgBouncycastleAsn1X509AlgorithmIdentifier *id1, OrgBouncycastleAsn1X509AlgorithmIdentifier *id2) {
  
#line 829
  if (![((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(id1)) getAlgorithm])) equalsWithOrgBouncycastleAsn1ASN1Primitive:[((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(id2)) getAlgorithm]]) {
    
#line 831
    return false;
  }
  
#line 834
  if (OrgBouncycastleUtilProperties_isOverrideSetWithNSString_(@"org.bouncycastle.x509.allow_absent_equiv_NULL")) {
    
#line 836
    if ([id1 getParameters] == nil) {
      
#line 838
      if ([id2 getParameters] != nil && ![((id<OrgBouncycastleAsn1ASN1Encodable>) nil_chk([id2 getParameters])) isEqual:JreLoadStatic(OrgBouncycastleAsn1DERNull, INSTANCE)]) {
        
#line 840
        return false;
      }
      
#line 843
      return true;
    }
    
#line 846
    if ([id2 getParameters] == nil) {
      
#line 848
      if ([id1 getParameters] != nil && ![((id<OrgBouncycastleAsn1ASN1Encodable>) nil_chk([id1 getParameters])) isEqual:JreLoadStatic(OrgBouncycastleAsn1DERNull, INSTANCE)]) {
        
#line 850
        return false;
      }
      
#line 853
      return true;
    }
  }
  
#line 857
  if ([id1 getParameters] != nil) {
    
#line 859
    return [((id<OrgBouncycastleAsn1ASN1Encodable>) nil_chk([id1 getParameters])) isEqual:[id2 getParameters]];
  }
  
#line 862
  if ([id2 getParameters] != nil) {
    
#line 864
    return [((id<OrgBouncycastleAsn1ASN1Encodable>) nil_chk([id2 getParameters])) isEqual:[id1 getParameters]];
  }
  
#line 867
  return true;
}


#line 870
id<JavaUtilCollection> OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_getAlternativeNamesWithOrgBouncycastleAsn1X509Certificate_withNSString_(OrgBouncycastleAsn1X509Certificate *c, NSString *oid) {
  OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_initialize();
  
#line 873
  IOSByteArray *extOctets = OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_getExtensionOctetsWithOrgBouncycastleAsn1X509Certificate_withNSString_(c, oid);
  if (extOctets == nil) {
    
#line 876
    return nil;
  }
  @try {
    
#line 880
    id<JavaUtilCollection> temp = new_JavaUtilArrayList_init();
    id<JavaUtilEnumeration> it = [((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(extOctets))) getObjects];
    while ([((id<JavaUtilEnumeration>) nil_chk(it)) hasMoreElements]) {
      
#line 884
      OrgBouncycastleAsn1X509GeneralName *genName = OrgBouncycastleAsn1X509GeneralName_getInstanceWithId_([it nextElement]);
      id<JavaUtilList> list = new_JavaUtilArrayList_init();
      [list addWithId:OrgBouncycastleUtilIntegers_valueOfWithInt_([((OrgBouncycastleAsn1X509GeneralName *) nil_chk(genName)) getTagNo])];
      {
        
#line 906
        IOSByteArray *addrBytes;
        NSString *addr;
        
#line 887
        switch ([genName getTagNo]) {
          
#line 889
          case OrgBouncycastleAsn1X509GeneralName_ediPartyName:
          case OrgBouncycastleAsn1X509GeneralName_x400Address:
          case OrgBouncycastleAsn1X509GeneralName_otherName:
          [list addWithId:[genName getEncoded]];
          break;
          case OrgBouncycastleAsn1X509GeneralName_directoryName:
          [list addWithId:[((OrgBouncycastleAsn1X500X500Name *) nil_chk(OrgBouncycastleAsn1X500X500Name_getInstanceWithOrgBouncycastleAsn1X500X500NameStyle_withId_(JreLoadStatic(OrgBouncycastleAsn1X500StyleRFC4519Style, INSTANCE), [genName getName]))) description]];
          break;
          case OrgBouncycastleAsn1X509GeneralName_dNSName:
          case OrgBouncycastleAsn1X509GeneralName_rfc822Name:
          case OrgBouncycastleAsn1X509GeneralName_uniformResourceIdentifier:
          [list addWithId:[((id<OrgBouncycastleAsn1ASN1String>) nil_chk(((id<OrgBouncycastleAsn1ASN1String>) cast_check([genName getName], OrgBouncycastleAsn1ASN1String_class_())))) getString]];
          break;
          case OrgBouncycastleAsn1X509GeneralName_registeredID:
          [list addWithId:[((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(OrgBouncycastleAsn1ASN1ObjectIdentifier_getInstanceWithId_([genName getName]))) getId]];
          break;
          case OrgBouncycastleAsn1X509GeneralName_iPAddress:
          addrBytes = [((OrgBouncycastleAsn1ASN1OctetString *) nil_chk(OrgBouncycastleAsn1ASN1OctetString_getInstanceWithId_([genName getName]))) getOctets];
          
#line 908
          @try {
            
#line 910
            addr = [((JavaNetInetAddress *) nil_chk(JavaNetInetAddress_getByAddressWithByteArray_(addrBytes))) getHostAddress];
          }
          @catch (JavaNetUnknownHostException *e) {
            
#line 914
            continue;
          }
          [list addWithId:addr];
          break;
          default:
          @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Bad tag number: ", [genName getTagNo]));
        }
      }
      [temp addWithId:JavaUtilCollections_unmodifiableListWithJavaUtilList_(list)];
    }
    if ([temp size] == 0) {
      
#line 926
      return nil;
    }
    return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(temp);
  }
  @catch (JavaLangException *e) {
    
#line 932
    @throw new_JavaSecurityCertCertificateParsingException_initWithNSString_([e getMessage]);
  }
}


#line 936
IOSByteArray *OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_getExtensionOctetsWithOrgBouncycastleAsn1X509Certificate_withNSString_(OrgBouncycastleAsn1X509Certificate *c, NSString *oid) {
  OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_initialize();
  OrgBouncycastleAsn1ASN1OctetString *extValue = OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_getExtensionValueWithOrgBouncycastleAsn1X509Certificate_withNSString_(c, oid);
  if (nil != extValue) {
    
#line 941
    return [extValue getOctets];
  }
  return nil;
}


#line 946
OrgBouncycastleAsn1ASN1OctetString *OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_getExtensionValueWithOrgBouncycastleAsn1X509Certificate_withNSString_(OrgBouncycastleAsn1X509Certificate *c, NSString *oid) {
  OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_initialize();
  OrgBouncycastleAsn1X509Extensions *exts = [((OrgBouncycastleAsn1X509TBSCertificate *) nil_chk([((OrgBouncycastleAsn1X509Certificate *) nil_chk(c)) getTBSCertificate])) getExtensions];
  if (nil != exts) {
    
#line 951
    OrgBouncycastleAsn1X509Extension *ext = [exts getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:new_OrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_(oid)];
    if (nil != ext) {
      
#line 954
      return [ext getExtnValue];
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateImpl.java"


#line 588
@implementation OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1


#line 588
- (instancetype)initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl:(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl *)outer$ {
  OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_(self, outer$);
  return self;
}


#line 589
- (JavaSecuritySignature *)createSignatureWithNSString:(NSString *)sigName {
  
#line 593
  @try {
    
#line 595
    return JreRetainedLocalValue([((id<OrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(this$0_->bcHelper_)) createSignatureWithNSString:sigName]);
  }
  @catch (JavaLangException *e) {
    
#line 599
    return JavaSecuritySignature_getInstanceWithNSString_(sigName);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySignature;", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl:);
  methods[1].selector = @selector(createSignatureWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl;", "createSignature", "LNSString;", "LJavaSecurityNoSuchAlgorithmException;", "verifyWithJavaSecurityPublicKey:" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1 = { "", "org.bouncycastle.jcajce.provider.asymmetric.x509", ptrTable, methods, fields, 7, 0x8000, 2, 1, 0, -1, 4, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1;
}

@end


#line 588
void OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1 *self, OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}


#line 588
OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1 *new_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl *outer$) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1, initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_, outer$)
}


#line 588
OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1 *create_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl *outer$) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_1, initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_, outer$)
}

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateImpl.java"


#line 613
@implementation OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2


#line 613
- (instancetype)initWithNSString:(NSString *)capture$0 {
  OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2_initWithNSString_(self, capture$0);
  return self;
}


#line 614
- (JavaSecuritySignature *)createSignatureWithNSString:(NSString *)sigName {
  
#line 618
  if (val$sigProvider_ != nil) {
    
#line 620
    return JavaSecuritySignature_getInstanceWithNSString_withNSString_(sigName, val$sigProvider_);
  }
  else {
    
#line 624
    return JavaSecuritySignature_getInstanceWithNSString_(sigName);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySignature;", 0x1, 1, 0, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(createSignatureWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$sigProvider_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "createSignature", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityNoSuchProviderException;", "LOrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl;", "verifyWithJavaSecurityPublicKey:withNSString:" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2 = { "", "org.bouncycastle.jcajce.provider.asymmetric.x509", ptrTable, methods, fields, 7, 0x8000, 2, 1, 3, -1, 4, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2;
}

@end


#line 613
void OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2_initWithNSString_(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2 *self, NSString *capture$0) {
  self->val$sigProvider_ = capture$0;
  NSObject_init(self);
}


#line 613
OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2 *new_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2, initWithNSString_, capture$0)
}


#line 613
OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2 *create_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_2, initWithNSString_, capture$0)
}

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateImpl.java"


#line 640
@implementation OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3


#line 640
- (instancetype)initWithJavaSecurityProvider:(JavaSecurityProvider *)capture$0 {
  OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3_initWithJavaSecurityProvider_(self, capture$0);
  return self;
}


#line 641
- (JavaSecuritySignature *)createSignatureWithNSString:(NSString *)sigName {
  
#line 645
  if (val$sigProvider_ != nil) {
    
#line 647
    return JavaSecuritySignature_getInstanceWithNSString_withJavaSecurityProvider_(sigName, val$sigProvider_);
  }
  else {
    
#line 651
    return JavaSecuritySignature_getInstanceWithNSString_(sigName);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySignature;", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaSecurityProvider:);
  methods[1].selector = @selector(createSignatureWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$sigProvider_", "LJavaSecurityProvider;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecurityProvider;", "createSignature", "LNSString;", "LJavaSecurityNoSuchAlgorithmException;", "LOrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl;", "verifyWithJavaSecurityPublicKey:withJavaSecurityProvider:" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3 = { "", "org.bouncycastle.jcajce.provider.asymmetric.x509", ptrTable, methods, fields, 7, 0x8000, 2, 1, 4, -1, 5, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3;
}

@end


#line 640
void OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3_initWithJavaSecurityProvider_(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3 *self, JavaSecurityProvider *capture$0) {
  self->val$sigProvider_ = capture$0;
  NSObject_init(self);
}


#line 640
OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3 *new_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3_initWithJavaSecurityProvider_(JavaSecurityProvider *capture$0) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3, initWithJavaSecurityProvider_, capture$0)
}


#line 640
OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3 *create_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3_initWithJavaSecurityProvider_(JavaSecurityProvider *capture$0) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_3, initWithJavaSecurityProvider_, capture$0)
}
