//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/util/ECUtil.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil")
#ifdef RESTRICT_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil
#define INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil 0
#else
#define INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil 1
#endif
#undef RESTRICT_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil

#if !defined (OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_) && (INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil || defined(INCLUDE_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil))
#define OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_

@class IOSIntArray;
@class JavaMathBigInteger;
@class OrgBouncycastleAsn1ASN1ObjectIdentifier;
@class OrgBouncycastleAsn1X9X962Parameters;
@class OrgBouncycastleAsn1X9X9ECParameters;
@class OrgBouncycastleCryptoParamsAsymmetricKeyParameter;
@class OrgBouncycastleCryptoParamsECDomainParameters;
@class OrgBouncycastleJceSpecECParameterSpec;
@class OrgBouncycastleMathEcECPoint;
@protocol JavaSecurityPrivateKey;
@protocol JavaSecurityPublicKey;
@protocol JavaSecuritySpecAlgorithmParameterSpec;
@protocol OrgBouncycastleJcajceProviderConfigProviderConfiguration;

/*!
 @brief utility class for converting jce/jca ECDSA, ECDH, and ECDHC
  objects into their org.bouncycastle.crypto counterparts.
 */
@interface OrgBouncycastleJcajceProviderAsymmetricUtilECUtil : NSObject

#pragma mark Public

- (instancetype)init;

+ (NSString *)generateKeyFingerprintWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)publicPoint
                           withOrgBouncycastleJceSpecECParameterSpec:(OrgBouncycastleJceSpecECParameterSpec *)spec;

+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePrivateKeyParameterWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key;

+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePublicKeyParameterWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key;

+ (NSString *)getCurveNameWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)oid;

+ (OrgBouncycastleCryptoParamsECDomainParameters *)getDomainParametersWithOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration
                                                                                         withOrgBouncycastleJceSpecECParameterSpec:(OrgBouncycastleJceSpecECParameterSpec *)params;

+ (OrgBouncycastleCryptoParamsECDomainParameters *)getDomainParametersWithOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration
                                                                                           withOrgBouncycastleAsn1X9X962Parameters:(OrgBouncycastleAsn1X9X962Parameters *)params;

+ (OrgBouncycastleAsn1X9X9ECParameters *)getNamedCurveByNameWithNSString:(NSString *)curveName;

+ (OrgBouncycastleAsn1X9X9ECParameters *)getNamedCurveByOidWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)oid;

+ (OrgBouncycastleAsn1ASN1ObjectIdentifier *)getNamedCurveOidWithOrgBouncycastleJceSpecECParameterSpec:(OrgBouncycastleJceSpecECParameterSpec *)ecParameterSpec;

+ (OrgBouncycastleAsn1ASN1ObjectIdentifier *)getNamedCurveOidWithNSString:(NSString *)curveName;

+ (NSString *)getNameFromWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)paramSpec;

+ (jint)getOrderBitLengthWithOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration
                                                               withJavaMathBigInteger:(JavaMathBigInteger *)order
                                                               withJavaMathBigInteger:(JavaMathBigInteger *)privateValue;

+ (NSString *)privateKeyToStringWithNSString:(NSString *)algorithm
                      withJavaMathBigInteger:(JavaMathBigInteger *)d
   withOrgBouncycastleJceSpecECParameterSpec:(OrgBouncycastleJceSpecECParameterSpec *)spec;

+ (NSString *)publicKeyToStringWithNSString:(NSString *)algorithm
           withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)q
  withOrgBouncycastleJceSpecECParameterSpec:(OrgBouncycastleJceSpecECParameterSpec *)spec;

#pragma mark Package-Private

/*!
 @brief Returns a sorted array of middle terms of the reduction polynomial.
 @param k The unsorted array of middle terms of the reduction polynomial  of length 1 or 3.
 @return the sorted array of middle terms of the reduction polynomial.
  This array always has length 3.
 */
+ (IOSIntArray *)convertMidTermsWithIntArray:(IOSIntArray *)k;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleJcajceProviderAsymmetricUtilECUtil)

FOUNDATION_EXPORT void OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_init(OrgBouncycastleJcajceProviderAsymmetricUtilECUtil *self);

FOUNDATION_EXPORT OrgBouncycastleJcajceProviderAsymmetricUtilECUtil *new_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgBouncycastleJcajceProviderAsymmetricUtilECUtil *create_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_init(void);

FOUNDATION_EXPORT IOSIntArray *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_convertMidTermsWithIntArray_(IOSIntArray *k);

FOUNDATION_EXPORT OrgBouncycastleCryptoParamsECDomainParameters *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getDomainParametersWithOrgBouncycastleJcajceProviderConfigProviderConfiguration_withOrgBouncycastleJceSpecECParameterSpec_(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration, OrgBouncycastleJceSpecECParameterSpec *params);

FOUNDATION_EXPORT OrgBouncycastleCryptoParamsECDomainParameters *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getDomainParametersWithOrgBouncycastleJcajceProviderConfigProviderConfiguration_withOrgBouncycastleAsn1X9X962Parameters_(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration, OrgBouncycastleAsn1X9X962Parameters *params);

FOUNDATION_EXPORT OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> key);

FOUNDATION_EXPORT OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(id<JavaSecurityPrivateKey> key);

FOUNDATION_EXPORT jint OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getOrderBitLengthWithOrgBouncycastleJcajceProviderConfigProviderConfiguration_withJavaMathBigInteger_withJavaMathBigInteger_(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration, JavaMathBigInteger *order, JavaMathBigInteger *privateValue);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1ObjectIdentifier *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNamedCurveOidWithNSString_(NSString *curveName);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1ObjectIdentifier *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNamedCurveOidWithOrgBouncycastleJceSpecECParameterSpec_(OrgBouncycastleJceSpecECParameterSpec *ecParameterSpec);

FOUNDATION_EXPORT OrgBouncycastleAsn1X9X9ECParameters *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNamedCurveByOidWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(OrgBouncycastleAsn1ASN1ObjectIdentifier *oid);

FOUNDATION_EXPORT OrgBouncycastleAsn1X9X9ECParameters *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNamedCurveByNameWithNSString_(NSString *curveName);

FOUNDATION_EXPORT NSString *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getCurveNameWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(OrgBouncycastleAsn1ASN1ObjectIdentifier *oid);

FOUNDATION_EXPORT NSString *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_privateKeyToStringWithNSString_withJavaMathBigInteger_withOrgBouncycastleJceSpecECParameterSpec_(NSString *algorithm, JavaMathBigInteger *d, OrgBouncycastleJceSpecECParameterSpec *spec);

FOUNDATION_EXPORT NSString *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_publicKeyToStringWithNSString_withOrgBouncycastleMathEcECPoint_withOrgBouncycastleJceSpecECParameterSpec_(NSString *algorithm, OrgBouncycastleMathEcECPoint *q, OrgBouncycastleJceSpecECParameterSpec *spec);

FOUNDATION_EXPORT NSString *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_generateKeyFingerprintWithOrgBouncycastleMathEcECPoint_withOrgBouncycastleJceSpecECParameterSpec_(OrgBouncycastleMathEcECPoint *publicPoint, OrgBouncycastleJceSpecECParameterSpec *spec);

FOUNDATION_EXPORT NSString *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNameFromWithJavaSecuritySpecAlgorithmParameterSpec_(id<JavaSecuritySpecAlgorithmParameterSpec> paramSpec);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleJcajceProviderAsymmetricUtilECUtil)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil")
