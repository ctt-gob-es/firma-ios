//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl")
#ifdef RESTRICT_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl
#define INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl 0
#else
#define INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl 1
#endif
#undef RESTRICT_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl

#if !defined (OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_) && (INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl || defined(INCLUDE_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl))
#define OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_

#define RESTRICT_JavaSecurityCertX509CRL 1
#define INCLUDE_JavaSecurityCertX509CRL 1
#include "java/security/cert/X509CRL.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class JavaSecurityCertCertificate;
@class JavaSecurityCertX509CRLEntry;
@class JavaSecurityProvider;
@class JavaUtilDate;
@class JavaxSecurityAuthX500X500Principal;
@class OrgBouncycastleAsn1ASN1OctetString;
@class OrgBouncycastleAsn1X509CertificateList;
@protocol JavaSecurityPrincipal;
@protocol JavaSecurityPublicKey;
@protocol JavaUtilSet;
@protocol OrgBouncycastleJcajceUtilJcaJceHelper;

/*!
 @brief The following extensions are listed in RFC 2459 as relevant to CRLs
 <p>
  Authority Key Identifier
  Issuer Alternative Name
  CRL Number
  Delta CRL Indicator (critical)
  Issuing Distribution Point (critical)
 */
@interface OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl : JavaSecurityCertX509CRL {
 @public
  id<OrgBouncycastleJcajceUtilJcaJceHelper> bcHelper_;
  OrgBouncycastleAsn1X509CertificateList *c_;
  NSString *sigAlgName_;
  IOSByteArray *sigAlgParams_;
  jboolean isIndirect_;
}

#pragma mark Public

- (id<JavaUtilSet>)getCriticalExtensionOIDs;

- (IOSByteArray *)getExtensionValueWithNSString:(NSString *)oid;

- (id<JavaSecurityPrincipal>)getIssuerDN;

- (JavaxSecurityAuthX500X500Principal *)getIssuerX500Principal;

- (JavaUtilDate *)getNextUpdate;

- (id<JavaUtilSet>)getNonCriticalExtensionOIDs;

- (JavaSecurityCertX509CRLEntry *)getRevokedCertificateWithJavaMathBigInteger:(JavaMathBigInteger *)serialNumber;

- (id<JavaUtilSet>)getRevokedCertificates;

- (NSString *)getSigAlgName;

- (NSString *)getSigAlgOID;

- (IOSByteArray *)getSigAlgParams;

- (IOSByteArray *)getSignature;

- (IOSByteArray *)getTBSCertList;

- (JavaUtilDate *)getThisUpdate;

- (jint)getVersion;

/*!
 @brief Will return true if any extensions are present and marked
  as critical as we currently dont handle any extensions!
 */
- (jboolean)hasUnsupportedCriticalExtension;

/*!
 @brief Checks whether the given certificate is on this CRL.
 @param cert the certificate to check for.
 @return true if the given certificate is on this CRL,
  false otherwise.
 */
- (jboolean)isRevokedWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert;

/*!
 @brief Returns a string representation of this CRL.
 @return a string representation of this CRL.
 */
- (NSString *)description;

- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key;

- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
               withJavaSecurityProvider:(JavaSecurityProvider *)sigProvider;

- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                           withNSString:(NSString *)sigProvider;

#pragma mark Protected

+ (IOSByteArray *)getExtensionOctetsWithOrgBouncycastleAsn1X509CertificateList:(OrgBouncycastleAsn1X509CertificateList *)c
                                                                  withNSString:(NSString *)oid;

+ (OrgBouncycastleAsn1ASN1OctetString *)getExtensionValueWithOrgBouncycastleAsn1X509CertificateList:(OrgBouncycastleAsn1X509CertificateList *)c
                                                                                       withNSString:(NSString *)oid;

#pragma mark Package-Private

- (instancetype)initPackagePrivateWithOrgBouncycastleJcajceUtilJcaJceHelper:(id<OrgBouncycastleJcajceUtilJcaJceHelper>)bcHelper
                                 withOrgBouncycastleAsn1X509CertificateList:(OrgBouncycastleAsn1X509CertificateList *)c
                                                               withNSString:(NSString *)sigAlgName
                                                              withByteArray:(IOSByteArray *)sigAlgParams
                                                                withBoolean:(jboolean)isIndirect;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl)

J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl, bcHelper_, id<OrgBouncycastleJcajceUtilJcaJceHelper>)
J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl, c_, OrgBouncycastleAsn1X509CertificateList *)
J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl, sigAlgName_, NSString *)
J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl, sigAlgParams_, IOSByteArray *)

FOUNDATION_EXPORT void OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_initPackagePrivateWithOrgBouncycastleJcajceUtilJcaJceHelper_withOrgBouncycastleAsn1X509CertificateList_withNSString_withByteArray_withBoolean_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *self, id<OrgBouncycastleJcajceUtilJcaJceHelper> bcHelper, OrgBouncycastleAsn1X509CertificateList *c, NSString *sigAlgName, IOSByteArray *sigAlgParams, jboolean isIndirect);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_getExtensionOctetsWithOrgBouncycastleAsn1X509CertificateList_withNSString_(OrgBouncycastleAsn1X509CertificateList *c, NSString *oid);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1OctetString *OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_getExtensionValueWithOrgBouncycastleAsn1X509CertificateList_withNSString_(OrgBouncycastleAsn1X509CertificateList *c, NSString *oid);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl")
