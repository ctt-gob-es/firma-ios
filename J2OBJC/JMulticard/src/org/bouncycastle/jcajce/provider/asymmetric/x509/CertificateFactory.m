//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/x509/CertificateFactory.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Throwable.h"
#include "java/security/cert/CRL.h"
#include "java/security/cert/CRLException.h"
#include "java/security/cert/CertPath.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateException.h"
#include "java/security/cert/CertificateFactorySpi.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1InputStream.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1Sequence.h"
#include "org/bouncycastle/asn1/ASN1Set.h"
#include "org/bouncycastle/asn1/ASN1TaggedObject.h"
#include "org/bouncycastle/asn1/pkcs/PKCSObjectIdentifiers.h"
#include "org/bouncycastle/asn1/pkcs/SignedData.h"
#include "org/bouncycastle/asn1/x509/Certificate.h"
#include "org/bouncycastle/asn1/x509/CertificateList.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/x509/CertificateFactory.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/x509/PEMUtil.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/x509/PKIXCertPath.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLObject.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateObject.h"
#include "org/bouncycastle/jcajce/util/BCJcaJceHelper.h"
#include "org/bouncycastle/jcajce/util/JcaJceHelper.h"
#include "org/bouncycastle/util/io/Streams.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/jcajce/provider/asymmetric/x509/CertificateFactory must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory () {
 @public
  id<OrgBouncycastleJcajceUtilJcaJceHelper> bcHelper_;
  OrgBouncycastleAsn1ASN1Set *sData_;
  jint sDataObjectCount_;
  JavaIoInputStream *currentStream_;
  OrgBouncycastleAsn1ASN1Set *sCrlData_;
  jint sCrlDataObjectCount_;
  JavaIoInputStream *currentCrlStream_;
}

- (JavaSecurityCertCertificate *)readDERCertificateWithOrgBouncycastleAsn1ASN1InputStream:(OrgBouncycastleAsn1ASN1InputStream *)dIn;

- (JavaSecurityCertCertificate *)readPEMCertificateWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                                             withBoolean:(jboolean)isFirst;

- (JavaSecurityCertCertificate *)getCertificateWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq;

- (JavaSecurityCertCertificate *)getCertificate;

- (JavaSecurityCertCRL *)readPEMCRLWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                             withBoolean:(jboolean)isFirst;

- (JavaSecurityCertCRL *)readDERCRLWithOrgBouncycastleAsn1ASN1InputStream:(OrgBouncycastleAsn1ASN1InputStream *)aIn;

- (JavaSecurityCertCRL *)getCRLWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq;

- (JavaSecurityCertCRL *)getCRL;

- (JavaSecurityCertCertificate *)doGenerateCertificateWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                                                withBoolean:(jboolean)isFirst;

/*!
 @brief Generates a certificate revocation list (CRL) object and initializes
  it with the data read from the input stream inStream.
 */
- (JavaSecurityCertCRL *)doGenerateCRLWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                                withBoolean:(jboolean)isFirst;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory, bcHelper_, id<OrgBouncycastleJcajceUtilJcaJceHelper>)
J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory, sData_, OrgBouncycastleAsn1ASN1Set *)
J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory, currentStream_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory, sCrlData_, OrgBouncycastleAsn1ASN1Set *)
J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory, currentCrlStream_, JavaIoInputStream *)

inline OrgBouncycastleJcajceProviderAsymmetricX509PEMUtil *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_get_PEM_CERT_PARSER(void);
static OrgBouncycastleJcajceProviderAsymmetricX509PEMUtil *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_PEM_CERT_PARSER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory, PEM_CERT_PARSER, OrgBouncycastleJcajceProviderAsymmetricX509PEMUtil *)

inline OrgBouncycastleJcajceProviderAsymmetricX509PEMUtil *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_get_PEM_CRL_PARSER(void);
static OrgBouncycastleJcajceProviderAsymmetricX509PEMUtil *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_PEM_CRL_PARSER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory, PEM_CRL_PARSER, OrgBouncycastleJcajceProviderAsymmetricX509PEMUtil *)

inline OrgBouncycastleJcajceProviderAsymmetricX509PEMUtil *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_get_PEM_PKCS7_PARSER(void);
static OrgBouncycastleJcajceProviderAsymmetricX509PEMUtil *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_PEM_PKCS7_PARSER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory, PEM_PKCS7_PARSER, OrgBouncycastleJcajceProviderAsymmetricX509PEMUtil *)

__attribute__((unused)) static JavaSecurityCertCertificate *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_readDERCertificateWithOrgBouncycastleAsn1ASN1InputStream_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self, OrgBouncycastleAsn1ASN1InputStream *dIn);

__attribute__((unused)) static JavaSecurityCertCertificate *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_readPEMCertificateWithJavaIoInputStream_withBoolean_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self, JavaIoInputStream *inArg, jboolean isFirst);

__attribute__((unused)) static JavaSecurityCertCertificate *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCertificateWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self, OrgBouncycastleAsn1ASN1Sequence *seq);

__attribute__((unused)) static JavaSecurityCertCertificate *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCertificate(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self);

__attribute__((unused)) static JavaSecurityCertCRL *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_readPEMCRLWithJavaIoInputStream_withBoolean_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self, JavaIoInputStream *inArg, jboolean isFirst);

__attribute__((unused)) static JavaSecurityCertCRL *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_readDERCRLWithOrgBouncycastleAsn1ASN1InputStream_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self, OrgBouncycastleAsn1ASN1InputStream *aIn);

__attribute__((unused)) static JavaSecurityCertCRL *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCRLWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self, OrgBouncycastleAsn1ASN1Sequence *seq);

__attribute__((unused)) static JavaSecurityCertCRL *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCRL(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self);

__attribute__((unused)) static JavaSecurityCertCertificate *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_doGenerateCertificateWithJavaIoInputStream_withBoolean_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self, JavaIoInputStream *inArg, jboolean isFirst);

__attribute__((unused)) static JavaSecurityCertCRL *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_doGenerateCRLWithJavaIoInputStream_withBoolean_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self, JavaIoInputStream *inArg, jboolean isFirst);

@interface OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException : JavaSecurityCertCertificateException {
 @public
  JavaLangThrowable *cause_ExCertificateException_;
}

- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)cause;

- (instancetype)initWithNSString:(NSString *)msg
           withJavaLangThrowable:(JavaLangThrowable *)cause;

- (JavaLangThrowable *)getCause;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException)

J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException, cause_ExCertificateException_, JavaLangThrowable *)

__attribute__((unused)) static void OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException_initWithJavaLangThrowable_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException *self, JavaLangThrowable *cause);

__attribute__((unused)) static OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException *new_OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException_initWithJavaLangThrowable_(JavaLangThrowable *cause) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException *create_OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException_initWithJavaLangThrowable_(JavaLangThrowable *cause);

__attribute__((unused)) static void OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException_initWithNSString_withJavaLangThrowable_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException *self, NSString *msg, JavaLangThrowable *cause);

__attribute__((unused)) static OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException *new_OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException *create_OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/x509/CertificateFactory.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory)


#line 39
@implementation OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 39
- (instancetype)init {
  OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 56
- (JavaSecurityCertCertificate *)readDERCertificateWithOrgBouncycastleAsn1ASN1InputStream:(OrgBouncycastleAsn1ASN1InputStream *)dIn {
  return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_readDERCertificateWithOrgBouncycastleAsn1ASN1InputStream_(self, dIn);
}


#line 63
- (JavaSecurityCertCertificate *)readPEMCertificateWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                                             withBoolean:(jboolean)isFirst {
  return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_readPEMCertificateWithJavaIoInputStream_withBoolean_(self, inArg, isFirst);
}


#line 71
- (JavaSecurityCertCertificate *)getCertificateWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq {
  return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCertificateWithOrgBouncycastleAsn1ASN1Sequence_(self, seq);
}


#line 95
- (JavaSecurityCertCertificate *)getCertificate {
  return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCertificate(self);
}


#line 116
- (JavaSecurityCertCRL *)createCRLWithOrgBouncycastleAsn1X509CertificateList:(OrgBouncycastleAsn1X509CertificateList *)c {
  
#line 119
  return new_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLObject_initPackagePrivateWithOrgBouncycastleJcajceUtilJcaJceHelper_withOrgBouncycastleAsn1X509CertificateList_(bcHelper_, c);
}

- (JavaSecurityCertCRL *)readPEMCRLWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                             withBoolean:(jboolean)isFirst {
  return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_readPEMCRLWithJavaIoInputStream_withBoolean_(self, inArg, isFirst);
}


#line 130
- (JavaSecurityCertCRL *)readDERCRLWithOrgBouncycastleAsn1ASN1InputStream:(OrgBouncycastleAsn1ASN1InputStream *)aIn {
  return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_readDERCRLWithOrgBouncycastleAsn1ASN1InputStream_(self, aIn);
}


#line 137
- (JavaSecurityCertCRL *)getCRLWithOrgBouncycastleAsn1ASN1Sequence:(OrgBouncycastleAsn1ASN1Sequence *)seq {
  return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCRLWithOrgBouncycastleAsn1ASN1Sequence_(self, seq);
}


#line 161
- (JavaSecurityCertCRL *)getCRL {
  return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCRL(self);
}


#line 178
- (JavaSecurityCertCertificate *)engineGenerateCertificateWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  
#line 183
  return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_doGenerateCertificateWithJavaIoInputStream_withBoolean_(self, inArg, true);
}


#line 186
- (JavaSecurityCertCertificate *)doGenerateCertificateWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                                                withBoolean:(jboolean)isFirst {
  return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_doGenerateCertificateWithJavaIoInputStream_withBoolean_(self, inArg, isFirst);
}


#line 259
- (id<JavaUtilCollection>)engineGenerateCertificatesWithJavaIoInputStream:(JavaIoInputStream *)inStream {
  
#line 264
  JavaSecurityCertCertificate *cert;
  JavaIoBufferedInputStream *in = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(inStream);
  
#line 267
  id<JavaUtilList> certs = new_JavaUtilArrayList_init();
  
#line 270
  while ((cert = OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_doGenerateCertificateWithJavaIoInputStream_withBoolean_(self, in, [certs isEmpty])) != nil) {
    
#line 272
    [certs addWithId:cert];
  }
  
#line 275
  return certs;
}


#line 282
- (JavaSecurityCertCRL *)engineGenerateCRLWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  
#line 287
  return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_doGenerateCRLWithJavaIoInputStream_withBoolean_(self, inArg, true);
}


#line 294
- (JavaSecurityCertCRL *)doGenerateCRLWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                                withBoolean:(jboolean)isFirst {
  return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_doGenerateCRLWithJavaIoInputStream_withBoolean_(self, inArg, isFirst);
}


#line 376
- (id<JavaUtilCollection>)engineGenerateCRLsWithJavaIoInputStream:(JavaIoInputStream *)inStream {
  
#line 381
  JavaSecurityCertCRL *crl;
  id<JavaUtilList> crls = new_JavaUtilArrayList_init();
  JavaIoBufferedInputStream *in = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(inStream);
  
#line 386
  while ((crl = OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_doGenerateCRLWithJavaIoInputStream_withBoolean_(self, in, [crls isEmpty])) != nil) {
    
#line 388
    [crls addWithId:crl];
  }
  
#line 391
  return crls;
}

- (id<JavaUtilIterator>)engineGetCertPathEncodings {
  
#line 397
  return [((id<JavaUtilList>) nil_chk(JreLoadStatic(OrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath, certPathEncodings))) iterator];
}

- (JavaSecurityCertCertPath *)engineGenerateCertPathWithJavaIoInputStream:(JavaIoInputStream *)inStream {
  
#line 405
  return [self engineGenerateCertPathWithJavaIoInputStream:inStream withNSString:@"PkiPath"];
}


#line 408
- (JavaSecurityCertCertPath *)engineGenerateCertPathWithJavaIoInputStream:(JavaIoInputStream *)inStream
                                                             withNSString:(NSString *)encoding {
  
#line 414
  return new_OrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaIoInputStream_withNSString_(inStream, encoding);
}


#line 417
- (JavaSecurityCertCertPath *)engineGenerateCertPathWithJavaUtilList:(id<JavaUtilList>)certificates {
  
#line 422
  id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(certificates)) iterator];
  id obj;
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    
#line 426
    obj = [iter next];
    if (obj != nil) {
      
#line 429
      if (!([obj isKindOfClass:[JavaSecurityCertX509Certificate class]])) {
        
#line 431
        @throw new_JavaSecurityCertCertificateException_initWithNSString_(JreStrcat("$$", @"list contains non X509Certificate object while creating CertPath\n", [obj description]));
      }
    }
  }
  return new_OrgBouncycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaUtilList_(certificates);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertificate;", 0x2, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertificate;", 0x2, 3, 4, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertificate;", 0x2, 5, 6, 7, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertificate;", 0x2, -1, -1, 7, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCRL;", 0x4, 8, 9, 10, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCRL;", 0x2, 11, 4, 12, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCRL;", 0x2, 13, 1, 12, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCRL;", 0x2, 14, 6, 10, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCRL;", 0x2, -1, -1, 10, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertificate;", 0x1, 15, 16, 17, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertificate;", 0x2, 18, 4, 17, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 19, 16, 17, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCRL;", 0x1, 20, 16, 10, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCRL;", 0x2, 21, 4, 10, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 22, 16, 10, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPath;", 0x1, 23, 16, 17, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPath;", 0x1, 23, 24, 17, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPath;", 0x1, 23, 25, 17, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readDERCertificateWithOrgBouncycastleAsn1ASN1InputStream:);
  methods[2].selector = @selector(readPEMCertificateWithJavaIoInputStream:withBoolean:);
  methods[3].selector = @selector(getCertificateWithOrgBouncycastleAsn1ASN1Sequence:);
  methods[4].selector = @selector(getCertificate);
  methods[5].selector = @selector(createCRLWithOrgBouncycastleAsn1X509CertificateList:);
  methods[6].selector = @selector(readPEMCRLWithJavaIoInputStream:withBoolean:);
  methods[7].selector = @selector(readDERCRLWithOrgBouncycastleAsn1ASN1InputStream:);
  methods[8].selector = @selector(getCRLWithOrgBouncycastleAsn1ASN1Sequence:);
  methods[9].selector = @selector(getCRL);
  methods[10].selector = @selector(engineGenerateCertificateWithJavaIoInputStream:);
  methods[11].selector = @selector(doGenerateCertificateWithJavaIoInputStream:withBoolean:);
  methods[12].selector = @selector(engineGenerateCertificatesWithJavaIoInputStream:);
  methods[13].selector = @selector(engineGenerateCRLWithJavaIoInputStream:);
  methods[14].selector = @selector(doGenerateCRLWithJavaIoInputStream:withBoolean:);
  methods[15].selector = @selector(engineGenerateCRLsWithJavaIoInputStream:);
  methods[16].selector = @selector(engineGetCertPathEncodings);
  methods[17].selector = @selector(engineGenerateCertPathWithJavaIoInputStream:);
  methods[18].selector = @selector(engineGenerateCertPathWithJavaIoInputStream:withNSString:);
  methods[19].selector = @selector(engineGenerateCertPathWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bcHelper_", "LOrgBouncycastleJcajceUtilJcaJceHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "PEM_CERT_PARSER", "LOrgBouncycastleJcajceProviderAsymmetricX509PEMUtil;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "PEM_CRL_PARSER", "LOrgBouncycastleJcajceProviderAsymmetricX509PEMUtil;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "PEM_PKCS7_PARSER", "LOrgBouncycastleJcajceProviderAsymmetricX509PEMUtil;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "sData_", "LOrgBouncycastleAsn1ASN1Set;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sDataObjectCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentStream_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sCrlData_", "LOrgBouncycastleAsn1ASN1Set;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sCrlDataObjectCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentCrlStream_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "readDERCertificate", "LOrgBouncycastleAsn1ASN1InputStream;", "LJavaIoIOException;LJavaSecurityCertCertificateParsingException;", "readPEMCertificate", "LJavaIoInputStream;Z", "getCertificate", "LOrgBouncycastleAsn1ASN1Sequence;", "LJavaSecurityCertCertificateParsingException;", "createCRL", "LOrgBouncycastleAsn1X509CertificateList;", "LJavaSecurityCertCRLException;", "readPEMCRL", "LJavaIoIOException;LJavaSecurityCertCRLException;", "readDERCRL", "getCRL", "engineGenerateCertificate", "LJavaIoInputStream;", "LJavaSecurityCertCertificateException;", "doGenerateCertificate", "engineGenerateCertificates", "engineGenerateCRL", "doGenerateCRL", "engineGenerateCRLs", "engineGenerateCertPath", "LJavaIoInputStream;LNSString;", "LJavaUtilList;", &OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_PEM_CERT_PARSER, &OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_PEM_CRL_PARSER, &OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_PEM_PKCS7_PARSER, "LOrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException;" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory = { "CertificateFactory", "org.bouncycastle.jcajce.provider.asymmetric.x509", ptrTable, methods, fields, 7, 0x1, 20, 10, -1, 29, -1, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory;
}

+ (void)initialize {
  if (self == [OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory class]) {
    OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_PEM_CERT_PARSER = new_OrgBouncycastleJcajceProviderAsymmetricX509PEMUtil_initPackagePrivateWithNSString_(
#line 44
    @"CERTIFICATE");
    OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_PEM_CRL_PARSER = new_OrgBouncycastleJcajceProviderAsymmetricX509PEMUtil_initPackagePrivateWithNSString_(
#line 45
    @"CRL");
    OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_PEM_PKCS7_PARSER = new_OrgBouncycastleJcajceProviderAsymmetricX509PEMUtil_initPackagePrivateWithNSString_(
#line 46
    @"PKCS7");
    J2OBJC_SET_INITIALIZED(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory)
  }
}

@end


#line 39
void OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_init(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self) {
  JavaSecurityCertCertificateFactorySpi_init(self);
  self->bcHelper_ = new_OrgBouncycastleJcajceUtilBCJcaJceHelper_init();
  self->sData_ =
#line 48
  nil;
  self->sDataObjectCount_ = 0;
  self->currentStream_ = nil;
  self->sCrlData_ =
#line 52
  nil;
  self->sCrlDataObjectCount_ = 0;
  self->currentCrlStream_ = nil;
}


#line 39
OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *new_OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory, init)
}


#line 39
OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *create_OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory, init)
}


#line 56
JavaSecurityCertCertificate *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_readDERCertificateWithOrgBouncycastleAsn1ASN1InputStream_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self, OrgBouncycastleAsn1ASN1InputStream *dIn) {
  
#line 60
  return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCertificateWithOrgBouncycastleAsn1ASN1Sequence_(self, OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([((OrgBouncycastleAsn1ASN1InputStream *) nil_chk(dIn)) readObject]));
}


#line 63
JavaSecurityCertCertificate *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_readPEMCertificateWithJavaIoInputStream_withBoolean_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self, JavaIoInputStream *inArg, jboolean isFirst) {
  
#line 68
  return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCertificateWithOrgBouncycastleAsn1ASN1Sequence_(self, [((OrgBouncycastleJcajceProviderAsymmetricX509PEMUtil *) nil_chk(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_PEM_CERT_PARSER)) readPEMObjectWithJavaIoInputStream:inArg withBoolean:isFirst]);
}


#line 71
JavaSecurityCertCertificate *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCertificateWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self, OrgBouncycastleAsn1ASN1Sequence *seq) {
  
#line 74
  if (seq == nil) {
    
#line 76
    return nil;
  }
  
#line 79
  if ([seq size] > 1 &&
#line 80
  [[seq getObjectAtWithInt:0] isKindOfClass:[OrgBouncycastleAsn1ASN1ObjectIdentifier class]]) {
    
#line 82
    if ([((id<OrgBouncycastleAsn1ASN1Encodable>) nil_chk([seq getObjectAtWithInt:0])) isEqual:JreLoadStatic(OrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, signedData)]) {
      
#line 84
      self->sData_ = [((OrgBouncycastleAsn1PkcsSignedData *) nil_chk(OrgBouncycastleAsn1PkcsSignedData_getInstanceWithId_(OrgBouncycastleAsn1ASN1Sequence_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(
#line 85
      (OrgBouncycastleAsn1ASN1TaggedObject *) cast_chk([seq getObjectAtWithInt:1], [OrgBouncycastleAsn1ASN1TaggedObject class]), true)))) getCertificates];
      
#line 87
      return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCertificate(self);
    }
  }
  
#line 91
  return new_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateObject_initPackagePrivateWithOrgBouncycastleJcajceUtilJcaJceHelper_withOrgBouncycastleAsn1X509Certificate_(self->bcHelper_, OrgBouncycastleAsn1X509Certificate_getInstanceWithId_(
#line 92
  seq));
}


#line 95
JavaSecurityCertCertificate *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCertificate(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self) {
  
#line 98
  if (self->sData_ != nil) {
    
#line 100
    while (self->sDataObjectCount_ < [((OrgBouncycastleAsn1ASN1Set *) nil_chk(self->sData_)) size]) {
      
#line 102
      id obj = [((OrgBouncycastleAsn1ASN1Set *) nil_chk(self->sData_)) getObjectAtWithInt:self->sDataObjectCount_++];
      
#line 104
      if ([obj isKindOfClass:[OrgBouncycastleAsn1ASN1Sequence class]]) {
        
#line 106
        return new_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateObject_initPackagePrivateWithOrgBouncycastleJcajceUtilJcaJceHelper_withOrgBouncycastleAsn1X509Certificate_(self->bcHelper_, OrgBouncycastleAsn1X509Certificate_getInstanceWithId_(
#line 107
        obj));
      }
    }
  }
  
#line 112
  return nil;
}


#line 122
JavaSecurityCertCRL *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_readPEMCRLWithJavaIoInputStream_withBoolean_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self, JavaIoInputStream *inArg, jboolean isFirst) {
  
#line 127
  return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCRLWithOrgBouncycastleAsn1ASN1Sequence_(self, [((OrgBouncycastleJcajceProviderAsymmetricX509PEMUtil *) nil_chk(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_PEM_CRL_PARSER)) readPEMObjectWithJavaIoInputStream:inArg withBoolean:isFirst]);
}


#line 130
JavaSecurityCertCRL *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_readDERCRLWithOrgBouncycastleAsn1ASN1InputStream_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self, OrgBouncycastleAsn1ASN1InputStream *aIn) {
  
#line 134
  return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCRLWithOrgBouncycastleAsn1ASN1Sequence_(self, OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([((OrgBouncycastleAsn1ASN1InputStream *) nil_chk(aIn)) readObject]));
}


#line 137
JavaSecurityCertCRL *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCRLWithOrgBouncycastleAsn1ASN1Sequence_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self, OrgBouncycastleAsn1ASN1Sequence *seq) {
  
#line 140
  if (seq == nil) {
    
#line 142
    return nil;
  }
  
#line 145
  if ([seq size] > 1 &&
#line 146
  [[seq getObjectAtWithInt:0] isKindOfClass:[OrgBouncycastleAsn1ASN1ObjectIdentifier class]]) {
    
#line 148
    if ([((id<OrgBouncycastleAsn1ASN1Encodable>) nil_chk([seq getObjectAtWithInt:0])) isEqual:JreLoadStatic(OrgBouncycastleAsn1PkcsPKCSObjectIdentifiers, signedData)]) {
      
#line 150
      self->sCrlData_ = [((OrgBouncycastleAsn1PkcsSignedData *) nil_chk(OrgBouncycastleAsn1PkcsSignedData_getInstanceWithId_(OrgBouncycastleAsn1ASN1Sequence_getInstanceWithOrgBouncycastleAsn1ASN1TaggedObject_withBoolean_(
#line 151
      (OrgBouncycastleAsn1ASN1TaggedObject *) cast_chk([seq getObjectAtWithInt:1], [OrgBouncycastleAsn1ASN1TaggedObject class]), true)))) getCRLs];
      
#line 153
      return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCRL(self);
    }
  }
  
#line 157
  return [self createCRLWithOrgBouncycastleAsn1X509CertificateList:OrgBouncycastleAsn1X509CertificateList_getInstanceWithId_(
#line 158
  seq)];
}


#line 161
JavaSecurityCertCRL *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCRL(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self) {
  
#line 164
  if (self->sCrlData_ == nil || self->sCrlDataObjectCount_ >= [self->sCrlData_ size]) {
    
#line 166
    return nil;
  }
  
#line 169
  return [self createCRLWithOrgBouncycastleAsn1X509CertificateList:OrgBouncycastleAsn1X509CertificateList_getInstanceWithId_(
#line 171
  [self->sCrlData_ getObjectAtWithInt:self->sCrlDataObjectCount_++])];
}


#line 186
JavaSecurityCertCertificate *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_doGenerateCertificateWithJavaIoInputStream_withBoolean_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self, JavaIoInputStream *inArg, jboolean isFirst) {
  
#line 191
  if (self->currentStream_ == nil) {
    
#line 193
    self->currentStream_ = inArg;
    self->sData_ = nil;
    self->sDataObjectCount_ = 0;
  }
  else if (!JreObjectEqualsEquals(self->currentStream_, inArg)) {
    
#line 199
    self->currentStream_ = inArg;
    self->sData_ = nil;
    self->sDataObjectCount_ = 0;
  }
  
#line 204
  @try {
    
#line 206
    if (self->sData_ != nil) {
      
#line 208
      if (self->sDataObjectCount_ != [self->sData_ size]) {
        
#line 210
        return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCertificate(self);
      }
      else {
        
#line 214
        self->sData_ = nil;
        self->sDataObjectCount_ = 0;
        return nil;
      }
    }
    
#line 220
    JavaIoInputStream *pis;
    
#line 222
    if ([((JavaIoInputStream *) nil_chk(inArg)) markSupported]) {
      
#line 224
      pis = inArg;
    }
    else {
      
#line 228
      pis = new_JavaIoByteArrayInputStream_initWithByteArray_(OrgBouncycastleUtilIoStreams_readAllWithJavaIoInputStream_(inArg));
    }
    
#line 231
    [pis markWithInt:1];
    jint tag = [pis read];
    
#line 234
    if (tag == -1) {
      
#line 236
      return nil;
    }
    
#line 239
    [pis reset];
    if (tag != (jint) 0x30) {
      
#line 242
      return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_readPEMCertificateWithJavaIoInputStream_withBoolean_(self, pis, isFirst);
    }
    else {
      
#line 246
      return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_readDERCertificateWithOrgBouncycastleAsn1ASN1InputStream_(self, new_OrgBouncycastleAsn1ASN1InputStream_initWithJavaIoInputStream_(pis));
    }
  }
  @catch (JavaLangException *e) {
    
#line 251
    @throw new_OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"parsing issue: ", [e getMessage]), e);
  }
}


#line 294
JavaSecurityCertCRL *OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_doGenerateCRLWithJavaIoInputStream_withBoolean_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory *self, JavaIoInputStream *inArg, jboolean isFirst) {
  
#line 299
  if (self->currentCrlStream_ == nil) {
    
#line 301
    self->currentCrlStream_ = inArg;
    self->sCrlData_ = nil;
    self->sCrlDataObjectCount_ = 0;
  }
  else if (!JreObjectEqualsEquals(self->currentCrlStream_, inArg)) {
    
#line 307
    self->currentCrlStream_ = inArg;
    self->sCrlData_ = nil;
    self->sCrlDataObjectCount_ = 0;
  }
  
#line 312
  @try {
    
#line 314
    if (self->sCrlData_ != nil) {
      
#line 316
      if (self->sCrlDataObjectCount_ != [self->sCrlData_ size]) {
        
#line 318
        return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_getCRL(self);
      }
      else {
        
#line 322
        self->sCrlData_ = nil;
        self->sCrlDataObjectCount_ = 0;
        return nil;
      }
    }
    
#line 328
    JavaIoInputStream *pis;
    
#line 330
    if ([((JavaIoInputStream *) nil_chk(inArg)) markSupported]) {
      
#line 332
      pis = inArg;
    }
    else {
      
#line 336
      pis = new_JavaIoByteArrayInputStream_initWithByteArray_(OrgBouncycastleUtilIoStreams_readAllWithJavaIoInputStream_(inArg));
    }
    
#line 339
    [pis markWithInt:1];
    jint tag = [pis read];
    
#line 342
    if (tag == -1) {
      
#line 344
      return nil;
    }
    
#line 347
    [pis reset];
    if (tag != (jint) 0x30) {
      
#line 350
      return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_readPEMCRLWithJavaIoInputStream_withBoolean_(self, pis, isFirst);
    }
    else {
      
#line 354
      return OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_readDERCRLWithOrgBouncycastleAsn1ASN1InputStream_(self, new_OrgBouncycastleAsn1ASN1InputStream_initWithJavaIoInputStream_withBoolean_(pis, true));
    }
  }
  @catch (JavaSecurityCertCRLException *e) {
    
#line 359
    @throw e;
  }
  @catch (JavaLangException *e) {
    
#line 363
    @throw new_JavaSecurityCertCRLException_initWithNSString_([e description]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/x509/CertificateFactory.java"


#line 438
@implementation OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException


#line 443
- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)cause {
  OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException_initWithJavaLangThrowable_(self, cause);
  return self;
}

- (instancetype)initWithNSString:(NSString *)msg
           withJavaLangThrowable:(JavaLangThrowable *)cause {
  OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException_initWithNSString_withJavaLangThrowable_(self, msg, cause);
  return self;
}


#line 455
- (JavaLangThrowable *)getCause {
  
#line 458
  return cause_ExCertificateException_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangThrowable:);
  methods[1].selector = @selector(initWithNSString:withJavaLangThrowable:);
  methods[2].selector = @selector(getCause);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cause_ExCertificateException_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x2, 2, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangThrowable;", "LNSString;LJavaLangThrowable;", "cause", "LOrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory;" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException = { "ExCertificateException", "org.bouncycastle.jcajce.provider.asymmetric.x509", ptrTable, methods, fields, 7, 0xa, 3, 1, 3, -1, -1, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException;
}

@end


#line 443
void OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException_initWithJavaLangThrowable_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException *self, JavaLangThrowable *cause) {
  JavaSecurityCertCertificateException_init(self);
  self->cause_ExCertificateException_ = cause;
}


#line 443
OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException *new_OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException_initWithJavaLangThrowable_(JavaLangThrowable *cause) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException, initWithJavaLangThrowable_, cause)
}


#line 443
OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException *create_OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException_initWithJavaLangThrowable_(JavaLangThrowable *cause) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException, initWithJavaLangThrowable_, cause)
}


#line 448
void OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException_initWithNSString_withJavaLangThrowable_(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException *self, NSString *msg, JavaLangThrowable *cause) {
  JavaSecurityCertCertificateException_initWithNSString_(self,
#line 450
  msg);
  
#line 452
  self->cause_ExCertificateException_ = cause;
}


#line 448
OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException *new_OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException, initWithNSString_withJavaLangThrowable_, msg, cause)
}


#line 448
OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException *create_OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException, initWithNSString_withJavaLangThrowable_, msg, cause)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleJcajceProviderAsymmetricX509CertificateFactory_ExCertificateException)
