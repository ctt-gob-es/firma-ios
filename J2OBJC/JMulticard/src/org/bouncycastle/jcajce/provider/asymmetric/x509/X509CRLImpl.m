//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLImpl.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuffer.h"
#include "java/math/BigInteger.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/NoSuchProviderException.h"
#include "java/security/Principal.h"
#include "java/security/Provider.h"
#include "java/security/PublicKey.h"
#include "java/security/Signature.h"
#include "java/security/SignatureException.h"
#include "java/security/cert/CRLException.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateEncodingException.h"
#include "java/security/cert/X509CRL.h"
#include "java/security/cert/X509CRLEntry.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "javax/security/auth/x500/X500Principal.h"
#include "org/bouncycastle/asn1/ASN1BitString.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1Encoding.h"
#include "org/bouncycastle/asn1/ASN1InputStream.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1OctetString.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1Sequence.h"
#include "org/bouncycastle/asn1/DERBitString.h"
#include "org/bouncycastle/asn1/util/ASN1Dump.h"
#include "org/bouncycastle/asn1/x500/X500Name.h"
#include "org/bouncycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/bouncycastle/asn1/x509/CRLDistPoint.h"
#include "org/bouncycastle/asn1/x509/CRLNumber.h"
#include "org/bouncycastle/asn1/x509/Certificate.h"
#include "org/bouncycastle/asn1/x509/CertificateList.h"
#include "org/bouncycastle/asn1/x509/Extension.h"
#include "org/bouncycastle/asn1/x509/Extensions.h"
#include "org/bouncycastle/asn1/x509/GeneralName.h"
#include "org/bouncycastle/asn1/x509/GeneralNames.h"
#include "org/bouncycastle/asn1/x509/IssuingDistributionPoint.h"
#include "org/bouncycastle/asn1/x509/TBSCertList.h"
#include "org/bouncycastle/asn1/x509/Time.h"
#include "org/bouncycastle/jcajce/CompositePublicKey.h"
#include "org/bouncycastle/jcajce/io/OutputStreamFactory.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/x509/SignatureCreator.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLEntryObject.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLImpl.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/x509/X509SignatureUtil.h"
#include "org/bouncycastle/jcajce/util/JcaJceHelper.h"
#include "org/bouncycastle/jce/X509Principal.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/Strings.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLImpl must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl ()

- (id<JavaUtilSet>)getExtensionOIDsWithBoolean:(jboolean)critical;

- (void)doVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
withOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator:(id<OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator>)sigCreator;

- (void)checkSignatureWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                      withJavaSecuritySignature:(JavaSecuritySignature *)sig
           withOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)sigAlgParams
                                  withByteArray:(IOSByteArray *)encSig;

- (id<JavaUtilSet>)loadCRLEntries;

@end

__attribute__((unused)) static id<JavaUtilSet> OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_getExtensionOIDsWithBoolean_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *self, jboolean critical);

__attribute__((unused)) static void OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_doVerifyWithJavaSecurityPublicKey_withOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *self, id<JavaSecurityPublicKey> key, id<OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator> sigCreator);

__attribute__((unused)) static void OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_withOrgBouncycastleAsn1ASN1Encodable_withByteArray_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *self, id<JavaSecurityPublicKey> key, JavaSecuritySignature *sig, id<OrgBouncycastleAsn1ASN1Encodable> sigAlgParams, IOSByteArray *encSig);

__attribute__((unused)) static id<JavaUtilSet> OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_loadCRLEntries(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *self);

@interface OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1 : NSObject < OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator > {
 @public
  OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *this$0_;
}

- (instancetype)initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl:(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *)outer$;

- (JavaSecuritySignature *)createSignatureWithNSString:(NSString *)sigName;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1)

__attribute__((unused)) static void OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1 *self, OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *outer$);

__attribute__((unused)) static OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1 *new_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1 *create_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *outer$);

@interface OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2 : NSObject < OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator > {
 @public
  NSString *val$sigProvider_;
}

- (instancetype)initWithNSString:(NSString *)capture$0;

- (JavaSecuritySignature *)createSignatureWithNSString:(NSString *)sigName;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2)

__attribute__((unused)) static void OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2_initWithNSString_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2 *self, NSString *capture$0);

__attribute__((unused)) static OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2 *new_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2 *create_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2_initWithNSString_(NSString *capture$0);

@interface OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3 : NSObject < OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator > {
 @public
  OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *this$0_;
  JavaSecurityProvider *val$sigProvider_;
}

- (instancetype)initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl:(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *)outer$
                                                      withJavaSecurityProvider:(JavaSecurityProvider *)capture$0;

- (JavaSecuritySignature *)createSignatureWithNSString:(NSString *)sigName;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3)

__attribute__((unused)) static void OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_withJavaSecurityProvider_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3 *self, OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *outer$, JavaSecurityProvider *capture$0);

__attribute__((unused)) static OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3 *new_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_withJavaSecurityProvider_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *outer$, JavaSecurityProvider *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3 *create_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_withJavaSecurityProvider_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *outer$, JavaSecurityProvider *capture$0);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLImpl.java"


#line 68
@implementation OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl


#line 77
- (instancetype)initPackagePrivateWithOrgBouncycastleJcajceUtilJcaJceHelper:(id<OrgBouncycastleJcajceUtilJcaJceHelper>)bcHelper
                                 withOrgBouncycastleAsn1X509CertificateList:(OrgBouncycastleAsn1X509CertificateList *)c
                                                               withNSString:(NSString *)sigAlgName
                                                              withByteArray:(IOSByteArray *)sigAlgParams
                                                                withBoolean:(jboolean)isIndirect {
  OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_initPackagePrivateWithOrgBouncycastleJcajceUtilJcaJceHelper_withOrgBouncycastleAsn1X509CertificateList_withNSString_withByteArray_withBoolean_(self, bcHelper, c, sigAlgName, sigAlgParams, isIndirect);
  return self;
}


#line 90
- (jboolean)hasUnsupportedCriticalExtension {
  
#line 93
  id<JavaUtilSet> extns = [self getCriticalExtensionOIDs];
  
#line 95
  if (extns == nil) {
    
#line 97
    return false;
  }
  
#line 100
  [extns removeWithId:[((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgBouncycastleAsn1X509Extension, issuingDistributionPoint))) getId]];
  [extns removeWithId:[((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgBouncycastleAsn1X509Extension, deltaCRLIndicator))) getId]];
  
#line 103
  return ![extns isEmpty];
}


#line 106
- (id<JavaUtilSet>)getExtensionOIDsWithBoolean:(jboolean)critical {
  return OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_getExtensionOIDsWithBoolean_(self, critical);
}


#line 135
- (id<JavaUtilSet>)getCriticalExtensionOIDs {
  
#line 138
  return OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_getExtensionOIDsWithBoolean_(self, true);
}

- (id<JavaUtilSet>)getNonCriticalExtensionOIDs {
  
#line 144
  return OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_getExtensionOIDsWithBoolean_(self, false);
}

- (IOSByteArray *)getExtensionValueWithNSString:(NSString *)oid {
  
#line 150
  OrgBouncycastleAsn1ASN1OctetString *extValue = OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_getExtensionValueWithOrgBouncycastleAsn1X509CertificateList_withNSString_(c_, oid);
  if (nil != extValue) {
    
#line 153
    @try {
      
#line 155
      return [extValue getEncoded];
    }
    @catch (JavaLangException *e) {
      
#line 159
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"error parsing ", [e description]));
    }
  }
  return nil;
}


#line 165
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  
#line 170
  OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_doVerifyWithJavaSecurityPublicKey_withOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator_(self, key, new_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_(self));
}


#line 188
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                           withNSString:(NSString *)sigProvider {
  
#line 193
  OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_doVerifyWithJavaSecurityPublicKey_withOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator_(self, key, new_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2_initWithNSString_(sigProvider));
}


#line 211
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
               withJavaSecurityProvider:(JavaSecurityProvider *)sigProvider {
  
#line 216
  @try {
    
#line 218
    OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_doVerifyWithJavaSecurityPublicKey_withOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator_(self, key, new_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_withJavaSecurityProvider_(self, sigProvider));
  }
  @catch (
#line 235
  JavaSecurityNoSuchProviderException *e) {
    
#line 238
    @throw new_JavaSecurityNoSuchAlgorithmException_initWithNSString_(JreStrcat("$$", @"provider issue: ", [e getMessage]));
  }
}


#line 242
- (void)doVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
withOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator:(id<OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator>)sigCreator {
  OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_doVerifyWithJavaSecurityPublicKey_withOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator_(self, key, sigCreator);
}


#line 362
- (void)checkSignatureWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                      withJavaSecuritySignature:(JavaSecuritySignature *)sig
           withOrgBouncycastleAsn1ASN1Encodable:(id<OrgBouncycastleAsn1ASN1Encodable>)sigAlgParams
                                  withByteArray:(IOSByteArray *)encSig {
  OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_withOrgBouncycastleAsn1ASN1Encodable_withByteArray_(self, key, sig, sigAlgParams, encSig);
}


#line 392
- (jint)getVersion {
  
#line 395
  return [((OrgBouncycastleAsn1X509CertificateList *) nil_chk(c_)) getVersionNumber];
}

- (id<JavaSecurityPrincipal>)getIssuerDN {
  
#line 401
  return new_OrgBouncycastleJceX509Principal_initWithOrgBouncycastleAsn1X500X500Name_(OrgBouncycastleAsn1X500X500Name_getInstanceWithId_([((OrgBouncycastleAsn1X500X500Name *) nil_chk([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(c_)) getIssuer])) toASN1Primitive]));
}

- (JavaxSecurityAuthX500X500Principal *)getIssuerX500Principal {
  
#line 407
  @try {
    
#line 409
    return new_JavaxSecurityAuthX500X500Principal_initWithByteArray_([((OrgBouncycastleAsn1X500X500Name *) nil_chk([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(c_)) getIssuer])) getEncoded]);
  }
  @catch (JavaIoIOException *e) {
    
#line 413
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"can't encode issuer DN");
  }
}


#line 417
- (JavaUtilDate *)getThisUpdate {
  
#line 420
  return [((OrgBouncycastleAsn1X509Time *) nil_chk([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(c_)) getThisUpdate])) getDate];
}

- (JavaUtilDate *)getNextUpdate {
  
#line 426
  OrgBouncycastleAsn1X509Time *nextUpdate = [((OrgBouncycastleAsn1X509CertificateList *) nil_chk(c_)) getNextUpdate];
  
#line 428
  return nil == nextUpdate ? nil : [nextUpdate getDate];
}


#line 431
- (id<JavaUtilSet>)loadCRLEntries {
  return OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_loadCRLEntries(self);
}


#line 456
- (JavaSecurityCertX509CRLEntry *)getRevokedCertificateWithJavaMathBigInteger:(JavaMathBigInteger *)serialNumber {
  
#line 459
  id<JavaUtilEnumeration> certs = [((OrgBouncycastleAsn1X509CertificateList *) nil_chk(c_)) getRevokedCertificateEnumeration];
  
#line 461
  OrgBouncycastleAsn1X500X500Name *previousCertificateIssuer = nil;
  while ([((id<JavaUtilEnumeration>) nil_chk(certs)) hasMoreElements]) {
    
#line 464
    OrgBouncycastleAsn1X509TBSCertList_CRLEntry *entry_ = (OrgBouncycastleAsn1X509TBSCertList_CRLEntry *) cast_chk([certs nextElement], [OrgBouncycastleAsn1X509TBSCertList_CRLEntry class]);
    
#line 466
    if ([((OrgBouncycastleAsn1ASN1Integer *) nil_chk([((OrgBouncycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) getUserCertificate])) hasValueWithJavaMathBigInteger:serialNumber]) {
      
#line 468
      return new_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject_initPackagePrivateWithOrgBouncycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgBouncycastleAsn1X500X500Name_(entry_, isIndirect_, previousCertificateIssuer);
    }
    
#line 471
    if (isIndirect_ && [entry_ hasExtensions]) {
      
#line 473
      OrgBouncycastleAsn1X509Extension *currentCaName = [((OrgBouncycastleAsn1X509Extensions *) nil_chk([entry_ getExtensions])) getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgBouncycastleAsn1X509Extension, certificateIssuer)];
      
#line 475
      if (currentCaName != nil) {
        
#line 477
        previousCertificateIssuer = OrgBouncycastleAsn1X500X500Name_getInstanceWithId_([((OrgBouncycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(nil_chk([((OrgBouncycastleAsn1X509GeneralNames *) nil_chk(OrgBouncycastleAsn1X509GeneralNames_getInstanceWithId_([currentCaName getParsedValue]))) getNames]), 0))) getName]);
      }
    }
  }
  
#line 482
  return nil;
}


#line 485
- (id<JavaUtilSet>)getRevokedCertificates {
  
#line 488
  id<JavaUtilSet> entrySet = OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_loadCRLEntries(self);
  
#line 490
  if (![((id<JavaUtilSet>) nil_chk(entrySet)) isEmpty]) {
    
#line 492
    return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(entrySet);
  }
  
#line 495
  return nil;
}


#line 498
- (IOSByteArray *)getTBSCertList {
  
#line 502
  @try {
    
#line 504
    return [((OrgBouncycastleAsn1X509TBSCertList *) nil_chk([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(c_)) getTBSCertList])) getEncodedWithNSString:OrgBouncycastleAsn1ASN1Encoding_DER];
  }
  @catch (JavaIoIOException *e) {
    
#line 508
    @throw new_JavaSecurityCertCRLException_initWithNSString_([e description]);
  }
}


#line 512
- (IOSByteArray *)getSignature {
  
#line 515
  return [((OrgBouncycastleAsn1ASN1BitString *) nil_chk([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(c_)) getSignature])) getOctets];
}

- (NSString *)getSigAlgName {
  
#line 521
  return sigAlgName_;
}

- (NSString *)getSigAlgOID {
  
#line 527
  return [((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(c_)) getSignatureAlgorithm])) getAlgorithm])) getId];
}

- (IOSByteArray *)getSigAlgParams {
  
#line 533
  return OrgBouncycastleUtilArrays_cloneWithByteArray_(sigAlgParams_);
}


#line 541
- (NSString *)description {
  
#line 544
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  NSString *nl = OrgBouncycastleUtilStrings_lineSeparator();
  
#line 547
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"              Version: "])) appendWithInt:[self getVersion]])) appendWithNSString:
#line 548
  nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"             IssuerDN: "])) appendWithId:[self getIssuerDN]])) appendWithNSString:
#line 550
  nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"          This update: "])) appendWithId:[self getThisUpdate]])) appendWithNSString:
#line 552
  nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"          Next update: "])) appendWithId:[self getNextUpdate]])) appendWithNSString:
#line 554
  nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"  Signature Algorithm: "])) appendWithNSString:[self getSigAlgName]])) appendWithNSString:
#line 556
  nl];
  
#line 558
  OrgBouncycastleJcajceProviderAsymmetricX509X509SignatureUtil_prettyPrintSignatureWithByteArray_withJavaLangStringBuffer_withNSString_([self getSignature], buf, nl);
  
#line 560
  OrgBouncycastleAsn1X509Extensions *extensions = [((OrgBouncycastleAsn1X509TBSCertList *) nil_chk([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(c_)) getTBSCertList])) getExtensions];
  
#line 562
  if (extensions != nil) {
    
#line 564
    id<JavaUtilEnumeration> e = [extensions oids];
    
#line 566
    if ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
      
#line 568
      (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"           Extensions: "])) appendWithNSString:nl];
    }
    
#line 571
    while ([e hasMoreElements]) {
      
#line 573
      OrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (OrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [OrgBouncycastleAsn1ASN1ObjectIdentifier class]);
      OrgBouncycastleAsn1X509Extension *ext = [extensions getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:oid];
      
#line 576
      if ([((OrgBouncycastleAsn1X509Extension *) nil_chk(ext)) getExtnValue] != nil) {
        
#line 578
        IOSByteArray *octs = [((OrgBouncycastleAsn1ASN1OctetString *) nil_chk([ext getExtnValue])) getOctets];
        OrgBouncycastleAsn1ASN1InputStream *dIn = new_OrgBouncycastleAsn1ASN1InputStream_initWithByteArray_(octs);
        (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"                       critical("])) appendWithBoolean:
#line 581
        [ext isCritical]])) appendWithNSString:@") "];
        @try {
          
#line 584
          if ([((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X509Extension, cRLNumber)]) {
            
#line 586
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:new_OrgBouncycastleAsn1X509CRLNumber_initWithJavaMathBigInteger_(
#line 587
            [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(OrgBouncycastleAsn1ASN1Integer_getInstanceWithId_(
#line 588
            [dIn readObject]))) getPositiveValue])])) appendWithNSString:
#line 589
            nl];
          }
          else if ([oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X509Extension, deltaCRLIndicator)]) {
            
#line 593
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:JreStrcat("$@", @"Base CRL: ", new_OrgBouncycastleAsn1X509CRLNumber_initWithJavaMathBigInteger_(
#line 595
            [((OrgBouncycastleAsn1ASN1Integer *) nil_chk(OrgBouncycastleAsn1ASN1Integer_getInstanceWithId_(
#line 596
            [dIn readObject]))) getPositiveValue]))])) appendWithNSString:
#line 597
            nl];
          }
          else if ([oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X509Extension, issuingDistributionPoint)]) {
            
#line 602
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:OrgBouncycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_(
#line 603
            [dIn readObject])])) appendWithNSString:nl];
          }
          else if ([oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X509Extension, cRLDistributionPoints)] ||
#line 606
          [oid equalsWithOrgBouncycastleAsn1ASN1Primitive:JreLoadStatic(OrgBouncycastleAsn1X509Extension, freshestCRL)]) {
            
#line 608
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:OrgBouncycastleAsn1X509CRLDistPoint_getInstanceWithId_(
#line 609
            [dIn readObject])])) appendWithNSString:nl];
          }
          else {
            
#line 611
            (void) [buf appendWithNSString:[oid getId]];
            (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" value = "])) appendWithNSString:OrgBouncycastleAsn1UtilASN1Dump_dumpAsStringWithId_(
#line 613
            [dIn readObject])])) appendWithNSString:
#line 614
            nl];
          }
        }
        @catch (JavaLangException *ex) {
          
#line 619
          (void) [buf appendWithNSString:[oid getId]];
          (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" value = "])) appendWithNSString:@"*****"])) appendWithNSString:nl];
        }
      }
      else {
        
#line 625
        (void) [buf appendWithNSString:nl];
      }
    }
  }
  id<JavaUtilSet> set = [self getRevokedCertificates];
  if (set != nil) {
    
#line 632
    id<JavaUtilIterator> it = [set iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      
#line 635
      (void) [buf appendWithId:[it next]];
      (void) [buf appendWithNSString:nl];
    }
  }
  return [buf description];
}


#line 649
- (jboolean)isRevokedWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert {
  
#line 652
  if (![@"X.509" isEqual:[((JavaSecurityCertCertificate *) nil_chk(cert)) getType]]) {
    
#line 654
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"X.509 CRL used with non X.509 Cert");
  }
  
#line 657
  id<JavaUtilEnumeration> certs = [((OrgBouncycastleAsn1X509CertificateList *) nil_chk(c_)) getRevokedCertificateEnumeration];
  
#line 659
  OrgBouncycastleAsn1X500X500Name *caName = [((OrgBouncycastleAsn1X509CertificateList *) nil_chk(c_)) getIssuer];
  
#line 661
  if ([((id<JavaUtilEnumeration>) nil_chk(certs)) hasMoreElements]) {
    
#line 663
    JavaMathBigInteger *serial = [((JavaSecurityCertX509Certificate *) cast_chk(cert, [JavaSecurityCertX509Certificate class])) getSerialNumber];
    
#line 665
    while ([certs hasMoreElements]) {
      
#line 667
      OrgBouncycastleAsn1X509TBSCertList_CRLEntry *entry_ = OrgBouncycastleAsn1X509TBSCertList_CRLEntry_getInstanceWithId_([certs nextElement]);
      
#line 669
      if (isIndirect_ && [((OrgBouncycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) hasExtensions]) {
        
#line 671
        OrgBouncycastleAsn1X509Extension *currentCaName = [((OrgBouncycastleAsn1X509Extensions *) nil_chk([((OrgBouncycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) getExtensions])) getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgBouncycastleAsn1X509Extension, certificateIssuer)];
        
#line 673
        if (currentCaName != nil) {
          
#line 675
          caName = OrgBouncycastleAsn1X500X500Name_getInstanceWithId_([((OrgBouncycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(nil_chk([((OrgBouncycastleAsn1X509GeneralNames *) nil_chk(OrgBouncycastleAsn1X509GeneralNames_getInstanceWithId_([currentCaName getParsedValue]))) getNames]), 0))) getName]);
        }
      }
      
#line 679
      if ([((OrgBouncycastleAsn1ASN1Integer *) nil_chk([((OrgBouncycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) getUserCertificate])) hasValueWithJavaMathBigInteger:serial]) {
        
#line 681
        OrgBouncycastleAsn1X500X500Name *issuer;
        
#line 683
        if ([cert isKindOfClass:[JavaSecurityCertX509Certificate class]]) {
          
#line 685
          issuer = OrgBouncycastleAsn1X500X500Name_getInstanceWithId_([((JavaxSecurityAuthX500X500Principal *) nil_chk([((JavaSecurityCertX509Certificate *) cert) getIssuerX500Principal])) getEncoded]);
        }
        else {
          
#line 689
          @try {
            
#line 691
            issuer = [((OrgBouncycastleAsn1X509Certificate *) nil_chk(OrgBouncycastleAsn1X509Certificate_getInstanceWithId_([cert getEncoded]))) getIssuer];
          }
          @catch (JavaSecurityCertCertificateEncodingException *e) {
            
#line 695
            @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Cannot process certificate: ", [e getMessage]));
          }
        }
        
#line 699
        if (![((OrgBouncycastleAsn1X500X500Name *) nil_chk(caName)) isEqual:issuer]) {
          
#line 701
          return false;
        }
        
#line 704
        return true;
      }
    }
  }
  
#line 709
  return false;
}


#line 712
+ (IOSByteArray *)getExtensionOctetsWithOrgBouncycastleAsn1X509CertificateList:(OrgBouncycastleAsn1X509CertificateList *)c
                                                                  withNSString:(NSString *)oid {
  return OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_getExtensionOctetsWithOrgBouncycastleAsn1X509CertificateList_withNSString_(c, oid);
}


#line 722
+ (OrgBouncycastleAsn1ASN1OctetString *)getExtensionValueWithOrgBouncycastleAsn1X509CertificateList:(OrgBouncycastleAsn1X509CertificateList *)c
                                                                                       withNSString:(NSString *)oid {
  return OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_getExtensionValueWithOrgBouncycastleAsn1X509CertificateList_withNSString_(c, oid);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 8, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 9, 10, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, 13, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, 16, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPrincipal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxSecurityAuthX500X500Principal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509CRLEntry;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 19, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 20, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "[B", 0xc, 23, 24, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1OctetString;", 0xc, 3, 24, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgBouncycastleJcajceUtilJcaJceHelper:withOrgBouncycastleAsn1X509CertificateList:withNSString:withByteArray:withBoolean:);
  methods[1].selector = @selector(hasUnsupportedCriticalExtension);
  methods[2].selector = @selector(getExtensionOIDsWithBoolean:);
  methods[3].selector = @selector(getCriticalExtensionOIDs);
  methods[4].selector = @selector(getNonCriticalExtensionOIDs);
  methods[5].selector = @selector(getExtensionValueWithNSString:);
  methods[6].selector = @selector(verifyWithJavaSecurityPublicKey:);
  methods[7].selector = @selector(verifyWithJavaSecurityPublicKey:withNSString:);
  methods[8].selector = @selector(verifyWithJavaSecurityPublicKey:withJavaSecurityProvider:);
  methods[9].selector = @selector(doVerifyWithJavaSecurityPublicKey:withOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator:);
  methods[10].selector = @selector(checkSignatureWithJavaSecurityPublicKey:withJavaSecuritySignature:withOrgBouncycastleAsn1ASN1Encodable:withByteArray:);
  methods[11].selector = @selector(getVersion);
  methods[12].selector = @selector(getIssuerDN);
  methods[13].selector = @selector(getIssuerX500Principal);
  methods[14].selector = @selector(getThisUpdate);
  methods[15].selector = @selector(getNextUpdate);
  methods[16].selector = @selector(loadCRLEntries);
  methods[17].selector = @selector(getRevokedCertificateWithJavaMathBigInteger:);
  methods[18].selector = @selector(getRevokedCertificates);
  methods[19].selector = @selector(getTBSCertList);
  methods[20].selector = @selector(getSignature);
  methods[21].selector = @selector(getSigAlgName);
  methods[22].selector = @selector(getSigAlgOID);
  methods[23].selector = @selector(getSigAlgParams);
  methods[24].selector = @selector(description);
  methods[25].selector = @selector(isRevokedWithJavaSecurityCertCertificate:);
  methods[26].selector = @selector(getExtensionOctetsWithOrgBouncycastleAsn1X509CertificateList:withNSString:);
  methods[27].selector = @selector(getExtensionValueWithOrgBouncycastleAsn1X509CertificateList:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bcHelper_", "LOrgBouncycastleJcajceUtilJcaJceHelper;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "c_", "LOrgBouncycastleAsn1X509CertificateList;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sigAlgName_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sigAlgParams_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "isIndirect_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleJcajceUtilJcaJceHelper;LOrgBouncycastleAsn1X509CertificateList;LNSString;[BZ", "getExtensionOIDs", "Z", "getExtensionValue", "LNSString;", "verify", "LJavaSecurityPublicKey;", "LJavaSecurityCertCRLException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;LJavaSecurityNoSuchProviderException;LJavaSecuritySignatureException;", "LJavaSecurityPublicKey;LNSString;", "LJavaSecurityPublicKey;LJavaSecurityProvider;", "LJavaSecurityCertCRLException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;LJavaSecuritySignatureException;", "doVerify", "LJavaSecurityPublicKey;LOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator;", "LJavaSecurityCertCRLException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;LJavaSecuritySignatureException;LJavaSecurityNoSuchProviderException;", "checkSignature", "LJavaSecurityPublicKey;LJavaSecuritySignature;LOrgBouncycastleAsn1ASN1Encodable;[B", "LJavaSecurityNoSuchAlgorithmException;LJavaSecuritySignatureException;LJavaSecurityInvalidKeyException;LJavaSecurityCertCRLException;", "getRevokedCertificate", "LJavaMathBigInteger;", "LJavaSecurityCertCRLException;", "toString", "isRevoked", "LJavaSecurityCertCertificate;", "getExtensionOctets", "LOrgBouncycastleAsn1X509CertificateList;LNSString;" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl = { "X509CRLImpl", "org.bouncycastle.jcajce.provider.asymmetric.x509", ptrTable, methods, fields, 7, 0x400, 28, 5, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl;
}

@end


#line 77
void OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_initPackagePrivateWithOrgBouncycastleJcajceUtilJcaJceHelper_withOrgBouncycastleAsn1X509CertificateList_withNSString_withByteArray_withBoolean_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *self, id<OrgBouncycastleJcajceUtilJcaJceHelper> bcHelper, OrgBouncycastleAsn1X509CertificateList *c, NSString *sigAlgName, IOSByteArray *sigAlgParams, jboolean isIndirect) {
  JavaSecurityCertX509CRL_init(self);
  self->bcHelper_ = bcHelper;
  self->c_ = c;
  self->sigAlgName_ = sigAlgName;
  self->sigAlgParams_ = sigAlgParams;
  self->isIndirect_ = isIndirect;
}


#line 106
id<JavaUtilSet> OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_getExtensionOIDsWithBoolean_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *self, jboolean critical) {
  
#line 108
  if ([self getVersion] == 2) {
    
#line 110
    OrgBouncycastleAsn1X509Extensions *extensions = [((OrgBouncycastleAsn1X509TBSCertList *) nil_chk([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(self->c_)) getTBSCertList])) getExtensions];
    
#line 112
    if (extensions != nil) {
      
#line 114
      id<JavaUtilSet> set = new_JavaUtilHashSet_init();
      id<JavaUtilEnumeration> e = [extensions oids];
      
#line 117
      while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
        
#line 119
        OrgBouncycastleAsn1ASN1ObjectIdentifier *oid = (OrgBouncycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [OrgBouncycastleAsn1ASN1ObjectIdentifier class]);
        OrgBouncycastleAsn1X509Extension *ext = [extensions getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:oid];
        
#line 122
        if (critical == [((OrgBouncycastleAsn1X509Extension *) nil_chk(ext)) isCritical]) {
          
#line 124
          [set addWithId:[((OrgBouncycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) getId]];
        }
      }
      
#line 128
      return set;
    }
  }
  
#line 132
  return nil;
}


#line 242
void OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_doVerifyWithJavaSecurityPublicKey_withOrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *self, id<JavaSecurityPublicKey> key, id<OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator> sigCreator) {
  
#line 246
  if (![((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(self->c_)) getSignatureAlgorithm])) isEqual:[((OrgBouncycastleAsn1X509TBSCertList *) nil_chk([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(self->c_)) getTBSCertList])) getSignature]]) {
    
#line 248
    @throw new_JavaSecurityCertCRLException_initWithNSString_(@"Signature algorithm on CertificateList does not match TBSCertList.");
  }
  
#line 251
  if ([key isKindOfClass:[OrgBouncycastleJcajceCompositePublicKey class]] && OrgBouncycastleJcajceProviderAsymmetricX509X509SignatureUtil_isCompositeAlgorithmWithOrgBouncycastleAsn1X509AlgorithmIdentifier_([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(self->c_)) getSignatureAlgorithm])) {
    
#line 253
    id<JavaUtilList> pubKeys = [((OrgBouncycastleJcajceCompositePublicKey *) nil_chk(((OrgBouncycastleJcajceCompositePublicKey *) cast_chk(key, [OrgBouncycastleJcajceCompositePublicKey class])))) getPublicKeys];
    OrgBouncycastleAsn1ASN1Sequence *keySeq = OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(self->c_)) getSignatureAlgorithm])) getParameters]);
    OrgBouncycastleAsn1ASN1Sequence *sigSeq = OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([((OrgBouncycastleAsn1DERBitString *) nil_chk(OrgBouncycastleAsn1DERBitString_getInstanceWithId_([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(self->c_)) getSignature]))) getBytes]);
    
#line 257
    jboolean success = false;
    for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(pubKeys)) size]; i++) {
      
#line 260
      if ([pubKeys getWithInt:i] == nil) {
        
#line 262
        continue;
      }
      
#line 265
      OrgBouncycastleAsn1X509AlgorithmIdentifier *sigAlg = OrgBouncycastleAsn1X509AlgorithmIdentifier_getInstanceWithId_([((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(keySeq)) getObjectAtWithInt:i]);
      NSString *sigName = OrgBouncycastleJcajceProviderAsymmetricX509X509SignatureUtil_getSignatureNameWithOrgBouncycastleAsn1X509AlgorithmIdentifier_(sigAlg);
      
#line 268
      JavaSecuritySignature *signature = [((id<OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator>) nil_chk(sigCreator)) createSignatureWithNSString:sigName];
      
#line 270
      JavaSecuritySignatureException *sigExc = nil;
      
#line 272
      @try {
        
#line 274
        OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_withOrgBouncycastleAsn1ASN1Encodable_withByteArray_(self,
#line 275
        [pubKeys getWithInt:i], signature,
#line 276
        [((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(sigAlg)) getParameters],
#line 277
        [((OrgBouncycastleAsn1DERBitString *) nil_chk(OrgBouncycastleAsn1DERBitString_getInstanceWithId_([((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(sigSeq)) getObjectAtWithInt:i]))) getBytes]);
        success = true;
      }
      @catch (JavaSecuritySignatureException *e) {
        
#line 282
        sigExc = e;
      }
      
#line 285
      if (sigExc != nil) {
        
#line 287
        @throw sigExc;
      }
    }
    
#line 291
    if (!success) {
      
#line 293
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"no matching key found");
    }
  }
  else if (OrgBouncycastleJcajceProviderAsymmetricX509X509SignatureUtil_isCompositeAlgorithmWithOrgBouncycastleAsn1X509AlgorithmIdentifier_([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(self->c_)) getSignatureAlgorithm])) {
    
#line 298
    OrgBouncycastleAsn1ASN1Sequence *keySeq = OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(self->c_)) getSignatureAlgorithm])) getParameters]);
    OrgBouncycastleAsn1ASN1Sequence *sigSeq = OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_([((OrgBouncycastleAsn1DERBitString *) nil_chk(OrgBouncycastleAsn1DERBitString_getInstanceWithId_([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(self->c_)) getSignature]))) getBytes]);
    
#line 301
    jboolean success = false;
    for (jint i = 0; i != [((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(sigSeq)) size]; i++) {
      
#line 304
      OrgBouncycastleAsn1X509AlgorithmIdentifier *sigAlg = OrgBouncycastleAsn1X509AlgorithmIdentifier_getInstanceWithId_([((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(keySeq)) getObjectAtWithInt:i]);
      NSString *sigName = OrgBouncycastleJcajceProviderAsymmetricX509X509SignatureUtil_getSignatureNameWithOrgBouncycastleAsn1X509AlgorithmIdentifier_(sigAlg);
      
#line 307
      JavaSecuritySignatureException *sigExc = nil;
      
#line 309
      @try {
        
#line 311
        JavaSecuritySignature *signature = [((id<OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator>) nil_chk(sigCreator)) createSignatureWithNSString:sigName];
        
#line 313
        OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_withOrgBouncycastleAsn1ASN1Encodable_withByteArray_(self,
#line 314
        key, signature,
#line 315
        [((OrgBouncycastleAsn1X509AlgorithmIdentifier *) nil_chk(sigAlg)) getParameters],
#line 316
        [((OrgBouncycastleAsn1DERBitString *) nil_chk(OrgBouncycastleAsn1DERBitString_getInstanceWithId_([sigSeq getObjectAtWithInt:i]))) getBytes]);
        
#line 318
        success = true;
      }
      @catch (JavaSecurityInvalidKeyException *e) {
      }
      @catch (
#line 320
      JavaSecurityNoSuchAlgorithmException *e) {
      }
      @catch (
#line 324
      JavaSecuritySignatureException *e) {
        
#line 326
        sigExc = e;
      }
      
#line 329
      if (sigExc != nil) {
        
#line 331
        @throw sigExc;
      }
    }
    
#line 335
    if (!success) {
      
#line 337
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"no matching key found");
    }
  }
  else {
    
#line 342
    JavaSecuritySignature *sig = [((id<OrgBouncycastleJcajceProviderAsymmetricX509SignatureCreator>) nil_chk(sigCreator)) createSignatureWithNSString:[self getSigAlgName]];
    
#line 344
    if (self->sigAlgParams_ == nil) {
      
#line 346
      OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_withOrgBouncycastleAsn1ASN1Encodable_withByteArray_(self, key, sig, nil, [self getSignature]);
    }
    else {
      
#line 350
      @try {
        
#line 352
        OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_withOrgBouncycastleAsn1ASN1Encodable_withByteArray_(self, key, sig, OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(self->sigAlgParams_), [self getSignature]);
      }
      @catch (JavaIoIOException *e) {
        
#line 356
        @throw new_JavaSecuritySignatureException_initWithNSString_(JreStrcat("$$", @"cannot decode signature parameters: ", [e getMessage]));
      }
    }
  }
}


#line 362
void OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_withOrgBouncycastleAsn1ASN1Encodable_withByteArray_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *self, id<JavaSecurityPublicKey> key, JavaSecuritySignature *sig, id<OrgBouncycastleAsn1ASN1Encodable> sigAlgParams, IOSByteArray *encSig) {
  
#line 365
  if (sigAlgParams != nil) {
    
#line 368
    OrgBouncycastleJcajceProviderAsymmetricX509X509SignatureUtil_setSignatureParametersWithJavaSecuritySignature_withOrgBouncycastleAsn1ASN1Encodable_(sig, sigAlgParams);
  }
  
#line 371
  [((JavaSecuritySignature *) nil_chk(sig)) initVerifyWithJavaSecurityPublicKey:key];
  
#line 373
  @try {
    
#line 375
    JavaIoOutputStream *sigOut = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_withInt_(OrgBouncycastleJcajceIoOutputStreamFactory_createStreamWithJavaSecuritySignature_(sig), 512);
    
#line 377
    [((OrgBouncycastleAsn1X509TBSCertList *) nil_chk([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(self->c_)) getTBSCertList])) encodeToWithJavaIoOutputStream:sigOut withNSString:OrgBouncycastleAsn1ASN1Encoding_DER];
    
#line 379
    [sigOut close];
  }
  @catch (JavaIoIOException *e) {
    
#line 383
    @throw new_JavaSecurityCertCRLException_initWithNSString_([e description]);
  }
  
#line 386
  if (![sig verifyWithByteArray:encSig]) {
    
#line 388
    @throw new_JavaSecuritySignatureException_initWithNSString_(@"CRL does not verify with supplied public key.");
  }
}


#line 431
id<JavaUtilSet> OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_loadCRLEntries(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *self) {
  
#line 433
  id<JavaUtilSet> entrySet = new_JavaUtilHashSet_init();
  id<JavaUtilEnumeration> certs = [((OrgBouncycastleAsn1X509CertificateList *) nil_chk(self->c_)) getRevokedCertificateEnumeration];
  
#line 436
  OrgBouncycastleAsn1X500X500Name *previousCertificateIssuer = nil;
  while ([((id<JavaUtilEnumeration>) nil_chk(certs)) hasMoreElements]) {
    
#line 439
    OrgBouncycastleAsn1X509TBSCertList_CRLEntry *entry_ = (OrgBouncycastleAsn1X509TBSCertList_CRLEntry *) cast_chk([certs nextElement], [OrgBouncycastleAsn1X509TBSCertList_CRLEntry class]);
    OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject *crlEntry = new_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLEntryObject_initPackagePrivateWithOrgBouncycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgBouncycastleAsn1X500X500Name_(entry_, self->isIndirect_, previousCertificateIssuer);
    [entrySet addWithId:crlEntry];
    if (self->isIndirect_ && [((OrgBouncycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) hasExtensions]) {
      
#line 444
      OrgBouncycastleAsn1X509Extension *currentCaName = [((OrgBouncycastleAsn1X509Extensions *) nil_chk([((OrgBouncycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) getExtensions])) getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgBouncycastleAsn1X509Extension, certificateIssuer)];
      
#line 446
      if (currentCaName != nil) {
        
#line 448
        previousCertificateIssuer = OrgBouncycastleAsn1X500X500Name_getInstanceWithId_([((OrgBouncycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(nil_chk([((OrgBouncycastleAsn1X509GeneralNames *) nil_chk(OrgBouncycastleAsn1X509GeneralNames_getInstanceWithId_([currentCaName getParsedValue]))) getNames]), 0))) getName]);
      }
    }
  }
  
#line 453
  return entrySet;
}


#line 712
IOSByteArray *OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_getExtensionOctetsWithOrgBouncycastleAsn1X509CertificateList_withNSString_(OrgBouncycastleAsn1X509CertificateList *c, NSString *oid) {
  OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_initialize();
  OrgBouncycastleAsn1ASN1OctetString *extValue = OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_getExtensionValueWithOrgBouncycastleAsn1X509CertificateList_withNSString_(c, oid);
  if (nil != extValue) {
    
#line 717
    return [extValue getOctets];
  }
  return nil;
}


#line 722
OrgBouncycastleAsn1ASN1OctetString *OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_getExtensionValueWithOrgBouncycastleAsn1X509CertificateList_withNSString_(OrgBouncycastleAsn1X509CertificateList *c, NSString *oid) {
  OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_initialize();
  OrgBouncycastleAsn1X509Extensions *exts = [((OrgBouncycastleAsn1X509TBSCertList *) nil_chk([((OrgBouncycastleAsn1X509CertificateList *) nil_chk(c)) getTBSCertList])) getExtensions];
  if (nil != exts) {
    
#line 727
    OrgBouncycastleAsn1X509Extension *ext = [exts getExtensionWithOrgBouncycastleAsn1ASN1ObjectIdentifier:new_OrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_(oid)];
    if (nil != ext) {
      
#line 730
      return [ext getExtnValue];
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLImpl.java"


#line 171
@implementation OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1


#line 171
- (instancetype)initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl:(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *)outer$ {
  OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_(self, outer$);
  return self;
}


#line 172
- (JavaSecuritySignature *)createSignatureWithNSString:(NSString *)sigName {
  
#line 176
  @try {
    
#line 178
    return JreRetainedLocalValue([((id<OrgBouncycastleJcajceUtilJcaJceHelper>) nil_chk(this$0_->bcHelper_)) createSignatureWithNSString:sigName]);
  }
  @catch (JavaLangException *e) {
    
#line 182
    return JavaSecuritySignature_getInstanceWithNSString_(sigName);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySignature;", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl:);
  methods[1].selector = @selector(createSignatureWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl;", "createSignature", "LNSString;", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityNoSuchProviderException;", "verifyWithJavaSecurityPublicKey:" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1 = { "", "org.bouncycastle.jcajce.provider.asymmetric.x509", ptrTable, methods, fields, 7, 0x8000, 2, 1, 0, -1, 4, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1;
}

@end


#line 171
void OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1 *self, OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}


#line 171
OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1 *new_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *outer$) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1, initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_, outer$)
}


#line 171
OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1 *create_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *outer$) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_1, initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_, outer$)
}

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLImpl.java"


#line 194
@implementation OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2


#line 194
- (instancetype)initWithNSString:(NSString *)capture$0 {
  OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2_initWithNSString_(self, capture$0);
  return self;
}


#line 195
- (JavaSecuritySignature *)createSignatureWithNSString:(NSString *)sigName {
  
#line 199
  if (val$sigProvider_ != nil) {
    
#line 201
    return JavaSecuritySignature_getInstanceWithNSString_withNSString_(sigName, val$sigProvider_);
  }
  else {
    
#line 205
    return JavaSecuritySignature_getInstanceWithNSString_(sigName);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySignature;", 0x1, 1, 0, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(createSignatureWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$sigProvider_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "createSignature", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityNoSuchProviderException;", "LOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl;", "verifyWithJavaSecurityPublicKey:withNSString:" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2 = { "", "org.bouncycastle.jcajce.provider.asymmetric.x509", ptrTable, methods, fields, 7, 0x8000, 2, 1, 3, -1, 4, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2;
}

@end


#line 194
void OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2_initWithNSString_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2 *self, NSString *capture$0) {
  self->val$sigProvider_ = capture$0;
  NSObject_init(self);
}


#line 194
OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2 *new_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2, initWithNSString_, capture$0)
}


#line 194
OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2 *create_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_2, initWithNSString_, capture$0)
}

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CRLImpl.java"


#line 219
@implementation OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3


#line 219
- (instancetype)initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl:(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *)outer$
                                                      withJavaSecurityProvider:(JavaSecurityProvider *)capture$0 {
  OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_withJavaSecurityProvider_(self, outer$, capture$0);
  return self;
}


#line 220
- (JavaSecuritySignature *)createSignatureWithNSString:(NSString *)sigName {
  
#line 224
  if (val$sigProvider_ != nil) {
    
#line 226
    return JavaSecuritySignature_getInstanceWithNSString_withJavaSecurityProvider_([this$0_ getSigAlgName], val$sigProvider_);
  }
  else {
    
#line 230
    return JavaSecuritySignature_getInstanceWithNSString_([this$0_ getSigAlgName]);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySignature;", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl:withJavaSecurityProvider:);
  methods[1].selector = @selector(createSignatureWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$sigProvider_", "LJavaSecurityProvider;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl;LJavaSecurityProvider;", "createSignature", "LNSString;", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityNoSuchProviderException;", "LOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl;", "verifyWithJavaSecurityPublicKey:withJavaSecurityProvider:" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3 = { "", "org.bouncycastle.jcajce.provider.asymmetric.x509", ptrTable, methods, fields, 7, 0x8000, 2, 2, 4, -1, 5, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3;
}

@end


#line 219
void OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_withJavaSecurityProvider_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3 *self, OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *outer$, JavaSecurityProvider *capture$0) {
  self->this$0_ = outer$;
  self->val$sigProvider_ = capture$0;
  NSObject_init(self);
}


#line 219
OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3 *new_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_withJavaSecurityProvider_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *outer$, JavaSecurityProvider *capture$0) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3, initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_withJavaSecurityProvider_, outer$, capture$0)
}


#line 219
OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3 *create_OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3_initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_withJavaSecurityProvider_(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl *outer$, JavaSecurityProvider *capture$0) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_3, initWithOrgBouncycastleJcajceProviderAsymmetricX509X509CRLImpl_withJavaSecurityProvider_, outer$, capture$0)
}
