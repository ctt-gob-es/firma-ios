//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/ECUtils.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/math/BigInteger.h"
#include "java/security/PublicKey.h"
#include "java/security/spec/ECGenParameterSpec.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/ECPoint.h"
#include "java/security/spec/EllipticCurve.h"
#include "java/util/Map.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/DERNull.h"
#include "org/bouncycastle/asn1/x9/X962Parameters.h"
#include "org/bouncycastle/asn1/x9/X9ECParameters.h"
#include "org/bouncycastle/asn1/x9/X9ECPoint.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/ec/BCECPublicKey.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/ec/ECUtils.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/util/EC5Util.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/util/ECUtil.h"
#include "org/bouncycastle/jcajce/provider/config/ProviderConfiguration.h"
#include "org/bouncycastle/jce/spec/ECNamedCurveSpec.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECPoint.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/jcajce/provider/asymmetric/ec/ECUtils must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleJcajceProviderAsymmetricEcECUtils ()

+ (OrgBouncycastleAsn1ASN1ObjectIdentifier *)getOIDWithNSString:(NSString *)curveName;

@end

__attribute__((unused)) static OrgBouncycastleAsn1ASN1ObjectIdentifier *OrgBouncycastleJcajceProviderAsymmetricEcECUtils_getOIDWithNSString_(NSString *curveName);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/ECUtils.java"


#line 22
@implementation OrgBouncycastleJcajceProviderAsymmetricEcECUtils


#line 22
- (instancetype)initPackagePrivate {
  OrgBouncycastleJcajceProviderAsymmetricEcECUtils_initPackagePrivate(self);
  return self;
}


#line 24
+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePublicKeyParameterWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  return OrgBouncycastleJcajceProviderAsymmetricEcECUtils_generatePublicKeyParameterWithJavaSecurityPublicKey_(key);
}


#line 31
+ (OrgBouncycastleAsn1X9X9ECParameters *)getDomainParametersFromGenSpecWithJavaSecuritySpecECGenParameterSpec:(JavaSecuritySpecECGenParameterSpec *)genSpec
                                                 withOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  return OrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromGenSpecWithJavaSecuritySpecECGenParameterSpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(genSpec, configuration);
}

+ (OrgBouncycastleAsn1X9X9ECParameters *)getDomainParametersFromNameWithNSString:(NSString *)curveName
                    withOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  return OrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromNameWithNSString_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(curveName, configuration);
}


#line 69
+ (OrgBouncycastleAsn1X9X962Parameters *)getDomainParametersFromNameWithJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)ecSpec
                                                                                            withBoolean:(jboolean)withCompression {
  return OrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromNameWithJavaSecuritySpecECParameterSpec_withBoolean_(ecSpec, withCompression);
}


#line 103
+ (OrgBouncycastleAsn1ASN1ObjectIdentifier *)getOIDWithNSString:(NSString *)curveName {
  return OrgBouncycastleJcajceProviderAsymmetricEcECUtils_getOIDWithNSString_(curveName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x8, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X9X9ECParameters;", 0x8, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X9X9ECParameters;", 0x8, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X9X962Parameters;", 0x8, 5, 7, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", 0xa, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(generatePublicKeyParameterWithJavaSecurityPublicKey:);
  methods[2].selector = @selector(getDomainParametersFromGenSpecWithJavaSecuritySpecECGenParameterSpec:withOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[3].selector = @selector(getDomainParametersFromNameWithNSString:withOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[4].selector = @selector(getDomainParametersFromNameWithJavaSecuritySpecECParameterSpec:withBoolean:);
  methods[5].selector = @selector(getOIDWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "generatePublicKeyParameter", "LJavaSecurityPublicKey;", "LJavaSecurityInvalidKeyException;", "getDomainParametersFromGenSpec", "LJavaSecuritySpecECGenParameterSpec;LOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "getDomainParametersFromName", "LNSString;LOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "LJavaSecuritySpecECParameterSpec;Z", "getOID", "LNSString;" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricEcECUtils = { "ECUtils", "org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x0, 6, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricEcECUtils;
}

@end


#line 22
void OrgBouncycastleJcajceProviderAsymmetricEcECUtils_initPackagePrivate(OrgBouncycastleJcajceProviderAsymmetricEcECUtils *self) {
  NSObject_init(self);
}


#line 22
OrgBouncycastleJcajceProviderAsymmetricEcECUtils *new_OrgBouncycastleJcajceProviderAsymmetricEcECUtils_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcECUtils, initPackagePrivate)
}


#line 22
OrgBouncycastleJcajceProviderAsymmetricEcECUtils *create_OrgBouncycastleJcajceProviderAsymmetricEcECUtils_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcECUtils, initPackagePrivate)
}


#line 24
OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastleJcajceProviderAsymmetricEcECUtils_generatePublicKeyParameterWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> key) {
  OrgBouncycastleJcajceProviderAsymmetricEcECUtils_initialize();
  
#line 28
  return ([key isKindOfClass:[OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey class]]) ? [((OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *) nil_chk(((OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *) cast_chk(key, [OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey class])))) engineGetKeyParameters] : OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(key);
}

OrgBouncycastleAsn1X9X9ECParameters *OrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromGenSpecWithJavaSecuritySpecECGenParameterSpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(JavaSecuritySpecECGenParameterSpec *genSpec, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  OrgBouncycastleJcajceProviderAsymmetricEcECUtils_initialize();
  return OrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromNameWithNSString_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_([((JavaSecuritySpecECGenParameterSpec *) nil_chk(genSpec)) getName], configuration);
}

OrgBouncycastleAsn1X9X9ECParameters *OrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromNameWithNSString_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *curveName, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  OrgBouncycastleJcajceProviderAsymmetricEcECUtils_initialize();
  if (nil == curveName || [curveName java_length] < 1) {
    
#line 40
    return nil;
  }
  
#line 43
  jint spacePos = [curveName java_indexOf:' '];
  if (spacePos > 0) {
    
#line 46
    curveName = [curveName java_substring:spacePos + 1];
  }
  
#line 49
  OrgBouncycastleAsn1ASN1ObjectIdentifier *oid = OrgBouncycastleJcajceProviderAsymmetricEcECUtils_getOIDWithNSString_(curveName);
  if (nil == oid) {
    
#line 52
    return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNamedCurveByNameWithNSString_(curveName);
  }
  
#line 55
  OrgBouncycastleAsn1X9X9ECParameters *x9 = OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNamedCurveByOidWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
  if (nil == x9) {
    
#line 58
    if (nil != configuration) {
      
#line 60
      id<JavaUtilMap> extraCurves = [configuration getAdditionalECParameters];
      
#line 62
      x9 = (OrgBouncycastleAsn1X9X9ECParameters *) cast_chk([((id<JavaUtilMap>) nil_chk(extraCurves)) getWithId:oid], [OrgBouncycastleAsn1X9X9ECParameters class]);
    }
  }
  
#line 66
  return x9;
}


#line 69
OrgBouncycastleAsn1X9X962Parameters *OrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromNameWithJavaSecuritySpecECParameterSpec_withBoolean_(JavaSecuritySpecECParameterSpec *ecSpec, jboolean withCompression) {
  OrgBouncycastleJcajceProviderAsymmetricEcECUtils_initialize();
  OrgBouncycastleAsn1X9X962Parameters *params;
  
#line 73
  if ([ecSpec isKindOfClass:[OrgBouncycastleJceSpecECNamedCurveSpec class]]) {
    
#line 75
    OrgBouncycastleAsn1ASN1ObjectIdentifier *curveOid = OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNamedCurveOidWithNSString_([((OrgBouncycastleJceSpecECNamedCurveSpec *) nil_chk(((OrgBouncycastleJceSpecECNamedCurveSpec *) ecSpec))) getName]);
    if (curveOid == nil) {
      
#line 78
      curveOid = new_OrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_([((OrgBouncycastleJceSpecECNamedCurveSpec *) nil_chk(((OrgBouncycastleJceSpecECNamedCurveSpec *) ecSpec))) getName]);
    }
    params = new_OrgBouncycastleAsn1X9X962Parameters_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(curveOid);
  }
  else if (ecSpec == nil) {
    
#line 84
    params = new_OrgBouncycastleAsn1X9X962Parameters_initWithOrgBouncycastleAsn1ASN1Null_(JreLoadStatic(OrgBouncycastleAsn1DERNull, INSTANCE));
  }
  else {
    
#line 88
    OrgBouncycastleMathEcECCurve *curve = OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithJavaSecuritySpecEllipticCurve_([ecSpec getCurve]);
    
#line 90
    OrgBouncycastleAsn1X9X9ECParameters *ecP = new_OrgBouncycastleAsn1X9X9ECParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleAsn1X9X9ECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(
#line 91
    curve, new_OrgBouncycastleAsn1X9X9ECPoint_initWithOrgBouncycastleMathEcECPoint_withBoolean_(OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithOrgBouncycastleMathEcECCurve_withJavaSecuritySpecECPoint_(
#line 92
    curve, [ecSpec getGenerator]), withCompression),
#line 93
    [ecSpec getOrder], JavaMathBigInteger_valueOfWithLong_(
#line 94
    [ecSpec getCofactor]),
#line 95
    [((JavaSecuritySpecEllipticCurve *) nil_chk([ecSpec getCurve])) getSeed]);
    
#line 97
    params = new_OrgBouncycastleAsn1X9X962Parameters_initWithOrgBouncycastleAsn1X9X9ECParameters_(ecP);
  }
  
#line 100
  return params;
}


#line 103
OrgBouncycastleAsn1ASN1ObjectIdentifier *OrgBouncycastleJcajceProviderAsymmetricEcECUtils_getOIDWithNSString_(NSString *curveName) {
  OrgBouncycastleJcajceProviderAsymmetricEcECUtils_initialize();
  jchar firstChar = [((NSString *) nil_chk(curveName)) charAtWithInt:0];
  if (firstChar >= '0' && firstChar <= '2') {
    
#line 108
    @try {
      
#line 110
      return new_OrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_(curveName);
    }
    @catch (JavaLangException *e) {
    }
  }
  
#line 116
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleJcajceProviderAsymmetricEcECUtils)
