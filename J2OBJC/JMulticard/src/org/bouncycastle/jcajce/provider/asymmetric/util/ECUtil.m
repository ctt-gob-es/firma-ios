//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/util/ECUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/reflect/Method.h"
#include "java/math/BigInteger.h"
#include "java/security/AccessController.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PrivilegedAction.h"
#include "java/security/PublicKey.h"
#include "java/security/interfaces/ECPrivateKey.h"
#include "java/security/interfaces/ECPublicKey.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/ECPoint.h"
#include "java/util/Enumeration.h"
#include "java/util/Map.h"
#include "org/bouncycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/pkcs/PrivateKeyInfo.h"
#include "org/bouncycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/bouncycastle/asn1/x9/ECNamedCurveTable.h"
#include "org/bouncycastle/asn1/x9/X962Parameters.h"
#include "org/bouncycastle/asn1/x9/X9ECParameters.h"
#include "org/bouncycastle/crypto/ec/CustomNamedCurves.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/crypto/params/ECDomainParameters.h"
#include "org/bouncycastle/crypto/params/ECNamedDomainParameters.h"
#include "org/bouncycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/bouncycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/util/EC5Util.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/util/ECUtil.h"
#include "org/bouncycastle/jcajce/provider/config/ProviderConfiguration.h"
#include "org/bouncycastle/jce/interfaces/ECPrivateKey.h"
#include "org/bouncycastle/jce/interfaces/ECPublicKey.h"
#include "org/bouncycastle/jce/provider/BouncyCastleProvider.h"
#include "org/bouncycastle/jce/spec/ECNamedCurveParameterSpec.h"
#include "org/bouncycastle/jce/spec/ECParameterSpec.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECFieldElement.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/FixedPointCombMultiplier.h"
#include "org/bouncycastle/util/Arrays.h"
#include "org/bouncycastle/util/Fingerprint.h"
#include "org/bouncycastle/util/Strings.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/jcajce/provider/asymmetric/util/ECUtil must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgBouncycastleJcajceProviderAsymmetricUtilECUtil ()

+ (OrgBouncycastleAsn1ASN1ObjectIdentifier *)getOIDWithNSString:(NSString *)curveName;

@end

__attribute__((unused)) static OrgBouncycastleAsn1ASN1ObjectIdentifier *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getOIDWithNSString_(NSString *curveName);

@interface OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1 : NSObject < JavaSecurityPrivilegedAction > {
 @public
  id<JavaSecuritySpecAlgorithmParameterSpec> val$paramSpec_;
}

- (instancetype)initWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)capture$0;

- (id)run;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1)

__attribute__((unused)) static void OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1_initWithJavaSecuritySpecAlgorithmParameterSpec_(OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1 *self, id<JavaSecuritySpecAlgorithmParameterSpec> capture$0);

__attribute__((unused)) static OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1 *new_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1_initWithJavaSecuritySpecAlgorithmParameterSpec_(id<JavaSecuritySpecAlgorithmParameterSpec> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1 *create_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1_initWithJavaSecuritySpecAlgorithmParameterSpec_(id<JavaSecuritySpecAlgorithmParameterSpec> capture$0);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/util/ECUtil.java"


#line 43
@implementation OrgBouncycastleJcajceProviderAsymmetricUtilECUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 43
- (instancetype)init {
  OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 52
+ (IOSIntArray *)convertMidTermsWithIntArray:(IOSIntArray *)k {
  return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_convertMidTermsWithIntArray_(k);
}


#line 115
+ (OrgBouncycastleCryptoParamsECDomainParameters *)getDomainParametersWithOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration
                                                                                         withOrgBouncycastleJceSpecECParameterSpec:(OrgBouncycastleJceSpecECParameterSpec *)params {
  return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getDomainParametersWithOrgBouncycastleJcajceProviderConfigProviderConfiguration_withOrgBouncycastleJceSpecECParameterSpec_(configuration, params);
}


#line 142
+ (OrgBouncycastleCryptoParamsECDomainParameters *)getDomainParametersWithOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration
                                                                                           withOrgBouncycastleAsn1X9X962Parameters:(OrgBouncycastleAsn1X9X962Parameters *)params {
  return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getDomainParametersWithOrgBouncycastleJcajceProviderConfigProviderConfiguration_withOrgBouncycastleAsn1X9X962Parameters_(configuration, params);
}


#line 176
+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePublicKeyParameterWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(key);
}


#line 225
+ (OrgBouncycastleCryptoParamsAsymmetricKeyParameter *)generatePrivateKeyParameterWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key {
  return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(key);
}


#line 290
+ (jint)getOrderBitLengthWithOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration
                                                               withJavaMathBigInteger:(JavaMathBigInteger *)order
                                                               withJavaMathBigInteger:(JavaMathBigInteger *)privateValue {
  return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getOrderBitLengthWithOrgBouncycastleJcajceProviderConfigProviderConfiguration_withJavaMathBigInteger_withJavaMathBigInteger_(configuration, order, privateValue);
}


#line 309
+ (OrgBouncycastleAsn1ASN1ObjectIdentifier *)getNamedCurveOidWithNSString:(NSString *)curveName {
  return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNamedCurveOidWithNSString_(curveName);
}


#line 332
+ (OrgBouncycastleAsn1ASN1ObjectIdentifier *)getNamedCurveOidWithOrgBouncycastleJceSpecECParameterSpec:(OrgBouncycastleJceSpecECParameterSpec *)ecParameterSpec {
  return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNamedCurveOidWithOrgBouncycastleJceSpecECParameterSpec_(ecParameterSpec);
}


#line 353
+ (OrgBouncycastleAsn1X9X9ECParameters *)getNamedCurveByOidWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)oid {
  return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNamedCurveByOidWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
}


#line 366
+ (OrgBouncycastleAsn1X9X9ECParameters *)getNamedCurveByNameWithNSString:(NSString *)curveName {
  return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNamedCurveByNameWithNSString_(curveName);
}


#line 379
+ (NSString *)getCurveNameWithOrgBouncycastleAsn1ASN1ObjectIdentifier:(OrgBouncycastleAsn1ASN1ObjectIdentifier *)oid {
  return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getCurveNameWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
}


#line 385
+ (NSString *)privateKeyToStringWithNSString:(NSString *)algorithm
                      withJavaMathBigInteger:(JavaMathBigInteger *)d
   withOrgBouncycastleJceSpecECParameterSpec:(OrgBouncycastleJceSpecECParameterSpec *)spec {
  return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_privateKeyToStringWithNSString_withJavaMathBigInteger_withOrgBouncycastleJceSpecECParameterSpec_(algorithm, d, spec);
}


#line 400
+ (NSString *)publicKeyToStringWithNSString:(NSString *)algorithm
           withOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)q
  withOrgBouncycastleJceSpecECParameterSpec:(OrgBouncycastleJceSpecECParameterSpec *)spec {
  return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_publicKeyToStringWithNSString_withOrgBouncycastleMathEcECPoint_withOrgBouncycastleJceSpecECParameterSpec_(algorithm, q, spec);
}


#line 413
+ (NSString *)generateKeyFingerprintWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)publicPoint
                           withOrgBouncycastleJceSpecECParameterSpec:(OrgBouncycastleJceSpecECParameterSpec *)spec {
  return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_generateKeyFingerprintWithOrgBouncycastleMathEcECPoint_withOrgBouncycastleJceSpecECParameterSpec_(publicPoint, spec);
}


#line 426
+ (NSString *)getNameFromWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)paramSpec {
  return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNameFromWithJavaSecuritySpecAlgorithmParameterSpec_(paramSpec);
}


#line 449
+ (OrgBouncycastleAsn1ASN1ObjectIdentifier *)getOIDWithNSString:(NSString *)curveName {
  return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getOIDWithNSString_(curveName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsECDomainParameters;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsECDomainParameters;", 0x9, 2, 4, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 5, 6, 7, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 8, 9, 7, -1, -1, -1 },
    { NULL, "I", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", 0x9, 12, 14, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X9X9ECParameters;", 0x9, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1X9X9ECParameters;", 0x9, 17, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 18, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 23, 24, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 25, 26, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", 0xa, 27, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertMidTermsWithIntArray:);
  methods[2].selector = @selector(getDomainParametersWithOrgBouncycastleJcajceProviderConfigProviderConfiguration:withOrgBouncycastleJceSpecECParameterSpec:);
  methods[3].selector = @selector(getDomainParametersWithOrgBouncycastleJcajceProviderConfigProviderConfiguration:withOrgBouncycastleAsn1X9X962Parameters:);
  methods[4].selector = @selector(generatePublicKeyParameterWithJavaSecurityPublicKey:);
  methods[5].selector = @selector(generatePrivateKeyParameterWithJavaSecurityPrivateKey:);
  methods[6].selector = @selector(getOrderBitLengthWithOrgBouncycastleJcajceProviderConfigProviderConfiguration:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[7].selector = @selector(getNamedCurveOidWithNSString:);
  methods[8].selector = @selector(getNamedCurveOidWithOrgBouncycastleJceSpecECParameterSpec:);
  methods[9].selector = @selector(getNamedCurveByOidWithOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[10].selector = @selector(getNamedCurveByNameWithNSString:);
  methods[11].selector = @selector(getCurveNameWithOrgBouncycastleAsn1ASN1ObjectIdentifier:);
  methods[12].selector = @selector(privateKeyToStringWithNSString:withJavaMathBigInteger:withOrgBouncycastleJceSpecECParameterSpec:);
  methods[13].selector = @selector(publicKeyToStringWithNSString:withOrgBouncycastleMathEcECPoint:withOrgBouncycastleJceSpecECParameterSpec:);
  methods[14].selector = @selector(generateKeyFingerprintWithOrgBouncycastleMathEcECPoint:withOrgBouncycastleJceSpecECParameterSpec:);
  methods[15].selector = @selector(getNameFromWithJavaSecuritySpecAlgorithmParameterSpec:);
  methods[16].selector = @selector(getOIDWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertMidTerms", "[I", "getDomainParameters", "LOrgBouncycastleJcajceProviderConfigProviderConfiguration;LOrgBouncycastleJceSpecECParameterSpec;", "LOrgBouncycastleJcajceProviderConfigProviderConfiguration;LOrgBouncycastleAsn1X9X962Parameters;", "generatePublicKeyParameter", "LJavaSecurityPublicKey;", "LJavaSecurityInvalidKeyException;", "generatePrivateKeyParameter", "LJavaSecurityPrivateKey;", "getOrderBitLength", "LOrgBouncycastleJcajceProviderConfigProviderConfiguration;LJavaMathBigInteger;LJavaMathBigInteger;", "getNamedCurveOid", "LNSString;", "LOrgBouncycastleJceSpecECParameterSpec;", "getNamedCurveByOid", "LOrgBouncycastleAsn1ASN1ObjectIdentifier;", "getNamedCurveByName", "getCurveName", "privateKeyToString", "LNSString;LJavaMathBigInteger;LOrgBouncycastleJceSpecECParameterSpec;", "publicKeyToString", "LNSString;LOrgBouncycastleMathEcECPoint;LOrgBouncycastleJceSpecECParameterSpec;", "generateKeyFingerprint", "LOrgBouncycastleMathEcECPoint;LOrgBouncycastleJceSpecECParameterSpec;", "getNameFrom", "LJavaSecuritySpecAlgorithmParameterSpec;", "getOID" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricUtilECUtil = { "ECUtil", "org.bouncycastle.jcajce.provider.asymmetric.util", ptrTable, methods, NULL, 7, 0x1, 17, 0, -1, -1, -1, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil;
}

@end


#line 43
void OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_init(OrgBouncycastleJcajceProviderAsymmetricUtilECUtil *self) {
  NSObject_init(self);
}


#line 43
OrgBouncycastleJcajceProviderAsymmetricUtilECUtil *new_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricUtilECUtil, init)
}


#line 43
OrgBouncycastleJcajceProviderAsymmetricUtilECUtil *create_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricUtilECUtil, init)
}


#line 52
IOSIntArray *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_convertMidTermsWithIntArray_(IOSIntArray *k) {
  OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_initialize();
  
#line 55
  IOSIntArray *res = [IOSIntArray newArrayWithLength:3];
  
#line 57
  if (((IOSIntArray *) nil_chk(k))->size_ == 1) {
    
#line 59
    *IOSIntArray_GetRef(res, 0) = IOSIntArray_Get(k, 0);
  }
  else {
    
#line 63
    if (k->size_ != 3) {
      
#line 65
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Only Trinomials and pentanomials supported");
    }
    
#line 68
    if (IOSIntArray_Get(k, 0) < IOSIntArray_Get(k, 1) && IOSIntArray_Get(k, 0) < IOSIntArray_Get(k, 2)) {
      
#line 70
      *IOSIntArray_GetRef(res, 0) = IOSIntArray_Get(k, 0);
      if (IOSIntArray_Get(k, 1) < IOSIntArray_Get(k, 2)) {
        
#line 73
        *IOSIntArray_GetRef(res, 1) = IOSIntArray_Get(k, 1);
        *IOSIntArray_GetRef(res, 2) = IOSIntArray_Get(k, 2);
      }
      else {
        
#line 78
        *IOSIntArray_GetRef(res, 1) = IOSIntArray_Get(k, 2);
        *IOSIntArray_GetRef(res, 2) = IOSIntArray_Get(k, 1);
      }
    }
    else if (IOSIntArray_Get(k, 1) < IOSIntArray_Get(k, 2)) {
      
#line 84
      *IOSIntArray_GetRef(res, 0) = IOSIntArray_Get(k, 1);
      if (IOSIntArray_Get(k, 0) < IOSIntArray_Get(k, 2)) {
        
#line 87
        *IOSIntArray_GetRef(res, 1) = IOSIntArray_Get(k, 0);
        *IOSIntArray_GetRef(res, 2) = IOSIntArray_Get(k, 2);
      }
      else {
        
#line 92
        *IOSIntArray_GetRef(res, 1) = IOSIntArray_Get(k, 2);
        *IOSIntArray_GetRef(res, 2) = IOSIntArray_Get(k, 0);
      }
    }
    else {
      
#line 98
      *IOSIntArray_GetRef(res, 0) = IOSIntArray_Get(k, 2);
      if (IOSIntArray_Get(k, 0) < IOSIntArray_Get(k, 1)) {
        
#line 101
        *IOSIntArray_GetRef(res, 1) = IOSIntArray_Get(k, 0);
        *IOSIntArray_GetRef(res, 2) = IOSIntArray_Get(k, 1);
      }
      else {
        
#line 106
        *IOSIntArray_GetRef(res, 1) = IOSIntArray_Get(k, 1);
        *IOSIntArray_GetRef(res, 2) = IOSIntArray_Get(k, 0);
      }
    }
  }
  
#line 112
  return res;
}


#line 115
OrgBouncycastleCryptoParamsECDomainParameters *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getDomainParametersWithOrgBouncycastleJcajceProviderConfigProviderConfiguration_withOrgBouncycastleJceSpecECParameterSpec_(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration, OrgBouncycastleJceSpecECParameterSpec *params) {
  OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_initialize();
  
#line 119
  OrgBouncycastleCryptoParamsECDomainParameters *domainParameters;
  
#line 121
  if ([params isKindOfClass:[OrgBouncycastleJceSpecECNamedCurveParameterSpec class]]) {
    
#line 123
    OrgBouncycastleJceSpecECNamedCurveParameterSpec *nParams = (OrgBouncycastleJceSpecECNamedCurveParameterSpec *) params;
    OrgBouncycastleAsn1ASN1ObjectIdentifier *nameOid = OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNamedCurveOidWithNSString_([((OrgBouncycastleJceSpecECNamedCurveParameterSpec *) nil_chk(nParams)) getName]);
    
#line 126
    domainParameters = new_OrgBouncycastleCryptoParamsECNamedDomainParameters_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(nameOid, [nParams getCurve], [nParams getG], [nParams getN], [nParams getH], [nParams getSeed]);
  }
  else if (params == nil) {
    
#line 130
    OrgBouncycastleJceSpecECParameterSpec *iSpec = [((id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(configuration)) getEcImplicitlyCa];
    
#line 132
    domainParameters = new_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((OrgBouncycastleJceSpecECParameterSpec *) nil_chk(iSpec)) getCurve], [iSpec getG], [iSpec getN], [iSpec getH], [iSpec getSeed]);
  }
  else {
    
#line 136
    domainParameters = new_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([params getCurve], [params getG], [params getN], [params getH], [params getSeed]);
  }
  
#line 139
  return domainParameters;
}


#line 142
OrgBouncycastleCryptoParamsECDomainParameters *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getDomainParametersWithOrgBouncycastleJcajceProviderConfigProviderConfiguration_withOrgBouncycastleAsn1X9X962Parameters_(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration, OrgBouncycastleAsn1X9X962Parameters *params) {
  OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_initialize();
  
#line 146
  OrgBouncycastleCryptoParamsECDomainParameters *domainParameters;
  
#line 148
  if ([((OrgBouncycastleAsn1X9X962Parameters *) nil_chk(params)) isNamedCurve]) {
    
#line 150
    OrgBouncycastleAsn1ASN1ObjectIdentifier *oid = OrgBouncycastleAsn1ASN1ObjectIdentifier_getInstanceWithId_([params getParameters]);
    OrgBouncycastleAsn1X9X9ECParameters *ecP = OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNamedCurveByOidWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
    if (ecP == nil) {
      
#line 154
      id<JavaUtilMap> extraCurves = [((id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(configuration)) getAdditionalECParameters];
      
#line 156
      ecP = (OrgBouncycastleAsn1X9X9ECParameters *) cast_chk([((id<JavaUtilMap>) nil_chk(extraCurves)) getWithId:oid], [OrgBouncycastleAsn1X9X9ECParameters class]);
    }
    domainParameters = new_OrgBouncycastleCryptoParamsECNamedDomainParameters_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleAsn1X9X9ECParameters_(oid, ecP);
  }
  else if ([params isImplicitlyCA]) {
    
#line 162
    OrgBouncycastleJceSpecECParameterSpec *iSpec = [((id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(configuration)) getEcImplicitlyCa];
    
#line 164
    domainParameters = new_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((OrgBouncycastleJceSpecECParameterSpec *) nil_chk(iSpec)) getCurve], [iSpec getG], [iSpec getN], [iSpec getH], [iSpec getSeed]);
  }
  else {
    
#line 168
    OrgBouncycastleAsn1X9X9ECParameters *ecP = OrgBouncycastleAsn1X9X9ECParameters_getInstanceWithId_([params getParameters]);
    
#line 170
    domainParameters = new_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((OrgBouncycastleAsn1X9X9ECParameters *) nil_chk(ecP)) getCurve], [ecP getG], [ecP getN], [ecP getH], [ecP getSeed]);
  }
  
#line 173
  return domainParameters;
}


#line 176
OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> key) {
  OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_initialize();
  
#line 180
  if ([OrgBouncycastleJceInterfacesECPublicKey_class_() isInstance:key]) {
    
#line 182
    id<OrgBouncycastleJceInterfacesECPublicKey> k = (id<OrgBouncycastleJceInterfacesECPublicKey>) cast_check(key, OrgBouncycastleJceInterfacesECPublicKey_class_());
    OrgBouncycastleJceSpecECParameterSpec *s = [((id<OrgBouncycastleJceInterfacesECPublicKey>) nil_chk(k)) getParameters];
    
#line 185
    return new_OrgBouncycastleCryptoParamsECPublicKeyParameters_initWithOrgBouncycastleMathEcECPoint_withOrgBouncycastleCryptoParamsECDomainParameters_(
#line 186
    [k getQ], new_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(
#line 187
    [((OrgBouncycastleJceSpecECParameterSpec *) nil_chk(s)) getCurve], [s getG], [s getN], [s getH], [s getSeed]));
  }
  else if ([JavaSecurityInterfacesECPublicKey_class_() isInstance:key]) {
    
#line 191
    id<JavaSecurityInterfacesECPublicKey> pubKey = (id<JavaSecurityInterfacesECPublicKey>) cast_check(key, JavaSecurityInterfacesECPublicKey_class_());
    OrgBouncycastleJceSpecECParameterSpec *s = OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_([((id<JavaSecurityInterfacesECPublicKey>) nil_chk(pubKey)) getParams]);
    return new_OrgBouncycastleCryptoParamsECPublicKeyParameters_initWithOrgBouncycastleMathEcECPoint_withOrgBouncycastleCryptoParamsECDomainParameters_(OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithJavaSecuritySpecECParameterSpec_withJavaSecuritySpecECPoint_(
#line 194
    [pubKey getParams], [pubKey getW]), new_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(
#line 195
    [((OrgBouncycastleJceSpecECParameterSpec *) nil_chk(s)) getCurve], [s getG], [s getN], [s getH], [s getSeed]));
  }
  else {
    
#line 200
    @try {
      
#line 202
      IOSByteArray *bytes = [((id<JavaSecurityPublicKey>) nil_chk(key)) getEncoded];
      
#line 204
      if (bytes == nil) {
        
#line 206
        @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"no encoding for EC public key");
      }
      
#line 209
      id<JavaSecurityPublicKey> publicKey = OrgBouncycastleJceProviderBouncyCastleProvider_getPublicKeyWithOrgBouncycastleAsn1X509SubjectPublicKeyInfo_(OrgBouncycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(bytes));
      
#line 211
      if ([JavaSecurityInterfacesECPublicKey_class_() isInstance:publicKey]) {
        
#line 213
        return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(publicKey);
      }
    }
    @catch (JavaLangException *e) {
      
#line 218
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"cannot identify EC public key: ", [e description]));
    }
  }
  
#line 222
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"cannot identify EC public key.");
}


#line 225
OrgBouncycastleCryptoParamsAsymmetricKeyParameter *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(id<JavaSecurityPrivateKey> key) {
  OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_initialize();
  
#line 229
  if ([OrgBouncycastleJceInterfacesECPrivateKey_class_() isInstance:key]) {
    
#line 231
    id<OrgBouncycastleJceInterfacesECPrivateKey> k = (id<OrgBouncycastleJceInterfacesECPrivateKey>) cast_check(key, OrgBouncycastleJceInterfacesECPrivateKey_class_());
    OrgBouncycastleJceSpecECParameterSpec *s = [((id<OrgBouncycastleJceInterfacesECPrivateKey>) nil_chk(k)) getParameters];
    
#line 234
    if (s == nil) {
      
#line 236
      s = [((id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(JreLoadStatic(OrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa];
    }
    
#line 239
    if ([[k getParameters] isKindOfClass:[OrgBouncycastleJceSpecECNamedCurveParameterSpec class]]) {
      
#line 241
      NSString *name = [((OrgBouncycastleJceSpecECNamedCurveParameterSpec *) nil_chk(((OrgBouncycastleJceSpecECNamedCurveParameterSpec *) cast_chk([k getParameters], [OrgBouncycastleJceSpecECNamedCurveParameterSpec class])))) getName];
      return new_OrgBouncycastleCryptoParamsECPrivateKeyParameters_initWithJavaMathBigInteger_withOrgBouncycastleCryptoParamsECDomainParameters_(
#line 243
      [k getD], new_OrgBouncycastleCryptoParamsECNamedDomainParameters_initWithOrgBouncycastleAsn1ASN1ObjectIdentifier_withOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(OrgBouncycastleAsn1X9ECNamedCurveTable_getOIDWithNSString_(
#line 244
      name),
#line 245
      [((OrgBouncycastleJceSpecECParameterSpec *) nil_chk(s)) getCurve], [s getG], [s getN], [s getH], [s getSeed]));
    }
    else {
      
#line 249
      return new_OrgBouncycastleCryptoParamsECPrivateKeyParameters_initWithJavaMathBigInteger_withOrgBouncycastleCryptoParamsECDomainParameters_(
#line 250
      [k getD], new_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(
#line 251
      [((OrgBouncycastleJceSpecECParameterSpec *) nil_chk(s)) getCurve], [s getG], [s getN], [s getH], [s getSeed]));
    }
  }
  else if ([JavaSecurityInterfacesECPrivateKey_class_() isInstance:key]) {
    
#line 256
    id<JavaSecurityInterfacesECPrivateKey> privKey = (id<JavaSecurityInterfacesECPrivateKey>) cast_check(key, JavaSecurityInterfacesECPrivateKey_class_());
    OrgBouncycastleJceSpecECParameterSpec *s = OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_([((id<JavaSecurityInterfacesECPrivateKey>) nil_chk(privKey)) getParams]);
    return new_OrgBouncycastleCryptoParamsECPrivateKeyParameters_initWithJavaMathBigInteger_withOrgBouncycastleCryptoParamsECDomainParameters_(
#line 259
    [privKey getS], new_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(
#line 260
    [((OrgBouncycastleJceSpecECParameterSpec *) nil_chk(s)) getCurve], [s getG], [s getN], [s getH], [s getSeed]));
  }
  else {
    
#line 265
    @try {
      
#line 267
      IOSByteArray *bytes = [((id<JavaSecurityPrivateKey>) nil_chk(key)) getEncoded];
      
#line 269
      if (bytes == nil) {
        
#line 271
        @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"no encoding for EC private key");
      }
      
#line 274
      id<JavaSecurityPrivateKey> privateKey = OrgBouncycastleJceProviderBouncyCastleProvider_getPrivateKeyWithOrgBouncycastleAsn1PkcsPrivateKeyInfo_(OrgBouncycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_(bytes));
      
#line 276
      if ([JavaSecurityInterfacesECPrivateKey_class_() isInstance:privateKey]) {
        
#line 278
        return OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(privateKey);
      }
    }
    @catch (JavaLangException *e) {
      
#line 283
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"cannot identify EC private key: ", [e description]));
    }
  }
  
#line 287
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"can't identify EC private key.");
}


#line 290
jint OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getOrderBitLengthWithOrgBouncycastleJcajceProviderConfigProviderConfiguration_withJavaMathBigInteger_withJavaMathBigInteger_(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration, JavaMathBigInteger *order, JavaMathBigInteger *privateValue) {
  OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_initialize();
  if (order == nil) {
    
#line 294
    OrgBouncycastleJceSpecECParameterSpec *implicitCA = [((id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(configuration)) getEcImplicitlyCa];
    
#line 296
    if (implicitCA == nil) {
      
#line 298
      return [((JavaMathBigInteger *) nil_chk(privateValue)) bitLength];
    }
    
#line 301
    return [((JavaMathBigInteger *) nil_chk([implicitCA getN])) bitLength];
  }
  else {
    
#line 305
    return [order bitLength];
  }
}


#line 309
OrgBouncycastleAsn1ASN1ObjectIdentifier *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNamedCurveOidWithNSString_(NSString *curveName) {
  OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_initialize();
  
#line 312
  if (nil == curveName || [curveName java_length] < 1) {
    
#line 314
    return nil;
  }
  
#line 317
  jint spacePos = [curveName java_indexOf:' '];
  if (spacePos > 0) {
    
#line 320
    curveName = [curveName java_substring:spacePos + 1];
  }
  
#line 323
  OrgBouncycastleAsn1ASN1ObjectIdentifier *oid = OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getOIDWithNSString_(curveName);
  if (nil != oid) {
    
#line 326
    return oid;
  }
  
#line 329
  return OrgBouncycastleAsn1X9ECNamedCurveTable_getOIDWithNSString_(curveName);
}


#line 332
OrgBouncycastleAsn1ASN1ObjectIdentifier *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNamedCurveOidWithOrgBouncycastleJceSpecECParameterSpec_(OrgBouncycastleJceSpecECParameterSpec *ecParameterSpec) {
  OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_initialize();
  
#line 335
  for (id<JavaUtilEnumeration> names = OrgBouncycastleAsn1X9ECNamedCurveTable_getNames(); [((id<JavaUtilEnumeration>) nil_chk(names)) hasMoreElements]; ) {
    
#line 337
    NSString *name = (NSString *) cast_chk([names nextElement], [NSString class]);
    
#line 339
    OrgBouncycastleAsn1X9X9ECParameters *params = OrgBouncycastleAsn1X9ECNamedCurveTable_getByNameWithNSString_(name);
    
#line 341
    if ([((JavaMathBigInteger *) nil_chk([((OrgBouncycastleAsn1X9X9ECParameters *) nil_chk(params)) getN])) isEqual:[((OrgBouncycastleJceSpecECParameterSpec *) nil_chk(ecParameterSpec)) getN]] &&
#line 342
    [((JavaMathBigInteger *) nil_chk([params getH])) isEqual:[ecParameterSpec getH]] &&
#line 343
    [((OrgBouncycastleMathEcECCurve *) nil_chk([params getCurve])) equalsWithOrgBouncycastleMathEcECCurve:[ecParameterSpec getCurve]] &&
#line 344
    [((OrgBouncycastleMathEcECPoint *) nil_chk([params getG])) equalsWithOrgBouncycastleMathEcECPoint:[ecParameterSpec getG]]) {
      
#line 346
      return OrgBouncycastleAsn1X9ECNamedCurveTable_getOIDWithNSString_(name);
    }
  }
  
#line 350
  return nil;
}


#line 353
OrgBouncycastleAsn1X9X9ECParameters *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNamedCurveByOidWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(OrgBouncycastleAsn1ASN1ObjectIdentifier *oid) {
  OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_initialize();
  
#line 356
  OrgBouncycastleAsn1X9X9ECParameters *params = OrgBouncycastleCryptoEcCustomNamedCurves_getByOIDWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
  
#line 358
  if (params == nil) {
    
#line 360
    params = OrgBouncycastleAsn1X9ECNamedCurveTable_getByOIDWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
  }
  
#line 363
  return params;
}


#line 366
OrgBouncycastleAsn1X9X9ECParameters *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNamedCurveByNameWithNSString_(NSString *curveName) {
  OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_initialize();
  
#line 369
  OrgBouncycastleAsn1X9X9ECParameters *params = OrgBouncycastleCryptoEcCustomNamedCurves_getByNameWithNSString_(curveName);
  
#line 371
  if (params == nil) {
    
#line 373
    params = OrgBouncycastleAsn1X9ECNamedCurveTable_getByNameWithNSString_(curveName);
  }
  
#line 376
  return params;
}


#line 379
NSString *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getCurveNameWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(OrgBouncycastleAsn1ASN1ObjectIdentifier *oid) {
  OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_initialize();
  
#line 382
  return OrgBouncycastleAsn1X9ECNamedCurveTable_getNameWithOrgBouncycastleAsn1ASN1ObjectIdentifier_(oid);
}


#line 385
NSString *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_privateKeyToStringWithNSString_withJavaMathBigInteger_withOrgBouncycastleJceSpecECParameterSpec_(NSString *algorithm, JavaMathBigInteger *d, OrgBouncycastleJceSpecECParameterSpec *spec) {
  OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_initialize();
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  NSString *nl = OrgBouncycastleUtilStrings_lineSeparator();
  
#line 390
  OrgBouncycastleMathEcECPoint *q = [((OrgBouncycastleMathEcECPoint *) nil_chk([new_OrgBouncycastleMathEcFixedPointCombMultiplier_init() multiplyWithOrgBouncycastleMathEcECPoint:[((OrgBouncycastleJceSpecECParameterSpec *) nil_chk(spec)) getG] withJavaMathBigInteger:d])) normalize];
  
#line 392
  (void) [buf appendWithNSString:algorithm];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" Private Key ["])) appendWithNSString:OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_generateKeyFingerprintWithOrgBouncycastleMathEcECPoint_withOrgBouncycastleJceSpecECParameterSpec_(q, spec)])) appendWithNSString:@"]"])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            X: "])) appendWithNSString:[((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk(q)) getAffineXCoord])) toBigInteger])) toStringWithInt:16]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            Y: "])) appendWithNSString:[((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([q getAffineYCoord])) toBigInteger])) toStringWithInt:16]])) appendWithNSString:nl];
  
#line 397
  return [buf description];
}


#line 400
NSString *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_publicKeyToStringWithNSString_withOrgBouncycastleMathEcECPoint_withOrgBouncycastleJceSpecECParameterSpec_(NSString *algorithm, OrgBouncycastleMathEcECPoint *q, OrgBouncycastleJceSpecECParameterSpec *spec) {
  OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_initialize();
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  NSString *nl = OrgBouncycastleUtilStrings_lineSeparator();
  
#line 405
  (void) [buf appendWithNSString:algorithm];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" Public Key ["])) appendWithNSString:OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_generateKeyFingerprintWithOrgBouncycastleMathEcECPoint_withOrgBouncycastleJceSpecECParameterSpec_(q, spec)])) appendWithNSString:@"]"])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            X: "])) appendWithNSString:[((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk(q)) getAffineXCoord])) toBigInteger])) toStringWithInt:16]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            Y: "])) appendWithNSString:[((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([q getAffineYCoord])) toBigInteger])) toStringWithInt:16]])) appendWithNSString:nl];
  
#line 410
  return [buf description];
}


#line 413
NSString *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_generateKeyFingerprintWithOrgBouncycastleMathEcECPoint_withOrgBouncycastleJceSpecECParameterSpec_(OrgBouncycastleMathEcECPoint *publicPoint, OrgBouncycastleJceSpecECParameterSpec *spec) {
  OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_initialize();
  OrgBouncycastleMathEcECCurve *curve = [((OrgBouncycastleJceSpecECParameterSpec *) nil_chk(spec)) getCurve];
  OrgBouncycastleMathEcECPoint *g = [spec getG];
  
#line 418
  if (curve != nil) {
    
#line 420
    return [new_OrgBouncycastleUtilFingerprint_initWithByteArray_(OrgBouncycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_withByteArray_([((OrgBouncycastleMathEcECPoint *) nil_chk(publicPoint)) getEncodedWithBoolean:false], [((OrgBouncycastleMathEcECFieldElement *) nil_chk([curve getA])) getEncoded], [((OrgBouncycastleMathEcECFieldElement *) nil_chk([curve getB])) getEncoded], [((OrgBouncycastleMathEcECPoint *) nil_chk(g)) getEncodedWithBoolean:false])) description];
  }
  
#line 423
  return [new_OrgBouncycastleUtilFingerprint_initWithByteArray_([((OrgBouncycastleMathEcECPoint *) nil_chk(publicPoint)) getEncodedWithBoolean:false]) description];
}


#line 426
NSString *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNameFromWithJavaSecuritySpecAlgorithmParameterSpec_(id<JavaSecuritySpecAlgorithmParameterSpec> paramSpec) {
  OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_initialize();
  return (NSString *) cast_chk(JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedAction_(new_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1_initWithJavaSecuritySpecAlgorithmParameterSpec_(paramSpec)), [NSString class]);
}


#line 449
OrgBouncycastleAsn1ASN1ObjectIdentifier *OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getOIDWithNSString_(NSString *curveName) {
  OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_initialize();
  jchar firstChar = [((NSString *) nil_chk(curveName)) charAtWithInt:0];
  if (firstChar >= '0' && firstChar <= '2') {
    
#line 454
    @try {
      
#line 456
      return new_OrgBouncycastleAsn1ASN1ObjectIdentifier_initWithNSString_(curveName);
    }
    @catch (JavaLangException *e) {
    }
  }
  
#line 462
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleJcajceProviderAsymmetricUtilECUtil)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/util/ECUtil.java"


#line 429
@implementation OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1


#line 429
- (instancetype)initWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)capture$0 {
  OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1_initWithJavaSecuritySpecAlgorithmParameterSpec_(self, capture$0);
  return self;
}


#line 430
- (id)run {
  
#line 433
  @try {
    
#line 435
    JavaLangReflectMethod *m = [[((id<JavaSecuritySpecAlgorithmParameterSpec>) nil_chk(val$paramSpec_)) java_getClass] getMethod:@"getName" parameterTypes:[IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()]];
    
#line 437
    return JreRetainedLocalValue([((JavaLangReflectMethod *) nil_chk(m)) invokeWithId:val$paramSpec_ withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]]);
  }
  @catch (JavaLangException *e) {
  }
  
#line 444
  return JreRetainedLocalValue(nil);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaSecuritySpecAlgorithmParameterSpec:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$paramSpec_", "LJavaSecuritySpecAlgorithmParameterSpec;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecuritySpecAlgorithmParameterSpec;", "LOrgBouncycastleJcajceProviderAsymmetricUtilECUtil;", "getNameFromWithJavaSecuritySpecAlgorithmParameterSpec:" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1 = { "", "org.bouncycastle.jcajce.provider.asymmetric.util", ptrTable, methods, fields, 7, 0x8000, 2, 1, 1, -1, 2, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1;
}

@end


#line 429
void OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1_initWithJavaSecuritySpecAlgorithmParameterSpec_(OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1 *self, id<JavaSecuritySpecAlgorithmParameterSpec> capture$0) {
  self->val$paramSpec_ = capture$0;
  NSObject_init(self);
}


#line 429
OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1 *new_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1_initWithJavaSecuritySpecAlgorithmParameterSpec_(id<JavaSecuritySpecAlgorithmParameterSpec> capture$0) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1, initWithJavaSecuritySpecAlgorithmParameterSpec_, capture$0)
}


#line 429
OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1 *create_OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1_initWithJavaSecuritySpecAlgorithmParameterSpec_(id<JavaSecuritySpecAlgorithmParameterSpec> capture$0) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_1, initWithJavaSecuritySpecAlgorithmParameterSpec_, capture$0)
}
