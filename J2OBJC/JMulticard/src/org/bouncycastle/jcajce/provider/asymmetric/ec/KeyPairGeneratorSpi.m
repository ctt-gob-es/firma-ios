//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyPairGeneratorSpi.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidParameterException.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "java/security/spec/ECGenParameterSpec.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/ECPoint.h"
#include "java/security/spec/EllipticCurve.h"
#include "java/util/Hashtable.h"
#include "org/bouncycastle/asn1/x9/X9ECParameters.h"
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/bouncycastle/crypto/CryptoServicesRegistrar.h"
#include "org/bouncycastle/crypto/generators/ECKeyPairGenerator.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/crypto/params/ECDomainParameters.h"
#include "org/bouncycastle/crypto/params/ECKeyGenerationParameters.h"
#include "org/bouncycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/bouncycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/ec/BCECPrivateKey.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/ec/BCECPublicKey.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/ec/ECUtils.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/ec/KeyPairGeneratorSpi.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/util/EC5Util.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/util/ECUtil.h"
#include "org/bouncycastle/jcajce/provider/config/ProviderConfiguration.h"
#include "org/bouncycastle/jce/provider/BouncyCastleProvider.h"
#include "org/bouncycastle/jce/spec/ECNamedCurveGenParameterSpec.h"
#include "org/bouncycastle/jce/spec/ECNamedCurveSpec.h"
#include "org/bouncycastle/jce/spec/ECParameterSpec.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/util/Integers.h"

#if !__has_feature(objc_arc)
#error "org/bouncycastle/jcajce/provider/asymmetric/ec/KeyPairGeneratorSpi must be compiled with ARC (-fobjc-arc)"
#endif

inline JavaUtilHashtable *OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_get_ecParameters(void);
inline JavaUtilHashtable *OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_set_ecParameters(JavaUtilHashtable *value);
static JavaUtilHashtable *OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_ecParameters;
J2OBJC_STATIC_FIELD_OBJ(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC, ecParameters, JavaUtilHashtable *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyPairGeneratorSpi.java"


#line 31
@implementation OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi


#line 34
- (instancetype)initWithNSString:(NSString *)algorithmName {
  OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_initWithNSString_(self, algorithmName);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LOrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC;LOrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDSA;LOrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDH;LOrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDHC;LOrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECMQV;" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi = { "KeyPairGeneratorSpi", "org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x401, 1, 0, -1, 1, -1, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi;
}

@end


#line 34
void OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_initWithNSString_(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi *self, NSString *algorithmName) {
  JavaSecurityKeyPairGenerator_initWithNSString_(self,
#line 36
  algorithmName);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyPairGeneratorSpi.java"

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC)


#line 39
@implementation OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 66
- (instancetype)init {
  OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 73
- (instancetype)initWithNSString:(NSString *)algorithm
withOrgBouncycastleJcajceProviderConfigProviderConfiguration:(id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>)configuration {
  OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_initWithNSString_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self, algorithm, configuration);
  return self;
}


#line 82
- (void)initialize__WithInt:(jint)strength
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  
#line 87
  self->strength_ = strength;
  self->random_ = random;
  
#line 90
  JavaSecuritySpecECGenParameterSpec *ecParams = (JavaSecuritySpecECGenParameterSpec *) cast_chk([((JavaUtilHashtable *) nil_chk(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_ecParameters)) getWithId:OrgBouncycastleUtilIntegers_valueOfWithInt_(strength)], [JavaSecuritySpecECGenParameterSpec class]);
  if (ecParams == nil) {
    
#line 93
    @throw new_JavaSecurityInvalidParameterException_initWithNSString_(@"unknown key size.");
  }
  
#line 96
  @try {
    
#line 98
    [self initialize__WithJavaSecuritySpecAlgorithmParameterSpec:ecParams withJavaSecuritySecureRandom:random];
  }
  @catch (JavaSecurityInvalidAlgorithmParameterException *e) {
    
#line 102
    @throw new_JavaSecurityInvalidParameterException_initWithNSString_(@"key size not configurable.");
  }
}


#line 106
- (void)initialize__WithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                                  withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  
#line 112
  if (params == nil) {
    
#line 114
    OrgBouncycastleJceSpecECParameterSpec *implicitCA = [((id<OrgBouncycastleJcajceProviderConfigProviderConfiguration>) nil_chk(configuration_)) getEcImplicitlyCa];
    if (implicitCA == nil) {
      
#line 117
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"null parameter passed but no implicitCA set");
    }
    
#line 120
    self->ecParams_ = nil;
    self->param_ = [self createKeyGenParamsBCWithOrgBouncycastleJceSpecECParameterSpec:implicitCA withJavaSecuritySecureRandom:random];
  }
  else if ([params isKindOfClass:[OrgBouncycastleJceSpecECParameterSpec class]]) {
    
#line 125
    self->ecParams_ = params;
    self->param_ = [self createKeyGenParamsBCWithOrgBouncycastleJceSpecECParameterSpec:(OrgBouncycastleJceSpecECParameterSpec *) params withJavaSecuritySecureRandom:random];
  }
  else if ([params isKindOfClass:[JavaSecuritySpecECParameterSpec class]]) {
    
#line 130
    self->ecParams_ = params;
    self->param_ = [self createKeyGenParamsJCEWithJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *) params withJavaSecuritySecureRandom:random];
  }
  else if ([params isKindOfClass:[JavaSecuritySpecECGenParameterSpec class]]) {
    
#line 135
    [self initializeNamedCurveWithNSString:[((JavaSecuritySpecECGenParameterSpec *) params) getName] withJavaSecuritySecureRandom:random];
  }
  else if ([params isKindOfClass:[OrgBouncycastleJceSpecECNamedCurveGenParameterSpec class]]) {
    
#line 139
    [self initializeNamedCurveWithNSString:[((OrgBouncycastleJceSpecECNamedCurveGenParameterSpec *) params) getName] withJavaSecuritySecureRandom:random];
  }
  else {
    
#line 143
    NSString *name = OrgBouncycastleJcajceProviderAsymmetricUtilECUtil_getNameFromWithJavaSecuritySpecAlgorithmParameterSpec_(params);
    
#line 145
    if (name != nil) {
      
#line 147
      [self initializeNamedCurveWithNSString:name withJavaSecuritySecureRandom:random];
    }
    else {
      
#line 151
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$@", @"invalid parameterSpec: ", params));
    }
  }
  
#line 155
  [((OrgBouncycastleCryptoGeneratorsECKeyPairGenerator *) nil_chk(engine_)) init__WithOrgBouncycastleCryptoKeyGenerationParameters:param_];
  initialised_ = true;
}


#line 159
- (JavaSecurityKeyPair *)generateKeyPair {
  
#line 162
  if (!initialised_) {
    
#line 164
    [self initialize__WithInt:strength_ withJavaSecuritySecureRandom:new_JavaSecuritySecureRandom_init()];
  }
  
#line 167
  OrgBouncycastleCryptoAsymmetricCipherKeyPair *pair = [((OrgBouncycastleCryptoGeneratorsECKeyPairGenerator *) nil_chk(engine_)) generateKeyPair];
  OrgBouncycastleCryptoParamsECPublicKeyParameters *pub = (OrgBouncycastleCryptoParamsECPublicKeyParameters *) cast_chk([((OrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(pair)) getPublic], [OrgBouncycastleCryptoParamsECPublicKeyParameters class]);
  OrgBouncycastleCryptoParamsECPrivateKeyParameters *priv = (OrgBouncycastleCryptoParamsECPrivateKeyParameters *) cast_chk([pair getPrivate], [OrgBouncycastleCryptoParamsECPrivateKeyParameters class]);
  
#line 171
  if ([ecParams_ isKindOfClass:[OrgBouncycastleJceSpecECParameterSpec class]]) {
    
#line 173
    OrgBouncycastleJceSpecECParameterSpec *p = (OrgBouncycastleJceSpecECParameterSpec *) ecParams_;
    
#line 175
    OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *pubKey = new_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withOrgBouncycastleJceSpecECParameterSpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(algorithm_EC_, pub, p, configuration_);
    return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(pubKey, new_OrgBouncycastleJcajceProviderAsymmetricEcBCECPrivateKey_initWithNSString_withOrgBouncycastleCryptoParamsECPrivateKeyParameters_withOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_withOrgBouncycastleJceSpecECParameterSpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(
#line 177
    algorithm_EC_, priv, pubKey, p, configuration_));
  }
  else if (ecParams_ == nil) {
    
#line 181
    return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(new_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(algorithm_EC_, pub, configuration_), new_OrgBouncycastleJcajceProviderAsymmetricEcBCECPrivateKey_initWithNSString_withOrgBouncycastleCryptoParamsECPrivateKeyParameters_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(
#line 182
    algorithm_EC_, priv, configuration_));
  }
  else {
    
#line 186
    JavaSecuritySpecECParameterSpec *p = (JavaSecuritySpecECParameterSpec *) cast_chk(ecParams_, [JavaSecuritySpecECParameterSpec class]);
    
#line 188
    OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey *pubKey = new_OrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_initWithNSString_withOrgBouncycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(algorithm_EC_, pub, p, configuration_);
    
#line 190
    return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(pubKey, new_OrgBouncycastleJcajceProviderAsymmetricEcBCECPrivateKey_initWithNSString_withOrgBouncycastleCryptoParamsECPrivateKeyParameters_withOrgBouncycastleJcajceProviderAsymmetricEcBCECPublicKey_withJavaSecuritySpecECParameterSpec_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(algorithm_EC_, priv, pubKey, p, configuration_));
  }
}


#line 194
- (OrgBouncycastleCryptoParamsECKeyGenerationParameters *)createKeyGenParamsBCWithOrgBouncycastleJceSpecECParameterSpec:(OrgBouncycastleJceSpecECParameterSpec *)p
                                                                                           withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r {
  return new_OrgBouncycastleCryptoParamsECKeyGenerationParameters_initWithOrgBouncycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_(new_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_([((OrgBouncycastleJceSpecECParameterSpec *) nil_chk(p)) getCurve], [p getG], [p getN], [p getH]), r);
}

- (OrgBouncycastleCryptoParamsECKeyGenerationParameters *)createKeyGenParamsJCEWithJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)p
                                                                                      withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r {
  if ([p isKindOfClass:[OrgBouncycastleJceSpecECNamedCurveSpec class]]) {
    
#line 203
    NSString *curveName = [((OrgBouncycastleJceSpecECNamedCurveSpec *) nil_chk(((OrgBouncycastleJceSpecECNamedCurveSpec *) p))) getName];
    
#line 205
    OrgBouncycastleAsn1X9X9ECParameters *x9 = OrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromNameWithNSString_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(curveName, configuration_);
    if (nil != x9) {
      
#line 208
      return [self createKeyGenParamsJCEWithOrgBouncycastleAsn1X9X9ECParameters:x9 withJavaSecuritySecureRandom:r];
    }
  }
  
#line 212
  OrgBouncycastleMathEcECCurve *curve = OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertCurveWithJavaSecuritySpecEllipticCurve_([((JavaSecuritySpecECParameterSpec *) nil_chk(p)) getCurve]);
  OrgBouncycastleMathEcECPoint *g = OrgBouncycastleJcajceProviderAsymmetricUtilEC5Util_convertPointWithOrgBouncycastleMathEcECCurve_withJavaSecuritySpecECPoint_(curve, [p getGenerator]);
  JavaMathBigInteger *n = [p getOrder];
  JavaMathBigInteger *h = JavaMathBigInteger_valueOfWithLong_([p getCofactor]);
  OrgBouncycastleCryptoParamsECDomainParameters *dp = new_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(curve, g, n, h);
  return new_OrgBouncycastleCryptoParamsECKeyGenerationParameters_initWithOrgBouncycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_(dp, r);
}


#line 220
- (OrgBouncycastleCryptoParamsECKeyGenerationParameters *)createKeyGenParamsJCEWithOrgBouncycastleAsn1X9X9ECParameters:(OrgBouncycastleAsn1X9X9ECParameters *)x9
                                                                                          withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r {
  OrgBouncycastleCryptoParamsECDomainParameters *dp = new_OrgBouncycastleCryptoParamsECDomainParameters_initWithOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_([((OrgBouncycastleAsn1X9X9ECParameters *) nil_chk(x9)) getCurve], [x9 getG], [x9 getN], [x9 getH]);
  
#line 224
  return new_OrgBouncycastleCryptoParamsECKeyGenerationParameters_initWithOrgBouncycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_(dp, r);
}


#line 227
- (void)initializeNamedCurveWithNSString:(NSString *)curveName
            withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  
#line 230
  OrgBouncycastleAsn1X9X9ECParameters *x9 = OrgBouncycastleJcajceProviderAsymmetricEcECUtils_getDomainParametersFromNameWithNSString_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(curveName, configuration_);
  if (nil == x9) {
    
#line 233
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$", @"unknown curve name: ", curveName));
  }
  
#line 237
  IOSByteArray *seed = nil;
  
#line 239
  self->ecParams_ = new_OrgBouncycastleJceSpecECNamedCurveSpec_initWithNSString_withOrgBouncycastleMathEcECCurve_withOrgBouncycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(curveName, [x9 getCurve], [x9 getG], [x9 getN], [x9 getH], seed);
  self->param_ = [self createKeyGenParamsJCEWithOrgBouncycastleAsn1X9X9ECParameters:x9 withJavaSecuritySecureRandom:random];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsECKeyGenerationParameters;", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsECKeyGenerationParameters;", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleCryptoParamsECKeyGenerationParameters;", 0x4, 7, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 11, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:withOrgBouncycastleJcajceProviderConfigProviderConfiguration:);
  methods[2].selector = @selector(initialize__WithInt:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(initialize__WithJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[4].selector = @selector(generateKeyPair);
  methods[5].selector = @selector(createKeyGenParamsBCWithOrgBouncycastleJceSpecECParameterSpec:withJavaSecuritySecureRandom:);
  methods[6].selector = @selector(createKeyGenParamsJCEWithJavaSecuritySpecECParameterSpec:withJavaSecuritySecureRandom:);
  methods[7].selector = @selector(createKeyGenParamsJCEWithOrgBouncycastleAsn1X9X9ECParameters:withJavaSecuritySecureRandom:);
  methods[8].selector = @selector(initializeNamedCurveWithNSString:withJavaSecuritySecureRandom:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "param_", "LOrgBouncycastleCryptoParamsECKeyGenerationParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "engine_", "LOrgBouncycastleCryptoGeneratorsECKeyPairGenerator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ecParams_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "strength_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "initialised_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "algorithm_EC_", "LNSString;", .constantValue.asLong = 0, 0x0, 12, -1, -1, -1 },
    { "configuration_", "LOrgBouncycastleJcajceProviderConfigProviderConfiguration;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ecParameters", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0xa, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LOrgBouncycastleJcajceProviderConfigProviderConfiguration;", "initialize", "ILJavaSecuritySecureRandom;", "LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidAlgorithmParameterException;", "createKeyGenParamsBC", "LOrgBouncycastleJceSpecECParameterSpec;LJavaSecuritySecureRandom;", "createKeyGenParamsJCE", "LJavaSecuritySpecECParameterSpec;LJavaSecuritySecureRandom;", "LOrgBouncycastleAsn1X9X9ECParameters;LJavaSecuritySecureRandom;", "initializeNamedCurve", "LNSString;LJavaSecuritySecureRandom;", "algorithm", &OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_ecParameters, "LOrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi;" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC = { "EC", "org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, fields, 7, 0x9, 9, 9, 14, -1, -1, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC;
}

+ (void)initialize {
  if (self == [OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC class]) {
    {
      
#line 55
      OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_ecParameters = new_JavaUtilHashtable_init();
      
#line 57
      (void) [OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_ecParameters putWithId:OrgBouncycastleUtilIntegers_valueOfWithInt_(192) withId:new_JavaSecuritySpecECGenParameterSpec_initWithNSString_(@"prime192v1")];
      (void) [((JavaUtilHashtable *) nil_chk(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_ecParameters)) putWithId:OrgBouncycastleUtilIntegers_valueOfWithInt_(239) withId:new_JavaSecuritySpecECGenParameterSpec_initWithNSString_(@"prime239v1")];
      (void) [((JavaUtilHashtable *) nil_chk(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_ecParameters)) putWithId:OrgBouncycastleUtilIntegers_valueOfWithInt_(256) withId:new_JavaSecuritySpecECGenParameterSpec_initWithNSString_(@"prime256v1")];
      
#line 61
      (void) [((JavaUtilHashtable *) nil_chk(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_ecParameters)) putWithId:OrgBouncycastleUtilIntegers_valueOfWithInt_(224) withId:new_JavaSecuritySpecECGenParameterSpec_initWithNSString_(@"P-224")];
      (void) [((JavaUtilHashtable *) nil_chk(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_ecParameters)) putWithId:OrgBouncycastleUtilIntegers_valueOfWithInt_(384) withId:new_JavaSecuritySpecECGenParameterSpec_initWithNSString_(@"P-384")];
      (void) [((JavaUtilHashtable *) nil_chk(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_ecParameters)) putWithId:OrgBouncycastleUtilIntegers_valueOfWithInt_(521) withId:new_JavaSecuritySpecECGenParameterSpec_initWithNSString_(@"P-521")];
    }
    J2OBJC_SET_INITIALIZED(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC)
  }
}

@end


#line 66
void OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_init(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC *self) {
  OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_initWithNSString_(self,
#line 68
  @"EC");
  self->engine_ = new_OrgBouncycastleCryptoGeneratorsECKeyPairGenerator_init();
  self->ecParams_ =
#line 44
  nil;
  self->strength_ = 239;
  self->random_ = OrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  self->initialised_ = false;
  
#line 69
  self->algorithm_EC_ = @"EC";
  self->configuration_ = JreLoadStatic(OrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION);
}


#line 66
OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC *new_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC, init)
}


#line 66
OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC *create_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC, init)
}


#line 73
void OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_initWithNSString_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC *self, NSString *algorithm, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_initWithNSString_(self,
#line 77
  algorithm);
  self->engine_ = new_OrgBouncycastleCryptoGeneratorsECKeyPairGenerator_init();
  self->ecParams_ =
#line 44
  nil;
  self->strength_ = 239;
  self->random_ = OrgBouncycastleCryptoCryptoServicesRegistrar_getSecureRandom();
  self->initialised_ = false;
  
#line 78
  self->algorithm_EC_ = algorithm;
  self->configuration_ = configuration;
}


#line 73
OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC *new_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_initWithNSString_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC, initWithNSString_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, configuration)
}


#line 73
OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC *create_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_initWithNSString_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(NSString *algorithm, id<OrgBouncycastleJcajceProviderConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC, initWithNSString_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_, algorithm, configuration)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyPairGeneratorSpi.java"


#line 244
@implementation OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDSA

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDSA_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi;" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDSA = { "ECDSA", "org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDSA;
}

@end


#line 247
void OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDSA_init(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDSA *self) {
  OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_initWithNSString_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self,
#line 249
  @"ECDSA", JreLoadStatic(OrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION));
}


#line 247
OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDSA *new_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDSA_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDSA, init)
}


#line 247
OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDSA *create_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDSA_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDSA, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDSA)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyPairGeneratorSpi.java"


#line 253
@implementation OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDH

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDH_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi;" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDH = { "ECDH", "org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDH;
}

@end


#line 256
void OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDH_init(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDH *self) {
  OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_initWithNSString_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self,
#line 258
  @"ECDH", JreLoadStatic(OrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION));
}


#line 256
OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDH *new_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDH_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDH, init)
}


#line 256
OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDH *create_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDH_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDH, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDH)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyPairGeneratorSpi.java"


#line 262
@implementation OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDHC

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDHC_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi;" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDHC = { "ECDHC", "org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDHC;
}

@end


#line 265
void OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDHC_init(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDHC *self) {
  OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_initWithNSString_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self,
#line 267
  @"ECDHC", JreLoadStatic(OrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION));
}


#line 265
OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDHC *new_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDHC_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDHC, init)
}


#line 265
OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDHC *create_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDHC_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDHC, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDHC)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/KeyPairGeneratorSpi.java"


#line 271
@implementation OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECMQV

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECMQV_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi;" };
  static const J2ObjcClassInfo _OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECMQV = { "ECMQV", "org.bouncycastle.jcajce.provider.asymmetric.ec", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECMQV;
}

@end


#line 274
void OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECMQV_init(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECMQV *self) {
  OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_EC_initWithNSString_withOrgBouncycastleJcajceProviderConfigProviderConfiguration_(self,
#line 276
  @"ECMQV", JreLoadStatic(OrgBouncycastleJceProviderBouncyCastleProvider, CONFIGURATION));
}


#line 274
OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECMQV *new_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECMQV_init() {
  J2OBJC_NEW_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECMQV, init)
}


#line 274
OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECMQV *create_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECMQV_init() {
  J2OBJC_CREATE_IMPL(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECMQV, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECMQV)
