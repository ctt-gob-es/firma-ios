//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/x509/X509CertificateImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl")
#ifdef RESTRICT_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl
#define INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl 0
#else
#define INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl 1
#endif
#undef RESTRICT_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl

#if !defined (OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_) && (INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl || defined(INCLUDE_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl))
#define OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_

#define RESTRICT_JavaSecurityCertX509Certificate 1
#define INCLUDE_JavaSecurityCertX509Certificate 1
#include "java/security/cert/X509Certificate.h"

#define RESTRICT_OrgBouncycastleJcajceInterfacesBCX509Certificate 1
#define INCLUDE_OrgBouncycastleJcajceInterfacesBCX509Certificate 1
#include "org/bouncycastle/jcajce/interfaces/BCX509Certificate.h"

@class IOSBooleanArray;
@class IOSByteArray;
@class JavaMathBigInteger;
@class JavaSecurityProvider;
@class JavaUtilDate;
@class JavaxSecurityAuthX500X500Principal;
@class OrgBouncycastleAsn1ASN1OctetString;
@class OrgBouncycastleAsn1X500X500Name;
@class OrgBouncycastleAsn1X509BasicConstraints;
@class OrgBouncycastleAsn1X509Certificate;
@class OrgBouncycastleAsn1X509TBSCertificate;
@protocol JavaSecurityPrincipal;
@protocol JavaSecurityPublicKey;
@protocol JavaUtilCollection;
@protocol JavaUtilList;
@protocol JavaUtilSet;
@protocol OrgBouncycastleJcajceUtilJcaJceHelper;

@interface OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl : JavaSecurityCertX509Certificate < OrgBouncycastleJcajceInterfacesBCX509Certificate > {
 @public
  id<OrgBouncycastleJcajceUtilJcaJceHelper> bcHelper_;
  OrgBouncycastleAsn1X509Certificate *c_;
  OrgBouncycastleAsn1X509BasicConstraints *basicConstraints_;
  IOSBooleanArray *keyUsage_;
  NSString *sigAlgName_;
  IOSByteArray *sigAlgParams_;
}

#pragma mark Public

- (void)checkValidity;

- (void)checkValidityWithJavaUtilDate:(JavaUtilDate *)date;

- (jint)getBasicConstraints;

- (id<JavaUtilSet>)getCriticalExtensionOIDs;

- (id<JavaUtilList>)getExtendedKeyUsage;

- (IOSByteArray *)getExtensionValueWithNSString:(NSString *)oid;

- (id<JavaUtilCollection>)getIssuerAlternativeNames;

- (id<JavaSecurityPrincipal>)getIssuerDN;

- (IOSBooleanArray *)getIssuerUniqueID;

- (OrgBouncycastleAsn1X500X500Name *)getIssuerX500Name;

- (JavaxSecurityAuthX500X500Principal *)getIssuerX500Principal;

- (IOSBooleanArray *)getKeyUsage;

- (id<JavaUtilSet>)getNonCriticalExtensionOIDs;

- (JavaUtilDate *)getNotAfter;

- (JavaUtilDate *)getNotBefore;

- (id<JavaSecurityPublicKey>)getPublicKey;

- (JavaMathBigInteger *)getSerialNumber;

/*!
 @brief return a more "meaningful" representation for the signature algorithm used in
  the certificate.
 */
- (NSString *)getSigAlgName;

/*!
 @brief return the object identifier for the signature.
 */
- (NSString *)getSigAlgOID;

/*!
 @brief return the signature parameters, or null if there aren't any.
 */
- (IOSByteArray *)getSigAlgParams;

- (IOSByteArray *)getSignature;

- (id<JavaUtilCollection>)getSubjectAlternativeNames;

- (id<JavaSecurityPrincipal>)getSubjectDN;

- (IOSBooleanArray *)getSubjectUniqueID;

- (OrgBouncycastleAsn1X500X500Name *)getSubjectX500Name;

- (JavaxSecurityAuthX500X500Principal *)getSubjectX500Principal;

- (IOSByteArray *)getTBSCertificate;

- (OrgBouncycastleAsn1X509TBSCertificate *)getTBSCertificateNative;

- (jint)getVersion;

- (jboolean)hasUnsupportedCriticalExtension;

- (NSString *)description;

- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key;

- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
               withJavaSecurityProvider:(JavaSecurityProvider *)sigProvider;

- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                           withNSString:(NSString *)sigProvider;

#pragma mark Protected

+ (IOSByteArray *)getExtensionOctetsWithOrgBouncycastleAsn1X509Certificate:(OrgBouncycastleAsn1X509Certificate *)c
                                                              withNSString:(NSString *)oid;

+ (OrgBouncycastleAsn1ASN1OctetString *)getExtensionValueWithOrgBouncycastleAsn1X509Certificate:(OrgBouncycastleAsn1X509Certificate *)c
                                                                                   withNSString:(NSString *)oid;

#pragma mark Package-Private

- (instancetype)initPackagePrivateWithOrgBouncycastleJcajceUtilJcaJceHelper:(id<OrgBouncycastleJcajceUtilJcaJceHelper>)bcHelper
                                     withOrgBouncycastleAsn1X509Certificate:(OrgBouncycastleAsn1X509Certificate *)c
                                withOrgBouncycastleAsn1X509BasicConstraints:(OrgBouncycastleAsn1X509BasicConstraints *)basicConstraints
                                                           withBooleanArray:(IOSBooleanArray *)keyUsage
                                                               withNSString:(NSString *)sigAlgName
                                                              withByteArray:(IOSByteArray *)sigAlgParams;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl)

J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl, bcHelper_, id<OrgBouncycastleJcajceUtilJcaJceHelper>)
J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl, c_, OrgBouncycastleAsn1X509Certificate *)
J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl, basicConstraints_, OrgBouncycastleAsn1X509BasicConstraints *)
J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl, keyUsage_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl, sigAlgName_, NSString *)
J2OBJC_FIELD_SETTER(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl, sigAlgParams_, IOSByteArray *)

FOUNDATION_EXPORT void OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_initPackagePrivateWithOrgBouncycastleJcajceUtilJcaJceHelper_withOrgBouncycastleAsn1X509Certificate_withOrgBouncycastleAsn1X509BasicConstraints_withBooleanArray_withNSString_withByteArray_(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl *self, id<OrgBouncycastleJcajceUtilJcaJceHelper> bcHelper, OrgBouncycastleAsn1X509Certificate *c, OrgBouncycastleAsn1X509BasicConstraints *basicConstraints, IOSBooleanArray *keyUsage, NSString *sigAlgName, IOSByteArray *sigAlgParams);

FOUNDATION_EXPORT IOSByteArray *OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_getExtensionOctetsWithOrgBouncycastleAsn1X509Certificate_withNSString_(OrgBouncycastleAsn1X509Certificate *c, NSString *oid);

FOUNDATION_EXPORT OrgBouncycastleAsn1ASN1OctetString *OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl_getExtensionValueWithOrgBouncycastleAsn1X509Certificate_withNSString_(OrgBouncycastleAsn1X509Certificate *c, NSString *oid);

J2OBJC_TYPE_LITERAL_HEADER(OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgBouncycastleJcajceProviderAsymmetricX509X509CertificateImpl")
