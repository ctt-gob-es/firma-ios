//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/apdu/CommandApdu.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/apdu/Apdu.h"
#include "es/gob/jmulticard/apdu/CommandApdu.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/apdu/CommandApdu must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardApduCommandApdu () {
 @public
  jbyte cla_;
  jbyte ins_;
  jbyte p1_;
  jbyte p2_;
  JavaLangInteger *le_;
  IOSByteArray *body_;
}

+ (IOSByteArray *)getBodyWithByteArray:(IOSByteArray *)bytes;

+ (JavaLangInteger *)getLengthWithByteArray:(IOSByteArray *)bytes;

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardApduCommandApdu, le_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(EsGobJmulticardApduCommandApdu, body_, IOSByteArray *)

__attribute__((unused)) static IOSByteArray *EsGobJmulticardApduCommandApdu_getBodyWithByteArray_(IOSByteArray *bytes);

__attribute__((unused)) static JavaLangInteger *EsGobJmulticardApduCommandApdu_getLengthWithByteArray_(IOSByteArray *bytes);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/apdu/CommandApdu.java"


#line 46
@implementation EsGobJmulticardApduCommandApdu


#line 55
+ (IOSByteArray *)getBodyWithByteArray:(IOSByteArray *)bytes {
  return EsGobJmulticardApduCommandApdu_getBodyWithByteArray_(bytes);
}


#line 71
+ (JavaLangInteger *)getLengthWithByteArray:(IOSByteArray *)bytes {
  return EsGobJmulticardApduCommandApdu_getLengthWithByteArray_(bytes);
}


#line 90
- (instancetype)initWithByteArray:(IOSByteArray *)bytes {
  EsGobJmulticardApduCommandApdu_initWithByteArray_(self, bytes);
  return self;
}


#line 108
- (instancetype)initWithByte:(jbyte)apduCla
                    withByte:(jbyte)apduIns
                    withByte:(jbyte)param1
                    withByte:(jbyte)param2
               withByteArray:(IOSByteArray *)data
         withJavaLangInteger:(JavaLangInteger *)ne {
  EsGobJmulticardApduCommandApdu_initWithByte_withByte_withByte_withByte_withByteArray_withJavaLangInteger_(self, apduCla, apduIns, param1, param2, data, ne);
  return self;
}


#line 174
- (jbyte)getCla {
  return cla_;
}


#line 180
- (IOSByteArray *)getData {
  if (body_ == nil) {
    return nil;
  }
  IOSByteArray *out = [IOSByteArray newArrayWithLength:body_->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(body_, 0, out, 0, body_->size_);
  return out;
}


#line 192
- (jbyte)getIns {
  return ins_;
}


#line 199
- (JavaLangInteger *)getLe {
  return le_;
}


#line 205
- (jbyte)getP1 {
  return p1_;
}


#line 211
- (jbyte)getP2 {
  return p2_;
}


#line 217
- (void)setLeWithInt:(jint)apduLe {
  le_ = JavaLangInteger_valueOfWithNSString_(NSString_java_valueOfInt_(apduLe));
  JavaIoByteArrayOutputStream *baos = new_JavaIoByteArrayOutputStream_init();
  [baos writeWithInt:cla_];
  [baos writeWithInt:ins_];
  [baos writeWithInt:p1_];
  [baos writeWithInt:p2_];
  if (body_ != nil && body_->size_ > 0) {
    @try {
      [baos writeWithByteArray:body_];
    }
    @catch (JavaLangException *e) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(
#line 230
      @"No se pueden tratar los datos de la APDU", e);
    }
  }
  
#line 234
  [baos writeWithInt:apduLe];
  [self setBytesWithByteArray:[baos toByteArray]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[B", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getBodyWithByteArray:);
  methods[1].selector = @selector(getLengthWithByteArray:);
  methods[2].selector = @selector(initWithByteArray:);
  methods[3].selector = @selector(initWithByte:withByte:withByte:withByte:withByteArray:withJavaLangInteger:);
  methods[4].selector = @selector(getCla);
  methods[5].selector = @selector(getData);
  methods[6].selector = @selector(getIns);
  methods[7].selector = @selector(getLe);
  methods[8].selector = @selector(getP1);
  methods[9].selector = @selector(getP2);
  methods[10].selector = @selector(setLeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cla_", "B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ins_", "B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "p1_", "B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "p2_", "B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "le_", "LJavaLangInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "body_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getBody", "[B", "getLength", "BBBB[BLJavaLangInteger;", "setLe", "I" };
  static const J2ObjcClassInfo _EsGobJmulticardApduCommandApdu = { "CommandApdu", "es.gob.jmulticard.apdu", ptrTable, methods, fields, 7, 0x1, 11, 6, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardApduCommandApdu;
}

@end


#line 55
IOSByteArray *EsGobJmulticardApduCommandApdu_getBodyWithByteArray_(IOSByteArray *bytes) {
  EsGobJmulticardApduCommandApdu_initialize();
  
#line 56
  if (bytes == nil || bytes->size_ < 5) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 58
    @"La longitud del array de octetos debe ser igual o mayor que 5");
  }
  
#line 61
  IOSByteArray *data;
  jint i = IOSByteArray_Get(bytes, 4) & (jint) 0xff;
  if (bytes->size_ > 5) {
    data = [IOSByteArray newArrayWithLength:i];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, 5, data, 0, i);
    return data;
  }
  return nil;
}


#line 71
JavaLangInteger *EsGobJmulticardApduCommandApdu_getLengthWithByteArray_(IOSByteArray *bytes) {
  EsGobJmulticardApduCommandApdu_initialize();
  if (bytes == nil || bytes->size_ < 5) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 75
    @"La longitud del array de octetos debe ser igual o mayor que 5.");
  }
  
#line 78
  jint i = IOSByteArray_Get(bytes, 4) & (jint) 0xff;
  if (bytes->size_ > 5 && bytes->size_ > i + 5) {
    return JavaLangInteger_valueOfWithInt_(IOSByteArray_Get(bytes, i + 5));
  }
  if (bytes->size_ == 5) {
    return JavaLangInteger_valueOfWithInt_(i);
  }
  return nil;
}

void EsGobJmulticardApduCommandApdu_initWithByteArray_(EsGobJmulticardApduCommandApdu *self, IOSByteArray *bytes) {
  EsGobJmulticardApduCommandApdu_initWithByte_withByte_withByte_withByte_withByteArray_withJavaLangInteger_(self, IOSByteArray_Get(nil_chk(
#line 92
  bytes), 0), IOSByteArray_Get(
#line 93
  bytes, 1), IOSByteArray_Get(
#line 94
  bytes, 2), IOSByteArray_Get(
#line 95
  bytes, 3), EsGobJmulticardApduCommandApdu_getBodyWithByteArray_(
#line 96
  bytes), EsGobJmulticardApduCommandApdu_getLengthWithByteArray_(
#line 97
  bytes));
}


#line 90
EsGobJmulticardApduCommandApdu *new_EsGobJmulticardApduCommandApdu_initWithByteArray_(IOSByteArray *bytes) {
  J2OBJC_NEW_IMPL(EsGobJmulticardApduCommandApdu, initWithByteArray_, bytes)
}


#line 90
EsGobJmulticardApduCommandApdu *create_EsGobJmulticardApduCommandApdu_initWithByteArray_(IOSByteArray *bytes) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardApduCommandApdu, initWithByteArray_, bytes)
}


#line 108
void EsGobJmulticardApduCommandApdu_initWithByte_withByte_withByte_withByte_withByteArray_withJavaLangInteger_(EsGobJmulticardApduCommandApdu *self, jbyte apduCla, jbyte apduIns, jbyte param1, jbyte param2, IOSByteArray *data, JavaLangInteger *ne) {
  EsGobJmulticardApduApdu_init(self);
  
#line 114
  JavaIoByteArrayOutputStream *baos = new_JavaIoByteArrayOutputStream_init();
  
#line 116
  self->cla_ = apduCla;
  [baos writeWithInt:apduCla];
  
#line 119
  self->ins_ = apduIns;
  [baos writeWithInt:apduIns];
  
#line 122
  self->p1_ = param1;
  [baos writeWithInt:param1];
  
#line 125
  self->p2_ = param2;
  [baos writeWithInt:param2];
  
#line 128
  if (data == nil) {
    self->body_ = nil;
  }
  else {
    self->body_ = [IOSByteArray newArrayWithLength:data->size_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, self->body_, 0, data->size_);
    
#line 136
    if (data->size_ <= 255) {
      [baos writeWithInt:[((JavaLangInteger *) nil_chk(JavaLangInteger_valueOfWithNSString_(NSString_java_valueOfInt_(self->body_->size_)))) charValue]];
    }
    else {
      
#line 141
      [baos writeWithInt:(jbyte) (jint) 0x00];
      [baos writeWithInt:(jbyte) (JreRShift32(data->size_, 8))];
      [baos writeWithInt:(jbyte) (data->size_ & (jint) 0xff)];
    }
    
#line 146
    if (self->body_->size_ > 0) {
      @try {
        [baos writeWithByteArray:self->body_];
      }
      @catch (JavaLangException *e) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(
#line 152
        @"No se pueden tratar los datos de la APDU", e);
      }
    }
  }
  
#line 158
  self->le_ = ne;
  if (ne != nil) {
    if ([ne intValue] <= (jint) 0xff) {
      [baos writeWithInt:[ne charValue]];
    }
    else {
      [baos writeWithInt:(jbyte) (JreRShift32([ne intValue], 8))];
      [baos writeWithInt:(jbyte) ([ne intValue] & (jint) 0xff)];
    }
  }
  
#line 169
  [self setBytesWithByteArray:[baos toByteArray]];
}


#line 108
EsGobJmulticardApduCommandApdu *new_EsGobJmulticardApduCommandApdu_initWithByte_withByte_withByte_withByte_withByteArray_withJavaLangInteger_(jbyte apduCla, jbyte apduIns, jbyte param1, jbyte param2, IOSByteArray *data, JavaLangInteger *ne) {
  J2OBJC_NEW_IMPL(EsGobJmulticardApduCommandApdu, initWithByte_withByte_withByte_withByte_withByteArray_withJavaLangInteger_, apduCla, apduIns, param1, param2, data, ne)
}


#line 108
EsGobJmulticardApduCommandApdu *create_EsGobJmulticardApduCommandApdu_initWithByte_withByte_withByte_withByte_withByteArray_withJavaLangInteger_(jbyte apduCla, jbyte apduIns, jbyte param1, jbyte param2, IOSByteArray *data, JavaLangInteger *ne) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardApduCommandApdu, initWithByte_withByte_withByte_withByte_withByteArray_withJavaLangInteger_, apduCla, apduIns, param1, param2, data, ne)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardApduCommandApdu)
