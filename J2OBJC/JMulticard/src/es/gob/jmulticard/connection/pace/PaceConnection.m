//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/connection/pace/PaceConnection.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/CryptoHelper.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/JmcLogger.h"
#include "es/gob/jmulticard/apdu/CommandApdu.h"
#include "es/gob/jmulticard/apdu/ResponseApdu.h"
#include "es/gob/jmulticard/apdu/StatusWord.h"
#include "es/gob/jmulticard/apdu/dnie/VerifyApduCommand.h"
#include "es/gob/jmulticard/connection/ApduConnection.h"
#include "es/gob/jmulticard/connection/ApduConnectionException.h"
#include "es/gob/jmulticard/connection/cwa14890/ChannelType.h"
#include "es/gob/jmulticard/connection/cwa14890/Cwa14890OneV2Connection.h"
#include "es/gob/jmulticard/connection/cwa14890/InvalidCryptographicChecksumException.h"
#include "es/gob/jmulticard/connection/pace/PaceConnection.h"
#include "es/gob/jmulticard/connection/pace/SecureMessaging.h"
#include "es/gob/jmulticard/connection/pace/SecureMessagingException.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/connection/pace/PaceConnection must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardConnectionPacePaceConnection () {
 @public
  /*!
   @brief Octeto de valor m&aacute;s significativo que indica un <i>Le</i> incorrecto en la petici&oacute;n.
   */
  EsGobJmulticardConnectionPaceSecureMessaging *sm_;
}

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardConnectionPacePaceConnection, sm_, EsGobJmulticardConnectionPaceSecureMessaging *)

inline EsGobJmulticardApduStatusWord *EsGobJmulticardConnectionPacePaceConnection_get_INVALID_CRYPTO_CHECKSUM(void);
static EsGobJmulticardApduStatusWord *EsGobJmulticardConnectionPacePaceConnection_INVALID_CRYPTO_CHECKSUM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardConnectionPacePaceConnection, INVALID_CRYPTO_CHECKSUM, EsGobJmulticardApduStatusWord *)

/*!
 @brief Octeto de valor m&aacute;s significativo que indica un <i>Le</i> incorrecto en la petici&oacute;n.
 */
inline jbyte EsGobJmulticardConnectionPacePaceConnection_get_MSB_INCORRECT_LE(void);
#define EsGobJmulticardConnectionPacePaceConnection_MSB_INCORRECT_LE 108
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardConnectionPacePaceConnection, MSB_INCORRECT_LE, jbyte)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/connection/pace/PaceConnection.java"

J2OBJC_INITIALIZED_DEFN(EsGobJmulticardConnectionPacePaceConnection)


#line 19
@implementation EsGobJmulticardConnectionPacePaceConnection


#line 33
- (instancetype)initWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)connection
                                withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHlpr
               withEsGobJmulticardConnectionPaceSecureMessaging:(EsGobJmulticardConnectionPaceSecureMessaging *)secMsg {
  EsGobJmulticardConnectionPacePaceConnection_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withEsGobJmulticardConnectionPaceSecureMessaging_(self, connection, cryptoHlpr, secMsg);
  return self;
}


#line 41
- (NSString *)description {
  
#line 43
  return JreStrcat("$$", @"Conexion de tipo PACE ",
#line 44
  ([self isOpen] ? JreStrcat("$@", @"abierta sobre ",
#line 45
  [self getSubConnection]) :
#line 46
  @"cerrada"));
}


#line 51
- (void)open {
  
#line 53
  openState_ = true;
}


#line 56
- (EsGobJmulticardApduResponseApdu *)transmitWithEsGobJmulticardApduCommandApdu:(EsGobJmulticardApduCommandApdu *)command {
  
#line 59
  jboolean isChv = [((EsGobJmulticardApduCommandApdu *) nil_chk(command)) getIns] == EsGobJmulticardApduDnieVerifyApduCommand_INS_VERIFY;
  
#line 61
  EsGobJmulticardJmcLogger_debugWithNSString_withNSString_withNSString_(
#line 62
  [EsGobJmulticardConnectionPacePaceConnection_class_() getName],
#line 63
  @"transmit", JreStrcat("$$", @"APDU de comando en claro: ",
#line 65
  (isChv ? @"Verificacion de PIN" : EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_([command getBytes], true))));
  
#line 69
  EsGobJmulticardApduCommandApdu *protectedApdu;
  @try {
    protectedApdu = [((EsGobJmulticardConnectionPaceSecureMessaging *) nil_chk(sm_)) wrapWithEsGobJmulticardApduCommandApdu:command];
  }
  @catch (EsGobJmulticardConnectionPaceSecureMessagingException *e) {
    @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_withJavaLangThrowable_(@"No ha sido posible cifrar un mensaje seguro con el canal PACE", e);
  }
  
#line 77
  EsGobJmulticardApduResponseApdu *responseApdu = [((id<EsGobJmulticardConnectionApduConnection>) nil_chk(subConnection_)) transmitWithEsGobJmulticardApduCommandApdu:protectedApdu];
  
#line 80
  if (![((EsGobJmulticardApduStatusWord *) nil_chk([((EsGobJmulticardApduResponseApdu *) nil_chk(responseApdu)) getStatusWord])) isOk] && ![new_EsGobJmulticardApduStatusWord_initWithByte_withByte_((jbyte) (jint) 0x62, (jbyte) (jint) 0x82) isEqual:[responseApdu getStatusWord]]) {
    @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_(JreStrcat("$@$@$@$@C", @"Error transmitiendo la APDU cifrada:\n  Error: ",
#line 83
    [responseApdu getStatusWord], @"\n  Respuesta:\n",
#line 84
    responseApdu, @"\n  Comando cifrado:\n",
#line 85
    (isChv ? @"Verificacion de PIN" : (id) protectedApdu), @"\n  Comando en claro:\n",
#line 86
    (isChv ? @"Verificacion de PIN" : (id) command), 0x000a));
  }
  
#line 90
  EsGobJmulticardApduResponseApdu *decipherApdu;
  @try {
    decipherApdu = [sm_ unwrapWithEsGobJmulticardApduResponseApdu:responseApdu];
  }
  @catch (EsGobJmulticardConnectionPaceSecureMessagingException *e1) {
    @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_withJavaLangThrowable_(
#line 96
    @"No ha sido posible descifrar un mensaje seguro con el canal PACE", e1);
  }
  
#line 100
  EsGobJmulticardJmcLogger_debugWithNSString_withNSString_withNSString_(
#line 101
  [EsGobJmulticardConnectionPacePaceConnection_class_() getName],
#line 102
  @"transmit", JreStrcat("$$", @"APDU de respuesta en claro: ", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 103
  [((EsGobJmulticardApduResponseApdu *) nil_chk(decipherApdu)) getBytes], true)));
  
#line 106
  if ([((EsGobJmulticardApduStatusWord *) nil_chk(EsGobJmulticardConnectionPacePaceConnection_INVALID_CRYPTO_CHECKSUM)) isEqual:[decipherApdu getStatusWord]]) {
    @throw new_EsGobJmulticardConnectionCwa14890InvalidCryptographicChecksumException_init();
  }
  
#line 112
  if ([((EsGobJmulticardApduStatusWord *) nil_chk([decipherApdu getStatusWord])) getMsb] == EsGobJmulticardConnectionPacePaceConnection_MSB_INCORRECT_LE) {
    [command setLeWithInt:[((EsGobJmulticardApduStatusWord *) nil_chk([decipherApdu getStatusWord])) getLsb]];
    return [self transmitWithEsGobJmulticardApduCommandApdu:command];
  }
  return decipherApdu;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardApduResponseApdu;", 0x1, 2, 3, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithEsGobJmulticardConnectionApduConnection:withEsGobJmulticardCryptoHelper:withEsGobJmulticardConnectionPaceSecureMessaging:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(open);
  methods[3].selector = @selector(transmitWithEsGobJmulticardApduCommandApdu:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INVALID_CRYPTO_CHECKSUM", "LEsGobJmulticardApduStatusWord;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "MSB_INCORRECT_LE", "B", .constantValue.asChar = EsGobJmulticardConnectionPacePaceConnection_MSB_INCORRECT_LE, 0x1a, -1, -1, -1, -1 },
    { "sm_", "LEsGobJmulticardConnectionPaceSecureMessaging;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEsGobJmulticardConnectionApduConnection;LEsGobJmulticardCryptoHelper;LEsGobJmulticardConnectionPaceSecureMessaging;", "toString", "transmit", "LEsGobJmulticardApduCommandApdu;", "LEsGobJmulticardConnectionApduConnectionException;", &EsGobJmulticardConnectionPacePaceConnection_INVALID_CRYPTO_CHECKSUM };
  static const J2ObjcClassInfo _EsGobJmulticardConnectionPacePaceConnection = { "PaceConnection", "es.gob.jmulticard.connection.pace", ptrTable, methods, fields, 7, 0x11, 4, 3, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardConnectionPacePaceConnection;
}

+ (void)initialize {
  if (self == [EsGobJmulticardConnectionPacePaceConnection class]) {
    EsGobJmulticardConnectionPacePaceConnection_INVALID_CRYPTO_CHECKSUM = new_EsGobJmulticardApduStatusWord_initWithByte_withByte_(
#line 21
    (jbyte) (jint) 0x66, (jbyte) (jint) 0x88);
    J2OBJC_SET_INITIALIZED(EsGobJmulticardConnectionPacePaceConnection)
  }
}

@end


#line 33
void EsGobJmulticardConnectionPacePaceConnection_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withEsGobJmulticardConnectionPaceSecureMessaging_(EsGobJmulticardConnectionPacePaceConnection *self, id<EsGobJmulticardConnectionApduConnection> connection, EsGobJmulticardCryptoHelper *cryptoHlpr, EsGobJmulticardConnectionPaceSecureMessaging *secMsg) {
  EsGobJmulticardConnectionCwa14890Cwa14890OneV2Connection_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withEsGobJmulticardConnectionCwa14890ChannelType_(self,
#line 36
  connection, cryptoHlpr, JreLoadEnum(EsGobJmulticardConnectionCwa14890ChannelType, PACE));
  self->sm_ = secMsg;
  self->subConnection_ = connection;
}


#line 33
EsGobJmulticardConnectionPacePaceConnection *new_EsGobJmulticardConnectionPacePaceConnection_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withEsGobJmulticardConnectionPaceSecureMessaging_(id<EsGobJmulticardConnectionApduConnection> connection, EsGobJmulticardCryptoHelper *cryptoHlpr, EsGobJmulticardConnectionPaceSecureMessaging *secMsg) {
  J2OBJC_NEW_IMPL(EsGobJmulticardConnectionPacePaceConnection, initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withEsGobJmulticardConnectionPaceSecureMessaging_, connection, cryptoHlpr, secMsg)
}


#line 33
EsGobJmulticardConnectionPacePaceConnection *create_EsGobJmulticardConnectionPacePaceConnection_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withEsGobJmulticardConnectionPaceSecureMessaging_(id<EsGobJmulticardConnectionApduConnection> connection, EsGobJmulticardCryptoHelper *cryptoHlpr, EsGobJmulticardConnectionPaceSecureMessaging *secMsg) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardConnectionPacePaceConnection, initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withEsGobJmulticardConnectionPaceSecureMessaging_, connection, cryptoHlpr, secMsg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardConnectionPacePaceConnection)
