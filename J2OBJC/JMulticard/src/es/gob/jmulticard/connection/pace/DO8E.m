//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/connection/pace/DO8E.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/asn1/Tlv.h"
#include "es/gob/jmulticard/asn1/TlvException.h"
#include "es/gob/jmulticard/connection/pace/DO8E.h"
#include "es/gob/jmulticard/connection/pace/SecureMessagingException.h"
#include "java/lang/IllegalArgumentException.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/connection/pace/DO8E must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardConnectionPaceDO8E () {
 @public
  EsGobJmulticardAsn1Tlv *tlv_;
}

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardConnectionPaceDO8E, tlv_, EsGobJmulticardAsn1Tlv *)

inline jbyte EsGobJmulticardConnectionPaceDO8E_get_TAG(void);
#define EsGobJmulticardConnectionPaceDO8E_TAG -114
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardConnectionPaceDO8E, TAG, jbyte)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/connection/pace/DO8E.java"


#line 29
@implementation EsGobJmulticardConnectionPaceDO8E


#line 34
- (instancetype)initPackagePrivateWithByteArray:(IOSByteArray *)checksumOrEncoded {
  EsGobJmulticardConnectionPaceDO8E_initPackagePrivateWithByteArray_(self, checksumOrEncoded);
  return self;
}


#line 61
- (IOSByteArray *)getEncoded {
  return [((EsGobJmulticardAsn1Tlv *) nil_chk(tlv_)) getBytes];
}

- (IOSByteArray *)getData {
  return [((EsGobJmulticardAsn1Tlv *) nil_chk(tlv_)) getValue];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithByteArray:);
  methods[1].selector = @selector(getEncoded);
  methods[2].selector = @selector(getData);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "B", .constantValue.asChar = EsGobJmulticardConnectionPaceDO8E_TAG, 0x1a, -1, -1, -1, -1 },
    { "tlv_", "LEsGobJmulticardAsn1Tlv;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "LEsGobJmulticardConnectionPaceSecureMessagingException;" };
  static const J2ObjcClassInfo _EsGobJmulticardConnectionPaceDO8E = { "DO8E", "es.gob.jmulticard.connection.pace", ptrTable, methods, fields, 7, 0x10, 3, 2, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardConnectionPaceDO8E;
}

@end


#line 34
void EsGobJmulticardConnectionPaceDO8E_initPackagePrivateWithByteArray_(EsGobJmulticardConnectionPaceDO8E *self, IOSByteArray *checksumOrEncoded) {
  NSObject_init(self);
  
#line 35
  if (checksumOrEncoded == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 37
    @"El checksum para el DO8E no puede ser nulo");
  }
  
#line 40
  if (checksumOrEncoded->size_ == 10) {
    @try {
      self->tlv_ = new_EsGobJmulticardAsn1Tlv_initWithByteArray_(checksumOrEncoded);
    }
    @catch (EsGobJmulticardAsn1TlvException *e) {
      @throw new_EsGobJmulticardConnectionPaceSecureMessagingException_initWithNSString_withJavaLangThrowable_(
#line 46
      @"Los datos proporcionados no son un TLV valido", e);
    }
    
#line 49
    if (EsGobJmulticardConnectionPaceDO8E_TAG != [((EsGobJmulticardAsn1Tlv *) nil_chk(self->tlv_)) getTag]) {
      @throw new_EsGobJmulticardConnectionPaceSecureMessagingException_initWithNSString_(JreStrcat("$$", @"Los datos proporcionados para el DO8E conforman un TLV con una etiqueta desconocida: ", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 52
        [self->tlv_ getTag] } count:1], false)));
      }
    }
    else {
      
#line 57
      self->tlv_ = new_EsGobJmulticardAsn1Tlv_initWithByte_withByteArray_(EsGobJmulticardConnectionPaceDO8E_TAG, checksumOrEncoded);
    }
  }


#line 34
EsGobJmulticardConnectionPaceDO8E *new_EsGobJmulticardConnectionPaceDO8E_initPackagePrivateWithByteArray_(IOSByteArray *checksumOrEncoded) {
  J2OBJC_NEW_IMPL(EsGobJmulticardConnectionPaceDO8E, initPackagePrivateWithByteArray_, checksumOrEncoded)
}


#line 34
EsGobJmulticardConnectionPaceDO8E *create_EsGobJmulticardConnectionPaceDO8E_initPackagePrivateWithByteArray_(IOSByteArray *checksumOrEncoded) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardConnectionPaceDO8E, initPackagePrivateWithByteArray_, checksumOrEncoded)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardConnectionPaceDO8E)
