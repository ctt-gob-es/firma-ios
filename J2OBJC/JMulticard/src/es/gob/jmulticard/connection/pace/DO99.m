//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/connection/pace/DO99.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/asn1/Tlv.h"
#include "es/gob/jmulticard/asn1/TlvException.h"
#include "es/gob/jmulticard/connection/pace/DO99.h"
#include "es/gob/jmulticard/connection/pace/SecureMessagingException.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/connection/pace/DO99 must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardConnectionPaceDO99 () {
 @public
  EsGobJmulticardAsn1Tlv *tlv_;
}

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardConnectionPaceDO99, tlv_, EsGobJmulticardAsn1Tlv *)

inline jbyte EsGobJmulticardConnectionPaceDO99_get_TAG(void);
#define EsGobJmulticardConnectionPaceDO99_TAG -103
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardConnectionPaceDO99, TAG, jbyte)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/connection/pace/DO99.java"


#line 29
@implementation EsGobJmulticardConnectionPaceDO99


#line 35
- (instancetype)initPackagePrivateWithByteArray:(IOSByteArray *)encodedData {
  EsGobJmulticardConnectionPaceDO99_initPackagePrivateWithByteArray_(self, encodedData);
  return self;
}


#line 52
- (IOSByteArray *)getEncoded {
  return [((EsGobJmulticardAsn1Tlv *) nil_chk(tlv_)) getBytes];
}

- (IOSByteArray *)getData {
  return [((EsGobJmulticardAsn1Tlv *) nil_chk(tlv_)) getValue];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithByteArray:);
  methods[1].selector = @selector(getEncoded);
  methods[2].selector = @selector(getData);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "B", .constantValue.asChar = EsGobJmulticardConnectionPaceDO99_TAG, 0x1a, -1, -1, -1, -1 },
    { "tlv_", "LEsGobJmulticardAsn1Tlv;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "LEsGobJmulticardConnectionPaceSecureMessagingException;" };
  static const J2ObjcClassInfo _EsGobJmulticardConnectionPaceDO99 = { "DO99", "es.gob.jmulticard.connection.pace", ptrTable, methods, fields, 7, 0x10, 3, 2, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardConnectionPaceDO99;
}

@end


#line 35
void EsGobJmulticardConnectionPaceDO99_initPackagePrivateWithByteArray_(EsGobJmulticardConnectionPaceDO99 *self, IOSByteArray *encodedData) {
  NSObject_init(self);
  
#line 36
  @try {
    self->tlv_ = new_EsGobJmulticardAsn1Tlv_initWithByteArray_(encodedData);
  }
  @catch (EsGobJmulticardAsn1TlvException *e) {
    @throw new_EsGobJmulticardConnectionPaceSecureMessagingException_initWithNSString_withJavaLangThrowable_(
#line 41
    @"Los datos proporcionados para el DO99 no conforman un TLV valido", e);
  }
  
#line 44
  if (EsGobJmulticardConnectionPaceDO99_TAG != [((EsGobJmulticardAsn1Tlv *) nil_chk(self->tlv_)) getTag]) {
    @throw new_EsGobJmulticardConnectionPaceSecureMessagingException_initWithNSString_(JreStrcat("$$", @"Los datos proporcionados para el DO99 conforman un TLV con una etiqueta desconocida: ", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 47
      [self->tlv_ getTag] } count:1], false)));
    }
  }


#line 35
EsGobJmulticardConnectionPaceDO99 *new_EsGobJmulticardConnectionPaceDO99_initPackagePrivateWithByteArray_(IOSByteArray *encodedData) {
  J2OBJC_NEW_IMPL(EsGobJmulticardConnectionPaceDO99, initPackagePrivateWithByteArray_, encodedData)
}


#line 35
EsGobJmulticardConnectionPaceDO99 *create_EsGobJmulticardConnectionPaceDO99_initPackagePrivateWithByteArray_(IOSByteArray *encodedData) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardConnectionPaceDO99, initPackagePrivateWithByteArray_, encodedData)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardConnectionPaceDO99)
