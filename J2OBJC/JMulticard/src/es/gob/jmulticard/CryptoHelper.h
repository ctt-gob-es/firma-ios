//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/CryptoHelper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobJmulticardCryptoHelper")
#ifdef RESTRICT_EsGobJmulticardCryptoHelper
#define INCLUDE_ALL_EsGobJmulticardCryptoHelper 0
#else
#define INCLUDE_ALL_EsGobJmulticardCryptoHelper 1
#endif
#undef RESTRICT_EsGobJmulticardCryptoHelper

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (EsGobJmulticardCryptoHelper_) && (INCLUDE_ALL_EsGobJmulticardCryptoHelper || defined(INCLUDE_EsGobJmulticardCryptoHelper))
#define EsGobJmulticardCryptoHelper_

@class EsGobJmulticardApduIso7816fourPacePaceChat;
@class EsGobJmulticardAsn1IcaoCardAccess;
@class EsGobJmulticardCryptoHelper_BlockMode;
@class EsGobJmulticardCryptoHelper_EcCurve;
@class EsGobJmulticardCryptoHelper_PaceChannelHelper;
@class EsGobJmulticardCryptoHelper_Padding;
@class EsGobJmulticardDigestAlgorithm;
@class IOSByteArray;
@class IOSObjectArray;
@class JavaIoInputStream;
@class JavaSecurityCertX509Certificate;
@class JavaSecurityKeyPair;
@protocol JavaSecurityInterfacesRSAKey;
@protocol JavaSecurityInterfacesRSAPublicKey;
@protocol JavaSecuritySpecAlgorithmParameterSpec;

/*!
 @brief Funcionalidades criptogr&aacute;ficas de utilidad que pueden variar entre JSE/Android/J2Obc.
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s.
 */
@interface EsGobJmulticardCryptoHelper : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief A&ntilde;ade relleno PKCS#1 para operaciones con clave privada.
 @param inByteArray Datos a los que se quiere a &ntilde; adir relleno PKCS#1.
 @param keySize Tama &ntilde; o de la clave privada que operar &aacute;  posteriormente                 con estos datos con relleno.
 @return Datos con el relleno PKCS#1 a&ntilde;adido.
 @throw IOExceptionEn caso de error el el tratamiento de datos.
 */
+ (IOSByteArray *)addPkcs1PaddingForPrivateKeyOperationWithByteArray:(IOSByteArray *)inByteArray
                                                             withInt:(jint)keySize;

/*!
 @brief Desencripta datos mediante AES.
 @param data Datos a encriptar.
 @param iv Vector de inicializaci &oacute; n.            Si se proporciona  <code> null </code>  se usar &aacute;  un vector con valores aleatorios.
 @param key Clave AES de cifrado.
 @param blockMode Modo de gesti &oacute; n de bloques.
 @param padding Relleno a usar en los datos de entrada.
 @return Datos cifrados.
 @throw IOExceptionSi ocurre alg&uacute;n problema durante el encriptado.
 */
- (IOSByteArray *)aesDecryptWithByteArray:(IOSByteArray *)data
                            withByteArray:(IOSByteArray *)iv
                            withByteArray:(IOSByteArray *)key
withEsGobJmulticardCryptoHelper_BlockMode:(EsGobJmulticardCryptoHelper_BlockMode *)blockMode
  withEsGobJmulticardCryptoHelper_Padding:(EsGobJmulticardCryptoHelper_Padding *)padding;

/*!
 @brief Encripta datos mediante AES.
 @param data Datos a encriptar.
 @param iv Vector de inicializaci &oacute; n.            Si se proporciona  <code> null </code>  se usar &aacute;  un vector con valores aleatorios.
 @param key Clave AES de cifrado.
 @param blockMode Modo de gesti &oacute; n de bloques.
 @param padding Relleno a usar en los datos de entrada.
 @return Datos cifrados.
 @throw IOExceptionSi ocurre alg&uacute;n problema durante el encriptado.
 */
- (IOSByteArray *)aesEncryptWithByteArray:(IOSByteArray *)data
                            withByteArray:(IOSByteArray *)iv
                            withByteArray:(IOSByteArray *)key
withEsGobJmulticardCryptoHelper_BlockMode:(EsGobJmulticardCryptoHelper_BlockMode *)blockMode
  withEsGobJmulticardCryptoHelper_Padding:(EsGobJmulticardCryptoHelper_Padding *)padding;

/*!
 @brief Desencripta datos mediante DES (modo ECB sin relleno).
 @param data Datos a desencriptar.
 @param key Clave DES de descifrado.
 @return Datos descifrados.
 @throw IOExceptionSi ocurre alg&uacute;n problema durante el desencriptado.
 */
- (IOSByteArray *)desDecryptWithByteArray:(IOSByteArray *)data
                            withByteArray:(IOSByteArray *)key;

/*!
 @brief Desencripta datos mediante Triple DES (modo CBC sin relleno) y con una
  semilla (IV) de 8 bytes establecidos a cero.Si se le indica una clave de 24 bytes,
  la utilizar&aacute;a tal cual.
 Si se le indica una clave de 16 bytes,
  duplicar&aacute; los 8 primeros y los agregar&aacute; al final para obtener una de 24.
 @param data Datos a desencriptar.
 @param key Clave 3DES de descifrado.
 @return Datos descifrados.
 @throw IOExceptionSi ocurre alg&uacute;n problema durante el desencriptado.
 */
- (IOSByteArray *)desedeDecryptWithByteArray:(IOSByteArray *)data
                               withByteArray:(IOSByteArray *)key;

/*!
 @brief Encripta datos mediante Triple DES (modo CBC sin relleno) y con una
  semilla (IV) de 8 bytes establecidos a cero.
 Si se le indica una clave de 24 bytes, la utilizar&aacute;a tal cual.
  Si se le indica una clave de 16 bytes, duplicar&aacute; los 8 primeros
  y los agregar&aacute; al final para obtener una de 24.
 @param data Datos a encriptar.
 @param key Clave 3DES de cifrado.
 @return Datos cifrados.
 @throw IOExceptionSi ocurre alg&uacute;n problema durante el encriptado.
 */
- (IOSByteArray *)desedeEncryptWithByteArray:(IOSByteArray *)data
                               withByteArray:(IOSByteArray *)key;

/*!
 @brief Encripta datos mediante DES (modo ECB sin relleno).
 @param data Datos a encriptar.
 @param key Clave DES de cifrado.
 @return Datos cifrados.
 @throw IOExceptionSi ocurre alg&uacute;n problema durante el encriptado.
 */
- (IOSByteArray *)desEncryptWithByteArray:(IOSByteArray *)data
                            withByteArray:(IOSByteArray *)key;

/*!
 @brief Realiza una huella digital de los datos proporcionados.
 @param algorithm Algoritmo de huella digital que debe utilizarse.
 @param data Datos de entrada.
 @return Huella digital de los datos.
 @throw IOExceptionSi ocurre alg&uacute;n problema generando la huella digital.
 */
- (IOSByteArray *)digestWithEsGobJmulticardDigestAlgorithm:(EsGobJmulticardDigestAlgorithm *)algorithm
                                             withByteArray:(IOSByteArray *)data;

/*!
 @brief Realiza un CMAC con AES.
 @param data Datos (deben estar ya con el relleno adecuado).
 @param key Clave AES.
 @return CMAC.
 @throw NoSuchAlgorithmExceptionSi no se encuentra un proveedor que permita realizar CMAC con AES.
 @throw InvalidKeyExceptionSi la clave proporcionada no es una clave AES v&aacute;lida.
 */
- (IOSByteArray *)doAesCmacWithByteArray:(IOSByteArray *)data
                           withByteArray:(IOSByteArray *)key;

/*!
 @brief Genera un certificado a partir de su codificaci&oacute;n binaria.
 @param encoded Codificaci &oacute; n binaria del certificado.
 @return Certificado.
 @throw CertificateExceptionSi la codificaci&oacute;n binaria no correspond&iacute;a a un certificado.
 */
+ (JavaSecurityCertX509Certificate *)generateCertificateWithByteArray:(IOSByteArray *)encoded;

/*!
 @brief Genera un certificado a partir de un flujo hacia su codificaci&oacute;n binaria.
 @param is Flujo de lectura hacia la Codificaci &oacute; n binaria del certificado.
 @return Certificado.
 @throw CertificateExceptionSi la codificaci&oacute;n binaria no correspond&iacute;a a un
                               certificado o no se pudo leer del flujo de entrada.
 */
+ (JavaSecurityCertX509Certificate *)generateCertificateWithJavaIoInputStream:(JavaIoInputStream *)is;

/*!
 @brief Genera un par de claves de tipo curva el&iacute;ptica.
 @param curveName Tipo de curva el &iacute; ptica a utilizar.
 @return Par de claves generadas.
 @throw NoSuchAlgorithmExceptionSi el sistema no soporta la generaci&oacute;n de curvas el&iacute;pticas.
 @throw InvalidAlgorithmParameterExceptionSi el sistema no soporta el tipo de curva el&iacute;ptica indicada.
 */
- (JavaSecurityKeyPair *)generateEcKeyPairWithEsGobJmulticardCryptoHelper_EcCurve:(EsGobJmulticardCryptoHelper_EcCurve *)curveName;

/*!
 @brief Genera contenido aleatorio en un array de bytes.
 @param numBytes N &uacute; mero de bytes aleatorios que generar.
 @return Array de bytes aleatorios.
 @throw IOExceptionSi ocurre alg&uacute;n problema durante la generaci&oacute;n del aleatorio.
 */
- (IOSByteArray *)generateRandomBytesWithInt:(jint)numBytes;

/*!
 @brief Obtiene el contenido firmado de una firma CMS/PKCS#7.
 @param signedDataBytes Firma CMS/PKCS#7.
 @return Contenido firmado de una firma CMS/PKCS#7.
 @throw IOExceptionSi los datos proporcionados no son una firma CMS/PKCS#7 bien formada.
 */
- (IOSByteArray *)getCmsSignatureSignedContentWithByteArray:(IOSByteArray *)signedDataBytes;

/*!
 @brief Obtiene un punto en una curva el&iacute;ptica.
 @param nonceS Aleatorio de un solo uso.
 @param sharedSecretH Secreto compartido.
 @param curveName Nombre de la curva.
 @return Punto encapsulado.
 */
- (id<JavaSecuritySpecAlgorithmParameterSpec>)getEcPointWithByteArray:(IOSByteArray *)nonceS
                                                        withByteArray:(IOSByteArray *)sharedSecretH
                              withEsGobJmulticardCryptoHelper_EcCurve:(EsGobJmulticardCryptoHelper_EcCurve *)curveName;

/*!
 @brief Obtiene las utilidades para el establecimiento de un canal PACE
  (Password Authenticated Connection Establishment).
 @param cardAccess CardAccess de la tarjeta.
 @param paceChat PACE CHAT a usar en el establecimiento del canal PACE.
 @return Utilidades para el establecimiento de un canal PACE
 */
- (EsGobJmulticardCryptoHelper_PaceChannelHelper *)getPaceChannelHelperWithEsGobJmulticardAsn1IcaoCardAccess:(EsGobJmulticardAsn1IcaoCardAccess *)cardAccess
                                                              withEsGobJmulticardApduIso7816fourPacePaceChat:(EsGobJmulticardApduIso7816fourPacePaceChat *)paceChat;

/*!
 @brief Obtiene una clave p&uacute;blica de un certificado.
 Permite evitar invocar directamente al <code>getPublicKey()</code> del certificado
  y as&iacute; evitar problemas por la interpretaci&oacute;n
  del signo del <code>BigInteger</code> en ciertos entornos (como <i>J2Obc</i>).
 @param cert Certificado de origen.
 @return Clave p&uacute;blica RSA del certificado.
 */
- (id<JavaSecurityInterfacesRSAPublicKey>)getRsaPublicKeyWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

/*!
 @brief Desencripta datos mediante RSA.
 @param cipheredData Datos a desencriptar.
 @param key Clava RSA de descifrado.
 @return Datos descifrados.
 @throw IOExceptionSi ocurre alg&uacute;n problema durante el desencriptado.
 */
- (IOSByteArray *)rsaDecryptWithByteArray:(IOSByteArray *)cipheredData
         withJavaSecurityInterfacesRSAKey:(id<JavaSecurityInterfacesRSAKey>)key;

/*!
 @brief Encripta datos mediante RSA.
 @param data Datos a encriptar.
 @param key Clava RSA de cifrado.
 @return Datos encriptados.
 @throw IOExceptionSi ocurre alg&uacute;n problema durante el encriptado.
 */
- (IOSByteArray *)rsaEncryptWithByteArray:(IOSByteArray *)data
         withJavaSecurityInterfacesRSAKey:(id<JavaSecurityInterfacesRSAKey>)key;

/*!
 @brief Valida una firma CMS/PKCS#7.No comprueba la validez de los certificados de firma.
 @param signedDataBytes Firma CMS/PKCS#7.
 @return Cadena de certificados del firmante (para validaci&oacute;n externa).
 @throw SignatureExceptionSi la firma es inv&aacute;lida o est&aacute; mal formada.
 @throw IOExceptionSi los datos proporcionados no son una firma CMS/PKCS#7 bien formada.
 @throw CertificateExceptionSi hay problemas relacionados con los certificados de firma.
 */
- (IOSObjectArray *)validateCmsSignatureWithByteArray:(IOSByteArray *)signedDataBytes;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobJmulticardCryptoHelper)

FOUNDATION_EXPORT void EsGobJmulticardCryptoHelper_init(EsGobJmulticardCryptoHelper *self);

FOUNDATION_EXPORT IOSByteArray *EsGobJmulticardCryptoHelper_addPkcs1PaddingForPrivateKeyOperationWithByteArray_withInt_(IOSByteArray *inByteArray, jint keySize);

FOUNDATION_EXPORT JavaSecurityCertX509Certificate *EsGobJmulticardCryptoHelper_generateCertificateWithByteArray_(IOSByteArray *encoded);

FOUNDATION_EXPORT JavaSecurityCertX509Certificate *EsGobJmulticardCryptoHelper_generateCertificateWithJavaIoInputStream_(JavaIoInputStream *is);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardCryptoHelper)

#endif

#if !defined (EsGobJmulticardCryptoHelper_Padding_) && (INCLUDE_ALL_EsGobJmulticardCryptoHelper || defined(INCLUDE_EsGobJmulticardCryptoHelper_Padding))
#define EsGobJmulticardCryptoHelper_Padding_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, EsGobJmulticardCryptoHelper_Padding_Enum) {
  EsGobJmulticardCryptoHelper_Padding_Enum_NOPADDING = 0,
  EsGobJmulticardCryptoHelper_Padding_Enum_ISO7816_4PADDING = 1,
};

/*!
 @brief Tipos de relleno para cifrados.
 */
@interface EsGobJmulticardCryptoHelper_Padding : JavaLangEnum

#pragma mark Public

- (NSString *)description;

+ (EsGobJmulticardCryptoHelper_Padding *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (EsGobJmulticardCryptoHelper_Padding_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(EsGobJmulticardCryptoHelper_Padding)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT EsGobJmulticardCryptoHelper_Padding *EsGobJmulticardCryptoHelper_Padding_values_[];

/*!
 @brief Sin relleno.
 */
inline EsGobJmulticardCryptoHelper_Padding *EsGobJmulticardCryptoHelper_Padding_get_NOPADDING(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardCryptoHelper_Padding, NOPADDING)

/*!
 @brief Relleno ISO7816-4.
 */
inline EsGobJmulticardCryptoHelper_Padding *EsGobJmulticardCryptoHelper_Padding_get_ISO7816_4PADDING(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardCryptoHelper_Padding, ISO7816_4PADDING)

FOUNDATION_EXPORT IOSObjectArray *EsGobJmulticardCryptoHelper_Padding_values(void);

FOUNDATION_EXPORT EsGobJmulticardCryptoHelper_Padding *EsGobJmulticardCryptoHelper_Padding_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT EsGobJmulticardCryptoHelper_Padding *EsGobJmulticardCryptoHelper_Padding_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardCryptoHelper_Padding)

#endif

#if !defined (EsGobJmulticardCryptoHelper_BlockMode_) && (INCLUDE_ALL_EsGobJmulticardCryptoHelper || defined(INCLUDE_EsGobJmulticardCryptoHelper_BlockMode))
#define EsGobJmulticardCryptoHelper_BlockMode_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, EsGobJmulticardCryptoHelper_BlockMode_Enum) {
  EsGobJmulticardCryptoHelper_BlockMode_Enum_CBC = 0,
  EsGobJmulticardCryptoHelper_BlockMode_Enum_ECB = 1,
};

/*!
 @brief Tipos de manejo de bloques para cifrado.
 */
@interface EsGobJmulticardCryptoHelper_BlockMode : JavaLangEnum

#pragma mark Public

+ (EsGobJmulticardCryptoHelper_BlockMode *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (EsGobJmulticardCryptoHelper_BlockMode_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(EsGobJmulticardCryptoHelper_BlockMode)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT EsGobJmulticardCryptoHelper_BlockMode *EsGobJmulticardCryptoHelper_BlockMode_values_[];

/*!
 @brief Cipher Block Chaining.
 */
inline EsGobJmulticardCryptoHelper_BlockMode *EsGobJmulticardCryptoHelper_BlockMode_get_CBC(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardCryptoHelper_BlockMode, CBC)

/*!
 @brief Electronic CodeBook.
 */
inline EsGobJmulticardCryptoHelper_BlockMode *EsGobJmulticardCryptoHelper_BlockMode_get_ECB(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardCryptoHelper_BlockMode, ECB)

FOUNDATION_EXPORT IOSObjectArray *EsGobJmulticardCryptoHelper_BlockMode_values(void);

FOUNDATION_EXPORT EsGobJmulticardCryptoHelper_BlockMode *EsGobJmulticardCryptoHelper_BlockMode_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT EsGobJmulticardCryptoHelper_BlockMode *EsGobJmulticardCryptoHelper_BlockMode_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardCryptoHelper_BlockMode)

#endif

#if !defined (EsGobJmulticardCryptoHelper_EcCurve_) && (INCLUDE_ALL_EsGobJmulticardCryptoHelper || defined(INCLUDE_EsGobJmulticardCryptoHelper_EcCurve))
#define EsGobJmulticardCryptoHelper_EcCurve_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, EsGobJmulticardCryptoHelper_EcCurve_Enum) {
  EsGobJmulticardCryptoHelper_EcCurve_Enum_BRAINPOOL_P256_R1 = 0,
};

/*!
 @brief Nombres de curva el&iacute;ptica.
 */
@interface EsGobJmulticardCryptoHelper_EcCurve : JavaLangEnum

#pragma mark Public

- (NSString *)description;

+ (EsGobJmulticardCryptoHelper_EcCurve *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (EsGobJmulticardCryptoHelper_EcCurve_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(EsGobJmulticardCryptoHelper_EcCurve)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT EsGobJmulticardCryptoHelper_EcCurve *EsGobJmulticardCryptoHelper_EcCurve_values_[];

/*!
 @brief BrainpoolP256r1.
 */
inline EsGobJmulticardCryptoHelper_EcCurve *EsGobJmulticardCryptoHelper_EcCurve_get_BRAINPOOL_P256_R1(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardCryptoHelper_EcCurve, BRAINPOOL_P256_R1)

FOUNDATION_EXPORT IOSObjectArray *EsGobJmulticardCryptoHelper_EcCurve_values(void);

FOUNDATION_EXPORT EsGobJmulticardCryptoHelper_EcCurve *EsGobJmulticardCryptoHelper_EcCurve_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT EsGobJmulticardCryptoHelper_EcCurve *EsGobJmulticardCryptoHelper_EcCurve_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardCryptoHelper_EcCurve)

#endif

#if !defined (EsGobJmulticardCryptoHelper_PaceChannelHelper_) && (INCLUDE_ALL_EsGobJmulticardCryptoHelper || defined(INCLUDE_EsGobJmulticardCryptoHelper_PaceChannelHelper))
#define EsGobJmulticardCryptoHelper_PaceChannelHelper_

@class EsGobJmulticardConnectionPaceSecureMessaging;
@class EsGobJmulticardCryptoHelper;
@class IOSByteArray;
@class JavaMathBigInteger;
@protocol EsGobJmulticardCardIcaoWirelessInitializer;
@protocol EsGobJmulticardConnectionApduConnection;

/*!
 @brief Utilidades para el establecimiento de un canal PACE (Password Authenticated Connection Establishment).
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s.
 */
@interface EsGobJmulticardCryptoHelper_PaceChannelHelper : NSObject {
 @public
  /*!
   @brief Utilidad para operaciones criptogr&aacute;ficas.
   */
  EsGobJmulticardCryptoHelper *cryptoHelper_;
}

#pragma mark Public

/*!
 @brief Abre un canal PACE.
 @param cla Clase de APDU para los comandos de establecimiento de canal.
 @param pi Valor de inicializaci &oacute; n del canal. Puede ser un CAN            ( <i> Card Access Number </i> ), una MRZ ( <i> Machine Readable Zone </i> ) o un PIN.
 @param conn Conexi &oacute; n hacia la tarjeta inteligente.
 @return SecureMessaging Objeto para el env&iacute;o de mensajes seguros a trav&eacute;s de canal PACE.
 @throw ApduConnectionExceptionSi hay problemas de conexi&oacute;n con la tarjeta.
 @throw IcaoExceptionSi hay problemas en la apertura del canal.
 */
- (EsGobJmulticardConnectionPaceSecureMessaging *)openPaceChannelWithByte:(jbyte)cla
                           withEsGobJmulticardCardIcaoWirelessInitializer:(id<EsGobJmulticardCardIcaoWirelessInitializer>)pi
                              withEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn;

#pragma mark Protected

/*!
 @brief Constructor
 @param ch Utilidad para operaciones criptogr &aacute; ficas.
 */
- (instancetype)initWithEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)ch;

/*!
 @brief Obtiene la representaci&oacute;n de un <code>BigInteger</code> como un array de octetos.
 @param bi <code> BigInteger </code>  a convertir.
 @return Array de octetos que representa el <code>BigInteger</code> de entrada.
 */
+ (IOSByteArray *)bigIntToByteArrayWithJavaMathBigInteger:(JavaMathBigInteger *)bi;

/*!
 @brief Obtiene la representaci&oacute;n de una clave de curva el&iacute;ptica como un array de octetos.
 @param key Clave de curva el &iacute; ptica de entrada.
 @return Array de octetos que representa la clave de curva el&iacute;ptica de entrada.
 @throw TlvExceptionSi hay problemas desempaquetando la clave como array de octetos.
 */
+ (IOSByteArray *)unwrapEcKeyWithByteArray:(IOSByteArray *)key;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(EsGobJmulticardCryptoHelper_PaceChannelHelper)

J2OBJC_FIELD_SETTER(EsGobJmulticardCryptoHelper_PaceChannelHelper, cryptoHelper_, EsGobJmulticardCryptoHelper *)

/*!
 @brief Relleno para el inicializador PACE (CAN, MRZ, PIN o PUK).
 */
inline IOSByteArray *EsGobJmulticardCryptoHelper_PaceChannelHelper_get_CAN_MRZ_PADDING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *EsGobJmulticardCryptoHelper_PaceChannelHelper_CAN_MRZ_PADDING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCryptoHelper_PaceChannelHelper, CAN_MRZ_PADDING, IOSByteArray *)

/*!
 @brief Relleno para el <i>kenc</i>.
 */
inline IOSByteArray *EsGobJmulticardCryptoHelper_PaceChannelHelper_get_KENC_PADDING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *EsGobJmulticardCryptoHelper_PaceChannelHelper_KENC_PADDING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCryptoHelper_PaceChannelHelper, KENC_PADDING, IOSByteArray *)

/*!
 @brief Relleno para el <i>kmac</i>.
 */
inline IOSByteArray *EsGobJmulticardCryptoHelper_PaceChannelHelper_get_KMAC_PADDING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *EsGobJmulticardCryptoHelper_PaceChannelHelper_KMAC_PADDING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCryptoHelper_PaceChannelHelper, KMAC_PADDING, IOSByteArray *)

/*!
 @brief Relleno anterior para el MAC.
 */
inline IOSByteArray *EsGobJmulticardCryptoHelper_PaceChannelHelper_get_MAC_PADDING_PRE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *EsGobJmulticardCryptoHelper_PaceChannelHelper_MAC_PADDING_PRE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCryptoHelper_PaceChannelHelper, MAC_PADDING_PRE, IOSByteArray *)

/*!
 @brief Relleno posterior para el MAC.
 */
inline IOSByteArray *EsGobJmulticardCryptoHelper_PaceChannelHelper_get_MAC2_PADDING_POST(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *EsGobJmulticardCryptoHelper_PaceChannelHelper_MAC2_PADDING_POST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCryptoHelper_PaceChannelHelper, MAC2_PADDING_POST, IOSByteArray *)

FOUNDATION_EXPORT void EsGobJmulticardCryptoHelper_PaceChannelHelper_initWithEsGobJmulticardCryptoHelper_(EsGobJmulticardCryptoHelper_PaceChannelHelper *self, EsGobJmulticardCryptoHelper *ch);

FOUNDATION_EXPORT IOSByteArray *EsGobJmulticardCryptoHelper_PaceChannelHelper_bigIntToByteArrayWithJavaMathBigInteger_(JavaMathBigInteger *bi);

FOUNDATION_EXPORT IOSByteArray *EsGobJmulticardCryptoHelper_PaceChannelHelper_unwrapEcKeyWithByteArray_(IOSByteArray *key);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardCryptoHelper_PaceChannelHelper)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_EsGobJmulticardCryptoHelper")
