//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/ios/DnieWrapper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobJmulticardIosDnieWrapper")
#ifdef RESTRICT_EsGobJmulticardIosDnieWrapper
#define INCLUDE_ALL_EsGobJmulticardIosDnieWrapper 0
#else
#define INCLUDE_ALL_EsGobJmulticardIosDnieWrapper 1
#endif
#undef RESTRICT_EsGobJmulticardIosDnieWrapper

#if !defined (EsGobJmulticardIosDnieWrapper_) && (INCLUDE_ALL_EsGobJmulticardIosDnieWrapper || defined(INCLUDE_EsGobJmulticardIosDnieWrapper))
#define EsGobJmulticardIosDnieWrapper_

@class EsGobJmulticardCardDnieDnie;
@class IOSByteArray;
@class IOSObjectArray;
@class JavaSecurityCertX509Certificate;
@protocol EsGobJmulticardCardPrivateKeyReference;

/*!
 @brief Envoltura de la clase Dnie para la realizaci&oaacute;n de operaciones de firma.
 Cada uno de los m&eeacute;todos de la clase devolver&aacute; un valor por defecto en caso de
  producirse un error y se podr&aacute; consultar el error concreto a trac&eacute;s de los
  m&eacute;todos <code>getErrorCode</code> y <code>getErrorMessage</code>.
 */
@interface EsGobJmulticardIosDnieWrapper : NSObject

#pragma mark Public

/*!
 @brief Recupera el listado de alias de la tarjeta.
 @return Listado de alias o <code>null</code> si ocurri&oacute; un error.
 */
- (IOSObjectArray *)getAliases;

/*!
 @brief Recupera el nombre de la tarjeta conectada.
 @return Nombre de la tarjeta o <code>null</code> si ocurri&oacute; un error.
 */
- (NSString *)getCardName;

/*!
 @brief Recupera el certificado indicado.
 @param alias Alias del certificado que se desea obtener.
 @return Certificado seleccionado o <code>null</code> si ocurri&oacute; un error.
 */
- (JavaSecurityCertX509Certificate *)getCertificateWithNSString:(NSString *)alias;

/*!
 @brief Recupera el DNIe identificado.
 @return DNIe que se identific&oacute; en el lector.
 */
- (EsGobJmulticardCardDnieDnie *)getDnie;

/*!
 @brief Recupera el c&oacute;digo de error.
 @return C&oacute;digo de error o <code>-1</code> si no ocurri&oacute; ning&uacute;n error.
 - seealso: ErrorCodeErrorCode: Clase con los c&oacute;digos de error.
 */
- (jint)getErrorCode;

/*!
 @brief Recupera el mensaje de error.
 @return Mensaje de error o <code>null</code> si no ocurri&oacute; ning&uacute;n error.
 */
- (NSString *)getErrorMessage;

/*!
 @brief Devuelve los intentos restantes de comprobaci&oacute;n de PIN del DNIe.
 @return Intentos restantes de comprobaci&oacute;n de PIN del DNIe o <code>-1</code> si
  ocurri&oacute; alg&uacute;n error.
 */
- (jint)getPinRetriesLeft;

/*!
 @brief Recupera la referencia a la clave privada de un certificado.
 @param alias Alias del certificado del que se desea obtener la referencia.
 @return Referencia a la clave privada o <code>null</code> si ocurri&oacute; un error.
 */
- (id<EsGobJmulticardCardPrivateKeyReference>)getPrivateKeyWithNSString:(NSString *)alias;

/*!
 @brief Identifica si la operaci&oacute;n fall&oacute;.
 @return <code>true</code> si el resultado es un error, <code>false</code> en caso contrario.
 */
- (jboolean)isError;

/*!
 @brief Ejecuta la operaci&oacute;n de firma.
 @param data Datos que firmar.
 @param signAlgorithm Algoritmo de firma (HASHwithCIPHER).
 @param privateKeyReference Referencia a la clave privada con la que firmar.
 @return Firma resultante o <code>null</code> si ocurri&oacute; un error.
 */
- (IOSByteArray *)signWithByteArray:(IOSByteArray *)data
                       withNSString:(NSString *)signAlgorithm
withEsGobJmulticardCardPrivateKeyReference:(id<EsGobJmulticardCardPrivateKeyReference>)privateKeyReference;

#pragma mark Package-Private

/*!
 @brief Compone el envoltorio con la tarjeta a la que se ha conectado.
 @param dnie Tarjeta inteligente compatible con DNIe.
 */
- (instancetype)initWithEsGobJmulticardCardDnieDnie:(EsGobJmulticardCardDnieDnie *)dnie;

/*!
 @brief Compone el envoltorio con la tarjeta el error que se detecto en la conexi&oacute;n.
 @param errorCode C &oacute; digo de error.
 @param errorMessage Mensaje de error.
 - seealso: ErrorCodeErrorCode: Clase con los c&oacute;digos de error.
 */
- (instancetype)initWithInt:(jint)errorCode
               withNSString:(NSString *)errorMessage;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobJmulticardIosDnieWrapper)

FOUNDATION_EXPORT void EsGobJmulticardIosDnieWrapper_initWithEsGobJmulticardCardDnieDnie_(EsGobJmulticardIosDnieWrapper *self, EsGobJmulticardCardDnieDnie *dnie);

FOUNDATION_EXPORT EsGobJmulticardIosDnieWrapper *new_EsGobJmulticardIosDnieWrapper_initWithEsGobJmulticardCardDnieDnie_(EsGobJmulticardCardDnieDnie *dnie) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobJmulticardIosDnieWrapper *create_EsGobJmulticardIosDnieWrapper_initWithEsGobJmulticardCardDnieDnie_(EsGobJmulticardCardDnieDnie *dnie);

FOUNDATION_EXPORT void EsGobJmulticardIosDnieWrapper_initWithInt_withNSString_(EsGobJmulticardIosDnieWrapper *self, jint errorCode, NSString *errorMessage);

FOUNDATION_EXPORT EsGobJmulticardIosDnieWrapper *new_EsGobJmulticardIosDnieWrapper_initWithInt_withNSString_(jint errorCode, NSString *errorMessage) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobJmulticardIosDnieWrapper *create_EsGobJmulticardIosDnieWrapper_initWithInt_withNSString_(jint errorCode, NSString *errorMessage);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardIosDnieWrapper)

#endif

#pragma pop_macro("INCLUDE_ALL_EsGobJmulticardIosDnieWrapper")
