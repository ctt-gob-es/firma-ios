//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/ios/DnieWrapper.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/card/AuthenticationModeLockedException.h"
#include "es/gob/jmulticard/card/BadPinException.h"
#include "es/gob/jmulticard/card/CryptoCardException.h"
#include "es/gob/jmulticard/card/PinException.h"
#include "es/gob/jmulticard/card/PrivateKeyReference.h"
#include "es/gob/jmulticard/card/dnie/Dnie.h"
#include "es/gob/jmulticard/connection/ApduConnectionException.h"
#include "es/gob/jmulticard/ios/DnieWrapper.h"
#include "es/gob/jmulticard/ios/ErrorCode.h"
#include "java/lang/Throwable.h"
#include "java/security/cert/X509Certificate.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/ios/DnieWrapper must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardIosDnieWrapper () {
 @public
  jint errorCode_;
  NSString *errorMessage_;
  EsGobJmulticardCardDnieDnie *dnie_;
}

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardIosDnieWrapper, errorMessage_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardIosDnieWrapper, dnie_, EsGobJmulticardCardDnieDnie *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/ios/DnieWrapper.java"


#line 19
@implementation EsGobJmulticardIosDnieWrapper


#line 30
- (instancetype)initWithEsGobJmulticardCardDnieDnie:(EsGobJmulticardCardDnieDnie *)dnie {
  EsGobJmulticardIosDnieWrapper_initWithEsGobJmulticardCardDnieDnie_(self, dnie);
  return self;
}


#line 42
- (instancetype)initWithInt:(jint)errorCode
               withNSString:(NSString *)errorMessage {
  EsGobJmulticardIosDnieWrapper_initWithInt_withNSString_(self, errorCode, errorMessage);
  return self;
}


#line 52
- (jboolean)isError {
  return self->errorCode_ == -1;
}


#line 60
- (EsGobJmulticardCardDnieDnie *)getDnie {
  return self->dnie_;
}


#line 69
- (jint)getErrorCode {
  return self->errorCode_;
}


#line 77
- (NSString *)getErrorMessage {
  return self->errorMessage_;
}


#line 85
- (NSString *)getCardName {
  NSString *cardName = nil;
  if (self->dnie_ != nil) {
    cardName = [self->dnie_ getCardName];
    self->errorCode_ = -1;
    self->errorMessage_ = nil;
  }
  else {
    
#line 92
    self->errorCode_ = EsGobJmulticardIosErrorCode_NOT_INITIALIZED;
    self->errorMessage_ = @"No se inicio la conexion con la tarjeta";
  }
  return cardName;
}


#line 102
- (IOSObjectArray *)getAliases {
  IOSObjectArray *aliases = nil;
  if (self->dnie_ != nil) {
    aliases = [self->dnie_ getAliases];
    self->errorCode_ = -1;
    self->errorMessage_ = nil;
  }
  else {
    
#line 109
    self->errorCode_ = EsGobJmulticardIosErrorCode_NOT_INITIALIZED;
    self->errorMessage_ = @"No se inicio la conexion con la tarjeta";
  }
  return aliases;
}


#line 120
- (JavaSecurityCertX509Certificate *)getCertificateWithNSString:(NSString *)alias {
  JavaSecurityCertX509Certificate *cert = nil;
  if (self->dnie_ != nil) {
    cert = [self->dnie_ getCertificateWithNSString:alias];
    self->errorCode_ = -1;
    self->errorMessage_ = nil;
  }
  else {
    
#line 127
    self->errorCode_ = EsGobJmulticardIosErrorCode_NOT_INITIALIZED;
    self->errorMessage_ = @"No se inicio la conexion con la tarjeta";
  }
  return cert;
}


#line 138
- (id<EsGobJmulticardCardPrivateKeyReference>)getPrivateKeyWithNSString:(NSString *)alias {
  id<EsGobJmulticardCardPrivateKeyReference> pkRef = nil;
  if (self->dnie_ != nil) {
    pkRef = [self->dnie_ getPrivateKeyWithNSString:alias];
    self->errorCode_ = -1;
    self->errorMessage_ = nil;
  }
  else {
    
#line 145
    self->errorCode_ = EsGobJmulticardIosErrorCode_NOT_INITIALIZED;
    self->errorMessage_ = @"No se inicio la conexion con la tarjeta";
  }
  return pkRef;
}


#line 156
- (jint)getPinRetriesLeft {
  jint retries = -1;
  if (self->dnie_ != nil) {
    @try {
      retries = [self->dnie_ getPinRetriesLeft];
      self->errorCode_ = -1;
      self->errorMessage_ = nil;
    }
    @catch (
#line 163
    EsGobJmulticardConnectionApduConnectionException *e) {
      self->errorCode_ = EsGobJmulticardIosErrorCode_OPERATION_ERROR;
      self->errorMessage_ = [e getMessage];
    }
  }
  else {
    
#line 168
    self->errorCode_ = EsGobJmulticardIosErrorCode_NOT_INITIALIZED;
    self->errorMessage_ = @"No se inicio la conexion con la tarjeta";
  }
  return retries;
}


#line 181
- (IOSByteArray *)signWithByteArray:(IOSByteArray *)data
                       withNSString:(NSString *)signAlgorithm
withEsGobJmulticardCardPrivateKeyReference:(id<EsGobJmulticardCardPrivateKeyReference>)privateKeyReference {
  
#line 185
  IOSByteArray *signature = nil;
  if (self->dnie_ != nil) {
    @try {
      signature = [self->dnie_ signWithByteArray:data withNSString:signAlgorithm withEsGobJmulticardCardPrivateKeyReference:privateKeyReference];
      self->errorCode_ = -1;
      self->errorMessage_ = nil;
    }
    @catch (
#line 191
    EsGobJmulticardCardCryptoCardException *e) {
      self->errorCode_ = EsGobJmulticardIosErrorCode_OPERATION_ERROR;
      self->errorMessage_ = [e getMessage];
    }
    @catch (
#line 194
    EsGobJmulticardCardBadPinException *e) {
      self->errorCode_ = EsGobJmulticardIosErrorCode_BAD_PIN;
      self->errorMessage_ = [e getMessage];
    }
    @catch (
#line 197
    EsGobJmulticardCardAuthenticationModeLockedException *e) {
      self->errorCode_ = EsGobJmulticardIosErrorCode_LOCKED_CARD;
      self->errorMessage_ = [e getMessage];
    }
    @catch (
#line 200
    EsGobJmulticardCardPinException *e) {
      self->errorCode_ = EsGobJmulticardIosErrorCode_PIN_ERROR;
      self->errorMessage_ = [e getMessage];
    }
    @catch (
#line 203
    JavaLangThrowable *e) {
      self->errorCode_ = EsGobJmulticardIosErrorCode_SEVERE_ERROR;
      self->errorMessage_ = [e description];
    }
  }
  else {
    
#line 208
    self->errorCode_ = EsGobJmulticardIosErrorCode_NOT_INITIALIZED;
    self->errorMessage_ = @"No se inicio la conexion con la tarjeta";
  }
  return signature;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardDnieDnie;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x11, 2, 3, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardPrivateKeyReference;", 0x11, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithEsGobJmulticardCardDnieDnie:);
  methods[1].selector = @selector(initWithInt:withNSString:);
  methods[2].selector = @selector(isError);
  methods[3].selector = @selector(getDnie);
  methods[4].selector = @selector(getErrorCode);
  methods[5].selector = @selector(getErrorMessage);
  methods[6].selector = @selector(getCardName);
  methods[7].selector = @selector(getAliases);
  methods[8].selector = @selector(getCertificateWithNSString:);
  methods[9].selector = @selector(getPrivateKeyWithNSString:);
  methods[10].selector = @selector(getPinRetriesLeft);
  methods[11].selector = @selector(signWithByteArray:withNSString:withEsGobJmulticardCardPrivateKeyReference:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "errorCode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "errorMessage_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dnie_", "LEsGobJmulticardCardDnieDnie;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEsGobJmulticardCardDnieDnie;", "ILNSString;", "getCertificate", "LNSString;", "getPrivateKey", "sign", "[BLNSString;LEsGobJmulticardCardPrivateKeyReference;" };
  static const J2ObjcClassInfo _EsGobJmulticardIosDnieWrapper = { "DnieWrapper", "es.gob.jmulticard.ios", ptrTable, methods, fields, 7, 0x1, 12, 3, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardIosDnieWrapper;
}

@end


#line 30
void EsGobJmulticardIosDnieWrapper_initWithEsGobJmulticardCardDnieDnie_(EsGobJmulticardIosDnieWrapper *self, EsGobJmulticardCardDnieDnie *dnie) {
  NSObject_init(self);
  
#line 31
  self->dnie_ = dnie;
  self->errorCode_ = -1;
  self->errorMessage_ = nil;
}


#line 30
EsGobJmulticardIosDnieWrapper *new_EsGobJmulticardIosDnieWrapper_initWithEsGobJmulticardCardDnieDnie_(EsGobJmulticardCardDnieDnie *dnie) {
  J2OBJC_NEW_IMPL(EsGobJmulticardIosDnieWrapper, initWithEsGobJmulticardCardDnieDnie_, dnie)
}


#line 30
EsGobJmulticardIosDnieWrapper *create_EsGobJmulticardIosDnieWrapper_initWithEsGobJmulticardCardDnieDnie_(EsGobJmulticardCardDnieDnie *dnie) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardIosDnieWrapper, initWithEsGobJmulticardCardDnieDnie_, dnie)
}


#line 42
void EsGobJmulticardIosDnieWrapper_initWithInt_withNSString_(EsGobJmulticardIosDnieWrapper *self, jint errorCode, NSString *errorMessage) {
  NSObject_init(self);
  
#line 43
  self->dnie_ = nil;
  self->errorCode_ = errorCode;
  self->errorMessage_ = errorMessage;
}


#line 42
EsGobJmulticardIosDnieWrapper *new_EsGobJmulticardIosDnieWrapper_initWithInt_withNSString_(jint errorCode, NSString *errorMessage) {
  J2OBJC_NEW_IMPL(EsGobJmulticardIosDnieWrapper, initWithInt_withNSString_, errorCode, errorMessage)
}


#line 42
EsGobJmulticardIosDnieWrapper *create_EsGobJmulticardIosDnieWrapper_initWithInt_withNSString_(jint errorCode, NSString *errorMessage) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardIosDnieWrapper, initWithInt_withNSString_, errorCode, errorMessage)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardIosDnieWrapper)
