//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/icao/Sod.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobJmulticardAsn1IcaoSod")
#ifdef RESTRICT_EsGobJmulticardAsn1IcaoSod
#define INCLUDE_ALL_EsGobJmulticardAsn1IcaoSod 0
#else
#define INCLUDE_ALL_EsGobJmulticardAsn1IcaoSod 1
#endif
#undef RESTRICT_EsGobJmulticardAsn1IcaoSod

#if !defined (EsGobJmulticardAsn1IcaoSod_) && (INCLUDE_ALL_EsGobJmulticardAsn1IcaoSod || defined(INCLUDE_EsGobJmulticardAsn1IcaoSod))
#define EsGobJmulticardAsn1IcaoSod_

#define RESTRICT_EsGobJmulticardAsn1DecoderObject 1
#define INCLUDE_EsGobJmulticardAsn1DecoderObject 1
#include "es/gob/jmulticard/asn1/DecoderObject.h"

@class EsGobJmulticardAsn1IcaoLdsSecurityObject;
@class EsGobJmulticardCryptoHelper;
@class IOSByteArray;
@class IOSObjectArray;

/*!
 @brief SOD de ICAO 9303.
 La implementaci&oacute;n interna se apoya en BouncyCastle.
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s.
 */
@interface EsGobJmulticardAsn1IcaoSod : EsGobJmulticardAsn1DecoderObject

#pragma mark Public

/*!
 @brief Constructor.
 @param ch Clase de utilidad para operaciones criptogr &aacute; ficas.
 */
- (instancetype)initWithEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)ch;

/*!
 @brief Obtiene la cadena de certificados del firmante del LDSSecurityObject.
 La obtenci&oacute;n desencadena una validaci&oacute;n de la firma
  electr&oacute;nica del SOD.
 @return Cadena de certificados del firmante del LDSSecurityObject.
 @throw TlvExceptionSi el SOD del documento no es un TLV v&aacute;lido.
 @throw Asn1ExceptionSi el SOD del documento no es un tipo ASN&#46;1 v&aacute;lido.
 @throw IOExceptionSi se encunetra alguna estructura ASN&#46;1 mal formada.
 @throw CertificateExceptionSi los certificados de firma del SOD presentan problemas.
 @throw SignatureExceptionSi la firma del SOD es inv&aacute;lida o presenta problemas.
 */
- (IOSObjectArray *)getCertificateChain;

/*!
 @brief Obtiene el <code>LDSSecurityObject</code>.
 La obtenci&oacute;n desencadena una validaci&oacute;n de la firma
  electr&oacute;nica del SOD.
 @return LDSSecurityObject.
 @throw TlvExceptionSi el SOD del documento no es un TLV v&aacute;lido.
 @throw IOExceptionSi no se puede construir el <code>LDSSecurityObject</code>.
 @throw Asn1ExceptionSi los datos encontrados no conforman un
          <code>LDSSecurityObject</code> v&aacute;lido.
 @throw CertificateExceptionSi los certificados de firma del SOD presentan problemas.
 @throw SignatureExceptionSi la firma del SOD es inv&aacute;lida o presenta problemas.
 */
- (EsGobJmulticardAsn1IcaoLdsSecurityObject *)getLdsSecurityObject;

/*!
 @brief Obtiene la codificaci&oacute;n binaria del LDSSecurityObject.
 La obtenci&oacute;n desencadena una validaci&oacute;n de la firma
  electr&oacute;nica del SOD.
 @return Codificaci&oacute;n binaria del LDSSecurityObject.
 @throw IOExceptionSi se encunetra alguna estructura ASN&#46;1 mal formada.
 @throw CertificateExceptionSi los certificados de firma del SOD presentan problemas.
 @throw SignatureExceptionSi la firma del SOD es inv&aacute;lida o presenta problemas.
 @throw TlvExceptionSi el SOD del documento no es un TLV v&aacute;lido.
 @throw Asn1ExceptionSi el SOD no contiene un <code>LDSSecurityObject</code> v&aacute;lido.
 */
- (IOSByteArray *)getLdsSecurityObjectBytes;

- (NSString *)description;

/*!
 @brief Valida la firma electr&oacute;nica del SOD.
 @throw TlvExceptionSi el SOD no es un TLV correctamente formado.
 @throw SignatureExceptionSi la firma no es v&aacute;lida.
 @throw CertificateExceptionSi hay problemas relacionados con los certificados de firma.
 @throw IOExceptionSi los datos proporcionados no son una firma CMS/PKCS#7 bien formada.
 @throw Asn1ExceptionSi el SOD no contiene un <code>LDSSecurityObject</code> v&aacute;lido.
 */
- (void)validateSignature;

#pragma mark Protected

- (void)decodeValue;

- (jbyte)getDefaultTag;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobJmulticardAsn1IcaoSod)

FOUNDATION_EXPORT void EsGobJmulticardAsn1IcaoSod_initWithEsGobJmulticardCryptoHelper_(EsGobJmulticardAsn1IcaoSod *self, EsGobJmulticardCryptoHelper *ch);

FOUNDATION_EXPORT EsGobJmulticardAsn1IcaoSod *new_EsGobJmulticardAsn1IcaoSod_initWithEsGobJmulticardCryptoHelper_(EsGobJmulticardCryptoHelper *ch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobJmulticardAsn1IcaoSod *create_EsGobJmulticardAsn1IcaoSod_initWithEsGobJmulticardCryptoHelper_(EsGobJmulticardCryptoHelper *ch);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardAsn1IcaoSod)

#endif

#pragma pop_macro("INCLUDE_ALL_EsGobJmulticardAsn1IcaoSod")
