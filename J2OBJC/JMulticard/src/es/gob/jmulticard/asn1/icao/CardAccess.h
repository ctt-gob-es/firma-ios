//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/icao/CardAccess.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobJmulticardAsn1IcaoCardAccess")
#ifdef RESTRICT_EsGobJmulticardAsn1IcaoCardAccess
#define INCLUDE_ALL_EsGobJmulticardAsn1IcaoCardAccess 0
#else
#define INCLUDE_ALL_EsGobJmulticardAsn1IcaoCardAccess 1
#endif
#undef RESTRICT_EsGobJmulticardAsn1IcaoCardAccess

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (EsGobJmulticardAsn1IcaoCardAccess_) && (INCLUDE_ALL_EsGobJmulticardAsn1IcaoCardAccess || defined(INCLUDE_EsGobJmulticardAsn1IcaoCardAccess))
#define EsGobJmulticardAsn1IcaoCardAccess_

@class EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm;
@class EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam;
@class EsGobJmulticardDigestAlgorithm;

/*!
 @brief EF&#46;CardAccess de aplicaci&oacute;n de LDS1 para el eMRTD de ICAO 9303.
 Implementaci&oacute;n ficticia hasta tener el correcto an&aacute;lisis de las estructuras ASN&#46;1.
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s.
 */
@interface EsGobJmulticardAsn1IcaoCardAccess : NSObject

#pragma mark Public

/*!
 @brief Construye un CardAccess de ICAO 9303.
 Es una implementaci&oacute;n ficticia que recibe los datos en el constructor.
 @param algorithm Algoritmo de establecimiento del canal PACE.
 @param algorithmParam Par &aacute; metros del algoritmo de establecimiento del canal PACE.
 @param digestAlgorithm Algoritmo de huella a usar en el establecimiento de canal PACE.
 */
- (instancetype)initWithEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm:(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *)algorithm
               withEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam:(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *)algorithmParam
                                     withEsGobJmulticardDigestAlgorithm:(EsGobJmulticardDigestAlgorithm *)digestAlgorithm;

/*!
 @brief Obtiene el algoritmo de establecimiento de canal PACE.
 @return Algoritmo de establecimiento de canal PACE.
 */
- (EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *)getPaceAlgorithm;

/*!
 @brief Obtiene el par&aacute;metro del algoritmo de establecimiento de canal PACE.
 @return Par&aacute;metro del algoritmo de establecimiento de canal PACE.
 */
- (EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *)getPaceAlgorithmParam;

/*!
 @brief Obtiene el algoritmo de huella a usar en el establecimiento de canal PACE.
 @return Algoritmo de huella a usar en el establecimiento de canal PACE.
 */
- (EsGobJmulticardDigestAlgorithm *)getPaceDigestAlgorithm;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobJmulticardAsn1IcaoCardAccess)

FOUNDATION_EXPORT void EsGobJmulticardAsn1IcaoCardAccess_initWithEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_withEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_withEsGobJmulticardDigestAlgorithm_(EsGobJmulticardAsn1IcaoCardAccess *self, EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *algorithm, EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *algorithmParam, EsGobJmulticardDigestAlgorithm *digestAlgorithm);

FOUNDATION_EXPORT EsGobJmulticardAsn1IcaoCardAccess *new_EsGobJmulticardAsn1IcaoCardAccess_initWithEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_withEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_withEsGobJmulticardDigestAlgorithm_(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *algorithm, EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *algorithmParam, EsGobJmulticardDigestAlgorithm *digestAlgorithm) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobJmulticardAsn1IcaoCardAccess *create_EsGobJmulticardAsn1IcaoCardAccess_initWithEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_withEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_withEsGobJmulticardDigestAlgorithm_(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *algorithm, EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *algorithmParam, EsGobJmulticardDigestAlgorithm *digestAlgorithm);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardAsn1IcaoCardAccess)

#endif

#if !defined (EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_) && (INCLUDE_ALL_EsGobJmulticardAsn1IcaoCardAccess || defined(INCLUDE_EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm))
#define EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSByteArray;
@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_Enum) {
  EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_Enum_PACE_ECDH_GM_AES_CBC_CMAC_128 = 0,
  EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_Enum_PACE_ECDH_GM_AES_CBC_CMAC_192 = 1,
  EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_Enum_PACE_DH_GM_AES_CBC_CMAC_128 = 2,
};

/*!
 @brief Algoritmo de establecimiento de canal PACE.
 <p>Los OID son una combinaci&oacute;n de:</p>
  <ul>
    <li>0.4.0.127.0.7 (bsi-de)</li>
    <li>
      <ul>
        <li>2.2.4 (id_PACE)</li>
        <li>
          <ul>
            <li>1 (id_PACE_DH_GM)</li>
            <li>2 (id_PACE_ECDH_GM)</li>
            <li>3 (id_PACE_DH_IM)</li>
            <lI>4 (id_PACE_ECDH_IM)</li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
 */
@interface EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm : JavaLangEnum

#pragma mark Public

/*!
 @brief Obtiene la representaci&oacute;n binaria del OID.
 @return Representaci&oacute;n binaria del OID.
 */
- (IOSByteArray *)getBytes;

/*!
 @brief Obtiene la longitud de clave del algoritmo (en bits).
 @return Longitud (en bits) de clave del algoritmo.
 */
- (jint)getKeyLength;

+ (EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_values_[];

/*!
 @brief id_PACE_ECDH_GM_AES_CBC_CMAC_128 (OID 0.4.0.127.0.7.2.2.4.2.2).
 */
inline EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_get_PACE_ECDH_GM_AES_CBC_CMAC_128(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm, PACE_ECDH_GM_AES_CBC_CMAC_128)

/*!
 @brief id_PACE_ECDH_GM_AES_CBC_CMAC_192 (OID 0.4.0.127.0.7.2.2.4.2.3).
 */
inline EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_get_PACE_ECDH_GM_AES_CBC_CMAC_192(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm, PACE_ECDH_GM_AES_CBC_CMAC_192)

/*!
 @brief id_PACE_DH_GM_AES_CBC_CMAC_128 (OID 0.4.0.127.0.7.2.2.4.1.2).
 */
inline EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_get_PACE_DH_GM_AES_CBC_CMAC_128(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm, PACE_DH_GM_AES_CBC_CMAC_128)

FOUNDATION_EXPORT IOSObjectArray *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_values(void);

FOUNDATION_EXPORT EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm)

#endif

#if !defined (EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_) && (INCLUDE_ALL_EsGobJmulticardAsn1IcaoCardAccess || defined(INCLUDE_EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam))
#define EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSByteArray;
@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_Enum) {
  EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_Enum_BRAINPOOL_256_R1 = 0,
};

/*!
 @brief Par&aacute;metro para el algoritmo de establecimiento de canal PACE.
 */
@interface EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam : JavaLangEnum

#pragma mark Public

/*!
 @brief Obtiene la representaci&oacute;n binaria del OID.
 @return Representaci&oacute;n binaria del OID.
 */
- (IOSByteArray *)getBytes;

/*!
 @brief Obtiene el nombre de la curva (el&iacute;ptica).
 @return Nombre de la curva (el&iacute;ptica), o <code>null</code>
          si el algoritmo no es de curva el&iacute;ptica.
 */
- (NSString *)getCurveName;

+ (EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_values_[];

/*!
 @brief Curva <i>brainpool256r1</i>.
 */
inline EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_get_BRAINPOOL_256_R1(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam, BRAINPOOL_256_R1)

FOUNDATION_EXPORT IOSObjectArray *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_values(void);

FOUNDATION_EXPORT EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_EsGobJmulticardAsn1IcaoCardAccess")
