//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/icao/CardAccess.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/DigestAlgorithm.h"
#include "es/gob/jmulticard/asn1/icao/CardAccess.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/asn1/icao/CardAccess must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardAsn1IcaoCardAccess () {
 @public
  EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *paceAlgorithm_;
  EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *paceAlgorithmParam_;
  EsGobJmulticardDigestAlgorithm *paceDigestAlgorithm_;
}

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardAsn1IcaoCardAccess, paceAlgorithm_, EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *)
J2OBJC_FIELD_SETTER(EsGobJmulticardAsn1IcaoCardAccess, paceAlgorithmParam_, EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *)
J2OBJC_FIELD_SETTER(EsGobJmulticardAsn1IcaoCardAccess, paceDigestAlgorithm_, EsGobJmulticardDigestAlgorithm *)

@interface EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm () {
 @public
  IOSByteArray *oidBytes_;
  jint keyLength_;
}

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm, oidBytes_, IOSByteArray *)

__attribute__((unused)) static void EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_initWithByteArray_withInt_withNSString_withInt_(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *self, IOSByteArray *oid, jint keyLen, NSString *__name, jint __ordinal);

__attribute__((unused)) static EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *new_EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_initWithByteArray_withInt_withNSString_withInt_(IOSByteArray *oid, jint keyLen, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam () {
 @public
  IOSByteArray *paramBytes_;
  NSString *curveName_;
}

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam, paramBytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam, curveName_, NSString *)

__attribute__((unused)) static void EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_initWithByteArray_withNSString_withNSString_withInt_(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *self, IOSByteArray *paramId, NSString *curve, NSString *__name, jint __ordinal);

__attribute__((unused)) static EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *new_EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_initWithByteArray_withNSString_withNSString_withInt_(IOSByteArray *paramId, NSString *curve, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/icao/CardAccess.java"


#line 8
@implementation EsGobJmulticardAsn1IcaoCardAccess


#line 128
- (instancetype)initWithEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm:(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *)algorithm
               withEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam:(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *)algorithmParam
                                     withEsGobJmulticardDigestAlgorithm:(EsGobJmulticardDigestAlgorithm *)digestAlgorithm {
  EsGobJmulticardAsn1IcaoCardAccess_initWithEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_withEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_withEsGobJmulticardDigestAlgorithm_(self, algorithm, algorithmParam, digestAlgorithm);
  return self;
}


#line 138
- (EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *)getPaceAlgorithm {
  return paceAlgorithm_;
}


#line 144
- (EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *)getPaceAlgorithmParam {
  return paceAlgorithmParam_;
}


#line 150
- (EsGobJmulticardDigestAlgorithm *)getPaceDigestAlgorithm {
  return paceDigestAlgorithm_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardDigestAlgorithm;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm:withEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam:withEsGobJmulticardDigestAlgorithm:);
  methods[1].selector = @selector(getPaceAlgorithm);
  methods[2].selector = @selector(getPaceAlgorithmParam);
  methods[3].selector = @selector(getPaceDigestAlgorithm);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "paceAlgorithm_", "LEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "paceAlgorithmParam_", "LEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "paceDigestAlgorithm_", "LEsGobJmulticardDigestAlgorithm;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm;LEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam;LEsGobJmulticardDigestAlgorithm;", "LEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm;LEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam;" };
  static const J2ObjcClassInfo _EsGobJmulticardAsn1IcaoCardAccess = { "CardAccess", "es.gob.jmulticard.asn1.icao", ptrTable, methods, fields, 7, 0x11, 4, 3, -1, 1, -1, -1, -1 };
  return &_EsGobJmulticardAsn1IcaoCardAccess;
}

@end


#line 128
void EsGobJmulticardAsn1IcaoCardAccess_initWithEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_withEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_withEsGobJmulticardDigestAlgorithm_(EsGobJmulticardAsn1IcaoCardAccess *self, EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *algorithm, EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *algorithmParam, EsGobJmulticardDigestAlgorithm *digestAlgorithm) {
  NSObject_init(self);
  
#line 131
  self->paceAlgorithm_ = algorithm;
  self->paceAlgorithmParam_ = algorithmParam;
  self->paceDigestAlgorithm_ = digestAlgorithm;
}


#line 128
EsGobJmulticardAsn1IcaoCardAccess *new_EsGobJmulticardAsn1IcaoCardAccess_initWithEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_withEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_withEsGobJmulticardDigestAlgorithm_(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *algorithm, EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *algorithmParam, EsGobJmulticardDigestAlgorithm *digestAlgorithm) {
  J2OBJC_NEW_IMPL(EsGobJmulticardAsn1IcaoCardAccess, initWithEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_withEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_withEsGobJmulticardDigestAlgorithm_, algorithm, algorithmParam, digestAlgorithm)
}


#line 128
EsGobJmulticardAsn1IcaoCardAccess *create_EsGobJmulticardAsn1IcaoCardAccess_initWithEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_withEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_withEsGobJmulticardDigestAlgorithm_(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *algorithm, EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *algorithmParam, EsGobJmulticardDigestAlgorithm *digestAlgorithm) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardAsn1IcaoCardAccess, initWithEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_withEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_withEsGobJmulticardDigestAlgorithm_, algorithm, algorithmParam, digestAlgorithm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardAsn1IcaoCardAccess)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/icao/CardAccess.java"

J2OBJC_INITIALIZED_DEFN(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm)

EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_values_[3];


#line 28
@implementation EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm


#line 73
- (IOSByteArray *)getBytes {
  return [((IOSByteArray *) nil_chk(oidBytes_)) java_clone];
}


#line 79
- (jint)getKeyLength {
  return keyLength_;
}

+ (IOSObjectArray *)values {
  return EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_values();
}

+ (EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *)valueOfWithNSString:(NSString *)name {
  return EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_valueOfWithNSString_(name);
}

- (EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_Enum)toNSEnum {
  return (EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getBytes);
  methods[1].selector = @selector(getKeyLength);
  methods[2].selector = @selector(values);
  methods[3].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PACE_ECDH_GM_AES_CBC_CMAC_128", "LEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "PACE_ECDH_GM_AES_CBC_CMAC_192", "LEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "PACE_DH_GM_AES_CBC_CMAC_128", "LEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "oidBytes_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keyLength_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm, PACE_ECDH_GM_AES_CBC_CMAC_128), &JreEnum(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm, PACE_ECDH_GM_AES_CBC_CMAC_192), &JreEnum(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm, PACE_DH_GM_AES_CBC_CMAC_128), "LEsGobJmulticardAsn1IcaoCardAccess;", "Ljava/lang/Enum<Les/gob/jmulticard/asn1/icao/CardAccess$PaceAlgorithm;>;" };
  static const J2ObjcClassInfo _EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm = { "PaceAlgorithm", "es.gob.jmulticard.asn1.icao", ptrTable, methods, fields, 7, 0x4019, 4, 5, 5, -1, -1, 6, -1 };
  return &_EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm;
}

+ (void)initialize {
  if (self == [EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm class]) {
    JreEnum(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm, PACE_ECDH_GM_AES_CBC_CMAC_128) = new_EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_initWithByteArray_withInt_withNSString_withInt_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 34
      (jbyte) (jint) 0x0A,
#line 35
      (jbyte) (jint) 0x04, (jbyte) (jint) 0x00, (jbyte) (jint) 0x7f, (jbyte) (jint) 0x00, (jbyte) (jint) 0x07,
#line 36
      (jbyte) (jint) 0x02, (jbyte) (jint) 0x02, (jbyte) (jint) 0x04, (jbyte) (jint) 0x02, (jbyte) (jint) 0x02 } count:11],
#line 38
      128, JreEnumConstantName(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_class_(), 0), 0);
      JreEnum(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm, PACE_ECDH_GM_AES_CBC_CMAC_192) = new_EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_initWithByteArray_withInt_withNSString_withInt_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 45
        (jbyte) (jint) 0x0A,
#line 46
        (jbyte) (jint) 0x04, (jbyte) (jint) 0x00, (jbyte) (jint) 0x7f, (jbyte) (jint) 0x00, (jbyte) (jint) 0x07,
#line 47
        (jbyte) (jint) 0x02, (jbyte) (jint) 0x02, (jbyte) (jint) 0x04, (jbyte) (jint) 0x02, (jbyte) (jint) 0x03 } count:11],
#line 49
        192, JreEnumConstantName(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_class_(), 1), 1);
        JreEnum(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm, PACE_DH_GM_AES_CBC_CMAC_128) = new_EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_initWithByteArray_withInt_withNSString_withInt_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 56
          (jbyte) (jint) 0x0A,
#line 57
          (jbyte) (jint) 0x04, (jbyte) (jint) 0x00, (jbyte) (jint) 0x7f, (jbyte) (jint) 0x00, (jbyte) (jint) 0x07,
#line 58
          (jbyte) (jint) 0x02, (jbyte) (jint) 0x02, (jbyte) (jint) 0x04, (jbyte) (jint) 0x01, (jbyte) (jint) 0x02 } count:11],
#line 60
          128, JreEnumConstantName(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_class_(), 2), 2);
          J2OBJC_SET_INITIALIZED(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm)
        }
      }

@end


#line 66
void EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_initWithByteArray_withInt_withNSString_withInt_(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *self, IOSByteArray *oid, jint keyLen, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  
#line 67
  self->oidBytes_ = [((IOSByteArray *) nil_chk(oid)) java_clone];
  self->keyLength_ = keyLen;
}


#line 66
EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *new_EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_initWithByteArray_withInt_withNSString_withInt_(IOSByteArray *oid, jint keyLen, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm, initWithByteArray_withInt_withNSString_withInt_, oid, keyLen, __name, __ordinal)
}

IOSObjectArray *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_values() {
  EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_initialize();
  return [IOSObjectArray arrayWithObjects:EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_values_ count:3 type:EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_class_()];
}

EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_valueOfWithNSString_(NSString *name) {
  EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_initialize();
  for (int i = 0; i < 3; i++) {
    EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *e = EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_fromOrdinal(NSUInteger ordinal) {
  EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/icao/CardAccess.java"

J2OBJC_INITIALIZED_DEFN(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam)

EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_values_[1];


#line 85
@implementation EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam


#line 107
- (IOSByteArray *)getBytes {
  return [((IOSByteArray *) nil_chk(paramBytes_)) java_clone];
}


#line 114
- (NSString *)getCurveName {
  return curveName_;
}

+ (IOSObjectArray *)values {
  return EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_values();
}

+ (EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *)valueOfWithNSString:(NSString *)name {
  return EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_valueOfWithNSString_(name);
}

- (EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_Enum)toNSEnum {
  return (EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getBytes);
  methods[1].selector = @selector(getCurveName);
  methods[2].selector = @selector(values);
  methods[3].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BRAINPOOL_256_R1", "LEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "paramBytes_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "curveName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam, BRAINPOOL_256_R1), "LEsGobJmulticardAsn1IcaoCardAccess;", "Ljava/lang/Enum<Les/gob/jmulticard/asn1/icao/CardAccess$PaceAlgorithmParam;>;" };
  static const J2ObjcClassInfo _EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam = { "PaceAlgorithmParam", "es.gob.jmulticard.asn1.icao", ptrTable, methods, fields, 7, 0x4019, 4, 3, 3, -1, -1, 4, -1 };
  return &_EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam;
}

+ (void)initialize {
  if (self == [EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam class]) {
    JreEnum(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam, BRAINPOOL_256_R1) = new_EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_initWithByteArray_withNSString_withNSString_withInt_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 90
      (jbyte) (jint) 0x84,
#line 91
      (jbyte) (jint) 0x01,
#line 92
      (jbyte) (jint) 0x0d } count:3],
#line 94
      @"brainpoolp256r1", JreEnumConstantName(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_class_(), 0), 0);
      J2OBJC_SET_INITIALIZED(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam)
    }
  }

@end


#line 100
void EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_initWithByteArray_withNSString_withNSString_withInt_(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *self, IOSByteArray *paramId, NSString *curve, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  
#line 101
  self->paramBytes_ = [((IOSByteArray *) nil_chk(paramId)) java_clone];
  self->curveName_ = curve;
}


#line 100
EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *new_EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_initWithByteArray_withNSString_withNSString_withInt_(IOSByteArray *paramId, NSString *curve, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam, initWithByteArray_withNSString_withNSString_withInt_, paramId, curve, __name, __ordinal)
}

IOSObjectArray *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_values() {
  EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_initialize();
  return [IOSObjectArray arrayWithObjects:EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_values_ count:1 type:EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_class_()];
}

EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_valueOfWithNSString_(NSString *name) {
  EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_initialize();
  for (int i = 0; i < 1; i++) {
    EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *e = EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_fromOrdinal(NSUInteger ordinal) {
  EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_initialize();
  if (ordinal >= 1) {
    return nil;
  }
  return EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam)
