//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/icao/Sod.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/CryptoHelper.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/JmcLogger.h"
#include "es/gob/jmulticard/asn1/DecoderObject.h"
#include "es/gob/jmulticard/asn1/Tlv.h"
#include "es/gob/jmulticard/asn1/icao/DataGroupHash.h"
#include "es/gob/jmulticard/asn1/icao/LdsSecurityObject.h"
#include "es/gob/jmulticard/asn1/icao/Sod.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/security/cert/X509Certificate.h"
#include "javax/security/auth/x500/X500Principal.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/asn1/icao/Sod must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardAsn1IcaoSod () {
 @public
  EsGobJmulticardCryptoHelper *cryptoHelper_;
  IOSByteArray *ldsSecurityObjectBytes_;
  EsGobJmulticardAsn1IcaoLdsSecurityObject *ldsSecurityObject_;
  IOSObjectArray *certificateChain_;
}

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardAsn1IcaoSod, cryptoHelper_, EsGobJmulticardCryptoHelper *)
J2OBJC_FIELD_SETTER(EsGobJmulticardAsn1IcaoSod, ldsSecurityObjectBytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(EsGobJmulticardAsn1IcaoSod, ldsSecurityObject_, EsGobJmulticardAsn1IcaoLdsSecurityObject *)
J2OBJC_FIELD_SETTER(EsGobJmulticardAsn1IcaoSod, certificateChain_, IOSObjectArray *)

inline jbyte EsGobJmulticardAsn1IcaoSod_get_TAG(void);
#define EsGobJmulticardAsn1IcaoSod_TAG 119
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardAsn1IcaoSod, TAG, jbyte)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/icao/Sod.java"


#line 19
@implementation EsGobJmulticardAsn1IcaoSod


#line 31
- (instancetype)initWithEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)ch {
  EsGobJmulticardAsn1IcaoSod_initWithEsGobJmulticardCryptoHelper_(self, ch);
  return self;
}


#line 35
- (void)decodeValue {
  
#line 37
  EsGobJmulticardAsn1Tlv *tlv = new_EsGobJmulticardAsn1Tlv_initWithByteArray_([self getBytes]);
  [self checkTagWithByte:[tlv getTag]];
}


#line 47
- (void)validateSignature {
  
#line 53
  EsGobJmulticardAsn1Tlv *tlv = new_EsGobJmulticardAsn1Tlv_initWithByteArray_([self getBytes]);
  
#line 55
  certificateChain_ = [((EsGobJmulticardCryptoHelper *) nil_chk(cryptoHelper_)) validateCmsSignatureWithByteArray:[tlv getValue]];
  
#line 57
  ldsSecurityObjectBytes_ = [cryptoHelper_ getCmsSignatureSignedContentWithByteArray:[tlv getValue]];
  ldsSecurityObject_ = new_EsGobJmulticardAsn1IcaoLdsSecurityObject_init();
  [ldsSecurityObject_ setDerValueWithByteArray:ldsSecurityObjectBytes_];
}


#line 62
- (jbyte)getDefaultTag {
  
#line 64
  return EsGobJmulticardAsn1IcaoSod_TAG;
}


#line 76
- (IOSByteArray *)getLdsSecurityObjectBytes {
  
#line 81
  if (ldsSecurityObjectBytes_ == nil) {
    [self validateSignature];
  }
  return ldsSecurityObjectBytes_;
}


#line 97
- (EsGobJmulticardAsn1IcaoLdsSecurityObject *)getLdsSecurityObject {
  if (ldsSecurityObject_ == nil) {
    [self validateSignature];
  }
  return ldsSecurityObject_;
}


#line 113
- (IOSObjectArray *)getCertificateChain {
  if (certificateChain_ == nil) {
    [self validateSignature];
  }
  return [((IOSObjectArray *) nil_chk(certificateChain_)) java_clone];
}

- (NSString *)description {
  
#line 122
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(@"SOD ICAO");
  @try {
    (void) [sb appendWithNSString:JreStrcat("$@", @"\nFirmado por: ",
#line 125
    [((JavaSecurityCertX509Certificate *) nil_chk(IOSObjectArray_Get(nil_chk([self getCertificateChain]), 0))) getSubjectX500Principal])];
  }
  @catch (
#line 128
  JavaLangException *e) {
    EsGobJmulticardJmcLogger_warningWithNSString_(JreStrcat("$@", @"No se ha podido obtener la cadena de certificados de firma del SOD: ",
#line 130
    e));
    
#line 132
    return [sb description];
  }
  (void) [sb appendWithNSString:@"\n  Con huellas para los siguientes grupos de datos\n"];
  {
    IOSObjectArray *a__ = [((EsGobJmulticardAsn1IcaoLdsSecurityObject *) nil_chk(ldsSecurityObject_)) getDataGroupHashes];
    EsGobJmulticardAsn1IcaoDataGroupHash * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EsGobJmulticardAsn1IcaoDataGroupHash * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EsGobJmulticardAsn1IcaoDataGroupHash *dgh = *b__++;
      
#line 137
      (void) [sb appendWithNSString:@"    DG"];
      (void) [sb appendWithInt:[((EsGobJmulticardAsn1IcaoDataGroupHash *) nil_chk(dgh)) getDataGroupNumber]];
      (void) [sb appendWithNSString:@" = "];
      (void) [sb appendWithNSString:EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_([dgh getDataGroupHashValue], false)];
      (void) [sb appendWithChar:0x000a];
    }
  }
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "B", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LEsGobJmulticardAsn1IcaoLdsSecurityObject;", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertX509Certificate;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithEsGobJmulticardCryptoHelper:);
  methods[1].selector = @selector(decodeValue);
  methods[2].selector = @selector(validateSignature);
  methods[3].selector = @selector(getDefaultTag);
  methods[4].selector = @selector(getLdsSecurityObjectBytes);
  methods[5].selector = @selector(getLdsSecurityObject);
  methods[6].selector = @selector(getCertificateChain);
  methods[7].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cryptoHelper_", "LEsGobJmulticardCryptoHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "TAG", "B", .constantValue.asChar = EsGobJmulticardAsn1IcaoSod_TAG, 0x1a, -1, -1, -1, -1 },
    { "ldsSecurityObjectBytes_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ldsSecurityObject_", "LEsGobJmulticardAsn1IcaoLdsSecurityObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "certificateChain_", "[LJavaSecurityCertX509Certificate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEsGobJmulticardCryptoHelper;", "LEsGobJmulticardAsn1Asn1Exception;LEsGobJmulticardAsn1TlvException;", "LEsGobJmulticardAsn1TlvException;LJavaSecuritySignatureException;LJavaSecurityCertCertificateException;LJavaIoIOException;LEsGobJmulticardAsn1Asn1Exception;", "LJavaSecuritySignatureException;LJavaSecurityCertCertificateException;LEsGobJmulticardAsn1TlvException;LJavaIoIOException;LEsGobJmulticardAsn1Asn1Exception;", "LEsGobJmulticardAsn1TlvException;LEsGobJmulticardAsn1Asn1Exception;LJavaIoIOException;LJavaSecuritySignatureException;LJavaSecurityCertCertificateException;", "LEsGobJmulticardAsn1TlvException;LEsGobJmulticardAsn1Asn1Exception;LJavaSecuritySignatureException;LJavaSecurityCertCertificateException;LJavaIoIOException;", "toString" };
  static const J2ObjcClassInfo _EsGobJmulticardAsn1IcaoSod = { "Sod", "es.gob.jmulticard.asn1.icao", ptrTable, methods, fields, 7, 0x11, 8, 5, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardAsn1IcaoSod;
}

@end


#line 31
void EsGobJmulticardAsn1IcaoSod_initWithEsGobJmulticardCryptoHelper_(EsGobJmulticardAsn1IcaoSod *self, EsGobJmulticardCryptoHelper *ch) {
  EsGobJmulticardAsn1DecoderObject_init(self);
  self->ldsSecurityObjectBytes_ =
#line 25
  nil;
  self->ldsSecurityObject_ = nil;
  self->certificateChain_ = nil;
  
#line 32
  self->cryptoHelper_ = ch;
}


#line 31
EsGobJmulticardAsn1IcaoSod *new_EsGobJmulticardAsn1IcaoSod_initWithEsGobJmulticardCryptoHelper_(EsGobJmulticardCryptoHelper *ch) {
  J2OBJC_NEW_IMPL(EsGobJmulticardAsn1IcaoSod, initWithEsGobJmulticardCryptoHelper_, ch)
}


#line 31
EsGobJmulticardAsn1IcaoSod *create_EsGobJmulticardAsn1IcaoSod_initWithEsGobJmulticardCryptoHelper_(EsGobJmulticardCryptoHelper *ch) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardAsn1IcaoSod, initWithEsGobJmulticardCryptoHelper_, ch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardAsn1IcaoSod)
