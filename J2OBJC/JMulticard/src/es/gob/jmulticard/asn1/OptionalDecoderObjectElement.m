//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/OptionalDecoderObjectElement.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/asn1/OptionalDecoderObjectElement.h"
#include "java/lang/IllegalArgumentException.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/asn1/OptionalDecoderObjectElement must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardAsn1OptionalDecoderObjectElement () {
 @public
  IOSClass *elementType_;
  jboolean optional_;
}

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardAsn1OptionalDecoderObjectElement, elementType_, IOSClass *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/OptionalDecoderObjectElement.java"


#line 5
@implementation EsGobJmulticardAsn1OptionalDecoderObjectElement


#line 14
- (instancetype)initWithIOSClass:(IOSClass *)type
                     withBoolean:(jboolean)opt {
  EsGobJmulticardAsn1OptionalDecoderObjectElement_initWithIOSClass_withBoolean_(self, type, opt);
  return self;
}


#line 26
- (IOSClass *)getElementType {
  return self->elementType_;
}


#line 33
- (jboolean)isOptional {
  return self->optional_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:withBoolean:);
  methods[1].selector = @selector(getElementType);
  methods[2].selector = @selector(isOptional);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "elementType_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "optional_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;Z", "(Ljava/lang/Class<+Les/gob/jmulticard/asn1/DecoderObject;>;Z)V", "()Ljava/lang/Class<+Les/gob/jmulticard/asn1/DecoderObject;>;", "Ljava/lang/Class<+Les/gob/jmulticard/asn1/DecoderObject;>;" };
  static const J2ObjcClassInfo _EsGobJmulticardAsn1OptionalDecoderObjectElement = { "OptionalDecoderObjectElement", "es.gob.jmulticard.asn1", ptrTable, methods, fields, 7, 0x11, 3, 2, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardAsn1OptionalDecoderObjectElement;
}

@end


#line 14
void EsGobJmulticardAsn1OptionalDecoderObjectElement_initWithIOSClass_withBoolean_(EsGobJmulticardAsn1OptionalDecoderObjectElement *self, IOSClass *type, jboolean opt) {
  NSObject_init(self);
  
#line 15
  if (type == nil && !opt) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 17
    @"El tipo de elemento ASN.1 no puede ser nulo cuando el elemento no es opcional");
  }
  
#line 20
  self->elementType_ = type;
  self->optional_ = opt;
}


#line 14
EsGobJmulticardAsn1OptionalDecoderObjectElement *new_EsGobJmulticardAsn1OptionalDecoderObjectElement_initWithIOSClass_withBoolean_(IOSClass *type, jboolean opt) {
  J2OBJC_NEW_IMPL(EsGobJmulticardAsn1OptionalDecoderObjectElement, initWithIOSClass_withBoolean_, type, opt)
}


#line 14
EsGobJmulticardAsn1OptionalDecoderObjectElement *create_EsGobJmulticardAsn1OptionalDecoderObjectElement_initWithIOSClass_withBoolean_(IOSClass *type, jboolean opt) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardAsn1OptionalDecoderObjectElement, initWithIOSClass_withBoolean_, type, opt)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardAsn1OptionalDecoderObjectElement)
