//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/der/pkcs1/DigestInfo.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/CryptoHelper.h"
#include "es/gob/jmulticard/DigestAlgorithm.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/asn1/DecoderObject.h"
#include "es/gob/jmulticard/asn1/OptionalDecoderObjectElement.h"
#include "es/gob/jmulticard/asn1/der/OctectString.h"
#include "es/gob/jmulticard/asn1/der/Sequence.h"
#include "es/gob/jmulticard/asn1/der/pkcs1/AlgorithmIdentifer.h"
#include "es/gob/jmulticard/asn1/der/pkcs1/DigestInfo.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/asn1/der/pkcs1/DigestInfo must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardAsn1DerPkcs1DigestInfo ()

/*!
 @return the sha1DigestinfoHeader
 */
+ (IOSByteArray *)getSha1DigestinfoHeader;

/*!
 @return the sha256DigestinfoHeader
 */
+ (IOSByteArray *)getSha256DigestinfoHeader;

/*!
 @return the sha384DigestinfoHeader
 */
+ (IOSByteArray *)getSha384DigestinfoHeader;

/*!
 @return the sha512DigestinfoHeader
 */
+ (IOSByteArray *)getSha512DigestinfoHeader;

/*!
 @brief Normaliza los nombres de algorimo de firma.
 @param algorithm Nombre de algoritmo.
 @return Nombre de algoritmo normalizado.
 */
+ (NSString *)getNormalizedSigningAlgorithmWithNSString:(NSString *)algorithm;

/*!
 @brief Selecciona una plantilla con la cabecera del 
 <code>DigestInfo</code> para un algoritmo concreto.
 @param algorithm Algoritmo del que obtener la plantilla de cabecera.
 @return Cabecera.
 */
+ (IOSByteArray *)selectHeaderTemplateWithEsGobJmulticardDigestAlgorithm:(EsGobJmulticardDigestAlgorithm *)algorithm;

/*!
 @brief Obtiene el algoritmo de huella digital correspondiente a
  un algoritmo de firma concreto.
 @param signatureAlgorithm Algoritmo de firma.
 @return Algoritmo de huella digital o la propia entrada si no se identific&oacute;.
 */
+ (EsGobJmulticardDigestAlgorithm *)getDigestAlgorithmWithNSString:(NSString *)signatureAlgorithm;

@end

inline NSString *EsGobJmulticardAsn1DerPkcs1DigestInfo_get_SHA1WITHRSA_NORMALIZED_ALGO_NAME(void);
static NSString *EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA1WITHRSA_NORMALIZED_ALGO_NAME = @"SHA1withRSA";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardAsn1DerPkcs1DigestInfo, SHA1WITHRSA_NORMALIZED_ALGO_NAME, NSString *)

inline NSString *EsGobJmulticardAsn1DerPkcs1DigestInfo_get_SHA256WITHRSA_NORMALIZED_ALGO_NAME(void);
static NSString *EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA256WITHRSA_NORMALIZED_ALGO_NAME = @"SHA256withRSA";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardAsn1DerPkcs1DigestInfo, SHA256WITHRSA_NORMALIZED_ALGO_NAME, NSString *)

inline NSString *EsGobJmulticardAsn1DerPkcs1DigestInfo_get_SHA384WITHRSA_NORMALIZED_ALGO_NAME(void);
static NSString *EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA384WITHRSA_NORMALIZED_ALGO_NAME = @"SHA384withRSA";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardAsn1DerPkcs1DigestInfo, SHA384WITHRSA_NORMALIZED_ALGO_NAME, NSString *)

inline NSString *EsGobJmulticardAsn1DerPkcs1DigestInfo_get_SHA512WITHRSA_NORMALIZED_ALGO_NAME(void);
static NSString *EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA512WITHRSA_NORMALIZED_ALGO_NAME = @"SHA512withRSA";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardAsn1DerPkcs1DigestInfo, SHA512WITHRSA_NORMALIZED_ALGO_NAME, NSString *)

inline IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_get_SHA1_DIGESTINFO_HEADER(void);
static IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA1_DIGESTINFO_HEADER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardAsn1DerPkcs1DigestInfo, SHA1_DIGESTINFO_HEADER, IOSByteArray *)

inline IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_get_SHA256_DIGESTINFO_HEADER(void);
static IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA256_DIGESTINFO_HEADER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardAsn1DerPkcs1DigestInfo, SHA256_DIGESTINFO_HEADER, IOSByteArray *)

inline IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_get_SHA384_DIGESTINFO_HEADER(void);
static IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA384_DIGESTINFO_HEADER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardAsn1DerPkcs1DigestInfo, SHA384_DIGESTINFO_HEADER, IOSByteArray *)

inline IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_get_SHA512_DIGESTINFO_HEADER(void);
static IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA512_DIGESTINFO_HEADER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardAsn1DerPkcs1DigestInfo, SHA512_DIGESTINFO_HEADER, IOSByteArray *)

__attribute__((unused)) static IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_getSha1DigestinfoHeader(void);

__attribute__((unused)) static IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_getSha256DigestinfoHeader(void);

__attribute__((unused)) static IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_getSha384DigestinfoHeader(void);

__attribute__((unused)) static IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_getSha512DigestinfoHeader(void);

__attribute__((unused)) static NSString *EsGobJmulticardAsn1DerPkcs1DigestInfo_getNormalizedSigningAlgorithmWithNSString_(NSString *algorithm);

__attribute__((unused)) static IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_selectHeaderTemplateWithEsGobJmulticardDigestAlgorithm_(EsGobJmulticardDigestAlgorithm *algorithm);

__attribute__((unused)) static EsGobJmulticardDigestAlgorithm *EsGobJmulticardAsn1DerPkcs1DigestInfo_getDigestAlgorithmWithNSString_(NSString *signatureAlgorithm);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/der/pkcs1/DigestInfo.java"

J2OBJC_INITIALIZED_DEFN(EsGobJmulticardAsn1DerPkcs1DigestInfo)


#line 59
@implementation EsGobJmulticardAsn1DerPkcs1DigestInfo


#line 90
+ (IOSByteArray *)getSha1DigestinfoHeader {
  return EsGobJmulticardAsn1DerPkcs1DigestInfo_getSha1DigestinfoHeader();
}


#line 97
+ (IOSByteArray *)getSha256DigestinfoHeader {
  return EsGobJmulticardAsn1DerPkcs1DigestInfo_getSha256DigestinfoHeader();
}


#line 104
+ (IOSByteArray *)getSha384DigestinfoHeader {
  return EsGobJmulticardAsn1DerPkcs1DigestInfo_getSha384DigestinfoHeader();
}


#line 111
+ (IOSByteArray *)getSha512DigestinfoHeader {
  return EsGobJmulticardAsn1DerPkcs1DigestInfo_getSha512DigestinfoHeader();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 118
- (instancetype)init {
  EsGobJmulticardAsn1DerPkcs1DigestInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 131
- (NSString *)description {
  
#line 133
  return JreStrcat("$$$$", @"DigestInfo:\n  Datos=", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 134
  [((EsGobJmulticardAsn1DerOctectString *) nil_chk(((EsGobJmulticardAsn1DerOctectString *) cast_chk([self getElementAtWithInt:1], [EsGobJmulticardAsn1DerOctectString class])))) getOctectStringByteValue], false), @"\n  Algoritmo=",
#line 135
  [((EsGobJmulticardAsn1DerPkcs1AlgorithmIdentifer *) nil_chk(((EsGobJmulticardAsn1DerPkcs1AlgorithmIdentifer *) cast_chk([self getElementAtWithInt:0], [EsGobJmulticardAsn1DerPkcs1AlgorithmIdentifer class])))) description]);
}


#line 144
+ (IOSByteArray *)encodeWithNSString:(NSString *)signingAlgorithm
                       withByteArray:(IOSByteArray *)data
     withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHelper {
  return EsGobJmulticardAsn1DerPkcs1DigestInfo_encodeWithNSString_withByteArray_withEsGobJmulticardCryptoHelper_(signingAlgorithm, data, cryptoHelper);
}


#line 163
+ (NSString *)getNormalizedSigningAlgorithmWithNSString:(NSString *)algorithm {
  return EsGobJmulticardAsn1DerPkcs1DigestInfo_getNormalizedSigningAlgorithmWithNSString_(algorithm);
}


#line 213
+ (IOSByteArray *)selectHeaderTemplateWithEsGobJmulticardDigestAlgorithm:(EsGobJmulticardDigestAlgorithm *)algorithm {
  return EsGobJmulticardAsn1DerPkcs1DigestInfo_selectHeaderTemplateWithEsGobJmulticardDigestAlgorithm_(algorithm);
}


#line 234
+ (EsGobJmulticardDigestAlgorithm *)getDigestAlgorithmWithNSString:(NSString *)signatureAlgorithm {
  return EsGobJmulticardAsn1DerPkcs1DigestInfo_getDigestAlgorithmWithNSString_(signatureAlgorithm);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[B", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardDigestAlgorithm;", 0xa, 8, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getSha1DigestinfoHeader);
  methods[1].selector = @selector(getSha256DigestinfoHeader);
  methods[2].selector = @selector(getSha384DigestinfoHeader);
  methods[3].selector = @selector(getSha512DigestinfoHeader);
  methods[4].selector = @selector(init);
  methods[5].selector = @selector(description);
  methods[6].selector = @selector(encodeWithNSString:withByteArray:withEsGobJmulticardCryptoHelper:);
  methods[7].selector = @selector(getNormalizedSigningAlgorithmWithNSString:);
  methods[8].selector = @selector(selectHeaderTemplateWithEsGobJmulticardDigestAlgorithm:);
  methods[9].selector = @selector(getDigestAlgorithmWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SHA1WITHRSA_NORMALIZED_ALGO_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "SHA256WITHRSA_NORMALIZED_ALGO_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "SHA384WITHRSA_NORMALIZED_ALGO_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "SHA512WITHRSA_NORMALIZED_ALGO_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "SHA1_DIGESTINFO_HEADER", "[B", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "SHA256_DIGESTINFO_HEADER", "[B", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "SHA384_DIGESTINFO_HEADER", "[B", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "SHA512_DIGESTINFO_HEADER", "[B", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "encode", "LNSString;[BLEsGobJmulticardCryptoHelper;", "LJavaIoIOException;", "getNormalizedSigningAlgorithm", "LNSString;", "selectHeaderTemplate", "LEsGobJmulticardDigestAlgorithm;", "getDigestAlgorithm", &EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA1WITHRSA_NORMALIZED_ALGO_NAME, &EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA256WITHRSA_NORMALIZED_ALGO_NAME, &EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA384WITHRSA_NORMALIZED_ALGO_NAME, &EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA512WITHRSA_NORMALIZED_ALGO_NAME, &EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA1_DIGESTINFO_HEADER, &EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA256_DIGESTINFO_HEADER, &EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA384_DIGESTINFO_HEADER, &EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA512_DIGESTINFO_HEADER };
  static const J2ObjcClassInfo _EsGobJmulticardAsn1DerPkcs1DigestInfo = { "DigestInfo", "es.gob.jmulticard.asn1.der.pkcs1", ptrTable, methods, fields, 7, 0x11, 10, 8, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardAsn1DerPkcs1DigestInfo;
}

+ (void)initialize {
  if (self == [EsGobJmulticardAsn1DerPkcs1DigestInfo class]) {
    EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA1_DIGESTINFO_HEADER = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 67
      (jbyte) (jint) 0x30, (jbyte) (jint) 0x21, (jbyte) (jint) 0x30, (jbyte) (jint) 0x09, (jbyte) (jint) 0x06, (jbyte) (jint) 0x05, (jbyte) (jint) 0x2B, (jbyte) (jint) 0x0E,
#line 68
      (jbyte) (jint) 0x03, (jbyte) (jint) 0x02, (jbyte) (jint) 0x1A, (jbyte) (jint) 0x05, (jbyte) (jint) 0x00, (jbyte) (jint) 0x04, (jbyte) (jint) 0x14 } count:15];
      EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA256_DIGESTINFO_HEADER = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 72
        (jbyte) (jint) 0x30, (jbyte) (jint) 0x31, (jbyte) (jint) 0x30, (jbyte) (jint) 0x0D, (jbyte) (jint) 0x06, (jbyte) (jint) 0x09, (jbyte) (jint) 0x60, (jbyte) (jint) 0x86,
#line 73
        (jbyte) (jint) 0x48, (jbyte) (jint) 0x01, (jbyte) (jint) 0x65, (jbyte) (jint) 0x03, (jbyte) (jint) 0x04, (jbyte) (jint) 0x02, (jbyte) (jint) 0x01, (jbyte) (jint) 0x05,
#line 74
        (jbyte) (jint) 0x00, (jbyte) (jint) 0x04, (jbyte) (jint) 0x20 } count:19];
        EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA384_DIGESTINFO_HEADER = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 78
          (jbyte) (jint) 0x30, (jbyte) (jint) 0x41, (jbyte) (jint) 0x30, (jbyte) (jint) 0x0D, (jbyte) (jint) 0x06, (jbyte) (jint) 0x09, (jbyte) (jint) 0x60, (jbyte) (jint) 0x86,
#line 79
          (jbyte) (jint) 0x48, (jbyte) (jint) 0x01, (jbyte) (jint) 0x65, (jbyte) (jint) 0x03, (jbyte) (jint) 0x04, (jbyte) (jint) 0x02, (jbyte) (jint) 0x02, (jbyte) (jint) 0x05,
#line 80
          (jbyte) (jint) 0x00, (jbyte) (jint) 0x04, (jbyte) (jint) 0x30 } count:19];
          EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA512_DIGESTINFO_HEADER = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 84
            (jbyte) (jint) 0x30, (jbyte) (jint) 0x51, (jbyte) (jint) 0x30, (jbyte) (jint) 0x0D, (jbyte) (jint) 0x06, (jbyte) (jint) 0x09, (jbyte) (jint) 0x60, (jbyte) (jint) 0x86,
#line 85
            (jbyte) (jint) 0x48, (jbyte) (jint) 0x01, (jbyte) (jint) 0x65, (jbyte) (jint) 0x03, (jbyte) (jint) 0x04, (jbyte) (jint) 0x02, (jbyte) (jint) 0x03, (jbyte) (jint) 0x05,
#line 86
            (jbyte) (jint) 0x00, (jbyte) (jint) 0x04, (jbyte) (jint) 0x40 } count:19];
            J2OBJC_SET_INITIALIZED(EsGobJmulticardAsn1DerPkcs1DigestInfo)
          }
        }

@end


#line 90
IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_getSha1DigestinfoHeader() {
  EsGobJmulticardAsn1DerPkcs1DigestInfo_initialize();
  
#line 91
  IOSByteArray *out = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA1_DIGESTINFO_HEADER))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA1_DIGESTINFO_HEADER, 0, out, 0, EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA1_DIGESTINFO_HEADER->size_);
  return out;
}


#line 97
IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_getSha256DigestinfoHeader() {
  EsGobJmulticardAsn1DerPkcs1DigestInfo_initialize();
  
#line 98
  IOSByteArray *out = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA256_DIGESTINFO_HEADER))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA256_DIGESTINFO_HEADER, 0, out, 0, EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA256_DIGESTINFO_HEADER->size_);
  return out;
}


#line 104
IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_getSha384DigestinfoHeader() {
  EsGobJmulticardAsn1DerPkcs1DigestInfo_initialize();
  
#line 105
  IOSByteArray *out = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA384_DIGESTINFO_HEADER))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA384_DIGESTINFO_HEADER, 0, out, 0, EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA384_DIGESTINFO_HEADER->size_);
  return out;
}


#line 111
IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_getSha512DigestinfoHeader() {
  EsGobJmulticardAsn1DerPkcs1DigestInfo_initialize();
  
#line 112
  IOSByteArray *out = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA512_DIGESTINFO_HEADER))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA512_DIGESTINFO_HEADER, 0, out, 0, EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA512_DIGESTINFO_HEADER->size_);
  return out;
}


#line 118
void EsGobJmulticardAsn1DerPkcs1DigestInfo_init(EsGobJmulticardAsn1DerPkcs1DigestInfo *self) {
  EsGobJmulticardAsn1DerSequence_initWithEsGobJmulticardAsn1OptionalDecoderObjectElementArray_(self, [IOSObjectArray newArrayWithObjects:(id[]){ create_EsGobJmulticardAsn1OptionalDecoderObjectElement_initWithIOSClass_withBoolean_(
#line 121
  EsGobJmulticardAsn1DerPkcs1AlgorithmIdentifer_class_(),
#line 122
  false), create_EsGobJmulticardAsn1OptionalDecoderObjectElement_initWithIOSClass_withBoolean_(
#line 125
  EsGobJmulticardAsn1DerOctectString_class_(),
#line 126
  false) } count:2 type:EsGobJmulticardAsn1OptionalDecoderObjectElement_class_()]);
}


#line 118
EsGobJmulticardAsn1DerPkcs1DigestInfo *new_EsGobJmulticardAsn1DerPkcs1DigestInfo_init() {
  J2OBJC_NEW_IMPL(EsGobJmulticardAsn1DerPkcs1DigestInfo, init)
}


#line 118
EsGobJmulticardAsn1DerPkcs1DigestInfo *create_EsGobJmulticardAsn1DerPkcs1DigestInfo_init() {
  J2OBJC_CREATE_IMPL(EsGobJmulticardAsn1DerPkcs1DigestInfo, init)
}


#line 144
IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_encodeWithNSString_withByteArray_withEsGobJmulticardCryptoHelper_(NSString *signingAlgorithm, IOSByteArray *data, EsGobJmulticardCryptoHelper *cryptoHelper) {
  EsGobJmulticardAsn1DerPkcs1DigestInfo_initialize();
  
#line 148
  NSString *normalizedSignningAlgorithm = EsGobJmulticardAsn1DerPkcs1DigestInfo_getNormalizedSigningAlgorithmWithNSString_(signingAlgorithm);
  EsGobJmulticardDigestAlgorithm *digestAlgorithm = EsGobJmulticardAsn1DerPkcs1DigestInfo_getDigestAlgorithmWithNSString_(normalizedSignningAlgorithm);
  IOSByteArray *header = EsGobJmulticardAsn1DerPkcs1DigestInfo_selectHeaderTemplateWithEsGobJmulticardDigestAlgorithm_(digestAlgorithm);
  IOSByteArray *md = [((EsGobJmulticardCryptoHelper *) nil_chk(cryptoHelper)) digestWithEsGobJmulticardDigestAlgorithm:digestAlgorithm withByteArray:data];
  
#line 153
  IOSByteArray *digestInfo = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(header))->size_ + ((IOSByteArray *) nil_chk(md))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(header, 0, digestInfo, 0, header->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(md, 0, digestInfo, header->size_, md->size_);
  
#line 157
  return digestInfo;
}


#line 163
NSString *EsGobJmulticardAsn1DerPkcs1DigestInfo_getNormalizedSigningAlgorithmWithNSString_(NSString *algorithm) {
  EsGobJmulticardAsn1DerPkcs1DigestInfo_initialize();
  
#line 164
  if (
#line 165
  [@"SHA1" java_equalsIgnoreCase:algorithm] ||
#line 166
  [@"SHA-1" java_equalsIgnoreCase:algorithm] ||
#line 167
  [@"SHA" java_equalsIgnoreCase:algorithm] ||
#line 168
  [@"SHAwithRSA" java_equalsIgnoreCase:algorithm] ||
#line 169
  [@"SHA-1withRSA" java_equalsIgnoreCase:algorithm] ||
#line 170
  [@"SHA1withRSAEncryption" java_equalsIgnoreCase:algorithm] ||
#line 171
  [@"SHA-1withRSAEncryption" java_equalsIgnoreCase:algorithm] ||
#line 172
  [((NSString *) nil_chk(EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA1WITHRSA_NORMALIZED_ALGO_NAME)) java_equalsIgnoreCase:algorithm]) {
    
#line 174
    return EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA1WITHRSA_NORMALIZED_ALGO_NAME;
  }
  if (
#line 177
  [@"SHA256" java_equalsIgnoreCase:algorithm] ||
#line 178
  [@"SHA-256" java_equalsIgnoreCase:algorithm] ||
#line 179
  [@"SHA-256withRSA" java_equalsIgnoreCase:algorithm] ||
#line 180
  [@"SHA-256withRSAEncryption" java_equalsIgnoreCase:algorithm] ||
#line 181
  [@"SHA256withRSAEncryption" java_equalsIgnoreCase:algorithm] ||
#line 182
  [((NSString *) nil_chk(EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA256WITHRSA_NORMALIZED_ALGO_NAME)) java_equalsIgnoreCase:algorithm]) {
    
#line 184
    return EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA256WITHRSA_NORMALIZED_ALGO_NAME;
  }
  if (
#line 187
  [@"SHA384" java_equalsIgnoreCase:algorithm] ||
#line 188
  [@"SHA-384" java_equalsIgnoreCase:algorithm] ||
#line 189
  [@"SHA-384withRSA" java_equalsIgnoreCase:algorithm] ||
#line 190
  [@"SHA-384withRSAEncryption" java_equalsIgnoreCase:algorithm] ||
#line 191
  [@"SHA384withRSAEncryption" java_equalsIgnoreCase:algorithm] ||
#line 192
  [((NSString *) nil_chk(EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA384WITHRSA_NORMALIZED_ALGO_NAME)) java_equalsIgnoreCase:algorithm]) {
    
#line 194
    return EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA384WITHRSA_NORMALIZED_ALGO_NAME;
  }
  if (
#line 197
  [@"SHA512" java_equalsIgnoreCase:algorithm] ||
#line 198
  [@"SHA-512" java_equalsIgnoreCase:algorithm] ||
#line 199
  [@"SHA-512withRSA" java_equalsIgnoreCase:algorithm] ||
#line 200
  [@"SHA-512withRSAEncryption" java_equalsIgnoreCase:algorithm] ||
#line 201
  [@"SHA512withRSAEncryption" java_equalsIgnoreCase:algorithm] ||
#line 202
  [((NSString *) nil_chk(EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA512WITHRSA_NORMALIZED_ALGO_NAME)) java_equalsIgnoreCase:algorithm]) {
    
#line 204
    return EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA512WITHRSA_NORMALIZED_ALGO_NAME;
  }
  return algorithm;
}


#line 213
IOSByteArray *EsGobJmulticardAsn1DerPkcs1DigestInfo_selectHeaderTemplateWithEsGobJmulticardDigestAlgorithm_(EsGobJmulticardDigestAlgorithm *algorithm) {
  EsGobJmulticardAsn1DerPkcs1DigestInfo_initialize();
  
#line 214
  switch ([algorithm ordinal]) {
    case EsGobJmulticardDigestAlgorithm_Enum_SHA1:
    return EsGobJmulticardAsn1DerPkcs1DigestInfo_getSha1DigestinfoHeader();
    case EsGobJmulticardDigestAlgorithm_Enum_SHA256:
    return EsGobJmulticardAsn1DerPkcs1DigestInfo_getSha256DigestinfoHeader();
    case EsGobJmulticardDigestAlgorithm_Enum_SHA384:
    return EsGobJmulticardAsn1DerPkcs1DigestInfo_getSha384DigestinfoHeader();
    case EsGobJmulticardDigestAlgorithm_Enum_SHA512:
    return EsGobJmulticardAsn1DerPkcs1DigestInfo_getSha512DigestinfoHeader();
    default:
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Algoritmo de huella digital no soportado: ",
#line 225
    algorithm));
  }
}


#line 234
EsGobJmulticardDigestAlgorithm *EsGobJmulticardAsn1DerPkcs1DigestInfo_getDigestAlgorithmWithNSString_(NSString *signatureAlgorithm) {
  EsGobJmulticardAsn1DerPkcs1DigestInfo_initialize();
  
#line 235
  if ([((NSString *) nil_chk(EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA1WITHRSA_NORMALIZED_ALGO_NAME)) isEqual:signatureAlgorithm]) {
    return JreLoadEnum(EsGobJmulticardDigestAlgorithm, SHA1);
  }
  if ([((NSString *) nil_chk(EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA256WITHRSA_NORMALIZED_ALGO_NAME)) isEqual:signatureAlgorithm]) {
    return JreLoadEnum(EsGobJmulticardDigestAlgorithm, SHA256);
  }
  if ([((NSString *) nil_chk(EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA384WITHRSA_NORMALIZED_ALGO_NAME)) isEqual:signatureAlgorithm]) {
    return JreLoadEnum(EsGobJmulticardDigestAlgorithm, SHA384);
  }
  if ([((NSString *) nil_chk(EsGobJmulticardAsn1DerPkcs1DigestInfo_SHA512WITHRSA_NORMALIZED_ALGO_NAME)) isEqual:signatureAlgorithm]) {
    return JreLoadEnum(EsGobJmulticardDigestAlgorithm, SHA512);
  }
  @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Algoritmo de huella digital no soportado para: ",
#line 248
  signatureAlgorithm));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardAsn1DerPkcs1DigestInfo)
