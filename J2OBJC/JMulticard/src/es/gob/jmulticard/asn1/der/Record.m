//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/der/Record.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/asn1/Asn1Exception.h"
#include "es/gob/jmulticard/asn1/DecoderObject.h"
#include "es/gob/jmulticard/asn1/OptionalDecoderObjectElement.h"
#include "es/gob/jmulticard/asn1/Tlv.h"
#include "es/gob/jmulticard/asn1/der/Record.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/asn1/der/Record must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardAsn1DerRecord () {
 @public
  IOSObjectArray *elementsTypes_;
  id<JavaUtilList> elements_;
}

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardAsn1DerRecord, elementsTypes_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(EsGobJmulticardAsn1DerRecord, elements_, id<JavaUtilList>)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/der/Record.java"


#line 55
@implementation EsGobJmulticardAsn1DerRecord


#line 64
- (instancetype)initWithEsGobJmulticardAsn1OptionalDecoderObjectElementArray:(IOSObjectArray *)types {
  EsGobJmulticardAsn1DerRecord_initWithEsGobJmulticardAsn1OptionalDecoderObjectElementArray_(self, types);
  return self;
}


#line 76
- (jint)getElementCount {
  return [((id<JavaUtilList>) nil_chk(elements_)) size];
}


#line 83
- (EsGobJmulticardAsn1DecoderObject *)getElementAtWithInt:(jint)pos {
  if (pos < 0 || pos >= [((id<JavaUtilList>) nil_chk(elements_)) size]) {
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$$", @"No existe un elemento en este registro en el indice ", JavaLangInteger_toStringWithInt_(pos)));
  }
  return [((id<JavaUtilList>) nil_chk(elements_)) getWithInt:pos];
}

- (void)decodeValue {
  
#line 92
  if (((IOSByteArray *) nil_chk([self getBytes]))->size_ == 0) {
    @throw new_EsGobJmulticardAsn1Asn1Exception_initWithNSString_(@"El valor del objeto ASN.1 esta vacio");
  }
  jint offset = 0;
  EsGobJmulticardAsn1Tlv *tlv;
  IOSByteArray *remainingBytes;
  EsGobJmulticardAsn1DecoderObject *tmpDo;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(elementsTypes_))->size_; i++) {
    @try {
      remainingBytes = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk([self getBytes]))->size_ - offset];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([self getBytes], offset, remainingBytes, 0, remainingBytes->size_);
      tlv = new_EsGobJmulticardAsn1Tlv_initWithByteArray_(remainingBytes);
      @try {
        tmpDo = [((JavaLangReflectConstructor *) nil_chk([((IOSClass *) nil_chk([((EsGobJmulticardAsn1OptionalDecoderObjectElement *) nil_chk(IOSObjectArray_Get(elementsTypes_, i))) getElementType])) getConstructor:[IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()]])) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
      }
      @catch (JavaLangException *e) {
        @throw new_EsGobJmulticardAsn1Asn1Exception_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$$$", @"No se ha podido instanciar un ",
#line 109
        [((IOSClass *) nil_chk([((EsGobJmulticardAsn1OptionalDecoderObjectElement *) nil_chk(IOSObjectArray_Get(elementsTypes_, i))) getElementType])) getName], @" en la posicion ", JavaLangInteger_toStringWithInt_(
#line 110
        i), @" del registro"), e);
      }
      
#line 113
      [((EsGobJmulticardAsn1DecoderObject *) nil_chk(tmpDo)) checkTagWithByte:[tlv getTag]];
    }
    @catch (JavaLangException *e) {
      if ([((EsGobJmulticardAsn1OptionalDecoderObjectElement *) nil_chk(IOSObjectArray_Get(elementsTypes_, i))) isOptional]) {
        
#line 118
        continue;
      }
      @throw new_EsGobJmulticardAsn1Asn1Exception_initWithNSString_withJavaLangThrowable_(JreStrcat("$I$", @"Error en el elemento ", i, @" del registro ASN.1"), e);
    }
    offset = offset + ((IOSByteArray *) nil_chk([((EsGobJmulticardAsn1Tlv *) nil_chk(tlv)) getBytes]))->size_;
    [((EsGobJmulticardAsn1DecoderObject *) nil_chk(tmpDo)) setDerValueWithByteArray:[tlv getBytes]];
    [((id<JavaUtilList>) nil_chk(elements_)) addWithId:tmpDo];
  }
}


#line 128
- (jbyte)getDefaultTag {
  
#line 130
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No hay tipo por defecto");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x84, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardAsn1DecoderObject;", 0x14, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, 3, -1, -1, -1 },
    { NULL, "B", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithEsGobJmulticardAsn1OptionalDecoderObjectElementArray:);
  methods[1].selector = @selector(getElementCount);
  methods[2].selector = @selector(getElementAtWithInt:);
  methods[3].selector = @selector(decodeValue);
  methods[4].selector = @selector(getDefaultTag);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "elementsTypes_", "[LEsGobJmulticardAsn1OptionalDecoderObjectElement;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "elements_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "[LEsGobJmulticardAsn1OptionalDecoderObjectElement;", "getElementAt", "I", "LEsGobJmulticardAsn1Asn1Exception;LEsGobJmulticardAsn1TlvException;", "Ljava/util/List<Les/gob/jmulticard/asn1/DecoderObject;>;" };
  static const J2ObjcClassInfo _EsGobJmulticardAsn1DerRecord = { "Record", "es.gob.jmulticard.asn1.der", ptrTable, methods, fields, 7, 0x401, 5, 2, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardAsn1DerRecord;
}

@end


#line 64
void EsGobJmulticardAsn1DerRecord_initWithEsGobJmulticardAsn1OptionalDecoderObjectElementArray_(EsGobJmulticardAsn1DerRecord *self, IOSObjectArray *types) {
  EsGobJmulticardAsn1DecoderObject_init(self);
  self->elements_ = new_JavaUtilArrayList_init();
  
#line 65
  if (types == nil || types->size_ == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 67
    @"Los tipos de los elementos del registro no pueden ser nulos ni vacios");
  }
  
#line 70
  self->elementsTypes_ = [IOSObjectArray newArrayWithLength:types->size_ type:EsGobJmulticardAsn1OptionalDecoderObjectElement_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(types, 0, self->elementsTypes_, 0, types->size_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardAsn1DerRecord)
