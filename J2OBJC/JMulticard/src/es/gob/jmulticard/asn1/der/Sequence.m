//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/der/Sequence.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/asn1/Asn1Exception.h"
#include "es/gob/jmulticard/asn1/DecoderObject.h"
#include "es/gob/jmulticard/asn1/OptionalDecoderObjectElement.h"
#include "es/gob/jmulticard/asn1/Tlv.h"
#include "es/gob/jmulticard/asn1/der/Sequence.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Constructor.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/asn1/der/Sequence must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardAsn1DerSequence () {
 @public
  id<JavaUtilList> elements_;
  IOSObjectArray *elementsTypes_;
}

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardAsn1DerSequence, elements_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EsGobJmulticardAsn1DerSequence, elementsTypes_, IOSObjectArray *)

/*!
 @brief Tipo ASN&#46;1 <i>Sequence</i>.
 */
inline jbyte EsGobJmulticardAsn1DerSequence_get_TAG_SEQUENCE(void);
#define EsGobJmulticardAsn1DerSequence_TAG_SEQUENCE 48
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardAsn1DerSequence, TAG_SEQUENCE, jbyte)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/der/Sequence.java"


#line 53
@implementation EsGobJmulticardAsn1DerSequence


#line 64
- (jint)getElementCount {
  return [((id<JavaUtilList>) nil_chk(elements_)) size];
}


#line 71
- (instancetype)initWithEsGobJmulticardAsn1OptionalDecoderObjectElementArray:(IOSObjectArray *)types {
  EsGobJmulticardAsn1DerSequence_initWithEsGobJmulticardAsn1OptionalDecoderObjectElementArray_(self, types);
  return self;
}


#line 79
- (void)decodeValue {
  
#line 81
  EsGobJmulticardAsn1Tlv *mainTlv = new_EsGobJmulticardAsn1Tlv_initWithByteArray_([self getBytes]);
  [self checkTagWithByte:[mainTlv getTag]];
  jint offset = 0;
  EsGobJmulticardAsn1Tlv *tlv;
  IOSByteArray *remainingBytes;
  EsGobJmulticardAsn1DecoderObject *tmpDo;
  IOSByteArray *rawValue = [mainTlv getValue];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(elementsTypes_))->size_; i++) {
    remainingBytes = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(rawValue))->size_ - offset];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(rawValue, offset, remainingBytes, 0, remainingBytes->size_);
    @try {
      tlv = new_EsGobJmulticardAsn1Tlv_initWithByteArray_(remainingBytes);
      tmpDo = [((JavaLangReflectConstructor *) nil_chk([((IOSClass *) nil_chk([((EsGobJmulticardAsn1OptionalDecoderObjectElement *) nil_chk(IOSObjectArray_Get(elementsTypes_, i))) getElementType])) getConstructor:[IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()]])) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
      [((EsGobJmulticardAsn1DecoderObject *) nil_chk(tmpDo)) checkTagWithByte:[tlv getTag]];
      [tmpDo setDerValueWithByteArray:
#line 96
      [tlv getBytes]];
    }
    @catch (
#line 99
    JavaLangException *e) {
      if ([((EsGobJmulticardAsn1OptionalDecoderObjectElement *) nil_chk(IOSObjectArray_Get(elementsTypes_, i))) isOptional]) {
        
#line 102
        continue;
      }
      @throw new_EsGobJmulticardAsn1Asn1Exception_initWithNSString_withJavaLangThrowable_(JreStrcat("$I$$$", @"Error en el elemento ",
#line 105
      i, @" (", [((IOSClass *) nil_chk([((EsGobJmulticardAsn1OptionalDecoderObjectElement *) nil_chk(IOSObjectArray_Get(elementsTypes_, i))) getElementType])) getName], @") de la secuencia ASN.1"), e);
    }
    
#line 109
    offset = offset + ((IOSByteArray *) nil_chk([((EsGobJmulticardAsn1Tlv *) nil_chk(tlv)) getBytes]))->size_;
    [((id<JavaUtilList>) nil_chk(elements_)) addWithId:tmpDo];
  }
}


#line 114
- (jbyte)getDefaultTag {
  
#line 116
  return EsGobJmulticardAsn1DerSequence_TAG_SEQUENCE;
}


#line 123
- (EsGobJmulticardAsn1DecoderObject *)getElementAtWithInt:(jint)index {
  return [((id<JavaUtilList>) nil_chk(elements_)) getWithInt:index];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x84, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardAsn1DecoderObject;", 0x11, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getElementCount);
  methods[1].selector = @selector(initWithEsGobJmulticardAsn1OptionalDecoderObjectElementArray:);
  methods[2].selector = @selector(decodeValue);
  methods[3].selector = @selector(getDefaultTag);
  methods[4].selector = @selector(getElementAtWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG_SEQUENCE", "B", .constantValue.asChar = EsGobJmulticardAsn1DerSequence_TAG_SEQUENCE, 0x1a, -1, -1, -1, -1 },
    { "elements_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
    { "elementsTypes_", "[LEsGobJmulticardAsn1OptionalDecoderObjectElement;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LEsGobJmulticardAsn1OptionalDecoderObjectElement;", "LEsGobJmulticardAsn1Asn1Exception;LEsGobJmulticardAsn1TlvException;", "getElementAt", "I", "Ljava/util/List<Les/gob/jmulticard/asn1/DecoderObject;>;" };
  static const J2ObjcClassInfo _EsGobJmulticardAsn1DerSequence = { "Sequence", "es.gob.jmulticard.asn1.der", ptrTable, methods, fields, 7, 0x401, 5, 3, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardAsn1DerSequence;
}

@end


#line 71
void EsGobJmulticardAsn1DerSequence_initWithEsGobJmulticardAsn1OptionalDecoderObjectElementArray_(EsGobJmulticardAsn1DerSequence *self, IOSObjectArray *types) {
  EsGobJmulticardAsn1DecoderObject_init(self);
  self->elements_ = new_JavaUtilArrayList_init();
  
#line 72
  if (types == nil) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  self->elementsTypes_ = [IOSObjectArray newArrayWithLength:types->size_ type:EsGobJmulticardAsn1OptionalDecoderObjectElement_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(types, 0, self->elementsTypes_, 0, types->size_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardAsn1DerSequence)
