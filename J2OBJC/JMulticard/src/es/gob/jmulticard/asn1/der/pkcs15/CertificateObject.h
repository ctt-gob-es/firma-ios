//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/der/pkcs15/CertificateObject.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobJmulticardAsn1DerPkcs15CertificateObject")
#ifdef RESTRICT_EsGobJmulticardAsn1DerPkcs15CertificateObject
#define INCLUDE_ALL_EsGobJmulticardAsn1DerPkcs15CertificateObject 0
#else
#define INCLUDE_ALL_EsGobJmulticardAsn1DerPkcs15CertificateObject 1
#endif
#undef RESTRICT_EsGobJmulticardAsn1DerPkcs15CertificateObject

#if !defined (EsGobJmulticardAsn1DerPkcs15CertificateObject_) && (INCLUDE_ALL_EsGobJmulticardAsn1DerPkcs15CertificateObject || defined(INCLUDE_EsGobJmulticardAsn1DerPkcs15CertificateObject))
#define EsGobJmulticardAsn1DerPkcs15CertificateObject_

#define RESTRICT_EsGobJmulticardAsn1DerPkcs15Pkcs15Object 1
#define INCLUDE_EsGobJmulticardAsn1DerPkcs15Pkcs15Object 1
#include "es/gob/jmulticard/asn1/der/pkcs15/Pkcs15Object.h"

@class IOSByteArray;
@class IOSClass;
@class JavaMathBigInteger;

/*!
 @brief Tipo PKCS#15 ASN&#46;1 <i>CertificateObject</i> (<i>CertificateInfoObject</i> en ISO 7816-15).
 @code

     CertificateObject {CertAttributes} ::= PKCS15Object {
       CommonCertificateAttributes,
       NULL,
       CertAttributes
     }  
  
@endcode
   Que en el caso de un certificado X&#46;509 se instancia como
   <code>x509Certificate CertificateObject { X509CertificateAttributes }</code>,
   quedando la estructura (secuencia deshaciendo el <code>PKCS15Object</code>):
   @code

     CertificateObject {X509CertificateAttributes} ::= SEQUENCE {
       CommonObjectAttributes,
       CommonCertificateAttributes,
       NULL,
       X509CertificateAttributes
     }
     CommonObjectAttributes ::= SEQUENCE {
       label Label,
       flags CommonObjectFlags OPTIONAL,
       authId Identifier OPTIONAL,
     }
     Label ::= UTF8String (SIZE(0..pkcs15-ub-label))
     CommonCertificateAttributes ::= SEQUENCE {
       iD Identifier
     }
     Identifier ::= OCTET STRING (SIZE (0..pkcs15-ub-identifier))
     X509CertificateAttributes ::= SEQUENCE {
       value ObjectValue { Certificate },
       subject Name,
       issuer [0] Name,
       serialNumber INTEGER
     }
     Name ::= CHOICE {
       rdnSequence RDNSequence
     }  
  
@endcode
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s.
 */
@interface EsGobJmulticardAsn1DerPkcs15CertificateObject : EsGobJmulticardAsn1DerPkcs15Pkcs15Object

#pragma mark Public

/*!
 @brief Crea un objeto <i>CertificateObject</i>.
 */
- (instancetype)init;

/*!
 @brief Obtiene el alias del certificado.
 @return Alias del certificado
 */
- (NSString *)getAlias;

/*!
 @brief Obtiene el identificador binario del certificado.
 @return Identificador del certificado
 */
- (IOSByteArray *)getIdentifier;

/*!
 @brief Devuelve la ruta del certificado.
 @return Ruta (<i>path</i>) del certificado
 */
- (NSString *)getPath;

/*!
 @brief Devuelve la ruta del certificado como array de octetos.
 @return Ruta (<i>path</i>) del certificado como array de octetos.
 */
- (IOSByteArray *)getPathBytes;

- (NSString *)description;

#pragma mark Protected

/*!
 @brief Construye un tipo CertificateObject ASN&#46;1.
 @param classAttributes Tipo de los Atributos espec &iacute; ficos de la clase general del objeto
 @param subclassAttributes Tipo de los Atributos espec &iacute; ficos de la subclase general del objeto
 @param typeAttributes Tipo de los Atributos espec &iacute; ficos del tipo concreto del objeto
 */
- (instancetype)initWithIOSClass:(IOSClass *)classAttributes
                    withIOSClass:(IOSClass *)subclassAttributes
                    withIOSClass:(IOSClass *)typeAttributes;

#pragma mark Package-Private

/*!
 @brief Proporciona el nombre X.500 del emisor del certificado
 @return Nombre X.500 del emisor del certificado
 */
- (NSString *)getIssuer;

/*!
 @brief Obtiene el n&uacute;mero de serie del Certificado.
 @return N&uacute;mero de serie del Certificado
 */
- (JavaMathBigInteger *)getSerialNumber;

/*!
 @brief Proporciona el nombre X.500 del titular del certificado
 @return Nombre X.500 del emisor del certificado
 */
- (NSString *)getSubject;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobJmulticardAsn1DerPkcs15CertificateObject)

FOUNDATION_EXPORT void EsGobJmulticardAsn1DerPkcs15CertificateObject_init(EsGobJmulticardAsn1DerPkcs15CertificateObject *self);

FOUNDATION_EXPORT EsGobJmulticardAsn1DerPkcs15CertificateObject *new_EsGobJmulticardAsn1DerPkcs15CertificateObject_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobJmulticardAsn1DerPkcs15CertificateObject *create_EsGobJmulticardAsn1DerPkcs15CertificateObject_init(void);

FOUNDATION_EXPORT void EsGobJmulticardAsn1DerPkcs15CertificateObject_initWithIOSClass_withIOSClass_withIOSClass_(EsGobJmulticardAsn1DerPkcs15CertificateObject *self, IOSClass *classAttributes, IOSClass *subclassAttributes, IOSClass *typeAttributes);

FOUNDATION_EXPORT EsGobJmulticardAsn1DerPkcs15CertificateObject *new_EsGobJmulticardAsn1DerPkcs15CertificateObject_initWithIOSClass_withIOSClass_withIOSClass_(IOSClass *classAttributes, IOSClass *subclassAttributes, IOSClass *typeAttributes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobJmulticardAsn1DerPkcs15CertificateObject *create_EsGobJmulticardAsn1DerPkcs15CertificateObject_initWithIOSClass_withIOSClass_withIOSClass_(IOSClass *classAttributes, IOSClass *subclassAttributes, IOSClass *typeAttributes);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardAsn1DerPkcs15CertificateObject)

#endif

#pragma pop_macro("INCLUDE_ALL_EsGobJmulticardAsn1DerPkcs15CertificateObject")
