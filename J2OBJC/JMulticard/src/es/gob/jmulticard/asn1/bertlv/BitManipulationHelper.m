//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/bertlv/BitManipulationHelper.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/asn1/bertlv/BerParsingException.h"
#include "es/gob/jmulticard/asn1/bertlv/BitManipulationHelper.h"
#include "java/lang/System.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/asn1/bertlv/BitManipulationHelper must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardAsn1BertlvBitManipulationHelper ()

- (instancetype)initPackagePrivate;

@end

__attribute__((unused)) static void EsGobJmulticardAsn1BertlvBitManipulationHelper_initPackagePrivate(EsGobJmulticardAsn1BertlvBitManipulationHelper *self);

__attribute__((unused)) static EsGobJmulticardAsn1BertlvBitManipulationHelper *new_EsGobJmulticardAsn1BertlvBitManipulationHelper_initPackagePrivate(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobJmulticardAsn1BertlvBitManipulationHelper *create_EsGobJmulticardAsn1BertlvBitManipulationHelper_initPackagePrivate(void);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/bertlv/BitManipulationHelper.java"


#line 20
@implementation EsGobJmulticardAsn1BertlvBitManipulationHelper

- (instancetype)initPackagePrivate {
  EsGobJmulticardAsn1BertlvBitManipulationHelper_initPackagePrivate(self);
  return self;
}


#line 31
+ (jboolean)getBitValueWithInt:(jint)value
                       withInt:(jint)position {
  return EsGobJmulticardAsn1BertlvBitManipulationHelper_getBitValueWithInt_withInt_(value, position);
}


#line 50
+ (jint)setBitValueWithInt:(jint)value
                   withInt:(jint)position
               withBoolean:(jboolean)bitValue {
  return EsGobJmulticardAsn1BertlvBitManipulationHelper_setBitValueWithInt_withInt_withBoolean_(value, position, bitValue);
}


#line 68
+ (IOSByteArray *)mergeArraysWithByteArray:(IOSByteArray *)buf1
                             withByteArray:(IOSByteArray *)buf2 {
  return EsGobJmulticardAsn1BertlvBitManipulationHelper_mergeArraysWithByteArray_withByteArray_(buf1, buf2);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x8, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(getBitValueWithInt:withInt:);
  methods[2].selector = @selector(setBitValueWithInt:withInt:withBoolean:);
  methods[3].selector = @selector(mergeArraysWithByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getBitValue", "II", "setBitValue", "IIZ", "mergeArrays", "[B[B" };
  static const J2ObjcClassInfo _EsGobJmulticardAsn1BertlvBitManipulationHelper = { "BitManipulationHelper", "es.gob.jmulticard.asn1.bertlv", ptrTable, methods, NULL, 7, 0x10, 4, 0, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardAsn1BertlvBitManipulationHelper;
}

@end


#line 22
void EsGobJmulticardAsn1BertlvBitManipulationHelper_initPackagePrivate(EsGobJmulticardAsn1BertlvBitManipulationHelper *self) {
  NSObject_init(self);
}


#line 22
EsGobJmulticardAsn1BertlvBitManipulationHelper *new_EsGobJmulticardAsn1BertlvBitManipulationHelper_initPackagePrivate() {
  J2OBJC_NEW_IMPL(EsGobJmulticardAsn1BertlvBitManipulationHelper, initPackagePrivate)
}


#line 22
EsGobJmulticardAsn1BertlvBitManipulationHelper *create_EsGobJmulticardAsn1BertlvBitManipulationHelper_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(EsGobJmulticardAsn1BertlvBitManipulationHelper, initPackagePrivate)
}


#line 31
jboolean EsGobJmulticardAsn1BertlvBitManipulationHelper_getBitValueWithInt_withInt_(jint value, jint position) {
  EsGobJmulticardAsn1BertlvBitManipulationHelper_initialize();
  if (position > 32) {
    @throw new_EsGobJmulticardAsn1BertlvBerParsingException_initWithNSString_(JreStrcat("$I$", @"No se puede obtener el valor del bit de la posicion ",
#line 36
    position, @", un entero en Java tiene solo 32 bits"));
  }
  
#line 39
  jint bitPosition = position;
  bitPosition--;
  jint mask = JreLShift32(1, bitPosition);
  return (value & mask) != 0;
}


#line 50
jint EsGobJmulticardAsn1BertlvBitManipulationHelper_setBitValueWithInt_withInt_withBoolean_(jint value, jint position, jboolean bitValue) {
  EsGobJmulticardAsn1BertlvBitManipulationHelper_initialize();
  
#line 51
  if (position > 32) {
    @throw new_EsGobJmulticardAsn1BertlvBerParsingException_initWithNSString_(JreStrcat("$I$", @"No se puede establecer el valor del bit de la posicion  ",
#line 54
    position, @", un entero en Java tiene solo 32 bits"));
  }
  
#line 57
  jint bitPosition = position;
  bitPosition--;
  jint mask = JreLShift32(1, bitPosition);
  if (bitValue) {
    
#line 62
    return value | mask;
  }
  
#line 65
  return value & ~mask;
}


#line 68
IOSByteArray *EsGobJmulticardAsn1BertlvBitManipulationHelper_mergeArraysWithByteArray_withByteArray_(IOSByteArray *buf1, IOSByteArray *buf2) {
  EsGobJmulticardAsn1BertlvBitManipulationHelper_initialize();
  
#line 69
  IOSByteArray *resBuf = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(buf1))->size_ + ((IOSByteArray *) nil_chk(buf2))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf1, 0, resBuf, 0, buf1->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf2, 0, resBuf, buf1->size_, buf2->size_);
  return resBuf;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardAsn1BertlvBitManipulationHelper)
