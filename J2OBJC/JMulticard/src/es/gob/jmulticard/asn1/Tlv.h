//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/asn1/Tlv.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobJmulticardAsn1Tlv")
#ifdef RESTRICT_EsGobJmulticardAsn1Tlv
#define INCLUDE_ALL_EsGobJmulticardAsn1Tlv 0
#else
#define INCLUDE_ALL_EsGobJmulticardAsn1Tlv 1
#endif
#undef RESTRICT_EsGobJmulticardAsn1Tlv

#if !defined (EsGobJmulticardAsn1Tlv_) && (INCLUDE_ALL_EsGobJmulticardAsn1Tlv || defined(INCLUDE_EsGobJmulticardAsn1Tlv))
#define EsGobJmulticardAsn1Tlv_

@class IOSByteArray;
@class JavaIoByteArrayInputStream;

/*!
 @brief Representaci&oacute;n de un TLV (Tipo-Longitud-Valor) binario en forma ASN&#46;1 DER.
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s.
 */
@interface EsGobJmulticardAsn1Tlv : NSObject

#pragma mark Public

/*!
 @brief Construye un TLV simple con etiqueta y longitud de un solo octeto cada uno.
 @param t Etiqueta (tipo) del TLV.
 @param value Valor del TLV.
 */
- (instancetype)initWithByte:(jbyte)t
               withByteArray:(IOSByteArray *)value;

/*!
 @brief Construye un TLV simple a partir de su representaci&oacute;n binaria directa.
 @param buffer Representaci &oacute; n binaria del TLV.
 @throw TlvExceptionEn caso de error analizando el TLV.
 */
- (instancetype)initWithByteArray:(IOSByteArray *)buffer;

/*!
 @brief Obtiene un TLV de un flujo de entrada, leyendo del mismo &uacute;nicamente los octetos
  correspondientes al TLV en cuesti&oacute;n.
 @param recordOfTlv Flujo de entrada.
 @return TLV recuperado del flujo.
 @throw IOExceptionSi ocurre un error durante la lectura del TLV.
 */
+ (EsGobJmulticardAsn1Tlv *)decodeWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)recordOfTlv;

/*!
 @brief Devuelve el TLV directamente en binario.
 @return Valor binario completo del TLV.
 */
- (IOSByteArray *)getBytes;

/*!
 @brief Devuelve la longitud del valor del TLV.
 @return Longitud del valor del TLV.
 */
- (jint)getLength;

/*!
 @brief Devuelve el tipo (etiqueta) del TLV.
 @return Tipo (etiqueta) del TLV.
 */
- (jbyte)getTag;

/*!
 @brief Devuelve el valor del TLV.
 @return Valor del del TLV.
 */
- (IOSByteArray *)getValue;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobJmulticardAsn1Tlv)

FOUNDATION_EXPORT void EsGobJmulticardAsn1Tlv_initWithByte_withByteArray_(EsGobJmulticardAsn1Tlv *self, jbyte t, IOSByteArray *value);

FOUNDATION_EXPORT EsGobJmulticardAsn1Tlv *new_EsGobJmulticardAsn1Tlv_initWithByte_withByteArray_(jbyte t, IOSByteArray *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobJmulticardAsn1Tlv *create_EsGobJmulticardAsn1Tlv_initWithByte_withByteArray_(jbyte t, IOSByteArray *value);

FOUNDATION_EXPORT void EsGobJmulticardAsn1Tlv_initWithByteArray_(EsGobJmulticardAsn1Tlv *self, IOSByteArray *buffer);

FOUNDATION_EXPORT EsGobJmulticardAsn1Tlv *new_EsGobJmulticardAsn1Tlv_initWithByteArray_(IOSByteArray *buffer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobJmulticardAsn1Tlv *create_EsGobJmulticardAsn1Tlv_initWithByteArray_(IOSByteArray *buffer);

FOUNDATION_EXPORT EsGobJmulticardAsn1Tlv *EsGobJmulticardAsn1Tlv_decodeWithJavaIoByteArrayInputStream_(JavaIoByteArrayInputStream *recordOfTlv);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardAsn1Tlv)

#endif

#pragma pop_macro("INCLUDE_ALL_EsGobJmulticardAsn1Tlv")
