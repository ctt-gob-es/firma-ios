//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/JmcLogger.java
//

#include "J2ObjC_source.h"
#include "es/gob/jmulticard/JmcLogger.h"
#include "java/lang/Throwable.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/JmcLogger must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardJmcLogger ()

- (instancetype)init;

@end

inline JavaUtilLoggingLogger *EsGobJmulticardJmcLogger_get_LOGGER(void);
static JavaUtilLoggingLogger *EsGobJmulticardJmcLogger_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardJmcLogger, LOGGER, JavaUtilLoggingLogger *)

inline jboolean EsGobJmulticardJmcLogger_get_DEBUG(void);
#define EsGobJmulticardJmcLogger_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardJmcLogger, DEBUG, jboolean)

__attribute__((unused)) static void EsGobJmulticardJmcLogger_init(EsGobJmulticardJmcLogger *self);

__attribute__((unused)) static EsGobJmulticardJmcLogger *new_EsGobJmulticardJmcLogger_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobJmulticardJmcLogger *create_EsGobJmulticardJmcLogger_init(void);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/JmcLogger.java"

J2OBJC_INITIALIZED_DEFN(EsGobJmulticardJmcLogger)


#line 8
@implementation EsGobJmulticardJmcLogger

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 14
- (instancetype)init {
  EsGobJmulticardJmcLogger_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)warningWithNSString:(NSString *)msg {
  EsGobJmulticardJmcLogger_warningWithNSString_(msg);
}


#line 26
+ (void)severeWithNSString:(NSString *)msg {
  EsGobJmulticardJmcLogger_severeWithNSString_(msg);
}


#line 34
+ (void)infoWithNSString:(NSString *)className_
            withNSString:(NSString *)methodName
            withNSString:(NSString *)msg {
  EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(className_, methodName, msg);
}


#line 42
+ (void)debugWithNSString:(NSString *)className_
             withNSString:(NSString *)methodName
             withNSString:(NSString *)msg {
  EsGobJmulticardJmcLogger_debugWithNSString_withNSString_withNSString_(className_, methodName, msg);
}


#line 54
+ (void)logWithNSString:(NSString *)className_
           withNSString:(NSString *)methodName
withJavaUtilLoggingLevel:(JavaUtilLoggingLevel *)level
           withNSString:(NSString *)msg
  withJavaLangThrowable:(JavaLangThrowable *)e {
  EsGobJmulticardJmcLogger_logWithNSString_withNSString_withJavaUtilLoggingLevel_withNSString_withJavaLangThrowable_(className_, methodName, level, msg, e);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(warningWithNSString:);
  methods[2].selector = @selector(severeWithNSString:);
  methods[3].selector = @selector(infoWithNSString:withNSString:withNSString:);
  methods[4].selector = @selector(debugWithNSString:withNSString:withNSString:);
  methods[5].selector = @selector(logWithNSString:withNSString:withJavaUtilLoggingLevel:withNSString:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = EsGobJmulticardJmcLogger_DEBUG, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "warning", "LNSString;", "severe", "info", "LNSString;LNSString;LNSString;", "debug", "log", "LNSString;LNSString;LJavaUtilLoggingLevel;LNSString;LJavaLangThrowable;", &EsGobJmulticardJmcLogger_LOGGER };
  static const J2ObjcClassInfo _EsGobJmulticardJmcLogger = { "JmcLogger", "es.gob.jmulticard", ptrTable, methods, fields, 7, 0x11, 6, 2, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardJmcLogger;
}

+ (void)initialize {
  if (self == [EsGobJmulticardJmcLogger class]) {
    EsGobJmulticardJmcLogger_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 10
    @"es.gob.jmulticard");
    J2OBJC_SET_INITIALIZED(EsGobJmulticardJmcLogger)
  }
}

@end


#line 14
void EsGobJmulticardJmcLogger_init(EsGobJmulticardJmcLogger *self) {
  NSObject_init(self);
}


#line 14
EsGobJmulticardJmcLogger *new_EsGobJmulticardJmcLogger_init() {
  J2OBJC_NEW_IMPL(EsGobJmulticardJmcLogger, init)
}


#line 14
EsGobJmulticardJmcLogger *create_EsGobJmulticardJmcLogger_init() {
  J2OBJC_CREATE_IMPL(EsGobJmulticardJmcLogger, init)
}


#line 20
void EsGobJmulticardJmcLogger_warningWithNSString_(NSString *msg) {
  EsGobJmulticardJmcLogger_initialize();
  
#line 21
  [((JavaUtilLoggingLogger *) nil_chk(EsGobJmulticardJmcLogger_LOGGER)) warningWithNSString:msg];
}


#line 26
void EsGobJmulticardJmcLogger_severeWithNSString_(NSString *msg) {
  EsGobJmulticardJmcLogger_initialize();
  
#line 27
  [((JavaUtilLoggingLogger *) nil_chk(EsGobJmulticardJmcLogger_LOGGER)) severeWithNSString:msg];
}


#line 34
void EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(NSString *className_, NSString *methodName, NSString *msg) {
  EsGobJmulticardJmcLogger_initialize();
  
#line 35
  [((JavaUtilLoggingLogger *) nil_chk(EsGobJmulticardJmcLogger_LOGGER)) infoWithNSString:JreStrcat("$C$$$", className_, '.', methodName, @"() : ", msg)];
}


#line 42
void EsGobJmulticardJmcLogger_debugWithNSString_withNSString_withNSString_(NSString *className_, NSString *methodName, NSString *msg) {
  EsGobJmulticardJmcLogger_initialize();
}


#line 54
void EsGobJmulticardJmcLogger_logWithNSString_withNSString_withJavaUtilLoggingLevel_withNSString_withJavaLangThrowable_(NSString *className_, NSString *methodName, JavaUtilLoggingLevel *level, NSString *msg, JavaLangThrowable *e) {
  EsGobJmulticardJmcLogger_initialize();
  
#line 59
  [((JavaUtilLoggingLogger *) nil_chk(EsGobJmulticardJmcLogger_LOGGER)) logWithJavaUtilLoggingLevel:level withNSString:JreStrcat("$C$$$", className_, '.', methodName, @"() : ", msg) withJavaLangThrowable:e];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardJmcLogger)
