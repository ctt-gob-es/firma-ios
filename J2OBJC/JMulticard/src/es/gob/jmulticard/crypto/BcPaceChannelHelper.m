//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/crypto/BcPaceChannelHelper.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/CryptoHelper.h"
#include "es/gob/jmulticard/DigestAlgorithm.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/JmcLogger.h"
#include "es/gob/jmulticard/apdu/CommandApdu.h"
#include "es/gob/jmulticard/apdu/ResponseApdu.h"
#include "es/gob/jmulticard/apdu/StatusWord.h"
#include "es/gob/jmulticard/apdu/iso7816four/pace/GeneralAuthenticateApduCommand.h"
#include "es/gob/jmulticard/apdu/iso7816four/pace/MseSetPaceAlgorithmApduCommand.h"
#include "es/gob/jmulticard/apdu/iso7816four/pace/PaceChat.h"
#include "es/gob/jmulticard/asn1/Tlv.h"
#include "es/gob/jmulticard/asn1/TlvException.h"
#include "es/gob/jmulticard/asn1/icao/CardAccess.h"
#include "es/gob/jmulticard/card/icao/InvalidCanOrMrzException.h"
#include "es/gob/jmulticard/card/icao/WirelessInitializer.h"
#include "es/gob/jmulticard/connection/ApduConnection.h"
#include "es/gob/jmulticard/connection/pace/PaceException.h"
#include "es/gob/jmulticard/connection/pace/SecureMessaging.h"
#include "es/gob/jmulticard/crypto/BcPaceChannelHelper.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/SecureRandom.h"
#include "java/util/Arrays.h"
#include "java/util/Random.h"
#include "org/bouncycastle/asn1/teletrust/TeleTrusTNamedCurves.h"
#include "org/bouncycastle/asn1/x9/X9ECParameters.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECFieldElement.h"
#include "org/bouncycastle/math/ec/ECPoint.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/crypto/BcPaceChannelHelper must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardCryptoBcPaceChannelHelper () {
 @public
  EsGobJmulticardAsn1IcaoCardAccess *cardAccess_;
  EsGobJmulticardApduIso7816fourPacePaceChat *paceChat_;
}

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardCryptoBcPaceChannelHelper, cardAccess_, EsGobJmulticardAsn1IcaoCardAccess *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCryptoBcPaceChannelHelper, paceChat_, EsGobJmulticardApduIso7816fourPacePaceChat *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/crypto/BcPaceChannelHelper.java"


#line 43
@implementation EsGobJmulticardCryptoBcPaceChannelHelper


#line 52
- (instancetype)initWithEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)ch
              withEsGobJmulticardAsn1IcaoCardAccess:(EsGobJmulticardAsn1IcaoCardAccess *)crdAccess
     withEsGobJmulticardApduIso7816fourPacePaceChat:(EsGobJmulticardApduIso7816fourPacePaceChat *)paceCht {
  EsGobJmulticardCryptoBcPaceChannelHelper_initWithEsGobJmulticardCryptoHelper_withEsGobJmulticardAsn1IcaoCardAccess_withEsGobJmulticardApduIso7816fourPacePaceChat_(self, ch, crdAccess, paceCht);
  return self;
}


#line 58
- (EsGobJmulticardConnectionPaceSecureMessaging *)openPaceChannelWithByte:(jbyte)cla
                           withEsGobJmulticardCardIcaoWirelessInitializer:(id<EsGobJmulticardCardIcaoWirelessInitializer>)pi
                              withEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn {
  
#line 63
  if (conn == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El canal de conexion no puede ser nulo");
  }
  if (pi == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Es necesario proporcionar un inicializador para abrir canal PACE");
  }
  if (cryptoHelper_ == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El CryptoHelper no puede ser nulo");
  }
  
#line 73
  if (![conn isOpen]) {
    [conn open];
  }
  
#line 78
  EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *paceAlgorithm = [((EsGobJmulticardAsn1IcaoCardAccess *) nil_chk(cardAccess_)) getPaceAlgorithm];
  EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *paceAlgorithmParam = [cardAccess_ getPaceAlgorithmParam];
  
#line 83
  EsGobJmulticardApduCommandApdu *comm = new_EsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_initWithByte_withEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_withEsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_PacePasswordType_withEsGobJmulticardApduIso7816fourPacePaceChat_withEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_(
#line 84
  cla,
#line 85
  paceAlgorithm,
#line 86
  [pi getPasswordType],
#line 87
  paceChat_,
#line 88
  paceAlgorithmParam);
  
#line 90
  EsGobJmulticardApduResponseApdu *res = [conn transmitWithEsGobJmulticardApduCommandApdu:comm];
  if (![((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
    @throw new_EsGobJmulticardConnectionPacePaceException_initWithEsGobJmulticardApduStatusWord_withEsGobJmulticardApduApdu_withNSString_(
#line 93
    [res getStatusWord],
#line 94
    comm,
#line 95
    @"Error estableciendo el algoritmo del protocolo PACE (fallo en el MSE Set)");
  }
  
#line 99
  EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 100
  [EsGobJmulticardCryptoBcPaceChannelHelper_class_() getName],
#line 101
  @"openPaceChannel",
#line 102
  @"Establecido el algoritmo para PACE con el comando MSE Set");
  
#line 107
  comm = new_EsGobJmulticardApduIso7816fourPaceGeneralAuthenticateApduCommand_initWithByte_withEsGobJmulticardApduIso7816fourPaceGeneralAuthenticateApduCommand_GeneralAuthenticateData_((jbyte) (jint) 0x10, new_EsGobJmulticardApduIso7816fourPaceGeneralAuthenticateApduCommand_DataEncryptedNonce_init());
  res = [conn transmitWithEsGobJmulticardApduCommandApdu:comm];
  if (![((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
    @throw new_EsGobJmulticardConnectionPacePaceException_initWithEsGobJmulticardApduStatusWord_withEsGobJmulticardApduApdu_withNSString_([res getStatusWord], comm, @"Error solicitando el aleatorio de calculo PACE (nonce)");
  }
  
#line 113
  EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 114
  [EsGobJmulticardCryptoBcPaceChannelHelper_class_() getName],
#line 115
  @"openPaceChannel",
#line 116
  @"Solicitado el aleatorio de calculo PACE (Nonce) con el primer comando General Autenticate");
  
#line 120
  IOSByteArray *nonce;
  @try {
    nonce = [new_EsGobJmulticardAsn1Tlv_initWithByteArray_([new_EsGobJmulticardAsn1Tlv_initWithByteArray_([res getData]) getValue]) getValue];
  }
  @catch (EsGobJmulticardAsn1TlvException *e) {
    @throw new_EsGobJmulticardConnectionPacePaceException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$", @"El aleatorio de calculo PACE (Nonce) obtenido (", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 127
    [res getData], true), @") no sigue el formato esperado"),
#line 128
    e);
  }
  
#line 136
  OrgBouncycastleAsn1X9X9ECParameters *ecdhParameters = OrgBouncycastleAsn1TeletrustTeleTrusTNamedCurves_getByNameWithNSString_([((EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam *) nil_chk(paceAlgorithmParam)) getCurveName]);
  OrgBouncycastleMathEcECPoint *pointG = [((OrgBouncycastleAsn1X9X9ECParameters *) nil_chk(ecdhParameters)) getG];
  OrgBouncycastleMathEcECCurve_Fp *curve = (OrgBouncycastleMathEcECCurve_Fp *) cast_chk([ecdhParameters getCurve], [OrgBouncycastleMathEcECCurve_Fp class]);
  
#line 142
  JavaUtilRandom *rnd = new_JavaSecuritySecureRandom_init();
  IOSByteArray *x1 = [IOSByteArray newArrayWithLength:JreIntDiv([((OrgBouncycastleMathEcECCurve_Fp *) nil_chk(curve)) getFieldSize], 8)];
  [rnd nextBytesWithByteArray:x1];
  JavaMathBigInteger *prkIFDDH1 = new_JavaMathBigInteger_initWithInt_withByteArray_(1, x1);
  
#line 148
  OrgBouncycastleMathEcECPoint *pukIFDDH1 = [((OrgBouncycastleMathEcECPoint *) nil_chk(pointG)) multiplyWithJavaMathBigInteger:prkIFDDH1];
  IOSByteArray *pukIFDDH1UncompressedBytes = [((OrgBouncycastleMathEcECPoint *) nil_chk(pukIFDDH1)) getEncodedWithBoolean:false];
  
#line 152
  comm = new_EsGobJmulticardApduIso7816fourPaceGeneralAuthenticateApduCommand_initWithByte_withEsGobJmulticardApduIso7816fourPaceGeneralAuthenticateApduCommand_GeneralAuthenticateData_(
#line 153
  (jbyte) (jint) 0x10, new_EsGobJmulticardApduIso7816fourPaceGeneralAuthenticateApduCommand_DataMapNonce_initWithByteArray_(
#line 154
  pukIFDDH1UncompressedBytes));
  
#line 156
  res = [conn transmitWithEsGobJmulticardApduCommandApdu:comm];
  if (![((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
    @throw new_EsGobJmulticardConnectionPacePaceException_initWithEsGobJmulticardApduStatusWord_withEsGobJmulticardApduApdu_withNSString_([res getStatusWord], comm, @"Error mapeando el aleatorio de calculo PACE (nonce)");
  }
  
#line 161
  EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 162
  [EsGobJmulticardCryptoBcPaceChannelHelper_class_() getName],
#line 163
  @"openPaceChannel",
#line 164
  @"Mapeado el aleatorio de calculo PACE (Nonce) con el segundo comando General Autenticate");
  
#line 168
  IOSByteArray *pukIccDh1;
  @try {
    pukIccDh1 = EsGobJmulticardCryptoHelper_PaceChannelHelper_unwrapEcKeyWithByteArray_([res getData]);
  }
  @catch (EsGobJmulticardAsn1TlvException *e) {
    @throw new_EsGobJmulticardConnectionPacePaceException_initWithNSString_withJavaLangThrowable_(@"Error obteniendo la clave efimera EC publica de la tarjeta", e);
  }
  
#line 177
  OrgBouncycastleMathEcECPoint *y1FromG = EsGobJmulticardCryptoBcPaceChannelHelper_byteArrayToECPointWithByteArray_withOrgBouncycastleMathEcECCurve_Fp_(pukIccDh1, curve);
  
#line 180
  OrgBouncycastleMathEcECPoint *sharedSecretH = [((OrgBouncycastleMathEcECPoint *) nil_chk(y1FromG)) multiplyWithJavaMathBigInteger:prkIFDDH1];
  
#line 183
  JavaMathBigInteger *ms = new_JavaMathBigInteger_initWithInt_withByteArray_(
#line 184
  1,
#line 185
  [self getSecretNonceWithEsGobJmulticardCardIcaoWirelessInitializer:
#line 186
  pi withByteArray:
#line 187
  nonce withInt:
#line 188
  [((EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm *) nil_chk(paceAlgorithm)) getKeyLength] withEsGobJmulticardDigestAlgorithm:
#line 189
  [cardAccess_ getPaceDigestAlgorithm]]);
  
#line 192
  OrgBouncycastleMathEcECPoint *gTemp = [pointG multiplyWithJavaMathBigInteger:ms];
  OrgBouncycastleMathEcECPoint *newPointG = [((OrgBouncycastleMathEcECPoint *) nil_chk(gTemp)) addWithOrgBouncycastleMathEcECPoint:sharedSecretH];
  
#line 201
  IOSByteArray *x2 = [IOSByteArray newArrayWithLength:JreIntDiv([curve getFieldSize], 8)];
  [rnd setSeedWithLong:[rnd nextLong]];
  [rnd nextBytesWithByteArray:x2];
  JavaMathBigInteger *prkIFDDH2 = new_JavaMathBigInteger_initWithInt_withByteArray_(1, x2);
  
#line 207
  OrgBouncycastleMathEcECPoint *pukIFDDH2 = [((OrgBouncycastleMathEcECPoint *) nil_chk(newPointG)) multiplyWithJavaMathBigInteger:prkIFDDH2];
  IOSByteArray *pukIFDDH2UncompressedBytes = [((OrgBouncycastleMathEcECPoint *) nil_chk(pukIFDDH2)) getEncodedWithBoolean:false];
  
#line 211
  comm = new_EsGobJmulticardApduIso7816fourPaceGeneralAuthenticateApduCommand_initWithByte_withEsGobJmulticardApduIso7816fourPaceGeneralAuthenticateApduCommand_GeneralAuthenticateData_(
#line 212
  (jbyte) (jint) 0x10, new_EsGobJmulticardApduIso7816fourPaceGeneralAuthenticateApduCommand_DataPerformKeyAgreement_initWithByteArray_(
#line 213
  pukIFDDH2UncompressedBytes));
  
#line 215
  res = [conn transmitWithEsGobJmulticardApduCommandApdu:comm];
  
#line 217
  if (![((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
    @throw new_EsGobJmulticardConnectionPacePaceException_initWithEsGobJmulticardApduStatusWord_withEsGobJmulticardApduApdu_withNSString_([res getStatusWord], comm, @"Error en el tercer comando General Authenticate");
  }
  
#line 222
  IOSByteArray *pukIccDh2;
  @try {
    pukIccDh2 = EsGobJmulticardCryptoHelper_PaceChannelHelper_unwrapEcKeyWithByteArray_([res getData]);
  }
  @catch (EsGobJmulticardAsn1TlvException *e) {
    @throw new_EsGobJmulticardConnectionPacePaceException_initWithNSString_withJavaLangThrowable_(@"Error obteniendo la clave efimera EC publica de la tarjeta", e);
  }
  
#line 230
  OrgBouncycastleMathEcECPoint *y2FromNewG = EsGobJmulticardCryptoBcPaceChannelHelper_byteArrayToECPointWithByteArray_withOrgBouncycastleMathEcECCurve_Fp_(pukIccDh2, curve);
  
#line 233
  OrgBouncycastleMathEcECPoint_Fp *sharedSecretK = (OrgBouncycastleMathEcECPoint_Fp *) cast_chk([((OrgBouncycastleMathEcECPoint *) nil_chk(y2FromNewG)) multiplyWithJavaMathBigInteger:prkIFDDH2], [OrgBouncycastleMathEcECPoint_Fp class]);
  IOSByteArray *secretK = EsGobJmulticardCryptoHelper_PaceChannelHelper_bigIntToByteArrayWithJavaMathBigInteger_([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECPoint *) nil_chk([((OrgBouncycastleMathEcECPoint_Fp *) nil_chk(sharedSecretK)) normalize])) getXCoord])) toBigInteger]);
  
#line 236
  EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 237
  [EsGobJmulticardCryptoBcPaceChannelHelper_class_() getName],
#line 238
  @"openPaceChannel",
#line 239
  @"Acordadas claves de canal con el tercer comando General Authenticate");
  
#line 247
  IOSByteArray *kenc;
  @try {
    kenc = [self padAndDigestWithByteArray:secretK withByteArray:JreLoadStatic(EsGobJmulticardCryptoHelper_PaceChannelHelper, KENC_PADDING) withEsGobJmulticardDigestAlgorithm:JreLoadEnum(EsGobJmulticardDigestAlgorithm, SHA1) withInt:[paceAlgorithm getKeyLength]];
  }
  @catch (JavaIoIOException *e) {
    @throw new_EsGobJmulticardConnectionPacePaceException_initWithNSString_withJavaLangThrowable_(@"Error obteniendo el 'kenc' a partir del CAN/MRZ", e);
  }
  
#line 256
  IOSByteArray *kmac;
  @try {
    kmac = [self padAndDigestWithByteArray:secretK withByteArray:JreLoadStatic(EsGobJmulticardCryptoHelper_PaceChannelHelper, KMAC_PADDING) withEsGobJmulticardDigestAlgorithm:JreLoadEnum(EsGobJmulticardDigestAlgorithm, SHA1) withInt:[paceAlgorithm getKeyLength]];
  }
  @catch (JavaIoIOException *e) {
    @throw new_EsGobJmulticardConnectionPacePaceException_initWithNSString_withJavaLangThrowable_(@"Error obteniendo el 'kmac' a partir del CAN", e);
  }
  
#line 265
  IOSByteArray *pukIccDh2Descompressed = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(pukIccDh2))->size_ - 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(pukIccDh2, 1, pukIccDh2Descompressed, 0, pukIccDh2->size_ - 1);
  
#line 269
  IOSByteArray *data = EsGobJmulticardHexUtils_concatenateByteArraysWithByteArray2_([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(EsGobJmulticardCryptoHelper_PaceChannelHelper, MAC_PADDING_PRE), EsGobJmulticardHexUtils_concatenateByteArraysWithByteArray2_([IOSObjectArray newArrayWithObjects:(id[]){
#line 272
    [paceAlgorithm getBytes], EsGobJmulticardHexUtils_concatenateByteArraysWithByteArray2_([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(EsGobJmulticardCryptoHelper_PaceChannelHelper, MAC2_PADDING_POST),
#line 273
    pukIccDh2Descompressed } count:2 type:IOSClass_byteArray(1)]) } count:2 type:IOSClass_byteArray(1)]) } count:2 type:IOSClass_byteArray(1)]);
    
#line 277
    IOSByteArray *mac8bytes;
    @try {
      mac8bytes = [cryptoHelper_ doAesCmacWithByteArray:data withByteArray:kmac];
    }
    @catch (JavaSecurityInvalidKeyException *e) {
      @throw new_EsGobJmulticardConnectionPacePaceException_initWithNSString_withJavaLangThrowable_(@"Error descifrando el 'nonce'", e);
    }
    @catch (
#line 281
    JavaSecurityNoSuchAlgorithmException *e) {
      @throw new_EsGobJmulticardConnectionPacePaceException_initWithNSString_withJavaLangThrowable_(@"Error descifrando el 'nonce'", e);
    }
    
#line 286
    comm = new_EsGobJmulticardApduIso7816fourPaceGeneralAuthenticateApduCommand_initWithByte_withEsGobJmulticardApduIso7816fourPaceGeneralAuthenticateApduCommand_GeneralAuthenticateData_(
#line 287
    (jbyte) (jint) 0x00, new_EsGobJmulticardApduIso7816fourPaceGeneralAuthenticateApduCommand_DataMutualAuthentication_initWithByteArray_(
#line 288
    mac8bytes));
    
#line 290
    res = [conn transmitWithEsGobJmulticardApduCommandApdu:comm];
    
#line 293
    if (![((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
      @throw new_EsGobJmulticardCardIcaoInvalidCanOrMrzException_initWithEsGobJmulticardApduStatusWord_withEsGobJmulticardApduApdu_withNSString_(
#line 295
      [res getStatusWord],
#line 296
      comm,
#line 297
      @"Error estableciendo el algoritmo del protocolo PACE (fallo en el General Authenticate)");
    }
    
#line 302
    IOSByteArray *ssc = [IOSByteArray newArrayWithLength:JreIntDiv([paceAlgorithm getKeyLength], 8)];
    JavaUtilArrays_fillWithByteArray_withByte_(ssc, (jbyte) 0);
    
#line 305
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_([EsGobJmulticardCryptoBcPaceChannelHelper_class_() getName], @"openPaceChannel", @"Canal Pace abierto");
    EsGobJmulticardJmcLogger_debugWithNSString_withNSString_withNSString_(
#line 307
    [EsGobJmulticardCryptoBcPaceChannelHelper_class_() getName],
#line 308
    @"openPaceChannel", JreStrcat("$$$$$$", @"Claves de canal Pace:\n  Kenc: ", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 310
    kenc, true), @"\n  Kmac: ", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 311
    kmac, true), @"\n  Ssc: ", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 312
    ssc, true)));
    
#line 315
    return new_EsGobJmulticardConnectionPaceSecureMessaging_initWithByteArray_withByteArray_withByteArray_withEsGobJmulticardCryptoHelper_(
#line 316
    kenc,
#line 317
    kmac, [IOSByteArray newArrayWithLength:JreIntDiv(
#line 318
    [paceAlgorithm getKeyLength], 8)],
#line 319
    cryptoHelper_);
  }


#line 323
- (IOSByteArray *)padAndDigestWithByteArray:(IOSByteArray *)input
                              withByteArray:(IOSByteArray *)padding
         withEsGobJmulticardDigestAlgorithm:(EsGobJmulticardDigestAlgorithm *)digestAlgorithm
                                    withInt:(jint)resultBitLength {
  IOSByteArray *dest = [IOSByteArray newArrayWithLength:JreIntDiv(resultBitLength, 8)];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(
#line 329
  [((EsGobJmulticardCryptoHelper *) nil_chk(cryptoHelper_)) digestWithEsGobJmulticardDigestAlgorithm:
#line 330
  digestAlgorithm withByteArray:EsGobJmulticardHexUtils_concatenateByteArraysWithByteArray2_([IOSObjectArray newArrayWithObjects:(id[]){
#line 331
    input, padding } count:2 type:IOSClass_byteArray(1)])],
#line 333
    0,
#line 334
    dest,
#line 335
    0, JreIntDiv(
#line 336
    resultBitLength, 8));
    
#line 338
    return dest;
  }


#line 341
- (IOSByteArray *)getSecretNonceWithEsGobJmulticardCardIcaoWirelessInitializer:(id<EsGobJmulticardCardIcaoWirelessInitializer>)pi
                                                                 withByteArray:(IOSByteArray *)nonce
                                                                       withInt:(jint)aesKeyLength
                                            withEsGobJmulticardDigestAlgorithm:(EsGobJmulticardDigestAlgorithm *)digestAlgorithm {
  
#line 348
  IOSByteArray *sk;
  @try {
    sk = [self padAndDigestWithByteArray:[((id<EsGobJmulticardCardIcaoWirelessInitializer>) nil_chk(pi)) getBytes] withByteArray:JreLoadStatic(EsGobJmulticardCryptoHelper_PaceChannelHelper, CAN_MRZ_PADDING) withEsGobJmulticardDigestAlgorithm:digestAlgorithm withInt:aesKeyLength];
  }
  @catch (JavaIoIOException *e) {
    @throw new_EsGobJmulticardConnectionPacePaceException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error obteniendo el 'sk' a partir del ", [pi getPasswordType]), e);
  }
  
#line 357
  @try {
    return [((EsGobJmulticardCryptoHelper *) nil_chk(cryptoHelper_)) aesDecryptWithByteArray:
#line 359
    nonce withByteArray:[IOSByteArray newArrayWithLength:
#line 360
    0] withByteArray:
#line 361
    sk withEsGobJmulticardCryptoHelper_BlockMode:JreLoadEnum(EsGobJmulticardCryptoHelper_BlockMode, CBC) withEsGobJmulticardCryptoHelper_Padding:JreLoadEnum(EsGobJmulticardCryptoHelper_Padding, NOPADDING)];
  }
  @catch (
#line 366
  JavaIoIOException *e) {
    @throw new_EsGobJmulticardConnectionPacePaceException_initWithNSString_withJavaLangThrowable_(@"Error descifrando el 'nonce'", e);
  }
}


#line 371
+ (OrgBouncycastleMathEcECPoint *)byteArrayToECPointWithByteArray:(IOSByteArray *)value
                              withOrgBouncycastleMathEcECCurve_Fp:(OrgBouncycastleMathEcECCurve_Fp *)curve {
  return EsGobJmulticardCryptoBcPaceChannelHelper_byteArrayToECPointWithByteArray_withOrgBouncycastleMathEcECCurve_Fp_(value, curve);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardConnectionPaceSecureMessaging;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "[B", 0x4, 4, 5, 6, -1, -1, -1 },
    { NULL, "[B", 0x4, 7, 8, 9, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0xc, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithEsGobJmulticardCryptoHelper:withEsGobJmulticardAsn1IcaoCardAccess:withEsGobJmulticardApduIso7816fourPacePaceChat:);
  methods[1].selector = @selector(openPaceChannelWithByte:withEsGobJmulticardCardIcaoWirelessInitializer:withEsGobJmulticardConnectionApduConnection:);
  methods[2].selector = @selector(padAndDigestWithByteArray:withByteArray:withEsGobJmulticardDigestAlgorithm:withInt:);
  methods[3].selector = @selector(getSecretNonceWithEsGobJmulticardCardIcaoWirelessInitializer:withByteArray:withInt:withEsGobJmulticardDigestAlgorithm:);
  methods[4].selector = @selector(byteArrayToECPointWithByteArray:withOrgBouncycastleMathEcECCurve_Fp:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cardAccess_", "LEsGobJmulticardAsn1IcaoCardAccess;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "paceChat_", "LEsGobJmulticardApduIso7816fourPacePaceChat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEsGobJmulticardCryptoHelper;LEsGobJmulticardAsn1IcaoCardAccess;LEsGobJmulticardApduIso7816fourPacePaceChat;", "openPaceChannel", "BLEsGobJmulticardCardIcaoWirelessInitializer;LEsGobJmulticardConnectionApduConnection;", "LEsGobJmulticardConnectionApduConnectionException;LEsGobJmulticardCardIcaoIcaoException;", "padAndDigest", "[B[BLEsGobJmulticardDigestAlgorithm;I", "LJavaIoIOException;", "getSecretNonce", "LEsGobJmulticardCardIcaoWirelessInitializer;[BILEsGobJmulticardDigestAlgorithm;", "LEsGobJmulticardConnectionPacePaceException;", "byteArrayToECPoint", "[BLOrgBouncycastleMathEcECCurve_Fp;" };
  static const J2ObjcClassInfo _EsGobJmulticardCryptoBcPaceChannelHelper = { "BcPaceChannelHelper", "es.gob.jmulticard.crypto", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardCryptoBcPaceChannelHelper;
}

@end


#line 52
void EsGobJmulticardCryptoBcPaceChannelHelper_initWithEsGobJmulticardCryptoHelper_withEsGobJmulticardAsn1IcaoCardAccess_withEsGobJmulticardApduIso7816fourPacePaceChat_(EsGobJmulticardCryptoBcPaceChannelHelper *self, EsGobJmulticardCryptoHelper *ch, EsGobJmulticardAsn1IcaoCardAccess *crdAccess, EsGobJmulticardApduIso7816fourPacePaceChat *paceCht) {
  EsGobJmulticardCryptoHelper_PaceChannelHelper_initWithEsGobJmulticardCryptoHelper_(self, ch);
  self->cardAccess_ = crdAccess;
  self->paceChat_ = paceCht;
}


#line 52
EsGobJmulticardCryptoBcPaceChannelHelper *new_EsGobJmulticardCryptoBcPaceChannelHelper_initWithEsGobJmulticardCryptoHelper_withEsGobJmulticardAsn1IcaoCardAccess_withEsGobJmulticardApduIso7816fourPacePaceChat_(EsGobJmulticardCryptoHelper *ch, EsGobJmulticardAsn1IcaoCardAccess *crdAccess, EsGobJmulticardApduIso7816fourPacePaceChat *paceCht) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCryptoBcPaceChannelHelper, initWithEsGobJmulticardCryptoHelper_withEsGobJmulticardAsn1IcaoCardAccess_withEsGobJmulticardApduIso7816fourPacePaceChat_, ch, crdAccess, paceCht)
}


#line 52
EsGobJmulticardCryptoBcPaceChannelHelper *create_EsGobJmulticardCryptoBcPaceChannelHelper_initWithEsGobJmulticardCryptoHelper_withEsGobJmulticardAsn1IcaoCardAccess_withEsGobJmulticardApduIso7816fourPacePaceChat_(EsGobJmulticardCryptoHelper *ch, EsGobJmulticardAsn1IcaoCardAccess *crdAccess, EsGobJmulticardApduIso7816fourPacePaceChat *paceCht) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCryptoBcPaceChannelHelper, initWithEsGobJmulticardCryptoHelper_withEsGobJmulticardAsn1IcaoCardAccess_withEsGobJmulticardApduIso7816fourPacePaceChat_, ch, crdAccess, paceCht)
}


#line 371
OrgBouncycastleMathEcECPoint *EsGobJmulticardCryptoBcPaceChannelHelper_byteArrayToECPointWithByteArray_withOrgBouncycastleMathEcECCurve_Fp_(IOSByteArray *value, OrgBouncycastleMathEcECCurve_Fp *curve) {
  EsGobJmulticardCryptoBcPaceChannelHelper_initialize();
  
#line 372
  IOSByteArray *x = [IOSByteArray newArrayWithLength:JreIntDiv((((IOSByteArray *) nil_chk(value))->size_ - 1), 2)];
  IOSByteArray *y = [IOSByteArray newArrayWithLength:JreIntDiv((value->size_ - 1), 2)];
  if (IOSByteArray_Get(value, 0) != (jbyte) (jint) 0x04) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No se ha encontrado un punto no comprimido");
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(value, 1, x, 0, JreIntDiv((value->size_ - 1), 2));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(value, 1 + JreIntDiv((value->size_ - 1), 2), y, 0, JreIntDiv((value->size_ - 1), 2));
  OrgBouncycastleMathEcECFieldElement_Fp *xE = (OrgBouncycastleMathEcECFieldElement_Fp *) cast_chk([((OrgBouncycastleMathEcECCurve_Fp *) nil_chk(curve)) fromBigIntegerWithJavaMathBigInteger:new_JavaMathBigInteger_initWithInt_withByteArray_(1, x)], [OrgBouncycastleMathEcECFieldElement_Fp class]);
  OrgBouncycastleMathEcECFieldElement_Fp *yE = (OrgBouncycastleMathEcECFieldElement_Fp *) cast_chk([curve fromBigIntegerWithJavaMathBigInteger:new_JavaMathBigInteger_initWithInt_withByteArray_(1, y)], [OrgBouncycastleMathEcECFieldElement_Fp class]);
  
#line 382
  return [curve createPointWithJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement_Fp *) nil_chk(xE)) toBigInteger] withJavaMathBigInteger:[((OrgBouncycastleMathEcECFieldElement_Fp *) nil_chk(yE)) toBigInteger]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCryptoBcPaceChannelHelper)
