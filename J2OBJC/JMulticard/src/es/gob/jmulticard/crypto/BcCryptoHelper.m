//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/crypto/BcCryptoHelper.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/CryptoHelper.h"
#include "es/gob/jmulticard/DigestAlgorithm.h"
#include "es/gob/jmulticard/apdu/iso7816four/pace/PaceChat.h"
#include "es/gob/jmulticard/asn1/icao/CardAccess.h"
#include "es/gob/jmulticard/crypto/BcCryptoHelper.h"
#include "es/gob/jmulticard/crypto/BcPaceChannelHelper.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/math/BigInteger.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/PublicKey.h"
#include "java/security/SignatureException.h"
#include "java/security/cert/CertificateException.h"
#include "java/security/cert/CertificateExpiredException.h"
#include "java/security/cert/CertificateNotYetValidException.h"
#include "java/security/cert/X509Certificate.h"
#include "java/security/interfaces/RSAKey.h"
#include "java/security/interfaces/RSAPrivateKey.h"
#include "java/security/interfaces/RSAPublicKey.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "java/security/spec/ECField.h"
#include "java/security/spec/ECFieldFp.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/ECPoint.h"
#include "java/security/spec/EllipticCurve.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/logging/Logger.h"
#include "org/bouncycastle/asn1/ASN1Encodable.h"
#include "org/bouncycastle/asn1/ASN1Integer.h"
#include "org/bouncycastle/asn1/ASN1Primitive.h"
#include "org/bouncycastle/asn1/ASN1Sequence.h"
#include "org/bouncycastle/asn1/DERBitString.h"
#include "org/bouncycastle/cert/X509CertificateHolder.h"
#include "org/bouncycastle/cms/CMSException.h"
#include "org/bouncycastle/cms/CMSSignedData.h"
#include "org/bouncycastle/cms/CMSTypedData.h"
#include "org/bouncycastle/cms/DefaultCMSSignatureAlgorithmNameGenerator.h"
#include "org/bouncycastle/cms/SignerId.h"
#include "org/bouncycastle/cms/SignerInformation.h"
#include "org/bouncycastle/cms/SignerInformationStore.h"
#include "org/bouncycastle/cms/SignerInformationVerifier.h"
#include "org/bouncycastle/crypto/AsymmetricBlockCipher.h"
#include "org/bouncycastle/crypto/BlockCipher.h"
#include "org/bouncycastle/crypto/BufferedBlockCipher.h"
#include "org/bouncycastle/crypto/DataLengthException.h"
#include "org/bouncycastle/crypto/DefaultBufferedBlockCipher.h"
#include "org/bouncycastle/crypto/InvalidCipherTextException.h"
#include "org/bouncycastle/crypto/Mac.h"
#include "org/bouncycastle/crypto/MultiBlockCipher.h"
#include "org/bouncycastle/crypto/digests/SHA1Digest.h"
#include "org/bouncycastle/crypto/digests/SHA256Digest.h"
#include "org/bouncycastle/crypto/digests/SHA384Digest.h"
#include "org/bouncycastle/crypto/digests/SHA512Digest.h"
#include "org/bouncycastle/crypto/engines/AESEngine.h"
#include "org/bouncycastle/crypto/engines/DESEngine.h"
#include "org/bouncycastle/crypto/engines/DESedeEngine.h"
#include "org/bouncycastle/crypto/engines/RSAEngine.h"
#include "org/bouncycastle/crypto/macs/CMac.h"
#include "org/bouncycastle/crypto/modes/CBCBlockCipher.h"
#include "org/bouncycastle/crypto/modes/CBCModeCipher.h"
#include "org/bouncycastle/crypto/paddings/BlockCipherPadding.h"
#include "org/bouncycastle/crypto/paddings/ISO7816d4Padding.h"
#include "org/bouncycastle/crypto/paddings/PaddedBufferedBlockCipher.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/crypto/params/KeyParameter.h"
#include "org/bouncycastle/crypto/params/ParametersWithIV.h"
#include "org/bouncycastle/crypto/params/RSAKeyParameters.h"
#include "org/bouncycastle/crypto/prng/DigestRandomGenerator.h"
#include "org/bouncycastle/crypto/prng/RandomGenerator.h"
#include "org/bouncycastle/jcajce/provider/asymmetric/ec/KeyPairGeneratorSpi.h"
#include "org/bouncycastle/jce/ECNamedCurveTable.h"
#include "org/bouncycastle/jce/provider/BouncyCastleProvider.h"
#include "org/bouncycastle/jce/spec/ECNamedCurveGenParameterSpec.h"
#include "org/bouncycastle/jce/spec/ECNamedCurveParameterSpec.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECFieldElement.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/operator/ContentVerifierProvider.h"
#include "org/bouncycastle/operator/DefaultSignatureAlgorithmIdentifierFinder.h"
#include "org/bouncycastle/operator/OperatorCreationException.h"
#include "org/bouncycastle/operator/bc/BcDigestCalculatorProvider.h"
#include "org/bouncycastle/operator/jcajce/JcaContentVerifierProviderBuilder.h"
#include "org/bouncycastle/util/Selector.h"
#include "org/bouncycastle/util/Store.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/crypto/BcCryptoHelper must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardCryptoBcCryptoHelper () {
 @public
  EsGobJmulticardCryptoHelper_PaceChannelHelper *paceChannelHelper_;
}

/*!
 @brief Realiza una operaci&oacute;n 3DES.
 @param data Datos a cifrar o descifrar.
 @param key Clave 3DES.
 @param forEncryption Si se debe cifrar o descifrar.
 @return Datos cifrados o descifrados.
 @throw IOExceptionSi ocurre cualquier error durante el proceso.
 */
+ (IOSByteArray *)doDesedeWithByteArray:(IOSByteArray *)data
                          withByteArray:(IOSByteArray *)key
                            withBoolean:(jboolean)forEncryption;

+ (IOSByteArray *)prepareDesedeKeyWithByteArray:(IOSByteArray *)key;

+ (IOSByteArray *)doDesWithByteArray:(IOSByteArray *)data
                       withByteArray:(IOSByteArray *)key
                         withBoolean:(jboolean)forEncryption;

+ (IOSByteArray *)doRsaWithByteArray:(IOSByteArray *)data
    withJavaSecurityInterfacesRSAKey:(id<JavaSecurityInterfacesRSAKey>)key
                         withBoolean:(jboolean)forEncryption;

/*!
 @brief Encripta un &uacute;nico bloque usando AES.
 @param key Clave AES.
 @param dataBlock Bloque a crifrar.
 @return Bloque cifrado.
 */
+ (IOSByteArray *)aesEncryptSingleBlockWithByteArray:(IOSByteArray *)key
                                       withByteArray:(IOSByteArray *)dataBlock;

+ (IOSByteArray *)doAesWithByteArray:(IOSByteArray *)data
                       withByteArray:(IOSByteArray *)iv
                       withByteArray:(IOSByteArray *)aesKey
withOrgBouncycastleCryptoPaddingsBlockCipherPadding:(id<OrgBouncycastleCryptoPaddingsBlockCipherPadding>)padding
                         withBoolean:(jboolean)forEncryption;

/*!
 @brief Convierte un <code>Octet String</code> de ASN&#46;1 en un entero
  (seg&uacute;n <i>BSI TR 03111</i> Secci&oacute;n 3&#46;1&#46;2).
 @param bytes Octet String de ASN &#46; 1.
 @return Entero (siempre positivo).
 */
+ (JavaMathBigInteger *)os2iWithByteArray:(IOSByteArray *)bytes;

/*!
 @brief Convierte un <code>Octet String</code> de ASN&#46;1 en un entero
  (seg&uacute;n <i>BSI TR 03111</i> Secci&oacute;n 3&#46;1&#46;2).
 @param bytes <code> Octet String </code>  de ASN &#46; 1.
 @param offset Desplazamiento (posici &oacute; n de inicio).
 @param length Longitud del  <code> Octet String </code>
  .
 @return Entero (siempre positivo).
 */
+ (JavaMathBigInteger *)os2iWithByteArray:(IOSByteArray *)bytes
                                  withInt:(jint)offset
                                  withInt:(jint)length;

+ (JavaMathBigInteger *)computeAffineYWithJavaMathBigInteger:(JavaMathBigInteger *)affineX
                         withJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)params;

+ (OrgBouncycastleMathEcECCurve *)toBouncyCastleECCurveWithJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)params;

+ (JavaMathBigInteger *)getPrimeWithJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)params;

+ (JavaSecuritySpecECParameterSpec *)mapNonceGmWithEcdhWithJavaMathBigInteger:(JavaMathBigInteger *)nonceS
                                                  withJavaSecuritySpecECPoint:(JavaSecuritySpecECPoint *)sharedSecretPointH
                                          withJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)params;

+ (JavaSecuritySpecECPoint *)multiplyWithJavaMathBigInteger:(JavaMathBigInteger *)s
                                withJavaSecuritySpecECPoint:(JavaSecuritySpecECPoint *)point
                        withJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)params;

+ (JavaSecuritySpecECPoint *)fromBouncyCastleECPointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)point;

+ (JavaSecuritySpecECPoint *)addWithJavaSecuritySpecECPoint:(JavaSecuritySpecECPoint *)x
                                withJavaSecuritySpecECPoint:(JavaSecuritySpecECPoint *)y
                        withJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)params;

+ (OrgBouncycastleMathEcECPoint *)toBouncyCastleECPointWithJavaSecuritySpecECPoint:(JavaSecuritySpecECPoint *)point
                                               withJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)params;

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardCryptoBcCryptoHelper, paceChannelHelper_, EsGobJmulticardCryptoHelper_PaceChannelHelper *)

/*!
 @brief <i>Logger</i> por defecto.
 */
inline JavaUtilLoggingLogger *EsGobJmulticardCryptoBcCryptoHelper_get_LOGGER(void);
static JavaUtilLoggingLogger *EsGobJmulticardCryptoBcCryptoHelper_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCryptoBcCryptoHelper, LOGGER, JavaUtilLoggingLogger *)

__attribute__((unused)) static IOSByteArray *EsGobJmulticardCryptoBcCryptoHelper_doDesedeWithByteArray_withByteArray_withBoolean_(IOSByteArray *data, IOSByteArray *key, jboolean forEncryption);

__attribute__((unused)) static IOSByteArray *EsGobJmulticardCryptoBcCryptoHelper_prepareDesedeKeyWithByteArray_(IOSByteArray *key);

__attribute__((unused)) static IOSByteArray *EsGobJmulticardCryptoBcCryptoHelper_doDesWithByteArray_withByteArray_withBoolean_(IOSByteArray *data, IOSByteArray *key, jboolean forEncryption);

__attribute__((unused)) static IOSByteArray *EsGobJmulticardCryptoBcCryptoHelper_doRsaWithByteArray_withJavaSecurityInterfacesRSAKey_withBoolean_(IOSByteArray *data, id<JavaSecurityInterfacesRSAKey> key, jboolean forEncryption);

__attribute__((unused)) static IOSByteArray *EsGobJmulticardCryptoBcCryptoHelper_aesEncryptSingleBlockWithByteArray_withByteArray_(IOSByteArray *key, IOSByteArray *dataBlock);

__attribute__((unused)) static IOSByteArray *EsGobJmulticardCryptoBcCryptoHelper_doAesWithByteArray_withByteArray_withByteArray_withOrgBouncycastleCryptoPaddingsBlockCipherPadding_withBoolean_(IOSByteArray *data, IOSByteArray *iv, IOSByteArray *aesKey, id<OrgBouncycastleCryptoPaddingsBlockCipherPadding> padding, jboolean forEncryption);

__attribute__((unused)) static JavaMathBigInteger *EsGobJmulticardCryptoBcCryptoHelper_os2iWithByteArray_(IOSByteArray *bytes);

__attribute__((unused)) static JavaMathBigInteger *EsGobJmulticardCryptoBcCryptoHelper_os2iWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint offset, jint length);

__attribute__((unused)) static JavaMathBigInteger *EsGobJmulticardCryptoBcCryptoHelper_computeAffineYWithJavaMathBigInteger_withJavaSecuritySpecECParameterSpec_(JavaMathBigInteger *affineX, JavaSecuritySpecECParameterSpec *params);

__attribute__((unused)) static OrgBouncycastleMathEcECCurve *EsGobJmulticardCryptoBcCryptoHelper_toBouncyCastleECCurveWithJavaSecuritySpecECParameterSpec_(JavaSecuritySpecECParameterSpec *params);

__attribute__((unused)) static JavaMathBigInteger *EsGobJmulticardCryptoBcCryptoHelper_getPrimeWithJavaSecuritySpecECParameterSpec_(JavaSecuritySpecECParameterSpec *params);

__attribute__((unused)) static JavaSecuritySpecECParameterSpec *EsGobJmulticardCryptoBcCryptoHelper_mapNonceGmWithEcdhWithJavaMathBigInteger_withJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(JavaMathBigInteger *nonceS, JavaSecuritySpecECPoint *sharedSecretPointH, JavaSecuritySpecECParameterSpec *params);

__attribute__((unused)) static JavaSecuritySpecECPoint *EsGobJmulticardCryptoBcCryptoHelper_multiplyWithJavaMathBigInteger_withJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(JavaMathBigInteger *s, JavaSecuritySpecECPoint *point, JavaSecuritySpecECParameterSpec *params);

__attribute__((unused)) static JavaSecuritySpecECPoint *EsGobJmulticardCryptoBcCryptoHelper_fromBouncyCastleECPointWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECPoint *point);

__attribute__((unused)) static JavaSecuritySpecECPoint *EsGobJmulticardCryptoBcCryptoHelper_addWithJavaSecuritySpecECPoint_withJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(JavaSecuritySpecECPoint *x, JavaSecuritySpecECPoint *y, JavaSecuritySpecECParameterSpec *params);

__attribute__((unused)) static OrgBouncycastleMathEcECPoint *EsGobJmulticardCryptoBcCryptoHelper_toBouncyCastleECPointWithJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(JavaSecuritySpecECPoint *point, JavaSecuritySpecECParameterSpec *params);

/*!
 @brief Selector interno para la lectura de los certificados del firmante del SOD.
 */
@interface EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector : NSObject < OrgBouncycastleUtilSelector > {
 @public
  OrgBouncycastleCmsSignerId *signerId_;
}

- (instancetype)initWithOrgBouncycastleCmsSignerId:(OrgBouncycastleCmsSignerId *)sid;

- (jboolean)matchWithId:(OrgBouncycastleCertX509CertificateHolder *)o;

- (id)java_clone;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector)

J2OBJC_FIELD_SETTER(EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector, signerId_, OrgBouncycastleCmsSignerId *)

__attribute__((unused)) static void EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector_initWithOrgBouncycastleCmsSignerId_(EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector *self, OrgBouncycastleCmsSignerId *sid);

__attribute__((unused)) static EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector *new_EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector_initWithOrgBouncycastleCmsSignerId_(OrgBouncycastleCmsSignerId *sid) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector *create_EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector_initWithOrgBouncycastleCmsSignerId_(OrgBouncycastleCmsSignerId *sid);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector)

@interface EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey () {
 @public
  IOSByteArray *keyBytes_;
  JavaMathBigInteger *modulus_;
  JavaMathBigInteger *exponent_;
}

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey, keyBytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey, modulus_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey, exponent_, JavaMathBigInteger *)

inline jlong EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey_get_serialVersionUID(void);
#define EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey_serialVersionUID -1691684007756690866LL
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey, serialVersionUID, jlong)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/crypto/BcCryptoHelper.java"

J2OBJC_INITIALIZED_DEFN(EsGobJmulticardCryptoBcCryptoHelper)


#line 88
@implementation EsGobJmulticardCryptoBcCryptoHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 88
- (instancetype)init {
  EsGobJmulticardCryptoBcCryptoHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 95
- (IOSByteArray *)digestWithEsGobJmulticardDigestAlgorithm:(EsGobJmulticardDigestAlgorithm *)algorithm
                                             withByteArray:(IOSByteArray *)data {
  if (algorithm == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El algoritmo de huella digital no puede ser nulo");
  }
  if (data == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Los datos para realizar la huella digital no pueden ser nulos");
  }
  IOSByteArray *out;
  {
    
#line 106
    OrgBouncycastleCryptoDigestsSHA512Digest *digest512;
    
#line 112
    OrgBouncycastleCryptoDigestsSHA384Digest *digest384;
    
#line 118
    OrgBouncycastleCryptoDigestsSHA256Digest *digest256;
    
#line 124
    OrgBouncycastleCryptoDigestsSHA1Digest *digest;
    
#line 104
    switch ([algorithm ordinal]) {
      case EsGobJmulticardDigestAlgorithm_Enum_SHA512:
      digest512 = new_OrgBouncycastleCryptoDigestsSHA512Digest_init();
      [digest512 updateWithByteArray:data withInt:0 withInt:data->size_];
      out = [IOSByteArray newArrayWithLength:[digest512 getDigestSize]];
      [digest512 doFinalWithByteArray:out withInt:0];
      break;
      case EsGobJmulticardDigestAlgorithm_Enum_SHA384:
      digest384 = new_OrgBouncycastleCryptoDigestsSHA384Digest_init();
      [digest384 updateWithByteArray:data withInt:0 withInt:data->size_];
      out = [IOSByteArray newArrayWithLength:[digest384 getDigestSize]];
      [digest384 doFinalWithByteArray:out withInt:0];
      break;
      case EsGobJmulticardDigestAlgorithm_Enum_SHA256:
      digest256 = new_OrgBouncycastleCryptoDigestsSHA256Digest_init();
      [digest256 updateWithByteArray:data withInt:0 withInt:data->size_];
      out = [IOSByteArray newArrayWithLength:[digest256 getDigestSize]];
      [digest256 doFinalWithByteArray:out withInt:0];
      break;
      case EsGobJmulticardDigestAlgorithm_Enum_SHA1:
      digest = new_OrgBouncycastleCryptoDigestsSHA1Digest_init();
      [digest updateWithByteArray:data withInt:0 withInt:data->size_];
      out = [IOSByteArray newArrayWithLength:[digest getDigestSize]];
      [digest doFinalWithByteArray:out withInt:0];
      break;
      default:
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"No se soporta el algoritmo de huella digital indicado: ", algorithm));
    }
  }
  
#line 132
  return out;
}


#line 141
+ (IOSByteArray *)doDesedeWithByteArray:(IOSByteArray *)data
                          withByteArray:(IOSByteArray *)key
                            withBoolean:(jboolean)forEncryption {
  return EsGobJmulticardCryptoBcCryptoHelper_doDesedeWithByteArray_withByteArray_withBoolean_(data, key, forEncryption);
}


#line 164
- (IOSByteArray *)desedeEncryptWithByteArray:(IOSByteArray *)data
                               withByteArray:(IOSByteArray *)rawKey {
  return EsGobJmulticardCryptoBcCryptoHelper_doDesedeWithByteArray_withByteArray_withBoolean_(data, rawKey, true);
}

- (IOSByteArray *)desedeDecryptWithByteArray:(IOSByteArray *)data
                               withByteArray:(IOSByteArray *)rawKey {
  return EsGobJmulticardCryptoBcCryptoHelper_doDesedeWithByteArray_withByteArray_withBoolean_(data, rawKey, false);
}

+ (IOSByteArray *)prepareDesedeKeyWithByteArray:(IOSByteArray *)key {
  return EsGobJmulticardCryptoBcCryptoHelper_prepareDesedeKeyWithByteArray_(key);
}


#line 192
+ (IOSByteArray *)doDesWithByteArray:(IOSByteArray *)data
                       withByteArray:(IOSByteArray *)key
                         withBoolean:(jboolean)forEncryption {
  return EsGobJmulticardCryptoBcCryptoHelper_doDesWithByteArray_withByteArray_withBoolean_(data, key, forEncryption);
}


#line 211
- (IOSByteArray *)desEncryptWithByteArray:(IOSByteArray *)data
                            withByteArray:(IOSByteArray *)key {
  return EsGobJmulticardCryptoBcCryptoHelper_doDesWithByteArray_withByteArray_withBoolean_(data, key, true);
}

- (IOSByteArray *)desDecryptWithByteArray:(IOSByteArray *)data
                            withByteArray:(IOSByteArray *)key {
  return EsGobJmulticardCryptoBcCryptoHelper_doDesWithByteArray_withByteArray_withBoolean_(data, key, false);
}

+ (IOSByteArray *)doRsaWithByteArray:(IOSByteArray *)data
    withJavaSecurityInterfacesRSAKey:(id<JavaSecurityInterfacesRSAKey>)key
                         withBoolean:(jboolean)forEncryption {
  return EsGobJmulticardCryptoBcCryptoHelper_doRsaWithByteArray_withJavaSecurityInterfacesRSAKey_withBoolean_(data, key, forEncryption);
}


#line 245
- (IOSByteArray *)rsaDecryptWithByteArray:(IOSByteArray *)cipheredData
         withJavaSecurityInterfacesRSAKey:(id<JavaSecurityInterfacesRSAKey>)key {
  return EsGobJmulticardCryptoBcCryptoHelper_doRsaWithByteArray_withJavaSecurityInterfacesRSAKey_withBoolean_(cipheredData, key, false);
}

- (IOSByteArray *)rsaEncryptWithByteArray:(IOSByteArray *)data
         withJavaSecurityInterfacesRSAKey:(id<JavaSecurityInterfacesRSAKey>)key {
  return EsGobJmulticardCryptoBcCryptoHelper_doRsaWithByteArray_withJavaSecurityInterfacesRSAKey_withBoolean_(data, key, true);
}

- (IOSByteArray *)generateRandomBytesWithInt:(jint)numBytes {
  
#line 257
  id<OrgBouncycastleCryptoPrngRandomGenerator> sr = new_OrgBouncycastleCryptoPrngDigestRandomGenerator_initWithOrgBouncycastleCryptoDigest_(new_OrgBouncycastleCryptoDigestsSHA1Digest_init());
  IOSByteArray *ret = [IOSByteArray newArrayWithLength:numBytes];
  [sr nextBytesWithByteArray:ret];
  return ret;
}


#line 267
+ (IOSByteArray *)aesEncryptSingleBlockWithByteArray:(IOSByteArray *)key
                                       withByteArray:(IOSByteArray *)dataBlock {
  return EsGobJmulticardCryptoBcCryptoHelper_aesEncryptSingleBlockWithByteArray_withByteArray_(key, dataBlock);
}


#line 276
+ (IOSByteArray *)doAesWithByteArray:(IOSByteArray *)data
                       withByteArray:(IOSByteArray *)iv
                       withByteArray:(IOSByteArray *)aesKey
withOrgBouncycastleCryptoPaddingsBlockCipherPadding:(id<OrgBouncycastleCryptoPaddingsBlockCipherPadding>)padding
                         withBoolean:(jboolean)forEncryption {
  return EsGobJmulticardCryptoBcCryptoHelper_doAesWithByteArray_withByteArray_withByteArray_withOrgBouncycastleCryptoPaddingsBlockCipherPadding_withBoolean_(data, iv, aesKey, padding, forEncryption);
}


#line 340
- (IOSByteArray *)aesDecryptWithByteArray:(IOSByteArray *)data
                            withByteArray:(IOSByteArray *)iv
                            withByteArray:(IOSByteArray *)key
withEsGobJmulticardCryptoHelper_BlockMode:(EsGobJmulticardCryptoHelper_BlockMode *)blockMode
  withEsGobJmulticardCryptoHelper_Padding:(EsGobJmulticardCryptoHelper_Padding *)padding {
  
#line 346
  if (data == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Los datos a cifrar no pueden ser nulos");
  }
  if (key == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"La clave de cifrado no puede ser nula");
  }
  id<OrgBouncycastleCryptoPaddingsBlockCipherPadding> bcPadding;
  switch ([padding ordinal]) {
    case EsGobJmulticardCryptoHelper_Padding_Enum_NOPADDING:
    bcPadding = nil;
    break;
    case EsGobJmulticardCryptoHelper_Padding_Enum_ISO7816_4PADDING:
    bcPadding = new_OrgBouncycastleCryptoPaddingsISO7816d4Padding_init();
    break;
    default:
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Algoritmo de relleno no soportado para AES: ", padding));
  }
  @try {
    return EsGobJmulticardCryptoBcCryptoHelper_doAesWithByteArray_withByteArray_withByteArray_withOrgBouncycastleCryptoPaddingsBlockCipherPadding_withBoolean_(data, iv, key, bcPadding, false);
  }
  @catch (OrgBouncycastleCryptoDataLengthException *e) {
    
#line 369
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Error en el descifrado AES", e);
  }
  @catch (
#line 366
  JavaLangIllegalStateException *e) {
    
#line 369
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Error en el descifrado AES", e);
  }
  @catch (
#line 366
  OrgBouncycastleCryptoInvalidCipherTextException *e) {
    
#line 369
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Error en el descifrado AES", e);
  }
}


#line 373
- (IOSByteArray *)aesEncryptWithByteArray:(IOSByteArray *)data
                            withByteArray:(IOSByteArray *)iv
                            withByteArray:(IOSByteArray *)key
withEsGobJmulticardCryptoHelper_BlockMode:(EsGobJmulticardCryptoHelper_BlockMode *)blockMode
  withEsGobJmulticardCryptoHelper_Padding:(EsGobJmulticardCryptoHelper_Padding *)padding {
  
#line 379
  if (data == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Los datos a cifrar no pueden ser nulos");
  }
  if (key == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"La clave de cifrado no puede ser nula");
  }
  
#line 388
  if ([((EsGobJmulticardCryptoHelper_BlockMode *) nil_chk(JreLoadEnum(EsGobJmulticardCryptoHelper_BlockMode, ECB))) isEqual:blockMode] && [((EsGobJmulticardCryptoHelper_Padding *) nil_chk(JreLoadEnum(EsGobJmulticardCryptoHelper_Padding, NOPADDING))) isEqual:padding] && data->size_ == 16) {
    return EsGobJmulticardCryptoBcCryptoHelper_aesEncryptSingleBlockWithByteArray_withByteArray_(key, data);
  }
  
#line 392
  id<OrgBouncycastleCryptoPaddingsBlockCipherPadding> bcPadding;
  switch ([padding ordinal]) {
    case EsGobJmulticardCryptoHelper_Padding_Enum_NOPADDING:
    bcPadding = nil;
    break;
    case EsGobJmulticardCryptoHelper_Padding_Enum_ISO7816_4PADDING:
    bcPadding = new_OrgBouncycastleCryptoPaddingsISO7816d4Padding_init();
    break;
    default:
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Algoritmo de relleno no soportado para AES: ", padding));
  }
  @try {
    return EsGobJmulticardCryptoBcCryptoHelper_doAesWithByteArray_withByteArray_withByteArray_withOrgBouncycastleCryptoPaddingsBlockCipherPadding_withBoolean_(data, iv, key, bcPadding, true);
  }
  @catch (OrgBouncycastleCryptoDataLengthException *e) {
    
#line 410
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Error en el cifrado AES", e);
  }
  @catch (
#line 406
  JavaLangIllegalStateException *e) {
    
#line 410
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Error en el cifrado AES", e);
  }
  @catch (
#line 406
  OrgBouncycastleCryptoInvalidCipherTextException *e) {
    
#line 410
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Error en el cifrado AES", e);
  }
  @catch (
#line 406
  JavaIoIOException *e) {
    
#line 410
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Error en el cifrado AES", e);
  }
}


#line 414
- (JavaSecurityKeyPair *)generateEcKeyPairWithEsGobJmulticardCryptoHelper_EcCurve:(EsGobJmulticardCryptoHelper_EcCurve *)curveName {
  
#line 417
  JavaSecurityKeyPairGenerator *kpg = new_OrgBouncycastleJcajceProviderAsymmetricEcKeyPairGeneratorSpi_ECDH_init();
  id<JavaSecuritySpecAlgorithmParameterSpec> parameterSpec = new_OrgBouncycastleJceSpecECNamedCurveGenParameterSpec_initWithNSString_(
#line 419
  [((EsGobJmulticardCryptoHelper_EcCurve *) nil_chk(curveName)) description]);
  
#line 421
  [kpg initialize__WithJavaSecuritySpecAlgorithmParameterSpec:parameterSpec];
  return [kpg generateKeyPair];
}


#line 425
- (IOSByteArray *)doAesCmacWithByteArray:(IOSByteArray *)data
                           withByteArray:(IOSByteArray *)key {
  id<OrgBouncycastleCryptoBlockCipher> cipher = OrgBouncycastleCryptoEnginesAESEngine_newInstance();
  id<OrgBouncycastleCryptoMac> mac = new_OrgBouncycastleCryptoMacsCMac_initWithOrgBouncycastleCryptoBlockCipher_withInt_(cipher, 64);
  OrgBouncycastleCryptoParamsKeyParameter *keyP = new_OrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(key);
  [mac init__WithOrgBouncycastleCryptoCipherParameters:keyP];
  [mac updateWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_];
  IOSByteArray *out = [IOSByteArray newArrayWithLength:[mac getMacSize]];
  [mac doFinalWithByteArray:out withInt:0];
  return out;
}

- (id<JavaSecuritySpecAlgorithmParameterSpec>)getEcPointWithByteArray:(IOSByteArray *)nonceS
                                                        withByteArray:(IOSByteArray *)sharedSecretH
                              withEsGobJmulticardCryptoHelper_EcCurve:(EsGobJmulticardCryptoHelper_EcCurve *)curveName {
  
#line 441
  id<JavaSecuritySpecAlgorithmParameterSpec> ecParams = OrgBouncycastleJceECNamedCurveTable_getParameterSpecWithNSString_([((EsGobJmulticardCryptoHelper_EcCurve *) nil_chk(curveName)) description]);
  JavaMathBigInteger *affineX = EsGobJmulticardCryptoBcCryptoHelper_os2iWithByteArray_(sharedSecretH);
  JavaMathBigInteger *affineY = EsGobJmulticardCryptoBcCryptoHelper_computeAffineYWithJavaMathBigInteger_withJavaSecuritySpecECParameterSpec_(affineX, (JavaSecuritySpecECParameterSpec *) cast_chk(ecParams, [JavaSecuritySpecECParameterSpec class]));
  JavaSecuritySpecECPoint *sharedSecretPointH = new_JavaSecuritySpecECPoint_initWithJavaMathBigInteger_withJavaMathBigInteger_(affineX, affineY);
  return EsGobJmulticardCryptoBcCryptoHelper_mapNonceGmWithEcdhWithJavaMathBigInteger_withJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(EsGobJmulticardCryptoBcCryptoHelper_os2iWithByteArray_(nonceS), sharedSecretPointH, (JavaSecuritySpecECParameterSpec *) cast_chk(ecParams, [JavaSecuritySpecECParameterSpec class]));
}


#line 452
+ (JavaMathBigInteger *)os2iWithByteArray:(IOSByteArray *)bytes {
  return EsGobJmulticardCryptoBcCryptoHelper_os2iWithByteArray_(bytes);
}


#line 465
+ (JavaMathBigInteger *)os2iWithByteArray:(IOSByteArray *)bytes
                                  withInt:(jint)offset
                                  withInt:(jint)length {
  return EsGobJmulticardCryptoBcCryptoHelper_os2iWithByteArray_withInt_withInt_(bytes, offset, length);
}


#line 478
+ (JavaMathBigInteger *)computeAffineYWithJavaMathBigInteger:(JavaMathBigInteger *)affineX
                         withJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)params {
  return EsGobJmulticardCryptoBcCryptoHelper_computeAffineYWithJavaMathBigInteger_withJavaSecuritySpecECParameterSpec_(affineX, params);
}


#line 487
+ (OrgBouncycastleMathEcECCurve *)toBouncyCastleECCurveWithJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)params {
  return EsGobJmulticardCryptoBcCryptoHelper_toBouncyCastleECCurveWithJavaSecuritySpecECParameterSpec_(params);
}


#line 503
+ (JavaMathBigInteger *)getPrimeWithJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)params {
  return EsGobJmulticardCryptoBcCryptoHelper_getPrimeWithJavaSecuritySpecECParameterSpec_(params);
}


#line 519
+ (JavaSecuritySpecECParameterSpec *)mapNonceGmWithEcdhWithJavaMathBigInteger:(JavaMathBigInteger *)nonceS
                                                  withJavaSecuritySpecECPoint:(JavaSecuritySpecECPoint *)sharedSecretPointH
                                          withJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)params {
  return EsGobJmulticardCryptoBcCryptoHelper_mapNonceGmWithEcdhWithJavaMathBigInteger_withJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(nonceS, sharedSecretPointH, params);
}


#line 547
+ (JavaSecuritySpecECPoint *)multiplyWithJavaMathBigInteger:(JavaMathBigInteger *)s
                                withJavaSecuritySpecECPoint:(JavaSecuritySpecECPoint *)point
                        withJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)params {
  return EsGobJmulticardCryptoBcCryptoHelper_multiplyWithJavaMathBigInteger_withJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(s, point, params);
}


#line 555
+ (JavaSecuritySpecECPoint *)fromBouncyCastleECPointWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)point {
  return EsGobJmulticardCryptoBcCryptoHelper_fromBouncyCastleECPointWithOrgBouncycastleMathEcECPoint_(point);
}


#line 566
+ (JavaSecuritySpecECPoint *)addWithJavaSecuritySpecECPoint:(JavaSecuritySpecECPoint *)x
                                withJavaSecuritySpecECPoint:(JavaSecuritySpecECPoint *)y
                        withJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)params {
  return EsGobJmulticardCryptoBcCryptoHelper_addWithJavaSecuritySpecECPoint_withJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(x, y, params);
}


#line 573
+ (OrgBouncycastleMathEcECPoint *)toBouncyCastleECPointWithJavaSecuritySpecECPoint:(JavaSecuritySpecECPoint *)point
                                               withJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)params {
  return EsGobJmulticardCryptoBcCryptoHelper_toBouncyCastleECPointWithJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(point, params);
}


#line 579
- (IOSObjectArray *)validateCmsSignatureWithByteArray:(IOSByteArray *)signedDataBytes {
  
#line 583
  OrgBouncycastleCmsCMSSignedData *cmsSignedData;
  @try {
    cmsSignedData = new_OrgBouncycastleCmsCMSSignedData_initWithByteArray_(signedDataBytes);
  }
  @catch (OrgBouncycastleCmsCMSException *e2) {
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Los datos no son un SignedData de PKCS#7/CMS", e2);
  }
  id<OrgBouncycastleUtilStore> store = [((OrgBouncycastleCmsCMSSignedData *) nil_chk(cmsSignedData)) getCertificates];
  id<JavaUtilList> certChain = new_JavaUtilArrayList_init();
  for (OrgBouncycastleCmsSignerInformation * __strong si in nil_chk([((OrgBouncycastleCmsSignerInformationStore *) nil_chk([cmsSignedData getSignerInfos])) getSigners])) {
    id<JavaUtilIterator> certIt = [((id<JavaUtilCollection>) nil_chk([((id<OrgBouncycastleUtilStore>) nil_chk(store)) getMatchesWithOrgBouncycastleUtilSelector:new_EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector_initWithOrgBouncycastleCmsSignerId_(
#line 594
    [((OrgBouncycastleCmsSignerInformation *) nil_chk(si)) getSID])])) iterator];
    
#line 596
    JavaSecurityCertX509Certificate *cert;
    @try {
      cert = EsGobJmulticardCryptoHelper_generateCertificateWithByteArray_([((OrgBouncycastleCertX509CertificateHolder *) nil_chk([((id<JavaUtilIterator>) nil_chk(certIt)) next])) getEncoded]);
    }
    @catch (JavaIoIOException *e1) {
      @throw new_JavaSecurityCertCertificateException_initWithNSString_withJavaLangThrowable_(@"El SignedData contiene un certificado en formato incorrecto", e1);
    }
    @try {
      [((JavaSecurityCertX509Certificate *) nil_chk(cert)) checkValidity];
    }
    @catch (JavaSecurityCertCertificateExpiredException *e1) {
      @throw new_JavaSecurityCertCertificateException_initWithNSString_withJavaLangThrowable_(
#line 608
      @"El SignedData contiene un certificado fuera de su periodo temporal de validez", e1);
    }
    @catch (
#line 606
    JavaSecurityCertCertificateNotYetValidException *e1) {
      @throw new_JavaSecurityCertCertificateException_initWithNSString_withJavaLangThrowable_(
#line 608
      @"El SignedData contiene un certificado fuera de su periodo temporal de validez", e1);
    }
    
#line 611
    @try {
      if (
#line 613
      ![si verifyWithOrgBouncycastleCmsSignerInformationVerifier:new_OrgBouncycastleCmsSignerInformationVerifier_initWithOrgBouncycastleCmsCMSSignatureAlgorithmNameGenerator_withOrgBouncycastleOperatorSignatureAlgorithmIdentifierFinder_withOrgBouncycastleOperatorContentVerifierProvider_withOrgBouncycastleOperatorDigestCalculatorProvider_(new_OrgBouncycastleCmsDefaultCMSSignatureAlgorithmNameGenerator_init(), new_OrgBouncycastleOperatorDefaultSignatureAlgorithmIdentifierFinder_init(),
#line 617
      [((OrgBouncycastleOperatorJcajceJcaContentVerifierProviderBuilder *) nil_chk([new_OrgBouncycastleOperatorJcajceJcaContentVerifierProviderBuilder_init() setProviderWithJavaSecurityProvider:new_OrgBouncycastleJceProviderBouncyCastleProvider_init()])) buildWithJavaSecurityCertX509Certificate:cert], new_OrgBouncycastleOperatorBcBcDigestCalculatorProvider_init())]) {
        
#line 622
        @throw new_JavaSecuritySignatureException_initWithNSString_(@"Firma del SOD no valida");
      }
    }
    @catch (OrgBouncycastleOperatorOperatorCreationException *e) {
      @throw new_JavaSecuritySignatureException_initWithNSString_withJavaLangThrowable_(@"No se ha podido comprobar la firma del SOD", e);
    }
    @catch (
#line 625
    OrgBouncycastleCmsCMSException *e) {
      @throw new_JavaSecuritySignatureException_initWithNSString_withJavaLangThrowable_(@"No se ha podido comprobar la firma del SOD", e);
    }
    [certChain addWithId:cert];
  }
  return [certChain toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[certChain size] type:JavaSecurityCertX509Certificate_class_()]];
}


#line 656
- (IOSByteArray *)getCmsSignatureSignedContentWithByteArray:(IOSByteArray *)signedDataBytes {
  
#line 658
  OrgBouncycastleCmsCMSSignedData *cmsSignedData;
  @try {
    cmsSignedData = new_OrgBouncycastleCmsCMSSignedData_initWithByteArray_(signedDataBytes);
  }
  @catch (OrgBouncycastleCmsCMSException *e2) {
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Los datos no son un SignedData de PKCS#7/CMS", e2);
  }
  return (IOSByteArray *) cast_chk([((id<OrgBouncycastleCmsCMSTypedData>) nil_chk([((OrgBouncycastleCmsCMSSignedData *) nil_chk(cmsSignedData)) getSignedContent])) getContent], [IOSByteArray class]);
}


#line 668
- (EsGobJmulticardCryptoHelper_PaceChannelHelper *)getPaceChannelHelperWithEsGobJmulticardAsn1IcaoCardAccess:(EsGobJmulticardAsn1IcaoCardAccess *)cardAccess
                                                              withEsGobJmulticardApduIso7816fourPacePaceChat:(EsGobJmulticardApduIso7816fourPacePaceChat *)paceChat {
  
#line 671
  if (paceChannelHelper_ == nil) {
    paceChannelHelper_ = new_EsGobJmulticardCryptoBcPaceChannelHelper_initWithEsGobJmulticardCryptoHelper_withEsGobJmulticardAsn1IcaoCardAccess_withEsGobJmulticardApduIso7816fourPacePaceChat_(self, cardAccess, paceChat);
  }
  return paceChannelHelper_;
}


#line 677
- (id<JavaSecurityInterfacesRSAPublicKey>)getRsaPublicKeyWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  
#line 679
  if (cert == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El certificado del cual extraer la clave publica no puede ser nulo");
  }
  @try {
    return new_EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey_initWithByteArray_([((id<JavaSecurityPublicKey>) nil_chk([cert getPublicKey])) getEncoded]);
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(@"No se ha podido crear la clave publica a partir del certificado", e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0xa, 3, 4, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 6, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 7, 6, 2, -1, -1, -1 },
    { NULL, "[B", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 10, 4, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 6, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 12, 6, 2, -1, -1, -1 },
    { NULL, "[B", 0xa, 13, 14, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 15, 16, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 17, 16, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 20, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 21, 22, 23, -1, -1, -1 },
    { NULL, "[B", 0x1, 24, 25, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 26, 25, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPair;", 0x1, 27, 28, 29, -1, -1, -1 },
    { NULL, "[B", 0x1, 30, 6, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecAlgorithmParameterSpec;", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 33, 9, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 33, 34, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 35, 36, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECCurve;", 0xa, 37, 38, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 39, 38, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECParameterSpec;", 0xa, 40, 41, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECPoint;", 0xa, 42, 41, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECPoint;", 0xa, 43, 44, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECPoint;", 0xa, 45, 46, -1, -1, -1, -1 },
    { NULL, "LOrgBouncycastleMathEcECPoint;", 0xa, 47, 48, -1, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertX509Certificate;", 0x1, 49, 9, 50, -1, -1, -1 },
    { NULL, "[B", 0x1, 51, 9, 2, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCryptoHelper_PaceChannelHelper;", 0x1, 52, 53, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityInterfacesRSAPublicKey;", 0x1, 54, 55, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(digestWithEsGobJmulticardDigestAlgorithm:withByteArray:);
  methods[2].selector = @selector(doDesedeWithByteArray:withByteArray:withBoolean:);
  methods[3].selector = @selector(desedeEncryptWithByteArray:withByteArray:);
  methods[4].selector = @selector(desedeDecryptWithByteArray:withByteArray:);
  methods[5].selector = @selector(prepareDesedeKeyWithByteArray:);
  methods[6].selector = @selector(doDesWithByteArray:withByteArray:withBoolean:);
  methods[7].selector = @selector(desEncryptWithByteArray:withByteArray:);
  methods[8].selector = @selector(desDecryptWithByteArray:withByteArray:);
  methods[9].selector = @selector(doRsaWithByteArray:withJavaSecurityInterfacesRSAKey:withBoolean:);
  methods[10].selector = @selector(rsaDecryptWithByteArray:withJavaSecurityInterfacesRSAKey:);
  methods[11].selector = @selector(rsaEncryptWithByteArray:withJavaSecurityInterfacesRSAKey:);
  methods[12].selector = @selector(generateRandomBytesWithInt:);
  methods[13].selector = @selector(aesEncryptSingleBlockWithByteArray:withByteArray:);
  methods[14].selector = @selector(doAesWithByteArray:withByteArray:withByteArray:withOrgBouncycastleCryptoPaddingsBlockCipherPadding:withBoolean:);
  methods[15].selector = @selector(aesDecryptWithByteArray:withByteArray:withByteArray:withEsGobJmulticardCryptoHelper_BlockMode:withEsGobJmulticardCryptoHelper_Padding:);
  methods[16].selector = @selector(aesEncryptWithByteArray:withByteArray:withByteArray:withEsGobJmulticardCryptoHelper_BlockMode:withEsGobJmulticardCryptoHelper_Padding:);
  methods[17].selector = @selector(generateEcKeyPairWithEsGobJmulticardCryptoHelper_EcCurve:);
  methods[18].selector = @selector(doAesCmacWithByteArray:withByteArray:);
  methods[19].selector = @selector(getEcPointWithByteArray:withByteArray:withEsGobJmulticardCryptoHelper_EcCurve:);
  methods[20].selector = @selector(os2iWithByteArray:);
  methods[21].selector = @selector(os2iWithByteArray:withInt:withInt:);
  methods[22].selector = @selector(computeAffineYWithJavaMathBigInteger:withJavaSecuritySpecECParameterSpec:);
  methods[23].selector = @selector(toBouncyCastleECCurveWithJavaSecuritySpecECParameterSpec:);
  methods[24].selector = @selector(getPrimeWithJavaSecuritySpecECParameterSpec:);
  methods[25].selector = @selector(mapNonceGmWithEcdhWithJavaMathBigInteger:withJavaSecuritySpecECPoint:withJavaSecuritySpecECParameterSpec:);
  methods[26].selector = @selector(multiplyWithJavaMathBigInteger:withJavaSecuritySpecECPoint:withJavaSecuritySpecECParameterSpec:);
  methods[27].selector = @selector(fromBouncyCastleECPointWithOrgBouncycastleMathEcECPoint:);
  methods[28].selector = @selector(addWithJavaSecuritySpecECPoint:withJavaSecuritySpecECPoint:withJavaSecuritySpecECParameterSpec:);
  methods[29].selector = @selector(toBouncyCastleECPointWithJavaSecuritySpecECPoint:withJavaSecuritySpecECParameterSpec:);
  methods[30].selector = @selector(validateCmsSignatureWithByteArray:);
  methods[31].selector = @selector(getCmsSignatureSignedContentWithByteArray:);
  methods[32].selector = @selector(getPaceChannelHelperWithEsGobJmulticardAsn1IcaoCardAccess:withEsGobJmulticardApduIso7816fourPacePaceChat:);
  methods[33].selector = @selector(getRsaPublicKeyWithJavaSecurityCertX509Certificate:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 56, -1, -1 },
    { "paceChannelHelper_", "LEsGobJmulticardCryptoHelper_PaceChannelHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "digest", "LEsGobJmulticardDigestAlgorithm;[B", "LJavaIoIOException;", "doDesede", "[B[BZ", "desedeEncrypt", "[B[B", "desedeDecrypt", "prepareDesedeKey", "[B", "doDes", "desEncrypt", "desDecrypt", "doRsa", "[BLJavaSecurityInterfacesRSAKey;Z", "rsaDecrypt", "[BLJavaSecurityInterfacesRSAKey;", "rsaEncrypt", "generateRandomBytes", "I", "aesEncryptSingleBlock", "doAes", "[B[B[BLOrgBouncycastleCryptoPaddingsBlockCipherPadding;Z", "LJavaIoIOException;LOrgBouncycastleCryptoInvalidCipherTextException;", "aesDecrypt", "[B[B[BLEsGobJmulticardCryptoHelper_BlockMode;LEsGobJmulticardCryptoHelper_Padding;", "aesEncrypt", "generateEcKeyPair", "LEsGobJmulticardCryptoHelper_EcCurve;", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidAlgorithmParameterException;", "doAesCmac", "getEcPoint", "[B[BLEsGobJmulticardCryptoHelper_EcCurve;", "os2i", "[BII", "computeAffineY", "LJavaMathBigInteger;LJavaSecuritySpecECParameterSpec;", "toBouncyCastleECCurve", "LJavaSecuritySpecECParameterSpec;", "getPrime", "mapNonceGmWithEcdh", "LJavaMathBigInteger;LJavaSecuritySpecECPoint;LJavaSecuritySpecECParameterSpec;", "multiply", "fromBouncyCastleECPoint", "LOrgBouncycastleMathEcECPoint;", "add", "LJavaSecuritySpecECPoint;LJavaSecuritySpecECPoint;LJavaSecuritySpecECParameterSpec;", "toBouncyCastleECPoint", "LJavaSecuritySpecECPoint;LJavaSecuritySpecECParameterSpec;", "validateCmsSignature", "LJavaSecuritySignatureException;LJavaIoIOException;LJavaSecurityCertCertificateException;", "getCmsSignatureSignedContent", "getPaceChannelHelper", "LEsGobJmulticardAsn1IcaoCardAccess;LEsGobJmulticardApduIso7816fourPacePaceChat;", "getRsaPublicKey", "LJavaSecurityCertX509Certificate;", &EsGobJmulticardCryptoBcCryptoHelper_LOGGER, "LEsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector;LEsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey;" };
  static const J2ObjcClassInfo _EsGobJmulticardCryptoBcCryptoHelper = { "BcCryptoHelper", "es.gob.jmulticard.crypto", ptrTable, methods, fields, 7, 0x11, 34, 2, -1, 57, -1, -1, -1 };
  return &_EsGobJmulticardCryptoBcCryptoHelper;
}

+ (void)initialize {
  if (self == [EsGobJmulticardCryptoBcCryptoHelper class]) {
    EsGobJmulticardCryptoBcCryptoHelper_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 91
    [EsGobJmulticardCryptoBcCryptoHelper_class_() getName]);
    J2OBJC_SET_INITIALIZED(EsGobJmulticardCryptoBcCryptoHelper)
  }
}

@end


#line 88
void EsGobJmulticardCryptoBcCryptoHelper_init(EsGobJmulticardCryptoBcCryptoHelper *self) {
  EsGobJmulticardCryptoHelper_init(self);
  self->paceChannelHelper_ =
#line 93
  nil;
}


#line 88
EsGobJmulticardCryptoBcCryptoHelper *new_EsGobJmulticardCryptoBcCryptoHelper_init() {
  J2OBJC_NEW_IMPL(EsGobJmulticardCryptoBcCryptoHelper, init)
}


#line 88
EsGobJmulticardCryptoBcCryptoHelper *create_EsGobJmulticardCryptoBcCryptoHelper_init() {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCryptoBcCryptoHelper, init)
}


#line 141
IOSByteArray *EsGobJmulticardCryptoBcCryptoHelper_doDesedeWithByteArray_withByteArray_withBoolean_(IOSByteArray *data, IOSByteArray *key, jboolean forEncryption) {
  EsGobJmulticardCryptoBcCryptoHelper_initialize();
  
#line 144
  OrgBouncycastleCryptoBufferedBlockCipher *cipher = new_OrgBouncycastleCryptoDefaultBufferedBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(OrgBouncycastleCryptoModesCBCBlockCipher_newInstanceWithOrgBouncycastleCryptoBlockCipher_(new_OrgBouncycastleCryptoEnginesDESedeEngine_init()));
  
#line 147
  [cipher init__WithBoolean:
#line 148
  forEncryption withOrgBouncycastleCryptoCipherParameters:new_OrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(EsGobJmulticardCryptoBcCryptoHelper_prepareDesedeKeyWithByteArray_(
#line 149
  key))];
  
#line 151
  IOSByteArray *result = [IOSByteArray newArrayWithLength:[cipher getOutputSizeWithInt:((IOSByteArray *) nil_chk(data))->size_]];
  jint tam = [cipher processBytesWithByteArray:data withInt:0 withInt:data->size_ withByteArray:result withInt:0];
  @try {
    [cipher doFinalWithByteArray:result withInt:tam];
  }
  @catch (OrgBouncycastleCryptoDataLengthException *e) {
    
#line 159
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Error en el cifrado o descifrado 3DES", e);
  }
  @catch (
#line 156
  JavaLangIllegalStateException *e) {
    
#line 159
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Error en el cifrado o descifrado 3DES", e);
  }
  @catch (
#line 156
  OrgBouncycastleCryptoInvalidCipherTextException *e) {
    
#line 159
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Error en el cifrado o descifrado 3DES", e);
  }
  return result;
}


#line 174
IOSByteArray *EsGobJmulticardCryptoBcCryptoHelper_prepareDesedeKeyWithByteArray_(IOSByteArray *key) {
  EsGobJmulticardCryptoBcCryptoHelper_initialize();
  
#line 175
  if (key == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"La clave 3DES no puede ser nula");
  }
  if (key->size_ == 24) {
    return key;
  }
  if (key->size_ == 16) {
    IOSByteArray *newKey = [IOSByteArray newArrayWithLength:24];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, newKey, 0, 16);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, newKey, 16, 8);
    return newKey;
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Longitud de clave invalida, se esperaba 16 o 24, pero se indico ",
#line 188
  key->size_));
}


#line 192
IOSByteArray *EsGobJmulticardCryptoBcCryptoHelper_doDesWithByteArray_withByteArray_withBoolean_(IOSByteArray *data, IOSByteArray *key, jboolean forEncryption) {
  EsGobJmulticardCryptoBcCryptoHelper_initialize();
  
#line 195
  id<OrgBouncycastleCryptoBlockCipher> engine = new_OrgBouncycastleCryptoEnginesDESEngine_init();
  OrgBouncycastleCryptoBufferedBlockCipher *cipher = new_OrgBouncycastleCryptoDefaultBufferedBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(engine);
  [cipher init__WithBoolean:forEncryption withOrgBouncycastleCryptoCipherParameters:new_OrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(key)];
  IOSByteArray *cipherText = [IOSByteArray newArrayWithLength:[cipher getOutputSizeWithInt:((IOSByteArray *) nil_chk(data))->size_]];
  jint outputLen = [cipher processBytesWithByteArray:data withInt:0 withInt:data->size_ withByteArray:cipherText withInt:0];
  @try {
    [cipher doFinalWithByteArray:cipherText withInt:outputLen];
  }
  @catch (OrgBouncycastleCryptoDataLengthException *e) {
    
#line 206
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Error el el cifrado / descifrado DES", e);
  }
  @catch (
#line 203
  JavaLangIllegalStateException *e) {
    
#line 206
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Error el el cifrado / descifrado DES", e);
  }
  @catch (
#line 203
  OrgBouncycastleCryptoInvalidCipherTextException *e) {
    
#line 206
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Error el el cifrado / descifrado DES", e);
  }
  return cipherText;
}


#line 221
IOSByteArray *EsGobJmulticardCryptoBcCryptoHelper_doRsaWithByteArray_withJavaSecurityInterfacesRSAKey_withBoolean_(IOSByteArray *data, id<JavaSecurityInterfacesRSAKey> key, jboolean forEncryption) {
  EsGobJmulticardCryptoBcCryptoHelper_initialize();
  
#line 225
  jboolean isPrivateKey = [JavaSecurityInterfacesRSAPrivateKey_class_() isInstance:key];
  
#line 227
  OrgBouncycastleCryptoParamsAsymmetricKeyParameter *akp = new_OrgBouncycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_(
#line 228
  isPrivateKey,
#line 229
  [((id<JavaSecurityInterfacesRSAKey>) nil_chk(key)) getModulus],
#line 230
  isPrivateKey ?
#line 231
  [((id<JavaSecurityInterfacesRSAPrivateKey>) cast_check(key, JavaSecurityInterfacesRSAPrivateKey_class_())) getPrivateExponent] :
#line 232
  [((id<JavaSecurityInterfacesRSAPublicKey>) cast_check(key, JavaSecurityInterfacesRSAPublicKey_class_())) getPublicExponent]);
  
#line 234
  id<OrgBouncycastleCryptoAsymmetricBlockCipher> cipher = new_OrgBouncycastleCryptoEnginesRSAEngine_init();
  [cipher init__WithBoolean:forEncryption withOrgBouncycastleCryptoCipherParameters:akp];
  
#line 237
  @try {
    return [cipher processBlockWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_];
  }
  @catch (OrgBouncycastleCryptoInvalidCipherTextException *e) {
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Error en el cifrado/descifrado RSA", e);
  }
}


#line 267
IOSByteArray *EsGobJmulticardCryptoBcCryptoHelper_aesEncryptSingleBlockWithByteArray_withByteArray_(IOSByteArray *key, IOSByteArray *dataBlock) {
  EsGobJmulticardCryptoBcCryptoHelper_initialize();
  
#line 268
  OrgBouncycastleCryptoParamsKeyParameter *encKey = new_OrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(key);
  id<OrgBouncycastleCryptoBlockCipher> cipher = OrgBouncycastleCryptoEnginesAESEngine_newInstance();
  [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) init__WithBoolean:true withOrgBouncycastleCryptoCipherParameters:encKey];
  IOSByteArray *s = [IOSByteArray newArrayWithLength:[cipher getBlockSize]];
  [cipher processBlockWithByteArray:dataBlock withInt:0 withByteArray:s withInt:0];
  return s;
}


#line 276
IOSByteArray *EsGobJmulticardCryptoBcCryptoHelper_doAesWithByteArray_withByteArray_withByteArray_withOrgBouncycastleCryptoPaddingsBlockCipherPadding_withBoolean_(IOSByteArray *data, IOSByteArray *iv, IOSByteArray *aesKey, id<OrgBouncycastleCryptoPaddingsBlockCipherPadding> padding, jboolean forEncryption) {
  EsGobJmulticardCryptoBcCryptoHelper_initialize();
  
#line 282
  id<OrgBouncycastleCryptoBlockCipher> engine = OrgBouncycastleCryptoEnginesAESEngine_newInstance();
  
#line 285
  IOSByteArray *ivector;
  if (iv == nil) {
    ivector = nil;
  }
  else if (iv->size_ == 0) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobJmulticardCryptoBcCryptoHelper_LOGGER)) warningWithNSString:@"Se usara un vector de inicializacion AES vacio"];
    ivector = [IOSByteArray newArrayWithLength:[((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(engine)) getBlockSize]];
  }
  else {
    ivector = iv;
  }
  
#line 298
  OrgBouncycastleCryptoParamsParametersWithIV *parameterIV = new_OrgBouncycastleCryptoParamsParametersWithIV_initWithOrgBouncycastleCryptoCipherParameters_withByteArray_(new_OrgBouncycastleCryptoParamsKeyParameter_initWithByteArray_(
#line 299
  aesKey),
#line 300
  ivector);
  
#line 303
  jint noBytesRead;
  jint noBytesProcessed = 0;
  
#line 307
  OrgBouncycastleCryptoBufferedBlockCipher *aesCipher =
#line 308
  padding != nil ? new_OrgBouncycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_withOrgBouncycastleCryptoPaddingsBlockCipherPadding_(OrgBouncycastleCryptoModesCBCBlockCipher_newInstanceWithOrgBouncycastleCryptoBlockCipher_(OrgBouncycastleCryptoEnginesAESEngine_newInstance()),
#line 312
  padding) : (id) new_OrgBouncycastleCryptoDefaultBufferedBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(OrgBouncycastleCryptoModesCBCBlockCipher_newInstanceWithOrgBouncycastleCryptoBlockCipher_(
#line 314
  engine));
  
#line 317
  [aesCipher init__WithBoolean:forEncryption withOrgBouncycastleCryptoCipherParameters:parameterIV];
  
#line 320
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:16];
  IOSByteArray *obuf = [IOSByteArray newArrayWithLength:512];
  {
    JavaIoInputStream *bin = new_JavaIoByteArrayInputStream_initWithByteArray_(
#line 324
    data);
    JavaLangThrowable *__primaryException2 = nil;
    
#line 323
    @try {
      JavaIoByteArrayOutputStream *bout = new_JavaIoByteArrayOutputStream_init();
      JavaLangThrowable *__primaryException1 = nil;
      @try {
        while ((noBytesRead = [bin readWithByteArray:buf]) >= 0) {
          noBytesProcessed = [aesCipher processBytesWithByteArray:buf withInt:0 withInt:noBytesRead withByteArray:obuf withInt:0];
          [bout writeWithByteArray:obuf withInt:0 withInt:noBytesProcessed];
        }
        
#line 332
        noBytesProcessed = [aesCipher doFinalWithByteArray:obuf withInt:0];
        [bout writeWithByteArray:obuf withInt:0 withInt:noBytesProcessed];
        [bout flush];
        
#line 336
        return [bout toByteArray];
      }
      @catch (JavaLangThrowable *e) {
        __primaryException1 = e;
        @throw e;
      }
      @finally {
        if (bout != nil) {
          if (__primaryException1 != nil) {
            @try {
              [bout close];
            }
            @catch (JavaLangThrowable *e) {
              [__primaryException1 addSuppressedWithJavaLangThrowable:e];
            }
          }
          else {
            [bout close];
          }
        }
      }
    }
    @catch (JavaLangThrowable *e) {
      __primaryException2 = e;
      @throw e;
    }
    @finally {
      if (bin != nil) {
        if (__primaryException2 != nil) {
          @try {
            [bin close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException2 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [bin close];
        }
      }
    }
  }
}


#line 452
JavaMathBigInteger *EsGobJmulticardCryptoBcCryptoHelper_os2iWithByteArray_(IOSByteArray *bytes) {
  EsGobJmulticardCryptoBcCryptoHelper_initialize();
  
#line 453
  if (bytes == nil) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  return EsGobJmulticardCryptoBcCryptoHelper_os2iWithByteArray_withInt_withInt_(bytes, 0, bytes->size_);
}


#line 465
JavaMathBigInteger *EsGobJmulticardCryptoBcCryptoHelper_os2iWithByteArray_withInt_withInt_(IOSByteArray *bytes, jint offset, jint length) {
  EsGobJmulticardCryptoBcCryptoHelper_initialize();
  
#line 466
  if (bytes == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El Octet String no puede ser nulo");
  }
  JavaMathBigInteger *result = JreLoadStatic(JavaMathBigInteger, ZERO);
  JavaMathBigInteger *base = JavaMathBigInteger_valueOfWithLong_(256);
  for (jint i = offset; i < offset + length; i++) {
    result = [((JavaMathBigInteger *) nil_chk(result)) multiplyWithJavaMathBigInteger:base];
    result = [((JavaMathBigInteger *) nil_chk(result)) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(IOSByteArray_Get(bytes, i) & (jint) 0xFF)];
  }
  return result;
}


#line 478
JavaMathBigInteger *EsGobJmulticardCryptoBcCryptoHelper_computeAffineYWithJavaMathBigInteger_withJavaSecuritySpecECParameterSpec_(JavaMathBigInteger *affineX, JavaSecuritySpecECParameterSpec *params) {
  EsGobJmulticardCryptoBcCryptoHelper_initialize();
  
#line 479
  OrgBouncycastleMathEcECCurve *bcCurve = EsGobJmulticardCryptoBcCryptoHelper_toBouncyCastleECCurveWithJavaSecuritySpecECParameterSpec_(params);
  OrgBouncycastleMathEcECFieldElement *a = [((OrgBouncycastleMathEcECCurve *) nil_chk(bcCurve)) getA];
  OrgBouncycastleMathEcECFieldElement *b = [bcCurve getB];
  OrgBouncycastleMathEcECFieldElement *x = [bcCurve fromBigIntegerWithJavaMathBigInteger:affineX];
  OrgBouncycastleMathEcECFieldElement *y = [((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk(x)) multiplyWithOrgBouncycastleMathEcECFieldElement:x])) addWithOrgBouncycastleMathEcECFieldElement:a])) multiplyWithOrgBouncycastleMathEcECFieldElement:x])) addWithOrgBouncycastleMathEcECFieldElement:b])) sqrt];
  return [((OrgBouncycastleMathEcECFieldElement *) nil_chk(y)) toBigInteger];
}


#line 487
OrgBouncycastleMathEcECCurve *EsGobJmulticardCryptoBcCryptoHelper_toBouncyCastleECCurveWithJavaSecuritySpecECParameterSpec_(JavaSecuritySpecECParameterSpec *params) {
  EsGobJmulticardCryptoBcCryptoHelper_initialize();
  
#line 488
  JavaSecuritySpecEllipticCurve *curve = [((JavaSecuritySpecECParameterSpec *) nil_chk(params)) getCurve];
  id<JavaSecuritySpecECField> field = [((JavaSecuritySpecEllipticCurve *) nil_chk(curve)) getField];
  if (!([field isKindOfClass:[JavaSecuritySpecECFieldFp class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$C", @"Solo se soporta 'ECFieldFp' y se proporciono '",
#line 492
    [[((id<JavaSecuritySpecECField>) nil_chk(field)) java_getClass] getCanonicalName], '\''));
  }
  
#line 495
  jint coFactor = [params getCofactor];
  JavaMathBigInteger *order = [params getOrder];
  JavaMathBigInteger *a = [curve getA];
  JavaMathBigInteger *b = [curve getB];
  JavaMathBigInteger *p = EsGobJmulticardCryptoBcCryptoHelper_getPrimeWithJavaSecuritySpecECParameterSpec_(params);
  return new_OrgBouncycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(p, a, b, order, JavaMathBigInteger_valueOfWithLong_(coFactor));
}


#line 503
JavaMathBigInteger *EsGobJmulticardCryptoBcCryptoHelper_getPrimeWithJavaSecuritySpecECParameterSpec_(JavaSecuritySpecECParameterSpec *params) {
  EsGobJmulticardCryptoBcCryptoHelper_initialize();
  
#line 504
  if (params == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 506
    @"Los parametros no pueden ser nulos");
  }
  
#line 509
  JavaSecuritySpecEllipticCurve *curve = [params getCurve];
  id<JavaSecuritySpecECField> field = [((JavaSecuritySpecEllipticCurve *) nil_chk(curve)) getField];
  if (!([field isKindOfClass:[JavaSecuritySpecECFieldFp class]])) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Solo se soporta 'ECFieldFp' y se proporciono  ",
#line 513
    [[((id<JavaSecuritySpecECField>) nil_chk(field)) java_getClass] getCanonicalName]));
  }
  
#line 516
  return [((JavaSecuritySpecECFieldFp *) nil_chk(((JavaSecuritySpecECFieldFp *) cast_chk(field, [JavaSecuritySpecECFieldFp class])))) getP];
}


#line 519
JavaSecuritySpecECParameterSpec *EsGobJmulticardCryptoBcCryptoHelper_mapNonceGmWithEcdhWithJavaMathBigInteger_withJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(JavaMathBigInteger *nonceS, JavaSecuritySpecECPoint *sharedSecretPointH, JavaSecuritySpecECParameterSpec *params) {
  EsGobJmulticardCryptoBcCryptoHelper_initialize();
  
#line 523
  JavaSecuritySpecECPoint *generator = [((JavaSecuritySpecECParameterSpec *) nil_chk(params)) getGenerator];
  JavaSecuritySpecEllipticCurve *curve = [params getCurve];
  JavaMathBigInteger *a = [((JavaSecuritySpecEllipticCurve *) nil_chk(curve)) getA];
  JavaMathBigInteger *b = [curve getB];
  JavaSecuritySpecECFieldFp *field = (JavaSecuritySpecECFieldFp *) cast_chk([curve getField], [JavaSecuritySpecECFieldFp class]);
  JavaMathBigInteger *p = [((JavaSecuritySpecECFieldFp *) nil_chk(field)) getP];
  JavaMathBigInteger *order = [params getOrder];
  jint cofactor = [params getCofactor];
  JavaSecuritySpecECPoint *ephemeralGenerator = EsGobJmulticardCryptoBcCryptoHelper_addWithJavaSecuritySpecECPoint_withJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(EsGobJmulticardCryptoBcCryptoHelper_multiplyWithJavaMathBigInteger_withJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(
#line 532
  nonceS, generator, params),
#line 533
  sharedSecretPointH,
#line 534
  params);
  
#line 536
  if (![((OrgBouncycastleMathEcECPoint *) nil_chk(EsGobJmulticardCryptoBcCryptoHelper_toBouncyCastleECPointWithJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(ephemeralGenerator, params))) isValid]) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobJmulticardCryptoBcCryptoHelper_LOGGER)) warningWithNSString:@"Se ha generado un punto invalido"];
  }
  return new_JavaSecuritySpecECParameterSpec_initWithJavaSecuritySpecEllipticCurve_withJavaSecuritySpecECPoint_withJavaMathBigInteger_withInt_(new_JavaSecuritySpecEllipticCurve_initWithJavaSecuritySpecECField_withJavaMathBigInteger_withJavaMathBigInteger_(new_JavaSecuritySpecECFieldFp_initWithJavaMathBigInteger_(
#line 540
  p), a, b),
#line 541
  ephemeralGenerator,
#line 542
  order,
#line 543
  cofactor);
}


#line 547
JavaSecuritySpecECPoint *EsGobJmulticardCryptoBcCryptoHelper_multiplyWithJavaMathBigInteger_withJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(JavaMathBigInteger *s, JavaSecuritySpecECPoint *point, JavaSecuritySpecECParameterSpec *params) {
  EsGobJmulticardCryptoBcCryptoHelper_initialize();
  
#line 550
  OrgBouncycastleMathEcECPoint *bcPoint = EsGobJmulticardCryptoBcCryptoHelper_toBouncyCastleECPointWithJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(point, params);
  OrgBouncycastleMathEcECPoint *bcProd = [((OrgBouncycastleMathEcECPoint *) nil_chk(bcPoint)) multiplyWithJavaMathBigInteger:s];
  return EsGobJmulticardCryptoBcCryptoHelper_fromBouncyCastleECPointWithOrgBouncycastleMathEcECPoint_(bcProd);
}


#line 555
JavaSecuritySpecECPoint *EsGobJmulticardCryptoBcCryptoHelper_fromBouncyCastleECPointWithOrgBouncycastleMathEcECPoint_(OrgBouncycastleMathEcECPoint *point) {
  EsGobJmulticardCryptoBcCryptoHelper_initialize();
  
#line 556
  OrgBouncycastleMathEcECPoint *newPoint = [((OrgBouncycastleMathEcECPoint *) nil_chk(point)) normalize];
  if (![((OrgBouncycastleMathEcECPoint *) nil_chk(newPoint)) isValid]) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobJmulticardCryptoBcCryptoHelper_LOGGER)) warningWithNSString:@"Se ha proporcionado un punto invalido"];
  }
  return new_JavaSecuritySpecECPoint_initWithJavaMathBigInteger_withJavaMathBigInteger_(
#line 561
  [((OrgBouncycastleMathEcECFieldElement *) nil_chk([newPoint getAffineXCoord])) toBigInteger],
#line 562
  [((OrgBouncycastleMathEcECFieldElement *) nil_chk([newPoint getAffineYCoord])) toBigInteger]);
}


#line 566
JavaSecuritySpecECPoint *EsGobJmulticardCryptoBcCryptoHelper_addWithJavaSecuritySpecECPoint_withJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(JavaSecuritySpecECPoint *x, JavaSecuritySpecECPoint *y, JavaSecuritySpecECParameterSpec *params) {
  EsGobJmulticardCryptoBcCryptoHelper_initialize();
  
#line 567
  OrgBouncycastleMathEcECPoint *bcX = EsGobJmulticardCryptoBcCryptoHelper_toBouncyCastleECPointWithJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(x, params);
  OrgBouncycastleMathEcECPoint *bcY = EsGobJmulticardCryptoBcCryptoHelper_toBouncyCastleECPointWithJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(y, params);
  OrgBouncycastleMathEcECPoint *bcSum = [((OrgBouncycastleMathEcECPoint *) nil_chk(bcX)) addWithOrgBouncycastleMathEcECPoint:bcY];
  return EsGobJmulticardCryptoBcCryptoHelper_fromBouncyCastleECPointWithOrgBouncycastleMathEcECPoint_(bcSum);
}


#line 573
OrgBouncycastleMathEcECPoint *EsGobJmulticardCryptoBcCryptoHelper_toBouncyCastleECPointWithJavaSecuritySpecECPoint_withJavaSecuritySpecECParameterSpec_(JavaSecuritySpecECPoint *point, JavaSecuritySpecECParameterSpec *params) {
  EsGobJmulticardCryptoBcCryptoHelper_initialize();
  OrgBouncycastleMathEcECCurve *bcCurve = EsGobJmulticardCryptoBcCryptoHelper_toBouncyCastleECCurveWithJavaSecuritySpecECParameterSpec_(params);
  return [((OrgBouncycastleMathEcECCurve *) nil_chk(bcCurve)) createPointWithJavaMathBigInteger:[((JavaSecuritySpecECPoint *) nil_chk(point)) getAffineX] withJavaMathBigInteger:[point getAffineY]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCryptoBcCryptoHelper)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/crypto/BcCryptoHelper.java"


#line 634
@implementation EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector


#line 638
- (instancetype)initWithOrgBouncycastleCmsSignerId:(OrgBouncycastleCmsSignerId *)sid {
  EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector_initWithOrgBouncycastleCmsSignerId_(self, sid);
  return self;
}


#line 645
- (jboolean)matchWithId:(OrgBouncycastleCertX509CertificateHolder *)o {
  
#line 647
  return [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleCmsSignerId *) nil_chk(self->signerId_)) getSerialNumber])) isEqual:[((OrgBouncycastleCertX509CertificateHolder *) nil_chk(o)) getSerialNumber]];
}


#line 650
- (id)java_clone {
  
#line 652
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)clone {
  return [self java_clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgBouncycastleCmsSignerId:);
  methods[1].selector = @selector(matchWithId:);
  methods[2].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "signerId_", "LOrgBouncycastleCmsSignerId;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgBouncycastleCmsSignerId;", "match", "LOrgBouncycastleCertX509CertificateHolder;", "clone", "LEsGobJmulticardCryptoBcCryptoHelper;", "Ljava/lang/Object;Lorg/bouncycastle/util/Selector<Lorg/bouncycastle/cert/X509CertificateHolder;>;" };
  static const J2ObjcClassInfo _EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector = { "CertHolderBySignerIdSelector", "es.gob.jmulticard.crypto", ptrTable, methods, fields, 7, 0x1a, 3, 1, 4, -1, -1, 5, -1 };
  return &_EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end


#line 638
void EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector_initWithOrgBouncycastleCmsSignerId_(EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector *self, OrgBouncycastleCmsSignerId *sid) {
  NSObject_init(self);
  
#line 639
  if (sid == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El ID del firmante no puede ser nulo");
  }
  self->signerId_ = sid;
}


#line 638
EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector *new_EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector_initWithOrgBouncycastleCmsSignerId_(OrgBouncycastleCmsSignerId *sid) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector, initWithOrgBouncycastleCmsSignerId_, sid)
}


#line 638
EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector *create_EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector_initWithOrgBouncycastleCmsSignerId_(OrgBouncycastleCmsSignerId *sid) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector, initWithOrgBouncycastleCmsSignerId_, sid)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCryptoBcCryptoHelper_CertHolderBySignerIdSelector)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/crypto/BcCryptoHelper.java"


#line 694
@implementation EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey


#line 702
- (instancetype)initWithByteArray:(IOSByteArray *)pukBytes {
  EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey_initWithByteArray_(self, pukBytes);
  return self;
}


#line 727
- (NSString *)getAlgorithm {
  
#line 729
  return @"RSA";
}


#line 732
- (NSString *)getFormat {
  
#line 734
  return @"X.509";
}


#line 737
- (IOSByteArray *)getEncoded {
  
#line 739
  return [((IOSByteArray *) nil_chk(keyBytes_)) java_clone];
}


#line 742
- (JavaMathBigInteger *)getModulus {
  
#line 744
  return modulus_;
}


#line 747
- (JavaMathBigInteger *)getPublicExponent {
  
#line 749
  return exponent_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(getAlgorithm);
  methods[2].selector = @selector(getFormat);
  methods[3].selector = @selector(getEncoded);
  methods[4].selector = @selector(getModulus);
  methods[5].selector = @selector(getPublicExponent);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "keyBytes_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "modulus_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "exponent_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "LJavaIoIOException;", "LEsGobJmulticardCryptoBcCryptoHelper;" };
  static const J2ObjcClassInfo _EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey = { "CustomRsaPublicKey", "es.gob.jmulticard.crypto", ptrTable, methods, fields, 7, 0x9, 6, 4, 2, -1, -1, -1, -1 };
  return &_EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey;
}

@end


#line 702
void EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey_initWithByteArray_(EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey *self, IOSByteArray *pukBytes) {
  NSObject_init(self);
  
#line 703
  if (pukBytes == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"La codificacion de la clave publica RSA no puede ser nula");
  }
  
#line 707
  self->keyBytes_ = [pukBytes java_clone];
  
#line 709
  OrgBouncycastleAsn1ASN1Sequence *seq = OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(pukBytes));
  OrgBouncycastleAsn1DERBitString *bs = (OrgBouncycastleAsn1DERBitString *) cast_chk([((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjectAtWithInt:1], [OrgBouncycastleAsn1DERBitString class]);
  
#line 712
  seq = OrgBouncycastleAsn1ASN1Sequence_getInstanceWithId_(OrgBouncycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_([((OrgBouncycastleAsn1DERBitString *) nil_chk(bs)) getBytes]));
  
#line 714
  IOSByteArray *modBytes = [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleAsn1ASN1Integer *) nil_chk(((OrgBouncycastleAsn1ASN1Integer *) cast_chk([((OrgBouncycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjectAtWithInt:0], [OrgBouncycastleAsn1ASN1Integer class])))) getValue])) toByteArray];
  if (modBytes == nil || modBytes->size_ < 128) {
    @throw new_JavaIoIOException_initWithNSString_(@"El modulo obtenido es menor de 128 octetos (1024 bits)");
  }
  IOSByteArray *expBytes = [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleAsn1ASN1Integer *) nil_chk(((OrgBouncycastleAsn1ASN1Integer *) cast_chk([seq getObjectAtWithInt:1], [OrgBouncycastleAsn1ASN1Integer class])))) getValue])) toByteArray];
  if (expBytes == nil || expBytes->size_ < 3) {
    @throw new_JavaIoIOException_initWithNSString_(@"El exponente obtenido es menor de 3 octetos");
  }
  
#line 723
  self->modulus_ = new_JavaMathBigInteger_initWithInt_withByteArray_(1, modBytes);
  self->exponent_ = new_JavaMathBigInteger_initWithInt_withByteArray_(1, expBytes);
}


#line 702
EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey *new_EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey_initWithByteArray_(IOSByteArray *pukBytes) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey, initWithByteArray_, pukBytes)
}


#line 702
EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey *create_EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey_initWithByteArray_(IOSByteArray *pukBytes) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey, initWithByteArray_, pukBytes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCryptoBcCryptoHelper_CustomRsaPublicKey)
