//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/iso7816four/AbstractIso7816FourCard.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/JmcLogger.h"
#include "es/gob/jmulticard/apdu/CommandApdu.h"
#include "es/gob/jmulticard/apdu/ResponseApdu.h"
#include "es/gob/jmulticard/apdu/StatusWord.h"
#include "es/gob/jmulticard/apdu/iso7816four/GetChallengeApduCommand.h"
#include "es/gob/jmulticard/apdu/iso7816four/ReadBinaryApduCommand.h"
#include "es/gob/jmulticard/apdu/iso7816four/ReadRecordApduCommand.h"
#include "es/gob/jmulticard/apdu/iso7816four/SelectDfByNameApduCommand.h"
#include "es/gob/jmulticard/apdu/iso7816four/SelectFileApduResponse.h"
#include "es/gob/jmulticard/apdu/iso7816four/SelectFileByIdApduCommand.h"
#include "es/gob/jmulticard/asn1/Tlv.h"
#include "es/gob/jmulticard/card/AbstractSmartCard.h"
#include "es/gob/jmulticard/card/Location.h"
#include "es/gob/jmulticard/card/iso7816four/AbstractIso7816FourCard.h"
#include "es/gob/jmulticard/card/iso7816four/FileNotFoundException.h"
#include "es/gob/jmulticard/card/iso7816four/Iso7816FourCardException.h"
#include "es/gob/jmulticard/card/iso7816four/OffsetOutsideEfException.h"
#include "es/gob/jmulticard/card/iso7816four/RequiredSecurityStateNotSatisfiedException.h"
#include "es/gob/jmulticard/connection/ApduConnection.h"
#include "es/gob/jmulticard/connection/ApduConnectionException.h"
#include "es/gob/jmulticard/connection/cwa14890/SecureChannelException.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "javax/security/auth/callback/PasswordCallback.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/card/iso7816four/AbstractIso7816FourCard must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardCardIso7816fourAbstractIso7816FourCard ()

/*!
 @brief Lee un contenido binario del fichero actualmente seleccionado.
 @param msbOffset Octeto m &aacute; s significativo del desplazamiento ( <i> offset </i> )                   hasta el punto de inicio de la lectura desde el comienzo del fichero.
 @param lsbOffset Octeto menos significativo del desplazamiento ( <i> offset </i> ) hasta
                    el punto de inicio de la lectura desde el comienzo del fichero.
 @param readLength Longitud de los datos a leer (en octetos).
 @return APDU de respuesta.
 @throw ApduConnectionExceptionSi hay problemas en el env&iacute;o de la APDU.
 @throw RequiredSecurityStateNotSatisfiedExceptionSi la lectura requiere el cumplimiento
                         de una condici&oacute;n de seguridad y esta no se ha satisfecho.
 @throw OffsetOutsideEfExceptionSi el desplazamiento indicado o el tama&ntilde;o indicados
                                   para la lectura caen fuera de los l&iacute;mites del fichero.
 */
- (EsGobJmulticardApduResponseApdu *)readBinaryWithByte:(jbyte)msbOffset
                                               withByte:(jbyte)lsbOffset
                                               withByte:(jbyte)readLength;

/*!
 @brief Selecciona un fichero (DF o EF).
 @param location Ruta absoluta donde se encuentra el fichero a leer.
 @return Tama&ntilde;o del fichero seleccionado.
 @throw ApduConnectionExceptionSi hay problemas en el env&iacute;o de la APDU.
 @throw Iso7816FourCardExceptionSi falla la selecci&oacute;n de fichero.
 */
- (jint)selectFileByLocationWithEsGobJmulticardCardLocation:(EsGobJmulticardCardLocation *)location;

@end

/*!
 @brief Condici&oacute;n de seguridad no satisfecha.
 */
inline EsGobJmulticardApduStatusWord *EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_get_SW_UNSATISFIED_SECURITY_STATE(void);
static EsGobJmulticardApduStatusWord *EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_UNSATISFIED_SECURITY_STATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard, SW_UNSATISFIED_SECURITY_STATE, EsGobJmulticardApduStatusWord *)

/*!
 @brief EF o DF no encontrado.
 */
inline EsGobJmulticardApduStatusWord *EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_get_SW_FILE_NOT_FOUND(void);
static EsGobJmulticardApduStatusWord *EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_FILE_NOT_FOUND;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard, SW_FILE_NOT_FOUND, EsGobJmulticardApduStatusWord *)

/*!
 @brief Se ha alcanzado prematuramente el final de fichero.
 */
inline EsGobJmulticardApduStatusWord *EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_get_SW_EOF_REACHED(void);
static EsGobJmulticardApduStatusWord *EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_EOF_REACHED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard, SW_EOF_REACHED, EsGobJmulticardApduStatusWord *)

/*!
 @brief El <i>offset</i> sobrepasa el l&iacute;mite de tama&ntilde;o del EF.
 */
inline EsGobJmulticardApduStatusWord *EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_get_SW_OFFSET_OUTSIDE_EF(void);
static EsGobJmulticardApduStatusWord *EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_OFFSET_OUTSIDE_EF;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard, SW_OFFSET_OUTSIDE_EF, EsGobJmulticardApduStatusWord *)

/*!
 @brief Tama&ntilde;o m&aacute;ximo de datos que se puede leer en una &uacute;nica APDU.
 */
inline jint EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_get_MAX_READ_CHUNK(void);
#define EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_MAX_READ_CHUNK 222
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard, MAX_READ_CHUNK, jint)

__attribute__((unused)) static EsGobJmulticardApduResponseApdu *EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_readBinaryWithByte_withByte_withByte_(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard *self, jbyte msbOffset, jbyte lsbOffset, jbyte readLength);

__attribute__((unused)) static jint EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_selectFileByLocationWithEsGobJmulticardCardLocation_(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard *self, EsGobJmulticardCardLocation *location);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/iso7816four/AbstractIso7816FourCard.java"

J2OBJC_INITIALIZED_DEFN(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard)


#line 71
@implementation EsGobJmulticardCardIso7816fourAbstractIso7816FourCard


#line 91
- (instancetype)initWithByte:(jbyte)c
withEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn {
  EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_initWithByte_withEsGobJmulticardConnectionApduConnection_(self, c, conn);
  return self;
}


#line 107
- (EsGobJmulticardApduResponseApdu *)readBinaryWithByte:(jbyte)msbOffset
                                               withByte:(jbyte)lsbOffset
                                               withByte:(jbyte)readLength {
  return EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_readBinaryWithByte_withByte_withByte_(self, msbOffset, lsbOffset, readLength);
}


#line 138
- (id<JavaUtilList>)readAllRecords {
  id<JavaUtilList> ret = new_JavaUtilArrayList_init();
  EsGobJmulticardApduStatusWord *readedResponseSw;
  EsGobJmulticardApduCommandApdu *readRecordApduCommand = new_EsGobJmulticardApduIso7816fourReadRecordApduCommand_initWithByte_([self getCla]);
  do {
    EsGobJmulticardApduResponseApdu *readedResponse = [self sendArbitraryApduWithEsGobJmulticardApduCommandApdu:readRecordApduCommand];
    readedResponseSw = [((EsGobJmulticardApduResponseApdu *) nil_chk(readedResponse)) getStatusWord];
    if (![readedResponse isOk] && ![((EsGobJmulticardApduStatusWord *) nil_chk(JreLoadStatic(EsGobJmulticardApduIso7816fourReadRecordApduCommand, RECORD_NOT_FOUND))) isEqual:readedResponseSw]) {
      @throw new_EsGobJmulticardCardIso7816fourIso7816FourCardException_initWithNSString_withEsGobJmulticardApduStatusWord_(
#line 147
      @"Error en la lectura de registro", readedResponseSw);
    }
    
#line 150
    [ret addWithId:[readedResponse getData]];
  }
  while (
#line 151
  ![((EsGobJmulticardApduStatusWord *) nil_chk(JreLoadStatic(EsGobJmulticardApduIso7816fourReadRecordApduCommand, RECORD_NOT_FOUND))) isEqual:readedResponseSw]);
  
#line 153
  return ret;
}


#line 161
- (IOSByteArray *)readBinaryCompleteWithInt:(jint)len {
  
#line 163
  jint off = 0;
  EsGobJmulticardApduResponseApdu *readedResponse;
  JavaIoByteArrayOutputStream *out = new_JavaIoByteArrayOutputStream_init();
  
#line 168
  while (off < len) {
    jbyte msbOffset = (jbyte) (JreRShift32(off, 8));
    jbyte lsbOffset = (jbyte) (off & (jint) 0xFF);
    jint left = len - off;
    @try {
      if (left < EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_MAX_READ_CHUNK) {
        readedResponse = EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_readBinaryWithByte_withByte_withByte_(self, msbOffset, lsbOffset, (jbyte) left);
      }
      else {
        readedResponse = EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_readBinaryWithByte_withByte_withByte_(self, msbOffset, lsbOffset, (jbyte) EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_MAX_READ_CHUNK);
      }
    }
    @catch (EsGobJmulticardCardIso7816fourOffsetOutsideEfException *e) {
      EsGobJmulticardJmcLogger_warningWithNSString_(JreStrcat("$@", @"Se ha intentado una lectura fuera de los limites del fichero, se devolvera lo leido hasta ahora: ",
#line 182
      e));
      
#line 184
      return [out toByteArray];
    }
    @catch (EsGobJmulticardCardIso7816fourRequiredSecurityStateNotSatisfiedException *e) {
      @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Condicion de seguridad no satisfecha", e);
    }
    
#line 190
    jboolean eofReached = [((EsGobJmulticardApduStatusWord *) nil_chk(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_EOF_REACHED)) isEqual:[((EsGobJmulticardApduResponseApdu *) nil_chk(readedResponse)) getStatusWord]];
    
#line 192
    if (![readedResponse isOk] && !eofReached) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@C", @"Error leyendo el binario (",
#line 194
      [readedResponse getStatusWord], ')'));
    }
    
#line 198
    [out writeWithByteArray:[readedResponse getData]];
    
#line 200
    off += EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_MAX_READ_CHUNK;
    
#line 203
    if (eofReached) {
      break;
    }
  }
  
#line 208
  return [out toByteArray];
}


#line 216
- (jint)selectFileByNameWithNSString:(NSString *)name {
  
#line 218
  return [self selectFileByNameWithByteArray:[((NSString *) nil_chk(name)) java_getBytes]];
}


#line 227
- (jint)selectFileByNameWithByteArray:(IOSByteArray *)name {
  
#line 229
  EsGobJmulticardApduCommandApdu *selectCommand = new_EsGobJmulticardApduIso7816fourSelectDfByNameApduCommand_initWithByte_withByteArray_([self getCla], name);
  EsGobJmulticardApduResponseApdu *response = [self sendArbitraryApduWithEsGobJmulticardApduCommandApdu:selectCommand];
  if ([((EsGobJmulticardApduResponseApdu *) nil_chk(response)) isOk]) {
    return [new_EsGobJmulticardApduIso7816fourSelectFileApduResponse_initWithEsGobJmulticardApduApdu_(response) getFileLength];
  }
  EsGobJmulticardApduStatusWord *sw = [response getStatusWord];
  if ([((EsGobJmulticardApduStatusWord *) nil_chk(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_FILE_NOT_FOUND)) isEqual:sw]) {
    @throw new_EsGobJmulticardCardIso7816fourFileNotFoundException_initWithByteArray_(name);
  }
  @throw new_EsGobJmulticardCardIso7816fourIso7816FourCardException_initWithEsGobJmulticardApduStatusWord_withEsGobJmulticardApduApdu_(sw, selectCommand);
}


#line 246
- (jint)selectFileByIdWithByteArray:(IOSByteArray *)id_ {
  
#line 248
  EsGobJmulticardApduCommandApdu *selectCommand = new_EsGobJmulticardApduIso7816fourSelectFileByIdApduCommand_initWithByte_withByteArray_([self getCla], id_);
  EsGobJmulticardApduResponseApdu *res = [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) transmitWithEsGobJmulticardApduCommandApdu:selectCommand];
  if ([((EsGobJmulticardApduStatusWord *) nil_chk(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_FILE_NOT_FOUND)) isEqual:[((EsGobJmulticardApduResponseApdu *) nil_chk(res)) getStatusWord]]) {
    @throw new_EsGobJmulticardCardIso7816fourFileNotFoundException_initWithByteArray_(id_);
  }
  EsGobJmulticardApduIso7816fourSelectFileApduResponse *response = new_EsGobJmulticardApduIso7816fourSelectFileApduResponse_initWithEsGobJmulticardApduApdu_(res);
  if ([response isOk]) {
    return [response getFileLength];
  }
  EsGobJmulticardApduStatusWord *sw = [response getStatusWord];
  if ([EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_FILE_NOT_FOUND isEqual:sw]) {
    @throw new_EsGobJmulticardCardIso7816fourFileNotFoundException_initWithByteArray_(id_);
  }
  if ([((EsGobJmulticardApduStatusWord *) nil_chk(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_UNSATISFIED_SECURITY_STATE)) isEqual:sw]) {
    @throw new_EsGobJmulticardCardIso7816fourRequiredSecurityStateNotSatisfiedException_initWithEsGobJmulticardApduStatusWord_([response getStatusWord]);
  }
  @throw new_EsGobJmulticardCardIso7816fourIso7816FourCardException_initWithEsGobJmulticardApduStatusWord_withEsGobJmulticardApduApdu_(sw, selectCommand);
}


#line 273
- (IOSByteArray *)selectFileByIdAndReadWithByteArray:(IOSByteArray *)id_ {
  
#line 275
  jint fileLength = [self selectFileByIdWithByteArray:id_];
  return [self readBinaryCompleteWithInt:fileLength];
}


#line 284
- (jint)selectFileByLocationWithEsGobJmulticardCardLocation:(EsGobJmulticardCardLocation *)location {
  return EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_selectFileByLocationWithEsGobJmulticardCardLocation_(self, location);
}


#line 303
- (IOSByteArray *)selectFileByLocationAndReadWithEsGobJmulticardCardLocation:(EsGobJmulticardCardLocation *)location {
  
#line 305
  jint fileLenght = EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_selectFileByLocationWithEsGobJmulticardCardLocation_(self, location);
  return [self readBinaryCompleteWithInt:fileLenght];
}


#line 312
- (void)selectMasterFile {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 319
- (void)setPublicKeyToVerificationWithByteArray:(IOSByteArray *)refPublicKey {
  EsGobJmulticardApduResponseApdu *res = [self sendArbitraryApduWithEsGobJmulticardApduCommandApdu:new_EsGobJmulticardApduCommandApdu_initWithByte_withByte_withByte_withByte_withByteArray_withJavaLangInteger_(
#line 322
  (jbyte) (jint) 0x00,
#line 323
  (jbyte) (jint) 0x22,
#line 324
  (jbyte) (jint) 0x81,
#line 325
  (jbyte) (jint) 0xB6,
#line 326
  [new_EsGobJmulticardAsn1Tlv_initWithByte_withByteArray_((jbyte) (jint) 0x83, refPublicKey) getBytes],
#line 327
  nil)];
  
#line 330
  if (![((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
    @throw new_EsGobJmulticardConnectionCwa14890SecureChannelException_initWithNSString_(JreStrcat("$@", @"Error estableciendo la clave publica para verificacion, con respuesta: ",
#line 333
    [res getStatusWord]));
  }
}


#line 341
- (IOSByteArray *)getChallenge {
  EsGobJmulticardApduResponseApdu *res = [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) transmitWithEsGobJmulticardApduCommandApdu:new_EsGobJmulticardApduIso7816fourGetChallengeApduCommand_initWithByte_((jbyte) (jint) 0x00)];
  if ([((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
    return [res getData];
  }
  @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_(JreStrcat("$@", @"Respuesta invalida en la obtencion de desafio con el codigo: ",
#line 347
  [res getStatusWord]));
}


#line 361
- (void)verifyPinWithJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)pinPc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardApduResponseApdu;", 0x2, 1, 2, 3, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, 4, 5, -1, -1 },
    { NULL, "[B", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 11, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 11, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, 13, 11, 14, -1, -1, -1 },
    { NULL, "I", 0x2, 15, 16, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, 17, 16, 18, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 11, 20, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 20, -1, -1, -1 },
    { NULL, "V", 0x401, 21, 22, 23, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByte:withEsGobJmulticardConnectionApduConnection:);
  methods[1].selector = @selector(readBinaryWithByte:withByte:withByte:);
  methods[2].selector = @selector(readAllRecords);
  methods[3].selector = @selector(readBinaryCompleteWithInt:);
  methods[4].selector = @selector(selectFileByNameWithNSString:);
  methods[5].selector = @selector(selectFileByNameWithByteArray:);
  methods[6].selector = @selector(selectFileByIdWithByteArray:);
  methods[7].selector = @selector(selectFileByIdAndReadWithByteArray:);
  methods[8].selector = @selector(selectFileByLocationWithEsGobJmulticardCardLocation:);
  methods[9].selector = @selector(selectFileByLocationAndReadWithEsGobJmulticardCardLocation:);
  methods[10].selector = @selector(selectMasterFile);
  methods[11].selector = @selector(setPublicKeyToVerificationWithByteArray:);
  methods[12].selector = @selector(getChallenge);
  methods[13].selector = @selector(verifyPinWithJavaxSecurityAuthCallbackPasswordCallback:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SW_UNSATISFIED_SECURITY_STATE", "LEsGobJmulticardApduStatusWord;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "SW_FILE_NOT_FOUND", "LEsGobJmulticardApduStatusWord;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "SW_EOF_REACHED", "LEsGobJmulticardApduStatusWord;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "SW_OFFSET_OUTSIDE_EF", "LEsGobJmulticardApduStatusWord;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "MAX_READ_CHUNK", "I", .constantValue.asInt = EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_MAX_READ_CHUNK, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "BLEsGobJmulticardConnectionApduConnection;", "readBinary", "BBB", "LEsGobJmulticardConnectionApduConnectionException;LEsGobJmulticardCardIso7816fourRequiredSecurityStateNotSatisfiedException;LEsGobJmulticardCardIso7816fourOffsetOutsideEfException;", "LEsGobJmulticardConnectionApduConnectionException;LEsGobJmulticardCardIso7816fourIso7816FourCardException;", "()Ljava/util/List<[B>;", "readBinaryComplete", "I", "LJavaIoIOException;", "selectFileByName", "LNSString;", "[B", "selectFileById", "selectFileByIdAndRead", "LEsGobJmulticardCardIso7816fourIso7816FourCardException;LJavaIoIOException;", "selectFileByLocation", "LEsGobJmulticardCardLocation;", "selectFileByLocationAndRead", "LJavaIoIOException;LEsGobJmulticardCardIso7816fourIso7816FourCardException;", "setPublicKeyToVerification", "LEsGobJmulticardConnectionApduConnectionException;", "verifyPin", "LJavaxSecurityAuthCallbackPasswordCallback;", "LEsGobJmulticardConnectionApduConnectionException;LEsGobJmulticardCardPinException;LEsGobJmulticardCardPasswordCallbackNotFoundException;", &EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_UNSATISFIED_SECURITY_STATE, &EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_FILE_NOT_FOUND, &EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_EOF_REACHED, &EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_OFFSET_OUTSIDE_EF };
  static const J2ObjcClassInfo _EsGobJmulticardCardIso7816fourAbstractIso7816FourCard = { "AbstractIso7816FourCard", "es.gob.jmulticard.card.iso7816four", ptrTable, methods, fields, 7, 0x401, 14, 5, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardCardIso7816fourAbstractIso7816FourCard;
}

+ (void)initialize {
  if (self == [EsGobJmulticardCardIso7816fourAbstractIso7816FourCard class]) {
    EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_UNSATISFIED_SECURITY_STATE = new_EsGobJmulticardApduStatusWord_initWithByte_withByte_(
#line 74
    (jbyte) (jint) 0x69, (jbyte) (jint) 0x82);
    EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_FILE_NOT_FOUND = new_EsGobJmulticardApduStatusWord_initWithByte_withByte_(
#line 77
    (jbyte) (jint) 0x6A, (jbyte) (jint) 0x82);
    EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_EOF_REACHED = new_EsGobJmulticardApduStatusWord_initWithByte_withByte_(
#line 80
    (jbyte) (jint) 0x62, (jbyte) (jint) 0x82);
    EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_OFFSET_OUTSIDE_EF = new_EsGobJmulticardApduStatusWord_initWithByte_withByte_(
#line 83
    (jbyte) (jint) 0x6B, (jbyte) (jint) 0x00);
    J2OBJC_SET_INITIALIZED(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard)
  }
}

@end


#line 91
void EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_initWithByte_withEsGobJmulticardConnectionApduConnection_(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard *self, jbyte c, id<EsGobJmulticardConnectionApduConnection> conn) {
  EsGobJmulticardCardAbstractSmartCard_initWithByte_withEsGobJmulticardConnectionApduConnection_(self, c, conn);
}


#line 107
EsGobJmulticardApduResponseApdu *EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_readBinaryWithByte_withByte_withByte_(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard *self, jbyte msbOffset, jbyte lsbOffset, jbyte readLength) {
  
#line 112
  EsGobJmulticardApduCommandApdu *apdu = new_EsGobJmulticardApduIso7816fourReadBinaryApduCommand_initWithByte_withByte_withByte_withInt_(
#line 113
  [self getCla], msbOffset, lsbOffset, readLength);
  
#line 115
  EsGobJmulticardApduResponseApdu *res = [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) transmitWithEsGobJmulticardApduCommandApdu:
#line 116
  apdu];
  
#line 118
  if ([((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
    return res;
  }
  if ([((EsGobJmulticardApduStatusWord *) nil_chk(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_OFFSET_OUTSIDE_EF)) isEqual:[res getStatusWord]]) {
    @throw new_EsGobJmulticardCardIso7816fourOffsetOutsideEfException_initWithEsGobJmulticardApduStatusWord_withEsGobJmulticardApduApdu_(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_OFFSET_OUTSIDE_EF, apdu);
  }
  if ([((EsGobJmulticardApduStatusWord *) nil_chk(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_UNSATISFIED_SECURITY_STATE)) isEqual:[res getStatusWord]]) {
    @throw new_EsGobJmulticardCardIso7816fourRequiredSecurityStateNotSatisfiedException_initWithEsGobJmulticardApduStatusWord_([res getStatusWord]);
  }
  if ([((EsGobJmulticardApduStatusWord *) nil_chk(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_SW_EOF_REACHED)) isEqual:[res getStatusWord]]) {
    EsGobJmulticardJmcLogger_warningWithNSString_(@"Se ha alcanzado el final de fichero antes de poder leer los octetos indicados");
    return res;
  }
  @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_(JreStrcat("$@", @"Respuesta invalida en la lectura de binario con el codigo: ", [res getStatusWord]));
}


#line 284
jint EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_selectFileByLocationWithEsGobJmulticardCardLocation_(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard *self, EsGobJmulticardCardLocation *location) {
  
#line 286
  jint fileLength = 0;
  EsGobJmulticardCardLocation *loc = location;
  [self selectMasterFile];
  while (loc != nil) {
    IOSByteArray *id_ = [loc getFile];
    fileLength = [self selectFileByIdWithByteArray:id_];
    loc = [loc getChild];
  }
  return fileLength;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardIso7816fourAbstractIso7816FourCard)
