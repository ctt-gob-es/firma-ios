//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/InvalidCardException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobJmulticardCardInvalidCardException")
#ifdef RESTRICT_EsGobJmulticardCardInvalidCardException
#define INCLUDE_ALL_EsGobJmulticardCardInvalidCardException 0
#else
#define INCLUDE_ALL_EsGobJmulticardCardInvalidCardException 1
#endif
#undef RESTRICT_EsGobJmulticardCardInvalidCardException

#if !defined (EsGobJmulticardCardInvalidCardException_) && (INCLUDE_ALL_EsGobJmulticardCardInvalidCardException || defined(INCLUDE_EsGobJmulticardCardInvalidCardException))
#define EsGobJmulticardCardInvalidCardException_

#define RESTRICT_EsGobJmulticardCardCardException 1
#define INCLUDE_EsGobJmulticardCardCardException 1
#include "es/gob/jmulticard/card/CardException.h"

@class EsGobJmulticardCardAtr;
@class IOSByteArray;
@class JavaLangThrowable;

/*!
 @brief Indica que se esperaba un tipo de tarjeta pero se ha encontrado otro no compatible.
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s.
 */
@interface EsGobJmulticardCardInvalidCardException : EsGobJmulticardCardCardException

#pragma mark Public

/*!
 @brief Construye una excepci&oacute;n de tarjeta inv&aacute;lida.
 @param desc Descripci &oacute; n de la raz &oacute; n de invalidez de la tarjeta
 */
- (instancetype)initWithNSString:(NSString *)desc;

/*!
 @brief Construye una excepci&oacute;n de tarjeta inv&aacute;lida.
 @param expectedCardName Nombre de la tarjeta esperada
 @param expectedAtr ATR de la tarjeta esperada
 @param foundAtr ATR (binario) de la tarjeta encontrada
 */
- (instancetype)initWithNSString:(NSString *)expectedCardName
      withEsGobJmulticardCardAtr:(EsGobJmulticardCardAtr *)expectedAtr
                   withByteArray:(IOSByteArray *)foundAtr;

/*!
 @brief Obtiene el ATR de la tarjeta que se esperaba.
 @return ATR de la tarjeta que se esperaba
 */
- (EsGobJmulticardCardAtr *)getExpectedAtr;

/*!
 @brief Obtiene el nombre de la tarjeta que se esperaba.
 @return nombre de la tarjeta que se esperaba
 */
- (NSString *)getExpectedCardName;

/*!
 @brief Obtiene el ATR (binario) de la tarjeta encontrada.
 @return ATR (binario) de la tarjeta encontrada
 */
- (IOSByteArray *)getFoundAtr;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0
           withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobJmulticardCardInvalidCardException)

FOUNDATION_EXPORT void EsGobJmulticardCardInvalidCardException_initWithNSString_(EsGobJmulticardCardInvalidCardException *self, NSString *desc);

FOUNDATION_EXPORT EsGobJmulticardCardInvalidCardException *new_EsGobJmulticardCardInvalidCardException_initWithNSString_(NSString *desc) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobJmulticardCardInvalidCardException *create_EsGobJmulticardCardInvalidCardException_initWithNSString_(NSString *desc);

FOUNDATION_EXPORT void EsGobJmulticardCardInvalidCardException_initWithNSString_withEsGobJmulticardCardAtr_withByteArray_(EsGobJmulticardCardInvalidCardException *self, NSString *expectedCardName, EsGobJmulticardCardAtr *expectedAtr, IOSByteArray *foundAtr);

FOUNDATION_EXPORT EsGobJmulticardCardInvalidCardException *new_EsGobJmulticardCardInvalidCardException_initWithNSString_withEsGobJmulticardCardAtr_withByteArray_(NSString *expectedCardName, EsGobJmulticardCardAtr *expectedAtr, IOSByteArray *foundAtr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobJmulticardCardInvalidCardException *create_EsGobJmulticardCardInvalidCardException_initWithNSString_withEsGobJmulticardCardAtr_withByteArray_(NSString *expectedCardName, EsGobJmulticardCardAtr *expectedAtr, IOSByteArray *foundAtr);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardCardInvalidCardException)

#endif

#pragma pop_macro("INCLUDE_ALL_EsGobJmulticardCardInvalidCardException")
