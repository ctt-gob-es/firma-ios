//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/Atr.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/card/Atr.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/card/Atr must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardCardAtr () {
 @public
  /*!
   @brief M&aacute;scara de posiciones con valor constante dentro de los octetos del ATR.
   */
  IOSByteArray *mask_;
}

+ (jint)hashCodeWithByteArray:(IOSByteArray *)a;

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardCardAtr, mask_, IOSByteArray *)

/*!
 @brief Identificador de versi&oacute;n para la serializaci&oacute;n.
 */
inline jlong EsGobJmulticardCardAtr_get_serialVersionUID(void);
#define EsGobJmulticardCardAtr_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardCardAtr, serialVersionUID, jlong)

__attribute__((unused)) static jint EsGobJmulticardCardAtr_hashCodeWithByteArray_(IOSByteArray *a);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/Atr.java"


#line 48
@implementation EsGobJmulticardCardAtr


#line 63
- (instancetype)initWithByteArray:(IOSByteArray *)cardAtr
                    withByteArray:(IOSByteArray *)atrMask {
  EsGobJmulticardCardAtr_initWithByteArray_withByteArray_(self, cardAtr, atrMask);
  return self;
}


#line 73
- (NSString *)description {
  
#line 75
  return EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_([self getBytes], false);
}


#line 80
- (IOSByteArray *)getMask {
  return [((IOSByteArray *) nil_chk(mask_)) java_clone];
}


#line 86
- (IOSByteArray *)getBytes {
  IOSByteArray *tmp = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(atrBytes_))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(atrBytes_, 0, tmp, 0, atrBytes_->size_);
  return tmp;
}

- (jboolean)isEqual:(id)o {
  
#line 94
  if (!([o isKindOfClass:[EsGobJmulticardCardAtr class]])) {
    return false;
  }
  
#line 98
  IOSByteArray *tmpAtrBytes;
  tmpAtrBytes = [((EsGobJmulticardCardAtr *) nil_chk(((EsGobJmulticardCardAtr *) cast_chk(o, [EsGobJmulticardCardAtr class])))) getBytes];
  
#line 101
  if (((IOSByteArray *) nil_chk(atrBytes_))->size_ < ((IOSByteArray *) nil_chk(tmpAtrBytes))->size_) {
    return false;
  }
  jint offset = atrBytes_->size_ - tmpAtrBytes->size_;
  for (jint i = tmpAtrBytes->size_ - 1; i >= 0; i--) {
    if ((IOSByteArray_Get(atrBytes_, i + offset) & IOSByteArray_Get(nil_chk(mask_), i + offset)) != (IOSByteArray_Get(tmpAtrBytes, i) & IOSByteArray_Get(mask_, i + offset))) {
      return false;
    }
  }
  return true;
}


#line 113
- (NSUInteger)hash {
  
#line 115
  return EsGobJmulticardCardAtr_hashCodeWithByteArray_(atrBytes_) + EsGobJmulticardCardAtr_hashCodeWithByteArray_(mask_);
}


#line 118
+ (jint)hashCodeWithByteArray:(IOSByteArray *)a {
  return EsGobJmulticardCardAtr_hashCodeWithByteArray_(a);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withByteArray:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(getMask);
  methods[3].selector = @selector(getBytes);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(hashCodeWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EsGobJmulticardCardAtr_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "atrBytes_", "[B", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "mask_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B[B", "toString", "equals", "LNSObject;", "hashCode", "[B" };
  static const J2ObjcClassInfo _EsGobJmulticardCardAtr = { "Atr", "es.gob.jmulticard.card", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardCardAtr;
}

@end


#line 63
void EsGobJmulticardCardAtr_initWithByteArray_withByteArray_(EsGobJmulticardCardAtr *self, IOSByteArray *cardAtr, IOSByteArray *atrMask) {
  NSObject_init(self);
  
#line 64
  if (cardAtr == nil || atrMask == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El ATR y su mascara no pueden ser nulos");
  }
  self->atrBytes_ = [IOSByteArray newArrayWithLength:cardAtr->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(cardAtr, 0, self->atrBytes_, 0, cardAtr->size_);
  self->mask_ = [IOSByteArray newArrayWithLength:atrMask->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(atrMask, 0, self->mask_, 0, atrMask->size_);
}


#line 63
EsGobJmulticardCardAtr *new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_(IOSByteArray *cardAtr, IOSByteArray *atrMask) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardAtr, initWithByteArray_withByteArray_, cardAtr, atrMask)
}


#line 63
EsGobJmulticardCardAtr *create_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_(IOSByteArray *cardAtr, IOSByteArray *atrMask) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardAtr, initWithByteArray_withByteArray_, cardAtr, atrMask)
}


#line 118
jint EsGobJmulticardCardAtr_hashCodeWithByteArray_(IOSByteArray *a) {
  EsGobJmulticardCardAtr_initialize();
  
#line 119
  if (a == nil) {
    return 0;
  }
  jint result = 1;
  {
    IOSByteArray *a__ =
#line 123
    a;
    jbyte const *b__ = a__->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte element = *b__++;
      
#line 124
      result = 31 * result + element;
    }
  }
  
#line 126
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardAtr)
