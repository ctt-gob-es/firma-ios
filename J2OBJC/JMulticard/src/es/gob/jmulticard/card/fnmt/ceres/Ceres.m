//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/fnmt/ceres/Ceres.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/CryptoHelper.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/JmcLogger.h"
#include "es/gob/jmulticard/apdu/CommandApdu.h"
#include "es/gob/jmulticard/apdu/ResponseApdu.h"
#include "es/gob/jmulticard/apdu/StatusWord.h"
#include "es/gob/jmulticard/apdu/ceres/CeresLoadDataApduCommand.h"
#include "es/gob/jmulticard/apdu/ceres/CeresSignDataApduCommand.h"
#include "es/gob/jmulticard/apdu/ceres/CeresVerifyApduCommand.h"
#include "es/gob/jmulticard/apdu/dnie/RetriesLeftApduCommand.h"
#include "es/gob/jmulticard/apdu/iso7816eight/EnvelopeDataApduCommand.h"
#include "es/gob/jmulticard/asn1/custom/fnmt/ceres/CeresCdf.h"
#include "es/gob/jmulticard/asn1/custom/fnmt/ceres/CeresPrKdf.h"
#include "es/gob/jmulticard/asn1/der/pkcs1/DigestInfo.h"
#include "es/gob/jmulticard/asn1/der/pkcs15/Cdf.h"
#include "es/gob/jmulticard/asn1/der/pkcs15/Pkcs15Cdf.h"
#include "es/gob/jmulticard/asn1/der/pkcs15/Pkcs15PrKdf.h"
#include "es/gob/jmulticard/asn1/der/pkcs15/PrKdf.h"
#include "es/gob/jmulticard/card/Atr.h"
#include "es/gob/jmulticard/card/AuthenticationModeLockedException.h"
#include "es/gob/jmulticard/card/BadPinException.h"
#include "es/gob/jmulticard/card/CardMessages.h"
#include "es/gob/jmulticard/card/CompressionUtils.h"
#include "es/gob/jmulticard/card/CryptoCardException.h"
#include "es/gob/jmulticard/card/InvalidCardException.h"
#include "es/gob/jmulticard/card/Location.h"
#include "es/gob/jmulticard/card/PasswordCallbackNotFoundException.h"
#include "es/gob/jmulticard/card/PinException.h"
#include "es/gob/jmulticard/card/PrivateKeyReference.h"
#include "es/gob/jmulticard/card/fnmt/ceres/Ceres.h"
#include "es/gob/jmulticard/card/fnmt/ceres/CeresPrivateKeyReference.h"
#include "es/gob/jmulticard/card/iso7816eight/AbstractIso7816EightCard.h"
#include "es/gob/jmulticard/card/iso7816four/Iso7816FourCardException.h"
#include "es/gob/jmulticard/connection/ApduConnection.h"
#include "es/gob/jmulticard/connection/ApduConnectionException.h"
#include "java/io/IOException.h"
#include "java/lang/Byte.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/X509Certificate.h"
#include "java/security/interfaces/RSAPublicKey.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "javax/security/auth/callback/Callback.h"
#include "javax/security/auth/callback/CallbackHandler.h"
#include "javax/security/auth/callback/PasswordCallback.h"
#include "javax/security/auth/callback/UnsupportedCallbackException.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/card/fnmt/ceres/Ceres must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardCardFnmtCeresCeres () {
 @public
  EsGobJmulticardCryptoHelper *cryptoHelper_;
  /*!
   @brief Certificados de la tarjeta indexados por su alias.
   */
  id<JavaUtilMap> certs_;
  /*!
   @brief Alias de los certificados de la tarjeta indexados por el identificador
  interno del certificado (pasado de <code>byte[]</code> a <code>String</code>).
   */
  id<JavaUtilMap> aliasByCertAndKeyId_;
  /*!
   @brief Claves privadas de la tarjeta indexadas por el alias de su certificado
  asociado.
   */
  id<JavaUtilMap> keys_;
  JavaxSecurityAuthCallbackPasswordCallback *passwordCallback_;
  jboolean authenticated_;
  id<JavaxSecurityAuthCallbackCallbackHandler> callbackHandler_;
}

+ (void)checkAtrWithByteArray:(IOSByteArray *)atrBytes;

- (void)preload;

/*!
 @brief Oculta los certificados que no tienen una clave privada asociada.
 */
- (void)hideCertsWithoutKey;

- (void)loadDataWithInt:(jint)keyBitSize
          withByteArray:(IOSByteArray *)digestInfo;

- (jint)getPinRetriesLeft;

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardCardFnmtCeresCeres, cryptoHelper_, EsGobJmulticardCryptoHelper *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardFnmtCeresCeres, certs_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardFnmtCeresCeres, aliasByCertAndKeyId_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardFnmtCeresCeres, keys_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardFnmtCeresCeres, passwordCallback_, JavaxSecurityAuthCallbackPasswordCallback *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardFnmtCeresCeres, callbackHandler_, id<JavaxSecurityAuthCallbackCallbackHandler>)

inline IOSByteArray *EsGobJmulticardCardFnmtCeresCeres_get_ATR_MASK_TC(void);
static IOSByteArray *EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_TC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardFnmtCeresCeres, ATR_MASK_TC, IOSByteArray *)

inline EsGobJmulticardCardAtr *EsGobJmulticardCardFnmtCeresCeres_get_ATR_TC(void);
static EsGobJmulticardCardAtr *EsGobJmulticardCardFnmtCeresCeres_ATR_TC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardFnmtCeresCeres, ATR_TC, EsGobJmulticardCardAtr *)

inline IOSByteArray *EsGobJmulticardCardFnmtCeresCeres_get_ATR_MASK_ST(void);
static IOSByteArray *EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_ST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardFnmtCeresCeres, ATR_MASK_ST, IOSByteArray *)

inline EsGobJmulticardCardAtr *EsGobJmulticardCardFnmtCeresCeres_get_ATR_ST(void);
static EsGobJmulticardCardAtr *EsGobJmulticardCardFnmtCeresCeres_ATR_ST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardFnmtCeresCeres, ATR_ST, EsGobJmulticardCardAtr *)

inline IOSByteArray *EsGobJmulticardCardFnmtCeresCeres_get_ATR_MASK_SLE_FN20(void);
static IOSByteArray *EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_SLE_FN20;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardFnmtCeresCeres, ATR_MASK_SLE_FN20, IOSByteArray *)

inline EsGobJmulticardCardAtr *EsGobJmulticardCardFnmtCeresCeres_get_ATR_SLE_FN20(void);
static EsGobJmulticardCardAtr *EsGobJmulticardCardFnmtCeresCeres_ATR_SLE_FN20;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardFnmtCeresCeres, ATR_SLE_FN20, EsGobJmulticardCardAtr *)

inline IOSByteArray *EsGobJmulticardCardFnmtCeresCeres_get_ATR_MASK_SLE_FN19(void);
static IOSByteArray *EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_SLE_FN19;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardFnmtCeresCeres, ATR_MASK_SLE_FN19, IOSByteArray *)

inline EsGobJmulticardCardAtr *EsGobJmulticardCardFnmtCeresCeres_get_ATR_SLE_FN19(void);
static EsGobJmulticardCardAtr *EsGobJmulticardCardFnmtCeresCeres_ATR_SLE_FN19;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardFnmtCeresCeres, ATR_SLE_FN19, EsGobJmulticardCardAtr *)

inline jbyte EsGobJmulticardCardFnmtCeresCeres_get_CLA(void);
#define EsGobJmulticardCardFnmtCeresCeres_CLA 0
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardCardFnmtCeresCeres, CLA, jbyte)

inline EsGobJmulticardCardLocation *EsGobJmulticardCardFnmtCeresCeres_get_CDF_LOCATION(void);
static EsGobJmulticardCardLocation *EsGobJmulticardCardFnmtCeresCeres_CDF_LOCATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardFnmtCeresCeres, CDF_LOCATION, EsGobJmulticardCardLocation *)

inline EsGobJmulticardCardLocation *EsGobJmulticardCardFnmtCeresCeres_get_PRKDF_LOCATION(void);
static EsGobJmulticardCardLocation *EsGobJmulticardCardFnmtCeresCeres_PRKDF_LOCATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardFnmtCeresCeres, PRKDF_LOCATION, EsGobJmulticardCardLocation *)

inline jint EsGobJmulticardCardFnmtCeresCeres_get_MAX_APDU_SIZE(void);
#define EsGobJmulticardCardFnmtCeresCeres_MAX_APDU_SIZE 255
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardCardFnmtCeresCeres, MAX_APDU_SIZE, jint)

/*!
 @brief Nombre del Fichero Maestro.
 */
inline NSString *EsGobJmulticardCardFnmtCeresCeres_get_MASTER_FILE_NAME(void);
static NSString *EsGobJmulticardCardFnmtCeresCeres_MASTER_FILE_NAME = @"Master.File";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardFnmtCeresCeres, MASTER_FILE_NAME, NSString *)

/*!
 @brief Octeto que identifica una verificaci&oacute;n fallida del
  PIN por PIN de longitud incorrecta.
 */
inline jbyte EsGobJmulticardCardFnmtCeresCeres_get_ERROR_PIN_SW1(void);
#define EsGobJmulticardCardFnmtCeresCeres_ERROR_PIN_SW1 103
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardCardFnmtCeresCeres, ERROR_PIN_SW1, jbyte)

/*!
 @brief Octeto que identifica una verificaci&oacute;n fallida del
  PIN por PIN incorrecto.
 */
inline jbyte EsGobJmulticardCardFnmtCeresCeres_get_ERROR_PIN_SW2(void);
#define EsGobJmulticardCardFnmtCeresCeres_ERROR_PIN_SW2 99
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardCardFnmtCeresCeres, ERROR_PIN_SW2, jbyte)

__attribute__((unused)) static void EsGobJmulticardCardFnmtCeresCeres_checkAtrWithByteArray_(IOSByteArray *atrBytes);

__attribute__((unused)) static void EsGobJmulticardCardFnmtCeresCeres_preload(EsGobJmulticardCardFnmtCeresCeres *self);

__attribute__((unused)) static void EsGobJmulticardCardFnmtCeresCeres_hideCertsWithoutKey(EsGobJmulticardCardFnmtCeresCeres *self);

__attribute__((unused)) static void EsGobJmulticardCardFnmtCeresCeres_loadDataWithInt_withByteArray_(EsGobJmulticardCardFnmtCeresCeres *self, jint keyBitSize, IOSByteArray *digestInfo);

__attribute__((unused)) static jint EsGobJmulticardCardFnmtCeresCeres_getPinRetriesLeft(EsGobJmulticardCardFnmtCeresCeres *self);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/fnmt/ceres/Ceres.java"

J2OBJC_INITIALIZED_DEFN(EsGobJmulticardCardFnmtCeresCeres)


#line 94
@implementation EsGobJmulticardCardFnmtCeresCeres


#line 170
- (void)setPasswordCallbackWithJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)pwc {
  passwordCallback_ = pwc;
}

+ (void)checkAtrWithByteArray:(IOSByteArray *)atrBytes {
  EsGobJmulticardCardFnmtCeresCeres_checkAtrWithByteArray_(atrBytes);
}


#line 205
+ (void)connectWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn {
  EsGobJmulticardCardFnmtCeresCeres_connectWithEsGobJmulticardConnectionApduConnection_(conn);
}


#line 215
- (instancetype)initWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                                withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)ch {
  EsGobJmulticardCardFnmtCeresCeres_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_(self, conn, ch);
  return self;
}


#line 235
- (void)preload {
  EsGobJmulticardCardFnmtCeresCeres_preload(self);
}


#line 320
- (void)hideCertsWithoutKey {
  EsGobJmulticardCardFnmtCeresCeres_hideCertsWithoutKey(self);
}


#line 335
- (IOSObjectArray *)getAliases {
  
#line 337
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(certs_)) keySet])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSString_class_()]];
}


#line 340
- (JavaSecurityCertX509Certificate *)getCertificateWithNSString:(NSString *)alias {
  
#line 342
  return [((id<JavaUtilMap>) nil_chk(certs_)) getWithId:alias];
}


#line 345
- (id<EsGobJmulticardCardPrivateKeyReference>)getPrivateKeyWithNSString:(NSString *)alias {
  
#line 347
  return new_EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference_initWithByte_withInt_(
#line 348
  [((JavaLangByte *) nil_chk([((id<JavaUtilMap>) nil_chk(keys_)) getWithId:alias])) charValue],
#line 349
  [((JavaMathBigInteger *) nil_chk([((id<JavaSecurityInterfacesRSAPublicKey>) nil_chk(((id<JavaSecurityInterfacesRSAPublicKey>) cast_check([((JavaSecurityCertX509Certificate *) nil_chk([((id<JavaUtilMap>) nil_chk(certs_)) getWithId:alias])) getPublicKey], JavaSecurityInterfacesRSAPublicKey_class_())))) getModulus])) bitLength]);
}


#line 353
- (IOSByteArray *)signWithByteArray:(IOSByteArray *)data
                       withNSString:(NSString *)algorithm
withEsGobJmulticardCardPrivateKeyReference:(id<EsGobJmulticardCardPrivateKeyReference>)keyRef {
  
#line 358
  if (data == nil) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_(@"Los datos a firmar no pueden ser nulos");
  }
  if (keyRef == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"La clave privada no puede ser nula");
  }
  if (!([keyRef isKindOfClass:[EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"La clave proporcionada debe ser de tipo CeresPrivateKeyReference, pero se ha recibido de tipo ",
#line 366
    [[keyRef java_getClass] getName]));
  }
  
#line 369
  EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference *ceresPrivateKey = (EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference *) cast_chk(keyRef, [EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference class]);
  
#line 372
  if (!authenticated_) {
    @try {
      [self verifyPinWithJavaxSecurityAuthCallbackPasswordCallback:[self getInternalPasswordCallback]];
      authenticated_ = true;
    }
    @catch (EsGobJmulticardConnectionApduConnectionException *e1) {
      @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error en la verificacion de PIN", e1);
    }
  }
  
#line 382
  IOSByteArray *digestInfo;
  @try {
    digestInfo = EsGobJmulticardAsn1DerPkcs1DigestInfo_encodeWithNSString_withByteArray_withEsGobJmulticardCryptoHelper_(algorithm, data, cryptoHelper_);
  }
  @catch (JavaLangException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Error creando el DigestInfo para la firma con el algoritmo ", algorithm), e);
  }
  
#line 390
  EsGobJmulticardCardFnmtCeresCeres_loadDataWithInt_withByteArray_(self, [ceresPrivateKey getKeyBitSize], digestInfo);
  
#line 392
  EsGobJmulticardApduResponseApdu *res;
  
#line 394
  EsGobJmulticardApduCommandApdu *cmd = new_EsGobJmulticardApduCeresCeresSignDataApduCommand_initWithByte_withInt_(
#line 395
  [ceresPrivateKey getKeyReference],
#line 396
  [ceresPrivateKey getKeyBitSize]);
  
#line 398
  @try {
    res = [self sendArbitraryApduWithEsGobJmulticardApduCommandApdu:cmd];
  }
  @catch (EsGobJmulticardConnectionApduConnectionException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error firmando los datos", e);
  }
  if (![((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_(JreStrcat("$$", @"No se han podido firmar los datos. Respuesta: ", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 406
    [res getBytes], true)));
  }
  
#line 409
  return [res getData];
}


#line 412
- (void)loadDataWithInt:(jint)keyBitSize
          withByteArray:(IOSByteArray *)digestInfo {
  EsGobJmulticardCardFnmtCeresCeres_loadDataWithInt_withByteArray_(self, keyBitSize, digestInfo);
}


#line 490
- (void)selectMasterFile {
  
#line 493
  [self selectFileByNameWithNSString:EsGobJmulticardCardFnmtCeresCeres_MASTER_FILE_NAME];
}

- (void)verifyPinWithJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)pinPc {
  
#line 500
  if (pinPc == nil) {
    @throw new_EsGobJmulticardCardPasswordCallbackNotFoundException_initWithNSString_(@"No se ha establecido un PasswordCallback");
  }
  EsGobJmulticardApduCommandApdu *chv = new_EsGobJmulticardApduCeresCeresVerifyApduCommand_initWithByte_withJavaxSecurityAuthCallbackPasswordCallback_(EsGobJmulticardCardFnmtCeresCeres_CLA, pinPc);
  EsGobJmulticardApduResponseApdu *verifyResponse = [self sendArbitraryApduWithEsGobJmulticardApduCommandApdu:chv];
  if (![((EsGobJmulticardApduResponseApdu *) nil_chk(verifyResponse)) isOk]) {
    if (
#line 507
    [((EsGobJmulticardApduStatusWord *) nil_chk([verifyResponse getStatusWord])) getMsb] == EsGobJmulticardCardFnmtCeresCeres_ERROR_PIN_SW1 ||
#line 508
    [((EsGobJmulticardApduStatusWord *) nil_chk([verifyResponse getStatusWord])) getMsb] == EsGobJmulticardCardFnmtCeresCeres_ERROR_PIN_SW2) {
      
#line 510
      @throw new_EsGobJmulticardCardBadPinException_initWithInt_([((EsGobJmulticardApduStatusWord *) nil_chk([verifyResponse getStatusWord])) getLsb] - (jbyte) (jint) 0xC0);
    }
    if ([new_EsGobJmulticardApduStatusWord_initWithByte_withByte_((jbyte) (jint) 0x69, (jbyte) (jint) 0x83) isEqual:[verifyResponse getStatusWord]]) {
      @throw new_EsGobJmulticardCardAuthenticationModeLockedException_init();
    }
    @throw new_EsGobJmulticardConnectionApduConnectionException_initWithJavaLangThrowable_(new_EsGobJmulticardCardIso7816fourIso7816FourCardException_initWithNSString_withEsGobJmulticardApduStatusWord_(JreStrcat("$@C", @"Error en la verificacion de PIN (",
#line 517
    [verifyResponse getStatusWord], ')'),
#line 518
    [verifyResponse getStatusWord]));
  }
}


#line 527
- (JavaxSecurityAuthCallbackPasswordCallback *)getInternalPasswordCallback {
  if (passwordCallback_ != nil) {
    jint retriesLeft = EsGobJmulticardCardFnmtCeresCeres_getPinRetriesLeft(self);
    if (retriesLeft == 0) {
      @throw new_EsGobJmulticardCardAuthenticationModeLockedException_init();
    }
    return passwordCallback_;
  }
  if (callbackHandler_ != nil) {
    jint retriesLeft = EsGobJmulticardCardFnmtCeresCeres_getPinRetriesLeft(self);
    if (retriesLeft == 0) {
      @throw new_EsGobJmulticardCardAuthenticationModeLockedException_init();
    }
    JavaxSecurityAuthCallbackPasswordCallback *pwc = new_JavaxSecurityAuthCallbackPasswordCallback_initWithNSString_withBoolean_(EsGobJmulticardCardCardMessages_getStringWithNSString_withNSString_(
#line 541
    @"Gen.0", JavaLangInteger_toStringWithInt_(retriesLeft)),
#line 542
    false);
    
#line 544
    @try {
      [((id<JavaxSecurityAuthCallbackCallbackHandler>) nil_chk(callbackHandler_)) handleWithJavaxSecurityAuthCallbackCallbackArray:[IOSObjectArray newArrayWithObjects:(id[]){ pwc } count:1 type:JavaxSecurityAuthCallbackCallback_class_()]];
    }
    @catch (JavaIoIOException *e) {
      @throw new_EsGobJmulticardCardPinException_initWithNSString_withJavaLangThrowable_(@"Error obteniendo el PIN del CallbackHandler", e);
    }
    @catch (JavaxSecurityAuthCallbackUnsupportedCallbackException *e) {
      @throw new_EsGobJmulticardCardPinException_initWithNSString_withJavaLangThrowable_(@"El CallbackHandler no soporta pedir el PIN al usuario", e);
    }
    return pwc;
  }
  @throw new_EsGobJmulticardCardPinException_initWithNSString_(@"No hay ningun metodo para obtener el PIN");
}


#line 558
- (jint)getPinRetriesLeft {
  return EsGobJmulticardCardFnmtCeresCeres_getPinRetriesLeft(self);
}


#line 570
- (NSString *)getCardName {
  
#line 572
  return @"FNMT-RCM CERES";
}


#line 577
- (id<JavaxSecurityAuthCallbackCallbackHandler>)getCallbackHandler {
  return callbackHandler_;
}


#line 583
- (void)setCallbackHandlerWithJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)callh {
  callbackHandler_ = callh;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x9, 5, 6, 7, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, 7, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 9, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardPrivateKeyReference;", 0x1, 12, 11, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 13, 14, 15, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, 18, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 19, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 1, 21, -1, -1, -1 },
    { NULL, "LJavaxSecurityAuthCallbackPasswordCallback;", 0x4, -1, -1, 22, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, 22, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxSecurityAuthCallbackCallbackHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setPasswordCallbackWithJavaxSecurityAuthCallbackPasswordCallback:);
  methods[1].selector = @selector(checkAtrWithByteArray:);
  methods[2].selector = @selector(connectWithEsGobJmulticardConnectionApduConnection:);
  methods[3].selector = @selector(initWithEsGobJmulticardConnectionApduConnection:withEsGobJmulticardCryptoHelper:);
  methods[4].selector = @selector(preload);
  methods[5].selector = @selector(hideCertsWithoutKey);
  methods[6].selector = @selector(getAliases);
  methods[7].selector = @selector(getCertificateWithNSString:);
  methods[8].selector = @selector(getPrivateKeyWithNSString:);
  methods[9].selector = @selector(signWithByteArray:withNSString:withEsGobJmulticardCardPrivateKeyReference:);
  methods[10].selector = @selector(loadDataWithInt:withByteArray:);
  methods[11].selector = @selector(selectMasterFile);
  methods[12].selector = @selector(verifyPinWithJavaxSecurityAuthCallbackPasswordCallback:);
  methods[13].selector = @selector(getInternalPasswordCallback);
  methods[14].selector = @selector(getPinRetriesLeft);
  methods[15].selector = @selector(getCardName);
  methods[16].selector = @selector(getCallbackHandler);
  methods[17].selector = @selector(setCallbackHandlerWithJavaxSecurityAuthCallbackCallbackHandler:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ATR_MASK_TC", "[B", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "ATR_TC", "LEsGobJmulticardCardAtr;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "ATR_MASK_ST", "[B", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "ATR_ST", "LEsGobJmulticardCardAtr;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "ATR_MASK_SLE_FN20", "[B", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "ATR_SLE_FN20", "LEsGobJmulticardCardAtr;", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "ATR_MASK_SLE_FN19", "[B", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "ATR_SLE_FN19", "LEsGobJmulticardCardAtr;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "CLA", "B", .constantValue.asChar = EsGobJmulticardCardFnmtCeresCeres_CLA, 0x1a, -1, -1, -1, -1 },
    { "cryptoHelper_", "LEsGobJmulticardCryptoHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "CDF_LOCATION", "LEsGobJmulticardCardLocation;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "PRKDF_LOCATION", "LEsGobJmulticardCardLocation;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "MAX_APDU_SIZE", "I", .constantValue.asInt = EsGobJmulticardCardFnmtCeresCeres_MAX_APDU_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MASTER_FILE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "ERROR_PIN_SW1", "B", .constantValue.asChar = EsGobJmulticardCardFnmtCeresCeres_ERROR_PIN_SW1, 0x1a, -1, -1, -1, -1 },
    { "ERROR_PIN_SW2", "B", .constantValue.asChar = EsGobJmulticardCardFnmtCeresCeres_ERROR_PIN_SW2, 0x1a, -1, -1, -1, -1 },
    { "certs_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 36, -1 },
    { "aliasByCertAndKeyId_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 37, -1 },
    { "keys_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 38, -1 },
    { "passwordCallback_", "LJavaxSecurityAuthCallbackPasswordCallback;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "authenticated_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "callbackHandler_", "LJavaxSecurityAuthCallbackCallbackHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setPasswordCallback", "LJavaxSecurityAuthCallbackPasswordCallback;", "checkAtr", "[B", "LEsGobJmulticardCardInvalidCardException;", "connect", "LEsGobJmulticardConnectionApduConnection;", "LEsGobJmulticardConnectionApduConnectionException;LEsGobJmulticardCardInvalidCardException;", "LEsGobJmulticardConnectionApduConnection;LEsGobJmulticardCryptoHelper;", "LEsGobJmulticardCardIso7816fourIso7816FourCardException;LJavaIoIOException;LJavaSecurityCertCertificateException;LEsGobJmulticardAsn1Asn1Exception;LEsGobJmulticardAsn1TlvException;", "getCertificate", "LNSString;", "getPrivateKey", "sign", "[BLNSString;LEsGobJmulticardCardPrivateKeyReference;", "LEsGobJmulticardCardCryptoCardException;LEsGobJmulticardCardPinException;", "loadData", "I[B", "LEsGobJmulticardCardCryptoCardException;", "LEsGobJmulticardConnectionApduConnectionException;LEsGobJmulticardCardIso7816fourIso7816FourCardException;", "verifyPin", "LEsGobJmulticardConnectionApduConnectionException;LEsGobJmulticardCardPinException;LEsGobJmulticardCardPasswordCallbackNotFoundException;", "LEsGobJmulticardCardPinException;", "setCallbackHandler", "LJavaxSecurityAuthCallbackCallbackHandler;", &EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_TC, &EsGobJmulticardCardFnmtCeresCeres_ATR_TC, &EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_ST, &EsGobJmulticardCardFnmtCeresCeres_ATR_ST, &EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_SLE_FN20, &EsGobJmulticardCardFnmtCeresCeres_ATR_SLE_FN20, &EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_SLE_FN19, &EsGobJmulticardCardFnmtCeresCeres_ATR_SLE_FN19, &EsGobJmulticardCardFnmtCeresCeres_CDF_LOCATION, &EsGobJmulticardCardFnmtCeresCeres_PRKDF_LOCATION, &EsGobJmulticardCardFnmtCeresCeres_MASTER_FILE_NAME, "Ljava/util/Map<Ljava/lang/String;Ljava/security/cert/X509Certificate;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Byte;>;" };
  static const J2ObjcClassInfo _EsGobJmulticardCardFnmtCeresCeres = { "Ceres", "es.gob.jmulticard.card.fnmt.ceres", ptrTable, methods, fields, 7, 0x11, 18, 22, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardCardFnmtCeresCeres;
}

+ (void)initialize {
  if (self == [EsGobJmulticardCardFnmtCeresCeres class]) {
    EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_TC = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 97
      (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0x00, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff,
#line 98
      (jbyte) (jint) 0xff, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff } count:20];
      EsGobJmulticardCardFnmtCeresCeres_ATR_TC = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 101
        (jbyte) (jint) 0x3B, (jbyte) (jint) 0x7F, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x6A, (jbyte) (jint) 0x46, (jbyte) (jint) 0x4E, (jbyte) (jint) 0x4d,
#line 102
        (jbyte) (jint) 0x54, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x03, (jbyte) (jint) 0x90, (jbyte) (jint) 0x00 } count:20],
#line 103
        EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_TC);
        EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_ST = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 106
          (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0x00, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff,
#line 107
          (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff } count:20];
          EsGobJmulticardCardFnmtCeresCeres_ATR_ST = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 110
            (jbyte) (jint) 0x3B, (jbyte) (jint) 0x7F, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x6A, (jbyte) (jint) 0x43, (jbyte) (jint) 0x45, (jbyte) (jint) 0x52,
#line 111
            (jbyte) (jint) 0x45, (jbyte) (jint) 0x53, (jbyte) (jint) 0x02, (jbyte) (jint) 0x2c, (jbyte) (jint) 0x34, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x03, (jbyte) (jint) 0x90, (jbyte) (jint) 0x00 } count:20],
#line 112
            EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_ST);
            EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_SLE_FN20 = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 115
              (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff,
#line 116
              (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff } count:21];
              EsGobJmulticardCardFnmtCeresCeres_ATR_SLE_FN20 = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 119
                (jbyte) (jint) 0x3B, (jbyte) (jint) 0xeF, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x40, (jbyte) (jint) 0x14, (jbyte) (jint) 0x80, (jbyte) (jint) 0x25, (jbyte) (jint) 0x43, (jbyte) (jint) 0x45,
#line 120
                (jbyte) (jint) 0x52, (jbyte) (jint) 0x45, (jbyte) (jint) 0x53, (jbyte) (jint) 0x57, (jbyte) (jint) 0x05, (jbyte) (jint) 0x60, (jbyte) (jint) 0x01, (jbyte) (jint) 0x02, (jbyte) (jint) 0x03, (jbyte) (jint) 0x90, (jbyte) (jint) 0x00 } count:21],
#line 121
                EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_SLE_FN20);
                EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_SLE_FN19 = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 124
                  (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff,
#line 125
                  (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff } count:21];
                  EsGobJmulticardCardFnmtCeresCeres_ATR_SLE_FN19 = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 128
                    (jbyte) (jint) 0x3B, (jbyte) (jint) 0xeF, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x40, (jbyte) (jint) 0x14, (jbyte) (jint) 0x80, (jbyte) (jint) 0x25, (jbyte) (jint) 0x43, (jbyte) (jint) 0x45,
#line 129
                    (jbyte) (jint) 0x52, (jbyte) (jint) 0x45, (jbyte) (jint) 0x53, (jbyte) (jint) 0x57, (jbyte) (jint) 0x01, (jbyte) (jint) 0x16, (jbyte) (jint) 0x01, (jbyte) (jint) 0x01, (jbyte) (jint) 0x03, (jbyte) (jint) 0x90, (jbyte) (jint) 0x00 } count:21],
#line 130
                    EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_SLE_FN19);
                    EsGobJmulticardCardFnmtCeresCeres_CDF_LOCATION = new_EsGobJmulticardCardLocation_initWithNSString_(
#line 136
                    @"50156004");
                    EsGobJmulticardCardFnmtCeresCeres_PRKDF_LOCATION = new_EsGobJmulticardCardLocation_initWithNSString_(
#line 137
                    @"50156001");
                    J2OBJC_SET_INITIALIZED(EsGobJmulticardCardFnmtCeresCeres)
                  }
                }

@end


#line 174
void EsGobJmulticardCardFnmtCeresCeres_checkAtrWithByteArray_(IOSByteArray *atrBytes) {
  EsGobJmulticardCardFnmtCeresCeres_initialize();
  
#line 175
  EsGobJmulticardCardAtr *tmpAtr = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_(atrBytes, EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_TC);
  if ([((EsGobJmulticardCardAtr *) nil_chk(EsGobJmulticardCardFnmtCeresCeres_ATR_TC)) isEqual:tmpAtr]) {
    if (IOSByteArray_Get(nil_chk(atrBytes), 15) >= (jbyte) (jint) 0x04 && IOSByteArray_Get(atrBytes, 16) >= (jbyte) (jint) 0x30) {
      @throw new_EsGobJmulticardCardInvalidCardException_initWithNSString_(JreStrcat("$$C$$", @"Encontrada CERES en version ", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_([IOSByteArray newArrayWithBytes:(jbyte[]){ IOSByteArray_Get(
#line 180
      atrBytes, 15) } count:1], false), '.', EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_([IOSByteArray newArrayWithBytes:(jbyte[]){ IOSByteArray_Get(atrBytes, 16) } count:1], false), @", pero las versiones iguales o superiores a la 04.30 no estan soportadas por este controlador"));
    }
    
#line 184
    return;
  }
  tmpAtr = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_(atrBytes, EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_ST);
  if ([((EsGobJmulticardCardAtr *) nil_chk(EsGobJmulticardCardFnmtCeresCeres_ATR_ST)) isEqual:tmpAtr]) {
    return;
  }
  tmpAtr = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_(atrBytes, EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_SLE_FN19);
  if ([((EsGobJmulticardCardAtr *) nil_chk(EsGobJmulticardCardFnmtCeresCeres_ATR_SLE_FN19)) isEqual:tmpAtr]) {
    return;
  }
  tmpAtr = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_(atrBytes, EsGobJmulticardCardFnmtCeresCeres_ATR_MASK_SLE_FN20);
  if ([((EsGobJmulticardCardAtr *) nil_chk(EsGobJmulticardCardFnmtCeresCeres_ATR_SLE_FN20)) isEqual:tmpAtr]) {
    return;
  }
  @throw new_EsGobJmulticardCardInvalidCardException_initWithNSString_withEsGobJmulticardCardAtr_withByteArray_(@"CERES", EsGobJmulticardCardFnmtCeresCeres_ATR_TC, atrBytes);
}


#line 205
void EsGobJmulticardCardFnmtCeresCeres_connectWithEsGobJmulticardConnectionApduConnection_(id<EsGobJmulticardConnectionApduConnection> conn) {
  EsGobJmulticardCardFnmtCeresCeres_initialize();
  
#line 206
  [((id<EsGobJmulticardConnectionApduConnection>) nil_chk(conn)) open];
  EsGobJmulticardCardFnmtCeresCeres_checkAtrWithByteArray_([conn reset]);
}


#line 215
void EsGobJmulticardCardFnmtCeresCeres_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_(EsGobJmulticardCardFnmtCeresCeres *self, id<EsGobJmulticardConnectionApduConnection> conn, EsGobJmulticardCryptoHelper *ch) {
  EsGobJmulticardCardIso7816eightAbstractIso7816EightCard_initWithByte_withEsGobJmulticardConnectionApduConnection_(self, EsGobJmulticardCardFnmtCeresCeres_CLA,
#line 217
  conn);
  self->passwordCallback_ =
#line 163
  nil;
  self->authenticated_ =
#line 165
  false;
  
#line 218
  if (ch == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El CryptoHelper no puede ser nulo");
  }
  
#line 222
  EsGobJmulticardCardFnmtCeresCeres_connectWithEsGobJmulticardConnectionApduConnection_([self getConnection]);
  
#line 224
  @try {
    EsGobJmulticardCardFnmtCeresCeres_preload(self);
  }
  @catch (JavaLangException *e) {
    @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_withJavaLangThrowable_(
#line 229
    @"Error cargando las estructuras iniciales de la tarjeta", e);
  }
  
#line 232
  self->cryptoHelper_ = ch;
}


#line 215
EsGobJmulticardCardFnmtCeresCeres *new_EsGobJmulticardCardFnmtCeresCeres_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_(id<EsGobJmulticardConnectionApduConnection> conn, EsGobJmulticardCryptoHelper *ch) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardFnmtCeresCeres, initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_, conn, ch)
}


#line 215
EsGobJmulticardCardFnmtCeresCeres *create_EsGobJmulticardCardFnmtCeresCeres_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_(id<EsGobJmulticardConnectionApduConnection> conn, EsGobJmulticardCryptoHelper *ch) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardFnmtCeresCeres, initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_, conn, ch)
}


#line 235
void EsGobJmulticardCardFnmtCeresCeres_preload(EsGobJmulticardCardFnmtCeresCeres *self) {
  
#line 242
  [self selectMasterFile];
  
#line 245
  IOSByteArray *cdfBytes = [self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:EsGobJmulticardCardFnmtCeresCeres_CDF_LOCATION];
  
#line 248
  id<EsGobJmulticardAsn1DerPkcs15Pkcs15Cdf> cdf = new_EsGobJmulticardAsn1CustomFnmtCeresCeresCdf_init();
  @try {
    [cdf setDerValueWithByteArray:cdfBytes];
  }
  @catch (JavaLangException *e) {
    
#line 255
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 256
    [EsGobJmulticardCardFnmtCeresCeres_class_() getName],
#line 257
    @"preload", JreStrcat("$@", @"El CDF no es de tipo FNMT, se intenta en modo PKCS#15: ",
#line 258
    e));
    
#line 260
    cdf = new_EsGobJmulticardAsn1DerPkcs15Cdf_init();
    [cdf setDerValueWithByteArray:cdfBytes];
  }
  
#line 266
  self->certs_ = new_JavaUtilLinkedHashMap_initWithInt_([cdf getCertificateCount]);
  self->aliasByCertAndKeyId_ = new_JavaUtilLinkedHashMap_initWithInt_([cdf getCertificateCount]);
  
#line 269
  for (jint i = 0; i < [cdf getCertificateCount]; i++) {
    EsGobJmulticardCardLocation *l = new_EsGobJmulticardCardLocation_initWithNSString_(
#line 271
    [((NSString *) nil_chk([((NSString *) nil_chk([cdf getCertificatePathWithInt:i])) java_replace:@"\\" withSequence:@""])) java_trim]);
    
#line 273
    JavaSecurityCertX509Certificate *cert;
    @try {
      cert = EsGobJmulticardCardCompressionUtils_getCertificateFromCompressedOrNotDataWithByteArray_withEsGobJmulticardCryptoHelper_([self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:l], self->cryptoHelper_);
    }
    @catch (JavaIoIOException *e) {
      EsGobJmulticardJmcLogger_warningWithNSString_(JreStrcat("$@", @"No se ha encontrado un certificado referenciado, se pasa al siguiente: ", e));
      continue;
    }
    
#line 282
    NSString *alias = JreStrcat("IC@", i, ' ', [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSerialNumber]);
    (void) [((id<JavaUtilMap>) nil_chk(self->aliasByCertAndKeyId_)) putWithId:EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_([cdf getCertificateIdWithInt:i], false) withId:alias];
    (void) [((id<JavaUtilMap>) nil_chk(self->certs_)) putWithId:alias withId:cert];
  }
  
#line 288
  IOSByteArray *prkdfValue = [self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:EsGobJmulticardCardFnmtCeresCeres_PRKDF_LOCATION];
  
#line 291
  id<EsGobJmulticardAsn1DerPkcs15Pkcs15PrKdf> prkdf = new_EsGobJmulticardAsn1DerPkcs15PrKdf_init();
  @try {
    [prkdf setDerValueWithByteArray:prkdfValue];
  }
  @catch (JavaLangException *e) {
    
#line 298
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 299
    [EsGobJmulticardCardFnmtCeresCeres_class_() getName],
#line 300
    @"preload", JreStrcat("$@", @"El PrKDF no es de tipo PKCS#15, se intenta en modo FNMT: ",
#line 301
    e));
    
#line 303
    prkdf = new_EsGobJmulticardAsn1CustomFnmtCeresCeresPrKdf_init();
    [prkdf setDerValueWithByteArray:prkdfValue];
  }
  
#line 307
  self->keys_ = new_JavaUtilLinkedHashMap_init();
  for (jint i = 0; i < [prkdf getKeyCount]; i++) {
    NSString *alias = [((id<JavaUtilMap>) nil_chk(self->aliasByCertAndKeyId_)) getWithId:EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_([prkdf getKeyIdWithInt:i], false)];
    if (alias != nil) {
      (void) [((id<JavaUtilMap>) nil_chk(self->keys_)) putWithId:alias withId:JavaLangByte_valueOfWithByte_([prkdf getKeyReferenceWithInt:i])];
    }
  }
  
#line 316
  EsGobJmulticardCardFnmtCeresCeres_hideCertsWithoutKey(self);
}


#line 320
void EsGobJmulticardCardFnmtCeresCeres_hideCertsWithoutKey(EsGobJmulticardCardFnmtCeresCeres *self) {
  IOSObjectArray *aliases;
  @try {
    aliases = [self getAliases];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"No se han podido leer los alias de los certificados de la tarjeta CERES", e);
  }
  {
    IOSObjectArray *a__ =
#line 328
    aliases;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *alias = *b__++;
      
#line 329
      if ([((id<JavaUtilMap>) nil_chk(self->keys_)) getWithId:alias] == nil) {
        (void) [((id<JavaUtilMap>) nil_chk(self->certs_)) removeWithId:alias];
      }
    }
  }
}


#line 412
void EsGobJmulticardCardFnmtCeresCeres_loadDataWithInt_withByteArray_(EsGobJmulticardCardFnmtCeresCeres *self, jint keyBitSize, IOSByteArray *digestInfo) {
  IOSByteArray *paddedData;
  @try {
    paddedData = EsGobJmulticardCryptoHelper_addPkcs1PaddingForPrivateKeyOperationWithByteArray_withInt_(digestInfo, keyBitSize);
  }
  @catch (JavaIoIOException *e1) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error realizando el relleno PKCS#1 de los datos a firmar", e1);
  }
  
#line 421
  EsGobJmulticardApduResponseApdu *res;
  
#line 424
  if (keyBitSize <= 1024) {
    @try {
      res = [self sendArbitraryApduWithEsGobJmulticardApduCommandApdu:new_EsGobJmulticardApduCeresCeresLoadDataApduCommand_initWithByteArray_(paddedData)];
    }
    @catch (EsGobJmulticardConnectionApduConnectionException *e) {
      @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error enviando los datos a firmar a la tarjeta", e);
    }
    if (![((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
      @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_(JreStrcat("$$", @"No se han podido enviar los datos a firmar a la tarjeta. Respuesta: ", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 433
      [res getBytes], true)));
    }
  }
  else
#line 439
  if (keyBitSize == 2048) {
    
#line 443
    IOSByteArray *envelopedLoadDataApdu = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 444
      (jbyte) (jint) 0x90, (jbyte) (jint) 0x58, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x01, (jbyte) (jint) 0x00 } count:7];
      
#line 448
      IOSByteArray *data = [IOSByteArray newArrayWithLength:EsGobJmulticardCardFnmtCeresCeres_MAX_APDU_SIZE];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(envelopedLoadDataApdu, 0, data, 0, envelopedLoadDataApdu->size_);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(paddedData, 0, data, envelopedLoadDataApdu->size_, EsGobJmulticardCardFnmtCeresCeres_MAX_APDU_SIZE - envelopedLoadDataApdu->size_);
      
#line 452
      @try {
        res = [self sendArbitraryApduWithEsGobJmulticardApduCommandApdu:new_EsGobJmulticardApduIso7816eightEnvelopeDataApduCommand_initWithByteArray_(data)];
      }
      @catch (JavaLangException *e) {
        @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(
#line 457
        @"Error en el primer envio a la tarjeta de los datos a firmar", e);
      }
      
#line 460
      if (![((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
        @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_(JreStrcat("$$", @"No se han podido enviar (primera tanda) los datos a firmar a la tarjeta. Respuesta: ", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 462
        [res getBytes], true)));
      }
      
#line 467
      data = [IOSByteArray newArrayWithLength:8];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(paddedData, EsGobJmulticardCardFnmtCeresCeres_MAX_APDU_SIZE - envelopedLoadDataApdu->size_, data, 0, 8);
      
#line 470
      @try {
        res = [self sendArbitraryApduWithEsGobJmulticardApduCommandApdu:new_EsGobJmulticardApduIso7816eightEnvelopeDataApduCommand_initWithByteArray_(data)];
      }
      @catch (EsGobJmulticardConnectionApduConnectionException *e) {
        @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(
#line 475
        @"Error en el segundo envio a la tarjeta de los datos a firmar", e);
      }
      
#line 478
      if (![((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
        @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_(JreStrcat("$$", @"No se han podido enviar (segunda tanda) los datos a firmar a la tarjeta. Respuesta: ", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 480
        [res getBytes], true)));
      }
    }
    else {
      
#line 486
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Solo se soportan claves de 2048 o 1024 bits");
    }
  }


#line 558
jint EsGobJmulticardCardFnmtCeresCeres_getPinRetriesLeft(EsGobJmulticardCardFnmtCeresCeres *self) {
  EsGobJmulticardApduCommandApdu *verifyCommandApdu = new_EsGobJmulticardApduDnieRetriesLeftApduCommand_init();
  EsGobJmulticardApduResponseApdu *verifyResponse;
  @try {
    verifyResponse = [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) transmitWithEsGobJmulticardApduCommandApdu:verifyCommandApdu];
  }
  @catch (EsGobJmulticardConnectionApduConnectionException *e) {
    @throw new_EsGobJmulticardCardPinException_initWithNSString_withJavaLangThrowable_(@"Error obteniendo el PIN del CallbackHandler", e);
  }
  return [((EsGobJmulticardApduStatusWord *) nil_chk([((EsGobJmulticardApduResponseApdu *) nil_chk(verifyResponse)) getStatusWord])) getLsb] - (jbyte) (jint) 0xC0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardFnmtCeresCeres)
