//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/fnmt/ceres/CeresPrivateKeyReference.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/card/fnmt/ceres/CeresPrivateKeyReference.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/card/fnmt/ceres/CeresPrivateKeyReference must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference () {
 @public
  jbyte reference_;
  jint keySize_;
}

@end

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/fnmt/ceres/CeresPrivateKeyReference.java"


#line 8
@implementation EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference


#line 16
- (instancetype)initWithByte:(jbyte)r
                     withInt:(jint)kSize {
  EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference_initWithByte_withInt_(self, r, kSize);
  return self;
}


#line 23
- (jbyte)getKeyReference {
  return reference_;
}


#line 29
- (jint)getKeyBitSize {
  return keySize_;
}

- (NSString *)description {
  
#line 35
  return JreStrcat("$I$$", @"Clave privada de tarjeta CERES de ", keySize_, @" bits con referencia: 0x", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_([IOSByteArray newArrayWithBytes:(jbyte[]){ reference_ } count:1], false));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByte:withInt:);
  methods[1].selector = @selector(getKeyReference);
  methods[2].selector = @selector(getKeyBitSize);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "reference_", "B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keySize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "BI", "toString" };
  static const J2ObjcClassInfo _EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference = { "CeresPrivateKeyReference", "es.gob.jmulticard.card.fnmt.ceres", ptrTable, methods, fields, 7, 0x11, 4, 2, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference;
}

@end


#line 16
void EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference_initWithByte_withInt_(EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference *self, jbyte r, jint kSize) {
  NSObject_init(self);
  
#line 17
  self->reference_ = r;
  self->keySize_ = kSize;
}


#line 16
EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference *new_EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference_initWithByte_withInt_(jbyte r, jint kSize) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference, initWithByte_withInt_, r, kSize)
}


#line 16
EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference *create_EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference_initWithByte_withInt_(jbyte r, jint kSize) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference, initWithByte_withInt_, r, kSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardFnmtCeresCeresPrivateKeyReference)
