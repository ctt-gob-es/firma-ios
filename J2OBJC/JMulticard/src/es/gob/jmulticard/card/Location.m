//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/Location.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/card/Location.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/card/Location must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardCardLocation () {
 @public
  /*!
   @brief Elementos de la ruta hacia el fichero.
   */
  JavaUtilArrayList *path_;
}

/*!
 @brief Constructor privado.Necesario para algunas operaciones internas.
 @param locationPath Ruta asociada.
 */
- (instancetype)initWithJavaUtilArrayList:(JavaUtilArrayList *)locationPath;

/*!
 @brief Comprueba que la ruta indicada corresponda al patr&oacute;n alfanum&eacute;rico.
 @param absolutePath Ruta a comprobar.
 @throw IllegalArgumentExceptionSi la ruta es inv&aacute;lida.
 */
+ (void)checkValidPathWithNSString:(NSString *)absolutePath;

/*!
 @brief Genera un vector de enteros con los diversos identificadores de DF y EF
  indicados en la ruta absoluta que se proporciona como par&aacute;metro.
 @param absolutePath Ruta absoluta.
 */
- (void)init__WithNSString:(NSString *)absolutePath OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardCardLocation, path_, JavaUtilArrayList *)

/*!
 @brief Identificaci&oacute;n por defecto del <i>Master File</i>.
 */
inline jint EsGobJmulticardCardLocation_get_MASTER_FILE_ID(void);
#define EsGobJmulticardCardLocation_MASTER_FILE_ID 16128
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardCardLocation, MASTER_FILE_ID, jint)

inline id<JavaUtilMap> EsGobJmulticardCardLocation_get_HEXBYTES(void);
static id<JavaUtilMap> EsGobJmulticardCardLocation_HEXBYTES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardLocation, HEXBYTES, id<JavaUtilMap>)

__attribute__((unused)) static void EsGobJmulticardCardLocation_initWithJavaUtilArrayList_(EsGobJmulticardCardLocation *self, JavaUtilArrayList *locationPath);

__attribute__((unused)) static EsGobJmulticardCardLocation *new_EsGobJmulticardCardLocation_initWithJavaUtilArrayList_(JavaUtilArrayList *locationPath) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobJmulticardCardLocation *create_EsGobJmulticardCardLocation_initWithJavaUtilArrayList_(JavaUtilArrayList *locationPath);

__attribute__((unused)) static void EsGobJmulticardCardLocation_checkValidPathWithNSString_(NSString *absolutePath);

__attribute__((unused)) static void EsGobJmulticardCardLocation_init__WithNSString_(EsGobJmulticardCardLocation *self, NSString *absolutePath);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/Location.java"

J2OBJC_INITIALIZED_DEFN(EsGobJmulticardCardLocation)


#line 54
@implementation EsGobJmulticardCardLocation


#line 79
- (instancetype)initWithNSString:(NSString *)absolutePath {
  EsGobJmulticardCardLocation_initWithNSString_(self, absolutePath);
  return self;
}


#line 86
- (instancetype)initWithJavaUtilArrayList:(JavaUtilArrayList *)locationPath {
  EsGobJmulticardCardLocation_initWithJavaUtilArrayList_(self, locationPath);
  return self;
}


#line 105
- (EsGobJmulticardCardLocation *)getChild {
  EsGobJmulticardCardLocation *aux = new_EsGobJmulticardCardLocation_initWithJavaUtilArrayList_(path_);
  if (aux->path_ != nil && [aux->path_ size] > 1) {
    (void) [aux->path_ removeWithInt:0];
    return aux;
  }
  return nil;
}


#line 116
- (IOSByteArray *)getFile {
  jint address = [((JavaLangInteger *) nil_chk([((JavaUtilArrayList *) nil_chk(path_)) getWithInt:0])) intValue];
  return [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 119
    (jbyte) ((JreRShift32(address, 8)) & (jint) 0xFF), (jbyte) (address & (jint) 0xFF) } count:2];
  }


#line 125
- (IOSByteArray *)getLastFilePath {
  if ([((JavaUtilArrayList *) nil_chk(path_)) isEmpty]) {
    return nil;
  }
  jint address = [((JavaLangInteger *) nil_chk([path_ getWithInt:[path_ size] - 1])) intValue];
  return [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 131
    (jbyte) ((JreRShift32(address, 8)) & (jint) 0xFF), (jbyte) (address & (jint) 0xFF) } count:2];
  }


#line 138
+ (void)checkValidPathWithNSString:(NSString *)absolutePath {
  EsGobJmulticardCardLocation_checkValidPathWithNSString_(absolutePath);
}


#line 164
- (void)init__WithNSString:(NSString *)absolutePath {
  EsGobJmulticardCardLocation_init__WithNSString_(self, absolutePath);
}


#line 195
- (NSString *)description {
  
#line 197
  JavaLangStringBuilder *buffer = new_JavaLangStringBuilder_init();
  if (path_ != nil && ![path_ isEmpty]) {
    (void) [buffer appendWithNSString:@"3F00"];
    for (JavaLangInteger * __strong integer in path_) {
      (void) [((JavaLangStringBuilder *) nil_chk([buffer appendWithChar:'/'])) appendWithNSString:EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 205
        (jbyte) (JreRShift32([((JavaLangInteger *) nil_chk(integer)) shortValue], 8)),
#line 206
        [integer charValue] } count:2],
#line 208
        false)];
      }
    }
    
#line 213
    return [buffer description];
  }

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, 2, -1, -1 },
    { NULL, "LEsGobJmulticardCardLocation;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 3, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithJavaUtilArrayList:);
  methods[2].selector = @selector(getChild);
  methods[3].selector = @selector(getFile);
  methods[4].selector = @selector(getLastFilePath);
  methods[5].selector = @selector(checkValidPathWithNSString:);
  methods[6].selector = @selector(init__WithNSString:);
  methods[7].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MASTER_FILE_ID", "I", .constantValue.asInt = EsGobJmulticardCardLocation_MASTER_FILE_ID, 0x1a, -1, -1, -1, -1 },
    { "path_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "HEXBYTES", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 7, 8, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<Ljava/lang/Integer;>;)V", "checkValidPath", "init", "toString", "Ljava/util/ArrayList<Ljava/lang/Integer;>;", &EsGobJmulticardCardLocation_HEXBYTES, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _EsGobJmulticardCardLocation = { "Location", "es.gob.jmulticard.card", ptrTable, methods, fields, 7, 0x11, 8, 3, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardCardLocation;
}

+ (void)initialize {
  if (self == [EsGobJmulticardCardLocation class]) {
    EsGobJmulticardCardLocation_HEXBYTES = new_JavaUtilConcurrentConcurrentHashMap_init();
    {
      
#line 65
      IOSObjectArray *hex = [IOSObjectArray newArrayWithObjects:(id[]){
#line 66
        @"a", @"b", @"c", @"d", @"e", @"f" } count:6 type:NSString_class_()];
        
#line 68
        for (jint i = 0; i <= 9; i++) {
          (void) [EsGobJmulticardCardLocation_HEXBYTES putWithId:NSString_java_valueOfInt_(i) withId:JavaLangInteger_valueOfWithNSString_(NSString_java_valueOfInt_(i))];
        }
        for (jint i = 10; i < 16; i++) {
          (void) [EsGobJmulticardCardLocation_HEXBYTES putWithId:IOSObjectArray_Get(hex, i - 10) withId:JavaLangInteger_valueOfWithNSString_(NSString_java_valueOfInt_(i))];
          (void) [EsGobJmulticardCardLocation_HEXBYTES putWithId:[((NSString *) nil_chk(IOSObjectArray_Get(hex, i - 10))) uppercaseString] withId:JavaLangInteger_valueOfWithNSString_(NSString_java_valueOfInt_(i))];
        }
      }
      J2OBJC_SET_INITIALIZED(EsGobJmulticardCardLocation)
    }
  }

@end


#line 79
void EsGobJmulticardCardLocation_initWithNSString_(EsGobJmulticardCardLocation *self, NSString *absolutePath) {
  NSObject_init(self);
  
#line 80
  self->path_ = new_JavaUtilArrayList_init();
  EsGobJmulticardCardLocation_init__WithNSString_(self, absolutePath);
}


#line 79
EsGobJmulticardCardLocation *new_EsGobJmulticardCardLocation_initWithNSString_(NSString *absolutePath) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardLocation, initWithNSString_, absolutePath)
}


#line 79
EsGobJmulticardCardLocation *create_EsGobJmulticardCardLocation_initWithNSString_(NSString *absolutePath) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardLocation, initWithNSString_, absolutePath)
}


#line 86
void EsGobJmulticardCardLocation_initWithJavaUtilArrayList_(EsGobJmulticardCardLocation *self, JavaUtilArrayList *locationPath) {
  NSObject_init(self);
  
#line 87
  if (locationPath != nil) {
    jint numElements = [locationPath size];
    self->path_ = new_JavaUtilArrayList_initWithInt_(numElements);
    for (jint i = 0; i < numElements; i++) {
      [self->path_ addWithInt:
#line 92
      i withId:
#line 93
      [locationPath getWithInt:i]];
    }
  }
  else {
    
#line 98
    self->path_ = new_JavaUtilArrayList_init();
  }
}


#line 86
EsGobJmulticardCardLocation *new_EsGobJmulticardCardLocation_initWithJavaUtilArrayList_(JavaUtilArrayList *locationPath) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardLocation, initWithJavaUtilArrayList_, locationPath)
}


#line 86
EsGobJmulticardCardLocation *create_EsGobJmulticardCardLocation_initWithJavaUtilArrayList_(JavaUtilArrayList *locationPath) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardLocation, initWithJavaUtilArrayList_, locationPath)
}


#line 138
void EsGobJmulticardCardLocation_checkValidPathWithNSString_(NSString *absolutePath) {
  EsGobJmulticardCardLocation_initialize();
  
#line 139
  if (absolutePath == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Ruta nula");
  }
  if ([absolutePath java_length] == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Ruta vacia");
  }
  if (JreIntMod([((NSString *) nil_chk([absolutePath java_trim])) java_length], 4) != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Un location valido debe estar compuesto por grupos pares de octetos: ",
#line 147
    absolutePath));
  }
  
#line 150
  NSString *aux = [absolutePath lowercaseString];
  for (jint i = 0; i < [absolutePath java_length]; i++) {
    jchar currentChar = [((NSString *) nil_chk(aux)) charAtWithInt:i];
    if ((currentChar < '0' || currentChar > '9') && (currentChar < 'a' || currentChar > 'f')) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$C$$C", @"Encontrado el caracter invalido '",
#line 155
      currentChar, @"'en la ruta '", absolutePath, '\''));
    }
  }
}


#line 164
void EsGobJmulticardCardLocation_init__WithNSString_(EsGobJmulticardCardLocation *self, NSString *absolutePath) {
  
#line 166
  EsGobJmulticardCardLocation_checkValidPathWithNSString_(absolutePath);
  
#line 168
  for (jint i = 0; i < [((NSString *) nil_chk(absolutePath)) java_length]; i = i + 4) {
    jint mm = [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(EsGobJmulticardCardLocation_HEXBYTES)) getWithId:
#line 170
    [absolutePath java_substring:i endIndex:i + 1]])) intValue];
    
#line 172
    jint ml = [((JavaLangInteger *) nil_chk([EsGobJmulticardCardLocation_HEXBYTES getWithId:
#line 173
    [absolutePath java_substring:i + 1 endIndex:i + 2]])) intValue];
    
#line 175
    jint lm = [((JavaLangInteger *) nil_chk([EsGobJmulticardCardLocation_HEXBYTES getWithId:
#line 176
    [absolutePath java_substring:i + 2 endIndex:i + 3]])) intValue];
    
#line 178
    jint ll = [((JavaLangInteger *) nil_chk([EsGobJmulticardCardLocation_HEXBYTES getWithId:
#line 179
    [absolutePath java_substring:i + 3 endIndex:i + 4]])) intValue];
    
#line 181
    jint id_ = ll;
    id_ += JreLShift32(lm, 4);
    id_ += JreLShift32(ml, 8);
    id_ += JreLShift32(JreLShift32(mm, 4), 8);
    
#line 186
    if (id_ != EsGobJmulticardCardLocation_MASTER_FILE_ID) {
      [((JavaUtilArrayList *) nil_chk(self->path_)) addWithId:JavaLangInteger_valueOfWithNSString_(NSString_java_valueOfInt_(id_))];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardLocation)
