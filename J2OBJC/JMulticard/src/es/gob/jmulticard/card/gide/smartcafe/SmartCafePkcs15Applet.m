//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/gide/smartcafe/SmartCafePkcs15Applet.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/CryptoHelper.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/JmcLogger.h"
#include "es/gob/jmulticard/apdu/CommandApdu.h"
#include "es/gob/jmulticard/apdu/ResponseApdu.h"
#include "es/gob/jmulticard/apdu/StatusWord.h"
#include "es/gob/jmulticard/apdu/gide/GiDeRetriesLeftApduCommand.h"
#include "es/gob/jmulticard/apdu/gide/GiDeVerifyApduCommand.h"
#include "es/gob/jmulticard/apdu/iso7816eight/PsoSignHashApduCommand.h"
#include "es/gob/jmulticard/apdu/iso7816four/MseSetComputationApduCommand.h"
#include "es/gob/jmulticard/apdu/iso7816four/SelectFileApduResponse.h"
#include "es/gob/jmulticard/apdu/iso7816four/SelectFileByIdApduCommand.h"
#include "es/gob/jmulticard/asn1/Asn1Exception.h"
#include "es/gob/jmulticard/asn1/TlvException.h"
#include "es/gob/jmulticard/asn1/der/pkcs1/DigestInfo.h"
#include "es/gob/jmulticard/asn1/der/pkcs15/Cdf.h"
#include "es/gob/jmulticard/asn1/der/pkcs15/Odf.h"
#include "es/gob/jmulticard/asn1/der/pkcs15/Path.h"
#include "es/gob/jmulticard/card/Atr.h"
#include "es/gob/jmulticard/card/AuthenticationModeLockedException.h"
#include "es/gob/jmulticard/card/BadPinException.h"
#include "es/gob/jmulticard/card/CardMessages.h"
#include "es/gob/jmulticard/card/CryptoCardException.h"
#include "es/gob/jmulticard/card/InvalidCardException.h"
#include "es/gob/jmulticard/card/Location.h"
#include "es/gob/jmulticard/card/PasswordCallbackNotFoundException.h"
#include "es/gob/jmulticard/card/PinException.h"
#include "es/gob/jmulticard/card/PrivateKeyReference.h"
#include "es/gob/jmulticard/card/gide/smartcafe/SmartCafePkcs15Applet.h"
#include "es/gob/jmulticard/card/gide/smartcafe/SmartCafePrivateKeyReference.h"
#include "es/gob/jmulticard/card/iso7816four/AbstractIso7816FourCard.h"
#include "es/gob/jmulticard/card/iso7816four/FileNotFoundException.h"
#include "es/gob/jmulticard/card/iso7816four/Iso7816FourCardException.h"
#include "es/gob/jmulticard/connection/ApduConnection.h"
#include "es/gob/jmulticard/connection/ApduConnectionException.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/math/BigInteger.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/X509Certificate.h"
#include "java/security/interfaces/RSAPublicKey.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "javax/security/auth/callback/Callback.h"
#include "javax/security/auth/callback/CallbackHandler.h"
#include "javax/security/auth/callback/PasswordCallback.h"
#include "javax/security/auth/callback/UnsupportedCallbackException.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/card/gide/smartcafe/SmartCafePkcs15Applet must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet () {
 @public
  JavaxSecurityAuthCallbackPasswordCallback *passwordCallback_;
  id<JavaxSecurityAuthCallbackCallbackHandler> callbackHandler_;
  jboolean authenticated_;
  /*!
   @brief Manejador de funciones criptogr&aacute;ficas.
   */
  EsGobJmulticardCryptoHelper *cryptoHelper_;
}

+ (void)storeKeyOrdinalWithInt:(jint)ordinal
        withJavaMathBigInteger:(JavaMathBigInteger *)publicKeyModulus;

+ (jint)getKeyCountWithEsGobJmulticardApduResponseApdu:(EsGobJmulticardApduResponseApdu *)ra;

- (void)preloadCertificates;

- (void)preloadCertificateWithNSString:(NSString *)certificatePath
                          withNSString:(NSString *)certificateAlias;

- (jint)getPinRetriesLeft;

- (JavaxSecurityAuthCallbackPasswordCallback *)getInternalPasswordCallback;

+ (void)checkAtrWithByteArray:(IOSByteArray *)atrBytes;

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet, passwordCallback_, JavaxSecurityAuthCallbackPasswordCallback *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet, callbackHandler_, id<JavaxSecurityAuthCallbackCallbackHandler>)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet, cryptoHelper_, EsGobJmulticardCryptoHelper *)

inline IOSByteArray *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_get_ATR_MASK(void);
static IOSByteArray *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_MASK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet, ATR_MASK, IOSByteArray *)

/*!
 @brief ATR de tarjeta G&amp;D SmartCafe 3&#46;2.
 */
inline EsGobJmulticardCardAtr *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_get_ATR(void);
static EsGobJmulticardCardAtr *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet, ATR, EsGobJmulticardCardAtr *)

inline IOSByteArray *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_get_ATR_MASK_MSC(void);
static IOSByteArray *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_MASK_MSC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet, ATR_MASK_MSC, IOSByteArray *)

/*!
 @brief ATR de tarjeta MicroSD G&amp;D Mobile Security Card.
 */
inline EsGobJmulticardCardAtr *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_get_ATR_MSC(void);
static EsGobJmulticardCardAtr *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_MSC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet, ATR_MSC, EsGobJmulticardCardAtr *)

/*!
 @brief ATR de tarjeta G&amp;D SmartCafe 3&#46;2 con T=CL (v&iacute;a inal&aacute;mbrica).
 */
inline IOSByteArray *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_get_ATR_MASK_TCL(void);
static IOSByteArray *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_MASK_TCL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet, ATR_MASK_TCL, IOSByteArray *)

inline EsGobJmulticardCardAtr *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_get_ATR_TCL(void);
static EsGobJmulticardCardAtr *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_TCL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet, ATR_TCL, EsGobJmulticardCardAtr *)

inline IOSByteArray *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_get_PKCS15_NAME(void);
static IOSByteArray *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_PKCS15_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet, PKCS15_NAME, IOSByteArray *)

inline IOSByteArray *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_get_ODF_PATH(void);
static IOSByteArray *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ODF_PATH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet, ODF_PATH, IOSByteArray *)

inline IOSByteArray *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_get_MF_PATH(void);
static IOSByteArray *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_MF_PATH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet, MF_PATH, IOSByteArray *)

inline jbyte EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_get_CLA(void);
#define EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_CLA 0
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet, CLA, jbyte)

inline id<JavaUtilMap> EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_get_CERTS_BY_ALIAS(void);
static id<JavaUtilMap> EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_CERTS_BY_ALIAS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet, CERTS_BY_ALIAS, id<JavaUtilMap>)

inline id<JavaUtilMap> EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_get_KEYNO_BY_ALIAS(void);
static id<JavaUtilMap> EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_KEYNO_BY_ALIAS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet, KEYNO_BY_ALIAS, id<JavaUtilMap>)

/*!
 @brief Octeto que identifica una verificaci&oacute;n fallida del PIN.
 */
inline jbyte EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_get_ERROR_PIN_SW1(void);
#define EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ERROR_PIN_SW1 99
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet, ERROR_PIN_SW1, jbyte)

__attribute__((unused)) static void EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_storeKeyOrdinalWithInt_withJavaMathBigInteger_(jint ordinal, JavaMathBigInteger *publicKeyModulus);

__attribute__((unused)) static jint EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_getKeyCountWithEsGobJmulticardApduResponseApdu_(EsGobJmulticardApduResponseApdu *ra);

__attribute__((unused)) static void EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_preloadCertificates(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet *self);

__attribute__((unused)) static void EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_preloadCertificateWithNSString_withNSString_(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet *self, NSString *certificatePath, NSString *certificateAlias);

__attribute__((unused)) static jint EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_getPinRetriesLeft(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet *self);

__attribute__((unused)) static JavaxSecurityAuthCallbackPasswordCallback *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_getInternalPasswordCallback(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet *self);

__attribute__((unused)) static void EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_checkAtrWithByteArray_(IOSByteArray *atrBytes);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/gide/smartcafe/SmartCafePkcs15Applet.java"

J2OBJC_INITIALIZED_DEFN(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet)


#line 56
@implementation EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet


#line 123
- (instancetype)initWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                                withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHlpr {
  EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_(self, conn, cryptoHlpr);
  return self;
}


#line 227
+ (void)storeKeyOrdinalWithInt:(jint)ordinal
        withJavaMathBigInteger:(JavaMathBigInteger *)publicKeyModulus {
  EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_storeKeyOrdinalWithInt_withJavaMathBigInteger_(ordinal, publicKeyModulus);
}


#line 240
+ (jint)getKeyCountWithEsGobJmulticardApduResponseApdu:(EsGobJmulticardApduResponseApdu *)ra {
  return EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_getKeyCountWithEsGobJmulticardApduResponseApdu_(ra);
}


#line 264
- (void)setPasswordCallbackWithJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)pwc {
  passwordCallback_ = pwc;
}


#line 270
- (void)setCallbackHandlerWithJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)callh {
  callbackHandler_ = callh;
}


#line 277
+ (void)connectWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn {
  EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_connectWithEsGobJmulticardConnectionApduConnection_(conn);
}


#line 287
- (void)preloadCertificates {
  EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_preloadCertificates(self);
}


#line 325
- (void)preloadCertificateWithNSString:(NSString *)certificatePath
                          withNSString:(NSString *)certificateAlias {
  EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_preloadCertificateWithNSString_withNSString_(self, certificatePath, certificateAlias);
}


#line 363
- (NSString *)getCardName {
  
#line 365
  return @"G&D SmartCafe 3.2 (PKCS#15 Applet)";
}


#line 368
- (IOSObjectArray *)getAliases {
  
#line 370
  return [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_CERTS_BY_ALIAS)) keySet])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSString_class_()]];
}


#line 373
- (JavaSecurityCertX509Certificate *)getCertificateWithNSString:(NSString *)alias {
  
#line 375
  return [((id<JavaUtilMap>) nil_chk(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_CERTS_BY_ALIAS)) getWithId:alias];
}


#line 378
- (void)selectMasterFile {
  
#line 380
  [self selectFileByIdWithByteArray:EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_MF_PATH];
}


#line 383
- (NSString *)description {
  
#line 385
  JavaLangStringBuilder *sb = [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_([self getCardName]) appendWithNSString:
#line 386
  @"\n Tarjeta con "])) appendWithInt:
#line 387
  [((id<JavaUtilMap>) nil_chk(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_CERTS_BY_ALIAS)) size]])) appendWithNSString:
#line 388
  @" certificado(s):\n"];
  IOSObjectArray *aliases = [self getAliases];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(aliases))->size_; i++) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"  "];
    (void) [sb appendWithInt:i + 1];
    (void) [sb appendWithNSString:@" - "];
    (void) [sb appendWithNSString:IOSObjectArray_Get(aliases, i)];
  }
  return [((JavaLangStringBuilder *) nil_chk(sb)) description];
}


#line 404
- (jint)selectFileByIdWithByteArray:(IOSByteArray *)id_ {
  
#line 406
  EsGobJmulticardApduCommandApdu *selectCommand = new_EsGobJmulticardApduIso7816fourSelectFileByIdApduCommand_initWithByte_withByteArray_([self getCla], id_);
  EsGobJmulticardApduResponseApdu *res = [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) transmitWithEsGobJmulticardApduCommandApdu:selectCommand];
  if (EsGobJmulticardHexUtils_arrayEqualsWithByteArray_withByteArray_([((EsGobJmulticardApduResponseApdu *) nil_chk(res)) getBytes], [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x6a, (jbyte) (jint) 0x82 } count:2])) {
    @throw new_EsGobJmulticardCardIso7816fourFileNotFoundException_initWithByteArray_(id_);
  }
  EsGobJmulticardApduIso7816fourSelectFileApduResponse *response = new_EsGobJmulticardApduIso7816fourSelectFileApduResponse_initWithEsGobJmulticardApduApdu_(res);
  if ([response isOk]) {
    return EsGobJmulticardHexUtils_getUnsignedIntWithByteArray_withInt_([IOSByteArray newArrayWithBytes:(jbyte[]){ IOSByteArray_Get(nil_chk(
#line 415
    [response getData]), 4), IOSByteArray_Get(nil_chk(
#line 416
    [response getData]), 5) } count:2],
#line 418
    0);
  }
  
#line 421
  EsGobJmulticardApduStatusWord *sw = [response getStatusWord];
  if ([((EsGobJmulticardApduStatusWord *) nil_chk(sw)) isEqual:new_EsGobJmulticardApduStatusWord_initWithByte_withByte_((jbyte) (jint) 0x6A, (jbyte) (jint) 0x82)]) {
    @throw new_EsGobJmulticardCardIso7816fourFileNotFoundException_initWithByteArray_(id_);
  }
  @throw new_EsGobJmulticardCardIso7816fourIso7816FourCardException_initWithEsGobJmulticardApduStatusWord_withEsGobJmulticardApduApdu_(sw, selectCommand);
}


#line 428
- (void)verifyPinWithJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)psc {
  
#line 432
  if (psc == nil) {
    @throw new_EsGobJmulticardCardPasswordCallbackNotFoundException_initWithNSString_(
#line 434
    @"No se puede verificar el titular con un PasswordCallback nulo");
  }
  
#line 438
  EsGobJmulticardApduResponseApdu *verifyResponse = [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) transmitWithEsGobJmulticardApduCommandApdu:new_EsGobJmulticardApduGideGiDeVerifyApduCommand_initWithJavaxSecurityAuthCallbackPasswordCallback_(psc)];
  if (![((EsGobJmulticardApduResponseApdu *) nil_chk(verifyResponse)) isOk]) {
    if ([((EsGobJmulticardApduStatusWord *) nil_chk([verifyResponse getStatusWord])) getMsb] == EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ERROR_PIN_SW1) {
      @throw new_EsGobJmulticardCardBadPinException_initWithInt_([((EsGobJmulticardApduStatusWord *) nil_chk([verifyResponse getStatusWord])) getLsb] - (jbyte) (jint) 0xC0);
    }
    if (
#line 444
    [((EsGobJmulticardApduStatusWord *) nil_chk([verifyResponse getStatusWord])) getMsb] == (jbyte) (jint) 0x69 &&
#line 445
    [((EsGobJmulticardApduStatusWord *) nil_chk([verifyResponse getStatusWord])) getLsb] == (jbyte) (jint) 0x83) {
      
#line 447
      @throw new_EsGobJmulticardCardAuthenticationModeLockedException_init();
    }
    @throw new_EsGobJmulticardConnectionApduConnectionException_initWithJavaLangThrowable_(new_EsGobJmulticardCardIso7816fourIso7816FourCardException_initWithNSString_withEsGobJmulticardApduStatusWord_(JreStrcat("$@C", @"Error en la verificacion de PIN (",
#line 451
    [verifyResponse getStatusWord], ')'),
#line 452
    [verifyResponse getStatusWord]));
  }
}


#line 458
- (id<EsGobJmulticardCardPrivateKeyReference>)getPrivateKeyWithNSString:(NSString *)alias {
  
#line 460
  if (![((id<JavaUtilMap>) nil_chk(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_KEYNO_BY_ALIAS)) containsKeyWithId:alias]) {
    return nil;
  }
  return new_EsGobJmulticardCardGideSmartcafeSmartCafePrivateKeyReference_initWithJavaLangInteger_([EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_KEYNO_BY_ALIAS getWithId:alias]);
}


#line 466
- (IOSByteArray *)signWithByteArray:(IOSByteArray *)data
                       withNSString:(NSString *)algorithm
withEsGobJmulticardCardPrivateKeyReference:(id<EsGobJmulticardCardPrivateKeyReference>)keyRef {
  
#line 471
  if (data == nil) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_(@"Los datos a firmar no pueden ser nulos");
  }
  if (keyRef == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"La clave privada no puede ser nula");
  }
  if (!([keyRef isKindOfClass:[EsGobJmulticardCardGideSmartcafeSmartCafePrivateKeyReference class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"La clave proporcionada debe ser de tipo ",
#line 480
    [EsGobJmulticardCardGideSmartcafeSmartCafePrivateKeyReference_class_() getName], @", pero se ha recibido de tipo ",
#line 482
    [[keyRef java_getClass] getName]));
  }
  
#line 486
  EsGobJmulticardCardGideSmartcafeSmartCafePrivateKeyReference *scPrivateKey = (EsGobJmulticardCardGideSmartcafeSmartCafePrivateKeyReference *) cast_chk(keyRef, [EsGobJmulticardCardGideSmartcafeSmartCafePrivateKeyReference class]);
  
#line 489
  if (!authenticated_) {
    @try {
      [self verifyPinWithJavaxSecurityAuthCallbackPasswordCallback:EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_getInternalPasswordCallback(self)];
      authenticated_ = true;
    }
    @catch (EsGobJmulticardConnectionApduConnectionException *e1) {
      @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error en la verificacion de PIN", e1);
    }
  }
  
#line 500
  EsGobJmulticardApduResponseApdu *res = nil;
  @try {
    res = [self sendArbitraryApduWithEsGobJmulticardApduCommandApdu:new_EsGobJmulticardApduIso7816fourMseSetComputationApduCommand_initWithByte_withByteArray_withByteArray_(
#line 504
    (jbyte) (jint) 0x01, [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 505
      (jbyte) [scPrivateKey getKeyOrdinal] } count:1], [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 506
        (jbyte) (jint) 0x02 } count:1])];
      }
      @catch (
#line 510
      EsGobJmulticardConnectionApduConnectionException *e) {
        @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@C", @"Error estableciendo la clave y el algoritmo de firma (repuesta=",
#line 512
        res, ')'), e);
      }
      
#line 515
      if (res == nil || ![res isOk]) {
        @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_(JreStrcat("$$", @"No se ha podido establecer la clave y el algoritmo de firma",
#line 517
        (res != nil ? JreStrcat("$@C", @" (repuesta=", res, ')') : @"")));
      }
      
#line 522
      IOSByteArray *digestInfo;
      @try {
        digestInfo = EsGobJmulticardAsn1DerPkcs1DigestInfo_encodeWithNSString_withByteArray_withEsGobJmulticardCryptoHelper_(algorithm, data, cryptoHelper_);
      }
      @catch (JavaIoIOException *e) {
        @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error en el calculo de la huella para firmar", e);
      }
      
#line 531
      @try {
        res = [self sendArbitraryApduWithEsGobJmulticardApduCommandApdu:new_EsGobJmulticardApduIso7816eightPsoSignHashApduCommand_initWithByte_withByteArray_((jbyte) (jint) 0x01, digestInfo)];
      }
      @catch (EsGobJmulticardConnectionApduConnectionException *e) {
        @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@C", @"Error firmando (repuesta=", res, ')'), e);
      }
      if (res == nil || ![res isOk]) {
        @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_(JreStrcat("$$", @"No se ha podido firmar el DigestInfo",
#line 539
        (res != nil ? JreStrcat("$@C", @" (repuesta=", res, ')') : @"")));
      }
      
#line 543
      return [res getData];
    }


#line 546
- (jint)getPinRetriesLeft {
  return EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_getPinRetriesLeft(self);
}


#line 565
- (JavaxSecurityAuthCallbackPasswordCallback *)getInternalPasswordCallback {
  return EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_getInternalPasswordCallback(self);
}


#line 596
+ (void)checkAtrWithByteArray:(IOSByteArray *)atrBytes {
  EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_checkAtrWithByteArray_(atrBytes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 4, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 10, 11, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 12, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 17, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 19, 20, 17, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 7, 22, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardPrivateKeyReference;", 0x1, 23, 16, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 24, 25, 26, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, 27, -1, -1, -1 },
    { NULL, "LJavaxSecurityAuthCallbackPasswordCallback;", 0x2, -1, -1, 27, -1, -1, -1 },
    { NULL, "V", 0xa, 28, 20, 29, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithEsGobJmulticardConnectionApduConnection:withEsGobJmulticardCryptoHelper:);
  methods[1].selector = @selector(storeKeyOrdinalWithInt:withJavaMathBigInteger:);
  methods[2].selector = @selector(getKeyCountWithEsGobJmulticardApduResponseApdu:);
  methods[3].selector = @selector(setPasswordCallbackWithJavaxSecurityAuthCallbackPasswordCallback:);
  methods[4].selector = @selector(setCallbackHandlerWithJavaxSecurityAuthCallbackCallbackHandler:);
  methods[5].selector = @selector(connectWithEsGobJmulticardConnectionApduConnection:);
  methods[6].selector = @selector(preloadCertificates);
  methods[7].selector = @selector(preloadCertificateWithNSString:withNSString:);
  methods[8].selector = @selector(getCardName);
  methods[9].selector = @selector(getAliases);
  methods[10].selector = @selector(getCertificateWithNSString:);
  methods[11].selector = @selector(selectMasterFile);
  methods[12].selector = @selector(description);
  methods[13].selector = @selector(selectFileByIdWithByteArray:);
  methods[14].selector = @selector(verifyPinWithJavaxSecurityAuthCallbackPasswordCallback:);
  methods[15].selector = @selector(getPrivateKeyWithNSString:);
  methods[16].selector = @selector(signWithByteArray:withNSString:withEsGobJmulticardCardPrivateKeyReference:);
  methods[17].selector = @selector(getPinRetriesLeft);
  methods[18].selector = @selector(getInternalPasswordCallback);
  methods[19].selector = @selector(checkAtrWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ATR_MASK", "[B", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "ATR", "LEsGobJmulticardCardAtr;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "ATR_MASK_MSC", "[B", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "ATR_MSC", "LEsGobJmulticardCardAtr;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "ATR_MASK_TCL", "[B", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "ATR_TCL", "LEsGobJmulticardCardAtr;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "PKCS15_NAME", "[B", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "ODF_PATH", "[B", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
    { "MF_PATH", "[B", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "CLA", "B", .constantValue.asChar = EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_CLA, 0x1a, -1, -1, -1, -1 },
    { "CERTS_BY_ALIAS", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 39, 40, -1 },
    { "KEYNO_BY_ALIAS", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 41, 42, -1 },
    { "ERROR_PIN_SW1", "B", .constantValue.asChar = EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ERROR_PIN_SW1, 0x1a, -1, -1, -1, -1 },
    { "passwordCallback_", "LJavaxSecurityAuthCallbackPasswordCallback;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "callbackHandler_", "LJavaxSecurityAuthCallbackCallbackHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "authenticated_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cryptoHelper_", "LEsGobJmulticardCryptoHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEsGobJmulticardConnectionApduConnection;LEsGobJmulticardCryptoHelper;", "LJavaIoIOException;", "storeKeyOrdinal", "ILJavaMathBigInteger;", "getKeyCount", "LEsGobJmulticardApduResponseApdu;", "setPasswordCallback", "LJavaxSecurityAuthCallbackPasswordCallback;", "setCallbackHandler", "LJavaxSecurityAuthCallbackCallbackHandler;", "connect", "LEsGobJmulticardConnectionApduConnection;", "LEsGobJmulticardCardIso7816fourIso7816FourCardException;LJavaIoIOException;LEsGobJmulticardAsn1Asn1Exception;LEsGobJmulticardAsn1TlvException;", "preloadCertificate", "LNSString;LNSString;", "getCertificate", "LNSString;", "LEsGobJmulticardConnectionApduConnectionException;LEsGobJmulticardCardIso7816fourIso7816FourCardException;", "toString", "selectFileById", "[B", "verifyPin", "LEsGobJmulticardConnectionApduConnectionException;LEsGobJmulticardCardPinException;LEsGobJmulticardCardPasswordCallbackNotFoundException;", "getPrivateKey", "sign", "[BLNSString;LEsGobJmulticardCardPrivateKeyReference;", "LEsGobJmulticardCardCryptoCardException;LEsGobJmulticardCardPinException;", "LEsGobJmulticardCardPinException;", "checkAtr", "LEsGobJmulticardCardInvalidCardException;", &EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_MASK, &EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR, &EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_MASK_MSC, &EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_MSC, &EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_MASK_TCL, &EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_TCL, &EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_PKCS15_NAME, &EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ODF_PATH, &EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_MF_PATH, &EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_CERTS_BY_ALIAS, "Ljava/util/Map<Ljava/lang/String;Ljava/security/cert/X509Certificate;>;", &EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_KEYNO_BY_ALIAS, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet = { "SmartCafePkcs15Applet", "es.gob.jmulticard.card.gide.smartcafe", ptrTable, methods, fields, 7, 0x11, 20, 17, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet;
}

+ (void)initialize {
  if (self == [EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet class]) {
    EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_MASK = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 59
      (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff,
#line 60
      (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff,
#line 61
      (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xf } count:17];
      EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 66
        (jbyte) (jint) 0x3b, (jbyte) (jint) 0xf7, (jbyte) (jint) 0x18, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x80,
#line 67
        (jbyte) (jint) 0x31, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x45, (jbyte) (jint) 0x73, (jbyte) (jint) 0x66, (jbyte) (jint) 0x74,
#line 68
        (jbyte) (jint) 0x65, (jbyte) (jint) 0x2d, (jbyte) (jint) 0x6e, (jbyte) (jint) 0x66, (jbyte) (jint) 0xc4 } count:17],
#line 69
        EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_MASK);
        EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_MASK_MSC = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 72
          (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff } count:5];
          EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_MSC = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 77
            (jbyte) (jint) 0x3b, (jbyte) (jint) 0x80, (jbyte) (jint) 0x80, (jbyte) (jint) 0x01, (jbyte) (jint) 0x01 } count:5],
#line 78
            EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_MASK_MSC);
            EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_MASK_TCL = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 82
              (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff,
#line 83
              (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff,
#line 84
              (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xf } count:17];
              EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_TCL = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 88
                (jbyte) (jint) 0x3b, (jbyte) (jint) 0xf7, (jbyte) (jint) 0x18, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x80,
#line 89
                (jbyte) (jint) 0x31, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x45, (jbyte) (jint) 0x73, (jbyte) (jint) 0x66, (jbyte) (jint) 0x74,
#line 90
                (jbyte) (jint) 0x65, (jbyte) (jint) 0x2d, (jbyte) (jint) 0x6e, (jbyte) (jint) 0x66, (jbyte) (jint) 0xc4 } count:17],
#line 91
                EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_MASK_TCL);
                EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_PKCS15_NAME = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 94
                  (jbyte) (jint) 0xA0, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x63, (jbyte) (jint) 0x50,
#line 95
                  (jbyte) (jint) 0x4B, (jbyte) (jint) 0x43, (jbyte) (jint) 0x53, (jbyte) (jint) 0x2D, (jbyte) (jint) 0x31, (jbyte) (jint) 0x35 } count:12];
                  EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ODF_PATH = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 98
                    (jbyte) (jint) 0x50, (jbyte) (jint) 0x31 } count:2];
                    EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_MF_PATH = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 99
                      (jbyte) (jint) 0x3F, (jbyte) (jint) 0x00 } count:2];
                      EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_CERTS_BY_ALIAS = new_JavaUtilConcurrentConcurrentHashMap_init();
                      EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_KEYNO_BY_ALIAS = new_JavaUtilConcurrentConcurrentHashMap_init();
                      J2OBJC_SET_INITIALIZED(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet)
                    }
                  }

@end


#line 123
void EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet *self, id<EsGobJmulticardConnectionApduConnection> conn, EsGobJmulticardCryptoHelper *cryptoHlpr) {
  EsGobJmulticardCardIso7816fourAbstractIso7816FourCard_initWithByte_withEsGobJmulticardConnectionApduConnection_(self, EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_CLA,
#line 125
  conn);
  self->passwordCallback_ =
#line 109
  nil;
  self->callbackHandler_ = nil;
  self->authenticated_ =
#line 112
  false;
  
#line 127
  if (cryptoHlpr == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El CryptoHelper no puede ser nulo");
  }
  self->cryptoHelper_ = cryptoHlpr;
  
#line 133
  (void) [((id<EsGobJmulticardConnectionApduConnection>) nil_chk(conn)) reset];
  EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_connectWithEsGobJmulticardConnectionApduConnection_(conn);
  
#line 136
  @try {
    [self selectFileByNameWithByteArray:EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_PKCS15_NAME];
  }
  @catch (EsGobJmulticardCardIso7816fourIso7816FourCardException *e) {
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(
#line 141
    @"No se ha podido seleccionar el Applet AET PKCS#15", e);
  }
  
#line 146
  @try {
    EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_preloadCertificates(self);
  }
  @catch (EsGobJmulticardCardIso7816fourIso7816FourCardException *e) {
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(
#line 151
    @"No se han podido leer los certificados", e);
  }
  @catch (
#line 149
  EsGobJmulticardAsn1Asn1Exception *e) {
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(
#line 151
    @"No se han podido leer los certificados", e);
  }
  @catch (
#line 149
  EsGobJmulticardAsn1TlvException *e) {
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(
#line 151
    @"No se han podido leer los certificados", e);
  }
  
#line 156
  jint keyCount = EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_getKeyCountWithEsGobJmulticardApduResponseApdu_(
#line 157
  [self sendArbitraryApduWithEsGobJmulticardApduCommandApdu:new_EsGobJmulticardApduCommandApdu_initWithByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 160
    (jbyte) (jint) 0x00, (jbyte) (jint) 0xCA, (jbyte) (jint) 0x01, (jbyte) (jint) 0x02, (jbyte) (jint) 0x06 } count:5])]);
    
#line 166
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 167
    [EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_class_() getName],
#line 168
    @"constructor", JreStrcat("$$$I$$$I$$$", @"Se ha",
#line 169
    (keyCount > 1 ? @"n" : @""), @" encontrado ",
#line 170
    keyCount, @" clave", (keyCount > 1 ? @"s" : @""), @" y ",
#line 171
    [((id<JavaUtilMap>) nil_chk(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_CERTS_BY_ALIAS)) size], @" certificado", ([EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_CERTS_BY_ALIAS size] > 1 ? @"s" : @""), @" en la tarjeta"));
    
#line 176
    for (jint i = 0; i < keyCount; i++) {
      EsGobJmulticardApduResponseApdu *res = [self sendArbitraryApduWithEsGobJmulticardApduCommandApdu:new_EsGobJmulticardApduCommandApdu_initWithByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 180
        (jbyte) (jint) 0x80,
#line 181
        (jbyte) (jint) 0x3A,
#line 182
        (jbyte) i,
#line 183
        (jbyte) (jint) 0x01,
#line 184
        (jbyte) (jint) 0x00 } count:5])];
        
#line 188
        if (![((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
          EsGobJmulticardJmcLogger_severeWithNSString_(JreStrcat("$I$@", @"Error obteniendo el modulo de la clave ",
#line 190
          i, @": ", res));
          
#line 192
          continue;
        }
        
#line 197
        JavaIoByteArrayOutputStream *baos = new_JavaIoByteArrayOutputStream_init();
        [baos writeWithInt:(jbyte) (jint) 0x00];
        [baos writeWithByteArray:[res getData]];
        JavaMathBigInteger *modulus = new_JavaMathBigInteger_initWithByteArray_([baos toByteArray]);
        
#line 204
        EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_storeKeyOrdinalWithInt_withJavaMathBigInteger_(i, modulus);
      }
      
#line 208
      id<JavaUtilSet> aliases = [EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_CERTS_BY_ALIAS keySet];
      for (NSString * __strong alias in nil_chk(aliases)) {
        if (![((id<JavaUtilMap>) nil_chk(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_KEYNO_BY_ALIAS)) containsKeyWithId:alias]) {
          EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 212
          [EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_class_() getName],
#line 213
          @"constructor", JreStrcat("$$$", @"El certificado '",
#line 214
          alias, @"' se descarta por carecer de clave privada"));
          
#line 216
          (void) [EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_CERTS_BY_ALIAS removeWithId:alias];
        }
      }
      
#line 220
      if ([aliases isEmpty]) {
        @throw new_JavaIoIOException_initWithNSString_(
#line 222
        @"La tarjeta no contiene claves");
      }
    }


#line 123
EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet *new_EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_(id<EsGobJmulticardConnectionApduConnection> conn, EsGobJmulticardCryptoHelper *cryptoHlpr) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet, initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_, conn, cryptoHlpr)
}


#line 123
EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet *create_EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_(id<EsGobJmulticardConnectionApduConnection> conn, EsGobJmulticardCryptoHelper *cryptoHlpr) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet, initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_, conn, cryptoHlpr)
}


#line 227
void EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_storeKeyOrdinalWithInt_withJavaMathBigInteger_(jint ordinal, JavaMathBigInteger *publicKeyModulus) {
  EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_initialize();
  
#line 228
  id<JavaUtilSet> aliases = [((id<JavaUtilMap>) nil_chk(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_CERTS_BY_ALIAS)) keySet];
  for (NSString * __strong alias in nil_chk(aliases)) {
    id<JavaSecurityPublicKey> publicKey = [((JavaSecurityCertX509Certificate *) nil_chk([EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_CERTS_BY_ALIAS getWithId:alias])) getPublicKey];
    if ([JavaSecurityInterfacesRSAPublicKey_class_() isInstance:publicKey]) {
      JavaMathBigInteger *certPublicKeyModulus = [((id<JavaSecurityInterfacesRSAPublicKey>) nil_chk(((id<JavaSecurityInterfacesRSAPublicKey>) cast_check(publicKey, JavaSecurityInterfacesRSAPublicKey_class_())))) getModulus];
      if ([((JavaMathBigInteger *) nil_chk(certPublicKeyModulus)) isEqual:publicKeyModulus]) {
        (void) [((id<JavaUtilMap>) nil_chk(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_KEYNO_BY_ALIAS)) putWithId:alias withId:JavaLangInteger_valueOfWithInt_(ordinal)];
      }
    }
  }
}


#line 240
jint EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_getKeyCountWithEsGobJmulticardApduResponseApdu_(EsGobJmulticardApduResponseApdu *ra) {
  EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_initialize();
  
#line 241
  if (![((EsGobJmulticardApduResponseApdu *) nil_chk(ra)) isOk]) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"No se ha podido determinar el numero de claves en tarjeta: ", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 243
    [ra getBytes], true)));
  }
  
#line 246
  IOSByteArray *res = [ra getData];
  if (
#line 248
  ((IOSByteArray *) nil_chk(res))->size_ == 6 &&
#line 249
  IOSByteArray_Get(res, 0) == (jbyte) (jint) 0x7F &&
#line 250
  IOSByteArray_Get(res, 1) == (jbyte) (jint) 0xFF &&
#line 251
  IOSByteArray_Get(res, 2) == (jbyte) (jint) 0x20 &&
#line 252
  IOSByteArray_Get(res, 4) == (jbyte) (jint) 0x0C &&
#line 253
  IOSByteArray_Get(res, 5) == (jbyte) (jint) 0x0B) {
    
#line 255
    return (jint) 0x20 - IOSByteArray_Get(res, 3);
  }
  @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"No se ha podido determinar el numero de claves en tarjeta: ", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 258
  [ra getBytes], true)));
}


#line 277
void EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_connectWithEsGobJmulticardConnectionApduConnection_(id<EsGobJmulticardConnectionApduConnection> conn) {
  EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_initialize();
  
#line 278
  if (conn == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"La conexion no puede ser nula");
  }
  if (![conn isOpen]) {
    [conn open];
  }
  EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_checkAtrWithByteArray_([conn reset]);
}


#line 287
void EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_preloadCertificates(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet *self) {
  
#line 291
  [self selectMasterFile];
  
#line 294
  [self selectFileByIdWithByteArray:EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ODF_PATH];
  
#line 297
  IOSByteArray *odfBytes = [self readBinaryCompleteWithInt:162];
  EsGobJmulticardAsn1DerPkcs15Odf *odf = new_EsGobJmulticardAsn1DerPkcs15Odf_init();
  [odf setDerValueWithByteArray:odfBytes];
  
#line 302
  EsGobJmulticardAsn1DerPkcs15Path *cdfPath = [odf getCdfPath];
  
#line 305
  EsGobJmulticardAsn1DerPkcs15Cdf *cdf = new_EsGobJmulticardAsn1DerPkcs15Cdf_init();
  @try {
    [self selectMasterFile];
    IOSByteArray *cdfBytes = [self selectFileByIdAndReadWithByteArray:[((EsGobJmulticardAsn1DerPkcs15Path *) nil_chk(cdfPath)) getPathBytes]];
    [cdf setDerValueWithByteArray:cdfBytes];
  }
  @catch (JavaLangException *e) {
    @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_withJavaLangThrowable_(
#line 313
    @"No se ha podido cargar el CDF de la tarjeta", e);
  }
  
#line 317
  if ([cdf getCertificateCount] < 1) {
    EsGobJmulticardJmcLogger_warningWithNSString_(@"La tarjeta no contiene ningun certificado");
  }
  for (jint i = 0; i < [cdf getCertificateCount]; i++) {
    EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_preloadCertificateWithNSString_withNSString_(self, [cdf getCertificatePathWithInt:i], [cdf getCertificateAliasWithInt:i]);
  }
}

void EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_preloadCertificateWithNSString_withNSString_(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet *self, NSString *certificatePath, NSString *certificateAlias) {
  @try {
    jint fileLength = -1;
    EsGobJmulticardCardLocation *certLocation = new_EsGobJmulticardCardLocation_initWithNSString_(certificatePath);
    while (certLocation != nil) {
      IOSByteArray *id_ = [certLocation getFile];
      @try {
        fileLength = [self selectFileByIdWithByteArray:id_];
      }
      @catch (EsGobJmulticardCardIso7816fourFileNotFoundException *e) {
        EsGobJmulticardJmcLogger_warningWithNSString_(JreStrcat("$@$@", @"El CDF indicaba un certificado en la ruta '",
#line 336
        certLocation, @"', pero un elemento de esta no existe, se ignorara: ", e));
      }
      
#line 339
      certLocation = [certLocation getChild];
    }
    
#line 342
    IOSByteArray *certBytes;
    if (fileLength <= 0) {
      
#line 345
      EsGobJmulticardJmcLogger_warningWithNSString_(JreStrcat("$$$", @"El certificado ",
#line 346
      certificateAlias, @" del dispositivo esta vacio"));
      
#line 348
      return;
    }
    certBytes = [self readBinaryCompleteWithInt:fileLength];
    
#line 352
    (void) [((id<JavaUtilMap>) nil_chk(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_CERTS_BY_ALIAS)) putWithId:
#line 353
    certificateAlias withId:EsGobJmulticardCryptoHelper_generateCertificateWithByteArray_(
#line 354
    certBytes)];
  }
  @catch (
#line 357
  JavaLangException *e) {
    
#line 359
    EsGobJmulticardJmcLogger_severeWithNSString_(JreStrcat("$$$@", @"Error en la lectura del certificado ", certificateAlias, @" del dispositivo: ", e));
  }
}


#line 546
jint EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_getPinRetriesLeft(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet *self) {
  EsGobJmulticardApduCommandApdu *verifyCommandApdu = new_EsGobJmulticardApduGideGiDeRetriesLeftApduCommand_init();
  EsGobJmulticardApduResponseApdu *verifyResponse;
  @try {
    verifyResponse = [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) transmitWithEsGobJmulticardApduCommandApdu:verifyCommandApdu];
  }
  @catch (EsGobJmulticardConnectionApduConnectionException *e) {
    @throw new_EsGobJmulticardCardPinException_initWithNSString_withJavaLangThrowable_(
#line 554
    @"Error obteniendo el PIN del CallbackHandler", e);
  }
  
#line 557
  if ([((EsGobJmulticardApduResponseApdu *) nil_chk(verifyResponse)) isOk] || ((IOSByteArray *) nil_chk([verifyResponse getBytes]))->size_ > 2) {
    return IOSByteArray_Get(nil_chk([verifyResponse getBytes]), 1);
  }
  @throw new_EsGobJmulticardCardPinException_initWithNSString_(JreStrcat("$@", @"Error comprobando los intentos restantes de PIN con respuesta: ",
#line 561
  [verifyResponse getStatusWord]));
}


#line 565
JavaxSecurityAuthCallbackPasswordCallback *EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_getInternalPasswordCallback(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet *self) {
  if (self->passwordCallback_ != nil) {
    jint retriesLeft = EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_getPinRetriesLeft(self);
    if (retriesLeft == 0) {
      @throw new_EsGobJmulticardCardAuthenticationModeLockedException_init();
    }
    return self->passwordCallback_;
  }
  if (self->callbackHandler_ != nil) {
    jint retriesLeft = EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_getPinRetriesLeft(self);
    if (retriesLeft == 0) {
      @throw new_EsGobJmulticardCardAuthenticationModeLockedException_init();
    }
    JavaxSecurityAuthCallbackPasswordCallback *pwc = new_JavaxSecurityAuthCallbackPasswordCallback_initWithNSString_withBoolean_(EsGobJmulticardCardCardMessages_getStringWithNSString_withNSString_(
#line 579
    @"Gen.0", JavaLangInteger_toStringWithInt_(retriesLeft)),
#line 580
    false);
    
#line 582
    @try {
      [((id<JavaxSecurityAuthCallbackCallbackHandler>) nil_chk(self->callbackHandler_)) handleWithJavaxSecurityAuthCallbackCallbackArray:[IOSObjectArray newArrayWithObjects:(id[]){ pwc } count:1 type:JavaxSecurityAuthCallbackCallback_class_()]];
    }
    @catch (JavaIoIOException *e) {
      @throw new_EsGobJmulticardCardPinException_initWithNSString_withJavaLangThrowable_(@"Error obteniendo el PIN del CallbackHandler", e);
    }
    @catch (JavaxSecurityAuthCallbackUnsupportedCallbackException *e) {
      @throw new_EsGobJmulticardCardPinException_initWithNSString_withJavaLangThrowable_(@"El CallbackHandler no soporta pedir el PIN al usuario", e);
    }
    return pwc;
  }
  @throw new_EsGobJmulticardCardPinException_initWithNSString_(@"No hay ningun metodo para obtener el PIN");
}


#line 596
void EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_checkAtrWithByteArray_(IOSByteArray *atrBytes) {
  EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_initialize();
  
#line 597
  EsGobJmulticardCardAtr *tmpAtr = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_(atrBytes, EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_MASK);
  if ([((EsGobJmulticardCardAtr *) nil_chk(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR)) isEqual:tmpAtr]) {
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_([EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_class_() getName], @"checkAtr", @"Detectada G&D SmartCafe 3.2");
  }
  else if ([((EsGobJmulticardCardAtr *) nil_chk(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_MSC)) isEqual:tmpAtr]) {
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_([EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_class_() getName], @"checkAtr", @"Detectada G&D Mobile Security Card");
  }
  else if ([((EsGobJmulticardCardAtr *) nil_chk(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_ATR_TCL)) isEqual:tmpAtr]) {
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_([EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet_class_() getName], @"checkAtr", @"Detectada G&D SmartCafe 3.2 via T=CL (conexion inalambrica)");
  }
  else {
    @throw new_EsGobJmulticardCardInvalidCardException_initWithNSString_(JreStrcat("$$C", @"La tarjeta no es una SmartCafe 3.2 (ATR encontrado: ", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 609
    atrBytes, false), ')'));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardGideSmartcafeSmartCafePkcs15Applet)
