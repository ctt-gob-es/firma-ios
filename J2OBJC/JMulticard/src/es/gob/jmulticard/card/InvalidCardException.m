//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/InvalidCardException.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/card/Atr.h"
#include "es/gob/jmulticard/card/CardException.h"
#include "es/gob/jmulticard/card/InvalidCardException.h"
#include "java/lang/System.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/card/InvalidCardException must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardCardInvalidCardException () {
 @public
  /*!
   @brief ATR de la tarjeta que se esperaba encontrar.
   */
  EsGobJmulticardCardAtr *atr_;
  /*!
   @brief Descripci&oacute;n de la excepci&oacute;n.
   */
  NSString *name_;
  /*!
   @brief ATR de la tarjeta encontrada.
   */
  IOSByteArray *badAtr_;
}

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardCardInvalidCardException, atr_, EsGobJmulticardCardAtr *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardInvalidCardException, name_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardInvalidCardException, badAtr_, IOSByteArray *)

/*!
 @brief Identificador de versi&oacute;n para la serializaci&oacute;n.
 */
inline jlong EsGobJmulticardCardInvalidCardException_get_serialVersionUID(void);
#define EsGobJmulticardCardInvalidCardException_serialVersionUID 4888120866657775782LL
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardCardInvalidCardException, serialVersionUID, jlong)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/InvalidCardException.java"


#line 46
@implementation EsGobJmulticardCardInvalidCardException


#line 62
- (instancetype)initWithNSString:(NSString *)desc {
  EsGobJmulticardCardInvalidCardException_initWithNSString_(self, desc);
  return self;
}


#line 73
- (instancetype)initWithNSString:(NSString *)expectedCardName
      withEsGobJmulticardCardAtr:(EsGobJmulticardCardAtr *)expectedAtr
                   withByteArray:(IOSByteArray *)foundAtr {
  EsGobJmulticardCardInvalidCardException_initWithNSString_withEsGobJmulticardCardAtr_withByteArray_(self, expectedCardName, expectedAtr, foundAtr);
  return self;
}


#line 92
- (EsGobJmulticardCardAtr *)getExpectedAtr {
  return atr_;
}


#line 98
- (NSString *)getExpectedCardName {
  return name_;
}


#line 104
- (IOSByteArray *)getFoundAtr {
  if (badAtr_ == nil) {
    return nil;
  }
  IOSByteArray *tmpAtr = [IOSByteArray newArrayWithLength:badAtr_->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(badAtr_, 0, tmpAtr, 0, badAtr_->size_);
  return tmpAtr;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardAtr;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withEsGobJmulticardCardAtr:withByteArray:);
  methods[2].selector = @selector(getExpectedAtr);
  methods[3].selector = @selector(getExpectedCardName);
  methods[4].selector = @selector(getFoundAtr);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EsGobJmulticardCardInvalidCardException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "atr_", "LEsGobJmulticardCardAtr;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "badAtr_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;LEsGobJmulticardCardAtr;[B" };
  static const J2ObjcClassInfo _EsGobJmulticardCardInvalidCardException = { "InvalidCardException", "es.gob.jmulticard.card", ptrTable, methods, fields, 7, 0x11, 5, 4, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardCardInvalidCardException;
}

@end


#line 62
void EsGobJmulticardCardInvalidCardException_initWithNSString_(EsGobJmulticardCardInvalidCardException *self, NSString *desc) {
  EsGobJmulticardCardCardException_initWithNSString_(self, desc);
  self->name_ = nil;
  self->badAtr_ = nil;
  self->atr_ = nil;
}


#line 62
EsGobJmulticardCardInvalidCardException *new_EsGobJmulticardCardInvalidCardException_initWithNSString_(NSString *desc) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardInvalidCardException, initWithNSString_, desc)
}


#line 62
EsGobJmulticardCardInvalidCardException *create_EsGobJmulticardCardInvalidCardException_initWithNSString_(NSString *desc) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardInvalidCardException, initWithNSString_, desc)
}


#line 73
void EsGobJmulticardCardInvalidCardException_initWithNSString_withEsGobJmulticardCardAtr_withByteArray_(EsGobJmulticardCardInvalidCardException *self, NSString *expectedCardName, EsGobJmulticardCardAtr *expectedAtr, IOSByteArray *foundAtr) {
  EsGobJmulticardCardCardException_initWithNSString_(self, JreStrcat("$$$$", @"Se esperaba una tarjeta de tipo '",
#line 75
  expectedCardName, @"' pero se encontro otra con ATR=",
#line 77
  (foundAtr == nil ? @"NULO" : EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(foundAtr, false))));
  
#line 79
  self->atr_ = expectedAtr;
  self->name_ = expectedCardName;
  if (foundAtr != nil) {
    self->badAtr_ = [IOSByteArray newArrayWithLength:foundAtr->size_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(foundAtr, 0, self->badAtr_, 0, self->badAtr_->size_);
  }
  else {
    self->badAtr_ = nil;
  }
}


#line 73
EsGobJmulticardCardInvalidCardException *new_EsGobJmulticardCardInvalidCardException_initWithNSString_withEsGobJmulticardCardAtr_withByteArray_(NSString *expectedCardName, EsGobJmulticardCardAtr *expectedAtr, IOSByteArray *foundAtr) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardInvalidCardException, initWithNSString_withEsGobJmulticardCardAtr_withByteArray_, expectedCardName, expectedAtr, foundAtr)
}


#line 73
EsGobJmulticardCardInvalidCardException *create_EsGobJmulticardCardInvalidCardException_initWithNSString_withEsGobJmulticardCardAtr_withByteArray_(NSString *expectedCardName, EsGobJmulticardCardAtr *expectedAtr, IOSByteArray *foundAtr) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardInvalidCardException, initWithNSString_withEsGobJmulticardCardAtr_withByteArray_, expectedCardName, expectedAtr, foundAtr)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardInvalidCardException)
