//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/DniePrivateKeyReference.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobJmulticardCardDnieDniePrivateKeyReference")
#ifdef RESTRICT_EsGobJmulticardCardDnieDniePrivateKeyReference
#define INCLUDE_ALL_EsGobJmulticardCardDnieDniePrivateKeyReference 0
#else
#define INCLUDE_ALL_EsGobJmulticardCardDnieDniePrivateKeyReference 1
#endif
#undef RESTRICT_EsGobJmulticardCardDnieDniePrivateKeyReference

#if !defined (EsGobJmulticardCardDnieDniePrivateKeyReference_) && (INCLUDE_ALL_EsGobJmulticardCardDnieDniePrivateKeyReference || defined(INCLUDE_EsGobJmulticardCardDnieDniePrivateKeyReference))
#define EsGobJmulticardCardDnieDniePrivateKeyReference_

#define RESTRICT_EsGobJmulticardCardPrivateKeyReference 1
#define INCLUDE_EsGobJmulticardCardPrivateKeyReference 1
#include "es/gob/jmulticard/card/PrivateKeyReference.h"

@class EsGobJmulticardCardLocation;
@class IOSByteArray;
@protocol EsGobJmulticardCardCryptoCard;

/*!
 @brief Clave privada de un DNIe.La clase no contiene la clave privada en si, sino una
  referencia a ella y una referencia al propio DNIe, con el canal seguro establecido.
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s.
 */
@interface EsGobJmulticardCardDnieDniePrivateKeyReference : NSObject < EsGobJmulticardCardPrivateKeyReference >

#pragma mark Public

/*!
 @brief Crea una referencia a una clave privada del DNIe.
 @param card Tarjeta en la que se almacena la clave privada.
 @param id_ Identificador de la clave.
 @param path Ruta interna de la clave.
 @param lbl Etiqueta de la clave.
 @param ref Referencia interna de la clave.
 @param keyLength Tama &ntilde; o en bits de la clave privada.
 */
- (instancetype)initWithEsGobJmulticardCardCryptoCard:(id<EsGobJmulticardCardCryptoCard>)card
                                        withByteArray:(IOSByteArray *)id_
                      withEsGobJmulticardCardLocation:(EsGobJmulticardCardLocation *)path
                                         withNSString:(NSString *)lbl
                                             withByte:(jbyte)ref
                                              withInt:(jint)keyLength;

/*!
 @brief Recupera el manejador de la tarjeta en la que se almacena la clave.
 @return Manejador de la tarjeta.
 */
- (id<EsGobJmulticardCardCryptoCard>)getDnieCard;

/*!
 @brief Recupera el identificador de la clave.
 @return Identificador de la clave.
 */
- (IOSByteArray *)getIdentifier;

/*!
 @brief Obtiene el tam&ntilde;o en bits de la clave.
 @return Tam&ntilde;o en bits de la clave.
 */
- (jint)getKeyBitSize;

/*!
 @brief Recupera la ruta de la clave.
 @return Ruta de la clave.
 */
- (EsGobJmulticardCardLocation *)getKeyPath;

/*!
 @brief Recupera la referencia de la clave.
 @return Referencia de la clave.
 */
- (jbyte)getKeyReference;

/*!
 @brief Recupera la etiqueta de la clave.
 @return Etiqueta de la clave.
 */
- (NSString *)getLabel;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobJmulticardCardDnieDniePrivateKeyReference)

FOUNDATION_EXPORT void EsGobJmulticardCardDnieDniePrivateKeyReference_initWithEsGobJmulticardCardCryptoCard_withByteArray_withEsGobJmulticardCardLocation_withNSString_withByte_withInt_(EsGobJmulticardCardDnieDniePrivateKeyReference *self, id<EsGobJmulticardCardCryptoCard> card, IOSByteArray *id_, EsGobJmulticardCardLocation *path, NSString *lbl, jbyte ref, jint keyLength);

FOUNDATION_EXPORT EsGobJmulticardCardDnieDniePrivateKeyReference *new_EsGobJmulticardCardDnieDniePrivateKeyReference_initWithEsGobJmulticardCardCryptoCard_withByteArray_withEsGobJmulticardCardLocation_withNSString_withByte_withInt_(id<EsGobJmulticardCardCryptoCard> card, IOSByteArray *id_, EsGobJmulticardCardLocation *path, NSString *lbl, jbyte ref, jint keyLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobJmulticardCardDnieDniePrivateKeyReference *create_EsGobJmulticardCardDnieDniePrivateKeyReference_initWithEsGobJmulticardCardCryptoCard_withByteArray_withEsGobJmulticardCardLocation_withNSString_withByte_withInt_(id<EsGobJmulticardCardCryptoCard> card, IOSByteArray *id_, EsGobJmulticardCardLocation *path, NSString *lbl, jbyte ref, jint keyLength);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardCardDnieDniePrivateKeyReference)

#endif

#pragma pop_macro("INCLUDE_ALL_EsGobJmulticardCardDnieDniePrivateKeyReference")
