//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/DnieFactory.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/CryptoHelper.h"
#include "es/gob/jmulticard/JmcLogger.h"
#include "es/gob/jmulticard/card/Atr.h"
#include "es/gob/jmulticard/card/InvalidCardException.h"
#include "es/gob/jmulticard/card/dnie/BurnedDnieCardException.h"
#include "es/gob/jmulticard/card/dnie/Dnie.h"
#include "es/gob/jmulticard/card/dnie/Dnie3.h"
#include "es/gob/jmulticard/card/dnie/Dnie3Cwa14890Constants.h"
#include "es/gob/jmulticard/card/dnie/Dnie3PinCwa14890Constants.h"
#include "es/gob/jmulticard/card/dnie/Dnie3UsrCwa14890Constants.h"
#include "es/gob/jmulticard/card/dnie/Dnie3r2PinCwa14890Constants.h"
#include "es/gob/jmulticard/card/dnie/Dnie3r2UsrCwa14890Constants.h"
#include "es/gob/jmulticard/card/dnie/DnieAtr.h"
#include "es/gob/jmulticard/card/dnie/DnieFactory.h"
#include "es/gob/jmulticard/card/dnie/DnieNfc.h"
#include "es/gob/jmulticard/card/dnie/InvalidAccessCodeException.h"
#include "es/gob/jmulticard/card/dnie/ceressc/CeresSc.h"
#include "es/gob/jmulticard/card/dnie/tif/Tif.h"
#include "es/gob/jmulticard/card/icao/IcaoException.h"
#include "es/gob/jmulticard/card/icao/IcaoMrtdWithPace.h"
#include "es/gob/jmulticard/card/icao/InvalidCanOrMrzException.h"
#include "es/gob/jmulticard/card/icao/MrtdLds1.h"
#include "es/gob/jmulticard/connection/ApduConnection.h"
#include "es/gob/jmulticard/connection/ApduConnectionException.h"
#include "es/gob/jmulticard/connection/CardNotPresentException.h"
#include "es/gob/jmulticard/connection/NoReadersFoundException.h"
#include "java/lang/IllegalArgumentException.h"
#include "javax/security/auth/callback/CallbackHandler.h"
#include "javax/security/auth/callback/PasswordCallback.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/card/dnie/DnieFactory must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardCardDnieDnieFactory ()

- (instancetype)init;

@end

inline IOSByteArray *EsGobJmulticardCardDnieDnieFactory_get_ATR_MASK(void);
static IOSByteArray *EsGobJmulticardCardDnieDnieFactory_ATR_MASK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardDnieDnieFactory, ATR_MASK, IOSByteArray *)

inline IOSByteArray *EsGobJmulticardCardDnieDnieFactory_get_ATR_NFC_MASK(void);
static IOSByteArray *EsGobJmulticardCardDnieDnieFactory_ATR_NFC_MASK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardDnieDnieFactory, ATR_NFC_MASK, IOSByteArray *)

inline IOSByteArray *EsGobJmulticardCardDnieDnieFactory_get_ATR_NFC2_MASK(void);
static IOSByteArray *EsGobJmulticardCardDnieDnieFactory_ATR_NFC2_MASK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardDnieDnieFactory, ATR_NFC2_MASK, IOSByteArray *)

inline EsGobJmulticardCardAtr *EsGobJmulticardCardDnieDnieFactory_get_ATR_NFC(void);
static EsGobJmulticardCardAtr *EsGobJmulticardCardDnieDnieFactory_ATR_NFC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardDnieDnieFactory, ATR_NFC, EsGobJmulticardCardAtr *)

inline EsGobJmulticardCardAtr *EsGobJmulticardCardDnieDnieFactory_get_ATR_NFC2(void);
static EsGobJmulticardCardAtr *EsGobJmulticardCardDnieDnieFactory_ATR_NFC2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardDnieDnieFactory, ATR_NFC2, EsGobJmulticardCardAtr *)

inline EsGobJmulticardCardAtr *EsGobJmulticardCardDnieDnieFactory_get_ATR(void);
static EsGobJmulticardCardAtr *EsGobJmulticardCardDnieDnieFactory_ATR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardDnieDnieFactory, ATR, EsGobJmulticardCardAtr *)

inline EsGobJmulticardCardAtr *EsGobJmulticardCardDnieDnieFactory_get_ATR_TIF(void);
static EsGobJmulticardCardAtr *EsGobJmulticardCardDnieDnieFactory_ATR_TIF;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardDnieDnieFactory, ATR_TIF, EsGobJmulticardCardAtr *)

inline NSString *EsGobJmulticardCardDnieDnieFactory_get_DNIE3_R2_IDESP(void);
static NSString *EsGobJmulticardCardDnieDnieFactory_DNIE3_R2_IDESP = @"BMP100001";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardDnieDnieFactory, DNIE3_R2_IDESP, NSString *)

__attribute__((unused)) static void EsGobJmulticardCardDnieDnieFactory_init(EsGobJmulticardCardDnieDnieFactory *self);

__attribute__((unused)) static EsGobJmulticardCardDnieDnieFactory *new_EsGobJmulticardCardDnieDnieFactory_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobJmulticardCardDnieDnieFactory *create_EsGobJmulticardCardDnieDnieFactory_init(void);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/DnieFactory.java"

J2OBJC_INITIALIZED_DEFN(EsGobJmulticardCardDnieDnieFactory)


#line 23
@implementation EsGobJmulticardCardDnieDnieFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 62
- (instancetype)init {
  EsGobJmulticardCardDnieDnieFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 76
+ (EsGobJmulticardCardDnieDnie *)getDnieWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                                      withJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)pwc
                                                    withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHelper
                                       withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)ch {
  return EsGobJmulticardCardDnieDnieFactory_getDnieWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(conn, pwc, cryptoHelper, ch);
}


#line 94
+ (EsGobJmulticardCardDnieDnieNfc *)getDnieNfcWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                                                          withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHelper
                                             withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)ch {
  return EsGobJmulticardCardDnieDnieFactory_getDnieNfcWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(conn, cryptoHelper, ch);
}


#line 174
+ (id<EsGobJmulticardCardIcaoMrtdLds1>)getEmrtdNfcWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                                                              withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHelper
                                                 withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)ch {
  return EsGobJmulticardCardDnieDnieFactory_getEmrtdNfcWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(conn, cryptoHelper, ch);
}


#line 230
+ (EsGobJmulticardCardDnieDnie *)getDnieWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                                      withJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)pwc
                                                    withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHelper
                                       withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)ch
                                                                        withBoolean:(jboolean)includeCloneCards {
  return EsGobJmulticardCardDnieDnieFactory_getDnieWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_withBoolean_(conn, pwc, cryptoHelper, ch, includeCloneCards);
}


#line 326
+ (EsGobJmulticardCardDnieDnie3Cwa14890Constants *)getDnie3UsrCwa14890ConstantsWithNSString:(NSString *)idesp {
  return EsGobJmulticardCardDnieDnieFactory_getDnie3UsrCwa14890ConstantsWithNSString_(idesp);
}


#line 339
+ (EsGobJmulticardCardDnieDnie3Cwa14890Constants *)getDnie3PinCwa14890ConstantsWithNSString:(NSString *)idesp {
  return EsGobJmulticardCardDnieDnieFactory_getDnie3PinCwa14890ConstantsWithNSString_(idesp);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardDnieDnie;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardDnieDnieNfc;", 0x9, 3, 4, 2, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardIcaoMrtdLds1;", 0x9, 5, 4, 6, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardDnieDnie;", 0x9, 0, 7, 2, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardDnieDnie3Cwa14890Constants;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardDnieDnie3Cwa14890Constants;", 0x8, 10, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getDnieWithEsGobJmulticardConnectionApduConnection:withJavaxSecurityAuthCallbackPasswordCallback:withEsGobJmulticardCryptoHelper:withJavaxSecurityAuthCallbackCallbackHandler:);
  methods[2].selector = @selector(getDnieNfcWithEsGobJmulticardConnectionApduConnection:withEsGobJmulticardCryptoHelper:withJavaxSecurityAuthCallbackCallbackHandler:);
  methods[3].selector = @selector(getEmrtdNfcWithEsGobJmulticardConnectionApduConnection:withEsGobJmulticardCryptoHelper:withJavaxSecurityAuthCallbackCallbackHandler:);
  methods[4].selector = @selector(getDnieWithEsGobJmulticardConnectionApduConnection:withJavaxSecurityAuthCallbackPasswordCallback:withEsGobJmulticardCryptoHelper:withJavaxSecurityAuthCallbackCallbackHandler:withBoolean:);
  methods[5].selector = @selector(getDnie3UsrCwa14890ConstantsWithNSString:);
  methods[6].selector = @selector(getDnie3PinCwa14890ConstantsWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ATR_MASK", "[B", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "ATR_NFC_MASK", "[B", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "ATR_NFC2_MASK", "[B", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "ATR_NFC", "LEsGobJmulticardCardAtr;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "ATR_NFC2", "LEsGobJmulticardCardAtr;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "ATR", "LEsGobJmulticardCardAtr;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "ATR_TIF", "LEsGobJmulticardCardAtr;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "DNIE3_R2_IDESP", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
  };
  static const void *ptrTable[] = { "getDnie", "LEsGobJmulticardConnectionApduConnection;LJavaxSecurityAuthCallbackPasswordCallback;LEsGobJmulticardCryptoHelper;LJavaxSecurityAuthCallbackCallbackHandler;", "LEsGobJmulticardCardInvalidCardException;LEsGobJmulticardCardDnieBurnedDnieCardException;LEsGobJmulticardConnectionApduConnectionException;", "getDnieNfc", "LEsGobJmulticardConnectionApduConnection;LEsGobJmulticardCryptoHelper;LJavaxSecurityAuthCallbackCallbackHandler;", "getEmrtdNfc", "LEsGobJmulticardConnectionApduConnectionException;", "LEsGobJmulticardConnectionApduConnection;LJavaxSecurityAuthCallbackPasswordCallback;LEsGobJmulticardCryptoHelper;LJavaxSecurityAuthCallbackCallbackHandler;Z", "getDnie3UsrCwa14890Constants", "LNSString;", "getDnie3PinCwa14890Constants", &EsGobJmulticardCardDnieDnieFactory_ATR_MASK, &EsGobJmulticardCardDnieDnieFactory_ATR_NFC_MASK, &EsGobJmulticardCardDnieDnieFactory_ATR_NFC2_MASK, &EsGobJmulticardCardDnieDnieFactory_ATR_NFC, &EsGobJmulticardCardDnieDnieFactory_ATR_NFC2, &EsGobJmulticardCardDnieDnieFactory_ATR, &EsGobJmulticardCardDnieDnieFactory_ATR_TIF, &EsGobJmulticardCardDnieDnieFactory_DNIE3_R2_IDESP };
  static const J2ObjcClassInfo _EsGobJmulticardCardDnieDnieFactory = { "DnieFactory", "es.gob.jmulticard.card.dnie", ptrTable, methods, fields, 7, 0x11, 7, 8, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardCardDnieDnieFactory;
}

+ (void)initialize {
  if (self == [EsGobJmulticardCardDnieDnieFactory class]) {
    EsGobJmulticardCardDnieDnieFactory_ATR_MASK = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 26
      (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0x00, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF,
#line 27
      (jbyte) (jint) 0xFF, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF } count:20];
      EsGobJmulticardCardDnieDnieFactory_ATR_NFC_MASK = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 31
        (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF,
#line 32
        (jbyte) (jint) 0x00, (jbyte) (jint) 0xFF, (jbyte) (jint) 0x00 } count:13];
        EsGobJmulticardCardDnieDnieFactory_ATR_NFC2_MASK = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 36
          (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0xFF,
#line 37
          (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFF, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00 } count:17];
          EsGobJmulticardCardDnieDnieFactory_ATR_NFC = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 41
            (jbyte) (jint) 0x3B, (jbyte) (jint) 0x88, (jbyte) (jint) 0x80, (jbyte) (jint) 0x01, (jbyte) (jint) 0xE1, (jbyte) (jint) 0xF3, (jbyte) (jint) 0x5E, (jbyte) (jint) 0x11, (jbyte) (jint) 0x77, (jbyte) (jint) 0x81,
#line 42
            (jbyte) (jint) 0xA1, (jbyte) (jint) 0x00, (jbyte) (jint) 0x03 } count:13],
#line 43
            EsGobJmulticardCardDnieDnieFactory_ATR_NFC_MASK);
            EsGobJmulticardCardDnieDnieFactory_ATR_NFC2 = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 46
              (jbyte) (jint) 0x3B, (jbyte) (jint) 0x8C, (jbyte) (jint) 0x80, (jbyte) (jint) 0x01, (jbyte) (jint) 0x50, (jbyte) (jint) 0x42, (jbyte) (jint) 0x8E, (jbyte) (jint) 0x93, (jbyte) (jint) 0x2A, (jbyte) (jint) 0xE1,
#line 47
              (jbyte) (jint) 0xF3, (jbyte) (jint) 0x5E, (jbyte) (jint) 0x11, (jbyte) (jint) 0x77, (jbyte) (jint) 0x81, (jbyte) (jint) 0x81, (jbyte) (jint) 0x02 } count:17],
#line 48
              EsGobJmulticardCardDnieDnieFactory_ATR_NFC2_MASK);
              EsGobJmulticardCardDnieDnieFactory_ATR = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 51
                (jbyte) (jint) 0x3B, (jbyte) (jint) 0x7F, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x6A, (jbyte) (jint) 0x44, (jbyte) (jint) 0x4E, (jbyte) (jint) 0x49,
#line 52
                (jbyte) (jint) 0x65, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x90, (jbyte) (jint) 0x00 } count:20],
#line 53
                EsGobJmulticardCardDnieDnieFactory_ATR_MASK);
                EsGobJmulticardCardDnieDnieFactory_ATR_TIF = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 56
                  (jbyte) (jint) 0x3B, (jbyte) (jint) 0x7F, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x6A, (jbyte) (jint) 0x54, (jbyte) (jint) 0x49, (jbyte) (jint) 0x46,
#line 57
                  (jbyte) (jint) 0x31, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x90, (jbyte) (jint) 0x00 } count:20],
#line 58
                  EsGobJmulticardCardDnieDnieFactory_ATR_MASK);
                  J2OBJC_SET_INITIALIZED(EsGobJmulticardCardDnieDnieFactory)
                }
              }

@end


#line 62
void EsGobJmulticardCardDnieDnieFactory_init(EsGobJmulticardCardDnieDnieFactory *self) {
  NSObject_init(self);
}


#line 62
EsGobJmulticardCardDnieDnieFactory *new_EsGobJmulticardCardDnieDnieFactory_init() {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardDnieDnieFactory, init)
}


#line 62
EsGobJmulticardCardDnieDnieFactory *create_EsGobJmulticardCardDnieDnieFactory_init() {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardDnieDnieFactory, init)
}


#line 76
EsGobJmulticardCardDnieDnie *EsGobJmulticardCardDnieDnieFactory_getDnieWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHelper, id<JavaxSecurityAuthCallbackCallbackHandler> ch) {
  EsGobJmulticardCardDnieDnieFactory_initialize();
  
#line 82
  return EsGobJmulticardCardDnieDnieFactory_getDnieWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_withBoolean_(conn, pwc, cryptoHelper, ch, true);
}


#line 94
EsGobJmulticardCardDnieDnieNfc *EsGobJmulticardCardDnieDnieFactory_getDnieNfcWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, EsGobJmulticardCryptoHelper *cryptoHelper, id<JavaxSecurityAuthCallbackCallbackHandler> ch) {
  EsGobJmulticardCardDnieDnieFactory_initialize();
  
#line 99
  if (conn == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"La conexion no puede ser nula");
  }
  if (cryptoHelper == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El CryptoHelper no puede ser nulo");
  }
  if (ch == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El CallbackHandler no puede ser nulo");
  }
  
#line 109
  IOSByteArray *responseAtr;
  EsGobJmulticardCardAtr *actualAtr;
  EsGobJmulticardCardInvalidCardException *invalidCardException = nil;
  EsGobJmulticardConnectionCardNotPresentException *cardNotPresentException = nil;
  IOSLongArray *terminals = [conn getTerminalsWithBoolean:false];
  if (((IOSLongArray *) nil_chk(terminals))->size_ < 1) {
    @throw new_EsGobJmulticardConnectionNoReadersFoundException_init();
  }
  {
    IOSLongArray *a__ =
#line 117
    terminals;
    jlong const *b__ = a__->buffer_;
    jlong const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jlong terminal = *b__++;
      
#line 118
      [conn setTerminalWithInt:(jint) terminal];
      @try {
        responseAtr = [conn reset];
      }
      @catch (EsGobJmulticardConnectionCardNotPresentException *e) {
        cardNotPresentException = e;
        continue;
      }
      actualAtr = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_(responseAtr, EsGobJmulticardCardDnieDnieFactory_ATR_MASK);
      IOSByteArray *actualAtrBytes = [actualAtr getBytes];
      if ([((EsGobJmulticardCardAtr *) nil_chk(EsGobJmulticardCardDnieDnieFactory_ATR_NFC)) isEqual:actualAtr] || [((EsGobJmulticardCardAtr *) nil_chk(EsGobJmulticardCardDnieDnieFactory_ATR_NFC2)) isEqual:actualAtr]) {
        @try {
          
#line 133
          EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 134
          [EsGobJmulticardCardDnieDnieFactory_class_() getName],
#line 135
          @"getDnieNfc", JreStrcat("$@", @"Detectado DNIe 3.0 o 4.0 por NFC: ", new_EsGobJmulticardCardDnieDnieAtr_initWithEsGobJmulticardCardAtr_(
#line 136
          actualAtr)));
          
#line 138
          return new_EsGobJmulticardCardDnieDnieNfc_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(conn, nil, cryptoHelper, ch);
        }
        @catch (EsGobJmulticardCardIcaoInvalidCanOrMrzException *e) {
          @throw new_EsGobJmulticardCardDnieInvalidAccessCodeException_initWithNSString_withJavaLangThrowable_(@"El CAN indicado del DNIe no es correcto", e);
        }
        @catch (EsGobJmulticardCardIcaoIcaoException *e) {
          @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_withJavaLangThrowable_(@"No se ha podido abrir el canal PACE", e);
        }
      }
      
#line 150
      if (
#line 151
      IOSByteArray_Get(actualAtrBytes, ((IOSByteArray *) nil_chk(actualAtrBytes))->size_ - 1) == (jbyte) (jint) 0x81 &&
#line 152
      IOSByteArray_Get(actualAtrBytes, actualAtrBytes->size_ - 2) == (jbyte) (jint) 0x65) {
        
#line 154
        @throw new_EsGobJmulticardCardDnieBurnedDnieCardException_initWithEsGobJmulticardCardAtr_(actualAtr);
      }
      
#line 157
      invalidCardException = new_EsGobJmulticardCardInvalidCardException_initWithNSString_withEsGobJmulticardCardAtr_withByteArray_(@"DNIe por NFC", EsGobJmulticardCardDnieDnieFactory_ATR, responseAtr);
    }
  }
  
#line 159
  if (invalidCardException != nil) {
    @throw invalidCardException;
  }
  if (cardNotPresentException != nil) {
    @throw cardNotPresentException;
  }
  @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_(@"No se ha podido conectar con ningun lector de tarjetas NFC");
}


#line 174
id<EsGobJmulticardCardIcaoMrtdLds1> EsGobJmulticardCardDnieDnieFactory_getEmrtdNfcWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, EsGobJmulticardCryptoHelper *cryptoHelper, id<JavaxSecurityAuthCallbackCallbackHandler> ch) {
  EsGobJmulticardCardDnieDnieFactory_initialize();
  
#line 177
  if (conn == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"La conexion no puede ser nula");
  }
  
#line 181
  IOSByteArray *responseAtr;
  EsGobJmulticardCardAtr *actualAtr;
  EsGobJmulticardConnectionCardNotPresentException *cardNotPresentException = nil;
  IOSLongArray *terminals = [conn getTerminalsWithBoolean:false];
  if (((IOSLongArray *) nil_chk(terminals))->size_ < 1) {
    @throw new_EsGobJmulticardConnectionNoReadersFoundException_init();
  }
  {
    IOSLongArray *a__ =
#line 188
    terminals;
    jlong const *b__ = a__->buffer_;
    jlong const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jlong terminal = *b__++;
      
#line 189
      [conn setTerminalWithInt:(jint) terminal];
      @try {
        responseAtr = [conn reset];
      }
      @catch (EsGobJmulticardConnectionCardNotPresentException *e) {
        cardNotPresentException = e;
        continue;
      }
      actualAtr = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_(responseAtr, EsGobJmulticardCardDnieDnieFactory_ATR_MASK);
      if ([((EsGobJmulticardCardAtr *) nil_chk(EsGobJmulticardCardDnieDnieFactory_ATR_NFC)) isEqual:actualAtr] || [((EsGobJmulticardCardAtr *) nil_chk(EsGobJmulticardCardDnieDnieFactory_ATR_NFC2)) isEqual:actualAtr]) {
        @try {
          EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_([EsGobJmulticardCardDnieDnieFactory_class_() getName], @"getEmrtdNfc", JreStrcat("$@", @"Detectado eMRTD con ATR: ", new_EsGobJmulticardCardDnieDnieAtr_initWithEsGobJmulticardCardAtr_(actualAtr)));
          return new_EsGobJmulticardCardIcaoIcaoMrtdWithPace_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(conn, cryptoHelper, ch);
        }
        @catch (EsGobJmulticardCardIcaoInvalidCanOrMrzException *e) {
          @throw new_EsGobJmulticardCardDnieInvalidAccessCodeException_initWithNSString_withJavaLangThrowable_(@"El MRZ del documento de viaje no es correcto", e);
        }
        @catch (EsGobJmulticardCardIcaoIcaoException *e) {
          @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_withJavaLangThrowable_(@"No se ha podido abrir el canal PACE", e);
        }
      }
    }
  }
  
#line 211
  if (cardNotPresentException != nil) {
    @throw cardNotPresentException;
  }
  @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_(@"No se ha podido conectar con ningun lector de tarjetas NFC");
}


#line 230
EsGobJmulticardCardDnieDnie *EsGobJmulticardCardDnieDnieFactory_getDnieWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_withBoolean_(id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHelper, id<JavaxSecurityAuthCallbackCallbackHandler> ch, jboolean includeCloneCards) {
  EsGobJmulticardCardDnieDnieFactory_initialize();
  
#line 237
  if (conn == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"La conexion no puede ser nula");
  }
  if (cryptoHelper == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El CryptoHelper no puede ser nulo");
  }
  
#line 244
  IOSByteArray *responseAtr;
  EsGobJmulticardCardAtr *actualAtr;
  EsGobJmulticardCardInvalidCardException *invalidCardException = nil;
  EsGobJmulticardConnectionCardNotPresentException *cardNotPresentException = nil;
  IOSLongArray *terminals = [conn getTerminalsWithBoolean:false];
  if (((IOSLongArray *) nil_chk(terminals))->size_ < 1) {
    @throw new_EsGobJmulticardConnectionNoReadersFoundException_init();
  }
  {
    IOSLongArray *a__ =
#line 252
    terminals;
    jlong const *b__ = a__->buffer_;
    jlong const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jlong terminal = *b__++;
      
#line 253
      [conn setTerminalWithInt:(jint) terminal];
      @try {
        responseAtr = [conn reset];
      }
      @catch (EsGobJmulticardConnectionCardNotPresentException *e) {
        cardNotPresentException = e;
        continue;
      }
      actualAtr = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_(responseAtr, EsGobJmulticardCardDnieDnieFactory_ATR_MASK);
      IOSByteArray *actualAtrBytes = [actualAtr getBytes];
      if ([((EsGobJmulticardCardAtr *) nil_chk(EsGobJmulticardCardDnieDnieFactory_ATR_NFC)) isEqual:actualAtr] || [((EsGobJmulticardCardAtr *) nil_chk(EsGobJmulticardCardDnieDnieFactory_ATR_NFC2)) isEqual:actualAtr]) {
        @try {
          
#line 268
          EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_([EsGobJmulticardCardDnieDnieFactory_class_() getName], @"getDnie", JreStrcat("$@", @"Detectado DNIe 3.0 o 4.0: ", new_EsGobJmulticardCardDnieDnieAtr_initWithEsGobJmulticardCardAtr_(actualAtr)));
          return new_EsGobJmulticardCardDnieDnieNfc_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(conn, pwc, cryptoHelper, ch);
        }
        @catch (EsGobJmulticardCardIcaoInvalidCanOrMrzException *e) {
          @throw new_EsGobJmulticardCardDnieInvalidAccessCodeException_initWithNSString_withJavaLangThrowable_(@"El CAN indicado del DNIe no es correcto", e);
        }
        @catch (EsGobJmulticardCardIcaoIcaoException *e) {
          @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_withJavaLangThrowable_(@"No se ha podido abrir el canal PACE", e);
        }
      }
      if ([((EsGobJmulticardCardAtr *) nil_chk(EsGobJmulticardCardDnieDnieFactory_ATR)) isEqual:actualAtr]) {
        if (IOSByteArray_Get(nil_chk(actualAtrBytes), 15) == (jint) 0x04) {
          EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 281
          [EsGobJmulticardCardDnieDnieFactory_class_() getName],
#line 282
          @"getDnie", JreStrcat("$$", @"Detectado DNIe 3.0 o 4.0 con ATR ",
#line 283
          [new_EsGobJmulticardCardDnieDnieAtr_initWithEsGobJmulticardCardAtr_(actualAtr) description]));
          
#line 285
          return new_EsGobJmulticardCardDnieDnie3_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(conn, pwc, cryptoHelper, ch);
        }
        EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_([EsGobJmulticardCardDnieDnieFactory_class_() getName], @"getDnie", @"Detectado DNIe 2.0");
        return new_EsGobJmulticardCardDnieDnie_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(conn, pwc, cryptoHelper, ch);
      }
      if (includeCloneCards) {
        if ([((EsGobJmulticardCardAtr *) nil_chk(EsGobJmulticardCardDnieDnieFactory_ATR_TIF)) isEqual:actualAtr]) {
          EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_([EsGobJmulticardCardDnieDnieFactory_class_() getName], @"getDnie", @"Detectada TIF");
          return new_EsGobJmulticardCardDnieTifTif_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(conn, pwc, cryptoHelper, ch);
        }
        
#line 297
        if ([((EsGobJmulticardCardAtr *) nil_chk(JreLoadStatic(EsGobJmulticardCardDnieCeresscCeresSc, ATR_TC))) isEqual:actualAtr]) {
          EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_([EsGobJmulticardCardDnieDnieFactory_class_() getName], @"getDnie", @"Detectada tarjeta FNMT CERES 4.30 o superior");
          return new_EsGobJmulticardCardDnieCeresscCeresSc_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(conn, pwc, cryptoHelper, ch);
        }
      }
      
#line 305
      if (
#line 306
      IOSByteArray_Get(actualAtrBytes, ((IOSByteArray *) nil_chk(actualAtrBytes))->size_ - 1) == (jbyte) (jint) 0x81 &&
#line 307
      IOSByteArray_Get(actualAtrBytes, actualAtrBytes->size_ - 2) == (jbyte) (jint) 0x65) {
        
#line 309
        @throw new_EsGobJmulticardCardDnieBurnedDnieCardException_initWithEsGobJmulticardCardAtr_(actualAtr);
      }
      
#line 312
      invalidCardException = new_EsGobJmulticardCardInvalidCardException_initWithNSString_withEsGobJmulticardCardAtr_withByteArray_(@"DNIe", EsGobJmulticardCardDnieDnieFactory_ATR, responseAtr);
    }
  }
  
#line 314
  if (invalidCardException != nil) {
    @throw invalidCardException;
  }
  if (cardNotPresentException != nil) {
    @throw cardNotPresentException;
  }
  @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_(@"No se ha podido conectar con ningun lector de tarjetas");
}


#line 326
EsGobJmulticardCardDnieDnie3Cwa14890Constants *EsGobJmulticardCardDnieDnieFactory_getDnie3UsrCwa14890ConstantsWithNSString_(NSString *idesp) {
  EsGobJmulticardCardDnieDnieFactory_initialize();
  
#line 327
  if (idesp == nil || [idesp java_isEmpty]) {
    EsGobJmulticardJmcLogger_warningWithNSString_(
#line 329
    @"El IDESP proporcionado es nulo o vacio, se usaran las constantes CWA14890 de usuario para los DNIe 3 modernos");
    
#line 331
    return new_EsGobJmulticardCardDnieDnie3r2UsrCwa14890Constants_initPackagePrivate();
  }
  if ([((NSString *) nil_chk(EsGobJmulticardCardDnieDnieFactory_DNIE3_R2_IDESP)) compareToWithId:idesp] > 0) {
    return new_EsGobJmulticardCardDnieDnie3UsrCwa14890Constants_initPackagePrivate();
  }
  return new_EsGobJmulticardCardDnieDnie3r2UsrCwa14890Constants_initPackagePrivate();
}


#line 339
EsGobJmulticardCardDnieDnie3Cwa14890Constants *EsGobJmulticardCardDnieDnieFactory_getDnie3PinCwa14890ConstantsWithNSString_(NSString *idesp) {
  EsGobJmulticardCardDnieDnieFactory_initialize();
  
#line 340
  if (idesp == nil || [idesp java_isEmpty]) {
    EsGobJmulticardJmcLogger_warningWithNSString_(
#line 342
    @"El IDESP proporcionado era nulo o vacio, se usaran las constantes CWA14890 de PIN para los DNIe 3 modernos");
    
#line 344
    return new_EsGobJmulticardCardDnieDnie3r2PinCwa14890Constants_initPackagePrivate();
  }
  if ([((NSString *) nil_chk(EsGobJmulticardCardDnieDnieFactory_DNIE3_R2_IDESP)) compareToWithId:idesp] > 0) {
    return new_EsGobJmulticardCardDnieDnie3PinCwa14890Constants_initPackagePrivate();
  }
  return new_EsGobJmulticardCardDnieDnie3r2PinCwa14890Constants_initPackagePrivate();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardDnieDnieFactory)
