//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/Dnie.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobJmulticardCardDnieDnie")
#ifdef RESTRICT_EsGobJmulticardCardDnieDnie
#define INCLUDE_ALL_EsGobJmulticardCardDnieDnie 0
#else
#define INCLUDE_ALL_EsGobJmulticardCardDnieDnie 1
#endif
#undef RESTRICT_EsGobJmulticardCardDnieDnie

#if !defined (EsGobJmulticardCardDnieDnie_) && (INCLUDE_ALL_EsGobJmulticardCardDnieDnie || defined(INCLUDE_EsGobJmulticardCardDnieDnie))
#define EsGobJmulticardCardDnieDnie_

#define RESTRICT_EsGobJmulticardCardIso7816eightAbstractIso7816EightCard 1
#define INCLUDE_EsGobJmulticardCardIso7816eightAbstractIso7816EightCard 1
#include "es/gob/jmulticard/card/iso7816eight/AbstractIso7816EightCard.h"

#define RESTRICT_EsGobJmulticardCardDnieDni 1
#define INCLUDE_EsGobJmulticardCardDnieDni 1
#include "es/gob/jmulticard/card/dnie/Dni.h"

#define RESTRICT_EsGobJmulticardCardCwa14890Cwa14890Card 1
#define INCLUDE_EsGobJmulticardCardCwa14890Cwa14890Card 1
#include "es/gob/jmulticard/card/cwa14890/Cwa14890Card.h"

@class EsGobJmulticardCryptoHelper;
@class IOSByteArray;
@class IOSObjectArray;
@class JavaSecurityCertX509Certificate;
@class JavaxSecurityAuthCallbackPasswordCallback;
@protocol EsGobJmulticardCardCwa14890Cwa14890PrivateConstants;
@protocol EsGobJmulticardCardCwa14890Cwa14890PublicConstants;
@protocol EsGobJmulticardCardPrivateKeyReference;
@protocol EsGobJmulticardConnectionApduConnection;
@protocol JavaSecurityInterfacesRSAPrivateKey;
@protocol JavaSecurityInterfacesRSAPublicKey;
@protocol JavaxSecurityAuthCallbackCallbackHandler;

/*!
 @brief DNI Electr&oacute;nico.
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s.
 */
@interface EsGobJmulticardCardDnieDnie : EsGobJmulticardCardIso7816eightAbstractIso7816EightCard < EsGobJmulticardCardDnieDni, EsGobJmulticardCardCwa14890Cwa14890Card > {
 @public
  /*!
   @brief Conexi&oacute;n inicial con la tarjeta, sin ning&uacute;n canal seguro.
   */
  id<EsGobJmulticardConnectionApduConnection> rawConnection_;
}

#pragma mark Public

/*!
 @brief Realiza la operaci&oacute;n de cambio de PIN.Necesita tener un canal administrativo abierto.
 @param oldPin PIN actual.
 @param newPin PIN nuevo.
 @return APDU de respuesta de la operaci&oacute;n.
 @throw CryptoCardExceptionCuando se produce un error en el cambio de PIN.
 @throw PinExceptionSi el PIN actual es incorrecto.
 @throw AuthenticationModeLockedExceptionCuando el DNIe est&aacute; bloqueado.
 */
- (IOSByteArray *)changePINWithNSString:(NSString *)oldPin
                           withNSString:(NSString *)newPin;

/*!
 @brief Realiza un cifrado RSA directo con una clave privada.
 @param data Datos a cifrar.
 @param privateKeyReference Referencia a la clave privada RSA a usar.
 @return Datos cifrados.
 @throw CryptoCardExceptionSi hay errores en el proceso en la tarjeta o en la comunicaci&oacute;n con ella.
 @throw PinExceptionSi el PIN introducido no es correcto.
 @throw LostChannelExceptionSi se pierde el canal de cifrado.
 */
- (IOSByteArray *)cipherDataWithByteArray:(IOSByteArray *)data
withEsGobJmulticardCardPrivateKeyReference:(id<EsGobJmulticardCardPrivateKeyReference>)privateKeyReference;

/*!
 @brief Conecta con el lector del sistema que tenga un DNIe insertado.
 @param conn Conexi &oacute; n hacia el DNIe.
 @throw ApduConnectionExceptionSi hay problemas de conexi&oacute;n con la tarjeta.
 */
+ (void)connectWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn;

- (jboolean)externalAuthenticationWithByteArray:(IOSByteArray *)extAuthenticationData;

- (IOSObjectArray *)getAliases;

- (NSString *)getCardName;

- (JavaSecurityCertX509Certificate *)getCertificateWithNSString:(NSString *)alias;

- (IOSByteArray *)getChrCCvIfdWithEsGobJmulticardCardCwa14890Cwa14890PublicConstants:(id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>)consts;

- (id<JavaSecurityInterfacesRSAPublicKey>)getIccCertPublicKey;

/*!
 @brief Obtiene el n&uacute;mero de soporte (IDESP) del DNIe.
 @return Obtiene el n&uacute;mero de soporte (IDESP) del DNIe.
 @throw Iso7816FourCardExceptionSi hay problemas enviando la APDU.
 @throw FileNotFoundExceptionSi no se encuentra el fichero que contiene el IDESP.
 @throw IOExceptionSi no se puede conectar con la tarjeta.
 */
- (NSString *)getIdesp;

- (jint)getIfdKeyLengthWithEsGobJmulticardCardCwa14890Cwa14890PublicConstants:(id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>)consts;

- (id<JavaSecurityInterfacesRSAPrivateKey>)getIfdPrivateKeyWithEsGobJmulticardCardCwa14890Cwa14890PrivateConstants:(id<EsGobJmulticardCardCwa14890Cwa14890PrivateConstants>)consts;

- (IOSByteArray *)getInternalAuthenticateMessageWithByteArray:(IOSByteArray *)randomIfd
                                                withByteArray:(IOSByteArray *)chrCCvIfd;

/*!
 @brief Devuelve los intentos restantes de comprobaci&oacute;n de PIN del DNIe.
 @return Intentos restantes de comprobaci&oacute;n de PIN del DNIe.
 @throw ApduConnectionExceptionCuando hay problemas en el proceso.
 */
- (jint)getPinRetriesLeft;

- (id<EsGobJmulticardCardPrivateKeyReference>)getPrivateKeyWithNSString:(NSString *)alias;

- (IOSByteArray *)getRefIccPrivateKeyWithEsGobJmulticardCardCwa14890Cwa14890PublicConstants:(id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>)consts;

- (IOSByteArray *)getSerialNumber;

/*!
 @brief Establece y abre el canal seguro CWA-14890 si no lo estaba ya.
 @throw CryptoCardExceptionSi hay problemas en el proceso.
 @throw PinExceptionSi el PIN usado para la apertura de canal no es v&aacute;lido o
                       la tarjeta tiene el PIN bloqueado.
 @throw PasswordCallbackNotFoundExceptionSi no se ha proporcionado una forma de obtener el PIN.
 */
- (void)openSecureChannelIfNotAlreadyOpened;

/*!
 @brief Establece y abre el canal seguro CWA-14890 si no lo estaba ya.
 @param doChv <code> true </code>  si la apertura de canal seguro debe incluir la verificaci &oacute; n               de PIN,  <code> false </code>  si debe abrirse canal seguro  <b> sin verificar PIN </b> .
 @throw CryptoCardExceptionSi hay problemas en el proceso.
 @throw PinExceptionSi el PIN usado para la apertura de canal no es v&aacute;lido o
          la tarjeta tiene el PIN bloqueado.
 @throw PasswordCallbackNotFoundExceptionSi no se ha proporcionado una forma de obtener el PIN.
 */
- (void)openSecureChannelIfNotAlreadyOpenedWithBoolean:(jboolean)doChv;

/*!
 @brief Asigna un <code>CallbackHandler</code> a la tarjeta.
 @param handler <code> CallbackHandler </code>  a asignar.
 */
- (void)setCallbackHandlerWithJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)handler;

- (void)setKeysToAuthenticationWithByteArray:(IOSByteArray *)refPublicKey
                               withByteArray:(IOSByteArray *)refPrivateKey;

/*!
 @brief Asigna un <code>PasswordCallback</code> a la tarjeta.
 @param pwc <code> PasswordCallback </code>  a asignar.
 */
- (void)setPasswordCallbackWithJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)pwc;

- (IOSByteArray *)signWithByteArray:(IOSByteArray *)data
                       withNSString:(NSString *)signAlgorithm
withEsGobJmulticardCardPrivateKeyReference:(id<EsGobJmulticardCardPrivateKeyReference>)privateKeyReference;

- (NSString *)description;

- (void)verifyIcc;

- (void)verifyIfdCertificateChainWithEsGobJmulticardCardCwa14890Cwa14890PublicConstants:(id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>)consts;

- (void)verifyPinWithJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)psc;

#pragma mark Protected

/*!
 @brief Construye una clase que representa un DNIe.
 @param conn Conexi &oacute; n con la tarjeta.
 @param pwc <i> PasswordCallback </i>  para obtener el PIN del DNIe.
 @param cryptoHlpr Funcionalidades criptogr &aacute; ficas de utilidad que                    pueden variar entre m &aacute; quinas virtuales.
 @param ch Gestor de  <i> callbacks </i>  para la solicitud de datos al usuario.
 @throw ApduConnectionExceptionSi la conexi&oacute;n con la tarjeta se proporciona
                                  cerrada y no es posible abrirla.
 */
- (instancetype)initWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                  withJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)pwc
                                withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHlpr
                   withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)ch;

/*!
 @brief Obtiene la clase con funcionalidades de base de criptograf&iacute;a.
 @return Clase con funcionalidades de base de criptograf&iacute;a.
 */
- (EsGobJmulticardCryptoHelper *)getCryptoHelper;

/*!
 @brief Obtiene las constantes privadas CWA-14890 para el cifrado de canal.
 @return Constantes privadas CWA-14890 para el cifrado de canal.
 */
- (id<EsGobJmulticardCardCwa14890Cwa14890PrivateConstants>)getCwa14890PrivateConstants;

/*!
 @brief Obtiene las constantes p&uacute;blicas CWA-14890 para el cifrado de canal.
 @return Constantes p&uacute;blicas CWA-14890 para el cifrado de canal.
 */
- (id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>)getCwa14890PublicConstants;

/*!
 @brief Obtiene la <code>PasswordCallback</code> predefinida.
 @return <code>PasswordCallback</code> predefinida.
 @throw BadPinExceptionSi el <code>PasswordCallback</code> devuelve un PIN nulo o vac&iacute;o.
 @throw PasswordCallbackNotFoundExceptionSi no hay una <code>PasswordCallback</code> definida.
 */
- (JavaxSecurityAuthCallbackPasswordCallback *)getInternalPasswordCallback;

/*!
 @brief Obtiene la <code>PasswordCallback</code>.
 @return <code>PasswordCallback</code>.
 */
- (JavaxSecurityAuthCallbackPasswordCallback *)getPasswordCallback;

/*!
 @brief Devuelve el texto del di&aacute;logo de inserci&oacute;n de PIN.
 @param retriesLeft Intentos restantes antes de bloquear la tarjeta.
 @return Mensaje que mostrar en el cuerpo del di&aacute;logo de inserci&oacute;n de PIN.
 */
- (NSString *)getPinMessageWithInt:(jint)retriesLeft;

/*!
 @brief Indica si el canal CWA-14890 est&aacute; o no abierto.
 @return <code>true</code> si el canal CWA-14890 est&aacute; abierto,
          <code>false</code> en caso contrario.
 */
- (jboolean)isSecurityChannelOpen;

/*!
 @brief Indica si es necesario haber verificado o no el PIN para poder leer los certicados.
 @return <code>true</code> si es necesario haber verificado o no el PIN para poder leer los certicados,
          <code>false</code> en caso contrario.
 */
- (jboolean)needsPinForLoadingCerts;

- (void)selectMasterFile;

/*!
 @brief Ejecuta la operaci&oacute;n interna de firma de la tarjeta.
 @param data Datos a firmar.
 @param signAlgorithm Algoritmo de firma.
 @param privateKeyReference Referencia a la clave privada de firma.
 @return Datos firmados.
 @throw CryptoCardExceptionSi hay problemas durante el proceso.
 @throw PinExceptionSi no se ha podido realizar la firma por un problema con el PIN
                       (no estar hecha la autenticaci&oacute;n de PIN).
 */
- (IOSByteArray *)signInternalWithByteArray:(IOSByteArray *)data
                               withNSString:(NSString *)signAlgorithm
 withEsGobJmulticardCardPrivateKeyReference:(id<EsGobJmulticardCardPrivateKeyReference>)privateKeyReference;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithByte:(jbyte)arg0
withEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(EsGobJmulticardCardDnieDnie)

J2OBJC_FIELD_SETTER(EsGobJmulticardCardDnieDnie, rawConnection_, id<EsGobJmulticardConnectionApduConnection>)

FOUNDATION_EXPORT void EsGobJmulticardCardDnieDnie_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(EsGobJmulticardCardDnieDnie *self, id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch);

FOUNDATION_EXPORT EsGobJmulticardCardDnieDnie *new_EsGobJmulticardCardDnieDnie_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobJmulticardCardDnieDnie *create_EsGobJmulticardCardDnieDnie_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch);

FOUNDATION_EXPORT void EsGobJmulticardCardDnieDnie_connectWithEsGobJmulticardConnectionApduConnection_(id<EsGobJmulticardConnectionApduConnection> conn);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardCardDnieDnie)

#endif

#pragma pop_macro("INCLUDE_ALL_EsGobJmulticardCardDnieDnie")
