//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/Dnie.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/CryptoHelper.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/JmcLogger.h"
#include "es/gob/jmulticard/apdu/CommandApdu.h"
#include "es/gob/jmulticard/apdu/ResponseApdu.h"
#include "es/gob/jmulticard/apdu/StatusWord.h"
#include "es/gob/jmulticard/apdu/dnie/ChangePinApduCommand.h"
#include "es/gob/jmulticard/apdu/dnie/GetChipInfoApduCommand.h"
#include "es/gob/jmulticard/apdu/dnie/LoadDataApduCommand.h"
#include "es/gob/jmulticard/apdu/dnie/RetriesLeftApduCommand.h"
#include "es/gob/jmulticard/apdu/dnie/SignDataApduCommand.h"
#include "es/gob/jmulticard/apdu/dnie/VerifyApduCommand.h"
#include "es/gob/jmulticard/apdu/iso7816eight/PsoSignHashApduCommand.h"
#include "es/gob/jmulticard/apdu/iso7816four/ExternalAuthenticateApduCommand.h"
#include "es/gob/jmulticard/apdu/iso7816four/InternalAuthenticateApduCommand.h"
#include "es/gob/jmulticard/apdu/iso7816four/MseSetAuthenticationKeyApduCommand.h"
#include "es/gob/jmulticard/apdu/iso7816four/MseSetComputationApduCommand.h"
#include "es/gob/jmulticard/asn1/custom/fnmt/ceressc/CeresScPrKdf.h"
#include "es/gob/jmulticard/asn1/der/pkcs1/DigestInfo.h"
#include "es/gob/jmulticard/asn1/der/pkcs15/Cdf.h"
#include "es/gob/jmulticard/asn1/der/pkcs15/Pkcs15Cdf.h"
#include "es/gob/jmulticard/asn1/der/pkcs15/PrKdf.h"
#include "es/gob/jmulticard/card/AuthenticationModeLockedException.h"
#include "es/gob/jmulticard/card/BadPinException.h"
#include "es/gob/jmulticard/card/CardException.h"
#include "es/gob/jmulticard/card/CardMessages.h"
#include "es/gob/jmulticard/card/CompressionUtils.h"
#include "es/gob/jmulticard/card/CryptoCardException.h"
#include "es/gob/jmulticard/card/Location.h"
#include "es/gob/jmulticard/card/PasswordCallbackNotFoundException.h"
#include "es/gob/jmulticard/card/PinException.h"
#include "es/gob/jmulticard/card/PrivateKeyReference.h"
#include "es/gob/jmulticard/card/cwa14890/Cwa14890PrivateConstants.h"
#include "es/gob/jmulticard/card/cwa14890/Cwa14890PublicConstants.h"
#include "es/gob/jmulticard/card/dnie/Dnie.h"
#include "es/gob/jmulticard/card/dnie/DnieCardException.h"
#include "es/gob/jmulticard/card/dnie/DnieCwa14890Constants.h"
#include "es/gob/jmulticard/card/dnie/DniePrivateKeyReference.h"
#include "es/gob/jmulticard/card/iso7816eight/AbstractIso7816EightCard.h"
#include "es/gob/jmulticard/card/iso7816four/Iso7816FourCardException.h"
#include "es/gob/jmulticard/connection/ApduConnection.h"
#include "es/gob/jmulticard/connection/ApduConnectionException.h"
#include "es/gob/jmulticard/connection/LostChannelException.h"
#include "es/gob/jmulticard/connection/cwa14890/Cwa14890Connection.h"
#include "es/gob/jmulticard/connection/cwa14890/Cwa14890OneV1Connection.h"
#include "es/gob/jmulticard/connection/cwa14890/SecureChannelException.h"
#include "es/gob/jmulticard/connection/pace/PaceConnection.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/math/BigInteger.h"
#include "java/security/cert/CertificateException.h"
#include "java/security/cert/X509Certificate.h"
#include "java/security/interfaces/RSAPrivateKey.h"
#include "java/security/interfaces/RSAPublicKey.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "javax/security/auth/callback/Callback.h"
#include "javax/security/auth/callback/CallbackHandler.h"
#include "javax/security/auth/callback/PasswordCallback.h"
#include "javax/security/auth/callback/UnsupportedCallbackException.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/card/dnie/Dnie must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardCardDnieDnie () {
 @public
  id<JavaUtilSet> aliases_;
  /*!
   @brief Certificados de la tarjeta indexados por su alias.
   */
  id<JavaUtilMap> certs_;
  /*!
   @brief Alias de los certificados de la tarjeta indexados por el identificador
  interno del certificado (pasado de <code>byte[]</code> a <code>String</code>).
   */
  id<JavaUtilMap> aliasByCertAndKeyId_;
  /*!
   @brief Referencias a las claves privadas de la tarjeta indexadas por el alias de su certificado asociado.
   */
  id<JavaUtilMap> keyReferences_;
  /*!
   @brief Manejador de funciones criptogr&aacute;ficas.
   */
  EsGobJmulticardCryptoHelper *cryptoHelper_;
  JavaxSecurityAuthCallbackPasswordCallback *passwordCallback_;
  id<JavaxSecurityAuthCallbackCallbackHandler> callbackHandler_;
}

/*!
 @brief Realiza la operaci&oacute;n de firma.
 @param data Datos que se desean firmar.
 @param signAlgorithm Algoritmo de firma (por ejemplo,  <code> SHA512withRSA </code> ,  <code> SHA1withRSA </code> , etc.).
 @param privateKeyReference Referencia a la clave privada para la firma.
 @return Firma de los datos.
 @throw CryptoCardExceptionCuando se produce un error durante la operaci&oacute;n de firma.
 @throw PinExceptionSi el PIN proporcionado en la <i>PasswordCallback</i> es incorrecto o
                       la tarjeta tiene el PIN bloqueado.
 @throw PasswordCallbackNotFoundExceptionSi no se ha proporcionado una forma de obtener el PIN.
 */
- (IOSByteArray *)signOperationWithByteArray:(IOSByteArray *)data
                                withNSString:(NSString *)signAlgorithm
  withEsGobJmulticardCardPrivateKeyReference:(id<EsGobJmulticardCardPrivateKeyReference>)privateKeyReference;

/*!
 @brief Carga localizaciones de claves, alias y certificados.
 @throw ApduConnectionExceptionSi hay problemas en la carga.
 */
- (void)loadCertificates;

/*!
 @brief Oculta los alias certificados que no tienen una clave privada asociada.
 Los certificados se mantienen, y se pueden seguir obteniendo si se conoce el alias.
 */
- (void)hideCertsWithoutKey;

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardCardDnieDnie, aliases_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardDnieDnie, certs_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardDnieDnie, aliasByCertAndKeyId_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardDnieDnie, keyReferences_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardDnieDnie, cryptoHelper_, EsGobJmulticardCryptoHelper *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardDnieDnie, passwordCallback_, JavaxSecurityAuthCallbackPasswordCallback *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardDnieDnie, callbackHandler_, id<JavaxSecurityAuthCallbackCallbackHandler>)

/*!
 @brief Octeto que identifica una verificaci&oacute;n fallida del PIN.
 */
inline jbyte EsGobJmulticardCardDnieDnie_get_ERROR_PIN_SW1(void);
#define EsGobJmulticardCardDnieDnie_ERROR_PIN_SW1 99
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardCardDnieDnie, ERROR_PIN_SW1, jbyte)

/*!
 @brief Identificador del fichero del certificado de componente del DNIe.
 */
inline IOSByteArray *EsGobJmulticardCardDnieDnie_get_CERT_ICC_FILE_ID(void);
static IOSByteArray *EsGobJmulticardCardDnieDnie_CERT_ICC_FILE_ID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardDnieDnie, CERT_ICC_FILE_ID, IOSByteArray *)

/*!
 @brief Nombre del <i>Master File</i> del DNIe.
 */
inline NSString *EsGobJmulticardCardDnieDnie_get_MASTER_FILE_NAME(void);
static NSString *EsGobJmulticardCardDnieDnie_MASTER_FILE_NAME = @"Master.File";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardDnieDnie, MASTER_FILE_NAME, NSString *)

/*!
 @brief Localizaci&oacute;n del CDF PKCS#15.
 */
inline EsGobJmulticardCardLocation *EsGobJmulticardCardDnieDnie_get_CDF_LOCATION(void);
static EsGobJmulticardCardLocation *EsGobJmulticardCardDnieDnie_CDF_LOCATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardDnieDnie, CDF_LOCATION, EsGobJmulticardCardLocation *)

/*!
 @brief Localizaci&oacute;n del PrKDF PKCS#15.
 */
inline EsGobJmulticardCardLocation *EsGobJmulticardCardDnieDnie_get_PRKDF_LOCATION(void);
static EsGobJmulticardCardLocation *EsGobJmulticardCardDnieDnie_PRKDF_LOCATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardDnieDnie, PRKDF_LOCATION, EsGobJmulticardCardLocation *)

/*!
 @brief Localizaci&oacute;n del EF IDESP.
 */
inline EsGobJmulticardCardLocation *EsGobJmulticardCardDnieDnie_get_IDESP_LOCATION(void);
static EsGobJmulticardCardLocation *EsGobJmulticardCardDnieDnie_IDESP_LOCATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardDnieDnie, IDESP_LOCATION, EsGobJmulticardCardLocation *)

__attribute__((unused)) static IOSByteArray *EsGobJmulticardCardDnieDnie_signInternalWithByteArray_withNSString_withEsGobJmulticardCardPrivateKeyReference_(EsGobJmulticardCardDnieDnie *self, IOSByteArray *data, NSString *signAlgorithm, id<EsGobJmulticardCardPrivateKeyReference> privateKeyReference);

__attribute__((unused)) static IOSByteArray *EsGobJmulticardCardDnieDnie_signOperationWithByteArray_withNSString_withEsGobJmulticardCardPrivateKeyReference_(EsGobJmulticardCardDnieDnie *self, IOSByteArray *data, NSString *signAlgorithm, id<EsGobJmulticardCardPrivateKeyReference> privateKeyReference);

__attribute__((unused)) static jboolean EsGobJmulticardCardDnieDnie_isSecurityChannelOpen(EsGobJmulticardCardDnieDnie *self);

__attribute__((unused)) static void EsGobJmulticardCardDnieDnie_selectMasterFile(EsGobJmulticardCardDnieDnie *self);

__attribute__((unused)) static void EsGobJmulticardCardDnieDnie_verifyPinWithJavaxSecurityAuthCallbackPasswordCallback_(EsGobJmulticardCardDnieDnie *self, JavaxSecurityAuthCallbackPasswordCallback *psc);

__attribute__((unused)) static IOSByteArray *EsGobJmulticardCardDnieDnie_changePINWithNSString_withNSString_(EsGobJmulticardCardDnieDnie *self, NSString *oldPin, NSString *newPin);

__attribute__((unused)) static void EsGobJmulticardCardDnieDnie_loadCertificates(EsGobJmulticardCardDnieDnie *self);

__attribute__((unused)) static void EsGobJmulticardCardDnieDnie_hideCertsWithoutKey(EsGobJmulticardCardDnieDnie *self);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/Dnie.java"

J2OBJC_INITIALIZED_DEFN(EsGobJmulticardCardDnieDnie)


#line 108
@implementation EsGobJmulticardCardDnieDnie


#line 164
- (instancetype)initWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                  withJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)pwc
                                withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHlpr
                   withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)ch {
  EsGobJmulticardCardDnieDnie_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(self, conn, pwc, cryptoHlpr, ch);
  return self;
}


#line 192
- (EsGobJmulticardCryptoHelper *)getCryptoHelper {
  return self->cryptoHelper_;
}


#line 200
- (JavaxSecurityAuthCallbackPasswordCallback *)getPasswordCallback {
  return self->passwordCallback_;
}


#line 208
- (id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>)getCwa14890PublicConstants {
  
#line 210
  return new_EsGobJmulticardCardDnieDnieCwa14890Constants_initPackagePrivate();
}


#line 217
- (id<EsGobJmulticardCardCwa14890Cwa14890PrivateConstants>)getCwa14890PrivateConstants {
  
#line 219
  return new_EsGobJmulticardCardDnieDnieCwa14890Constants_initPackagePrivate();
}


#line 232
- (IOSByteArray *)signInternalWithByteArray:(IOSByteArray *)data
                               withNSString:(NSString *)signAlgorithm
 withEsGobJmulticardCardPrivateKeyReference:(id<EsGobJmulticardCardPrivateKeyReference>)privateKeyReference {
  return EsGobJmulticardCardDnieDnie_signInternalWithByteArray_withNSString_withEsGobJmulticardCardPrivateKeyReference_(self, data, signAlgorithm, privateKeyReference);
}


#line 255
- (IOSByteArray *)signOperationWithByteArray:(IOSByteArray *)data
                                withNSString:(NSString *)signAlgorithm
  withEsGobJmulticardCardPrivateKeyReference:(id<EsGobJmulticardCardPrivateKeyReference>)privateKeyReference {
  return EsGobJmulticardCardDnieDnie_signOperationWithByteArray_withNSString_withEsGobJmulticardCardPrivateKeyReference_(self, data, signAlgorithm, privateKeyReference);
}


#line 325
- (JavaxSecurityAuthCallbackPasswordCallback *)getInternalPasswordCallback {
  jint retriesLeft;
  @try {
    retriesLeft = [self getPinRetriesLeft];
  }
  @catch (EsGobJmulticardConnectionApduConnectionException *e) {
    @throw new_EsGobJmulticardCardPinException_initWithNSString_withJavaLangThrowable_(@"No se ha podido obtener el numero de intentos restantes de PIN", e);
  }
  if (retriesLeft == 0) {
    @throw new_EsGobJmulticardCardAuthenticationModeLockedException_init();
  }
  
#line 338
  if (self->passwordCallback_ != nil) {
    return self->passwordCallback_;
  }
  
#line 343
  if (self->callbackHandler_ != nil) {
    JavaxSecurityAuthCallbackPasswordCallback *pwc = new_JavaxSecurityAuthCallbackPasswordCallback_initWithNSString_withBoolean_(
#line 345
    [self getPinMessageWithInt:retriesLeft],
#line 346
    false);
    
#line 348
    @try {
      [((id<JavaxSecurityAuthCallbackCallbackHandler>) nil_chk(self->callbackHandler_)) handleWithJavaxSecurityAuthCallbackCallbackArray:[IOSObjectArray newArrayWithObjects:(id[]){ pwc } count:1 type:JavaxSecurityAuthCallbackCallback_class_()]];
    }
    @catch (JavaIoIOException *e) {
      @throw new_EsGobJmulticardCardPasswordCallbackNotFoundException_initWithNSString_withJavaLangThrowable_(
#line 353
      @"El CallbackHandler no ha permitido pedir el PIN al usuario", e);
    }
    @catch (
#line 351
    JavaxSecurityAuthCallbackUnsupportedCallbackException *e) {
      @throw new_EsGobJmulticardCardPasswordCallbackNotFoundException_initWithNSString_withJavaLangThrowable_(
#line 353
      @"El CallbackHandler no ha permitido pedir el PIN al usuario", e);
    }
    
#line 356
    if ([pwc getPassword] == nil || ((IOSCharArray *) nil_chk([pwc getPassword]))->size_ < 1) {
      @throw new_EsGobJmulticardCardBadPinException_initWithNSString_(@"El PIN no puede ser nulo ni vacio");
    }
    return pwc;
  }
  @throw new_EsGobJmulticardCardPasswordCallbackNotFoundException_initWithNSString_(@"No hay ningun metodo para obtener el PIN");
}


#line 369
- (NSString *)getPinMessageWithInt:(jint)retriesLeft {
  
#line 371
  return EsGobJmulticardCardCardMessages_getStringWithNSString_withNSString_(@"Dnie.0", JavaLangInteger_toStringWithInt_(retriesLeft));
}


#line 379
- (jboolean)isSecurityChannelOpen {
  return EsGobJmulticardCardDnieDnie_isSecurityChannelOpen(self);
}


#line 391
- (jboolean)needsPinForLoadingCerts {
  
#line 393
  return true;
}


#line 399
- (void)selectMasterFile {
  EsGobJmulticardCardDnieDnie_selectMasterFile(self);
}


#line 404
- (NSString *)description {
  
#line 406
  return [self getCardName];
}


#line 409
- (IOSByteArray *)getSerialNumber {
  
#line 411
  EsGobJmulticardApduResponseApdu *response = [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) transmitWithEsGobJmulticardApduCommandApdu:new_EsGobJmulticardApduDnieGetChipInfoApduCommand_init()];
  if ([((EsGobJmulticardApduResponseApdu *) nil_chk(response)) isOk]) {
    return [response getData];
  }
  @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_(JreStrcat("$@", @"Respuesta invalida en la obtencion del numero de serie con el codigo: ",
#line 416
  [response getStatusWord]));
}


#line 420
- (NSString *)getCardName {
  
#line 422
  return @"DNIe";
}


#line 425
- (IOSObjectArray *)getAliases {
  
#line 427
  return [((id<JavaUtilSet>) nil_chk(self->aliases_)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSString_class_()]];
}


#line 430
- (JavaSecurityCertX509Certificate *)getCertificateWithNSString:(NSString *)alias {
  
#line 432
  return [((id<JavaUtilMap>) nil_chk(self->certs_)) getWithId:alias];
}


#line 435
- (void)verifyIcc {
}


#line 440
- (id<JavaSecurityInterfacesRSAPublicKey>)getIccCertPublicKey {
  
#line 442
  IOSByteArray *iccCertEncoded;
  @try {
    EsGobJmulticardCardDnieDnie_selectMasterFile(self);
    iccCertEncoded = [self selectFileByIdAndReadWithByteArray:EsGobJmulticardCardDnieDnie_CERT_ICC_FILE_ID];
  }
  @catch (EsGobJmulticardConnectionApduConnectionException *e) {
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(
#line 449
    @"Error en el envio de APDU para la seleccion del certificado de componente de la tarjeta", e);
  }
  @catch (
#line 452
  EsGobJmulticardCardIso7816fourIso7816FourCardException *e) {
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Error en la seleccion del certificado de componente de la tarjeta", e);
  }
  JavaSecurityCertX509Certificate *iccCert;
  @try {
    iccCert = EsGobJmulticardCryptoHelper_generateCertificateWithByteArray_(iccCertEncoded);
  }
  @catch (JavaSecurityCertCertificateException *e) {
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"No se pudo obtener el certificado de componente", e);
  }
  return [((EsGobJmulticardCryptoHelper *) nil_chk(self->cryptoHelper_)) getRsaPublicKeyWithJavaSecurityCertX509Certificate:iccCert];
}


#line 465
- (void)verifyIfdCertificateChainWithEsGobJmulticardCardCwa14890Cwa14890PublicConstants:(id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>)consts {
  
#line 471
  @try {
    [self setPublicKeyToVerificationWithByteArray:[((id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>) nil_chk(consts)) getRefCCvCaPublicKey]];
  }
  @catch (EsGobJmulticardConnectionCwa14890SecureChannelException *e) {
    @throw new_EsGobJmulticardConnectionCwa14890SecureChannelException_initWithNSString_withJavaLangThrowable_(
#line 476
    @"Error al seleccionar para verificacion la clave publica de la CA raiz de los certificados verificables por la tarjeta",
#line 477
    e);
  }
  
#line 482
  @try {
    [self verifyCertificateWithByteArray:[consts getCCvCa]];
  }
  @catch (EsGobJmulticardConnectionCwa14890SecureChannelException *e) {
    @throw new_EsGobJmulticardConnectionCwa14890SecureChannelException_initWithNSString_withJavaLangThrowable_(
#line 487
    @"Error en la verificacion del certificado de la CA intermedia de Terminal", e);
  }
  
#line 493
  @try {
    [self setPublicKeyToVerificationWithByteArray:[consts getChrCCvCa]];
  }
  @catch (EsGobJmulticardConnectionCwa14890SecureChannelException *e) {
    @throw new_EsGobJmulticardConnectionCwa14890SecureChannelException_initWithNSString_withJavaLangThrowable_(
#line 498
    @"Error al establecer la clave publica del certificado de CA intermedia de Terminal para su verificacion en tarjeta", e);
  }
  
#line 503
  @try {
    [self verifyCertificateWithByteArray:[consts getCCvIfd]];
  }
  @catch (EsGobJmulticardConnectionCwa14890SecureChannelException *e) {
    @throw new_EsGobJmulticardConnectionCwa14890SecureChannelException_initWithNSString_withJavaLangThrowable_(@"Error en la verificacion del certificado de Terminal", e);
  }
}


#line 511
- (IOSByteArray *)getRefIccPrivateKeyWithEsGobJmulticardCardCwa14890Cwa14890PublicConstants:(id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>)consts {
  
#line 513
  return [((id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>) nil_chk(consts)) getRefIccPrivateKey];
}


#line 516
- (IOSByteArray *)getChrCCvIfdWithEsGobJmulticardCardCwa14890Cwa14890PublicConstants:(id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>)consts {
  
#line 518
  return [((id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>) nil_chk(consts)) getChrCCvIfd];
}


#line 521
- (id<JavaSecurityInterfacesRSAPrivateKey>)getIfdPrivateKeyWithEsGobJmulticardCardCwa14890Cwa14890PrivateConstants:(id<EsGobJmulticardCardCwa14890Cwa14890PrivateConstants>)consts {
  
#line 523
  return [((id<EsGobJmulticardCardCwa14890Cwa14890PrivateConstants>) nil_chk(consts)) getIfdPrivateKey];
}


#line 526
- (void)setKeysToAuthenticationWithByteArray:(IOSByteArray *)refPublicKey
                               withByteArray:(IOSByteArray *)refPrivateKey {
  
#line 529
  EsGobJmulticardApduCommandApdu *apdu = new_EsGobJmulticardApduIso7816fourMseSetAuthenticationKeyApduCommand_initWithByte_withByteArray_withByteArray_((jbyte) (jint) 0x00, refPublicKey, refPrivateKey);
  EsGobJmulticardApduResponseApdu *res = [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) transmitWithEsGobJmulticardApduCommandApdu:apdu];
  if (![((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
    @throw new_EsGobJmulticardConnectionCwa14890SecureChannelException_initWithNSString_(JreStrcat("$@C", @"Error durante el establecimiento de las claves publica y privada para autenticacion (error: ",
#line 534
    [res getStatusWord], ')'));
  }
}

- (IOSByteArray *)getInternalAuthenticateMessageWithByteArray:(IOSByteArray *)randomIfd
                                                withByteArray:(IOSByteArray *)chrCCvIfd {
  
#line 542
  EsGobJmulticardApduCommandApdu *apdu = new_EsGobJmulticardApduIso7816fourInternalAuthenticateApduCommand_initWithByte_withByteArray_withByteArray_((jbyte) (jint) 0x00, randomIfd, chrCCvIfd);
  EsGobJmulticardApduResponseApdu *res = [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) transmitWithEsGobJmulticardApduCommandApdu:apdu];
  if ([((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
    return [res getData];
  }
  @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_(JreStrcat("$@", @"Respuesta invalida en la obtencion del mensaje de autenticacion interna con el codigo: ",
#line 548
  [res getStatusWord]));
}


#line 552
- (jboolean)externalAuthenticationWithByteArray:(IOSByteArray *)extAuthenticationData {
  
#line 554
  EsGobJmulticardApduCommandApdu *apdu = new_EsGobJmulticardApduIso7816fourExternalAuthenticateApduCommand_initWithByte_withByteArray_((jbyte) (jint) 0x00, extAuthenticationData);
  return [((EsGobJmulticardApduResponseApdu *) nil_chk([((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) transmitWithEsGobJmulticardApduCommandApdu:apdu])) isOk];
}


#line 558
- (id<EsGobJmulticardCardPrivateKeyReference>)getPrivateKeyWithNSString:(NSString *)alias {
  
#line 560
  return [((id<JavaUtilMap>) nil_chk(self->keyReferences_)) getWithId:alias];
}


#line 563
- (IOSByteArray *)signWithByteArray:(IOSByteArray *)data
                       withNSString:(NSString *)signAlgorithm
withEsGobJmulticardCardPrivateKeyReference:(id<EsGobJmulticardCardPrivateKeyReference>)privateKeyReference {
  
#line 568
  IOSByteArray *signBytes = EsGobJmulticardCardDnieDnie_signInternalWithByteArray_withNSString_withEsGobJmulticardCardPrivateKeyReference_(self, data, signAlgorithm, privateKeyReference);
  @try {
    [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) close];
  }
  @catch (EsGobJmulticardConnectionApduConnectionException *e) {
    EsGobJmulticardJmcLogger_severeWithNSString_(JreStrcat("$@", @"No se ha podido cerrar el canal despues de una firma, es posible que fallen operaciones: ",
#line 574
    e));
  }
  
#line 577
  return signBytes;
}


#line 580
- (void)verifyPinWithJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)psc {
  EsGobJmulticardCardDnieDnie_verifyPinWithJavaxSecurityAuthCallbackPasswordCallback_(self, psc);
}


#line 616
- (jint)getIfdKeyLengthWithEsGobJmulticardCardCwa14890Cwa14890PublicConstants:(id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>)consts {
  
#line 618
  return [((id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>) nil_chk(consts)) getIfdKeyLength];
}


#line 633
- (IOSByteArray *)cipherDataWithByteArray:(IOSByteArray *)data
withEsGobJmulticardCardPrivateKeyReference:(id<EsGobJmulticardCardPrivateKeyReference>)privateKeyReference {
  
#line 637
  [self openSecureChannelIfNotAlreadyOpened];
  
#line 639
  EsGobJmulticardApduResponseApdu *res;
  @try {
    EsGobJmulticardApduCommandApdu *apdu = new_EsGobJmulticardApduDnieLoadDataApduCommand_initWithByteArray_(data);
    res = [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) transmitWithEsGobJmulticardApduCommandApdu:apdu];
    if (![((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
      EsGobJmulticardJmcLogger_severeWithNSString_(JreStrcat("$$", @"Recibida APDU inesperada de respuesta a la carga de datos para cifrado RSA:\n", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 645
      [res getBytes], true)));
      
#line 647
      @throw new_EsGobJmulticardCardDnieDnieCardException_initWithNSString_withEsGobJmulticardApduStatusWord_(JreStrcat("$@", @"Error durante la operacion de carga de datos para cifrado RSA: ",
#line 648
      [res getStatusWord]),
#line 649
      [res getStatusWord]);
    }
    
#line 653
    apdu = new_EsGobJmulticardApduDnieSignDataApduCommand_initWithByte_withInt_(
#line 654
    [((EsGobJmulticardCardDnieDniePrivateKeyReference *) nil_chk(((EsGobJmulticardCardDnieDniePrivateKeyReference *) cast_chk(privateKeyReference, [EsGobJmulticardCardDnieDniePrivateKeyReference class])))) getKeyReference],
#line 655
    [((EsGobJmulticardCardDnieDniePrivateKeyReference *) nil_chk(((EsGobJmulticardCardDnieDniePrivateKeyReference *) cast_chk(privateKeyReference, [EsGobJmulticardCardDnieDniePrivateKeyReference class])))) getKeyBitSize]);
    
#line 658
    res = [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) transmitWithEsGobJmulticardApduCommandApdu:apdu];
    if (![((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
      EsGobJmulticardJmcLogger_severeWithNSString_(JreStrcat("$$", @"Recibida APDU inesperada de respuesta al SignData:\n", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 661
      [res getBytes], true)));
      
#line 663
      @throw new_EsGobJmulticardCardDnieDnieCardException_initWithNSString_withEsGobJmulticardApduStatusWord_(JreStrcat("$@", @"Error durante la operacion de cifrado RSA con respuesta: ",
#line 664
      [res getStatusWord]),
#line 665
      [res getStatusWord]);
    }
  }
  @catch (
#line 669
  EsGobJmulticardConnectionLostChannelException *e) {
    @throw e;
  }
  @catch (EsGobJmulticardConnectionApduConnectionException *e) {
    @throw new_EsGobJmulticardCardDnieDnieCardException_initWithNSString_withJavaLangThrowable_(@"Error en la transmision de comandos para cifrado a la tarjeta", e);
  }
  
#line 676
  return [((EsGobJmulticardApduResponseApdu *) nil_chk(res)) getData];
}


#line 686
- (void)openSecureChannelIfNotAlreadyOpened {
  
#line 688
  [self openSecureChannelIfNotAlreadyOpenedWithBoolean:true];
}


#line 700
- (void)openSecureChannelIfNotAlreadyOpenedWithBoolean:(jboolean)doChv {
  
#line 702
  if (!EsGobJmulticardCardDnieDnie_isSecurityChannelOpen(self)) {
    
#line 704
    if (!([EsGobJmulticardConnectionCwa14890Cwa14890Connection_class_() isInstance:[self getConnection]])) {
      id<EsGobJmulticardConnectionApduConnection> secureConnection;
      secureConnection = new_EsGobJmulticardConnectionCwa14890Cwa14890OneV1Connection_initWithEsGobJmulticardCardCwa14890Cwa14890Card_withEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withEsGobJmulticardCardCwa14890Cwa14890PublicConstants_withEsGobJmulticardCardCwa14890Cwa14890PrivateConstants_(
#line 707
      self,
#line 708
      [self getConnection],
#line 709
      self->cryptoHelper_,
#line 710
      [self getCwa14890PublicConstants],
#line 711
      [self getCwa14890PrivateConstants]);
      
#line 713
      @try {
        [self setConnectionWithEsGobJmulticardConnectionApduConnection:secureConnection];
      }
      @catch (EsGobJmulticardConnectionApduConnectionException *e) {
        @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error en el establecimiento del canal seguro", e);
      }
    }
    if (doChv) {
      @try {
        EsGobJmulticardCardDnieDnie_verifyPinWithJavaxSecurityAuthCallbackPasswordCallback_(self, [self getInternalPasswordCallback]);
      }
      @catch (EsGobJmulticardConnectionApduConnectionException *e) {
        @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error en la apertura del canal seguro", e);
      }
    }
  }
}


#line 736
- (jint)getPinRetriesLeft {
  EsGobJmulticardApduCommandApdu *verifyCommandApdu = new_EsGobJmulticardApduDnieRetriesLeftApduCommand_init();
  EsGobJmulticardApduResponseApdu *verifyResponse = [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) transmitWithEsGobJmulticardApduCommandApdu:verifyCommandApdu];
  EsGobJmulticardApduStatusWord *resSw = [((EsGobJmulticardApduResponseApdu *) nil_chk(verifyResponse)) getStatusWord];
  if ([((EsGobJmulticardApduStatusWord *) nil_chk(resSw)) getMsb] == (jbyte) (jint) 0x69 && [resSw getLsb] == (jbyte) (jint) 0x82) {
    @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_(JreStrcat("$@", @"Error obteniendo los intentos restantes de PIN: ", resSw));
  }
  return [resSw getLsb] - (jbyte) (jint) 0xC0;
}


#line 755
- (IOSByteArray *)changePINWithNSString:(NSString *)oldPin
                           withNSString:(NSString *)newPin {
  return EsGobJmulticardCardDnieDnie_changePINWithNSString_withNSString_(self, oldPin, newPin);
}


#line 802
- (void)setCallbackHandlerWithJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)handler {
  self->callbackHandler_ = handler;
}


#line 810
- (void)setPasswordCallbackWithJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)pwc {
  self->passwordCallback_ = pwc;
}


#line 821
- (NSString *)getIdesp {
  NSString *idEsp = [NSString java_stringWithBytes:[self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:EsGobJmulticardCardDnieDnie_IDESP_LOCATION]];
  EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_([EsGobJmulticardCardDnieDnie_class_() getName], @"getIdesp", JreStrcat("$$", @"Leido el IDESP del DNIe: ", [idEsp java_trim]));
  return idEsp;
}


#line 832
+ (void)connectWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn {
  EsGobJmulticardCardDnieDnie_connectWithEsGobJmulticardConnectionApduConnection_(conn);
}


#line 845
- (void)loadCertificates {
  EsGobJmulticardCardDnieDnie_loadCertificates(self);
}


#line 940
- (void)hideCertsWithoutKey {
  EsGobJmulticardCardDnieDnie_hideCertsWithoutKey(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, 1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCryptoHelper;", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxSecurityAuthCallbackPasswordCallback;", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardCwa14890Cwa14890PublicConstants;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardCwa14890Cwa14890PrivateConstants;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x14, 2, 3, 4, -1, -1, -1 },
    { NULL, "[B", 0x2, 5, 3, 4, -1, -1, -1 },
    { NULL, "LJavaxSecurityAuthCallbackPasswordCallback;", 0x4, -1, -1, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, 9, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x11, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x11, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityInterfacesRSAPublicKey;", 0x11, -1, -1, 13, -1, -1, -1 },
    { NULL, "V", 0x11, 14, 15, 1, -1, -1, -1 },
    { NULL, "[B", 0x11, 16, 15, -1, -1, -1, -1 },
    { NULL, "[B", 0x11, 17, 15, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityInterfacesRSAPrivateKey;", 0x11, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 20, 21, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 22, 21, 1, -1, -1, -1 },
    { NULL, "Z", 0x11, 23, 24, 1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardPrivateKeyReference;", 0x11, 25, 12, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 26, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x11, 27, 28, 29, -1, -1, -1 },
    { NULL, "I", 0x11, 30, 15, -1, -1, -1, -1 },
    { NULL, "[B", 0x11, 31, 32, 33, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x11, 36, 37, 4, -1, -1, -1 },
    { NULL, "V", 0x11, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 40, 28, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 41, -1, -1, -1 },
    { NULL, "V", 0x9, 42, 43, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithEsGobJmulticardConnectionApduConnection:withJavaxSecurityAuthCallbackPasswordCallback:withEsGobJmulticardCryptoHelper:withJavaxSecurityAuthCallbackCallbackHandler:);
  methods[1].selector = @selector(getCryptoHelper);
  methods[2].selector = @selector(getPasswordCallback);
  methods[3].selector = @selector(getCwa14890PublicConstants);
  methods[4].selector = @selector(getCwa14890PrivateConstants);
  methods[5].selector = @selector(signInternalWithByteArray:withNSString:withEsGobJmulticardCardPrivateKeyReference:);
  methods[6].selector = @selector(signOperationWithByteArray:withNSString:withEsGobJmulticardCardPrivateKeyReference:);
  methods[7].selector = @selector(getInternalPasswordCallback);
  methods[8].selector = @selector(getPinMessageWithInt:);
  methods[9].selector = @selector(isSecurityChannelOpen);
  methods[10].selector = @selector(needsPinForLoadingCerts);
  methods[11].selector = @selector(selectMasterFile);
  methods[12].selector = @selector(description);
  methods[13].selector = @selector(getSerialNumber);
  methods[14].selector = @selector(getCardName);
  methods[15].selector = @selector(getAliases);
  methods[16].selector = @selector(getCertificateWithNSString:);
  methods[17].selector = @selector(verifyIcc);
  methods[18].selector = @selector(getIccCertPublicKey);
  methods[19].selector = @selector(verifyIfdCertificateChainWithEsGobJmulticardCardCwa14890Cwa14890PublicConstants:);
  methods[20].selector = @selector(getRefIccPrivateKeyWithEsGobJmulticardCardCwa14890Cwa14890PublicConstants:);
  methods[21].selector = @selector(getChrCCvIfdWithEsGobJmulticardCardCwa14890Cwa14890PublicConstants:);
  methods[22].selector = @selector(getIfdPrivateKeyWithEsGobJmulticardCardCwa14890Cwa14890PrivateConstants:);
  methods[23].selector = @selector(setKeysToAuthenticationWithByteArray:withByteArray:);
  methods[24].selector = @selector(getInternalAuthenticateMessageWithByteArray:withByteArray:);
  methods[25].selector = @selector(externalAuthenticationWithByteArray:);
  methods[26].selector = @selector(getPrivateKeyWithNSString:);
  methods[27].selector = @selector(signWithByteArray:withNSString:withEsGobJmulticardCardPrivateKeyReference:);
  methods[28].selector = @selector(verifyPinWithJavaxSecurityAuthCallbackPasswordCallback:);
  methods[29].selector = @selector(getIfdKeyLengthWithEsGobJmulticardCardCwa14890Cwa14890PublicConstants:);
  methods[30].selector = @selector(cipherDataWithByteArray:withEsGobJmulticardCardPrivateKeyReference:);
  methods[31].selector = @selector(openSecureChannelIfNotAlreadyOpened);
  methods[32].selector = @selector(openSecureChannelIfNotAlreadyOpenedWithBoolean:);
  methods[33].selector = @selector(getPinRetriesLeft);
  methods[34].selector = @selector(changePINWithNSString:withNSString:);
  methods[35].selector = @selector(setCallbackHandlerWithJavaxSecurityAuthCallbackCallbackHandler:);
  methods[36].selector = @selector(setPasswordCallbackWithJavaxSecurityAuthCallbackPasswordCallback:);
  methods[37].selector = @selector(getIdesp);
  methods[38].selector = @selector(connectWithEsGobJmulticardConnectionApduConnection:);
  methods[39].selector = @selector(loadCertificates);
  methods[40].selector = @selector(hideCertsWithoutKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ERROR_PIN_SW1", "B", .constantValue.asChar = EsGobJmulticardCardDnieDnie_ERROR_PIN_SW1, 0x1a, -1, -1, -1, -1 },
    { "CERT_ICC_FILE_ID", "[B", .constantValue.asLong = 0, 0x1a, -1, 44, -1, -1 },
    { "MASTER_FILE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 45, -1, -1 },
    { "CDF_LOCATION", "LEsGobJmulticardCardLocation;", .constantValue.asLong = 0, 0x1a, -1, 46, -1, -1 },
    { "PRKDF_LOCATION", "LEsGobJmulticardCardLocation;", .constantValue.asLong = 0, 0x1a, -1, 47, -1, -1 },
    { "IDESP_LOCATION", "LEsGobJmulticardCardLocation;", .constantValue.asLong = 0, 0x1a, -1, 48, -1, -1 },
    { "aliases_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 49, -1 },
    { "certs_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 50, -1 },
    { "aliasByCertAndKeyId_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 51, -1 },
    { "keyReferences_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 52, -1 },
    { "cryptoHelper_", "LEsGobJmulticardCryptoHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rawConnection_", "LEsGobJmulticardConnectionApduConnection;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "passwordCallback_", "LJavaxSecurityAuthCallbackPasswordCallback;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "callbackHandler_", "LJavaxSecurityAuthCallbackCallbackHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEsGobJmulticardConnectionApduConnection;LJavaxSecurityAuthCallbackPasswordCallback;LEsGobJmulticardCryptoHelper;LJavaxSecurityAuthCallbackCallbackHandler;", "LEsGobJmulticardConnectionApduConnectionException;", "signInternal", "[BLNSString;LEsGobJmulticardCardPrivateKeyReference;", "LEsGobJmulticardCardCryptoCardException;LEsGobJmulticardCardPinException;", "signOperation", "LEsGobJmulticardCardPinException;", "getPinMessage", "I", "LEsGobJmulticardConnectionApduConnectionException;LEsGobJmulticardCardIso7816fourIso7816FourCardException;", "toString", "getCertificate", "LNSString;", "LJavaIoIOException;", "verifyIfdCertificateChain", "LEsGobJmulticardCardCwa14890Cwa14890PublicConstants;", "getRefIccPrivateKey", "getChrCCvIfd", "getIfdPrivateKey", "LEsGobJmulticardCardCwa14890Cwa14890PrivateConstants;", "setKeysToAuthentication", "[B[B", "getInternalAuthenticateMessage", "externalAuthentication", "[B", "getPrivateKey", "sign", "verifyPin", "LJavaxSecurityAuthCallbackPasswordCallback;", "LEsGobJmulticardConnectionApduConnectionException;LEsGobJmulticardCardPinException;", "getIfdKeyLength", "cipherData", "[BLEsGobJmulticardCardPrivateKeyReference;", "LEsGobJmulticardCardCryptoCardException;LEsGobJmulticardCardPinException;LEsGobJmulticardConnectionLostChannelException;", "openSecureChannelIfNotAlreadyOpened", "Z", "changePIN", "LNSString;LNSString;", "setCallbackHandler", "LJavaxSecurityAuthCallbackCallbackHandler;", "setPasswordCallback", "LEsGobJmulticardCardIso7816fourIso7816FourCardException;LJavaIoIOException;", "connect", "LEsGobJmulticardConnectionApduConnection;", &EsGobJmulticardCardDnieDnie_CERT_ICC_FILE_ID, &EsGobJmulticardCardDnieDnie_MASTER_FILE_NAME, &EsGobJmulticardCardDnieDnie_CDF_LOCATION, &EsGobJmulticardCardDnieDnie_PRKDF_LOCATION, &EsGobJmulticardCardDnieDnie_IDESP_LOCATION, "Ljava/util/Set<Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/security/cert/X509Certificate;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Les/gob/jmulticard/card/dnie/DniePrivateKeyReference;>;" };
  static const J2ObjcClassInfo _EsGobJmulticardCardDnieDnie = { "Dnie", "es.gob.jmulticard.card.dnie", ptrTable, methods, fields, 7, 0x1, 41, 14, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardCardDnieDnie;
}

+ (void)initialize {
  if (self == [EsGobJmulticardCardDnieDnie class]) {
    EsGobJmulticardCardDnieDnie_CERT_ICC_FILE_ID = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 114
      (jbyte) (jint) 0x60, (jbyte) (jint) 0x1F } count:2];
      EsGobJmulticardCardDnieDnie_CDF_LOCATION = new_EsGobJmulticardCardLocation_initWithNSString_(
#line 120
      @"50156004");
      EsGobJmulticardCardDnieDnie_PRKDF_LOCATION = new_EsGobJmulticardCardLocation_initWithNSString_(
#line 123
      @"50156001");
      EsGobJmulticardCardDnieDnie_IDESP_LOCATION = new_EsGobJmulticardCardLocation_initWithNSString_(
#line 126
      @"3F000006");
      J2OBJC_SET_INITIALIZED(EsGobJmulticardCardDnieDnie)
    }
  }

@end


#line 164
void EsGobJmulticardCardDnieDnie_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(EsGobJmulticardCardDnieDnie *self, id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch) {
  EsGobJmulticardCardIso7816eightAbstractIso7816EightCard_initWithByte_withEsGobJmulticardConnectionApduConnection_(self,
#line 168
  (jbyte) (jint) 0x00, conn);
  self->aliases_ = new_JavaUtilHashSet_init();
  self->certs_ = new_JavaUtilLinkedHashMap_init();
  self->aliasByCertAndKeyId_ = new_JavaUtilLinkedHashMap_init();
  self->keyReferences_ = new_JavaUtilLinkedHashMap_init();
  
#line 169
  (void) [((id<EsGobJmulticardConnectionApduConnection>) nil_chk(conn)) reset];
  EsGobJmulticardCardDnieDnie_connectWithEsGobJmulticardConnectionApduConnection_(conn);
  
#line 172
  self->rawConnection_ = conn;
  self->callbackHandler_ = ch;
  
#line 175
  self->passwordCallback_ = pwc;
  
#line 177
  if (cryptoHlpr == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El CryptoHelper no puede ser nulo");
  }
  self->cryptoHelper_ = cryptoHlpr;
  
#line 182
  EsGobJmulticardCardDnieDnie_loadCertificates(self);
}


#line 164
EsGobJmulticardCardDnieDnie *new_EsGobJmulticardCardDnieDnie_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardDnieDnie, initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_, conn, pwc, cryptoHlpr, ch)
}


#line 164
EsGobJmulticardCardDnieDnie *create_EsGobJmulticardCardDnieDnie_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardDnieDnie, initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_, conn, pwc, cryptoHlpr, ch)
}


#line 232
IOSByteArray *EsGobJmulticardCardDnieDnie_signInternalWithByteArray_withNSString_withEsGobJmulticardCardPrivateKeyReference_(EsGobJmulticardCardDnieDnie *self, IOSByteArray *data, NSString *signAlgorithm, id<EsGobJmulticardCardPrivateKeyReference> privateKeyReference) {
  
#line 236
  if (!([privateKeyReference isKindOfClass:[EsGobJmulticardCardDnieDniePrivateKeyReference class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 238
    @"La referencia a la clave privada tiene que ser de tipo DniePrivateKeyReference");
  }
  
#line 241
  return EsGobJmulticardCardDnieDnie_signOperationWithByteArray_withNSString_withEsGobJmulticardCardPrivateKeyReference_(self, data, signAlgorithm, privateKeyReference);
}


#line 255
IOSByteArray *EsGobJmulticardCardDnieDnie_signOperationWithByteArray_withNSString_withEsGobJmulticardCardPrivateKeyReference_(EsGobJmulticardCardDnieDnie *self, IOSByteArray *data, NSString *signAlgorithm, id<EsGobJmulticardCardPrivateKeyReference> privateKeyReference) {
  
#line 259
  [self openSecureChannelIfNotAlreadyOpened];
  
#line 261
  EsGobJmulticardApduResponseApdu *res;
  @try {
    EsGobJmulticardApduCommandApdu *apdu = new_EsGobJmulticardApduIso7816fourMseSetComputationApduCommand_initWithByte_withByteArray_withByteArray_(
#line 264
    (jbyte) (jint) 0x00,
#line 265
    [((EsGobJmulticardCardLocation *) nil_chk([((EsGobJmulticardCardDnieDniePrivateKeyReference *) nil_chk(((EsGobJmulticardCardDnieDniePrivateKeyReference *) cast_chk(privateKeyReference, [EsGobJmulticardCardDnieDniePrivateKeyReference class])))) getKeyPath])) getLastFilePath],
#line 266
    nil);
    
#line 268
    res = [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) transmitWithEsGobJmulticardApduCommandApdu:apdu];
    if (![((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
      @throw new_EsGobJmulticardCardDnieDnieCardException_initWithNSString_withEsGobJmulticardApduStatusWord_(JreStrcat("$@", @"Error en el establecimiento de las clave de firma con respuesta: ",
#line 271
      [res getStatusWord]),
#line 272
      [res getStatusWord]);
    }
    
#line 276
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_([EsGobJmulticardCardDnieDnie_class_() getName], @"signOperation", @"Establecidas las claves de firma");
    
#line 278
    IOSByteArray *digestInfo;
    @try {
      digestInfo = EsGobJmulticardAsn1DerPkcs1DigestInfo_encodeWithNSString_withByteArray_withEsGobJmulticardCryptoHelper_(signAlgorithm, data, self->cryptoHelper_);
    }
    @catch (JavaIoIOException *e) {
      @throw new_EsGobJmulticardCardDnieDnieCardException_initWithNSString_withJavaLangThrowable_(@"Error en el calculo de la huella para firmar", e);
    }
    
#line 286
    apdu = new_EsGobJmulticardApduIso7816eightPsoSignHashApduCommand_initWithByte_withByteArray_((jbyte) (jint) 0x00, digestInfo);
    res = [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) transmitWithEsGobJmulticardApduCommandApdu:apdu];
    if (![((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
      EsGobJmulticardJmcLogger_severeWithNSString_(JreStrcat("$$", @"Recibida APDU inesperada de respuesta al PSOSignHash:\n", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 291
      [res getBytes], true)));
      
#line 293
      @throw new_EsGobJmulticardCardDnieDnieCardException_initWithNSString_withEsGobJmulticardApduStatusWord_(JreStrcat("$@", @"Error durante la operacion de firma con respuesta: ",
#line 294
      [res getStatusWord]),
#line 295
      [res getStatusWord]);
    }
  }
  @catch (
#line 299
  EsGobJmulticardConnectionLostChannelException *e) {
    @try {
      [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) close];
      if ([EsGobJmulticardConnectionCwa14890Cwa14890Connection_class_() isInstance:[self getConnection]]) {
        [self setConnectionWithEsGobJmulticardConnectionApduConnection:[((id<EsGobJmulticardConnectionCwa14890Cwa14890Connection>) nil_chk(((id<EsGobJmulticardConnectionCwa14890Cwa14890Connection>) cast_check([self getConnection], EsGobJmulticardConnectionCwa14890Cwa14890Connection_class_())))) getSubConnection]];
      }
    }
    @catch (EsGobJmulticardConnectionApduConnectionException *ex) {
      @throw new_EsGobJmulticardCardDnieDnieCardException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@C", @"No se pudo recuperar el canal seguro para firmar (", e, ')'), ex);
    }
    return EsGobJmulticardCardDnieDnie_signOperationWithByteArray_withNSString_withEsGobJmulticardCardPrivateKeyReference_(self, data, signAlgorithm, privateKeyReference);
  }
  @catch (EsGobJmulticardConnectionApduConnectionException *e) {
    @throw new_EsGobJmulticardCardDnieDnieCardException_initWithNSString_withJavaLangThrowable_(@"Error en la transmision de comandos para firma a la tarjeta", e);
  }
  
#line 315
  EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_([EsGobJmulticardCardDnieDnie_class_() getName], @"signOperation", @"Realizada correctamente la firma electronica");
  return [((EsGobJmulticardApduResponseApdu *) nil_chk(res)) getData];
}


#line 379
jboolean EsGobJmulticardCardDnieDnie_isSecurityChannelOpen(EsGobJmulticardCardDnieDnie *self) {
  
#line 381
  return [EsGobJmulticardConnectionCwa14890Cwa14890Connection_class_() isInstance:[self getConnection]] &&
#line 382
  [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) isOpen] &&
#line 383
  !([[self getConnection] isKindOfClass:[EsGobJmulticardConnectionPacePaceConnection class]]);
}


#line 399
void EsGobJmulticardCardDnieDnie_selectMasterFile(EsGobJmulticardCardDnieDnie *self) {
  
#line 401
  [self selectFileByNameWithNSString:EsGobJmulticardCardDnieDnie_MASTER_FILE_NAME];
}


#line 580
void EsGobJmulticardCardDnieDnie_verifyPinWithJavaxSecurityAuthCallbackPasswordCallback_(EsGobJmulticardCardDnieDnie *self, JavaxSecurityAuthCallbackPasswordCallback *psc) {
  
#line 583
  if (psc == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No se puede verificar el titular con un PasswordCallback nulo");
  }
  
#line 587
  EsGobJmulticardApduResponseApdu *verifyResponse = [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) transmitWithEsGobJmulticardApduCommandApdu:new_EsGobJmulticardApduDnieVerifyApduCommand_initWithByte_withJavaxSecurityAuthCallbackPasswordCallback_((jbyte) (jint) 0x00, psc)];
  
#line 591
  if (![((EsGobJmulticardApduResponseApdu *) nil_chk(verifyResponse)) isOk]) {
    if ([((EsGobJmulticardApduStatusWord *) nil_chk([verifyResponse getStatusWord])) getMsb] == EsGobJmulticardCardDnieDnie_ERROR_PIN_SW1) {
      @throw new_EsGobJmulticardCardBadPinException_initWithInt_([((EsGobJmulticardApduStatusWord *) nil_chk([verifyResponse getStatusWord])) getLsb] - (jbyte) (jint) 0xC0);
    }
    if (
#line 596
    [((EsGobJmulticardApduStatusWord *) nil_chk([verifyResponse getStatusWord])) getMsb] == (jbyte) (jint) 0x69 &&
#line 597
    [((EsGobJmulticardApduStatusWord *) nil_chk([verifyResponse getStatusWord])) getLsb] == (jbyte) (jint) 0x83) {
      
#line 599
      @throw new_EsGobJmulticardCardAuthenticationModeLockedException_init();
    }
    if (
#line 602
    [((EsGobJmulticardApduStatusWord *) nil_chk([verifyResponse getStatusWord])) getMsb] == (jbyte) (jint) 0x00 &&
#line 603
    [((EsGobJmulticardApduStatusWord *) nil_chk([verifyResponse getStatusWord])) getLsb] == (jbyte) (jint) 0x00) {
      
#line 605
      @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_(@"Se ha perdido el canal NFC");
    }
    @throw new_EsGobJmulticardConnectionApduConnectionException_initWithJavaLangThrowable_(new_EsGobJmulticardCardIso7816fourIso7816FourCardException_initWithNSString_withEsGobJmulticardApduStatusWord_(JreStrcat("$@C", @"Error en la verificacion de PIN (",
#line 609
    [verifyResponse getStatusWord], ')'),
#line 610
    [verifyResponse getStatusWord]));
  }
}


#line 755
IOSByteArray *EsGobJmulticardCardDnieDnie_changePINWithNSString_withNSString_(EsGobJmulticardCardDnieDnie *self, NSString *oldPin, NSString *newPin) {
  
#line 757
  [self openSecureChannelIfNotAlreadyOpened];
  @try {
    EsGobJmulticardCardDnieDnie_selectMasterFile(self);
    IOSByteArray *pinFile = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x00, (jbyte) (jint) 0x00 } count:2];
    [self selectFileByIdWithByteArray:pinFile];
    
#line 763
    EsGobJmulticardApduCommandApdu *apdu = new_EsGobJmulticardApduDnieChangePinApduCommand_initWithByteArray_withByteArray_([((NSString *) nil_chk(oldPin)) java_getBytes], [((NSString *) nil_chk(newPin)) java_getBytes]);
    EsGobJmulticardApduResponseApdu *res = [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) transmitWithEsGobJmulticardApduCommandApdu:apdu];
    if (![((EsGobJmulticardApduResponseApdu *) nil_chk(res)) isOk]) {
      @throw new_EsGobJmulticardCardDnieDnieCardException_initWithNSString_withEsGobJmulticardApduStatusWord_(
#line 767
      @"Error en el establecimiento de las variables de entorno para el cambio de PIN", [res getStatusWord]);
    }
    
#line 770
    return [res getData];
  }
  @catch (EsGobJmulticardConnectionLostChannelException *e) {
    EsGobJmulticardJmcLogger_warningWithNSString_(JreStrcat("$@", @"Se ha perdido el canal seguro para cambiar el PIN, se procede a recuperarlo: ", e));
    @try {
      [((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) close];
      if ([EsGobJmulticardConnectionCwa14890Cwa14890Connection_class_() isInstance:[self getConnection]]) {
        [self setConnectionWithEsGobJmulticardConnectionApduConnection:[((id<EsGobJmulticardConnectionCwa14890Cwa14890Connection>) nil_chk(((id<EsGobJmulticardConnectionCwa14890Cwa14890Connection>) cast_check([self getConnection], EsGobJmulticardConnectionCwa14890Cwa14890Connection_class_())))) getSubConnection]];
      }
      
#line 782
      return EsGobJmulticardCardDnieDnie_changePINWithNSString_withNSString_(self, oldPin, newPin);
    }
    @catch (JavaLangException *ex) {
      @throw new_EsGobJmulticardCardDnieDnieCardException_initWithNSString_withJavaLangThrowable_(@"No se pudo recuperar el canal seguro para firmar", ex);
    }
  }
  @catch (EsGobJmulticardConnectionApduConnectionException *e) {
    @throw new_EsGobJmulticardCardDnieDnieCardException_initWithNSString_withJavaLangThrowable_(
#line 790
    @"Error en la transmision de comandos para cambio de PIN a la tarjeta", e);
  }
  @catch (
#line 793
  EsGobJmulticardCardIso7816fourIso7816FourCardException *e) {
    @throw new_EsGobJmulticardCardDnieDnieCardException_initWithNSString_withJavaLangThrowable_(@"No se pudo seleccionar el fichero de PIN de la tarjeta", e);
  }
}


#line 832
void EsGobJmulticardCardDnieDnie_connectWithEsGobJmulticardConnectionApduConnection_(id<EsGobJmulticardConnectionApduConnection> conn) {
  EsGobJmulticardCardDnieDnie_initialize();
  
#line 833
  if (![((id<EsGobJmulticardConnectionApduConnection>) nil_chk(conn)) isOpen]) {
    [conn open];
  }
}


#line 845
void EsGobJmulticardCardDnieDnie_loadCertificates(EsGobJmulticardCardDnieDnie *self) {
  if ([self needsPinForLoadingCerts]) {
    @try {
      [self openSecureChannelIfNotAlreadyOpenedWithBoolean:true];
    }
    @catch (EsGobJmulticardCardCryptoCardException *e) {
      @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_withJavaLangThrowable_(@"Error en la verificacion de PIN para la carga de certificados", e);
    }
    @catch (
#line 850
    EsGobJmulticardCardPinException *e) {
      @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_withJavaLangThrowable_(@"Error en la verificacion de PIN para la carga de certificados", e);
    }
  }
  EsGobJmulticardAsn1DerPkcs15PrKdf *prkdf;
  @try {
    
#line 857
    EsGobJmulticardCardDnieDnie_selectMasterFile(self);
    
#line 860
    IOSByteArray *cdfBytes = [self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:EsGobJmulticardCardDnieDnie_CDF_LOCATION];
    
#line 863
    id<EsGobJmulticardAsn1DerPkcs15Pkcs15Cdf> cdf = new_EsGobJmulticardAsn1DerPkcs15Cdf_init();
    [cdf setDerValueWithByteArray:cdfBytes];
    
#line 866
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 867
    [EsGobJmulticardCardDnieDnie_class_() getName],
#line 868
    @"loadCertificates", JreStrcat("$I$", @"Ledido el CDF del DNIe: ",
#line 869
    [cdf getCertificateCount], @" certificados"));
    
#line 872
    for (jint i = 0; i < [cdf getCertificateCount]; i++) {
      EsGobJmulticardCardLocation *loc = new_EsGobJmulticardCardLocation_initWithNSString_([((NSString *) nil_chk([((NSString *) nil_chk([cdf getCertificatePathWithInt:i])) java_replace:@"\\" withSequence:@""])) java_trim]);
      JavaSecurityCertX509Certificate *cert = EsGobJmulticardCardCompressionUtils_getCertificateFromCompressedOrNotDataWithByteArray_withEsGobJmulticardCryptoHelper_(
#line 875
      [self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:loc],
#line 876
      self->cryptoHelper_);
      
#line 878
      NSString *alias = [cdf getCertificateAliasWithInt:i];
      (void) [((id<JavaUtilMap>) nil_chk(self->aliasByCertAndKeyId_)) putWithId:EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_([cdf getCertificateIdWithInt:i], false) withId:alias];
      (void) [((id<JavaUtilMap>) nil_chk(self->certs_)) putWithId:alias withId:cert];
      EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 882
      [EsGobJmulticardCardDnieDnie_class_() getName],
#line 883
      @"loadCertificates", JreStrcat("$$", @"Cargado certificado: ",
#line 884
      alias));
    }
    
#line 889
    IOSByteArray *prkdfBytes = [self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:EsGobJmulticardCardDnieDnie_PRKDF_LOCATION];
    
#line 892
    @try {
      prkdf = new_EsGobJmulticardAsn1DerPkcs15PrKdf_init();
      [prkdf setDerValueWithByteArray:prkdfBytes];
    }
    @catch (JavaLangException *e) {
      EsGobJmulticardJmcLogger_warningWithNSString_(JreStrcat("$@", @"Detectado posible PrKDF con CommonPrivateKeyAttributes vacio, se prueba con estructura alternativa: ",
#line 898
      e));
      
#line 900
      prkdf = new_EsGobJmulticardAsn1CustomFnmtCeresscCeresScPrKdf_init();
      [prkdf setDerValueWithByteArray:prkdfBytes];
    }
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 904
    [EsGobJmulticardCardDnieDnie_class_() getName],
#line 905
    @"loadCertificates", JreStrcat("$I$", @"Cargado PrKDF: ",
#line 906
    [((EsGobJmulticardAsn1DerPkcs15PrKdf *) nil_chk(prkdf)) getKeyCount], @" claves privadas"));
  }
  @catch (
#line 909
  JavaLangException *e) {
    @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_withJavaLangThrowable_(@"Error cargando las estructuras iniciales de la tarjeta", e);
  }
  
#line 913
  for (jint i = 0; i < [((EsGobJmulticardAsn1DerPkcs15PrKdf *) nil_chk(prkdf)) getKeyCount]; i++) {
    NSString *alias = [((id<JavaUtilMap>) nil_chk(self->aliasByCertAndKeyId_)) getWithId:EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_([prkdf getKeyIdWithInt:i], false)];
    if (alias != nil) {
      (void) [((id<JavaUtilMap>) nil_chk(self->keyReferences_)) putWithId:
#line 917
      alias withId:new_EsGobJmulticardCardDnieDniePrivateKeyReference_initWithEsGobJmulticardCardCryptoCard_withByteArray_withEsGobJmulticardCardLocation_withNSString_withByte_withInt_(self,
#line 920
      [prkdf getKeyIdentifierWithInt:i], new_EsGobJmulticardCardLocation_initWithNSString_(
#line 921
      [prkdf getKeyPathWithInt:i]),
#line 922
      [prkdf getKeyNameWithInt:i],
#line 923
      [prkdf getKeyReferenceWithInt:i],
#line 924
      [((JavaMathBigInteger *) nil_chk([((id<JavaSecurityInterfacesRSAPublicKey>) nil_chk([((EsGobJmulticardCryptoHelper *) nil_chk(self->cryptoHelper_)) getRsaPublicKeyWithJavaSecurityCertX509Certificate:[((id<JavaUtilMap>) nil_chk(self->certs_)) getWithId:alias]])) getModulus])) bitLength])];
    }
  }
  
#line 930
  [((id<JavaUtilSet>) nil_chk(self->aliases_)) addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(self->certs_)) keySet]];
  
#line 933
  EsGobJmulticardCardDnieDnie_hideCertsWithoutKey(self);
}


#line 940
void EsGobJmulticardCardDnieDnie_hideCertsWithoutKey(EsGobJmulticardCardDnieDnie *self) {
  id<JavaUtilList> toRemove = new_JavaUtilArrayList_init();
  for (NSString * __strong alias in nil_chk(self->aliases_)) {
    if ([((id<JavaUtilMap>) nil_chk(self->keyReferences_)) getWithId:alias] == nil) {
      [toRemove addWithId:alias];
    }
  }
  [self->aliases_ removeAllWithJavaUtilCollection:toRemove];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardDnieDnie)
