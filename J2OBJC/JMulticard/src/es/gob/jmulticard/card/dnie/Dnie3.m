//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/Dnie3.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/CryptoHelper.h"
#include "es/gob/jmulticard/DigestAlgorithm.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/JmcLogger.h"
#include "es/gob/jmulticard/asn1/Asn1Exception.h"
#include "es/gob/jmulticard/asn1/TlvException.h"
#include "es/gob/jmulticard/asn1/icao/AdditionalPersonalDetails.h"
#include "es/gob/jmulticard/asn1/icao/Com.h"
#include "es/gob/jmulticard/asn1/icao/DataGroupHash.h"
#include "es/gob/jmulticard/asn1/icao/LdsSecurityObject.h"
#include "es/gob/jmulticard/asn1/icao/OptionalDetails.h"
#include "es/gob/jmulticard/asn1/icao/SecurityOptions.h"
#include "es/gob/jmulticard/asn1/icao/Sod.h"
#include "es/gob/jmulticard/asn1/icao/SubjectFacePhoto.h"
#include "es/gob/jmulticard/asn1/icao/SubjectSignaturePhoto.h"
#include "es/gob/jmulticard/card/CardSecurityException.h"
#include "es/gob/jmulticard/card/CryptoCardException.h"
#include "es/gob/jmulticard/card/CryptoCardSecurityException.h"
#include "es/gob/jmulticard/card/Location.h"
#include "es/gob/jmulticard/card/PasswordCallbackNotFoundException.h"
#include "es/gob/jmulticard/card/dnie/Dnie.h"
#include "es/gob/jmulticard/card/dnie/Dnie3.h"
#include "es/gob/jmulticard/card/dnie/Dnie3Cwa14890Constants.h"
#include "es/gob/jmulticard/card/dnie/DnieFactory.h"
#include "es/gob/jmulticard/card/icao/InvalidSecurityObjectException.h"
#include "es/gob/jmulticard/card/icao/MrtdLds1.h"
#include "es/gob/jmulticard/card/icao/Mrz.h"
#include "es/gob/jmulticard/card/iso7816four/FileNotFoundException.h"
#include "es/gob/jmulticard/card/iso7816four/Iso7816FourCardException.h"
#include "es/gob/jmulticard/card/iso7816four/RequiredSecurityStateNotSatisfiedException.h"
#include "es/gob/jmulticard/connection/ApduConnection.h"
#include "es/gob/jmulticard/connection/ApduConnectionException.h"
#include "es/gob/jmulticard/connection/cwa14890/ChannelType.h"
#include "es/gob/jmulticard/connection/cwa14890/Cwa14890OneV2Connection.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Arrays.h"
#include "javax/security/auth/callback/CallbackHandler.h"
#include "javax/security/auth/callback/PasswordCallback.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/card/dnie/Dnie3 must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardCardDnieDnie3 () {
 @public
  NSString *idesp_;
}

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardCardDnieDnie3, idesp_, NSString *)

__attribute__((unused)) static id<EsGobJmulticardConnectionApduConnection> EsGobJmulticardCardDnieDnie3_openPinChannel(EsGobJmulticardCardDnieDnie3 *self);

__attribute__((unused)) static id<EsGobJmulticardConnectionApduConnection> EsGobJmulticardCardDnieDnie3_openUserChannel(EsGobJmulticardCardDnieDnie3 *self);

__attribute__((unused)) static EsGobJmulticardCardIcaoMrz *EsGobJmulticardCardDnieDnie3_getDg1(EsGobJmulticardCardDnieDnie3 *self);

__attribute__((unused)) static EsGobJmulticardAsn1IcaoSubjectFacePhoto *EsGobJmulticardCardDnieDnie3_getDg2(EsGobJmulticardCardDnieDnie3 *self);

__attribute__((unused)) static EsGobJmulticardAsn1IcaoSubjectSignaturePhoto *EsGobJmulticardCardDnieDnie3_getDg7(EsGobJmulticardCardDnieDnie3 *self);

__attribute__((unused)) static EsGobJmulticardAsn1IcaoAdditionalPersonalDetails *EsGobJmulticardCardDnieDnie3_getDg11(EsGobJmulticardCardDnieDnie3 *self);

__attribute__((unused)) static IOSByteArray *EsGobJmulticardCardDnieDnie3_getDg12(EsGobJmulticardCardDnieDnie3 *self);

__attribute__((unused)) static EsGobJmulticardAsn1IcaoSecurityOptions *EsGobJmulticardCardDnieDnie3_getDg14(EsGobJmulticardCardDnieDnie3 *self);

__attribute__((unused)) static EsGobJmulticardAsn1IcaoSod *EsGobJmulticardCardDnieDnie3_getSod(EsGobJmulticardCardDnieDnie3 *self);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/Dnie3.java"


#line 84
@implementation EsGobJmulticardCardDnieDnie3


#line 99
- (instancetype)initWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                  withJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)pwc
                                withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHlpr
                   withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)ch {
  EsGobJmulticardCardDnieDnie3_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(self, conn, pwc, cryptoHlpr, ch);
  return self;
}


#line 120
- (NSString *)getCardName {
  
#line 122
  return @"DNIe 3.0";
}


#line 125
- (jint)getPinRetriesLeft {
  
#line 127
  if (!([[self getConnection] isKindOfClass:[EsGobJmulticardConnectionCwa14890Cwa14890OneV2Connection class]])) {
    @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_(@"Es necesario abrir canal CWA para obtener los intentos de PIN restantes");
  }
  EsGobJmulticardConnectionCwa14890ChannelType *channelType = [((EsGobJmulticardConnectionCwa14890Cwa14890OneV2Connection *) nil_chk(((EsGobJmulticardConnectionCwa14890Cwa14890OneV2Connection *) cast_chk([self getConnection], [EsGobJmulticardConnectionCwa14890Cwa14890OneV2Connection class])))) getChannelType];
  jint retriesLeft;
  switch ([channelType ordinal]) {
    case EsGobJmulticardConnectionCwa14890ChannelType_Enum_CWA_USER:
    @try {
      (void) EsGobJmulticardCardDnieDnie3_openPinChannel(self);
    }
    @catch (EsGobJmulticardCardCryptoCardException *e) {
      @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_withJavaLangThrowable_(@"Error estableciendo el canal de PIN para obtener los intentos restantes", e);
    }
    retriesLeft = [super getPinRetriesLeft];
    
#line 142
    break;
    case EsGobJmulticardConnectionCwa14890ChannelType_Enum_CWA_PIN:
    retriesLeft = [super getPinRetriesLeft];
    break;
    default:
    @throw new_EsGobJmulticardConnectionApduConnectionException_initWithNSString_(@"Es necesario abrir canal CWA para obtener los intentos de PIN restantes");
  }
  return retriesLeft;
}


#line 152
- (void)openSecureChannelIfNotAlreadyOpened {
  
#line 154
  [self openSecureChannelIfNotAlreadyOpenedWithBoolean:true];
}


#line 157
- (void)openSecureChannelIfNotAlreadyOpenedWithBoolean:(jboolean)doChv {
  
#line 161
  if ([self isSecurityChannelOpen]) {
    return;
  }
  
#line 165
  EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_([EsGobJmulticardCardDnieDnie3_class_() getName], @"openSecureChannelIfNotAlreadyOpened", JreStrcat("$@", @"Conexion actual: ", [self getConnection]));
  EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 167
  [EsGobJmulticardCardDnieDnie3_class_() getName],
#line 168
  @"openSecureChannelIfNotAlreadyOpened", JreStrcat("$@", @"Conexion subyacente: ",
#line 169
  (rawConnection_ != nil ? rawConnection_ : (id) @"ninguna")));
  
#line 173
  if (![((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) isOpen]) {
    @try {
      [self setConnectionWithEsGobJmulticardConnectionApduConnection:rawConnection_];
    }
    @catch (EsGobJmulticardConnectionApduConnectionException *e) {
      @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error en el establecimiento del canal inicial previo al seguro de PIN", e);
    }
  }
  
#line 182
  if (doChv) {
    
#line 184
    (void) EsGobJmulticardCardDnieDnie3_openPinChannel(self);
    @try {
      [self verifyPinWithJavaxSecurityAuthCallbackPasswordCallback:[self getInternalPasswordCallback]];
    }
    @catch (EsGobJmulticardCardPasswordCallbackNotFoundException *e) {
      
#line 191
      EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 192
      [EsGobJmulticardCardDnieDnie3_class_() getName],
#line 193
      @"openSecureChannelIfNotAlreadyOpened", JreStrcat("$@", @"No se proporcionaron medios para verificar el PIN: ",
#line 194
      e));
    }
    @catch (
#line 197
    EsGobJmulticardConnectionApduConnectionException *e) {
      @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error en la verificacion de PIN", e);
    }
    
#line 201
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_([EsGobJmulticardCardDnieDnie3_class_() getName], @"openSecureChannelIfNotAlreadyOpened", @"PIN verificado correctamente");
  }
  
#line 204
  (void) EsGobJmulticardCardDnieDnie3_openUserChannel(self);
}


#line 213
- (id<EsGobJmulticardConnectionApduConnection>)openPinChannel {
  return EsGobJmulticardCardDnieDnie3_openPinChannel(self);
}


#line 249
- (id<EsGobJmulticardConnectionApduConnection>)openUserChannel {
  return EsGobJmulticardCardDnieDnie3_openUserChannel(self);
}


#line 283
- (jboolean)needsPinForLoadingCerts {
  
#line 285
  return false;
}


#line 291
- (IOSObjectArray *)checkSecurityObjects {
  
#line 297
  [self openSecureChannelIfNotAlreadyOpenedWithBoolean:false];
  EsGobJmulticardAsn1IcaoSod *sod = EsGobJmulticardCardDnieDnie3_getSod(self);
  [((EsGobJmulticardAsn1IcaoSod *) nil_chk(sod)) validateSignature];
  EsGobJmulticardAsn1IcaoLdsSecurityObject *ldsSecurityObject = [sod getLdsSecurityObject];
  
#line 302
  [self openSecureChannelIfNotAlreadyOpenedWithBoolean:false];
  {
    IOSObjectArray *a__ = [((EsGobJmulticardAsn1IcaoLdsSecurityObject *) nil_chk(ldsSecurityObject)) getDataGroupHashes];
    EsGobJmulticardAsn1IcaoDataGroupHash * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EsGobJmulticardAsn1IcaoDataGroupHash * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EsGobJmulticardAsn1IcaoDataGroupHash *dgh = *b__++;
      
#line 306
      IOSByteArray *dgBytes;
      switch ([((EsGobJmulticardAsn1IcaoDataGroupHash *) nil_chk(dgh)) getDataGroupNumber]) {
        case 1:
        dgBytes = [((EsGobJmulticardCardIcaoMrz *) nil_chk(EsGobJmulticardCardDnieDnie3_getDg1(self))) getBytes];
        break;
        case 2:
        dgBytes = [((EsGobJmulticardAsn1IcaoSubjectFacePhoto *) nil_chk(EsGobJmulticardCardDnieDnie3_getDg2(self))) getBytes];
        break;
        case 3:
        
#line 317
        @try {
          dgBytes = [self getDg3];
        }
        @catch (EsGobJmulticardCardCardSecurityException *e) {
          EsGobJmulticardJmcLogger_warningWithNSString_(JreStrcat("$@", @"Se omite la comprobacion del DG3 con el SOD por no poder leerse: ",
#line 322
          e));
          
#line 324
          continue;
        }
        break;
        case 4:
        dgBytes = [self getDg4];
        break;
        case 5:
        dgBytes = [self getDg5];
        break;
        case 6:
        dgBytes = [self getDg6];
        break;
        case 7:
        dgBytes = [((EsGobJmulticardAsn1IcaoSubjectSignaturePhoto *) nil_chk(EsGobJmulticardCardDnieDnie3_getDg7(self))) getBytes];
        break;
        case 8:
        dgBytes = [self getDg8];
        break;
        case 9:
        dgBytes = [self getDg9];
        break;
        case 10:
        dgBytes = [self getDg10];
        break;
        case 11:
        dgBytes = [((EsGobJmulticardAsn1IcaoAdditionalPersonalDetails *) nil_chk(EsGobJmulticardCardDnieDnie3_getDg11(self))) getBytes];
        break;
        case 12:
        dgBytes = EsGobJmulticardCardDnieDnie3_getDg12(self);
        break;
        case 13:
        dgBytes = [((EsGobJmulticardAsn1IcaoOptionalDetails *) nil_chk([self getDg13])) getBytes];
        break;
        case 14:
        dgBytes = [((EsGobJmulticardAsn1IcaoSecurityOptions *) nil_chk(EsGobJmulticardCardDnieDnie3_getDg14(self))) getBytes];
        break;
        case 15:
        dgBytes = [self getDg15];
        break;
        case 16:
        dgBytes = [self getDg16];
        break;
        default:
        @throw new_EsGobJmulticardCardIcaoInvalidSecurityObjectException_initWithNSString_(JreStrcat("$I", @"El SOD define huella para un DG inexistente: ",
#line 368
        [dgh getDataGroupNumber]));
      }
      
#line 371
      IOSByteArray *actualHash = [((EsGobJmulticardCryptoHelper *) nil_chk([self getCryptoHelper])) digestWithEsGobJmulticardDigestAlgorithm:EsGobJmulticardDigestAlgorithm_getDigestAlgorithmWithNSString_(
#line 372
      [ldsSecurityObject getDigestAlgorithm]) withByteArray:
#line 373
      dgBytes];
      
#line 376
      if (!JavaUtilArrays_equalsWithByteArray_withByteArray_(actualHash, [dgh getDataGroupHashValue])) {
        @throw new_EsGobJmulticardCardIcaoInvalidSecurityObjectException_initWithNSString_(JreStrcat("$I$$$$", @"El DG",
#line 378
        [dgh getDataGroupNumber], @" no concuerda con la huella del SOD, se esperaba ", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 379
        actualHash, false), @" y se ha encontrado ", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 380
        [dgh getDataGroupHashValue], false)));
      }
    }
  }
  
#line 386
  return [sod getCertificateChain];
}


#line 389
- (IOSByteArray *)getCardAccess {
  
#line 391
  @try {
    return [self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:JreLoadStatic(EsGobJmulticardCardIcaoMrtdLds1, FILE_CARD_ACCESS_LOCATION)];
  }
  @catch (EsGobJmulticardCardIso7816fourFileNotFoundException *e) {
    @throw nil_chk((JavaIoIOException *) cast_chk([new_JavaIoFileNotFoundException_initWithNSString_(@"CardAcess no encontrado") initCauseWithJavaLangThrowable:e], [JavaIoIOException class]));
  }
  @catch (EsGobJmulticardCardIso7816fourIso7816FourCardException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el CardAccess", e);
  }
}


#line 402
- (IOSByteArray *)getAtrInfo {
  
#line 404
  @try {
    return [self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:JreLoadStatic(EsGobJmulticardCardIcaoMrtdLds1, FILE_ATR_INFO_LOCATION)];
  }
  @catch (EsGobJmulticardCardIso7816fourFileNotFoundException *e) {
    @throw nil_chk((JavaIoIOException *) cast_chk([new_JavaIoFileNotFoundException_initWithNSString_(@"ATR/INFO no encontrado") initCauseWithJavaLangThrowable:e], [JavaIoIOException class]));
  }
  @catch (EsGobJmulticardCardIso7816fourIso7816FourCardException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el ATR/INFO", e);
  }
}


#line 415
- (EsGobJmulticardCardIcaoMrz *)getDg1 {
  return EsGobJmulticardCardDnieDnie3_getDg1(self);
}


#line 428
- (EsGobJmulticardAsn1IcaoSubjectFacePhoto *)getDg2 {
  return EsGobJmulticardCardDnieDnie3_getDg2(self);
}


#line 443
- (IOSByteArray *)getDg3 {
  
#line 445
  @try {
    return [self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:JreLoadStatic(EsGobJmulticardCardIcaoMrtdLds1, FILE_DG03_LOCATION)];
  }
  @catch (EsGobJmulticardCardIso7816fourFileNotFoundException *e) {
    @throw nil_chk((JavaIoIOException *) cast_chk([new_JavaIoFileNotFoundException_initWithNSString_(@"DG3 no encontrado") initCauseWithJavaLangThrowable:e], [JavaIoIOException class]));
  }
  @catch (
#line 452
  EsGobJmulticardCardIso7816fourRequiredSecurityStateNotSatisfiedException *e) {
    @throw new_EsGobJmulticardCardCardSecurityException_initWithNSString_withJavaLangException_(@"No se tienen permisos para leer el DG3", e);
  }
  @catch (EsGobJmulticardCardIso7816fourIso7816FourCardException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el DG3", e);
  }
}


#line 460
- (EsGobJmulticardAsn1IcaoSubjectSignaturePhoto *)getDg7 {
  return EsGobJmulticardCardDnieDnie3_getDg7(self);
}


#line 475
- (EsGobJmulticardAsn1IcaoAdditionalPersonalDetails *)getDg11 {
  return EsGobJmulticardCardDnieDnie3_getDg11(self);
}


#line 490
- (IOSByteArray *)getDg12 {
  return EsGobJmulticardCardDnieDnie3_getDg12(self);
}


#line 503
- (EsGobJmulticardAsn1IcaoOptionalDetails *)getDg13 {
  
#line 505
  @try {
    EsGobJmulticardAsn1IcaoOptionalDetails *ret = new_EsGobJmulticardAsn1IcaoOptionalDetails_init();
    [ret setDerValueWithByteArray:[self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:JreLoadStatic(EsGobJmulticardCardIcaoMrtdLds1, FILE_DG13_LOCATION)]];
    return ret;
  }
  @catch (EsGobJmulticardCardIso7816fourFileNotFoundException *e) {
    @throw nil_chk((JavaIoIOException *) cast_chk([new_JavaIoFileNotFoundException_initWithNSString_(@"DG13 no encontrado") initCauseWithJavaLangThrowable:e], [JavaIoIOException class]));
  }
  @catch (EsGobJmulticardCardIso7816fourIso7816FourCardException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el DG13", e);
  }
  @catch (
#line 513
  EsGobJmulticardAsn1TlvException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el DG13", e);
  }
  @catch (
#line 513
  EsGobJmulticardAsn1Asn1Exception *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el DG13", e);
  }
}


#line 518
- (EsGobJmulticardAsn1IcaoSecurityOptions *)getDg14 {
  return EsGobJmulticardCardDnieDnie3_getDg14(self);
}


#line 533
- (EsGobJmulticardAsn1IcaoSod *)getSod {
  return EsGobJmulticardCardDnieDnie3_getSod(self);
}


#line 545
- (EsGobJmulticardAsn1IcaoCom *)getCom {
  
#line 547
  @try {
    EsGobJmulticardAsn1IcaoCom *com = new_EsGobJmulticardAsn1IcaoCom_init();
    [com setDerValueWithByteArray:[self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:JreLoadStatic(EsGobJmulticardCardIcaoMrtdLds1, FILE_COM_LOCATION)]];
    return com;
  }
  @catch (EsGobJmulticardCardIso7816fourFileNotFoundException *e) {
    @throw nil_chk((JavaIoIOException *) cast_chk([new_JavaIoFileNotFoundException_initWithNSString_(@"COM no encontrado") initCauseWithJavaLangThrowable:e], [JavaIoIOException class]));
  }
  @catch (EsGobJmulticardCardIso7816fourIso7816FourCardException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el 'Common Data' (COM)", e);
  }
  @catch (
#line 555
  EsGobJmulticardAsn1TlvException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el 'Common Data' (COM)", e);
  }
  @catch (
#line 555
  EsGobJmulticardAsn1Asn1Exception *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el 'Common Data' (COM)", e);
  }
}


#line 563
- (IOSByteArray *)getCardSecurity {
  
#line 565
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Este MRTD no tiene CardSecurity");
}


#line 568
- (IOSByteArray *)getDg4 {
  
#line 570
  @throw new_EsGobJmulticardCardCryptoCardSecurityException_initWithNSString_(@"Hace falta canal de administrador para leer el DG4");
}


#line 573
- (IOSByteArray *)getDg5 {
  
#line 575
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Este MRTD no tiene DG5");
}


#line 578
- (IOSByteArray *)getDg6 {
  
#line 580
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Este MRTD no tiene DG6");
}


#line 583
- (IOSByteArray *)getDg8 {
  
#line 585
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Este MRTD no tiene DG8");
}


#line 588
- (IOSByteArray *)getDg9 {
  
#line 590
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Este MRTD no tiene DG9");
}


#line 593
- (IOSByteArray *)getDg10 {
  
#line 595
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Este MRTD no tiene DG10");
}


#line 598
- (IOSByteArray *)getDg15 {
  
#line 600
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Este MRTD no tiene DG15");
}


#line 603
- (IOSByteArray *)getDg16 {
  
#line 605
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Este MRTD no tiene DG16");
}


#line 608
- (IOSByteArray *)getDir {
  
#line 610
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Este MRTD no tiene DIR");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "LEsGobJmulticardConnectionApduConnection;", 0x11, -1, -1, 5, -1, -1, -1 },
    { NULL, "LEsGobJmulticardConnectionApduConnection;", 0x11, -1, -1, 5, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertX509Certificate;", 0x11, -1, -1, 6, -1, -1, -1 },
    { NULL, "[B", 0x11, -1, -1, 7, -1, -1, -1 },
    { NULL, "[B", 0x11, -1, -1, 7, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardIcaoMrz;", 0x11, -1, -1, 7, -1, -1, -1 },
    { NULL, "LEsGobJmulticardAsn1IcaoSubjectFacePhoto;", 0x11, -1, -1, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "LEsGobJmulticardAsn1IcaoSubjectSignaturePhoto;", 0x11, -1, -1, 7, -1, -1, -1 },
    { NULL, "LEsGobJmulticardAsn1IcaoAdditionalPersonalDetails;", 0x11, -1, -1, 7, -1, -1, -1 },
    { NULL, "[B", 0x11, -1, -1, 7, -1, -1, -1 },
    { NULL, "LEsGobJmulticardAsn1IcaoOptionalDetails;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "LEsGobJmulticardAsn1IcaoSecurityOptions;", 0x11, -1, -1, 7, -1, -1, -1 },
    { NULL, "LEsGobJmulticardAsn1IcaoSod;", 0x11, -1, -1, 7, -1, -1, -1 },
    { NULL, "LEsGobJmulticardAsn1IcaoCom;", 0x11, -1, -1, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "[B", 0x11, -1, -1, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithEsGobJmulticardConnectionApduConnection:withJavaxSecurityAuthCallbackPasswordCallback:withEsGobJmulticardCryptoHelper:withJavaxSecurityAuthCallbackCallbackHandler:);
  methods[1].selector = @selector(getCardName);
  methods[2].selector = @selector(getPinRetriesLeft);
  methods[3].selector = @selector(openSecureChannelIfNotAlreadyOpened);
  methods[4].selector = @selector(openSecureChannelIfNotAlreadyOpenedWithBoolean:);
  methods[5].selector = @selector(openPinChannel);
  methods[6].selector = @selector(openUserChannel);
  methods[7].selector = @selector(needsPinForLoadingCerts);
  methods[8].selector = @selector(checkSecurityObjects);
  methods[9].selector = @selector(getCardAccess);
  methods[10].selector = @selector(getAtrInfo);
  methods[11].selector = @selector(getDg1);
  methods[12].selector = @selector(getDg2);
  methods[13].selector = @selector(getDg3);
  methods[14].selector = @selector(getDg7);
  methods[15].selector = @selector(getDg11);
  methods[16].selector = @selector(getDg12);
  methods[17].selector = @selector(getDg13);
  methods[18].selector = @selector(getDg14);
  methods[19].selector = @selector(getSod);
  methods[20].selector = @selector(getCom);
  methods[21].selector = @selector(getCardSecurity);
  methods[22].selector = @selector(getDg4);
  methods[23].selector = @selector(getDg5);
  methods[24].selector = @selector(getDg6);
  methods[25].selector = @selector(getDg8);
  methods[26].selector = @selector(getDg9);
  methods[27].selector = @selector(getDg10);
  methods[28].selector = @selector(getDg15);
  methods[29].selector = @selector(getDg16);
  methods[30].selector = @selector(getDir);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "idesp_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEsGobJmulticardConnectionApduConnection;LJavaxSecurityAuthCallbackPasswordCallback;LEsGobJmulticardCryptoHelper;LJavaxSecurityAuthCallbackCallbackHandler;", "LEsGobJmulticardConnectionApduConnectionException;", "LEsGobJmulticardCardCryptoCardException;LEsGobJmulticardCardPinException;", "openSecureChannelIfNotAlreadyOpened", "Z", "LEsGobJmulticardCardCryptoCardException;", "LJavaIoIOException;LEsGobJmulticardAsn1TlvException;LEsGobJmulticardAsn1Asn1Exception;LJavaSecuritySignatureException;LJavaSecurityCertCertificateException;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _EsGobJmulticardCardDnieDnie3 = { "Dnie3", "es.gob.jmulticard.card.dnie", ptrTable, methods, fields, 7, 0x1, 31, 1, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardCardDnieDnie3;
}

@end


#line 99
void EsGobJmulticardCardDnieDnie3_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(EsGobJmulticardCardDnieDnie3 *self, id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch) {
  EsGobJmulticardCardDnieDnie_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(self,
#line 104
  conn, pwc, cryptoHlpr, ch);
  self->idesp_ =
#line 86
  nil;
  
#line 105
  self->rawConnection_ = conn;
  
#line 108
  @try {
    self->idesp_ = [self getIdesp];
  }
  @catch (JavaLangException *e1) {
    EsGobJmulticardJmcLogger_warningWithNSString_(JreStrcat("$@", @"No se ha podido leer el IDESP del DNIe: ", e1));
    self->idesp_ = nil;
  }
}


#line 99
EsGobJmulticardCardDnieDnie3 *new_EsGobJmulticardCardDnieDnie3_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardDnieDnie3, initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_, conn, pwc, cryptoHlpr, ch)
}


#line 99
EsGobJmulticardCardDnieDnie3 *create_EsGobJmulticardCardDnieDnie3_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardDnieDnie3, initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_, conn, pwc, cryptoHlpr, ch)
}


#line 213
id<EsGobJmulticardConnectionApduConnection> EsGobJmulticardCardDnieDnie3_openPinChannel(EsGobJmulticardCardDnieDnie3 *self) {
  id<EsGobJmulticardConnectionApduConnection> pinSecureConnection = new_EsGobJmulticardConnectionCwa14890Cwa14890OneV2Connection_initWithEsGobJmulticardCardCwa14890Cwa14890Card_withEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withEsGobJmulticardCardCwa14890Cwa14890PublicConstants_withEsGobJmulticardCardCwa14890Cwa14890PrivateConstants_withEsGobJmulticardConnectionCwa14890ChannelType_(self,
#line 216
  [self getConnection],
#line 217
  [self getCryptoHelper], EsGobJmulticardCardDnieDnieFactory_getDnie3PinCwa14890ConstantsWithNSString_(self->idesp_), EsGobJmulticardCardDnieDnieFactory_getDnie3PinCwa14890ConstantsWithNSString_(self->idesp_), JreLoadEnum(EsGobJmulticardConnectionCwa14890ChannelType, CWA_PIN));
  
#line 223
  @try {
    [self selectMasterFile];
  }
  @catch (JavaLangException *e) {
    EsGobJmulticardJmcLogger_warningWithNSString_(JreStrcat("$@", @"Error seleccionando el MF tras el establecimiento del canal seguro de PIN: ",
#line 228
    e));
  }
  
#line 232
  @try {
    [self setConnectionWithEsGobJmulticardConnectionApduConnection:pinSecureConnection];
  }
  @catch (EsGobJmulticardConnectionApduConnectionException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error en el establecimiento del canal seguro de PIN", e);
  }
  
#line 239
  EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 240
  [EsGobJmulticardCardDnieDnie3_class_() getName], @"openPinChannel", @"Canal seguro de PIN para DNIe establecido");
  
#line 243
  return pinSecureConnection;
}


#line 249
id<EsGobJmulticardConnectionApduConnection> EsGobJmulticardCardDnieDnie3_openUserChannel(EsGobJmulticardCardDnieDnie3 *self) {
  
#line 251
  id<EsGobJmulticardConnectionApduConnection> usrSecureConnection = new_EsGobJmulticardConnectionCwa14890Cwa14890OneV2Connection_initWithEsGobJmulticardCardCwa14890Cwa14890Card_withEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withEsGobJmulticardCardCwa14890Cwa14890PublicConstants_withEsGobJmulticardCardCwa14890Cwa14890PrivateConstants_withEsGobJmulticardConnectionCwa14890ChannelType_(self,
#line 253
  [self getConnection],
#line 254
  [self getCryptoHelper], EsGobJmulticardCardDnieDnieFactory_getDnie3UsrCwa14890ConstantsWithNSString_(self->idesp_), EsGobJmulticardCardDnieDnieFactory_getDnie3UsrCwa14890ConstantsWithNSString_(self->idesp_), JreLoadEnum(EsGobJmulticardConnectionCwa14890ChannelType, CWA_USER));
  
#line 260
  @try {
    [self selectMasterFile];
  }
  @catch (JavaLangException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(
#line 265
    @"Error seleccionando el MF tras el establecimiento del canal seguro de usuario", e);
  }
  
#line 269
  @try {
    [self setConnectionWithEsGobJmulticardConnectionApduConnection:usrSecureConnection];
  }
  @catch (EsGobJmulticardConnectionApduConnectionException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error en el establecimiento del canal seguro de usuario", e);
  }
  
#line 276
  EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 277
  [EsGobJmulticardCardDnieDnie3_class_() getName], @"openUserChannel", @"Canal seguro de Usuario para DNIe establecido");
  
#line 280
  return usrSecureConnection;
}


#line 415
EsGobJmulticardCardIcaoMrz *EsGobJmulticardCardDnieDnie3_getDg1(EsGobJmulticardCardDnieDnie3 *self) {
  
#line 417
  @try {
    return new_EsGobJmulticardCardIcaoMrz_initWithByteArray_([self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:JreLoadStatic(EsGobJmulticardCardIcaoMrtdLds1, FILE_DG01_LOCATION)]);
  }
  @catch (EsGobJmulticardCardIso7816fourFileNotFoundException *e) {
    @throw nil_chk((JavaIoIOException *) cast_chk([new_JavaIoFileNotFoundException_initWithNSString_(@"DG1 no encontrado") initCauseWithJavaLangThrowable:e], [JavaIoIOException class]));
  }
  @catch (EsGobJmulticardCardIso7816fourIso7816FourCardException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el DG1", e);
  }
}


#line 428
EsGobJmulticardAsn1IcaoSubjectFacePhoto *EsGobJmulticardCardDnieDnie3_getDg2(EsGobJmulticardCardDnieDnie3 *self) {
  
#line 430
  EsGobJmulticardAsn1IcaoSubjectFacePhoto *ret = new_EsGobJmulticardAsn1IcaoSubjectFacePhoto_init();
  @try {
    [ret setDerValueWithByteArray:[self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:JreLoadStatic(EsGobJmulticardCardIcaoMrtdLds1, FILE_DG02_LOCATION)]];
  }
  @catch (EsGobJmulticardCardIso7816fourFileNotFoundException *e) {
    @throw nil_chk((JavaIoIOException *) cast_chk([new_JavaIoFileNotFoundException_initWithNSString_(@"DG2 no encontrado") initCauseWithJavaLangThrowable:e], [JavaIoIOException class]));
  }
  @catch (EsGobJmulticardCardIso7816fourIso7816FourCardException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el DG2", e);
  }
  @catch (
#line 437
  EsGobJmulticardAsn1TlvException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el DG2", e);
  }
  @catch (
#line 437
  EsGobJmulticardAsn1Asn1Exception *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el DG2", e);
  }
  return ret;
}


#line 460
EsGobJmulticardAsn1IcaoSubjectSignaturePhoto *EsGobJmulticardCardDnieDnie3_getDg7(EsGobJmulticardCardDnieDnie3 *self) {
  
#line 462
  EsGobJmulticardAsn1IcaoSubjectSignaturePhoto *ret = new_EsGobJmulticardAsn1IcaoSubjectSignaturePhoto_init();
  @try {
    [ret setDerValueWithByteArray:[self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:JreLoadStatic(EsGobJmulticardCardIcaoMrtdLds1, FILE_DG07_LOCATION)]];
  }
  @catch (EsGobJmulticardCardIso7816fourFileNotFoundException *e) {
    @throw nil_chk((JavaIoIOException *) cast_chk([new_JavaIoFileNotFoundException_initWithNSString_(@"DG7 no encontrado") initCauseWithJavaLangThrowable:e], [JavaIoIOException class]));
  }
  @catch (EsGobJmulticardCardIso7816fourIso7816FourCardException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el DG7", e);
  }
  @catch (
#line 469
  EsGobJmulticardAsn1TlvException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el DG7", e);
  }
  @catch (
#line 469
  EsGobJmulticardAsn1Asn1Exception *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el DG7", e);
  }
  return ret;
}


#line 475
EsGobJmulticardAsn1IcaoAdditionalPersonalDetails *EsGobJmulticardCardDnieDnie3_getDg11(EsGobJmulticardCardDnieDnie3 *self) {
  
#line 477
  @try {
    EsGobJmulticardAsn1IcaoAdditionalPersonalDetails *personalDetails = new_EsGobJmulticardAsn1IcaoAdditionalPersonalDetails_init();
    [personalDetails setDerValueWithByteArray:[self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:JreLoadStatic(EsGobJmulticardCardIcaoMrtdLds1, FILE_DG11_LOCATION)]];
    return personalDetails;
  }
  @catch (EsGobJmulticardCardIso7816fourFileNotFoundException *e) {
    @throw nil_chk((JavaIoIOException *) cast_chk([new_JavaIoFileNotFoundException_initWithNSString_(@"DG11 no encontrado") initCauseWithJavaLangThrowable:e], [JavaIoIOException class]));
  }
  @catch (EsGobJmulticardCardIso7816fourIso7816FourCardException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el DG11", e);
  }
  @catch (
#line 485
  EsGobJmulticardAsn1Asn1Exception *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el DG11", e);
  }
  @catch (
#line 485
  EsGobJmulticardAsn1TlvException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el DG11", e);
  }
}


#line 490
IOSByteArray *EsGobJmulticardCardDnieDnie3_getDg12(EsGobJmulticardCardDnieDnie3 *self) {
  
#line 492
  @try {
    return [self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:JreLoadStatic(EsGobJmulticardCardIcaoMrtdLds1, FILE_DG12_LOCATION)];
  }
  @catch (EsGobJmulticardCardIso7816fourFileNotFoundException *e) {
    @throw nil_chk((JavaIoIOException *) cast_chk([new_JavaIoFileNotFoundException_initWithNSString_(@"DG12 no encontrado") initCauseWithJavaLangThrowable:e], [JavaIoIOException class]));
  }
  @catch (EsGobJmulticardCardIso7816fourIso7816FourCardException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el DG12", e);
  }
}


#line 518
EsGobJmulticardAsn1IcaoSecurityOptions *EsGobJmulticardCardDnieDnie3_getDg14(EsGobJmulticardCardDnieDnie3 *self) {
  
#line 520
  @try {
    EsGobJmulticardAsn1IcaoSecurityOptions *securityOptions = new_EsGobJmulticardAsn1IcaoSecurityOptions_init();
    [securityOptions setDerValueWithByteArray:[self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:JreLoadStatic(EsGobJmulticardCardIcaoMrtdLds1, FILE_DG14_LOCATION)]];
    return securityOptions;
  }
  @catch (EsGobJmulticardCardIso7816fourFileNotFoundException *e) {
    @throw nil_chk((JavaIoIOException *) cast_chk([new_JavaIoFileNotFoundException_initWithNSString_(@"DG14 no encontrado") initCauseWithJavaLangThrowable:e], [JavaIoIOException class]));
  }
  @catch (EsGobJmulticardCardIso7816fourIso7816FourCardException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el DG14", e);
  }
  @catch (
#line 528
  EsGobJmulticardAsn1TlvException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el DG14", e);
  }
  @catch (
#line 528
  EsGobJmulticardAsn1Asn1Exception *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error leyendo el DG14", e);
  }
}


#line 533
EsGobJmulticardAsn1IcaoSod *EsGobJmulticardCardDnieDnie3_getSod(EsGobJmulticardCardDnieDnie3 *self) {
  
#line 535
  EsGobJmulticardAsn1IcaoSod *sod = new_EsGobJmulticardAsn1IcaoSod_initWithEsGobJmulticardCryptoHelper_([self getCryptoHelper]);
  @try {
    [sod setDerValueWithByteArray:[self selectFileByLocationAndReadWithEsGobJmulticardCardLocation:JreLoadStatic(EsGobJmulticardCardIcaoMrtdLds1, FILE_SOD_LOCATION)]];
  }
  @catch (EsGobJmulticardAsn1Asn1Exception *e) {
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"No se puede crear un SOD a partir del contenido del fichero", e);
  }
  @catch (
#line 539
  EsGobJmulticardAsn1TlvException *e) {
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"No se puede crear un SOD a partir del contenido del fichero", e);
  }
  @catch (
#line 539
  EsGobJmulticardCardIso7816fourIso7816FourCardException *e) {
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"No se puede crear un SOD a partir del contenido del fichero", e);
  }
  return sod;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardDnieDnie3)
