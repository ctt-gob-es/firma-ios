//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/ceressc/CeresSc.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/CryptoHelper.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/JmcLogger.h"
#include "es/gob/jmulticard/card/Atr.h"
#include "es/gob/jmulticard/card/CardMessages.h"
#include "es/gob/jmulticard/card/CryptoCardException.h"
#include "es/gob/jmulticard/card/InvalidCardException.h"
#include "es/gob/jmulticard/card/cwa14890/Cwa14890PrivateConstants.h"
#include "es/gob/jmulticard/card/cwa14890/Cwa14890PublicConstants.h"
#include "es/gob/jmulticard/card/dnie/Dnie.h"
#include "es/gob/jmulticard/card/dnie/ceressc/CeresSc.h"
#include "es/gob/jmulticard/card/dnie/ceressc/CeresScCwa14890Constants.h"
#include "es/gob/jmulticard/connection/ApduConnection.h"
#include "es/gob/jmulticard/connection/ApduConnectionException.h"
#include "es/gob/jmulticard/connection/cwa14890/ChannelType.h"
#include "es/gob/jmulticard/connection/cwa14890/Cwa14890Connection.h"
#include "es/gob/jmulticard/connection/cwa14890/Cwa14890OneV2Connection.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "javax/security/auth/callback/CallbackHandler.h"
#include "javax/security/auth/callback/PasswordCallback.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/card/dnie/ceressc/CeresSc must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardCardDnieCeresscCeresSc ()

+ (void)checkAtrWithByteArray:(IOSByteArray *)atrBytes;

@end

inline IOSByteArray *EsGobJmulticardCardDnieCeresscCeresSc_get_ATR_MASK_TC(void);
static IOSByteArray *EsGobJmulticardCardDnieCeresscCeresSc_ATR_MASK_TC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardDnieCeresscCeresSc, ATR_MASK_TC, IOSByteArray *)

inline NSString *EsGobJmulticardCardDnieCeresscCeresSc_get_cardVersion(void);
inline NSString *EsGobJmulticardCardDnieCeresscCeresSc_set_cardVersion(NSString *value);
static NSString *EsGobJmulticardCardDnieCeresscCeresSc_cardVersion;
J2OBJC_STATIC_FIELD_OBJ(EsGobJmulticardCardDnieCeresscCeresSc, cardVersion, NSString *)

__attribute__((unused)) static void EsGobJmulticardCardDnieCeresscCeresSc_checkAtrWithByteArray_(IOSByteArray *atrBytes);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/ceressc/CeresSc.java"

J2OBJC_INITIALIZED_DEFN(EsGobJmulticardCardDnieCeresscCeresSc)

EsGobJmulticardCardAtr *EsGobJmulticardCardDnieCeresscCeresSc_ATR_TC;


#line 26
@implementation EsGobJmulticardCardDnieCeresscCeresSc


#line 48
- (instancetype)initWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                  withJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)pwc
                                withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHlpr
                   withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)ch {
  EsGobJmulticardCardDnieCeresscCeresSc_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(self, conn, pwc, cryptoHlpr, ch);
  return self;
}


#line 57
- (id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>)getCwa14890PublicConstants {
  
#line 59
  return new_EsGobJmulticardCardDnieCeresscCeresScCwa14890Constants_initPackagePrivate();
}


#line 62
- (jboolean)needsPinForLoadingCerts {
  
#line 64
  return false;
}


#line 67
- (id<EsGobJmulticardCardCwa14890Cwa14890PrivateConstants>)getCwa14890PrivateConstants {
  
#line 69
  return new_EsGobJmulticardCardDnieCeresscCeresScCwa14890Constants_initPackagePrivate();
}


#line 72
- (void)openSecureChannelIfNotAlreadyOpened {
  
#line 76
  if ([self isSecurityChannelOpen]) {
    return;
  }
  
#line 80
  EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_([EsGobJmulticardCardDnieCeresscCeresSc_class_() getName], @"openSecureChannelIfNotAlreadyOpened", JreStrcat("$@", @"Conexion actual: ", [self getConnection]));
  EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_([EsGobJmulticardCardDnieCeresscCeresSc_class_() getName], @"openSecureChannelIfNotAlreadyOpened", JreStrcat("$@", @"Conexion subyacente: ", rawConnection_));
  
#line 84
  if (![((id<EsGobJmulticardConnectionApduConnection>) nil_chk([self getConnection])) isOpen]) {
    @try {
      [self setConnectionWithEsGobJmulticardConnectionApduConnection:rawConnection_];
    }
    @catch (EsGobJmulticardConnectionApduConnectionException *e) {
      @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error en el establecimiento del canal inicial", e);
    }
  }
  
#line 94
  if (!([EsGobJmulticardConnectionCwa14890Cwa14890Connection_class_() isInstance:[self getConnection]])) {
    id<EsGobJmulticardConnectionApduConnection> secureConnection = new_EsGobJmulticardConnectionCwa14890Cwa14890OneV2Connection_initWithEsGobJmulticardCardCwa14890Cwa14890Card_withEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withEsGobJmulticardCardCwa14890Cwa14890PublicConstants_withEsGobJmulticardCardCwa14890Cwa14890PrivateConstants_withEsGobJmulticardConnectionCwa14890ChannelType_(
#line 96
    self,
#line 97
    [self getConnection],
#line 98
    [self getCryptoHelper],
#line 99
    [self getCwa14890PublicConstants],
#line 100
    [self getCwa14890PrivateConstants], JreLoadEnum(EsGobJmulticardConnectionCwa14890ChannelType, CWA_USER));
    
#line 104
    @try {
      [self selectMasterFile];
    }
    @catch (JavaLangException *e) {
      EsGobJmulticardJmcLogger_warningWithNSString_(JreStrcat("$@", @"Error seleccionando el MF tras el establecimiento del canal seguro de PIN: ", e));
    }
    
#line 111
    @try {
      [self setConnectionWithEsGobJmulticardConnectionApduConnection:secureConnection];
    }
    @catch (EsGobJmulticardConnectionApduConnectionException *e) {
      @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error en el establecimiento del canal seguro", e);
    }
  }
  
#line 119
  @try {
    [self verifyPinWithJavaxSecurityAuthCallbackPasswordCallback:[self getInternalPasswordCallback]];
  }
  @catch (EsGobJmulticardConnectionApduConnectionException *e) {
    @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error en la apertura del canal seguro", e);
  }
}


#line 127
- (NSString *)getPinMessageWithInt:(jint)retriesLeft {
  
#line 129
  return EsGobJmulticardCardCardMessages_getStringWithNSString_withNSString_(@"Gen.0", JavaLangInteger_toStringWithInt_(retriesLeft));
}


#line 132
+ (void)checkAtrWithByteArray:(IOSByteArray *)atrBytes {
  EsGobJmulticardCardDnieCeresscCeresSc_checkAtrWithByteArray_(atrBytes);
}


#line 146
- (NSString *)description {
  
#line 148
  return JreStrcat("$$", @"Tarjeta FNMT CERES", (EsGobJmulticardCardDnieCeresscCeresSc_cardVersion != nil ? JreStrcat("$$", @" version ", EsGobJmulticardCardDnieCeresscCeresSc_cardVersion) : @""));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardCwa14890Cwa14890PublicConstants;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardCwa14890Cwa14890PrivateConstants;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 5, 6, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithEsGobJmulticardConnectionApduConnection:withJavaxSecurityAuthCallbackPasswordCallback:withEsGobJmulticardCryptoHelper:withJavaxSecurityAuthCallbackCallbackHandler:);
  methods[1].selector = @selector(getCwa14890PublicConstants);
  methods[2].selector = @selector(needsPinForLoadingCerts);
  methods[3].selector = @selector(getCwa14890PrivateConstants);
  methods[4].selector = @selector(openSecureChannelIfNotAlreadyOpened);
  methods[5].selector = @selector(getPinMessageWithInt:);
  methods[6].selector = @selector(checkAtrWithByteArray:);
  methods[7].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ATR_MASK_TC", "[B", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "ATR_TC", "LEsGobJmulticardCardAtr;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "cardVersion", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "LEsGobJmulticardConnectionApduConnection;LJavaxSecurityAuthCallbackPasswordCallback;LEsGobJmulticardCryptoHelper;LJavaxSecurityAuthCallbackCallbackHandler;", "LEsGobJmulticardConnectionApduConnectionException;LEsGobJmulticardCardInvalidCardException;", "LEsGobJmulticardCardCryptoCardException;LEsGobJmulticardCardPinException;LEsGobJmulticardCardPasswordCallbackNotFoundException;", "getPinMessage", "I", "checkAtr", "[B", "LEsGobJmulticardCardInvalidCardException;", "toString", &EsGobJmulticardCardDnieCeresscCeresSc_ATR_MASK_TC, &EsGobJmulticardCardDnieCeresscCeresSc_ATR_TC, &EsGobJmulticardCardDnieCeresscCeresSc_cardVersion };
  static const J2ObjcClassInfo _EsGobJmulticardCardDnieCeresscCeresSc = { "CeresSc", "es.gob.jmulticard.card.dnie.ceressc", ptrTable, methods, fields, 7, 0x11, 8, 3, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardCardDnieCeresscCeresSc;
}

+ (void)initialize {
  if (self == [EsGobJmulticardCardDnieCeresscCeresSc class]) {
    EsGobJmulticardCardDnieCeresscCeresSc_ATR_MASK_TC = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 29
      (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0x00, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff,
#line 30
      (jbyte) (jint) 0xff, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff, (jbyte) (jint) 0xff } count:20];
      EsGobJmulticardCardDnieCeresscCeresSc_ATR_TC = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 35
        (jbyte) (jint) 0x3B, (jbyte) (jint) 0x7F, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x6A, (jbyte) (jint) 0x46, (jbyte) (jint) 0x4E, (jbyte) (jint) 0x4d,
#line 36
        (jbyte) (jint) 0x54, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x00, (jbyte) (jint) 0x03, (jbyte) (jint) 0x90, (jbyte) (jint) 0x00 } count:20],
#line 37
        EsGobJmulticardCardDnieCeresscCeresSc_ATR_MASK_TC);
        J2OBJC_SET_INITIALIZED(EsGobJmulticardCardDnieCeresscCeresSc)
      }
    }

@end


#line 48
void EsGobJmulticardCardDnieCeresscCeresSc_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(EsGobJmulticardCardDnieCeresscCeresSc *self, id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch) {
  EsGobJmulticardCardDnieDnie_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(self,
#line 53
  conn, pwc, cryptoHlpr, ch);
  EsGobJmulticardCardDnieCeresscCeresSc_checkAtrWithByteArray_([((id<EsGobJmulticardConnectionApduConnection>) nil_chk(conn)) reset]);
}


#line 48
EsGobJmulticardCardDnieCeresscCeresSc *new_EsGobJmulticardCardDnieCeresscCeresSc_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardDnieCeresscCeresSc, initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_, conn, pwc, cryptoHlpr, ch)
}


#line 48
EsGobJmulticardCardDnieCeresscCeresSc *create_EsGobJmulticardCardDnieCeresscCeresSc_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardDnieCeresscCeresSc, initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_, conn, pwc, cryptoHlpr, ch)
}


#line 132
void EsGobJmulticardCardDnieCeresscCeresSc_checkAtrWithByteArray_(IOSByteArray *atrBytes) {
  EsGobJmulticardCardDnieCeresscCeresSc_initialize();
  
#line 133
  EsGobJmulticardCardAtr *tmpAtr = new_EsGobJmulticardCardAtr_initWithByteArray_withByteArray_(atrBytes, EsGobJmulticardCardDnieCeresscCeresSc_ATR_MASK_TC);
  if ([((EsGobJmulticardCardAtr *) nil_chk(EsGobJmulticardCardDnieCeresscCeresSc_ATR_TC)) isEqual:tmpAtr] && IOSByteArray_Get(nil_chk(atrBytes), 15) >= (jbyte) (jint) 0x04 && IOSByteArray_Get(atrBytes, 16) >= (jbyte) (jint) 0x30) {
    EsGobJmulticardCardDnieCeresscCeresSc_cardVersion = JreStrcat("$C$", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_([IOSByteArray newArrayWithBytes:(jbyte[]){ IOSByteArray_Get(nil_chk(atrBytes), 15) } count:1], false), '.', EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_([IOSByteArray newArrayWithBytes:(jbyte[]){ IOSByteArray_Get(atrBytes, 16) } count:1], false));
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 137
    [EsGobJmulticardCardDnieCeresscCeresSc_class_() getName],
#line 138
    @"checkAtr", JreStrcat("$$", @"Encontrada TC CERES en version ",
#line 139
    EsGobJmulticardCardDnieCeresscCeresSc_cardVersion));
    
#line 141
    return;
  }
  @throw new_EsGobJmulticardCardInvalidCardException_initWithNSString_withEsGobJmulticardCardAtr_withByteArray_(@"CERES", EsGobJmulticardCardDnieCeresscCeresSc_ATR_TC, atrBytes);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardDnieCeresscCeresSc)
