//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/tif/Tif.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobJmulticardCardDnieTifTif")
#ifdef RESTRICT_EsGobJmulticardCardDnieTifTif
#define INCLUDE_ALL_EsGobJmulticardCardDnieTifTif 0
#else
#define INCLUDE_ALL_EsGobJmulticardCardDnieTifTif 1
#endif
#undef RESTRICT_EsGobJmulticardCardDnieTifTif

#if !defined (EsGobJmulticardCardDnieTifTif_) && (INCLUDE_ALL_EsGobJmulticardCardDnieTifTif || defined(INCLUDE_EsGobJmulticardCardDnieTifTif))
#define EsGobJmulticardCardDnieTifTif_

#define RESTRICT_EsGobJmulticardCardDnieDnie 1
#define INCLUDE_EsGobJmulticardCardDnieDnie 1
#include "es/gob/jmulticard/card/dnie/Dnie.h"

@class EsGobJmulticardCryptoHelper;
@class JavaxSecurityAuthCallbackPasswordCallback;
@protocol EsGobJmulticardCardCwa14890Cwa14890PrivateConstants;
@protocol EsGobJmulticardCardCwa14890Cwa14890PublicConstants;
@protocol EsGobJmulticardConnectionApduConnection;
@protocol JavaxSecurityAuthCallbackCallbackHandler;

/*!
 @brief Tarjeta FNMT TIF (variante del DNIe).
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s.
 */
@interface EsGobJmulticardCardDnieTifTif : EsGobJmulticardCardDnieDnie

#pragma mark Public

/*!
 @brief Construye una tarjeta FNMT TIF (variante del DNIe).
 @param conn Conexi &oacute; n con la tarjeta.
 @param pwc <i> PasswordCallback </i>  para obtener el PIN de la TIF.
 @param cryptoHlpr Funcionalidades criptogr &aacute; ficas de utilidad.
 @param ch Gestor de  <i> callbacks </i>  para la solicitud de datos al usuario.
 @throw ApduConnectionExceptionSi la conexi&oacute;n con la tarjeta se
                                  proporciona cerrada y no es posible abrirla.
 */
- (instancetype)initWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                  withJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)pwc
                                withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHlpr
                   withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)ch;

- (NSString *)getCardName;

#pragma mark Protected

- (id<EsGobJmulticardCardCwa14890Cwa14890PrivateConstants>)getCwa14890PrivateConstants;

- (id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>)getCwa14890PublicConstants;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobJmulticardCardDnieTifTif)

FOUNDATION_EXPORT void EsGobJmulticardCardDnieTifTif_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(EsGobJmulticardCardDnieTifTif *self, id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch);

FOUNDATION_EXPORT EsGobJmulticardCardDnieTifTif *new_EsGobJmulticardCardDnieTifTif_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobJmulticardCardDnieTifTif *create_EsGobJmulticardCardDnieTifTif_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardCardDnieTifTif)

#endif

#pragma pop_macro("INCLUDE_ALL_EsGobJmulticardCardDnieTifTif")
