//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/DnieNfc.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/CryptoHelper.h"
#include "es/gob/jmulticard/DigestAlgorithm.h"
#include "es/gob/jmulticard/JmcLogger.h"
#include "es/gob/jmulticard/apdu/iso7816four/pace/MseSetPaceAlgorithmApduCommand.h"
#include "es/gob/jmulticard/asn1/icao/CardAccess.h"
#include "es/gob/jmulticard/callback/CustomTextInputCallback.h"
#include "es/gob/jmulticard/card/CardMessages.h"
#include "es/gob/jmulticard/card/CryptoCardException.h"
#include "es/gob/jmulticard/card/PrivateKeyReference.h"
#include "es/gob/jmulticard/card/dnie/Dnie3.h"
#include "es/gob/jmulticard/card/dnie/DnieNfc.h"
#include "es/gob/jmulticard/card/icao/IcaoException.h"
#include "es/gob/jmulticard/card/icao/InvalidCanOrMrzException.h"
#include "es/gob/jmulticard/card/icao/WirelessInitializer.h"
#include "es/gob/jmulticard/card/icao/WirelessInitializerCan.h"
#include "es/gob/jmulticard/card/icao/WirelessInitializerMrz.h"
#include "es/gob/jmulticard/connection/ApduConnection.h"
#include "es/gob/jmulticard/connection/ApduConnectionException.h"
#include "es/gob/jmulticard/connection/cwa14890/Cwa14890Connection.h"
#include "es/gob/jmulticard/connection/pace/PaceConnection.h"
#include "es/gob/jmulticard/connection/pace/PaceException.h"
#include "es/gob/jmulticard/connection/pace/SecureMessaging.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "javax/security/auth/callback/Callback.h"
#include "javax/security/auth/callback/CallbackHandler.h"
#include "javax/security/auth/callback/PasswordCallback.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/card/dnie/DnieNfc must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardCardDnieDnieNfc ()

+ (id<EsGobJmulticardConnectionApduConnection>)getPaceConnectionWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)con
                                                               withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)ch
                                                                            withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHelper;

- (id<EsGobJmulticardConnectionApduConnection>)getPaceConnectionWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)con
                                                          withEsGobJmulticardCryptoHelper_PaceChannelHelper:(EsGobJmulticardCryptoHelper_PaceChannelHelper *)pch;

- (void)resetCard;

+ (EsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_PacePasswordType *)getPasswordTypeWithNSString:(NSString *)paceInitializationValue;

/*!
 @brief Indica si un texto es num&eacute;rico.
 @param cs Texto a analizar.
 @return <code>true</code> si el texto es num&eacute;rico,
          <code>false</code> en caso contrario.
 */
+ (jboolean)isNumericWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs;

@end

inline EsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_PacePasswordType *EsGobJmulticardCardDnieDnieNfc_get_paceInitType(void);
inline EsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_PacePasswordType *EsGobJmulticardCardDnieDnieNfc_set_paceInitType(EsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_PacePasswordType *value);
static EsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_PacePasswordType *EsGobJmulticardCardDnieDnieNfc_paceInitType;
J2OBJC_STATIC_FIELD_OBJ(EsGobJmulticardCardDnieDnieNfc, paceInitType, EsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_PacePasswordType *)

inline NSString *EsGobJmulticardCardDnieDnieNfc_get_paceInitValue(void);
inline NSString *EsGobJmulticardCardDnieDnieNfc_set_paceInitValue(NSString *value);
static NSString *EsGobJmulticardCardDnieDnieNfc_paceInitValue;
J2OBJC_STATIC_FIELD_OBJ(EsGobJmulticardCardDnieDnieNfc, paceInitValue, NSString *)

__attribute__((unused)) static id<EsGobJmulticardConnectionApduConnection> EsGobJmulticardCardDnieDnieNfc_getPaceConnectionWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackCallbackHandler_withEsGobJmulticardCryptoHelper_(id<EsGobJmulticardConnectionApduConnection> con, id<JavaxSecurityAuthCallbackCallbackHandler> ch, EsGobJmulticardCryptoHelper *cryptoHelper);

__attribute__((unused)) static id<EsGobJmulticardConnectionApduConnection> EsGobJmulticardCardDnieDnieNfc_getPaceConnectionWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_PaceChannelHelper_(EsGobJmulticardCardDnieDnieNfc *self, id<EsGobJmulticardConnectionApduConnection> con, EsGobJmulticardCryptoHelper_PaceChannelHelper *pch);

__attribute__((unused)) static void EsGobJmulticardCardDnieDnieNfc_resetCard(EsGobJmulticardCardDnieDnieNfc *self);

__attribute__((unused)) static EsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_PacePasswordType *EsGobJmulticardCardDnieDnieNfc_getPasswordTypeWithNSString_(NSString *paceInitializationValue);

__attribute__((unused)) static jboolean EsGobJmulticardCardDnieDnieNfc_isNumericWithJavaLangCharSequence_(id<JavaLangCharSequence> cs);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/DnieNfc.java"


#line 37
@implementation EsGobJmulticardCardDnieDnieNfc


#line 51
- (instancetype)initWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                  withJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)pwc
                                withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHlpr
                   withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)ch {
  EsGobJmulticardCardDnieDnieNfc_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(self, conn, pwc, cryptoHlpr, ch);
  return self;
}

- (NSString *)getCardName {
  
#line 61
  return @"DNIe 3.0/4.0 accedido de forma inalambrica";
}


#line 64
+ (id<EsGobJmulticardConnectionApduConnection>)getPaceConnectionWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)con
                                                               withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)ch
                                                                            withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHelper {
  return EsGobJmulticardCardDnieDnieNfc_getPaceConnectionWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackCallbackHandler_withEsGobJmulticardCryptoHelper_(con, ch, cryptoHelper);
}


#line 174
- (id<EsGobJmulticardConnectionApduConnection>)getPaceConnectionWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)con
                                                          withEsGobJmulticardCryptoHelper_PaceChannelHelper:(EsGobJmulticardCryptoHelper_PaceChannelHelper *)pch {
  return EsGobJmulticardCardDnieDnieNfc_getPaceConnectionWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_PaceChannelHelper_(self, con, pch);
}


#line 197
- (void)openSecureChannelIfNotAlreadyOpened {
  
#line 200
  [self openSecureChannelIfNotAlreadyOpenedWithBoolean:true];
}

- (void)openSecureChannelIfNotAlreadyOpenedWithBoolean:(jboolean)doChv {
  
#line 206
  if (!([EsGobJmulticardConnectionCwa14890Cwa14890Connection_class_() isInstance:[self getConnection]])) {
    @try {
      rawConnection_ = EsGobJmulticardCardDnieDnieNfc_getPaceConnectionWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_PaceChannelHelper_(self,
#line 209
      [self getConnection],
#line 210
      [((EsGobJmulticardCryptoHelper *) nil_chk([self getCryptoHelper])) getPaceChannelHelperWithEsGobJmulticardAsn1IcaoCardAccess:new_EsGobJmulticardAsn1IcaoCardAccess_initWithEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_withEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_withEsGobJmulticardDigestAlgorithm_(JreLoadEnum(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm, PACE_ECDH_GM_AES_CBC_CMAC_128), JreLoadEnum(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam, BRAINPOOL_256_R1), JreLoadEnum(EsGobJmulticardDigestAlgorithm, SHA1)) withEsGobJmulticardApduIso7816fourPacePaceChat:
#line 216
      nil]);
    }
    @catch (
#line 220
    EsGobJmulticardConnectionApduConnectionException *e) {
      @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error en la transmision de la APDU", e);
    }
    @catch (EsGobJmulticardCardIcaoIcaoException *e) {
      @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error en el establecimiento del canal PACE", e);
    }
    
#line 227
    @try {
      [self setConnectionWithEsGobJmulticardConnectionApduConnection:rawConnection_];
    }
    @catch (EsGobJmulticardConnectionApduConnectionException *e) {
      @throw new_EsGobJmulticardCardCryptoCardException_initWithNSString_withJavaLangThrowable_(@"Error al abrir el canal PACE", e);
    }
  }
  
#line 235
  [super openSecureChannelIfNotAlreadyOpenedWithBoolean:doChv];
}

- (IOSByteArray *)signWithByteArray:(IOSByteArray *)data
                       withNSString:(NSString *)signAlgorithm
withEsGobJmulticardCardPrivateKeyReference:(id<EsGobJmulticardCardPrivateKeyReference>)privateKeyReference {
  
#line 243
  IOSByteArray *ret = [self signInternalWithByteArray:data withNSString:signAlgorithm withEsGobJmulticardCardPrivateKeyReference:privateKeyReference];
  @try {
    
#line 246
    [self setConnectionWithEsGobJmulticardConnectionApduConnection:[((id<EsGobJmulticardConnectionCwa14890Cwa14890Connection>) nil_chk(((id<EsGobJmulticardConnectionCwa14890Cwa14890Connection>) cast_check([self getConnection], EsGobJmulticardConnectionCwa14890Cwa14890Connection_class_())))) getSubConnection]];
    
#line 248
    EsGobJmulticardCardDnieDnieNfc_resetCard(self);
  }
  @catch (EsGobJmulticardConnectionApduConnectionException *e) {
    EsGobJmulticardJmcLogger_warningWithNSString_(JreStrcat("$@", @"Fallo en el reinicio del canal seguro: ", e));
  }
  return ret;
}


#line 256
- (void)resetCard {
  EsGobJmulticardCardDnieDnieNfc_resetCard(self);
}


#line 271
+ (EsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_PacePasswordType *)getPasswordTypeWithNSString:(NSString *)paceInitializationValue {
  return EsGobJmulticardCardDnieDnieNfc_getPasswordTypeWithNSString_(paceInitializationValue);
}


#line 282
+ (jboolean)isNumericWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs {
  return EsGobJmulticardCardDnieDnieNfc_isNumericWithJavaLangCharSequence_(cs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardConnectionApduConnection;", 0xa, 2, 3, 4, -1, -1, -1 },
    { NULL, "LEsGobJmulticardConnectionApduConnection;", 0x2, 2, 5, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, 9, 10, 6, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_PacePasswordType;", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithEsGobJmulticardConnectionApduConnection:withJavaxSecurityAuthCallbackPasswordCallback:withEsGobJmulticardCryptoHelper:withJavaxSecurityAuthCallbackCallbackHandler:);
  methods[1].selector = @selector(getCardName);
  methods[2].selector = @selector(getPaceConnectionWithEsGobJmulticardConnectionApduConnection:withJavaxSecurityAuthCallbackCallbackHandler:withEsGobJmulticardCryptoHelper:);
  methods[3].selector = @selector(getPaceConnectionWithEsGobJmulticardConnectionApduConnection:withEsGobJmulticardCryptoHelper_PaceChannelHelper:);
  methods[4].selector = @selector(openSecureChannelIfNotAlreadyOpened);
  methods[5].selector = @selector(openSecureChannelIfNotAlreadyOpenedWithBoolean:);
  methods[6].selector = @selector(signWithByteArray:withNSString:withEsGobJmulticardCardPrivateKeyReference:);
  methods[7].selector = @selector(resetCard);
  methods[8].selector = @selector(getPasswordTypeWithNSString:);
  methods[9].selector = @selector(isNumericWithJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "paceInitType", "LEsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_PacePasswordType;", .constantValue.asLong = 0, 0xa, -1, 15, -1, -1 },
    { "paceInitValue", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 16, -1, -1 },
  };
  static const void *ptrTable[] = { "LEsGobJmulticardConnectionApduConnection;LJavaxSecurityAuthCallbackPasswordCallback;LEsGobJmulticardCryptoHelper;LJavaxSecurityAuthCallbackCallbackHandler;", "LEsGobJmulticardCardIcaoIcaoException;LEsGobJmulticardConnectionApduConnectionException;", "getPaceConnection", "LEsGobJmulticardConnectionApduConnection;LJavaxSecurityAuthCallbackCallbackHandler;LEsGobJmulticardCryptoHelper;", "LEsGobJmulticardConnectionApduConnectionException;LEsGobJmulticardCardIcaoIcaoException;", "LEsGobJmulticardConnectionApduConnection;LEsGobJmulticardCryptoHelper_PaceChannelHelper;", "LEsGobJmulticardCardCryptoCardException;LEsGobJmulticardCardPinException;", "openSecureChannelIfNotAlreadyOpened", "Z", "sign", "[BLNSString;LEsGobJmulticardCardPrivateKeyReference;", "getPasswordType", "LNSString;", "isNumeric", "LJavaLangCharSequence;", &EsGobJmulticardCardDnieDnieNfc_paceInitType, &EsGobJmulticardCardDnieDnieNfc_paceInitValue };
  static const J2ObjcClassInfo _EsGobJmulticardCardDnieDnieNfc = { "DnieNfc", "es.gob.jmulticard.card.dnie", ptrTable, methods, fields, 7, 0x1, 10, 2, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardCardDnieDnieNfc;
}

@end


#line 51
void EsGobJmulticardCardDnieDnieNfc_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(EsGobJmulticardCardDnieDnieNfc *self, id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch) {
  EsGobJmulticardCardDnieDnie3_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(self, EsGobJmulticardCardDnieDnieNfc_getPaceConnectionWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackCallbackHandler_withEsGobJmulticardCryptoHelper_(
#line 56
  conn, ch, cryptoHlpr), pwc, cryptoHlpr, ch);
}


#line 51
EsGobJmulticardCardDnieDnieNfc *new_EsGobJmulticardCardDnieDnieNfc_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardDnieDnieNfc, initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_, conn, pwc, cryptoHlpr, ch)
}


#line 51
EsGobJmulticardCardDnieDnieNfc *create_EsGobJmulticardCardDnieDnieNfc_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardDnieDnieNfc, initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_, conn, pwc, cryptoHlpr, ch)
}


#line 64
id<EsGobJmulticardConnectionApduConnection> EsGobJmulticardCardDnieDnieNfc_getPaceConnectionWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackCallbackHandler_withEsGobJmulticardCryptoHelper_(id<EsGobJmulticardConnectionApduConnection> con, id<JavaxSecurityAuthCallbackCallbackHandler> ch, EsGobJmulticardCryptoHelper *cryptoHelper) {
  EsGobJmulticardCardDnieDnieNfc_initialize();
  
#line 69
  NSString *prompt = EsGobJmulticardCardCardMessages_getStringWithNSString_(@"DnieNFC.0");
  
#line 73
  id<JavaxSecurityAuthCallbackCallback> textInputCallback;
  JavaLangReflectMethod *m;
  @try {
    textInputCallback = (id<JavaxSecurityAuthCallbackCallback>) cast_check([((JavaLangReflectConstructor *) nil_chk(([((IOSClass *) nil_chk(IOSClass_forName_(@"javax.security.auth.callback.TextInputCallback"))) getConstructor:[IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]]))) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ prompt } count:1 type:NSObject_class_()]], JavaxSecurityAuthCallbackCallback_class_());
    m = [[((id<JavaxSecurityAuthCallbackCallback>) nil_chk(textInputCallback)) java_getClass] getMethod:@"getText" parameterTypes:[IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()]];
  }
  @catch (JavaLangClassNotFoundException *e) {
    
#line 86
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 87
    [EsGobJmulticardCardDnieDnieNfc_class_() getName],
#line 88
    @"getPaceConnection", JreStrcat("$@", @"No se ha encontrado la clase 'javax.security.auth.callback.TextInputCallback', se usara 'es.gob.jmulticard.callback.CustomTextInputCallback': ",
#line 89
    e));
    
#line 91
    textInputCallback = new_EsGobJmulticardCallbackCustomTextInputCallback_initWithNSString_(prompt);
    m = nil;
  }
  @catch (
#line 79
  JavaLangInstantiationException *e) {
    
#line 86
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 87
    [EsGobJmulticardCardDnieDnieNfc_class_() getName],
#line 88
    @"getPaceConnection", JreStrcat("$@", @"No se ha encontrado la clase 'javax.security.auth.callback.TextInputCallback', se usara 'es.gob.jmulticard.callback.CustomTextInputCallback': ",
#line 89
    e));
    
#line 91
    textInputCallback = new_EsGobJmulticardCallbackCustomTextInputCallback_initWithNSString_(prompt);
    m = nil;
  }
  @catch (
#line 79
  JavaLangIllegalAccessException *e) {
    
#line 86
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 87
    [EsGobJmulticardCardDnieDnieNfc_class_() getName],
#line 88
    @"getPaceConnection", JreStrcat("$@", @"No se ha encontrado la clase 'javax.security.auth.callback.TextInputCallback', se usara 'es.gob.jmulticard.callback.CustomTextInputCallback': ",
#line 89
    e));
    
#line 91
    textInputCallback = new_EsGobJmulticardCallbackCustomTextInputCallback_initWithNSString_(prompt);
    m = nil;
  }
  @catch (
#line 79
  JavaLangIllegalArgumentException *e) {
    
#line 86
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 87
    [EsGobJmulticardCardDnieDnieNfc_class_() getName],
#line 88
    @"getPaceConnection", JreStrcat("$@", @"No se ha encontrado la clase 'javax.security.auth.callback.TextInputCallback', se usara 'es.gob.jmulticard.callback.CustomTextInputCallback': ",
#line 89
    e));
    
#line 91
    textInputCallback = new_EsGobJmulticardCallbackCustomTextInputCallback_initWithNSString_(prompt);
    m = nil;
  }
  @catch (
#line 79
  JavaLangReflectInvocationTargetException *e) {
    
#line 86
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 87
    [EsGobJmulticardCardDnieDnieNfc_class_() getName],
#line 88
    @"getPaceConnection", JreStrcat("$@", @"No se ha encontrado la clase 'javax.security.auth.callback.TextInputCallback', se usara 'es.gob.jmulticard.callback.CustomTextInputCallback': ",
#line 89
    e));
    
#line 91
    textInputCallback = new_EsGobJmulticardCallbackCustomTextInputCallback_initWithNSString_(prompt);
    m = nil;
  }
  @catch (
#line 79
  JavaLangNoSuchMethodException *e) {
    
#line 86
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 87
    [EsGobJmulticardCardDnieDnieNfc_class_() getName],
#line 88
    @"getPaceConnection", JreStrcat("$@", @"No se ha encontrado la clase 'javax.security.auth.callback.TextInputCallback', se usara 'es.gob.jmulticard.callback.CustomTextInputCallback': ",
#line 89
    e));
    
#line 91
    textInputCallback = new_EsGobJmulticardCallbackCustomTextInputCallback_initWithNSString_(prompt);
    m = nil;
  }
  @catch (
#line 79
  JavaLangSecurityException *e) {
    
#line 86
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 87
    [EsGobJmulticardCardDnieDnieNfc_class_() getName],
#line 88
    @"getPaceConnection", JreStrcat("$@", @"No se ha encontrado la clase 'javax.security.auth.callback.TextInputCallback', se usara 'es.gob.jmulticard.callback.CustomTextInputCallback': ",
#line 89
    e));
    
#line 91
    textInputCallback = new_EsGobJmulticardCallbackCustomTextInputCallback_initWithNSString_(prompt);
    m = nil;
  }
  
#line 96
  EsGobJmulticardCardDnieDnieNfc_paceInitValue = nil;
  EsGobJmulticardCardDnieDnieNfc_paceInitType = nil;
  
#line 100
  @try {
    [((id<JavaxSecurityAuthCallbackCallbackHandler>) nil_chk(ch)) handleWithJavaxSecurityAuthCallbackCallbackArray:[IOSObjectArray newArrayWithObjects:(id[]){ textInputCallback } count:1 type:JavaxSecurityAuthCallbackCallback_class_()]];
  }
  @catch (JavaLangException *e) {
    @throw new_EsGobJmulticardConnectionPacePaceException_initWithNSString_withJavaLangThrowable_(@"Error obteniendo el CAN", e);
  }
  
#line 107
  if ([textInputCallback isKindOfClass:[EsGobJmulticardCallbackCustomTextInputCallback class]]) {
    EsGobJmulticardCardDnieDnieNfc_paceInitValue = [((EsGobJmulticardCallbackCustomTextInputCallback *) nil_chk(((EsGobJmulticardCallbackCustomTextInputCallback *) textInputCallback))) getText];
  }
  else if (m != nil) {
    @try {
      id o = [m invokeWithId:textInputCallback withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
      if (!([o isKindOfClass:[NSString class]])) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"El TextInputCallback ha devuelto un dato de tipo ",
#line 115
        (o == nil ? @"null" : [[o java_getClass] getName])));
      }
      
#line 118
      EsGobJmulticardCardDnieDnieNfc_paceInitValue = (NSString *) cast_chk(o, [NSString class]);
    }
    @catch (JavaLangSecurityException *e) {
      
#line 124
      @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"El TextInputCallback no tiene un metodo 'getText'", e);
    }
    @catch (
#line 120
    JavaLangIllegalAccessException *e) {
      
#line 124
      @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"El TextInputCallback no tiene un metodo 'getText'", e);
    }
    @catch (
#line 120
    JavaLangIllegalArgumentException *e) {
      
#line 124
      @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"El TextInputCallback no tiene un metodo 'getText'", e);
    }
    @catch (
#line 120
    JavaLangReflectInvocationTargetException *e) {
      
#line 124
      @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"El TextInputCallback no tiene un metodo 'getText'", e);
    }
  }
  else {
    
#line 129
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"El TextInputCallback no tiene un metodo 'getText'");
  }
  
#line 133
  EsGobJmulticardCardDnieDnieNfc_paceInitType = EsGobJmulticardCardDnieDnieNfc_getPasswordTypeWithNSString_(EsGobJmulticardCardDnieDnieNfc_paceInitValue);
  
#line 135
  if (EsGobJmulticardCardDnieDnieNfc_paceInitValue == nil || [EsGobJmulticardCardDnieDnieNfc_paceInitValue java_isEmpty]) {
    @throw new_EsGobJmulticardCardIcaoInvalidCanOrMrzException_initWithNSString_(@"El CAN/MRZ no puede ser nulo ni vacio");
  }
  
#line 139
  @try {
    id<EsGobJmulticardCardIcaoWirelessInitializer> paceInitializer;
    switch ([EsGobJmulticardCardDnieDnieNfc_paceInitType ordinal]) {
      case EsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_PacePasswordType_Enum_MRZ:
      paceInitializer = EsGobJmulticardCardIcaoWirelessInitializerMrz_deriveMrzWithNSString_withEsGobJmulticardCryptoHelper_(EsGobJmulticardCardDnieDnieNfc_paceInitValue, cryptoHelper);
      break;
      case EsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_PacePasswordType_Enum_CAN:
      paceInitializer = new_EsGobJmulticardCardIcaoWirelessInitializerCan_initWithNSString_(EsGobJmulticardCardDnieDnieNfc_paceInitValue);
      break;
      default:
      @throw new_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$@", @"Tipo de inicializador PACE no soportado: ", EsGobJmulticardCardDnieDnieNfc_paceInitType));
    }
    
#line 152
    EsGobJmulticardConnectionPaceSecureMessaging *sm = [((EsGobJmulticardCryptoHelper_PaceChannelHelper *) nil_chk([((EsGobJmulticardCryptoHelper *) nil_chk(cryptoHelper)) getPaceChannelHelperWithEsGobJmulticardAsn1IcaoCardAccess:new_EsGobJmulticardAsn1IcaoCardAccess_initWithEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm_withEsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam_withEsGobJmulticardDigestAlgorithm_(JreLoadEnum(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithm, PACE_ECDH_GM_AES_CBC_CMAC_128), JreLoadEnum(EsGobJmulticardAsn1IcaoCardAccess_PaceAlgorithmParam, BRAINPOOL_256_R1), JreLoadEnum(EsGobJmulticardDigestAlgorithm, SHA1)) withEsGobJmulticardApduIso7816fourPacePaceChat:
#line 158
    nil])) openPaceChannelWithByte:
#line 159
    (jbyte) (jint) 0x00 withEsGobJmulticardCardIcaoWirelessInitializer:paceInitializer withEsGobJmulticardConnectionApduConnection:con];
    
#line 161
    return new_EsGobJmulticardConnectionPacePaceConnection_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withEsGobJmulticardConnectionPaceSecureMessaging_(con, cryptoHelper, sm);
  }
  @catch (EsGobJmulticardCardIcaoInvalidCanOrMrzException *e) {
    
#line 166
    EsGobJmulticardCardDnieDnieNfc_paceInitValue = nil;
    EsGobJmulticardCardDnieDnieNfc_paceInitType = nil;
    
#line 170
    @throw e;
  }
}


#line 174
id<EsGobJmulticardConnectionApduConnection> EsGobJmulticardCardDnieDnieNfc_getPaceConnectionWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_PaceChannelHelper_(EsGobJmulticardCardDnieDnieNfc *self, id<EsGobJmulticardConnectionApduConnection> con, EsGobJmulticardCryptoHelper_PaceChannelHelper *pch) {
  
#line 177
  id<EsGobJmulticardCardIcaoWirelessInitializer> paceInitializer;
  switch ([EsGobJmulticardCardDnieDnieNfc_paceInitType ordinal]) {
    case EsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_PacePasswordType_Enum_MRZ:
    paceInitializer = EsGobJmulticardCardIcaoWirelessInitializerMrz_deriveMrzWithNSString_withEsGobJmulticardCryptoHelper_(EsGobJmulticardCardDnieDnieNfc_paceInitValue, [self getCryptoHelper]);
    break;
    case EsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_PacePasswordType_Enum_CAN:
    paceInitializer = new_EsGobJmulticardCardIcaoWirelessInitializerCan_initWithNSString_(EsGobJmulticardCardDnieDnieNfc_paceInitValue);
    break;
    default:
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$@", @"No se soporta el codigo de inicializacion de PACE: ", EsGobJmulticardCardDnieDnieNfc_paceInitType));
  }
  
#line 191
  EsGobJmulticardConnectionPaceSecureMessaging *sm = [((EsGobJmulticardCryptoHelper_PaceChannelHelper *) nil_chk(pch)) openPaceChannelWithByte:(jbyte) (jint) 0x00 withEsGobJmulticardCardIcaoWirelessInitializer:paceInitializer withEsGobJmulticardConnectionApduConnection:con];
  
#line 194
  return new_EsGobJmulticardConnectionPacePaceConnection_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withEsGobJmulticardConnectionPaceSecureMessaging_(con, [self getCryptoHelper], sm);
}


#line 256
void EsGobJmulticardCardDnieDnieNfc_resetCard(EsGobJmulticardCardDnieDnieNfc *self) {
  @try {
    [self selectMasterFile];
  }
  @catch (JavaLangException *e1) {
    
#line 263
    EsGobJmulticardJmcLogger_infoWithNSString_withNSString_withNSString_(
#line 264
    [EsGobJmulticardCardDnieDnieNfc_class_() getName],
#line 265
    @"resetCard", JreStrcat("$@", @"Paso de canal seguro a no seguro al reiniciar: ",
#line 266
    e1));
  }
}


#line 271
EsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_PacePasswordType *EsGobJmulticardCardDnieDnieNfc_getPasswordTypeWithNSString_(NSString *paceInitializationValue) {
  EsGobJmulticardCardDnieDnieNfc_initialize();
  
#line 272
  if (EsGobJmulticardCardDnieDnieNfc_isNumericWithJavaLangCharSequence_(paceInitializationValue) && [((NSString *) nil_chk(paceInitializationValue)) java_length] <= 6) {
    return JreLoadEnum(EsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_PacePasswordType, CAN);
  }
  return JreLoadEnum(EsGobJmulticardApduIso7816fourPaceMseSetPaceAlgorithmApduCommand_PacePasswordType, MRZ);
}


#line 282
jboolean EsGobJmulticardCardDnieDnieNfc_isNumericWithJavaLangCharSequence_(id<JavaLangCharSequence> cs) {
  EsGobJmulticardCardDnieDnieNfc_initialize();
  
#line 283
  if (cs == nil || [cs java_length] == 0) {
    return false;
  }
  jint sz = [cs java_length];
  for (jint i = 0; i < sz; i++) {
    if (!JavaLangCharacter_isDigitWithChar_([cs charAtWithInt:i])) {
      return false;
    }
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardDnieDnieNfc)
