//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/Dnie3.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobJmulticardCardDnieDnie3")
#ifdef RESTRICT_EsGobJmulticardCardDnieDnie3
#define INCLUDE_ALL_EsGobJmulticardCardDnieDnie3 0
#else
#define INCLUDE_ALL_EsGobJmulticardCardDnieDnie3 1
#endif
#undef RESTRICT_EsGobJmulticardCardDnieDnie3

#if !defined (EsGobJmulticardCardDnieDnie3_) && (INCLUDE_ALL_EsGobJmulticardCardDnieDnie3 || defined(INCLUDE_EsGobJmulticardCardDnieDnie3))
#define EsGobJmulticardCardDnieDnie3_

#define RESTRICT_EsGobJmulticardCardDnieDnie 1
#define INCLUDE_EsGobJmulticardCardDnieDnie 1
#include "es/gob/jmulticard/card/dnie/Dnie.h"

#define RESTRICT_EsGobJmulticardCardIcaoMrtdLds1 1
#define INCLUDE_EsGobJmulticardCardIcaoMrtdLds1 1
#include "es/gob/jmulticard/card/icao/MrtdLds1.h"

@class EsGobJmulticardAsn1IcaoAdditionalPersonalDetails;
@class EsGobJmulticardAsn1IcaoCom;
@class EsGobJmulticardAsn1IcaoOptionalDetails;
@class EsGobJmulticardAsn1IcaoSecurityOptions;
@class EsGobJmulticardAsn1IcaoSod;
@class EsGobJmulticardAsn1IcaoSubjectFacePhoto;
@class EsGobJmulticardAsn1IcaoSubjectSignaturePhoto;
@class EsGobJmulticardCardIcaoMrz;
@class EsGobJmulticardCryptoHelper;
@class IOSByteArray;
@class IOSObjectArray;
@class JavaxSecurityAuthCallbackPasswordCallback;
@protocol EsGobJmulticardConnectionApduConnection;
@protocol JavaxSecurityAuthCallbackCallbackHandler;

/*!
 @brief DNI Electr&oacute;nico versi&oacute;n 3&#46;0.
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s.
 */
@interface EsGobJmulticardCardDnieDnie3 : EsGobJmulticardCardDnieDnie < EsGobJmulticardCardIcaoMrtdLds1 >

#pragma mark Public

- (IOSObjectArray *)checkSecurityObjects;

- (IOSByteArray *)getAtrInfo;

- (IOSByteArray *)getCardAccess;

- (NSString *)getCardName;

- (IOSByteArray *)getCardSecurity;

- (EsGobJmulticardAsn1IcaoCom *)getCom;

- (EsGobJmulticardCardIcaoMrz *)getDg1;

- (IOSByteArray *)getDg10;

- (EsGobJmulticardAsn1IcaoAdditionalPersonalDetails *)getDg11;

- (IOSByteArray *)getDg12;

- (EsGobJmulticardAsn1IcaoOptionalDetails *)getDg13;

- (EsGobJmulticardAsn1IcaoSecurityOptions *)getDg14;

- (IOSByteArray *)getDg15;

- (IOSByteArray *)getDg16;

- (EsGobJmulticardAsn1IcaoSubjectFacePhoto *)getDg2;

- (IOSByteArray *)getDg3;

- (IOSByteArray *)getDg4;

- (IOSByteArray *)getDg5;

- (IOSByteArray *)getDg6;

- (EsGobJmulticardAsn1IcaoSubjectSignaturePhoto *)getDg7;

- (IOSByteArray *)getDg8;

- (IOSByteArray *)getDg9;

- (IOSByteArray *)getDir;

- (jint)getPinRetriesLeft;

- (EsGobJmulticardAsn1IcaoSod *)getSod;

/*!
 @brief Abre y establece el canal seguro de PIN.
 @return Nueva conexi&oacute;n establecida.
 @throw CryptoCardExceptionSi hay problemas en la apertura de canal.
 */
- (id<EsGobJmulticardConnectionApduConnection>)openPinChannel;

- (void)openSecureChannelIfNotAlreadyOpened;

- (void)openSecureChannelIfNotAlreadyOpenedWithBoolean:(jboolean)doChv;

/*!
 @brief Abre y establece el canal seguro de usuario.
 @return Nueva conexi&oacute;n establecida.
 @throw CryptoCardExceptionSi hay problemas en la apertura de canal.
 */
- (id<EsGobJmulticardConnectionApduConnection>)openUserChannel;

#pragma mark Protected

/*!
 @brief Construye una clase que representa un DNIe 3&#46;0.
 @param conn Conexi &oacute; n con la tarjeta.
 @param pwc <i> PasswordCallback </i>  para obtener el PIN del DNIe.
 @param cryptoHlpr Funcionalidades criptogr &aacute; ficas de utilidad que pueden                    variar entre m &aacute; quinas virtuales.
 @param ch Gestor de las  <i> Callbacks </i>  (PIN, confirmaci &oacute; n, etc.).
 @throw ApduConnectionExceptionSi la conexi&oacute;n con la tarjeta se proporciona
                                  cerrada y no es posible abrirla.
 */
- (instancetype)initWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                  withJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)pwc
                                withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHlpr
                   withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)ch;

- (jboolean)needsPinForLoadingCerts;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobJmulticardCardDnieDnie3)

FOUNDATION_EXPORT void EsGobJmulticardCardDnieDnie3_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(EsGobJmulticardCardDnieDnie3 *self, id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch);

FOUNDATION_EXPORT EsGobJmulticardCardDnieDnie3 *new_EsGobJmulticardCardDnieDnie3_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobJmulticardCardDnieDnie3 *create_EsGobJmulticardCardDnieDnie3_initWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardCardDnieDnie3)

#endif

#pragma pop_macro("INCLUDE_ALL_EsGobJmulticardCardDnieDnie3")
