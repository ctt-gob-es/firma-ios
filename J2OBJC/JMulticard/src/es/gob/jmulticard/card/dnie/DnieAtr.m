//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/DnieAtr.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/card/Atr.h"
#include "es/gob/jmulticard/card/dnie/DnieAtr.h"
#include "java/lang/StringBuilder.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/card/dnie/DnieAtr must be compiled with ARC (-fobjc-arc)"
#endif

inline jlong EsGobJmulticardCardDnieDnieAtr_get_serialVersionUID(void);
#define EsGobJmulticardCardDnieDnieAtr_serialVersionUID -4364467785373401604LL
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardCardDnieDnieAtr, serialVersionUID, jlong)

inline NSString *EsGobJmulticardCardDnieDnieAtr_get_UNKNOWN(void);
static NSString *EsGobJmulticardCardDnieDnieAtr_UNKNOWN = @"desconocido";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardDnieDnieAtr, UNKNOWN, NSString *)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/DnieAtr.java"


#line 8
@implementation EsGobJmulticardCardDnieDnieAtr


#line 16
- (instancetype)initWithEsGobJmulticardCardAtr:(EsGobJmulticardCardAtr *)cardAtr {
  EsGobJmulticardCardDnieDnieAtr_initWithEsGobJmulticardCardAtr_(self, cardAtr);
  return self;
}


#line 20
- (NSString *)description {
  
#line 23
  if (((IOSByteArray *) nil_chk(atrBytes_))->size_ != 20 || IOSByteArray_Get(atrBytes_, 0) != (jbyte) (jint) 0x3B) {
    return JreStrcat("$$", @"ATR de la tarjeta: ", [super description]);
  }
  
#line 27
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(@"ATR del DNIe: ");
  (void) [sb appendWithNSString:[super description]];
  (void) [sb appendWithChar:0x000a];
  
#line 31
  (void) [sb appendWithNSString:@"  Vpp (voltaje de programacion): "];
  (void) [sb appendWithInt:EsGobJmulticardHexUtils_getShortWithByteArray_withInt_([IOSByteArray newArrayWithBytes:(jbyte[]){ IOSByteArray_Get(atrBytes_, 3) } count:1], 0)];
  if (IOSByteArray_Get(atrBytes_, 3) == (jbyte) (jint) 0x00) {
    (void) [sb appendWithNSString:@" (no requerido)"];
  }
  (void) [sb appendWithChar:0x000a];
  
#line 38
  (void) [sb appendWithNSString:@"  Tiempo de espera adicional: "];
  (void) [sb appendWithInt:EsGobJmulticardHexUtils_getShortWithByteArray_withInt_([IOSByteArray newArrayWithBytes:(jbyte[]){ IOSByteArray_Get(atrBytes_, 4) } count:1], 0)];
  if (IOSByteArray_Get(atrBytes_, 4) == (jbyte) (jint) 0x00) {
    (void) [sb appendWithNSString:@" (no requerido)"];
  }
  (void) [sb appendWithChar:0x000a];
  
#line 45
  (void) [sb appendWithNSString:@"  Nombre de la tarjeta: "];
  (void) [sb appendWithNSString:[NSString java_stringWithBytes:[IOSByteArray newArrayWithBytes:(jbyte[]){ IOSByteArray_Get(atrBytes_, 7), IOSByteArray_Get(atrBytes_, 8), IOSByteArray_Get(atrBytes_, 9), IOSByteArray_Get(atrBytes_, 10) } count:4]]];
  (void) [sb appendWithChar:0x000a];
  
#line 49
  (void) [sb appendWithNSString:@"  Fabricante de la tecnologia 'Match-on-Card' incorporada: "];
  if (IOSByteArray_Get(atrBytes_, 11) == (jbyte) (jint) 0x10) {
    (void) [sb appendWithNSString:@"Sagem / Morpho"];
  }
  else if (IOSByteArray_Get(atrBytes_, 11) == (jbyte) (jint) 0x20) {
    (void) [sb appendWithNSString:@"Siemens / Atos"];
  }
  else {
    (void) [sb appendWithNSString:EsGobJmulticardCardDnieDnieAtr_UNKNOWN];
  }
  (void) [sb appendWithChar:0x000a];
  
#line 61
  (void) [sb appendWithNSString:@"  Fabricante del chip: "];
  if (IOSByteArray_Get(atrBytes_, 12) == (jbyte) (jint) 0x01) {
    (void) [sb appendWithNSString:@"Infineon"];
  }
  else if (IOSByteArray_Get(atrBytes_, 12) == (jbyte) (jint) 0x02) {
    (void) [sb appendWithNSString:@"STMicroelectronics"];
  }
  else {
    (void) [sb appendWithNSString:EsGobJmulticardCardDnieDnieAtr_UNKNOWN];
  }
  (void) [sb appendWithChar:0x000a];
  
#line 73
  (void) [sb appendWithNSString:@"  Tipo de chip: "];
  if (IOSByteArray_Get(atrBytes_, 13) == (jbyte) (jint) 0x01 && IOSByteArray_Get(atrBytes_, 14) == (jbyte) (jint) 0x55) {
    (void) [sb appendWithNSString:@"SLE78CLX408AP"];
  }
  else if (IOSByteArray_Get(atrBytes_, 13) == (jbyte) (jint) 0x4C && IOSByteArray_Get(atrBytes_, 14) == (jbyte) (jint) 0x34) {
    (void) [sb appendWithNSString:@"19WL34"];
  }
  else {
    (void) [sb appendWithNSString:EsGobJmulticardCardDnieDnieAtr_UNKNOWN];
  }
  (void) [sb appendWithChar:0x000a];
  
#line 85
  (void) [sb appendWithNSString:@"  Version del sistema operativo: "];
  (void) [sb appendWithNSString:EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_([IOSByteArray newArrayWithBytes:(jbyte[]){ IOSByteArray_Get(atrBytes_, 15) } count:1], false)];
  (void) [sb appendWithChar:'.'];
  (void) [sb appendWithNSString:EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_([IOSByteArray newArrayWithBytes:(jbyte[]){ IOSByteArray_Get(atrBytes_, 16) } count:1], false)];
  (void) [sb appendWithChar:0x000a];
  
#line 91
  (void) [sb appendWithNSString:@"  Fase del ciclo de vida: "];
  switch (IOSByteArray_Get(atrBytes_, 17)) {
    case (jbyte) (jint) 0x00:
    (void) [sb appendWithNSString:@"prepersonalizacion"];
    break;
    case (jbyte) (jint) 0x01:
    (void) [sb appendWithNSString:@"personalizacion"];
    break;
    case (jbyte) (jint) 0x03:
    (void) [sb appendWithNSString:@"usuario"];
    break;
    case (jbyte) (jint) 0x0f:
    (void) [sb appendWithNSString:@"final"];
    break;
    default:
    (void) [sb appendWithNSString:EsGobJmulticardCardDnieDnieAtr_UNKNOWN];
  }
  (void) [sb appendWithChar:0x000a];
  
#line 110
  (void) [sb appendWithNSString:@"  Estado: "];
  if (IOSByteArray_Get(atrBytes_, 18) == (jbyte) (jint) 0x90 && IOSByteArray_Get(atrBytes_, 19) == (jint) 0x00) {
    (void) [sb appendWithNSString:@"correcto"];
  }
  else if (IOSByteArray_Get(atrBytes_, 18) == (jbyte) (jint) 0x65 && IOSByteArray_Get(atrBytes_, 19) == (jint) 0x81) {
    (void) [sb appendWithNSString:@"memoria volatil borrada"];
  }
  else {
    (void) [sb appendWithNSString:EsGobJmulticardCardDnieDnieAtr_UNKNOWN];
  }
  
#line 121
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithEsGobJmulticardCardAtr:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EsGobJmulticardCardDnieDnieAtr_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "UNKNOWN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "LEsGobJmulticardCardAtr;", "toString", &EsGobJmulticardCardDnieDnieAtr_UNKNOWN };
  static const J2ObjcClassInfo _EsGobJmulticardCardDnieDnieAtr = { "DnieAtr", "es.gob.jmulticard.card.dnie", ptrTable, methods, fields, 7, 0x11, 2, 2, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardCardDnieDnieAtr;
}

@end


#line 16
void EsGobJmulticardCardDnieDnieAtr_initWithEsGobJmulticardCardAtr_(EsGobJmulticardCardDnieDnieAtr *self, EsGobJmulticardCardAtr *cardAtr) {
  EsGobJmulticardCardAtr_initWithByteArray_withByteArray_(self, [((EsGobJmulticardCardAtr *) nil_chk(cardAtr)) getBytes], [cardAtr getMask]);
}


#line 16
EsGobJmulticardCardDnieDnieAtr *new_EsGobJmulticardCardDnieDnieAtr_initWithEsGobJmulticardCardAtr_(EsGobJmulticardCardAtr *cardAtr) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardDnieDnieAtr, initWithEsGobJmulticardCardAtr_, cardAtr)
}


#line 16
EsGobJmulticardCardDnieDnieAtr *create_EsGobJmulticardCardDnieDnieAtr_initWithEsGobJmulticardCardAtr_(EsGobJmulticardCardAtr *cardAtr) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardDnieDnieAtr, initWithEsGobJmulticardCardAtr_, cardAtr)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardDnieDnieAtr)
