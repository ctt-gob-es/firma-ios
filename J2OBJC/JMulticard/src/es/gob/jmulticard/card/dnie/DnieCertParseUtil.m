//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/DnieCertParseUtil.java
//

#include "J2ObjC_source.h"
#include "es/gob/jmulticard/JmcLogger.h"
#include "es/gob/jmulticard/card/dnie/DnieCertParseUtil.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Locale.h"
#include "javax/security/auth/x500/X500Principal.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/card/dnie/DnieCertParseUtil must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardCardDnieDnieCertParseUtil () {
 @public
  NSString *name_;
  NSString *sn1_;
  NSString *sn2_;
  NSString *num_;
}

/*!
 @brief Obtiene el nombre com&uacute;n (Common Name, CN) de un <i>Principal</i> X&#46;400.
 Si no se encuentra el CN, se devuelve la unidad organizativa (Organization Unit, OU).
 @param principal <i> Principal </i>  del cual queremos obtener el nombre com &uacute; n
 @return Nombre com&uacute;n (Common Name, CN) de un <i>Principal</i> X&#46;400.
 */
+ (NSString *)getCNWithNSString:(NSString *)principal;

/*!
 @brief Recupera el valor de un RDN (<i>Relative Distinguished Name</i>) de un principal.
 El valor de retorno no incluye el nombre del RDN, el igual, ni las posibles comillas que envuelvan el valor.
  La funci&oacute;n no es sensible a la capitalizaci&oacute;n del RDN.
  Si no se encuentra, se devuelve <code>null</code>.
 @param rdn RDN que deseamos encontrar.
 @param principal Principal del que extraer el RDN (seg &uacute; n la  <a href="http://www.ietf.org/rfc/rfc4514.txt"> RFC 4514 </a> ).
 @return Valor del RDN indicado o <code>null</code> si no se encuentra.
 */
+ (NSString *)getRdnValueFromLdapNameWithNSString:(NSString *)rdn
                                     withNSString:(NSString *)principal;

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardCardDnieDnieCertParseUtil, name_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardDnieDnieCertParseUtil, sn1_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardDnieDnieCertParseUtil, sn2_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardDnieDnieCertParseUtil, num_, NSString *)

__attribute__((unused)) static NSString *EsGobJmulticardCardDnieDnieCertParseUtil_getCNWithNSString_(NSString *principal);

__attribute__((unused)) static NSString *EsGobJmulticardCardDnieDnieCertParseUtil_getRdnValueFromLdapNameWithNSString_withNSString_(NSString *rdn, NSString *principal);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/DnieCertParseUtil.java"


#line 10
@implementation EsGobJmulticardCardDnieDnieCertParseUtil


#line 23
- (instancetype)initWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)c {
  EsGobJmulticardCardDnieDnieCertParseUtil_initWithJavaSecurityCertX509Certificate_(self, c);
  return self;
}


#line 50
- (NSString *)getName {
  return name_;
}


#line 56
- (NSString *)getSurname1 {
  return sn1_;
}


#line 62
- (NSString *)getSurname2 {
  return sn2_;
}


#line 68
- (NSString *)getNumber {
  return num_;
}


#line 76
+ (NSString *)getCNWithNSString:(NSString *)principal {
  return EsGobJmulticardCardDnieDnieCertParseUtil_getCNWithNSString_(principal);
}


#line 102
- (NSString *)description {
  
#line 104
  return JreStrcat("$$$$$$$$", @"Nombre: ",
#line 105
  name_, @"\nPrimer apellido: ",
#line 106
  sn1_, @"\nSegundo apellido: ",
#line 107
  sn2_, @"\nNumero: ",
#line 108
  num_);
}


#line 118
+ (NSString *)getRdnValueFromLdapNameWithNSString:(NSString *)rdn
                                     withNSString:(NSString *)principal {
  return EsGobJmulticardCardDnieDnieCertParseUtil_getRdnValueFromLdapNameWithNSString_withNSString_(rdn, principal);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaSecurityCertX509Certificate:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(getSurname1);
  methods[3].selector = @selector(getSurname2);
  methods[4].selector = @selector(getNumber);
  methods[5].selector = @selector(getCNWithNSString:);
  methods[6].selector = @selector(description);
  methods[7].selector = @selector(getRdnValueFromLdapNameWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sn1_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sn2_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "num_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecurityCertX509Certificate;", "getCN", "LNSString;", "toString", "getRdnValueFromLdapName", "LNSString;LNSString;" };
  static const J2ObjcClassInfo _EsGobJmulticardCardDnieDnieCertParseUtil = { "DnieCertParseUtil", "es.gob.jmulticard.card.dnie", ptrTable, methods, fields, 7, 0x11, 8, 4, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardCardDnieDnieCertParseUtil;
}

@end


#line 23
void EsGobJmulticardCardDnieDnieCertParseUtil_initWithJavaSecurityCertX509Certificate_(EsGobJmulticardCardDnieDnieCertParseUtil *self, JavaSecurityCertX509Certificate *c) {
  NSObject_init(self);
  
#line 24
  if (c == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El certificado no puede ser nulo");
  }
  NSString *dn = [((JavaxSecurityAuthX500X500Principal *) nil_chk([c getSubjectX500Principal])) description];
  NSString *cn = EsGobJmulticardCardDnieDnieCertParseUtil_getCNWithNSString_(dn);
  if ([((NSString *) nil_chk(cn)) java_contains:@"("]) {
    cn = [((NSString *) nil_chk([cn java_substring:0 endIndex:[cn java_indexOf:'(']])) java_trim];
  }
  self->name_ = [((NSString *) nil_chk([((NSString *) nil_chk(cn)) java_substring:[cn java_indexOf:','] + 1])) java_trim];
  self->sn1_ = EsGobJmulticardCardDnieDnieCertParseUtil_getRdnValueFromLdapNameWithNSString_withNSString_(@"SN", dn);
  if (self->sn1_ == nil) {
    self->sn1_ = EsGobJmulticardCardDnieDnieCertParseUtil_getRdnValueFromLdapNameWithNSString_withNSString_(@"SURNAME", dn);
  }
  if (self->sn1_ == nil) {
    
#line 39
    self->sn1_ = EsGobJmulticardCardDnieDnieCertParseUtil_getRdnValueFromLdapNameWithNSString_withNSString_(@"OID.2.5.4.4", dn);
  }
  if (self->sn1_ == nil) {
    self->sn1_ = EsGobJmulticardCardDnieDnieCertParseUtil_getRdnValueFromLdapNameWithNSString_withNSString_(@"2.5.4.4", dn);
  }
  self->sn2_ = [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([cn java_replace:@"," withSequence:@""])) java_replace:self->name_ withSequence:@""])) java_replace:self->sn1_ withSequence:@""])) java_trim];
  self->num_ = EsGobJmulticardCardDnieDnieCertParseUtil_getRdnValueFromLdapNameWithNSString_withNSString_(@"SERIALNUMBER", dn);
}


#line 23
EsGobJmulticardCardDnieDnieCertParseUtil *new_EsGobJmulticardCardDnieDnieCertParseUtil_initWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *c) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardDnieDnieCertParseUtil, initWithJavaSecurityCertX509Certificate_, c)
}


#line 23
EsGobJmulticardCardDnieDnieCertParseUtil *create_EsGobJmulticardCardDnieDnieCertParseUtil_initWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *c) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardDnieDnieCertParseUtil, initWithJavaSecurityCertX509Certificate_, c)
}


#line 76
NSString *EsGobJmulticardCardDnieDnieCertParseUtil_getCNWithNSString_(NSString *principal) {
  EsGobJmulticardCardDnieDnieCertParseUtil_initialize();
  
#line 77
  if (principal == nil) {
    return nil;
  }
  
#line 81
  NSString *rdn = EsGobJmulticardCardDnieDnieCertParseUtil_getRdnValueFromLdapNameWithNSString_withNSString_(@"cn", principal);
  if (rdn == nil) {
    rdn = EsGobJmulticardCardDnieDnieCertParseUtil_getRdnValueFromLdapNameWithNSString_withNSString_(@"ou", principal);
  }
  
#line 86
  if (rdn != nil) {
    return rdn;
  }
  
#line 90
  jint i = [principal java_indexOf:'='];
  if (i != -1) {
    EsGobJmulticardJmcLogger_warningWithNSString_(
#line 93
    @"No se ha podido obtener el CN ni la OU, se devolvera el fragmento mas significativo");
    
#line 95
    return EsGobJmulticardCardDnieDnieCertParseUtil_getRdnValueFromLdapNameWithNSString_withNSString_([principal java_substring:0 endIndex:i], principal);
  }
  
#line 98
  EsGobJmulticardJmcLogger_warningWithNSString_(@"Principal no valido, se devolvera el valor de entrada");
  return principal;
}


#line 118
NSString *EsGobJmulticardCardDnieDnieCertParseUtil_getRdnValueFromLdapNameWithNSString_withNSString_(NSString *rdn, NSString *principal) {
  EsGobJmulticardCardDnieDnieCertParseUtil_initialize();
  jint offset1 = 0;
  while ((offset1 = [((NSString *) nil_chk([((NSString *) nil_chk(principal)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_indexOfString:[((NSString *) nil_chk(rdn)) lowercaseString] fromIndex:offset1]) != -1) {
    
#line 123
    if (offset1 > 0 && [principal charAtWithInt:offset1 - 1] != ',' && [principal charAtWithInt:offset1 - 1] != ' ') {
      offset1++;
      continue;
    }
    
#line 128
    offset1 += [rdn java_length];
    while (offset1 < [principal java_length] && [principal charAtWithInt:offset1] == ' ') {
      offset1++;
    }
    
#line 133
    if (offset1 >= [principal java_length]) {
      return nil;
    }
    
#line 137
    if ([principal charAtWithInt:offset1] != '=') {
      continue;
    }
    
#line 141
    offset1++;
    while (offset1 < [principal java_length] && [principal charAtWithInt:offset1] == ' ') {
      offset1++;
    }
    
#line 146
    if (offset1 >= [principal java_length]) {
      return @"";
    }
    
#line 150
    jint offset2;
    if ([principal charAtWithInt:offset1] == ',') {
      return @"";
    }
    if ([principal charAtWithInt:offset1] == '"') {
      offset1++;
      if (offset1 >= [principal java_length]) {
        return @"";
      }
      
#line 160
      offset2 = [principal java_indexOf:'"' fromIndex:offset1];
      if (offset2 == offset1) {
        return @"";
      }
      if (offset2 != -1) {
        return [principal java_substring:offset1 endIndex:offset2];
      }
      return [principal java_substring:offset1];
    }
    offset2 = [principal java_indexOf:',' fromIndex:offset1];
    if (offset2 != -1) {
      return [((NSString *) nil_chk([principal java_substring:offset1 endIndex:offset2])) java_trim];
    }
    return [((NSString *) nil_chk([principal java_substring:offset1])) java_trim];
  }
  
#line 176
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardDnieDnieCertParseUtil)
