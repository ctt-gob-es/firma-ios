//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/dnie/DnieFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobJmulticardCardDnieDnieFactory")
#ifdef RESTRICT_EsGobJmulticardCardDnieDnieFactory
#define INCLUDE_ALL_EsGobJmulticardCardDnieDnieFactory 0
#else
#define INCLUDE_ALL_EsGobJmulticardCardDnieDnieFactory 1
#endif
#undef RESTRICT_EsGobJmulticardCardDnieDnieFactory

#if !defined (EsGobJmulticardCardDnieDnieFactory_) && (INCLUDE_ALL_EsGobJmulticardCardDnieDnieFactory || defined(INCLUDE_EsGobJmulticardCardDnieDnieFactory))
#define EsGobJmulticardCardDnieDnieFactory_

@class EsGobJmulticardCardDnieDnie3Cwa14890Constants;
@class EsGobJmulticardCardDnieDnie;
@class EsGobJmulticardCardDnieDnieNfc;
@class EsGobJmulticardCryptoHelper;
@class JavaxSecurityAuthCallbackPasswordCallback;
@protocol EsGobJmulticardCardIcaoMrtdLds1;
@protocol EsGobJmulticardConnectionApduConnection;
@protocol JavaxSecurityAuthCallbackCallbackHandler;

/*!
 @brief Factor&iacute;a para la obtenci&oacute;n de DNIe.
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s.
 */
@interface EsGobJmulticardCardDnieDnieFactory : NSObject

#pragma mark Public

/*!
 @brief Obtiene la clase de DNIe apropiada (seg&uacute;n su ATR).
 @param conn Conexi &oacute; n con el lector de tarjetas.
 @param pwc <i> PasswordCallback </i>  para la obtenci &oacute; n del PIN.
 @param cryptoHelper Clase de apoyo para operaciones criptogr &aacute; ficas.
 @param ch Gestor de  <i> callbacks </i>  para la obtenci &oacute; n de datos adicionales por parte            del titular del DNIe.
 @return Clase de DNIe apropiada (seg&uacute;n su ATR).
 @throw InvalidCardExceptionSi se ha detectado al menos una tarjeta, pero no es un DNIe.
 @throw BurnedDnieCardExceptionSi se ha detectado un DNIe con su memoria vol&aacute;til borrada.
 @throw ApduConnectionExceptionSi no se puede conectar con el lector de tarjetas.
 */
+ (EsGobJmulticardCardDnieDnie *)getDnieWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                                      withJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)pwc
                                                    withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHelper
                                       withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)ch;

/*!
 @brief Obtiene la clase de DNIe apropiada (seg&uacute;n su ATR).
 @param conn Conexi &oacute; n con el lector de tarjetas.
 @param pwc <i> PasswordCallback </i>  para la obtenci &oacute; n del PIN.
 @param cryptoHelper Clase de apoyo para operaciones criptogr &aacute; ficas.
 @param ch Gestor de  <i> callbacks </i>  para la obtenci &oacute; n de datos adicionales por parte            del titular del DNIe (como el PIN y el CAN).
 @param includeCloneCards Si se indica  <code> true </code> , se tienen en cuenta tambi &eacute; n las tarjetas que,                           sin ser DNIe, son compatibles (como TIF o CERES TC 4.30), mientras que, si se indica                            <code> false </code> , solo se tienen en cuenta DNIe genuinos.
 @return Clase de DNIe apropiada (seg&uacute;n su ATR).
 @throw InvalidCardExceptionSi se ha detectado al menos una tarjeta, pero no es un DNIe.
 @throw BurnedDnieCardExceptionSi se ha detectado un DNIe con su memoria vol&aacute;til borrada.
 @throw ApduConnectionExceptionSi no se puede conectar con el lector de tarjetas.
 */
+ (EsGobJmulticardCardDnieDnie *)getDnieWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                                      withJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)pwc
                                                    withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHelper
                                       withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)ch
                                                                        withBoolean:(jboolean)includeCloneCards;

/*!
 @brief Obtiene las constantes de canal de usuario CWA-14890 de un DNIe 3.0.
 @param idesp IDESP del DNIe para el cual se desea obtener las constantes de canal.
 @return Constantes de canal de usuario CWA-14890 de un DNIe 3.0.
 */
+ (EsGobJmulticardCardDnieDnie3Cwa14890Constants *)getDnie3UsrCwa14890ConstantsWithNSString:(NSString *)idesp;

/*!
 @brief Obtiene un DNIe por NFC.
 @param conn Conexi &oacute; n con el lector de tarjetas NFC.
 @param cryptoHelper Clase de apoyo para operaciones criptogr &aacute; ficas.
 @param ch Gestor de  <i> callbacks </i>  para la obtenci &oacute; n de datos adicionales por parte            del titular del DNIe (como el PIN y el CAN).
 @return Clase de DNIe por NFC.
 @throw InvalidCardExceptionSi se ha detectado al menos una tarjeta, pero no es un DNIe.
 @throw BurnedDnieCardExceptionSi se ha detectado un DNIe con su memoria vol&aacute;til borrada.
 @throw ApduConnectionExceptionSi no se puede conectar con el lector de tarjetas NFC.
 */
+ (EsGobJmulticardCardDnieDnieNfc *)getDnieNfcWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                                                          withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHelper
                                             withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)ch;

/*!
 @brief Obtiene un eMRTD por NFC.
 @param conn Conexi &oacute; n con el lector de tarjetas NFC.
 @param cryptoHelper Clase de apoyo para operaciones criptogr &aacute; ficas.
 @param ch Gestor de  <i> callbacks </i>  para la obtenci &oacute; n del CAN o la MRZ.
 @return Clase de eMRTD por NFC.
 @throw ApduConnectionExceptionSi no se puede conectar con el lector de tarjetas NFC.
 */
+ (id<EsGobJmulticardCardIcaoMrtdLds1>)getEmrtdNfcWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                                                              withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHelper
                                                 withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)ch;

#pragma mark Package-Private

+ (EsGobJmulticardCardDnieDnie3Cwa14890Constants *)getDnie3PinCwa14890ConstantsWithNSString:(NSString *)idesp;

@end

J2OBJC_STATIC_INIT(EsGobJmulticardCardDnieDnieFactory)

FOUNDATION_EXPORT EsGobJmulticardCardDnieDnie *EsGobJmulticardCardDnieDnieFactory_getDnieWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHelper, id<JavaxSecurityAuthCallbackCallbackHandler> ch);

FOUNDATION_EXPORT EsGobJmulticardCardDnieDnieNfc *EsGobJmulticardCardDnieDnieFactory_getDnieNfcWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, EsGobJmulticardCryptoHelper *cryptoHelper, id<JavaxSecurityAuthCallbackCallbackHandler> ch);

FOUNDATION_EXPORT id<EsGobJmulticardCardIcaoMrtdLds1> EsGobJmulticardCardDnieDnieFactory_getEmrtdNfcWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, EsGobJmulticardCryptoHelper *cryptoHelper, id<JavaxSecurityAuthCallbackCallbackHandler> ch);

FOUNDATION_EXPORT EsGobJmulticardCardDnieDnie *EsGobJmulticardCardDnieDnieFactory_getDnieWithEsGobJmulticardConnectionApduConnection_withJavaxSecurityAuthCallbackPasswordCallback_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_withBoolean_(id<EsGobJmulticardConnectionApduConnection> conn, JavaxSecurityAuthCallbackPasswordCallback *pwc, EsGobJmulticardCryptoHelper *cryptoHelper, id<JavaxSecurityAuthCallbackCallbackHandler> ch, jboolean includeCloneCards);

FOUNDATION_EXPORT EsGobJmulticardCardDnieDnie3Cwa14890Constants *EsGobJmulticardCardDnieDnieFactory_getDnie3UsrCwa14890ConstantsWithNSString_(NSString *idesp);

FOUNDATION_EXPORT EsGobJmulticardCardDnieDnie3Cwa14890Constants *EsGobJmulticardCardDnieDnieFactory_getDnie3PinCwa14890ConstantsWithNSString_(NSString *idesp);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardCardDnieDnieFactory)

#endif

#pragma pop_macro("INCLUDE_ALL_EsGobJmulticardCardDnieDnieFactory")
