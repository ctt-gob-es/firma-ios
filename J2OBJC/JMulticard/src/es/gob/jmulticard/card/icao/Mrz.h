//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/icao/Mrz.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobJmulticardCardIcaoMrz")
#ifdef RESTRICT_EsGobJmulticardCardIcaoMrz
#define INCLUDE_ALL_EsGobJmulticardCardIcaoMrz 0
#else
#define INCLUDE_ALL_EsGobJmulticardCardIcaoMrz 1
#endif
#undef RESTRICT_EsGobJmulticardCardIcaoMrz

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (EsGobJmulticardCardIcaoMrz_) && (INCLUDE_ALL_EsGobJmulticardCardIcaoMrz || defined(INCLUDE_EsGobJmulticardCardIcaoMrz))
#define EsGobJmulticardCardIcaoMrz_

@class EsGobJmulticardCardIcaoGender;
@class EsGobJmulticardCardIcaoMrz_IcaoDocumentType;
@class EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant;
@class EsGobJmulticardCryptoHelper;
@class IOSByteArray;
@class JavaUtilDate;

/*!
 @brief MRZ de un MRTD ICAO.
 @author The JMRTD team (info@@jmrtd.org)
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s.
 */
@interface EsGobJmulticardCardIcaoMrz : NSObject

#pragma mark Public

/*!
 @brief Construye la MRZ del un MRTD a partir del contenido del fichero DG1 o de su representaci&oacute;n
  textual tal y como est&aacute; immpresa en el soporte.
 @param rawBytes Contenido del fichero DG1 del MRTD o texto de la MRZ impresa.
 @throw IOExceptionSi la MRZ no se puede analizar por no estar en el formato esperado.
 */
- (instancetype)initWithByteArray:(IOSByteArray *)rawBytes;

/*!
 @brief Construye la MRZ del un MRTD a partir de su representaci&oacute;n
  textual tal y como est&aacute; immpresa en el soporte.
 @param mrzStr Texto de la MRZ impresa.
 @throw IOExceptionSi la MRZ no se puede analizar por no estar en el formato esperado.
 */
- (instancetype)initWithNSString:(NSString *)mrzStr;

/*!
 @brief Obtiene el contenido binario del MRZ.
 Puede ser el contenido del fichero DG1 del MRTD o simplemente el texto impreso en el soporte.
 @return Contenido binario del MRZ.
 */
- (IOSByteArray *)getBytes;

/*!
 @brief Obtiene la fecha de nacimiento del titular.
 @return Fecha de nacimiento del titular.
 @throw ParseExceptionSi la fecha encontrada no est&aacute; en el
          formato esperado.
 */
- (JavaUtilDate *)getDateOfBirth;

/*!
 @brief Obtiene la fecha de caducidad del MRTD.
 @return Fecha de caducidad del MRTD.
 @throw ParseExceptionSi la fecha encontrada no est&aacute; en el formato esperado.
 */
- (JavaUtilDate *)getDateOfExpiry;

/*!
 @brief Obtiene el n&uacute;mero de soporte del MRTD.
 @return N&uacute;mero de soporte del MRTD.
 */
- (NSString *)getDocumentNumber;

/*!
 @brief Obtiene el tipo de MRTD.
 @return Tipo de MRTD.
 */
- (EsGobJmulticardCardIcaoMrz_IcaoDocumentType *)getDocumentType;

/*!
 @brief Obtiene la variante de este MRTD.
 @return Variante de este MRTD.
 */
- (EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *)getDocumentVariant;

/*!
 @brief Obtiene el pa&iacute;s emisor del MRTD.
 @return Pa&iacute;s emisor del MRTD.
 */
- (NSString *)getIssuerCountry;

/*!
 @brief Devuelve el 'MRZ Information' como array de octetos.
 @return 'MRZ Information' (binario).
 */
- (IOSByteArray *)getMrzInformation;

/*!
 @brief Calcula el valor de inicializaci&oacute;n (BAC, EAC, PACE) de la MRZ.
 Siguiendo la especificaci&oacute;n ICAO 9303:<br>
  <code>KDF&pi;(&pi;) = KDF(f(&pi;),3)</code><br>
  <code>K= f(&pi;) = SHA-1(Serial Number || Date of Birth || Date of Expiry)</code>.<br>
  Aqu&iacute; se genera el valor de K que deber&aacute; posteriormente ser
  pasado como par&aacute;metro de la funci&oacute;n KDF(K,3) para generar la contrase&ntilde;a.
 @param cryptoHelper Clase para la realizaci &oacute; n de operaciones criptogr &aacute; ficas.
 @return K Valor de inicializaci&oacute;n.
 @throw IOExceptionSi no se puede obtener el valor.
 */
- (IOSByteArray *)getMrzPswdWithEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHelper;

/*!
 @brief Obtiene el nombre del titular.
 @return Nombre del titular.
 */
- (NSString *)getName;

/*!
 @brief Obtiene la nacionalidad del titular.
 @return Nacionalidad del titular.
 */
- (NSString *)getNationality;

/*!
 @brief Obtiene el contenido binario directo del objeto DG01.
 @return Contenido binario directo del objeto DG01.
 */
- (IOSByteArray *)getRawData;

/*!
 @brief Obtiene el sexo del titular.
 @return Sexo del titular.
 */
- (EsGobJmulticardCardIcaoGender *)getSex;

/*!
 @brief Obtiene el n&uacute;mero del MRTD.
 @return N&uacute;mero del MRTD.
 */
- (NSString *)getSubjectNumber;

/*!
 @brief Obtiene los apellidos del titular.
 @return Apellidos del titular.
 */
- (NSString *)getSurname;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobJmulticardCardIcaoMrz)

FOUNDATION_EXPORT void EsGobJmulticardCardIcaoMrz_initWithNSString_(EsGobJmulticardCardIcaoMrz *self, NSString *mrzStr);

FOUNDATION_EXPORT EsGobJmulticardCardIcaoMrz *new_EsGobJmulticardCardIcaoMrz_initWithNSString_(NSString *mrzStr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobJmulticardCardIcaoMrz *create_EsGobJmulticardCardIcaoMrz_initWithNSString_(NSString *mrzStr);

FOUNDATION_EXPORT void EsGobJmulticardCardIcaoMrz_initWithByteArray_(EsGobJmulticardCardIcaoMrz *self, IOSByteArray *rawBytes);

FOUNDATION_EXPORT EsGobJmulticardCardIcaoMrz *new_EsGobJmulticardCardIcaoMrz_initWithByteArray_(IOSByteArray *rawBytes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobJmulticardCardIcaoMrz *create_EsGobJmulticardCardIcaoMrz_initWithByteArray_(IOSByteArray *rawBytes);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardCardIcaoMrz)

#endif

#if !defined (EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_) && (INCLUDE_ALL_EsGobJmulticardCardIcaoMrz || defined(INCLUDE_EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant))
#define EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_Enum) {
  EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_Enum_DOC_VAR_IR = 0,
  EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_Enum_DOC_VAR_ID = 1,
  EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_Enum_DOC_VAR_IM = 2,
  EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_Enum_DOC_VAR_IT = 3,
  EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_Enum_DOC_VAR_IX = 4,
  EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_Enum_DOC_VAR_IS = 5,
  EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_Enum_DOC_VAR_P = 6,
  EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_Enum_DOC_VAR_OTHER = 7,
};

/*!
 @brief Variante de documento de identidad.
 */
@interface EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant : JavaLangEnum

#pragma mark Public

- (NSString *)description;

+ (EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

/*!
 @brief Obtiene la variante del MRTD.
 @param documentCode C &oacute; digo de documento (las dos primeras letras de la MRZ).
 @return Variante del MRTD.
 */
+ (EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *)getIcaoDocumentVariantWithNSString:(NSString *)documentCode;

- (EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_values_[];

/*!
 @brief Permiso de residencia o asilo.
 */
inline EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_get_DOC_VAR_IR(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IR)

/*!
 @brief Tarjeta de identidad.
 */
inline EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_get_DOC_VAR_ID(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_ID)

/*!
 @brief Tarjeta de residencia de familiar de ciudadano de la UE.
 */
inline EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_get_DOC_VAR_IM(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IM)

/*!
 @brief Permiso de estancia temporal.
 */
inline EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_get_DOC_VAR_IT(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IT)

/*!
 @brief Tarjeta de trabajador transfronterizo.
 */
inline EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_get_DOC_VAR_IX(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IX)

/*!
 @brief Documento de identidad del marino.
 */
inline EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_get_DOC_VAR_IS(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IS)

/*!
 @brief Pasaporte.
 */
inline EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_get_DOC_VAR_P(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_P)

/*!
 @brief Documento de identidad no especificado.
 */
inline EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_get_DOC_VAR_OTHER(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_OTHER)

FOUNDATION_EXPORT EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_getIcaoDocumentVariantWithNSString_(NSString *documentCode);

FOUNDATION_EXPORT IOSObjectArray *EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_values(void);

FOUNDATION_EXPORT EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant)

#endif

#if !defined (EsGobJmulticardCardIcaoMrz_IcaoDocumentType_) && (INCLUDE_ALL_EsGobJmulticardCardIcaoMrz || defined(INCLUDE_EsGobJmulticardCardIcaoMrz_IcaoDocumentType))
#define EsGobJmulticardCardIcaoMrz_IcaoDocumentType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, EsGobJmulticardCardIcaoMrz_IcaoDocumentType_Enum) {
  EsGobJmulticardCardIcaoMrz_IcaoDocumentType_Enum_DOC_TYPE_ID1 = 0,
  EsGobJmulticardCardIcaoMrz_IcaoDocumentType_Enum_DOC_TYPE_ID3 = 1,
  EsGobJmulticardCardIcaoMrz_IcaoDocumentType_Enum_DOC_TYPE_UNSPECIFIED = 2,
};

/*!
 @brief Tipo de documento ICAO.
 */
@interface EsGobJmulticardCardIcaoMrz_IcaoDocumentType : JavaLangEnum

#pragma mark Public

+ (EsGobJmulticardCardIcaoMrz_IcaoDocumentType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

/*!
 @brief Determina el tipo de documento seg&uacute;n el c&oacute;digo de documento (primeros
  dos caracteres de la MRZ).
 <ul>
   <li>
    El documento ICAO 9303 parte 3 volumen 1 define MRTD con MRZ de tres l&iacute;neas si
    el c&oacute;digo de documento empieza por "A", "C", o "I"
    (nota j, secti&oacute;n 6.6, p&aacute;gina V-9).
   </li>
   <li>
    El documento ICAO 9303 parte 2 define MRV con MRZ de dos l&iacute;neas si
    el c&oacute;digo de documento empieza por "V".
   </li>
   <li>
    El documento ICAO 9303 parte 1 volumen 1 define MRP con MRZ de dos l&iacute;neas si
    el c&oacute;digo de documento empieza por "P"
    (secci&oacute;n 9.6, p&aacute;gina IV-15).
   </li>
  </ul>
 @param documentCode C &oacute; digo de documento (de dos letras).
 @return Tipo de documento.
 */
+ (EsGobJmulticardCardIcaoMrz_IcaoDocumentType *)getIcaoDocumentTypeWithNSString:(NSString *)documentCode;

- (EsGobJmulticardCardIcaoMrz_IcaoDocumentType_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(EsGobJmulticardCardIcaoMrz_IcaoDocumentType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT EsGobJmulticardCardIcaoMrz_IcaoDocumentType *EsGobJmulticardCardIcaoMrz_IcaoDocumentType_values_[];

/*!
 @brief MRV segun ICAO Doc 9303 parte 2).
 */
inline EsGobJmulticardCardIcaoMrz_IcaoDocumentType *EsGobJmulticardCardIcaoMrz_IcaoDocumentType_get_DOC_TYPE_ID1(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardCardIcaoMrz_IcaoDocumentType, DOC_TYPE_ID1)

/*!
 @brief MRP segun ICAO Doc 9303 parte 1 vol 1.
 */
inline EsGobJmulticardCardIcaoMrz_IcaoDocumentType *EsGobJmulticardCardIcaoMrz_IcaoDocumentType_get_DOC_TYPE_ID3(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardCardIcaoMrz_IcaoDocumentType, DOC_TYPE_ID3)

/*!
 @brief Tipo desconocido.
 */
inline EsGobJmulticardCardIcaoMrz_IcaoDocumentType *EsGobJmulticardCardIcaoMrz_IcaoDocumentType_get_DOC_TYPE_UNSPECIFIED(void);
J2OBJC_ENUM_CONSTANT(EsGobJmulticardCardIcaoMrz_IcaoDocumentType, DOC_TYPE_UNSPECIFIED)

FOUNDATION_EXPORT EsGobJmulticardCardIcaoMrz_IcaoDocumentType *EsGobJmulticardCardIcaoMrz_IcaoDocumentType_getIcaoDocumentTypeWithNSString_(NSString *documentCode);

FOUNDATION_EXPORT IOSObjectArray *EsGobJmulticardCardIcaoMrz_IcaoDocumentType_values(void);

FOUNDATION_EXPORT EsGobJmulticardCardIcaoMrz_IcaoDocumentType *EsGobJmulticardCardIcaoMrz_IcaoDocumentType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT EsGobJmulticardCardIcaoMrz_IcaoDocumentType *EsGobJmulticardCardIcaoMrz_IcaoDocumentType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardCardIcaoMrz_IcaoDocumentType)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_EsGobJmulticardCardIcaoMrz")
