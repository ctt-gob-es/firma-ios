//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/icao/vdsned/Vdsned.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/JmcLogger.h"
#include "es/gob/jmulticard/asn1/Tlv.h"
#include "es/gob/jmulticard/card/icao/CountryCodes.h"
#include "es/gob/jmulticard/card/icao/vdsned/C40Decoder.h"
#include "es/gob/jmulticard/card/icao/vdsned/Vdsned.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/nio/ByteBuffer.h"
#include "java/security/PublicKey.h"
#include "java/security/Signature.h"
#include "java/security/SignatureException.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/card/icao/vdsned/Vdsned must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardCardIcaoVdsnedVdsned () {
 @public
  IOSByteArray *encoded_;
  jint version__;
  /*!
   @brief Pa&iacute;s que emite el sello.
   */
  NSString *issuingCountry_;
  NSString *caCr_;
  JavaUtilDate *documentIssueDate_;
  JavaUtilDate *signatureCreationDate_;
  jint documentFeatureDefinitionReference_;
  jint documentTypeCategory_;
  NSString *mrzB_;
  jint nEntries_;
  jint durationOfStay_;
  NSString *passportNumber_;
  IOSByteArray *signature_;
  IOSByteArray *dataTbs_;
}

+ (IOSByteArray *)encodeEcdsaSignatureWithByteArray:(IOSByteArray *)r
                                      withByteArray:(IOSByteArray *)s;

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoVdsnedVdsned, encoded_, IOSByteArray *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoVdsnedVdsned, issuingCountry_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoVdsnedVdsned, caCr_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoVdsnedVdsned, documentIssueDate_, JavaUtilDate *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoVdsnedVdsned, signatureCreationDate_, JavaUtilDate *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoVdsnedVdsned, mrzB_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoVdsnedVdsned, passportNumber_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoVdsnedVdsned, signature_, IOSByteArray *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoVdsnedVdsned, dataTbs_, IOSByteArray *)

inline jbyte EsGobJmulticardCardIcaoVdsnedVdsned_get_MAGIC(void);
#define EsGobJmulticardCardIcaoVdsnedVdsned_MAGIC -36
J2OBJC_STATIC_FIELD_CONSTANT(EsGobJmulticardCardIcaoVdsnedVdsned, MAGIC, jbyte)

inline NSString *EsGobJmulticardCardIcaoVdsnedVdsned_get_DEFAULT_SIGNATURE_ALGORITHM(void);
static NSString *EsGobJmulticardCardIcaoVdsnedVdsned_DEFAULT_SIGNATURE_ALGORITHM = @"SHA256withECDSA";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardCardIcaoVdsnedVdsned, DEFAULT_SIGNATURE_ALGORITHM, NSString *)

__attribute__((unused)) static IOSByteArray *EsGobJmulticardCardIcaoVdsnedVdsned_encodeEcdsaSignatureWithByteArray_withByteArray_(IOSByteArray *r, IOSByteArray *s);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/icao/vdsned/Vdsned.java"


#line 22
@implementation EsGobJmulticardCardIcaoVdsnedVdsned


#line 53
- (instancetype)initWithByteArray:(IOSByteArray *)enc {
  EsGobJmulticardCardIcaoVdsnedVdsned_initWithByteArray_(self, enc);
  return self;
}


#line 190
+ (IOSByteArray *)encodeEcdsaSignatureWithByteArray:(IOSByteArray *)r
                                      withByteArray:(IOSByteArray *)s {
  return EsGobJmulticardCardIcaoVdsnedVdsned_encodeEcdsaSignatureWithByteArray_withByteArray_(r, s);
}


#line 213
- (void)verifyEcDsaSignatureWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)publicKey {
  
#line 216
  JavaSecuritySignature *sig = JavaSecuritySignature_getInstanceWithNSString_(
#line 217
  EsGobJmulticardCardIcaoVdsnedVdsned_DEFAULT_SIGNATURE_ALGORITHM);
  
#line 219
  [((JavaSecuritySignature *) nil_chk(sig)) initVerifyWithJavaSecurityPublicKey:publicKey];
  [sig updateWithByteArray:dataTbs_];
  if (![sig verifyWithByteArray:signature_]) {
    @throw new_JavaSecuritySignatureException_initWithNSString_(
#line 223
    @"La firma no es valida");
  }
}


#line 228
- (NSString *)description {
  
#line 230
  JavaTextSimpleDateFormat *sdf = new_JavaTextSimpleDateFormat_initWithNSString_(@"dd/MM/yyyy");
  return JreStrcat("$I$$$$$$$$$I$I$$$I$I$$C", @"Visible Digital Seal for Non-Electronic Documents\n Version: ",
#line 232
  version__, @"\n Pais emisor: ", EsGobJmulticardCardIcaoCountryCodes_getCountryNameWithNSString_(
#line 233
  issuingCountry_), @"\n Autoridad de certificacion y referencia: ",
#line 234
  caCr_, @"\n Fecha de emision del documento: ",
#line 235
  [sdf formatWithJavaUtilDate:documentIssueDate_], @"\n Fecha de creacion de la firma: ",
#line 236
  [sdf formatWithJavaUtilDate:signatureCreationDate_], @"\n Referencia: ",
#line 237
  documentFeatureDefinitionReference_, @"\n Categoria: ",
#line 238
  documentTypeCategory_, @"\n MRZ-B: ",
#line 239
  mrzB_, @"\n Numero de entradas: ",
#line 240
  nEntries_, @"\n Duracion de la estancia: ",
#line 241
  durationOfStay_, @"\n Numero de pasaporte: ",
#line 242
  passportNumber_, 0x000a);
}


#line 248
- (NSString *)getIssuingCountry {
  return issuingCountry_;
}


#line 254
- (NSString *)getCaCr {
  return caCr_;
}


#line 260
- (JavaUtilDate *)getDocumentIssueDate {
  return documentIssueDate_;
}


#line 266
- (JavaUtilDate *)getSignatureCreationDate {
  return signatureCreationDate_;
}


#line 272
- (jint)getDocumentFeatureDefinitionReference {
  return documentFeatureDefinitionReference_;
}


#line 278
- (jint)getDocumentTypeCategory {
  return documentTypeCategory_;
}


#line 284
- (jint)getVersion {
  return version__;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "[B", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(encodeEcdsaSignatureWithByteArray:withByteArray:);
  methods[2].selector = @selector(verifyEcDsaSignatureWithJavaSecurityPublicKey:);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(getIssuingCountry);
  methods[5].selector = @selector(getCaCr);
  methods[6].selector = @selector(getDocumentIssueDate);
  methods[7].selector = @selector(getSignatureCreationDate);
  methods[8].selector = @selector(getDocumentFeatureDefinitionReference);
  methods[9].selector = @selector(getDocumentTypeCategory);
  methods[10].selector = @selector(getVersion);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAGIC", "B", .constantValue.asChar = EsGobJmulticardCardIcaoVdsnedVdsned_MAGIC, 0x1a, -1, -1, -1, -1 },
    { "encoded_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "version__", "I", .constantValue.asLong = 0, 0x12, 8, -1, -1, -1 },
    { "issuingCountry_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "caCr_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "documentIssueDate_", "LJavaUtilDate;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "signatureCreationDate_", "LJavaUtilDate;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "documentFeatureDefinitionReference_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "documentTypeCategory_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mrzB_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nEntries_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "durationOfStay_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "passportNumber_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "signature_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dataTbs_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_SIGNATURE_ALGORITHM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "LJavaIoIOException;LEsGobJmulticardAsn1TlvException;", "encodeEcdsaSignature", "[B[B", "verifyEcDsaSignature", "LJavaSecurityPublicKey;", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;LJavaSecuritySignatureException;", "toString", "version", &EsGobJmulticardCardIcaoVdsnedVdsned_DEFAULT_SIGNATURE_ALGORITHM };
  static const J2ObjcClassInfo _EsGobJmulticardCardIcaoVdsnedVdsned = { "Vdsned", "es.gob.jmulticard.card.icao.vdsned", ptrTable, methods, fields, 7, 0x11, 11, 16, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardCardIcaoVdsnedVdsned;
}

@end


#line 53
void EsGobJmulticardCardIcaoVdsnedVdsned_initWithByteArray_(EsGobJmulticardCardIcaoVdsnedVdsned *self, IOSByteArray *enc) {
  NSObject_init(self);
  self->mrzB_ =
#line 39
  nil;
  self->nEntries_ = 0;
  self->durationOfStay_ = 0;
  self->passportNumber_ = nil;
  self->signature_ = nil;
  self->dataTbs_ = nil;
  
#line 55
  if (enc == nil || enc->size_ < 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 57
    @"La codificacion binaria del VDSNED no puede ser nula ni vacia");
  }
  
#line 60
  self->encoded_ = [enc java_clone];
  jint offset = 0;
  
#line 64
  if (IOSByteArray_Get(nil_chk(self->encoded_), offset++) != EsGobJmulticardCardIcaoVdsnedVdsned_MAGIC) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 66
    @"La codificacion binaria proporcionada no corresponde con un VDSNED");
  }
  
#line 71
  self->version__ = IOSByteArray_Get(self->encoded_, offset++) + 1;
  if (self->version__ != 3 && self->version__ != 4) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Solo se soportan VDSNED v3 o v4, y se ha proporcionado un v", self->version__));
  }
  jint unseq$1 =
#line 79
  offset++;
  
#line 79
  self->issuingCountry_ = EsGobJmulticardCardIcaoVdsnedC40Decoder_decodeWithByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){ IOSByteArray_Get(self->encoded_, unseq$1), IOSByteArray_Get(self->encoded_, offset++) } count:2]);
  jint unseq$2 =
#line 84
  offset++;
  jint unseq$3 =
#line 84
  offset++;
  jint unseq$4 =
#line 84
  offset++;
  jint unseq$5 = offset++;
  jint unseq$6 =
#line 85
  offset++;
  
#line 82
  self->caCr_ = EsGobJmulticardCardIcaoVdsnedC40Decoder_decodeWithByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){ IOSByteArray_Get(self->encoded_, unseq$2), IOSByteArray_Get(self->encoded_, unseq$3), IOSByteArray_Get(self->encoded_, unseq$4), IOSByteArray_Get(self->encoded_, unseq$5), IOSByteArray_Get(self->encoded_, unseq$6), IOSByteArray_Get(self->encoded_,
#line 85
  offset++) } count:6]);
  jint unseq$7 =
#line 91
  offset++;
  jint unseq$8 =
#line 91
  offset++;
  
#line 90
  IOSByteArray *tmpDateBytes = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 91
    (jint) 0x00, IOSByteArray_Get(self->encoded_, unseq$7), IOSByteArray_Get(self->encoded_, unseq$8), IOSByteArray_Get(self->encoded_, offset++) } count:4];
    
#line 93
    NSString *tmpDate = JavaLangInteger_toStringWithInt_([((JavaNioByteBuffer *) nil_chk(JavaNioByteBuffer_wrapWithByteArray_(tmpDateBytes))) getInt]);
    @try {
      self->documentIssueDate_ = [new_JavaTextSimpleDateFormat_initWithNSString_(
#line 96
      [((NSString *) nil_chk(tmpDate)) java_length] == 7 ? @"Mddyyyy" : @"MMddyyyy") parseWithNSString:
#line 97
      tmpDate];
    }
    @catch (JavaTextParseException *e) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$$C", @"La fecha de emision del documento es invalida (", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 101
      tmpDateBytes, false), @", ", tmpDate, ')'), e);
    }
    jint unseq$9 =
#line 107
    offset++;
    jint unseq$10 =
#line 107
    offset++;
    
#line 106
    tmpDateBytes = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 107
      (jint) 0x00, IOSByteArray_Get(self->encoded_, unseq$9), IOSByteArray_Get(self->encoded_, unseq$10), IOSByteArray_Get(self->encoded_, offset++) } count:4];
      
#line 109
      tmpDate = JavaLangInteger_toStringWithInt_([((JavaNioByteBuffer *) nil_chk(JavaNioByteBuffer_wrapWithByteArray_(tmpDateBytes))) getInt]);
      @try {
        self->signatureCreationDate_ = [new_JavaTextSimpleDateFormat_initWithNSString_(
#line 112
        [((NSString *) nil_chk(tmpDate)) java_length] == 7 ? @"Mddyyyy" : @"MMddyyyy") parseWithNSString:
#line 113
        tmpDate];
      }
      @catch (JavaTextParseException *e) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$$C", @"La fecha de creacion de la firma es invalida (", EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(
#line 117
        tmpDateBytes, false), @", ", tmpDate, ')'), e);
      }
      
#line 122
      self->documentFeatureDefinitionReference_ = IOSByteArray_Get(self->encoded_, offset++);
      
#line 125
      self->documentTypeCategory_ = IOSByteArray_Get(self->encoded_, offset++);
      if ((self->documentTypeCategory_ & 1) == 0) {
        EsGobJmulticardJmcLogger_warningWithNSString_(JreStrcat("$I", @"La categoria deberia ser un numero impar, pero se ha encontrado ", self->documentTypeCategory_));
      }
      
#line 132
      while (offset < self->encoded_->size_) {
        
#line 134
        IOSByteArray *data = [IOSByteArray newArrayWithLength:self->encoded_->size_ - offset];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->encoded_, offset, data, 0, data->size_);
        
#line 137
        EsGobJmulticardAsn1Tlv *tlv = new_EsGobJmulticardAsn1Tlv_initWithByteArray_(data);
        {
          
#line 147
          IOSByteArray *durBytes;
          
#line 175
          IOSByteArray *sig;
          IOSByteArray *r;
          
#line 178
          IOSByteArray *s;
          
#line 139
          switch ([tlv getTag]) {
            case (jint) 0x02:
            self->mrzB_ = EsGobJmulticardCardIcaoVdsnedC40Decoder_decodeWithByteArray_([tlv getValue]);
            break;
            case (jint) 0x03:
            self->nEntries_ = EsGobJmulticardHexUtils_getUnsignedIntWithByteArray_withInt_([tlv getValue], 0);
            break;
            case (jint) 0x04:
            durBytes = [tlv getValue];
            
#line 149
            if (((IOSByteArray *) nil_chk(durBytes))->size_ < 3) {
              self->durationOfStay_ = EsGobJmulticardHexUtils_getUnsignedIntWithByteArray_withInt_(durBytes, 0);
            }
            else
#line 153
            if (durBytes->size_ == 3) {
              self->durationOfStay_ = [((JavaNioByteBuffer *) nil_chk(JavaNioByteBuffer_wrapWithByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){
#line 156
                (jint) 0x00, IOSByteArray_Get(durBytes, 2), IOSByteArray_Get(durBytes, 1), IOSByteArray_Get(durBytes, 0) } count:4]))) getInt];
              }
              else {
                
#line 162
                self->durationOfStay_ = [((JavaNioByteBuffer *) nil_chk(JavaNioByteBuffer_wrapWithByteArray_(tmpDateBytes))) getInt];
              }
              break;
              case (jint) 0x05:
              self->passportNumber_ = EsGobJmulticardCardIcaoVdsnedC40Decoder_decodeWithByteArray_([tlv getValue]);
              break;
              case (jbyte) (jint) 0xff:
              
#line 172
              self->dataTbs_ = [IOSByteArray newArrayWithLength:offset];
              JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->encoded_, 0, self->dataTbs_, 0, offset);
              sig =
#line 175
              [tlv getValue];
              r = [IOSByteArray newArrayWithLength:JreIntDiv([tlv getLength], 2)];
              JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sig, 0, r, 0, JreIntDiv([tlv getLength], 2));
              s = [IOSByteArray newArrayWithLength:JreIntDiv([tlv getLength], 2)];
              JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sig, JreIntDiv([tlv getLength], 2), s, 0, JreIntDiv([tlv getLength], 2));
              self->signature_ = EsGobJmulticardCardIcaoVdsnedVdsned_encodeEcdsaSignatureWithByteArray_withByteArray_(r, s);
              break;
              default:
              EsGobJmulticardJmcLogger_warningWithNSString_(JreStrcat("$@", @"Encontrado campo de datos desconocido: ", tlv));
            }
          }
          offset = offset + ((IOSByteArray *) nil_chk([tlv getBytes]))->size_;
        }
      }


#line 53
EsGobJmulticardCardIcaoVdsnedVdsned *new_EsGobJmulticardCardIcaoVdsnedVdsned_initWithByteArray_(IOSByteArray *enc) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardIcaoVdsnedVdsned, initWithByteArray_, enc)
}


#line 53
EsGobJmulticardCardIcaoVdsnedVdsned *create_EsGobJmulticardCardIcaoVdsnedVdsned_initWithByteArray_(IOSByteArray *enc) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardIcaoVdsnedVdsned, initWithByteArray_, enc)
}


#line 190
IOSByteArray *EsGobJmulticardCardIcaoVdsnedVdsned_encodeEcdsaSignatureWithByteArray_withByteArray_(IOSByteArray *r, IOSByteArray *s) {
  EsGobJmulticardCardIcaoVdsnedVdsned_initialize();
  jbyte integerTag = (jbyte) (jint) 0x02;
  jbyte sequenceTag = (jbyte) (jint) 0x30;
  
#line 195
  EsGobJmulticardAsn1Tlv *rTlv = new_EsGobJmulticardAsn1Tlv_initWithByte_withByteArray_(integerTag, r);
  EsGobJmulticardAsn1Tlv *sTlv = new_EsGobJmulticardAsn1Tlv_initWithByte_withByteArray_(integerTag, s);
  EsGobJmulticardAsn1Tlv *sequenceTlv = new_EsGobJmulticardAsn1Tlv_initWithByte_withByteArray_(
#line 198
  sequenceTag, EsGobJmulticardHexUtils_concatenateByteArraysWithByteArray2_([IOSObjectArray newArrayWithObjects:(id[]){
#line 200
    [rTlv getBytes],
#line 201
    [sTlv getBytes] } count:2 type:IOSClass_byteArray(1)]));
    
#line 205
    return [sequenceTlv getBytes];
  }

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardIcaoVdsnedVdsned)
