//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/icao/bac/IcaoMrtdWithBac.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobJmulticardCardIcaoBacIcaoMrtdWithBac")
#ifdef RESTRICT_EsGobJmulticardCardIcaoBacIcaoMrtdWithBac
#define INCLUDE_ALL_EsGobJmulticardCardIcaoBacIcaoMrtdWithBac 0
#else
#define INCLUDE_ALL_EsGobJmulticardCardIcaoBacIcaoMrtdWithBac 1
#endif
#undef RESTRICT_EsGobJmulticardCardIcaoBacIcaoMrtdWithBac

#if !defined (EsGobJmulticardCardIcaoBacIcaoMrtdWithBac_) && (INCLUDE_ALL_EsGobJmulticardCardIcaoBacIcaoMrtdWithBac || defined(INCLUDE_EsGobJmulticardCardIcaoBacIcaoMrtdWithBac))
#define EsGobJmulticardCardIcaoBacIcaoMrtdWithBac_

#define RESTRICT_EsGobJmulticardCardDnieDnie3 1
#define INCLUDE_EsGobJmulticardCardDnieDnie3 1
#include "es/gob/jmulticard/card/dnie/Dnie3.h"

@class EsGobJmulticardCryptoHelper;
@class IOSByteArray;
@class JavaxSecurityAuthCallbackPasswordCallback;
@protocol EsGobJmulticardCardPrivateKeyReference;
@protocol EsGobJmulticardConnectionApduConnection;
@protocol JavaxSecurityAuthCallbackCallbackHandler;

/*!
 @brief Pasaporte accedido de forma inal&aacute;mbrica mediante BAC.
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s.
 */
@interface EsGobJmulticardCardIcaoBacIcaoMrtdWithBac : EsGobJmulticardCardDnieDnie3

#pragma mark Public

/*!
 @brief Construye una clase que representa un MRTD accedido de forma
  inal&aacute;mbrica mediante BAC..
 @param conn Conexi &oacute; n con el lector NFC.
 @param cryptoHlpr Clase de utilidad de funciones criptogr &aacute; ficas.
 @throw ApduConnectionExceptionSi no se puede establecer la conexi&oacute;n NFC.
 */
- (instancetype)initWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                                withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHlpr;

- (NSString *)getCardName;

- (void)openSecureChannelIfNotAlreadyOpened;

- (IOSByteArray *)signWithByteArray:(IOSByteArray *)data
                       withNSString:(NSString *)signAlgorithm
withEsGobJmulticardCardPrivateKeyReference:(id<EsGobJmulticardCardPrivateKeyReference>)privateKeyReference;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)arg0
                  withJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)arg1
                                withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)arg2
                   withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobJmulticardCardIcaoBacIcaoMrtdWithBac)

FOUNDATION_EXPORT void EsGobJmulticardCardIcaoBacIcaoMrtdWithBac_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_(EsGobJmulticardCardIcaoBacIcaoMrtdWithBac *self, id<EsGobJmulticardConnectionApduConnection> conn, EsGobJmulticardCryptoHelper *cryptoHlpr);

FOUNDATION_EXPORT EsGobJmulticardCardIcaoBacIcaoMrtdWithBac *new_EsGobJmulticardCardIcaoBacIcaoMrtdWithBac_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_(id<EsGobJmulticardConnectionApduConnection> conn, EsGobJmulticardCryptoHelper *cryptoHlpr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobJmulticardCardIcaoBacIcaoMrtdWithBac *create_EsGobJmulticardCardIcaoBacIcaoMrtdWithBac_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_(id<EsGobJmulticardConnectionApduConnection> conn, EsGobJmulticardCryptoHelper *cryptoHlpr);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardCardIcaoBacIcaoMrtdWithBac)

#endif

#pragma pop_macro("INCLUDE_ALL_EsGobJmulticardCardIcaoBacIcaoMrtdWithBac")
