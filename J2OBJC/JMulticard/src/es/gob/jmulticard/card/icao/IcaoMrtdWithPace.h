//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/icao/IcaoMrtdWithPace.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobJmulticardCardIcaoIcaoMrtdWithPace")
#ifdef RESTRICT_EsGobJmulticardCardIcaoIcaoMrtdWithPace
#define INCLUDE_ALL_EsGobJmulticardCardIcaoIcaoMrtdWithPace 0
#else
#define INCLUDE_ALL_EsGobJmulticardCardIcaoIcaoMrtdWithPace 1
#endif
#undef RESTRICT_EsGobJmulticardCardIcaoIcaoMrtdWithPace

#if !defined (EsGobJmulticardCardIcaoIcaoMrtdWithPace_) && (INCLUDE_ALL_EsGobJmulticardCardIcaoIcaoMrtdWithPace || defined(INCLUDE_EsGobJmulticardCardIcaoIcaoMrtdWithPace))
#define EsGobJmulticardCardIcaoIcaoMrtdWithPace_

#define RESTRICT_EsGobJmulticardCardDnieDnieNfc 1
#define INCLUDE_EsGobJmulticardCardDnieDnieNfc 1
#include "es/gob/jmulticard/card/dnie/DnieNfc.h"

@class EsGobJmulticardAsn1IcaoOptionalDetails;
@class EsGobJmulticardCryptoHelper;
@class IOSByteArray;
@class JavaxSecurityAuthCallbackPasswordCallback;
@protocol EsGobJmulticardCardPrivateKeyReference;
@protocol EsGobJmulticardConnectionApduConnection;
@protocol JavaxSecurityAuthCallbackCallbackHandler;

/*!
 @brief Pasaporte (MRTD ICAO) accedido de forma inal&aacute;mbrica mediante PACE.
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s.
 */
@interface EsGobJmulticardCardIcaoIcaoMrtdWithPace : EsGobJmulticardCardDnieDnieNfc

#pragma mark Public

/*!
 @brief Construye una clase que representa un MRTD accedido de forma
  inal&aacute;mbrica mediante PACE.
 @param conn Conexi &oacute; n con el lector NFC.
 @param cryptoHlpr Clase de utilidad de funciones criptogr &aacute; ficas.
 @param ch <code> CallbackHandler </code>  que debe proporcionar, mediante un
              <code> es.gob.jmulticard.callback.CustomTextInputCallback </code>  o
             un  <code> javax.security.auth.callback.TextInputCallback </code> , el
             CAN o la MRZ del MRTD.
 @throw IcaoExceptionSi no se puede establecer el canal PACE.
 @throw ApduConnectionExceptionSi no se puede establecer la conexi&oacute;n NFC.
 */
- (instancetype)initWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)conn
                                withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHlpr
                   withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)ch;

- (NSString *)getCardName;

- (IOSByteArray *)getCardSecurity;

- (IOSByteArray *)getDg10;

/*!
 @brief Obtiene el DG13 (detalles opcionales).
 Puede necesitar que el canal de usuario est&eacute; previamente establecido.
  No se usa la implementaci&oacute;n de la clase padre porque es
  espec&iacute;fica de DNIe.
 @return DG13 (detalles opcionales).
 @throw IOExceptionSi hay problemas leyendo el fichero.
 */
- (EsGobJmulticardAsn1IcaoOptionalDetails *)getDg13;

- (IOSByteArray *)getDg15;

- (IOSByteArray *)getDg16;

- (IOSByteArray *)getDg3;

- (IOSByteArray *)getDg4;

- (IOSByteArray *)getDg5;

- (IOSByteArray *)getDg6;

- (IOSByteArray *)getDg8;

- (IOSByteArray *)getDg9;

/*!
 @brief Los pasaportes no tienen IDESP, se devuelve siempre <code>null</code>.
 @return <code>null</code>.
 */
- (NSString *)getIdesp;

- (void)openSecureChannelIfNotAlreadyOpened;

- (void)openSecureChannelIfNotAlreadyOpenedWithBoolean:(jboolean)doChv;

- (IOSByteArray *)signWithByteArray:(IOSByteArray *)data
                       withNSString:(NSString *)signAlgorithm
withEsGobJmulticardCardPrivateKeyReference:(id<EsGobJmulticardCardPrivateKeyReference>)privateKeyRef;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithEsGobJmulticardConnectionApduConnection:(id<EsGobJmulticardConnectionApduConnection>)arg0
                  withJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)arg1
                                withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)arg2
                   withJavaxSecurityAuthCallbackCallbackHandler:(id<JavaxSecurityAuthCallbackCallbackHandler>)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobJmulticardCardIcaoIcaoMrtdWithPace)

FOUNDATION_EXPORT void EsGobJmulticardCardIcaoIcaoMrtdWithPace_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(EsGobJmulticardCardIcaoIcaoMrtdWithPace *self, id<EsGobJmulticardConnectionApduConnection> conn, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch);

FOUNDATION_EXPORT EsGobJmulticardCardIcaoIcaoMrtdWithPace *new_EsGobJmulticardCardIcaoIcaoMrtdWithPace_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobJmulticardCardIcaoIcaoMrtdWithPace *create_EsGobJmulticardCardIcaoIcaoMrtdWithPace_initWithEsGobJmulticardConnectionApduConnection_withEsGobJmulticardCryptoHelper_withJavaxSecurityAuthCallbackCallbackHandler_(id<EsGobJmulticardConnectionApduConnection> conn, EsGobJmulticardCryptoHelper *cryptoHlpr, id<JavaxSecurityAuthCallbackCallbackHandler> ch);

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardCardIcaoIcaoMrtdWithPace)

#endif

#pragma pop_macro("INCLUDE_ALL_EsGobJmulticardCardIcaoIcaoMrtdWithPace")
