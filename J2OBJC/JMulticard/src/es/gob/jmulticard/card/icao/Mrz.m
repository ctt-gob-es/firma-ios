//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/icao/Mrz.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/CryptoHelper.h"
#include "es/gob/jmulticard/DigestAlgorithm.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/card/icao/CountryCodes.h"
#include "es/gob/jmulticard/card/icao/Gender.h"
#include "es/gob/jmulticard/card/icao/Mrz.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/DataInputStream.h"
#include "java/lang/Character.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/System.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/StandardCharsets.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/card/icao/Mrz must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardCardIcaoMrz () {
 @public
  JavaTextSimpleDateFormat *sdFormat_;
  NSString *mrzString_;
  IOSByteArray *rawData_;
  NSString *documentCode_;
  EsGobJmulticardCardIcaoMrz_IcaoDocumentType *documentType_;
  NSString *issuerCountry_;
  /*!
   @brief N&uacute;mero de soporte.
   */
  NSString *documentNumber_;
  NSString *name_;
  NSString *surname_;
  NSString *dateOfBirth_;
  NSString *sex_;
  NSString *dateOfExpiry_;
  NSString *nationality_;
  NSString *subjectNumber_;
  EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *documentVariant_;
}

+ (NSString *)readStringWithJavaIoDataInputStream:(JavaIoDataInputStream *)stringStream
                                          withInt:(jint)count;

/*!
 @brief Reemplaza el caracter '&lt;' por ' ' y elimina los espacios en blanco al principio y al final.
 @param str Texto de entrada.
 @return Texto con las sustituciones hechas.
 */
+ (NSString *)trimFillerCharsWithNSString:(NSString *)str;

+ (NSString *)readStringWithFillersWithJavaIoDataInputStream:(JavaIoDataInputStream *)stringStream
                                                     withInt:(jint)count;

/*!
 @brief Calcula el d&iacute;gito de control 7-3-1 de un fragmento la MRZ.
 @param str Fragmento de la MRZ.
 @return D&iacute;gito de control (de '0' a '9').
 */
+ (jchar)checkDigitWithNSString:(NSString *)str;

/*!
 @brief Calcula el d&iacute;gito de control 7-3-1 para un fragmento de la MRZ.
 Si <code>preferFillerOverZero</code> est&aacute; establecido a <code>true</code> entonces
  '&lt;' se devolver&aacute; en la comprobaci&oacute;n del d&iacute;gito 0.
 @param str Porci &oacute; n de la MRZ.
 @param preferFillerOverZero Preferencia de relleno.
 @return D&iacute;gito de control (del '0' al '9' o '&lt;').
 */
+ (jchar)checkDigitWithNSString:(NSString *)str
                    withBoolean:(jboolean)preferFillerOverZero;

/*!
 @brief Obtiene el valor num&eacute;rico de un caracter MRZ (para el c
 &aacute;lculo de los d&iacute;gitos de control).
 @param ch Caracter de la MRZ.
 @return Valor num&eacute;rico del caracter.
 @throw NumberFormatExceptionSi el caracter no es v&aacute;lido para una MRZ.
 */
+ (jint)decodeMrzDigitWithByte:(jbyte)ch;

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoMrz, sdFormat_, JavaTextSimpleDateFormat *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoMrz, mrzString_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoMrz, rawData_, IOSByteArray *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoMrz, documentCode_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoMrz, documentType_, EsGobJmulticardCardIcaoMrz_IcaoDocumentType *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoMrz, issuerCountry_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoMrz, documentNumber_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoMrz, name_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoMrz, surname_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoMrz, dateOfBirth_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoMrz, sex_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoMrz, dateOfExpiry_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoMrz, nationality_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoMrz, subjectNumber_, NSString *)
J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoMrz, documentVariant_, EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *)

__attribute__((unused)) static NSString *EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(JavaIoDataInputStream *stringStream, jint count);

__attribute__((unused)) static NSString *EsGobJmulticardCardIcaoMrz_trimFillerCharsWithNSString_(NSString *str);

__attribute__((unused)) static NSString *EsGobJmulticardCardIcaoMrz_readStringWithFillersWithJavaIoDataInputStream_withInt_(JavaIoDataInputStream *stringStream, jint count);

__attribute__((unused)) static jchar EsGobJmulticardCardIcaoMrz_checkDigitWithNSString_(NSString *str);

__attribute__((unused)) static jchar EsGobJmulticardCardIcaoMrz_checkDigitWithNSString_withBoolean_(NSString *str, jboolean preferFillerOverZero);

__attribute__((unused)) static jint EsGobJmulticardCardIcaoMrz_decodeMrzDigitWithByte_(jbyte ch);

@interface EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant () {
 @public
  NSString *description__;
}

@end

J2OBJC_FIELD_SETTER(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, description__, NSString *)

__attribute__((unused)) static void EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_initWithNSString_withNSString_withInt_(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *self, NSString *d, NSString *__name, jint __ordinal);

__attribute__((unused)) static EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *new_EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_initWithNSString_withNSString_withInt_(NSString *d, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static void EsGobJmulticardCardIcaoMrz_IcaoDocumentType_initWithNSString_withInt_(EsGobJmulticardCardIcaoMrz_IcaoDocumentType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EsGobJmulticardCardIcaoMrz_IcaoDocumentType *new_EsGobJmulticardCardIcaoMrz_IcaoDocumentType_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/icao/Mrz.java"


#line 19
@implementation EsGobJmulticardCardIcaoMrz


#line 47
- (instancetype)initWithNSString:(NSString *)mrzStr {
  EsGobJmulticardCardIcaoMrz_initWithNSString_(self, mrzStr);
  return self;
}


#line 55
- (instancetype)initWithByteArray:(IOSByteArray *)rawBytes {
  EsGobJmulticardCardIcaoMrz_initWithByteArray_(self, rawBytes);
  return self;
}


#line 194
- (NSString *)description {
  
#line 196
  return mrzString_;
}


#line 202
- (IOSByteArray *)getBytes {
  return [((IOSByteArray *) nil_chk(rawData_)) java_clone];
}

+ (NSString *)readStringWithJavaIoDataInputStream:(JavaIoDataInputStream *)stringStream
                                          withInt:(jint)count {
  return EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(stringStream, count);
}


#line 215
+ (NSString *)trimFillerCharsWithNSString:(NSString *)str {
  return EsGobJmulticardCardIcaoMrz_trimFillerCharsWithNSString_(str);
}


#line 225
+ (NSString *)readStringWithFillersWithJavaIoDataInputStream:(JavaIoDataInputStream *)stringStream
                                                     withInt:(jint)count {
  return EsGobJmulticardCardIcaoMrz_readStringWithFillersWithJavaIoDataInputStream_withInt_(stringStream, count);
}


#line 231
- (NSString *)getName {
  return name_;
}


#line 237
- (NSString *)getSurname {
  return surname_;
}


#line 245
- (JavaUtilDate *)getDateOfBirth {
  return [((JavaTextSimpleDateFormat *) nil_chk(sdFormat_)) parseWithNSString:dateOfBirth_];
}


#line 251
- (NSString *)getNationality {
  NSString *c = EsGobJmulticardCardIcaoCountryCodes_getCountryNameWithNSString_(nationality_);
  return c != nil ? c : @"Desconocido";
}


#line 258
- (EsGobJmulticardCardIcaoGender *)getSex {
  return EsGobJmulticardCardIcaoGender_getGenderWithNSString_(sex_);
}


#line 265
- (JavaUtilDate *)getDateOfExpiry {
  @synchronized(self) {
    
#line 266
    return JreRetainedLocalValue([((JavaTextSimpleDateFormat *) nil_chk(sdFormat_)) parseWithNSString:dateOfExpiry_]);
  }
}


#line 271
- (NSString *)getDocumentNumber {
  return documentNumber_;
}


#line 277
- (NSString *)getIssuerCountry {
  NSString *c = EsGobJmulticardCardIcaoCountryCodes_getCountryNameWithNSString_(issuerCountry_);
  return c != nil ? c : @"Desconocido";
}


#line 284
- (EsGobJmulticardCardIcaoMrz_IcaoDocumentType *)getDocumentType {
  return documentType_;
}


#line 290
- (NSString *)getSubjectNumber {
  return subjectNumber_;
}


#line 296
- (IOSByteArray *)getRawData {
  return [((IOSByteArray *) nil_chk(rawData_)) java_clone];
}


#line 302
- (IOSByteArray *)getMrzInformation {
  IOSByteArray *numberBytes = [((NSString *) nil_chk([self getDocumentNumber])) java_getBytes];
  IOSByteArray *numberCheck = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) EsGobJmulticardCardIcaoMrz_checkDigitWithNSString_([self getDocumentNumber]) } count:1];
  IOSByteArray *birthBytes = [((NSString *) nil_chk(dateOfBirth_)) java_getBytes];
  IOSByteArray *birthCheck = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) EsGobJmulticardCardIcaoMrz_checkDigitWithNSString_(dateOfBirth_) } count:1];
  IOSByteArray *expiryBytes = [((NSString *) nil_chk(dateOfExpiry_)) java_getBytes];
  IOSByteArray *expiryCheck = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) EsGobJmulticardCardIcaoMrz_checkDigitWithNSString_(dateOfExpiry_) } count:1];
  
#line 310
  return EsGobJmulticardHexUtils_concatenateByteArraysWithByteArray2_([IOSObjectArray newArrayWithObjects:(id[]){
#line 311
    numberBytes,
#line 312
    numberCheck,
#line 313
    birthBytes,
#line 314
    birthCheck,
#line 315
    expiryBytes,
#line 316
    expiryCheck } count:6 type:IOSClass_byteArray(1)]);
  }


#line 323
+ (jchar)checkDigitWithNSString:(NSString *)str {
  return EsGobJmulticardCardIcaoMrz_checkDigitWithNSString_(str);
}


#line 333
+ (jchar)checkDigitWithNSString:(NSString *)str
                    withBoolean:(jboolean)preferFillerOverZero {
  return EsGobJmulticardCardIcaoMrz_checkDigitWithNSString_withBoolean_(str, preferFillerOverZero);
}


#line 366
+ (jint)decodeMrzDigitWithByte:(jbyte)ch {
  return EsGobJmulticardCardIcaoMrz_decodeMrzDigitWithByte_(ch);
}


#line 483
- (IOSByteArray *)getMrzPswdWithEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHelper {
  return [((EsGobJmulticardCryptoHelper *) nil_chk(cryptoHelper)) digestWithEsGobJmulticardDigestAlgorithm:JreLoadEnum(EsGobJmulticardDigestAlgorithm, SHA1) withByteArray:
#line 486
  [self getMrzInformation]];
}


#line 492
- (EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *)getDocumentVariant {
  return documentVariant_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 4, 5, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 6, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 7, 5, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, 8, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardIcaoGender;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x21, -1, -1, 8, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardIcaoMrz_IcaoDocumentType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0xa, 9, 0, -1, -1, -1, -1 },
    { NULL, "C", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 13, 14, 1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardIcaoMrz_IcaoDocumentVariant;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithByteArray:);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(getBytes);
  methods[4].selector = @selector(readStringWithJavaIoDataInputStream:withInt:);
  methods[5].selector = @selector(trimFillerCharsWithNSString:);
  methods[6].selector = @selector(readStringWithFillersWithJavaIoDataInputStream:withInt:);
  methods[7].selector = @selector(getName);
  methods[8].selector = @selector(getSurname);
  methods[9].selector = @selector(getDateOfBirth);
  methods[10].selector = @selector(getNationality);
  methods[11].selector = @selector(getSex);
  methods[12].selector = @selector(getDateOfExpiry);
  methods[13].selector = @selector(getDocumentNumber);
  methods[14].selector = @selector(getIssuerCountry);
  methods[15].selector = @selector(getDocumentType);
  methods[16].selector = @selector(getSubjectNumber);
  methods[17].selector = @selector(getRawData);
  methods[18].selector = @selector(getMrzInformation);
  methods[19].selector = @selector(checkDigitWithNSString:);
  methods[20].selector = @selector(checkDigitWithNSString:withBoolean:);
  methods[21].selector = @selector(decodeMrzDigitWithByte:);
  methods[22].selector = @selector(getMrzPswdWithEsGobJmulticardCryptoHelper:);
  methods[23].selector = @selector(getDocumentVariant);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sdFormat_", "LJavaTextSimpleDateFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mrzString_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rawData_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "documentCode_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "documentType_", "LEsGobJmulticardCardIcaoMrz_IcaoDocumentType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "issuerCountry_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "documentNumber_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "surname_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "dateOfBirth_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sex_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "dateOfExpiry_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "nationality_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "subjectNumber_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "documentVariant_", "LEsGobJmulticardCardIcaoMrz_IcaoDocumentVariant;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaIoIOException;", "[B", "toString", "readString", "LJavaIoDataInputStream;I", "trimFillerChars", "readStringWithFillers", "LJavaTextParseException;", "checkDigit", "LNSString;Z", "decodeMrzDigit", "B", "getMrzPswd", "LEsGobJmulticardCryptoHelper;", "LEsGobJmulticardCardIcaoMrz_IcaoDocumentVariant;LEsGobJmulticardCardIcaoMrz_IcaoDocumentType;" };
  static const J2ObjcClassInfo _EsGobJmulticardCardIcaoMrz = { "Mrz", "es.gob.jmulticard.card.icao", ptrTable, methods, fields, 7, 0x11, 24, 15, -1, 15, -1, -1, -1 };
  return &_EsGobJmulticardCardIcaoMrz;
}

@end


#line 47
void EsGobJmulticardCardIcaoMrz_initWithNSString_(EsGobJmulticardCardIcaoMrz *self, NSString *mrzStr) {
  EsGobJmulticardCardIcaoMrz_initWithByteArray_(self, mrzStr == nil ? nil : [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([mrzStr java_trim])) java_replace:@"\n" withSequence:@""])) java_replace:@"\x0d" withSequence:@""])) java_replace:@"\t" withSequence:@""])) java_getBytesWithCharset:JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8)]);
}


#line 47
EsGobJmulticardCardIcaoMrz *new_EsGobJmulticardCardIcaoMrz_initWithNSString_(NSString *mrzStr) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardIcaoMrz, initWithNSString_, mrzStr)
}


#line 47
EsGobJmulticardCardIcaoMrz *create_EsGobJmulticardCardIcaoMrz_initWithNSString_(NSString *mrzStr) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardIcaoMrz, initWithNSString_, mrzStr)
}


#line 55
void EsGobJmulticardCardIcaoMrz_initWithByteArray_(EsGobJmulticardCardIcaoMrz *self, IOSByteArray *rawBytes) {
  NSObject_init(self);
  self->sdFormat_ = new_JavaTextSimpleDateFormat_initWithNSString_(
#line 21
  @"yyMMdd");
  
#line 57
  if (rawBytes == nil || rawBytes->size_ < 3) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"La MRZ no puede ser nula ni vacia");
  }
  
#line 61
  self->rawData_ = [rawBytes java_clone];
  
#line 64
  if (IOSByteArray_Get(rawBytes, 0) == (jint) 0x61 && IOSByteArray_Get(rawBytes, 2) == (jint) 0x5f && IOSByteArray_Get(rawBytes, 3) == (jint) 0x1f) {
    IOSByteArray *mrzBytes = [IOSByteArray newArrayWithLength:IOSByteArray_Get(nil_chk(self->rawData_), 4)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->rawData_, 5, mrzBytes, 0, mrzBytes->size_);
    self->mrzString_ = [NSString java_stringWithBytes:mrzBytes];
  }
  else {
    self->mrzString_ = [NSString java_stringWithBytes:rawBytes];
  }
  
#line 74
  JavaIoDataInputStream *dataIn = new_JavaIoDataInputStream_initWithJavaIoInputStream_(new_JavaIoByteArrayInputStream_initWithByteArray_(
#line 76
  [self->mrzString_ java_getBytesWithCharset:JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8)]));
  
#line 81
  self->documentCode_ = EsGobJmulticardCardIcaoMrz_readStringWithFillersWithJavaIoDataInputStream_withInt_(dataIn, 2);
  self->documentType_ = EsGobJmulticardCardIcaoMrz_IcaoDocumentType_getIcaoDocumentTypeWithNSString_(self->documentCode_);
  
#line 84
  self->documentVariant_ = EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_getIcaoDocumentVariantWithNSString_(self->documentCode_);
  
#line 87
  self->issuerCountry_ = EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(dataIn, 3);
  {
    
#line 93
    NSString *tmpDocNum;
    
#line 96
    jchar documentNumberCheckDigit;
    
#line 99
    NSString *optionalData1;
    
#line 133
    NSString *mrzNameString;
    jint delimIndex;
    
#line 89
    switch ([self->documentType_ ordinal]) {
      case EsGobJmulticardCardIcaoMrz_IcaoDocumentType_Enum_DOC_TYPE_ID1:
      tmpDocNum = EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(
#line 93
      dataIn, 9);
      documentNumberCheckDigit =
#line 96
      (jchar) [dataIn readUnsignedByte];
      optionalData1 = EsGobJmulticardCardIcaoMrz_readStringWithFillersWithJavaIoDataInputStream_withInt_(
#line 99
      dataIn, 15);
      
#line 101
      if (documentNumberCheckDigit == '<') {
        
#line 103
        (void) JreStrAppendStrong(&tmpDocNum, "$", [((NSString *) nil_chk(optionalData1)) java_substring:0 endIndex:[optionalData1 java_length] - 1]);
        
#line 105
        optionalData1 = nil;
      }
      self->subjectNumber_ = optionalData1;
      
#line 109
      self->documentNumber_ = EsGobJmulticardCardIcaoMrz_trimFillerCharsWithNSString_(tmpDocNum);
      
#line 112
      self->dateOfBirth_ = EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(dataIn, 6);
      
#line 115
      [dataIn readUnsignedByte];
      
#line 118
      self->sex_ = EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(dataIn, 1);
      
#line 121
      self->dateOfExpiry_ = EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(dataIn, 6);
      
#line 124
      [dataIn readUnsignedByte];
      
#line 127
      self->nationality_ = EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(dataIn, 3);
      
#line 130
      (void) EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(dataIn, 12);
      mrzNameString = EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(
#line 133
      dataIn, 30);
      delimIndex = [((NSString *) nil_chk(mrzNameString)) java_indexOfString:@"<<"];
      if (delimIndex < 0) {
        self->name_ = EsGobJmulticardCardIcaoMrz_trimFillerCharsWithNSString_(mrzNameString);
        self->surname_ = nil;
      }
      else {
        self->surname_ = EsGobJmulticardCardIcaoMrz_trimFillerCharsWithNSString_([mrzNameString java_substring:0 endIndex:delimIndex]);
        self->name_ = EsGobJmulticardCardIcaoMrz_trimFillerCharsWithNSString_([mrzNameString java_substring:delimIndex]);
      }
      
#line 144
      break;
      
#line 146
      case EsGobJmulticardCardIcaoMrz_IcaoDocumentType_Enum_DOC_TYPE_ID3:
      
#line 149
      mrzNameString = EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(dataIn, 39);
      delimIndex = [((NSString *) nil_chk(mrzNameString)) java_indexOfString:@"<<"];
      if (delimIndex < 0) {
        self->name_ = EsGobJmulticardCardIcaoMrz_trimFillerCharsWithNSString_(mrzNameString);
        self->surname_ = nil;
      }
      else {
        self->surname_ = EsGobJmulticardCardIcaoMrz_trimFillerCharsWithNSString_([mrzNameString java_substring:0 endIndex:delimIndex]);
        self->name_ = EsGobJmulticardCardIcaoMrz_trimFillerCharsWithNSString_([mrzNameString java_substring:delimIndex]);
      }
      
#line 161
      self->documentNumber_ = EsGobJmulticardCardIcaoMrz_trimFillerCharsWithNSString_(EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(dataIn, 9));
      
#line 164
      documentNumberCheckDigit = (jchar) [dataIn readUnsignedByte];
      
#line 167
      self->nationality_ = EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(dataIn, 3);
      
#line 170
      self->dateOfBirth_ = EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(dataIn, 6);
      
#line 173
      [dataIn readUnsignedByte];
      
#line 176
      self->sex_ = EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(dataIn, 1);
      
#line 179
      self->dateOfExpiry_ = EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(dataIn, 6);
      
#line 182
      [dataIn readUnsignedByte];
      
#line 185
      self->subjectNumber_ = EsGobJmulticardCardIcaoMrz_trimFillerCharsWithNSString_(EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(dataIn, 14));
      
#line 187
      break;
      
#line 189
      default:
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Tipo de documento no soportado: ", self->documentType_));
    }
  }
}


#line 55
EsGobJmulticardCardIcaoMrz *new_EsGobJmulticardCardIcaoMrz_initWithByteArray_(IOSByteArray *rawBytes) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardIcaoMrz, initWithByteArray_, rawBytes)
}


#line 55
EsGobJmulticardCardIcaoMrz *create_EsGobJmulticardCardIcaoMrz_initWithByteArray_(IOSByteArray *rawBytes) {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardIcaoMrz, initWithByteArray_, rawBytes)
}


#line 206
NSString *EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(JavaIoDataInputStream *stringStream, jint count) {
  EsGobJmulticardCardIcaoMrz_initialize();
  
#line 207
  IOSByteArray *data = [IOSByteArray newArrayWithLength:count];
  [((JavaIoDataInputStream *) nil_chk(stringStream)) readFullyWithByteArray:data];
  return [[NSString java_stringWithBytes:data] java_trim];
}

NSString *EsGobJmulticardCardIcaoMrz_trimFillerCharsWithNSString_(NSString *str) {
  EsGobJmulticardCardIcaoMrz_initialize();
  
#line 216
  IOSByteArray *chars = [((NSString *) nil_chk([((NSString *) nil_chk(str)) java_trim])) java_getBytes];
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(chars))->size_; i++) {
    if (IOSByteArray_Get(chars, i) == '<') {
      *IOSByteArray_GetRef(chars, i) = ' ';
    }
  }
  return [[NSString java_stringWithBytes:chars] java_trim];
}


#line 225
NSString *EsGobJmulticardCardIcaoMrz_readStringWithFillersWithJavaIoDataInputStream_withInt_(JavaIoDataInputStream *stringStream, jint count) {
  EsGobJmulticardCardIcaoMrz_initialize();
  
#line 226
  return EsGobJmulticardCardIcaoMrz_trimFillerCharsWithNSString_(EsGobJmulticardCardIcaoMrz_readStringWithJavaIoDataInputStream_withInt_(stringStream, count));
}


#line 323
jchar EsGobJmulticardCardIcaoMrz_checkDigitWithNSString_(NSString *str) {
  EsGobJmulticardCardIcaoMrz_initialize();
  
#line 324
  return EsGobJmulticardCardIcaoMrz_checkDigitWithNSString_withBoolean_(str, false);
}


#line 333
jchar EsGobJmulticardCardIcaoMrz_checkDigitWithNSString_withBoolean_(NSString *str, jboolean preferFillerOverZero) {
  EsGobJmulticardCardIcaoMrz_initialize();
  
#line 334
  @try {
    IOSByteArray *chars = str == nil ? [IOSByteArray newArrayWithBytes:(jbyte[]){  } count:0] : [str java_getBytesWithCharset:JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8)];
    IOSIntArray *weights = [IOSIntArray newArrayWithInts:(jint[]){ 7, 3, 1 } count:3];
    jint result = 0;
    for (jint i = 0; i < chars->size_; i++) {
      result = JreIntMod((result + IOSIntArray_Get(weights, JreIntMod(i, 3)) * EsGobJmulticardCardIcaoMrz_decodeMrzDigitWithByte_(IOSByteArray_Get(chars, i))), 10);
    }
    NSString *checkDigitString = JavaLangInteger_toStringWithInt_(result);
    if ([((NSString *) nil_chk(checkDigitString)) java_length] != 1) {
      
#line 344
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"Error calculando el digito de control");
    }
    jchar checkDigit = (jchar) IOSByteArray_Get(nil_chk([checkDigitString java_getBytesWithCharset:JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8)]), 0);
    if (preferFillerOverZero && checkDigit == '0') {
      checkDigit = '<';
    }
    return checkDigit;
  }
  @catch (JavaLangNumberFormatException *nfe) {
    
#line 354
    @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"Error calculando el digito de control", nfe);
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(@"Error calculando el digito de control", e);
  }
}

jint EsGobJmulticardCardIcaoMrz_decodeMrzDigitWithByte_(jbyte ch) {
  EsGobJmulticardCardIcaoMrz_initialize();
  
#line 367
  switch (ch) {
    case '<':
    case '0':
    return 0;
    case '1':
    return 1;
    case '2':
    return 2;
    case '3':
    return 3;
    case '4':
    return 4;
    case '5':
    return 5;
    case '6':
    return 6;
    case '7':
    return 7;
    case '8':
    return 8;
    case '9':
    return 9;
    case 'a':
    case 'A':
    return 10;
    case 'b':
    case 'B':
    return 11;
    case 'c':
    case 'C':
    return 12;
    case 'd':
    case 'D':
    return 13;
    case 'e':
    case 'E':
    return 14;
    case 'f':
    case 'F':
    return 15;
    case 'g':
    case 'G':
    return 16;
    case 'h':
    case 'H':
    return 17;
    case 'i':
    case 'I':
    return 18;
    case 'j':
    case 'J':
    return 19;
    case 'k':
    case 'K':
    return 20;
    case 'l':
    case 'L':
    return 21;
    case 'm':
    case 'M':
    return 22;
    case 'n':
    case 'N':
    return 23;
    case 'o':
    case 'O':
    return 24;
    case 'p':
    case 'P':
    return 25;
    case 'q':
    case 'Q':
    return 26;
    case 'r':
    case 'R':
    return 27;
    case 's':
    case 'S':
    return 28;
    case 't':
    case 'T':
    return 29;
    case 'u':
    case 'U':
    return 30;
    case 'v':
    case 'V':
    return 31;
    case 'w':
    case 'W':
    return 32;
    case 'x':
    case 'X':
    return 33;
    case 'y':
    case 'Y':
    return 34;
    case 'z':
    case 'Z':
    return 35;
    default:
    @throw new_JavaLangNumberFormatException_initWithNSString_(JreStrcat("$B$$$", @"No se ha podido decodificar el caracter del MRZ '",
#line 469
    ch, @"' ('", JavaLangCharacter_toStringWithChar_((jchar) ch), @"')"));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardIcaoMrz)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/icao/Mrz.java"

J2OBJC_INITIALIZED_DEFN(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant)

EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_values_[8];


#line 497
@implementation EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant


#line 529
- (NSString *)description {
  
#line 531
  return description__;
}


#line 537
+ (EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *)getIcaoDocumentVariantWithNSString:(NSString *)documentCode {
  return EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_getIcaoDocumentVariantWithNSString_(documentCode);
}

+ (IOSObjectArray *)values {
  return EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_values();
}

+ (EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *)valueOfWithNSString:(NSString *)name {
  return EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_valueOfWithNSString_(name);
}

- (EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_Enum)toNSEnum {
  return (EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardIcaoMrz_IcaoDocumentVariant;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "[LEsGobJmulticardCardIcaoMrz_IcaoDocumentVariant;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardIcaoMrz_IcaoDocumentVariant;", 0x9, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(description);
  methods[1].selector = @selector(getIcaoDocumentVariantWithNSString:);
  methods[2].selector = @selector(values);
  methods[3].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DOC_VAR_IR", "LEsGobJmulticardCardIcaoMrz_IcaoDocumentVariant;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "DOC_VAR_ID", "LEsGobJmulticardCardIcaoMrz_IcaoDocumentVariant;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "DOC_VAR_IM", "LEsGobJmulticardCardIcaoMrz_IcaoDocumentVariant;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "DOC_VAR_IT", "LEsGobJmulticardCardIcaoMrz_IcaoDocumentVariant;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "DOC_VAR_IX", "LEsGobJmulticardCardIcaoMrz_IcaoDocumentVariant;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "DOC_VAR_IS", "LEsGobJmulticardCardIcaoMrz_IcaoDocumentVariant;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "DOC_VAR_P", "LEsGobJmulticardCardIcaoMrz_IcaoDocumentVariant;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "DOC_VAR_OTHER", "LEsGobJmulticardCardIcaoMrz_IcaoDocumentVariant;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "description__", "LNSString;", .constantValue.asLong = 0, 0x12, 12, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "getIcaoDocumentVariant", "LNSString;", "valueOf", &JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IR), &JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_ID), &JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IM), &JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IT), &JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IX), &JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IS), &JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_P), &JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_OTHER), "description", "LEsGobJmulticardCardIcaoMrz;", "Ljava/lang/Enum<Les/gob/jmulticard/card/icao/Mrz$IcaoDocumentVariant;>;" };
  static const J2ObjcClassInfo _EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant = { "IcaoDocumentVariant", "es.gob.jmulticard.card.icao", ptrTable, methods, fields, 7, 0x4019, 4, 9, 13, -1, -1, 14, -1 };
  return &_EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant;
}

+ (void)initialize {
  if (self == [EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant class]) {
    JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IR) = new_EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_initWithNSString_withNSString_withInt_(
#line 500
    @"Permiso de residencia o asilo", JreEnumConstantName(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_class_(), 0), 0);
    JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_ID) = new_EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_initWithNSString_withNSString_withInt_(
#line 503
    @"Tarjeta de identidad", JreEnumConstantName(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_class_(), 1), 1);
    JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IM) = new_EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_initWithNSString_withNSString_withInt_(
#line 506
    @"Tarjeta de residencia de familiar de ciudadano de la UE", JreEnumConstantName(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_class_(), 2), 2);
    JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IT) = new_EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_initWithNSString_withNSString_withInt_(
#line 509
    @"Permiso de estancia temporal", JreEnumConstantName(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_class_(), 3), 3);
    JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IX) = new_EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_initWithNSString_withNSString_withInt_(
#line 512
    @"Tarjeta de trabajador transfronterizo", JreEnumConstantName(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_class_(), 4), 4);
    JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IS) = new_EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_initWithNSString_withNSString_withInt_(
#line 515
    @"Documento de identidad del marino", JreEnumConstantName(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_class_(), 5), 5);
    JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_P) = new_EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_initWithNSString_withNSString_withInt_(
#line 518
    @"Pasaporte", JreEnumConstantName(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_class_(), 6), 6);
    JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_OTHER) = new_EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_initWithNSString_withNSString_withInt_(
#line 521
    @"Documento de identidad no especificado", JreEnumConstantName(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_class_(), 7), 7);
    J2OBJC_SET_INITIALIZED(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant)
  }
}

@end


#line 525
void EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_initWithNSString_withNSString_withInt_(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *self, NSString *d, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  
#line 526
  self->description__ = d;
}


#line 525
EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *new_EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_initWithNSString_withNSString_withInt_(NSString *d, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, initWithNSString_withNSString_withInt_, d, __name, __ordinal)
}


#line 537
EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_getIcaoDocumentVariantWithNSString_(NSString *documentCode) {
  EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_initialize();
  
#line 538
  if ([((NSString *) nil_chk(documentCode)) java_hasPrefix:@"IR"]) {
    return JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IR);
  }
  if ([documentCode java_hasPrefix:@"ID"]) {
    return JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_ID);
  }
  if ([documentCode java_hasPrefix:@"IM"]) {
    return JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IM);
  }
  if ([documentCode java_hasPrefix:@"IT"]) {
    return JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IT);
  }
  if ([documentCode java_hasPrefix:@"IX"]) {
    return JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IX);
  }
  if ([documentCode java_hasPrefix:@"IS"]) {
    return JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_IS);
  }
  if ([documentCode java_hasPrefix:@"P"]) {
    return JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_P);
  }
  return JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant, DOC_VAR_OTHER);
}

IOSObjectArray *EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_values() {
  EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_initialize();
  return [IOSObjectArray arrayWithObjects:EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_values_ count:8 type:EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_class_()];
}

EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_valueOfWithNSString_(NSString *name) {
  EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_initialize();
  for (int i = 0; i < 8; i++) {
    EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *e = EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant *EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_fromOrdinal(NSUInteger ordinal) {
  EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_initialize();
  if (ordinal >= 8) {
    return nil;
  }
  return EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardIcaoMrz_IcaoDocumentVariant)

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/icao/Mrz.java"

J2OBJC_INITIALIZED_DEFN(EsGobJmulticardCardIcaoMrz_IcaoDocumentType)

EsGobJmulticardCardIcaoMrz_IcaoDocumentType *EsGobJmulticardCardIcaoMrz_IcaoDocumentType_values_[3];


#line 564
@implementation EsGobJmulticardCardIcaoMrz_IcaoDocumentType


#line 595
+ (EsGobJmulticardCardIcaoMrz_IcaoDocumentType *)getIcaoDocumentTypeWithNSString:(NSString *)documentCode {
  return EsGobJmulticardCardIcaoMrz_IcaoDocumentType_getIcaoDocumentTypeWithNSString_(documentCode);
}

+ (IOSObjectArray *)values {
  return EsGobJmulticardCardIcaoMrz_IcaoDocumentType_values();
}

+ (EsGobJmulticardCardIcaoMrz_IcaoDocumentType *)valueOfWithNSString:(NSString *)name {
  return EsGobJmulticardCardIcaoMrz_IcaoDocumentType_valueOfWithNSString_(name);
}

- (EsGobJmulticardCardIcaoMrz_IcaoDocumentType_Enum)toNSEnum {
  return (EsGobJmulticardCardIcaoMrz_IcaoDocumentType_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEsGobJmulticardCardIcaoMrz_IcaoDocumentType;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LEsGobJmulticardCardIcaoMrz_IcaoDocumentType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobJmulticardCardIcaoMrz_IcaoDocumentType;", 0x9, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getIcaoDocumentTypeWithNSString:);
  methods[1].selector = @selector(values);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DOC_TYPE_ID1", "LEsGobJmulticardCardIcaoMrz_IcaoDocumentType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "DOC_TYPE_ID3", "LEsGobJmulticardCardIcaoMrz_IcaoDocumentType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "DOC_TYPE_UNSPECIFIED", "LEsGobJmulticardCardIcaoMrz_IcaoDocumentType;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "getIcaoDocumentType", "LNSString;", "valueOf", &JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentType, DOC_TYPE_ID1), &JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentType, DOC_TYPE_ID3), &JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentType, DOC_TYPE_UNSPECIFIED), "LEsGobJmulticardCardIcaoMrz;", "Ljava/lang/Enum<Les/gob/jmulticard/card/icao/Mrz$IcaoDocumentType;>;" };
  static const J2ObjcClassInfo _EsGobJmulticardCardIcaoMrz_IcaoDocumentType = { "IcaoDocumentType", "es.gob.jmulticard.card.icao", ptrTable, methods, fields, 7, 0x4019, 3, 3, 6, -1, -1, 7, -1 };
  return &_EsGobJmulticardCardIcaoMrz_IcaoDocumentType;
}

+ (void)initialize {
  if (self == [EsGobJmulticardCardIcaoMrz_IcaoDocumentType class]) {
    JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentType, DOC_TYPE_ID1) = new_EsGobJmulticardCardIcaoMrz_IcaoDocumentType_initWithNSString_withInt_(JreEnumConstantName(EsGobJmulticardCardIcaoMrz_IcaoDocumentType_class_(), 0), 0);
    JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentType, DOC_TYPE_ID3) = new_EsGobJmulticardCardIcaoMrz_IcaoDocumentType_initWithNSString_withInt_(JreEnumConstantName(EsGobJmulticardCardIcaoMrz_IcaoDocumentType_class_(), 1), 1);
    JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentType, DOC_TYPE_UNSPECIFIED) = new_EsGobJmulticardCardIcaoMrz_IcaoDocumentType_initWithNSString_withInt_(JreEnumConstantName(EsGobJmulticardCardIcaoMrz_IcaoDocumentType_class_(), 2), 2);
    J2OBJC_SET_INITIALIZED(EsGobJmulticardCardIcaoMrz_IcaoDocumentType)
  }
}

@end


#line 564
void EsGobJmulticardCardIcaoMrz_IcaoDocumentType_initWithNSString_withInt_(EsGobJmulticardCardIcaoMrz_IcaoDocumentType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}


#line 564
EsGobJmulticardCardIcaoMrz_IcaoDocumentType *new_EsGobJmulticardCardIcaoMrz_IcaoDocumentType_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardIcaoMrz_IcaoDocumentType, initWithNSString_withInt_, __name, __ordinal)
}


#line 595
EsGobJmulticardCardIcaoMrz_IcaoDocumentType *EsGobJmulticardCardIcaoMrz_IcaoDocumentType_getIcaoDocumentTypeWithNSString_(NSString *documentCode) {
  EsGobJmulticardCardIcaoMrz_IcaoDocumentType_initialize();
  
#line 596
  if (documentCode == nil || [documentCode java_length] < 1 || [documentCode java_length] > 2) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"El tipo de documento debe tener uno o dos caracteres, pero se recibio: ",
#line 598
    documentCode));
  }
  
#line 601
  if ([documentCode java_hasPrefix:@"A"] ||
#line 602
  [documentCode java_hasPrefix:@"C"] ||
#line 603
  [documentCode java_hasPrefix:@"I"] ||
#line 604
  [documentCode java_hasPrefix:@"V"]) {
    
#line 607
    return JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentType, DOC_TYPE_ID1);
  }
  if ([documentCode java_hasPrefix:@"P"]) {
    
#line 611
    return JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentType, DOC_TYPE_ID3);
  }
  return JreEnum(EsGobJmulticardCardIcaoMrz_IcaoDocumentType, DOC_TYPE_UNSPECIFIED);
}

IOSObjectArray *EsGobJmulticardCardIcaoMrz_IcaoDocumentType_values() {
  EsGobJmulticardCardIcaoMrz_IcaoDocumentType_initialize();
  return [IOSObjectArray arrayWithObjects:EsGobJmulticardCardIcaoMrz_IcaoDocumentType_values_ count:3 type:EsGobJmulticardCardIcaoMrz_IcaoDocumentType_class_()];
}

EsGobJmulticardCardIcaoMrz_IcaoDocumentType *EsGobJmulticardCardIcaoMrz_IcaoDocumentType_valueOfWithNSString_(NSString *name) {
  EsGobJmulticardCardIcaoMrz_IcaoDocumentType_initialize();
  for (int i = 0; i < 3; i++) {
    EsGobJmulticardCardIcaoMrz_IcaoDocumentType *e = EsGobJmulticardCardIcaoMrz_IcaoDocumentType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EsGobJmulticardCardIcaoMrz_IcaoDocumentType *EsGobJmulticardCardIcaoMrz_IcaoDocumentType_fromOrdinal(NSUInteger ordinal) {
  EsGobJmulticardCardIcaoMrz_IcaoDocumentType_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return EsGobJmulticardCardIcaoMrz_IcaoDocumentType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardIcaoMrz_IcaoDocumentType)
