//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/CompressionUtils.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/CryptoHelper.h"
#include "es/gob/jmulticard/JmcLogger.h"
#include "es/gob/jmulticard/card/CompressionUtils.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/zip/DataFormatException.h"
#include "java/util/zip/Inflater.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/card/CompressionUtils must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardCardCompressionUtils ()

/*!
 @brief Constructor privado y vac&iacute;o.
 */
- (instancetype)init;

/*!
 @brief Descomprime un certificado.
 @param compressedCertificate Certificado comprimido en ZIP a partir del 9 octeto.
 @return Certificado codificado.
 @throw IOExceptionCuando se produce un error en la descompresi&oacute;n del certificado.
 */
+ (IOSByteArray *)deflateWithByteArray:(IOSByteArray *)compressedCertificate;

@end

__attribute__((unused)) static void EsGobJmulticardCardCompressionUtils_init(EsGobJmulticardCardCompressionUtils *self);

__attribute__((unused)) static EsGobJmulticardCardCompressionUtils *new_EsGobJmulticardCardCompressionUtils_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobJmulticardCardCompressionUtils *create_EsGobJmulticardCardCompressionUtils_init(void);

__attribute__((unused)) static IOSByteArray *EsGobJmulticardCardCompressionUtils_deflateWithByteArray_(IOSByteArray *compressedCertificate);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/CompressionUtils.java"


#line 16
@implementation EsGobJmulticardCardCompressionUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EsGobJmulticardCardCompressionUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 32
+ (JavaSecurityCertX509Certificate *)getCertificateFromCompressedOrNotDataWithByteArray:(IOSByteArray *)data
                                                        withEsGobJmulticardCryptoHelper:(EsGobJmulticardCryptoHelper *)cryptoHelper {
  return EsGobJmulticardCardCompressionUtils_getCertificateFromCompressedOrNotDataWithByteArray_withEsGobJmulticardCryptoHelper_(data, cryptoHelper);
}


#line 62
+ (IOSByteArray *)deflateWithByteArray:(IOSByteArray *)compressedCertificate {
  return EsGobJmulticardCardCompressionUtils_deflateWithByteArray_(compressedCertificate);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509Certificate;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0xa, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getCertificateFromCompressedOrNotDataWithByteArray:withEsGobJmulticardCryptoHelper:);
  methods[2].selector = @selector(deflateWithByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getCertificateFromCompressedOrNotData", "[BLEsGobJmulticardCryptoHelper;", "LJavaIoIOException;LJavaSecurityCertCertificateException;", "deflate", "[B", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _EsGobJmulticardCardCompressionUtils = { "CompressionUtils", "es.gob.jmulticard.card", ptrTable, methods, NULL, 7, 0x11, 3, 0, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardCardCompressionUtils;
}

@end


#line 19
void EsGobJmulticardCardCompressionUtils_init(EsGobJmulticardCardCompressionUtils *self) {
  NSObject_init(self);
}


#line 19
EsGobJmulticardCardCompressionUtils *new_EsGobJmulticardCardCompressionUtils_init() {
  J2OBJC_NEW_IMPL(EsGobJmulticardCardCompressionUtils, init)
}


#line 19
EsGobJmulticardCardCompressionUtils *create_EsGobJmulticardCardCompressionUtils_init() {
  J2OBJC_CREATE_IMPL(EsGobJmulticardCardCompressionUtils, init)
}


#line 32
JavaSecurityCertX509Certificate *EsGobJmulticardCardCompressionUtils_getCertificateFromCompressedOrNotDataWithByteArray_withEsGobJmulticardCryptoHelper_(IOSByteArray *data, EsGobJmulticardCryptoHelper *cryptoHelper) {
  EsGobJmulticardCardCompressionUtils_initialize();
  
#line 35
  if (data == nil || data->size_ < 1) {
    @throw new_JavaIoIOException_initWithNSString_(@"Los datos del certificado eran nulos o vacios");
  }
  if (cryptoHelper == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 40
    @"El CryptoHelper no puede ser nulo");
  }
  
#line 43
  IOSByteArray *rawData;
  @try {
    rawData = EsGobJmulticardCardCompressionUtils_deflateWithByteArray_(
#line 46
    data);
  }
  @catch (
#line 49
  JavaLangException *e) {
    EsGobJmulticardJmcLogger_warningWithNSString_(JreStrcat("$@", @"Ha fallado la descompresion del certificado, se probara sin descomprimir: ",
#line 51
    e));
    
#line 53
    rawData = data;
  }
  return EsGobJmulticardCryptoHelper_generateCertificateWithByteArray_(rawData);
}


#line 62
IOSByteArray *EsGobJmulticardCardCompressionUtils_deflateWithByteArray_(IOSByteArray *compressedCertificate) {
  EsGobJmulticardCardCompressionUtils_initialize();
  
#line 63
  JavaIoByteArrayOutputStream *buffer = new_JavaIoByteArrayOutputStream_init();
  JavaUtilZipInflater *decompressor = new_JavaUtilZipInflater_init();
  [decompressor setInputWithByteArray:compressedCertificate withInt:8 withInt:((IOSByteArray *) nil_chk(compressedCertificate))->size_ - 8];
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:1024];
  @try {
    
#line 69
    while (![decompressor finished]) {
      jint count = [decompressor inflateWithByteArray:buf];
      if (count == 0) {
        @throw new_JavaUtilZipDataFormatException_init();
      }
      [buffer writeWithByteArray:buf withInt:0 withInt:count];
    }
    
#line 77
    return [buffer toByteArray];
  }
  @catch (JavaUtilZipDataFormatException *ex) {
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(@"Error al descomprimir el certificado", ex);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardCardCompressionUtils)
