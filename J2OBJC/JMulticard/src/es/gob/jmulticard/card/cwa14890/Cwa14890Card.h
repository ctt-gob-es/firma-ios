//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/card/cwa14890/Cwa14890Card.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobJmulticardCardCwa14890Cwa14890Card")
#ifdef RESTRICT_EsGobJmulticardCardCwa14890Cwa14890Card
#define INCLUDE_ALL_EsGobJmulticardCardCwa14890Cwa14890Card 0
#else
#define INCLUDE_ALL_EsGobJmulticardCardCwa14890Cwa14890Card 1
#endif
#undef RESTRICT_EsGobJmulticardCardCwa14890Cwa14890Card

#if !defined (EsGobJmulticardCardCwa14890Cwa14890Card_) && (INCLUDE_ALL_EsGobJmulticardCardCwa14890Cwa14890Card || defined(INCLUDE_EsGobJmulticardCardCwa14890Cwa14890Card))
#define EsGobJmulticardCardCwa14890Cwa14890Card_

@class IOSByteArray;
@protocol EsGobJmulticardCardCwa14890Cwa14890PrivateConstants;
@protocol EsGobJmulticardCardCwa14890Cwa14890PublicConstants;
@protocol JavaSecurityInterfacesRSAPrivateKey;
@protocol JavaSecurityInterfacesRSAPublicKey;

/*!
 @brief Tarjetas acordes a la especificaci&oacute;n
  <a href="https://www.dnielectronico.es/PDFs/cwa14890-02-2004-May.pdf">CWA-14890</a>.
 @author Carlos Gamuci
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s.
 */
@protocol EsGobJmulticardCardCwa14890Cwa14890Card < JavaObject >

/*!
 @brief Verifica el certificado de componente de la tarjeta.
 @throw CertificateExceptionCuando ocurre alg&uacute;n problema en la
          validaci&oacute;n del certificado.
 @throw IOExceptionCuando ocurre alg&uacute;n problema en la selecci&oacute;n
                      y lectura del certificado.
 @throw SecurityExceptionSi falla la validaci&oacute;n del certificado.
 */
- (void)verifyIcc;

/*!
 @brief Recupera la clave p&uacute;blica del certificado de componente.
 @return Clave p&uacute;blica del certificado de componente.
 @throw IOExceptionCuando ocurre alg&uacute;n problema en la selecci&oacute;n
                      y lectura del certificado
 */
- (id<JavaSecurityInterfacesRSAPublicKey>)getIccCertPublicKey;

/*!
 @brief Verifica que los certificados declarados por el controlador (certificados de
  terminal) sean v&aacute;lidos para el uso de la tarjeta.
 @param consts Clase de claves.
 @throw ApduConnectionExceptionCuando ocurre alg&iacute;n error en la
          comunicaci&oacute;n con la tarjeta.
 */
- (void)verifyIfdCertificateChainWithEsGobJmulticardCardCwa14890Cwa14890PublicConstants:(id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>)consts;

/*!
 @brief Obtiene el mensaje de autenticaci&oacute;n interna de la tarjeta.
 @param randomIfd Bytes aleatorios generados.
 @param chrCCvIfd CHR de la clave p &uacute; blica del certificado de terminal.
 @return Mensaje cifrado con la clave privada de componente de la tarjeta.
 @throw ApduConnectionExceptionCuando ocurre un error de comunicaci&oacute;n con la tarjeta.
 */
- (IOSByteArray *)getInternalAuthenticateMessageWithByteArray:(IOSByteArray *)randomIfd
                                                withByteArray:(IOSByteArray *)chrCCvIfd;

/*!
 @brief Envia el mensaje de autenticaci&oacute;n externa.
 @param extAuthenticationData Mensaje de autenticaci &oacute; n externa.
 @return <code>true</code> si la autenticaci&oacute;n finaliz&oacute; correctamente, <code>false</code> en caso contrario.
 @throw ApduConnectionExceptionCuando ocurre un error en la comunicaci&oacute;n con
                                  la tarjeta.
 */
- (jboolean)externalAuthenticationWithByteArray:(IOSByteArray *)extAuthenticationData;

/*!
 @brief Establece una clave p&uacute;blica y otra privada para la autenticaci&oacute;n.
 interna y externa de la tarjeta.
 @param refPublicKey Referencia a la clave p &uacute; blica.
 @param refPrivateKey Referencia a la clave privada.
 @throw ApduConnectionExceptionCuando ocurre un error de comunicaci&oacute;n con la tarjeta.
 */
- (void)setKeysToAuthenticationWithByteArray:(IOSByteArray *)refPublicKey
                               withByteArray:(IOSByteArray *)refPrivateKey;

/*!
 @brief Solicita un desaf&iacute;o de 8 octetos a la tarjeta.
 @return Array de 8 bytes aleatorios.
 @throw ApduConnectionExceptionCuando ocurre un error de comunicaci&oacute;n con la tarjeta
 */
- (IOSByteArray *)getChallenge;

/*!
 @brief Recupera el n&uacute;mero de serie de la tarjeta.
 @return N&uacute;mero de serie.
 @throw ApduConnectionExceptionCuando ocurre un error en la comunicaci&oacute;n con la tarjeta.
 */
- (IOSByteArray *)getSerialNumber;

/*!
 @brief Recupera la referencia a la clave privada del certificado de componente.
 @param consts Clase de claves.
 @return Referencia a clave privada
 */
- (IOSByteArray *)getRefIccPrivateKeyWithEsGobJmulticardCardCwa14890Cwa14890PublicConstants:(id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>)consts;

/*!
 @brief Recupera el CHR de la clave p&uacute;blica del certificado de terminal.
 @param consts Clase de claves.
 @return Referencia a clave p&uacute;blica
 */
- (IOSByteArray *)getChrCCvIfdWithEsGobJmulticardCardCwa14890Cwa14890PublicConstants:(id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>)consts;

/*!
 @brief Recupera la clave privada del certificado de componente del terminal.
 @param consts Clase de claves privadas.
 @return Clave privada.
 */
- (id<JavaSecurityInterfacesRSAPrivateKey>)getIfdPrivateKeyWithEsGobJmulticardCardCwa14890Cwa14890PrivateConstants:(id<EsGobJmulticardCardCwa14890Cwa14890PrivateConstants>)consts;

/*!
 @brief Obtiene la longitud, <u>en octetos</u>, de las claves RSA del certificado de comnponente del terminal.
 @param consts Clase de claves.
 @return Longitud, <u>en octetos</u>, de las claves RSA del certificado de
          comnponente del terminal.
 */
- (jint)getIfdKeyLengthWithEsGobJmulticardCardCwa14890Cwa14890PublicConstants:(id<EsGobJmulticardCardCwa14890Cwa14890PublicConstants>)consts;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobJmulticardCardCwa14890Cwa14890Card)

J2OBJC_TYPE_LITERAL_HEADER(EsGobJmulticardCardCwa14890Cwa14890Card)

#endif

#pragma pop_macro("INCLUDE_ALL_EsGobJmulticardCardCwa14890Cwa14890Card")
