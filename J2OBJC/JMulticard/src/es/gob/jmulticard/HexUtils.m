//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/HexUtils.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/jmulticard/HexUtils.h"
#include "es/gob/jmulticard/JmcLogger.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"

#if !__has_feature(objc_arc)
#error "es/gob/jmulticard/HexUtils must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobJmulticardHexUtils ()

/*!
 @brief Constructor privado.
 */
- (instancetype)init;

@end

/*!
 @brief Equivalencias de hexadecimal a texto por la posici&oacute;n del vector.
 Para ser usado en <code>hexify()</code>.
 */
inline IOSCharArray *EsGobJmulticardHexUtils_get_HEX_CHARS(void);
static IOSCharArray *EsGobJmulticardHexUtils_HEX_CHARS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobJmulticardHexUtils, HEX_CHARS, IOSCharArray *)

__attribute__((unused)) static void EsGobJmulticardHexUtils_init(EsGobJmulticardHexUtils *self);

__attribute__((unused)) static EsGobJmulticardHexUtils *new_EsGobJmulticardHexUtils_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobJmulticardHexUtils *create_EsGobJmulticardHexUtils_init(void);

#line 1 "/Users/desarrolloabamobile/Downloads/jmulticard-ios/src/main/java/es/gob/jmulticard/HexUtils.java"

J2OBJC_INITIALIZED_DEFN(EsGobJmulticardHexUtils)


#line 50
@implementation EsGobJmulticardHexUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 59
- (instancetype)init {
  EsGobJmulticardHexUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 68
+ (jboolean)arrayEqualsWithByteArray:(IOSByteArray *)v
                       withByteArray:(IOSByteArray *)w {
  return EsGobJmulticardHexUtils_arrayEqualsWithByteArray_withByteArray_(v, w);
}


#line 81
+ (jboolean)arrayEqualsWithByteArray:(IOSByteArray *)v
                             withInt:(jint)vOffset
                             withInt:(jint)vLen
                       withByteArray:(IOSByteArray *)w
                             withInt:(jint)wOffset
                             withInt:(jint)wLen {
  return EsGobJmulticardHexUtils_arrayEqualsWithByteArray_withInt_withInt_withByteArray_withInt_withInt_(v, vOffset, vLen, w, wOffset, wLen);
}


#line 103
+ (jshort)getShortWithByteArray:(IOSByteArray *)data
                        withInt:(jint)offset {
  return EsGobJmulticardHexUtils_getShortWithByteArray_withInt_(data, offset);
}


#line 113
+ (jint)getUnsignedIntWithByteArray:(IOSByteArray *)data
                            withInt:(jint)offset {
  return EsGobJmulticardHexUtils_getUnsignedIntWithByteArray_withInt_(data, offset);
}


#line 127
+ (NSString *)hexifyWithByteArray:(IOSByteArray *)abyte
                      withBoolean:(jboolean)separator {
  return EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(abyte, separator);
}


#line 154
+ (IOSByteArray *)subArrayWithByteArray:(IOSByteArray *)src
                                withInt:(jint)srcPos
                                withInt:(jint)length {
  return EsGobJmulticardHexUtils_subArrayWithByteArray_withInt_withInt_(src, srcPos, length);
}


#line 169
+ (IOSByteArray *)xor__WithByteArray:(IOSByteArray *)v
                       withByteArray:(IOSByteArray *)w {
  return EsGobJmulticardHexUtils_xor__WithByteArray_withByteArray_(v, w);
}


#line 185
+ (IOSByteArray *)concatenateByteArraysWithByteArray2:(IOSObjectArray *)arrays {
  return EsGobJmulticardHexUtils_concatenateByteArraysWithByteArray2_(arrays);
}


#line 202
+ (IOSByteArray *)charArrayToByteArrayWithCharArray:(IOSCharArray *)inCharArray {
  return EsGobJmulticardHexUtils_charArrayToByteArrayWithCharArray_(inCharArray);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "S", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 5, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 10, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x89, 11, 12, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(arrayEqualsWithByteArray:withByteArray:);
  methods[2].selector = @selector(arrayEqualsWithByteArray:withInt:withInt:withByteArray:withInt:withInt:);
  methods[3].selector = @selector(getShortWithByteArray:withInt:);
  methods[4].selector = @selector(getUnsignedIntWithByteArray:withInt:);
  methods[5].selector = @selector(hexifyWithByteArray:withBoolean:);
  methods[6].selector = @selector(subArrayWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(xor__WithByteArray:withByteArray:);
  methods[8].selector = @selector(concatenateByteArraysWithByteArray2:);
  methods[9].selector = @selector(charArrayToByteArrayWithCharArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HEX_CHARS", "[C", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
  };
  static const void *ptrTable[] = { "arrayEquals", "[B[B", "[BII[BII", "getShort", "[BI", "getUnsignedInt", "hexify", "[BZ", "subArray", "[BII", "xor", "concatenateByteArrays", "[[B", "charArrayToByteArray", "[C", &EsGobJmulticardHexUtils_HEX_CHARS };
  static const J2ObjcClassInfo _EsGobJmulticardHexUtils = { "HexUtils", "es.gob.jmulticard", ptrTable, methods, fields, 7, 0x11, 10, 1, -1, -1, -1, -1, -1 };
  return &_EsGobJmulticardHexUtils;
}

+ (void)initialize {
  if (self == [EsGobJmulticardHexUtils class]) {
    EsGobJmulticardHexUtils_HEX_CHARS = [IOSCharArray newArrayWithChars:(jchar[]){
#line 55
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' } count:16];
      J2OBJC_SET_INITIALIZED(EsGobJmulticardHexUtils)
    }
  }

@end


#line 59
void EsGobJmulticardHexUtils_init(EsGobJmulticardHexUtils *self) {
  NSObject_init(self);
}


#line 59
EsGobJmulticardHexUtils *new_EsGobJmulticardHexUtils_init() {
  J2OBJC_NEW_IMPL(EsGobJmulticardHexUtils, init)
}


#line 59
EsGobJmulticardHexUtils *create_EsGobJmulticardHexUtils_init() {
  J2OBJC_CREATE_IMPL(EsGobJmulticardHexUtils, init)
}


#line 68
jboolean EsGobJmulticardHexUtils_arrayEqualsWithByteArray_withByteArray_(IOSByteArray *v, IOSByteArray *w) {
  EsGobJmulticardHexUtils_initialize();
  
#line 69
  return EsGobJmulticardHexUtils_arrayEqualsWithByteArray_withInt_withInt_withByteArray_withInt_withInt_(v, 0, ((IOSByteArray *) nil_chk(v))->size_, w, 0, ((IOSByteArray *) nil_chk(w))->size_);
}


#line 81
jboolean EsGobJmulticardHexUtils_arrayEqualsWithByteArray_withInt_withInt_withByteArray_withInt_withInt_(IOSByteArray *v, jint vOffset, jint vLen, IOSByteArray *w, jint wOffset, jint wLen) {
  EsGobJmulticardHexUtils_initialize();
  
#line 88
  if (vLen != wLen || ((IOSByteArray *) nil_chk(v))->size_ < vOffset + vLen || ((IOSByteArray *) nil_chk(w))->size_ < wOffset + wLen) {
    return false;
  }
  for (jint i = 0; i < vLen; i++) {
    if (IOSByteArray_Get(nil_chk(v), i + vOffset) != IOSByteArray_Get(nil_chk(w), i + wOffset)) {
      return false;
    }
  }
  return true;
}


#line 103
jshort EsGobJmulticardHexUtils_getShortWithByteArray_withInt_(IOSByteArray *data, jint offset) {
  EsGobJmulticardHexUtils_initialize();
  
#line 104
  return (jshort) EsGobJmulticardHexUtils_getUnsignedIntWithByteArray_withInt_(data, offset);
}


#line 113
jint EsGobJmulticardHexUtils_getUnsignedIntWithByteArray_withInt_(IOSByteArray *data, jint offset) {
  EsGobJmulticardHexUtils_initialize();
  
#line 114
  if (((IOSByteArray *) nil_chk(data))->size_ - offset < 2) {
    return IOSByteArray_Get(data, offset) & (jint) 0xff;
  }
  return (JreLShift32((IOSByteArray_Get(data, offset) & (jint) 0xff), 8)) | (IOSByteArray_Get(data, offset + 1) & (jint) 0xff);
}


#line 127
NSString *EsGobJmulticardHexUtils_hexifyWithByteArray_withBoolean_(IOSByteArray *abyte, jboolean separator) {
  EsGobJmulticardHexUtils_initialize();
  
#line 128
  if (abyte == nil) {
    return @"null";
  }
  JavaLangStringBuilder *stringbuilder = new_JavaLangStringBuilder_initWithInt_(256);
  jint i = 0;
  {
    IOSByteArray *a__ =
#line 133
    abyte;
    jbyte const *b__ = a__->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte element = *b__++;
      
#line 134
      if (separator && i > 0) {
        (void) [stringbuilder appendWithChar:'-'];
      }
      (void) [stringbuilder appendWithChar:IOSCharArray_Get(nil_chk(EsGobJmulticardHexUtils_HEX_CHARS), (JreRShift32(element, 4)) & (jint) 0xf)];
      (void) [stringbuilder appendWithChar:IOSCharArray_Get(EsGobJmulticardHexUtils_HEX_CHARS, element & (jint) 0xf)];
      if (++i == 16) {
        if (separator) {
          (void) [stringbuilder appendWithChar:0x000a];
        }
        i = 0;
      }
    }
  }
  
#line 146
  return [stringbuilder description];
}


#line 154
IOSByteArray *EsGobJmulticardHexUtils_subArrayWithByteArray_withInt_withInt_(IOSByteArray *src, jint srcPos, jint length) {
  EsGobJmulticardHexUtils_initialize();
  
#line 155
  if (length == 0 || ((IOSByteArray *) nil_chk(src))->size_ < srcPos + length) {
    return nil;
  }
  IOSByteArray *temp = [IOSByteArray newArrayWithLength:length];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(src, srcPos, temp, 0, length);
  return temp;
}


#line 169
IOSByteArray *EsGobJmulticardHexUtils_xor__WithByteArray_withByteArray_(IOSByteArray *v, IOSByteArray *w) {
  EsGobJmulticardHexUtils_initialize();
  IOSByteArray *xored = [((JavaMathBigInteger *) nil_chk([new_JavaMathBigInteger_initWithInt_withByteArray_(1, v) xor__WithJavaMathBigInteger:new_JavaMathBigInteger_initWithInt_withByteArray_(1, w)])) toByteArray];
  IOSByteArray *trimmedXor = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(v))->size_];
  if (((IOSByteArray *) nil_chk(xored))->size_ >= trimmedXor->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(xored, xored->size_ - trimmedXor->size_, trimmedXor, 0, trimmedXor->size_);
  }
  else {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(xored, 0, trimmedXor, trimmedXor->size_ - xored->size_, xored->size_);
  }
  return trimmedXor;
}


#line 185
IOSByteArray *EsGobJmulticardHexUtils_concatenateByteArraysWithByteArray2_(IOSObjectArray *arrays) {
  EsGobJmulticardHexUtils_initialize();
  
#line 186
  JavaIoByteArrayOutputStream *baos = new_JavaIoByteArrayOutputStream_init();
  {
    IOSObjectArray *a__ =
#line 187
    arrays;
    IOSByteArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSByteArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSByteArray *array = *b__++;
      
#line 188
      @try {
        [baos writeWithByteArray:array];
      }
      @catch (JavaIoIOException *e) {
        @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"Error construyendo el campo de datos", e);
      }
    }
  }
  
#line 195
  return [baos toByteArray];
}


#line 202
IOSByteArray *EsGobJmulticardHexUtils_charArrayToByteArrayWithCharArray_(IOSCharArray *inCharArray) {
  EsGobJmulticardHexUtils_initialize();
  
#line 203
  if (inCharArray == nil) {
    EsGobJmulticardJmcLogger_warningWithNSString_(@"Se ha pedido convertir un array de caracteres nulo, se devolvera otro vacio de octetos");
    return [IOSByteArray newArrayWithLength:0];
  }
  if (inCharArray->size_ < 1) {
    EsGobJmulticardJmcLogger_warningWithNSString_(@"El array de caracteres proporcionado esta vacio, se devolvera otro vacio de octetos");
    return [IOSByteArray newArrayWithLength:0];
  }
  IOSByteArray *ret = [IOSByteArray newArrayWithLength:inCharArray->size_];
  for (jint i = 0; i < inCharArray->size_; i++) {
    *IOSByteArray_GetRef(ret, i) = (jbyte) IOSCharArray_Get(inCharArray, i);
  }
  return ret;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobJmulticardHexUtils)
