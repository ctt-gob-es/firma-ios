//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/misc/BoundedBufferedReader.java
//

#include "BoundedBufferedReader.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/IllegalArgumentException.h"

#if !__has_feature(objc_arc)
#error "BoundedBufferedReader must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreMiscBoundedBufferedReader () {
 @public
  jint readerMaxLines_;
  jint readerMaxLineLen_;
  jint currentLine_;
}

@end

inline jint EsGobAfirmaCoreMiscBoundedBufferedReader_get_DEFAULT_MAX_LINES(void);
#define EsGobAfirmaCoreMiscBoundedBufferedReader_DEFAULT_MAX_LINES 4096
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreMiscBoundedBufferedReader, DEFAULT_MAX_LINES, jint)

inline jint EsGobAfirmaCoreMiscBoundedBufferedReader_get_DEFAULT_MAX_LINE_LENGTH(void);
#define EsGobAfirmaCoreMiscBoundedBufferedReader_DEFAULT_MAX_LINE_LENGTH 4096
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreMiscBoundedBufferedReader, DEFAULT_MAX_LINE_LENGTH, jint)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/misc/BoundedBufferedReader.java"


#line 14
@implementation EsGobAfirmaCoreMiscBoundedBufferedReader


#line 27
- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader
                             withInt:(jint)maxLines
                             withInt:(jint)maxLineLen {
  EsGobAfirmaCoreMiscBoundedBufferedReader_initWithJavaIoReader_withInt_withInt_(self, reader, maxLines, maxLineLen);
  return self;
}


#line 39
- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader {
  EsGobAfirmaCoreMiscBoundedBufferedReader_initWithJavaIoReader_(self, reader);
  return self;
}


#line 45
- (NSString *)readLine {
  
#line 48
  if (self->currentLine_ > self->readerMaxLines_) {
    @throw new_JavaIoIOException_initWithNSString_(@"BoundedBufferedReader - Line read limit has been reached.");
  }
  self->currentLine_++;
  
#line 53
  jint currentPos = 0;
  IOSCharArray *data = [IOSCharArray newArrayWithLength:self->readerMaxLineLen_];
  jint CR = 13;
  jint LF = 10;
  jint currentCharVal = [super read];
  
#line 60
  while (currentCharVal != CR && currentCharVal != LF && currentCharVal >= 0) {
    *IOSCharArray_GetRef(data, currentPos++) = (jchar) currentCharVal;
    
#line 63
    if (currentPos < self->readerMaxLineLen_) {
      currentCharVal = [super read];
    }
    else {
      break;
    }
  }
  
#line 71
  if (currentCharVal < 0) {
    
#line 73
    if (currentPos > 0) {
      
#line 75
      return [NSString java_stringWithCharacters:data offset:0 length:currentPos];
    }
    return nil;
  }
  
#line 80
  if (currentCharVal == CR) {
    
#line 82
    [super markWithInt:1];
    if ([super read] != LF) {
      [super reset];
    }
  }
  else if (currentCharVal != LF) {
    
#line 89
    [super markWithInt:1];
    jint nextCharVal = [super read];
    if (nextCharVal == CR) {
      [super markWithInt:1];
      if ([super read] != LF) {
        [super reset];
      }
    }
    else if (nextCharVal != LF) {
      [super reset];
    }
  }
  return [NSString java_stringWithCharacters:data offset:0 length:currentPos];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoReader:withInt:withInt:);
  methods[1].selector = @selector(initWithJavaIoReader:);
  methods[2].selector = @selector(readLine);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_MAX_LINES", "I", .constantValue.asInt = EsGobAfirmaCoreMiscBoundedBufferedReader_DEFAULT_MAX_LINES, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_MAX_LINE_LENGTH", "I", .constantValue.asInt = EsGobAfirmaCoreMiscBoundedBufferedReader_DEFAULT_MAX_LINE_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "readerMaxLines_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "readerMaxLineLen_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currentLine_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoReader;II", "LJavaIoReader;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _EsGobAfirmaCoreMiscBoundedBufferedReader = { "BoundedBufferedReader", "es.gob.afirma.core.misc", ptrTable, methods, fields, 7, 0x11, 3, 5, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreMiscBoundedBufferedReader;
}

@end


#line 27
void EsGobAfirmaCoreMiscBoundedBufferedReader_initWithJavaIoReader_withInt_withInt_(EsGobAfirmaCoreMiscBoundedBufferedReader *self, JavaIoReader *reader, jint maxLines, jint maxLineLen) {
  JavaIoBufferedReader_initWithJavaIoReader_(self, reader);
  self->currentLine_ =
#line 21
  1;
  
#line 29
  if (maxLines <= 0 || maxLineLen <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"BoundedBufferedReader - maxLines and maxLineLen must be greater than 0");
  }
  
#line 33
  self->readerMaxLines_ = maxLines;
  self->readerMaxLineLen_ = maxLineLen;
}


#line 27
EsGobAfirmaCoreMiscBoundedBufferedReader *new_EsGobAfirmaCoreMiscBoundedBufferedReader_initWithJavaIoReader_withInt_withInt_(JavaIoReader *reader, jint maxLines, jint maxLineLen) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscBoundedBufferedReader, initWithJavaIoReader_withInt_withInt_, reader, maxLines, maxLineLen)
}


#line 27
EsGobAfirmaCoreMiscBoundedBufferedReader *create_EsGobAfirmaCoreMiscBoundedBufferedReader_initWithJavaIoReader_withInt_withInt_(JavaIoReader *reader, jint maxLines, jint maxLineLen) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscBoundedBufferedReader, initWithJavaIoReader_withInt_withInt_, reader, maxLines, maxLineLen)
}


#line 39
void EsGobAfirmaCoreMiscBoundedBufferedReader_initWithJavaIoReader_(EsGobAfirmaCoreMiscBoundedBufferedReader *self, JavaIoReader *reader) {
  JavaIoBufferedReader_initWithJavaIoReader_(self, reader);
  self->currentLine_ =
#line 21
  1;
  
#line 41
  self->readerMaxLines_ = EsGobAfirmaCoreMiscBoundedBufferedReader_DEFAULT_MAX_LINES;
  self->readerMaxLineLen_ = EsGobAfirmaCoreMiscBoundedBufferedReader_DEFAULT_MAX_LINE_LENGTH;
}


#line 39
EsGobAfirmaCoreMiscBoundedBufferedReader *new_EsGobAfirmaCoreMiscBoundedBufferedReader_initWithJavaIoReader_(JavaIoReader *reader) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscBoundedBufferedReader, initWithJavaIoReader_, reader)
}


#line 39
EsGobAfirmaCoreMiscBoundedBufferedReader *create_EsGobAfirmaCoreMiscBoundedBufferedReader_initWithJavaIoReader_(JavaIoReader *reader) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscBoundedBufferedReader, initWithJavaIoReader_, reader)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreMiscBoundedBufferedReader)
