//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/http/DataDownloader.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_DataDownloader")
#ifdef RESTRICT_DataDownloader
#define INCLUDE_ALL_DataDownloader 0
#else
#define INCLUDE_ALL_DataDownloader 1
#endif
#undef RESTRICT_DataDownloader

#if !defined (EsGobAfirmaCoreMiscHttpDataDownloader_) && (INCLUDE_ALL_DataDownloader || defined(INCLUDE_EsGobAfirmaCoreMiscHttpDataDownloader))
#define EsGobAfirmaCoreMiscHttpDataDownloader_

@class IOSByteArray;

/*!
 @brief Utilidades para la descarga de datos.
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s.
 */
@interface EsGobAfirmaCoreMiscHttpDataDownloader : NSObject

#pragma mark Public

/*!
 @brief Descarga datos del origen indicado.
 @param ds Origen de los datos. Este puede ser, y se eval &uacute; a en este orden:             <ol>              <li> Una URL de tipo HTTP, HTTPS o FTP. </li>              <li> Datos en formato Base64. </li>              <li> Datos textuales (en este caso de devuelven ellos mismos como binario). </li>             </ol>
 @return Datos obtenidos del origen indicado.
 @throw IOExceptionSi no se pueden obtener los datos.
 */
+ (IOSByteArray *)downloadDataWithNSString:(NSString *)ds;

/*!
 @brief Descarga datos del origen indicado y los descomprime si estuviesen comprimidos.
 @param ds Origen de los datos. Este puede ser, y se eval &uacute; a en este orden:             <ol>              <li> Una URL de tipo HTTP, HTTPS o FTP. </li>              <li> Datos en formato Base64. </li>              <li> Datos textuales (en este caso de devuelven ellos mismos como binario). </li>             </ol>
 @param gzipped Indica si los datos de entrada est &aacute; n comprimidos con GZIP y deben devolverse                 descomprimidos.
 @return Datos obtenidos del origen indicado.
 @throw IOExceptionSi no se pueden obtener los datos.
 */
+ (IOSByteArray *)downloadDataWithNSString:(NSString *)ds
                               withBoolean:(jboolean)gzipped;

/*!
 @brief Descarga datos del origen indicado y los descomprime si estuviesen comprimidos.Permite
  ignorar la validaci&oacute;n del certificado SSL.
 @param ds Origen de los datos. Este puede ser, y se eval &uacute; a en este orden:             <ol>              <li> Una URL de tipo HTTP, HTTPS o FTP. </li>              <li> Datos en formato Base64. </li>              <li> Datos textuales (en este caso de devuelven ellos mismos como binario). </li>             </ol>
 @param gzipped Indica si los datos de entrada est &aacute; n comprimidos con GZIP y deben devolverse                 descomprimidos.
 @param ignoreSSLSecurity Indica si se deber &iacute; a ignorar la validaci &oacute; n SSL de los datos.
 @return Datos obtenidos del origen indicado.
 @throw IOExceptionSi no se pueden obtener los datos.
 */
+ (IOSByteArray *)downloadDataWithNSString:(NSString *)ds
                               withBoolean:(jboolean)gzipped
                               withBoolean:(jboolean)ignoreSSLSecurity;

@end

J2OBJC_STATIC_INIT(EsGobAfirmaCoreMiscHttpDataDownloader)

FOUNDATION_EXPORT IOSByteArray *EsGobAfirmaCoreMiscHttpDataDownloader_downloadDataWithNSString_withBoolean_withBoolean_(NSString *ds, jboolean gzipped, jboolean ignoreSSLSecurity);

FOUNDATION_EXPORT IOSByteArray *EsGobAfirmaCoreMiscHttpDataDownloader_downloadDataWithNSString_withBoolean_(NSString *ds, jboolean gzipped);

FOUNDATION_EXPORT IOSByteArray *EsGobAfirmaCoreMiscHttpDataDownloader_downloadDataWithNSString_(NSString *ds);

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaCoreMiscHttpDataDownloader)

#endif

#pragma pop_macro("INCLUDE_ALL_DataDownloader")
