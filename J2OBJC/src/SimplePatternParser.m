//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/hyphenation/SimplePatternParser.java
//

#include "ExceptionConverter.h"
#include "HtmlTags.h"
#include "Hyphen.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PatternConsumer.h"
#include "SimplePatternParser.h"
#include "SimpleXMLParser.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/StringTokenizer.h"

#if !__has_feature(objc_arc)
#error "SimplePatternParser must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfHyphenationSimplePatternParser () {
 @public
  jint currElement_;
  id<ComAowagieTextPdfHyphenationPatternConsumer> consumer_;
  JavaLangStringBuffer *token_;
  JavaUtilArrayList *exception_;
  jchar hyphenChar_;
}

+ (NSString *)getPatternWithNSString:(NSString *)word;

- (JavaUtilArrayList *)normalizeExceptionWithJavaUtilArrayList:(JavaUtilArrayList *)ex;

- (NSString *)getExceptionWordWithJavaUtilArrayList:(JavaUtilArrayList *)ex;

+ (NSString *)getInterletterValuesWithNSString:(NSString *)pat;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfHyphenationSimplePatternParser, consumer_, id<ComAowagieTextPdfHyphenationPatternConsumer>)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfHyphenationSimplePatternParser, token_, JavaLangStringBuffer *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfHyphenationSimplePatternParser, exception_, JavaUtilArrayList *)

inline jint ComAowagieTextPdfHyphenationSimplePatternParser_get_ELEM_CLASSES(void);
#define ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_CLASSES 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfHyphenationSimplePatternParser, ELEM_CLASSES, jint)

inline jint ComAowagieTextPdfHyphenationSimplePatternParser_get_ELEM_EXCEPTIONS(void);
#define ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_EXCEPTIONS 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfHyphenationSimplePatternParser, ELEM_EXCEPTIONS, jint)

inline jint ComAowagieTextPdfHyphenationSimplePatternParser_get_ELEM_PATTERNS(void);
#define ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_PATTERNS 3
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfHyphenationSimplePatternParser, ELEM_PATTERNS, jint)

inline jint ComAowagieTextPdfHyphenationSimplePatternParser_get_ELEM_HYPHEN(void);
#define ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_HYPHEN 4
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfHyphenationSimplePatternParser, ELEM_HYPHEN, jint)

__attribute__((unused)) static NSString *ComAowagieTextPdfHyphenationSimplePatternParser_getPatternWithNSString_(NSString *word);

__attribute__((unused)) static JavaUtilArrayList *ComAowagieTextPdfHyphenationSimplePatternParser_normalizeExceptionWithJavaUtilArrayList_(ComAowagieTextPdfHyphenationSimplePatternParser *self, JavaUtilArrayList *ex);

__attribute__((unused)) static NSString *ComAowagieTextPdfHyphenationSimplePatternParser_getExceptionWordWithJavaUtilArrayList_(ComAowagieTextPdfHyphenationSimplePatternParser *self, JavaUtilArrayList *ex);

__attribute__((unused)) static NSString *ComAowagieTextPdfHyphenationSimplePatternParser_getInterletterValuesWithNSString_(NSString *pat);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/hyphenation/SimplePatternParser.java"


#line 68
@implementation ComAowagieTextPdfHyphenationSimplePatternParser


#line 91
- (instancetype)initPackagePrivate {
  ComAowagieTextPdfHyphenationSimplePatternParser_initPackagePrivate(self);
  return self;
}

- (void)parseWithJavaIoInputStream:(JavaIoInputStream *)stream
withComAowagieTextPdfHyphenationPatternConsumer:(id<ComAowagieTextPdfHyphenationPatternConsumer>)consumer {
  
#line 97
  self->consumer_ = consumer;
  @try {
    ComAowagieTextXmlSimpleparserSimpleXMLParser_parseWithComAowagieTextXmlSimpleparserSimpleXMLDocHandler_withJavaIoInputStream_(self, stream);
  }
  @catch (
#line 100
  JavaIoIOException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
  @finally {
    
#line 103
    @try {
      [((JavaIoInputStream *) nil_chk(stream)) close];
    }
    @catch (
#line 105
    JavaLangException *e) {
    }
  }
}


#line 110
+ (NSString *)getPatternWithNSString:(NSString *)word {
  return ComAowagieTextPdfHyphenationSimplePatternParser_getPatternWithNSString_(word);
}


#line 121
- (JavaUtilArrayList *)normalizeExceptionWithJavaUtilArrayList:(JavaUtilArrayList *)ex {
  return ComAowagieTextPdfHyphenationSimplePatternParser_normalizeExceptionWithJavaUtilArrayList_(self, ex);
}


#line 152
- (NSString *)getExceptionWordWithJavaUtilArrayList:(JavaUtilArrayList *)ex {
  return ComAowagieTextPdfHyphenationSimplePatternParser_getExceptionWordWithJavaUtilArrayList_(self, ex);
}


#line 167
+ (NSString *)getInterletterValuesWithNSString:(NSString *)pat {
  return ComAowagieTextPdfHyphenationSimplePatternParser_getInterletterValuesWithNSString_(pat);
}


#line 183
- (void)endDocument {
}


#line 187
- (void)endElementWithNSString:(NSString *)tag {
  
#line 189
  if ([((JavaLangStringBuffer *) nil_chk(self->token_)) java_length] > 0) {
    NSString *word = [self->token_ description];
    switch (self->currElement_) {
      case ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_CLASSES:
      [((id<ComAowagieTextPdfHyphenationPatternConsumer>) nil_chk(self->consumer_)) addClassWithNSString:word];
      break;
      case ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_EXCEPTIONS:
      [((JavaUtilArrayList *) nil_chk(self->exception_)) addWithId:word];
      self->exception_ = ComAowagieTextPdfHyphenationSimplePatternParser_normalizeExceptionWithJavaUtilArrayList_(self, self->exception_);
      [((id<ComAowagieTextPdfHyphenationPatternConsumer>) nil_chk(self->consumer_)) addExceptionWithNSString:ComAowagieTextPdfHyphenationSimplePatternParser_getExceptionWordWithJavaUtilArrayList_(self, self->exception_) withJavaUtilArrayList:
#line 199
      (JavaUtilArrayList *) cast_chk([((JavaUtilArrayList *) nil_chk(self->exception_)) java_clone], [JavaUtilArrayList class])];
      break;
      case ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_PATTERNS:
      [((id<ComAowagieTextPdfHyphenationPatternConsumer>) nil_chk(self->consumer_)) addPatternWithNSString:ComAowagieTextPdfHyphenationSimplePatternParser_getPatternWithNSString_(word) withNSString:ComAowagieTextPdfHyphenationSimplePatternParser_getInterletterValuesWithNSString_(
#line 203
      word)];
      break;
      case ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_HYPHEN:
      
#line 207
      break;
    }
    if (self->currElement_ != ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_HYPHEN) {
      [self->token_ setLengthWithInt:0];
    }
  }
  if (self->currElement_ == ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_HYPHEN) {
    self->currElement_ = ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_EXCEPTIONS;
  }
  else {
    
#line 216
    self->currElement_ = 0;
  }
}


#line 220
- (void)startDocument {
}


#line 224
- (void)startElementWithNSString:(NSString *)tag
             withJavaUtilHashMap:(JavaUtilHashMap *)h {
  if ([((NSString *) nil_chk(tag)) isEqual:@"hyphen-char"]) {
    NSString *hh = (NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(h)) getWithId:@"value"], [NSString class]);
    if (hh != nil && [hh java_length] == 1) {
      self->hyphenChar_ = [hh charAtWithInt:0];
    }
  }
  else
#line 231
  if ([tag isEqual:@"classes"]) {
    self->currElement_ = ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_CLASSES;
  }
  else
#line 233
  if ([tag isEqual:@"patterns"]) {
    self->currElement_ = ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_PATTERNS;
  }
  else
#line 235
  if ([tag isEqual:@"exceptions"]) {
    self->currElement_ = ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_EXCEPTIONS;
    self->exception_ = new_JavaUtilArrayList_init();
  }
  else
#line 238
  if ([tag isEqual:@"hyphen"]) {
    if ([((JavaLangStringBuffer *) nil_chk(self->token_)) java_length] > 0) {
      [((JavaUtilArrayList *) nil_chk(self->exception_)) addWithId:[self->token_ description]];
    }
    [((JavaUtilArrayList *) nil_chk(self->exception_)) addWithId:new_ComAowagieTextPdfHyphenationHyphen_initPackagePrivateWithNSString_withNSString_withNSString_((NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(h)) getWithId:ComAowagieTextHtmlHtmlTags_PRE], [NSString class]), (NSString *) cast_chk([h getWithId:
#line 243
    @"no"], [NSString class]), (NSString *) cast_chk([h getWithId:@"post"], [NSString class]))];
    self->currElement_ = ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_HYPHEN;
  }
  [((JavaLangStringBuffer *) nil_chk(self->token_)) setLengthWithInt:0];
}


#line 249
- (void)textWithNSString:(NSString *)str {
  
#line 251
  JavaUtilStringTokenizer *tk = new_JavaUtilStringTokenizer_initWithNSString_(str);
  while ([tk hasMoreTokens]) {
    NSString *word = [tk nextToken];
    
#line 255
    switch (self->currElement_) {
      case ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_CLASSES:
      [((id<ComAowagieTextPdfHyphenationPatternConsumer>) nil_chk(self->consumer_)) addClassWithNSString:word];
      break;
      case ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_EXCEPTIONS:
      [((JavaUtilArrayList *) nil_chk(self->exception_)) addWithId:word];
      self->exception_ = ComAowagieTextPdfHyphenationSimplePatternParser_normalizeExceptionWithJavaUtilArrayList_(self, self->exception_);
      [((id<ComAowagieTextPdfHyphenationPatternConsumer>) nil_chk(self->consumer_)) addExceptionWithNSString:ComAowagieTextPdfHyphenationSimplePatternParser_getExceptionWordWithJavaUtilArrayList_(self, self->exception_) withJavaUtilArrayList:
#line 263
      (JavaUtilArrayList *) cast_chk([((JavaUtilArrayList *) nil_chk(self->exception_)) java_clone], [JavaUtilArrayList class])];
      [((JavaUtilArrayList *) nil_chk(self->exception_)) clear];
      break;
      case ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_PATTERNS:
      [((id<ComAowagieTextPdfHyphenationPatternConsumer>) nil_chk(self->consumer_)) addPatternWithNSString:ComAowagieTextPdfHyphenationSimplePatternParser_getPatternWithNSString_(word) withNSString:ComAowagieTextPdfHyphenationSimplePatternParser_getInterletterValuesWithNSString_(
#line 268
      word)];
      break;
    }
  }
}


#line 275
- (void)addClassWithNSString:(NSString *)c {
  
#line 277
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"class: ", c)];
}


#line 280
- (void)addExceptionWithNSString:(NSString *)w
           withJavaUtilArrayList:(JavaUtilArrayList *)e {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$", @"exception: ", w, @" : ", [((JavaUtilArrayList *) nil_chk(e)) description])];
}

- (void)addPatternWithNSString:(NSString *)p
                  withNSString:(NSString *)v {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$", @"pattern: ", p, @" : ", v)];
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  ComAowagieTextPdfHyphenationSimplePatternParser_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 6, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 7, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 17, 18, 19, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(parseWithJavaIoInputStream:withComAowagieTextPdfHyphenationPatternConsumer:);
  methods[2].selector = @selector(getPatternWithNSString:);
  methods[3].selector = @selector(normalizeExceptionWithJavaUtilArrayList:);
  methods[4].selector = @selector(getExceptionWordWithJavaUtilArrayList:);
  methods[5].selector = @selector(getInterletterValuesWithNSString:);
  methods[6].selector = @selector(endDocument);
  methods[7].selector = @selector(endElementWithNSString:);
  methods[8].selector = @selector(startDocument);
  methods[9].selector = @selector(startElementWithNSString:withJavaUtilHashMap:);
  methods[10].selector = @selector(textWithNSString:);
  methods[11].selector = @selector(addClassWithNSString:);
  methods[12].selector = @selector(addExceptionWithNSString:withJavaUtilArrayList:);
  methods[13].selector = @selector(addPatternWithNSString:withNSString:);
  methods[14].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "currElement_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "consumer_", "LComAowagieTextPdfHyphenationPatternConsumer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "token_", "LJavaLangStringBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "exception_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hyphenChar_", "C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ELEM_CLASSES", "I", .constantValue.asInt = ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_CLASSES, 0x1a, -1, -1, -1, -1 },
    { "ELEM_EXCEPTIONS", "I", .constantValue.asInt = ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_EXCEPTIONS, 0x1a, -1, -1, -1, -1 },
    { "ELEM_PATTERNS", "I", .constantValue.asInt = ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_PATTERNS, 0x1a, -1, -1, -1, -1 },
    { "ELEM_HYPHEN", "I", .constantValue.asInt = ComAowagieTextPdfHyphenationSimplePatternParser_ELEM_HYPHEN, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "parse", "LJavaIoInputStream;LComAowagieTextPdfHyphenationPatternConsumer;", "getPattern", "LNSString;", "normalizeException", "LJavaUtilArrayList;", "getExceptionWord", "getInterletterValues", "endElement", "startElement", "LNSString;LJavaUtilHashMap;", "text", "addClass", "addException", "LNSString;LJavaUtilArrayList;", "addPattern", "LNSString;LNSString;", "main", "[LNSString;", "LJavaLangException;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfHyphenationSimplePatternParser = { "SimplePatternParser", "com.aowagie.text.pdf.hyphenation", ptrTable, methods, fields, 7, 0x0, 15, 9, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfHyphenationSimplePatternParser;
}

@end


#line 91
void ComAowagieTextPdfHyphenationSimplePatternParser_initPackagePrivate(ComAowagieTextPdfHyphenationSimplePatternParser *self) {
  NSObject_init(self);
  
#line 92
  self->token_ = new_JavaLangStringBuffer_init();
  self->hyphenChar_ = '-';
}


#line 91
ComAowagieTextPdfHyphenationSimplePatternParser *new_ComAowagieTextPdfHyphenationSimplePatternParser_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfHyphenationSimplePatternParser, initPackagePrivate)
}


#line 91
ComAowagieTextPdfHyphenationSimplePatternParser *create_ComAowagieTextPdfHyphenationSimplePatternParser_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfHyphenationSimplePatternParser, initPackagePrivate)
}


#line 110
NSString *ComAowagieTextPdfHyphenationSimplePatternParser_getPatternWithNSString_(NSString *word) {
  ComAowagieTextPdfHyphenationSimplePatternParser_initialize();
  
#line 111
  JavaLangStringBuffer *pat = new_JavaLangStringBuffer_init();
  jint len = [((NSString *) nil_chk(word)) java_length];
  for (jint i = 0; i < len; i++) {
    if (!JavaLangCharacter_isDigitWithChar_([word charAtWithInt:i])) {
      (void) [pat appendWithChar:[word charAtWithInt:i]];
    }
  }
  return [pat description];
}


#line 121
JavaUtilArrayList *ComAowagieTextPdfHyphenationSimplePatternParser_normalizeExceptionWithJavaUtilArrayList_(ComAowagieTextPdfHyphenationSimplePatternParser *self, JavaUtilArrayList *ex) {
  JavaUtilArrayList *res = new_JavaUtilArrayList_init();
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(ex)) size]; i++) {
    id item = [ex getWithInt:i];
    if ([item isKindOfClass:[NSString class]]) {
      NSString *str = (NSString *) item;
      JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
      for (jint j = 0; j < [((NSString *) nil_chk(str)) java_length]; j++) {
        jchar c = [str charAtWithInt:j];
        if (c != self->hyphenChar_) {
          (void) [buf appendWithChar:c];
        }
        else {
          
#line 133
          [res addWithId:[buf description]];
          [buf setLengthWithInt:0];
          IOSCharArray *h = [IOSCharArray newArrayWithLength:1];
          *IOSCharArray_GetRef(h, 0) = self->hyphenChar_;
          
#line 139
          [res addWithId:new_ComAowagieTextPdfHyphenationHyphen_initPackagePrivateWithNSString_withNSString_withNSString_([NSString java_stringWithCharacters:h], nil, nil)];
        }
      }
      if ([buf java_length] > 0) {
        [res addWithId:[buf description]];
      }
    }
    else {
      
#line 146
      [res addWithId:item];
    }
  }
  return res;
}


#line 152
NSString *ComAowagieTextPdfHyphenationSimplePatternParser_getExceptionWordWithJavaUtilArrayList_(ComAowagieTextPdfHyphenationSimplePatternParser *self, JavaUtilArrayList *ex) {
  JavaLangStringBuffer *res = new_JavaLangStringBuffer_init();
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(ex)) size]; i++) {
    id item = [ex getWithInt:i];
    if ([item isKindOfClass:[NSString class]]) {
      (void) [res appendWithNSString:(NSString *) item];
    }
    else {
      
#line 159
      if (((ComAowagieTextPdfHyphenationHyphen *) nil_chk(((ComAowagieTextPdfHyphenationHyphen *) cast_chk(item, [ComAowagieTextPdfHyphenationHyphen class]))))->noBreak_ != nil) {
        (void) [res appendWithNSString:((ComAowagieTextPdfHyphenationHyphen *) nil_chk(((ComAowagieTextPdfHyphenationHyphen *) cast_chk(item, [ComAowagieTextPdfHyphenationHyphen class]))))->noBreak_];
      }
    }
  }
  return [res description];
}


#line 167
NSString *ComAowagieTextPdfHyphenationSimplePatternParser_getInterletterValuesWithNSString_(NSString *pat) {
  ComAowagieTextPdfHyphenationSimplePatternParser_initialize();
  
#line 168
  JavaLangStringBuffer *il = new_JavaLangStringBuffer_init();
  NSString *word = JreStrcat("$C", pat, 'a');
  jint len = [word java_length];
  for (jint i = 0; i < len; i++) {
    jchar c = [word charAtWithInt:i];
    if (JavaLangCharacter_isDigitWithChar_(c)) {
      (void) [il appendWithChar:c];
      i++;
    }
    else {
      
#line 177
      (void) [il appendWithChar:'0'];
    }
  }
  return [il description];
}


#line 290
void ComAowagieTextPdfHyphenationSimplePatternParser_mainWithNSStringArray_(IOSObjectArray *args) {
  ComAowagieTextPdfHyphenationSimplePatternParser_initialize();
  
#line 291
  @try {
    if (((IOSObjectArray *) nil_chk(args))->size_ > 0) {
      ComAowagieTextPdfHyphenationSimplePatternParser *pp = new_ComAowagieTextPdfHyphenationSimplePatternParser_initPackagePrivate();
      [pp parseWithJavaIoInputStream:new_JavaIoFileInputStream_initWithNSString_(IOSObjectArray_Get(args, 0)) withComAowagieTextPdfHyphenationPatternConsumer:pp];
    }
  }
  @catch (
#line 296
  JavaLangException *e) {
    [e printStackTrace];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfHyphenationSimplePatternParser)
