//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/asn1/x509/CertificateList.java
//

#include "ASN1Encodable.h"
#include "ASN1EncodableVector.h"
#include "ASN1Object.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "ASN1TaggedObject.h"
#include "AlgorithmIdentifier.h"
#include "BCTime.h"
#include "CertificateList.h"
#include "DERBitString.h"
#include "DERSequence.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "TBSCertList.h"
#include "X500Name.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Enumeration.h"

#if !__has_feature(objc_arc)
#error "CertificateList must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/asn1/x509/CertificateList.java"


#line 28
@implementation OrgSpongycastleAsn1X509CertificateList


#line 37
+ (OrgSpongycastleAsn1X509CertificateList *)getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject:(OrgSpongycastleAsn1ASN1TaggedObject *)obj
                                                                                   withBoolean:(jboolean)explicit_ {
  return OrgSpongycastleAsn1X509CertificateList_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_);
}


#line 44
+ (OrgSpongycastleAsn1X509CertificateList *)getInstanceWithId:(id)obj {
  return OrgSpongycastleAsn1X509CertificateList_getInstanceWithId_(obj);
}


#line 63
- (instancetype)initWithOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)seq {
  OrgSpongycastleAsn1X509CertificateList_initWithOrgSpongycastleAsn1ASN1Sequence_(self, seq);
  return self;
}


#line 78
- (OrgSpongycastleAsn1X509TBSCertList *)getTBSCertList {
  
#line 80
  return tbsCertList_;
}


#line 83
- (IOSObjectArray *)getRevokedCertificates {
  
#line 85
  return [((OrgSpongycastleAsn1X509TBSCertList *) nil_chk(tbsCertList_)) getRevokedCertificates];
}


#line 88
- (id<JavaUtilEnumeration>)getRevokedCertificateEnumeration {
  
#line 90
  return [((OrgSpongycastleAsn1X509TBSCertList *) nil_chk(tbsCertList_)) getRevokedCertificateEnumeration];
}


#line 93
- (OrgSpongycastleAsn1X509AlgorithmIdentifier *)getSignatureAlgorithm {
  
#line 95
  return sigAlgId_;
}


#line 98
- (OrgSpongycastleAsn1DERBitString *)getSignature {
  
#line 100
  return sig_;
}


#line 103
- (jint)getVersionNumber {
  
#line 105
  return [((OrgSpongycastleAsn1X509TBSCertList *) nil_chk(tbsCertList_)) getVersionNumber];
}


#line 108
- (OrgSpongycastleAsn1X500X500Name *)getIssuer {
  
#line 110
  return [((OrgSpongycastleAsn1X509TBSCertList *) nil_chk(tbsCertList_)) getIssuer];
}


#line 113
- (OrgSpongycastleAsn1X509BCTime *)getThisUpdate {
  
#line 115
  return [((OrgSpongycastleAsn1X509TBSCertList *) nil_chk(tbsCertList_)) getThisUpdate];
}


#line 118
- (OrgSpongycastleAsn1X509BCTime *)getNextUpdate {
  
#line 120
  return [((OrgSpongycastleAsn1X509TBSCertList *) nil_chk(tbsCertList_)) getNextUpdate];
}


#line 123
- (OrgSpongycastleAsn1ASN1Primitive *)toASN1Primitive {
  
#line 125
  OrgSpongycastleAsn1ASN1EncodableVector *v = new_OrgSpongycastleAsn1ASN1EncodableVector_init();
  
#line 127
  [v addWithOrgSpongycastleAsn1ASN1Encodable:tbsCertList_];
  [v addWithOrgSpongycastleAsn1ASN1Encodable:sigAlgId_];
  [v addWithOrgSpongycastleAsn1ASN1Encodable:sig_];
  
#line 131
  return new_OrgSpongycastleAsn1DERSequence_initWithOrgSpongycastleAsn1ASN1EncodableVector_(v);
}


#line 134
- (NSUInteger)hash {
  
#line 136
  if (!isHashCodeSet_) {
    
#line 138
    hashCodeValue_ = ((jint) [super hash]);
    isHashCodeSet_ = true;
  }
  
#line 142
  return hashCodeValue_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgSpongycastleAsn1X509CertificateList;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509CertificateList;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509TBSCertList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgSpongycastleAsn1X509TBSCertList_CRLEntry;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilEnumeration;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509AlgorithmIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1DERBitString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509BCTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509BCTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject:withBoolean:);
  methods[1].selector = @selector(getInstanceWithId:);
  methods[2].selector = @selector(initWithOrgSpongycastleAsn1ASN1Sequence:);
  methods[3].selector = @selector(getTBSCertList);
  methods[4].selector = @selector(getRevokedCertificates);
  methods[5].selector = @selector(getRevokedCertificateEnumeration);
  methods[6].selector = @selector(getSignatureAlgorithm);
  methods[7].selector = @selector(getSignature);
  methods[8].selector = @selector(getVersionNumber);
  methods[9].selector = @selector(getIssuer);
  methods[10].selector = @selector(getThisUpdate);
  methods[11].selector = @selector(getNextUpdate);
  methods[12].selector = @selector(toASN1Primitive);
  methods[13].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tbsCertList_", "LOrgSpongycastleAsn1X509TBSCertList;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sigAlgId_", "LOrgSpongycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sig_", "LOrgSpongycastleAsn1DERBitString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isHashCodeSet_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "hashCodeValue_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LOrgSpongycastleAsn1ASN1TaggedObject;Z", "LNSObject;", "LOrgSpongycastleAsn1ASN1Sequence;", "hashCode" };
  static const J2ObjcClassInfo _OrgSpongycastleAsn1X509CertificateList = { "CertificateList", "org.spongycastle.asn1.x509", ptrTable, methods, fields, 7, 0x1, 14, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleAsn1X509CertificateList;
}

@end


#line 37
OrgSpongycastleAsn1X509CertificateList *OrgSpongycastleAsn1X509CertificateList_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(OrgSpongycastleAsn1ASN1TaggedObject *obj, jboolean explicit_) {
  OrgSpongycastleAsn1X509CertificateList_initialize();
  
#line 41
  return OrgSpongycastleAsn1X509CertificateList_getInstanceWithId_(OrgSpongycastleAsn1ASN1Sequence_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_));
}

OrgSpongycastleAsn1X509CertificateList *OrgSpongycastleAsn1X509CertificateList_getInstanceWithId_(id obj) {
  OrgSpongycastleAsn1X509CertificateList_initialize();
  
#line 47
  if ([obj isKindOfClass:[OrgSpongycastleAsn1X509CertificateList class]]) {
    
#line 49
    return (OrgSpongycastleAsn1X509CertificateList *) obj;
  }
  else if (obj != nil) {
    
#line 53
    return new_OrgSpongycastleAsn1X509CertificateList_initWithOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_(obj));
  }
  
#line 56
  return nil;
}

void OrgSpongycastleAsn1X509CertificateList_initWithOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1X509CertificateList *self, OrgSpongycastleAsn1ASN1Sequence *seq) {
  OrgSpongycastleAsn1ASN1Object_init(self);
  self->isHashCodeSet_ =
#line 34
  false;
  
#line 66
  if ([((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(seq)) size] == 3) {
    
#line 68
    self->tbsCertList_ = OrgSpongycastleAsn1X509TBSCertList_getInstanceWithId_([seq getObjectAtWithInt:0]);
    self->sigAlgId_ = OrgSpongycastleAsn1X509AlgorithmIdentifier_getInstanceWithId_([seq getObjectAtWithInt:1]);
    self->sig_ = OrgSpongycastleAsn1DERBitString_getInstanceWithId_([seq getObjectAtWithInt:2]);
  }
  else {
    
#line 74
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"sequence wrong size for CertificateList");
  }
}


#line 63
OrgSpongycastleAsn1X509CertificateList *new_OrgSpongycastleAsn1X509CertificateList_initWithOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1ASN1Sequence *seq) {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1X509CertificateList, initWithOrgSpongycastleAsn1ASN1Sequence_, seq)
}


#line 63
OrgSpongycastleAsn1X509CertificateList *create_OrgSpongycastleAsn1X509CertificateList_initWithOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1ASN1Sequence *seq) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1X509CertificateList, initWithOrgSpongycastleAsn1ASN1Sequence_, seq)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleAsn1X509CertificateList)
