//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PdfCell.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_PdfCell")
#ifdef RESTRICT_PdfCell
#define INCLUDE_ALL_PdfCell 0
#else
#define INCLUDE_ALL_PdfCell 1
#endif
#undef RESTRICT_PdfCell

#if !defined (ComAowagieTextPdfPdfCell_) && (INCLUDE_ALL_PdfCell || defined(INCLUDE_ComAowagieTextPdfPdfCell))
#define ComAowagieTextPdfPdfCell_

#define RESTRICT_Rectangle 1
#define INCLUDE_ComAowagieTextRectangle 1
#include "Rectangle.h"

@class ComAowagieTextCell;
@class JavaUtilArrayList;

/*!
 @brief A <CODE>PdfCell</CODE> is the PDF translation of a <CODE>Cell</CODE>.
 <P>
  A <CODE>PdfCell</CODE> is an <CODE>ArrayList</CODE> of <CODE>PdfLine</CODE>s.
  <P>
  When using variable borders (<code>isUseVariableBorders()</code> == true),
  the borders are drawn completely inside the cell Rectangle
  so that adjacent cell borders will not overlap.
  Otherwise, the borders are drawn on top of the edges of the
  cell Rectangle and will overlap the borders of adjacent
  cells.
 - seealso: com.aowagie.text.Rectangle
 - seealso: com.aowagie.text.Cell
 - seealso: PdfLine
 - seealso: PdfTable
 */
@interface ComAowagieTextPdfPdfCell : ComAowagieTextRectangle

#pragma mark Public

/*!
 @brief Constructs a <CODE>PdfCell</CODE>-object.
 @param cell the original  <CODE> Cell </CODE>
 @param rownumber the number of the  <CODE> Row </CODE>  the  <CODE> Cell </CODE>  was in.
 @param left the left border of the  <CODE> PdfCell </CODE>
 @param right the right border of the  <CODE> PdfCell </CODE>
 @param top the top border of the  <CODE> PdfCell </CODE>
 @param cellspacing the cellspacing of the  <CODE> Table </CODE>
 @param cellpadding the cellpadding	of the  <CODE> Table </CODE>
 */
- (instancetype)initPackagePrivateWithComAowagieTextCell:(ComAowagieTextCell *)cell
                                                 withInt:(jint)rownumber
                                               withFloat:(jfloat)left
                                               withFloat:(jfloat)right
                                               withFloat:(jfloat)top
                                               withFloat:(jfloat)cellspacing
                                               withFloat:(jfloat)cellpadding;

/*!
 @brief Returns the lower left y-coordinate.
 @return the lower left y-coordinate
 */
- (jfloat)getBottom;

/*!
 @brief Gets the number of the group this cell is in..
 @return a number
 */
- (jint)getGroupNumber;

/*!
 @brief Gets the images of a cell that can be drawn between certain limits.
 <P>
  Remark: all the lines that can be drawn are removed from the object!
 @param top the top of the part of the table that can be drawn
 @param bottom the bottom of the part of the table that can be drawn
 @return an <CODE>ArrayList</CODE> of <CODE>Image</CODE>s
 */
- (JavaUtilArrayList *)getImagesWithFloat:(jfloat)top
                                withFloat:(jfloat)bottom;

/*!
 @brief Returns the lower left x-coordinate.
 @return the lower left x-coordinate
 */
- (jfloat)getLeft;

/*!
 @brief Gets the lines of a cell that can be drawn between certain limits.
 <P>
  Remark: all the lines that can be drawn are removed from the object!
 @param top the top of the part of the table that can be drawn
 @param bottom the bottom of the part of the table that can be drawn
 @return an <CODE>ArrayList</CODE> of <CODE>PdfLine</CODE>s
 */
- (JavaUtilArrayList *)getLinesWithFloat:(jfloat)top
                               withFloat:(jfloat)bottom;

/*!
 @brief Returns the upper right x-coordinate.
 @return the upper right x-coordinate
 */
- (jfloat)getRight;

/*!
 @brief Returns the upper right y-coordinate.
 @return the upper right y-coordinate
 */
- (jfloat)getTop;

/*!
 @brief Gets the value of useAscender
 @return useAscender
 */
- (jboolean)isUseAscender;

/*!
 @brief Gets the value of useBorderPadding.
 @return useBorderPadding
 */
- (jboolean)isUseBorderPadding;

/*!
 @brief gets the value of useDescender
 @return useDescender
 */
- (jboolean)isUseDescender;

/*!
 @brief Gets a Rectangle that is altered to fit on the page.
 @param top the top position
 @param bottom the bottom position
 @return a <CODE>Rectangle</CODE>
 */
- (ComAowagieTextRectangle *)rectangleWithFloat:(jfloat)top
                                      withFloat:(jfloat)bottom;

/*!
 @brief Returns the height needed to draw the remaining text.
 @return a height
 */
- (jfloat)remainingHeight;

/*!
 @brief Gets the rowspan of a cell.
 @return the rowspan of the cell
 */
- (jint)rowspan;

/*!
 @brief Sets the bottom of the Rectangle and determines the proper {link #verticalOffset}
  to appropriately align the contents vertically.
 @param value Value
 */
- (void)setBottomWithFloat:(jfloat)value;

/*!
 @brief Sets the value of useAscender.
 @param use use ascender height if true
 */
- (void)setUseAscenderWithBoolean:(jboolean)use;

/*!
 @brief Sets the value of useBorderPadding.
 @param use adjust layout for borders if true
 */
- (void)setUseBorderPaddingWithBoolean:(jboolean)use;

/*!
 @brief Sets the value of useDescender.
 @param use use descender height if true
 */
- (void)setUseDescenderWithBoolean:(jboolean)use;

#pragma mark Package-Private

/*!
 @brief Checks if this cell belongs to the header of a <CODE>PdfTable</CODE>.
 @return <CODE>void</CODE>
 */
- (jboolean)isHeader;

/*!
 @brief Checks if the cell may be removed.
 <P>
  Headers may always be removed, even if they are drawn only partially:
  they will be repeated on each following page anyway!
 @return <CODE>true</CODE> if all the lines are already drawn; <CODE>false</CODE> otherwise.
 */
- (jboolean)mayBeRemoved;

/*!
 @brief Gets the number of the row this cell is in..
 @return a number
 */
- (jint)rownumber;

/*!
 @brief Sets the group number.
 @param number Number
 */
- (void)setGroupNumberWithInt:(jint)number;

/*!
 @brief Indicates that this cell belongs to the header of a <CODE>PdfTable</CODE>.
 */
- (void)setHeader;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithComAowagieTextRectangle:(ComAowagieTextRectangle *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithFloat:(jfloat)arg0
                    withFloat:(jfloat)arg1 NS_UNAVAILABLE;

- (instancetype)initWithFloat:(jfloat)arg0
                    withFloat:(jfloat)arg1
                    withFloat:(jfloat)arg2
                    withFloat:(jfloat)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfPdfCell)

FOUNDATION_EXPORT void ComAowagieTextPdfPdfCell_initPackagePrivateWithComAowagieTextCell_withInt_withFloat_withFloat_withFloat_withFloat_withFloat_(ComAowagieTextPdfPdfCell *self, ComAowagieTextCell *cell, jint rownumber, jfloat left, jfloat right, jfloat top, jfloat cellspacing, jfloat cellpadding);

FOUNDATION_EXPORT ComAowagieTextPdfPdfCell *new_ComAowagieTextPdfPdfCell_initPackagePrivateWithComAowagieTextCell_withInt_withFloat_withFloat_withFloat_withFloat_withFloat_(ComAowagieTextCell *cell, jint rownumber, jfloat left, jfloat right, jfloat top, jfloat cellspacing, jfloat cellpadding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfCell *create_ComAowagieTextPdfPdfCell_initPackagePrivateWithComAowagieTextCell_withInt_withFloat_withFloat_withFloat_withFloat_withFloat_(ComAowagieTextCell *cell, jint rownumber, jfloat left, jfloat right, jfloat top, jfloat cellspacing, jfloat cellpadding);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfCell)

#endif

#pragma pop_macro("INCLUDE_ALL_PdfCell")
