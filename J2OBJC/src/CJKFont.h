//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/CJKFont.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CJKFont")
#ifdef RESTRICT_CJKFont
#define INCLUDE_ALL_CJKFont 0
#else
#define INCLUDE_ALL_CJKFont 1
#endif
#undef RESTRICT_CJKFont

#if !defined (ComAowagieTextPdfCJKFont_) && (INCLUDE_ALL_CJKFont || defined(INCLUDE_ComAowagieTextPdfCJKFont))
#define ComAowagieTextPdfCJKFont_

#define RESTRICT_BaseFont 1
#define INCLUDE_ComAowagieTextPdfBaseFont 1
#include "BaseFont.h"

@class ComAowagieTextPdfPdfIndirectReference;
@class ComAowagieTextPdfPdfStream;
@class ComAowagieTextPdfPdfWriter;
@class IOSIntArray;
@class IOSObjectArray;

/*!
 @brief Creates a CJK font compatible with the fonts in the Adobe Asian font Pack.
 @author Paulo Soares (psoares@@consiste.pt)
 */
@interface ComAowagieTextPdfCJKFont : ComAowagieTextPdfBaseFont

#pragma mark Public

/*!
 @brief Checks if a character exists in this font.
 @param c the character to check
 @return <CODE>true</CODE> if the character has a glyph, 
 <CODE>false</CODE> otherwise
 */
- (jboolean)charExistsWithInt:(jint)c;

/*!
 @brief Gets all the entries of the names-table.If it is a True Type font
  each array element will have {Name ID, Platform ID, Platform Encoding ID,
  Language ID, font name}.
 The interpretation of this values can be
  found in the Open Type specification, chapter 2, in the 'name' table.<br>
  For the other fonts the array has a single element with {"4", "", "", "",
  font name}.
 @return the full name of the font
 */
- (IOSObjectArray *)getAllNameEntries;

- (IOSIntArray *)getCharBBoxWithInt:(jint)c;

- (jint)getCidCodeWithInt:(jint)c;

/*!
 @brief Gets the family name of the font.If it is a True Type font
  each array element will have {Platform ID, Platform Encoding ID,
  Language ID, font name}.
 The interpretation of this values can be
  found in the Open Type specification, chapter 2, in the 'name' table.<br>
  For the other fonts the array has a single element with {"", "", "",
  font name}.
 @return the family name of the font
 */
- (IOSObjectArray *)getFamilyFontName;

/*!
 @brief Gets the font parameter identified by <CODE>key</CODE>.Valid values
  for <CODE>key</CODE> are <CODE>ASCENT</CODE>, <CODE>CAPHEIGHT</CODE>, <CODE>DESCENT</CODE>
  and <CODE>ITALICANGLE</CODE>.
 @param key the parameter to be extracted
 @param fontSize the font size in points
 @return the parameter in points
 */
- (jfloat)getFontDescriptorWithInt:(jint)key
                         withFloat:(jfloat)fontSize;

/*!
 @brief Gets the full name of the font.If it is a True Type font
  each array element will have {Platform ID, Platform Encoding ID,
  Language ID, font name}.
 The interpretation of this values can be
  found in the Open Type specification, chapter 2, in the 'name' table.<br>
  For the other fonts the array has a single element with {"", "", "",
  font name}.
 @return the full name of the font
 */
- (IOSObjectArray *)getFullFontName;

/*!
 @brief You can't get the FontStream of a CJK font (CJK fonts are never embedded),
  so this method always returns null.
 @return null
 @since 2.1.3
 */
- (ComAowagieTextPdfPdfStream *)getFullFontStream;

- (jint)getKerningWithInt:(jint)char1
                  withInt:(jint)char2;

- (NSString *)getPostscriptFontName;

- (jint)getUnicodeEquivalentWithInt:(jint)c;

/*!
 @brief Gets the width of a <CODE>char</CODE> in normalized 1000 units.
 @param char1 the unicode  <CODE> char </CODE>  to get the width of
 @return the width in normalized 1000 units
 */
- (jint)getWidthWithInt:(jint)char1;

- (jint)getWidthWithNSString:(NSString *)text;

/*!
 @brief Checks if the font has any kerning pairs.
 @return always <CODE>false</CODE>
 */
- (jboolean)hasKernPairs;

/*!
 @brief Checks if its a valid CJK font.
 @param fontName the font name
 @param enc the encoding
 @return <CODE>true</CODE> if it is CJK font
 */
+ (jboolean)isCJKFontWithNSString:(NSString *)fontName
                     withNSString:(NSString *)enc;

/*!
 @brief Sets the character advance.
 @param c the character
 @param advance the character advance normalized to 1000 units
 @return <CODE>true</CODE> if the advance was set, 
 <CODE>false</CODE> otherwise. Will always return <CODE>false</CODE>
 */
- (jboolean)setCharAdvanceWithInt:(jint)c
                          withInt:(jint)advance;

- (jboolean)setKerningWithInt:(jint)char1
                      withInt:(jint)char2
                      withInt:(jint)kern;

/*!
 @brief Sets the font name that will appear in the pdf font dictionary.
 Use with care as it can easily make a font unreadable if not embedded.
 @param name the new font name
 */
- (void)setPostscriptFontNameWithNSString:(NSString *)name;

#pragma mark Protected

- (IOSIntArray *)getRawCharBBoxWithInt:(jint)c
                          withNSString:(NSString *)name;

#pragma mark Package-Private

/*!
 @brief Creates a CJK font.
 @param fontName the name of the font
 @param enc the encoding of the font
 @param emb always  <CODE> false </CODE> . CJK font and not embedded
 @throw DocumentExceptionon error
 */
- (instancetype)initPackagePrivateWithNSString:(NSString *)fontName
                                  withNSString:(NSString *)enc
                                   withBoolean:(jboolean)emb;

- (jint)getRawWidthWithInt:(jint)c
              withNSString:(NSString *)name;

- (void)writeFontWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
      withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)ref
                              withNSObjectArray:(IOSObjectArray *)params;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfCJKFont)

/*!
 @brief The encoding used in the PDF document for CJK fonts
 */
inline NSString *ComAowagieTextPdfCJKFont_get_CJK_ENCODING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextPdfCJKFont_CJK_ENCODING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfCJKFont, CJK_ENCODING, NSString *)

FOUNDATION_EXPORT void ComAowagieTextPdfCJKFont_initPackagePrivateWithNSString_withNSString_withBoolean_(ComAowagieTextPdfCJKFont *self, NSString *fontName, NSString *enc, jboolean emb);

FOUNDATION_EXPORT ComAowagieTextPdfCJKFont *new_ComAowagieTextPdfCJKFont_initPackagePrivateWithNSString_withNSString_withBoolean_(NSString *fontName, NSString *enc, jboolean emb) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfCJKFont *create_ComAowagieTextPdfCJKFont_initPackagePrivateWithNSString_withNSString_withBoolean_(NSString *fontName, NSString *enc, jboolean emb);

FOUNDATION_EXPORT jboolean ComAowagieTextPdfCJKFont_isCJKFontWithNSString_withNSString_(NSString *fontName, NSString *enc);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfCJKFont)

#endif

#pragma pop_macro("INCLUDE_ALL_CJKFont")
