//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/internal/PdfXConformanceImp.java
//

#include "BaseFont.h"
#include "Color.h"
#include "ExtendedColor.h"
#include "J2ObjC_source.h"
#include "PatternColor.h"
#include "PdfArray.h"
#include "PdfDictionary.h"
#include "PdfGState.h"
#include "PdfImage.h"
#include "PdfName.h"
#include "PdfNumber.h"
#include "PdfObject.h"
#include "PdfPatternPainter.h"
#include "PdfShading.h"
#include "PdfShadingPattern.h"
#include "PdfSpotColor.h"
#include "PdfString.h"
#include "PdfWriter.h"
#include "PdfXConformanceException.h"
#include "PdfXConformanceImp.h"
#include "ShadingColor.h"
#include "SpotColor.h"

#if !__has_feature(objc_arc)
#error "PdfXConformanceImp must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfInternalPdfXConformanceImp () {
 @public
  /*!
   @brief The value indicating if the PDF has to be in conformance with PDF/X.
   */
  jint pdfxConformance_;
}

@end

/*!
 @brief A key for an aspect that can be checked for PDF/X Conformance.
 */
inline jint ComAowagieTextPdfInternalPdfXConformanceImp_get_PDFXKEY_CMYK(void);
#define ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_CMYK 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfInternalPdfXConformanceImp, PDFXKEY_CMYK, jint)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/internal/PdfXConformanceImp.java"


#line 71
@implementation ComAowagieTextPdfInternalPdfXConformanceImp

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 71
- (instancetype)init {
  ComAowagieTextPdfInternalPdfXConformanceImp_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 96
- (void)setPDFXConformanceWithInt:(jint)pdfxConformance {
  
#line 98
  self->pdfxConformance_ = pdfxConformance;
}


#line 104
- (jint)getPDFXConformance {
  
#line 106
  return self->pdfxConformance_;
}


#line 113
- (jboolean)isPdfX {
  
#line 115
  return self->pdfxConformance_ != ComAowagieTextPdfPdfWriter_PDFXNONE;
}


#line 121
- (jboolean)isPdfX1A2001 {
  return self->pdfxConformance_ == ComAowagieTextPdfPdfWriter_PDFX1A2001;
}


#line 128
- (jboolean)isPdfX32002 {
  return self->pdfxConformance_ == ComAowagieTextPdfPdfWriter_PDFX32002;
}


#line 136
- (jboolean)isPdfA1 {
  return self->pdfxConformance_ == ComAowagieTextPdfPdfWriter_PDFA1A || self->pdfxConformance_ == ComAowagieTextPdfPdfWriter_PDFA1B;
}


#line 144
- (jboolean)isPdfA1A {
  return self->pdfxConformance_ == ComAowagieTextPdfPdfWriter_PDFA1A;
}

- (void)completeInfoDictionaryWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)info {
  if ([self isPdfX] && ![self isPdfA1]) {
    if ([((ComAowagieTextPdfPdfDictionary *) nil_chk(info)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, GTS_PDFXVERSION)] == nil) {
      if ([self isPdfX1A2001]) {
        [info putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, GTS_PDFXVERSION) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_(@"PDF/X-1:2001")];
        [info putWithComAowagieTextPdfPdfName:new_ComAowagieTextPdfPdfName_initWithNSString_(@"GTS_PDFXConformance") withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_(@"PDF/X-1a:2001")];
      }
      else if ([self isPdfX32002]) {
        [info putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, GTS_PDFXVERSION) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_(@"PDF/X-3:2002")];
      }
    }
    if ([info getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TITLE)] == nil) {
      [info putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TITLE) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_(@"Pdf document")];
    }
    if ([info getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CREATOR)] == nil) {
      [info putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CREATOR) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_(@"Unknown")];
    }
    if ([info getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TRAPPED)] == nil) {
      [info putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TRAPPED) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(@"False")];
    }
  }
}

- (void)completeExtraCatalogWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)extraCatalog {
  if ([self isPdfX] && ![self isPdfA1]) {
    if ([((ComAowagieTextPdfPdfDictionary *) nil_chk(extraCatalog)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, OUTPUTINTENTS)] == nil) {
      ComAowagieTextPdfPdfDictionary *out = new_ComAowagieTextPdfPdfDictionary_initWithComAowagieTextPdfPdfName_(JreLoadStatic(ComAowagieTextPdfPdfName, OUTPUTINTENT));
      [out putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, OUTPUTCONDITION) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_(@"SWOP CGATS TR 001-1995")];
      [out putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, OUTPUTCONDITIONIDENTIFIER) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_(@"CGATS TR 001")];
      [out putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, REGISTRYNAME) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_(@"http://www.color.org")];
      [out putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, INFO) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_(@"")];
      [out putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, S) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, GTS_PDFX)];
      [extraCatalog putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, OUTPUTINTENTS) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfArray_initWithComAowagieTextPdfPdfObject_(out)];
    }
  }
}


#line 191
+ (void)checkPDFXConformanceWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
                                                   withInt:(jint)key
                                                    withId:(id)obj1 {
  ComAowagieTextPdfInternalPdfXConformanceImp_checkPDFXConformanceWithComAowagieTextPdfPdfWriter_withInt_withId_(writer, key, obj1);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setPDFXConformanceWithInt:);
  methods[2].selector = @selector(getPDFXConformance);
  methods[3].selector = @selector(isPdfX);
  methods[4].selector = @selector(isPdfX1A2001);
  methods[5].selector = @selector(isPdfX32002);
  methods[6].selector = @selector(isPdfA1);
  methods[7].selector = @selector(isPdfA1A);
  methods[8].selector = @selector(completeInfoDictionaryWithComAowagieTextPdfPdfDictionary:);
  methods[9].selector = @selector(completeExtraCatalogWithComAowagieTextPdfPdfDictionary:);
  methods[10].selector = @selector(checkPDFXConformanceWithComAowagieTextPdfPdfWriter:withInt:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PDFXKEY_COLOR", "I", .constantValue.asInt = ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_COLOR, 0x19, -1, -1, -1, -1 },
    { "PDFXKEY_CMYK", "I", .constantValue.asInt = ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_CMYK, 0x1a, -1, -1, -1, -1 },
    { "PDFXKEY_RGB", "I", .constantValue.asInt = ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_RGB, 0x19, -1, -1, -1, -1 },
    { "PDFXKEY_FONT", "I", .constantValue.asInt = ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_FONT, 0x19, -1, -1, -1, -1 },
    { "PDFXKEY_IMAGE", "I", .constantValue.asInt = ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_IMAGE, 0x19, -1, -1, -1, -1 },
    { "PDFXKEY_GSTATE", "I", .constantValue.asInt = ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_GSTATE, 0x19, -1, -1, -1, -1 },
    { "PDFXKEY_LAYER", "I", .constantValue.asInt = ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_LAYER, 0x19, -1, -1, -1, -1 },
    { "pdfxConformance_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setPDFXConformance", "I", "completeInfoDictionary", "LComAowagieTextPdfPdfDictionary;", "completeExtraCatalog", "checkPDFXConformance", "LComAowagieTextPdfPdfWriter;ILNSObject;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfInternalPdfXConformanceImp = { "PdfXConformanceImp", "com.aowagie.text.pdf.internal", ptrTable, methods, fields, 7, 0x1, 11, 8, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfInternalPdfXConformanceImp;
}

@end


#line 71
void ComAowagieTextPdfInternalPdfXConformanceImp_init(ComAowagieTextPdfInternalPdfXConformanceImp *self) {
  NSObject_init(self);
  self->pdfxConformance_ =
#line 91
  ComAowagieTextPdfPdfWriter_PDFXNONE;
}


#line 71
ComAowagieTextPdfInternalPdfXConformanceImp *new_ComAowagieTextPdfInternalPdfXConformanceImp_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfInternalPdfXConformanceImp, init)
}


#line 71
ComAowagieTextPdfInternalPdfXConformanceImp *create_ComAowagieTextPdfInternalPdfXConformanceImp_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfInternalPdfXConformanceImp, init)
}


#line 191
void ComAowagieTextPdfInternalPdfXConformanceImp_checkPDFXConformanceWithComAowagieTextPdfPdfWriter_withInt_withId_(ComAowagieTextPdfPdfWriter *writer, jint key, id obj1) {
  ComAowagieTextPdfInternalPdfXConformanceImp_initialize();
  
#line 192
  if (writer == nil || ![writer isPdfX]) {
    return;
  }
  jint conf = [writer getPDFXConformance];
  {
    
#line 241
    ComAowagieTextPdfPdfImage *image;
    
#line 265
    ComAowagieTextPdfPdfDictionary *gs;
    ComAowagieTextPdfPdfObject *obj;
    
#line 271
    jdouble v;
    
#line 196
    switch (key) {
      case ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_COLOR:
      switch (conf) {
        case ComAowagieTextPdfPdfWriter_PDFX1A2001:
        if ([obj1 isKindOfClass:[ComAowagieTextPdfExtendedColor class]]) {
          ComAowagieTextPdfExtendedColor *ec = (ComAowagieTextPdfExtendedColor *) obj1;
          {
            
#line 209
            ComAowagieTextPdfSpotColor *sc;
            
#line 213
            ComAowagieTextPdfShadingColor *xc;
            
#line 217
            ComAowagieTextPdfPatternColor *pc;
            
#line 202
            switch ([((ComAowagieTextPdfExtendedColor *) nil_chk(ec)) getType]) {
              case ComAowagieTextPdfExtendedColor_TYPE_CMYK:
              case ComAowagieTextPdfExtendedColor_TYPE_GRAY:
              return;
              case ComAowagieTextPdfExtendedColor_TYPE_RGB:
              @throw new_ComAowagieTextPdfPdfXConformanceException_initWithNSString_(@"Colorspace RGB is not allowed.");
              case ComAowagieTextPdfExtendedColor_TYPE_SEPARATION:
              sc = (ComAowagieTextPdfSpotColor *) cast_chk(ec, [ComAowagieTextPdfSpotColor class]);
              ComAowagieTextPdfInternalPdfXConformanceImp_checkPDFXConformanceWithComAowagieTextPdfPdfWriter_withInt_withId_(writer, ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_COLOR, [((ComAowagieTextPdfPdfSpotColor *) nil_chk([sc getPdfSpotColor])) getAlternativeCS]);
              break;
              case ComAowagieTextPdfExtendedColor_TYPE_SHADING:
              xc = (ComAowagieTextPdfShadingColor *) cast_chk(ec, [ComAowagieTextPdfShadingColor class]);
              ComAowagieTextPdfInternalPdfXConformanceImp_checkPDFXConformanceWithComAowagieTextPdfPdfWriter_withInt_withId_(writer, ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_COLOR, [((ComAowagieTextPdfPdfShading *) nil_chk([((ComAowagieTextPdfPdfShadingPattern *) nil_chk([xc getPdfShadingPattern])) getShading])) getColorSpace]);
              break;
              case ComAowagieTextPdfExtendedColor_TYPE_PATTERN:
              pc = (ComAowagieTextPdfPatternColor *) cast_chk(ec, [ComAowagieTextPdfPatternColor class]);
              ComAowagieTextPdfInternalPdfXConformanceImp_checkPDFXConformanceWithComAowagieTextPdfPdfWriter_withInt_withId_(writer, ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_COLOR, [((ComAowagieTextPdfPdfPatternPainter *) nil_chk([pc getPainter])) getDefaultColor]);
              break;
            }
          }
        }
        else
#line 222
        if ([obj1 isKindOfClass:[HarmonyJavaAwtColor class]]) {
          @throw new_ComAowagieTextPdfPdfXConformanceException_initWithNSString_(@"Colorspace RGB is not allowed.");
        }
        break;
      }
      break;
      case ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_CMYK:
      break;
      case ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_RGB:
      if (conf == ComAowagieTextPdfPdfWriter_PDFX1A2001) {
        @throw new_ComAowagieTextPdfPdfXConformanceException_initWithNSString_(@"Colorspace RGB is not allowed.");
      }
      break;
      case ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_FONT:
      if (![((ComAowagieTextPdfBaseFont *) nil_chk(((ComAowagieTextPdfBaseFont *) cast_chk(obj1, [ComAowagieTextPdfBaseFont class])))) isEmbedded]) {
        @throw new_ComAowagieTextPdfPdfXConformanceException_initWithNSString_(JreStrcat("$$", @"All the fonts must be embedded. This one isn't: ", [((ComAowagieTextPdfBaseFont *) nil_chk(((ComAowagieTextPdfBaseFont *) cast_chk(obj1, [ComAowagieTextPdfBaseFont class])))) getPostscriptFontName]));
      }
      break;
      case ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_IMAGE:
      image = (ComAowagieTextPdfPdfImage *) cast_chk(obj1, [ComAowagieTextPdfPdfImage class]);
      if ([((ComAowagieTextPdfPdfImage *) nil_chk(image)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SMASK)] != nil) {
        @throw new_ComAowagieTextPdfPdfXConformanceException_initWithNSString_(@"The /SMask key is not allowed in images.");
      }
      {
        
#line 247
        ComAowagieTextPdfPdfObject *cs;
        
#line 245
        switch (conf) {
          case ComAowagieTextPdfPdfWriter_PDFX1A2001:
          cs = [image getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE)];
          if (cs == nil) {
            return;
          }
          if ([cs isName]) {
            if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, DEVICERGB))) isEqual:cs]) {
              @throw new_ComAowagieTextPdfPdfXConformanceException_initWithNSString_(@"Colorspace RGB is not allowed.");
            }
          }
          else if ([cs isArray]) {
            if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, CALRGB))) isEqual:[((ComAowagieTextPdfPdfArray *) cast_chk(cs, [ComAowagieTextPdfPdfArray class])) getPdfObjectWithInt:0]]) {
              @throw new_ComAowagieTextPdfPdfXConformanceException_initWithNSString_(@"Colorspace CalRGB is not allowed.");
            }
          }
          break;
        }
      }
      
#line 263
      break;
      case ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_GSTATE:
      gs = (ComAowagieTextPdfPdfDictionary *) cast_chk(obj1, [ComAowagieTextPdfPdfDictionary class]);
      obj = [((ComAowagieTextPdfPdfDictionary *) nil_chk(gs)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BM)];
      if (obj != nil && ![((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfGState, BM_NORMAL))) isEqual:obj] && ![((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfGState, BM_COMPATIBLE))) isEqual:obj]) {
        @throw new_ComAowagieTextPdfPdfXConformanceException_initWithNSString_(JreStrcat("$$$", @"Blend mode ", [obj description], @" not allowed."));
      }
      obj = [gs getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CA)];
      v = 0.0;
      if (obj != nil && (v = [((ComAowagieTextPdfPdfNumber *) cast_chk(obj, [ComAowagieTextPdfPdfNumber class])) doubleValue]) != 1.0) {
        @throw new_ComAowagieTextPdfPdfXConformanceException_initWithNSString_(JreStrcat("$D", @"Transparency is not allowed: /CA = ", v));
      }
      obj = [gs getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ca)];
      v = 0.0;
      if (obj != nil && (v = [((ComAowagieTextPdfPdfNumber *) cast_chk(obj, [ComAowagieTextPdfPdfNumber class])) doubleValue]) != 1.0) {
        @throw new_ComAowagieTextPdfPdfXConformanceException_initWithNSString_(JreStrcat("$D", @"Transparency is not allowed: /ca = ", v));
      }
      break;
      case ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_LAYER:
      @throw new_ComAowagieTextPdfPdfXConformanceException_initWithNSString_(@"Layers are not allowed.");
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfInternalPdfXConformanceImp)
