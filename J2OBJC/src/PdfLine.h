//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfLine.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_PdfLine")
#ifdef RESTRICT_PdfLine
#define INCLUDE_ALL_PdfLine 0
#else
#define INCLUDE_ALL_PdfLine 1
#endif
#undef RESTRICT_PdfLine

#if !defined (ComAowagieTextPdfPdfLine_) && (INCLUDE_ALL_PdfLine || defined(INCLUDE_ComAowagieTextPdfPdfLine))
#define ComAowagieTextPdfPdfLine_

@class ComAowagieTextChunk;
@class ComAowagieTextListItem;
@class ComAowagieTextPdfPdfChunk;
@class IOSFloatArray;
@class JavaUtilArrayList;
@protocol JavaUtilIterator;

/*!
 @brief <CODE>PdfLine</CODE> defines an array with <CODE>PdfChunk</CODE>-objects
  that fit into 1 line.
 */
@interface ComAowagieTextPdfPdfLine : NSObject {
 @public
  /*!
   @brief The height of the line.
   */
  jfloat height_;
}

#pragma mark Public

/*!
 @brief Gets the maximum size of the ascender for all the fonts used
  in this line.
 @return maximum size of all the ascenders used in this line
 */
- (jfloat)getAscender;

/*!
 @brief Gets the biggest descender for all the fonts used
  in this line.Note that this is a negative number.
 @return maximum size of all the ascenders used in this line
 */
- (jfloat)getDescender;

/*!
 @brief Gets the index of the last <CODE>PdfChunk</CODE> with metric attributes
 @return the last <CODE>PdfChunk</CODE> with metric attributes
 */
- (jint)getLastStrokeChunk;

/*!
 @brief Gets the original width of the line.
 @return the original width of the line
 */
- (jfloat)getOriginalWidth;

/*!
 @brief Checks if a newline caused the line split.
 @return <CODE>true</CODE> if a newline caused the line split
 */
- (jboolean)isNewlineSplit;

/*!
 @brief Sets the listsymbol of this line.
 <P>
  This is only necessary for the first line of a <CODE>ListItem</CODE>.
 @param listItem the list symbol
 */
- (void)setListItemWithComAowagieTextListItem:(ComAowagieTextListItem *)listItem;

/*!
 @brief Get the string representation of what is in this line.
 @return a <CODE>String</CODE>
 */
- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief Creates a PdfLine object.
 @param left the left offset
 @param originalWidth the original width of the line
 @param remainingWidth bigger than 0 if the line isn't completely filled
 @param alignment the alignment of the line
 @param newlineSplit was the line splitted (or does the paragraph end with this line)
 @param line an array of PdfChunk objects
 @param isRTL do you have to read the line from Right to Left?
 */
- (instancetype)initPackagePrivateWithFloat:(jfloat)left
                                  withFloat:(jfloat)originalWidth
                                  withFloat:(jfloat)remainingWidth
                                    withInt:(jint)alignment
                                withBoolean:(jboolean)newlineSplit
                      withJavaUtilArrayList:(JavaUtilArrayList *)line
                                withBoolean:(jboolean)isRTL;

/*!
 @brief Constructs a new <CODE>PdfLine</CODE>-object.
 @param left the limit of the line at the left
 @param right the limit of the line at the right
 @param alignment the alignment of the line
 @param height the height of the line
 */
- (instancetype)initPackagePrivateWithFloat:(jfloat)left
                                  withFloat:(jfloat)right
                                    withInt:(jint)alignment
                                  withFloat:(jfloat)height;

/*!
 @brief Adds a <CODE>PdfChunk</CODE> to the <CODE>PdfLine</CODE>.
 @param chunk the  <CODE> PdfChunk </CODE>  to add
 @return <CODE>null</CODE> if the chunk could be added completely; if not
 				a <CODE>PdfChunk</CODE> containing the part of the chunk that could
 				not be added is returned
 */
- (ComAowagieTextPdfPdfChunk *)addWithComAowagieTextPdfPdfChunk:(ComAowagieTextPdfPdfChunk *)chunk;

/*!
 @brief Gets a <CODE>PdfChunk</CODE> by index.
 @param idx the index
 @return the <CODE>PdfChunk</CODE> or null if beyond the array
 */
- (ComAowagieTextPdfPdfChunk *)getChunkWithInt:(jint)idx;

/*!
 @brief Returns the length of a line in UTF32 characters
 @return the length in UTF32 characters
 @since 2.1.2
 */
- (jint)GetLineLengthUtf32;

/*!
 @brief Gets the difference between the "normal" leading and the maximum
  size (for instance when there are images in the chunk).
 @return an extra leading for images
 @since 2.1.5
 */
- (IOSFloatArray *)getMaxSize;

/*!
 @brief Gets the number of separators in the line.
 @return the number of separators in the line
 @since 2.1.2
 */
- (jint)getSeparatorCount;

/*!
 @brief Checks if this line has to be justified.
 @return <CODE>true</CODE> if the alignment equals <VAR>ALIGN_JUSTIFIED</VAR> and there is some width left.
 */
- (jboolean)hasToBeJustified;

/*!
 @brief Returns the height of the line.
 @return a value
 */
- (jfloat)height;

/*!
 @brief Returns the left indentation of the line taking the alignment of the line into account.
 @return a value
 */
- (jfloat)indentLeft;

- (jboolean)isRTL;

/*!
 @brief Returns an iterator of <CODE>PdfChunk</CODE>s.
 @return an <CODE>Iterator</CODE>
 */
- (id<JavaUtilIterator>)iterator;

/*!
 @brief Return the indentation needed to show the listsymbol.
 @return a value
 */
- (jfloat)listIndent;

/*!
 @brief Returns the listsymbol of this line.
 @return a <CODE>PdfChunk</CODE> if the line has a listsymbol; <CODE>null</CODE> otherwise
 */
- (ComAowagieTextChunk *)listSymbol;

/*!
 @brief Returns the number of space-characters in this line.
 @return a value
 */
- (jint)numberOfSpaces;

/*!
 @brief Resets the alignment of this line.
 <P>
  The alignment of the last line of for instance a <CODE>Paragraph</CODE>
  that has to be justified, has to be reset to <VAR>ALIGN_LEFT</VAR>.
 */
- (void)resetAlignment;

/*!
 @brief Returns the number of chunks in the line.
 @return a value
 */
- (jint)size;

/*!
 @brief Returns the width that is left, after a maximum of characters is added to the line.
 @return a value
 */
- (jfloat)widthLeft;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfPdfLine)

FOUNDATION_EXPORT void ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withInt_withFloat_(ComAowagieTextPdfPdfLine *self, jfloat left, jfloat right, jint alignment, jfloat height);

FOUNDATION_EXPORT ComAowagieTextPdfPdfLine *new_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withInt_withFloat_(jfloat left, jfloat right, jint alignment, jfloat height) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfLine *create_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withInt_withFloat_(jfloat left, jfloat right, jint alignment, jfloat height);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withFloat_withInt_withBoolean_withJavaUtilArrayList_withBoolean_(ComAowagieTextPdfPdfLine *self, jfloat left, jfloat originalWidth, jfloat remainingWidth, jint alignment, jboolean newlineSplit, JavaUtilArrayList *line, jboolean isRTL);

FOUNDATION_EXPORT ComAowagieTextPdfPdfLine *new_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withFloat_withInt_withBoolean_withJavaUtilArrayList_withBoolean_(jfloat left, jfloat originalWidth, jfloat remainingWidth, jint alignment, jboolean newlineSplit, JavaUtilArrayList *line, jboolean isRTL) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfLine *create_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withFloat_withInt_withBoolean_withJavaUtilArrayList_withBoolean_(jfloat left, jfloat originalWidth, jfloat remainingWidth, jint alignment, jboolean newlineSplit, JavaUtilArrayList *line, jboolean isRTL);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfLine)

#endif

#pragma pop_macro("INCLUDE_ALL_PdfLine")
