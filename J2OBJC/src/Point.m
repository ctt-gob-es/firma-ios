//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/Point.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "Point.h"
#include "Point2D.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"

#if !__has_feature(objc_arc)
#error "Point must be compiled with ARC (-fobjc-arc)"
#endif

inline jlong HarmonyJavaAwtPoint_get_serialVersionUID(void);
#define HarmonyJavaAwtPoint_serialVersionUID -5276940640259749850LL
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtPoint, serialVersionUID, jlong)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/Point.java"


#line 26
@implementation HarmonyJavaAwtPoint

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 33
- (instancetype)init {
  HarmonyJavaAwtPoint_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 37
- (instancetype)initWithInt:(jint)x
                    withInt:(jint)y {
  HarmonyJavaAwtPoint_initWithInt_withInt_(self, x, y);
  return self;
}


#line 41
- (instancetype)initWithHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)p {
  HarmonyJavaAwtPoint_initWithHarmonyJavaAwtPoint_(self, p);
  return self;
}


#line 45
- (jboolean)isEqual:(id)obj {
  
#line 47
  if (JreObjectEqualsEquals(obj, self)) {
    return true;
  }
  if ([obj isKindOfClass:[HarmonyJavaAwtPoint class]]) {
    HarmonyJavaAwtPoint *p = (HarmonyJavaAwtPoint *) obj;
    return x_ == ((HarmonyJavaAwtPoint *) nil_chk(p))->x_ && y_ == p->y_;
  }
  return false;
}


#line 57
- (NSString *)description {
  
#line 59
  return JreStrcat("$$I$IC", [[self java_getClass] getName], @"[x=", x_, @",y=", y_, ']');
}


#line 62
- (jdouble)getX {
  
#line 64
  return x_;
}


#line 67
- (jdouble)getY {
  
#line 69
  return y_;
}


#line 72
- (HarmonyJavaAwtPoint *)getLocation {
  return new_HarmonyJavaAwtPoint_initWithInt_withInt_(x_, y_);
}

- (void)setLocationWithHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)p {
  [self setLocationWithInt:((HarmonyJavaAwtPoint *) nil_chk(p))->x_ withInt:p->y_];
}

- (void)setLocationWithInt:(jint)x
                   withInt:(jint)y {
  
#line 81
  self->x_ = x;
  self->y_ = y;
}


#line 85
- (void)setLocationWithDouble:(jdouble)x
                   withDouble:(jdouble)y {
  x = x < JavaLangInteger_MIN_VALUE ? JavaLangInteger_MIN_VALUE : x > JavaLangInteger_MAX_VALUE ? JavaLangInteger_MAX_VALUE : x;
  y = y < JavaLangInteger_MIN_VALUE ? JavaLangInteger_MIN_VALUE : y > JavaLangInteger_MAX_VALUE ? JavaLangInteger_MAX_VALUE : y;
  [self setLocationWithInt:(jint) JavaLangMath_roundWithDouble_(x) withInt:(jint) JavaLangMath_roundWithDouble_(y)];
}

- (void)moveWithInt:(jint)x
            withInt:(jint)y {
  
#line 93
  [self setLocationWithInt:x withInt:y];
}


#line 96
- (void)translateWithInt:(jint)dx
                 withInt:(jint)dy {
  
#line 97
  x_ += dx;
  y_ += dy;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:withInt:);
  methods[2].selector = @selector(initWithHarmonyJavaAwtPoint:);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(description);
  methods[5].selector = @selector(getX);
  methods[6].selector = @selector(getY);
  methods[7].selector = @selector(getLocation);
  methods[8].selector = @selector(setLocationWithHarmonyJavaAwtPoint:);
  methods[9].selector = @selector(setLocationWithInt:withInt:);
  methods[10].selector = @selector(setLocationWithDouble:withDouble:);
  methods[11].selector = @selector(moveWithInt:withInt:);
  methods[12].selector = @selector(translateWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = HarmonyJavaAwtPoint_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "x_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "y_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LHarmonyJavaAwtPoint;", "equals", "LNSObject;", "toString", "setLocation", "DD", "move", "translate" };
  static const J2ObjcClassInfo _HarmonyJavaAwtPoint = { "Point", "harmony.java.awt", ptrTable, methods, fields, 7, 0x1, 13, 3, -1, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtPoint;
}

@end


#line 33
void HarmonyJavaAwtPoint_init(HarmonyJavaAwtPoint *self) {
  HarmonyJavaAwtGeomPoint2D_init(self);
  
#line 34
  [self setLocationWithInt:0 withInt:0];
}


#line 33
HarmonyJavaAwtPoint *new_HarmonyJavaAwtPoint_init() {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtPoint, init)
}


#line 33
HarmonyJavaAwtPoint *create_HarmonyJavaAwtPoint_init() {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtPoint, init)
}

void HarmonyJavaAwtPoint_initWithInt_withInt_(HarmonyJavaAwtPoint *self, jint x, jint y) {
  HarmonyJavaAwtGeomPoint2D_init(self);
  
#line 38
  [self setLocationWithInt:x withInt:y];
}


#line 37
HarmonyJavaAwtPoint *new_HarmonyJavaAwtPoint_initWithInt_withInt_(jint x, jint y) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtPoint, initWithInt_withInt_, x, y)
}


#line 37
HarmonyJavaAwtPoint *create_HarmonyJavaAwtPoint_initWithInt_withInt_(jint x, jint y) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtPoint, initWithInt_withInt_, x, y)
}

void HarmonyJavaAwtPoint_initWithHarmonyJavaAwtPoint_(HarmonyJavaAwtPoint *self, HarmonyJavaAwtPoint *p) {
  HarmonyJavaAwtGeomPoint2D_init(self);
  
#line 42
  [self setLocationWithInt:((HarmonyJavaAwtPoint *) nil_chk(p))->x_ withInt:p->y_];
}


#line 41
HarmonyJavaAwtPoint *new_HarmonyJavaAwtPoint_initWithHarmonyJavaAwtPoint_(HarmonyJavaAwtPoint *p) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtPoint, initWithHarmonyJavaAwtPoint_, p)
}


#line 41
HarmonyJavaAwtPoint *create_HarmonyJavaAwtPoint_initWithHarmonyJavaAwtPoint_(HarmonyJavaAwtPoint *p) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtPoint, initWithHarmonyJavaAwtPoint_, p)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtPoint)
