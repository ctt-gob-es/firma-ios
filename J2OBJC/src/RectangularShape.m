//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/geom/RectangularShape.java
//

#include "AWTRectangle.h"
#include "AffineTransform.h"
#include "Dimension2D.h"
#include "FlatteningPathIterator.h"
#include "J2ObjC_source.h"
#include "PathIterator.h"
#include "Point2D.h"
#include "Rectangle2D.h"
#include "RectangularShape.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/InternalError.h"
#include "java/lang/Math.h"

#if !__has_feature(objc_arc)
#error "RectangularShape must be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/geom/RectangularShape.java"


#line 25
@implementation HarmonyJavaAwtGeomRectangularShape

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 27
- (instancetype)init {
  HarmonyJavaAwtGeomRectangularShape_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 30
- (jdouble)getX {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 32
- (jdouble)getY {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 34
- (jdouble)getWidth {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 36
- (jdouble)getHeight {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 38
- (jboolean)isEmpty {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 40
- (void)setFrameWithDouble:(jdouble)x
                withDouble:(jdouble)y
                withDouble:(jdouble)w
                withDouble:(jdouble)h {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 42
- (jdouble)getMinX {
  return [self getX];
}

- (jdouble)getMinY {
  return [self getY];
}

- (jdouble)getMaxX {
  return [self getX] + [self getWidth];
}

- (jdouble)getMaxY {
  return [self getY] + [self getHeight];
}

- (jdouble)getCenterX {
  return [self getX] + [self getWidth] / 2.0;
}

- (jdouble)getCenterY {
  return [self getY] + [self getHeight] / 2.0;
}

- (HarmonyJavaAwtGeomRectangle2D *)getFrame {
  return new_HarmonyJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_([self getX], [self getY], [self getWidth], [self getHeight]);
}

- (void)setFrameWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)loc
            withHarmonyJavaAwtGeomDimension2D:(HarmonyJavaAwtGeomDimension2D *)size {
  
#line 71
  [self setFrameWithDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(loc)) getX] withDouble:[loc getY] withDouble:[((HarmonyJavaAwtGeomDimension2D *) nil_chk(size)) getWidth] withDouble:[size getHeight]];
}


#line 74
- (void)setFrameWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)r {
  [self setFrameWithDouble:[((HarmonyJavaAwtGeomRectangle2D *) nil_chk(r)) getX] withDouble:[r getY] withDouble:[r getWidth] withDouble:[r getHeight]];
}

- (void)setFrameFromDiagonalWithDouble:(jdouble)x1
                            withDouble:(jdouble)y1
                            withDouble:(jdouble)x2
                            withDouble:(jdouble)y2 {
  
#line 79
  jdouble rx;
  
#line 79
  jdouble ry;
  
#line 79
  jdouble rw;
  
#line 79
  jdouble rh;
  if (x1 < x2) {
    rx = x1;
    rw = x2 - x1;
  }
  else {
    
#line 84
    rx = x2;
    rw = x1 - x2;
  }
  if (y1 < y2) {
    ry = y1;
    rh = y2 - y1;
  }
  else {
    
#line 91
    ry = y2;
    rh = y1 - y2;
  }
  [self setFrameWithDouble:rx withDouble:ry withDouble:rw withDouble:rh];
}


#line 97
- (void)setFrameFromDiagonalWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)p1
                            withHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)p2 {
  
#line 98
  [self setFrameFromDiagonalWithDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(p1)) getX] withDouble:[p1 getY] withDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(p2)) getX] withDouble:[p2 getY]];
}


#line 101
- (void)setFrameFromCenterWithDouble:(jdouble)centerX
                          withDouble:(jdouble)centerY
                          withDouble:(jdouble)cornerX
                          withDouble:(jdouble)cornerY {
  
#line 102
  jdouble width = JavaLangMath_absWithDouble_(cornerX - centerX);
  jdouble height = JavaLangMath_absWithDouble_(cornerY - centerY);
  [self setFrameWithDouble:centerX - width withDouble:centerY - height withDouble:width * 2.0 withDouble:height * 2.0];
}


#line 107
- (void)setFrameFromCenterWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)center
                          withHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)corner {
  
#line 108
  [self setFrameFromCenterWithDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(center)) getX] withDouble:[center getY] withDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(corner)) getX] withDouble:[corner getY]];
}


#line 111
- (jboolean)containsWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)point {
  return [self containsWithDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(point)) getX] withDouble:[point getY]];
}

- (jboolean)intersectsWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)rect {
  return [self intersectsWithDouble:[((HarmonyJavaAwtGeomRectangle2D *) nil_chk(rect)) getX] withDouble:[rect getY] withDouble:[rect getWidth] withDouble:[rect getHeight]];
}

- (jboolean)containsWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)rect {
  return [self containsWithDouble:[((HarmonyJavaAwtGeomRectangle2D *) nil_chk(rect)) getX] withDouble:[rect getY] withDouble:[rect getWidth] withDouble:[rect getHeight]];
}

- (HarmonyJavaAwtAWTRectangle *)getBounds {
  jint x1 = JreFpToInt(JavaLangMath_floorWithDouble_([self getMinX]));
  jint y1 = JreFpToInt(JavaLangMath_floorWithDouble_([self getMinY]));
  jint x2 = JreFpToInt(JavaLangMath_ceilWithDouble_([self getMaxX]));
  jint y2 = JreFpToInt(JavaLangMath_ceilWithDouble_([self getMaxY]));
  return new_HarmonyJavaAwtAWTRectangle_initWithInt_withInt_withInt_withInt_(x1, y1, x2 - x1, y2 - y1);
}

- (id<HarmonyJavaAwtGeomPathIterator>)getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)t
                                                                                withDouble:(jdouble)flatness {
  
#line 132
  return new_HarmonyJavaAwtGeomFlatteningPathIterator_initWithHarmonyJavaAwtGeomPathIterator_withDouble_([self getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:t], flatness);
}


#line 135
- (id)java_clone {
  
#line 137
  @try {
    return [super java_clone];
  }
  @catch (
#line 139
  JavaLangCloneNotSupportedException *e) {
    @throw new_JavaLangInternalError_init();
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtAWTRectangle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPathIterator;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 12, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getX);
  methods[2].selector = @selector(getY);
  methods[3].selector = @selector(getWidth);
  methods[4].selector = @selector(getHeight);
  methods[5].selector = @selector(isEmpty);
  methods[6].selector = @selector(setFrameWithDouble:withDouble:withDouble:withDouble:);
  methods[7].selector = @selector(getMinX);
  methods[8].selector = @selector(getMinY);
  methods[9].selector = @selector(getMaxX);
  methods[10].selector = @selector(getMaxY);
  methods[11].selector = @selector(getCenterX);
  methods[12].selector = @selector(getCenterY);
  methods[13].selector = @selector(getFrame);
  methods[14].selector = @selector(setFrameWithHarmonyJavaAwtGeomPoint2D:withHarmonyJavaAwtGeomDimension2D:);
  methods[15].selector = @selector(setFrameWithHarmonyJavaAwtGeomRectangle2D:);
  methods[16].selector = @selector(setFrameFromDiagonalWithDouble:withDouble:withDouble:withDouble:);
  methods[17].selector = @selector(setFrameFromDiagonalWithHarmonyJavaAwtGeomPoint2D:withHarmonyJavaAwtGeomPoint2D:);
  methods[18].selector = @selector(setFrameFromCenterWithDouble:withDouble:withDouble:withDouble:);
  methods[19].selector = @selector(setFrameFromCenterWithHarmonyJavaAwtGeomPoint2D:withHarmonyJavaAwtGeomPoint2D:);
  methods[20].selector = @selector(containsWithHarmonyJavaAwtGeomPoint2D:);
  methods[21].selector = @selector(intersectsWithHarmonyJavaAwtGeomRectangle2D:);
  methods[22].selector = @selector(containsWithHarmonyJavaAwtGeomRectangle2D:);
  methods[23].selector = @selector(getBounds);
  methods[24].selector = @selector(getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:withDouble:);
  methods[25].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "setFrame", "DDDD", "LHarmonyJavaAwtGeomPoint2D;LHarmonyJavaAwtGeomDimension2D;", "LHarmonyJavaAwtGeomRectangle2D;", "setFrameFromDiagonal", "LHarmonyJavaAwtGeomPoint2D;LHarmonyJavaAwtGeomPoint2D;", "setFrameFromCenter", "contains", "LHarmonyJavaAwtGeomPoint2D;", "intersects", "getPathIterator", "LHarmonyJavaAwtGeomAffineTransform;D", "clone" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomRectangularShape = { "RectangularShape", "harmony.java.awt.geom", ptrTable, methods, NULL, 7, 0x401, 26, 0, -1, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomRectangularShape;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end


#line 27
void HarmonyJavaAwtGeomRectangularShape_init(HarmonyJavaAwtGeomRectangularShape *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomRectangularShape)
