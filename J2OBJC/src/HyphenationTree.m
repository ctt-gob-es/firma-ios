//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/hyphenation/HyphenationTree.java
//

#include "ByteVector.h"
#include "CharVector.h"
#include "Hyphenation.h"
#include "HyphenationTree.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SimplePatternParser.h"
#include "TernaryTree.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"

#if !__has_feature(objc_arc)
#error "HyphenationTree must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfHyphenationHyphenationTree () {
 @public
  /*!
   @brief value space: stores the interletter values
   */
  ComAowagieTextPdfHyphenationByteVector *vspace_;
  /*!
   @brief This map stores hyphenation exceptions
   */
  JavaUtilHashMap *stoplist_;
  /*!
   @brief This map stores the character classes
   */
  ComAowagieTextPdfHyphenationTernaryTree *classmap_;
  /*!
   @brief Temporary map to store interletter values on pattern loading.
   */
  ComAowagieTextPdfHyphenationTernaryTree *ivalues_;
}

/*!
 @brief Packs the values by storing them in 4 bits, two values into a byte
  Values range is from 0 to 9.We use zero as terminator,
  so we'll add 1 to the value.
 @param values a string of digits from '0' to '9' representing the  interletter values.
 @return the index into the vspace array where the packed values
  are stored.
 */
- (jint)packValuesWithNSString:(NSString *)values;

/*!
 @brief String compare, returns 0 if equal or
  t is a substring of s
 @param s S
 @param si Si
 @param t T
 @param ti Ti
 @return Result
 */
- (jint)hstrcmpWithCharArray:(IOSCharArray *)s
                     withInt:(jint)si
               withCharArray:(IOSCharArray *)t
                     withInt:(jint)ti;

- (IOSByteArray *)getValuesWithInt:(jint)k;

/*!
 @brief <p>Search for all possible partial matches of word starting
  at index an update interletter values.In other words, it
  does something like:</p>
  <code>
  for(i=0; i&lt;patterns.length; i++) {
  if ( word.substring(index).startsWidth(patterns[i]) )
  update_interletter_values(patterns[i]);
  } 
 </code>
  <p>But it is done in an efficient way since the patterns are
  stored in a ternary tree.
 In fact, this is the whole purpose
  of having the tree: doing this search without having to test
  every single pattern. The number of patterns for languages
  such as English range from 4000 to 10000. Thus, doing thousands
  of string comparisons for each word to hyphenate would be
  really slow without the tree. The tradeoff is memory, but
  using a ternary tree instead of a trie, almost halves the
  the memory used by Lout or TeX. It's also faster than using
  a hash table</p>
 @param word null terminated word to match
 @param index start index from word
 @param il interletter values array to update
 */
- (void)searchPatternsWithCharArray:(IOSCharArray *)word
                            withInt:(jint)index
                      withByteArray:(IOSByteArray *)il;

/*!
 @brief Hyphenate word and return an array of hyphenation points.
 @param w char array that contains the word
 @param offset Offset to first character in word
 @param len Length of word
 @param remainCharCount Minimum number of characters allowed  before the hyphenation point.
 @param pushCharCount Minimum number of characters allowed after  the hyphenation point.
 @return a <code>Hyphenation</code> object representing
  the hyphenated word or null if word is not hyphenated.
 */
- (ComAowagieTextPdfHyphenationHyphenation *)hyphenateWithCharArray:(IOSCharArray *)w
                                                            withInt:(jint)offset
                                                            withInt:(jint)len
                                                            withInt:(jint)remainCharCount
                                                            withInt:(jint)pushCharCount;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfHyphenationHyphenationTree, vspace_, ComAowagieTextPdfHyphenationByteVector *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfHyphenationHyphenationTree, stoplist_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfHyphenationHyphenationTree, classmap_, ComAowagieTextPdfHyphenationTernaryTree *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfHyphenationHyphenationTree, ivalues_, ComAowagieTextPdfHyphenationTernaryTree *)

inline jlong ComAowagieTextPdfHyphenationHyphenationTree_get_serialVersionUID(void);
#define ComAowagieTextPdfHyphenationHyphenationTree_serialVersionUID -7763254239309429432LL
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfHyphenationHyphenationTree, serialVersionUID, jlong)

__attribute__((unused)) static jint ComAowagieTextPdfHyphenationHyphenationTree_packValuesWithNSString_(ComAowagieTextPdfHyphenationHyphenationTree *self, NSString *values);

__attribute__((unused)) static jint ComAowagieTextPdfHyphenationHyphenationTree_hstrcmpWithCharArray_withInt_withCharArray_withInt_(ComAowagieTextPdfHyphenationHyphenationTree *self, IOSCharArray *s, jint si, IOSCharArray *t, jint ti);

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfHyphenationHyphenationTree_getValuesWithInt_(ComAowagieTextPdfHyphenationHyphenationTree *self, jint k);

__attribute__((unused)) static void ComAowagieTextPdfHyphenationHyphenationTree_searchPatternsWithCharArray_withInt_withByteArray_(ComAowagieTextPdfHyphenationHyphenationTree *self, IOSCharArray *word, jint index, IOSByteArray *il);

__attribute__((unused)) static ComAowagieTextPdfHyphenationHyphenation *ComAowagieTextPdfHyphenationHyphenationTree_hyphenateWithCharArray_withInt_withInt_withInt_withInt_(ComAowagieTextPdfHyphenationHyphenationTree *self, IOSCharArray *w, jint offset, jint len, jint remainCharCount, jint pushCharCount);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/hyphenation/HyphenationTree.java"


#line 33
@implementation ComAowagieTextPdfHyphenationHyphenationTree


#line 58
- (instancetype)initPackagePrivate {
  ComAowagieTextPdfHyphenationHyphenationTree_initPackagePrivate(self);
  return self;
}


#line 74
- (jint)packValuesWithNSString:(NSString *)values {
  return ComAowagieTextPdfHyphenationHyphenationTree_packValuesWithNSString_(self, values);
}


#line 95
- (void)loadSimplePatternsWithJavaIoInputStream:(JavaIoInputStream *)stream {
  ComAowagieTextPdfHyphenationSimplePatternParser *pp = new_ComAowagieTextPdfHyphenationSimplePatternParser_initPackagePrivate();
  self->ivalues_ = new_ComAowagieTextPdfHyphenationTernaryTree_initPackagePrivate();
  
#line 99
  [pp parseWithJavaIoInputStream:stream withComAowagieTextPdfHyphenationPatternConsumer:self];
  
#line 103
  [self trimToSize];
  [((ComAowagieTextPdfHyphenationByteVector *) nil_chk(self->vspace_)) trimToSize];
  [((ComAowagieTextPdfHyphenationTernaryTree *) nil_chk(self->classmap_)) trimToSize];
  
#line 108
  self->ivalues_ = nil;
}


#line 123
- (jint)hstrcmpWithCharArray:(IOSCharArray *)s
                     withInt:(jint)si
               withCharArray:(IOSCharArray *)t
                     withInt:(jint)ti {
  return ComAowagieTextPdfHyphenationHyphenationTree_hstrcmpWithCharArray_withInt_withCharArray_withInt_(self, s, si, t, ti);
}


#line 135
- (IOSByteArray *)getValuesWithInt:(jint)k {
  return ComAowagieTextPdfHyphenationHyphenationTree_getValuesWithInt_(self, k);
}


#line 180
- (void)searchPatternsWithCharArray:(IOSCharArray *)word
                            withInt:(jint)index
                      withByteArray:(IOSByteArray *)il {
  ComAowagieTextPdfHyphenationHyphenationTree_searchPatternsWithCharArray_withInt_withByteArray_(self, word, index, il);
}


#line 252
- (ComAowagieTextPdfHyphenationHyphenation *)hyphenateWithNSString:(NSString *)word
                                                           withInt:(jint)remainCharCount
                                                           withInt:(jint)pushCharCount {
  
#line 254
  IOSCharArray *w = [((NSString *) nil_chk(word)) java_toCharArray];
  return ComAowagieTextPdfHyphenationHyphenationTree_hyphenateWithCharArray_withInt_withInt_withInt_withInt_(self, w, 0, ((IOSCharArray *) nil_chk(w))->size_, remainCharCount, pushCharCount);
}


#line 293
- (ComAowagieTextPdfHyphenationHyphenation *)hyphenateWithCharArray:(IOSCharArray *)w
                                                            withInt:(jint)offset
                                                            withInt:(jint)len
                                                            withInt:(jint)remainCharCount
                                                            withInt:(jint)pushCharCount {
  return ComAowagieTextPdfHyphenationHyphenationTree_hyphenateWithCharArray_withInt_withInt_withInt_withInt_(self, w, offset, len, remainCharCount, pushCharCount);
}


#line 393
- (void)addClassWithNSString:(NSString *)chargroup {
  
#line 395
  if ([((NSString *) nil_chk(chargroup)) java_length] > 0) {
    jchar equivChar = [chargroup charAtWithInt:0];
    IOSCharArray *key = [IOSCharArray newArrayWithLength:2];
    *IOSCharArray_GetRef(key, 1) = 0;
    for (jint i = 0; i < [chargroup java_length]; i++) {
      *IOSCharArray_GetRef(key, 0) = [chargroup charAtWithInt:i];
      [((ComAowagieTextPdfHyphenationTernaryTree *) nil_chk(self->classmap_)) insertWithCharArray:key withInt:0 withChar:equivChar];
    }
  }
}


#line 414
- (void)addExceptionWithNSString:(NSString *)word
           withJavaUtilArrayList:(JavaUtilArrayList *)hyphenatedword {
  (void) [((JavaUtilHashMap *) nil_chk(self->stoplist_)) putWithId:word withId:hyphenatedword];
}


#line 429
- (void)addPatternWithNSString:(NSString *)pattern
                  withNSString:(NSString *)ivalue {
  jint k = [((ComAowagieTextPdfHyphenationTernaryTree *) nil_chk(self->ivalues_)) findWithNSString:ivalue];
  if (k <= 0) {
    k = ComAowagieTextPdfHyphenationHyphenationTree_packValuesWithNSString_(self, ivalue);
    [((ComAowagieTextPdfHyphenationTernaryTree *) nil_chk(self->ivalues_)) insertWithNSString:ivalue withChar:(jchar) k];
  }
  [self insertWithNSString:pattern withChar:(jchar) k];
}

- (void)printStats {
  
#line 441
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Value space size = ", JavaLangInteger_toStringWithInt_(
#line 442
  [((ComAowagieTextPdfHyphenationByteVector *) nil_chk(self->vspace_)) length]))];
  [super printStats];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfHyphenationHyphenation;", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfHyphenationHyphenation;", 0x2, 10, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(packValuesWithNSString:);
  methods[2].selector = @selector(loadSimplePatternsWithJavaIoInputStream:);
  methods[3].selector = @selector(hstrcmpWithCharArray:withInt:withCharArray:withInt:);
  methods[4].selector = @selector(getValuesWithInt:);
  methods[5].selector = @selector(searchPatternsWithCharArray:withInt:withByteArray:);
  methods[6].selector = @selector(hyphenateWithNSString:withInt:withInt:);
  methods[7].selector = @selector(hyphenateWithCharArray:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(addClassWithNSString:);
  methods[9].selector = @selector(addExceptionWithNSString:withJavaUtilArrayList:);
  methods[10].selector = @selector(addPatternWithNSString:withNSString:);
  methods[11].selector = @selector(printStats);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComAowagieTextPdfHyphenationHyphenationTree_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "vspace_", "LComAowagieTextPdfHyphenationByteVector;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "stoplist_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "classmap_", "LComAowagieTextPdfHyphenationTernaryTree;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ivalues_", "LComAowagieTextPdfHyphenationTernaryTree;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "packValues", "LNSString;", "loadSimplePatterns", "LJavaIoInputStream;", "hstrcmp", "[CI[CI", "getValues", "I", "searchPatterns", "[CI[B", "hyphenate", "LNSString;II", "[CIIII", "addClass", "addException", "LNSString;LJavaUtilArrayList;", "addPattern", "LNSString;LNSString;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfHyphenationHyphenationTree = { "HyphenationTree", "com.aowagie.text.pdf.hyphenation", ptrTable, methods, fields, 7, 0x0, 12, 5, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfHyphenationHyphenationTree;
}

@end


#line 58
void ComAowagieTextPdfHyphenationHyphenationTree_initPackagePrivate(ComAowagieTextPdfHyphenationHyphenationTree *self) {
  ComAowagieTextPdfHyphenationTernaryTree_initPackagePrivate(self);
  
#line 59
  self->stoplist_ = new_JavaUtilLinkedHashMap_initWithInt_(23);
  self->classmap_ = new_ComAowagieTextPdfHyphenationTernaryTree_initPackagePrivate();
  self->vspace_ = new_ComAowagieTextPdfHyphenationByteVector_initPackagePrivate();
  [self->vspace_ alloc__WithInt:1];
}


#line 58
ComAowagieTextPdfHyphenationHyphenationTree *new_ComAowagieTextPdfHyphenationHyphenationTree_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfHyphenationHyphenationTree, initPackagePrivate)
}


#line 58
ComAowagieTextPdfHyphenationHyphenationTree *create_ComAowagieTextPdfHyphenationHyphenationTree_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfHyphenationHyphenationTree, initPackagePrivate)
}


#line 74
jint ComAowagieTextPdfHyphenationHyphenationTree_packValuesWithNSString_(ComAowagieTextPdfHyphenationHyphenationTree *self, NSString *values) {
  jint i;
  jint n = [((NSString *) nil_chk(values)) java_length];
  jint m = (n & 1) == 1 ? (JreRShift32(n, 1)) + 2 : (JreRShift32(n, 1)) + 1;
  jint offset = [((ComAowagieTextPdfHyphenationByteVector *) nil_chk(self->vspace_)) alloc__WithInt:m];
  IOSByteArray *va = [self->vspace_ getArray];
  for (i = 0; i < n; i++) {
    jint j = JreRShift32(i, 1);
    jbyte v = (jbyte) (([values charAtWithInt:i] - '0' + 1) & (jint) 0x0f);
    if ((i & 1) == 1) {
      *IOSByteArray_GetRef(nil_chk(va), j + offset) = (jbyte) (IOSByteArray_Get(va, j + offset) | v);
    }
    else {
      
#line 86
      *IOSByteArray_GetRef(nil_chk(va), j + offset) = (jbyte) (JreLShift32(v, 4));
    }
  }
  *IOSByteArray_GetRef(nil_chk(va), m - 1 + offset) = 0;
  return offset;
}


#line 123
jint ComAowagieTextPdfHyphenationHyphenationTree_hstrcmpWithCharArray_withInt_withCharArray_withInt_(ComAowagieTextPdfHyphenationHyphenationTree *self, IOSCharArray *s, jint si, IOSCharArray *t, jint ti) {
  for (; IOSCharArray_Get(nil_chk(s), si) == IOSCharArray_Get(nil_chk(t), ti); si++, ti++) {
    if (IOSCharArray_Get(s, si) == 0) {
      return 0;
    }
  }
  if (IOSCharArray_Get(t, ti) == 0) {
    return 0;
  }
  return IOSCharArray_Get(s, si) - IOSCharArray_Get(t, ti);
}

IOSByteArray *ComAowagieTextPdfHyphenationHyphenationTree_getValuesWithInt_(ComAowagieTextPdfHyphenationHyphenationTree *self, jint k) {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  jbyte v = [((ComAowagieTextPdfHyphenationByteVector *) nil_chk(self->vspace_)) getWithInt:k++];
  while (v != 0) {
    jchar c = (jchar) ((JreURShift32(v, 4)) - 1);
    (void) [buf appendWithChar:c];
    c = (jchar) (v & (jint) 0x0f);
    if (c == 0) {
      break;
    }
    c = (jchar) (c - 1);
    (void) [buf appendWithChar:c];
    v = [self->vspace_ getWithInt:k++];
  }
  IOSByteArray *res = [IOSByteArray newArrayWithLength:[buf java_length]];
  for (jint i = 0; i < res->size_; i++) {
    *IOSByteArray_GetRef(res, i) = (jbyte) [buf charAtWithInt:i];
  }
  return res;
}


#line 180
void ComAowagieTextPdfHyphenationHyphenationTree_searchPatternsWithCharArray_withInt_withByteArray_(ComAowagieTextPdfHyphenationHyphenationTree *self, IOSCharArray *word, jint index, IOSByteArray *il) {
  IOSByteArray *values;
  jint i = index;
  jchar p;
  
#line 183
  jchar q;
  jchar sp = IOSCharArray_Get(nil_chk(word), i);
  p = self->root_;
  
#line 187
  while (p > 0 && p < ((IOSCharArray *) nil_chk(self->sc_))->size_) {
    if (IOSCharArray_Get(nil_chk(self->sc_), p) == (jint) 0xFFFF) {
      if (ComAowagieTextPdfHyphenationHyphenationTree_hstrcmpWithCharArray_withInt_withCharArray_withInt_(self, word, i, [((ComAowagieTextPdfHyphenationCharVector *) nil_chk(self->kv_)) getArray], IOSCharArray_Get(nil_chk(self->lo_), p)) == 0) {
        values = ComAowagieTextPdfHyphenationHyphenationTree_getValuesWithInt_(self, IOSCharArray_Get(nil_chk(self->eq_), p));
        jint j = index;
        {
          IOSByteArray *a__ =
#line 192
          values;
          jbyte const *b__ = ((IOSByteArray *) nil_chk(a__))->buffer_;
          jbyte const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            jbyte value = *b__++;
            
#line 193
            if (j < ((IOSByteArray *) nil_chk(il))->size_ && value > IOSByteArray_Get(il, j)) {
              *IOSByteArray_GetRef(il, j) = value;
            }
            j++;
          }
        }
      }
      
#line 199
      return;
    }
    jint d = sp - IOSCharArray_Get(self->sc_, p);
    if (d == 0) {
      if (sp == 0) {
        break;
      }
      sp = IOSCharArray_Get(word, ++i);
      p = IOSCharArray_Get(nil_chk(self->eq_), p);
      q = p;
      
#line 212
      while (q > 0 && q < self->sc_->size_) {
        if (IOSCharArray_Get(self->sc_, q) == (jint) 0xFFFF) {
          break;
        }
        if (IOSCharArray_Get(self->sc_, q) == 0) {
          values = ComAowagieTextPdfHyphenationHyphenationTree_getValuesWithInt_(self, IOSCharArray_Get(self->eq_, q));
          jint j = index;
          {
            IOSByteArray *a__ =
#line 219
            values;
            jbyte const *b__ = ((IOSByteArray *) nil_chk(a__))->buffer_;
            jbyte const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              jbyte value = *b__++;
              
#line 220
              if (j < ((IOSByteArray *) nil_chk(il))->size_ && value > IOSByteArray_Get(il, j)) {
                *IOSByteArray_GetRef(il, j) = value;
              }
              j++;
            }
          }
          
#line 225
          break;
        }
        else {
          
#line 227
          q = IOSCharArray_Get(nil_chk(self->lo_), q);
        }
      }
    }
    else {
      
#line 237
      p = d < 0 ? IOSCharArray_Get(nil_chk(self->lo_), p) : IOSCharArray_Get(nil_chk(self->hi_), p);
    }
  }
}


#line 293
ComAowagieTextPdfHyphenationHyphenation *ComAowagieTextPdfHyphenationHyphenationTree_hyphenateWithCharArray_withInt_withInt_withInt_withInt_(ComAowagieTextPdfHyphenationHyphenationTree *self, IOSCharArray *w, jint offset, jint len, jint remainCharCount, jint pushCharCount) {
  
#line 295
  jint i;
  IOSCharArray *word = [IOSCharArray newArrayWithLength:len + 3];
  
#line 299
  IOSCharArray *c = [IOSCharArray newArrayWithLength:2];
  jint iIgnoreAtBeginning = 0;
  jint iLength = len;
  jboolean bEndOfLetters = false;
  for (i = 1; i <= len; i++) {
    *IOSCharArray_GetRef(c, 0) = IOSCharArray_Get(nil_chk(w), offset + i - 1);
    jint nc = [((ComAowagieTextPdfHyphenationTernaryTree *) nil_chk(self->classmap_)) findWithCharArray:c withInt:0];
    if (nc < 0) {
      if (i == 1 + iIgnoreAtBeginning) {
        
#line 309
        iIgnoreAtBeginning++;
      }
      else {
        bEndOfLetters = true;
      }
      iLength--;
    }
    else {
      
#line 316
      if (!bEndOfLetters) {
        *IOSCharArray_GetRef(word, i - iIgnoreAtBeginning) = (jchar) nc;
      }
      else {
        
#line 319
        return nil;
      }
    }
  }
  len = iLength;
  if (len < remainCharCount + pushCharCount) {
    
#line 326
    return nil;
  }
  IOSIntArray *result = [IOSIntArray newArrayWithLength:len + 1];
  jint k = 0;
  
#line 332
  NSString *sw = [NSString java_stringWithCharacters:word offset:1 length:len];
  if ([((JavaUtilHashMap *) nil_chk(self->stoplist_)) containsKeyWithId:sw]) {
    
#line 335
    JavaUtilArrayList *hw = (JavaUtilArrayList *) cast_chk([self->stoplist_ getWithId:sw], [JavaUtilArrayList class]);
    jint j = 0;
    for (i = 0; i < [((JavaUtilArrayList *) nil_chk(hw)) size]; i++) {
      id o = [hw getWithInt:i];
      
#line 341
      if ([o isKindOfClass:[NSString class]]) {
        j += [((NSString *) nil_chk(((NSString *) o))) java_length];
        if (j >= remainCharCount && j < len - pushCharCount) {
          *IOSIntArray_GetRef(result, k++) = j + iIgnoreAtBeginning;
        }
      }
    }
  }
  else {
    *IOSCharArray_GetRef(word, 0) = '.';
    *IOSCharArray_GetRef(word, len + 1) = '.';
    *IOSCharArray_GetRef(word, len + 2) = 0;
    IOSByteArray *il = [IOSByteArray newArrayWithLength:len + 3];
    for (i = 0; i < len + 1; i++) {
      ComAowagieTextPdfHyphenationHyphenationTree_searchPatternsWithCharArray_withInt_withByteArray_(self, word, i, il);
    }
    
#line 362
    for (i = 0; i < len; i++) {
      if ((IOSByteArray_Get(il, i + 1) & 1) == 1 && i >= remainCharCount &&
#line 364
      i <= len - pushCharCount) {
        *IOSIntArray_GetRef(result, k++) = i + iIgnoreAtBeginning;
      }
    }
  }
  
#line 371
  if (k > 0) {
    
#line 373
    IOSIntArray *res = [IOSIntArray newArrayWithLength:k];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(result, 0, res, 0, k);
    return new_ComAowagieTextPdfHyphenationHyphenation_initWithNSString_withIntArray_([NSString java_stringWithCharacters:w offset:offset length:len], res);
  }
  else {
    
#line 377
    return nil;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfHyphenationHyphenationTree)
