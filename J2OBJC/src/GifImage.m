//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/codec/GifImage.java
//

#include "ExceptionConverter.h"
#include "GifImage.h"
#include "IOSPrimitiveArray.h"
#include "Image.h"
#include "ImgRaw.h"
#include "J2ObjC_source.h"
#include "PdfArray.h"
#include "PdfDictionary.h"
#include "PdfName.h"
#include "PdfNumber.h"
#include "PdfString.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/DataInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"

#if !__has_feature(objc_arc)
#error "GifImage must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfCodecGifImage () {
 @public
  JavaIoDataInputStream *in_;
  jint width_;
  jint height_;
  jboolean gctFlag_;
  jboolean lctFlag_;
  jboolean interlace_;
  jint ix_;
  jint iy_;
  jint iw_;
  jint ih_;
  IOSByteArray *block_;
  jint blockSize_;
  jint dispose_;
  jboolean transparency_;
  jint transIndex_;
  IOSShortArray *prefix_;
  IOSByteArray *suffix_;
  IOSByteArray *pixelStack_;
  IOSByteArray *m_out_;
  jint m_bpc_;
  jint m_gbpc_;
  IOSByteArray *m_global_table_;
  IOSByteArray *m_curr_table_;
  jint m_line_stride_;
  IOSByteArray *fromData_;
  JavaNetURL *fromUrl_;
  JavaUtilArrayList *frames_;
}

- (void)processWithJavaIoInputStream:(JavaIoInputStream *)is;

/*!
 @brief Reads GIF file header information.
 @throw IOExceptionon error
 */
- (void)readHeader;

/*!
 @brief Reads Logical Screen Descriptor
 @throw IOExceptionon error
 */
- (void)readLSD;

/*!
 @brief Reads next 16-bit value, LSB first
 @return Short
 @throw IOExceptionon error
 */
- (jint)readShort;

/*!
 @brief Reads next variable length block from input.
 @return number of bytes stored in "buffer"
 @throw IOExceptionon error
 */
- (jint)readBlock;

- (IOSByteArray *)readColorTableWithInt:(jint)bpc;

+ (jint)newBpcWithInt:(jint)bpc OBJC_METHOD_FAMILY_NONE;

- (void)readContents;

/*!
 @brief Reads next frame image
 @throw IOExceptionon error
 */
- (void)readImage;

- (jboolean)decodeImageData;

- (void)setPixelWithInt:(jint)x
                withInt:(jint)y
                withInt:(jint)v;

/*!
 @brief Reads Graphics Control Extension values
 @throw IOExceptionon error
 */
- (void)readGraphicControlExt;

/*!
 @brief Skips variable length blocks up to and including
  next zero length block.
 @throw IOExceptionon error
 */
- (void)skip;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecGifImage, in_, JavaIoDataInputStream *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecGifImage, block_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecGifImage, prefix_, IOSShortArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecGifImage, suffix_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecGifImage, pixelStack_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecGifImage, m_out_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecGifImage, m_global_table_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecGifImage, m_curr_table_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecGifImage, fromData_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecGifImage, fromUrl_, JavaNetURL *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecGifImage, frames_, JavaUtilArrayList *)

inline jint ComAowagieTextPdfCodecGifImage_get_MaxStackSize(void);
#define ComAowagieTextPdfCodecGifImage_MaxStackSize 4096
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecGifImage, MaxStackSize, jint)

__attribute__((unused)) static void ComAowagieTextPdfCodecGifImage_processWithJavaIoInputStream_(ComAowagieTextPdfCodecGifImage *self, JavaIoInputStream *is);

__attribute__((unused)) static void ComAowagieTextPdfCodecGifImage_readHeader(ComAowagieTextPdfCodecGifImage *self);

__attribute__((unused)) static void ComAowagieTextPdfCodecGifImage_readLSD(ComAowagieTextPdfCodecGifImage *self);

__attribute__((unused)) static jint ComAowagieTextPdfCodecGifImage_readShort(ComAowagieTextPdfCodecGifImage *self);

__attribute__((unused)) static jint ComAowagieTextPdfCodecGifImage_readBlock(ComAowagieTextPdfCodecGifImage *self);

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfCodecGifImage_readColorTableWithInt_(ComAowagieTextPdfCodecGifImage *self, jint bpc);

__attribute__((unused)) static jint ComAowagieTextPdfCodecGifImage_newBpcWithInt_(jint bpc);

__attribute__((unused)) static void ComAowagieTextPdfCodecGifImage_readContents(ComAowagieTextPdfCodecGifImage *self);

__attribute__((unused)) static void ComAowagieTextPdfCodecGifImage_readImage(ComAowagieTextPdfCodecGifImage *self);

__attribute__((unused)) static jboolean ComAowagieTextPdfCodecGifImage_decodeImageData(ComAowagieTextPdfCodecGifImage *self);

__attribute__((unused)) static void ComAowagieTextPdfCodecGifImage_setPixelWithInt_withInt_withInt_(ComAowagieTextPdfCodecGifImage *self, jint x, jint y, jint v);

__attribute__((unused)) static void ComAowagieTextPdfCodecGifImage_readGraphicControlExt(ComAowagieTextPdfCodecGifImage *self);

__attribute__((unused)) static void ComAowagieTextPdfCodecGifImage_skip(ComAowagieTextPdfCodecGifImage *self);

@interface ComAowagieTextPdfCodecGifImage_GifFrame : NSObject {
 @public
  ComAowagieTextImage *image_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfCodecGifImage_GifFrame)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecGifImage_GifFrame, image_, ComAowagieTextImage *)

__attribute__((unused)) static void ComAowagieTextPdfCodecGifImage_GifFrame_init(ComAowagieTextPdfCodecGifImage_GifFrame *self);

__attribute__((unused)) static ComAowagieTextPdfCodecGifImage_GifFrame *new_ComAowagieTextPdfCodecGifImage_GifFrame_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfCodecGifImage_GifFrame *create_ComAowagieTextPdfCodecGifImage_GifFrame_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfCodecGifImage_GifFrame)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/codec/GifImage.java"


#line 70
@implementation ComAowagieTextPdfCodecGifImage


#line 121
- (instancetype)initWithJavaNetURL:(JavaNetURL *)url {
  ComAowagieTextPdfCodecGifImage_initWithJavaNetURL_(self, url);
  return self;
}


#line 141
- (instancetype)initWithByteArray:(IOSByteArray *)data {
  ComAowagieTextPdfCodecGifImage_initWithByteArray_(self, data);
  return self;
}


#line 160
- (jint)getFrameCount {
  return [((JavaUtilArrayList *) nil_chk(self->frames_)) size];
}


#line 168
- (ComAowagieTextImage *)getImageWithInt:(jint)frame {
  ComAowagieTextPdfCodecGifImage_GifFrame *gf = (ComAowagieTextPdfCodecGifImage_GifFrame *) cast_chk([((JavaUtilArrayList *) nil_chk(self->frames_)) getWithInt:frame - 1], [ComAowagieTextPdfCodecGifImage_GifFrame class]);
  return ((ComAowagieTextPdfCodecGifImage_GifFrame *) nil_chk(gf))->image_;
}


#line 180
- (IOSIntArray *)getLogicalScreen {
  return [IOSIntArray newArrayWithInts:(jint[]){ self->width_, self->height_ } count:2];
}

- (void)processWithJavaIoInputStream:(JavaIoInputStream *)is {
  ComAowagieTextPdfCodecGifImage_processWithJavaIoInputStream_(self, is);
}


#line 197
- (void)readHeader {
  ComAowagieTextPdfCodecGifImage_readHeader(self);
}


#line 216
- (void)readLSD {
  ComAowagieTextPdfCodecGifImage_readLSD(self);
}


#line 234
- (jint)readShort {
  return ComAowagieTextPdfCodecGifImage_readShort(self);
}


#line 245
- (jint)readBlock {
  return ComAowagieTextPdfCodecGifImage_readBlock(self);
}


#line 260
- (IOSByteArray *)readColorTableWithInt:(jint)bpc {
  return ComAowagieTextPdfCodecGifImage_readColorTableWithInt_(self, bpc);
}


#line 270
+ (jint)newBpcWithInt:(jint)bpc {
  return ComAowagieTextPdfCodecGifImage_newBpcWithInt_(bpc);
}


#line 284
- (void)readContents {
  ComAowagieTextPdfCodecGifImage_readContents(self);
}


#line 324
- (void)readImage {
  ComAowagieTextPdfCodecGifImage_readImage(self);
}


#line 388
- (jboolean)decodeImageData {
  return ComAowagieTextPdfCodecGifImage_decodeImageData(self);
}


#line 545
- (void)setPixelWithInt:(jint)x
                withInt:(jint)y
                withInt:(jint)v {
  ComAowagieTextPdfCodecGifImage_setPixelWithInt_withInt_withInt_(self, x, y, v);
}


#line 563
- (void)readGraphicControlExt {
  ComAowagieTextPdfCodecGifImage_readGraphicControlExt(self);
}


#line 581
- (void)skip {
  ComAowagieTextPdfCodecGifImage_skip(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextImage;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x2, 7, 4, 1, -1, -1, -1 },
    { NULL, "I", 0xa, 8, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaNetURL:);
  methods[1].selector = @selector(initWithByteArray:);
  methods[2].selector = @selector(getFrameCount);
  methods[3].selector = @selector(getImageWithInt:);
  methods[4].selector = @selector(getLogicalScreen);
  methods[5].selector = @selector(processWithJavaIoInputStream:);
  methods[6].selector = @selector(readHeader);
  methods[7].selector = @selector(readLSD);
  methods[8].selector = @selector(readShort);
  methods[9].selector = @selector(readBlock);
  methods[10].selector = @selector(readColorTableWithInt:);
  methods[11].selector = @selector(newBpcWithInt:);
  methods[12].selector = @selector(readContents);
  methods[13].selector = @selector(readImage);
  methods[14].selector = @selector(decodeImageData);
  methods[15].selector = @selector(setPixelWithInt:withInt:withInt:);
  methods[16].selector = @selector(readGraphicControlExt);
  methods[17].selector = @selector(skip);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "in_", "LJavaIoDataInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "width_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "height_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "gctFlag_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lctFlag_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "interlace_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ix_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iy_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iw_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ih_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "block_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dispose_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "transparency_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "transIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MaxStackSize", "I", .constantValue.asInt = ComAowagieTextPdfCodecGifImage_MaxStackSize, 0x1a, -1, -1, -1, -1 },
    { "prefix_", "[S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "suffix_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pixelStack_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_out_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_bpc_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_gbpc_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_global_table_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_curr_table_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_line_stride_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fromData_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fromUrl_", "LJavaNetURL;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "frames_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNetURL;", "LJavaIoIOException;", "[B", "getImage", "I", "process", "LJavaIoInputStream;", "readColorTable", "newBpc", "setPixel", "III", "LComAowagieTextPdfCodecGifImage_GifFrame;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfCodecGifImage = { "GifImage", "com.aowagie.text.pdf.codec", ptrTable, methods, fields, 7, 0x1, 18, 28, -1, 11, -1, -1, -1 };
  return &_ComAowagieTextPdfCodecGifImage;
}

@end


#line 121
void ComAowagieTextPdfCodecGifImage_initWithJavaNetURL_(ComAowagieTextPdfCodecGifImage *self, JavaNetURL *url) {
  NSObject_init(self);
  self->block_ = [IOSByteArray newArrayWithLength:
#line 87
  256];
  self->blockSize_ = 0;
  self->dispose_ =
#line 91
  0;
  self->transparency_ = false;
  self->frames_ = new_JavaUtilArrayList_init();
  
#line 122
  self->fromUrl_ = url;
  JavaIoInputStream *is = nil;
  @try {
    is = [((JavaNetURL *) nil_chk(url)) openStream];
    ComAowagieTextPdfCodecGifImage_processWithJavaIoInputStream_(self, is);
  }
  @finally {
    if (is != nil) {
      [is close];
    }
  }
}


#line 121
ComAowagieTextPdfCodecGifImage *new_ComAowagieTextPdfCodecGifImage_initWithJavaNetURL_(JavaNetURL *url) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfCodecGifImage, initWithJavaNetURL_, url)
}


#line 121
ComAowagieTextPdfCodecGifImage *create_ComAowagieTextPdfCodecGifImage_initWithJavaNetURL_(JavaNetURL *url) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfCodecGifImage, initWithJavaNetURL_, url)
}


#line 141
void ComAowagieTextPdfCodecGifImage_initWithByteArray_(ComAowagieTextPdfCodecGifImage *self, IOSByteArray *data) {
  NSObject_init(self);
  self->block_ = [IOSByteArray newArrayWithLength:
#line 87
  256];
  self->blockSize_ = 0;
  self->dispose_ =
#line 91
  0;
  self->transparency_ = false;
  self->frames_ = new_JavaUtilArrayList_init();
  
#line 142
  self->fromData_ = data;
  JavaIoInputStream *is = nil;
  @try {
    is = new_JavaIoByteArrayInputStream_initWithByteArray_(data);
    ComAowagieTextPdfCodecGifImage_processWithJavaIoInputStream_(self, is);
  }
  @finally {
    if (is != nil) {
      [is close];
    }
  }
}


#line 141
ComAowagieTextPdfCodecGifImage *new_ComAowagieTextPdfCodecGifImage_initWithByteArray_(IOSByteArray *data) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfCodecGifImage, initWithByteArray_, data)
}


#line 141
ComAowagieTextPdfCodecGifImage *create_ComAowagieTextPdfCodecGifImage_initWithByteArray_(IOSByteArray *data) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfCodecGifImage, initWithByteArray_, data)
}


#line 184
void ComAowagieTextPdfCodecGifImage_processWithJavaIoInputStream_(ComAowagieTextPdfCodecGifImage *self, JavaIoInputStream *is) {
  self->in_ = new_JavaIoDataInputStream_initWithJavaIoInputStream_(new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(is));
  ComAowagieTextPdfCodecGifImage_readHeader(self);
  ComAowagieTextPdfCodecGifImage_readContents(self);
  if ([((JavaUtilArrayList *) nil_chk(self->frames_)) isEmpty]) {
    @throw new_JavaIoIOException_initWithNSString_(@"The file does not contain any valid image.");
  }
}


#line 197
void ComAowagieTextPdfCodecGifImage_readHeader(ComAowagieTextPdfCodecGifImage *self) {
  NSString *id_ = @"";
  for (jint i = 0; i < 6; i++) {
    (void) JreStrAppendStrong(&id_, "C", (jchar) [((JavaIoDataInputStream *) nil_chk(self->in_)) read]);
  }
  if (![id_ java_hasPrefix:@"GIF8"]) {
    @throw new_JavaIoIOException_initWithNSString_(@"Gif signature nor found.");
  }
  
#line 206
  ComAowagieTextPdfCodecGifImage_readLSD(self);
  if (self->gctFlag_) {
    self->m_global_table_ = ComAowagieTextPdfCodecGifImage_readColorTableWithInt_(self, self->m_gbpc_);
  }
}


#line 216
void ComAowagieTextPdfCodecGifImage_readLSD(ComAowagieTextPdfCodecGifImage *self) {
  
#line 219
  self->width_ = ComAowagieTextPdfCodecGifImage_readShort(self);
  self->height_ = ComAowagieTextPdfCodecGifImage_readShort(self);
  
#line 223
  jint packed = [((JavaIoDataInputStream *) nil_chk(self->in_)) read];
  self->gctFlag_ = ((packed & (jint) 0x80) != 0);
  self->m_gbpc_ = (packed & 7) + 1;
}


#line 234
jint ComAowagieTextPdfCodecGifImage_readShort(ComAowagieTextPdfCodecGifImage *self) {
  
#line 236
  return [((JavaIoDataInputStream *) nil_chk(self->in_)) read] | (JreLShift32([((JavaIoDataInputStream *) nil_chk(self->in_)) read], 8));
}


#line 245
jint ComAowagieTextPdfCodecGifImage_readBlock(ComAowagieTextPdfCodecGifImage *self) {
  self->blockSize_ = [((JavaIoDataInputStream *) nil_chk(self->in_)) read];
  if (self->blockSize_ <= 0) {
    return self->blockSize_ = 0;
  }
  for (jint k = 0; k < self->blockSize_; ++k) {
    jint v = [((JavaIoDataInputStream *) nil_chk(self->in_)) read];
    if (v < 0) {
      return self->blockSize_ = k;
    }
    *IOSByteArray_GetRef(nil_chk(self->block_), k) = (jbyte) v;
  }
  return self->blockSize_;
}

IOSByteArray *ComAowagieTextPdfCodecGifImage_readColorTableWithInt_(ComAowagieTextPdfCodecGifImage *self, jint bpc) {
  jint ncolors = JreLShift32(1, bpc);
  jint nbytes = 3 * ncolors;
  bpc = ComAowagieTextPdfCodecGifImage_newBpcWithInt_(bpc);
  IOSByteArray *table = [IOSByteArray newArrayWithLength:(JreLShift32(1, bpc)) * 3];
  [((JavaIoDataInputStream *) nil_chk(self->in_)) readFullyWithByteArray:table withInt:0 withInt:nbytes];
  return table;
}


#line 270
jint ComAowagieTextPdfCodecGifImage_newBpcWithInt_(jint bpc) {
  ComAowagieTextPdfCodecGifImage_initialize();
  
#line 271
  switch (bpc) {
    case 1:
    case 2:
    case 4:
    break;
    case 3:
    return 4;
    default:
    return 8;
  }
  return bpc;
}


#line 284
void ComAowagieTextPdfCodecGifImage_readContents(ComAowagieTextPdfCodecGifImage *self) {
  
#line 286
  jboolean done = false;
  while (!done) {
    jint code = [((JavaIoDataInputStream *) nil_chk(self->in_)) read];
    switch (code) {
      
#line 291
      case (jint) 0x2C:
      ComAowagieTextPdfCodecGifImage_readImage(self);
      break;
      
#line 295
      case (jint) 0x21:
      code = [((JavaIoDataInputStream *) nil_chk(self->in_)) read];
      switch (code) {
        
#line 299
        case (jint) 0xf9:
        ComAowagieTextPdfCodecGifImage_readGraphicControlExt(self);
        break;
        
#line 303
        case (jint) 0xff:
        ComAowagieTextPdfCodecGifImage_readBlock(self);
        ComAowagieTextPdfCodecGifImage_skip(self);
        break;
        
#line 308
        default:
        ComAowagieTextPdfCodecGifImage_skip(self);
      }
      break;
      
#line 313
      default:
      done = true;
      break;
    }
  }
}


#line 324
void ComAowagieTextPdfCodecGifImage_readImage(ComAowagieTextPdfCodecGifImage *self) {
  self->ix_ = ComAowagieTextPdfCodecGifImage_readShort(self);
  self->iy_ = ComAowagieTextPdfCodecGifImage_readShort(self);
  self->iw_ = ComAowagieTextPdfCodecGifImage_readShort(self);
  self->ih_ = ComAowagieTextPdfCodecGifImage_readShort(self);
  
#line 330
  jint packed = [((JavaIoDataInputStream *) nil_chk(self->in_)) read];
  self->lctFlag_ = ((packed & (jint) 0x80) != 0);
  self->interlace_ = ((packed & (jint) 0x40) != 0);
  
#line 336
  self->m_bpc_ = ComAowagieTextPdfCodecGifImage_newBpcWithInt_(self->m_gbpc_);
  if (self->lctFlag_) {
    self->m_curr_table_ = ComAowagieTextPdfCodecGifImage_readColorTableWithInt_(self, (packed & 7) + 1);
    self->m_bpc_ = ComAowagieTextPdfCodecGifImage_newBpcWithInt_((packed & 7) + 1);
  }
  else {
    self->m_curr_table_ = self->m_global_table_;
  }
  if (self->transparency_ && self->transIndex_ >= JreIntDiv(((IOSByteArray *) nil_chk(self->m_curr_table_))->size_, 3)) {
    self->transparency_ = false;
  }
  if (self->transparency_ && self->m_bpc_ == 1) {
    IOSByteArray *tp = [IOSByteArray newArrayWithLength:12];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->m_curr_table_, 0, tp, 0, 6);
    self->m_curr_table_ = tp;
    self->m_bpc_ = 2;
  }
  jboolean skipZero = ComAowagieTextPdfCodecGifImage_decodeImageData(self);
  if (!skipZero) {
    ComAowagieTextPdfCodecGifImage_skip(self);
  }
  
#line 358
  ComAowagieTextImage *img = nil;
  @try {
    img = new_ComAowagieTextImgRaw_initWithInt_withInt_withInt_withInt_withByteArray_(self->iw_, self->ih_, 1, self->m_bpc_, self->m_out_);
    ComAowagieTextPdfPdfArray *colorspace = new_ComAowagieTextPdfPdfArray_init();
    [colorspace addWithComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, INDEXED)];
    [colorspace addWithComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DEVICERGB)];
    jint len = ((IOSByteArray *) nil_chk(self->m_curr_table_))->size_;
    [colorspace addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(JreIntDiv(len, 3) - 1)];
    [colorspace addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithByteArray_(self->m_curr_table_)];
    ComAowagieTextPdfPdfDictionary *ad = new_ComAowagieTextPdfPdfDictionary_init();
    [ad putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE) withComAowagieTextPdfPdfObject:colorspace];
    [img setAdditionalWithComAowagieTextPdfPdfDictionary:ad];
    if (self->transparency_) {
      [img setTransparencyWithIntArray:[IOSIntArray newArrayWithInts:(jint[]){ self->transIndex_, self->transIndex_ } count:2]];
    }
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
  [((ComAowagieTextImage *) nil_chk(img)) setOriginalTypeWithInt:ComAowagieTextImage_ORIGINAL_GIF];
  [img setOriginalDataWithByteArray:self->fromData_];
  [img setUrlWithJavaNetURL:self->fromUrl_];
  ComAowagieTextPdfCodecGifImage_GifFrame *gf = new_ComAowagieTextPdfCodecGifImage_GifFrame_init();
  gf->image_ = img;
  [((JavaUtilArrayList *) nil_chk(self->frames_)) addWithId:gf];
}


#line 388
jboolean ComAowagieTextPdfCodecGifImage_decodeImageData(ComAowagieTextPdfCodecGifImage *self) {
  jint NullCode = -1;
  jint npix = self->iw_ * self->ih_;
  jint available;
  
#line 391
  jint clear;
  
#line 391
  jint code_mask;
  
#line 391
  jint code_size;
  
#line 391
  jint end_of_information;
  
#line 391
  jint in_code;
  
#line 391
  jint old_code;
  
#line 391
  jint bits;
  
#line 391
  jint code;
  
#line 391
  jint count;
  
#line 391
  jint i;
  
#line 391
  jint datum;
  
#line 391
  jint data_size;
  
#line 391
  jint first;
  
#line 391
  jint top;
  
#line 391
  jint bi;
  
#line 393
  jboolean skipZero = false;
  
#line 395
  if (self->prefix_ == nil) {
    self->prefix_ = [IOSShortArray newArrayWithLength:ComAowagieTextPdfCodecGifImage_MaxStackSize];
  }
  if (self->suffix_ == nil) {
    self->suffix_ = [IOSByteArray newArrayWithLength:ComAowagieTextPdfCodecGifImage_MaxStackSize];
  }
  if (self->pixelStack_ == nil) {
    self->pixelStack_ = [IOSByteArray newArrayWithLength:ComAowagieTextPdfCodecGifImage_MaxStackSize + 1];
  }
  
#line 405
  self->m_line_stride_ = JreIntDiv((self->iw_ * self->m_bpc_ + 7), 8);
  self->m_out_ = [IOSByteArray newArrayWithLength:self->m_line_stride_ * self->ih_];
  jint pass = 1;
  jint inc = self->interlace_ ? 8 : 1;
  jint line = 0;
  jint xpos = 0;
  
#line 414
  data_size = [((JavaIoDataInputStream *) nil_chk(self->in_)) read];
  clear = JreLShift32(1, data_size);
  end_of_information = clear + 1;
  available = clear + 2;
  old_code = NullCode;
  code_size = data_size + 1;
  code_mask = (JreLShift32(1, code_size)) - 1;
  for (code = 0; code < clear; code++) {
    *IOSShortArray_GetRef(nil_chk(self->prefix_), code) = 0;
    *IOSByteArray_GetRef(nil_chk(self->suffix_), code) = (jbyte) code;
  }
  
#line 428
  datum = bits = count = first = top = bi = 0;
  
#line 430
  for (i = 0; i < npix; ) {
    if (top == 0) {
      if (bits < code_size) {
        
#line 434
        if (count == 0) {
          
#line 436
          count = ComAowagieTextPdfCodecGifImage_readBlock(self);
          if (count <= 0) {
            skipZero = true;
            break;
          }
          bi = 0;
        }
        datum += JreLShift32((IOSByteArray_Get(nil_chk(self->block_), bi) & (jint) 0xff), bits);
        bits += 8;
        bi++;
        count--;
        continue;
      }
      
#line 452
      code = datum & code_mask;
      JreRShiftAssignInt(&datum, code_size);
      bits -= code_size;
      
#line 458
      if (code > available || code == end_of_information) {
        break;
      }
      if (code == clear) {
        
#line 463
        code_size = data_size + 1;
        code_mask = (JreLShift32(1, code_size)) - 1;
        available = clear + 2;
        old_code = NullCode;
        continue;
      }
      if (old_code == NullCode) {
        *IOSByteArray_GetRef(nil_chk(self->pixelStack_), top++) = IOSByteArray_Get(nil_chk(self->suffix_), code);
        old_code = code;
        first = code;
        continue;
      }
      in_code = code;
      if (code == available) {
        *IOSByteArray_GetRef(nil_chk(self->pixelStack_), top++) = (jbyte) first;
        code = old_code;
      }
      while (code > clear) {
        *IOSByteArray_GetRef(nil_chk(self->pixelStack_), top++) = IOSByteArray_Get(nil_chk(self->suffix_), code);
        code = IOSShortArray_Get(nil_chk(self->prefix_), code);
      }
      first = IOSByteArray_Get(nil_chk(self->suffix_), code) & (jint) 0xff;
      
#line 488
      if (available >= ComAowagieTextPdfCodecGifImage_MaxStackSize) {
        break;
      }
      *IOSByteArray_GetRef(nil_chk(self->pixelStack_), top++) = (jbyte) first;
      *IOSShortArray_GetRef(nil_chk(self->prefix_), available) = (jshort) old_code;
      *IOSByteArray_GetRef(self->suffix_, available) = (jbyte) first;
      available++;
      if ((available & code_mask) == 0 && available < ComAowagieTextPdfCodecGifImage_MaxStackSize) {
        code_size++;
        code_mask += available;
      }
      old_code = in_code;
    }
    
#line 504
    top--;
    i++;
    
#line 507
    ComAowagieTextPdfCodecGifImage_setPixelWithInt_withInt_withInt_(self, xpos, line, IOSByteArray_Get(nil_chk(self->pixelStack_), top));
    ++xpos;
    if (xpos >= self->iw_) {
      xpos = 0;
      line += inc;
      if (line >= self->ih_) {
        if (self->interlace_) {
          do {
            pass++;
            switch (pass) {
              case 2:
              line = 4;
              break;
              case 3:
              line = 2;
              inc = 4;
              break;
              case 4:
              line = 1;
              inc = 2;
              break;
              default:
              line = self->ih_ - 1;
              inc = 0;
            }
          }
          while (
#line 532
          line >= self->ih_);
        }
        else {
          line = self->ih_ - 1;
          inc = 0;
        }
      }
    }
  }
  return skipZero;
}


#line 545
void ComAowagieTextPdfCodecGifImage_setPixelWithInt_withInt_withInt_(ComAowagieTextPdfCodecGifImage *self, jint x, jint y, jint v) {
  if (self->m_bpc_ == 8) {
    jint pos = x + self->iw_ * y;
    *IOSByteArray_GetRef(nil_chk(self->m_out_), pos) = (jbyte) v;
  }
  else {
    jint pos = self->m_line_stride_ * y + JreIntDiv(x, (JreIntDiv(8, self->m_bpc_)));
    jint vout = JreLShift32(v, 8 - self->m_bpc_ * (JreIntMod(x, (JreIntDiv(8, self->m_bpc_)))) - self->m_bpc_);
    *IOSByteArray_GetRef(nil_chk(self->m_out_), pos) |= vout;
  }
}


#line 563
void ComAowagieTextPdfCodecGifImage_readGraphicControlExt(ComAowagieTextPdfCodecGifImage *self) {
  [((JavaIoDataInputStream *) nil_chk(self->in_)) read];
  jint packed = [((JavaIoDataInputStream *) nil_chk(self->in_)) read];
  self->dispose_ = JreRShift32((packed & (jint) 0x1c), 2);
  if (self->dispose_ == 0) {
    
#line 569
    self->dispose_ = 1;
  }
  self->transparency_ = ((packed & 1) != 0);
  self->transIndex_ = [((JavaIoDataInputStream *) nil_chk(self->in_)) read];
  [((JavaIoDataInputStream *) nil_chk(self->in_)) read];
}


#line 581
void ComAowagieTextPdfCodecGifImage_skip(ComAowagieTextPdfCodecGifImage *self) {
  do {
    ComAowagieTextPdfCodecGifImage_readBlock(self);
  }
  while (
#line 584
  self->blockSize_ > 0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfCodecGifImage)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/codec/GifImage.java"


#line 587
@implementation ComAowagieTextPdfCodecGifImage_GifFrame

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 588
- (instancetype)init {
  ComAowagieTextPdfCodecGifImage_GifFrame_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "image_", "LComAowagieTextImage;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfCodecGifImage;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfCodecGifImage_GifFrame = { "GifFrame", "com.aowagie.text.pdf.codec", ptrTable, methods, fields, 7, 0xa, 1, 1, 0, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfCodecGifImage_GifFrame;
}

@end


#line 588
void ComAowagieTextPdfCodecGifImage_GifFrame_init(ComAowagieTextPdfCodecGifImage_GifFrame *self) {
  NSObject_init(self);
}


#line 588
ComAowagieTextPdfCodecGifImage_GifFrame *new_ComAowagieTextPdfCodecGifImage_GifFrame_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfCodecGifImage_GifFrame, init)
}


#line 588
ComAowagieTextPdfCodecGifImage_GifFrame *create_ComAowagieTextPdfCodecGifImage_GifFrame_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfCodecGifImage_GifFrame, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfCodecGifImage_GifFrame)
