//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/asn1/ASN1UTCTime.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ASN1UTCTime")
#ifdef RESTRICT_ASN1UTCTime
#define INCLUDE_ALL_ASN1UTCTime 0
#else
#define INCLUDE_ALL_ASN1UTCTime 1
#endif
#undef RESTRICT_ASN1UTCTime

#if !defined (OrgSpongycastleAsn1ASN1UTCTime_) && (INCLUDE_ALL_ASN1UTCTime || defined(INCLUDE_OrgSpongycastleAsn1ASN1UTCTime))
#define OrgSpongycastleAsn1ASN1UTCTime_

#define RESTRICT_ASN1Primitive 1
#define INCLUDE_OrgSpongycastleAsn1ASN1Primitive 1
#include "ASN1Primitive.h"

@class IOSByteArray;
@class JavaUtilDate;
@class JavaUtilLocale;
@class OrgSpongycastleAsn1ASN1OutputStream;
@class OrgSpongycastleAsn1ASN1TaggedObject;

/*!
 @brief - * UTC time object.
 Internal facade of <code>ASN1UTCTime</code>.
  <p>
  This datatype is valid only from 1950-01-01 00:00:00 UTC until 2049-12-31 23:59:59 UTC. 
 </p>
  <hr>
  <p><b>X.690</b></p>
  <p><b>11: Restrictions on BER employed by both CER and DER</b></p>
  <p><b>11.8 UTCTime </b></p>
  <b>11.8.1</b> The encoding shall terminate with "Z",
  as described in the ITU-T X.680 | ISO/IEC 8824-1 clause on UTCTime. 
 <p>
  <b>11.8.2</b> The seconds element shall always be present. 
 <p>
  <b>11.8.3</b> Midnight (GMT) shall be represented in the form: 
 <blockquote>
  "YYMMDD000000Z" 
 </blockquote>
  where "YYMMDD" represents the day following the midnight in question.
 */
@interface OrgSpongycastleAsn1ASN1UTCTime : OrgSpongycastleAsn1ASN1Primitive

#pragma mark Public

/*!
 @brief Base constructor from a java.util.date object
 @param time the Date to build the time from.
 */
- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time;

/*!
 @brief Base constructor from a java.util.date and Locale - you may need to use this if the default locale
  doesn't use a Gregorian calender so that the GeneralizedTime produced is compatible with other ASN.1 implementations.
 @param time a date object representing the time of interest.
 @param locale an appropriate Locale for producing an ASN.1 UTCTime value.
 */
- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time
                  withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief The correct format for this is YYMMDDHHMMSSZ (it used to be that seconds were
  never encoded.When you're creating one of these objects from scratch, that's
  what you want to use, otherwise we'll try to deal with whatever gets read from
  the input stream...
 (this is why the input format is different from the getTime()
  method output). 
 <p>
 @param time the time string.
 */
- (instancetype)initWithNSString:(NSString *)time;

/*!
 @brief Return the time as an adjusted date
  in the range of 1950 - 2049.
 @return a date in the range of 1950 to 2049.
 @throw ParseExceptionif the date string cannot be parsed.
 */
- (JavaUtilDate *)getAdjustedDate;

/*!
 @brief Return a time string as an adjusted date with a 4 digit year.This goes
  in the range of 1950 - 2049.
 */
- (NSString *)getAdjustedTime;

/*!
 @brief Return the time as a date based on whatever a 2 digit year will return.For
  standardised processing use getAdjustedDate().
 @return the resulting date
 @throw ParseExceptionif the date string cannot be parsed.
 */
- (JavaUtilDate *)getDate;

/*!
 @brief Return an UTC Time from a tagged object.
 @param obj the tagged object holding the object we want
 @param explicit_ true if the object is meant to be explicitly               tagged false otherwise.
 @throw IllegalArgumentExceptionif the tagged object cannot
                be converted.
 @return an ASN1UTCTime instance, or null.
 */
+ (OrgSpongycastleAsn1ASN1UTCTime *)getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject:(OrgSpongycastleAsn1ASN1TaggedObject *)obj
                                                                           withBoolean:(jboolean)explicit_;

/*!
 @brief Return an UTC Time from the passed in object.
 @param obj an ASN1UTCTime or an object that can be converted into one.
 @throw IllegalArgumentExceptionif the object cannot be converted.
 @return an ASN1UTCTime instance, or null.
 */
+ (OrgSpongycastleAsn1ASN1UTCTime *)getInstanceWithId:(id)obj;

/*!
 @brief Return the time - always in the form of
   YYMMDDhhmmssGMT(+hh:mm|-hh:mm).
 <p>
  Normally in a certificate we would expect "Z" rather than "GMT",
  however adding the "GMT" means we can just use: 
 @code

      dateF = new SimpleDateFormat("yyMMddHHmmssz"); 
  
@endcode
  To read in the time and get a date which is compatible with our local
  time zone. 
 <p>
  <b>Note:</b> In some cases, due to the local date processing, this
  may lead to unexpected results. If you want to stick the normal
  convention of 1950 to 2049 use the getAdjustedTime() method.
 */
- (NSString *)getTime;

- (NSUInteger)hash;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initWithByteArray:(IOSByteArray *)time;

- (jboolean)asn1EqualsWithOrgSpongycastleAsn1ASN1Primitive:(OrgSpongycastleAsn1ASN1Primitive *)o;

- (void)encodeWithOrgSpongycastleAsn1ASN1OutputStream:(OrgSpongycastleAsn1ASN1OutputStream *)outArg;

- (jint)encodedLength;

- (jboolean)isConstructed;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleAsn1ASN1UTCTime)

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1UTCTime *OrgSpongycastleAsn1ASN1UTCTime_getInstanceWithId_(id obj);

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1UTCTime *OrgSpongycastleAsn1ASN1UTCTime_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(OrgSpongycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT void OrgSpongycastleAsn1ASN1UTCTime_initWithNSString_(OrgSpongycastleAsn1ASN1UTCTime *self, NSString *time);

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1UTCTime *new_OrgSpongycastleAsn1ASN1UTCTime_initWithNSString_(NSString *time) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1UTCTime *create_OrgSpongycastleAsn1ASN1UTCTime_initWithNSString_(NSString *time);

FOUNDATION_EXPORT void OrgSpongycastleAsn1ASN1UTCTime_initWithJavaUtilDate_(OrgSpongycastleAsn1ASN1UTCTime *self, JavaUtilDate *time);

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1UTCTime *new_OrgSpongycastleAsn1ASN1UTCTime_initWithJavaUtilDate_(JavaUtilDate *time) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1UTCTime *create_OrgSpongycastleAsn1ASN1UTCTime_initWithJavaUtilDate_(JavaUtilDate *time);

FOUNDATION_EXPORT void OrgSpongycastleAsn1ASN1UTCTime_initWithJavaUtilDate_withJavaUtilLocale_(OrgSpongycastleAsn1ASN1UTCTime *self, JavaUtilDate *time, JavaUtilLocale *locale);

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1UTCTime *new_OrgSpongycastleAsn1ASN1UTCTime_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1UTCTime *create_OrgSpongycastleAsn1ASN1UTCTime_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale);

FOUNDATION_EXPORT void OrgSpongycastleAsn1ASN1UTCTime_initWithByteArray_(OrgSpongycastleAsn1ASN1UTCTime *self, IOSByteArray *time);

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1UTCTime *new_OrgSpongycastleAsn1ASN1UTCTime_initWithByteArray_(IOSByteArray *time) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1UTCTime *create_OrgSpongycastleAsn1ASN1UTCTime_initWithByteArray_(IOSByteArray *time);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleAsn1ASN1UTCTime)

#endif

#pragma pop_macro("INCLUDE_ALL_ASN1UTCTime")
