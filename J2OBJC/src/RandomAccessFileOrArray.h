//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/RandomAccessFileOrArray.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RandomAccessFileOrArray")
#ifdef RESTRICT_RandomAccessFileOrArray
#define INCLUDE_ALL_RandomAccessFileOrArray 0
#else
#define INCLUDE_ALL_RandomAccessFileOrArray 1
#endif
#undef RESTRICT_RandomAccessFileOrArray

#if !defined (ComAowagieTextPdfRandomAccessFileOrArray_) && (INCLUDE_ALL_RandomAccessFileOrArray || defined(INCLUDE_ComAowagieTextPdfRandomAccessFileOrArray))
#define ComAowagieTextPdfRandomAccessFileOrArray_

#define RESTRICT_JavaIoDataInput 1
#define INCLUDE_JavaIoDataInput 1
#include "java/io/DataInput.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaNetURL;
@class JavaNioByteBuffer;

/*!
 @brief An implementation of a RandomAccessFile for input only
  that accepts a file or a byte array as data source.
 @author Paulo Soares (psoares@@consiste.pt)
 */
@interface ComAowagieTextPdfRandomAccessFileOrArray : NSObject < JavaIoDataInput >

#pragma mark Public

- (instancetype)initWithByteArray:(IOSByteArray *)arrayIn;

- (instancetype)initWithNSString:(NSString *)filename;

- (instancetype)initWithJavaNetURL:(JavaNetURL *)url;

- (void)close;

- (jint)getFilePointer;

/*!
 @return Buffer
 @throw IOExceptionon error
 @since 2.0.8
 */
- (JavaNioByteBuffer *)getNioByteBuffer;

/*!
 @brief Getter for property startOffset.
 @return Value of property startOffset.
 */
- (jint)getStartOffset;

- (jboolean)isOpen;

- (jint)length;

- (jint)read;

- (jint)readWithByteArray:(IOSByteArray *)b;

- (jboolean)readBoolean;

- (jbyte)readByte;

- (jchar)readChar;

- (jdouble)readDouble;

- (jdouble)readDoubleLE;

- (jfloat)readFloat;

- (jfloat)readFloatLE;

- (void)readFullyWithByteArray:(IOSByteArray *)b;

- (void)readFullyWithByteArray:(IOSByteArray *)b
                       withInt:(jint)off
                       withInt:(jint)len;

- (jint)readInt;

/*!
 @brief Reads a signed 32-bit integer from this stream in little-endian order.
 This method reads 4
  bytes from the stream, starting at the current stream pointer.
  If the bytes read, in order, are <code>b1</code>,
  <code>b2</code>, <code>b3</code>, and <code>b4</code>, where 
 <code>0&nbsp;&lt;=&nbsp;b1, b2, b3, b4&nbsp;&lt;=&nbsp;255</code>,
  then the result is equal to: 
 <blockquote>@code

      (b4 &lt;&lt; 24) | (b3 &lt;&lt; 16) + (b2 &lt;&lt; 8) + b1 
  
@endcode</blockquote>
  <p>
  This method blocks until the four bytes are read, the end of the
  stream is detected, or an exception is thrown.
 @return the next four bytes of this stream, interpreted as an
              <code>int</code>.
 @throw EOFExceptionif this stream reaches the end before reading
                four bytes.
 @throw IOExceptionif an I/O error occurs.
 */
- (jint)readIntLE;

- (NSString *)readLine;

- (jlong)readLong;

- (jlong)readLongLE;

- (jshort)readShort;

/*!
 @brief Reads a signed 16-bit number from this stream in little-endian order.
 The method reads two
  bytes from this stream, starting at the current stream pointer.
  If the two bytes read, in order, are 
 <code>b1</code> and <code>b2</code>, where each of the two values is
  between <code>0</code> and <code>255</code>, inclusive, then the
  result is equal to: 
 <blockquote>@code

      (short)((b2 &lt;&lt; 8) | b1) 
  
@endcode</blockquote>
  <p>
  This method blocks until the two bytes are read, the end of the
  stream is detected, or an exception is thrown.
 @return the next two bytes of this stream, interpreted as a signed
              16-bit number.
 @throw EOFExceptionif this stream reaches the end before reading
                two bytes.
 @throw IOExceptionif an I/O error occurs.
 */
- (jshort)readShortLE;

- (jint)readUnsignedByte;

/*!
 @brief Reads an unsigned 32-bit integer from this stream.This method reads 4
  bytes from the stream, starting at the current stream pointer.
 If the bytes read, in order, are <code>b1</code>,
  <code>b2</code>, <code>b3</code>, and <code>b4</code>, where 
 <code>0&nbsp;&lt;=&nbsp;b1, b2, b3, b4&nbsp;&lt;=&nbsp;255</code>,
  then the result is equal to: 
 <blockquote>@code

      (b1 &lt;&lt; 24) | (b2 &lt;&lt; 16) + (b3 &lt;&lt; 8) + b4 
  
@endcode</blockquote>
  <p>
  This method blocks until the four bytes are read, the end of the
  stream is detected, or an exception is thrown.
 @return the next four bytes of this stream, interpreted as a
              <code>long</code>.
 @throw EOFExceptionif this stream reaches the end before reading
                four bytes.
 @throw IOExceptionif an I/O error occurs.
 */
- (jlong)readUnsignedInt;

- (jlong)readUnsignedIntLE;

- (jint)readUnsignedShort;

/*!
 @brief Reads an unsigned 16-bit number from this stream in little-endian order.
 This method reads
  two bytes from the stream, starting at the current stream pointer.
  If the bytes read, in order, are 
 <code>b1</code> and <code>b2</code>, where 
 <code>0&nbsp;&lt;=&nbsp;b1, b2&nbsp;&lt;=&nbsp;255</code>,
  then the result is equal to: 
 <blockquote>@code

      (b2 &lt;&lt; 8) | b1 
  
@endcode</blockquote>
  <p>
  This method blocks until the two bytes are read, the end of the
  stream is detected, or an exception is thrown.
 @return the next two bytes of this stream, interpreted as an
              unsigned 16-bit integer.
 @throw EOFExceptionif this stream reaches the end before reading
                two bytes.
 @throw IOExceptionif an I/O error occurs.
 */
- (jint)readUnsignedShortLE;

- (NSString *)readUTF;

- (void)seekWithInt:(jint)pos;

- (void)seekWithLong:(jlong)pos;

/*!
 @brief Setter for property startOffset.
 @param startOffset New value of property startOffset.
 */
- (void)setStartOffsetWithInt:(jint)startOffset;

- (jlong)skipWithLong:(jlong)n;

- (jint)skipBytesWithInt:(jint)n;

#pragma mark Package-Private

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is;

- (instancetype)initWithComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)file;

- (instancetype)initWithNSString:(NSString *)filename
                     withBoolean:(jboolean)forceRead
                     withBoolean:(jboolean)plainRandomAccess;

- (void)pushBackWithByte:(jbyte)b;

- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len;

- (void)reOpen;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfRandomAccessFileOrArray)

FOUNDATION_EXPORT void ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_(ComAowagieTextPdfRandomAccessFileOrArray *self, NSString *filename);

FOUNDATION_EXPORT ComAowagieTextPdfRandomAccessFileOrArray *new_ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_(NSString *filename) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfRandomAccessFileOrArray *create_ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_(NSString *filename);

FOUNDATION_EXPORT void ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_withBoolean_withBoolean_(ComAowagieTextPdfRandomAccessFileOrArray *self, NSString *filename, jboolean forceRead, jboolean plainRandomAccess);

FOUNDATION_EXPORT ComAowagieTextPdfRandomAccessFileOrArray *new_ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_withBoolean_withBoolean_(NSString *filename, jboolean forceRead, jboolean plainRandomAccess) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfRandomAccessFileOrArray *create_ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_withBoolean_withBoolean_(NSString *filename, jboolean forceRead, jboolean plainRandomAccess);

FOUNDATION_EXPORT void ComAowagieTextPdfRandomAccessFileOrArray_initWithJavaNetURL_(ComAowagieTextPdfRandomAccessFileOrArray *self, JavaNetURL *url);

FOUNDATION_EXPORT ComAowagieTextPdfRandomAccessFileOrArray *new_ComAowagieTextPdfRandomAccessFileOrArray_initWithJavaNetURL_(JavaNetURL *url) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfRandomAccessFileOrArray *create_ComAowagieTextPdfRandomAccessFileOrArray_initWithJavaNetURL_(JavaNetURL *url);

FOUNDATION_EXPORT void ComAowagieTextPdfRandomAccessFileOrArray_initWithJavaIoInputStream_(ComAowagieTextPdfRandomAccessFileOrArray *self, JavaIoInputStream *is);

FOUNDATION_EXPORT ComAowagieTextPdfRandomAccessFileOrArray *new_ComAowagieTextPdfRandomAccessFileOrArray_initWithJavaIoInputStream_(JavaIoInputStream *is) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfRandomAccessFileOrArray *create_ComAowagieTextPdfRandomAccessFileOrArray_initWithJavaIoInputStream_(JavaIoInputStream *is);

FOUNDATION_EXPORT void ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_(ComAowagieTextPdfRandomAccessFileOrArray *self, IOSByteArray *arrayIn);

FOUNDATION_EXPORT ComAowagieTextPdfRandomAccessFileOrArray *new_ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_(IOSByteArray *arrayIn) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfRandomAccessFileOrArray *create_ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_(IOSByteArray *arrayIn);

FOUNDATION_EXPORT void ComAowagieTextPdfRandomAccessFileOrArray_initWithComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfRandomAccessFileOrArray *self, ComAowagieTextPdfRandomAccessFileOrArray *file);

FOUNDATION_EXPORT ComAowagieTextPdfRandomAccessFileOrArray *new_ComAowagieTextPdfRandomAccessFileOrArray_initWithComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfRandomAccessFileOrArray *file) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfRandomAccessFileOrArray *create_ComAowagieTextPdfRandomAccessFileOrArray_initWithComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfRandomAccessFileOrArray *file);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfRandomAccessFileOrArray)

#endif

#pragma pop_macro("INCLUDE_ALL_RandomAccessFileOrArray")
