//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfCell.java
//

#include "Anchor.h"
#include "Cell.h"
#include "Chunk.h"
#include "Element.h"
#include "IOSClass.h"
#include "Image.h"
#include "J2ObjC_source.h"
#include "List.h"
#include "ListItem.h"
#include "Paragraph.h"
#include "PdfAction.h"
#include "PdfCell.h"
#include "PdfChunk.h"
#include "PdfLine.h"
#include "Phrase.h"
#include "Rectangle.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"

#if !__has_feature(objc_arc)
#error "PdfCell must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfPdfCell () {
 @public
  /*!
   @brief These are the PdfLines in the Cell.
   */
  JavaUtilArrayList *lines_;
  /*!
   @brief These are the PdfLines in the Cell.
   */
  ComAowagieTextPdfPdfLine *line_;
  /*!
   @brief These are the Images in the Cell.
   */
  JavaUtilArrayList *images_;
  /*!
   @brief This is the leading of the lines.
   */
  jfloat leading_;
  /*!
   @brief This is the number of the row the cell is in.
   */
  jint rownumber_;
  /*!
   @brief This is the rowspan of the cell.
   */
  jint rowspan_;
  /*!
   @brief This is the cellspacing of the cell.
   */
  jfloat cellspacing_;
  /*!
   @brief This is the cellpadding of the cell.
   */
  jfloat cellpadding_;
  /*!
   @brief Indicates if this cell belongs to the header of a <CODE>PdfTable</CODE>
   */
  jboolean header_;
  /*!
   @brief This is the total height of the content of the cell.Note that the actual cell
  height may be larger due to another cell on the row *
   */
  jfloat contentHeight_;
  /*!
   @brief Indicates that the largest ascender height should be used to
  determine the height of the first line.Setting this to true can help
  with vertical alignment problems.
   */
  jboolean useAscender_;
  /*!
   @brief Indicates that the largest descender height should be added to the height of
  the last line (so characters like y don't dip into the border).
   */
  jboolean useDescender_;
  /*!
   @brief Adjusts the cell contents to compensate for border widths.
   */
  jboolean useBorderPadding_;
  jint verticalAlignment_;
  ComAowagieTextPdfPdfLine *firstLine_;
  ComAowagieTextPdfPdfLine *lastLine_;
  /*!
   @brief This is the number of the group the cell is in.
   */
  jint groupNumber_;
}

- (void)addListWithComAowagieTextList:(ComAowagieTextList *)list
                            withFloat:(jfloat)left
                            withFloat:(jfloat)right
                              withInt:(jint)alignment;

- (void)addLineWithComAowagieTextPdfPdfLine:(ComAowagieTextPdfPdfLine *)line;

- (ComAowagieTextPdfPdfLine *)removeLineWithInt:(jint)index;

- (void)flushCurrentLine;

/*!
 @brief Calculates what the height of the first line should be so that the content will be
  flush with the top.For text, this is the height of the ascender.
 For an image,
  it is the actual height of the image.
 @return the real height of the first line
 */
- (jfloat)firstLineRealHeight;

/*!
 @brief Gets the amount of the border for the specified side that is inside the Rectangle.
 For non-variable width borders this is only 1/2 the border width on that side.  This
  always returns 0 if <code>useBorderPadding</code> is false;
 @param side the side to check.  One of the side constants in <code>com.aowagie.text.Rectangle</code>
 @return the borderwidth inside the cell
 */
- (jfloat)getBorderWidthInsideWithInt:(jint)side;

/*!
 @brief Adds an image to this Cell.
 @param i the image to add
 @param left the left border
 @param right the right border
 @param extraHeight extra height to add above image
 @param alignment horizontal alignment (constant from Element class)
 @return the height of the image
 */
- (jfloat)addImageWithComAowagieTextImage:(ComAowagieTextImage *)i
                                withFloat:(jfloat)left
                                withFloat:(jfloat)right
                                withFloat:(jfloat)extraHeight
                                  withInt:(jint)alignment;

/*!
 @brief Returns the total height of all the lines in the cell.
 @return a value
 */
- (jfloat)remainingLinesHeight;

/*!
 @brief Gets the cellspacing of a cell.
 @return a value
 */
- (jfloat)cellspacing;

/*!
 @brief Gets the cellpadding of a cell..
 @return a value
 */
- (jfloat)cellpadding;

/*!
 @brief Processes all actions contained in the cell.
 @param element an element in the cell
 @param action an action that should be coupled to the cell
 @param allActions All actions
 */
- (void)processActionsWithComAowagieTextElement:(id<ComAowagieTextElement>)element
                 withComAowagieTextPdfPdfAction:(ComAowagieTextPdfPdfAction *)action
                          withJavaUtilArrayList:(JavaUtilArrayList *)allActions;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfCell, lines_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfCell, line_, ComAowagieTextPdfPdfLine *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfCell, images_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfCell, firstLine_, ComAowagieTextPdfPdfLine *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfCell, lastLine_, ComAowagieTextPdfPdfLine *)

__attribute__((unused)) static void ComAowagieTextPdfPdfCell_addListWithComAowagieTextList_withFloat_withFloat_withInt_(ComAowagieTextPdfPdfCell *self, ComAowagieTextList *list, jfloat left, jfloat right, jint alignment);

__attribute__((unused)) static void ComAowagieTextPdfPdfCell_addLineWithComAowagieTextPdfPdfLine_(ComAowagieTextPdfPdfCell *self, ComAowagieTextPdfPdfLine *line);

__attribute__((unused)) static ComAowagieTextPdfPdfLine *ComAowagieTextPdfPdfCell_removeLineWithInt_(ComAowagieTextPdfPdfCell *self, jint index);

__attribute__((unused)) static void ComAowagieTextPdfPdfCell_flushCurrentLine(ComAowagieTextPdfPdfCell *self);

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfCell_firstLineRealHeight(ComAowagieTextPdfPdfCell *self);

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfCell_getBorderWidthInsideWithInt_(ComAowagieTextPdfPdfCell *self, jint side);

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfCell_addImageWithComAowagieTextImage_withFloat_withFloat_withFloat_withInt_(ComAowagieTextPdfPdfCell *self, ComAowagieTextImage *i, jfloat left, jfloat right, jfloat extraHeight, jint alignment);

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfCell_remainingLinesHeight(ComAowagieTextPdfPdfCell *self);

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfCell_cellspacing(ComAowagieTextPdfPdfCell *self);

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfCell_cellpadding(ComAowagieTextPdfPdfCell *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfCell_processActionsWithComAowagieTextElement_withComAowagieTextPdfPdfAction_withJavaUtilArrayList_(ComAowagieTextPdfPdfCell *self, id<ComAowagieTextElement> element, ComAowagieTextPdfPdfAction *action, JavaUtilArrayList *allActions);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfCell.java"


#line 84
@implementation ComAowagieTextPdfPdfCell


#line 174
- (instancetype)initPackagePrivateWithComAowagieTextCell:(ComAowagieTextCell *)cell
                                                 withInt:(jint)rownumber
                                               withFloat:(jfloat)left
                                               withFloat:(jfloat)right
                                               withFloat:(jfloat)top
                                               withFloat:(jfloat)cellspacing
                                               withFloat:(jfloat)cellpadding {
  ComAowagieTextPdfPdfCell_initPackagePrivateWithComAowagieTextCell_withInt_withFloat_withFloat_withFloat_withFloat_withFloat_(self, cell, rownumber, left, right, top, cellspacing, cellpadding);
  return self;
}


#line 320
- (void)addListWithComAowagieTextList:(ComAowagieTextList *)list
                            withFloat:(jfloat)left
                            withFloat:(jfloat)right
                              withInt:(jint)alignment {
  ComAowagieTextPdfPdfCell_addListWithComAowagieTextList_withFloat_withFloat_withInt_(self, list, left, right, alignment);
}


#line 361
- (void)setBottomWithFloat:(jfloat)value {
  
#line 363
  [super setBottomWithFloat:value];
  jfloat firstLineRealHeight = ComAowagieTextPdfPdfCell_firstLineRealHeight(self);
  
#line 366
  jfloat totalHeight = self->ury_ - value;
  jfloat nonContentHeight = ComAowagieTextPdfPdfCell_cellpadding(self) * 2.0f + ComAowagieTextPdfPdfCell_cellspacing(self) * 2.0f;
  JrePlusAssignFloatF(&nonContentHeight, ComAowagieTextPdfPdfCell_getBorderWidthInsideWithInt_(self, ComAowagieTextRectangle_TOP) + ComAowagieTextPdfPdfCell_getBorderWidthInsideWithInt_(self, ComAowagieTextRectangle_BOTTOM));
  
#line 370
  jfloat interiorHeight = totalHeight - nonContentHeight;
  jfloat extraHeight = 0.0f;
  
#line 373
  switch (self->verticalAlignment_) {
    case ComAowagieTextElement_ALIGN_BOTTOM:
    extraHeight = interiorHeight - self->contentHeight_;
    break;
    case ComAowagieTextElement_ALIGN_MIDDLE:
    extraHeight = (interiorHeight - self->contentHeight_) / 2.0f;
    break;
    default:
    extraHeight = 0.0f;
  }
  
#line 384
  JrePlusAssignFloatF(&extraHeight, ComAowagieTextPdfPdfCell_cellpadding(self) + ComAowagieTextPdfPdfCell_cellspacing(self));
  JrePlusAssignFloatF(&extraHeight, ComAowagieTextPdfPdfCell_getBorderWidthInsideWithInt_(self, ComAowagieTextRectangle_TOP));
  if (self->firstLine_ != nil) {
    self->firstLine_->height_ = firstLineRealHeight + extraHeight;
  }
}


#line 397
- (jfloat)getLeft {
  
#line 399
  return [super getLeftWithFloat:self->cellspacing_];
}


#line 408
- (jfloat)getRight {
  
#line 410
  return [super getRightWithFloat:self->cellspacing_];
}


#line 419
- (jfloat)getTop {
  
#line 421
  return [super getTopWithFloat:self->cellspacing_];
}


#line 430
- (jfloat)getBottom {
  
#line 432
  return [super getBottomWithFloat:self->cellspacing_];
}


#line 437
- (void)addLineWithComAowagieTextPdfPdfLine:(ComAowagieTextPdfPdfLine *)line {
  ComAowagieTextPdfPdfCell_addLineWithComAowagieTextPdfPdfLine_(self, line);
}


#line 444
- (ComAowagieTextPdfPdfLine *)removeLineWithInt:(jint)index {
  return ComAowagieTextPdfPdfCell_removeLineWithInt_(self, index);
}


#line 459
- (void)flushCurrentLine {
  ComAowagieTextPdfPdfCell_flushCurrentLine(self);
}


#line 471
- (jfloat)firstLineRealHeight {
  return ComAowagieTextPdfPdfCell_firstLineRealHeight(self);
}


#line 494
- (jfloat)getBorderWidthInsideWithInt:(jint)side {
  return ComAowagieTextPdfPdfCell_getBorderWidthInsideWithInt_(self, side);
}


#line 534
- (jfloat)addImageWithComAowagieTextImage:(ComAowagieTextImage *)i
                                withFloat:(jfloat)left
                                withFloat:(jfloat)right
                                withFloat:(jfloat)extraHeight
                                  withInt:(jint)alignment {
  return ComAowagieTextPdfPdfCell_addImageWithComAowagieTextImage_withFloat_withFloat_withFloat_withInt_(self, i, left, right, extraHeight, alignment);
}


#line 570
- (JavaUtilArrayList *)getLinesWithFloat:(jfloat)top
                               withFloat:(jfloat)bottom {
  
#line 571
  jfloat lineHeight;
  jfloat currentPosition = JavaLangMath_minWithFloat_withFloat_([self getTop], top);
  [self setTopWithFloat:currentPosition + self->cellspacing_];
  JavaUtilArrayList *result = new_JavaUtilArrayList_init();
  
#line 577
  if ([self getTop] < bottom) {
    return result;
  }
  
#line 582
  jint size = [((JavaUtilArrayList *) nil_chk(self->lines_)) size];
  jboolean aboveBottom = true;
  for (jint i = 0; i < size && aboveBottom; i++) {
    self->line_ = (ComAowagieTextPdfPdfLine *) cast_chk([((JavaUtilArrayList *) nil_chk(self->lines_)) getWithInt:i], [ComAowagieTextPdfPdfLine class]);
    lineHeight = [((ComAowagieTextPdfPdfLine *) nil_chk(self->line_)) height];
    JreMinusAssignFloatF(&currentPosition, lineHeight);
    
#line 589
    if (currentPosition > bottom + self->cellpadding_ + ComAowagieTextPdfPdfCell_getBorderWidthInsideWithInt_(self, ComAowagieTextRectangle_BOTTOM)) {
      [result addWithId:self->line_];
    }
    else {
      
#line 592
      aboveBottom = false;
    }
  }
  
#line 596
  jfloat difference = 0.0f;
  if (!self->header_) {
    if (aboveBottom) {
      self->lines_ = new_JavaUtilArrayList_init();
      self->contentHeight_ = 0.0f;
    }
    else {
      
#line 602
      size = [result size];
      for (jint i = 0; i < size; i++) {
        self->line_ = ComAowagieTextPdfPdfCell_removeLineWithInt_(self, 0);
        JrePlusAssignFloatF(&difference, [((ComAowagieTextPdfPdfLine *) nil_chk(self->line_)) height]);
      }
    }
  }
  if (difference > 0) {
    ComAowagieTextImage *image;
    for (id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(self->images_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
      image = (ComAowagieTextImage *) cast_chk([i next], [ComAowagieTextImage class]);
      [((ComAowagieTextImage *) nil_chk(image)) setAbsolutePositionWithFloat:[image getAbsoluteX] withFloat:[image getAbsoluteY] - difference - self->leading_];
    }
  }
  return result;
}


#line 629
- (JavaUtilArrayList *)getImagesWithFloat:(jfloat)top
                                withFloat:(jfloat)bottom {
  
#line 632
  if ([self getTop] < bottom) {
    return new_JavaUtilArrayList_init();
  }
  top = JavaLangMath_minWithFloat_withFloat_([self getTop], top);
  
#line 637
  ComAowagieTextImage *image;
  jfloat height;
  JavaUtilArrayList *result = new_JavaUtilArrayList_init();
  
#line 641
  for (id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(self->images_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext] && !self->header_; ) {
    image = (ComAowagieTextImage *) cast_chk([i next], [ComAowagieTextImage class]);
    height = [((ComAowagieTextImage *) nil_chk(image)) getAbsoluteY];
    
#line 645
    if (top - height > bottom + self->cellpadding_) {
      [image setAbsolutePositionWithFloat:[image getAbsoluteX] withFloat:top - height];
      [result addWithId:image];
      [i remove];
    }
  }
  return result;
}


#line 660
- (jboolean)isHeader {
  return self->header_;
}


#line 668
- (void)setHeader {
  self->header_ = true;
}


#line 681
- (jboolean)mayBeRemoved {
  return self->header_ || ([((JavaUtilArrayList *) nil_chk(self->lines_)) isEmpty] && [((JavaUtilArrayList *) nil_chk(self->images_)) isEmpty]);
}


#line 692
- (jfloat)remainingLinesHeight {
  return ComAowagieTextPdfPdfCell_remainingLinesHeight(self);
}


#line 712
- (jfloat)remainingHeight {
  jfloat result = 0.0f;
  for (id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(self->images_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComAowagieTextImage *image = (ComAowagieTextImage *) cast_chk([i next], [ComAowagieTextImage class]);
    JrePlusAssignFloatF(&result, [((ComAowagieTextImage *) nil_chk(image)) getScaledHeight]);
  }
  return ComAowagieTextPdfPdfCell_remainingLinesHeight(self) + self->cellspacing_ + 2 * self->cellpadding_ + result;
}


#line 731
- (jint)rownumber {
  return self->rownumber_;
}


#line 741
- (jint)rowspan {
  return self->rowspan_;
}


#line 751
- (jfloat)cellspacing {
  return ComAowagieTextPdfPdfCell_cellspacing(self);
}


#line 761
- (jfloat)cellpadding {
  return ComAowagieTextPdfPdfCell_cellpadding(self);
}


#line 772
- (void)processActionsWithComAowagieTextElement:(id<ComAowagieTextElement>)element
                 withComAowagieTextPdfPdfAction:(ComAowagieTextPdfPdfAction *)action
                          withJavaUtilArrayList:(JavaUtilArrayList *)allActions {
  ComAowagieTextPdfPdfCell_processActionsWithComAowagieTextElement_withComAowagieTextPdfPdfAction_withJavaUtilArrayList_(self, element, action, allActions);
}


#line 819
- (jint)getGroupNumber {
  return self->groupNumber_;
}


#line 828
- (void)setGroupNumberWithInt:(jint)number {
  self->groupNumber_ = number;
}


#line 840
- (ComAowagieTextRectangle *)rectangleWithFloat:(jfloat)top
                                      withFloat:(jfloat)bottom {
  ComAowagieTextRectangle *tmp = new_ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_([self getLeft], [self getBottom], [self getRight], [self getTop]);
  [tmp cloneNonPositionParametersWithComAowagieTextRectangle:self];
  if ([self getTop] > top) {
    [tmp setTopWithFloat:top];
    [tmp setBorderWithInt:self->border_ - (self->border_ & ComAowagieTextRectangle_TOP)];
  }
  if ([self getBottom] < bottom) {
    [tmp setBottomWithFloat:bottom];
    [tmp setBorderWithInt:self->border_ - (self->border_ & ComAowagieTextRectangle_BOTTOM)];
  }
  return tmp;
}


#line 859
- (void)setUseAscenderWithBoolean:(jboolean)use {
  self->useAscender_ = use;
}


#line 867
- (jboolean)isUseAscender {
  return self->useAscender_;
}


#line 875
- (void)setUseDescenderWithBoolean:(jboolean)use {
  self->useDescender_ = use;
}


#line 883
- (jboolean)isUseDescender {
  return self->useDescender_;
}


#line 891
- (void)setUseBorderPaddingWithBoolean:(jboolean)use {
  self->useBorderPadding_ = use;
}


#line 899
- (jboolean)isUseBorderPadding {
  return self->useBorderPadding_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfLine;", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 9, 8, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 8, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextRectangle;", 0x1, 18, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithComAowagieTextCell:withInt:withFloat:withFloat:withFloat:withFloat:withFloat:);
  methods[1].selector = @selector(addListWithComAowagieTextList:withFloat:withFloat:withInt:);
  methods[2].selector = @selector(setBottomWithFloat:);
  methods[3].selector = @selector(getLeft);
  methods[4].selector = @selector(getRight);
  methods[5].selector = @selector(getTop);
  methods[6].selector = @selector(getBottom);
  methods[7].selector = @selector(addLineWithComAowagieTextPdfPdfLine:);
  methods[8].selector = @selector(removeLineWithInt:);
  methods[9].selector = @selector(flushCurrentLine);
  methods[10].selector = @selector(firstLineRealHeight);
  methods[11].selector = @selector(getBorderWidthInsideWithInt:);
  methods[12].selector = @selector(addImageWithComAowagieTextImage:withFloat:withFloat:withFloat:withInt:);
  methods[13].selector = @selector(getLinesWithFloat:withFloat:);
  methods[14].selector = @selector(getImagesWithFloat:withFloat:);
  methods[15].selector = @selector(isHeader);
  methods[16].selector = @selector(setHeader);
  methods[17].selector = @selector(mayBeRemoved);
  methods[18].selector = @selector(remainingLinesHeight);
  methods[19].selector = @selector(remainingHeight);
  methods[20].selector = @selector(rownumber);
  methods[21].selector = @selector(rowspan);
  methods[22].selector = @selector(cellspacing);
  methods[23].selector = @selector(cellpadding);
  methods[24].selector = @selector(processActionsWithComAowagieTextElement:withComAowagieTextPdfPdfAction:withJavaUtilArrayList:);
  methods[25].selector = @selector(getGroupNumber);
  methods[26].selector = @selector(setGroupNumberWithInt:);
  methods[27].selector = @selector(rectangleWithFloat:withFloat:);
  methods[28].selector = @selector(setUseAscenderWithBoolean:);
  methods[29].selector = @selector(isUseAscender);
  methods[30].selector = @selector(setUseDescenderWithBoolean:);
  methods[31].selector = @selector(isUseDescender);
  methods[32].selector = @selector(setUseBorderPaddingWithBoolean:);
  methods[33].selector = @selector(isUseBorderPadding);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lines_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "line_", "LComAowagieTextPdfPdfLine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "images_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "leading_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rownumber_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rowspan_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cellspacing_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cellpadding_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "header_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "contentHeight_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useAscender_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useDescender_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useBorderPadding_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "verticalAlignment_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "firstLine_", "LComAowagieTextPdfPdfLine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastLine_", "LComAowagieTextPdfPdfLine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "groupNumber_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextCell;IFFFFF", "addList", "LComAowagieTextList;FFI", "setBottom", "F", "addLine", "LComAowagieTextPdfPdfLine;", "removeLine", "I", "getBorderWidthInside", "addImage", "LComAowagieTextImage;FFFI", "getLines", "FF", "getImages", "processActions", "LComAowagieTextElement;LComAowagieTextPdfPdfAction;LJavaUtilArrayList;", "setGroupNumber", "rectangle", "setUseAscender", "Z", "setUseDescender", "setUseBorderPadding" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfCell = { "PdfCell", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 34, 17, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfCell;
}

@end


#line 174
void ComAowagieTextPdfPdfCell_initPackagePrivateWithComAowagieTextCell_withInt_withFloat_withFloat_withFloat_withFloat_withFloat_(ComAowagieTextPdfPdfCell *self, ComAowagieTextCell *cell, jint rownumber, jfloat left, jfloat right, jfloat top, jfloat cellspacing, jfloat cellpadding) {
  ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(self,
#line 176
  left, top, right, top);
  self->header_ =
#line 131
  false;
  self->contentHeight_ =
#line 137
  0.0f;
  
#line 178
  [self cloneNonPositionParametersWithComAowagieTextRectangle:cell];
  self->cellpadding_ = cellpadding;
  self->cellspacing_ = cellspacing;
  self->verticalAlignment_ = [((ComAowagieTextCell *) nil_chk(cell)) getVerticalAlignment];
  self->useAscender_ = [cell isUseAscender];
  self->useDescender_ = [cell isUseDescender];
  self->useBorderPadding_ = [cell isUseBorderPadding];
  
#line 187
  ComAowagieTextPdfPdfChunk *chunk;
  id<ComAowagieTextElement> element;
  ComAowagieTextPdfPdfChunk *overflow;
  self->lines_ = new_JavaUtilArrayList_init();
  self->images_ = new_JavaUtilArrayList_init();
  self->leading_ = [cell getLeading];
  jint alignment = [cell getHorizontalAlignment];
  JrePlusAssignFloatF(&left, cellspacing + cellpadding);
  JreMinusAssignFloatF(&right, cellspacing + cellpadding);
  
#line 197
  JrePlusAssignFloatF(&left, ComAowagieTextPdfPdfCell_getBorderWidthInsideWithInt_(self, ComAowagieTextRectangle_LEFT));
  JreMinusAssignFloatF(&right, ComAowagieTextPdfPdfCell_getBorderWidthInsideWithInt_(self, ComAowagieTextRectangle_RIGHT));
  
#line 201
  self->contentHeight_ = 0;
  
#line 203
  self->rowspan_ = [cell getRowspan];
  
#line 205
  JavaUtilArrayList *allActions;
  jint aCounter;
  
#line 208
  for (id<JavaUtilIterator> i = [cell getElements]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    element = (id<ComAowagieTextElement>) cast_check([i next], ComAowagieTextElement_class_());
    {
      
#line 234
      jfloat currentLineLeading;
      jfloat currentLeft;
      jfloat currentRight;
      
#line 249
      JavaUtilArrayList *chunks;
      
#line 210
      switch ([((id<ComAowagieTextElement>) nil_chk(element)) type]) {
        case ComAowagieTextElement_JPEG:
        case ComAowagieTextElement_JPEG2000:
        case ComAowagieTextElement_JBIG2:
        case ComAowagieTextElement_IMGRAW:
        case ComAowagieTextElement_IMGTEMPLATE:
        ComAowagieTextPdfPdfCell_addImageWithComAowagieTextImage_withFloat_withFloat_withFloat_withInt_(self, (ComAowagieTextImage *) cast_chk(element, [ComAowagieTextImage class]), left, right, 0.4f * self->leading_, alignment);
        break;
        
#line 219
        case ComAowagieTextElement_LIST:
        if (self->line_ != nil && [self->line_ size] > 0) {
          [self->line_ resetAlignment];
          ComAowagieTextPdfPdfCell_addLineWithComAowagieTextPdfPdfLine_(self, self->line_);
        }
        
#line 225
        ComAowagieTextPdfPdfCell_addListWithComAowagieTextList_withFloat_withFloat_withInt_(self, (ComAowagieTextList *) cast_chk(element, [ComAowagieTextList class]), left, right, alignment);
        self->line_ = new_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withInt_withFloat_(left, right, alignment, self->leading_);
        break;
        
#line 229
        default:
        allActions = new_JavaUtilArrayList_init();
        ComAowagieTextPdfPdfCell_processActionsWithComAowagieTextElement_withComAowagieTextPdfPdfAction_withJavaUtilArrayList_(self, element, nil, allActions);
        aCounter = 0;
        currentLineLeading =
#line 234
        self->leading_;
        currentLeft = left;
        currentRight = right;
        if ([element isKindOfClass:[ComAowagieTextPhrase class]]) {
          currentLineLeading = [((ComAowagieTextPhrase *) element) getLeading];
        }
        if ([element isKindOfClass:[ComAowagieTextParagraph class]]) {
          ComAowagieTextParagraph *p = (ComAowagieTextParagraph *) element;
          JrePlusAssignFloatF(&currentLeft, [p getIndentationLeft]);
          JreMinusAssignFloatF(&currentRight, [p getIndentationRight]);
        }
        if (self->line_ == nil) {
          self->line_ = new_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withInt_withFloat_(currentLeft, currentRight, alignment, currentLineLeading);
        }
        chunks =
#line 249
        [element getChunks];
        if ([((JavaUtilArrayList *) nil_chk(chunks)) isEmpty]) {
          ComAowagieTextPdfPdfCell_addLineWithComAowagieTextPdfPdfLine_(self, self->line_);
          self->line_ = new_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withInt_withFloat_(currentLeft, currentRight, alignment, currentLineLeading);
        }
        else {
          for (id<JavaUtilIterator> j = [chunks iterator]; [((id<JavaUtilIterator>) nil_chk(j)) hasNext]; ) {
            ComAowagieTextChunk *c = (ComAowagieTextChunk *) cast_chk([j next], [ComAowagieTextChunk class]);
            chunk = new_ComAowagieTextPdfPdfChunk_initWithComAowagieTextChunk_withComAowagieTextPdfPdfAction_(c, (ComAowagieTextPdfPdfAction *) cast_chk([allActions getWithInt:aCounter++], [ComAowagieTextPdfPdfAction class]));
            while ((overflow = [((ComAowagieTextPdfPdfLine *) nil_chk(self->line_)) addWithComAowagieTextPdfPdfChunk:chunk]) != nil) {
              ComAowagieTextPdfPdfCell_addLineWithComAowagieTextPdfPdfLine_(self, self->line_);
              self->line_ = new_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withInt_withFloat_(currentLeft, currentRight, alignment, currentLineLeading);
              chunk = overflow;
            }
          }
        }
        
#line 266
        switch ([element type]) {
          case ComAowagieTextElement_PARAGRAPH:
          case ComAowagieTextElement_SECTION:
          case ComAowagieTextElement_CHAPTER:
          [((ComAowagieTextPdfPdfLine *) nil_chk(self->line_)) resetAlignment];
          ComAowagieTextPdfPdfCell_flushCurrentLine(self);
        }
      }
    }
  }
  
#line 275
  ComAowagieTextPdfPdfCell_flushCurrentLine(self);
  if ([((JavaUtilArrayList *) nil_chk(self->lines_)) size] > [cell getMaxLines]) {
    while ([((JavaUtilArrayList *) nil_chk(self->lines_)) size] > [cell getMaxLines]) {
      (void) ComAowagieTextPdfPdfCell_removeLineWithInt_(self, [((JavaUtilArrayList *) nil_chk(self->lines_)) size] - 1);
    }
    if ([cell getMaxLines] > 0) {
      NSString *more = [cell getShowTruncation];
      if (more != nil && [more java_length] > 0) {
        
#line 284
        self->lastLine_ = (ComAowagieTextPdfPdfLine *) cast_chk([((JavaUtilArrayList *) nil_chk(self->lines_)) getWithInt:[self->lines_ size] - 1], [ComAowagieTextPdfPdfLine class]);
        if ([((ComAowagieTextPdfPdfLine *) nil_chk(self->lastLine_)) size] >= 0) {
          ComAowagieTextPdfPdfChunk *lastChunk = [((ComAowagieTextPdfPdfLine *) nil_chk(self->lastLine_)) getChunkWithInt:[self->lastLine_ size] - 1];
          jfloat moreWidth = [new_ComAowagieTextPdfPdfChunk_initWithNSString_withComAowagieTextPdfPdfChunk_(more, lastChunk) width];
          while ([((NSString *) nil_chk([((ComAowagieTextPdfPdfChunk *) nil_chk(lastChunk)) description])) java_length] > 0 && [lastChunk width] + moreWidth > right - left) {
            
#line 290
            [lastChunk setValueWithNSString:[((NSString *) nil_chk([lastChunk description])) java_substring:0 endIndex:[lastChunk length] - 1]];
          }
          [lastChunk setValueWithNSString:JreStrcat("$$", [lastChunk description], more)];
        }
        else {
          
#line 294
          (void) [((ComAowagieTextPdfPdfLine *) nil_chk(self->lastLine_)) addWithComAowagieTextPdfPdfChunk:new_ComAowagieTextPdfPdfChunk_initWithComAowagieTextChunk_withComAowagieTextPdfPdfAction_(new_ComAowagieTextChunk_initWithNSString_(more), nil)];
        }
      }
    }
  }
  
#line 300
  if (self->useDescender_ && self->lastLine_ != nil) {
    JreMinusAssignFloatF(&self->contentHeight_, [self->lastLine_ getDescender]);
  }
  
#line 305
  if (![((JavaUtilArrayList *) nil_chk(self->lines_)) isEmpty]) {
    self->firstLine_ = (ComAowagieTextPdfPdfLine *) cast_chk([((JavaUtilArrayList *) nil_chk(self->lines_)) getWithInt:0], [ComAowagieTextPdfPdfLine class]);
    jfloat firstLineRealHeight = ComAowagieTextPdfPdfCell_firstLineRealHeight(self);
    JreMinusAssignFloatF(&self->contentHeight_, [((ComAowagieTextPdfPdfLine *) nil_chk(self->firstLine_)) height]);
    ((ComAowagieTextPdfPdfLine *) nil_chk(self->firstLine_))->height_ = firstLineRealHeight;
    JrePlusAssignFloatF(&self->contentHeight_, firstLineRealHeight);
  }
  
#line 313
  jfloat newBottom = top - self->contentHeight_ - 2.0f * ComAowagieTextPdfPdfCell_cellpadding(self) - 2.0f * ComAowagieTextPdfPdfCell_cellspacing(self);
  JreMinusAssignFloatF(&newBottom, ComAowagieTextPdfPdfCell_getBorderWidthInsideWithInt_(self, ComAowagieTextRectangle_TOP) + ComAowagieTextPdfPdfCell_getBorderWidthInsideWithInt_(self, ComAowagieTextRectangle_BOTTOM));
  [self setBottomWithFloat:newBottom];
  
#line 317
  self->rownumber_ = rownumber;
}


#line 174
ComAowagieTextPdfPdfCell *new_ComAowagieTextPdfPdfCell_initPackagePrivateWithComAowagieTextCell_withInt_withFloat_withFloat_withFloat_withFloat_withFloat_(ComAowagieTextCell *cell, jint rownumber, jfloat left, jfloat right, jfloat top, jfloat cellspacing, jfloat cellpadding) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfCell, initPackagePrivateWithComAowagieTextCell_withInt_withFloat_withFloat_withFloat_withFloat_withFloat_, cell, rownumber, left, right, top, cellspacing, cellpadding)
}


#line 174
ComAowagieTextPdfPdfCell *create_ComAowagieTextPdfPdfCell_initPackagePrivateWithComAowagieTextCell_withInt_withFloat_withFloat_withFloat_withFloat_withFloat_(ComAowagieTextCell *cell, jint rownumber, jfloat left, jfloat right, jfloat top, jfloat cellspacing, jfloat cellpadding) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfCell, initPackagePrivateWithComAowagieTextCell_withInt_withFloat_withFloat_withFloat_withFloat_withFloat_, cell, rownumber, left, right, top, cellspacing, cellpadding)
}


#line 320
void ComAowagieTextPdfPdfCell_addListWithComAowagieTextList_withFloat_withFloat_withInt_(ComAowagieTextPdfPdfCell *self, ComAowagieTextList *list, jfloat left, jfloat right, jint alignment) {
  ComAowagieTextPdfPdfChunk *chunk;
  ComAowagieTextPdfPdfChunk *overflow;
  JavaUtilArrayList *allActions = new_JavaUtilArrayList_init();
  ComAowagieTextPdfPdfCell_processActionsWithComAowagieTextElement_withComAowagieTextPdfPdfAction_withJavaUtilArrayList_(self, list, nil, allActions);
  jint aCounter = 0;
  for (id<JavaUtilIterator> it = [((JavaUtilArrayList *) nil_chk([((ComAowagieTextList *) nil_chk(list)) getItems])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<ComAowagieTextElement> ele = (id<ComAowagieTextElement>) cast_check([it next], ComAowagieTextElement_class_());
    {
      
#line 330
      ComAowagieTextListItem *item;
      
#line 346
      ComAowagieTextList *sublist;
      
#line 328
      switch ([((id<ComAowagieTextElement>) nil_chk(ele)) type]) {
        case ComAowagieTextElement_LISTITEM:
        item = (ComAowagieTextListItem *) cast_chk(ele, [ComAowagieTextListItem class]);
        self->line_ = new_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withInt_withFloat_(left + [item getIndentationLeft], right, alignment, [item getLeading]);
        [self->line_ setListItemWithComAowagieTextListItem:item];
        for (id<JavaUtilIterator> j = [((JavaUtilArrayList *) nil_chk([item getChunks])) iterator]; [((id<JavaUtilIterator>) nil_chk(j)) hasNext]; ) {
          chunk = new_ComAowagieTextPdfPdfChunk_initWithComAowagieTextChunk_withComAowagieTextPdfPdfAction_((ComAowagieTextChunk *) cast_chk([j next], [ComAowagieTextChunk class]), (ComAowagieTextPdfPdfAction *) cast_chk([allActions getWithInt:aCounter++], [ComAowagieTextPdfPdfAction class]));
          while ((overflow = [((ComAowagieTextPdfPdfLine *) nil_chk(self->line_)) addWithComAowagieTextPdfPdfChunk:chunk]) != nil) {
            ComAowagieTextPdfPdfCell_addLineWithComAowagieTextPdfPdfLine_(self, self->line_);
            self->line_ = new_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withInt_withFloat_(left + [item getIndentationLeft], right, alignment, [item getLeading]);
            chunk = overflow;
          }
          [((ComAowagieTextPdfPdfLine *) nil_chk(self->line_)) resetAlignment];
          ComAowagieTextPdfPdfCell_addLineWithComAowagieTextPdfPdfLine_(self, self->line_);
          self->line_ = new_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withInt_withFloat_(left + [item getIndentationLeft], right, alignment, self->leading_);
        }
        break;
        case ComAowagieTextElement_LIST:
        sublist = (ComAowagieTextList *) cast_chk(ele, [ComAowagieTextList class]);
        ComAowagieTextPdfPdfCell_addListWithComAowagieTextList_withFloat_withFloat_withInt_(self, sublist, left + [sublist getIndentationLeft], right, alignment);
        break;
      }
    }
  }
}


#line 437
void ComAowagieTextPdfPdfCell_addLineWithComAowagieTextPdfPdfLine_(ComAowagieTextPdfPdfCell *self, ComAowagieTextPdfPdfLine *line) {
  [((JavaUtilArrayList *) nil_chk(self->lines_)) addWithId:line];
  JrePlusAssignFloatF(&self->contentHeight_, [((ComAowagieTextPdfPdfLine *) nil_chk(line)) height]);
  self->lastLine_ = line;
  self->line_ = nil;
}

ComAowagieTextPdfPdfLine *ComAowagieTextPdfPdfCell_removeLineWithInt_(ComAowagieTextPdfPdfCell *self, jint index) {
  ComAowagieTextPdfPdfLine *oldLine = (ComAowagieTextPdfPdfLine *) cast_chk([((JavaUtilArrayList *) nil_chk(self->lines_)) removeWithInt:index], [ComAowagieTextPdfPdfLine class]);
  JreMinusAssignFloatF(&self->contentHeight_, [((ComAowagieTextPdfPdfLine *) nil_chk(oldLine)) height]);
  if (index == 0) {
    if (![((JavaUtilArrayList *) nil_chk(self->lines_)) isEmpty]) {
      self->firstLine_ = (ComAowagieTextPdfPdfLine *) cast_chk([((JavaUtilArrayList *) nil_chk(self->lines_)) getWithInt:0], [ComAowagieTextPdfPdfLine class]);
      jfloat firstLineRealHeight = ComAowagieTextPdfPdfCell_firstLineRealHeight(self);
      JreMinusAssignFloatF(&self->contentHeight_, [((ComAowagieTextPdfPdfLine *) nil_chk(self->firstLine_)) height]);
      ((ComAowagieTextPdfPdfLine *) nil_chk(self->firstLine_))->height_ = firstLineRealHeight;
      JrePlusAssignFloatF(&self->contentHeight_, firstLineRealHeight);
    }
  }
  return oldLine;
}

void ComAowagieTextPdfPdfCell_flushCurrentLine(ComAowagieTextPdfPdfCell *self) {
  if (self->line_ != nil && [self->line_ size] > 0) {
    ComAowagieTextPdfPdfCell_addLineWithComAowagieTextPdfPdfLine_(self, self->line_);
  }
}


#line 471
jfloat ComAowagieTextPdfPdfCell_firstLineRealHeight(ComAowagieTextPdfPdfCell *self) {
  jfloat firstLineRealHeight = 0.0f;
  if (self->firstLine_ != nil) {
    ComAowagieTextPdfPdfChunk *chunk = [self->firstLine_ getChunkWithInt:0];
    if (chunk != nil) {
      ComAowagieTextImage *image = [chunk getImage];
      if (image != nil) {
        firstLineRealHeight = [((ComAowagieTextImage *) nil_chk([((ComAowagieTextPdfPdfChunk *) nil_chk([((ComAowagieTextPdfPdfLine *) nil_chk(self->firstLine_)) getChunkWithInt:0])) getImage])) getScaledHeight];
      }
      else {
        
#line 480
        firstLineRealHeight = self->useAscender_ ? [((ComAowagieTextPdfPdfLine *) nil_chk(self->firstLine_)) getAscender] : self->leading_;
      }
    }
  }
  return firstLineRealHeight;
}


#line 494
jfloat ComAowagieTextPdfPdfCell_getBorderWidthInsideWithInt_(ComAowagieTextPdfPdfCell *self, jint side) {
  jfloat width = 0.0f;
  if (self->useBorderPadding_) {
    switch (side) {
      case ComAowagieTextRectangle_LEFT:
      width = [self getBorderWidthLeft];
      break;
      
#line 502
      case ComAowagieTextRectangle_RIGHT:
      width = [self getBorderWidthRight];
      break;
      
#line 506
      case ComAowagieTextRectangle_TOP:
      width = [self getBorderWidthTop];
      break;
      
#line 510
      default:
      width = [self getBorderWidthBottom];
      break;
    }
    
#line 515
    if (![self isUseVariableBorders]) {
      width = width / 2.0f;
    }
  }
  return width;
}


#line 534
jfloat ComAowagieTextPdfPdfCell_addImageWithComAowagieTextImage_withFloat_withFloat_withFloat_withInt_(ComAowagieTextPdfPdfCell *self, ComAowagieTextImage *i, jfloat left, jfloat right, jfloat extraHeight, jint alignment) {
  ComAowagieTextImage *image = ComAowagieTextImage_getInstanceWithComAowagieTextImage_(i);
  if ([((ComAowagieTextImage *) nil_chk(image)) getScaledWidth] > right - left) {
    [image scaleToFitWithFloat:right - left withFloat:JavaLangFloat_MAX_VALUE];
  }
  ComAowagieTextPdfPdfCell_flushCurrentLine(self);
  if (self->line_ == nil) {
    self->line_ = new_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withInt_withFloat_(left, right, alignment, self->leading_);
  }
  ComAowagieTextPdfPdfLine *imageLine = self->line_;
  
#line 546
  right = right - left;
  left = 0.0f;
  
#line 549
  if (([image getAlignment] & ComAowagieTextImage_RIGHT) == ComAowagieTextImage_RIGHT) {
    left = right - [image getScaledWidth];
  }
  else
#line 551
  if (([image getAlignment] & ComAowagieTextImage_MIDDLE) == ComAowagieTextImage_MIDDLE) {
    left = left + (right - left - [image getScaledWidth]) / 2.0f;
  }
  ComAowagieTextChunk *imageChunk = new_ComAowagieTextChunk_initWithComAowagieTextImage_withFloat_withFloat_(image, left, 0);
  (void) [imageLine addWithComAowagieTextPdfPdfChunk:new_ComAowagieTextPdfPdfChunk_initWithComAowagieTextChunk_withComAowagieTextPdfPdfAction_(imageChunk, nil)];
  ComAowagieTextPdfPdfCell_addLineWithComAowagieTextPdfPdfLine_(self, imageLine);
  return [imageLine height];
}


#line 692
jfloat ComAowagieTextPdfPdfCell_remainingLinesHeight(ComAowagieTextPdfPdfCell *self) {
  if ([((JavaUtilArrayList *) nil_chk(self->lines_)) isEmpty]) {
    return 0;
  }
  jfloat result = 0;
  jint size = [((JavaUtilArrayList *) nil_chk(self->lines_)) size];
  ComAowagieTextPdfPdfLine *line;
  for (jint i = 0; i < size; i++) {
    line = (ComAowagieTextPdfPdfLine *) cast_chk([((JavaUtilArrayList *) nil_chk(self->lines_)) getWithInt:i], [ComAowagieTextPdfPdfLine class]);
    JrePlusAssignFloatF(&result, [((ComAowagieTextPdfPdfLine *) nil_chk(line)) height]);
  }
  return result;
}


#line 751
jfloat ComAowagieTextPdfPdfCell_cellspacing(ComAowagieTextPdfPdfCell *self) {
  return self->cellspacing_;
}


#line 761
jfloat ComAowagieTextPdfPdfCell_cellpadding(ComAowagieTextPdfPdfCell *self) {
  return self->cellpadding_;
}


#line 772
void ComAowagieTextPdfPdfCell_processActionsWithComAowagieTextElement_withComAowagieTextPdfPdfAction_withJavaUtilArrayList_(ComAowagieTextPdfPdfCell *self, id<ComAowagieTextElement> element, ComAowagieTextPdfPdfAction *action, JavaUtilArrayList *allActions) {
  if ([((id<ComAowagieTextElement>) nil_chk(element)) type] == ComAowagieTextElement_ANCHOR) {
    NSString *url = [((ComAowagieTextAnchor *) cast_chk(element, [ComAowagieTextAnchor class])) getReference];
    if (url != nil) {
      action = new_ComAowagieTextPdfPdfAction_initWithNSString_(url);
    }
  }
  id<JavaUtilIterator> i;
  {
    
#line 800
    jint n;
    
#line 780
    switch ([element type]) {
      case ComAowagieTextElement_PHRASE:
      case ComAowagieTextElement_SECTION:
      case ComAowagieTextElement_ANCHOR:
      case ComAowagieTextElement_CHAPTER:
      case ComAowagieTextElement_LISTITEM:
      case ComAowagieTextElement_PARAGRAPH:
      for (i = [((JavaUtilArrayList *) cast_chk(element, [JavaUtilArrayList class])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
        ComAowagieTextPdfPdfCell_processActionsWithComAowagieTextElement_withComAowagieTextPdfPdfAction_withJavaUtilArrayList_(self, (id<ComAowagieTextElement>) cast_check([i next], ComAowagieTextElement_class_()), action, allActions);
      }
      break;
      case ComAowagieTextElement_CHUNK:
      [((JavaUtilArrayList *) nil_chk(allActions)) addWithId:action];
      break;
      case ComAowagieTextElement_LIST:
      for (i = [((JavaUtilArrayList *) nil_chk([((ComAowagieTextList *) cast_chk(element, [ComAowagieTextList class])) getItems])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
        ComAowagieTextPdfPdfCell_processActionsWithComAowagieTextElement_withComAowagieTextPdfPdfAction_withJavaUtilArrayList_(self, (id<ComAowagieTextElement>) cast_check([i next], ComAowagieTextElement_class_()), action, allActions);
      }
      break;
      default:
      n = [((JavaUtilArrayList *) nil_chk([element getChunks])) size];
      while (n-- > 0) {
        [((JavaUtilArrayList *) nil_chk(allActions)) addWithId:action];
      }
      break;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfCell)
