//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/jcajce/io/CipherInputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CipherInputStream")
#ifdef RESTRICT_CipherInputStream
#define INCLUDE_ALL_CipherInputStream 0
#else
#define INCLUDE_ALL_CipherInputStream 1
#endif
#undef RESTRICT_CipherInputStream

#if !defined (OrgSpongycastleJcajceIoCipherInputStream_) && (INCLUDE_ALL_CipherInputStream || defined(INCLUDE_OrgSpongycastleJcajceIoCipherInputStream))
#define OrgSpongycastleJcajceIoCipherInputStream_

#define RESTRICT_JavaIoFilterInputStream 1
#define INCLUDE_JavaIoFilterInputStream 1
#include "java/io/FilterInputStream.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaxCryptoCipher;

/*!
 @brief A CipherInputStream is composed of an InputStream and a cipher so that read() methods return data
  that are read in from the underlying InputStream but have been additionally processed by the
  Cipher.The cipher must be fully initialized before being used by a CipherInputStream.
 <p>
  For example, if the Cipher is initialized for decryption, the CipherInputStream will attempt to
  read in data and decrypt them, before returning the decrypted data. 
 </p><p>
  This is a reimplementation of <code>javax.crypto.CipherInputStream</code> that is safe for use with
  AEAD block ciphers, and does not silently catch <code>BadPaddingException</code> and 
 <code>IllegalBlockSizeException</code> errors. Any errors that occur during <code>finalisation</code>
  are rethrown wrapped in an <code>InvalidCipherTextIOException</code>.
  </p>
 */
@interface OrgSpongycastleJcajceIoCipherInputStream : JavaIoFilterInputStream

#pragma mark Public

/*!
 @brief Constructs a CipherInputStream from an InputStream and an initialised Cipher.
 */
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)input
                    withJavaxCryptoCipher:(JavaxCryptoCipher *)cipher;

- (jint)available;

/*!
 @brief Closes the underlying input stream, and then finalises the processing of the data by the
  cipher.
 @throw IOExceptionif there was an error closing the input stream.
 @throw InvalidCipherTextIOExceptionif the data read from the stream was invalid ciphertext
  (e.g. the cipher is an AEAD cipher and the ciphertext tag check fails).
 */
- (void)close;

- (void)markWithInt:(jint)readlimit;

- (jboolean)markSupported;

/*!
 @brief Reads data from the underlying stream and processes it with the cipher until the cipher
  outputs data, and returns the next available byte.
 <p>
  If the underlying stream is exhausted by this call, the cipher will be finalised. 
 </p>
 @throw IOExceptionif there was an error closing the input stream.
 @throw InvalidCipherTextIOExceptionif the data read from the stream was invalid ciphertext
  (e.g. the cipher is an AEAD cipher and the ciphertext tag check fails).
 */
- (jint)read;

/*!
 @brief Reads data from the underlying stream and processes it with the cipher until the cipher
  outputs data, and then returns up to <code>len</code> bytes in the provided array.
 <p>
  If the underlying stream is exhausted by this call, the cipher will be finalised. 
 </p>
 @param b the buffer into which the data is read.
 @param off the start offset in the destination array  <code> b </code>
 @param len the maximum number of bytes read.
 @return the total number of bytes read into the buffer, or <code>-1</code> if there is no
          more data because the end of the stream has been reached.
 @throw IOExceptionif there was an error closing the input stream.
 @throw InvalidCipherTextIOExceptionif the data read from the stream was invalid ciphertext
  (e.g. the cipher is an AEAD cipher and the ciphertext tag check fails).
 */
- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len;

- (void)reset;

- (jlong)skipWithLong:(jlong)n;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleJcajceIoCipherInputStream)

FOUNDATION_EXPORT void OrgSpongycastleJcajceIoCipherInputStream_initWithJavaIoInputStream_withJavaxCryptoCipher_(OrgSpongycastleJcajceIoCipherInputStream *self, JavaIoInputStream *input, JavaxCryptoCipher *cipher);

FOUNDATION_EXPORT OrgSpongycastleJcajceIoCipherInputStream *new_OrgSpongycastleJcajceIoCipherInputStream_initWithJavaIoInputStream_withJavaxCryptoCipher_(JavaIoInputStream *input, JavaxCryptoCipher *cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleJcajceIoCipherInputStream *create_OrgSpongycastleJcajceIoCipherInputStream_initWithJavaIoInputStream_withJavaxCryptoCipher_(JavaIoInputStream *input, JavaxCryptoCipher *cipher);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleJcajceIoCipherInputStream)

#endif

#pragma pop_macro("INCLUDE_ALL_CipherInputStream")
