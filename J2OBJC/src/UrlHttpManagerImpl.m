//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/http/UrlHttpManagerImpl.java
//

#include "AOUtil.h"
#include "Base64.h"
#include "HttpError.h"
#include "HttpErrorProcessor.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Platform.h"
#include "SSLConfig.h"
#include "SslSecurityManager.h"
#include "URLName.h"
#include "UrlHttpManagerImpl.h"
#include "UrlHttpMethod.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/net/CookieHandler.h"
#include "java/net/CookieManager.h"
#include "java/net/CookiePolicy.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/InetAddress.h"
#include "java/net/Proxy.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/StandardCharsets.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/net/ssl/HttpsURLConnection.h"

#if !__has_feature(objc_arc)
#error "UrlHttpManagerImpl must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl ()

+ (JavaUtilProperties *)buildHeadersWithNSString:(NSString *)contentType
                                    withNSString:(NSString *)accept;

/*!
 @brief Indica si la URL a la que se desea acceder est&aacute; en el bucle
  local (127.0.0.1/localhost).
 @param url Url que se desea comprobar.
 @return <code>true</code> si es una URL local, <code>false</code> en caso contrario.
 */
+ (jboolean)isLocalWithJavaNetURL:(JavaNetURL *)url;

/*!
 @brief Comprueba si el dominio de una URL se considera seguro con respecto a una lista de dominios
  seguros establecidos a traves de la propiedad determinado por la constante
  JAVA_PARAM_SECURE_DOMAINS_LIST.
 @param url URL que se desea comprobar.
 @return <code>true</code> si el dominio de la URL es seguro, <code>false</code> en caso contrario.
 */
+ (jboolean)checkIsSecureDomainWithJavaNetURL:(JavaNetURL *)url;

@end

inline JavaUtilLoggingLogger *EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_get_LOGGER(void);
static JavaUtilLoggingLogger *EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl, LOGGER, JavaUtilLoggingLogger *)

inline NSString *EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_get_URN_SEPARATOR(void);
static NSString *EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_URN_SEPARATOR = @":";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl, URN_SEPARATOR, NSString *)

inline NSString *EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_get_PROT_SEPARATOR(void);
static NSString *EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_PROT_SEPARATOR = @"://";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl, PROT_SEPARATOR, NSString *)

inline NSString *EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_get_ACCEPT(void);
static NSString *EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_ACCEPT = @"Accept";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl, ACCEPT, NSString *)

__attribute__((unused)) static JavaUtilProperties *EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_buildHeadersWithNSString_withNSString_(NSString *contentType, NSString *accept);

__attribute__((unused)) static jboolean EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_isLocalWithJavaNetURL_(JavaNetURL *url);

__attribute__((unused)) static jboolean EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_checkIsSecureDomainWithJavaNetURL_(JavaNetURL *url);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/http/UrlHttpManagerImpl.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl)

NSString *EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_JAVA_PARAM_DISABLE_SSL_CHECKS = @"disableSslChecks";
NSString *EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_JAVA_PARAM_SECURE_DOMAINS_LIST = @"secureDomainsList";


#line 38
@implementation EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 67
- (instancetype)init {
  EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 71
- (IOSByteArray *)readUrlWithNSString:(NSString *)url
withEsGobAfirmaCoreMiscHttpUrlHttpMethod:(EsGobAfirmaCoreMiscHttpUrlHttpMethod *)method {
  return [self readUrlWithNSString:url withInt:EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_DEFAULT_TIMEOUT withNSString:nil withNSString:nil withEsGobAfirmaCoreMiscHttpUrlHttpMethod:method];
}

- (IOSByteArray *)readUrlWithNSString:(NSString *)url
withEsGobAfirmaCoreMiscHttpUrlHttpMethod:(EsGobAfirmaCoreMiscHttpUrlHttpMethod *)method
withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:(id<EsGobAfirmaCoreMiscHttpHttpErrorProcessor>)processor {
  
#line 78
  return [self readUrlWithNSString:url withInt:EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_DEFAULT_TIMEOUT withNSString:nil withNSString:nil withEsGobAfirmaCoreMiscHttpUrlHttpMethod:method withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:processor];
}


#line 81
- (IOSByteArray *)readUrlWithNSString:(NSString *)url
withEsGobAfirmaCoreMiscHttpUrlHttpMethod:(EsGobAfirmaCoreMiscHttpUrlHttpMethod *)method
withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:(id<EsGobAfirmaCoreMiscHttpHttpErrorProcessor>)processor
 withEsGobAfirmaCoreMiscHttpSSLConfig:(EsGobAfirmaCoreMiscHttpSSLConfig *)sslConfig {
  
#line 83
  return [self readUrlWithNSString:url withInt:EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_DEFAULT_TIMEOUT withNSString:nil withNSString:nil withEsGobAfirmaCoreMiscHttpUrlHttpMethod:method withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:processor withEsGobAfirmaCoreMiscHttpSSLConfig:sslConfig];
}


#line 86
- (IOSByteArray *)readUrlWithNSString:(NSString *)urlToRead
                              withInt:(jint)timeout
                         withNSString:(NSString *)contentType
                         withNSString:(NSString *)accept
withEsGobAfirmaCoreMiscHttpUrlHttpMethod:(EsGobAfirmaCoreMiscHttpUrlHttpMethod *)method {
  
#line 92
  JavaUtilProperties *headers = EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_buildHeadersWithNSString_withNSString_(contentType, accept);
  return [self readUrlWithNSString:urlToRead withInt:timeout withEsGobAfirmaCoreMiscHttpUrlHttpMethod:method withJavaUtilProperties:headers];
}


#line 96
+ (JavaUtilProperties *)buildHeadersWithNSString:(NSString *)contentType
                                    withNSString:(NSString *)accept {
  return EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_buildHeadersWithNSString_withNSString_(contentType, accept);
}


#line 107
- (IOSByteArray *)readUrlWithNSString:(NSString *)urlToRead
                              withInt:(jint)timeout
                         withNSString:(NSString *)contentType
                         withNSString:(NSString *)accept
withEsGobAfirmaCoreMiscHttpUrlHttpMethod:(EsGobAfirmaCoreMiscHttpUrlHttpMethod *)method
withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:(id<EsGobAfirmaCoreMiscHttpHttpErrorProcessor>)httpProcessor {
  
#line 114
  JavaUtilProperties *headers = EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_buildHeadersWithNSString_withNSString_(contentType, accept);
  return [self readUrlWithNSString:urlToRead withInt:timeout withEsGobAfirmaCoreMiscHttpUrlHttpMethod:method withJavaUtilProperties:headers withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:httpProcessor];
}

- (IOSByteArray *)readUrlWithNSString:(NSString *)urlToRead
                              withInt:(jint)timeout
withEsGobAfirmaCoreMiscHttpUrlHttpMethod:(EsGobAfirmaCoreMiscHttpUrlHttpMethod *)method
               withJavaUtilProperties:(JavaUtilProperties *)requestProperties {
  
#line 124
  return [self readUrlWithNSString:urlToRead withInt:timeout withEsGobAfirmaCoreMiscHttpUrlHttpMethod:method withJavaUtilProperties:requestProperties withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:nil];
}

- (IOSByteArray *)readUrlWithNSString:(NSString *)urlToRead
                              withInt:(jint)timeout
withEsGobAfirmaCoreMiscHttpUrlHttpMethod:(EsGobAfirmaCoreMiscHttpUrlHttpMethod *)method
               withJavaUtilProperties:(JavaUtilProperties *)requestProperties
withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:(id<EsGobAfirmaCoreMiscHttpHttpErrorProcessor>)httpProcessor {
  
#line 134
  return [self readUrlWithNSString:urlToRead withInt:timeout withEsGobAfirmaCoreMiscHttpUrlHttpMethod:method withJavaUtilProperties:requestProperties withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:httpProcessor withEsGobAfirmaCoreMiscHttpSSLConfig:nil];
}

- (IOSByteArray *)readUrlWithNSString:(NSString *)url
                              withInt:(jint)timeout
                         withNSString:(NSString *)contentType
                         withNSString:(NSString *)accept
withEsGobAfirmaCoreMiscHttpUrlHttpMethod:(EsGobAfirmaCoreMiscHttpUrlHttpMethod *)method
withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:(id<EsGobAfirmaCoreMiscHttpHttpErrorProcessor>)httpProcessor
 withEsGobAfirmaCoreMiscHttpSSLConfig:(EsGobAfirmaCoreMiscHttpSSLConfig *)sslConfig {
  
#line 141
  JavaUtilProperties *headers = EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_buildHeadersWithNSString_withNSString_(contentType, accept);
  return [self readUrlWithNSString:url withInt:timeout withEsGobAfirmaCoreMiscHttpUrlHttpMethod:method withJavaUtilProperties:headers withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:httpProcessor withEsGobAfirmaCoreMiscHttpSSLConfig:sslConfig];
}


#line 145
- (IOSByteArray *)readUrlWithNSString:(NSString *)urlToRead
                              withInt:(jint)timeout
withEsGobAfirmaCoreMiscHttpUrlHttpMethod:(EsGobAfirmaCoreMiscHttpUrlHttpMethod *)method
               withJavaUtilProperties:(JavaUtilProperties *)requestProperties
withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:(id<EsGobAfirmaCoreMiscHttpHttpErrorProcessor>)httpProcessor
 withEsGobAfirmaCoreMiscHttpSSLConfig:(EsGobAfirmaCoreMiscHttpSSLConfig *)sslConfig {
  
#line 154
  if (urlToRead == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"La URL a leer no puede ser nula");
  }
  
#line 159
  NSString *authString;
  NSString *url;
  EsGobAfirmaCoreMiscHttpURLName *un = new_EsGobAfirmaCoreMiscHttpURLName_initPackagePrivateWithNSString_(urlToRead);
  
#line 163
  if ([un getUsername] != nil || [un getPassword] != nil) {
    NSString *tmpStr;
    if ([un getUsername] != nil && [un getPassword] != nil) {
      tmpStr = JreStrcat("$$$", [un getUsername], EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_URN_SEPARATOR, [un getPassword]);
    }
    else if ([un getUsername] != nil) {
      tmpStr = [un getUsername];
    }
    else {
      tmpStr = [un getPassword];
    }
    authString = EsGobAfirmaCoreMiscBase64_encodeWithByteArray_([((NSString *) nil_chk(tmpStr)) java_getBytes]);
    url = JreStrcat("$$$$C$", [un getProtocol],
#line 176
    EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_PROT_SEPARATOR,
#line 177
    [un getHost],
#line 178
    ([un getPort] != -1 ? JreStrcat("$$", EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_URN_SEPARATOR, JavaLangInteger_toStringWithInt_(
#line 179
    [un getPort])) : @""), '/',
#line 181
    ([un getFile] != nil ? [un getFile] : @""));
  }
  else {
    url = urlToRead;
    authString = nil;
  }
  
#line 188
  NSString *urlParameters = nil;
  NSString *request = nil;
  if ([((EsGobAfirmaCoreMiscHttpUrlHttpMethod *) nil_chk(JreLoadEnum(EsGobAfirmaCoreMiscHttpUrlHttpMethod, POST))) isEqual:method] || [((EsGobAfirmaCoreMiscHttpUrlHttpMethod *) nil_chk(JreLoadEnum(EsGobAfirmaCoreMiscHttpUrlHttpMethod, PUT))) isEqual:method]) {
    JavaUtilStringTokenizer *st = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(url, @"?");
    request = [st nextToken];
    if ([url java_contains:@"?"]) {
      urlParameters = [st nextToken];
    }
  }
  
#line 198
  JavaNetURL *uri = new_JavaNetURL_initWithNSString_(request != nil ? request : url);
  
#line 200
  IOSByteArray *data;
  @try {
    JavaNetHttpURLConnection *conn;
    if ([((EsGobAfirmaCoreMiscPlatform_OS *) nil_chk(JreLoadEnum(EsGobAfirmaCoreMiscPlatform_OS, ANDROID))) isEqual:EsGobAfirmaCoreMiscPlatform_getOS()] || EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_isLocalWithJavaNetURL_(uri)) {
      conn = (JavaNetHttpURLConnection *) cast_chk([uri openConnectionWithJavaNetProxy:JreLoadStatic(JavaNetProxy, NO_PROXY)], [JavaNetHttpURLConnection class]);
    }
    else {
      conn = (JavaNetHttpURLConnection *) cast_chk([uri openConnection], [JavaNetHttpURLConnection class]);
    }
    
#line 210
    jboolean needDisableSslChecks = sslConfig == nil && JavaLangBoolean_parseBooleanWithNSString_(JavaLangSystem_getPropertyWithNSString_withNSString_(
#line 211
    EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_JAVA_PARAM_DISABLE_SSL_CHECKS, @"false"));
    jboolean isSecureDomain = EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_checkIsSecureDomainWithJavaNetURL_(uri);
    
#line 218
    if ([conn isKindOfClass:[JavaxNetSslHttpsURLConnection class]]) {
      if (needDisableSslChecks || isSecureDomain) {
        @try {
          EsGobAfirmaCoreMiscHttpSslSecurityManager_disableSslChecksWithJavaxNetSslHttpsURLConnection_((JavaxNetSslHttpsURLConnection *) conn);
          [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_LOGGER)) infoWithNSString:JreStrcat("$$", @"Deshabilitada la comprobacion SSL para el acceso al dominio: ", [uri getHost])];
        }
        @catch (JavaLangException *e) {
          [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_LOGGER)) warningWithNSString:JreStrcat("$@", @"No se ha podido ajustar la confianza SSL, es posible que no se pueda completar la conexion: ", e)];
        }
      }
      else if (sslConfig != nil) {
        EsGobAfirmaCoreMiscHttpSslSecurityManager_setSslSecurityWithJavaxNetSslHttpsURLConnection_withEsGobAfirmaCoreMiscHttpSSLConfig_((JavaxNetSslHttpsURLConnection *) conn, sslConfig);
      }
    }
    
#line 233
    [((JavaNetHttpURLConnection *) nil_chk(conn)) setUseCachesWithBoolean:false];
    [conn setDefaultUseCachesWithBoolean:false];
    
#line 236
    [conn setRequestMethodWithNSString:[((EsGobAfirmaCoreMiscHttpUrlHttpMethod *) nil_chk(method)) description]];
    
#line 241
    JavaUtilProperties *headers = new_JavaUtilProperties_init();
    if (requestProperties != nil) {
      [headers putAllWithJavaUtilMap:requestProperties];
    }
    
#line 246
    if (authString != nil && ![headers containsKeyWithId:@"Authorization"]) {
      [conn addRequestPropertyWithNSString:@"Authorization" withNSString:JreStrcat("$$", @"Basic ", authString)];
    }
    if (![headers containsKeyWithId:EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_ACCEPT]) {
      [conn addRequestPropertyWithNSString:EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_ACCEPT withNSString:@"*/*"];
    }
    if (![headers containsKeyWithId:@"Connection"]) {
      [conn addRequestPropertyWithNSString:@"Connection" withNSString:@"keep-alive"];
    }
    if (![headers containsKeyWithId:@"Host"]) {
      [conn addRequestPropertyWithNSString:@"Host" withNSString:[uri getHost]];
    }
    if (![headers containsKeyWithId:@"Origin"]) {
      [conn addRequestPropertyWithNSString:@"Origin" withNSString:JreStrcat("$$$", [uri getProtocol], @"://", [uri getHost])];
    }
    
#line 263
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([headers entrySet])) {
      [conn addRequestPropertyWithNSString:(NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [NSString class]) withNSString:(NSString *) cast_chk([entry_ getValue], [NSString class])];
    }
    
#line 267
    if (urlParameters != nil) {
      [conn setRequestPropertyWithNSString:
#line 269
      @"Content-Length" withNSString:NSString_java_valueOfInt_(((IOSByteArray *) nil_chk([urlParameters java_getBytesWithCharset:JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8)]))->size_)];
      
#line 271
      [conn setDoOutputWithBoolean:true];
      {
        JavaIoOutputStream *os = [conn getOutputStream];
        JavaLangThrowable *__primaryException1 = nil;
        
#line 272
        @try {
          
#line 275
          [((JavaIoOutputStream *) nil_chk(os)) writeWithByteArray:[urlParameters java_getBytesWithCharset:JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8)]];
        }
        @catch (JavaLangThrowable *e) {
          __primaryException1 = e;
          @throw e;
        }
        @finally {
          if (os != nil) {
            if (__primaryException1 != nil) {
              @try {
                [os close];
              }
              @catch (JavaLangThrowable *e) {
                [__primaryException1 addSuppressedWithJavaLangThrowable:e];
              }
            }
            else {
              [os close];
            }
          }
        }
      }
    }
    
#line 280
    if (timeout != EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_DEFAULT_TIMEOUT) {
      [conn setConnectTimeoutWithInt:timeout];
    }
    
#line 284
    [conn connect];
    jint resCode = [conn getResponseCode];
    NSString *statusCode = JavaLangInteger_toStringWithInt_(resCode);
    if ([((NSString *) nil_chk(statusCode)) java_hasPrefix:@"4"] || [statusCode java_hasPrefix:@"5"]) {
      @throw new_EsGobAfirmaCoreMiscHttpHttpError_initWithInt_withNSString_withByteArray_withNSString_(
#line 289
      resCode,
#line 290
      [conn getResponseMessage], EsGobAfirmaCoreMiscAOUtil_getDataFromInputStreamWithJavaIoInputStream_(
#line 292
      [conn getErrorStream]),
#line 294
      url);
    }
    {
      JavaIoInputStream *is =
#line 298
      [conn getInputStream];
      JavaLangThrowable *__primaryException1 = nil;
      
#line 298
      @try {
        data = EsGobAfirmaCoreMiscAOUtil_getDataFromInputStreamWithJavaIoInputStream_(is);
      }
      @catch (JavaLangThrowable *e) {
        __primaryException1 = e;
        @throw e;
      }
      @finally {
        if (is != nil) {
          if (__primaryException1 != nil) {
            @try {
              [is close];
            }
            @catch (JavaLangThrowable *e) {
              [__primaryException1 addSuppressedWithJavaLangThrowable:e];
            }
          }
          else {
            [is close];
          }
        }
      }
    }
  }
  @catch (
#line 302
  JavaIoIOException *e) {
    if (httpProcessor != nil) {
      [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$@", @"Fallo la conexion pero intentamos recuperarla: ", e)];
      return [httpProcessor processHttpErrorWithJavaIoIOException:e withEsGobAfirmaCoreMiscHttpUrlHttpManager:self withNSString:url withInt:timeout withEsGobAfirmaCoreMiscHttpUrlHttpMethod:method withJavaUtilProperties:requestProperties];
    }
    
#line 308
    @throw e;
  }
  
#line 311
  return data;
}


#line 320
+ (jboolean)isLocalWithJavaNetURL:(JavaNetURL *)url {
  return EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_isLocalWithJavaNetURL_(url);
}


#line 340
+ (jboolean)checkIsSecureDomainWithJavaNetURL:(JavaNetURL *)url {
  return EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_checkIsSecureDomainWithJavaNetURL_(url);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 3, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 4, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 5, 2, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 8, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 9, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 10, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 11, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 12, 2, -1, -1, -1 },
    { NULL, "Z", 0xa, 13, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 15, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readUrlWithNSString:withEsGobAfirmaCoreMiscHttpUrlHttpMethod:);
  methods[2].selector = @selector(readUrlWithNSString:withEsGobAfirmaCoreMiscHttpUrlHttpMethod:withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:);
  methods[3].selector = @selector(readUrlWithNSString:withEsGobAfirmaCoreMiscHttpUrlHttpMethod:withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:withEsGobAfirmaCoreMiscHttpSSLConfig:);
  methods[4].selector = @selector(readUrlWithNSString:withInt:withNSString:withNSString:withEsGobAfirmaCoreMiscHttpUrlHttpMethod:);
  methods[5].selector = @selector(buildHeadersWithNSString:withNSString:);
  methods[6].selector = @selector(readUrlWithNSString:withInt:withNSString:withNSString:withEsGobAfirmaCoreMiscHttpUrlHttpMethod:withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:);
  methods[7].selector = @selector(readUrlWithNSString:withInt:withEsGobAfirmaCoreMiscHttpUrlHttpMethod:withJavaUtilProperties:);
  methods[8].selector = @selector(readUrlWithNSString:withInt:withEsGobAfirmaCoreMiscHttpUrlHttpMethod:withJavaUtilProperties:withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:);
  methods[9].selector = @selector(readUrlWithNSString:withInt:withNSString:withNSString:withEsGobAfirmaCoreMiscHttpUrlHttpMethod:withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:withEsGobAfirmaCoreMiscHttpSSLConfig:);
  methods[10].selector = @selector(readUrlWithNSString:withInt:withEsGobAfirmaCoreMiscHttpUrlHttpMethod:withJavaUtilProperties:withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:withEsGobAfirmaCoreMiscHttpSSLConfig:);
  methods[11].selector = @selector(isLocalWithJavaNetURL:);
  methods[12].selector = @selector(checkIsSecureDomainWithJavaNetURL:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "JAVA_PARAM_DISABLE_SSL_CHECKS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "JAVA_PARAM_SECURE_DOMAINS_LIST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
    { "DEFAULT_TIMEOUT", "I", .constantValue.asInt = EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_DEFAULT_TIMEOUT, 0x19, -1, -1, -1, -1 },
    { "URN_SEPARATOR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "PROT_SEPARATOR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "ACCEPT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
  };
  static const void *ptrTable[] = { "readUrl", "LNSString;LEsGobAfirmaCoreMiscHttpUrlHttpMethod;", "LJavaIoIOException;", "LNSString;LEsGobAfirmaCoreMiscHttpUrlHttpMethod;LEsGobAfirmaCoreMiscHttpHttpErrorProcessor;", "LNSString;LEsGobAfirmaCoreMiscHttpUrlHttpMethod;LEsGobAfirmaCoreMiscHttpHttpErrorProcessor;LEsGobAfirmaCoreMiscHttpSSLConfig;", "LNSString;ILNSString;LNSString;LEsGobAfirmaCoreMiscHttpUrlHttpMethod;", "buildHeaders", "LNSString;LNSString;", "LNSString;ILNSString;LNSString;LEsGobAfirmaCoreMiscHttpUrlHttpMethod;LEsGobAfirmaCoreMiscHttpHttpErrorProcessor;", "LNSString;ILEsGobAfirmaCoreMiscHttpUrlHttpMethod;LJavaUtilProperties;", "LNSString;ILEsGobAfirmaCoreMiscHttpUrlHttpMethod;LJavaUtilProperties;LEsGobAfirmaCoreMiscHttpHttpErrorProcessor;", "LNSString;ILNSString;LNSString;LEsGobAfirmaCoreMiscHttpUrlHttpMethod;LEsGobAfirmaCoreMiscHttpHttpErrorProcessor;LEsGobAfirmaCoreMiscHttpSSLConfig;", "LNSString;ILEsGobAfirmaCoreMiscHttpUrlHttpMethod;LJavaUtilProperties;LEsGobAfirmaCoreMiscHttpHttpErrorProcessor;LEsGobAfirmaCoreMiscHttpSSLConfig;", "isLocal", "LJavaNetURL;", "checkIsSecureDomain", &EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_LOGGER, &EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_JAVA_PARAM_DISABLE_SSL_CHECKS, &EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_JAVA_PARAM_SECURE_DOMAINS_LIST, &EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_URN_SEPARATOR, &EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_PROT_SEPARATOR, &EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_ACCEPT };
  static const J2ObjcClassInfo _EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl = { "UrlHttpManagerImpl", "es.gob.afirma.core.misc.http", ptrTable, methods, fields, 7, 0x1, 13, 7, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl;
}

+ (void)initialize {
  if (self == [EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl class]) {
    EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 40
    @"es.gob.afirma");
    {
      
#line 61
      JavaNetCookieManager *cookieManager = new_JavaNetCookieManager_init();
      [cookieManager setCookiePolicyWithJavaNetCookiePolicy:JreLoadStatic(JavaNetCookiePolicy, ACCEPT_ALL)];
      JavaNetCookieHandler_setDefaultWithJavaNetCookieHandler_(cookieManager);
    }
    J2OBJC_SET_INITIALIZED(EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl)
  }
}

@end


#line 67
void EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_init(EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl *self) {
  NSObject_init(self);
}


#line 67
EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl *new_EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl, init)
}


#line 67
EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl *create_EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl, init)
}


#line 96
JavaUtilProperties *EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_buildHeadersWithNSString_withNSString_(NSString *contentType, NSString *accept) {
  EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_initialize();
  
#line 97
  JavaUtilProperties *headers = new_JavaUtilProperties_init();
  if (contentType != nil) {
    (void) [headers setPropertyWithNSString:@"Content-Type" withNSString:contentType];
  }
  if (accept != nil) {
    (void) [headers setPropertyWithNSString:EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_ACCEPT withNSString:accept];
  }
  return headers;
}


#line 320
jboolean EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_isLocalWithJavaNetURL_(JavaNetURL *url) {
  EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_initialize();
  
#line 321
  if (url == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"La URL no puede ser nula");
  }
  @try {
    return [((JavaNetInetAddress *) nil_chk(JavaNetInetAddress_getByNameWithNSString_([url getHost]))) isLoopbackAddress];
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_LOGGER)) warningWithNSString:JreStrcat("$@", @"Error comprobando si una URL es el bucle local: ", e)];
    return false;
  }
}


#line 340
jboolean EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_checkIsSecureDomainWithJavaNetURL_(JavaNetURL *url) {
  EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_initialize();
  NSString *secureDomainsList = JavaLangSystem_getPropertyWithNSString_(EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl_JAVA_PARAM_SECURE_DOMAINS_LIST);
  if (secureDomainsList != nil && ![secureDomainsList java_isEmpty]) {
    NSString *urlHost = [((JavaNetURL *) nil_chk(url)) getHost];
    IOSObjectArray *secureDomainsArray = [secureDomainsList java_split:@","];
    {
      IOSObjectArray *a__ =
#line 346
      secureDomainsArray;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *secureDomain = *b__++;
        
#line 348
        NSString *replSecureDomain = [((NSString *) nil_chk(secureDomain)) java_replace:@"*" withSequence:@""];
        if ([secureDomain java_hasPrefix:@"*"] && [secureDomain java_hasSuffix:@"*"]) {
          if ([((NSString *) nil_chk(urlHost)) java_contains:replSecureDomain]) {
            return true;
          }
        }
        else
#line 355
        if ([secureDomain java_hasPrefix:@"*"]) {
          if ([((NSString *) nil_chk(urlHost)) java_hasSuffix:replSecureDomain]) {
            return true;
          }
        }
        else
#line 361
        if ([secureDomain java_hasSuffix:@"*"]) {
          if ([((NSString *) nil_chk(urlHost)) java_hasPrefix:replSecureDomain]) {
            return true;
          }
        }
        else
#line 367
        if ([((NSString *) nil_chk(urlHost)) isEqual:replSecureDomain]) {
          return true;
        }
      }
    }
  }
  
#line 372
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreMiscHttpUrlHttpManagerImpl)
