//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/XfdfReader.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "XfdfReader.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Stack.h"

#if !__has_feature(objc_arc)
#error "XfdfReader must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfXfdfReader () {
 @public
  jboolean foundRoot_;
  JavaUtilStack *fieldNames_;
  JavaUtilStack *fieldValues_;
  JavaUtilHashMap *fields_;
  /*!
   @brief Storage for field values if there's more than one value for a field.
   @since 2.1.4
   */
  JavaUtilHashMap *listFields_;
  NSString *fileSpec_;
}

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfXfdfReader, fieldNames_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfXfdfReader, fieldValues_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfXfdfReader, fields_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfXfdfReader, listFields_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfXfdfReader, fileSpec_, NSString *)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/XfdfReader.java"


#line 63
@implementation ComAowagieTextPdfXfdfReader


#line 63
- (instancetype)initPackagePrivate {
  ComAowagieTextPdfXfdfReader_initPackagePrivate(self);
  return self;
}


#line 89
- (JavaUtilHashMap *)getFields {
  return self->fields_;
}


#line 100
- (NSString *)getFieldValueWithNSString:(NSString *)name {
  NSString *field = (NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(self->fields_)) getWithId:name], [NSString class]);
  if (field == nil) {
    return nil;
  }
  else {
    
#line 105
    return field;
  }
}


#line 116
- (id<JavaUtilList>)getListValuesWithNSString:(NSString *)name {
  return (id<JavaUtilList>) cast_check([((JavaUtilHashMap *) nil_chk(self->listFields_)) getWithId:name], JavaUtilList_class_());
}


#line 123
- (NSString *)getFileSpec {
  return self->fileSpec_;
}


#line 132
- (void)startElementWithNSString:(NSString *)tag
             withJavaUtilHashMap:(JavaUtilHashMap *)h {
  
#line 135
  if (!self->foundRoot_) {
    if (![((NSString *) nil_chk(tag)) isEqual:@"xfdf"]) {
      @throw new_JavaLangRuntimeException_initWithNSString_(@"Root element is not Bookmark.");
    }
    else {
      
#line 139
      self->foundRoot_ = true;
    }
  }
  
#line 143
  if ([((NSString *) nil_chk(tag)) isEqual:@"xfdf"]) {
  }
  else if ([tag isEqual:@"f"]) {
    self->fileSpec_ = (NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(h)) getWithId:@"href"], [NSString class]);
  }
  else
#line 147
  if ([tag isEqual:@"fields"]) {
    self->fields_ = new_JavaUtilLinkedHashMap_init();
    self->listFields_ = new_JavaUtilLinkedHashMap_init();
  }
  else
#line 150
  if ([tag isEqual:@"field"]) {
    NSString *fName = (NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(h)) getWithId:@"name"], [NSString class]);
    (void) [((JavaUtilStack *) nil_chk(self->fieldNames_)) pushWithId:fName];
  }
  else
#line 153
  if ([tag isEqual:@"value"]) {
    (void) [((JavaUtilStack *) nil_chk(self->fieldValues_)) pushWithId:@""];
  }
}


#line 161
- (void)endElementWithNSString:(NSString *)tag {
  
#line 163
  if ([((NSString *) nil_chk(tag)) isEqual:@"value"]) {
    NSString *fName = @"";
    for (jint k = 0; k < [((JavaUtilStack *) nil_chk(self->fieldNames_)) size]; ++k) {
      (void) JreStrAppendStrong(&fName, "C$", '.', (NSString *) cast_chk([self->fieldNames_ elementAtWithInt:k], [NSString class]));
    }
    if ([fName java_hasPrefix:@"."]) {
      fName = [fName java_substring:1];
    }
    NSString *fVal = (NSString *) cast_chk([((JavaUtilStack *) nil_chk(self->fieldValues_)) pop], [NSString class]);
    NSString *old = (NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(self->fields_)) putWithId:fName withId:fVal], [NSString class]);
    if (old != nil) {
      id<JavaUtilList> l = (id<JavaUtilList>) cast_check([((JavaUtilHashMap *) nil_chk(self->listFields_)) getWithId:fName], JavaUtilList_class_());
      if (l == nil) {
        l = new_JavaUtilArrayList_init();
        [l addWithId:old];
      }
      [l addWithId:fVal];
      (void) [((JavaUtilHashMap *) nil_chk(self->listFields_)) putWithId:fName withId:l];
    }
  }
  else if ([tag isEqual:@"field"]) {
    if (![((JavaUtilStack *) nil_chk(self->fieldNames_)) isEmpty]) {
      (void) [self->fieldNames_ pop];
    }
  }
}


#line 193
- (void)startDocument {
  
#line 196
  self->fileSpec_ = @"";
}


#line 201
- (void)endDocument {
}


#line 210
- (void)textWithNSString:(NSString *)str {
  
#line 213
  if ([((JavaUtilStack *) nil_chk(self->fieldNames_)) isEmpty] || [((JavaUtilStack *) nil_chk(self->fieldValues_)) isEmpty]) {
    return;
  }
  
#line 217
  NSString *val = (NSString *) cast_chk([((JavaUtilStack *) nil_chk(self->fieldValues_)) pop], [NSString class]);
  (void) JreStrAppendStrong(&val, "$", str);
  (void) [self->fieldValues_ pushWithId:val];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(getFields);
  methods[2].selector = @selector(getFieldValueWithNSString:);
  methods[3].selector = @selector(getListValuesWithNSString:);
  methods[4].selector = @selector(getFileSpec);
  methods[5].selector = @selector(startElementWithNSString:withJavaUtilHashMap:);
  methods[6].selector = @selector(endElementWithNSString:);
  methods[7].selector = @selector(startDocument);
  methods[8].selector = @selector(endDocument);
  methods[9].selector = @selector(textWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "foundRoot_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fieldNames_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fieldValues_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fields_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "listFields_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fileSpec_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getFieldValue", "LNSString;", "getListValues", "startElement", "LNSString;LJavaUtilHashMap;", "endElement", "text" };
  static const J2ObjcClassInfo _ComAowagieTextPdfXfdfReader = { "XfdfReader", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 10, 6, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfXfdfReader;
}

@end


#line 63
void ComAowagieTextPdfXfdfReader_initPackagePrivate(ComAowagieTextPdfXfdfReader *self) {
  NSObject_init(self);
  self->foundRoot_ = false;
  self->fieldNames_ = new_JavaUtilStack_init();
  self->fieldValues_ = new_JavaUtilStack_init();
}


#line 63
ComAowagieTextPdfXfdfReader *new_ComAowagieTextPdfXfdfReader_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfXfdfReader, initPackagePrivate)
}


#line 63
ComAowagieTextPdfXfdfReader *create_ComAowagieTextPdfXfdfReader_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfXfdfReader, initPackagePrivate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfXfdfReader)
