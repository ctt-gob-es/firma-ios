//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/x509/BCAttributeCertificateHolder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_BCAttributeCertificateHolder")
#ifdef RESTRICT_BCAttributeCertificateHolder
#define INCLUDE_ALL_BCAttributeCertificateHolder 0
#else
#define INCLUDE_ALL_BCAttributeCertificateHolder 1
#endif
#undef RESTRICT_BCAttributeCertificateHolder

#if !defined (OrgSpongycastleX509BCAttributeCertificateHolder_) && (INCLUDE_ALL_BCAttributeCertificateHolder || defined(INCLUDE_OrgSpongycastleX509BCAttributeCertificateHolder))
#define OrgSpongycastleX509BCAttributeCertificateHolder_

#define RESTRICT_JavaSecurityCertCertSelector 1
#define INCLUDE_JavaSecurityCertCertSelector 1
#include "java/security/cert/CertSelector.h"

#define RESTRICT_Selector 1
#define INCLUDE_OrgSpongycastleUtilSelector 1
#include "Selector.h"

@class IOSByteArray;
@class IOSObjectArray;
@class JavaMathBigInteger;
@class JavaSecurityCertCertificate;
@class JavaSecurityCertX509Certificate;
@class JavaxSecurityAuthX500X500Principal;
@class OrgSpongycastleAsn1ASN1Sequence;
@class OrgSpongycastleAsn1X509Holder;
@class OrgSpongycastleJceX509Principal;

/*!
 @brief The Holder object.
 @code

           Holder ::= SEQUENCE {
                 baseCertificateID   [0] IssuerSerial OPTIONAL,
                          -- the issuer and serial number of
                          -- the holder's Public Key Certificate
                 entityName          [1] GeneralNames OPTIONAL,
                          -- the name of the claimant or role
                 objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
                          -- used to directly authenticate the holder,
                          -- for example, an executable
           } 
  
@endcode
 */
@interface OrgSpongycastleX509BCAttributeCertificateHolder : NSObject < JavaSecurityCertCertSelector, OrgSpongycastleUtilSelector > {
 @public
  OrgSpongycastleAsn1X509Holder *holder_;
}

#pragma mark Public

/*!
 @brief Constructs a holder for v2 attribute certificates with a hash value for
  some type of object.
 <p>
  <code>digestedObjectType</code> can be one of the following: 
 <ul>
  <li>0 - publicKey - A hash of the public key of the holder must be
  passed. 
 <li>1 - publicKeyCert - A hash of the public key certificate of the
  holder must be passed. 
 <li>2 - otherObjectDigest - A hash of some other object type must be
  passed. <code>otherObjectTypeID</code> must not be empty. 
 </ul>
  <p>
  This cannot be used if a v1 attribute certificate is used.
 @param digestedObjectType The digest object type.
 @param digestAlgorithm The algorithm identifier for the hash.
 @param otherObjectTypeID The object type ID if             
  <code> digestedObjectType </code>  is             
  <code> otherObjectDigest </code> .
 @param objectDigest The hash value.
 */
- (instancetype)initWithInt:(jint)digestedObjectType
               withNSString:(NSString *)digestAlgorithm
               withNSString:(NSString *)otherObjectTypeID
              withByteArray:(IOSByteArray *)objectDigest;

- (instancetype)initWithJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)principal;

- (instancetype)initWithJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)issuerName
                                    withJavaMathBigInteger:(JavaMathBigInteger *)serialNumber;

- (instancetype)initWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

- (instancetype)initWithOrgSpongycastleJceX509Principal:(OrgSpongycastleJceX509Principal *)principal;

- (instancetype)initWithOrgSpongycastleJceX509Principal:(OrgSpongycastleJceX509Principal *)issuerName
                                 withJavaMathBigInteger:(JavaMathBigInteger *)serialNumber;

- (id)java_clone;

- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns the other object type ID if an object digest info is used.
 @return The other object type ID or <code>null</code> if no object
          digest info is set.
 */
- (NSString *)getDigestAlgorithm;

/*!
 @brief Returns the digest object type if an object digest info is used.
 <p>
  <ul>
  <li>0 - publicKey - A hash of the public key of the holder must be
  passed. 
 <li>1 - publicKeyCert - A hash of the public key certificate of the
  holder must be passed. 
 <li>2 - otherObjectDigest - A hash of some other object type must be
  passed. <code>otherObjectTypeID</code> must not be empty. 
 </ul>
 @return The digest object type or -1 if no object digest info is set.
 */
- (jint)getDigestedObjectType;

/*!
 @brief Return any principal objects inside the attribute certificate holder
  entity names field.
 @return an array of Principal objects (usually X500Principal), null if no
          entity names field is set.
 */
- (IOSObjectArray *)getEntityNames;

/*!
 @brief Return the principals associated with the issuer attached to this holder
 @return an array of principals, null if no BaseCertificateID is set.
 */
- (IOSObjectArray *)getIssuer;

/*!
 @brief Returns the hash if an object digest info is used.
 @return The hash or <code>null</code> if no object digest info is set.
 */
- (IOSByteArray *)getObjectDigest;

/*!
 @brief Returns the digest algorithm ID if an object digest info is used.
 @return The digest algorithm ID or <code>null</code> if no object
          digest info is set.
 */
- (NSString *)getOtherObjectTypeID;

/*!
 @brief Return the serial number associated with the issuer attached to this
  holder.
 @return the certificate serial number, null if no BaseCertificateID is
          set.
 */
- (JavaMathBigInteger *)getSerialNumber;

- (NSUInteger)hash;

- (jboolean)matchWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert;

- (jboolean)matchWithId:(id)obj;

#pragma mark Package-Private

- (instancetype)initWithOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)seq;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleX509BCAttributeCertificateHolder)

J2OBJC_FIELD_SETTER(OrgSpongycastleX509BCAttributeCertificateHolder, holder_, OrgSpongycastleAsn1X509Holder *)

FOUNDATION_EXPORT void OrgSpongycastleX509BCAttributeCertificateHolder_initWithOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleX509BCAttributeCertificateHolder *self, OrgSpongycastleAsn1ASN1Sequence *seq);

FOUNDATION_EXPORT OrgSpongycastleX509BCAttributeCertificateHolder *new_OrgSpongycastleX509BCAttributeCertificateHolder_initWithOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleX509BCAttributeCertificateHolder *create_OrgSpongycastleX509BCAttributeCertificateHolder_initWithOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1ASN1Sequence *seq);

FOUNDATION_EXPORT void OrgSpongycastleX509BCAttributeCertificateHolder_initWithOrgSpongycastleJceX509Principal_withJavaMathBigInteger_(OrgSpongycastleX509BCAttributeCertificateHolder *self, OrgSpongycastleJceX509Principal *issuerName, JavaMathBigInteger *serialNumber);

FOUNDATION_EXPORT OrgSpongycastleX509BCAttributeCertificateHolder *new_OrgSpongycastleX509BCAttributeCertificateHolder_initWithOrgSpongycastleJceX509Principal_withJavaMathBigInteger_(OrgSpongycastleJceX509Principal *issuerName, JavaMathBigInteger *serialNumber) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleX509BCAttributeCertificateHolder *create_OrgSpongycastleX509BCAttributeCertificateHolder_initWithOrgSpongycastleJceX509Principal_withJavaMathBigInteger_(OrgSpongycastleJceX509Principal *issuerName, JavaMathBigInteger *serialNumber);

FOUNDATION_EXPORT void OrgSpongycastleX509BCAttributeCertificateHolder_initWithJavaxSecurityAuthX500X500Principal_withJavaMathBigInteger_(OrgSpongycastleX509BCAttributeCertificateHolder *self, JavaxSecurityAuthX500X500Principal *issuerName, JavaMathBigInteger *serialNumber);

FOUNDATION_EXPORT OrgSpongycastleX509BCAttributeCertificateHolder *new_OrgSpongycastleX509BCAttributeCertificateHolder_initWithJavaxSecurityAuthX500X500Principal_withJavaMathBigInteger_(JavaxSecurityAuthX500X500Principal *issuerName, JavaMathBigInteger *serialNumber) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleX509BCAttributeCertificateHolder *create_OrgSpongycastleX509BCAttributeCertificateHolder_initWithJavaxSecurityAuthX500X500Principal_withJavaMathBigInteger_(JavaxSecurityAuthX500X500Principal *issuerName, JavaMathBigInteger *serialNumber);

FOUNDATION_EXPORT void OrgSpongycastleX509BCAttributeCertificateHolder_initWithJavaSecurityCertX509Certificate_(OrgSpongycastleX509BCAttributeCertificateHolder *self, JavaSecurityCertX509Certificate *cert);

FOUNDATION_EXPORT OrgSpongycastleX509BCAttributeCertificateHolder *new_OrgSpongycastleX509BCAttributeCertificateHolder_initWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *cert) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleX509BCAttributeCertificateHolder *create_OrgSpongycastleX509BCAttributeCertificateHolder_initWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *cert);

FOUNDATION_EXPORT void OrgSpongycastleX509BCAttributeCertificateHolder_initWithOrgSpongycastleJceX509Principal_(OrgSpongycastleX509BCAttributeCertificateHolder *self, OrgSpongycastleJceX509Principal *principal);

FOUNDATION_EXPORT OrgSpongycastleX509BCAttributeCertificateHolder *new_OrgSpongycastleX509BCAttributeCertificateHolder_initWithOrgSpongycastleJceX509Principal_(OrgSpongycastleJceX509Principal *principal) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleX509BCAttributeCertificateHolder *create_OrgSpongycastleX509BCAttributeCertificateHolder_initWithOrgSpongycastleJceX509Principal_(OrgSpongycastleJceX509Principal *principal);

FOUNDATION_EXPORT void OrgSpongycastleX509BCAttributeCertificateHolder_initWithJavaxSecurityAuthX500X500Principal_(OrgSpongycastleX509BCAttributeCertificateHolder *self, JavaxSecurityAuthX500X500Principal *principal);

FOUNDATION_EXPORT OrgSpongycastleX509BCAttributeCertificateHolder *new_OrgSpongycastleX509BCAttributeCertificateHolder_initWithJavaxSecurityAuthX500X500Principal_(JavaxSecurityAuthX500X500Principal *principal) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleX509BCAttributeCertificateHolder *create_OrgSpongycastleX509BCAttributeCertificateHolder_initWithJavaxSecurityAuthX500X500Principal_(JavaxSecurityAuthX500X500Principal *principal);

FOUNDATION_EXPORT void OrgSpongycastleX509BCAttributeCertificateHolder_initWithInt_withNSString_withNSString_withByteArray_(OrgSpongycastleX509BCAttributeCertificateHolder *self, jint digestedObjectType, NSString *digestAlgorithm, NSString *otherObjectTypeID, IOSByteArray *objectDigest);

FOUNDATION_EXPORT OrgSpongycastleX509BCAttributeCertificateHolder *new_OrgSpongycastleX509BCAttributeCertificateHolder_initWithInt_withNSString_withNSString_withByteArray_(jint digestedObjectType, NSString *digestAlgorithm, NSString *otherObjectTypeID, IOSByteArray *objectDigest) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleX509BCAttributeCertificateHolder *create_OrgSpongycastleX509BCAttributeCertificateHolder_initWithInt_withNSString_withNSString_withByteArray_(jint digestedObjectType, NSString *digestAlgorithm, NSString *otherObjectTypeID, IOSByteArray *objectDigest);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleX509BCAttributeCertificateHolder)

#endif

#pragma pop_macro("INCLUDE_ALL_BCAttributeCertificateHolder")
