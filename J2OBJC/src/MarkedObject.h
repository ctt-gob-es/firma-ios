//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/MarkedObject.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_MarkedObject")
#ifdef RESTRICT_MarkedObject
#define INCLUDE_ALL_MarkedObject 0
#else
#define INCLUDE_ALL_MarkedObject 1
#endif
#undef RESTRICT_MarkedObject

#if !defined (ComAowagieTextMarkedObject_) && (INCLUDE_ALL_MarkedObject || defined(INCLUDE_ComAowagieTextMarkedObject))
#define ComAowagieTextMarkedObject_

#define RESTRICT_Element 1
#define INCLUDE_ComAowagieTextElement 1
#include "Element.h"

@class JavaUtilArrayList;
@class JavaUtilProperties;
@protocol ComAowagieTextElementListener;

/*!
 @brief Wrapper that allows to add properties to 'basic building block' objects.
 Before iText 1.5 every 'basic building block' implemented the MarkupAttributes interface.
  By setting attributes, you could add markup to the corresponding XML and/or HTML tag.
  This functionality was hardly used by anyone, so it was removed, and replaced by
  the MarkedObject functionality.
 */
@interface ComAowagieTextMarkedObject : NSObject < ComAowagieTextElement > {
 @public
  /*!
   @brief The element that is wrapped in a MarkedObject.
   */
  id<ComAowagieTextElement> element_;
  /*!
   @brief Contains extra markupAttributes
   */
  JavaUtilProperties *markupAttributes_;
}

#pragma mark Public

/*!
 @brief Gets all the chunks in this element.
 @return an <CODE>ArrayList</CODE>
 */
- (JavaUtilArrayList *)getChunks;

/*!
 @brief Getter for the markup attributes.
 @return the markupAttributes
 */
- (JavaUtilProperties *)getMarkupAttributes;

/*!
 - seealso: com.aowagie.text.Element#isContent()
 @since iText 2.0.8
 */
- (jboolean)isContent;

/*!
 - seealso: com.aowagie.text.Element#isNestable()
 @since iText 2.0.8
 */
- (jboolean)isNestable;

/*!
 @brief Processes the element by adding it (or the different parts) to an 
 <CODE>ElementListener</CODE>.
 @param listener an  <CODE> ElementListener </CODE>
 @return <CODE>true</CODE> if the element was processed successfully
 */
- (jboolean)processWithComAowagieTextElementListener:(id<ComAowagieTextElementListener>)listener;

/*!
 @brief Gets the type of the text element.
 @return a type
 */
- (jint)type;

#pragma mark Protected

/*!
 @brief This constructor is for internal use only.
 */
- (instancetype)initPackagePrivate;

#pragma mark Package-Private

/*!
 @brief Creates a MarkedObject.
 @param element Element
 */
- (instancetype)initPackagePrivateWithComAowagieTextElement:(id<ComAowagieTextElement>)element;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextMarkedObject)

J2OBJC_FIELD_SETTER(ComAowagieTextMarkedObject, element_, id<ComAowagieTextElement>)
J2OBJC_FIELD_SETTER(ComAowagieTextMarkedObject, markupAttributes_, JavaUtilProperties *)

FOUNDATION_EXPORT void ComAowagieTextMarkedObject_initPackagePrivate(ComAowagieTextMarkedObject *self);

FOUNDATION_EXPORT ComAowagieTextMarkedObject *new_ComAowagieTextMarkedObject_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextMarkedObject *create_ComAowagieTextMarkedObject_initPackagePrivate(void);

FOUNDATION_EXPORT void ComAowagieTextMarkedObject_initPackagePrivateWithComAowagieTextElement_(ComAowagieTextMarkedObject *self, id<ComAowagieTextElement> element);

FOUNDATION_EXPORT ComAowagieTextMarkedObject *new_ComAowagieTextMarkedObject_initPackagePrivateWithComAowagieTextElement_(id<ComAowagieTextElement> element) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextMarkedObject *create_ComAowagieTextMarkedObject_initPackagePrivateWithComAowagieTextElement_(id<ComAowagieTextElement> element);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextMarkedObject)

#endif

#pragma pop_macro("INCLUDE_ALL_MarkedObject")
