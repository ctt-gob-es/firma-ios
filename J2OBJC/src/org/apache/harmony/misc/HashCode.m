//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/apache/harmony/misc/HashCode.java
//

#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "org/apache/harmony/misc/HashCode.h"

#if !__has_feature(objc_arc)
#error "org/apache/harmony/misc/HashCode must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheHarmonyMiscHashCode () {
 @public
  jint hashCode_;
}

@end

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/apache/harmony/misc/HashCode.java"


#line 68
@implementation OrgApacheHarmonyMiscHashCode

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 68
- (instancetype)init {
  OrgApacheHarmonyMiscHashCode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 81
- (NSUInteger)hash {
  
#line 83
  return self->hashCode_;
}


#line 95
+ (jint)combineWithInt:(jint)hashCode
           withBoolean:(jboolean)value {
  return OrgApacheHarmonyMiscHashCode_combineWithInt_withBoolean_(hashCode, value);
}


#line 109
+ (jint)combineWithInt:(jint)hashCode
              withLong:(jlong)value {
  return OrgApacheHarmonyMiscHashCode_combineWithInt_withLong_(hashCode, value);
}


#line 123
+ (jint)combineWithInt:(jint)hashCode
             withFloat:(jfloat)value {
  return OrgApacheHarmonyMiscHashCode_combineWithInt_withFloat_(hashCode, value);
}


#line 137
+ (jint)combineWithInt:(jint)hashCode
            withDouble:(jdouble)value {
  return OrgApacheHarmonyMiscHashCode_combineWithInt_withDouble_(hashCode, value);
}


#line 151
+ (jint)combineWithInt:(jint)hashCode
                withId:(id)value {
  return OrgApacheHarmonyMiscHashCode_combineWithInt_withId_(hashCode, value);
}


#line 164
+ (jint)combineWithInt:(jint)hashCode
               withInt:(jint)value {
  return OrgApacheHarmonyMiscHashCode_combineWithInt_withInt_(hashCode, value);
}


#line 175
- (OrgApacheHarmonyMiscHashCode *)appendWithInt:(jint)value {
  self->hashCode_ = OrgApacheHarmonyMiscHashCode_combineWithInt_withInt_(self->hashCode_, value);
  return self;
}


#line 187
- (OrgApacheHarmonyMiscHashCode *)appendWithLong:(jlong)value {
  self->hashCode_ = OrgApacheHarmonyMiscHashCode_combineWithInt_withLong_(self->hashCode_, value);
  return self;
}


#line 199
- (OrgApacheHarmonyMiscHashCode *)appendWithFloat:(jfloat)value {
  self->hashCode_ = OrgApacheHarmonyMiscHashCode_combineWithInt_withFloat_(self->hashCode_, value);
  return self;
}


#line 211
- (OrgApacheHarmonyMiscHashCode *)appendWithDouble:(jdouble)value {
  self->hashCode_ = OrgApacheHarmonyMiscHashCode_combineWithInt_withDouble_(self->hashCode_, value);
  return self;
}


#line 223
- (OrgApacheHarmonyMiscHashCode *)appendWithBoolean:(jboolean)value {
  self->hashCode_ = OrgApacheHarmonyMiscHashCode_combineWithInt_withBoolean_(self->hashCode_, value);
  return self;
}


#line 235
- (OrgApacheHarmonyMiscHashCode *)appendWithId:(id)value {
  self->hashCode_ = OrgApacheHarmonyMiscHashCode_combineWithInt_withId_(self->hashCode_, value);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 0, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 1, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 1, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 1, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 1, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 1, 7, -1, -1, -1, -1 },
    { NULL, "LOrgApacheHarmonyMiscHashCode;", 0x11, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgApacheHarmonyMiscHashCode;", 0x11, 8, 10, -1, -1, -1, -1 },
    { NULL, "LOrgApacheHarmonyMiscHashCode;", 0x11, 8, 11, -1, -1, -1, -1 },
    { NULL, "LOrgApacheHarmonyMiscHashCode;", 0x11, 8, 12, -1, -1, -1, -1 },
    { NULL, "LOrgApacheHarmonyMiscHashCode;", 0x11, 8, 13, -1, -1, -1, -1 },
    { NULL, "LOrgApacheHarmonyMiscHashCode;", 0x11, 8, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(hash);
  methods[2].selector = @selector(combineWithInt:withBoolean:);
  methods[3].selector = @selector(combineWithInt:withLong:);
  methods[4].selector = @selector(combineWithInt:withFloat:);
  methods[5].selector = @selector(combineWithInt:withDouble:);
  methods[6].selector = @selector(combineWithInt:withId:);
  methods[7].selector = @selector(combineWithInt:withInt:);
  methods[8].selector = @selector(appendWithInt:);
  methods[9].selector = @selector(appendWithLong:);
  methods[10].selector = @selector(appendWithFloat:);
  methods[11].selector = @selector(appendWithDouble:);
  methods[12].selector = @selector(appendWithBoolean:);
  methods[13].selector = @selector(appendWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_HASH_CODE", "I", .constantValue.asInt = OrgApacheHarmonyMiscHashCode_EMPTY_HASH_CODE, 0x19, -1, -1, -1, -1 },
    { "hashCode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "hashCode", "combine", "IZ", "IJ", "IF", "ID", "ILNSObject;", "II", "append", "I", "J", "F", "D", "Z", "LNSObject;" };
  static const J2ObjcClassInfo _OrgApacheHarmonyMiscHashCode = { "HashCode", "org.apache.harmony.misc", ptrTable, methods, fields, 7, 0x11, 14, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheHarmonyMiscHashCode;
}

@end


#line 68
void OrgApacheHarmonyMiscHashCode_init(OrgApacheHarmonyMiscHashCode *self) {
  NSObject_init(self);
  self->hashCode_ = OrgApacheHarmonyMiscHashCode_EMPTY_HASH_CODE;
}


#line 68
OrgApacheHarmonyMiscHashCode *new_OrgApacheHarmonyMiscHashCode_init() {
  J2OBJC_NEW_IMPL(OrgApacheHarmonyMiscHashCode, init)
}


#line 68
OrgApacheHarmonyMiscHashCode *create_OrgApacheHarmonyMiscHashCode_init() {
  J2OBJC_CREATE_IMPL(OrgApacheHarmonyMiscHashCode, init)
}


#line 95
jint OrgApacheHarmonyMiscHashCode_combineWithInt_withBoolean_(jint hashCode, jboolean value) {
  OrgApacheHarmonyMiscHashCode_initialize();
  
#line 96
  jint v = value ? 1231 : 1237;
  return OrgApacheHarmonyMiscHashCode_combineWithInt_withInt_(hashCode, v);
}


#line 109
jint OrgApacheHarmonyMiscHashCode_combineWithInt_withLong_(jint hashCode, jlong value) {
  OrgApacheHarmonyMiscHashCode_initialize();
  
#line 110
  jint v = (jint) (value ^ JreURShift64(value, 32));
  return OrgApacheHarmonyMiscHashCode_combineWithInt_withInt_(hashCode, v);
}


#line 123
jint OrgApacheHarmonyMiscHashCode_combineWithInt_withFloat_(jint hashCode, jfloat value) {
  OrgApacheHarmonyMiscHashCode_initialize();
  
#line 124
  jint v = JavaLangFloat_floatToIntBitsWithFloat_(value);
  return OrgApacheHarmonyMiscHashCode_combineWithInt_withInt_(hashCode, v);
}


#line 137
jint OrgApacheHarmonyMiscHashCode_combineWithInt_withDouble_(jint hashCode, jdouble value) {
  OrgApacheHarmonyMiscHashCode_initialize();
  
#line 138
  jlong v = JavaLangDouble_doubleToLongBitsWithDouble_(value);
  return OrgApacheHarmonyMiscHashCode_combineWithInt_withLong_(hashCode, v);
}


#line 151
jint OrgApacheHarmonyMiscHashCode_combineWithInt_withId_(jint hashCode, id value) {
  OrgApacheHarmonyMiscHashCode_initialize();
  
#line 152
  return OrgApacheHarmonyMiscHashCode_combineWithInt_withInt_(hashCode, ((jint) [nil_chk(value) hash]));
}


#line 164
jint OrgApacheHarmonyMiscHashCode_combineWithInt_withInt_(jint hashCode, jint value) {
  OrgApacheHarmonyMiscHashCode_initialize();
  
#line 165
  return 31 * hashCode + value;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheHarmonyMiscHashCode)
