//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/apache/harmony/awt/gl/color/LUTColorConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "harmony/java/awt/color/ColorSpace.h"
#include "java/lang/Math.h"
#include "org/apache/harmony/awt/gl/color/LUTColorConverter.h"

#if !__has_feature(objc_arc)
#error "org/apache/harmony/awt/gl/color/LUTColorConverter must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheHarmonyAwtGlColorLUTColorConverter ()

+ (IOSByteArray *)createLUTWithInt:(jint)bits;

@end

inline IOSByteArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_get_from8lRGBtosRGB_LUT(void);
inline IOSByteArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_set_from8lRGBtosRGB_LUT(IOSByteArray *value);
static IOSByteArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_from8lRGBtosRGB_LUT;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheHarmonyAwtGlColorLUTColorConverter, from8lRGBtosRGB_LUT, IOSByteArray *)

inline IOSByteArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_get_from16lRGBtosRGB_LUT(void);
inline IOSByteArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_set_from16lRGBtosRGB_LUT(IOSByteArray *value);
static IOSByteArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_from16lRGBtosRGB_LUT;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheHarmonyAwtGlColorLUTColorConverter, from16lRGBtosRGB_LUT, IOSByteArray *)

inline IOSByteArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_get_fromsRGBto8lRGB_LUT(void);
inline IOSByteArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_set_fromsRGBto8lRGB_LUT(IOSByteArray *value);
static IOSByteArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto8lRGB_LUT;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheHarmonyAwtGlColorLUTColorConverter, fromsRGBto8lRGB_LUT, IOSByteArray *)

inline IOSShortArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_get_fromsRGBto16lRGB_LUT(void);
inline IOSShortArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_set_fromsRGBto16lRGB_LUT(IOSShortArray *value);
static IOSShortArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto16lRGB_LUT;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheHarmonyAwtGlColorLUTColorConverter, fromsRGBto16lRGB_LUT, IOSShortArray *)

inline IOSObjectArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_get_fromsRGBto8sRGB_LUTs(void);
inline IOSObjectArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_set_fromsRGBto8sRGB_LUTs(IOSObjectArray *value);
static IOSObjectArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto8sRGB_LUTs;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheHarmonyAwtGlColorLUTColorConverter, fromsRGBto8sRGB_LUTs, IOSObjectArray *)

__attribute__((unused)) static IOSByteArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_createLUTWithInt_(jint bits);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/apache/harmony/awt/gl/color/LUTColorConverter.java"

HarmonyJavaAwtColorColorSpace *OrgApacheHarmonyAwtGlColorLUTColorConverter_LINEAR_RGB_CS;
HarmonyJavaAwtColorColorSpace *OrgApacheHarmonyAwtGlColorLUTColorConverter_LINEAR_GRAY_CS;
HarmonyJavaAwtColorColorSpace *OrgApacheHarmonyAwtGlColorLUTColorConverter_sRGB_CS;


#line 28
@implementation OrgApacheHarmonyAwtGlColorLUTColorConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 46
- (instancetype)init {
  OrgApacheHarmonyAwtGlColorLUTColorConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 58
+ (IOSByteArray *)getFrom8lRGBtosRGB_LUT {
  return OrgApacheHarmonyAwtGlColorLUTColorConverter_getFrom8lRGBtosRGB_LUT();
}


#line 71
+ (IOSByteArray *)getFrom16lRGBtosRGB_LUT {
  return OrgApacheHarmonyAwtGlColorLUTColorConverter_getFrom16lRGBtosRGB_LUT();
}


#line 84
+ (IOSByteArray *)getFromsRGBto8lRGB_LUT {
  return OrgApacheHarmonyAwtGlColorLUTColorConverter_getFromsRGBto8lRGB_LUT();
}


#line 97
+ (IOSShortArray *)getFromsRGBto16lRGB_LUT {
  return OrgApacheHarmonyAwtGlColorLUTColorConverter_getFromsRGBto16lRGB_LUT();
}


#line 110
+ (IOSByteArray *)getsRGBLUTWithInt:(jint)bits {
  return OrgApacheHarmonyAwtGlColorLUTColorConverter_getsRGBLUTWithInt_(bits);
}


#line 123
+ (IOSByteArray *)createLUTWithInt:(jint)bits {
  return OrgApacheHarmonyAwtGlColorLUTColorConverter_createLUTWithInt_(bits);
}


#line 132
+ (jboolean)is_LINEAR_RGB_CSWithHarmonyJavaAwtColorColorSpace:(HarmonyJavaAwtColorColorSpace *)cs {
  return OrgApacheHarmonyAwtGlColorLUTColorConverter_is_LINEAR_RGB_CSWithHarmonyJavaAwtColorColorSpace_(cs);
}

+ (jboolean)is_LINEAR_GRAY_CSWithHarmonyJavaAwtColorColorSpace:(HarmonyJavaAwtColorColorSpace *)cs {
  return OrgApacheHarmonyAwtGlColorLUTColorConverter_is_LINEAR_GRAY_CSWithHarmonyJavaAwtColorColorSpace_(cs);
}

+ (jboolean)is_sRGB_CSWithHarmonyJavaAwtColorColorSpace:(HarmonyJavaAwtColorColorSpace *)cs {
  return OrgApacheHarmonyAwtGlColorLUTColorConverter_is_sRGB_CSWithHarmonyJavaAwtColorColorSpace_(cs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[S", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 6, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getFrom8lRGBtosRGB_LUT);
  methods[2].selector = @selector(getFrom16lRGBtosRGB_LUT);
  methods[3].selector = @selector(getFromsRGBto8lRGB_LUT);
  methods[4].selector = @selector(getFromsRGBto16lRGB_LUT);
  methods[5].selector = @selector(getsRGBLUTWithInt:);
  methods[6].selector = @selector(createLUTWithInt:);
  methods[7].selector = @selector(is_LINEAR_RGB_CSWithHarmonyJavaAwtColorColorSpace:);
  methods[8].selector = @selector(is_LINEAR_GRAY_CSWithHarmonyJavaAwtColorColorSpace:);
  methods[9].selector = @selector(is_sRGB_CSWithHarmonyJavaAwtColorColorSpace:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "from8lRGBtosRGB_LUT", "[B", .constantValue.asLong = 0, 0xa, -1, 7, -1, -1 },
    { "from16lRGBtosRGB_LUT", "[B", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
    { "fromsRGBto8lRGB_LUT", "[B", .constantValue.asLong = 0, 0xa, -1, 9, -1, -1 },
    { "fromsRGBto16lRGB_LUT", "[S", .constantValue.asLong = 0, 0xa, -1, 10, -1, -1 },
    { "fromsRGBto8sRGB_LUTs", "[[B", .constantValue.asLong = 0, 0xa, -1, 11, -1, -1 },
    { "LINEAR_RGB_CS", "LHarmonyJavaAwtColorColorSpace;", .constantValue.asLong = 0, 0x9, -1, 12, -1, -1 },
    { "LINEAR_GRAY_CS", "LHarmonyJavaAwtColorColorSpace;", .constantValue.asLong = 0, 0x9, -1, 13, -1, -1 },
    { "sRGB_CS", "LHarmonyJavaAwtColorColorSpace;", .constantValue.asLong = 0, 0x9, -1, 14, -1, -1 },
  };
  static const void *ptrTable[] = { "getsRGBLUT", "I", "createLUT", "is_LINEAR_RGB_CS", "LHarmonyJavaAwtColorColorSpace;", "is_LINEAR_GRAY_CS", "is_sRGB_CS", &OrgApacheHarmonyAwtGlColorLUTColorConverter_from8lRGBtosRGB_LUT, &OrgApacheHarmonyAwtGlColorLUTColorConverter_from16lRGBtosRGB_LUT, &OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto8lRGB_LUT, &OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto16lRGB_LUT, &OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto8sRGB_LUTs, &OrgApacheHarmonyAwtGlColorLUTColorConverter_LINEAR_RGB_CS, &OrgApacheHarmonyAwtGlColorLUTColorConverter_LINEAR_GRAY_CS, &OrgApacheHarmonyAwtGlColorLUTColorConverter_sRGB_CS };
  static const J2ObjcClassInfo _OrgApacheHarmonyAwtGlColorLUTColorConverter = { "LUTColorConverter", "org.apache.harmony.awt.gl.color", ptrTable, methods, fields, 7, 0x1, 10, 8, -1, -1, -1, -1, -1 };
  return &_OrgApacheHarmonyAwtGlColorLUTColorConverter;
}

@end


#line 46
void OrgApacheHarmonyAwtGlColorLUTColorConverter_init(OrgApacheHarmonyAwtGlColorLUTColorConverter *self) {
  NSObject_init(self);
}


#line 46
OrgApacheHarmonyAwtGlColorLUTColorConverter *new_OrgApacheHarmonyAwtGlColorLUTColorConverter_init() {
  J2OBJC_NEW_IMPL(OrgApacheHarmonyAwtGlColorLUTColorConverter, init)
}


#line 46
OrgApacheHarmonyAwtGlColorLUTColorConverter *create_OrgApacheHarmonyAwtGlColorLUTColorConverter_init() {
  J2OBJC_CREATE_IMPL(OrgApacheHarmonyAwtGlColorLUTColorConverter, init)
}


#line 58
IOSByteArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_getFrom8lRGBtosRGB_LUT() {
  OrgApacheHarmonyAwtGlColorLUTColorConverter_initialize();
  
#line 59
  if (OrgApacheHarmonyAwtGlColorLUTColorConverter_from8lRGBtosRGB_LUT == nil) {
    OrgApacheHarmonyAwtGlColorLUTColorConverter_from8lRGBtosRGB_LUT = [IOSByteArray newArrayWithLength:256];
    jfloat v;
    for (jint i = 0; i < 256; i++) {
      v = (jfloat) i / 255;
      v = (v <= 0.04045f) ? v / 12.92f : (jfloat) JavaLangMath_powWithDouble_withDouble_((v + 0.055) / 1.055, 2.4);
      *IOSByteArray_GetRef(nil_chk(OrgApacheHarmonyAwtGlColorLUTColorConverter_from8lRGBtosRGB_LUT), i) = (jbyte) JavaLangMath_roundWithFloat_(v * 255.0f);
    }
  }
  return OrgApacheHarmonyAwtGlColorLUTColorConverter_from8lRGBtosRGB_LUT;
}


#line 71
IOSByteArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_getFrom16lRGBtosRGB_LUT() {
  OrgApacheHarmonyAwtGlColorLUTColorConverter_initialize();
  
#line 72
  if (OrgApacheHarmonyAwtGlColorLUTColorConverter_from16lRGBtosRGB_LUT == nil) {
    OrgApacheHarmonyAwtGlColorLUTColorConverter_from16lRGBtosRGB_LUT = [IOSByteArray newArrayWithLength:65536];
    jfloat v;
    for (jint i = 0; i < 65536; i++) {
      v = (jfloat) i / 65535;
      v = (v <= 0.04045f) ? v / 12.92f : (jfloat) JavaLangMath_powWithDouble_withDouble_((v + 0.055) / 1.055, 2.4);
      *IOSByteArray_GetRef(nil_chk(OrgApacheHarmonyAwtGlColorLUTColorConverter_from16lRGBtosRGB_LUT), i) = (jbyte) JavaLangMath_roundWithFloat_(v * 255.0f);
    }
  }
  return OrgApacheHarmonyAwtGlColorLUTColorConverter_from16lRGBtosRGB_LUT;
}


#line 84
IOSByteArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_getFromsRGBto8lRGB_LUT() {
  OrgApacheHarmonyAwtGlColorLUTColorConverter_initialize();
  
#line 85
  if (OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto8lRGB_LUT == nil) {
    OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto8lRGB_LUT = [IOSByteArray newArrayWithLength:256];
    jfloat v;
    for (jint i = 0; i < 256; i++) {
      v = (jfloat) i / 255;
      v = (v <= 0.0031308f) ? v * 12.92f : ((jfloat) JavaLangMath_powWithDouble_withDouble_(v, 1.0 / 2.4)) * 1.055f - 0.055f;
      *IOSByteArray_GetRef(nil_chk(OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto8lRGB_LUT), i) = (jbyte) JavaLangMath_roundWithFloat_(v * 255.0f);
    }
  }
  return OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto8lRGB_LUT;
}


#line 97
IOSShortArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_getFromsRGBto16lRGB_LUT() {
  OrgApacheHarmonyAwtGlColorLUTColorConverter_initialize();
  
#line 98
  if (OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto16lRGB_LUT == nil) {
    OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto16lRGB_LUT = [IOSShortArray newArrayWithLength:256];
    jfloat v;
    for (jint i = 0; i < 256; i++) {
      v = (jfloat) i / 255;
      v = (v <= 0.0031308f) ? v * 12.92f : ((jfloat) JavaLangMath_powWithDouble_withDouble_(v, 1.0 / 2.4)) * 1.055f - 0.055f;
      *IOSShortArray_GetRef(nil_chk(OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto16lRGB_LUT), i) = (jshort) JavaLangMath_roundWithFloat_(v * 65535.0f);
    }
  }
  return OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto16lRGB_LUT;
}


#line 110
IOSByteArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_getsRGBLUTWithInt_(jint bits) {
  OrgApacheHarmonyAwtGlColorLUTColorConverter_initialize();
  
#line 111
  if (bits < 1)
#line 112
  return nil;
  jint idx = bits - 1;
  if (OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto8sRGB_LUTs == nil)
#line 115
  OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto8sRGB_LUTs = [IOSObjectArray newArrayWithLength:16 type:IOSClass_byteArray(1)];
  
#line 117
  if (IOSObjectArray_Get(OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto8sRGB_LUTs, idx) == nil) {
    (void) IOSObjectArray_Set(OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto8sRGB_LUTs, idx, OrgApacheHarmonyAwtGlColorLUTColorConverter_createLUTWithInt_(bits));
  }
  return IOSObjectArray_Get(nil_chk(OrgApacheHarmonyAwtGlColorLUTColorConverter_fromsRGBto8sRGB_LUTs), idx);
}


#line 123
IOSByteArray *OrgApacheHarmonyAwtGlColorLUTColorConverter_createLUTWithInt_(jint bits) {
  OrgApacheHarmonyAwtGlColorLUTColorConverter_initialize();
  
#line 124
  jint lutSize = (JreLShift32(1, bits));
  IOSByteArray *lut = [IOSByteArray newArrayWithLength:lutSize];
  for (jint i = 0; i < lutSize; i++) {
    *IOSByteArray_GetRef(lut, i) = (jbyte) JreFpToInt((255.0f / (lutSize - 1) + 0.5f));
  }
  return lut;
}


#line 132
jboolean OrgApacheHarmonyAwtGlColorLUTColorConverter_is_LINEAR_RGB_CSWithHarmonyJavaAwtColorColorSpace_(HarmonyJavaAwtColorColorSpace *cs) {
  OrgApacheHarmonyAwtGlColorLUTColorConverter_initialize();
  
#line 133
  return (JreObjectEqualsEquals(cs, OrgApacheHarmonyAwtGlColorLUTColorConverter_LINEAR_RGB_CS));
}


#line 136
jboolean OrgApacheHarmonyAwtGlColorLUTColorConverter_is_LINEAR_GRAY_CSWithHarmonyJavaAwtColorColorSpace_(HarmonyJavaAwtColorColorSpace *cs) {
  OrgApacheHarmonyAwtGlColorLUTColorConverter_initialize();
  
#line 137
  return (JreObjectEqualsEquals(cs, OrgApacheHarmonyAwtGlColorLUTColorConverter_LINEAR_GRAY_CS));
}


#line 140
jboolean OrgApacheHarmonyAwtGlColorLUTColorConverter_is_sRGB_CSWithHarmonyJavaAwtColorColorSpace_(HarmonyJavaAwtColorColorSpace *cs) {
  OrgApacheHarmonyAwtGlColorLUTColorConverter_initialize();
  
#line 141
  return (JreObjectEqualsEquals(cs, OrgApacheHarmonyAwtGlColorLUTColorConverter_sRGB_CS));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheHarmonyAwtGlColorLUTColorConverter)
