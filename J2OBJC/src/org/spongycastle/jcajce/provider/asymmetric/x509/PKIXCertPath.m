//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jcajce/provider/asymmetric/x509/PKIXCertPath.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/lang/Exception.h"
#include "java/security/NoSuchProviderException.h"
#include "java/security/cert/CertPath.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateEncodingException.h"
#include "java/security/cert/CertificateException.h"
#include "java/security/cert/CertificateFactory.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Enumeration.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "javax/security/auth/x500/X500Principal.h"
#include "org/spongycastle/asn1/ASN1Encodable.h"
#include "org/spongycastle/asn1/ASN1EncodableVector.h"
#include "org/spongycastle/asn1/ASN1Encoding.h"
#include "org/spongycastle/asn1/ASN1InputStream.h"
#include "org/spongycastle/asn1/ASN1Integer.h"
#include "org/spongycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/ASN1Sequence.h"
#include "org/spongycastle/asn1/DERSequence.h"
#include "org/spongycastle/asn1/DERSet.h"
#include "org/spongycastle/asn1/pkcs/BCContentInfo.h"
#include "org/spongycastle/asn1/pkcs/BCSignedData.h"
#include "org/spongycastle/asn1/pkcs/PKCSObjectIdentifiers.h"
#include "org/spongycastle/jcajce/provider/asymmetric/x509/PKIXCertPath.h"
#include "org/spongycastle/jcajce/util/BCJcaJceHelper.h"
#include "org/spongycastle/jcajce/util/JcaJceHelper.h"
#include "org/spongycastle/util/io/pem/PemObject.h"
#include "org/spongycastle/util/io/pem/PemWriter.h"

#if !__has_feature(objc_arc)
#error "org/spongycastle/jcajce/provider/asymmetric/x509/PKIXCertPath must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath () {
 @public
  id<OrgSpongycastleJcajceUtilJcaJceHelper> helper_;
  id<JavaUtilList> certificates_;
}

/*!
 @param certs
 */
- (id<JavaUtilList>)sortCertsWithJavaUtilList:(id<JavaUtilList>)certs;

/*!
 @brief Return a DERObject containing the encoded certificate.
 @param cert the X509Certificate object to be encoded
 @return the DERObject
 */
- (OrgSpongycastleAsn1ASN1Primitive *)toASN1ObjectWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

- (IOSByteArray *)toDEREncodedWithOrgSpongycastleAsn1ASN1Encodable:(id<OrgSpongycastleAsn1ASN1Encodable>)obj;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath, helper_, id<OrgSpongycastleJcajceUtilJcaJceHelper>)
J2OBJC_FIELD_SETTER(OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath, certificates_, id<JavaUtilList>)

__attribute__((unused)) static id<JavaUtilList> OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_sortCertsWithJavaUtilList_(OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath *self, id<JavaUtilList> certs);

__attribute__((unused)) static OrgSpongycastleAsn1ASN1Primitive *OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_toASN1ObjectWithJavaSecurityCertX509Certificate_(OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath *self, JavaSecurityCertX509Certificate *cert);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_toDEREncodedWithOrgSpongycastleAsn1ASN1Encodable_(OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath *self, id<OrgSpongycastleAsn1ASN1Encodable> obj);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jcajce/provider/asymmetric/x509/PKIXCertPath.java"

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath)

id<JavaUtilList> OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_certPathEncodings;


#line 46
@implementation OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath


#line 67
- (id<JavaUtilList>)sortCertsWithJavaUtilList:(id<JavaUtilList>)certs {
  return OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_sortCertsWithJavaUtilList_(self, certs);
}


#line 157
- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)certificates {
  OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaUtilList_(self, certificates);
  return self;
}


#line 168
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inStream
                             withNSString:(NSString *)encoding {
  OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaIoInputStream_withNSString_(self, inStream, encoding);
  return self;
}


#line 231
- (id<JavaUtilIterator>)getEncodings {
  
#line 233
  return [((id<JavaUtilList>) nil_chk(OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_certPathEncodings)) iterator];
}


#line 243
- (IOSByteArray *)getEncoded {
  
#line 246
  id<JavaUtilIterator> iter = [self getEncodings];
  if ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    
#line 249
    id enc = [iter next];
    if ([enc isKindOfClass:[NSString class]]) {
      
#line 252
      return [self getEncodedWithNSString:(NSString *) enc];
    }
  }
  return nil;
}


#line 268
- (IOSByteArray *)getEncodedWithNSString:(NSString *)encoding {
  
#line 271
  if ([((NSString *) nil_chk(encoding)) java_equalsIgnoreCase:@"PkiPath"]) {
    
#line 273
    OrgSpongycastleAsn1ASN1EncodableVector *v = new_OrgSpongycastleAsn1ASN1EncodableVector_init();
    
#line 275
    id<JavaUtilListIterator> iter = [((id<JavaUtilList>) nil_chk(certificates_)) listIteratorWithInt:[certificates_ size]];
    while ([((id<JavaUtilListIterator>) nil_chk(iter)) hasPrevious]) {
      
#line 278
      [v addWithOrgSpongycastleAsn1ASN1Encodable:OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_toASN1ObjectWithJavaSecurityCertX509Certificate_(self, (JavaSecurityCertX509Certificate *) cast_chk([iter previous], [JavaSecurityCertX509Certificate class]))];
    }
    
#line 281
    return OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_toDEREncodedWithOrgSpongycastleAsn1ASN1Encodable_(self, new_OrgSpongycastleAsn1DERSequence_initWithOrgSpongycastleAsn1ASN1EncodableVector_(v));
  }
  else if ([encoding java_equalsIgnoreCase:@"PKCS7"]) {
    
#line 285
    OrgSpongycastleAsn1PkcsBCContentInfo *encInfo = new_OrgSpongycastleAsn1PkcsBCContentInfo_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Encodable_(JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, data), nil);
    
#line 287
    OrgSpongycastleAsn1ASN1EncodableVector *v = new_OrgSpongycastleAsn1ASN1EncodableVector_init();
    for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(certificates_)) size]; i++) {
      
#line 290
      [v addWithOrgSpongycastleAsn1ASN1Encodable:OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_toASN1ObjectWithJavaSecurityCertX509Certificate_(self, (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certificates_)) getWithInt:i], [JavaSecurityCertX509Certificate class]))];
    }
    
#line 293
    OrgSpongycastleAsn1PkcsBCSignedData *sd = new_OrgSpongycastleAsn1PkcsBCSignedData_initWithOrgSpongycastleAsn1ASN1Integer_withOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1PkcsBCContentInfo_withOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1ASN1Set_(new_OrgSpongycastleAsn1ASN1Integer_initWithLong_(
#line 294
    1), new_OrgSpongycastleAsn1DERSet_init(),
#line 296
    encInfo, new_OrgSpongycastleAsn1DERSet_initWithOrgSpongycastleAsn1ASN1EncodableVector_(
#line 297
    v),
#line 298
    nil, new_OrgSpongycastleAsn1DERSet_init());
    
#line 301
    return OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_toDEREncodedWithOrgSpongycastleAsn1ASN1Encodable_(self, new_OrgSpongycastleAsn1PkcsBCContentInfo_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Encodable_(JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, signedData),
#line 302
    sd));
  }
  else if ([encoding java_equalsIgnoreCase:@"PEM"]) {
    
#line 306
    JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
    OrgSpongycastleUtilIoPemPemWriter *pWrt = new_OrgSpongycastleUtilIoPemPemWriter_initWithJavaIoWriter_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_(bOut));
    
#line 309
    @try {
      
#line 311
      for (jint i = 0; i != [((id<JavaUtilList>) nil_chk(certificates_)) size]; i++) {
        
#line 313
        [pWrt writeObjectWithOrgSpongycastleUtilIoPemPemObjectGenerator:new_OrgSpongycastleUtilIoPemPemObject_initWithNSString_withByteArray_(@"CERTIFICATE", [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certificates_)) getWithInt:i], [JavaSecurityCertX509Certificate class])))) getEncoded])];
      }
      
#line 316
      [pWrt close];
    }
    @catch (JavaLangException *e) {
      
#line 320
      @throw new_JavaSecurityCertCertificateEncodingException_initWithNSString_(@"can't encode certificate for PEM encoded path");
    }
    
#line 323
    return [bOut toByteArray];
  }
  else {
    
#line 327
    @throw new_JavaSecurityCertCertificateEncodingException_initWithNSString_(JreStrcat("$$", @"unsupported encoding: ", encoding));
  }
}


#line 337
- (id<JavaUtilList>)getCertificates {
  
#line 339
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(new_JavaUtilArrayList_initWithJavaUtilCollection_(certificates_));
}


#line 349
- (OrgSpongycastleAsn1ASN1Primitive *)toASN1ObjectWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  return OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_toASN1ObjectWithJavaSecurityCertX509Certificate_(self, cert);
}


#line 363
- (IOSByteArray *)toDEREncodedWithOrgSpongycastleAsn1ASN1Encodable:(id<OrgSpongycastleAsn1ASN1Encodable>)obj {
  return OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_toDEREncodedWithOrgSpongycastleAsn1ASN1Encodable_(self, obj);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, 3, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1Primitive;", 0x2, 7, 8, 4, -1, -1, -1 },
    { NULL, "[B", 0x2, 9, 10, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(sortCertsWithJavaUtilList:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  methods[2].selector = @selector(initWithJavaIoInputStream:withNSString:);
  methods[3].selector = @selector(getEncodings);
  methods[4].selector = @selector(getEncoded);
  methods[5].selector = @selector(getEncodedWithNSString:);
  methods[6].selector = @selector(getCertificates);
  methods[7].selector = @selector(toASN1ObjectWithJavaSecurityCertX509Certificate:);
  methods[8].selector = @selector(toDEREncodedWithOrgSpongycastleAsn1ASN1Encodable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "helper_", "LOrgSpongycastleJcajceUtilJcaJceHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "certPathEncodings", "LJavaUtilList;", .constantValue.asLong = 0, 0x18, -1, 11, -1, -1 },
    { "certificates_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "sortCerts", "LJavaUtilList;", "LJavaIoInputStream;LNSString;", "LJavaSecurityCertCertificateException;", "LJavaSecurityCertCertificateEncodingException;", "getEncoded", "LNSString;", "toASN1Object", "LJavaSecurityCertX509Certificate;", "toDEREncoded", "LOrgSpongycastleAsn1ASN1Encodable;", &OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_certPathEncodings };
  static const J2ObjcClassInfo _OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath = { "PKIXCertPath", "org.spongycastle.jcajce.provider.asymmetric.x509", ptrTable, methods, fields, 7, 0x1, 9, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath;
}

+ (void)initialize {
  if (self == [OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath class]) {
    {
      
#line 55
      id<JavaUtilList> encodings = new_JavaUtilArrayList_init();
      [encodings addWithId:@"PkiPath"];
      [encodings addWithId:@"PEM"];
      [encodings addWithId:@"PKCS7"];
      OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_certPathEncodings = JavaUtilCollections_unmodifiableListWithJavaUtilList_(encodings);
    }
    J2OBJC_SET_INITIALIZED(OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath)
  }
}

@end


#line 67
id<JavaUtilList> OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_sortCertsWithJavaUtilList_(OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath *self, id<JavaUtilList> certs) {
  
#line 70
  if ([((id<JavaUtilList>) nil_chk(certs)) size] < 2) {
    
#line 72
    return certs;
  }
  
#line 75
  JavaxSecurityAuthX500X500Principal *issuer = [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:0], [JavaSecurityCertX509Certificate class])))) getIssuerX500Principal];
  jboolean okay = true;
  
#line 78
  for (jint i = 1; i != [certs size]; i++) {
    
#line 80
    JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:i], [JavaSecurityCertX509Certificate class]);
    
#line 82
    if ([((JavaxSecurityAuthX500X500Principal *) nil_chk(issuer)) isEqual:[((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSubjectX500Principal]]) {
      
#line 84
      issuer = [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:i], [JavaSecurityCertX509Certificate class])))) getIssuerX500Principal];
    }
    else {
      
#line 88
      okay = false;
      break;
    }
  }
  
#line 93
  if (okay) {
    
#line 95
    return certs;
  }
  
#line 99
  id<JavaUtilList> retList = new_JavaUtilArrayList_initWithInt_([certs size]);
  id<JavaUtilList> orig = new_JavaUtilArrayList_initWithJavaUtilCollection_(certs);
  
#line 102
  for (jint i = 0; i < [certs size]; i++) {
    
#line 104
    JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:i], [JavaSecurityCertX509Certificate class]);
    jboolean found = false;
    
#line 107
    JavaxSecurityAuthX500X500Principal *subject = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSubjectX500Principal];
    
#line 109
    for (jint j = 0; j != [certs size]; j++) {
      
#line 111
      JavaSecurityCertX509Certificate *c = (JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:j], [JavaSecurityCertX509Certificate class]);
      if ([((JavaxSecurityAuthX500X500Principal *) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(c)) getIssuerX500Principal])) isEqual:subject]) {
        
#line 114
        found = true;
        break;
      }
    }
    
#line 119
    if (!found) {
      
#line 121
      [retList addWithId:cert];
      (void) [certs removeWithInt:i];
    }
  }
  
#line 127
  if ([retList size] > 1) {
    
#line 129
    return orig;
  }
  
#line 132
  for (jint i = 0; i != [retList size]; i++) {
    
#line 134
    issuer = [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk([retList getWithInt:i], [JavaSecurityCertX509Certificate class])))) getIssuerX500Principal];
    
#line 136
    for (jint j = 0; j < [certs size]; j++) {
      
#line 138
      JavaSecurityCertX509Certificate *c = (JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:j], [JavaSecurityCertX509Certificate class]);
      if ([((JavaxSecurityAuthX500X500Principal *) nil_chk(issuer)) isEqual:[((JavaSecurityCertX509Certificate *) nil_chk(c)) getSubjectX500Principal]]) {
        
#line 141
        [retList addWithId:c];
        (void) [certs removeWithInt:j];
        break;
      }
    }
  }
  
#line 149
  if ([certs size] > 0) {
    
#line 151
    return orig;
  }
  
#line 154
  return retList;
}


#line 157
void OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaUtilList_(OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath *self, id<JavaUtilList> certificates) {
  JavaSecurityCertCertPath_initWithNSString_(self,
#line 159
  @"X.509");
  self->helper_ = new_OrgSpongycastleJcajceUtilBCJcaJceHelper_init();
  
#line 160
  self->certificates_ = OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_sortCertsWithJavaUtilList_(self, new_JavaUtilArrayList_initWithJavaUtilCollection_(certificates));
}


#line 157
OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath *new_OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaUtilList_(id<JavaUtilList> certificates) {
  J2OBJC_NEW_IMPL(OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath, initWithJavaUtilList_, certificates)
}


#line 157
OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath *create_OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaUtilList_(id<JavaUtilList> certificates) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath, initWithJavaUtilList_, certificates)
}


#line 168
void OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaIoInputStream_withNSString_(OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath *self, JavaIoInputStream *inStream, NSString *encoding) {
  JavaSecurityCertCertPath_initWithNSString_(self,
#line 173
  @"X.509");
  self->helper_ = new_OrgSpongycastleJcajceUtilBCJcaJceHelper_init();
  
#line 174
  @try {
    
#line 176
    if ([((NSString *) nil_chk(encoding)) java_equalsIgnoreCase:@"PkiPath"]) {
      
#line 178
      OrgSpongycastleAsn1ASN1InputStream *derInStream = new_OrgSpongycastleAsn1ASN1InputStream_initWithJavaIoInputStream_(inStream);
      OrgSpongycastleAsn1ASN1Primitive *derObject = [derInStream readObject];
      if (!([derObject isKindOfClass:[OrgSpongycastleAsn1ASN1Sequence class]])) {
        
#line 182
        @throw new_JavaSecurityCertCertificateException_initWithNSString_(@"input stream does not contain a ASN1 SEQUENCE while reading PkiPath encoded data to load CertPath");
      }
      id<JavaUtilEnumeration> e = [((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(((OrgSpongycastleAsn1ASN1Sequence *) cast_chk(derObject, [OrgSpongycastleAsn1ASN1Sequence class])))) getObjects];
      self->certificates_ = new_JavaUtilArrayList_init();
      JavaSecurityCertCertificateFactory *certFactory = [self->helper_ createCertificateFactoryWithNSString:@"X.509"];
      while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
        
#line 189
        id<OrgSpongycastleAsn1ASN1Encodable> element = (id<OrgSpongycastleAsn1ASN1Encodable>) cast_check([e nextElement], OrgSpongycastleAsn1ASN1Encodable_class_());
        IOSByteArray *encoded = [((OrgSpongycastleAsn1ASN1Primitive *) nil_chk([((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk(element)) toASN1Primitive])) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
        [((id<JavaUtilList>) nil_chk(self->certificates_)) addWithInt:0 withId:[((JavaSecurityCertCertificateFactory *) nil_chk(certFactory)) generateCertificateWithJavaIoInputStream:new_JavaIoByteArrayInputStream_initWithByteArray_(
#line 192
        encoded)]];
      }
    }
    else if ([encoding java_equalsIgnoreCase:@"PKCS7"] || [encoding java_equalsIgnoreCase:@"PEM"]) {
      
#line 197
      inStream = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(inStream);
      self->certificates_ = new_JavaUtilArrayList_init();
      JavaSecurityCertCertificateFactory *certFactory = [self->helper_ createCertificateFactoryWithNSString:@"X.509"];
      JavaSecurityCertCertificate *cert;
      while ((cert = [((JavaSecurityCertCertificateFactory *) nil_chk(certFactory)) generateCertificateWithJavaIoInputStream:inStream]) != nil) {
        
#line 203
        [((id<JavaUtilList>) nil_chk(self->certificates_)) addWithId:cert];
      }
    }
    else {
      
#line 208
      @throw new_JavaSecurityCertCertificateException_initWithNSString_(JreStrcat("$$", @"unsupported encoding: ", encoding));
    }
  }
  @catch (JavaIoIOException *ex) {
    
#line 213
    @throw new_JavaSecurityCertCertificateException_initWithNSString_(JreStrcat("$$", @"IOException throw while decoding CertPath:\n", [ex description]));
  }
  @catch (JavaSecurityNoSuchProviderException *ex) {
    
#line 217
    @throw new_JavaSecurityCertCertificateException_initWithNSString_(JreStrcat("$$", @"BouncyCastle provider not found while trying to get a CertificateFactory:\n", [ex description]));
  }
  
#line 220
  self->certificates_ = OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_sortCertsWithJavaUtilList_(self, self->certificates_);
}


#line 168
OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath *new_OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaIoInputStream_withNSString_(JavaIoInputStream *inStream, NSString *encoding) {
  J2OBJC_NEW_IMPL(OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath, initWithJavaIoInputStream_withNSString_, inStream, encoding)
}


#line 168
OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath *create_OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_initWithJavaIoInputStream_withNSString_(JavaIoInputStream *inStream, NSString *encoding) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath, initWithJavaIoInputStream_withNSString_, inStream, encoding)
}


#line 349
OrgSpongycastleAsn1ASN1Primitive *OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_toASN1ObjectWithJavaSecurityCertX509Certificate_(OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath *self, JavaSecurityCertX509Certificate *cert) {
  
#line 353
  @try {
    
#line 355
    return [new_OrgSpongycastleAsn1ASN1InputStream_initWithByteArray_([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getEncoded]) readObject];
  }
  @catch (JavaLangException *e) {
    
#line 359
    @throw new_JavaSecurityCertCertificateEncodingException_initWithNSString_(JreStrcat("$$", @"Exception while encoding certificate: ", [e description]));
  }
}


#line 363
IOSByteArray *OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath_toDEREncodedWithOrgSpongycastleAsn1ASN1Encodable_(OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath *self, id<OrgSpongycastleAsn1ASN1Encodable> obj) {
  
#line 366
  @try {
    
#line 368
    return [((OrgSpongycastleAsn1ASN1Primitive *) nil_chk([((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk(obj)) toASN1Primitive])) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
  }
  @catch (JavaIoIOException *e) {
    
#line 372
    @throw new_JavaSecurityCertCertificateEncodingException_initWithNSString_(JreStrcat("$@", @"Exception thrown: ", e));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleJcajceProviderAsymmetricX509PKIXCertPath)
