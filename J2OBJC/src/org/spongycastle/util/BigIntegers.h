//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/util/BigIntegers.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleUtilBigIntegers")
#ifdef RESTRICT_OrgSpongycastleUtilBigIntegers
#define INCLUDE_ALL_OrgSpongycastleUtilBigIntegers 0
#else
#define INCLUDE_ALL_OrgSpongycastleUtilBigIntegers 1
#endif
#undef RESTRICT_OrgSpongycastleUtilBigIntegers

#if !defined (OrgSpongycastleUtilBigIntegers_) && (INCLUDE_ALL_OrgSpongycastleUtilBigIntegers || defined(INCLUDE_OrgSpongycastleUtilBigIntegers))
#define OrgSpongycastleUtilBigIntegers_

@class IOSByteArray;
@class JavaMathBigInteger;
@class JavaSecuritySecureRandom;

/*!
 @brief BigInteger utilities.
 */
@interface OrgSpongycastleUtilBigIntegers : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Return the passed in value as an unsigned byte array.
 @param value value to be converted.
 @return a byte array without a leading zero byte if present in the signed encoding.
 */
+ (IOSByteArray *)asUnsignedByteArrayWithJavaMathBigInteger:(JavaMathBigInteger *)value;

/*!
 @brief Return the passed in value as an unsigned byte array.
 @param value value to be converted.
 @return a byte array without a leading zero byte if present in the signed encoding.
 */
+ (IOSByteArray *)asUnsignedByteArrayWithInt:(jint)length
                      withJavaMathBigInteger:(JavaMathBigInteger *)value;

/*!
 @brief Return a random BigInteger not less than 'min' and not greater than 'max'
 @param min the least value that may be generated
 @param max the greatest value that may be generated
 @param random the source of randomness
 @return a random BigInteger value in the range [min,max]
 */
+ (JavaMathBigInteger *)createRandomInRangeWithJavaMathBigInteger:(JavaMathBigInteger *)min
                                           withJavaMathBigInteger:(JavaMathBigInteger *)max
                                     withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

+ (JavaMathBigInteger *)fromUnsignedByteArrayWithByteArray:(IOSByteArray *)buf;

+ (JavaMathBigInteger *)fromUnsignedByteArrayWithByteArray:(IOSByteArray *)buf
                                                   withInt:(jint)off
                                                   withInt:(jint)length;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleUtilBigIntegers)

FOUNDATION_EXPORT void OrgSpongycastleUtilBigIntegers_init(OrgSpongycastleUtilBigIntegers *self);

FOUNDATION_EXPORT OrgSpongycastleUtilBigIntegers *new_OrgSpongycastleUtilBigIntegers_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleUtilBigIntegers *create_OrgSpongycastleUtilBigIntegers_init(void);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(JavaMathBigInteger *value);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_(jint length, JavaMathBigInteger *value);

FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *min, JavaMathBigInteger *max, JavaSecuritySecureRandom *random);

FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_(IOSByteArray *buf);

FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(IOSByteArray *buf, jint off, jint length);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleUtilBigIntegers)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleUtilBigIntegers")
