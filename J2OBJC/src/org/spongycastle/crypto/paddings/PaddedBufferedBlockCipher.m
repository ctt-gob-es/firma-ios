//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/crypto/paddings/PaddedBufferedBlockCipher.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/BlockCipher.h"
#include "org/spongycastle/crypto/BufferedBlockCipher.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/OutputLengthException.h"
#include "org/spongycastle/crypto/paddings/BlockCipherPadding.h"
#include "org/spongycastle/crypto/paddings/PKCS7Padding.h"
#include "org/spongycastle/crypto/paddings/PaddedBufferedBlockCipher.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"

#if !__has_feature(objc_arc)
#error "org/spongycastle/crypto/paddings/PaddedBufferedBlockCipher must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/crypto/paddings/PaddedBufferedBlockCipher.java"


#line 18
@implementation OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher


#line 29
- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher
     withOrgSpongycastleCryptoPaddingsBlockCipherPadding:(id<OrgSpongycastleCryptoPaddingsBlockCipherPadding>)padding {
  OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(self, cipher, padding);
  return self;
}


#line 45
- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher {
  OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(self, cipher);
  return self;
}


#line 60
- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  
#line 65
  self->forEncryption_ = forEncryption;
  
#line 67
  [self reset];
  
#line 69
  if ([params isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
    
#line 71
    OrgSpongycastleCryptoParamsParametersWithRandom *p = (OrgSpongycastleCryptoParamsParametersWithRandom *) params;
    
#line 73
    [((id<OrgSpongycastleCryptoPaddingsBlockCipherPadding>) nil_chk(padding_)) init__WithJavaSecuritySecureRandom:[((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(p)) getRandom]];
    
#line 75
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:forEncryption withOrgSpongycastleCryptoCipherParameters:[p getParameters]];
  }
  else {
    
#line 79
    [((id<OrgSpongycastleCryptoPaddingsBlockCipherPadding>) nil_chk(padding_)) init__WithJavaSecuritySecureRandom:nil];
    
#line 81
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:forEncryption withOrgSpongycastleCryptoCipherParameters:params];
  }
}


#line 93
- (jint)getOutputSizeWithInt:(jint)len {
  
#line 96
  jint total = len + bufOff_;
  jint leftOver = JreIntMod(total, ((IOSByteArray *) nil_chk(buf_))->size_);
  
#line 99
  if (leftOver == 0) {
    
#line 101
    if (forEncryption_) {
      
#line 103
      return total + buf_->size_;
    }
    
#line 106
    return total;
  }
  
#line 109
  return total - leftOver + buf_->size_;
}


#line 120
- (jint)getUpdateOutputSizeWithInt:(jint)len {
  
#line 123
  jint total = len + bufOff_;
  jint leftOver = JreIntMod(total, ((IOSByteArray *) nil_chk(buf_))->size_);
  
#line 126
  if (leftOver == 0) {
    
#line 128
    return JavaLangMath_maxWithInt_withInt_(0, total - buf_->size_);
  }
  
#line 131
  return total - leftOver;
}


#line 144
- (jint)processByteWithByte:(jbyte)inArg
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff {
  
#line 150
  jint resultLen = 0;
  
#line 152
  if (bufOff_ == ((IOSByteArray *) nil_chk(buf_))->size_) {
    
#line 154
    resultLen = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
    bufOff_ = 0;
  }
  
#line 158
  *IOSByteArray_GetRef(nil_chk(buf_), bufOff_++) = inArg;
  
#line 160
  return resultLen;
}


#line 175
- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  
#line 183
  if (len < 0) {
    
#line 185
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't have a negative input length!");
  }
  
#line 188
  jint blockSize = [self getBlockSize];
  jint length = [self getUpdateOutputSizeWithInt:len];
  
#line 191
  if (length > 0) {
    
#line 193
    if ((outOff + length) > ((IOSByteArray *) nil_chk(outArg))->size_) {
      
#line 195
      @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
    }
  }
  
#line 199
  jint resultLen = 0;
  jint gapLen = ((IOSByteArray *) nil_chk(buf_))->size_ - bufOff_;
  
#line 202
  if (len > gapLen) {
    
#line 204
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, gapLen);
    
#line 206
    resultLen += [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
    
#line 208
    bufOff_ = 0;
    len -= gapLen;
    inOff += gapLen;
    
#line 212
    while (len > ((IOSByteArray *) nil_chk(buf_))->size_) {
      
#line 214
      resultLen += [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:inArg withInt:inOff withByteArray:outArg withInt:outOff + resultLen];
      
#line 216
      len -= blockSize;
      inOff += blockSize;
    }
  }
  
#line 221
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, len);
  
#line 223
  bufOff_ += len;
  
#line 225
  return resultLen;
}


#line 242
- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  
#line 247
  jint blockSize = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize];
  jint resultLen = 0;
  
#line 250
  if (forEncryption_) {
    
#line 252
    if (bufOff_ == blockSize) {
      
#line 254
      if ((outOff + 2 * blockSize) > ((IOSByteArray *) nil_chk(outArg))->size_) {
        
#line 256
        [self reset];
        
#line 258
        @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
      }
      
#line 261
      resultLen = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
      bufOff_ = 0;
    }
    
#line 265
    [((id<OrgSpongycastleCryptoPaddingsBlockCipherPadding>) nil_chk(padding_)) addPaddingWithByteArray:buf_ withInt:bufOff_];
    
#line 267
    resultLen += [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff + resultLen];
    
#line 269
    [self reset];
  }
  else {
    
#line 273
    if (bufOff_ == blockSize) {
      
#line 275
      resultLen = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:buf_ withInt:0];
      bufOff_ = 0;
    }
    else {
      
#line 280
      [self reset];
      
#line 282
      @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"last block incomplete in decryption");
    }
    
#line 285
    @try {
      
#line 287
      resultLen -= [((id<OrgSpongycastleCryptoPaddingsBlockCipherPadding>) nil_chk(padding_)) padCountWithByteArray:buf_];
      
#line 289
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, 0, outArg, outOff, resultLen);
    }
    @finally {
      
#line 293
      [self reset];
    }
  }
  
#line 297
  return resultLen;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 9, 10, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 12, 10, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 14, 15, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:withOrgSpongycastleCryptoPaddingsBlockCipherPadding:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:);
  methods[2].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[3].selector = @selector(getOutputSizeWithInt:);
  methods[4].selector = @selector(getUpdateOutputSizeWithInt:);
  methods[5].selector = @selector(processByteWithByte:withByteArray:withInt:);
  methods[6].selector = @selector(processBytesWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[7].selector = @selector(doFinalWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "padding_", "LOrgSpongycastleCryptoPaddingsBlockCipherPadding;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoBlockCipher;LOrgSpongycastleCryptoPaddingsBlockCipherPadding;", "LOrgSpongycastleCryptoBlockCipher;", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "getOutputSize", "I", "getUpdateOutputSize", "processByte", "B[BI", "LOrgSpongycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "processBytes", "[BII[BI", "doFinal", "[BI", "LOrgSpongycastleCryptoDataLengthException;LJavaLangIllegalStateException;LOrgSpongycastleCryptoInvalidCipherTextException;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher = { "PaddedBufferedBlockCipher", "org.spongycastle.crypto.paddings", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher;
}

@end


#line 29
void OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher *self, id<OrgSpongycastleCryptoBlockCipher> cipher, id<OrgSpongycastleCryptoPaddingsBlockCipherPadding> padding) {
  OrgSpongycastleCryptoBufferedBlockCipher_init(self);
  
#line 33
  self->cipher_ = cipher;
  self->padding_ = padding;
  
#line 36
  self->buf_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize]];
  self->bufOff_ = 0;
}


#line 29
OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher *new_OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(id<OrgSpongycastleCryptoBlockCipher> cipher, id<OrgSpongycastleCryptoPaddingsBlockCipherPadding> padding) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_, cipher, padding)
}


#line 29
OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher *create_OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(id<OrgSpongycastleCryptoBlockCipher> cipher, id<OrgSpongycastleCryptoPaddingsBlockCipherPadding> padding) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_, cipher, padding)
}


#line 45
void OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher *self, id<OrgSpongycastleCryptoBlockCipher> cipher) {
  OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(self,
#line 48
  cipher, new_OrgSpongycastleCryptoPaddingsPKCS7Padding_init());
}


#line 45
OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher *new_OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_, cipher)
}


#line 45
OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher *create_OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_, cipher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher)
