//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/asn1/ASN1Integer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleAsn1ASN1Integer")
#ifdef RESTRICT_OrgSpongycastleAsn1ASN1Integer
#define INCLUDE_ALL_OrgSpongycastleAsn1ASN1Integer 0
#else
#define INCLUDE_ALL_OrgSpongycastleAsn1ASN1Integer 1
#endif
#undef RESTRICT_OrgSpongycastleAsn1ASN1Integer

#if !defined (OrgSpongycastleAsn1ASN1Integer_) && (INCLUDE_ALL_OrgSpongycastleAsn1ASN1Integer || defined(INCLUDE_OrgSpongycastleAsn1ASN1Integer))
#define OrgSpongycastleAsn1ASN1Integer_

#define RESTRICT_OrgSpongycastleAsn1ASN1Primitive 1
#define INCLUDE_OrgSpongycastleAsn1ASN1Primitive 1
#include "org/spongycastle/asn1/ASN1Primitive.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class OrgSpongycastleAsn1ASN1OutputStream;
@class OrgSpongycastleAsn1ASN1TaggedObject;

/*!
 @brief Class representing the ASN.1 INTEGER type.
 */
@interface OrgSpongycastleAsn1ASN1Integer : OrgSpongycastleAsn1ASN1Primitive

#pragma mark Public

/*!
 @brief Construct an INTEGER from the passed in BigInteger value.
 @param value the BigInteger representing the value desired.
 */
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)value;

/*!
 @brief Construct an INTEGER from the passed in byte array.
 <p>
  <b>NB: Strict Validation applied by default.</b>
  </p>
  <p>
  It has turned out that there are still a few applications that struggle with
  the ASN.1 BER encoding rules for an INTEGER as described in:
 */
- (instancetype)initWithByteArray:(IOSByteArray *)bytes;

/*!
 @brief Construct an INTEGER from the passed in long value.
 @param value the long representing the value desired.
 */
- (instancetype)initWithLong:(jlong)value;

/*!
 @brief Return an Integer from a tagged object.
 @param obj the tagged object holding the object we want
 @param explicit_ true if the object is meant to be explicitly                  tagged false otherwise.
 @return an ASN1Integer instance.
 @throw IllegalArgumentExceptionif the tagged object cannot
  be converted.
 */
+ (OrgSpongycastleAsn1ASN1Integer *)getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject:(OrgSpongycastleAsn1ASN1TaggedObject *)obj
                                                                           withBoolean:(jboolean)explicit_;

/*!
 @brief Return an integer from the passed in object.
 @param obj an ASN1Integer or an object that can be converted into one.
 @return an ASN1Integer instance.
 @throw IllegalArgumentExceptionif the object cannot be converted.
 */
+ (OrgSpongycastleAsn1ASN1Integer *)getInstanceWithId:(id)obj;

/*!
 @brief in some cases positive values get crammed into a space,
  that's not quite big enough...
 @return the BigInteger that results from treating this ASN.1 INTEGER as unsigned.
 */
- (JavaMathBigInteger *)getPositiveValue;

- (JavaMathBigInteger *)getValue;

- (NSUInteger)hash;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initWithByteArray:(IOSByteArray *)bytes
                      withBoolean:(jboolean)clone;

- (jboolean)asn1EqualsWithOrgSpongycastleAsn1ASN1Primitive:(OrgSpongycastleAsn1ASN1Primitive *)o;

- (void)encodeWithOrgSpongycastleAsn1ASN1OutputStream:(OrgSpongycastleAsn1ASN1OutputStream *)outArg;

- (jint)encodedLength;

- (jboolean)isConstructed;

/*!
 @brief Apply the correct validation for an INTEGER primitive following the BER rules.
 @param bytes The raw encoding of the integer.
 @return true if the (in)put fails this validation.
 */
+ (jboolean)isMalformedWithByteArray:(IOSByteArray *)bytes;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleAsn1ASN1Integer)

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1Integer *OrgSpongycastleAsn1ASN1Integer_getInstanceWithId_(id obj);

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1Integer *OrgSpongycastleAsn1ASN1Integer_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(OrgSpongycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT void OrgSpongycastleAsn1ASN1Integer_initWithLong_(OrgSpongycastleAsn1ASN1Integer *self, jlong value);

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1Integer *new_OrgSpongycastleAsn1ASN1Integer_initWithLong_(jlong value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1Integer *create_OrgSpongycastleAsn1ASN1Integer_initWithLong_(jlong value);

FOUNDATION_EXPORT void OrgSpongycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(OrgSpongycastleAsn1ASN1Integer *self, JavaMathBigInteger *value);

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1Integer *new_OrgSpongycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(JavaMathBigInteger *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1Integer *create_OrgSpongycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(JavaMathBigInteger *value);

FOUNDATION_EXPORT void OrgSpongycastleAsn1ASN1Integer_initWithByteArray_(OrgSpongycastleAsn1ASN1Integer *self, IOSByteArray *bytes);

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1Integer *new_OrgSpongycastleAsn1ASN1Integer_initWithByteArray_(IOSByteArray *bytes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1Integer *create_OrgSpongycastleAsn1ASN1Integer_initWithByteArray_(IOSByteArray *bytes);

FOUNDATION_EXPORT void OrgSpongycastleAsn1ASN1Integer_initWithByteArray_withBoolean_(OrgSpongycastleAsn1ASN1Integer *self, IOSByteArray *bytes, jboolean clone);

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1Integer *new_OrgSpongycastleAsn1ASN1Integer_initWithByteArray_withBoolean_(IOSByteArray *bytes, jboolean clone) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1Integer *create_OrgSpongycastleAsn1ASN1Integer_initWithByteArray_withBoolean_(IOSByteArray *bytes, jboolean clone);

FOUNDATION_EXPORT jboolean OrgSpongycastleAsn1ASN1Integer_isMalformedWithByteArray_(IOSByteArray *bytes);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleAsn1ASN1Integer)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleAsn1ASN1Integer")
