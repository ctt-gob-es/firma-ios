//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/asn1/x509/Holder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleAsn1X509Holder")
#ifdef RESTRICT_OrgSpongycastleAsn1X509Holder
#define INCLUDE_ALL_OrgSpongycastleAsn1X509Holder 0
#else
#define INCLUDE_ALL_OrgSpongycastleAsn1X509Holder 1
#endif
#undef RESTRICT_OrgSpongycastleAsn1X509Holder

#if !defined (OrgSpongycastleAsn1X509Holder_) && (INCLUDE_ALL_OrgSpongycastleAsn1X509Holder || defined(INCLUDE_OrgSpongycastleAsn1X509Holder))
#define OrgSpongycastleAsn1X509Holder_

#define RESTRICT_OrgSpongycastleAsn1ASN1Object 1
#define INCLUDE_OrgSpongycastleAsn1ASN1Object 1
#include "org/spongycastle/asn1/ASN1Object.h"

@class OrgSpongycastleAsn1ASN1Primitive;
@class OrgSpongycastleAsn1X509GeneralNames;
@class OrgSpongycastleAsn1X509IssuerSerial;
@class OrgSpongycastleAsn1X509ObjectDigestInfo;

/*!
 @brief The Holder object.
 <p>
  For an v2 attribute certificate this is:  
 @code

             Holder ::= SEQUENCE {
                   baseCertificateID   [0] IssuerSerial OPTIONAL,
                            -- the issuer and serial number of
                            -- the holder's Public Key Certificate
                   entityName          [1] GeneralNames OPTIONAL,
                            -- the name of the claimant or role
                   objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
                            -- used to directly authenticate the holder,
                            -- for example, an executable
             } 
  
@endcode
   
 <p>
  For an v1 attribute certificate this is:  
 @code

          subject CHOICE {
           baseCertificateID [0] EXPLICIT IssuerSerial,
           -- associated with a Public Key Certificate
           subjectName [1] EXPLICIT GeneralNames },
           -- associated with a name 
  
@endcode
 */
@interface OrgSpongycastleAsn1X509Holder : OrgSpongycastleAsn1ASN1Object {
 @public
  OrgSpongycastleAsn1X509IssuerSerial *baseCertificateID_;
  OrgSpongycastleAsn1X509GeneralNames *entityName_;
  OrgSpongycastleAsn1X509ObjectDigestInfo *objectDigestInfo_;
}

#pragma mark Public

/*!
 @brief Constructs a holder with an entityName for V2 attribute certificates.
 @param entityName The entity or subject name.
 */
- (instancetype)initWithOrgSpongycastleAsn1X509GeneralNames:(OrgSpongycastleAsn1X509GeneralNames *)entityName;

/*!
 @brief Constructs a holder with an entityName for V2 attribute certificates or
  with a subjectName for V1 attribute certificates.
 @param entityName The entity or subject name.
 @param version_ The version of the attribute certificate.
 */
- (instancetype)initWithOrgSpongycastleAsn1X509GeneralNames:(OrgSpongycastleAsn1X509GeneralNames *)entityName
                                                    withInt:(jint)version_;

- (instancetype)initWithOrgSpongycastleAsn1X509IssuerSerial:(OrgSpongycastleAsn1X509IssuerSerial *)baseCertificateID;

/*!
 @brief Constructs a holder from a IssuerSerial for a V1 or V2 certificate.
 .
 @param baseCertificateID The IssuerSerial.
 @param version_ The version of the attribute certificate.
 */
- (instancetype)initWithOrgSpongycastleAsn1X509IssuerSerial:(OrgSpongycastleAsn1X509IssuerSerial *)baseCertificateID
                                                    withInt:(jint)version_;

/*!
 @brief Constructs a holder from an object digest info.
 @param objectDigestInfo The object digest info object.
 */
- (instancetype)initWithOrgSpongycastleAsn1X509ObjectDigestInfo:(OrgSpongycastleAsn1X509ObjectDigestInfo *)objectDigestInfo;

- (OrgSpongycastleAsn1X509IssuerSerial *)getBaseCertificateID;

/*!
 @brief Returns the entityName for an V2 attribute certificate or the subjectName
  for an V1 attribute certificate.
 @return The entityname or subjectname.
 */
- (OrgSpongycastleAsn1X509GeneralNames *)getEntityName;

+ (OrgSpongycastleAsn1X509Holder *)getInstanceWithId:(id)obj;

- (OrgSpongycastleAsn1X509ObjectDigestInfo *)getObjectDigestInfo;

/*!
 @brief Returns 1 for V2 attribute certificates or 0 for V1 attribute
  certificates.
 @return The version of the attribute certificate.
 */
- (jint)getVersion;

- (OrgSpongycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleAsn1X509Holder)

J2OBJC_FIELD_SETTER(OrgSpongycastleAsn1X509Holder, baseCertificateID_, OrgSpongycastleAsn1X509IssuerSerial *)
J2OBJC_FIELD_SETTER(OrgSpongycastleAsn1X509Holder, entityName_, OrgSpongycastleAsn1X509GeneralNames *)
J2OBJC_FIELD_SETTER(OrgSpongycastleAsn1X509Holder, objectDigestInfo_, OrgSpongycastleAsn1X509ObjectDigestInfo *)

inline jint OrgSpongycastleAsn1X509Holder_get_V1_CERTIFICATE_HOLDER(void);
#define OrgSpongycastleAsn1X509Holder_V1_CERTIFICATE_HOLDER 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleAsn1X509Holder, V1_CERTIFICATE_HOLDER, jint)

inline jint OrgSpongycastleAsn1X509Holder_get_V2_CERTIFICATE_HOLDER(void);
#define OrgSpongycastleAsn1X509Holder_V2_CERTIFICATE_HOLDER 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleAsn1X509Holder, V2_CERTIFICATE_HOLDER, jint)

FOUNDATION_EXPORT OrgSpongycastleAsn1X509Holder *OrgSpongycastleAsn1X509Holder_getInstanceWithId_(id obj);

FOUNDATION_EXPORT void OrgSpongycastleAsn1X509Holder_initWithOrgSpongycastleAsn1X509IssuerSerial_(OrgSpongycastleAsn1X509Holder *self, OrgSpongycastleAsn1X509IssuerSerial *baseCertificateID);

FOUNDATION_EXPORT OrgSpongycastleAsn1X509Holder *new_OrgSpongycastleAsn1X509Holder_initWithOrgSpongycastleAsn1X509IssuerSerial_(OrgSpongycastleAsn1X509IssuerSerial *baseCertificateID) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1X509Holder *create_OrgSpongycastleAsn1X509Holder_initWithOrgSpongycastleAsn1X509IssuerSerial_(OrgSpongycastleAsn1X509IssuerSerial *baseCertificateID);

FOUNDATION_EXPORT void OrgSpongycastleAsn1X509Holder_initWithOrgSpongycastleAsn1X509IssuerSerial_withInt_(OrgSpongycastleAsn1X509Holder *self, OrgSpongycastleAsn1X509IssuerSerial *baseCertificateID, jint version_);

FOUNDATION_EXPORT OrgSpongycastleAsn1X509Holder *new_OrgSpongycastleAsn1X509Holder_initWithOrgSpongycastleAsn1X509IssuerSerial_withInt_(OrgSpongycastleAsn1X509IssuerSerial *baseCertificateID, jint version_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1X509Holder *create_OrgSpongycastleAsn1X509Holder_initWithOrgSpongycastleAsn1X509IssuerSerial_withInt_(OrgSpongycastleAsn1X509IssuerSerial *baseCertificateID, jint version_);

FOUNDATION_EXPORT void OrgSpongycastleAsn1X509Holder_initWithOrgSpongycastleAsn1X509GeneralNames_(OrgSpongycastleAsn1X509Holder *self, OrgSpongycastleAsn1X509GeneralNames *entityName);

FOUNDATION_EXPORT OrgSpongycastleAsn1X509Holder *new_OrgSpongycastleAsn1X509Holder_initWithOrgSpongycastleAsn1X509GeneralNames_(OrgSpongycastleAsn1X509GeneralNames *entityName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1X509Holder *create_OrgSpongycastleAsn1X509Holder_initWithOrgSpongycastleAsn1X509GeneralNames_(OrgSpongycastleAsn1X509GeneralNames *entityName);

FOUNDATION_EXPORT void OrgSpongycastleAsn1X509Holder_initWithOrgSpongycastleAsn1X509GeneralNames_withInt_(OrgSpongycastleAsn1X509Holder *self, OrgSpongycastleAsn1X509GeneralNames *entityName, jint version_);

FOUNDATION_EXPORT OrgSpongycastleAsn1X509Holder *new_OrgSpongycastleAsn1X509Holder_initWithOrgSpongycastleAsn1X509GeneralNames_withInt_(OrgSpongycastleAsn1X509GeneralNames *entityName, jint version_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1X509Holder *create_OrgSpongycastleAsn1X509Holder_initWithOrgSpongycastleAsn1X509GeneralNames_withInt_(OrgSpongycastleAsn1X509GeneralNames *entityName, jint version_);

FOUNDATION_EXPORT void OrgSpongycastleAsn1X509Holder_initWithOrgSpongycastleAsn1X509ObjectDigestInfo_(OrgSpongycastleAsn1X509Holder *self, OrgSpongycastleAsn1X509ObjectDigestInfo *objectDigestInfo);

FOUNDATION_EXPORT OrgSpongycastleAsn1X509Holder *new_OrgSpongycastleAsn1X509Holder_initWithOrgSpongycastleAsn1X509ObjectDigestInfo_(OrgSpongycastleAsn1X509ObjectDigestInfo *objectDigestInfo) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1X509Holder *create_OrgSpongycastleAsn1X509Holder_initWithOrgSpongycastleAsn1X509ObjectDigestInfo_(OrgSpongycastleAsn1X509ObjectDigestInfo *objectDigestInfo);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleAsn1X509Holder)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleAsn1X509Holder")
