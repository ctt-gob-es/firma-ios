//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/cert/X509CertificateHolder.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/spongycastle/asn1/ASN1Integer.h"
#include "org/spongycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/BCDEROutputStream.h"
#include "org/spongycastle/asn1/DERBitString.h"
#include "org/spongycastle/asn1/x500/X500Name.h"
#include "org/spongycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/spongycastle/asn1/x509/BCTime.h"
#include "org/spongycastle/asn1/x509/Certificate.h"
#include "org/spongycastle/asn1/x509/Extension.h"
#include "org/spongycastle/asn1/x509/Extensions.h"
#include "org/spongycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/spongycastle/asn1/x509/TBSCertificate.h"
#include "org/spongycastle/cert/CertException.h"
#include "org/spongycastle/cert/CertIOException.h"
#include "org/spongycastle/cert/CertUtils.h"
#include "org/spongycastle/cert/X509CertificateHolder.h"
#include "org/spongycastle/operator/ContentVerifier.h"
#include "org/spongycastle/operator/ContentVerifierProvider.h"

#if !__has_feature(objc_arc)
#error "org/spongycastle/cert/X509CertificateHolder must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleCertX509CertificateHolder () {
 @public
  OrgSpongycastleAsn1X509Certificate *x509Certificate_;
  OrgSpongycastleAsn1X509Extensions *extensions_;
}

+ (OrgSpongycastleAsn1X509Certificate *)parseBytesWithByteArray:(IOSByteArray *)certEncoding;

- (void)init__WithOrgSpongycastleAsn1X509Certificate:(OrgSpongycastleAsn1X509Certificate *)x509Certificate OBJC_METHOD_FAMILY_NONE;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCertX509CertificateHolder, x509Certificate_, OrgSpongycastleAsn1X509Certificate *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCertX509CertificateHolder, extensions_, OrgSpongycastleAsn1X509Extensions *)

inline jlong OrgSpongycastleCertX509CertificateHolder_get_serialVersionUID(void);
#define OrgSpongycastleCertX509CertificateHolder_serialVersionUID 20170722001LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCertX509CertificateHolder, serialVersionUID, jlong)

__attribute__((unused)) static OrgSpongycastleAsn1X509Certificate *OrgSpongycastleCertX509CertificateHolder_parseBytesWithByteArray_(IOSByteArray *certEncoding);

__attribute__((unused)) static void OrgSpongycastleCertX509CertificateHolder_init__WithOrgSpongycastleAsn1X509Certificate_(OrgSpongycastleCertX509CertificateHolder *self, OrgSpongycastleAsn1X509Certificate *x509Certificate);

__attribute__((unused)) static void OrgSpongycastleCertX509CertificateHolder_readObjectWithJavaIoObjectInputStream_(OrgSpongycastleCertX509CertificateHolder *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void OrgSpongycastleCertX509CertificateHolder_writeObjectWithJavaIoObjectOutputStream_(OrgSpongycastleCertX509CertificateHolder *self, JavaIoObjectOutputStream *outArg);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/cert/X509CertificateHolder.java"


#line 29
@implementation OrgSpongycastleCertX509CertificateHolder


#line 37
+ (OrgSpongycastleAsn1X509Certificate *)parseBytesWithByteArray:(IOSByteArray *)certEncoding {
  return OrgSpongycastleCertX509CertificateHolder_parseBytesWithByteArray_(certEncoding);
}


#line 60
- (instancetype)initWithByteArray:(IOSByteArray *)certEncoding {
  OrgSpongycastleCertX509CertificateHolder_initWithByteArray_(self, certEncoding);
  return self;
}


#line 71
- (instancetype)initWithOrgSpongycastleAsn1X509Certificate:(OrgSpongycastleAsn1X509Certificate *)x509Certificate {
  OrgSpongycastleCertX509CertificateHolder_initWithOrgSpongycastleAsn1X509Certificate_(self, x509Certificate);
  return self;
}

- (void)init__WithOrgSpongycastleAsn1X509Certificate:(OrgSpongycastleAsn1X509Certificate *)x509Certificate {
  OrgSpongycastleCertX509CertificateHolder_init__WithOrgSpongycastleAsn1X509Certificate_(self, x509Certificate);
}


#line 82
- (jint)getVersionNumber {
  
#line 84
  return [((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getVersionNumber];
}


#line 90
- (jint)getVersion {
  
#line 92
  return [((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getVersionNumber];
}


#line 100
- (jboolean)hasExtensions {
  
#line 102
  return extensions_ != nil;
}


#line 112
- (OrgSpongycastleAsn1X509Extension *)getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid {
  
#line 114
  if (extensions_ != nil) {
    
#line 116
    return [extensions_ getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:oid];
  }
  
#line 119
  return nil;
}


#line 127
- (OrgSpongycastleAsn1X509Extensions *)getExtensions {
  
#line 129
  return extensions_;
}


#line 138
- (id<JavaUtilList>)getExtensionOIDs {
  
#line 140
  return OrgSpongycastleCertCertUtils_getExtensionOIDsWithOrgSpongycastleAsn1X509Extensions_(extensions_);
}


#line 149
- (id<JavaUtilSet>)getCriticalExtensionOIDs {
  
#line 151
  return OrgSpongycastleCertCertUtils_getCriticalExtensionOIDsWithOrgSpongycastleAsn1X509Extensions_(extensions_);
}


#line 160
- (id<JavaUtilSet>)getNonCriticalExtensionOIDs {
  
#line 162
  return OrgSpongycastleCertCertUtils_getNonCriticalExtensionOIDsWithOrgSpongycastleAsn1X509Extensions_(extensions_);
}


#line 170
- (JavaMathBigInteger *)getSerialNumber {
  
#line 172
  return [((OrgSpongycastleAsn1ASN1Integer *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getSerialNumber])) getValue];
}


#line 180
- (OrgSpongycastleAsn1X500X500Name *)getIssuer {
  
#line 182
  return OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getIssuer]);
}


#line 190
- (OrgSpongycastleAsn1X500X500Name *)getSubject {
  
#line 192
  return OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getSubject]);
}


#line 200
- (JavaUtilDate *)getNotBefore {
  
#line 202
  return [((OrgSpongycastleAsn1X509BCTime *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getStartDate])) getDate];
}


#line 210
- (JavaUtilDate *)getNotAfter {
  
#line 212
  return [((OrgSpongycastleAsn1X509BCTime *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getEndDate])) getDate];
}


#line 220
- (OrgSpongycastleAsn1X509SubjectPublicKeyInfo *)getSubjectPublicKeyInfo {
  
#line 222
  return [((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getSubjectPublicKeyInfo];
}


#line 230
- (OrgSpongycastleAsn1X509Certificate *)toASN1Structure {
  
#line 232
  return x509Certificate_;
}


#line 240
- (OrgSpongycastleAsn1X509AlgorithmIdentifier *)getSignatureAlgorithm {
  
#line 242
  return [((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getSignatureAlgorithm];
}


#line 250
- (IOSByteArray *)getSignature {
  
#line 252
  return [((OrgSpongycastleAsn1DERBitString *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getSignature])) getOctets];
}


#line 261
- (jboolean)isValidOnWithJavaUtilDate:(JavaUtilDate *)date {
  
#line 263
  return ![((JavaUtilDate *) nil_chk(date)) beforeWithJavaUtilDate:[((OrgSpongycastleAsn1X509BCTime *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getStartDate])) getDate]] && ![date afterWithJavaUtilDate:[((OrgSpongycastleAsn1X509BCTime *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getEndDate])) getDate]];
}


#line 273
- (jboolean)isSignatureValidWithOrgSpongycastleOperatorContentVerifierProvider:(id<OrgSpongycastleOperatorContentVerifierProvider>)verifierProvider {
  
#line 276
  OrgSpongycastleAsn1X509TBSCertificate *tbsCert = [((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getTBSCertificate];
  
#line 278
  if (!OrgSpongycastleCertCertUtils_isAlgIdEqualWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withOrgSpongycastleAsn1X509AlgorithmIdentifier_([((OrgSpongycastleAsn1X509TBSCertificate *) nil_chk(tbsCert)) getSignature], [((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getSignatureAlgorithm])) {
    
#line 280
    @throw new_OrgSpongycastleCertCertException_initWithNSString_(@"signature invalid - algorithm identifier mismatch");
  }
  
#line 283
  id<OrgSpongycastleOperatorContentVerifier> verifier;
  
#line 285
  @try {
    
#line 287
    verifier = [((id<OrgSpongycastleOperatorContentVerifierProvider>) nil_chk(verifierProvider)) getWithOrgSpongycastleAsn1X509AlgorithmIdentifier:([tbsCert getSignature])];
    
#line 289
    JavaIoOutputStream *sOut = [((id<OrgSpongycastleOperatorContentVerifier>) nil_chk(verifier)) getOutputStream];
    OrgSpongycastleAsn1BCDEROutputStream *dOut = new_OrgSpongycastleAsn1BCDEROutputStream_initWithJavaIoOutputStream_(sOut);
    
#line 292
    [dOut writeObjectWithOrgSpongycastleAsn1ASN1Encodable:tbsCert];
    
#line 294
    [((JavaIoOutputStream *) nil_chk(sOut)) close];
  }
  @catch (JavaLangException *e) {
    
#line 298
    @throw new_OrgSpongycastleCertCertException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"unable to process signature: ", [e getMessage]), e);
  }
  
#line 301
  return [((id<OrgSpongycastleOperatorContentVerifier>) nil_chk(verifier)) verifyWithByteArray:[self getSignature]];
}


#line 304
- (jboolean)isEqual:(id)o {
  
#line 307
  if (JreObjectEqualsEquals(o, self)) {
    
#line 309
    return true;
  }
  
#line 312
  if (!([o isKindOfClass:[OrgSpongycastleCertX509CertificateHolder class]])) {
    
#line 314
    return false;
  }
  
#line 317
  OrgSpongycastleCertX509CertificateHolder *other = (OrgSpongycastleCertX509CertificateHolder *) cast_chk(o, [OrgSpongycastleCertX509CertificateHolder class]);
  
#line 319
  return [((OrgSpongycastleAsn1X509Certificate *) nil_chk(self->x509Certificate_)) isEqual:((OrgSpongycastleCertX509CertificateHolder *) nil_chk(other))->x509Certificate_];
}


#line 322
- (NSUInteger)hash {
  
#line 324
  return ((jint) [((OrgSpongycastleAsn1X509Certificate *) nil_chk(self->x509Certificate_)) hash]);
}


#line 333
- (IOSByteArray *)getEncoded {
  
#line 336
  return [((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Certificate_)) getEncoded];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  OrgSpongycastleCertX509CertificateHolder_readObjectWithJavaIoObjectInputStream_(self, inArg);
}


#line 348
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  OrgSpongycastleCertX509CertificateHolder_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgSpongycastleAsn1X509Certificate;", 0xa, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509Extension;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509Extensions;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509SubjectPublicKeyInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509Certificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509AlgorithmIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, 11, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 16, 17, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(parseBytesWithByteArray:);
  methods[1].selector = @selector(initWithByteArray:);
  methods[2].selector = @selector(initWithOrgSpongycastleAsn1X509Certificate:);
  methods[3].selector = @selector(init__WithOrgSpongycastleAsn1X509Certificate:);
  methods[4].selector = @selector(getVersionNumber);
  methods[5].selector = @selector(getVersion);
  methods[6].selector = @selector(hasExtensions);
  methods[7].selector = @selector(getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:);
  methods[8].selector = @selector(getExtensions);
  methods[9].selector = @selector(getExtensionOIDs);
  methods[10].selector = @selector(getCriticalExtensionOIDs);
  methods[11].selector = @selector(getNonCriticalExtensionOIDs);
  methods[12].selector = @selector(getSerialNumber);
  methods[13].selector = @selector(getIssuer);
  methods[14].selector = @selector(getSubject);
  methods[15].selector = @selector(getNotBefore);
  methods[16].selector = @selector(getNotAfter);
  methods[17].selector = @selector(getSubjectPublicKeyInfo);
  methods[18].selector = @selector(toASN1Structure);
  methods[19].selector = @selector(getSignatureAlgorithm);
  methods[20].selector = @selector(getSignature);
  methods[21].selector = @selector(isValidOnWithJavaUtilDate:);
  methods[22].selector = @selector(isSignatureValidWithOrgSpongycastleOperatorContentVerifierProvider:);
  methods[23].selector = @selector(isEqual:);
  methods[24].selector = @selector(hash);
  methods[25].selector = @selector(getEncoded);
  methods[26].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[27].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgSpongycastleCertX509CertificateHolder_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "x509Certificate_", "LOrgSpongycastleAsn1X509Certificate;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "extensions_", "LOrgSpongycastleAsn1X509Extensions;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "parseBytes", "[B", "LJavaIoIOException;", "LOrgSpongycastleAsn1X509Certificate;", "init", "getExtension", "LOrgSpongycastleAsn1ASN1ObjectIdentifier;", "isValidOn", "LJavaUtilDate;", "isSignatureValid", "LOrgSpongycastleOperatorContentVerifierProvider;", "LOrgSpongycastleCertCertException;", "equals", "LNSObject;", "hashCode", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;" };
  static const J2ObjcClassInfo _OrgSpongycastleCertX509CertificateHolder = { "X509CertificateHolder", "org.spongycastle.cert", ptrTable, methods, fields, 7, 0x1, 28, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCertX509CertificateHolder;
}

@end


#line 37
OrgSpongycastleAsn1X509Certificate *OrgSpongycastleCertX509CertificateHolder_parseBytesWithByteArray_(IOSByteArray *certEncoding) {
  OrgSpongycastleCertX509CertificateHolder_initialize();
  
#line 40
  @try {
    
#line 42
    return OrgSpongycastleAsn1X509Certificate_getInstanceWithId_(OrgSpongycastleCertCertUtils_parseNonEmptyASN1WithByteArray_(certEncoding));
  }
  @catch (JavaLangClassCastException *e) {
    
#line 46
    @throw new_OrgSpongycastleCertCertIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"malformed data: ", [e getMessage]), e);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    
#line 50
    @throw new_OrgSpongycastleCertCertIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"malformed data: ", [e getMessage]), e);
  }
}


#line 60
void OrgSpongycastleCertX509CertificateHolder_initWithByteArray_(OrgSpongycastleCertX509CertificateHolder *self, IOSByteArray *certEncoding) {
  OrgSpongycastleCertX509CertificateHolder_initWithOrgSpongycastleAsn1X509Certificate_(self, OrgSpongycastleCertX509CertificateHolder_parseBytesWithByteArray_(
#line 63
  certEncoding));
}


#line 60
OrgSpongycastleCertX509CertificateHolder *new_OrgSpongycastleCertX509CertificateHolder_initWithByteArray_(IOSByteArray *certEncoding) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCertX509CertificateHolder, initWithByteArray_, certEncoding)
}


#line 60
OrgSpongycastleCertX509CertificateHolder *create_OrgSpongycastleCertX509CertificateHolder_initWithByteArray_(IOSByteArray *certEncoding) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCertX509CertificateHolder, initWithByteArray_, certEncoding)
}


#line 71
void OrgSpongycastleCertX509CertificateHolder_initWithOrgSpongycastleAsn1X509Certificate_(OrgSpongycastleCertX509CertificateHolder *self, OrgSpongycastleAsn1X509Certificate *x509Certificate) {
  NSObject_init(self);
  OrgSpongycastleCertX509CertificateHolder_init__WithOrgSpongycastleAsn1X509Certificate_(self, x509Certificate);
}


#line 71
OrgSpongycastleCertX509CertificateHolder *new_OrgSpongycastleCertX509CertificateHolder_initWithOrgSpongycastleAsn1X509Certificate_(OrgSpongycastleAsn1X509Certificate *x509Certificate) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCertX509CertificateHolder, initWithOrgSpongycastleAsn1X509Certificate_, x509Certificate)
}


#line 71
OrgSpongycastleCertX509CertificateHolder *create_OrgSpongycastleCertX509CertificateHolder_initWithOrgSpongycastleAsn1X509Certificate_(OrgSpongycastleAsn1X509Certificate *x509Certificate) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCertX509CertificateHolder, initWithOrgSpongycastleAsn1X509Certificate_, x509Certificate)
}


#line 76
void OrgSpongycastleCertX509CertificateHolder_init__WithOrgSpongycastleAsn1X509Certificate_(OrgSpongycastleCertX509CertificateHolder *self, OrgSpongycastleAsn1X509Certificate *x509Certificate) {
  
#line 78
  self->x509Certificate_ = x509Certificate;
  self->extensions_ = [((OrgSpongycastleAsn1X509TBSCertificate *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Certificate)) getTBSCertificate])) getExtensions];
}


#line 339
void OrgSpongycastleCertX509CertificateHolder_readObjectWithJavaIoObjectInputStream_(OrgSpongycastleCertX509CertificateHolder *self, JavaIoObjectInputStream *inArg) {
  
#line 343
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  
#line 345
  OrgSpongycastleCertX509CertificateHolder_init__WithOrgSpongycastleAsn1X509Certificate_(self, OrgSpongycastleAsn1X509Certificate_getInstanceWithId_([inArg readObject]));
}

void OrgSpongycastleCertX509CertificateHolder_writeObjectWithJavaIoObjectOutputStream_(OrgSpongycastleCertX509CertificateHolder *self, JavaIoObjectOutputStream *outArg) {
  
#line 352
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  
#line 354
  [outArg writeObjectWithId:[self getEncoded]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCertX509CertificateHolder)
