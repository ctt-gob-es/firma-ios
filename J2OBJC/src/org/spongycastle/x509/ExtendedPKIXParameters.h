//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/x509/ExtendedPKIXParameters.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleX509ExtendedPKIXParameters")
#ifdef RESTRICT_OrgSpongycastleX509ExtendedPKIXParameters
#define INCLUDE_ALL_OrgSpongycastleX509ExtendedPKIXParameters 0
#else
#define INCLUDE_ALL_OrgSpongycastleX509ExtendedPKIXParameters 1
#endif
#undef RESTRICT_OrgSpongycastleX509ExtendedPKIXParameters

#if !defined (OrgSpongycastleX509ExtendedPKIXParameters_) && (INCLUDE_ALL_OrgSpongycastleX509ExtendedPKIXParameters || defined(INCLUDE_OrgSpongycastleX509ExtendedPKIXParameters))
#define OrgSpongycastleX509ExtendedPKIXParameters_

#define RESTRICT_JavaSecurityCertPKIXParameters 1
#define INCLUDE_JavaSecurityCertPKIXParameters 1
#include "java/security/cert/PKIXParameters.h"

@class JavaSecurityKeyStore;
@protocol JavaSecurityCertCertSelector;
@protocol JavaUtilList;
@protocol JavaUtilSet;
@protocol OrgSpongycastleUtilSelector;
@protocol OrgSpongycastleUtilStore;

/*!
 @brief This class extends the PKIXParameters with a validity model parameter.
 */
@interface OrgSpongycastleX509ExtendedPKIXParameters : JavaSecurityCertPKIXParameters

#pragma mark Public

/*!
 @brief Creates an instance of <code>PKIXParameters</code> with the specified 
 <code>Set</code> of most-trusted CAs.Each element of the set is a 
 <code>TrustAnchor</code>.
 <p>
      Note that the <code>Set</code>
  is copied to protect against subsequent modifications. 
 </p>
 @param trustAnchors a  <code> Set </code>  of  <code> TrustAnchor </code>
  s
 @throw InvalidAlgorithmParameterExceptionif the specified
              <code>Set</code> is empty.
 @throw NullPointerExceptionif the specified <code>Set</code> is
              <code>null</code>
 @throw ClassCastExceptionif any of the elements in the <code>Set</code>
              is not of type <code>java.security.cert.TrustAnchor</code>
 */
- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)trustAnchors;

/*!
 */
- (void)addAddionalStoreWithOrgSpongycastleUtilStore:(id<OrgSpongycastleUtilStore>)store;

/*!
 @brief Adds an additional Bouncy Castle <code>Store</code> to find CRLs, certificates,
  attribute certificates or cross certificates.
 <p>
  You should not use this method. This method is used for adding additional
  X.509 stores, which are used to add (remote) locations, e.g. LDAP, found
  during X.509 object processing, e.g. in certificates or CRLs. This method
  is used in PKIX certification path processing. 
 <p>
  If <code>store</code> is <code>null</code> it is ignored.
 @param store The store to add.
 - seealso: #getStores()
 */
- (void)addAdditionalStoreWithOrgSpongycastleUtilStore:(id<OrgSpongycastleUtilStore>)store;

/*!
 @brief Adds a Bouncy Castle <code>Store</code> to find CRLs, certificates, attribute
  certificates or cross certificates.
 <p>
  This method should be used to add local stores, like collection based
  X.509 stores, if available. Local stores should be considered first,
  before trying to use additional (remote) locations, because they do not
  need possible additional network traffic. 
 <p>
  If <code>store</code> is <code>null</code> it is ignored.
 @param store The store to add.
 - seealso: #getStores
 */
- (void)addStoreWithOrgSpongycastleUtilStore:(id<OrgSpongycastleUtilStore>)store;

- (id)java_clone;

/*!
 @brief Returns an immutable <code>List</code> of additional Bouncy Castle 
 <code>Store</code>s used for finding CRLs, certificates, attribute
  certificates or cross certificates.
 @return an immutable <code>List</code> of additional Bouncy Castle
          <code>Store</code>s. Never <code>null</code>.
 - seealso: #addAdditionalStore(Store)
 */
- (id<JavaUtilList>)getAdditionalStores;

/*!
 @brief Returns the attribute certificate checker.The returned set contains 
 <code>PKIXAttrCertChecker</code>s and is immutable.
 @return Returns the attribute certificate checker. Is never
          <code>null</code>.
 */
- (id<JavaUtilSet>)getAttrCertCheckers;

/*!
 @brief Returns an instance with the parameters of a given 
 <code>PKIXParameters</code> object.
 @param pkixParams The given  <code> PKIXParameters </code>
 @return an extended PKIX params object
 */
+ (OrgSpongycastleX509ExtendedPKIXParameters *)getInstanceWithJavaSecurityCertPKIXParameters:(JavaSecurityCertPKIXParameters *)pkixParams;

/*!
 @brief Returns the neccessary attributes which must be contained in an attribute
  certificate.
 <p>
  The returned <code>Set</code> is immutable and contains 
 <code>String</code>s with the OIDs.
 @return Returns the necessary AC attributes.
 */
- (id<JavaUtilSet>)getNecessaryACAttributes;

/*!
 @brief Returns the attribute certificates which are not allowed.
 <p>
  The returned <code>Set</code> is immutable and contains 
 <code>String</code>s with the OIDs.
 @return Returns the prohibited AC attributes. Is never <code>null</code>.
 */
- (id<JavaUtilSet>)getProhibitedACAttributes;

/*!
 @brief Returns an immutable <code>List</code> of Bouncy Castle 
 <code>Store</code>s used for finding CRLs, certificates, attribute
  certificates or cross certificates.
 @return an immutable <code>List</code> of Bouncy Castle
          <code>Store</code>s. Never <code>null</code>.
 - seealso: #setStores(List)
 */
- (id<JavaUtilList>)getStores;

/*!
 @brief Returns the required constraints on the target certificate or attribute
  certificate.The constraints are returned as an instance of 
 <code>Selector</code>.
 If <code>null</code>, no constraints are
  defined.  
 <p>
  The target certificate in a PKIX path may be a certificate or an
  attribute certificate. 
 <p>
  Note that the <code>Selector</code> returned is cloned to protect
  against subsequent modifications.
 @return a <code>Selector</code> specifying the constraints on the
          target certificate or attribute certificate (or <code>null</code>)
 - seealso: #setTargetConstraints
 - seealso: X509CertStoreSelector
 - seealso: X509AttributeCertStoreSelector
 */
- (id<OrgSpongycastleUtilSelector>)getTargetConstraints;

/*!
 @brief Returns the trusted attribute certificate issuers.If attribute
  certificates is verified the trusted AC issuers must be set.
 <p>
  The returned <code>Set</code> consists of <code>TrustAnchor</code>s.
  <p>
  The returned <code>Set</code> is immutable. Never <code>null</code>
 @return Returns an immutable set of the trusted AC issuers.
 */
- (id<JavaUtilSet>)getTrustedACIssuers;

/*!
 @return Returns the validity model.
 - seealso: #CHAIN_VALIDITY_MODEL
 - seealso: #PKIX_VALIDITY_MODEL
 */
- (jint)getValidityModel;

/*!
 @brief Returns if additional <code>X509Store</code>s for locations like LDAP found
  in certificates or CRLs should be used.
 @return Returns <code>true</code> if additional stores are used.
 */
- (jboolean)isAdditionalLocationsEnabled;

/*!
 @brief Defaults to <code>false</code>.
 @return Returns if delta CRLs should be used.
 */
- (jboolean)isUseDeltasEnabled;

/*!
 @brief Sets if additional <code>X509Store</code>s for locations like LDAP found in
  certificates or CRLs should be used.
 @param enabled <code> true </code>  if additional stores are used.
 */
- (void)setAdditionalLocationsEnabledWithBoolean:(jboolean)enabled;

/*!
 @brief Sets the attribute certificate checkers.
 <p>
  All elements in the <code>Set</code> must a <code>PKIXAttrCertChecker</code>.
  <p>
  The given set is cloned.
 @param attrCertCheckers The attribute certificate checkers to set. Is             never 
  <code> null </code> .
 @throw ClassCastExceptionif an element of <code>attrCertCheckers</code>
              is not a <code>PKIXAttrCertChecker</code>.
 */
- (void)setAttrCertCheckersWithJavaUtilSet:(id<JavaUtilSet>)attrCertCheckers;

/*!
 @brief Sets the Java CertStore to this extended PKIX parameters.
 @throw ClassCastExceptionif an element of <code>stores</code> is not
              a <code>CertStore</code>.
 */
- (void)setCertStoresWithJavaUtilList:(id<JavaUtilList>)stores;

/*!
 @brief Sets the neccessary which must be contained in an attribute certificate.
 <p>
  The <code>Set</code> must contain <code>String</code>s with the
  OIDs. 
 <p>
  The set is cloned.
 @param necessaryACAttributes The necessary AC attributes to set.
 @throw ClassCastExceptionif an element of
              <code>necessaryACAttributes</code> is not a
              <code>String</code>.
 */
- (void)setNecessaryACAttributesWithJavaUtilSet:(id<JavaUtilSet>)necessaryACAttributes;

/*!
 @brief Sets the attribute certificates which are not allowed.
 <p>
  The <code>Set</code> must contain <code>String</code>s with the
  OIDs. 
 <p>
  The set is cloned.
 @param prohibitedACAttributes The prohibited AC attributes to set.
 @throw ClassCastExceptionif an element of
              <code>prohibitedACAttributes</code> is not a
              <code>String</code>.
 */
- (void)setProhibitedACAttributesWithJavaUtilSet:(id<JavaUtilSet>)prohibitedACAttributes;

/*!
 @brief Sets the Bouncy Castle Stores for finding CRLs, certificates, attribute
  certificates or cross certificates.
 <p>
  The <code>List</code> is cloned.
 @param stores A list of stores to use.
 - seealso: #getStores
 @throw ClassCastExceptionif an element of <code>stores</code> is not
              a <code>Store</code>.
 */
- (void)setStoresWithJavaUtilList:(id<JavaUtilList>)stores;

/*!
 @brief Sets the required constraints on the target certificate.The constraints
  are specified as an instance of <code>X509CertSelector</code>.
 If 
 <code>null</code>, no constraints are defined.  
 <p>
  This method wraps the given <code>X509CertSelector</code> into a 
 <code>X509CertStoreSelector</code>.
  <p>
  Note that the <code>X509CertSelector</code> specified is cloned to
  protect against subsequent modifications.
 @param selector a  <code> X509CertSelector </code>  specifying the
              constraints on the target certificate (or  <code> null </code> )
 - seealso: #getTargetCertConstraints
 - seealso: X509CertStoreSelector
 */
- (void)setTargetCertConstraintsWithJavaSecurityCertCertSelector:(id<JavaSecurityCertCertSelector>)selector;

/*!
 @brief Sets the required constraints on the target certificate or attribute
  certificate.The constraints are specified as an instance of 
 <code>Selector</code>.
 If <code>null</code>, no constraints are
  defined. 
 <p>
  The target certificate in a PKIX path may be a certificate or an
  attribute certificate. 
 <p>
  Note that the <code>Selector</code> specified is cloned to protect
  against subsequent modifications.
 @param selector a  <code> Selector </code>  specifying the constraints on
              the target certificate or attribute certificate (or             
  <code> null </code> )
 - seealso: #getTargetConstraints
 - seealso: X509CertStoreSelector
 - seealso: X509AttributeCertStoreSelector
 */
- (void)setTargetConstraintsWithOrgSpongycastleUtilSelector:(id<OrgSpongycastleUtilSelector>)selector;

/*!
 @brief Sets the trusted attribute certificate issuers.If attribute certificates
  is verified the trusted AC issuers must be set.
 <p>
  The <code>trustedACIssuers</code> must be a <code>Set</code> of 
 <code>TrustAnchor</code>
  <p>
  The given set is cloned.
 @param trustedACIssuers The trusted AC issuers to set. Is never             
  <code> null </code> .
 @throw ClassCastExceptionif an element of <code>stores</code> is not
              a <code>TrustAnchor</code>.
 */
- (void)setTrustedACIssuersWithJavaUtilSet:(id<JavaUtilSet>)trustedACIssuers;

/*!
 @brief Sets if delta CRLs should be used for checking the revocation status.
 @param useDeltas <code> true </code>  if delta CRLs should be used.
 */
- (void)setUseDeltasEnabledWithBoolean:(jboolean)useDeltas;

/*!
 @param validityModel The validity model to set.
 - seealso: #CHAIN_VALIDITY_MODEL
 - seealso: #PKIX_VALIDITY_MODEL
 */
- (void)setValidityModelWithInt:(jint)validityModel;

#pragma mark Protected

/*!
 @brief Method to support <code>clone()</code> under J2ME.
 <code>super.clone()</code> does not exist and fields are not copied.
 @param params Parameters to set. If this are             
  <code> ExtendedPKIXParameters </code>  they are copied to.
 */
- (void)setParamsWithJavaSecurityCertPKIXParameters:(JavaSecurityCertPKIXParameters *)params;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithJavaSecurityKeyStore:(JavaSecurityKeyStore *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleX509ExtendedPKIXParameters)

/*!
 @brief This is the default PKIX validity model.Actually there are two variants
  of this: The PKIX model and the modified PKIX model.
 The PKIX model
  verifies that all involved certificates must have been valid at the
  current time. The modified PKIX model verifies that all involved
  certificates were valid at the signing time. Both are indirectly choosen
  with the <code>PKIXParameters.setDate(java.util.Date)</code> method, so this
  methods sets the Date when <em>all</em> certificates must have been
  valid.
 */
inline jint OrgSpongycastleX509ExtendedPKIXParameters_get_PKIX_VALIDITY_MODEL(void);
#define OrgSpongycastleX509ExtendedPKIXParameters_PKIX_VALIDITY_MODEL 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleX509ExtendedPKIXParameters, PKIX_VALIDITY_MODEL, jint)

/*!
 @brief This model uses the following validity model.Each certificate must have
  been valid at the moment where is was used.
 That means the end
  certificate must have been valid at the time the signature was done. The
  CA certificate which signed the end certificate must have been valid,
  when the end certificate was signed. The CA (or Root CA) certificate must
  have been valid, when the CA certificate was signed and so on. So the 
 <code>PKIXParameters.setDate(java.util.Date)</code> method sets the time, when the 
 <em>end certificate</em> must have been valid. 
 <p>
  It is used e.g.
  in the German signature law. 
 </p>
 */
inline jint OrgSpongycastleX509ExtendedPKIXParameters_get_CHAIN_VALIDITY_MODEL(void);
#define OrgSpongycastleX509ExtendedPKIXParameters_CHAIN_VALIDITY_MODEL 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleX509ExtendedPKIXParameters, CHAIN_VALIDITY_MODEL, jint)

FOUNDATION_EXPORT void OrgSpongycastleX509ExtendedPKIXParameters_initWithJavaUtilSet_(OrgSpongycastleX509ExtendedPKIXParameters *self, id<JavaUtilSet> trustAnchors);

FOUNDATION_EXPORT OrgSpongycastleX509ExtendedPKIXParameters *new_OrgSpongycastleX509ExtendedPKIXParameters_initWithJavaUtilSet_(id<JavaUtilSet> trustAnchors) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleX509ExtendedPKIXParameters *create_OrgSpongycastleX509ExtendedPKIXParameters_initWithJavaUtilSet_(id<JavaUtilSet> trustAnchors);

FOUNDATION_EXPORT OrgSpongycastleX509ExtendedPKIXParameters *OrgSpongycastleX509ExtendedPKIXParameters_getInstanceWithJavaSecurityCertPKIXParameters_(JavaSecurityCertPKIXParameters *pkixParams);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleX509ExtendedPKIXParameters)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleX509ExtendedPKIXParameters")
