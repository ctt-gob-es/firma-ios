//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/math/ec/ECCurve.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleMathEcECCurve")
#ifdef RESTRICT_OrgSpongycastleMathEcECCurve
#define INCLUDE_ALL_OrgSpongycastleMathEcECCurve 0
#else
#define INCLUDE_ALL_OrgSpongycastleMathEcECCurve 1
#endif
#undef RESTRICT_OrgSpongycastleMathEcECCurve
#ifdef INCLUDE_OrgSpongycastleMathEcECCurve_F2m
#define INCLUDE_OrgSpongycastleMathEcECCurve_AbstractF2m 1
#endif
#ifdef INCLUDE_OrgSpongycastleMathEcECCurve_AbstractF2m
#define INCLUDE_OrgSpongycastleMathEcECCurve 1
#endif
#ifdef INCLUDE_OrgSpongycastleMathEcECCurve_Fp
#define INCLUDE_OrgSpongycastleMathEcECCurve_AbstractFp 1
#endif
#ifdef INCLUDE_OrgSpongycastleMathEcECCurve_AbstractFp
#define INCLUDE_OrgSpongycastleMathEcECCurve 1
#endif

#if !defined (OrgSpongycastleMathEcECCurve_) && (INCLUDE_ALL_OrgSpongycastleMathEcECCurve || defined(INCLUDE_OrgSpongycastleMathEcECCurve))
#define OrgSpongycastleMathEcECCurve_

@class IOSByteArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaMathBigInteger;
@class OrgSpongycastleMathEcECCurve_Config;
@class OrgSpongycastleMathEcECFieldElement;
@class OrgSpongycastleMathEcECPoint;
@protocol OrgSpongycastleMathEcECMultiplier;
@protocol OrgSpongycastleMathEcEndoECEndomorphism;
@protocol OrgSpongycastleMathEcPreCompInfo;
@protocol OrgSpongycastleMathFieldFiniteField;

/*!
 @brief base class for an elliptic curve
 */
@interface OrgSpongycastleMathEcECCurve : NSObject {
 @public
  id<OrgSpongycastleMathFieldFiniteField> field_;
  OrgSpongycastleMathEcECFieldElement *a_;
  OrgSpongycastleMathEcECFieldElement *b_;
  JavaMathBigInteger *order_;
  JavaMathBigInteger *cofactor_;
  jint coord_;
  id<OrgSpongycastleMathEcEndoECEndomorphism> endomorphism_;
  id<OrgSpongycastleMathEcECMultiplier> multiplier_;
}

#pragma mark Public

- (OrgSpongycastleMathEcECCurve_Config *)configure;

- (OrgSpongycastleMathEcECPoint *)createPointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                             withJavaMathBigInteger:(JavaMathBigInteger *)y;

/*!
 */
- (OrgSpongycastleMathEcECPoint *)createPointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                             withJavaMathBigInteger:(JavaMathBigInteger *)y
                                                        withBoolean:(jboolean)withCompression;

/*!
 @brief Decode a point on this curve from its ASN.1 encoding.The different
  encodings are taken account of, including point compression for 
 <code>F<sub>p</sub></code> (X9.62 s 4.2.1 pg 17).
 @return The decoded point.
 */
- (OrgSpongycastleMathEcECPoint *)decodePointWithByteArray:(IOSByteArray *)encoded;

- (jboolean)equalsWithOrgSpongycastleMathEcECCurve:(OrgSpongycastleMathEcECCurve *)other;

- (jboolean)isEqual:(id)obj;

- (OrgSpongycastleMathEcECFieldElement *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x;

- (OrgSpongycastleMathEcECFieldElement *)getA;

+ (IOSIntArray *)getAllCoordinateSystems;

- (OrgSpongycastleMathEcECFieldElement *)getB;

- (JavaMathBigInteger *)getCofactor;

- (jint)getCoordinateSystem;

- (id<OrgSpongycastleMathEcEndoECEndomorphism>)getEndomorphism;

- (id<OrgSpongycastleMathFieldFiniteField>)getField;

- (jint)getFieldSize;

- (OrgSpongycastleMathEcECPoint *)getInfinity;

/*!
 @brief Sets the default <code>ECMultiplier</code>, unless already set.
 */
- (id<OrgSpongycastleMathEcECMultiplier>)getMultiplier;

- (JavaMathBigInteger *)getOrder;

- (id<OrgSpongycastleMathEcPreCompInfo>)getPreCompInfoWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)point
                                                                          withNSString:(NSString *)name;

- (NSUInteger)hash;

- (OrgSpongycastleMathEcECPoint *)importPointWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p;

- (jboolean)isValidFieldElementWithJavaMathBigInteger:(JavaMathBigInteger *)x;

/*!
 @brief Normalization ensures that any projective coordinate is 1, and therefore that the x, y
  coordinates reflect those of the equivalent point in an affine coordinate system.Where more
  than one point is to be normalized, this method will generally be more efficient than
  normalizing each point separately.
 @param points An array of points that will be updated in place with their normalized versions,
              where necessary
 */
- (void)normalizeAllWithOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)points;

/*!
 @brief Normalization ensures that any projective coordinate is 1, and therefore that the x, y
  coordinates reflect those of the equivalent point in an affine coordinate system.Where more
  than one point is to be normalized, this method will generally be more efficient than
  normalizing each point separately.
 An (optional) z-scaling factor can be applied; effectively
  each z coordinate is scaled by this value prior to normalization (but only one
  actual multiplication is needed).
 @param points An array of points that will be updated in place with their normalized versions,
              where necessary
 @param off The start of the range of points to normalize
 @param len The length of the range of points to normalize
 @param iso The (optional) z-scaling factor - can be null
 */
- (void)normalizeAllWithOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)points
                                                  withInt:(jint)off
                                                  withInt:(jint)len
                  withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)iso;

/*!
 @brief Adds <code>PreCompInfo</code> for a point on this curve, under a given name.Used by 
 <code>ECMultiplier</code>s to save the precomputation for this <code>ECPoint</code> for use
  by subsequent multiplication.
 @param point The 
  <code> ECPoint </code>  to store precomputations for.
 @param name A 
  <code> String </code>  used to index precomputations of different types.
 @param preCompInfo The values precomputed by the 
  <code> ECMultiplier </code> .
 */
- (void)setPreCompInfoWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)point
                                          withNSString:(NSString *)name
                  withOrgSpongycastleMathEcPreCompInfo:(id<OrgSpongycastleMathEcPreCompInfo>)preCompInfo;

- (jboolean)supportsCoordinateSystemWithInt:(jint)coord;

- (OrgSpongycastleMathEcECPoint *)validatePointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                               withJavaMathBigInteger:(JavaMathBigInteger *)y;

/*!
 */
- (OrgSpongycastleMathEcECPoint *)validatePointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                               withJavaMathBigInteger:(JavaMathBigInteger *)y
                                                          withBoolean:(jboolean)withCompression;

#pragma mark Protected

- (instancetype)initWithOrgSpongycastleMathFieldFiniteField:(id<OrgSpongycastleMathFieldFiniteField>)field;

- (void)checkPointWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)point;

- (void)checkPointsWithOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)points;

- (void)checkPointsWithOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)points
                                                 withInt:(jint)off
                                                 withInt:(jint)len;

- (OrgSpongycastleMathEcECCurve *)cloneCurve;

- (id<OrgSpongycastleMathEcECMultiplier>)createDefaultMultiplier;

- (OrgSpongycastleMathEcECPoint *)createRawPointWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y
                                                                            withBoolean:(jboolean)withCompression;

- (OrgSpongycastleMathEcECPoint *)createRawPointWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y
                                           withOrgSpongycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                                            withBoolean:(jboolean)withCompression;

- (OrgSpongycastleMathEcECPoint *)decompressPointWithInt:(jint)yTilde
                                  withJavaMathBigInteger:(JavaMathBigInteger *)X1;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleMathEcECCurve)

J2OBJC_FIELD_SETTER(OrgSpongycastleMathEcECCurve, field_, id<OrgSpongycastleMathFieldFiniteField>)
J2OBJC_FIELD_SETTER(OrgSpongycastleMathEcECCurve, a_, OrgSpongycastleMathEcECFieldElement *)
J2OBJC_FIELD_SETTER(OrgSpongycastleMathEcECCurve, b_, OrgSpongycastleMathEcECFieldElement *)
J2OBJC_FIELD_SETTER(OrgSpongycastleMathEcECCurve, order_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgSpongycastleMathEcECCurve, cofactor_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgSpongycastleMathEcECCurve, endomorphism_, id<OrgSpongycastleMathEcEndoECEndomorphism>)
J2OBJC_FIELD_SETTER(OrgSpongycastleMathEcECCurve, multiplier_, id<OrgSpongycastleMathEcECMultiplier>)

inline jint OrgSpongycastleMathEcECCurve_get_COORD_AFFINE(void);
#define OrgSpongycastleMathEcECCurve_COORD_AFFINE 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleMathEcECCurve, COORD_AFFINE, jint)

inline jint OrgSpongycastleMathEcECCurve_get_COORD_HOMOGENEOUS(void);
#define OrgSpongycastleMathEcECCurve_COORD_HOMOGENEOUS 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleMathEcECCurve, COORD_HOMOGENEOUS, jint)

inline jint OrgSpongycastleMathEcECCurve_get_COORD_JACOBIAN(void);
#define OrgSpongycastleMathEcECCurve_COORD_JACOBIAN 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleMathEcECCurve, COORD_JACOBIAN, jint)

inline jint OrgSpongycastleMathEcECCurve_get_COORD_JACOBIAN_CHUDNOVSKY(void);
#define OrgSpongycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleMathEcECCurve, COORD_JACOBIAN_CHUDNOVSKY, jint)

inline jint OrgSpongycastleMathEcECCurve_get_COORD_JACOBIAN_MODIFIED(void);
#define OrgSpongycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleMathEcECCurve, COORD_JACOBIAN_MODIFIED, jint)

inline jint OrgSpongycastleMathEcECCurve_get_COORD_LAMBDA_AFFINE(void);
#define OrgSpongycastleMathEcECCurve_COORD_LAMBDA_AFFINE 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleMathEcECCurve, COORD_LAMBDA_AFFINE, jint)

inline jint OrgSpongycastleMathEcECCurve_get_COORD_LAMBDA_PROJECTIVE(void);
#define OrgSpongycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleMathEcECCurve, COORD_LAMBDA_PROJECTIVE, jint)

inline jint OrgSpongycastleMathEcECCurve_get_COORD_SKEWED(void);
#define OrgSpongycastleMathEcECCurve_COORD_SKEWED 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleMathEcECCurve, COORD_SKEWED, jint)

FOUNDATION_EXPORT IOSIntArray *OrgSpongycastleMathEcECCurve_getAllCoordinateSystems(void);

FOUNDATION_EXPORT void OrgSpongycastleMathEcECCurve_initWithOrgSpongycastleMathFieldFiniteField_(OrgSpongycastleMathEcECCurve *self, id<OrgSpongycastleMathFieldFiniteField> field);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleMathEcECCurve)

#endif

#if !defined (OrgSpongycastleMathEcECCurve_Config_) && (INCLUDE_ALL_OrgSpongycastleMathEcECCurve || defined(INCLUDE_OrgSpongycastleMathEcECCurve_Config))
#define OrgSpongycastleMathEcECCurve_Config_

@class OrgSpongycastleMathEcECCurve;
@protocol OrgSpongycastleMathEcECMultiplier;
@protocol OrgSpongycastleMathEcEndoECEndomorphism;

@interface OrgSpongycastleMathEcECCurve_Config : NSObject {
 @public
  jint coord_;
  id<OrgSpongycastleMathEcEndoECEndomorphism> endomorphism_;
  id<OrgSpongycastleMathEcECMultiplier> multiplier_;
}

#pragma mark Public

- (OrgSpongycastleMathEcECCurve *)create;

- (OrgSpongycastleMathEcECCurve_Config *)setCoordinateSystemWithInt:(jint)coord;

- (OrgSpongycastleMathEcECCurve_Config *)setEndomorphismWithOrgSpongycastleMathEcEndoECEndomorphism:(id<OrgSpongycastleMathEcEndoECEndomorphism>)endomorphism;

- (OrgSpongycastleMathEcECCurve_Config *)setMultiplierWithOrgSpongycastleMathEcECMultiplier:(id<OrgSpongycastleMathEcECMultiplier>)multiplier;

#pragma mark Package-Private

- (instancetype)initWithOrgSpongycastleMathEcECCurve:(OrgSpongycastleMathEcECCurve *)outer$
                                             withInt:(jint)coord
         withOrgSpongycastleMathEcEndoECEndomorphism:(id<OrgSpongycastleMathEcEndoECEndomorphism>)endomorphism
               withOrgSpongycastleMathEcECMultiplier:(id<OrgSpongycastleMathEcECMultiplier>)multiplier;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleMathEcECCurve_Config)

J2OBJC_FIELD_SETTER(OrgSpongycastleMathEcECCurve_Config, endomorphism_, id<OrgSpongycastleMathEcEndoECEndomorphism>)
J2OBJC_FIELD_SETTER(OrgSpongycastleMathEcECCurve_Config, multiplier_, id<OrgSpongycastleMathEcECMultiplier>)

FOUNDATION_EXPORT void OrgSpongycastleMathEcECCurve_Config_initWithOrgSpongycastleMathEcECCurve_withInt_withOrgSpongycastleMathEcEndoECEndomorphism_withOrgSpongycastleMathEcECMultiplier_(OrgSpongycastleMathEcECCurve_Config *self, OrgSpongycastleMathEcECCurve *outer$, jint coord, id<OrgSpongycastleMathEcEndoECEndomorphism> endomorphism, id<OrgSpongycastleMathEcECMultiplier> multiplier);

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_Config *new_OrgSpongycastleMathEcECCurve_Config_initWithOrgSpongycastleMathEcECCurve_withInt_withOrgSpongycastleMathEcEndoECEndomorphism_withOrgSpongycastleMathEcECMultiplier_(OrgSpongycastleMathEcECCurve *outer$, jint coord, id<OrgSpongycastleMathEcEndoECEndomorphism> endomorphism, id<OrgSpongycastleMathEcECMultiplier> multiplier) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_Config *create_OrgSpongycastleMathEcECCurve_Config_initWithOrgSpongycastleMathEcECCurve_withInt_withOrgSpongycastleMathEcEndoECEndomorphism_withOrgSpongycastleMathEcECMultiplier_(OrgSpongycastleMathEcECCurve *outer$, jint coord, id<OrgSpongycastleMathEcEndoECEndomorphism> endomorphism, id<OrgSpongycastleMathEcECMultiplier> multiplier);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleMathEcECCurve_Config)

#endif

#if !defined (OrgSpongycastleMathEcECCurve_AbstractFp_) && (INCLUDE_ALL_OrgSpongycastleMathEcECCurve || defined(INCLUDE_OrgSpongycastleMathEcECCurve_AbstractFp))
#define OrgSpongycastleMathEcECCurve_AbstractFp_

@class JavaMathBigInteger;
@class OrgSpongycastleMathEcECPoint;
@protocol OrgSpongycastleMathFieldFiniteField;

@interface OrgSpongycastleMathEcECCurve_AbstractFp : OrgSpongycastleMathEcECCurve

#pragma mark Public

- (jboolean)isValidFieldElementWithJavaMathBigInteger:(JavaMathBigInteger *)x;

#pragma mark Protected

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q;

- (OrgSpongycastleMathEcECPoint *)decompressPointWithInt:(jint)yTilde
                                  withJavaMathBigInteger:(JavaMathBigInteger *)X1;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgSpongycastleMathFieldFiniteField:(id<OrgSpongycastleMathFieldFiniteField>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleMathEcECCurve_AbstractFp)

FOUNDATION_EXPORT void OrgSpongycastleMathEcECCurve_AbstractFp_initWithJavaMathBigInteger_(OrgSpongycastleMathEcECCurve_AbstractFp *self, JavaMathBigInteger *q);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleMathEcECCurve_AbstractFp)

#endif

#if !defined (OrgSpongycastleMathEcECCurve_Fp_) && (INCLUDE_ALL_OrgSpongycastleMathEcECCurve || defined(INCLUDE_OrgSpongycastleMathEcECCurve_Fp))
#define OrgSpongycastleMathEcECCurve_Fp_

@class IOSObjectArray;
@class JavaMathBigInteger;
@class OrgSpongycastleMathEcECCurve;
@class OrgSpongycastleMathEcECFieldElement;
@class OrgSpongycastleMathEcECPoint;
@class OrgSpongycastleMathEcECPoint_Fp;

/*!
 @brief Elliptic curve over Fp
 */
@interface OrgSpongycastleMathEcECCurve_Fp : OrgSpongycastleMathEcECCurve_AbstractFp {
 @public
  JavaMathBigInteger *q_;
  JavaMathBigInteger *r_;
  OrgSpongycastleMathEcECPoint_Fp *infinity_;
}

#pragma mark Public

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)a
                    withJavaMathBigInteger:(JavaMathBigInteger *)b;

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)a
                    withJavaMathBigInteger:(JavaMathBigInteger *)b
                    withJavaMathBigInteger:(JavaMathBigInteger *)order
                    withJavaMathBigInteger:(JavaMathBigInteger *)cofactor;

- (OrgSpongycastleMathEcECFieldElement *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x;

- (jint)getFieldSize;

- (OrgSpongycastleMathEcECPoint *)getInfinity;

- (JavaMathBigInteger *)getQ;

- (OrgSpongycastleMathEcECPoint *)importPointWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p;

- (jboolean)supportsCoordinateSystemWithInt:(jint)coord;

#pragma mark Protected

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)r
   withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)a
   withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b;

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)r
   withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)a
   withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b
                    withJavaMathBigInteger:(JavaMathBigInteger *)order
                    withJavaMathBigInteger:(JavaMathBigInteger *)cofactor;

- (OrgSpongycastleMathEcECCurve *)cloneCurve;

- (OrgSpongycastleMathEcECPoint *)createRawPointWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y
                                                                            withBoolean:(jboolean)withCompression;

- (OrgSpongycastleMathEcECPoint *)createRawPointWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y
                                           withOrgSpongycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                                            withBoolean:(jboolean)withCompression;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleMathEcECCurve_Fp)

J2OBJC_FIELD_SETTER(OrgSpongycastleMathEcECCurve_Fp, q_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgSpongycastleMathEcECCurve_Fp, r_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgSpongycastleMathEcECCurve_Fp, infinity_, OrgSpongycastleMathEcECPoint_Fp *)

FOUNDATION_EXPORT void OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_Fp *new_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_Fp *create_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT void OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_Fp *new_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_Fp *create_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

FOUNDATION_EXPORT void OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_(OrgSpongycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *r, OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b);

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_Fp *new_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_(JavaMathBigInteger *q, JavaMathBigInteger *r, OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_Fp *create_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_(JavaMathBigInteger *q, JavaMathBigInteger *r, OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b);

FOUNDATION_EXPORT void OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *r, OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_Fp *new_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *r, OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_Fp *create_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *r, OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleMathEcECCurve_Fp)

#endif

#if !defined (OrgSpongycastleMathEcECCurve_AbstractF2m_) && (INCLUDE_ALL_OrgSpongycastleMathEcECCurve || defined(INCLUDE_OrgSpongycastleMathEcECCurve_AbstractF2m))
#define OrgSpongycastleMathEcECCurve_AbstractF2m_

@class IOSIntArray;
@class IOSObjectArray;
@class JavaMathBigInteger;
@class OrgSpongycastleMathEcECPoint;
@protocol OrgSpongycastleMathFieldFiniteField;

@interface OrgSpongycastleMathEcECCurve_AbstractF2m : OrgSpongycastleMathEcECCurve

#pragma mark Public

- (OrgSpongycastleMathEcECPoint *)createPointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                             withJavaMathBigInteger:(JavaMathBigInteger *)y
                                                        withBoolean:(jboolean)withCompression;

+ (JavaMathBigInteger *)inverseWithInt:(jint)m
                          withIntArray:(IOSIntArray *)ks
                withJavaMathBigInteger:(JavaMathBigInteger *)x;

/*!
 @brief Returns true if this is a Koblitz curve (ABC curve).
 @return true if this is a Koblitz curve (ABC curve), false otherwise
 */
- (jboolean)isKoblitz;

- (jboolean)isValidFieldElementWithJavaMathBigInteger:(JavaMathBigInteger *)x;

#pragma mark Protected

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3;

/*!
 @brief Decompresses a compressed point P = (xp, yp) (X9.62 s 4.2.2).
 @param yTilde ~yp, an indication bit for the decompression of yp.
 @param X1 The field element xp.
 @return the decompressed point.
 */
- (OrgSpongycastleMathEcECPoint *)decompressPointWithInt:(jint)yTilde
                                  withJavaMathBigInteger:(JavaMathBigInteger *)X1;

#pragma mark Package-Private

/*!
 @return the auxiliary values <code>s<sub>0</sub></code> and 
 <code>s<sub>1</sub></code> used for partial modular reduction for
  Koblitz curves.
 */
- (IOSObjectArray *)getSi;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgSpongycastleMathFieldFiniteField:(id<OrgSpongycastleMathFieldFiniteField>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleMathEcECCurve_AbstractF2m)

FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleMathEcECCurve_AbstractF2m_inverseWithInt_withIntArray_withJavaMathBigInteger_(jint m, IOSIntArray *ks, JavaMathBigInteger *x);

FOUNDATION_EXPORT void OrgSpongycastleMathEcECCurve_AbstractF2m_initWithInt_withInt_withInt_withInt_(OrgSpongycastleMathEcECCurve_AbstractF2m *self, jint m, jint k1, jint k2, jint k3);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleMathEcECCurve_AbstractF2m)

#endif

#if !defined (OrgSpongycastleMathEcECCurve_F2m_) && (INCLUDE_ALL_OrgSpongycastleMathEcECCurve || defined(INCLUDE_OrgSpongycastleMathEcECCurve_F2m))
#define OrgSpongycastleMathEcECCurve_F2m_

@class IOSObjectArray;
@class JavaMathBigInteger;
@class OrgSpongycastleMathEcECCurve;
@class OrgSpongycastleMathEcECFieldElement;
@class OrgSpongycastleMathEcECPoint;
@protocol OrgSpongycastleMathEcECMultiplier;

/*!
 @brief Elliptic curves over F2m.The Weierstrass equation is given by 
 <code>y<sup>2</sup> + xy = x<sup>3</sup> + ax<sup>2</sup> + b</code>.
 */
@interface OrgSpongycastleMathEcECCurve_F2m : OrgSpongycastleMathEcECCurve_AbstractF2m

#pragma mark Public

/*!
 @brief Constructor for Trinomial Polynomial Basis (TPB).
 @param m The exponent  <code> m </code>  of
    <code> F <sub> 2 <sup> m </sup> </sub> </code>
  .
 @param k The integer  <code> k </code>  where  <code> x <sup> m </sup>
   +  x <sup> k </sup>  + 1 </code>  represents the reduction
   polynomial  <code> f(z) </code> .
 @param a The coefficient  <code> a </code>  in the Weierstrass equation
   for non-supersingular elliptic curves over   <code>
  F <sub> 2 <sup> m </sup> </sub> </code> .
 @param b The coefficient  <code> b </code>  in the Weierstrass equation
   for non-supersingular elliptic curves over   <code>
  F <sub> 2 <sup> m </sup> </sub> </code> .
 */
- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b;

/*!
 @brief Constructor for Trinomial Polynomial Basis (TPB).
 @param m The exponent  <code> m </code>  of
    <code> F <sub> 2 <sup> m </sup> </sub> </code>
  .
 @param k The integer  <code> k </code>  where  <code> x <sup> m </sup>
   +  x <sup> k </sup>  + 1 </code>  represents the reduction
   polynomial  <code> f(z) </code> .
 @param a The coefficient  <code> a </code>  in the Weierstrass equation
   for non-supersingular elliptic curves over   <code>
  F <sub> 2 <sup> m </sup> </sub> </code> .
 @param b The coefficient  <code> b </code>  in the Weierstrass equation
   for non-supersingular elliptic curves over   <code>
  F <sub> 2 <sup> m </sup> </sub> </code> .
 @param order The order of the main subgroup of the elliptic curve.
 @param cofactor The cofactor of the elliptic curve, i.e.  
  <code> #E <sub> a </sub> (F <sub> 2 <sup> m </sup> </sub> ) = h * n </code>
  .
 */
- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b
     withJavaMathBigInteger:(JavaMathBigInteger *)order
     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor;

/*!
 @brief Constructor for Pentanomial Polynomial Basis (PPB).
 @param m The exponent  <code> m </code>  of
    <code> F <sub> 2 <sup> m </sup> </sub> </code>
  .
 @param k1 The integer  <code> k1 </code>  where  <code> x <sup> m </sup>
   +  x <sup> k3 </sup>  + x <sup> k2 </sup>  + x <sup> k1 </sup>  + 1
  </code>  represents the reduction polynomial  <code> f(z) </code>
  .
 @param k2 The integer  <code> k2 </code>  where  <code> x <sup> m </sup>
   +  x <sup> k3 </sup>  + x <sup> k2 </sup>  + x <sup> k1 </sup>  + 1
  </code>  represents the reduction polynomial  <code> f(z) </code>
  .
 @param k3 The integer  <code> k3 </code>  where  <code> x <sup> m </sup>
   +  x <sup> k3 </sup>  + x <sup> k2 </sup>  + x <sup> k1 </sup>  + 1
  </code>  represents the reduction polynomial  <code> f(z) </code>
  .
 @param a The coefficient  <code> a </code>  in the Weierstrass equation
   for non-supersingular elliptic curves over   <code>
  F <sub> 2 <sup> m </sup> </sub> </code> .
 @param b The coefficient  <code> b </code>  in the Weierstrass equation
   for non-supersingular elliptic curves over   <code>
  F <sub> 2 <sup> m </sup> </sub> </code> .
 */
- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b;

/*!
 @brief Constructor for Pentanomial Polynomial Basis (PPB).
 @param m The exponent  <code> m </code>  of
    <code> F <sub> 2 <sup> m </sup> </sub> </code>
  .
 @param k1 The integer  <code> k1 </code>  where  <code> x <sup> m </sup>
   +  x <sup> k3 </sup>  + x <sup> k2 </sup>  + x <sup> k1 </sup>  + 1
  </code>  represents the reduction polynomial  <code> f(z) </code>
  .
 @param k2 The integer  <code> k2 </code>  where  <code> x <sup> m </sup>
   +  x <sup> k3 </sup>  + x <sup> k2 </sup>  + x <sup> k1 </sup>  + 1
  </code>  represents the reduction polynomial  <code> f(z) </code>
  .
 @param k3 The integer  <code> k3 </code>  where  <code> x <sup> m </sup>
   +  x <sup> k3 </sup>  + x <sup> k2 </sup>  + x <sup> k1 </sup>  + 1
  </code>  represents the reduction polynomial  <code> f(z) </code>
  .
 @param a The coefficient  <code> a </code>  in the Weierstrass equation
   for non-supersingular elliptic curves over   <code>
  F <sub> 2 <sup> m </sup> </sub> </code> .
 @param b The coefficient  <code> b </code>  in the Weierstrass equation
   for non-supersingular elliptic curves over   <code>
  F <sub> 2 <sup> m </sup> </sub> </code> .
 @param order The order of the main subgroup of the elliptic curve.
 @param cofactor The cofactor of the elliptic curve, i.e.  
  <code> #E <sub> a </sub> (F <sub> 2 <sup> m </sup> </sub> ) = h * n </code>
  .
 */
- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b
     withJavaMathBigInteger:(JavaMathBigInteger *)order
     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor;

- (OrgSpongycastleMathEcECFieldElement *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x;

- (jint)getFieldSize;

/*!
 */
- (JavaMathBigInteger *)getH;

- (OrgSpongycastleMathEcECPoint *)getInfinity;

- (jint)getK1;

- (jint)getK2;

- (jint)getK3;

- (jint)getM;

/*!
 */
- (JavaMathBigInteger *)getN;

/*!
 @brief Return true if curve uses a Trinomial basis.
 @return true if curve Trinomial, false otherwise.
 */
- (jboolean)isTrinomial;

- (jboolean)supportsCoordinateSystemWithInt:(jint)coord;

#pragma mark Protected

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)a
withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b
     withJavaMathBigInteger:(JavaMathBigInteger *)order
     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor;

- (OrgSpongycastleMathEcECCurve *)cloneCurve;

- (id<OrgSpongycastleMathEcECMultiplier>)createDefaultMultiplier;

- (OrgSpongycastleMathEcECPoint *)createRawPointWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y
                                                                            withBoolean:(jboolean)withCompression;

- (OrgSpongycastleMathEcECPoint *)createRawPointWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y
                                           withOrgSpongycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                                            withBoolean:(jboolean)withCompression;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithInt:(jint)arg0
                    withInt:(jint)arg1
                    withInt:(jint)arg2
                    withInt:(jint)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleMathEcECCurve_F2m)

FOUNDATION_EXPORT void OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECCurve_F2m *self, jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_F2m *new_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_F2m *create_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT void OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECCurve_F2m *self, jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_F2m *new_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_F2m *create_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

FOUNDATION_EXPORT void OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECCurve_F2m *self, jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_F2m *new_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_F2m *create_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b);

FOUNDATION_EXPORT void OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECCurve_F2m *self, jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_F2m *new_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_F2m *create_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

FOUNDATION_EXPORT void OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECCurve_F2m *self, jint m, jint k1, jint k2, jint k3, OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_F2m *new_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleMathEcECCurve_F2m *create_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleMathEcECCurve_F2m)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleMathEcECCurve")
