//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/SimpleTable.java
//

#include "BadElementException.h"
#include "Element.h"
#include "ExceptionConverter.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PdfContentByte.h"
#include "PdfPCell.h"
#include "PdfPTable.h"
#include "Rectangle.h"
#include "SimpleCell.h"
#include "SimpleTable.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Float.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"

#if !__has_feature(objc_arc)
#error "SimpleTable must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextSimpleTable () {
 @public
  /*!
   @brief the content of a Table.
   */
  JavaUtilArrayList *content_;
  /*!
   @brief the width of the Table.
   */
  jfloat width_;
  /*!
   @brief the widthpercentage of the Table.
   */
  jfloat widthpercentage_;
  /*!
   @brief the spacing of the Cells.
   */
  jfloat cellspacing_;
  /*!
   @brief the padding of the Cells.
   */
  jfloat cellpadding_;
  /*!
   @brief the alignment of the table.
   */
  jint alignment_;
}

/*!
 @brief Adds content to this object.
 @param element element
 @throw BadElementExceptionon error
 */
- (void)addElementWithComAowagieTextSimpleCell:(ComAowagieTextSimpleCell *)element;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextSimpleTable, content_, JavaUtilArrayList *)

__attribute__((unused)) static void ComAowagieTextSimpleTable_addElementWithComAowagieTextSimpleCell_(ComAowagieTextSimpleTable *self, ComAowagieTextSimpleCell *element);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/SimpleTable.java"


#line 62
@implementation ComAowagieTextSimpleTable

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 81
- (instancetype)init {
  ComAowagieTextSimpleTable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 92
- (void)addElementWithComAowagieTextSimpleCell:(ComAowagieTextSimpleCell *)element {
  ComAowagieTextSimpleTable_addElementWithComAowagieTextSimpleCell_(self, element);
}


#line 106
- (ComAowagieTextPdfPdfPTable *)createPdfPTable {
  if ([((JavaUtilArrayList *) nil_chk(self->content_)) isEmpty]) {
    @throw new_ComAowagieTextBadElementException_initWithNSString_(@"Trying to create a table without rows.");
  }
  ComAowagieTextSimpleCell *row = (ComAowagieTextSimpleCell *) cast_chk([self->content_ getWithInt:0], [ComAowagieTextSimpleCell class]);
  ComAowagieTextSimpleCell *cell;
  jint columns = 0;
  for (id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk([((ComAowagieTextSimpleCell *) nil_chk(row)) getContent])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    cell = (ComAowagieTextSimpleCell *) cast_chk([i next], [ComAowagieTextSimpleCell class]);
    columns += [((ComAowagieTextSimpleCell *) nil_chk(cell)) getColspan];
  }
  IOSFloatArray *widths = [IOSFloatArray newArrayWithLength:columns];
  IOSFloatArray *widthpercentages = [IOSFloatArray newArrayWithLength:columns];
  ComAowagieTextPdfPdfPTable *table = new_ComAowagieTextPdfPdfPTable_initWithInt_(columns);
  [table setTableEventWithComAowagieTextPdfPdfPTableEvent:self];
  [table setHorizontalAlignmentWithInt:self->alignment_];
  jint pos;
  for (id<JavaUtilIterator> rows = [self->content_ iterator]; [((id<JavaUtilIterator>) nil_chk(rows)) hasNext]; ) {
    row = (ComAowagieTextSimpleCell *) cast_chk([rows next], [ComAowagieTextSimpleCell class]);
    pos = 0;
    for (id<JavaUtilIterator> cells = [((JavaUtilArrayList *) nil_chk([((ComAowagieTextSimpleCell *) nil_chk(row)) getContent])) iterator]; [((id<JavaUtilIterator>) nil_chk(cells)) hasNext]; ) {
      cell = (ComAowagieTextSimpleCell *) cast_chk([cells next], [ComAowagieTextSimpleCell class]);
      if (JavaLangFloat_isNaNWithFloat_([((ComAowagieTextSimpleCell *) nil_chk(cell)) getSpacing_left])) {
        [cell setSpacing_leftWithFloat:self->cellspacing_ / 2.0f];
      }
      if (JavaLangFloat_isNaNWithFloat_([cell getSpacing_right])) {
        [cell setSpacing_rightWithFloat:self->cellspacing_ / 2.0f];
      }
      if (JavaLangFloat_isNaNWithFloat_([cell getSpacing_top])) {
        [cell setSpacing_topWithFloat:self->cellspacing_ / 2.0f];
      }
      if (JavaLangFloat_isNaNWithFloat_([cell getSpacing_bottom])) {
        [cell setSpacing_bottomWithFloat:self->cellspacing_ / 2.0f];
      }
      [cell setPaddingWithFloat:self->cellpadding_];
      [table addCellWithComAowagieTextPdfPdfPCell:[cell createPdfPCellWithComAowagieTextSimpleCell:row]];
      if ([cell getColspan] == 1) {
        if ([cell getWidth] > 0) {
          *IOSFloatArray_GetRef(widths, pos) = [cell getWidth];
        }
        if ([cell getWidthpercentage] > 0) {
          *IOSFloatArray_GetRef(widthpercentages, pos) = [cell getWidthpercentage];
        }
      }
      pos += [cell getColspan];
    }
  }
  jfloat sumWidths = 0.0f;
  for (jint i = 0; i < columns; i++) {
    if (IOSFloatArray_Get(widths, i) == 0) {
      sumWidths = 0;
      break;
    }
    JrePlusAssignFloatF(&sumWidths, IOSFloatArray_Get(widths, i));
  }
  if (sumWidths > 0) {
    [table setTotalWidthWithFloat:sumWidths];
    [table setWidthsWithFloatArray:widths];
  }
  else {
    for (jint i = 0; i < columns; i++) {
      if (IOSFloatArray_Get(widthpercentages, i) == 0) {
        sumWidths = 0;
        break;
      }
      JrePlusAssignFloatF(&sumWidths, IOSFloatArray_Get(widthpercentages, i));
    }
    if (sumWidths > 0) {
      [table setWidthsWithFloatArray:widthpercentages];
    }
  }
  if (self->width_ > 0) {
    [table setTotalWidthWithFloat:self->width_];
  }
  if (self->widthpercentage_ > 0) {
    [table setWidthPercentageWithFloat:self->widthpercentage_];
  }
  return table;
}


#line 189
- (void)tableLayoutWithComAowagieTextPdfPdfPTable:(ComAowagieTextPdfPdfPTable *)table
                                  withFloatArray2:(IOSObjectArray *)widths
                                   withFloatArray:(IOSFloatArray *)heights
                                          withInt:(jint)headerRows
                                          withInt:(jint)rowStart
         withComAowagieTextPdfPdfContentByteArray:(IOSObjectArray *)canvases {
  
#line 191
  IOSFloatArray *width = IOSObjectArray_Get(nil_chk(widths), 0);
  ComAowagieTextRectangle *rect = new_ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(IOSFloatArray_Get(nil_chk(width), 0), IOSFloatArray_Get(heights, ((IOSFloatArray *) nil_chk(heights))->size_ - 1), IOSFloatArray_Get(width, width->size_ - 1), IOSFloatArray_Get(heights, 0));
  [rect cloneNonPositionParametersWithComAowagieTextRectangle:self];
  jint bd = [rect getBorder];
  [rect setBorderWithInt:ComAowagieTextRectangle_NO_BORDER];
  [((ComAowagieTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(nil_chk(canvases), ComAowagieTextPdfPdfPTable_BACKGROUNDCANVAS))) rectangleWithComAowagieTextRectangle:rect];
  [rect setBorderWithInt:bd];
  [rect setBackgroundColorWithHarmonyJavaAwtColor:nil];
  [((ComAowagieTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(canvases, ComAowagieTextPdfPdfPTable_LINECANVAS))) rectangleWithComAowagieTextRectangle:rect];
}


#line 205
- (jfloat)getCellpadding {
  return self->cellpadding_;
}


#line 211
- (void)setCellpaddingWithFloat:(jfloat)cellpadding {
  self->cellpadding_ = cellpadding;
}


#line 217
- (jfloat)getCellspacing {
  return self->cellspacing_;
}


#line 223
- (void)setCellspacingWithFloat:(jfloat)cellspacing {
  self->cellspacing_ = cellspacing;
}


#line 230
- (jint)getAlignment {
  return self->alignment_;
}


#line 236
- (void)setAlignmentWithInt:(jint)alignment {
  self->alignment_ = alignment;
}


#line 242
- (jfloat)getWidth {
  
#line 244
  return self->width_;
}


#line 249
- (void)setWidthWithFloat:(jfloat)width {
  self->width_ = width;
}


#line 255
- (jfloat)getWidthpercentage {
  return self->widthpercentage_;
}


#line 261
- (void)setWidthpercentageWithFloat:(jfloat)widthpercentage {
  self->widthpercentage_ = widthpercentage;
}


#line 267
- (jint)type {
  
#line 269
  return ComAowagieTextElement_TABLE;
}


#line 276
- (jboolean)isNestable {
  
#line 278
  return true;
}


#line 284
- (jboolean)addWithId:(id)o {
  
#line 286
  @try {
    ComAowagieTextSimpleTable_addElementWithComAowagieTextSimpleCell_(self, (ComAowagieTextSimpleCell *) cast_chk(o, [ComAowagieTextSimpleCell class]));
    return true;
  }
  @catch (JavaLangClassCastException *e) {
    return false;
  }
  @catch (ComAowagieTextBadElementException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, 2, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfPTable;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 7, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addElementWithComAowagieTextSimpleCell:);
  methods[2].selector = @selector(createPdfPTable);
  methods[3].selector = @selector(tableLayoutWithComAowagieTextPdfPdfPTable:withFloatArray2:withFloatArray:withInt:withInt:withComAowagieTextPdfPdfContentByteArray:);
  methods[4].selector = @selector(getCellpadding);
  methods[5].selector = @selector(setCellpaddingWithFloat:);
  methods[6].selector = @selector(getCellspacing);
  methods[7].selector = @selector(setCellspacingWithFloat:);
  methods[8].selector = @selector(getAlignment);
  methods[9].selector = @selector(setAlignmentWithInt:);
  methods[10].selector = @selector(getWidth);
  methods[11].selector = @selector(setWidthWithFloat:);
  methods[12].selector = @selector(getWidthpercentage);
  methods[13].selector = @selector(setWidthpercentageWithFloat:);
  methods[14].selector = @selector(type);
  methods[15].selector = @selector(isNestable);
  methods[16].selector = @selector(addWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "content_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "width_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "widthpercentage_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cellspacing_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cellpadding_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "alignment_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addElement", "LComAowagieTextSimpleCell;", "LComAowagieTextBadElementException;", "LComAowagieTextDocumentException;", "tableLayout", "LComAowagieTextPdfPdfPTable;[[F[FII[LComAowagieTextPdfPdfContentByte;", "setCellpadding", "F", "setCellspacing", "setAlignment", "I", "setWidth", "setWidthpercentage", "add", "LNSObject;" };
  static const J2ObjcClassInfo _ComAowagieTextSimpleTable = { "SimpleTable", "com.aowagie.text", ptrTable, methods, fields, 7, 0x1, 17, 6, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextSimpleTable;
}

@end


#line 81
void ComAowagieTextSimpleTable_init(ComAowagieTextSimpleTable *self) {
  ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(self, 0.0f, 0.0f, 0.0f, 0.0f);
  self->content_ = new_JavaUtilArrayList_init();
  self->width_ =
#line 67
  0.0f;
  self->widthpercentage_ =
#line 69
  0.0f;
  
#line 83
  [self setBorderWithInt:ComAowagieTextRectangle_BOX];
  [self setBorderWidthWithFloat:2.0f];
}


#line 81
ComAowagieTextSimpleTable *new_ComAowagieTextSimpleTable_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextSimpleTable, init)
}


#line 81
ComAowagieTextSimpleTable *create_ComAowagieTextSimpleTable_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextSimpleTable, init)
}


#line 92
void ComAowagieTextSimpleTable_addElementWithComAowagieTextSimpleCell_(ComAowagieTextSimpleTable *self, ComAowagieTextSimpleCell *element) {
  if (![((ComAowagieTextSimpleCell *) nil_chk(element)) isCellgroup]) {
    @throw new_ComAowagieTextBadElementException_initWithNSString_(@"You can't add cells to a table directly, add them to a row first.");
  }
  [((JavaUtilArrayList *) nil_chk(self->content_)) addWithId:element];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextSimpleTable)
