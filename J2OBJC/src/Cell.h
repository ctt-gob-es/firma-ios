//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/Cell.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Cell")
#ifdef RESTRICT_Cell
#define INCLUDE_ALL_Cell 0
#else
#define INCLUDE_ALL_Cell 1
#endif
#undef RESTRICT_Cell

#if !defined (ComAowagieTextCell_) && (INCLUDE_ALL_Cell || defined(INCLUDE_ComAowagieTextCell))
#define ComAowagieTextCell_

#define RESTRICT_Rectangle 1
#define INCLUDE_ComAowagieTextRectangle 1
#include "Rectangle.h"

#define RESTRICT_TextElementArray 1
#define INCLUDE_ComAowagieTextTextElementArray 1
#include "TextElementArray.h"

@class ComAowagieTextPdfPdfPCell;
@class JavaUtilArrayList;
@protocol ComAowagieTextElement;
@protocol ComAowagieTextElementListener;
@protocol JavaUtilIterator;

/*!
 @brief A <CODE>Cell</CODE> is a <CODE>Rectangle</CODE> containing other 
 <CODE>Element</CODE>s.
 <P>
  A <CODE>Cell</CODE> must be added to a <CODE>Table</CODE>.
  The <CODE>Table</CODE> will place the <CODE>Cell</CODE> in
  a <CODE>Row</CODE>.
  <P>
  Example: 
 <BLOCKQUOTE>@code

  Table table = new Table(3);
  table.setBorderWidth(1);
  table.setBorderColor(new Color(0, 0, 255));
  table.setCellpadding(5);
  table.setCellspacing(5); 
  <STRONG>Cell cell = new Cell("header");</STRONG>
   <STRONG>cell.setHeader(true);</STRONG>
   <STRONG>cell.setColspan(3);</STRONG>
  table.addCell(cell); 
  <STRONG>cell = new Cell("example cell with colspan 1 and rowspan 2");</STRONG>
   <STRONG>cell.setRowspan(2);</STRONG>
   <STRONG>cell.setBorderColor(new Color(255, 0, 0));</STRONG>
  table.addCell(cell);
  table.addCell("1.1");
  table.addCell("2.1");
  table.addCell("1.2");
  table.addCell("2.2"); 
  
@endcode</BLOCKQUOTE>
 - seealso: Rectangle
 - seealso: Element
 - seealso: Table
 - seealso: Row
 */
@interface ComAowagieTextCell : ComAowagieTextRectangle < ComAowagieTextTextElementArray >

#pragma mark Public

/*!
 @brief Constructs an empty <CODE>Cell</CODE>.
 */
- (instancetype)init;

/*!
 @brief Add an <CODE>Object</CODE> to this cell.
 @param o the object to add
 @return always <CODE>true</CODE>
 */
- (jboolean)addWithId:(id)o;

/*!
 @brief This method throws an <CODE>UnsupportedOperationException</CODE>.
 @return NA
 */
- (jfloat)getBottom;

/*!
 @brief Gets all the chunks in this element.
 @return an <CODE>ArrayList</CODE>
 */
- (JavaUtilArrayList *)getChunks;

/*!
 @brief Gets the colspan.
 @return a value
 */
- (jint)getColspan;

/*!
 @brief Gets an iterator of <CODE>Element</CODE>s.
 @return an <CODE>Iterator</CODE>.
 */
- (id<JavaUtilIterator>)getElements;

/*!
 @brief Does this <CODE>Cell</CODE> force a group change?
 @return a value
 */
- (jboolean)getGroupChange;

/*!
 @brief Gets the horizontal alignment.
 @return a value
 */
- (jint)getHorizontalAlignment;

/*!
 @brief Gets the leading.
 @return a value
 */
- (jfloat)getLeading;

/*!
 @brief This method throws an <CODE>UnsupportedOperationException</CODE>.
 @return NA
 */
- (jfloat)getLeft;

/*!
 @brief Getter for maxLines
 @return the maxLines value
 */
- (jint)getMaxLines;

/*!
 @brief This method throws an <CODE>UnsupportedOperationException</CODE>.
 @return NA
 */
- (jfloat)getRight;

/*!
 @brief Gets the rowspan.
 @return a value
 */
- (jint)getRowspan;

/*!
 @brief Getter for showTruncation
 @return the showTruncation value
 */
- (NSString *)getShowTruncation;

/*!
 @brief This method throws an <CODE>UnsupportedOperationException</CODE>.
 @return NA
 */
- (jfloat)getTop;

/*!
 @brief Gets the vertical alignment.
 @return a value
 */
- (jint)getVerticalAlignment;

/*!
 @brief Gets the width.
 */
- (jfloat)getWidth;

/*!
 @brief Gets the width as a String.
 @return a value
 */
- (NSString *)getWidthAsString;

/*!
 @brief Checks if the <CODE>Cell</CODE> is empty.
 @return <CODE>false</CODE> if there are non-empty <CODE>Element</CODE>s in the <CODE>Cell</CODE>.
 */
- (jboolean)isEmpty;

/*!
 @brief Is this <CODE>Cell</CODE> a header?
 @return a value
 */
- (jboolean)isHeader;

/*!
 @brief Checks if this <CODE>Cell</CODE> is a placeholder for a (nested) table.
 @return true if the only element in this cell is a table
 */
- (jboolean)isTable;

/*!
 @brief Gets the value of useAscender
 @return useAscender
 */
- (jboolean)isUseAscender;

/*!
 @brief Gets the value of useBorderPadding.
 @return useBorderPadding
 */
- (jboolean)isUseBorderPadding;

/*!
 @brief gets the value of useDescender
 @return useDescender
 */
- (jboolean)isUseDescender;

/*!
 @brief Processes the element by adding it (or the different parts) to an 
 <CODE>ElementListener</CODE>.
 @param listener an  <CODE> ElementListener </CODE>
 @return <CODE>true</CODE> if the element was processed successfully
 */
- (jboolean)processWithComAowagieTextElementListener:(id<ComAowagieTextElementListener>)listener;

/*!
 @brief This method throws an <CODE>UnsupportedOperationException</CODE>.
 @param value NA
 */
- (void)setBottomWithInt:(jint)value;

/*!
 @brief Sets the colspan.
 @param value the new value
 */
- (void)setColspanWithInt:(jint)value;

/*!
 @brief Sets group change.
 @param value the new value
 */
- (void)setGroupChangeWithBoolean:(jboolean)value;

/*!
 @brief Sets header.
 @param value the new value
 */
- (void)setHeaderWithBoolean:(jboolean)value;

/*!
 @brief Sets the horizontal alignment.
 @param value the new value
 */
- (void)setHorizontalAlignmentWithInt:(jint)value;

/*!
 @brief Sets the alignment of this cell.
 This methods allows you to set the alignment as a String.
 @param alignment the new alignment as a  <CODE> String </CODE>
 */
- (void)setHorizontalAlignmentWithNSString:(NSString *)alignment;

/*!
 @brief Sets the leading.
 @param value the new value
 */
- (void)setLeadingWithFloat:(jfloat)value;

/*!
 @brief This method throws an <CODE>UnsupportedOperationException</CODE>.
 @param value NA
 */
- (void)setLeftWithInt:(jint)value;

/*!
 @brief Setter for maxLines
 @param value the maximum number of lines
 */
- (void)setMaxLinesWithInt:(jint)value;

/*!
 @brief This method throws an <CODE>UnsupportedOperationException</CODE>.
 @param value NA
 */
- (void)setRightWithInt:(jint)value;

/*!
 @brief Sets the rowspan.
 @param value the new value
 */
- (void)setRowspanWithInt:(jint)value;

/*!
 @brief Setter for showTruncation
 @param value Can be null for avoiding marking the truncation.
 */
- (void)setShowTruncationWithNSString:(NSString *)value;

/*!
 @brief This method throws an <CODE>UnsupportedOperationException</CODE>.
 @param value NA
 */
- (void)setTopWithInt:(jint)value;

/*!
 @brief Sets the value of useAscender.
 @param use use ascender height if true
 */
- (void)setUseAscenderWithBoolean:(jboolean)use;

/*!
 @brief Sets the value of useBorderPadding.
 @param use adjust layout for borders if true
 */
- (void)setUseBorderPaddingWithBoolean:(jboolean)use;

/*!
 @brief Sets the value of useDescender.
 @param use use descender height if true
 */
- (void)setUseDescenderWithBoolean:(jboolean)use;

/*!
 @brief Sets the vertical alignment.
 @param value the new value
 */
- (void)setVerticalAlignmentWithInt:(jint)value;

/*!
 @brief Sets the alignment of this paragraph.
 @param alignment the new alignment as a  <CODE> String </CODE>
 */
- (void)setVerticalAlignmentWithNSString:(NSString *)alignment;

/*!
 @brief Sets the width.
 @param value the new value
 */
- (void)setWidthWithFloat:(jfloat)value;

/*!
 @brief Sets the width.
 It can be an absolute value "100" or a percentage "20%"
 @param value the new value
 */
- (void)setWidthWithNSString:(NSString *)value;

/*!
 @brief Gets the type of the text element.
 @return a type
 */
- (jint)type;

#pragma mark Package-Private

/*!
 @brief Constructs an empty <CODE>Cell</CODE> (for internal use only).
 @param dummy a dummy value
 */
- (instancetype)initWithBoolean:(jboolean)dummy;

/*!
 @brief Constructs a <CODE>Cell</CODE> with a certain <CODE>Element</CODE>.
 <p>
  if the element is a <CODE>ListItem</CODE>, <CODE>Row</CODE> or 
 <CODE>Cell</CODE>, an exception will be thrown.
 @param element the element
 @throw BadElementExceptionwhen the creator was called with a <CODE>ListItem</CODE>, <CODE>Row</CODE> or <CODE>Cell</CODE>
 */
- (instancetype)initWithComAowagieTextElement:(id<ComAowagieTextElement>)element;

/*!
 @brief Creates a PdfPCell based on this Cell object.
 @return a PdfPCell
 @throw BadElementExceptionon error
 */
- (ComAowagieTextPdfPdfPCell *)createPdfPCell;

/*!
 @brief Makes sure there is at least 1 object in the Cell.
 Otherwise it might not be shown in the table.
 */
- (void)fill;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithComAowagieTextRectangle:(ComAowagieTextRectangle *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithFloat:(jfloat)arg0
                    withFloat:(jfloat)arg1 NS_UNAVAILABLE;

- (instancetype)initWithFloat:(jfloat)arg0
                    withFloat:(jfloat)arg1
                    withFloat:(jfloat)arg2
                    withFloat:(jfloat)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextCell)

FOUNDATION_EXPORT void ComAowagieTextCell_init(ComAowagieTextCell *self);

FOUNDATION_EXPORT ComAowagieTextCell *new_ComAowagieTextCell_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextCell *create_ComAowagieTextCell_init(void);

FOUNDATION_EXPORT void ComAowagieTextCell_initWithBoolean_(ComAowagieTextCell *self, jboolean dummy);

FOUNDATION_EXPORT ComAowagieTextCell *new_ComAowagieTextCell_initWithBoolean_(jboolean dummy) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextCell *create_ComAowagieTextCell_initWithBoolean_(jboolean dummy);

FOUNDATION_EXPORT void ComAowagieTextCell_initWithComAowagieTextElement_(ComAowagieTextCell *self, id<ComAowagieTextElement> element);

FOUNDATION_EXPORT ComAowagieTextCell *new_ComAowagieTextCell_initWithComAowagieTextElement_(id<ComAowagieTextElement> element) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextCell *create_ComAowagieTextCell_initWithComAowagieTextElement_(id<ComAowagieTextElement> element);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextCell)

#endif

#pragma pop_macro("INCLUDE_ALL_Cell")
