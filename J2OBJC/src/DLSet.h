//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/asn1/DLSet.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_DLSet")
#ifdef RESTRICT_DLSet
#define INCLUDE_ALL_DLSet 0
#else
#define INCLUDE_ALL_DLSet 1
#endif
#undef RESTRICT_DLSet

#if !defined (OrgSpongycastleAsn1DLSet_) && (INCLUDE_ALL_DLSet || defined(INCLUDE_OrgSpongycastleAsn1DLSet))
#define OrgSpongycastleAsn1DLSet_

#define RESTRICT_ASN1Set 1
#define INCLUDE_OrgSpongycastleAsn1ASN1Set 1
#include "ASN1Set.h"

@class IOSObjectArray;
@class OrgSpongycastleAsn1ASN1EncodableVector;
@class OrgSpongycastleAsn1ASN1OutputStream;
@protocol OrgSpongycastleAsn1ASN1Encodable;

/*!
 @brief The DLSet encodes ASN.1 SET value without element ordering,
  and always using definite length form.
 <hr>
  <h2>X.690</h2>
  <h3>8: Basic encoding rules</h3>
  <h4>8.11 Encoding of a set value </h4>
  <b>8.11.1</b> The encoding of a set value shall be constructed 
 <p>
  <b>8.11.2</b> The contents octets shall consist of the complete
  encoding of a data value from each of the types listed in the
  ASN.1 definition of the set type, in an order chosen by the sender,
  unless the type was referenced with the keyword 
 <b>OPTIONAL</b> or the keyword <b>DEFAULT</b>.
  <p>
  <b>8.11.3</b> The encoding of a data value may, but need not,
  be present for a type which was referenced with the keyword 
 <b>OPTIONAL</b> or the keyword <b>DEFAULT</b>.
  <blockquote>
  NOTE &mdash; The order of data values in a set value is not significant,
  and places no constraints on the order during transfer 
 </blockquote>
  <h3>9: Canonical encoding rules</h3>
  <h4>9.3 Set components</h4>
  The encodings of the component values of a set value shall
  appear in an order determined by their tags as specified
  in 8.6 of ITU-T Rec. X.680 | ISO/IEC 8824-1.
  Additionally, for the purposes of determining the order in which
  components are encoded when one or more component is an untagged
  choice type, each untagged choice type is ordered as though it
  has a tag equal to that of the smallest tag in that choice type
  or any untagged choice types nested within. 
 <h3>10: Distinguished encoding rules</h3>
  <h4>10.3 Set components</h4>
  The encodings of the component values of a set value shall appear
  in an order determined by their tags as specified
  in 8.6 of ITU-T Rec. X.680 | ISO/IEC 8824-1. 
 <blockquote>
  NOTE &mdash; Where a component of the set is an untagged choice type,
  the location of that component in the ordering will depend on
  the tag of the choice component being encoded. 
 </blockquote>
  <h3>11: Restrictions on BER employed by both CER and DER</h3>
  <h4>11.5 Set and sequence components with default value </h4>
  The encoding of a set value or sequence value shall not include
  an encoding for any component value which is equal to
  its default value.
 */
@interface OrgSpongycastleAsn1DLSet : OrgSpongycastleAsn1ASN1Set

#pragma mark Public

/*!
 @brief create an empty set
 */
- (instancetype)init;

/*!
 @param obj - a single object that makes up the set.
 */
- (instancetype)initWithOrgSpongycastleAsn1ASN1Encodable:(id<OrgSpongycastleAsn1ASN1Encodable>)obj;

/*!
 @brief create a set from an array of objects.
 */
- (instancetype)initWithOrgSpongycastleAsn1ASN1EncodableArray:(IOSObjectArray *)a;

/*!
 @param v - a vector of objects making up the set.
 */
- (instancetype)initWithOrgSpongycastleAsn1ASN1EncodableVector:(OrgSpongycastleAsn1ASN1EncodableVector *)v;

#pragma mark Package-Private

/*!
 @brief A note on the implementation:
 <p>
  As DL requires the constructed, definite-length model to
  be used for structured types, this varies slightly from the
  ASN.1 descriptions given.
 Rather than just outputting SET,
  we also have to specify CONSTRUCTED, and the objects length.
 */
- (void)encodeWithOrgSpongycastleAsn1ASN1OutputStream:(OrgSpongycastleAsn1ASN1OutputStream *)outArg;

- (jint)encodedLength;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgSpongycastleAsn1ASN1EncodableArray:(IOSObjectArray *)arg0
                                                  withBoolean:(jboolean)arg1 NS_UNAVAILABLE;

- (instancetype)initWithOrgSpongycastleAsn1ASN1EncodableVector:(OrgSpongycastleAsn1ASN1EncodableVector *)arg0
                                                   withBoolean:(jboolean)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleAsn1DLSet)

FOUNDATION_EXPORT void OrgSpongycastleAsn1DLSet_init(OrgSpongycastleAsn1DLSet *self);

FOUNDATION_EXPORT OrgSpongycastleAsn1DLSet *new_OrgSpongycastleAsn1DLSet_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1DLSet *create_OrgSpongycastleAsn1DLSet_init(void);

FOUNDATION_EXPORT void OrgSpongycastleAsn1DLSet_initWithOrgSpongycastleAsn1ASN1Encodable_(OrgSpongycastleAsn1DLSet *self, id<OrgSpongycastleAsn1ASN1Encodable> obj);

FOUNDATION_EXPORT OrgSpongycastleAsn1DLSet *new_OrgSpongycastleAsn1DLSet_initWithOrgSpongycastleAsn1ASN1Encodable_(id<OrgSpongycastleAsn1ASN1Encodable> obj) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1DLSet *create_OrgSpongycastleAsn1DLSet_initWithOrgSpongycastleAsn1ASN1Encodable_(id<OrgSpongycastleAsn1ASN1Encodable> obj);

FOUNDATION_EXPORT void OrgSpongycastleAsn1DLSet_initWithOrgSpongycastleAsn1ASN1EncodableVector_(OrgSpongycastleAsn1DLSet *self, OrgSpongycastleAsn1ASN1EncodableVector *v);

FOUNDATION_EXPORT OrgSpongycastleAsn1DLSet *new_OrgSpongycastleAsn1DLSet_initWithOrgSpongycastleAsn1ASN1EncodableVector_(OrgSpongycastleAsn1ASN1EncodableVector *v) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1DLSet *create_OrgSpongycastleAsn1DLSet_initWithOrgSpongycastleAsn1ASN1EncodableVector_(OrgSpongycastleAsn1ASN1EncodableVector *v);

FOUNDATION_EXPORT void OrgSpongycastleAsn1DLSet_initWithOrgSpongycastleAsn1ASN1EncodableArray_(OrgSpongycastleAsn1DLSet *self, IOSObjectArray *a);

FOUNDATION_EXPORT OrgSpongycastleAsn1DLSet *new_OrgSpongycastleAsn1DLSet_initWithOrgSpongycastleAsn1ASN1EncodableArray_(IOSObjectArray *a) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1DLSet *create_OrgSpongycastleAsn1DLSet_initWithOrgSpongycastleAsn1ASN1EncodableArray_(IOSObjectArray *a);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleAsn1DLSet)

#endif

#pragma pop_macro("INCLUDE_ALL_DLSet")
