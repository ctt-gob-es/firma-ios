//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/util/tree/AOTreeNode.java
//

#include "AOTreeNode.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

#if !__has_feature(objc_arc)
#error "AOTreeNode must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreUtilTreeAOTreeNode () {
 @public
  /*!
   @brief this node's parent, or null if this node has no parent
   */
  EsGobAfirmaCoreUtilTreeAOTreeNode *parent_;
  /*!
   @brief array of children, may be null if this node has no children
   */
  id<JavaUtilList> children_;
  /*!
   @brief optional user object
   */
  id userObject_;
}

/*!
 @brief Removes <code>newChild</code> from its present parent (if it has a
  parent), sets the child's parent to this node, and then adds the child to
  this node's child array at index <code>childIndex</code>.
 <code>newChild</code> must not be null and must not be an ancestor of
  this node.
 @param newChild the TreeNode to insert under this node
 @param childIndex the index in this node's child array where this node is to be
          inserted
 @throw ArrayIndexOutOfBoundsException
 if <code>childIndex</code> is out of bounds
 @throw IllegalArgumentException
 if <code>newChild</code> is null or is an ancestor of this
             node
 @throw IllegalStateException
 if this node does not allow children
 */
- (void)insertWithEsGobAfirmaCoreUtilTreeAOTreeNode:(EsGobAfirmaCoreUtilTreeAOTreeNode *)newChild
                                            withInt:(jint)childIndex;

/*!
 @brief Removes the child at the specified index from this node's children and
  sets that node's parent to null.The child node to remove must be a <code>TreeNode</code>.
 @param childIndex the index in this node's child array of the child to remove
 @throw ArrayIndexOutOfBoundsException
 if <code>childIndex</code> is out of bounds
 */
- (void)removeWithInt:(jint)childIndex;

/*!
 @brief Returns the index of the specified child in this node's child array.If
  the specified node is not a child of this node, returns <code>-1</code>.
 This method performs a linear search and is O(n) where n is the number of
  children.
 @param aChild the TreeNode to search for among this node's children
 @throw IllegalArgumentException
 if <code>aChild</code> is null
 @return an int giving the index of the node in this node's child array,
          or <code>-1</code> if the specified node is a not a child of this
          node
 */
- (jint)getIndexWithEsGobAfirmaCoreUtilTreeAOTreeNode:(EsGobAfirmaCoreUtilTreeAOTreeNode *)aChild;

/*!
 @brief Removes <code>aChild</code> from this node's child array, giving it a
  null parent.
 @param aChild a child of this node to remove
 @throw IllegalArgumentException
 if <code>aChild</code> is null or is not a child of this
             node
 */
- (void)removeWithEsGobAfirmaCoreUtilTreeAOTreeNode:(EsGobAfirmaCoreUtilTreeAOTreeNode *)aChild;

/*!
 @brief Returns true if <code>anotherNode</code> is an ancestor of this node --
  if it is this node, this node's parent, or an ancestor of this node's
  parent.
 (Note that a node is considered an ancestor of itself.) If <code>anotherNode</code> is null, this method returns false. This
  operation is at worst O(h) where h is the distance from the root to this
  node.
 @param anotherNode node to test as an ancestor of this node
 @return true if this node is a descendant of <code>anotherNode</code>
 */
- (jboolean)isNodeAncestorWithEsGobAfirmaCoreUtilTreeAOTreeNode:(EsGobAfirmaCoreUtilTreeAOTreeNode *)anotherNode;

- (jboolean)isNodeChildWithEsGobAfirmaCoreUtilTreeAOTreeNode:(EsGobAfirmaCoreUtilTreeAOTreeNode *)aNode;

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaCoreUtilTreeAOTreeNode, parent_, EsGobAfirmaCoreUtilTreeAOTreeNode *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreUtilTreeAOTreeNode, children_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreUtilTreeAOTreeNode, userObject_, id)

__attribute__((unused)) static void EsGobAfirmaCoreUtilTreeAOTreeNode_insertWithEsGobAfirmaCoreUtilTreeAOTreeNode_withInt_(EsGobAfirmaCoreUtilTreeAOTreeNode *self, EsGobAfirmaCoreUtilTreeAOTreeNode *newChild, jint childIndex);

__attribute__((unused)) static void EsGobAfirmaCoreUtilTreeAOTreeNode_removeWithInt_(EsGobAfirmaCoreUtilTreeAOTreeNode *self, jint childIndex);

__attribute__((unused)) static jint EsGobAfirmaCoreUtilTreeAOTreeNode_getIndexWithEsGobAfirmaCoreUtilTreeAOTreeNode_(EsGobAfirmaCoreUtilTreeAOTreeNode *self, EsGobAfirmaCoreUtilTreeAOTreeNode *aChild);

__attribute__((unused)) static void EsGobAfirmaCoreUtilTreeAOTreeNode_removeWithEsGobAfirmaCoreUtilTreeAOTreeNode_(EsGobAfirmaCoreUtilTreeAOTreeNode *self, EsGobAfirmaCoreUtilTreeAOTreeNode *aChild);

__attribute__((unused)) static jboolean EsGobAfirmaCoreUtilTreeAOTreeNode_isNodeAncestorWithEsGobAfirmaCoreUtilTreeAOTreeNode_(EsGobAfirmaCoreUtilTreeAOTreeNode *self, EsGobAfirmaCoreUtilTreeAOTreeNode *anotherNode);

__attribute__((unused)) static jboolean EsGobAfirmaCoreUtilTreeAOTreeNode_isNodeChildWithEsGobAfirmaCoreUtilTreeAOTreeNode_(EsGobAfirmaCoreUtilTreeAOTreeNode *self, EsGobAfirmaCoreUtilTreeAOTreeNode *aNode);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/util/tree/AOTreeNode.java"


#line 16
@implementation EsGobAfirmaCoreUtilTreeAOTreeNode


#line 32
- (instancetype)initWithId:(id)userObject {
  EsGobAfirmaCoreUtilTreeAOTreeNode_initWithId_(self, userObject);
  return self;
}


#line 58
- (void)insertWithEsGobAfirmaCoreUtilTreeAOTreeNode:(EsGobAfirmaCoreUtilTreeAOTreeNode *)newChild
                                            withInt:(jint)childIndex {
  EsGobAfirmaCoreUtilTreeAOTreeNode_insertWithEsGobAfirmaCoreUtilTreeAOTreeNode_withInt_(self, newChild, childIndex);
}


#line 85
- (void)removeWithInt:(jint)childIndex {
  EsGobAfirmaCoreUtilTreeAOTreeNode_removeWithInt_(self, childIndex);
}


#line 96
- (void)setParentWithEsGobAfirmaCoreUtilTreeAOTreeNode:(EsGobAfirmaCoreUtilTreeAOTreeNode *)newParent {
  self->parent_ = newParent;
}


#line 102
- (EsGobAfirmaCoreUtilTreeAOTreeNode *)getParent {
  return self->parent_;
}


#line 112
- (EsGobAfirmaCoreUtilTreeAOTreeNode *)getChildAtWithInt:(jint)index {
  if (self->children_ == nil) {
    @throw new_JavaLangArrayIndexOutOfBoundsException_initWithNSString_(@"El nodo no tiene hijos");
  }
  return [self->children_ getWithInt:index];
}


#line 121
- (jint)getChildCount {
  if (self->children_ == nil) {
    return 0;
  }
  return [self->children_ size];
}


#line 139
- (jint)getIndexWithEsGobAfirmaCoreUtilTreeAOTreeNode:(EsGobAfirmaCoreUtilTreeAOTreeNode *)aChild {
  return EsGobAfirmaCoreUtilTreeAOTreeNode_getIndexWithEsGobAfirmaCoreUtilTreeAOTreeNode_(self, aChild);
}


#line 152
- (id)getUserObject {
  return self->userObject_;
}


#line 167
- (void)removeWithEsGobAfirmaCoreUtilTreeAOTreeNode:(EsGobAfirmaCoreUtilTreeAOTreeNode *)aChild {
  EsGobAfirmaCoreUtilTreeAOTreeNode_removeWithEsGobAfirmaCoreUtilTreeAOTreeNode_(self, aChild);
}


#line 187
- (void)addWithEsGobAfirmaCoreUtilTreeAOTreeNode:(EsGobAfirmaCoreUtilTreeAOTreeNode *)newChild {
  if (newChild != nil && JreObjectEqualsEquals([newChild getParent], self)) {
    EsGobAfirmaCoreUtilTreeAOTreeNode_insertWithEsGobAfirmaCoreUtilTreeAOTreeNode_withInt_(self, newChild, [self getChildCount] - 1);
  }
  else {
    EsGobAfirmaCoreUtilTreeAOTreeNode_insertWithEsGobAfirmaCoreUtilTreeAOTreeNode_withInt_(self, newChild, [self getChildCount]);
  }
}


#line 208
- (jboolean)isNodeAncestorWithEsGobAfirmaCoreUtilTreeAOTreeNode:(EsGobAfirmaCoreUtilTreeAOTreeNode *)anotherNode {
  return EsGobAfirmaCoreUtilTreeAOTreeNode_isNodeAncestorWithEsGobAfirmaCoreUtilTreeAOTreeNode_(self, anotherNode);
}


#line 229
- (jboolean)isNodeChildWithEsGobAfirmaCoreUtilTreeAOTreeNode:(EsGobAfirmaCoreUtilTreeAOTreeNode *)aNode {
  return EsGobAfirmaCoreUtilTreeAOTreeNode_isNodeChildWithEsGobAfirmaCoreUtilTreeAOTreeNode_(self, aNode);
}


#line 256
- (jboolean)isLeaf {
  return [self getChildCount] == 0;
}


#line 267
- (NSString *)description {
  
#line 269
  if (self->userObject_ == nil) {
    return @"null";
  }
  return [self->userObject_ description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreUtilTreeAOTreeNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreUtilTreeAOTreeNode;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 8, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 10, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithId:);
  methods[1].selector = @selector(insertWithEsGobAfirmaCoreUtilTreeAOTreeNode:withInt:);
  methods[2].selector = @selector(removeWithInt:);
  methods[3].selector = @selector(setParentWithEsGobAfirmaCoreUtilTreeAOTreeNode:);
  methods[4].selector = @selector(getParent);
  methods[5].selector = @selector(getChildAtWithInt:);
  methods[6].selector = @selector(getChildCount);
  methods[7].selector = @selector(getIndexWithEsGobAfirmaCoreUtilTreeAOTreeNode:);
  methods[8].selector = @selector(getUserObject);
  methods[9].selector = @selector(removeWithEsGobAfirmaCoreUtilTreeAOTreeNode:);
  methods[10].selector = @selector(addWithEsGobAfirmaCoreUtilTreeAOTreeNode:);
  methods[11].selector = @selector(isNodeAncestorWithEsGobAfirmaCoreUtilTreeAOTreeNode:);
  methods[12].selector = @selector(isNodeChildWithEsGobAfirmaCoreUtilTreeAOTreeNode:);
  methods[13].selector = @selector(isLeaf);
  methods[14].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LEsGobAfirmaCoreUtilTreeAOTreeNode;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "children_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 13, -1 },
    { "userObject_", "LNSObject;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;", "insert", "LEsGobAfirmaCoreUtilTreeAOTreeNode;I", "remove", "I", "setParent", "LEsGobAfirmaCoreUtilTreeAOTreeNode;", "getChildAt", "getIndex", "add", "isNodeAncestor", "isNodeChild", "toString", "Ljava/util/List<Les/gob/afirma/core/util/tree/AOTreeNode;>;" };
  static const J2ObjcClassInfo _EsGobAfirmaCoreUtilTreeAOTreeNode = { "AOTreeNode", "es.gob.afirma.core.util.tree", ptrTable, methods, fields, 7, 0x11, 15, 3, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreUtilTreeAOTreeNode;
}

@end


#line 32
void EsGobAfirmaCoreUtilTreeAOTreeNode_initWithId_(EsGobAfirmaCoreUtilTreeAOTreeNode *self, id userObject) {
  NSObject_init(self);
  self->parent_ = nil;
  self->userObject_ = userObject;
}


#line 32
EsGobAfirmaCoreUtilTreeAOTreeNode *new_EsGobAfirmaCoreUtilTreeAOTreeNode_initWithId_(id userObject) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreUtilTreeAOTreeNode, initWithId_, userObject)
}


#line 32
EsGobAfirmaCoreUtilTreeAOTreeNode *create_EsGobAfirmaCoreUtilTreeAOTreeNode_initWithId_(id userObject) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreUtilTreeAOTreeNode, initWithId_, userObject)
}


#line 58
void EsGobAfirmaCoreUtilTreeAOTreeNode_insertWithEsGobAfirmaCoreUtilTreeAOTreeNode_withInt_(EsGobAfirmaCoreUtilTreeAOTreeNode *self, EsGobAfirmaCoreUtilTreeAOTreeNode *newChild, jint childIndex) {
  
#line 60
  if (newChild == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"EL nuevo hijo es nulo");
  }
  else if (EsGobAfirmaCoreUtilTreeAOTreeNode_isNodeAncestorWithEsGobAfirmaCoreUtilTreeAOTreeNode_(self, newChild)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El nuevo hijo es ya un ancestro");
  }
  
#line 67
  EsGobAfirmaCoreUtilTreeAOTreeNode *oldParent = [newChild getParent];
  
#line 69
  if (oldParent != nil) {
    EsGobAfirmaCoreUtilTreeAOTreeNode_removeWithEsGobAfirmaCoreUtilTreeAOTreeNode_(oldParent, newChild);
  }
  [newChild setParentWithEsGobAfirmaCoreUtilTreeAOTreeNode:self];
  if (self->children_ == nil) {
    self->children_ = new_JavaUtilArrayList_init();
  }
  [self->children_ addWithInt:childIndex withId:newChild];
}


#line 85
void EsGobAfirmaCoreUtilTreeAOTreeNode_removeWithInt_(EsGobAfirmaCoreUtilTreeAOTreeNode *self, jint childIndex) {
  EsGobAfirmaCoreUtilTreeAOTreeNode *child = [self getChildAtWithInt:childIndex];
  (void) [((id<JavaUtilList>) nil_chk(self->children_)) removeWithInt:childIndex];
  [((EsGobAfirmaCoreUtilTreeAOTreeNode *) nil_chk(child)) setParentWithEsGobAfirmaCoreUtilTreeAOTreeNode:nil];
}


#line 139
jint EsGobAfirmaCoreUtilTreeAOTreeNode_getIndexWithEsGobAfirmaCoreUtilTreeAOTreeNode_(EsGobAfirmaCoreUtilTreeAOTreeNode *self, EsGobAfirmaCoreUtilTreeAOTreeNode *aChild) {
  if (aChild == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Argumento nulo");
  }
  
#line 144
  if (!EsGobAfirmaCoreUtilTreeAOTreeNode_isNodeChildWithEsGobAfirmaCoreUtilTreeAOTreeNode_(self, aChild)) {
    return -1;
  }
  return [((id<JavaUtilList>) nil_chk(self->children_)) indexOfWithId:aChild];
}


#line 167
void EsGobAfirmaCoreUtilTreeAOTreeNode_removeWithEsGobAfirmaCoreUtilTreeAOTreeNode_(EsGobAfirmaCoreUtilTreeAOTreeNode *self, EsGobAfirmaCoreUtilTreeAOTreeNode *aChild) {
  if (aChild == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Argumento nulo");
  }
  
#line 172
  if (!EsGobAfirmaCoreUtilTreeAOTreeNode_isNodeChildWithEsGobAfirmaCoreUtilTreeAOTreeNode_(self, aChild)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El argumento no es un hijo");
  }
  EsGobAfirmaCoreUtilTreeAOTreeNode_removeWithInt_(self, EsGobAfirmaCoreUtilTreeAOTreeNode_getIndexWithEsGobAfirmaCoreUtilTreeAOTreeNode_(self, aChild));
}


#line 208
jboolean EsGobAfirmaCoreUtilTreeAOTreeNode_isNodeAncestorWithEsGobAfirmaCoreUtilTreeAOTreeNode_(EsGobAfirmaCoreUtilTreeAOTreeNode *self, EsGobAfirmaCoreUtilTreeAOTreeNode *anotherNode) {
  if (anotherNode == nil) {
    return false;
  }
  
#line 213
  EsGobAfirmaCoreUtilTreeAOTreeNode *ancestor = self;
  
#line 215
  do {
    if ([ancestor isEqual:anotherNode]) {
      return true;
    }
    ancestor = [ancestor getParent];
  }
  while (
#line 220
  ancestor != nil);
  
#line 222
  return false;
}


#line 229
jboolean EsGobAfirmaCoreUtilTreeAOTreeNode_isNodeChildWithEsGobAfirmaCoreUtilTreeAOTreeNode_(EsGobAfirmaCoreUtilTreeAOTreeNode *self, EsGobAfirmaCoreUtilTreeAOTreeNode *aNode) {
  jboolean retval;
  
#line 232
  if (aNode == nil) {
    retval = false;
  }
  else {
    if ([self getChildCount] == 0) {
      retval = false;
    }
    else {
      retval = JreObjectEqualsEquals([aNode getParent], self);
    }
  }
  
#line 244
  return retval;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreUtilTreeAOTreeNode)
