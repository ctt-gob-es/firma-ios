//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/cert/ocsp/BasicOCSPResp.java
//

#include "ASN1Encodable.h"
#include "ASN1Encoding.h"
#include "ASN1GeneralizedTime.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Sequence.h"
#include "AlgorithmIdentifier.h"
#include "BasicOCSPResp.h"
#include "BasicOCSPResponse.h"
#include "Certificate.h"
#include "ContentVerifier.h"
#include "ContentVerifierProvider.h"
#include "DERBitString.h"
#include "Extension.h"
#include "Extensions.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OCSPException.h"
#include "OCSPUtils.h"
#include "RespID.h"
#include "ResponderID.h"
#include "ResponseData.h"
#include "SingleResp.h"
#include "SingleResponse.h"
#include "X509CertificateHolder.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/math/BigInteger.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Set.h"

#if !__has_feature(objc_arc)
#error "BasicOCSPResp must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleCertOcspBasicOCSPResp () {
 @public
  OrgSpongycastleAsn1OcspBasicOCSPResponse *resp_;
  OrgSpongycastleAsn1OcspResponseData *data_;
  OrgSpongycastleAsn1X509Extensions *extensions_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCertOcspBasicOCSPResp, resp_, OrgSpongycastleAsn1OcspBasicOCSPResponse *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCertOcspBasicOCSPResp, data_, OrgSpongycastleAsn1OcspResponseData *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCertOcspBasicOCSPResp, extensions_, OrgSpongycastleAsn1X509Extensions *)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/cert/ocsp/BasicOCSPResp.java"


#line 33
@implementation OrgSpongycastleCertOcspBasicOCSPResp


#line 40
- (instancetype)initWithOrgSpongycastleAsn1OcspBasicOCSPResponse:(OrgSpongycastleAsn1OcspBasicOCSPResponse *)resp {
  OrgSpongycastleCertOcspBasicOCSPResp_initWithOrgSpongycastleAsn1OcspBasicOCSPResponse_(self, resp);
  return self;
}


#line 52
- (IOSByteArray *)getTBSResponseData {
  
#line 54
  @try {
    
#line 56
    return [((OrgSpongycastleAsn1OcspResponseData *) nil_chk([((OrgSpongycastleAsn1OcspBasicOCSPResponse *) nil_chk(resp_)) getTbsResponseData])) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
  }
  @catch (JavaIoIOException *e) {
    
#line 60
    return nil;
  }
}


#line 69
- (OrgSpongycastleAsn1X509AlgorithmIdentifier *)getSignatureAlgorithmID {
  
#line 71
  return [((OrgSpongycastleAsn1OcspBasicOCSPResponse *) nil_chk(resp_)) getSignatureAlgorithm];
}


#line 74
- (jint)getVersion {
  
#line 76
  return [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1ASN1Integer *) nil_chk([((OrgSpongycastleAsn1OcspResponseData *) nil_chk(data_)) getVersion])) getValue])) intValue] + 1;
}


#line 79
- (OrgSpongycastleCertOcspRespID *)getResponderId {
  
#line 81
  return new_OrgSpongycastleCertOcspRespID_initWithOrgSpongycastleAsn1OcspResponderID_([((OrgSpongycastleAsn1OcspResponseData *) nil_chk(data_)) getResponderID]);
}


#line 84
- (JavaUtilDate *)getProducedAt {
  
#line 86
  return OrgSpongycastleCertOcspOCSPUtils_extractDateWithOrgSpongycastleAsn1ASN1GeneralizedTime_([((OrgSpongycastleAsn1OcspResponseData *) nil_chk(data_)) getProducedAt]);
}


#line 89
- (IOSObjectArray *)getResponses {
  
#line 91
  OrgSpongycastleAsn1ASN1Sequence *s = [((OrgSpongycastleAsn1OcspResponseData *) nil_chk(data_)) getResponses];
  IOSObjectArray *rs = [IOSObjectArray newArrayWithLength:[((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(s)) size] type:OrgSpongycastleCertOcspSingleResp_class_()];
  
#line 94
  for (jint i = 0; i != rs->size_; i++) {
    
#line 96
    (void) IOSObjectArray_SetAndConsume(rs, i, new_OrgSpongycastleCertOcspSingleResp_initWithOrgSpongycastleAsn1OcspSingleResponse_(OrgSpongycastleAsn1OcspSingleResponse_getInstanceWithId_([s getObjectAtWithInt:i])));
  }
  
#line 99
  return rs;
}


#line 102
- (jboolean)hasExtensions {
  
#line 104
  return extensions_ != nil;
}


#line 107
- (OrgSpongycastleAsn1X509Extension *)getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid {
  
#line 109
  if (extensions_ != nil) {
    
#line 111
    return [extensions_ getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:oid];
  }
  
#line 114
  return nil;
}


#line 117
- (id<JavaUtilList>)getExtensionOIDs {
  
#line 119
  return OrgSpongycastleCertOcspOCSPUtils_getExtensionOIDsWithOrgSpongycastleAsn1X509Extensions_(extensions_);
}


#line 122
- (id<JavaUtilSet>)getCriticalExtensionOIDs {
  
#line 124
  return OrgSpongycastleCertOcspOCSPUtils_getCriticalExtensionOIDsWithOrgSpongycastleAsn1X509Extensions_(extensions_);
}


#line 127
- (id<JavaUtilSet>)getNonCriticalExtensionOIDs {
  
#line 129
  return OrgSpongycastleCertOcspOCSPUtils_getNonCriticalExtensionOIDsWithOrgSpongycastleAsn1X509Extensions_(extensions_);
}

- (OrgSpongycastleAsn1ASN1ObjectIdentifier *)getSignatureAlgOID {
  
#line 135
  return [((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgSpongycastleAsn1OcspBasicOCSPResponse *) nil_chk(resp_)) getSignatureAlgorithm])) getAlgorithm];
}


#line 138
- (IOSByteArray *)getSignature {
  
#line 140
  return [((OrgSpongycastleAsn1DERBitString *) nil_chk([((OrgSpongycastleAsn1OcspBasicOCSPResponse *) nil_chk(resp_)) getSignature])) getOctets];
}


#line 143
- (IOSObjectArray *)getCerts {
  
#line 148
  if ([((OrgSpongycastleAsn1OcspBasicOCSPResponse *) nil_chk(resp_)) getCerts] != nil) {
    
#line 150
    OrgSpongycastleAsn1ASN1Sequence *s = [((OrgSpongycastleAsn1OcspBasicOCSPResponse *) nil_chk(resp_)) getCerts];
    
#line 152
    if (s != nil) {
      
#line 154
      IOSObjectArray *certs = [IOSObjectArray newArrayWithLength:[s size] type:OrgSpongycastleCertX509CertificateHolder_class_()];
      
#line 156
      for (jint i = 0; i != certs->size_; i++) {
        
#line 158
        (void) IOSObjectArray_SetAndConsume(certs, i, new_OrgSpongycastleCertX509CertificateHolder_initWithOrgSpongycastleAsn1X509Certificate_(OrgSpongycastleAsn1X509Certificate_getInstanceWithId_([s getObjectAtWithInt:i])));
      }
      
#line 161
      return certs;
    }
    
#line 164
    return JreLoadStatic(OrgSpongycastleCertOcspOCSPUtils, EMPTY_CERTS);
  }
  else {
    
#line 168
    return JreLoadStatic(OrgSpongycastleCertOcspOCSPUtils, EMPTY_CERTS);
  }
}


#line 175
- (jboolean)isSignatureValidWithOrgSpongycastleOperatorContentVerifierProvider:(id<OrgSpongycastleOperatorContentVerifierProvider>)verifierProvider {
  
#line 179
  @try {
    
#line 181
    id<OrgSpongycastleOperatorContentVerifier> verifier = [((id<OrgSpongycastleOperatorContentVerifierProvider>) nil_chk(verifierProvider)) getWithOrgSpongycastleAsn1X509AlgorithmIdentifier:[((OrgSpongycastleAsn1OcspBasicOCSPResponse *) nil_chk(resp_)) getSignatureAlgorithm]];
    JavaIoOutputStream *vOut = [((id<OrgSpongycastleOperatorContentVerifier>) nil_chk(verifier)) getOutputStream];
    
#line 184
    [((JavaIoOutputStream *) nil_chk(vOut)) writeWithByteArray:[((OrgSpongycastleAsn1OcspResponseData *) nil_chk([((OrgSpongycastleAsn1OcspBasicOCSPResponse *) nil_chk(resp_)) getTbsResponseData])) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER]];
    [vOut close];
    
#line 187
    return [verifier verifyWithByteArray:[self getSignature]];
  }
  @catch (JavaLangException *e) {
    
#line 191
    @throw new_OrgSpongycastleCertOcspOCSPException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"exception processing sig: ", e), e);
  }
}

- (IOSByteArray *)getEncoded {
  
#line 201
  return [((OrgSpongycastleAsn1OcspBasicOCSPResponse *) nil_chk(resp_)) getEncoded];
}

- (jboolean)isEqual:(id)o {
  
#line 206
  if (JreObjectEqualsEquals(o, self)) {
    
#line 208
    return true;
  }
  
#line 211
  if (!([o isKindOfClass:[OrgSpongycastleCertOcspBasicOCSPResp class]])) {
    
#line 213
    return false;
  }
  
#line 216
  OrgSpongycastleCertOcspBasicOCSPResp *r = (OrgSpongycastleCertOcspBasicOCSPResp *) cast_chk(o, [OrgSpongycastleCertOcspBasicOCSPResp class]);
  
#line 218
  return [((OrgSpongycastleAsn1OcspBasicOCSPResponse *) nil_chk(resp_)) isEqual:((OrgSpongycastleCertOcspBasicOCSPResp *) nil_chk(r))->resp_];
}


#line 221
- (NSUInteger)hash {
  
#line 223
  return ((jint) [((OrgSpongycastleAsn1OcspBasicOCSPResponse *) nil_chk(resp_)) hash]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509AlgorithmIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCertOcspRespID;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgSpongycastleCertOcspSingleResp;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509Extension;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1ObjectIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgSpongycastleCertX509CertificateHolder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleAsn1OcspBasicOCSPResponse:);
  methods[1].selector = @selector(getTBSResponseData);
  methods[2].selector = @selector(getSignatureAlgorithmID);
  methods[3].selector = @selector(getVersion);
  methods[4].selector = @selector(getResponderId);
  methods[5].selector = @selector(getProducedAt);
  methods[6].selector = @selector(getResponses);
  methods[7].selector = @selector(hasExtensions);
  methods[8].selector = @selector(getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:);
  methods[9].selector = @selector(getExtensionOIDs);
  methods[10].selector = @selector(getCriticalExtensionOIDs);
  methods[11].selector = @selector(getNonCriticalExtensionOIDs);
  methods[12].selector = @selector(getSignatureAlgOID);
  methods[13].selector = @selector(getSignature);
  methods[14].selector = @selector(getCerts);
  methods[15].selector = @selector(isSignatureValidWithOrgSpongycastleOperatorContentVerifierProvider:);
  methods[16].selector = @selector(getEncoded);
  methods[17].selector = @selector(isEqual:);
  methods[18].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "resp_", "LOrgSpongycastleAsn1OcspBasicOCSPResponse;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "data_", "LOrgSpongycastleAsn1OcspResponseData;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extensions_", "LOrgSpongycastleAsn1X509Extensions;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleAsn1OcspBasicOCSPResponse;", "getExtension", "LOrgSpongycastleAsn1ASN1ObjectIdentifier;", "isSignatureValid", "LOrgSpongycastleOperatorContentVerifierProvider;", "LOrgSpongycastleCertOcspOCSPException;", "LJavaIoIOException;", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgSpongycastleCertOcspBasicOCSPResp = { "BasicOCSPResp", "org.spongycastle.cert.ocsp", ptrTable, methods, fields, 7, 0x1, 19, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCertOcspBasicOCSPResp;
}

@end


#line 40
void OrgSpongycastleCertOcspBasicOCSPResp_initWithOrgSpongycastleAsn1OcspBasicOCSPResponse_(OrgSpongycastleCertOcspBasicOCSPResp *self, OrgSpongycastleAsn1OcspBasicOCSPResponse *resp) {
  NSObject_init(self);
  
#line 43
  self->resp_ = resp;
  self->data_ = [((OrgSpongycastleAsn1OcspBasicOCSPResponse *) nil_chk(resp)) getTbsResponseData];
  self->extensions_ = OrgSpongycastleAsn1X509Extensions_getInstanceWithId_([((OrgSpongycastleAsn1OcspResponseData *) nil_chk([resp getTbsResponseData])) getResponseExtensions]);
}


#line 40
OrgSpongycastleCertOcspBasicOCSPResp *new_OrgSpongycastleCertOcspBasicOCSPResp_initWithOrgSpongycastleAsn1OcspBasicOCSPResponse_(OrgSpongycastleAsn1OcspBasicOCSPResponse *resp) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCertOcspBasicOCSPResp, initWithOrgSpongycastleAsn1OcspBasicOCSPResponse_, resp)
}


#line 40
OrgSpongycastleCertOcspBasicOCSPResp *create_OrgSpongycastleCertOcspBasicOCSPResp_initWithOrgSpongycastleAsn1OcspBasicOCSPResponse_(OrgSpongycastleAsn1OcspBasicOCSPResponse *resp) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCertOcspBasicOCSPResp, initWithOrgSpongycastleAsn1OcspBasicOCSPResponse_, resp)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCertOcspBasicOCSPResp)
