//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/ColorConverter.java
//

#include "ColorConverter.h"
#include "ColorScaler.h"
#include "ColorSpace.h"
#include "ICC_Transform.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NativeImageFormat.h"

#if !__has_feature(objc_arc)
#error "ColorConverter must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComColorConverter () {
 @public
  ComColorScaler *scaler_;
}

/*!
 @brief Creates one-row NativeImageFormat, using either nCols if it is positive,
  or arr.length to determine the number of pixels
 @param t - transform
 @param arr - short array or null if nCols is positive
 @param nCols - number of pixels in the array or 0 if array is not null
 @param inArg - is it an input or output array
 @return one-row NativeImageFormat
 */
- (ComNativeImageFormat *)createImageFormatWithComICC_Transform:(ComICC_Transform *)t
                                                 withShortArray:(IOSShortArray *)arr
                                                        withInt:(jint)nCols
                                                    withBoolean:(jboolean)inArg;

@end

J2OBJC_FIELD_SETTER(ComColorConverter, scaler_, ComColorScaler *)

__attribute__((unused)) static ComNativeImageFormat *ComColorConverter_createImageFormatWithComICC_Transform_withShortArray_withInt_withBoolean_(ComColorConverter *self, ComICC_Transform *t, IOSShortArray *arr, jint nCols, jboolean inArg);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/ColorConverter.java"


#line 29
@implementation ComColorConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 29
- (instancetype)init {
  ComColorConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 32
- (void)loadScalingDataWithHarmonyJavaAwtColorColorSpace:(HarmonyJavaAwtColorColorSpace *)cs {
  [((ComColorScaler *) nil_chk(scaler_)) loadScalingDataWithHarmonyJavaAwtColorColorSpace:cs];
}


#line 137
- (IOSObjectArray *)translateColorWithComICC_Transform:(ComICC_Transform *)t
                                       withFloatArray2:(IOSObjectArray *)buffer
                     withHarmonyJavaAwtColorColorSpace:(HarmonyJavaAwtColorColorSpace *)srcCS
                     withHarmonyJavaAwtColorColorSpace:(HarmonyJavaAwtColorColorSpace *)dstCS
                                               withInt:(jint)nPixels {
  
#line 139
  if (srcCS != nil) {
    [((ComColorScaler *) nil_chk(scaler_)) loadScalingDataWithHarmonyJavaAwtColorColorSpace:srcCS];
  }
  jint nSrcChannels = [((ComICC_Transform *) nil_chk(t)) getNumInputChannels];
  IOSShortArray *srcShortData = [IOSShortArray newArrayWithLength:nPixels * nSrcChannels];
  for (jint i = 0, srcDataPos = 0; i < nPixels; i++) {
    [((ComColorScaler *) nil_chk(scaler_)) scale__WithFloatArray:IOSObjectArray_Get(nil_chk(buffer), i) withShortArray:srcShortData withInt:srcDataPos];
    srcDataPos += nSrcChannels;
  }
  
#line 150
  IOSShortArray *dstShortData = [self translateColorWithComICC_Transform:t withShortArray:srcShortData withShortArray:nil];
  
#line 152
  jint nDstChannels = [t getNumOutputChannels];
  jint bufferSize = ((IOSFloatArray *) nil_chk(IOSObjectArray_Get(nil_chk(buffer), 0)))->size_;
  if (bufferSize < nDstChannels + 1) {
    for (jint i = 0; i < nPixels; i++) {
      
#line 157
      (void) IOSObjectArray_SetAndConsume(buffer, i, [IOSFloatArray newArrayWithLength:nDstChannels + 1]);
    }
  }
  
#line 162
  if (dstCS != nil) {
    [((ComColorScaler *) nil_chk(scaler_)) loadScalingDataWithHarmonyJavaAwtColorColorSpace:dstCS];
  }
  for (jint i = 0, dstDataPos = 0; i < nPixels; i++) {
    [((ComColorScaler *) nil_chk(scaler_)) unscaleWithFloatArray:IOSObjectArray_Get(buffer, i) withShortArray:dstShortData withInt:dstDataPos];
    dstDataPos += nDstChannels;
  }
  
#line 170
  return buffer;
}


#line 221
- (IOSShortArray *)translateColorWithComICC_Transform:(ComICC_Transform *)t
                                       withShortArray:(IOSShortArray *)src
                                       withShortArray:(IOSShortArray *)dst {
  
#line 222
  ComNativeImageFormat *srcFmt = ComColorConverter_createImageFormatWithComICC_Transform_withShortArray_withInt_withBoolean_(self, t, src, 0, true);
  ComNativeImageFormat *dstFmt = ComColorConverter_createImageFormatWithComICC_Transform_withShortArray_withInt_withBoolean_(self, t, dst, [((ComNativeImageFormat *) nil_chk(srcFmt)) getNumCols], false);
  
#line 225
  [((ComICC_Transform *) nil_chk(t)) translateColorsWithComNativeImageFormat:srcFmt withComNativeImageFormat:dstFmt];
  
#line 227
  return (IOSShortArray *) cast_chk([((ComNativeImageFormat *) nil_chk(dstFmt)) getChannelData], [IOSShortArray class]);
}


#line 260
- (ComNativeImageFormat *)createImageFormatWithComICC_Transform:(ComICC_Transform *)t
                                                 withShortArray:(IOSShortArray *)arr
                                                        withInt:(jint)nCols
                                                    withBoolean:(jboolean)inArg {
  return ComColorConverter_createImageFormatWithComICC_Transform_withShortArray_withInt_withBoolean_(self, t, arr, nCols, inArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[[F", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "[S", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "LComNativeImageFormat;", 0x2, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(loadScalingDataWithHarmonyJavaAwtColorColorSpace:);
  methods[2].selector = @selector(translateColorWithComICC_Transform:withFloatArray2:withHarmonyJavaAwtColorColorSpace:withHarmonyJavaAwtColorColorSpace:withInt:);
  methods[3].selector = @selector(translateColorWithComICC_Transform:withShortArray:withShortArray:);
  methods[4].selector = @selector(createImageFormatWithComICC_Transform:withShortArray:withInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scaler_", "LComColorScaler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadScalingData", "LHarmonyJavaAwtColorColorSpace;", "translateColor", "LComICC_Transform;[[FLHarmonyJavaAwtColorColorSpace;LHarmonyJavaAwtColorColorSpace;I", "LComICC_Transform;[S[S", "createImageFormat", "LComICC_Transform;[SIZ" };
  static const J2ObjcClassInfo _ComColorConverter = { "ColorConverter", "com", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_ComColorConverter;
}

@end


#line 29
void ComColorConverter_init(ComColorConverter *self) {
  NSObject_init(self);
  self->scaler_ = new_ComColorScaler_init();
}


#line 29
ComColorConverter *new_ComColorConverter_init() {
  J2OBJC_NEW_IMPL(ComColorConverter, init)
}


#line 29
ComColorConverter *create_ComColorConverter_init() {
  J2OBJC_CREATE_IMPL(ComColorConverter, init)
}


#line 260
ComNativeImageFormat *ComColorConverter_createImageFormatWithComICC_Transform_withShortArray_withInt_withBoolean_(ComColorConverter *self, ComICC_Transform *t, IOSShortArray *arr, jint nCols, jboolean inArg) {
  jint nComponents = inArg ? [((ComICC_Transform *) nil_chk(t)) getNumInputChannels] : [((ComICC_Transform *) nil_chk(t)) getNumOutputChannels];
  
#line 263
  if (arr == nil || arr->size_ < nCols * nComponents) {
    arr = [IOSShortArray newArrayWithLength:nCols * nComponents];
  }
  
#line 267
  if (nCols == 0)
#line 268
  nCols = JreIntDiv(arr->size_, nComponents);
  
#line 270
  return new_ComNativeImageFormat_initPackagePrivateWithId_withInt_withInt_withInt_(arr, nComponents, 1, nCols);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComColorConverter)
