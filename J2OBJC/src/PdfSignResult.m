//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/signers/pades/PdfSignResult.java
//

#include "AOUtil.h"
#include "Base64.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PdfSignResult.h"
#include "SecureXmlBuilder.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/Properties.h"
#include "javax/xml/datatype/DatatypeFactory.h"
#include "javax/xml/datatype/XMLGregorianCalendar.h"
#include "javax/xml/parsers/DocumentBuilder.h"
#include "javax/xml/parsers/ParserConfigurationException.h"
#include "org/w3c/dom/Document.h"
#include "org/w3c/dom/Node.h"
#include "org/w3c/dom/NodeList.h"
#include "org/xml/sax/SAXException.h"

#if !__has_feature(objc_arc)
#error "PdfSignResult must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaSignersPadesPdfSignResult () {
 @public
  NSString *fileID_;
  IOSByteArray *sign_;
  IOSByteArray *timestamp_;
  JavaUtilGregorianCalendar *signTime_;
  JavaUtilProperties *extraParams_;
}

/*!
 @brief M&eacute;todo necesario para la serializaci&oacute;n de un objeto.
 @param outArg Datos de salida.
 @throw IOExceptionCuando no se puede serializar.
 */
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

/*!
 @brief M&eacute;todo necesario para la deserializaci&oacute;n de un objeto.
 @param inArg Datos de entrada (en formato XML).
 @throw IOExceptionCuando no se puede deserializar.
 */
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

/*!
 @brief Busca el siguiente nodo de tipo elemento del listado.
 @param nodeList Listado de nodos.
 @param initialIndex &Iacute; ndice desde el que empezar la b &uacute; squeda.
 @return &Iacute;ndice del nodo de tipo elemento.
 @throw IOExceptionCuando no se encuentran nodos del tipo elemento a partir del &iacute;ndice indicado.
 */
+ (jint)getNextElementNodeWithOrgW3cDomNodeList:(id<OrgW3cDomNodeList>)nodeList
                                        withInt:(jint)initialIndex;

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaSignersPadesPdfSignResult, fileID_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaSignersPadesPdfSignResult, sign_, IOSByteArray *)
J2OBJC_FIELD_SETTER(EsGobAfirmaSignersPadesPdfSignResult, timestamp_, IOSByteArray *)
J2OBJC_FIELD_SETTER(EsGobAfirmaSignersPadesPdfSignResult, signTime_, JavaUtilGregorianCalendar *)
J2OBJC_FIELD_SETTER(EsGobAfirmaSignersPadesPdfSignResult, extraParams_, JavaUtilProperties *)

inline jlong EsGobAfirmaSignersPadesPdfSignResult_get_serialVersionUID(void);
#define EsGobAfirmaSignersPadesPdfSignResult_serialVersionUID 2LL
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaSignersPadesPdfSignResult, serialVersionUID, jlong)

__attribute__((unused)) static void EsGobAfirmaSignersPadesPdfSignResult_writeObjectWithJavaIoObjectOutputStream_(EsGobAfirmaSignersPadesPdfSignResult *self, JavaIoObjectOutputStream *outArg);

__attribute__((unused)) static void EsGobAfirmaSignersPadesPdfSignResult_readObjectWithJavaIoObjectInputStream_(EsGobAfirmaSignersPadesPdfSignResult *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static jint EsGobAfirmaSignersPadesPdfSignResult_getNextElementNodeWithOrgW3cDomNodeList_withInt_(id<OrgW3cDomNodeList> nodeList, jint initialIndex);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/signers/pades/PdfSignResult.java"


#line 34
@implementation EsGobAfirmaSignersPadesPdfSignResult

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 44
- (instancetype)init {
  EsGobAfirmaSignersPadesPdfSignResult_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 57
- (instancetype)initWithNSString:(NSString *)pdfFileId
                   withByteArray:(IOSByteArray *)signature
                   withByteArray:(IOSByteArray *)tsp
   withJavaUtilGregorianCalendar:(JavaUtilGregorianCalendar *)signingTime
          withJavaUtilProperties:(JavaUtilProperties *)xParams {
  EsGobAfirmaSignersPadesPdfSignResult_initWithNSString_withByteArray_withByteArray_withJavaUtilGregorianCalendar_withJavaUtilProperties_(self, pdfFileId, signature, tsp, signingTime, xParams);
  return self;
}


#line 83
- (void)setExtraParamsWithJavaUtilProperties:(JavaUtilProperties *)xParams {
  self->extraParams_ = xParams != nil ? (JavaUtilProperties *) cast_chk([xParams java_clone], [JavaUtilProperties class]) : nil;
}


#line 89
- (JavaUtilProperties *)getExtraParams {
  return self->extraParams_ != nil ? (JavaUtilProperties *) cast_chk([self->extraParams_ java_clone], [JavaUtilProperties class]) : nil;
}


#line 95
- (NSString *)getFileID {
  return self->fileID_;
}


#line 101
- (IOSByteArray *)getSign {
  return [((IOSByteArray *) nil_chk(self->sign_)) java_clone];
}


#line 107
- (IOSByteArray *)getTimestamp {
  return self->timestamp_ != nil ? [self->timestamp_ java_clone] : nil;
}


#line 113
- (JavaUtilGregorianCalendar *)getSignTime {
  return self->signTime_;
}


#line 120
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  EsGobAfirmaSignersPadesPdfSignResult_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}


#line 155
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  EsGobAfirmaSignersPadesPdfSignResult_readObjectWithJavaIoObjectInputStream_(self, inArg);
}


#line 225
+ (jint)getNextElementNodeWithOrgW3cDomNodeList:(id<OrgW3cDomNodeList>)nodeList
                                        withInt:(jint)initialIndex {
  return EsGobAfirmaSignersPadesPdfSignResult_getNextElementNodeWithOrgW3cDomNodeList_withInt_(nodeList, initialIndex);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilGregorianCalendar;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, 5, -1, -1, -1 },
    { NULL, "I", 0xa, 8, 9, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:withByteArray:withByteArray:withJavaUtilGregorianCalendar:withJavaUtilProperties:);
  methods[2].selector = @selector(setExtraParamsWithJavaUtilProperties:);
  methods[3].selector = @selector(getExtraParams);
  methods[4].selector = @selector(getFileID);
  methods[5].selector = @selector(getSign);
  methods[6].selector = @selector(getTimestamp);
  methods[7].selector = @selector(getSignTime);
  methods[8].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[9].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[10].selector = @selector(getNextElementNodeWithOrgW3cDomNodeList:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EsGobAfirmaSignersPadesPdfSignResult_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "fileID_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sign_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timestamp_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "signTime_", "LJavaUtilGregorianCalendar;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extraParams_", "LJavaUtilProperties;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[B[BLJavaUtilGregorianCalendar;LJavaUtilProperties;", "setExtraParams", "LJavaUtilProperties;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "readObject", "LJavaIoObjectInputStream;", "getNextElementNode", "LOrgW3cDomNodeList;I" };
  static const J2ObjcClassInfo _EsGobAfirmaSignersPadesPdfSignResult = { "PdfSignResult", "es.gob.afirma.signers.pades", ptrTable, methods, fields, 7, 0x11, 11, 6, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaSignersPadesPdfSignResult;
}

@end


#line 44
void EsGobAfirmaSignersPadesPdfSignResult_init(EsGobAfirmaSignersPadesPdfSignResult *self) {
  NSObject_init(self);
  
#line 45
  self->fileID_ = nil;
  self->sign_ = [IOSByteArray newArrayWithLength:0];
  self->signTime_ = new_JavaUtilGregorianCalendar_init();
  self->extraParams_ = new_JavaUtilProperties_init();
}


#line 44
EsGobAfirmaSignersPadesPdfSignResult *new_EsGobAfirmaSignersPadesPdfSignResult_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaSignersPadesPdfSignResult, init)
}


#line 44
EsGobAfirmaSignersPadesPdfSignResult *create_EsGobAfirmaSignersPadesPdfSignResult_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaSignersPadesPdfSignResult, init)
}


#line 57
void EsGobAfirmaSignersPadesPdfSignResult_initWithNSString_withByteArray_withByteArray_withJavaUtilGregorianCalendar_withJavaUtilProperties_(EsGobAfirmaSignersPadesPdfSignResult *self, NSString *pdfFileId, IOSByteArray *signature, IOSByteArray *tsp, JavaUtilGregorianCalendar *signingTime, JavaUtilProperties *xParams) {
  NSObject_init(self);
  
#line 62
  if (signingTime == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Es obligatorio proporcionar un momento de firmado");
  }
  if (pdfFileId == nil || [pdfFileId java_isEmpty]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Es obligatorio proporcionar un MAC de PDF");
  }
  if (signature == nil || signature->size_ < 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Es obligatorio una pre-firma");
  }
  self->fileID_ = pdfFileId;
  self->sign_ = [signature java_clone];
  self->timestamp_ = tsp != nil ? [tsp java_clone] : nil;
  self->signTime_ = signingTime;
  self->extraParams_ = xParams != nil ? xParams : new_JavaUtilProperties_init();
}


#line 57
EsGobAfirmaSignersPadesPdfSignResult *new_EsGobAfirmaSignersPadesPdfSignResult_initWithNSString_withByteArray_withByteArray_withJavaUtilGregorianCalendar_withJavaUtilProperties_(NSString *pdfFileId, IOSByteArray *signature, IOSByteArray *tsp, JavaUtilGregorianCalendar *signingTime, JavaUtilProperties *xParams) {
  J2OBJC_NEW_IMPL(EsGobAfirmaSignersPadesPdfSignResult, initWithNSString_withByteArray_withByteArray_withJavaUtilGregorianCalendar_withJavaUtilProperties_, pdfFileId, signature, tsp, signingTime, xParams)
}


#line 57
EsGobAfirmaSignersPadesPdfSignResult *create_EsGobAfirmaSignersPadesPdfSignResult_initWithNSString_withByteArray_withByteArray_withJavaUtilGregorianCalendar_withJavaUtilProperties_(NSString *pdfFileId, IOSByteArray *signature, IOSByteArray *tsp, JavaUtilGregorianCalendar *signingTime, JavaUtilProperties *xParams) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaSignersPadesPdfSignResult, initWithNSString_withByteArray_withByteArray_withJavaUtilGregorianCalendar_withJavaUtilProperties_, pdfFileId, signature, tsp, signingTime, xParams)
}


#line 120
void EsGobAfirmaSignersPadesPdfSignResult_writeObjectWithJavaIoObjectOutputStream_(EsGobAfirmaSignersPadesPdfSignResult *self, JavaIoObjectOutputStream *outArg) {
  
#line 122
  JavaxXmlDatatypeDatatypeFactory *dataTypeFactory;
  @try {
    dataTypeFactory = JavaxXmlDatatypeDatatypeFactory_newInstance();
  }
  @catch (JavaLangException *e) {
    @throw new_JavaIoIOException_initWithJavaLangThrowable_(e);
  }
  
#line 130
  JavaLangStringBuilder *sb = [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_init() appendWithNSString:
#line 131
  @"<signResult>\n"])) appendWithNSString:
#line 132
  @" <extraParams>\n"])) appendWithNSString:EsGobAfirmaCoreMiscAOUtil_properties2Base64WithJavaUtilProperties_(
#line 133
  [self getExtraParams])])) appendWithChar:0x000a])) appendWithNSString:
#line 134
  @" </extraParams>\n"])) appendWithNSString:
#line 135
  @" <pdfId>\n"])) appendWithNSString:
#line 136
  [self getFileID]])) appendWithChar:0x000a])) appendWithNSString:
#line 137
  @" </pdfIf>\n"])) appendWithNSString:
#line 138
  @" <sign>\n"])) appendWithNSString:EsGobAfirmaCoreMiscBase64_encodeWithByteArray_(
#line 139
  [self getSign])])) appendWithChar:0x000a])) appendWithNSString:
#line 140
  @" </sign>\n"])) appendWithNSString:
#line 141
  @" <timestamp>\n"])) appendWithNSString:
#line 142
  self->timestamp_ != nil ? EsGobAfirmaCoreMiscBase64_encodeWithByteArray_([self getTimestamp]) : @""])) appendWithChar:0x000a])) appendWithNSString:
#line 143
  @" </timestamp>\n"])) appendWithNSString:
#line 144
  @" <signTime>\n"])) appendWithNSString:
#line 145
  [((JavaxXmlDatatypeXMLGregorianCalendar *) nil_chk([((JavaxXmlDatatypeDatatypeFactory *) nil_chk(dataTypeFactory)) newXMLGregorianCalendarWithJavaUtilGregorianCalendar:[self getSignTime]])) toXMLFormat]])) appendWithChar:0x000a])) appendWithNSString:
#line 146
  @" </signTime>\n"])) appendWithNSString:
#line 147
  @"</signResult>"];
  
#line 149
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) writeWithByteArray:[((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) description])) java_getBytes]];
}


#line 155
void EsGobAfirmaSignersPadesPdfSignResult_readObjectWithJavaIoObjectInputStream_(EsGobAfirmaSignersPadesPdfSignResult *self, JavaIoObjectInputStream *inArg) {
  id<OrgW3cDomDocument> xmlSign;
  @try {
    xmlSign = [((JavaxXmlParsersDocumentBuilder *) nil_chk(EsGobAfirmaCoreMiscSecureXmlBuilder_getSecureDocumentBuilder())) parseWithJavaIoInputStream:inArg];
  }
  @catch (OrgXmlSaxSAXException *e) {
    @throw new_JavaIoIOException_initWithJavaLangThrowable_(e);
  }
  @catch (JavaxXmlParsersParserConfigurationException *e) {
    @throw new_JavaIoIOException_initWithJavaLangThrowable_(e);
  }
  
#line 167
  id<OrgW3cDomNodeList> nodeList = [((id<OrgW3cDomDocument>) nil_chk(xmlSign)) getChildNodes];
  jint i = EsGobAfirmaSignersPadesPdfSignResult_getNextElementNodeWithOrgW3cDomNodeList_withInt_(nodeList, 0);
  
#line 171
  id<OrgW3cDomNode> node = [((id<OrgW3cDomNodeList>) nil_chk(nodeList)) itemWithInt:i];
  if (![@"extraParams" java_equalsIgnoreCase:[((id<OrgW3cDomNode>) nil_chk(node)) getNodeName]]) {
    @throw new_JavaIoIOException_initWithNSString_(@"No se encontro el nodo 'extraParams' del PdfSignResultSerializado");
  }
  self->extraParams_ = EsGobAfirmaCoreMiscAOUtil_base642PropertiesWithNSString_([((NSString *) nil_chk([node getTextContent])) java_trim]);
  jint unseq$1 =
#line 178
  ++i;
  
#line 178
  i = EsGobAfirmaSignersPadesPdfSignResult_getNextElementNodeWithOrgW3cDomNodeList_withInt_(nodeList, unseq$1);
  node = [nodeList itemWithInt:i];
  if (![@"pdfId" java_equalsIgnoreCase:[((id<OrgW3cDomNode>) nil_chk(node)) getNodeName]]) {
    @throw new_JavaIoIOException_initWithNSString_(@"No se encontro el nodo 'pdfId' del PdfSignResultSerializado");
  }
  self->fileID_ = [((NSString *) nil_chk([node getTextContent])) java_trim];
  jint unseq$2 =
#line 186
  ++i;
  
#line 186
  i = EsGobAfirmaSignersPadesPdfSignResult_getNextElementNodeWithOrgW3cDomNodeList_withInt_(nodeList, unseq$2);
  node = [nodeList itemWithInt:i];
  if (![@"sign" java_equalsIgnoreCase:[((id<OrgW3cDomNode>) nil_chk(node)) getNodeName]]) {
    @throw new_JavaIoIOException_initWithNSString_(@"No se encontro el nodo 'sign' del PdfSignResultSerializado");
  }
  self->sign_ = EsGobAfirmaCoreMiscBase64_decodeWithNSString_([((NSString *) nil_chk([node getTextContent])) java_trim]);
  jint unseq$3 =
#line 194
  ++i;
  
#line 194
  i = EsGobAfirmaSignersPadesPdfSignResult_getNextElementNodeWithOrgW3cDomNodeList_withInt_(nodeList, unseq$3);
  node = [nodeList itemWithInt:i];
  if (![@"timestamp" java_equalsIgnoreCase:[((id<OrgW3cDomNode>) nil_chk(node)) getNodeName]]) {
    @throw new_JavaIoIOException_initWithNSString_(
#line 198
    @"No se encontro el nodo 'timestamp' del PdfSignResultSerializado, aunque no haya sello de tiempo el nodo debe existir (aunque vacio)");
  }
  
#line 201
  self->timestamp_ = [((NSString *) nil_chk([((NSString *) nil_chk([node getTextContent])) java_trim])) java_isEmpty] ? nil : EsGobAfirmaCoreMiscBase64_decodeWithNSString_([((NSString *) nil_chk([node getTextContent])) java_trim]);
  jint unseq$4 =
#line 204
  ++i;
  
#line 204
  i = EsGobAfirmaSignersPadesPdfSignResult_getNextElementNodeWithOrgW3cDomNodeList_withInt_(nodeList, unseq$4);
  node = [nodeList itemWithInt:i];
  if (![@"signTime" java_equalsIgnoreCase:[((id<OrgW3cDomNode>) nil_chk(node)) getNodeName]]) {
    @throw new_JavaIoIOException_initWithNSString_(@"No se encontro el nodo 'signTime' del PdfSignResultSerializado");
  }
  
#line 210
  JavaxXmlDatatypeDatatypeFactory *dataTypeFactory;
  @try {
    dataTypeFactory = JavaxXmlDatatypeDatatypeFactory_newInstance();
  }
  @catch (JavaLangException *e) {
    @throw new_JavaIoIOException_initWithJavaLangThrowable_(e);
  }
  self->signTime_ = [((JavaxXmlDatatypeXMLGregorianCalendar *) nil_chk([((JavaxXmlDatatypeDatatypeFactory *) nil_chk(dataTypeFactory)) newXMLGregorianCalendarWithNSString:[((NSString *) nil_chk([node getTextContent])) java_trim]])) toGregorianCalendar];
}


#line 225
jint EsGobAfirmaSignersPadesPdfSignResult_getNextElementNodeWithOrgW3cDomNodeList_withInt_(id<OrgW3cDomNodeList> nodeList, jint initialIndex) {
  EsGobAfirmaSignersPadesPdfSignResult_initialize();
  
#line 226
  for (jint i = initialIndex; i < [((id<OrgW3cDomNodeList>) nil_chk(nodeList)) getLength]; i++) {
    id<OrgW3cDomNode> node = [nodeList itemWithInt:i];
    if ([((id<OrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgW3cDomNode_ELEMENT_NODE) {
      return i;
    }
  }
  @throw new_JavaIoIOException_initWithNSString_(@"No se encontraron todos los campos del PdfSignResult serializado");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaSignersPadesPdfSignResult)
