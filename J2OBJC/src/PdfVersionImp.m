//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/internal/PdfVersionImp.java
//

#include "DocWriter.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OutputStreamCounter.h"
#include "PdfDeveloperExtension.h"
#include "PdfDictionary.h"
#include "PdfName.h"
#include "PdfNumber.h"
#include "PdfVersionImp.h"
#include "PdfWriter.h"

#if !__has_feature(objc_arc)
#error "PdfVersionImp must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfInternalPdfVersionImp () {
 @public
  /*!
   @brief Indicates if the header was already written.
   */
  jboolean headerWasWritten_;
  /*!
   @brief Indicates if we are working in append mode.
   */
  jboolean appendmode_;
  /*!
   @brief The version that was or will be written to the header.
   */
  jchar header_version_;
  /*!
   @brief The version that will be written to the catalog.
   */
  ComAowagieTextPdfPdfName *catalog_version_;
  /*!
   @brief The extensions dictionary.
   @since 2.1.6
   */
  ComAowagieTextPdfPdfDictionary *extensions_;
}

/*!
 @brief Returns the version as a byte[].
 @param version_ the version character
 @return Version
 */
- (IOSByteArray *)getVersionAsByteArrayWithChar:(jchar)version_;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfInternalPdfVersionImp, catalog_version_, ComAowagieTextPdfPdfName *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfInternalPdfVersionImp, extensions_, ComAowagieTextPdfPdfDictionary *)

/*!
 @brief Contains different strings that are part of the header.
 */
inline IOSObjectArray *ComAowagieTextPdfInternalPdfVersionImp_get_HEADER(void);
static IOSObjectArray *ComAowagieTextPdfInternalPdfVersionImp_HEADER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfInternalPdfVersionImp, HEADER, IOSObjectArray *)

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfInternalPdfVersionImp_getVersionAsByteArrayWithChar_(ComAowagieTextPdfInternalPdfVersionImp *self, jchar version_);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/internal/PdfVersionImp.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfInternalPdfVersionImp)


#line 68
@implementation ComAowagieTextPdfInternalPdfVersionImp

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 68
- (instancetype)init {
  ComAowagieTextPdfInternalPdfVersionImp_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 94
- (void)setPdfVersionWithChar:(jchar)version_ {
  
#line 96
  if (self->headerWasWritten_ || self->appendmode_) {
    [self setPdfVersionWithComAowagieTextPdfPdfName:ComAowagieTextPdfInternalPdfVersionImp_getVersionAsNameWithChar_(version_)];
  }
  else {
    self->header_version_ = version_;
  }
}


#line 107
- (void)setAtLeastPdfVersionWithChar:(jchar)version_ {
  
#line 109
  if (version_ > self->header_version_) {
    [self setPdfVersionWithChar:version_];
  }
}


#line 117
- (void)setPdfVersionWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)version_ {
  
#line 119
  if (self->catalog_version_ == nil || [self->catalog_version_ compareToWithId:version_] < 0) {
    self->catalog_version_ = version_;
  }
}


#line 128
- (void)setAppendmodeWithBoolean:(jboolean)appendmode {
  self->appendmode_ = appendmode;
}


#line 137
- (void)writeHeaderWithComAowagieTextPdfOutputStreamCounter:(ComAowagieTextPdfOutputStreamCounter *)os {
  if (self->appendmode_) {
    [((ComAowagieTextPdfOutputStreamCounter *) nil_chk(os)) writeWithByteArray:IOSObjectArray_Get(nil_chk(ComAowagieTextPdfInternalPdfVersionImp_HEADER), 0)];
  }
  else {
    [((ComAowagieTextPdfOutputStreamCounter *) nil_chk(os)) writeWithByteArray:IOSObjectArray_Get(nil_chk(ComAowagieTextPdfInternalPdfVersionImp_HEADER), 1)];
    [os writeWithByteArray:ComAowagieTextPdfInternalPdfVersionImp_getVersionAsByteArrayWithChar_(self, self->header_version_)];
    [os writeWithByteArray:IOSObjectArray_Get(ComAowagieTextPdfInternalPdfVersionImp_HEADER, 2)];
    self->headerWasWritten_ = true;
  }
}


#line 154
+ (ComAowagieTextPdfPdfName *)getVersionAsNameWithChar:(jchar)version_ {
  return ComAowagieTextPdfInternalPdfVersionImp_getVersionAsNameWithChar_(version_);
}


#line 178
- (IOSByteArray *)getVersionAsByteArrayWithChar:(jchar)version_ {
  return ComAowagieTextPdfInternalPdfVersionImp_getVersionAsByteArrayWithChar_(self, version_);
}


#line 185
- (void)addToCatalogWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)catalog {
  if (self->catalog_version_ != nil) {
    [((ComAowagieTextPdfPdfDictionary *) nil_chk(catalog)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, VERSION) withComAowagieTextPdfPdfObject:self->catalog_version_];
  }
  if (self->extensions_ != nil) {
    [((ComAowagieTextPdfPdfDictionary *) nil_chk(catalog)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, EXTENSIONS) withComAowagieTextPdfPdfObject:self->extensions_];
  }
}


#line 199
- (void)addDeveloperExtensionWithComAowagieTextPdfPdfDeveloperExtension:(ComAowagieTextPdfPdfDeveloperExtension *)de {
  
#line 201
  if (self->extensions_ == nil) {
    self->extensions_ = new_ComAowagieTextPdfPdfDictionary_init();
  }
  else {
    ComAowagieTextPdfPdfDictionary *extension = [self->extensions_ getAsDictWithComAowagieTextPdfPdfName:[((ComAowagieTextPdfPdfDeveloperExtension *) nil_chk(de)) getPrefix]];
    if (extension != nil) {
      jint diff = [((ComAowagieTextPdfPdfName *) nil_chk([de getBaseversion])) compareToWithId:[extension getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BASEVERSION)]];
      if (diff < 0) {
        return;
      }
      diff = [de getExtensionLevel] - [((ComAowagieTextPdfPdfNumber *) nil_chk([extension getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, EXTENSIONLEVEL)])) intValue];
      if (diff <= 0) {
        return;
      }
    }
  }
  [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->extensions_)) putWithComAowagieTextPdfPdfName:[((ComAowagieTextPdfPdfDeveloperExtension *) nil_chk(de)) getPrefix] withComAowagieTextPdfPdfObject:[de getDeveloperExtensions]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfName;", 0x9, 9, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 10, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setPdfVersionWithChar:);
  methods[2].selector = @selector(setAtLeastPdfVersionWithChar:);
  methods[3].selector = @selector(setPdfVersionWithComAowagieTextPdfPdfName:);
  methods[4].selector = @selector(setAppendmodeWithBoolean:);
  methods[5].selector = @selector(writeHeaderWithComAowagieTextPdfOutputStreamCounter:);
  methods[6].selector = @selector(getVersionAsNameWithChar:);
  methods[7].selector = @selector(getVersionAsByteArrayWithChar:);
  methods[8].selector = @selector(addToCatalogWithComAowagieTextPdfPdfDictionary:);
  methods[9].selector = @selector(addDeveloperExtensionWithComAowagieTextPdfPdfDeveloperExtension:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HEADER", "[[B", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "headerWasWritten_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "appendmode_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "header_version_", "C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "catalog_version_", "LComAowagieTextPdfPdfName;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extensions_", "LComAowagieTextPdfPdfDictionary;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setPdfVersion", "C", "setAtLeastPdfVersion", "LComAowagieTextPdfPdfName;", "setAppendmode", "Z", "writeHeader", "LComAowagieTextPdfOutputStreamCounter;", "LJavaIoIOException;", "getVersionAsName", "getVersionAsByteArray", "addToCatalog", "LComAowagieTextPdfPdfDictionary;", "addDeveloperExtension", "LComAowagieTextPdfPdfDeveloperExtension;", &ComAowagieTextPdfInternalPdfVersionImp_HEADER };
  static const J2ObjcClassInfo _ComAowagieTextPdfInternalPdfVersionImp = { "PdfVersionImp", "com.aowagie.text.pdf.internal", ptrTable, methods, fields, 7, 0x1, 10, 6, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfInternalPdfVersionImp;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfInternalPdfVersionImp class]) {
    ComAowagieTextPdfInternalPdfVersionImp_HEADER = [IOSObjectArray newArrayWithObjects:(id[]){ ComAowagieTextDocWriter_getISOBytesWithNSString_(
#line 72
    @"\n"), ComAowagieTextDocWriter_getISOBytesWithNSString_(
#line 73
    @"%PDF-"), ComAowagieTextDocWriter_getISOBytesWithNSString_(
#line 74
    @"\n%\u00e2\u00e3\u00cf\u00d3\n") } count:3 type:IOSClass_byteArray(1)];
    J2OBJC_SET_INITIALIZED(ComAowagieTextPdfInternalPdfVersionImp)
  }
}

@end


#line 68
void ComAowagieTextPdfInternalPdfVersionImp_init(ComAowagieTextPdfInternalPdfVersionImp *self) {
  NSObject_init(self);
  self->headerWasWritten_ =
#line 78
  false;
  self->appendmode_ =
#line 80
  false;
  self->header_version_ =
#line 82
  ComAowagieTextPdfPdfWriter_VERSION_1_4;
  self->catalog_version_ =
#line 84
  nil;
  self->extensions_ =
#line 89
  nil;
}


#line 68
ComAowagieTextPdfInternalPdfVersionImp *new_ComAowagieTextPdfInternalPdfVersionImp_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfInternalPdfVersionImp, init)
}


#line 68
ComAowagieTextPdfInternalPdfVersionImp *create_ComAowagieTextPdfInternalPdfVersionImp_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfInternalPdfVersionImp, init)
}


#line 154
ComAowagieTextPdfPdfName *ComAowagieTextPdfInternalPdfVersionImp_getVersionAsNameWithChar_(jchar version_) {
  ComAowagieTextPdfInternalPdfVersionImp_initialize();
  
#line 155
  switch (version_) {
    case ComAowagieTextPdfPdfWriter_VERSION_1_2:
    return JreLoadStatic(ComAowagieTextPdfPdfWriter, PDF_VERSION_1_2);
    case ComAowagieTextPdfPdfWriter_VERSION_1_3:
    return JreLoadStatic(ComAowagieTextPdfPdfWriter, PDF_VERSION_1_3);
    case ComAowagieTextPdfPdfWriter_VERSION_1_4:
    return JreLoadStatic(ComAowagieTextPdfPdfWriter, PDF_VERSION_1_4);
    case ComAowagieTextPdfPdfWriter_VERSION_1_5:
    return JreLoadStatic(ComAowagieTextPdfPdfWriter, PDF_VERSION_1_5);
    case ComAowagieTextPdfPdfWriter_VERSION_1_6:
    return JreLoadStatic(ComAowagieTextPdfPdfWriter, PDF_VERSION_1_6);
    case ComAowagieTextPdfPdfWriter_VERSION_1_7:
    return JreLoadStatic(ComAowagieTextPdfPdfWriter, PDF_VERSION_1_7);
    default:
    return JreLoadStatic(ComAowagieTextPdfPdfWriter, PDF_VERSION_1_4);
  }
}


#line 178
IOSByteArray *ComAowagieTextPdfInternalPdfVersionImp_getVersionAsByteArrayWithChar_(ComAowagieTextPdfInternalPdfVersionImp *self, jchar version_) {
  return ComAowagieTextDocWriter_getISOBytesWithNSString_([((NSString *) nil_chk([((ComAowagieTextPdfPdfName *) nil_chk(ComAowagieTextPdfInternalPdfVersionImp_getVersionAsNameWithChar_(version_))) description])) java_substring:1]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfInternalPdfVersionImp)
