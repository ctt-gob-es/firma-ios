//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/misc/MimeHelper.java
//

#include "AOFileUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MimeHelper.h"
#include "OfficeAnalizer.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Method.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

#if !__has_feature(objc_arc)
#error "MimeHelper must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreMiscMimeHelper () {
 @public
  /*!
   @brief Objeto para el almac&eacute;n de la informaci&oacute;n de los datos.
   */
  EsGobAfirmaCoreMiscMimeHelper_MimeInfo *mimeInfo_;
  /*!
   @brief Datos analizados.
   */
  IOSByteArray *data_;
}

/*!
 @brief Carga el fichero de propiedades que relaciona OID de formato con su MimeType
  correspondiente.
 @throw IOExceptionCuando hay errores en la carga del fichero de propiedades.
 */
+ (void)loadOidMimetypeProperties;

/*!
 @brief Carga la tabla de relaci&oacute;n de MimeType y OID.
 @throw IOExceptionCuando hay errores en la carga del fichero de propiedades
 */
+ (void)loadMimetypeOidProperties;

/*!
 @brief Obtiene la extensi&oacute;n que debe corresponder al tipo de dato en base a
  una serie de comprobaciones no englobadas en el an&aacute;lisis incial.
 @param mimeType Tipo de dato.
 @return Extensi&oacute;n que le corresponde a un fichero con esos datos o 
 <code>null</code> si no se conoce.
 */
+ (NSString *)verifyExtensionWithNSString:(NSString *)mimeType;

/*!
 @brief Obtiene la descripci&oacute;n que debe corresponder al tipo de dato en base a
  una serie de comprobaciones no englobadas en el an&aacute;lisis incial.
 @param mimeType Tipo de dato.
 @return Descripci&oacute;n que le corresponde a un fichero con esos datos o 
 <code>null</code> si no se conoce.
 */
+ (NSString *)verifyDescriptionWithNSString:(NSString *)mimeType;

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscMimeHelper, mimeInfo_, EsGobAfirmaCoreMiscMimeHelper_MimeInfo *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscMimeHelper, data_, IOSByteArray *)

inline JavaUtilLoggingLogger *EsGobAfirmaCoreMiscMimeHelper_get_LOGGER(void);
static JavaUtilLoggingLogger *EsGobAfirmaCoreMiscMimeHelper_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscMimeHelper, LOGGER, JavaUtilLoggingLogger *)

/*!
 @brief Mimetype de ficheros ZIP.
 */
inline NSString *EsGobAfirmaCoreMiscMimeHelper_get_ZIP_MIMETYPE(void);
static NSString *EsGobAfirmaCoreMiscMimeHelper_ZIP_MIMETYPE = @"application/zip";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscMimeHelper, ZIP_MIMETYPE, NSString *)

/*!
 @brief Extensi&oacute;n asignada a los ficheros XML.
 */
inline NSString *EsGobAfirmaCoreMiscMimeHelper_get_XML_EXTENSION(void);
static NSString *EsGobAfirmaCoreMiscMimeHelper_XML_EXTENSION = @"xml";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscMimeHelper, XML_EXTENSION, NSString *)

/*!
 @brief Descripci&oacute;n asignada por JMimeMagic a los ficheros XML.
 */
inline NSString *EsGobAfirmaCoreMiscMimeHelper_get_XML_DESCRIPTION(void);
static NSString *EsGobAfirmaCoreMiscMimeHelper_XML_DESCRIPTION = @"Documento XML";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscMimeHelper, XML_DESCRIPTION, NSString *)

/*!
 @brief Mimetype de ficheros XML.
 */
inline NSString *EsGobAfirmaCoreMiscMimeHelper_get_XML_MIMETYPE(void);
static NSString *EsGobAfirmaCoreMiscMimeHelper_XML_MIMETYPE = @"text/xml";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscMimeHelper, XML_MIMETYPE, NSString *)

/*!
 @brief Mimetype asignado por JMimeMagic a algunos ficheros Word.
 */
inline NSString *EsGobAfirmaCoreMiscMimeHelper_get_DOC_OFFICE_MIMETYPE(void);
static NSString *EsGobAfirmaCoreMiscMimeHelper_DOC_OFFICE_MIMETYPE = @"application/msword";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscMimeHelper, DOC_OFFICE_MIMETYPE, NSString *)

/*!
 @brief Tabla que asocia Oids y Mimetypes.
 */
inline JavaUtilProperties *EsGobAfirmaCoreMiscMimeHelper_get_oidMimetypeProp(void);
inline JavaUtilProperties *EsGobAfirmaCoreMiscMimeHelper_set_oidMimetypeProp(JavaUtilProperties *value);
static JavaUtilProperties *EsGobAfirmaCoreMiscMimeHelper_oidMimetypeProp;
J2OBJC_STATIC_FIELD_OBJ(EsGobAfirmaCoreMiscMimeHelper, oidMimetypeProp, JavaUtilProperties *)

/*!
 @brief Tabla que asocia MimeType y OID.
 */
inline JavaUtilProperties *EsGobAfirmaCoreMiscMimeHelper_get_mimetypeOidProp(void);
inline JavaUtilProperties *EsGobAfirmaCoreMiscMimeHelper_set_mimetypeOidProp(JavaUtilProperties *value);
static JavaUtilProperties *EsGobAfirmaCoreMiscMimeHelper_mimetypeOidProp;
J2OBJC_STATIC_FIELD_OBJ(EsGobAfirmaCoreMiscMimeHelper, mimetypeOidProp, JavaUtilProperties *)

__attribute__((unused)) static void EsGobAfirmaCoreMiscMimeHelper_loadOidMimetypeProperties(void);

__attribute__((unused)) static void EsGobAfirmaCoreMiscMimeHelper_loadMimetypeOidProperties(void);

__attribute__((unused)) static NSString *EsGobAfirmaCoreMiscMimeHelper_verifyExtensionWithNSString_(NSString *mimeType);

__attribute__((unused)) static NSString *EsGobAfirmaCoreMiscMimeHelper_verifyDescriptionWithNSString_(NSString *mimeType);

@interface EsGobAfirmaCoreMiscMimeHelper_MimeInfo () {
 @public
  /*!
   @brief MimeType de los datos.
   */
  NSString *mType_;
  /*!
   @brief Indica si se han realizado comprobaciones adicionales para verificar si el
  tipo de dato es el que se ha establecido.
   */
  jboolean mTypeVerified_;
  /*!
   @brief Extensi&oacute;n com&uacute;n para el tipo de fichero.
   */
  NSString *extension_;
  /*!
   @brief Indica si se han realizado comprobaciones adicionales para verificar si la
  extension es la que se ha establecido.
   */
  jboolean extensionVerified_;
  /*!
   @brief Descripci&oacute;n del tipo de datos.
   */
  NSString *description__;
  /*!
   @brief Indica si se han realizado comprobaciones adicionales para verificar si la
  descripci&oacute;n es la que se ha establecido.
   */
  jboolean descriptionVerified_;
}

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscMimeHelper_MimeInfo, mType_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscMimeHelper_MimeInfo, extension_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscMimeHelper_MimeInfo, description__, NSString *)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/misc/MimeHelper.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaCoreMiscMimeHelper)

NSString *EsGobAfirmaCoreMiscMimeHelper_UNKNOWN_JMIMEMAGIC_VALUE = @"???";
NSString *EsGobAfirmaCoreMiscMimeHelper_DEFAULT_MIMETYPE = @"application/octet-stream";
NSString *EsGobAfirmaCoreMiscMimeHelper_DEFAULT_CONTENT_DESCRIPTION = @"binary";
NSString *EsGobAfirmaCoreMiscMimeHelper_DEFAULT_CONTENT_OID_DATA = @"1.2.840.113549.1.7.1";


#line 21
@implementation EsGobAfirmaCoreMiscMimeHelper


#line 68
- (instancetype)initWithByteArray:(IOSByteArray *)data {
  EsGobAfirmaCoreMiscMimeHelper_initWithByteArray_(self, data);
  return self;
}


#line 124
+ (NSString *)transformMimeTypeToOidWithNSString:(NSString *)mimetype {
  return EsGobAfirmaCoreMiscMimeHelper_transformMimeTypeToOidWithNSString_(mimetype);
}


#line 138
+ (NSString *)transformOidToMimeTypeWithNSString:(NSString *)oid {
  return EsGobAfirmaCoreMiscMimeHelper_transformOidToMimeTypeWithNSString_(oid);
}


#line 150
+ (void)loadOidMimetypeProperties {
  EsGobAfirmaCoreMiscMimeHelper_loadOidMimetypeProperties();
}


#line 168
+ (void)loadMimetypeOidProperties {
  EsGobAfirmaCoreMiscMimeHelper_loadMimetypeOidProperties();
}


#line 182
- (NSString *)getMimeType {
  
#line 185
  if ([((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) isMimeTypeVerified]) {
    return [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) getMimeType];
  }
  
#line 189
  NSString *mType = [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) getMimeType];
  
#line 193
  if (mType == nil || [((NSString *) nil_chk(EsGobAfirmaCoreMiscMimeHelper_XML_MIMETYPE)) isEqual:mType]) {
    if (EsGobAfirmaCoreMiscAOFileUtils_isXMLWithByteArray_(self->data_)) {
      [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) setMimeTypeWithNSString:EsGobAfirmaCoreMiscMimeHelper_XML_MIMETYPE];
      [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) setMimeTypeVerifiedWithBoolean:true];
    }
    else {
      mType = nil;
    }
  }
  
#line 205
  if ([((NSString *) nil_chk(EsGobAfirmaCoreMiscMimeHelper_ZIP_MIMETYPE)) isEqual:mType] || [((NSString *) nil_chk(EsGobAfirmaCoreMiscMimeHelper_DOC_OFFICE_MIMETYPE)) isEqual:mType]) {
    [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) setMimeTypeWithNSString:EsGobAfirmaCoreMiscOfficeAnalizer_getMimeTypeWithByteArray_(self->data_)];
    [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) setMimeTypeVerifiedWithBoolean:true];
  }
  
#line 210
  if (mType == nil) {
    [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) setMimeTypeWithNSString:EsGobAfirmaCoreMiscMimeHelper_DEFAULT_MIMETYPE];
    [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) setMimeTypeVerifiedWithBoolean:true];
  }
  
#line 215
  return [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) getMimeType];
}


#line 222
- (NSString *)getExtension {
  
#line 225
  if ([((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) isExtensionVerified]) {
    return [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) getExtension];
  }
  
#line 231
  NSString *mType = [self getMimeType];
  NSString *ext = EsGobAfirmaCoreMiscMimeHelper_verifyExtensionWithNSString_(mType);
  if (ext != nil) {
    [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) setExtensionWithNSString:ext];
  }
  [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) setExtensionVerifiedWithBoolean:true];
  
#line 238
  return [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) getExtension];
}


#line 248
+ (NSString *)verifyExtensionWithNSString:(NSString *)mimeType {
  return EsGobAfirmaCoreMiscMimeHelper_verifyExtensionWithNSString_(mimeType);
}


#line 270
- (NSString *)getDescription {
  
#line 273
  if ([((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) isDescriptionVerified]) {
    return [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) getDescription];
  }
  
#line 280
  NSString *mType = [self getMimeType];
  NSString *desc = EsGobAfirmaCoreMiscMimeHelper_verifyDescriptionWithNSString_(mType);
  if (desc == nil) {
    if ([((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) getDescription] != nil) {
      desc = [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) getDescription];
    }
    else {
      
#line 286
      desc = EsGobAfirmaCoreMiscMimeHelper_DEFAULT_CONTENT_DESCRIPTION;
    }
  }
  
#line 290
  [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) setDescriptionWithNSString:desc];
  [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) setDescriptionVerifiedWithBoolean:true];
  
#line 293
  return [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) getDescription];
}


#line 303
+ (NSString *)verifyDescriptionWithNSString:(NSString *)mimeType {
  return EsGobAfirmaCoreMiscMimeHelper_verifyDescriptionWithNSString_(mimeType);
}


#line 325
- (jboolean)isZipData {
  
#line 328
  if (self->mimeInfo_ != nil) {
    return [((NSString *) nil_chk(EsGobAfirmaCoreMiscMimeHelper_ZIP_MIMETYPE)) isEqual:[self->mimeInfo_ getMimeType]];
  }
  
#line 332
  if (((IOSByteArray *) nil_chk(self->data_))->size_ < 4) {
    return false;
  }
  
#line 337
  return IOSByteArray_Get(self->data_, 0) == (jbyte) (jint) 0x50 && IOSByteArray_Get(self->data_, 1) == (jbyte) (jint) 0x4B && (
#line 338
  (IOSByteArray_Get(self->data_, 2) == (jbyte) (jint) 0x03 && IOSByteArray_Get(self->data_, 3) == (jbyte) (jint) 0x04) || (
#line 339
  IOSByteArray_Get(self->data_, 2) == (jbyte) (jint) 0x05 && IOSByteArray_Get(self->data_, 3) == (jbyte) (jint) 0x06) || (
#line 340
  IOSByteArray_Get(self->data_, 2) == (jbyte) (jint) 0x07 && IOSByteArray_Get(self->data_, 3) == (jbyte) (jint) 0x08));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 4, 2, 3, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 5, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 6, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(transformMimeTypeToOidWithNSString:);
  methods[2].selector = @selector(transformOidToMimeTypeWithNSString:);
  methods[3].selector = @selector(loadOidMimetypeProperties);
  methods[4].selector = @selector(loadMimetypeOidProperties);
  methods[5].selector = @selector(getMimeType);
  methods[6].selector = @selector(getExtension);
  methods[7].selector = @selector(verifyExtensionWithNSString:);
  methods[8].selector = @selector(getDescription);
  methods[9].selector = @selector(verifyDescriptionWithNSString:);
  methods[10].selector = @selector(isZipData);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "UNKNOWN_JMIMEMAGIC_VALUE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "DEFAULT_MIMETYPE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "DEFAULT_CONTENT_DESCRIPTION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "DEFAULT_CONTENT_OID_DATA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "ZIP_MIMETYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "XML_EXTENSION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "XML_DESCRIPTION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "XML_MIMETYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "DOC_OFFICE_MIMETYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "oidMimetypeProp", "LJavaUtilProperties;", .constantValue.asLong = 0, 0xa, -1, 17, -1, -1 },
    { "mimetypeOidProp", "LJavaUtilProperties;", .constantValue.asLong = 0, 0xa, -1, 18, -1, -1 },
    { "mimeInfo_", "LEsGobAfirmaCoreMiscMimeHelper_MimeInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "data_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "transformMimeTypeToOid", "LNSString;", "LJavaIoIOException;", "transformOidToMimeType", "verifyExtension", "verifyDescription", &EsGobAfirmaCoreMiscMimeHelper_LOGGER, &EsGobAfirmaCoreMiscMimeHelper_UNKNOWN_JMIMEMAGIC_VALUE, &EsGobAfirmaCoreMiscMimeHelper_DEFAULT_MIMETYPE, &EsGobAfirmaCoreMiscMimeHelper_DEFAULT_CONTENT_DESCRIPTION, &EsGobAfirmaCoreMiscMimeHelper_DEFAULT_CONTENT_OID_DATA, &EsGobAfirmaCoreMiscMimeHelper_ZIP_MIMETYPE, &EsGobAfirmaCoreMiscMimeHelper_XML_EXTENSION, &EsGobAfirmaCoreMiscMimeHelper_XML_DESCRIPTION, &EsGobAfirmaCoreMiscMimeHelper_XML_MIMETYPE, &EsGobAfirmaCoreMiscMimeHelper_DOC_OFFICE_MIMETYPE, &EsGobAfirmaCoreMiscMimeHelper_oidMimetypeProp, &EsGobAfirmaCoreMiscMimeHelper_mimetypeOidProp, "LEsGobAfirmaCoreMiscMimeHelper_MimeInfo;" };
  static const J2ObjcClassInfo _EsGobAfirmaCoreMiscMimeHelper = { "MimeHelper", "es.gob.afirma.core.misc", ptrTable, methods, fields, 7, 0x11, 11, 14, -1, 19, -1, -1, -1 };
  return &_EsGobAfirmaCoreMiscMimeHelper;
}

+ (void)initialize {
  if (self == [EsGobAfirmaCoreMiscMimeHelper class]) {
    EsGobAfirmaCoreMiscMimeHelper_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 23
    @"es.gob.afirma");
    J2OBJC_SET_INITIALIZED(EsGobAfirmaCoreMiscMimeHelper)
  }
}

@end


#line 68
void EsGobAfirmaCoreMiscMimeHelper_initWithByteArray_(EsGobAfirmaCoreMiscMimeHelper *self, IOSByteArray *data) {
  NSObject_init(self);
  self->mimeInfo_ =
#line 60
  nil;
  
#line 70
  if (data == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No se han indicado los datos que se desean analizar");
  }
  
#line 74
  self->data_ = data;
  self->mimeInfo_ = new_EsGobAfirmaCoreMiscMimeHelper_MimeInfo_init();
  
#line 77
  @try {
    JavaLangReflectMethod *getMagicMatchMethod = [((IOSClass *) nil_chk(IOSClass_forName_(@"net.sf.jmimemagic.Magic"))) getMethod:
#line 79
    @"getMagicMatch" parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ IOSClass_byteArray(1) } count:1 type:IOSClass_class_()]];
    id magicMatchObject = [((JavaLangReflectMethod *) nil_chk(getMagicMatchMethod)) invokeWithId:nil withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->data_ } count:1 type:NSObject_class_()]];
    
#line 82
    IOSClass *magicMatchClass = IOSClass_forName_(@"net.sf.jmimemagic.MagicMatch");
    NSString *mt = (NSString *) cast_chk([((JavaLangReflectMethod *) nil_chk([((IOSClass *) nil_chk(magicMatchClass)) getMethod:@"getMimeType" parameterTypes:nil])) invokeWithId:magicMatchObject withNSObjectArray:nil], [NSString class]);
    if ([((NSString *) nil_chk(EsGobAfirmaCoreMiscMimeHelper_UNKNOWN_JMIMEMAGIC_VALUE)) isEqual:mt]) {
      mt = nil;
    }
    [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) setMimeTypeWithNSString:mt];
    NSString *ext = (NSString *) cast_chk([((JavaLangReflectMethod *) nil_chk([magicMatchClass getMethod:@"getExtension" parameterTypes:nil])) invokeWithId:magicMatchObject withNSObjectArray:nil], [NSString class]);
    if ([EsGobAfirmaCoreMiscMimeHelper_UNKNOWN_JMIMEMAGIC_VALUE isEqual:ext]) {
      ext = nil;
    }
    [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) setExtensionWithNSString:ext];
    NSString *desc = (NSString *) cast_chk([((JavaLangReflectMethod *) nil_chk([magicMatchClass getMethod:@"getDescription" parameterTypes:nil])) invokeWithId:magicMatchObject withNSObjectArray:nil], [NSString class]);
    if ([EsGobAfirmaCoreMiscMimeHelper_UNKNOWN_JMIMEMAGIC_VALUE isEqual:desc]) {
      desc = nil;
    }
    [((EsGobAfirmaCoreMiscMimeHelper_MimeInfo *) nil_chk(self->mimeInfo_)) setDescriptionWithNSString:desc];
  }
  @catch (JavaLangClassNotFoundException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscMimeHelper_LOGGER)) warningWithNSString:JreStrcat("$@", @"No se encontro la biblioteca JMimeMagic para la deteccion del tipo de dato: ", e)];
  }
  @catch (JavaLangException *e) {
    @try {
      IOSClass *magicMatchNotFoundException = IOSClass_forName_(@"net.sf.jmimemagic.MagicMatchNotFoundException");
      if ([e getCause] != nil && [((IOSClass *) nil_chk(magicMatchNotFoundException)) isInstance:[e getCause]]) {
        [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscMimeHelper_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$@", @"No se pudo detectar el formato de los datos: ", e)];
      }
      else {
        [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscMimeHelper_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$@", @"Error durante el analisis de la cabecera de los datos: ", e) withJavaLangThrowable:e];
      }
    }
    @catch (JavaLangException *e2) {
      [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscMimeHelper_LOGGER)) warningWithNSString:JreStrcat("$@", @"Error al cargar las bibliotecas de deteccion del tipo de dato: ", e2)];
    }
  }
}


#line 68
EsGobAfirmaCoreMiscMimeHelper *new_EsGobAfirmaCoreMiscMimeHelper_initWithByteArray_(IOSByteArray *data) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscMimeHelper, initWithByteArray_, data)
}


#line 68
EsGobAfirmaCoreMiscMimeHelper *create_EsGobAfirmaCoreMiscMimeHelper_initWithByteArray_(IOSByteArray *data) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscMimeHelper, initWithByteArray_, data)
}


#line 124
NSString *EsGobAfirmaCoreMiscMimeHelper_transformMimeTypeToOidWithNSString_(NSString *mimetype) {
  EsGobAfirmaCoreMiscMimeHelper_initialize();
  
#line 125
  if (EsGobAfirmaCoreMiscMimeHelper_mimetypeOidProp == nil) {
    EsGobAfirmaCoreMiscMimeHelper_loadMimetypeOidProperties();
  }
  return mimetype == nil ?
#line 129
  EsGobAfirmaCoreMiscMimeHelper_DEFAULT_CONTENT_OID_DATA :
#line 130
  [((JavaUtilProperties *) nil_chk(EsGobAfirmaCoreMiscMimeHelper_mimetypeOidProp)) getPropertyWithNSString:mimetype withNSString:EsGobAfirmaCoreMiscMimeHelper_DEFAULT_CONTENT_OID_DATA];
}

NSString *EsGobAfirmaCoreMiscMimeHelper_transformOidToMimeTypeWithNSString_(NSString *oid) {
  EsGobAfirmaCoreMiscMimeHelper_initialize();
  
#line 139
  if (EsGobAfirmaCoreMiscMimeHelper_oidMimetypeProp == nil) {
    EsGobAfirmaCoreMiscMimeHelper_loadOidMimetypeProperties();
  }
  return oid == nil ?
#line 143
  EsGobAfirmaCoreMiscMimeHelper_DEFAULT_MIMETYPE :
#line 144
  [((JavaUtilProperties *) nil_chk(EsGobAfirmaCoreMiscMimeHelper_oidMimetypeProp)) getPropertyWithNSString:oid withNSString:EsGobAfirmaCoreMiscMimeHelper_DEFAULT_MIMETYPE];
}


#line 150
void EsGobAfirmaCoreMiscMimeHelper_loadOidMimetypeProperties() {
  EsGobAfirmaCoreMiscMimeHelper_initialize();
  
#line 151
  EsGobAfirmaCoreMiscMimeHelper_oidMimetypeProp = new_JavaUtilProperties_init();
  {
    JavaIoInputStream *isProp = [((JavaLangClassLoader *) nil_chk([EsGobAfirmaCoreMiscMimeHelper_class_() getClassLoader])) getResourceAsStreamWithNSString:
#line 154
    @"resources/mimetypes_oids.properties"];
    JavaLangThrowable *__primaryException1 = nil;
    
#line 152
    @try {
      
#line 157
      if (isProp == nil) {
        @throw new_JavaIoIOException_initWithNSString_(
#line 159
        @"No se ha encontrado el fichero de recursos para la relacion entre OID y MimeType");
      }
      
#line 162
      [((JavaUtilProperties *) nil_chk(EsGobAfirmaCoreMiscMimeHelper_oidMimetypeProp)) load__WithJavaIoInputStream:isProp];
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (isProp != nil) {
        if (__primaryException1 != nil) {
          @try {
            [isProp close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [isProp close];
        }
      }
    }
  }
}


#line 168
void EsGobAfirmaCoreMiscMimeHelper_loadMimetypeOidProperties() {
  EsGobAfirmaCoreMiscMimeHelper_initialize();
  
#line 169
  if (EsGobAfirmaCoreMiscMimeHelper_oidMimetypeProp == nil) {
    EsGobAfirmaCoreMiscMimeHelper_loadOidMimetypeProperties();
  }
  EsGobAfirmaCoreMiscMimeHelper_mimetypeOidProp = new_JavaUtilProperties_init();
  {
    IOSObjectArray *a__ =
#line 173
    [((id<JavaUtilSet>) nil_chk([((JavaUtilProperties *) nil_chk(EsGobAfirmaCoreMiscMimeHelper_oidMimetypeProp)) keySet])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSString_class_()]];
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *key = *b__++;
      
#line 174
      (void) [((JavaUtilProperties *) nil_chk(EsGobAfirmaCoreMiscMimeHelper_mimetypeOidProp)) putWithId:[((JavaUtilProperties *) nil_chk(EsGobAfirmaCoreMiscMimeHelper_oidMimetypeProp)) getWithId:key] withId:key];
    }
  }
}


#line 248
NSString *EsGobAfirmaCoreMiscMimeHelper_verifyExtensionWithNSString_(NSString *mimeType) {
  EsGobAfirmaCoreMiscMimeHelper_initialize();
  if ([((NSString *) nil_chk(EsGobAfirmaCoreMiscMimeHelper_DEFAULT_MIMETYPE)) isEqual:mimeType]) {
    return nil;
  }
  if ([((NSString *) nil_chk(EsGobAfirmaCoreMiscMimeHelper_XML_MIMETYPE)) isEqual:mimeType]) {
    return EsGobAfirmaCoreMiscMimeHelper_XML_EXTENSION;
  }
  
#line 257
  if (mimeType != nil) {
    NSString *ext = EsGobAfirmaCoreMiscOfficeAnalizer_getExtensionWithNSString_(mimeType);
    if (ext != nil) {
      return ext;
    }
  }
  
#line 264
  return nil;
}


#line 303
NSString *EsGobAfirmaCoreMiscMimeHelper_verifyDescriptionWithNSString_(NSString *mimeType) {
  EsGobAfirmaCoreMiscMimeHelper_initialize();
  if ([((NSString *) nil_chk(EsGobAfirmaCoreMiscMimeHelper_XML_MIMETYPE)) isEqual:mimeType]) {
    return EsGobAfirmaCoreMiscMimeHelper_XML_DESCRIPTION;
  }
  
#line 309
  if (mimeType != nil && ![mimeType isEqual:EsGobAfirmaCoreMiscMimeHelper_DEFAULT_MIMETYPE]) {
    NSString *desc = EsGobAfirmaCoreMiscOfficeAnalizer_getDescriptionWithNSString_(mimeType);
    if (desc != nil) {
      return desc;
    }
  }
  
#line 316
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreMiscMimeHelper)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/misc/MimeHelper.java"


#line 344
@implementation EsGobAfirmaCoreMiscMimeHelper_MimeInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 344
- (instancetype)init {
  EsGobAfirmaCoreMiscMimeHelper_MimeInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 367
- (NSString *)getMimeType {
  return self->mType_;
}

- (void)setMimeTypeWithNSString:(NSString *)mimeType {
  self->mType_ = mimeType;
}

- (jboolean)isMimeTypeVerified {
  return self->mTypeVerified_;
}

- (void)setMimeTypeVerifiedWithBoolean:(jboolean)mTypeVerified {
  self->mTypeVerified_ = mTypeVerified;
}

- (NSString *)getExtension {
  return self->extension_;
}

- (void)setExtensionWithNSString:(NSString *)ext {
  self->extension_ = ext;
}

- (jboolean)isExtensionVerified {
  return self->extensionVerified_;
}

- (void)setExtensionVerifiedWithBoolean:(jboolean)extensionVerified {
  self->extensionVerified_ = extensionVerified;
}

- (NSString *)getDescription {
  return self->description__;
}

- (void)setDescriptionWithNSString:(NSString *)desc {
  self->description__ = desc;
}

- (jboolean)isDescriptionVerified {
  return self->descriptionVerified_;
}

- (void)setDescriptionVerifiedWithBoolean:(jboolean)descriptionVerified {
  self->descriptionVerified_ = descriptionVerified;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMimeType);
  methods[2].selector = @selector(setMimeTypeWithNSString:);
  methods[3].selector = @selector(isMimeTypeVerified);
  methods[4].selector = @selector(setMimeTypeVerifiedWithBoolean:);
  methods[5].selector = @selector(getExtension);
  methods[6].selector = @selector(setExtensionWithNSString:);
  methods[7].selector = @selector(isExtensionVerified);
  methods[8].selector = @selector(setExtensionVerifiedWithBoolean:);
  methods[9].selector = @selector(getDescription);
  methods[10].selector = @selector(setDescriptionWithNSString:);
  methods[11].selector = @selector(isDescriptionVerified);
  methods[12].selector = @selector(setDescriptionVerifiedWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mType_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTypeVerified_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extension_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extensionVerified_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "description__", "LNSString;", .constantValue.asLong = 0, 0x2, 8, -1, -1, -1 },
    { "descriptionVerified_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMimeType", "LNSString;", "setMimeTypeVerified", "Z", "setExtension", "setExtensionVerified", "setDescription", "setDescriptionVerified", "description", "LEsGobAfirmaCoreMiscMimeHelper;" };
  static const J2ObjcClassInfo _EsGobAfirmaCoreMiscMimeHelper_MimeInfo = { "MimeInfo", "es.gob.afirma.core.misc", ptrTable, methods, fields, 7, 0x8, 13, 6, 9, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreMiscMimeHelper_MimeInfo;
}

@end


#line 344
void EsGobAfirmaCoreMiscMimeHelper_MimeInfo_init(EsGobAfirmaCoreMiscMimeHelper_MimeInfo *self) {
  NSObject_init(self);
  self->mType_ =
#line 347
  nil;
  self->mTypeVerified_ =
#line 351
  false;
  self->extension_ =
#line 354
  nil;
  self->extensionVerified_ =
#line 358
  false;
  self->description__ =
#line 361
  nil;
  self->descriptionVerified_ =
#line 365
  false;
}


#line 344
EsGobAfirmaCoreMiscMimeHelper_MimeInfo *new_EsGobAfirmaCoreMiscMimeHelper_MimeInfo_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscMimeHelper_MimeInfo, init)
}


#line 344
EsGobAfirmaCoreMiscMimeHelper_MimeInfo *create_EsGobAfirmaCoreMiscMimeHelper_MimeInfo_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscMimeHelper_MimeInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreMiscMimeHelper_MimeInfo)
