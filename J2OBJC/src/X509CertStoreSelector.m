//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/x509/X509CertStoreSelector.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "X509CertStoreSelector.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509CertSelector.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/Set.h"
#include "javax/security/auth/x500/X500Principal.h"

#if !__has_feature(objc_arc)
#error "X509CertStoreSelector must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/x509/X509CertStoreSelector.java"


#line 18
@implementation OrgSpongycastleX509X509CertStoreSelector

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 18
- (instancetype)init {
  OrgSpongycastleX509X509CertStoreSelector_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 22
- (jboolean)matchWithId:(id)obj {
  
#line 24
  if (!([obj isKindOfClass:[JavaSecurityCertX509Certificate class]])) {
    
#line 26
    return false;
  }
  
#line 29
  JavaSecurityCertX509Certificate *other = (JavaSecurityCertX509Certificate *) cast_chk(obj, [JavaSecurityCertX509Certificate class]);
  
#line 31
  return [super matchWithJavaSecurityCertCertificate:other];
}


#line 34
- (jboolean)matchWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert {
  
#line 36
  return [self matchWithId:cert];
}


#line 39
- (id)java_clone {
  
#line 41
  OrgSpongycastleX509X509CertStoreSelector *selector = (OrgSpongycastleX509X509CertStoreSelector *) cast_chk([super java_clone], [OrgSpongycastleX509X509CertStoreSelector class]);
  
#line 43
  return selector;
}


#line 53
+ (OrgSpongycastleX509X509CertStoreSelector *)getInstanceWithJavaSecurityCertX509CertSelector:(JavaSecurityCertX509CertSelector *)selector {
  return OrgSpongycastleX509X509CertStoreSelector_getInstanceWithJavaSecurityCertX509CertSelector_(selector);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleX509X509CertStoreSelector;", 0x9, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchWithId:);
  methods[2].selector = @selector(matchWithJavaSecurityCertCertificate:);
  methods[3].selector = @selector(java_clone);
  methods[4].selector = @selector(getInstanceWithJavaSecurityCertX509CertSelector:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "match", "LNSObject;", "LJavaSecurityCertCertificate;", "clone", "getInstance", "LJavaSecurityCertX509CertSelector;" };
  static const J2ObjcClassInfo _OrgSpongycastleX509X509CertStoreSelector = { "X509CertStoreSelector", "org.spongycastle.x509", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleX509X509CertStoreSelector;
}

@end


#line 18
void OrgSpongycastleX509X509CertStoreSelector_init(OrgSpongycastleX509X509CertStoreSelector *self) {
  JavaSecurityCertX509CertSelector_init(self);
}


#line 18
OrgSpongycastleX509X509CertStoreSelector *new_OrgSpongycastleX509X509CertStoreSelector_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleX509X509CertStoreSelector, init)
}


#line 18
OrgSpongycastleX509X509CertStoreSelector *create_OrgSpongycastleX509X509CertStoreSelector_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleX509X509CertStoreSelector, init)
}


#line 53
OrgSpongycastleX509X509CertStoreSelector *OrgSpongycastleX509X509CertStoreSelector_getInstanceWithJavaSecurityCertX509CertSelector_(JavaSecurityCertX509CertSelector *selector) {
  OrgSpongycastleX509X509CertStoreSelector_initialize();
  if (selector == nil) {
    
#line 57
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cannot create from null selector");
  }
  OrgSpongycastleX509X509CertStoreSelector *cs = new_OrgSpongycastleX509X509CertStoreSelector_init();
  [cs setAuthorityKeyIdentifierWithByteArray:[selector getAuthorityKeyIdentifier]];
  [cs setBasicConstraintsWithInt:[selector getBasicConstraints]];
  [cs setCertificateWithJavaSecurityCertX509Certificate:[selector getCertificate]];
  [cs setCertificateValidWithJavaUtilDate:[selector getCertificateValid]];
  [cs setMatchAllSubjectAltNamesWithBoolean:[selector getMatchAllSubjectAltNames]];
  @try {
    
#line 67
    [cs setPathToNamesWithJavaUtilCollection:[selector getPathToNames]];
    [cs setExtendedKeyUsageWithJavaUtilSet:[selector getExtendedKeyUsage]];
    [cs setNameConstraintsWithByteArray:[selector getNameConstraints]];
    [cs setPolicyWithJavaUtilSet:[selector getPolicy]];
    [cs setSubjectPublicKeyAlgIDWithNSString:[selector getSubjectPublicKeyAlgID]];
    [cs setSubjectAlternativeNamesWithJavaUtilCollection:[selector getSubjectAlternativeNames]];
  }
  @catch (JavaIoIOException *e) {
    
#line 76
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"error in passed in selector: ", e));
  }
  [cs setIssuerWithJavaxSecurityAuthX500X500Principal:[selector getIssuer]];
  [cs setKeyUsageWithBooleanArray:[selector getKeyUsage]];
  [cs setPrivateKeyValidWithJavaUtilDate:[selector getPrivateKeyValid]];
  [cs setSerialNumberWithJavaMathBigInteger:[selector getSerialNumber]];
  [cs setSubjectWithJavaxSecurityAuthX500X500Principal:[selector getSubject]];
  [cs setSubjectKeyIdentifierWithByteArray:[selector getSubjectKeyIdentifier]];
  [cs setSubjectPublicKeyWithJavaSecurityPublicKey:[selector getSubjectPublicKey]];
  return cs;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleX509X509CertStoreSelector)
