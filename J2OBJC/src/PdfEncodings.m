//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PdfEncodings.java
//

#include "BaseFont.h"
#include "ExceptionConverter.h"
#include "ExtraEncoding.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IntHashtable.h"
#include "J2ObjC_source.h"
#include "PdfEncodings.h"
#include "PdfObject.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/StringTokenizer.h"

#if !__has_feature(objc_arc)
#error "PdfEncodings must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfPdfEncodings ()

/*!
 @brief Converts a <CODE>byte</CODE> array encoded as <CODE>name</CODE>
  to a CID string.This is needed to reach some CJK characters
  that don't exist in 16 bit Unicode.
 The font to use this result must use the encoding "Identity-H"
  or "Identity-V".
  See ftp://ftp.oreilly.com/pub/examples/nutshell/cjkv/adobe/.
 @param name the CJK encoding name
 @param start the start offset in the data
 @param length the number of bytes to convert
 @param seq the  <CODE> byte </CODE>  array to be decoded
 @return the CID string
 */
+ (NSString *)convertCmapWithNSString:(NSString *)name
                        withByteArray:(IOSByteArray *)seq
                              withInt:(jint)start
                              withInt:(jint)length;

+ (NSString *)decodeSequenceWithByteArray:(IOSByteArray *)seq
                                  withInt:(jint)start
                                  withInt:(jint)length
                           withCharArray2:(IOSObjectArray *)planes;

+ (IOSObjectArray *)readCmapWithNSString:(NSString *)name
                          withByteArray2:(IOSObjectArray *)newline;

+ (void)readCmapWithNSString:(NSString *)name
       withJavaUtilArrayList:(JavaUtilArrayList *)planes;

+ (void)encodeStreamWithJavaIoInputStream:(JavaIoInputStream *)inArg
                    withJavaUtilArrayList:(JavaUtilArrayList *)planes;

+ (void)breakLongWithLong:(jlong)n
                  withInt:(jint)size
            withByteArray:(IOSByteArray *)seqs;

+ (void)encodeSequenceWithInt:(jint)size
                withByteArray:(IOSByteArray *)seqs
                     withChar:(jchar)cid
        withJavaUtilArrayList:(JavaUtilArrayList *)planes;

/*!
 @brief Adds an extra encoding.
 @param name the name of the encoding. The encoding recognition is case insensitive
 @param enc the conversion class
 */
+ (void)addExtraEncodingWithNSString:(NSString *)name
  withComAowagieTextPdfExtraEncoding:(id<ComAowagieTextPdfExtraEncoding>)enc;

@end

inline jint ComAowagieTextPdfPdfEncodings_get_CIDNONE(void);
#define ComAowagieTextPdfPdfEncodings_CIDNONE 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfEncodings, CIDNONE, jint)

inline jint ComAowagieTextPdfPdfEncodings_get_CIDRANGE(void);
#define ComAowagieTextPdfPdfEncodings_CIDRANGE 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfEncodings, CIDRANGE, jint)

inline jint ComAowagieTextPdfPdfEncodings_get_CIDCHAR(void);
#define ComAowagieTextPdfPdfEncodings_CIDCHAR 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfEncodings, CIDCHAR, jint)

inline IOSCharArray *ComAowagieTextPdfPdfEncodings_get_winansiByteToChar(void);
static IOSCharArray *ComAowagieTextPdfPdfEncodings_winansiByteToChar;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfEncodings, winansiByteToChar, IOSCharArray *)

inline IOSCharArray *ComAowagieTextPdfPdfEncodings_get_pdfEncodingByteToChar(void);
static IOSCharArray *ComAowagieTextPdfPdfEncodings_pdfEncodingByteToChar;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfEncodings, pdfEncodingByteToChar, IOSCharArray *)

inline ComAowagieTextPdfIntHashtable *ComAowagieTextPdfPdfEncodings_get_pdfEncoding(void);
static ComAowagieTextPdfIntHashtable *ComAowagieTextPdfPdfEncodings_pdfEncoding;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfEncodings, pdfEncoding, ComAowagieTextPdfIntHashtable *)

inline JavaUtilHashMap *ComAowagieTextPdfPdfEncodings_get_extraEncodings(void);
inline JavaUtilHashMap *ComAowagieTextPdfPdfEncodings_set_extraEncodings(JavaUtilHashMap *value);
static JavaUtilHashMap *ComAowagieTextPdfPdfEncodings_extraEncodings;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfPdfEncodings, extraEncodings, JavaUtilHashMap *)

inline JavaUtilHashMap *ComAowagieTextPdfPdfEncodings_get_cmaps(void);
static JavaUtilHashMap *ComAowagieTextPdfPdfEncodings_cmaps;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfEncodings, cmaps, JavaUtilHashMap *)

__attribute__((unused)) static NSString *ComAowagieTextPdfPdfEncodings_convertCmapWithNSString_withByteArray_withInt_withInt_(NSString *name, IOSByteArray *seq, jint start, jint length);

__attribute__((unused)) static NSString *ComAowagieTextPdfPdfEncodings_decodeSequenceWithByteArray_withInt_withInt_withCharArray2_(IOSByteArray *seq, jint start, jint length, IOSObjectArray *planes);

__attribute__((unused)) static IOSObjectArray *ComAowagieTextPdfPdfEncodings_readCmapWithNSString_withByteArray2_(NSString *name, IOSObjectArray *newline);

__attribute__((unused)) static void ComAowagieTextPdfPdfEncodings_readCmapWithNSString_withJavaUtilArrayList_(NSString *name, JavaUtilArrayList *planes);

__attribute__((unused)) static void ComAowagieTextPdfPdfEncodings_encodeStreamWithJavaIoInputStream_withJavaUtilArrayList_(JavaIoInputStream *inArg, JavaUtilArrayList *planes);

__attribute__((unused)) static void ComAowagieTextPdfPdfEncodings_breakLongWithLong_withInt_withByteArray_(jlong n, jint size, IOSByteArray *seqs);

__attribute__((unused)) static void ComAowagieTextPdfPdfEncodings_encodeSequenceWithInt_withByteArray_withChar_withJavaUtilArrayList_(jint size, IOSByteArray *seqs, jchar cid, JavaUtilArrayList *planes);

__attribute__((unused)) static void ComAowagieTextPdfPdfEncodings_addExtraEncodingWithNSString_withComAowagieTextPdfExtraEncoding_(NSString *name, id<ComAowagieTextPdfExtraEncoding> enc);

@interface ComAowagieTextPdfPdfEncodings_WingdingsConversion : NSObject < ComAowagieTextPdfExtraEncoding >

- (instancetype)init;

- (IOSByteArray *)charToByteWithChar:(jchar)char1
                        withNSString:(NSString *)encoding;

- (IOSByteArray *)charToByteWithNSString:(NSString *)text
                            withNSString:(NSString *)encoding;

- (NSString *)byteToCharWithByteArray:(IOSByteArray *)b
                         withNSString:(NSString *)encoding;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfPdfEncodings_WingdingsConversion)

inline IOSByteArray *ComAowagieTextPdfPdfEncodings_WingdingsConversion_get_table(void);
static IOSByteArray *ComAowagieTextPdfPdfEncodings_WingdingsConversion_table;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfEncodings_WingdingsConversion, table, IOSByteArray *)

__attribute__((unused)) static void ComAowagieTextPdfPdfEncodings_WingdingsConversion_init(ComAowagieTextPdfPdfEncodings_WingdingsConversion *self);

__attribute__((unused)) static ComAowagieTextPdfPdfEncodings_WingdingsConversion *new_ComAowagieTextPdfPdfEncodings_WingdingsConversion_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfPdfEncodings_WingdingsConversion *create_ComAowagieTextPdfPdfEncodings_WingdingsConversion_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfEncodings_WingdingsConversion)

@interface ComAowagieTextPdfPdfEncodings_Cp437Conversion : NSObject < ComAowagieTextPdfExtraEncoding >

- (instancetype)init;

- (IOSByteArray *)charToByteWithNSString:(NSString *)text
                            withNSString:(NSString *)encoding;

- (IOSByteArray *)charToByteWithChar:(jchar)char1
                        withNSString:(NSString *)encoding;

- (NSString *)byteToCharWithByteArray:(IOSByteArray *)b
                         withNSString:(NSString *)encoding;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfPdfEncodings_Cp437Conversion)

inline ComAowagieTextPdfIntHashtable *ComAowagieTextPdfPdfEncodings_Cp437Conversion_get_c2b(void);
inline ComAowagieTextPdfIntHashtable *ComAowagieTextPdfPdfEncodings_Cp437Conversion_set_c2b(ComAowagieTextPdfIntHashtable *value);
static ComAowagieTextPdfIntHashtable *ComAowagieTextPdfPdfEncodings_Cp437Conversion_c2b;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfPdfEncodings_Cp437Conversion, c2b, ComAowagieTextPdfIntHashtable *)

inline IOSCharArray *ComAowagieTextPdfPdfEncodings_Cp437Conversion_get_table(void);
static IOSCharArray *ComAowagieTextPdfPdfEncodings_Cp437Conversion_table;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfEncodings_Cp437Conversion, table, IOSCharArray *)

__attribute__((unused)) static void ComAowagieTextPdfPdfEncodings_Cp437Conversion_init(ComAowagieTextPdfPdfEncodings_Cp437Conversion *self);

__attribute__((unused)) static ComAowagieTextPdfPdfEncodings_Cp437Conversion *new_ComAowagieTextPdfPdfEncodings_Cp437Conversion_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfPdfEncodings_Cp437Conversion *create_ComAowagieTextPdfPdfEncodings_Cp437Conversion_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfEncodings_Cp437Conversion)

@interface ComAowagieTextPdfPdfEncodings_SymbolConversion : NSObject < ComAowagieTextPdfExtraEncoding > {
 @public
  ComAowagieTextPdfIntHashtable *translation_;
}

- (instancetype)initWithBoolean:(jboolean)symbol;

- (IOSByteArray *)charToByteWithNSString:(NSString *)text
                            withNSString:(NSString *)encoding;

- (IOSByteArray *)charToByteWithChar:(jchar)char1
                        withNSString:(NSString *)encoding;

- (NSString *)byteToCharWithByteArray:(IOSByteArray *)b
                         withNSString:(NSString *)encoding;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfPdfEncodings_SymbolConversion)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfEncodings_SymbolConversion, translation_, ComAowagieTextPdfIntHashtable *)

inline ComAowagieTextPdfIntHashtable *ComAowagieTextPdfPdfEncodings_SymbolConversion_get_t1(void);
static ComAowagieTextPdfIntHashtable *ComAowagieTextPdfPdfEncodings_SymbolConversion_t1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfEncodings_SymbolConversion, t1, ComAowagieTextPdfIntHashtable *)

inline ComAowagieTextPdfIntHashtable *ComAowagieTextPdfPdfEncodings_SymbolConversion_get_t2(void);
static ComAowagieTextPdfIntHashtable *ComAowagieTextPdfPdfEncodings_SymbolConversion_t2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfEncodings_SymbolConversion, t2, ComAowagieTextPdfIntHashtable *)

inline IOSCharArray *ComAowagieTextPdfPdfEncodings_SymbolConversion_get_table1(void);
static IOSCharArray *ComAowagieTextPdfPdfEncodings_SymbolConversion_table1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfEncodings_SymbolConversion, table1, IOSCharArray *)

inline IOSCharArray *ComAowagieTextPdfPdfEncodings_SymbolConversion_get_table2(void);
static IOSCharArray *ComAowagieTextPdfPdfEncodings_SymbolConversion_table2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfEncodings_SymbolConversion, table2, IOSCharArray *)

__attribute__((unused)) static void ComAowagieTextPdfPdfEncodings_SymbolConversion_initWithBoolean_(ComAowagieTextPdfPdfEncodings_SymbolConversion *self, jboolean symbol);

__attribute__((unused)) static ComAowagieTextPdfPdfEncodings_SymbolConversion *new_ComAowagieTextPdfPdfEncodings_SymbolConversion_initWithBoolean_(jboolean symbol) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfPdfEncodings_SymbolConversion *create_ComAowagieTextPdfPdfEncodings_SymbolConversion_initWithBoolean_(jboolean symbol);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfEncodings_SymbolConversion)

@interface ComAowagieTextPdfPdfEncodings_SymbolTTConversion : NSObject < ComAowagieTextPdfExtraEncoding >

- (instancetype)init;

- (IOSByteArray *)charToByteWithChar:(jchar)char1
                        withNSString:(NSString *)encoding;

- (IOSByteArray *)charToByteWithNSString:(NSString *)text
                            withNSString:(NSString *)encoding;

- (NSString *)byteToCharWithByteArray:(IOSByteArray *)b
                         withNSString:(NSString *)encoding;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfPdfEncodings_SymbolTTConversion)

__attribute__((unused)) static void ComAowagieTextPdfPdfEncodings_SymbolTTConversion_init(ComAowagieTextPdfPdfEncodings_SymbolTTConversion *self);

__attribute__((unused)) static ComAowagieTextPdfPdfEncodings_SymbolTTConversion *new_ComAowagieTextPdfPdfEncodings_SymbolTTConversion_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfPdfEncodings_SymbolTTConversion *create_ComAowagieTextPdfPdfEncodings_SymbolTTConversion_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfEncodings_SymbolTTConversion)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PdfEncodings.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfPdfEncodings)

ComAowagieTextPdfIntHashtable *ComAowagieTextPdfPdfEncodings_winansi;


#line 65
@implementation ComAowagieTextPdfPdfEncodings


#line 65
- (instancetype)initPackagePrivate {
  ComAowagieTextPdfPdfEncodings_initPackagePrivate(self);
  return self;
}


#line 140
+ (IOSByteArray *)convertToBytesWithNSString:(NSString *)text
                                withNSString:(NSString *)encoding {
  return ComAowagieTextPdfPdfEncodings_convertToBytesWithNSString_withNSString_(text, encoding);
}


#line 218
+ (IOSByteArray *)convertToBytesWithChar:(jchar)char1
                            withNSString:(NSString *)encoding {
  return ComAowagieTextPdfPdfEncodings_convertToBytesWithChar_withNSString_(char1, encoding);
}


#line 271
+ (NSString *)convertToStringWithByteArray:(IOSByteArray *)bytes
                              withNSString:(NSString *)encoding {
  return ComAowagieTextPdfPdfEncodings_convertToStringWithByteArray_withNSString_(bytes, encoding);
}


#line 315
+ (jboolean)isPdfDocEncodingWithNSString:(NSString *)text {
  return ComAowagieTextPdfPdfEncodings_isPdfDocEncodingWithNSString_(text);
}


#line 346
+ (NSString *)convertCmapWithNSString:(NSString *)name
                        withByteArray:(IOSByteArray *)seq
                              withInt:(jint)start
                              withInt:(jint)length {
  return ComAowagieTextPdfPdfEncodings_convertCmapWithNSString_withByteArray_withInt_withInt_(name, seq, start, length);
}


#line 365
+ (NSString *)decodeSequenceWithByteArray:(IOSByteArray *)seq
                                  withInt:(jint)start
                                  withInt:(jint)length
                           withCharArray2:(IOSObjectArray *)planes {
  return ComAowagieTextPdfPdfEncodings_decodeSequenceWithByteArray_withInt_withInt_withCharArray2_(seq, start, length, planes);
}


#line 383
+ (IOSObjectArray *)readCmapWithNSString:(NSString *)name
                          withByteArray2:(IOSObjectArray *)newline {
  return ComAowagieTextPdfPdfEncodings_readCmapWithNSString_withByteArray2_(name, newline);
}


#line 396
+ (void)readCmapWithNSString:(NSString *)name
       withJavaUtilArrayList:(JavaUtilArrayList *)planes {
  ComAowagieTextPdfPdfEncodings_readCmapWithNSString_withJavaUtilArrayList_(name, planes);
}


#line 406
+ (void)encodeStreamWithJavaIoInputStream:(JavaIoInputStream *)inArg
                    withJavaUtilArrayList:(JavaUtilArrayList *)planes {
  ComAowagieTextPdfPdfEncodings_encodeStreamWithJavaIoInputStream_withJavaUtilArrayList_(inArg, planes);
}


#line 467
+ (void)breakLongWithLong:(jlong)n
                  withInt:(jint)size
            withByteArray:(IOSByteArray *)seqs {
  ComAowagieTextPdfPdfEncodings_breakLongWithLong_withInt_withByteArray_(n, size, seqs);
}

+ (void)encodeSequenceWithInt:(jint)size
                withByteArray:(IOSByteArray *)seqs
                     withChar:(jchar)cid
        withJavaUtilArrayList:(JavaUtilArrayList *)planes {
  ComAowagieTextPdfPdfEncodings_encodeSequenceWithInt_withByteArray_withChar_withJavaUtilArrayList_(size, seqs, cid, planes);
}


#line 503
+ (void)addExtraEncodingWithNSString:(NSString *)name
  withComAowagieTextPdfExtraEncoding:(id<ComAowagieTextPdfExtraEncoding>)enc {
  ComAowagieTextPdfPdfEncodings_addExtraEncodingWithNSString_withComAowagieTextPdfExtraEncoding_(name, enc);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x19, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x19, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "[[C", 0xa, 11, 12, 13, -1, -1, -1 },
    { NULL, "V", 0xa, 11, 14, 13, -1, -1, -1 },
    { NULL, "V", 0xa, 15, 16, 13, -1, -1, -1 },
    { NULL, "V", 0xa, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 21, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(convertToBytesWithNSString:withNSString:);
  methods[2].selector = @selector(convertToBytesWithChar:withNSString:);
  methods[3].selector = @selector(convertToStringWithByteArray:withNSString:);
  methods[4].selector = @selector(isPdfDocEncodingWithNSString:);
  methods[5].selector = @selector(convertCmapWithNSString:withByteArray:withInt:withInt:);
  methods[6].selector = @selector(decodeSequenceWithByteArray:withInt:withInt:withCharArray2:);
  methods[7].selector = @selector(readCmapWithNSString:withByteArray2:);
  methods[8].selector = @selector(readCmapWithNSString:withJavaUtilArrayList:);
  methods[9].selector = @selector(encodeStreamWithJavaIoInputStream:withJavaUtilArrayList:);
  methods[10].selector = @selector(breakLongWithLong:withInt:withByteArray:);
  methods[11].selector = @selector(encodeSequenceWithInt:withByteArray:withChar:withJavaUtilArrayList:);
  methods[12].selector = @selector(addExtraEncodingWithNSString:withComAowagieTextPdfExtraEncoding:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CIDNONE", "I", .constantValue.asInt = ComAowagieTextPdfPdfEncodings_CIDNONE, 0x1a, -1, -1, -1, -1 },
    { "CIDRANGE", "I", .constantValue.asInt = ComAowagieTextPdfPdfEncodings_CIDRANGE, 0x1a, -1, -1, -1, -1 },
    { "CIDCHAR", "I", .constantValue.asInt = ComAowagieTextPdfPdfEncodings_CIDCHAR, 0x1a, -1, -1, -1, -1 },
    { "winansiByteToChar", "[C", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "pdfEncodingByteToChar", "[C", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "winansi", "LComAowagieTextPdfIntHashtable;", .constantValue.asLong = 0, 0x18, -1, 25, -1, -1 },
    { "pdfEncoding", "LComAowagieTextPdfIntHashtable;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "extraEncodings", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0xa, -1, 27, -1, -1 },
    { "cmaps", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
  };
  static const void *ptrTable[] = { "convertToBytes", "LNSString;LNSString;", "CLNSString;", "convertToString", "[BLNSString;", "isPdfDocEncoding", "LNSString;", "convertCmap", "LNSString;[BII", "decodeSequence", "[BII[[C", "readCmap", "LNSString;[[B", "LJavaIoIOException;", "LNSString;LJavaUtilArrayList;", "encodeStream", "LJavaIoInputStream;LJavaUtilArrayList;", "breakLong", "JI[B", "encodeSequence", "I[BCLJavaUtilArrayList;", "addExtraEncoding", "LNSString;LComAowagieTextPdfExtraEncoding;", &ComAowagieTextPdfPdfEncodings_winansiByteToChar, &ComAowagieTextPdfPdfEncodings_pdfEncodingByteToChar, &ComAowagieTextPdfPdfEncodings_winansi, &ComAowagieTextPdfPdfEncodings_pdfEncoding, &ComAowagieTextPdfPdfEncodings_extraEncodings, &ComAowagieTextPdfPdfEncodings_cmaps, "LComAowagieTextPdfPdfEncodings_WingdingsConversion;LComAowagieTextPdfPdfEncodings_Cp437Conversion;LComAowagieTextPdfPdfEncodings_SymbolConversion;LComAowagieTextPdfPdfEncodings_SymbolTTConversion;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfEncodings = { "PdfEncodings", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 13, 9, -1, 29, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfEncodings;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfPdfEncodings class]) {
    ComAowagieTextPdfPdfEncodings_winansiByteToChar = [IOSCharArray newArrayWithChars:(jchar[]){
#line 71
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
#line 72
      16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
#line 73
      32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
#line 74
      48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
#line 75
      64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
#line 76
      80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
#line 77
      96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
#line 78
      112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
#line 79
      8364, 65533, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352, 8249, 338, 65533, 381, 65533,
#line 80
      65533, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482, 353, 8250, 339, 65533, 382, 376,
#line 81
      160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
#line 82
      176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
#line 83
      192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
#line 84
      208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
#line 85
      224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
#line 86
      240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 } count:256];
      ComAowagieTextPdfPdfEncodings_pdfEncodingByteToChar = [IOSCharArray newArrayWithChars:(jchar[]){
#line 89
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
#line 90
        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
#line 91
        32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
#line 92
        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
#line 93
        64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
#line 94
        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
#line 95
        96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
#line 96
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
#line 97
        (jint) 0x2022, (jint) 0x2020, (jint) 0x2021, (jint) 0x2026, (jint) 0x2014, (jint) 0x2013, (jint) 0x0192, (jint) 0x2044, (jint) 0x2039, (jint) 0x203a, (jint) 0x2212, (jint) 0x2030, (jint) 0x201e, (jint) 0x201c, (jint) 0x201d, (jint) 0x2018,
#line 98
        (jint) 0x2019, (jint) 0x201a, (jint) 0x2122, (jint) 0xfb01, (jint) 0xfb02, (jint) 0x0141, (jint) 0x0152, (jint) 0x0160, (jint) 0x0178, (jint) 0x017d, (jint) 0x0131, (jint) 0x0142, (jint) 0x0153, (jint) 0x0161, (jint) 0x017e, 65533,
#line 99
        (jint) 0x20ac, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
#line 100
        176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
#line 101
        192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
#line 102
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
#line 103
        224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
#line 104
        240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 } count:256];
        ComAowagieTextPdfPdfEncodings_winansi = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
        ComAowagieTextPdfPdfEncodings_pdfEncoding = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
        ComAowagieTextPdfPdfEncodings_extraEncodings = new_JavaUtilLinkedHashMap_init();
        {
          
#line 113
          for (jint k = 128; k < 161; ++k) {
            jchar c = IOSCharArray_Get(ComAowagieTextPdfPdfEncodings_winansiByteToChar, k);
            if (c != 65533) {
              [ComAowagieTextPdfPdfEncodings_winansi putWithInt:c withInt:k];
            }
          }
          
#line 120
          for (jint k = 128; k < 161; ++k) {
            jchar c = IOSCharArray_Get(ComAowagieTextPdfPdfEncodings_pdfEncodingByteToChar, k);
            if (c != 65533) {
              [ComAowagieTextPdfPdfEncodings_pdfEncoding putWithInt:c withInt:k];
            }
          }
          
#line 127
          ComAowagieTextPdfPdfEncodings_addExtraEncodingWithNSString_withComAowagieTextPdfExtraEncoding_(@"Wingdings", new_ComAowagieTextPdfPdfEncodings_WingdingsConversion_init());
          ComAowagieTextPdfPdfEncodings_addExtraEncodingWithNSString_withComAowagieTextPdfExtraEncoding_(@"Symbol", new_ComAowagieTextPdfPdfEncodings_SymbolConversion_initWithBoolean_(true));
          ComAowagieTextPdfPdfEncodings_addExtraEncodingWithNSString_withComAowagieTextPdfExtraEncoding_(@"ZapfDingbats", new_ComAowagieTextPdfPdfEncodings_SymbolConversion_initWithBoolean_(false));
          ComAowagieTextPdfPdfEncodings_addExtraEncodingWithNSString_withComAowagieTextPdfExtraEncoding_(@"SymbolTT", new_ComAowagieTextPdfPdfEncodings_SymbolTTConversion_init());
          ComAowagieTextPdfPdfEncodings_addExtraEncodingWithNSString_withComAowagieTextPdfExtraEncoding_(@"Cp437", new_ComAowagieTextPdfPdfEncodings_Cp437Conversion_init());
        }
        ComAowagieTextPdfPdfEncodings_cmaps = new_JavaUtilLinkedHashMap_init();
        J2OBJC_SET_INITIALIZED(ComAowagieTextPdfPdfEncodings)
      }
    }

@end


#line 65
void ComAowagieTextPdfPdfEncodings_initPackagePrivate(ComAowagieTextPdfPdfEncodings *self) {
  NSObject_init(self);
}


#line 65
ComAowagieTextPdfPdfEncodings *new_ComAowagieTextPdfPdfEncodings_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfEncodings, initPackagePrivate)
}


#line 65
ComAowagieTextPdfPdfEncodings *create_ComAowagieTextPdfPdfEncodings_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfEncodings, initPackagePrivate)
}


#line 140
IOSByteArray *ComAowagieTextPdfPdfEncodings_convertToBytesWithNSString_withNSString_(NSString *text, NSString *encoding) {
  ComAowagieTextPdfPdfEncodings_initialize();
  
#line 141
  if (text == nil) {
    return [IOSByteArray newArrayWithLength:0];
  }
  if (encoding == nil || [encoding java_length] == 0) {
    jint len = [text java_length];
    IOSByteArray *b = [IOSByteArray newArrayWithLength:len];
    for (jint k = 0; k < len; ++k) {
      *IOSByteArray_GetRef(b, k) = (jbyte) [text charAtWithInt:k];
    }
    return b;
  }
  id<ComAowagieTextPdfExtraEncoding> extra = (id<ComAowagieTextPdfExtraEncoding>) cast_check([((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfPdfEncodings_extraEncodings)) getWithId:[encoding lowercaseString]], ComAowagieTextPdfExtraEncoding_class_());
  if (extra != nil) {
    IOSByteArray *b = [extra charToByteWithNSString:text withNSString:encoding];
    if (b != nil) {
      return b;
    }
  }
  ComAowagieTextPdfIntHashtable *hash_ = nil;
  if ([encoding isEqual:ComAowagieTextPdfBaseFont_WINANSI]) {
    hash_ = ComAowagieTextPdfPdfEncodings_winansi;
  }
  else
#line 162
  if ([encoding isEqual:ComAowagieTextPdfPdfObject_TEXT_PDFDOCENCODING]) {
    hash_ = ComAowagieTextPdfPdfEncodings_pdfEncoding;
  }
  if (hash_ != nil) {
    IOSCharArray *cc = [text java_toCharArray];
    jint len = ((IOSCharArray *) nil_chk(cc))->size_;
    jint ptr = 0;
    IOSByteArray *b = [IOSByteArray newArrayWithLength:len];
    jint c = 0;
    for (jint k = 0; k < len; ++k) {
      jchar char1 = IOSCharArray_Get(cc, k);
      if (char1 < 128 || (char1 > 160 && char1 <= 255)) {
        c = char1;
      }
      else {
        
#line 176
        c = [hash_ getWithInt:char1];
      }
      if (c != 0) {
        *IOSByteArray_GetRef(b, ptr++) = (jbyte) c;
      }
    }
    if (ptr == len) {
      return b;
    }
    IOSByteArray *b2 = [IOSByteArray newArrayWithLength:ptr];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, b2, 0, ptr);
    return b2;
  }
  if ([encoding isEqual:ComAowagieTextPdfPdfObject_TEXT_UNICODE]) {
    
#line 191
    IOSCharArray *cc = [text java_toCharArray];
    jint len = ((IOSCharArray *) nil_chk(cc))->size_;
    IOSByteArray *b = [IOSByteArray newArrayWithLength:cc->size_ * 2 + 2];
    *IOSByteArray_GetRef(b, 0) = -2;
    *IOSByteArray_GetRef(b, 1) = -1;
    jint bptr = 2;
    for (jint k = 0; k < len; ++k) {
      jchar c = IOSCharArray_Get(cc, k);
      *IOSByteArray_GetRef(b, bptr++) = (jbyte) (JreRShift32(c, 8));
      *IOSByteArray_GetRef(b, bptr++) = (jbyte) (c & (jint) 0xff);
    }
    return b;
  }
  @try {
    return [text java_getBytesWithCharsetName:encoding];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 218
IOSByteArray *ComAowagieTextPdfPdfEncodings_convertToBytesWithChar_withNSString_(jchar char1, NSString *encoding) {
  ComAowagieTextPdfPdfEncodings_initialize();
  
#line 219
  if (encoding == nil || [encoding java_length] == 0) {
    return [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) char1 } count:1];
  }
  id<ComAowagieTextPdfExtraEncoding> extra = (id<ComAowagieTextPdfExtraEncoding>) cast_check([((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfPdfEncodings_extraEncodings)) getWithId:[encoding lowercaseString]], ComAowagieTextPdfExtraEncoding_class_());
  if (extra != nil) {
    IOSByteArray *b = [extra charToByteWithChar:char1 withNSString:encoding];
    if (b != nil) {
      return b;
    }
  }
  ComAowagieTextPdfIntHashtable *hash_ = nil;
  if ([encoding isEqual:ComAowagieTextPdfBaseFont_WINANSI]) {
    hash_ = ComAowagieTextPdfPdfEncodings_winansi;
  }
  else
#line 232
  if ([encoding isEqual:ComAowagieTextPdfPdfObject_TEXT_PDFDOCENCODING]) {
    hash_ = ComAowagieTextPdfPdfEncodings_pdfEncoding;
  }
  if (hash_ != nil) {
    jint c = 0;
    if (char1 < 128 || (char1 > 160 && char1 <= 255)) {
      c = char1;
    }
    else {
      
#line 240
      c = [hash_ getWithInt:char1];
    }
    if (c != 0) {
      return [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) c } count:1];
    }
    else {
      
#line 245
      return [IOSByteArray newArrayWithLength:0];
    }
  }
  if ([encoding isEqual:ComAowagieTextPdfPdfObject_TEXT_UNICODE]) {
    
#line 250
    IOSByteArray *b = [IOSByteArray newArrayWithLength:4];
    *IOSByteArray_GetRef(b, 0) = -2;
    *IOSByteArray_GetRef(b, 1) = -1;
    *IOSByteArray_GetRef(b, 2) = (jbyte) (JreRShift32(char1, 8));
    *IOSByteArray_GetRef(b, 3) = (jbyte) (char1 & (jint) 0xff);
    return b;
  }
  @try {
    return [((NSString *) nil_chk(NSString_java_valueOfChar_(char1))) java_getBytesWithCharsetName:encoding];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 271
NSString *ComAowagieTextPdfPdfEncodings_convertToStringWithByteArray_withNSString_(IOSByteArray *bytes, NSString *encoding) {
  ComAowagieTextPdfPdfEncodings_initialize();
  
#line 272
  if (bytes == nil) {
    return ComAowagieTextPdfPdfObject_NOTHING;
  }
  if (encoding == nil || [encoding java_length] == 0) {
    IOSCharArray *c = [IOSCharArray newArrayWithLength:bytes->size_];
    for (jint k = 0; k < bytes->size_; ++k) {
      *IOSCharArray_GetRef(c, k) = (jchar) (IOSByteArray_Get(bytes, k) & (jint) 0xff);
    }
    return [NSString java_stringWithCharacters:c];
  }
  id<ComAowagieTextPdfExtraEncoding> extra = (id<ComAowagieTextPdfExtraEncoding>) cast_check([((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfPdfEncodings_extraEncodings)) getWithId:[encoding lowercaseString]], ComAowagieTextPdfExtraEncoding_class_());
  if (extra != nil) {
    NSString *text = [extra byteToCharWithByteArray:bytes withNSString:encoding];
    if (text != nil) {
      return text;
    }
  }
  IOSCharArray *ch = nil;
  if ([encoding isEqual:ComAowagieTextPdfBaseFont_WINANSI]) {
    ch = ComAowagieTextPdfPdfEncodings_winansiByteToChar;
  }
  else
#line 292
  if ([encoding isEqual:ComAowagieTextPdfPdfObject_TEXT_PDFDOCENCODING]) {
    ch = ComAowagieTextPdfPdfEncodings_pdfEncodingByteToChar;
  }
  if (ch != nil) {
    jint len = bytes->size_;
    IOSCharArray *c = [IOSCharArray newArrayWithLength:len];
    for (jint k = 0; k < len; ++k) {
      *IOSCharArray_GetRef(c, k) = IOSCharArray_Get(ch, IOSByteArray_Get(bytes, k) & (jint) 0xff);
    }
    return [NSString java_stringWithCharacters:c];
  }
  @try {
    return [NSString java_stringWithBytes:bytes charsetName:encoding];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 315
jboolean ComAowagieTextPdfPdfEncodings_isPdfDocEncodingWithNSString_(NSString *text) {
  ComAowagieTextPdfPdfEncodings_initialize();
  
#line 316
  if (text == nil) {
    return true;
  }
  jint len = [text java_length];
  for (jint k = 0; k < len; ++k) {
    jchar char1 = [text charAtWithInt:k];
    if (char1 < 128 || (char1 > 160 && char1 <= 255)) {
      continue;
    }
    if (![((ComAowagieTextPdfIntHashtable *) nil_chk(ComAowagieTextPdfPdfEncodings_pdfEncoding)) containsKeyWithInt:char1]) {
      return false;
    }
  }
  return true;
}


#line 346
NSString *ComAowagieTextPdfPdfEncodings_convertCmapWithNSString_withByteArray_withInt_withInt_(NSString *name, IOSByteArray *seq, jint start, jint length) {
  ComAowagieTextPdfPdfEncodings_initialize();
  
#line 347
  @try {
    IOSObjectArray *planes = nil;
    @synchronized(ComAowagieTextPdfPdfEncodings_cmaps) {
      planes = JreRetainedLocalValue((IOSObjectArray *) cast_check([((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfPdfEncodings_cmaps)) getWithId:name], IOSClass_charArray(2)));
    }
    if (planes == nil) {
      planes = ComAowagieTextPdfPdfEncodings_readCmapWithNSString_withByteArray2_(name, nil);
      @synchronized(ComAowagieTextPdfPdfEncodings_cmaps) {
        (void) [ComAowagieTextPdfPdfEncodings_cmaps putWithId:name withId:planes];
      }
    }
    return ComAowagieTextPdfPdfEncodings_decodeSequenceWithByteArray_withInt_withInt_withCharArray2_(seq, start, length, planes);
  }
  @catch (JavaIoIOException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 365
NSString *ComAowagieTextPdfPdfEncodings_decodeSequenceWithByteArray_withInt_withInt_withCharArray2_(IOSByteArray *seq, jint start, jint length, IOSObjectArray *planes) {
  ComAowagieTextPdfPdfEncodings_initialize();
  
#line 366
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  jint end = start + length;
  jint currentPlane = 0;
  for (jint k = start; k < end; ++k) {
    jint one = IOSByteArray_Get(nil_chk(seq), k) & (jint) 0xff;
    IOSCharArray *plane = IOSObjectArray_Get(nil_chk(planes), currentPlane);
    jint cid = IOSCharArray_Get(nil_chk(plane), one);
    if ((cid & (jint) 0x8000) == 0) {
      (void) [buf appendWithChar:(jchar) cid];
      currentPlane = 0;
    }
    else {
      
#line 377
      currentPlane = cid & (jint) 0x7fff;
    }
  }
  return [buf description];
}


#line 383
IOSObjectArray *ComAowagieTextPdfPdfEncodings_readCmapWithNSString_withByteArray2_(NSString *name, IOSObjectArray *newline) {
  ComAowagieTextPdfPdfEncodings_initialize();
  
#line 384
  JavaUtilArrayList *planes = new_JavaUtilArrayList_init();
  [planes addWithId:[IOSCharArray newArrayWithLength:256]];
  ComAowagieTextPdfPdfEncodings_readCmapWithNSString_withJavaUtilArrayList_(name, planes);
  if (newline != nil) {
    {
      IOSObjectArray *a__ =
#line 388
      newline;
      IOSByteArray * const *b__ = a__->buffer_;
      IOSByteArray * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IOSByteArray *element = *b__++;
        
#line 389
        ComAowagieTextPdfPdfEncodings_encodeSequenceWithInt_withByteArray_withChar_withJavaUtilArrayList_(((IOSByteArray *) nil_chk(element))->size_, element, ComAowagieTextPdfBaseFont_CID_NEWLINE, planes);
      }
    }
  }
  
#line 392
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:[planes size] type:IOSClass_charArray(1)];
  return (IOSObjectArray *) cast_check([planes toArrayWithNSObjectArray:ret], IOSClass_charArray(2));
}


#line 396
void ComAowagieTextPdfPdfEncodings_readCmapWithNSString_withJavaUtilArrayList_(NSString *name, JavaUtilArrayList *planes) {
  ComAowagieTextPdfPdfEncodings_initialize();
  
#line 397
  NSString *fullName = JreStrcat("$$$", ComAowagieTextPdfBaseFont_RESOURCE_PATH, @"cmaps/", name);
  JavaIoInputStream *in = ComAowagieTextPdfBaseFont_getResourceStreamWithNSString_(fullName);
  if (in == nil) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"The Cmap ", name, @" was not found."));
  }
  ComAowagieTextPdfPdfEncodings_encodeStreamWithJavaIoInputStream_withJavaUtilArrayList_(in, planes);
  [in close];
}


#line 406
void ComAowagieTextPdfPdfEncodings_encodeStreamWithJavaIoInputStream_withJavaUtilArrayList_(JavaIoInputStream *inArg, JavaUtilArrayList *planes) {
  ComAowagieTextPdfPdfEncodings_initialize();
  
#line 407
  JavaIoBufferedReader *rd = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(inArg, @"iso-8859-1"));
  NSString *line = nil;
  jint state = ComAowagieTextPdfPdfEncodings_CIDNONE;
  IOSByteArray *seqs = [IOSByteArray newArrayWithLength:7];
  while ((line = [rd readLine]) != nil) {
    if ([((NSString *) nil_chk(line)) java_length] < 6) {
      continue;
    }
    switch (state) {
      case ComAowagieTextPdfPdfEncodings_CIDNONE:
      {
        
#line 417
        if ([line java_indexOfString:@"begincidrange"] >= 0) {
          state = ComAowagieTextPdfPdfEncodings_CIDRANGE;
        }
        else
#line 419
        if ([line java_indexOfString:@"begincidchar"] >= 0) {
          state = ComAowagieTextPdfPdfEncodings_CIDCHAR;
        }
        else
#line 421
        if ([line java_indexOfString:@"usecmap"] >= 0) {
          JavaUtilStringTokenizer *tk = new_JavaUtilStringTokenizer_initWithNSString_(line);
          NSString *t = [tk nextToken];
          ComAowagieTextPdfPdfEncodings_readCmapWithNSString_withJavaUtilArrayList_([((NSString *) nil_chk(t)) java_substring:1], planes);
        }
        break;
      }
      case ComAowagieTextPdfPdfEncodings_CIDRANGE:
      {
        
#line 429
        if ([line java_indexOfString:@"endcidrange"] >= 0) {
          state = ComAowagieTextPdfPdfEncodings_CIDNONE;
          break;
        }
        JavaUtilStringTokenizer *tk = new_JavaUtilStringTokenizer_initWithNSString_(line);
        NSString *t = [tk nextToken];
        jint size = JreIntDiv([((NSString *) nil_chk(t)) java_length], 2) - 1;
        jlong start = JavaLangLong_parseLongWithNSString_withInt_([t java_substring:1 endIndex:[t java_length] - 1], 16);
        t = [tk nextToken];
        jlong end = JavaLangLong_parseLongWithNSString_withInt_([((NSString *) nil_chk(t)) java_substring:1 endIndex:[t java_length] - 1], 16);
        t = [tk nextToken];
        jint cid = JavaLangInteger_parseIntWithNSString_(t);
        for (jlong k = start; k <= end; ++k) {
          ComAowagieTextPdfPdfEncodings_breakLongWithLong_withInt_withByteArray_(k, size, seqs);
          ComAowagieTextPdfPdfEncodings_encodeSequenceWithInt_withByteArray_withChar_withJavaUtilArrayList_(size, seqs, (jchar) cid, planes);
          ++cid;
        }
        break;
      }
      case ComAowagieTextPdfPdfEncodings_CIDCHAR:
      {
        
#line 449
        if ([line java_indexOfString:@"endcidchar"] >= 0) {
          state = ComAowagieTextPdfPdfEncodings_CIDNONE;
          break;
        }
        JavaUtilStringTokenizer *tk = new_JavaUtilStringTokenizer_initWithNSString_(line);
        NSString *t = [tk nextToken];
        jint size = JreIntDiv([((NSString *) nil_chk(t)) java_length], 2) - 1;
        jlong start = JavaLangLong_parseLongWithNSString_withInt_([t java_substring:1 endIndex:[t java_length] - 1], 16);
        t = [tk nextToken];
        jint cid = JavaLangInteger_parseIntWithNSString_(t);
        ComAowagieTextPdfPdfEncodings_breakLongWithLong_withInt_withByteArray_(start, size, seqs);
        ComAowagieTextPdfPdfEncodings_encodeSequenceWithInt_withByteArray_withChar_withJavaUtilArrayList_(size, seqs, (jchar) cid, planes);
        break;
      }
    }
  }
}


#line 467
void ComAowagieTextPdfPdfEncodings_breakLongWithLong_withInt_withByteArray_(jlong n, jint size, IOSByteArray *seqs) {
  ComAowagieTextPdfPdfEncodings_initialize();
  
#line 468
  for (jint k = 0; k < size; ++k) {
    *IOSByteArray_GetRef(nil_chk(seqs), k) = (jbyte) (JreRShift64(n, (size - 1 - k) * 8));
  }
}


#line 473
void ComAowagieTextPdfPdfEncodings_encodeSequenceWithInt_withByteArray_withChar_withJavaUtilArrayList_(jint size, IOSByteArray *seqs, jchar cid, JavaUtilArrayList *planes) {
  ComAowagieTextPdfPdfEncodings_initialize();
  
#line 474
  --size;
  jint nextPlane = 0;
  for (jint idx = 0; idx < size; ++idx) {
    IOSCharArray *plane = (IOSCharArray *) cast_chk([((JavaUtilArrayList *) nil_chk(planes)) getWithInt:nextPlane], [IOSCharArray class]);
    jint one = IOSByteArray_Get(nil_chk(seqs), idx) & (jint) 0xff;
    jchar c = IOSCharArray_Get(nil_chk(plane), one);
    if (c != 0 && (c & (jint) 0x8000) == 0) {
      @throw new_JavaLangRuntimeException_initWithNSString_(@"Inconsistent mapping.");
    }
    if (c == 0) {
      [planes addWithId:[IOSCharArray newArrayWithLength:256]];
      c = (jchar) (([planes size] - 1) | (jint) 0x8000);
      *IOSCharArray_GetRef(plane, one) = c;
    }
    nextPlane = c & (jint) 0x7fff;
  }
  IOSCharArray *plane = (IOSCharArray *) cast_chk([((JavaUtilArrayList *) nil_chk(planes)) getWithInt:nextPlane], [IOSCharArray class]);
  jint one = IOSByteArray_Get(nil_chk(seqs), size) & (jint) 0xff;
  jchar c = IOSCharArray_Get(nil_chk(plane), one);
  if ((c & (jint) 0x8000) != 0) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Inconsistent mapping.");
  }
  *IOSCharArray_GetRef(plane, one) = cid;
}


#line 503
void ComAowagieTextPdfPdfEncodings_addExtraEncodingWithNSString_withComAowagieTextPdfExtraEncoding_(NSString *name, id<ComAowagieTextPdfExtraEncoding> enc) {
  ComAowagieTextPdfPdfEncodings_initialize();
  
#line 504
  @synchronized(ComAowagieTextPdfPdfEncodings_extraEncodings) {
    JavaUtilHashMap *newEncodings = (JavaUtilHashMap *) cast_chk([((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfPdfEncodings_extraEncodings)) java_clone], [JavaUtilHashMap class]);
    (void) [((JavaUtilHashMap *) nil_chk(newEncodings)) putWithId:[((NSString *) nil_chk(name)) lowercaseString] withId:enc];
    ComAowagieTextPdfPdfEncodings_extraEncodings = newEncodings;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfEncodings)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PdfEncodings.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfPdfEncodings_WingdingsConversion)


#line 511
@implementation ComAowagieTextPdfPdfEncodings_WingdingsConversion

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 511
- (instancetype)init {
  ComAowagieTextPdfPdfEncodings_WingdingsConversion_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 513
- (IOSByteArray *)charToByteWithChar:(jchar)char1
                        withNSString:(NSString *)encoding {
  if (char1 == ' ') {
    return [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) char1 } count:1];
  }
  else
#line 517
  if (char1 >= 0x2701 && char1 <= 0x27be) {
    jbyte v = IOSByteArray_Get(nil_chk(ComAowagieTextPdfPdfEncodings_WingdingsConversion_table), char1 - (jint) 0x2700);
    if (v != 0) {
      return [IOSByteArray newArrayWithBytes:(jbyte[]){ v } count:1];
    }
  }
  return [IOSByteArray newArrayWithLength:0];
}


#line 526
- (IOSByteArray *)charToByteWithNSString:(NSString *)text
                            withNSString:(NSString *)encoding {
  IOSCharArray *cc = [((NSString *) nil_chk(text)) java_toCharArray];
  IOSByteArray *b = [IOSByteArray newArrayWithLength:((IOSCharArray *) nil_chk(cc))->size_];
  jint ptr = 0;
  jint len = cc->size_;
  for (jint k = 0; k < len; ++k) {
    jchar c = IOSCharArray_Get(cc, k);
    if (c == ' ') {
      *IOSByteArray_GetRef(b, ptr++) = (jbyte) c;
    }
    else
#line 536
    if (c >= 0x2701 && c <= 0x27be) {
      jbyte v = IOSByteArray_Get(nil_chk(ComAowagieTextPdfPdfEncodings_WingdingsConversion_table), c - (jint) 0x2700);
      if (v != 0) {
        *IOSByteArray_GetRef(b, ptr++) = v;
      }
    }
  }
  if (ptr == len) {
    return b;
  }
  IOSByteArray *b2 = [IOSByteArray newArrayWithLength:ptr];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, b2, 0, ptr);
  return b2;
}


#line 551
- (NSString *)byteToCharWithByteArray:(IOSByteArray *)b
                         withNSString:(NSString *)encoding {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(charToByteWithChar:withNSString:);
  methods[2].selector = @selector(charToByteWithNSString:withNSString:);
  methods[3].selector = @selector(byteToCharWithByteArray:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "table", "[B", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "charToByte", "CLNSString;", "LNSString;LNSString;", "byteToChar", "[BLNSString;", &ComAowagieTextPdfPdfEncodings_WingdingsConversion_table, "LComAowagieTextPdfPdfEncodings;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfEncodings_WingdingsConversion = { "WingdingsConversion", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0xa, 4, 1, 6, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfEncodings_WingdingsConversion;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfPdfEncodings_WingdingsConversion class]) {
    ComAowagieTextPdfPdfEncodings_WingdingsConversion_table = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 557
      0, 35, 34, 0, 0, 0, 41, 62, 81, 42,
#line 558
      0, 0, 65, 63, 0, 0, 0, 0, 0, -4,
#line 559
      0, 0, 0, -5, 0, 0, 0, 0, 0, 0,
#line 560
      86, 0, 88, 89, 0, 0, 0, 0, 0, 0,
#line 561
      0, 0, -75, 0, 0, 0, 0, 0, -74, 0,
#line 562
      0, 0, -83, -81, -84, 0, 0, 0, 0, 0,
#line 563
      0, 0, 0, 124, 123, 0, 0, 0, 84, 0,
#line 564
      0, 0, 0, 0, 0, 0, 0, -90, 0, 0,
#line 565
      0, 113, 114, 0, 0, 0, 117, 0, 0, 0,
#line 566
      0, 0, 0, 125, 126, 0, 0, 0, 0, 0,
#line 567
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 568
      0, 0, 0, 0, 0, 0, 0, 0, -116, -115,
#line 569
      -114, -113, -112, -111, -110, -109, -108, -107, -127, -126,
#line 570
      -125, -124, -123, -122, -121, -120, -119, -118, -116, -115,
#line 571
      -114, -113, -112, -111, -110, -109, -108, -107, -24, 0,
#line 572
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 573
      0, -24, -40, 0, 0, -60, -58, 0, 0, -16,
#line 574
      0, 0, 0, 0, 0, 0, 0, 0, 0, -36,
#line 575
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 576
      0 } count:191];
      J2OBJC_SET_INITIALIZED(ComAowagieTextPdfPdfEncodings_WingdingsConversion)
    }
  }

@end


#line 511
void ComAowagieTextPdfPdfEncodings_WingdingsConversion_init(ComAowagieTextPdfPdfEncodings_WingdingsConversion *self) {
  NSObject_init(self);
}


#line 511
ComAowagieTextPdfPdfEncodings_WingdingsConversion *new_ComAowagieTextPdfPdfEncodings_WingdingsConversion_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfEncodings_WingdingsConversion, init)
}


#line 511
ComAowagieTextPdfPdfEncodings_WingdingsConversion *create_ComAowagieTextPdfPdfEncodings_WingdingsConversion_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfEncodings_WingdingsConversion, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfEncodings_WingdingsConversion)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PdfEncodings.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfPdfEncodings_Cp437Conversion)


#line 580
@implementation ComAowagieTextPdfPdfEncodings_Cp437Conversion

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 580
- (instancetype)init {
  ComAowagieTextPdfPdfEncodings_Cp437Conversion_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 583
- (IOSByteArray *)charToByteWithNSString:(NSString *)text
                            withNSString:(NSString *)encoding {
  IOSCharArray *cc = [((NSString *) nil_chk(text)) java_toCharArray];
  IOSByteArray *b = [IOSByteArray newArrayWithLength:((IOSCharArray *) nil_chk(cc))->size_];
  jint ptr = 0;
  jint len = cc->size_;
  for (jint k = 0; k < len; ++k) {
    jchar c = IOSCharArray_Get(cc, k);
    if (c < 128) {
      *IOSByteArray_GetRef(b, ptr++) = (jbyte) c;
    }
    else {
      
#line 594
      jbyte v = (jbyte) [((ComAowagieTextPdfIntHashtable *) nil_chk(ComAowagieTextPdfPdfEncodings_Cp437Conversion_c2b)) getWithInt:c];
      if (v != 0) {
        *IOSByteArray_GetRef(b, ptr++) = v;
      }
    }
  }
  if (ptr == len) {
    return b;
  }
  IOSByteArray *b2 = [IOSByteArray newArrayWithLength:ptr];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, b2, 0, ptr);
  return b2;
}


#line 608
- (IOSByteArray *)charToByteWithChar:(jchar)char1
                        withNSString:(NSString *)encoding {
  if (char1 < 128) {
    return [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) char1 } count:1];
  }
  else {
    
#line 613
    jbyte v = (jbyte) [((ComAowagieTextPdfIntHashtable *) nil_chk(ComAowagieTextPdfPdfEncodings_Cp437Conversion_c2b)) getWithInt:char1];
    if (v != 0) {
      return [IOSByteArray newArrayWithBytes:(jbyte[]){ v } count:1];
    }
    else {
      
#line 617
      return [IOSByteArray newArrayWithLength:0];
    }
  }
}


#line 622
- (NSString *)byteToCharWithByteArray:(IOSByteArray *)b
                         withNSString:(NSString *)encoding {
  jint len = ((IOSByteArray *) nil_chk(b))->size_;
  IOSCharArray *cc = [IOSCharArray newArrayWithLength:len];
  jint ptr = 0;
  for (jint k = 0; k < len; ++k) {
    jint c = IOSByteArray_Get(b, k) & (jint) 0xff;
    if (c < ' ') {
      continue;
    }
    if (c < 128) {
      *IOSCharArray_GetRef(cc, ptr++) = (jchar) c;
    }
    else {
      
#line 635
      jchar v = IOSCharArray_Get(nil_chk(ComAowagieTextPdfPdfEncodings_Cp437Conversion_table), c - 128);
      *IOSCharArray_GetRef(cc, ptr++) = v;
    }
  }
  return [NSString java_stringWithCharacters:cc offset:0 length:ptr];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(charToByteWithNSString:withNSString:);
  methods[2].selector = @selector(charToByteWithChar:withNSString:);
  methods[3].selector = @selector(byteToCharWithByteArray:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "c2b", "LComAowagieTextPdfIntHashtable;", .constantValue.asLong = 0, 0xa, -1, 5, -1, -1 },
    { "table", "[C", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "charToByte", "LNSString;LNSString;", "CLNSString;", "byteToChar", "[BLNSString;", &ComAowagieTextPdfPdfEncodings_Cp437Conversion_c2b, &ComAowagieTextPdfPdfEncodings_Cp437Conversion_table, "LComAowagieTextPdfPdfEncodings;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfEncodings_Cp437Conversion = { "Cp437Conversion", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0xa, 4, 2, 7, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfEncodings_Cp437Conversion;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfPdfEncodings_Cp437Conversion class]) {
    ComAowagieTextPdfPdfEncodings_Cp437Conversion_c2b = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
    ComAowagieTextPdfPdfEncodings_Cp437Conversion_table = [IOSCharArray newArrayWithChars:(jchar[]){
#line 643
      0x00c7, 0x00fc, 0x00e9, 0x00e2, 0x00e4, 0x00e0, 0x00e5, 0x00e7, 0x00ea, 0x00eb, 0x00e8, 0x00ef, 0x00ee, 0x00ec, 0x00c4, 0x00c5,
#line 644
      0x00c9, 0x00e6, 0x00c6, 0x00f4, 0x00f6, 0x00f2, 0x00fb, 0x00f9, 0x00ff, 0x00d6, 0x00dc, 0x00a2, 0x00a3, 0x00a5, 0x20a7, 0x0192,
#line 645
      0x00e1, 0x00ed, 0x00f3, 0x00fa, 0x00f1, 0x00d1, 0x00aa, 0x00ba, 0x00bf, 0x2310, 0x00ac, 0x00bd, 0x00bc, 0x00a1, 0x00ab, 0x00bb,
#line 646
      0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556, 0x2555, 0x2563, 0x2551, 0x2557, 0x255d, 0x255c, 0x255b, 0x2510,
#line 647
      0x2514, 0x2534, 0x252c, 0x251c, 0x2500, 0x253c, 0x255e, 0x255f, 0x255a, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256c, 0x2567,
#line 648
      0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256b, 0x256a, 0x2518, 0x250c, 0x2588, 0x2584, 0x258c, 0x2590, 0x2580,
#line 649
      0x03b1, 0x00df, 0x0393, 0x03c0, 0x03a3, 0x03c3, 0x00b5, 0x03c4, 0x03a6, 0x0398, 0x03a9, 0x03b4, 0x221e, 0x03c6, 0x03b5, 0x2229,
#line 650
      0x2261, 0x00b1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00f7, 0x2248, 0x00b0, 0x2219, 0x00b7, 0x221a, 0x207f, 0x00b2, 0x25a0, 0x00a0 } count:128];
      {
        
#line 654
        for (jint k = 0; k < ComAowagieTextPdfPdfEncodings_Cp437Conversion_table->size_; ++k) {
          [((ComAowagieTextPdfIntHashtable *) nil_chk(ComAowagieTextPdfPdfEncodings_Cp437Conversion_c2b)) putWithInt:IOSCharArray_Get(ComAowagieTextPdfPdfEncodings_Cp437Conversion_table, k) withInt:k + 128];
        }
      }
      J2OBJC_SET_INITIALIZED(ComAowagieTextPdfPdfEncodings_Cp437Conversion)
    }
  }

@end


#line 580
void ComAowagieTextPdfPdfEncodings_Cp437Conversion_init(ComAowagieTextPdfPdfEncodings_Cp437Conversion *self) {
  NSObject_init(self);
}


#line 580
ComAowagieTextPdfPdfEncodings_Cp437Conversion *new_ComAowagieTextPdfPdfEncodings_Cp437Conversion_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfEncodings_Cp437Conversion, init)
}


#line 580
ComAowagieTextPdfPdfEncodings_Cp437Conversion *create_ComAowagieTextPdfPdfEncodings_Cp437Conversion_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfEncodings_Cp437Conversion, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfEncodings_Cp437Conversion)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PdfEncodings.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfPdfEncodings_SymbolConversion)


#line 660
@implementation ComAowagieTextPdfPdfEncodings_SymbolConversion


#line 666
- (instancetype)initWithBoolean:(jboolean)symbol {
  ComAowagieTextPdfPdfEncodings_SymbolConversion_initWithBoolean_(self, symbol);
  return self;
}


#line 674
- (IOSByteArray *)charToByteWithNSString:(NSString *)text
                            withNSString:(NSString *)encoding {
  IOSCharArray *cc = [((NSString *) nil_chk(text)) java_toCharArray];
  IOSByteArray *b = [IOSByteArray newArrayWithLength:((IOSCharArray *) nil_chk(cc))->size_];
  jint ptr = 0;
  jint len = cc->size_;
  for (jint k = 0; k < len; ++k) {
    jchar c = IOSCharArray_Get(cc, k);
    jbyte v = (jbyte) [((ComAowagieTextPdfIntHashtable *) nil_chk(self->translation_)) getWithInt:c];
    if (v != 0) {
      *IOSByteArray_GetRef(b, ptr++) = v;
    }
  }
  if (ptr == len) {
    return b;
  }
  IOSByteArray *b2 = [IOSByteArray newArrayWithLength:ptr];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, b2, 0, ptr);
  return b2;
}

- (IOSByteArray *)charToByteWithChar:(jchar)char1
                        withNSString:(NSString *)encoding {
  jbyte v = (jbyte) [((ComAowagieTextPdfIntHashtable *) nil_chk(self->translation_)) getWithInt:char1];
  if (v != 0) {
    return [IOSByteArray newArrayWithBytes:(jbyte[]){ v } count:1];
  }
  else {
    
#line 701
    return [IOSByteArray newArrayWithLength:0];
  }
}


#line 705
- (NSString *)byteToCharWithByteArray:(IOSByteArray *)b
                         withNSString:(NSString *)encoding {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithBoolean:);
  methods[1].selector = @selector(charToByteWithNSString:withNSString:);
  methods[2].selector = @selector(charToByteWithChar:withNSString:);
  methods[3].selector = @selector(byteToCharWithByteArray:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "t1", "LComAowagieTextPdfIntHashtable;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "t2", "LComAowagieTextPdfIntHashtable;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "translation_", "LComAowagieTextPdfIntHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "table1", "[C", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "table2", "[C", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "charToByte", "LNSString;LNSString;", "CLNSString;", "byteToChar", "[BLNSString;", &ComAowagieTextPdfPdfEncodings_SymbolConversion_t1, &ComAowagieTextPdfPdfEncodings_SymbolConversion_t2, &ComAowagieTextPdfPdfEncodings_SymbolConversion_table1, &ComAowagieTextPdfPdfEncodings_SymbolConversion_table2, "LComAowagieTextPdfPdfEncodings;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfEncodings_SymbolConversion = { "SymbolConversion", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0xa, 4, 5, 10, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfEncodings_SymbolConversion;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfPdfEncodings_SymbolConversion class]) {
    ComAowagieTextPdfPdfEncodings_SymbolConversion_t1 = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
    ComAowagieTextPdfPdfEncodings_SymbolConversion_t2 = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
    ComAowagieTextPdfPdfEncodings_SymbolConversion_table1 = [IOSCharArray newArrayWithChars:(jchar[]){
#line 711
      ' ', '!', 0x2200, '#', 0x2203, '%', '&', 0x220b, '(', ')', '*', '+', ',', '-', '.', '/',
#line 712
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?',
#line 713
      0x2245, 0x0391, 0x0392, 0x03a7, 0x0394, 0x0395, 0x03a6, 0x0393, 0x0397, 0x0399, 0x03d1, 0x039a, 0x039b, 0x039c, 0x039d, 0x039f,
#line 714
      0x03a0, 0x0398, 0x03a1, 0x03a3, 0x03a4, 0x03a5, 0x03c2, 0x03a9, 0x039e, 0x03a8, 0x0396, '[', 0x2234, ']', 0x22a5, '_',
#line 715
      0x0305, 0x03b1, 0x03b2, 0x03c7, 0x03b4, 0x03b5, 0x03d5, 0x03b3, 0x03b7, 0x03b9, 0x03c6, 0x03ba, 0x03bb, 0x03bc, 0x03bd, 0x03bf,
#line 716
      0x03c0, 0x03b8, 0x03c1, 0x03c3, 0x03c4, 0x03c5, 0x03d6, 0x03c9, 0x03be, 0x03c8, 0x03b6, '{', '|', '}', '~', 0x0000,
#line 717
      0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
#line 718
      0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
#line 719
      0x20ac, 0x03d2, 0x2032, 0x2264, 0x2044, 0x221e, 0x0192, 0x2663, 0x2666, 0x2665, 0x2660, 0x2194, 0x2190, 0x2191, 0x2192, 0x2193,
#line 720
      0x00b0, 0x00b1, 0x2033, 0x2265, 0x00d7, 0x221d, 0x2202, 0x2022, 0x00f7, 0x2260, 0x2261, 0x2248, 0x2026, 0x2502, 0x2500, 0x21b5,
#line 721
      0x2135, 0x2111, 0x211c, 0x2118, 0x2297, 0x2295, 0x2205, 0x2229, 0x222a, 0x2283, 0x2287, 0x2284, 0x2282, 0x2286, 0x2208, 0x2209,
#line 722
      0x2220, 0x2207, 0x00ae, 0x00a9, 0x2122, 0x220f, 0x221a, 0x2022, 0x00ac, 0x2227, 0x2228, 0x21d4, 0x21d0, 0x21d1, 0x21d2, 0x21d3,
#line 723
      0x25ca, 0x2329, 0x0000, 0x0000, 0x0000, 0x2211, 0x239b, 0x239c, 0x239d, 0x23a1, 0x23a2, 0x23a3, 0x23a7, 0x23a8, 0x23a9, 0x23aa,
#line 724
      0x0000, 0x232a, 0x222b, 0x2320, 0x23ae, 0x2321, 0x239e, 0x239f, 0x23a0, 0x23a4, 0x23a5, 0x23a6, 0x23ab, 0x23ac, 0x23ad, 0x0000 } count:224];
      ComAowagieTextPdfPdfEncodings_SymbolConversion_table2 = [IOSCharArray newArrayWithChars:(jchar[]){
#line 728
        ' ', 0x2701, 0x2702, 0x2703, 0x2704, 0x260e, 0x2706, 0x2707, 0x2708, 0x2709, 0x261b, 0x261e, 0x270c, 0x270d, 0x270e, 0x270f,
#line 729
        0x2710, 0x2711, 0x2712, 0x2713, 0x2714, 0x2715, 0x2716, 0x2717, 0x2718, 0x2719, 0x271a, 0x271b, 0x271c, 0x271d, 0x271e, 0x271f,
#line 730
        0x2720, 0x2721, 0x2722, 0x2723, 0x2724, 0x2725, 0x2726, 0x2727, 0x2605, 0x2729, 0x272a, 0x272b, 0x272c, 0x272d, 0x272e, 0x272f,
#line 731
        0x2730, 0x2731, 0x2732, 0x2733, 0x2734, 0x2735, 0x2736, 0x2737, 0x2738, 0x2739, 0x273a, 0x273b, 0x273c, 0x273d, 0x273e, 0x273f,
#line 732
        0x2740, 0x2741, 0x2742, 0x2743, 0x2744, 0x2745, 0x2746, 0x2747, 0x2748, 0x2749, 0x274a, 0x274b, 0x25cf, 0x274d, 0x25a0, 0x274f,
#line 733
        0x2750, 0x2751, 0x2752, 0x25b2, 0x25bc, 0x25c6, 0x2756, 0x25d7, 0x2758, 0x2759, 0x275a, 0x275b, 0x275c, 0x275d, 0x275e, 0x0000,
#line 734
        0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
#line 735
        0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
#line 736
        0x0000, 0x2761, 0x2762, 0x2763, 0x2764, 0x2765, 0x2766, 0x2767, 0x2663, 0x2666, 0x2665, 0x2660, 0x2460, 0x2461, 0x2462, 0x2463,
#line 737
        0x2464, 0x2465, 0x2466, 0x2467, 0x2468, 0x2469, 0x2776, 0x2777, 0x2778, 0x2779, 0x277a, 0x277b, 0x277c, 0x277d, 0x277e, 0x277f,
#line 738
        0x2780, 0x2781, 0x2782, 0x2783, 0x2784, 0x2785, 0x2786, 0x2787, 0x2788, 0x2789, 0x278a, 0x278b, 0x278c, 0x278d, 0x278e, 0x278f,
#line 739
        0x2790, 0x2791, 0x2792, 0x2793, 0x2794, 0x2192, 0x2194, 0x2195, 0x2798, 0x2799, 0x279a, 0x279b, 0x279c, 0x279d, 0x279e, 0x279f,
#line 740
        0x27a0, 0x27a1, 0x27a2, 0x27a3, 0x27a4, 0x27a5, 0x27a6, 0x27a7, 0x27a8, 0x27a9, 0x27aa, 0x27ab, 0x27ac, 0x27ad, 0x27ae, 0x27af,
#line 741
        0x0000, 0x27b1, 0x27b2, 0x27b3, 0x27b4, 0x27b5, 0x27b6, 0x27b7, 0x27b8, 0x27b9, 0x27ba, 0x27bb, 0x27bc, 0x27bd, 0x27be, 0x0000 } count:224];
        {
          
#line 745
          for (jint k = 0; k < ComAowagieTextPdfPdfEncodings_SymbolConversion_table1->size_; ++k) {
            jint v = IOSCharArray_Get(ComAowagieTextPdfPdfEncodings_SymbolConversion_table1, k);
            if (v != 0) {
              [ComAowagieTextPdfPdfEncodings_SymbolConversion_t1 putWithInt:v withInt:k + 32];
            }
          }
          for (jint k = 0; k < ComAowagieTextPdfPdfEncodings_SymbolConversion_table2->size_; ++k) {
            jint v = IOSCharArray_Get(ComAowagieTextPdfPdfEncodings_SymbolConversion_table2, k);
            if (v != 0) {
              [ComAowagieTextPdfPdfEncodings_SymbolConversion_t2 putWithInt:v withInt:k + 32];
            }
          }
        }
        J2OBJC_SET_INITIALIZED(ComAowagieTextPdfPdfEncodings_SymbolConversion)
      }
    }

@end


#line 666
void ComAowagieTextPdfPdfEncodings_SymbolConversion_initWithBoolean_(ComAowagieTextPdfPdfEncodings_SymbolConversion *self, jboolean symbol) {
  NSObject_init(self);
  
#line 667
  if (symbol) {
    self->translation_ = ComAowagieTextPdfPdfEncodings_SymbolConversion_t1;
  }
  else {
    
#line 670
    self->translation_ = ComAowagieTextPdfPdfEncodings_SymbolConversion_t2;
  }
}


#line 666
ComAowagieTextPdfPdfEncodings_SymbolConversion *new_ComAowagieTextPdfPdfEncodings_SymbolConversion_initWithBoolean_(jboolean symbol) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfEncodings_SymbolConversion, initWithBoolean_, symbol)
}


#line 666
ComAowagieTextPdfPdfEncodings_SymbolConversion *create_ComAowagieTextPdfPdfEncodings_SymbolConversion_initWithBoolean_(jboolean symbol) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfEncodings_SymbolConversion, initWithBoolean_, symbol)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfEncodings_SymbolConversion)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PdfEncodings.java"


#line 760
@implementation ComAowagieTextPdfPdfEncodings_SymbolTTConversion

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 760
- (instancetype)init {
  ComAowagieTextPdfPdfEncodings_SymbolTTConversion_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 762
- (IOSByteArray *)charToByteWithChar:(jchar)char1
                        withNSString:(NSString *)encoding {
  if ((char1 & (jint) 0xff00) == 0 || (char1 & (jint) 0xff00) == (jint) 0xf000) {
    return [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) char1 } count:1];
  }
  else {
    
#line 767
    return [IOSByteArray newArrayWithLength:0];
  }
}


#line 771
- (IOSByteArray *)charToByteWithNSString:(NSString *)text
                            withNSString:(NSString *)encoding {
  IOSCharArray *ch = [((NSString *) nil_chk(text)) java_toCharArray];
  IOSByteArray *b = [IOSByteArray newArrayWithLength:((IOSCharArray *) nil_chk(ch))->size_];
  jint ptr = 0;
  jint len = ch->size_;
  for (jint k = 0; k < len; ++k) {
    jchar c = IOSCharArray_Get(ch, k);
    if ((c & (jint) 0xff00) == 0 || (c & (jint) 0xff00) == (jint) 0xf000) {
      *IOSByteArray_GetRef(b, ptr++) = (jbyte) c;
    }
  }
  if (ptr == len) {
    return b;
  }
  IOSByteArray *b2 = [IOSByteArray newArrayWithLength:ptr];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, b2, 0, ptr);
  return b2;
}

- (NSString *)byteToCharWithByteArray:(IOSByteArray *)b
                         withNSString:(NSString *)encoding {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(charToByteWithChar:withNSString:);
  methods[2].selector = @selector(charToByteWithNSString:withNSString:);
  methods[3].selector = @selector(byteToCharWithByteArray:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "charToByte", "CLNSString;", "LNSString;LNSString;", "byteToChar", "[BLNSString;", "LComAowagieTextPdfPdfEncodings;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfEncodings_SymbolTTConversion = { "SymbolTTConversion", "com.aowagie.text.pdf", ptrTable, methods, NULL, 7, 0xa, 4, 0, 5, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfEncodings_SymbolTTConversion;
}

@end


#line 760
void ComAowagieTextPdfPdfEncodings_SymbolTTConversion_init(ComAowagieTextPdfPdfEncodings_SymbolTTConversion *self) {
  NSObject_init(self);
}


#line 760
ComAowagieTextPdfPdfEncodings_SymbolTTConversion *new_ComAowagieTextPdfPdfEncodings_SymbolTTConversion_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfEncodings_SymbolTTConversion, init)
}


#line 760
ComAowagieTextPdfPdfEncodings_SymbolTTConversion *create_ComAowagieTextPdfPdfEncodings_SymbolTTConversion_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfEncodings_SymbolTTConversion, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfEncodings_SymbolTTConversion)
