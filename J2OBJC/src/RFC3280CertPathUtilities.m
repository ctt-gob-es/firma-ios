//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jce/provider/RFC3280CertPathUtilities.java
//

#include "ASN1Encodable.h"
#include "ASN1EncodableVector.h"
#include "ASN1InputStream.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "ASN1String.h"
#include "ASN1TaggedObject.h"
#include "AnnotatedException.h"
#include "Arrays.h"
#include "AttributeTypeAndValue.h"
#include "BCCertStatus.h"
#include "BCStyle.h"
#include "BasicConstraints.h"
#include "CRLDistPoint.h"
#include "CRLReason.h"
#include "CertPathValidatorUtilities.h"
#include "DERSequence.h"
#include "DistributionPoint.h"
#include "DistributionPointName.h"
#include "ExtCertPathValidatorException.h"
#include "Extension.h"
#include "GeneralName.h"
#include "GeneralNames.h"
#include "GeneralSubtree.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IssuingDistributionPoint.h"
#include "J2ObjC_source.h"
#include "JcaJceHelper.h"
#include "NameConstraints.h"
#include "PKIXCRLStore.h"
#include "PKIXCRLStoreSelector.h"
#include "PKIXCRLUtil.h"
#include "PKIXCertPathBuilderSpi.h"
#include "PKIXCertStoreSelector.h"
#include "PKIXExtendedBuilderParameters.h"
#include "PKIXExtendedParameters.h"
#include "PKIXNameConstraintValidator.h"
#include "PKIXNameConstraintValidatorException.h"
#include "PKIXPolicyNode.h"
#include "PolicyInformation.h"
#include "PrincipalUtils.h"
#include "RDN.h"
#include "RFC3280CertPathUtilities.h"
#include "ReasonFlags.h"
#include "ReasonsMask.h"
#include "X500Name.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/math/BigInteger.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/CertPath.h"
#include "java/security/cert/CertPathBuilderException.h"
#include "java/security/cert/CertPathBuilderResult.h"
#include "java/security/cert/CertPathValidatorException.h"
#include "java/security/cert/CertificateExpiredException.h"
#include "java/security/cert/CertificateNotYetValidException.h"
#include "java/security/cert/PKIXCertPathChecker.h"
#include "java/security/cert/PolicyNode.h"
#include "java/security/cert/X509CRL.h"
#include "java/security/cert/X509CRLSelector.h"
#include "java/security/cert/X509CertSelector.h"
#include "java/security/cert/X509Certificate.h"
#include "java/security/cert/X509Extension.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"

#if !__has_feature(objc_arc)
#error "RFC3280CertPathUtilities must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleJceProviderRFC3280CertPathUtilities ()

/*!
 @brief Checks a distribution point for revocation information for the
  certificate <code>cert</code>.
 @param dp The distribution point to consider.
 @param paramsPKIX PKIX parameters.
 @param cert Certificate to check if it is revoked.
 @param validDate The date when the certificate revocation status should be                            checked.
 @param defaultCRLSignCert The issuer certificate of the certificate  <code> cert </code>
  .
 @param defaultCRLSignKey The public key of the issuer certificate                            
  <code> defaultCRLSignCert </code> .
 @param certStatus The current certificate revocation status.
 @param reasonMask The reasons mask which is already checked.
 @param certPathCerts The certificates of the certification path.
 @throw AnnotatedExceptionif the certificate is revoked or the status cannot be checked
                             or some error occurs.
 */
+ (void)checkCRLWithOrgSpongycastleAsn1X509DistributionPoint:(OrgSpongycastleAsn1X509DistributionPoint *)dp
             withOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX
                         withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                            withJavaUtilDate:(JavaUtilDate *)validDate
                         withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)defaultCRLSignCert
                                   withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)defaultCRLSignKey
                  withOrgSpongycastleJceProviderBCCertStatus:(OrgSpongycastleJceProviderBCCertStatus *)certStatus
                   withOrgSpongycastleJceProviderReasonsMask:(OrgSpongycastleJceProviderReasonsMask *)reasonMask
                                            withJavaUtilList:(id<JavaUtilList>)certPathCerts
                   withOrgSpongycastleJcajceUtilJcaJceHelper:(id<OrgSpongycastleJcajceUtilJcaJceHelper>)helper;

@end

inline OrgSpongycastleJceProviderPKIXCRLUtil *OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_CRL_UTIL(void);
static OrgSpongycastleJceProviderPKIXCRLUtil *OrgSpongycastleJceProviderRFC3280CertPathUtilities_CRL_UTIL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, CRL_UTIL, OrgSpongycastleJceProviderPKIXCRLUtil *)

__attribute__((unused)) static void OrgSpongycastleJceProviderRFC3280CertPathUtilities_checkCRLWithOrgSpongycastleAsn1X509DistributionPoint_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withOrgSpongycastleJceProviderBCCertStatus_withOrgSpongycastleJceProviderReasonsMask_withJavaUtilList_withOrgSpongycastleJcajceUtilJcaJceHelper_(OrgSpongycastleAsn1X509DistributionPoint *dp, OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertX509Certificate *cert, JavaUtilDate *validDate, JavaSecurityCertX509Certificate *defaultCRLSignCert, id<JavaSecurityPublicKey> defaultCRLSignKey, OrgSpongycastleJceProviderBCCertStatus *certStatus, OrgSpongycastleJceProviderReasonsMask *reasonMask, id<JavaUtilList> certPathCerts, id<OrgSpongycastleJcajceUtilJcaJceHelper> helper);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jce/provider/RFC3280CertPathUtilities.java"

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleJceProviderRFC3280CertPathUtilities)

NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES;
NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_POLICY_MAPPINGS;
NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_INHIBIT_ANY_POLICY;
NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT;
NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_FRESHEST_CRL;
NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_DELTA_CRL_INDICATOR;
NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_POLICY_CONSTRAINTS;
NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_BASIC_CONSTRAINTS;
NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_CRL_DISTRIBUTION_POINTS;
NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_SUBJECT_ALTERNATIVE_NAME;
NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_NAME_CONSTRAINTS;
NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_AUTHORITY_KEY_IDENTIFIER;
NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_KEY_USAGE;
NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_CRL_NUMBER;
NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY = @"2.5.29.32.0";
IOSObjectArray *OrgSpongycastleJceProviderRFC3280CertPathUtilities_crlReasons;


#line 66
@implementation OrgSpongycastleJceProviderRFC3280CertPathUtilities


#line 66
- (instancetype)initPackagePrivate {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initPackagePrivate(self);
  return self;
}


#line 101
+ (void)processCRLB2WithOrgSpongycastleAsn1X509DistributionPoint:(OrgSpongycastleAsn1X509DistributionPoint *)dp
                                                          withId:(id)cert
                                     withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLB2WithOrgSpongycastleAsn1X509DistributionPoint_withId_withJavaSecurityCertX509CRL_(dp, cert, crl);
}


#line 285
+ (void)processCRLB1WithOrgSpongycastleAsn1X509DistributionPoint:(OrgSpongycastleAsn1X509DistributionPoint *)dp
                                                          withId:(id)cert
                                     withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLB1WithOrgSpongycastleAsn1X509DistributionPoint_withId_withJavaSecurityCertX509CRL_(dp, cert, crl);
}


#line 356
+ (OrgSpongycastleJceProviderReasonsMask *)processCRLDWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                                     withOrgSpongycastleAsn1X509DistributionPoint:(OrgSpongycastleAsn1X509DistributionPoint *)dp {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLDWithJavaSecurityCertX509CRL_withOrgSpongycastleAsn1X509DistributionPoint_(crl, dp);
}


#line 446
+ (id<JavaUtilSet>)processCRLFWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                                                   withId:(id)cert
                      withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)defaultCRLSignCert
                                withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)defaultCRLSignKey
          withOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                         withJavaUtilList:(id<JavaUtilList>)certPathCerts
                withOrgSpongycastleJcajceUtilJcaJceHelper:(id<OrgSpongycastleJcajceUtilJcaJceHelper>)helper {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLFWithJavaSecurityCertX509CRL_withId_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaUtilList_withOrgSpongycastleJcajceUtilJcaJceHelper_(crl, cert, defaultCRLSignCert, defaultCRLSignKey, paramsPKIX, certPathCerts, helper);
}


#line 584
+ (id<JavaSecurityPublicKey>)processCRLGWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                                                    withJavaUtilSet:(id<JavaUtilSet>)keys {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLGWithJavaSecurityCertX509CRL_withJavaUtilSet_(crl, keys);
}


#line 606
+ (JavaSecurityCertX509CRL *)processCRLHWithJavaUtilSet:(id<JavaUtilSet>)deltacrls
                              withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLHWithJavaUtilSet_withJavaSecurityPublicKey_(deltacrls, key);
}


#line 634
+ (id<JavaUtilSet>)processCRLA1iWithJavaUtilDate:(JavaUtilDate *)currentDate
 withOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX
             withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                     withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLA1iWithJavaUtilDate_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaSecurityCertX509CRL_(currentDate, paramsPKIX, cert, crl);
}


#line 696
+ (IOSObjectArray *)processCRLA1iiWithJavaUtilDate:(JavaUtilDate *)currentDate
   withOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX
               withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                       withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLA1iiWithJavaUtilDate_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaSecurityCertX509CRL_(currentDate, paramsPKIX, cert, crl);
}


#line 755
+ (void)processCRLCWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)deltaCRL
                   withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)completeCRL
withOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)pkixParams {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLCWithJavaSecurityCertX509CRL_withJavaSecurityCertX509CRL_withOrgSpongycastleJcajcePKIXExtendedParameters_(deltaCRL, completeCRL, pkixParams);
}


#line 861
+ (void)processCRLIWithJavaUtilDate:(JavaUtilDate *)validDate
        withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)deltacrl
                             withId:(id)cert
withOrgSpongycastleJceProviderBCCertStatus:(OrgSpongycastleJceProviderBCCertStatus *)certStatus
withOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)pkixParams {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLIWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withOrgSpongycastleJceProviderBCCertStatus_withOrgSpongycastleJcajcePKIXExtendedParameters_(validDate, deltacrl, cert, certStatus, pkixParams);
}


#line 875
+ (void)processCRLJWithJavaUtilDate:(JavaUtilDate *)validDate
        withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)completecrl
                             withId:(id)cert
withOrgSpongycastleJceProviderBCCertStatus:(OrgSpongycastleJceProviderBCCertStatus *)certStatus {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLJWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withOrgSpongycastleJceProviderBCCertStatus_(validDate, completecrl, cert, certStatus);
}


#line 888
+ (OrgSpongycastleJceProviderPKIXPolicyNode *)prepareCertBWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                                               withInt:(jint)index
                                                                 withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                          withOrgSpongycastleJceProviderPKIXPolicyNode:(OrgSpongycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                                                               withInt:(jint)policyMapping {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareCertBWithJavaSecurityCertCertPath_withInt_withJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_withInt_(certPath, index, policyNodes, validPolicyTree, policyMapping);
}


#line 1075
+ (void)prepareNextCertAWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertAWithJavaSecurityCertCertPath_withInt_(certPath, index);
}


#line 1133
+ (void)processCertFWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                         withInt:(jint)index
    withOrgSpongycastleJceProviderPKIXPolicyNode:(OrgSpongycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                         withInt:(jint)explicitPolicy {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertFWithJavaSecurityCertCertPath_withInt_withOrgSpongycastleJceProviderPKIXPolicyNode_withInt_(certPath, index, validPolicyTree, explicitPolicy);
}


#line 1150
+ (OrgSpongycastleJceProviderPKIXPolicyNode *)processCertEWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                                               withInt:(jint)index
                                          withOrgSpongycastleJceProviderPKIXPolicyNode:(OrgSpongycastleJceProviderPKIXPolicyNode *)validPolicyTree {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertEWithJavaSecurityCertCertPath_withInt_withOrgSpongycastleJceProviderPKIXPolicyNode_(certPath, index, validPolicyTree);
}


#line 1179
+ (void)processCertBCWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                          withInt:(jint)index
withOrgSpongycastleJceProviderPKIXNameConstraintValidator:(OrgSpongycastleJceProviderPKIXNameConstraintValidator *)nameConstraintValidator {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertBCWithJavaSecurityCertCertPath_withInt_withOrgSpongycastleJceProviderPKIXNameConstraintValidator_(certPath, index, nameConstraintValidator);
}


#line 1277
+ (OrgSpongycastleJceProviderPKIXPolicyNode *)processCertDWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                                               withInt:(jint)index
                                                                       withJavaUtilSet:(id<JavaUtilSet>)acceptablePolicies
                                          withOrgSpongycastleJceProviderPKIXPolicyNode:(OrgSpongycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                                                 withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                                                               withInt:(jint)inhibitAnyPolicy {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertDWithJavaSecurityCertCertPath_withInt_withJavaUtilSet_withOrgSpongycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withInt_(certPath, index, acceptablePolicies, validPolicyTree, policyNodes, inhibitAnyPolicy);
}


#line 1479
+ (void)processCertAWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
 withOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                         withInt:(jint)index
                       withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)workingPublicKey
                                     withBoolean:(jboolean)verificationAlreadyPerformed
             withOrgSpongycastleAsn1X500X500Name:(OrgSpongycastleAsn1X500X500Name *)workingIssuerName
             withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)sign
       withOrgSpongycastleJcajceUtilJcaJceHelper:(id<OrgSpongycastleJcajceUtilJcaJceHelper>)helper {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertAWithJavaSecurityCertCertPath_withOrgSpongycastleJcajcePKIXExtendedParameters_withInt_withJavaSecurityPublicKey_withBoolean_withOrgSpongycastleAsn1X500X500Name_withJavaSecurityCertX509Certificate_withOrgSpongycastleJcajceUtilJcaJceHelper_(certPath, paramsPKIX, index, workingPublicKey, verificationAlreadyPerformed, workingIssuerName, sign, helper);
}


#line 1562
+ (jint)prepareNextCertI1WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)explicitPolicy {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertI1WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, explicitPolicy);
}


#line 1617
+ (jint)prepareNextCertI2WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)policyMapping {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertI2WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, policyMapping);
}


#line 1671
+ (void)prepareNextCertGWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
withOrgSpongycastleJceProviderPKIXNameConstraintValidator:(OrgSpongycastleJceProviderPKIXNameConstraintValidator *)nameConstraintValidator {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertGWithJavaSecurityCertCertPath_withInt_withOrgSpongycastleJceProviderPKIXNameConstraintValidator_(certPath, index, nameConstraintValidator);
}


#line 1755
+ (void)checkCRLWithOrgSpongycastleAsn1X509DistributionPoint:(OrgSpongycastleAsn1X509DistributionPoint *)dp
             withOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX
                         withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                            withJavaUtilDate:(JavaUtilDate *)validDate
                         withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)defaultCRLSignCert
                                   withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)defaultCRLSignKey
                  withOrgSpongycastleJceProviderBCCertStatus:(OrgSpongycastleJceProviderBCCertStatus *)certStatus
                   withOrgSpongycastleJceProviderReasonsMask:(OrgSpongycastleJceProviderReasonsMask *)reasonMask
                                            withJavaUtilList:(id<JavaUtilList>)certPathCerts
                   withOrgSpongycastleJcajceUtilJcaJceHelper:(id<OrgSpongycastleJcajceUtilJcaJceHelper>)helper {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_checkCRLWithOrgSpongycastleAsn1X509DistributionPoint_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withOrgSpongycastleJceProviderBCCertStatus_withOrgSpongycastleJceProviderReasonsMask_withJavaUtilList_withOrgSpongycastleJcajceUtilJcaJceHelper_(dp, paramsPKIX, cert, validDate, defaultCRLSignCert, defaultCRLSignKey, certStatus, reasonMask, certPathCerts, helper);
}


#line 1934
+ (void)checkCRLsWithOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX
                             withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                withJavaUtilDate:(JavaUtilDate *)validDate
                             withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)sign
                                       withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)workingPublicKey
                                                withJavaUtilList:(id<JavaUtilList>)certPathCerts
                       withOrgSpongycastleJcajceUtilJcaJceHelper:(id<OrgSpongycastleJcajceUtilJcaJceHelper>)helper {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_checkCRLsWithOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withJavaUtilList_withOrgSpongycastleJcajceUtilJcaJceHelper_(paramsPKIX, cert, validDate, sign, workingPublicKey, certPathCerts, helper);
}


#line 2069
+ (jint)prepareNextCertJWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
                                             withInt:(jint)inhibitAnyPolicy {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertJWithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, inhibitAnyPolicy);
}


#line 2104
+ (void)prepareNextCertKWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertKWithJavaSecurityCertCertPath_withInt_(certPath, index);
}


#line 2138
+ (jint)prepareNextCertLWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
                                             withInt:(jint)maxPathLength {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertLWithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, maxPathLength);
}


#line 2161
+ (jint)prepareNextCertMWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
                                             withInt:(jint)maxPathLength {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertMWithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, maxPathLength);
}


#line 2201
+ (void)prepareNextCertNWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertNWithJavaSecurityCertCertPath_withInt_(certPath, index);
}


#line 2222
+ (void)prepareNextCertOWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
                                     withJavaUtilSet:(id<JavaUtilSet>)criticalExtensions
                                    withJavaUtilList:(id<JavaUtilList>)pathCheckers {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertOWithJavaSecurityCertCertPath_withInt_withJavaUtilSet_withJavaUtilList_(certPath, index, criticalExtensions, pathCheckers);
}


#line 2255
+ (jint)prepareNextCertH1WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)explicitPolicy {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH1WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, explicitPolicy);
}


#line 2278
+ (jint)prepareNextCertH2WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)policyMapping {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH2WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, policyMapping);
}


#line 2301
+ (jint)prepareNextCertH3WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)inhibitAnyPolicy {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH3WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, inhibitAnyPolicy);
}


#line 2338
+ (jint)wrapupCertAWithInt:(jint)explicitPolicy
withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_wrapupCertAWithInt_withJavaSecurityCertX509Certificate_(explicitPolicy, cert);
}


#line 2352
+ (jint)wrapupCertBWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                        withInt:(jint)index
                                        withInt:(jint)explicitPolicy {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_wrapupCertBWithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, explicitPolicy);
}


#line 2405
+ (void)wrapupCertFWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                        withInt:(jint)index
                               withJavaUtilList:(id<JavaUtilList>)pathCheckers
                                withJavaUtilSet:(id<JavaUtilSet>)criticalExtensions {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_wrapupCertFWithJavaSecurityCertCertPath_withInt_withJavaUtilList_withJavaUtilSet_(certPath, index, pathCheckers, criticalExtensions);
}


#line 2436
+ (OrgSpongycastleJceProviderPKIXPolicyNode *)wrapupCertGWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                      withOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                                                      withJavaUtilSet:(id<JavaUtilSet>)userInitialPolicySet
                                                                              withInt:(jint)index
                                                                withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                         withOrgSpongycastleJceProviderPKIXPolicyNode:(OrgSpongycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                                                      withJavaUtilSet:(id<JavaUtilSet>)acceptablePolicies {
  return OrgSpongycastleJceProviderRFC3280CertPathUtilities_wrapupCertGWithJavaSecurityCertCertPath_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaUtilSet_withInt_withJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_withJavaUtilSet_(certPath, paramsPKIX, userInitialPolicySet, index, policyNodes, validPolicyTree, acceptablePolicies);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0xc, 3, 1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleJceProviderReasonsMask;", 0xc, 4, 5, 2, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0xc, 6, 7, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0xc, 8, 9, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509CRL;", 0xc, 10, 11, 2, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0xc, 12, 13, 2, -1, -1, -1 },
    { NULL, "[LJavaUtilSet;", 0xc, 14, 13, 2, -1, -1, -1 },
    { NULL, "V", 0xc, 15, 16, 2, -1, -1, -1 },
    { NULL, "V", 0xc, 17, 18, 2, -1, -1, -1 },
    { NULL, "V", 0xc, 19, 20, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleJceProviderPKIXPolicyNode;", 0xc, 21, 22, 23, -1, -1, -1 },
    { NULL, "V", 0xc, 24, 25, 23, -1, -1, -1 },
    { NULL, "V", 0xc, 26, 27, 23, -1, -1, -1 },
    { NULL, "LOrgSpongycastleJceProviderPKIXPolicyNode;", 0xc, 28, 29, 23, -1, -1, -1 },
    { NULL, "V", 0xc, 30, 31, 23, -1, -1, -1 },
    { NULL, "LOrgSpongycastleJceProviderPKIXPolicyNode;", 0xc, 32, 33, 23, -1, -1, -1 },
    { NULL, "V", 0xc, 34, 35, 36, -1, -1, -1 },
    { NULL, "I", 0xc, 37, 38, 23, -1, -1, -1 },
    { NULL, "I", 0xc, 39, 38, 23, -1, -1, -1 },
    { NULL, "V", 0xc, 40, 31, 23, -1, -1, -1 },
    { NULL, "V", 0xa, 41, 42, 2, -1, -1, -1 },
    { NULL, "V", 0xc, 43, 44, 2, -1, -1, -1 },
    { NULL, "I", 0xc, 45, 38, 23, -1, -1, -1 },
    { NULL, "V", 0xc, 46, 25, 23, -1, -1, -1 },
    { NULL, "I", 0xc, 47, 38, 23, -1, -1, -1 },
    { NULL, "I", 0xc, 48, 38, 23, -1, -1, -1 },
    { NULL, "V", 0xc, 49, 25, 23, -1, -1, -1 },
    { NULL, "V", 0xc, 50, 51, 23, -1, -1, -1 },
    { NULL, "I", 0xc, 52, 38, -1, -1, -1, -1 },
    { NULL, "I", 0xc, 53, 38, -1, -1, -1, -1 },
    { NULL, "I", 0xc, 54, 38, -1, -1, -1, -1 },
    { NULL, "I", 0xc, 55, 56, -1, -1, -1, -1 },
    { NULL, "I", 0xc, 57, 38, 23, -1, -1, -1 },
    { NULL, "V", 0xc, 58, 59, 23, -1, -1, -1 },
    { NULL, "LOrgSpongycastleJceProviderPKIXPolicyNode;", 0xc, 60, 61, 23, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(processCRLB2WithOrgSpongycastleAsn1X509DistributionPoint:withId:withJavaSecurityCertX509CRL:);
  methods[2].selector = @selector(processCRLB1WithOrgSpongycastleAsn1X509DistributionPoint:withId:withJavaSecurityCertX509CRL:);
  methods[3].selector = @selector(processCRLDWithJavaSecurityCertX509CRL:withOrgSpongycastleAsn1X509DistributionPoint:);
  methods[4].selector = @selector(processCRLFWithJavaSecurityCertX509CRL:withId:withJavaSecurityCertX509Certificate:withJavaSecurityPublicKey:withOrgSpongycastleJcajcePKIXExtendedParameters:withJavaUtilList:withOrgSpongycastleJcajceUtilJcaJceHelper:);
  methods[5].selector = @selector(processCRLGWithJavaSecurityCertX509CRL:withJavaUtilSet:);
  methods[6].selector = @selector(processCRLHWithJavaUtilSet:withJavaSecurityPublicKey:);
  methods[7].selector = @selector(processCRLA1iWithJavaUtilDate:withOrgSpongycastleJcajcePKIXExtendedParameters:withJavaSecurityCertX509Certificate:withJavaSecurityCertX509CRL:);
  methods[8].selector = @selector(processCRLA1iiWithJavaUtilDate:withOrgSpongycastleJcajcePKIXExtendedParameters:withJavaSecurityCertX509Certificate:withJavaSecurityCertX509CRL:);
  methods[9].selector = @selector(processCRLCWithJavaSecurityCertX509CRL:withJavaSecurityCertX509CRL:withOrgSpongycastleJcajcePKIXExtendedParameters:);
  methods[10].selector = @selector(processCRLIWithJavaUtilDate:withJavaSecurityCertX509CRL:withId:withOrgSpongycastleJceProviderBCCertStatus:withOrgSpongycastleJcajcePKIXExtendedParameters:);
  methods[11].selector = @selector(processCRLJWithJavaUtilDate:withJavaSecurityCertX509CRL:withId:withOrgSpongycastleJceProviderBCCertStatus:);
  methods[12].selector = @selector(prepareCertBWithJavaSecurityCertCertPath:withInt:withJavaUtilListArray:withOrgSpongycastleJceProviderPKIXPolicyNode:withInt:);
  methods[13].selector = @selector(prepareNextCertAWithJavaSecurityCertCertPath:withInt:);
  methods[14].selector = @selector(processCertFWithJavaSecurityCertCertPath:withInt:withOrgSpongycastleJceProviderPKIXPolicyNode:withInt:);
  methods[15].selector = @selector(processCertEWithJavaSecurityCertCertPath:withInt:withOrgSpongycastleJceProviderPKIXPolicyNode:);
  methods[16].selector = @selector(processCertBCWithJavaSecurityCertCertPath:withInt:withOrgSpongycastleJceProviderPKIXNameConstraintValidator:);
  methods[17].selector = @selector(processCertDWithJavaSecurityCertCertPath:withInt:withJavaUtilSet:withOrgSpongycastleJceProviderPKIXPolicyNode:withJavaUtilListArray:withInt:);
  methods[18].selector = @selector(processCertAWithJavaSecurityCertCertPath:withOrgSpongycastleJcajcePKIXExtendedParameters:withInt:withJavaSecurityPublicKey:withBoolean:withOrgSpongycastleAsn1X500X500Name:withJavaSecurityCertX509Certificate:withOrgSpongycastleJcajceUtilJcaJceHelper:);
  methods[19].selector = @selector(prepareNextCertI1WithJavaSecurityCertCertPath:withInt:withInt:);
  methods[20].selector = @selector(prepareNextCertI2WithJavaSecurityCertCertPath:withInt:withInt:);
  methods[21].selector = @selector(prepareNextCertGWithJavaSecurityCertCertPath:withInt:withOrgSpongycastleJceProviderPKIXNameConstraintValidator:);
  methods[22].selector = @selector(checkCRLWithOrgSpongycastleAsn1X509DistributionPoint:withOrgSpongycastleJcajcePKIXExtendedParameters:withJavaSecurityCertX509Certificate:withJavaUtilDate:withJavaSecurityCertX509Certificate:withJavaSecurityPublicKey:withOrgSpongycastleJceProviderBCCertStatus:withOrgSpongycastleJceProviderReasonsMask:withJavaUtilList:withOrgSpongycastleJcajceUtilJcaJceHelper:);
  methods[23].selector = @selector(checkCRLsWithOrgSpongycastleJcajcePKIXExtendedParameters:withJavaSecurityCertX509Certificate:withJavaUtilDate:withJavaSecurityCertX509Certificate:withJavaSecurityPublicKey:withJavaUtilList:withOrgSpongycastleJcajceUtilJcaJceHelper:);
  methods[24].selector = @selector(prepareNextCertJWithJavaSecurityCertCertPath:withInt:withInt:);
  methods[25].selector = @selector(prepareNextCertKWithJavaSecurityCertCertPath:withInt:);
  methods[26].selector = @selector(prepareNextCertLWithJavaSecurityCertCertPath:withInt:withInt:);
  methods[27].selector = @selector(prepareNextCertMWithJavaSecurityCertCertPath:withInt:withInt:);
  methods[28].selector = @selector(prepareNextCertNWithJavaSecurityCertCertPath:withInt:);
  methods[29].selector = @selector(prepareNextCertOWithJavaSecurityCertCertPath:withInt:withJavaUtilSet:withJavaUtilList:);
  methods[30].selector = @selector(prepareNextCertH1WithJavaSecurityCertCertPath:withInt:withInt:);
  methods[31].selector = @selector(prepareNextCertH2WithJavaSecurityCertCertPath:withInt:withInt:);
  methods[32].selector = @selector(prepareNextCertH3WithJavaSecurityCertCertPath:withInt:withInt:);
  methods[33].selector = @selector(wrapupCertAWithInt:withJavaSecurityCertX509Certificate:);
  methods[34].selector = @selector(wrapupCertBWithJavaSecurityCertCertPath:withInt:withInt:);
  methods[35].selector = @selector(wrapupCertFWithJavaSecurityCertCertPath:withInt:withJavaUtilList:withJavaUtilSet:);
  methods[36].selector = @selector(wrapupCertGWithJavaSecurityCertCertPath:withOrgSpongycastleJcajcePKIXExtendedParameters:withJavaUtilSet:withInt:withJavaUtilListArray:withOrgSpongycastleJceProviderPKIXPolicyNode:withJavaUtilSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CRL_UTIL", "LOrgSpongycastleJceProviderPKIXCRLUtil;", .constantValue.asLong = 0, 0x1a, -1, 62, -1, -1 },
    { "CERTIFICATE_POLICIES", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 63, -1, -1 },
    { "POLICY_MAPPINGS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 64, -1, -1 },
    { "INHIBIT_ANY_POLICY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 65, -1, -1 },
    { "ISSUING_DISTRIBUTION_POINT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 66, -1, -1 },
    { "FRESHEST_CRL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 67, -1, -1 },
    { "DELTA_CRL_INDICATOR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 68, -1, -1 },
    { "POLICY_CONSTRAINTS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 69, -1, -1 },
    { "BASIC_CONSTRAINTS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 70, -1, -1 },
    { "CRL_DISTRIBUTION_POINTS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 71, -1, -1 },
    { "SUBJECT_ALTERNATIVE_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 72, -1, -1 },
    { "NAME_CONSTRAINTS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 73, -1, -1 },
    { "AUTHORITY_KEY_IDENTIFIER", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 74, -1, -1 },
    { "KEY_USAGE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 75, -1, -1 },
    { "CRL_NUMBER", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 76, -1, -1 },
    { "ANY_POLICY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 77, -1, -1 },
    { "KEY_CERT_SIGN", "I", .constantValue.asInt = OrgSpongycastleJceProviderRFC3280CertPathUtilities_KEY_CERT_SIGN, 0x1c, -1, -1, -1, -1 },
    { "CRL_SIGN", "I", .constantValue.asInt = OrgSpongycastleJceProviderRFC3280CertPathUtilities_CRL_SIGN, 0x1c, -1, -1, -1, -1 },
    { "crlReasons", "[LNSString;", .constantValue.asLong = 0, 0x1c, -1, 78, -1, -1 },
  };
  static const void *ptrTable[] = { "processCRLB2", "LOrgSpongycastleAsn1X509DistributionPoint;LNSObject;LJavaSecurityCertX509CRL;", "LOrgSpongycastleJceProviderAnnotatedException;", "processCRLB1", "processCRLD", "LJavaSecurityCertX509CRL;LOrgSpongycastleAsn1X509DistributionPoint;", "processCRLF", "LJavaSecurityCertX509CRL;LNSObject;LJavaSecurityCertX509Certificate;LJavaSecurityPublicKey;LOrgSpongycastleJcajcePKIXExtendedParameters;LJavaUtilList;LOrgSpongycastleJcajceUtilJcaJceHelper;", "processCRLG", "LJavaSecurityCertX509CRL;LJavaUtilSet;", "processCRLH", "LJavaUtilSet;LJavaSecurityPublicKey;", "processCRLA1i", "LJavaUtilDate;LOrgSpongycastleJcajcePKIXExtendedParameters;LJavaSecurityCertX509Certificate;LJavaSecurityCertX509CRL;", "processCRLA1ii", "processCRLC", "LJavaSecurityCertX509CRL;LJavaSecurityCertX509CRL;LOrgSpongycastleJcajcePKIXExtendedParameters;", "processCRLI", "LJavaUtilDate;LJavaSecurityCertX509CRL;LNSObject;LOrgSpongycastleJceProviderBCCertStatus;LOrgSpongycastleJcajcePKIXExtendedParameters;", "processCRLJ", "LJavaUtilDate;LJavaSecurityCertX509CRL;LNSObject;LOrgSpongycastleJceProviderBCCertStatus;", "prepareCertB", "LJavaSecurityCertCertPath;I[LJavaUtilList;LOrgSpongycastleJceProviderPKIXPolicyNode;I", "LJavaSecurityCertCertPathValidatorException;", "prepareNextCertA", "LJavaSecurityCertCertPath;I", "processCertF", "LJavaSecurityCertCertPath;ILOrgSpongycastleJceProviderPKIXPolicyNode;I", "processCertE", "LJavaSecurityCertCertPath;ILOrgSpongycastleJceProviderPKIXPolicyNode;", "processCertBC", "LJavaSecurityCertCertPath;ILOrgSpongycastleJceProviderPKIXNameConstraintValidator;", "processCertD", "LJavaSecurityCertCertPath;ILJavaUtilSet;LOrgSpongycastleJceProviderPKIXPolicyNode;[LJavaUtilList;I", "processCertA", "LJavaSecurityCertCertPath;LOrgSpongycastleJcajcePKIXExtendedParameters;ILJavaSecurityPublicKey;ZLOrgSpongycastleAsn1X500X500Name;LJavaSecurityCertX509Certificate;LOrgSpongycastleJcajceUtilJcaJceHelper;", "LOrgSpongycastleJceExceptionExtCertPathValidatorException;", "prepareNextCertI1", "LJavaSecurityCertCertPath;II", "prepareNextCertI2", "prepareNextCertG", "checkCRL", "LOrgSpongycastleAsn1X509DistributionPoint;LOrgSpongycastleJcajcePKIXExtendedParameters;LJavaSecurityCertX509Certificate;LJavaUtilDate;LJavaSecurityCertX509Certificate;LJavaSecurityPublicKey;LOrgSpongycastleJceProviderBCCertStatus;LOrgSpongycastleJceProviderReasonsMask;LJavaUtilList;LOrgSpongycastleJcajceUtilJcaJceHelper;", "checkCRLs", "LOrgSpongycastleJcajcePKIXExtendedParameters;LJavaSecurityCertX509Certificate;LJavaUtilDate;LJavaSecurityCertX509Certificate;LJavaSecurityPublicKey;LJavaUtilList;LOrgSpongycastleJcajceUtilJcaJceHelper;", "prepareNextCertJ", "prepareNextCertK", "prepareNextCertL", "prepareNextCertM", "prepareNextCertN", "prepareNextCertO", "LJavaSecurityCertCertPath;ILJavaUtilSet;LJavaUtilList;", "prepareNextCertH1", "prepareNextCertH2", "prepareNextCertH3", "wrapupCertA", "ILJavaSecurityCertX509Certificate;", "wrapupCertB", "wrapupCertF", "LJavaSecurityCertCertPath;ILJavaUtilList;LJavaUtilSet;", "wrapupCertG", "LJavaSecurityCertCertPath;LOrgSpongycastleJcajcePKIXExtendedParameters;LJavaUtilSet;I[LJavaUtilList;LOrgSpongycastleJceProviderPKIXPolicyNode;LJavaUtilSet;", &OrgSpongycastleJceProviderRFC3280CertPathUtilities_CRL_UTIL, &OrgSpongycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES, &OrgSpongycastleJceProviderRFC3280CertPathUtilities_POLICY_MAPPINGS, &OrgSpongycastleJceProviderRFC3280CertPathUtilities_INHIBIT_ANY_POLICY, &OrgSpongycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT, &OrgSpongycastleJceProviderRFC3280CertPathUtilities_FRESHEST_CRL, &OrgSpongycastleJceProviderRFC3280CertPathUtilities_DELTA_CRL_INDICATOR, &OrgSpongycastleJceProviderRFC3280CertPathUtilities_POLICY_CONSTRAINTS, &OrgSpongycastleJceProviderRFC3280CertPathUtilities_BASIC_CONSTRAINTS, &OrgSpongycastleJceProviderRFC3280CertPathUtilities_CRL_DISTRIBUTION_POINTS, &OrgSpongycastleJceProviderRFC3280CertPathUtilities_SUBJECT_ALTERNATIVE_NAME, &OrgSpongycastleJceProviderRFC3280CertPathUtilities_NAME_CONSTRAINTS, &OrgSpongycastleJceProviderRFC3280CertPathUtilities_AUTHORITY_KEY_IDENTIFIER, &OrgSpongycastleJceProviderRFC3280CertPathUtilities_KEY_USAGE, &OrgSpongycastleJceProviderRFC3280CertPathUtilities_CRL_NUMBER, &OrgSpongycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY, &OrgSpongycastleJceProviderRFC3280CertPathUtilities_crlReasons };
  static const J2ObjcClassInfo _OrgSpongycastleJceProviderRFC3280CertPathUtilities = { "RFC3280CertPathUtilities", "org.spongycastle.jce.provider", ptrTable, methods, fields, 7, 0x0, 37, 19, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleJceProviderRFC3280CertPathUtilities;
}

+ (void)initialize {
  if (self == [OrgSpongycastleJceProviderRFC3280CertPathUtilities class]) {
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_CRL_UTIL = new_OrgSpongycastleJceProviderPKIXCRLUtil_initPackagePrivate();
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES =
#line 390
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, certificatePolicies))) getId];
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_POLICY_MAPPINGS =
#line 392
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, policyMappings))) getId];
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_INHIBIT_ANY_POLICY =
#line 394
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, inhibitAnyPolicy))) getId];
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT =
#line 396
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, issuingDistributionPoint))) getId];
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_FRESHEST_CRL =
#line 398
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, freshestCRL))) getId];
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_DELTA_CRL_INDICATOR =
#line 400
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, deltaCRLIndicator))) getId];
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_POLICY_CONSTRAINTS =
#line 402
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, policyConstraints))) getId];
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_BASIC_CONSTRAINTS =
#line 404
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, basicConstraints))) getId];
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_CRL_DISTRIBUTION_POINTS =
#line 406
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, cRLDistributionPoints))) getId];
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_SUBJECT_ALTERNATIVE_NAME =
#line 408
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, subjectAlternativeName))) getId];
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_NAME_CONSTRAINTS =
#line 410
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, nameConstraints))) getId];
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_AUTHORITY_KEY_IDENTIFIER =
#line 412
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, authorityKeyIdentifier))) getId];
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_KEY_USAGE =
#line 414
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, keyUsage))) getId];
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_CRL_NUMBER =
#line 416
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, cRLNumber))) getId];
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_crlReasons = [IOSObjectArray newArrayWithObjects:(id[]){
#line 2326
      @"unspecified",
#line 2327
      @"keyCompromise",
#line 2328
      @"cACompromise",
#line 2329
      @"affiliationChanged",
#line 2330
      @"superseded",
#line 2331
      @"cessationOfOperation",
#line 2332
      @"certificateHold",
#line 2333
      @"unknown",
#line 2334
      @"removeFromCRL",
#line 2335
      @"privilegeWithdrawn",
#line 2336
      @"aACompromise" } count:11 type:NSString_class_()];
      J2OBJC_SET_INITIALIZED(OrgSpongycastleJceProviderRFC3280CertPathUtilities)
    }
  }

@end


#line 66
void OrgSpongycastleJceProviderRFC3280CertPathUtilities_initPackagePrivate(OrgSpongycastleJceProviderRFC3280CertPathUtilities *self) {
  NSObject_init(self);
}


#line 66
OrgSpongycastleJceProviderRFC3280CertPathUtilities *new_OrgSpongycastleJceProviderRFC3280CertPathUtilities_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, initPackagePrivate)
}


#line 66
OrgSpongycastleJceProviderRFC3280CertPathUtilities *create_OrgSpongycastleJceProviderRFC3280CertPathUtilities_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, initPackagePrivate)
}


#line 101
void OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLB2WithOrgSpongycastleAsn1X509DistributionPoint_withId_withJavaSecurityCertX509CRL_(OrgSpongycastleAsn1X509DistributionPoint *dp, id cert, JavaSecurityCertX509CRL *crl) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 107
  OrgSpongycastleAsn1X509IssuingDistributionPoint *idp = nil;
  @try {
    
#line 110
    idp = OrgSpongycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(crl,
#line 111
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT));
  }
  @catch (JavaLangException *e) {
    
#line 115
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Issuing distribution point extension could not be decoded.", e);
  }
  
#line 119
  if (idp != nil) {
    
#line 121
    if ([idp getDistributionPoint] != nil) {
      
#line 124
      OrgSpongycastleAsn1X509DistributionPointName *dpName = [((OrgSpongycastleAsn1X509IssuingDistributionPoint *) nil_chk(OrgSpongycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_(idp))) getDistributionPoint];
      id<JavaUtilList> names = new_JavaUtilArrayList_init();
      
#line 127
      if ([((OrgSpongycastleAsn1X509DistributionPointName *) nil_chk(dpName)) getType] == OrgSpongycastleAsn1X509DistributionPointName_FULL_NAME) {
        
#line 129
        IOSObjectArray *genNames = [((OrgSpongycastleAsn1X509GeneralNames *) nil_chk(OrgSpongycastleAsn1X509GeneralNames_getInstanceWithId_([dpName getName]))) getNames];
        for (jint j = 0; j < ((IOSObjectArray *) nil_chk(genNames))->size_; j++) {
          
#line 132
          [names addWithId:IOSObjectArray_Get(genNames, j)];
        }
      }
      if ([dpName getType] == OrgSpongycastleAsn1X509DistributionPointName_NAME_RELATIVE_TO_CRL_ISSUER) {
        
#line 137
        OrgSpongycastleAsn1ASN1EncodableVector *vec = new_OrgSpongycastleAsn1ASN1EncodableVector_init();
        @try {
          
#line 140
          id<JavaUtilEnumeration> e = [((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_(OrgSpongycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(crl)))) getObjects];
          while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
            
#line 143
            [vec addWithOrgSpongycastleAsn1ASN1Encodable:(id<OrgSpongycastleAsn1ASN1Encodable>) cast_check([e nextElement], OrgSpongycastleAsn1ASN1Encodable_class_())];
          }
        }
        @catch (JavaLangException *e) {
          
#line 148
          @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Could not read CRL issuer.", e);
        }
        [vec addWithOrgSpongycastleAsn1ASN1Encodable:[dpName getName]];
        [names addWithId:new_OrgSpongycastleAsn1X509GeneralName_initWithOrgSpongycastleAsn1X500X500Name_(OrgSpongycastleAsn1X500X500Name_getInstanceWithId_(new_OrgSpongycastleAsn1DERSequence_initWithOrgSpongycastleAsn1ASN1EncodableVector_(vec)))];
      }
      jboolean matches = false;
      
#line 156
      if ([((OrgSpongycastleAsn1X509DistributionPoint *) nil_chk(dp)) getDistributionPoint] != nil) {
        
#line 158
        dpName = [dp getDistributionPoint];
        IOSObjectArray *genNames = nil;
        if ([((OrgSpongycastleAsn1X509DistributionPointName *) nil_chk(dpName)) getType] == OrgSpongycastleAsn1X509DistributionPointName_FULL_NAME) {
          
#line 162
          genNames = [((OrgSpongycastleAsn1X509GeneralNames *) nil_chk(OrgSpongycastleAsn1X509GeneralNames_getInstanceWithId_([dpName getName]))) getNames];
        }
        if ([dpName getType] == OrgSpongycastleAsn1X509DistributionPointName_NAME_RELATIVE_TO_CRL_ISSUER) {
          
#line 166
          if ([dp getCRLIssuer] != nil) {
            
#line 168
            genNames = [((OrgSpongycastleAsn1X509GeneralNames *) nil_chk([dp getCRLIssuer])) getNames];
          }
          else {
            
#line 172
            genNames = [IOSObjectArray newArrayWithLength:1 type:OrgSpongycastleAsn1X509GeneralName_class_()];
            @try {
              
#line 175
              (void) IOSObjectArray_SetAndConsume(genNames, 0, new_OrgSpongycastleAsn1X509GeneralName_initWithOrgSpongycastleAsn1X500X500Name_(OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([((OrgSpongycastleAsn1X500X500Name *) nil_chk(OrgSpongycastleJceProviderPrincipalUtils_getEncodedIssuerPrincipalWithId_(
#line 176
              cert))) getEncoded])));
            }
            @catch (JavaLangException *e) {
              
#line 180
              @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Could not read certificate issuer.", e);
            }
          }
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(genNames))->size_; j++) {
            
#line 185
            id<JavaUtilEnumeration> e = [((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_([((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(genNames, j))) getName])) toASN1Primitive]))) getObjects];
            OrgSpongycastleAsn1ASN1EncodableVector *vec = new_OrgSpongycastleAsn1ASN1EncodableVector_init();
            while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
              
#line 189
              [vec addWithOrgSpongycastleAsn1ASN1Encodable:(id<OrgSpongycastleAsn1ASN1Encodable>) cast_check([e nextElement], OrgSpongycastleAsn1ASN1Encodable_class_())];
            }
            [vec addWithOrgSpongycastleAsn1ASN1Encodable:[dpName getName]];
            (void) IOSObjectArray_SetAndConsume(genNames, j, new_OrgSpongycastleAsn1X509GeneralName_initWithOrgSpongycastleAsn1X500X500Name_(OrgSpongycastleAsn1X500X500Name_getInstanceWithId_(new_OrgSpongycastleAsn1DERSequence_initWithOrgSpongycastleAsn1ASN1EncodableVector_(vec))));
          }
        }
        if (genNames != nil) {
          
#line 197
          for (jint j = 0; j < genNames->size_; j++) {
            
#line 199
            if ([names containsWithId:IOSObjectArray_Get(genNames, j)]) {
              
#line 201
              matches = true;
              break;
            }
          }
        }
        if (!matches) {
          
#line 208
          @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(
#line 209
          @"No match for certificate CRL issuing distribution point name to cRLIssuer CRL distribution point.");
        }
      }
      else {
        
#line 217
        if ([dp getCRLIssuer] == nil) {
          
#line 219
          @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(@"Either the cRLIssuer or the distributionPoint field must be contained in DistributionPoint.");
        }
        
#line 222
        IOSObjectArray *genNames = [((OrgSpongycastleAsn1X509GeneralNames *) nil_chk([dp getCRLIssuer])) getNames];
        for (jint j = 0; j < ((IOSObjectArray *) nil_chk(genNames))->size_; j++) {
          
#line 225
          if ([names containsWithId:IOSObjectArray_Get(genNames, j)]) {
            
#line 227
            matches = true;
            break;
          }
        }
        if (!matches) {
          
#line 233
          @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(
#line 234
          @"No match for certificate CRL issuing distribution point name to cRLIssuer CRL distribution point.");
        }
      }
    }
    OrgSpongycastleAsn1X509BasicConstraints *bc = nil;
    @try {
      
#line 241
      bc = OrgSpongycastleAsn1X509BasicConstraints_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_((id<JavaSecurityCertX509Extension>) cast_check(cert, JavaSecurityCertX509Extension_class_()),
#line 242
      OrgSpongycastleJceProviderRFC3280CertPathUtilities_BASIC_CONSTRAINTS));
    }
    @catch (JavaLangException *e) {
      
#line 246
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Basic constraints extension could not be decoded.", e);
    }
    
#line 249
    if ([cert isKindOfClass:[JavaSecurityCertX509Certificate class]]) {
      
#line 252
      if ([idp onlyContainsUserCerts] && (bc != nil && [bc isCA])) {
        
#line 254
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(@"CA Cert CRL only contains user certificates.");
      }
      
#line 258
      if ([idp onlyContainsCACerts] && (bc == nil || ![bc isCA])) {
        
#line 260
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(@"End CRL only contains CA certificates.");
      }
    }
    
#line 265
    if ([idp onlyContainsAttributeCerts]) {
      
#line 267
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(@"onlyContainsAttributeCerts boolean is asserted.");
    }
  }
}


#line 285
void OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLB1WithOrgSpongycastleAsn1X509DistributionPoint_withId_withJavaSecurityCertX509CRL_(OrgSpongycastleAsn1X509DistributionPoint *dp, id cert, JavaSecurityCertX509CRL *crl) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 291
  OrgSpongycastleAsn1ASN1Primitive *idp = OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(crl, OrgSpongycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT);
  jboolean isIndirect = false;
  if (idp != nil) {
    
#line 295
    if ([((OrgSpongycastleAsn1X509IssuingDistributionPoint *) nil_chk(OrgSpongycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_(idp))) isIndirectCRL]) {
      
#line 297
      isIndirect = true;
    }
  }
  IOSByteArray *issuerBytes;
  
#line 302
  @try {
    
#line 304
    issuerBytes = [((OrgSpongycastleAsn1X500X500Name *) nil_chk(OrgSpongycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(crl))) getEncoded];
  }
  @catch (JavaIoIOException *e) {
    
#line 308
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Exception encoding CRL issuer: ", [e getMessage]), e);
  }
  
#line 311
  jboolean matchIssuer = false;
  if ([((OrgSpongycastleAsn1X509DistributionPoint *) nil_chk(dp)) getCRLIssuer] != nil) {
    
#line 314
    IOSObjectArray *genNames = [((OrgSpongycastleAsn1X509GeneralNames *) nil_chk([dp getCRLIssuer])) getNames];
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(genNames))->size_; j++) {
      
#line 317
      if ([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(genNames, j))) getTagNo] == OrgSpongycastleAsn1X509GeneralName_directoryName) {
        
#line 319
        @try {
          
#line 321
          if (OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_([((OrgSpongycastleAsn1ASN1Primitive *) nil_chk([((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(genNames, j))) getName])) toASN1Primitive])) getEncoded], issuerBytes)) {
            
#line 323
            matchIssuer = true;
          }
        }
        @catch (JavaIoIOException *e) {
          
#line 328
          @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 329
          @"CRL issuer information from distribution point cannot be decoded.", e);
        }
      }
    }
    if (matchIssuer && !isIndirect) {
      
#line 335
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(@"Distribution point contains cRLIssuer field but CRL is not indirect.");
    }
    if (!matchIssuer) {
      
#line 339
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(@"CRL issuer of CRL does not match CRL issuer of distribution point.");
    }
  }
  else {
    
#line 344
    if ([((OrgSpongycastleAsn1X500X500Name *) nil_chk(OrgSpongycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(crl))) isEqual:OrgSpongycastleJceProviderPrincipalUtils_getEncodedIssuerPrincipalWithId_(
#line 345
    cert)]) {
      
#line 347
      matchIssuer = true;
    }
  }
  if (!matchIssuer) {
    
#line 352
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(@"Cannot find matching CRL issuer for certificate.");
  }
}


#line 356
OrgSpongycastleJceProviderReasonsMask *OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLDWithJavaSecurityCertX509CRL_withOrgSpongycastleAsn1X509DistributionPoint_(JavaSecurityCertX509CRL *crl, OrgSpongycastleAsn1X509DistributionPoint *dp) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 361
  OrgSpongycastleAsn1X509IssuingDistributionPoint *idp = nil;
  @try {
    
#line 364
    idp = OrgSpongycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(crl,
#line 365
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT));
  }
  @catch (JavaLangException *e) {
    
#line 369
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Issuing distribution point extension could not be decoded.", e);
  }
  
#line 372
  if (idp != nil && [idp getOnlySomeReasons] != nil && [((OrgSpongycastleAsn1X509DistributionPoint *) nil_chk(dp)) getReasons] != nil) {
    
#line 374
    return [new_OrgSpongycastleJceProviderReasonsMask_initPackagePrivateWithOrgSpongycastleAsn1X509ReasonFlags_([((OrgSpongycastleAsn1X509DistributionPoint *) nil_chk(dp)) getReasons]) intersectWithOrgSpongycastleJceProviderReasonsMask:new_OrgSpongycastleJceProviderReasonsMask_initPackagePrivateWithOrgSpongycastleAsn1X509ReasonFlags_([idp getOnlySomeReasons])];
  }
  
#line 377
  if ((idp == nil || [idp getOnlySomeReasons] == nil) && [((OrgSpongycastleAsn1X509DistributionPoint *) nil_chk(dp)) getReasons] == nil) {
    
#line 379
    return JreLoadStatic(OrgSpongycastleJceProviderReasonsMask, allReasons);
  }
  
#line 382
  return [([((OrgSpongycastleAsn1X509DistributionPoint *) nil_chk(dp)) getReasons] == nil ? JreLoadStatic(OrgSpongycastleJceProviderReasonsMask, allReasons) : new_OrgSpongycastleJceProviderReasonsMask_initPackagePrivateWithOrgSpongycastleAsn1X509ReasonFlags_(
#line 384
  [dp getReasons])) intersectWithOrgSpongycastleJceProviderReasonsMask:idp == nil ? JreLoadStatic(OrgSpongycastleJceProviderReasonsMask, allReasons) : new_OrgSpongycastleJceProviderReasonsMask_initPackagePrivateWithOrgSpongycastleAsn1X509ReasonFlags_(
#line 386
  [idp getOnlySomeReasons])];
}


#line 446
id<JavaUtilSet> OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLFWithJavaSecurityCertX509CRL_withId_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaUtilList_withOrgSpongycastleJcajceUtilJcaJceHelper_(JavaSecurityCertX509CRL *crl, id cert, JavaSecurityCertX509Certificate *defaultCRLSignCert, id<JavaSecurityPublicKey> defaultCRLSignKey, OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX, id<JavaUtilList> certPathCerts, id<OrgSpongycastleJcajceUtilJcaJceHelper> helper) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 459
  JavaSecurityCertX509CertSelector *certSelector = new_JavaSecurityCertX509CertSelector_init();
  @try {
    
#line 462
    IOSByteArray *issuerPrincipal = [((OrgSpongycastleAsn1X500X500Name *) nil_chk(OrgSpongycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(crl))) getEncoded];
    [certSelector setSubjectWithByteArray:issuerPrincipal];
  }
  @catch (JavaIoIOException *e) {
    
#line 467
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 468
    @"Subject criteria for certificate selector to find issuer certificate for CRL could not be set.", e);
  }
  
#line 471
  OrgSpongycastleJcajcePKIXCertStoreSelector *selector = [new_OrgSpongycastleJcajcePKIXCertStoreSelector_Builder_initWithJavaSecurityCertCertSelector_(certSelector) build];
  
#line 474
  id<JavaUtilCollection> coll;
  @try {
    
#line 477
    coll = OrgSpongycastleJceProviderCertPathValidatorUtilities_findCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(selector, [((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getCertificateStores]);
    [((id<JavaUtilCollection>) nil_chk(coll)) addAllWithJavaUtilCollection:OrgSpongycastleJceProviderCertPathValidatorUtilities_findCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(selector, [paramsPKIX getCertStores])];
  }
  @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
    
#line 482
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Issuer certificate for CRL cannot be searched.", e);
  }
  
#line 485
  [((id<JavaUtilCollection>) nil_chk(coll)) addWithId:defaultCRLSignCert];
  
#line 487
  id<JavaUtilIterator> cert_it = [coll iterator];
  
#line 489
  id<JavaUtilList> validCerts = new_JavaUtilArrayList_init();
  id<JavaUtilList> validKeys = new_JavaUtilArrayList_init();
  
#line 492
  while ([((id<JavaUtilIterator>) nil_chk(cert_it)) hasNext]) {
    
#line 494
    JavaSecurityCertX509Certificate *signingCert = (JavaSecurityCertX509Certificate *) cast_chk([cert_it next], [JavaSecurityCertX509Certificate class]);
    
#line 500
    if ([((JavaSecurityCertX509Certificate *) nil_chk(signingCert)) isEqual:defaultCRLSignCert]) {
      
#line 502
      [validCerts addWithId:signingCert];
      [validKeys addWithId:defaultCRLSignKey];
      continue;
    }
    @try {
      
#line 508
      OrgSpongycastleJceProviderPKIXCertPathBuilderSpi *builder = new_OrgSpongycastleJceProviderPKIXCertPathBuilderSpi_init();
      JavaSecurityCertX509CertSelector *tmpCertSelector = new_JavaSecurityCertX509CertSelector_init();
      [tmpCertSelector setCertificateWithJavaSecurityCertX509Certificate:signingCert];
      
#line 512
      OrgSpongycastleJcajcePKIXExtendedParameters_Builder *paramsBuilder = [new_OrgSpongycastleJcajcePKIXExtendedParameters_Builder_initWithOrgSpongycastleJcajcePKIXExtendedParameters_(paramsPKIX) setTargetConstraintsWithOrgSpongycastleJcajcePKIXCertStoreSelector:
#line 513
      [new_OrgSpongycastleJcajcePKIXCertStoreSelector_Builder_initWithJavaSecurityCertCertSelector_(tmpCertSelector) build]];
      
#line 524
      if ([((id<JavaUtilList>) nil_chk(certPathCerts)) containsWithId:signingCert]) {
        
#line 526
        [((OrgSpongycastleJcajcePKIXExtendedParameters_Builder *) nil_chk(paramsBuilder)) setRevocationEnabledWithBoolean:false];
      }
      else {
        
#line 530
        [((OrgSpongycastleJcajcePKIXExtendedParameters_Builder *) nil_chk(paramsBuilder)) setRevocationEnabledWithBoolean:true];
      }
      
#line 533
      OrgSpongycastleJcajcePKIXExtendedBuilderParameters *extParams = [new_OrgSpongycastleJcajcePKIXExtendedBuilderParameters_Builder_initWithOrgSpongycastleJcajcePKIXExtendedParameters_([paramsBuilder build]) build];
      
#line 535
      id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk([((id<JavaSecurityCertCertPathBuilderResult>) nil_chk([builder engineBuildWithJavaSecurityCertCertPathParameters:extParams])) getCertPath])) getCertificates];
      [validCerts addWithId:signingCert];
      [validKeys addWithId:OrgSpongycastleJceProviderCertPathValidatorUtilities_getNextWorkingKeyWithJavaUtilList_withInt_withOrgSpongycastleJcajceUtilJcaJceHelper_(certs, 0, helper)];
    }
    @catch (JavaSecurityCertCertPathBuilderException *e) {
      
#line 541
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"CertPath for CRL signer failed to validate.", e);
    }
    @catch (JavaSecurityCertCertPathValidatorException *e) {
      
#line 545
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Public key of issuer certificate of CRL could not be retrieved.", e);
    }
    @catch (JavaLangException *e) {
      
#line 549
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_([e getMessage]);
    }
  }
  
#line 553
  id<JavaUtilSet> checkKeys = new_JavaUtilHashSet_init();
  
#line 555
  OrgSpongycastleJceProviderAnnotatedException *lastException = nil;
  for (jint i = 0; i < [validCerts size]; i++) {
    
#line 558
    JavaSecurityCertX509Certificate *signCert = (JavaSecurityCertX509Certificate *) cast_chk([validCerts getWithInt:i], [JavaSecurityCertX509Certificate class]);
    IOSBooleanArray *keyusage = [((JavaSecurityCertX509Certificate *) nil_chk(signCert)) getKeyUsage];
    
#line 561
    if (keyusage != nil && (keyusage->size_ < 7 || !IOSBooleanArray_Get(keyusage, OrgSpongycastleJceProviderRFC3280CertPathUtilities_CRL_SIGN))) {
      
#line 563
      lastException = new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(
#line 564
      @"Issuer certificate key usage extension does not permit CRL signing.");
    }
    else {
      
#line 568
      [checkKeys addWithId:[validKeys getWithInt:i]];
    }
  }
  
#line 572
  if ([checkKeys isEmpty] && lastException == nil) {
    
#line 574
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(@"Cannot find a valid issuer certificate.");
  }
  if ([checkKeys isEmpty] && lastException != nil) {
    
#line 578
    @throw lastException;
  }
  
#line 581
  return checkKeys;
}


#line 584
id<JavaSecurityPublicKey> OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLGWithJavaSecurityCertX509CRL_withJavaUtilSet_(JavaSecurityCertX509CRL *crl, id<JavaUtilSet> keys) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 589
  JavaLangException *lastException = nil;
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(keys)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 592
    id<JavaSecurityPublicKey> key = (id<JavaSecurityPublicKey>) cast_check([it next], JavaSecurityPublicKey_class_());
    @try {
      
#line 595
      [((JavaSecurityCertX509CRL *) nil_chk(crl)) verifyWithJavaSecurityPublicKey:key];
      return key;
    }
    @catch (JavaLangException *e) {
      
#line 600
      lastException = e;
    }
  }
  @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Cannot verify CRL.", lastException);
}


#line 606
JavaSecurityCertX509CRL *OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLHWithJavaUtilSet_withJavaSecurityPublicKey_(id<JavaUtilSet> deltacrls, id<JavaSecurityPublicKey> key) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 611
  JavaLangException *lastException = nil;
  
#line 613
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(deltacrls)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 615
    JavaSecurityCertX509CRL *crl = (JavaSecurityCertX509CRL *) cast_chk([it next], [JavaSecurityCertX509CRL class]);
    @try {
      
#line 618
      [((JavaSecurityCertX509CRL *) nil_chk(crl)) verifyWithJavaSecurityPublicKey:key];
      return crl;
    }
    @catch (JavaLangException *e) {
      
#line 623
      lastException = e;
    }
  }
  
#line 627
  if (lastException != nil) {
    
#line 629
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Cannot verify delta CRL.", lastException);
  }
  return nil;
}


#line 634
id<JavaUtilSet> OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLA1iWithJavaUtilDate_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaSecurityCertX509CRL_(JavaUtilDate *currentDate, OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertX509Certificate *cert, JavaSecurityCertX509CRL *crl) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 641
  id<JavaUtilSet> set = new_JavaUtilHashSet_init();
  if ([((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) isUseDeltasEnabled]) {
    
#line 644
    OrgSpongycastleAsn1X509CRLDistPoint *freshestCRL = nil;
    @try {
      
#line 647
      freshestCRL = OrgSpongycastleAsn1X509CRLDistPoint_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(
#line 648
      cert, OrgSpongycastleJceProviderRFC3280CertPathUtilities_FRESHEST_CRL));
    }
    @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
      
#line 652
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Freshest CRL extension could not be decoded from certificate.", e);
    }
    if (freshestCRL == nil) {
      
#line 656
      @try {
        
#line 658
        freshestCRL = OrgSpongycastleAsn1X509CRLDistPoint_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(crl,
#line 659
        OrgSpongycastleJceProviderRFC3280CertPathUtilities_FRESHEST_CRL));
      }
      @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
        
#line 663
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Freshest CRL extension could not be decoded from CRL.", e);
      }
    }
    if (freshestCRL != nil) {
      
#line 668
      id<JavaUtilList> crlStores = new_JavaUtilArrayList_init();
      
#line 670
      [crlStores addAllWithJavaUtilCollection:[paramsPKIX getCRLStores]];
      
#line 672
      @try {
        
#line 674
        [crlStores addAllWithJavaUtilCollection:OrgSpongycastleJceProviderCertPathValidatorUtilities_getAdditionalStoresFromCRLDistributionPointWithOrgSpongycastleAsn1X509CRLDistPoint_withJavaUtilMap_(freshestCRL, [paramsPKIX getNamedCRLStoreMap])];
      }
      @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
        
#line 678
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 679
        @"No new delta CRL locations could be added from Freshest CRL extension.", e);
      }
      
#line 683
      @try {
        
#line 685
        [set addAllWithJavaUtilCollection:OrgSpongycastleJceProviderCertPathValidatorUtilities_getDeltaCRLsWithJavaUtilDate_withJavaSecurityCertX509CRL_withJavaUtilList_withJavaUtilList_(currentDate, crl, [paramsPKIX getCertStores], crlStores)];
      }
      @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
        
#line 689
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Exception obtaining delta CRLs.", e);
      }
    }
  }
  return set;
}


#line 696
IOSObjectArray *OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLA1iiWithJavaUtilDate_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaSecurityCertX509CRL_(JavaUtilDate *currentDate, OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertX509Certificate *cert, JavaSecurityCertX509CRL *crl) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 703
  id<JavaUtilSet> deltaSet = new_JavaUtilHashSet_init();
  JavaSecurityCertX509CRLSelector *crlselect = new_JavaSecurityCertX509CRLSelector_init();
  [crlselect setCertificateCheckingWithJavaSecurityCertX509Certificate:cert];
  
#line 707
  @try {
    
#line 709
    [crlselect addIssuerNameWithByteArray:[((OrgSpongycastleAsn1X500X500Name *) nil_chk(OrgSpongycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(crl))) getEncoded]];
  }
  @catch (JavaIoIOException *e) {
    
#line 713
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Cannot extract issuer from CRL.", e), e);
  }
  
#line 716
  OrgSpongycastleJcajcePKIXCRLStoreSelector *extSelect = [((OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder *) nil_chk([new_OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder_initWithJavaSecurityCertCRLSelector_(crlselect) setCompleteCRLEnabledWithBoolean:true])) build];
  
#line 718
  JavaUtilDate *validityDate = currentDate;
  
#line 720
  if ([((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getDate] != nil) {
    
#line 722
    validityDate = [paramsPKIX getDate];
  }
  
#line 725
  id<JavaUtilSet> completeSet = [((OrgSpongycastleJceProviderPKIXCRLUtil *) nil_chk(OrgSpongycastleJceProviderRFC3280CertPathUtilities_CRL_UTIL)) findCRLsWithOrgSpongycastleJcajcePKIXCRLStoreSelector:extSelect withJavaUtilDate:validityDate withJavaUtilList:[paramsPKIX getCertStores] withJavaUtilList:[paramsPKIX getCRLStores]];
  
#line 727
  if ([paramsPKIX isUseDeltasEnabled]) {
    
#line 730
    @try {
      
#line 732
      [deltaSet addAllWithJavaUtilCollection:OrgSpongycastleJceProviderCertPathValidatorUtilities_getDeltaCRLsWithJavaUtilDate_withJavaSecurityCertX509CRL_withJavaUtilList_withJavaUtilList_(validityDate, crl, [paramsPKIX getCertStores], [paramsPKIX getCRLStores])];
    }
    @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
      
#line 736
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Exception obtaining delta CRLs.", e);
    }
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){
#line 741
    completeSet,
#line 742
    deltaSet } count:2 type:JavaUtilSet_class_()];
  }


#line 755
void OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLCWithJavaSecurityCertX509CRL_withJavaSecurityCertX509CRL_withOrgSpongycastleJcajcePKIXExtendedParameters_(JavaSecurityCertX509CRL *deltaCRL, JavaSecurityCertX509CRL *completeCRL, OrgSpongycastleJcajcePKIXExtendedParameters *pkixParams) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 761
  if (deltaCRL == nil) {
    
#line 763
    return;
  }
  OrgSpongycastleAsn1X509IssuingDistributionPoint *completeidp = nil;
  @try {
    
#line 768
    completeidp = OrgSpongycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(
#line 769
    completeCRL, OrgSpongycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT));
  }
  @catch (JavaLangException *e) {
    
#line 773
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Issuing distribution point extension could not be decoded.", e);
  }
  
#line 776
  if ([((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk(pkixParams)) isUseDeltasEnabled]) {
    
#line 779
    if (![((OrgSpongycastleAsn1X500X500Name *) nil_chk(OrgSpongycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(deltaCRL))) isEqual:OrgSpongycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(completeCRL)]) {
      
#line 781
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(@"Complete CRL issuer does not match delta CRL issuer.");
    }
    
#line 785
    OrgSpongycastleAsn1X509IssuingDistributionPoint *deltaidp = nil;
    @try {
      
#line 788
      deltaidp = OrgSpongycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(
#line 789
      deltaCRL, OrgSpongycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT));
    }
    @catch (JavaLangException *e) {
      
#line 793
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 794
      @"Issuing distribution point extension from delta CRL could not be decoded.", e);
    }
    
#line 797
    jboolean match = false;
    if (completeidp == nil) {
      
#line 800
      if (deltaidp == nil) {
        
#line 802
        match = true;
      }
    }
    else {
      
#line 807
      if ([completeidp isEqual:deltaidp]) {
        
#line 809
        match = true;
      }
    }
    if (!match) {
      
#line 814
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(
#line 815
      @"Issuing distribution point extension from delta CRL and complete CRL does not match.");
    }
    
#line 819
    OrgSpongycastleAsn1ASN1Primitive *completeKeyIdentifier = nil;
    @try {
      
#line 822
      completeKeyIdentifier = OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(
#line 823
      completeCRL, OrgSpongycastleJceProviderRFC3280CertPathUtilities_AUTHORITY_KEY_IDENTIFIER);
    }
    @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
      
#line 827
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 828
      @"Authority key identifier extension could not be extracted from complete CRL.", e);
    }
    
#line 831
    OrgSpongycastleAsn1ASN1Primitive *deltaKeyIdentifier = nil;
    @try {
      
#line 834
      deltaKeyIdentifier = OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(
#line 835
      deltaCRL, OrgSpongycastleJceProviderRFC3280CertPathUtilities_AUTHORITY_KEY_IDENTIFIER);
    }
    @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
      
#line 839
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 840
      @"Authority key identifier extension could not be extracted from delta CRL.", e);
    }
    
#line 843
    if (completeKeyIdentifier == nil) {
      
#line 845
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(@"CRL authority key identifier is null.");
    }
    
#line 848
    if (deltaKeyIdentifier == nil) {
      
#line 850
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(@"Delta CRL authority key identifier is null.");
    }
    
#line 853
    if (![completeKeyIdentifier isEqual:deltaKeyIdentifier]) {
      
#line 855
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(
#line 856
      @"Delta CRL authority key identifier does not match complete CRL authority key identifier.");
    }
  }
}


#line 861
void OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLIWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withOrgSpongycastleJceProviderBCCertStatus_withOrgSpongycastleJcajcePKIXExtendedParameters_(JavaUtilDate *validDate, JavaSecurityCertX509CRL *deltacrl, id cert, OrgSpongycastleJceProviderBCCertStatus *certStatus, OrgSpongycastleJcajcePKIXExtendedParameters *pkixParams) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 869
  if ([((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk(pkixParams)) isUseDeltasEnabled] && deltacrl != nil) {
    
#line 871
    OrgSpongycastleJceProviderCertPathValidatorUtilities_getCertStatusWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withOrgSpongycastleJceProviderBCCertStatus_(validDate, deltacrl, cert, certStatus);
  }
}


#line 875
void OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLJWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withOrgSpongycastleJceProviderBCCertStatus_(JavaUtilDate *validDate, JavaSecurityCertX509CRL *completecrl, id cert, OrgSpongycastleJceProviderBCCertStatus *certStatus) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 882
  if ([((OrgSpongycastleJceProviderBCCertStatus *) nil_chk(certStatus)) getCertStatus] == OrgSpongycastleJceProviderBCCertStatus_UNREVOKED) {
    
#line 884
    OrgSpongycastleJceProviderCertPathValidatorUtilities_getCertStatusWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withOrgSpongycastleJceProviderBCCertStatus_(validDate, completecrl, cert, certStatus);
  }
}


#line 888
OrgSpongycastleJceProviderPKIXPolicyNode *OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareCertBWithJavaSecurityCertCertPath_withInt_withJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_withInt_(JavaSecurityCertCertPath *certPath, jint index, IOSObjectArray *policyNodes, OrgSpongycastleJceProviderPKIXPolicyNode *validPolicyTree, jint policyMapping) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 896
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  jint n = [certs size];
  
#line 900
  jint i = n - index;
  
#line 903
  OrgSpongycastleAsn1ASN1Sequence *pm = nil;
  @try {
    
#line 906
    pm = OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert,
#line 907
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_POLICY_MAPPINGS));
  }
  @catch (OrgSpongycastleJceProviderAnnotatedException *ex) {
    
#line 911
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy mappings extension could not be decoded.", ex, certPath,
#line 912
    index);
  }
  OrgSpongycastleJceProviderPKIXPolicyNode *_validPolicyTree = validPolicyTree;
  if (pm != nil) {
    
#line 917
    OrgSpongycastleAsn1ASN1Sequence *mappings = pm;
    id<JavaUtilMap> m_idp = new_JavaUtilHashMap_init();
    id<JavaUtilSet> s_idp = new_JavaUtilHashSet_init();
    
#line 921
    for (jint j = 0; j < [mappings size]; j++) {
      
#line 923
      OrgSpongycastleAsn1ASN1Sequence *mapping = (OrgSpongycastleAsn1ASN1Sequence *) cast_chk([mappings getObjectAtWithInt:j], [OrgSpongycastleAsn1ASN1Sequence class]);
      NSString *id_p = [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(((OrgSpongycastleAsn1ASN1ObjectIdentifier *) cast_chk([((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(mapping)) getObjectAtWithInt:0], [OrgSpongycastleAsn1ASN1ObjectIdentifier class])))) getId];
      NSString *sd_p = [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(((OrgSpongycastleAsn1ASN1ObjectIdentifier *) cast_chk([mapping getObjectAtWithInt:1], [OrgSpongycastleAsn1ASN1ObjectIdentifier class])))) getId];
      id<JavaUtilSet> tmp;
      
#line 928
      if (![m_idp containsKeyWithId:id_p]) {
        
#line 930
        tmp = new_JavaUtilHashSet_init();
        [tmp addWithId:sd_p];
        (void) [m_idp putWithId:id_p withId:tmp];
        [s_idp addWithId:id_p];
      }
      else {
        
#line 937
        tmp = (id<JavaUtilSet>) cast_check([m_idp getWithId:id_p], JavaUtilSet_class_());
        [((id<JavaUtilSet>) nil_chk(tmp)) addWithId:sd_p];
      }
    }
    
#line 942
    id<JavaUtilIterator> it_idp = [s_idp iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it_idp)) hasNext]) {
      
#line 945
      NSString *id_p = (NSString *) cast_chk([it_idp next], [NSString class]);
      
#line 950
      if (policyMapping > 0) {
        
#line 952
        jboolean idp_found = false;
        id<JavaUtilIterator> nodes_i = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(policyNodes), i))) iterator];
        while ([((id<JavaUtilIterator>) nil_chk(nodes_i)) hasNext]) {
          
#line 956
          OrgSpongycastleJceProviderPKIXPolicyNode *node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([nodes_i next], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
          if ([((NSString *) nil_chk([((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(node)) getValidPolicy])) isEqual:id_p]) {
            
#line 959
            idp_found = true;
            node->expectedPolicies_ = (id<JavaUtilSet>) cast_check([m_idp getWithId:id_p], JavaUtilSet_class_());
            break;
          }
        }
        
#line 965
        if (!idp_found) {
          
#line 967
          nodes_i = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, i))) iterator];
          while ([((id<JavaUtilIterator>) nil_chk(nodes_i)) hasNext]) {
            
#line 970
            OrgSpongycastleJceProviderPKIXPolicyNode *node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([nodes_i next], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
            if ([((NSString *) nil_chk(OrgSpongycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY)) isEqual:[((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(node)) getValidPolicy]]) {
              
#line 973
              id<JavaUtilSet> pq = nil;
              OrgSpongycastleAsn1ASN1Sequence *policies = nil;
              @try {
                
#line 977
                policies = (OrgSpongycastleAsn1ASN1Sequence *) cast_chk(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert,
#line 978
                OrgSpongycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES), [OrgSpongycastleAsn1ASN1Sequence class]);
              }
              @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
                
#line 982
                @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(
#line 983
                @"Certificate policies extension could not be decoded.", e, certPath, index);
              }
              id<JavaUtilEnumeration> e = [((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(policies)) getObjects];
              while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
                
#line 988
                OrgSpongycastleAsn1X509PolicyInformation *pinfo = nil;
                @try {
                  
#line 991
                  pinfo = OrgSpongycastleAsn1X509PolicyInformation_getInstanceWithId_([e nextElement]);
                }
                @catch (JavaLangException *ex) {
                  
#line 995
                  @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(
#line 996
                  @"Policy information could not be decoded.", ex, certPath, index);
                }
                if ([OrgSpongycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY isEqual:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgSpongycastleAsn1X509PolicyInformation *) nil_chk(pinfo)) getPolicyIdentifier])) getId]]) {
                  
#line 1000
                  @try {
                    
#line 1002
                    pq = OrgSpongycastleJceProviderCertPathValidatorUtilities_getQualifierSetWithOrgSpongycastleAsn1ASN1Sequence_(
#line 1003
                    [pinfo getPolicyQualifiers]);
                  }
                  @catch (JavaSecurityCertCertPathValidatorException *ex) {
                    
#line 1008
                    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(
#line 1009
                    @"Policy qualifier info set could not be decoded.", ex, certPath,
#line 1010
                    index);
                  }
                  break;
                }
              }
              jboolean ci = false;
              if ([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getCriticalExtensionOIDs] != nil) {
                
#line 1018
                ci = [((id<JavaUtilSet>) nil_chk([cert getCriticalExtensionOIDs])) containsWithId:
#line 1019
                OrgSpongycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES];
              }
              
#line 1022
              OrgSpongycastleJceProviderPKIXPolicyNode *p_node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([node getParent], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
              if ([OrgSpongycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY isEqual:[((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(p_node)) getValidPolicy]]) {
                
#line 1025
                OrgSpongycastleJceProviderPKIXPolicyNode *c_node = new_OrgSpongycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(new_JavaUtilArrayList_init(), i, (id<JavaUtilSet>) cast_check([m_idp getWithId:
#line 1026
                id_p], JavaUtilSet_class_()), p_node, pq, id_p, ci);
                [p_node addChildWithOrgSpongycastleJceProviderPKIXPolicyNode:c_node];
                [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, i))) addWithId:c_node];
              }
              break;
            }
          }
        }
      }
      else
#line 1039
      if (policyMapping <= 0) {
        
#line 1041
        id<JavaUtilIterator> nodes_i = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(policyNodes), i))) iterator];
        while ([((id<JavaUtilIterator>) nil_chk(nodes_i)) hasNext]) {
          
#line 1044
          OrgSpongycastleJceProviderPKIXPolicyNode *node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([nodes_i next], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
          if ([((NSString *) nil_chk([((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(node)) getValidPolicy])) isEqual:id_p]) {
            
#line 1047
            OrgSpongycastleJceProviderPKIXPolicyNode *p_node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([node getParent], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
            [((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(p_node)) removeChildWithOrgSpongycastleJceProviderPKIXPolicyNode:node];
            [nodes_i remove];
            for (jint k = (i - 1); k >= 0; k--) {
              
#line 1052
              id<JavaUtilList> nodes = IOSObjectArray_Get(policyNodes, k);
              for (jint l = 0; l < [((id<JavaUtilList>) nil_chk(nodes)) size]; l++) {
                
#line 1055
                OrgSpongycastleJceProviderPKIXPolicyNode *node2 = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([nodes getWithInt:l], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
                if (![((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(node2)) hasChildren]) {
                  
#line 1058
                  _validPolicyTree = OrgSpongycastleJceProviderCertPathValidatorUtilities_removePolicyNodeWithOrgSpongycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_(
#line 1059
                  _validPolicyTree, policyNodes, node2);
                  if (_validPolicyTree == nil) {
                    
#line 1062
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _validPolicyTree;
}


#line 1075
void OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertAWithJavaSecurityCertCertPath_withInt_(JavaSecurityCertCertPath *certPath, jint index) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 1080
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  
#line 1086
  OrgSpongycastleAsn1ASN1Sequence *pm = nil;
  @try {
    
#line 1089
    pm = OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert,
#line 1090
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_POLICY_MAPPINGS));
  }
  @catch (OrgSpongycastleJceProviderAnnotatedException *ex) {
    
#line 1094
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy mappings extension could not be decoded.", ex, certPath,
#line 1095
    index);
  }
  if (pm != nil) {
    
#line 1099
    OrgSpongycastleAsn1ASN1Sequence *mappings = pm;
    
#line 1101
    for (jint j = 0; j < [mappings size]; j++) {
      
#line 1103
      OrgSpongycastleAsn1ASN1ObjectIdentifier *issuerDomainPolicy = nil;
      OrgSpongycastleAsn1ASN1ObjectIdentifier *subjectDomainPolicy = nil;
      @try {
        
#line 1107
        OrgSpongycastleAsn1ASN1Sequence *mapping = OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_([mappings getObjectAtWithInt:j]);
        
#line 1109
        issuerDomainPolicy = OrgSpongycastleAsn1ASN1ObjectIdentifier_getInstanceWithId_([((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(mapping)) getObjectAtWithInt:0]);
        subjectDomainPolicy = OrgSpongycastleAsn1ASN1ObjectIdentifier_getInstanceWithId_([mapping getObjectAtWithInt:1]);
      }
      @catch (JavaLangException *e) {
        
#line 1114
        @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy mappings extension contents could not be decoded.",
#line 1115
        e, certPath, index);
      }
      
#line 1118
      if ([((NSString *) nil_chk(OrgSpongycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY)) isEqual:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(issuerDomainPolicy)) getId]]) {
        
#line 1121
        @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"IssuerDomainPolicy is anyPolicy", nil, certPath, index);
      }
      
#line 1124
      if ([OrgSpongycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY isEqual:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(subjectDomainPolicy)) getId]]) {
        
#line 1127
        @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"SubjectDomainPolicy is anyPolicy,", nil, certPath, index);
      }
    }
  }
}


#line 1133
void OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertFWithJavaSecurityCertCertPath_withInt_withOrgSpongycastleJceProviderPKIXPolicyNode_withInt_(JavaSecurityCertCertPath *certPath, jint index, OrgSpongycastleJceProviderPKIXPolicyNode *validPolicyTree, jint explicitPolicy) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 1143
  if (explicitPolicy <= 0 && validPolicyTree == nil) {
    
#line 1145
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"No valid policy tree found when one expected.", nil, certPath,
#line 1146
    index);
  }
}


#line 1150
OrgSpongycastleJceProviderPKIXPolicyNode *OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertEWithJavaSecurityCertCertPath_withInt_withOrgSpongycastleJceProviderPKIXPolicyNode_(JavaSecurityCertCertPath *certPath, jint index, OrgSpongycastleJceProviderPKIXPolicyNode *validPolicyTree) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 1156
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  
#line 1161
  OrgSpongycastleAsn1ASN1Sequence *certPolicies = nil;
  @try {
    
#line 1164
    certPolicies = OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert,
#line 1165
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES));
  }
  @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
    
#line 1169
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Could not read certificate policies extension from certificate.",
#line 1170
    e, certPath, index);
  }
  if (certPolicies == nil) {
    
#line 1174
    validPolicyTree = nil;
  }
  return validPolicyTree;
}


#line 1179
void OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertBCWithJavaSecurityCertCertPath_withInt_withOrgSpongycastleJceProviderPKIXNameConstraintValidator_(JavaSecurityCertCertPath *certPath, jint index, OrgSpongycastleJceProviderPKIXNameConstraintValidator *nameConstraintValidator) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 1185
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  jint n = [certs size];
  
#line 1189
  jint i = n - index;
  
#line 1193
  if (!(OrgSpongycastleJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert) && (i < n))) {
    
#line 1195
    OrgSpongycastleAsn1X500X500Name *principal = OrgSpongycastleJceProviderPrincipalUtils_getSubjectPrincipalWithJavaSecurityCertX509Certificate_(cert);
    OrgSpongycastleAsn1ASN1Sequence *dns;
    
#line 1198
    @try {
      
#line 1200
      dns = OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_([((OrgSpongycastleAsn1X500X500Name *) nil_chk(principal)) getEncoded]);
    }
    @catch (JavaLangException *e) {
      
#line 1204
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Exception extracting subject name when checking subtrees.", e,
#line 1205
      certPath, index);
    }
    
#line 1208
    @try {
      
#line 1210
      [((OrgSpongycastleJceProviderPKIXNameConstraintValidator *) nil_chk(nameConstraintValidator)) checkPermittedDNWithOrgSpongycastleAsn1ASN1Sequence:dns];
      [nameConstraintValidator checkExcludedDNWithOrgSpongycastleAsn1ASN1Sequence:dns];
    }
    @catch (OrgSpongycastleJceProviderPKIXNameConstraintValidatorException *e) {
      
#line 1215
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Subtree check for certificate subject failed.", e, certPath,
#line 1216
      index);
    }
    
#line 1219
    OrgSpongycastleAsn1X509GeneralNames *altName = nil;
    @try {
      
#line 1222
      altName = OrgSpongycastleAsn1X509GeneralNames_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert,
#line 1223
      OrgSpongycastleJceProviderRFC3280CertPathUtilities_SUBJECT_ALTERNATIVE_NAME));
    }
    @catch (JavaLangException *e) {
      
#line 1227
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Subject alternative name extension could not be decoded.", e,
#line 1228
      certPath, index);
    }
    IOSObjectArray *emails = [((OrgSpongycastleAsn1X500X500Name *) nil_chk(OrgSpongycastleAsn1X500X500Name_getInstanceWithId_(dns))) getRDNsWithOrgSpongycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgSpongycastleAsn1X500StyleBCStyle, EmailAddress)];
    for (jint eI = 0; eI != ((IOSObjectArray *) nil_chk(emails))->size_; eI++) {
      
#line 1234
      NSString *email = [((id<OrgSpongycastleAsn1ASN1String>) nil_chk(((id<OrgSpongycastleAsn1ASN1String>) cast_check([((OrgSpongycastleAsn1X500AttributeTypeAndValue *) nil_chk([((OrgSpongycastleAsn1X500RDN *) nil_chk(IOSObjectArray_Get(emails, eI))) getFirst])) getValue], OrgSpongycastleAsn1ASN1String_class_())))) getString];
      OrgSpongycastleAsn1X509GeneralName *emailAsGeneralName = new_OrgSpongycastleAsn1X509GeneralName_initWithInt_withNSString_(OrgSpongycastleAsn1X509GeneralName_rfc822Name, email);
      @try {
        
#line 1238
        [nameConstraintValidator checkPermittedWithOrgSpongycastleAsn1X509GeneralName:emailAsGeneralName];
        [nameConstraintValidator checkExcludedWithOrgSpongycastleAsn1X509GeneralName:emailAsGeneralName];
      }
      @catch (OrgSpongycastleJceProviderPKIXNameConstraintValidatorException *ex) {
        
#line 1243
        @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(
#line 1244
        @"Subtree check for certificate subject alternative email failed.", ex, certPath, index);
      }
    }
    if (altName != nil) {
      
#line 1249
      IOSObjectArray *genNames = nil;
      @try {
        
#line 1252
        genNames = [altName getNames];
      }
      @catch (JavaLangException *e) {
        
#line 1256
        @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Subject alternative name contents could not be decoded.", e,
#line 1257
        certPath, index);
      }
      for (jint j = 0; j < ((IOSObjectArray *) nil_chk(genNames))->size_; j++) {
        
#line 1262
        @try {
          
#line 1264
          [nameConstraintValidator checkPermittedWithOrgSpongycastleAsn1X509GeneralName:IOSObjectArray_Get(genNames, j)];
          [nameConstraintValidator checkExcludedWithOrgSpongycastleAsn1X509GeneralName:IOSObjectArray_Get(genNames, j)];
        }
        @catch (OrgSpongycastleJceProviderPKIXNameConstraintValidatorException *e) {
          
#line 1269
          @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(
#line 1270
          @"Subtree check for certificate subject alternative name failed.", e, certPath, index);
        }
      }
    }
  }
}


#line 1277
OrgSpongycastleJceProviderPKIXPolicyNode *OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertDWithJavaSecurityCertCertPath_withInt_withJavaUtilSet_withOrgSpongycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withInt_(JavaSecurityCertCertPath *certPath, jint index, id<JavaUtilSet> acceptablePolicies, OrgSpongycastleJceProviderPKIXPolicyNode *validPolicyTree, IOSObjectArray *policyNodes, jint inhibitAnyPolicy) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 1286
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  jint n = [certs size];
  
#line 1290
  jint i = n - index;
  
#line 1295
  OrgSpongycastleAsn1ASN1Sequence *certPolicies = nil;
  @try {
    
#line 1298
    certPolicies = OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert,
#line 1299
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES));
  }
  @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
    
#line 1303
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Could not read certificate policies extension from certificate.",
#line 1304
    e, certPath, index);
  }
  if (certPolicies != nil && validPolicyTree != nil) {
    
#line 1311
    id<JavaUtilEnumeration> e = [certPolicies getObjects];
    id<JavaUtilSet> pols = new_JavaUtilHashSet_init();
    
#line 1314
    while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
      
#line 1316
      OrgSpongycastleAsn1X509PolicyInformation *pInfo = OrgSpongycastleAsn1X509PolicyInformation_getInstanceWithId_([e nextElement]);
      OrgSpongycastleAsn1ASN1ObjectIdentifier *pOid = [((OrgSpongycastleAsn1X509PolicyInformation *) nil_chk(pInfo)) getPolicyIdentifier];
      
#line 1319
      [pols addWithId:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(pOid)) getId]];
      
#line 1321
      if (![((NSString *) nil_chk(OrgSpongycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY)) isEqual:[pOid getId]]) {
        
#line 1323
        id<JavaUtilSet> pq = nil;
        @try {
          
#line 1326
          pq = OrgSpongycastleJceProviderCertPathValidatorUtilities_getQualifierSetWithOrgSpongycastleAsn1ASN1Sequence_([pInfo getPolicyQualifiers]);
        }
        @catch (JavaSecurityCertCertPathValidatorException *ex) {
          
#line 1330
          @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy qualifier info set could not be build.", ex,
#line 1331
          certPath, index);
        }
        
#line 1334
        jboolean match = OrgSpongycastleJceProviderCertPathValidatorUtilities_processCertD1iWithInt_withJavaUtilListArray_withOrgSpongycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(i, policyNodes, pOid, pq);
        
#line 1336
        if (!match) {
          
#line 1338
          OrgSpongycastleJceProviderCertPathValidatorUtilities_processCertD1iiWithInt_withJavaUtilListArray_withOrgSpongycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(i, policyNodes, pOid, pq);
        }
      }
    }
    
#line 1343
    if ([((id<JavaUtilSet>) nil_chk(acceptablePolicies)) isEmpty] || [acceptablePolicies containsWithId:OrgSpongycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY]) {
      
#line 1345
      [acceptablePolicies clear];
      [acceptablePolicies addAllWithJavaUtilCollection:pols];
    }
    else {
      
#line 1350
      id<JavaUtilIterator> it = [acceptablePolicies iterator];
      id<JavaUtilSet> t1 = new_JavaUtilHashSet_init();
      
#line 1353
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        
#line 1355
        id o = [it next];
        
#line 1357
        if ([pols containsWithId:o]) {
          
#line 1359
          [t1 addWithId:o];
        }
      }
      [acceptablePolicies clear];
      [acceptablePolicies addAllWithJavaUtilCollection:t1];
    }
    
#line 1369
    if ((inhibitAnyPolicy > 0) || ((i < n) && OrgSpongycastleJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert))) {
      
#line 1371
      e = [certPolicies getObjects];
      
#line 1373
      while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
        
#line 1375
        OrgSpongycastleAsn1X509PolicyInformation *pInfo = OrgSpongycastleAsn1X509PolicyInformation_getInstanceWithId_([e nextElement]);
        
#line 1377
        if ([((NSString *) nil_chk(OrgSpongycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY)) isEqual:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgSpongycastleAsn1X509PolicyInformation *) nil_chk(pInfo)) getPolicyIdentifier])) getId]]) {
          
#line 1379
          id<JavaUtilSet> _apq = OrgSpongycastleJceProviderCertPathValidatorUtilities_getQualifierSetWithOrgSpongycastleAsn1ASN1Sequence_([pInfo getPolicyQualifiers]);
          id<JavaUtilList> _nodes = IOSObjectArray_Get(nil_chk(policyNodes), i - 1);
          
#line 1382
          for (jint k = 0; k < [((id<JavaUtilList>) nil_chk(_nodes)) size]; k++) {
            
#line 1384
            OrgSpongycastleJceProviderPKIXPolicyNode *_node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([_nodes getWithInt:k], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
            
#line 1386
            id<JavaUtilIterator> _policySetIter = [((id<JavaUtilSet>) nil_chk([((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getExpectedPolicies])) iterator];
            while ([((id<JavaUtilIterator>) nil_chk(_policySetIter)) hasNext]) {
              
#line 1389
              id _tmp = [_policySetIter next];
              
#line 1391
              NSString *_policy;
              if ([_tmp isKindOfClass:[NSString class]]) {
                
#line 1394
                _policy = (NSString *) _tmp;
              }
              else if ([_tmp isKindOfClass:[OrgSpongycastleAsn1ASN1ObjectIdentifier class]]) {
                
#line 1398
                _policy = [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(((OrgSpongycastleAsn1ASN1ObjectIdentifier *) _tmp))) getId];
              }
              else {
                
#line 1402
                continue;
              }
              
#line 1405
              jboolean _found = false;
              id<JavaUtilIterator> _childrenIter = [_node getChildren];
              
#line 1408
              while ([((id<JavaUtilIterator>) nil_chk(_childrenIter)) hasNext]) {
                
#line 1410
                OrgSpongycastleJceProviderPKIXPolicyNode *_child = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([_childrenIter next], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
                
#line 1412
                if ([((NSString *) nil_chk(_policy)) isEqual:[((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(_child)) getValidPolicy]]) {
                  
#line 1414
                  _found = true;
                }
              }
              
#line 1418
              if (!_found) {
                
#line 1420
                id<JavaUtilSet> _newChildExpectedPolicies = new_JavaUtilHashSet_init();
                [_newChildExpectedPolicies addWithId:_policy];
                
#line 1423
                OrgSpongycastleJceProviderPKIXPolicyNode *_newChild = new_OrgSpongycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(new_JavaUtilArrayList_init(), i,
#line 1424
                _newChildExpectedPolicies, _node, _apq, _policy, false);
                [_node addChildWithOrgSpongycastleJceProviderPKIXPolicyNode:_newChild];
                [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, i))) addWithId:_newChild];
              }
            }
          }
          break;
        }
      }
    }
    
#line 1435
    OrgSpongycastleJceProviderPKIXPolicyNode *_validPolicyTree = validPolicyTree;
    
#line 1439
    for (jint j = (i - 1); j >= 0; j--) {
      
#line 1441
      id<JavaUtilList> nodes = IOSObjectArray_Get(nil_chk(policyNodes), j);
      
#line 1443
      for (jint k = 0; k < [((id<JavaUtilList>) nil_chk(nodes)) size]; k++) {
        
#line 1445
        OrgSpongycastleJceProviderPKIXPolicyNode *node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([nodes getWithInt:k], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
        if (![((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(node)) hasChildren]) {
          
#line 1448
          _validPolicyTree = OrgSpongycastleJceProviderCertPathValidatorUtilities_removePolicyNodeWithOrgSpongycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_(_validPolicyTree, policyNodes,
#line 1449
          node);
          if (_validPolicyTree == nil) {
            
#line 1452
            break;
          }
        }
      }
    }
    
#line 1461
    id<JavaUtilSet> criticalExtensionOids = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getCriticalExtensionOIDs];
    
#line 1463
    if (criticalExtensionOids != nil) {
      
#line 1465
      jboolean critical = [criticalExtensionOids containsWithId:OrgSpongycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES];
      
#line 1467
      id<JavaUtilList> nodes = IOSObjectArray_Get(nil_chk(policyNodes), i);
      for (jint j = 0; j < [((id<JavaUtilList>) nil_chk(nodes)) size]; j++) {
        
#line 1470
        OrgSpongycastleJceProviderPKIXPolicyNode *node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([nodes getWithInt:j], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
        [((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(node)) setCriticalWithBoolean:critical];
      }
    }
    return _validPolicyTree;
  }
  return nil;
}


#line 1479
void OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertAWithJavaSecurityCertCertPath_withOrgSpongycastleJcajcePKIXExtendedParameters_withInt_withJavaSecurityPublicKey_withBoolean_withOrgSpongycastleAsn1X500X500Name_withJavaSecurityCertX509Certificate_withOrgSpongycastleJcajceUtilJcaJceHelper_(JavaSecurityCertCertPath *certPath, OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX, jint index, id<JavaSecurityPublicKey> workingPublicKey, jboolean verificationAlreadyPerformed, OrgSpongycastleAsn1X500X500Name *workingIssuerName, JavaSecurityCertX509Certificate *sign, id<OrgSpongycastleJcajceUtilJcaJceHelper> helper) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 1490
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  
#line 1495
  if (!verificationAlreadyPerformed) {
    
#line 1497
    @try {
      
#line 1501
      OrgSpongycastleJceProviderCertPathValidatorUtilities_verifyX509CertificateWithJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withNSString_(cert, workingPublicKey,
#line 1502
      [((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getSigProvider]);
    }
    @catch (JavaSecurityGeneralSecurityException *e) {
      
#line 1506
      @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Could not validate certificate signature.", e, certPath, index);
    }
  }
  
#line 1510
  @try {
    
#line 1514
    [((JavaSecurityCertX509Certificate *) nil_chk(cert)) checkValidityWithJavaUtilDate:OrgSpongycastleJceProviderCertPathValidatorUtilities_getValidCertDateFromValidityModelWithOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertCertPath_withInt_(
#line 1515
    paramsPKIX, certPath, index)];
  }
  @catch (JavaSecurityCertCertificateExpiredException *e) {
    
#line 1519
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(JreStrcat("$$", @"Could not validate certificate: ", [e getMessage]), e, certPath, index);
  }
  @catch (JavaSecurityCertCertificateNotYetValidException *e) {
    
#line 1523
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(JreStrcat("$$", @"Could not validate certificate: ", [e getMessage]), e, certPath, index);
  }
  @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
    
#line 1527
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Could not validate time of certificate.", e, certPath, index);
  }
  
#line 1533
  if ([((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) isRevocationEnabled]) {
    
#line 1535
    @try {
      
#line 1537
      OrgSpongycastleJceProviderRFC3280CertPathUtilities_checkCRLsWithOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withJavaUtilList_withOrgSpongycastleJcajceUtilJcaJceHelper_(paramsPKIX, cert, OrgSpongycastleJceProviderCertPathValidatorUtilities_getValidCertDateFromValidityModelWithOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertCertPath_withInt_(paramsPKIX,
#line 1538
      certPath, index), sign, workingPublicKey, certs, helper);
    }
    @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
      
#line 1542
      JavaLangThrowable *cause = e;
      if (nil != [e getCause]) {
        
#line 1545
        cause = [e getCause];
      }
      @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_([e getMessage], cause, certPath, index);
    }
  }
  
#line 1554
  if (![((OrgSpongycastleAsn1X500X500Name *) nil_chk(OrgSpongycastleJceProviderPrincipalUtils_getEncodedIssuerPrincipalWithId_(cert))) isEqual:workingIssuerName]) {
    
#line 1556
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(JreStrcat("$@$@$", @"IssuerName(", OrgSpongycastleJceProviderPrincipalUtils_getEncodedIssuerPrincipalWithId_(cert), @") does not match SubjectName(",
#line 1557
    workingIssuerName, @") of signing certificate."), nil,
#line 1558
    certPath, index);
  }
}


#line 1562
jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertI1WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint explicitPolicy) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 1568
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  
#line 1573
  OrgSpongycastleAsn1ASN1Sequence *pc = nil;
  @try {
    
#line 1576
    pc = OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert,
#line 1577
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_POLICY_CONSTRAINTS));
  }
  @catch (JavaLangException *e) {
    
#line 1581
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy constraints extension cannot be decoded.", e, certPath,
#line 1582
    index);
  }
  
#line 1585
  jint tmpInt;
  
#line 1587
  if (pc != nil) {
    
#line 1589
    id<JavaUtilEnumeration> policyConstraints = [pc getObjects];
    
#line 1591
    while ([((id<JavaUtilEnumeration>) nil_chk(policyConstraints)) hasMoreElements]) {
      
#line 1593
      @try {
        
#line 1596
        OrgSpongycastleAsn1ASN1TaggedObject *constraint = OrgSpongycastleAsn1ASN1TaggedObject_getInstanceWithId_([policyConstraints nextElement]);
        if ([((OrgSpongycastleAsn1ASN1TaggedObject *) nil_chk(constraint)) getTagNo] == 0) {
          
#line 1599
          tmpInt = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1ASN1Integer *) nil_chk(OrgSpongycastleAsn1ASN1Integer_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(constraint, false))) getValue])) intValue];
          if (tmpInt < explicitPolicy) {
            
#line 1602
            return tmpInt;
          }
          break;
        }
      }
      @catch (JavaLangIllegalArgumentException *e) {
        
#line 1609
        @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy constraints extension contents cannot be decoded.",
#line 1610
        e, certPath, index);
      }
    }
  }
  return explicitPolicy;
}


#line 1617
jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertI2WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint policyMapping) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 1623
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  
#line 1628
  OrgSpongycastleAsn1ASN1Sequence *pc = nil;
  @try {
    
#line 1631
    pc = OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert,
#line 1632
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_POLICY_CONSTRAINTS));
  }
  @catch (JavaLangException *e) {
    
#line 1636
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy constraints extension cannot be decoded.", e, certPath,
#line 1637
    index);
  }
  
#line 1640
  jint tmpInt;
  
#line 1642
  if (pc != nil) {
    
#line 1644
    id<JavaUtilEnumeration> policyConstraints = [pc getObjects];
    
#line 1646
    while ([((id<JavaUtilEnumeration>) nil_chk(policyConstraints)) hasMoreElements]) {
      
#line 1648
      @try {
        
#line 1650
        OrgSpongycastleAsn1ASN1TaggedObject *constraint = OrgSpongycastleAsn1ASN1TaggedObject_getInstanceWithId_([policyConstraints nextElement]);
        if ([((OrgSpongycastleAsn1ASN1TaggedObject *) nil_chk(constraint)) getTagNo] == 1) {
          
#line 1653
          tmpInt = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1ASN1Integer *) nil_chk(OrgSpongycastleAsn1ASN1Integer_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(constraint, false))) getValue])) intValue];
          if (tmpInt < policyMapping) {
            
#line 1656
            return tmpInt;
          }
          break;
        }
      }
      @catch (JavaLangIllegalArgumentException *e) {
        
#line 1663
        @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy constraints extension contents cannot be decoded.",
#line 1664
        e, certPath, index);
      }
    }
  }
  return policyMapping;
}


#line 1671
void OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertGWithJavaSecurityCertCertPath_withInt_withOrgSpongycastleJceProviderPKIXNameConstraintValidator_(JavaSecurityCertCertPath *certPath, jint index, OrgSpongycastleJceProviderPKIXNameConstraintValidator *nameConstraintValidator) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 1677
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  
#line 1682
  OrgSpongycastleAsn1X509NameConstraints *nc = nil;
  @try {
    
#line 1685
    OrgSpongycastleAsn1ASN1Sequence *ncSeq = OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert,
#line 1686
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_NAME_CONSTRAINTS));
    if (ncSeq != nil) {
      
#line 1689
      nc = OrgSpongycastleAsn1X509NameConstraints_getInstanceWithId_(ncSeq);
    }
  }
  @catch (JavaLangException *e) {
    
#line 1694
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Name constraints extension could not be decoded.", e, certPath,
#line 1695
    index);
  }
  if (nc != nil) {
    
#line 1703
    IOSObjectArray *permitted = [nc getPermittedSubtrees];
    if (permitted != nil) {
      
#line 1706
      @try {
        
#line 1708
        [((OrgSpongycastleJceProviderPKIXNameConstraintValidator *) nil_chk(nameConstraintValidator)) intersectPermittedSubtreeWithOrgSpongycastleAsn1X509GeneralSubtreeArray:permitted];
      }
      @catch (JavaLangException *ex) {
        
#line 1712
        @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(
#line 1713
        @"Permitted subtrees cannot be build from name constraints extension.", ex, certPath, index);
      }
    }
    
#line 1720
    IOSObjectArray *excluded = [nc getExcludedSubtrees];
    if (excluded != nil) {
      
#line 1723
      for (jint i = 0; i != excluded->size_; i++)
#line 1724
      @try {
        
#line 1726
        [((OrgSpongycastleJceProviderPKIXNameConstraintValidator *) nil_chk(nameConstraintValidator)) addExcludedSubtreeWithOrgSpongycastleAsn1X509GeneralSubtree:IOSObjectArray_Get(excluded, i)];
      }
      @catch (JavaLangException *ex) {
        
#line 1730
        @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(
#line 1731
        @"Excluded subtrees cannot be build from name constraints extension.", ex, certPath, index);
      }
    }
  }
}


#line 1755
void OrgSpongycastleJceProviderRFC3280CertPathUtilities_checkCRLWithOrgSpongycastleAsn1X509DistributionPoint_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withOrgSpongycastleJceProviderBCCertStatus_withOrgSpongycastleJceProviderReasonsMask_withJavaUtilList_withOrgSpongycastleJcajceUtilJcaJceHelper_(OrgSpongycastleAsn1X509DistributionPoint *dp, OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertX509Certificate *cert, JavaUtilDate *validDate, JavaSecurityCertX509Certificate *defaultCRLSignCert, id<JavaSecurityPublicKey> defaultCRLSignKey, OrgSpongycastleJceProviderBCCertStatus *certStatus, OrgSpongycastleJceProviderReasonsMask *reasonMask, id<JavaUtilList> certPathCerts, id<OrgSpongycastleJcajceUtilJcaJceHelper> helper) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 1768
  JavaUtilDate *currentDate = new_JavaUtilDate_initWithLong_(JavaLangSystem_currentTimeMillis());
  if ([((JavaUtilDate *) nil_chk(validDate)) getTime] > [currentDate getTime]) {
    
#line 1771
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(@"Validation time is in future.");
  }
  
#line 1782
  id<JavaUtilSet> crls = OrgSpongycastleJceProviderCertPathValidatorUtilities_getCompleteCRLsWithOrgSpongycastleAsn1X509DistributionPoint_withId_withJavaUtilDate_withOrgSpongycastleJcajcePKIXExtendedParameters_(dp, cert, currentDate, paramsPKIX);
  jboolean validCrlFound = false;
  OrgSpongycastleJceProviderAnnotatedException *lastException = nil;
  id<JavaUtilIterator> crl_iter = [((id<JavaUtilSet>) nil_chk(crls)) iterator];
  
#line 1787
  while ([((id<JavaUtilIterator>) nil_chk(crl_iter)) hasNext] && [((OrgSpongycastleJceProviderBCCertStatus *) nil_chk(certStatus)) getCertStatus] == OrgSpongycastleJceProviderBCCertStatus_UNREVOKED && ![((OrgSpongycastleJceProviderReasonsMask *) nil_chk(reasonMask)) isAllReasons]) {
    
#line 1789
    @try {
      
#line 1791
      JavaSecurityCertX509CRL *crl = (JavaSecurityCertX509CRL *) cast_chk([crl_iter next], [JavaSecurityCertX509CRL class]);
      
#line 1794
      OrgSpongycastleJceProviderReasonsMask *interimReasonsMask = OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLDWithJavaSecurityCertX509CRL_withOrgSpongycastleAsn1X509DistributionPoint_(crl, dp);
      
#line 1802
      if (![((OrgSpongycastleJceProviderReasonsMask *) nil_chk(interimReasonsMask)) hasNewReasonsWithOrgSpongycastleJceProviderReasonsMask:reasonMask]) {
        
#line 1804
        continue;
      }
      
#line 1808
      id<JavaUtilSet> keys = OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLFWithJavaSecurityCertX509CRL_withId_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaUtilList_withOrgSpongycastleJcajceUtilJcaJceHelper_(crl, cert, defaultCRLSignCert, defaultCRLSignKey,
#line 1809
      paramsPKIX, certPathCerts, helper);
      
#line 1811
      id<JavaSecurityPublicKey> key = OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLGWithJavaSecurityCertX509CRL_withJavaUtilSet_(crl, keys);
      
#line 1813
      JavaSecurityCertX509CRL *deltaCRL = nil;
      
#line 1815
      JavaUtilDate *validityDate = currentDate;
      
#line 1817
      if ([((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getDate] != nil) {
        
#line 1819
        validityDate = [paramsPKIX getDate];
      }
      
#line 1822
      if ([paramsPKIX isUseDeltasEnabled]) {
        
#line 1825
        id<JavaUtilSet> deltaCRLs = OrgSpongycastleJceProviderCertPathValidatorUtilities_getDeltaCRLsWithJavaUtilDate_withJavaSecurityCertX509CRL_withJavaUtilList_withJavaUtilList_(validityDate, crl, [paramsPKIX getCertStores], [paramsPKIX getCRLStores]);
        
#line 1828
        deltaCRL = OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLHWithJavaUtilSet_withJavaSecurityPublicKey_(deltaCRLs, key);
      }
      
#line 1844
      if ([paramsPKIX getValidityModel] != OrgSpongycastleJcajcePKIXExtendedParameters_CHAIN_VALIDITY_MODEL) {
        
#line 1851
        if ([((JavaUtilDate *) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getNotAfter])) getTime] < [((JavaUtilDate *) nil_chk([((JavaSecurityCertX509CRL *) nil_chk(crl)) getThisUpdate])) getTime]) {
          
#line 1853
          @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(@"No valid CRL for current time found.");
        }
      }
      
#line 1857
      OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLB1WithOrgSpongycastleAsn1X509DistributionPoint_withId_withJavaSecurityCertX509CRL_(dp, cert, crl);
      
#line 1860
      OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLB2WithOrgSpongycastleAsn1X509DistributionPoint_withId_withJavaSecurityCertX509CRL_(dp, cert, crl);
      
#line 1863
      OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLCWithJavaSecurityCertX509CRL_withJavaSecurityCertX509CRL_withOrgSpongycastleJcajcePKIXExtendedParameters_(deltaCRL, crl, paramsPKIX);
      
#line 1866
      OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLIWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withOrgSpongycastleJceProviderBCCertStatus_withOrgSpongycastleJcajcePKIXExtendedParameters_(validDate, deltaCRL, cert, certStatus, paramsPKIX);
      
#line 1869
      OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLJWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withOrgSpongycastleJceProviderBCCertStatus_(validDate, crl, cert, certStatus);
      
#line 1872
      if ([((OrgSpongycastleJceProviderBCCertStatus *) nil_chk(certStatus)) getCertStatus] == OrgSpongycastleAsn1X509CRLReason_removeFromCRL) {
        
#line 1874
        [certStatus setCertStatusWithInt:OrgSpongycastleJceProviderBCCertStatus_UNREVOKED];
      }
      
#line 1878
      [((OrgSpongycastleJceProviderReasonsMask *) nil_chk(reasonMask)) addReasonsWithOrgSpongycastleJceProviderReasonsMask:interimReasonsMask];
      
#line 1880
      id<JavaUtilSet> criticalExtensions = [((JavaSecurityCertX509CRL *) nil_chk(crl)) getCriticalExtensionOIDs];
      if (criticalExtensions != nil) {
        
#line 1883
        criticalExtensions = new_JavaUtilHashSet_initWithJavaUtilCollection_(criticalExtensions);
        [criticalExtensions removeWithId:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, issuingDistributionPoint))) getId]];
        [criticalExtensions removeWithId:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, deltaCRLIndicator))) getId]];
        
#line 1887
        if (![criticalExtensions isEmpty]) {
          
#line 1889
          @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(@"CRL contains unsupported critical extensions.");
        }
      }
      
#line 1893
      if (deltaCRL != nil) {
        
#line 1895
        criticalExtensions = [deltaCRL getCriticalExtensionOIDs];
        if (criticalExtensions != nil) {
          
#line 1898
          criticalExtensions = new_JavaUtilHashSet_initWithJavaUtilCollection_(criticalExtensions);
          [criticalExtensions removeWithId:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, issuingDistributionPoint))) getId]];
          [criticalExtensions removeWithId:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, deltaCRLIndicator))) getId]];
          if (![criticalExtensions isEmpty]) {
            
#line 1903
            @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(@"Delta CRL contains unsupported critical extension.");
          }
        }
      }
      
#line 1908
      validCrlFound = true;
    }
    @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
      
#line 1912
      lastException = e;
    }
  }
  if (!validCrlFound) {
    
#line 1917
    @throw nil_chk(lastException);
  }
}


#line 1934
void OrgSpongycastleJceProviderRFC3280CertPathUtilities_checkCRLsWithOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withJavaUtilList_withOrgSpongycastleJcajceUtilJcaJceHelper_(OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertX509Certificate *cert, JavaUtilDate *validDate, JavaSecurityCertX509Certificate *sign, id<JavaSecurityPublicKey> workingPublicKey, id<JavaUtilList> certPathCerts, id<OrgSpongycastleJcajceUtilJcaJceHelper> helper) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 1944
  OrgSpongycastleJceProviderAnnotatedException *lastException = nil;
  OrgSpongycastleAsn1X509CRLDistPoint *crldp = nil;
  @try {
    
#line 1948
    crldp = OrgSpongycastleAsn1X509CRLDistPoint_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert,
#line 1949
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_CRL_DISTRIBUTION_POINTS));
  }
  @catch (JavaLangException *e) {
    
#line 1953
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"CRL distribution point extension could not be read.", e);
  }
  
#line 1956
  OrgSpongycastleJcajcePKIXExtendedParameters_Builder *paramsBldr = new_OrgSpongycastleJcajcePKIXExtendedParameters_Builder_initWithOrgSpongycastleJcajcePKIXExtendedParameters_(paramsPKIX);
  @try {
    
#line 1959
    id<JavaUtilList> extras = OrgSpongycastleJceProviderCertPathValidatorUtilities_getAdditionalStoresFromCRLDistributionPointWithOrgSpongycastleAsn1X509CRLDistPoint_withJavaUtilMap_(crldp, [((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getNamedCRLStoreMap]);
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(extras)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      
#line 1962
      (void) [paramsBldr addCRLStoreWithOrgSpongycastleJcajcePKIXCRLStore:(id<OrgSpongycastleJcajcePKIXCRLStore>) cast_check([it next], OrgSpongycastleJcajcePKIXCRLStore_class_())];
    }
  }
  @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
    
#line 1967
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 1968
    @"No additional CRL locations could be decoded from CRL distribution point extension.", e);
  }
  OrgSpongycastleJceProviderBCCertStatus *certStatus = new_OrgSpongycastleJceProviderBCCertStatus_initPackagePrivate();
  OrgSpongycastleJceProviderReasonsMask *reasonsMask = new_OrgSpongycastleJceProviderReasonsMask_initPackagePrivate();
  OrgSpongycastleJcajcePKIXExtendedParameters *finalParams = [paramsBldr build];
  
#line 1974
  jboolean validCrlFound = false;
  
#line 1976
  if (crldp != nil) {
    
#line 1978
    IOSObjectArray *dps = nil;
    @try {
      
#line 1981
      dps = [crldp getDistributionPoints];
    }
    @catch (JavaLangException *e) {
      
#line 1985
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Distribution points could not be read.", e);
    }
    if (dps != nil) {
      
#line 1989
      for (jint i = 0; i < dps->size_ && [certStatus getCertStatus] == OrgSpongycastleJceProviderBCCertStatus_UNREVOKED && ![reasonsMask isAllReasons]; i++) {
        
#line 1991
        @try {
          
#line 1993
          OrgSpongycastleJceProviderRFC3280CertPathUtilities_checkCRLWithOrgSpongycastleAsn1X509DistributionPoint_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withOrgSpongycastleJceProviderBCCertStatus_withOrgSpongycastleJceProviderReasonsMask_withJavaUtilList_withOrgSpongycastleJcajceUtilJcaJceHelper_(IOSObjectArray_Get(dps, i), finalParams, cert, validDate, sign, workingPublicKey, certStatus, reasonsMask, certPathCerts, helper);
          validCrlFound = true;
        }
        @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
          
#line 1998
          lastException = e;
        }
      }
    }
  }
  
#line 2010
  if ([certStatus getCertStatus] == OrgSpongycastleJceProviderBCCertStatus_UNREVOKED && ![reasonsMask isAllReasons]) {
    
#line 2012
    @try {
      
#line 2019
      OrgSpongycastleAsn1ASN1Primitive *issuer = nil;
      @try {
        
#line 2022
        issuer = [new_OrgSpongycastleAsn1ASN1InputStream_initWithByteArray_([((OrgSpongycastleAsn1X500X500Name *) nil_chk(OrgSpongycastleJceProviderPrincipalUtils_getEncodedIssuerPrincipalWithId_(cert))) getEncoded]) readObject];
      }
      @catch (
#line 2025
      JavaLangException *e) {
        
#line 2027
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Issuer from certificate for CRL could not be reencoded.", e);
      }
      OrgSpongycastleAsn1X509DistributionPoint *dp = new_OrgSpongycastleAsn1X509DistributionPoint_initWithOrgSpongycastleAsn1X509DistributionPointName_withOrgSpongycastleAsn1X509ReasonFlags_withOrgSpongycastleAsn1X509GeneralNames_(new_OrgSpongycastleAsn1X509DistributionPointName_initWithInt_withOrgSpongycastleAsn1ASN1Encodable_(0, new_OrgSpongycastleAsn1X509GeneralNames_initWithOrgSpongycastleAsn1X509GeneralName_(new_OrgSpongycastleAsn1X509GeneralName_initWithInt_withOrgSpongycastleAsn1ASN1Encodable_(
#line 2030
      OrgSpongycastleAsn1X509GeneralName_directoryName, issuer))), nil, nil);
      OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIXClone = (OrgSpongycastleJcajcePKIXExtendedParameters *) cast_chk([paramsPKIX java_clone], [OrgSpongycastleJcajcePKIXExtendedParameters class]);
      OrgSpongycastleJceProviderRFC3280CertPathUtilities_checkCRLWithOrgSpongycastleAsn1X509DistributionPoint_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withOrgSpongycastleJceProviderBCCertStatus_withOrgSpongycastleJceProviderReasonsMask_withJavaUtilList_withOrgSpongycastleJcajceUtilJcaJceHelper_(dp, paramsPKIXClone, cert, validDate, sign, workingPublicKey, certStatus, reasonsMask,
#line 2033
      certPathCerts, helper);
      validCrlFound = true;
    }
    @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
      
#line 2038
      lastException = e;
    }
  }
  
#line 2042
  if (!validCrlFound) {
    
#line 2044
    if ([lastException isKindOfClass:[OrgSpongycastleJceProviderAnnotatedException class]]) {
      
#line 2046
      @throw nil_chk(lastException);
    }
    
#line 2049
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"No valid CRL found.", lastException);
  }
  if ([certStatus getCertStatus] != OrgSpongycastleJceProviderBCCertStatus_UNREVOKED) {
    
#line 2053
    JavaTextSimpleDateFormat *df = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyy-MM-dd HH:mm:ss Z");
    [df setTimeZoneWithJavaUtilTimeZone:JavaUtilTimeZone_getTimeZoneWithNSString_(@"UTC")];
    NSString *message = JreStrcat("$$", @"Certificate revocation after ", [df formatWithJavaUtilDate:[certStatus getRevocationDate]]);
    (void) JreStrAppendStrong(&message, "$$", @", reason: ", IOSObjectArray_Get(nil_chk(OrgSpongycastleJceProviderRFC3280CertPathUtilities_crlReasons), [certStatus getCertStatus]));
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(message);
  }
  if (![reasonsMask isAllReasons] && [certStatus getCertStatus] == OrgSpongycastleJceProviderBCCertStatus_UNREVOKED) {
    
#line 2061
    [certStatus setCertStatusWithInt:OrgSpongycastleJceProviderBCCertStatus_UNDETERMINED];
  }
  if ([certStatus getCertStatus] == OrgSpongycastleJceProviderBCCertStatus_UNDETERMINED) {
    
#line 2065
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(@"Certificate status could not be determined.");
  }
}


#line 2069
jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertJWithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint inhibitAnyPolicy) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 2075
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  
#line 2080
  OrgSpongycastleAsn1ASN1Integer *iap = nil;
  @try {
    
#line 2083
    iap = OrgSpongycastleAsn1ASN1Integer_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert,
#line 2084
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_INHIBIT_ANY_POLICY));
  }
  @catch (JavaLangException *e) {
    
#line 2088
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Inhibit any-policy extension cannot be decoded.", e, certPath,
#line 2089
    index);
  }
  
#line 2092
  if (iap != nil) {
    
#line 2094
    jint _inhibitAnyPolicy = [((JavaMathBigInteger *) nil_chk([iap getValue])) intValue];
    
#line 2096
    if (_inhibitAnyPolicy < inhibitAnyPolicy) {
      
#line 2098
      return _inhibitAnyPolicy;
    }
  }
  return inhibitAnyPolicy;
}


#line 2104
void OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertKWithJavaSecurityCertCertPath_withInt_(JavaSecurityCertCertPath *certPath, jint index) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 2109
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  
#line 2114
  OrgSpongycastleAsn1X509BasicConstraints *bc = nil;
  @try {
    
#line 2117
    bc = OrgSpongycastleAsn1X509BasicConstraints_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert,
#line 2118
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_BASIC_CONSTRAINTS));
  }
  @catch (JavaLangException *e) {
    
#line 2122
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Basic constraints extension cannot be decoded.", e, certPath,
#line 2123
    index);
  }
  if (bc != nil) {
    
#line 2127
    if (!([bc isCA])) {
      
#line 2129
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(@"Not a CA certificate");
    }
  }
  else {
    
#line 2134
    @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(@"Intermediate certificate lacks BasicConstraints");
  }
}


#line 2138
jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertLWithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint maxPathLength) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 2144
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  
#line 2149
  if (!OrgSpongycastleJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert)) {
    
#line 2151
    if (maxPathLength <= 0) {
      
#line 2153
      @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Max path length not greater than zero", nil, certPath, index);
    }
    
#line 2156
    return maxPathLength - 1;
  }
  return maxPathLength;
}

jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertMWithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint maxPathLength) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 2167
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  
#line 2173
  OrgSpongycastleAsn1X509BasicConstraints *bc = nil;
  @try {
    
#line 2176
    bc = OrgSpongycastleAsn1X509BasicConstraints_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert,
#line 2177
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_BASIC_CONSTRAINTS));
  }
  @catch (JavaLangException *e) {
    
#line 2181
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Basic constraints extension cannot be decoded.", e, certPath,
#line 2182
    index);
  }
  if (bc != nil) {
    
#line 2186
    JavaMathBigInteger *_pathLengthConstraint = [bc getPathLenConstraint];
    
#line 2188
    if (_pathLengthConstraint != nil) {
      
#line 2190
      jint _plc = [_pathLengthConstraint intValue];
      
#line 2192
      if (_plc < maxPathLength) {
        
#line 2194
        return _plc;
      }
    }
  }
  return maxPathLength;
}


#line 2201
void OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertNWithJavaSecurityCertCertPath_withInt_(JavaSecurityCertCertPath *certPath, jint index) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 2206
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  
#line 2212
  IOSBooleanArray *_usage = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getKeyUsage];
  
#line 2214
  if ((_usage != nil) && !IOSBooleanArray_Get(nil_chk(_usage), OrgSpongycastleJceProviderRFC3280CertPathUtilities_KEY_CERT_SIGN)) {
    
#line 2216
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(
#line 2217
    @"Issuer certificate keyusage extension is critical and does not permit key signing.", nil,
#line 2218
    certPath, index);
  }
}


#line 2222
void OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertOWithJavaSecurityCertCertPath_withInt_withJavaUtilSet_withJavaUtilList_(JavaSecurityCertCertPath *certPath, jint index, id<JavaUtilSet> criticalExtensions, id<JavaUtilList> pathCheckers) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 2229
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  
#line 2235
  id<JavaUtilIterator> tmpIter;
  tmpIter = [((id<JavaUtilList>) nil_chk(pathCheckers)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(tmpIter)) hasNext]) {
    
#line 2239
    @try {
      
#line 2241
      [((JavaSecurityCertPKIXCertPathChecker *) nil_chk(((JavaSecurityCertPKIXCertPathChecker *) cast_chk([tmpIter next], [JavaSecurityCertPKIXCertPathChecker class])))) checkWithJavaSecurityCertCertificate:cert withJavaUtilCollection:criticalExtensions];
    }
    @catch (JavaSecurityCertCertPathValidatorException *e) {
      
#line 2245
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_([e getMessage], [e getCause], certPath, index);
    }
  }
  if (![((id<JavaUtilSet>) nil_chk(criticalExtensions)) isEmpty]) {
    
#line 2250
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(JreStrcat("$@", @"Certificate has unsupported critical extension: ", criticalExtensions), nil, certPath,
#line 2251
    index);
  }
}

jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH1WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint explicitPolicy) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 2260
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  
#line 2265
  if (!OrgSpongycastleJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert)) {
    
#line 2270
    if (explicitPolicy != 0) {
      
#line 2272
      return explicitPolicy - 1;
    }
  }
  return explicitPolicy;
}


#line 2278
jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH2WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint policyMapping) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 2283
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  
#line 2288
  if (!OrgSpongycastleJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert)) {
    
#line 2293
    if (policyMapping != 0) {
      
#line 2295
      return policyMapping - 1;
    }
  }
  return policyMapping;
}


#line 2301
jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH3WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint inhibitAnyPolicy) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 2306
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  
#line 2311
  if (!OrgSpongycastleJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert)) {
    
#line 2316
    if (inhibitAnyPolicy != 0) {
      
#line 2318
      return inhibitAnyPolicy - 1;
    }
  }
  return inhibitAnyPolicy;
}


#line 2338
jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_wrapupCertAWithInt_withJavaSecurityCertX509Certificate_(jint explicitPolicy, JavaSecurityCertX509Certificate *cert) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 2345
  if (!OrgSpongycastleJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert) && (explicitPolicy != 0)) {
    
#line 2347
    explicitPolicy--;
  }
  return explicitPolicy;
}


#line 2352
jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_wrapupCertBWithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint explicitPolicy) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 2358
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  
#line 2363
  jint tmpInt;
  OrgSpongycastleAsn1ASN1Sequence *pc = nil;
  @try {
    
#line 2367
    pc = OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert,
#line 2368
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_POLICY_CONSTRAINTS));
  }
  @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
    
#line 2372
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Policy constraints could not be decoded.", e, certPath, index);
  }
  if (pc != nil) {
    
#line 2376
    id<JavaUtilEnumeration> policyConstraints = [pc getObjects];
    
#line 2378
    while ([((id<JavaUtilEnumeration>) nil_chk(policyConstraints)) hasMoreElements]) {
      
#line 2380
      OrgSpongycastleAsn1ASN1TaggedObject *constraint = (OrgSpongycastleAsn1ASN1TaggedObject *) cast_chk([policyConstraints nextElement], [OrgSpongycastleAsn1ASN1TaggedObject class]);
      switch ([((OrgSpongycastleAsn1ASN1TaggedObject *) nil_chk(constraint)) getTagNo]) {
        
#line 2383
        case 0:
        @try {
          
#line 2386
          tmpInt = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1ASN1Integer *) nil_chk(OrgSpongycastleAsn1ASN1Integer_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(constraint, false))) getValue])) intValue];
        }
        @catch (JavaLangException *e) {
          
#line 2390
          @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(
#line 2391
          @"Policy constraints requireExplicitPolicy field could not be decoded.", e, certPath,
#line 2392
          index);
        }
        if (tmpInt == 0) {
          
#line 2396
          return 0;
        }
        break;
      }
    }
  }
  return explicitPolicy;
}


#line 2405
void OrgSpongycastleJceProviderRFC3280CertPathUtilities_wrapupCertFWithJavaSecurityCertCertPath_withInt_withJavaUtilList_withJavaUtilSet_(JavaSecurityCertCertPath *certPath, jint index, id<JavaUtilList> pathCheckers, id<JavaUtilSet> criticalExtensions) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 2412
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertX509Certificate class]);
  id<JavaUtilIterator> tmpIter;
  tmpIter = [((id<JavaUtilList>) nil_chk(pathCheckers)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(tmpIter)) hasNext]) {
    
#line 2418
    @try {
      
#line 2420
      [((JavaSecurityCertPKIXCertPathChecker *) nil_chk(((JavaSecurityCertPKIXCertPathChecker *) cast_chk([tmpIter next], [JavaSecurityCertPKIXCertPathChecker class])))) checkWithJavaSecurityCertCertificate:cert withJavaUtilCollection:criticalExtensions];
    }
    @catch (JavaSecurityCertCertPathValidatorException *e) {
      
#line 2424
      @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Additional certificate path checker failed.", e, certPath,
#line 2425
      index);
    }
  }
  
#line 2429
  if (![((id<JavaUtilSet>) nil_chk(criticalExtensions)) isEmpty]) {
    
#line 2431
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(JreStrcat("$@", @"Certificate has unsupported critical extension: ", criticalExtensions), nil, certPath,
#line 2432
    index);
  }
}


#line 2436
OrgSpongycastleJceProviderPKIXPolicyNode *OrgSpongycastleJceProviderRFC3280CertPathUtilities_wrapupCertGWithJavaSecurityCertCertPath_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaUtilSet_withInt_withJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_withJavaUtilSet_(JavaSecurityCertCertPath *certPath, OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX, id<JavaUtilSet> userInitialPolicySet, jint index, IOSObjectArray *policyNodes, OrgSpongycastleJceProviderPKIXPolicyNode *validPolicyTree, id<JavaUtilSet> acceptablePolicies) {
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_initialize();
  
#line 2446
  jint n = [((id<JavaUtilList>) nil_chk([((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates])) size];
  
#line 2450
  OrgSpongycastleJceProviderPKIXPolicyNode *intersection;
  
#line 2455
  if (validPolicyTree == nil) {
    
#line 2457
    if ([((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) isExplicitPolicyRequired]) {
      
#line 2459
      @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Explicit policy requested but none available.", nil,
#line 2460
      certPath, index);
    }
    intersection = nil;
  }
  else if (OrgSpongycastleJceProviderCertPathValidatorUtilities_isAnyPolicyWithJavaUtilSet_(userInitialPolicySet)) {
    
#line 2467
    if ([((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) isExplicitPolicyRequired]) {
      
#line 2469
      if ([((id<JavaUtilSet>) nil_chk(acceptablePolicies)) isEmpty]) {
        
#line 2471
        @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Explicit policy requested but none available.", nil,
#line 2472
        certPath, index);
      }
      else {
        
#line 2476
        id<JavaUtilSet> _validPolicyNodeSet = new_JavaUtilHashSet_init();
        
#line 2478
        for (jint j = 0; j < ((IOSObjectArray *) nil_chk(policyNodes))->size_; j++) {
          
#line 2480
          id<JavaUtilList> _nodeDepth = IOSObjectArray_Get(policyNodes, j);
          
#line 2482
          for (jint k = 0; k < [((id<JavaUtilList>) nil_chk(_nodeDepth)) size]; k++) {
            
#line 2484
            OrgSpongycastleJceProviderPKIXPolicyNode *_node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([_nodeDepth getWithInt:k], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
            
#line 2486
            if ([((NSString *) nil_chk(OrgSpongycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY)) isEqual:[((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getValidPolicy]]) {
              
#line 2488
              id<JavaUtilIterator> _iter = [_node getChildren];
              while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
                
#line 2491
                [_validPolicyNodeSet addWithId:[_iter next]];
              }
            }
          }
        }
        
#line 2497
        id<JavaUtilIterator> _vpnsIter = [_validPolicyNodeSet iterator];
        while ([((id<JavaUtilIterator>) nil_chk(_vpnsIter)) hasNext]) {
          
#line 2500
          OrgSpongycastleJceProviderPKIXPolicyNode *_node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([_vpnsIter next], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
          NSString *_validPolicy = [((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getValidPolicy];
          
#line 2503
          if (![acceptablePolicies containsWithId:_validPolicy]) {
          }
        }
        
#line 2510
        if (validPolicyTree != nil) {
          
#line 2512
          for (jint j = (n - 1); j >= 0; j--) {
            
#line 2514
            id<JavaUtilList> nodes = IOSObjectArray_Get(policyNodes, j);
            
#line 2516
            for (jint k = 0; k < [((id<JavaUtilList>) nil_chk(nodes)) size]; k++) {
              
#line 2518
              OrgSpongycastleJceProviderPKIXPolicyNode *node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([nodes getWithInt:k], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
              if (![((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(node)) hasChildren]) {
                
#line 2521
                validPolicyTree = OrgSpongycastleJceProviderCertPathValidatorUtilities_removePolicyNodeWithOrgSpongycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_(validPolicyTree,
#line 2522
                policyNodes, node);
              }
            }
          }
        }
      }
    }
    
#line 2530
    intersection = validPolicyTree;
  }
  else {
    
#line 2547
    id<JavaUtilSet> _validPolicyNodeSet = new_JavaUtilHashSet_init();
    
#line 2549
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(policyNodes))->size_; j++) {
      
#line 2551
      id<JavaUtilList> _nodeDepth = IOSObjectArray_Get(policyNodes, j);
      
#line 2553
      for (jint k = 0; k < [((id<JavaUtilList>) nil_chk(_nodeDepth)) size]; k++) {
        
#line 2555
        OrgSpongycastleJceProviderPKIXPolicyNode *_node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([_nodeDepth getWithInt:k], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
        
#line 2557
        if ([((NSString *) nil_chk(OrgSpongycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY)) isEqual:[((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getValidPolicy]]) {
          
#line 2559
          id<JavaUtilIterator> _iter = [_node getChildren];
          while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
            
#line 2562
            OrgSpongycastleJceProviderPKIXPolicyNode *_c_node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([_iter next], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
            if (![OrgSpongycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY isEqual:[((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(_c_node)) getValidPolicy]]) {
              
#line 2565
              [_validPolicyNodeSet addWithId:_c_node];
            }
          }
        }
      }
    }
    
#line 2575
    id<JavaUtilIterator> _vpnsIter = [_validPolicyNodeSet iterator];
    while ([((id<JavaUtilIterator>) nil_chk(_vpnsIter)) hasNext]) {
      
#line 2578
      OrgSpongycastleJceProviderPKIXPolicyNode *_node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([_vpnsIter next], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
      NSString *_validPolicy = [((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getValidPolicy];
      
#line 2581
      if (![((id<JavaUtilSet>) nil_chk(userInitialPolicySet)) containsWithId:_validPolicy]) {
        
#line 2583
        validPolicyTree = OrgSpongycastleJceProviderCertPathValidatorUtilities_removePolicyNodeWithOrgSpongycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_(validPolicyTree, policyNodes, _node);
      }
    }
    
#line 2590
    if (validPolicyTree != nil) {
      
#line 2592
      for (jint j = (n - 1); j >= 0; j--) {
        
#line 2594
        id<JavaUtilList> nodes = IOSObjectArray_Get(policyNodes, j);
        
#line 2596
        for (jint k = 0; k < [((id<JavaUtilList>) nil_chk(nodes)) size]; k++) {
          
#line 2598
          OrgSpongycastleJceProviderPKIXPolicyNode *node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([nodes getWithInt:k], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
          if (![((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(node)) hasChildren]) {
            
#line 2601
            validPolicyTree = OrgSpongycastleJceProviderCertPathValidatorUtilities_removePolicyNodeWithOrgSpongycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_(validPolicyTree, policyNodes,
#line 2602
            node);
          }
        }
      }
    }
    
#line 2608
    intersection = validPolicyTree;
  }
  return intersection;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleJceProviderRFC3280CertPathUtilities)
