//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PdfPKCS7.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_PdfPKCS7")
#ifdef RESTRICT_PdfPKCS7
#define INCLUDE_ALL_PdfPKCS7 0
#else
#define INCLUDE_ALL_PdfPKCS7 1
#endif
#undef RESTRICT_PdfPKCS7

#if !defined (ComAowagieTextPdfPdfPKCS7_) && (INCLUDE_ALL_PdfPKCS7 || defined(INCLUDE_ComAowagieTextPdfPdfPKCS7))
#define ComAowagieTextPdfPdfPKCS7_

@class ComAowagieTextPdfPdfPKCS7_X509Name;
@class IOSByteArray;
@class IOSObjectArray;
@class JavaSecurityCertX509Certificate;
@class JavaUtilCalendar;
@class OrgSpongycastleCertOcspBasicOCSPResp;
@protocol JavaSecurityPrivateKey;
@protocol JavaUtilCollection;

/*!
 @brief This class does all the processing related to signing and verifying a PKCS#7
  signature.
 <p>
  It's based in code found at org.spongycastle.
 */
@interface ComAowagieTextPdfPdfPKCS7 : NSObject

#pragma mark Public

/*!
 @brief Get all the X.509 certificates associated with this PKCS#7 object in no particular order.
 Other certificates, from OCSP for example, will also be included.
 @return the X.509 certificates associated with this PKCS#7 object
 */
- (IOSObjectArray *)getCertificates;

/*!
 @brief Getter for property contactinfo.
 @return Value of property contactinfo.
 */
- (NSString *)getContactInfo;

/*!
 @brief Get the X.509 certificate revocation lists associated with this PKCS#7 object
 @return the X.509 certificate revocation lists associated with this PKCS#7 object
 */
- (id<JavaUtilCollection>)getCRLs;

/*!
 @brief Get the algorithm used to calculate the message digest
 @return the algorithm used to calculate the message digest
 */
- (NSString *)getDigestAlgorithm;

/*!
 @brief Gets the bytes for the PKCS#1 object.
 @return a byte array
 */
- (IOSByteArray *)getEncodedPKCS1;

/*!
 @brief Gets the bytes for the PKCS7SignedData object.
 @return the bytes for the PKCS7SignedData object
 */
- (IOSByteArray *)getEncodedPKCS7;

/*!
 @brief Returns the algorithm.
 @return the digest algorithm
 */
- (NSString *)getHashAlgorithm;

/*!
 @brief Getter for property location.
 @return Value of property location.
 */
- (NSString *)getLocation;

/*!
 @brief Gets the OCSP basic response if there is one.
 @return the OCSP basic response or null
 @since 2.1.6
 */
- (OrgSpongycastleCertOcspBasicOCSPResp *)getOcsp;

/*!
 @brief Obtiene el PKCS&#35;1 de la firma PKCS&#35;7 del PDF.
 @return PKCS&#35;1 de la firma PKCS&#35;7 del PDF.
 */
- (IOSByteArray *)getPkcs1;

/*!
 @brief Getter for property reason.
 @return Value of property reason.
 */
- (NSString *)getReason;

/*!
 @brief Get the X.509 sign certificate chain associated with this PKCS#7 object.
 Only the certificates used for the main signature will be returned, with
  the signing certificate first.
 @return the X.509 certificates associated with this PKCS#7 object
 @since 2.1.6
 */
- (IOSObjectArray *)getSignCertificateChain;

/*!
 @brief Getter for property signDate.
 @return Value of property signDate.
 */
- (JavaUtilCalendar *)getSignDate;

/*!
 @brief Get the X.509 certificate actually used to sign the digest.
 @return the X.509 certificate actually used to sign the digest
 */
- (JavaSecurityCertX509Certificate *)getSigningCertificate;

/*!
 @brief Get the version of the PKCS#7 "SignerInfo" object.Always 1
 @return the version of the PKCS#7 "SignerInfo" object. Always 1
 */
- (jint)getSigningInfoVersion;

/*!
 @brief Getter for property sigName.
 @return Value of property sigName.
 */
- (NSString *)getSignName;

/*!
 @brief Returns the algorithm de hash declarado.
 @return the digest algorithm or <code>null</code> is there isn't a valid
  hash algorithm.
 */
- (NSString *)getStrictHashAlgorithm;

/*!
 @brief Get the subject fields from an X509 Certificate
 @param cert an X509Certificate
 @return an X509Name
 */
+ (ComAowagieTextPdfPdfPKCS7_X509Name *)getSubjectFieldsWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

/*!
 @brief Get the version of the PKCS#7 object.Always 1
 @return the version of the PKCS#7 object. Always 1
 */
- (jint)getVersion;

/*!
 @brief Checks if OCSP revocation refers to the document signing certificate.
 @return true if it checks false otherwise
 @since 2.1.6
 */
- (jboolean)isRevocationValid;

/*!
 @brief Setter for property contactInfo.
 @param contactInfo New value of property contactInfo.
 */
- (void)setContactInfoWithNSString:(NSString *)contactInfo;

/*!
 @brief Sets the digest/signature to an external calculated value.
 @param digest the digest. This is the actual signature
 @param RSAdata the extra data that goes into the data tag in PKCS#7
 @param digestEncryptionAlgorithm the encryption algorithm. It may must be  <CODE> null </CODE>  if the  <CODE> digest </CODE>
   is also  <CODE> null </CODE> . If the  <CODE> digest </CODE>  is not  <CODE> null
  </CODE>  then it may be "RSA" or "DSA"
 */
- (void)setExternalDigestWithByteArray:(IOSByteArray *)digest
                         withByteArray:(IOSByteArray *)RSAdata
                          withNSString:(NSString *)digestEncryptionAlgorithm;

/*!
 @brief Setter for property location.
 @param location New value of property location.
 */
- (void)setLocationWithNSString:(NSString *)location;

/*!
 @brief Setter for property reason.
 @param reason New value of property reason.
 */
- (void)setReasonWithNSString:(NSString *)reason;

/*!
 @brief Setter for property signDate.
 @param signDate New value of property signDate.
 */
- (void)setSignDateWithJavaUtilCalendar:(JavaUtilCalendar *)signDate;

/*!
 @brief Setter for property sigName.
 @param signName New value of property sigName.
 */
- (void)setSignNameWithNSString:(NSString *)signName;

/*!
 @brief Verify the digest.
 @throw SignatureExceptionon error
 @return <CODE>true</CODE> if the signature checks out, <CODE>false</CODE> otherwise.
 */
- (jboolean)verify;

#pragma mark Package-Private

/*!
 @brief Verifies a signature using the sub-filter adbe.x509.rsa_sha1.
 @param contentsKey the /Contents key
 @param certsKey the /Cert key
 @param provider the provider or  <code> null </code>  for the default provider
 */
- (instancetype)initWithByteArray:(IOSByteArray *)contentsKey
                    withByteArray:(IOSByteArray *)certsKey
                     withNSString:(NSString *)provider;

/*!
 @brief Verifies a signature using the sub-filter adbe.pkcs7.detached or
  adbe.pkcs7.sha1.
 @param contentsKey the /Contents key
 @param provider the provider or  <code> null </code>  for the default provider
 */
- (instancetype)initWithByteArray:(IOSByteArray *)contentsKey
                     withNSString:(NSString *)provider;

/*!
 @brief Generates a signature.
 @param privKey the private key
 @param certChain the certificate chain
 @param crlList the certificate revocation list
 @param hashAlgorithm the hash algorithm
 @param provider the provider or  <code> null </code>  for the default provider
 @param hasRSAdata <CODE> true </CODE>  if the sub-filter is adbe.pkcs7.sha1
 @throw InvalidKeyExceptionon error
 @throw NoSuchProviderExceptionon error
 @throw NoSuchAlgorithmExceptionon error
 */
- (instancetype)initWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privKey
          withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
                  withJavaSecurityCertCRLArray:(IOSObjectArray *)crlList
                                  withNSString:(NSString *)hashAlgorithm
                                  withNSString:(NSString *)provider
                                   withBoolean:(jboolean)hasRSAdata;

/*!
 @brief Update the digest with the specified bytes.This method is used both for signing and verifying
 @param buf the data buffer
 @param off the offset in the data buffer
 @param len the data length
 @throw SignatureExceptionon error
 */
- (void)updateWithByteArray:(IOSByteArray *)buf
                    withInt:(jint)off
                    withInt:(jint)len;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfPdfPKCS7)

FOUNDATION_EXPORT void ComAowagieTextPdfPdfPKCS7_initWithByteArray_withByteArray_withNSString_(ComAowagieTextPdfPdfPKCS7 *self, IOSByteArray *contentsKey, IOSByteArray *certsKey, NSString *provider);

FOUNDATION_EXPORT ComAowagieTextPdfPdfPKCS7 *new_ComAowagieTextPdfPdfPKCS7_initWithByteArray_withByteArray_withNSString_(IOSByteArray *contentsKey, IOSByteArray *certsKey, NSString *provider) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfPKCS7 *create_ComAowagieTextPdfPdfPKCS7_initWithByteArray_withByteArray_withNSString_(IOSByteArray *contentsKey, IOSByteArray *certsKey, NSString *provider);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfPKCS7_initWithByteArray_withNSString_(ComAowagieTextPdfPdfPKCS7 *self, IOSByteArray *contentsKey, NSString *provider);

FOUNDATION_EXPORT ComAowagieTextPdfPdfPKCS7 *new_ComAowagieTextPdfPdfPKCS7_initWithByteArray_withNSString_(IOSByteArray *contentsKey, NSString *provider) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfPKCS7 *create_ComAowagieTextPdfPdfPKCS7_initWithByteArray_withNSString_(IOSByteArray *contentsKey, NSString *provider);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfPKCS7_initWithJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_withJavaSecurityCertCRLArray_withNSString_withNSString_withBoolean_(ComAowagieTextPdfPdfPKCS7 *self, id<JavaSecurityPrivateKey> privKey, IOSObjectArray *certChain, IOSObjectArray *crlList, NSString *hashAlgorithm, NSString *provider, jboolean hasRSAdata);

FOUNDATION_EXPORT ComAowagieTextPdfPdfPKCS7 *new_ComAowagieTextPdfPdfPKCS7_initWithJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_withJavaSecurityCertCRLArray_withNSString_withNSString_withBoolean_(id<JavaSecurityPrivateKey> privKey, IOSObjectArray *certChain, IOSObjectArray *crlList, NSString *hashAlgorithm, NSString *provider, jboolean hasRSAdata) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfPKCS7 *create_ComAowagieTextPdfPdfPKCS7_initWithJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_withJavaSecurityCertCRLArray_withNSString_withNSString_withBoolean_(id<JavaSecurityPrivateKey> privKey, IOSObjectArray *certChain, IOSObjectArray *crlList, NSString *hashAlgorithm, NSString *provider, jboolean hasRSAdata);

FOUNDATION_EXPORT ComAowagieTextPdfPdfPKCS7_X509Name *ComAowagieTextPdfPdfPKCS7_getSubjectFieldsWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *cert);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfPKCS7)

#endif

#if !defined (ComAowagieTextPdfPdfPKCS7_X509Name_) && (INCLUDE_ALL_PdfPKCS7 || defined(INCLUDE_ComAowagieTextPdfPdfPKCS7_X509Name))
#define ComAowagieTextPdfPdfPKCS7_X509Name_

@class JavaUtilHashMap;

/*!
 @brief a class that holds an X509 name
 */
@interface ComAowagieTextPdfPdfPKCS7_X509Name : NSObject

#pragma mark Public

- (NSString *)getFieldWithNSString:(NSString *)name;

/*!
 @brief getter for values
 @return a HashMap with the fields of the X509 name
 */
- (JavaUtilHashMap *)getFields;

/*!
 - seealso: java.lang.Object#toString()
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfPdfPKCS7_X509Name)

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfPKCS7_X509Name)

#endif

#pragma pop_macro("INCLUDE_ALL_PdfPKCS7")
