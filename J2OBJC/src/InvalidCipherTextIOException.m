//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/crypto/io/InvalidCipherTextIOException.java
//

#include "CipherIOException.h"
#include "InvalidCipherTextIOException.h"
#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"

#if !__has_feature(objc_arc)
#error "InvalidCipherTextIOException must be compiled with ARC (-fobjc-arc)"
#endif

inline jlong OrgSpongycastleCryptoIoInvalidCipherTextIOException_get_serialVersionUID(void);
#define OrgSpongycastleCryptoIoInvalidCipherTextIOException_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoIoInvalidCipherTextIOException, serialVersionUID, jlong)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/crypto/io/InvalidCipherTextIOException.java"


#line 10
@implementation OrgSpongycastleCryptoIoInvalidCipherTextIOException


#line 15
- (instancetype)initWithNSString:(NSString *)message
           withJavaLangThrowable:(JavaLangThrowable *)cause {
  OrgSpongycastleCryptoIoInvalidCipherTextIOException_initWithNSString_withJavaLangThrowable_(self, message, cause);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgSpongycastleCryptoIoInvalidCipherTextIOException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaLangThrowable;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoIoInvalidCipherTextIOException = { "InvalidCipherTextIOException", "org.spongycastle.crypto.io", ptrTable, methods, fields, 7, 0x1, 1, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoIoInvalidCipherTextIOException;
}

@end


#line 15
void OrgSpongycastleCryptoIoInvalidCipherTextIOException_initWithNSString_withJavaLangThrowable_(OrgSpongycastleCryptoIoInvalidCipherTextIOException *self, NSString *message, JavaLangThrowable *cause) {
  OrgSpongycastleCryptoIoCipherIOException_initWithNSString_withJavaLangThrowable_(self,
#line 17
  message, cause);
}


#line 15
OrgSpongycastleCryptoIoInvalidCipherTextIOException *new_OrgSpongycastleCryptoIoInvalidCipherTextIOException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoIoInvalidCipherTextIOException, initWithNSString_withJavaLangThrowable_, message, cause)
}


#line 15
OrgSpongycastleCryptoIoInvalidCipherTextIOException *create_OrgSpongycastleCryptoIoInvalidCipherTextIOException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoIoInvalidCipherTextIOException, initWithNSString_withJavaLangThrowable_, message, cause)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoIoInvalidCipherTextIOException)
