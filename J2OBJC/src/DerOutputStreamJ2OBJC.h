//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/signers/der/DerOutputStreamJ2OBJC.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_DerOutputStreamJ2OBJC")
#ifdef RESTRICT_DerOutputStreamJ2OBJC
#define INCLUDE_ALL_DerOutputStreamJ2OBJC 0
#else
#define INCLUDE_ALL_DerOutputStreamJ2OBJC 1
#endif
#undef RESTRICT_DerOutputStreamJ2OBJC

#if !defined (EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC_) && (INCLUDE_ALL_DerOutputStreamJ2OBJC || defined(INCLUDE_EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC))
#define EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC_

#define RESTRICT_JavaIoByteArrayOutputStream 1
#define INCLUDE_JavaIoByteArrayOutputStream 1
#include "java/io/ByteArrayOutputStream.h"

#define RESTRICT_DerEncoder 1
#define INCLUDE_EsGobAfirmaCoreSignersDerDerEncoder 1
#include "DerEncoder.h"

@class EsGobAfirmaCoreSignersDerBitArray;
@class EsGobAfirmaCoreSignersDerDerValue;
@class EsGobAfirmaCoreSignersDerObjectIdentifier;
@class IOSByteArray;
@class IOSObjectArray;
@class JavaIoOutputStream;
@class JavaLangInteger;
@class JavaMathBigInteger;
@class JavaUtilDate;

/*!
 @brief Output stream marshaling DER-encoded data.This is eventually provided
  in the form of a byte array; there is no advance limit on the size of
  that byte array.
 <P>At this time, this class supports only a subset of the types of
  DER data encodings which are defined.  That subset is sufficient for
  generating most X.509 certificates.
 @author David Brownell
 @author Amit Kapoor
 @author Hemma Prafullchandra
 */
@interface EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC : JavaIoByteArrayOutputStream < EsGobAfirmaCoreSignersDerDerEncoder >

#pragma mark Public

/*!
 @brief Construct an DER output stream.
 */
- (instancetype)init;

/*!
 @brief Construct an DER output stream.
 @param size how large a buffer to preallocate.
 */
- (instancetype)initWithInt:(jint)size;

/*!
 @brief Write the current contents of this <code>DerOutputStreamJ2OBJC</code>
   to an <code>OutputStream</code>.
 @param outArg OutputStream.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)derEncodeWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

/*!
 @brief Marshals a DER bit string on the output stream.The bit
  string must be byte-aligned.
 @param bits the bit string, MSB first
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putBitStringWithByteArray:(IOSByteArray *)bits;

/*!
 @brief Marshals a string as a DER encoded BMPString.
 @param s String.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putBMPStringWithNSString:(NSString *)s;

/*!
 @brief Marshals a DER boolean on the output stream.
 @param val Boolean value.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putBooleanWithBoolean:(jboolean)val;

/*!
 @brief Marshals pre-encoded DER value onto the output stream.
 @param val DER value.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putDerValueWithEsGobAfirmaCoreSignersDerDerValue:(EsGobAfirmaCoreSignersDerDerValue *)val;

/*!
 @brief Marshals a DER enumerated on the output stream.
 @param i the enumerated value.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putEnumeratedWithInt:(jint)i;

/*!
 @brief Marshals a DER Generalized Time/date value.
 <P>YYYYMMDDhhmmss{Z|+hhmm|-hhmm} ... emits only using Zulu time
  and with seconds (even if seconds=0) as per RFC 5280.
 @param d Date.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putGeneralizedTimeWithJavaUtilDate:(JavaUtilDate *)d;

/*!
 @brief Marshals a string as a DER encoded GeneralString.
 @param s String.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putGeneralStringWithNSString:(NSString *)s;

/*!
 @brief Marshals a string as a DER encoded IA5String.
 @param s String.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putIA5StringWithNSString:(NSString *)s;

/*!
 @brief Marshals a DER integer on the output stream.
 @param i the integer in the form of a BigInteger.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)i;

/*!
 @brief Marshals a DER integer on the output stream.
 @param i the integer.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putIntegerWithInt:(jint)i;

/*!
 @brief Marshals a DER integer on the output stream.
 @param i the integer in the form of an Integer.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putIntegerWithJavaLangInteger:(JavaLangInteger *)i;

/*!
 @brief Put the encoding of the length in the stream.
 @param len the length of the attribute.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putLengthWithInt:(jint)len;

/*!
 @brief Marshals a DER "null" value on the output stream.These are
  often used to indicate optional values which have been omitted.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putNull;

/*!
 @brief DER-encodes an ASN.1 OCTET STRING value on the output stream.
 @param octets the octet string
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putOctetStringWithByteArray:(IOSByteArray *)octets;

/*!
 @brief Marshals an object identifier (OID) on the output stream.
 Corresponds to the ASN.1 "OBJECT IDENTIFIER" construct.
 @param oid object identifier.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putOIDWithEsGobAfirmaCoreSignersDerObjectIdentifier:(EsGobAfirmaCoreSignersDerObjectIdentifier *)oid;

/*!
 @brief Marshals the contents of a set on the output stream.Sets
  are semantically unordered, but DER requires that encodings of
  set elements be sorted into ascending tag order
  before being output.
 Hence sets with the same tags and
  elements have the same DER encoding.
  This method supports the ASN.1 "SET" construct, but not
  "SET OF", which uses a different order.
 @param tag DER tag value.
 @param set DER encoded data.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putOrderedSetWithByte:(jbyte)tag
withEsGobAfirmaCoreSignersDerDerEncoderArray:(IOSObjectArray *)set;

/*!
 @brief Marshals the contents of a set on the output stream.Sets
  are semantically unordered, but DER requires that encodings of
  set elements be sorted into ascending lexicographical order
  before being output.
 Hence sets with the same tags and
  elements have the same DER encoding.
  This method supports the ASN.1 "SET OF" construct, but not
  "SET", which uses a different order.
 @param tag DER tag value.
 @param set DER encoded data.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putOrderedSetOfWithByte:(jbyte)tag
withEsGobAfirmaCoreSignersDerDerEncoderArray:(IOSObjectArray *)set;

/*!
 @brief Marshals a string as a DER encoded PrintableString.
 @param s String.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putPrintableStringWithNSString:(NSString *)s;

/*!
 @brief Marshals a sequence on the output stream.This supports both
  the ASN.1 "SEQUENCE" (zero to N values) and "SEQUENCE OF"
  (one to N values) constructs.
 @param seq sequence.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putSequenceWithEsGobAfirmaCoreSignersDerDerValueArray:(IOSObjectArray *)seq;

/*!
 @brief Marshals the contents of a set on the output stream without
  ordering the elements.Ok for BER encoding, but not for DER
  encoding.
 For DER encoding, use orderedPutSet() or orderedPutSetOf().
 @param set DER value.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putSetWithEsGobAfirmaCoreSignersDerDerValueArray:(IOSObjectArray *)set;

/*!
 @brief Marshals a string as a DER encoded T61String.
 @param s String.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putT61StringWithNSString:(NSString *)s;

/*!
 @brief Put the tag of the attribute in the stream.
 @param tagClass the tag class type, one of UNIVERSAL, CONTEXT,                             APPLICATION or PRIVATE
 @param form if true, the value is constructed, otherwise it is  primitive.
 @param val the tag value
 */
- (void)putTagWithByte:(jbyte)tagClass
           withBoolean:(jboolean)form
              withByte:(jbyte)val;

/*!
 @brief Marshals a truncated DER bit string on the output stream.
 The bit strings need not be byte-aligned.
 @param ba the bit string, MSB first
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putTruncatedUnalignedBitStringWithEsGobAfirmaCoreSignersDerBitArray:(EsGobAfirmaCoreSignersDerBitArray *)ba;

/*!
 @brief Marshals a DER bit string on the output stream.
 The bit strings need not be byte-aligned.
 @param ba the bit array.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putUnalignedBitStringWithEsGobAfirmaCoreSignersDerBitArray:(EsGobAfirmaCoreSignersDerBitArray *)ba;

/*!
 @brief Marshals a DER UTC time/date value.
 <P>YYMMDDhhmmss{Z|+hhmm|-hhmm} ... emits only using Zulu time
  and with seconds (even if seconds=0) as per RFC 5280.
 @param d Date.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putUTCTimeWithJavaUtilDate:(JavaUtilDate *)d;

/*!
 @brief Marshals a string as a DER encoded UTF8String.
 @param s String.
 @throw IOExceptionWhen no it possible write data.
 */
- (void)putUTF8StringWithNSString:(NSString *)s;

/*!
 @brief Writes tagged, pre-marshaled data.This calcuates and encodes
  the length, so that the output data is the standard triple of
  { tag, length, data } used by all DER values.
 @param tag the DER value tag for the data, such as           
  <em> DerValue.tag_Sequence </em>
 @param buf buffered data, which must be DER-encoded
 @throw IOExceptionWhen no it possible write data.
 */
- (void)writeWithByte:(jbyte)tag
        withByteArray:(IOSByteArray *)buf;

/*!
 @brief Writes tagged data using buffer-to-buffer copy.As above,
  this writes a standard DER record.
 This is often used when
  efficiently encapsulating values in sequences.
 @param tag the DER value tag for the data, such as           
  <em> DerValue.tag_Sequence </em>
 @param outArg buffered data
 @throw IOExceptionWhen no it possible write data.
 */
- (void)writeWithByte:(jbyte)tag
withEsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC:(EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC *)outArg;

/*!
 @brief Writes implicitly tagged data using buffer-to-buffer copy.As above,
  this writes a standard DER record.
 This is often used when
  efficiently encapsulating implicitly tagged values.
 @param tag the DER value of the context-specific tag that replaces  original tag of the value in the output, such as in
    
@code

             <em>
     @@lt;field       &gt;  [N] IMPLICIT @@lt;type &gt; </em>  
@endcode  For example,  <em> FooLength [1] IMPLICIT INTEGER </em> , with value=4;  would be encoded as "81 01 04"  whereas in explicit  tagging it would be encoded as "A1 03 02 01 04".  Notice that the tag is A1 and not 81, this is because with  explicit tagging the form is always constructed.
 @param value original value being implicitly tagged
 @throw IOExceptionWhen no it possible write data.
 */
- (void)writeImplicitWithByte:(jbyte)tag
withEsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC:(EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC *)value;

@end

J2OBJC_STATIC_INIT(EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC)

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC_initWithInt_(EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC *self, jint size);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC *new_EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC_initWithInt_(jint size) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC *create_EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC_initWithInt_(jint size);

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC_init(EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC *self);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC *new_EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC *create_EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC_init(void);

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaCoreSignersDerDerOutputStreamJ2OBJC)

#endif

#pragma pop_macro("INCLUDE_ALL_DerOutputStreamJ2OBJC")
