//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/cert/X509CRLHolder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_X509CRLHolder")
#ifdef RESTRICT_X509CRLHolder
#define INCLUDE_ALL_X509CRLHolder 0
#else
#define INCLUDE_ALL_X509CRLHolder 1
#endif
#undef RESTRICT_X509CRLHolder

#if !defined (OrgSpongycastleCertX509CRLHolder_) && (INCLUDE_ALL_X509CRLHolder || defined(INCLUDE_OrgSpongycastleCertX509CRLHolder))
#define OrgSpongycastleCertX509CRLHolder_

#define RESTRICT_Encodable 1
#define INCLUDE_OrgSpongycastleUtilEncodable 1
#include "Encodable.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaMathBigInteger;
@class OrgSpongycastleAsn1ASN1ObjectIdentifier;
@class OrgSpongycastleAsn1X500X500Name;
@class OrgSpongycastleAsn1X509CertificateList;
@class OrgSpongycastleAsn1X509Extension;
@class OrgSpongycastleAsn1X509Extensions;
@class OrgSpongycastleCertX509CRLEntryHolder;
@protocol JavaUtilCollection;
@protocol JavaUtilList;
@protocol JavaUtilSet;
@protocol OrgSpongycastleOperatorContentVerifierProvider;

/*!
 @brief Holding class for an X.509 CRL structure.
 */
@interface OrgSpongycastleCertX509CRLHolder : NSObject < OrgSpongycastleUtilEncodable, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Create a X509CRLHolder from the passed in bytes.
 @param crlEncoding BER/DER encoding of the CRL
 @throw IOExceptionin the event of corrupted data, or an incorrect structure.
 */
- (instancetype)initWithByteArray:(IOSByteArray *)crlEncoding;

/*!
 @brief Create a X509CRLHolder from the passed in ASN.1 structure.
 @param x509CRL an ASN.1 CertificateList structure.
 */
- (instancetype)initWithOrgSpongycastleAsn1X509CertificateList:(OrgSpongycastleAsn1X509CertificateList *)x509CRL;

/*!
 @brief Create a X509CRLHolder from the passed in InputStream.
 @param crlStream BER/DER encoded InputStream of the CRL
 @throw IOExceptionin the event of corrupted data, or an incorrect structure.
 */
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)crlStream;

- (jboolean)isEqual:(id)o;

/*!
 @brief Returns a set of ASN1ObjectIdentifier objects representing the OIDs of the
  critical extensions contained in this holder's CRL.
 @return a set of critical extension OIDs.
 */
- (id<JavaUtilSet>)getCriticalExtensionOIDs;

/*!
 @brief Return the ASN.1 encoding of this holder's CRL.
 @return a DER encoded byte array.
 @throw IOExceptionif an encoding cannot be generated.
 */
- (IOSByteArray *)getEncoded;

/*!
 @brief Look up the extension associated with the passed in OID.
 @param oid the OID of the extension of interest.
 @return the extension if present, null otherwise.
 */
- (OrgSpongycastleAsn1X509Extension *)getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid;

/*!
 @brief Returns a list of ASN1ObjectIdentifier objects representing the OIDs of the
  extensions contained in this holder's CRL.
 @return a list of extension OIDs.
 */
- (id<JavaUtilList>)getExtensionOIDs;

/*!
 @brief Return the extensions block associated with this CRL if there is one.
 @return the extensions block, null otherwise.
 */
- (OrgSpongycastleAsn1X509Extensions *)getExtensions;

/*!
 @brief Return the issuer of this holder's CRL.
 @return the CRL issuer.
 */
- (OrgSpongycastleAsn1X500X500Name *)getIssuer;

/*!
 @brief Returns a set of ASN1ObjectIdentifier objects representing the OIDs of the
  non-critical extensions contained in this holder's CRL.
 @return a set of non-critical extension OIDs.
 */
- (id<JavaUtilSet>)getNonCriticalExtensionOIDs;

- (OrgSpongycastleCertX509CRLEntryHolder *)getRevokedCertificateWithJavaMathBigInteger:(JavaMathBigInteger *)serialNumber;

/*!
 @brief Return a collection of X509CRLEntryHolder objects, giving the details of the
  revoked certificates that appear on this CRL.
 @return the revoked certificates as a collection of X509CRLEntryHolder objects.
 */
- (id<JavaUtilCollection>)getRevokedCertificates;

/*!
 @brief Return whether or not the holder's CRL contains extensions.
 @return true if extension are present, false otherwise.
 */
- (jboolean)hasExtensions;

- (NSUInteger)hash;

/*!
 @brief Validate the signature on the CRL.
 @param verifierProvider a ContentVerifierProvider that can generate a verifier for the signature.
 @return true if the signature is valid, false otherwise.
 @throw CertExceptionif the signature cannot be processed or is inappropriate.
 */
- (jboolean)isSignatureValidWithOrgSpongycastleOperatorContentVerifierProvider:(id<OrgSpongycastleOperatorContentVerifierProvider>)verifierProvider;

/*!
 @brief Return the underlying ASN.1 structure for the CRL in this holder.
 @return a CertificateList object.
 */
- (OrgSpongycastleAsn1X509CertificateList *)toASN1Structure;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCertX509CRLHolder)

FOUNDATION_EXPORT void OrgSpongycastleCertX509CRLHolder_initWithByteArray_(OrgSpongycastleCertX509CRLHolder *self, IOSByteArray *crlEncoding);

FOUNDATION_EXPORT OrgSpongycastleCertX509CRLHolder *new_OrgSpongycastleCertX509CRLHolder_initWithByteArray_(IOSByteArray *crlEncoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCertX509CRLHolder *create_OrgSpongycastleCertX509CRLHolder_initWithByteArray_(IOSByteArray *crlEncoding);

FOUNDATION_EXPORT void OrgSpongycastleCertX509CRLHolder_initWithJavaIoInputStream_(OrgSpongycastleCertX509CRLHolder *self, JavaIoInputStream *crlStream);

FOUNDATION_EXPORT OrgSpongycastleCertX509CRLHolder *new_OrgSpongycastleCertX509CRLHolder_initWithJavaIoInputStream_(JavaIoInputStream *crlStream) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCertX509CRLHolder *create_OrgSpongycastleCertX509CRLHolder_initWithJavaIoInputStream_(JavaIoInputStream *crlStream);

FOUNDATION_EXPORT void OrgSpongycastleCertX509CRLHolder_initWithOrgSpongycastleAsn1X509CertificateList_(OrgSpongycastleCertX509CRLHolder *self, OrgSpongycastleAsn1X509CertificateList *x509CRL);

FOUNDATION_EXPORT OrgSpongycastleCertX509CRLHolder *new_OrgSpongycastleCertX509CRLHolder_initWithOrgSpongycastleAsn1X509CertificateList_(OrgSpongycastleAsn1X509CertificateList *x509CRL) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCertX509CRLHolder *create_OrgSpongycastleCertX509CRLHolder_initWithOrgSpongycastleAsn1X509CertificateList_(OrgSpongycastleAsn1X509CertificateList *x509CRL);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCertX509CRLHolder)

#endif

#pragma pop_macro("INCLUDE_ALL_X509CRLHolder")
