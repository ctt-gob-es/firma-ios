//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/color/ColorSpace.java
//

#include "ColorSpace.h"
#include "ICC_ColorSpace.h"
#include "ICC_ProfileStub.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LUTColorConverter.h"
#include "Messages.h"
#include "java/lang/IllegalArgumentException.h"

#if !__has_feature(objc_arc)
#error "ColorSpace must be compiled with ARC (-fobjc-arc)"
#endif

@interface HarmonyJavaAwtColorColorSpace () {
 @public
  jint type_;
  jint numComponents_;
}

@end

inline jlong HarmonyJavaAwtColorColorSpace_get_serialVersionUID(void);
#define HarmonyJavaAwtColorColorSpace_serialVersionUID -409452704308689724LL
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtColorColorSpace, serialVersionUID, jlong)

inline HarmonyJavaAwtColorColorSpace *HarmonyJavaAwtColorColorSpace_get_cs_Gray(void);
inline HarmonyJavaAwtColorColorSpace *HarmonyJavaAwtColorColorSpace_set_cs_Gray(HarmonyJavaAwtColorColorSpace *value);
static HarmonyJavaAwtColorColorSpace *HarmonyJavaAwtColorColorSpace_cs_Gray;
J2OBJC_STATIC_FIELD_OBJ(HarmonyJavaAwtColorColorSpace, cs_Gray, HarmonyJavaAwtColorColorSpace *)

inline HarmonyJavaAwtColorColorSpace *HarmonyJavaAwtColorColorSpace_get_cs_PYCC(void);
inline HarmonyJavaAwtColorColorSpace *HarmonyJavaAwtColorColorSpace_set_cs_PYCC(HarmonyJavaAwtColorColorSpace *value);
static HarmonyJavaAwtColorColorSpace *HarmonyJavaAwtColorColorSpace_cs_PYCC;
J2OBJC_STATIC_FIELD_OBJ(HarmonyJavaAwtColorColorSpace, cs_PYCC, HarmonyJavaAwtColorColorSpace *)

inline HarmonyJavaAwtColorColorSpace *HarmonyJavaAwtColorColorSpace_get_cs_CIEXYZ(void);
inline HarmonyJavaAwtColorColorSpace *HarmonyJavaAwtColorColorSpace_set_cs_CIEXYZ(HarmonyJavaAwtColorColorSpace *value);
static HarmonyJavaAwtColorColorSpace *HarmonyJavaAwtColorColorSpace_cs_CIEXYZ;
J2OBJC_STATIC_FIELD_OBJ(HarmonyJavaAwtColorColorSpace, cs_CIEXYZ, HarmonyJavaAwtColorColorSpace *)

inline HarmonyJavaAwtColorColorSpace *HarmonyJavaAwtColorColorSpace_get_cs_LRGB(void);
inline HarmonyJavaAwtColorColorSpace *HarmonyJavaAwtColorColorSpace_set_cs_LRGB(HarmonyJavaAwtColorColorSpace *value);
static HarmonyJavaAwtColorColorSpace *HarmonyJavaAwtColorColorSpace_cs_LRGB;
J2OBJC_STATIC_FIELD_OBJ(HarmonyJavaAwtColorColorSpace, cs_LRGB, HarmonyJavaAwtColorColorSpace *)

inline HarmonyJavaAwtColorColorSpace *HarmonyJavaAwtColorColorSpace_get_cs_sRGB(void);
inline HarmonyJavaAwtColorColorSpace *HarmonyJavaAwtColorColorSpace_set_cs_sRGB(HarmonyJavaAwtColorColorSpace *value);
static HarmonyJavaAwtColorColorSpace *HarmonyJavaAwtColorColorSpace_cs_sRGB;
J2OBJC_STATIC_FIELD_OBJ(HarmonyJavaAwtColorColorSpace, cs_sRGB, HarmonyJavaAwtColorColorSpace *)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/color/ColorSpace.java"


#line 27
@implementation HarmonyJavaAwtColorColorSpace


#line 100
- (instancetype)initWithInt:(jint)type
                    withInt:(jint)numcomponents {
  HarmonyJavaAwtColorColorSpace_initWithInt_withInt_(self, type, numcomponents);
  return self;
}


#line 105
- (NSString *)getNameWithInt:(jint)idx {
  if (idx < 0 || idx > numComponents_ - 1) {
    
#line 108
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(ComMessages_getStringWithNSString_withInt_(@"awt.16A", idx));
  }
  
#line 111
  return JreStrcat("$I", @"Unnamed color component #", idx);
}


#line 114
- (IOSFloatArray *)toRGBWithFloatArray:(IOSFloatArray *)colorvalue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 116
- (IOSFloatArray *)toCIEXYZWithFloatArray:(IOSFloatArray *)colorvalue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 118
- (IOSFloatArray *)fromRGBWithFloatArray:(IOSFloatArray *)rgbvalue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 120
- (IOSFloatArray *)fromCIEXYZWithFloatArray:(IOSFloatArray *)colorvalue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 122
- (jfloat)getMinValueWithInt:(jint)component {
  if (component < 0 || component > numComponents_ - 1) {
    
#line 125
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(ComMessages_getStringWithNSString_withInt_(@"awt.16A", component));
  }
  return 0;
}


#line 130
- (jfloat)getMaxValueWithInt:(jint)component {
  if (component < 0 || component > numComponents_ - 1) {
    
#line 133
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(ComMessages_getStringWithNSString_withInt_(@"awt.16A", component));
  }
  return 1;
}


#line 138
- (jboolean)isCS_sRGB {
  
#line 141
  return (JreObjectEqualsEquals(self, HarmonyJavaAwtColorColorSpace_cs_sRGB));
}

- (jint)getType {
  return type_;
}

- (jint)getNumComponents {
  return numComponents_;
}

+ (HarmonyJavaAwtColorColorSpace *)getInstanceWithInt:(jint)colorspace {
  return HarmonyJavaAwtColorColorSpace_getInstanceWithInt_(colorspace);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[F", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "[F", 0x401, 5, 4, -1, -1, -1, -1 },
    { NULL, "[F", 0x401, 6, 4, -1, -1, -1, -1 },
    { NULL, "[F", 0x401, 7, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtColorColorSpace;", 0x9, 10, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(getNameWithInt:);
  methods[2].selector = @selector(toRGBWithFloatArray:);
  methods[3].selector = @selector(toCIEXYZWithFloatArray:);
  methods[4].selector = @selector(fromRGBWithFloatArray:);
  methods[5].selector = @selector(fromCIEXYZWithFloatArray:);
  methods[6].selector = @selector(getMinValueWithInt:);
  methods[7].selector = @selector(getMaxValueWithInt:);
  methods[8].selector = @selector(isCS_sRGB);
  methods[9].selector = @selector(getType);
  methods[10].selector = @selector(getNumComponents);
  methods[11].selector = @selector(getInstanceWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = HarmonyJavaAwtColorColorSpace_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "TYPE_XYZ", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_XYZ, 0x19, -1, -1, -1, -1 },
    { "TYPE_Lab", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_Lab, 0x19, -1, -1, -1, -1 },
    { "TYPE_Luv", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_Luv, 0x19, -1, -1, -1, -1 },
    { "TYPE_YCbCr", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_YCbCr, 0x19, -1, -1, -1, -1 },
    { "TYPE_Yxy", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_Yxy, 0x19, -1, -1, -1, -1 },
    { "TYPE_RGB", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_RGB, 0x19, -1, -1, -1, -1 },
    { "TYPE_GRAY", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_GRAY, 0x19, -1, -1, -1, -1 },
    { "TYPE_HSV", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_HSV, 0x19, -1, -1, -1, -1 },
    { "TYPE_HLS", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_HLS, 0x19, -1, -1, -1, -1 },
    { "TYPE_CMYK", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_CMYK, 0x19, -1, -1, -1, -1 },
    { "TYPE_CMY", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_CMY, 0x19, -1, -1, -1, -1 },
    { "TYPE_2CLR", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_2CLR, 0x19, -1, -1, -1, -1 },
    { "TYPE_3CLR", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_3CLR, 0x19, -1, -1, -1, -1 },
    { "TYPE_4CLR", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_4CLR, 0x19, -1, -1, -1, -1 },
    { "TYPE_5CLR", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_5CLR, 0x19, -1, -1, -1, -1 },
    { "TYPE_6CLR", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_6CLR, 0x19, -1, -1, -1, -1 },
    { "TYPE_7CLR", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_7CLR, 0x19, -1, -1, -1, -1 },
    { "TYPE_8CLR", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_8CLR, 0x19, -1, -1, -1, -1 },
    { "TYPE_9CLR", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_9CLR, 0x19, -1, -1, -1, -1 },
    { "TYPE_ACLR", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_ACLR, 0x19, -1, -1, -1, -1 },
    { "TYPE_BCLR", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_BCLR, 0x19, -1, -1, -1, -1 },
    { "TYPE_CCLR", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_CCLR, 0x19, -1, -1, -1, -1 },
    { "TYPE_DCLR", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_DCLR, 0x19, -1, -1, -1, -1 },
    { "TYPE_ECLR", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_ECLR, 0x19, -1, -1, -1, -1 },
    { "TYPE_FCLR", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_TYPE_FCLR, 0x19, -1, -1, -1, -1 },
    { "CS_sRGB", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_CS_sRGB, 0x19, -1, -1, -1, -1 },
    { "CS_LINEAR_RGB", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_CS_LINEAR_RGB, 0x19, -1, -1, -1, -1 },
    { "CS_CIEXYZ", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_CS_CIEXYZ, 0x19, -1, -1, -1, -1 },
    { "CS_PYCC", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_CS_PYCC, 0x19, -1, -1, -1, -1 },
    { "CS_GRAY", "I", .constantValue.asInt = HarmonyJavaAwtColorColorSpace_CS_GRAY, 0x19, -1, -1, -1, -1 },
    { "cs_Gray", "LHarmonyJavaAwtColorColorSpace;", .constantValue.asLong = 0, 0xa, -1, 11, -1, -1 },
    { "cs_PYCC", "LHarmonyJavaAwtColorColorSpace;", .constantValue.asLong = 0, 0xa, -1, 12, -1, -1 },
    { "cs_CIEXYZ", "LHarmonyJavaAwtColorColorSpace;", .constantValue.asLong = 0, 0xa, -1, 13, -1, -1 },
    { "cs_LRGB", "LHarmonyJavaAwtColorColorSpace;", .constantValue.asLong = 0, 0xa, -1, 14, -1, -1 },
    { "cs_sRGB", "LHarmonyJavaAwtColorColorSpace;", .constantValue.asLong = 0, 0xa, -1, 15, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numComponents_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "getName", "I", "toRGB", "[F", "toCIEXYZ", "fromRGB", "fromCIEXYZ", "getMinValue", "getMaxValue", "getInstance", &HarmonyJavaAwtColorColorSpace_cs_Gray, &HarmonyJavaAwtColorColorSpace_cs_PYCC, &HarmonyJavaAwtColorColorSpace_cs_CIEXYZ, &HarmonyJavaAwtColorColorSpace_cs_LRGB, &HarmonyJavaAwtColorColorSpace_cs_sRGB };
  static const J2ObjcClassInfo _HarmonyJavaAwtColorColorSpace = { "ColorSpace", "harmony.java.awt.color", ptrTable, methods, fields, 7, 0x401, 12, 38, -1, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtColorColorSpace;
}

@end


#line 100
void HarmonyJavaAwtColorColorSpace_initWithInt_withInt_(HarmonyJavaAwtColorColorSpace *self, jint type, jint numcomponents) {
  NSObject_init(self);
  
#line 101
  self->numComponents_ = numcomponents;
  self->type_ = type;
}


#line 152
HarmonyJavaAwtColorColorSpace *HarmonyJavaAwtColorColorSpace_getInstanceWithInt_(jint colorspace) {
  HarmonyJavaAwtColorColorSpace_initialize();
  
#line 153
  switch (colorspace) {
    case HarmonyJavaAwtColorColorSpace_CS_sRGB:
    if (HarmonyJavaAwtColorColorSpace_cs_sRGB == nil) {
      HarmonyJavaAwtColorColorSpace_cs_sRGB = new_HarmonyJavaAwtColorICC_ColorSpace_initWithHarmonyJavaAwtColorICC_Profile_(new_HarmonyJavaAwtColorICC_ProfileStub_initPackagePrivateWithInt_(HarmonyJavaAwtColorColorSpace_CS_sRGB));
      *JreLoadStaticRef(ComLUTColorConverter, sRGB_CS) = HarmonyJavaAwtColorColorSpace_cs_sRGB;
    }
    
#line 160
    return HarmonyJavaAwtColorColorSpace_cs_sRGB;
    case HarmonyJavaAwtColorColorSpace_CS_CIEXYZ:
    if (HarmonyJavaAwtColorColorSpace_cs_CIEXYZ == nil) {
      HarmonyJavaAwtColorColorSpace_cs_CIEXYZ = new_HarmonyJavaAwtColorICC_ColorSpace_initWithHarmonyJavaAwtColorICC_Profile_(new_HarmonyJavaAwtColorICC_ProfileStub_initPackagePrivateWithInt_(HarmonyJavaAwtColorColorSpace_CS_CIEXYZ));
    }
    
#line 166
    return HarmonyJavaAwtColorColorSpace_cs_CIEXYZ;
    case HarmonyJavaAwtColorColorSpace_CS_GRAY:
    if (HarmonyJavaAwtColorColorSpace_cs_Gray == nil) {
      HarmonyJavaAwtColorColorSpace_cs_Gray = new_HarmonyJavaAwtColorICC_ColorSpace_initWithHarmonyJavaAwtColorICC_Profile_(new_HarmonyJavaAwtColorICC_ProfileStub_initPackagePrivateWithInt_(HarmonyJavaAwtColorColorSpace_CS_GRAY));
      *JreLoadStaticRef(ComLUTColorConverter, LINEAR_GRAY_CS) = HarmonyJavaAwtColorColorSpace_cs_Gray;
    }
    
#line 173
    return HarmonyJavaAwtColorColorSpace_cs_Gray;
    case HarmonyJavaAwtColorColorSpace_CS_PYCC:
    if (HarmonyJavaAwtColorColorSpace_cs_PYCC == nil) {
      HarmonyJavaAwtColorColorSpace_cs_PYCC = new_HarmonyJavaAwtColorICC_ColorSpace_initWithHarmonyJavaAwtColorICC_Profile_(new_HarmonyJavaAwtColorICC_ProfileStub_initPackagePrivateWithInt_(HarmonyJavaAwtColorColorSpace_CS_PYCC));
    }
    
#line 179
    return HarmonyJavaAwtColorColorSpace_cs_PYCC;
    case HarmonyJavaAwtColorColorSpace_CS_LINEAR_RGB:
    if (HarmonyJavaAwtColorColorSpace_cs_LRGB == nil) {
      HarmonyJavaAwtColorColorSpace_cs_LRGB = new_HarmonyJavaAwtColorICC_ColorSpace_initWithHarmonyJavaAwtColorICC_Profile_(new_HarmonyJavaAwtColorICC_ProfileStub_initPackagePrivateWithInt_(HarmonyJavaAwtColorColorSpace_CS_LINEAR_RGB));
      *JreLoadStaticRef(ComLUTColorConverter, LINEAR_GRAY_CS) = HarmonyJavaAwtColorColorSpace_cs_Gray;
    }
    
#line 186
    return HarmonyJavaAwtColorColorSpace_cs_LRGB;
    default:
    
#line 187
    ;
  }
  
#line 192
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(ComMessages_getStringWithNSString_(@"awt.16B"));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtColorColorSpace)
