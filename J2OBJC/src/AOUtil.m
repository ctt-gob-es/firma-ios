//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/misc/AOUtil.java
//

#include "AOUtil.h"
#include "Base64.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LoggerUtil.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStreamWriter.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/net/URI.h"
#include "java/net/URISyntaxException.h"
#include "java/net/URL.h"
#include "java/nio/MappedByteBuffer.h"
#include "java/nio/channels/FileChannel.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/StandardCharsets.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Locale.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/logging/Logger.h"
#include "javax/security/auth/x500/X500Principal.h"

#if !__has_feature(objc_arc)
#error "AOUtil must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreMiscAOUtil ()

- (instancetype)init;

@end

inline jint EsGobAfirmaCoreMiscAOUtil_get_BUFFER_SIZE(void);
#define EsGobAfirmaCoreMiscAOUtil_BUFFER_SIZE 4096
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreMiscAOUtil, BUFFER_SIZE, jint)

inline JavaUtilLoggingLogger *EsGobAfirmaCoreMiscAOUtil_get_LOGGER(void);
static JavaUtilLoggingLogger *EsGobAfirmaCoreMiscAOUtil_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscAOUtil, LOGGER, JavaUtilLoggingLogger *)

inline IOSObjectArray *EsGobAfirmaCoreMiscAOUtil_get_SUPPORTED_URI_SCHEMES(void);
static IOSObjectArray *EsGobAfirmaCoreMiscAOUtil_SUPPORTED_URI_SCHEMES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscAOUtil, SUPPORTED_URI_SCHEMES, IOSObjectArray *)

inline JavaNioCharsetCharset *EsGobAfirmaCoreMiscAOUtil_get_DEFAULT_ENCODING(void);
static JavaNioCharsetCharset *EsGobAfirmaCoreMiscAOUtil_DEFAULT_ENCODING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscAOUtil, DEFAULT_ENCODING, JavaNioCharsetCharset *)

/*!
 @brief Equivalencias de hexadecimal a texto por la posici&oacute;n del vector.
 Para ser usado en <code>hexify()</code>
 */
inline IOSCharArray *EsGobAfirmaCoreMiscAOUtil_get_HEX_CHARS(void);
static IOSCharArray *EsGobAfirmaCoreMiscAOUtil_HEX_CHARS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscAOUtil, HEX_CHARS, IOSCharArray *)

__attribute__((unused)) static void EsGobAfirmaCoreMiscAOUtil_init(EsGobAfirmaCoreMiscAOUtil *self);

__attribute__((unused)) static EsGobAfirmaCoreMiscAOUtil *new_EsGobAfirmaCoreMiscAOUtil_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobAfirmaCoreMiscAOUtil *create_EsGobAfirmaCoreMiscAOUtil_init(void);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/misc/AOUtil.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaCoreMiscAOUtil)


#line 38
@implementation EsGobAfirmaCoreMiscAOUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 40
- (instancetype)init {
  EsGobAfirmaCoreMiscAOUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 59
+ (JavaNetURI *)createURIWithNSString:(NSString *)file {
  return EsGobAfirmaCoreMiscAOUtil_createURIWithNSString_(file);
}


#line 123
+ (JavaIoInputStream *)loadFileWithJavaNetURI:(JavaNetURI *)uri {
  return EsGobAfirmaCoreMiscAOUtil_loadFileWithJavaNetURI_(uri);
}


#line 158
+ (IOSByteArray *)getDataFromInputStreamWithJavaIoInputStream:(JavaIoInputStream *)input {
  return EsGobAfirmaCoreMiscAOUtil_getDataFromInputStreamWithJavaIoInputStream_(input);
}


#line 178
+ (NSString *)getCNWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)c {
  return EsGobAfirmaCoreMiscAOUtil_getCNWithJavaSecurityCertX509Certificate_(c);
}


#line 192
+ (NSString *)getCNWithNSString:(NSString *)principal {
  return EsGobAfirmaCoreMiscAOUtil_getCNWithNSString_(principal);
}


#line 223
+ (NSString *)getRDNvalueFromLdapNameWithNSString:(NSString *)rdn
                                     withNSString:(NSString *)principal {
  return EsGobAfirmaCoreMiscAOUtil_getRDNvalueFromLdapNameWithNSString_withNSString_(rdn, principal);
}


#line 291
+ (jboolean)isPseudonymCertWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  return EsGobAfirmaCoreMiscAOUtil_isPseudonymCertWithJavaSecurityCertX509Certificate_(cert);
}


#line 312
+ (NSString *)hexifyWithByteArray:(IOSByteArray *)abyte0
                      withBoolean:(jboolean)separator {
  return EsGobAfirmaCoreMiscAOUtil_hexifyWithByteArray_withBoolean_(abyte0, separator);
}


#line 345
+ (NSString *)hexifyWithByteArray:(IOSByteArray *)abyte0
                     withNSString:(NSString *)separator {
  return EsGobAfirmaCoreMiscAOUtil_hexifyWithByteArray_withNSString_(abyte0, separator);
}


#line 364
+ (void)loadNativeLibraryWithNSString:(NSString *)path {
  EsGobAfirmaCoreMiscAOUtil_loadNativeLibraryWithNSString_(path);
}


#line 389
+ (void)copyFileWithJavaIoFile:(JavaIoFile *)source
                withJavaIoFile:(JavaIoFile *)dest {
  EsGobAfirmaCoreMiscAOUtil_copyFileWithJavaIoFile_withJavaIoFile_(source, dest);
}


#line 419
+ (IOSObjectArray *)splitWithNSString:(NSString *)text
                         withNSString:(NSString *)sp {
  return EsGobAfirmaCoreMiscAOUtil_splitWithNSString_withNSString_(text, sp);
}


#line 447
+ (NSString *)properties2Base64WithJavaUtilProperties:(JavaUtilProperties *)p {
  return EsGobAfirmaCoreMiscAOUtil_properties2Base64WithJavaUtilProperties_(p);
}


#line 461
+ (JavaUtilProperties *)base642PropertiesWithNSString:(NSString *)base64 {
  return EsGobAfirmaCoreMiscAOUtil_base642PropertiesWithNSString_(base64);
}


#line 477
+ (NSString *)propertiesAsStringWithJavaUtilProperties:(JavaUtilProperties *)p {
  return EsGobAfirmaCoreMiscAOUtil_propertiesAsStringWithJavaUtilProperties_(p);
}


#line 491
+ (jboolean)isJava9orNewer {
  return EsGobAfirmaCoreMiscAOUtil_isJava9orNewer();
}


#line 525
+ (jboolean)isOnlyNumberWithNSString:(NSString *)value {
  return EsGobAfirmaCoreMiscAOUtil_isOnlyNumberWithNSString_(value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetURI;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x9, 3, 4, 5, -1, -1, -1 },
    { NULL, "[B", 0x9, 6, 7, 5, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 8, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 12, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 16, 1, 5, -1, -1, -1 },
    { NULL, "V", 0x9, 17, 18, 5, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 19, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 20, 21, 5, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x9, 22, 1, 5, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 23, 21, 5, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 24, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createURIWithNSString:);
  methods[2].selector = @selector(loadFileWithJavaNetURI:);
  methods[3].selector = @selector(getDataFromInputStreamWithJavaIoInputStream:);
  methods[4].selector = @selector(getCNWithJavaSecurityCertX509Certificate:);
  methods[5].selector = @selector(getCNWithNSString:);
  methods[6].selector = @selector(getRDNvalueFromLdapNameWithNSString:withNSString:);
  methods[7].selector = @selector(isPseudonymCertWithJavaSecurityCertX509Certificate:);
  methods[8].selector = @selector(hexifyWithByteArray:withBoolean:);
  methods[9].selector = @selector(hexifyWithByteArray:withNSString:);
  methods[10].selector = @selector(loadNativeLibraryWithNSString:);
  methods[11].selector = @selector(copyFileWithJavaIoFile:withJavaIoFile:);
  methods[12].selector = @selector(splitWithNSString:withNSString:);
  methods[13].selector = @selector(properties2Base64WithJavaUtilProperties:);
  methods[14].selector = @selector(base642PropertiesWithNSString:);
  methods[15].selector = @selector(propertiesAsStringWithJavaUtilProperties:);
  methods[16].selector = @selector(isJava9orNewer);
  methods[17].selector = @selector(isOnlyNumberWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BUFFER_SIZE", "I", .constantValue.asInt = EsGobAfirmaCoreMiscAOUtil_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "SUPPORTED_URI_SCHEMES", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "DEFAULT_ENCODING", "LJavaNioCharsetCharset;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "HEX_CHARS", "[C", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
  };
  static const void *ptrTable[] = { "createURI", "LNSString;", "LJavaNetURISyntaxException;", "loadFile", "LJavaNetURI;", "LJavaIoIOException;", "getDataFromInputStream", "LJavaIoInputStream;", "getCN", "LJavaSecurityCertX509Certificate;", "getRDNvalueFromLdapName", "LNSString;LNSString;", "isPseudonymCert", "hexify", "[BZ", "[BLNSString;", "loadNativeLibrary", "copyFile", "LJavaIoFile;LJavaIoFile;", "split", "properties2Base64", "LJavaUtilProperties;", "base642Properties", "propertiesAsString", "isOnlyNumber", &EsGobAfirmaCoreMiscAOUtil_LOGGER, &EsGobAfirmaCoreMiscAOUtil_SUPPORTED_URI_SCHEMES, &EsGobAfirmaCoreMiscAOUtil_DEFAULT_ENCODING, &EsGobAfirmaCoreMiscAOUtil_HEX_CHARS };
  static const J2ObjcClassInfo _EsGobAfirmaCoreMiscAOUtil = { "AOUtil", "es.gob.afirma.core.misc", ptrTable, methods, fields, 7, 0x11, 18, 5, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreMiscAOUtil;
}

+ (void)initialize {
  if (self == [EsGobAfirmaCoreMiscAOUtil class]) {
    EsGobAfirmaCoreMiscAOUtil_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 46
    @"es.gob.afirma");
    EsGobAfirmaCoreMiscAOUtil_SUPPORTED_URI_SCHEMES = [IOSObjectArray newArrayWithObjects:(id[]){
#line 49
      @"http", @"https", @"file", @"urn" } count:4 type:NSString_class_()];
      EsGobAfirmaCoreMiscAOUtil_DEFAULT_ENCODING = JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8);
      EsGobAfirmaCoreMiscAOUtil_HEX_CHARS = [IOSCharArray newArrayWithChars:(jchar[]){
#line 300
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' } count:16];
        J2OBJC_SET_INITIALIZED(EsGobAfirmaCoreMiscAOUtil)
      }
    }

@end


#line 40
void EsGobAfirmaCoreMiscAOUtil_init(EsGobAfirmaCoreMiscAOUtil *self) {
  NSObject_init(self);
}


#line 40
EsGobAfirmaCoreMiscAOUtil *new_EsGobAfirmaCoreMiscAOUtil_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscAOUtil, init)
}


#line 40
EsGobAfirmaCoreMiscAOUtil *create_EsGobAfirmaCoreMiscAOUtil_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscAOUtil, init)
}


#line 59
JavaNetURI *EsGobAfirmaCoreMiscAOUtil_createURIWithNSString_(NSString *file) {
  EsGobAfirmaCoreMiscAOUtil_initialize();
  if (file == nil || [file java_isEmpty]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No se puede crear una URI a partir de un nulo");
  }
  
#line 65
  NSString *filename = [file java_trim];
  
#line 67
  if ([((NSString *) nil_chk(filename)) java_isEmpty]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"La URI no puede ser una cadena vacia");
  }
  
#line 72
  filename = [filename java_replace:'\\' withChar:'/'];
  
#line 77
  filename =
#line 78
  [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk(filename)) java_replace:@" " withSequence:@"%20"])) java_replace:
#line 79
  @"<" withSequence:@"%3C"])) java_replace:
#line 80
  @">" withSequence:@"%3E"])) java_replace:
#line 81
  @"\"" withSequence:@"%22"])) java_replace:
#line 82
  @"{" withSequence:@"%7B"])) java_replace:
#line 83
  @"}" withSequence:@"%7D"])) java_replace:
#line 84
  @"|" withSequence:@"%7C"])) java_replace:
#line 85
  @"^" withSequence:@"%5E"])) java_replace:
#line 86
  @"[" withSequence:@"%5B"])) java_replace:
#line 87
  @"]" withSequence:@"%5D"])) java_replace:
#line 88
  @"`" withSequence:@"%60"];
  
#line 90
  JavaNetURI *uri = new_JavaNetURI_initWithNSString_(filename);
  
#line 93
  NSString *scheme = [uri getScheme];
  {
    IOSObjectArray *a__ =
#line 94
    EsGobAfirmaCoreMiscAOUtil_SUPPORTED_URI_SCHEMES;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *element = *b__++;
      
#line 95
      if ([((NSString *) nil_chk(element)) isEqual:scheme]) {
        return uri;
      }
    }
  }
  
#line 102
  if (scheme == nil) {
    filename = [((NSString *) nil_chk(filename)) java_replace:@"#" withSequence:@"%23"];
    return EsGobAfirmaCoreMiscAOUtil_createURIWithNSString_(JreStrcat("$$", @"file://", filename));
  }
  
#line 110
  if ([scheme java_length] == 1 && JavaLangCharacter_isLetterWithChar_((jchar) IOSByteArray_Get(nil_chk([scheme java_getBytes]), 0))) {
    filename = [((NSString *) nil_chk(filename)) java_replace:@"#" withSequence:@"%23"];
    return EsGobAfirmaCoreMiscAOUtil_createURIWithNSString_(JreStrcat("$$", @"file://", filename));
  }
  
#line 115
  @throw new_JavaNetURISyntaxException_initWithNSString_withNSString_(filename, @"Tipo de URI no soportado");
}


#line 123
JavaIoInputStream *EsGobAfirmaCoreMiscAOUtil_loadFileWithJavaNetURI_(JavaNetURI *uri) {
  EsGobAfirmaCoreMiscAOUtil_initialize();
  if (uri == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Se ha pedido el contenido de una URI nula");
  }
  
#line 129
  if ([((NSString *) nil_chk([uri getScheme])) isEqual:@"file"]) {
    
#line 134
    NSString *path = [uri getSchemeSpecificPart];
    if ([((NSString *) nil_chk(path)) java_hasPrefix:@"//"]) {
      path = [path java_substring:2];
    }
    return new_JavaIoFileInputStream_initWithJavaIoFile_(new_JavaIoFile_initWithNSString_(path));
  }
  
#line 142
  JavaIoInputStream *tmpStream = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_([((JavaNetURL *) nil_chk([uri toURL])) openStream]);
  
#line 147
  IOSByteArray *tmpBuffer = EsGobAfirmaCoreMiscAOUtil_getDataFromInputStreamWithJavaIoInputStream_(tmpStream);
  
#line 149
  return new_JavaIoByteArrayInputStream_initWithByteArray_(tmpBuffer);
}


#line 158
IOSByteArray *EsGobAfirmaCoreMiscAOUtil_getDataFromInputStreamWithJavaIoInputStream_(JavaIoInputStream *input) {
  EsGobAfirmaCoreMiscAOUtil_initialize();
  
#line 159
  if (input == nil) {
    return [IOSByteArray newArrayWithLength:0];
  }
  jint nBytes;
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:EsGobAfirmaCoreMiscAOUtil_BUFFER_SIZE];
  JavaIoByteArrayOutputStream *baos = new_JavaIoByteArrayOutputStream_init();
  while ((nBytes = [input readWithByteArray:buffer]) != -1) {
    [baos writeWithByteArray:buffer withInt:0 withInt:nBytes];
  }
  return [baos toByteArray];
}


#line 178
NSString *EsGobAfirmaCoreMiscAOUtil_getCNWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *c) {
  EsGobAfirmaCoreMiscAOUtil_initialize();
  
#line 179
  if (c == nil) {
    return nil;
  }
  return EsGobAfirmaCoreMiscAOUtil_getCNWithNSString_([((JavaxSecurityAuthX500X500Principal *) nil_chk([c getSubjectX500Principal])) description]);
}


#line 192
NSString *EsGobAfirmaCoreMiscAOUtil_getCNWithNSString_(NSString *principal) {
  EsGobAfirmaCoreMiscAOUtil_initialize();
  
#line 193
  if (principal == nil) {
    return nil;
  }
  
#line 197
  NSString *rdn = EsGobAfirmaCoreMiscAOUtil_getRDNvalueFromLdapNameWithNSString_withNSString_(@"cn", principal);
  if (rdn == nil) {
    rdn = EsGobAfirmaCoreMiscAOUtil_getRDNvalueFromLdapNameWithNSString_withNSString_(@"ou", principal);
  }
  
#line 202
  if (rdn != nil) {
    return rdn;
  }
  
#line 206
  jint i = [principal java_indexOf:'='];
  if (i != -1) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscAOUtil_LOGGER)) warningWithNSString:@"No se ha podido obtener el Common Name ni la Organizational Unit, se devolvera el fragmento mas significativo"];
    return EsGobAfirmaCoreMiscAOUtil_getRDNvalueFromLdapNameWithNSString_withNSString_([principal java_substring:0 endIndex:i], principal);
  }
  
#line 212
  [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscAOUtil_LOGGER)) warningWithNSString:@"Principal no valido, se devolvera la entrada"];
  return principal;
}

NSString *EsGobAfirmaCoreMiscAOUtil_getRDNvalueFromLdapNameWithNSString_withNSString_(NSString *rdn, NSString *principal) {
  EsGobAfirmaCoreMiscAOUtil_initialize();
  jint offset1 = 0;
  while ((offset1 = [((NSString *) nil_chk([((NSString *) nil_chk(principal)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_indexOfString:[((NSString *) nil_chk(rdn)) lowercaseString] fromIndex:offset1]) != -1) {
    
#line 228
    if (offset1 > 0 && [principal charAtWithInt:offset1 - 1] != ',' && [principal charAtWithInt:offset1 - 1] != ' ') {
      offset1++;
      continue;
    }
    
#line 233
    offset1 += [rdn java_length];
    while (offset1 < [principal java_length] && [principal charAtWithInt:offset1] == ' ') {
      offset1++;
    }
    
#line 238
    if (offset1 >= [principal java_length]) {
      return nil;
    }
    
#line 242
    if ([principal charAtWithInt:offset1] != '=') {
      continue;
    }
    
#line 246
    offset1++;
    while (offset1 < [principal java_length] && [principal charAtWithInt:offset1] == ' ') {
      offset1++;
    }
    
#line 251
    if (offset1 >= [principal java_length]) {
      return @"";
    }
    
#line 255
    jint offset2;
    if ([principal charAtWithInt:offset1] == ',') {
      return @"";
    }
    else if ([principal charAtWithInt:offset1] == '"') {
      offset1++;
      if (offset1 >= [principal java_length]) {
        return @"";
      }
      
#line 265
      offset2 = [principal java_indexOf:'"' fromIndex:offset1];
      if (offset2 == offset1) {
        return @"";
      }
      else if (offset2 != -1) {
        return [principal java_substring:offset1 endIndex:offset2];
      }
      else {
        return [principal java_substring:offset1];
      }
    }
    else {
      offset2 = [principal java_indexOf:',' fromIndex:offset1];
      if (offset2 != -1) {
        return [((NSString *) nil_chk([principal java_substring:offset1 endIndex:offset2])) java_trim];
      }
      return [((NSString *) nil_chk([principal java_substring:offset1])) java_trim];
    }
  }
  
#line 285
  return nil;
}


#line 291
jboolean EsGobAfirmaCoreMiscAOUtil_isPseudonymCertWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *cert) {
  EsGobAfirmaCoreMiscAOUtil_initialize();
  return EsGobAfirmaCoreMiscAOUtil_getRDNvalueFromLdapNameWithNSString_withNSString_(@"2.5.4.65",
#line 294
  [((JavaxSecurityAuthX500X500Principal *) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSubjectX500Principal])) getNameWithNSString:JavaxSecurityAuthX500X500Principal_RFC2253]) != nil;
}


#line 312
NSString *EsGobAfirmaCoreMiscAOUtil_hexifyWithByteArray_withBoolean_(IOSByteArray *abyte0, jboolean separator) {
  EsGobAfirmaCoreMiscAOUtil_initialize();
  
#line 313
  if (abyte0 == nil) {
    return @"null";
  }
  
#line 317
  JavaLangStringBuffer *stringbuffer = new_JavaLangStringBuffer_initWithInt_(256);
  jint i = 0;
  for (jint j = 0; j < abyte0->size_; j++) {
    if (separator && i > 0) {
      (void) [stringbuffer appendWithChar:'-'];
    }
    (void) [stringbuffer appendWithChar:IOSCharArray_Get(nil_chk(EsGobAfirmaCoreMiscAOUtil_HEX_CHARS), (JreRShift32(IOSByteArray_Get(abyte0, j), 4)) & (jint) 0xf)];
    (void) [stringbuffer appendWithChar:IOSCharArray_Get(EsGobAfirmaCoreMiscAOUtil_HEX_CHARS, IOSByteArray_Get(abyte0, j) & (jint) 0xf)];
    ++i;
    if (i == 16) {
      if (separator && j < abyte0->size_ - 1) {
        (void) [stringbuffer appendWithChar:0x000a];
      }
      i = 0;
    }
  }
  return [stringbuffer description];
}


#line 345
NSString *EsGobAfirmaCoreMiscAOUtil_hexifyWithByteArray_withNSString_(IOSByteArray *abyte0, NSString *separator) {
  EsGobAfirmaCoreMiscAOUtil_initialize();
  
#line 346
  if (abyte0 == nil) {
    return @"null";
  }
  
#line 350
  JavaLangStringBuffer *stringbuffer = new_JavaLangStringBuffer_initWithInt_(256);
  for (jint j = 0; j < abyte0->size_; j++) {
    if (separator != nil && j > 0) {
      (void) [stringbuffer appendWithNSString:separator];
    }
    (void) [stringbuffer appendWithChar:IOSCharArray_Get(nil_chk(EsGobAfirmaCoreMiscAOUtil_HEX_CHARS), (JreRShift32(IOSByteArray_Get(abyte0, j), 4)) & (jint) 0xf)];
    (void) [stringbuffer appendWithChar:IOSCharArray_Get(EsGobAfirmaCoreMiscAOUtil_HEX_CHARS, IOSByteArray_Get(abyte0, j) & (jint) 0xf)];
  }
  return [stringbuffer description];
}


#line 364
void EsGobAfirmaCoreMiscAOUtil_loadNativeLibraryWithNSString_(NSString *path) {
  EsGobAfirmaCoreMiscAOUtil_initialize();
  
#line 365
  if (path == nil) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscAOUtil_LOGGER)) warningWithNSString:@"No se puede cargar una biblioteca nula"];
    return;
  }
  jint pos = [path java_lastIndexOf:'.'];
  JavaIoFile *file = new_JavaIoFile_initWithNSString_(path);
  JavaIoFile *tempLibrary = JavaIoFile_createTempFileWithNSString_withNSString_(
#line 372
  pos < 1 ? [file getName] : [((NSString *) nil_chk([file getName])) java_substring:0 endIndex:[((NSString *) nil_chk([file getName])) java_indexOf:'.']],
#line 373
  pos < 1 || pos == [path java_length] - 1 ? nil : [path java_substring:pos]);
  
#line 376
  EsGobAfirmaCoreMiscAOUtil_copyFileWithJavaIoFile_withJavaIoFile_(file, tempLibrary);
  
#line 379
  [((JavaIoFile *) nil_chk(tempLibrary)) deleteOnExit];
  
#line 381
  [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscAOUtil_LOGGER)) infoWithNSString:JreStrcat("$$", @"Cargamos ", EsGobAfirmaCoreMiscLoggerUtil_getCleanUserHomePathWithNSString_([tempLibrary getAbsolutePath]))];
  JavaLangSystem_load__WithNSString_([tempLibrary getAbsolutePath]);
}


#line 389
void EsGobAfirmaCoreMiscAOUtil_copyFileWithJavaIoFile_withJavaIoFile_(JavaIoFile *source, JavaIoFile *dest) {
  EsGobAfirmaCoreMiscAOUtil_initialize();
  
#line 390
  if (source == nil || dest == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Ni origen ni destino de la copia pueden ser nulos");
  }
  {
    JavaIoFileInputStream *is = new_JavaIoFileInputStream_initWithJavaIoFile_(source);
    JavaLangThrowable *__primaryException4 = nil;
    
#line 393
    @try {
      JavaIoFileOutputStream *os = new_JavaIoFileOutputStream_initWithJavaIoFile_(
#line 395
      dest);
      JavaLangThrowable *__primaryException3 = nil;
      @try {
        JavaNioChannelsFileChannel *in =
#line 396
        [is getChannel];
        JavaLangThrowable *__primaryException2 = nil;
        @try {
          JavaNioChannelsFileChannel *out =
#line 397
          [os getChannel];
          JavaLangThrowable *__primaryException1 = nil;
          @try {
            
#line 399
            JavaNioMappedByteBuffer *buf = [((JavaNioChannelsFileChannel *) nil_chk(in)) mapWithJavaNioChannelsFileChannel_MapMode:JreLoadStatic(JavaNioChannelsFileChannel_MapMode, READ_ONLY) withLong:0 withLong:[in size]];
            [((JavaNioChannelsFileChannel *) nil_chk(out)) writeWithJavaNioByteBuffer:buf];
          }
          @catch (JavaLangThrowable *e) {
            __primaryException1 = e;
            @throw e;
          }
          @finally {
            if (out != nil) {
              if (__primaryException1 != nil) {
                @try {
                  [out close];
                }
                @catch (JavaLangThrowable *e) {
                  [__primaryException1 addSuppressedWithJavaLangThrowable:e];
                }
              }
              else {
                [out close];
              }
            }
          }
        }
        @catch (JavaLangThrowable *e) {
          __primaryException2 = e;
          @throw e;
        }
        @finally {
          if (in != nil) {
            if (__primaryException2 != nil) {
              @try {
                [in close];
              }
              @catch (JavaLangThrowable *e) {
                [__primaryException2 addSuppressedWithJavaLangThrowable:e];
              }
            }
            else {
              [in close];
            }
          }
        }
      }
      @catch (JavaLangThrowable *e) {
        __primaryException3 = e;
        @throw e;
      }
      @finally {
        if (os != nil) {
          if (__primaryException3 != nil) {
            @try {
              [os close];
            }
            @catch (JavaLangThrowable *e) {
              [__primaryException3 addSuppressedWithJavaLangThrowable:e];
            }
          }
          else {
            [os close];
          }
        }
      }
    }
    @catch (JavaLangThrowable *e) {
      __primaryException4 = e;
      @throw e;
    }
    @finally {
      if (is != nil) {
        if (__primaryException4 != nil) {
          @try {
            [is close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException4 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [is close];
        }
      }
    }
  }
}


#line 419
IOSObjectArray *EsGobAfirmaCoreMiscAOUtil_splitWithNSString_withNSString_(NSString *text, NSString *sp) {
  EsGobAfirmaCoreMiscAOUtil_initialize();
  JavaUtilArrayList *parts = new_JavaUtilArrayList_init();
  jint i = 0;
  jint j = 0;
  while (i != [((NSString *) nil_chk(text)) java_length] && (j = [text java_indexOfString:sp fromIndex:i]) != -1) {
    if (i == j) {
      [parts addWithId:@""];
    }
    else {
      [parts addWithId:[text java_substring:i endIndex:j]];
    }
    i = j + [((NSString *) nil_chk(sp)) java_length];
  }
  if (i == [text java_length]) {
    [parts addWithId:@""];
  }
  else {
    [parts addWithId:[text java_substring:i]];
  }
  
#line 440
  return [parts toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSString_class_()]];
}


#line 447
NSString *EsGobAfirmaCoreMiscAOUtil_properties2Base64WithJavaUtilProperties_(JavaUtilProperties *p) {
  EsGobAfirmaCoreMiscAOUtil_initialize();
  
#line 448
  if (p == nil) {
    return @"";
  }
  JavaIoByteArrayOutputStream *baos = new_JavaIoByteArrayOutputStream_init();
  JavaIoOutputStreamWriter *osw = new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withJavaNioCharsetCharset_(baos, EsGobAfirmaCoreMiscAOUtil_DEFAULT_ENCODING);
  [p storeWithJavaIoWriter:osw withNSString:@""];
  return EsGobAfirmaCoreMiscBase64_encodeWithByteArray_withBoolean_([baos toByteArray], true);
}


#line 461
JavaUtilProperties *EsGobAfirmaCoreMiscAOUtil_base642PropertiesWithNSString_(NSString *base64) {
  EsGobAfirmaCoreMiscAOUtil_initialize();
  
#line 462
  JavaUtilProperties *p = new_JavaUtilProperties_init();
  if (base64 == nil || [base64 java_isEmpty]) {
    return p;
  }
  [p load__WithJavaIoReader:new_JavaIoInputStreamReader_initWithJavaIoInputStream_withJavaNioCharsetCharset_(new_JavaIoByteArrayInputStream_initWithByteArray_(EsGobAfirmaCoreMiscBase64_decodeWithNSString_(
#line 467
  [((NSString *) nil_chk([base64 java_replace:'-' withChar:'+'])) java_replace:'_' withChar:'/'])), EsGobAfirmaCoreMiscAOUtil_DEFAULT_ENCODING)];
  
#line 470
  return p;
}

NSString *EsGobAfirmaCoreMiscAOUtil_propertiesAsStringWithJavaUtilProperties_(JavaUtilProperties *p) {
  EsGobAfirmaCoreMiscAOUtil_initialize();
  
#line 478
  if (p == nil) {
    return @"";
  }
  JavaLangStringBuilder *buffer = new_JavaLangStringBuilder_init();
  {
    IOSObjectArray *a__ =
#line 482
    [((id<JavaUtilSet>) nil_chk([p keySet])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSString_class_()]];
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *k = *b__++;
      
#line 483
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buffer appendWithNSString:k])) appendWithNSString:@"="])) appendWithNSString:[p getPropertyWithNSString:k]])) appendWithNSString:@"\n"];
    }
  }
  
#line 485
  return [buffer description];
}


#line 491
jboolean EsGobAfirmaCoreMiscAOUtil_isJava9orNewer() {
  EsGobAfirmaCoreMiscAOUtil_initialize();
  
#line 492
  NSString *ver = JavaLangSystem_getPropertyWithNSString_(@"java.version");
  if (ver == nil || [ver java_isEmpty]) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscAOUtil_LOGGER)) warningWithNSString:@"No se ha podido determinar la version de Java"];
    return false;
  }
  @try {
    
#line 499
    if ([ver java_hasPrefix:@"1."]) {
      return JavaLangInteger_parseIntWithNSString_([ver java_substring:2 endIndex:3]) > 8;
    }
    
#line 505
    NSString *majorVer = ver;
    if ([majorVer java_indexOfString:@"."] > -1) {
      majorVer = [majorVer java_substring:0 endIndex:[majorVer java_indexOfString:@"."]];
    }
    
#line 510
    if (EsGobAfirmaCoreMiscAOUtil_isOnlyNumberWithNSString_(majorVer)) {
      return JavaLangInteger_parseIntWithNSString_(majorVer) > 8;
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscAOUtil_LOGGER)) warningWithNSString:JreStrcat("$$$@", @"No se ha podido determinar la version de Java (", ver, @"):", e)];
  }
  return false;
}


#line 525
jboolean EsGobAfirmaCoreMiscAOUtil_isOnlyNumberWithNSString_(NSString *value) {
  EsGobAfirmaCoreMiscAOUtil_initialize();
  
#line 526
  if (value == nil || [value java_isEmpty]) {
    return false;
  }
  return [value java_matches:@"^[0-9]+$"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreMiscAOUtil)
