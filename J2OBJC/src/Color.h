//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/Color.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Color")
#ifdef RESTRICT_Color
#define INCLUDE_ALL_Color 0
#else
#define INCLUDE_ALL_Color 1
#endif
#undef RESTRICT_Color

#if !defined (HarmonyJavaAwtColor_) && (INCLUDE_ALL_Color || defined(INCLUDE_HarmonyJavaAwtColor))
#define HarmonyJavaAwtColor_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSFloatArray;

@interface HarmonyJavaAwtColor : NSObject < JavaIoSerializable > {
 @public
  /*!
   @brief integer RGB value
   */
  jint value_;
}

#pragma mark Public

- (instancetype)initWithFloat:(jfloat)r
                    withFloat:(jfloat)g
                    withFloat:(jfloat)b;

- (instancetype)initWithFloat:(jfloat)r
                    withFloat:(jfloat)g
                    withFloat:(jfloat)b
                    withFloat:(jfloat)a;

- (instancetype)initWithInt:(jint)rgb;

- (instancetype)initWithInt:(jint)rgba
                withBoolean:(jboolean)hasAlpha;

- (instancetype)initWithInt:(jint)r
                    withInt:(jint)g
                    withInt:(jint)b;

- (instancetype)initWithInt:(jint)r
                    withInt:(jint)g
                    withInt:(jint)b
                    withInt:(jint)a;

- (HarmonyJavaAwtColor *)brighter;

- (HarmonyJavaAwtColor *)darker;

+ (HarmonyJavaAwtColor *)decodeWithNSString:(NSString *)nm;

- (jboolean)isEqual:(id)obj;

- (jint)getAlpha;

- (jint)getBlue;

+ (HarmonyJavaAwtColor *)getColorWithNSString:(NSString *)nm;

+ (HarmonyJavaAwtColor *)getColorWithNSString:(NSString *)nm
                      withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)def;

+ (HarmonyJavaAwtColor *)getColorWithNSString:(NSString *)nm
                                      withInt:(jint)def;

- (IOSFloatArray *)getColorComponentsWithFloatArray:(IOSFloatArray *)components;

- (IOSFloatArray *)getComponentsWithFloatArray:(IOSFloatArray *)components;

- (jint)getGreen;

+ (HarmonyJavaAwtColor *)getHSBColorWithFloat:(jfloat)h
                                    withFloat:(jfloat)s
                                    withFloat:(jfloat)b;

- (jint)getRed;

- (jint)getRGB;

- (IOSFloatArray *)getRGBColorComponentsWithFloatArray:(IOSFloatArray *)components;

- (IOSFloatArray *)getRGBComponentsWithFloatArray:(IOSFloatArray *)components;

- (jint)getTransparency;

- (NSUInteger)hash;

+ (jint)HSBtoRGBWithFloat:(jfloat)hue
                withFloat:(jfloat)saturation
                withFloat:(jfloat)brightness;

+ (IOSFloatArray *)RGBtoHSBWithInt:(jint)r
                           withInt:(jint)g
                           withInt:(jint)b
                    withFloatArray:(IOSFloatArray *)hsbvals;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(HarmonyJavaAwtColor)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_white(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_white;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, white, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_WHITE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_WHITE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, WHITE, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_lightGray(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_lightGray;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, lightGray, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_LIGHT_GRAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_LIGHT_GRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, LIGHT_GRAY, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_gray(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_gray;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, gray, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_GRAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_GRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, GRAY, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_darkGray(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_darkGray;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, darkGray, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_DARK_GRAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_DARK_GRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, DARK_GRAY, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_black(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_black;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, black, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_BLACK(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_BLACK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, BLACK, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_red(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_red;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, red, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_RED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_RED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, RED, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_pink(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_pink;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, pink, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_PINK(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_PINK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, PINK, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_orange(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_orange;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, orange, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_ORANGE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_ORANGE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, ORANGE, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_yellow(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_yellow;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, yellow, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_YELLOW(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_YELLOW;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, YELLOW, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_green(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_green;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, green, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_GREEN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_GREEN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, GREEN, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_magenta(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_magenta;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, magenta, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_MAGENTA(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_MAGENTA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, MAGENTA, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_cyan(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_cyan;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, cyan, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_CYAN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_CYAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, CYAN, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_blue(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_blue;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, blue, HarmonyJavaAwtColor *)

inline HarmonyJavaAwtColor *HarmonyJavaAwtColor_get_BLUE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_BLUE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColor, BLUE, HarmonyJavaAwtColor *)

FOUNDATION_EXPORT void HarmonyJavaAwtColor_initWithInt_withBoolean_(HarmonyJavaAwtColor *self, jint rgba, jboolean hasAlpha);

FOUNDATION_EXPORT HarmonyJavaAwtColor *new_HarmonyJavaAwtColor_initWithInt_withBoolean_(jint rgba, jboolean hasAlpha) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT HarmonyJavaAwtColor *create_HarmonyJavaAwtColor_initWithInt_withBoolean_(jint rgba, jboolean hasAlpha);

FOUNDATION_EXPORT void HarmonyJavaAwtColor_initWithInt_withInt_withInt_withInt_(HarmonyJavaAwtColor *self, jint r, jint g, jint b, jint a);

FOUNDATION_EXPORT HarmonyJavaAwtColor *new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_withInt_(jint r, jint g, jint b, jint a) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT HarmonyJavaAwtColor *create_HarmonyJavaAwtColor_initWithInt_withInt_withInt_withInt_(jint r, jint g, jint b, jint a);

FOUNDATION_EXPORT void HarmonyJavaAwtColor_initWithInt_withInt_withInt_(HarmonyJavaAwtColor *self, jint r, jint g, jint b);

FOUNDATION_EXPORT HarmonyJavaAwtColor *new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(jint r, jint g, jint b) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT HarmonyJavaAwtColor *create_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(jint r, jint g, jint b);

FOUNDATION_EXPORT void HarmonyJavaAwtColor_initWithInt_(HarmonyJavaAwtColor *self, jint rgb);

FOUNDATION_EXPORT HarmonyJavaAwtColor *new_HarmonyJavaAwtColor_initWithInt_(jint rgb) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT HarmonyJavaAwtColor *create_HarmonyJavaAwtColor_initWithInt_(jint rgb);

FOUNDATION_EXPORT void HarmonyJavaAwtColor_initWithFloat_withFloat_withFloat_withFloat_(HarmonyJavaAwtColor *self, jfloat r, jfloat g, jfloat b, jfloat a);

FOUNDATION_EXPORT HarmonyJavaAwtColor *new_HarmonyJavaAwtColor_initWithFloat_withFloat_withFloat_withFloat_(jfloat r, jfloat g, jfloat b, jfloat a) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT HarmonyJavaAwtColor *create_HarmonyJavaAwtColor_initWithFloat_withFloat_withFloat_withFloat_(jfloat r, jfloat g, jfloat b, jfloat a);

FOUNDATION_EXPORT void HarmonyJavaAwtColor_initWithFloat_withFloat_withFloat_(HarmonyJavaAwtColor *self, jfloat r, jfloat g, jfloat b);

FOUNDATION_EXPORT HarmonyJavaAwtColor *new_HarmonyJavaAwtColor_initWithFloat_withFloat_withFloat_(jfloat r, jfloat g, jfloat b) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT HarmonyJavaAwtColor *create_HarmonyJavaAwtColor_initWithFloat_withFloat_withFloat_(jfloat r, jfloat g, jfloat b);

FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_getColorWithNSString_withHarmonyJavaAwtColor_(NSString *nm, HarmonyJavaAwtColor *def);

FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_getColorWithNSString_withInt_(NSString *nm, jint def);

FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_getColorWithNSString_(NSString *nm);

FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_decodeWithNSString_(NSString *nm);

FOUNDATION_EXPORT HarmonyJavaAwtColor *HarmonyJavaAwtColor_getHSBColorWithFloat_withFloat_withFloat_(jfloat h, jfloat s, jfloat b);

FOUNDATION_EXPORT IOSFloatArray *HarmonyJavaAwtColor_RGBtoHSBWithInt_withInt_withInt_withFloatArray_(jint r, jint g, jint b, IOSFloatArray *hsbvals);

FOUNDATION_EXPORT jint HarmonyJavaAwtColor_HSBtoRGBWithFloat_withFloat_withFloat_(jfloat hue, jfloat saturation, jfloat brightness);

J2OBJC_TYPE_LITERAL_HEADER(HarmonyJavaAwtColor)

#endif

#pragma pop_macro("INCLUDE_ALL_Color")
