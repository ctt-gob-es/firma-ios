//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jce/provider/BouncyCastleProvider.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_BouncyCastleProvider")
#ifdef RESTRICT_BouncyCastleProvider
#define INCLUDE_ALL_BouncyCastleProvider 0
#else
#define INCLUDE_ALL_BouncyCastleProvider 1
#endif
#undef RESTRICT_BouncyCastleProvider

#if !defined (OrgSpongycastleJceProviderBouncyCastleProvider_) && (INCLUDE_ALL_BouncyCastleProvider || defined(INCLUDE_OrgSpongycastleJceProviderBouncyCastleProvider))
#define OrgSpongycastleJceProviderBouncyCastleProvider_

#define RESTRICT_JavaSecurityProvider 1
#define INCLUDE_JavaSecurityProvider 1
#include "java/security/Provider.h"

#define RESTRICT_ConfigurableProvider 1
#define INCLUDE_OrgSpongycastleJcajceProviderConfigConfigurableProvider 1
#include "ConfigurableProvider.h"

@class OrgSpongycastleAsn1ASN1ObjectIdentifier;
@class OrgSpongycastleAsn1PkcsPrivateKeyInfo;
@class OrgSpongycastleAsn1X509SubjectPublicKeyInfo;
@protocol JavaSecurityPrivateKey;
@protocol JavaSecurityPublicKey;
@protocol JavaUtilMap;
@protocol OrgSpongycastleJcajceProviderConfigProviderConfiguration;
@protocol OrgSpongycastleJcajceProviderUtilAsymmetricKeyInfoConverter;

/*!
 @brief To add the provider at runtime use:
 @code

  import java.security.Security;
  import org.spongycastle.jce.provider.BouncyCastleProvider;
  Security.addProvider(new BouncyCastleProvider()); 
  
@endcode
  The provider can also be configured as part of your environment via
  static registration by adding an entry to the java.security properties
  file (found in $JAVA_HOME/jre/lib/security/java.security, where
  $JAVA_HOME is the location of your JDK/JRE distribution).
 You'll find
  detailed instructions in the file but basically it comes down to adding
  a line: 
 @code

   <code>
     security.provider.&lt;n&gt;=org.spongycastle.jce.provider.BouncyCastleProvider
   </code>
   
@endcode
  Where &lt;n&gt; is the preference you want the provider at (1 being the
  most preferred). 
 <p>Note: JCE algorithm names should be upper-case only so the case insensitive
  test for getInstance works.
 */
@interface OrgSpongycastleJceProviderBouncyCastleProvider : JavaSecurityProvider < OrgSpongycastleJcajceProviderConfigConfigurableProvider >

#pragma mark Public

/*!
 @brief Construct a new provider.This should only be required when
  using runtime registration of the provider using the 
 <code>Security.addProvider()</code> mechanism.
 */
- (instancetype)init;

- (void)addAlgorithmWithNSString:(NSString *)type
withOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid
                    withNSString:(NSString *)className_;

- (void)addAlgorithmWithNSString:(NSString *)key
                    withNSString:(NSString *)value;

- (void)addAttributesWithNSString:(NSString *)key
                  withJavaUtilMap:(id<JavaUtilMap>)attributeMap;

- (void)addKeyInfoConverterWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid
       withOrgSpongycastleJcajceProviderUtilAsymmetricKeyInfoConverter:(id<OrgSpongycastleJcajceProviderUtilAsymmetricKeyInfoConverter>)keyInfoConverter;

+ (id<JavaSecurityPrivateKey>)getPrivateKeyWithOrgSpongycastleAsn1PkcsPrivateKeyInfo:(OrgSpongycastleAsn1PkcsPrivateKeyInfo *)privateKeyInfo;

+ (id<JavaSecurityPublicKey>)getPublicKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo:(OrgSpongycastleAsn1X509SubjectPublicKeyInfo *)publicKeyInfo;

- (jboolean)hasAlgorithmWithNSString:(NSString *)type
                        withNSString:(NSString *)name;

- (void)setParameterWithNSString:(NSString *)parameterName
                          withId:(id)parameter;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSString:(NSString *)arg0
                      withDouble:(jdouble)arg1
                    withNSString:(NSString *)arg2 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleJceProviderBouncyCastleProvider)

inline NSString *OrgSpongycastleJceProviderBouncyCastleProvider_get_PROVIDER_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderBouncyCastleProvider_PROVIDER_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderBouncyCastleProvider, PROVIDER_NAME, NSString *)

inline id<OrgSpongycastleJcajceProviderConfigProviderConfiguration> OrgSpongycastleJceProviderBouncyCastleProvider_get_CONFIGURATION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<OrgSpongycastleJcajceProviderConfigProviderConfiguration> OrgSpongycastleJceProviderBouncyCastleProvider_CONFIGURATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderBouncyCastleProvider, CONFIGURATION, id<OrgSpongycastleJcajceProviderConfigProviderConfiguration>)

FOUNDATION_EXPORT void OrgSpongycastleJceProviderBouncyCastleProvider_init(OrgSpongycastleJceProviderBouncyCastleProvider *self);

FOUNDATION_EXPORT OrgSpongycastleJceProviderBouncyCastleProvider *new_OrgSpongycastleJceProviderBouncyCastleProvider_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleJceProviderBouncyCastleProvider *create_OrgSpongycastleJceProviderBouncyCastleProvider_init(void);

FOUNDATION_EXPORT id<JavaSecurityPublicKey> OrgSpongycastleJceProviderBouncyCastleProvider_getPublicKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(OrgSpongycastleAsn1X509SubjectPublicKeyInfo *publicKeyInfo);

FOUNDATION_EXPORT id<JavaSecurityPrivateKey> OrgSpongycastleJceProviderBouncyCastleProvider_getPrivateKeyWithOrgSpongycastleAsn1PkcsPrivateKeyInfo_(OrgSpongycastleAsn1PkcsPrivateKeyInfo *privateKeyInfo);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleJceProviderBouncyCastleProvider)

#endif

#pragma pop_macro("INCLUDE_ALL_BouncyCastleProvider")
