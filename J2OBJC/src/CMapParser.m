//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/fonts/cmaps/CMapParser.java
//

#include "CMap.h"
#include "CMapParser.h"
#include "CodespaceRange.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/PushbackInputStream.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#if !__has_feature(objc_arc)
#error "CMapParser must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfFontsCmapsCMapParser () {
 @public
  IOSByteArray *tokenParserByteBuffer_;
}

- (id)parseNextTokenWithJavaIoPushbackInputStream:(JavaIoPushbackInputStream *)is;

- (void)readUntilEndOfLineWithJavaIoInputStream:(JavaIoInputStream *)is
                       withJavaLangStringBuffer:(JavaLangStringBuffer *)buf;

- (jboolean)isWhitespaceOrEOFWithInt:(jint)aByte;

- (void)incrementWithByteArray:(IOSByteArray *)data;

- (void)incrementWithByteArray:(IOSByteArray *)data
                       withInt:(jint)position;

+ (NSString *)createStringFromBytesWithByteArray:(IOSByteArray *)bytes;

+ (jint)compareWithByteArray:(IOSByteArray *)first
               withByteArray:(IOSByteArray *)second;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfFontsCmapsCMapParser, tokenParserByteBuffer_, IOSByteArray *)

inline NSString *ComAowagieTextPdfFontsCmapsCMapParser_get_BEGIN_CODESPACE_RANGE(void);
static NSString *ComAowagieTextPdfFontsCmapsCMapParser_BEGIN_CODESPACE_RANGE = @"begincodespacerange";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfFontsCmapsCMapParser, BEGIN_CODESPACE_RANGE, NSString *)

inline NSString *ComAowagieTextPdfFontsCmapsCMapParser_get_BEGIN_BASE_FONT_CHAR(void);
static NSString *ComAowagieTextPdfFontsCmapsCMapParser_BEGIN_BASE_FONT_CHAR = @"beginbfchar";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfFontsCmapsCMapParser, BEGIN_BASE_FONT_CHAR, NSString *)

inline NSString *ComAowagieTextPdfFontsCmapsCMapParser_get_BEGIN_BASE_FONT_RANGE(void);
static NSString *ComAowagieTextPdfFontsCmapsCMapParser_BEGIN_BASE_FONT_RANGE = @"beginbfrange";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfFontsCmapsCMapParser, BEGIN_BASE_FONT_RANGE, NSString *)

inline NSString *ComAowagieTextPdfFontsCmapsCMapParser_get_MARK_END_OF_DICTIONARY(void);
static NSString *ComAowagieTextPdfFontsCmapsCMapParser_MARK_END_OF_DICTIONARY = @">>";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfFontsCmapsCMapParser, MARK_END_OF_DICTIONARY, NSString *)

inline NSString *ComAowagieTextPdfFontsCmapsCMapParser_get_MARK_END_OF_ARRAY(void);
static NSString *ComAowagieTextPdfFontsCmapsCMapParser_MARK_END_OF_ARRAY = @"]";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfFontsCmapsCMapParser, MARK_END_OF_ARRAY, NSString *)

__attribute__((unused)) static id ComAowagieTextPdfFontsCmapsCMapParser_parseNextTokenWithJavaIoPushbackInputStream_(ComAowagieTextPdfFontsCmapsCMapParser *self, JavaIoPushbackInputStream *is);

__attribute__((unused)) static void ComAowagieTextPdfFontsCmapsCMapParser_readUntilEndOfLineWithJavaIoInputStream_withJavaLangStringBuffer_(ComAowagieTextPdfFontsCmapsCMapParser *self, JavaIoInputStream *is, JavaLangStringBuffer *buf);

__attribute__((unused)) static jboolean ComAowagieTextPdfFontsCmapsCMapParser_isWhitespaceOrEOFWithInt_(ComAowagieTextPdfFontsCmapsCMapParser *self, jint aByte);

__attribute__((unused)) static void ComAowagieTextPdfFontsCmapsCMapParser_incrementWithByteArray_(ComAowagieTextPdfFontsCmapsCMapParser *self, IOSByteArray *data);

__attribute__((unused)) static void ComAowagieTextPdfFontsCmapsCMapParser_incrementWithByteArray_withInt_(ComAowagieTextPdfFontsCmapsCMapParser *self, IOSByteArray *data, jint position);

__attribute__((unused)) static NSString *ComAowagieTextPdfFontsCmapsCMapParser_createStringFromBytesWithByteArray_(IOSByteArray *bytes);

__attribute__((unused)) static jint ComAowagieTextPdfFontsCmapsCMapParser_compareWithByteArray_withByteArray_(IOSByteArray *first, IOSByteArray *second);

/*!
 @brief Internal class.
 */
@interface ComAowagieTextPdfFontsCmapsCMapParser_LiteralName : NSObject {
 @public
  NSString *name_;
}

- (instancetype)initWithComAowagieTextPdfFontsCmapsCMapParser:(ComAowagieTextPdfFontsCmapsCMapParser *)outer$
                                                 withNSString:(NSString *)theName;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfFontsCmapsCMapParser_LiteralName)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfFontsCmapsCMapParser_LiteralName, name_, NSString *)

__attribute__((unused)) static void ComAowagieTextPdfFontsCmapsCMapParser_LiteralName_initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_(ComAowagieTextPdfFontsCmapsCMapParser_LiteralName *self, ComAowagieTextPdfFontsCmapsCMapParser *outer$, NSString *theName);

__attribute__((unused)) static ComAowagieTextPdfFontsCmapsCMapParser_LiteralName *new_ComAowagieTextPdfFontsCmapsCMapParser_LiteralName_initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_(ComAowagieTextPdfFontsCmapsCMapParser *outer$, NSString *theName) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfFontsCmapsCMapParser_LiteralName *create_ComAowagieTextPdfFontsCmapsCMapParser_LiteralName_initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_(ComAowagieTextPdfFontsCmapsCMapParser *outer$, NSString *theName);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfFontsCmapsCMapParser_LiteralName)

/*!
 @brief Internal class.
 */
@interface ComAowagieTextPdfFontsCmapsCMapParser_Operator : NSObject {
 @public
  NSString *op_;
}

- (instancetype)initWithComAowagieTextPdfFontsCmapsCMapParser:(ComAowagieTextPdfFontsCmapsCMapParser *)outer$
                                                 withNSString:(NSString *)theOp;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfFontsCmapsCMapParser_Operator)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfFontsCmapsCMapParser_Operator, op_, NSString *)

__attribute__((unused)) static void ComAowagieTextPdfFontsCmapsCMapParser_Operator_initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_(ComAowagieTextPdfFontsCmapsCMapParser_Operator *self, ComAowagieTextPdfFontsCmapsCMapParser *outer$, NSString *theOp);

__attribute__((unused)) static ComAowagieTextPdfFontsCmapsCMapParser_Operator *new_ComAowagieTextPdfFontsCmapsCMapParser_Operator_initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_(ComAowagieTextPdfFontsCmapsCMapParser *outer$, NSString *theOp) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfFontsCmapsCMapParser_Operator *create_ComAowagieTextPdfFontsCmapsCMapParser_Operator_initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_(ComAowagieTextPdfFontsCmapsCMapParser *outer$, NSString *theOp);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfFontsCmapsCMapParser_Operator)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/fonts/cmaps/CMapParser.java"


#line 48
@implementation ComAowagieTextPdfFontsCmapsCMapParser

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 62
- (instancetype)init {
  ComAowagieTextPdfFontsCmapsCMapParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 74
- (ComAowagieTextPdfFontsCmapsCMap *)parseWithJavaIoInputStream:(JavaIoInputStream *)input {
  
#line 76
  JavaIoPushbackInputStream *cmapStream = new_JavaIoPushbackInputStream_initWithJavaIoInputStream_(input);
  ComAowagieTextPdfFontsCmapsCMap *result = new_ComAowagieTextPdfFontsCmapsCMap_init();
  id previousToken = nil;
  id token = nil;
  while ((token = ComAowagieTextPdfFontsCmapsCMapParser_parseNextTokenWithJavaIoPushbackInputStream_(self, cmapStream)) != nil) {
    
#line 82
    if ([token isKindOfClass:[ComAowagieTextPdfFontsCmapsCMapParser_Operator class]]) {
      
#line 84
      ComAowagieTextPdfFontsCmapsCMapParser_Operator *op = (ComAowagieTextPdfFontsCmapsCMapParser_Operator *) token;
      if ([((NSString *) nil_chk(((ComAowagieTextPdfFontsCmapsCMapParser_Operator *) nil_chk(op))->op_)) isEqual:ComAowagieTextPdfFontsCmapsCMapParser_BEGIN_CODESPACE_RANGE]) {
        
#line 87
        NSNumber *cosCount = (NSNumber *) cast_chk(previousToken, [NSNumber class]);
        for (jint j = 0; j < [((NSNumber *) nil_chk(cosCount)) intValue]; j++) {
          
#line 90
          IOSByteArray *startRange = (IOSByteArray *) cast_chk(ComAowagieTextPdfFontsCmapsCMapParser_parseNextTokenWithJavaIoPushbackInputStream_(self, cmapStream), [IOSByteArray class]);
          IOSByteArray *endRange = (IOSByteArray *) cast_chk(ComAowagieTextPdfFontsCmapsCMapParser_parseNextTokenWithJavaIoPushbackInputStream_(self, cmapStream), [IOSByteArray class]);
          ComAowagieTextPdfFontsCmapsCodespaceRange *range = new_ComAowagieTextPdfFontsCmapsCodespaceRange_initPackagePrivate();
          [range setStartWithByteArray:startRange];
          [range setEndWithByteArray:endRange];
          [result addCodespaceRangeWithComAowagieTextPdfFontsCmapsCodespaceRange:range];
        }
      }
      else if ([op->op_ isEqual:ComAowagieTextPdfFontsCmapsCMapParser_BEGIN_BASE_FONT_CHAR]) {
        
#line 100
        NSNumber *cosCount = (NSNumber *) cast_chk(previousToken, [NSNumber class]);
        for (jint j = 0; j < [((NSNumber *) nil_chk(cosCount)) intValue]; j++) {
          
#line 103
          IOSByteArray *inputCode = (IOSByteArray *) cast_chk(ComAowagieTextPdfFontsCmapsCMapParser_parseNextTokenWithJavaIoPushbackInputStream_(self, cmapStream), [IOSByteArray class]);
          id nextToken = ComAowagieTextPdfFontsCmapsCMapParser_parseNextTokenWithJavaIoPushbackInputStream_(self, cmapStream);
          if ([nextToken isKindOfClass:[IOSByteArray class]]) {
            
#line 107
            IOSByteArray *bytes = (IOSByteArray *) cast_chk(nextToken, [IOSByteArray class]);
            NSString *value = ComAowagieTextPdfFontsCmapsCMapParser_createStringFromBytesWithByteArray_(bytes);
            [result addMappingWithByteArray:inputCode withNSString:value];
          }
          else if ([nextToken isKindOfClass:[ComAowagieTextPdfFontsCmapsCMapParser_LiteralName class]]) {
            
#line 113
            [result addMappingWithByteArray:inputCode withNSString:((ComAowagieTextPdfFontsCmapsCMapParser_LiteralName *) nil_chk(((ComAowagieTextPdfFontsCmapsCMapParser_LiteralName *) nextToken)))->name_];
          }
          else {
            
#line 117
            @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Error parsing CMap beginbfchar, expected{COSString or COSName} and not ",
#line 118
            nextToken));
          }
        }
      }
      else if ([op->op_ isEqual:ComAowagieTextPdfFontsCmapsCMapParser_BEGIN_BASE_FONT_RANGE]) {
        
#line 124
        NSNumber *cosCount = (NSNumber *) cast_chk(previousToken, [NSNumber class]);
        
#line 126
        for (jint j = 0; j < [((NSNumber *) nil_chk(cosCount)) intValue]; j++) {
          
#line 128
          IOSByteArray *startCode = (IOSByteArray *) cast_chk(ComAowagieTextPdfFontsCmapsCMapParser_parseNextTokenWithJavaIoPushbackInputStream_(self, cmapStream), [IOSByteArray class]);
          IOSByteArray *endCode = (IOSByteArray *) cast_chk(ComAowagieTextPdfFontsCmapsCMapParser_parseNextTokenWithJavaIoPushbackInputStream_(self, cmapStream), [IOSByteArray class]);
          id nextToken = ComAowagieTextPdfFontsCmapsCMapParser_parseNextTokenWithJavaIoPushbackInputStream_(self, cmapStream);
          id<JavaUtilList> array = nil;
          IOSByteArray *tokenBytes = nil;
          if ([JavaUtilList_class_() isInstance:nextToken]) {
            
#line 135
            array = (id<JavaUtilList>) cast_check(nextToken, JavaUtilList_class_());
            tokenBytes = (IOSByteArray *) cast_chk([((id<JavaUtilList>) nil_chk(array)) getWithInt:0], [IOSByteArray class]);
          }
          else {
            
#line 140
            tokenBytes = (IOSByteArray *) cast_chk(nextToken, [IOSByteArray class]);
          }
          
#line 143
          NSString *value = nil;
          
#line 145
          jint arrayIndex = 0;
          jboolean done = false;
          while (!done) {
            
#line 149
            if (ComAowagieTextPdfFontsCmapsCMapParser_compareWithByteArray_withByteArray_(startCode, endCode) >= 0) {
              
#line 151
              done = true;
            }
            value = ComAowagieTextPdfFontsCmapsCMapParser_createStringFromBytesWithByteArray_(tokenBytes);
            [result addMappingWithByteArray:startCode withNSString:value];
            ComAowagieTextPdfFontsCmapsCMapParser_incrementWithByteArray_(self, startCode);
            
#line 157
            if (array == nil) {
              
#line 159
              ComAowagieTextPdfFontsCmapsCMapParser_incrementWithByteArray_(self, tokenBytes);
            }
            else {
              
#line 163
              arrayIndex++;
              if (arrayIndex < [array size]) {
                
#line 166
                tokenBytes = (IOSByteArray *) cast_chk([array getWithInt:arrayIndex], [IOSByteArray class]);
              }
            }
          }
        }
      }
    }
    previousToken = token;
  }
  return result;
}


#line 178
- (id)parseNextTokenWithJavaIoPushbackInputStream:(JavaIoPushbackInputStream *)is {
  return ComAowagieTextPdfFontsCmapsCMapParser_parseNextTokenWithJavaIoPushbackInputStream_(self, is);
}


#line 376
- (void)readUntilEndOfLineWithJavaIoInputStream:(JavaIoInputStream *)is
                       withJavaLangStringBuffer:(JavaLangStringBuffer *)buf {
  ComAowagieTextPdfFontsCmapsCMapParser_readUntilEndOfLineWithJavaIoInputStream_withJavaLangStringBuffer_(self, is, buf);
}


#line 386
- (jboolean)isWhitespaceOrEOFWithInt:(jint)aByte {
  return ComAowagieTextPdfFontsCmapsCMapParser_isWhitespaceOrEOFWithInt_(self, aByte);
}


#line 392
- (void)incrementWithByteArray:(IOSByteArray *)data {
  ComAowagieTextPdfFontsCmapsCMapParser_incrementWithByteArray_(self, data);
}


#line 397
- (void)incrementWithByteArray:(IOSByteArray *)data
                       withInt:(jint)position {
  ComAowagieTextPdfFontsCmapsCMapParser_incrementWithByteArray_withInt_(self, data, position);
}


#line 410
+ (NSString *)createStringFromBytesWithByteArray:(IOSByteArray *)bytes {
  return ComAowagieTextPdfFontsCmapsCMapParser_createStringFromBytesWithByteArray_(bytes);
}


#line 424
+ (jint)compareWithByteArray:(IOSByteArray *)first
               withByteArray:(IOSByteArray *)second {
  return ComAowagieTextPdfFontsCmapsCMapParser_compareWithByteArray_withByteArray_(first, second);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfFontsCmapsCMap;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 3, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 12, 10, 2, -1, -1, -1 },
    { NULL, "I", 0xa, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseWithJavaIoInputStream:);
  methods[2].selector = @selector(parseNextTokenWithJavaIoPushbackInputStream:);
  methods[3].selector = @selector(readUntilEndOfLineWithJavaIoInputStream:withJavaLangStringBuffer:);
  methods[4].selector = @selector(isWhitespaceOrEOFWithInt:);
  methods[5].selector = @selector(incrementWithByteArray:);
  methods[6].selector = @selector(incrementWithByteArray:withInt:);
  methods[7].selector = @selector(createStringFromBytesWithByteArray:);
  methods[8].selector = @selector(compareWithByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BEGIN_CODESPACE_RANGE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "BEGIN_BASE_FONT_CHAR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "BEGIN_BASE_FONT_RANGE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "MARK_END_OF_DICTIONARY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "MARK_END_OF_ARRAY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "tokenParserByteBuffer_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "parse", "LJavaIoInputStream;", "LJavaIoIOException;", "parseNextToken", "LJavaIoPushbackInputStream;", "readUntilEndOfLine", "LJavaIoInputStream;LJavaLangStringBuffer;", "isWhitespaceOrEOF", "I", "increment", "[B", "[BI", "createStringFromBytes", "compare", "[B[B", &ComAowagieTextPdfFontsCmapsCMapParser_BEGIN_CODESPACE_RANGE, &ComAowagieTextPdfFontsCmapsCMapParser_BEGIN_BASE_FONT_CHAR, &ComAowagieTextPdfFontsCmapsCMapParser_BEGIN_BASE_FONT_RANGE, &ComAowagieTextPdfFontsCmapsCMapParser_MARK_END_OF_DICTIONARY, &ComAowagieTextPdfFontsCmapsCMapParser_MARK_END_OF_ARRAY, "LComAowagieTextPdfFontsCmapsCMapParser_LiteralName;LComAowagieTextPdfFontsCmapsCMapParser_Operator;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfFontsCmapsCMapParser = { "CMapParser", "com.aowagie.text.pdf.fonts.cmaps", ptrTable, methods, fields, 7, 0x1, 9, 6, -1, 20, -1, -1, -1 };
  return &_ComAowagieTextPdfFontsCmapsCMapParser;
}

@end


#line 62
void ComAowagieTextPdfFontsCmapsCMapParser_init(ComAowagieTextPdfFontsCmapsCMapParser *self) {
  NSObject_init(self);
  self->tokenParserByteBuffer_ = [IOSByteArray newArrayWithLength:
#line 57
  512];
}


#line 62
ComAowagieTextPdfFontsCmapsCMapParser *new_ComAowagieTextPdfFontsCmapsCMapParser_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfFontsCmapsCMapParser, init)
}


#line 62
ComAowagieTextPdfFontsCmapsCMapParser *create_ComAowagieTextPdfFontsCmapsCMapParser_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfFontsCmapsCMapParser, init)
}


#line 178
id ComAowagieTextPdfFontsCmapsCMapParser_parseNextTokenWithJavaIoPushbackInputStream_(ComAowagieTextPdfFontsCmapsCMapParser *self, JavaIoPushbackInputStream *is) {
  
#line 180
  id retval = nil;
  jint nextByte = [((JavaIoPushbackInputStream *) nil_chk(is)) read];
  
#line 183
  while (nextByte == (jint) 0x09 || nextByte == (jint) 0x20 || nextByte == (jint) 0x0D || nextByte == (jint) 0x0A) {
    
#line 185
    nextByte = [is read];
  }
  switch (nextByte) {
    
#line 189
    case '%':
    {
      
#line 193
      JavaLangStringBuffer *buffer = new_JavaLangStringBuffer_init();
      (void) [buffer appendWithChar:(jchar) nextByte];
      ComAowagieTextPdfFontsCmapsCMapParser_readUntilEndOfLineWithJavaIoInputStream_withJavaLangStringBuffer_(self, is, buffer);
      retval = [buffer description];
      break;
    }
    case '(':
    {
      JavaLangStringBuffer *buffer = new_JavaLangStringBuffer_init();
      jint stringByte = [is read];
      
#line 204
      while (stringByte != -1 && stringByte != ')') {
        
#line 206
        (void) [buffer appendWithChar:(jchar) stringByte];
        stringByte = [is read];
      }
      retval = [buffer description];
      break;
    }
    case '>':
    {
      jint secondCloseBrace = [is read];
      if (secondCloseBrace == '>') {
        
#line 217
        retval = ComAowagieTextPdfFontsCmapsCMapParser_MARK_END_OF_DICTIONARY;
      }
      else {
        
#line 221
        @throw new_JavaIoIOException_initWithNSString_(@"Error: expected the end of a dictionary.");
      }
      break;
    }
    case ']':
    {
      retval = ComAowagieTextPdfFontsCmapsCMapParser_MARK_END_OF_ARRAY;
      break;
    }
    case '[':
    {
      id<JavaUtilList> list = new_JavaUtilArrayList_init();
      
#line 234
      id nextToken = ComAowagieTextPdfFontsCmapsCMapParser_parseNextTokenWithJavaIoPushbackInputStream_(self, is);
      while (!JreObjectEqualsEquals(nextToken, ComAowagieTextPdfFontsCmapsCMapParser_MARK_END_OF_ARRAY)) {
        
#line 237
        [list addWithId:nextToken];
        nextToken = ComAowagieTextPdfFontsCmapsCMapParser_parseNextTokenWithJavaIoPushbackInputStream_(self, is);
      }
      retval = list;
      break;
    }
    case '<':
    {
      jint theNextByte = [is read];
      if (theNextByte == '<') {
        
#line 248
        id<JavaUtilMap> result = new_JavaUtilLinkedHashMap_init();
        
#line 250
        id key = ComAowagieTextPdfFontsCmapsCMapParser_parseNextTokenWithJavaIoPushbackInputStream_(self, is);
        while ([key isKindOfClass:[ComAowagieTextPdfFontsCmapsCMapParser_LiteralName class]] && !JreObjectEqualsEquals(key, ComAowagieTextPdfFontsCmapsCMapParser_MARK_END_OF_DICTIONARY)) {
          
#line 253
          id value = ComAowagieTextPdfFontsCmapsCMapParser_parseNextTokenWithJavaIoPushbackInputStream_(self, is);
          (void) [result putWithId:((ComAowagieTextPdfFontsCmapsCMapParser_LiteralName *) nil_chk(((ComAowagieTextPdfFontsCmapsCMapParser_LiteralName *) cast_chk(key, [ComAowagieTextPdfFontsCmapsCMapParser_LiteralName class]))))->name_ withId:value];
          key = ComAowagieTextPdfFontsCmapsCMapParser_parseNextTokenWithJavaIoPushbackInputStream_(self, is);
        }
        retval = result;
      }
      else {
        
#line 263
        jint multiplyer = 16;
        jint bufferIndex = -1;
        while (theNextByte != -1 && theNextByte != '>') {
          
#line 267
          jint intValue = 0;
          if (theNextByte >= '0' && theNextByte <= '9') {
            
#line 270
            intValue = theNextByte - '0';
          }
          else if (theNextByte >= 'A' && theNextByte <= 'F') {
            
#line 274
            intValue = 10 + theNextByte - 'A';
          }
          else if (theNextByte >= 'a' && theNextByte <= 'f') {
            
#line 278
            intValue = 10 + theNextByte - 'a';
          }
          else {
            
#line 282
            @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$CCI", @"Error: expected hex character and not ",
#line 283
            (jchar) theNextByte, ':', theNextByte));
          }
          intValue *= multiplyer;
          if (multiplyer == 16) {
            
#line 288
            bufferIndex++;
            *IOSByteArray_GetRef(nil_chk(self->tokenParserByteBuffer_), bufferIndex) = 0;
            multiplyer = 1;
          }
          else {
            
#line 294
            multiplyer = 16;
          }
          *IOSByteArray_GetRef(nil_chk(self->tokenParserByteBuffer_), bufferIndex) += intValue;
          theNextByte = [is read];
        }
        IOSByteArray *finalResult = [IOSByteArray newArrayWithLength:bufferIndex + 1];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->tokenParserByteBuffer_, 0, finalResult, 0, bufferIndex + 1);
        retval = finalResult;
      }
      break;
    }
    case '/':
    {
      JavaLangStringBuffer *buffer = new_JavaLangStringBuffer_init();
      jint stringByte = [is read];
      
#line 310
      while (!ComAowagieTextPdfFontsCmapsCMapParser_isWhitespaceOrEOFWithInt_(self, stringByte)) {
        
#line 312
        (void) [buffer appendWithChar:(jchar) stringByte];
        stringByte = [is read];
      }
      retval = new_ComAowagieTextPdfFontsCmapsCMapParser_LiteralName_initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_(self, [buffer description]);
      break;
    }
    case -1:
    {
      
#line 321
      break;
    }
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    {
      JavaLangStringBuffer *buffer = new_JavaLangStringBuffer_init();
      (void) [buffer appendWithChar:(jchar) nextByte];
      nextByte = [is read];
      
#line 338
      while (!ComAowagieTextPdfFontsCmapsCMapParser_isWhitespaceOrEOFWithInt_(self, nextByte) &&
#line 339
      (JavaLangCharacter_isDigitWithChar_((jchar) nextByte) ||
#line 340
      nextByte == '.')) {
        
#line 342
        (void) [buffer appendWithChar:(jchar) nextByte];
        nextByte = [is read];
      }
      [is unreadWithInt:nextByte];
      NSString *value = [buffer description];
      if ([((NSString *) nil_chk(value)) java_indexOf:'.'] >= 0) {
        
#line 349
        retval = new_JavaLangDouble_initWithNSString_(value);
      }
      else {
        
#line 353
        retval = new_JavaLangInteger_initWithNSString_([buffer description]);
      }
      break;
    }
    default:
    {
      JavaLangStringBuffer *buffer = new_JavaLangStringBuffer_init();
      (void) [buffer appendWithChar:(jchar) nextByte];
      nextByte = [is read];
      
#line 363
      while (!ComAowagieTextPdfFontsCmapsCMapParser_isWhitespaceOrEOFWithInt_(self, nextByte)) {
        
#line 365
        (void) [buffer appendWithChar:(jchar) nextByte];
        nextByte = [is read];
      }
      retval = new_ComAowagieTextPdfFontsCmapsCMapParser_Operator_initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_(self, [buffer description]);
      
#line 370
      break;
    }
  }
  return retval;
}


#line 376
void ComAowagieTextPdfFontsCmapsCMapParser_readUntilEndOfLineWithJavaIoInputStream_withJavaLangStringBuffer_(ComAowagieTextPdfFontsCmapsCMapParser *self, JavaIoInputStream *is, JavaLangStringBuffer *buf) {
  
#line 378
  jint nextByte = [((JavaIoInputStream *) nil_chk(is)) read];
  while (nextByte != -1 && nextByte != (jint) 0x0D && nextByte != (jint) 0x0A) {
    
#line 381
    (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithChar:(jchar) nextByte];
    nextByte = [is read];
  }
}


#line 386
jboolean ComAowagieTextPdfFontsCmapsCMapParser_isWhitespaceOrEOFWithInt_(ComAowagieTextPdfFontsCmapsCMapParser *self, jint aByte) {
  
#line 388
  return aByte == -1 || aByte == (jint) 0x20 || aByte == (jint) 0x0D || aByte == (jint) 0x0A;
}

void ComAowagieTextPdfFontsCmapsCMapParser_incrementWithByteArray_(ComAowagieTextPdfFontsCmapsCMapParser *self, IOSByteArray *data) {
  
#line 394
  ComAowagieTextPdfFontsCmapsCMapParser_incrementWithByteArray_withInt_(self, data, ((IOSByteArray *) nil_chk(data))->size_ - 1);
}


#line 397
void ComAowagieTextPdfFontsCmapsCMapParser_incrementWithByteArray_withInt_(ComAowagieTextPdfFontsCmapsCMapParser *self, IOSByteArray *data, jint position) {
  
#line 399
  if (position > 0 && JreIntMod((IOSByteArray_Get(nil_chk(data), position) + 256), 256) == 255) {
    
#line 401
    *IOSByteArray_GetRef(nil_chk(data), position) = 0;
    ComAowagieTextPdfFontsCmapsCMapParser_incrementWithByteArray_withInt_(self, data, position - 1);
  }
  else {
    
#line 406
    *IOSByteArray_GetRef(nil_chk(data), position) = (jbyte) (IOSByteArray_Get(data, position) + 1);
  }
}


#line 410
NSString *ComAowagieTextPdfFontsCmapsCMapParser_createStringFromBytesWithByteArray_(IOSByteArray *bytes) {
  ComAowagieTextPdfFontsCmapsCMapParser_initialize();
  NSString *retval = nil;
  if (((IOSByteArray *) nil_chk(bytes))->size_ == 1) {
    
#line 415
    retval = [NSString java_stringWithBytes:bytes];
  }
  else {
    
#line 419
    retval = [NSString java_stringWithBytes:bytes charsetName:@"UTF-16BE"];
  }
  return retval;
}


#line 424
jint ComAowagieTextPdfFontsCmapsCMapParser_compareWithByteArray_withByteArray_(IOSByteArray *first, IOSByteArray *second) {
  ComAowagieTextPdfFontsCmapsCMapParser_initialize();
  jint retval = 1;
  jboolean done = false;
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(first))->size_ && !done; i++) {
    
#line 430
    if (IOSByteArray_Get(first, i) == IOSByteArray_Get(nil_chk(second), i)) {
    }
    else
#line 434
    if (JreIntMod((IOSByteArray_Get(first, i) + 256), 256) < JreIntMod((IOSByteArray_Get(second, i) + 256), 256)) {
      
#line 436
      done = true;
      retval = -1;
    }
    else {
      
#line 441
      done = true;
      retval = 1;
    }
  }
  return retval;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfFontsCmapsCMapParser)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/fonts/cmaps/CMapParser.java"


#line 451
@implementation ComAowagieTextPdfFontsCmapsCMapParser_LiteralName


#line 454
- (instancetype)initWithComAowagieTextPdfFontsCmapsCMapParser:(ComAowagieTextPdfFontsCmapsCMapParser *)outer$
                                                 withNSString:(NSString *)theName {
  ComAowagieTextPdfFontsCmapsCMapParser_LiteralName_initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_(self, outer$, theName);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComAowagieTextPdfFontsCmapsCMapParser:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfFontsCmapsCMapParser;LNSString;", "LComAowagieTextPdfFontsCmapsCMapParser;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfFontsCmapsCMapParser_LiteralName = { "LiteralName", "com.aowagie.text.pdf.fonts.cmaps", ptrTable, methods, fields, 7, 0x2, 1, 1, 1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfFontsCmapsCMapParser_LiteralName;
}

@end


#line 454
void ComAowagieTextPdfFontsCmapsCMapParser_LiteralName_initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_(ComAowagieTextPdfFontsCmapsCMapParser_LiteralName *self, ComAowagieTextPdfFontsCmapsCMapParser *outer$, NSString *theName) {
  NSObject_init(self);
  self->name_ = theName;
}


#line 454
ComAowagieTextPdfFontsCmapsCMapParser_LiteralName *new_ComAowagieTextPdfFontsCmapsCMapParser_LiteralName_initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_(ComAowagieTextPdfFontsCmapsCMapParser *outer$, NSString *theName) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfFontsCmapsCMapParser_LiteralName, initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_, outer$, theName)
}


#line 454
ComAowagieTextPdfFontsCmapsCMapParser_LiteralName *create_ComAowagieTextPdfFontsCmapsCMapParser_LiteralName_initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_(ComAowagieTextPdfFontsCmapsCMapParser *outer$, NSString *theName) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfFontsCmapsCMapParser_LiteralName, initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_, outer$, theName)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfFontsCmapsCMapParser_LiteralName)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/fonts/cmaps/CMapParser.java"


#line 463
@implementation ComAowagieTextPdfFontsCmapsCMapParser_Operator


#line 466
- (instancetype)initWithComAowagieTextPdfFontsCmapsCMapParser:(ComAowagieTextPdfFontsCmapsCMapParser *)outer$
                                                 withNSString:(NSString *)theOp {
  ComAowagieTextPdfFontsCmapsCMapParser_Operator_initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_(self, outer$, theOp);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComAowagieTextPdfFontsCmapsCMapParser:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "op_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfFontsCmapsCMapParser;LNSString;", "LComAowagieTextPdfFontsCmapsCMapParser;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfFontsCmapsCMapParser_Operator = { "Operator", "com.aowagie.text.pdf.fonts.cmaps", ptrTable, methods, fields, 7, 0x2, 1, 1, 1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfFontsCmapsCMapParser_Operator;
}

@end


#line 466
void ComAowagieTextPdfFontsCmapsCMapParser_Operator_initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_(ComAowagieTextPdfFontsCmapsCMapParser_Operator *self, ComAowagieTextPdfFontsCmapsCMapParser *outer$, NSString *theOp) {
  NSObject_init(self);
  self->op_ = theOp;
}


#line 466
ComAowagieTextPdfFontsCmapsCMapParser_Operator *new_ComAowagieTextPdfFontsCmapsCMapParser_Operator_initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_(ComAowagieTextPdfFontsCmapsCMapParser *outer$, NSString *theOp) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfFontsCmapsCMapParser_Operator, initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_, outer$, theOp)
}


#line 466
ComAowagieTextPdfFontsCmapsCMapParser_Operator *create_ComAowagieTextPdfFontsCmapsCMapParser_Operator_initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_(ComAowagieTextPdfFontsCmapsCMapParser *outer$, NSString *theOp) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfFontsCmapsCMapParser_Operator, initWithComAowagieTextPdfFontsCmapsCMapParser_withNSString_, outer$, theOp)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfFontsCmapsCMapParser_Operator)
