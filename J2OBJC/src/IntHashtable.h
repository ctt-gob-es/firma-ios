//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/IntHashtable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IntHashtable")
#ifdef RESTRICT_IntHashtable
#define INCLUDE_ALL_IntHashtable 0
#else
#define INCLUDE_ALL_IntHashtable 1
#endif
#undef RESTRICT_IntHashtable

#if !defined (ComAowagieTextPdfIntHashtable_) && (INCLUDE_ALL_IntHashtable || defined(INCLUDE_ComAowagieTextPdfIntHashtable))
#define ComAowagieTextPdfIntHashtable_

@class IOSIntArray;
@protocol JavaUtilIterator;

/*!
 @brief <p>A hash map that uses primitive ints for the key rather than objects.
 </p>
  
 <p>Note that this class is for internal optimization purposes only, and may
  not be supported in future releases of Jakarta Commons Lang.  Utilities of
  this sort may be included in future releases of Jakarta Commons Collections.</p>
 @author Justin Couch
 @author Alex Chaffee (alex@@apache.org)
 @author Stephen Colebourne
 @author Bruno Lowagie (change Objects as keys into int values)
 @author Paulo Soares (added extra methods)
 */
@interface ComAowagieTextPdfIntHashtable : NSObject < NSCopying >

#pragma mark Public

/*!
 @brief <p>Constructs a new, empty hashtable with a default capacity and load
  factor, which is <code>20</code> and <code>0.75</code> respectively.
 </p>
 */
- (instancetype)initPackagePrivate;

/*!
 @brief <p>Constructs a new, empty hashtable with the specified initial capacity
  and default load factor, which is <code>0.75</code>.
 </p>
 @param initialCapacity the initial capacity of the hashtable.
 @throw IllegalArgumentExceptionif the initial capacity is less
    than zero.
 */
- (instancetype)initPackagePrivateWithInt:(jint)initialCapacity;

- (id)java_clone;

- (id<JavaUtilIterator>)getEntryIterator;

- (IOSIntArray *)getKeys;

- (jint)getOneKey;

/*!
 @brief <p>Tests if this hashtable maps no keys to values.
 </p>
 @return <code>true</code> if this hashtable maps no keys to values;
           <code>false</code> otherwise.
 */
- (jboolean)isEmpty;

#pragma mark Package-Private

/*!
 @brief <p>Clears this hashtable so that it contains no keys.
 </p>
 */
- (void)clear;

/*!
 @brief <p>Tests if the specified int is a key in this hashtable.
 </p>
 @param key possible key.
 @return <code>true</code> if and only if the specified int is a
     key in this hashtable, as determined by the <tt>equals</tt>
     method; <code>false</code> otherwise.
 */
- (jboolean)containsKeyWithInt:(jint)key;

/*!
 @brief <p>Returns the value to which the specified key is mapped in this map.
 </p>
 @param key a key in the hashtable.
 @return the value to which the key is mapped in this hashtable;
           <code>null</code> if the key is not mapped to any value in
           this hashtable.
 - seealso: #put(int, int)
 */
- (jint)getWithInt:(jint)key;

/*!
 @brief <p>Maps the specified <code>key</code> to the specified 
 <code>value</code> in this hashtable.The key cannot be 
 <code>null</code>.
 </p>
  
 <p>The value can be retrieved by calling the <code>get</code> method
  with a key that is equal to the original key.</p>
 @param key the hashtable key.
 @param value the value.
 @return the previous value of the specified key in this hashtable,
          or <code>null</code> if it did not have one.
 @throw NullPointerExceptionif the key is <code>null</code>.
 - seealso: #get(int)
 */
- (jint)putWithInt:(jint)key
           withInt:(jint)value;

/*!
 @brief <p>Removes the key (and its corresponding value) from this
  hashtable.
 </p>
  
 <p>This method does nothing if the key is not present in the
  hashtable.</p>
 @param key the key that needs to be removed.
 @return the value to which the key had been mapped in this hashtable,
           or <code>null</code> if the key did not have a mapping.
 */
- (jint)removeWithInt:(jint)key;

/*!
 @brief <p>Returns the number of keys in this hashtable.
 </p>
 @return the number of keys in this hashtable.
 */
- (jint)size;

- (IOSIntArray *)toOrderedKeys;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfIntHashtable)

FOUNDATION_EXPORT void ComAowagieTextPdfIntHashtable_initPackagePrivate(ComAowagieTextPdfIntHashtable *self);

FOUNDATION_EXPORT ComAowagieTextPdfIntHashtable *new_ComAowagieTextPdfIntHashtable_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfIntHashtable *create_ComAowagieTextPdfIntHashtable_initPackagePrivate(void);

FOUNDATION_EXPORT void ComAowagieTextPdfIntHashtable_initPackagePrivateWithInt_(ComAowagieTextPdfIntHashtable *self, jint initialCapacity);

FOUNDATION_EXPORT ComAowagieTextPdfIntHashtable *new_ComAowagieTextPdfIntHashtable_initPackagePrivateWithInt_(jint initialCapacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfIntHashtable *create_ComAowagieTextPdfIntHashtable_initPackagePrivateWithInt_(jint initialCapacity);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfIntHashtable)

#endif

#if !defined (ComAowagieTextPdfIntHashtable_Entry_) && (INCLUDE_ALL_IntHashtable || defined(INCLUDE_ComAowagieTextPdfIntHashtable_Entry))
#define ComAowagieTextPdfIntHashtable_Entry_

/*!
 @brief <p>Innerclass that acts as a datastructure to create a new entry in the
  table.
 </p>
 */
@interface ComAowagieTextPdfIntHashtable_Entry : NSObject

#pragma mark Public

- (jint)getKey;

- (jint)getValue;

#pragma mark Protected

- (id)java_clone;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfIntHashtable_Entry)

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfIntHashtable_Entry)

#endif

#pragma pop_macro("INCLUDE_ALL_IntHashtable")
