//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/DocumentFont.java
//

#include "BaseFont.h"
#include "CJKFont.h"
#include "DocumentFont.h"
#include "ExceptionConverter.h"
#include "GlyphList.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IntHashtable.h"
#include "J2ObjC_source.h"
#include "PRIndirectReference.h"
#include "PRStream.h"
#include "PRTokeniser.h"
#include "PdfArray.h"
#include "PdfContentParser.h"
#include "PdfDictionary.h"
#include "PdfEncodings.h"
#include "PdfIndirectReference.h"
#include "PdfName.h"
#include "PdfNumber.h"
#include "PdfObject.h"
#include "PdfReader.h"
#include "PdfStream.h"
#include "PdfString.h"
#include "PdfWriter.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"

#if !__has_feature(objc_arc)
#error "DocumentFont must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfDocumentFont () {
 @public
  JavaUtilHashMap *metrics_;
  NSString *fontName_;
  ComAowagieTextPdfPRIndirectReference *refFont_;
  ComAowagieTextPdfPdfDictionary *font_;
  ComAowagieTextPdfIntHashtable *uni2byte_;
  ComAowagieTextPdfIntHashtable *diffmap_;
  jfloat Ascender_;
  jfloat CapHeight_;
  jfloat Descender_;
  jfloat ItalicAngle_;
  jfloat llx_;
  jfloat lly_;
  jfloat urx_;
  jfloat ury_;
  jboolean isType0_;
  ComAowagieTextPdfBaseFont *cjkMirror_;
}

- (void)processType0WithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)font;

- (ComAowagieTextPdfIntHashtable *)readWidthsWithComAowagieTextPdfPdfArray:(ComAowagieTextPdfPdfArray *)ws;

- (NSString *)decodeStringWithComAowagieTextPdfPdfString:(ComAowagieTextPdfPdfString *)ps;

- (void)fillMetricsWithByteArray:(IOSByteArray *)touni
withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)widths
                         withInt:(jint)dw;

- (void)doType1TT;

- (void)fillFontDescWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)fontDesc;

- (void)fillEncodingWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)encoding;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfDocumentFont, metrics_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfDocumentFont, fontName_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfDocumentFont, refFont_, ComAowagieTextPdfPRIndirectReference *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfDocumentFont, font_, ComAowagieTextPdfPdfDictionary *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfDocumentFont, uni2byte_, ComAowagieTextPdfIntHashtable *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfDocumentFont, diffmap_, ComAowagieTextPdfIntHashtable *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfDocumentFont, cjkMirror_, ComAowagieTextPdfBaseFont *)

inline IOSObjectArray *ComAowagieTextPdfDocumentFont_get_cjkNames(void);
inline IOSObjectArray *ComAowagieTextPdfDocumentFont_set_cjkNames(IOSObjectArray *value);
static IOSObjectArray *ComAowagieTextPdfDocumentFont_cjkNames;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfDocumentFont, cjkNames, IOSObjectArray *)

inline IOSObjectArray *ComAowagieTextPdfDocumentFont_get_cjkEncs(void);
inline IOSObjectArray *ComAowagieTextPdfDocumentFont_set_cjkEncs(IOSObjectArray *value);
static IOSObjectArray *ComAowagieTextPdfDocumentFont_cjkEncs;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfDocumentFont, cjkEncs, IOSObjectArray *)

inline IOSObjectArray *ComAowagieTextPdfDocumentFont_get_cjkNames2(void);
inline IOSObjectArray *ComAowagieTextPdfDocumentFont_set_cjkNames2(IOSObjectArray *value);
static IOSObjectArray *ComAowagieTextPdfDocumentFont_cjkNames2;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfDocumentFont, cjkNames2, IOSObjectArray *)

inline IOSObjectArray *ComAowagieTextPdfDocumentFont_get_cjkEncs2(void);
inline IOSObjectArray *ComAowagieTextPdfDocumentFont_set_cjkEncs2(IOSObjectArray *value);
static IOSObjectArray *ComAowagieTextPdfDocumentFont_cjkEncs2;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfDocumentFont, cjkEncs2, IOSObjectArray *)

inline IOSIntArray *ComAowagieTextPdfDocumentFont_get_stdEnc(void);
static IOSIntArray *ComAowagieTextPdfDocumentFont_stdEnc;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfDocumentFont, stdEnc, IOSIntArray *)

__attribute__((unused)) static void ComAowagieTextPdfDocumentFont_processType0WithComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfDocumentFont *self, ComAowagieTextPdfPdfDictionary *font);

__attribute__((unused)) static ComAowagieTextPdfIntHashtable *ComAowagieTextPdfDocumentFont_readWidthsWithComAowagieTextPdfPdfArray_(ComAowagieTextPdfDocumentFont *self, ComAowagieTextPdfPdfArray *ws);

__attribute__((unused)) static NSString *ComAowagieTextPdfDocumentFont_decodeStringWithComAowagieTextPdfPdfString_(ComAowagieTextPdfDocumentFont *self, ComAowagieTextPdfPdfString *ps);

__attribute__((unused)) static void ComAowagieTextPdfDocumentFont_fillMetricsWithByteArray_withComAowagieTextPdfIntHashtable_withInt_(ComAowagieTextPdfDocumentFont *self, IOSByteArray *touni, ComAowagieTextPdfIntHashtable *widths, jint dw);

__attribute__((unused)) static void ComAowagieTextPdfDocumentFont_doType1TT(ComAowagieTextPdfDocumentFont *self);

__attribute__((unused)) static void ComAowagieTextPdfDocumentFont_fillFontDescWithComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfDocumentFont *self, ComAowagieTextPdfPdfDictionary *fontDesc);

__attribute__((unused)) static void ComAowagieTextPdfDocumentFont_fillEncodingWithComAowagieTextPdfPdfName_(ComAowagieTextPdfDocumentFont *self, ComAowagieTextPdfPdfName *encoding);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/DocumentFont.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfDocumentFont)


#line 60
@implementation ComAowagieTextPdfDocumentFont


#line 114
- (instancetype)initWithComAowagieTextPdfPRIndirectReference:(ComAowagieTextPdfPRIndirectReference *)refFont {
  ComAowagieTextPdfDocumentFont_initWithComAowagieTextPdfPRIndirectReference_(self, refFont);
  return self;
}


#line 159
- (void)processType0WithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)font {
  ComAowagieTextPdfDocumentFont_processType0WithComAowagieTextPdfPdfDictionary_(self, font);
}


#line 181
- (ComAowagieTextPdfIntHashtable *)readWidthsWithComAowagieTextPdfPdfArray:(ComAowagieTextPdfPdfArray *)ws {
  return ComAowagieTextPdfDocumentFont_readWidthsWithComAowagieTextPdfPdfArray_(self, ws);
}


#line 207
- (NSString *)decodeStringWithComAowagieTextPdfPdfString:(ComAowagieTextPdfPdfString *)ps {
  return ComAowagieTextPdfDocumentFont_decodeStringWithComAowagieTextPdfPdfString_(self, ps);
}


#line 215
- (void)fillMetricsWithByteArray:(IOSByteArray *)touni
withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)widths
                         withInt:(jint)dw {
  ComAowagieTextPdfDocumentFont_fillMetricsWithByteArray_withComAowagieTextPdfIntHashtable_withInt_(self, touni, widths, dw);
}


#line 285
- (void)doType1TT {
  ComAowagieTextPdfDocumentFont_doType1TT(self);
}


#line 362
- (void)fillFontDescWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)fontDesc {
  ComAowagieTextPdfDocumentFont_fillFontDescWithComAowagieTextPdfPdfDictionary_(self, fontDesc);
}


#line 401
- (void)fillEncodingWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)encoding {
  ComAowagieTextPdfDocumentFont_fillEncodingWithComAowagieTextPdfPdfName_(self, encoding);
}


#line 433
- (IOSObjectArray *)getFamilyFontName {
  
#line 435
  return [self getFullFontName];
}


#line 447
- (jfloat)getFontDescriptorWithInt:(jint)key
                         withFloat:(jfloat)fontSize {
  if (self->cjkMirror_ != nil) {
    return [self->cjkMirror_ getFontDescriptorWithInt:key withFloat:fontSize];
  }
  switch (key) {
    case ComAowagieTextPdfBaseFont_AWT_ASCENT:
    case ComAowagieTextPdfBaseFont_ASCENT:
    return self->Ascender_ * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_CAPHEIGHT:
    return self->CapHeight_ * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_AWT_DESCENT:
    case ComAowagieTextPdfBaseFont_DESCENT:
    return self->Descender_ * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_ITALICANGLE:
    return self->ItalicAngle_;
    case ComAowagieTextPdfBaseFont_BBOXLLX:
    return self->llx_ * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_BBOXLLY:
    return self->lly_ * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_BBOXURX:
    return self->urx_ * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_BBOXURY:
    return self->ury_ * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_AWT_LEADING:
    return 0;
    case ComAowagieTextPdfBaseFont_AWT_MAXADVANCE:
    return (self->urx_ - self->llx_) * fontSize / 1000;
  }
  return 0;
}


#line 488
- (IOSObjectArray *)getFullFontName {
  
#line 490
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"", @"", @"", self->fontName_ } count:4 type:NSString_class_()] } count:1 type:IOSClass_arrayType(NSString_class_(), 1)];
}


#line 502
- (IOSObjectArray *)getAllNameEntries {
  
#line 504
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"4", @"", @"", @"", self->fontName_ } count:5 type:NSString_class_()] } count:1 type:IOSClass_arrayType(NSString_class_(), 1)];
}


#line 513
- (jint)getKerningWithInt:(jint)char1
                  withInt:(jint)char2 {
  return 0;
}


#line 522
- (NSString *)getPostscriptFontName {
  
#line 524
  return self->fontName_;
}


#line 534
- (jint)getRawWidthWithInt:(jint)c
              withNSString:(NSString *)name {
  return 0;
}


#line 543
- (jboolean)hasKernPairs {
  
#line 545
  return false;
}


#line 556
- (void)writeFontWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
      withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)ref
                              withNSObjectArray:(IOSObjectArray *)params {
}


#line 565
- (ComAowagieTextPdfPdfStream *)getFullFontStream {
  
#line 567
  return nil;
}


#line 575
- (jint)getWidthWithInt:(jint)char1 {
  
#line 577
  if (self->cjkMirror_ != nil) {
    return [self->cjkMirror_ getWidthWithInt:char1];
  }
  else
#line 579
  if (self->isType0_) {
    IOSIntArray *ws = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->metrics_)) getWithId:new_JavaLangInteger_initWithInt_(char1)], [IOSIntArray class]);
    if (ws != nil) {
      return IOSIntArray_Get(ws, 1);
    }
    else {
      
#line 584
      return 0;
    }
  }
  else {
    
#line 587
    return [super getWidthWithInt:char1];
  }
}


#line 591
- (jint)getWidthWithNSString:(NSString *)text {
  
#line 593
  if (self->cjkMirror_ != nil) {
    return [self->cjkMirror_ getWidthWithNSString:text];
  }
  else
#line 595
  if (self->isType0_) {
    IOSCharArray *chars = [((NSString *) nil_chk(text)) java_toCharArray];
    jint len = ((IOSCharArray *) nil_chk(chars))->size_;
    jint total = 0;
    for (jint k = 0; k < len; ++k) {
      IOSIntArray *ws = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->metrics_)) getWithId:new_JavaLangInteger_initWithInt_(IOSCharArray_Get(chars, k))], [IOSIntArray class]);
      if (ws != nil) {
        total += IOSIntArray_Get(ws, 1);
      }
    }
    return total;
  }
  else {
    
#line 607
    return [super getWidthWithNSString:text];
  }
}


#line 611
- (IOSByteArray *)convertToBytesWithNSString:(NSString *)text {
  
#line 613
  if (self->cjkMirror_ != nil) {
    return ComAowagieTextPdfPdfEncodings_convertToBytesWithNSString_withNSString_(text, ComAowagieTextPdfCJKFont_CJK_ENCODING);
  }
  else
#line 615
  if (self->isType0_) {
    IOSCharArray *chars = [((NSString *) nil_chk(text)) java_toCharArray];
    jint len = ((IOSCharArray *) nil_chk(chars))->size_;
    IOSByteArray *b = [IOSByteArray newArrayWithLength:len * 2];
    jint bptr = 0;
    for (jint k = 0; k < len; ++k) {
      IOSIntArray *ws = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->metrics_)) getWithId:new_JavaLangInteger_initWithInt_(IOSCharArray_Get(chars, k))], [IOSIntArray class]);
      if (ws != nil) {
        jint g = IOSIntArray_Get(ws, 0);
        *IOSByteArray_GetRef(b, bptr++) = (jbyte) (JreIntDiv(g, 256));
        *IOSByteArray_GetRef(b, bptr++) = (jbyte) g;
      }
    }
    if (bptr == b->size_) {
      return b;
    }
    else {
      
#line 631
      IOSByteArray *nb = [IOSByteArray newArrayWithLength:bptr];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, nb, 0, bptr);
      return nb;
    }
  }
  else {
    IOSCharArray *cc = [((NSString *) nil_chk(text)) java_toCharArray];
    IOSByteArray *b = [IOSByteArray newArrayWithLength:((IOSCharArray *) nil_chk(cc))->size_];
    jint ptr = 0;
    {
      IOSCharArray *a__ =
#line 640
      cc;
      jchar const *b__ = a__->buffer_;
      jchar const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jchar element = *b__++;
        
#line 641
        if ([((ComAowagieTextPdfIntHashtable *) nil_chk(self->uni2byte_)) containsKeyWithInt:element]) {
          *IOSByteArray_GetRef(b, ptr++) = (jbyte) [self->uni2byte_ getWithInt:element];
        }
      }
    }
    
#line 645
    if (ptr == b->size_) {
      return b;
    }
    else {
      
#line 648
      IOSByteArray *b2 = [IOSByteArray newArrayWithLength:ptr];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, b2, 0, ptr);
      return b2;
    }
  }
}


#line 655
- (IOSByteArray *)convertToBytesWithInt:(jint)char1 {
  
#line 657
  if (self->cjkMirror_ != nil) {
    return ComAowagieTextPdfPdfEncodings_convertToBytesWithChar_withNSString_((jchar) char1, ComAowagieTextPdfCJKFont_CJK_ENCODING);
  }
  else
#line 659
  if (self->isType0_) {
    IOSIntArray *ws = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->metrics_)) getWithId:new_JavaLangInteger_initWithInt_(char1)], [IOSIntArray class]);
    if (ws != nil) {
      jint g = IOSIntArray_Get(ws, 0);
      return [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (JreIntDiv(g, 256)), (jbyte) g } count:2];
    }
    else {
      
#line 665
      return [IOSByteArray newArrayWithLength:0];
    }
  }
  else {
    if ([((ComAowagieTextPdfIntHashtable *) nil_chk(self->uni2byte_)) containsKeyWithInt:char1]) {
      return [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) [self->uni2byte_ getWithInt:char1] } count:1];
    }
    else {
      
#line 672
      return [IOSByteArray newArrayWithLength:0];
    }
  }
}


#line 677
- (ComAowagieTextPdfPdfIndirectReference *)getIndirectReference {
  return self->refFont_;
}

- (jboolean)charExistsWithInt:(jint)c {
  
#line 683
  if (self->cjkMirror_ != nil) {
    return [self->cjkMirror_ charExistsWithInt:c];
  }
  else
#line 685
  if (self->isType0_) {
    return [((JavaUtilHashMap *) nil_chk(self->metrics_)) containsKeyWithId:new_JavaLangInteger_initWithInt_(c)];
  }
  else {
    
#line 688
    return [super charExistsWithInt:c];
  }
}


#line 697
- (void)setPostscriptFontNameWithNSString:(NSString *)name {
}


#line 701
- (jboolean)setKerningWithInt:(jint)char1
                      withInt:(jint)char2
                      withInt:(jint)kern {
  
#line 703
  return false;
}


#line 706
- (IOSIntArray *)getCharBBoxWithInt:(jint)c {
  
#line 708
  return nil;
}


#line 711
- (IOSIntArray *)getRawCharBBoxWithInt:(jint)c
                          withNSString:(NSString *)name {
  return nil;
}


#line 721
- (ComAowagieTextPdfIntHashtable *)getUni2Byte {
  return self->uni2byte_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfIntHashtable;", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 18, 19, 20, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 21, 23, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 24, 23, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 24, 22, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfIndirectReference;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 29, 22, -1, -1, -1, -1 },
    { NULL, "[I", 0x4, 30, 17, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfIntHashtable;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComAowagieTextPdfPRIndirectReference:);
  methods[1].selector = @selector(processType0WithComAowagieTextPdfPdfDictionary:);
  methods[2].selector = @selector(readWidthsWithComAowagieTextPdfPdfArray:);
  methods[3].selector = @selector(decodeStringWithComAowagieTextPdfPdfString:);
  methods[4].selector = @selector(fillMetricsWithByteArray:withComAowagieTextPdfIntHashtable:withInt:);
  methods[5].selector = @selector(doType1TT);
  methods[6].selector = @selector(fillFontDescWithComAowagieTextPdfPdfDictionary:);
  methods[7].selector = @selector(fillEncodingWithComAowagieTextPdfPdfName:);
  methods[8].selector = @selector(getFamilyFontName);
  methods[9].selector = @selector(getFontDescriptorWithInt:withFloat:);
  methods[10].selector = @selector(getFullFontName);
  methods[11].selector = @selector(getAllNameEntries);
  methods[12].selector = @selector(getKerningWithInt:withInt:);
  methods[13].selector = @selector(getPostscriptFontName);
  methods[14].selector = @selector(getRawWidthWithInt:withNSString:);
  methods[15].selector = @selector(hasKernPairs);
  methods[16].selector = @selector(writeFontWithComAowagieTextPdfPdfWriter:withComAowagieTextPdfPdfIndirectReference:withNSObjectArray:);
  methods[17].selector = @selector(getFullFontStream);
  methods[18].selector = @selector(getWidthWithInt:);
  methods[19].selector = @selector(getWidthWithNSString:);
  methods[20].selector = @selector(convertToBytesWithNSString:);
  methods[21].selector = @selector(convertToBytesWithInt:);
  methods[22].selector = @selector(getIndirectReference);
  methods[23].selector = @selector(charExistsWithInt:);
  methods[24].selector = @selector(setPostscriptFontNameWithNSString:);
  methods[25].selector = @selector(setKerningWithInt:withInt:withInt:);
  methods[26].selector = @selector(getCharBBoxWithInt:);
  methods[27].selector = @selector(getRawCharBBoxWithInt:withNSString:);
  methods[28].selector = @selector(getUni2Byte);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "metrics_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fontName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "refFont_", "LComAowagieTextPdfPRIndirectReference;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "font_", "LComAowagieTextPdfPdfDictionary;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "uni2byte_", "LComAowagieTextPdfIntHashtable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "diffmap_", "LComAowagieTextPdfIntHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "Ascender_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "CapHeight_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "Descender_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ItalicAngle_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "llx_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lly_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "urx_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ury_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isType0_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cjkMirror_", "LComAowagieTextPdfBaseFont;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cjkNames", "[LNSString;", .constantValue.asLong = 0, 0xa, -1, 31, -1, -1 },
    { "cjkEncs", "[LNSString;", .constantValue.asLong = 0, 0xa, -1, 32, -1, -1 },
    { "cjkNames2", "[LNSString;", .constantValue.asLong = 0, 0xa, -1, 33, -1, -1 },
    { "cjkEncs2", "[LNSString;", .constantValue.asLong = 0, 0xa, -1, 34, -1, -1 },
    { "stdEnc", "[I", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfPRIndirectReference;", "processType0", "LComAowagieTextPdfPdfDictionary;", "readWidths", "LComAowagieTextPdfPdfArray;", "decodeString", "LComAowagieTextPdfPdfString;", "fillMetrics", "[BLComAowagieTextPdfIntHashtable;I", "fillFontDesc", "fillEncoding", "LComAowagieTextPdfPdfName;", "getFontDescriptor", "IF", "getKerning", "II", "getRawWidth", "ILNSString;", "writeFont", "LComAowagieTextPdfPdfWriter;LComAowagieTextPdfPdfIndirectReference;[LNSObject;", "LComAowagieTextDocumentException;LJavaIoIOException;", "getWidth", "I", "LNSString;", "convertToBytes", "charExists", "setPostscriptFontName", "setKerning", "III", "getCharBBox", "getRawCharBBox", &ComAowagieTextPdfDocumentFont_cjkNames, &ComAowagieTextPdfDocumentFont_cjkEncs, &ComAowagieTextPdfDocumentFont_cjkNames2, &ComAowagieTextPdfDocumentFont_cjkEncs2, &ComAowagieTextPdfDocumentFont_stdEnc };
  static const J2ObjcClassInfo _ComAowagieTextPdfDocumentFont = { "DocumentFont", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x1, 29, 21, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfDocumentFont;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfDocumentFont class]) {
    ComAowagieTextPdfDocumentFont_cjkNames = [IOSObjectArray newArrayWithObjects:(id[]){
#line 80
      @"HeiseiMin-W3", @"HeiseiKakuGo-W5", @"STSong-Light", @"MHei-Medium",
#line 81
      @"MSung-Light", @"HYGoThic-Medium", @"HYSMyeongJo-Medium", @"MSungStd-Light", @"STSongStd-Light",
#line 82
      @"HYSMyeongJoStd-Medium", @"KozMinPro-Regular" } count:11 type:NSString_class_()];
      ComAowagieTextPdfDocumentFont_cjkEncs = [IOSObjectArray newArrayWithObjects:(id[]){
#line 84
        @"UniJIS-UCS2-H", @"UniJIS-UCS2-H", @"UniGB-UCS2-H", @"UniCNS-UCS2-H",
#line 85
        @"UniCNS-UCS2-H", @"UniKS-UCS2-H", @"UniKS-UCS2-H", @"UniCNS-UCS2-H", @"UniGB-UCS2-H",
#line 86
        @"UniKS-UCS2-H", @"UniJIS-UCS2-H" } count:11 type:NSString_class_()];
        ComAowagieTextPdfDocumentFont_cjkNames2 = [IOSObjectArray newArrayWithObjects:(id[]){
#line 88
          @"MSungStd-Light", @"STSongStd-Light", @"HYSMyeongJoStd-Medium", @"KozMinPro-Regular" } count:4 type:NSString_class_()];
          ComAowagieTextPdfDocumentFont_cjkEncs2 = [IOSObjectArray newArrayWithObjects:(id[]){
#line 90
            @"UniCNS-UCS2-H", @"UniGB-UCS2-H", @"UniKS-UCS2-H", @"UniJIS-UCS2-H",
#line 91
            @"UniCNS-UTF16-H", @"UniGB-UTF16-H", @"UniKS-UTF16-H", @"UniJIS-UTF16-H" } count:8 type:NSString_class_()];
            ComAowagieTextPdfDocumentFont_stdEnc = [IOSIntArray newArrayWithInts:(jint[]){
#line 94
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 95
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 96
              32, 33, 34, 35, 36, 37, 38, 8217, 40, 41, 42, 43, 44, 45, 46, 47,
#line 97
              48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
#line 98
              64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
#line 99
              80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
#line 100
              8216, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
#line 101
              112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 0,
#line 102
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 103
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 104
              0, 161, 162, 163, 8260, 165, 402, 167, 164, 39, 8220, 171, 8249, 8250, 64257, 64258,
#line 105
              0, 8211, 8224, 8225, 183, 0, 182, 8226, 8218, 8222, 8221, 187, 8230, 8240, 0, 191,
#line 106
              0, 96, 180, 710, 732, 175, 728, 729, 168, 0, 730, 184, 0, 733, 731, 711,
#line 107
              8212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 108
              0, 198, 0, 170, 0, 0, 0, 0, 321, 216, 338, 186, 0, 0, 0, 0,
#line 109
              0, 230, 0, 0, 0, 305, 0, 0, 322, 248, 339, 223, 0, 0, 0, 0 } count:256];
              J2OBJC_SET_INITIALIZED(ComAowagieTextPdfDocumentFont)
            }
          }

@end


#line 114
void ComAowagieTextPdfDocumentFont_initWithComAowagieTextPdfPRIndirectReference_(ComAowagieTextPdfDocumentFont *self, ComAowagieTextPdfPRIndirectReference *refFont) {
  ComAowagieTextPdfBaseFont_init(self);
  self->metrics_ = new_JavaUtilLinkedHashMap_init();
  self->uni2byte_ = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
  self->Ascender_ =
#line 68
  800;
  self->CapHeight_ = 700;
  self->Descender_ = -200;
  self->ItalicAngle_ = 0;
  self->llx_ = -50;
  self->lly_ = -200;
  self->urx_ = 100;
  self->ury_ = 900;
  self->isType0_ = false;
  
#line 115
  self->encoding_ = @"";
  self->fontSpecific_ = false;
  self->refFont_ = refFont;
  self->fontType_ = ComAowagieTextPdfBaseFont_FONT_TYPE_DOCUMENT;
  self->font_ = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_(refFont), [ComAowagieTextPdfPdfDictionary class]);
  self->fontName_ = ComAowagieTextPdfPdfName_decodeNameWithNSString_([((ComAowagieTextPdfPdfName *) nil_chk([((ComAowagieTextPdfPdfDictionary *) nil_chk(self->font_)) getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BASEFONT)])) description]);
  ComAowagieTextPdfPdfName *subType = [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->font_)) getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE)];
  if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, TYPE1))) isEqual:subType] || [((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, TRUETYPE))) isEqual:subType]) {
    ComAowagieTextPdfDocumentFont_doType1TT(self);
  }
  else {
    
#line 125
    for (jint k = 0; k < ((IOSObjectArray *) nil_chk(ComAowagieTextPdfDocumentFont_cjkNames))->size_; ++k) {
      if ([((NSString *) nil_chk(self->fontName_)) java_hasPrefix:IOSObjectArray_Get(ComAowagieTextPdfDocumentFont_cjkNames, k)]) {
        self->fontName_ = IOSObjectArray_Get(nil_chk(ComAowagieTextPdfDocumentFont_cjkNames), k);
        @try {
          self->cjkMirror_ = ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_(self->fontName_, IOSObjectArray_Get(nil_chk(ComAowagieTextPdfDocumentFont_cjkEncs), k), false);
        }
        @catch (JavaLangException *e) {
          @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
        }
        return;
      }
    }
    NSString *enc = ComAowagieTextPdfPdfName_decodeNameWithNSString_([((ComAowagieTextPdfPdfName *) nil_chk([((ComAowagieTextPdfPdfDictionary *) nil_chk(self->font_)) getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENCODING)])) description]);
    for (jint k = 0; k < ((IOSObjectArray *) nil_chk(ComAowagieTextPdfDocumentFont_cjkEncs2))->size_; ++k) {
      if ([((NSString *) nil_chk(enc)) java_hasPrefix:IOSObjectArray_Get(ComAowagieTextPdfDocumentFont_cjkEncs2, k)]) {
        @try {
          if (k > 3) {
            k -= 4;
          }
          self->cjkMirror_ = ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_(IOSObjectArray_Get(nil_chk(ComAowagieTextPdfDocumentFont_cjkNames2), k), IOSObjectArray_Get(nil_chk(ComAowagieTextPdfDocumentFont_cjkEncs2), k), false);
        }
        @catch (JavaLangException *e) {
          @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
        }
        return;
      }
    }
    if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, TYPE0))) isEqual:subType] && [((NSString *) nil_chk(enc)) isEqual:@"Identity-H"]) {
      ComAowagieTextPdfDocumentFont_processType0WithComAowagieTextPdfPdfDictionary_(self, self->font_);
      self->isType0_ = true;
    }
  }
}


#line 114
ComAowagieTextPdfDocumentFont *new_ComAowagieTextPdfDocumentFont_initWithComAowagieTextPdfPRIndirectReference_(ComAowagieTextPdfPRIndirectReference *refFont) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfDocumentFont, initWithComAowagieTextPdfPRIndirectReference_, refFont)
}


#line 114
ComAowagieTextPdfDocumentFont *create_ComAowagieTextPdfDocumentFont_initWithComAowagieTextPdfPRIndirectReference_(ComAowagieTextPdfPRIndirectReference *refFont) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfDocumentFont, initWithComAowagieTextPdfPRIndirectReference_, refFont)
}


#line 159
void ComAowagieTextPdfDocumentFont_processType0WithComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfDocumentFont *self, ComAowagieTextPdfPdfDictionary *font) {
  @try {
    ComAowagieTextPdfPdfObject *toUniObject = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(font)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TOUNICODE)]);
    ComAowagieTextPdfPdfArray *df = (ComAowagieTextPdfPdfArray *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([font getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DESCENDANTFONTS)]), [ComAowagieTextPdfPdfArray class]);
    ComAowagieTextPdfPdfDictionary *cidft = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfArray *) nil_chk(df)) getPdfObjectWithInt:0]), [ComAowagieTextPdfPdfDictionary class]);
    ComAowagieTextPdfPdfNumber *dwo = (ComAowagieTextPdfPdfNumber *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(cidft)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DW)]), [ComAowagieTextPdfPdfNumber class]);
    jint dw = 1000;
    if (dwo != nil) {
      dw = [dwo intValue];
    }
    ComAowagieTextPdfIntHashtable *widths = ComAowagieTextPdfDocumentFont_readWidthsWithComAowagieTextPdfPdfArray_(self, (ComAowagieTextPdfPdfArray *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([cidft getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, W)]), [ComAowagieTextPdfPdfArray class]));
    ComAowagieTextPdfPdfDictionary *fontDesc = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([cidft getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTDESCRIPTOR)]), [ComAowagieTextPdfPdfDictionary class]);
    ComAowagieTextPdfDocumentFont_fillFontDescWithComAowagieTextPdfPdfDictionary_(self, fontDesc);
    if (toUniObject != nil) {
      ComAowagieTextPdfDocumentFont_fillMetricsWithByteArray_withComAowagieTextPdfIntHashtable_withInt_(self, ComAowagieTextPdfPdfReader_getStreamBytesWithComAowagieTextPdfPRStream_((ComAowagieTextPdfPRStream *) cast_chk(toUniObject, [ComAowagieTextPdfPRStream class])), widths, dw);
    }
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}

ComAowagieTextPdfIntHashtable *ComAowagieTextPdfDocumentFont_readWidthsWithComAowagieTextPdfPdfArray_(ComAowagieTextPdfDocumentFont *self, ComAowagieTextPdfPdfArray *ws) {
  ComAowagieTextPdfIntHashtable *hh = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
  if (ws == nil) {
    return hh;
  }
  for (jint k = 0; k < [ws size]; ++k) {
    jint c1 = [((ComAowagieTextPdfPdfNumber *) nil_chk(((ComAowagieTextPdfPdfNumber *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([ws getPdfObjectWithInt:k]), [ComAowagieTextPdfPdfNumber class])))) intValue];
    ComAowagieTextPdfPdfObject *obj = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([ws getPdfObjectWithInt:++k]);
    if ([((ComAowagieTextPdfPdfObject *) nil_chk(obj)) isArray]) {
      ComAowagieTextPdfPdfArray *a2 = (ComAowagieTextPdfPdfArray *) cast_chk(obj, [ComAowagieTextPdfPdfArray class]);
      for (jint j = 0; j < [a2 size]; ++j) {
        jint c2 = [((ComAowagieTextPdfPdfNumber *) nil_chk(((ComAowagieTextPdfPdfNumber *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([a2 getPdfObjectWithInt:j]), [ComAowagieTextPdfPdfNumber class])))) intValue];
        [hh putWithInt:c1++ withInt:c2];
      }
    }
    else {
      jint c2 = [((ComAowagieTextPdfPdfNumber *) cast_chk(obj, [ComAowagieTextPdfPdfNumber class])) intValue];
      jint w = [((ComAowagieTextPdfPdfNumber *) nil_chk(((ComAowagieTextPdfPdfNumber *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([ws getPdfObjectWithInt:++k]), [ComAowagieTextPdfPdfNumber class])))) intValue];
      for (; c1 <= c2; ++c1) {
        [hh putWithInt:c1 withInt:w];
      }
    }
  }
  return hh;
}

NSString *ComAowagieTextPdfDocumentFont_decodeStringWithComAowagieTextPdfPdfString_(ComAowagieTextPdfDocumentFont *self, ComAowagieTextPdfPdfString *ps) {
  if ([((ComAowagieTextPdfPdfString *) nil_chk(ps)) isHexWriting]) {
    return ComAowagieTextPdfPdfEncodings_convertToStringWithByteArray_withNSString_([ps getBytes], @"UnicodeBigUnmarked");
  }
  else {
    
#line 211
    return [ps toUnicodeString];
  }
}


#line 215
void ComAowagieTextPdfDocumentFont_fillMetricsWithByteArray_withComAowagieTextPdfIntHashtable_withInt_(ComAowagieTextPdfDocumentFont *self, IOSByteArray *touni, ComAowagieTextPdfIntHashtable *widths, jint dw) {
  @try {
    ComAowagieTextPdfPdfContentParser *ps = new_ComAowagieTextPdfPdfContentParser_initWithComAowagieTextPdfPRTokeniser_(new_ComAowagieTextPdfPRTokeniser_initWithByteArray_(touni));
    ComAowagieTextPdfPdfObject *ob = nil;
    ComAowagieTextPdfPdfObject *last = nil;
    while ((ob = [ps readPRObject]) != nil) {
      if ([((ComAowagieTextPdfPdfObject *) nil_chk(ob)) type] == ComAowagieTextPdfPdfContentParser_COMMAND_TYPE) {
        if ([((NSString *) nil_chk([ob description])) isEqual:@"beginbfchar"]) {
          jint n = [((ComAowagieTextPdfPdfNumber *) nil_chk(((ComAowagieTextPdfPdfNumber *) cast_chk(last, [ComAowagieTextPdfPdfNumber class])))) intValue];
          for (jint k = 0; k < n; ++k) {
            NSString *cid = ComAowagieTextPdfDocumentFont_decodeStringWithComAowagieTextPdfPdfString_(self, (ComAowagieTextPdfPdfString *) cast_chk([ps readPRObject], [ComAowagieTextPdfPdfString class]));
            NSString *uni = ComAowagieTextPdfDocumentFont_decodeStringWithComAowagieTextPdfPdfString_(self, (ComAowagieTextPdfPdfString *) cast_chk([ps readPRObject], [ComAowagieTextPdfPdfString class]));
            if ([((NSString *) nil_chk(uni)) java_length] == 1) {
              jint cidc = [((NSString *) nil_chk(cid)) charAtWithInt:0];
              jint unic = [uni charAtWithInt:[uni java_length] - 1];
              jint w = dw;
              if ([((ComAowagieTextPdfIntHashtable *) nil_chk(widths)) containsKeyWithInt:cidc]) {
                w = [widths getWithInt:cidc];
              }
              (void) [((JavaUtilHashMap *) nil_chk(self->metrics_)) putWithId:new_JavaLangInteger_initWithInt_(unic) withId:[IOSIntArray newArrayWithInts:(jint[]){ cidc, w } count:2]];
            }
          }
        }
        else if ([((NSString *) nil_chk([ob description])) isEqual:@"beginbfrange"]) {
          jint n = [((ComAowagieTextPdfPdfNumber *) nil_chk(((ComAowagieTextPdfPdfNumber *) cast_chk(last, [ComAowagieTextPdfPdfNumber class])))) intValue];
          for (jint k = 0; k < n; ++k) {
            NSString *cid1 = ComAowagieTextPdfDocumentFont_decodeStringWithComAowagieTextPdfPdfString_(self, (ComAowagieTextPdfPdfString *) cast_chk([ps readPRObject], [ComAowagieTextPdfPdfString class]));
            NSString *cid2 = ComAowagieTextPdfDocumentFont_decodeStringWithComAowagieTextPdfPdfString_(self, (ComAowagieTextPdfPdfString *) cast_chk([ps readPRObject], [ComAowagieTextPdfPdfString class]));
            jint cid1c = [((NSString *) nil_chk(cid1)) charAtWithInt:0];
            jint cid2c = [((NSString *) nil_chk(cid2)) charAtWithInt:0];
            ComAowagieTextPdfPdfObject *ob2 = [ps readPRObject];
            if ([((ComAowagieTextPdfPdfObject *) nil_chk(ob2)) isString]) {
              NSString *uni = ComAowagieTextPdfDocumentFont_decodeStringWithComAowagieTextPdfPdfString_(self, (ComAowagieTextPdfPdfString *) cast_chk(ob2, [ComAowagieTextPdfPdfString class]));
              if ([((NSString *) nil_chk(uni)) java_length] == 1) {
                jint unic = [uni charAtWithInt:[uni java_length] - 1];
                for (; cid1c <= cid2c; cid1c++, unic++) {
                  jint w = dw;
                  if ([((ComAowagieTextPdfIntHashtable *) nil_chk(widths)) containsKeyWithInt:cid1c]) {
                    w = [widths getWithInt:cid1c];
                  }
                  (void) [((JavaUtilHashMap *) nil_chk(self->metrics_)) putWithId:new_JavaLangInteger_initWithInt_(unic) withId:[IOSIntArray newArrayWithInts:(jint[]){ cid1c, w } count:2]];
                }
              }
            }
            else {
              ComAowagieTextPdfPdfArray *a = (ComAowagieTextPdfPdfArray *) cast_chk(ob2, [ComAowagieTextPdfPdfArray class]);
              for (jint j = 0; j < [a size]; ++j, ++cid1c) {
                NSString *uni = ComAowagieTextPdfDocumentFont_decodeStringWithComAowagieTextPdfPdfString_(self, [a getAsStringWithInt:j]);
                if ([((NSString *) nil_chk(uni)) java_length] == 1) {
                  jint unic = [uni charAtWithInt:[uni java_length] - 1];
                  jint w = dw;
                  if ([((ComAowagieTextPdfIntHashtable *) nil_chk(widths)) containsKeyWithInt:cid1c]) {
                    w = [widths getWithInt:cid1c];
                  }
                  (void) [((JavaUtilHashMap *) nil_chk(self->metrics_)) putWithId:new_JavaLangInteger_initWithInt_(unic) withId:[IOSIntArray newArrayWithInts:(jint[]){ cid1c, w } count:2]];
                }
              }
            }
          }
        }
      }
      else {
        
#line 276
        last = ob;
      }
    }
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 285
void ComAowagieTextPdfDocumentFont_doType1TT(ComAowagieTextPdfDocumentFont *self) {
  ComAowagieTextPdfPdfObject *enc = ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(self->font_)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENCODING)]);
  if (enc == nil) {
    ComAowagieTextPdfDocumentFont_fillEncodingWithComAowagieTextPdfPdfName_(self, nil);
  }
  else {
    
#line 290
    if ([enc isName]) {
      ComAowagieTextPdfDocumentFont_fillEncodingWithComAowagieTextPdfPdfName_(self, (ComAowagieTextPdfPdfName *) cast_chk(enc, [ComAowagieTextPdfPdfName class]));
    }
    else {
      
#line 293
      ComAowagieTextPdfPdfDictionary *encDic = (ComAowagieTextPdfPdfDictionary *) cast_chk(enc, [ComAowagieTextPdfPdfDictionary class]);
      enc = ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_([encDic getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BASEENCODING)]);
      if (enc == nil) {
        ComAowagieTextPdfDocumentFont_fillEncodingWithComAowagieTextPdfPdfName_(self, nil);
      }
      else {
        
#line 298
        ComAowagieTextPdfDocumentFont_fillEncodingWithComAowagieTextPdfPdfName_(self, (ComAowagieTextPdfPdfName *) cast_chk(enc, [ComAowagieTextPdfPdfName class]));
      }
      ComAowagieTextPdfPdfArray *diffs = [encDic getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DIFFERENCES)];
      if (diffs != nil) {
        self->diffmap_ = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
        jint currentNumber = 0;
        for (jint k = 0; k < [diffs size]; ++k) {
          ComAowagieTextPdfPdfObject *obj = [diffs getPdfObjectWithInt:k];
          if ([((ComAowagieTextPdfPdfObject *) nil_chk(obj)) isNumber]) {
            currentNumber = [((ComAowagieTextPdfPdfNumber *) cast_chk(obj, [ComAowagieTextPdfPdfNumber class])) intValue];
          }
          else {
            
#line 309
            IOSIntArray *c = ComAowagieTextPdfGlyphList_nameToUnicodeWithNSString_(ComAowagieTextPdfPdfName_decodeNameWithNSString_([((ComAowagieTextPdfPdfName *) cast_chk(obj, [ComAowagieTextPdfPdfName class])) description]));
            if (c != nil && c->size_ > 0) {
              [((ComAowagieTextPdfIntHashtable *) nil_chk(self->uni2byte_)) putWithInt:IOSIntArray_Get(c, 0) withInt:currentNumber];
              [((ComAowagieTextPdfIntHashtable *) nil_chk(self->diffmap_)) putWithInt:IOSIntArray_Get(c, 0) withInt:currentNumber];
            }
            ++currentNumber;
          }
        }
      }
    }
  }
  ComAowagieTextPdfPdfArray *newWidths = [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->font_)) getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, WIDTHS)];
  ComAowagieTextPdfPdfNumber *first = [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->font_)) getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FIRSTCHAR)];
  ComAowagieTextPdfPdfNumber *last = [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->font_)) getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LASTCHAR)];
  if ([((JavaUtilHashMap *) nil_chk(JreLoadStatic(ComAowagieTextPdfBaseFont, BuiltinFonts14))) containsKeyWithId:self->fontName_]) {
    ComAowagieTextPdfBaseFont *bf;
    @try {
      bf = ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_(self->fontName_, ComAowagieTextPdfBaseFont_WINANSI, false);
    }
    @catch (JavaLangException *e) {
      @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
    }
    IOSIntArray *e = [((ComAowagieTextPdfIntHashtable *) nil_chk(self->uni2byte_)) toOrderedKeys];
    {
      IOSIntArray *a__ =
#line 332
      e;
      jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
      jint const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jint element = *b__++;
        
#line 333
        jint n = [self->uni2byte_ getWithInt:element];
        *IOSIntArray_GetRef(nil_chk(self->widths_), n) = [((ComAowagieTextPdfBaseFont *) nil_chk(bf)) getRawWidthWithInt:n withNSString:ComAowagieTextPdfGlyphList_unicodeToNameWithInt_(element)];
      }
    }
    
#line 336
    if (self->diffmap_ != nil) {
      e = [self->diffmap_ toOrderedKeys];
      {
        IOSIntArray *a__ =
#line 338
        e;
        jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
        jint const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          jint element = *b__++;
          
#line 339
          jint n = [((ComAowagieTextPdfIntHashtable *) nil_chk(self->diffmap_)) getWithInt:element];
          *IOSIntArray_GetRef(nil_chk(self->widths_), n) = [((ComAowagieTextPdfBaseFont *) nil_chk(bf)) getRawWidthWithInt:n withNSString:ComAowagieTextPdfGlyphList_unicodeToNameWithInt_(element)];
        }
      }
      
#line 342
      self->diffmap_ = nil;
    }
    self->Ascender_ = [((ComAowagieTextPdfBaseFont *) nil_chk(bf)) getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_ASCENT withFloat:1000];
    self->CapHeight_ = [bf getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_CAPHEIGHT withFloat:1000];
    self->Descender_ = [bf getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_DESCENT withFloat:1000];
    self->ItalicAngle_ = [bf getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_ITALICANGLE withFloat:1000];
    self->llx_ = [bf getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_BBOXLLX withFloat:1000];
    self->lly_ = [bf getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_BBOXLLY withFloat:1000];
    self->urx_ = [bf getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_BBOXURX withFloat:1000];
    self->ury_ = [bf getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_BBOXURY withFloat:1000];
  }
  if (first != nil && last != nil && newWidths != nil) {
    jint f = [first intValue];
    for (jint k = 0; k < [newWidths size]; ++k) {
      *IOSIntArray_GetRef(nil_chk(self->widths_), f + k) = [((ComAowagieTextPdfPdfNumber *) nil_chk([newWidths getAsNumberWithInt:k])) intValue];
    }
  }
  ComAowagieTextPdfDocumentFont_fillFontDescWithComAowagieTextPdfPdfDictionary_(self, [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->font_)) getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTDESCRIPTOR)]);
}


#line 362
void ComAowagieTextPdfDocumentFont_fillFontDescWithComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfDocumentFont *self, ComAowagieTextPdfPdfDictionary *fontDesc) {
  if (fontDesc == nil) {
    return;
  }
  ComAowagieTextPdfPdfNumber *v = [fontDesc getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ASCENT)];
  if (v != nil) {
    self->Ascender_ = [v floatValue];
  }
  v = [fontDesc getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CAPHEIGHT)];
  if (v != nil) {
    self->CapHeight_ = [v floatValue];
  }
  v = [fontDesc getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DESCENT)];
  if (v != nil) {
    self->Descender_ = [v floatValue];
  }
  v = [fontDesc getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ITALICANGLE)];
  if (v != nil) {
    self->ItalicAngle_ = [v floatValue];
  }
  ComAowagieTextPdfPdfArray *bbox = [fontDesc getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTBBOX)];
  if (bbox != nil) {
    self->llx_ = [((ComAowagieTextPdfPdfNumber *) nil_chk([bbox getAsNumberWithInt:0])) floatValue];
    self->lly_ = [((ComAowagieTextPdfPdfNumber *) nil_chk([bbox getAsNumberWithInt:1])) floatValue];
    self->urx_ = [((ComAowagieTextPdfPdfNumber *) nil_chk([bbox getAsNumberWithInt:2])) floatValue];
    self->ury_ = [((ComAowagieTextPdfPdfNumber *) nil_chk([bbox getAsNumberWithInt:3])) floatValue];
    if (self->llx_ > self->urx_) {
      jfloat t = self->llx_;
      self->llx_ = self->urx_;
      self->urx_ = t;
    }
    if (self->lly_ > self->ury_) {
      jfloat t = self->lly_;
      self->lly_ = self->ury_;
      self->ury_ = t;
    }
  }
}

void ComAowagieTextPdfDocumentFont_fillEncodingWithComAowagieTextPdfPdfName_(ComAowagieTextPdfDocumentFont *self, ComAowagieTextPdfPdfName *encoding) {
  if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, MAC_ROMAN_ENCODING))) isEqual:encoding] || [((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, WIN_ANSI_ENCODING))) isEqual:encoding]) {
    IOSByteArray *b = [IOSByteArray newArrayWithLength:256];
    for (jint k = 0; k < 256; ++k) {
      *IOSByteArray_GetRef(b, k) = (jbyte) k;
    }
    NSString *enc = ComAowagieTextPdfBaseFont_WINANSI;
    if ([JreLoadStatic(ComAowagieTextPdfPdfName, MAC_ROMAN_ENCODING) isEqual:encoding]) {
      enc = ComAowagieTextPdfBaseFont_MACROMAN;
    }
    NSString *cv = ComAowagieTextPdfPdfEncodings_convertToStringWithByteArray_withNSString_(b, enc);
    IOSCharArray *arr = [((NSString *) nil_chk(cv)) java_toCharArray];
    for (jint k = 0; k < 256; ++k) {
      [((ComAowagieTextPdfIntHashtable *) nil_chk(self->uni2byte_)) putWithInt:IOSCharArray_Get(nil_chk(arr), k) withInt:k];
    }
  }
  else {
    for (jint k = 0; k < 256; ++k) {
      [((ComAowagieTextPdfIntHashtable *) nil_chk(self->uni2byte_)) putWithInt:IOSIntArray_Get(nil_chk(ComAowagieTextPdfDocumentFont_stdEnc), k) withInt:k];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfDocumentFont)
