//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/crypto/InvalidCipherTextException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_InvalidCipherTextException")
#ifdef RESTRICT_InvalidCipherTextException
#define INCLUDE_ALL_InvalidCipherTextException 0
#else
#define INCLUDE_ALL_InvalidCipherTextException 1
#endif
#undef RESTRICT_InvalidCipherTextException

#if !defined (OrgSpongycastleCryptoInvalidCipherTextException_) && (INCLUDE_ALL_InvalidCipherTextException || defined(INCLUDE_OrgSpongycastleCryptoInvalidCipherTextException))
#define OrgSpongycastleCryptoInvalidCipherTextException_

#define RESTRICT_CryptoException 1
#define INCLUDE_OrgSpongycastleCryptoCryptoException 1
#include "CryptoException.h"

@class JavaLangThrowable;

/*!
 @brief this exception is thrown whenever we find something we don't expect in a
  message.
 */
@interface OrgSpongycastleCryptoInvalidCipherTextException : OrgSpongycastleCryptoCryptoException

#pragma mark Public

/*!
 @brief base constructor.
 */
- (instancetype)init;

/*!
 @brief create a InvalidCipherTextException with the given message.
 @param message the message to be carried with the exception.
 */
- (instancetype)initWithNSString:(NSString *)message;

/*!
 @brief create a InvalidCipherTextException with the given message.
 @param message the message to be carried with the exception.
 @param cause the root cause of the exception.
 */
- (instancetype)initWithNSString:(NSString *)message
           withJavaLangThrowable:(JavaLangThrowable *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoInvalidCipherTextException)

FOUNDATION_EXPORT void OrgSpongycastleCryptoInvalidCipherTextException_init(OrgSpongycastleCryptoInvalidCipherTextException *self);

FOUNDATION_EXPORT OrgSpongycastleCryptoInvalidCipherTextException *new_OrgSpongycastleCryptoInvalidCipherTextException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoInvalidCipherTextException *create_OrgSpongycastleCryptoInvalidCipherTextException_init(void);

FOUNDATION_EXPORT void OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(OrgSpongycastleCryptoInvalidCipherTextException *self, NSString *message);

FOUNDATION_EXPORT OrgSpongycastleCryptoInvalidCipherTextException *new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoInvalidCipherTextException *create_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_withJavaLangThrowable_(OrgSpongycastleCryptoInvalidCipherTextException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT OrgSpongycastleCryptoInvalidCipherTextException *new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoInvalidCipherTextException *create_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoInvalidCipherTextException)

#endif

#pragma pop_macro("INCLUDE_ALL_InvalidCipherTextException")
