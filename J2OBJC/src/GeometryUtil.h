//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/GeometryUtil.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_GeometryUtil")
#ifdef RESTRICT_GeometryUtil
#define INCLUDE_ALL_GeometryUtil 0
#else
#define INCLUDE_ALL_GeometryUtil 1
#endif
#undef RESTRICT_GeometryUtil

#if !defined (ComGeometryUtil_) && (INCLUDE_ALL_GeometryUtil || defined(INCLUDE_ComGeometryUtil))
#define ComGeometryUtil_

@class IOSDoubleArray;

@interface ComGeometryUtil : NSObject

#pragma mark Public

- (instancetype)init;

+ (jdouble)cubicWithDouble:(jdouble)t
                withDouble:(jdouble)x1
                withDouble:(jdouble)x2
                withDouble:(jdouble)x3
                withDouble:(jdouble)x4;

/*!
 @brief The method checks up if two cubic curves (x1, y1) - (x2, y2) - (x3, y3) -
  (x4, y4) and (cx1, cy1) - (cx2, cy2) - (cx3, cy3) - (cx4, cy4) intersect.
 The result is saved to point array. Size of points should be at learst 6.
 @param x1 position for x1
 @param y1 position for y1
 @param x2 position for x2
 @param y2 position for x2
 @param x3 position for x3
 @param y3 position for x3
 @param x4 position for x4
 @param y4 position for x4
 @param cx1 position for cx1
 @param cy1 position for cy1
 @param cx2 position for cx2
 @param cy2 position for cy2
 @param cx3 position for cx3
 @param cy3 position for cy3
 @param cx4 position for cx4
 @param cy4 position for cy4
 @param params array with parameters
 @return the method returns the quantity of the intersection points lied
          in the interval
 */
+ (jint)intersectCubicsWithDouble:(jdouble)x1
                       withDouble:(jdouble)y1
                       withDouble:(jdouble)x2
                       withDouble:(jdouble)y2
                       withDouble:(jdouble)x3
                       withDouble:(jdouble)y3
                       withDouble:(jdouble)x4
                       withDouble:(jdouble)y4
                       withDouble:(jdouble)cx1
                       withDouble:(jdouble)cy1
                       withDouble:(jdouble)cx2
                       withDouble:(jdouble)cy2
                       withDouble:(jdouble)cx3
                       withDouble:(jdouble)cy3
                       withDouble:(jdouble)cx4
                       withDouble:(jdouble)cy4
                  withDoubleArray:(IOSDoubleArray *)params;

/*!
 @brief It checks up if the line (x1, y1) - (x2, y2) and the cubic curve (cx1,
  cy1) - (cx2, cy2) - (cx3, cy3) - (cx4, cy4).The points of the
  intersection is saved to points array.
 Therefore the points size must be
  at learst 6.
 @param x1 position for x1
 @param y1 position for y1
 @param x2 position for x2
 @param y2 position for x2
 @param cx1 position for cx1
 @param cy1 position for cy1
 @param cx2 position for cx2
 @param cy2 position for cy2
 @param cx3 position for cx3
 @param cy3 position for cy3
 @param cx4 position for cx4
 @param cy4 position for cy4
 @param params array with parameters
 @return The method returns the quantity of roots lied in the defined
          interval
 */
+ (jint)intersectLineAndCubicWithDouble:(jdouble)x1
                             withDouble:(jdouble)y1
                             withDouble:(jdouble)x2
                             withDouble:(jdouble)y2
                             withDouble:(jdouble)cx1
                             withDouble:(jdouble)cy1
                             withDouble:(jdouble)cx2
                             withDouble:(jdouble)cy2
                             withDouble:(jdouble)cx3
                             withDouble:(jdouble)cy3
                             withDouble:(jdouble)cx4
                             withDouble:(jdouble)cy4
                        withDoubleArray:(IOSDoubleArray *)params;

/*!
 @brief It checks up if there is intersection of the line (x1, y1) - (x2, y2) and
  the quad curve (qx1, qy1) - (qx2, qy2) - (qx3, qy3).The parameters of
  the intersection area saved to params array.
 Therefore the params size
  must be at learst 4.
 @param x1 position for x1
 @param y1 position for y1
 @param x2 position for x2
 @param y2 position for x2
 @param qx1 position for qx1
 @param qy1 position for qy1
 @param qx2 position for qx2
 @param qy2 position for qy2
 @param qx3 position for qx3
 @param qy3 position for qy3
 @param params array with parameters
 @return The method returns the quantity of roots lied in the defined
          interval
 */
+ (jint)intersectLineAndQuadWithDouble:(jdouble)x1
                            withDouble:(jdouble)y1
                            withDouble:(jdouble)x2
                            withDouble:(jdouble)y2
                            withDouble:(jdouble)qx1
                            withDouble:(jdouble)qy1
                            withDouble:(jdouble)qx2
                            withDouble:(jdouble)qy2
                            withDouble:(jdouble)qx3
                            withDouble:(jdouble)qy3
                       withDoubleArray:(IOSDoubleArray *)params;

/*!
 @brief The method checks up if line (x1, y1) - (x2, y2) and line (x3, y3) - (x4,
  y4) intersect.If lines intersect then the result parameters are saved to
  point array.
 The size of array point must be at least 2.
 @param x1 position for x1
 @param y1 position for y1
 @param x2 position for x2
 @param y2 position for x2
 @param x3 position for x3
 @param y3 position for x3
 @param x4 position for x4
 @param y4 position for x5
 @param point represent of the point
 @return the method returns 1 if two lines intersect in the defined
          interval, otherwise 0
 */
+ (jint)intersectLinesWithDouble:(jdouble)x1
                      withDouble:(jdouble)y1
                      withDouble:(jdouble)x2
                      withDouble:(jdouble)y2
                      withDouble:(jdouble)x3
                      withDouble:(jdouble)y3
                      withDouble:(jdouble)x4
                      withDouble:(jdouble)y4
                 withDoubleArray:(IOSDoubleArray *)point;

+ (jint)intersectLinesWithParamsWithDouble:(jdouble)x1
                                withDouble:(jdouble)y1
                                withDouble:(jdouble)x2
                                withDouble:(jdouble)y2
                                withDouble:(jdouble)x3
                                withDouble:(jdouble)y3
                                withDouble:(jdouble)x4
                                withDouble:(jdouble)y4
                           withDoubleArray:(IOSDoubleArray *)params;

/*!
 @brief It checks up if the quad (x1, y1) - (x2, y2) - (x3, y3) and the cubic
  (cx1, cy1) - (cx2, cy2) - (cx3, cy3) - (cx4, cy4) curves intersect.The
  points of the intersection is saved to points array.
 The points size
  should be at learst 6.
 @param qx1 position for qx1
 @param qy1 position for qy1
 @param qx2 position for qx2
 @param qy2 position for qx2
 @param qx3 position for qx3
 @param qy3 position for qx3
 @param cx1 position for cx1
 @param cy1 position for cy1
 @param cx2 position for cx2
 @param cy2 position for cy2
 @param cx3 position for cx3
 @param cy3 position for cy3
 @param cx4 position for cx4
 @param cy4 position for cy4
 @param params array with parameters
 @return The method returns the quantity of the intersection points lied
          in the interval.
 */
+ (jint)intersectQuadAndCubicWithDouble:(jdouble)qx1
                             withDouble:(jdouble)qy1
                             withDouble:(jdouble)qx2
                             withDouble:(jdouble)qy2
                             withDouble:(jdouble)qx3
                             withDouble:(jdouble)qy3
                             withDouble:(jdouble)cx1
                             withDouble:(jdouble)cy1
                             withDouble:(jdouble)cx2
                             withDouble:(jdouble)cy2
                             withDouble:(jdouble)cx3
                             withDouble:(jdouble)cy3
                             withDouble:(jdouble)cx4
                             withDouble:(jdouble)cy4
                        withDoubleArray:(IOSDoubleArray *)params;

/*!
 @brief The method checks up if two quads (x1, y1) - (x2, y2) - (x3, y3) and
  (qx1, qy1) - (qx2, qy2) - (qx3, qy3) intersect.The result is saved to
  point array.
 Size of points should be at learst 4.
 @param x1 position for x1
 @param y1 position for y1
 @param x2 position for x2
 @param y2 position for y2
 @param x3 position for x3
 @param y3 position for x3
 @param qx1 position for qx1
 @param qy1 position for qy1
 @param qx2 position for qx2
 @param qy2 position for qy2
 @param qx3 position for qx3
 @param qy3 position for qy3
 @param params array with parameters
 @return the method returns the quantity of roots lied in the interval
 */
+ (jint)intersectQuadsWithDouble:(jdouble)x1
                      withDouble:(jdouble)y1
                      withDouble:(jdouble)x2
                      withDouble:(jdouble)y2
                      withDouble:(jdouble)x3
                      withDouble:(jdouble)y3
                      withDouble:(jdouble)qx1
                      withDouble:(jdouble)qy1
                      withDouble:(jdouble)qx2
                      withDouble:(jdouble)qy2
                      withDouble:(jdouble)qx3
                      withDouble:(jdouble)qy3
                 withDoubleArray:(IOSDoubleArray *)params;

+ (jdouble)lineWithDouble:(jdouble)t
               withDouble:(jdouble)x1
               withDouble:(jdouble)x2;

+ (jdouble)quadWithDouble:(jdouble)t
               withDouble:(jdouble)x1
               withDouble:(jdouble)x2
               withDouble:(jdouble)x3;

+ (void)subCubicWithDoubleArray:(IOSDoubleArray *)coef
                     withDouble:(jdouble)t0
                    withBoolean:(jboolean)left;

+ (void)subQuadWithDoubleArray:(IOSDoubleArray *)coef
                    withDouble:(jdouble)t0
                   withBoolean:(jboolean)left;

@end

J2OBJC_STATIC_INIT(ComGeometryUtil)

inline jdouble ComGeometryUtil_get_EPSILON(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jdouble ComGeometryUtil_EPSILON;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ComGeometryUtil, EPSILON, jdouble)

FOUNDATION_EXPORT void ComGeometryUtil_init(ComGeometryUtil *self);

FOUNDATION_EXPORT ComGeometryUtil *new_ComGeometryUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComGeometryUtil *create_ComGeometryUtil_init(void);

FOUNDATION_EXPORT jint ComGeometryUtil_intersectLinesWithParamsWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDoubleArray_(jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble x3, jdouble y3, jdouble x4, jdouble y4, IOSDoubleArray *params);

FOUNDATION_EXPORT jint ComGeometryUtil_intersectLinesWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDoubleArray_(jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble x3, jdouble y3, jdouble x4, jdouble y4, IOSDoubleArray *point);

FOUNDATION_EXPORT jint ComGeometryUtil_intersectLineAndQuadWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDoubleArray_(jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble qx1, jdouble qy1, jdouble qx2, jdouble qy2, jdouble qx3, jdouble qy3, IOSDoubleArray *params);

FOUNDATION_EXPORT jint ComGeometryUtil_intersectLineAndCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDoubleArray_(jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble cx1, jdouble cy1, jdouble cx2, jdouble cy2, jdouble cx3, jdouble cy3, jdouble cx4, jdouble cy4, IOSDoubleArray *params);

FOUNDATION_EXPORT jint ComGeometryUtil_intersectQuadsWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDoubleArray_(jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble x3, jdouble y3, jdouble qx1, jdouble qy1, jdouble qx2, jdouble qy2, jdouble qx3, jdouble qy3, IOSDoubleArray *params);

FOUNDATION_EXPORT jint ComGeometryUtil_intersectQuadAndCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDoubleArray_(jdouble qx1, jdouble qy1, jdouble qx2, jdouble qy2, jdouble qx3, jdouble qy3, jdouble cx1, jdouble cy1, jdouble cx2, jdouble cy2, jdouble cx3, jdouble cy3, jdouble cx4, jdouble cy4, IOSDoubleArray *params);

FOUNDATION_EXPORT jint ComGeometryUtil_intersectCubicsWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDoubleArray_(jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble x3, jdouble y3, jdouble x4, jdouble y4, jdouble cx1, jdouble cy1, jdouble cx2, jdouble cy2, jdouble cx3, jdouble cy3, jdouble cx4, jdouble cy4, IOSDoubleArray *params);

FOUNDATION_EXPORT jdouble ComGeometryUtil_lineWithDouble_withDouble_withDouble_(jdouble t, jdouble x1, jdouble x2);

FOUNDATION_EXPORT jdouble ComGeometryUtil_quadWithDouble_withDouble_withDouble_withDouble_(jdouble t, jdouble x1, jdouble x2, jdouble x3);

FOUNDATION_EXPORT jdouble ComGeometryUtil_cubicWithDouble_withDouble_withDouble_withDouble_withDouble_(jdouble t, jdouble x1, jdouble x2, jdouble x3, jdouble x4);

FOUNDATION_EXPORT void ComGeometryUtil_subQuadWithDoubleArray_withDouble_withBoolean_(IOSDoubleArray *coef, jdouble t0, jboolean left);

FOUNDATION_EXPORT void ComGeometryUtil_subCubicWithDoubleArray_withDouble_withBoolean_(IOSDoubleArray *coef, jdouble t0, jboolean left);

J2OBJC_TYPE_LITERAL_HEADER(ComGeometryUtil)

#endif

#pragma pop_macro("INCLUDE_ALL_GeometryUtil")
