//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/signers/cades/CAdESTriPhaseSigner.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CAdESTriPhaseSigner")
#ifdef RESTRICT_CAdESTriPhaseSigner
#define INCLUDE_ALL_CAdESTriPhaseSigner 0
#else
#define INCLUDE_ALL_CAdESTriPhaseSigner 1
#endif
#undef RESTRICT_CAdESTriPhaseSigner

#if !defined (EsGobAfirmaSignersCadesCAdESTriPhaseSigner_) && (INCLUDE_ALL_CAdESTriPhaseSigner || defined(INCLUDE_EsGobAfirmaSignersCadesCAdESTriPhaseSigner))
#define EsGobAfirmaSignersCadesCAdESTriPhaseSigner_

@class EsGobAfirmaSignersCadesCAdESParameters;
@class IOSByteArray;
@class IOSObjectArray;
@class JavaUtilDate;

/*!
 @brief Firmador CAdES en tres fases independientes, adecuado para su uso en un entorno mixto cliente-servidor.
 <p>La firma electr&oacute;nica en tres fases est&aacute; pensada para entornos donde la clave privada reside
  en un sistema con al menos alguna de las siguientes restricciones:</p>
  <ul>
   <li>
    El sistema no es compatible con el Cliente @@firma. En este caso, dado que el 95% del c&oacute;digo se
    ejecuta en un sistema externo, solo es necesario portar el 5% restante.  
 </li>
   <li>
    El sistema tiene unas capacidades muy limitadas en cuanto a proceso computacional, memoria o comunicaciones por
    red. En este caso, el sistema solo realiza una operaci&oacute;n criptogr&aacute;fica, una firma PKCS#1,
    mucho menos demandante de potencia de proceso que una firma completa CAdES, y, adicionalmente, no trata el
    documento a firmar completo, sino &uacute;nicamente una peque&ntilde;a cantidad de datos resultante de un
    pre-proceso (la pre-firma) realizado por el sistema externo, lo que resulta en un enorme decremento en las necesidades
    de memoria y transmisi&oacute;n de datos (esto &uacute;ltimo si decide omitirse la transferencia del fichero a firmar).
   </li>
   <li>
    Por motivos de seguridad, el documento a firmar no puede salir de un sistema externo. Como se ha descrito en el punto
    anterior, en este caso es posible omitir por completo la salida del documento del sistema externo, y puede transferirse &uacute;nicamente
    el resultado de la pre-firma, desde la cual es imposible reconstruir el documento original.  
 </li>
  </ul>
  <p>
   Estos condicionantes convierten la firma trif&aacute;sica en una opci&oacute;n perfectamente adaptada a los
   dispositivos m&oacute;viles, donde se dan tanto la heterogeneidad de sistemas operativos (Apple iOS, Google
   Android, RIM BlackBerry, Microsoft Windows Phone, etc.) y las limitaciones en potencia de proceso, memoria
   y comunicaciones; en estas &uacute;ltimas hay que tener en cuenta el coste, especialmente si estamos haciendo
   uso de una red de otro operador en itinerancia (<i>roaming</i>).
  </p>
  <p>
   El funcionamiento t&iacute;pico de una firma trif&aacute;sica en la que intervienen un disposotivo m&oacute;vil,
   un servidor Web (que hace la pre-firma y la post-firma) y un servidor documental podr&iacute;a ser el siguiente: 
 </p>
  <p><b>Pre-firma:</b></p>
  <p style="text-align: center;"><img src="doc-files/CAdESTriPhaseSigner-1.png" alt="Esquema de la fase 1: Pre-Firma"></p>
  <ul>
   <li>El dispositivo movil solicita una pre-firma al servidor Web indicando un identificador de documento.</li>
   <li>El servidor Web solicita el documento a servidor documental.</li>
   <li>
    El servidor documental entrega el documento al servidor Web.<br> Es importante recalcar que el servidor
    documental no necesita almacenar ning&uacute;n dato de sesi&oacute;n y que este no est&aacute; expuesto a Internet
    de forma directa en ning&uacute;n momento.
   </li>
   <li>
    El servidor Web calcula la pre-firma, entregando el resultado (muy peque&ntilde;o en tama&ntilde;o) al dispositivo.<br>
    Es importante recalcar que el servidor Web no necesita almacenar ning&uacute;n dato de sesi&oacute;n ni
    exponer los documentos directamente al dispositivo.  
 </li>
  </ul>
  <p><b>Firma:</b></p>
  <p style="text-align: center;"><img src="doc-files/CAdESTriPhaseSigner-2.png" alt="Esquema de la fase 2: Firma"></p>
  <ul>
   <li>
    El dispositivo m&oacute;vil realiza, de forma completamente aislada una firma electr&oacute;nica
    simple (computacionalmente ligera) de los datos de la pre-firma. La clave privada del usuario nunca sale
    del dispositivo y no se expone externamente en ningun momento.  
 </li>
  </ul>
  <p><b>Post-firma:</b></p>
  <p style="text-align: center;"><img src="doc-files/CAdESTriPhaseSigner-3.png" alt="Esquema de la fase 3: Post-Firma"></p>
  <ul>
   <li>
    El dispositivo m&oacute;vil solicita una post-firma al servidor Web indicando un identificador de
    documento y proporcionando el resultado de su pre-firma firmada.  
 </li>
   <li>El servidor Web solicita el documento a servidor documental.</li>
   <li>El servidor documental entrega el documento al servidor Web.</li>
   <li>
    El servidor Web calcula la post-firma y compone el documento final firmado, entregando el resultado
    al servidor documental para su almac&eacute;n.
   </li>
   <li>El servidor documental almacena el nuevo documento y devuelve un identificador al servidor Web.</li>
   <li>
    El servidor Web comunica al dispositivo el exito de la operacion y el identificador del fichero
    ya firmado y almacenado.  
 </li>
  </ul>
  <p>
   El esquema podria ser igualmente implementado sin servidor documental, pudiendo obtener el Servidor Web el documento
   desde otro origen, incluyendo el propio dispositivo m&oacute;vil. Igualmente, una vez firmado el documento, su destino
   puede ser cualquiera, incluyendo de nuevo al propio dispositivo. 
 </p>
  <p>
   Es conveniente tener en cuenta al usar firmas trif&aacute;sicas que es necesario disponer de un mecanismo
   para que el usuario pueda ver en todo momento los documentos que est&aacute; firmando (una copia que refleje
   con fidelidad el contenido firmado puede ser suficiente) para evitar situaciones de repudio. 
 </p>
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s
 */
@interface EsGobAfirmaSignersCadesCAdESTriPhaseSigner : NSObject

#pragma mark Public

/*!
 @brief Realiza una firma CAdES completa.
 @param signatureAlgorithm Algoritmo de firma electr &oacute; nica.
 @param content Datos a firmar (usar  <code> null </code>  si no se desean a &ntilde; adir a la firma).
 @param signerCertificateChain Cadena de certificados del firmante.
 @param signatureValue Firma PKCS#1 v1.5 de los atributos firmados.
 @param signedAttributes Atributos firmados (prefirma).
 @return Firma CAdES completa.
 @throw AOExceptionCuando se produce cualquier error durante el proceso.
 */
+ (IOSByteArray *)postSignWithNSString:(NSString *)signatureAlgorithm
                         withByteArray:(IOSByteArray *)content
  withJavaSecurityCertCertificateArray:(IOSObjectArray *)signerCertificateChain
                         withByteArray:(IOSByteArray *)signatureValue
                         withByteArray:(IOSByteArray *)signedAttributes;

/*!
 @brief Genera los atributos firmados CAdES (prefirma).
 @param signerCertificateChain Cadena de certificados del firmante
 @param signDate Fecha de la firma (debe establecerse externamente para evitar desincronismos en la firma trif &aacute; sica)
 @param config Configuraci &oacute; n con el detalle de la firma a montar.
 @return Atributos CAdES a firmar (prefirma) codificados en ASN.1.
 @throw AOExceptionCuando se produce cualquier error durante el proceso.
 */
+ (IOSByteArray *)preSignWithJavaSecurityCertCertificateArray:(IOSObjectArray *)signerCertificateChain
                                             withJavaUtilDate:(JavaUtilDate *)signDate
                   withEsGobAfirmaSignersCadesCAdESParameters:(EsGobAfirmaSignersCadesCAdESParameters *)config;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobAfirmaSignersCadesCAdESTriPhaseSigner)

FOUNDATION_EXPORT IOSByteArray *EsGobAfirmaSignersCadesCAdESTriPhaseSigner_preSignWithJavaSecurityCertCertificateArray_withJavaUtilDate_withEsGobAfirmaSignersCadesCAdESParameters_(IOSObjectArray *signerCertificateChain, JavaUtilDate *signDate, EsGobAfirmaSignersCadesCAdESParameters *config);

FOUNDATION_EXPORT IOSByteArray *EsGobAfirmaSignersCadesCAdESTriPhaseSigner_postSignWithNSString_withByteArray_withJavaSecurityCertCertificateArray_withByteArray_withByteArray_(NSString *signatureAlgorithm, IOSByteArray *content, IOSObjectArray *signerCertificateChain, IOSByteArray *signatureValue, IOSByteArray *signedAttributes);

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaSignersCadesCAdESTriPhaseSigner)

#endif

#pragma pop_macro("INCLUDE_ALL_CAdESTriPhaseSigner")
