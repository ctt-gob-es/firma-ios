//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/TrueTypeFontUnicode.java
//

#include "BaseFont.h"
#include "CFFFontSubset.h"
#include "DocumentException.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PdfArray.h"
#include "PdfDictionary.h"
#include "PdfEncodings.h"
#include "PdfIndirectObject.h"
#include "PdfIndirectReference.h"
#include "PdfLiteral.h"
#include "PdfName.h"
#include "PdfNumber.h"
#include "PdfObject.h"
#include "PdfStream.h"
#include "PdfString.h"
#include "PdfWriter.h"
#include "RandomAccessFileOrArray.h"
#include "TrueTypeFont.h"
#include "TrueTypeFontSubSet.h"
#include "TrueTypeFontUnicode.h"
#include "Utilities.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

#if !__has_feature(objc_arc)
#error "TrueTypeFontUnicode must be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

@interface ComAowagieTextPdfTrueTypeFontUnicode () {
 @public
  /*!
   @brief <CODE>true</CODE> if the encoding is vertical.
   */
  jboolean vertical_;
}

/*!
 @brief Creates a ToUnicode CMap to allow copy and paste from Acrobat.
 @param metrics metrics[0] contains the glyph index and metrics[2]  contains the Unicode code
 @return the stream representing this CMap or <CODE>null</CODE>
 */
- (ComAowagieTextPdfPdfStream *)getToUnicodeWithNSObjectArray:(IOSObjectArray *)metrics;

+ (NSString *)toHex4WithInt:(jint)n;

/*!
 @brief Gets an hex string in the format "&lt;HHHH&gt;".
 @param n the number
 @return the hex string
 */
+ (NSString *)toHexWithInt:(jint)n;

/*!
 @brief Generates the CIDFontTyte2 dictionary.
 @param fontDescriptor the indirect reference to the font descriptor
 @param subsetPrefix the subset prefix
 @param metrics the horizontal width metrics
 @return a stream
 */
- (ComAowagieTextPdfPdfDictionary *)getCIDFontType2WithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)fontDescriptor
                                                                                withNSString:(NSString *)subsetPrefix
                                                                           withNSObjectArray:(IOSObjectArray *)metrics;

/*!
 @brief Generates the font dictionary.
 @param descendant the descendant dictionary
 @param subsetPrefix the subset prefix
 @param toUnicode the ToUnicode stream
 @return the stream
 */
- (ComAowagieTextPdfPdfDictionary *)getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)descendant
                                                                                withNSString:(NSString *)subsetPrefix
                                                   withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)toUnicode;

@end

inline IOSByteArray *ComAowagieTextPdfTrueTypeFontUnicode_get_rotbits(void);
static IOSByteArray *ComAowagieTextPdfTrueTypeFontUnicode_rotbits;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfTrueTypeFontUnicode, rotbits, IOSByteArray *)

__attribute__((unused)) static ComAowagieTextPdfPdfStream *ComAowagieTextPdfTrueTypeFontUnicode_getToUnicodeWithNSObjectArray_(ComAowagieTextPdfTrueTypeFontUnicode *self, IOSObjectArray *metrics);

__attribute__((unused)) static NSString *ComAowagieTextPdfTrueTypeFontUnicode_toHex4WithInt_(jint n);

__attribute__((unused)) static NSString *ComAowagieTextPdfTrueTypeFontUnicode_toHexWithInt_(jint n);

__attribute__((unused)) static ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfTrueTypeFontUnicode_getCIDFontType2WithComAowagieTextPdfPdfIndirectReference_withNSString_withNSObjectArray_(ComAowagieTextPdfTrueTypeFontUnicode *self, ComAowagieTextPdfPdfIndirectReference *fontDescriptor, NSString *subsetPrefix, IOSObjectArray *metrics);

__attribute__((unused)) static ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfTrueTypeFontUnicode_getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference_withNSString_withComAowagieTextPdfPdfIndirectReference_(ComAowagieTextPdfTrueTypeFontUnicode *self, ComAowagieTextPdfPdfIndirectReference *descendant, NSString *subsetPrefix, ComAowagieTextPdfPdfIndirectReference *toUnicode);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/TrueTypeFontUnicode.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfTrueTypeFontUnicode)


#line 66
@implementation ComAowagieTextPdfTrueTypeFontUnicode


#line 85
- (instancetype)initPackagePrivateWithNSString:(NSString *)ttFile
                                  withNSString:(NSString *)enc
                                   withBoolean:(jboolean)emb
                                 withByteArray:(IOSByteArray *)ttfAfm
                                   withBoolean:(jboolean)forceRead {
  ComAowagieTextPdfTrueTypeFontUnicode_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_(self, ttFile, enc, emb, ttfAfm, forceRead);
  return self;
}


#line 128
- (jint)getWidthWithInt:(jint)char1 {
  
#line 130
  if (self->vertical_) {
    return 1000;
  }
  if (self->fontSpecific_) {
    if ((char1 & (jint) 0xff00) == 0 || (char1 & (jint) 0xff00) == (jint) 0xf000) {
      return [self getRawWidthWithInt:char1 & (jint) 0xff withNSString:nil];
    }
    else {
      
#line 137
      return 0;
    }
  }
  else {
    return [self getRawWidthWithInt:char1 withNSString:self->encoding_];
  }
}


#line 150
- (jint)getWidthWithNSString:(NSString *)text {
  
#line 152
  if (self->vertical_) {
    return [((NSString *) nil_chk(text)) java_length] * 1000;
  }
  jint total = 0;
  if (self->fontSpecific_) {
    IOSCharArray *cc = [((NSString *) nil_chk(text)) java_toCharArray];
    jint len = ((IOSCharArray *) nil_chk(cc))->size_;
    for (jint k = 0; k < len; ++k) {
      jchar c = IOSCharArray_Get(cc, k);
      if ((c & (jint) 0xff00) == 0 || (c & (jint) 0xff00) == (jint) 0xf000) {
        total += [self getRawWidthWithInt:c & (jint) 0xff withNSString:nil];
      }
    }
  }
  else {
    jint len = [((NSString *) nil_chk(text)) java_length];
    for (jint k = 0; k < len; ++k) {
      if (ComAowagieTextUtilities_isSurrogatePairWithNSString_withInt_(text, k)) {
        total += [self getRawWidthWithInt:ComAowagieTextUtilities_convertToUtf32WithNSString_withInt_(text, k) withNSString:self->encoding_];
        ++k;
      }
      else {
        
#line 173
        total += [self getRawWidthWithInt:[text charAtWithInt:k] withNSString:self->encoding_];
      }
    }
  }
  return total;
}


#line 185
- (ComAowagieTextPdfPdfStream *)getToUnicodeWithNSObjectArray:(IOSObjectArray *)metrics {
  return ComAowagieTextPdfTrueTypeFontUnicode_getToUnicodeWithNSObjectArray_(self, metrics);
}


#line 228
+ (NSString *)toHex4WithInt:(jint)n {
  return ComAowagieTextPdfTrueTypeFontUnicode_toHex4WithInt_(n);
}


#line 237
+ (NSString *)toHexWithInt:(jint)n {
  return ComAowagieTextPdfTrueTypeFontUnicode_toHexWithInt_(n);
}


#line 253
- (ComAowagieTextPdfPdfDictionary *)getCIDFontType2WithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)fontDescriptor
                                                                                withNSString:(NSString *)subsetPrefix
                                                                           withNSObjectArray:(IOSObjectArray *)metrics {
  return ComAowagieTextPdfTrueTypeFontUnicode_getCIDFontType2WithComAowagieTextPdfPdfIndirectReference_withNSString_withNSObjectArray_(self, fontDescriptor, subsetPrefix, metrics);
}


#line 310
- (ComAowagieTextPdfPdfDictionary *)getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)descendant
                                                                                withNSString:(NSString *)subsetPrefix
                                                   withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)toUnicode {
  return ComAowagieTextPdfTrueTypeFontUnicode_getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference_withNSString_withComAowagieTextPdfPdfIndirectReference_(self, descendant, subsetPrefix, toUnicode);
}


#line 335
- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  jint m1 = IOSIntArray_Get(nil_chk(((IOSIntArray *) cast_chk(o1, [IOSIntArray class]))), 0);
  jint m2 = IOSIntArray_Get(nil_chk(((IOSIntArray *) cast_chk(o2, [IOSIntArray class]))), 0);
  if (m1 < m2) {
    return -1;
  }
  if (m1 == m2) {
    return 0;
  }
  return 1;
}


#line 357
- (void)writeFontWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
      withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)ref
                              withNSObjectArray:(IOSObjectArray *)params {
  
#line 359
  JavaUtilHashMap *longTag = (JavaUtilHashMap *) cast_chk(IOSObjectArray_Get(nil_chk(params), 0), [JavaUtilHashMap class]);
  [self addRangeUniWithJavaUtilHashMap:longTag withBoolean:true withBoolean:self->subset_];
  IOSObjectArray *metrics = [((id<JavaUtilCollection>) nil_chk([((JavaUtilHashMap *) nil_chk(longTag)) values])) toArray];
  JavaUtilArrays_sortWithNSObjectArray_withJavaUtilComparator_(metrics, self);
  ComAowagieTextPdfPdfIndirectReference *ind_font = nil;
  ComAowagieTextPdfPdfObject *pobj = nil;
  ComAowagieTextPdfPdfIndirectObject *obj = nil;
  ComAowagieTextPdfPdfIndirectReference *cidset = nil;
  if ([((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) getPDFXConformance] == ComAowagieTextPdfPdfWriter_PDFA1A || [writer getPDFXConformance] == ComAowagieTextPdfPdfWriter_PDFA1B) {
    ComAowagieTextPdfPdfStream *stream;
    if (((IOSObjectArray *) nil_chk(metrics))->size_ == 0) {
      stream = new_ComAowagieTextPdfPdfStream_initWithByteArray_([IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x80 } count:1]);
    }
    else {
      jint top = IOSIntArray_Get(nil_chk(((IOSIntArray *) cast_chk(IOSObjectArray_Get(metrics, metrics->size_ - 1), [IOSIntArray class]))), 0);
      IOSByteArray *bt = [IOSByteArray newArrayWithLength:JreIntDiv(top, 8) + 1];
      {
        IOSObjectArray *a__ =
#line 375
        metrics;
        id const *b__ = a__->buffer_;
        id const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id metric = *b__++;
          
#line 376
          jint v = IOSIntArray_Get(nil_chk(((IOSIntArray *) cast_chk(metric, [IOSIntArray class]))), 0);
          *IOSByteArray_GetRef(bt, JreIntDiv(v, 8)) |= IOSByteArray_Get(nil_chk(ComAowagieTextPdfTrueTypeFontUnicode_rotbits), JreIntMod(v, 8));
        }
      }
      
#line 379
      stream = new_ComAowagieTextPdfPdfStream_initWithByteArray_(bt);
      [stream flateCompressWithInt:self->compressionLevel_];
    }
    cidset = [((ComAowagieTextPdfPdfIndirectObject *) nil_chk([writer addToBodyWithComAowagieTextPdfPdfObject:stream])) getIndirectReference];
  }
  
#line 385
  if (self->cff_) {
    IOSByteArray *b = [self readCffFont];
    if (self->subset_ || self->subsetRanges_ != nil) {
      ComAowagieTextPdfCFFFontSubset *cff = new_ComAowagieTextPdfCFFFontSubset_initPackagePrivateWithComAowagieTextPdfRandomAccessFileOrArray_withJavaUtilHashMap_(new_ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_(b), longTag);
      b = [cff ProcessWithNSString:IOSObjectArray_Get(nil_chk([cff getNames]), 0)];
    }
    pobj = new_ComAowagieTextPdfBaseFont_StreamFont_initWithByteArray_withNSString_withInt_(b, @"CIDFontType0C", self->compressionLevel_);
    obj = [writer addToBodyWithComAowagieTextPdfPdfObject:pobj];
    ind_font = [((ComAowagieTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
  }
  else {
    
#line 395
    IOSByteArray *b;
    if (self->subset_ || self->directoryOffset_ != 0) {
      ComAowagieTextPdfTrueTypeFontSubSet *sb = new_ComAowagieTextPdfTrueTypeFontSubSet_initPackagePrivateWithNSString_withComAowagieTextPdfRandomAccessFileOrArray_withJavaUtilHashMap_withInt_withBoolean_withBoolean_(self->fileName_, new_ComAowagieTextPdfRandomAccessFileOrArray_initWithComAowagieTextPdfRandomAccessFileOrArray_(self->rf_), longTag, self->directoryOffset_, false, false);
      b = [sb process];
    }
    else {
      b = [self getFullFont];
    }
    IOSIntArray *lengths = [IOSIntArray newArrayWithInts:(jint[]){ ((IOSByteArray *) nil_chk(b))->size_ } count:1];
    pobj = new_ComAowagieTextPdfBaseFont_StreamFont_initWithByteArray_withIntArray_withInt_(b, lengths, self->compressionLevel_);
    obj = [writer addToBodyWithComAowagieTextPdfPdfObject:pobj];
    ind_font = [((ComAowagieTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
  }
  NSString *subsetPrefix = @"";
  if (self->subset_) {
    subsetPrefix = ComAowagieTextPdfBaseFont_createSubsetPrefix();
  }
  ComAowagieTextPdfPdfDictionary *dic = [self getFontDescriptorWithComAowagieTextPdfPdfIndirectReference:ind_font withNSString:subsetPrefix withComAowagieTextPdfPdfIndirectReference:cidset];
  obj = [writer addToBodyWithComAowagieTextPdfPdfObject:dic];
  ind_font = [((ComAowagieTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
  
#line 416
  pobj = ComAowagieTextPdfTrueTypeFontUnicode_getCIDFontType2WithComAowagieTextPdfPdfIndirectReference_withNSString_withNSObjectArray_(self, ind_font, subsetPrefix, metrics);
  obj = [writer addToBodyWithComAowagieTextPdfPdfObject:pobj];
  ind_font = [((ComAowagieTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
  
#line 420
  pobj = ComAowagieTextPdfTrueTypeFontUnicode_getToUnicodeWithNSObjectArray_(self, metrics);
  ComAowagieTextPdfPdfIndirectReference *toUnicodeRef = nil;
  
#line 423
  if (pobj != nil) {
    obj = [writer addToBodyWithComAowagieTextPdfPdfObject:pobj];
    toUnicodeRef = [((ComAowagieTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
  }
  
#line 428
  pobj = ComAowagieTextPdfTrueTypeFontUnicode_getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference_withNSString_withComAowagieTextPdfPdfIndirectReference_(self, ind_font, subsetPrefix, toUnicodeRef);
  (void) [writer addToBodyWithComAowagieTextPdfPdfObject:pobj withComAowagieTextPdfPdfIndirectReference:ref];
}


#line 437
- (ComAowagieTextPdfPdfStream *)getFullFontStream {
  
#line 439
  if (self->cff_) {
    return new_ComAowagieTextPdfBaseFont_StreamFont_initWithByteArray_withNSString_withInt_([self readCffFont], @"CIDFontType0C", self->compressionLevel_);
  }
  return [super getFullFontStream];
}


#line 449
- (IOSByteArray *)convertToBytesWithNSString:(NSString *)text {
  
#line 451
  return nil;
}


#line 454
- (IOSByteArray *)convertToBytesWithInt:(jint)char1 {
  
#line 456
  return nil;
}


#line 463
- (IOSIntArray *)getMetricsTTWithInt:(jint)c {
  
#line 465
  if (self->cmapExt_ != nil) {
    return (IOSIntArray *) cast_chk([self->cmapExt_ getWithId:new_JavaLangInteger_initWithInt_(c)], [IOSIntArray class]);
  }
  JavaUtilHashMap *map = nil;
  if (self->fontSpecific_) {
    map = self->cmap10_;
  }
  else {
    
#line 472
    map = self->cmap31_;
  }
  if (map == nil) {
    return nil;
  }
  if (self->fontSpecific_) {
    if ((c & (jint) 0xffffff00) == 0 || (c & (jint) 0xffffff00) == (jint) 0xf000) {
      return (IOSIntArray *) cast_chk([map getWithId:new_JavaLangInteger_initWithInt_(c & (jint) 0xff)], [IOSIntArray class]);
    }
    else {
      
#line 481
      return nil;
    }
  }
  else {
    
#line 484
    return (IOSIntArray *) cast_chk([map getWithId:new_JavaLangInteger_initWithInt_(c)], [IOSIntArray class]);
  }
}


#line 494
- (jboolean)charExistsWithInt:(jint)c {
  
#line 496
  return [self getMetricsTTWithInt:c] != nil;
}


#line 506
- (jboolean)setCharAdvanceWithInt:(jint)c
                          withInt:(jint)advance {
  IOSIntArray *m = [self getMetricsTTWithInt:c];
  if (m == nil) {
    return false;
  }
  *IOSIntArray_GetRef(m, 1) = advance;
  return true;
}

- (IOSIntArray *)getCharBBoxWithInt:(jint)c {
  
#line 518
  if (self->bboxes_ == nil) {
    return nil;
  }
  IOSIntArray *m = [self getMetricsTTWithInt:c];
  if (m == nil) {
    return nil;
  }
  return IOSObjectArray_Get(nil_chk(self->bboxes_), IOSIntArray_Get(m, 0));
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfStream;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 7, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 8, 3, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 16, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfStream;", 0x1, -1, -1, 17, -1, -1, -1 },
    { NULL, "[B", 0x0, 18, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 18, 3, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 19, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 23, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithNSString:withNSString:withBoolean:withByteArray:withBoolean:);
  methods[1].selector = @selector(getWidthWithInt:);
  methods[2].selector = @selector(getWidthWithNSString:);
  methods[3].selector = @selector(getToUnicodeWithNSObjectArray:);
  methods[4].selector = @selector(toHex4WithInt:);
  methods[5].selector = @selector(toHexWithInt:);
  methods[6].selector = @selector(getCIDFontType2WithComAowagieTextPdfPdfIndirectReference:withNSString:withNSObjectArray:);
  methods[7].selector = @selector(getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference:withNSString:withComAowagieTextPdfPdfIndirectReference:);
  methods[8].selector = @selector(compareWithId:withId:);
  methods[9].selector = @selector(writeFontWithComAowagieTextPdfPdfWriter:withComAowagieTextPdfPdfIndirectReference:withNSObjectArray:);
  methods[10].selector = @selector(getFullFontStream);
  methods[11].selector = @selector(convertToBytesWithNSString:);
  methods[12].selector = @selector(convertToBytesWithInt:);
  methods[13].selector = @selector(getMetricsTTWithInt:);
  methods[14].selector = @selector(charExistsWithInt:);
  methods[15].selector = @selector(setCharAdvanceWithInt:withInt:);
  methods[16].selector = @selector(getCharBBoxWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "vertical_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rotbits", "[B", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;Z[BZ", "LComAowagieTextDocumentException;LJavaIoIOException;", "getWidth", "I", "LNSString;", "getToUnicode", "[LNSObject;", "toHex4", "toHex", "getCIDFontType2", "LComAowagieTextPdfPdfIndirectReference;LNSString;[LNSObject;", "getFontBaseType", "LComAowagieTextPdfPdfIndirectReference;LNSString;LComAowagieTextPdfPdfIndirectReference;", "compare", "LNSObject;LNSObject;", "writeFont", "LComAowagieTextPdfPdfWriter;LComAowagieTextPdfPdfIndirectReference;[LNSObject;", "LJavaIoIOException;LComAowagieTextDocumentException;", "convertToBytes", "getMetricsTT", "charExists", "setCharAdvance", "II", "getCharBBox", &ComAowagieTextPdfTrueTypeFontUnicode_rotbits };
  static const J2ObjcClassInfo _ComAowagieTextPdfTrueTypeFontUnicode = { "TrueTypeFontUnicode", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 17, 2, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfTrueTypeFontUnicode;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfTrueTypeFontUnicode class]) {
    ComAowagieTextPdfTrueTypeFontUnicode_rotbits = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 348
      (jbyte) (jint) 0x80, (jbyte) (jint) 0x40, (jbyte) (jint) 0x20, (jbyte) (jint) 0x10, (jbyte) (jint) 0x08, (jbyte) (jint) 0x04, (jbyte) (jint) 0x02, (jbyte) (jint) 0x01 } count:8];
      J2OBJC_SET_INITIALIZED(ComAowagieTextPdfTrueTypeFontUnicode)
    }
  }

@end


#line 85
void ComAowagieTextPdfTrueTypeFontUnicode_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_(ComAowagieTextPdfTrueTypeFontUnicode *self, NSString *ttFile, NSString *enc, jboolean emb, IOSByteArray *ttfAfm, jboolean forceRead) {
  ComAowagieTextPdfTrueTypeFont_initPackagePrivate(self);
  self->vertical_ =
#line 71
  false;
  
#line 86
  NSString *nameBase = ComAowagieTextPdfBaseFont_getBaseNameWithNSString_(ttFile);
  NSString *ttcName = ComAowagieTextPdfTrueTypeFont_getTTCNameWithNSString_(nameBase);
  if ([((NSString *) nil_chk(nameBase)) java_length] < [((NSString *) nil_chk(ttFile)) java_length]) {
    self->style_ = [ttFile java_substring:[nameBase java_length]];
  }
  self->encoding_ = enc;
  self->embedded_ = emb;
  self->fileName_ = ttcName;
  self->ttcIndex_ = @"";
  if ([((NSString *) nil_chk(ttcName)) java_length] < [nameBase java_length]) {
    self->ttcIndex_ = [nameBase java_substring:[ttcName java_length] + 1];
  }
  self->fontType_ = ComAowagieTextPdfBaseFont_FONT_TYPE_TTUNI;
  if (([((NSString *) nil_chk([((NSString *) nil_chk(self->fileName_)) lowercaseString])) java_hasSuffix:@".ttf"] || [((NSString *) nil_chk([((NSString *) nil_chk(self->fileName_)) lowercaseString])) java_hasSuffix:@".otf"] || [((NSString *) nil_chk([((NSString *) nil_chk(self->fileName_)) lowercaseString])) java_hasSuffix:@".ttc"]) && ([((NSString *) nil_chk(enc)) isEqual:ComAowagieTextPdfBaseFont_IDENTITY_H] || [enc isEqual:ComAowagieTextPdfBaseFont_IDENTITY_V]) && emb) {
    [self processWithByteArray:ttfAfm withBoolean:forceRead];
    if (((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->fsType_ == 2) {
      @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$$", self->fileName_, self->style_, @" cannot be embedded due to licensing restrictions."));
    }
    
#line 105
    if ((self->cmap31_ == nil && !self->fontSpecific_) || (self->cmap10_ == nil && self->fontSpecific_)) {
      self->directTextToByte_ = true;
    }
    
#line 109
    if (self->fontSpecific_) {
      self->fontSpecific_ = false;
      NSString *tempEncoding = self->encoding_;
      self->encoding_ = @"";
      [self createEncoding];
      self->encoding_ = tempEncoding;
      self->fontSpecific_ = true;
    }
  }
  else {
    
#line 118
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$C$$", self->fileName_, ' ', self->style_, @" is not a TTF font file."));
  }
  self->vertical_ = [((NSString *) nil_chk(enc)) java_hasSuffix:@"V"];
}


#line 85
ComAowagieTextPdfTrueTypeFontUnicode *new_ComAowagieTextPdfTrueTypeFontUnicode_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_(NSString *ttFile, NSString *enc, jboolean emb, IOSByteArray *ttfAfm, jboolean forceRead) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfTrueTypeFontUnicode, initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_, ttFile, enc, emb, ttfAfm, forceRead)
}


#line 85
ComAowagieTextPdfTrueTypeFontUnicode *create_ComAowagieTextPdfTrueTypeFontUnicode_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_(NSString *ttFile, NSString *enc, jboolean emb, IOSByteArray *ttfAfm, jboolean forceRead) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfTrueTypeFontUnicode, initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_, ttFile, enc, emb, ttfAfm, forceRead)
}


#line 185
ComAowagieTextPdfPdfStream *ComAowagieTextPdfTrueTypeFontUnicode_getToUnicodeWithNSObjectArray_(ComAowagieTextPdfTrueTypeFontUnicode *self, IOSObjectArray *metrics) {
  if (((IOSObjectArray *) nil_chk(metrics))->size_ == 0) {
    return nil;
  }
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_initWithNSString_(
#line 190
  @"/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo\n<< /Registry (TTX+0)\n/Ordering (T42UV)\n/Supplement 0\n>> def\n/CMapName /TTX+0 def\n/CMapType 2 def\n1 begincodespacerange\n<0000><FFFF>\nendcodespacerange\n");
  
#line 203
  jint size = 0;
  for (jint k = 0; k < metrics->size_; ++k) {
    if (size == 0) {
      if (k != 0) {
        (void) [buf appendWithNSString:@"endbfrange\n"];
      }
      size = JavaLangMath_minWithInt_withInt_(100, metrics->size_ - k);
      (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithInt:size])) appendWithNSString:@" beginbfrange\n"];
    }
    --size;
    IOSIntArray *metric = (IOSIntArray *) cast_chk(IOSObjectArray_Get(metrics, k), [IOSIntArray class]);
    NSString *fromTo = ComAowagieTextPdfTrueTypeFontUnicode_toHexWithInt_(IOSIntArray_Get(nil_chk(metric), 0));
    (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:fromTo])) appendWithNSString:fromTo])) appendWithNSString:ComAowagieTextPdfTrueTypeFontUnicode_toHexWithInt_(IOSIntArray_Get(metric, 2))])) appendWithChar:0x000a];
  }
  (void) [buf appendWithNSString:
#line 218
  @"endbfrange\nendcmap\nCMapName currentdict /CMap defineresource pop\nend end\n"];
  
#line 222
  NSString *s = [buf description];
  ComAowagieTextPdfPdfStream *stream = new_ComAowagieTextPdfPdfStream_initWithByteArray_(ComAowagieTextPdfPdfEncodings_convertToBytesWithNSString_withNSString_(s, nil));
  [stream flateCompressWithInt:self->compressionLevel_];
  return stream;
}


#line 228
NSString *ComAowagieTextPdfTrueTypeFontUnicode_toHex4WithInt_(jint n) {
  ComAowagieTextPdfTrueTypeFontUnicode_initialize();
  
#line 229
  NSString *s = JreStrcat("$$", @"0000", JavaLangInteger_toHexStringWithInt_(n));
  return [s java_substring:[s java_length] - 4];
}


#line 237
NSString *ComAowagieTextPdfTrueTypeFontUnicode_toHexWithInt_(jint n) {
  ComAowagieTextPdfTrueTypeFontUnicode_initialize();
  
#line 238
  if (n < (jint) 0x10000) {
    return JreStrcat("C$C", '<', ComAowagieTextPdfTrueTypeFontUnicode_toHex4WithInt_(n), '>');
  }
  n -= (jint) 0x10000;
  jint high = JreIntDiv(n, (jint) 0x400) + (jint) 0xd800;
  jint low = JreIntMod(n, (jint) 0x400) + (jint) 0xdc00;
  return JreStrcat("$$$$", @"[<", ComAowagieTextPdfTrueTypeFontUnicode_toHex4WithInt_(high), ComAowagieTextPdfTrueTypeFontUnicode_toHex4WithInt_(low), @">]");
}


#line 253
ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfTrueTypeFontUnicode_getCIDFontType2WithComAowagieTextPdfPdfIndirectReference_withNSString_withNSObjectArray_(ComAowagieTextPdfTrueTypeFontUnicode *self, ComAowagieTextPdfPdfIndirectReference *fontDescriptor, NSString *subsetPrefix, IOSObjectArray *metrics) {
  ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_initWithComAowagieTextPdfPdfName_(JreLoadStatic(ComAowagieTextPdfPdfName, FONT));
  
#line 256
  if (self->cff_) {
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, CIDFONTTYPE0)];
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BASEFONT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(JreStrcat("$$C$", subsetPrefix, self->fontName_, '-', self->encoding_))];
  }
  else {
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, CIDFONTTYPE2)];
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BASEFONT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(JreStrcat("$$", subsetPrefix, self->fontName_))];
  }
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTDESCRIPTOR) withComAowagieTextPdfPdfObject:fontDescriptor];
  if (!self->cff_) {
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CIDTOGIDMAP) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, IDENTITY)];
  }
  ComAowagieTextPdfPdfDictionary *cdic = new_ComAowagieTextPdfPdfDictionary_init();
  [cdic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, REGISTRY) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_(@"Adobe")];
  [cdic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ORDERING) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_(@"Identity")];
  [cdic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUPPLEMENT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(0)];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CIDSYSTEMINFO) withComAowagieTextPdfPdfObject:cdic];
  if (!self->vertical_) {
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DW) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(1000)];
    JavaLangStringBuffer *buf = new_JavaLangStringBuffer_initWithNSString_(@"[");
    jint lastNumber = -10;
    jboolean firstTime = true;
    {
      IOSObjectArray *a__ =
#line 278
      metrics;
      id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id metric2 = *b__++;
        
#line 279
        IOSIntArray *metric = (IOSIntArray *) cast_chk(metric2, [IOSIntArray class]);
        if (IOSIntArray_Get(nil_chk(metric), 1) == 1000) {
          continue;
        }
        jint m = IOSIntArray_Get(metric, 0);
        if (m == lastNumber + 1) {
          (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithChar:' '])) appendWithInt:IOSIntArray_Get(metric, 1)];
        }
        else {
          if (!firstTime) {
            (void) [buf appendWithChar:']'];
          }
          firstTime = false;
          (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithInt:m])) appendWithChar:'['])) appendWithInt:IOSIntArray_Get(metric, 1)];
        }
        lastNumber = m;
      }
    }
    
#line 296
    if ([buf java_length] > 1) {
      (void) [buf appendWithNSString:@"]]"];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, W) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithNSString_([buf description])];
    }
  }
  return dic;
}


#line 310
ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfTrueTypeFontUnicode_getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference_withNSString_withComAowagieTextPdfPdfIndirectReference_(ComAowagieTextPdfTrueTypeFontUnicode *self, ComAowagieTextPdfPdfIndirectReference *descendant, NSString *subsetPrefix, ComAowagieTextPdfPdfIndirectReference *toUnicode) {
  ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_initWithComAowagieTextPdfPdfName_(JreLoadStatic(ComAowagieTextPdfPdfName, FONT));
  
#line 313
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, TYPE0)];
  
#line 315
  if (self->cff_) {
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BASEFONT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(JreStrcat("$$C$", subsetPrefix, self->fontName_, '-', self->encoding_))];
  }
  else {
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BASEFONT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(JreStrcat("$$", subsetPrefix, self->fontName_))];
  }
  
#line 322
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENCODING) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(self->encoding_)];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DESCENDANTFONTS) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfArray_initWithComAowagieTextPdfPdfObject_(descendant)];
  if (toUnicode != nil) {
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TOUNICODE) withComAowagieTextPdfPdfObject:toUnicode];
  }
  return dic;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfTrueTypeFontUnicode)
