//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/FontFactoryImp.java
//

#include "BaseFont.h"
#include "Color.h"
#include "DocumentException.h"
#include "ElementTags.h"
#include "ExceptionConverter.h"
#include "Font.h"
#include "FontFactory.h"
#include "FontFactoryImp.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Markup.h"
#include "Utilities.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"
#include "java/util/Iterator.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"

#if !__has_feature(objc_arc)
#error "FontFactoryImp must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextFontFactoryImp () {
 @public
  /*!
   @brief This is a map of postscriptfontnames of True Type fonts and the path of their ttf- or ttc-file.
   */
  JavaUtilProperties *trueTypeFonts_;
  /*!
   @brief This is a map of fontfamilies.
   */
  JavaUtilHashtable *fontFamilies_;
}

/*!
 @brief Constructs a <CODE>Font</CODE>-object.
 @param fontname the name of the font
 @param encoding the encoding of the font
 @param embedded true if the font is to be embedded in the PDF
 @param size the size of this font
 @param style the style of this font
 @param color the  <CODE> Color </CODE>  of this font.
 @param cached true if the font comes from the cache or is added to  				the cache if new, false if the font is always created new
 @return the Font constructed based on the parameters
 */
- (ComAowagieTextFont *)getFontWithNSString:(NSString *)fontname
                               withNSString:(NSString *)encoding
                                withBoolean:(jboolean)embedded
                                  withFloat:(jfloat)size
                                    withInt:(jint)style
                    withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color
                                withBoolean:(jboolean)cached;

/*!
 @brief Register a font by giving explicitly the font family and name.
 @param familyName the font family
 @param fullName the font name
 @param path the font path
 */
- (void)registerFamilyWithNSString:(NSString *)familyName
                      withNSString:(NSString *)fullName
                      withNSString:(NSString *)path;

/*!
 @brief Register a ttf- or a ttc-file.
 @param path the path to a ttf- or ttc-file
 */
- (void)register__WithNSString:(NSString *)path;

/*!
 @brief Register a font file and use an alias for the font contained in it.
 @param path the path to a font file
 @param alias the alias you want to use for the font
 */
- (void)register__WithNSString:(NSString *)path
                  withNSString:(NSString *)alias;

/*!
 @brief Register all the fonts in a directory and possibly its subdirectories.
 @param dir the directory
 @param scanSubdirectories recursively scan subdirectories if  <code> true </code>
 @return the number of fonts registered
 @since 2.1.2
 */
- (jint)registerDirectoryWithNSString:(NSString *)dir
                          withBoolean:(jboolean)scanSubdirectories;

/*!
 @brief Checks if a certain font is registered.
 @param fontname the name of the font that has to be checked.
 @return true if the font is found
 */
- (jboolean)isRegisteredWithNSString:(NSString *)fontname;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextFontFactoryImp, trueTypeFonts_, JavaUtilProperties *)
J2OBJC_FIELD_SETTER(ComAowagieTextFontFactoryImp, fontFamilies_, JavaUtilHashtable *)

inline IOSObjectArray *ComAowagieTextFontFactoryImp_get_TTFamilyOrder(void);
inline IOSObjectArray *ComAowagieTextFontFactoryImp_set_TTFamilyOrder(IOSObjectArray *value);
static IOSObjectArray *ComAowagieTextFontFactoryImp_TTFamilyOrder;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextFontFactoryImp, TTFamilyOrder, IOSObjectArray *)

__attribute__((unused)) static ComAowagieTextFont *ComAowagieTextFontFactoryImp_getFontWithNSString_withNSString_withBoolean_withFloat_withInt_withHarmonyJavaAwtColor_withBoolean_(ComAowagieTextFontFactoryImp *self, NSString *fontname, NSString *encoding, jboolean embedded, jfloat size, jint style, HarmonyJavaAwtColor *color, jboolean cached);

__attribute__((unused)) static void ComAowagieTextFontFactoryImp_registerFamilyWithNSString_withNSString_withNSString_(ComAowagieTextFontFactoryImp *self, NSString *familyName, NSString *fullName, NSString *path);

__attribute__((unused)) static void ComAowagieTextFontFactoryImp_register__WithNSString_(ComAowagieTextFontFactoryImp *self, NSString *path);

__attribute__((unused)) static void ComAowagieTextFontFactoryImp_register__WithNSString_withNSString_(ComAowagieTextFontFactoryImp *self, NSString *path, NSString *alias);

__attribute__((unused)) static jint ComAowagieTextFontFactoryImp_registerDirectoryWithNSString_withBoolean_(ComAowagieTextFontFactoryImp *self, NSString *dir, jboolean scanSubdirectories);

__attribute__((unused)) static jboolean ComAowagieTextFontFactoryImp_isRegisteredWithNSString_(ComAowagieTextFontFactoryImp *self, NSString *fontname);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/FontFactoryImp.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextFontFactoryImp)


#line 74
@implementation ComAowagieTextFontFactoryImp


#line 96
- (instancetype)initPackagePrivate {
  ComAowagieTextFontFactoryImp_initPackagePrivate(self);
  return self;
}


#line 151
- (ComAowagieTextFont *)getFontWithNSString:(NSString *)fontname
                               withNSString:(NSString *)encoding
                                withBoolean:(jboolean)embedded
                                  withFloat:(jfloat)size
                                    withInt:(jint)style
                    withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color {
  
#line 152
  return ComAowagieTextFontFactoryImp_getFontWithNSString_withNSString_withBoolean_withFloat_withInt_withHarmonyJavaAwtColor_withBoolean_(self, fontname, encoding, embedded, size, style, color, true);
}


#line 170
- (ComAowagieTextFont *)getFontWithNSString:(NSString *)fontname
                               withNSString:(NSString *)encoding
                                withBoolean:(jboolean)embedded
                                  withFloat:(jfloat)size
                                    withInt:(jint)style
                    withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color
                                withBoolean:(jboolean)cached {
  return ComAowagieTextFontFactoryImp_getFontWithNSString_withNSString_withBoolean_withFloat_withInt_withHarmonyJavaAwtColor_withBoolean_(self, fontname, encoding, embedded, size, style, color, cached);
}


#line 243
- (ComAowagieTextFont *)getFontWithJavaUtilProperties:(JavaUtilProperties *)attributes {
  NSString *fontname = nil;
  NSString *encoding = self->defaultEncoding_;
  jboolean embedded = self->defaultEmbedding_;
  jfloat size = ComAowagieTextFont_UNDEFINED;
  jint style = ComAowagieTextFont_NORMAL;
  HarmonyJavaAwtColor *color = nil;
  NSString *value = [((JavaUtilProperties *) nil_chk(attributes)) getPropertyWithNSString:ComAowagieTextHtmlMarkup_HTML_ATTR_STYLE];
  if (value != nil && [value java_length] > 0) {
    JavaUtilProperties *styleAttributes = ComAowagieTextHtmlMarkup_parseAttributesWithNSString_(value);
    if ([((JavaUtilProperties *) nil_chk(styleAttributes)) isEmpty]) {
      (void) [attributes putWithId:ComAowagieTextHtmlMarkup_HTML_ATTR_STYLE withId:value];
    }
    else {
      fontname = [styleAttributes getPropertyWithNSString:ComAowagieTextHtmlMarkup_CSS_KEY_FONTFAMILY];
      if (fontname != nil) {
        NSString *tmp;
        while ([((NSString *) nil_chk(fontname)) java_indexOf:','] != -1) {
          tmp = [fontname java_substring:0 endIndex:[fontname java_indexOf:',']];
          if (ComAowagieTextFontFactoryImp_isRegisteredWithNSString_(self, tmp)) {
            fontname = tmp;
          }
          else {
            fontname = [fontname java_substring:[fontname java_indexOf:','] + 1];
          }
        }
      }
      if ((value = [styleAttributes getPropertyWithNSString:ComAowagieTextHtmlMarkup_CSS_KEY_FONTSIZE]) != nil) {
        size = ComAowagieTextHtmlMarkup_parseLengthWithNSString_(value);
      }
      if ((value = [styleAttributes getPropertyWithNSString:ComAowagieTextHtmlMarkup_CSS_KEY_FONTWEIGHT]) != nil) {
        style |= ComAowagieTextFont_getStyleValueWithNSString_(value);
      }
      if ((value = [styleAttributes getPropertyWithNSString:ComAowagieTextHtmlMarkup_CSS_KEY_FONTSTYLE]) != nil) {
        style |= ComAowagieTextFont_getStyleValueWithNSString_(value);
      }
      if ((value = [styleAttributes getPropertyWithNSString:ComAowagieTextHtmlMarkup_CSS_KEY_COLOR]) != nil) {
        color = ComAowagieTextHtmlMarkup_decodeColorWithNSString_(value);
      }
      [attributes putAllWithJavaUtilMap:styleAttributes];
      for (id<JavaUtilEnumeration> e = [styleAttributes keys]; [((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]; ) {
        id o = [e nextElement];
        (void) [attributes putWithId:o withId:[styleAttributes getWithId:o]];
      }
    }
  }
  if ((value = [attributes getPropertyWithNSString:ComAowagieTextElementTags_ENCODING]) != nil) {
    encoding = value;
  }
  if ([@"true" isEqual:[attributes getPropertyWithNSString:ComAowagieTextElementTags_EMBEDDED]]) {
    embedded = true;
  }
  if ((value = [attributes getPropertyWithNSString:ComAowagieTextElementTags_FONT]) != nil) {
    fontname = value;
  }
  if ((value = [attributes getPropertyWithNSString:ComAowagieTextElementTags_SIZE]) != nil) {
    size = ComAowagieTextHtmlMarkup_parseLengthWithNSString_(value);
  }
  if ((value = [attributes getPropertyWithNSString:ComAowagieTextHtmlMarkup_HTML_ATTR_STYLE]) != nil) {
    style |= ComAowagieTextFont_getStyleValueWithNSString_(value);
  }
  if ((value = [attributes getPropertyWithNSString:ComAowagieTextElementTags_STYLE]) != nil) {
    style |= ComAowagieTextFont_getStyleValueWithNSString_(value);
  }
  NSString *r = [attributes getPropertyWithNSString:ComAowagieTextElementTags_RED];
  NSString *g = [attributes getPropertyWithNSString:ComAowagieTextElementTags_GREEN];
  NSString *b = [attributes getPropertyWithNSString:ComAowagieTextElementTags_BLUE];
  if (r != nil || g != nil || b != nil) {
    jint red = 0;
    jint green = 0;
    jint blue = 0;
    if (r != nil) {
      red = JavaLangInteger_parseIntWithNSString_(r);
    }
    if (g != nil) {
      green = JavaLangInteger_parseIntWithNSString_(g);
    }
    if (b != nil) {
      blue = JavaLangInteger_parseIntWithNSString_(b);
    }
    color = new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(red, green, blue);
  }
  else if ((value = [attributes getPropertyWithNSString:ComAowagieTextElementTags_COLOR]) != nil) {
    color = ComAowagieTextHtmlMarkup_decodeColorWithNSString_(value);
  }
  if (fontname == nil) {
    return [self getFontWithNSString:nil withNSString:encoding withBoolean:embedded withFloat:size withInt:style withHarmonyJavaAwtColor:color];
  }
  return [self getFontWithNSString:fontname withNSString:encoding withBoolean:embedded withFloat:size withInt:style withHarmonyJavaAwtColor:color];
}


#line 340
- (void)registerFamilyWithNSString:(NSString *)familyName
                      withNSString:(NSString *)fullName
                      withNSString:(NSString *)path {
  ComAowagieTextFontFactoryImp_registerFamilyWithNSString_withNSString_withNSString_(self, familyName, fullName, path);
}


#line 372
- (void)register__WithNSString:(NSString *)path {
  ComAowagieTextFontFactoryImp_register__WithNSString_(self, path);
}


#line 383
- (void)register__WithNSString:(NSString *)path
                  withNSString:(NSString *)alias {
  ComAowagieTextFontFactoryImp_register__WithNSString_withNSString_(self, path, alias);
}


#line 461
- (jint)registerDirectoryWithNSString:(NSString *)dir
                          withBoolean:(jboolean)scanSubdirectories {
  return ComAowagieTextFontFactoryImp_registerDirectoryWithNSString_withBoolean_(self, dir, scanSubdirectories);
}


#line 511
- (id<JavaUtilSet>)getRegisteredFonts {
  return ComAowagieTextUtilities_getKeySetWithJavaUtilHashtable_(self->trueTypeFonts_);
}


#line 520
- (id<JavaUtilSet>)getRegisteredFamilies {
  return ComAowagieTextUtilities_getKeySetWithJavaUtilHashtable_(self->fontFamilies_);
}


#line 530
- (jboolean)isRegisteredWithNSString:(NSString *)fontname {
  return ComAowagieTextFontFactoryImp_isRegisteredWithNSString_(self, fontname);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextFont;", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextFont;", 0x2, 0, 2, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextFont;", 0x0, 0, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(getFontWithNSString:withNSString:withBoolean:withFloat:withInt:withHarmonyJavaAwtColor:);
  methods[2].selector = @selector(getFontWithNSString:withNSString:withBoolean:withFloat:withInt:withHarmonyJavaAwtColor:withBoolean:);
  methods[3].selector = @selector(getFontWithJavaUtilProperties:);
  methods[4].selector = @selector(registerFamilyWithNSString:withNSString:withNSString:);
  methods[5].selector = @selector(register__WithNSString:);
  methods[6].selector = @selector(register__WithNSString:withNSString:);
  methods[7].selector = @selector(registerDirectoryWithNSString:withBoolean:);
  methods[8].selector = @selector(getRegisteredFonts);
  methods[9].selector = @selector(getRegisteredFamilies);
  methods[10].selector = @selector(isRegisteredWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "trueTypeFonts_", "LJavaUtilProperties;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "TTFamilyOrder", "[LNSString;", .constantValue.asLong = 0, 0xa, -1, 12, -1, -1 },
    { "fontFamilies_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "defaultEncoding_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "defaultEmbedding_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getFont", "LNSString;LNSString;ZFILHarmonyJavaAwtColor;", "LNSString;LNSString;ZFILHarmonyJavaAwtColor;Z", "LJavaUtilProperties;", "registerFamily", "LNSString;LNSString;LNSString;", "register", "LNSString;", "LNSString;LNSString;", "registerDirectory", "LNSString;Z", "isRegistered", &ComAowagieTextFontFactoryImp_TTFamilyOrder };
  static const J2ObjcClassInfo _ComAowagieTextFontFactoryImp = { "FontFactoryImp", "com.aowagie.text", ptrTable, methods, fields, 7, 0x0, 11, 5, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextFontFactoryImp;
}

+ (void)initialize {
  if (self == [ComAowagieTextFontFactoryImp class]) {
    ComAowagieTextFontFactoryImp_TTFamilyOrder = [IOSObjectArray newArrayWithObjects:(id[]){
#line 80
      @"3", @"1", @"1033",
#line 81
      @"3", @"0", @"1033",
#line 82
      @"1", @"0", @"0",
#line 83
      @"0", @"3", @"0" } count:12 type:NSString_class_()];
      J2OBJC_SET_INITIALIZED(ComAowagieTextFontFactoryImp)
    }
  }

@end


#line 96
void ComAowagieTextFontFactoryImp_initPackagePrivate(ComAowagieTextFontFactoryImp *self) {
  NSObject_init(self);
  self->trueTypeFonts_ = new_JavaUtilProperties_init();
  self->fontFamilies_ = new_JavaUtilHashtable_init();
  self->defaultEncoding_ =
#line 90
  ComAowagieTextPdfBaseFont_WINANSI;
  self->defaultEmbedding_ =
#line 93
  ComAowagieTextPdfBaseFont_NOT_EMBEDDED;
  
#line 97
  (void) [self->trueTypeFonts_ setPropertyWithNSString:[((NSString *) nil_chk(ComAowagieTextFontFactory_COURIER)) lowercaseString] withNSString:ComAowagieTextFontFactory_COURIER];
  (void) [self->trueTypeFonts_ setPropertyWithNSString:[((NSString *) nil_chk(ComAowagieTextFontFactory_COURIER_BOLD)) lowercaseString] withNSString:ComAowagieTextFontFactory_COURIER_BOLD];
  (void) [self->trueTypeFonts_ setPropertyWithNSString:[((NSString *) nil_chk(ComAowagieTextFontFactory_COURIER_OBLIQUE)) lowercaseString] withNSString:ComAowagieTextFontFactory_COURIER_OBLIQUE];
  (void) [self->trueTypeFonts_ setPropertyWithNSString:[((NSString *) nil_chk(ComAowagieTextFontFactory_COURIER_BOLDOBLIQUE)) lowercaseString] withNSString:ComAowagieTextFontFactory_COURIER_BOLDOBLIQUE];
  (void) [self->trueTypeFonts_ setPropertyWithNSString:[((NSString *) nil_chk(ComAowagieTextFontFactory_HELVETICA)) lowercaseString] withNSString:ComAowagieTextFontFactory_HELVETICA];
  (void) [self->trueTypeFonts_ setPropertyWithNSString:[((NSString *) nil_chk(ComAowagieTextFontFactory_HELVETICA_BOLD)) lowercaseString] withNSString:ComAowagieTextFontFactory_HELVETICA_BOLD];
  (void) [self->trueTypeFonts_ setPropertyWithNSString:[((NSString *) nil_chk(ComAowagieTextFontFactory_HELVETICA_OBLIQUE)) lowercaseString] withNSString:ComAowagieTextFontFactory_HELVETICA_OBLIQUE];
  (void) [self->trueTypeFonts_ setPropertyWithNSString:[((NSString *) nil_chk(ComAowagieTextFontFactory_HELVETICA_BOLDOBLIQUE)) lowercaseString] withNSString:ComAowagieTextFontFactory_HELVETICA_BOLDOBLIQUE];
  (void) [self->trueTypeFonts_ setPropertyWithNSString:[((NSString *) nil_chk(ComAowagieTextFontFactory_SYMBOL)) lowercaseString] withNSString:ComAowagieTextFontFactory_SYMBOL];
  (void) [self->trueTypeFonts_ setPropertyWithNSString:[((NSString *) nil_chk(ComAowagieTextFontFactory_TIMES_ROMAN)) lowercaseString] withNSString:ComAowagieTextFontFactory_TIMES_ROMAN];
  (void) [self->trueTypeFonts_ setPropertyWithNSString:[((NSString *) nil_chk(ComAowagieTextFontFactory_TIMES_BOLD)) lowercaseString] withNSString:ComAowagieTextFontFactory_TIMES_BOLD];
  (void) [self->trueTypeFonts_ setPropertyWithNSString:[((NSString *) nil_chk(ComAowagieTextFontFactory_TIMES_ITALIC)) lowercaseString] withNSString:ComAowagieTextFontFactory_TIMES_ITALIC];
  (void) [self->trueTypeFonts_ setPropertyWithNSString:[((NSString *) nil_chk(ComAowagieTextFontFactory_TIMES_BOLDITALIC)) lowercaseString] withNSString:ComAowagieTextFontFactory_TIMES_BOLDITALIC];
  (void) [self->trueTypeFonts_ setPropertyWithNSString:[((NSString *) nil_chk(ComAowagieTextFontFactory_ZAPFDINGBATS)) lowercaseString] withNSString:ComAowagieTextFontFactory_ZAPFDINGBATS];
  
#line 112
  JavaUtilArrayList *tmp;
  tmp = new_JavaUtilArrayList_init();
  [tmp addWithId:ComAowagieTextFontFactory_COURIER];
  [tmp addWithId:ComAowagieTextFontFactory_COURIER_BOLD];
  [tmp addWithId:ComAowagieTextFontFactory_COURIER_OBLIQUE];
  [tmp addWithId:ComAowagieTextFontFactory_COURIER_BOLDOBLIQUE];
  (void) [self->fontFamilies_ putWithId:[ComAowagieTextFontFactory_COURIER lowercaseString] withId:tmp];
  tmp = new_JavaUtilArrayList_init();
  [tmp addWithId:ComAowagieTextFontFactory_HELVETICA];
  [tmp addWithId:ComAowagieTextFontFactory_HELVETICA_BOLD];
  [tmp addWithId:ComAowagieTextFontFactory_HELVETICA_OBLIQUE];
  [tmp addWithId:ComAowagieTextFontFactory_HELVETICA_BOLDOBLIQUE];
  (void) [self->fontFamilies_ putWithId:[ComAowagieTextFontFactory_HELVETICA lowercaseString] withId:tmp];
  tmp = new_JavaUtilArrayList_init();
  [tmp addWithId:ComAowagieTextFontFactory_SYMBOL];
  (void) [self->fontFamilies_ putWithId:[ComAowagieTextFontFactory_SYMBOL lowercaseString] withId:tmp];
  tmp = new_JavaUtilArrayList_init();
  [tmp addWithId:ComAowagieTextFontFactory_TIMES_ROMAN];
  [tmp addWithId:ComAowagieTextFontFactory_TIMES_BOLD];
  [tmp addWithId:ComAowagieTextFontFactory_TIMES_ITALIC];
  [tmp addWithId:ComAowagieTextFontFactory_TIMES_BOLDITALIC];
  (void) [self->fontFamilies_ putWithId:[((NSString *) nil_chk(ComAowagieTextFontFactory_TIMES)) lowercaseString] withId:tmp];
  (void) [self->fontFamilies_ putWithId:[ComAowagieTextFontFactory_TIMES_ROMAN lowercaseString] withId:tmp];
  tmp = new_JavaUtilArrayList_init();
  [tmp addWithId:ComAowagieTextFontFactory_ZAPFDINGBATS];
  (void) [self->fontFamilies_ putWithId:[ComAowagieTextFontFactory_ZAPFDINGBATS lowercaseString] withId:tmp];
}


#line 96
ComAowagieTextFontFactoryImp *new_ComAowagieTextFontFactoryImp_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ComAowagieTextFontFactoryImp, initPackagePrivate)
}


#line 96
ComAowagieTextFontFactoryImp *create_ComAowagieTextFontFactoryImp_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ComAowagieTextFontFactoryImp, initPackagePrivate)
}


#line 170
ComAowagieTextFont *ComAowagieTextFontFactoryImp_getFontWithNSString_withNSString_withBoolean_withFloat_withInt_withHarmonyJavaAwtColor_withBoolean_(ComAowagieTextFontFactoryImp *self, NSString *fontname, NSString *encoding, jboolean embedded, jfloat size, jint style, HarmonyJavaAwtColor *color, jboolean cached) {
  if (fontname == nil) {
    return new_ComAowagieTextFont_initWithInt_withFloat_withInt_withHarmonyJavaAwtColor_(ComAowagieTextFont_UNDEFINED, size, style, color);
  }
  NSString *lowercasefontname = [fontname lowercaseString];
  JavaUtilArrayList *tmp = (JavaUtilArrayList *) cast_chk([((JavaUtilHashtable *) nil_chk(self->fontFamilies_)) getWithId:lowercasefontname], [JavaUtilArrayList class]);
  if (tmp != nil) {
    
#line 178
    jint s = style == ComAowagieTextFont_UNDEFINED ? ComAowagieTextFont_NORMAL : style;
    jint fs = ComAowagieTextFont_NORMAL;
    jboolean found = false;
    for (id<JavaUtilIterator> i = [tmp iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
      NSString *f = (NSString *) cast_chk([i next], [NSString class]);
      NSString *lcf = [((NSString *) nil_chk(f)) lowercaseString];
      fs = ComAowagieTextFont_NORMAL;
      if ([((NSString *) nil_chk([((NSString *) nil_chk(lcf)) lowercaseString])) java_indexOfString:@"bold"] != -1) {
        fs |= ComAowagieTextFont_BOLD;
      }
      if ([((NSString *) nil_chk([lcf lowercaseString])) java_indexOfString:@"italic"] != -1 || [((NSString *) nil_chk([lcf lowercaseString])) java_indexOfString:@"oblique"] != -1) {
        fs |= ComAowagieTextFont_ITALIC;
      }
      if ((s & ComAowagieTextFont_BOLDITALIC) == fs) {
        fontname = f;
        found = true;
        break;
      }
    }
    if (style != ComAowagieTextFont_UNDEFINED && found) {
      style &= ~fs;
    }
  }
  ComAowagieTextPdfBaseFont *basefont = nil;
  @try {
    @try {
      
#line 205
      basefont = ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_withByteArray_withByteArray_withBoolean_(fontname, encoding, embedded, cached, nil, nil, true);
    }
    @catch (ComAowagieTextDocumentException *de) {
    }
    if (basefont == nil) {
      
#line 211
      fontname = [((JavaUtilProperties *) nil_chk(self->trueTypeFonts_)) getPropertyWithNSString:[fontname lowercaseString]];
      
#line 213
      if (fontname == nil) {
        return new_ComAowagieTextFont_initWithInt_withFloat_withInt_withHarmonyJavaAwtColor_(ComAowagieTextFont_UNDEFINED, size, style, color);
      }
      
#line 217
      basefont = ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_withByteArray_withByteArray_(fontname, encoding, embedded, cached, nil, nil);
    }
  }
  @catch (ComAowagieTextDocumentException *de) {
    
#line 222
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(de);
  }
  @catch (JavaIoIOException *ioe) {
    
#line 226
    return new_ComAowagieTextFont_initWithInt_withFloat_withInt_withHarmonyJavaAwtColor_(ComAowagieTextFont_UNDEFINED, size, style, color);
  }
  @catch (JavaLangNullPointerException *npe) {
    
#line 230
    return new_ComAowagieTextFont_initWithInt_withFloat_withInt_withHarmonyJavaAwtColor_(ComAowagieTextFont_UNDEFINED, size, style, color);
  }
  return new_ComAowagieTextFont_initWithComAowagieTextPdfBaseFont_withFloat_withInt_withHarmonyJavaAwtColor_(basefont, size, style, color);
}


#line 340
void ComAowagieTextFontFactoryImp_registerFamilyWithNSString_withNSString_withNSString_(ComAowagieTextFontFactoryImp *self, NSString *familyName, NSString *fullName, NSString *path) {
  if (path != nil) {
    (void) [((JavaUtilProperties *) nil_chk(self->trueTypeFonts_)) setPropertyWithNSString:fullName withNSString:path];
  }
  JavaUtilArrayList *tmp = (JavaUtilArrayList *) cast_chk([((JavaUtilHashtable *) nil_chk(self->fontFamilies_)) getWithId:familyName], [JavaUtilArrayList class]);
  if (tmp == nil) {
    tmp = new_JavaUtilArrayList_init();
    [tmp addWithId:fullName];
    (void) [self->fontFamilies_ putWithId:familyName withId:tmp];
  }
  else {
    jint fullNameLength = [((NSString *) nil_chk(fullName)) java_length];
    jboolean inserted = false;
    for (jint j = 0; j < [tmp size]; ++j) {
      if ([((NSString *) nil_chk(((NSString *) cast_chk([tmp getWithInt:j], [NSString class])))) java_length] >= fullNameLength) {
        [tmp addWithInt:j withId:fullName];
        inserted = true;
        break;
      }
    }
    if (!inserted) {
      [tmp addWithId:fullName];
    }
  }
}


#line 372
void ComAowagieTextFontFactoryImp_register__WithNSString_(ComAowagieTextFontFactoryImp *self, NSString *path) {
  ComAowagieTextFontFactoryImp_register__WithNSString_withNSString_(self, path, nil);
}


#line 383
void ComAowagieTextFontFactoryImp_register__WithNSString_withNSString_(ComAowagieTextFontFactoryImp *self, NSString *path, NSString *alias) {
  @try {
    if ([((NSString *) nil_chk([((NSString *) nil_chk(path)) lowercaseString])) java_hasSuffix:@".ttf"] || [((NSString *) nil_chk([path lowercaseString])) java_hasSuffix:@".otf"] || [((NSString *) nil_chk([path lowercaseString])) java_indexOfString:@".ttc,"] > 0) {
      IOSObjectArray *allNames = ComAowagieTextPdfBaseFont_getAllFontNamesWithNSString_withNSString_withByteArray_(path, ComAowagieTextPdfBaseFont_WINANSI, nil);
      (void) [((JavaUtilProperties *) nil_chk(self->trueTypeFonts_)) setPropertyWithNSString:[((NSString *) nil_chk(((NSString *) cast_chk(IOSObjectArray_Get(nil_chk(allNames), 0), [NSString class])))) lowercaseString] withNSString:path];
      if (alias != nil) {
        (void) [self->trueTypeFonts_ setPropertyWithNSString:[alias lowercaseString] withNSString:path];
      }
      
#line 392
      IOSObjectArray *names = (IOSObjectArray *) cast_check(IOSObjectArray_Get(allNames, 2), IOSClass_arrayType(NSString_class_(), 2));
      {
        IOSObjectArray *a__ =
#line 393
        names;
        IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        IOSObjectArray * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          IOSObjectArray *name = *b__++;
          
#line 394
          (void) [self->trueTypeFonts_ setPropertyWithNSString:[((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(name), 3))) lowercaseString] withNSString:path];
        }
      }
      
#line 396
      NSString *fullName = nil;
      NSString *familyName = nil;
      names = (IOSObjectArray *) cast_check(IOSObjectArray_Get(allNames, 1), IOSClass_arrayType(NSString_class_(), 2));
      for (jint k = 0; k < ((IOSObjectArray *) nil_chk(ComAowagieTextFontFactoryImp_TTFamilyOrder))->size_; k += 3) {
        {
          IOSObjectArray *a__ =
#line 400
          names;
          IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          IOSObjectArray * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            IOSObjectArray *name = *b__++;
            
#line 401
            if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(ComAowagieTextFontFactoryImp_TTFamilyOrder), k))) isEqual:IOSObjectArray_Get(nil_chk(name), 0)] && [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(ComAowagieTextFontFactoryImp_TTFamilyOrder), k + 1))) isEqual:IOSObjectArray_Get(name, 1)] && [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(ComAowagieTextFontFactoryImp_TTFamilyOrder), k + 2))) isEqual:IOSObjectArray_Get(name, 2)]) {
              familyName = [((NSString *) nil_chk(IOSObjectArray_Get(name, 3))) lowercaseString];
              k = ((IOSObjectArray *) nil_chk(ComAowagieTextFontFactoryImp_TTFamilyOrder))->size_;
              break;
            }
          }
        }
      }
      
#line 408
      if (familyName != nil) {
        NSString *lastName = @"";
        names = (IOSObjectArray *) cast_check(IOSObjectArray_Get(allNames, 2), IOSClass_arrayType(NSString_class_(), 2));
        {
          IOSObjectArray *a__ =
#line 411
          names;
          IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          IOSObjectArray * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            IOSObjectArray *name = *b__++;
            
#line 412
            for (jint k = 0; k < ((IOSObjectArray *) nil_chk(ComAowagieTextFontFactoryImp_TTFamilyOrder))->size_; k += 3) {
              if ([((NSString *) nil_chk(IOSObjectArray_Get(ComAowagieTextFontFactoryImp_TTFamilyOrder, k))) isEqual:IOSObjectArray_Get(nil_chk(name), 0)] && [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(ComAowagieTextFontFactoryImp_TTFamilyOrder), k + 1))) isEqual:IOSObjectArray_Get(name, 1)] && [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(ComAowagieTextFontFactoryImp_TTFamilyOrder), k + 2))) isEqual:IOSObjectArray_Get(name, 2)]) {
                fullName = IOSObjectArray_Get(name, 3);
                if ([((NSString *) nil_chk(fullName)) isEqual:lastName]) {
                  continue;
                }
                lastName = fullName;
                ComAowagieTextFontFactoryImp_registerFamilyWithNSString_withNSString_withNSString_(self, familyName, fullName, nil);
                break;
              }
            }
          }
        }
      }
    }
    else
#line 426
    if ([((NSString *) nil_chk([path lowercaseString])) java_hasSuffix:@".ttc"]) {
      if (alias != nil) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"class FontFactory: You can't define an alias for a true type collection."];
      }
      IOSObjectArray *names = ComAowagieTextPdfBaseFont_enumerateTTCNamesWithNSString_(path);
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(names))->size_; i++) {
        ComAowagieTextFontFactoryImp_register__WithNSString_(self, JreStrcat("$CI", path, ',', i));
      }
    }
    else if ([((NSString *) nil_chk([path lowercaseString])) java_hasSuffix:@".afm"] || [((NSString *) nil_chk([path lowercaseString])) java_hasSuffix:@".pfm"]) {
      ComAowagieTextPdfBaseFont *bf = ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_(path, ComAowagieTextPdfBaseFont_CP1252, false);
      NSString *fullName = [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk([((ComAowagieTextPdfBaseFont *) nil_chk(bf)) getFullFontName]), 0)), 3))) lowercaseString];
      NSString *familyName = [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk([bf getFamilyFontName]), 0)), 3))) lowercaseString];
      NSString *psName = [((NSString *) nil_chk([bf getPostscriptFontName])) lowercaseString];
      ComAowagieTextFontFactoryImp_registerFamilyWithNSString_withNSString_withNSString_(self, familyName, fullName, nil);
      (void) [((JavaUtilProperties *) nil_chk(self->trueTypeFonts_)) setPropertyWithNSString:psName withNSString:path];
      (void) [self->trueTypeFonts_ setPropertyWithNSString:fullName withNSString:path];
    }
  }
  @catch (ComAowagieTextDocumentException *de) {
    
#line 447
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(de);
  }
  @catch (JavaIoIOException *ioe) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(ioe);
  }
}


#line 461
jint ComAowagieTextFontFactoryImp_registerDirectoryWithNSString_withBoolean_(ComAowagieTextFontFactoryImp *self, NSString *dir, jboolean scanSubdirectories) {
  jint count = 0;
  @try {
    JavaIoFile *file = new_JavaIoFile_initWithNSString_(dir);
    if (![file exists] || ![file isDirectory]) {
      return 0;
    }
    IOSObjectArray *files = [file list];
    if (files == nil) {
      return 0;
    }
    {
      IOSObjectArray *a__ =
#line 472
      files;
      NSString * const *b__ = a__->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *file2 = *b__++;
        
#line 473
        @try {
          file = new_JavaIoFile_initWithNSString_withNSString_(dir, file2);
          if ([file isDirectory]) {
            if (scanSubdirectories) {
              count += ComAowagieTextFontFactoryImp_registerDirectoryWithNSString_withBoolean_(self, [file getAbsolutePath], true);
            }
          }
          else {
            
#line 480
            NSString *name = [file getPath];
            NSString *suffix = [((NSString *) nil_chk(name)) java_length] < 4 ? nil : [((NSString *) nil_chk([name java_substring:[name java_length] - 4])) lowercaseString];
            if ([@".afm" isEqual:suffix] || [@".pfm" isEqual:suffix]) {
              
#line 484
              JavaIoFile *pfb = new_JavaIoFile_initWithNSString_(JreStrcat("$$", [name java_substring:0 endIndex:[name java_length] - 4], @".pfb"));
              if ([pfb exists]) {
                ComAowagieTextFontFactoryImp_register__WithNSString_withNSString_(self, name, nil);
                ++count;
              }
            }
            else
#line 489
            if ([@".ttf" isEqual:suffix] || [@".otf" isEqual:suffix] || [@".ttc" isEqual:suffix]) {
              ComAowagieTextFontFactoryImp_register__WithNSString_withNSString_(self, name, nil);
              ++count;
            }
          }
        }
        @catch (JavaLangException *e) {
        }
      }
    }
  }
  @catch (JavaLangException *e) {
  }
  
#line 503
  return count;
}


#line 530
jboolean ComAowagieTextFontFactoryImp_isRegisteredWithNSString_(ComAowagieTextFontFactoryImp *self, NSString *fontname) {
  return [((JavaUtilProperties *) nil_chk(self->trueTypeFonts_)) containsKeyWithId:[((NSString *) nil_chk(fontname)) lowercaseString]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextFontFactoryImp)
