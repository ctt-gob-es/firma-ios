//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/geom/Arc2D.java
//

#include "AffineTransform.h"
#include "Arc2D.h"
#include "Dimension2D.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Line2D.h"
#include "Messages.h"
#include "PathIterator.h"
#include "Point2D.h"
#include "Rectangle2D.h"
#include "RectangularShape.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/util/NoSuchElementException.h"

#if !__has_feature(objc_arc)
#error "Arc2D must be compiled with ARC (-fobjc-arc)"
#endif

@interface HarmonyJavaAwtGeomArc2D () {
 @public
  /*!
   @brief The closure type of the arc
   */
  jint type_;
}

@end

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/geom/Arc2D.java"


#line 26
@implementation HarmonyJavaAwtGeomArc2D


#line 491
- (instancetype)initWithInt:(jint)type {
  HarmonyJavaAwtGeomArc2D_initWithInt_(self, type);
  return self;
}


#line 495
- (HarmonyJavaAwtGeomRectangle2D *)makeBoundsWithDouble:(jdouble)x
                                             withDouble:(jdouble)y
                                             withDouble:(jdouble)width
                                             withDouble:(jdouble)height {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 497
- (jdouble)getAngleStart {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 499
- (jdouble)getAngleExtent {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 501
- (void)setAngleStartWithDouble:(jdouble)start {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 503
- (void)setAngleExtentWithDouble:(jdouble)extent {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 505
- (void)setArcWithDouble:(jdouble)x
              withDouble:(jdouble)y
              withDouble:(jdouble)width
              withDouble:(jdouble)height
              withDouble:(jdouble)start
              withDouble:(jdouble)extent
                 withInt:(jint)type {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 507
- (jint)getArcType {
  return type_;
}

- (void)setArcTypeWithInt:(jint)type {
  if (type != HarmonyJavaAwtGeomArc2D_OPEN && type != HarmonyJavaAwtGeomArc2D_CHORD && type != HarmonyJavaAwtGeomArc2D_PIE) {
    
#line 514
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(ComMessages_getStringWithNSString_withInt_(@"awt.205", type));
  }
  self->type_ = type;
}


#line 519
- (HarmonyJavaAwtGeomPoint2D *)getStartPoint {
  jdouble a = JavaLangMath_toRadiansWithDouble_([self getAngleStart]);
  return new_HarmonyJavaAwtGeomPoint2D_Double_initWithDouble_withDouble_([self getX] + (1.0 + JavaLangMath_cosWithDouble_(a)) * [self getWidth] / 2.0, [self getY] + (1.0 - JavaLangMath_sinWithDouble_(a)) *
#line 522
  [self getHeight] / 2.0);
}


#line 525
- (HarmonyJavaAwtGeomPoint2D *)getEndPoint {
  jdouble a = JavaLangMath_toRadiansWithDouble_([self getAngleStart] + [self getAngleExtent]);
  return new_HarmonyJavaAwtGeomPoint2D_Double_initWithDouble_withDouble_([self getX] + (1.0 + JavaLangMath_cosWithDouble_(a)) * [self getWidth] / 2.0, [self getY] + (1.0 - JavaLangMath_sinWithDouble_(a)) *
#line 528
  [self getHeight] / 2.0);
}


#line 531
- (HarmonyJavaAwtGeomRectangle2D *)getBounds2D {
  if ([self isEmpty]) {
    return [self makeBoundsWithDouble:[self getX] withDouble:[self getY] withDouble:[self getWidth] withDouble:[self getHeight]];
  }
  jdouble rx1 = [self getX];
  jdouble ry1 = [self getY];
  jdouble rx2 = rx1 + [self getWidth];
  jdouble ry2 = ry1 + [self getHeight];
  
#line 540
  HarmonyJavaAwtGeomPoint2D *p1 = [self getStartPoint];
  HarmonyJavaAwtGeomPoint2D *p2 = [self getEndPoint];
  
#line 543
  jdouble bx1 = [self containsAngleWithDouble:180.0] ? rx1 : JavaLangMath_minWithDouble_withDouble_([((HarmonyJavaAwtGeomPoint2D *) nil_chk(p1)) getX], [((HarmonyJavaAwtGeomPoint2D *) nil_chk(p2)) getX]);
  jdouble by1 = [self containsAngleWithDouble:90.0] ? ry1 : JavaLangMath_minWithDouble_withDouble_([((HarmonyJavaAwtGeomPoint2D *) nil_chk(p1)) getY], [((HarmonyJavaAwtGeomPoint2D *) nil_chk(p2)) getY]);
  jdouble bx2 = [self containsAngleWithDouble:0.0] ? rx2 : JavaLangMath_maxWithDouble_withDouble_([((HarmonyJavaAwtGeomPoint2D *) nil_chk(p1)) getX], [((HarmonyJavaAwtGeomPoint2D *) nil_chk(p2)) getX]);
  jdouble by2 = [self containsAngleWithDouble:270.0] ? ry2 : JavaLangMath_maxWithDouble_withDouble_([((HarmonyJavaAwtGeomPoint2D *) nil_chk(p1)) getY], [((HarmonyJavaAwtGeomPoint2D *) nil_chk(p2)) getY]);
  
#line 548
  if (type_ == HarmonyJavaAwtGeomArc2D_PIE) {
    jdouble cx = [self getCenterX];
    jdouble cy = [self getCenterY];
    bx1 = JavaLangMath_minWithDouble_withDouble_(bx1, cx);
    by1 = JavaLangMath_minWithDouble_withDouble_(by1, cy);
    bx2 = JavaLangMath_maxWithDouble_withDouble_(bx2, cx);
    by2 = JavaLangMath_maxWithDouble_withDouble_(by2, cy);
  }
  return [self makeBoundsWithDouble:bx1 withDouble:by1 withDouble:bx2 - bx1 withDouble:by2 - by1];
}


#line 559
- (void)setFrameWithDouble:(jdouble)x
                withDouble:(jdouble)y
                withDouble:(jdouble)width
                withDouble:(jdouble)height {
  
#line 561
  [self setArcWithDouble:x withDouble:y withDouble:width withDouble:height withDouble:[self getAngleStart] withDouble:[self getAngleExtent] withInt:type_];
}


#line 564
- (void)setArcWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)point
          withHarmonyJavaAwtGeomDimension2D:(HarmonyJavaAwtGeomDimension2D *)size
                                 withDouble:(jdouble)start
                                 withDouble:(jdouble)extent
                                    withInt:(jint)type {
  
#line 565
  [self setArcWithDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(point)) getX] withDouble:[point getY] withDouble:[((HarmonyJavaAwtGeomDimension2D *) nil_chk(size)) getWidth] withDouble:[size getHeight] withDouble:start withDouble:extent withInt:type];
}


#line 568
- (void)setArcWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)rect
                                     withDouble:(jdouble)start
                                     withDouble:(jdouble)extent
                                        withInt:(jint)type {
  
#line 569
  [self setArcWithDouble:[((HarmonyJavaAwtGeomRectangle2D *) nil_chk(rect)) getX] withDouble:[rect getY] withDouble:[rect getWidth] withDouble:[rect getHeight] withDouble:start withDouble:extent withInt:type];
}


#line 572
- (void)setArcWithHarmonyJavaAwtGeomArc2D:(HarmonyJavaAwtGeomArc2D *)arc {
  [self setArcWithDouble:[((HarmonyJavaAwtGeomArc2D *) nil_chk(arc)) getX] withDouble:[arc getY] withDouble:[arc getWidth] withDouble:[arc getHeight] withDouble:[arc getAngleStart] withDouble:[arc getAngleExtent] withInt:[arc getArcType]];
}


#line 577
- (void)setArcByCenterWithDouble:(jdouble)x
                      withDouble:(jdouble)y
                      withDouble:(jdouble)radius
                      withDouble:(jdouble)start
                      withDouble:(jdouble)extent
                         withInt:(jint)type {
  
#line 578
  [self setArcWithDouble:x - radius withDouble:y - radius withDouble:radius * 2.0 withDouble:radius * 2.0 withDouble:start withDouble:extent withInt:type];
}


#line 581
- (void)setArcByTangentWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)p1
                       withHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)p2
                       withHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)p3
                                          withDouble:(jdouble)radius {
  
#line 584
  jdouble a1 = -JavaLangMath_atan2WithDouble_withDouble_([((HarmonyJavaAwtGeomPoint2D *) nil_chk(p1)) getY] - [((HarmonyJavaAwtGeomPoint2D *) nil_chk(p2)) getY], [p1 getX] - [p2 getX]);
  jdouble a2 = -JavaLangMath_atan2WithDouble_withDouble_([((HarmonyJavaAwtGeomPoint2D *) nil_chk(p3)) getY] - [p2 getY], [p3 getX] - [p2 getX]);
  jdouble am = (a1 + a2) / 2.0;
  jdouble ah = a1 - am;
  jdouble d = radius / JavaLangMath_absWithDouble_(JavaLangMath_sinWithDouble_(ah));
  jdouble x = [p2 getX] + d * JavaLangMath_cosWithDouble_(am);
  jdouble y = [p2 getY] - d * JavaLangMath_sinWithDouble_(am);
  ah = ah >= 0.0 ? JavaLangMath_PI * 1.5 - ah : JavaLangMath_PI * 0.5 - ah;
  a1 = [self getNormAngleWithDouble:JavaLangMath_toDegreesWithDouble_(am - ah)];
  a2 = [self getNormAngleWithDouble:JavaLangMath_toDegreesWithDouble_(am + ah)];
  jdouble delta = a2 - a1;
  if (delta <= 0.0) {
    JrePlusAssignDoubleD(&delta, 360.0);
  }
  [self setArcByCenterWithDouble:x withDouble:y withDouble:radius withDouble:a1 withDouble:delta withInt:type_];
}


#line 601
- (void)setAngleStartWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)point {
  jdouble angle = JavaLangMath_atan2WithDouble_withDouble_([((HarmonyJavaAwtGeomPoint2D *) nil_chk(point)) getY] - [self getCenterY], [point getX] - [self getCenterX]);
  [self setAngleStartWithDouble:[self getNormAngleWithDouble:-JavaLangMath_toDegreesWithDouble_(angle)]];
}

- (void)setAnglesWithDouble:(jdouble)x1
                 withDouble:(jdouble)y1
                 withDouble:(jdouble)x2
                 withDouble:(jdouble)y2 {
  
#line 607
  jdouble cx = [self getCenterX];
  jdouble cy = [self getCenterY];
  jdouble a1 = [self getNormAngleWithDouble:-JavaLangMath_toDegreesWithDouble_(JavaLangMath_atan2WithDouble_withDouble_(y1 - cy, x1 - cx))];
  jdouble a2 = [self getNormAngleWithDouble:-JavaLangMath_toDegreesWithDouble_(JavaLangMath_atan2WithDouble_withDouble_(y2 - cy, x2 - cx))];
  JreMinusAssignDoubleD(&a2, a1);
  if (a2 <= 0.0) {
    JrePlusAssignDoubleD(&a2, 360.0);
  }
  [self setAngleStartWithDouble:a1];
  [self setAngleExtentWithDouble:a2];
}


#line 619
- (void)setAnglesWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)p1
                 withHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)p2 {
  
#line 620
  [self setAnglesWithDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(p1)) getX] withDouble:[p1 getY] withDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(p2)) getX] withDouble:[p2 getY]];
}


#line 630
- (jdouble)getNormAngleWithDouble:(jdouble)angle {
  jdouble n = JavaLangMath_floorWithDouble_(angle / 360.0);
  return angle - n * 360.0;
}

- (jboolean)containsAngleWithDouble:(jdouble)angle {
  jdouble extent = [self getAngleExtent];
  if (extent >= 360.0) {
    return true;
  }
  angle = [self getNormAngleWithDouble:angle];
  jdouble a1 = [self getNormAngleWithDouble:[self getAngleStart]];
  jdouble a2 = a1 + extent;
  if (a2 > 360.0) {
    return angle >= a1 || angle <= a2 - 360.0;
  }
  if (a2 < 0.0) {
    return angle >= a2 + 360.0 || angle <= a1;
  }
  return extent > 0.0 ? a1 <= angle && angle <= a2 : a2 <= angle && angle <= a1;
}

- (jboolean)containsWithDouble:(jdouble)px
                    withDouble:(jdouble)py {
  jdouble nx = (px - [self getX]) / [self getWidth] - 0.5;
  jdouble ny = (py - [self getY]) / [self getHeight] - 0.5;
  
#line 657
  if ((nx * nx + ny * ny) > 0.25) {
    return false;
  }
  
#line 661
  jdouble extent = [self getAngleExtent];
  jdouble absExtent = JavaLangMath_absWithDouble_(extent);
  if (absExtent >= 360.0) {
    return true;
  }
  
#line 667
  jboolean containsAngle = [self containsAngleWithDouble:JavaLangMath_toDegreesWithDouble_(-JavaLangMath_atan2WithDouble_withDouble_(ny, nx))];
  if (type_ == HarmonyJavaAwtGeomArc2D_PIE) {
    return containsAngle;
  }
  if (absExtent <= 180.0 && !containsAngle) {
    return false;
  }
  
#line 675
  HarmonyJavaAwtGeomLine2D *l = new_HarmonyJavaAwtGeomLine2D_Double_initWithHarmonyJavaAwtGeomPoint2D_withHarmonyJavaAwtGeomPoint2D_([self getStartPoint], [self getEndPoint]);
  jint ccw1 = [l relativeCCWWithDouble:px withDouble:py];
  jint ccw2 = [l relativeCCWWithDouble:[self getCenterX] withDouble:[self getCenterY]];
  return ccw1 == 0 || ccw2 == 0 || ((ccw1 + ccw2) == 0 ^ absExtent > 180.0);
}


#line 681
- (jboolean)containsWithDouble:(jdouble)rx
                    withDouble:(jdouble)ry
                    withDouble:(jdouble)rw
                    withDouble:(jdouble)rh {
  
#line 683
  if (!([self containsWithDouble:rx withDouble:ry] && [self containsWithDouble:rx + rw withDouble:ry] && [self containsWithDouble:rx + rw withDouble:ry + rh] && [self containsWithDouble:rx withDouble:ry + rh])) {
    return false;
  }
  
#line 687
  jdouble absExtent = JavaLangMath_absWithDouble_([self getAngleExtent]);
  if (type_ != HarmonyJavaAwtGeomArc2D_PIE || absExtent <= 180.0 || absExtent >= 360.0) {
    return true;
  }
  
#line 692
  HarmonyJavaAwtGeomRectangle2D *r = new_HarmonyJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_(rx, ry, rw, rh);
  
#line 694
  jdouble cx = [self getCenterX];
  jdouble cy = [self getCenterY];
  if ([r containsWithDouble:cx withDouble:cy]) {
    return false;
  }
  
#line 700
  HarmonyJavaAwtGeomPoint2D *p1 = [self getStartPoint];
  HarmonyJavaAwtGeomPoint2D *p2 = [self getEndPoint];
  
#line 703
  return ![r intersectsLineWithDouble:cx withDouble:cy withDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(p1)) getX] withDouble:[p1 getY]] && ![r intersectsLineWithDouble:cx withDouble:cy withDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(p2)) getX] withDouble:[p2 getY]];
}


#line 706
- (jboolean)containsWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)rect {
  
#line 708
  return [self containsWithDouble:[((HarmonyJavaAwtGeomRectangle2D *) nil_chk(rect)) getX] withDouble:[rect getY] withDouble:[rect getWidth] withDouble:[rect getHeight]];
}


#line 711
- (jboolean)intersectsWithDouble:(jdouble)rx
                      withDouble:(jdouble)ry
                      withDouble:(jdouble)rw
                      withDouble:(jdouble)rh {
  
#line 713
  if ([self isEmpty] || rw <= 0.0 || rh <= 0.0) {
    return false;
  }
  
#line 718
  if ([self containsWithDouble:rx withDouble:ry] || [self containsWithDouble:rx + rw withDouble:ry] || [self containsWithDouble:rx withDouble:ry + rh] || [self containsWithDouble:rx + rw withDouble:ry + rh]) {
    return true;
  }
  
#line 722
  jdouble cx = [self getCenterX];
  jdouble cy = [self getCenterY];
  HarmonyJavaAwtGeomPoint2D *p1 = [self getStartPoint];
  HarmonyJavaAwtGeomPoint2D *p2 = [self getEndPoint];
  HarmonyJavaAwtGeomRectangle2D *r = new_HarmonyJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_(rx, ry, rw, rh);
  
#line 729
  if ([r containsWithHarmonyJavaAwtGeomPoint2D:p1] || [r containsWithHarmonyJavaAwtGeomPoint2D:p2] || (type_ == HarmonyJavaAwtGeomArc2D_PIE && [r containsWithDouble:cx withDouble:cy])) {
    return true;
  }
  
#line 733
  if (type_ == HarmonyJavaAwtGeomArc2D_PIE) {
    if ([r intersectsLineWithDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(p1)) getX] withDouble:[p1 getY] withDouble:cx withDouble:cy] || [r intersectsLineWithDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(p2)) getX] withDouble:[p2 getY] withDouble:cx withDouble:cy]) {
      return true;
    }
  }
  else {
    
#line 738
    if ([r intersectsLineWithDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(p1)) getX] withDouble:[p1 getY] withDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(p2)) getX] withDouble:[p2 getY]]) {
      return true;
    }
  }
  
#line 744
  jdouble nx = cx < rx ? rx : (cx > rx + rw ? rx + rw : cx);
  jdouble ny = cy < ry ? ry : (cy > ry + rh ? ry + rh : cy);
  return [self containsWithDouble:nx withDouble:ny];
}


#line 749
- (id<HarmonyJavaAwtGeomPathIterator>)getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)at {
  return new_HarmonyJavaAwtGeomArc2D_Iterator_initWithHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomAffineTransform_(self, self, at);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x404, 1, 2, -1, -1, -1, -1 },
    { NULL, "D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPoint2D;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPoint2D;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "D", 0x0, 20, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 24, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 2, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPathIterator;", 0x1, 26, 27, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(makeBoundsWithDouble:withDouble:withDouble:withDouble:);
  methods[2].selector = @selector(getAngleStart);
  methods[3].selector = @selector(getAngleExtent);
  methods[4].selector = @selector(setAngleStartWithDouble:);
  methods[5].selector = @selector(setAngleExtentWithDouble:);
  methods[6].selector = @selector(setArcWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:);
  methods[7].selector = @selector(getArcType);
  methods[8].selector = @selector(setArcTypeWithInt:);
  methods[9].selector = @selector(getStartPoint);
  methods[10].selector = @selector(getEndPoint);
  methods[11].selector = @selector(getBounds2D);
  methods[12].selector = @selector(setFrameWithDouble:withDouble:withDouble:withDouble:);
  methods[13].selector = @selector(setArcWithHarmonyJavaAwtGeomPoint2D:withHarmonyJavaAwtGeomDimension2D:withDouble:withDouble:withInt:);
  methods[14].selector = @selector(setArcWithHarmonyJavaAwtGeomRectangle2D:withDouble:withDouble:withInt:);
  methods[15].selector = @selector(setArcWithHarmonyJavaAwtGeomArc2D:);
  methods[16].selector = @selector(setArcByCenterWithDouble:withDouble:withDouble:withDouble:withDouble:withInt:);
  methods[17].selector = @selector(setArcByTangentWithHarmonyJavaAwtGeomPoint2D:withHarmonyJavaAwtGeomPoint2D:withHarmonyJavaAwtGeomPoint2D:withDouble:);
  methods[18].selector = @selector(setAngleStartWithHarmonyJavaAwtGeomPoint2D:);
  methods[19].selector = @selector(setAnglesWithDouble:withDouble:withDouble:withDouble:);
  methods[20].selector = @selector(setAnglesWithHarmonyJavaAwtGeomPoint2D:withHarmonyJavaAwtGeomPoint2D:);
  methods[21].selector = @selector(getNormAngleWithDouble:);
  methods[22].selector = @selector(containsAngleWithDouble:);
  methods[23].selector = @selector(containsWithDouble:withDouble:);
  methods[24].selector = @selector(containsWithDouble:withDouble:withDouble:withDouble:);
  methods[25].selector = @selector(containsWithHarmonyJavaAwtGeomRectangle2D:);
  methods[26].selector = @selector(intersectsWithDouble:withDouble:withDouble:withDouble:);
  methods[27].selector = @selector(getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OPEN", "I", .constantValue.asInt = HarmonyJavaAwtGeomArc2D_OPEN, 0x19, -1, -1, -1, -1 },
    { "CHORD", "I", .constantValue.asInt = HarmonyJavaAwtGeomArc2D_CHORD, 0x19, -1, -1, -1, -1 },
    { "PIE", "I", .constantValue.asInt = HarmonyJavaAwtGeomArc2D_PIE, 0x19, -1, -1, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "makeBounds", "DDDD", "setAngleStart", "D", "setAngleExtent", "setArc", "DDDDDDI", "setArcType", "setFrame", "LHarmonyJavaAwtGeomPoint2D;LHarmonyJavaAwtGeomDimension2D;DDI", "LHarmonyJavaAwtGeomRectangle2D;DDI", "LHarmonyJavaAwtGeomArc2D;", "setArcByCenter", "DDDDDI", "setArcByTangent", "LHarmonyJavaAwtGeomPoint2D;LHarmonyJavaAwtGeomPoint2D;LHarmonyJavaAwtGeomPoint2D;D", "LHarmonyJavaAwtGeomPoint2D;", "setAngles", "LHarmonyJavaAwtGeomPoint2D;LHarmonyJavaAwtGeomPoint2D;", "getNormAngle", "containsAngle", "contains", "DD", "LHarmonyJavaAwtGeomRectangle2D;", "intersects", "getPathIterator", "LHarmonyJavaAwtGeomAffineTransform;", "LHarmonyJavaAwtGeomArc2D_Float;LHarmonyJavaAwtGeomArc2D_Double;LHarmonyJavaAwtGeomArc2D_Iterator;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomArc2D = { "Arc2D", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x401, 28, 4, -1, 28, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomArc2D;
}

@end


#line 491
void HarmonyJavaAwtGeomArc2D_initWithInt_(HarmonyJavaAwtGeomArc2D *self, jint type) {
  HarmonyJavaAwtGeomRectangularShape_init(self);
  
#line 492
  [self setArcTypeWithInt:type];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomArc2D)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/geom/Arc2D.java"


#line 32
@implementation HarmonyJavaAwtGeomArc2D_Float

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 41
- (instancetype)init {
  HarmonyJavaAwtGeomArc2D_Float_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 45
- (instancetype)initWithInt:(jint)type {
  HarmonyJavaAwtGeomArc2D_Float_initWithInt_(self, type);
  return self;
}


#line 49
- (instancetype)initWithFloat:(jfloat)x
                    withFloat:(jfloat)y
                    withFloat:(jfloat)width
                    withFloat:(jfloat)height
                    withFloat:(jfloat)start
                    withFloat:(jfloat)extent
                      withInt:(jint)type {
  HarmonyJavaAwtGeomArc2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withInt_(self, x, y, width, height, start, extent, type);
  return self;
}


#line 59
- (instancetype)initWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)bounds
                                            withFloat:(jfloat)start
                                            withFloat:(jfloat)extent
                                              withInt:(jint)type {
  HarmonyJavaAwtGeomArc2D_Float_initWithHarmonyJavaAwtGeomRectangle2D_withFloat_withFloat_withInt_(self, bounds, start, extent, type);
  return self;
}


#line 69
- (jdouble)getX {
  
#line 71
  return x_;
}


#line 74
- (jdouble)getY {
  
#line 76
  return y_;
}


#line 79
- (jdouble)getWidth {
  
#line 81
  return width_;
}


#line 84
- (jdouble)getHeight {
  
#line 86
  return height_;
}


#line 89
- (jdouble)getAngleStart {
  
#line 91
  return start_;
}


#line 94
- (jdouble)getAngleExtent {
  
#line 96
  return extent_;
}


#line 99
- (jboolean)isEmpty {
  
#line 101
  return width_ <= 0.0f || height_ <= 0.0f;
}


#line 104
- (void)setArcWithDouble:(jdouble)x
              withDouble:(jdouble)y
              withDouble:(jdouble)width
              withDouble:(jdouble)height
              withDouble:(jdouble)start
              withDouble:(jdouble)extent
                 withInt:(jint)type {
  
#line 106
  [self setArcTypeWithInt:type];
  self->x_ = (jfloat) x;
  self->y_ = (jfloat) y;
  self->width_ = (jfloat) width;
  self->height_ = (jfloat) height;
  self->start_ = (jfloat) start;
  self->extent_ = (jfloat) extent;
}


#line 115
- (void)setAngleStartWithDouble:(jdouble)start {
  
#line 117
  self->start_ = (jfloat) start;
}


#line 120
- (void)setAngleExtentWithDouble:(jdouble)extent {
  
#line 122
  self->extent_ = (jfloat) extent;
}


#line 125
- (HarmonyJavaAwtGeomRectangle2D *)makeBoundsWithDouble:(jdouble)x
                                             withDouble:(jdouble)y
                                             withDouble:(jdouble)width
                                             withDouble:(jdouble)height {
  
#line 127
  return new_HarmonyJavaAwtGeomRectangle2D_Float_initWithFloat_withFloat_withFloat_withFloat_((jfloat) x, (jfloat) y, (jfloat) width, (jfloat) height);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x4, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withInt:);
  methods[3].selector = @selector(initWithHarmonyJavaAwtGeomRectangle2D:withFloat:withFloat:withInt:);
  methods[4].selector = @selector(getX);
  methods[5].selector = @selector(getY);
  methods[6].selector = @selector(getWidth);
  methods[7].selector = @selector(getHeight);
  methods[8].selector = @selector(getAngleStart);
  methods[9].selector = @selector(getAngleExtent);
  methods[10].selector = @selector(isEmpty);
  methods[11].selector = @selector(setArcWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:);
  methods[12].selector = @selector(setAngleStartWithDouble:);
  methods[13].selector = @selector(setAngleExtentWithDouble:);
  methods[14].selector = @selector(makeBoundsWithDouble:withDouble:withDouble:withDouble:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "x_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "y_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "width_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "height_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "start_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "extent_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "FFFFFFI", "LHarmonyJavaAwtGeomRectangle2D;FFI", "setArc", "DDDDDDI", "setAngleStart", "D", "setAngleExtent", "makeBounds", "DDDD", "LHarmonyJavaAwtGeomArc2D;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomArc2D_Float = { "Float", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x9, 15, 6, 10, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomArc2D_Float;
}

@end


#line 41
void HarmonyJavaAwtGeomArc2D_Float_init(HarmonyJavaAwtGeomArc2D_Float *self) {
  HarmonyJavaAwtGeomArc2D_initWithInt_(self, HarmonyJavaAwtGeomArc2D_OPEN);
}


#line 41
HarmonyJavaAwtGeomArc2D_Float *new_HarmonyJavaAwtGeomArc2D_Float_init() {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomArc2D_Float, init)
}


#line 41
HarmonyJavaAwtGeomArc2D_Float *create_HarmonyJavaAwtGeomArc2D_Float_init() {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomArc2D_Float, init)
}

void HarmonyJavaAwtGeomArc2D_Float_initWithInt_(HarmonyJavaAwtGeomArc2D_Float *self, jint type) {
  HarmonyJavaAwtGeomArc2D_initWithInt_(self, type);
}


#line 45
HarmonyJavaAwtGeomArc2D_Float *new_HarmonyJavaAwtGeomArc2D_Float_initWithInt_(jint type) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomArc2D_Float, initWithInt_, type)
}


#line 45
HarmonyJavaAwtGeomArc2D_Float *create_HarmonyJavaAwtGeomArc2D_Float_initWithInt_(jint type) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomArc2D_Float, initWithInt_, type)
}

void HarmonyJavaAwtGeomArc2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withInt_(HarmonyJavaAwtGeomArc2D_Float *self, jfloat x, jfloat y, jfloat width, jfloat height, jfloat start, jfloat extent, jint type) {
  HarmonyJavaAwtGeomArc2D_initWithInt_(self, type);
  self->x_ = x;
  self->y_ = y;
  self->width_ = width;
  self->height_ = height;
  self->start_ = start;
  self->extent_ = extent;
}


#line 49
HarmonyJavaAwtGeomArc2D_Float *new_HarmonyJavaAwtGeomArc2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withInt_(jfloat x, jfloat y, jfloat width, jfloat height, jfloat start, jfloat extent, jint type) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomArc2D_Float, initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withInt_, x, y, width, height, start, extent, type)
}


#line 49
HarmonyJavaAwtGeomArc2D_Float *create_HarmonyJavaAwtGeomArc2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withInt_(jfloat x, jfloat y, jfloat width, jfloat height, jfloat start, jfloat extent, jint type) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomArc2D_Float, initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withInt_, x, y, width, height, start, extent, type)
}


#line 59
void HarmonyJavaAwtGeomArc2D_Float_initWithHarmonyJavaAwtGeomRectangle2D_withFloat_withFloat_withInt_(HarmonyJavaAwtGeomArc2D_Float *self, HarmonyJavaAwtGeomRectangle2D *bounds, jfloat start, jfloat extent, jint type) {
  HarmonyJavaAwtGeomArc2D_initWithInt_(self, type);
  self->x_ = (jfloat) [((HarmonyJavaAwtGeomRectangle2D *) nil_chk(bounds)) getX];
  self->y_ = (jfloat) [bounds getY];
  self->width_ = (jfloat) [bounds getWidth];
  self->height_ = (jfloat) [bounds getHeight];
  self->start_ = start;
  self->extent_ = extent;
}


#line 59
HarmonyJavaAwtGeomArc2D_Float *new_HarmonyJavaAwtGeomArc2D_Float_initWithHarmonyJavaAwtGeomRectangle2D_withFloat_withFloat_withInt_(HarmonyJavaAwtGeomRectangle2D *bounds, jfloat start, jfloat extent, jint type) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomArc2D_Float, initWithHarmonyJavaAwtGeomRectangle2D_withFloat_withFloat_withInt_, bounds, start, extent, type)
}


#line 59
HarmonyJavaAwtGeomArc2D_Float *create_HarmonyJavaAwtGeomArc2D_Float_initWithHarmonyJavaAwtGeomRectangle2D_withFloat_withFloat_withInt_(HarmonyJavaAwtGeomRectangle2D *bounds, jfloat start, jfloat extent, jint type) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomArc2D_Float, initWithHarmonyJavaAwtGeomRectangle2D_withFloat_withFloat_withInt_, bounds, start, extent, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomArc2D_Float)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/geom/Arc2D.java"


#line 132
@implementation HarmonyJavaAwtGeomArc2D_Double

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 141
- (instancetype)init {
  HarmonyJavaAwtGeomArc2D_Double_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 145
- (instancetype)initWithInt:(jint)type {
  HarmonyJavaAwtGeomArc2D_Double_initWithInt_(self, type);
  return self;
}


#line 149
- (instancetype)initWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)width
                    withDouble:(jdouble)height
                    withDouble:(jdouble)start
                    withDouble:(jdouble)extent
                       withInt:(jint)type {
  HarmonyJavaAwtGeomArc2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(self, x, y, width, height, start, extent, type);
  return self;
}


#line 159
- (instancetype)initWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)bounds
                                           withDouble:(jdouble)start
                                           withDouble:(jdouble)extent
                                              withInt:(jint)type {
  HarmonyJavaAwtGeomArc2D_Double_initWithHarmonyJavaAwtGeomRectangle2D_withDouble_withDouble_withInt_(self, bounds, start, extent, type);
  return self;
}


#line 169
- (jdouble)getX {
  
#line 171
  return x_;
}


#line 174
- (jdouble)getY {
  
#line 176
  return y_;
}


#line 179
- (jdouble)getWidth {
  
#line 181
  return width_;
}


#line 184
- (jdouble)getHeight {
  
#line 186
  return height_;
}


#line 189
- (jdouble)getAngleStart {
  
#line 191
  return start_;
}


#line 194
- (jdouble)getAngleExtent {
  
#line 196
  return extent_;
}


#line 199
- (jboolean)isEmpty {
  
#line 201
  return width_ <= 0.0 || height_ <= 0.0;
}


#line 204
- (void)setArcWithDouble:(jdouble)x
              withDouble:(jdouble)y
              withDouble:(jdouble)width
              withDouble:(jdouble)height
              withDouble:(jdouble)start
              withDouble:(jdouble)extent
                 withInt:(jint)type {
  
#line 206
  [self setArcTypeWithInt:type];
  self->x_ = x;
  self->y_ = y;
  self->width_ = width;
  self->height_ = height;
  self->start_ = start;
  self->extent_ = extent;
}


#line 215
- (void)setAngleStartWithDouble:(jdouble)start {
  
#line 217
  self->start_ = start;
}


#line 220
- (void)setAngleExtentWithDouble:(jdouble)extent {
  
#line 222
  self->extent_ = extent;
}


#line 225
- (HarmonyJavaAwtGeomRectangle2D *)makeBoundsWithDouble:(jdouble)x
                                             withDouble:(jdouble)y
                                             withDouble:(jdouble)width
                                             withDouble:(jdouble)height {
  
#line 227
  return new_HarmonyJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_(x, y, width, height);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x4, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:);
  methods[3].selector = @selector(initWithHarmonyJavaAwtGeomRectangle2D:withDouble:withDouble:withInt:);
  methods[4].selector = @selector(getX);
  methods[5].selector = @selector(getY);
  methods[6].selector = @selector(getWidth);
  methods[7].selector = @selector(getHeight);
  methods[8].selector = @selector(getAngleStart);
  methods[9].selector = @selector(getAngleExtent);
  methods[10].selector = @selector(isEmpty);
  methods[11].selector = @selector(setArcWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withInt:);
  methods[12].selector = @selector(setAngleStartWithDouble:);
  methods[13].selector = @selector(setAngleExtentWithDouble:);
  methods[14].selector = @selector(makeBoundsWithDouble:withDouble:withDouble:withDouble:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "x_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "y_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "width_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "height_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "start_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "extent_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "DDDDDDI", "LHarmonyJavaAwtGeomRectangle2D;DDI", "setArc", "setAngleStart", "D", "setAngleExtent", "makeBounds", "DDDD", "LHarmonyJavaAwtGeomArc2D;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomArc2D_Double = { "Double", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x9, 15, 6, 9, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomArc2D_Double;
}

@end


#line 141
void HarmonyJavaAwtGeomArc2D_Double_init(HarmonyJavaAwtGeomArc2D_Double *self) {
  HarmonyJavaAwtGeomArc2D_initWithInt_(self, HarmonyJavaAwtGeomArc2D_OPEN);
}


#line 141
HarmonyJavaAwtGeomArc2D_Double *new_HarmonyJavaAwtGeomArc2D_Double_init() {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomArc2D_Double, init)
}


#line 141
HarmonyJavaAwtGeomArc2D_Double *create_HarmonyJavaAwtGeomArc2D_Double_init() {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomArc2D_Double, init)
}

void HarmonyJavaAwtGeomArc2D_Double_initWithInt_(HarmonyJavaAwtGeomArc2D_Double *self, jint type) {
  HarmonyJavaAwtGeomArc2D_initWithInt_(self, type);
}


#line 145
HarmonyJavaAwtGeomArc2D_Double *new_HarmonyJavaAwtGeomArc2D_Double_initWithInt_(jint type) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomArc2D_Double, initWithInt_, type)
}


#line 145
HarmonyJavaAwtGeomArc2D_Double *create_HarmonyJavaAwtGeomArc2D_Double_initWithInt_(jint type) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomArc2D_Double, initWithInt_, type)
}

void HarmonyJavaAwtGeomArc2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(HarmonyJavaAwtGeomArc2D_Double *self, jdouble x, jdouble y, jdouble width, jdouble height, jdouble start, jdouble extent, jint type) {
  HarmonyJavaAwtGeomArc2D_initWithInt_(self, type);
  self->x_ = x;
  self->y_ = y;
  self->width_ = width;
  self->height_ = height;
  self->start_ = start;
  self->extent_ = extent;
}


#line 149
HarmonyJavaAwtGeomArc2D_Double *new_HarmonyJavaAwtGeomArc2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(jdouble x, jdouble y, jdouble width, jdouble height, jdouble start, jdouble extent, jint type) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomArc2D_Double, initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_, x, y, width, height, start, extent, type)
}


#line 149
HarmonyJavaAwtGeomArc2D_Double *create_HarmonyJavaAwtGeomArc2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(jdouble x, jdouble y, jdouble width, jdouble height, jdouble start, jdouble extent, jint type) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomArc2D_Double, initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_, x, y, width, height, start, extent, type)
}


#line 159
void HarmonyJavaAwtGeomArc2D_Double_initWithHarmonyJavaAwtGeomRectangle2D_withDouble_withDouble_withInt_(HarmonyJavaAwtGeomArc2D_Double *self, HarmonyJavaAwtGeomRectangle2D *bounds, jdouble start, jdouble extent, jint type) {
  HarmonyJavaAwtGeomArc2D_initWithInt_(self, type);
  self->x_ = [((HarmonyJavaAwtGeomRectangle2D *) nil_chk(bounds)) getX];
  self->y_ = [bounds getY];
  self->width_ = [bounds getWidth];
  self->height_ = [bounds getHeight];
  self->start_ = start;
  self->extent_ = extent;
}


#line 159
HarmonyJavaAwtGeomArc2D_Double *new_HarmonyJavaAwtGeomArc2D_Double_initWithHarmonyJavaAwtGeomRectangle2D_withDouble_withDouble_withInt_(HarmonyJavaAwtGeomRectangle2D *bounds, jdouble start, jdouble extent, jint type) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomArc2D_Double, initWithHarmonyJavaAwtGeomRectangle2D_withDouble_withDouble_withInt_, bounds, start, extent, type)
}


#line 159
HarmonyJavaAwtGeomArc2D_Double *create_HarmonyJavaAwtGeomArc2D_Double_initWithHarmonyJavaAwtGeomRectangle2D_withDouble_withDouble_withInt_(HarmonyJavaAwtGeomRectangle2D *bounds, jdouble start, jdouble extent, jint type) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomArc2D_Double, initWithHarmonyJavaAwtGeomRectangle2D_withDouble_withDouble_withInt_, bounds, start, extent, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomArc2D_Double)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/geom/Arc2D.java"


#line 235
@implementation HarmonyJavaAwtGeomArc2D_Iterator


#line 343
- (instancetype)initWithHarmonyJavaAwtGeomArc2D:(HarmonyJavaAwtGeomArc2D *)outer$
                    withHarmonyJavaAwtGeomArc2D:(HarmonyJavaAwtGeomArc2D *)a
          withHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)t {
  HarmonyJavaAwtGeomArc2D_Iterator_initWithHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomAffineTransform_(self, outer$, a, t);
  return self;
}


#line 382
- (jint)getWindingRule {
  return HarmonyJavaAwtGeomPathIterator_WIND_NON_ZERO;
}

- (jboolean)isDone {
  return index_ > arcCount_ + lineCount_;
}

- (void)next {
  index_++;
}

- (jint)currentSegmentWithDoubleArray:(IOSDoubleArray *)coords {
  if ([self isDone]) {
    
#line 397
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(ComMessages_getStringWithNSString_(@"awt.4B"));
  }
  jint type;
  jint count;
  if (index_ == 0) {
    type = HarmonyJavaAwtGeomPathIterator_SEG_MOVETO;
    count = 1;
    cos_ = JavaLangMath_cosWithDouble_(angle_);
    sin_ = JavaLangMath_sinWithDouble_(angle_);
    kx_ = k_ * width_ * sin_;
    ky_ = k_ * height_ * cos_;
    *IOSDoubleArray_GetRef(nil_chk(coords), 0) = mx_ = x_ + cos_ * width_;
    *IOSDoubleArray_GetRef(coords, 1) = my_ = y_ + sin_ * height_;
  }
  else
#line 410
  if (index_ <= arcCount_) {
    type = HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO;
    count = 3;
    *IOSDoubleArray_GetRef(nil_chk(coords), 0) = mx_ - kx_;
    *IOSDoubleArray_GetRef(coords, 1) = my_ + ky_;
    JrePlusAssignDoubleD(&angle_, step_);
    cos_ = JavaLangMath_cosWithDouble_(angle_);
    sin_ = JavaLangMath_sinWithDouble_(angle_);
    kx_ = k_ * width_ * sin_;
    ky_ = k_ * height_ * cos_;
    *IOSDoubleArray_GetRef(coords, 4) = mx_ = x_ + cos_ * width_;
    *IOSDoubleArray_GetRef(coords, 5) = my_ = y_ + sin_ * height_;
    *IOSDoubleArray_GetRef(coords, 2) = mx_ + kx_;
    *IOSDoubleArray_GetRef(coords, 3) = my_ - ky_;
  }
  else
#line 424
  if (index_ == arcCount_ + lineCount_) {
    type = HarmonyJavaAwtGeomPathIterator_SEG_CLOSE;
    count = 0;
  }
  else {
    
#line 428
    type = HarmonyJavaAwtGeomPathIterator_SEG_LINETO;
    count = 1;
    *IOSDoubleArray_GetRef(nil_chk(coords), 0) = x_;
    *IOSDoubleArray_GetRef(coords, 1) = y_;
  }
  if (t_ != nil) {
    [t_ transformWithDoubleArray:coords withInt:0 withDoubleArray:coords withInt:0 withInt:count];
  }
  return type;
}


#line 439
- (jint)currentSegmentWithFloatArray:(IOSFloatArray *)coords {
  if ([self isDone]) {
    
#line 442
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(ComMessages_getStringWithNSString_(@"awt.4B"));
  }
  jint type;
  jint count;
  if (index_ == 0) {
    type = HarmonyJavaAwtGeomPathIterator_SEG_MOVETO;
    count = 1;
    cos_ = JavaLangMath_cosWithDouble_(angle_);
    sin_ = JavaLangMath_sinWithDouble_(angle_);
    kx_ = k_ * width_ * sin_;
    ky_ = k_ * height_ * cos_;
    *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) (mx_ = x_ + cos_ * width_);
    *IOSFloatArray_GetRef(coords, 1) = (jfloat) (my_ = y_ + sin_ * height_);
  }
  else
#line 455
  if (index_ <= arcCount_) {
    type = HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO;
    count = 3;
    *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) (mx_ - kx_);
    *IOSFloatArray_GetRef(coords, 1) = (jfloat) (my_ + ky_);
    JrePlusAssignDoubleD(&angle_, step_);
    cos_ = JavaLangMath_cosWithDouble_(angle_);
    sin_ = JavaLangMath_sinWithDouble_(angle_);
    kx_ = k_ * width_ * sin_;
    ky_ = k_ * height_ * cos_;
    *IOSFloatArray_GetRef(coords, 4) = (jfloat) (mx_ = x_ + cos_ * width_);
    *IOSFloatArray_GetRef(coords, 5) = (jfloat) (my_ = y_ + sin_ * height_);
    *IOSFloatArray_GetRef(coords, 2) = (jfloat) (mx_ + kx_);
    *IOSFloatArray_GetRef(coords, 3) = (jfloat) (my_ - ky_);
  }
  else
#line 469
  if (index_ == arcCount_ + lineCount_) {
    type = HarmonyJavaAwtGeomPathIterator_SEG_CLOSE;
    count = 0;
  }
  else {
    
#line 473
    type = HarmonyJavaAwtGeomPathIterator_SEG_LINETO;
    count = 1;
    *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) x_;
    *IOSFloatArray_GetRef(coords, 1) = (jfloat) y_;
  }
  if (t_ != nil) {
    [t_ transformWithFloatArray:coords withInt:0 withFloatArray:coords withInt:0 withInt:count];
  }
  return type;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithHarmonyJavaAwtGeomArc2D:withHarmonyJavaAwtGeomArc2D:withHarmonyJavaAwtGeomAffineTransform:);
  methods[1].selector = @selector(getWindingRule);
  methods[2].selector = @selector(isDone);
  methods[3].selector = @selector(next);
  methods[4].selector = @selector(currentSegmentWithDoubleArray:);
  methods[5].selector = @selector(currentSegmentWithFloatArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "x_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "y_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "width_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "height_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "angle_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "extent_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "t_", "LHarmonyJavaAwtGeomAffineTransform;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "arcCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lineCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "step_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cos_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sin_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "k_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "kx_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ky_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mx_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "my_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LHarmonyJavaAwtGeomArc2D;LHarmonyJavaAwtGeomArc2D;LHarmonyJavaAwtGeomAffineTransform;", "currentSegment", "[D", "[F", "LHarmonyJavaAwtGeomArc2D;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomArc2D_Iterator = { "Iterator", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x0, 6, 19, 4, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomArc2D_Iterator;
}

@end


#line 343
void HarmonyJavaAwtGeomArc2D_Iterator_initWithHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomArc2D_Iterator *self, HarmonyJavaAwtGeomArc2D *outer$, HarmonyJavaAwtGeomArc2D *a, HarmonyJavaAwtGeomAffineTransform *t) {
  NSObject_init(self);
  
#line 344
  if (self->width_ < 0 || self->height_ < 0) {
    self->arcCount_ = 0;
    self->lineCount_ = 0;
    self->index_ = 1;
    return;
  }
  
#line 351
  self->width_ = [((HarmonyJavaAwtGeomArc2D *) nil_chk(a)) getWidth] / 2.0;
  self->height_ = [a getHeight] / 2.0;
  self->x_ = [a getX] + self->width_;
  self->y_ = [a getY] + self->height_;
  self->angle_ = -JavaLangMath_toRadiansWithDouble_([a getAngleStart]);
  self->extent_ = -[a getAngleExtent];
  self->type_ = [a getArcType];
  self->t_ = t;
  
#line 360
  if (JavaLangMath_absWithDouble_(self->extent_) >= 360.0) {
    self->arcCount_ = 4;
    self->k_ = 4.0 / 3.0 * (JavaLangMath_sqrtWithDouble_(2.0) - 1.0);
    self->step_ = JavaLangMath_PI / 2.0;
    if (self->extent_ < 0.0) {
      self->step_ = -self->step_;
      self->k_ = -self->k_;
    }
  }
  else {
    
#line 369
    self->arcCount_ = JreFpToInt(JavaLangMath_rintWithDouble_(JavaLangMath_absWithDouble_(self->extent_) / 90.0));
    self->step_ = JavaLangMath_toRadiansWithDouble_(self->extent_ / self->arcCount_);
    self->k_ = 4.0 / 3.0 * (1.0 - JavaLangMath_cosWithDouble_(self->step_ / 2.0)) / JavaLangMath_sinWithDouble_(self->step_ / 2.0);
  }
  
#line 374
  self->lineCount_ = 0;
  if (self->type_ == HarmonyJavaAwtGeomArc2D_CHORD) {
    self->lineCount_++;
  }
  else
#line 377
  if (self->type_ == HarmonyJavaAwtGeomArc2D_PIE) {
    self->lineCount_ += 2;
  }
}


#line 343
HarmonyJavaAwtGeomArc2D_Iterator *new_HarmonyJavaAwtGeomArc2D_Iterator_initWithHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomArc2D *outer$, HarmonyJavaAwtGeomArc2D *a, HarmonyJavaAwtGeomAffineTransform *t) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomArc2D_Iterator, initWithHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomAffineTransform_, outer$, a, t)
}


#line 343
HarmonyJavaAwtGeomArc2D_Iterator *create_HarmonyJavaAwtGeomArc2D_Iterator_initWithHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomArc2D *outer$, HarmonyJavaAwtGeomArc2D *a, HarmonyJavaAwtGeomAffineTransform *t) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomArc2D_Iterator, initWithHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomAffineTransform_, outer$, a, t)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomArc2D_Iterator)
