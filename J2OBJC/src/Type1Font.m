//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/Type1Font.java
//

#include "BaseFont.h"
#include "Document.h"
#include "DocumentException.h"
#include "FontsResourceAnchor.h"
#include "GlyphList.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PdfArray.h"
#include "PdfDictionary.h"
#include "PdfEncodings.h"
#include "PdfIndirectObject.h"
#include "PdfIndirectReference.h"
#include "PdfName.h"
#include "PdfNumber.h"
#include "PdfObject.h"
#include "PdfRectangle.h"
#include "PdfStream.h"
#include "PdfWriter.h"
#include "Pfm2afm.h"
#include "RandomAccessFileOrArray.h"
#include "Type1Font.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/StringTokenizer.h"

#if !__has_feature(objc_arc)
#error "Type1Font must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfType1Font () {
 @public
  /*!
   @brief The PFB file if the input was made with a <CODE>byte</CODE> array.
   */
  IOSByteArray *pfb_;
  /*!
   @brief The Postscript font name.
   */
  NSString *FontName_;
  /*!
   @brief The full name of the font.
   */
  NSString *FullName_;
  /*!
   @brief The family name of the font.
   */
  NSString *FamilyName_;
  /*!
   @brief The weight of the font: normal, bold, etc.
   */
  NSString *Weight_;
  /*!
   @brief The italic angle of the font, usually 0.0 or negative.
   */
  jfloat ItalicAngle_;
  /*!
   @brief <CODE>true</CODE> if all the characters have the same
   width.
   */
  jboolean IsFixedPitch_;
  /*!
   @brief The character set of the font.
   */
  NSString *CharacterSet_;
  /*!
   @brief The llx of the FontBox.
   */
  jint llx_;
  /*!
   @brief The lly of the FontBox.
   */
  jint lly_;
  /*!
   @brief The lurx of the FontBox.
   */
  jint urx_;
  /*!
   @brief The ury of the FontBox.
   */
  jint ury_;
  /*!
   @brief The underline position.
   */
  jint UnderlinePosition_;
  /*!
   @brief The underline thickness.
   */
  jint UnderlineThickness_;
  /*!
   @brief The font's encoding name.This encoding is 'StandardEncoding' or
   'AdobeStandardEncoding' for a font that can be totally encoded
   according to the characters names.
   For all other names the
   font is treated as symbolic.
   */
  NSString *EncodingScheme_;
  /*!
   @brief A variable.
   */
  jint CapHeight_;
  /*!
   @brief A variable.
   */
  jint XHeight_;
  /*!
   @brief A variable.
   */
  jint Ascender_;
  /*!
   @brief A variable.
   */
  jint Descender_;
  /*!
   @brief A variable.
   */
  jint StdHW_;
  /*!
   @brief A variable.
   */
  jint StdVW_;
  /*!
   @brief Represents the section CharMetrics in the AFM file.Each
   value of this array contains a <CODE>Object[4]</CODE> with an
   Integer, Integer, String and int[].
   This is the code, width, name and char bbox.
   The key is the name of the char and also an Integer with the char number.
   */
  JavaUtilHashMap *CharMetrics_;
  /*!
   @brief Represents the section KernPairs in the AFM file.The key is
   the name of the first character and the value is a <CODE>Object[]</CODE>
   with 2 elements for each kern pair.
   Position 0 is the name of
   the second character and position 1 is the kerning distance. This is
   repeated for all the pairs.
   */
  JavaUtilHashMap *KernPairs_;
  /*!
   @brief The file in use.
   */
  NSString *fileName_;
  /*!
   @brief <CODE>true</CODE> if this font is one of the 14 built in fonts.
   */
  jboolean builtinFont_;
}

/*!
 @brief Reads the font metrics
 @param rf the AFM file
 @throw DocumentExceptionthe AFM file is invalid
 @throw IOExceptionthe AFM file could not be read
 */
- (void)processWithComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)rf;

/*!
 @brief Generates the font descriptor for this font or <CODE>null</CODE> if it is
  one of the 14 built in fonts.
 @param fontStream the indirect reference to a PdfStream containing the font or  <CODE> null </CODE>
 @return the PdfDictionary containing the font descriptor or <CODE>null</CODE>
 */
- (ComAowagieTextPdfPdfDictionary *)getFontDescriptorWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)fontStream;

/*!
 @brief Generates the font dictionary for this font.
 @return the PdfDictionary containing the font dictionary
 @param firstChar the first valid character
 @param lastChar the last valid character
 @param shortTag a 256 bytes long  <CODE> byte </CODE>  array where each unused byte is represented by 0
 @param fontDescriptor the indirect reference to a PdfDictionary containing the font descriptor or  <CODE> null </CODE>
 */
- (ComAowagieTextPdfPdfDictionary *)getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)fontDescriptor
                                                                                     withInt:(jint)firstChar
                                                                                     withInt:(jint)lastChar
                                                                               withByteArray:(IOSByteArray *)shortTag;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfType1Font, pfb_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfType1Font, FontName_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfType1Font, FullName_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfType1Font, FamilyName_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfType1Font, Weight_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfType1Font, CharacterSet_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfType1Font, EncodingScheme_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfType1Font, CharMetrics_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfType1Font, KernPairs_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfType1Font, fileName_, NSString *)

inline ComAowagieTextPdfFontsFontsResourceAnchor *ComAowagieTextPdfType1Font_get_resourceAnchor(void);
inline ComAowagieTextPdfFontsFontsResourceAnchor *ComAowagieTextPdfType1Font_set_resourceAnchor(ComAowagieTextPdfFontsFontsResourceAnchor *value);
static ComAowagieTextPdfFontsFontsResourceAnchor *ComAowagieTextPdfType1Font_resourceAnchor;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfType1Font, resourceAnchor, ComAowagieTextPdfFontsFontsResourceAnchor *)

/*!
 @brief Types of records in a PFB file.ASCII is 1 and BINARY is 2.
 They have to appear in the PFB file in this sequence.
 */
inline IOSIntArray *ComAowagieTextPdfType1Font_get_PFB_TYPES(void);
static IOSIntArray *ComAowagieTextPdfType1Font_PFB_TYPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfType1Font, PFB_TYPES, IOSIntArray *)

__attribute__((unused)) static void ComAowagieTextPdfType1Font_processWithComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfType1Font *self, ComAowagieTextPdfRandomAccessFileOrArray *rf);

__attribute__((unused)) static ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfType1Font_getFontDescriptorWithComAowagieTextPdfPdfIndirectReference_(ComAowagieTextPdfType1Font *self, ComAowagieTextPdfPdfIndirectReference *fontStream);

__attribute__((unused)) static ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfType1Font_getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference_withInt_withInt_withByteArray_(ComAowagieTextPdfType1Font *self, ComAowagieTextPdfPdfIndirectReference *fontDescriptor, jint firstChar, jint lastChar, IOSByteArray *shortTag);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/Type1Font.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfType1Font)


#line 67
@implementation ComAowagieTextPdfType1Font


#line 174
- (instancetype)initPackagePrivateWithNSString:(NSString *)afmFile
                                  withNSString:(NSString *)enc
                                   withBoolean:(jboolean)emb
                                 withByteArray:(IOSByteArray *)ttfAfm
                                 withByteArray:(IOSByteArray *)pfb
                                   withBoolean:(jboolean)forceRead {
  ComAowagieTextPdfType1Font_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withByteArray_withBoolean_(self, afmFile, enc, emb, ttfAfm, pfb, forceRead);
  return self;
}


#line 302
- (jint)getRawWidthWithInt:(jint)c
              withNSString:(NSString *)name {
  IOSObjectArray *metrics;
  if (name == nil) {
    metrics = (IOSObjectArray *) cast_check([((JavaUtilHashMap *) nil_chk(self->CharMetrics_)) getWithId:new_JavaLangInteger_initWithInt_(c)], IOSClass_arrayType(NSObject_class_(), 1));
  }
  else {
    if ([name isEqual:@".notdef"]) {
      return 0;
    }
    metrics = (IOSObjectArray *) cast_check([((JavaUtilHashMap *) nil_chk(self->CharMetrics_)) getWithId:name], IOSClass_arrayType(NSObject_class_(), 1));
  }
  if (metrics != nil) {
    return [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(metrics, 1), [JavaLangInteger class])))) intValue];
  }
  return 0;
}


#line 327
- (jint)getKerningWithInt:(jint)char1
                  withInt:(jint)char2 {
  
#line 330
  NSString *first = ComAowagieTextPdfGlyphList_unicodeToNameWithInt_(char1);
  if (first == nil) {
    return 0;
  }
  NSString *second = ComAowagieTextPdfGlyphList_unicodeToNameWithInt_(char2);
  if (second == nil) {
    return 0;
  }
  IOSObjectArray *obj = (IOSObjectArray *) cast_check([((JavaUtilHashMap *) nil_chk(self->KernPairs_)) getWithId:first], IOSClass_arrayType(NSObject_class_(), 1));
  if (obj == nil) {
    return 0;
  }
  for (jint k = 0; k < obj->size_; k += 2) {
    if ([second isEqual:IOSObjectArray_Get(obj, k)]) {
      return [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(obj, k + 1), [JavaLangInteger class])))) intValue];
    }
  }
  return 0;
}


#line 356
- (void)processWithComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)rf {
  ComAowagieTextPdfType1Font_processWithComAowagieTextPdfRandomAccessFileOrArray_(self, rf);
}


#line 531
- (ComAowagieTextPdfPdfStream *)getFullFontStream {
  
#line 534
  if (self->builtinFont_ || !self->embedded_) {
    return nil;
  }
  ComAowagieTextPdfRandomAccessFileOrArray *rf = nil;
  @try {
    NSString *filePfb = JreStrcat("$$", [((NSString *) nil_chk(self->fileName_)) java_substring:0 endIndex:[self->fileName_ java_length] - 3], @"pfb");
    if (self->pfb_ == nil) {
      rf = new_ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_withBoolean_withBoolean_(filePfb, true, JreLoadStatic(ComAowagieTextDocument, plainRandomAccess));
    }
    else {
      
#line 543
      rf = new_ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_(self->pfb_);
    }
    jint fileLength = [rf length];
    IOSByteArray *st = [IOSByteArray newArrayWithLength:fileLength - 18];
    IOSIntArray *lengths = [IOSIntArray newArrayWithLength:3];
    jint bytePtr = 0;
    for (jint k = 0; k < 3; ++k) {
      if ([rf read] != (jint) 0x80) {
        @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$", @"Start marker missing in ", filePfb));
      }
      if ([rf read] != IOSIntArray_Get(nil_chk(ComAowagieTextPdfType1Font_PFB_TYPES), k)) {
        @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$", @"Incorrect segment type in ", filePfb));
      }
      jint size = [rf read];
      size += JreLShift32([rf read], 8);
      size += JreLShift32([rf read], 16);
      size += JreLShift32([rf read], 24);
      *IOSIntArray_GetRef(lengths, k) = size;
      while (size != 0) {
        jint got = [rf readWithByteArray:st withInt:bytePtr withInt:size];
        if (got < 0) {
          @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$", @"Premature end in ", filePfb));
        }
        bytePtr += got;
        size -= got;
      }
    }
    return new_ComAowagieTextPdfBaseFont_StreamFont_initWithByteArray_withIntArray_withInt_(st, lengths, self->compressionLevel_);
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextDocumentException_initWithJavaLangException_(e);
  }
  @finally {
    if (rf != nil) {
      @try {
        [rf close];
      }
      @catch (JavaLangException *e) {
      }
    }
  }
}


#line 592
- (ComAowagieTextPdfPdfDictionary *)getFontDescriptorWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)fontStream {
  return ComAowagieTextPdfType1Font_getFontDescriptorWithComAowagieTextPdfPdfIndirectReference_(self, fontStream);
}


#line 634
- (ComAowagieTextPdfPdfDictionary *)getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)fontDescriptor
                                                                                     withInt:(jint)firstChar
                                                                                     withInt:(jint)lastChar
                                                                               withByteArray:(IOSByteArray *)shortTag {
  return ComAowagieTextPdfType1Font_getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference_withInt_withInt_withByteArray_(self, fontDescriptor, firstChar, lastChar, shortTag);
}


#line 694
- (void)writeFontWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
      withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)ref
                              withNSObjectArray:(IOSObjectArray *)params {
  
#line 696
  jint firstChar = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(nil_chk(params), 0), [JavaLangInteger class])))) intValue];
  jint lastChar = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(params, 1), [JavaLangInteger class])))) intValue];
  IOSByteArray *shortTag = (IOSByteArray *) cast_chk(IOSObjectArray_Get(params, 2), [IOSByteArray class]);
  jboolean subsetp = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk(IOSObjectArray_Get(params, 3), [JavaLangBoolean class])))) booleanValue] && self->subset_;
  if (!subsetp) {
    firstChar = 0;
    lastChar = ((IOSByteArray *) nil_chk(shortTag))->size_ - 1;
    for (jint k = 0; k < shortTag->size_; ++k) {
      *IOSByteArray_GetRef(shortTag, k) = 1;
    }
  }
  ComAowagieTextPdfPdfIndirectReference *ind_font = nil;
  ComAowagieTextPdfPdfObject *pobj = nil;
  ComAowagieTextPdfPdfIndirectObject *obj = nil;
  pobj = [self getFullFontStream];
  if (pobj != nil) {
    obj = [((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComAowagieTextPdfPdfObject:pobj];
    ind_font = [((ComAowagieTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
  }
  pobj = ComAowagieTextPdfType1Font_getFontDescriptorWithComAowagieTextPdfPdfIndirectReference_(self, ind_font);
  if (pobj != nil) {
    obj = [((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComAowagieTextPdfPdfObject:pobj];
    ind_font = [((ComAowagieTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
  }
  pobj = ComAowagieTextPdfType1Font_getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference_withInt_withInt_withByteArray_(self, ind_font, firstChar, lastChar, shortTag);
  (void) [((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComAowagieTextPdfPdfObject:pobj withComAowagieTextPdfPdfIndirectReference:ref];
}


#line 732
- (jfloat)getFontDescriptorWithInt:(jint)key
                         withFloat:(jfloat)fontSize {
  switch (key) {
    case ComAowagieTextPdfBaseFont_AWT_ASCENT:
    case ComAowagieTextPdfBaseFont_ASCENT:
    return self->Ascender_ * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_CAPHEIGHT:
    return self->CapHeight_ * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_AWT_DESCENT:
    case ComAowagieTextPdfBaseFont_DESCENT:
    return self->Descender_ * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_ITALICANGLE:
    return self->ItalicAngle_;
    case ComAowagieTextPdfBaseFont_BBOXLLX:
    return self->llx_ * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_BBOXLLY:
    return self->lly_ * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_BBOXURX:
    return self->urx_ * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_BBOXURY:
    return self->ury_ * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_AWT_LEADING:
    return 0;
    case ComAowagieTextPdfBaseFont_AWT_MAXADVANCE:
    return (self->urx_ - self->llx_) * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_UNDERLINE_POSITION:
    return self->UnderlinePosition_ * fontSize / 1000;
    case ComAowagieTextPdfBaseFont_UNDERLINE_THICKNESS:
    return self->UnderlineThickness_ * fontSize / 1000;
  }
  return 0;
}


#line 768
- (NSString *)getPostscriptFontName {
  
#line 770
  return self->FontName_;
}


#line 781
- (IOSObjectArray *)getFullFontName {
  
#line 783
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"", @"", @"", self->FullName_ } count:4 type:NSString_class_()] } count:1 type:IOSClass_arrayType(NSString_class_(), 1)];
}


#line 794
- (IOSObjectArray *)getAllNameEntries {
  
#line 796
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"4", @"", @"", @"", self->FullName_ } count:5 type:NSString_class_()] } count:1 type:IOSClass_arrayType(NSString_class_(), 1)];
}


#line 807
- (IOSObjectArray *)getFamilyFontName {
  
#line 809
  return [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"", @"", @"", self->FamilyName_ } count:4 type:NSString_class_()] } count:1 type:IOSClass_arrayType(NSString_class_(), 1)];
}


#line 815
- (jboolean)hasKernPairs {
  
#line 817
  return ![((JavaUtilHashMap *) nil_chk(self->KernPairs_)) isEmpty];
}


#line 825
- (void)setPostscriptFontNameWithNSString:(NSString *)name {
  
#line 827
  self->FontName_ = name;
}


#line 837
- (jboolean)setKerningWithInt:(jint)char1
                      withInt:(jint)char2
                      withInt:(jint)kern {
  
#line 839
  NSString *first = ComAowagieTextPdfGlyphList_unicodeToNameWithInt_(char1);
  if (first == nil) {
    return false;
  }
  NSString *second = ComAowagieTextPdfGlyphList_unicodeToNameWithInt_(char2);
  if (second == nil) {
    return false;
  }
  IOSObjectArray *obj = (IOSObjectArray *) cast_check([((JavaUtilHashMap *) nil_chk(self->KernPairs_)) getWithId:first], IOSClass_arrayType(NSObject_class_(), 1));
  if (obj == nil) {
    obj = [IOSObjectArray newArrayWithObjects:(id[]){ second, create_JavaLangInteger_initWithInt_(kern) } count:2 type:NSObject_class_()];
    (void) [self->KernPairs_ putWithId:first withId:obj];
    return true;
  }
  for (jint k = 0; k < obj->size_; k += 2) {
    if ([second isEqual:IOSObjectArray_Get(obj, k)]) {
      (void) IOSObjectArray_SetAndConsume(obj, k + 1, new_JavaLangInteger_initWithInt_(kern));
      return true;
    }
  }
  jint size = obj->size_;
  IOSObjectArray *obj2 = [IOSObjectArray newArrayWithLength:size + 2 type:NSObject_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(obj, 0, obj2, 0, size);
  (void) IOSObjectArray_Set(obj2, size, second);
  (void) IOSObjectArray_SetAndConsume(obj2, size + 1, new_JavaLangInteger_initWithInt_(kern));
  (void) [self->KernPairs_ putWithId:first withId:obj2];
  return true;
}


#line 868
- (IOSIntArray *)getRawCharBBoxWithInt:(jint)c
                          withNSString:(NSString *)name {
  IOSObjectArray *metrics;
  if (name == nil) {
    metrics = (IOSObjectArray *) cast_check([((JavaUtilHashMap *) nil_chk(self->CharMetrics_)) getWithId:new_JavaLangInteger_initWithInt_(c)], IOSClass_arrayType(NSObject_class_(), 1));
  }
  else {
    if ([name isEqual:@".notdef"]) {
      return nil;
    }
    metrics = (IOSObjectArray *) cast_check([((JavaUtilHashMap *) nil_chk(self->CharMetrics_)) getWithId:name], IOSClass_arrayType(NSObject_class_(), 1));
  }
  if (metrics != nil) {
    return (IOSIntArray *) cast_chk(IOSObjectArray_Get(metrics, 3), [IOSIntArray class]);
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "I", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfStream;", 0x1, -1, -1, 8, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 14, 1, -1, -1, -1 },
    { NULL, "F", 0x1, 9, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "[I", 0x4, 20, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithNSString:withNSString:withBoolean:withByteArray:withByteArray:withBoolean:);
  methods[1].selector = @selector(getRawWidthWithInt:withNSString:);
  methods[2].selector = @selector(getKerningWithInt:withInt:);
  methods[3].selector = @selector(processWithComAowagieTextPdfRandomAccessFileOrArray:);
  methods[4].selector = @selector(getFullFontStream);
  methods[5].selector = @selector(getFontDescriptorWithComAowagieTextPdfPdfIndirectReference:);
  methods[6].selector = @selector(getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference:withInt:withInt:withByteArray:);
  methods[7].selector = @selector(writeFontWithComAowagieTextPdfPdfWriter:withComAowagieTextPdfPdfIndirectReference:withNSObjectArray:);
  methods[8].selector = @selector(getFontDescriptorWithInt:withFloat:);
  methods[9].selector = @selector(getPostscriptFontName);
  methods[10].selector = @selector(getFullFontName);
  methods[11].selector = @selector(getAllNameEntries);
  methods[12].selector = @selector(getFamilyFontName);
  methods[13].selector = @selector(hasKernPairs);
  methods[14].selector = @selector(setPostscriptFontNameWithNSString:);
  methods[15].selector = @selector(setKerningWithInt:withInt:withInt:);
  methods[16].selector = @selector(getRawCharBBoxWithInt:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "resourceAnchor", "LComAowagieTextPdfFontsFontsResourceAnchor;", .constantValue.asLong = 0, 0xa, -1, 21, -1, -1 },
    { "pfb_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "FontName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "FullName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "FamilyName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "Weight_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ItalicAngle_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "IsFixedPitch_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "CharacterSet_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "llx_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lly_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "urx_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ury_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "UnderlinePosition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "UnderlineThickness_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "EncodingScheme_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "CapHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "XHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "Ascender_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "Descender_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "StdHW_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "StdVW_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "CharMetrics_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "KernPairs_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fileName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "builtinFont_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "PFB_TYPES", "[I", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;Z[B[BZ", "LComAowagieTextDocumentException;LJavaIoIOException;", "getRawWidth", "ILNSString;", "getKerning", "II", "process", "LComAowagieTextPdfRandomAccessFileOrArray;", "LComAowagieTextDocumentException;", "getFontDescriptor", "LComAowagieTextPdfPdfIndirectReference;", "getFontBaseType", "LComAowagieTextPdfPdfIndirectReference;II[B", "writeFont", "LComAowagieTextPdfPdfWriter;LComAowagieTextPdfPdfIndirectReference;[LNSObject;", "IF", "setPostscriptFontName", "LNSString;", "setKerning", "III", "getRawCharBBox", &ComAowagieTextPdfType1Font_resourceAnchor, &ComAowagieTextPdfType1Font_PFB_TYPES };
  static const J2ObjcClassInfo _ComAowagieTextPdfType1Font = { "Type1Font", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 17, 27, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfType1Font;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfType1Font class]) {
    ComAowagieTextPdfType1Font_PFB_TYPES = [IOSIntArray newArrayWithInts:(jint[]){
#line 161
      1, 2, 1 } count:3];
      J2OBJC_SET_INITIALIZED(ComAowagieTextPdfType1Font)
    }
  }

@end


#line 174
void ComAowagieTextPdfType1Font_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withByteArray_withBoolean_(ComAowagieTextPdfType1Font *self, NSString *afmFile, NSString *enc, jboolean emb, IOSByteArray *ttfAfm, IOSByteArray *pfb, jboolean forceRead) {
  ComAowagieTextPdfBaseFont_init(self);
  self->Weight_ =
#line 85
  @"";
  self->ItalicAngle_ =
#line 88
  0.0f;
  self->IsFixedPitch_ =
#line 92
  false;
  self->llx_ =
#line 98
  -50;
  self->lly_ =
#line 101
  -200;
  self->urx_ =
#line 104
  1000;
  self->ury_ =
#line 107
  900;
  self->UnderlinePosition_ =
#line 110
  -100;
  self->UnderlineThickness_ =
#line 113
  50;
  self->EncodingScheme_ =
#line 119
  @"FontSpecific";
  self->CapHeight_ =
#line 122
  700;
  self->XHeight_ =
#line 125
  480;
  self->Ascender_ =
#line 128
  800;
  self->Descender_ =
#line 131
  -200;
  self->StdVW_ =
#line 137
  80;
  self->CharMetrics_ = new_JavaUtilLinkedHashMap_init();
  self->KernPairs_ = new_JavaUtilLinkedHashMap_init();
  self->builtinFont_ =
#line 157
  false;
  
#line 176
  if (emb && ttfAfm != nil && pfb == nil) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(@"Two byte arrays are needed if the Type1 font is embedded.");
  }
  if (emb && ttfAfm != nil) {
    self->pfb_ = pfb;
  }
  self->encoding_ = enc;
  self->embedded_ = emb;
  self->fileName_ = afmFile;
  self->fontType_ = ComAowagieTextPdfBaseFont_FONT_TYPE_T1;
  ComAowagieTextPdfRandomAccessFileOrArray *rf = nil;
  JavaIoInputStream *is = nil;
  if ([((JavaUtilHashMap *) nil_chk(JreLoadStatic(ComAowagieTextPdfBaseFont, BuiltinFonts14))) containsKeyWithId:afmFile]) {
    self->embedded_ = false;
    self->builtinFont_ = true;
    IOSByteArray *buf = [IOSByteArray newArrayWithLength:1024];
    @try {
      if (ComAowagieTextPdfType1Font_resourceAnchor == nil) {
        ComAowagieTextPdfType1Font_resourceAnchor = new_ComAowagieTextPdfFontsFontsResourceAnchor_init();
      }
      is = ComAowagieTextPdfBaseFont_getResourceStreamWithNSString_withJavaLangClassLoader_(JreStrcat("$$$", ComAowagieTextPdfBaseFont_RESOURCE_PATH, afmFile, @".afm"), [[ComAowagieTextPdfType1Font_resourceAnchor java_getClass] getClassLoader]);
      if (is == nil) {
        NSString *msg = JreStrcat("$$", afmFile, @" not found as resource. (The *.afm files must exist as resources in the package com.aowagie.text.pdf.fonts)");
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:msg];
        @throw new_ComAowagieTextDocumentException_initWithNSString_(msg);
      }
      JavaIoByteArrayOutputStream *out = new_JavaIoByteArrayOutputStream_init();
      while (true) {
        jint size = [is readWithByteArray:buf];
        if (size < 0) {
          break;
        }
        [out writeWithByteArray:buf withInt:0 withInt:size];
      }
      buf = [out toByteArray];
    }
    @finally {
      if (is != nil) {
        @try {
          [is close];
        }
        @catch (JavaLangException *e) {
        }
      }
    }
    
#line 222
    @try {
      rf = new_ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_(buf);
      ComAowagieTextPdfType1Font_processWithComAowagieTextPdfRandomAccessFileOrArray_(self, rf);
    }
    @finally {
      if (rf != nil) {
        @try {
          [rf close];
        }
        @catch (JavaLangException *e) {
        }
      }
    }
  }
  else
#line 237
  if ([((NSString *) nil_chk([((NSString *) nil_chk(afmFile)) lowercaseString])) java_hasSuffix:@".afm"]) {
    @try {
      if (ttfAfm == nil) {
        rf = new_ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_withBoolean_withBoolean_(afmFile, forceRead, JreLoadStatic(ComAowagieTextDocument, plainRandomAccess));
      }
      else {
        
#line 242
        rf = new_ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_(ttfAfm);
      }
      ComAowagieTextPdfType1Font_processWithComAowagieTextPdfRandomAccessFileOrArray_(self, rf);
    }
    @finally {
      if (rf != nil) {
        @try {
          [rf close];
        }
        @catch (JavaLangException *e) {
        }
      }
    }
  }
  else
#line 257
  if ([((NSString *) nil_chk([afmFile lowercaseString])) java_hasSuffix:@".pfm"]) {
    @try {
      JavaIoByteArrayOutputStream *ba = new_JavaIoByteArrayOutputStream_init();
      if (ttfAfm == nil) {
        rf = new_ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_withBoolean_withBoolean_(afmFile, forceRead, JreLoadStatic(ComAowagieTextDocument, plainRandomAccess));
      }
      else {
        
#line 263
        rf = new_ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_(ttfAfm);
      }
      ComAowagieTextPdfPfm2afm_convertWithComAowagieTextPdfRandomAccessFileOrArray_withJavaIoOutputStream_(rf, ba);
      [rf close];
      rf = new_ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_([ba toByteArray]);
      ComAowagieTextPdfType1Font_processWithComAowagieTextPdfRandomAccessFileOrArray_(self, rf);
    }
    @finally {
      if (rf != nil) {
        @try {
          [rf close];
        }
        @catch (JavaLangException *e) {
        }
      }
    }
  }
  else {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$", afmFile, @" is not an AFM or PFM font file."));
  }
  
#line 284
  self->EncodingScheme_ = [((NSString *) nil_chk(self->EncodingScheme_)) java_trim];
  if ([((NSString *) nil_chk(self->EncodingScheme_)) isEqual:@"AdobeStandardEncoding"] || [((NSString *) nil_chk(self->EncodingScheme_)) isEqual:@"StandardEncoding"]) {
    self->fontSpecific_ = false;
  }
  if (![((NSString *) nil_chk(self->encoding_)) java_hasPrefix:@"#"]) {
    
#line 290
    (void) ComAowagieTextPdfPdfEncodings_convertToBytesWithNSString_withNSString_(@" ", enc);
  }
  [self createEncoding];
}


#line 174
ComAowagieTextPdfType1Font *new_ComAowagieTextPdfType1Font_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withByteArray_withBoolean_(NSString *afmFile, NSString *enc, jboolean emb, IOSByteArray *ttfAfm, IOSByteArray *pfb, jboolean forceRead) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfType1Font, initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withByteArray_withBoolean_, afmFile, enc, emb, ttfAfm, pfb, forceRead)
}


#line 174
ComAowagieTextPdfType1Font *create_ComAowagieTextPdfType1Font_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withByteArray_withBoolean_(NSString *afmFile, NSString *enc, jboolean emb, IOSByteArray *ttfAfm, IOSByteArray *pfb, jboolean forceRead) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfType1Font, initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withByteArray_withBoolean_, afmFile, enc, emb, ttfAfm, pfb, forceRead)
}


#line 356
void ComAowagieTextPdfType1Font_processWithComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfType1Font *self, ComAowagieTextPdfRandomAccessFileOrArray *rf) {
  
#line 358
  NSString *line;
  jboolean isMetrics = false;
  while ((line = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(rf)) readLine]) != nil) {
    
#line 362
    JavaUtilStringTokenizer *tok = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(line, @" ,\n\x0d\t\x0c");
    if (![tok hasMoreTokens]) {
      continue;
    }
    NSString *ident = [tok nextToken];
    if ([((NSString *) nil_chk(ident)) isEqual:@"FontName"]) {
      self->FontName_ = [((NSString *) nil_chk([tok nextTokenWithNSString:@"\u00ff"])) java_substring:1];
    }
    else
#line 369
    if ([ident isEqual:@"FullName"]) {
      self->FullName_ = [((NSString *) nil_chk([tok nextTokenWithNSString:@"\u00ff"])) java_substring:1];
    }
    else
#line 371
    if ([ident isEqual:@"FamilyName"]) {
      self->FamilyName_ = [((NSString *) nil_chk([tok nextTokenWithNSString:@"\u00ff"])) java_substring:1];
    }
    else
#line 373
    if ([ident isEqual:@"Weight"]) {
      self->Weight_ = [((NSString *) nil_chk([tok nextTokenWithNSString:@"\u00ff"])) java_substring:1];
    }
    else
#line 375
    if ([ident isEqual:@"ItalicAngle"]) {
      self->ItalicAngle_ = JavaLangFloat_parseFloatWithNSString_([tok nextToken]);
    }
    else
#line 377
    if ([ident isEqual:@"IsFixedPitch"]) {
      self->IsFixedPitch_ = [((NSString *) nil_chk([tok nextToken])) isEqual:@"true"];
    }
    else
#line 379
    if ([ident isEqual:@"CharacterSet"]) {
      self->CharacterSet_ = [((NSString *) nil_chk([tok nextTokenWithNSString:@"\u00ff"])) java_substring:1];
    }
    else
#line 381
    if ([ident isEqual:@"FontBBox"]) {
      
#line 383
      self->llx_ = JreFpToInt(JavaLangFloat_parseFloatWithNSString_([tok nextToken]));
      self->lly_ = JreFpToInt(JavaLangFloat_parseFloatWithNSString_([tok nextToken]));
      self->urx_ = JreFpToInt(JavaLangFloat_parseFloatWithNSString_([tok nextToken]));
      self->ury_ = JreFpToInt(JavaLangFloat_parseFloatWithNSString_([tok nextToken]));
    }
    else if ([ident isEqual:@"UnderlinePosition"]) {
      self->UnderlinePosition_ = JreFpToInt(JavaLangFloat_parseFloatWithNSString_([tok nextToken]));
    }
    else
#line 390
    if ([ident isEqual:@"UnderlineThickness"]) {
      self->UnderlineThickness_ = JreFpToInt(JavaLangFloat_parseFloatWithNSString_([tok nextToken]));
    }
    else
#line 392
    if ([ident isEqual:@"EncodingScheme"]) {
      self->EncodingScheme_ = [((NSString *) nil_chk([tok nextTokenWithNSString:@"\u00ff"])) java_substring:1];
    }
    else
#line 394
    if ([ident isEqual:@"CapHeight"]) {
      self->CapHeight_ = JreFpToInt(JavaLangFloat_parseFloatWithNSString_([tok nextToken]));
    }
    else
#line 396
    if ([ident isEqual:@"XHeight"]) {
      self->XHeight_ = JreFpToInt(JavaLangFloat_parseFloatWithNSString_([tok nextToken]));
    }
    else
#line 398
    if ([ident isEqual:@"Ascender"]) {
      self->Ascender_ = JreFpToInt(JavaLangFloat_parseFloatWithNSString_([tok nextToken]));
    }
    else
#line 400
    if ([ident isEqual:@"Descender"]) {
      self->Descender_ = JreFpToInt(JavaLangFloat_parseFloatWithNSString_([tok nextToken]));
    }
    else
#line 402
    if ([ident isEqual:@"StdHW"]) {
      self->StdHW_ = JreFpToInt(JavaLangFloat_parseFloatWithNSString_([tok nextToken]));
    }
    else
#line 404
    if ([ident isEqual:@"StdVW"]) {
      self->StdVW_ = JreFpToInt(JavaLangFloat_parseFloatWithNSString_([tok nextToken]));
    }
    else
#line 406
    if ([ident isEqual:@"StartCharMetrics"]) {
      
#line 408
      isMetrics = true;
      break;
    }
  }
  if (!isMetrics) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$", @"Missing StartCharMetrics in ", self->fileName_));
  }
  while ((line = [rf readLine]) != nil) {
    
#line 417
    JavaUtilStringTokenizer *tok = new_JavaUtilStringTokenizer_initWithNSString_(line);
    if (![tok hasMoreTokens]) {
      continue;
    }
    NSString *ident = [tok nextToken];
    if ([((NSString *) nil_chk(ident)) isEqual:@"EndCharMetrics"]) {
      
#line 424
      isMetrics = false;
      break;
    }
    JavaLangInteger *C = new_JavaLangInteger_initWithInt_(-1);
    JavaLangInteger *WX = new_JavaLangInteger_initWithInt_(250);
    NSString *N = @"";
    IOSIntArray *B = nil;
    
#line 432
    tok = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(line, @";");
    while ([tok hasMoreTokens]) {
      
#line 435
      JavaUtilStringTokenizer *tokc = new_JavaUtilStringTokenizer_initWithNSString_([tok nextToken]);
      if (![tokc hasMoreTokens]) {
        continue;
      }
      ident = [tokc nextToken];
      if ([((NSString *) nil_chk(ident)) isEqual:@"C"]) {
        C = JavaLangInteger_valueOfWithNSString_([tokc nextToken]);
      }
      else
#line 442
      if ([ident isEqual:@"WX"]) {
        WX = new_JavaLangInteger_initWithInt_(JreFpToInt(JavaLangFloat_parseFloatWithNSString_([tokc nextToken])));
      }
      else
#line 444
      if ([ident isEqual:@"N"]) {
        N = [tokc nextToken];
      }
      else
#line 446
      if ([ident isEqual:@"B"]) {
        B = [IOSIntArray newArrayWithInts:(jint[]){ JavaLangInteger_parseIntWithNSString_([tokc nextToken]), JavaLangInteger_parseIntWithNSString_(
#line 448
        [tokc nextToken]), JavaLangInteger_parseIntWithNSString_(
#line 449
        [tokc nextToken]), JavaLangInteger_parseIntWithNSString_(
#line 450
        [tokc nextToken]) } count:4];
      }
    }
    IOSObjectArray *metrics = [IOSObjectArray newArrayWithObjects:(id[]){ C, WX, N, B } count:4 type:NSObject_class_()];
    if ([((JavaLangInteger *) nil_chk(C)) intValue] >= 0) {
      (void) [((JavaUtilHashMap *) nil_chk(self->CharMetrics_)) putWithId:C withId:metrics];
    }
    (void) [((JavaUtilHashMap *) nil_chk(self->CharMetrics_)) putWithId:N withId:metrics];
  }
  if (isMetrics) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$", @"Missing EndCharMetrics in ", self->fileName_));
  }
  if (![((JavaUtilHashMap *) nil_chk(self->CharMetrics_)) containsKeyWithId:@"nonbreakingspace"]) {
    IOSObjectArray *space = (IOSObjectArray *) cast_check([self->CharMetrics_ getWithId:@"space"], IOSClass_arrayType(NSObject_class_(), 1));
    if (space != nil) {
      (void) [self->CharMetrics_ putWithId:@"nonbreakingspace" withId:space];
    }
  }
  while ((line = [rf readLine]) != nil) {
    
#line 470
    JavaUtilStringTokenizer *tok = new_JavaUtilStringTokenizer_initWithNSString_(line);
    if (![tok hasMoreTokens]) {
      continue;
    }
    NSString *ident = [tok nextToken];
    if ([((NSString *) nil_chk(ident)) isEqual:@"EndFontMetrics"]) {
      return;
    }
    if ([ident isEqual:@"StartKernPairs"]) {
      
#line 480
      isMetrics = true;
      break;
    }
  }
  if (!isMetrics) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$", @"Missing EndFontMetrics in ", self->fileName_));
  }
  while ((line = [rf readLine]) != nil) {
    
#line 489
    JavaUtilStringTokenizer *tok = new_JavaUtilStringTokenizer_initWithNSString_(line);
    if (![tok hasMoreTokens]) {
      continue;
    }
    NSString *ident = [tok nextToken];
    if ([((NSString *) nil_chk(ident)) isEqual:@"KPX"]) {
      
#line 496
      NSString *first = [tok nextToken];
      NSString *second = [tok nextToken];
      JavaLangInteger *width = new_JavaLangInteger_initWithInt_(JreFpToInt(JavaLangFloat_parseFloatWithNSString_([tok nextToken])));
      IOSObjectArray *relates = (IOSObjectArray *) cast_check([((JavaUtilHashMap *) nil_chk(self->KernPairs_)) getWithId:first], IOSClass_arrayType(NSObject_class_(), 1));
      if (relates == nil) {
        (void) [self->KernPairs_ putWithId:first withId:[IOSObjectArray newArrayWithObjects:(id[]){ second, width } count:2 type:NSObject_class_()]];
      }
      else {
        jint n = relates->size_;
        IOSObjectArray *relates2 = [IOSObjectArray newArrayWithLength:n + 2 type:NSObject_class_()];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(relates, 0, relates2, 0, n);
        (void) IOSObjectArray_Set(relates2, n, second);
        (void) IOSObjectArray_Set(relates2, n + 1, width);
        (void) [self->KernPairs_ putWithId:first withId:relates2];
      }
    }
    else if ([ident isEqual:@"EndKernPairs"]) {
      
#line 514
      isMetrics = false;
      break;
    }
  }
  if (isMetrics) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$", @"Missing EndKernPairs in ", self->fileName_));
  }
  [rf close];
}


#line 592
ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfType1Font_getFontDescriptorWithComAowagieTextPdfPdfIndirectReference_(ComAowagieTextPdfType1Font *self, ComAowagieTextPdfPdfIndirectReference *fontStream) {
  
#line 594
  if (self->builtinFont_) {
    return nil;
  }
  ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_initWithComAowagieTextPdfPdfName_(JreLoadStatic(ComAowagieTextPdfPdfName, FONTDESCRIPTOR));
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ASCENT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(self->Ascender_)];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CAPHEIGHT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(self->CapHeight_)];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DESCENT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(self->Descender_)];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTBBOX) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfRectangle_initWithFloat_withFloat_withFloat_withFloat_(self->llx_, self->lly_, self->urx_, self->ury_)];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTNAME) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(self->FontName_)];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ITALICANGLE) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithFloat_(self->ItalicAngle_)];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STEMV) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(self->StdVW_)];
  if (fontStream != nil) {
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTFILE) withComAowagieTextPdfPdfObject:fontStream];
  }
  jint flags = 0;
  if (self->IsFixedPitch_) {
    flags |= 1;
  }
  flags |= self->fontSpecific_ ? 4 : 32;
  if (self->ItalicAngle_ < 0) {
    flags |= 64;
  }
  if ([((NSString *) nil_chk(self->FontName_)) java_indexOfString:@"Caps"] >= 0 || [((NSString *) nil_chk(self->FontName_)) java_hasSuffix:@"SC"]) {
    flags |= 131072;
  }
  if ([((NSString *) nil_chk(self->Weight_)) isEqual:@"Bold"]) {
    flags |= 262144;
  }
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FLAGS) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(flags)];
  
#line 624
  return dic;
}


#line 634
ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfType1Font_getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference_withInt_withInt_withByteArray_(ComAowagieTextPdfType1Font *self, ComAowagieTextPdfPdfIndirectReference *fontDescriptor, jint firstChar, jint lastChar, IOSByteArray *shortTag) {
  
#line 636
  ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_initWithComAowagieTextPdfPdfName_(JreLoadStatic(ComAowagieTextPdfPdfName, FONT));
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, TYPE1)];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BASEFONT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(self->FontName_)];
  jboolean stdEncoding = [((NSString *) nil_chk(self->encoding_)) isEqual:@"Cp1252"] || [((NSString *) nil_chk(self->encoding_)) isEqual:@"MacRoman"];
  if (!self->fontSpecific_ || self->specialMap_ != nil) {
    for (jint k = firstChar; k <= lastChar; ++k) {
      if (![((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(self->differences_), k))) isEqual:ComAowagieTextPdfBaseFont_notdef]) {
        firstChar = k;
        break;
      }
    }
    if (stdEncoding) {
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENCODING) withComAowagieTextPdfPdfObject:[((NSString *) nil_chk(self->encoding_)) isEqual:@"Cp1252"] ? JreLoadStatic(ComAowagieTextPdfPdfName, WIN_ANSI_ENCODING) : JreLoadStatic(ComAowagieTextPdfPdfName, MAC_ROMAN_ENCODING)];
    }
    else {
      
#line 650
      ComAowagieTextPdfPdfDictionary *enc = new_ComAowagieTextPdfPdfDictionary_initWithComAowagieTextPdfPdfName_(JreLoadStatic(ComAowagieTextPdfPdfName, ENCODING));
      ComAowagieTextPdfPdfArray *dif = new_ComAowagieTextPdfPdfArray_init();
      jboolean gap = true;
      for (jint k = firstChar; k <= lastChar; ++k) {
        if (IOSByteArray_Get(nil_chk(shortTag), k) != 0) {
          if (gap) {
            [dif addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(k)];
            gap = false;
          }
          [dif addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(IOSObjectArray_Get(nil_chk(self->differences_), k))];
        }
        else {
          
#line 661
          gap = true;
        }
      }
      [enc putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DIFFERENCES) withComAowagieTextPdfPdfObject:dif];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENCODING) withComAowagieTextPdfPdfObject:enc];
    }
  }
  if (self->specialMap_ != nil || self->forceWidthsOutput_ || !(self->builtinFont_ && (self->fontSpecific_ || stdEncoding))) {
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FIRSTCHAR) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(firstChar)];
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LASTCHAR) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(lastChar)];
    ComAowagieTextPdfPdfArray *wd = new_ComAowagieTextPdfPdfArray_init();
    for (jint k = firstChar; k <= lastChar; ++k) {
      if (IOSByteArray_Get(nil_chk(shortTag), k) == 0) {
        [wd addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(0)];
      }
      else {
        
#line 676
        [wd addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(IOSIntArray_Get(nil_chk(self->widths_), k))];
      }
    }
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, WIDTHS) withComAowagieTextPdfPdfObject:wd];
  }
  if (!self->builtinFont_ && fontDescriptor != nil) {
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTDESCRIPTOR) withComAowagieTextPdfPdfObject:fontDescriptor];
  }
  return dic;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfType1Font)
