//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/codec/JBIG2SegmentReader.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JBIG2SegmentReader")
#ifdef RESTRICT_JBIG2SegmentReader
#define INCLUDE_ALL_JBIG2SegmentReader 0
#else
#define INCLUDE_ALL_JBIG2SegmentReader 1
#endif
#undef RESTRICT_JBIG2SegmentReader

#if !defined (ComAowagieTextPdfCodecJBIG2SegmentReader_) && (INCLUDE_ALL_JBIG2SegmentReader || defined(INCLUDE_ComAowagieTextPdfCodecJBIG2SegmentReader))
#define ComAowagieTextPdfCodecJBIG2SegmentReader_

@class ComAowagieTextPdfCodecJBIG2SegmentReader_JBIG2Page;
@class ComAowagieTextPdfRandomAccessFileOrArray;
@class IOSByteArray;

/*!
 @brief Class to read a JBIG2 file at a basic level: understand all the segments,
  understand what segments belong to which pages, how many pages there are,
  what the width and height of each page is, and global segments if there
  are any.Or: the minimum required to be able to take a normal sequential
  or random-access organized file, and be able to embed JBIG2 pages as images
  in a PDF.
 TODO: the indeterminate-segment-size value of dataLength, else?
 @since 2.1.5
 */
@interface ComAowagieTextPdfCodecJBIG2SegmentReader : NSObject

#pragma mark Public

- (instancetype)initPackagePrivateWithComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)ra;

- (void)read;

- (NSString *)description;

#pragma mark Package-Private

- (IOSByteArray *)getGlobalWithBoolean:(jboolean)for_embedding;

- (ComAowagieTextPdfCodecJBIG2SegmentReader_JBIG2Page *)getPageWithInt:(jint)page;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfCodecJBIG2SegmentReader)

FOUNDATION_EXPORT void ComAowagieTextPdfCodecJBIG2SegmentReader_initPackagePrivateWithComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfCodecJBIG2SegmentReader *self, ComAowagieTextPdfRandomAccessFileOrArray *ra);

FOUNDATION_EXPORT ComAowagieTextPdfCodecJBIG2SegmentReader *new_ComAowagieTextPdfCodecJBIG2SegmentReader_initPackagePrivateWithComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfRandomAccessFileOrArray *ra) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfCodecJBIG2SegmentReader *create_ComAowagieTextPdfCodecJBIG2SegmentReader_initPackagePrivateWithComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfRandomAccessFileOrArray *ra);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfCodecJBIG2SegmentReader)

#endif

#if !defined (ComAowagieTextPdfCodecJBIG2SegmentReader_JBIG2Page_) && (INCLUDE_ALL_JBIG2SegmentReader || defined(INCLUDE_ComAowagieTextPdfCodecJBIG2SegmentReader_JBIG2Page))
#define ComAowagieTextPdfCodecJBIG2SegmentReader_JBIG2Page_

@class IOSByteArray;

/*!
 @brief Inner class that holds information about a JBIG2 page.
 @since 2.1.5
 */
@interface ComAowagieTextPdfCodecJBIG2SegmentReader_JBIG2Page : NSObject {
 @public
  jint pageBitmapWidth_;
  jint pageBitmapHeight_;
}

#pragma mark Public

/*!
 @brief return as a single byte array the header-data for each segment in segment number
  order, EMBEDDED organization, but i am putting the needed segments in SEQUENTIAL organization.
 if for_embedding, skip the segment types that are known to be not for acrobat.
 @param for_embedding For embedding
 @return a byte array
 @throw IOExceptionon error
 */
- (IOSByteArray *)getDataWithBoolean:(jboolean)for_embedding;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfCodecJBIG2SegmentReader_JBIG2Page)

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfCodecJBIG2SegmentReader_JBIG2Page)

#endif

#pragma pop_macro("INCLUDE_ALL_JBIG2SegmentReader")
