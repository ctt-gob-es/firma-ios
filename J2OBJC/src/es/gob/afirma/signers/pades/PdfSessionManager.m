//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/signers/pades/PdfSessionManager.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/DocumentException.h"
#include "com/aowagie/text/Font.h"
#include "com/aowagie/text/Image.h"
#include "com/aowagie/text/Rectangle.h"
#include "com/aowagie/text/exceptions/BadPasswordException.h"
#include "com/aowagie/text/exceptions/InvalidPageNumberException.h"
#include "com/aowagie/text/pdf/PdfDate.h"
#include "com/aowagie/text/pdf/PdfName.h"
#include "com/aowagie/text/pdf/PdfObject.h"
#include "com/aowagie/text/pdf/PdfPKCS7.h"
#include "com/aowagie/text/pdf/PdfReader.h"
#include "com/aowagie/text/pdf/PdfSignature.h"
#include "com/aowagie/text/pdf/PdfSignatureAppearance.h"
#include "com/aowagie/text/pdf/PdfStamper.h"
#include "com/aowagie/text/pdf/PdfStamperImp.h"
#include "com/aowagie/text/pdf/PdfWriter.h"
#include "es/gob/afirma/core/AOException.h"
#include "es/gob/afirma/core/misc/AOUtil.h"
#include "es/gob/afirma/core/signers/AOSignConstants.h"
#include "es/gob/afirma/signers/pades/PdfPreProcessor.h"
#include "es/gob/afirma/signers/pades/PdfSessionManager.h"
#include "es/gob/afirma/signers/pades/PdfTriPhaseSession.h"
#include "es/gob/afirma/signers/pades/PdfUtil.h"
#include "es/gob/afirma/signers/pades/PdfVisibleAreasUtils.h"
#include "es/gob/afirma/signers/pades/XmpHelper.h"
#include "es/gob/afirma/signers/pades/common/BadPdfPasswordException.h"
#include "es/gob/afirma/signers/pades/common/PdfExtraParams.h"
#include "es/gob/afirma/signers/pades/common/PdfHasUnregisteredSignaturesException.h"
#include "es/gob/afirma/signers/pades/common/PdfIsPasswordProtectedException.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Calendar.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Properties.h"
#include "java/util/logging/Logger.h"

#if !__has_feature(objc_arc)
#error "es/gob/afirma/signers/pades/PdfSessionManager must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaSignersPadesPdfSessionManager ()

- (instancetype)init;

+ (NSString *)getDefaultLayer2TextWithBoolean:(jboolean)hasReason
                                  withBoolean:(jboolean)hasLocation;

@end

inline jint EsGobAfirmaSignersPadesPdfSessionManager_get_UNDEFINED(void);
#define EsGobAfirmaSignersPadesPdfSessionManager_UNDEFINED -1
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaSignersPadesPdfSessionManager, UNDEFINED, jint)

inline jint EsGobAfirmaSignersPadesPdfSessionManager_get_CSIZE(void);
#define EsGobAfirmaSignersPadesPdfSessionManager_CSIZE 27000
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaSignersPadesPdfSessionManager, CSIZE, jint)

inline JavaUtilLoggingLogger *EsGobAfirmaSignersPadesPdfSessionManager_get_LOGGER(void);
static JavaUtilLoggingLogger *EsGobAfirmaSignersPadesPdfSessionManager_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesPdfSessionManager, LOGGER, JavaUtilLoggingLogger *)

inline jint EsGobAfirmaSignersPadesPdfSessionManager_get_PDF_MAX_VERSION(void);
#define EsGobAfirmaSignersPadesPdfSessionManager_PDF_MAX_VERSION 7
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaSignersPadesPdfSessionManager, PDF_MAX_VERSION, jint)

inline jint EsGobAfirmaSignersPadesPdfSessionManager_get_PDF_MIN_VERSION(void);
#define EsGobAfirmaSignersPadesPdfSessionManager_PDF_MIN_VERSION 2
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaSignersPadesPdfSessionManager, PDF_MIN_VERSION, jint)

/*!
 @brief Rotaci&oacute;n de las firmas en grados (cuando se indica que deben rotarse).
 */
inline NSString *EsGobAfirmaSignersPadesPdfSessionManager_get_DEFAULT_SIGNATURE_ROTATION(void);
static NSString *EsGobAfirmaSignersPadesPdfSessionManager_DEFAULT_SIGNATURE_ROTATION = @"0";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesPdfSessionManager, DEFAULT_SIGNATURE_ROTATION, NSString *)

__attribute__((unused)) static void EsGobAfirmaSignersPadesPdfSessionManager_init(EsGobAfirmaSignersPadesPdfSessionManager *self);

__attribute__((unused)) static EsGobAfirmaSignersPadesPdfSessionManager *new_EsGobAfirmaSignersPadesPdfSessionManager_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobAfirmaSignersPadesPdfSessionManager *create_EsGobAfirmaSignersPadesPdfSessionManager_init(void);

__attribute__((unused)) static NSString *EsGobAfirmaSignersPadesPdfSessionManager_getDefaultLayer2TextWithBoolean_withBoolean_(jboolean hasReason, jboolean hasLocation);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/signers/pades/PdfSessionManager.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaSignersPadesPdfSessionManager)


#line 49
@implementation EsGobAfirmaSignersPadesPdfSessionManager

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 68
- (instancetype)init {
  EsGobAfirmaSignersPadesPdfSessionManager_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 84
+ (EsGobAfirmaSignersPadesPdfTriPhaseSession *)getSessionDataWithByteArray:(IOSByteArray *)pdfBytes
                                      withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
                                                      withJavaUtilCalendar:(JavaUtilCalendar *)signTime
                                                    withJavaUtilProperties:(JavaUtilProperties *)xParams
                                                               withBoolean:(jboolean)secureMode {
  return EsGobAfirmaSignersPadesPdfSessionManager_getSessionDataWithByteArray_withJavaSecurityCertCertificateArray_withJavaUtilCalendar_withJavaUtilProperties_withBoolean_(pdfBytes, certChain, signTime, xParams, secureMode);
}


#line 604
+ (NSString *)getDefaultLayer2TextWithBoolean:(jboolean)hasReason
                                  withBoolean:(jboolean)hasLocation {
  return EsGobAfirmaSignersPadesPdfSessionManager_getDefaultLayer2TextWithBoolean_withBoolean_(hasReason, hasLocation);
}


#line 624
+ (JavaUtilHashMap *)reserveSignSizesWithJavaUtilProperties:(JavaUtilProperties *)extraParams {
  return EsGobAfirmaSignersPadesPdfSessionManager_reserveSignSizesWithJavaUtilProperties_(extraParams);
}


#line 640
+ (jint)getReservedSignatureSizedWithJavaUtilProperties:(JavaUtilProperties *)extraParams {
  return EsGobAfirmaSignersPadesPdfSessionManager_getReservedSignatureSizedWithJavaUtilProperties_(extraParams);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaSignersPadesPdfTriPhaseSession;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x9, 5, 6, -1, 7, -1, -1 },
    { NULL, "I", 0x9, 8, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getSessionDataWithByteArray:withJavaSecurityCertCertificateArray:withJavaUtilCalendar:withJavaUtilProperties:withBoolean:);
  methods[2].selector = @selector(getDefaultLayer2TextWithBoolean:withBoolean:);
  methods[3].selector = @selector(reserveSignSizesWithJavaUtilProperties:);
  methods[4].selector = @selector(getReservedSignatureSizedWithJavaUtilProperties:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LAST_PAGE", "I", .constantValue.asInt = EsGobAfirmaSignersPadesPdfSessionManager_LAST_PAGE, 0x18, -1, -1, -1, -1 },
    { "NEW_PAGE", "I", .constantValue.asInt = EsGobAfirmaSignersPadesPdfSessionManager_NEW_PAGE, 0x18, -1, -1, -1, -1 },
    { "UNDEFINED", "I", .constantValue.asInt = EsGobAfirmaSignersPadesPdfSessionManager_UNDEFINED, 0x1a, -1, -1, -1, -1 },
    { "CSIZE", "I", .constantValue.asInt = EsGobAfirmaSignersPadesPdfSessionManager_CSIZE, 0x1a, -1, -1, -1, -1 },
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "PDF_MAX_VERSION", "I", .constantValue.asInt = EsGobAfirmaSignersPadesPdfSessionManager_PDF_MAX_VERSION, 0x1a, -1, -1, -1, -1 },
    { "PDF_MIN_VERSION", "I", .constantValue.asInt = EsGobAfirmaSignersPadesPdfSessionManager_PDF_MIN_VERSION, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_SIGNATURE_ROTATION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "getSessionData", "[B[LJavaSecurityCertCertificate;LJavaUtilCalendar;LJavaUtilProperties;Z", "LJavaIoIOException;LEsGobAfirmaSignersPadesInvalidPdfException;LEsGobAfirmaCoreAOException;", "getDefaultLayer2Text", "ZZ", "reserveSignSizes", "LJavaUtilProperties;", "(Ljava/util/Properties;)Ljava/util/HashMap<Lcom/aowagie/text/pdf/PdfName;Ljava/lang/Integer;>;", "getReservedSignatureSized", &EsGobAfirmaSignersPadesPdfSessionManager_LOGGER, &EsGobAfirmaSignersPadesPdfSessionManager_DEFAULT_SIGNATURE_ROTATION };
  static const J2ObjcClassInfo _EsGobAfirmaSignersPadesPdfSessionManager = { "PdfSessionManager", "es.gob.afirma.signers.pades", ptrTable, methods, fields, 7, 0x11, 5, 8, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaSignersPadesPdfSessionManager;
}

+ (void)initialize {
  if (self == [EsGobAfirmaSignersPadesPdfSessionManager class]) {
    EsGobAfirmaSignersPadesPdfSessionManager_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 60
    @"es.gob.afirma");
    J2OBJC_SET_INITIALIZED(EsGobAfirmaSignersPadesPdfSessionManager)
  }
}

@end


#line 68
void EsGobAfirmaSignersPadesPdfSessionManager_init(EsGobAfirmaSignersPadesPdfSessionManager *self) {
  NSObject_init(self);
}


#line 68
EsGobAfirmaSignersPadesPdfSessionManager *new_EsGobAfirmaSignersPadesPdfSessionManager_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaSignersPadesPdfSessionManager, init)
}


#line 68
EsGobAfirmaSignersPadesPdfSessionManager *create_EsGobAfirmaSignersPadesPdfSessionManager_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaSignersPadesPdfSessionManager, init)
}


#line 84
EsGobAfirmaSignersPadesPdfTriPhaseSession *EsGobAfirmaSignersPadesPdfSessionManager_getSessionDataWithByteArray_withJavaSecurityCertCertificateArray_withJavaUtilCalendar_withJavaUtilProperties_withBoolean_(IOSByteArray *pdfBytes, IOSObjectArray *certChain, JavaUtilCalendar *signTime, JavaUtilProperties *xParams, jboolean secureMode) {
  EsGobAfirmaSignersPadesPdfSessionManager_initialize();
  
#line 96
  JavaUtilProperties *extraParams = xParams != nil ? xParams : new_JavaUtilProperties_init();
  
#line 99
  jboolean doNotUseCertChainOnPostSign = JavaLangBoolean_parseBooleanWithNSString_(
#line 100
  [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_DO_NOT_USE_CERTCHAIN_ON_POSTSIGN]);
  
#line 103
  jint signatureRotation = JavaLangInteger_parseIntWithNSString_(
#line 104
  [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGNATURE_ROTATION withNSString:EsGobAfirmaSignersPadesPdfSessionManager_DEFAULT_SIGNATURE_ROTATION]);
  
#line 107
  ComAowagieTextImage *rubric = EsGobAfirmaSignersPadesPdfPreProcessor_getImageWithNSString_withBoolean_([extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGNATURE_RUBRIC_IMAGE], secureMode);
  
#line 110
  NSString *reason = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGN_REASON];
  
#line 113
  NSString *signatureField = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGNATURE_FIELD];
  
#line 116
  NSString *signatureProductionCity = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGNATURE_PRODUCTION_CITY];
  
#line 119
  NSString *signerContact = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGNER_CONTACT];
  
#line 121
  IOSByteArray *inPDF;
  @try {
    inPDF = EsGobAfirmaSignersPadesXmpHelper_addSignHistoryToXmpWithByteArray_withJavaUtilCalendar_withJavaUtilProperties_(pdfBytes, signTime, extraParams);
  }
  @catch (ComAowagieTextExceptionsBadPasswordException *e) {
    @throw new_EsGobAfirmaSignersPadesCommonPdfIsPasswordProtectedException_initWithNSString_withJavaLangThrowable_(@"El PDF esta protegido por contrasena para lectura", e);
  }
  @catch (JavaLangException *e1) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfSessionManager_LOGGER)) warningWithNSString:JreStrcat("$@", @"No ha podido registrarse la firma en el historico XMP: ", e1)];
    inPDF = pdfBytes;
  }
  
#line 133
  ComAowagieTextPdfPdfReader *pdfReader = EsGobAfirmaSignersPadesPdfUtil_getPdfReaderWithByteArray_withJavaUtilProperties_withBoolean_(inPDF, extraParams, JavaLangBoolean_parseBooleanWithNSString_(
#line 134
  [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_HEADLESS]));
  
#line 137
  NSString *signatureSubFilter = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGNATURE_SUBFILTER];
  
#line 140
  NSString *policyID = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_POLICY_IDENTIFIER];
  
#line 143
  NSString *profile = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_PROFILE];
  
#line 147
  if (policyID != nil || [((NSString *) nil_chk(EsGobAfirmaCoreSignersAOSignConstants_SIGN_PROFILE_BASELINE)) isEqual:profile]) {
    signatureSubFilter = EsGobAfirmaCoreSignersAOSignConstants_PADES_SUBFILTER_BES;
    (void) [extraParams setPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGNATURE_SUBFILTER withNSString:EsGobAfirmaCoreSignersAOSignConstants_PADES_SUBFILTER_BES];
  }
  
#line 153
  jint certificationLevel;
  @try {
    certificationLevel = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_CERTIFICATION_LEVEL] != nil ? JavaLangInteger_parseIntWithNSString_(
#line 156
    [((NSString *) nil_chk([extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_CERTIFICATION_LEVEL])) java_trim]) :
#line 157
    EsGobAfirmaSignersPadesPdfSessionManager_UNDEFINED;
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfSessionManager_LOGGER)) warningWithNSString:JreStrcat("$$$@", @"Se ha indicado un nivel de certificacion no valido ('",
#line 161
    [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_CERTIFICATION_LEVEL], @"'): ", e)];
    
#line 163
    certificationLevel = EsGobAfirmaSignersPadesPdfSessionManager_UNDEFINED;
  }
  
#line 167
  jint pdfVersion;
  @try {
    pdfVersion = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_PDF_VERSION] != nil ? JavaLangInteger_parseIntWithNSString_(
#line 170
    [((NSString *) nil_chk([extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_PDF_VERSION])) java_trim]) :
#line 171
    EsGobAfirmaSignersPadesPdfSessionManager_PDF_MAX_VERSION;
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfSessionManager_LOGGER)) warningWithNSString:JreStrcat("$I$@", @"Error en el establecimiento de la version PDF, se usara ", EsGobAfirmaSignersPadesPdfSessionManager_PDF_MAX_VERSION, @": ", e)];
    pdfVersion = EsGobAfirmaSignersPadesPdfSessionManager_PDF_MAX_VERSION;
  }
  if (pdfVersion != EsGobAfirmaSignersPadesPdfSessionManager_UNDEFINED && (pdfVersion < EsGobAfirmaSignersPadesPdfSessionManager_PDF_MIN_VERSION || pdfVersion > EsGobAfirmaSignersPadesPdfSessionManager_PDF_MAX_VERSION)) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfSessionManager_LOGGER)) warningWithNSString:JreStrcat("$I", @"Se ha establecido un valor invalido para version, se ignorara: ", pdfVersion)];
    pdfVersion = EsGobAfirmaSignersPadesPdfSessionManager_UNDEFINED;
  }
  
#line 184
  IOSByteArray *xmpBytes = [((ComAowagieTextPdfPdfReader *) nil_chk(pdfReader)) getMetadata];
  jboolean pdfA1 = EsGobAfirmaSignersPadesPdfUtil_isPdfA1WithByteArray_(xmpBytes);
  if (pdfA1) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfSessionManager_LOGGER)) infoWithNSString:@"Detectado PDF-A1, no se comprimira el PDF"];
  }
  
#line 196
  NSString *layer4Text = nil;
  NSString *layer2Text = nil;
  ComAowagieTextFont *layer2Font = nil;
  if (EsGobAfirmaSignersPadesPdfVisibleAreasUtils_isVisibleSignatureWithJavaUtilProperties_(extraParams)) {
    
#line 202
    jboolean obfuscate = true;
    if ([extraParams containsKeyWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_OBFUSCATE_CERT_DATA]) {
      obfuscate = JavaLangBoolean_parseBooleanWithNSString_([extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_OBFUSCATE_CERT_DATA]);
    }
    else if (EsGobAfirmaCoreMiscAOUtil_isPseudonymCertWithJavaSecurityCertX509Certificate_((JavaSecurityCertX509Certificate *) cast_chk(IOSObjectArray_Get(nil_chk(certChain), 0), [JavaSecurityCertX509Certificate class]))) {
      obfuscate = false;
    }
    
#line 210
    NSString *pdfMaskConfig = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_OBFUSCATION_MASK];
    
#line 213
    layer4Text = EsGobAfirmaSignersPadesPdfVisibleAreasUtils_getLayerTextWithNSString_withJavaSecurityCertX509Certificate_withJavaUtilCalendar_withNSString_withNSString_withNSString_withBoolean_withNSString_(
#line 214
    [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_LAYER4_TEXT],
#line 215
    certChain != nil && certChain->size_ > 0 ? (JavaSecurityCertX509Certificate *) cast_chk(IOSObjectArray_Get(certChain, 0), [JavaSecurityCertX509Certificate class]) : nil,
#line 216
    signTime,
#line 217
    reason,
#line 218
    signatureProductionCity,
#line 219
    signerContact,
#line 220
    obfuscate,
#line 221
    pdfMaskConfig);
    
#line 225
    NSString *configuredLayer2Text = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_LAYER2_TEXT];
    if (configuredLayer2Text == nil && ![extraParams containsKeyWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGNATURE_RUBRIC_IMAGE]) {
      configuredLayer2Text = EsGobAfirmaSignersPadesPdfSessionManager_getDefaultLayer2TextWithBoolean_withBoolean_(reason != nil, signatureProductionCity != nil);
    }
    layer2Text = EsGobAfirmaSignersPadesPdfVisibleAreasUtils_getLayerTextWithNSString_withJavaSecurityCertX509Certificate_withJavaUtilCalendar_withNSString_withNSString_withNSString_withBoolean_withNSString_(
#line 230
    configuredLayer2Text,
#line 231
    certChain != nil && certChain->size_ > 0 ? (JavaSecurityCertX509Certificate *) cast_chk(IOSObjectArray_Get(certChain, 0), [JavaSecurityCertX509Certificate class]) : nil,
#line 232
    signTime,
#line 233
    reason,
#line 234
    signatureProductionCity,
#line 235
    signerContact,
#line 236
    obfuscate,
#line 237
    pdfMaskConfig);
    
#line 241
    jint layer2FontFamily;
    @try {
      layer2FontFamily = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_LAYER2_FONTFAMILY] != nil ? JavaLangInteger_parseIntWithNSString_(
#line 244
      [((NSString *) nil_chk([extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_LAYER2_FONTFAMILY])) java_trim]) :
#line 245
      EsGobAfirmaSignersPadesPdfSessionManager_UNDEFINED;
    }
    @catch (JavaLangException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfSessionManager_LOGGER)) warningWithNSString:JreStrcat("$$$@", @"Se ha indicado un tipo de letra no valido para la capa 2 del PDF ('",
#line 249
      [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_LAYER2_FONTFAMILY], @"'): ", e)];
      
#line 251
      layer2FontFamily = EsGobAfirmaSignersPadesPdfSessionManager_UNDEFINED;
    }
    
#line 255
    jint layer2FontSize;
    @try {
      layer2FontSize = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_LAYER2_FONTSIZE] != nil ? JavaLangInteger_parseIntWithNSString_(
#line 258
      [((NSString *) nil_chk([extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_LAYER2_FONTSIZE])) java_trim]) :
#line 259
      EsGobAfirmaSignersPadesPdfSessionManager_UNDEFINED;
    }
    @catch (JavaLangException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfSessionManager_LOGGER)) warningWithNSString:JreStrcat("$$$@", @"Se ha indicado un tamano de letra no valido para la capa 2 del PDF ('",
#line 263
      [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_LAYER2_FONTSIZE], @"'): ", e)];
      
#line 265
      layer2FontSize = EsGobAfirmaSignersPadesPdfSessionManager_UNDEFINED;
    }
    
#line 269
    jint layer2FontStyle;
    @try {
      layer2FontStyle = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_LAYER2_FONTSTYLE] != nil ? JavaLangInteger_parseIntWithNSString_(
#line 272
      [((NSString *) nil_chk([extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_LAYER2_FONTSTYLE])) java_trim]) :
#line 273
      EsGobAfirmaSignersPadesPdfSessionManager_UNDEFINED;
    }
    @catch (JavaLangException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfSessionManager_LOGGER)) warningWithNSString:JreStrcat("$$$@", @"Se ha indicado un estilo de letra no valido para la capa 2 del PDF ('",
#line 277
      [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_LAYER2_FONTSTYLE], @"'): ", e)];
      
#line 279
      layer2FontStyle = EsGobAfirmaSignersPadesPdfSessionManager_UNDEFINED;
    }
    
#line 283
    NSString *layer2FontColor = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_LAYER2_FONTCOLOR];
    
#line 285
    layer2Font = EsGobAfirmaSignersPadesPdfVisibleAreasUtils_getFontWithInt_withInt_withInt_withNSString_withBoolean_(
#line 286
    layer2FontFamily,
#line 287
    layer2FontSize,
#line 288
    layer2FontStyle,
#line 289
    layer2FontColor,
#line 290
    pdfA1);
  }
  
#line 300
  EsGobAfirmaSignersPadesPdfUtil_checkPdfCertificationWithInt_withJavaUtilProperties_([pdfReader getCertificationLevel], extraParams);
  
#line 303
  if (EsGobAfirmaSignersPadesPdfUtil_pdfHasUnregisteredSignaturesWithComAowagieTextPdfPdfReader_(pdfReader)) {
    NSString *allowUnregisteredSignatureValue = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_ALLOW_COSIGNING_UNREGISTERED_SIGNATURES];
    
#line 306
    if (allowUnregisteredSignatureValue == nil || [((NSString *) nil_chk([allowUnregisteredSignatureValue java_trim])) java_isEmpty]) {
      @throw new_EsGobAfirmaSignersPadesCommonPdfHasUnregisteredSignaturesException_initWithNSString_(@"El PDF contiene firmas sin registrar");
    }
    
#line 310
    if (!JavaLangBoolean_parseBooleanWithNSString_(allowUnregisteredSignatureValue)) {
      @throw new_EsGobAfirmaCoreAOException_initWithNSString_(@"El PDF contiene firmas sin registrar y estas no estan permitidas");
    }
  }
  
#line 317
  [pdfReader removeUsageRights];
  
#line 319
  JavaIoByteArrayOutputStream *baos = new_JavaIoByteArrayOutputStream_init();
  
#line 352
  ComAowagieTextPdfPdfStamper *stp;
  
#line 354
  @try {
    stp = ComAowagieTextPdfPdfStamper_createSignatureWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withJavaIoFile_withBoolean_withJavaUtilCalendar_(pdfReader,
#line 356
    baos,
#line 357
    pdfVersion == EsGobAfirmaSignersPadesPdfSessionManager_UNDEFINED ? 0x0000 : IOSCharArray_Get(nil_chk(
#line 358
    [((NSString *) nil_chk(JavaLangInteger_toStringWithInt_(pdfVersion))) java_toCharArray]), 0),
#line 359
    nil, EsGobAfirmaSignersPadesPdfUtil_getAppendModeWithJavaUtilProperties_withComAowagieTextPdfPdfReader_(
#line 360
    extraParams, pdfReader),
#line 361
    signTime);
  }
  @catch (
#line 364
  ComAowagieTextDocumentException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfSessionManager_LOGGER)) severeWithNSString:JreStrcat("$@", @"Error al crear la firma para estampar: ", e)];
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(@"Error al crear la firma para estampar", e);
  }
  @catch (ComAowagieTextExceptionsBadPasswordException *e) {
    
#line 371
    if ([extraParams containsKeyWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_OWNER_PASSWORD_STRING] || [extraParams containsKeyWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_USER_PASSWORD_STRING]) {
      @throw new_EsGobAfirmaSignersPadesCommonBadPdfPasswordException_initWithNSString_withJavaLangThrowable_(@"La contrasena del PDF es incorrecta", e);
    }
    @throw new_EsGobAfirmaSignersPadesCommonPdfIsPasswordProtectedException_initWithNSString_withJavaLangThrowable_(@"El PDF esta protegido contra modificaciones", e);
  }
  
#line 378
  id<JavaUtilList> pages = nil;
  ComAowagieTextRectangle *signaturePositionOnPage = EsGobAfirmaSignersPadesPdfVisibleAreasUtils_getSignaturePositionOnPageWithJavaUtilProperties_(extraParams);
  if (signaturePositionOnPage != nil) {
    
#line 382
    jint totalPages = [pdfReader getNumberOfPages];
    
#line 385
    pages = EsGobAfirmaSignersPadesPdfUtil_getPagesWithJavaUtilProperties_withInt_(extraParams, totalPages);
    
#line 390
    if ([((id<JavaUtilList>) nil_chk(pages)) containsWithId:JavaLangInteger_valueOfWithInt_(EsGobAfirmaSignersPadesPdfSessionManager_NEW_PAGE)] && signatureField == nil) {
      [((ComAowagieTextPdfPdfStamper *) nil_chk(stp)) insertPageWithInt:totalPages + 1 withComAowagieTextRectangle:[pdfReader getPageSizeWithRotationWithInt:1]];
      
#line 393
      [pages removeWithId:JavaLangInteger_valueOfWithInt_(EsGobAfirmaSignersPadesPdfSessionManager_NEW_PAGE)];
      [pages addWithId:JavaLangInteger_valueOfWithInt_(totalPages + 1)];
    }
    
#line 401
    EsGobAfirmaSignersPadesPdfUtil_correctPositionSignatureWithComAowagieTextPdfPdfReader_withJavaUtilList_withComAowagieTextRectangle_(pdfReader, pages, signaturePositionOnPage);
  }
  
#line 404
  ComAowagieTextPdfPdfSignatureAppearance *sap = [((ComAowagieTextPdfPdfStamper *) nil_chk(stp)) getSignatureAppearance];
  
#line 408
  if (pdfVersion > EsGobAfirmaSignersPadesPdfSessionManager_PDF_MIN_VERSION && !pdfA1 &&
#line 409
  ![@"false" java_equalsIgnoreCase:[extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_COMPRESS_PDF]]) {
    [stp setFullCompression];
  }
  
#line 414
  jboolean includeQuestionMark = JavaLangBoolean_parseBooleanWithNSString_(
#line 415
  [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_INCLUDE_QUESTION_MARK]);
  if (includeQuestionMark) {
    [((ComAowagieTextPdfPdfSignatureAppearance *) nil_chk(sap)) setAcro6LayersWithBoolean:false];
    [sap setLayer4TextWithNSString:ComAowagieTextPdfPdfSignatureAppearance_questionMark];
  }
  else {
    [((ComAowagieTextPdfPdfSignatureAppearance *) nil_chk(sap)) setAcro6LayersWithBoolean:true];
  }
  
#line 424
  EsGobAfirmaSignersPadesPdfUtil_enableLtvWithComAowagieTextPdfPdfStamper_(stp);
  
#line 427
  EsGobAfirmaSignersPadesPdfPreProcessor_attachFileWithJavaUtilProperties_withComAowagieTextPdfPdfStamper_withBoolean_(extraParams, stp, secureMode);
  
#line 430
  EsGobAfirmaSignersPadesPdfPreProcessor_addImageWithJavaUtilProperties_withComAowagieTextPdfPdfStamper_withComAowagieTextPdfPdfReader_withBoolean_(extraParams, stp, pdfReader, secureMode);
  
#line 437
  [sap setRenderWithInt:ComAowagieTextPdfPdfSignatureAppearance_SignatureRenderDescription];
  
#line 440
  if (reason != nil) {
    [sap setReasonWithNSString:reason];
  }
  
#line 444
  [sap setSignDateWithJavaUtilCalendar:signTime];
  
#line 446
  [sap setCryptoWithJavaSecurityPrivateKey:
#line 447
  nil withJavaSecurityCertCertificateArray:
#line 448
  doNotUseCertChainOnPostSign ? nil : certChain withJavaSecurityCertCRLArray:
#line 449
  nil withComAowagieTextPdfPdfName:
#line 450
  nil];
  
#line 454
  if (signatureProductionCity != nil) {
    [sap setLocationWithNSString:signatureProductionCity];
  }
  
#line 459
  if (signerContact != nil) {
    [sap setContactWithNSString:signerContact];
  }
  
#line 465
  if (rubric != nil) {
    [sap setLayer2TextWithNSString:@""];
    [sap setLayer4TextWithNSString:@""];
  }
  
#line 474
  if (EsGobAfirmaSignersPadesPdfVisibleAreasUtils_isVisibleSignatureWithJavaUtilProperties_(extraParams)) {
    
#line 477
    if (layer2Text != nil) {
      [sap setLayer2TextWithNSString:layer2Text];
    }
    if (layer2Font != nil) {
      [sap setLayer2FontWithComAowagieTextFont:layer2Font];
    }
    
#line 485
    if (layer4Text != nil) {
      [sap setLayer4TextWithNSString:layer4Text];
    }
    
#line 490
    if (signaturePositionOnPage != nil && signatureField == nil) {
      
#line 492
      @try {
        
#line 494
        if (signatureRotation == 0) {
          
#line 497
          if (rubric != nil) {
            [sap setImageWithComAowagieTextImage:rubric];
            
#line 502
            [sap setImageScaleWithFloat:-1];
          }
        }
        else {
          
#line 509
          ComAowagieTextImage *rotatedRubric = EsGobAfirmaSignersPadesPdfVisibleAreasUtils_buildRotatedSignatureImageWithComAowagieTextPdfPdfStamper_withComAowagieTextPdfPdfSignatureAppearance_withComAowagieTextRectangle_withInt_withComAowagieTextImage_(
#line 510
          stp,
#line 511
          sap,
#line 512
          signaturePositionOnPage,
#line 513
          signatureRotation,
#line 514
          rubric);
          
#line 519
          [sap setLayer2TextWithNSString:@""];
          
#line 522
          [sap setImageWithComAowagieTextImage:rotatedRubric];
        }
        
#line 526
        [sap setVisibleSignatureWithComAowagieTextRectangle:signaturePositionOnPage withInt:pages != nil ? [((JavaLangInteger *) nil_chk([pages getWithInt:0])) intValue] : [pdfReader getNumberOfPages] withNSString:nil];
      }
      @catch (ComAowagieTextExceptionsInvalidPageNumberException *e) {
        [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfSessionManager_LOGGER)) warningWithNSString:JreStrcat("$@", @"Numero de pagina incorrecto. La firma no sera visible: ", e)];
      }
      @catch (ComAowagieTextDocumentException *e) {
        @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error en la insercion de la firma rotada: ", e), e);
      }
    }
    else
#line 536
    if (signatureField != nil) {
      [sap setVisibleSignatureWithNSString:signatureField];
    }
  }
  
#line 545
  ComAowagieTextPdfPdfSignature *dic = new_ComAowagieTextPdfPdfSignature_initWithComAowagieTextPdfPdfName_withComAowagieTextPdfPdfName_(JreLoadStatic(ComAowagieTextPdfPdfName, ADOBE_PPKLITE),
#line 547
  signatureSubFilter != nil && ![signatureSubFilter java_isEmpty] ? new_ComAowagieTextPdfPdfName_initWithNSString_(
#line 548
  signatureSubFilter) : new_ComAowagieTextPdfPdfName_initWithNSString_(
#line 549
  EsGobAfirmaCoreSignersAOSignConstants_PADES_SUBFILTER_BES));
  
#line 553
  if ([sap getSignDate] != nil) {
    [dic setDateWithComAowagieTextPdfPdfDate:new_ComAowagieTextPdfPdfDate_initWithJavaUtilCalendar_([sap getSignDate])];
  }
  
#line 557
  if (certChain != nil && certChain->size_ > 0 && !doNotUseCertChainOnPostSign) {
    [dic setNameWithNSString:[((ComAowagieTextPdfPdfPKCS7_X509Name *) nil_chk(ComAowagieTextPdfPdfPKCS7_getSubjectFieldsWithJavaSecurityCertX509Certificate_((JavaSecurityCertX509Certificate *) cast_chk(IOSObjectArray_Get(certChain, 0), [JavaSecurityCertX509Certificate class])))) getFieldWithNSString:@"CN"]];
  }
  
#line 561
  if ([sap getReason] != nil) {
    [dic setReasonWithNSString:[sap getReason]];
  }
  
#line 566
  if ([sap getLocation] != nil) {
    [dic setLocationWithNSString:[sap getLocation]];
  }
  
#line 571
  if ([sap getContact] != nil) {
    [dic setContactWithNSString:[sap getContact]];
  }
  
#line 575
  [sap setCryptoDictionaryWithComAowagieTextPdfPdfDictionary:dic];
  
#line 579
  if (certificationLevel != EsGobAfirmaSignersPadesPdfSessionManager_UNDEFINED) {
    [sap setCertificationLevelWithInt:certificationLevel];
  }
  
#line 584
  if (pdfVersion != EsGobAfirmaSignersPadesPdfSessionManager_UNDEFINED) {
    [((ComAowagieTextPdfPdfWriter *) nil_chk([stp getWriter])) setPdfVersionWithChar:IOSCharArray_Get(nil_chk([((NSString *) nil_chk(JavaLangInteger_toStringWithInt_(pdfVersion))) java_toCharArray]), 0)];
  }
  
#line 589
  JavaUtilHashMap *exc = EsGobAfirmaSignersPadesPdfSessionManager_reserveSignSizesWithJavaUtilProperties_(extraParams);
  
#line 591
  @try {
    [sap preCloseWithJavaUtilHashMap:exc withJavaUtilCalendar:signTime withJavaUtilList:pages];
  }
  @catch (ComAowagieTextDocumentException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfSessionManager_LOGGER)) severeWithNSString:JreStrcat("$@", @"Error al estampar la firma: ", e)];
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(@"Error al estampar la firma", e);
  }
  
#line 599
  ComAowagieTextPdfPdfObject *pdfObject = [((ComAowagieTextPdfPdfStamperImp *) nil_chk(((ComAowagieTextPdfPdfStamperImp *) cast_chk([stp getWriter], [ComAowagieTextPdfPdfStamperImp class])))) getFileID];
  
#line 601
  return new_EsGobAfirmaSignersPadesPdfTriPhaseSession_initWithComAowagieTextPdfPdfSignatureAppearance_withJavaIoByteArrayOutputStream_withNSString_(sap, baos, [NSString java_stringWithBytes:[((ComAowagieTextPdfPdfObject *) nil_chk(pdfObject)) getBytes]]);
}


#line 604
NSString *EsGobAfirmaSignersPadesPdfSessionManager_getDefaultLayer2TextWithBoolean_withBoolean_(jboolean hasReason, jboolean hasLocation) {
  EsGobAfirmaSignersPadesPdfSessionManager_initialize();
  
#line 605
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_init();
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Firmado por "])) appendWithNSString:
#line 607
  EsGobAfirmaSignersPadesPdfVisibleAreasUtils_LAYERTEXT_TAG_SUBJECTCN])) appendWithChar:0x000a])) appendWithNSString:
#line 608
  @"Fecha: "])) appendWithNSString:EsGobAfirmaSignersPadesPdfVisibleAreasUtils_LAYERTEXT_TAG_DATE_PREFIX])) appendWithNSString:@"=dd/MM/yyyy HH:mm:ss z$$"];
  if (hasReason) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:0x000a])) appendWithNSString:@"Motivo: "])) appendWithNSString:EsGobAfirmaSignersPadesPdfVisibleAreasUtils_LAYERTEXT_TAG_REASON];
  }
  if (hasLocation) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:0x000a])) appendWithNSString:@"Lugar de firma: "])) appendWithNSString:EsGobAfirmaSignersPadesPdfVisibleAreasUtils_LAYERTEXT_TAG_LOCATION];
  }
  return [buf description];
}


#line 624
JavaUtilHashMap *EsGobAfirmaSignersPadesPdfSessionManager_reserveSignSizesWithJavaUtilProperties_(JavaUtilProperties *extraParams) {
  EsGobAfirmaSignersPadesPdfSessionManager_initialize();
  jint sizeParamInt = EsGobAfirmaSignersPadesPdfSessionManager_getReservedSignatureSizedWithJavaUtilProperties_(extraParams);
  
#line 628
  JavaUtilHashMap *exc = new_JavaUtilHashMap_init();
  (void) [exc putWithId:JreLoadStatic(ComAowagieTextPdfPdfName, CONTENTS) withId:JavaLangInteger_valueOfWithInt_(sizeParamInt * 2 + 2)];
  
#line 631
  return exc;
}


#line 640
jint EsGobAfirmaSignersPadesPdfSessionManager_getReservedSignatureSizedWithJavaUtilProperties_(JavaUtilProperties *extraParams) {
  EsGobAfirmaSignersPadesPdfSessionManager_initialize();
  
#line 641
  jint sizeParamInt = EsGobAfirmaSignersPadesPdfSessionManager_CSIZE;
  NSString *reservedSizeParam = [((JavaUtilProperties *) nil_chk(extraParams)) getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGN_RESERVED_SIZE];
  if (reservedSizeParam != nil && ![reservedSizeParam java_isEmpty]) {
    @try {
      sizeParamInt = JavaLangInteger_parseIntWithNSString_(reservedSizeParam);
    }
    @catch (
#line 646
    JavaLangNumberFormatException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfSessionManager_LOGGER)) warningWithNSString:JreStrcat("$$$I$@", @"El valor de la propiedad ",
#line 648
      EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGN_RESERVED_SIZE, @" no es valido, se le asignara el valor por defecto (",
#line 649
      EsGobAfirmaSignersPadesPdfSessionManager_CSIZE, @"):", e)];
    }
  }
  return sizeParamInt;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaSignersPadesPdfSessionManager)
