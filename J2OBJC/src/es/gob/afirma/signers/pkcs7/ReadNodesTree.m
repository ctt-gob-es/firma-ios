//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/signers/pkcs7/ReadNodesTree.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/afirma/core/misc/AOUtil.h"
#include "es/gob/afirma/core/signers/AOSimpleSignInfo.h"
#include "es/gob/afirma/core/util/tree/AOTreeModel.h"
#include "es/gob/afirma/core/util/tree/AOTreeNode.h"
#include "es/gob/afirma/signers/pkcs7/AOAlgorithmID.h"
#include "es/gob/afirma/signers/pkcs7/ReadNodesTree.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/math/BigInteger.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateFactory.h"
#include "java/security/cert/X509Certificate.h"
#include "java/text/ParseException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/List.h"
#include "java/util/logging/Logger.h"
#include "org/spongycastle/asn1/ASN1Encodable.h"
#include "org/spongycastle/asn1/ASN1GeneralizedTime.h"
#include "org/spongycastle/asn1/ASN1InputStream.h"
#include "org/spongycastle/asn1/ASN1Integer.h"
#include "org/spongycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/spongycastle/asn1/ASN1OctetString.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/ASN1Sequence.h"
#include "org/spongycastle/asn1/ASN1Set.h"
#include "org/spongycastle/asn1/ASN1TaggedObject.h"
#include "org/spongycastle/asn1/ASN1UTCTime.h"
#include "org/spongycastle/asn1/cms/Attribute.h"
#include "org/spongycastle/asn1/cms/CMSAttributes.h"
#include "org/spongycastle/asn1/cms/IssuerAndSerialNumber.h"
#include "org/spongycastle/asn1/cms/SignedData.h"
#include "org/spongycastle/asn1/cms/SignerInfo.h"
#include "org/spongycastle/asn1/pkcs/PKCSObjectIdentifiers.h"
#include "org/spongycastle/asn1/x509/AlgorithmIdentifier.h"

#if !__has_feature(objc_arc)
#error "es/gob/afirma/signers/pkcs7/ReadNodesTree must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaSignersPkcs7ReadNodesTree () {
 @public
  NSString *stringRetorn_;
  EsGobAfirmaCoreUtilTreeAOTreeNode *rama_;
  EsGobAfirmaCoreUtilTreeAOTreeNode *rama2_;
  IOSIntArray *seleccionados_;
  id<JavaUtilList> lista_;
  id<JavaUtilList> listaCert_;
}

+ (NSString *)getSignatureAlgorithmWithOrgSpongycastleAsn1CmsSignerInfo:(OrgSpongycastleAsn1CmsSignerInfo *)signerInfo;

+ (NSString *)translateDigestOidWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid;

+ (NSString *)translateEncryptionOidWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid;

/*!
 @brief M&eacute;todo para obtener las contrafirmas.
 @param withCertificates <code> true </code>  para hacer la obtenci &oacute; n con certificados,  <code> false </code>                          en caso contrario.
 @param signerInfouAtrib Atributos en los que puede estar la contrafirma.
 @param ramahija Rama hija donde buscar los siguientes nodos.
 @param certificates Certificados.
 */
- (void)getUnsignedAtributesWithBoolean:(jboolean)withCertificates
         withOrgSpongycastleAsn1ASN1Set:(OrgSpongycastleAsn1ASN1Set *)signerInfouAtrib
  withEsGobAfirmaCoreUtilTreeAOTreeNode:(EsGobAfirmaCoreUtilTreeAOTreeNode *)ramahija
         withOrgSpongycastleAsn1ASN1Set:(OrgSpongycastleAsn1ASN1Set *)certificates;

+ (jboolean)isValideAttributeTypeWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)attributeType;

/*!
 @brief M&eacute;todo que, apartir de un numero de serie de un certificado,
  devuelve su nombre com&uacute;n (CN).De no existir el CN,
  devolver&aacute; el nombre de la unidad organizativa.
 @param certificates Certificados de los firmantes.
 @param serialNumber N
  &uacute; mero de serie del certificado a firmar.
 @return El nombre com&uacute;n.
 */
+ (NSString *)searchNameWithOrgSpongycastleAsn1ASN1Set:(OrgSpongycastleAsn1ASN1Set *)certificates
                    withOrgSpongycastleAsn1ASN1Integer:(OrgSpongycastleAsn1ASN1Integer *)serialNumber;

/*!
 @brief A partir de un numero de serie de un certificado, devuelve un array con
  el certificado y su cadena de confianza.
 @param certificates Certificados de los firmantes.
 @param serialNumber N
  &uacute; mero de serie del certificado a firmar.
 @return El certificado (en la posici&oacute;n 0 y su cadena de confianza
          en orden).
 */
+ (IOSObjectArray *)searchCertWithOrgSpongycastleAsn1ASN1Set:(OrgSpongycastleAsn1ASN1Set *)certificates
                          withOrgSpongycastleAsn1ASN1Integer:(OrgSpongycastleAsn1ASN1Integer *)serialNumber;

+ (JavaUtilDate *)getSigningTimeWithOrgSpongycastleAsn1CmsSignerInfo:(OrgSpongycastleAsn1CmsSignerInfo *)si;

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaSignersPkcs7ReadNodesTree, stringRetorn_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaSignersPkcs7ReadNodesTree, rama_, EsGobAfirmaCoreUtilTreeAOTreeNode *)
J2OBJC_FIELD_SETTER(EsGobAfirmaSignersPkcs7ReadNodesTree, rama2_, EsGobAfirmaCoreUtilTreeAOTreeNode *)
J2OBJC_FIELD_SETTER(EsGobAfirmaSignersPkcs7ReadNodesTree, seleccionados_, IOSIntArray *)
J2OBJC_FIELD_SETTER(EsGobAfirmaSignersPkcs7ReadNodesTree, lista_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EsGobAfirmaSignersPkcs7ReadNodesTree, listaCert_, id<JavaUtilList>)

inline JavaUtilLoggingLogger *EsGobAfirmaSignersPkcs7ReadNodesTree_get_LOGGER(void);
static JavaUtilLoggingLogger *EsGobAfirmaSignersPkcs7ReadNodesTree_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPkcs7ReadNodesTree, LOGGER, JavaUtilLoggingLogger *)

__attribute__((unused)) static NSString *EsGobAfirmaSignersPkcs7ReadNodesTree_getSignatureAlgorithmWithOrgSpongycastleAsn1CmsSignerInfo_(OrgSpongycastleAsn1CmsSignerInfo *signerInfo);

__attribute__((unused)) static NSString *EsGobAfirmaSignersPkcs7ReadNodesTree_translateDigestOidWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(OrgSpongycastleAsn1ASN1ObjectIdentifier *oid);

__attribute__((unused)) static NSString *EsGobAfirmaSignersPkcs7ReadNodesTree_translateEncryptionOidWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(OrgSpongycastleAsn1ASN1ObjectIdentifier *oid);

__attribute__((unused)) static void EsGobAfirmaSignersPkcs7ReadNodesTree_getUnsignedAtributesWithBoolean_withOrgSpongycastleAsn1ASN1Set_withEsGobAfirmaCoreUtilTreeAOTreeNode_withOrgSpongycastleAsn1ASN1Set_(EsGobAfirmaSignersPkcs7ReadNodesTree *self, jboolean withCertificates, OrgSpongycastleAsn1ASN1Set *signerInfouAtrib, EsGobAfirmaCoreUtilTreeAOTreeNode *ramahija, OrgSpongycastleAsn1ASN1Set *certificates);

__attribute__((unused)) static jboolean EsGobAfirmaSignersPkcs7ReadNodesTree_isValideAttributeTypeWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(OrgSpongycastleAsn1ASN1ObjectIdentifier *attributeType);

__attribute__((unused)) static NSString *EsGobAfirmaSignersPkcs7ReadNodesTree_searchNameWithOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1ASN1Integer_(OrgSpongycastleAsn1ASN1Set *certificates, OrgSpongycastleAsn1ASN1Integer *serialNumber);

__attribute__((unused)) static IOSObjectArray *EsGobAfirmaSignersPkcs7ReadNodesTree_searchCertWithOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1ASN1Integer_(OrgSpongycastleAsn1ASN1Set *certificates, OrgSpongycastleAsn1ASN1Integer *serialNumber);

__attribute__((unused)) static JavaUtilDate *EsGobAfirmaSignersPkcs7ReadNodesTree_getSigningTimeWithOrgSpongycastleAsn1CmsSignerInfo_(OrgSpongycastleAsn1CmsSignerInfo *si);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/signers/pkcs7/ReadNodesTree.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaSignersPkcs7ReadNodesTree)


#line 47
@implementation EsGobAfirmaSignersPkcs7ReadNodesTree

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 47
- (instancetype)init {
  EsGobAfirmaSignersPkcs7ReadNodesTree_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 58
- (IOSIntArray *)getSeleccionados {
  return self->seleccionados_ != nil ? [self->seleccionados_ java_clone] : nil;
}

- (void)setSeleccionadosWithIntArray:(IOSIntArray *)seleccionados {
  self->seleccionados_ = [((IOSIntArray *) nil_chk(seleccionados)) java_clone];
}

- (NSString *)getStringRetorn {
  return self->stringRetorn_;
}

- (void)setStringRetornWithNSString:(NSString *)stringRetorn {
  self->stringRetorn_ = stringRetorn;
}


#line 84
- (EsGobAfirmaCoreUtilTreeAOTreeModel *)readNodesTreeWithByteArray:(IOSByteArray *)data
                                                       withBoolean:(jboolean)asSimpleSignInfo {
  
#line 87
  OrgSpongycastleAsn1ASN1Sequence *dsq;
  {
    OrgSpongycastleAsn1ASN1InputStream *is = new_OrgSpongycastleAsn1ASN1InputStream_initWithByteArray_(data);
    JavaLangThrowable *__primaryException1 = nil;
    
#line 88
    @try {
      
#line 91
      dsq = (OrgSpongycastleAsn1ASN1Sequence *) cast_chk([is readObject], [OrgSpongycastleAsn1ASN1Sequence class]);
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (is != nil) {
        if (__primaryException1 != nil) {
          @try {
            [is close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [is close];
        }
      }
    }
  }
  
#line 93
  id<JavaUtilEnumeration> contentsData = [((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(dsq)) getObjects];
  
#line 96
  (void) [((id<JavaUtilEnumeration>) nil_chk(contentsData)) nextElement];
  
#line 99
  OrgSpongycastleAsn1ASN1TaggedObject *doj = (OrgSpongycastleAsn1ASN1TaggedObject *) cast_chk([contentsData nextElement], [OrgSpongycastleAsn1ASN1TaggedObject class]);
  OrgSpongycastleAsn1ASN1Sequence *contentSignedData = (OrgSpongycastleAsn1ASN1Sequence *) cast_chk([((OrgSpongycastleAsn1ASN1TaggedObject *) nil_chk(doj)) getObject], [OrgSpongycastleAsn1ASN1Sequence class]);
  
#line 104
  OrgSpongycastleAsn1ASN1Set *signerInfosSd = nil;
  OrgSpongycastleAsn1ASN1Set *certificates = nil;
  @try {
    OrgSpongycastleAsn1CmsSignedData *sd = OrgSpongycastleAsn1CmsSignedData_getInstanceWithId_(contentSignedData);
    signerInfosSd = [((OrgSpongycastleAsn1CmsSignedData *) nil_chk(sd)) getSignerInfos];
    certificates = [sd getCertificates];
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPkcs7ReadNodesTree_LOGGER)) severeWithNSString:JreStrcat("$@", @"Error obteniendo los SignerInfos del SignedData: ", e)];
  }
  
#line 116
  EsGobAfirmaCoreUtilTreeAOTreeNode *raiz = new_EsGobAfirmaCoreUtilTreeAOTreeNode_initWithId_(@"Datos");
  
#line 120
  if (asSimpleSignInfo && signerInfosSd != nil) {
    for (jint i = 0; i < [signerInfosSd size]; i++) {
      OrgSpongycastleAsn1ASN1Sequence *atribute = (OrgSpongycastleAsn1ASN1Sequence *) cast_chk([signerInfosSd getObjectAtWithInt:i], [OrgSpongycastleAsn1ASN1Sequence class]);
      OrgSpongycastleAsn1CmsIssuerAndSerialNumber *issuerSerial = OrgSpongycastleAsn1CmsIssuerAndSerialNumber_getInstanceWithId_([((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(atribute)) getObjectAtWithInt:1]);
      IOSObjectArray *nameSigner = EsGobAfirmaSignersPkcs7ReadNodesTree_searchCertWithOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1ASN1Integer_(certificates, [((OrgSpongycastleAsn1CmsIssuerAndSerialNumber *) nil_chk(issuerSerial)) getSerialNumber]);
      OrgSpongycastleAsn1CmsSignerInfo *si = OrgSpongycastleAsn1CmsSignerInfo_getInstanceWithId_(atribute);
      JavaUtilDate *signingTime = EsGobAfirmaSignersPkcs7ReadNodesTree_getSigningTimeWithOrgSpongycastleAsn1CmsSignerInfo_(si);
      EsGobAfirmaCoreSignersAOSimpleSignInfo *aossi = new_EsGobAfirmaCoreSignersAOSimpleSignInfo_initWithJavaSecurityCertX509CertificateArray_withJavaUtilDate_(nameSigner, signingTime);
      [aossi setPkcs1WithByteArray:[((OrgSpongycastleAsn1ASN1OctetString *) nil_chk([((OrgSpongycastleAsn1CmsSignerInfo *) nil_chk(si)) getEncryptedDigest])) getOctets]];
      [aossi setSignAlgorithmWithNSString:EsGobAfirmaSignersPkcs7ReadNodesTree_getSignatureAlgorithmWithOrgSpongycastleAsn1CmsSignerInfo_(si)];
      self->rama_ = new_EsGobAfirmaCoreUtilTreeAOTreeNode_initWithId_(aossi);
      [((id<JavaUtilList>) nil_chk(self->listaCert_)) addWithId:nameSigner];
      EsGobAfirmaSignersPkcs7ReadNodesTree_getUnsignedAtributesWithBoolean_withOrgSpongycastleAsn1ASN1Set_withEsGobAfirmaCoreUtilTreeAOTreeNode_withOrgSpongycastleAsn1ASN1Set_(self, true, [si getUnauthenticatedAttributes], self->rama_, certificates);
      [raiz addWithEsGobAfirmaCoreUtilTreeAOTreeNode:self->rama_];
    }
  }
  else if (signerInfosSd != nil) {
    for (jint i = 0; i < [signerInfosSd size]; i++) {
      OrgSpongycastleAsn1ASN1Sequence *atribute = (OrgSpongycastleAsn1ASN1Sequence *) cast_chk([signerInfosSd getObjectAtWithInt:i], [OrgSpongycastleAsn1ASN1Sequence class]);
      OrgSpongycastleAsn1CmsIssuerAndSerialNumber *issuerSerial = OrgSpongycastleAsn1CmsIssuerAndSerialNumber_getInstanceWithId_([((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(atribute)) getObjectAtWithInt:1]);
      NSString *nameSigner = EsGobAfirmaSignersPkcs7ReadNodesTree_searchNameWithOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1ASN1Integer_(certificates, [((OrgSpongycastleAsn1CmsIssuerAndSerialNumber *) nil_chk(issuerSerial)) getSerialNumber]);
      OrgSpongycastleAsn1CmsSignerInfo *si = OrgSpongycastleAsn1CmsSignerInfo_getInstanceWithId_(atribute);
      self->rama_ = new_EsGobAfirmaCoreUtilTreeAOTreeNode_initWithId_(nameSigner);
      [((id<JavaUtilList>) nil_chk(self->lista_)) addWithId:nameSigner];
      EsGobAfirmaSignersPkcs7ReadNodesTree_getUnsignedAtributesWithBoolean_withOrgSpongycastleAsn1ASN1Set_withEsGobAfirmaCoreUtilTreeAOTreeNode_withOrgSpongycastleAsn1ASN1Set_(self, false, [((OrgSpongycastleAsn1CmsSignerInfo *) nil_chk(si)) getUnauthenticatedAttributes], self->rama_, certificates);
      
#line 146
      [raiz addWithEsGobAfirmaCoreUtilTreeAOTreeNode:self->rama_];
    }
  }
  
#line 150
  return new_EsGobAfirmaCoreUtilTreeAOTreeModel_initWithEsGobAfirmaCoreUtilTreeAOTreeNode_(raiz);
}


#line 153
+ (NSString *)getSignatureAlgorithmWithOrgSpongycastleAsn1CmsSignerInfo:(OrgSpongycastleAsn1CmsSignerInfo *)signerInfo {
  return EsGobAfirmaSignersPkcs7ReadNodesTree_getSignatureAlgorithmWithOrgSpongycastleAsn1CmsSignerInfo_(signerInfo);
}


#line 160
+ (NSString *)translateDigestOidWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid {
  return EsGobAfirmaSignersPkcs7ReadNodesTree_translateDigestOidWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(oid);
}


#line 175
+ (NSString *)translateEncryptionOidWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid {
  return EsGobAfirmaSignersPkcs7ReadNodesTree_translateEncryptionOidWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(oid);
}


#line 194
- (void)getUnsignedAtributesWithBoolean:(jboolean)withCertificates
         withOrgSpongycastleAsn1ASN1Set:(OrgSpongycastleAsn1ASN1Set *)signerInfouAtrib
  withEsGobAfirmaCoreUtilTreeAOTreeNode:(EsGobAfirmaCoreUtilTreeAOTreeNode *)ramahija
         withOrgSpongycastleAsn1ASN1Set:(OrgSpongycastleAsn1ASN1Set *)certificates {
  EsGobAfirmaSignersPkcs7ReadNodesTree_getUnsignedAtributesWithBoolean_withOrgSpongycastleAsn1ASN1Set_withEsGobAfirmaCoreUtilTreeAOTreeNode_withOrgSpongycastleAsn1ASN1Set_(self, withCertificates, signerInfouAtrib, ramahija, certificates);
}


#line 237
+ (jboolean)isValideAttributeTypeWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)attributeType {
  return EsGobAfirmaSignersPkcs7ReadNodesTree_isValideAttributeTypeWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(attributeType);
}


#line 258
- (IOSIntArray *)readNodesFromSignersWithNSStringArray:(IOSObjectArray *)signers
                                         withByteArray:(IOSByteArray *)data {
  
#line 259
  IOSIntArray *solucion;
  
#line 261
  (void) [self readNodesTreeWithByteArray:data withBoolean:false];
  id<JavaUtilList> listaComp = self->lista_;
  IOSIntArray *nodesToSign = [IOSIntArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(listaComp)) size]];
  jint cont = 0;
  for (jint i = 0; i < [listaComp size]; i++) {
    {
      IOSObjectArray *a__ =
#line 266
      signers;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *aux2 = *b__++;
        
#line 267
        NSString *aux = [listaComp getWithInt:i];
        if ([((NSString *) nil_chk(aux)) isEqual:aux2]) {
          *IOSIntArray_GetRef(nodesToSign, cont) = i;
          cont++;
        }
      }
    }
  }
  
#line 276
  solucion = [IOSIntArray newArrayWithLength:cont];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(nodesToSign, 0, solucion, 0, cont);
  solucion = EsGobAfirmaSignersPkcs7ReadNodesTree_simplyArrayWithIntArray_(solucion);
  JavaUtilArrays_sortWithIntArray_(solucion);
  
#line 281
  return solucion;
}


#line 289
+ (IOSIntArray *)simplyArrayWithIntArray:(IOSIntArray *)nodes {
  return EsGobAfirmaSignersPkcs7ReadNodesTree_simplyArrayWithIntArray_(nodes);
}


#line 312
+ (NSString *)searchNameWithOrgSpongycastleAsn1ASN1Set:(OrgSpongycastleAsn1ASN1Set *)certificates
                    withOrgSpongycastleAsn1ASN1Integer:(OrgSpongycastleAsn1ASN1Integer *)serialNumber {
  return EsGobAfirmaSignersPkcs7ReadNodesTree_searchNameWithOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1ASN1Integer_(certificates, serialNumber);
}


#line 339
+ (IOSObjectArray *)searchCertWithOrgSpongycastleAsn1ASN1Set:(OrgSpongycastleAsn1ASN1Set *)certificates
                          withOrgSpongycastleAsn1ASN1Integer:(OrgSpongycastleAsn1ASN1Integer *)serialNumber {
  return EsGobAfirmaSignersPkcs7ReadNodesTree_searchCertWithOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1ASN1Integer_(certificates, serialNumber);
}


#line 360
+ (JavaUtilDate *)getSigningTimeWithOrgSpongycastleAsn1CmsSignerInfo:(OrgSpongycastleAsn1CmsSignerInfo *)si {
  return EsGobAfirmaSignersPkcs7ReadNodesTree_getSigningTimeWithOrgSpongycastleAsn1CmsSignerInfo_(si);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreUtilTreeAOTreeModel;", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 11, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 14, 10, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 15, 16, 6, -1, -1, -1 },
    { NULL, "[I", 0x9, 17, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 18, 19, -1, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertX509Certificate;", 0xa, 20, 19, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0xa, 21, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getSeleccionados);
  methods[2].selector = @selector(setSeleccionadosWithIntArray:);
  methods[3].selector = @selector(getStringRetorn);
  methods[4].selector = @selector(setStringRetornWithNSString:);
  methods[5].selector = @selector(readNodesTreeWithByteArray:withBoolean:);
  methods[6].selector = @selector(getSignatureAlgorithmWithOrgSpongycastleAsn1CmsSignerInfo:);
  methods[7].selector = @selector(translateDigestOidWithOrgSpongycastleAsn1ASN1ObjectIdentifier:);
  methods[8].selector = @selector(translateEncryptionOidWithOrgSpongycastleAsn1ASN1ObjectIdentifier:);
  methods[9].selector = @selector(getUnsignedAtributesWithBoolean:withOrgSpongycastleAsn1ASN1Set:withEsGobAfirmaCoreUtilTreeAOTreeNode:withOrgSpongycastleAsn1ASN1Set:);
  methods[10].selector = @selector(isValideAttributeTypeWithOrgSpongycastleAsn1ASN1ObjectIdentifier:);
  methods[11].selector = @selector(readNodesFromSignersWithNSStringArray:withByteArray:);
  methods[12].selector = @selector(simplyArrayWithIntArray:);
  methods[13].selector = @selector(searchNameWithOrgSpongycastleAsn1ASN1Set:withOrgSpongycastleAsn1ASN1Integer:);
  methods[14].selector = @selector(searchCertWithOrgSpongycastleAsn1ASN1Set:withOrgSpongycastleAsn1ASN1Integer:);
  methods[15].selector = @selector(getSigningTimeWithOrgSpongycastleAsn1CmsSignerInfo:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "stringRetorn_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rama_", "LEsGobAfirmaCoreUtilTreeAOTreeNode;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rama2_", "LEsGobAfirmaCoreUtilTreeAOTreeNode;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "seleccionados_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lista_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 23, -1 },
    { "listaCert_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 24, -1 },
  };
  static const void *ptrTable[] = { "setSeleccionados", "[I", "setStringRetorn", "LNSString;", "readNodesTree", "[BZ", "LJavaIoIOException;", "getSignatureAlgorithm", "LOrgSpongycastleAsn1CmsSignerInfo;", "translateDigestOid", "LOrgSpongycastleAsn1ASN1ObjectIdentifier;", "translateEncryptionOid", "getUnsignedAtributes", "ZLOrgSpongycastleAsn1ASN1Set;LEsGobAfirmaCoreUtilTreeAOTreeNode;LOrgSpongycastleAsn1ASN1Set;", "isValideAttributeType", "readNodesFromSigners", "[LNSString;[B", "simplyArray", "searchName", "LOrgSpongycastleAsn1ASN1Set;LOrgSpongycastleAsn1ASN1Integer;", "searchCert", "getSigningTime", &EsGobAfirmaSignersPkcs7ReadNodesTree_LOGGER, "Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/List<[Ljava/security/cert/X509Certificate;>;" };
  static const J2ObjcClassInfo _EsGobAfirmaSignersPkcs7ReadNodesTree = { "ReadNodesTree", "es.gob.afirma.signers.pkcs7", ptrTable, methods, fields, 7, 0x11, 16, 7, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaSignersPkcs7ReadNodesTree;
}

+ (void)initialize {
  if (self == [EsGobAfirmaSignersPkcs7ReadNodesTree class]) {
    EsGobAfirmaSignersPkcs7ReadNodesTree_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 49
    @"es.gob.afirma");
    J2OBJC_SET_INITIALIZED(EsGobAfirmaSignersPkcs7ReadNodesTree)
  }
}

@end


#line 47
void EsGobAfirmaSignersPkcs7ReadNodesTree_init(EsGobAfirmaSignersPkcs7ReadNodesTree *self) {
  NSObject_init(self);
  self->stringRetorn_ =
#line 51
  @"";
  self->lista_ = new_JavaUtilArrayList_init();
  self->listaCert_ = new_JavaUtilArrayList_init();
}


#line 47
EsGobAfirmaSignersPkcs7ReadNodesTree *new_EsGobAfirmaSignersPkcs7ReadNodesTree_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaSignersPkcs7ReadNodesTree, init)
}


#line 47
EsGobAfirmaSignersPkcs7ReadNodesTree *create_EsGobAfirmaSignersPkcs7ReadNodesTree_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaSignersPkcs7ReadNodesTree, init)
}


#line 153
NSString *EsGobAfirmaSignersPkcs7ReadNodesTree_getSignatureAlgorithmWithOrgSpongycastleAsn1CmsSignerInfo_(OrgSpongycastleAsn1CmsSignerInfo *signerInfo) {
  EsGobAfirmaSignersPkcs7ReadNodesTree_initialize();
  
#line 154
  NSString *digestAlgoOid = EsGobAfirmaSignersPkcs7ReadNodesTree_translateDigestOidWithOrgSpongycastleAsn1ASN1ObjectIdentifier_([((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgSpongycastleAsn1CmsSignerInfo *) nil_chk(signerInfo)) getDigestAlgorithm])) getAlgorithm]);
  NSString *encryptionAlgoOid = EsGobAfirmaSignersPkcs7ReadNodesTree_translateEncryptionOidWithOrgSpongycastleAsn1ASN1ObjectIdentifier_([((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([signerInfo getDigestEncryptionAlgorithm])) getAlgorithm]);
  
#line 157
  return JreStrcat("$$$", digestAlgoOid, @"with", encryptionAlgoOid);
}


#line 160
NSString *EsGobAfirmaSignersPkcs7ReadNodesTree_translateDigestOidWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(OrgSpongycastleAsn1ASN1ObjectIdentifier *oid) {
  EsGobAfirmaSignersPkcs7ReadNodesTree_initialize();
  NSString *oidString = [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) description];
  if ([((NSString *) nil_chk(oidString)) isEqual:@"2.16.840.1.101.3.4.2.3"]) {
    return @"SHA512";
  }
  else
#line 165
  if ([oidString isEqual:@"2.16.840.1.101.3.4.2.1"]) {
    return @"SHA256";
  }
  else
#line 167
  if ([oidString isEqual:@"2.16.840.1.101.3.4.2.2"]) {
    return @"SHA384";
  }
  else
#line 169
  if ([oidString isEqual:@"1.3.14.3.2.26"]) {
    return @"SHA1";
  }
  return oidString;
}


#line 175
NSString *EsGobAfirmaSignersPkcs7ReadNodesTree_translateEncryptionOidWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(OrgSpongycastleAsn1ASN1ObjectIdentifier *oid) {
  EsGobAfirmaSignersPkcs7ReadNodesTree_initialize();
  NSString *oidString = [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) description];
  if (EsGobAfirmaSignersPkcs7AOAlgorithmID_isRSAOIDWithNSString_(oidString)) {
    return @"RSA";
  }
  else
#line 180
  if (EsGobAfirmaSignersPkcs7AOAlgorithmID_isDSAOIDWithNSString_(oidString)) {
    return @"DSA";
  }
  else
#line 182
  if (EsGobAfirmaSignersPkcs7AOAlgorithmID_isECDSAOIDWithNSString_(oidString)) {
    return @"ECDSA";
  }
  return oidString;
}

void EsGobAfirmaSignersPkcs7ReadNodesTree_getUnsignedAtributesWithBoolean_withOrgSpongycastleAsn1ASN1Set_withEsGobAfirmaCoreUtilTreeAOTreeNode_withOrgSpongycastleAsn1ASN1Set_(EsGobAfirmaSignersPkcs7ReadNodesTree *self, jboolean withCertificates, OrgSpongycastleAsn1ASN1Set *signerInfouAtrib, EsGobAfirmaCoreUtilTreeAOTreeNode *ramahija, OrgSpongycastleAsn1ASN1Set *certificates) {
  
#line 198
  if (signerInfouAtrib != nil) {
    id<JavaUtilEnumeration> eAtributes = [signerInfouAtrib getObjects];
    while ([((id<JavaUtilEnumeration>) nil_chk(eAtributes)) hasMoreElements]) {
      OrgSpongycastleAsn1CmsAttribute *data = OrgSpongycastleAsn1CmsAttribute_getInstanceWithId_([eAtributes nextElement]);
      if (EsGobAfirmaSignersPkcs7ReadNodesTree_isValideAttributeTypeWithOrgSpongycastleAsn1ASN1ObjectIdentifier_([((OrgSpongycastleAsn1CmsAttribute *) nil_chk(data)) getAttrType])) {
        OrgSpongycastleAsn1ASN1Set *setInto = [data getAttrValues];
        id<JavaUtilEnumeration> eAtributesData = [((OrgSpongycastleAsn1ASN1Set *) nil_chk(setInto)) getObjects];
        while ([((id<JavaUtilEnumeration>) nil_chk(eAtributesData)) hasMoreElements]) {
          id obj = [eAtributesData nextElement];
          if ([obj isKindOfClass:[OrgSpongycastleAsn1ASN1Sequence class]]) {
            OrgSpongycastleAsn1ASN1Sequence *atrib = (OrgSpongycastleAsn1ASN1Sequence *) obj;
            OrgSpongycastleAsn1CmsIssuerAndSerialNumber *issuerSerial = OrgSpongycastleAsn1CmsIssuerAndSerialNumber_getInstanceWithId_([((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(atrib)) getObjectAtWithInt:1]);
            OrgSpongycastleAsn1CmsSignerInfo *si = OrgSpongycastleAsn1CmsSignerInfo_getInstanceWithId_(atrib);
            if (withCertificates) {
              IOSObjectArray *nameSigner = EsGobAfirmaSignersPkcs7ReadNodesTree_searchCertWithOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1ASN1Integer_(certificates, [((OrgSpongycastleAsn1CmsIssuerAndSerialNumber *) nil_chk(issuerSerial)) getSerialNumber]);
              JavaUtilDate *signingTime = EsGobAfirmaSignersPkcs7ReadNodesTree_getSigningTimeWithOrgSpongycastleAsn1CmsSignerInfo_(si);
              EsGobAfirmaCoreSignersAOSimpleSignInfo *aossi = new_EsGobAfirmaCoreSignersAOSimpleSignInfo_initWithJavaSecurityCertX509CertificateArray_withJavaUtilDate_(nameSigner, signingTime);
              [aossi setPkcs1WithByteArray:[((OrgSpongycastleAsn1ASN1OctetString *) nil_chk([((OrgSpongycastleAsn1CmsSignerInfo *) nil_chk(si)) getEncryptedDigest])) getOctets]];
              [aossi setSignAlgorithmWithNSString:EsGobAfirmaSignersPkcs7ReadNodesTree_getSignatureAlgorithmWithOrgSpongycastleAsn1CmsSignerInfo_(si)];
              self->rama2_ = new_EsGobAfirmaCoreUtilTreeAOTreeNode_initWithId_(aossi);
              [((id<JavaUtilList>) nil_chk(self->listaCert_)) addWithId:nameSigner];
              [((EsGobAfirmaCoreUtilTreeAOTreeNode *) nil_chk(ramahija)) addWithEsGobAfirmaCoreUtilTreeAOTreeNode:self->rama2_];
              EsGobAfirmaSignersPkcs7ReadNodesTree_getUnsignedAtributesWithBoolean_withOrgSpongycastleAsn1ASN1Set_withEsGobAfirmaCoreUtilTreeAOTreeNode_withOrgSpongycastleAsn1ASN1Set_(self, true, [si getUnauthenticatedAttributes], self->rama2_, certificates);
            }
            else {
              NSString *nameSigner = EsGobAfirmaSignersPkcs7ReadNodesTree_searchNameWithOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1ASN1Integer_(certificates, [((OrgSpongycastleAsn1CmsIssuerAndSerialNumber *) nil_chk(issuerSerial)) getSerialNumber]);
              self->rama2_ = new_EsGobAfirmaCoreUtilTreeAOTreeNode_initWithId_(nameSigner);
              [((id<JavaUtilList>) nil_chk(self->lista_)) addWithId:nameSigner];
              [((EsGobAfirmaCoreUtilTreeAOTreeNode *) nil_chk(ramahija)) addWithEsGobAfirmaCoreUtilTreeAOTreeNode:self->rama2_];
              EsGobAfirmaSignersPkcs7ReadNodesTree_getUnsignedAtributesWithBoolean_withOrgSpongycastleAsn1ASN1Set_withEsGobAfirmaCoreUtilTreeAOTreeNode_withOrgSpongycastleAsn1ASN1Set_(self, false, [((OrgSpongycastleAsn1CmsSignerInfo *) nil_chk(si)) getUnauthenticatedAttributes], self->rama2_, certificates);
            }
          }
        }
      }
    }
  }
}


#line 237
jboolean EsGobAfirmaSignersPkcs7ReadNodesTree_isValideAttributeTypeWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(OrgSpongycastleAsn1ASN1ObjectIdentifier *attributeType) {
  EsGobAfirmaSignersPkcs7ReadNodesTree_initialize();
  
#line 238
  return ![((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(attributeType)) isEqual:JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, id_aa_signatureTimeStampToken)] &&
#line 239
  ![attributeType isEqual:JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, id_aa_ets_archiveTimestamp)] &&
#line 240
  ![attributeType isEqual:JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, id_aa_ets_escTimeStamp)] &&
#line 241
  ![attributeType isEqual:JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, id_aa_ets_revocationRefs)] &&
#line 242
  ![attributeType isEqual:JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, id_aa_ets_revocationValues)] &&
#line 243
  ![attributeType isEqual:JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, id_aa_ets_certificateRefs)] &&
#line 244
  ![attributeType isEqual:JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, id_aa_ets_certValues)] &&
#line 246
  ![attributeType isEqual:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, id_aa))) branchWithNSString:@"48"]] &&
#line 248
  ![attributeType isEqual:new_OrgSpongycastleAsn1ASN1ObjectIdentifier_initWithNSString_(@"0.4.0.1733.2.4")] &&
#line 250
  ![attributeType isEqual:new_OrgSpongycastleAsn1ASN1ObjectIdentifier_initWithNSString_(@"0.4.0.1733.2.2")];
}


#line 289
IOSIntArray *EsGobAfirmaSignersPkcs7ReadNodesTree_simplyArrayWithIntArray_(IOSIntArray *nodes) {
  EsGobAfirmaSignersPkcs7ReadNodesTree_initialize();
  
#line 290
  id<JavaUtilList> devolver = new_JavaUtilArrayList_init();
  
#line 292
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(nodes))->size_; i++) {
    if (![devolver containsWithId:JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(nodes, i))]) {
      [devolver addWithId:JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(nodes, i))];
    }
  }
  IOSIntArray *simplificado = [IOSIntArray newArrayWithLength:[devolver size]];
  for (jint i = 0; i < [devolver size]; i++) {
    *IOSIntArray_GetRef(simplificado, i) = [((JavaLangInteger *) nil_chk([devolver getWithInt:i])) intValue];
  }
  return simplificado;
}


#line 312
NSString *EsGobAfirmaSignersPkcs7ReadNodesTree_searchNameWithOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1ASN1Integer_(OrgSpongycastleAsn1ASN1Set *certificates, OrgSpongycastleAsn1ASN1Integer *serialNumber) {
  EsGobAfirmaSignersPkcs7ReadNodesTree_initialize();
  
#line 313
  id<JavaUtilEnumeration> certSet = [((OrgSpongycastleAsn1ASN1Set *) nil_chk(certificates)) getObjects];
  while ([((id<JavaUtilEnumeration>) nil_chk(certSet)) hasMoreElements]) {
    JavaSecurityCertX509Certificate *c;
    @try {
      c = (JavaSecurityCertX509Certificate *) cast_chk([((JavaSecurityCertCertificateFactory *) nil_chk(JavaSecurityCertCertificateFactory_getInstanceWithNSString_(@"X.509"))) generateCertificateWithJavaIoInputStream:new_JavaIoByteArrayInputStream_initWithByteArray_([((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(((OrgSpongycastleAsn1ASN1Sequence *) cast_chk([certSet nextElement], [OrgSpongycastleAsn1ASN1Sequence class])))) getEncoded])], [JavaSecurityCertX509Certificate class]);
    }
    @catch (JavaLangException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPkcs7ReadNodesTree_LOGGER)) severeWithNSString:JreStrcat("$@", @"Error extrayendo los certificados del Set ASN.1, puede que se haya omitido un elemento valido", e)];
      continue;
    }
    if ([((JavaMathBigInteger *) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(c)) getSerialNumber])) isEqual:[((OrgSpongycastleAsn1ASN1Integer *) nil_chk(serialNumber)) getValue]]) {
      return EsGobAfirmaCoreMiscAOUtil_getCNWithJavaSecurityCertX509Certificate_(c);
    }
  }
  [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPkcs7ReadNodesTree_LOGGER)) infoWithNSString:@"No se ha encontrado el certificado indicado, se devolvera una cadena vacia"];
  return @"";
}


#line 339
IOSObjectArray *EsGobAfirmaSignersPkcs7ReadNodesTree_searchCertWithOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1ASN1Integer_(OrgSpongycastleAsn1ASN1Set *certificates, OrgSpongycastleAsn1ASN1Integer *serialNumber) {
  EsGobAfirmaSignersPkcs7ReadNodesTree_initialize();
  
#line 340
  if (certificates != nil) {
    id<JavaUtilEnumeration> certSet = [certificates getObjects];
    while ([((id<JavaUtilEnumeration>) nil_chk(certSet)) hasMoreElements]) {
      JavaSecurityCertX509Certificate *c;
      @try {
        c = (JavaSecurityCertX509Certificate *) cast_chk([((JavaSecurityCertCertificateFactory *) nil_chk(JavaSecurityCertCertificateFactory_getInstanceWithNSString_(@"X.509"))) generateCertificateWithJavaIoInputStream:new_JavaIoByteArrayInputStream_initWithByteArray_([((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(((OrgSpongycastleAsn1ASN1Sequence *) cast_chk([certSet nextElement], [OrgSpongycastleAsn1ASN1Sequence class])))) getEncoded])], [JavaSecurityCertX509Certificate class]);
      }
      @catch (JavaLangException *e) {
        [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPkcs7ReadNodesTree_LOGGER)) severeWithNSString:JreStrcat("$@", @"Error extrayendo los certificados del Set ASN.1, puede que se haya omitido un elemento valido", e)];
        continue;
      }
      if ([((JavaMathBigInteger *) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(c)) getSerialNumber])) isEqual:[((OrgSpongycastleAsn1ASN1Integer *) nil_chk(serialNumber)) getValue]]) {
        return [IOSObjectArray newArrayWithObjects:(id[]){ c } count:1 type:JavaSecurityCertX509Certificate_class_()];
      }
    }
  }
  [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPkcs7ReadNodesTree_LOGGER)) severeWithNSString:@"El certificados pedido no estaba en la lista, se devolvera un array vacio"];
  return [IOSObjectArray newArrayWithLength:0 type:JavaSecurityCertX509Certificate_class_()];
}


#line 360
JavaUtilDate *EsGobAfirmaSignersPkcs7ReadNodesTree_getSigningTimeWithOrgSpongycastleAsn1CmsSignerInfo_(OrgSpongycastleAsn1CmsSignerInfo *si) {
  EsGobAfirmaSignersPkcs7ReadNodesTree_initialize();
  
#line 361
  JavaUtilDate *returnDate = nil;
  
#line 363
  if ([((OrgSpongycastleAsn1CmsSignerInfo *) nil_chk(si)) getAuthenticatedAttributes] != nil) {
    id<JavaUtilEnumeration> eAtributes = [((OrgSpongycastleAsn1ASN1Set *) nil_chk([si getAuthenticatedAttributes])) getObjects];
    while ([((id<JavaUtilEnumeration>) nil_chk(eAtributes)) hasMoreElements]) {
      OrgSpongycastleAsn1CmsAttribute *data = OrgSpongycastleAsn1CmsAttribute_getInstanceWithId_([eAtributes nextElement]);
      if ([((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgSpongycastleAsn1CmsAttribute *) nil_chk(data)) getAttrType])) isEqual:JreLoadStatic(OrgSpongycastleAsn1CmsCMSAttributes, signingTime)]) {
        OrgSpongycastleAsn1ASN1Set *time = [data getAttrValues];
        id<OrgSpongycastleAsn1ASN1Encodable> timeObject = [((OrgSpongycastleAsn1ASN1Set *) nil_chk(time)) getObjectAtWithInt:0];
        if (timeObject == nil) {
          [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPkcs7ReadNodesTree_LOGGER)) severeWithNSString:@"El objeto no contiene una fecha"];
        }
        else if ([timeObject isKindOfClass:[OrgSpongycastleAsn1ASN1GeneralizedTime class]]) {
          @try {
            returnDate = [((OrgSpongycastleAsn1ASN1GeneralizedTime *) timeObject) getDate];
          }
          @catch (JavaTextParseException *ex) {
            [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPkcs7ReadNodesTree_LOGGER)) severeWithNSString:JreStrcat("$@", @"No es posible convertir la fecha: ", ex)];
          }
        }
        else if ([timeObject isKindOfClass:[OrgSpongycastleAsn1ASN1UTCTime class]]) {
          @try {
            returnDate = [((OrgSpongycastleAsn1ASN1UTCTime *) timeObject) getDate];
          }
          @catch (JavaTextParseException *ex) {
            [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPkcs7ReadNodesTree_LOGGER)) severeWithNSString:JreStrcat("$@", @"No es posible convertir la fecha: ", ex)];
          }
        }
        else {
          [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPkcs7ReadNodesTree_LOGGER)) severeWithNSString:JreStrcat("$$", @"Formato de fecha deconocido: ", [[timeObject java_getClass] getName])];
        }
      }
    }
  }
  
#line 396
  return returnDate;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaSignersPkcs7ReadNodesTree)
