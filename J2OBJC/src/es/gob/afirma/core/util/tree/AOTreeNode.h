//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/util/tree/AOTreeNode.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobAfirmaCoreUtilTreeAOTreeNode")
#ifdef RESTRICT_EsGobAfirmaCoreUtilTreeAOTreeNode
#define INCLUDE_ALL_EsGobAfirmaCoreUtilTreeAOTreeNode 0
#else
#define INCLUDE_ALL_EsGobAfirmaCoreUtilTreeAOTreeNode 1
#endif
#undef RESTRICT_EsGobAfirmaCoreUtilTreeAOTreeNode

#if !defined (EsGobAfirmaCoreUtilTreeAOTreeNode_) && (INCLUDE_ALL_EsGobAfirmaCoreUtilTreeAOTreeNode || defined(INCLUDE_EsGobAfirmaCoreUtilTreeAOTreeNode))
#define EsGobAfirmaCoreUtilTreeAOTreeNode_

/*!
 @brief Adaptaci&oacute;n de las clases TreeNode de Swing para su uso sin interfaz gr6aacute;fico.
 */
@interface EsGobAfirmaCoreUtilTreeAOTreeNode : NSObject

#pragma mark Public

/*!
 @brief Creates a tree node with no parent, no children, but which allows
  children, and initializes it with the specified user object.
 @param userObject an Object provided by the user that constitutes the node's
          data
 */
- (instancetype)initWithId:(id)userObject;

/*!
 @brief Removes <code>newChild</code> from its parent and makes it a child of
  this node by adding it to the end of this node's child array.
 - seealso: #insert
 @param newChild node to add as a child of this node
 @throw IllegalArgumentException
 if <code>newChild</code> is null
 @throw IllegalStateException
 if this node does not allow children
 */
- (void)addWithEsGobAfirmaCoreUtilTreeAOTreeNode:(EsGobAfirmaCoreUtilTreeAOTreeNode *)newChild;

/*!
 @brief Returns the child at the specified index in this node's child array.
 @param index an index into this node's child array
 @throw ArrayIndexOutOfBoundsException
 if <code>index</code> is out of bounds
 @return the TreeNode in this node's child array at the specified index
 */
- (EsGobAfirmaCoreUtilTreeAOTreeNode *)getChildAtWithInt:(jint)index;

/*!
 @brief Returns the number of children of this node.
 @return an int giving the number of children of this node
 */
- (jint)getChildCount;

/*!
 @brief Returns this node's parent or null if this node has no parent.
 @return this node's parent TreeNode, or null if this node has no parent
 */
- (EsGobAfirmaCoreUtilTreeAOTreeNode *)getParent;

/*!
 @brief Returns this node's user object.
 @return the Object stored at this node by the user
 */
- (id)getUserObject;

/*!
 @brief Returns true if this node has no children.To distinguish between nodes
  that have no children and nodes that <i>cannot</i> have children (e.g. to
  distinguish files from empty directories), use this method in conjunction
  with <code>getAllowsChildren</code>
 @return true if this node has no children
 */
- (jboolean)isLeaf;

/*!
 @brief Sets this node's parent to <code>newParent</code> but does not change the
  parent's child array.This method is called from <code>insert()</code> and <code>remove()</code> to reassign a child's parent, it should not be
  messaged from anywhere else.
 @param newParent this node's new parent
 */
- (void)setParentWithEsGobAfirmaCoreUtilTreeAOTreeNode:(EsGobAfirmaCoreUtilTreeAOTreeNode *)newParent;

/*!
 @brief Returns the result of sending <code>toString()</code> to this node's user
  object, or null if this node has no user object.
 - seealso: #getUserObject
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobAfirmaCoreUtilTreeAOTreeNode)

FOUNDATION_EXPORT void EsGobAfirmaCoreUtilTreeAOTreeNode_initWithId_(EsGobAfirmaCoreUtilTreeAOTreeNode *self, id userObject);

FOUNDATION_EXPORT EsGobAfirmaCoreUtilTreeAOTreeNode *new_EsGobAfirmaCoreUtilTreeAOTreeNode_initWithId_(id userObject) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreUtilTreeAOTreeNode *create_EsGobAfirmaCoreUtilTreeAOTreeNode_initWithId_(id userObject);

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaCoreUtilTreeAOTreeNode)

#endif

#pragma pop_macro("INCLUDE_ALL_EsGobAfirmaCoreUtilTreeAOTreeNode")
