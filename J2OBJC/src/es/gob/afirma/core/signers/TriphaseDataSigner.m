//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/signers/TriphaseDataSigner.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/afirma/core/AOException.h"
#include "es/gob/afirma/core/misc/Base64.h"
#include "es/gob/afirma/core/signers/AOPkcs1Signer.h"
#include "es/gob/afirma/core/signers/AOSignConstants.h"
#include "es/gob/afirma/core/signers/TriphaseData.h"
#include "es/gob/afirma/core/signers/TriphaseDataSigner.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/security/PrivateKey.h"
#include "java/util/Properties.h"

#if !__has_feature(objc_arc)
#error "es/gob/afirma/core/signers/TriphaseDataSigner must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreSignersTriphaseDataSigner ()

- (instancetype)init;

@end

/*!
 @brief Nombre de la propiedad para almac&eacute;n de prefirmas.
 */
inline NSString *EsGobAfirmaCoreSignersTriphaseDataSigner_get_PROPERTY_NAME_PRESIGN(void);
static NSString *EsGobAfirmaCoreSignersTriphaseDataSigner_PROPERTY_NAME_PRESIGN = @"PRE";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersTriphaseDataSigner, PROPERTY_NAME_PRESIGN, NSString *)

/*!
 @brief Nombre de la propiedad para almac&eacute;n de firmas PKCS#1.
 */
inline NSString *EsGobAfirmaCoreSignersTriphaseDataSigner_get_PROPERTY_NAME_PKCS1_SIGN(void);
static NSString *EsGobAfirmaCoreSignersTriphaseDataSigner_PROPERTY_NAME_PKCS1_SIGN = @"PK1";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersTriphaseDataSigner, PROPERTY_NAME_PKCS1_SIGN, NSString *)

/*!
 @brief Nombre de la propiedad  que indica que el PKCS#1 se debe enviar decodificado.
 */
inline NSString *EsGobAfirmaCoreSignersTriphaseDataSigner_get_PROPERTY_NAME_PKCS1_DECODED(void);
static NSString *EsGobAfirmaCoreSignersTriphaseDataSigner_PROPERTY_NAME_PKCS1_DECODED = @"PK1_DECODED";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersTriphaseDataSigner, PROPERTY_NAME_PKCS1_DECODED, NSString *)

/*!
 @brief Nombre de la propiedad  que indica si la postfirma requiere la prefirma.
 */
inline NSString *EsGobAfirmaCoreSignersTriphaseDataSigner_get_PROPERTY_NAME_NEED_PRE(void);
static NSString *EsGobAfirmaCoreSignersTriphaseDataSigner_PROPERTY_NAME_NEED_PRE = @"NEED_PRE";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersTriphaseDataSigner, PROPERTY_NAME_NEED_PRE, NSString *)

__attribute__((unused)) static void EsGobAfirmaCoreSignersTriphaseDataSigner_init(EsGobAfirmaCoreSignersTriphaseDataSigner *self);

__attribute__((unused)) static EsGobAfirmaCoreSignersTriphaseDataSigner *new_EsGobAfirmaCoreSignersTriphaseDataSigner_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobAfirmaCoreSignersTriphaseDataSigner *create_EsGobAfirmaCoreSignersTriphaseDataSigner_init(void);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/signers/TriphaseDataSigner.java"


#line 22
@implementation EsGobAfirmaCoreSignersTriphaseDataSigner

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 36
- (instancetype)init {
  EsGobAfirmaCoreSignersTriphaseDataSigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 51
+ (EsGobAfirmaCoreSignersTriphaseData *)doSignWithEsGobAfirmaCoreSignersAOPkcs1Signer:(EsGobAfirmaCoreSignersAOPkcs1Signer *)signer
                                                                         withNSString:(NSString *)algorithm
                                                           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                                 withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
                                               withEsGobAfirmaCoreSignersTriphaseData:(EsGobAfirmaCoreSignersTriphaseData *)triphaseData
                                                               withJavaUtilProperties:(JavaUtilProperties *)extraParams {
  return EsGobAfirmaCoreSignersTriphaseDataSigner_doSignWithEsGobAfirmaCoreSignersAOPkcs1Signer_withNSString_withJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_withEsGobAfirmaCoreSignersTriphaseData_withJavaUtilProperties_(signer, algorithm, key, certChain, triphaseData, extraParams);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersTriphaseData;", 0x9, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(doSignWithEsGobAfirmaCoreSignersAOPkcs1Signer:withNSString:withJavaSecurityPrivateKey:withJavaSecurityCertCertificateArray:withEsGobAfirmaCoreSignersTriphaseData:withJavaUtilProperties:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PROPERTY_NAME_PRESIGN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
    { "PROPERTY_NAME_PKCS1_SIGN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "PROPERTY_NAME_PKCS1_DECODED", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "PROPERTY_NAME_NEED_PRE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "doSign", "LEsGobAfirmaCoreSignersAOPkcs1Signer;LNSString;LJavaSecurityPrivateKey;[LJavaSecurityCertCertificate;LEsGobAfirmaCoreSignersTriphaseData;LJavaUtilProperties;", "LEsGobAfirmaCoreAOException;", &EsGobAfirmaCoreSignersTriphaseDataSigner_PROPERTY_NAME_PRESIGN, &EsGobAfirmaCoreSignersTriphaseDataSigner_PROPERTY_NAME_PKCS1_SIGN, &EsGobAfirmaCoreSignersTriphaseDataSigner_PROPERTY_NAME_PKCS1_DECODED, &EsGobAfirmaCoreSignersTriphaseDataSigner_PROPERTY_NAME_NEED_PRE };
  static const J2ObjcClassInfo _EsGobAfirmaCoreSignersTriphaseDataSigner = { "TriphaseDataSigner", "es.gob.afirma.core.signers", ptrTable, methods, fields, 7, 0x11, 2, 4, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreSignersTriphaseDataSigner;
}

@end


#line 36
void EsGobAfirmaCoreSignersTriphaseDataSigner_init(EsGobAfirmaCoreSignersTriphaseDataSigner *self) {
  NSObject_init(self);
}


#line 36
EsGobAfirmaCoreSignersTriphaseDataSigner *new_EsGobAfirmaCoreSignersTriphaseDataSigner_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersTriphaseDataSigner, init)
}


#line 36
EsGobAfirmaCoreSignersTriphaseDataSigner *create_EsGobAfirmaCoreSignersTriphaseDataSigner_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersTriphaseDataSigner, init)
}


#line 51
EsGobAfirmaCoreSignersTriphaseData *EsGobAfirmaCoreSignersTriphaseDataSigner_doSignWithEsGobAfirmaCoreSignersAOPkcs1Signer_withNSString_withJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_withEsGobAfirmaCoreSignersTriphaseData_withJavaUtilProperties_(EsGobAfirmaCoreSignersAOPkcs1Signer *signer, NSString *algorithm, id<JavaSecurityPrivateKey> key, IOSObjectArray *certChain, EsGobAfirmaCoreSignersTriphaseData *triphaseData, JavaUtilProperties *extraParams) {
  EsGobAfirmaCoreSignersTriphaseDataSigner_initialize();
  
#line 58
  if ([((EsGobAfirmaCoreSignersTriphaseData *) nil_chk(triphaseData)) getSignsCount] < 1) {
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_(@"No se han recibido prefirmas que firmar");
  }
  
#line 62
  for (jint i = 0; i < [triphaseData getSignsCount]; i++) {
    EsGobAfirmaCoreSignersTriphaseData_TriSign *signConfig = [triphaseData getSignWithInt:i];
    NSString *base64PreSign = [((EsGobAfirmaCoreSignersTriphaseData_TriSign *) nil_chk(signConfig)) getPropertyWithNSString:EsGobAfirmaCoreSignersTriphaseDataSigner_PROPERTY_NAME_PRESIGN];
    if (base64PreSign == nil) {
      @throw new_EsGobAfirmaCoreAOException_initWithNSString_(JreStrcat("$I", @"El servidor no ha devuelto la prefirma numero ",
#line 67
      i));
    }
    
#line 71
    IOSByteArray *preSign;
    @try {
      preSign = EsGobAfirmaCoreMiscBase64_decodeWithNSString_(base64PreSign);
    }
    @catch (JavaIoIOException *e) {
      @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error decodificando la prefirma: ", e), e);
    }
    
#line 79
    NSString *signatureAlgorithm = EsGobAfirmaCoreSignersAOSignConstants_composeSignatureAlgorithmNameWithNSString_withNSString_(algorithm, [((id<JavaSecurityPrivateKey>) nil_chk(key)) getAlgorithm]);
    
#line 81
    IOSByteArray *pkcs1sign = [((EsGobAfirmaCoreSignersAOPkcs1Signer *) nil_chk(signer)) signWithByteArray:
#line 82
    preSign withNSString:
#line 83
    signatureAlgorithm withJavaSecurityPrivateKey:
#line 84
    key withJavaSecurityCertCertificateArray:
#line 85
    certChain withJavaUtilProperties:
#line 86
    extraParams];
    
#line 90
    [signConfig addPropertyWithNSString:EsGobAfirmaCoreSignersTriphaseDataSigner_PROPERTY_NAME_PKCS1_SIGN withNSString:EsGobAfirmaCoreMiscBase64_encodeWithByteArray_(pkcs1sign)];
    
#line 94
    if ([signConfig getPropertyWithNSString:EsGobAfirmaCoreSignersTriphaseDataSigner_PROPERTY_NAME_NEED_PRE] == nil ||
#line 95
    !JavaLangBoolean_parseBooleanWithNSString_([signConfig getPropertyWithNSString:EsGobAfirmaCoreSignersTriphaseDataSigner_PROPERTY_NAME_NEED_PRE])) {
      [signConfig deletePropertyWithNSString:EsGobAfirmaCoreSignersTriphaseDataSigner_PROPERTY_NAME_PRESIGN];
    }
  }
  
#line 101
  return triphaseData;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreSignersTriphaseDataSigner)
