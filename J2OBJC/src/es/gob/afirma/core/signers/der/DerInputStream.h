//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/signers/der/DerInputStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EsGobAfirmaCoreSignersDerDerInputStream")
#ifdef RESTRICT_EsGobAfirmaCoreSignersDerDerInputStream
#define INCLUDE_ALL_EsGobAfirmaCoreSignersDerDerInputStream 0
#else
#define INCLUDE_ALL_EsGobAfirmaCoreSignersDerDerInputStream 1
#endif
#undef RESTRICT_EsGobAfirmaCoreSignersDerDerInputStream

#if !defined (EsGobAfirmaCoreSignersDerDerInputStream_) && (INCLUDE_ALL_EsGobAfirmaCoreSignersDerDerInputStream || defined(INCLUDE_EsGobAfirmaCoreSignersDerDerInputStream))
#define EsGobAfirmaCoreSignersDerDerInputStream_

@class EsGobAfirmaCoreSignersDerBitArray;
@class EsGobAfirmaCoreSignersDerDerInputBuffer;
@class EsGobAfirmaCoreSignersDerDerValue;
@class EsGobAfirmaCoreSignersDerObjectIdentifier;
@class IOSByteArray;
@class IOSObjectArray;
@class JavaIoInputStream;
@class JavaMathBigInteger;

/*!
 @brief A DER input stream, used for parsing ASN.1 DER-encoded data such as
  that found in X.509 certificates.DER is a subset of BER/1, which has
  the advantage that it allows only a single encoding of primitive data.
 (High level data such as dates still support many encodings.)  That is,
  it uses the "Definite" Encoding Rules (DER) not the "Basic" ones (BER). 
 <P>Note that, like BER/1, DER streams are streams of explicitly
  tagged data values.  Accordingly, this programming interface does
  not expose any variant of the java.io.InputStream interface, since
  that kind of input stream holds untagged data values and using that
  I/O model could prevent correct parsing of the DER data. 
 <P>At this time, this class supports only a subset of the types of DER
  data encodings which are defined.  That subset is sufficient for parsing
  most X.509 certificates.
 @author David Brownell
 @author Amit Kapoor
 @author Hemma Prafullchandra
 */
@interface EsGobAfirmaCoreSignersDerDerInputStream : NSObject {
 @public
  EsGobAfirmaCoreSignersDerDerInputBuffer *buffer_;
  /*!
   @brief The DER tag of the value; one of the tag_ constants.
   */
  jbyte tag_;
}

#pragma mark Public

/*!
 @brief Create a DER input stream from a data buffer.The buffer is not
  copied, it is shared.
 Accordingly, the buffer should be treated
  as read-only.
 @param data the buffer from which to create the string (CONSUMED)
 @throw IOExceptionWhen no it possible load data.
 */
- (instancetype)initWithByteArray:(IOSByteArray *)data;

/*!
 @brief Create a DER input stream from part of a data buffer.
 The buffer is not copied, it is shared.  Accordingly, the
  buffer should be treated as read-only.
 @param data the buffer from which to create the string (CONSUMED)
 @param offset the first index of  <em> data </em>  which will
            be read as DER input in the new stream
 @param len how long a chunk of the buffer to use,           starting at "offset"
 @throw IOExceptionWhen no it possible load data.
 */
- (instancetype)initWithByteArray:(IOSByteArray *)data
                          withInt:(jint)offset
                          withInt:(jint)len;

/*!
 @brief Create a DER input stream from part of a data buffer with
  additional arg to control whether DER checks are enforced.
 The buffer is not copied, it is shared.  Accordingly, the
  buffer should be treated as read-only.
 @param data the buffer from which to create the string (CONSUMED)
 @param offset the first index of  <em> data </em>  which will
            be read as DER input in the new stream
 @param len how long a chunk of the buffer to use,           starting at "offset"
 @param allowBER whether to allow constructed indefinite-length           encoding as well as tolerate leading 0s
 @throw IOExceptionWhen no it possible load data.
 */
- (instancetype)initWithByteArray:(IOSByteArray *)data
                          withInt:(jint)offset
                          withInt:(jint)len
                      withBoolean:(jboolean)allowBER;

/*!
 @brief Returns the number of bytes available for reading.
 This is most useful for testing whether the stream is
  empty.
 @return the number of bytes available for reading.
 */
- (jint)available;

/*!
 @brief Get a integer from the input stream as a BigInteger object.
 @return the integer held in this DER input stream.
 @throw IOExceptionWhen no it possible load data.
 */
- (JavaMathBigInteger *)getBigInteger;

/*!
 @brief Get a bit string from the input stream.Padded bits (if any)
  will be stripped off before the bit string is returned.
 @return a bit string from the input stream.
 @throw IOExceptionWhen no it possible load data.
 */
- (IOSByteArray *)getBitString;

/*!
 @brief Read a string that was encoded as a BMPString DER value.
 @return a string that was encoded as a BMPString DER value.
 @throw IOExceptionWhen no it possible load data.
 */
- (NSString *)getBMPString;

/*!
 @brief Returns the asked number of bytes from the input stream.
 @param val Buffer to store the bytes readed.
 @throw IOExceptionWhen no it possible load data.
 */
- (void)getBytesWithByteArray:(IOSByteArray *)val;

/*!
 @brief Get a single DER-encoded value from the input stream.
 It can often be useful to pull a value from the stream
  and defer parsing it.  For example, you can pull a nested
  sequence out with one call, and only examine its elements
  later when you really need to.
 @return a single DER-encoded value.
 @throw IOExceptionWhen no it possible load data.
 */
- (EsGobAfirmaCoreSignersDerDerValue *)getDerValue;

/*!
 @brief Get an enumerated from the input stream.
 @return the integer held in this DER input stream.
 @throw IOExceptionWhen no it possible load data.
 */
- (jint)getEnumerated;

/*!
 @brief Read a string that was encoded as a GeneralString DER value.
 @return a string that was encoded as a GeneralString DER value.
 @throw IOExceptionWhen no it possible load data from InputStream.
 */
- (NSString *)getGeneralString;

/*!
 @brief Read a string that was encoded as a IA5tring DER value.
 @return a string that was encoded as a IA5tring DER value.
 @throw IOExceptionWhen no it possible load data.
 */
- (NSString *)getIA5String;

/*!
 @brief Get an integer from the input stream as an integer.
 @return the integer held in this DER input stream.
 @throw IOExceptionWhen no it possible load data.
 */
- (jint)getInteger;

/*!
 @brief Reads an encoded null value from the input stream.
 @throw IOExceptionWhen no it possible load data.
 */
- (void)getNull;

/*!
 @brief Returns an ASN.1 OCTET STRING from the input stream.
 @return an ASN.1 OCTET STRING.
 @throw IOExceptionWhen no it possible load data.
 */
- (IOSByteArray *)getOctetString;

/*!
 @brief Reads an X.200 style Object Identifier from the stream.
 @return an X.200 style Object Identifier.
 @throw IOExceptionWhen no it possible load data.
 */
- (EsGobAfirmaCoreSignersDerObjectIdentifier *)getOID;

/*!
 @brief Returns an ASN.1 INTEGER value as a positive BigInteger.
 This is just to deal with implementations that incorrectly encode
  some values as negative.
 @return the integer held in this DER value as a BigInteger.
 @throw IOExceptionWhen no it possible load data.
 */
- (JavaMathBigInteger *)getPositiveBigInteger;

/*!
 @brief Read a string that was encoded as a PrintableString DER value.
 @return a string that was encoded as a PrintableString DER value.
 @throw IOExceptionWhen no it possible load data from InputStream.
 */
- (NSString *)getPrintableString;

/*!
 @brief Return a sequence of encoded entities.ASN.1 sequences are
  ordered, and they are often used, like a "struct" in C or C++,
  to group data values.
 They may have optional or context
  specific values.
 @param startLen guess about how long the sequence will be           (used to initialize an auto-growing data structure)
 @return array of the values in the sequence
 @throw IOExceptionWhen no it possible load data.
 */
- (IOSObjectArray *)getSequenceWithInt:(jint)startLen;

/*!
 @brief Return a set of encoded entities.ASN.1 sets are unordered,
  though DER may specify an order for some kinds of sets (such
  as the attributes in an X.500 relative distinguished name)
  to facilitate binary comparisons of encoded values.
 @param startLen guess about how large the set will be           (used to initialize an auto-growing data structure)
 @return array of the values in the sequence
 @throw IOExceptionWhen no it possible load data.
 */
- (IOSObjectArray *)getSetWithInt:(jint)startLen;

/*!
 @brief Return a set of encoded entities.ASN.1 sets are unordered,
  though DER may specify an order for some kinds of sets (such
  as the attributes in an X.500 relative distinguished name)
  to facilitate binary comparisons of encoded values.
 @param startLen guess about how large the set will be           (used to initialize an auto-growing data structure)
 @param implicit if true tag is assumed implicit.
 @return array of the values in the sequence
 @throw IOExceptionWhen no it possible load data.
 */
- (IOSObjectArray *)getSetWithInt:(jint)startLen
                      withBoolean:(jboolean)implicit;

/*!
 @brief Read a string that was encoded as a T61String DER value.
 @return a string that was encoded as a T61String DER value.
 @throw IOExceptionWhen no it possible load data.
 */
- (NSString *)getT61String;

/*!
 @brief Get a bit string from the input stream.The bit string need
  not be byte-aligned.
 @return an BitArray.
 @throw IOExceptionWhen no it possible load data.
 */
- (EsGobAfirmaCoreSignersDerBitArray *)getUnalignedBitString;

/*!
 @brief Read a string that was encoded as a UTF8String DER value.
 @return a string that was encoded as a UTF8String DER value.
 @throw IOExceptionWhen no it possible load data.
 */
- (NSString *)getUTF8String;

/*!
 @brief Mark the current position in the buffer, so that
  a later call to <code>reset</code> will return here.
 @param value current position in the buffer.
 */
- (void)markWithInt:(jint)value;

- (jint)peekByte;

/*!
 @brief Return to the position of the last <code>mark</code>
  call.A mark is implicitly set at the beginning of
  the stream when it is created.
 */
- (void)reset;

/*!
 @brief Creates a new DER input stream from part of this input stream.
 @param len how long a chunk of the current input stream to use,           starting at the current position.
 @param do_skip true if the existing data in the input stream should           be skipped.  If this value is false, the next data read
            on this stream and the newly created stream will be the
            same.
 @return DER input stream.
 @throw IOExceptionWhen no it possible load data.
 */
- (EsGobAfirmaCoreSignersDerDerInputStream *)subStreamWithInt:(jint)len
                                                  withBoolean:(jboolean)do_skip;

/*!
 @brief Return what has been written to this DerInputStream
  as a byte array.Useful for debugging.
 @return Input stream content.
 */
- (IOSByteArray *)toByteArray;

#pragma mark Protected

- (IOSObjectArray *)readVectorWithInt:(jint)startLen;

#pragma mark Package-Private

- (instancetype)initWithEsGobAfirmaCoreSignersDerDerInputBuffer:(EsGobAfirmaCoreSignersDerDerInputBuffer *)buf;

- (jint)getByte;

- (jint)getLength;

+ (jint)getLengthWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (jint)getLengthWithInt:(jint)lenByte
   withJavaIoInputStream:(JavaIoInputStream *)inArg;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobAfirmaCoreSignersDerDerInputStream)

J2OBJC_FIELD_SETTER(EsGobAfirmaCoreSignersDerDerInputStream, buffer_, EsGobAfirmaCoreSignersDerDerInputBuffer *)

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_(EsGobAfirmaCoreSignersDerDerInputStream *self, IOSByteArray *data);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerInputStream *new_EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_(IOSByteArray *data) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerInputStream *create_EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_withInt_withInt_withBoolean_(EsGobAfirmaCoreSignersDerDerInputStream *self, IOSByteArray *data, jint offset, jint len, jboolean allowBER);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerInputStream *new_EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_withInt_withInt_withBoolean_(IOSByteArray *data, jint offset, jint len, jboolean allowBER) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerInputStream *create_EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_withInt_withInt_withBoolean_(IOSByteArray *data, jint offset, jint len, jboolean allowBER);

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_withInt_withInt_(EsGobAfirmaCoreSignersDerDerInputStream *self, IOSByteArray *data, jint offset, jint len);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerInputStream *new_EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_withInt_withInt_(IOSByteArray *data, jint offset, jint len) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerInputStream *create_EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_withInt_withInt_(IOSByteArray *data, jint offset, jint len);

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersDerDerInputStream_initWithEsGobAfirmaCoreSignersDerDerInputBuffer_(EsGobAfirmaCoreSignersDerDerInputStream *self, EsGobAfirmaCoreSignersDerDerInputBuffer *buf);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerInputStream *new_EsGobAfirmaCoreSignersDerDerInputStream_initWithEsGobAfirmaCoreSignersDerDerInputBuffer_(EsGobAfirmaCoreSignersDerDerInputBuffer *buf) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersDerDerInputStream *create_EsGobAfirmaCoreSignersDerDerInputStream_initWithEsGobAfirmaCoreSignersDerDerInputBuffer_(EsGobAfirmaCoreSignersDerDerInputBuffer *buf);

FOUNDATION_EXPORT jint EsGobAfirmaCoreSignersDerDerInputStream_getLengthWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT jint EsGobAfirmaCoreSignersDerDerInputStream_getLengthWithInt_withJavaIoInputStream_(jint lenByte, JavaIoInputStream *inArg);

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaCoreSignersDerDerInputStream)

#endif

#pragma pop_macro("INCLUDE_ALL_EsGobAfirmaCoreSignersDerDerInputStream")
