//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/Base64.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/afirma/core/misc/Base64.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/StandardCharsets.h"

#if !__has_feature(objc_arc)
#error "es/gob/afirma/core/misc/Base64 must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreMiscBase64 ()

+ (IOSByteArray *)getAlphabetWithInt:(jint)options;

+ (IOSByteArray *)getDecodabetWithInt:(jint)options;

- (instancetype)init;

+ (IOSByteArray *)encode3to4WithByteArray:(IOSByteArray *)source
                                  withInt:(jint)srcOffset
                                  withInt:(jint)numSigBytes
                            withByteArray:(IOSByteArray *)destination
                                  withInt:(jint)destOffset
                                  withInt:(jint)options;

/*!
 @brief Encodes a byte array into Base64 notation.
 <p>
  Example: <code>encode( myData )</code> or 
 <p>
  Example: <code>encodeBytes( myData, Base64.DO_BREAK_LINES )</code>
 @param source The data to convert
 @param off Offset in array where conversion should begin
 @param len Length of data to convert
 @param options Specified options
 @return The Base64-encoded data as a String
 @throw IllegalArgumentExceptionif source array, offset, or length are invalid
 @since 2.0
 */
+ (NSString *)encodeBytesWithByteArray:(IOSByteArray *)source
                               withInt:(jint)off
                               withInt:(jint)len
                               withInt:(jint)options;

/*!
 @brief Similar to <code>encodeBytes(byte[], int, int, int)</code> but returns
  a byte array instead of instantiating a String.This is more efficient
  if you're working with I/O streams and have large data sets to encode.
 @param source The data to convert
 @param off Offset in array where conversion should begin
 @param len Length of data to convert
 @param options Specified options
 @return The Base64-encoded data as a String
 @throw IllegalArgumentExceptionif source array, offset, or length are invalid
 @since 2.3.1
 */
+ (IOSByteArray *)encodeBytesToBytesWithByteArray:(IOSByteArray *)source
                                          withInt:(jint)off
                                          withInt:(jint)len
                                          withInt:(jint)options;

/*!
 @brief Decodes four bytes from array <var>source</var>
  and writes the resulting bytes (up to three of them) to 
 <var>destination</var>.
 The source and destination arrays can be manipulated
  anywhere along their length by specifying 
 <var>srcOffset</var> and <var>destOffset</var>.
  This method does not check to make sure your arrays
  are large enough to accomodate <var>srcOffset</var> + 4 for
  the <var>source</var> array or <var>destOffset</var> + 3 for
  the <var>destination</var> array.
  This method returns the actual number of bytes that
  were converted from the Base64 encoding. 
 <p>This is the lowest level of the decoding methods with
  all possible parameters.</p>
 @param source the array to convert
 @param srcOffset the index where conversion begins
 @param destination the array to hold the conversion
 @param destOffset the index where output will be put
 @param options alphabet type is pulled from this (standard, url-safe, ordered)
 @return the number of decoded bytes converted
 @throw IllegalArgumentExceptionif srcOffset or destOffset are invalid
          or there is not enough room in the array.
 @since 1.3
 */
+ (jint)decode4to3WithByteArray:(IOSByteArray *)source
                        withInt:(jint)srcOffset
                  withByteArray:(IOSByteArray *)destination
                        withInt:(jint)destOffset
                        withInt:(jint)options;

@end

/*!
 @brief No options specified.Value is zero.
 */
inline jint EsGobAfirmaCoreMiscBase64_get_NO_OPTIONS(void);
#define EsGobAfirmaCoreMiscBase64_NO_OPTIONS 0
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreMiscBase64, NO_OPTIONS, jint)

/*!
 @brief Do break lines when encoding.Value is 8.
 */
inline jint EsGobAfirmaCoreMiscBase64_get_DO_BREAK_LINES(void);
#define EsGobAfirmaCoreMiscBase64_DO_BREAK_LINES 8
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreMiscBase64, DO_BREAK_LINES, jint)

/*!
 @brief Encode using Base64-like encoding that is URL- and Filename-safe as described
  in Section 4 of RFC3548: 
 <a href="http://www.faqs.org/rfcs/rfc3548.html">http://www.faqs.org/rfcs/rfc3548.html</a>.
 It is important to note that data encoded this way is <em>not</em> officially valid Base64,
  or at the very least should not be called Base64 without also specifying that is
  was encoded using the URL- and Filename-safe dialect.
 */
inline jint EsGobAfirmaCoreMiscBase64_get_URL_SAFE(void);
#define EsGobAfirmaCoreMiscBase64_URL_SAFE 16
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreMiscBase64, URL_SAFE, jint)

/*!
 @brief Maximum line length (76) of Base64 output.
 */
inline jint EsGobAfirmaCoreMiscBase64_get_MAX_LINE_LENGTH(void);
#define EsGobAfirmaCoreMiscBase64_MAX_LINE_LENGTH 76
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreMiscBase64, MAX_LINE_LENGTH, jint)

/*!
 @brief The equals sign (=) as a byte.
 */
inline jbyte EsGobAfirmaCoreMiscBase64_get_EQUALS_SIGN(void);
#define EsGobAfirmaCoreMiscBase64_EQUALS_SIGN 61
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreMiscBase64, EQUALS_SIGN, jbyte)

/*!
 @brief The new line character (\n) as a byte.
 */
inline jbyte EsGobAfirmaCoreMiscBase64_get_NEW_LINE(void);
#define EsGobAfirmaCoreMiscBase64_NEW_LINE 10
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreMiscBase64, NEW_LINE, jbyte)

/*!
 @brief Preferred encoding.
 */
inline JavaNioCharsetCharset *EsGobAfirmaCoreMiscBase64_get_PREFERRED_ENCODING(void);
static JavaNioCharsetCharset *EsGobAfirmaCoreMiscBase64_PREFERRED_ENCODING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscBase64, PREFERRED_ENCODING, JavaNioCharsetCharset *)

inline jbyte EsGobAfirmaCoreMiscBase64_get_WHITE_SPACE_ENC(void);
#define EsGobAfirmaCoreMiscBase64_WHITE_SPACE_ENC -9
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreMiscBase64, WHITE_SPACE_ENC, jbyte)

inline jbyte EsGobAfirmaCoreMiscBase64_get_EQUALS_SIGN_ENC(void);
#define EsGobAfirmaCoreMiscBase64_EQUALS_SIGN_ENC -1
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreMiscBase64, EQUALS_SIGN_ENC, jbyte)

/*!
 @brief The 64 valid Base64 values.
 */
inline IOSByteArray *EsGobAfirmaCoreMiscBase64_get_STANDARD_ALPHABET(void);
static IOSByteArray *EsGobAfirmaCoreMiscBase64_STANDARD_ALPHABET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscBase64, STANDARD_ALPHABET, IOSByteArray *)

/*!
 @brief Translates a Base64 value to either its 6-bit reconstruction value
  or a negative number indicating some other meaning.
 */
inline IOSByteArray *EsGobAfirmaCoreMiscBase64_get_STANDARD_DECODABET(void);
static IOSByteArray *EsGobAfirmaCoreMiscBase64_STANDARD_DECODABET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscBase64, STANDARD_DECODABET, IOSByteArray *)

/*!
 @brief Used in the URL- and Filename-safe dialect described in Section 4 of RFC3548: 
 <a href="http://www.faqs.org/rfcs/rfc3548.html">http://www.faqs.org/rfcs/rfc3548.html</a>.
 Notice that the last two bytes become "hyphen" and "underscore" instead of "plus" and "slash."
 */
inline IOSByteArray *EsGobAfirmaCoreMiscBase64_get_URL_SAFE_ALPHABET(void);
static IOSByteArray *EsGobAfirmaCoreMiscBase64_URL_SAFE_ALPHABET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscBase64, URL_SAFE_ALPHABET, IOSByteArray *)

/*!
 @brief Used in decoding URL- and Filename-safe dialects of Base64.
 */
inline IOSByteArray *EsGobAfirmaCoreMiscBase64_get_URL_SAFE_DECODABET(void);
static IOSByteArray *EsGobAfirmaCoreMiscBase64_URL_SAFE_DECODABET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscBase64, URL_SAFE_DECODABET, IOSByteArray *)

/*!
 @brief Caracteres aceptados en una codificaci&oacute;n Base64 seg&uacute;n la 
 <a href="http://www.faqs.org/rfcs/rfc3548.html">RFC 3548</a>.Importante:
  A&ntilde;adimos el car&aacute;cter &tilde; porque en ciertas
  codificaciones de Base64 est&aacute; aceptado, aunque no es nada
  recomendable
 */
inline NSString *EsGobAfirmaCoreMiscBase64_get_BASE_64_ALPHABET(void);
static NSString *EsGobAfirmaCoreMiscBase64_BASE_64_ALPHABET = @"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz=_-\t\n+/0123456789\x0d~";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscBase64, BASE_64_ALPHABET, NSString *)

__attribute__((unused)) static IOSByteArray *EsGobAfirmaCoreMiscBase64_getAlphabetWithInt_(jint options);

__attribute__((unused)) static IOSByteArray *EsGobAfirmaCoreMiscBase64_getDecodabetWithInt_(jint options);

__attribute__((unused)) static void EsGobAfirmaCoreMiscBase64_init(EsGobAfirmaCoreMiscBase64 *self);

__attribute__((unused)) static EsGobAfirmaCoreMiscBase64 *new_EsGobAfirmaCoreMiscBase64_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobAfirmaCoreMiscBase64 *create_EsGobAfirmaCoreMiscBase64_init(void);

__attribute__((unused)) static IOSByteArray *EsGobAfirmaCoreMiscBase64_encode3to4WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(IOSByteArray *source, jint srcOffset, jint numSigBytes, IOSByteArray *destination, jint destOffset, jint options);

__attribute__((unused)) static NSString *EsGobAfirmaCoreMiscBase64_encodeBytesWithByteArray_withInt_withInt_withInt_(IOSByteArray *source, jint off, jint len, jint options);

__attribute__((unused)) static IOSByteArray *EsGobAfirmaCoreMiscBase64_encodeBytesToBytesWithByteArray_withInt_withInt_withInt_(IOSByteArray *source, jint off, jint len, jint options);

__attribute__((unused)) static jint EsGobAfirmaCoreMiscBase64_decode4to3WithByteArray_withInt_withByteArray_withInt_withInt_(IOSByteArray *source, jint srcOffset, IOSByteArray *destination, jint destOffset, jint options);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/Base64.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaCoreMiscBase64)


#line 49
@implementation EsGobAfirmaCoreMiscBase64


#line 211
+ (IOSByteArray *)getAlphabetWithInt:(jint)options {
  return EsGobAfirmaCoreMiscBase64_getAlphabetWithInt_(options);
}


#line 218
+ (IOSByteArray *)getDecodabetWithInt:(jint)options {
  return EsGobAfirmaCoreMiscBase64_getDecodabetWithInt_(options);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 226
- (instancetype)init {
  EsGobAfirmaCoreMiscBase64_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 233
+ (IOSByteArray *)encode3to4WithByteArray:(IOSByteArray *)source
                                  withInt:(jint)srcOffset
                                  withInt:(jint)numSigBytes
                            withByteArray:(IOSByteArray *)destination
                                  withInt:(jint)destOffset
                                  withInt:(jint)options {
  return EsGobAfirmaCoreMiscBase64_encode3to4WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(source, srcOffset, numSigBytes, destination, destOffset, options);
}


#line 281
+ (NSString *)encodeWithByteArray:(IOSByteArray *)source {
  return EsGobAfirmaCoreMiscBase64_encodeWithByteArray_(source);
}


#line 293
+ (NSString *)encodeWithByteArray:(IOSByteArray *)source
                      withBoolean:(jboolean)urlSafe {
  return EsGobAfirmaCoreMiscBase64_encodeWithByteArray_withBoolean_(source, urlSafe);
}


#line 312
+ (NSString *)encodeBytesWithByteArray:(IOSByteArray *)source
                               withInt:(jint)off
                               withInt:(jint)len
                               withInt:(jint)options {
  return EsGobAfirmaCoreMiscBase64_encodeBytesWithByteArray_withInt_withInt_withInt_(source, off, len, options);
}


#line 331
+ (IOSByteArray *)encodeBytesToBytesWithByteArray:(IOSByteArray *)source
                                          withInt:(jint)off
                                          withInt:(jint)len
                                          withInt:(jint)options {
  return EsGobAfirmaCoreMiscBase64_encodeBytesToBytesWithByteArray_withInt_withInt_withInt_(source, off, len, options);
}


#line 438
+ (jint)decode4to3WithByteArray:(IOSByteArray *)source
                        withInt:(jint)srcOffset
                  withByteArray:(IOSByteArray *)destination
                        withInt:(jint)destOffset
                        withInt:(jint)options {
  return EsGobAfirmaCoreMiscBase64_decode4to3WithByteArray_withInt_withByteArray_withInt_withInt_(source, srcOffset, destination, destOffset, options);
}


#line 516
+ (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)source
                              withInt:(jint)off
                              withInt:(jint)len
                          withBoolean:(jboolean)urlSafe {
  return EsGobAfirmaCoreMiscBase64_decodeWithByteArray_withInt_withInt_withBoolean_(source, off, len, urlSafe);
}


#line 599
+ (IOSByteArray *)decodeWithNSString:(NSString *)str {
  return EsGobAfirmaCoreMiscBase64_decodeWithNSString_(str);
}


#line 610
+ (IOSByteArray *)decodeWithNSString:(NSString *)str
                         withBoolean:(jboolean)urlSafe {
  return EsGobAfirmaCoreMiscBase64_decodeWithNSString_withBoolean_(str, urlSafe);
}


#line 631
+ (jboolean)isBase64WithByteArray:(IOSByteArray *)data {
  return EsGobAfirmaCoreMiscBase64_isBase64WithByteArray_(data);
}


#line 664
+ (jboolean)isBase64WithNSString:(NSString *)data {
  return EsGobAfirmaCoreMiscBase64_isBase64WithNSString_(data);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[B", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 10, 9, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 13, 14, 15, -1, -1, -1 },
    { NULL, "[B", 0x9, 13, 16, 15, -1, -1, -1 },
    { NULL, "[B", 0x9, 13, 17, 15, -1, -1, -1 },
    { NULL, "Z", 0x9, 18, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 18, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAlphabetWithInt:);
  methods[1].selector = @selector(getDecodabetWithInt:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(encode3to4WithByteArray:withInt:withInt:withByteArray:withInt:withInt:);
  methods[4].selector = @selector(encodeWithByteArray:);
  methods[5].selector = @selector(encodeWithByteArray:withBoolean:);
  methods[6].selector = @selector(encodeBytesWithByteArray:withInt:withInt:withInt:);
  methods[7].selector = @selector(encodeBytesToBytesWithByteArray:withInt:withInt:withInt:);
  methods[8].selector = @selector(decode4to3WithByteArray:withInt:withByteArray:withInt:withInt:);
  methods[9].selector = @selector(decodeWithByteArray:withInt:withInt:withBoolean:);
  methods[10].selector = @selector(decodeWithNSString:);
  methods[11].selector = @selector(decodeWithNSString:withBoolean:);
  methods[12].selector = @selector(isBase64WithByteArray:);
  methods[13].selector = @selector(isBase64WithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_OPTIONS", "I", .constantValue.asInt = EsGobAfirmaCoreMiscBase64_NO_OPTIONS, 0x1a, -1, -1, -1, -1 },
    { "DO_BREAK_LINES", "I", .constantValue.asInt = EsGobAfirmaCoreMiscBase64_DO_BREAK_LINES, 0x1a, -1, -1, -1, -1 },
    { "URL_SAFE", "I", .constantValue.asInt = EsGobAfirmaCoreMiscBase64_URL_SAFE, 0x1a, -1, -1, -1, -1 },
    { "MAX_LINE_LENGTH", "I", .constantValue.asInt = EsGobAfirmaCoreMiscBase64_MAX_LINE_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "EQUALS_SIGN", "B", .constantValue.asChar = EsGobAfirmaCoreMiscBase64_EQUALS_SIGN, 0x1a, -1, -1, -1, -1 },
    { "NEW_LINE", "B", .constantValue.asChar = EsGobAfirmaCoreMiscBase64_NEW_LINE, 0x1a, -1, -1, -1, -1 },
    { "PREFERRED_ENCODING", "LJavaNioCharsetCharset;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "WHITE_SPACE_ENC", "B", .constantValue.asChar = EsGobAfirmaCoreMiscBase64_WHITE_SPACE_ENC, 0x1a, -1, -1, -1, -1 },
    { "EQUALS_SIGN_ENC", "B", .constantValue.asChar = EsGobAfirmaCoreMiscBase64_EQUALS_SIGN_ENC, 0x1a, -1, -1, -1, -1 },
    { "STANDARD_ALPHABET", "[B", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "STANDARD_DECODABET", "[B", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "URL_SAFE_ALPHABET", "[B", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "URL_SAFE_DECODABET", "[B", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "BASE_64_ALPHABET", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
  };
  static const void *ptrTable[] = { "getAlphabet", "I", "getDecodabet", "encode3to4", "[BII[BII", "encode", "[B", "[BZ", "encodeBytes", "[BIII", "encodeBytesToBytes", "decode4to3", "[BI[BII", "decode", "[BIIZ", "LJavaIoIOException;", "LNSString;", "LNSString;Z", "isBase64", &EsGobAfirmaCoreMiscBase64_PREFERRED_ENCODING, &EsGobAfirmaCoreMiscBase64_STANDARD_ALPHABET, &EsGobAfirmaCoreMiscBase64_STANDARD_DECODABET, &EsGobAfirmaCoreMiscBase64_URL_SAFE_ALPHABET, &EsGobAfirmaCoreMiscBase64_URL_SAFE_DECODABET, &EsGobAfirmaCoreMiscBase64_BASE_64_ALPHABET };
  static const J2ObjcClassInfo _EsGobAfirmaCoreMiscBase64 = { "Base64", "es.gob.afirma.core.misc", ptrTable, methods, fields, 7, 0x11, 14, 14, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreMiscBase64;
}

+ (void)initialize {
  if (self == [EsGobAfirmaCoreMiscBase64 class]) {
    EsGobAfirmaCoreMiscBase64_PREFERRED_ENCODING = JreLoadStatic(JavaNioCharsetStandardCharsets, US_ASCII);
    EsGobAfirmaCoreMiscBase64_STANDARD_ALPHABET = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 97
      (jbyte) 'A', (jbyte) 'B', (jbyte) 'C', (jbyte) 'D', (jbyte) 'E', (jbyte) 'F', (jbyte) 'G',
#line 98
      (jbyte) 'H', (jbyte) 'I', (jbyte) 'J', (jbyte) 'K', (jbyte) 'L', (jbyte) 'M', (jbyte) 'N',
#line 99
      (jbyte) 'O', (jbyte) 'P', (jbyte) 'Q', (jbyte) 'R', (jbyte) 'S', (jbyte) 'T', (jbyte) 'U',
#line 100
      (jbyte) 'V', (jbyte) 'W', (jbyte) 'X', (jbyte) 'Y', (jbyte) 'Z',
#line 101
      (jbyte) 'a', (jbyte) 'b', (jbyte) 'c', (jbyte) 'd', (jbyte) 'e', (jbyte) 'f', (jbyte) 'g',
#line 102
      (jbyte) 'h', (jbyte) 'i', (jbyte) 'j', (jbyte) 'k', (jbyte) 'l', (jbyte) 'm', (jbyte) 'n',
#line 103
      (jbyte) 'o', (jbyte) 'p', (jbyte) 'q', (jbyte) 'r', (jbyte) 's', (jbyte) 't', (jbyte) 'u',
#line 104
      (jbyte) 'v', (jbyte) 'w', (jbyte) 'x', (jbyte) 'y', (jbyte) 'z',
#line 105
      (jbyte) '0', (jbyte) '1', (jbyte) '2', (jbyte) '3', (jbyte) '4', (jbyte) '5',
#line 106
      (jbyte) '6', (jbyte) '7', (jbyte) '8', (jbyte) '9', (jbyte) '+', (jbyte) '/' } count:64];
      EsGobAfirmaCoreMiscBase64_STANDARD_DECODABET = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 114
        -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 115
        -5, -5,
#line 116
        -9, -9,
#line 117
        -5,
#line 118
        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 119
        -9, -9, -9, -9, -9,
#line 120
        -5,
#line 121
        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 122
        62,
#line 123
        -9, -9, -9,
#line 124
        63,
#line 125
        52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
#line 126
        -9, -9, -9,
#line 127
        -1,
#line 128
        -9, -9, -9,
#line 129
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
#line 130
        14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
#line 131
        -9, -9, -9, -9, -9, -9,
#line 132
        26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
#line 133
        39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
#line 134
        -9, -9, -9, -9, -9,
#line 135
        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 136
        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 137
        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 138
        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 139
        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 140
        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 141
        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 142
        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 143
        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 144
        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9 } count:256];
        EsGobAfirmaCoreMiscBase64_URL_SAFE_ALPHABET = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 156
          (jbyte) 'A', (jbyte) 'B', (jbyte) 'C', (jbyte) 'D', (jbyte) 'E', (jbyte) 'F', (jbyte) 'G',
#line 157
          (jbyte) 'H', (jbyte) 'I', (jbyte) 'J', (jbyte) 'K', (jbyte) 'L', (jbyte) 'M', (jbyte) 'N',
#line 158
          (jbyte) 'O', (jbyte) 'P', (jbyte) 'Q', (jbyte) 'R', (jbyte) 'S', (jbyte) 'T', (jbyte) 'U',
#line 159
          (jbyte) 'V', (jbyte) 'W', (jbyte) 'X', (jbyte) 'Y', (jbyte) 'Z',
#line 160
          (jbyte) 'a', (jbyte) 'b', (jbyte) 'c', (jbyte) 'd', (jbyte) 'e', (jbyte) 'f', (jbyte) 'g',
#line 161
          (jbyte) 'h', (jbyte) 'i', (jbyte) 'j', (jbyte) 'k', (jbyte) 'l', (jbyte) 'm', (jbyte) 'n',
#line 162
          (jbyte) 'o', (jbyte) 'p', (jbyte) 'q', (jbyte) 'r', (jbyte) 's', (jbyte) 't', (jbyte) 'u',
#line 163
          (jbyte) 'v', (jbyte) 'w', (jbyte) 'x', (jbyte) 'y', (jbyte) 'z',
#line 164
          (jbyte) '0', (jbyte) '1', (jbyte) '2', (jbyte) '3', (jbyte) '4', (jbyte) '5',
#line 165
          (jbyte) '6', (jbyte) '7', (jbyte) '8', (jbyte) '9', (jbyte) '-', (jbyte) '_' } count:64];
          EsGobAfirmaCoreMiscBase64_URL_SAFE_DECODABET = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 172
            -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 173
            -5, -5,
#line 174
            -9, -9,
#line 175
            -5,
#line 176
            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 177
            -9, -9, -9, -9, -9,
#line 178
            -5,
#line 179
            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 180
            -9,
#line 181
            -9,
#line 182
            62,
#line 183
            -9,
#line 184
            -9,
#line 185
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
#line 186
            -9, -9, -9,
#line 187
            -1,
#line 188
            -9, -9, -9,
#line 189
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
#line 190
            14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
#line 191
            -9, -9, -9, -9,
#line 192
            63,
#line 193
            -9,
#line 194
            26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
#line 195
            39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
#line 196
            -9, -9, -9, -9, -9,
#line 197
            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 198
            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 199
            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 200
            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 201
            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 202
            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 203
            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 204
            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 205
            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 206
            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9 } count:256];
            J2OBJC_SET_INITIALIZED(EsGobAfirmaCoreMiscBase64)
          }
        }

@end


#line 211
IOSByteArray *EsGobAfirmaCoreMiscBase64_getAlphabetWithInt_(jint options) {
  EsGobAfirmaCoreMiscBase64_initialize();
  
#line 212
  if ((options & EsGobAfirmaCoreMiscBase64_URL_SAFE) == EsGobAfirmaCoreMiscBase64_URL_SAFE) {
    return EsGobAfirmaCoreMiscBase64_URL_SAFE_ALPHABET;
  }
  return EsGobAfirmaCoreMiscBase64_STANDARD_ALPHABET;
}


#line 218
IOSByteArray *EsGobAfirmaCoreMiscBase64_getDecodabetWithInt_(jint options) {
  EsGobAfirmaCoreMiscBase64_initialize();
  
#line 219
  if ((options & EsGobAfirmaCoreMiscBase64_URL_SAFE) == EsGobAfirmaCoreMiscBase64_URL_SAFE) {
    return EsGobAfirmaCoreMiscBase64_URL_SAFE_DECODABET;
  }
  return EsGobAfirmaCoreMiscBase64_STANDARD_DECODABET;
}


#line 226
void EsGobAfirmaCoreMiscBase64_init(EsGobAfirmaCoreMiscBase64 *self) {
  NSObject_init(self);
}


#line 226
EsGobAfirmaCoreMiscBase64 *new_EsGobAfirmaCoreMiscBase64_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscBase64, init)
}


#line 226
EsGobAfirmaCoreMiscBase64 *create_EsGobAfirmaCoreMiscBase64_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscBase64, init)
}


#line 233
IOSByteArray *EsGobAfirmaCoreMiscBase64_encode3to4WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(IOSByteArray *source, jint srcOffset, jint numSigBytes, IOSByteArray *destination, jint destOffset, jint options) {
  EsGobAfirmaCoreMiscBase64_initialize();
  
#line 240
  IOSByteArray *alphabet = EsGobAfirmaCoreMiscBase64_getAlphabetWithInt_(options);
  
#line 246
  jint inBuff = (numSigBytes > 0 ? JreURShift32(JreLShift32(IOSByteArray_Get(nil_chk(source), srcOffset), 24), 8) : 0) |
#line 247
  (numSigBytes > 1 ? JreURShift32(JreLShift32(IOSByteArray_Get(nil_chk(source), srcOffset + 1), 24), 16) : 0) |
#line 248
  (numSigBytes > 2 ? JreURShift32(JreLShift32(IOSByteArray_Get(nil_chk(source), srcOffset + 2), 24), 24) : 0);
  
#line 250
  switch (numSigBytes) {
    
#line 252
    case 3:
    *IOSByteArray_GetRef(nil_chk(destination), destOffset) = IOSByteArray_Get(nil_chk(alphabet), JreURShift32(inBuff, 18));
    *IOSByteArray_GetRef(destination, destOffset + 1) = IOSByteArray_Get(alphabet, (JreURShift32(inBuff, 12)) & (jint) 0x3f);
    *IOSByteArray_GetRef(destination, destOffset + 2) = IOSByteArray_Get(alphabet, (JreURShift32(inBuff, 6)) & (jint) 0x3f);
    *IOSByteArray_GetRef(destination, destOffset + 3) = IOSByteArray_Get(alphabet, inBuff & (jint) 0x3f);
    return destination;
    
#line 259
    case 2:
    *IOSByteArray_GetRef(nil_chk(destination), destOffset) = IOSByteArray_Get(nil_chk(alphabet), JreURShift32(inBuff, 18));
    *IOSByteArray_GetRef(destination, destOffset + 1) = IOSByteArray_Get(alphabet, (JreURShift32(inBuff, 12)) & (jint) 0x3f);
    *IOSByteArray_GetRef(destination, destOffset + 2) = IOSByteArray_Get(alphabet, (JreURShift32(inBuff, 6)) & (jint) 0x3f);
    *IOSByteArray_GetRef(destination, destOffset + 3) = EsGobAfirmaCoreMiscBase64_EQUALS_SIGN;
    return destination;
    
#line 266
    case 1:
    *IOSByteArray_GetRef(nil_chk(destination), destOffset) = IOSByteArray_Get(nil_chk(alphabet), JreURShift32(inBuff, 18));
    *IOSByteArray_GetRef(destination, destOffset + 1) = IOSByteArray_Get(alphabet, (JreURShift32(inBuff, 12)) & (jint) 0x3f);
    *IOSByteArray_GetRef(destination, destOffset + 2) = EsGobAfirmaCoreMiscBase64_EQUALS_SIGN;
    *IOSByteArray_GetRef(destination, destOffset + 3) = EsGobAfirmaCoreMiscBase64_EQUALS_SIGN;
    return destination;
    
#line 273
    default:
    return destination;
  }
}


#line 281
NSString *EsGobAfirmaCoreMiscBase64_encodeWithByteArray_(IOSByteArray *source) {
  EsGobAfirmaCoreMiscBase64_initialize();
  
#line 282
  NSString *encoded = EsGobAfirmaCoreMiscBase64_encodeBytesWithByteArray_withInt_withInt_withInt_(source, 0, ((IOSByteArray *) nil_chk(source))->size_, EsGobAfirmaCoreMiscBase64_NO_OPTIONS);
  JreAssert(encoded != nil, @"es/gob/afirma/core/misc/Base64.java:283 condition failed: assert encoded != null;");
  return encoded;
}


#line 293
NSString *EsGobAfirmaCoreMiscBase64_encodeWithByteArray_withBoolean_(IOSByteArray *source, jboolean urlSafe) {
  EsGobAfirmaCoreMiscBase64_initialize();
  
#line 294
  return EsGobAfirmaCoreMiscBase64_encodeBytesWithByteArray_withInt_withInt_withInt_(source, 0, ((IOSByteArray *) nil_chk(source))->size_, urlSafe ? EsGobAfirmaCoreMiscBase64_URL_SAFE : EsGobAfirmaCoreMiscBase64_NO_OPTIONS);
}


#line 312
NSString *EsGobAfirmaCoreMiscBase64_encodeBytesWithByteArray_withInt_withInt_withInt_(IOSByteArray *source, jint off, jint len, jint options) {
  EsGobAfirmaCoreMiscBase64_initialize();
  
#line 313
  IOSByteArray *encoded = EsGobAfirmaCoreMiscBase64_encodeBytesToBytesWithByteArray_withInt_withInt_withInt_(source, off, len, options);
  return [NSString java_stringWithBytes:encoded charset:EsGobAfirmaCoreMiscBase64_PREFERRED_ENCODING];
}


#line 331
IOSByteArray *EsGobAfirmaCoreMiscBase64_encodeBytesToBytesWithByteArray_withInt_withInt_withInt_(IOSByteArray *source, jint off, jint len, jint options) {
  EsGobAfirmaCoreMiscBase64_initialize();
  if (source == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot serialize a null array");
  }
  
#line 337
  if (off < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Cannot have negative offset: ", off));
  }
  
#line 341
  if (len < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Cannot have length offset: ", len));
  }
  
#line 345
  if (off + len > source->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(
#line 348
    @"Cannot have offset of %d and length of %d with array of length %d", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(
#line 349
    off), JavaLangInteger_valueOfWithInt_(
#line 350
    len), JavaLangInteger_valueOfWithInt_(
#line 351
    source->size_) } count:3 type:NSObject_class_()]));
  }
  
#line 356
  jboolean breakLines = (options & EsGobAfirmaCoreMiscBase64_DO_BREAK_LINES) != 0;
  
#line 361
  jint encLen = JreIntDiv(len, 3) * 4 + (JreIntMod(len, 3) > 0 ? 4 : 0);
  if (breakLines) {
    encLen += JreIntDiv(encLen, EsGobAfirmaCoreMiscBase64_MAX_LINE_LENGTH);
  }
  IOSByteArray *outBuff = [IOSByteArray newArrayWithLength:encLen];
  
#line 367
  jint d = 0;
  jint e = 0;
  jint len2 = len - 2;
  jint lineLength = 0;
  for (; d < len2; d += 3, e += 4) {
    (void) EsGobAfirmaCoreMiscBase64_encode3to4WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(source, d + off, 3, outBuff, e, options);
    
#line 374
    lineLength += 4;
    if (breakLines && lineLength >= EsGobAfirmaCoreMiscBase64_MAX_LINE_LENGTH) {
      *IOSByteArray_GetRef(outBuff, e + 4) = EsGobAfirmaCoreMiscBase64_NEW_LINE;
      e++;
      lineLength = 0;
    }
  }
  
#line 382
  if (d < len) {
    (void) EsGobAfirmaCoreMiscBase64_encode3to4WithByteArray_withInt_withInt_withByteArray_withInt_withInt_(source, d + off, len - d, outBuff, e, options);
    e += 4;
  }
  
#line 389
  if (e <= outBuff->size_ - 1) {
    
#line 394
    IOSByteArray *finalOut = [IOSByteArray newArrayWithLength:e];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(outBuff, 0, finalOut, 0, e);
    return finalOut;
  }
  return outBuff;
}


#line 438
jint EsGobAfirmaCoreMiscBase64_decode4to3WithByteArray_withInt_withByteArray_withInt_withInt_(IOSByteArray *source, jint srcOffset, IOSByteArray *destination, jint destOffset, jint options) {
  EsGobAfirmaCoreMiscBase64_initialize();
  
#line 445
  if (source == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Source array was null");
  }
  if (destination == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Destination array was null");
  }
  if (srcOffset < 0 || srcOffset + 3 >= source->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(
#line 453
    @"Source array with length %d cannot have offset of %d and still process four bytes", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(
#line 454
    source->size_), JavaLangInteger_valueOfWithInt_(
#line 455
    srcOffset) } count:2 type:NSObject_class_()]));
  }
  
#line 458
  if (destOffset < 0 || destOffset + 2 >= destination->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(
#line 461
    @"Destination array with length %d cannot have offset of %d and still store three bytes.", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(
#line 462
    destination->size_), JavaLangInteger_valueOfWithInt_(
#line 463
    destOffset) } count:2 type:NSObject_class_()]));
  }
  
#line 469
  IOSByteArray *decodabet = EsGobAfirmaCoreMiscBase64_getDecodabetWithInt_(options);
  
#line 472
  if (IOSByteArray_Get(source, srcOffset + 2) == EsGobAfirmaCoreMiscBase64_EQUALS_SIGN) {
    jint outBuff = (JreLShift32((IOSByteArray_Get(nil_chk(decodabet), IOSByteArray_Get(source, srcOffset)) & (jint) 0xFF), 18)) | (JreLShift32(
#line 474
    (IOSByteArray_Get(decodabet, IOSByteArray_Get(source, srcOffset + 1)) & (jint) 0xFF), 12));
    
#line 476
    *IOSByteArray_GetRef(destination, destOffset) = (jbyte) (JreURShift32(outBuff, 16));
    return 1;
  }
  else
#line 481
  if (IOSByteArray_Get(source, srcOffset + 3) == EsGobAfirmaCoreMiscBase64_EQUALS_SIGN) {
    jint outBuff = (JreLShift32((IOSByteArray_Get(nil_chk(decodabet), IOSByteArray_Get(source, srcOffset)) & (jint) 0xFF), 18)) | (JreLShift32(
#line 483
    (IOSByteArray_Get(decodabet, IOSByteArray_Get(source, srcOffset + 1)) & (jint) 0xFF), 12)) | (JreLShift32(
#line 484
    (IOSByteArray_Get(decodabet, IOSByteArray_Get(source, srcOffset + 2)) & (jint) 0xFF), 6));
    
#line 486
    *IOSByteArray_GetRef(destination, destOffset) = (jbyte) (JreURShift32(outBuff, 16));
    *IOSByteArray_GetRef(destination, destOffset + 1) = (jbyte) (JreURShift32(outBuff, 8));
    return 2;
  }
  else {
    
#line 493
    jint outBuff = (JreLShift32((IOSByteArray_Get(nil_chk(decodabet), IOSByteArray_Get(source, srcOffset)) & (jint) 0xFF), 18)) | (JreLShift32(
#line 494
    (IOSByteArray_Get(decodabet, IOSByteArray_Get(source, srcOffset + 1)) & (jint) 0xFF), 12)) | (JreLShift32(
#line 495
    (IOSByteArray_Get(decodabet, IOSByteArray_Get(source, srcOffset + 2)) & (jint) 0xFF), 6)) | (
#line 496
    IOSByteArray_Get(decodabet, IOSByteArray_Get(source, srcOffset + 3)) & (jint) 0xFF);
    
#line 499
    *IOSByteArray_GetRef(destination, destOffset) = (jbyte) (JreRShift32(outBuff, 16));
    *IOSByteArray_GetRef(destination, destOffset + 1) = (jbyte) (JreRShift32(outBuff, 8));
    *IOSByteArray_GetRef(destination, destOffset + 2) = (jbyte) outBuff;
    
#line 503
    return 3;
  }
}


#line 516
IOSByteArray *EsGobAfirmaCoreMiscBase64_decodeWithByteArray_withInt_withInt_withBoolean_(IOSByteArray *source, jint off, jint len, jboolean urlSafe) {
  EsGobAfirmaCoreMiscBase64_initialize();
  jint options = EsGobAfirmaCoreMiscBase64_NO_OPTIONS;
  if (urlSafe) {
    options = EsGobAfirmaCoreMiscBase64_URL_SAFE;
  }
  
#line 524
  if (source == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot decode null source array");
  }
  if (off < 0 || off + len > source->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(
#line 530
    @"Source array with length %d cannot have offset of %d and process %d bytes.", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(
#line 531
    source->size_), JavaLangInteger_valueOfWithInt_(
#line 532
    off), JavaLangInteger_valueOfWithInt_(
#line 533
    len) } count:3 type:NSObject_class_()]));
  }
  
#line 538
  if (len == 0) {
    return [IOSByteArray newArrayWithLength:0];
  }
  else if (len < 4) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Base64-encoded string must have at least four characters, but length specified was ",
#line 543
    len));
  }
  
#line 546
  IOSByteArray *decodabet = EsGobAfirmaCoreMiscBase64_getDecodabetWithInt_(options);
  
#line 548
  jint len34 = JreIntDiv(len * 3, 4);
  IOSByteArray *outBuff = [IOSByteArray newArrayWithLength:len34];
  jint outBuffPosn = 0;
  
#line 552
  IOSByteArray *b4 = [IOSByteArray newArrayWithLength:4];
  jint b4Posn = 0;
  jint i = 0;
  jbyte sbiDecode = 0;
  
#line 557
  for (i = off; i < off + len; i++) {
    
#line 559
    sbiDecode = IOSByteArray_Get(nil_chk(decodabet), IOSByteArray_Get(source, i) & (jint) 0xFF);
    
#line 564
    if (sbiDecode >= EsGobAfirmaCoreMiscBase64_WHITE_SPACE_ENC) {
      if (sbiDecode >= EsGobAfirmaCoreMiscBase64_EQUALS_SIGN_ENC) {
        *IOSByteArray_GetRef(b4, b4Posn++) = IOSByteArray_Get(source, i);
        if (b4Posn > 3) {
          outBuffPosn += EsGobAfirmaCoreMiscBase64_decode4to3WithByteArray_withInt_withByteArray_withInt_withInt_(b4, 0, outBuff, outBuffPosn, options);
          b4Posn = 0;
          
#line 572
          if (IOSByteArray_Get(source, i) == EsGobAfirmaCoreMiscBase64_EQUALS_SIGN) {
            break;
          }
        }
      }
    }
    else {
      
#line 580
      @throw new_JavaIoIOException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(
#line 582
      @"Bad Base64 input character decimal %d in array position %d", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(
#line 583
      IOSByteArray_Get(source, i) & (jint) 0xFF), JavaLangInteger_valueOfWithInt_(
#line 584
      i) } count:2 type:NSObject_class_()]));
    }
  }
  
#line 590
  IOSByteArray *out = [IOSByteArray newArrayWithLength:outBuffPosn];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(outBuff, 0, out, 0, outBuffPosn);
  return out;
}


#line 599
IOSByteArray *EsGobAfirmaCoreMiscBase64_decodeWithNSString_(NSString *str) {
  EsGobAfirmaCoreMiscBase64_initialize();
  
#line 600
  return EsGobAfirmaCoreMiscBase64_decodeWithNSString_withBoolean_(str, false);
}


#line 610
IOSByteArray *EsGobAfirmaCoreMiscBase64_decodeWithNSString_withBoolean_(NSString *str, jboolean urlSafe) {
  EsGobAfirmaCoreMiscBase64_initialize();
  
#line 611
  if (str == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Input string was null");
  }
  IOSByteArray *bytes = [str java_getBytesWithCharset:EsGobAfirmaCoreMiscBase64_PREFERRED_ENCODING];
  return EsGobAfirmaCoreMiscBase64_decodeWithByteArray_withInt_withInt_withBoolean_(bytes, 0, ((IOSByteArray *) nil_chk(bytes))->size_, urlSafe);
}


#line 631
jboolean EsGobAfirmaCoreMiscBase64_isBase64WithByteArray_(IOSByteArray *data) {
  EsGobAfirmaCoreMiscBase64_initialize();
  jint count = 0;
  
#line 638
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(data))->size_; i++) {
    jchar b = (jchar) IOSByteArray_Get(data, i);
    if ([((NSString *) nil_chk(EsGobAfirmaCoreMiscBase64_BASE_64_ALPHABET)) java_indexOf:b] == -1) {
      return false;
    }
    
#line 645
    if (b == '=' && i < data->size_ - 2) {
      return false;
    }
    
#line 649
    if (b != 0x000a && b != 0x000d) {
      count++;
    }
  }
  
#line 655
  return JreIntMod(count, 4) == 0;
}


#line 664
jboolean EsGobAfirmaCoreMiscBase64_isBase64WithNSString_(NSString *data) {
  EsGobAfirmaCoreMiscBase64_initialize();
  jint count = 0;
  
#line 671
  for (jint i = 0; i < [((NSString *) nil_chk(data)) java_length]; i++) {
    jchar b = [data charAtWithInt:i];
    if ([((NSString *) nil_chk(EsGobAfirmaCoreMiscBase64_BASE_64_ALPHABET)) java_indexOf:b] == -1) {
      return false;
    }
    
#line 678
    if (b == '=' && i < [data java_length] - 2) {
      return false;
    }
    
#line 682
    if (b != 0x000a && b != 0x000d) {
      count++;
    }
  }
  
#line 688
  return JreIntMod(count, 4) == 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreMiscBase64)
