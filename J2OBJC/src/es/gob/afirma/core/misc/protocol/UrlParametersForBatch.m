//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/protocol/UrlParametersForBatch.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "es/gob/afirma/core/misc/AOUtil.h"
#include "es/gob/afirma/core/misc/protocol/ParameterException.h"
#include "es/gob/afirma/core/misc/protocol/ParameterLocalAccessRequestedException.h"
#include "es/gob/afirma/core/misc/protocol/ProtocolVersion.h"
#include "es/gob/afirma/core/misc/protocol/UrlParameters.h"
#include "es/gob/afirma/core/misc/protocol/UrlParametersForBatch.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/net/URL.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/logging/Logger.h"

#if !__has_feature(objc_arc)
#error "es/gob/afirma/core/misc/protocol/UrlParametersForBatch must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreMiscProtocolUrlParametersForBatch () {
 @public
  NSString *batchPreSignerUrl_;
  NSString *batchPostSignerUrl_;
  /*!
   @brief Indica si la operaci&oacute;n requiere de los servicios de comunicaci&oacute;n.
   */
  jboolean servicesRequired_;
  /*!
   @brief Versi&oacute;n m&iacute;nima del protocolo que define los requisitos
  de esta operaci&oacute;n.
   */
  NSString *minimumProtocolVersion_;
  /*!
   @brief Opci&oacute;n de configuraci&oacute;n que determina si se debe mantener
  el primer certificado seleccionado para todas las operaciones.
   */
  jboolean sticky_;
  /*!
   @brief Opci&oacute;n de configuraci&oacute;n que determina si se debe ignorar
  cualquier certificado prefijado.
   */
  jboolean resetSticky_;
  /*!
   @brief Opci&oacute;n de configuraci&oacute;n que determina si se debe devolver
  el certificado utilizado para firmar o no.
   */
  jboolean certNeeded_;
  /*!
   @brief Indica si la peticion de firma por lotes es con JSON o XML
   */
  jboolean jsonBatch_;
  /*!
   @brief Indica si la peticion de firma por lotes es monof&aacute;sica o trif&aacute;sica
   */
  jboolean localBatchProcess_;
}

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch, batchPreSignerUrl_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch, batchPostSignerUrl_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch, minimumProtocolVersion_, NSString *)

/*!
 @brief Par&aacute;metro de entrada con el identificador de sesi&oacute;n de la operaci&oacute;n.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_get_ID_PARAM(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_ID_PARAM = @"id";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch, ID_PARAM, NSString *)

inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_get_PARAM_BATCH_POSTSIGNER(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_BATCH_POSTSIGNER = @"batchpostsignerurl";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch, PARAM_BATCH_POSTSIGNER, NSString *)

inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_get_PARAM_BATCH_PRESIGNER(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_BATCH_PRESIGNER = @"batchpresignerurl";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch, PARAM_BATCH_PRESIGNER, NSString *)

/*!
 @brief Par&aacute;metro de entrada con la m&iacute;nima versi&oacute;n requerida del aplicativo a usar en la invocaci&oacute;n por protocolo.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_get_PARAM_VER(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_VER = @"ver";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch, PARAM_VER, NSString *)

/*!
 @brief Par&aacute;metro de entrada que nos dice si tenemos que usar una clave prefijada o establecer una nueva.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_get_PARAM_STICKY(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_STICKY = @"sticky";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch, PARAM_STICKY, NSString *)

/*!
 @brief Par&aacute;metro de entrada que nos dice si tenemos que ignorar
  cla <code>PrivateKeyEntry</code> fijada.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_get_RESET_STICKY_PARAM(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_RESET_STICKY_PARAM = @"resetsticky";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch, RESET_STICKY_PARAM, NSString *)

/*!
 @brief Par&aacute;metro de entrada que nos indica que se quiere tambien obtener el certificado utilizado.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_get_PARAM_NEED_CERT(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_NEED_CERT = @"needcert";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch, PARAM_NEED_CERT, NSString *)

/*!
 @brief Par&aacute;metro de entrada que nos indica si es una peticion de tipo JSON.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_get_PARAM_JSON_BATCH(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_JSON_BATCH = @"jsonbatch";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch, PARAM_JSON_BATCH, NSString *)

/*!
 @brief Par&aacute;metro de entrada que nos indica si es una firma por lotes monofasica.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_get_PARAM_LOCAL_BATCH_PROCESS(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_LOCAL_BATCH_PROCESS = @"localBatchProcess";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch, PARAM_LOCAL_BATCH_PROCESS, NSString *)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/protocol/UrlParametersForBatch.java"


#line 22
@implementation EsGobAfirmaCoreMiscProtocolUrlParametersForBatch

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 83
- (instancetype)init {
  EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 94
- (instancetype)initWithBoolean:(jboolean)servicesRequired {
  EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_initWithBoolean_(self, servicesRequired);
  return self;
}


#line 98
- (jboolean)isJsonBatch {
  return self->jsonBatch_;
}

- (void)setJsonBatchWithBoolean:(jboolean)jsonBatch {
  self->jsonBatch_ = jsonBatch;
}

- (jboolean)isLocalBatchProcess {
  return self->localBatchProcess_;
}

- (void)setLocalBatchProcessWithBoolean:(jboolean)localBatchProcess {
  self->localBatchProcess_ = localBatchProcess;
}


#line 116
- (NSString *)getBatchPresignerUrl {
  return self->batchPreSignerUrl_;
}

- (void)setBatchPresignerUrlWithNSString:(NSString *)url {
  self->batchPreSignerUrl_ = url;
}


#line 128
- (void)setStickyWithBoolean:(jboolean)sticky {
  self->sticky_ = sticky;
}


#line 136
- (jboolean)getSticky {
  return self->sticky_;
}


#line 144
- (void)setResetStickyWithBoolean:(jboolean)resetSticky {
  self->resetSticky_ = resetSticky;
}


#line 152
- (jboolean)getResetSticky {
  return self->resetSticky_;
}


#line 160
- (jboolean)isCertNeeded {
  return self->certNeeded_;
}


#line 168
- (void)setCertNeededWithBoolean:(jboolean)certNeeded {
  self->certNeeded_ = certNeeded;
}


#line 174
- (NSString *)getBatchPostSignerUrl {
  return self->batchPostSignerUrl_;
}

- (void)setBatchPostsignerUrlWithNSString:(NSString *)url {
  self->batchPostSignerUrl_ = url;
}

- (void)setBatchParametersWithJavaUtilMap:(id<JavaUtilMap>)params {
  
#line 185
  if ([((id<JavaUtilMap>) nil_chk(params)) containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_ID_PARAM] || [params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_FILE_ID_PARAM]) {
    
#line 187
    NSString *sessionId = [params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_ID_PARAM] ? [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_ID_PARAM] : [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_FILE_ID_PARAM];
    if ([sessionId java_length] > EsGobAfirmaCoreMiscProtocolUrlParameters_MAX_ID_LENGTH) {
      @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(JreStrcat("$I$", @"La longitud del identificador de la operacion es mayor de ", EsGobAfirmaCoreMiscProtocolUrlParameters_MAX_ID_LENGTH, @" caracteres."));
    }
    {
      IOSCharArray *a__ =
#line 193
      [((NSString *) nil_chk([sessionId java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)])) java_toCharArray];
      jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
      jchar const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jchar c = *b__++;
        
#line 194
        if ((c < 'a' || c > 'z') && (c < '0' || c > '9')) {
          @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(@"El identificador de la firma debe ser alfanumerico.");
        }
      }
    }
    [self setSessionIdWithNSString:sessionId];
  }
  
#line 203
  if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_VER]) {
    [self setMinimumProtocolVersionWithNSString:[params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_VER]];
  }
  else {
    [self setMinimumProtocolVersionWithNSString:JavaLangInteger_toStringWithInt_([((EsGobAfirmaCoreMiscProtocolProtocolVersion *) nil_chk(JreLoadEnum(EsGobAfirmaCoreMiscProtocolProtocolVersion, VERSION_0))) getVersion])];
  }
  
#line 212
  if ([self getFileId] != nil) {
    return;
  }
  
#line 217
  if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_LOCAL_BATCH_PROCESS]) {
    [self setLocalBatchProcessWithBoolean:JavaLangBoolean_parseBooleanWithNSString_([params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_LOCAL_BATCH_PROCESS])];
  }
  
#line 221
  if (![self isLocalBatchProcess]) {
    
#line 223
    if (![params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_BATCH_POSTSIGNER]) {
      @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(
#line 225
      @"No se ha recibido la URL del postprocesador de lotes");
    }
    
#line 228
    if (![params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_BATCH_PRESIGNER]) {
      @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(
#line 230
      @"No se ha recibido la URL del preprocesador de lotes");
    }
    
#line 234
    [self setBatchPostsignerUrlWithNSString:
#line 235
    [((JavaNetURL *) nil_chk(EsGobAfirmaCoreMiscProtocolUrlParameters_validateURLWithNSString_(
#line 236
    [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_BATCH_POSTSIGNER]))) description]];
    
#line 240
    [self setBatchPresignerUrlWithNSString:
#line 241
    [((JavaNetURL *) nil_chk(EsGobAfirmaCoreMiscProtocolUrlParameters_validateURLWithNSString_(
#line 242
    [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_BATCH_PRESIGNER]))) description]];
  }
  
#line 248
  if (self->servicesRequired_) {
    if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_STORAGE_SERVLET_PARAM]) {
      
#line 252
      JavaNetURL *storageServletUrl;
      @try {
        storageServletUrl = EsGobAfirmaCoreMiscProtocolUrlParameters_validateURLWithNSString_([params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_STORAGE_SERVLET_PARAM]);
      }
      @catch (EsGobAfirmaCoreMiscProtocolParameterLocalAccessRequestedException *e) {
        @throw new_EsGobAfirmaCoreMiscProtocolParameterLocalAccessRequestedException_initWithNSString_withJavaLangThrowable_(@"La URL del servicio de guardado no puede ser local", e);
      }
      @catch (EsGobAfirmaCoreMiscProtocolParameterException *e) {
        @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error al validar la URL del servicio de guardado: ", e), e);
      }
      [self setStorageServletUrlWithJavaNetURL:storageServletUrl];
    }
    else
#line 265
    if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_ID_PARAM]) {
      @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(@"No se ha recibido la direccion del servlet para el guardado del resultado de la operacion");
    }
  }
  
#line 270
  NSString *props = nil;
  if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_PROPERTIES_PARAM]) {
    props = [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_PROPERTIES_PARAM];
  }
  
#line 275
  if (props != nil && ![props java_isEmpty]) {
    @try {
      [self setExtraParamsWithJavaUtilProperties:EsGobAfirmaCoreMiscAOUtil_base642PropertiesWithNSString_(props)];
    }
    @catch (JavaLangException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(EsGobAfirmaCoreMiscProtocolUrlParameters, LOGGER))) severeWithNSString:JreStrcat("$$$@", @"Las propiedades adicionales indicadas en el parametro '",
#line 281
      EsGobAfirmaCoreMiscProtocolUrlParameters_PROPERTIES_PARAM, @"' no se han podido cargar: ", e)];
      
#line 283
      [self setExtraParamsWithJavaUtilProperties:new_JavaUtilProperties_init()];
    }
  }
  else {
    [self setExtraParamsWithJavaUtilProperties:new_JavaUtilProperties_init()];
  }
  
#line 291
  if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_STICKY]) {
    [self setStickyWithBoolean:JavaLangBoolean_parseBooleanWithNSString_([params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_STICKY])];
  }
  else {
    [self setStickyWithBoolean:false];
  }
  
#line 299
  if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_RESET_STICKY_PARAM]) {
    [self setResetStickyWithBoolean:JavaLangBoolean_parseBooleanWithNSString_([params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_RESET_STICKY_PARAM])];
  }
  else {
    [self setResetStickyWithBoolean:false];
  }
  
#line 307
  if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_NEED_CERT]) {
    [self setCertNeededWithBoolean:JavaLangBoolean_parseBooleanWithNSString_([params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_NEED_CERT])];
  }
  else {
    [self setCertNeededWithBoolean:false];
  }
  
#line 315
  if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_JSON_BATCH]) {
    [self setJsonBatchWithBoolean:JavaLangBoolean_parseBooleanWithNSString_([params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_JSON_BATCH])];
  }
  
#line 319
  [self setDefaultKeyStoreWithNSString:EsGobAfirmaCoreMiscProtocolUrlParameters_getKeyStoreNameWithJavaUtilMap_(params)];
  [self setDefaultKeyStoreLibWithNSString:EsGobAfirmaCoreMiscProtocolUrlParameters_getDefaultKeyStoreLibWithJavaUtilMap_(params)];
}


#line 325
- (NSString *)getMinimumProtocolVersion {
  return self->minimumProtocolVersion_;
}

- (void)setMinimumProtocolVersionWithNSString:(NSString *)minimumProtocolVersion {
  self->minimumProtocolVersion_ = minimumProtocolVersion;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 11, 12, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithBoolean:);
  methods[2].selector = @selector(isJsonBatch);
  methods[3].selector = @selector(setJsonBatchWithBoolean:);
  methods[4].selector = @selector(isLocalBatchProcess);
  methods[5].selector = @selector(setLocalBatchProcessWithBoolean:);
  methods[6].selector = @selector(getBatchPresignerUrl);
  methods[7].selector = @selector(setBatchPresignerUrlWithNSString:);
  methods[8].selector = @selector(setStickyWithBoolean:);
  methods[9].selector = @selector(getSticky);
  methods[10].selector = @selector(setResetStickyWithBoolean:);
  methods[11].selector = @selector(getResetSticky);
  methods[12].selector = @selector(isCertNeeded);
  methods[13].selector = @selector(setCertNeededWithBoolean:);
  methods[14].selector = @selector(getBatchPostSignerUrl);
  methods[15].selector = @selector(setBatchPostsignerUrlWithNSString:);
  methods[16].selector = @selector(setBatchParametersWithJavaUtilMap:);
  methods[17].selector = @selector(getMinimumProtocolVersion);
  methods[18].selector = @selector(setMinimumProtocolVersionWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ID_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "PARAM_BATCH_POSTSIGNER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "PARAM_BATCH_PRESIGNER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "PARAM_VER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "PARAM_STICKY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "RESET_STICKY_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "PARAM_NEED_CERT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "PARAM_JSON_BATCH", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "PARAM_LOCAL_BATCH_PROCESS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "batchPreSignerUrl_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "batchPostSignerUrl_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "servicesRequired_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "minimumProtocolVersion_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sticky_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "resetSticky_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "certNeeded_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "jsonBatch_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "localBatchProcess_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "setJsonBatch", "setLocalBatchProcess", "setBatchPresignerUrl", "LNSString;", "setSticky", "setResetSticky", "setCertNeeded", "setBatchPostsignerUrl", "setBatchParameters", "LJavaUtilMap;", "LEsGobAfirmaCoreMiscProtocolParameterException;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "setMinimumProtocolVersion", &EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_ID_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_BATCH_POSTSIGNER, &EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_BATCH_PRESIGNER, &EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_VER, &EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_STICKY, &EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_RESET_STICKY_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_NEED_CERT, &EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_JSON_BATCH, &EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_PARAM_LOCAL_BATCH_PROCESS };
  static const J2ObjcClassInfo _EsGobAfirmaCoreMiscProtocolUrlParametersForBatch = { "UrlParametersForBatch", "es.gob.afirma.core.misc.protocol", ptrTable, methods, fields, 7, 0x11, 19, 18, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreMiscProtocolUrlParametersForBatch;
}

@end


#line 83
void EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_init(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch *self) {
  EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_initWithBoolean_(self, false);
}


#line 83
EsGobAfirmaCoreMiscProtocolUrlParametersForBatch *new_EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch, init)
}


#line 83
EsGobAfirmaCoreMiscProtocolUrlParametersForBatch *create_EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch, init)
}


#line 94
void EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_initWithBoolean_(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch *self, jboolean servicesRequired) {
  EsGobAfirmaCoreMiscProtocolUrlParameters_init(self);
  self->batchPreSignerUrl_ =
#line 49
  nil;
  self->batchPostSignerUrl_ = nil;
  
#line 95
  self->servicesRequired_ = servicesRequired;
}


#line 94
EsGobAfirmaCoreMiscProtocolUrlParametersForBatch *new_EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_initWithBoolean_(jboolean servicesRequired) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch, initWithBoolean_, servicesRequired)
}


#line 94
EsGobAfirmaCoreMiscProtocolUrlParametersForBatch *create_EsGobAfirmaCoreMiscProtocolUrlParametersForBatch_initWithBoolean_(jboolean servicesRequired) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch, initWithBoolean_, servicesRequired)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreMiscProtocolUrlParametersForBatch)
