//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jce/provider/CertPathValidatorUtilities.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CertPathValidatorUtilities")
#ifdef RESTRICT_CertPathValidatorUtilities
#define INCLUDE_ALL_CertPathValidatorUtilities 0
#else
#define INCLUDE_ALL_CertPathValidatorUtilities 1
#endif
#undef RESTRICT_CertPathValidatorUtilities

#if !defined (OrgSpongycastleJceProviderCertPathValidatorUtilities_) && (INCLUDE_ALL_CertPathValidatorUtilities || defined(INCLUDE_OrgSpongycastleJceProviderCertPathValidatorUtilities))
#define OrgSpongycastleJceProviderCertPathValidatorUtilities_

@class IOSByteArray;
@class IOSObjectArray;
@class JavaSecurityCertCertPath;
@class JavaSecurityCertTrustAnchor;
@class JavaSecurityCertX509CRL;
@class JavaSecurityCertX509CRLSelector;
@class JavaSecurityCertX509Certificate;
@class JavaUtilDate;
@class OrgSpongycastleAsn1ASN1ObjectIdentifier;
@class OrgSpongycastleAsn1ASN1Primitive;
@class OrgSpongycastleAsn1ASN1Sequence;
@class OrgSpongycastleAsn1X509AlgorithmIdentifier;
@class OrgSpongycastleAsn1X509CRLDistPoint;
@class OrgSpongycastleAsn1X509DistributionPoint;
@class OrgSpongycastleJcajcePKIXCertStoreSelector;
@class OrgSpongycastleJcajcePKIXExtendedParameters;
@class OrgSpongycastleJceProviderBCCertStatus;
@class OrgSpongycastleJceProviderPKIXCRLUtil;
@class OrgSpongycastleJceProviderPKIXPolicyNode;
@protocol JavaSecurityCertX509Extension;
@protocol JavaSecurityPublicKey;
@protocol JavaUtilCollection;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSet;
@protocol OrgSpongycastleJcajceUtilJcaJceHelper;

@interface OrgSpongycastleJceProviderCertPathValidatorUtilities : NSObject

#pragma mark Protected

/*!
 @brief Return a Collection of all certificates or attribute certificates found
  in the X509Store's that are matching the certSelect criteriums.
 @param certSelect a <code>Selector</code>  object that will be used to select
                     the certificates
 @param certStores a List containing only <code>Store</code>  objects. These
                     are used to search for certificates.
 @return a Collection of all found <code>X509Certificate</code>
          May be empty but never <code>null</code>.
 */
+ (id<JavaUtilCollection>)findCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector:(OrgSpongycastleJcajcePKIXCertStoreSelector *)certSelect
                                                                        withJavaUtilList:(id<JavaUtilList>)certStores;

/*!
 @brief Search the given Set of TrustAnchor's for one that is the
  issuer of the given X509 certificate.Uses the default provider
  for signature verification.
 @param cert the X509 certificate
 @param trustAnchors a Set of TrustAnchor's
 @return the <code>TrustAnchor</code> object if found or
          <code>null</code> if not.
 @throw AnnotatedExceptionif a TrustAnchor was found but the signature verification
  on the given certificate has thrown an exception.
 */
+ (JavaSecurityCertTrustAnchor *)findTrustAnchorWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                                    withJavaUtilSet:(id<JavaUtilSet>)trustAnchors;

/*!
 @brief Search the given Set of TrustAnchor's for one that is the
  issuer of the given X509 certificate.Uses the specified
  provider for signature verification, or the default provider
  if null.
 @param cert the X509 certificate
 @param trustAnchors a Set of TrustAnchor's
 @param sigProvider the provider to use for signature verification
 @return the <code>TrustAnchor</code> object if found or
          <code>null</code> if not.
 @throw AnnotatedExceptionif a TrustAnchor was found but the signature verification
  on the given certificate has thrown an exception.
 */
+ (JavaSecurityCertTrustAnchor *)findTrustAnchorWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                                    withJavaUtilSet:(id<JavaUtilSet>)trustAnchors
                                                                       withNSString:(NSString *)sigProvider;

+ (OrgSpongycastleAsn1X509AlgorithmIdentifier *)getAlgorithmIdentifierWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key;

+ (void)getCertStatusWithJavaUtilDate:(JavaUtilDate *)validDate
          withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                               withId:(id)cert
withOrgSpongycastleJceProviderBCCertStatus:(OrgSpongycastleJceProviderBCCertStatus *)certStatus;

/*!
 @brief Fetches complete CRLs according to RFC 3280.
 @param dp The distribution point for which the complete CRL
 @param cert The  <code> X509Certificate </code>  for                     which the CRL should be searched.
 @param currentDate The date for which the delta CRLs must be valid.
 @param paramsPKIX The extended PKIX parameters.
 @return A <code>Set</code> of <code>X509CRL</code>s with complete
          CRLs.
 @throw AnnotatedExceptionif an exception occurs while picking the CRLs
  or no CRLs are found.
 */
+ (id<JavaUtilSet>)getCompleteCRLsWithOrgSpongycastleAsn1X509DistributionPoint:(OrgSpongycastleAsn1X509DistributionPoint *)dp
                                                                        withId:(id)cert
                                                              withJavaUtilDate:(JavaUtilDate *)currentDate
                               withOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX;

/*!
 @brief Add the CRL issuers from the cRLIssuer field of the distribution point or
  from the certificate if not given to the issuer criterion of the 
 <code>selector</code>.
 <p>
  The <code>issuerPrincipals</code> are a collection with a single 
 <code>X500Name</code> for <code>X509Certificate</code>s.
  </p>
 @param dp The distribution point.
 @param issuerPrincipals The issuers of the certificate or attribute                          certificate which contains the distribution point.
 @param selector The CRL selector.
 @throw AnnotatedExceptionif an exception occurs while processing.
 @throw ClassCastExceptionif <code>issuerPrincipals</code> does not
  contain only <code>X500Name</code>s.
 */
+ (void)getCRLIssuersFromDistributionPointWithOrgSpongycastleAsn1X509DistributionPoint:(OrgSpongycastleAsn1X509DistributionPoint *)dp
                                                                withJavaUtilCollection:(id<JavaUtilCollection>)issuerPrincipals
                                                   withJavaSecurityCertX509CRLSelector:(JavaSecurityCertX509CRLSelector *)selector;

/*!
 @brief Fetches delta CRLs according to RFC 3280 section 5.2.4.
 @param validityDate The date for which the delta CRLs must be valid.
 @param completeCRL The complete CRL the delta CRL is for.
 @return A <code>Set</code> of <code>X509CRL</code>s with delta CRLs.
 @throw AnnotatedExceptionif an exception occurs while picking the delta
  CRLs.
 */
+ (id<JavaUtilSet>)getDeltaCRLsWithJavaUtilDate:(JavaUtilDate *)validityDate
                    withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)completeCRL
                               withJavaUtilList:(id<JavaUtilList>)certStores
                               withJavaUtilList:(id<JavaUtilList>)pkixCrlStores;

/*!
 @brief Extract the value of the given extension, if it exists.
 @param ext The extension object.
 @param oid The object identifier to obtain.
 @throw AnnotatedExceptionif the extension cannot be read.
 */
+ (OrgSpongycastleAsn1ASN1Primitive *)getExtensionValueWithJavaSecurityCertX509Extension:(id<JavaSecurityCertX509Extension>)ext
                                                                            withNSString:(NSString *)oid;

/*!
 @brief Return the next working key inheriting DSA parameters if necessary.
 <p>
  This methods inherits DSA parameters from the indexed certificate or
  previous certificates in the certificate chain to the returned 
 <code>PublicKey</code>. The list is searched upwards, meaning the end
  certificate is at position 0 and previous certificates are following. 
 </p>
  <p>
  If the indexed certificate does not contain a DSA key this method simply
  returns the public key. If the DSA key already contains DSA parameters
  the key is also only returned. 
 </p>
 @param certs The certification path.
 @param index The index of the certificate which contains the public key               which should be extended with DSA parameters.
 @return The public key of the certificate in list position
          <code>index</code> extended with DSA parameters if applicable.
 @throw AnnotatedExceptionif DSA parameters cannot be inherited.
 */
+ (id<JavaSecurityPublicKey>)getNextWorkingKeyWithJavaUtilList:(id<JavaUtilList>)certs
                                                       withInt:(jint)index
                     withOrgSpongycastleJcajceUtilJcaJceHelper:(id<OrgSpongycastleJcajceUtilJcaJceHelper>)helper;

+ (id<JavaUtilSet>)getQualifierSetWithOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)qualifiers;

+ (JavaUtilDate *)getValidCertDateFromValidityModelWithOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                                                      withJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                                                           withInt:(jint)index;

+ (JavaUtilDate *)getValidDateWithOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX;

+ (jboolean)isAnyPolicyWithJavaUtilSet:(id<JavaUtilSet>)policySet;

+ (jboolean)isSelfIssuedWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

+ (void)prepareNextCertB1WithInt:(jint)i
           withJavaUtilListArray:(IOSObjectArray *)policyNodes
                    withNSString:(NSString *)id_p
                 withJavaUtilMap:(id<JavaUtilMap>)m_idp
withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

+ (OrgSpongycastleJceProviderPKIXPolicyNode *)prepareNextCertB2WithInt:(jint)i
                                                 withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                                          withNSString:(NSString *)id_p
                          withOrgSpongycastleJceProviderPKIXPolicyNode:(OrgSpongycastleJceProviderPKIXPolicyNode *)validPolicyTree;

+ (jboolean)processCertD1iWithInt:(jint)index
            withJavaUtilListArray:(IOSObjectArray *)policyNodes
withOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)pOid
                  withJavaUtilSet:(id<JavaUtilSet>)pq;

+ (void)processCertD1iiWithInt:(jint)index
         withJavaUtilListArray:(IOSObjectArray *)policyNodes
withOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)_poid
               withJavaUtilSet:(id<JavaUtilSet>)_pq;

+ (OrgSpongycastleJceProviderPKIXPolicyNode *)removePolicyNodeWithOrgSpongycastleJceProviderPKIXPolicyNode:(OrgSpongycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                                                                     withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                                              withOrgSpongycastleJceProviderPKIXPolicyNode:(OrgSpongycastleJceProviderPKIXPolicyNode *)_node;

+ (void)verifyX509CertificateWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                       withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)publicKey
                                                    withNSString:(NSString *)sigProvider;

#pragma mark Package-Private

- (instancetype)initPackagePrivate;

+ (void)checkCRLsNotEmptyWithJavaUtilSet:(id<JavaUtilSet>)crls
                                  withId:(id)cert;

/*!
 @brief Find the issuer certificates of a given certificate.
 @param cert The certificate for which an issuer should be found.
 @return A <code>Collection</code> object containing the issuer
          <code>X509Certificate</code>s. Never <code>null</code>.
 @throw AnnotatedExceptionif an error occurs.
 */
+ (id<JavaUtilCollection>)findIssuerCertsWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                            withJavaUtilList:(id<JavaUtilList>)certStores
                                                            withJavaUtilList:(id<JavaUtilList>)pkixCertStores;

+ (id<JavaUtilList>)getAdditionalStoresFromAltNamesWithByteArray:(IOSByteArray *)issuerAlternativeName
                                                 withJavaUtilMap:(id<JavaUtilMap>)altNameCertStoreMap;

+ (id<JavaUtilList>)getAdditionalStoresFromCRLDistributionPointWithOrgSpongycastleAsn1X509CRLDistPoint:(OrgSpongycastleAsn1X509CRLDistPoint *)crldp
                                                                                       withJavaUtilMap:(id<JavaUtilMap>)namedCRLStoreMap;

+ (jboolean)isIssuerTrustAnchorWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                   withJavaUtilSet:(id<JavaUtilSet>)trustAnchors
                                                      withNSString:(NSString *)sigProvider;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleJceProviderCertPathValidatorUtilities)

inline OrgSpongycastleJceProviderPKIXCRLUtil *OrgSpongycastleJceProviderCertPathValidatorUtilities_get_CRL_UTIL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgSpongycastleJceProviderPKIXCRLUtil *OrgSpongycastleJceProviderCertPathValidatorUtilities_CRL_UTIL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderCertPathValidatorUtilities, CRL_UTIL, OrgSpongycastleJceProviderPKIXCRLUtil *)

inline NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_get_CERTIFICATE_POLICIES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_CERTIFICATE_POLICIES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderCertPathValidatorUtilities, CERTIFICATE_POLICIES, NSString *)

inline NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_get_BASIC_CONSTRAINTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_BASIC_CONSTRAINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderCertPathValidatorUtilities, BASIC_CONSTRAINTS, NSString *)

inline NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_get_POLICY_MAPPINGS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_POLICY_MAPPINGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderCertPathValidatorUtilities, POLICY_MAPPINGS, NSString *)

inline NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_get_SUBJECT_ALTERNATIVE_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_SUBJECT_ALTERNATIVE_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderCertPathValidatorUtilities, SUBJECT_ALTERNATIVE_NAME, NSString *)

inline NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_get_NAME_CONSTRAINTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_NAME_CONSTRAINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderCertPathValidatorUtilities, NAME_CONSTRAINTS, NSString *)

inline NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_get_KEY_USAGE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_KEY_USAGE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderCertPathValidatorUtilities, KEY_USAGE, NSString *)

inline NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_get_INHIBIT_ANY_POLICY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_INHIBIT_ANY_POLICY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderCertPathValidatorUtilities, INHIBIT_ANY_POLICY, NSString *)

inline NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_get_ISSUING_DISTRIBUTION_POINT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_ISSUING_DISTRIBUTION_POINT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderCertPathValidatorUtilities, ISSUING_DISTRIBUTION_POINT, NSString *)

inline NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_get_DELTA_CRL_INDICATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_DELTA_CRL_INDICATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderCertPathValidatorUtilities, DELTA_CRL_INDICATOR, NSString *)

inline NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_get_POLICY_CONSTRAINTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_POLICY_CONSTRAINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderCertPathValidatorUtilities, POLICY_CONSTRAINTS, NSString *)

inline NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_get_FRESHEST_CRL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_FRESHEST_CRL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderCertPathValidatorUtilities, FRESHEST_CRL, NSString *)

inline NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_get_CRL_DISTRIBUTION_POINTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_CRL_DISTRIBUTION_POINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderCertPathValidatorUtilities, CRL_DISTRIBUTION_POINTS, NSString *)

inline NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_get_AUTHORITY_KEY_IDENTIFIER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_AUTHORITY_KEY_IDENTIFIER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderCertPathValidatorUtilities, AUTHORITY_KEY_IDENTIFIER, NSString *)

inline NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_get_ANY_POLICY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_ANY_POLICY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderCertPathValidatorUtilities, ANY_POLICY, NSString *)

inline NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_get_CRL_NUMBER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_CRL_NUMBER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderCertPathValidatorUtilities, CRL_NUMBER, NSString *)

inline jint OrgSpongycastleJceProviderCertPathValidatorUtilities_get_KEY_CERT_SIGN(void);
#define OrgSpongycastleJceProviderCertPathValidatorUtilities_KEY_CERT_SIGN 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleJceProviderCertPathValidatorUtilities, KEY_CERT_SIGN, jint)

inline jint OrgSpongycastleJceProviderCertPathValidatorUtilities_get_CRL_SIGN(void);
#define OrgSpongycastleJceProviderCertPathValidatorUtilities_CRL_SIGN 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleJceProviderCertPathValidatorUtilities, CRL_SIGN, jint)

inline IOSObjectArray *OrgSpongycastleJceProviderCertPathValidatorUtilities_get_crlReasons(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *OrgSpongycastleJceProviderCertPathValidatorUtilities_crlReasons;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderCertPathValidatorUtilities, crlReasons, IOSObjectArray *)

FOUNDATION_EXPORT void OrgSpongycastleJceProviderCertPathValidatorUtilities_initPackagePrivate(OrgSpongycastleJceProviderCertPathValidatorUtilities *self);

FOUNDATION_EXPORT OrgSpongycastleJceProviderCertPathValidatorUtilities *new_OrgSpongycastleJceProviderCertPathValidatorUtilities_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleJceProviderCertPathValidatorUtilities *create_OrgSpongycastleJceProviderCertPathValidatorUtilities_initPackagePrivate(void);

FOUNDATION_EXPORT JavaSecurityCertTrustAnchor *OrgSpongycastleJceProviderCertPathValidatorUtilities_findTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_(JavaSecurityCertX509Certificate *cert, id<JavaUtilSet> trustAnchors);

FOUNDATION_EXPORT JavaSecurityCertTrustAnchor *OrgSpongycastleJceProviderCertPathValidatorUtilities_findTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(JavaSecurityCertX509Certificate *cert, id<JavaUtilSet> trustAnchors, NSString *sigProvider);

FOUNDATION_EXPORT jboolean OrgSpongycastleJceProviderCertPathValidatorUtilities_isIssuerTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(JavaSecurityCertX509Certificate *cert, id<JavaUtilSet> trustAnchors, NSString *sigProvider);

FOUNDATION_EXPORT id<JavaUtilList> OrgSpongycastleJceProviderCertPathValidatorUtilities_getAdditionalStoresFromAltNamesWithByteArray_withJavaUtilMap_(IOSByteArray *issuerAlternativeName, id<JavaUtilMap> altNameCertStoreMap);

FOUNDATION_EXPORT JavaUtilDate *OrgSpongycastleJceProviderCertPathValidatorUtilities_getValidDateWithOrgSpongycastleJcajcePKIXExtendedParameters_(OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX);

FOUNDATION_EXPORT jboolean OrgSpongycastleJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *cert);

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1Primitive *OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(id<JavaSecurityCertX509Extension> ext, NSString *oid);

FOUNDATION_EXPORT OrgSpongycastleAsn1X509AlgorithmIdentifier *OrgSpongycastleJceProviderCertPathValidatorUtilities_getAlgorithmIdentifierWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> key);

FOUNDATION_EXPORT id<JavaUtilSet> OrgSpongycastleJceProviderCertPathValidatorUtilities_getQualifierSetWithOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1ASN1Sequence *qualifiers);

FOUNDATION_EXPORT OrgSpongycastleJceProviderPKIXPolicyNode *OrgSpongycastleJceProviderCertPathValidatorUtilities_removePolicyNodeWithOrgSpongycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_(OrgSpongycastleJceProviderPKIXPolicyNode *validPolicyTree, IOSObjectArray *policyNodes, OrgSpongycastleJceProviderPKIXPolicyNode *_node);

FOUNDATION_EXPORT jboolean OrgSpongycastleJceProviderCertPathValidatorUtilities_processCertD1iWithInt_withJavaUtilListArray_withOrgSpongycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(jint index, IOSObjectArray *policyNodes, OrgSpongycastleAsn1ASN1ObjectIdentifier *pOid, id<JavaUtilSet> pq);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderCertPathValidatorUtilities_processCertD1iiWithInt_withJavaUtilListArray_withOrgSpongycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(jint index, IOSObjectArray *policyNodes, OrgSpongycastleAsn1ASN1ObjectIdentifier *_poid, id<JavaUtilSet> _pq);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderCertPathValidatorUtilities_prepareNextCertB1WithInt_withJavaUtilListArray_withNSString_withJavaUtilMap_withJavaSecurityCertX509Certificate_(jint i, IOSObjectArray *policyNodes, NSString *id_p, id<JavaUtilMap> m_idp, JavaSecurityCertX509Certificate *cert);

FOUNDATION_EXPORT OrgSpongycastleJceProviderPKIXPolicyNode *OrgSpongycastleJceProviderCertPathValidatorUtilities_prepareNextCertB2WithInt_withJavaUtilListArray_withNSString_withOrgSpongycastleJceProviderPKIXPolicyNode_(jint i, IOSObjectArray *policyNodes, NSString *id_p, OrgSpongycastleJceProviderPKIXPolicyNode *validPolicyTree);

FOUNDATION_EXPORT jboolean OrgSpongycastleJceProviderCertPathValidatorUtilities_isAnyPolicyWithJavaUtilSet_(id<JavaUtilSet> policySet);

FOUNDATION_EXPORT id<JavaUtilCollection> OrgSpongycastleJceProviderCertPathValidatorUtilities_findCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(OrgSpongycastleJcajcePKIXCertStoreSelector *certSelect, id<JavaUtilList> certStores);

FOUNDATION_EXPORT id<JavaUtilList> OrgSpongycastleJceProviderCertPathValidatorUtilities_getAdditionalStoresFromCRLDistributionPointWithOrgSpongycastleAsn1X509CRLDistPoint_withJavaUtilMap_(OrgSpongycastleAsn1X509CRLDistPoint *crldp, id<JavaUtilMap> namedCRLStoreMap);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderCertPathValidatorUtilities_getCRLIssuersFromDistributionPointWithOrgSpongycastleAsn1X509DistributionPoint_withJavaUtilCollection_withJavaSecurityCertX509CRLSelector_(OrgSpongycastleAsn1X509DistributionPoint *dp, id<JavaUtilCollection> issuerPrincipals, JavaSecurityCertX509CRLSelector *selector);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderCertPathValidatorUtilities_getCertStatusWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withOrgSpongycastleJceProviderBCCertStatus_(JavaUtilDate *validDate, JavaSecurityCertX509CRL *crl, id cert, OrgSpongycastleJceProviderBCCertStatus *certStatus);

FOUNDATION_EXPORT id<JavaUtilSet> OrgSpongycastleJceProviderCertPathValidatorUtilities_getDeltaCRLsWithJavaUtilDate_withJavaSecurityCertX509CRL_withJavaUtilList_withJavaUtilList_(JavaUtilDate *validityDate, JavaSecurityCertX509CRL *completeCRL, id<JavaUtilList> certStores, id<JavaUtilList> pkixCrlStores);

FOUNDATION_EXPORT id<JavaUtilSet> OrgSpongycastleJceProviderCertPathValidatorUtilities_getCompleteCRLsWithOrgSpongycastleAsn1X509DistributionPoint_withId_withJavaUtilDate_withOrgSpongycastleJcajcePKIXExtendedParameters_(OrgSpongycastleAsn1X509DistributionPoint *dp, id cert, JavaUtilDate *currentDate, OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX);

FOUNDATION_EXPORT JavaUtilDate *OrgSpongycastleJceProviderCertPathValidatorUtilities_getValidCertDateFromValidityModelWithOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertCertPath_withInt_(OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertCertPath *certPath, jint index);

FOUNDATION_EXPORT id<JavaSecurityPublicKey> OrgSpongycastleJceProviderCertPathValidatorUtilities_getNextWorkingKeyWithJavaUtilList_withInt_withOrgSpongycastleJcajceUtilJcaJceHelper_(id<JavaUtilList> certs, jint index, id<OrgSpongycastleJcajceUtilJcaJceHelper> helper);

FOUNDATION_EXPORT id<JavaUtilCollection> OrgSpongycastleJceProviderCertPathValidatorUtilities_findIssuerCertsWithJavaSecurityCertX509Certificate_withJavaUtilList_withJavaUtilList_(JavaSecurityCertX509Certificate *cert, id<JavaUtilList> certStores, id<JavaUtilList> pkixCertStores);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderCertPathValidatorUtilities_verifyX509CertificateWithJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withNSString_(JavaSecurityCertX509Certificate *cert, id<JavaSecurityPublicKey> publicKey, NSString *sigProvider);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderCertPathValidatorUtilities_checkCRLsNotEmptyWithJavaUtilSet_withId_(id<JavaUtilSet> crls, id cert);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleJceProviderCertPathValidatorUtilities)

#endif

#pragma pop_macro("INCLUDE_ALL_CertPathValidatorUtilities")
