//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PdfSignatureAppearance.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_PdfSignatureAppearance")
#ifdef RESTRICT_PdfSignatureAppearance
#define INCLUDE_ALL_PdfSignatureAppearance 0
#else
#define INCLUDE_ALL_PdfSignatureAppearance 1
#endif
#undef RESTRICT_PdfSignatureAppearance

#if !defined (ComAowagieTextPdfPdfSignatureAppearance_) && (INCLUDE_ALL_PdfSignatureAppearance || defined(INCLUDE_ComAowagieTextPdfPdfSignatureAppearance))
#define ComAowagieTextPdfPdfSignatureAppearance_

@class ComAowagieTextFont;
@class ComAowagieTextImage;
@class ComAowagieTextPdfByteBuffer;
@class ComAowagieTextPdfPdfDictionary;
@class ComAowagieTextPdfPdfName;
@class ComAowagieTextPdfPdfSigGenericPKCS;
@class ComAowagieTextPdfPdfStamper;
@class ComAowagieTextPdfPdfStamperImp;
@class ComAowagieTextPdfPdfTemplate;
@class ComAowagieTextRectangle;
@class IOSByteArray;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaUtilCalendar;
@class JavaUtilHashMap;
@protocol ComAowagieTextPdfPdfSignatureAppearance_SignatureEvent;
@protocol JavaSecurityPrivateKey;
@protocol JavaUtilList;

/*!
 @brief This class takes care of the cryptographic options and appearances that form a signature.
 */
@interface ComAowagieTextPdfPdfSignatureAppearance : NSObject

#pragma mark Public

/*!
 @brief This is the last method to be called when using external signatures.The general sequence is:
  preClose(), getDocumentBytes() and close().
 <p>
  <CODE>update</CODE> is a <CODE>PdfDictionary</CODE> that must have exactly the
  same keys as the ones provided in <code>preClose(HashMap)</code>.
 @param update a  <CODE> PdfDictionary </CODE>  with the key/value that will fill the holes defined
   in <code>preClose(HashMap)</code>
 @throw DocumentExceptionon error
 @throw IOExceptionon error
 */
- (void)closeWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)update;

/*!
 @brief Gets the main appearance layer.
 <p>
  Consult <A HREF="http://partners.adobe.com/asn/developer/pdfs/tn/PPKAppearances.pdf">PPKAppearances.pdf</A>
  for further details.
 @return the main appearance layer
 @throw DocumentExceptionon error
 */
- (ComAowagieTextPdfPdfTemplate *)getAppearance;

/*!
 @brief Gets the certificate chain.
 @return the certificate chain
 */
- (IOSObjectArray *)getCertChain;

/*!
 @brief Gets the certified status of this document.
 @return the certified status
 */
- (jint)getCertificationLevel;

/*!
 @brief Gets the signing contact.
 @return the signing contact
 */
- (NSString *)getContact;

/*!
 @brief Gets the certificate revocation list.
 @return the certificate revocation list
 */
- (IOSObjectArray *)getCrlList;

/*!
 @brief Gets the user made signature dictionary.This is the dictionary at the /V key.
 @return the user made signature dictionary
 */
- (ComAowagieTextPdfPdfDictionary *)getCryptoDictionary;

/*!
 @brief Gets the field name.
 @return the field name
 */
- (NSString *)getFieldName;

/*!
 @brief Gets the filter used to sign the document.
 @return the filter used to sign the document
 */
- (ComAowagieTextPdfPdfName *)getFilter;

/*!
 @brief Gets the background image for the layer 2.
 @return the background image for the layer 2
 */
- (ComAowagieTextImage *)getImage;

/*!
 @brief Gets the scaling to be applied to the background image.
 @return the scaling to be applied to the background image
 */
- (jfloat)getImageScale;

/*!
 @brief Gets a template layer to create a signature appearance.The layers can go from 0 to 4.
 <p>
  Consult <A HREF="http://partners.adobe.com/asn/developer/pdfs/tn/PPKAppearances.pdf">PPKAppearances.pdf</A>
  for further details.
 @param layer the layer
 @return a template
 */
- (ComAowagieTextPdfPdfTemplate *)getLayerWithInt:(jint)layer;

/*!
 @brief Gets the n2 and n4 layer font.
 @return the n2 and n4 layer font
 */
- (ComAowagieTextFont *)getLayer2Font;

/*!
 @brief Gets the signature text identifying the signer if set by setLayer2Text().
 @return the signature text identifying the signer
 */
- (NSString *)getLayer2Text;

/*!
 @brief Gets the text identifying the signature status if set by setLayer4Text().
 @return the text identifying the signature status
 */
- (NSString *)getLayer4Text;

/*!
 @brief Gets the signing location.
 @return the signing location
 */
- (NSString *)getLocation;

/*!
 @brief Gets a new signature fied name that doesn't clash with any existing name.
 @return a new signature fied name
 */
- (NSString *)getNewSigName;

/*!
 @brief Gets a new signature fied name that doesn't clash with any existing name.
 @param signatureFieldNames Field names to avoid
 @return a new signature fied name
 */
- (NSString *)getNewSigNameWithJavaUtilList:(id<JavaUtilList>)signatureFieldNames;

/*!
 @brief Gets the page number of the field.
 @return the page number of the field
 */
- (jint)getPage;

/*!
 @brief Gets the rectangle that represent the position and dimension of the signature in the page.
 @return the rectangle that represent the position and dimension of the signature in the page
 */
- (ComAowagieTextRectangle *)getPageRect;

/*!
 @brief Gets the private key.
 @return the private key
 */
- (id<JavaSecurityPrivateKey>)getPrivKey;

/*!
 @brief Returns the Cryptographic Service Provider that will sign the document.
 @return provider the name of the provider, for example "SUN",
  or <code>null</code> to use the default provider.
 */
- (NSString *)getProvider;

/*!
 @brief Gets the document bytes that are hashable when using external signatures.The general sequence is:
  preClose(), getRangeStream() and close().
 <p>
 @return the document bytes that are hashable
 */
- (JavaIoInputStream *)getRangeStream;

/*!
 @brief Gets the signing reason.
 @return the signing reason
 */
- (NSString *)getReason;

/*!
 @brief Gets the rectangle representing the signature dimensions.
 @return the rectangle representing the signature dimensions. It may be <CODE>null</CODE>
  or have zero width or height for invisible signatures
 */
- (ComAowagieTextRectangle *)getRect;

/*!
 @brief Gets the rendering mode for this signature.
 @return the rendering mode for this signature
 */
- (jint)getRender;

/*!
 @brief Gets the run direction.
 @return the run direction
 */
- (jint)getRunDirection;

/*!
 @brief Getter for property signatureEvent.
 @return Value of property signatureEvent.
 */
- (id<ComAowagieTextPdfPdfSignatureAppearance_SignatureEvent>)getSignatureEvent;

/*!
 @brief Gets the Image object to render.
 @return the image
 */
- (ComAowagieTextImage *)getSignatureGraphic;

/*!
 @brief Gets the signature date.
 @return the signature date
 */
- (JavaUtilCalendar *)getSignDate;

/*!
 @brief Gets the instance of the standard signature dictionary.This instance
  is only available after pre close.
 <p>
  The main use is to insert external signatures.
 @return the instance of the standard signature dictionary
 */
- (ComAowagieTextPdfPdfSigGenericPKCS *)getSigStandard;

/*!
 @brief Gets the <CODE>PdfStamper</CODE> associated with this instance.
 @return the <CODE>PdfStamper</CODE> associated with this instance
 */
- (ComAowagieTextPdfPdfStamper *)getStamper;

/*!
 @brief Gets the temporary file.
 @return the temporary file or <CODE>null</CODE> is the document is created in memory
 */
- (JavaIoFile *)getTempFile;

/*!
 @brief Gets the template that aggregates all appearance layers.This corresponds to the /FRM resource.
 <p>
  Consult <A HREF="http://partners.adobe.com/asn/developer/pdfs/tn/PPKAppearances.pdf">PPKAppearances.pdf</A>
  for further details.
 @return the template that aggregates all appearance layers
 */
- (ComAowagieTextPdfPdfTemplate *)getTopLayer;

/*!
 @brief Gets the Acrobat 6.0 layer mode.
 @return the Acrobat 6.0 layer mode
 */
- (jboolean)isAcro6Layers;

/*!
 @brief Gets the visibility status of the signature.
 @return the visibility status of the signature
 */
- (jboolean)isInvisible;

/*!
 @brief Checks if a new field was created.
 @return <CODE>true</CODE> if a new field was created, <CODE>false</CODE> if signing
  an existing field or if the signature is invisible
 */
- (jboolean)isNewField;

/*!
 @brief Checks if the document is in the process of closing.
 @return <CODE>true</CODE> if the document is in the process of closing, 
 <CODE>false</CODE> otherwise
 */
- (jboolean)isPreClosed;

- (void)preClose;

/*!
 @brief This is the first method to be called when using external signatures.The general sequence is:
  preClose(), getDocumentBytes() and close().
 <p>
  If calling preClose() <B>dont't</B> call PdfStamper.close(). 
 <p>
  If using an external signature <CODE>exclusionSizes</CODE> must contain at least
  the <CODE>PdfName.CONTENTS</CODE> key with the size that it will take in the
  document. Note that due to the hex string coding this size should be
  byte_size*2+2.
 @param exclusionSizes a  <CODE> HashMap </CODE>  with names and sizes to be excluded in the signature
   calculation. The key is a  <CODE> PdfName </CODE>  and the value an  
  <CODE> Integer </CODE> . At least the  <CODE> PdfName.CONTENTS </CODE>  must be present
 @throw IOExceptionon error
 @throw DocumentExceptionon error
 */
- (void)preCloseWithJavaUtilHashMap:(JavaUtilHashMap *)exclusionSizes;

/*!
 @brief This is the first method to be called when using external signatures.The general sequence is:
  preClose(), getDocumentBytes() and close().
 <p>
  If calling preClose() <B>dont't</B> call PdfStamper.close(). 
 <p>
  If using an external signature <CODE>exclusionSizes</CODE> must contain at least
  the <CODE>PdfName.CONTENTS</CODE> key with the size that it will take in the
  document. Note that due to the hex string coding this size should be
  byte_size*2+2.
 @param exclusionSizes a  <CODE> HashMap </CODE>  with names and sizes to be excluded in the signature
   calculation. The key is a  <CODE> PdfName </CODE>  and the value an  
  <CODE> Integer </CODE> . At least the  <CODE> PdfName.CONTENTS </CODE>  must be present
 @param globalDate Date
 @throw IOExceptionon error
 @throw DocumentExceptionon error
 */
- (void)preCloseWithJavaUtilHashMap:(JavaUtilHashMap *)exclusionSizes
               withJavaUtilCalendar:(JavaUtilCalendar *)globalDate;

/*!
 @brief This is the first method to be called when using external signatures.The general sequence is:
  preClose(), getDocumentBytes() and close().
 This is a new version of the method
  preClose(final HashMap exclusionSizes, final Calendar globalDate) 
 <p>
  If calling preClose() <B>dont't</B> call PdfStamper.close(). 
 <p>
  If using an external signature <CODE>exclusionSizes</CODE> must contain at least
  the <CODE>PdfName.CONTENTS</CODE> key with the size that it will take in the
  document. Note that due to the hex string coding this size should be
  byte_size*2+2.
 @param exclusionSizes a  <CODE> HashMap </CODE>  with names and sizes to be excluded in the signature
   calculation. The key is a  <CODE> PdfName </CODE>  and the value an  
  <CODE> Integer </CODE> . At least the  <CODE> PdfName.CONTENTS </CODE>  must be present
 @param globalDate global date
 @param pages pages to stamp
 @throw IOExceptionon error
 @throw DocumentExceptionon error
 */
- (void)preCloseWithJavaUtilHashMap:(JavaUtilHashMap *)exclusionSizes
               withJavaUtilCalendar:(JavaUtilCalendar *)globalDate
                   withJavaUtilList:(id<JavaUtilList>)pages;

/*!
 @brief Acrobat 6.0 and higher recommends that only layer n2 and n4 be present.This method sets that mode.
 @param acro6Layers if  <code> true </code>  only the layers n2 and n4 will be present
 */
- (void)setAcro6LayersWithBoolean:(jboolean)acro6Layers;

/*!
 @brief Sets the document type to certified instead of simply signed.
 @param certificationLevel the values can be:  <code> NOT_CERTIFIED </code> ,  <code> CERTIFIED_NO_CHANGES_ALLOWED </code>
  ,   <code> CERTIFIED_FORM_FILLING </code>  and  <code> CERTIFIED_FORM_FILLING_AND_ANNOTATIONS </code>
 */
- (void)setCertificationLevelWithInt:(jint)certificationLevel;

/*!
 @brief Sets the signing contact.
 @param contact the signing contact
 */
- (void)setContactWithNSString:(NSString *)contact;

/*!
 @brief Sets the cryptographic parameters.
 @param privKey the private key
 @param certChain the certificate chain
 @param crlList the certificate revocation list. It may be  <CODE> null </CODE>
 @param filter the crytographic filter type. It can be SELF_SIGNED, VERISIGN_SIGNED or WINCER_SIGNED
 */
- (void)setCryptoWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privKey
       withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
               withJavaSecurityCertCRLArray:(IOSObjectArray *)crlList
               withComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)filter;

/*!
 @brief Sets a user made signature dictionary.This is the dictionary at the /V key.
 @param cryptoDictionary a user made signature dictionary
 */
- (void)setCryptoDictionaryWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)cryptoDictionary;

/*!
 @brief Sets the digest/signature to an external calculated value.
 @param digest the digest. This is the actual signature
 @param RSAdata the extra data that goes into the data tag in PKCS#7
 @param digestEncryptionAlgorithm the encryption algorithm. It may must be  <CODE> null </CODE>  if the  <CODE> digest </CODE>
   is also  <CODE> null </CODE> . If the  <CODE> digest </CODE>  is not  <CODE> null
  </CODE>  then it may be "RSA" or "DSA"
 */
- (void)setExternalDigestWithByteArray:(IOSByteArray *)digest
                         withByteArray:(IOSByteArray *)RSAdata
                          withNSString:(NSString *)digestEncryptionAlgorithm;

/*!
 @brief Sets the background image for the layer 2.
 @param image the background image for the layer 2
 */
- (void)setImageWithComAowagieTextImage:(ComAowagieTextImage *)image;

/*!
 @brief Sets the scaling to be applied to the background image.If it's zero the image
  will fully fill the rectangle.
 If it's less than zero the image will fill the rectangle but
  will keep the proportions. If it's greater than zero that scaling will be applied.
  In any of the cases the image will always be centered. It's zero by default.
 @param imageScale the scaling to be applied to the background image
 */
- (void)setImageScaleWithFloat:(jfloat)imageScale;

/*!
 @brief Sets the n2 and n4 layer font.If the font size is zero, auto-fit will be used.
 @param layer2Font the n2 and n4 font
 */
- (void)setLayer2FontWithComAowagieTextFont:(ComAowagieTextFont *)layer2Font;

/*!
 @brief Sets the signature text identifying the signer.
 @param text the signature text identifying the signer. If  <CODE> null </CODE>  or not set
   a standard description will be used
 */
- (void)setLayer2TextWithNSString:(NSString *)text;

/*!
 @brief Sets the text identifying the signature status.
 @param text the text identifying the signature status. If  <CODE> null </CODE>  or not set
   the description "Signature Not Verified" will be used
 */
- (void)setLayer4TextWithNSString:(NSString *)text;

/*!
 @brief Sets the signing location.
 @param location the signing location
 */
- (void)setLocationWithNSString:(NSString *)location;

/*!
 @brief Sets the Cryptographic Service Provider that will sign the document.
 @param provider the name of the provider, for example "SUN", or  
  <code> null </code>  to use the default provider.
 */
- (void)setProviderWithNSString:(NSString *)provider;

/*!
 @brief Sets the signing reason.
 @param reason the signing reason
 */
- (void)setReasonWithNSString:(NSString *)reason;

/*!
 @brief Sets the rendering mode for this signature.
 The rendering modes can be the constants <CODE>SignatureRenderDescription</CODE>,
  <CODE>SignatureRenderNameAndDescription</CODE> or <CODE>SignatureRenderGraphicAndDescription</CODE>.
  The two last modes should be used with Acrobat 6 layer type.
 @param render the render mode
 */
- (void)setRenderWithInt:(jint)render;

/*!
 @brief Sets the run direction in the n2 and n4 layer.
 @param runDirection the run direction
 */
- (void)setRunDirectionWithInt:(jint)runDirection;

/*!
 @brief Sets the signature event to allow modification of the signature dictionary.
 @param signatureEvent the signature event
 */
- (void)setSignatureEventWithComAowagieTextPdfPdfSignatureAppearance_SignatureEvent:(id<ComAowagieTextPdfPdfSignatureAppearance_SignatureEvent>)signatureEvent;

/*!
 @brief Sets the Image object to render when Render is set to <CODE>SignatureRenderGraphicAndDescription</CODE>
 @param signatureGraphic image rendered. If  <CODE> null </CODE>  the mode is defaulted
   to  <CODE> SignatureRenderDescription </CODE>
 */
- (void)setSignatureGraphicWithComAowagieTextImage:(ComAowagieTextImage *)signatureGraphic;

/*!
 @brief Sets the signature date.
 @param signDate the signature date
 */
- (void)setSignDateWithJavaUtilCalendar:(JavaUtilCalendar *)signDate;

/*!
 @brief Sets the signature to be visible.It creates a new visible signature field.
 @param pageRect the position and dimension of the field in the page
 @param page the page to place the field. The fist page is 1
 @param fieldName the field name or  <CODE> null </CODE>  to generate automatically a new field name
 */
- (void)setVisibleSignatureWithComAowagieTextRectangle:(ComAowagieTextRectangle *)pageRect
                                               withInt:(jint)page
                                          withNSString:(NSString *)fieldName;

/*!
 @brief Sets the signature to be visible.An empty signature field with the same name must already exist.
 @param fieldName the existing empty signature field name
 */
- (void)setVisibleSignatureWithNSString:(NSString *)fieldName;

#pragma mark Package-Private

- (instancetype)initWithComAowagieTextPdfPdfStamperImp:(ComAowagieTextPdfPdfStamperImp *)writer
                                  withJavaUtilCalendar:(JavaUtilCalendar *)globalDate;

- (instancetype)initWithComAowagieTextPdfPdfStamperImp:(ComAowagieTextPdfPdfStamperImp *)writer
                                  withJavaUtilCalendar:(JavaUtilCalendar *)globalDate
                                      withJavaUtilList:(id<JavaUtilList>)signatureFieldNames;

/*!
 @brief This is the first method to be called when using external signatures.The general sequence is:
  preClose(), getDocumentBytes() and close().
 <p>
  If calling preClose() <B>dont't</B> call PdfStamper.close(). 
 <p>
  No external signatures are allowed if this method is called.
 @param globalDate Date
 @throw IOExceptionon error
 @throw DocumentExceptionon error
 */
- (void)preCloseWithJavaUtilCalendar:(JavaUtilCalendar *)globalDate;

- (void)setOriginaloutWithJavaIoOutputStream:(JavaIoOutputStream *)originalout;

- (void)setSigoutWithComAowagieTextPdfByteBuffer:(ComAowagieTextPdfByteBuffer *)sigout;

- (void)setStamperWithComAowagieTextPdfPdfStamper:(ComAowagieTextPdfPdfStamper *)stamper;

- (void)setTempFileWithJavaIoFile:(JavaIoFile *)tempFile;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfPdfSignatureAppearance)

/*!
 @brief The rendering mode is just the description
 */
inline jint ComAowagieTextPdfPdfSignatureAppearance_get_SignatureRenderDescription(void);
#define ComAowagieTextPdfPdfSignatureAppearance_SignatureRenderDescription 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfSignatureAppearance, SignatureRenderDescription, jint)

/*!
 @brief The rendering mode is the name of the signer and the description
 */
inline jint ComAowagieTextPdfPdfSignatureAppearance_get_SignatureRenderNameAndDescription(void);
#define ComAowagieTextPdfPdfSignatureAppearance_SignatureRenderNameAndDescription 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfSignatureAppearance, SignatureRenderNameAndDescription, jint)

/*!
 @brief The rendering mode is an image and the description
 */
inline jint ComAowagieTextPdfPdfSignatureAppearance_get_SignatureRenderGraphicAndDescription(void);
#define ComAowagieTextPdfPdfSignatureAppearance_SignatureRenderGraphicAndDescription 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfSignatureAppearance, SignatureRenderGraphicAndDescription, jint)

/*!
 @brief The self signed filter.
 */
inline ComAowagieTextPdfPdfName *ComAowagieTextPdfPdfSignatureAppearance_get_SELF_SIGNED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComAowagieTextPdfPdfName *ComAowagieTextPdfPdfSignatureAppearance_SELF_SIGNED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfSignatureAppearance, SELF_SIGNED, ComAowagieTextPdfPdfName *)

inline jint ComAowagieTextPdfPdfSignatureAppearance_get_NOT_CERTIFIED(void);
#define ComAowagieTextPdfPdfSignatureAppearance_NOT_CERTIFIED 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfSignatureAppearance, NOT_CERTIFIED, jint)

inline jint ComAowagieTextPdfPdfSignatureAppearance_get_CERTIFIED_NO_CHANGES_ALLOWED(void);
#define ComAowagieTextPdfPdfSignatureAppearance_CERTIFIED_NO_CHANGES_ALLOWED 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfSignatureAppearance, CERTIFIED_NO_CHANGES_ALLOWED, jint)

inline jint ComAowagieTextPdfPdfSignatureAppearance_get_CERTIFIED_FORM_FILLING(void);
#define ComAowagieTextPdfPdfSignatureAppearance_CERTIFIED_FORM_FILLING 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfSignatureAppearance, CERTIFIED_FORM_FILLING, jint)

inline jint ComAowagieTextPdfPdfSignatureAppearance_get_CERTIFIED_FORM_FILLING_AND_ANNOTATIONS(void);
#define ComAowagieTextPdfPdfSignatureAppearance_CERTIFIED_FORM_FILLING_AND_ANNOTATIONS 3
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfSignatureAppearance, CERTIFIED_FORM_FILLING_AND_ANNOTATIONS, jint)

/*!
 @brief Commands to draw a yellow question mark in a stream content
 */
inline NSString *ComAowagieTextPdfPdfSignatureAppearance_get_questionMark(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextPdfPdfSignatureAppearance_questionMark;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfSignatureAppearance, questionMark, NSString *)

FOUNDATION_EXPORT void ComAowagieTextPdfPdfSignatureAppearance_initWithComAowagieTextPdfPdfStamperImp_withJavaUtilCalendar_(ComAowagieTextPdfPdfSignatureAppearance *self, ComAowagieTextPdfPdfStamperImp *writer, JavaUtilCalendar *globalDate);

FOUNDATION_EXPORT ComAowagieTextPdfPdfSignatureAppearance *new_ComAowagieTextPdfPdfSignatureAppearance_initWithComAowagieTextPdfPdfStamperImp_withJavaUtilCalendar_(ComAowagieTextPdfPdfStamperImp *writer, JavaUtilCalendar *globalDate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfSignatureAppearance *create_ComAowagieTextPdfPdfSignatureAppearance_initWithComAowagieTextPdfPdfStamperImp_withJavaUtilCalendar_(ComAowagieTextPdfPdfStamperImp *writer, JavaUtilCalendar *globalDate);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfSignatureAppearance_initWithComAowagieTextPdfPdfStamperImp_withJavaUtilCalendar_withJavaUtilList_(ComAowagieTextPdfPdfSignatureAppearance *self, ComAowagieTextPdfPdfStamperImp *writer, JavaUtilCalendar *globalDate, id<JavaUtilList> signatureFieldNames);

FOUNDATION_EXPORT ComAowagieTextPdfPdfSignatureAppearance *new_ComAowagieTextPdfPdfSignatureAppearance_initWithComAowagieTextPdfPdfStamperImp_withJavaUtilCalendar_withJavaUtilList_(ComAowagieTextPdfPdfStamperImp *writer, JavaUtilCalendar *globalDate, id<JavaUtilList> signatureFieldNames) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfSignatureAppearance *create_ComAowagieTextPdfPdfSignatureAppearance_initWithComAowagieTextPdfPdfStamperImp_withJavaUtilCalendar_withJavaUtilList_(ComAowagieTextPdfPdfStamperImp *writer, JavaUtilCalendar *globalDate, id<JavaUtilList> signatureFieldNames);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfSignatureAppearance)

#endif

#if !defined (ComAowagieTextPdfPdfSignatureAppearance_SignatureEvent_) && (INCLUDE_ALL_PdfSignatureAppearance || defined(INCLUDE_ComAowagieTextPdfPdfSignatureAppearance_SignatureEvent))
#define ComAowagieTextPdfPdfSignatureAppearance_SignatureEvent_

@class ComAowagieTextPdfPdfDictionary;

/*!
 @brief An interface to retrieve the signature dictionary for modification.
 */
@protocol ComAowagieTextPdfPdfSignatureAppearance_SignatureEvent < JavaObject >

/*!
 @brief Allows modification of the signature dictionary.
 @param sig the signature dictionary
 */
- (void)getSignatureDictionaryWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)sig;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfPdfSignatureAppearance_SignatureEvent)

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfSignatureAppearance_SignatureEvent)

#endif

#pragma pop_macro("INCLUDE_ALL_PdfSignatureAppearance")
