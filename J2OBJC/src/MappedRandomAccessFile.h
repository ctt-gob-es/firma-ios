//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/MappedRandomAccessFile.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_MappedRandomAccessFile")
#ifdef RESTRICT_MappedRandomAccessFile
#define INCLUDE_ALL_MappedRandomAccessFile 0
#else
#define INCLUDE_ALL_MappedRandomAccessFile 1
#endif
#undef RESTRICT_MappedRandomAccessFile

#if !defined (ComAowagieTextPdfMappedRandomAccessFile_) && (INCLUDE_ALL_MappedRandomAccessFile || defined(INCLUDE_ComAowagieTextPdfMappedRandomAccessFile))
#define ComAowagieTextPdfMappedRandomAccessFile_

@class IOSByteArray;
@class JavaNioChannelsFileChannel;

/*!
 @brief A <code>java.nio.MappedByteBuffer</code> wrapped as a <code>java.io.RandomAccessFile</code>
 @author Joakim Sandstroem
  Created on 6.9.2006
 */
@interface ComAowagieTextPdfMappedRandomAccessFile : NSObject

#pragma mark Public

/*!
 @brief Constructs a new MappedRandomAccessFile instance
 @param filename String
 @param mode String r, w or rw
 @throw FileNotFoundExceptionon error
 @throw IOExceptionon error
 */
- (instancetype)initPackagePrivateWithNSString:(NSString *)filename
                                  withNSString:(NSString *)mode;

/*!
 - seealso: java.io.RandomAccessFile#close()
 Cleans the mapped bytebuffer and closes the channel
 @throw IOExceptionon error
 */
- (void)close;

/*!
 @return File channel
 @since 2.0.8
 */
- (JavaNioChannelsFileChannel *)getChannel;

/*!
 - seealso: java.io.RandomAccessFile#getFilePointer()
 @return long
 */
- (jlong)getFilePointer;

/*!
 - seealso: java.io.RandomAccessFile#length()
 @return long length
 */
- (jlong)length;

/*!
 - seealso: java.io.RandomAccessFile#read()
 @return int next integer or -1 on EOF
 */
- (jint)read;

/*!
 - seealso: java.io.RandomAccessFile#read(byte[], int, int)
 @param bytes byte[]
 @param off int offset
 @param len int length
 @return int bytes read or -1 on EOF
 */
- (jint)readWithByteArray:(IOSByteArray *)bytes
                  withInt:(jint)off
                  withInt:(jint)len;

/*!
 - seealso: java.io.RandomAccessFile#seek(long)
 @param pos long position
 */
- (void)seekWithLong:(jlong)pos;

#pragma mark Protected

/*!
 @brief invokes the close method
 - seealso: java.lang.Object#finalize()
 */
- (void)java_finalize;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfMappedRandomAccessFile)

FOUNDATION_EXPORT void ComAowagieTextPdfMappedRandomAccessFile_initPackagePrivateWithNSString_withNSString_(ComAowagieTextPdfMappedRandomAccessFile *self, NSString *filename, NSString *mode);

FOUNDATION_EXPORT ComAowagieTextPdfMappedRandomAccessFile *new_ComAowagieTextPdfMappedRandomAccessFile_initPackagePrivateWithNSString_withNSString_(NSString *filename, NSString *mode) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfMappedRandomAccessFile *create_ComAowagieTextPdfMappedRandomAccessFile_initPackagePrivateWithNSString_withNSString_(NSString *filename, NSString *mode);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfMappedRandomAccessFile)

#endif

#pragma pop_macro("INCLUDE_ALL_MappedRandomAccessFile")
