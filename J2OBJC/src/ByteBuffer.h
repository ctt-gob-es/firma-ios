//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/ByteBuffer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ByteBuffer")
#ifdef RESTRICT_ByteBuffer
#define INCLUDE_ALL_ByteBuffer 0
#else
#define INCLUDE_ALL_ByteBuffer 1
#endif
#undef RESTRICT_ByteBuffer

#if !defined (ComAowagieTextPdfByteBuffer_) && (INCLUDE_ALL_ByteBuffer || defined(INCLUDE_ComAowagieTextPdfByteBuffer))
#define ComAowagieTextPdfByteBuffer_

#define RESTRICT_JavaIoOutputStream 1
#define INCLUDE_JavaIoOutputStream 1
#include "java/io/OutputStream.h"

@class IOSByteArray;

/*!
 @brief Acts like a <CODE>StringBuffer</CODE> but works with <CODE>byte</CODE> arrays.
 Floating point is converted to a format suitable to the PDF.
 @author Paulo Soares (psoares@@consiste.pt)
 */
@interface ComAowagieTextPdfByteBuffer : JavaIoOutputStream

#pragma mark Public

/*!
 @brief Creates new ByteBuffer with capacity 128
 */
- (instancetype)init;

/*!
 @brief Creates a byte buffer with a certain capacity.
 @param size the initial capacity
 */
- (instancetype)initWithInt:(jint)size;

- (ComAowagieTextPdfByteBuffer *)appendWithByte:(jbyte)b;

/*!
 @brief Appends an <CODE>int</CODE>.The size of the array will grow by one.
 @param b the int to be appended
 @return a reference to this <CODE>ByteBuffer</CODE> object
 */
- (ComAowagieTextPdfByteBuffer *)append_iWithInt:(jint)b;

- (IOSByteArray *)getBuffer;

- (void)setSizeWithInt:(jint)size;

/*!
 @brief Creates a newly allocated byte array.Its size is the current
  size of this output stream and the valid contents of the buffer
  have been copied into it.
 @return the current contents of this output stream, as a byte array.
 */
- (IOSByteArray *)toByteArray;

/*!
 @brief Converts the buffer's contents into a string, translating bytes into
  characters according to the platform's default character encoding.
 @return String translated from the buffer's contents.
 */
- (NSString *)description;

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len;

- (void)writeWithInt:(jint)b;

#pragma mark Package-Private

/*!
 @brief Appends an array of bytes.
 @param b the array to be appended
 @return a reference to this <CODE>ByteBuffer</CODE> object
 */
- (ComAowagieTextPdfByteBuffer *)appendWithByteArray:(IOSByteArray *)b;

/*!
 @brief Appends the subarray of the <CODE>byte</CODE> array.The buffer will grow by 
 <CODE>len</CODE> bytes.
 @param b the array to be appended
 @param off the offset to the start of the array
 @param len the length of bytes to append
 @return a reference to this <CODE>ByteBuffer</CODE> object
 */
- (ComAowagieTextPdfByteBuffer *)appendWithByteArray:(IOSByteArray *)b
                                             withInt:(jint)off
                                             withInt:(jint)len;

/*!
 @brief Appends another <CODE>ByteBuffer</CODE> to this buffer.
 @param buf the  <CODE> ByteBuffer </CODE>  to be appended
 @return a reference to this <CODE>ByteBuffer</CODE> object
 */
- (ComAowagieTextPdfByteBuffer *)appendWithComAowagieTextPdfByteBuffer:(ComAowagieTextPdfByteBuffer *)buf;

/*!
 @brief Appends a <CODE>char</CODE> to the buffer.The <CODE>char</CODE> is
  converted according to the encoding ISO-8859-1.
 @param c the  <CODE> char </CODE>  to be appended
 @return a reference to this <CODE>ByteBuffer</CODE> object
 */
- (ComAowagieTextPdfByteBuffer *)appendWithChar:(jchar)c;

/*!
 @brief Appends a string representation of a <CODE>float</CODE> according
  to the Pdf conventions.
 @param i the  <CODE> float </CODE>  to be appended
 @return a reference to this <CODE>ByteBuffer</CODE> object
 */
- (ComAowagieTextPdfByteBuffer *)appendWithFloat:(jfloat)i;

/*!
 @brief Appends the string representation of an <CODE>int</CODE>.
 @param i the  <CODE> int </CODE>  to be appended
 @return a reference to this <CODE>ByteBuffer</CODE> object
 */
- (ComAowagieTextPdfByteBuffer *)appendWithInt:(jint)i;

/*!
 @brief Appends a <CODE>String</CODE> to the buffer.The <CODE>String</CODE> is
  converted according to the encoding ISO-8859-1.
 @param str the  <CODE> String </CODE>  to be appended
 @return a reference to this <CODE>ByteBuffer</CODE> object
 */
- (ComAowagieTextPdfByteBuffer *)appendWithNSString:(NSString *)str;

- (ComAowagieTextPdfByteBuffer *)appendHexWithByte:(jbyte)b;

/*!
 @brief Outputs a <CODE>double</CODE> into a format suitable for the PDF.
 @param d a double
 @return the <CODE>String</CODE> representation of the <CODE>double</CODE>
 */
+ (NSString *)formatDoubleWithDouble:(jdouble)d;

/*!
 @brief Sets the size to zero.
 */
- (void)reset;

/*!
 @brief Returns the current size of the buffer.
 @return the value of the <code>count</code> field, which is the number of valid bytes in this byte buffer.
 */
- (jint)size;

/*!
 @brief Writes the complete contents of this byte buffer output to
  the specified output stream argument, as if by calling the output
  stream's write method using <code>out.write(buf, 0, count)</code>.
 @param outArg the output stream to which to write the data.
 @throw IOExceptionif an I/O error occurs.
 */
- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfByteBuffer)

FOUNDATION_EXPORT void ComAowagieTextPdfByteBuffer_init(ComAowagieTextPdfByteBuffer *self);

FOUNDATION_EXPORT ComAowagieTextPdfByteBuffer *new_ComAowagieTextPdfByteBuffer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfByteBuffer *create_ComAowagieTextPdfByteBuffer_init(void);

FOUNDATION_EXPORT void ComAowagieTextPdfByteBuffer_initWithInt_(ComAowagieTextPdfByteBuffer *self, jint size);

FOUNDATION_EXPORT ComAowagieTextPdfByteBuffer *new_ComAowagieTextPdfByteBuffer_initWithInt_(jint size) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfByteBuffer *create_ComAowagieTextPdfByteBuffer_initWithInt_(jint size);

FOUNDATION_EXPORT NSString *ComAowagieTextPdfByteBuffer_formatDoubleWithDouble_(jdouble d);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfByteBuffer)

#endif

#pragma pop_macro("INCLUDE_ALL_ByteBuffer")
