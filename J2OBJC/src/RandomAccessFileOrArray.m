//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/RandomAccessFileOrArray.java
//

#include "BaseFont.h"
#include "Document.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MappedRandomAccessFile.h"
#include "RandomAccessFileOrArray.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/DataInputStream.h"
#include "java/io/EOFException.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/RandomAccessFile.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/net/URL.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/MappedByteBuffer.h"
#include "java/nio/channels/FileChannel.h"

#if !__has_feature(objc_arc)
#error "RandomAccessFileOrArray must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfRandomAccessFileOrArray () {
 @public
  ComAowagieTextPdfMappedRandomAccessFile *rf_;
  JavaIoRandomAccessFile *trf_;
  jboolean plainRandomAccess_;
  NSString *filename_;
  IOSByteArray *arrayIn_;
  jint arrayInPtr_;
  jbyte back_;
  jboolean isBack_;
  /*!
   @brief Holds value of property startOffset.
   */
  jint startOffset_;
}

+ (IOSByteArray *)InputStreamToArrayWithJavaIoInputStream:(JavaIoInputStream *)is;

- (void)insureOpen;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfRandomAccessFileOrArray, rf_, ComAowagieTextPdfMappedRandomAccessFile *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfRandomAccessFileOrArray, trf_, JavaIoRandomAccessFile *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfRandomAccessFileOrArray, filename_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfRandomAccessFileOrArray, arrayIn_, IOSByteArray *)

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfRandomAccessFileOrArray_InputStreamToArrayWithJavaIoInputStream_(JavaIoInputStream *is);

__attribute__((unused)) static void ComAowagieTextPdfRandomAccessFileOrArray_insureOpen(ComAowagieTextPdfRandomAccessFileOrArray *self);

__attribute__((unused)) static jint ComAowagieTextPdfRandomAccessFileOrArray_readIntLE(ComAowagieTextPdfRandomAccessFileOrArray *self);

__attribute__((unused)) static jlong ComAowagieTextPdfRandomAccessFileOrArray_readLongLE(ComAowagieTextPdfRandomAccessFileOrArray *self);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/RandomAccessFileOrArray.java"


#line 70
@implementation ComAowagieTextPdfRandomAccessFileOrArray


#line 84
- (instancetype)initWithNSString:(NSString *)filename {
  ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_(self, filename);
  return self;
}


#line 88
- (instancetype)initWithNSString:(NSString *)filename
                     withBoolean:(jboolean)forceRead
                     withBoolean:(jboolean)plainRandomAccess {
  ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_withBoolean_withBoolean_(self, filename, forceRead, plainRandomAccess);
  return self;
}


#line 135
- (instancetype)initWithJavaNetURL:(JavaNetURL *)url {
  ComAowagieTextPdfRandomAccessFileOrArray_initWithJavaNetURL_(self, url);
  return self;
}


#line 145
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is {
  ComAowagieTextPdfRandomAccessFileOrArray_initWithJavaIoInputStream_(self, is);
  return self;
}


#line 149
+ (IOSByteArray *)InputStreamToArrayWithJavaIoInputStream:(JavaIoInputStream *)is {
  return ComAowagieTextPdfRandomAccessFileOrArray_InputStreamToArrayWithJavaIoInputStream_(is);
}


#line 163
- (instancetype)initWithByteArray:(IOSByteArray *)arrayIn {
  ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_(self, arrayIn);
  return self;
}


#line 167
- (instancetype)initWithComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)file {
  ComAowagieTextPdfRandomAccessFileOrArray_initWithComAowagieTextPdfRandomAccessFileOrArray_(self, file);
  return self;
}


#line 174
- (void)pushBackWithByte:(jbyte)b {
  self->back_ = b;
  self->isBack_ = true;
}

- (jint)read {
  if (self->isBack_) {
    self->isBack_ = false;
    return self->back_ & (jint) 0xff;
  }
  if (self->arrayIn_ == nil) {
    return self->plainRandomAccess_ ? [((JavaIoRandomAccessFile *) nil_chk(self->trf_)) read] : [((ComAowagieTextPdfMappedRandomAccessFile *) nil_chk(self->rf_)) read];
  }
  else {
    
#line 187
    if (self->arrayInPtr_ >= self->arrayIn_->size_) {
      return -1;
    }
    return IOSByteArray_Get(self->arrayIn_, self->arrayInPtr_++) & (jint) 0xff;
  }
}


#line 194
- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len {
  
#line 195
  if (len == 0) {
    return 0;
  }
  jint n = 0;
  if (self->isBack_) {
    self->isBack_ = false;
    if (len == 1) {
      *IOSByteArray_GetRef(nil_chk(b), off) = self->back_;
      return 1;
    }
    else {
      n = 1;
      *IOSByteArray_GetRef(nil_chk(b), off++) = self->back_;
      --len;
    }
  }
  if (self->arrayIn_ == nil) {
    return (self->plainRandomAccess_ ? [((JavaIoRandomAccessFile *) nil_chk(self->trf_)) readWithByteArray:b withInt:off withInt:len] : [((ComAowagieTextPdfMappedRandomAccessFile *) nil_chk(self->rf_)) readWithByteArray:b withInt:off withInt:len]) + n;
  }
  else {
    if (self->arrayInPtr_ >= self->arrayIn_->size_) {
      return -1;
    }
    if (self->arrayInPtr_ + len > self->arrayIn_->size_) {
      len = self->arrayIn_->size_ - self->arrayInPtr_;
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->arrayIn_, self->arrayInPtr_, b, off, len);
    self->arrayInPtr_ += len;
    return len + n;
  }
}


#line 227
- (jint)readWithByteArray:(IOSByteArray *)b {
  return [self readWithByteArray:b withInt:0 withInt:((IOSByteArray *) nil_chk(b))->size_];
}

- (void)readFullyWithByteArray:(IOSByteArray *)b {
  
#line 233
  [self readFullyWithByteArray:b withInt:0 withInt:((IOSByteArray *) nil_chk(b))->size_];
}


#line 236
- (void)readFullyWithByteArray:(IOSByteArray *)b
                       withInt:(jint)off
                       withInt:(jint)len {
  
#line 238
  jint n = 0;
  do {
    jint count = [self readWithByteArray:b withInt:off + n withInt:len - n];
    if (count < 0) {
      @throw new_JavaIoEOFException_init();
    }
    n += count;
  }
  while (
#line 245
  n < len);
}


#line 248
- (jlong)skipWithLong:(jlong)n {
  return [self skipBytesWithInt:(jint) n];
}

- (jint)skipBytesWithInt:(jint)n {
  
#line 254
  if (n <= 0) {
    return 0;
  }
  jint adj = 0;
  if (self->isBack_) {
    self->isBack_ = false;
    if (n == 1) {
      return 1;
    }
    else {
      --n;
      adj = 1;
    }
  }
  jint pos;
  jint len;
  jint newpos;
  
#line 272
  pos = [self getFilePointer];
  len = [self length];
  newpos = pos + n;
  if (newpos > len) {
    newpos = len;
  }
  [self seekWithInt:newpos];
  
#line 281
  return newpos - pos + adj;
}


#line 284
- (void)reOpen {
  if (self->filename_ != nil && self->rf_ == nil && self->trf_ == nil) {
    if (self->plainRandomAccess_) {
      self->trf_ = new_JavaIoRandomAccessFile_initWithNSString_withNSString_(self->filename_, @"r");
    }
    else {
      
#line 289
      self->rf_ = new_ComAowagieTextPdfMappedRandomAccessFile_initPackagePrivateWithNSString_withNSString_(self->filename_, @"r");
    }
  }
  [self seekWithInt:0];
}


#line 295
- (void)insureOpen {
  ComAowagieTextPdfRandomAccessFileOrArray_insureOpen(self);
}


#line 301
- (jboolean)isOpen {
  return self->filename_ == nil || self->rf_ != nil || self->trf_ != nil;
}

- (void)close {
  self->isBack_ = false;
  if (self->rf_ != nil) {
    [self->rf_ close];
    self->rf_ = nil;
    
#line 313
    self->plainRandomAccess_ = true;
  }
  else if (self->trf_ != nil) {
    [self->trf_ close];
    self->trf_ = nil;
  }
}


#line 321
- (jint)length {
  if (self->arrayIn_ == nil) {
    ComAowagieTextPdfRandomAccessFileOrArray_insureOpen(self);
    return (jint) (self->plainRandomAccess_ ? [((JavaIoRandomAccessFile *) nil_chk(self->trf_)) length] : [((ComAowagieTextPdfMappedRandomAccessFile *) nil_chk(self->rf_)) length]) - self->startOffset_;
  }
  else {
    
#line 326
    return self->arrayIn_->size_ - self->startOffset_;
  }
}


#line 330
- (void)seekWithInt:(jint)pos {
  pos += self->startOffset_;
  self->isBack_ = false;
  if (self->arrayIn_ == nil) {
    ComAowagieTextPdfRandomAccessFileOrArray_insureOpen(self);
    if (self->plainRandomAccess_) {
      [((JavaIoRandomAccessFile *) nil_chk(self->trf_)) seekWithLong:pos];
    }
    else {
      
#line 338
      [((ComAowagieTextPdfMappedRandomAccessFile *) nil_chk(self->rf_)) seekWithLong:pos];
    }
  }
  else {
    
#line 341
    self->arrayInPtr_ = pos;
  }
}


#line 345
- (void)seekWithLong:(jlong)pos {
  [self seekWithInt:(jint) pos];
}

- (jint)getFilePointer {
  ComAowagieTextPdfRandomAccessFileOrArray_insureOpen(self);
  jint n = self->isBack_ ? 1 : 0;
  if (self->arrayIn_ == nil) {
    return (jint) (self->plainRandomAccess_ ? [((JavaIoRandomAccessFile *) nil_chk(self->trf_)) getFilePointer] : [((ComAowagieTextPdfMappedRandomAccessFile *) nil_chk(self->rf_)) getFilePointer]) - n - self->startOffset_;
  }
  else {
    
#line 355
    return self->arrayInPtr_ - n - self->startOffset_;
  }
}


#line 359
- (jboolean)readBoolean {
  
#line 361
  jint ch = [self read];
  if (ch < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return ch != 0;
}


#line 368
- (jbyte)readByte {
  
#line 370
  jint ch = [self read];
  if (ch < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return (jbyte) ch;
}


#line 377
- (jint)readUnsignedByte {
  
#line 379
  jint ch = [self read];
  if (ch < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return ch;
}


#line 386
- (jshort)readShort {
  
#line 388
  jint ch1 = [self read];
  jint ch2 = [self read];
  if ((ch1 | ch2) < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return (jshort) ((JreLShift32(ch1, 8)) + ch2);
}


#line 417
- (jshort)readShortLE {
  jint ch1 = [self read];
  jint ch2 = [self read];
  if ((ch1 | ch2) < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return (jshort) ((JreLShift32(ch2, 8)) + (JreLShift32(ch1, 0)));
}

- (jint)readUnsignedShort {
  
#line 428
  jint ch1 = [self read];
  jint ch2 = [self read];
  if ((ch1 | ch2) < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return (JreLShift32(ch1, 8)) + ch2;
}


#line 457
- (jint)readUnsignedShortLE {
  jint ch1 = [self read];
  jint ch2 = [self read];
  if ((ch1 | ch2) < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return (JreLShift32(ch2, 8)) + (JreLShift32(ch1, 0));
}

- (jchar)readChar {
  
#line 468
  jint ch1 = [self read];
  jint ch2 = [self read];
  if ((ch1 | ch2) < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return (jchar) ((JreLShift32(ch1, 8)) + ch2);
}


#line 478
- (jint)readInt {
  
#line 480
  jint ch1 = [self read];
  jint ch2 = [self read];
  jint ch3 = [self read];
  jint ch4 = [self read];
  if ((ch1 | ch2 | ch3 | ch4) < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return (JreLShift32(ch1, 24)) + (JreLShift32(ch2, 16)) + (JreLShift32(ch3, 8)) + ch4;
}


#line 511
- (jint)readIntLE {
  return ComAowagieTextPdfRandomAccessFileOrArray_readIntLE(self);
}


#line 542
- (jlong)readUnsignedInt {
  jlong ch1 = [self read];
  jlong ch2 = [self read];
  jlong ch3 = [self read];
  jlong ch4 = [self read];
  if ((ch1 | ch2 | ch3 | ch4) < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return (JreLShift64(ch1, 24)) + (JreLShift64(ch2, 16)) + (JreLShift64(ch3, 8)) + (JreLShift64(ch4, 0));
}

- (jlong)readUnsignedIntLE {
  jlong ch1 = [self read];
  jlong ch2 = [self read];
  jlong ch3 = [self read];
  jlong ch4 = [self read];
  if ((ch1 | ch2 | ch3 | ch4) < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return (JreLShift64(ch4, 24)) + (JreLShift64(ch3, 16)) + (JreLShift64(ch2, 8)) + (JreLShift64(ch1, 0));
}

- (jlong)readLong {
  
#line 566
  return (JreLShift64((jlong) [self readInt], 32)) + ([self readInt] & (jlong) 0xFFFFFFFFLL);
}


#line 569
- (jlong)readLongLE {
  return ComAowagieTextPdfRandomAccessFileOrArray_readLongLE(self);
}


#line 575
- (jfloat)readFloat {
  
#line 577
  return JavaLangFloat_intBitsToFloatWithInt_([self readInt]);
}


#line 580
- (jfloat)readFloatLE {
  return JavaLangFloat_intBitsToFloatWithInt_(ComAowagieTextPdfRandomAccessFileOrArray_readIntLE(self));
}

- (jdouble)readDouble {
  
#line 586
  return JavaLangDouble_longBitsToDoubleWithLong_([self readLong]);
}


#line 589
- (jdouble)readDoubleLE {
  return JavaLangDouble_longBitsToDoubleWithLong_(ComAowagieTextPdfRandomAccessFileOrArray_readLongLE(self));
}

- (NSString *)readLine {
  
#line 595
  JavaLangStringBuffer *input = new_JavaLangStringBuffer_init();
  jint c = -1;
  jboolean eol = false;
  
#line 599
  while (!eol) {
    {
      
#line 607
      jint cur;
      
#line 600
      switch (c = [self read]) {
        case -1:
        case 0x000a:
        eol = true;
        break;
        case 0x000d:
        eol = true;
        cur = [self getFilePointer];
        if ([self read] != 0x000a) {
          [self seekWithInt:cur];
        }
        break;
        default:
        (void) [input appendWithChar:(jchar) c];
        break;
      }
    }
  }
  if (c == -1 && [input java_length] == 0) {
    return nil;
  }
  return [input description];
}


#line 624
- (NSString *)readUTF {
  
#line 626
  return JavaIoDataInputStream_readUTFWithJavaIoDataInput_(self);
}


#line 633
- (jint)getStartOffset {
  return self->startOffset_;
}


#line 641
- (void)setStartOffsetWithInt:(jint)startOffset {
  self->startOffset_ = startOffset;
}


#line 650
- (JavaNioByteBuffer *)getNioByteBuffer {
  if (self->filename_ != nil) {
    JavaNioChannelsFileChannel *channel;
    if (self->plainRandomAccess_) {
      channel = [((JavaIoRandomAccessFile *) nil_chk(self->trf_)) getChannel];
    }
    else {
      
#line 656
      channel = [((ComAowagieTextPdfMappedRandomAccessFile *) nil_chk(self->rf_)) getChannel];
    }
    return [((JavaNioChannelsFileChannel *) nil_chk(channel)) mapWithJavaNioChannelsFileChannel_MapMode:JreLoadStatic(JavaNioChannelsFileChannel_MapMode, READ_ONLY) withLong:0 withLong:[channel size]];
  }
  return JavaNioByteBuffer_wrapWithByteArray_(self->arrayIn_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, 1, -1, -1, -1 },
    { NULL, "[B", 0xa, 5, 4, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x0, 10, 11, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 6, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 6, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 11, 1, -1, -1, -1 },
    { NULL, "J", 0x1, 13, 14, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, 16, 1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 16, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 14, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "S", 0x11, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, 1, -1, -1, -1 },
    { NULL, "C", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, 1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, 1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, 1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "F", 0x11, -1, -1, 1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "D", 0x11, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 16, -1, -1, -1, -1 },
    { NULL, "LJavaNioByteBuffer;", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withBoolean:withBoolean:);
  methods[2].selector = @selector(initWithJavaNetURL:);
  methods[3].selector = @selector(initWithJavaIoInputStream:);
  methods[4].selector = @selector(InputStreamToArrayWithJavaIoInputStream:);
  methods[5].selector = @selector(initWithByteArray:);
  methods[6].selector = @selector(initWithComAowagieTextPdfRandomAccessFileOrArray:);
  methods[7].selector = @selector(pushBackWithByte:);
  methods[8].selector = @selector(read);
  methods[9].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[10].selector = @selector(readWithByteArray:);
  methods[11].selector = @selector(readFullyWithByteArray:);
  methods[12].selector = @selector(readFullyWithByteArray:withInt:withInt:);
  methods[13].selector = @selector(skipWithLong:);
  methods[14].selector = @selector(skipBytesWithInt:);
  methods[15].selector = @selector(reOpen);
  methods[16].selector = @selector(insureOpen);
  methods[17].selector = @selector(isOpen);
  methods[18].selector = @selector(close);
  methods[19].selector = @selector(length);
  methods[20].selector = @selector(seekWithInt:);
  methods[21].selector = @selector(seekWithLong:);
  methods[22].selector = @selector(getFilePointer);
  methods[23].selector = @selector(readBoolean);
  methods[24].selector = @selector(readByte);
  methods[25].selector = @selector(readUnsignedByte);
  methods[26].selector = @selector(readShort);
  methods[27].selector = @selector(readShortLE);
  methods[28].selector = @selector(readUnsignedShort);
  methods[29].selector = @selector(readUnsignedShortLE);
  methods[30].selector = @selector(readChar);
  methods[31].selector = @selector(readInt);
  methods[32].selector = @selector(readIntLE);
  methods[33].selector = @selector(readUnsignedInt);
  methods[34].selector = @selector(readUnsignedIntLE);
  methods[35].selector = @selector(readLong);
  methods[36].selector = @selector(readLongLE);
  methods[37].selector = @selector(readFloat);
  methods[38].selector = @selector(readFloatLE);
  methods[39].selector = @selector(readDouble);
  methods[40].selector = @selector(readDoubleLE);
  methods[41].selector = @selector(readLine);
  methods[42].selector = @selector(readUTF);
  methods[43].selector = @selector(getStartOffset);
  methods[44].selector = @selector(setStartOffsetWithInt:);
  methods[45].selector = @selector(getNioByteBuffer);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rf_", "LComAowagieTextPdfMappedRandomAccessFile;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "trf_", "LJavaIoRandomAccessFile;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "plainRandomAccess_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "filename_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "arrayIn_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "arrayInPtr_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "back_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isBack_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "startOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaIoIOException;", "LNSString;ZZ", "LJavaNetURL;", "LJavaIoInputStream;", "InputStreamToArray", "[B", "LComAowagieTextPdfRandomAccessFileOrArray;", "pushBack", "B", "read", "[BII", "readFully", "skip", "J", "skipBytes", "I", "seek", "setStartOffset" };
  static const J2ObjcClassInfo _ComAowagieTextPdfRandomAccessFileOrArray = { "RandomAccessFileOrArray", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x1, 46, 9, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfRandomAccessFileOrArray;
}

@end


#line 84
void ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_(ComAowagieTextPdfRandomAccessFileOrArray *self, NSString *filename) {
  ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_withBoolean_withBoolean_(self, filename, false, JreLoadStatic(ComAowagieTextDocument, plainRandomAccess));
}


#line 84
ComAowagieTextPdfRandomAccessFileOrArray *new_ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_(NSString *filename) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfRandomAccessFileOrArray, initWithNSString_, filename)
}


#line 84
ComAowagieTextPdfRandomAccessFileOrArray *create_ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_(NSString *filename) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfRandomAccessFileOrArray, initWithNSString_, filename)
}

void ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_withBoolean_withBoolean_(ComAowagieTextPdfRandomAccessFileOrArray *self, NSString *filename, jboolean forceRead, jboolean plainRandomAccess) {
  NSObject_init(self);
  self->isBack_ =
#line 79
  false;
  self->startOffset_ =
#line 82
  0;
  
#line 89
  self->plainRandomAccess_ = plainRandomAccess;
  JavaIoFile *file = new_JavaIoFile_initWithNSString_(filename);
  if (![file canRead]) {
    if ([((NSString *) nil_chk(filename)) java_hasPrefix:@"file:/"] || [filename java_hasPrefix:@"http://"] || [filename java_hasPrefix:@"https://"] || [filename java_hasPrefix:@"jar:"]) {
      JavaIoInputStream *is = [new_JavaNetURL_initWithNSString_(filename) openStream];
      @try {
        self->arrayIn_ = ComAowagieTextPdfRandomAccessFileOrArray_InputStreamToArrayWithJavaIoInputStream_(is);
        return;
      }
      @finally {
        @try {
          
#line 99
          [((JavaIoInputStream *) nil_chk(is)) close];
        }
        @catch (
#line 99
        JavaIoIOException *ioe) {
        }
      }
    }
    else {
      
#line 103
      JavaIoInputStream *is = ComAowagieTextPdfBaseFont_getResourceStreamWithNSString_(filename);
      if (is == nil) {
        @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", filename, @" not found as file or resource."));
      }
      @try {
        self->arrayIn_ = ComAowagieTextPdfRandomAccessFileOrArray_InputStreamToArrayWithJavaIoInputStream_(is);
        return;
      }
      @finally {
        @try {
          
#line 112
          [is close];
        }
        @catch (
#line 112
        JavaIoIOException *ioe) {
        }
      }
    }
  }
  else
#line 116
  if (forceRead) {
    JavaIoInputStream *s = nil;
    @try {
      s = new_JavaIoFileInputStream_initWithJavaIoFile_(file);
      self->arrayIn_ = ComAowagieTextPdfRandomAccessFileOrArray_InputStreamToArrayWithJavaIoInputStream_(s);
    }
    @finally {
      @try {
        
#line 123
        if (s != nil) {
          
#line 123
          [s close];
        }
      }
      @catch (
#line 123
      JavaLangException *e) {
      }
    }
    
#line 125
    return;
  }
  self->filename_ = filename;
  if (plainRandomAccess) {
    self->trf_ = new_JavaIoRandomAccessFile_initWithNSString_withNSString_(filename, @"r");
  }
  else {
    
#line 131
    self->rf_ = new_ComAowagieTextPdfMappedRandomAccessFile_initPackagePrivateWithNSString_withNSString_(filename, @"r");
  }
}


#line 88
ComAowagieTextPdfRandomAccessFileOrArray *new_ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_withBoolean_withBoolean_(NSString *filename, jboolean forceRead, jboolean plainRandomAccess) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfRandomAccessFileOrArray, initWithNSString_withBoolean_withBoolean_, filename, forceRead, plainRandomAccess)
}


#line 88
ComAowagieTextPdfRandomAccessFileOrArray *create_ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_withBoolean_withBoolean_(NSString *filename, jboolean forceRead, jboolean plainRandomAccess) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfRandomAccessFileOrArray, initWithNSString_withBoolean_withBoolean_, filename, forceRead, plainRandomAccess)
}


#line 135
void ComAowagieTextPdfRandomAccessFileOrArray_initWithJavaNetURL_(ComAowagieTextPdfRandomAccessFileOrArray *self, JavaNetURL *url) {
  NSObject_init(self);
  self->isBack_ =
#line 79
  false;
  self->startOffset_ =
#line 82
  0;
  
#line 136
  JavaIoInputStream *is = [((JavaNetURL *) nil_chk(url)) openStream];
  @try {
    self->arrayIn_ = ComAowagieTextPdfRandomAccessFileOrArray_InputStreamToArrayWithJavaIoInputStream_(is);
  }
  @finally {
    @try {
      
#line 141
      [((JavaIoInputStream *) nil_chk(is)) close];
    }
    @catch (
#line 141
    JavaIoIOException *ioe) {
    }
  }
}


#line 135
ComAowagieTextPdfRandomAccessFileOrArray *new_ComAowagieTextPdfRandomAccessFileOrArray_initWithJavaNetURL_(JavaNetURL *url) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfRandomAccessFileOrArray, initWithJavaNetURL_, url)
}


#line 135
ComAowagieTextPdfRandomAccessFileOrArray *create_ComAowagieTextPdfRandomAccessFileOrArray_initWithJavaNetURL_(JavaNetURL *url) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfRandomAccessFileOrArray, initWithJavaNetURL_, url)
}


#line 145
void ComAowagieTextPdfRandomAccessFileOrArray_initWithJavaIoInputStream_(ComAowagieTextPdfRandomAccessFileOrArray *self, JavaIoInputStream *is) {
  NSObject_init(self);
  self->isBack_ =
#line 79
  false;
  self->startOffset_ =
#line 82
  0;
  
#line 146
  self->arrayIn_ = ComAowagieTextPdfRandomAccessFileOrArray_InputStreamToArrayWithJavaIoInputStream_(is);
}


#line 145
ComAowagieTextPdfRandomAccessFileOrArray *new_ComAowagieTextPdfRandomAccessFileOrArray_initWithJavaIoInputStream_(JavaIoInputStream *is) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfRandomAccessFileOrArray, initWithJavaIoInputStream_, is)
}


#line 145
ComAowagieTextPdfRandomAccessFileOrArray *create_ComAowagieTextPdfRandomAccessFileOrArray_initWithJavaIoInputStream_(JavaIoInputStream *is) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfRandomAccessFileOrArray, initWithJavaIoInputStream_, is)
}

IOSByteArray *ComAowagieTextPdfRandomAccessFileOrArray_InputStreamToArrayWithJavaIoInputStream_(JavaIoInputStream *is) {
  ComAowagieTextPdfRandomAccessFileOrArray_initialize();
  
#line 150
  IOSByteArray *b = [IOSByteArray newArrayWithLength:8192];
  JavaIoByteArrayOutputStream *out = new_JavaIoByteArrayOutputStream_init();
  while (true) {
    jint read = [((JavaIoInputStream *) nil_chk(is)) readWithByteArray:b];
    if (read < 1) {
      break;
    }
    [out writeWithByteArray:b withInt:0 withInt:read];
  }
  [out close];
  return [out toByteArray];
}


#line 163
void ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_(ComAowagieTextPdfRandomAccessFileOrArray *self, IOSByteArray *arrayIn) {
  NSObject_init(self);
  self->isBack_ =
#line 79
  false;
  self->startOffset_ =
#line 82
  0;
  
#line 164
  self->arrayIn_ = arrayIn;
}


#line 163
ComAowagieTextPdfRandomAccessFileOrArray *new_ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_(IOSByteArray *arrayIn) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfRandomAccessFileOrArray, initWithByteArray_, arrayIn)
}


#line 163
ComAowagieTextPdfRandomAccessFileOrArray *create_ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_(IOSByteArray *arrayIn) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfRandomAccessFileOrArray, initWithByteArray_, arrayIn)
}

void ComAowagieTextPdfRandomAccessFileOrArray_initWithComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfRandomAccessFileOrArray *self, ComAowagieTextPdfRandomAccessFileOrArray *file) {
  NSObject_init(self);
  self->isBack_ =
#line 79
  false;
  self->startOffset_ =
#line 82
  0;
  
#line 168
  self->filename_ = ((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(file))->filename_;
  self->arrayIn_ = file->arrayIn_;
  self->startOffset_ = file->startOffset_;
  self->plainRandomAccess_ = file->plainRandomAccess_;
}


#line 167
ComAowagieTextPdfRandomAccessFileOrArray *new_ComAowagieTextPdfRandomAccessFileOrArray_initWithComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfRandomAccessFileOrArray *file) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfRandomAccessFileOrArray, initWithComAowagieTextPdfRandomAccessFileOrArray_, file)
}


#line 167
ComAowagieTextPdfRandomAccessFileOrArray *create_ComAowagieTextPdfRandomAccessFileOrArray_initWithComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfRandomAccessFileOrArray *file) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfRandomAccessFileOrArray, initWithComAowagieTextPdfRandomAccessFileOrArray_, file)
}


#line 295
void ComAowagieTextPdfRandomAccessFileOrArray_insureOpen(ComAowagieTextPdfRandomAccessFileOrArray *self) {
  if (self->filename_ != nil && self->rf_ == nil && self->trf_ == nil) {
    [self reOpen];
  }
}


#line 511
jint ComAowagieTextPdfRandomAccessFileOrArray_readIntLE(ComAowagieTextPdfRandomAccessFileOrArray *self) {
  jint ch1 = [self read];
  jint ch2 = [self read];
  jint ch3 = [self read];
  jint ch4 = [self read];
  if ((ch1 | ch2 | ch3 | ch4) < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return (JreLShift32(ch4, 24)) + (JreLShift32(ch3, 16)) + (JreLShift32(ch2, 8)) + (JreLShift32(ch1, 0));
}


#line 569
jlong ComAowagieTextPdfRandomAccessFileOrArray_readLongLE(ComAowagieTextPdfRandomAccessFileOrArray *self) {
  jint i1 = ComAowagieTextPdfRandomAccessFileOrArray_readIntLE(self);
  jint i2 = ComAowagieTextPdfRandomAccessFileOrArray_readIntLE(self);
  return (JreLShift64((jlong) i2, 32)) + (i1 & (jlong) 0xFFFFFFFFLL);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfRandomAccessFileOrArray)
