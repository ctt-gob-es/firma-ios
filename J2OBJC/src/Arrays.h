//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/util/Arrays.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Arrays")
#ifdef RESTRICT_Arrays
#define INCLUDE_ALL_Arrays 0
#else
#define INCLUDE_ALL_Arrays 1
#endif
#undef RESTRICT_Arrays

#if !defined (OrgSpongycastleUtilArrays_) && (INCLUDE_ALL_Arrays || defined(INCLUDE_OrgSpongycastleUtilArrays))
#define OrgSpongycastleUtilArrays_

@class IOSBooleanArray;
@class IOSByteArray;
@class IOSCharArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@class IOSShortArray;

/*!
 @brief General array utilities.
 */
@interface OrgSpongycastleUtilArrays : NSObject

#pragma mark Public

+ (IOSByteArray *)appendWithByteArray:(IOSByteArray *)a
                             withByte:(jbyte)b;

+ (IOSIntArray *)appendWithIntArray:(IOSIntArray *)a
                            withInt:(jint)b;

+ (IOSShortArray *)appendWithShortArray:(IOSShortArray *)a
                              withShort:(jshort)b;

+ (IOSObjectArray *)appendWithNSStringArray:(IOSObjectArray *)a
                               withNSString:(NSString *)b;

+ (jboolean)areEqualWithBooleanArray:(IOSBooleanArray *)a
                    withBooleanArray:(IOSBooleanArray *)b;

+ (jboolean)areEqualWithByteArray:(IOSByteArray *)a
                    withByteArray:(IOSByteArray *)b;

+ (jboolean)areEqualWithCharArray:(IOSCharArray *)a
                    withCharArray:(IOSCharArray *)b;

+ (jboolean)areEqualWithIntArray:(IOSIntArray *)a
                    withIntArray:(IOSIntArray *)b;

+ (jboolean)areEqualWithLongArray:(IOSLongArray *)a
                    withLongArray:(IOSLongArray *)b;

+ (jboolean)areEqualWithNSObjectArray:(IOSObjectArray *)a
                    withNSObjectArray:(IOSObjectArray *)b;

+ (jboolean)areEqualWithShortArray:(IOSShortArray *)a
                    withShortArray:(IOSShortArray *)b;

+ (IOSObjectArray *)cloneWithJavaMathBigIntegerArray:(IOSObjectArray *)data;

+ (IOSByteArray *)cloneWithByteArray:(IOSByteArray *)data;

+ (IOSByteArray *)cloneWithByteArray:(IOSByteArray *)data
                       withByteArray:(IOSByteArray *)existing;

+ (IOSObjectArray *)cloneWithByteArray2:(IOSObjectArray *)data;

+ (IOSObjectArray *)cloneWithByteArray3:(IOSObjectArray *)data;

+ (IOSCharArray *)cloneWithCharArray:(IOSCharArray *)data;

+ (IOSIntArray *)cloneWithIntArray:(IOSIntArray *)data;

+ (IOSLongArray *)cloneWithLongArray:(IOSLongArray *)data;

+ (IOSLongArray *)cloneWithLongArray:(IOSLongArray *)data
                       withLongArray:(IOSLongArray *)existing;

+ (IOSShortArray *)cloneWithShortArray:(IOSShortArray *)data;

+ (jint)compareUnsignedWithByteArray:(IOSByteArray *)a
                       withByteArray:(IOSByteArray *)b;

+ (IOSByteArray *)concatenateWithByteArray:(IOSByteArray *)a
                             withByteArray:(IOSByteArray *)b;

+ (IOSByteArray *)concatenateWithByteArray:(IOSByteArray *)a
                             withByteArray:(IOSByteArray *)b
                             withByteArray:(IOSByteArray *)c;

+ (IOSByteArray *)concatenateWithByteArray:(IOSByteArray *)a
                             withByteArray:(IOSByteArray *)b
                             withByteArray:(IOSByteArray *)c
                             withByteArray:(IOSByteArray *)d;

+ (IOSByteArray *)concatenateWithByteArray2:(IOSObjectArray *)arrays;

+ (IOSIntArray *)concatenateWithIntArray:(IOSIntArray *)a
                            withIntArray:(IOSIntArray *)b;

/*!
 @brief A constant time equals comparison - does not terminate early if
  test will fail.For best results always pass the expected value
  as the first parameter.
 @param expected first array
 @param supplied second array
 @return true if arrays equal, false otherwise.
 */
+ (jboolean)constantTimeAreEqualWithByteArray:(IOSByteArray *)expected
                                withByteArray:(IOSByteArray *)supplied;

+ (jboolean)containsWithIntArray:(IOSIntArray *)a
                         withInt:(jint)n;

+ (jboolean)containsWithShortArray:(IOSShortArray *)a
                         withShort:(jshort)n;

+ (IOSObjectArray *)copyOfWithJavaMathBigIntegerArray:(IOSObjectArray *)data
                                              withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

+ (IOSByteArray *)copyOfWithByteArray:(IOSByteArray *)data
                              withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

+ (IOSCharArray *)copyOfWithCharArray:(IOSCharArray *)data
                              withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

+ (IOSIntArray *)copyOfWithIntArray:(IOSIntArray *)data
                            withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

+ (IOSLongArray *)copyOfWithLongArray:(IOSLongArray *)data
                              withInt:(jint)newLength OBJC_METHOD_FAMILY_NONE;

+ (IOSObjectArray *)copyOfRangeWithJavaMathBigIntegerArray:(IOSObjectArray *)data
                                                   withInt:(jint)from
                                                   withInt:(jint)to OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Make a copy of a range of bytes from the passed in data array.The range can
  extend beyond the end of the input array, in which case the return array will
  be padded with zeroes.
 @param data the array from which the data is to be copied.
 @param from the start index at which the copying should take place.
 @param to the final index of the range (exclusive).
 @return a new byte array containing the range given.
 */
+ (IOSByteArray *)copyOfRangeWithByteArray:(IOSByteArray *)data
                                   withInt:(jint)from
                                   withInt:(jint)to OBJC_METHOD_FAMILY_NONE;

+ (IOSIntArray *)copyOfRangeWithIntArray:(IOSIntArray *)data
                                 withInt:(jint)from
                                 withInt:(jint)to OBJC_METHOD_FAMILY_NONE;

+ (IOSLongArray *)copyOfRangeWithLongArray:(IOSLongArray *)data
                                   withInt:(jint)from
                                   withInt:(jint)to OBJC_METHOD_FAMILY_NONE;

+ (void)fillWithByteArray:(IOSByteArray *)array
                 withByte:(jbyte)value;

+ (void)fillWithCharArray:(IOSCharArray *)array
                 withChar:(jchar)value;

+ (void)fillWithIntArray:(IOSIntArray *)array
                 withInt:(jint)value;

+ (void)fillWithLongArray:(IOSLongArray *)array
                 withLong:(jlong)value;

+ (void)fillWithShortArray:(IOSShortArray *)array
                 withShort:(jshort)value;

+ (jint)hashCodeWithByteArray:(IOSByteArray *)data;

+ (jint)hashCodeWithByteArray:(IOSByteArray *)data
                      withInt:(jint)off
                      withInt:(jint)len;

+ (jint)hashCodeWithCharArray:(IOSCharArray *)data;

+ (jint)hashCodeWithIntArray:(IOSIntArray *)data;

+ (jint)hashCodeWithIntArray:(IOSIntArray *)data
                     withInt:(jint)off
                     withInt:(jint)len;

+ (jint)hashCodeWithIntArray2:(IOSObjectArray *)ints;

+ (jint)hashCodeWithLongArray:(IOSLongArray *)data;

+ (jint)hashCodeWithLongArray:(IOSLongArray *)data
                      withInt:(jint)off
                      withInt:(jint)len;

+ (jint)hashCodeWithNSObjectArray:(IOSObjectArray *)data;

+ (jint)hashCodeWithShortArray:(IOSShortArray *)data;

+ (jint)hashCodeWithShortArray2:(IOSObjectArray *)shorts;

+ (jint)hashCodeWithShortArray3:(IOSObjectArray *)shorts;

+ (IOSByteArray *)prependWithByteArray:(IOSByteArray *)a
                              withByte:(jbyte)b;

+ (IOSIntArray *)prependWithIntArray:(IOSIntArray *)a
                             withInt:(jint)b;

+ (IOSShortArray *)prependWithShortArray:(IOSShortArray *)a
                               withShort:(jshort)b;

+ (IOSByteArray *)reverseWithByteArray:(IOSByteArray *)a;

+ (IOSIntArray *)reverseWithIntArray:(IOSIntArray *)a;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleUtilArrays)

FOUNDATION_EXPORT jboolean OrgSpongycastleUtilArrays_areEqualWithBooleanArray_withBooleanArray_(IOSBooleanArray *a, IOSBooleanArray *b);

FOUNDATION_EXPORT jboolean OrgSpongycastleUtilArrays_areEqualWithCharArray_withCharArray_(IOSCharArray *a, IOSCharArray *b);

FOUNDATION_EXPORT jboolean OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b);

FOUNDATION_EXPORT jboolean OrgSpongycastleUtilArrays_areEqualWithShortArray_withShortArray_(IOSShortArray *a, IOSShortArray *b);

FOUNDATION_EXPORT jboolean OrgSpongycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(IOSByteArray *expected, IOSByteArray *supplied);

FOUNDATION_EXPORT jboolean OrgSpongycastleUtilArrays_areEqualWithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *b);

FOUNDATION_EXPORT jboolean OrgSpongycastleUtilArrays_areEqualWithLongArray_withLongArray_(IOSLongArray *a, IOSLongArray *b);

FOUNDATION_EXPORT jboolean OrgSpongycastleUtilArrays_areEqualWithNSObjectArray_withNSObjectArray_(IOSObjectArray *a, IOSObjectArray *b);

FOUNDATION_EXPORT jint OrgSpongycastleUtilArrays_compareUnsignedWithByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b);

FOUNDATION_EXPORT jboolean OrgSpongycastleUtilArrays_containsWithShortArray_withShort_(IOSShortArray *a, jshort n);

FOUNDATION_EXPORT jboolean OrgSpongycastleUtilArrays_containsWithIntArray_withInt_(IOSIntArray *a, jint n);

FOUNDATION_EXPORT void OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(IOSByteArray *array, jbyte value);

FOUNDATION_EXPORT void OrgSpongycastleUtilArrays_fillWithCharArray_withChar_(IOSCharArray *array, jchar value);

FOUNDATION_EXPORT void OrgSpongycastleUtilArrays_fillWithLongArray_withLong_(IOSLongArray *array, jlong value);

FOUNDATION_EXPORT void OrgSpongycastleUtilArrays_fillWithShortArray_withShort_(IOSShortArray *array, jshort value);

FOUNDATION_EXPORT void OrgSpongycastleUtilArrays_fillWithIntArray_withInt_(IOSIntArray *array, jint value);

FOUNDATION_EXPORT jint OrgSpongycastleUtilArrays_hashCodeWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT jint OrgSpongycastleUtilArrays_hashCodeWithByteArray_withInt_withInt_(IOSByteArray *data, jint off, jint len);

FOUNDATION_EXPORT jint OrgSpongycastleUtilArrays_hashCodeWithCharArray_(IOSCharArray *data);

FOUNDATION_EXPORT jint OrgSpongycastleUtilArrays_hashCodeWithIntArray2_(IOSObjectArray *ints);

FOUNDATION_EXPORT jint OrgSpongycastleUtilArrays_hashCodeWithIntArray_(IOSIntArray *data);

FOUNDATION_EXPORT jint OrgSpongycastleUtilArrays_hashCodeWithIntArray_withInt_withInt_(IOSIntArray *data, jint off, jint len);

FOUNDATION_EXPORT jint OrgSpongycastleUtilArrays_hashCodeWithLongArray_(IOSLongArray *data);

FOUNDATION_EXPORT jint OrgSpongycastleUtilArrays_hashCodeWithLongArray_withInt_withInt_(IOSLongArray *data, jint off, jint len);

FOUNDATION_EXPORT jint OrgSpongycastleUtilArrays_hashCodeWithShortArray3_(IOSObjectArray *shorts);

FOUNDATION_EXPORT jint OrgSpongycastleUtilArrays_hashCodeWithShortArray2_(IOSObjectArray *shorts);

FOUNDATION_EXPORT jint OrgSpongycastleUtilArrays_hashCodeWithShortArray_(IOSShortArray *data);

FOUNDATION_EXPORT jint OrgSpongycastleUtilArrays_hashCodeWithNSObjectArray_(IOSObjectArray *data);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilArrays_cloneWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT IOSCharArray *OrgSpongycastleUtilArrays_cloneWithCharArray_(IOSCharArray *data);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilArrays_cloneWithByteArray_withByteArray_(IOSByteArray *data, IOSByteArray *existing);

FOUNDATION_EXPORT IOSObjectArray *OrgSpongycastleUtilArrays_cloneWithByteArray2_(IOSObjectArray *data);

FOUNDATION_EXPORT IOSObjectArray *OrgSpongycastleUtilArrays_cloneWithByteArray3_(IOSObjectArray *data);

FOUNDATION_EXPORT IOSIntArray *OrgSpongycastleUtilArrays_cloneWithIntArray_(IOSIntArray *data);

FOUNDATION_EXPORT IOSLongArray *OrgSpongycastleUtilArrays_cloneWithLongArray_(IOSLongArray *data);

FOUNDATION_EXPORT IOSLongArray *OrgSpongycastleUtilArrays_cloneWithLongArray_withLongArray_(IOSLongArray *data, IOSLongArray *existing);

FOUNDATION_EXPORT IOSShortArray *OrgSpongycastleUtilArrays_cloneWithShortArray_(IOSShortArray *data);

FOUNDATION_EXPORT IOSObjectArray *OrgSpongycastleUtilArrays_cloneWithJavaMathBigIntegerArray_(IOSObjectArray *data);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilArrays_copyOfWithByteArray_withInt_(IOSByteArray *data, jint newLength);

FOUNDATION_EXPORT IOSCharArray *OrgSpongycastleUtilArrays_copyOfWithCharArray_withInt_(IOSCharArray *data, jint newLength);

FOUNDATION_EXPORT IOSIntArray *OrgSpongycastleUtilArrays_copyOfWithIntArray_withInt_(IOSIntArray *data, jint newLength);

FOUNDATION_EXPORT IOSLongArray *OrgSpongycastleUtilArrays_copyOfWithLongArray_withInt_(IOSLongArray *data, jint newLength);

FOUNDATION_EXPORT IOSObjectArray *OrgSpongycastleUtilArrays_copyOfWithJavaMathBigIntegerArray_withInt_(IOSObjectArray *data, jint newLength);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(IOSByteArray *data, jint from, jint to);

FOUNDATION_EXPORT IOSIntArray *OrgSpongycastleUtilArrays_copyOfRangeWithIntArray_withInt_withInt_(IOSIntArray *data, jint from, jint to);

FOUNDATION_EXPORT IOSLongArray *OrgSpongycastleUtilArrays_copyOfRangeWithLongArray_withInt_withInt_(IOSLongArray *data, jint from, jint to);

FOUNDATION_EXPORT IOSObjectArray *OrgSpongycastleUtilArrays_copyOfRangeWithJavaMathBigIntegerArray_withInt_withInt_(IOSObjectArray *data, jint from, jint to);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilArrays_appendWithByteArray_withByte_(IOSByteArray *a, jbyte b);

FOUNDATION_EXPORT IOSShortArray *OrgSpongycastleUtilArrays_appendWithShortArray_withShort_(IOSShortArray *a, jshort b);

FOUNDATION_EXPORT IOSIntArray *OrgSpongycastleUtilArrays_appendWithIntArray_withInt_(IOSIntArray *a, jint b);

FOUNDATION_EXPORT IOSObjectArray *OrgSpongycastleUtilArrays_appendWithNSStringArray_withNSString_(IOSObjectArray *a, NSString *b);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilArrays_concatenateWithByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b, IOSByteArray *c);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b, IOSByteArray *c, IOSByteArray *d);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilArrays_concatenateWithByteArray2_(IOSObjectArray *arrays);

FOUNDATION_EXPORT IOSIntArray *OrgSpongycastleUtilArrays_concatenateWithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *b);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilArrays_prependWithByteArray_withByte_(IOSByteArray *a, jbyte b);

FOUNDATION_EXPORT IOSShortArray *OrgSpongycastleUtilArrays_prependWithShortArray_withShort_(IOSShortArray *a, jshort b);

FOUNDATION_EXPORT IOSIntArray *OrgSpongycastleUtilArrays_prependWithIntArray_withInt_(IOSIntArray *a, jint b);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilArrays_reverseWithByteArray_(IOSByteArray *a);

FOUNDATION_EXPORT IOSIntArray *OrgSpongycastleUtilArrays_reverseWithIntArray_(IOSIntArray *a);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleUtilArrays)

#endif

#if !defined (OrgSpongycastleUtilArrays_Iterator_) && (INCLUDE_ALL_Arrays || defined(INCLUDE_OrgSpongycastleUtilArrays_Iterator))
#define OrgSpongycastleUtilArrays_Iterator_

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@class IOSObjectArray;
@protocol JavaUtilFunctionConsumer;

/*!
 @brief Iterator backed by a specific array.
 */
@interface OrgSpongycastleUtilArrays_Iterator : NSObject < JavaUtilIterator >

#pragma mark Public

/*!
 @brief Base constructor.
 <p>
  Note: the array is not cloned, changes to it will affect the values returned by next(). 
 </p>
 @param dataArray array backing the iterator.
 */
- (instancetype)initWithNSObjectArray:(IOSObjectArray *)dataArray;

- (jboolean)hasNext;

- (id)next;

- (void)remove;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleUtilArrays_Iterator)

FOUNDATION_EXPORT void OrgSpongycastleUtilArrays_Iterator_initWithNSObjectArray_(OrgSpongycastleUtilArrays_Iterator *self, IOSObjectArray *dataArray);

FOUNDATION_EXPORT OrgSpongycastleUtilArrays_Iterator *new_OrgSpongycastleUtilArrays_Iterator_initWithNSObjectArray_(IOSObjectArray *dataArray) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleUtilArrays_Iterator *create_OrgSpongycastleUtilArrays_Iterator_initWithNSObjectArray_(IOSObjectArray *dataArray);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleUtilArrays_Iterator)

#endif

#pragma pop_macro("INCLUDE_ALL_Arrays")
