//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/cms/CMSSignedDataGenerator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CMSSignedDataGenerator")
#ifdef RESTRICT_CMSSignedDataGenerator
#define INCLUDE_ALL_CMSSignedDataGenerator 0
#else
#define INCLUDE_ALL_CMSSignedDataGenerator 1
#endif
#undef RESTRICT_CMSSignedDataGenerator

#if !defined (OrgSpongycastleCmsCMSSignedDataGenerator_) && (INCLUDE_ALL_CMSSignedDataGenerator || defined(INCLUDE_OrgSpongycastleCmsCMSSignedDataGenerator))
#define OrgSpongycastleCmsCMSSignedDataGenerator_

#define RESTRICT_CMSSignedGenerator 1
#define INCLUDE_OrgSpongycastleCmsCMSSignedGenerator 1
#include "CMSSignedGenerator.h"

@class OrgSpongycastleCmsCMSSignedData;
@class OrgSpongycastleCmsSignerInformation;
@class OrgSpongycastleCmsSignerInformationStore;
@protocol OrgSpongycastleCmsCMSTypedData;

/*!
 @brief general class for generating a pkcs7-signature message.
 <p>
  A simple example of usage, generating a detached signature. 
 @code

       List             certList = new ArrayList();
       CMSTypedData     msg = new CMSProcessableByteArray("Hello world!".getBytes());
       certList.add(signCert);
       Store           certs = new JcaCertStore(certList);
       CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
       ContentSigner sha1Signer = new JcaContentSignerBuilder("SHA1withRSA").setProvider("SC").build(signKP.getPrivate());
       gen.addSignerInfoGenerator(
                 new JcaSignerInfoGeneratorBuilder(
                      new JcaDigestCalculatorProviderBuilder().setProvider("SC").build())
                      .build(sha1Signer, signCert));
       gen.addCertificates(certs);
       CMSSignedData sigData = gen.generate(msg, false); 
  
@endcode
 */
@interface OrgSpongycastleCmsCMSSignedDataGenerator : OrgSpongycastleCmsCMSSignedGenerator

#pragma mark Public

/*!
 @brief base constructor
 */
- (instancetype)init;

/*!
 @brief Generate a CMS Signed Data object carrying a detached CMS signature.
 @param content the content to be signed.
 */
- (OrgSpongycastleCmsCMSSignedData *)generateWithOrgSpongycastleCmsCMSTypedData:(id<OrgSpongycastleCmsCMSTypedData>)content;

/*!
 @brief Generate a CMS Signed Data object which can be carrying a detached CMS signature, or have encapsulated data, depending on the value
  of the encapsulated parameter.
 @param content the content to be signed.
 @param encapsulate true if the content should be encapsulated in the signature, false otherwise.
 */
- (OrgSpongycastleCmsCMSSignedData *)generateWithOrgSpongycastleCmsCMSTypedData:(id<OrgSpongycastleCmsCMSTypedData>)content
                                                                    withBoolean:(jboolean)encapsulate;

/*!
 @brief generate a set of one or more SignerInformation objects representing counter signatures on
  the passed in SignerInformation object.
 @param signer the signer to be countersigned
 @return a store containing the signers.
 */
- (OrgSpongycastleCmsSignerInformationStore *)generateCounterSignersWithOrgSpongycastleCmsSignerInformation:(OrgSpongycastleCmsSignerInformation *)signer;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCmsCMSSignedDataGenerator)

FOUNDATION_EXPORT void OrgSpongycastleCmsCMSSignedDataGenerator_init(OrgSpongycastleCmsCMSSignedDataGenerator *self);

FOUNDATION_EXPORT OrgSpongycastleCmsCMSSignedDataGenerator *new_OrgSpongycastleCmsCMSSignedDataGenerator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCmsCMSSignedDataGenerator *create_OrgSpongycastleCmsCMSSignedDataGenerator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCmsCMSSignedDataGenerator)

#endif

#pragma pop_macro("INCLUDE_ALL_CMSSignedDataGenerator")
