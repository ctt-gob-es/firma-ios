//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/protocol/UrlParametersToSignAndSave.java
//

#include "AOUtil.h"
#include "ExtraParamsProcessor.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParameterException.h"
#include "ParameterLocalAccessRequestedException.h"
#include "ProtocolVersion.h"
#include "UrlParameters.h"
#include "UrlParametersToSignAndSave.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/net/URL.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/logging/Logger.h"

#if !__has_feature(objc_arc)
#error "UrlParametersToSignAndSave must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave () {
 @public
  NSString *operation_;
  NSString *signFormat_;
  NSString *signAlgorithm_;
  /*!
   @brief Indica si la operaci&oacute;n requiere de los servicios de comunicaci&oacute;n.
   */
  jboolean servicesRequired_;
  /*!
   @brief Versi&oacute;n m&iacute;nima del protocolo que define los requisitos
  de esta operaci&oacute;n.
   */
  NSString *minimumProtocolVersion_;
  /*!
   @brief Opci&oacute;n de configuraci&oacute;n que determina si se debe mantener
  el primer certificado seleccionado para todas las operaciones.
   */
  jboolean sticky_;
  /*!
   @brief Opci&oacute;n de configuraci&oacute;n que determina si se debe ignorar
  cualquier certificado prefijado.
   */
  jboolean resetSticky_;
  /*!
   @brief Colecci&oacute;n con los par&aacute;metros no reconocidos (podr&iacute;an reconocerlos los <i>plugins</i>).
   */
  id<JavaUtilMap> anotherParams_;
}

/*!
 @brief Busca un elemento dentro de un listado.
 @param elements Elementos entre los que buscar.
 @param targetElement Elemento buscado.
 @return <code>true</code> si el elemento estaba en el listado, <code>false</code> en caso contrario.
 */
+ (jboolean)containsWithNSStringArray:(IOSObjectArray *)elements
                         withNSString:(NSString *)targetElement;

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, operation_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, signFormat_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, signAlgorithm_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, minimumProtocolVersion_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, anotherParams_, id<JavaUtilMap>)

/*!
 @brief Par&aacute;metro de entrada con el formato de firma.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_get_CRYPTO_OPERATION_PARAM(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_CRYPTO_OPERATION_PARAM = @"cop";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, CRYPTO_OPERATION_PARAM, NSString *)

/*!
 @brief Par&aacute;metro de entrada con el formato de firma.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_get_FORMAT_PARAM(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_FORMAT_PARAM = @"format";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, FORMAT_PARAM, NSString *)

/*!
 @brief Par&aacute;metro de entrada con el algoritmo de firma.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_get_ALGORITHM_PARAM(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_ALGORITHM_PARAM = @"algorithm";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, ALGORITHM_PARAM, NSString *)

/*!
 @brief Par&aacute;metro de entrada con el nombre propuesto para un fichero.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_get_FILENAME_PARAM(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_FILENAME_PARAM = @"filename";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, FILENAME_PARAM, NSString *)

/*!
 @brief Par&aacute;metro de entrada con el identificador del documento.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_get_ID_PARAM(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_ID_PARAM = @"id";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, ID_PARAM, NSString *)

/*!
 @brief Par&aacute;metro de entrada con la m&iacute;nima versi&oacute;n requerida del aplicativo
  a usar en la invocaci&oacute;n por protocolo.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_get_VER_PARAM(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_VER_PARAM = @"ver";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, VER_PARAM, NSString *)

/*!
 @brief Par&aacute;metro de entrada que nos dice si tenemos que usar un provatekeyentry fijado o fijar uno nuevo.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_get_STICKY_PARAM(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_STICKY_PARAM = @"sticky";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, STICKY_PARAM, NSString *)

/*!
 @brief Par&aacute;metro de entrada que nos dice si tenemos que ignorar
  cla <code>PrivateKeyEntry</code> fijada.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_get_RESET_STICKY_PARAM(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_RESET_STICKY_PARAM = @"resetsticky";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, RESET_STICKY_PARAM, NSString *)

/*!
 @brief Par&aacute;metros reconocidos.Se utilizaran para identificar los parametros desconocidos
  introducidos por el JavaScript.
 */
inline IOSObjectArray *EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_get_KNOWN_PARAMETERS(void);
static IOSObjectArray *EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_KNOWN_PARAMETERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, KNOWN_PARAMETERS, IOSObjectArray *)

/*!
 @brief Algoritmos de firma soportados.
 */
inline id<JavaUtilSet> EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_get_SUPPORTED_SIGNATURE_ALGORITHMS(void);
static id<JavaUtilSet> EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_SUPPORTED_SIGNATURE_ALGORITHMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, SUPPORTED_SIGNATURE_ALGORITHMS, id<JavaUtilSet>)

__attribute__((unused)) static jboolean EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_containsWithNSStringArray_withNSString_(IOSObjectArray *elements, NSString *targetElement);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/protocol/UrlParametersToSignAndSave.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave)


#line 26
@implementation EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 106
- (instancetype)init {
  EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 117
- (instancetype)initWithBoolean:(jboolean)servicesRequired {
  EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_initWithBoolean_(self, servicesRequired);
  return self;
}


#line 126
- (NSString *)getMinimumProtocolVersion {
  return self->minimumProtocolVersion_;
}


#line 132
- (NSString *)getOperation {
  return self->operation_;
}


#line 138
- (NSString *)getSignatureFormat {
  return self->signFormat_;
}


#line 144
- (NSString *)getSignatureAlgorithm {
  return self->signAlgorithm_;
}

- (void)setOperationWithNSString:(NSString *)operation {
  self->operation_ = operation;
}


#line 154
- (void)setSignFormatWithNSString:(NSString *)format {
  self->signFormat_ = format;
}

- (void)setSignAlgorithmWithNSString:(NSString *)algo {
  self->signAlgorithm_ = algo;
}

- (void)setMinimumProtocolVersionWithNSString:(NSString *)minVer {
  self->minimumProtocolVersion_ = minVer;
}


#line 170
- (jboolean)getSticky {
  return self->sticky_;
}


#line 178
- (void)setStickyWithBoolean:(jboolean)sticky {
  self->sticky_ = sticky;
}


#line 186
- (void)setResetStickyWithBoolean:(jboolean)resetSticky {
  self->resetSticky_ = resetSticky;
}


#line 194
- (jboolean)getResetSticky {
  return self->resetSticky_;
}


#line 202
- (void)setSignAndSaveParametersWithJavaUtilMap:(id<JavaUtilMap>)params {
  
#line 205
  NSString *sessionId = nil;
  if ([((id<JavaUtilMap>) nil_chk(params)) containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_ID_PARAM]) {
    sessionId = [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_ID_PARAM];
  }
  else if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_FILE_ID_PARAM]) {
    sessionId = [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_FILE_ID_PARAM];
  }
  
#line 213
  if (sessionId != nil) {
    if ([sessionId java_length] > EsGobAfirmaCoreMiscProtocolUrlParameters_MAX_ID_LENGTH) {
      @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(JreStrcat("$I$", @"La longitud del identificador de la operacion es mayor de ", EsGobAfirmaCoreMiscProtocolUrlParameters_MAX_ID_LENGTH, @" caracteres."));
    }
    {
      IOSCharArray *a__ =
#line 219
      [((NSString *) nil_chk([sessionId java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)])) java_toCharArray];
      jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
      jchar const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jchar c = *b__++;
        
#line 220
        if ((c < 'a' || c > 'z') && (c < '0' || c > '9')) {
          @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(@"El identificador de la firma debe ser alfanumerico.");
        }
      }
    }
    [self setSessionIdWithNSString:sessionId];
  }
  
#line 229
  if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_VER_PARAM]) {
    [self setMinimumProtocolVersionWithNSString:[params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_VER_PARAM]];
  }
  else {
    [self setMinimumProtocolVersionWithNSString:JavaLangInteger_toStringWithInt_([((EsGobAfirmaCoreMiscProtocolProtocolVersion *) nil_chk(JreLoadEnum(EsGobAfirmaCoreMiscProtocolProtocolVersion, VERSION_0))) getVersion])];
  }
  
#line 237
  NSString *op = [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_CRYPTO_OPERATION_PARAM];
  [self setOperationWithNSString:op];
  
#line 242
  if ([self getFileId] != nil) {
    return;
  }
  
#line 247
  if (self->servicesRequired_) {
    if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_STORAGE_SERVLET_PARAM]) {
      
#line 251
      JavaNetURL *storageServletUrl;
      @try {
        storageServletUrl = EsGobAfirmaCoreMiscProtocolUrlParameters_validateURLWithNSString_([params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_STORAGE_SERVLET_PARAM]);
      }
      @catch (EsGobAfirmaCoreMiscProtocolParameterLocalAccessRequestedException *e) {
        @throw new_EsGobAfirmaCoreMiscProtocolParameterLocalAccessRequestedException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"La URL del servicio de guardado no puede ser local: ",
#line 257
        e), e);
      }
      @catch (
#line 260
      EsGobAfirmaCoreMiscProtocolParameterException *e) {
        @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error al validar la URL del servicio de guardado: ", e), e);
      }
      [self setStorageServletUrlWithJavaNetURL:storageServletUrl];
    }
    else
#line 266
    if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_ID_PARAM]) {
      @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(@"No se ha recibido la direccion del servlet para el guardado del resultado de la operacion");
    }
  }
  
#line 272
  if (![params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_FORMAT_PARAM]) {
    @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(@"No se ha recibido el formato de firma");
  }
  
#line 276
  NSString *format = [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_FORMAT_PARAM];
  [self setSignFormatWithNSString:format];
  
#line 280
  if (![params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_ALGORITHM_PARAM]) {
    @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(@"No se ha recibido el algoritmo de firma");
  }
  NSString *algo = [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_ALGORITHM_PARAM];
  if (![((id<JavaUtilSet>) nil_chk(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_SUPPORTED_SIGNATURE_ALGORITHMS)) containsWithId:algo]) {
    @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(JreStrcat("$$", @"Algoritmo de firma no soportado: ", algo));
  }
  
#line 288
  [self setSignAlgorithmWithNSString:algo];
  
#line 290
  NSString *props = nil;
  if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_PROPERTIES_PARAM]) {
    props = [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_PROPERTIES_PARAM];
  }
  
#line 295
  if (props != nil && ![props java_isEmpty]) {
    @try {
      [self setExtraParamsWithJavaUtilProperties:EsGobAfirmaCoreMiscAOUtil_base642PropertiesWithNSString_(props)];
    }
    @catch (JavaLangException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(EsGobAfirmaCoreMiscProtocolUrlParameters, LOGGER))) severeWithNSString:JreStrcat("$$$@", @"Las propiedades adicionales indicadas en el parametro '",
#line 301
      EsGobAfirmaCoreMiscProtocolUrlParameters_PROPERTIES_PARAM, @"' no se han podido cargar: ", e)];
      
#line 303
      [self setExtraParamsWithJavaUtilProperties:new_JavaUtilProperties_init()];
    }
  }
  else {
    [self setExtraParamsWithJavaUtilProperties:new_JavaUtilProperties_init()];
  }
  
#line 311
  if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_STICKY_PARAM]) {
    [self setStickyWithBoolean:JavaLangBoolean_parseBooleanWithNSString_([params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_STICKY_PARAM])];
  }
  else {
    [self setStickyWithBoolean:false];
  }
  
#line 319
  if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_RESET_STICKY_PARAM]) {
    [self setResetStickyWithBoolean:JavaLangBoolean_parseBooleanWithNSString_([params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_RESET_STICKY_PARAM])];
  }
  else {
    [self setResetStickyWithBoolean:false];
  }
  
#line 326
  [self setDefaultKeyStoreWithNSString:EsGobAfirmaCoreMiscProtocolUrlParameters_getKeyStoreNameWithJavaUtilMap_(params)];
  [self setDefaultKeyStoreLibWithNSString:EsGobAfirmaCoreMiscProtocolUrlParameters_getDefaultKeyStoreLibWithJavaUtilMap_(params)];
  
#line 330
  if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_FILENAME_PARAM]) {
    NSString *filename = [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_FILENAME_PARAM];
    {
      IOSCharArray *a__ = [@"\\/:*?\"<>|" java_toCharArray];
      jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
      jchar const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jchar invalidChar = *b__++;
        
#line 334
        if ([((NSString *) nil_chk(filename)) java_indexOf:invalidChar] != -1) {
          @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(JreStrcat("$C", @"Se ha indicado un nombre de fichero con el caracter invalido: ",
#line 336
          invalidChar));
        }
      }
    }
    [self setFilenameWithNSString:[params getWithId:EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_FILENAME_PARAM]];
  }
}


#line 349
- (void)expandExtraParams {
  [self setExtraParamsWithJavaUtilProperties:EsGobAfirmaCoreSignersExtraParamsProcessor_expandPropertiesWithJavaUtilProperties_withByteArray_withNSString_(
#line 352
  [self getExtraParams],
#line 353
  self->data_,
#line 354
  [self getSignatureFormat])];
}


#line 364
- (id<JavaUtilMap>)getAnotherParams {
  return self->anotherParams_;
}


#line 372
- (void)setAnotherParamsWithJavaUtilMap:(id<JavaUtilMap>)params {
  {
    IOSObjectArray *a__ = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(params)) keySet])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSString_class_()]];
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *key = *b__++;
      
#line 375
      if (!EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_containsWithNSStringArray_withNSString_(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_KNOWN_PARAMETERS, key)) {
        (void) [((id<JavaUtilMap>) nil_chk(self->anotherParams_)) putWithId:key withId:[params getWithId:key]];
      }
    }
  }
}


#line 387
+ (jboolean)containsWithNSStringArray:(IOSObjectArray *)elements
                         withNSString:(NSString *)targetElement {
  return EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_containsWithNSStringArray_withNSString_(elements, targetElement);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 10, 11, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 12, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 13, -1, -1 },
    { NULL, "V", 0x1, 14, 9, -1, 11, -1, -1 },
    { NULL, "Z", 0xa, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithBoolean:);
  methods[2].selector = @selector(getMinimumProtocolVersion);
  methods[3].selector = @selector(getOperation);
  methods[4].selector = @selector(getSignatureFormat);
  methods[5].selector = @selector(getSignatureAlgorithm);
  methods[6].selector = @selector(setOperationWithNSString:);
  methods[7].selector = @selector(setSignFormatWithNSString:);
  methods[8].selector = @selector(setSignAlgorithmWithNSString:);
  methods[9].selector = @selector(setMinimumProtocolVersionWithNSString:);
  methods[10].selector = @selector(getSticky);
  methods[11].selector = @selector(setStickyWithBoolean:);
  methods[12].selector = @selector(setResetStickyWithBoolean:);
  methods[13].selector = @selector(getResetSticky);
  methods[14].selector = @selector(setSignAndSaveParametersWithJavaUtilMap:);
  methods[15].selector = @selector(expandExtraParams);
  methods[16].selector = @selector(getAnotherParams);
  methods[17].selector = @selector(setAnotherParamsWithJavaUtilMap:);
  methods[18].selector = @selector(containsWithNSStringArray:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CRYPTO_OPERATION_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "FORMAT_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "ALGORITHM_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "FILENAME_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "ID_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "VER_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "STICKY_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "RESET_STICKY_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "KNOWN_PARAMETERS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "SUPPORTED_SIGNATURE_ALGORITHMS", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 26, 27, -1 },
    { "operation_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "signFormat_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "signAlgorithm_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "servicesRequired_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "minimumProtocolVersion_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sticky_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "resetSticky_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "anotherParams_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 28, -1 },
  };
  static const void *ptrTable[] = { "Z", "setOperation", "LNSString;", "setSignFormat", "setSignAlgorithm", "setMinimumProtocolVersion", "setSticky", "setResetSticky", "setSignAndSaveParameters", "LJavaUtilMap;", "LEsGobAfirmaCoreMiscProtocolParameterException;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "LEsGobAfirmaCoreSignersExtraParamsProcessor_IncompatiblePolicyException;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "setAnotherParams", "contains", "[LNSString;LNSString;", &EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_CRYPTO_OPERATION_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_FORMAT_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_ALGORITHM_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_FILENAME_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_ID_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_VER_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_STICKY_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_RESET_STICKY_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_KNOWN_PARAMETERS, &EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_SUPPORTED_SIGNATURE_ALGORITHMS, "Ljava/util/Set<Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave = { "UrlParametersToSignAndSave", "es.gob.afirma.core.misc.protocol", ptrTable, methods, fields, 7, 0x11, 19, 18, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave;
}

+ (void)initialize {
  if (self == [EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave class]) {
    EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_KNOWN_PARAMETERS = [IOSObjectArray newArrayWithObjects:(id[]){
#line 59
      EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_CRYPTO_OPERATION_PARAM, EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_FORMAT_PARAM, EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_ALGORITHM_PARAM, EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_FILENAME_PARAM, EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_ID_PARAM,
#line 60
      EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_VER_PARAM, EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_STICKY_PARAM, EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_RESET_STICKY_PARAM, EsGobAfirmaCoreMiscProtocolUrlParameters_PROPERTIES_PARAM, EsGobAfirmaCoreMiscProtocolUrlParameters_DATA_PARAM,
#line 61
      EsGobAfirmaCoreMiscProtocolUrlParameters_GZIPPED_DATA_PARAM, EsGobAfirmaCoreMiscProtocolUrlParameters_RETRIEVE_SERVLET_PARAM, EsGobAfirmaCoreMiscProtocolUrlParameters_STORAGE_SERVLET_PARAM, EsGobAfirmaCoreMiscProtocolUrlParameters_KEY_PARAM,
#line 62
      EsGobAfirmaCoreMiscProtocolUrlParameters_FILE_ID_PARAM, EsGobAfirmaCoreMiscProtocolUrlParameters_KEYSTORE_OLD_PARAM, EsGobAfirmaCoreMiscProtocolUrlParameters_KEYSTORE_PARAM, EsGobAfirmaCoreMiscProtocolUrlParameters_ACTIVE_WAITING_PARAM,
#line 63
      EsGobAfirmaCoreMiscProtocolUrlParameters_MINIMUM_CLIENT_VERSION_PARAM } count:19 type:NSString_class_()];
      EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_SUPPORTED_SIGNATURE_ALGORITHMS = new_JavaUtilHashSet_init();
      {
        
#line 69
        [EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_SUPPORTED_SIGNATURE_ALGORITHMS addWithId:@"SHA1"];
        [EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_SUPPORTED_SIGNATURE_ALGORITHMS addWithId:@"SHA256"];
        [EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_SUPPORTED_SIGNATURE_ALGORITHMS addWithId:@"SHA384"];
        [EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_SUPPORTED_SIGNATURE_ALGORITHMS addWithId:@"SHA512"];
        [EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_SUPPORTED_SIGNATURE_ALGORITHMS addWithId:@"SHA1withRSA"];
        [EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_SUPPORTED_SIGNATURE_ALGORITHMS addWithId:@"SHA256withRSA"];
        [EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_SUPPORTED_SIGNATURE_ALGORITHMS addWithId:@"SHA384withRSA"];
        [EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_SUPPORTED_SIGNATURE_ALGORITHMS addWithId:@"SHA512withRSA"];
      }
      J2OBJC_SET_INITIALIZED(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave)
    }
  }

@end


#line 106
void EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_init(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave *self) {
  EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_initWithBoolean_(self, false);
}


#line 106
EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave *new_EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, init)
}


#line 106
EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave *create_EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, init)
}


#line 117
void EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_initWithBoolean_(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave *self, jboolean servicesRequired) {
  EsGobAfirmaCoreMiscProtocolUrlParameters_init(self);
  self->anotherParams_ = new_JavaUtilHashMap_init();
  
#line 118
  self->servicesRequired_ = servicesRequired;
  [self setDataWithByteArray:nil];
  [self setFileIdWithNSString:nil];
  [self setRetrieveServletUrlWithJavaNetURL:nil];
}


#line 117
EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave *new_EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_initWithBoolean_(jboolean servicesRequired) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, initWithBoolean_, servicesRequired)
}


#line 117
EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave *create_EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_initWithBoolean_(jboolean servicesRequired) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave, initWithBoolean_, servicesRequired)
}


#line 387
jboolean EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_containsWithNSStringArray_withNSString_(IOSObjectArray *elements, NSString *targetElement) {
  EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave_initialize();
  {
    IOSObjectArray *a__ =
#line 388
    elements;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *element = *b__++;
      
#line 389
      if ([((NSString *) nil_chk(targetElement)) isEqual:element]) {
        return true;
      }
    }
  }
  
#line 393
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreMiscProtocolUrlParametersToSignAndSave)
