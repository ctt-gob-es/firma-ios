//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfEncodings.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_PdfEncodings")
#ifdef RESTRICT_PdfEncodings
#define INCLUDE_ALL_PdfEncodings 0
#else
#define INCLUDE_ALL_PdfEncodings 1
#endif
#undef RESTRICT_PdfEncodings

#if !defined (ComAowagieTextPdfPdfEncodings_) && (INCLUDE_ALL_PdfEncodings || defined(INCLUDE_ComAowagieTextPdfPdfEncodings))
#define ComAowagieTextPdfPdfEncodings_

@class ComAowagieTextPdfIntHashtable;
@class IOSByteArray;

/*!
 @brief Supports fast encodings for winansi and PDFDocEncoding.
 Supports conversions from CJK encodings to CID.
  Supports custom encodings.
 @author Paulo Soares (psoares@@consiste.pt)
 */
@interface ComAowagieTextPdfPdfEncodings : NSObject

#pragma mark Public

/*!
 @brief Converts a <CODE>String</CODE> to a <CODE>byte</CODE> array according
  to the font's encoding.
 @return an array of <CODE>byte</CODE> representing the conversion according to the font's encoding
 @param encoding the encoding
 @param char1 the  <CODE> char </CODE>  to be converted
 */
+ (IOSByteArray *)convertToBytesWithChar:(jchar)char1
                            withNSString:(NSString *)encoding;

/*!
 @brief Converts a <CODE>String</CODE> to a <CODE>byte</CODE> array according
  to the font's encoding.
 @return an array of <CODE>byte</CODE> representing the conversion according to the font's encoding
 @param encoding the encoding
 @param text the  <CODE> String </CODE>  to be converted
 */
+ (IOSByteArray *)convertToBytesWithNSString:(NSString *)text
                                withNSString:(NSString *)encoding;

/*!
 @brief Converts a <CODE>byte</CODE> array to a <CODE>String</CODE> according
  to the some encoding.
 @param bytes the bytes to convert
 @param encoding the encoding
 @return the converted <CODE>String</CODE>
 */
+ (NSString *)convertToStringWithByteArray:(IOSByteArray *)bytes
                              withNSString:(NSString *)encoding;

/*!
 @brief Checks is <CODE>text</CODE> only has PdfDocEncoding characters.
 @param text the  <CODE> String </CODE>  to test
 @return <CODE>true</CODE> if only PdfDocEncoding characters are present
 */
+ (jboolean)isPdfDocEncodingWithNSString:(NSString *)text;

#pragma mark Package-Private

- (instancetype)initPackagePrivate;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfPdfEncodings)

inline ComAowagieTextPdfIntHashtable *ComAowagieTextPdfPdfEncodings_get_winansi(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComAowagieTextPdfIntHashtable *ComAowagieTextPdfPdfEncodings_winansi;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfEncodings, winansi, ComAowagieTextPdfIntHashtable *)

FOUNDATION_EXPORT void ComAowagieTextPdfPdfEncodings_initPackagePrivate(ComAowagieTextPdfPdfEncodings *self);

FOUNDATION_EXPORT ComAowagieTextPdfPdfEncodings *new_ComAowagieTextPdfPdfEncodings_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfEncodings *create_ComAowagieTextPdfPdfEncodings_initPackagePrivate(void);

FOUNDATION_EXPORT IOSByteArray *ComAowagieTextPdfPdfEncodings_convertToBytesWithNSString_withNSString_(NSString *text, NSString *encoding);

FOUNDATION_EXPORT IOSByteArray *ComAowagieTextPdfPdfEncodings_convertToBytesWithChar_withNSString_(jchar char1, NSString *encoding);

FOUNDATION_EXPORT NSString *ComAowagieTextPdfPdfEncodings_convertToStringWithByteArray_withNSString_(IOSByteArray *bytes, NSString *encoding);

FOUNDATION_EXPORT jboolean ComAowagieTextPdfPdfEncodings_isPdfDocEncodingWithNSString_(NSString *text);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfEncodings)

#endif

#pragma pop_macro("INCLUDE_ALL_PdfEncodings")
