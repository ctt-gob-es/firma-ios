//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/ExceptionConverter.java
//

#include "ExceptionConverter.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"

#if !__has_feature(objc_arc)
#error "ExceptionConverter must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextExceptionConverter () {
 @public
  /*!
   @brief we keep a handle to the wrapped exception
   */
  JavaLangException *ex_;
  /*!
   @brief prefix for the exception
   */
  NSString *prefix_;
}

@end

J2OBJC_FIELD_SETTER(ComAowagieTextExceptionConverter, ex_, JavaLangException *)
J2OBJC_FIELD_SETTER(ComAowagieTextExceptionConverter, prefix_, NSString *)

inline jlong ComAowagieTextExceptionConverter_get_serialVersionUID(void);
#define ComAowagieTextExceptionConverter_serialVersionUID 8657630363395849399LL
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextExceptionConverter, serialVersionUID, jlong)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/ExceptionConverter.java"


#line 60
@implementation ComAowagieTextExceptionConverter


#line 71
- (instancetype)initWithJavaLangException:(JavaLangException *)ex {
  ComAowagieTextExceptionConverter_initWithJavaLangException_(self, ex);
  return self;
}


#line 84
+ (JavaLangRuntimeException *)convertExceptionWithJavaLangException:(JavaLangException *)ex {
  return ComAowagieTextExceptionConverter_convertExceptionWithJavaLangException_(ex);
}


#line 95
- (JavaLangException *)getException {
  return ex_;
}


#line 103
- (NSString *)getMessage {
  return [((JavaLangException *) nil_chk(ex_)) getMessage];
}


#line 111
- (NSString *)getLocalizedMessage {
  return [((JavaLangException *) nil_chk(ex_)) getLocalizedMessage];
}


#line 119
- (NSString *)description {
  return JreStrcat("$@", prefix_, ex_);
}


#line 124
- (void)printStackTrace {
  [self printStackTraceWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, err)];
}


#line 133
- (void)printStackTraceWithJavaIoPrintStream:(JavaIoPrintStream *)s {
  @synchronized(s) {
    [((JavaIoPrintStream *) nil_chk(s)) printWithNSString:prefix_];
    [((JavaLangException *) nil_chk(ex_)) printStackTraceWithJavaIoPrintStream:s];
  }
}


#line 144
- (void)printStackTraceWithJavaIoPrintWriter:(JavaIoPrintWriter *)s {
  @synchronized(s) {
    [((JavaIoPrintWriter *) nil_chk(s)) printWithNSString:prefix_];
    [((JavaLangException *) nil_chk(ex_)) printStackTraceWithJavaIoPrintWriter:s];
  }
}


#line 157
- (JavaLangThrowable *)fillInStackTrace {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangRuntimeException;", 0x19, 1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangException;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangException:);
  methods[1].selector = @selector(convertExceptionWithJavaLangException:);
  methods[2].selector = @selector(getException);
  methods[3].selector = @selector(getMessage);
  methods[4].selector = @selector(getLocalizedMessage);
  methods[5].selector = @selector(description);
  methods[6].selector = @selector(printStackTrace);
  methods[7].selector = @selector(printStackTraceWithJavaIoPrintStream:);
  methods[8].selector = @selector(printStackTraceWithJavaIoPrintWriter:);
  methods[9].selector = @selector(fillInStackTrace);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComAowagieTextExceptionConverter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "ex_", "LJavaLangException;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prefix_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "convertException", "toString", "printStackTrace", "LJavaIoPrintStream;", "LJavaIoPrintWriter;" };
  static const J2ObjcClassInfo _ComAowagieTextExceptionConverter = { "ExceptionConverter", "com.aowagie.text", ptrTable, methods, fields, 7, 0x1, 10, 3, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextExceptionConverter;
}

@end


#line 71
void ComAowagieTextExceptionConverter_initWithJavaLangException_(ComAowagieTextExceptionConverter *self, JavaLangException *ex) {
  JavaLangRuntimeException_init(self);
  
#line 72
  self->ex_ = ex;
  self->prefix_ = ([ex isKindOfClass:[JavaLangRuntimeException class]]) ? @"" : @"ExceptionConverter: ";
}


#line 71
ComAowagieTextExceptionConverter *new_ComAowagieTextExceptionConverter_initWithJavaLangException_(JavaLangException *ex) {
  J2OBJC_NEW_IMPL(ComAowagieTextExceptionConverter, initWithJavaLangException_, ex)
}


#line 71
ComAowagieTextExceptionConverter *create_ComAowagieTextExceptionConverter_initWithJavaLangException_(JavaLangException *ex) {
  J2OBJC_CREATE_IMPL(ComAowagieTextExceptionConverter, initWithJavaLangException_, ex)
}


#line 84
JavaLangRuntimeException *ComAowagieTextExceptionConverter_convertExceptionWithJavaLangException_(JavaLangException *ex) {
  ComAowagieTextExceptionConverter_initialize();
  
#line 85
  if ([ex isKindOfClass:[JavaLangRuntimeException class]]) {
    return (JavaLangRuntimeException *) ex;
  }
  return new_ComAowagieTextExceptionConverter_initWithJavaLangException_(ex);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextExceptionConverter)
