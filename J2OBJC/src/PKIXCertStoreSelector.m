//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jcajce/PKIXCertStoreSelector.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PKIXCertStoreSelector.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/CertSelector.h"
#include "java/security/cert/CertStore.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509CertSelector.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/Set.h"

#if !__has_feature(objc_arc)
#error "PKIXCertStoreSelector must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleJcajcePKIXCertStoreSelector () {
 @public
  id<JavaSecurityCertCertSelector> baseSelector_;
}

- (instancetype)initWithJavaSecurityCertCertSelector:(id<JavaSecurityCertCertSelector>)baseSelector;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleJcajcePKIXCertStoreSelector, baseSelector_, id<JavaSecurityCertCertSelector>)

__attribute__((unused)) static void OrgSpongycastleJcajcePKIXCertStoreSelector_initWithJavaSecurityCertCertSelector_(OrgSpongycastleJcajcePKIXCertStoreSelector *self, id<JavaSecurityCertCertSelector> baseSelector);

__attribute__((unused)) static OrgSpongycastleJcajcePKIXCertStoreSelector *new_OrgSpongycastleJcajcePKIXCertStoreSelector_initWithJavaSecurityCertCertSelector_(id<JavaSecurityCertCertSelector> baseSelector) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleJcajcePKIXCertStoreSelector *create_OrgSpongycastleJcajcePKIXCertStoreSelector_initWithJavaSecurityCertCertSelector_(id<JavaSecurityCertCertSelector> baseSelector);

@interface OrgSpongycastleJcajcePKIXCertStoreSelector_Builder () {
 @public
  id<JavaSecurityCertCertSelector> baseSelector_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleJcajcePKIXCertStoreSelector_Builder, baseSelector_, id<JavaSecurityCertCertSelector>)

@interface OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone : JavaSecurityCertX509CertSelector {
 @public
  OrgSpongycastleJcajcePKIXCertStoreSelector *selector_;
}

- (instancetype)initWithOrgSpongycastleJcajcePKIXCertStoreSelector:(OrgSpongycastleJcajcePKIXCertStoreSelector *)selector;

- (jboolean)matchWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)certificate;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone)

J2OBJC_FIELD_SETTER(OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone, selector_, OrgSpongycastleJcajcePKIXCertStoreSelector *)

__attribute__((unused)) static void OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone_initWithOrgSpongycastleJcajcePKIXCertStoreSelector_(OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone *self, OrgSpongycastleJcajcePKIXCertStoreSelector *selector);

__attribute__((unused)) static OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone *new_OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone_initWithOrgSpongycastleJcajcePKIXCertStoreSelector_(OrgSpongycastleJcajcePKIXCertStoreSelector *selector) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone *create_OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone_initWithOrgSpongycastleJcajcePKIXCertStoreSelector_(OrgSpongycastleJcajcePKIXCertStoreSelector *selector);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jcajce/PKIXCertStoreSelector.java"


#line 18
@implementation OrgSpongycastleJcajcePKIXCertStoreSelector


#line 51
- (instancetype)initWithJavaSecurityCertCertSelector:(id<JavaSecurityCertCertSelector>)baseSelector {
  OrgSpongycastleJcajcePKIXCertStoreSelector_initWithJavaSecurityCertCertSelector_(self, baseSelector);
  return self;
}

- (jboolean)matchWithId:(JavaSecurityCertCertificate *)cert {
  
#line 58
  return [((id<JavaSecurityCertCertSelector>) nil_chk(baseSelector_)) matchWithJavaSecurityCertCertificate:cert];
}


#line 61
- (id)java_clone {
  
#line 63
  return new_OrgSpongycastleJcajcePKIXCertStoreSelector_initWithJavaSecurityCertCertSelector_(baseSelector_);
}


#line 66
+ (id<JavaUtilCollection>)getCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector:(OrgSpongycastleJcajcePKIXCertStoreSelector *)selector
                                                          withJavaSecurityCertCertStore:(JavaSecurityCertCertStore *)certStore {
  return OrgSpongycastleJcajcePKIXCertStoreSelector_getCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector_withJavaSecurityCertCertStore_(selector, certStore);
}

- (id)clone {
  return [self java_clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 4, 5, 6, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaSecurityCertCertSelector:);
  methods[1].selector = @selector(matchWithId:);
  methods[2].selector = @selector(java_clone);
  methods[3].selector = @selector(getCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector:withJavaSecurityCertCertStore:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "baseSelector_", "LJavaSecurityCertCertSelector;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecurityCertCertSelector;", "match", "LJavaSecurityCertCertificate;", "clone", "getCertificates", "LOrgSpongycastleJcajcePKIXCertStoreSelector;LJavaSecurityCertCertStore;", "LJavaSecurityCertCertStoreException;", "(Lorg/spongycastle/jcajce/PKIXCertStoreSelector;Ljava/security/cert/CertStore;)Ljava/util/Collection<+Ljava/security/cert/Certificate;>;", "LOrgSpongycastleJcajcePKIXCertStoreSelector_Builder;LOrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone;", "<T:Ljava/security/cert/Certificate;>Ljava/lang/Object;Lorg/spongycastle/util/Selector<TT;>;" };
  static const J2ObjcClassInfo _OrgSpongycastleJcajcePKIXCertStoreSelector = { "PKIXCertStoreSelector", "org.spongycastle.jcajce", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, 8, -1, 9, -1 };
  return &_OrgSpongycastleJcajcePKIXCertStoreSelector;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end


#line 51
void OrgSpongycastleJcajcePKIXCertStoreSelector_initWithJavaSecurityCertCertSelector_(OrgSpongycastleJcajcePKIXCertStoreSelector *self, id<JavaSecurityCertCertSelector> baseSelector) {
  NSObject_init(self);
  self->baseSelector_ = baseSelector;
}


#line 51
OrgSpongycastleJcajcePKIXCertStoreSelector *new_OrgSpongycastleJcajcePKIXCertStoreSelector_initWithJavaSecurityCertCertSelector_(id<JavaSecurityCertCertSelector> baseSelector) {
  J2OBJC_NEW_IMPL(OrgSpongycastleJcajcePKIXCertStoreSelector, initWithJavaSecurityCertCertSelector_, baseSelector)
}


#line 51
OrgSpongycastleJcajcePKIXCertStoreSelector *create_OrgSpongycastleJcajcePKIXCertStoreSelector_initWithJavaSecurityCertCertSelector_(id<JavaSecurityCertCertSelector> baseSelector) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJcajcePKIXCertStoreSelector, initWithJavaSecurityCertCertSelector_, baseSelector)
}


#line 66
id<JavaUtilCollection> OrgSpongycastleJcajcePKIXCertStoreSelector_getCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector_withJavaSecurityCertCertStore_(OrgSpongycastleJcajcePKIXCertStoreSelector *selector, JavaSecurityCertCertStore *certStore) {
  OrgSpongycastleJcajcePKIXCertStoreSelector_initialize();
  
#line 69
  return [((JavaSecurityCertCertStore *) nil_chk(certStore)) getCertificatesWithJavaSecurityCertCertSelector:new_OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone_initWithOrgSpongycastleJcajcePKIXCertStoreSelector_(selector)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleJcajcePKIXCertStoreSelector)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jcajce/PKIXCertStoreSelector.java"


#line 24
@implementation OrgSpongycastleJcajcePKIXCertStoreSelector_Builder


#line 33
- (instancetype)initWithJavaSecurityCertCertSelector:(id<JavaSecurityCertCertSelector>)certSelector {
  OrgSpongycastleJcajcePKIXCertStoreSelector_Builder_initWithJavaSecurityCertCertSelector_(self, certSelector);
  return self;
}


#line 43
- (OrgSpongycastleJcajcePKIXCertStoreSelector *)build {
  
#line 45
  return new_OrgSpongycastleJcajcePKIXCertStoreSelector_initWithJavaSecurityCertCertSelector_(baseSelector_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleJcajcePKIXCertStoreSelector;", 0x1, -1, -1, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaSecurityCertCertSelector:);
  methods[1].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "baseSelector_", "LJavaSecurityCertCertSelector;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecurityCertCertSelector;", "()Lorg/spongycastle/jcajce/PKIXCertStoreSelector<+Ljava/security/cert/Certificate;>;", "LOrgSpongycastleJcajcePKIXCertStoreSelector;" };
  static const J2ObjcClassInfo _OrgSpongycastleJcajcePKIXCertStoreSelector_Builder = { "Builder", "org.spongycastle.jcajce", ptrTable, methods, fields, 7, 0x9, 2, 1, 2, -1, -1, -1, -1 };
  return &_OrgSpongycastleJcajcePKIXCertStoreSelector_Builder;
}

@end


#line 33
void OrgSpongycastleJcajcePKIXCertStoreSelector_Builder_initWithJavaSecurityCertCertSelector_(OrgSpongycastleJcajcePKIXCertStoreSelector_Builder *self, id<JavaSecurityCertCertSelector> certSelector) {
  NSObject_init(self);
  self->baseSelector_ = (id<JavaSecurityCertCertSelector>) cast_check([((id<JavaSecurityCertCertSelector>) nil_chk(certSelector)) clone], JavaSecurityCertCertSelector_class_());
}


#line 33
OrgSpongycastleJcajcePKIXCertStoreSelector_Builder *new_OrgSpongycastleJcajcePKIXCertStoreSelector_Builder_initWithJavaSecurityCertCertSelector_(id<JavaSecurityCertCertSelector> certSelector) {
  J2OBJC_NEW_IMPL(OrgSpongycastleJcajcePKIXCertStoreSelector_Builder, initWithJavaSecurityCertCertSelector_, certSelector)
}


#line 33
OrgSpongycastleJcajcePKIXCertStoreSelector_Builder *create_OrgSpongycastleJcajcePKIXCertStoreSelector_Builder_initWithJavaSecurityCertCertSelector_(id<JavaSecurityCertCertSelector> certSelector) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJcajcePKIXCertStoreSelector_Builder, initWithJavaSecurityCertCertSelector_, certSelector)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleJcajcePKIXCertStoreSelector_Builder)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jcajce/PKIXCertStoreSelector.java"


#line 72
@implementation OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone


#line 77
- (instancetype)initWithOrgSpongycastleJcajcePKIXCertStoreSelector:(OrgSpongycastleJcajcePKIXCertStoreSelector *)selector {
  OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone_initWithOrgSpongycastleJcajcePKIXCertStoreSelector_(self, selector);
  return self;
}


#line 114
- (jboolean)matchWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)certificate {
  
#line 116
  return (selector_ == nil) ? (certificate != nil) : [((OrgSpongycastleJcajcePKIXCertStoreSelector *) nil_chk(selector_)) matchWithId:certificate];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleJcajcePKIXCertStoreSelector:);
  methods[1].selector = @selector(matchWithJavaSecurityCertCertificate:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "selector_", "LOrgSpongycastleJcajcePKIXCertStoreSelector;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleJcajcePKIXCertStoreSelector;", "match", "LJavaSecurityCertCertificate;" };
  static const J2ObjcClassInfo _OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone = { "SelectorClone", "org.spongycastle.jcajce", ptrTable, methods, fields, 7, 0xa, 2, 1, 0, -1, -1, -1, -1 };
  return &_OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone;
}

@end


#line 77
void OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone_initWithOrgSpongycastleJcajcePKIXCertStoreSelector_(OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone *self, OrgSpongycastleJcajcePKIXCertStoreSelector *selector) {
  JavaSecurityCertX509CertSelector_init(self);
  self->selector_ = selector;
  
#line 81
  if ([((OrgSpongycastleJcajcePKIXCertStoreSelector *) nil_chk(selector))->baseSelector_ isKindOfClass:[JavaSecurityCertX509CertSelector class]]) {
    
#line 83
    JavaSecurityCertX509CertSelector *baseSelector = (JavaSecurityCertX509CertSelector *) selector->baseSelector_;
    
#line 85
    [self setAuthorityKeyIdentifierWithByteArray:[((JavaSecurityCertX509CertSelector *) nil_chk(baseSelector)) getAuthorityKeyIdentifier]];
    [self setBasicConstraintsWithInt:[baseSelector getBasicConstraints]];
    [self setCertificateWithJavaSecurityCertX509Certificate:[baseSelector getCertificate]];
    [self setCertificateValidWithJavaUtilDate:[baseSelector getCertificateValid]];
    [self setKeyUsageWithBooleanArray:[baseSelector getKeyUsage]];
    [self setMatchAllSubjectAltNamesWithBoolean:[baseSelector getMatchAllSubjectAltNames]];
    [self setPrivateKeyValidWithJavaUtilDate:[baseSelector getPrivateKeyValid]];
    [self setSerialNumberWithJavaMathBigInteger:[baseSelector getSerialNumber]];
    [self setSubjectKeyIdentifierWithByteArray:[baseSelector getSubjectKeyIdentifier]];
    [self setSubjectPublicKeyWithJavaSecurityPublicKey:[baseSelector getSubjectPublicKey]];
    
#line 96
    @try {
      
#line 98
      [self setExtendedKeyUsageWithJavaUtilSet:[baseSelector getExtendedKeyUsage]];
      [self setIssuerWithByteArray:[baseSelector getIssuerAsBytes]];
      [self setNameConstraintsWithByteArray:[baseSelector getNameConstraints]];
      [self setPathToNamesWithJavaUtilCollection:[baseSelector getPathToNames]];
      [self setPolicyWithJavaUtilSet:[baseSelector getPolicy]];
      [self setSubjectWithByteArray:[baseSelector getSubjectAsBytes]];
      [self setSubjectAlternativeNamesWithJavaUtilCollection:[baseSelector getSubjectAlternativeNames]];
      [self setSubjectPublicKeyAlgIDWithNSString:[baseSelector getSubjectPublicKeyAlgID]];
    }
    @catch (JavaIoIOException *e) {
      
#line 109
      @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"base selector invalid: ", [e getMessage]), e);
    }
  }
}


#line 77
OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone *new_OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone_initWithOrgSpongycastleJcajcePKIXCertStoreSelector_(OrgSpongycastleJcajcePKIXCertStoreSelector *selector) {
  J2OBJC_NEW_IMPL(OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone, initWithOrgSpongycastleJcajcePKIXCertStoreSelector_, selector)
}


#line 77
OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone *create_OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone_initWithOrgSpongycastleJcajcePKIXCertStoreSelector_(OrgSpongycastleJcajcePKIXCertStoreSelector *selector) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone, initWithOrgSpongycastleJcajcePKIXCertStoreSelector_, selector)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleJcajcePKIXCertStoreSelector_SelectorClone)
