//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/cert/ocsp/CertificateID.java
//

#include "ASN1Encoding.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "AlgorithmIdentifier.h"
#include "CertID.h"
#include "Certificate.h"
#include "CertificateID.h"
#include "DERBitString.h"
#include "DERNull.h"
#include "DEROctetString.h"
#include "DigestCalculator.h"
#include "DigestCalculatorProvider.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OCSPException.h"
#include "OIWObjectIdentifiers.h"
#include "OperatorCreationException.h"
#include "SubjectPublicKeyInfo.h"
#include "X500Name.h"
#include "X509CertificateHolder.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"

#if !__has_feature(objc_arc)
#error "CertificateID must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleCertOcspCertificateID () {
 @public
  OrgSpongycastleAsn1OcspCertID *id__;
}

+ (OrgSpongycastleAsn1OcspCertID *)createCertIDWithOrgSpongycastleOperatorDigestCalculator:(id<OrgSpongycastleOperatorDigestCalculator>)digCalc
                                              withOrgSpongycastleCertX509CertificateHolder:(OrgSpongycastleCertX509CertificateHolder *)issuerCert
                                                        withOrgSpongycastleAsn1ASN1Integer:(OrgSpongycastleAsn1ASN1Integer *)serialNumber;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCertOcspCertificateID, id__, OrgSpongycastleAsn1OcspCertID *)

__attribute__((unused)) static OrgSpongycastleAsn1OcspCertID *OrgSpongycastleCertOcspCertificateID_createCertIDWithOrgSpongycastleOperatorDigestCalculator_withOrgSpongycastleCertX509CertificateHolder_withOrgSpongycastleAsn1ASN1Integer_(id<OrgSpongycastleOperatorDigestCalculator> digCalc, OrgSpongycastleCertX509CertificateHolder *issuerCert, OrgSpongycastleAsn1ASN1Integer *serialNumber);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/cert/ocsp/CertificateID.java"

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCertOcspCertificateID)

OrgSpongycastleAsn1X509AlgorithmIdentifier *OrgSpongycastleCertOcspCertificateID_HASH_SHA1;


#line 21
@implementation OrgSpongycastleCertOcspCertificateID


#line 27
- (instancetype)initWithOrgSpongycastleAsn1OcspCertID:(OrgSpongycastleAsn1OcspCertID *)id_ {
  OrgSpongycastleCertOcspCertificateID_initWithOrgSpongycastleAsn1OcspCertID_(self, id_);
  return self;
}


#line 46
- (instancetype)initWithOrgSpongycastleOperatorDigestCalculator:(id<OrgSpongycastleOperatorDigestCalculator>)digestCalculator
                   withOrgSpongycastleCertX509CertificateHolder:(OrgSpongycastleCertX509CertificateHolder *)issuerCert
                                         withJavaMathBigInteger:(JavaMathBigInteger *)number {
  OrgSpongycastleCertOcspCertificateID_initWithOrgSpongycastleOperatorDigestCalculator_withOrgSpongycastleCertX509CertificateHolder_withJavaMathBigInteger_(self, digestCalculator, issuerCert, number);
  return self;
}


#line 54
- (OrgSpongycastleAsn1ASN1ObjectIdentifier *)getHashAlgOID {
  
#line 56
  return [((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgSpongycastleAsn1OcspCertID *) nil_chk(id__)) getHashAlgorithm])) getAlgorithm];
}


#line 59
- (IOSByteArray *)getIssuerNameHash {
  
#line 61
  return [((OrgSpongycastleAsn1ASN1OctetString *) nil_chk([((OrgSpongycastleAsn1OcspCertID *) nil_chk(id__)) getIssuerNameHash])) getOctets];
}


#line 64
- (IOSByteArray *)getIssuerKeyHash {
  
#line 66
  return [((OrgSpongycastleAsn1ASN1OctetString *) nil_chk([((OrgSpongycastleAsn1OcspCertID *) nil_chk(id__)) getIssuerKeyHash])) getOctets];
}


#line 73
- (JavaMathBigInteger *)getSerialNumber {
  
#line 75
  return [((OrgSpongycastleAsn1ASN1Integer *) nil_chk([((OrgSpongycastleAsn1OcspCertID *) nil_chk(id__)) getSerialNumber])) getValue];
}


#line 78
- (jboolean)matchesIssuerWithOrgSpongycastleCertX509CertificateHolder:(OrgSpongycastleCertX509CertificateHolder *)issuerCert
                  withOrgSpongycastleOperatorDigestCalculatorProvider:(id<OrgSpongycastleOperatorDigestCalculatorProvider>)digCalcProvider {
  
#line 81
  @try {
    
#line 83
    return [((OrgSpongycastleAsn1OcspCertID *) nil_chk(OrgSpongycastleCertOcspCertificateID_createCertIDWithOrgSpongycastleOperatorDigestCalculator_withOrgSpongycastleCertX509CertificateHolder_withOrgSpongycastleAsn1ASN1Integer_([((id<OrgSpongycastleOperatorDigestCalculatorProvider>) nil_chk(digCalcProvider)) getWithOrgSpongycastleAsn1X509AlgorithmIdentifier:[((OrgSpongycastleAsn1OcspCertID *) nil_chk(id__)) getHashAlgorithm]], issuerCert, [id__ getSerialNumber]))) isEqual:id__];
  }
  @catch (OrgSpongycastleOperatorOperatorCreationException *e) {
    
#line 87
    @throw new_OrgSpongycastleCertOcspOCSPException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"unable to create digest calculator: ", [e getMessage]), e);
  }
}


#line 91
- (OrgSpongycastleAsn1OcspCertID *)toASN1Primitive {
  
#line 93
  return id__;
}


#line 96
- (jboolean)isEqual:(id)o {
  
#line 99
  if (!([o isKindOfClass:[OrgSpongycastleCertOcspCertificateID class]])) {
    
#line 101
    return false;
  }
  
#line 104
  OrgSpongycastleCertOcspCertificateID *obj = (OrgSpongycastleCertOcspCertificateID *) cast_chk(o, [OrgSpongycastleCertOcspCertificateID class]);
  
#line 106
  return [((OrgSpongycastleAsn1ASN1Primitive *) nil_chk([((OrgSpongycastleAsn1OcspCertID *) nil_chk(id__)) toASN1Primitive])) isEqual:[((OrgSpongycastleCertOcspCertificateID *) nil_chk(obj))->id__ toASN1Primitive]];
}


#line 109
- (NSUInteger)hash {
  
#line 111
  return ((jint) [((OrgSpongycastleAsn1ASN1Primitive *) nil_chk([((OrgSpongycastleAsn1OcspCertID *) nil_chk(id__)) toASN1Primitive])) hash]);
}


#line 123
+ (OrgSpongycastleCertOcspCertificateID *)deriveCertificateIDWithOrgSpongycastleCertOcspCertificateID:(OrgSpongycastleCertOcspCertificateID *)original
                                                                               withJavaMathBigInteger:(JavaMathBigInteger *)newSerialNumber {
  return OrgSpongycastleCertOcspCertificateID_deriveCertificateIDWithOrgSpongycastleCertOcspCertificateID_withJavaMathBigInteger_(original, newSerialNumber);
}

+ (OrgSpongycastleAsn1OcspCertID *)createCertIDWithOrgSpongycastleOperatorDigestCalculator:(id<OrgSpongycastleOperatorDigestCalculator>)digCalc
                                              withOrgSpongycastleCertX509CertificateHolder:(OrgSpongycastleCertX509CertificateHolder *)issuerCert
                                                        withOrgSpongycastleAsn1ASN1Integer:(OrgSpongycastleAsn1ASN1Integer *)serialNumber {
  return OrgSpongycastleCertOcspCertificateID_createCertIDWithOrgSpongycastleOperatorDigestCalculator_withOrgSpongycastleCertX509CertificateHolder_withOrgSpongycastleAsn1ASN1Integer_(digCalc, issuerCert, serialNumber);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1ObjectIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1OcspCertID;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCertOcspCertificateID;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1OcspCertID;", 0xa, 10, 11, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleAsn1OcspCertID:);
  methods[1].selector = @selector(initWithOrgSpongycastleOperatorDigestCalculator:withOrgSpongycastleCertX509CertificateHolder:withJavaMathBigInteger:);
  methods[2].selector = @selector(getHashAlgOID);
  methods[3].selector = @selector(getIssuerNameHash);
  methods[4].selector = @selector(getIssuerKeyHash);
  methods[5].selector = @selector(getSerialNumber);
  methods[6].selector = @selector(matchesIssuerWithOrgSpongycastleCertX509CertificateHolder:withOrgSpongycastleOperatorDigestCalculatorProvider:);
  methods[7].selector = @selector(toASN1Primitive);
  methods[8].selector = @selector(isEqual:);
  methods[9].selector = @selector(hash);
  methods[10].selector = @selector(deriveCertificateIDWithOrgSpongycastleCertOcspCertificateID:withJavaMathBigInteger:);
  methods[11].selector = @selector(createCertIDWithOrgSpongycastleOperatorDigestCalculator:withOrgSpongycastleCertX509CertificateHolder:withOrgSpongycastleAsn1ASN1Integer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HASH_SHA1", "LOrgSpongycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "id__", "LOrgSpongycastleAsn1OcspCertID;", .constantValue.asLong = 0, 0x12, 13, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleAsn1OcspCertID;", "LOrgSpongycastleOperatorDigestCalculator;LOrgSpongycastleCertX509CertificateHolder;LJavaMathBigInteger;", "LOrgSpongycastleCertOcspOCSPException;", "matchesIssuer", "LOrgSpongycastleCertX509CertificateHolder;LOrgSpongycastleOperatorDigestCalculatorProvider;", "equals", "LNSObject;", "hashCode", "deriveCertificateID", "LOrgSpongycastleCertOcspCertificateID;LJavaMathBigInteger;", "createCertID", "LOrgSpongycastleOperatorDigestCalculator;LOrgSpongycastleCertX509CertificateHolder;LOrgSpongycastleAsn1ASN1Integer;", &OrgSpongycastleCertOcspCertificateID_HASH_SHA1, "id" };
  static const J2ObjcClassInfo _OrgSpongycastleCertOcspCertificateID = { "CertificateID", "org.spongycastle.cert.ocsp", ptrTable, methods, fields, 7, 0x1, 12, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCertOcspCertificateID;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCertOcspCertificateID class]) {
    OrgSpongycastleCertOcspCertificateID_HASH_SHA1 = new_OrgSpongycastleAsn1X509AlgorithmIdentifier_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Encodable_(JreLoadStatic(OrgSpongycastleAsn1OiwOIWObjectIdentifiers, idSHA1), JreLoadStatic(OrgSpongycastleAsn1DERNull, INSTANCE));
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCertOcspCertificateID)
  }
}

@end


#line 27
void OrgSpongycastleCertOcspCertificateID_initWithOrgSpongycastleAsn1OcspCertID_(OrgSpongycastleCertOcspCertificateID *self, OrgSpongycastleAsn1OcspCertID *id_) {
  NSObject_init(self);
  
#line 30
  if (id_ == nil) {
    
#line 32
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'id' cannot be null");
  }
  self->id__ = id_;
}


#line 27
OrgSpongycastleCertOcspCertificateID *new_OrgSpongycastleCertOcspCertificateID_initWithOrgSpongycastleAsn1OcspCertID_(OrgSpongycastleAsn1OcspCertID *id_) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCertOcspCertificateID, initWithOrgSpongycastleAsn1OcspCertID_, id_)
}


#line 27
OrgSpongycastleCertOcspCertificateID *create_OrgSpongycastleCertOcspCertificateID_initWithOrgSpongycastleAsn1OcspCertID_(OrgSpongycastleAsn1OcspCertID *id_) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCertOcspCertificateID, initWithOrgSpongycastleAsn1OcspCertID_, id_)
}


#line 46
void OrgSpongycastleCertOcspCertificateID_initWithOrgSpongycastleOperatorDigestCalculator_withOrgSpongycastleCertX509CertificateHolder_withJavaMathBigInteger_(OrgSpongycastleCertOcspCertificateID *self, id<OrgSpongycastleOperatorDigestCalculator> digestCalculator, OrgSpongycastleCertX509CertificateHolder *issuerCert, JavaMathBigInteger *number) {
  NSObject_init(self);
  
#line 51
  self->id__ = OrgSpongycastleCertOcspCertificateID_createCertIDWithOrgSpongycastleOperatorDigestCalculator_withOrgSpongycastleCertX509CertificateHolder_withOrgSpongycastleAsn1ASN1Integer_(digestCalculator, issuerCert, new_OrgSpongycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(number));
}


#line 46
OrgSpongycastleCertOcspCertificateID *new_OrgSpongycastleCertOcspCertificateID_initWithOrgSpongycastleOperatorDigestCalculator_withOrgSpongycastleCertX509CertificateHolder_withJavaMathBigInteger_(id<OrgSpongycastleOperatorDigestCalculator> digestCalculator, OrgSpongycastleCertX509CertificateHolder *issuerCert, JavaMathBigInteger *number) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCertOcspCertificateID, initWithOrgSpongycastleOperatorDigestCalculator_withOrgSpongycastleCertX509CertificateHolder_withJavaMathBigInteger_, digestCalculator, issuerCert, number)
}


#line 46
OrgSpongycastleCertOcspCertificateID *create_OrgSpongycastleCertOcspCertificateID_initWithOrgSpongycastleOperatorDigestCalculator_withOrgSpongycastleCertX509CertificateHolder_withJavaMathBigInteger_(id<OrgSpongycastleOperatorDigestCalculator> digestCalculator, OrgSpongycastleCertX509CertificateHolder *issuerCert, JavaMathBigInteger *number) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCertOcspCertificateID, initWithOrgSpongycastleOperatorDigestCalculator_withOrgSpongycastleCertX509CertificateHolder_withJavaMathBigInteger_, digestCalculator, issuerCert, number)
}


#line 123
OrgSpongycastleCertOcspCertificateID *OrgSpongycastleCertOcspCertificateID_deriveCertificateIDWithOrgSpongycastleCertOcspCertificateID_withJavaMathBigInteger_(OrgSpongycastleCertOcspCertificateID *original, JavaMathBigInteger *newSerialNumber) {
  OrgSpongycastleCertOcspCertificateID_initialize();
  return new_OrgSpongycastleCertOcspCertificateID_initWithOrgSpongycastleAsn1OcspCertID_(new_OrgSpongycastleAsn1OcspCertID_initWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withOrgSpongycastleAsn1ASN1OctetString_withOrgSpongycastleAsn1ASN1OctetString_withOrgSpongycastleAsn1ASN1Integer_([((OrgSpongycastleAsn1OcspCertID *) nil_chk(((OrgSpongycastleCertOcspCertificateID *) nil_chk(original))->id__)) getHashAlgorithm], [original->id__ getIssuerNameHash], [original->id__ getIssuerKeyHash], new_OrgSpongycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(newSerialNumber)));
}

OrgSpongycastleAsn1OcspCertID *OrgSpongycastleCertOcspCertificateID_createCertIDWithOrgSpongycastleOperatorDigestCalculator_withOrgSpongycastleCertX509CertificateHolder_withOrgSpongycastleAsn1ASN1Integer_(id<OrgSpongycastleOperatorDigestCalculator> digCalc, OrgSpongycastleCertX509CertificateHolder *issuerCert, OrgSpongycastleAsn1ASN1Integer *serialNumber) {
  OrgSpongycastleCertOcspCertificateID_initialize();
  
#line 131
  @try {
    
#line 133
    JavaIoOutputStream *dgOut = [((id<OrgSpongycastleOperatorDigestCalculator>) nil_chk(digCalc)) getOutputStream];
    
#line 135
    [((JavaIoOutputStream *) nil_chk(dgOut)) writeWithByteArray:[((OrgSpongycastleAsn1X500X500Name *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk([((OrgSpongycastleCertX509CertificateHolder *) nil_chk(issuerCert)) toASN1Structure])) getSubject])) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER]];
    [dgOut close];
    
#line 138
    OrgSpongycastleAsn1ASN1OctetString *issuerNameHash = new_OrgSpongycastleAsn1DEROctetString_initWithByteArray_([digCalc getDigest]);
    
#line 140
    OrgSpongycastleAsn1X509SubjectPublicKeyInfo *info = [issuerCert getSubjectPublicKeyInfo];
    
#line 142
    dgOut = [digCalc getOutputStream];
    
#line 144
    [((JavaIoOutputStream *) nil_chk(dgOut)) writeWithByteArray:[((OrgSpongycastleAsn1DERBitString *) nil_chk([((OrgSpongycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(info)) getPublicKeyData])) getBytes]];
    [dgOut close];
    
#line 147
    OrgSpongycastleAsn1ASN1OctetString *issuerKeyHash = new_OrgSpongycastleAsn1DEROctetString_initWithByteArray_([digCalc getDigest]);
    
#line 149
    return new_OrgSpongycastleAsn1OcspCertID_initWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withOrgSpongycastleAsn1ASN1OctetString_withOrgSpongycastleAsn1ASN1OctetString_withOrgSpongycastleAsn1ASN1Integer_([digCalc getAlgorithmIdentifier], issuerNameHash, issuerKeyHash, serialNumber);
  }
  @catch (JavaLangException *e) {
    
#line 153
    @throw new_OrgSpongycastleCertOcspOCSPException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"problem creating ID: ", e), e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCertOcspCertificateID)
