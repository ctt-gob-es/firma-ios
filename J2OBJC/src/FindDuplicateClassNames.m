//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/FindDuplicateClassNames.java
//

#include "FindDuplicateClassNames.h"
#include "J2ObjC_source.h"

#if !__has_feature(objc_arc)
#error "FindDuplicateClassNames must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/FindDuplicateClassNames.java"


#line 3
@implementation ComFindDuplicateClassNames

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 3
- (instancetype)init {
  ComFindDuplicateClassNames_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcClassInfo _ComFindDuplicateClassNames = { "FindDuplicateClassNames", "com", NULL, methods, NULL, 7, 0x1, 1, 0, -1, -1, -1, -1, -1 };
  return &_ComFindDuplicateClassNames;
}

@end


#line 3
void ComFindDuplicateClassNames_init(ComFindDuplicateClassNames *self) {
  NSObject_init(self);
}


#line 3
ComFindDuplicateClassNames *new_ComFindDuplicateClassNames_init() {
  J2OBJC_NEW_IMPL(ComFindDuplicateClassNames, init)
}


#line 3
ComFindDuplicateClassNames *create_ComFindDuplicateClassNames_init() {
  J2OBJC_CREATE_IMPL(ComFindDuplicateClassNames, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComFindDuplicateClassNames)
