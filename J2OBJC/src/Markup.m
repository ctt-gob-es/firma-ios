//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/html/Markup.java
//

#include "Color.h"
#include "J2ObjC_source.h"
#include "Markup.h"
#include "WebColors.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Properties.h"
#include "java/util/StringTokenizer.h"

#if !__has_feature(objc_arc)
#error "Markup must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/html/Markup.java"

NSString *ComAowagieTextHtmlMarkup_HTML_ATTR_STYLE = @"style";
NSString *ComAowagieTextHtmlMarkup_CSS_KEY_COLOR = @"color";
NSString *ComAowagieTextHtmlMarkup_CSS_KEY_FONTFAMILY = @"font-family";
NSString *ComAowagieTextHtmlMarkup_CSS_KEY_FONTSIZE = @"font-size";
NSString *ComAowagieTextHtmlMarkup_CSS_KEY_FONTSTYLE = @"font-style";
NSString *ComAowagieTextHtmlMarkup_CSS_KEY_FONTWEIGHT = @"font-weight";
NSString *ComAowagieTextHtmlMarkup_CSS_KEY_LINEHEIGHT = @"line-height";
NSString *ComAowagieTextHtmlMarkup_CSS_KEY_VERTICALALIGN = @"vertical-align";
NSString *ComAowagieTextHtmlMarkup_CSS_VALUE_BOLD = @"bold";
NSString *ComAowagieTextHtmlMarkup_CSS_VALUE_ITALIC = @"italic";
NSString *ComAowagieTextHtmlMarkup_CSS_VALUE_LINETHROUGH = @"line-through";
NSString *ComAowagieTextHtmlMarkup_CSS_VALUE_NORMAL = @"normal";
NSString *ComAowagieTextHtmlMarkup_CSS_VALUE_OBLIQUE = @"oblique";
NSString *ComAowagieTextHtmlMarkup_CSS_VALUE_UNDERLINE = @"underline";


#line 64
@implementation ComAowagieTextHtmlMarkup

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 64
- (instancetype)init {
  ComAowagieTextHtmlMarkup_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 130
+ (jfloat)parseLengthWithNSString:(NSString *)string {
  return ComAowagieTextHtmlMarkup_parseLengthWithNSString_(string);
}


#line 193
+ (jfloat)parseLengthWithNSString:(NSString *)string
                        withFloat:(jfloat)actualFontSize {
  return ComAowagieTextHtmlMarkup_parseLengthWithNSString_withFloat_(string, actualFontSize);
}


#line 267
+ (HarmonyJavaAwtColor *)decodeColorWithNSString:(NSString *)s {
  return ComAowagieTextHtmlMarkup_decodeColorWithNSString_(s);
}


#line 289
+ (JavaUtilProperties *)parseAttributesWithNSString:(NSString *)string {
  return ComAowagieTextHtmlMarkup_parseAttributesWithNSString_(string);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtColor;", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x9, 4, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseLengthWithNSString:);
  methods[2].selector = @selector(parseLengthWithNSString:withFloat:);
  methods[3].selector = @selector(decodeColorWithNSString:);
  methods[4].selector = @selector(parseAttributesWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HTML_ATTR_STYLE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "CSS_KEY_COLOR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "CSS_KEY_FONTFAMILY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "CSS_KEY_FONTSIZE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "CSS_KEY_FONTSTYLE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "CSS_KEY_FONTWEIGHT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "CSS_KEY_LINEHEIGHT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "CSS_KEY_VERTICALALIGN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "CSS_VALUE_BOLD", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "CSS_VALUE_ITALIC", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "CSS_VALUE_LINETHROUGH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "CSS_VALUE_NORMAL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "CSS_VALUE_OBLIQUE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "CSS_VALUE_UNDERLINE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
    { "DEFAULT_FONT_SIZE", "F", .constantValue.asFloat = ComAowagieTextHtmlMarkup_DEFAULT_FONT_SIZE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "parseLength", "LNSString;", "LNSString;F", "decodeColor", "parseAttributes", &ComAowagieTextHtmlMarkup_HTML_ATTR_STYLE, &ComAowagieTextHtmlMarkup_CSS_KEY_COLOR, &ComAowagieTextHtmlMarkup_CSS_KEY_FONTFAMILY, &ComAowagieTextHtmlMarkup_CSS_KEY_FONTSIZE, &ComAowagieTextHtmlMarkup_CSS_KEY_FONTSTYLE, &ComAowagieTextHtmlMarkup_CSS_KEY_FONTWEIGHT, &ComAowagieTextHtmlMarkup_CSS_KEY_LINEHEIGHT, &ComAowagieTextHtmlMarkup_CSS_KEY_VERTICALALIGN, &ComAowagieTextHtmlMarkup_CSS_VALUE_BOLD, &ComAowagieTextHtmlMarkup_CSS_VALUE_ITALIC, &ComAowagieTextHtmlMarkup_CSS_VALUE_LINETHROUGH, &ComAowagieTextHtmlMarkup_CSS_VALUE_NORMAL, &ComAowagieTextHtmlMarkup_CSS_VALUE_OBLIQUE, &ComAowagieTextHtmlMarkup_CSS_VALUE_UNDERLINE };
  static const J2ObjcClassInfo _ComAowagieTextHtmlMarkup = { "Markup", "com.aowagie.text.html", ptrTable, methods, fields, 7, 0x1, 5, 15, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextHtmlMarkup;
}

@end


#line 64
void ComAowagieTextHtmlMarkup_init(ComAowagieTextHtmlMarkup *self) {
  NSObject_init(self);
}


#line 64
ComAowagieTextHtmlMarkup *new_ComAowagieTextHtmlMarkup_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextHtmlMarkup, init)
}


#line 64
ComAowagieTextHtmlMarkup *create_ComAowagieTextHtmlMarkup_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextHtmlMarkup, init)
}


#line 130
jfloat ComAowagieTextHtmlMarkup_parseLengthWithNSString_(NSString *string) {
  ComAowagieTextHtmlMarkup_initialize();
  
#line 134
  jint pos = 0;
  jint length = [((NSString *) nil_chk(string)) java_length];
  jboolean ok = true;
  while (ok && pos < length) {
    switch ([string charAtWithInt:pos]) {
      case '+':
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case '.':
      pos++;
      break;
      default:
      ok = false;
    }
  }
  if (pos == 0) {
    return 0.0f;
  }
  if (pos == length) {
    return JavaLangFloat_parseFloatWithNSString_(JreStrcat("$C", string, 'f'));
  }
  jfloat f = JavaLangFloat_parseFloatWithNSString_(JreStrcat("$C", [string java_substring:0 endIndex:pos], 'f'));
  string = [string java_substring:pos];
  
#line 167
  if ([((NSString *) nil_chk(string)) java_hasPrefix:@"in"]) {
    return f * 72.0f;
  }
  
#line 171
  if ([string java_hasPrefix:@"cm"]) {
    return f / 2.54f * 72.0f;
  }
  
#line 175
  if ([string java_hasPrefix:@"mm"]) {
    return f / 25.4f * 72.0f;
  }
  
#line 179
  if ([string java_hasPrefix:@"pc"]) {
    return f * 12.0f;
  }
  
#line 183
  return f;
}


#line 193
jfloat ComAowagieTextHtmlMarkup_parseLengthWithNSString_withFloat_(NSString *string, jfloat actualFontSize) {
  ComAowagieTextHtmlMarkup_initialize();
  
#line 194
  if (string == nil) {
    return 0.0f;
  }
  jint pos = 0;
  jint length = [string java_length];
  jboolean ok = true;
  while (ok && pos < length) {
    switch ([string charAtWithInt:pos]) {
      case '+':
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case '.':
      pos++;
      break;
      default:
      ok = false;
    }
  }
  if (pos == 0) {
    return 0.0f;
  }
  if (pos == length) {
    return JavaLangFloat_parseFloatWithNSString_(JreStrcat("$C", string, 'f'));
  }
  jfloat f = JavaLangFloat_parseFloatWithNSString_(JreStrcat("$C", [string java_substring:0 endIndex:pos], 'f'));
  string = [string java_substring:pos];
  
#line 230
  if ([((NSString *) nil_chk(string)) java_hasPrefix:@"in"]) {
    return f * 72.0f;
  }
  
#line 234
  if ([string java_hasPrefix:@"cm"]) {
    return f / 2.54f * 72.0f;
  }
  
#line 238
  if ([string java_hasPrefix:@"mm"]) {
    return f / 25.4f * 72.0f;
  }
  
#line 242
  if ([string java_hasPrefix:@"pc"]) {
    return f * 12.0f;
  }
  
#line 246
  if ([string java_hasPrefix:@"em"]) {
    return f * actualFontSize;
  }
  
#line 251
  if ([string java_hasPrefix:@"ex"]) {
    return f * actualFontSize / 2;
  }
  
#line 255
  return f;
}

HarmonyJavaAwtColor *ComAowagieTextHtmlMarkup_decodeColorWithNSString_(NSString *s) {
  ComAowagieTextHtmlMarkup_initialize();
  
#line 268
  if (s == nil) {
    return nil;
  }
  s = [((NSString *) nil_chk([s lowercaseString])) java_trim];
  @try {
    return ComAowagieTextHtmlWebColors_getRGBColorWithNSString_(s);
  }
  @catch (JavaLangIllegalArgumentException *iae) {
    return nil;
  }
}


#line 289
JavaUtilProperties *ComAowagieTextHtmlMarkup_parseAttributesWithNSString_(NSString *string) {
  ComAowagieTextHtmlMarkup_initialize();
  
#line 290
  JavaUtilProperties *result = new_JavaUtilProperties_init();
  if (string == nil) {
    return result;
  }
  JavaUtilStringTokenizer *keyValuePairs = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(string, @";");
  JavaUtilStringTokenizer *keyValuePair;
  NSString *key;
  NSString *value;
  while ([keyValuePairs hasMoreTokens]) {
    keyValuePair = new_JavaUtilStringTokenizer_initWithNSString_withNSString_([keyValuePairs nextToken], @":");
    if ([keyValuePair hasMoreTokens]) {
      key = [((NSString *) nil_chk([keyValuePair nextToken])) java_trim];
    }
    else {
      
#line 303
      continue;
    }
    if ([keyValuePair hasMoreTokens]) {
      value = [((NSString *) nil_chk([keyValuePair nextToken])) java_trim];
    }
    else {
      
#line 308
      continue;
    }
    if ([((NSString *) nil_chk(value)) java_hasPrefix:@"\""]) {
      value = [value java_substring:1];
    }
    if ([((NSString *) nil_chk(value)) java_hasSuffix:@"\""]) {
      value = [value java_substring:0 endIndex:[value java_length] - 1];
    }
    (void) [result setPropertyWithNSString:[((NSString *) nil_chk(key)) lowercaseString] withNSString:value];
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextHtmlMarkup)
