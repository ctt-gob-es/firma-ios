//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/jcajce/provider/asymmetric/x509/X509CRLObject.java
//

#include "ASN1Dump.h"
#include "ASN1Encodable.h"
#include "ASN1Encoding.h"
#include "ASN1InputStream.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "AlgorithmIdentifier.h"
#include "BCTime.h"
#include "CRLDistPoint.h"
#include "CRLNumber.h"
#include "Certificate.h"
#include "CertificateList.h"
#include "DERBitString.h"
#include "ExtCRLException.h"
#include "Extension.h"
#include "Extensions.h"
#include "GeneralName.h"
#include "GeneralNames.h"
#include "Hex.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IssuingDistributionPoint.h"
#include "J2ObjC_source.h"
#include "JcaJceHelper.h"
#include "Strings.h"
#include "TBSCertList.h"
#include "X500Name.h"
#include "X509CRLEntryObject.h"
#include "X509CRLObject.h"
#include "X509Principal.h"
#include "X509SignatureUtil.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/Principal.h"
#include "java/security/Provider.h"
#include "java/security/PublicKey.h"
#include "java/security/Signature.h"
#include "java/security/SignatureException.h"
#include "java/security/cert/CRLException.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateEncodingException.h"
#include "java/security/cert/X509CRL.h"
#include "java/security/cert/X509CRLEntry.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "javax/security/auth/x500/X500Principal.h"

#if !__has_feature(objc_arc)
#error "X509CRLObject must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject () {
 @public
  id<OrgSpongycastleJcajceUtilJcaJceHelper> bcHelper_;
  OrgSpongycastleAsn1X509CertificateList *c_;
  NSString *sigAlgName_;
  IOSByteArray *sigAlgParams_;
  jboolean isIndirect_;
  jboolean isHashCodeSet_;
  jint hashCodeValue_;
}

- (id<JavaUtilSet>)getExtensionOIDsWithBoolean:(jboolean)critical;

- (void)doVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                withJavaSecuritySignature:(JavaSecuritySignature *)sig;

- (id<JavaUtilSet>)loadCRLEntries;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject, bcHelper_, id<OrgSpongycastleJcajceUtilJcaJceHelper>)
J2OBJC_FIELD_SETTER(OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject, c_, OrgSpongycastleAsn1X509CertificateList *)
J2OBJC_FIELD_SETTER(OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject, sigAlgName_, NSString *)
J2OBJC_FIELD_SETTER(OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject, sigAlgParams_, IOSByteArray *)

__attribute__((unused)) static id<JavaUtilSet> OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_getExtensionOIDsWithBoolean_(OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject *self, jboolean critical);

__attribute__((unused)) static void OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_doVerifyWithJavaSecurityPublicKey_withJavaSecuritySignature_(OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject *self, id<JavaSecurityPublicKey> key, JavaSecuritySignature *sig);

__attribute__((unused)) static id<JavaUtilSet> OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_loadCRLEntries(OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject *self);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/jcajce/provider/asymmetric/x509/X509CRLObject.java"


#line 58
@implementation OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject


#line 69
+ (jboolean)isIndirectCRLWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl {
  return OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_isIndirectCRLWithJavaSecurityCertX509CRL_(crl);
}


#line 85
- (instancetype)initPackagePrivateWithOrgSpongycastleJcajceUtilJcaJceHelper:(id<OrgSpongycastleJcajceUtilJcaJceHelper>)bcHelper
                                 withOrgSpongycastleAsn1X509CertificateList:(OrgSpongycastleAsn1X509CertificateList *)c {
  OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_initPackagePrivateWithOrgSpongycastleJcajceUtilJcaJceHelper_withOrgSpongycastleAsn1X509CertificateList_(self, bcHelper, c);
  return self;
}


#line 118
- (jboolean)hasUnsupportedCriticalExtension {
  
#line 120
  id<JavaUtilSet> extns = [self getCriticalExtensionOIDs];
  
#line 122
  if (extns == nil) {
    
#line 124
    return false;
  }
  
#line 127
  [extns removeWithId:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, issuingDistributionPoint))) getId]];
  [extns removeWithId:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, deltaCRLIndicator))) getId]];
  
#line 130
  return ![extns isEmpty];
}


#line 133
- (id<JavaUtilSet>)getExtensionOIDsWithBoolean:(jboolean)critical {
  return OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_getExtensionOIDsWithBoolean_(self, critical);
}


#line 162
- (id<JavaUtilSet>)getCriticalExtensionOIDs {
  
#line 164
  return OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_getExtensionOIDsWithBoolean_(self, true);
}


#line 167
- (id<JavaUtilSet>)getNonCriticalExtensionOIDs {
  
#line 169
  return OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_getExtensionOIDsWithBoolean_(self, false);
}


#line 172
- (IOSByteArray *)getExtensionValueWithNSString:(NSString *)oid {
  
#line 174
  OrgSpongycastleAsn1X509Extensions *exts = [((OrgSpongycastleAsn1X509TBSCertList *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getTBSCertList])) getExtensions];
  
#line 176
  if (exts != nil) {
    
#line 178
    OrgSpongycastleAsn1X509Extension *ext = [exts getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:new_OrgSpongycastleAsn1ASN1ObjectIdentifier_initWithNSString_(oid)];
    
#line 180
    if (ext != nil) {
      
#line 182
      @try {
        
#line 184
        return [((OrgSpongycastleAsn1ASN1OctetString *) nil_chk([ext getExtnValue])) getEncoded];
      }
      @catch (JavaLangException *e) {
        
#line 188
        @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"error parsing ", [e description]));
      }
    }
  }
  
#line 193
  return nil;
}


#line 196
- (IOSByteArray *)getEncoded {
  
#line 199
  @try {
    
#line 201
    return [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
  }
  @catch (JavaIoIOException *e) {
    
#line 205
    @throw new_JavaSecurityCertCRLException_initWithNSString_([e description]);
  }
}


#line 209
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  
#line 213
  JavaSecuritySignature *sig;
  
#line 215
  @try {
    
#line 217
    sig = [((id<OrgSpongycastleJcajceUtilJcaJceHelper>) nil_chk(bcHelper_)) createSignatureWithNSString:[self getSigAlgName]];
  }
  @catch (JavaLangException *e) {
    
#line 221
    sig = JavaSecuritySignature_getInstanceWithNSString_([self getSigAlgName]);
  }
  
#line 224
  OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_doVerifyWithJavaSecurityPublicKey_withJavaSecuritySignature_(self, key, sig);
}


#line 227
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                           withNSString:(NSString *)sigProvider {
  
#line 231
  JavaSecuritySignature *sig;
  
#line 233
  if (sigProvider != nil) {
    
#line 235
    sig = JavaSecuritySignature_getInstanceWithNSString_withNSString_([self getSigAlgName], sigProvider);
  }
  else {
    
#line 239
    sig = JavaSecuritySignature_getInstanceWithNSString_([self getSigAlgName]);
  }
  
#line 242
  OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_doVerifyWithJavaSecurityPublicKey_withJavaSecuritySignature_(self, key, sig);
}


#line 245
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
               withJavaSecurityProvider:(JavaSecurityProvider *)sigProvider {
  
#line 249
  JavaSecuritySignature *sig;
  
#line 251
  if (sigProvider != nil) {
    
#line 253
    sig = JavaSecuritySignature_getInstanceWithNSString_withJavaSecurityProvider_([self getSigAlgName], sigProvider);
  }
  else {
    
#line 257
    sig = JavaSecuritySignature_getInstanceWithNSString_([self getSigAlgName]);
  }
  
#line 260
  OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_doVerifyWithJavaSecurityPublicKey_withJavaSecuritySignature_(self, key, sig);
}


#line 263
- (void)doVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                withJavaSecuritySignature:(JavaSecuritySignature *)sig {
  OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_doVerifyWithJavaSecurityPublicKey_withJavaSecuritySignature_(self, key, sig);
}


#line 281
- (jint)getVersion {
  
#line 283
  return [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getVersionNumber];
}


#line 286
- (id<JavaSecurityPrincipal>)getIssuerDN {
  
#line 288
  return new_OrgSpongycastleJceX509Principal_initWithOrgSpongycastleAsn1X500X500Name_(OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([((OrgSpongycastleAsn1X500X500Name *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getIssuer])) toASN1Primitive]));
}


#line 291
- (JavaxSecurityAuthX500X500Principal *)getIssuerX500Principal {
  
#line 293
  @try {
    
#line 295
    return new_JavaxSecurityAuthX500X500Principal_initWithByteArray_([((OrgSpongycastleAsn1X500X500Name *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getIssuer])) getEncoded]);
  }
  @catch (JavaIoIOException *e) {
    
#line 299
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"can't encode issuer DN");
  }
}


#line 303
- (JavaUtilDate *)getThisUpdate {
  
#line 305
  return [((OrgSpongycastleAsn1X509BCTime *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getThisUpdate])) getDate];
}


#line 308
- (JavaUtilDate *)getNextUpdate {
  
#line 310
  if ([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getNextUpdate] != nil) {
    
#line 312
    return [((OrgSpongycastleAsn1X509BCTime *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getNextUpdate])) getDate];
  }
  
#line 315
  return nil;
}


#line 318
- (id<JavaUtilSet>)loadCRLEntries {
  return OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_loadCRLEntries(self);
}


#line 343
- (JavaSecurityCertX509CRLEntry *)getRevokedCertificateWithJavaMathBigInteger:(JavaMathBigInteger *)serialNumber {
  
#line 345
  id<JavaUtilEnumeration> certs = [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getRevokedCertificateEnumeration];
  
#line 347
  OrgSpongycastleAsn1X500X500Name *previousCertificateIssuer = nil;
  while ([((id<JavaUtilEnumeration>) nil_chk(certs)) hasMoreElements]) {
    
#line 350
    OrgSpongycastleAsn1X509TBSCertList_CRLEntry *entry_ = (OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) cast_chk([certs nextElement], [OrgSpongycastleAsn1X509TBSCertList_CRLEntry class]);
    
#line 352
    if ([((JavaMathBigInteger *) nil_chk(serialNumber)) isEqual:[((OrgSpongycastleAsn1ASN1Integer *) nil_chk([((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) getUserCertificate])) getValue]]) {
      
#line 354
      return new_OrgSpongycastleJcajceProviderAsymmetricX509X509CRLEntryObject_initPackagePrivateWithOrgSpongycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgSpongycastleAsn1X500X500Name_(entry_, isIndirect_, previousCertificateIssuer);
    }
    
#line 357
    if (isIndirect_ && [entry_ hasExtensions]) {
      
#line 359
      OrgSpongycastleAsn1X509Extension *currentCaName = [((OrgSpongycastleAsn1X509Extensions *) nil_chk([entry_ getExtensions])) getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgSpongycastleAsn1X509Extension, certificateIssuer)];
      
#line 361
      if (currentCaName != nil) {
        
#line 363
        previousCertificateIssuer = OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(nil_chk([((OrgSpongycastleAsn1X509GeneralNames *) nil_chk(OrgSpongycastleAsn1X509GeneralNames_getInstanceWithId_([currentCaName getParsedValue]))) getNames]), 0))) getName]);
      }
    }
  }
  
#line 368
  return nil;
}


#line 371
- (id<JavaUtilSet>)getRevokedCertificates {
  
#line 373
  id<JavaUtilSet> entrySet = OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_loadCRLEntries(self);
  
#line 375
  if (![((id<JavaUtilSet>) nil_chk(entrySet)) isEmpty]) {
    
#line 377
    return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(entrySet);
  }
  
#line 380
  return nil;
}


#line 383
- (IOSByteArray *)getTBSCertList {
  
#line 386
  @try {
    
#line 388
    return [((OrgSpongycastleAsn1X509TBSCertList *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getTBSCertList])) getEncodedWithNSString:@"DER"];
  }
  @catch (JavaIoIOException *e) {
    
#line 392
    @throw new_JavaSecurityCertCRLException_initWithNSString_([e description]);
  }
}


#line 396
- (IOSByteArray *)getSignature {
  
#line 398
  return [((OrgSpongycastleAsn1DERBitString *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getSignature])) getOctets];
}


#line 401
- (NSString *)getSigAlgName {
  
#line 403
  return sigAlgName_;
}


#line 406
- (NSString *)getSigAlgOID {
  
#line 408
  return [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getSignatureAlgorithm])) getAlgorithm])) getId];
}


#line 411
- (IOSByteArray *)getSigAlgParams {
  
#line 413
  if (sigAlgParams_ != nil) {
    
#line 415
    IOSByteArray *tmp = [IOSByteArray newArrayWithLength:sigAlgParams_->size_];
    
#line 417
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sigAlgParams_, 0, tmp, 0, tmp->size_);
    
#line 419
    return tmp;
  }
  
#line 422
  return nil;
}

- (NSString *)description {
  
#line 432
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  NSString *nl = OrgSpongycastleUtilStrings_lineSeparator();
  
#line 435
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"              Version: "])) appendWithInt:[self getVersion]])) appendWithNSString:
#line 436
  nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"             IssuerDN: "])) appendWithId:[self getIssuerDN]])) appendWithNSString:
#line 438
  nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"          This update: "])) appendWithId:[self getThisUpdate]])) appendWithNSString:
#line 440
  nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"          Next update: "])) appendWithId:[self getNextUpdate]])) appendWithNSString:
#line 442
  nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"  Signature Algorithm: "])) appendWithNSString:[self getSigAlgName]])) appendWithNSString:
#line 444
  nl];
  
#line 446
  IOSByteArray *sig = [self getSignature];
  
#line 448
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            Signature: "])) appendWithNSString:[NSString java_stringWithBytes:OrgSpongycastleUtilEncodersHex_encodeWithByteArray_withInt_withInt_(
#line 449
  sig, 0, 20)]])) appendWithNSString:nl];
  for (jint i = 20; i < ((IOSByteArray *) nil_chk(sig))->size_; i += 20) {
    
#line 452
    if (i < sig->size_ - 20) {
      
#line 454
      (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"                       "])) appendWithNSString:[NSString java_stringWithBytes:OrgSpongycastleUtilEncodersHex_encodeWithByteArray_withInt_withInt_(
#line 455
      sig, i, 20)]])) appendWithNSString:nl];
    }
    else {
      
#line 459
      (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"                       "])) appendWithNSString:[NSString java_stringWithBytes:OrgSpongycastleUtilEncodersHex_encodeWithByteArray_withInt_withInt_(
#line 460
      sig, i, sig->size_ - i)]])) appendWithNSString:nl];
    }
  }
  
#line 464
  OrgSpongycastleAsn1X509Extensions *extensions = [((OrgSpongycastleAsn1X509TBSCertList *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getTBSCertList])) getExtensions];
  
#line 466
  if (extensions != nil) {
    
#line 468
    id<JavaUtilEnumeration> e = [extensions oids];
    
#line 470
    if ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
      
#line 472
      (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"           Extensions: "])) appendWithNSString:nl];
    }
    
#line 475
    while ([e hasMoreElements]) {
      
#line 477
      OrgSpongycastleAsn1ASN1ObjectIdentifier *oid = (OrgSpongycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [OrgSpongycastleAsn1ASN1ObjectIdentifier class]);
      OrgSpongycastleAsn1X509Extension *ext = [extensions getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:oid];
      
#line 480
      if ([((OrgSpongycastleAsn1X509Extension *) nil_chk(ext)) getExtnValue] != nil) {
        
#line 482
        IOSByteArray *octs = [((OrgSpongycastleAsn1ASN1OctetString *) nil_chk([ext getExtnValue])) getOctets];
        OrgSpongycastleAsn1ASN1InputStream *dIn = new_OrgSpongycastleAsn1ASN1InputStream_initWithByteArray_(octs);
        (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"                       critical("])) appendWithBoolean:
#line 485
        [ext isCritical]])) appendWithNSString:@") "];
        @try {
          
#line 488
          if ([((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) isEqual:JreLoadStatic(OrgSpongycastleAsn1X509Extension, cRLNumber)]) {
            
#line 490
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:new_OrgSpongycastleAsn1X509CRLNumber_initWithJavaMathBigInteger_(
#line 491
            [((OrgSpongycastleAsn1ASN1Integer *) nil_chk(OrgSpongycastleAsn1ASN1Integer_getInstanceWithId_(
#line 492
            [dIn readObject]))) getPositiveValue])])) appendWithNSString:
#line 493
            nl];
          }
          else if ([oid isEqual:JreLoadStatic(OrgSpongycastleAsn1X509Extension, deltaCRLIndicator)]) {
            
#line 497
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:JreStrcat("$@", @"Base CRL: ", new_OrgSpongycastleAsn1X509CRLNumber_initWithJavaMathBigInteger_(
#line 499
            [((OrgSpongycastleAsn1ASN1Integer *) nil_chk(OrgSpongycastleAsn1ASN1Integer_getInstanceWithId_(
#line 500
            [dIn readObject]))) getPositiveValue]))])) appendWithNSString:
#line 501
            nl];
          }
          else if ([oid isEqual:JreLoadStatic(OrgSpongycastleAsn1X509Extension, issuingDistributionPoint)]) {
            
#line 506
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:OrgSpongycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_(
#line 507
            [dIn readObject])])) appendWithNSString:nl];
          }
          else if ([oid isEqual:JreLoadStatic(OrgSpongycastleAsn1X509Extension, cRLDistributionPoints)]) {
            
#line 512
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:OrgSpongycastleAsn1X509CRLDistPoint_getInstanceWithId_(
#line 513
            [dIn readObject])])) appendWithNSString:nl];
          }
          else if ([oid isEqual:JreLoadStatic(OrgSpongycastleAsn1X509Extension, freshestCRL)]) {
            
#line 517
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:OrgSpongycastleAsn1X509CRLDistPoint_getInstanceWithId_(
#line 518
            [dIn readObject])])) appendWithNSString:nl];
          }
          else {
            
#line 522
            (void) [buf appendWithNSString:[oid getId]];
            (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" value = "])) appendWithNSString:OrgSpongycastleAsn1UtilASN1Dump_dumpAsStringWithId_(
#line 524
            [dIn readObject])])) appendWithNSString:
#line 525
            nl];
          }
        }
        @catch (JavaLangException *ex) {
          
#line 530
          (void) [buf appendWithNSString:[oid getId]];
          (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" value = "])) appendWithNSString:@"*****"])) appendWithNSString:nl];
        }
      }
      else {
        
#line 536
        (void) [buf appendWithNSString:nl];
      }
    }
  }
  id<JavaUtilSet> set = [self getRevokedCertificates];
  if (set != nil) {
    
#line 543
    id<JavaUtilIterator> it = [set iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      
#line 546
      (void) [buf appendWithId:[it next]];
      (void) [buf appendWithNSString:nl];
    }
  }
  return [buf description];
}


#line 560
- (jboolean)isRevokedWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert {
  
#line 562
  if (![((NSString *) nil_chk([((JavaSecurityCertCertificate *) nil_chk(cert)) getType])) isEqual:@"X.509"]) {
    
#line 564
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"X.509 CRL used with non X.509 Cert");
  }
  
#line 567
  id<JavaUtilEnumeration> certs = [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getRevokedCertificateEnumeration];
  
#line 569
  OrgSpongycastleAsn1X500X500Name *caName = [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c_)) getIssuer];
  
#line 571
  if ([((id<JavaUtilEnumeration>) nil_chk(certs)) hasMoreElements]) {
    
#line 573
    JavaMathBigInteger *serial = [((JavaSecurityCertX509Certificate *) cast_chk(cert, [JavaSecurityCertX509Certificate class])) getSerialNumber];
    
#line 575
    while ([certs hasMoreElements]) {
      
#line 577
      OrgSpongycastleAsn1X509TBSCertList_CRLEntry *entry_ = OrgSpongycastleAsn1X509TBSCertList_CRLEntry_getInstanceWithId_([certs nextElement]);
      
#line 579
      if (isIndirect_ && [((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) hasExtensions]) {
        
#line 581
        OrgSpongycastleAsn1X509Extension *currentCaName = [((OrgSpongycastleAsn1X509Extensions *) nil_chk([((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) getExtensions])) getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgSpongycastleAsn1X509Extension, certificateIssuer)];
        
#line 583
        if (currentCaName != nil) {
          
#line 585
          caName = OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(nil_chk([((OrgSpongycastleAsn1X509GeneralNames *) nil_chk(OrgSpongycastleAsn1X509GeneralNames_getInstanceWithId_([currentCaName getParsedValue]))) getNames]), 0))) getName]);
        }
      }
      
#line 589
      if ([((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1ASN1Integer *) nil_chk([((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) getUserCertificate])) getValue])) isEqual:serial]) {
        
#line 591
        OrgSpongycastleAsn1X500X500Name *issuer;
        
#line 593
        if ([cert isKindOfClass:[JavaSecurityCertX509Certificate class]]) {
          
#line 595
          issuer = OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([((JavaxSecurityAuthX500X500Principal *) nil_chk([((JavaSecurityCertX509Certificate *) cert) getIssuerX500Principal])) getEncoded]);
        }
        else {
          
#line 599
          @try {
            
#line 601
            issuer = [((OrgSpongycastleAsn1X509Certificate *) nil_chk(OrgSpongycastleAsn1X509Certificate_getInstanceWithId_([cert getEncoded]))) getIssuer];
          }
          @catch (JavaSecurityCertCertificateEncodingException *e) {
            
#line 605
            @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Cannot process certificate: ", [e getMessage]));
          }
        }
        
#line 609
        if (![((OrgSpongycastleAsn1X500X500Name *) nil_chk(caName)) isEqual:issuer]) {
          
#line 611
          return false;
        }
        
#line 614
        return true;
      }
    }
  }
  
#line 619
  return false;
}


#line 622
- (jboolean)isEqual:(id)other {
  
#line 624
  if (JreObjectEqualsEquals(self, other)) {
    
#line 626
    return true;
  }
  
#line 629
  if (!([other isKindOfClass:[JavaSecurityCertX509CRL class]])) {
    
#line 631
    return false;
  }
  
#line 634
  if ([other isKindOfClass:[OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject class]]) {
    
#line 636
    OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject *crlObject = (OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject *) other;
    
#line 638
    if (isHashCodeSet_) {
      
#line 640
      jboolean otherIsHashCodeSet = ((OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject *) nil_chk(crlObject))->isHashCodeSet_;
      if (otherIsHashCodeSet) {
        
#line 643
        if (crlObject->hashCodeValue_ != hashCodeValue_) {
          
#line 645
          return false;
        }
      }
    }
    
#line 650
    return [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(self->c_)) isEqual:((OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject *) nil_chk(crlObject))->c_];
  }
  
#line 653
  return [super isEqual:other];
}


#line 656
- (NSUInteger)hash {
  
#line 658
  if (!isHashCodeSet_) {
    
#line 660
    isHashCodeSet_ = true;
    hashCodeValue_ = ((jint) [super hash]);
  }
  
#line 664
  return hashCodeValue_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x8, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 11, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 12, 13, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, 13, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPrincipal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxSecurityAuthX500X500Principal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertX509CRLEntry;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 23, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(isIndirectCRLWithJavaSecurityCertX509CRL:);
  methods[1].selector = @selector(initPackagePrivateWithOrgSpongycastleJcajceUtilJcaJceHelper:withOrgSpongycastleAsn1X509CertificateList:);
  methods[2].selector = @selector(hasUnsupportedCriticalExtension);
  methods[3].selector = @selector(getExtensionOIDsWithBoolean:);
  methods[4].selector = @selector(getCriticalExtensionOIDs);
  methods[5].selector = @selector(getNonCriticalExtensionOIDs);
  methods[6].selector = @selector(getExtensionValueWithNSString:);
  methods[7].selector = @selector(getEncoded);
  methods[8].selector = @selector(verifyWithJavaSecurityPublicKey:);
  methods[9].selector = @selector(verifyWithJavaSecurityPublicKey:withNSString:);
  methods[10].selector = @selector(verifyWithJavaSecurityPublicKey:withJavaSecurityProvider:);
  methods[11].selector = @selector(doVerifyWithJavaSecurityPublicKey:withJavaSecuritySignature:);
  methods[12].selector = @selector(getVersion);
  methods[13].selector = @selector(getIssuerDN);
  methods[14].selector = @selector(getIssuerX500Principal);
  methods[15].selector = @selector(getThisUpdate);
  methods[16].selector = @selector(getNextUpdate);
  methods[17].selector = @selector(loadCRLEntries);
  methods[18].selector = @selector(getRevokedCertificateWithJavaMathBigInteger:);
  methods[19].selector = @selector(getRevokedCertificates);
  methods[20].selector = @selector(getTBSCertList);
  methods[21].selector = @selector(getSignature);
  methods[22].selector = @selector(getSigAlgName);
  methods[23].selector = @selector(getSigAlgOID);
  methods[24].selector = @selector(getSigAlgParams);
  methods[25].selector = @selector(description);
  methods[26].selector = @selector(isRevokedWithJavaSecurityCertCertificate:);
  methods[27].selector = @selector(isEqual:);
  methods[28].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bcHelper_", "LOrgSpongycastleJcajceUtilJcaJceHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "c_", "LOrgSpongycastleAsn1X509CertificateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sigAlgName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sigAlgParams_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isIndirect_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isHashCodeSet_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashCodeValue_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isIndirectCRL", "LJavaSecurityCertX509CRL;", "LJavaSecurityCertCRLException;", "LOrgSpongycastleJcajceUtilJcaJceHelper;LOrgSpongycastleAsn1X509CertificateList;", "getExtensionOIDs", "Z", "getExtensionValue", "LNSString;", "verify", "LJavaSecurityPublicKey;", "LJavaSecurityCertCRLException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;LJavaSecurityNoSuchProviderException;LJavaSecuritySignatureException;", "LJavaSecurityPublicKey;LNSString;", "LJavaSecurityPublicKey;LJavaSecurityProvider;", "LJavaSecurityCertCRLException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;LJavaSecuritySignatureException;", "doVerify", "LJavaSecurityPublicKey;LJavaSecuritySignature;", "getRevokedCertificate", "LJavaMathBigInteger;", "toString", "isRevoked", "LJavaSecurityCertCertificate;", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject = { "X509CRLObject", "org.spongycastle.jcajce.provider.asymmetric.x509", ptrTable, methods, fields, 7, 0x0, 29, 7, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject;
}

@end


#line 69
jboolean OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_isIndirectCRLWithJavaSecurityCertX509CRL_(JavaSecurityCertX509CRL *crl) {
  OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_initialize();
  
#line 72
  @try {
    
#line 74
    IOSByteArray *idp = [((JavaSecurityCertX509CRL *) nil_chk(crl)) getExtensionValueWithNSString:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, issuingDistributionPoint))) getId]];
    return idp != nil &&
#line 76
    [((OrgSpongycastleAsn1X509IssuingDistributionPoint *) nil_chk(OrgSpongycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_([((OrgSpongycastleAsn1ASN1OctetString *) nil_chk(OrgSpongycastleAsn1ASN1OctetString_getInstanceWithId_(idp))) getOctets]))) isIndirectCRL];
  }
  @catch (JavaLangException *e) {
    
#line 80
    @throw new_OrgSpongycastleJcajceProviderAsymmetricX509ExtCRLException_initPackagePrivateWithNSString_withJavaLangThrowable_(
#line 81
    @"Exception reading IssuingDistributionPoint", e);
  }
}


#line 85
void OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_initPackagePrivateWithOrgSpongycastleJcajceUtilJcaJceHelper_withOrgSpongycastleAsn1X509CertificateList_(OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject *self, id<OrgSpongycastleJcajceUtilJcaJceHelper> bcHelper, OrgSpongycastleAsn1X509CertificateList *c) {
  JavaSecurityCertX509CRL_init(self);
  self->isHashCodeSet_ =
#line 66
  false;
  
#line 90
  self->bcHelper_ = bcHelper;
  self->c_ = c;
  
#line 93
  @try {
    
#line 95
    self->sigAlgName_ = OrgSpongycastleJcajceProviderAsymmetricX509X509SignatureUtil_getSignatureNameWithOrgSpongycastleAsn1X509AlgorithmIdentifier_([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(c)) getSignatureAlgorithm]);
    
#line 97
    if ([((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([c getSignatureAlgorithm])) getParameters] != nil) {
      
#line 99
      self->sigAlgParams_ = [((OrgSpongycastleAsn1ASN1Primitive *) nil_chk([((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk(([((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([c getSignatureAlgorithm])) getParameters]))) toASN1Primitive])) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
    }
    else {
      
#line 103
      self->sigAlgParams_ = nil;
    }
    
#line 106
    self->isIndirect_ = OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_isIndirectCRLWithJavaSecurityCertX509CRL_(self);
  }
  @catch (JavaLangException *e) {
    
#line 110
    @throw new_JavaSecurityCertCRLException_initWithNSString_(JreStrcat("$@", @"CRL contents invalid: ", e));
  }
}


#line 85
OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject *new_OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_initPackagePrivateWithOrgSpongycastleJcajceUtilJcaJceHelper_withOrgSpongycastleAsn1X509CertificateList_(id<OrgSpongycastleJcajceUtilJcaJceHelper> bcHelper, OrgSpongycastleAsn1X509CertificateList *c) {
  J2OBJC_NEW_IMPL(OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject, initPackagePrivateWithOrgSpongycastleJcajceUtilJcaJceHelper_withOrgSpongycastleAsn1X509CertificateList_, bcHelper, c)
}


#line 85
OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject *create_OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_initPackagePrivateWithOrgSpongycastleJcajceUtilJcaJceHelper_withOrgSpongycastleAsn1X509CertificateList_(id<OrgSpongycastleJcajceUtilJcaJceHelper> bcHelper, OrgSpongycastleAsn1X509CertificateList *c) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject, initPackagePrivateWithOrgSpongycastleJcajceUtilJcaJceHelper_withOrgSpongycastleAsn1X509CertificateList_, bcHelper, c)
}


#line 133
id<JavaUtilSet> OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_getExtensionOIDsWithBoolean_(OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject *self, jboolean critical) {
  
#line 135
  if ([self getVersion] == 2) {
    
#line 137
    OrgSpongycastleAsn1X509Extensions *extensions = [((OrgSpongycastleAsn1X509TBSCertList *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(self->c_)) getTBSCertList])) getExtensions];
    
#line 139
    if (extensions != nil) {
      
#line 141
      id<JavaUtilSet> set = new_JavaUtilHashSet_init();
      id<JavaUtilEnumeration> e = [extensions oids];
      
#line 144
      while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
        
#line 146
        OrgSpongycastleAsn1ASN1ObjectIdentifier *oid = (OrgSpongycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [OrgSpongycastleAsn1ASN1ObjectIdentifier class]);
        OrgSpongycastleAsn1X509Extension *ext = [extensions getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:oid];
        
#line 149
        if (critical == [((OrgSpongycastleAsn1X509Extension *) nil_chk(ext)) isCritical]) {
          
#line 151
          [set addWithId:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) getId]];
        }
      }
      
#line 155
      return set;
    }
  }
  
#line 159
  return nil;
}


#line 263
void OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_doVerifyWithJavaSecurityPublicKey_withJavaSecuritySignature_(OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject *self, id<JavaSecurityPublicKey> key, JavaSecuritySignature *sig) {
  
#line 267
  if (![((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(self->c_)) getSignatureAlgorithm])) isEqual:[((OrgSpongycastleAsn1X509TBSCertList *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(self->c_)) getTBSCertList])) getSignature]]) {
    
#line 269
    @throw new_JavaSecurityCertCRLException_initWithNSString_(@"Signature algorithm on CertificateList does not match TBSCertList.");
  }
  
#line 272
  [((JavaSecuritySignature *) nil_chk(sig)) initVerifyWithJavaSecurityPublicKey:key];
  [sig updateWithByteArray:[self getTBSCertList]];
  
#line 275
  if (![sig verifyWithByteArray:[self getSignature]]) {
    
#line 277
    @throw new_JavaSecuritySignatureException_initWithNSString_(@"CRL does not verify with supplied public key.");
  }
}


#line 318
id<JavaUtilSet> OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject_loadCRLEntries(OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject *self) {
  
#line 320
  id<JavaUtilSet> entrySet = new_JavaUtilHashSet_init();
  id<JavaUtilEnumeration> certs = [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(self->c_)) getRevokedCertificateEnumeration];
  
#line 323
  OrgSpongycastleAsn1X500X500Name *previousCertificateIssuer = nil;
  while ([((id<JavaUtilEnumeration>) nil_chk(certs)) hasMoreElements]) {
    
#line 326
    OrgSpongycastleAsn1X509TBSCertList_CRLEntry *entry_ = (OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) cast_chk([certs nextElement], [OrgSpongycastleAsn1X509TBSCertList_CRLEntry class]);
    OrgSpongycastleJcajceProviderAsymmetricX509X509CRLEntryObject *crlEntry = new_OrgSpongycastleJcajceProviderAsymmetricX509X509CRLEntryObject_initPackagePrivateWithOrgSpongycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgSpongycastleAsn1X500X500Name_(entry_, self->isIndirect_, previousCertificateIssuer);
    [entrySet addWithId:crlEntry];
    if (self->isIndirect_ && [((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) hasExtensions]) {
      
#line 331
      OrgSpongycastleAsn1X509Extension *currentCaName = [((OrgSpongycastleAsn1X509Extensions *) nil_chk([((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) getExtensions])) getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgSpongycastleAsn1X509Extension, certificateIssuer)];
      
#line 333
      if (currentCaName != nil) {
        
#line 335
        previousCertificateIssuer = OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(nil_chk([((OrgSpongycastleAsn1X509GeneralNames *) nil_chk(OrgSpongycastleAsn1X509GeneralNames_getInstanceWithId_([currentCaName getParsedValue]))) getNames]), 0))) getName]);
      }
    }
  }
  
#line 340
  return entrySet;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleJcajceProviderAsymmetricX509X509CRLObject)
