//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/math/ec/Tnaf.java
//

#include "ECConstants.h"
#include "ECCurve.h"
#include "ECFieldElement.h"
#include "ECPoint.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SimpleBigDecimal.h"
#include "Tnaf.h"
#include "ZTauElement.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"

#if !__has_feature(objc_arc)
#error "Tnaf must be compiled with ARC (-fobjc-arc)"
#endif

inline JavaMathBigInteger *OrgSpongycastleMathEcTnaf_get_MINUS_ONE(void);
static JavaMathBigInteger *OrgSpongycastleMathEcTnaf_MINUS_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleMathEcTnaf, MINUS_ONE, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleMathEcTnaf_get_MINUS_TWO(void);
static JavaMathBigInteger *OrgSpongycastleMathEcTnaf_MINUS_TWO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleMathEcTnaf, MINUS_TWO, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleMathEcTnaf_get_MINUS_THREE(void);
static JavaMathBigInteger *OrgSpongycastleMathEcTnaf_MINUS_THREE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleMathEcTnaf, MINUS_THREE, JavaMathBigInteger *)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/math/ec/Tnaf.java"

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleMathEcTnaf)

IOSObjectArray *OrgSpongycastleMathEcTnaf_alpha0;
IOSObjectArray *OrgSpongycastleMathEcTnaf_alpha0Tnaf;
IOSObjectArray *OrgSpongycastleMathEcTnaf_alpha1;
IOSObjectArray *OrgSpongycastleMathEcTnaf_alpha1Tnaf;


#line 12
@implementation OrgSpongycastleMathEcTnaf


#line 12
- (instancetype)initPackagePrivate {
  OrgSpongycastleMathEcTnaf_initPackagePrivate(self);
  return self;
}


#line 82
+ (JavaMathBigInteger *)normWithByte:(jbyte)mu
withOrgSpongycastleMathEcZTauElement:(OrgSpongycastleMathEcZTauElement *)lambda {
  return OrgSpongycastleMathEcTnaf_normWithByte_withOrgSpongycastleMathEcZTauElement_(mu, lambda);
}


#line 123
+ (OrgSpongycastleMathEcSimpleBigDecimal *)normWithByte:(jbyte)mu
              withOrgSpongycastleMathEcSimpleBigDecimal:(OrgSpongycastleMathEcSimpleBigDecimal *)u
              withOrgSpongycastleMathEcSimpleBigDecimal:(OrgSpongycastleMathEcSimpleBigDecimal *)v {
  return OrgSpongycastleMathEcTnaf_normWithByte_withOrgSpongycastleMathEcSimpleBigDecimal_withOrgSpongycastleMathEcSimpleBigDecimal_(mu, u, v);
}


#line 166
+ (OrgSpongycastleMathEcZTauElement *)roundWithOrgSpongycastleMathEcSimpleBigDecimal:(OrgSpongycastleMathEcSimpleBigDecimal *)lambda0
                                           withOrgSpongycastleMathEcSimpleBigDecimal:(OrgSpongycastleMathEcSimpleBigDecimal *)lambda1
                                                                            withByte:(jbyte)mu {
  return OrgSpongycastleMathEcTnaf_roundWithOrgSpongycastleMathEcSimpleBigDecimal_withOrgSpongycastleMathEcSimpleBigDecimal_withByte_(lambda0, lambda1, mu);
}


#line 283
+ (OrgSpongycastleMathEcSimpleBigDecimal *)approximateDivisionByNWithJavaMathBigInteger:(JavaMathBigInteger *)k
                                                                 withJavaMathBigInteger:(JavaMathBigInteger *)s
                                                                 withJavaMathBigInteger:(JavaMathBigInteger *)vm
                                                                               withByte:(jbyte)a
                                                                                withInt:(jint)m
                                                                                withInt:(jint)c {
  return OrgSpongycastleMathEcTnaf_approximateDivisionByNWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withByte_withInt_withInt_(k, s, vm, a, m, c);
}


#line 314
+ (IOSByteArray *)tauAdicNafWithByte:(jbyte)mu
withOrgSpongycastleMathEcZTauElement:(OrgSpongycastleMathEcZTauElement *)lambda {
  return OrgSpongycastleMathEcTnaf_tauAdicNafWithByte_withOrgSpongycastleMathEcZTauElement_(mu, lambda);
}


#line 393
+ (OrgSpongycastleMathEcECPoint_AbstractF2m *)tauWithOrgSpongycastleMathEcECPoint_AbstractF2m:(OrgSpongycastleMathEcECPoint_AbstractF2m *)p {
  return OrgSpongycastleMathEcTnaf_tauWithOrgSpongycastleMathEcECPoint_AbstractF2m_(p);
}


#line 408
+ (jbyte)getMuWithOrgSpongycastleMathEcECCurve_AbstractF2m:(OrgSpongycastleMathEcECCurve_AbstractF2m *)curve {
  return OrgSpongycastleMathEcTnaf_getMuWithOrgSpongycastleMathEcECCurve_AbstractF2m_(curve);
}


#line 423
+ (jbyte)getMuWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)curveA {
  return OrgSpongycastleMathEcTnaf_getMuWithOrgSpongycastleMathEcECFieldElement_(curveA);
}


#line 428
+ (jbyte)getMuWithInt:(jint)curveA {
  return OrgSpongycastleMathEcTnaf_getMuWithInt_(curveA);
}


#line 447
+ (IOSObjectArray *)getLucasWithByte:(jbyte)mu
                             withInt:(jint)k
                         withBoolean:(jboolean)doV {
  return OrgSpongycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, k, doV);
}


#line 502
+ (JavaMathBigInteger *)getTwWithByte:(jbyte)mu
                              withInt:(jint)w {
  return OrgSpongycastleMathEcTnaf_getTwWithByte_withInt_(mu, w);
}


#line 538
+ (IOSObjectArray *)getSiWithOrgSpongycastleMathEcECCurve_AbstractF2m:(OrgSpongycastleMathEcECCurve_AbstractF2m *)curve {
  return OrgSpongycastleMathEcTnaf_getSiWithOrgSpongycastleMathEcECCurve_AbstractF2m_(curve);
}


#line 563
+ (IOSObjectArray *)getSiWithInt:(jint)fieldSize
                         withInt:(jint)curveA
          withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  return OrgSpongycastleMathEcTnaf_getSiWithInt_withInt_withJavaMathBigInteger_(fieldSize, curveA, cofactor);
}


#line 581
+ (jint)getShiftsForCofactorWithJavaMathBigInteger:(JavaMathBigInteger *)h {
  return OrgSpongycastleMathEcTnaf_getShiftsForCofactorWithJavaMathBigInteger_(h);
}


#line 611
+ (OrgSpongycastleMathEcZTauElement *)partModReductionWithJavaMathBigInteger:(JavaMathBigInteger *)k
                                                                     withInt:(jint)m
                                                                    withByte:(jbyte)a
                                                 withJavaMathBigIntegerArray:(IOSObjectArray *)s
                                                                    withByte:(jbyte)mu
                                                                    withByte:(jbyte)c {
  return OrgSpongycastleMathEcTnaf_partModReductionWithJavaMathBigInteger_withInt_withByte_withJavaMathBigIntegerArray_withByte_withByte_(k, m, a, s, mu, c);
}


#line 654
+ (OrgSpongycastleMathEcECPoint_AbstractF2m *)multiplyRTnafWithOrgSpongycastleMathEcECPoint_AbstractF2m:(OrgSpongycastleMathEcECPoint_AbstractF2m *)p
                                                                                 withJavaMathBigInteger:(JavaMathBigInteger *)k {
  return OrgSpongycastleMathEcTnaf_multiplyRTnafWithOrgSpongycastleMathEcECPoint_AbstractF2m_withJavaMathBigInteger_(p, k);
}


#line 675
+ (OrgSpongycastleMathEcECPoint_AbstractF2m *)multiplyTnafWithOrgSpongycastleMathEcECPoint_AbstractF2m:(OrgSpongycastleMathEcECPoint_AbstractF2m *)p
                                                                  withOrgSpongycastleMathEcZTauElement:(OrgSpongycastleMathEcZTauElement *)lambda {
  return OrgSpongycastleMathEcTnaf_multiplyTnafWithOrgSpongycastleMathEcECPoint_AbstractF2m_withOrgSpongycastleMathEcZTauElement_(p, lambda);
}


#line 695
+ (OrgSpongycastleMathEcECPoint_AbstractF2m *)multiplyFromTnafWithOrgSpongycastleMathEcECPoint_AbstractF2m:(OrgSpongycastleMathEcECPoint_AbstractF2m *)p
                                                                                             withByteArray:(IOSByteArray *)u {
  return OrgSpongycastleMathEcTnaf_multiplyFromTnafWithOrgSpongycastleMathEcECPoint_AbstractF2m_withByteArray_(p, u);
}


#line 735
+ (IOSByteArray *)tauAdicWNafWithByte:(jbyte)mu
 withOrgSpongycastleMathEcZTauElement:(OrgSpongycastleMathEcZTauElement *)lambda
                             withByte:(jbyte)width
               withJavaMathBigInteger:(JavaMathBigInteger *)pow2w
               withJavaMathBigInteger:(JavaMathBigInteger *)tw
withOrgSpongycastleMathEcZTauElementArray:(IOSObjectArray *)alpha {
  return OrgSpongycastleMathEcTnaf_tauAdicWNafWithByte_withOrgSpongycastleMathEcZTauElement_withByte_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcZTauElementArray_(mu, lambda, width, pow2w, tw, alpha);
}


#line 832
+ (IOSObjectArray *)getPreCompWithOrgSpongycastleMathEcECPoint_AbstractF2m:(OrgSpongycastleMathEcECPoint_AbstractF2m *)p
                                                                  withByte:(jbyte)a {
  return OrgSpongycastleMathEcTnaf_getPreCompWithOrgSpongycastleMathEcECPoint_AbstractF2m_withByte_(p, a);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcSimpleBigDecimal;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcZTauElement;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcSimpleBigDecimal;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 7, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint_AbstractF2m;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 10, 12, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 10, 13, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x9, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x9, 18, 11, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "I", 0xc, 20, 21, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcZTauElement;", 0x9, 22, 23, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint_AbstractF2m;", 0x9, 24, 25, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint_AbstractF2m;", 0x9, 26, 27, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint_AbstractF2m;", 0x9, 28, 29, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 30, 31, -1, -1, -1, -1 },
    { NULL, "[LOrgSpongycastleMathEcECPoint_AbstractF2m;", 0x9, 32, 33, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(normWithByte:withOrgSpongycastleMathEcZTauElement:);
  methods[2].selector = @selector(normWithByte:withOrgSpongycastleMathEcSimpleBigDecimal:withOrgSpongycastleMathEcSimpleBigDecimal:);
  methods[3].selector = @selector(roundWithOrgSpongycastleMathEcSimpleBigDecimal:withOrgSpongycastleMathEcSimpleBigDecimal:withByte:);
  methods[4].selector = @selector(approximateDivisionByNWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withByte:withInt:withInt:);
  methods[5].selector = @selector(tauAdicNafWithByte:withOrgSpongycastleMathEcZTauElement:);
  methods[6].selector = @selector(tauWithOrgSpongycastleMathEcECPoint_AbstractF2m:);
  methods[7].selector = @selector(getMuWithOrgSpongycastleMathEcECCurve_AbstractF2m:);
  methods[8].selector = @selector(getMuWithOrgSpongycastleMathEcECFieldElement:);
  methods[9].selector = @selector(getMuWithInt:);
  methods[10].selector = @selector(getLucasWithByte:withInt:withBoolean:);
  methods[11].selector = @selector(getTwWithByte:withInt:);
  methods[12].selector = @selector(getSiWithOrgSpongycastleMathEcECCurve_AbstractF2m:);
  methods[13].selector = @selector(getSiWithInt:withInt:withJavaMathBigInteger:);
  methods[14].selector = @selector(getShiftsForCofactorWithJavaMathBigInteger:);
  methods[15].selector = @selector(partModReductionWithJavaMathBigInteger:withInt:withByte:withJavaMathBigIntegerArray:withByte:withByte:);
  methods[16].selector = @selector(multiplyRTnafWithOrgSpongycastleMathEcECPoint_AbstractF2m:withJavaMathBigInteger:);
  methods[17].selector = @selector(multiplyTnafWithOrgSpongycastleMathEcECPoint_AbstractF2m:withOrgSpongycastleMathEcZTauElement:);
  methods[18].selector = @selector(multiplyFromTnafWithOrgSpongycastleMathEcECPoint_AbstractF2m:withByteArray:);
  methods[19].selector = @selector(tauAdicWNafWithByte:withOrgSpongycastleMathEcZTauElement:withByte:withJavaMathBigInteger:withJavaMathBigInteger:withOrgSpongycastleMathEcZTauElementArray:);
  methods[20].selector = @selector(getPreCompWithOrgSpongycastleMathEcECPoint_AbstractF2m:withByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MINUS_ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "MINUS_TWO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "MINUS_THREE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "WIDTH", "B", .constantValue.asChar = OrgSpongycastleMathEcTnaf_WIDTH, 0x19, -1, -1, -1, -1 },
    { "POW_2_WIDTH", "B", .constantValue.asChar = OrgSpongycastleMathEcTnaf_POW_2_WIDTH, 0x19, -1, -1, -1, -1 },
    { "alpha0", "[LOrgSpongycastleMathEcZTauElement;", .constantValue.asLong = 0, 0x19, -1, 37, -1, -1 },
    { "alpha0Tnaf", "[[B", .constantValue.asLong = 0, 0x19, -1, 38, -1, -1 },
    { "alpha1", "[LOrgSpongycastleMathEcZTauElement;", .constantValue.asLong = 0, 0x19, -1, 39, -1, -1 },
    { "alpha1Tnaf", "[[B", .constantValue.asLong = 0, 0x19, -1, 40, -1, -1 },
  };
  static const void *ptrTable[] = { "norm", "BLOrgSpongycastleMathEcZTauElement;", "BLOrgSpongycastleMathEcSimpleBigDecimal;LOrgSpongycastleMathEcSimpleBigDecimal;", "round", "LOrgSpongycastleMathEcSimpleBigDecimal;LOrgSpongycastleMathEcSimpleBigDecimal;B", "approximateDivisionByN", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;BII", "tauAdicNaf", "tau", "LOrgSpongycastleMathEcECPoint_AbstractF2m;", "getMu", "LOrgSpongycastleMathEcECCurve_AbstractF2m;", "LOrgSpongycastleMathEcECFieldElement;", "I", "getLucas", "BIZ", "getTw", "BI", "getSi", "IILJavaMathBigInteger;", "getShiftsForCofactor", "LJavaMathBigInteger;", "partModReduction", "LJavaMathBigInteger;IB[LJavaMathBigInteger;BB", "multiplyRTnaf", "LOrgSpongycastleMathEcECPoint_AbstractF2m;LJavaMathBigInteger;", "multiplyTnaf", "LOrgSpongycastleMathEcECPoint_AbstractF2m;LOrgSpongycastleMathEcZTauElement;", "multiplyFromTnaf", "LOrgSpongycastleMathEcECPoint_AbstractF2m;[B", "tauAdicWNaf", "BLOrgSpongycastleMathEcZTauElement;BLJavaMathBigInteger;LJavaMathBigInteger;[LOrgSpongycastleMathEcZTauElement;", "getPreComp", "LOrgSpongycastleMathEcECPoint_AbstractF2m;B", &OrgSpongycastleMathEcTnaf_MINUS_ONE, &OrgSpongycastleMathEcTnaf_MINUS_TWO, &OrgSpongycastleMathEcTnaf_MINUS_THREE, &OrgSpongycastleMathEcTnaf_alpha0, &OrgSpongycastleMathEcTnaf_alpha0Tnaf, &OrgSpongycastleMathEcTnaf_alpha1, &OrgSpongycastleMathEcTnaf_alpha1Tnaf };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcTnaf = { "Tnaf", "org.spongycastle.math.ec", ptrTable, methods, fields, 7, 0x0, 21, 9, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleMathEcTnaf;
}

+ (void)initialize {
  if (self == [OrgSpongycastleMathEcTnaf class]) {
    OrgSpongycastleMathEcTnaf_MINUS_ONE =
#line 14
    [((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE))) negate];
    OrgSpongycastleMathEcTnaf_MINUS_TWO =
#line 15
    [((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgSpongycastleMathEcECConstants, TWO))) negate];
    OrgSpongycastleMathEcTnaf_MINUS_THREE =
#line 16
    [((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgSpongycastleMathEcECConstants, THREE))) negate];
    OrgSpongycastleMathEcTnaf_alpha0 = [IOSObjectArray newArrayWithObjects:(id[]){
#line 40
      nil, create_OrgSpongycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE), JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO)),
#line 41
      nil, create_OrgSpongycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(
#line 42
      OrgSpongycastleMathEcTnaf_MINUS_THREE, OrgSpongycastleMathEcTnaf_MINUS_ONE), nil, create_OrgSpongycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(
#line 43
      OrgSpongycastleMathEcTnaf_MINUS_ONE, OrgSpongycastleMathEcTnaf_MINUS_ONE), nil, create_OrgSpongycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE),
#line 44
      OrgSpongycastleMathEcTnaf_MINUS_ONE), nil } count:9 type:OrgSpongycastleMathEcZTauElement_class_()];
      OrgSpongycastleMathEcTnaf_alpha0Tnaf = [IOSObjectArray newArrayWithObjects:(id[]){
#line 52
        nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ 1 } count:1], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ -1, 0, 1 } count:3], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ 1, 0, 1 } count:3], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ -1, 0, 0, 1 } count:4] } count:8 type:IOSClass_byteArray(1)];
        OrgSpongycastleMathEcTnaf_alpha1 = [IOSObjectArray newArrayWithObjects:(id[]){
#line 59
          nil, create_OrgSpongycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE), JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO)),
#line 60
          nil, create_OrgSpongycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(
#line 61
          OrgSpongycastleMathEcTnaf_MINUS_THREE, JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)), nil, create_OrgSpongycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(
#line 62
          OrgSpongycastleMathEcTnaf_MINUS_ONE, JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)), nil, create_OrgSpongycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE), JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)),
#line 63
          nil } count:9 type:OrgSpongycastleMathEcZTauElement_class_()];
          OrgSpongycastleMathEcTnaf_alpha1Tnaf = [IOSObjectArray newArrayWithObjects:(id[]){
#line 71
            nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ 1 } count:1], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ -1, 0, 1 } count:3], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ 1, 0, 1 } count:3], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ -1, 0, 0, -1 } count:4] } count:8 type:IOSClass_byteArray(1)];
            J2OBJC_SET_INITIALIZED(OrgSpongycastleMathEcTnaf)
          }
        }

@end


#line 12
void OrgSpongycastleMathEcTnaf_initPackagePrivate(OrgSpongycastleMathEcTnaf *self) {
  NSObject_init(self);
}


#line 12
OrgSpongycastleMathEcTnaf *new_OrgSpongycastleMathEcTnaf_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcTnaf, initPackagePrivate)
}


#line 12
OrgSpongycastleMathEcTnaf *create_OrgSpongycastleMathEcTnaf_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcTnaf, initPackagePrivate)
}


#line 82
JavaMathBigInteger *OrgSpongycastleMathEcTnaf_normWithByte_withOrgSpongycastleMathEcZTauElement_(jbyte mu, OrgSpongycastleMathEcZTauElement *lambda) {
  OrgSpongycastleMathEcTnaf_initialize();
  JavaMathBigInteger *norm;
  
#line 87
  JavaMathBigInteger *s1 = [((JavaMathBigInteger *) nil_chk(((OrgSpongycastleMathEcZTauElement *) nil_chk(lambda))->u_)) multiplyWithJavaMathBigInteger:lambda->u_];
  
#line 90
  JavaMathBigInteger *s2 = [lambda->u_ multiplyWithJavaMathBigInteger:lambda->v_];
  
#line 93
  JavaMathBigInteger *s3 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(lambda->v_)) multiplyWithJavaMathBigInteger:lambda->v_])) shiftLeftWithInt:1];
  
#line 95
  if (mu == 1) {
    
#line 97
    norm = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(s1)) addWithJavaMathBigInteger:s2])) addWithJavaMathBigInteger:s3];
  }
  else if (mu == -1) {
    
#line 101
    norm = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(s1)) subtractWithJavaMathBigInteger:s2])) addWithJavaMathBigInteger:s3];
  }
  else {
    
#line 105
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  
#line 108
  return norm;
}


#line 123
OrgSpongycastleMathEcSimpleBigDecimal *OrgSpongycastleMathEcTnaf_normWithByte_withOrgSpongycastleMathEcSimpleBigDecimal_withOrgSpongycastleMathEcSimpleBigDecimal_(jbyte mu, OrgSpongycastleMathEcSimpleBigDecimal *u, OrgSpongycastleMathEcSimpleBigDecimal *v) {
  OrgSpongycastleMathEcTnaf_initialize();
  
#line 126
  OrgSpongycastleMathEcSimpleBigDecimal *norm;
  
#line 129
  OrgSpongycastleMathEcSimpleBigDecimal *s1 = [((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(u)) multiplyWithOrgSpongycastleMathEcSimpleBigDecimal:u];
  
#line 132
  OrgSpongycastleMathEcSimpleBigDecimal *s2 = [u multiplyWithOrgSpongycastleMathEcSimpleBigDecimal:v];
  
#line 135
  OrgSpongycastleMathEcSimpleBigDecimal *s3 = [((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk([((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(v)) multiplyWithOrgSpongycastleMathEcSimpleBigDecimal:v])) shiftLeftWithInt:1];
  
#line 137
  if (mu == 1) {
    
#line 139
    norm = [((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk([((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(s1)) addWithOrgSpongycastleMathEcSimpleBigDecimal:s2])) addWithOrgSpongycastleMathEcSimpleBigDecimal:s3];
  }
  else if (mu == -1) {
    
#line 143
    norm = [((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk([((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(s1)) subtractWithOrgSpongycastleMathEcSimpleBigDecimal:s2])) addWithOrgSpongycastleMathEcSimpleBigDecimal:s3];
  }
  else {
    
#line 147
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  
#line 150
  return norm;
}


#line 166
OrgSpongycastleMathEcZTauElement *OrgSpongycastleMathEcTnaf_roundWithOrgSpongycastleMathEcSimpleBigDecimal_withOrgSpongycastleMathEcSimpleBigDecimal_withByte_(OrgSpongycastleMathEcSimpleBigDecimal *lambda0, OrgSpongycastleMathEcSimpleBigDecimal *lambda1, jbyte mu) {
  OrgSpongycastleMathEcTnaf_initialize();
  
#line 169
  jint scale_ = [((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(lambda0)) getScale];
  if ([((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(lambda1)) getScale] != scale_) {
    
#line 172
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"lambda0 and lambda1 do not have same scale");
  }
  
#line 176
  if (!((mu == 1) || (mu == -1))) {
    
#line 178
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  
#line 181
  JavaMathBigInteger *f0 = [lambda0 round];
  JavaMathBigInteger *f1 = [lambda1 round];
  
#line 184
  OrgSpongycastleMathEcSimpleBigDecimal *eta0 = [lambda0 subtractWithJavaMathBigInteger:f0];
  OrgSpongycastleMathEcSimpleBigDecimal *eta1 = [lambda1 subtractWithJavaMathBigInteger:f1];
  
#line 188
  OrgSpongycastleMathEcSimpleBigDecimal *eta = [((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(eta0)) addWithOrgSpongycastleMathEcSimpleBigDecimal:eta0];
  if (mu == 1) {
    
#line 191
    eta = [((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(eta)) addWithOrgSpongycastleMathEcSimpleBigDecimal:eta1];
  }
  else {
    
#line 196
    eta = [((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(eta)) subtractWithOrgSpongycastleMathEcSimpleBigDecimal:eta1];
  }
  
#line 201
  OrgSpongycastleMathEcSimpleBigDecimal *threeEta1 = [((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk([((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(eta1)) addWithOrgSpongycastleMathEcSimpleBigDecimal:eta1])) addWithOrgSpongycastleMathEcSimpleBigDecimal:eta1];
  OrgSpongycastleMathEcSimpleBigDecimal *fourEta1 = [((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(threeEta1)) addWithOrgSpongycastleMathEcSimpleBigDecimal:eta1];
  OrgSpongycastleMathEcSimpleBigDecimal *check1;
  OrgSpongycastleMathEcSimpleBigDecimal *check2;
  if (mu == 1) {
    
#line 207
    check1 = [eta0 subtractWithOrgSpongycastleMathEcSimpleBigDecimal:threeEta1];
    check2 = [eta0 addWithOrgSpongycastleMathEcSimpleBigDecimal:fourEta1];
  }
  else {
    
#line 213
    check1 = [eta0 addWithOrgSpongycastleMathEcSimpleBigDecimal:threeEta1];
    check2 = [eta0 subtractWithOrgSpongycastleMathEcSimpleBigDecimal:fourEta1];
  }
  
#line 217
  jbyte h0 = 0;
  jbyte h1 = 0;
  
#line 221
  if ([((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(eta)) compareToWithJavaMathBigInteger:JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)] >= 0) {
    
#line 223
    if ([((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(check1)) compareToWithJavaMathBigInteger:OrgSpongycastleMathEcTnaf_MINUS_ONE] < 0) {
      
#line 225
      h1 = mu;
    }
    else {
      
#line 229
      h0 = 1;
    }
  }
  else {
    
#line 235
    if ([((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(check2)) compareToWithJavaMathBigInteger:JreLoadStatic(OrgSpongycastleMathEcECConstants, TWO)] >= 0) {
      
#line 237
      h1 = mu;
    }
  }
  
#line 242
  if ([eta compareToWithJavaMathBigInteger:OrgSpongycastleMathEcTnaf_MINUS_ONE] < 0) {
    
#line 244
    if ([((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(check1)) compareToWithJavaMathBigInteger:JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)] >= 0) {
      
#line 246
      h1 = (jbyte) -mu;
    }
    else {
      
#line 250
      h0 = -1;
    }
  }
  else {
    
#line 256
    if ([((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(check2)) compareToWithJavaMathBigInteger:OrgSpongycastleMathEcTnaf_MINUS_TWO] < 0) {
      
#line 258
      h1 = (jbyte) -mu;
    }
  }
  
#line 262
  JavaMathBigInteger *q0 = [((JavaMathBigInteger *) nil_chk(f0)) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(h0)];
  JavaMathBigInteger *q1 = [((JavaMathBigInteger *) nil_chk(f1)) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(h1)];
  return new_OrgSpongycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(q0, q1);
}

OrgSpongycastleMathEcSimpleBigDecimal *OrgSpongycastleMathEcTnaf_approximateDivisionByNWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withByte_withInt_withInt_(JavaMathBigInteger *k, JavaMathBigInteger *s, JavaMathBigInteger *vm, jbyte a, jint m, jint c) {
  OrgSpongycastleMathEcTnaf_initialize();
  
#line 286
  jint _k = JreIntDiv((m + 5), 2) + c;
  JavaMathBigInteger *ns = [((JavaMathBigInteger *) nil_chk(k)) shiftRightWithInt:m - _k - 2 + a];
  
#line 289
  JavaMathBigInteger *gs = [((JavaMathBigInteger *) nil_chk(s)) multiplyWithJavaMathBigInteger:ns];
  
#line 291
  JavaMathBigInteger *hs = [((JavaMathBigInteger *) nil_chk(gs)) shiftRightWithInt:m];
  
#line 293
  JavaMathBigInteger *js = [((JavaMathBigInteger *) nil_chk(vm)) multiplyWithJavaMathBigInteger:hs];
  
#line 295
  JavaMathBigInteger *gsPlusJs = [gs addWithJavaMathBigInteger:js];
  JavaMathBigInteger *ls = [((JavaMathBigInteger *) nil_chk(gsPlusJs)) shiftRightWithInt:_k - c];
  if ([gsPlusJs testBitWithInt:_k - c - 1]) {
    
#line 300
    ls = [((JavaMathBigInteger *) nil_chk(ls)) addWithJavaMathBigInteger:JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)];
  }
  
#line 303
  return new_OrgSpongycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_(ls, c);
}


#line 314
IOSByteArray *OrgSpongycastleMathEcTnaf_tauAdicNafWithByte_withOrgSpongycastleMathEcZTauElement_(jbyte mu, OrgSpongycastleMathEcZTauElement *lambda) {
  OrgSpongycastleMathEcTnaf_initialize();
  if (!((mu == 1) || (mu == -1))) {
    
#line 318
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  
#line 321
  JavaMathBigInteger *norm = OrgSpongycastleMathEcTnaf_normWithByte_withOrgSpongycastleMathEcZTauElement_(mu, lambda);
  
#line 324
  jint log2Norm = [((JavaMathBigInteger *) nil_chk(norm)) bitLength];
  
#line 327
  jint maxLength = log2Norm > 30 ? log2Norm + 4 : 34;
  
#line 330
  IOSByteArray *u = [IOSByteArray newArrayWithLength:maxLength];
  jint i = 0;
  
#line 334
  jint length = 0;
  
#line 336
  JavaMathBigInteger *r0 = ((OrgSpongycastleMathEcZTauElement *) nil_chk(lambda))->u_;
  JavaMathBigInteger *r1 = lambda->v_;
  
#line 339
  while (!(([((JavaMathBigInteger *) nil_chk(r0)) isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO)]) && ([((JavaMathBigInteger *) nil_chk(r1)) isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO)]))) {
    
#line 342
    if ([r0 testBitWithInt:0]) {
      
#line 344
      *IOSByteArray_GetRef(u, i) = (jbyte) [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgSpongycastleMathEcECConstants, TWO))) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(([r0 subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r1)) shiftLeftWithInt:1]]))) modWithJavaMathBigInteger:JreLoadStatic(OrgSpongycastleMathEcECConstants, FOUR)]])) intValue];
      
#line 347
      if (IOSByteArray_Get(u, i) == 1) {
        
#line 349
        r0 = [r0 clearBitWithInt:0];
      }
      else {
        
#line 354
        r0 = [r0 addWithJavaMathBigInteger:JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)];
      }
      length = i;
    }
    else {
      
#line 360
      *IOSByteArray_GetRef(u, i) = 0;
    }
    
#line 363
    JavaMathBigInteger *t = r0;
    JavaMathBigInteger *s = [((JavaMathBigInteger *) nil_chk(r0)) shiftRightWithInt:1];
    if (mu == 1) {
      
#line 367
      r0 = [((JavaMathBigInteger *) nil_chk(r1)) addWithJavaMathBigInteger:s];
    }
    else {
      
#line 372
      r0 = [((JavaMathBigInteger *) nil_chk(r1)) subtractWithJavaMathBigInteger:s];
    }
    
#line 375
    r1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(t)) shiftRightWithInt:1])) negate];
    i++;
  }
  
#line 379
  length++;
  
#line 382
  IOSByteArray *tnaf = [IOSByteArray newArrayWithLength:length];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(u, 0, tnaf, 0, length);
  return tnaf;
}


#line 393
OrgSpongycastleMathEcECPoint_AbstractF2m *OrgSpongycastleMathEcTnaf_tauWithOrgSpongycastleMathEcECPoint_AbstractF2m_(OrgSpongycastleMathEcECPoint_AbstractF2m *p) {
  OrgSpongycastleMathEcTnaf_initialize();
  return [((OrgSpongycastleMathEcECPoint_AbstractF2m *) nil_chk(p)) tau];
}


#line 408
jbyte OrgSpongycastleMathEcTnaf_getMuWithOrgSpongycastleMathEcECCurve_AbstractF2m_(OrgSpongycastleMathEcECCurve_AbstractF2m *curve) {
  OrgSpongycastleMathEcTnaf_initialize();
  if (![((OrgSpongycastleMathEcECCurve_AbstractF2m *) nil_chk(curve)) isKoblitz]) {
    
#line 412
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No Koblitz curve (ABC), TNAF multiplication not possible");
  }
  
#line 415
  if ([((OrgSpongycastleMathEcECFieldElement *) nil_chk([curve getA])) isZero]) {
    
#line 417
    return -1;
  }
  
#line 420
  return 1;
}


#line 423
jbyte OrgSpongycastleMathEcTnaf_getMuWithOrgSpongycastleMathEcECFieldElement_(OrgSpongycastleMathEcECFieldElement *curveA) {
  OrgSpongycastleMathEcTnaf_initialize();
  return (jbyte) ([((OrgSpongycastleMathEcECFieldElement *) nil_chk(curveA)) isZero] ? -1 : 1);
}

jbyte OrgSpongycastleMathEcTnaf_getMuWithInt_(jint curveA) {
  OrgSpongycastleMathEcTnaf_initialize();
  return (jbyte) (curveA == 0 ? -1 : 1);
}


#line 447
IOSObjectArray *OrgSpongycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(jbyte mu, jint k, jboolean doV) {
  OrgSpongycastleMathEcTnaf_initialize();
  if (!((mu == 1) || (mu == -1))) {
    
#line 451
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  
#line 454
  JavaMathBigInteger *u0;
  JavaMathBigInteger *u1;
  JavaMathBigInteger *u2;
  
#line 458
  if (doV) {
    
#line 460
    u0 = JreLoadStatic(OrgSpongycastleMathEcECConstants, TWO);
    u1 = JavaMathBigInteger_valueOfWithLong_(mu);
  }
  else {
    
#line 465
    u0 = JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO);
    u1 = JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE);
  }
  
#line 469
  for (jint i = 1; i < k; i++) {
    
#line 472
    JavaMathBigInteger *s = nil;
    if (mu == 1) {
      
#line 475
      s = u1;
    }
    else {
      
#line 480
      s = [((JavaMathBigInteger *) nil_chk(u1)) negate];
    }
    
#line 483
    u2 = [((JavaMathBigInteger *) nil_chk(s)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(u0)) shiftLeftWithInt:1]];
    u0 = u1;
    u1 = u2;
  }
  
#line 490
  IOSObjectArray *retVal = [IOSObjectArray newArrayWithObjects:(id[]){ u0, u1 } count:2 type:JavaMathBigInteger_class_()];
  return retVal;
}


#line 502
JavaMathBigInteger *OrgSpongycastleMathEcTnaf_getTwWithByte_withInt_(jbyte mu, jint w) {
  OrgSpongycastleMathEcTnaf_initialize();
  if (w == 4) {
    
#line 506
    if (mu == 1) {
      
#line 508
      return JavaMathBigInteger_valueOfWithLong_(6);
    }
    else {
      
#line 513
      return JavaMathBigInteger_valueOfWithLong_(10);
    }
  }
  else {
    
#line 519
    IOSObjectArray *us = OrgSpongycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, w, false);
    JavaMathBigInteger *twoToW = [((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO))) setBitWithInt:w];
    JavaMathBigInteger *u1invert = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(us), 1))) modInverseWithJavaMathBigInteger:twoToW];
    JavaMathBigInteger *tw;
    tw = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgSpongycastleMathEcECConstants, TWO))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(us, 0)])) multiplyWithJavaMathBigInteger:u1invert])) modWithJavaMathBigInteger:twoToW];
    
#line 526
    return tw;
  }
}


#line 538
IOSObjectArray *OrgSpongycastleMathEcTnaf_getSiWithOrgSpongycastleMathEcECCurve_AbstractF2m_(OrgSpongycastleMathEcECCurve_AbstractF2m *curve) {
  OrgSpongycastleMathEcTnaf_initialize();
  if (![((OrgSpongycastleMathEcECCurve_AbstractF2m *) nil_chk(curve)) isKoblitz]) {
    
#line 542
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"si is defined for Koblitz curves only");
  }
  
#line 545
  jint m = [curve getFieldSize];
  jint a = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk([curve getA])) toBigInteger])) intValue];
  jbyte mu = OrgSpongycastleMathEcTnaf_getMuWithInt_(a);
  jint shifts = OrgSpongycastleMathEcTnaf_getShiftsForCofactorWithJavaMathBigInteger_([curve getCofactor]);
  jint index = m + 3 - a;
  IOSObjectArray *ui = OrgSpongycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, index, false);
  if (mu == 1) {
    
#line 553
    (void) IOSObjectArray_Set(nil_chk(ui), 0, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(ui, 0))) negate]);
    (void) IOSObjectArray_Set(ui, 1, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(ui, 1))) negate]);
  }
  
#line 557
  JavaMathBigInteger *dividend0 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE))) addWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(ui), 1)])) shiftRightWithInt:shifts];
  JavaMathBigInteger *dividend1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE) addWithJavaMathBigInteger:IOSObjectArray_Get(ui, 0)])) shiftRightWithInt:shifts])) negate];
  
#line 560
  return [IOSObjectArray newArrayWithObjects:(id[]){ dividend0, dividend1 } count:2 type:JavaMathBigInteger_class_()];
}


#line 563
IOSObjectArray *OrgSpongycastleMathEcTnaf_getSiWithInt_withInt_withJavaMathBigInteger_(jint fieldSize, jint curveA, JavaMathBigInteger *cofactor) {
  OrgSpongycastleMathEcTnaf_initialize();
  jbyte mu = OrgSpongycastleMathEcTnaf_getMuWithInt_(curveA);
  jint shifts = OrgSpongycastleMathEcTnaf_getShiftsForCofactorWithJavaMathBigInteger_(cofactor);
  jint index = fieldSize + 3 - curveA;
  IOSObjectArray *ui = OrgSpongycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, index, false);
  if (mu == 1) {
    
#line 571
    (void) IOSObjectArray_Set(nil_chk(ui), 0, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(ui, 0))) negate]);
    (void) IOSObjectArray_Set(ui, 1, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(ui, 1))) negate]);
  }
  
#line 575
  JavaMathBigInteger *dividend0 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE))) addWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(ui), 1)])) shiftRightWithInt:shifts];
  JavaMathBigInteger *dividend1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE) addWithJavaMathBigInteger:IOSObjectArray_Get(ui, 0)])) shiftRightWithInt:shifts])) negate];
  
#line 578
  return [IOSObjectArray newArrayWithObjects:(id[]){ dividend0, dividend1 } count:2 type:JavaMathBigInteger_class_()];
}


#line 581
jint OrgSpongycastleMathEcTnaf_getShiftsForCofactorWithJavaMathBigInteger_(JavaMathBigInteger *h) {
  OrgSpongycastleMathEcTnaf_initialize();
  if (h != nil) {
    
#line 585
    if ([h isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, TWO)]) {
      
#line 587
      return 1;
    }
    if ([h isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, FOUR)]) {
      
#line 591
      return 2;
    }
  }
  
#line 595
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"h (Cofactor) must be 2 or 4");
}


#line 611
OrgSpongycastleMathEcZTauElement *OrgSpongycastleMathEcTnaf_partModReductionWithJavaMathBigInteger_withInt_withByte_withJavaMathBigIntegerArray_withByte_withByte_(JavaMathBigInteger *k, jint m, jbyte a, IOSObjectArray *s, jbyte mu, jbyte c) {
  OrgSpongycastleMathEcTnaf_initialize();
  
#line 615
  JavaMathBigInteger *d0;
  if (mu == 1) {
    
#line 618
    d0 = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(s), 0))) addWithJavaMathBigInteger:IOSObjectArray_Get(s, 1)];
  }
  else {
    
#line 622
    d0 = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(s), 0))) subtractWithJavaMathBigInteger:IOSObjectArray_Get(s, 1)];
  }
  
#line 625
  IOSObjectArray *v = OrgSpongycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, m, true);
  JavaMathBigInteger *vm = IOSObjectArray_Get(nil_chk(v), 1);
  
#line 628
  OrgSpongycastleMathEcSimpleBigDecimal *lambda0 = OrgSpongycastleMathEcTnaf_approximateDivisionByNWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withByte_withInt_withInt_(
#line 629
  k, IOSObjectArray_Get(s, 0), vm, a, m, c);
  
#line 631
  OrgSpongycastleMathEcSimpleBigDecimal *lambda1 = OrgSpongycastleMathEcTnaf_approximateDivisionByNWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withByte_withInt_withInt_(
#line 632
  k, IOSObjectArray_Get(s, 1), vm, a, m, c);
  
#line 634
  OrgSpongycastleMathEcZTauElement *q = OrgSpongycastleMathEcTnaf_roundWithOrgSpongycastleMathEcSimpleBigDecimal_withOrgSpongycastleMathEcSimpleBigDecimal_withByte_(lambda0, lambda1, mu);
  
#line 637
  JavaMathBigInteger *r0 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(k)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(d0)) multiplyWithJavaMathBigInteger:((OrgSpongycastleMathEcZTauElement *) nil_chk(q))->u_]])) subtractWithJavaMathBigInteger:
#line 638
  [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(s, 1)])) multiplyWithJavaMathBigInteger:q->v_]];
  
#line 641
  JavaMathBigInteger *r1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(s, 1))) multiplyWithJavaMathBigInteger:q->u_])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(s, 0))) multiplyWithJavaMathBigInteger:q->v_]];
  
#line 643
  return new_OrgSpongycastleMathEcZTauElement_initPackagePrivateWithJavaMathBigInteger_withJavaMathBigInteger_(r0, r1);
}


#line 654
OrgSpongycastleMathEcECPoint_AbstractF2m *OrgSpongycastleMathEcTnaf_multiplyRTnafWithOrgSpongycastleMathEcECPoint_AbstractF2m_withJavaMathBigInteger_(OrgSpongycastleMathEcECPoint_AbstractF2m *p, JavaMathBigInteger *k) {
  OrgSpongycastleMathEcTnaf_initialize();
  OrgSpongycastleMathEcECCurve_AbstractF2m *curve = (OrgSpongycastleMathEcECCurve_AbstractF2m *) cast_chk([((OrgSpongycastleMathEcECPoint_AbstractF2m *) nil_chk(p)) getCurve], [OrgSpongycastleMathEcECCurve_AbstractF2m class]);
  jint m = [((OrgSpongycastleMathEcECCurve_AbstractF2m *) nil_chk(curve)) getFieldSize];
  jint a = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk([curve getA])) toBigInteger])) intValue];
  jbyte mu = OrgSpongycastleMathEcTnaf_getMuWithInt_(a);
  IOSObjectArray *s = [curve getSi];
  OrgSpongycastleMathEcZTauElement *rho = OrgSpongycastleMathEcTnaf_partModReductionWithJavaMathBigInteger_withInt_withByte_withJavaMathBigIntegerArray_withByte_withByte_(k, m, (jbyte) a, s, mu, (jbyte) 10);
  
#line 663
  return OrgSpongycastleMathEcTnaf_multiplyTnafWithOrgSpongycastleMathEcECPoint_AbstractF2m_withOrgSpongycastleMathEcZTauElement_(p, rho);
}


#line 675
OrgSpongycastleMathEcECPoint_AbstractF2m *OrgSpongycastleMathEcTnaf_multiplyTnafWithOrgSpongycastleMathEcECPoint_AbstractF2m_withOrgSpongycastleMathEcZTauElement_(OrgSpongycastleMathEcECPoint_AbstractF2m *p, OrgSpongycastleMathEcZTauElement *lambda) {
  OrgSpongycastleMathEcTnaf_initialize();
  OrgSpongycastleMathEcECCurve_AbstractF2m *curve = (OrgSpongycastleMathEcECCurve_AbstractF2m *) cast_chk([((OrgSpongycastleMathEcECPoint_AbstractF2m *) nil_chk(p)) getCurve], [OrgSpongycastleMathEcECCurve_AbstractF2m class]);
  jbyte mu = OrgSpongycastleMathEcTnaf_getMuWithOrgSpongycastleMathEcECFieldElement_([((OrgSpongycastleMathEcECCurve_AbstractF2m *) nil_chk(curve)) getA]);
  IOSByteArray *u = OrgSpongycastleMathEcTnaf_tauAdicNafWithByte_withOrgSpongycastleMathEcZTauElement_(mu, lambda);
  
#line 681
  OrgSpongycastleMathEcECPoint_AbstractF2m *q = OrgSpongycastleMathEcTnaf_multiplyFromTnafWithOrgSpongycastleMathEcECPoint_AbstractF2m_withByteArray_(p, u);
  
#line 683
  return q;
}


#line 695
OrgSpongycastleMathEcECPoint_AbstractF2m *OrgSpongycastleMathEcTnaf_multiplyFromTnafWithOrgSpongycastleMathEcECPoint_AbstractF2m_withByteArray_(OrgSpongycastleMathEcECPoint_AbstractF2m *p, IOSByteArray *u) {
  OrgSpongycastleMathEcTnaf_initialize();
  OrgSpongycastleMathEcECCurve *curve = [((OrgSpongycastleMathEcECPoint_AbstractF2m *) nil_chk(p)) getCurve];
  OrgSpongycastleMathEcECPoint_AbstractF2m *q = (OrgSpongycastleMathEcECPoint_AbstractF2m *) cast_chk([((OrgSpongycastleMathEcECCurve *) nil_chk(curve)) getInfinity], [OrgSpongycastleMathEcECPoint_AbstractF2m class]);
  OrgSpongycastleMathEcECPoint_AbstractF2m *pNeg = (OrgSpongycastleMathEcECPoint_AbstractF2m *) cast_chk([p negate], [OrgSpongycastleMathEcECPoint_AbstractF2m class]);
  jint tauCount = 0;
  for (jint i = ((IOSByteArray *) nil_chk(u))->size_ - 1; i >= 0; i--) {
    
#line 703
    ++tauCount;
    jbyte ui = IOSByteArray_Get(u, i);
    if (ui != 0) {
      
#line 707
      q = [((OrgSpongycastleMathEcECPoint_AbstractF2m *) nil_chk(q)) tauPowWithInt:tauCount];
      tauCount = 0;
      
#line 710
      OrgSpongycastleMathEcECPoint *x = ui > 0 ? p : pNeg;
      q = (OrgSpongycastleMathEcECPoint_AbstractF2m *) cast_chk([((OrgSpongycastleMathEcECPoint_AbstractF2m *) nil_chk(q)) addWithOrgSpongycastleMathEcECPoint:x], [OrgSpongycastleMathEcECPoint_AbstractF2m class]);
    }
  }
  if (tauCount > 0) {
    
#line 716
    q = [((OrgSpongycastleMathEcECPoint_AbstractF2m *) nil_chk(q)) tauPowWithInt:tauCount];
  }
  return q;
}


#line 735
IOSByteArray *OrgSpongycastleMathEcTnaf_tauAdicWNafWithByte_withOrgSpongycastleMathEcZTauElement_withByte_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcZTauElementArray_(jbyte mu, OrgSpongycastleMathEcZTauElement *lambda, jbyte width, JavaMathBigInteger *pow2w, JavaMathBigInteger *tw, IOSObjectArray *alpha) {
  OrgSpongycastleMathEcTnaf_initialize();
  
#line 738
  if (!((mu == 1) || (mu == -1))) {
    
#line 740
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  
#line 743
  JavaMathBigInteger *norm = OrgSpongycastleMathEcTnaf_normWithByte_withOrgSpongycastleMathEcZTauElement_(mu, lambda);
  
#line 746
  jint log2Norm = [((JavaMathBigInteger *) nil_chk(norm)) bitLength];
  
#line 749
  jint maxLength = log2Norm > 30 ? log2Norm + 4 + width : 34 + width;
  
#line 752
  IOSByteArray *u = [IOSByteArray newArrayWithLength:maxLength];
  
#line 755
  JavaMathBigInteger *pow2wMin1 = [((JavaMathBigInteger *) nil_chk(pow2w)) shiftRightWithInt:1];
  
#line 758
  JavaMathBigInteger *r0 = ((OrgSpongycastleMathEcZTauElement *) nil_chk(lambda))->u_;
  JavaMathBigInteger *r1 = lambda->v_;
  jint i = 0;
  
#line 763
  while (!(([((JavaMathBigInteger *) nil_chk(r0)) isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO)]) && ([((JavaMathBigInteger *) nil_chk(r1)) isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO)]))) {
    
#line 766
    if ([r0 testBitWithInt:0]) {
      
#line 769
      JavaMathBigInteger *uUnMod =
#line 770
      [((JavaMathBigInteger *) nil_chk([r0 addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r1)) multiplyWithJavaMathBigInteger:tw]])) modWithJavaMathBigInteger:pow2w];
      
#line 772
      jbyte uLocal;
      
#line 774
      if ([((JavaMathBigInteger *) nil_chk(uUnMod)) compareToWithId:pow2wMin1] >= 0) {
        
#line 776
        uLocal = (jbyte) [((JavaMathBigInteger *) nil_chk([uUnMod subtractWithJavaMathBigInteger:pow2w])) intValue];
      }
      else {
        
#line 780
        uLocal = (jbyte) [uUnMod intValue];
      }
      
#line 784
      *IOSByteArray_GetRef(u, i) = uLocal;
      jboolean s = true;
      if (uLocal < 0) {
        
#line 788
        s = false;
        uLocal = (jbyte) -uLocal;
      }
      
#line 793
      if (s) {
        
#line 795
        r0 = [r0 subtractWithJavaMathBigInteger:((OrgSpongycastleMathEcZTauElement *) nil_chk(IOSObjectArray_Get(nil_chk(alpha), uLocal)))->u_];
        r1 = [r1 subtractWithJavaMathBigInteger:((OrgSpongycastleMathEcZTauElement *) nil_chk(IOSObjectArray_Get(alpha, uLocal)))->v_];
      }
      else {
        
#line 800
        r0 = [r0 addWithJavaMathBigInteger:((OrgSpongycastleMathEcZTauElement *) nil_chk(IOSObjectArray_Get(nil_chk(alpha), uLocal)))->u_];
        r1 = [r1 addWithJavaMathBigInteger:((OrgSpongycastleMathEcZTauElement *) nil_chk(IOSObjectArray_Get(alpha, uLocal)))->v_];
      }
    }
    else {
      
#line 806
      *IOSByteArray_GetRef(u, i) = 0;
    }
    
#line 809
    JavaMathBigInteger *t = r0;
    
#line 811
    if (mu == 1) {
      
#line 813
      r0 = [((JavaMathBigInteger *) nil_chk(r1)) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r0)) shiftRightWithInt:1]];
    }
    else {
      
#line 818
      r0 = [((JavaMathBigInteger *) nil_chk(r1)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r0)) shiftRightWithInt:1]];
    }
    r1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(t)) shiftRightWithInt:1])) negate];
    i++;
  }
  return u;
}


#line 832
IOSObjectArray *OrgSpongycastleMathEcTnaf_getPreCompWithOrgSpongycastleMathEcECPoint_AbstractF2m_withByte_(OrgSpongycastleMathEcECPoint_AbstractF2m *p, jbyte a) {
  OrgSpongycastleMathEcTnaf_initialize();
  IOSObjectArray *alphaTnaf = (a == 0) ? OrgSpongycastleMathEcTnaf_alpha0Tnaf : OrgSpongycastleMathEcTnaf_alpha1Tnaf;
  
#line 836
  IOSObjectArray *pu = [IOSObjectArray newArrayWithLength:JreURShift32((alphaTnaf->size_ + 1), 1) type:OrgSpongycastleMathEcECPoint_AbstractF2m_class_()];
  (void) IOSObjectArray_Set(pu, 0, p);
  
#line 839
  jint precompLen = alphaTnaf->size_;
  for (jint i = 3; i < precompLen; i += 2) {
    
#line 842
    (void) IOSObjectArray_Set(pu, JreURShift32(i, 1), OrgSpongycastleMathEcTnaf_multiplyFromTnafWithOrgSpongycastleMathEcECPoint_AbstractF2m_withByteArray_(p, IOSObjectArray_Get(alphaTnaf, i)));
  }
  
#line 845
  [((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleMathEcECPoint_AbstractF2m *) nil_chk(p)) getCurve])) normalizeAllWithOrgSpongycastleMathEcECPointArray:pu];
  
#line 847
  return pu;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcTnaf)
