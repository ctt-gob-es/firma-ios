//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/http/TrustStoreManager.java
//

#include "AOUIFactory.h"
#include "AOUtil.h"
#include "CoreMessages.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Platform.h"
#include "TrustStoreManager.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Throwable.h"
#include "java/nio/file/Files.h"
#include "java/nio/file/Path.h"
#include "java/security/KeyStore.h"
#include "java/security/KeyStoreException.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Enumeration.h"
#include "java/util/List.h"
#include "java/util/logging/Logger.h"
#include "javax/security/auth/x500/X500Principal.h"

#if !__has_feature(objc_arc)
#error "TrustStoreManager must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreMiscHttpTrustStoreManager () {
 @public
  JavaSecurityKeyStore *ks_;
  JavaIoFile *tsPath_;
}

/*!
 @brief Carga el almac&eacute;n si existe.En caso de que exista pero no se puede cargar,
  se preguntar&aacute; al usuario si desea eliminar el almac&eacute;n y crear uno nuevo.
 @param parent Componente padre sobre el que mostrar cualquier di &aacute; logo que sea  necesario durante la operaci &oacute; n de carga.
 */
- (instancetype)initWithId:(id)parent;

/*!
 @brief Genera un alias representativo del certificado &uacute;nico en el almac&eacute;n.
 @param cert Certificado para el que obtener el alias.
 @return Alias.
 @throw KeyStoreExceptionCuando no se puede acceder al almac&eacute;n para comprobar el alias.
 */
- (NSString *)generateAliasWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

/*!
 @brief Almacena en disco el almac&eacute;n con los cambios que se hayan realizado.
 @throw IOExceptionCuando no se encuentre una ruta v&aacute;lida para almacenar el almac&eacute;n.
 @throw KeyStoreExceptionCuando no se pueda almacenar el almac&eacute;n.
 */
- (void)store;

/*!
 @brief Busca un certificado en el almac&eacute;n y devuelve el alias que tiene asignado.
 @param cert Certificado que se desea buscar.
 @return Alias del certificado o <code>null</code> si no se encuentra en el almac&eacute;n.
 @throw KeyStoreExceptionCuando no se puede acceder al almac&eacute;n.
 */
- (NSString *)searchCertWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

/*!
 @brief Se crea un almac&eacute;n de confianza vac&iacute;o.
 @return Almac&eacute;n de confianza.
 @throw KeyStoreExceptionSi no se pudiere crear el almacen.
 */
+ (JavaSecurityKeyStore *)createTrustedKeystore;

/*!
 @brief Carga el almac&eacute;n de confianza de disco.
 @return Almac&eacute;n de confianza.
 @throw IOExceptionCuando no se encuentra o no se puede leer el almac&eacute;n en disco.
 @throw KeyStoreExceptionCuando nos se pueda cargar el almac&eacute;n.
 */
- (JavaSecurityKeyStore *)loadTrustedKeyStore;

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscHttpTrustStoreManager, ks_, JavaSecurityKeyStore *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscHttpTrustStoreManager, tsPath_, JavaIoFile *)

inline IOSCharArray *EsGobAfirmaCoreMiscHttpTrustStoreManager_get_TRUSTED_KS_PWD(void);
static IOSCharArray *EsGobAfirmaCoreMiscHttpTrustStoreManager_TRUSTED_KS_PWD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpTrustStoreManager, TRUSTED_KS_PWD, IOSCharArray *)

inline JavaUtilLoggingLogger *EsGobAfirmaCoreMiscHttpTrustStoreManager_get_LOGGER(void);
static JavaUtilLoggingLogger *EsGobAfirmaCoreMiscHttpTrustStoreManager_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpTrustStoreManager, LOGGER, JavaUtilLoggingLogger *)

inline EsGobAfirmaCoreMiscHttpTrustStoreManager *EsGobAfirmaCoreMiscHttpTrustStoreManager_get_instance(void);
inline EsGobAfirmaCoreMiscHttpTrustStoreManager *EsGobAfirmaCoreMiscHttpTrustStoreManager_set_instance(EsGobAfirmaCoreMiscHttpTrustStoreManager *value);
static EsGobAfirmaCoreMiscHttpTrustStoreManager *EsGobAfirmaCoreMiscHttpTrustStoreManager_instance;
J2OBJC_STATIC_FIELD_OBJ(EsGobAfirmaCoreMiscHttpTrustStoreManager, instance, EsGobAfirmaCoreMiscHttpTrustStoreManager *)

__attribute__((unused)) static void EsGobAfirmaCoreMiscHttpTrustStoreManager_initWithId_(EsGobAfirmaCoreMiscHttpTrustStoreManager *self, id parent);

__attribute__((unused)) static EsGobAfirmaCoreMiscHttpTrustStoreManager *new_EsGobAfirmaCoreMiscHttpTrustStoreManager_initWithId_(id parent) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobAfirmaCoreMiscHttpTrustStoreManager *create_EsGobAfirmaCoreMiscHttpTrustStoreManager_initWithId_(id parent);

__attribute__((unused)) static NSString *EsGobAfirmaCoreMiscHttpTrustStoreManager_generateAliasWithJavaSecurityCertX509Certificate_(EsGobAfirmaCoreMiscHttpTrustStoreManager *self, JavaSecurityCertX509Certificate *cert);

__attribute__((unused)) static void EsGobAfirmaCoreMiscHttpTrustStoreManager_store(EsGobAfirmaCoreMiscHttpTrustStoreManager *self);

__attribute__((unused)) static NSString *EsGobAfirmaCoreMiscHttpTrustStoreManager_searchCertWithJavaSecurityCertX509Certificate_(EsGobAfirmaCoreMiscHttpTrustStoreManager *self, JavaSecurityCertX509Certificate *cert);

__attribute__((unused)) static JavaSecurityKeyStore *EsGobAfirmaCoreMiscHttpTrustStoreManager_createTrustedKeystore(void);

__attribute__((unused)) static JavaSecurityKeyStore *EsGobAfirmaCoreMiscHttpTrustStoreManager_loadTrustedKeyStore(EsGobAfirmaCoreMiscHttpTrustStoreManager *self);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/http/TrustStoreManager.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaCoreMiscHttpTrustStoreManager)


#line 29
@implementation EsGobAfirmaCoreMiscHttpTrustStoreManager


#line 44
+ (EsGobAfirmaCoreMiscHttpTrustStoreManager *)getInstance {
  return EsGobAfirmaCoreMiscHttpTrustStoreManager_getInstance();
}


#line 54
+ (EsGobAfirmaCoreMiscHttpTrustStoreManager *)getInstanceWithId:(id)parent {
  return EsGobAfirmaCoreMiscHttpTrustStoreManager_getInstanceWithId_(parent);
}


#line 67
- (instancetype)initWithId:(id)parent {
  EsGobAfirmaCoreMiscHttpTrustStoreManager_initWithId_(self, parent);
  return self;
}


#line 99
- (IOSObjectArray *)getCertificates {
  
#line 101
  if (self->ks_ == nil) {
    return [IOSObjectArray newArrayWithLength:0 type:JavaSecurityCertX509Certificate_class_()];
  }
  
#line 105
  id<JavaUtilList> certs = new_JavaUtilArrayList_init();
  
#line 107
  id<JavaUtilEnumeration> aliases = [((JavaSecurityKeyStore *) nil_chk(self->ks_)) aliases];
  while ([((id<JavaUtilEnumeration>) nil_chk(aliases)) hasMoreElements]) {
    [certs addWithId:(JavaSecurityCertX509Certificate *) cast_chk([((JavaSecurityKeyStore *) nil_chk(self->ks_)) getCertificateWithNSString:[aliases nextElement]], [JavaSecurityCertX509Certificate class])];
  }
  return [certs toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:JavaSecurityCertX509Certificate_class_()]];
}


#line 120
- (void)importCertsWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certs {
  
#line 122
  if (certs == nil) {
    return;
  }
  
#line 126
  if (self->ks_ == nil) {
    self->ks_ = EsGobAfirmaCoreMiscHttpTrustStoreManager_createTrustedKeystore();
  }
  {
    IOSObjectArray *a__ = certs;
    JavaSecurityCertX509Certificate * const *b__ = a__->buffer_;
    JavaSecurityCertX509Certificate * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaSecurityCertX509Certificate *cert = *b__++;
      
#line 133
      NSString *alias = EsGobAfirmaCoreMiscHttpTrustStoreManager_searchCertWithJavaSecurityCertX509Certificate_(self, cert);
      if (alias != nil) {
        continue;
      }
      
#line 139
      alias = EsGobAfirmaCoreMiscHttpTrustStoreManager_generateAliasWithJavaSecurityCertX509Certificate_(self, cert);
      [((JavaSecurityKeyStore *) nil_chk(self->ks_)) setCertificateEntryWithNSString:alias withJavaSecurityCertCertificate:cert];
    }
  }
  
#line 142
  EsGobAfirmaCoreMiscHttpTrustStoreManager_store(self);
}


#line 151
- (NSString *)generateAliasWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  return EsGobAfirmaCoreMiscHttpTrustStoreManager_generateAliasWithJavaSecurityCertX509Certificate_(self, cert);
}


#line 166
- (void)store {
  EsGobAfirmaCoreMiscHttpTrustStoreManager_store(self);
}


#line 188
- (void)deleteCertWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  
#line 190
  if (self->ks_ == nil) {
    return;
  }
  
#line 194
  NSString *alias = EsGobAfirmaCoreMiscHttpTrustStoreManager_searchCertWithJavaSecurityCertX509Certificate_(self, cert);
  if (alias == nil) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpTrustStoreManager_LOGGER)) warningWithNSString:
#line 197
    @"No se encontro en el almacen el certificado que desea eliminar"];
    return;
  }
  
#line 201
  [((JavaSecurityKeyStore *) nil_chk(self->ks_)) deleteEntryWithNSString:alias];
  
#line 203
  EsGobAfirmaCoreMiscHttpTrustStoreManager_store(self);
}


#line 212
- (NSString *)searchCertWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  return EsGobAfirmaCoreMiscHttpTrustStoreManager_searchCertWithJavaSecurityCertX509Certificate_(self, cert);
}


#line 232
+ (JavaSecurityKeyStore *)createTrustedKeystore {
  return EsGobAfirmaCoreMiscHttpTrustStoreManager_createTrustedKeystore();
}


#line 252
- (JavaSecurityKeyStore *)loadTrustedKeyStore {
  return EsGobAfirmaCoreMiscHttpTrustStoreManager_loadTrustedKeyStore(self);
}


#line 275
+ (JavaIoFile *)getJKSFile {
  return EsGobAfirmaCoreMiscHttpTrustStoreManager_getJKSFile();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEsGobAfirmaCoreMiscHttpTrustStoreManager;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreMiscHttpTrustStoreManager;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertX509Certificate;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x81, 3, 4, 5, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 6, 7, 2, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, 5, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 9, 7, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyStore;", 0xa, -1, -1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyStore;", 0x2, -1, -1, 10, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstance);
  methods[1].selector = @selector(getInstanceWithId:);
  methods[2].selector = @selector(initWithId:);
  methods[3].selector = @selector(getCertificates);
  methods[4].selector = @selector(importCertsWithJavaSecurityCertX509CertificateArray:);
  methods[5].selector = @selector(generateAliasWithJavaSecurityCertX509Certificate:);
  methods[6].selector = @selector(store);
  methods[7].selector = @selector(deleteCertWithJavaSecurityCertX509Certificate:);
  methods[8].selector = @selector(searchCertWithJavaSecurityCertX509Certificate:);
  methods[9].selector = @selector(createTrustedKeystore);
  methods[10].selector = @selector(loadTrustedKeyStore);
  methods[11].selector = @selector(getJKSFile);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TRUSTED_KS_PWD", "[C", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "ks_", "LJavaSecurityKeyStore;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tsPath_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "instance", "LEsGobAfirmaCoreMiscHttpTrustStoreManager;", .constantValue.asLong = 0, 0xa, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LNSObject;", "LJavaSecurityKeyStoreException;", "importCerts", "[LJavaSecurityCertX509Certificate;", "LJavaSecurityKeyStoreException;LJavaIoIOException;", "generateAlias", "LJavaSecurityCertX509Certificate;", "deleteCert", "searchCert", "LJavaIoIOException;LJavaSecurityKeyStoreException;", &EsGobAfirmaCoreMiscHttpTrustStoreManager_TRUSTED_KS_PWD, &EsGobAfirmaCoreMiscHttpTrustStoreManager_LOGGER, &EsGobAfirmaCoreMiscHttpTrustStoreManager_instance };
  static const J2ObjcClassInfo _EsGobAfirmaCoreMiscHttpTrustStoreManager = { "TrustStoreManager", "es.gob.afirma.core.misc.http", ptrTable, methods, fields, 7, 0x1, 12, 5, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreMiscHttpTrustStoreManager;
}

+ (void)initialize {
  if (self == [EsGobAfirmaCoreMiscHttpTrustStoreManager class]) {
    EsGobAfirmaCoreMiscHttpTrustStoreManager_TRUSTED_KS_PWD =
#line 31
    [@"changeit" java_toCharArray];
    EsGobAfirmaCoreMiscHttpTrustStoreManager_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 33
    @"es.gob.afirma");
    J2OBJC_SET_INITIALIZED(EsGobAfirmaCoreMiscHttpTrustStoreManager)
  }
}

@end


#line 44
EsGobAfirmaCoreMiscHttpTrustStoreManager *EsGobAfirmaCoreMiscHttpTrustStoreManager_getInstance() {
  EsGobAfirmaCoreMiscHttpTrustStoreManager_initialize();
  
#line 45
  return EsGobAfirmaCoreMiscHttpTrustStoreManager_getInstanceWithId_(nil);
}


#line 54
EsGobAfirmaCoreMiscHttpTrustStoreManager *EsGobAfirmaCoreMiscHttpTrustStoreManager_getInstanceWithId_(id parent) {
  EsGobAfirmaCoreMiscHttpTrustStoreManager_initialize();
  
#line 55
  if (EsGobAfirmaCoreMiscHttpTrustStoreManager_instance == nil) {
    EsGobAfirmaCoreMiscHttpTrustStoreManager_instance = new_EsGobAfirmaCoreMiscHttpTrustStoreManager_initWithId_(parent);
  }
  return EsGobAfirmaCoreMiscHttpTrustStoreManager_instance;
}


#line 67
void EsGobAfirmaCoreMiscHttpTrustStoreManager_initWithId_(EsGobAfirmaCoreMiscHttpTrustStoreManager *self, id parent) {
  NSObject_init(self);
  
#line 68
  self->tsPath_ = EsGobAfirmaCoreMiscHttpTrustStoreManager_getJKSFile();
  
#line 71
  if ([((JavaIoFile *) nil_chk(self->tsPath_)) isFile]) {
    @try {
      self->ks_ = EsGobAfirmaCoreMiscHttpTrustStoreManager_loadTrustedKeyStore(self);
    }
    @catch (JavaLangException *e) {
      jint result = EsGobAfirmaCoreUiAOUIFactory_showConfirmDialogWithId_withId_withNSString_withInt_withInt_(
#line 77
      parent, EsGobAfirmaCoreUiCoreMessages_getStringWithNSString_(
#line 78
      @"AutoFirmaTrustStore.0"), EsGobAfirmaCoreUiCoreMessages_getStringWithNSString_(
#line 79
      @"AutoFirmaTrustStore.1"), JreLoadStatic(EsGobAfirmaCoreUiAOUIFactory, YES_NO_OPTION), JreLoadStatic(EsGobAfirmaCoreUiAOUIFactory, WARNING_MESSAGE));
      
#line 82
      if (result == JreLoadStatic(EsGobAfirmaCoreUiAOUIFactory, OK_OPTION)) {
        @try {
          JavaNioFileFiles_delete__WithJavaNioFilePath_([self->tsPath_ toPath]);
        }
        @catch (
#line 85
        JavaIoIOException *e1) {
          [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpTrustStoreManager_LOGGER)) warningWithNSString:JreStrcat("$@", @"No se pudo eliminar el TrustStore corrupto: ", e1)];
        }
        self->ks_ = nil;
      }
    }
  }
}


#line 67
EsGobAfirmaCoreMiscHttpTrustStoreManager *new_EsGobAfirmaCoreMiscHttpTrustStoreManager_initWithId_(id parent) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscHttpTrustStoreManager, initWithId_, parent)
}


#line 67
EsGobAfirmaCoreMiscHttpTrustStoreManager *create_EsGobAfirmaCoreMiscHttpTrustStoreManager_initWithId_(id parent) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscHttpTrustStoreManager, initWithId_, parent)
}


#line 151
NSString *EsGobAfirmaCoreMiscHttpTrustStoreManager_generateAliasWithJavaSecurityCertX509Certificate_(EsGobAfirmaCoreMiscHttpTrustStoreManager *self, JavaSecurityCertX509Certificate *cert) {
  
#line 153
  NSString *principal = [((JavaxSecurityAuthX500X500Principal *) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSubjectX500Principal])) description];
  NSString *alias = principal;
  for (jint i = 1; [((JavaSecurityKeyStore *) nil_chk(self->ks_)) containsAliasWithNSString:alias]; i++) {
    alias = JreStrcat("$$IC", principal, @" (", i, ')');
  }
  return alias;
}


#line 166
void EsGobAfirmaCoreMiscHttpTrustStoreManager_store(EsGobAfirmaCoreMiscHttpTrustStoreManager *self) {
  
#line 168
  @synchronized(EsGobAfirmaCoreMiscHttpTrustStoreManager_instance) {
    @try {
      JavaIoOutputStream *fos = new_JavaIoFileOutputStream_initWithJavaIoFile_(
#line 169
      self->tsPath_);
      JavaLangThrowable *__primaryException2 = nil;
      @try {
        JavaIoOutputStream *bos = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(
#line 170
        fos);
        JavaLangThrowable *__primaryException1 = nil;
        @try {
          
#line 171
          [((JavaSecurityKeyStore *) nil_chk(self->ks_)) storeWithJavaIoOutputStream:bos withCharArray:EsGobAfirmaCoreMiscHttpTrustStoreManager_TRUSTED_KS_PWD];
        }
        @catch (JavaLangThrowable *e) {
          __primaryException1 = e;
          @throw e;
        }
        @finally {
          if (bos != nil) {
            if (__primaryException1 != nil) {
              @try {
                [bos close];
              }
              @catch (JavaLangThrowable *e) {
                [__primaryException1 addSuppressedWithJavaLangThrowable:e];
              }
            }
            else {
              [bos close];
            }
          }
        }
      }
      @catch (JavaLangThrowable *e) {
        __primaryException2 = e;
        @throw e;
      }
      @finally {
        if (fos != nil) {
          if (__primaryException2 != nil) {
            @try {
              [fos close];
            }
            @catch (JavaLangThrowable *e) {
              [__primaryException2 addSuppressedWithJavaLangThrowable:e];
            }
          }
          else {
            [fos close];
          }
        }
      }
    }
    @catch (
#line 173
    JavaIoIOException *e) {
      @throw e;
    }
    @catch (JavaLangException *e) {
      @throw new_JavaSecurityKeyStoreException_initWithNSString_withJavaLangThrowable_(@"No se ha podido guardar el almacen", e);
    }
  }
}


#line 212
NSString *EsGobAfirmaCoreMiscHttpTrustStoreManager_searchCertWithJavaSecurityCertX509Certificate_(EsGobAfirmaCoreMiscHttpTrustStoreManager *self, JavaSecurityCertX509Certificate *cert) {
  JavaSecurityCertX509Certificate *c;
  id<JavaUtilEnumeration> aliases = [((JavaSecurityKeyStore *) nil_chk(self->ks_)) aliases];
  while ([((id<JavaUtilEnumeration>) nil_chk(aliases)) hasMoreElements]) {
    
#line 217
    NSString *alias = [aliases nextElement];
    c = (JavaSecurityCertX509Certificate *) cast_chk([((JavaSecurityKeyStore *) nil_chk(self->ks_)) getCertificateWithNSString:alias], [JavaSecurityCertX509Certificate class]);
    if ([((JavaSecurityCertX509Certificate *) nil_chk(c)) isEqual:cert]) {
      return alias;
    }
  }
  
#line 224
  return nil;
}


#line 232
JavaSecurityKeyStore *EsGobAfirmaCoreMiscHttpTrustStoreManager_createTrustedKeystore() {
  EsGobAfirmaCoreMiscHttpTrustStoreManager_initialize();
  JavaSecurityKeyStore *trustStore;
  @try {
    trustStore = JavaSecurityKeyStore_getInstanceWithNSString_(@"JKS");
    [((JavaSecurityKeyStore *) nil_chk(trustStore)) load__WithJavaIoInputStream:nil withCharArray:EsGobAfirmaCoreMiscHttpTrustStoreManager_TRUSTED_KS_PWD];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaSecurityKeyStoreException_initWithNSString_withJavaLangThrowable_(@"No se ha podido crear un almacen vacio", e);
  }
  
#line 243
  return trustStore;
}


#line 252
JavaSecurityKeyStore *EsGobAfirmaCoreMiscHttpTrustStoreManager_loadTrustedKeyStore(EsGobAfirmaCoreMiscHttpTrustStoreManager *self) {
  
#line 254
  IOSByteArray *ksContent;
  {
    JavaIoInputStream *is = new_JavaIoFileInputStream_initWithJavaIoFile_(
#line 255
    self->tsPath_);
    JavaLangThrowable *__primaryException1 = nil;
    
#line 255
    @try {
      ksContent = EsGobAfirmaCoreMiscAOUtil_getDataFromInputStreamWithJavaIoInputStream_(is);
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (is != nil) {
        if (__primaryException1 != nil) {
          @try {
            [is close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [is close];
        }
      }
    }
  }
  
#line 259
  JavaSecurityKeyStore *trustStore;
  @try {
    JavaIoInputStream *is = new_JavaIoByteArrayInputStream_initWithByteArray_(
#line 260
    ksContent);
    JavaLangThrowable *__primaryException1 = nil;
    @try {
      
#line 261
      trustStore = JavaSecurityKeyStore_getInstanceWithNSString_(@"JKS");
      [((JavaSecurityKeyStore *) nil_chk(trustStore)) load__WithJavaIoInputStream:is withCharArray:EsGobAfirmaCoreMiscHttpTrustStoreManager_TRUSTED_KS_PWD];
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (is != nil) {
        if (__primaryException1 != nil) {
          @try {
            [is close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [is close];
        }
      }
    }
  }
  @catch (
#line 264
  JavaLangException *e) {
    @throw new_JavaSecurityKeyStoreException_initWithNSString_withJavaLangThrowable_(@"No se ha podido cargar el almacen de confianza de la aplicacion", e);
  }
  
#line 268
  return trustStore;
}


#line 275
JavaIoFile *EsGobAfirmaCoreMiscHttpTrustStoreManager_getJKSFile() {
  EsGobAfirmaCoreMiscHttpTrustStoreManager_initialize();
  
#line 276
  return new_JavaIoFile_initWithNSString_withNSString_(EsGobAfirmaCoreMiscPlatform_getUserHome(), JreStrcat("$$$", @".afirma", JreLoadStatic(JavaIoFile, separator), @"TrustedCertsKeystore.jks"));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreMiscHttpTrustStoreManager)
