//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PdfPCell.java
//

#include "Chunk.h"
#include "ColumnText.h"
#include "DocumentException.h"
#include "Element.h"
#include "ExceptionConverter.h"
#include "Image.h"
#include "J2ObjC_source.h"
#include "PdfPCell.h"
#include "PdfPCellEvent.h"
#include "PdfPCellEventForwarder.h"
#include "PdfPRow.h"
#include "PdfPTable.h"
#include "Phrase.h"
#include "Rectangle.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"

#if !__has_feature(objc_arc)
#error "PdfPCell must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfPdfPCell () {
 @public
  ComAowagieTextPdfColumnText *column_;
  /*!
   @brief Vertical alignment of the cell.
   */
  jint verticalAlignment_;
  /*!
   @brief Left padding of the cell.
   */
  jfloat paddingLeft_;
  /*!
   @brief Right padding of the cell.
   */
  jfloat paddingRight_;
  /*!
   @brief Top padding of the cell.
   */
  jfloat paddingTop_;
  /*!
   @brief Bottom padding of the cell.
   */
  jfloat paddingBottom_;
  /*!
   @brief Fixed height of the cell.
   */
  jfloat fixedHeight_;
  /*!
   @brief Minimum height of the cell.
   */
  jfloat minimumHeight_;
  /*!
   @brief Holds value of property noWrap.
   */
  jboolean noWrap_;
  /*!
   @brief Holds value of property table.
   */
  ComAowagieTextPdfPdfPTable *table_;
  /*!
   @brief Holds value of property colspan.
   */
  jint colspan_;
  /*!
   @brief Holds value of property rowspan.
   @since 2.1.6
   */
  jint rowspan_;
  /*!
   @brief Holds value of property image.
   */
  ComAowagieTextImage *image_;
  /*!
   @brief Holds value of property cellEvent.
   */
  id<ComAowagieTextPdfPdfPCellEvent> cellEvent_;
  /*!
   @brief Holds value of property useDescender.
   */
  jboolean useDescender_;
  /*!
   @brief Increases padding to include border if true
   */
  jboolean useBorderPadding_;
  /*!
   @brief The text in the cell.
   */
  ComAowagieTextPhrase *phrase_;
  /*!
   @brief The rotation of the cell.Possible values are
  0, 90, 180 and 270.
   */
  jint rotation_PdfPCell_;
}

/*!
 @brief Constructs a <CODE>PdfPCell</CODE> with a <CODE>PdfPtable</CODE>.
 This constructor allows nested tables.
 @param table The  <CODE> PdfPTable </CODE>
 @param style The style to apply to the cell (you could use getDefaultCell())
 @since 2.1.0
 */
- (instancetype)initWithComAowagieTextPdfPdfPTable:(ComAowagieTextPdfPdfPTable *)table
                     withComAowagieTextPdfPdfPCell:(ComAowagieTextPdfPdfPCell *)style;

/*!
 @brief Tells you whether the cell has a fixed height.
 @return true is a fixed height was set.
 @since 2.1.5
 */
- (jboolean)hasFixedHeight;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfPCell, column_, ComAowagieTextPdfColumnText *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfPCell, table_, ComAowagieTextPdfPdfPTable *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfPCell, image_, ComAowagieTextImage *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfPCell, cellEvent_, id<ComAowagieTextPdfPdfPCellEvent>)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfPCell, phrase_, ComAowagieTextPhrase *)

__attribute__((unused)) static void ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPTable_withComAowagieTextPdfPdfPCell_(ComAowagieTextPdfPdfPCell *self, ComAowagieTextPdfPdfPTable *table, ComAowagieTextPdfPdfPCell *style);

__attribute__((unused)) static ComAowagieTextPdfPdfPCell *new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPTable_withComAowagieTextPdfPdfPCell_(ComAowagieTextPdfPdfPTable *table, ComAowagieTextPdfPdfPCell *style) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfPdfPCell *create_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPTable_withComAowagieTextPdfPdfPCell_(ComAowagieTextPdfPdfPTable *table, ComAowagieTextPdfPdfPCell *style);

__attribute__((unused)) static jboolean ComAowagieTextPdfPdfPCell_hasFixedHeight(ComAowagieTextPdfPdfPCell *self);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PdfPCell.java"


#line 67
@implementation ComAowagieTextPdfPdfPCell

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 132
- (instancetype)init {
  ComAowagieTextPdfPdfPCell_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 145
- (instancetype)initWithComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase {
  ComAowagieTextPdfPdfPCell_initWithComAowagieTextPhrase_(self, phrase);
  return self;
}


#line 162
- (instancetype)initWithComAowagieTextImage:(ComAowagieTextImage *)image
                                withBoolean:(jboolean)fit {
  ComAowagieTextPdfPdfPCell_initWithComAowagieTextImage_withBoolean_(self, image, fit);
  return self;
}


#line 185
- (instancetype)initWithComAowagieTextPdfPdfPTable:(ComAowagieTextPdfPdfPTable *)table {
  ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPTable_(self, table);
  return self;
}


#line 197
- (instancetype)initWithComAowagieTextPdfPdfPTable:(ComAowagieTextPdfPdfPTable *)table
                     withComAowagieTextPdfPdfPCell:(ComAowagieTextPdfPdfPCell *)style {
  ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPTable_withComAowagieTextPdfPdfPCell_(self, table, style);
  return self;
}


#line 229
- (instancetype)initWithComAowagieTextPdfPdfPCell:(ComAowagieTextPdfPdfPCell *)cell {
  ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPCell_(self, cell);
  return self;
}


#line 259
- (void)addElementWithComAowagieTextElement:(id<ComAowagieTextElement>)element {
  if (self->table_ != nil) {
    self->table_ = nil;
    [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) setTextWithComAowagieTextPhrase:nil];
  }
  [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) addElementWithComAowagieTextElement:element];
}


#line 272
- (ComAowagieTextPhrase *)getPhrase {
  return self->phrase_;
}


#line 281
- (void)setPhraseWithComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase {
  self->table_ = nil;
  self->image_ = nil;
  [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) setTextWithComAowagieTextPhrase:self->phrase_ = phrase];
}


#line 292
- (jint)getHorizontalAlignment {
  return [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) getAlignment];
}


#line 302
- (void)setHorizontalAlignmentWithInt:(jint)horizontalAlignment {
  [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) setAlignmentWithInt:horizontalAlignment];
}


#line 311
- (jint)getVerticalAlignment {
  return self->verticalAlignment_;
}


#line 321
- (void)setVerticalAlignmentWithInt:(jint)verticalAlignment {
  if (self->table_ != nil) {
    [self->table_ setExtendLastRowWithBoolean:verticalAlignment == ComAowagieTextElement_ALIGN_TOP];
  }
  self->verticalAlignment_ = verticalAlignment;
}


#line 335
- (jfloat)getEffectivePaddingLeft {
  if ([self isUseBorderPadding]) {
    jfloat border = [self getBorderWidthLeft] / ([self isUseVariableBorders] ? 1.0f : 2.0f);
    return self->paddingLeft_ + border;
  }
  return self->paddingLeft_;
}


#line 346
- (jfloat)getPaddingLeft {
  return self->paddingLeft_;
}


#line 355
- (void)setPaddingLeftWithFloat:(jfloat)paddingLeft {
  self->paddingLeft_ = paddingLeft;
}


#line 365
- (jfloat)getEffectivePaddingRight {
  if ([self isUseBorderPadding]) {
    jfloat border = [self getBorderWidthRight] / ([self isUseVariableBorders] ? 1.0f : 2.0f);
    return self->paddingRight_ + border;
  }
  return self->paddingRight_;
}


#line 378
- (jfloat)getPaddingRight {
  return self->paddingRight_;
}


#line 387
- (void)setPaddingRightWithFloat:(jfloat)paddingRight {
  self->paddingRight_ = paddingRight;
}


#line 397
- (jfloat)getEffectivePaddingTop {
  if ([self isUseBorderPadding]) {
    jfloat border = [self getBorderWidthTop] / ([self isUseVariableBorders] ? 1.0f : 2.0f);
    return self->paddingTop_ + border;
  }
  return self->paddingTop_;
}


#line 410
- (jfloat)getPaddingTop {
  return self->paddingTop_;
}


#line 419
- (void)setPaddingTopWithFloat:(jfloat)paddingTop {
  self->paddingTop_ = paddingTop;
}


#line 430
- (jfloat)getEffectivePaddingBottom {
  if ([self isUseBorderPadding]) {
    jfloat border = [self getBorderWidthBottom] / ([self isUseVariableBorders] ? 1.0f : 2.0f);
    return self->paddingBottom_ + border;
  }
  return self->paddingBottom_;
}


#line 443
- (jfloat)getPaddingBottom {
  return self->paddingBottom_;
}


#line 452
- (void)setPaddingBottomWithFloat:(jfloat)paddingBottom {
  self->paddingBottom_ = paddingBottom;
}


#line 461
- (void)setPaddingWithFloat:(jfloat)padding {
  self->paddingBottom_ = padding;
  self->paddingTop_ = padding;
  self->paddingLeft_ = padding;
  self->paddingRight_ = padding;
}


#line 473
- (jboolean)isUseBorderPadding {
  return self->useBorderPadding_;
}


#line 482
- (void)setUseBorderPaddingWithBoolean:(jboolean)use {
  self->useBorderPadding_ = use;
}


#line 495
- (void)setLeadingWithFloat:(jfloat)fixedLeading
                  withFloat:(jfloat)multipliedLeading {
  
#line 496
  [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) setLeadingWithFloat:fixedLeading withFloat:multipliedLeading];
}


#line 504
- (jfloat)getLeading {
  return [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) getLeading];
}


#line 513
- (jfloat)getMultipliedLeading {
  return [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) getMultipliedLeading];
}


#line 522
- (void)setIndentWithFloat:(jfloat)indent {
  [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) setIndentWithFloat:indent];
}


#line 531
- (jfloat)getIndent {
  return [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) getIndent];
}


#line 540
- (jfloat)getExtraParagraphSpace {
  return [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) getExtraParagraphSpace];
}


#line 549
- (void)setExtraParagraphSpaceWithFloat:(jfloat)extraParagraphSpace {
  [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) setExtraParagraphSpaceWithFloat:extraParagraphSpace];
}


#line 559
- (void)setFixedHeightWithFloat:(jfloat)fixedHeight {
  self->fixedHeight_ = fixedHeight;
  self->minimumHeight_ = 0;
}


#line 569
- (jfloat)getFixedHeight {
  return self->fixedHeight_;
}


#line 579
- (jboolean)hasFixedHeight {
  return ComAowagieTextPdfPdfPCell_hasFixedHeight(self);
}


#line 589
- (void)setMinimumHeightWithFloat:(jfloat)minimumHeight {
  self->minimumHeight_ = minimumHeight;
  self->fixedHeight_ = 0;
}


#line 599
- (jfloat)getMinimumHeight {
  return self->minimumHeight_;
}


#line 610
- (jboolean)isNoWrap {
  return self->noWrap_;
}


#line 619
- (void)setNoWrapWithBoolean:(jboolean)noWrap {
  self->noWrap_ = noWrap;
}


#line 629
- (ComAowagieTextPdfPdfPTable *)getTable {
  return self->table_;
}


#line 640
- (jint)getColspan {
  return self->colspan_;
}


#line 649
- (void)setColspanWithInt:(jint)colspan {
  self->colspan_ = colspan;
}


#line 659
- (jint)getRowspan {
  return self->rowspan_;
}


#line 669
- (void)setRowspanWithInt:(jint)rowspan {
  self->rowspan_ = rowspan;
}


#line 678
- (void)setFollowingIndentWithFloat:(jfloat)indent {
  [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) setFollowingIndentWithFloat:indent];
}


#line 687
- (jfloat)getFollowingIndent {
  return [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) getFollowingIndent];
}


#line 696
- (void)setRightIndentWithFloat:(jfloat)indent {
  [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) setRightIndentWithFloat:indent];
}


#line 705
- (jfloat)getRightIndent {
  return [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) getRightIndent];
}


#line 714
- (jfloat)getSpaceCharRatio {
  return [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) getSpaceCharRatio];
}


#line 727
- (void)setSpaceCharRatioWithFloat:(jfloat)spaceCharRatio {
  [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) setSpaceCharRatioWithFloat:spaceCharRatio];
}


#line 738
- (void)setRunDirectionWithInt:(jint)runDirection {
  [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) setRunDirectionWithInt:runDirection];
}


#line 749
- (jint)getRunDirection {
  return [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) getRunDirection];
}


#line 758
- (ComAowagieTextImage *)getImage {
  return self->image_;
}


#line 767
- (void)setImageWithComAowagieTextImage:(ComAowagieTextImage *)image {
  [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) setTextWithComAowagieTextPhrase:nil];
  self->table_ = nil;
  self->image_ = image;
}


#line 778
- (id<ComAowagieTextPdfPdfPCellEvent>)getCellEvent {
  return self->cellEvent_;
}


#line 787
- (void)setCellEventWithComAowagieTextPdfPdfPCellEvent:(id<ComAowagieTextPdfPdfPCellEvent>)cellEvent {
  if (cellEvent == nil) {
    self->cellEvent_ = nil;
  }
  else
#line 790
  if (self->cellEvent_ == nil) {
    self->cellEvent_ = cellEvent;
  }
  else
#line 792
  if ([self->cellEvent_ isKindOfClass:[ComAowagieTextPdfEventsPdfPCellEventForwarder class]]) {
    [((ComAowagieTextPdfEventsPdfPCellEventForwarder *) self->cellEvent_) addCellEventWithComAowagieTextPdfPdfPCellEvent:cellEvent];
  }
  else {
    
#line 795
    ComAowagieTextPdfEventsPdfPCellEventForwarder *forward = new_ComAowagieTextPdfEventsPdfPCellEventForwarder_init();
    [forward addCellEventWithComAowagieTextPdfPdfPCellEvent:self->cellEvent_];
    [forward addCellEventWithComAowagieTextPdfPdfPCellEvent:cellEvent];
    self->cellEvent_ = forward;
  }
}


#line 807
- (jint)getArabicOptions {
  return [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) getArabicOptions];
}


#line 817
- (void)setArabicOptionsWithInt:(jint)arabicOptions {
  [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) setArabicOptionsWithInt:arabicOptions];
}


#line 826
- (jboolean)isUseAscender {
  return [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) isUseAscender];
}


#line 835
- (void)setUseAscenderWithBoolean:(jboolean)useAscender {
  [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) setUseAscenderWithBoolean:useAscender];
}


#line 845
- (jboolean)isUseDescender {
  return self->useDescender_;
}


#line 854
- (void)setUseDescenderWithBoolean:(jboolean)useDescender {
  self->useDescender_ = useDescender;
}


#line 863
- (ComAowagieTextPdfColumnText *)getColumn {
  return self->column_;
}


#line 873
- (id<JavaUtilList>)getCompositeElements {
  return ((ComAowagieTextPdfColumnText *) nil_chk([self getColumn]))->compositeElements_;
}


#line 882
- (void)setColumnWithComAowagieTextPdfColumnText:(ComAowagieTextPdfColumnText *)column {
  self->column_ = column;
}


#line 891
- (jint)getRotation {
  
#line 893
  return self->rotation_PdfPCell_;
}


#line 902
- (void)setRotationWithInt:(jint)rotation {
  rotation %= 360;
  if (rotation < 0) {
    rotation += 360;
  }
  if (JreIntMod(rotation, 90) != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Rotation must be a multiple of 90.");
  }
  self->rotation_PdfPCell_ = rotation;
}


#line 918
- (void)consumeHeightWithFloat:(jfloat)height {
  jfloat rightLimit = [self getRight] - [self getEffectivePaddingRight];
  jfloat leftLimit = [self getLeft] + [self getEffectivePaddingLeft];
  jfloat bry = height - [self getEffectivePaddingTop] - [self getEffectivePaddingBottom];
  if ([self getRotation] != 90 && [self getRotation] != 270) {
    [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) setSimpleColumnWithFloat:leftLimit withFloat:bry + 0.001f withFloat:rightLimit withFloat:0];
  }
  else {
    [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) setSimpleColumnWithFloat:0 withFloat:leftLimit withFloat:bry + 0.001f withFloat:rightLimit];
  }
  @try {
    [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) goWithBoolean:true];
  }
  @catch (
#line 930
  ComAowagieTextDocumentException *e) {
  }
}


#line 940
- (jfloat)getMaxHeight {
  jboolean pivoted = [self getRotation] == 90 || [self getRotation] == 270;
  ComAowagieTextImage *img = [self getImage];
  if (img != nil) {
    [img scalePercentWithFloat:100];
    jfloat refWidth = pivoted ? [img getScaledHeight] : [img getScaledWidth];
    jfloat scale_ = ([self getRight] - [self getEffectivePaddingRight] -
#line 947
    [self getEffectivePaddingLeft] - [self getLeft]) / refWidth;
    [img scalePercentWithFloat:scale_ * 100];
    jfloat refHeight = pivoted ? [img getScaledWidth] : [img getScaledHeight];
    [self setBottomWithFloat:[self getTop] - [self getEffectivePaddingTop] - [self getEffectivePaddingBottom] - refHeight];
  }
  else {
    if (pivoted && ComAowagieTextPdfPdfPCell_hasFixedHeight(self)) {
      [self setBottomWithFloat:[self getTop] - [self getFixedHeight]];
    }
    else {
      
#line 956
      ComAowagieTextPdfColumnText *ct = ComAowagieTextPdfColumnText_duplicateWithComAowagieTextPdfColumnText_([self getColumn]);
      jfloat right;
      
#line 957
      jfloat top;
      
#line 957
      jfloat left;
      
#line 957
      jfloat bottom;
      if (pivoted) {
        right = ComAowagieTextPdfPdfPRow_RIGHT_LIMIT;
        top = [self getRight] - [self getEffectivePaddingRight];
        left = 0;
        bottom = [self getLeft] + [self getEffectivePaddingLeft];
      }
      else {
        right = [self isNoWrap] ? ComAowagieTextPdfPdfPRow_RIGHT_LIMIT : [self getRight] - [self getEffectivePaddingRight];
        top = [self getTop] - [self getEffectivePaddingTop];
        left = [self getLeft] + [self getEffectivePaddingLeft];
        bottom = ComAowagieTextPdfPdfPCell_hasFixedHeight(self) ? top + [self getEffectivePaddingBottom] - [self getFixedHeight] : ComAowagieTextPdfPdfPRow_BOTTOM_LIMIT;
      }
      ComAowagieTextPdfPdfPRow_setColumnWithComAowagieTextPdfColumnText_withFloat_withFloat_withFloat_withFloat_(ct, left, bottom, right, top);
      @try {
        [((ComAowagieTextPdfColumnText *) nil_chk(ct)) goWithBoolean:true];
      }
      @catch (
#line 973
      ComAowagieTextDocumentException *e) {
        @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
      }
      if (pivoted) {
        [self setBottomWithFloat:[self getTop] - [self getEffectivePaddingTop] - [self getEffectivePaddingBottom] - [ct getFilledWidth]];
      }
      else {
        
#line 979
        jfloat yLine = [ct getYLine];
        if ([self isUseDescender]) {
          JrePlusAssignFloatF(&yLine, [ct getDescender]);
        }
        [self setBottomWithFloat:yLine - [self getEffectivePaddingBottom]];
      }
    }
  }
  jfloat height = [self getHeight];
  if (height < [self getFixedHeight]) {
    height = [self getFixedHeight];
  }
  else
#line 990
  if (height < [self getMinimumHeight]) {
    height = [self getMinimumHeight];
  }
  return height;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPhrase;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 12, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 12, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 12, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 12, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 18, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfPTable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 12, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 12, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextImage;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfPCellEvent;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 18, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfColumnText;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 40, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 42, 12, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithComAowagieTextPhrase:);
  methods[2].selector = @selector(initWithComAowagieTextImage:withBoolean:);
  methods[3].selector = @selector(initWithComAowagieTextPdfPdfPTable:);
  methods[4].selector = @selector(initWithComAowagieTextPdfPdfPTable:withComAowagieTextPdfPdfPCell:);
  methods[5].selector = @selector(initWithComAowagieTextPdfPdfPCell:);
  methods[6].selector = @selector(addElementWithComAowagieTextElement:);
  methods[7].selector = @selector(getPhrase);
  methods[8].selector = @selector(setPhraseWithComAowagieTextPhrase:);
  methods[9].selector = @selector(getHorizontalAlignment);
  methods[10].selector = @selector(setHorizontalAlignmentWithInt:);
  methods[11].selector = @selector(getVerticalAlignment);
  methods[12].selector = @selector(setVerticalAlignmentWithInt:);
  methods[13].selector = @selector(getEffectivePaddingLeft);
  methods[14].selector = @selector(getPaddingLeft);
  methods[15].selector = @selector(setPaddingLeftWithFloat:);
  methods[16].selector = @selector(getEffectivePaddingRight);
  methods[17].selector = @selector(getPaddingRight);
  methods[18].selector = @selector(setPaddingRightWithFloat:);
  methods[19].selector = @selector(getEffectivePaddingTop);
  methods[20].selector = @selector(getPaddingTop);
  methods[21].selector = @selector(setPaddingTopWithFloat:);
  methods[22].selector = @selector(getEffectivePaddingBottom);
  methods[23].selector = @selector(getPaddingBottom);
  methods[24].selector = @selector(setPaddingBottomWithFloat:);
  methods[25].selector = @selector(setPaddingWithFloat:);
  methods[26].selector = @selector(isUseBorderPadding);
  methods[27].selector = @selector(setUseBorderPaddingWithBoolean:);
  methods[28].selector = @selector(setLeadingWithFloat:withFloat:);
  methods[29].selector = @selector(getLeading);
  methods[30].selector = @selector(getMultipliedLeading);
  methods[31].selector = @selector(setIndentWithFloat:);
  methods[32].selector = @selector(getIndent);
  methods[33].selector = @selector(getExtraParagraphSpace);
  methods[34].selector = @selector(setExtraParagraphSpaceWithFloat:);
  methods[35].selector = @selector(setFixedHeightWithFloat:);
  methods[36].selector = @selector(getFixedHeight);
  methods[37].selector = @selector(hasFixedHeight);
  methods[38].selector = @selector(setMinimumHeightWithFloat:);
  methods[39].selector = @selector(getMinimumHeight);
  methods[40].selector = @selector(isNoWrap);
  methods[41].selector = @selector(setNoWrapWithBoolean:);
  methods[42].selector = @selector(getTable);
  methods[43].selector = @selector(getColspan);
  methods[44].selector = @selector(setColspanWithInt:);
  methods[45].selector = @selector(getRowspan);
  methods[46].selector = @selector(setRowspanWithInt:);
  methods[47].selector = @selector(setFollowingIndentWithFloat:);
  methods[48].selector = @selector(getFollowingIndent);
  methods[49].selector = @selector(setRightIndentWithFloat:);
  methods[50].selector = @selector(getRightIndent);
  methods[51].selector = @selector(getSpaceCharRatio);
  methods[52].selector = @selector(setSpaceCharRatioWithFloat:);
  methods[53].selector = @selector(setRunDirectionWithInt:);
  methods[54].selector = @selector(getRunDirection);
  methods[55].selector = @selector(getImage);
  methods[56].selector = @selector(setImageWithComAowagieTextImage:);
  methods[57].selector = @selector(getCellEvent);
  methods[58].selector = @selector(setCellEventWithComAowagieTextPdfPdfPCellEvent:);
  methods[59].selector = @selector(getArabicOptions);
  methods[60].selector = @selector(setArabicOptionsWithInt:);
  methods[61].selector = @selector(isUseAscender);
  methods[62].selector = @selector(setUseAscenderWithBoolean:);
  methods[63].selector = @selector(isUseDescender);
  methods[64].selector = @selector(setUseDescenderWithBoolean:);
  methods[65].selector = @selector(getColumn);
  methods[66].selector = @selector(getCompositeElements);
  methods[67].selector = @selector(setColumnWithComAowagieTextPdfColumnText:);
  methods[68].selector = @selector(getRotation);
  methods[69].selector = @selector(setRotationWithInt:);
  methods[70].selector = @selector(consumeHeightWithFloat:);
  methods[71].selector = @selector(getMaxHeight);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "column_", "LComAowagieTextPdfColumnText;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "verticalAlignment_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paddingLeft_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paddingRight_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paddingTop_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paddingBottom_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fixedHeight_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "minimumHeight_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "noWrap_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "table_", "LComAowagieTextPdfPdfPTable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "colspan_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rowspan_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "image_", "LComAowagieTextImage;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cellEvent_", "LComAowagieTextPdfPdfPCellEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useDescender_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useBorderPadding_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "phrase_", "LComAowagieTextPhrase;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rotation_PdfPCell_", "I", .constantValue.asLong = 0, 0x2, 43, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPhrase;", "LComAowagieTextImage;Z", "LComAowagieTextPdfPdfPTable;", "LComAowagieTextPdfPdfPTable;LComAowagieTextPdfPdfPCell;", "LComAowagieTextPdfPdfPCell;", "addElement", "LComAowagieTextElement;", "setPhrase", "setHorizontalAlignment", "I", "setVerticalAlignment", "setPaddingLeft", "F", "setPaddingRight", "setPaddingTop", "setPaddingBottom", "setPadding", "setUseBorderPadding", "Z", "setLeading", "FF", "setIndent", "setExtraParagraphSpace", "setFixedHeight", "setMinimumHeight", "setNoWrap", "setColspan", "setRowspan", "setFollowingIndent", "setRightIndent", "setSpaceCharRatio", "setRunDirection", "setImage", "LComAowagieTextImage;", "setCellEvent", "LComAowagieTextPdfPdfPCellEvent;", "setArabicOptions", "setUseAscender", "setUseDescender", "setColumn", "LComAowagieTextPdfColumnText;", "setRotation", "consumeHeight", "rotation" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfPCell = { "PdfPCell", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x1, 72, 18, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfPCell;
}

@end


#line 132
void ComAowagieTextPdfPdfPCell_init(ComAowagieTextPdfPdfPCell *self) {
  ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(self, 0, 0, 0, 0);
  self->column_ = new_ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(
#line 69
  nil);
  self->verticalAlignment_ =
#line 72
  ComAowagieTextElement_ALIGN_TOP;
  self->paddingLeft_ =
#line 75
  2;
  self->paddingRight_ =
#line 78
  2;
  self->paddingTop_ =
#line 81
  2;
  self->paddingBottom_ =
#line 84
  2;
  self->fixedHeight_ =
#line 87
  0;
  self->noWrap_ =
#line 93
  false;
  self->colspan_ =
#line 99
  1;
  self->rowspan_ =
#line 105
  1;
  self->useBorderPadding_ =
#line 117
  false;
  
#line 134
  self->borderWidth_ = 0.5f;
  self->border_ = ComAowagieTextRectangle_BOX;
  [self->column_ setLeadingWithFloat:0 withFloat:1];
}


#line 132
ComAowagieTextPdfPdfPCell *new_ComAowagieTextPdfPdfPCell_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfPCell, init)
}


#line 132
ComAowagieTextPdfPdfPCell *create_ComAowagieTextPdfPdfPCell_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfPCell, init)
}


#line 145
void ComAowagieTextPdfPdfPCell_initWithComAowagieTextPhrase_(ComAowagieTextPdfPdfPCell *self, ComAowagieTextPhrase *phrase) {
  ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(self, 0, 0, 0, 0);
  self->column_ = new_ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(
#line 69
  nil);
  self->verticalAlignment_ =
#line 72
  ComAowagieTextElement_ALIGN_TOP;
  self->paddingLeft_ =
#line 75
  2;
  self->paddingRight_ =
#line 78
  2;
  self->paddingTop_ =
#line 81
  2;
  self->paddingBottom_ =
#line 84
  2;
  self->fixedHeight_ =
#line 87
  0;
  self->noWrap_ =
#line 93
  false;
  self->colspan_ =
#line 99
  1;
  self->rowspan_ =
#line 105
  1;
  self->useBorderPadding_ =
#line 117
  false;
  
#line 147
  self->borderWidth_ = 0.5f;
  self->border_ = ComAowagieTextRectangle_BOX;
  [self->column_ addTextWithComAowagieTextPhrase:self->phrase_ = phrase];
  [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) setLeadingWithFloat:0 withFloat:1];
}


#line 145
ComAowagieTextPdfPdfPCell *new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPhrase_(ComAowagieTextPhrase *phrase) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfPCell, initWithComAowagieTextPhrase_, phrase)
}


#line 145
ComAowagieTextPdfPdfPCell *create_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPhrase_(ComAowagieTextPhrase *phrase) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfPCell, initWithComAowagieTextPhrase_, phrase)
}


#line 162
void ComAowagieTextPdfPdfPCell_initWithComAowagieTextImage_withBoolean_(ComAowagieTextPdfPdfPCell *self, ComAowagieTextImage *image, jboolean fit) {
  ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(self, 0, 0, 0, 0);
  self->column_ = new_ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(
#line 69
  nil);
  self->verticalAlignment_ =
#line 72
  ComAowagieTextElement_ALIGN_TOP;
  self->paddingLeft_ =
#line 75
  2;
  self->paddingRight_ =
#line 78
  2;
  self->paddingTop_ =
#line 81
  2;
  self->paddingBottom_ =
#line 84
  2;
  self->fixedHeight_ =
#line 87
  0;
  self->noWrap_ =
#line 93
  false;
  self->colspan_ =
#line 99
  1;
  self->rowspan_ =
#line 105
  1;
  self->useBorderPadding_ =
#line 117
  false;
  
#line 164
  self->borderWidth_ = 0.5f;
  self->border_ = ComAowagieTextRectangle_BOX;
  if (fit) {
    self->image_ = image;
    [self->column_ setLeadingWithFloat:0 withFloat:1];
    [self setPaddingWithFloat:self->borderWidth_ / 2];
  }
  else {
    [self->column_ addTextWithComAowagieTextPhrase:self->phrase_ = new_ComAowagieTextPhrase_initWithComAowagieTextChunk_(new_ComAowagieTextChunk_initWithComAowagieTextImage_withFloat_withFloat_(image, 0, 0))];
    [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) setLeadingWithFloat:0 withFloat:1];
    [self setPaddingWithFloat:0];
  }
}


#line 162
ComAowagieTextPdfPdfPCell *new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextImage_withBoolean_(ComAowagieTextImage *image, jboolean fit) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfPCell, initWithComAowagieTextImage_withBoolean_, image, fit)
}


#line 162
ComAowagieTextPdfPdfPCell *create_ComAowagieTextPdfPdfPCell_initWithComAowagieTextImage_withBoolean_(ComAowagieTextImage *image, jboolean fit) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfPCell, initWithComAowagieTextImage_withBoolean_, image, fit)
}


#line 185
void ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPTable_(ComAowagieTextPdfPdfPCell *self, ComAowagieTextPdfPdfPTable *table) {
  ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPTable_withComAowagieTextPdfPdfPCell_(self, table, nil);
}


#line 185
ComAowagieTextPdfPdfPCell *new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPTable_(ComAowagieTextPdfPdfPTable *table) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfPCell, initWithComAowagieTextPdfPdfPTable_, table)
}


#line 185
ComAowagieTextPdfPdfPCell *create_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPTable_(ComAowagieTextPdfPdfPTable *table) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfPCell, initWithComAowagieTextPdfPdfPTable_, table)
}


#line 197
void ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPTable_withComAowagieTextPdfPdfPCell_(ComAowagieTextPdfPdfPCell *self, ComAowagieTextPdfPdfPTable *table, ComAowagieTextPdfPdfPCell *style) {
  ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(self, 0, 0, 0, 0);
  self->column_ = new_ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(
#line 69
  nil);
  self->verticalAlignment_ =
#line 72
  ComAowagieTextElement_ALIGN_TOP;
  self->paddingLeft_ =
#line 75
  2;
  self->paddingRight_ =
#line 78
  2;
  self->paddingTop_ =
#line 81
  2;
  self->paddingBottom_ =
#line 84
  2;
  self->fixedHeight_ =
#line 87
  0;
  self->noWrap_ =
#line 93
  false;
  self->colspan_ =
#line 99
  1;
  self->rowspan_ =
#line 105
  1;
  self->useBorderPadding_ =
#line 117
  false;
  
#line 199
  self->borderWidth_ = 0.5f;
  self->border_ = ComAowagieTextRectangle_BOX;
  [self->column_ setLeadingWithFloat:0 withFloat:1];
  self->table_ = table;
  [((ComAowagieTextPdfPdfPTable *) nil_chk(table)) setWidthPercentageWithFloat:100];
  [table setExtendLastRowWithBoolean:true];
  [((ComAowagieTextPdfColumnText *) nil_chk(self->column_)) addElementWithComAowagieTextElement:table];
  if (style != nil) {
    [self cloneNonPositionParametersWithComAowagieTextRectangle:style];
    self->verticalAlignment_ = style->verticalAlignment_;
    self->paddingLeft_ = style->paddingLeft_;
    self->paddingRight_ = style->paddingRight_;
    self->paddingTop_ = style->paddingTop_;
    self->paddingBottom_ = style->paddingBottom_;
    self->colspan_ = style->colspan_;
    self->rowspan_ = style->rowspan_;
    self->cellEvent_ = style->cellEvent_;
    self->useDescender_ = style->useDescender_;
    self->useBorderPadding_ = style->useBorderPadding_;
    self->rotation_PdfPCell_ = style->rotation_PdfPCell_;
  }
  else {
    
#line 220
    [self setPaddingWithFloat:0];
  }
}


#line 197
ComAowagieTextPdfPdfPCell *new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPTable_withComAowagieTextPdfPdfPCell_(ComAowagieTextPdfPdfPTable *table, ComAowagieTextPdfPdfPCell *style) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfPCell, initWithComAowagieTextPdfPdfPTable_withComAowagieTextPdfPdfPCell_, table, style)
}


#line 197
ComAowagieTextPdfPdfPCell *create_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPTable_withComAowagieTextPdfPdfPCell_(ComAowagieTextPdfPdfPTable *table, ComAowagieTextPdfPdfPCell *style) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfPCell, initWithComAowagieTextPdfPdfPTable_withComAowagieTextPdfPdfPCell_, table, style)
}


#line 229
void ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPCell_(ComAowagieTextPdfPdfPCell *self, ComAowagieTextPdfPdfPCell *cell) {
  ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(self, ((ComAowagieTextPdfPdfPCell *) nil_chk(cell))->llx_, cell->lly_, cell->urx_, cell->ury_);
  self->column_ = new_ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(
#line 69
  nil);
  self->verticalAlignment_ =
#line 72
  ComAowagieTextElement_ALIGN_TOP;
  self->paddingLeft_ =
#line 75
  2;
  self->paddingRight_ =
#line 78
  2;
  self->paddingTop_ =
#line 81
  2;
  self->paddingBottom_ =
#line 84
  2;
  self->fixedHeight_ =
#line 87
  0;
  self->noWrap_ =
#line 93
  false;
  self->colspan_ =
#line 99
  1;
  self->rowspan_ =
#line 105
  1;
  self->useBorderPadding_ =
#line 117
  false;
  
#line 231
  [self cloneNonPositionParametersWithComAowagieTextRectangle:cell];
  self->verticalAlignment_ = cell->verticalAlignment_;
  self->paddingLeft_ = cell->paddingLeft_;
  self->paddingRight_ = cell->paddingRight_;
  self->paddingTop_ = cell->paddingTop_;
  self->paddingBottom_ = cell->paddingBottom_;
  self->phrase_ = cell->phrase_;
  self->fixedHeight_ = cell->fixedHeight_;
  self->minimumHeight_ = cell->minimumHeight_;
  self->noWrap_ = cell->noWrap_;
  self->colspan_ = cell->colspan_;
  self->rowspan_ = cell->rowspan_;
  if (cell->table_ != nil) {
    self->table_ = new_ComAowagieTextPdfPdfPTable_initWithComAowagieTextPdfPdfPTable_(cell->table_);
  }
  self->image_ = ComAowagieTextImage_getInstanceWithComAowagieTextImage_(cell->image_);
  self->cellEvent_ = cell->cellEvent_;
  self->useDescender_ = cell->useDescender_;
  self->column_ = ComAowagieTextPdfColumnText_duplicateWithComAowagieTextPdfColumnText_(cell->column_);
  self->useBorderPadding_ = cell->useBorderPadding_;
  self->rotation_PdfPCell_ = cell->rotation_PdfPCell_;
}


#line 229
ComAowagieTextPdfPdfPCell *new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPCell_(ComAowagieTextPdfPdfPCell *cell) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfPCell, initWithComAowagieTextPdfPdfPCell_, cell)
}


#line 229
ComAowagieTextPdfPdfPCell *create_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPCell_(ComAowagieTextPdfPdfPCell *cell) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfPCell, initWithComAowagieTextPdfPdfPCell_, cell)
}


#line 579
jboolean ComAowagieTextPdfPdfPCell_hasFixedHeight(ComAowagieTextPdfPdfPCell *self) {
  return [self getFixedHeight] > 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfPCell)
