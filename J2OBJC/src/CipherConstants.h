//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/ciphers/CipherConstants.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CipherConstants")
#ifdef RESTRICT_CipherConstants
#define INCLUDE_ALL_CipherConstants 0
#else
#define INCLUDE_ALL_CipherConstants 1
#endif
#undef RESTRICT_CipherConstants

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (EsGobAfirmaCoreCiphersCipherConstants_) && (INCLUDE_ALL_CipherConstants || defined(INCLUDE_EsGobAfirmaCoreCiphersCipherConstants))
#define EsGobAfirmaCoreCiphersCipherConstants_

/*!
 @brief Constantes de cifrado (usando JCE).
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s
 */
@interface EsGobAfirmaCoreCiphersCipherConstants : NSObject

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobAfirmaCoreCiphersCipherConstants)

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaCoreCiphersCipherConstants)

#endif

#if !defined (EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_) && (INCLUDE_ALL_CipherConstants || defined(INCLUDE_EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm))
#define EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_Enum) {
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_Enum_AES = 0,
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_Enum_BLOWFISH = 1,
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_Enum_DES = 2,
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_Enum_TRIPLEDES = 3,
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_Enum_PBEWITHMD5ANDDES = 4,
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_Enum_PBEWITHSHA1ANDDESEDE = 5,
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_Enum_PBEWITHSHA1ANDRC2_40 = 6,
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_Enum_HMACMD5 = 7,
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_Enum_HMACSHA1 = 8,
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_Enum_HMACSHA256 = 9,
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_Enum_HMACSHA384 = 10,
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_Enum_HMACSHA512 = 11,
};

/*!
 @brief Algoritmos de cifrado soportados.
 */
@interface EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm : JavaLangEnum

#pragma mark Public

/*!
 @brief Obtiene al algoritmo de cifrado por defecto.
 @return Algoritmo de cifrado por defecto
 */
+ (EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *)getDefault;

/*!
 @brief Obtiene el nombre del algoritmo.
 @return Nombre del algoritmo
 */
- (NSString *)getName;

/*!
 @brief Obtiene el OID (<i>Object IDentifier</i>) ASN.1 del algoritmo.
 @return OID del algoritmo
 */
- (NSString *)getOid;

/*!
 @brief Recupera el algoritmo soportado cuyo nombre se indique.Si el
  algoritmo indicado es nulo o no esta soportado, se devolver&aacute; <code>null</code>.
 @param algorithmName Nombre del algoritmo.
 @return Algoritmo solicitado.
 */
+ (EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *)getValueOfWithNSString:(NSString *)algorithmName;

/*!
 @brief Indica si el algoritmo de cifrado soporta claves.
 @return <code>true</code> si el algoritmo soporta claves (en vez de
          contrase&ntilde;as), <code>false</code> en caso contrario
 */
- (jboolean)supportsKey;

/*!
 @brief Indica si el algoritmo de cifrado soporta contrase&ntilde;as.
 @return <code>true</code> si el algoritmo soporta contrase&ntilde;as
          (en vez de claves), <code>false</code> en caso contrario
 */
- (jboolean)supportsPassword;

- (NSString *)description;

+ (EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_values_[];

/*!
 @brief Advanced Encryption Standard (AES).
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_get_AES(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm, AES)

/*!
 @brief Blowfish.
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_get_BLOWFISH(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm, BLOWFISH)

/*!
 @brief Data Encryption Standard (DES).
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_get_DES(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm, DES)

/*!
 @brief Triple DES (3DES).
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_get_TRIPLEDES(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm, TRIPLEDES)

/*!
 @brief Contrase&ntilde;a con MD5 y DES.
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_get_PBEWITHMD5ANDDES(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm, PBEWITHMD5ANDDES)

/*!
 @brief Contrase&ntilde;a con SHA1 y 3DES.
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_get_PBEWITHSHA1ANDDESEDE(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm, PBEWITHSHA1ANDDESEDE)

/*!
 @brief Contrase&ntilde;a con SHA1 y RC2.
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_get_PBEWITHSHA1ANDRC2_40(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm, PBEWITHSHA1ANDRC2_40)

/*!
 @brief MAC HMACMD5
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_get_HMACMD5(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm, HMACMD5)

/*!
 @brief MAC HMACSHA1
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_get_HMACSHA1(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm, HMACSHA1)

/*!
 @brief MAC HMACSHA256
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_get_HMACSHA256(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm, HMACSHA256)

/*!
 @brief MAC HMACSHA384
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_get_HMACSHA384(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm, HMACSHA384)

/*!
 @brief MAC HMACSHA512
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_get_HMACSHA512(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm, HMACSHA512)

FOUNDATION_EXPORT EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_getDefault(void);

FOUNDATION_EXPORT EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_getValueOfWithNSString_(NSString *algorithmName);

FOUNDATION_EXPORT IOSObjectArray *EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_values(void);

FOUNDATION_EXPORT EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm)

#endif

#if !defined (EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_) && (INCLUDE_ALL_CipherConstants || defined(INCLUDE_EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding))
#define EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_Enum) {
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_Enum_PKCS5PADDING = 0,
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_Enum_ISO10126PADDING = 1,
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_Enum_NOPADDING = 2,
};

/*!
 @brief Relleno (padding) para algorimos de cifrado.
 */
@interface EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding : JavaLangEnum

#pragma mark Public

/*!
 @brief Obtiene el nombre del tipo de relleno.
 @return Nombre del tipo de relleno (padding)
 */
- (NSString *)getName;

/*!
 @brief Recupera el relleno soportado cuyo nombre se indique.Si el relleno
  indicado es nulo o no est&aacute; soportado, se devolver&aacute; <code>null</code>.
 @param paddingName Nombre del algoritmo de relleno.
 @return Agoritmo de relleno solicitado.
 */
+ (EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *)getValueOfWithNSString:(NSString *)paddingName;

- (NSString *)description;

+ (EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_values_[];

/*!
 @brief Relleno PKCS#5.
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_get_PKCS5PADDING(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding, PKCS5PADDING)

/*!
 @brief Relleno ISO 10126.
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_get_ISO10126PADDING(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding, ISO10126PADDING)

/*!
 @brief Sin relleno.
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_get_NOPADDING(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding, NOPADDING)

FOUNDATION_EXPORT EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_getValueOfWithNSString_(NSString *paddingName);

FOUNDATION_EXPORT IOSObjectArray *EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_values(void);

FOUNDATION_EXPORT EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding)

#endif

#if !defined (EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_) && (INCLUDE_ALL_CipherConstants || defined(INCLUDE_EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode))
#define EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_Enum) {
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_Enum_ECB = 0,
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_Enum_CBC = 1,
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_Enum_PCBC = 2,
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_Enum_CTR = 3,
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_Enum_CFB = 4,
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_Enum_OFB = 5,
};

/*!
 @brief Modo de bloque para algoritmos de cifrado.
 */
@interface EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode : JavaLangEnum

#pragma mark Public

/*!
 @brief Obtiene el nombre del modo de bloque.
 @return Nombre del modo de bloque
 */
- (NSString *)getName;

/*!
 @brief Recupera el modo de bloque soportado cuyo nombre se indique.Si el
  modo de bloque indicado es nulo o no est&aacute; soportado, se
  devolver&aacute; <code>null</code>.
 @param blockModeName Nombre del modo de bloque.
 @return Modo de bloque solicitado.
 */
+ (EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *)getValueOfWithNSString:(NSString *)blockModeName;

- (NSString *)description;

+ (EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_values_[];

/*!
 @brief Electronic CodeBook (ECB).
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_get_ECB(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode, ECB)

/*!
 @brief Cipher-Block Chaining (CBC).
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_get_CBC(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode, CBC)

/*!
 @brief Propagating Cipher-Block Chaining (PCBC).
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_get_PCBC(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode, PCBC)

/*!
 @brief Counter (CTR).
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_get_CTR(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode, CTR)

/*!
 @brief Cipher FeedBack (CFB).
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_get_CFB(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode, CFB)

/*!
 @brief Output FeedBack (OFB).
 */
inline EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_get_OFB(void);
J2OBJC_ENUM_CONSTANT(EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode, OFB)

FOUNDATION_EXPORT EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_getValueOfWithNSString_(NSString *blockModeName);

FOUNDATION_EXPORT IOSObjectArray *EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_values(void);

FOUNDATION_EXPORT EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_CipherConstants")
