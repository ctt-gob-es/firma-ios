//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/color/ICC_ColorSpace.java
//

#include "CMMException.h"
#include "ColorConverter.h"
#include "ColorScaler.h"
#include "ColorSpace.h"
#include "ICC_ColorSpace.h"
#include "ICC_Profile.h"
#include "ICC_ProfileStub.h"
#include "ICC_Transform.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Messages.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/ObjectStreamField.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalArgumentException.h"

#if !__has_feature(objc_arc)
#error "ICC_ColorSpace must be compiled with ARC (-fobjc-arc)"
#endif

@interface HarmonyJavaAwtColorICC_ColorSpace () {
 @public
  HarmonyJavaAwtColorICC_Profile *profile_;
  IOSFloatArray *minValues_;
  IOSFloatArray *maxValues_;
  ComICC_Transform *toRGBTransform_;
  ComICC_Transform *fromRGBTransform_;
  ComICC_Transform *toXYZTransform_;
  ComICC_Transform *fromXYZTransform_;
  ComColorConverter *converter_;
  ComColorScaler *scaler_;
  jboolean scalingDataLoaded_;
  HarmonyJavaAwtColorICC_ColorSpace *resolvedDeserializedInst_;
}

- (void)fillMinMaxValues;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

@end

J2OBJC_FIELD_SETTER(HarmonyJavaAwtColorICC_ColorSpace, profile_, HarmonyJavaAwtColorICC_Profile *)
J2OBJC_FIELD_SETTER(HarmonyJavaAwtColorICC_ColorSpace, minValues_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(HarmonyJavaAwtColorICC_ColorSpace, maxValues_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(HarmonyJavaAwtColorICC_ColorSpace, toRGBTransform_, ComICC_Transform *)
J2OBJC_FIELD_SETTER(HarmonyJavaAwtColorICC_ColorSpace, fromRGBTransform_, ComICC_Transform *)
J2OBJC_FIELD_SETTER(HarmonyJavaAwtColorICC_ColorSpace, toXYZTransform_, ComICC_Transform *)
J2OBJC_FIELD_SETTER(HarmonyJavaAwtColorICC_ColorSpace, fromXYZTransform_, ComICC_Transform *)
J2OBJC_FIELD_SETTER(HarmonyJavaAwtColorICC_ColorSpace, converter_, ComColorConverter *)
J2OBJC_FIELD_SETTER(HarmonyJavaAwtColorICC_ColorSpace, scaler_, ComColorScaler *)
J2OBJC_FIELD_SETTER(HarmonyJavaAwtColorICC_ColorSpace, resolvedDeserializedInst_, HarmonyJavaAwtColorICC_ColorSpace *)

inline jlong HarmonyJavaAwtColorICC_ColorSpace_get_serialVersionUID(void);
#define HarmonyJavaAwtColorICC_ColorSpace_serialVersionUID 3455889114070431483LL
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtColorICC_ColorSpace, serialVersionUID, jlong)

inline IOSObjectArray *HarmonyJavaAwtColorICC_ColorSpace_get_serialPersistentFields(void);
static IOSObjectArray *HarmonyJavaAwtColorICC_ColorSpace_serialPersistentFields;
J2OBJC_STATIC_FIELD_OBJ_FINAL(HarmonyJavaAwtColorICC_ColorSpace, serialPersistentFields, IOSObjectArray *)

/*!
 @brief According to ICC specification (from http://www.color.org) "For the
  CIEXYZ encoding, each component (X, Y, and Z) is encoded as a
  u1Fixed15Number".This means that max value for this encoding is 1 +
  (32767/32768)
 */
inline jfloat HarmonyJavaAwtColorICC_ColorSpace_get_MAX_XYZ(void);
#define HarmonyJavaAwtColorICC_ColorSpace_MAX_XYZ 1.9999695f
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtColorICC_ColorSpace, MAX_XYZ, jfloat)

inline jfloat HarmonyJavaAwtColorICC_ColorSpace_get_MAX_SHORT(void);
#define HarmonyJavaAwtColorICC_ColorSpace_MAX_SHORT 65535.0f
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtColorICC_ColorSpace, MAX_SHORT, jfloat)

inline jfloat HarmonyJavaAwtColorICC_ColorSpace_get_INV_MAX_SHORT(void);
#define HarmonyJavaAwtColorICC_ColorSpace_INV_MAX_SHORT 1.5259022E-5f
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtColorICC_ColorSpace, INV_MAX_SHORT, jfloat)

inline jfloat HarmonyJavaAwtColorICC_ColorSpace_get_SHORT2XYZ_FACTOR(void);
#define HarmonyJavaAwtColorICC_ColorSpace_SHORT2XYZ_FACTOR 3.0517578E-5f
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtColorICC_ColorSpace, SHORT2XYZ_FACTOR, jfloat)

inline jfloat HarmonyJavaAwtColorICC_ColorSpace_get_XYZ2SHORT_FACTOR(void);
#define HarmonyJavaAwtColorICC_ColorSpace_XYZ2SHORT_FACTOR 32768.0f
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtColorICC_ColorSpace, XYZ2SHORT_FACTOR, jfloat)

__attribute__((unused)) static void HarmonyJavaAwtColorICC_ColorSpace_fillMinMaxValues(HarmonyJavaAwtColorICC_ColorSpace *self);

__attribute__((unused)) static void HarmonyJavaAwtColorICC_ColorSpace_writeObjectWithJavaIoObjectOutputStream_(HarmonyJavaAwtColorICC_ColorSpace *self, JavaIoObjectOutputStream *outArg);

__attribute__((unused)) static void HarmonyJavaAwtColorICC_ColorSpace_readObjectWithJavaIoObjectInputStream_(HarmonyJavaAwtColorICC_ColorSpace *self, JavaIoObjectInputStream *inArg);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/color/ICC_ColorSpace.java"

J2OBJC_INITIALIZED_DEFN(HarmonyJavaAwtColorICC_ColorSpace)


#line 29
@implementation HarmonyJavaAwtColorICC_ColorSpace


#line 70
- (instancetype)initWithHarmonyJavaAwtColorICC_Profile:(HarmonyJavaAwtColorICC_Profile *)pf {
  HarmonyJavaAwtColorICC_ColorSpace_initWithHarmonyJavaAwtColorICC_Profile_(self, pf);
  return self;
}


#line 90
- (HarmonyJavaAwtColorICC_Profile *)getProfile {
  if ([profile_ isKindOfClass:[HarmonyJavaAwtColorICC_ProfileStub class]]) {
    profile_ = [((HarmonyJavaAwtColorICC_ProfileStub *) nil_chk(((HarmonyJavaAwtColorICC_ProfileStub *) profile_))) loadProfile];
  }
  
#line 95
  return profile_;
}


#line 98
- (IOSFloatArray *)toRGBWithFloatArray:(IOSFloatArray *)colorvalue {
  
#line 100
  if (toRGBTransform_ == nil) {
    HarmonyJavaAwtColorICC_Profile *sRGBProfile = [((HarmonyJavaAwtColorICC_ColorSpace *) nil_chk(((HarmonyJavaAwtColorICC_ColorSpace *) cast_chk(HarmonyJavaAwtColorColorSpace_getInstanceWithInt_(HarmonyJavaAwtColorColorSpace_CS_sRGB), [HarmonyJavaAwtColorICC_ColorSpace class])))) getProfile];
    IOSObjectArray *profiles = [IOSObjectArray newArrayWithObjects:(id[]){ [self getProfile], sRGBProfile } count:2 type:HarmonyJavaAwtColorICC_Profile_class_()];
    toRGBTransform_ = new_ComICC_Transform_initWithHarmonyJavaAwtColorICC_ProfileArray_(profiles);
    if (!scalingDataLoaded_) {
      [((ComColorScaler *) nil_chk(scaler_)) loadScalingDataWithHarmonyJavaAwtColorColorSpace:self];
      scalingDataLoaded_ = true;
    }
  }
  
#line 110
  IOSShortArray *data = [IOSShortArray newArrayWithLength:[self getNumComponents]];
  
#line 112
  [((ComColorScaler *) nil_chk(scaler_)) scale__WithFloatArray:colorvalue withShortArray:data withInt:0];
  
#line 114
  IOSShortArray *converted = [((ComColorConverter *) nil_chk(converter_)) translateColorWithComICC_Transform:toRGBTransform_ withShortArray:data withShortArray:nil];
  
#line 117
  IOSFloatArray *res = [IOSFloatArray newArrayWithLength:3];
  
#line 119
  *IOSFloatArray_GetRef(res, 0) = ((IOSShortArray_Get(nil_chk(converted), 0) & (jint) 0xFFFF)) * HarmonyJavaAwtColorICC_ColorSpace_INV_MAX_SHORT;
  *IOSFloatArray_GetRef(res, 1) = ((IOSShortArray_Get(converted, 1) & (jint) 0xFFFF)) * HarmonyJavaAwtColorICC_ColorSpace_INV_MAX_SHORT;
  *IOSFloatArray_GetRef(res, 2) = ((IOSShortArray_Get(converted, 2) & (jint) 0xFFFF)) * HarmonyJavaAwtColorICC_ColorSpace_INV_MAX_SHORT;
  
#line 123
  return res;
}


#line 126
- (IOSFloatArray *)toCIEXYZWithFloatArray:(IOSFloatArray *)colorvalue {
  
#line 128
  if (toXYZTransform_ == nil) {
    HarmonyJavaAwtColorICC_Profile *xyzProfile = [((HarmonyJavaAwtColorICC_ColorSpace *) nil_chk(((HarmonyJavaAwtColorICC_ColorSpace *) cast_chk(HarmonyJavaAwtColorColorSpace_getInstanceWithInt_(HarmonyJavaAwtColorColorSpace_CS_CIEXYZ), [HarmonyJavaAwtColorICC_ColorSpace class])))) getProfile];
    IOSObjectArray *profiles = [IOSObjectArray newArrayWithObjects:(id[]){ [self getProfile], xyzProfile } count:2 type:HarmonyJavaAwtColorICC_Profile_class_()];
    @try {
      IOSIntArray *intents = [IOSIntArray newArrayWithInts:(jint[]){ HarmonyJavaAwtColorICC_Profile_icRelativeColorimetric, HarmonyJavaAwtColorICC_Profile_icPerceptual } count:2];
      toXYZTransform_ = new_ComICC_Transform_initWithHarmonyJavaAwtColorICC_ProfileArray_withIntArray_(profiles, intents);
    }
    @catch (
#line 134
    HarmonyJavaAwtColorCMMException *e) {
      toXYZTransform_ = new_ComICC_Transform_initWithHarmonyJavaAwtColorICC_ProfileArray_(profiles);
    }
    
#line 138
    if (!scalingDataLoaded_) {
      [((ComColorScaler *) nil_chk(scaler_)) loadScalingDataWithHarmonyJavaAwtColorColorSpace:self];
      scalingDataLoaded_ = true;
    }
  }
  
#line 144
  IOSShortArray *data = [IOSShortArray newArrayWithLength:[self getNumComponents]];
  
#line 146
  [((ComColorScaler *) nil_chk(scaler_)) scale__WithFloatArray:colorvalue withShortArray:data withInt:0];
  
#line 148
  IOSShortArray *converted = [((ComColorConverter *) nil_chk(converter_)) translateColorWithComICC_Transform:toXYZTransform_ withShortArray:data withShortArray:nil];
  
#line 151
  IOSFloatArray *res = [IOSFloatArray newArrayWithLength:3];
  
#line 153
  *IOSFloatArray_GetRef(res, 0) = ((IOSShortArray_Get(nil_chk(converted), 0) & (jint) 0xFFFF)) * HarmonyJavaAwtColorICC_ColorSpace_SHORT2XYZ_FACTOR;
  *IOSFloatArray_GetRef(res, 1) = ((IOSShortArray_Get(converted, 1) & (jint) 0xFFFF)) * HarmonyJavaAwtColorICC_ColorSpace_SHORT2XYZ_FACTOR;
  *IOSFloatArray_GetRef(res, 2) = ((IOSShortArray_Get(converted, 2) & (jint) 0xFFFF)) * HarmonyJavaAwtColorICC_ColorSpace_SHORT2XYZ_FACTOR;
  
#line 157
  return res;
}


#line 160
- (IOSFloatArray *)fromRGBWithFloatArray:(IOSFloatArray *)rgbvalue {
  
#line 162
  if (fromRGBTransform_ == nil) {
    HarmonyJavaAwtColorICC_Profile *sRGBProfile = [((HarmonyJavaAwtColorICC_ColorSpace *) nil_chk(((HarmonyJavaAwtColorICC_ColorSpace *) cast_chk(HarmonyJavaAwtColorColorSpace_getInstanceWithInt_(HarmonyJavaAwtColorColorSpace_CS_sRGB), [HarmonyJavaAwtColorICC_ColorSpace class])))) getProfile];
    IOSObjectArray *profiles = [IOSObjectArray newArrayWithObjects:(id[]){ sRGBProfile, [self getProfile] } count:2 type:HarmonyJavaAwtColorICC_Profile_class_()];
    fromRGBTransform_ = new_ComICC_Transform_initWithHarmonyJavaAwtColorICC_ProfileArray_(profiles);
    if (!scalingDataLoaded_) {
      [((ComColorScaler *) nil_chk(scaler_)) loadScalingDataWithHarmonyJavaAwtColorColorSpace:self];
      scalingDataLoaded_ = true;
    }
  }
  
#line 173
  IOSShortArray *scaledRGBValue = [IOSShortArray newArrayWithLength:3];
  *IOSShortArray_GetRef(scaledRGBValue, 0) = (jshort) JreFpToInt((IOSFloatArray_Get(nil_chk(rgbvalue), 0) * HarmonyJavaAwtColorICC_ColorSpace_MAX_SHORT + 0.5f));
  *IOSShortArray_GetRef(scaledRGBValue, 1) = (jshort) JreFpToInt((IOSFloatArray_Get(rgbvalue, 1) * HarmonyJavaAwtColorICC_ColorSpace_MAX_SHORT + 0.5f));
  *IOSShortArray_GetRef(scaledRGBValue, 2) = (jshort) JreFpToInt((IOSFloatArray_Get(rgbvalue, 2) * HarmonyJavaAwtColorICC_ColorSpace_MAX_SHORT + 0.5f));
  
#line 178
  IOSShortArray *converted = [((ComColorConverter *) nil_chk(converter_)) translateColorWithComICC_Transform:fromRGBTransform_ withShortArray:scaledRGBValue withShortArray:nil];
  
#line 180
  IOSFloatArray *res = [IOSFloatArray newArrayWithLength:[self getNumComponents]];
  
#line 182
  [((ComColorScaler *) nil_chk(scaler_)) unscaleWithFloatArray:res withShortArray:converted withInt:0];
  
#line 184
  return res;
}


#line 187
- (IOSFloatArray *)fromCIEXYZWithFloatArray:(IOSFloatArray *)xyzvalue {
  
#line 189
  if (fromXYZTransform_ == nil) {
    HarmonyJavaAwtColorICC_Profile *xyzProfile = [((HarmonyJavaAwtColorICC_ColorSpace *) nil_chk(((HarmonyJavaAwtColorICC_ColorSpace *) cast_chk(HarmonyJavaAwtColorColorSpace_getInstanceWithInt_(HarmonyJavaAwtColorColorSpace_CS_CIEXYZ), [HarmonyJavaAwtColorICC_ColorSpace class])))) getProfile];
    IOSObjectArray *profiles = [IOSObjectArray newArrayWithObjects:(id[]){ xyzProfile, [self getProfile] } count:2 type:HarmonyJavaAwtColorICC_Profile_class_()];
    @try {
      IOSIntArray *intents = [IOSIntArray newArrayWithInts:(jint[]){ HarmonyJavaAwtColorICC_Profile_icPerceptual, HarmonyJavaAwtColorICC_Profile_icRelativeColorimetric } count:2];
      fromXYZTransform_ = new_ComICC_Transform_initWithHarmonyJavaAwtColorICC_ProfileArray_withIntArray_(profiles, intents);
    }
    @catch (
#line 195
    HarmonyJavaAwtColorCMMException *e) {
      fromXYZTransform_ = new_ComICC_Transform_initWithHarmonyJavaAwtColorICC_ProfileArray_(profiles);
    }
    
#line 199
    if (!scalingDataLoaded_) {
      [((ComColorScaler *) nil_chk(scaler_)) loadScalingDataWithHarmonyJavaAwtColorColorSpace:self];
      scalingDataLoaded_ = true;
    }
  }
  
#line 206
  IOSShortArray *scaledXYZValue = [IOSShortArray newArrayWithLength:3];
  *IOSShortArray_GetRef(scaledXYZValue, 0) = (jshort) JreFpToInt((IOSFloatArray_Get(nil_chk(xyzvalue), 0) * HarmonyJavaAwtColorICC_ColorSpace_XYZ2SHORT_FACTOR + 0.5f));
  *IOSShortArray_GetRef(scaledXYZValue, 1) = (jshort) JreFpToInt((IOSFloatArray_Get(xyzvalue, 1) * HarmonyJavaAwtColorICC_ColorSpace_XYZ2SHORT_FACTOR + 0.5f));
  *IOSShortArray_GetRef(scaledXYZValue, 2) = (jshort) JreFpToInt((IOSFloatArray_Get(xyzvalue, 2) * HarmonyJavaAwtColorICC_ColorSpace_XYZ2SHORT_FACTOR + 0.5f));
  
#line 211
  IOSShortArray *converted = [((ComColorConverter *) nil_chk(converter_)) translateColorWithComICC_Transform:fromXYZTransform_ withShortArray:scaledXYZValue withShortArray:nil];
  
#line 213
  IOSFloatArray *res = [IOSFloatArray newArrayWithLength:[self getNumComponents]];
  
#line 215
  [((ComColorScaler *) nil_chk(scaler_)) unscaleWithFloatArray:res withShortArray:converted withInt:0];
  
#line 217
  return res;
}


#line 220
- (jfloat)getMinValueWithInt:(jint)component {
  
#line 222
  if ((component < 0) || (component > [self getNumComponents] - 1)) {
    
#line 224
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(ComMessages_getStringWithNSString_(@"awt.169"));
  }
  
#line 227
  return IOSFloatArray_Get(nil_chk(minValues_), component);
}


#line 230
- (jfloat)getMaxValueWithInt:(jint)component {
  
#line 232
  if ((component < 0) || (component > [self getNumComponents] - 1)) {
    
#line 234
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(ComMessages_getStringWithNSString_(@"awt.169"));
  }
  
#line 237
  return IOSFloatArray_Get(nil_chk(maxValues_), component);
}


#line 240
- (void)fillMinMaxValues {
  HarmonyJavaAwtColorICC_ColorSpace_fillMinMaxValues(self);
}


#line 269
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  HarmonyJavaAwtColorICC_ColorSpace_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}


#line 282
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  HarmonyJavaAwtColorICC_ColorSpace_readObjectWithJavaIoObjectInputStream_(self, inArg);
}


#line 287
- (id)readResolve {
  return resolvedDeserializedInst_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtColorICC_Profile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, 11, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, 14, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, -1, -1, 15, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithHarmonyJavaAwtColorICC_Profile:);
  methods[1].selector = @selector(getProfile);
  methods[2].selector = @selector(toRGBWithFloatArray:);
  methods[3].selector = @selector(toCIEXYZWithFloatArray:);
  methods[4].selector = @selector(fromRGBWithFloatArray:);
  methods[5].selector = @selector(fromCIEXYZWithFloatArray:);
  methods[6].selector = @selector(getMinValueWithInt:);
  methods[7].selector = @selector(getMaxValueWithInt:);
  methods[8].selector = @selector(fillMinMaxValues);
  methods[9].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[10].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[11].selector = @selector(readResolve);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = HarmonyJavaAwtColorICC_ColorSpace_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "serialPersistentFields", "[LJavaIoObjectStreamField;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "MAX_XYZ", "F", .constantValue.asFloat = HarmonyJavaAwtColorICC_ColorSpace_MAX_XYZ, 0x1a, -1, -1, -1, -1 },
    { "MAX_SHORT", "F", .constantValue.asFloat = HarmonyJavaAwtColorICC_ColorSpace_MAX_SHORT, 0x1a, -1, -1, -1, -1 },
    { "INV_MAX_SHORT", "F", .constantValue.asFloat = HarmonyJavaAwtColorICC_ColorSpace_INV_MAX_SHORT, 0x1a, -1, -1, -1, -1 },
    { "SHORT2XYZ_FACTOR", "F", .constantValue.asFloat = HarmonyJavaAwtColorICC_ColorSpace_SHORT2XYZ_FACTOR, 0x1a, -1, -1, -1, -1 },
    { "XYZ2SHORT_FACTOR", "F", .constantValue.asFloat = HarmonyJavaAwtColorICC_ColorSpace_XYZ2SHORT_FACTOR, 0x1a, -1, -1, -1, -1 },
    { "profile_", "LHarmonyJavaAwtColorICC_Profile;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "minValues_", "[F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxValues_", "[F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "toRGBTransform_", "LComICC_Transform;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fromRGBTransform_", "LComICC_Transform;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "toXYZTransform_", "LComICC_Transform;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fromXYZTransform_", "LComICC_Transform;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "converter_", "LComColorConverter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scaler_", "LComColorScaler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scalingDataLoaded_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "resolvedDeserializedInst_", "LHarmonyJavaAwtColorICC_ColorSpace;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LHarmonyJavaAwtColorICC_Profile;", "toRGB", "[F", "toCIEXYZ", "fromRGB", "fromCIEXYZ", "getMinValue", "I", "getMaxValue", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "LJavaIoObjectStreamException;", &HarmonyJavaAwtColorICC_ColorSpace_serialPersistentFields };
  static const J2ObjcClassInfo _HarmonyJavaAwtColorICC_ColorSpace = { "ICC_ColorSpace", "harmony.java.awt.color", ptrTable, methods, fields, 7, 0x1, 12, 18, -1, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtColorICC_ColorSpace;
}

+ (void)initialize {
  if (self == [HarmonyJavaAwtColorICC_ColorSpace class]) {
    HarmonyJavaAwtColorICC_ColorSpace_serialPersistentFields = [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaIoObjectStreamField_initWithNSString_withIOSClass_(
#line 34
    @"thisProfile", HarmonyJavaAwtColorICC_Profile_class_()), create_JavaIoObjectStreamField_initWithNSString_withIOSClass_(
#line 35
    @"minVal", IOSClass_floatArray(1)), create_JavaIoObjectStreamField_initWithNSString_withIOSClass_(
#line 36
    @"maxVal", IOSClass_floatArray(1)), create_JavaIoObjectStreamField_initWithNSString_withIOSClass_(
#line 37
    @"diffMinMax", IOSClass_floatArray(1)), create_JavaIoObjectStreamField_initWithNSString_withIOSClass_(
#line 38
    @"invDiffMinMax", IOSClass_floatArray(1)), create_JavaIoObjectStreamField_initWithNSString_withIOSClass_(
#line 39
    @"needScaleInit", JreLoadStatic(JavaLangBoolean, TYPE)) } count:6 type:JavaIoObjectStreamField_class_()];
    J2OBJC_SET_INITIALIZED(HarmonyJavaAwtColorICC_ColorSpace)
  }
}

@end


#line 70
void HarmonyJavaAwtColorICC_ColorSpace_initWithHarmonyJavaAwtColorICC_Profile_(HarmonyJavaAwtColorICC_ColorSpace *self, HarmonyJavaAwtColorICC_Profile *pf) {
  HarmonyJavaAwtColorColorSpace_initWithInt_withInt_(self, [((HarmonyJavaAwtColorICC_Profile *) nil_chk(pf)) getColorSpaceType], [pf getNumComponents]);
  self->profile_ =
#line 54
  nil;
  self->minValues_ = nil;
  self->maxValues_ = nil;
  self->toRGBTransform_ =
#line 59
  nil;
  self->fromRGBTransform_ = nil;
  self->toXYZTransform_ = nil;
  self->fromXYZTransform_ = nil;
  self->converter_ = new_ComColorConverter_init();
  self->scaler_ = new_ComColorScaler_init();
  self->scalingDataLoaded_ =
#line 66
  false;
  
#line 73
  jint pfClass = [pf getProfileClass];
  
#line 75
  switch (pfClass) {
    case HarmonyJavaAwtColorICC_Profile_CLASS_COLORSPACECONVERSION:
    case HarmonyJavaAwtColorICC_Profile_CLASS_DISPLAY:
    case HarmonyJavaAwtColorICC_Profile_CLASS_OUTPUT:
    case HarmonyJavaAwtColorICC_Profile_CLASS_INPUT:
    break;
    default:
    
#line 83
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(ComMessages_getStringWithNSString_(@"awt.168"));
  }
  
#line 86
  self->profile_ = pf;
  HarmonyJavaAwtColorICC_ColorSpace_fillMinMaxValues(self);
}


#line 70
HarmonyJavaAwtColorICC_ColorSpace *new_HarmonyJavaAwtColorICC_ColorSpace_initWithHarmonyJavaAwtColorICC_Profile_(HarmonyJavaAwtColorICC_Profile *pf) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtColorICC_ColorSpace, initWithHarmonyJavaAwtColorICC_Profile_, pf)
}


#line 70
HarmonyJavaAwtColorICC_ColorSpace *create_HarmonyJavaAwtColorICC_ColorSpace_initWithHarmonyJavaAwtColorICC_Profile_(HarmonyJavaAwtColorICC_Profile *pf) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtColorICC_ColorSpace, initWithHarmonyJavaAwtColorICC_Profile_, pf)
}


#line 240
void HarmonyJavaAwtColorICC_ColorSpace_fillMinMaxValues(HarmonyJavaAwtColorICC_ColorSpace *self) {
  jint n = [self getNumComponents];
  self->maxValues_ = [IOSFloatArray newArrayWithLength:n];
  self->minValues_ = [IOSFloatArray newArrayWithLength:n];
  switch ([self getType]) {
    case HarmonyJavaAwtColorColorSpace_TYPE_XYZ:
    *IOSFloatArray_GetRef(nil_chk(self->minValues_), 0) = 0;
    *IOSFloatArray_GetRef(self->minValues_, 1) = 0;
    *IOSFloatArray_GetRef(self->minValues_, 2) = 0;
    *IOSFloatArray_GetRef(nil_chk(self->maxValues_), 0) = HarmonyJavaAwtColorICC_ColorSpace_MAX_XYZ;
    *IOSFloatArray_GetRef(self->maxValues_, 1) = HarmonyJavaAwtColorICC_ColorSpace_MAX_XYZ;
    *IOSFloatArray_GetRef(self->maxValues_, 2) = HarmonyJavaAwtColorICC_ColorSpace_MAX_XYZ;
    break;
    case HarmonyJavaAwtColorColorSpace_TYPE_Lab:
    *IOSFloatArray_GetRef(nil_chk(self->minValues_), 0) = 0;
    *IOSFloatArray_GetRef(self->minValues_, 1) = -128;
    *IOSFloatArray_GetRef(self->minValues_, 2) = -128;
    *IOSFloatArray_GetRef(nil_chk(self->maxValues_), 0) = 100;
    *IOSFloatArray_GetRef(self->maxValues_, 1) = 127;
    *IOSFloatArray_GetRef(self->maxValues_, 2) = 127;
    break;
    default:
    for (jint i = 0; i < n; i++) {
      *IOSFloatArray_GetRef(nil_chk(self->minValues_), i) = 0;
      *IOSFloatArray_GetRef(nil_chk(self->maxValues_), i) = 1;
    }
  }
}

void HarmonyJavaAwtColorICC_ColorSpace_writeObjectWithJavaIoObjectOutputStream_(HarmonyJavaAwtColorICC_ColorSpace *self, JavaIoObjectOutputStream *outArg) {
  JavaIoObjectOutputStream_PutField *fields = [((JavaIoObjectOutputStream *) nil_chk(outArg)) putFields];
  
#line 272
  [((JavaIoObjectOutputStream_PutField *) nil_chk(fields)) putWithNSString:@"thisProfile" withId:self->profile_];
  [fields putWithNSString:@"minVal" withId:nil];
  [fields putWithNSString:@"maxVal" withId:nil];
  [fields putWithNSString:@"diffMinMax" withId:nil];
  [fields putWithNSString:@"invDiffMinMax" withId:nil];
  [fields putWithNSString:@"needScaleInit" withBoolean:true];
  
#line 279
  [outArg writeFields];
}


#line 282
void HarmonyJavaAwtColorICC_ColorSpace_readObjectWithJavaIoObjectInputStream_(HarmonyJavaAwtColorICC_ColorSpace *self, JavaIoObjectInputStream *inArg) {
  JavaIoObjectInputStream_GetField *fields = [((JavaIoObjectInputStream *) nil_chk(inArg)) readFields];
  self->resolvedDeserializedInst_ = new_HarmonyJavaAwtColorICC_ColorSpace_initWithHarmonyJavaAwtColorICC_Profile_((HarmonyJavaAwtColorICC_Profile *) cast_chk([((JavaIoObjectInputStream_GetField *) nil_chk(fields)) getWithNSString:@"thisProfile" withId:nil], [HarmonyJavaAwtColorICC_Profile class]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtColorICC_ColorSpace)
