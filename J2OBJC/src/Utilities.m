//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/Utilities.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PRTokeniser.h"
#include "Utilities.h"
#include "java/io/File.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/net/URI.h"
#include "java/net/URL.h"
#include "java/util/Collections.h"
#include "java/util/Hashtable.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"

#if !__has_feature(objc_arc)
#error "Utilities must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextUtilities ()

/*!
 @brief Measurement conversion from millimeters to inches.
 @param value a value in millimeters
 @return a value in inches
 @since 2.1.2
 */
+ (jfloat)millimetersToInchesWithFloat:(jfloat)value;

/*!
 @brief Measurement conversion from points to inches.
 @param value a value in points
 @return a value in inches
 @since 2.1.2
 */
+ (jfloat)pointsToInchesWithFloat:(jfloat)value;

/*!
 @brief Measurement conversion from inches to millimeters.
 @param value a value in inches
 @return a value in millimeters
 @since 2.1.2
 */
+ (jfloat)inchesToMillimetersWithFloat:(jfloat)value;

/*!
 @brief Measurement conversion from inches to points.
 @param value a value in inches
 @return a value in points
 @since 2.1.2
 */
+ (jfloat)inchesToPointsWithFloat:(jfloat)value;

/*!
 @brief Check if the value of a character belongs to a certain interval
  that indicates it's the lower part of a surrogate pair.
 @param c the character
 @return true if the character belongs to the interval
 @since 2.1.2
 */
+ (jboolean)isSurrogateLowWithChar:(jchar)c;

@end

__attribute__((unused)) static jfloat ComAowagieTextUtilities_millimetersToInchesWithFloat_(jfloat value);

__attribute__((unused)) static jfloat ComAowagieTextUtilities_pointsToInchesWithFloat_(jfloat value);

__attribute__((unused)) static jfloat ComAowagieTextUtilities_inchesToMillimetersWithFloat_(jfloat value);

__attribute__((unused)) static jfloat ComAowagieTextUtilities_inchesToPointsWithFloat_(jfloat value);

__attribute__((unused)) static jboolean ComAowagieTextUtilities_isSurrogateLowWithChar_(jchar c);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/Utilities.java"


#line 68
@implementation ComAowagieTextUtilities

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 68
- (instancetype)init {
  ComAowagieTextUtilities_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 77
+ (id<JavaUtilSet>)getKeySetWithJavaUtilHashtable:(JavaUtilHashtable *)table {
  return ComAowagieTextUtilities_getKeySetWithJavaUtilHashtable_(table);
}


#line 90
+ (IOSObjectArray *)addToArrayWithNSObjectArray2:(IOSObjectArray *)original
                               withNSObjectArray:(IOSObjectArray *)item {
  return ComAowagieTextUtilities_addToArrayWithNSObjectArray2_withNSObjectArray_(original, item);
}


#line 109
+ (jboolean)checkTrueOrFalseWithJavaUtilProperties:(JavaUtilProperties *)attributes
                                      withNSString:(NSString *)key {
  return ComAowagieTextUtilities_checkTrueOrFalseWithJavaUtilProperties_withNSString_(attributes, key);
}


#line 118
+ (NSString *)unEscapeURLWithNSString:(NSString *)src {
  return ComAowagieTextUtilities_unEscapeURLWithNSString_(src);
}


#line 154
+ (JavaNetURL *)toURLWithNSString:(NSString *)filename {
  return ComAowagieTextUtilities_toURLWithNSString_(filename);
}


#line 174
+ (void)skipWithJavaIoInputStream:(JavaIoInputStream *)is
                          withInt:(jint)size {
  ComAowagieTextUtilities_skipWithJavaIoInputStream_withInt_(is, size);
}


#line 191
+ (jfloat)millimetersToInchesWithFloat:(jfloat)value {
  return ComAowagieTextUtilities_millimetersToInchesWithFloat_(value);
}


#line 201
+ (jfloat)pointsToInchesWithFloat:(jfloat)value {
  return ComAowagieTextUtilities_pointsToInchesWithFloat_(value);
}


#line 211
+ (jfloat)inchesToMillimetersWithFloat:(jfloat)value {
  return ComAowagieTextUtilities_inchesToMillimetersWithFloat_(value);
}


#line 221
+ (jfloat)inchesToPointsWithFloat:(jfloat)value {
  return ComAowagieTextUtilities_inchesToPointsWithFloat_(value);
}


#line 232
+ (jboolean)isSurrogateHighWithChar:(jchar)c {
  return ComAowagieTextUtilities_isSurrogateHighWithChar_(c);
}


#line 243
+ (jboolean)isSurrogateLowWithChar:(jchar)c {
  return ComAowagieTextUtilities_isSurrogateLowWithChar_(c);
}


#line 256
+ (jboolean)isSurrogatePairWithNSString:(NSString *)text
                                withInt:(jint)idx {
  return ComAowagieTextUtilities_isSurrogatePairWithNSString_withInt_(text, idx);
}


#line 272
+ (jboolean)isSurrogatePairWithCharArray:(IOSCharArray *)text
                                 withInt:(jint)idx {
  return ComAowagieTextUtilities_isSurrogatePairWithCharArray_withInt_(text, idx);
}


#line 287
+ (jint)convertToUtf32WithChar:(jchar)highSurrogate
                      withChar:(jchar)lowSurrogate {
  return ComAowagieTextUtilities_convertToUtf32WithChar_withChar_(highSurrogate, lowSurrogate);
}


#line 298
+ (jint)convertToUtf32WithCharArray:(IOSCharArray *)text
                            withInt:(jint)idx {
  return ComAowagieTextUtilities_convertToUtf32WithCharArray_withInt_(text, idx);
}


#line 309
+ (jint)convertToUtf32WithNSString:(NSString *)text
                           withInt:(jint)idx {
  return ComAowagieTextUtilities_convertToUtf32WithNSString_withInt_(text, idx);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "[[LNSObject;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaNetURL;", 0x8, 8, 7, 9, -1, -1, -1 },
    { NULL, "V", 0x9, 10, 11, 12, -1, -1, -1 },
    { NULL, "F", 0x1a, 13, 14, -1, -1, -1, -1 },
    { NULL, "F", 0x1a, 15, 14, -1, -1, -1, -1 },
    { NULL, "F", 0x1a, 16, 14, -1, -1, -1, -1 },
    { NULL, "F", 0x1a, 17, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 20, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 21, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 21, 23, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 24, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 24, 23, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 24, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getKeySetWithJavaUtilHashtable:);
  methods[2].selector = @selector(addToArrayWithNSObjectArray2:withNSObjectArray:);
  methods[3].selector = @selector(checkTrueOrFalseWithJavaUtilProperties:withNSString:);
  methods[4].selector = @selector(unEscapeURLWithNSString:);
  methods[5].selector = @selector(toURLWithNSString:);
  methods[6].selector = @selector(skipWithJavaIoInputStream:withInt:);
  methods[7].selector = @selector(millimetersToInchesWithFloat:);
  methods[8].selector = @selector(pointsToInchesWithFloat:);
  methods[9].selector = @selector(inchesToMillimetersWithFloat:);
  methods[10].selector = @selector(inchesToPointsWithFloat:);
  methods[11].selector = @selector(isSurrogateHighWithChar:);
  methods[12].selector = @selector(isSurrogateLowWithChar:);
  methods[13].selector = @selector(isSurrogatePairWithNSString:withInt:);
  methods[14].selector = @selector(isSurrogatePairWithCharArray:withInt:);
  methods[15].selector = @selector(convertToUtf32WithChar:withChar:);
  methods[16].selector = @selector(convertToUtf32WithCharArray:withInt:);
  methods[17].selector = @selector(convertToUtf32WithNSString:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getKeySet", "LJavaUtilHashtable;", "addToArray", "[[LNSObject;[LNSObject;", "checkTrueOrFalse", "LJavaUtilProperties;LNSString;", "unEscapeURL", "LNSString;", "toURL", "LJavaNetMalformedURLException;", "skip", "LJavaIoInputStream;I", "LJavaIoIOException;", "millimetersToInches", "F", "pointsToInches", "inchesToMillimeters", "inchesToPoints", "isSurrogateHigh", "C", "isSurrogateLow", "isSurrogatePair", "LNSString;I", "[CI", "convertToUtf32", "CC" };
  static const J2ObjcClassInfo _ComAowagieTextUtilities = { "Utilities", "com.aowagie.text", ptrTable, methods, NULL, 7, 0x1, 18, 0, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextUtilities;
}

@end


#line 68
void ComAowagieTextUtilities_init(ComAowagieTextUtilities *self) {
  NSObject_init(self);
}


#line 68
ComAowagieTextUtilities *new_ComAowagieTextUtilities_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextUtilities, init)
}


#line 68
ComAowagieTextUtilities *create_ComAowagieTextUtilities_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextUtilities, init)
}


#line 77
id<JavaUtilSet> ComAowagieTextUtilities_getKeySetWithJavaUtilHashtable_(JavaUtilHashtable *table) {
  ComAowagieTextUtilities_initialize();
  
#line 78
  return table == nil ? JreLoadStatic(JavaUtilCollections, EMPTY_SET) : [table keySet];
}


#line 90
IOSObjectArray *ComAowagieTextUtilities_addToArrayWithNSObjectArray2_withNSObjectArray_(IOSObjectArray *original, IOSObjectArray *item) {
  ComAowagieTextUtilities_initialize();
  
#line 91
  if (original == nil) {
    original = [IOSObjectArray newArrayWithLength:1 type:IOSClass_arrayType(NSObject_class_(), 1)];
    (void) IOSObjectArray_Set(original, 0, item);
    return original;
  }
  else {
    
#line 96
    IOSObjectArray *original2 = [IOSObjectArray newArrayWithLength:original->size_ + 1 type:IOSClass_arrayType(NSObject_class_(), 1)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(original, 0, original2, 0, original->size_);
    (void) IOSObjectArray_Set(original2, original->size_, item);
    return original2;
  }
}

jboolean ComAowagieTextUtilities_checkTrueOrFalseWithJavaUtilProperties_withNSString_(JavaUtilProperties *attributes, NSString *key) {
  ComAowagieTextUtilities_initialize();
  
#line 110
  return [@"true" java_equalsIgnoreCase:[((JavaUtilProperties *) nil_chk(attributes)) getPropertyWithNSString:key]];
}


#line 118
NSString *ComAowagieTextUtilities_unEscapeURLWithNSString_(NSString *src) {
  ComAowagieTextUtilities_initialize();
  
#line 119
  JavaLangStringBuffer *bf = new_JavaLangStringBuffer_init();
  IOSCharArray *s = [((NSString *) nil_chk(src)) java_toCharArray];
  for (jint k = 0; k < ((IOSCharArray *) nil_chk(s))->size_; ++k) {
    jchar c = IOSCharArray_Get(s, k);
    if (c == '%') {
      if (k + 2 >= s->size_) {
        (void) [bf appendWithChar:c];
        continue;
      }
      jint a0 = ComAowagieTextPdfPRTokeniser_getHexWithInt_(IOSCharArray_Get(s, k + 1));
      jint a1 = ComAowagieTextPdfPRTokeniser_getHexWithInt_(IOSCharArray_Get(s, k + 2));
      if (a0 < 0 || a1 < 0) {
        (void) [bf appendWithChar:c];
        continue;
      }
      (void) [bf appendWithChar:(jchar) (a0 * 16 + a1)];
      k += 2;
    }
    else {
      
#line 137
      (void) [bf appendWithChar:c];
    }
  }
  return [bf description];
}


#line 154
JavaNetURL *ComAowagieTextUtilities_toURLWithNSString_(NSString *filename) {
  ComAowagieTextUtilities_initialize();
  
#line 155
  @try {
    return new_JavaNetURL_initWithNSString_(filename);
  }
  @catch (JavaLangException *e) {
    return [((JavaNetURI *) nil_chk([new_JavaIoFile_initWithNSString_(filename) toURI])) toURL];
  }
}


#line 174
void ComAowagieTextUtilities_skipWithJavaIoInputStream_withInt_(JavaIoInputStream *is, jint size) {
  ComAowagieTextUtilities_initialize();
  
#line 175
  jlong n;
  while (size > 0) {
    n = [((JavaIoInputStream *) nil_chk(is)) skipWithLong:size];
    if (n <= 0) {
      break;
    }
    size -= n;
  }
}


#line 191
jfloat ComAowagieTextUtilities_millimetersToInchesWithFloat_(jfloat value) {
  ComAowagieTextUtilities_initialize();
  
#line 192
  return value / 25.4f;
}


#line 201
jfloat ComAowagieTextUtilities_pointsToInchesWithFloat_(jfloat value) {
  ComAowagieTextUtilities_initialize();
  
#line 202
  return value / 72.0f;
}


#line 211
jfloat ComAowagieTextUtilities_inchesToMillimetersWithFloat_(jfloat value) {
  ComAowagieTextUtilities_initialize();
  
#line 212
  return value * 25.4f;
}


#line 221
jfloat ComAowagieTextUtilities_inchesToPointsWithFloat_(jfloat value) {
  ComAowagieTextUtilities_initialize();
  
#line 222
  return value * 72.0f;
}


#line 232
jboolean ComAowagieTextUtilities_isSurrogateHighWithChar_(jchar c) {
  ComAowagieTextUtilities_initialize();
  
#line 233
  return c >= 0xd800 && c <= 0xdbff;
}


#line 243
jboolean ComAowagieTextUtilities_isSurrogateLowWithChar_(jchar c) {
  ComAowagieTextUtilities_initialize();
  
#line 244
  return c >= 0xdc00 && c <= 0xdfff;
}


#line 256
jboolean ComAowagieTextUtilities_isSurrogatePairWithNSString_withInt_(NSString *text, jint idx) {
  ComAowagieTextUtilities_initialize();
  
#line 257
  if (idx < 0 || idx > [((NSString *) nil_chk(text)) java_length] - 2) {
    return false;
  }
  return ComAowagieTextUtilities_isSurrogateHighWithChar_([((NSString *) nil_chk(text)) charAtWithInt:idx]) && ComAowagieTextUtilities_isSurrogateLowWithChar_([text charAtWithInt:idx + 1]);
}


#line 272
jboolean ComAowagieTextUtilities_isSurrogatePairWithCharArray_withInt_(IOSCharArray *text, jint idx) {
  ComAowagieTextUtilities_initialize();
  
#line 273
  if (idx < 0 || idx > ((IOSCharArray *) nil_chk(text))->size_ - 2) {
    return false;
  }
  return ComAowagieTextUtilities_isSurrogateHighWithChar_(IOSCharArray_Get(nil_chk(text), idx)) && ComAowagieTextUtilities_isSurrogateLowWithChar_(IOSCharArray_Get(text, idx + 1));
}


#line 287
jint ComAowagieTextUtilities_convertToUtf32WithChar_withChar_(jchar highSurrogate, jchar lowSurrogate) {
  ComAowagieTextUtilities_initialize();
  
#line 288
  return (highSurrogate - (jint) 0xd800) * (jint) 0x400 + lowSurrogate - (jint) 0xdc00 + (jint) 0x10000;
}


#line 298
jint ComAowagieTextUtilities_convertToUtf32WithCharArray_withInt_(IOSCharArray *text, jint idx) {
  ComAowagieTextUtilities_initialize();
  
#line 299
  return (IOSCharArray_Get(nil_chk(text), idx) - (jint) 0xd800) * (jint) 0x400 + IOSCharArray_Get(text, idx + 1) - (jint) 0xdc00 + (jint) 0x10000;
}


#line 309
jint ComAowagieTextUtilities_convertToUtf32WithNSString_withInt_(NSString *text, jint idx) {
  ComAowagieTextUtilities_initialize();
  
#line 310
  return ([((NSString *) nil_chk(text)) charAtWithInt:idx] - (jint) 0xd800) * (jint) 0x400 + [text charAtWithInt:idx + 1] - (jint) 0xdc00 + (jint) 0x10000;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextUtilities)
