//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/util/io/Streams.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "StreamOverflowException.h"
#include "Streams.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"

#if !__has_feature(objc_arc)
#error "Streams must be compiled with ARC (-fobjc-arc)"
#endif

inline jint OrgSpongycastleUtilIoStreams_get_BUFFER_SIZE(void);
inline jint OrgSpongycastleUtilIoStreams_set_BUFFER_SIZE(jint value);
inline jint *OrgSpongycastleUtilIoStreams_getRef_BUFFER_SIZE(void);
static jint OrgSpongycastleUtilIoStreams_BUFFER_SIZE = 4096;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgSpongycastleUtilIoStreams, BUFFER_SIZE, jint)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/util/io/Streams.java"


#line 11
@implementation OrgSpongycastleUtilIoStreams

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 11
- (instancetype)init {
  OrgSpongycastleUtilIoStreams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 21
+ (void)drainWithJavaIoInputStream:(JavaIoInputStream *)inStr {
  OrgSpongycastleUtilIoStreams_drainWithJavaIoInputStream_(inStr);
}


#line 37
+ (IOSByteArray *)readAllWithJavaIoInputStream:(JavaIoInputStream *)inStr {
  return OrgSpongycastleUtilIoStreams_readAllWithJavaIoInputStream_(inStr);
}


#line 54
+ (IOSByteArray *)readAllLimitedWithJavaIoInputStream:(JavaIoInputStream *)inStr
                                              withInt:(jint)limit {
  return OrgSpongycastleUtilIoStreams_readAllLimitedWithJavaIoInputStream_withInt_(inStr, limit);
}


#line 70
+ (jint)readFullyWithJavaIoInputStream:(JavaIoInputStream *)inStr
                         withByteArray:(IOSByteArray *)buf {
  return OrgSpongycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_(inStr, buf);
}


#line 86
+ (jint)readFullyWithJavaIoInputStream:(JavaIoInputStream *)inStr
                         withByteArray:(IOSByteArray *)buf
                               withInt:(jint)off
                               withInt:(jint)len {
  return OrgSpongycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_withInt_withInt_(inStr, buf, off, len);
}


#line 109
+ (void)pipeAllWithJavaIoInputStream:(JavaIoInputStream *)inStr
              withJavaIoOutputStream:(JavaIoOutputStream *)outStr {
  OrgSpongycastleUtilIoStreams_pipeAllWithJavaIoInputStream_withJavaIoOutputStream_(inStr, outStr);
}


#line 128
+ (jlong)pipeAllLimitedWithJavaIoInputStream:(JavaIoInputStream *)inStr
                                    withLong:(jlong)limit
                      withJavaIoOutputStream:(JavaIoOutputStream *)outStr {
  return OrgSpongycastleUtilIoStreams_pipeAllLimitedWithJavaIoInputStream_withLong_withJavaIoOutputStream_(inStr, limit, outStr);
}


#line 146
+ (void)writeBufToWithJavaIoByteArrayOutputStream:(JavaIoByteArrayOutputStream *)buf
                           withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleUtilIoStreams_writeBufToWithJavaIoByteArrayOutputStream_withJavaIoOutputStream_(buf, output);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 3, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 4, 5, 2, -1, -1, -1 },
    { NULL, "I", 0x9, 6, 7, 2, -1, -1, -1 },
    { NULL, "I", 0x9, 6, 8, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 9, 10, 2, -1, -1, -1 },
    { NULL, "J", 0x9, 11, 12, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 14, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(drainWithJavaIoInputStream:);
  methods[2].selector = @selector(readAllWithJavaIoInputStream:);
  methods[3].selector = @selector(readAllLimitedWithJavaIoInputStream:withInt:);
  methods[4].selector = @selector(readFullyWithJavaIoInputStream:withByteArray:);
  methods[5].selector = @selector(readFullyWithJavaIoInputStream:withByteArray:withInt:withInt:);
  methods[6].selector = @selector(pipeAllWithJavaIoInputStream:withJavaIoOutputStream:);
  methods[7].selector = @selector(pipeAllLimitedWithJavaIoInputStream:withLong:withJavaIoOutputStream:);
  methods[8].selector = @selector(writeBufToWithJavaIoByteArrayOutputStream:withJavaIoOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BUFFER_SIZE", "I", .constantValue.asLong = 0, 0xa, -1, 15, -1, -1 },
  };
  static const void *ptrTable[] = { "drain", "LJavaIoInputStream;", "LJavaIoIOException;", "readAll", "readAllLimited", "LJavaIoInputStream;I", "readFully", "LJavaIoInputStream;[B", "LJavaIoInputStream;[BII", "pipeAll", "LJavaIoInputStream;LJavaIoOutputStream;", "pipeAllLimited", "LJavaIoInputStream;JLJavaIoOutputStream;", "writeBufTo", "LJavaIoByteArrayOutputStream;LJavaIoOutputStream;", &OrgSpongycastleUtilIoStreams_BUFFER_SIZE };
  static const J2ObjcClassInfo _OrgSpongycastleUtilIoStreams = { "Streams", "org.spongycastle.util.io", ptrTable, methods, fields, 7, 0x11, 9, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleUtilIoStreams;
}

@end


#line 11
void OrgSpongycastleUtilIoStreams_init(OrgSpongycastleUtilIoStreams *self) {
  NSObject_init(self);
}


#line 11
OrgSpongycastleUtilIoStreams *new_OrgSpongycastleUtilIoStreams_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleUtilIoStreams, init)
}


#line 11
OrgSpongycastleUtilIoStreams *create_OrgSpongycastleUtilIoStreams_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleUtilIoStreams, init)
}


#line 21
void OrgSpongycastleUtilIoStreams_drainWithJavaIoInputStream_(JavaIoInputStream *inStr) {
  OrgSpongycastleUtilIoStreams_initialize();
  
#line 24
  IOSByteArray *bs = [IOSByteArray newArrayWithLength:OrgSpongycastleUtilIoStreams_BUFFER_SIZE];
  while ([((JavaIoInputStream *) nil_chk(inStr)) readWithByteArray:bs withInt:0 withInt:bs->size_] >= 0) {
  }
}


#line 37
IOSByteArray *OrgSpongycastleUtilIoStreams_readAllWithJavaIoInputStream_(JavaIoInputStream *inStr) {
  OrgSpongycastleUtilIoStreams_initialize();
  
#line 40
  JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
  OrgSpongycastleUtilIoStreams_pipeAllWithJavaIoInputStream_withJavaIoOutputStream_(inStr, buf);
  return [buf toByteArray];
}


#line 54
IOSByteArray *OrgSpongycastleUtilIoStreams_readAllLimitedWithJavaIoInputStream_withInt_(JavaIoInputStream *inStr, jint limit) {
  OrgSpongycastleUtilIoStreams_initialize();
  
#line 57
  JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
  OrgSpongycastleUtilIoStreams_pipeAllLimitedWithJavaIoInputStream_withLong_withJavaIoOutputStream_(inStr, limit, buf);
  return [buf toByteArray];
}


#line 70
jint OrgSpongycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_(JavaIoInputStream *inStr, IOSByteArray *buf) {
  OrgSpongycastleUtilIoStreams_initialize();
  
#line 73
  return OrgSpongycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_withInt_withInt_(inStr, buf, 0, ((IOSByteArray *) nil_chk(buf))->size_);
}


#line 86
jint OrgSpongycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_withInt_withInt_(JavaIoInputStream *inStr, IOSByteArray *buf, jint off, jint len) {
  OrgSpongycastleUtilIoStreams_initialize();
  
#line 89
  jint totalRead = 0;
  while (totalRead < len) {
    
#line 92
    jint numRead = [((JavaIoInputStream *) nil_chk(inStr)) readWithByteArray:buf withInt:off + totalRead withInt:len - totalRead];
    if (numRead < 0) {
      
#line 95
      break;
    }
    totalRead += numRead;
  }
  return totalRead;
}


#line 109
void OrgSpongycastleUtilIoStreams_pipeAllWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *inStr, JavaIoOutputStream *outStr) {
  OrgSpongycastleUtilIoStreams_initialize();
  
#line 112
  IOSByteArray *bs = [IOSByteArray newArrayWithLength:OrgSpongycastleUtilIoStreams_BUFFER_SIZE];
  jint numRead;
  while ((numRead = [((JavaIoInputStream *) nil_chk(inStr)) readWithByteArray:bs withInt:0 withInt:bs->size_]) >= 0) {
    
#line 116
    [((JavaIoOutputStream *) nil_chk(outStr)) writeWithByteArray:bs withInt:0 withInt:numRead];
  }
}


#line 128
jlong OrgSpongycastleUtilIoStreams_pipeAllLimitedWithJavaIoInputStream_withLong_withJavaIoOutputStream_(JavaIoInputStream *inStr, jlong limit, JavaIoOutputStream *outStr) {
  OrgSpongycastleUtilIoStreams_initialize();
  
#line 131
  jlong total = 0;
  IOSByteArray *bs = [IOSByteArray newArrayWithLength:OrgSpongycastleUtilIoStreams_BUFFER_SIZE];
  jint numRead;
  while ((numRead = [((JavaIoInputStream *) nil_chk(inStr)) readWithByteArray:bs withInt:0 withInt:bs->size_]) >= 0) {
    
#line 136
    if ((limit - total) < numRead) {
      
#line 138
      @throw new_OrgSpongycastleUtilIoStreamOverflowException_initWithNSString_(@"Data Overflow");
    }
    total += numRead;
    [((JavaIoOutputStream *) nil_chk(outStr)) writeWithByteArray:bs withInt:0 withInt:numRead];
  }
  return total;
}


#line 146
void OrgSpongycastleUtilIoStreams_writeBufToWithJavaIoByteArrayOutputStream_withJavaIoOutputStream_(JavaIoByteArrayOutputStream *buf, JavaIoOutputStream *output) {
  OrgSpongycastleUtilIoStreams_initialize();
  
#line 149
  [((JavaIoByteArrayOutputStream *) nil_chk(buf)) writeToWithJavaIoOutputStream:output];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleUtilIoStreams)
