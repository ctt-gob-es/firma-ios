//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/SimpleCell.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/BadElementException.h"
#include "com/aowagie/text/Element.h"
#include "com/aowagie/text/ExceptionConverter.h"
#include "com/aowagie/text/Rectangle.h"
#include "com/aowagie/text/SimpleCell.h"
#include "com/aowagie/text/pdf/PdfContentByte.h"
#include "com/aowagie/text/pdf/PdfPCell.h"
#include "com/aowagie/text/pdf/PdfPTable.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Float.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/SimpleCell must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextSimpleCell () {
 @public
  /*!
   @brief the content of the Cell.
   */
  JavaUtilArrayList *content_;
  /*!
   @brief the width of the Cell.
   */
  jfloat width_;
  /*!
   @brief the widthpercentage of the Cell.
   */
  jfloat widthpercentage_;
  /*!
   @brief an extra spacing variable
   */
  jfloat spacing_left_;
  /*!
   @brief an extra spacing variable
   */
  jfloat spacing_right_;
  /*!
   @brief an extra spacing variable
   */
  jfloat spacing_top_;
  /*!
   @brief an extra spacing variable
   */
  jfloat spacing_bottom_;
  /*!
   @brief an extra padding variable
   */
  jfloat padding_left_;
  /*!
   @brief an extra padding variable
   */
  jfloat padding_right_;
  /*!
   @brief an extra padding variable
   */
  jfloat padding_top_;
  /*!
   @brief an extra padding variable
   */
  jfloat padding_bottom_;
  /*!
   @brief the colspan of a Cell
   */
  jint colspan_;
  /*!
   @brief horizontal alignment inside the Cell.
   */
  jint horizontalAlignment_;
  /*!
   @brief vertical alignment inside the Cell.
   */
  jint verticalAlignment_;
  /*!
   @brief indicates if these are the attributes of a single Cell (false) or a group of Cells (true).
   */
  jboolean cellgroup_;
  /*!
   @brief Indicates that the largest ascender height should be used to determine the
  height of the first line.Note that this only has an effect when rendered
  to PDF.
   Setting this to true can help with vertical alignment problems.
   */
  jboolean useAscender_;
  /*!
   @brief Indicates that the largest descender height should be added to the height of
  the last line (so characters like y don't dip into the border).Note that
  this only has an effect when rendered to PDF.
   */
  jboolean useDescender_;
  /*!
   @brief Adjusts the cell contents to compensate for border widths.Note that
  this only has an effect when rendered to PDF.
   */
  jboolean useBorderPadding_;
}

/*!
 @brief Adds content to this object.
 @param element Element
 @throw BadElementExceptionon error
 */
- (void)addElementWithComAowagieTextElement:(id<ComAowagieTextElement>)element;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextSimpleCell, content_, JavaUtilArrayList *)

__attribute__((unused)) static void ComAowagieTextSimpleCell_addElementWithComAowagieTextElement_(ComAowagieTextSimpleCell *self, id<ComAowagieTextElement> element);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/SimpleCell.java"


#line 63
@implementation ComAowagieTextSimpleCell


#line 119
- (instancetype)initPackagePrivateWithBoolean:(jboolean)row {
  ComAowagieTextSimpleCell_initPackagePrivateWithBoolean_(self, row);
  return self;
}


#line 130
- (void)addElementWithComAowagieTextElement:(id<ComAowagieTextElement>)element {
  ComAowagieTextSimpleCell_addElementWithComAowagieTextElement_(self, element);
}


#line 168
- (ComAowagieTextPdfPdfPCell *)createPdfPCellWithComAowagieTextSimpleCell:(ComAowagieTextSimpleCell *)rowAttributes {
  ComAowagieTextPdfPdfPCell *cell = new_ComAowagieTextPdfPdfPCell_init();
  [cell setBorderWithInt:ComAowagieTextRectangle_NO_BORDER];
  ComAowagieTextSimpleCell *tmp = new_ComAowagieTextSimpleCell_initPackagePrivateWithBoolean_(ComAowagieTextSimpleCell_CELL);
  [tmp setSpacing_leftWithFloat:self->spacing_left_];
  [tmp setSpacing_rightWithFloat:self->spacing_right_];
  [tmp setSpacing_topWithFloat:self->spacing_top_];
  [tmp setSpacing_bottomWithFloat:self->spacing_bottom_];
  [tmp cloneNonPositionParametersWithComAowagieTextRectangle:rowAttributes];
  [tmp softCloneNonPositionParametersWithComAowagieTextRectangle:self];
  [cell setCellEventWithComAowagieTextPdfPdfPCellEvent:tmp];
  [cell setHorizontalAlignmentWithInt:((ComAowagieTextSimpleCell *) nil_chk(rowAttributes))->horizontalAlignment_];
  [cell setVerticalAlignmentWithInt:rowAttributes->verticalAlignment_];
  [cell setUseAscenderWithBoolean:rowAttributes->useAscender_];
  [cell setUseBorderPaddingWithBoolean:rowAttributes->useBorderPadding_];
  [cell setUseDescenderWithBoolean:rowAttributes->useDescender_];
  [cell setColspanWithInt:self->colspan_];
  if (self->horizontalAlignment_ != ComAowagieTextElement_ALIGN_UNDEFINED) {
    [cell setHorizontalAlignmentWithInt:self->horizontalAlignment_];
  }
  if (self->verticalAlignment_ != ComAowagieTextElement_ALIGN_UNDEFINED) {
    [cell setVerticalAlignmentWithInt:self->verticalAlignment_];
  }
  if (self->useAscender_) {
    [cell setUseAscenderWithBoolean:self->useAscender_];
  }
  if (self->useBorderPadding_) {
    [cell setUseBorderPaddingWithBoolean:self->useBorderPadding_];
  }
  if (self->useDescender_) {
    [cell setUseDescenderWithBoolean:self->useDescender_];
  }
  jfloat p;
  jfloat sp_left = self->spacing_left_;
  if (JavaLangFloat_isNaNWithFloat_(sp_left)) {
    sp_left = 0.0f;
  }
  jfloat sp_right = self->spacing_right_;
  if (JavaLangFloat_isNaNWithFloat_(sp_right)) {
    sp_right = 0.0f;
  }
  jfloat sp_top = self->spacing_top_;
  if (JavaLangFloat_isNaNWithFloat_(sp_top)) {
    sp_top = 0.0f;
  }
  jfloat sp_bottom = self->spacing_bottom_;
  if (JavaLangFloat_isNaNWithFloat_(sp_bottom)) {
    sp_bottom = 0.0f;
  }
  p = self->padding_left_;
  if (JavaLangFloat_isNaNWithFloat_(p)) {
    p = 0.0f;
  }
  [cell setPaddingLeftWithFloat:p + sp_left];
  p = self->padding_right_;
  if (JavaLangFloat_isNaNWithFloat_(p)) {
    p = 0.0f;
  }
  [cell setPaddingRightWithFloat:p + sp_right];
  p = self->padding_top_;
  if (JavaLangFloat_isNaNWithFloat_(p)) {
    p = 0.0f;
  }
  [cell setPaddingTopWithFloat:p + sp_top];
  p = self->padding_bottom_;
  if (JavaLangFloat_isNaNWithFloat_(p)) {
    p = 0.0f;
  }
  [cell setPaddingBottomWithFloat:p + sp_bottom];
  id<ComAowagieTextElement> element;
  for (id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(self->content_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    element = (id<ComAowagieTextElement>) cast_check([i next], ComAowagieTextElement_class_());
    [cell addElementWithComAowagieTextElement:element];
  }
  return cell;
}


#line 248
- (void)cellLayoutWithComAowagieTextPdfPdfPCell:(ComAowagieTextPdfPdfPCell *)cell
                    withComAowagieTextRectangle:(ComAowagieTextRectangle *)position
       withComAowagieTextPdfPdfContentByteArray:(IOSObjectArray *)canvases {
  
#line 250
  jfloat sp_left = self->spacing_left_;
  if (JavaLangFloat_isNaNWithFloat_(sp_left)) {
    sp_left = 0.0f;
  }
  jfloat sp_right = self->spacing_right_;
  if (JavaLangFloat_isNaNWithFloat_(sp_right)) {
    sp_right = 0.0f;
  }
  jfloat sp_top = self->spacing_top_;
  if (JavaLangFloat_isNaNWithFloat_(sp_top)) {
    sp_top = 0.0f;
  }
  jfloat sp_bottom = self->spacing_bottom_;
  if (JavaLangFloat_isNaNWithFloat_(sp_bottom)) {
    sp_bottom = 0.0f;
  }
  ComAowagieTextRectangle *rect = new_ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_([((ComAowagieTextRectangle *) nil_chk(position)) getLeftWithFloat:sp_left], [position getBottomWithFloat:sp_bottom], [position getRightWithFloat:sp_right], [position getTopWithFloat:sp_top]);
  [rect cloneNonPositionParametersWithComAowagieTextRectangle:self];
  [((ComAowagieTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(nil_chk(canvases), ComAowagieTextPdfPdfPTable_BACKGROUNDCANVAS))) rectangleWithComAowagieTextRectangle:rect];
  [rect setBackgroundColorWithHarmonyJavaAwtColor:nil];
  [((ComAowagieTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(canvases, ComAowagieTextPdfPdfPTable_LINECANVAS))) rectangleWithComAowagieTextRectangle:rect];
}

- (void)setPaddingWithFloat:(jfloat)padding {
  if (JavaLangFloat_isNaNWithFloat_(self->padding_right_)) {
    [self setPadding_rightWithFloat:padding];
  }
  if (JavaLangFloat_isNaNWithFloat_(self->padding_left_)) {
    [self setPadding_leftWithFloat:padding];
  }
  if (JavaLangFloat_isNaNWithFloat_(self->padding_top_)) {
    [self setPadding_topWithFloat:padding];
  }
  if (JavaLangFloat_isNaNWithFloat_(self->padding_bottom_)) {
    [self setPadding_bottomWithFloat:padding];
  }
}


#line 294
- (jint)getColspan {
  return self->colspan_;
}


#line 300
- (void)setColspanWithInt:(jint)colspan {
  if (colspan > 0) {
    self->colspan_ = colspan;
  }
}


#line 308
- (jfloat)getPadding_bottom {
  return self->padding_bottom_;
}


#line 314
- (void)setPadding_bottomWithFloat:(jfloat)padding_bottom {
  self->padding_bottom_ = padding_bottom;
}


#line 320
- (jfloat)getPadding_left {
  return self->padding_left_;
}


#line 326
- (void)setPadding_leftWithFloat:(jfloat)padding_left {
  self->padding_left_ = padding_left;
}


#line 332
- (jfloat)getPadding_right {
  return self->padding_right_;
}


#line 338
- (void)setPadding_rightWithFloat:(jfloat)padding_right {
  self->padding_right_ = padding_right;
}


#line 344
- (jfloat)getPadding_top {
  return self->padding_top_;
}


#line 350
- (void)setPadding_topWithFloat:(jfloat)padding_top {
  self->padding_top_ = padding_top;
}


#line 356
- (jfloat)getSpacing_left {
  return self->spacing_left_;
}


#line 362
- (jfloat)getSpacing_right {
  return self->spacing_right_;
}


#line 368
- (jfloat)getSpacing_top {
  return self->spacing_top_;
}


#line 374
- (jfloat)getSpacing_bottom {
  return self->spacing_bottom_;
}


#line 381
- (void)setSpacingWithFloat:(jfloat)spacing {
  self->spacing_left_ = spacing;
  self->spacing_right_ = spacing;
  self->spacing_top_ = spacing;
  self->spacing_bottom_ = spacing;
}


#line 391
- (void)setSpacing_leftWithFloat:(jfloat)spacing {
  self->spacing_left_ = spacing;
}


#line 398
- (void)setSpacing_rightWithFloat:(jfloat)spacing {
  self->spacing_right_ = spacing;
}


#line 405
- (void)setSpacing_topWithFloat:(jfloat)spacing {
  self->spacing_top_ = spacing;
}


#line 412
- (void)setSpacing_bottomWithFloat:(jfloat)spacing {
  self->spacing_bottom_ = spacing;
}


#line 419
- (jboolean)isCellgroup {
  return self->cellgroup_;
}


#line 425
- (void)setCellgroupWithBoolean:(jboolean)cellgroup {
  self->cellgroup_ = cellgroup;
}


#line 431
- (jint)getHorizontalAlignment {
  return self->horizontalAlignment_;
}


#line 437
- (void)setHorizontalAlignmentWithInt:(jint)horizontalAlignment {
  self->horizontalAlignment_ = horizontalAlignment;
}


#line 443
- (jint)getVerticalAlignment {
  return self->verticalAlignment_;
}


#line 449
- (void)setVerticalAlignmentWithInt:(jint)verticalAlignment {
  self->verticalAlignment_ = verticalAlignment;
}


#line 455
- (jfloat)getWidth {
  
#line 457
  return self->width_;
}


#line 462
- (void)setWidthWithFloat:(jfloat)width {
  self->width_ = width;
}


#line 468
- (jfloat)getWidthpercentage {
  return self->widthpercentage_;
}


#line 474
- (void)setWidthpercentageWithFloat:(jfloat)widthpercentage {
  self->widthpercentage_ = widthpercentage;
}


#line 480
- (jboolean)isUseAscender {
  return self->useAscender_;
}


#line 486
- (void)setUseAscenderWithBoolean:(jboolean)useAscender {
  self->useAscender_ = useAscender;
}


#line 492
- (jboolean)isUseBorderPadding {
  return self->useBorderPadding_;
}


#line 498
- (void)setUseBorderPaddingWithBoolean:(jboolean)useBorderPadding {
  self->useBorderPadding_ = useBorderPadding;
}


#line 504
- (jboolean)isUseDescender {
  return self->useDescender_;
}


#line 510
- (void)setUseDescenderWithBoolean:(jboolean)useDescender {
  self->useDescender_ = useDescender;
}


#line 517
- (JavaUtilArrayList *)getContent {
  return self->content_;
}


#line 524
- (jboolean)addWithId:(id)o {
  
#line 526
  @try {
    ComAowagieTextSimpleCell_addElementWithComAowagieTextElement_(self, (id<ComAowagieTextElement>) cast_check(o, ComAowagieTextElement_class_()));
    return true;
  }
  @catch (JavaLangClassCastException *e) {
    return false;
  }
  @catch (ComAowagieTextBadElementException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 540
- (jint)type {
  
#line 542
  return ComAowagieTextElement_CELL;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, 3, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfPCell;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 9, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 9, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 9, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 9, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 11, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 9, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithBoolean:);
  methods[1].selector = @selector(addElementWithComAowagieTextElement:);
  methods[2].selector = @selector(createPdfPCellWithComAowagieTextSimpleCell:);
  methods[3].selector = @selector(cellLayoutWithComAowagieTextPdfPdfPCell:withComAowagieTextRectangle:withComAowagieTextPdfPdfContentByteArray:);
  methods[4].selector = @selector(setPaddingWithFloat:);
  methods[5].selector = @selector(getColspan);
  methods[6].selector = @selector(setColspanWithInt:);
  methods[7].selector = @selector(getPadding_bottom);
  methods[8].selector = @selector(setPadding_bottomWithFloat:);
  methods[9].selector = @selector(getPadding_left);
  methods[10].selector = @selector(setPadding_leftWithFloat:);
  methods[11].selector = @selector(getPadding_right);
  methods[12].selector = @selector(setPadding_rightWithFloat:);
  methods[13].selector = @selector(getPadding_top);
  methods[14].selector = @selector(setPadding_topWithFloat:);
  methods[15].selector = @selector(getSpacing_left);
  methods[16].selector = @selector(getSpacing_right);
  methods[17].selector = @selector(getSpacing_top);
  methods[18].selector = @selector(getSpacing_bottom);
  methods[19].selector = @selector(setSpacingWithFloat:);
  methods[20].selector = @selector(setSpacing_leftWithFloat:);
  methods[21].selector = @selector(setSpacing_rightWithFloat:);
  methods[22].selector = @selector(setSpacing_topWithFloat:);
  methods[23].selector = @selector(setSpacing_bottomWithFloat:);
  methods[24].selector = @selector(isCellgroup);
  methods[25].selector = @selector(setCellgroupWithBoolean:);
  methods[26].selector = @selector(getHorizontalAlignment);
  methods[27].selector = @selector(setHorizontalAlignmentWithInt:);
  methods[28].selector = @selector(getVerticalAlignment);
  methods[29].selector = @selector(setVerticalAlignmentWithInt:);
  methods[30].selector = @selector(getWidth);
  methods[31].selector = @selector(setWidthWithFloat:);
  methods[32].selector = @selector(getWidthpercentage);
  methods[33].selector = @selector(setWidthpercentageWithFloat:);
  methods[34].selector = @selector(isUseAscender);
  methods[35].selector = @selector(setUseAscenderWithBoolean:);
  methods[36].selector = @selector(isUseBorderPadding);
  methods[37].selector = @selector(setUseBorderPaddingWithBoolean:);
  methods[38].selector = @selector(isUseDescender);
  methods[39].selector = @selector(setUseDescenderWithBoolean:);
  methods[40].selector = @selector(getContent);
  methods[41].selector = @selector(addWithId:);
  methods[42].selector = @selector(type);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CELL", "Z", .constantValue.asBOOL = ComAowagieTextSimpleCell_CELL, 0x18, -1, -1, -1, -1 },
    { "content_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "width_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "widthpercentage_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "spacing_left_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "spacing_right_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "spacing_top_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "spacing_bottom_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "padding_left_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "padding_right_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "padding_top_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "padding_bottom_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "colspan_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "horizontalAlignment_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "verticalAlignment_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cellgroup_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useAscender_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useDescender_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useBorderPadding_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "addElement", "LComAowagieTextElement;", "LComAowagieTextBadElementException;", "createPdfPCell", "LComAowagieTextSimpleCell;", "cellLayout", "LComAowagieTextPdfPdfPCell;LComAowagieTextRectangle;[LComAowagieTextPdfPdfContentByte;", "setPadding", "F", "setColspan", "I", "setPadding_bottom", "setPadding_left", "setPadding_right", "setPadding_top", "setSpacing", "setSpacing_left", "setSpacing_right", "setSpacing_top", "setSpacing_bottom", "setCellgroup", "setHorizontalAlignment", "setVerticalAlignment", "setWidth", "setWidthpercentage", "setUseAscender", "setUseBorderPadding", "setUseDescender", "add", "LNSObject;" };
  static const J2ObjcClassInfo _ComAowagieTextSimpleCell = { "SimpleCell", "com.aowagie.text", ptrTable, methods, fields, 7, 0x0, 43, 19, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextSimpleCell;
}

@end


#line 119
void ComAowagieTextSimpleCell_initPackagePrivateWithBoolean_(ComAowagieTextSimpleCell *self, jboolean row) {
  ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(self, 0.0f, 0.0f, 0.0f, 0.0f);
  self->content_ = new_JavaUtilArrayList_init();
  self->width_ =
#line 73
  0.0f;
  self->widthpercentage_ =
#line 75
  0.0f;
  self->spacing_left_ =
#line 77
  JavaLangFloat_NaN;
  self->spacing_right_ =
#line 79
  JavaLangFloat_NaN;
  self->spacing_top_ =
#line 81
  JavaLangFloat_NaN;
  self->spacing_bottom_ =
#line 83
  JavaLangFloat_NaN;
  self->padding_left_ =
#line 85
  JavaLangFloat_NaN;
  self->padding_right_ =
#line 87
  JavaLangFloat_NaN;
  self->padding_top_ =
#line 89
  JavaLangFloat_NaN;
  self->padding_bottom_ =
#line 91
  JavaLangFloat_NaN;
  self->colspan_ =
#line 93
  1;
  self->horizontalAlignment_ =
#line 95
  ComAowagieTextElement_ALIGN_UNDEFINED;
  self->verticalAlignment_ =
#line 97
  ComAowagieTextElement_ALIGN_UNDEFINED;
  self->cellgroup_ =
#line 99
  false;
  self->useAscender_ =
#line 103
  false;
  self->useDescender_ =
#line 107
  false;
  
#line 121
  self->cellgroup_ = row;
  [self setBorderWithInt:ComAowagieTextRectangle_BOX];
}


#line 119
ComAowagieTextSimpleCell *new_ComAowagieTextSimpleCell_initPackagePrivateWithBoolean_(jboolean row) {
  J2OBJC_NEW_IMPL(ComAowagieTextSimpleCell, initPackagePrivateWithBoolean_, row)
}


#line 119
ComAowagieTextSimpleCell *create_ComAowagieTextSimpleCell_initPackagePrivateWithBoolean_(jboolean row) {
  J2OBJC_CREATE_IMPL(ComAowagieTextSimpleCell, initPackagePrivateWithBoolean_, row)
}


#line 130
void ComAowagieTextSimpleCell_addElementWithComAowagieTextElement_(ComAowagieTextSimpleCell *self, id<ComAowagieTextElement> element) {
  if (self->cellgroup_) {
    if ([element isKindOfClass:[ComAowagieTextSimpleCell class]]) {
      if ([((ComAowagieTextSimpleCell *) nil_chk(((ComAowagieTextSimpleCell *) element))) isCellgroup]) {
        @throw new_ComAowagieTextBadElementException_initWithNSString_(@"You can't add one row to another row.");
      }
      [((JavaUtilArrayList *) nil_chk(self->content_)) addWithId:element];
      return;
    }
    else {
      @throw new_ComAowagieTextBadElementException_initWithNSString_(JreStrcat("$$", @"You can only add cells to rows, no objects of type ", [[((id<ComAowagieTextElement>) nil_chk(element)) java_getClass] getName]));
    }
  }
  if ([((id<ComAowagieTextElement>) nil_chk(element)) type] == ComAowagieTextElement_PARAGRAPH ||
#line 144
  [element type] == ComAowagieTextElement_PHRASE ||
#line 145
  [element type] == ComAowagieTextElement_ANCHOR ||
#line 146
  [element type] == ComAowagieTextElement_CHUNK ||
#line 147
  [element type] == ComAowagieTextElement_LIST ||
#line 148
  [element type] == ComAowagieTextElement_MARKED ||
#line 149
  [element type] == ComAowagieTextElement_JPEG ||
#line 150
  [element type] == ComAowagieTextElement_JPEG2000 ||
#line 151
  [element type] == ComAowagieTextElement_JBIG2 ||
#line 152
  [element type] == ComAowagieTextElement_IMGRAW ||
#line 153
  [element type] == ComAowagieTextElement_IMGTEMPLATE) {
    [((JavaUtilArrayList *) nil_chk(self->content_)) addWithId:element];
  }
  else {
    @throw new_ComAowagieTextBadElementException_initWithNSString_(JreStrcat("$$$", @"You can't add an element of type ", [[element java_getClass] getName], @" to a SimpleCell."));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextSimpleCell)
