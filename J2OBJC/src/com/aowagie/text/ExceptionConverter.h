//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/ExceptionConverter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComAowagieTextExceptionConverter")
#ifdef RESTRICT_ComAowagieTextExceptionConverter
#define INCLUDE_ALL_ComAowagieTextExceptionConverter 0
#else
#define INCLUDE_ALL_ComAowagieTextExceptionConverter 1
#endif
#undef RESTRICT_ComAowagieTextExceptionConverter

#if !defined (ComAowagieTextExceptionConverter_) && (INCLUDE_ALL_ComAowagieTextExceptionConverter || defined(INCLUDE_ComAowagieTextExceptionConverter))
#define ComAowagieTextExceptionConverter_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaIoPrintStream;
@class JavaIoPrintWriter;
@class JavaLangException;
@class JavaLangThrowable;

/*!
 @brief The ExceptionConverter changes a checked exception into an
  unchecked exception.
 */
@interface ComAowagieTextExceptionConverter : JavaLangRuntimeException

#pragma mark Public

/*!
 @brief Construct a RuntimeException based on another Exception
 @param ex the exception that has to be turned into a RuntimeException
 */
- (instancetype)initWithJavaLangException:(JavaLangException *)ex;

/*!
 @brief Convert an Exception into an unchecked exception.Return the exception if it is
  already an unchecked exception or return an ExceptionConverter wrapper otherwise
 @param ex the exception to convert
 @return an unchecked exception
 @since 2.1.6
 */
+ (JavaLangRuntimeException *)convertExceptionWithJavaLangException:(JavaLangException *)ex;

/*!
 @brief requests to fill in the stack trace we will have to ignore.
 We can't throw an exception here, because this method
  is called by the constructor of Throwable
 @return a Throwable
 */
- (JavaLangThrowable *)fillInStackTrace;

/*!
 @brief and allow the user of ExceptionConverter to get a handle to it.
 @return the original exception
 */
- (JavaLangException *)getException;

/*!
 @brief and make sure we also produce a localized version
 @return localized version of the message
 */
- (NSString *)getLocalizedMessage;

/*!
 @brief We print the message of the checked exception
 @return message of the original exception
 */
- (NSString *)getMessage;

/*!
 @brief we have to override this as well
 */
- (void)printStackTrace;

/*!
 @brief here we prefix, with s.print(), not s.println(), the stack
  trace with "ExceptionConverter:"
 @param s stream
 */
- (void)printStackTraceWithJavaIoPrintStream:(JavaIoPrintStream *)s;

/*!
 @brief Again, we prefix the stack trace with "ExceptionConverter:"
 @param s writer
 */
- (void)printStackTraceWithJavaIoPrintWriter:(JavaIoPrintWriter *)s;

/*!
 @brief The toString() is changed to be prefixed with ExceptionConverter
 @return String version of the exception
 */
- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0
           withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0
           withJavaLangThrowable:(JavaLangThrowable *)arg1
                     withBoolean:(jboolean)arg2
                     withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextExceptionConverter)

FOUNDATION_EXPORT void ComAowagieTextExceptionConverter_initWithJavaLangException_(ComAowagieTextExceptionConverter *self, JavaLangException *ex);

FOUNDATION_EXPORT ComAowagieTextExceptionConverter *new_ComAowagieTextExceptionConverter_initWithJavaLangException_(JavaLangException *ex) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextExceptionConverter *create_ComAowagieTextExceptionConverter_initWithJavaLangException_(JavaLangException *ex);

FOUNDATION_EXPORT JavaLangRuntimeException *ComAowagieTextExceptionConverter_convertExceptionWithJavaLangException_(JavaLangException *ex);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextExceptionConverter)

#endif

#pragma pop_macro("INCLUDE_ALL_ComAowagieTextExceptionConverter")
