//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/Table.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/BadElementException.h"
#include "com/aowagie/text/Cell.h"
#include "com/aowagie/text/DocumentException.h"
#include "com/aowagie/text/Element.h"
#include "com/aowagie/text/ElementListener.h"
#include "com/aowagie/text/ElementTags.h"
#include "com/aowagie/text/ExceptionConverter.h"
#include "com/aowagie/text/Phrase.h"
#include "com/aowagie/text/Rectangle.h"
#include "com/aowagie/text/Row.h"
#include "com/aowagie/text/SimpleCell.h"
#include "com/aowagie/text/SimpleTable.h"
#include "com/aowagie/text/Table.h"
#include "com/aowagie/text/pdf/PdfPCell.h"
#include "com/aowagie/text/pdf/PdfPTable.h"
#include "harmony/java/awt/Color.h"
#include "harmony/java/awt/Dimension.h"
#include "harmony/java/awt/Point.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/Table must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextTable () {
 @public
  /*!
   @brief This is the number of columns in the <CODE>Table</CODE>.
   */
  jint columns_;
  /*!
   @brief This is the list of <CODE>Row</CODE>s.
   */
  JavaUtilArrayList *rows_;
  /*!
   @brief The current Position in the table.
   */
  HarmonyJavaAwtPoint *curPosition_;
  /*!
   @brief This Empty Cell contains the DEFAULT layout of each Cell added with the method addCell(String content).
   */
  ComAowagieTextCell *defaultCell_;
  /*!
   @brief This is the number of the last row of the table headers.
   */
  jint lastHeaderRow_;
  /*!
   @brief This is the horizontal alignment.
   */
  jint alignment_;
  /*!
   @brief This is cellpadding.
   */
  jfloat cellpadding_;
  /*!
   @brief This is cellspacing.
   */
  jfloat cellspacing_;
  /*!
   @brief This is the width of the table (in percent of the available space).
   */
  jfloat width_;
  /*!
   @brief Is the width a percentage (false) or an absolute width (true)?
   */
  jboolean locked_;
  /*!
   @brief This is an array containing the widths (in percentages) of every column.
   */
  IOSFloatArray *widths_;
  /*!
   @brief Boolean to track if a table was inserted (to avoid unnecessary computations afterwards)
   */
  jboolean mTableInserted_;
  /*!
   @brief Boolean to automatically fill empty cells before a table is rendered
   (takes CPU so may be set to false in case of certainty)
   */
  jboolean autoFillEmptyCells_;
  /*!
   @brief If true this table may not be split over two pages.
   */
  jboolean tableFitsPage_;
  /*!
   @brief If true cells may not be split over two pages.
   */
  jboolean cellsFitPage_;
  /*!
   @brief This is the offset of the table.
   */
  jfloat offset_;
  /*!
   @brief if you want to generate tables the old way, set this value to false.
   */
  jboolean convert2pdfptable_;
  /*!
   @brief Indicates if this is the first time the section was added.
   @since iText 2.0.8
   */
  jboolean notAddedYet_;
  /*!
   @brief Indicates if the PdfPTable is complete once added to the document.
   @since iText 2.0.8
   */
  jboolean complete_;
}

/*!
 @brief Constructs a <CODE>Table</CODE> with a certain number of columns
  and a certain number of <CODE>Row</CODE>s.
 @param columns The number of columns in the table
 @param rows The number of rows
 @throw BadElementExceptionif the creator was called with less than 1 column
 */
- (instancetype)initWithInt:(jint)columns
                    withInt:(jint)rows;

/*!
 @brief Adds a <CODE>Cell</CODE> to the <CODE>Table</CODE> at a certain location.
 @param aCell The  <CODE> Cell </CODE>  to add
 @param aLocation The location where the  <CODE> Cell </CODE>  will be added
 @throw BadElementExceptionon error
 */
- (void)addCellWithComAowagieTextCell:(ComAowagieTextCell *)aCell
              withHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)aLocation;

/*!
 @brief Adds a <CODE>Cell</CODE> to the <CODE>Table</CODE>.
 <P>
  This is a shortcut for <CODE>addCell(Cell cell, Point location)</CODE>.
  The <CODE>Phrase</CODE> will be converted to a <CODE>Cell</CODE>.
 @param content a  <CODE> Phrase </CODE>
 @param location a  <CODE> Point </CODE>
 @throw BadElementExceptionthis should never happen
 */
- (void)addCellWithComAowagieTextPhrase:(ComAowagieTextPhrase *)content
                withHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)location;

/*!
 @brief To put a table within the existing table at the given position
  generateTable will of course re-arrange the widths of the columns.
 @param aTable the table you want to insert
 @param aLocation a  <CODE> Point </CODE>
 */
- (void)insertTableWithComAowagieTextTable:(ComAowagieTextTable *)aTable
                   withHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)aLocation;

/*!
 @brief returns the element at the position row, column
           (Cast to Cell or Table)
 @param row Row
 @param column Column
 @return dimension Dimension
 @since 2.1.0 (was made private in 2.0.3)
 */
- (id)getElementWithInt:(jint)row
                withInt:(jint)column;

/*!
 @brief Integrates all added tables and recalculates column widths.
 */
- (void)mergeInsertedTables;

/*!
 @brief adds new<CODE>Cell</CODE>'s to empty/null spaces.
 */
- (void)fillEmptyMatrixCells;

/*!
 @brief check if <CODE>Cell</CODE> 'fits' the table.
 <UL><LI>rowspan/colspan not beyond borders</LI>
      <LI>spanned cell don't overlap existing cells</LI></UL>
 @param aCell the cell that has to be checked
 @param aLocation the location where the cell has to be placed
 @return true if the location was valid
 */
- (jboolean)isValidLocationWithComAowagieTextCell:(ComAowagieTextCell *)aCell
                          withHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)aLocation;

/*!
 @brief Sets the unset cell properties to be the table defaults.
 @param aCell The cell to set to table defaults as necessary.
 */
- (void)assumeTableDefaultsWithComAowagieTextCell:(ComAowagieTextCell *)aCell;

/*!
 @brief Inserts a Cell in a cell-array and reserves cells defined by row-/colspan.
 @param someRows some rows
 @param aCell the cell that has to be inserted
 @param aPosition the position where the cell has to be placed
 */
- (void)placeCellWithJavaUtilArrayList:(JavaUtilArrayList *)someRows
                withComAowagieTextCell:(ComAowagieTextCell *)aCell
               withHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)aPosition;

/*!
 @brief Sets current col/row to valid(empty) pos after addCell/Table
 @param aLocation a location in the Table
 */
- (void)setCurrentLocationToNextValidPositionWithHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)aLocation;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextTable, rows_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextTable, curPosition_, HarmonyJavaAwtPoint *)
J2OBJC_FIELD_SETTER(ComAowagieTextTable, defaultCell_, ComAowagieTextCell *)
J2OBJC_FIELD_SETTER(ComAowagieTextTable, widths_, IOSFloatArray *)

__attribute__((unused)) static void ComAowagieTextTable_initWithInt_withInt_(ComAowagieTextTable *self, jint columns, jint rows);

__attribute__((unused)) static ComAowagieTextTable *new_ComAowagieTextTable_initWithInt_withInt_(jint columns, jint rows) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextTable *create_ComAowagieTextTable_initWithInt_withInt_(jint columns, jint rows);

__attribute__((unused)) static void ComAowagieTextTable_addCellWithComAowagieTextCell_withHarmonyJavaAwtPoint_(ComAowagieTextTable *self, ComAowagieTextCell *aCell, HarmonyJavaAwtPoint *aLocation);

__attribute__((unused)) static void ComAowagieTextTable_addCellWithComAowagieTextPhrase_withHarmonyJavaAwtPoint_(ComAowagieTextTable *self, ComAowagieTextPhrase *content, HarmonyJavaAwtPoint *location);

__attribute__((unused)) static void ComAowagieTextTable_insertTableWithComAowagieTextTable_withHarmonyJavaAwtPoint_(ComAowagieTextTable *self, ComAowagieTextTable *aTable, HarmonyJavaAwtPoint *aLocation);

__attribute__((unused)) static id ComAowagieTextTable_getElementWithInt_withInt_(ComAowagieTextTable *self, jint row, jint column);

__attribute__((unused)) static void ComAowagieTextTable_mergeInsertedTables(ComAowagieTextTable *self);

__attribute__((unused)) static void ComAowagieTextTable_fillEmptyMatrixCells(ComAowagieTextTable *self);

__attribute__((unused)) static jboolean ComAowagieTextTable_isValidLocationWithComAowagieTextCell_withHarmonyJavaAwtPoint_(ComAowagieTextTable *self, ComAowagieTextCell *aCell, HarmonyJavaAwtPoint *aLocation);

__attribute__((unused)) static void ComAowagieTextTable_assumeTableDefaultsWithComAowagieTextCell_(ComAowagieTextTable *self, ComAowagieTextCell *aCell);

__attribute__((unused)) static void ComAowagieTextTable_placeCellWithJavaUtilArrayList_withComAowagieTextCell_withHarmonyJavaAwtPoint_(ComAowagieTextTable *self, JavaUtilArrayList *someRows, ComAowagieTextCell *aCell, HarmonyJavaAwtPoint *aPosition);

__attribute__((unused)) static void ComAowagieTextTable_setCurrentLocationToNextValidPositionWithHarmonyJavaAwtPoint_(ComAowagieTextTable *self, HarmonyJavaAwtPoint *aLocation);

__attribute__((unused)) static IOSObjectArray *ComAowagieTextTable__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *ComAowagieTextTable__Annotations$1(void);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/Table.java"


#line 155
@implementation ComAowagieTextTable


#line 233
- (instancetype)initWithInt:(jint)columns {
  ComAowagieTextTable_initWithInt_(self, columns);
  return self;
}


#line 245
- (instancetype)initWithInt:(jint)columns
                    withInt:(jint)rows {
  ComAowagieTextTable_initWithInt_withInt_(self, columns, rows);
  return self;
}


#line 281
- (jboolean)processWithComAowagieTextElementListener:(id<ComAowagieTextElementListener>)listener {
  
#line 283
  @try {
    return [((id<ComAowagieTextElementListener>) nil_chk(listener)) addWithComAowagieTextElement:self];
  }
  @catch (ComAowagieTextDocumentException *de) {
    return false;
  }
}


#line 296
- (jint)type {
  
#line 298
  return ComAowagieTextElement_TABLE;
}


#line 307
- (JavaUtilArrayList *)getChunks {
  
#line 309
  return new_JavaUtilArrayList_init();
}


#line 316
- (jboolean)isNestable {
  
#line 318
  return true;
}


#line 328
- (jint)getColumns {
  return self->columns_;
}


#line 337
- (jint)size {
  return [((JavaUtilArrayList *) nil_chk(self->rows_)) size];
}


#line 346
- (HarmonyJavaAwtDimension *)getDimension {
  return new_HarmonyJavaAwtDimension_initWithInt_withInt_(self->columns_, [self size]);
}


#line 355
- (ComAowagieTextCell *)getDefaultCell {
  return self->defaultCell_;
}


#line 365
- (void)setDefaultCellWithComAowagieTextCell:(ComAowagieTextCell *)value {
  self->defaultCell_ = value;
}


#line 374
- (jint)getLastHeaderRow {
  return self->lastHeaderRow_;
}


#line 383
- (void)setLastHeaderRowWithInt:(jint)value {
  self->lastHeaderRow_ = value;
}


#line 392
- (jint)getAlignment {
  return self->alignment_;
}


#line 401
- (void)setAlignmentWithInt:(jint)value {
  self->alignment_ = value;
}


#line 410
- (void)setAlignmentWithNSString:(NSString *)alignment {
  if ([((NSString *) nil_chk(ComAowagieTextElementTags_ALIGN_LEFT)) java_equalsIgnoreCase:alignment]) {
    self->alignment_ = ComAowagieTextElement_ALIGN_LEFT;
    return;
  }
  if ([((NSString *) nil_chk(ComAowagieTextElementTags_RIGHT)) java_equalsIgnoreCase:alignment]) {
    self->alignment_ = ComAowagieTextElement_ALIGN_RIGHT;
    return;
  }
  self->alignment_ = ComAowagieTextElement_ALIGN_CENTER;
}


#line 427
- (jfloat)getPadding {
  return self->cellpadding_;
}


#line 436
- (void)setPaddingWithFloat:(jfloat)value {
  self->cellpadding_ = value;
}


#line 445
- (jfloat)getSpacing {
  return self->cellspacing_;
}


#line 454
- (void)setSpacingWithFloat:(jfloat)value {
  self->cellspacing_ = value;
}


#line 466
- (void)setAutoFillEmptyCellsWithBoolean:(jboolean)aDoAutoFill {
  self->autoFillEmptyCells_ = aDoAutoFill;
}


#line 475
- (jfloat)getWidth {
  
#line 477
  return self->width_;
}


#line 485
- (void)setWidthWithFloat:(jfloat)width {
  self->width_ = width;
}


#line 492
- (jboolean)isLocked {
  return self->locked_;
}


#line 499
- (void)setLockedWithBoolean:(jboolean)locked {
  self->locked_ = locked;
}


#line 508
- (IOSFloatArray *)getProportionalWidths {
  return self->widths_;
}


#line 530
- (void)setWidthsWithFloatArray:(IOSFloatArray *)widths {
  if (((IOSFloatArray *) nil_chk(widths))->size_ != self->columns_) {
    @throw new_ComAowagieTextBadElementException_initWithNSString_(@"Wrong number of columns.");
  }
  
#line 536
  jfloat hundredPercent = 0;
  for (jint i = 0; i < self->columns_; i++) {
    JrePlusAssignFloatF(&hundredPercent, IOSFloatArray_Get(widths, i));
  }
  
#line 542
  jfloat width;
  *IOSFloatArray_GetRef(nil_chk(self->widths_), self->columns_ - 1) = 100;
  for (jint i = 0; i < self->columns_ - 1; i++) {
    width = 100.0f * IOSFloatArray_Get(widths, i) / hundredPercent;
    *IOSFloatArray_GetRef(self->widths_, i) = width;
    JreMinusAssignFloatF(IOSFloatArray_GetRef(self->widths_, self->columns_ - 1), width);
  }
}


#line 561
- (void)setWidthsWithIntArray:(IOSIntArray *)widths {
  IOSFloatArray *tb = [IOSFloatArray newArrayWithLength:((IOSIntArray *) nil_chk(widths))->size_];
  for (jint k = 0; k < widths->size_; ++k) {
    *IOSFloatArray_GetRef(tb, k) = IOSIntArray_Get(widths, k);
  }
  [self setWidthsWithFloatArray:tb];
}


#line 574
- (jboolean)isTableFitsPage {
  return self->tableFitsPage_;
}


#line 586
- (void)setTableFitsPageWithBoolean:(jboolean)fitPage {
  self->tableFitsPage_ = fitPage;
  if (fitPage) {
    [self setCellsFitPageWithBoolean:true];
  }
}


#line 598
- (jboolean)isCellsFitPage {
  return self->cellsFitPage_;
}


#line 610
- (void)setCellsFitPageWithBoolean:(jboolean)fitPage {
  self->cellsFitPage_ = fitPage;
}


#line 624
- (void)setOffsetWithFloat:(jfloat)offset {
  self->offset_ = offset;
}


#line 633
- (jfloat)getOffset {
  return self->offset_;
}


#line 641
- (jboolean)isConvert2pdfptable {
  return self->convert2pdfptable_;
}


#line 648
- (void)setConvert2pdfptableWithBoolean:(jboolean)convert2pdfptable {
  self->convert2pdfptable_ = convert2pdfptable;
}


#line 661
- (void)addCellWithComAowagieTextCell:(ComAowagieTextCell *)aCell
              withHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)aLocation {
  ComAowagieTextTable_addCellWithComAowagieTextCell_withHarmonyJavaAwtPoint_(self, aCell, aLocation);
}


#line 695
- (void)addCellWithComAowagieTextCell:(ComAowagieTextCell *)cell {
  @try {
    ComAowagieTextTable_addCellWithComAowagieTextCell_withHarmonyJavaAwtPoint_(self, cell, self->curPosition_);
  }
  @catch (ComAowagieTextBadElementException *bee) {
  }
}


#line 714
- (void)addCellWithComAowagieTextPhrase:(ComAowagieTextPhrase *)content
                withHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)location {
  ComAowagieTextTable_addCellWithComAowagieTextPhrase_withHarmonyJavaAwtPoint_(self, content, location);
}


#line 733
- (void)insertTableWithComAowagieTextTable:(ComAowagieTextTable *)aTable {
  if (aTable == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"insertTable - table has null-value");
  }
  ComAowagieTextTable_insertTableWithComAowagieTextTable_withHarmonyJavaAwtPoint_(self, aTable, self->curPosition_);
}


#line 747
- (void)insertTableWithComAowagieTextTable:(ComAowagieTextTable *)aTable
                   withHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)aLocation {
  ComAowagieTextTable_insertTableWithComAowagieTextTable_withHarmonyJavaAwtPoint_(self, aTable, aLocation);
}


#line 780
- (void)addColumnsWithInt:(jint)aColumns {
  JavaUtilArrayList *newRows = new_JavaUtilArrayList_initWithInt_([((JavaUtilArrayList *) nil_chk(self->rows_)) size]);
  
#line 783
  jint newColumns = self->columns_ + aColumns;
  ComAowagieTextRow *row;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(self->rows_)) size]; i++) {
    row = new_ComAowagieTextRow_initWithInt_(newColumns);
    for (jint j = 0; j < self->columns_; j++) {
      [row setElementWithId:[((ComAowagieTextRow *) nil_chk(((ComAowagieTextRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:i], [ComAowagieTextRow class])))) getCellWithInt:j] withInt:j];
    }
    for (jint j = self->columns_; j < newColumns && i < ((HarmonyJavaAwtPoint *) nil_chk(self->curPosition_))->x_; j++) {
      [row setElementWithId:nil withInt:j];
    }
    [newRows addWithId:row];
  }
  
#line 796
  IOSFloatArray *newWidths = [IOSFloatArray newArrayWithLength:newColumns];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->widths_, 0, newWidths, 0, self->columns_);
  for (jint j = self->columns_; j < newColumns; j++) {
    *IOSFloatArray_GetRef(newWidths, j) = 0;
  }
  self->columns_ = newColumns;
  self->widths_ = newWidths;
  self->rows_ = newRows;
}


#line 811
- (void)complete {
  if (self->mTableInserted_) {
    ComAowagieTextTable_mergeInsertedTables(self);
    self->mTableInserted_ = false;
  }
  if (self->autoFillEmptyCells_) {
    ComAowagieTextTable_fillEmptyMatrixCells(self);
  }
}


#line 832
- (id)getElementWithInt:(jint)row
                withInt:(jint)column {
  return ComAowagieTextTable_getElementWithInt_withInt_(self, row, column);
}


#line 839
- (void)mergeInsertedTables {
  ComAowagieTextTable_mergeInsertedTables(self);
}


#line 1049
- (void)fillEmptyMatrixCells {
  ComAowagieTextTable_fillEmptyMatrixCells(self);
}


#line 1073
- (jboolean)isValidLocationWithComAowagieTextCell:(ComAowagieTextCell *)aCell
                          withHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)aLocation {
  return ComAowagieTextTable_isValidLocationWithComAowagieTextCell_withHarmonyJavaAwtPoint_(self, aCell, aLocation);
}


#line 1106
- (void)assumeTableDefaultsWithComAowagieTextCell:(ComAowagieTextCell *)aCell {
  ComAowagieTextTable_assumeTableDefaultsWithComAowagieTextCell_(self, aCell);
}


#line 1135
- (void)placeCellWithJavaUtilArrayList:(JavaUtilArrayList *)someRows
                withComAowagieTextCell:(ComAowagieTextCell *)aCell
               withHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)aPosition {
  ComAowagieTextTable_placeCellWithJavaUtilArrayList_withComAowagieTextCell_withHarmonyJavaAwtPoint_(self, someRows, aCell, aPosition);
}


#line 1164
- (void)setCurrentLocationToNextValidPositionWithHarmonyJavaAwtPoint:(HarmonyJavaAwtPoint *)aLocation {
  ComAowagieTextTable_setCurrentLocationToNextValidPositionWithHarmonyJavaAwtPoint_(self, aLocation);
}


#line 1197
- (IOSFloatArray *)getWidthsWithFloat:(jfloat)left
                            withFloat:(jfloat)totalWidth {
  IOSFloatArray *w = [IOSFloatArray newArrayWithLength:self->columns_ + 1];
  jfloat wPercentage;
  if (self->locked_) {
    wPercentage = 100 * self->width_ / totalWidth;
  }
  else {
    wPercentage = self->width_;
  }
  
#line 1208
  switch (self->alignment_) {
    case ComAowagieTextElement_ALIGN_LEFT:
    *IOSFloatArray_GetRef(w, 0) = left;
    break;
    case ComAowagieTextElement_ALIGN_RIGHT:
    *IOSFloatArray_GetRef(w, 0) = left + totalWidth * (100 - wPercentage) / 100;
    break;
    case ComAowagieTextElement_ALIGN_CENTER:
    default:
    *IOSFloatArray_GetRef(w, 0) = left + totalWidth * (100 - wPercentage) / 200;
  }
  
#line 1220
  totalWidth = totalWidth * wPercentage / 100;
  
#line 1222
  for (jint i = 1; i < self->columns_; i++) {
    *IOSFloatArray_GetRef(w, i) = IOSFloatArray_Get(w, i - 1) + IOSFloatArray_Get(nil_chk(self->widths_), i - 1) * totalWidth / 100;
  }
  
#line 1226
  *IOSFloatArray_GetRef(w, self->columns_) = IOSFloatArray_Get(w, 0) + totalWidth;
  return w;
}


#line 1235
- (id<JavaUtilIterator>)iterator {
  return [((JavaUtilArrayList *) nil_chk(self->rows_)) iterator];
}


#line 1244
- (ComAowagieTextPdfPdfPTable *)createPdfPTable {
  if (!self->convert2pdfptable_) {
    @throw new_ComAowagieTextBadElementException_initWithNSString_(@"No error, just an old style table");
  }
  [self setAutoFillEmptyCellsWithBoolean:true];
  [self complete];
  ComAowagieTextPdfPdfPTable *pdfptable = new_ComAowagieTextPdfPdfPTable_initWithFloatArray_(self->widths_);
  [pdfptable setCompleteWithBoolean:self->complete_];
  if ([self isNotAddedYet]) {
    [pdfptable setSkipFirstHeaderWithBoolean:true];
  }
  ComAowagieTextSimpleTable *t_evt = new_ComAowagieTextSimpleTable_init();
  [t_evt cloneNonPositionParametersWithComAowagieTextRectangle:self];
  [t_evt setCellspacingWithFloat:self->cellspacing_];
  [pdfptable setTableEventWithComAowagieTextPdfPdfPTableEvent:t_evt];
  [pdfptable setHeaderRowsWithInt:self->lastHeaderRow_ + 1];
  [pdfptable setSplitLateWithBoolean:self->cellsFitPage_];
  [pdfptable setKeepTogetherWithBoolean:self->tableFitsPage_];
  if (!JavaLangFloat_isNaNWithFloat_(self->offset_)) {
    [pdfptable setSpacingBeforeWithFloat:self->offset_];
  }
  [pdfptable setHorizontalAlignmentWithInt:self->alignment_];
  if (self->locked_) {
    [pdfptable setTotalWidthWithFloat:self->width_];
    [pdfptable setLockedWidthWithBoolean:true];
  }
  else {
    [pdfptable setWidthPercentageWithFloat:self->width_];
  }
  ComAowagieTextRow *row;
  for (id<JavaUtilIterator> iterator = [self iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    row = (ComAowagieTextRow *) cast_chk([iterator next], [ComAowagieTextRow class]);
    id<ComAowagieTextElement> cell;
    ComAowagieTextPdfPdfPCell *pcell;
    for (jint i = 0; i < [((ComAowagieTextRow *) nil_chk(row)) getColumns]; i++) {
      if ((cell = (id<ComAowagieTextElement>) cast_check([row getCellWithInt:i], ComAowagieTextElement_class_())) != nil) {
        if ([cell isKindOfClass:[ComAowagieTextTable class]]) {
          pcell = new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPTable_([((ComAowagieTextTable *) nil_chk(((ComAowagieTextTable *) cell))) createPdfPTable]);
        }
        else if ([cell isKindOfClass:[ComAowagieTextCell class]]) {
          pcell = [((ComAowagieTextCell *) nil_chk(((ComAowagieTextCell *) cell))) createPdfPCell];
          [((ComAowagieTextPdfPdfPCell *) nil_chk(pcell)) setPaddingWithFloat:self->cellpadding_ + self->cellspacing_ / 2.0f];
          ComAowagieTextSimpleCell *c_evt = new_ComAowagieTextSimpleCell_initPackagePrivateWithBoolean_(ComAowagieTextSimpleCell_CELL);
          [c_evt cloneNonPositionParametersWithComAowagieTextRectangle:(ComAowagieTextCell *) cell];
          [c_evt setSpacingWithFloat:self->cellspacing_ * 2.0f];
          [pcell setCellEventWithComAowagieTextPdfPdfPCellEvent:c_evt];
        }
        else {
          pcell = new_ComAowagieTextPdfPdfPCell_init();
        }
        [pdfptable addCellWithComAowagieTextPdfPdfPCell:pcell];
      }
    }
  }
  return pdfptable;
}


#line 1306
- (jboolean)isNotAddedYet {
  return self->notAddedYet_;
}


#line 1316
- (void)setNotAddedYetWithBoolean:(jboolean)notAddedYet {
  self->notAddedYet_ = notAddedYet;
}


#line 1324
- (void)flushContent {
  
#line 1326
  [self setNotAddedYetWithBoolean:false];
  JavaUtilArrayList *headerrows = new_JavaUtilArrayList_init();
  for (jint i = 0; i < [self getLastHeaderRow] + 1; i++) {
    [headerrows addWithId:[((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:i]];
  }
  self->rows_ = headerrows;
}


#line 1338
- (jboolean)isComplete {
  
#line 1340
  return self->complete_;
}


#line 1347
- (void)setCompleteWithBoolean:(jboolean)complete {
  
#line 1349
  self->complete_ = complete;
}


#line 1358
- (ComAowagieTextCell *)getDefaultLayout {
  
#line 1360
  return [self getDefaultCell];
}


#line 1370
- (void)setDefaultLayoutWithComAowagieTextCell:(ComAowagieTextCell *)value {
  
#line 1372
  self->defaultCell_ = value;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtDimension;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextCell;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 14, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 19, 20, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 11, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 26, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 27, 1, -1, -1, -1 },
    { NULL, "V", 0x0, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 32, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 33, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 38, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, 39, 40, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfPTable;", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 14, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextCell;", 0x1, -1, -1, -1, -1, 43, -1 },
    { NULL, "V", 0x1, 44, 6, -1, -1, 45, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithInt:withInt:);
  methods[2].selector = @selector(processWithComAowagieTextElementListener:);
  methods[3].selector = @selector(type);
  methods[4].selector = @selector(getChunks);
  methods[5].selector = @selector(isNestable);
  methods[6].selector = @selector(getColumns);
  methods[7].selector = @selector(size);
  methods[8].selector = @selector(getDimension);
  methods[9].selector = @selector(getDefaultCell);
  methods[10].selector = @selector(setDefaultCellWithComAowagieTextCell:);
  methods[11].selector = @selector(getLastHeaderRow);
  methods[12].selector = @selector(setLastHeaderRowWithInt:);
  methods[13].selector = @selector(getAlignment);
  methods[14].selector = @selector(setAlignmentWithInt:);
  methods[15].selector = @selector(setAlignmentWithNSString:);
  methods[16].selector = @selector(getPadding);
  methods[17].selector = @selector(setPaddingWithFloat:);
  methods[18].selector = @selector(getSpacing);
  methods[19].selector = @selector(setSpacingWithFloat:);
  methods[20].selector = @selector(setAutoFillEmptyCellsWithBoolean:);
  methods[21].selector = @selector(getWidth);
  methods[22].selector = @selector(setWidthWithFloat:);
  methods[23].selector = @selector(isLocked);
  methods[24].selector = @selector(setLockedWithBoolean:);
  methods[25].selector = @selector(getProportionalWidths);
  methods[26].selector = @selector(setWidthsWithFloatArray:);
  methods[27].selector = @selector(setWidthsWithIntArray:);
  methods[28].selector = @selector(isTableFitsPage);
  methods[29].selector = @selector(setTableFitsPageWithBoolean:);
  methods[30].selector = @selector(isCellsFitPage);
  methods[31].selector = @selector(setCellsFitPageWithBoolean:);
  methods[32].selector = @selector(setOffsetWithFloat:);
  methods[33].selector = @selector(getOffset);
  methods[34].selector = @selector(isConvert2pdfptable);
  methods[35].selector = @selector(setConvert2pdfptableWithBoolean:);
  methods[36].selector = @selector(addCellWithComAowagieTextCell:withHarmonyJavaAwtPoint:);
  methods[37].selector = @selector(addCellWithComAowagieTextCell:);
  methods[38].selector = @selector(addCellWithComAowagieTextPhrase:withHarmonyJavaAwtPoint:);
  methods[39].selector = @selector(insertTableWithComAowagieTextTable:);
  methods[40].selector = @selector(insertTableWithComAowagieTextTable:withHarmonyJavaAwtPoint:);
  methods[41].selector = @selector(addColumnsWithInt:);
  methods[42].selector = @selector(complete);
  methods[43].selector = @selector(getElementWithInt:withInt:);
  methods[44].selector = @selector(mergeInsertedTables);
  methods[45].selector = @selector(fillEmptyMatrixCells);
  methods[46].selector = @selector(isValidLocationWithComAowagieTextCell:withHarmonyJavaAwtPoint:);
  methods[47].selector = @selector(assumeTableDefaultsWithComAowagieTextCell:);
  methods[48].selector = @selector(placeCellWithJavaUtilArrayList:withComAowagieTextCell:withHarmonyJavaAwtPoint:);
  methods[49].selector = @selector(setCurrentLocationToNextValidPositionWithHarmonyJavaAwtPoint:);
  methods[50].selector = @selector(getWidthsWithFloat:withFloat:);
  methods[51].selector = @selector(iterator);
  methods[52].selector = @selector(createPdfPTable);
  methods[53].selector = @selector(isNotAddedYet);
  methods[54].selector = @selector(setNotAddedYetWithBoolean:);
  methods[55].selector = @selector(flushContent);
  methods[56].selector = @selector(isComplete);
  methods[57].selector = @selector(setCompleteWithBoolean:);
  methods[58].selector = @selector(getDefaultLayout);
  methods[59].selector = @selector(setDefaultLayoutWithComAowagieTextCell:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "columns_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rows_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "curPosition_", "LHarmonyJavaAwtPoint;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultCell_", "LComAowagieTextCell;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastHeaderRow_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "alignment_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cellpadding_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cellspacing_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "width_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "locked_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "widths_", "[F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTableInserted_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "autoFillEmptyCells_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tableFitsPage_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cellsFitPage_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "offset_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "convert2pdfptable_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "notAddedYet_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "complete_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LComAowagieTextBadElementException;", "II", "process", "LComAowagieTextElementListener;", "setDefaultCell", "LComAowagieTextCell;", "setLastHeaderRow", "setAlignment", "LNSString;", "setPadding", "F", "setSpacing", "setAutoFillEmptyCells", "Z", "setWidth", "setLocked", "setWidths", "[F", "[I", "LComAowagieTextDocumentException;", "setTableFitsPage", "setCellsFitPage", "setOffset", "setConvert2pdfptable", "addCell", "LComAowagieTextCell;LHarmonyJavaAwtPoint;", "LComAowagieTextPhrase;LHarmonyJavaAwtPoint;", "insertTable", "LComAowagieTextTable;", "LComAowagieTextTable;LHarmonyJavaAwtPoint;", "addColumns", "getElement", "isValidLocation", "assumeTableDefaults", "placeCell", "LJavaUtilArrayList;LComAowagieTextCell;LHarmonyJavaAwtPoint;", "setCurrentLocationToNextValidPosition", "LHarmonyJavaAwtPoint;", "getWidths", "FF", "setNotAddedYet", "setComplete", (void *)&ComAowagieTextTable__Annotations$0, "setDefaultLayout", (void *)&ComAowagieTextTable__Annotations$1 };
  static const J2ObjcClassInfo _ComAowagieTextTable = { "Table", "com.aowagie.text", ptrTable, methods, fields, 7, 0x1, 60, 19, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextTable;
}

@end


#line 233
void ComAowagieTextTable_initWithInt_(ComAowagieTextTable *self, jint columns) {
  ComAowagieTextTable_initWithInt_withInt_(self, columns, 1);
}


#line 233
ComAowagieTextTable *new_ComAowagieTextTable_initWithInt_(jint columns) {
  J2OBJC_NEW_IMPL(ComAowagieTextTable, initWithInt_, columns)
}


#line 233
ComAowagieTextTable *create_ComAowagieTextTable_initWithInt_(jint columns) {
  J2OBJC_CREATE_IMPL(ComAowagieTextTable, initWithInt_, columns)
}


#line 245
void ComAowagieTextTable_initWithInt_withInt_(ComAowagieTextTable *self, jint columns, jint rows) {
  ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(self,
#line 247
  0, 0, 0, 0);
  self->rows_ = new_JavaUtilArrayList_init();
  self->curPosition_ = new_HarmonyJavaAwtPoint_initWithInt_withInt_(
#line 166
  0, 0);
  self->defaultCell_ = new_ComAowagieTextCell_initWithBoolean_(
#line 169
  true);
  self->lastHeaderRow_ =
#line 172
  -1;
  self->alignment_ =
#line 175
  ComAowagieTextElement_ALIGN_CENTER;
  self->width_ =
#line 184
  80;
  self->locked_ =
#line 187
  false;
  self->mTableInserted_ =
#line 193
  false;
  self->autoFillEmptyCells_ =
#line 199
  false;
  self->tableFitsPage_ =
#line 202
  false;
  self->cellsFitPage_ =
#line 205
  false;
  self->offset_ =
#line 208
  JavaLangFloat_NaN;
  self->convert2pdfptable_ =
#line 211
  false;
  self->notAddedYet_ =
#line 217
  true;
  self->complete_ =
#line 223
  true;
  
#line 248
  [self setBorderWithInt:ComAowagieTextRectangle_BOX];
  [self setBorderWidthWithFloat:1];
  [((ComAowagieTextCell *) nil_chk(self->defaultCell_)) setBorderWithInt:ComAowagieTextRectangle_BOX];
  
#line 253
  if (columns <= 0) {
    @throw new_ComAowagieTextBadElementException_initWithNSString_(@"A table should have at least 1 column.");
  }
  self->columns_ = columns;
  
#line 259
  for (jint i = 0; i < rows; i++) {
    [((JavaUtilArrayList *) nil_chk(self->rows_)) addWithId:new_ComAowagieTextRow_initWithInt_(columns)];
  }
  self->curPosition_ = new_HarmonyJavaAwtPoint_initWithInt_withInt_(0, 0);
  
#line 265
  self->widths_ = [IOSFloatArray newArrayWithLength:columns];
  jfloat width = 100.0f / columns;
  for (jint i = 0; i < columns; i++) {
    *IOSFloatArray_GetRef(self->widths_, i) = width;
  }
}


#line 245
ComAowagieTextTable *new_ComAowagieTextTable_initWithInt_withInt_(jint columns, jint rows) {
  J2OBJC_NEW_IMPL(ComAowagieTextTable, initWithInt_withInt_, columns, rows)
}


#line 245
ComAowagieTextTable *create_ComAowagieTextTable_initWithInt_withInt_(jint columns, jint rows) {
  J2OBJC_CREATE_IMPL(ComAowagieTextTable, initWithInt_withInt_, columns, rows)
}


#line 661
void ComAowagieTextTable_addCellWithComAowagieTextCell_withHarmonyJavaAwtPoint_(ComAowagieTextTable *self, ComAowagieTextCell *aCell, HarmonyJavaAwtPoint *aLocation) {
  if (aCell == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"addCell - cell has null-value");
  }
  if (aLocation == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"addCell - point has null-value");
  }
  if ([aCell isTable]) {
    ComAowagieTextTable_insertTableWithComAowagieTextTable_withHarmonyJavaAwtPoint_(self, (ComAowagieTextTable *) cast_chk([((id<JavaUtilIterator>) nil_chk([aCell getElements])) next], [ComAowagieTextTable class]), aLocation);
  }
  
#line 672
  if (aLocation->x_ < 0) {
    @throw new_ComAowagieTextBadElementException_initWithNSString_(@"row coordinate of location must be >= 0");
  }
  if (aLocation->y_ <= 0 && aLocation->y_ > self->columns_) {
    @throw new_ComAowagieTextBadElementException_initWithNSString_(@"column coordinate of location must be >= 0 and < nr of columns");
  }
  if (!ComAowagieTextTable_isValidLocationWithComAowagieTextCell_withHarmonyJavaAwtPoint_(self, aCell, aLocation)) {
    @throw new_ComAowagieTextBadElementException_initWithNSString_(JreStrcat("$ICI$I$I$", @"Adding a cell at the location (", aLocation->x_, ',', aLocation->y_, @") with a colspan of ", [aCell getColspan], @" and a rowspan of ", [aCell getRowspan], @" is illegal (beyond boundaries/overlapping)."));
  }
  
#line 682
  if ([aCell getBorder] == ComAowagieTextRectangle_UNDEFINED) {
    [aCell setBorderWithInt:[((ComAowagieTextCell *) nil_chk(self->defaultCell_)) getBorder]];
  }
  [aCell fill];
  ComAowagieTextTable_placeCellWithJavaUtilArrayList_withComAowagieTextCell_withHarmonyJavaAwtPoint_(self, self->rows_, aCell, aLocation);
  ComAowagieTextTable_setCurrentLocationToNextValidPositionWithHarmonyJavaAwtPoint_(self, aLocation);
}


#line 714
void ComAowagieTextTable_addCellWithComAowagieTextPhrase_withHarmonyJavaAwtPoint_(ComAowagieTextTable *self, ComAowagieTextPhrase *content, HarmonyJavaAwtPoint *location) {
  ComAowagieTextCell *cell = new_ComAowagieTextCell_initWithComAowagieTextElement_(content);
  [cell setBorderWithInt:[((ComAowagieTextCell *) nil_chk(self->defaultCell_)) getBorder]];
  [cell setBorderWidthWithFloat:[((ComAowagieTextCell *) nil_chk(self->defaultCell_)) getBorderWidth]];
  [cell setBorderColorWithHarmonyJavaAwtColor:[((ComAowagieTextCell *) nil_chk(self->defaultCell_)) getBorderColor]];
  [cell setBackgroundColorWithHarmonyJavaAwtColor:[((ComAowagieTextCell *) nil_chk(self->defaultCell_)) getBackgroundColor]];
  [cell setHorizontalAlignmentWithInt:[((ComAowagieTextCell *) nil_chk(self->defaultCell_)) getHorizontalAlignment]];
  [cell setVerticalAlignmentWithInt:[((ComAowagieTextCell *) nil_chk(self->defaultCell_)) getVerticalAlignment]];
  [cell setColspanWithInt:[((ComAowagieTextCell *) nil_chk(self->defaultCell_)) getColspan]];
  [cell setRowspanWithInt:[((ComAowagieTextCell *) nil_chk(self->defaultCell_)) getRowspan]];
  ComAowagieTextTable_addCellWithComAowagieTextCell_withHarmonyJavaAwtPoint_(self, cell, location);
}


#line 747
void ComAowagieTextTable_insertTableWithComAowagieTextTable_withHarmonyJavaAwtPoint_(ComAowagieTextTable *self, ComAowagieTextTable *aTable, HarmonyJavaAwtPoint *aLocation) {
  
#line 749
  if (aTable == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"insertTable - table has null-value");
  }
  if (aLocation == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"insertTable - point has null-value");
  }
  self->mTableInserted_ = true;
  [aTable complete];
  
#line 758
  if (aLocation->y_ > self->columns_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"insertTable -- wrong columnposition(", aLocation->y_, @") of location; max =", self->columns_));
  }
  
#line 762
  jint rowCount = aLocation->x_ + 1 - [((JavaUtilArrayList *) nil_chk(self->rows_)) size];
  jint i = 0;
  if (rowCount > 0) {
    for (; i < rowCount; i++) {
      [((JavaUtilArrayList *) nil_chk(self->rows_)) addWithId:new_ComAowagieTextRow_initWithInt_(self->columns_)];
    }
  }
  
#line 770
  [((ComAowagieTextRow *) nil_chk(((ComAowagieTextRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:aLocation->x_], [ComAowagieTextRow class])))) setElementWithId:aTable withInt:aLocation->y_];
  
#line 772
  ComAowagieTextTable_setCurrentLocationToNextValidPositionWithHarmonyJavaAwtPoint_(self, aLocation);
}


#line 832
id ComAowagieTextTable_getElementWithInt_withInt_(ComAowagieTextTable *self, jint row, jint column) {
  return [((ComAowagieTextRow *) nil_chk(((ComAowagieTextRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:row], [ComAowagieTextRow class])))) getCellWithInt:column];
}


#line 839
void ComAowagieTextTable_mergeInsertedTables(ComAowagieTextTable *self) {
  jint i = 0;
  
#line 840
  jint j = 0;
  IOSFloatArray *lNewWidths = nil;
  IOSIntArray *lDummyWidths = [IOSIntArray newArrayWithLength:self->columns_];
  IOSObjectArray *lDummyColumnWidths = [IOSObjectArray newArrayWithLength:self->columns_ type:IOSClass_floatArray(1)];
  IOSIntArray *lDummyHeights = [IOSIntArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->rows_)) size]];
  JavaUtilArrayList *newRows = nil;
  jboolean isTable = false;
  jint lTotalRows = 0;
  
#line 847
  jint lTotalColumns = 0;
  jint lNewMaxRows = 0;
  
#line 848
  jint lNewMaxColumns = 0;
  
#line 850
  ComAowagieTextTable *lDummyTable = nil;
  
#line 855
  for (j = 0; j < self->columns_; j++) {
    lNewMaxColumns = 1;
    IOSFloatArray *tmpWidths = nil;
    for (i = 0; i < [((JavaUtilArrayList *) nil_chk(self->rows_)) size]; i++) {
      if ([ComAowagieTextTable_class_() isInstance:[((ComAowagieTextRow *) nil_chk(((ComAowagieTextRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:i], [ComAowagieTextRow class])))) getCellWithInt:j]]) {
        isTable = true;
        lDummyTable = (ComAowagieTextTable *) cast_chk([((ComAowagieTextRow *) nil_chk(((ComAowagieTextRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:i], [ComAowagieTextRow class])))) getCellWithInt:j], [ComAowagieTextTable class]);
        if (tmpWidths == nil) {
          tmpWidths = ((ComAowagieTextTable *) nil_chk(lDummyTable))->widths_;
          lNewMaxColumns = ((IOSFloatArray *) nil_chk(tmpWidths))->size_;
        }
        else {
          jint cols = ((HarmonyJavaAwtDimension *) nil_chk([((ComAowagieTextTable *) nil_chk(lDummyTable)) getDimension]))->width_;
          IOSFloatArray *tmpWidthsN = [IOSFloatArray newArrayWithLength:cols * tmpWidths->size_];
          jfloat tpW = 0;
          
#line 869
          jfloat btW = 0;
          
#line 869
          jfloat totW = 0;
          jint tpI = 0;
          
#line 870
          jint btI = 0;
          
#line 870
          jint totI = 0;
          JrePlusAssignFloatF(&tpW, IOSFloatArray_Get(tmpWidths, 0));
          JrePlusAssignFloatF(&btW, IOSFloatArray_Get(nil_chk(lDummyTable->widths_), 0));
          while (tpI < tmpWidths->size_ && btI < cols) {
            if (btW > tpW) {
              *IOSFloatArray_GetRef(tmpWidthsN, totI) = tpW - totW;
              tpI++;
              if (tpI < tmpWidths->size_) {
                JrePlusAssignFloatF(&tpW, IOSFloatArray_Get(tmpWidths, tpI));
              }
            }
            else {
              *IOSFloatArray_GetRef(tmpWidthsN, totI) = btW - totW;
              btI++;
              if (JavaLangMath_absWithFloat_(btW - tpW) < 0.0001) {
                tpI++;
                if (tpI < tmpWidths->size_) {
                  JrePlusAssignFloatF(&tpW, IOSFloatArray_Get(tmpWidths, tpI));
                }
              }
              if (btI < cols) {
                JrePlusAssignFloatF(&btW, IOSFloatArray_Get(nil_chk(lDummyTable->widths_), btI));
              }
            }
            JrePlusAssignFloatF(&totW, IOSFloatArray_Get(tmpWidthsN, totI));
            totI++;
          }
          
#line 906
          tmpWidths = [IOSFloatArray newArrayWithLength:totI];
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tmpWidthsN, 0, tmpWidths, 0, totI);
          lNewMaxColumns = totI;
        }
      }
    }
    
#line 917
    (void) IOSObjectArray_Set(lDummyColumnWidths, j, tmpWidths);
    lTotalColumns += lNewMaxColumns;
    *IOSIntArray_GetRef(lDummyWidths, j) = lNewMaxColumns;
  }
  
#line 923
  for (i = 0; i < [((JavaUtilArrayList *) nil_chk(self->rows_)) size]; i++) {
    lNewMaxRows = 1;
    for (j = 0; j < self->columns_; j++) {
      if ([ComAowagieTextTable_class_() isInstance:[((ComAowagieTextRow *) nil_chk(((ComAowagieTextRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:i], [ComAowagieTextRow class])))) getCellWithInt:j]]) {
        isTable = true;
        lDummyTable = (ComAowagieTextTable *) cast_chk([((ComAowagieTextRow *) nil_chk(((ComAowagieTextRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:i], [ComAowagieTextRow class])))) getCellWithInt:j], [ComAowagieTextTable class]);
        if (((HarmonyJavaAwtDimension *) nil_chk([((ComAowagieTextTable *) nil_chk(lDummyTable)) getDimension]))->height_ > lNewMaxRows) {
          lNewMaxRows = ((HarmonyJavaAwtDimension *) nil_chk([lDummyTable getDimension]))->height_;
        }
      }
    }
    lTotalRows += lNewMaxRows;
    *IOSIntArray_GetRef(lDummyHeights, i) = lNewMaxRows;
  }
  
#line 938
  if (lTotalColumns != self->columns_ || lTotalRows != [((JavaUtilArrayList *) nil_chk(self->rows_)) size] || isTable) {
    
#line 944
    lNewWidths = [IOSFloatArray newArrayWithLength:lTotalColumns];
    jint lDummy = 0;
    for (jint tel = 0; tel < ((IOSFloatArray *) nil_chk(self->widths_))->size_; tel++) {
      if (IOSIntArray_Get(lDummyWidths, tel) != 1) {
        
#line 949
        for (jint tel2 = 0; tel2 < IOSIntArray_Get(lDummyWidths, tel); tel2++) {
          
#line 951
          *IOSFloatArray_GetRef(lNewWidths, lDummy) = IOSFloatArray_Get(self->widths_, tel) * IOSFloatArray_Get(nil_chk(IOSObjectArray_Get(lDummyColumnWidths, tel)), tel2) / 100.0f;
          lDummy++;
        }
      }
      else {
        *IOSFloatArray_GetRef(lNewWidths, lDummy) = IOSFloatArray_Get(self->widths_, tel);
        lDummy++;
      }
    }
    
#line 965
    newRows = new_JavaUtilArrayList_initWithInt_(lTotalRows);
    for (i = 0; i < lTotalRows; i++) {
      [newRows addWithId:new_ComAowagieTextRow_initWithInt_(lTotalColumns)];
    }
    jint lDummyRow = 0;
    
#line 969
    jint lDummyColumn = 0;
    id lDummyElement = nil;
    for (i = 0; i < [((JavaUtilArrayList *) nil_chk(self->rows_)) size]; i++) {
      lDummyColumn = 0;
      lNewMaxRows = 1;
      for (j = 0; j < self->columns_; j++) {
        if ([ComAowagieTextTable_class_() isInstance:[((ComAowagieTextRow *) nil_chk(((ComAowagieTextRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:i], [ComAowagieTextRow class])))) getCellWithInt:j]]) {
          
#line 977
          lDummyTable = (ComAowagieTextTable *) cast_chk([((ComAowagieTextRow *) nil_chk(((ComAowagieTextRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:i], [ComAowagieTextRow class])))) getCellWithInt:j], [ComAowagieTextTable class]);
          
#line 980
          IOSIntArray *colMap = [IOSIntArray newArrayWithLength:((IOSFloatArray *) nil_chk(((ComAowagieTextTable *) nil_chk(lDummyTable))->widths_))->size_ + 1];
          jint cb = 0;
          
#line 981
          jint ct = 0;
          
#line 983
          for (; cb < ((IOSFloatArray *) nil_chk(lDummyTable->widths_))->size_; cb++) {
            *IOSIntArray_GetRef(colMap, cb) = lDummyColumn + ct;
            
#line 986
            jfloat wb;
            wb = IOSFloatArray_Get(lDummyTable->widths_, cb);
            
#line 989
            jfloat wt = 0;
            while (ct < IOSIntArray_Get(lDummyWidths, j)) {
              JrePlusAssignFloatF(&wt, IOSFloatArray_Get(nil_chk(IOSObjectArray_Get(lDummyColumnWidths, j)), ct++));
              if (JavaLangMath_absWithFloat_(wb - wt) < 0.0001) {
                break;
              }
            }
          }
          *IOSIntArray_GetRef(colMap, cb) = lDummyColumn + ct;
          
#line 1000
          for (jint k = 0; k < ((HarmonyJavaAwtDimension *) nil_chk([lDummyTable getDimension]))->height_; k++) {
            for (jint l = 0; l < ((HarmonyJavaAwtDimension *) nil_chk([lDummyTable getDimension]))->width_; l++) {
              lDummyElement = ComAowagieTextTable_getElementWithInt_withInt_(lDummyTable, k, l);
              if (lDummyElement != nil) {
                jint col = lDummyColumn + l;
                
#line 1006
                if ([ComAowagieTextCell_class_() isInstance:lDummyElement]) {
                  ComAowagieTextCell *lDummyC = (ComAowagieTextCell *) cast_chk(lDummyElement, [ComAowagieTextCell class]);
                  
#line 1009
                  col = IOSIntArray_Get(colMap, l);
                  jint ot = IOSIntArray_Get(colMap, l + [lDummyC getColspan]);
                  
#line 1012
                  [lDummyC setColspanWithInt:ot - col];
                }
                
#line 1015
                [((ComAowagieTextRow *) nil_chk(((ComAowagieTextRow *) cast_chk([newRows getWithInt:k + lDummyRow], [ComAowagieTextRow class])))) addElementWithId:lDummyElement withInt:col];
              }
            }
          }
        }
        else {
          
#line 1022
          id aElement = ComAowagieTextTable_getElementWithInt_withInt_(self, i, j);
          
#line 1024
          if ([ComAowagieTextCell_class_() isInstance:aElement]) {
            
#line 1027
            [((ComAowagieTextCell *) nil_chk(((ComAowagieTextCell *) cast_chk(aElement, [ComAowagieTextCell class])))) setRowspanWithInt:[((ComAowagieTextCell *) nil_chk(((ComAowagieTextCell *) cast_chk([((ComAowagieTextRow *) nil_chk(((ComAowagieTextRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:i], [ComAowagieTextRow class])))) getCellWithInt:j], [ComAowagieTextCell class])))) getRowspan] + IOSIntArray_Get(lDummyHeights, i) - 1];
            [((ComAowagieTextCell *) nil_chk(((ComAowagieTextCell *) cast_chk(aElement, [ComAowagieTextCell class])))) setColspanWithInt:[((ComAowagieTextCell *) nil_chk(((ComAowagieTextCell *) cast_chk([((ComAowagieTextRow *) nil_chk(((ComAowagieTextRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:i], [ComAowagieTextRow class])))) getCellWithInt:j], [ComAowagieTextCell class])))) getColspan] + IOSIntArray_Get(lDummyWidths, j) - 1];
            
#line 1031
            ComAowagieTextTable_placeCellWithJavaUtilArrayList_withComAowagieTextCell_withHarmonyJavaAwtPoint_(self, newRows, (ComAowagieTextCell *) cast_chk(aElement, [ComAowagieTextCell class]), new_HarmonyJavaAwtPoint_initWithInt_withInt_(lDummyRow, lDummyColumn));
          }
        }
        lDummyColumn += IOSIntArray_Get(lDummyWidths, j);
      }
      lDummyRow += IOSIntArray_Get(lDummyHeights, i);
    }
    
#line 1040
    self->columns_ = lTotalColumns;
    self->rows_ = newRows;
    self->widths_ = lNewWidths;
  }
}


#line 1049
void ComAowagieTextTable_fillEmptyMatrixCells(ComAowagieTextTable *self) {
  @try {
    for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(self->rows_)) size]; i++) {
      for (jint j = 0; j < self->columns_; j++) {
        if (![((ComAowagieTextRow *) nil_chk(((ComAowagieTextRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:i], [ComAowagieTextRow class])))) isReservedWithInt:j]) {
          ComAowagieTextTable_addCellWithComAowagieTextCell_withHarmonyJavaAwtPoint_(self, self->defaultCell_, new_HarmonyJavaAwtPoint_initWithInt_withInt_(i, j));
        }
      }
    }
  }
  @catch (ComAowagieTextBadElementException *bee) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(bee);
  }
}


#line 1073
jboolean ComAowagieTextTable_isValidLocationWithComAowagieTextCell_withHarmonyJavaAwtPoint_(ComAowagieTextTable *self, ComAowagieTextCell *aCell, HarmonyJavaAwtPoint *aLocation) {
  
#line 1075
  if (((HarmonyJavaAwtPoint *) nil_chk(aLocation))->x_ < [((JavaUtilArrayList *) nil_chk(self->rows_)) size]) {
    
#line 1077
    if (aLocation->y_ + [((ComAowagieTextCell *) nil_chk(aCell)) getColspan] > self->columns_) {
      return false;
    }
    
#line 1081
    jint difx = [((JavaUtilArrayList *) nil_chk(self->rows_)) size] - aLocation->x_ > [aCell getRowspan] ? [aCell getRowspan] : [((JavaUtilArrayList *) nil_chk(self->rows_)) size] - aLocation->x_;
    jint dify = self->columns_ - aLocation->y_ > [aCell getColspan] ? [aCell getColspan] : self->columns_ - aLocation->y_;
    
#line 1084
    for (jint i = aLocation->x_; i < aLocation->x_ + difx; i++) {
      for (jint j = aLocation->y_; j < aLocation->y_ + dify; j++) {
        if ([((ComAowagieTextRow *) nil_chk(((ComAowagieTextRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:i], [ComAowagieTextRow class])))) isReservedWithInt:j]) {
          return false;
        }
      }
    }
  }
  else {
    if (aLocation->y_ + [((ComAowagieTextCell *) nil_chk(aCell)) getColspan] > self->columns_) {
      return false;
    }
  }
  
#line 1098
  return true;
}

void ComAowagieTextTable_assumeTableDefaultsWithComAowagieTextCell_(ComAowagieTextTable *self, ComAowagieTextCell *aCell) {
  
#line 1108
  if ([((ComAowagieTextCell *) nil_chk(aCell)) getBorder] == ComAowagieTextRectangle_UNDEFINED) {
    [aCell setBorderWithInt:[((ComAowagieTextCell *) nil_chk(self->defaultCell_)) getBorder]];
  }
  if ([aCell getBorderWidth] == ComAowagieTextRectangle_UNDEFINED) {
    [aCell setBorderWidthWithFloat:[((ComAowagieTextCell *) nil_chk(self->defaultCell_)) getBorderWidth]];
  }
  if ([aCell getBorderColor] == nil) {
    [aCell setBorderColorWithHarmonyJavaAwtColor:[((ComAowagieTextCell *) nil_chk(self->defaultCell_)) getBorderColor]];
  }
  if ([aCell getBackgroundColor] == nil) {
    [aCell setBackgroundColorWithHarmonyJavaAwtColor:[((ComAowagieTextCell *) nil_chk(self->defaultCell_)) getBackgroundColor]];
  }
  if ([aCell getHorizontalAlignment] == ComAowagieTextElement_ALIGN_UNDEFINED) {
    [aCell setHorizontalAlignmentWithInt:[((ComAowagieTextCell *) nil_chk(self->defaultCell_)) getHorizontalAlignment]];
  }
  if ([aCell getVerticalAlignment] == ComAowagieTextElement_ALIGN_UNDEFINED) {
    [aCell setVerticalAlignmentWithInt:[((ComAowagieTextCell *) nil_chk(self->defaultCell_)) getVerticalAlignment]];
  }
}


#line 1135
void ComAowagieTextTable_placeCellWithJavaUtilArrayList_withComAowagieTextCell_withHarmonyJavaAwtPoint_(ComAowagieTextTable *self, JavaUtilArrayList *someRows, ComAowagieTextCell *aCell, HarmonyJavaAwtPoint *aPosition) {
  jint i;
  ComAowagieTextRow *row = nil;
  jint rowCount = ((HarmonyJavaAwtPoint *) nil_chk(aPosition))->x_ + [((ComAowagieTextCell *) nil_chk(aCell)) getRowspan] - [((JavaUtilArrayList *) nil_chk(someRows)) size];
  ComAowagieTextTable_assumeTableDefaultsWithComAowagieTextCell_(self, aCell);
  if (aPosition->x_ + [aCell getRowspan] > [someRows size]) {
    for (i = 0; i < rowCount; i++) {
      row = new_ComAowagieTextRow_initWithInt_(self->columns_);
      [someRows addWithId:row];
    }
  }
  
#line 1148
  for (i = aPosition->x_ + 1; i < aPosition->x_ + [aCell getRowspan]; i++) {
    if (![((ComAowagieTextRow *) nil_chk(((ComAowagieTextRow *) cast_chk([someRows getWithInt:i], [ComAowagieTextRow class])))) reserveWithInt:aPosition->y_ withInt:[aCell getColspan]]) {
      
#line 1152
      @throw new_JavaLangRuntimeException_initWithNSString_(@"addCell - error in reserve");
    }
  }
  row = (ComAowagieTextRow *) cast_chk([someRows getWithInt:aPosition->x_], [ComAowagieTextRow class]);
  [((ComAowagieTextRow *) nil_chk(row)) addElementWithId:aCell withInt:aPosition->y_];
}


#line 1164
void ComAowagieTextTable_setCurrentLocationToNextValidPositionWithHarmonyJavaAwtPoint_(ComAowagieTextTable *self, HarmonyJavaAwtPoint *aLocation) {
  
#line 1166
  jint i;
  
#line 1166
  jint j;
  i = ((HarmonyJavaAwtPoint *) nil_chk(aLocation))->x_;
  j = aLocation->y_;
  do {
    if (j + 1 == self->columns_) {
      i++;
      j = 0;
    }
    else {
      j++;
    }
  }
  while (
#line 1179
  i < [((JavaUtilArrayList *) nil_chk(self->rows_)) size] && j < self->columns_ && [((ComAowagieTextRow *) nil_chk(((ComAowagieTextRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:i], [ComAowagieTextRow class])))) isReservedWithInt:j]);
  
#line 1181
  self->curPosition_ = new_HarmonyJavaAwtPoint_initWithInt_withInt_(i, j);
}

IOSObjectArray *ComAowagieTextTable__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ComAowagieTextTable__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextTable)
