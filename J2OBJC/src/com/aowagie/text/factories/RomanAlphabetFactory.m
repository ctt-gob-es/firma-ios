//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/factories/RomanAlphabetFactory.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/factories/RomanAlphabetFactory.h"
#include "java/lang/NumberFormatException.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/factories/RomanAlphabetFactory must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextFactoriesRomanAlphabetFactory ()

/*!
 @brief Translates a positive integer (not equal to zero)
  into a String using the letters 'a' to 'z';
  1 = a, 2 = b, ..., 26 = z, 27 = aa, 28 = ab,...
 @param index Index.
 @return Equivalent string.
 */
+ (NSString *)getStringWithInt:(jint)index;

/*!
 @brief Translates a positive integer (not equal to zero)
  into a String using the letters 'a' to 'z';
  1 = a, 2 = b, ..., 26 = z, 27 = aa, 28 = ab,...
 @param index Index.
 @return Equivalent string.
 */
+ (NSString *)getLowerCaseStringWithInt:(jint)index;

/*!
 @brief Translates a positive integer (not equal to zero)
  into a String using the letters 'A' to 'Z';
  1 = A, 2 = B, ..., 26 = Z, 27 = AA, 28 = AB,...
 @param index Index.
 @return Equivalent string.
 */
+ (NSString *)getUpperCaseStringWithInt:(jint)index;

@end

__attribute__((unused)) static NSString *ComAowagieTextFactoriesRomanAlphabetFactory_getStringWithInt_(jint index);

__attribute__((unused)) static NSString *ComAowagieTextFactoriesRomanAlphabetFactory_getLowerCaseStringWithInt_(jint index);

__attribute__((unused)) static NSString *ComAowagieTextFactoriesRomanAlphabetFactory_getUpperCaseStringWithInt_(jint index);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/factories/RomanAlphabetFactory.java"


#line 57
@implementation ComAowagieTextFactoriesRomanAlphabetFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 57
- (instancetype)init {
  ComAowagieTextFactoriesRomanAlphabetFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 66
+ (NSString *)getStringWithInt:(jint)index {
  return ComAowagieTextFactoriesRomanAlphabetFactory_getStringWithInt_(index);
}


#line 99
+ (NSString *)getLowerCaseStringWithInt:(jint)index {
  return ComAowagieTextFactoriesRomanAlphabetFactory_getLowerCaseStringWithInt_(index);
}


#line 110
+ (NSString *)getUpperCaseStringWithInt:(jint)index {
  return ComAowagieTextFactoriesRomanAlphabetFactory_getUpperCaseStringWithInt_(index);
}


#line 123
+ (NSString *)getStringWithInt:(jint)index
                   withBoolean:(jboolean)lowercase {
  return ComAowagieTextFactoriesRomanAlphabetFactory_getStringWithInt_withBoolean_(index, lowercase);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1a, 3, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 0, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getStringWithInt:);
  methods[2].selector = @selector(getLowerCaseStringWithInt:);
  methods[3].selector = @selector(getUpperCaseStringWithInt:);
  methods[4].selector = @selector(getStringWithInt:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getString", "I", "getLowerCaseString", "getUpperCaseString", "IZ" };
  static const J2ObjcClassInfo _ComAowagieTextFactoriesRomanAlphabetFactory = { "RomanAlphabetFactory", "com.aowagie.text.factories", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextFactoriesRomanAlphabetFactory;
}

@end


#line 57
void ComAowagieTextFactoriesRomanAlphabetFactory_init(ComAowagieTextFactoriesRomanAlphabetFactory *self) {
  NSObject_init(self);
}


#line 57
ComAowagieTextFactoriesRomanAlphabetFactory *new_ComAowagieTextFactoriesRomanAlphabetFactory_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextFactoriesRomanAlphabetFactory, init)
}


#line 57
ComAowagieTextFactoriesRomanAlphabetFactory *create_ComAowagieTextFactoriesRomanAlphabetFactory_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextFactoriesRomanAlphabetFactory, init)
}


#line 66
NSString *ComAowagieTextFactoriesRomanAlphabetFactory_getStringWithInt_(jint index) {
  ComAowagieTextFactoriesRomanAlphabetFactory_initialize();
  
#line 67
  if (index < 1) {
    @throw new_JavaLangNumberFormatException_initWithNSString_(
#line 69
    @"You can't translate a negative number into an alphabetical value.");
  }
  
#line 72
  index--;
  jint bytes = 1;
  jint start = 0;
  jint symbols = 26;
  while (index >= symbols + start) {
    bytes++;
    start += symbols;
    symbols *= 26;
  }
  
#line 82
  jint c = index - start;
  IOSCharArray *value = [IOSCharArray newArrayWithLength:bytes];
  while (bytes > 0) {
    *IOSCharArray_GetRef(value, --bytes) = (jchar) ('a' + JreIntMod(c, 26));
    c /= 26;
  }
  
#line 89
  return [NSString java_stringWithCharacters:value];
}

NSString *ComAowagieTextFactoriesRomanAlphabetFactory_getLowerCaseStringWithInt_(jint index) {
  ComAowagieTextFactoriesRomanAlphabetFactory_initialize();
  
#line 100
  return ComAowagieTextFactoriesRomanAlphabetFactory_getStringWithInt_(index);
}


#line 110
NSString *ComAowagieTextFactoriesRomanAlphabetFactory_getUpperCaseStringWithInt_(jint index) {
  ComAowagieTextFactoriesRomanAlphabetFactory_initialize();
  
#line 111
  return [((NSString *) nil_chk(ComAowagieTextFactoriesRomanAlphabetFactory_getStringWithInt_(index))) uppercaseString];
}


#line 123
NSString *ComAowagieTextFactoriesRomanAlphabetFactory_getStringWithInt_withBoolean_(jint index, jboolean lowercase) {
  ComAowagieTextFactoriesRomanAlphabetFactory_initialize();
  
#line 124
  if (lowercase) {
    return ComAowagieTextFactoriesRomanAlphabetFactory_getLowerCaseStringWithInt_(index);
  }
  return ComAowagieTextFactoriesRomanAlphabetFactory_getUpperCaseStringWithInt_(index);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextFactoriesRomanAlphabetFactory)
