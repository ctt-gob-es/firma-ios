//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/Table.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComAowagieTextTable")
#ifdef RESTRICT_ComAowagieTextTable
#define INCLUDE_ALL_ComAowagieTextTable 0
#else
#define INCLUDE_ALL_ComAowagieTextTable 1
#endif
#undef RESTRICT_ComAowagieTextTable

#if !defined (ComAowagieTextTable_) && (INCLUDE_ALL_ComAowagieTextTable || defined(INCLUDE_ComAowagieTextTable))
#define ComAowagieTextTable_

#define RESTRICT_ComAowagieTextRectangle 1
#define INCLUDE_ComAowagieTextRectangle 1
#include "com/aowagie/text/Rectangle.h"

#define RESTRICT_ComAowagieTextLargeElement 1
#define INCLUDE_ComAowagieTextLargeElement 1
#include "com/aowagie/text/LargeElement.h"

@class ComAowagieTextCell;
@class ComAowagieTextPdfPdfPTable;
@class HarmonyJavaAwtDimension;
@class IOSFloatArray;
@class IOSIntArray;
@class JavaUtilArrayList;
@protocol ComAowagieTextElementListener;
@protocol JavaUtilIterator;

/*!
 @brief A <CODE>Table</CODE> is a <CODE>Rectangle</CODE> that contains <CODE>Cell</CODE>s,
  ordered in some kind of matrix.
 <P>
  Tables that span multiple pages are cut into different parts automatically.
  If you want a table header to be repeated on every page, you may not forget to
  mark the end of the header section by using the method <CODE>endHeaders()</CODE>.
  <P>
  The matrix of a table is not necessarily an m x n-matrix. It can contain holes
  or cells that are bigger than the unit. Believe me or not, but it took some serious
  thinking to make this as user friendly as possible. I hope you will find the result
  quite simple (I love simple solutions, especially for complex problems).
  I didn't want it to be something as complex as the Java <CODE>GridBagLayout</CODE>.
  <P>
  Example: 
 <BLOCKQUOTE>@code

  // Remark: You MUST know the number of columns when constructing a Table.
  //         The number of rows is not important. 
  <STRONG>Table table = new Table(3);</STRONG>
   <STRONG>table.setBorderWidth(1);</STRONG>
   <STRONG>table.setBorderColor(new Color(0, 0, 255));</STRONG>
   <STRONG>table.setPadding(5);</STRONG>
   <STRONG>table.setSpacing(5);</STRONG>
  Cell cell = new Cell("header");
  cell.setHeader(true);
  cell.setColspan(3); 
  <STRONG>table.addCell(cell);</STRONG>
   <STRONG>table.endHeaders();</STRONG>
  cell = new Cell("example cell with colspan 1 and rowspan 2");
  cell.setRowspan(2);
  cell.setBorderColor(new Color(255, 0, 0)); 
  <STRONG>table.addCell(cell);</STRONG>
   <STRONG>table.addCell("1.1");</STRONG>
   <STRONG>table.addCell("2.1");</STRONG>
   <STRONG>table.addCell("1.2");</STRONG>
   <STRONG>table.addCell("2.2");</STRONG>
   <STRONG>table.addCell("cell test1");</STRONG>
  cell = new Cell("big cell");
  cell.setRowspan(2);
  cell.setColspan(2); 
  <STRONG>table.addCell(cell);</STRONG>
   <STRONG>table.addCell("cell test2");</STRONG>
   
@endcode</BLOCKQUOTE>
  The result of this code is a table: 
 <code><TABLE ALIGN="Center" BORDER="1" BORDERCOLOR="#0000ff" CELLPADDING="5" CELLSPACING="5">
               <TR ALIGN="Left" VALIGN="Left">
                       <TH ALIGN="Left" COLSPAN="3" VALIGN="Left">
                               header
                       </TH>
               </TR>
               <TR ALIGN="Left" VALIGN="Left">
                       <TD ALIGN="Left" BORDERCOLOR="#ff0000" ROWSPAN="2" VALIGN="Left">
                               example cell with colspan 1 and rowspan 2
                       </TD>
                       <TD ALIGN="Left" VALIGN="Left">
                               1.1
                       </TD>
                       <TD ALIGN="Left" VALIGN="Left">
                               2.1
                       </TD>
               </TR>
               <TR ALIGN="Left" VALIGN="Left">
                       <TD ALIGN="Left" VALIGN="Left">
                               1.2
                       </TD>
                       <TD ALIGN="Left" VALIGN="Left">
                               2.2
                       </TD>
               </TR>
               <TR ALIGN="Left" VALIGN="Left">
                       <TD ALIGN="Left" VALIGN="Left">
                               cell test1
                       </TD>
                       <TD ALIGN="Left" COLSPAN="2" ROWSPAN="2" VALIGN="Left">
                               big cell
                       </TD>
               </TR>
               <TR ALIGN="Left" VALIGN="Left">
                       <TD ALIGN="Left" VALIGN="Left">
                               cell test2
                       </TD>
               </TR>
       </TABLE></code>
 - seealso: Rectangle
 - seealso: Element
 - seealso: Row
 - seealso: Cell
 */
@interface ComAowagieTextTable : ComAowagieTextRectangle < ComAowagieTextLargeElement >

#pragma mark Public

/*!
 @brief Constructs a <CODE>Table</CODE> with a certain number of columns.
 @param columns The number of columns in the table
 @throw BadElementExceptionif the creator was called with less than 1 column
 */
- (instancetype)initWithInt:(jint)columns;

/*!
 @brief Adds a <CODE>Cell</CODE> to the <CODE>Table</CODE>.
 @param cell a  <CODE> Cell </CODE>
 */
- (void)addCellWithComAowagieTextCell:(ComAowagieTextCell *)cell;

/*!
 @brief Gives you the possibility to add columns.
 @param aColumns the number of columns to add
 */
- (void)addColumnsWithInt:(jint)aColumns;

/*!
 @brief Will fill empty cells with valid blank <CODE>Cell</CODE>s
 */
- (void)complete;

/*!
 @since iText 2.0.8
 - seealso: com.aowagie.text.LargeElement#flushContent()
 */
- (void)flushContent;

/*!
 @brief Gets the horizontal alignment.
 @return a value
 */
- (jint)getAlignment;

/*!
 @brief Gets all the chunks in this element.
 @return an <CODE>ArrayList</CODE>
 */
- (JavaUtilArrayList *)getChunks;

/*!
 @brief Gets the number of columns.
 @return a value
 */
- (jint)getColumns;

/*!
 @brief Gets the default layout of the Table.
 @return a cell with all the defaults
 @since 2.0.7
 */
- (ComAowagieTextCell *)getDefaultCell;

/*!
 @brief Gets the default layout of the Table.
 @return a cell with all the defaults
 */
- (ComAowagieTextCell *)getDefaultLayout;

/*!
 @brief Gets the dimension of this table
 @return dimension
 */
- (HarmonyJavaAwtDimension *)getDimension;

/*!
 @brief Gets the last number of the rows that contain headers.
 @return a rownumber
 */
- (jint)getLastHeaderRow;

/*!
 @brief Gets the offset of this table.
 @return the space between this table and the previous element.
 */
- (jfloat)getOffset;

/*!
 @brief Gets the cellpadding.
 @return a value
 */
- (jfloat)getPadding;

/*!
 @brief Gets the proportional widths of the columns in this <CODE>Table</CODE>.
 @return the proportional widths of the columns in this <CODE>Table</CODE>
 */
- (IOSFloatArray *)getProportionalWidths;

/*!
 @brief Gets the cellspacing.
 @return a value
 */
- (jfloat)getSpacing;

/*!
 @brief Gets the table width (a percentage).
 @return the table width
 */
- (jfloat)getWidth;

/*!
 @brief Gets an array with the positions of the borders between every column.
 <P>
  This method translates the widths expressed in percentages into the
  x-coordinate of the borders of the columns on a real document.
 @param left this is the position of the first border at the left (cellpadding not included)
 @param totalWidth this is the space between the first border at the left                                               and the last border at the right (cellpadding not included)
 @return an array with border positions
 */
- (IOSFloatArray *)getWidthsWithFloat:(jfloat)left
                            withFloat:(jfloat)totalWidth;

/*!
 @brief Checks if the cells of this <CODE>Table</CODE> have to fit a page.
 @return true if the cells may not be split
 */
- (jboolean)isCellsFitPage;

/*!
 @since iText 2.0.8
 - seealso: com.aowagie.text.LargeElement#isComplete()
 */
- (jboolean)isComplete;

/*!
 @brief Method to check if the Table should be converted to a PdfPTable or not.
 @return false if the table should be handled the old fashioned way.
 */
- (jboolean)isConvert2pdfptable;

/*!
 @return the locked
 */
- (jboolean)isLocked;

/*!
 - seealso: com.aowagie.text.Element#isNestable()
 @since iText 2.0.8
 */
- (jboolean)isNestable;

/*!
 @brief Indicates if this is the first time the section is added.
 @since iText2.0.8
 @return true if the section wasn't added yet
 */
- (jboolean)isNotAddedYet;

/*!
 @brief Checks if this <CODE>Table</CODE> has to fit a page.
 @return true if the table may not be split
 */
- (jboolean)isTableFitsPage;

/*!
 @brief Gets an <CODE>Iterator</CODE> of all the <CODE>Row</CODE>s.
 @return an <CODE>Iterator</CODE>
 */
- (id<JavaUtilIterator>)iterator;

/*!
 @brief Processes the element by adding it (or the different parts) to an 
 <CODE>ElementListener</CODE>.
 @param listener an  <CODE> ElementListener </CODE>
 @return <CODE>true</CODE> if the element was processed successfully
 */
- (jboolean)processWithComAowagieTextElementListener:(id<ComAowagieTextElementListener>)listener;

/*!
 @brief Sets the horizontal alignment.
 @param value the new value
 */
- (void)setAlignmentWithInt:(jint)value;

/*!
 @brief Sets the alignment of this paragraph.
 @param alignment the new alignment as a  <CODE> String </CODE>
 */
- (void)setAlignmentWithNSString:(NSString *)alignment;

/*!
 @brief Enables/disables automatic insertion of empty cells before table is rendered.
 (default = false)
  As some people may want to create a table, fill only a couple of the cells and don't bother with
  investigating which empty ones need to be added, this default behavior may be very welcome.
  Disabling is recommended to increase speed. (empty cells should be added through extra code then)
 @param aDoAutoFill enable/disable autofill
 */
- (void)setAutoFillEmptyCellsWithBoolean:(jboolean)aDoAutoFill;

/*!
 @brief Allows you to control when a page break occurs.
 <P>
  When a cell doesn't fit a page, it is split in two parts.
  If you want to avoid this, you should set the <VAR>cellsFitPage</VAR> value to true.
 @param fitPage enter true if you don't want to split cells
 */
- (void)setCellsFitPageWithBoolean:(jboolean)fitPage;

/*!
 @since iText 2.0.8
 - seealso: com.aowagie.text.LargeElement#setComplete(boolean)
 */
- (void)setCompleteWithBoolean:(jboolean)complete;

/*!
 @brief If set to true, iText will try to convert the Table to a PdfPTable.
 @param convert2pdfptable true if you want iText to try to convert the Table to a PdfPTable
 */
- (void)setConvert2pdfptableWithBoolean:(jboolean)convert2pdfptable;

/*!
 @brief Sets the default layout of the Table to
  the provided Cell
 @param value a cell with all the defaults
 @since 2.0.7
 */
- (void)setDefaultCellWithComAowagieTextCell:(ComAowagieTextCell *)value;

/*!
 @brief Sets the default layout of the Table to
  the provided Cell
 @param value a cell with all the defaults
 */
- (void)setDefaultLayoutWithComAowagieTextCell:(ComAowagieTextCell *)value;

/*!
 @brief Sets the horizontal alignment.
 @param value the new value
 */
- (void)setLastHeaderRowWithInt:(jint)value;

/*!
 @param locked the locked to set
 */
- (void)setLockedWithBoolean:(jboolean)locked;

/*!
 @brief Sets the indication if the section was already added to
  the document.
 @since iText2.0.8
 @param notAddedYet No added yet
 */
- (void)setNotAddedYetWithBoolean:(jboolean)notAddedYet;

/*!
 @brief Sets the offset of this table.
 Normally a newline is added before you add a Table object.
  This newline uses the current leading.
  If you want to control the space between the table and the previous
  element yourself, you have to set the offset of this table.
 @param offset the space between this table and the previous object.
 */
- (void)setOffsetWithFloat:(jfloat)offset;

/*!
 @brief Sets the cellpadding.
 @param value the new value
 */
- (void)setPaddingWithFloat:(jfloat)value;

/*!
 @brief Sets the cellspacing.
 @param value the new value
 */
- (void)setSpacingWithFloat:(jfloat)value;

/*!
 @brief Allows you to control when a page break occurs.
 <P>
  When a table doesn't fit a page, it is split in two parts.
  If you want to avoid this, you should set the <VAR>tableFitsPage</VAR> value to true.
 @param fitPage enter true if you don't want to split cells
 */
- (void)setTableFitsPageWithBoolean:(jboolean)fitPage;

/*!
 @brief Sets the width of this table (in percentage of the available space).
 @param width the width
 */
- (void)setWidthWithFloat:(jfloat)width;

/*!
 @brief Sets the widths of the different columns (percentages).
 <P>
  You can give up relative values of borderwidths.
  The sum of these values will be considered 100%.
  The values will be recalculated as percentages of this sum. 
 <P>
  example: 
 <BLOCKQUOTE>@code

  float[] widths = {2, 1, 1}; 
  <STRONG>table.setWidths(widths)</STRONG>
   
@endcode</BLOCKQUOTE>
  The widths will be: a width of 50% for the first column,
  25% for the second and third column.
 @param widths an array with values
 @throw BadElementExceptionon error
 */
- (void)setWidthsWithFloatArray:(IOSFloatArray *)widths;

/*!
 @brief Sets the widths of the different columns (percentages).
 <P>
  You can give up relative values of borderwidths.
  The sum of these values will be considered 100%.
  The values will be recalculated as percentages of this sum.
 @param widths an array with values
 @throw DocumentExceptionon error
 */
- (void)setWidthsWithIntArray:(IOSIntArray *)widths;

/*!
 @brief Gets the number of rows in this <CODE>Table</CODE>.
 @return the number of rows in this <CODE>Table</CODE>
 */
- (jint)size;

/*!
 @brief Gets the type of the text element.
 @return a type
 */
- (jint)type;

#pragma mark Package-Private

/*!
 @brief Create a PdfPTable based on this Table object.
 @return a PdfPTable object
 @throw BadElementExceptionon error
 */
- (ComAowagieTextPdfPdfPTable *)createPdfPTable;

/*!
 @brief To put a table within the existing table at the current position
  generateTable will of course re-arrange the widths of the columns.
 @param aTable the table you want to insert
 */
- (void)insertTableWithComAowagieTextTable:(ComAowagieTextTable *)aTable;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithComAowagieTextRectangle:(ComAowagieTextRectangle *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithFloat:(jfloat)arg0
                    withFloat:(jfloat)arg1 NS_UNAVAILABLE;

- (instancetype)initWithFloat:(jfloat)arg0
                    withFloat:(jfloat)arg1
                    withFloat:(jfloat)arg2
                    withFloat:(jfloat)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextTable)

FOUNDATION_EXPORT void ComAowagieTextTable_initWithInt_(ComAowagieTextTable *self, jint columns);

FOUNDATION_EXPORT ComAowagieTextTable *new_ComAowagieTextTable_initWithInt_(jint columns) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextTable *create_ComAowagieTextTable_initWithInt_(jint columns);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextTable)

#endif

#pragma pop_macro("INCLUDE_ALL_ComAowagieTextTable")
