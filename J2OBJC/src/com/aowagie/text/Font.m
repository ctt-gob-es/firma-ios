//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/Font.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/ExceptionConverter.h"
#include "com/aowagie/text/Font.h"
#include "com/aowagie/text/FontFactory.h"
#include "com/aowagie/text/html/Markup.h"
#include "com/aowagie/text/pdf/BaseFont.h"
#include "harmony/java/awt/Color.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Exception.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/Font must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextFont () {
 @public
  /*!
   @brief the value of the fontfamily.
   */
  jint family_;
  /*!
   @brief the value of the fontsize.
   */
  jfloat size_;
  /*!
   @brief the value of the style.
   */
  jint style_;
  /*!
   @brief the value of the color.
   */
  HarmonyJavaAwtColor *color_;
  /*!
   @brief the external font
   */
  ComAowagieTextPdfBaseFont *baseFont_;
}

/*!
 @brief Translates a <CODE>String</CODE> -value of a certain family into the
  index that is used for this family in this class.
 @param family A 
  <CODE> String </CODE>  representing a certain font-family
 @return the corresponding index
 */
+ (jint)getFamilyIndexWithNSString:(NSString *)family;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextFont, color_, HarmonyJavaAwtColor *)
J2OBJC_FIELD_SETTER(ComAowagieTextFont, baseFont_, ComAowagieTextPdfBaseFont *)

/*!
 @brief this is a possible style.
 */
inline jint ComAowagieTextFont_get_UNDERLINE(void);
#define ComAowagieTextFont_UNDERLINE 4
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextFont, UNDERLINE, jint)

/*!
 @brief this is a possible style.
 */
inline jint ComAowagieTextFont_get_STRIKETHRU(void);
#define ComAowagieTextFont_STRIKETHRU 8
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextFont, STRIKETHRU, jint)

__attribute__((unused)) static jint ComAowagieTextFont_getFamilyIndexWithNSString_(NSString *family);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/Font.java"


#line 72
@implementation ComAowagieTextFont


#line 144
- (instancetype)initWithComAowagieTextFont:(ComAowagieTextFont *)other {
  ComAowagieTextFont_initWithComAowagieTextFont_(self, other);
  return self;
}


#line 165
- (instancetype)initWithInt:(jint)family
                  withFloat:(jfloat)size
                    withInt:(jint)style
    withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color {
  ComAowagieTextFont_initWithInt_withFloat_withInt_withHarmonyJavaAwtColor_(self, family, size, style, color);
  return self;
}


#line 185
- (instancetype)initWithComAowagieTextPdfBaseFont:(ComAowagieTextPdfBaseFont *)bf
                                        withFloat:(jfloat)size
                                          withInt:(jint)style
                          withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color {
  ComAowagieTextFont_initWithComAowagieTextPdfBaseFont_withFloat_withInt_withHarmonyJavaAwtColor_(self, bf, size, style, color);
  return self;
}


#line 198
- (instancetype)initWithComAowagieTextPdfBaseFont:(ComAowagieTextPdfBaseFont *)bf {
  ComAowagieTextFont_initWithComAowagieTextPdfBaseFont_(self, bf);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 206
- (instancetype)init {
  ComAowagieTextFont_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 219
- (jint)compareToWithId:(id)object {
  
#line 221
  if (object == nil) {
    return -1;
  }
  ComAowagieTextFont *font;
  @try {
    font = (ComAowagieTextFont *) cast_chk(object, [ComAowagieTextFont class]);
    if (self->baseFont_ != nil && ![self->baseFont_ isEqual:[font getBaseFont]]) {
      return -2;
    }
    if (self->family_ != [font getFamily]) {
      return 1;
    }
    if (self->size_ != [font getSize]) {
      return 2;
    }
    if (self->style_ != [font getStyle]) {
      return 3;
    }
    if (self->color_ == nil) {
      if (font->color_ == nil) {
        return 0;
      }
      return 4;
    }
    if (font->color_ == nil) {
      return 4;
    }
    if ([self->color_ isEqual:[font getColor]]) {
      return 0;
    }
    return 4;
  }
  @catch (
#line 252
  JavaLangClassCastException *cce) {
    return -3;
  }
}


#line 264
- (jint)getFamily {
  return self->family_;
}


#line 273
- (NSString *)getFamilyname {
  NSString *tmp = @"unknown";
  switch ([self getFamily]) {
    case ComAowagieTextFont_COURIER:
    return ComAowagieTextFontFactory_COURIER;
    case ComAowagieTextFont_HELVETICA:
    return ComAowagieTextFontFactory_HELVETICA;
    case ComAowagieTextFont_TIMES_ROMAN:
    return ComAowagieTextFontFactory_TIMES_ROMAN;
    case ComAowagieTextFont_SYMBOL:
    return ComAowagieTextFontFactory_SYMBOL;
    case ComAowagieTextFont_ZAPFDINGBATS:
    return ComAowagieTextFontFactory_ZAPFDINGBATS;
    default:
    if (self->baseFont_ != nil) {
      IOSObjectArray *names = [self->baseFont_ getFamilyFontName];
      {
        IOSObjectArray *a__ =
#line 289
        names;
        IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        IOSObjectArray * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          IOSObjectArray *name = *b__++;
          
#line 290
          if ([@"0" isEqual:IOSObjectArray_Get(nil_chk(name), 2)]) {
            return IOSObjectArray_Get(name, 3);
          }
          if ([@"1033" isEqual:IOSObjectArray_Get(name, 2)]) {
            tmp = IOSObjectArray_Get(name, 3);
          }
          if ([@"" isEqual:IOSObjectArray_Get(name, 2)]) {
            tmp = IOSObjectArray_Get(name, 3);
          }
        }
      }
    }
  }
  
#line 302
  return tmp;
}


#line 312
- (void)setFamilyWithNSString:(NSString *)family {
  self->family_ = ComAowagieTextFont_getFamilyIndexWithNSString_(family);
}


#line 324
+ (jint)getFamilyIndexWithNSString:(NSString *)family {
  return ComAowagieTextFont_getFamilyIndexWithNSString_(family);
}


#line 350
- (jfloat)getSize {
  return self->size_;
}


#line 361
- (jfloat)getCalculatedSize {
  jfloat s = self->size_;
  if (s == ComAowagieTextFont_UNDEFINED) {
    s = ComAowagieTextFont_DEFAULTSIZE;
  }
  return s;
}


#line 376
- (jfloat)getCalculatedLeadingWithFloat:(jfloat)linespacing {
  return linespacing * [self getCalculatedSize];
}


#line 386
- (void)setSizeWithFloat:(jfloat)size {
  self->size_ = size;
}


#line 397
- (jint)getStyle {
  return self->style_;
}


#line 408
- (jint)getCalculatedStyle {
  jint style = self->style_;
  if (style == ComAowagieTextFont_UNDEFINED) {
    style = ComAowagieTextFont_NORMAL;
  }
  if (self->baseFont_ != nil) {
    return style;
  }
  if (self->family_ == ComAowagieTextFont_SYMBOL || self->family_ == ComAowagieTextFont_ZAPFDINGBATS) {
    return style;
  }
  else {
    
#line 419
    return style & ~ComAowagieTextFont_BOLDITALIC;
  }
}


#line 428
- (jboolean)isBold {
  if (self->style_ == ComAowagieTextFont_UNDEFINED) {
    return false;
  }
  return (self->style_ & ComAowagieTextFont_BOLD) == ComAowagieTextFont_BOLD;
}


#line 440
- (jboolean)isItalic {
  if (self->style_ == ComAowagieTextFont_UNDEFINED) {
    return false;
  }
  return (self->style_ & ComAowagieTextFont_ITALIC) == ComAowagieTextFont_ITALIC;
}


#line 452
- (jboolean)isUnderlined {
  if (self->style_ == ComAowagieTextFont_UNDEFINED) {
    return false;
  }
  return (self->style_ & ComAowagieTextFont_UNDERLINE) == ComAowagieTextFont_UNDERLINE;
}


#line 464
- (jboolean)isStrikethru {
  if (self->style_ == ComAowagieTextFont_UNDEFINED) {
    return false;
  }
  return (self->style_ & ComAowagieTextFont_STRIKETHRU) == ComAowagieTextFont_STRIKETHRU;
}


#line 477
- (void)setStyleWithInt:(jint)style {
  self->style_ = style;
}


#line 488
- (void)setStyleWithNSString:(NSString *)style {
  if (self->style_ == ComAowagieTextFont_UNDEFINED) {
    self->style_ = ComAowagieTextFont_NORMAL;
  }
  self->style_ |= ComAowagieTextFont_getStyleValueWithNSString_(style);
}


#line 503
+ (jint)getStyleValueWithNSString:(NSString *)style {
  return ComAowagieTextFont_getStyleValueWithNSString_(style);
}


#line 533
- (HarmonyJavaAwtColor *)getColor {
  return self->color_;
}


#line 544
- (void)setColorWithHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color {
  self->color_ = color;
}


#line 555
- (ComAowagieTextPdfBaseFont *)getBaseFont {
  return self->baseFont_;
}


#line 569
- (ComAowagieTextPdfBaseFont *)getCalculatedBaseFontWithBoolean:(jboolean)specialEncoding {
  if (self->baseFont_ != nil) {
    return self->baseFont_;
  }
  jint style = self->style_;
  if (style == ComAowagieTextFont_UNDEFINED) {
    style = ComAowagieTextFont_NORMAL;
  }
  NSString *fontName = ComAowagieTextPdfBaseFont_HELVETICA;
  NSString *encoding = ComAowagieTextPdfBaseFont_WINANSI;
  ComAowagieTextPdfBaseFont *cfont = nil;
  switch (self->family_) {
    case ComAowagieTextFont_COURIER:
    switch (style & ComAowagieTextFont_BOLDITALIC) {
      case ComAowagieTextFont_BOLD:
      fontName = ComAowagieTextPdfBaseFont_COURIER_BOLD;
      break;
      case ComAowagieTextFont_ITALIC:
      fontName = ComAowagieTextPdfBaseFont_COURIER_OBLIQUE;
      break;
      case ComAowagieTextFont_BOLDITALIC:
      fontName = ComAowagieTextPdfBaseFont_COURIER_BOLDOBLIQUE;
      break;
      default:
      
#line 594
      fontName = ComAowagieTextPdfBaseFont_COURIER;
      break;
    }
    break;
    case ComAowagieTextFont_TIMES_ROMAN:
    switch (style & ComAowagieTextFont_BOLDITALIC) {
      case ComAowagieTextFont_BOLD:
      fontName = ComAowagieTextPdfBaseFont_TIMES_BOLD;
      break;
      case ComAowagieTextFont_ITALIC:
      fontName = ComAowagieTextPdfBaseFont_TIMES_ITALIC;
      break;
      case ComAowagieTextFont_BOLDITALIC:
      fontName = ComAowagieTextPdfBaseFont_TIMES_BOLDITALIC;
      break;
      default:
      case ComAowagieTextFont_NORMAL:
      fontName = ComAowagieTextPdfBaseFont_TIMES_ROMAN;
      break;
    }
    break;
    case ComAowagieTextFont_SYMBOL:
    fontName = ComAowagieTextPdfBaseFont_SYMBOL;
    if (specialEncoding) {
      encoding = ComAowagieTextPdfBaseFont_SYMBOL;
    }
    break;
    case ComAowagieTextFont_ZAPFDINGBATS:
    fontName = ComAowagieTextPdfBaseFont_ZAPFDINGBATS;
    if (specialEncoding) {
      encoding = ComAowagieTextPdfBaseFont_ZAPFDINGBATS;
    }
    break;
    default:
    case ComAowagieTextFont_HELVETICA:
    switch (style & ComAowagieTextFont_BOLDITALIC) {
      case ComAowagieTextFont_BOLD:
      fontName = ComAowagieTextPdfBaseFont_HELVETICA_BOLD;
      break;
      case ComAowagieTextFont_ITALIC:
      fontName = ComAowagieTextPdfBaseFont_HELVETICA_OBLIQUE;
      break;
      case ComAowagieTextFont_BOLDITALIC:
      fontName = ComAowagieTextPdfBaseFont_HELVETICA_BOLDOBLIQUE;
      break;
      default:
      case ComAowagieTextFont_NORMAL:
      fontName = ComAowagieTextPdfBaseFont_HELVETICA;
      break;
    }
    break;
  }
  @try {
    cfont = ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_(fontName, encoding, false);
  }
  @catch (
#line 648
  JavaLangException *ee) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(ee);
  }
  return cfont;
}


#line 664
- (jboolean)isStandardFont {
  return self->family_ == ComAowagieTextFont_UNDEFINED && self->size_ == ComAowagieTextFont_UNDEFINED && self->style_ == ComAowagieTextFont_UNDEFINED &&
#line 666
  self->color_ == nil && self->baseFont_ == nil;
}


#line 677
- (ComAowagieTextFont *)differenceWithComAowagieTextFont:(ComAowagieTextFont *)font {
  if (font == nil) {
    return self;
  }
  
#line 682
  jfloat dSize = font->size_;
  if (dSize == ComAowagieTextFont_UNDEFINED) {
    dSize = self->size_;
  }
  
#line 687
  jint dStyle = ComAowagieTextFont_UNDEFINED;
  jint style1 = self->style_;
  jint style2 = [font getStyle];
  if (style1 != ComAowagieTextFont_UNDEFINED || style2 != ComAowagieTextFont_UNDEFINED) {
    if (style1 == ComAowagieTextFont_UNDEFINED) {
      style1 = 0;
    }
    if (style2 == ComAowagieTextFont_UNDEFINED) {
      style2 = 0;
    }
    dStyle = style1 | style2;
  }
  
#line 700
  HarmonyJavaAwtColor *dColor = font->color_;
  if (dColor == nil) {
    dColor = self->color_;
  }
  
#line 705
  if (font->baseFont_ != nil) {
    return new_ComAowagieTextFont_initWithComAowagieTextPdfBaseFont_withFloat_withInt_withHarmonyJavaAwtColor_(font->baseFont_, dSize, dStyle, dColor);
  }
  if ([font getFamily] != ComAowagieTextFont_UNDEFINED) {
    return new_ComAowagieTextFont_initWithInt_withFloat_withInt_withHarmonyJavaAwtColor_(font->family_, dSize, dStyle, dColor);
  }
  if (self->baseFont_ != nil) {
    if (dStyle == style1) {
      return new_ComAowagieTextFont_initWithComAowagieTextPdfBaseFont_withFloat_withInt_withHarmonyJavaAwtColor_(self->baseFont_, dSize, dStyle, dColor);
    }
    else {
      
#line 715
      return ComAowagieTextFontFactory_getFontWithNSString_withFloat_withInt_withHarmonyJavaAwtColor_([self getFamilyname], dSize, dStyle,
#line 716
      dColor);
    }
  }
  return new_ComAowagieTextFont_initWithInt_withFloat_withInt_withHarmonyJavaAwtColor_(self->family_, dSize, dStyle, dColor);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 8, 7, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 14, 7, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtColor;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfBaseFont;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfBaseFont;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextFont;", 0x0, 19, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComAowagieTextFont:);
  methods[1].selector = @selector(initWithInt:withFloat:withInt:withHarmonyJavaAwtColor:);
  methods[2].selector = @selector(initWithComAowagieTextPdfBaseFont:withFloat:withInt:withHarmonyJavaAwtColor:);
  methods[3].selector = @selector(initWithComAowagieTextPdfBaseFont:);
  methods[4].selector = @selector(init);
  methods[5].selector = @selector(compareToWithId:);
  methods[6].selector = @selector(getFamily);
  methods[7].selector = @selector(getFamilyname);
  methods[8].selector = @selector(setFamilyWithNSString:);
  methods[9].selector = @selector(getFamilyIndexWithNSString:);
  methods[10].selector = @selector(getSize);
  methods[11].selector = @selector(getCalculatedSize);
  methods[12].selector = @selector(getCalculatedLeadingWithFloat:);
  methods[13].selector = @selector(setSizeWithFloat:);
  methods[14].selector = @selector(getStyle);
  methods[15].selector = @selector(getCalculatedStyle);
  methods[16].selector = @selector(isBold);
  methods[17].selector = @selector(isItalic);
  methods[18].selector = @selector(isUnderlined);
  methods[19].selector = @selector(isStrikethru);
  methods[20].selector = @selector(setStyleWithInt:);
  methods[21].selector = @selector(setStyleWithNSString:);
  methods[22].selector = @selector(getStyleValueWithNSString:);
  methods[23].selector = @selector(getColor);
  methods[24].selector = @selector(setColorWithHarmonyJavaAwtColor:);
  methods[25].selector = @selector(getBaseFont);
  methods[26].selector = @selector(getCalculatedBaseFontWithBoolean:);
  methods[27].selector = @selector(isStandardFont);
  methods[28].selector = @selector(differenceWithComAowagieTextFont:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COURIER", "I", .constantValue.asInt = ComAowagieTextFont_COURIER, 0x19, -1, -1, -1, -1 },
    { "HELVETICA", "I", .constantValue.asInt = ComAowagieTextFont_HELVETICA, 0x19, -1, -1, -1, -1 },
    { "TIMES_ROMAN", "I", .constantValue.asInt = ComAowagieTextFont_TIMES_ROMAN, 0x19, -1, -1, -1, -1 },
    { "SYMBOL", "I", .constantValue.asInt = ComAowagieTextFont_SYMBOL, 0x19, -1, -1, -1, -1 },
    { "ZAPFDINGBATS", "I", .constantValue.asInt = ComAowagieTextFont_ZAPFDINGBATS, 0x19, -1, -1, -1, -1 },
    { "NORMAL", "I", .constantValue.asInt = ComAowagieTextFont_NORMAL, 0x19, -1, -1, -1, -1 },
    { "BOLD", "I", .constantValue.asInt = ComAowagieTextFont_BOLD, 0x19, -1, -1, -1, -1 },
    { "ITALIC", "I", .constantValue.asInt = ComAowagieTextFont_ITALIC, 0x19, -1, -1, -1, -1 },
    { "UNDERLINE", "I", .constantValue.asInt = ComAowagieTextFont_UNDERLINE, 0x1a, -1, -1, -1, -1 },
    { "STRIKETHRU", "I", .constantValue.asInt = ComAowagieTextFont_STRIKETHRU, 0x1a, -1, -1, -1, -1 },
    { "BOLDITALIC", "I", .constantValue.asInt = ComAowagieTextFont_BOLDITALIC, 0x18, -1, -1, -1, -1 },
    { "UNDEFINED", "I", .constantValue.asInt = ComAowagieTextFont_UNDEFINED, 0x19, -1, -1, -1, -1 },
    { "DEFAULTSIZE", "I", .constantValue.asInt = ComAowagieTextFont_DEFAULTSIZE, 0x18, -1, -1, -1, -1 },
    { "family_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "size_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "style_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "color_", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "baseFont_", "LComAowagieTextPdfBaseFont;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextFont;", "IFILHarmonyJavaAwtColor;", "LComAowagieTextPdfBaseFont;FILHarmonyJavaAwtColor;", "LComAowagieTextPdfBaseFont;", "compareTo", "LNSObject;", "setFamily", "LNSString;", "getFamilyIndex", "getCalculatedLeading", "F", "setSize", "setStyle", "I", "getStyleValue", "setColor", "LHarmonyJavaAwtColor;", "getCalculatedBaseFont", "Z", "difference" };
  static const J2ObjcClassInfo _ComAowagieTextFont = { "Font", "com.aowagie.text", ptrTable, methods, fields, 7, 0x1, 29, 18, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextFont;
}

@end


#line 144
void ComAowagieTextFont_initWithComAowagieTextFont_(ComAowagieTextFont *self, ComAowagieTextFont *other) {
  NSObject_init(self);
  self->family_ = ComAowagieTextFont_UNDEFINED;
  self->size_ = ComAowagieTextFont_UNDEFINED;
  self->style_ = ComAowagieTextFont_UNDEFINED;
  self->color_ =
#line 131
  nil;
  self->baseFont_ =
#line 134
  nil;
  
#line 145
  self->family_ = ((ComAowagieTextFont *) nil_chk(other))->family_;
  self->size_ = other->size_;
  self->style_ = other->style_;
  self->color_ = other->color_;
  self->baseFont_ = other->baseFont_;
}


#line 144
ComAowagieTextFont *new_ComAowagieTextFont_initWithComAowagieTextFont_(ComAowagieTextFont *other) {
  J2OBJC_NEW_IMPL(ComAowagieTextFont, initWithComAowagieTextFont_, other)
}


#line 144
ComAowagieTextFont *create_ComAowagieTextFont_initWithComAowagieTextFont_(ComAowagieTextFont *other) {
  J2OBJC_CREATE_IMPL(ComAowagieTextFont, initWithComAowagieTextFont_, other)
}


#line 165
void ComAowagieTextFont_initWithInt_withFloat_withInt_withHarmonyJavaAwtColor_(ComAowagieTextFont *self, jint family, jfloat size, jint style, HarmonyJavaAwtColor *color) {
  NSObject_init(self);
  self->family_ = ComAowagieTextFont_UNDEFINED;
  self->size_ = ComAowagieTextFont_UNDEFINED;
  self->style_ = ComAowagieTextFont_UNDEFINED;
  self->color_ =
#line 131
  nil;
  self->baseFont_ =
#line 134
  nil;
  
#line 166
  self->family_ = family;
  self->size_ = size;
  self->style_ = style;
  self->color_ = color;
}


#line 165
ComAowagieTextFont *new_ComAowagieTextFont_initWithInt_withFloat_withInt_withHarmonyJavaAwtColor_(jint family, jfloat size, jint style, HarmonyJavaAwtColor *color) {
  J2OBJC_NEW_IMPL(ComAowagieTextFont, initWithInt_withFloat_withInt_withHarmonyJavaAwtColor_, family, size, style, color)
}


#line 165
ComAowagieTextFont *create_ComAowagieTextFont_initWithInt_withFloat_withInt_withHarmonyJavaAwtColor_(jint family, jfloat size, jint style, HarmonyJavaAwtColor *color) {
  J2OBJC_CREATE_IMPL(ComAowagieTextFont, initWithInt_withFloat_withInt_withHarmonyJavaAwtColor_, family, size, style, color)
}


#line 185
void ComAowagieTextFont_initWithComAowagieTextPdfBaseFont_withFloat_withInt_withHarmonyJavaAwtColor_(ComAowagieTextFont *self, ComAowagieTextPdfBaseFont *bf, jfloat size, jint style, HarmonyJavaAwtColor *color) {
  NSObject_init(self);
  self->family_ = ComAowagieTextFont_UNDEFINED;
  self->size_ = ComAowagieTextFont_UNDEFINED;
  self->style_ = ComAowagieTextFont_UNDEFINED;
  self->color_ =
#line 131
  nil;
  self->baseFont_ =
#line 134
  nil;
  
#line 186
  self->baseFont_ = bf;
  self->size_ = size;
  self->style_ = style;
  self->color_ = color;
}


#line 185
ComAowagieTextFont *new_ComAowagieTextFont_initWithComAowagieTextPdfBaseFont_withFloat_withInt_withHarmonyJavaAwtColor_(ComAowagieTextPdfBaseFont *bf, jfloat size, jint style, HarmonyJavaAwtColor *color) {
  J2OBJC_NEW_IMPL(ComAowagieTextFont, initWithComAowagieTextPdfBaseFont_withFloat_withInt_withHarmonyJavaAwtColor_, bf, size, style, color)
}


#line 185
ComAowagieTextFont *create_ComAowagieTextFont_initWithComAowagieTextPdfBaseFont_withFloat_withInt_withHarmonyJavaAwtColor_(ComAowagieTextPdfBaseFont *bf, jfloat size, jint style, HarmonyJavaAwtColor *color) {
  J2OBJC_CREATE_IMPL(ComAowagieTextFont, initWithComAowagieTextPdfBaseFont_withFloat_withInt_withHarmonyJavaAwtColor_, bf, size, style, color)
}


#line 198
void ComAowagieTextFont_initWithComAowagieTextPdfBaseFont_(ComAowagieTextFont *self, ComAowagieTextPdfBaseFont *bf) {
  ComAowagieTextFont_initWithComAowagieTextPdfBaseFont_withFloat_withInt_withHarmonyJavaAwtColor_(self, bf, ComAowagieTextFont_UNDEFINED, ComAowagieTextFont_UNDEFINED, nil);
}


#line 198
ComAowagieTextFont *new_ComAowagieTextFont_initWithComAowagieTextPdfBaseFont_(ComAowagieTextPdfBaseFont *bf) {
  J2OBJC_NEW_IMPL(ComAowagieTextFont, initWithComAowagieTextPdfBaseFont_, bf)
}


#line 198
ComAowagieTextFont *create_ComAowagieTextFont_initWithComAowagieTextPdfBaseFont_(ComAowagieTextPdfBaseFont *bf) {
  J2OBJC_CREATE_IMPL(ComAowagieTextFont, initWithComAowagieTextPdfBaseFont_, bf)
}


#line 206
void ComAowagieTextFont_init(ComAowagieTextFont *self) {
  ComAowagieTextFont_initWithInt_withFloat_withInt_withHarmonyJavaAwtColor_(self, ComAowagieTextFont_UNDEFINED, ComAowagieTextFont_UNDEFINED, ComAowagieTextFont_UNDEFINED, nil);
}


#line 206
ComAowagieTextFont *new_ComAowagieTextFont_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextFont, init)
}


#line 206
ComAowagieTextFont *create_ComAowagieTextFont_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextFont, init)
}


#line 324
jint ComAowagieTextFont_getFamilyIndexWithNSString_(NSString *family) {
  ComAowagieTextFont_initialize();
  
#line 325
  if ([((NSString *) nil_chk(family)) java_equalsIgnoreCase:ComAowagieTextFontFactory_COURIER]) {
    return ComAowagieTextFont_COURIER;
  }
  if ([family java_equalsIgnoreCase:ComAowagieTextFontFactory_HELVETICA]) {
    return ComAowagieTextFont_HELVETICA;
  }
  if ([family java_equalsIgnoreCase:ComAowagieTextFontFactory_TIMES_ROMAN]) {
    return ComAowagieTextFont_TIMES_ROMAN;
  }
  if ([family java_equalsIgnoreCase:ComAowagieTextFontFactory_SYMBOL]) {
    return ComAowagieTextFont_SYMBOL;
  }
  if ([family java_equalsIgnoreCase:ComAowagieTextFontFactory_ZAPFDINGBATS]) {
    return ComAowagieTextFont_ZAPFDINGBATS;
  }
  return ComAowagieTextFont_UNDEFINED;
}


#line 503
jint ComAowagieTextFont_getStyleValueWithNSString_(NSString *style) {
  ComAowagieTextFont_initialize();
  
#line 504
  jint s = 0;
  if ([((NSString *) nil_chk(style)) java_indexOfString:ComAowagieTextHtmlMarkup_CSS_VALUE_NORMAL] != -1) {
    s |= ComAowagieTextFont_NORMAL;
  }
  if ([style java_indexOfString:ComAowagieTextHtmlMarkup_CSS_VALUE_BOLD] != -1) {
    s |= ComAowagieTextFont_BOLD;
  }
  if ([style java_indexOfString:ComAowagieTextHtmlMarkup_CSS_VALUE_ITALIC] != -1) {
    s |= ComAowagieTextFont_ITALIC;
  }
  if ([style java_indexOfString:ComAowagieTextHtmlMarkup_CSS_VALUE_OBLIQUE] != -1) {
    s |= ComAowagieTextFont_ITALIC;
  }
  if ([style java_indexOfString:ComAowagieTextHtmlMarkup_CSS_VALUE_UNDERLINE] != -1) {
    s |= ComAowagieTextFont_UNDERLINE;
  }
  if ([style java_indexOfString:ComAowagieTextHtmlMarkup_CSS_VALUE_LINETHROUGH] != -1) {
    s |= ComAowagieTextFont_STRIKETHRU;
  }
  return s;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextFont)
