//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfImage.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/Element.h"
#include "com/aowagie/text/Image.h"
#include "com/aowagie/text/pdf/BadPdfFormatException.h"
#include "com/aowagie/text/pdf/PdfBoolean.h"
#include "com/aowagie/text/pdf/PdfDictionary.h"
#include "com/aowagie/text/pdf/PdfImage.h"
#include "com/aowagie/text/pdf/PdfIndirectReference.h"
#include "com/aowagie/text/pdf/PdfLiteral.h"
#include "com/aowagie/text/pdf/PdfName.h"
#include "com/aowagie/text/pdf/PdfNumber.h"
#include "com/aowagie/text/pdf/PdfOCG.h"
#include "com/aowagie/text/pdf/PdfStream.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/net/URL.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/PdfImage must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfPdfImage () {
 @public
  /*!
   @brief This is the <CODE>PdfName</CODE> of the image.
   */
  ComAowagieTextPdfPdfName *name_;
}

+ (void)transferBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg
                    withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                   withInt:(jint)len;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfImage, name_, ComAowagieTextPdfPdfName *)

inline jint ComAowagieTextPdfPdfImage_get_TRANSFERSIZE(void);
#define ComAowagieTextPdfPdfImage_TRANSFERSIZE 4096
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfImage, TRANSFERSIZE, jint)

__attribute__((unused)) static void ComAowagieTextPdfPdfImage_transferBytesWithJavaIoInputStream_withJavaIoOutputStream_withInt_(JavaIoInputStream *inArg, JavaIoOutputStream *outArg, jint len);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfImage.java"


#line 63
@implementation ComAowagieTextPdfPdfImage


#line 82
- (instancetype)initWithComAowagieTextImage:(ComAowagieTextImage *)image
                               withNSString:(NSString *)name
  withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)maskRef {
  ComAowagieTextPdfPdfImage_initWithComAowagieTextImage_withNSString_withComAowagieTextPdfPdfIndirectReference_(self, image, name, maskRef);
  return self;
}


#line 286
- (ComAowagieTextPdfPdfName *)name {
  return self->name_;
}

+ (void)transferBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg
                    withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                   withInt:(jint)len {
  ComAowagieTextPdfPdfImage_transferBytesWithJavaIoInputStream_withJavaIoOutputStream_withInt_(inArg, outArg, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfName;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 3, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComAowagieTextImage:withNSString:withComAowagieTextPdfPdfIndirectReference:);
  methods[1].selector = @selector(name);
  methods[2].selector = @selector(transferBytesWithJavaIoInputStream:withJavaIoOutputStream:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TRANSFERSIZE", "I", .constantValue.asInt = ComAowagieTextPdfPdfImage_TRANSFERSIZE, 0x1a, -1, -1, -1, -1 },
    { "name_", "LComAowagieTextPdfPdfName;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextImage;LNSString;LComAowagieTextPdfPdfIndirectReference;", "LComAowagieTextPdfBadPdfFormatException;", "transferBytes", "LJavaIoInputStream;LJavaIoOutputStream;I", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfImage = { "PdfImage", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfImage;
}

@end


#line 82
void ComAowagieTextPdfPdfImage_initWithComAowagieTextImage_withNSString_withComAowagieTextPdfPdfIndirectReference_(ComAowagieTextPdfPdfImage *self, ComAowagieTextImage *image, NSString *name, ComAowagieTextPdfPdfIndirectReference *maskRef) {
  ComAowagieTextPdfPdfStream_init(self);
  self->name_ =
#line 69
  nil;
  
#line 84
  self->name_ = new_ComAowagieTextPdfPdfName_initWithNSString_(name);
  [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TYPE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, XOBJECT)];
  [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, IMAGE)];
  [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, WIDTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithFloat_([((ComAowagieTextImage *) nil_chk(image)) getWidth])];
  [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, HEIGHT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithFloat_([image getHeight])];
  if ([image getLayer] != nil) {
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, OC) withComAowagieTextPdfPdfObject:[((id<ComAowagieTextPdfPdfOCG>) nil_chk([image getLayer])) getRef]];
  }
  if ([image isMask] && ([image getBpc] == 1 || [image getBpc] > (jint) 0xff)) {
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, IMAGEMASK) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfBoolean, PDFTRUE)];
  }
  if (maskRef != nil) {
    if ([image isSmask]) {
      [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SMASK) withComAowagieTextPdfPdfObject:maskRef];
    }
    else {
      
#line 99
      [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, MASK) withComAowagieTextPdfPdfObject:maskRef];
    }
  }
  if ([image isMask] && [image isInverted]) {
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DECODE) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithNSString_(@"[1 0]")];
  }
  if ([image isInterpolation]) {
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, INTERPOLATE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfBoolean, PDFTRUE)];
  }
  JavaIoInputStream *is = nil;
  @try {
    
#line 111
    if ([image isImgRaw]) {
      
#line 113
      jint colorspace = [image getColorspace];
      IOSIntArray *transparency = [image getTransparency];
      if (transparency != nil && ![image isMask] && maskRef == nil) {
        NSString *s = @"[";
        {
          IOSIntArray *a__ =
#line 117
          transparency;
          jint const *b__ = a__->buffer_;
          jint const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            jint element = *b__++;
            
#line 118
            (void) JreStrAppendStrong(&s, "IC", element, ' ');
          }
        }
        
#line 120
        (void) JreStrAppendStrong(&s, "$", @"]");
        [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, MASK) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithNSString_(s)];
      }
      self->bytes_ = [image getRawData];
      [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(((IOSByteArray *) nil_chk(self->bytes_))->size_)];
      jint bpc = [image getBpc];
      if (bpc > (jint) 0xff) {
        if (![image isMask]) {
          [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DEVICEGRAY)];
        }
        [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BITSPERCOMPONENT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(1)];
        [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, CCITTFAXDECODE)];
        jint k = bpc - ComAowagieTextElement_CCITTG3_1D;
        ComAowagieTextPdfPdfDictionary *decodeparms = new_ComAowagieTextPdfPdfDictionary_init();
        if (k != 0) {
          [decodeparms putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, K) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(k)];
        }
        if ((colorspace & ComAowagieTextElement_CCITT_BLACKIS1) != 0) {
          [decodeparms putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BLACKIS1) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfBoolean, PDFTRUE)];
        }
        if ((colorspace & ComAowagieTextElement_CCITT_ENCODEDBYTEALIGN) != 0) {
          [decodeparms putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENCODEDBYTEALIGN) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfBoolean, PDFTRUE)];
        }
        if ((colorspace & ComAowagieTextElement_CCITT_ENDOFLINE) != 0) {
          [decodeparms putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENDOFLINE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfBoolean, PDFTRUE)];
        }
        if ((colorspace & ComAowagieTextElement_CCITT_ENDOFBLOCK) != 0) {
          [decodeparms putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENDOFBLOCK) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfBoolean, PDFFALSE)];
        }
        [decodeparms putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLUMNS) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithFloat_([image getWidth])];
        [decodeparms putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ROWS) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithFloat_([image getHeight])];
        [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DECODEPARMS) withComAowagieTextPdfPdfObject:decodeparms];
      }
      else {
        switch (colorspace) {
          case 1:
          [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DEVICEGRAY)];
          if ([image isInverted]) {
            [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DECODE) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithNSString_(@"[1 0]")];
          }
          break;
          case 3:
          [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DEVICERGB)];
          if ([image isInverted]) {
            [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DECODE) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithNSString_(@"[1 0 1 0 1 0]")];
          }
          break;
          case 4:
          default:
          [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DEVICECMYK)];
          if ([image isInverted]) {
            [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DECODE) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithNSString_(@"[1 0 1 0 1 0 1 0]")];
          }
        }
        ComAowagieTextPdfPdfDictionary *additional = [image getAdditional];
        if (additional != nil) {
          [self putAllWithComAowagieTextPdfPdfDictionary:additional];
        }
        if ([image isMask] && ([image getBpc] == 1 || [image getBpc] > 8)) {
          [self removeWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE)];
        }
        [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BITSPERCOMPONENT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_([image getBpc])];
        if ([image isDeflated]) {
          [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, FLATEDECODE)];
        }
        else {
          
#line 185
          [self flateCompressWithInt:[image getCompressionLevel]];
        }
      }
      return;
    }
    
#line 191
    NSString *errorID;
    if ([image getRawData] == nil) {
      is = [((JavaNetURL *) nil_chk([image getUrl])) openStream];
      errorID = [((JavaNetURL *) nil_chk([image getUrl])) description];
    }
    else {
      is = new_JavaIoByteArrayInputStream_initWithByteArray_([image getRawData]);
      errorID = @"Byte array";
    }
    switch ([image type]) {
      case ComAowagieTextElement_JPEG:
      [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DCTDECODE)];
      switch ([image getColorspace]) {
        case 1:
        [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DEVICEGRAY)];
        break;
        case 3:
        [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DEVICERGB)];
        break;
        default:
        [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DEVICECMYK)];
        if ([image isInverted]) {
          [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DECODE) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfLiteral_initWithNSString_(@"[1 0 1 0 1 0 1 0]")];
        }
      }
      [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BITSPERCOMPONENT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(8)];
      if ([image getRawData] != nil) {
        self->bytes_ = [image getRawData];
        [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(((IOSByteArray *) nil_chk(self->bytes_))->size_)];
        return;
      }
      self->streamBytes_ = new_JavaIoByteArrayOutputStream_init();
      ComAowagieTextPdfPdfImage_transferBytesWithJavaIoInputStream_withJavaIoOutputStream_withInt_(is, self->streamBytes_, -1);
      break;
      case ComAowagieTextElement_JPEG2000:
      [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, JPXDECODE)];
      if ([image getColorspace] > 0) {
        switch ([image getColorspace]) {
          case 1:
          [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DEVICEGRAY)];
          break;
          case 3:
          [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DEVICERGB)];
          break;
          default:
          [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DEVICECMYK)];
        }
        [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BITSPERCOMPONENT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_([image getBpc])];
      }
      if ([image getRawData] != nil) {
        self->bytes_ = [image getRawData];
        [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(((IOSByteArray *) nil_chk(self->bytes_))->size_)];
        return;
      }
      self->streamBytes_ = new_JavaIoByteArrayOutputStream_init();
      ComAowagieTextPdfPdfImage_transferBytesWithJavaIoInputStream_withJavaIoOutputStream_withInt_(is, self->streamBytes_, -1);
      break;
      case ComAowagieTextElement_JBIG2:
      [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, JBIG2DECODE)];
      [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DEVICEGRAY)];
      [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BITSPERCOMPONENT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(1)];
      if ([image getRawData] != nil) {
        self->bytes_ = [image getRawData];
        [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(((IOSByteArray *) nil_chk(self->bytes_))->size_)];
        return;
      }
      self->streamBytes_ = new_JavaIoByteArrayOutputStream_init();
      ComAowagieTextPdfPdfImage_transferBytesWithJavaIoInputStream_withJavaIoOutputStream_withInt_(is, self->streamBytes_, -1);
      break;
      default:
      @throw new_ComAowagieTextPdfBadPdfFormatException_initPackagePrivateWithNSString_(JreStrcat("$$", errorID, @" is an unknown Image format."));
    }
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_([((JavaIoByteArrayOutputStream *) nil_chk(self->streamBytes_)) size])];
  }
  @catch (JavaIoIOException *ioe) {
    @throw new_ComAowagieTextPdfBadPdfFormatException_initPackagePrivateWithNSString_([ioe getMessage]);
  }
  @finally {
    if (is != nil) {
      @try {
        [is close];
      }
      @catch (JavaLangException *ee) {
      }
    }
  }
}


#line 82
ComAowagieTextPdfPdfImage *new_ComAowagieTextPdfPdfImage_initWithComAowagieTextImage_withNSString_withComAowagieTextPdfPdfIndirectReference_(ComAowagieTextImage *image, NSString *name, ComAowagieTextPdfPdfIndirectReference *maskRef) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfImage, initWithComAowagieTextImage_withNSString_withComAowagieTextPdfPdfIndirectReference_, image, name, maskRef)
}


#line 82
ComAowagieTextPdfPdfImage *create_ComAowagieTextPdfPdfImage_initWithComAowagieTextImage_withNSString_withComAowagieTextPdfPdfIndirectReference_(ComAowagieTextImage *image, NSString *name, ComAowagieTextPdfPdfIndirectReference *maskRef) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfImage, initWithComAowagieTextImage_withNSString_withComAowagieTextPdfPdfIndirectReference_, image, name, maskRef)
}


#line 290
void ComAowagieTextPdfPdfImage_transferBytesWithJavaIoInputStream_withJavaIoOutputStream_withInt_(JavaIoInputStream *inArg, JavaIoOutputStream *outArg, jint len) {
  ComAowagieTextPdfPdfImage_initialize();
  
#line 291
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:ComAowagieTextPdfPdfImage_TRANSFERSIZE];
  if (len < 0) {
    len = (jint) 0x7ffffff;
  }
  jint size;
  while (len != 0) {
    size = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:buffer withInt:0 withInt:JavaLangMath_minWithInt_withInt_(len, ComAowagieTextPdfPdfImage_TRANSFERSIZE)];
    if (size < 0) {
      return;
    }
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:buffer withInt:0 withInt:size];
    len -= size;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfImage)
