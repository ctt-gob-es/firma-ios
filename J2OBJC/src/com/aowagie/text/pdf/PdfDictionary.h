//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfDictionary.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComAowagieTextPdfPdfDictionary")
#ifdef RESTRICT_ComAowagieTextPdfPdfDictionary
#define INCLUDE_ALL_ComAowagieTextPdfPdfDictionary 0
#else
#define INCLUDE_ALL_ComAowagieTextPdfPdfDictionary 1
#endif
#undef RESTRICT_ComAowagieTextPdfPdfDictionary

#if !defined (ComAowagieTextPdfPdfDictionary_) && (INCLUDE_ALL_ComAowagieTextPdfPdfDictionary || defined(INCLUDE_ComAowagieTextPdfPdfDictionary))
#define ComAowagieTextPdfPdfDictionary_

#define RESTRICT_ComAowagieTextPdfPdfObject 1
#define INCLUDE_ComAowagieTextPdfPdfObject 1
#include "com/aowagie/text/pdf/PdfObject.h"

@class ComAowagieTextPdfPdfArray;
@class ComAowagieTextPdfPdfBoolean;
@class ComAowagieTextPdfPdfIndirectReference;
@class ComAowagieTextPdfPdfName;
@class ComAowagieTextPdfPdfNumber;
@class ComAowagieTextPdfPdfString;
@class ComAowagieTextPdfPdfWriter;
@class IOSByteArray;
@class JavaIoOutputStream;
@class JavaUtilHashMap;
@protocol JavaUtilSet;

/*!
 @brief <CODE>PdfDictionary</CODE> is the Pdf dictionary object.
 <P>
  A dictionary is an associative table containing pairs of objects.
  The first element of each pair is called the <I>key</I> and the second
  element is called the <I>value</I>.
  Unlike dictionaries in the PostScript language, a key must be a 
 <CODE>PdfName</CODE>.
  A value can be any kind of <CODE>PdfObject</CODE>, including a dictionary.
  A dictionary is generally used to collect and tie together the attributes
  of a complex object, with each key-value pair specifying the name and value
  of an attribute.<BR>
  A dictionary is represented by two left angle brackets (&lt;&lt;), followed by a
  sequence of key-value pairs, followed by two right angle brackets (&gt;&gt;).<BR>
  This object is described in the 'Portable Document Format Reference Manual
  version 1.7' section 3.2.6 (page 59-60).
 - seealso: PdfObject
 - seealso: PdfName
 - seealso: BadPdfFormatException
 */
@interface ComAowagieTextPdfPdfDictionary : ComAowagieTextPdfPdfObject {
 @public
  /*!
   @brief This is the hashmap that contains all the values and keys of the dictionary
   */
  JavaUtilHashMap *hashMap_;
}

#pragma mark Public

/*!
 @brief Constructs an empty <CODE>PdfDictionary</CODE>-object.
 */
- (instancetype)init;

/*!
 @brief Constructs a <CODE>PdfDictionary</CODE>-object of a certain type.
 @param type a  <CODE> PdfName </CODE>
 */
- (instancetype)initWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)type;

/*!
 @brief Returns the <CODE>PdfObject</CODE> associated to the specified 
 <VAR>key</VAR>.
 @param key a  <CODE> PdfName </CODE>
 @return the <CODE>PdfObject</CODE> previously associated to the
    <VAR>key</VAR>
 */
- (ComAowagieTextPdfPdfObject *)getWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key;

/*!
 @brief Returns a <CODE>PdfObject</CODE> as a <CODE>PdfArray</CODE>,
  resolving indirect references.
 The object associated with the <CODE>PdfName</CODE> given is retrieved
  and resolved to a direct object.
  If it is a <CODE>PdfArray</CODE>, it is cast down and returned as such.
  Otherwise <CODE>null</CODE> is returned.
 @param key A  <CODE> PdfName </CODE>
 @return the associated <CODE>PdfArray</CODE> object,
    or <CODE>null</CODE>
 */
- (ComAowagieTextPdfPdfArray *)getAsArrayWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key;

/*!
 @brief Returns a <CODE>PdfObject</CODE> as a <CODE>PdfDictionary</CODE>,
  resolving indirect references.
 The object associated with the <CODE>PdfName</CODE> given is retrieved
  and resolved to a direct object.
  If it is a <CODE>PdfDictionary</CODE>, it is cast down and returned as
  such. Otherwise <CODE>null</CODE> is returned.
 @param key A  <CODE> PdfName </CODE>
 @return the associated <CODE>PdfDictionary</CODE> object,
    or <CODE>null</CODE>
 */
- (ComAowagieTextPdfPdfDictionary *)getAsDictWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key;

/*!
 @brief Returns a <CODE>PdfObject</CODE> as a <CODE>PdfName</CODE>,
  resolving indirect references.
 The object associated with the <CODE>PdfName</CODE> given is retrieved
  and resolved to a direct object.
  If it is a <CODE>PdfName</CODE>, it is cast down and returned as such.
  Otherwise <CODE>null</CODE> is returned.
 @param key A  <CODE> PdfName </CODE>
 @return the associated <CODE>PdfName</CODE> object,
    or <CODE>null</CODE>
 */
- (ComAowagieTextPdfPdfName *)getAsNameWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key;

/*!
 @brief Returns a <CODE>PdfObject</CODE> as a <CODE>PdfNumber</CODE>,
  resolving indirect references.
 The object associated with the <CODE>PdfName</CODE> given is retrieved
  and resolved to a direct object.
  If it is a <CODE>PdfNumber</CODE>, it is cast down and returned as such.
  Otherwise <CODE>null</CODE> is returned.
 @param key A  <CODE> PdfName </CODE>
 @return the associated <CODE>PdfNumber</CODE> object,
    or <CODE>null</CODE>
 */
- (ComAowagieTextPdfPdfNumber *)getAsNumberWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key;

/*!
 @brief Returns a <CODE>PdfObject</CODE> as a <CODE>PdfString</CODE>,
  resolving indirect references.
 The object associated with the <CODE>PdfName</CODE> given is retrieved
  and resolved to a direct object.
  If it is a <CODE>PdfString</CODE>, it is cast down and returned as such.
  Otherwise <CODE>null</CODE> is returned.
 @param key A  <CODE> PdfName </CODE>
 @return the associated <CODE>PdfString</CODE> object,
    or <CODE>null</CODE>
 */
- (ComAowagieTextPdfPdfString *)getAsStringWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key;

/*!
 @brief Returns the <CODE>PdfObject</CODE> associated to the specified 
 <VAR>key</VAR>, resolving a possible indirect reference to a direct
  object.
 This method will never return a <CODE>PdfIndirectReference</CODE>
  object.
 @param key A key for the  <CODE> PdfObject </CODE>  to be returned
 @return A direct <CODE>PdfObject</CODE> or <CODE>null</CODE>
 */
- (ComAowagieTextPdfPdfObject *)getDirectObjectWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key;

/*!
 @brief Get all keys that are set.
 @return <CODE>true</CODE> if it is, otherwise <CODE>false</CODE>.
 */
- (id<JavaUtilSet>)getKeys;

/*!
 @brief Checks if a <CODE>Dictionary</CODE> is of the type CATALOG.
 @return <CODE>true</CODE> if it is, otherwise <CODE>false</CODE>.
 */
- (jboolean)isCatalog;

/*!
 @brief Checks if a <CODE>Dictionary</CODE> is of the type FONT.
 @return <CODE>true</CODE> if it is, otherwise <CODE>false</CODE>.
 */
- (jboolean)isFont;

/*!
 @brief Checks if a <CODE>Dictionary</CODE> is of the type OUTLINES.
 @return <CODE>true</CODE> if it is, otherwise <CODE>false</CODE>.
 */
- (jboolean)isOutlineTree;

/*!
 @brief Checks if a <CODE>Dictionary</CODE> is of the type PAGE.
 @return <CODE>true</CODE> if it is, otherwise <CODE>false</CODE>.
 */
- (jboolean)isPage;

/*!
 @brief Checks if a <CODE>Dictionary</CODE> is of the type PAGES.
 @return <CODE>true</CODE> if it is, otherwise <CODE>false</CODE>.
 */
- (jboolean)isPages;

/*!
 @brief Associates the specified <CODE>PdfObject</CODE> as <VAR>value</VAR> with
  the specified <CODE>PdfName</CODE> as <VAR>key</VAR> in this map.
 If the map previously contained a mapping for this <VAR>key</VAR>, the
  old <VAR>value</VAR> is replaced. If the <VAR>value</VAR> is 
 <CODE>null</CODE> or <CODE>PdfNull</CODE> the key is deleted.
 @param key a  <CODE> PdfName </CODE>
 @param object the  <CODE> PdfObject </CODE>  to be associated with the
      <VAR> key </VAR>
 */
- (void)putWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key
         withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)object;

/*!
 @brief Removes a <CODE>PdfObject</CODE> and its <VAR>key</VAR> from the 
 <CODE>PdfDictionary</CODE>.
 @param key a  <CODE> PdfName </CODE>
 */
- (void)removeWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key;

/*!
 @brief Returns the number of <VAR>key</VAR>-<VAR>value</VAR> mappings in this 
 <CODE>PdfDictionary</CODE>.
 @return the number of <VAR>key</VAR>-<VAR>value</VAR> mappings in this
    <CODE>PdfDictionary</CODE>.
 */
- (jint)size;

/*!
 @brief Writes the PDF representation of this <CODE>PdfDictionary</CODE> as an
  array of <CODE>byte</CODE> to the given <CODE>OutputStream</CODE>.
 @param writer for backwards compatibility
 @param os the  <CODE> OutputStream </CODE>  to write the bytes to.
 @throw IOExceptionon error
 */
- (void)toPdfWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
                     withJavaIoOutputStream:(JavaIoOutputStream *)os;

/*!
 @brief Returns a string representation of this <CODE>PdfDictionary</CODE>.
 The string doesn't contain any of the content of this dictionary.
  Rather the string "dictionary" is returned, possibly followed by the
  type of this <CODE>PdfDictionary</CODE>, if set.
 @return the string representation of this <CODE>PdfDictionary</CODE>
 - seealso: com.aowagie.text.pdf.PdfObject#toString()
 */
- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief Returns <CODE>true</CODE> if this <CODE>PdfDictionary</CODE> contains a
  mapping for the specified <VAR>key</VAR>.
 @param key Key
 @return <CODE>true</CODE> if the key is set, otherwise <CODE>false</CODE>.
 */
- (jboolean)containsWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key;

/*!
 @brief Returns a <CODE>PdfObject</CODE> as a <CODE>PdfBoolean</CODE>,
  resolving indirect references.
 The object associated with the <CODE>PdfName</CODE> given is retrieved
  and resolved to a direct object.
  If it is a <CODE>PdfBoolean</CODE>, it is cast down and returned as such.
  Otherwise <CODE>null</CODE> is returned.
 @param key A  <CODE> PdfName </CODE>
 @return the associated <CODE>PdfBoolean</CODE> object,
    or <CODE>null</CODE>
 */
- (ComAowagieTextPdfPdfBoolean *)getAsBooleanWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key;

/*!
 @brief Returns a <CODE>PdfObject</CODE> as a <CODE>PdfIndirectReference</CODE>.
 The object associated with the <CODE>PdfName</CODE> given is retrieved
  If it is a <CODE>PdfIndirectReference</CODE>, it is cast down and returned
  as such. Otherwise <CODE>null</CODE> is returned.
 @param key A  <CODE> PdfName </CODE>
 @return the associated <CODE>PdfIndirectReference</CODE> object,
    or <CODE>null</CODE>
 */
- (ComAowagieTextPdfPdfIndirectReference *)getAsIndirectObjectWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key;

- (void)mergeWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)other;

- (void)mergeDifferentWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)other;

/*!
 @brief Copies all of the mappings from the specified <CODE>PdfDictionary</CODE>
  to this <CODE>PdfDictionary</CODE>.
 These mappings will replace any mappings previously contained in this 
 <CODE>PdfDictionary</CODE>.
 @param dic The  <CODE> PdfDictionary </CODE>  with the mappings to be
     copied over
 */
- (void)putAllWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)dic;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0
              withByteArray:(IOSByteArray *)arg1 NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0
               withNSString:(NSString *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfPdfDictionary)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDictionary, hashMap_, JavaUtilHashMap *)

/*!
 @brief This is a possible type of dictionary
 */
inline ComAowagieTextPdfPdfName *ComAowagieTextPdfPdfDictionary_get_OUTLINES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComAowagieTextPdfPdfName *ComAowagieTextPdfPdfDictionary_OUTLINES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfDictionary, OUTLINES, ComAowagieTextPdfPdfName *)

/*!
 @brief This is a possible type of dictionary
 */
inline ComAowagieTextPdfPdfName *ComAowagieTextPdfPdfDictionary_get_PAGE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComAowagieTextPdfPdfName *ComAowagieTextPdfPdfDictionary_PAGE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfDictionary, PAGE, ComAowagieTextPdfPdfName *)

/*!
 @brief This is a possible type of dictionary
 */
inline ComAowagieTextPdfPdfName *ComAowagieTextPdfPdfDictionary_get_CATALOG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComAowagieTextPdfPdfName *ComAowagieTextPdfPdfDictionary_CATALOG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfDictionary, CATALOG, ComAowagieTextPdfPdfName *)

FOUNDATION_EXPORT void ComAowagieTextPdfPdfDictionary_init(ComAowagieTextPdfPdfDictionary *self);

FOUNDATION_EXPORT ComAowagieTextPdfPdfDictionary *new_ComAowagieTextPdfPdfDictionary_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfDictionary *create_ComAowagieTextPdfPdfDictionary_init(void);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfDictionary_initWithComAowagieTextPdfPdfName_(ComAowagieTextPdfPdfDictionary *self, ComAowagieTextPdfPdfName *type);

FOUNDATION_EXPORT ComAowagieTextPdfPdfDictionary *new_ComAowagieTextPdfPdfDictionary_initWithComAowagieTextPdfPdfName_(ComAowagieTextPdfPdfName *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfDictionary *create_ComAowagieTextPdfPdfDictionary_initWithComAowagieTextPdfPdfName_(ComAowagieTextPdfPdfName *type);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfDictionary)

#endif

#pragma pop_macro("INCLUDE_ALL_ComAowagieTextPdfPdfDictionary")
