//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfArray.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComAowagieTextPdfPdfArray")
#ifdef RESTRICT_ComAowagieTextPdfPdfArray
#define INCLUDE_ALL_ComAowagieTextPdfPdfArray 0
#else
#define INCLUDE_ALL_ComAowagieTextPdfPdfArray 1
#endif
#undef RESTRICT_ComAowagieTextPdfPdfArray

#if !defined (ComAowagieTextPdfPdfArray_) && (INCLUDE_ALL_ComAowagieTextPdfPdfArray || defined(INCLUDE_ComAowagieTextPdfPdfArray))
#define ComAowagieTextPdfPdfArray_

#define RESTRICT_ComAowagieTextPdfPdfObject 1
#define INCLUDE_ComAowagieTextPdfPdfObject 1
#include "com/aowagie/text/pdf/PdfObject.h"

@class ComAowagieTextPdfPdfDictionary;
@class ComAowagieTextPdfPdfIndirectReference;
@class ComAowagieTextPdfPdfName;
@class ComAowagieTextPdfPdfNumber;
@class ComAowagieTextPdfPdfString;
@class ComAowagieTextPdfPdfWriter;
@class IOSByteArray;
@class IOSFloatArray;
@class IOSIntArray;
@class JavaIoOutputStream;
@class JavaUtilArrayList;
@protocol JavaUtilListIterator;

/*!
 @brief <CODE>PdfArray</CODE> is the PDF Array object.
 <P>
  An array is a sequence of PDF objects. An array may contain a mixture of
  object types.
  An array is written as a left square bracket ([), followed by a sequence of
  objects, followed by a right square bracket (]).<BR>
  This object is described in the 'Portable Document Format Reference Manual
  version 1.7' section 3.2.5 (page 58).
 - seealso: PdfObject
 */
@interface ComAowagieTextPdfPdfArray : ComAowagieTextPdfPdfObject

#pragma mark Public

/*!
 @brief Constructs an empty <CODE>PdfArray</CODE>-object.
 */
- (instancetype)init;

/*!
 @brief Constructs an <CODE>PdfArray</CODE>-object, containing 1 
 <CODE>PdfObject</CODE>.
 @param object a  <CODE> PdfObject </CODE>  that has to be added to the array
 */
- (instancetype)initWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)object;

/*!
 @brief Adds an array of <CODE>float</CODE> values to end of the 
 <CODE>PdfArray</CODE>.
 The values will be the last elements.
  The <CODE>float</CODE> values are internally converted to 
 <CODE>PdfNumber</CODE> objects.
 @param values An array of  <CODE> float </CODE>  values to add
 @return always <CODE>true</CODE>
 */
- (jboolean)addWithFloatArray:(IOSFloatArray *)values;

/*!
 @brief Adds an array of <CODE>int</CODE> values to end of the <CODE>PdfArray</CODE>.
 The values will be the last elements.
  The <CODE>int</CODE> values are internally converted to 
 <CODE>PdfNumber</CODE> objects.
 @param values An array of  <CODE> int </CODE>  values to add
 @return always <CODE>true</CODE>
 */
- (jboolean)addWithIntArray:(IOSIntArray *)values;

/*!
 @brief Adds a <CODE>PdfObject</CODE> to the end of the <CODE>PdfArray</CODE>.
 The <CODE>PdfObject</CODE> will be the last element.
 @param object <CODE> PdfObject </CODE>  to add
 @return always <CODE>true</CODE>
 */
- (jboolean)addWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)object;

/*!
 @brief Inserts a <CODE>PdfObject</CODE> at the beginning of the 
 <CODE>PdfArray</CODE>.
 The <CODE>PdfObject</CODE> will be the first element, any other elements
  will be shifted to the right (adds one to their indices).
 @param object The  <CODE> PdfObject </CODE>  to add
 */
- (void)addFirstWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)object;

/*!
 @brief Get the internal arrayList for this PdfArray.Not Recommended.
 @return the internal ArrayList.  Naughty Naughty.
 */
- (JavaUtilArrayList *)getArrayList;

/*!
 @brief Returns a <CODE>PdfObject</CODE> as a <CODE>PdfName</CODE>,
  resolving indirect references.
 The object corresponding to the specified index is retrieved and
  resolved to a direct object.
  If it is a <CODE>PdfName</CODE>, it is cast down and returned as such.
  Otherwise <CODE>null</CODE> is returned.
 @param idx The index of the  <CODE> PdfObject </CODE>  to be returned
 @return the corresponding <CODE>PdfName</CODE> object,
    or <CODE>null</CODE>
 */
- (ComAowagieTextPdfPdfName *)getAsNameWithInt:(jint)idx;

/*!
 @brief Returns a <CODE>PdfObject</CODE> as a <CODE>PdfNumber</CODE>,
  resolving indirect references.
 The object corresponding to the specified index is retrieved and
  resolved to a direct object.
  If it is a <CODE>PdfNumber</CODE>, it is cast down and returned as such.
  Otherwise <CODE>null</CODE> is returned.
 @param idx The index of the  <CODE> PdfObject </CODE>  to be returned
 @return the corresponding <CODE>PdfNumber</CODE> object,
    or <CODE>null</CODE>
 */
- (ComAowagieTextPdfPdfNumber *)getAsNumberWithInt:(jint)idx;

/*!
 @brief Returns the <CODE>PdfObject</CODE> with the specified index.
 A possible indirect references is not resolved, so the returned 
 <CODE>PdfObject</CODE> may be either a direct object or an indirect
  reference, depending on how the object is stored in the 
 <CODE>PdfArray</CODE>.
 @param idx The index of the  <CODE> PdfObject </CODE>  to be returned
 @return A <CODE>PdfObject</CODE>
 */
- (ComAowagieTextPdfPdfObject *)getPdfObjectWithInt:(jint)idx;

/*!
 @brief Returns <CODE>true</CODE> if the array is empty.
 @return <CODE>true</CODE> if the array is empty
 @since 2.1.5
 */
- (jboolean)isEmpty;

/*!
 @brief Returns the list iterator for the array.
 @return a ListIterator
 */
- (id<JavaUtilListIterator>)listIterator;

/*!
 @brief Returns the number of entries in the array.
 @return the size of the ArrayList
 */
- (jint)size;

/*!
 @brief Writes the PDF representation of this <CODE>PdfArray</CODE> as an array
  of <CODE>byte</CODE> to the specified <CODE>OutputStream</CODE>.
 @param writer for backwards compatibility
 @param os the  <CODE> OutputStream </CODE>  to write the bytes to.
 */
- (void)toPdfWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
                     withJavaIoOutputStream:(JavaIoOutputStream *)os;

/*!
 @brief Returns a string representation of this <CODE>PdfArray</CODE>.
 The string representation consists of a list of all 
 <CODE>PdfObject</CODE>s contained in this <CODE>PdfArray</CODE>,
  enclosed in square brackets ("[]"). Adjacent elements are separated
  by the characters ", " (comma and space).
 @return the string representation of this <CODE>PdfArray</CODE>
 */
- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief Constructs a <CODE>PdfArray</CODE>-object, containing all 
 <CODE>float</CODE> values in a specified array.
 The <CODE>float</CODE> values are internally converted to 
 <CODE>PdfNumber</CODE> objects.
 @param values an array of  <CODE> float </CODE>  values to be added
 */
- (instancetype)initWithFloatArray:(IOSFloatArray *)values;

/*!
 @brief Constructs a <CODE>PdfArray</CODE>-object, containing all 
 <CODE>int</CODE> values in a specified array.
 The <CODE>int</CODE> values are internally converted to 
 <CODE>PdfNumber</CODE> objects.
 @param values an array of  <CODE> int </CODE>  values to be added
 */
- (instancetype)initWithIntArray:(IOSIntArray *)values;

/*!
 @brief Constructs an <CODE>PdfArray</CODE>-object, containing all 
 <CODE>PdfObject</CODE>s in a specified <CODE>PdfArray</CODE>.
 @param array a  <CODE> PdfArray </CODE>  to be added to the array
 */
- (instancetype)initWithComAowagieTextPdfPdfArray:(ComAowagieTextPdfPdfArray *)array;

/*!
 @brief Inserts the specified element at the specified position.
 Shifts the element currently at that position (if any) and
  any subsequent elements to the right (adds one to their indices).
 @param index The index at which the specified element is to be inserted
 @param element The element to be inserted
 @throw IndexOutOfBoundsExceptionif the specified index is larger than the
    last position currently set, plus 1.
 @since 2.1.5
 */
- (void)addWithInt:(jint)index
withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)element;

/*!
 @brief Checks if the <CODE>PdfArray</CODE> already contains a certain 
 <CODE>PdfObject</CODE>.
 @param object The  <CODE> PdfObject </CODE>  to check
 @return <CODE>true</CODE>
 */
- (jboolean)containsWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)object;

/*!
 @brief Returns a <CODE>PdfObject</CODE> as a <CODE>PdfDictionary</CODE>,
  resolving indirect references.
 The object corresponding to the specified index is retrieved and
  resolvedto a direct object.
  If it is a <CODE>PdfDictionary</CODE>, it is cast down and returned as such.
  Otherwise <CODE>null</CODE> is returned.
 @param idx The index of the  <CODE> PdfObject </CODE>  to be returned
 @return the corresponding <CODE>PdfDictionary</CODE> object,
    or <CODE>null</CODE>
 */
- (ComAowagieTextPdfPdfDictionary *)getAsDictWithInt:(jint)idx;

/*!
 @brief Returns a <CODE>PdfObject</CODE> as a <CODE>PdfIndirectReference</CODE>.
 The object corresponding to the specified index is retrieved.
  If it is a <CODE>PdfIndirectReference</CODE>, it is cast down and
  returned as such. Otherwise <CODE>null</CODE> is returned.
 @param idx The index of the  <CODE> PdfObject </CODE>  to be returned
 @return the corresponding <CODE>PdfIndirectReference</CODE> object,
    or <CODE>null</CODE>
 */
- (ComAowagieTextPdfPdfIndirectReference *)getAsIndirectObjectWithInt:(jint)idx;

/*!
 @brief Returns a <CODE>PdfObject</CODE> as a <CODE>PdfString</CODE>,
  resolving indirect references.
 The object corresponding to the specified index is retrieved and
  resolved to a direct object.
  If it is a <CODE>PdfString</CODE>, it is cast down and returned as such.
  Otherwise <CODE>null</CODE> is returned.
 @param idx The index of the  <CODE> PdfObject </CODE>  to be returned
 @return the corresponding <CODE>PdfString</CODE> object,
    or <CODE>null</CODE>
 */
- (ComAowagieTextPdfPdfString *)getAsStringWithInt:(jint)idx;

/*!
 @brief Returns the <CODE>PdfObject</CODE> with the specified index, resolving
  a possible indirect reference to a direct object.
 Thus this method will never return a <CODE>PdfIndirectReference</CODE>
  object.
 @param idx The index of the  <CODE> PdfObject </CODE>  to be returned
 @return A direct <CODE>PdfObject</CODE> or <CODE>null</CODE>
 */
- (ComAowagieTextPdfPdfObject *)getDirectObjectWithInt:(jint)idx;

/*!
 @brief Remove the element at the specified position from the array.
 Shifts any subsequent elements to the left (subtracts one from their
  indices).
 @param idx The index of the element to be removed.
 @return Pdf object
 @since 2.1.5
 */
- (ComAowagieTextPdfPdfObject *)removeWithInt:(jint)idx;

/*!
 @brief Overwrites a specified location of the array, returning the previous
  value
 @param idx The index of the element to be overwritten
 @param obj new value for the specified index
 @throw IndexOutOfBoundsExceptionif the specified position doesn't exist
 @return the previous value
 @since 2.1.5
 */
- (ComAowagieTextPdfPdfObject *)setWithInt:(jint)idx
            withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0
              withByteArray:(IOSByteArray *)arg1 NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0
               withNSString:(NSString *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfPdfArray)

FOUNDATION_EXPORT void ComAowagieTextPdfPdfArray_init(ComAowagieTextPdfPdfArray *self);

FOUNDATION_EXPORT ComAowagieTextPdfPdfArray *new_ComAowagieTextPdfPdfArray_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfArray *create_ComAowagieTextPdfPdfArray_init(void);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfArray_initWithComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfArray *self, ComAowagieTextPdfPdfObject *object);

FOUNDATION_EXPORT ComAowagieTextPdfPdfArray *new_ComAowagieTextPdfPdfArray_initWithComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfObject *object) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfArray *create_ComAowagieTextPdfPdfArray_initWithComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfObject *object);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfArray_initWithFloatArray_(ComAowagieTextPdfPdfArray *self, IOSFloatArray *values);

FOUNDATION_EXPORT ComAowagieTextPdfPdfArray *new_ComAowagieTextPdfPdfArray_initWithFloatArray_(IOSFloatArray *values) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfArray *create_ComAowagieTextPdfPdfArray_initWithFloatArray_(IOSFloatArray *values);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfArray_initWithIntArray_(ComAowagieTextPdfPdfArray *self, IOSIntArray *values);

FOUNDATION_EXPORT ComAowagieTextPdfPdfArray *new_ComAowagieTextPdfPdfArray_initWithIntArray_(IOSIntArray *values) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfArray *create_ComAowagieTextPdfPdfArray_initWithIntArray_(IOSIntArray *values);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfArray_initWithComAowagieTextPdfPdfArray_(ComAowagieTextPdfPdfArray *self, ComAowagieTextPdfPdfArray *array);

FOUNDATION_EXPORT ComAowagieTextPdfPdfArray *new_ComAowagieTextPdfPdfArray_initWithComAowagieTextPdfPdfArray_(ComAowagieTextPdfPdfArray *array) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfArray *create_ComAowagieTextPdfPdfArray_initWithComAowagieTextPdfPdfArray_(ComAowagieTextPdfPdfArray *array);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfArray)

#endif

#pragma pop_macro("INCLUDE_ALL_ComAowagieTextPdfPdfArray")
