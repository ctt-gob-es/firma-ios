//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfStamper.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/DocWriter.h"
#include "com/aowagie/text/DocumentException.h"
#include "com/aowagie/text/ExceptionConverter.h"
#include "com/aowagie/text/Rectangle.h"
#include "com/aowagie/text/pdf/AcroFields.h"
#include "com/aowagie/text/pdf/ByteBuffer.h"
#include "com/aowagie/text/pdf/PRAcroForm.h"
#include "com/aowagie/text/pdf/PdfAnnotation.h"
#include "com/aowagie/text/pdf/PdfContentByte.h"
#include "com/aowagie/text/pdf/PdfDictionary.h"
#include "com/aowagie/text/pdf/PdfFileSpecification.h"
#include "com/aowagie/text/pdf/PdfLiteral.h"
#include "com/aowagie/text/pdf/PdfName.h"
#include "com/aowagie/text/pdf/PdfObject.h"
#include "com/aowagie/text/pdf/PdfPKCS7.h"
#include "com/aowagie/text/pdf/PdfReader.h"
#include "com/aowagie/text/pdf/PdfSigGenericPKCS.h"
#include "com/aowagie/text/pdf/PdfSignatureAppearance.h"
#include "com/aowagie/text/pdf/PdfStamper.h"
#include "com/aowagie/text/pdf/PdfStamperImp.h"
#include "com/aowagie/text/pdf/PdfString.h"
#include "com/aowagie/text/pdf/PdfWriter.h"
#include "java/io/File.h"
#include "java/io/FileOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/System.h"
#include "java/security/SignatureException.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/PdfStamper must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfPdfStamper () {
 @public
  /*!
   @brief The writer
   */
  ComAowagieTextPdfPdfStamperImp *stamper_;
  id<JavaUtilMap> moreInfo_;
  jboolean hasSignature_;
  ComAowagieTextPdfPdfSignatureAppearance *sigApp_;
}

/*!
 @brief Starts the process of adding extra content to an existing PDF
  document, possibly as a new revision.
 @param reader the original document. It cannot be reused
 @param os the output stream
 @param pdfVersion the new pdf version or '\0' to keep the same version as the original  document
 @param append if  <CODE> true </CODE>  appends the document changes as a new revision. This is
   only useful for multiple signatures as nothing is gained in speed or memory
 @param globalDate Date
 @throw DocumentExceptionon error
 @throw IOExceptionon error
 */
- (instancetype)initWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader
                            withJavaIoOutputStream:(JavaIoOutputStream *)os
                                          withChar:(jchar)pdfVersion
                                       withBoolean:(jboolean)append
                              withJavaUtilCalendar:(JavaUtilCalendar *)globalDate;

/*!
 @brief Adds a file attachment at the document level.Existing attachments will be kept.
 @param description_ the file description
 @param fs the file specification
 @throw IOExceptionon error
 */
- (void)addFileAttachmentWithNSString:(NSString *)description_
withComAowagieTextPdfPdfFileSpecification:(ComAowagieTextPdfPdfFileSpecification *)fs;

+ (id<JavaUtilList>)getFieldsWithSignatureNameWithComAowagieTextPdfPRAcroForm:(ComAowagieTextPdfPRAcroForm *)acroForm;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfStamper, stamper_, ComAowagieTextPdfPdfStamperImp *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfStamper, moreInfo_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfStamper, sigApp_, ComAowagieTextPdfPdfSignatureAppearance *)

__attribute__((unused)) static void ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withBoolean_withJavaUtilCalendar_(ComAowagieTextPdfPdfStamper *self, ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os, jchar pdfVersion, jboolean append, JavaUtilCalendar *globalDate);

__attribute__((unused)) static ComAowagieTextPdfPdfStamper *new_ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withBoolean_withJavaUtilCalendar_(ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os, jchar pdfVersion, jboolean append, JavaUtilCalendar *globalDate) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfPdfStamper *create_ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withBoolean_withJavaUtilCalendar_(ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os, jchar pdfVersion, jboolean append, JavaUtilCalendar *globalDate);

__attribute__((unused)) static void ComAowagieTextPdfPdfStamper_addFileAttachmentWithNSString_withComAowagieTextPdfPdfFileSpecification_(ComAowagieTextPdfPdfStamper *self, NSString *description_, ComAowagieTextPdfPdfFileSpecification *fs);

__attribute__((unused)) static id<JavaUtilList> ComAowagieTextPdfPdfStamper_getFieldsWithSignatureNameWithComAowagieTextPdfPRAcroForm_(ComAowagieTextPdfPRAcroForm *acroForm);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfStamper.java"


#line 78
@implementation ComAowagieTextPdfPdfStamper


#line 95
- (instancetype)initWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader
                            withJavaIoOutputStream:(JavaIoOutputStream *)os
                              withJavaUtilCalendar:(JavaUtilCalendar *)globalDate {
  ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withJavaUtilCalendar_(self, reader, os, globalDate);
  return self;
}


#line 106
- (instancetype)initWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader
                            withJavaIoOutputStream:(JavaIoOutputStream *)os {
  ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_(self, reader, os);
  return self;
}


#line 123
- (instancetype)initWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader
                            withJavaIoOutputStream:(JavaIoOutputStream *)os
                                          withChar:(jchar)pdfVersion
                                       withBoolean:(jboolean)append
                              withJavaUtilCalendar:(JavaUtilCalendar *)globalDate {
  ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withBoolean_withJavaUtilCalendar_(self, reader, os, pdfVersion, append, globalDate);
  return self;
}


#line 130
- (id<JavaUtilMap>)getMoreInfo {
  return self->moreInfo_;
}


#line 138
- (void)setMoreInfoWithJavaUtilMap:(id<JavaUtilMap>)moreInfo {
  self->moreInfo_ = moreInfo;
}


#line 149
- (void)insertPageWithInt:(jint)pageNumber
withComAowagieTextRectangle:(ComAowagieTextRectangle *)mediabox {
  
#line 150
  [((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) insertPageWithInt:pageNumber withComAowagieTextRectangle:mediabox];
}


#line 157
- (ComAowagieTextPdfPdfSignatureAppearance *)getSignatureAppearance {
  return self->sigApp_;
}


#line 168
- (void)close {
  [self closeWithJavaUtilCalendar:new_JavaUtilGregorianCalendar_init()];
}


#line 180
- (void)closeWithJavaUtilCalendar:(JavaUtilCalendar *)globalDate {
  if (!self->hasSignature_) {
    [((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) closeWithJavaUtilMap:self->moreInfo_ withJavaUtilCalendar:globalDate];
    return;
  }
  [((ComAowagieTextPdfPdfSignatureAppearance *) nil_chk(self->sigApp_)) preCloseWithJavaUtilCalendar:globalDate];
  ComAowagieTextPdfPdfSigGenericPKCS *sig = [((ComAowagieTextPdfPdfSignatureAppearance *) nil_chk(self->sigApp_)) getSigStandard];
  ComAowagieTextPdfPdfLiteral *lit = (ComAowagieTextPdfPdfLiteral *) cast_chk([((ComAowagieTextPdfPdfSigGenericPKCS *) nil_chk(sig)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CONTENTS)], [ComAowagieTextPdfPdfLiteral class]);
  jint totalBuf = JreIntDiv(([((ComAowagieTextPdfPdfLiteral *) nil_chk(lit)) getPosLength] - 2), 2);
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:8192];
  jint n;
  JavaIoInputStream *inp = [((ComAowagieTextPdfPdfSignatureAppearance *) nil_chk(self->sigApp_)) getRangeStream];
  @try {
    while ((n = [((JavaIoInputStream *) nil_chk(inp)) readWithByteArray:buf]) > 0) {
      [((ComAowagieTextPdfPdfPKCS7 *) nil_chk([sig getSigner])) updateWithByteArray:buf withInt:0 withInt:n];
    }
  }
  @catch (JavaSecuritySignatureException *se) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(se);
  }
  buf = [IOSByteArray newArrayWithLength:totalBuf];
  IOSByteArray *bsig = [sig getSignerContents];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bsig, 0, buf, 0, ((IOSByteArray *) nil_chk(bsig))->size_);
  ComAowagieTextPdfPdfString *str = new_ComAowagieTextPdfPdfString_initWithByteArray_(buf);
  (void) [str setHexWritingWithBoolean:true];
  ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_init();
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CONTENTS) withComAowagieTextPdfPdfObject:str];
  [((ComAowagieTextPdfPdfSignatureAppearance *) nil_chk(self->sigApp_)) closeWithComAowagieTextPdfPdfDictionary:dic];
  [((ComAowagieTextPdfPdfReader *) nil_chk(((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_))->reader_)) close];
}


#line 215
- (jboolean)isRotateContents {
  return [((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) isRotateContents];
}


#line 224
- (void)setRotateContentsWithBoolean:(jboolean)rotateContents {
  [((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) setRotateContentsWithBoolean:rotateContents];
}


#line 240
- (void)setEncryptionWithByteArray:(IOSByteArray *)userPassword
                     withByteArray:(IOSByteArray *)ownerPassword
                           withInt:(jint)permissions
                       withBoolean:(jboolean)strength128Bits {
  
#line 241
  if ([((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) isAppend]) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(@"Append mode does not support changing the encryption status.");
  }
  if ([self->stamper_ isContentWritten]) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(@"Content was already written to the output.");
  }
  [self->stamper_ setEncryptionWithByteArray:userPassword withByteArray:ownerPassword withInt:permissions withInt:strength128Bits ? ComAowagieTextPdfPdfWriter_STANDARD_ENCRYPTION_128 : ComAowagieTextPdfPdfWriter_STANDARD_ENCRYPTION_40];
}


#line 263
- (void)setEncryptionWithByteArray:(IOSByteArray *)userPassword
                     withByteArray:(IOSByteArray *)ownerPassword
                           withInt:(jint)permissions
                           withInt:(jint)encryptionType {
  
#line 265
  if ([((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) isAppend]) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(@"Append mode does not support changing the encryption status.");
  }
  if ([self->stamper_ isContentWritten]) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(@"Content was already written to the output.");
  }
  [self->stamper_ setEncryptionWithByteArray:userPassword withByteArray:ownerPassword withInt:permissions withInt:encryptionType];
}


#line 287
- (void)setEncryptionWithBoolean:(jboolean)strength
                    withNSString:(NSString *)userPassword
                    withNSString:(NSString *)ownerPassword
                         withInt:(jint)permissions {
  
#line 288
  [self setEncryptionWithByteArray:ComAowagieTextDocWriter_getISOBytesWithNSString_(userPassword) withByteArray:ComAowagieTextDocWriter_getISOBytesWithNSString_(ownerPassword) withInt:permissions withBoolean:strength];
}


#line 305
- (void)setEncryptionWithInt:(jint)encryptionType
                withNSString:(NSString *)userPassword
                withNSString:(NSString *)ownerPassword
                     withInt:(jint)permissions {
  
#line 306
  [self setEncryptionWithByteArray:ComAowagieTextDocWriter_getISOBytesWithNSString_(userPassword) withByteArray:ComAowagieTextDocWriter_getISOBytesWithNSString_(ownerPassword) withInt:permissions withInt:encryptionType];
}


#line 322
- (void)setEncryptionWithJavaSecurityCertCertificateArray:(IOSObjectArray *)certs
                                             withIntArray:(IOSIntArray *)permissions
                                                  withInt:(jint)encryptionType {
  
#line 324
  if ([((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) isAppend]) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(@"Append mode does not support changing the encryption status.");
  }
  if ([self->stamper_ isContentWritten]) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(@"Content was already written to the output.");
  }
  [self->stamper_ setEncryptionWithJavaSecurityCertCertificateArray:certs withIntArray:permissions withInt:encryptionType];
}


#line 338
- (ComAowagieTextPdfPdfWriter *)getWriter {
  return self->stamper_;
}


#line 345
- (ComAowagieTextPdfPdfReader *)getReader {
  return ((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_))->reader_;
}


#line 353
- (ComAowagieTextPdfAcroFields *)getAcroFields {
  return [((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) getAcroFields];
}


#line 362
- (void)setFormFlatteningWithBoolean:(jboolean)flat {
  [((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) setFormFlatteningWithBoolean:flat];
}


#line 370
- (void)setFreeTextFlatteningWithBoolean:(jboolean)flat {
  [((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) setFreeTextFlatteningWithBoolean:flat];
}


#line 378
- (void)addAnnotationWithComAowagieTextPdfPdfAnnotation:(ComAowagieTextPdfPdfAnnotation *)annot
                                                withInt:(jint)page {
  
#line 379
  [((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) addAnnotationWithComAowagieTextPdfPdfAnnotation:annot withInt:page];
}

- (void)setOutlinesWithJavaUtilList:(id<JavaUtilList>)outlines {
  [((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) setOutlinesWithJavaUtilList:outlines];
}


#line 394
- (void)addFileAttachmentWithNSString:(NSString *)description_
withComAowagieTextPdfPdfFileSpecification:(ComAowagieTextPdfPdfFileSpecification *)fs {
  ComAowagieTextPdfPdfStamper_addFileAttachmentWithNSString_withComAowagieTextPdfPdfFileSpecification_(self, description_, fs);
}


#line 401
- (void)setViewerPreferencesWithInt:(jint)preferences {
  
#line 403
  [((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) setViewerPreferencesWithInt:preferences];
}


#line 412
- (void)addViewerPreferenceWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key
                         withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)value {
  [((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) addViewerPreferenceWithComAowagieTextPdfPdfName:key withComAowagieTextPdfPdfObject:value];
}


#line 422
- (void)setXmpMetadataWithByteArray:(IOSByteArray *)xmp {
  [((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) setXmpMetadataWithByteArray:xmp];
}


#line 430
- (jboolean)isFullCompression {
  return [((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) isFullCompression];
}


#line 438
- (void)setFullCompression {
  if ([((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) isAppend]) {
    return;
  }
  [self->stamper_ setFullCompression];
}


#line 489
+ (ComAowagieTextPdfPdfStamper *)createSignatureWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader
                                                        withJavaIoOutputStream:(JavaIoOutputStream *)os
                                                                      withChar:(jchar)pdfVersion
                                                                withJavaIoFile:(JavaIoFile *)tempFile
                                                                   withBoolean:(jboolean)append {
  return ComAowagieTextPdfPdfStamper_createSignatureWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withJavaIoFile_withBoolean_(reader, os, pdfVersion, tempFile, append);
}


#line 536
+ (ComAowagieTextPdfPdfStamper *)createSignatureWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader
                                                        withJavaIoOutputStream:(JavaIoOutputStream *)os
                                                                      withChar:(jchar)pdfVersion
                                                                withJavaIoFile:(JavaIoFile *)tempFile
                                                                   withBoolean:(jboolean)append
                                                          withJavaUtilCalendar:(JavaUtilCalendar *)globalDate {
  return ComAowagieTextPdfPdfStamper_createSignatureWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withJavaIoFile_withBoolean_withJavaUtilCalendar_(reader, os, pdfVersion, tempFile, append, globalDate);
}


#line 574
+ (id<JavaUtilList>)getFieldsWithSignatureNameWithComAowagieTextPdfPRAcroForm:(ComAowagieTextPdfPRAcroForm *)acroForm {
  return ComAowagieTextPdfPdfStamper_getFieldsWithSignatureNameWithComAowagieTextPdfPRAcroForm_(acroForm);
}


#line 597
- (ComAowagieTextPdfPdfContentByte *)getOverContentWithInt:(jint)pageNum {
  return [((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) getOverContentWithInt:pageNum];
}


#line 607
- (id<JavaUtilMap>)getPdfLayers {
  return [((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) getPdfLayers];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, 1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfSignatureAppearance;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 13, 14, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 15, 14, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 16, 14, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 17, 14, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 18, 14, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfWriter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfAcroFields;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 26, 27, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfStamper;", 0x9, 34, 35, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfStamper;", 0x9, 34, 36, 1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 37, 38, -1, 39, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfContentByte;", 0x1, 40, 29, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComAowagieTextPdfPdfReader:withJavaIoOutputStream:withJavaUtilCalendar:);
  methods[1].selector = @selector(initWithComAowagieTextPdfPdfReader:withJavaIoOutputStream:);
  methods[2].selector = @selector(initWithComAowagieTextPdfPdfReader:withJavaIoOutputStream:withChar:withBoolean:withJavaUtilCalendar:);
  methods[3].selector = @selector(getMoreInfo);
  methods[4].selector = @selector(setMoreInfoWithJavaUtilMap:);
  methods[5].selector = @selector(insertPageWithInt:withComAowagieTextRectangle:);
  methods[6].selector = @selector(getSignatureAppearance);
  methods[7].selector = @selector(close);
  methods[8].selector = @selector(closeWithJavaUtilCalendar:);
  methods[9].selector = @selector(isRotateContents);
  methods[10].selector = @selector(setRotateContentsWithBoolean:);
  methods[11].selector = @selector(setEncryptionWithByteArray:withByteArray:withInt:withBoolean:);
  methods[12].selector = @selector(setEncryptionWithByteArray:withByteArray:withInt:withInt:);
  methods[13].selector = @selector(setEncryptionWithBoolean:withNSString:withNSString:withInt:);
  methods[14].selector = @selector(setEncryptionWithInt:withNSString:withNSString:withInt:);
  methods[15].selector = @selector(setEncryptionWithJavaSecurityCertCertificateArray:withIntArray:withInt:);
  methods[16].selector = @selector(getWriter);
  methods[17].selector = @selector(getReader);
  methods[18].selector = @selector(getAcroFields);
  methods[19].selector = @selector(setFormFlatteningWithBoolean:);
  methods[20].selector = @selector(setFreeTextFlatteningWithBoolean:);
  methods[21].selector = @selector(addAnnotationWithComAowagieTextPdfPdfAnnotation:withInt:);
  methods[22].selector = @selector(setOutlinesWithJavaUtilList:);
  methods[23].selector = @selector(addFileAttachmentWithNSString:withComAowagieTextPdfPdfFileSpecification:);
  methods[24].selector = @selector(setViewerPreferencesWithInt:);
  methods[25].selector = @selector(addViewerPreferenceWithComAowagieTextPdfPdfName:withComAowagieTextPdfPdfObject:);
  methods[26].selector = @selector(setXmpMetadataWithByteArray:);
  methods[27].selector = @selector(isFullCompression);
  methods[28].selector = @selector(setFullCompression);
  methods[29].selector = @selector(createSignatureWithComAowagieTextPdfPdfReader:withJavaIoOutputStream:withChar:withJavaIoFile:withBoolean:);
  methods[30].selector = @selector(createSignatureWithComAowagieTextPdfPdfReader:withJavaIoOutputStream:withChar:withJavaIoFile:withBoolean:withJavaUtilCalendar:);
  methods[31].selector = @selector(getFieldsWithSignatureNameWithComAowagieTextPdfPRAcroForm:);
  methods[32].selector = @selector(getOverContentWithInt:);
  methods[33].selector = @selector(getPdfLayers);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stamper_", "LComAowagieTextPdfPdfStamperImp;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "moreInfo_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasSignature_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sigApp_", "LComAowagieTextPdfPdfSignatureAppearance;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfPdfReader;LJavaIoOutputStream;LJavaUtilCalendar;", "LComAowagieTextDocumentException;LJavaIoIOException;", "LComAowagieTextPdfPdfReader;LJavaIoOutputStream;", "LComAowagieTextPdfPdfReader;LJavaIoOutputStream;CZLJavaUtilCalendar;", "setMoreInfo", "LJavaUtilMap;", "insertPage", "ILComAowagieTextRectangle;", "close", "LJavaUtilCalendar;", "setRotateContents", "Z", "setEncryption", "[B[BIZ", "LComAowagieTextDocumentException;", "[B[BII", "ZLNSString;LNSString;I", "ILNSString;LNSString;I", "[LJavaSecurityCertCertificate;[II", "setFormFlattening", "setFreeTextFlattening", "addAnnotation", "LComAowagieTextPdfPdfAnnotation;I", "setOutlines", "LJavaUtilList;", "addFileAttachment", "LNSString;LComAowagieTextPdfPdfFileSpecification;", "LJavaIoIOException;", "setViewerPreferences", "I", "addViewerPreference", "LComAowagieTextPdfPdfName;LComAowagieTextPdfPdfObject;", "setXmpMetadata", "[B", "createSignature", "LComAowagieTextPdfPdfReader;LJavaIoOutputStream;CLJavaIoFile;Z", "LComAowagieTextPdfPdfReader;LJavaIoOutputStream;CLJavaIoFile;ZLJavaUtilCalendar;", "getFieldsWithSignatureName", "LComAowagieTextPdfPRAcroForm;", "(Lcom/aowagie/text/pdf/PRAcroForm;)Ljava/util/List<Lcom/aowagie/text/pdf/PRAcroForm$FieldInformation;>;", "getOverContent" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfStamper = { "PdfStamper", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x1, 34, 4, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfStamper;
}

@end


#line 95
void ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withJavaUtilCalendar_(ComAowagieTextPdfPdfStamper *self, ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os, JavaUtilCalendar *globalDate) {
  NSObject_init(self);
  
#line 96
  self->stamper_ = new_ComAowagieTextPdfPdfStamperImp_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withBoolean_withJavaUtilCalendar_(reader, os, 0x0000, false, globalDate);
}


#line 95
ComAowagieTextPdfPdfStamper *new_ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withJavaUtilCalendar_(ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os, JavaUtilCalendar *globalDate) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfStamper, initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withJavaUtilCalendar_, reader, os, globalDate)
}


#line 95
ComAowagieTextPdfPdfStamper *create_ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withJavaUtilCalendar_(ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os, JavaUtilCalendar *globalDate) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfStamper, initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withJavaUtilCalendar_, reader, os, globalDate)
}


#line 106
void ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_(ComAowagieTextPdfPdfStamper *self, ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os) {
  NSObject_init(self);
  
#line 107
  self->stamper_ = new_ComAowagieTextPdfPdfStamperImp_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withBoolean_withJavaUtilCalendar_(reader, os, 0x0000, false, new_JavaUtilGregorianCalendar_init());
}


#line 106
ComAowagieTextPdfPdfStamper *new_ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_(ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfStamper, initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_, reader, os)
}


#line 106
ComAowagieTextPdfPdfStamper *create_ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_(ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfStamper, initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_, reader, os)
}


#line 123
void ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withBoolean_withJavaUtilCalendar_(ComAowagieTextPdfPdfStamper *self, ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os, jchar pdfVersion, jboolean append, JavaUtilCalendar *globalDate) {
  NSObject_init(self);
  
#line 124
  self->stamper_ = new_ComAowagieTextPdfPdfStamperImp_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withBoolean_withJavaUtilCalendar_(reader, os, pdfVersion, append, globalDate);
}


#line 123
ComAowagieTextPdfPdfStamper *new_ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withBoolean_withJavaUtilCalendar_(ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os, jchar pdfVersion, jboolean append, JavaUtilCalendar *globalDate) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfStamper, initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withBoolean_withJavaUtilCalendar_, reader, os, pdfVersion, append, globalDate)
}


#line 123
ComAowagieTextPdfPdfStamper *create_ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withBoolean_withJavaUtilCalendar_(ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os, jchar pdfVersion, jboolean append, JavaUtilCalendar *globalDate) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfStamper, initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withBoolean_withJavaUtilCalendar_, reader, os, pdfVersion, append, globalDate)
}


#line 394
void ComAowagieTextPdfPdfStamper_addFileAttachmentWithNSString_withComAowagieTextPdfPdfFileSpecification_(ComAowagieTextPdfPdfStamper *self, NSString *description_, ComAowagieTextPdfPdfFileSpecification *fs) {
  [((ComAowagieTextPdfPdfStamperImp *) nil_chk(self->stamper_)) addFileAttachmentWithNSString:description_ withComAowagieTextPdfPdfFileSpecification:fs];
}


#line 489
ComAowagieTextPdfPdfStamper *ComAowagieTextPdfPdfStamper_createSignatureWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withJavaIoFile_withBoolean_(ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os, jchar pdfVersion, JavaIoFile *tempFile, jboolean append) {
  ComAowagieTextPdfPdfStamper_initialize();
  
#line 494
  return ComAowagieTextPdfPdfStamper_createSignatureWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withJavaIoFile_withBoolean_withJavaUtilCalendar_(reader, os, pdfVersion, tempFile, append, nil);
}


#line 536
ComAowagieTextPdfPdfStamper *ComAowagieTextPdfPdfStamper_createSignatureWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withJavaIoFile_withBoolean_withJavaUtilCalendar_(ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os, jchar pdfVersion, JavaIoFile *tempFile, jboolean append, JavaUtilCalendar *globalDate) {
  ComAowagieTextPdfPdfStamper_initialize();
  
#line 542
  JavaUtilCalendar *gDate = globalDate != nil ? globalDate : new_JavaUtilGregorianCalendar_init();
  ComAowagieTextPdfPdfStamper *stp;
  if (tempFile == nil) {
    ComAowagieTextPdfByteBuffer *bout = new_ComAowagieTextPdfByteBuffer_init();
    stp = new_ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withBoolean_withJavaUtilCalendar_(reader, bout, pdfVersion, append, gDate);
    
#line 548
    id<JavaUtilList> formFieldNames = ComAowagieTextPdfPdfStamper_getFieldsWithSignatureNameWithComAowagieTextPdfPRAcroForm_([((ComAowagieTextPdfPdfReader *) nil_chk(reader)) getAcroForm]);
    
#line 550
    stp->sigApp_ = new_ComAowagieTextPdfPdfSignatureAppearance_initWithComAowagieTextPdfPdfStamperImp_withJavaUtilCalendar_withJavaUtilList_(stp->stamper_, gDate, formFieldNames);
    [stp->sigApp_ setSigoutWithComAowagieTextPdfByteBuffer:bout];
  }
  else {
    if ([tempFile isDirectory]) {
      tempFile = JavaIoFile_createTempFileWithNSString_withNSString_withJavaIoFile_(@"pdf", nil, tempFile);
    }
    JavaIoFileOutputStream *fout = new_JavaIoFileOutputStream_initWithJavaIoFile_(tempFile);
    stp = new_ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withBoolean_withJavaUtilCalendar_(reader, fout, pdfVersion, append, globalDate);
    stp->sigApp_ = new_ComAowagieTextPdfPdfSignatureAppearance_initWithComAowagieTextPdfPdfStamperImp_withJavaUtilCalendar_(stp->stamper_, globalDate);
    [stp->sigApp_ setTempFileWithJavaIoFile:tempFile];
  }
  [((ComAowagieTextPdfPdfSignatureAppearance *) nil_chk(stp->sigApp_)) setOriginaloutWithJavaIoOutputStream:os];
  [((ComAowagieTextPdfPdfSignatureAppearance *) nil_chk(stp->sigApp_)) setStamperWithComAowagieTextPdfPdfStamper:stp];
  stp->hasSignature_ = true;
  ComAowagieTextPdfPdfDictionary *catalog = [((ComAowagieTextPdfPdfReader *) nil_chk(reader)) getCatalog];
  ComAowagieTextPdfPdfDictionary *acroForm = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(catalog)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ACROFORM)], catalog), [ComAowagieTextPdfPdfDictionary class]);
  if (acroForm != nil) {
    [acroForm removeWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, NEEDAPPEARANCES)];
    [((ComAowagieTextPdfPdfStamperImp *) nil_chk(stp->stamper_)) markUsedWithComAowagieTextPdfPdfObject:acroForm];
  }
  return stp;
}

id<JavaUtilList> ComAowagieTextPdfPdfStamper_getFieldsWithSignatureNameWithComAowagieTextPdfPRAcroForm_(ComAowagieTextPdfPRAcroForm *acroForm) {
  ComAowagieTextPdfPdfStamper_initialize();
  id<JavaUtilList> resultFormFields = new_JavaUtilArrayList_init();
  
#line 578
  if (acroForm != nil) {
    id<JavaUtilList> formFields = [acroForm getFields];
    for (id __strong field in nil_chk(formFields)) {
      ComAowagieTextPdfPRAcroForm_FieldInformation *fieldInfo = (ComAowagieTextPdfPRAcroForm_FieldInformation *) cast_chk(field, [ComAowagieTextPdfPRAcroForm_FieldInformation class]);
      if ([((ComAowagieTextPdfPRAcroForm_FieldInformation *) nil_chk(fieldInfo)) getName] != nil && [((NSString *) nil_chk([fieldInfo getName])) java_hasPrefix:@"Signature"]) {
        [resultFormFields addWithId:fieldInfo];
      }
    }
  }
  
#line 588
  return resultFormFields;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfStamper)
