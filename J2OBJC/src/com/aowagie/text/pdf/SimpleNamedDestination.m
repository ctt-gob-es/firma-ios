//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/SimpleNamedDestination.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/pdf/PdfArray.h"
#include "com/aowagie/text/pdf/PdfIndirectReference.h"
#include "com/aowagie/text/pdf/PdfName.h"
#include "com/aowagie/text/pdf/PdfNull.h"
#include "com/aowagie/text/pdf/PdfNumber.h"
#include "com/aowagie/text/pdf/PdfWriter.h"
#include "com/aowagie/text/pdf/SimpleNamedDestination.h"
#include "com/aowagie/text/xml/simpleparser/SimpleXMLParser.h"
#include "java/io/Writer.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/SimpleNamedDestination must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfSimpleNamedDestination () {
 @public
  JavaUtilHashMap *xmlNames_;
  JavaUtilHashMap *xmlLast_;
}

- (instancetype)initPackagePrivate;

/*!
 @brief Exports the destinations to XML.
 @param names the names
 @param wrt the export destination. The writer is not closed
 @param encoding the encoding according to IANA conventions
 @param onlyASCII codes above 127 will always be escaped with  &amp; #nn; if  <CODE> true </CODE> ,  whatever the encoding
 @throw IOExceptionon error
 */
+ (void)exportToXMLWithJavaUtilHashMap:(JavaUtilHashMap *)names
                      withJavaIoWriter:(JavaIoWriter *)wrt
                          withNSString:(NSString *)encoding
                           withBoolean:(jboolean)onlyASCII;

+ (ComAowagieTextPdfPdfArray *)createDestinationArrayWithNSString:(NSString *)value
                                   withComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfSimpleNamedDestination, xmlNames_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfSimpleNamedDestination, xmlLast_, JavaUtilHashMap *)

__attribute__((unused)) static void ComAowagieTextPdfSimpleNamedDestination_initPackagePrivate(ComAowagieTextPdfSimpleNamedDestination *self);

__attribute__((unused)) static ComAowagieTextPdfSimpleNamedDestination *new_ComAowagieTextPdfSimpleNamedDestination_initPackagePrivate(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfSimpleNamedDestination *create_ComAowagieTextPdfSimpleNamedDestination_initPackagePrivate(void);

__attribute__((unused)) static void ComAowagieTextPdfSimpleNamedDestination_exportToXMLWithJavaUtilHashMap_withJavaIoWriter_withNSString_withBoolean_(JavaUtilHashMap *names, JavaIoWriter *wrt, NSString *encoding, jboolean onlyASCII);

__attribute__((unused)) static ComAowagieTextPdfPdfArray *ComAowagieTextPdfSimpleNamedDestination_createDestinationArrayWithNSString_withComAowagieTextPdfPdfWriter_(NSString *value, ComAowagieTextPdfPdfWriter *writer);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/SimpleNamedDestination.java"


#line 64
@implementation ComAowagieTextPdfSimpleNamedDestination


#line 69
- (instancetype)initPackagePrivate {
  ComAowagieTextPdfSimpleNamedDestination_initPackagePrivate(self);
  return self;
}


#line 85
+ (void)exportToXMLWithJavaUtilHashMap:(JavaUtilHashMap *)names
                      withJavaIoWriter:(JavaIoWriter *)wrt
                          withNSString:(NSString *)encoding
                           withBoolean:(jboolean)onlyASCII {
  ComAowagieTextPdfSimpleNamedDestination_exportToXMLWithJavaUtilHashMap_withJavaIoWriter_withNSString_withBoolean_(names, wrt, encoding, onlyASCII);
}


#line 107
+ (ComAowagieTextPdfPdfArray *)createDestinationArrayWithNSString:(NSString *)value
                                   withComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer {
  return ComAowagieTextPdfSimpleNamedDestination_createDestinationArrayWithNSString_withComAowagieTextPdfPdfWriter_(value, writer);
}


#line 134
+ (NSString *)escapeBinaryStringWithNSString:(NSString *)s {
  return ComAowagieTextPdfSimpleNamedDestination_escapeBinaryStringWithNSString_(s);
}


#line 154
+ (NSString *)unEscapeBinaryStringWithNSString:(NSString *)s {
  return ComAowagieTextPdfSimpleNamedDestination_unEscapeBinaryStringWithNSString_(s);
}


#line 191
- (void)endDocument {
}


#line 195
- (void)endElementWithNSString:(NSString *)tag {
  
#line 197
  if ([((NSString *) nil_chk(tag)) isEqual:@"Destination"]) {
    if (self->xmlLast_ == nil && self->xmlNames_ != nil) {
      return;
    }
    else {
      
#line 201
      @throw new_JavaLangRuntimeException_initWithNSString_(@"Destination end tag out of place.");
    }
  }
  if (![tag isEqual:@"Name"]) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Invalid end tag - ", tag));
  }
  if (self->xmlLast_ == nil || self->xmlNames_ == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Name end tag out of place.");
  }
  if (![self->xmlLast_ containsKeyWithId:@"Page"]) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Page attribute missing.");
  }
  (void) [((JavaUtilHashMap *) nil_chk(self->xmlNames_)) putWithId:ComAowagieTextPdfSimpleNamedDestination_unEscapeBinaryStringWithNSString_((NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(self->xmlLast_)) getWithId:@"Name"], [NSString class])) withId:[((JavaUtilHashMap *) nil_chk(self->xmlLast_)) getWithId:@"Page"]];
  self->xmlLast_ = nil;
}


#line 217
- (void)startDocument {
}


#line 221
- (void)startElementWithNSString:(NSString *)tag
             withJavaUtilHashMap:(JavaUtilHashMap *)h {
  if (self->xmlNames_ == nil) {
    if ([((NSString *) nil_chk(tag)) isEqual:@"Destination"]) {
      self->xmlNames_ = new_JavaUtilLinkedHashMap_init();
      return;
    }
    else {
      
#line 228
      @throw new_JavaLangRuntimeException_initWithNSString_(@"Root element is not Destination.");
    }
  }
  if (![((NSString *) nil_chk(tag)) isEqual:@"Name"]) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$", @"Tag ", tag, @" not allowed."));
  }
  if (self->xmlLast_ != nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Nested tags are not allowed.");
  }
  self->xmlLast_ = new_JavaUtilLinkedHashMap_initWithJavaUtilMap_(h);
  (void) [self->xmlLast_ putWithId:@"Name" withId:@""];
}


#line 241
- (void)textWithNSString:(NSString *)str {
  
#line 243
  if (self->xmlLast_ == nil) {
    return;
  }
  NSString *name = (NSString *) cast_chk([self->xmlLast_ getWithId:@"Name"], [NSString class]);
  (void) JreStrAppendStrong(&name, "$", str);
  (void) [((JavaUtilHashMap *) nil_chk(self->xmlLast_)) putWithId:@"Name" withId:name];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 1, 2, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfArray;", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(exportToXMLWithJavaUtilHashMap:withJavaIoWriter:withNSString:withBoolean:);
  methods[2].selector = @selector(createDestinationArrayWithNSString:withComAowagieTextPdfPdfWriter:);
  methods[3].selector = @selector(escapeBinaryStringWithNSString:);
  methods[4].selector = @selector(unEscapeBinaryStringWithNSString:);
  methods[5].selector = @selector(endDocument);
  methods[6].selector = @selector(endElementWithNSString:);
  methods[7].selector = @selector(startDocument);
  methods[8].selector = @selector(startElementWithNSString:withJavaUtilHashMap:);
  methods[9].selector = @selector(textWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "xmlNames_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "xmlLast_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "exportToXML", "LJavaUtilHashMap;LJavaIoWriter;LNSString;Z", "LJavaIoIOException;", "createDestinationArray", "LNSString;LComAowagieTextPdfPdfWriter;", "escapeBinaryString", "LNSString;", "unEscapeBinaryString", "endElement", "startElement", "LNSString;LJavaUtilHashMap;", "text" };
  static const J2ObjcClassInfo _ComAowagieTextPdfSimpleNamedDestination = { "SimpleNamedDestination", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x10, 10, 2, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfSimpleNamedDestination;
}

@end


#line 69
void ComAowagieTextPdfSimpleNamedDestination_initPackagePrivate(ComAowagieTextPdfSimpleNamedDestination *self) {
  NSObject_init(self);
}


#line 69
ComAowagieTextPdfSimpleNamedDestination *new_ComAowagieTextPdfSimpleNamedDestination_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfSimpleNamedDestination, initPackagePrivate)
}


#line 69
ComAowagieTextPdfSimpleNamedDestination *create_ComAowagieTextPdfSimpleNamedDestination_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfSimpleNamedDestination, initPackagePrivate)
}


#line 85
void ComAowagieTextPdfSimpleNamedDestination_exportToXMLWithJavaUtilHashMap_withJavaIoWriter_withNSString_withBoolean_(JavaUtilHashMap *names, JavaIoWriter *wrt, NSString *encoding, jboolean onlyASCII) {
  ComAowagieTextPdfSimpleNamedDestination_initialize();
  
#line 86
  [((JavaIoWriter *) nil_chk(wrt)) writeWithNSString:@"<?xml version=\"1.0\" encoding=\""];
  [wrt writeWithNSString:ComAowagieTextXmlSimpleparserSimpleXMLParser_escapeXMLWithNSString_withBoolean_(encoding, onlyASCII)];
  [wrt writeWithNSString:@"\"?>\n<Destination>\n"];
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(names)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check([it next], JavaUtilMap_Entry_class_());
    NSString *key = (NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [NSString class]);
    NSString *value = (NSString *) cast_chk([entry_ getValue], [NSString class]);
    [wrt writeWithNSString:@"  <Name Page=\""];
    [wrt writeWithNSString:ComAowagieTextXmlSimpleparserSimpleXMLParser_escapeXMLWithNSString_withBoolean_(value, onlyASCII)];
    [wrt writeWithNSString:@"\">"];
    [wrt writeWithNSString:ComAowagieTextXmlSimpleparserSimpleXMLParser_escapeXMLWithNSString_withBoolean_(ComAowagieTextPdfSimpleNamedDestination_escapeBinaryStringWithNSString_(key), onlyASCII)];
    [wrt writeWithNSString:@"</Name>\n"];
  }
  [wrt writeWithNSString:@"</Destination>\n"];
  [wrt flush];
}


#line 107
ComAowagieTextPdfPdfArray *ComAowagieTextPdfSimpleNamedDestination_createDestinationArrayWithNSString_withComAowagieTextPdfPdfWriter_(NSString *value, ComAowagieTextPdfPdfWriter *writer) {
  ComAowagieTextPdfSimpleNamedDestination_initialize();
  
#line 108
  ComAowagieTextPdfPdfArray *ar = new_ComAowagieTextPdfPdfArray_init();
  JavaUtilStringTokenizer *tk = new_JavaUtilStringTokenizer_initWithNSString_(value);
  jint n = JavaLangInteger_parseIntWithNSString_([tk nextToken]);
  [ar addWithComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) getPageReferenceWithInt:n]];
  if (![tk hasMoreTokens]) {
    [ar addWithComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, XYZ)];
    [ar addWithFloatArray:[IOSFloatArray newArrayWithFloats:(jfloat[]){ 0, 10000, 0 } count:3]];
  }
  else {
    NSString *fn = [tk nextToken];
    if ([((NSString *) nil_chk(fn)) java_hasPrefix:@"/"]) {
      fn = [fn java_substring:1];
    }
    [ar addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(fn)];
    for (jint k = 0; k < 4 && [tk hasMoreTokens]; ++k) {
      fn = [tk nextToken];
      if ([((NSString *) nil_chk(fn)) isEqual:@"null"]) {
        [ar addWithComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfNull, PDFNULL)];
      }
      else {
        
#line 127
        [ar addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithNSString_(fn)];
      }
    }
  }
  return ar;
}


#line 134
NSString *ComAowagieTextPdfSimpleNamedDestination_escapeBinaryStringWithNSString_(NSString *s) {
  ComAowagieTextPdfSimpleNamedDestination_initialize();
  
#line 135
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  IOSCharArray *cc = [((NSString *) nil_chk(s)) java_toCharArray];
  jint len = ((IOSCharArray *) nil_chk(cc))->size_;
  for (jint k = 0; k < len; ++k) {
    jchar c = IOSCharArray_Get(cc, k);
    if (c < ' ') {
      (void) [buf appendWithChar:'\\'];
      NSString *octal = JreStrcat("$$", @"00", JavaLangInteger_toOctalStringWithInt_(c));
      (void) [buf appendWithNSString:[octal java_substring:[octal java_length] - 3]];
    }
    else if (c == '\\') {
      (void) [buf appendWithNSString:@"\\\\"];
    }
    else {
      
#line 148
      (void) [buf appendWithChar:c];
    }
  }
  return [buf description];
}


#line 154
NSString *ComAowagieTextPdfSimpleNamedDestination_unEscapeBinaryStringWithNSString_(NSString *s) {
  ComAowagieTextPdfSimpleNamedDestination_initialize();
  
#line 155
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  IOSCharArray *cc = [((NSString *) nil_chk(s)) java_toCharArray];
  jint len = ((IOSCharArray *) nil_chk(cc))->size_;
  for (jint k = 0; k < len; ++k) {
    jchar c = IOSCharArray_Get(cc, k);
    if (c == '\\') {
      if (++k >= len) {
        (void) [buf appendWithChar:'\\'];
        break;
      }
      c = IOSCharArray_Get(cc, k);
      if (c >= '0' && c <= '7') {
        jint n = c - '0';
        ++k;
        for (jint j = 0; j < 2 && k < len; ++j) {
          c = IOSCharArray_Get(cc, k);
          if (c >= '0' && c <= '7') {
            ++k;
            n = n * 8 + c - '0';
          }
          else {
            break;
          }
        }
        --k;
        (void) [buf appendWithChar:(jchar) n];
      }
      else {
        
#line 182
        (void) [buf appendWithChar:c];
      }
    }
    else {
      
#line 185
      (void) [buf appendWithChar:c];
    }
  }
  return [buf description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfSimpleNamedDestination)
