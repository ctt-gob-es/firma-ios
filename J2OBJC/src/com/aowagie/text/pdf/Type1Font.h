//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/Type1Font.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComAowagieTextPdfType1Font")
#ifdef RESTRICT_ComAowagieTextPdfType1Font
#define INCLUDE_ALL_ComAowagieTextPdfType1Font 0
#else
#define INCLUDE_ALL_ComAowagieTextPdfType1Font 1
#endif
#undef RESTRICT_ComAowagieTextPdfType1Font

#if !defined (ComAowagieTextPdfType1Font_) && (INCLUDE_ALL_ComAowagieTextPdfType1Font || defined(INCLUDE_ComAowagieTextPdfType1Font))
#define ComAowagieTextPdfType1Font_

#define RESTRICT_ComAowagieTextPdfBaseFont 1
#define INCLUDE_ComAowagieTextPdfBaseFont 1
#include "com/aowagie/text/pdf/BaseFont.h"

@class ComAowagieTextPdfPdfIndirectReference;
@class ComAowagieTextPdfPdfStream;
@class ComAowagieTextPdfPdfWriter;
@class IOSByteArray;
@class IOSIntArray;
@class IOSObjectArray;

/*!
 @brief Reads a Type1 font
 @author Paulo Soares (psoares@@consiste.pt)
 */
@interface ComAowagieTextPdfType1Font : ComAowagieTextPdfBaseFont

#pragma mark Public

/*!
 @brief Gets all the entries of the names-table.If it is a True Type font
  each array element will have {Name ID, Platform ID, Platform Encoding ID,
  Language ID, font name}.
 The interpretation of this values can be
  found in the Open Type specification, chapter 2, in the 'name' table.<br>
  For the other fonts the array has a single element with {"4", "", "", "",
  font name}.
 @return the full name of the font
 */
- (IOSObjectArray *)getAllNameEntries;

/*!
 @brief Gets the family name of the font.If it is a True Type font
  each array element will have {Platform ID, Platform Encoding ID,
  Language ID, font name}.
 The interpretation of this values can be
  found in the Open Type specification, chapter 2, in the 'name' table.<br>
  For the other fonts the array has a single element with {"", "", "",
  font name}.
 @return the family name of the font
 */
- (IOSObjectArray *)getFamilyFontName;

/*!
 @brief Gets the font parameter identified by <CODE>key</CODE>.Valid values
  for <CODE>key</CODE> are <CODE>ASCENT</CODE>, <CODE>CAPHEIGHT</CODE>, <CODE>DESCENT</CODE>,
  <CODE>ITALICANGLE</CODE>, <CODE>BBOXLLX</CODE>, <CODE>BBOXLLY</CODE>, <CODE>BBOXURX</CODE>
  and <CODE>BBOXURY</CODE>.
 @param key the parameter to be extracted
 @param fontSize the font size in points
 @return the parameter in points
 */
- (jfloat)getFontDescriptorWithInt:(jint)key
                         withFloat:(jfloat)fontSize;

/*!
 @brief Gets the full name of the font.If it is a True Type font
  each array element will have {Platform ID, Platform Encoding ID,
  Language ID, font name}.
 The interpretation of this values can be
  found in the Open Type specification, chapter 2, in the 'name' table.<br>
  For the other fonts the array has a single element with {"", "", "",
  font name}.
 @return the full name of the font
 */
- (IOSObjectArray *)getFullFontName;

/*!
 @brief If the embedded flag is <CODE>false</CODE> or if the font is
   one of the 14 built in types, it returns <CODE>null</CODE>,
  otherwise the font is read and output in a PdfStream object.
 @return the PdfStream containing the font or <CODE>null</CODE>
 @throw DocumentExceptionif there is an error reading the font
 @since 2.1.3
 */
- (ComAowagieTextPdfPdfStream *)getFullFontStream;

/*!
 @brief Gets the kerning between two Unicode characters.The characters
  are converted to names and this names are used to find the kerning
  pairs in the <CODE>HashMap</CODE> <CODE>KernPairs</CODE>.
 @param char1 the first char
 @param char2 the second char
 @return the kerning to be applied
 */
- (jint)getKerningWithInt:(jint)char1
                  withInt:(jint)char2;

/*!
 @brief Gets the postscript font name.
 @return the postscript font name
 */
- (NSString *)getPostscriptFontName;

/*!
 @brief Checks if the font has any kerning pairs.
 @return <CODE>true</CODE> if the font has any kerning pairs
 */
- (jboolean)hasKernPairs;

/*!
 @brief Sets the kerning between two Unicode chars.
 @param char1 the first char
 @param char2 the second char
 @param kern the kerning to apply in normalized 1000 units
 @return <code>true</code> if the kerning was applied, <code>false</code> otherwise
 */
- (jboolean)setKerningWithInt:(jint)char1
                      withInt:(jint)char2
                      withInt:(jint)kern;

/*!
 @brief Sets the font name that will appear in the pdf font dictionary.
 Use with care as it can easily make a font unreadable if not embedded.
 @param name the new font name
 */
- (void)setPostscriptFontNameWithNSString:(NSString *)name;

#pragma mark Protected

- (IOSIntArray *)getRawCharBBoxWithInt:(jint)c
                          withNSString:(NSString *)name;

#pragma mark Package-Private

/*!
 @brief Creates a new Type1 font.
 @param ttfAfm the AFM file if the input is made with a  <CODE> byte </CODE>  array
 @param pfb the PFB file if the input is made with a  <CODE> byte </CODE>  array
 @param afmFile the name of one of the 14 built-in fonts or the location of an AFM file. The file must end in '.afm'
 @param enc the encoding to be applied to this font
 @param emb true if the font is to be embedded in the PDF
 @param forceRead Force read
 @throw DocumentExceptionthe AFM file is invalid
 @throw IOExceptionthe AFM file could not be read
 @since 2.1.5
 */
- (instancetype)initPackagePrivateWithNSString:(NSString *)afmFile
                                  withNSString:(NSString *)enc
                                   withBoolean:(jboolean)emb
                                 withByteArray:(IOSByteArray *)ttfAfm
                                 withByteArray:(IOSByteArray *)pfb
                                   withBoolean:(jboolean)forceRead;

/*!
 @brief Gets the width from the font according to the <CODE>name</CODE> or,
  if the <CODE>name</CODE> is null, meaning it is a symbolic font,
  the char <CODE>c</CODE>.
 @param c the char if the font is symbolic
 @param name the glyph name
 @return the width of the char
 */
- (jint)getRawWidthWithInt:(jint)c
              withNSString:(NSString *)name;

/*!
 @brief Outputs to the writer the font dictionaries and streams.
 @param writer the writer for this document
 @param ref the font indirect reference
 @param params several parameters that depend on the font type
 @throw IOExceptionon error
 @throw DocumentExceptionerror in generating the object
 */
- (void)writeFontWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
      withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)ref
                              withNSObjectArray:(IOSObjectArray *)params;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfType1Font)

FOUNDATION_EXPORT void ComAowagieTextPdfType1Font_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withByteArray_withBoolean_(ComAowagieTextPdfType1Font *self, NSString *afmFile, NSString *enc, jboolean emb, IOSByteArray *ttfAfm, IOSByteArray *pfb, jboolean forceRead);

FOUNDATION_EXPORT ComAowagieTextPdfType1Font *new_ComAowagieTextPdfType1Font_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withByteArray_withBoolean_(NSString *afmFile, NSString *enc, jboolean emb, IOSByteArray *ttfAfm, IOSByteArray *pfb, jboolean forceRead) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfType1Font *create_ComAowagieTextPdfType1Font_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withByteArray_withBoolean_(NSString *afmFile, NSString *enc, jboolean emb, IOSByteArray *ttfAfm, IOSByteArray *pfb, jboolean forceRead);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfType1Font)

#endif

#pragma pop_macro("INCLUDE_ALL_ComAowagieTextPdfType1Font")
