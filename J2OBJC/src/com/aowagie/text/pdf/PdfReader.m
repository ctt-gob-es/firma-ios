//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfReader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/DocWriter.h"
#include "com/aowagie/text/ExceptionConverter.h"
#include "com/aowagie/text/PageSize.h"
#include "com/aowagie/text/Rectangle.h"
#include "com/aowagie/text/exceptions/BadPasswordException.h"
#include "com/aowagie/text/exceptions/ITextInvalidPdfException.h"
#include "com/aowagie/text/exceptions/UnsupportedPdfException.h"
#include "com/aowagie/text/pdf/AcroFields.h"
#include "com/aowagie/text/pdf/BaseFont.h"
#include "com/aowagie/text/pdf/IntHashtable.h"
#include "com/aowagie/text/pdf/LZWDecoder.h"
#include "com/aowagie/text/pdf/PRAcroForm.h"
#include "com/aowagie/text/pdf/PRIndirectReference.h"
#include "com/aowagie/text/pdf/PRStream.h"
#include "com/aowagie/text/pdf/PRTokeniser.h"
#include "com/aowagie/text/pdf/PdfArray.h"
#include "com/aowagie/text/pdf/PdfBoolean.h"
#include "com/aowagie/text/pdf/PdfDictionary.h"
#include "com/aowagie/text/pdf/PdfEncodings.h"
#include "com/aowagie/text/pdf/PdfEncryption.h"
#include "com/aowagie/text/pdf/PdfIndirectReference.h"
#include "com/aowagie/text/pdf/PdfLiteral.h"
#include "com/aowagie/text/pdf/PdfName.h"
#include "com/aowagie/text/pdf/PdfNameTree.h"
#include "com/aowagie/text/pdf/PdfNull.h"
#include "com/aowagie/text/pdf/PdfNumber.h"
#include "com/aowagie/text/pdf/PdfObject.h"
#include "com/aowagie/text/pdf/PdfReader.h"
#include "com/aowagie/text/pdf/PdfReaderInstance.h"
#include "com/aowagie/text/pdf/PdfSignatureAppearance.h"
#include "com/aowagie/text/pdf/PdfString.h"
#include "com/aowagie/text/pdf/PdfWriter.h"
#include "com/aowagie/text/pdf/RandomAccessFileOrArray.h"
#include "com/aowagie/text/pdf/internal/PdfViewerPreferencesImp.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/DataInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/net/URL.h"
#include "java/security/Key.h"
#include "java/security/MessageDigest.h"
#include "java/security/PrivateKey.h"
#include "java/security/cert/Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Stack.h"
#include "java/util/zip/InflaterInputStream.h"
#include "org/spongycastle/cms/CMSEnvelopedData.h"
#include "org/spongycastle/cms/RecipientId.h"
#include "org/spongycastle/cms/RecipientInformation.h"
#include "org/spongycastle/cms/RecipientInformationStore.h"
#include "org/spongycastle/cms/jcajce/JceKeyTransEnvelopedRecipient.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/PdfReader must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfPdfReader () {
 @public
  IOSIntArray *xref_;
  JavaUtilHashMap *objStmMark_;
  ComAowagieTextPdfIntHashtable *objStmToOffset_;
  jboolean newXrefType_;
  JavaUtilArrayList *xrefObj_;
  ComAowagieTextPdfPdfDictionary *rootPages_;
  ComAowagieTextPdfPRAcroForm *acroForm_;
  jboolean acroFormParsed_;
  jboolean encrypted_;
  jboolean rebuilt_;
  jint freeXref_;
  jboolean tampered_;
  jint lastXref_;
  jint eofPos_;
  jchar pdfVersion_;
  ComAowagieTextPdfPdfEncryption *decrypt_;
  IOSByteArray *password_;
  id<JavaSecurityKey> certificateKey_;
  JavaSecurityCertCertificate *certificate_;
  NSString *certificateKeyProvider_;
  jboolean ownerPasswordUsed_;
  JavaUtilArrayList *strings_;
  jboolean sharedStreams_;
  jboolean consolidateNamedDestinations_;
  jint rValue_;
  jint pValue_;
  jint objNum_;
  jint objGen_;
  jint fileLength_;
  jboolean hybridXref_;
  jint lastXrefPartial_;
  jboolean partial_;
  ComAowagieTextPdfPRIndirectReference *cryptoRef_;
  ComAowagieTextPdfInternalPdfViewerPreferencesImp *viewerPreferences_;
  jboolean encryptionError_;
  /*!
   @brief Holds value of property appendable.
   */
  jboolean appendable_;
  jint readDepth_;
}

/*!
 @brief Reads and parses a PDF document.
 @param filename the file name of the document
 @param ownerPassword the password to read the document
 @throw IOExceptionon error
 */
- (instancetype)initWithNSString:(NSString *)filename
                   withByteArray:(IOSByteArray *)ownerPassword;

/*!
 @brief Reads and parses a PDF document.
 @param url the URL of the document
 @param ownerPassword the password to read the document
 @throw IOExceptionon error
 */
- (instancetype)initWithJavaNetURL:(JavaNetURL *)url
                     withByteArray:(IOSByteArray *)ownerPassword;

/*!
 @brief Reads and parses a PDF document.
 @param is the  <CODE> InputStream </CODE>  containing the document. The stream is read to the
   end but is not closed
 @param ownerPassword the password to read the document
 @throw IOExceptionon error
 */
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is
                            withByteArray:(IOSByteArray *)ownerPassword;

/*!
 @brief Gets the page from a page dictionary
 @param page the page dictionary
 @return the page
 */
- (ComAowagieTextRectangle *)getPageSizeWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)page;

- (void)readPdfPartial;

- (jboolean)equalsArrayWithByteArray:(IOSByteArray *)ar1
                       withByteArray:(IOSByteArray *)ar2
                             withInt:(jint)size;

/*!
 @throw IOExceptionon error
 */
- (void)readDecryptedDocObj;

- (void)releaseLastXrefPartial;

- (void)setXrefPartialObjectWithInt:(jint)idx
     withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj;

- (void)readDocObjPartial;

- (ComAowagieTextPdfPdfObject *)readSingleObjectWithInt:(jint)k;

- (ComAowagieTextPdfPdfObject *)readOneObjStmWithComAowagieTextPdfPRStream:(ComAowagieTextPdfPRStream *)stream
                                                                   withInt:(jint)idx;

- (void)checkPRStreamLengthWithComAowagieTextPdfPRStream:(ComAowagieTextPdfPRStream *)stream;

- (void)readObjStmWithComAowagieTextPdfPRStream:(ComAowagieTextPdfPRStream *)stream
              withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)map;

- (void)ensureXrefSizeWithInt:(jint)size;

- (void)readXref;

- (ComAowagieTextPdfPdfDictionary *)readXrefSection;

- (jboolean)readXRefStreamWithInt:(jint)ptr;

- (ComAowagieTextPdfPdfDictionary *)readDictionary;

- (ComAowagieTextPdfPdfArray *)readArray;

- (ComAowagieTextPdfPdfObject *)readPRObject;

/*!
 @brief Decodes a stream that has the FlateDecode filter.
 @param inArg the input data
 @return the decoded data
 */
+ (IOSByteArray *)FlateDecodeWithByteArray:(IOSByteArray *)inArg;

/*!
 @param inArg In
 @param dicPar PDF object
 @return a byte array
 */
+ (IOSByteArray *)decodePredictorWithByteArray:(IOSByteArray *)inArg
                withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)dicPar;

/*!
 @brief Decodes a stream that has the ASCIIHexDecode filter.
 @param inArg the input data
 @return the decoded data
 */
+ (IOSByteArray *)ASCIIHexDecodeWithByteArray:(IOSByteArray *)inArg;

/*!
 @brief Decodes a stream that has the ASCII85Decode filter.
 @param inArg the input data
 @return the decoded data
 */
+ (IOSByteArray *)ASCII85DecodeWithByteArray:(IOSByteArray *)inArg;

/*!
 @brief Decodes a stream that has the LZWDecode filter.
 @param inArg the input data
 @return the decoded data
 */
+ (IOSByteArray *)LZWDecodeWithByteArray:(IOSByteArray *)inArg;

/*!
 @brief Sets the contents of the page.
 @param content the new page content
 @param pageNum the page number. 1 is the first
 @param compressionLevel Compression level
 @since 2.1.3	(the method already existed without param compressionLevel)
 */
- (void)setPageContentWithInt:(jint)pageNum
                withByteArray:(IOSByteArray *)content
                      withInt:(jint)compressionLevel;

/*!
 @brief Get the content from a stream applying the required filters.
 @param stream the stream
 @param file the location where the stream is
 @throw IOExceptionon error
 @return the stream content
 */
+ (IOSByteArray *)getStreamBytesWithComAowagieTextPdfPRStream:(ComAowagieTextPdfPRStream *)stream
                 withComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)file;

/*!
 @brief Get the content from a stream as it is without applying any filter.
 @param stream the stream
 @param file the location where the stream is
 @throw IOExceptionon error
 @return the stream content
 */
+ (IOSByteArray *)getStreamBytesRawWithComAowagieTextPdfPRStream:(ComAowagieTextPdfPRStream *)stream
                    withComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)file;

/*!
 @brief Eliminates shared streams if they exist.
 */
- (void)eliminateSharedStreams;

+ (jboolean)equalsnWithByteArray:(IOSByteArray *)a1
                   withByteArray:(IOSByteArray *)a2;

+ (jboolean)existsNameWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)dic
                            withComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key
                            withComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)value;

+ (NSString *)getFontNameWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)dic;

+ (NSString *)getSubsetPrefixWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)dic;

+ (ComAowagieTextPdfPdfArray *)getNameArrayWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj;

/*!
 @brief Gets all the named destinations as an <CODE>HashMap</CODE>.The key is the name
  and the value is the destinations array.
 @param keepNames true if you want the keys to be real PdfNames instead of Strings
 @return gets all the named destinations
 @since 2.1.6
 */
- (JavaUtilHashMap *)getNamedDestinationWithBoolean:(jboolean)keepNames;

/*!
 @brief Gets the named destinations from the /Dests key in the catalog as an <CODE>HashMap</CODE>.The key is the name
  and the value is the destinations array.
 @param keepNames true if you want the keys to be real PdfNames instead of Strings
 @return gets the named destinations
 @since 2.1.6
 */
- (JavaUtilHashMap *)getNamedDestinationFromNamesWithBoolean:(jboolean)keepNames;

- (jboolean)replaceNamedDestinationWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj
                                              withJavaUtilHashMap:(JavaUtilHashMap *)names;

- (void)iterateBookmarksWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)outlineRef
                                   withJavaUtilHashMap:(JavaUtilHashMap *)names;

+ (ComAowagieTextPdfPdfDictionary *)duplicatePdfDictionaryWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)original
                                                          withComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)copy_
                                                              withComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)newReader;

+ (ComAowagieTextPdfPdfObject *)duplicatePdfObjectWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)original
                                                  withComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)newReader;

- (void)removeUnusedNodeWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj
                                      withBooleanArray:(IOSBooleanArray *)hits;

/*!
 @brief Removes all the unreachable objects.
 @return the number of indirect objects removed
 */
- (jint)removeUnusedObjects;

/*!
 @brief Gets the global document JavaScript.
 @param file the document file
 @throw IOExceptionon error
 @return the global document JavaScript
 */
- (NSString *)getJavaScriptWithComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)file;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader, xref_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader, objStmMark_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader, objStmToOffset_, ComAowagieTextPdfIntHashtable *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader, xrefObj_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader, rootPages_, ComAowagieTextPdfPdfDictionary *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader, acroForm_, ComAowagieTextPdfPRAcroForm *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader, decrypt_, ComAowagieTextPdfPdfEncryption *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader, password_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader, certificateKey_, id<JavaSecurityKey>)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader, certificate_, JavaSecurityCertCertificate *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader, certificateKeyProvider_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader, strings_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader, cryptoRef_, ComAowagieTextPdfPRIndirectReference *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader, viewerPreferences_, ComAowagieTextPdfInternalPdfViewerPreferencesImp *)

inline IOSObjectArray *ComAowagieTextPdfPdfReader_get_pageInhCandidates(void);
static IOSObjectArray *ComAowagieTextPdfPdfReader_pageInhCandidates;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfReader, pageInhCandidates, IOSObjectArray *)

inline IOSByteArray *ComAowagieTextPdfPdfReader_get_endstream(void);
static IOSByteArray *ComAowagieTextPdfPdfReader_endstream;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfReader, endstream, IOSByteArray *)

inline IOSByteArray *ComAowagieTextPdfPdfReader_get_endobj(void);
static IOSByteArray *ComAowagieTextPdfPdfReader_endobj;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfReader, endobj, IOSByteArray *)

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_initWithNSString_withByteArray_(ComAowagieTextPdfPdfReader *self, NSString *filename, IOSByteArray *ownerPassword);

__attribute__((unused)) static ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_initWithNSString_withByteArray_(NSString *filename, IOSByteArray *ownerPassword) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_initWithNSString_withByteArray_(NSString *filename, IOSByteArray *ownerPassword);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_initWithJavaNetURL_withByteArray_(ComAowagieTextPdfPdfReader *self, JavaNetURL *url, IOSByteArray *ownerPassword);

__attribute__((unused)) static ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_initWithJavaNetURL_withByteArray_(JavaNetURL *url, IOSByteArray *ownerPassword) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_initWithJavaNetURL_withByteArray_(JavaNetURL *url, IOSByteArray *ownerPassword);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_initWithJavaIoInputStream_withByteArray_(ComAowagieTextPdfPdfReader *self, JavaIoInputStream *is, IOSByteArray *ownerPassword);

__attribute__((unused)) static ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_initWithJavaIoInputStream_withByteArray_(JavaIoInputStream *is, IOSByteArray *ownerPassword) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_initWithJavaIoInputStream_withByteArray_(JavaIoInputStream *is, IOSByteArray *ownerPassword);

__attribute__((unused)) static ComAowagieTextRectangle *ComAowagieTextPdfPdfReader_getPageSizeWithComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfPdfReader *self, ComAowagieTextPdfPdfDictionary *page);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_readPdfPartial(ComAowagieTextPdfPdfReader *self);

__attribute__((unused)) static jboolean ComAowagieTextPdfPdfReader_equalsArrayWithByteArray_withByteArray_withInt_(ComAowagieTextPdfPdfReader *self, IOSByteArray *ar1, IOSByteArray *ar2, jint size);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_readDecryptedDocObj(ComAowagieTextPdfPdfReader *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_releaseLastXrefPartial(ComAowagieTextPdfPdfReader *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_setXrefPartialObjectWithInt_withComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfReader *self, jint idx, ComAowagieTextPdfPdfObject *obj);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_readDocObjPartial(ComAowagieTextPdfPdfReader *self);

__attribute__((unused)) static ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfReader_readSingleObjectWithInt_(ComAowagieTextPdfPdfReader *self, jint k);

__attribute__((unused)) static ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfReader_readOneObjStmWithComAowagieTextPdfPRStream_withInt_(ComAowagieTextPdfPdfReader *self, ComAowagieTextPdfPRStream *stream, jint idx);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_checkPRStreamLengthWithComAowagieTextPdfPRStream_(ComAowagieTextPdfPdfReader *self, ComAowagieTextPdfPRStream *stream);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_readObjStmWithComAowagieTextPdfPRStream_withComAowagieTextPdfIntHashtable_(ComAowagieTextPdfPdfReader *self, ComAowagieTextPdfPRStream *stream, ComAowagieTextPdfIntHashtable *map);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_ensureXrefSizeWithInt_(ComAowagieTextPdfPdfReader *self, jint size);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_readXref(ComAowagieTextPdfPdfReader *self);

__attribute__((unused)) static ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfPdfReader_readXrefSection(ComAowagieTextPdfPdfReader *self);

__attribute__((unused)) static jboolean ComAowagieTextPdfPdfReader_readXRefStreamWithInt_(ComAowagieTextPdfPdfReader *self, jint ptr);

__attribute__((unused)) static ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfPdfReader_readDictionary(ComAowagieTextPdfPdfReader *self);

__attribute__((unused)) static ComAowagieTextPdfPdfArray *ComAowagieTextPdfPdfReader_readArray(ComAowagieTextPdfPdfReader *self);

__attribute__((unused)) static ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfReader_readPRObject(ComAowagieTextPdfPdfReader *self);

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfPdfReader_FlateDecodeWithByteArray_(IOSByteArray *inArg);

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfPdfReader_decodePredictorWithByteArray_withComAowagieTextPdfPdfObject_(IOSByteArray *inArg, ComAowagieTextPdfPdfObject *dicPar);

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfPdfReader_ASCIIHexDecodeWithByteArray_(IOSByteArray *inArg);

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfPdfReader_ASCII85DecodeWithByteArray_(IOSByteArray *inArg);

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfPdfReader_LZWDecodeWithByteArray_(IOSByteArray *inArg);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_setPageContentWithInt_withByteArray_withInt_(ComAowagieTextPdfPdfReader *self, jint pageNum, IOSByteArray *content, jint compressionLevel);

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfPdfReader_getStreamBytesWithComAowagieTextPdfPRStream_withComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfPRStream *stream, ComAowagieTextPdfRandomAccessFileOrArray *file);

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfPdfReader_getStreamBytesRawWithComAowagieTextPdfPRStream_withComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfPRStream *stream, ComAowagieTextPdfRandomAccessFileOrArray *file);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_eliminateSharedStreams(ComAowagieTextPdfPdfReader *self);

__attribute__((unused)) static jboolean ComAowagieTextPdfPdfReader_equalsnWithByteArray_withByteArray_(IOSByteArray *a1, IOSByteArray *a2);

__attribute__((unused)) static jboolean ComAowagieTextPdfPdfReader_existsNameWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfName_withComAowagieTextPdfPdfName_(ComAowagieTextPdfPdfDictionary *dic, ComAowagieTextPdfPdfName *key, ComAowagieTextPdfPdfName *value);

__attribute__((unused)) static NSString *ComAowagieTextPdfPdfReader_getFontNameWithComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfPdfDictionary *dic);

__attribute__((unused)) static NSString *ComAowagieTextPdfPdfReader_getSubsetPrefixWithComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfPdfDictionary *dic);

__attribute__((unused)) static ComAowagieTextPdfPdfArray *ComAowagieTextPdfPdfReader_getNameArrayWithComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfObject *obj);

__attribute__((unused)) static JavaUtilHashMap *ComAowagieTextPdfPdfReader_getNamedDestinationWithBoolean_(ComAowagieTextPdfPdfReader *self, jboolean keepNames);

__attribute__((unused)) static JavaUtilHashMap *ComAowagieTextPdfPdfReader_getNamedDestinationFromNamesWithBoolean_(ComAowagieTextPdfPdfReader *self, jboolean keepNames);

__attribute__((unused)) static jboolean ComAowagieTextPdfPdfReader_replaceNamedDestinationWithComAowagieTextPdfPdfObject_withJavaUtilHashMap_(ComAowagieTextPdfPdfReader *self, ComAowagieTextPdfPdfObject *obj, JavaUtilHashMap *names);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_iterateBookmarksWithComAowagieTextPdfPdfObject_withJavaUtilHashMap_(ComAowagieTextPdfPdfReader *self, ComAowagieTextPdfPdfObject *outlineRef, JavaUtilHashMap *names);

__attribute__((unused)) static ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfPdfReader_duplicatePdfDictionaryWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfDictionary *original, ComAowagieTextPdfPdfDictionary *copy_, ComAowagieTextPdfPdfReader *newReader);

__attribute__((unused)) static ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfReader_duplicatePdfObjectWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfObject *original, ComAowagieTextPdfPdfReader *newReader);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_removeUnusedNodeWithComAowagieTextPdfPdfObject_withBooleanArray_(ComAowagieTextPdfPdfReader *self, ComAowagieTextPdfPdfObject *obj, IOSBooleanArray *hits);

__attribute__((unused)) static jint ComAowagieTextPdfPdfReader_removeUnusedObjects(ComAowagieTextPdfPdfReader *self);

__attribute__((unused)) static NSString *ComAowagieTextPdfPdfReader_getJavaScriptWithComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfPdfReader *self, ComAowagieTextPdfRandomAccessFileOrArray *file);

@interface ComAowagieTextPdfPdfReader_PageRefs () {
 @public
  ComAowagieTextPdfPdfReader *reader_;
  ComAowagieTextPdfIntHashtable *refsp_;
  JavaUtilArrayList *refsn_;
  JavaUtilArrayList *pageInh_;
  jint lastPageRead_;
  jint sizep_;
  jboolean keepPages_;
}

- (instancetype)initWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader;

- (instancetype)initWithComAowagieTextPdfPdfReader_PageRefs:(ComAowagieTextPdfPdfReader_PageRefs *)other
                             withComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader;

- (jint)size;

- (void)keepPages;

- (void)pushPageAttributesWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)nodePages;

- (void)popPageAttributes;

- (void)iteratePagesWithComAowagieTextPdfPRIndirectReference:(ComAowagieTextPdfPRIndirectReference *)rpage;

- (ComAowagieTextPdfPRIndirectReference *)getSinglePageWithInt:(jint)n;

- (void)selectPagesWithJavaUtilList:(id<JavaUtilList>)pagesToKeep;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader_PageRefs, reader_, ComAowagieTextPdfPdfReader *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader_PageRefs, refsp_, ComAowagieTextPdfIntHashtable *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader_PageRefs, refsn_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfReader_PageRefs, pageInh_, JavaUtilArrayList *)

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_PageRefs_initWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader_PageRefs *self, ComAowagieTextPdfPdfReader *reader);

__attribute__((unused)) static ComAowagieTextPdfPdfReader_PageRefs *new_ComAowagieTextPdfPdfReader_PageRefs_initWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader *reader) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfPdfReader_PageRefs *create_ComAowagieTextPdfPdfReader_PageRefs_initWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader *reader);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_PageRefs_initWithComAowagieTextPdfPdfReader_PageRefs_withComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader_PageRefs *self, ComAowagieTextPdfPdfReader_PageRefs *other, ComAowagieTextPdfPdfReader *reader);

__attribute__((unused)) static ComAowagieTextPdfPdfReader_PageRefs *new_ComAowagieTextPdfPdfReader_PageRefs_initWithComAowagieTextPdfPdfReader_PageRefs_withComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader_PageRefs *other, ComAowagieTextPdfPdfReader *reader) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfPdfReader_PageRefs *create_ComAowagieTextPdfPdfReader_PageRefs_initWithComAowagieTextPdfPdfReader_PageRefs_withComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader_PageRefs *other, ComAowagieTextPdfPdfReader *reader);

__attribute__((unused)) static jint ComAowagieTextPdfPdfReader_PageRefs_size(ComAowagieTextPdfPdfReader_PageRefs *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_PageRefs_keepPages(ComAowagieTextPdfPdfReader_PageRefs *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_PageRefs_pushPageAttributesWithComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfPdfReader_PageRefs *self, ComAowagieTextPdfPdfDictionary *nodePages);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_PageRefs_popPageAttributes(ComAowagieTextPdfPdfReader_PageRefs *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_PageRefs_iteratePagesWithComAowagieTextPdfPRIndirectReference_(ComAowagieTextPdfPdfReader_PageRefs *self, ComAowagieTextPdfPRIndirectReference *rpage);

__attribute__((unused)) static ComAowagieTextPdfPRIndirectReference *ComAowagieTextPdfPdfReader_PageRefs_getSinglePageWithInt_(ComAowagieTextPdfPdfReader_PageRefs *self, jint n);

__attribute__((unused)) static void ComAowagieTextPdfPdfReader_PageRefs_selectPagesWithJavaUtilList_(ComAowagieTextPdfPdfReader_PageRefs *self, id<JavaUtilList> pagesToKeep);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfReader.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfPdfReader)


#line 91
@implementation ComAowagieTextPdfPdfReader

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 149
- (instancetype)init {
  ComAowagieTextPdfPdfReader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 156
- (instancetype)initWithNSString:(NSString *)filename {
  ComAowagieTextPdfPdfReader_initWithNSString_(self, filename);
  return self;
}


#line 165
- (instancetype)initWithNSString:(NSString *)filename
                   withByteArray:(IOSByteArray *)ownerPassword {
  ComAowagieTextPdfPdfReader_initWithNSString_withByteArray_(self, filename, ownerPassword);
  return self;
}


#line 175
- (instancetype)initWithByteArray:(IOSByteArray *)pdfIn {
  ComAowagieTextPdfPdfReader_initWithByteArray_(self, pdfIn);
  return self;
}


#line 184
- (instancetype)initWithByteArray:(IOSByteArray *)pdfIn
                    withByteArray:(IOSByteArray *)ownerPassword {
  ComAowagieTextPdfPdfReader_initWithByteArray_withByteArray_(self, pdfIn, ownerPassword);
  return self;
}


#line 197
- (instancetype)initWithNSString:(NSString *)filename
 withJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)certificate
             withJavaSecurityKey:(id<JavaSecurityKey>)certificateKey
                    withNSString:(NSString *)certificateKeyProvider {
  ComAowagieTextPdfPdfReader_initWithNSString_withJavaSecurityCertCertificate_withJavaSecurityKey_withNSString_(self, filename, certificate, certificateKey, certificateKeyProvider);
  return self;
}


#line 212
- (instancetype)initWithJavaNetURL:(JavaNetURL *)url
                     withByteArray:(IOSByteArray *)ownerPassword {
  ComAowagieTextPdfPdfReader_initWithJavaNetURL_withByteArray_(self, url, ownerPassword);
  return self;
}


#line 225
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is
                            withByteArray:(IOSByteArray *)ownerPassword {
  ComAowagieTextPdfPdfReader_initWithJavaIoInputStream_withByteArray_(self, is, ownerPassword);
  return self;
}


#line 237
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is {
  ComAowagieTextPdfPdfReader_initWithJavaIoInputStream_(self, is);
  return self;
}


#line 244
- (instancetype)initWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader {
  ComAowagieTextPdfPdfReader_initWithComAowagieTextPdfPdfReader_(self, reader);
  return self;
}


#line 283
- (ComAowagieTextPdfRandomAccessFileOrArray *)getSafeFile {
  return [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getSafeFile];
}

- (ComAowagieTextPdfPdfReaderInstance *)getPdfReaderInstanceWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer {
  return new_ComAowagieTextPdfPdfReaderInstance_initPackagePrivateWithComAowagieTextPdfPdfReader_withComAowagieTextPdfPdfWriter_(self, writer);
}


#line 294
- (jint)getNumberOfPages {
  return ComAowagieTextPdfPdfReader_PageRefs_size(nil_chk(self->pageRefs_));
}


#line 302
- (ComAowagieTextPdfPdfDictionary *)getCatalog {
  return self->catalog_;
}


#line 309
- (ComAowagieTextPdfPRAcroForm *)getAcroForm {
  if (!self->acroFormParsed_) {
    self->acroFormParsed_ = true;
    ComAowagieTextPdfPdfObject *form = [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->catalog_)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ACROFORM)];
    if (form != nil) {
      @try {
        self->acroForm_ = new_ComAowagieTextPdfPRAcroForm_initWithComAowagieTextPdfPdfReader_(self);
        [self->acroForm_ readAcroFormWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_(form), [ComAowagieTextPdfPdfDictionary class])];
      }
      @catch (JavaLangException *e) {
        self->acroForm_ = nil;
      }
    }
  }
  return self->acroForm_;
}


#line 330
- (jint)getPageRotationWithInt:(jint)index {
  return [self getPageRotationWithComAowagieTextPdfPdfDictionary:[((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) getPageNReleaseWithInt:index]];
}

- (jint)getPageRotationWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)page {
  ComAowagieTextPdfPdfNumber *rotate = [((ComAowagieTextPdfPdfDictionary *) nil_chk(page)) getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ROTATE)];
  if (rotate == nil) {
    return 0;
  }
  else {
    
#line 339
    jint n = [rotate intValue];
    n %= 360;
    return n < 0 ? n + 360 : n;
  }
}


#line 349
- (ComAowagieTextRectangle *)getPageSizeWithRotationWithInt:(jint)index {
  return [self getPageSizeWithRotationWithComAowagieTextPdfPdfDictionary:[((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) getPageNReleaseWithInt:index]];
}


#line 358
- (ComAowagieTextRectangle *)getPageSizeWithRotationWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)page {
  ComAowagieTextRectangle *rect = ComAowagieTextPdfPdfReader_getPageSizeWithComAowagieTextPdfPdfDictionary_(self, page);
  jint rotation = [self getPageRotationWithComAowagieTextPdfPdfDictionary:page];
  while (rotation > 0) {
    rect = [((ComAowagieTextRectangle *) nil_chk(rect)) rotate];
    rotation -= 90;
  }
  return rect;
}


#line 373
- (ComAowagieTextRectangle *)getPageSizeWithInt:(jint)index {
  return ComAowagieTextPdfPdfReader_getPageSizeWithComAowagieTextPdfPdfDictionary_(self, [((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) getPageNReleaseWithInt:index]);
}


#line 382
- (ComAowagieTextRectangle *)getPageSizeWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)page {
  return ComAowagieTextPdfPdfReader_getPageSizeWithComAowagieTextPdfPdfDictionary_(self, page);
}


#line 394
- (ComAowagieTextRectangle *)getBoxSizeWithInt:(jint)index
                                  withNSString:(NSString *)boxName {
  
#line 395
  ComAowagieTextPdfPdfDictionary *page = [((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) getPageNReleaseWithInt:index];
  ComAowagieTextPdfPdfArray *box = nil;
  if ([((NSString *) nil_chk(boxName)) isEqual:@"trim"]) {
    box = (ComAowagieTextPdfPdfArray *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(page)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TRIMBOX)]), [ComAowagieTextPdfPdfArray class]);
  }
  else
#line 399
  if ([boxName isEqual:@"art"]) {
    box = (ComAowagieTextPdfPdfArray *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(page)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ARTBOX)]), [ComAowagieTextPdfPdfArray class]);
  }
  else
#line 401
  if ([boxName isEqual:@"bleed"]) {
    box = (ComAowagieTextPdfPdfArray *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(page)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BLEEDBOX)]), [ComAowagieTextPdfPdfArray class]);
  }
  else
#line 403
  if ([boxName isEqual:@"crop"]) {
    box = (ComAowagieTextPdfPdfArray *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(page)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CROPBOX)]), [ComAowagieTextPdfPdfArray class]);
  }
  else
#line 405
  if ([boxName isEqual:@"media"]) {
    box = (ComAowagieTextPdfPdfArray *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(page)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, MEDIABOX)]), [ComAowagieTextPdfPdfArray class]);
  }
  if (box == nil) {
    return nil;
  }
  return ComAowagieTextPdfPdfReader_getNormalizedRectangleWithComAowagieTextPdfPdfArray_(box);
}


#line 418
- (JavaUtilHashMap *)getInfo {
  JavaUtilHashMap *map = new_JavaUtilLinkedHashMap_init();
  ComAowagieTextPdfPdfDictionary *info = [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->trailer_)) getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, INFO)];
  if (info == nil) {
    return map;
  }
  for (id __strong element in nil_chk([info getKeys])) {
    ComAowagieTextPdfPdfName *key = (ComAowagieTextPdfPdfName *) cast_chk(element, [ComAowagieTextPdfPdfName class]);
    ComAowagieTextPdfPdfObject *obj = ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_([info getWithComAowagieTextPdfPdfName:key]);
    if (obj == nil) {
      continue;
    }
    NSString *value = [obj description];
    switch ([obj type]) {
      case ComAowagieTextPdfPdfObject_STRING:
      {
        
#line 433
        value = [((ComAowagieTextPdfPdfString *) cast_chk(obj, [ComAowagieTextPdfPdfString class])) toUnicodeString];
        break;
      }
      case ComAowagieTextPdfPdfObject_NAME:
      {
        
#line 437
        value = ComAowagieTextPdfPdfName_decodeNameWithNSString_(value);
        break;
      }
    }
    (void) [map putWithId:ComAowagieTextPdfPdfName_decodeNameWithNSString_([((ComAowagieTextPdfPdfName *) nil_chk(key)) description]) withId:value];
  }
  return map;
}


#line 450
+ (ComAowagieTextRectangle *)getNormalizedRectangleWithComAowagieTextPdfPdfArray:(ComAowagieTextPdfPdfArray *)box {
  return ComAowagieTextPdfPdfReader_getNormalizedRectangleWithComAowagieTextPdfPdfArray_(box);
}


#line 459
- (void)readPdf {
  @try {
    self->fileLength_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getFile])) length];
    self->pdfVersion_ = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) checkPdfHeader];
    @try {
      ComAowagieTextPdfPdfReader_readXref(self);
    }
    @catch (JavaLangException *e) {
      @try {
        self->rebuilt_ = true;
        [self rebuildXref];
        self->lastXref_ = -1;
      }
      @catch (JavaLangException *ne) {
        @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_(JreStrcat("$$$$", @"Rebuild failed: ", [ne getMessage], @"; Original message: ", [e getMessage]));
      }
    }
    @try {
      [self readDocObj];
    }
    @catch (JavaLangException *e) {
      if ([e isKindOfClass:[ComAowagieTextExceptionsBadPasswordException class]]) {
        @throw new_ComAowagieTextExceptionsBadPasswordException_initWithNSString_([e getMessage]);
      }
      if (self->rebuilt_ || self->encryptionError_) {
        @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_([e getMessage]);
      }
      self->rebuilt_ = true;
      self->encrypted_ = false;
      [self rebuildXref];
      self->lastXref_ = -1;
      [self readDocObj];
    }
    
#line 493
    [((JavaUtilArrayList *) nil_chk(self->strings_)) clear];
    [self readPages];
    ComAowagieTextPdfPdfReader_eliminateSharedStreams(self);
    ComAowagieTextPdfPdfReader_removeUnusedObjects(self);
  }
  @finally {
    @try {
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) close];
    }
    @catch (JavaLangException *e) {
    }
  }
}

- (void)readPdfPartial {
  ComAowagieTextPdfPdfReader_readPdfPartial(self);
}


#line 534
- (jboolean)equalsArrayWithByteArray:(IOSByteArray *)ar1
                       withByteArray:(IOSByteArray *)ar2
                             withInt:(jint)size {
  return ComAowagieTextPdfPdfReader_equalsArrayWithByteArray_withByteArray_withInt_(self, ar1, ar2, size);
}


#line 546
- (void)readDecryptedDocObj {
  ComAowagieTextPdfPdfReader_readDecryptedDocObj(self);
}


#line 861
+ (ComAowagieTextPdfPdfObject *)getPdfObjectReleaseWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj {
  return ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_(obj);
}


#line 874
+ (ComAowagieTextPdfPdfObject *)getPdfObjectWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj {
  return ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_(obj);
}


#line 920
+ (ComAowagieTextPdfPdfObject *)getPdfObjectReleaseWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj
                                                   withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)parent {
  return ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfObject_(obj, parent);
}


#line 931
+ (ComAowagieTextPdfPdfObject *)getPdfObjectWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj
                                            withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)parent {
  return ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfObject_(obj, parent);
}


#line 960
- (ComAowagieTextPdfPdfObject *)getPdfObjectReleaseWithInt:(jint)idx {
  ComAowagieTextPdfPdfObject *obj = [self getPdfObjectWithInt:idx];
  ComAowagieTextPdfPdfReader_releaseLastXrefPartial(self);
  return obj;
}


#line 970
- (ComAowagieTextPdfPdfObject *)getPdfObjectWithInt:(jint)idx {
  @try {
    self->lastXrefPartial_ = -1;
    if (idx < 0 || idx >= [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) size]) {
      return nil;
    }
    ComAowagieTextPdfPdfObject *obj = (ComAowagieTextPdfPdfObject *) cast_chk([((JavaUtilArrayList *) nil_chk(self->xrefObj_)) getWithInt:idx], [ComAowagieTextPdfPdfObject class]);
    if (!self->partial_ || obj != nil) {
      return obj;
    }
    if (idx * 2 >= ((IOSIntArray *) nil_chk(self->xref_))->size_) {
      return nil;
    }
    obj = ComAowagieTextPdfPdfReader_readSingleObjectWithInt_(self, idx);
    self->lastXrefPartial_ = -1;
    if (obj != nil) {
      self->lastXrefPartial_ = idx;
    }
    return obj;
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 996
- (void)releaseLastXrefPartial {
  ComAowagieTextPdfPdfReader_releaseLastXrefPartial(self);
}


#line 1006
+ (void)releaseLastXrefPartialWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj {
  ComAowagieTextPdfPdfReader_releaseLastXrefPartialWithComAowagieTextPdfPdfObject_(obj);
}


#line 1025
- (void)setXrefPartialObjectWithInt:(jint)idx
     withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj {
  ComAowagieTextPdfPdfReader_setXrefPartialObjectWithInt_withComAowagieTextPdfPdfObject_(self, idx, obj);
}


#line 1036
- (ComAowagieTextPdfPRIndirectReference *)addPdfObjectWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj {
  [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) addWithId:obj];
  return new_ComAowagieTextPdfPRIndirectReference_initWithComAowagieTextPdfPdfReader_withInt_(self, [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) size] - 1);
}

- (void)readPages {
  self->catalog_ = [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->trailer_)) getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ROOT)];
  self->rootPages_ = [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->catalog_)) getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PAGES)];
  self->pageRefs_ = new_ComAowagieTextPdfPdfReader_PageRefs_initWithComAowagieTextPdfPdfReader_(self);
}

- (void)readDocObjPartial {
  ComAowagieTextPdfPdfReader_readDocObjPartial(self);
}


#line 1061
- (ComAowagieTextPdfPdfObject *)readSingleObjectWithInt:(jint)k {
  return ComAowagieTextPdfPdfReader_readSingleObjectWithInt_(self, k);
}


#line 1110
- (ComAowagieTextPdfPdfObject *)readOneObjStmWithComAowagieTextPdfPRStream:(ComAowagieTextPdfPRStream *)stream
                                                                   withInt:(jint)idx {
  return ComAowagieTextPdfPdfReader_readOneObjStmWithComAowagieTextPdfPRStream_withInt_(self, stream, idx);
}


#line 1151
- (void)readDocObj {
  JavaUtilArrayList *streams = new_JavaUtilArrayList_init();
  self->xrefObj_ = new_JavaUtilArrayList_initWithInt_(JreIntDiv(((IOSIntArray *) nil_chk(self->xref_))->size_, 2));
  [self->xrefObj_ addAllWithJavaUtilCollection:JavaUtilCollections_nCopiesWithInt_withId_(JreIntDiv(((IOSIntArray *) nil_chk(self->xref_))->size_, 2), nil)];
  for (jint k = 2; k < ((IOSIntArray *) nil_chk(self->xref_))->size_; k += 2) {
    jint pos = IOSIntArray_Get(self->xref_, k);
    if (pos <= 0 || IOSIntArray_Get(self->xref_, k + 1) > 0) {
      continue;
    }
    [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) seekWithInt:pos];
    [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextValidToken];
    if ([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getTokenType] != ComAowagieTextPdfPRTokeniser_TK_NUMBER) {
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) throwErrorWithNSString:@"Invalid object number."];
    }
    self->objNum_ = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) intValue];
    [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextValidToken];
    if ([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getTokenType] != ComAowagieTextPdfPRTokeniser_TK_NUMBER) {
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) throwErrorWithNSString:@"Invalid generation number."];
    }
    self->objGen_ = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) intValue];
    [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextValidToken];
    if (![((NSString *) nil_chk([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getStringValue])) isEqual:@"obj"]) {
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) throwErrorWithNSString:@"Token 'obj' expected."];
    }
    ComAowagieTextPdfPdfObject *obj;
    @try {
      obj = ComAowagieTextPdfPdfReader_readPRObject(self);
      if ([((ComAowagieTextPdfPdfObject *) nil_chk(obj)) isStream]) {
        [streams addWithId:obj];
      }
    }
    @catch (JavaLangException *e) {
      obj = nil;
    }
    (void) [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) setWithInt:JreIntDiv(k, 2) withId:obj];
  }
  for (jint k = 0; k < [streams size]; ++k) {
    ComAowagieTextPdfPdfReader_checkPRStreamLengthWithComAowagieTextPdfPRStream_(self, (ComAowagieTextPdfPRStream *) cast_chk([streams getWithInt:k], [ComAowagieTextPdfPRStream class]));
  }
  ComAowagieTextPdfPdfReader_readDecryptedDocObj(self);
  if (self->objStmMark_ != nil) {
    for (id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk([self->objStmMark_ entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
      id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check([i next], JavaUtilMap_Entry_class_());
      jint n = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [JavaLangInteger class])))) intValue];
      ComAowagieTextPdfIntHashtable *h = (ComAowagieTextPdfIntHashtable *) cast_chk([entry_ getValue], [ComAowagieTextPdfIntHashtable class]);
      ComAowagieTextPdfPdfReader_readObjStmWithComAowagieTextPdfPRStream_withComAowagieTextPdfIntHashtable_(self, (ComAowagieTextPdfPRStream *) cast_chk([((JavaUtilArrayList *) nil_chk(self->xrefObj_)) getWithInt:n], [ComAowagieTextPdfPRStream class]), h);
      (void) [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) setWithInt:n withId:nil];
    }
    self->objStmMark_ = nil;
  }
  self->xref_ = nil;
}

- (void)checkPRStreamLengthWithComAowagieTextPdfPRStream:(ComAowagieTextPdfPRStream *)stream {
  ComAowagieTextPdfPdfReader_checkPRStreamLengthWithComAowagieTextPdfPRStream_(self, stream);
}


#line 1254
- (void)readObjStmWithComAowagieTextPdfPRStream:(ComAowagieTextPdfPRStream *)stream
              withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)map {
  ComAowagieTextPdfPdfReader_readObjStmWithComAowagieTextPdfPRStream_withComAowagieTextPdfIntHashtable_(self, stream, map);
}


#line 1306
+ (ComAowagieTextPdfPdfObject *)killIndirectWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj {
  return ComAowagieTextPdfPdfReader_killIndirectWithComAowagieTextPdfPdfObject_(obj);
}


#line 1323
- (void)ensureXrefSizeWithInt:(jint)size {
  ComAowagieTextPdfPdfReader_ensureXrefSizeWithInt_(self, size);
}


#line 1336
- (void)readXref {
  ComAowagieTextPdfPdfReader_readXref(self);
}


#line 1372
- (ComAowagieTextPdfPdfDictionary *)readXrefSection {
  return ComAowagieTextPdfPdfReader_readXrefSection(self);
}


#line 1450
- (jboolean)readXRefStreamWithInt:(jint)ptr {
  return ComAowagieTextPdfPdfReader_readXRefStreamWithInt_(self, ptr);
}


#line 1576
- (void)rebuildXref {
  self->hybridXref_ = false;
  self->newXrefType_ = false;
  [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) seekWithInt:0];
  IOSObjectArray *xr = [IOSObjectArray newArrayWithLength:1024 type:IOSClass_intArray(1)];
  jint top = 0;
  self->trailer_ = nil;
  IOSByteArray *line = [IOSByteArray newArrayWithLength:64];
  for (; ; ) {
    jint pos = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getFilePointer];
    if (![((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) readLineSegmentWithByteArray:line]) {
      break;
    }
    if (IOSByteArray_Get(line, 0) == 't') {
      if (![((NSString *) nil_chk(ComAowagieTextPdfPdfEncodings_convertToStringWithByteArray_withNSString_(line, nil))) java_hasPrefix:@"trailer"]) {
        continue;
      }
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) seekWithInt:pos];
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextToken];
      pos = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getFilePointer];
      @try {
        ComAowagieTextPdfPdfDictionary *dic = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_readPRObject(self), [ComAowagieTextPdfPdfDictionary class]);
        if ([((ComAowagieTextPdfPdfDictionary *) nil_chk(dic)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ROOT)] != nil) {
          self->trailer_ = dic;
        }
        else {
          
#line 1601
          [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) seekWithInt:pos];
        }
      }
      @catch (JavaLangException *e) {
        [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) seekWithInt:pos];
      }
    }
    else if (IOSByteArray_Get(line, 0) >= '0' && IOSByteArray_Get(line, 0) <= '9') {
      IOSIntArray *obj = ComAowagieTextPdfPRTokeniser_checkObjectStartWithByteArray_(line);
      if (obj == nil) {
        continue;
      }
      jint num = IOSIntArray_Get(obj, 0);
      jint gen = IOSIntArray_Get(obj, 1);
      if (num >= xr->size_) {
        jint newLength = num * 2;
        IOSObjectArray *xr2 = [IOSObjectArray newArrayWithLength:newLength type:IOSClass_intArray(1)];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(xr, 0, xr2, 0, top);
        xr = xr2;
      }
      if (num >= top) {
        top = num + 1;
      }
      if (IOSObjectArray_Get(xr, num) == nil || gen >= IOSIntArray_Get(nil_chk(IOSObjectArray_Get(xr, num)), 1)) {
        *IOSIntArray_GetRef(obj, 0) = pos;
        (void) IOSObjectArray_Set(xr, num, obj);
      }
    }
  }
  if (self->trailer_ == nil) {
    @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_(@"trailer not found.");
  }
  self->xref_ = [IOSIntArray newArrayWithLength:top * 2];
  for (jint k = 0; k < top; ++k) {
    IOSIntArray *obj = IOSObjectArray_Get(xr, k);
    if (obj != nil) {
      *IOSIntArray_GetRef(self->xref_, k * 2) = IOSIntArray_Get(obj, 0);
    }
  }
}


#line 1642
- (ComAowagieTextPdfPdfDictionary *)readDictionary {
  return ComAowagieTextPdfPdfReader_readDictionary(self);
}


#line 1666
- (ComAowagieTextPdfPdfArray *)readArray {
  return ComAowagieTextPdfPdfReader_readArray(self);
}


#line 1687
- (ComAowagieTextPdfPdfObject *)readPRObject {
  return ComAowagieTextPdfPdfReader_readPRObject(self);
}


#line 1784
+ (IOSByteArray *)FlateDecodeWithByteArray:(IOSByteArray *)inArg {
  return ComAowagieTextPdfPdfReader_FlateDecodeWithByteArray_(inArg);
}


#line 1797
+ (IOSByteArray *)decodePredictorWithByteArray:(IOSByteArray *)inArg
                withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)dicPar {
  return ComAowagieTextPdfPdfReader_decodePredictorWithByteArray_withComAowagieTextPdfPdfObject_(inArg, dicPar);
}


#line 1918
+ (IOSByteArray *)FlateDecodeWithByteArray:(IOSByteArray *)inArg
                               withBoolean:(jboolean)strict {
  return ComAowagieTextPdfPdfReader_FlateDecodeWithByteArray_withBoolean_(inArg, strict);
}


#line 1944
+ (IOSByteArray *)ASCIIHexDecodeWithByteArray:(IOSByteArray *)inArg {
  return ComAowagieTextPdfPdfReader_ASCIIHexDecodeWithByteArray_(inArg);
}


#line 1977
+ (IOSByteArray *)ASCII85DecodeWithByteArray:(IOSByteArray *)inArg {
  return ComAowagieTextPdfPdfReader_ASCII85DecodeWithByteArray_(inArg);
}


#line 2039
+ (IOSByteArray *)LZWDecodeWithByteArray:(IOSByteArray *)inArg {
  return ComAowagieTextPdfPdfReader_LZWDecodeWithByteArray_(inArg);
}


#line 2050
- (jboolean)isRebuilt {
  return self->rebuilt_;
}


#line 2058
- (ComAowagieTextPdfPdfDictionary *)getPageNWithInt:(jint)pageNum {
  ComAowagieTextPdfPdfDictionary *dic = [((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) getPageNWithInt:pageNum];
  if (dic == nil) {
    return nil;
  }
  if (self->appendable_) {
    [dic setIndRefWithComAowagieTextPdfPRIndirectReference:[((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) getPageOrigRefWithInt:pageNum]];
  }
  return dic;
}


#line 2073
- (ComAowagieTextPdfPdfDictionary *)getPageNReleaseWithInt:(jint)pageNum {
  ComAowagieTextPdfPdfDictionary *dic = [self getPageNWithInt:pageNum];
  [((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) releasePageWithInt:pageNum];
  return dic;
}


#line 2082
- (void)releasePageWithInt:(jint)pageNum {
  [((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) releasePageWithInt:pageNum];
}

- (void)resetReleasePage {
  [((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) resetReleasePage];
}


#line 2094
- (ComAowagieTextPdfPRIndirectReference *)getPageOrigRefWithInt:(jint)pageNum {
  return [((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) getPageOrigRefWithInt:pageNum];
}


#line 2104
- (IOSByteArray *)getPageContentWithInt:(jint)pageNum
withComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)file {
  
#line 2105
  ComAowagieTextPdfPdfDictionary *page = [self getPageNReleaseWithInt:pageNum];
  if (page == nil) {
    return nil;
  }
  ComAowagieTextPdfPdfObject *contents = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([page getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CONTENTS)]);
  if (contents == nil) {
    return [IOSByteArray newArrayWithLength:0];
  }
  JavaIoByteArrayOutputStream *bout = nil;
  if ([contents isStream]) {
    return ComAowagieTextPdfPdfReader_getStreamBytesWithComAowagieTextPdfPRStream_withComAowagieTextPdfRandomAccessFileOrArray_((ComAowagieTextPdfPRStream *) cast_chk(contents, [ComAowagieTextPdfPRStream class]), file);
  }
  else if ([contents isArray]) {
    ComAowagieTextPdfPdfArray *array = (ComAowagieTextPdfPdfArray *) cast_chk(contents, [ComAowagieTextPdfPdfArray class]);
    bout = new_JavaIoByteArrayOutputStream_init();
    for (jint k = 0; k < [array size]; ++k) {
      ComAowagieTextPdfPdfObject *item = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([array getPdfObjectWithInt:k]);
      if (item == nil || ![item isStream]) {
        continue;
      }
      IOSByteArray *b = ComAowagieTextPdfPdfReader_getStreamBytesWithComAowagieTextPdfPRStream_withComAowagieTextPdfRandomAccessFileOrArray_((ComAowagieTextPdfPRStream *) cast_chk(item, [ComAowagieTextPdfPRStream class]), file);
      [bout writeWithByteArray:b];
      if (k != [array size] - 1) {
        [bout writeWithInt:0x000a];
      }
    }
    return [bout toByteArray];
  }
  else {
    
#line 2133
    return [IOSByteArray newArrayWithLength:0];
  }
}


#line 2139
- (void)killXrefWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj {
  if (obj == nil) {
    return;
  }
  if ([obj isKindOfClass:[ComAowagieTextPdfPdfIndirectReference class]] && ![obj isIndirect]) {
    return;
  }
  switch ([obj type]) {
    case ComAowagieTextPdfPdfObject_INDIRECT:
    {
      
#line 2148
      jint xr = [((ComAowagieTextPdfPRIndirectReference *) cast_chk(obj, [ComAowagieTextPdfPRIndirectReference class])) getNumber];
      obj = (ComAowagieTextPdfPdfObject *) cast_chk([((JavaUtilArrayList *) nil_chk(self->xrefObj_)) getWithInt:xr], [ComAowagieTextPdfPdfObject class]);
      (void) [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) setWithInt:xr withId:nil];
      self->freeXref_ = xr;
      [self killXrefWithComAowagieTextPdfPdfObject:obj];
      break;
    }
    case ComAowagieTextPdfPdfObject_ARRAY:
    {
      
#line 2156
      ComAowagieTextPdfPdfArray *t = (ComAowagieTextPdfPdfArray *) cast_chk(obj, [ComAowagieTextPdfPdfArray class]);
      for (jint i = 0; i < [t size]; ++i) {
        [self killXrefWithComAowagieTextPdfPdfObject:[t getPdfObjectWithInt:i]];
      }
      break;
    }
    case ComAowagieTextPdfPdfObject_STREAM:
    case ComAowagieTextPdfPdfObject_DICTIONARY:
    {
      
#line 2164
      ComAowagieTextPdfPdfDictionary *dic = (ComAowagieTextPdfPdfDictionary *) cast_chk(obj, [ComAowagieTextPdfPdfDictionary class]);
      for (id __strong element in nil_chk([dic getKeys])) {
        [self killXrefWithComAowagieTextPdfPdfObject:[dic getWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *) cast_chk(element, [ComAowagieTextPdfPdfName class])]];
      }
      break;
    }
  }
}


#line 2180
- (void)setPageContentWithInt:(jint)pageNum
                withByteArray:(IOSByteArray *)content
                      withInt:(jint)compressionLevel {
  ComAowagieTextPdfPdfReader_setPageContentWithInt_withByteArray_withInt_(self, pageNum, content, compressionLevel);
}


#line 2202
+ (IOSByteArray *)getStreamBytesWithComAowagieTextPdfPRStream:(ComAowagieTextPdfPRStream *)stream
                 withComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)file {
  return ComAowagieTextPdfPdfReader_getStreamBytesWithComAowagieTextPdfPRStream_withComAowagieTextPdfRandomAccessFileOrArray_(stream, file);
}


#line 2261
+ (IOSByteArray *)getStreamBytesWithComAowagieTextPdfPRStream:(ComAowagieTextPdfPRStream *)stream {
  return ComAowagieTextPdfPdfReader_getStreamBytesWithComAowagieTextPdfPRStream_(stream);
}


#line 2278
+ (IOSByteArray *)getStreamBytesRawWithComAowagieTextPdfPRStream:(ComAowagieTextPdfPRStream *)stream
                    withComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)file {
  return ComAowagieTextPdfPdfReader_getStreamBytesRawWithComAowagieTextPdfPRStream_withComAowagieTextPdfRandomAccessFileOrArray_(stream, file);
}


#line 2320
+ (IOSByteArray *)getStreamBytesRawWithComAowagieTextPdfPRStream:(ComAowagieTextPdfPRStream *)stream {
  return ComAowagieTextPdfPdfReader_getStreamBytesRawWithComAowagieTextPdfPRStream_(stream);
}


#line 2332
- (void)eliminateSharedStreams {
  ComAowagieTextPdfPdfReader_eliminateSharedStreams(self);
}


#line 2390
- (jboolean)isTampered {
  return self->tampered_;
}


#line 2398
- (void)setTamperedWithBoolean:(jboolean)tampered {
  self->tampered_ = tampered;
  ComAowagieTextPdfPdfReader_PageRefs_keepPages(nil_chk(self->pageRefs_));
}


#line 2407
- (IOSByteArray *)getMetadata {
  ComAowagieTextPdfPdfObject *obj = ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(self->catalog_)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, METADATA)]);
  if (!([obj isKindOfClass:[ComAowagieTextPdfPRStream class]])) {
    return nil;
  }
  ComAowagieTextPdfRandomAccessFileOrArray *rf = [self getSafeFile];
  IOSByteArray *b = nil;
  @try {
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(rf)) reOpen];
    b = ComAowagieTextPdfPdfReader_getStreamBytesWithComAowagieTextPdfPRStream_withComAowagieTextPdfRandomAccessFileOrArray_((ComAowagieTextPdfPRStream *) cast_chk(obj, [ComAowagieTextPdfPRStream class]), rf);
  }
  @finally {
    @try {
      [rf close];
    }
    @catch (JavaLangException *e) {
    }
  }
  
#line 2426
  return b;
}


#line 2433
- (jint)getLastXref {
  return self->lastXref_;
}


#line 2441
- (jint)getXrefSize {
  return [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) size];
}


#line 2449
- (jint)getEofPos {
  return self->eofPos_;
}


#line 2458
- (jchar)getPdfVersion {
  return self->pdfVersion_;
}


#line 2466
- (jboolean)isEncrypted {
  return self->encrypted_;
}


#line 2475
- (jint)getPermissions {
  return self->pValue_;
}


#line 2485
- (ComAowagieTextPdfPdfDictionary *)getTrailer {
  return self->trailer_;
}

- (ComAowagieTextPdfPdfEncryption *)getDecrypt {
  return self->decrypt_;
}

+ (jboolean)equalsnWithByteArray:(IOSByteArray *)a1
                   withByteArray:(IOSByteArray *)a2 {
  return ComAowagieTextPdfPdfReader_equalsnWithByteArray_withByteArray_(a1, a2);
}


#line 2503
+ (jboolean)existsNameWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)dic
                            withComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key
                            withComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)value {
  return ComAowagieTextPdfPdfReader_existsNameWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfName_withComAowagieTextPdfPdfName_(dic, key, value);
}


#line 2512
+ (NSString *)getFontNameWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)dic {
  return ComAowagieTextPdfPdfReader_getFontNameWithComAowagieTextPdfPdfDictionary_(dic);
}


#line 2523
+ (NSString *)getSubsetPrefixWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)dic {
  return ComAowagieTextPdfPdfReader_getSubsetPrefixWithComAowagieTextPdfPdfDictionary_(dic);
}


#line 2547
- (jint)shuffleSubsetNames {
  jint total = 0;
  for (jint k = 1; k < [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) size]; ++k) {
    ComAowagieTextPdfPdfObject *obj = [self getPdfObjectReleaseWithInt:k];
    if (obj == nil || ![obj isDictionary]) {
      continue;
    }
    ComAowagieTextPdfPdfDictionary *dic = (ComAowagieTextPdfPdfDictionary *) cast_chk(obj, [ComAowagieTextPdfPdfDictionary class]);
    if (!ComAowagieTextPdfPdfReader_existsNameWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfName_withComAowagieTextPdfPdfName_(dic, JreLoadStatic(ComAowagieTextPdfPdfName, TYPE), JreLoadStatic(ComAowagieTextPdfPdfName, FONT))) {
      continue;
    }
    if (ComAowagieTextPdfPdfReader_existsNameWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfName_withComAowagieTextPdfPdfName_(dic, JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE), JreLoadStatic(ComAowagieTextPdfPdfName, TYPE1)) || ComAowagieTextPdfPdfReader_existsNameWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfName_withComAowagieTextPdfPdfName_(
#line 2559
    dic, JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE), JreLoadStatic(ComAowagieTextPdfPdfName, MMTYPE1)) || ComAowagieTextPdfPdfReader_existsNameWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfName_withComAowagieTextPdfPdfName_(
#line 2560
    dic, JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE), JreLoadStatic(ComAowagieTextPdfPdfName, TRUETYPE))) {
      NSString *s = ComAowagieTextPdfPdfReader_getSubsetPrefixWithComAowagieTextPdfPdfDictionary_(dic);
      if (s == nil) {
        continue;
      }
      NSString *ns = JreStrcat("$$", ComAowagieTextPdfBaseFont_createSubsetPrefix(), [s java_substring:7]);
      ComAowagieTextPdfPdfName *newName = new_ComAowagieTextPdfPdfName_initWithNSString_(ns);
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BASEFONT) withComAowagieTextPdfPdfObject:newName];
      ComAowagieTextPdfPdfReader_setXrefPartialObjectWithInt_withComAowagieTextPdfPdfObject_(self, k, dic);
      ++total;
      ComAowagieTextPdfPdfDictionary *fd = [dic getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTDESCRIPTOR)];
      if (fd == nil) {
        continue;
      }
      [fd putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTNAME) withComAowagieTextPdfPdfObject:newName];
    }
    else if (ComAowagieTextPdfPdfReader_existsNameWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfName_withComAowagieTextPdfPdfName_(dic, JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE), JreLoadStatic(ComAowagieTextPdfPdfName, TYPE0))) {
      NSString *s = ComAowagieTextPdfPdfReader_getSubsetPrefixWithComAowagieTextPdfPdfDictionary_(dic);
      ComAowagieTextPdfPdfArray *arr = [dic getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DESCENDANTFONTS)];
      if (arr == nil) {
        continue;
      }
      if ([arr isEmpty]) {
        continue;
      }
      ComAowagieTextPdfPdfDictionary *desc = [arr getAsDictWithInt:0];
      NSString *sde = ComAowagieTextPdfPdfReader_getSubsetPrefixWithComAowagieTextPdfPdfDictionary_(desc);
      if (sde == nil) {
        continue;
      }
      NSString *ns = ComAowagieTextPdfBaseFont_createSubsetPrefix();
      if (s != nil) {
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BASEFONT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(JreStrcat("$$", ns, [s java_substring:7]))];
      }
      ComAowagieTextPdfPdfReader_setXrefPartialObjectWithInt_withComAowagieTextPdfPdfObject_(self, k, dic);
      ComAowagieTextPdfPdfName *newName = new_ComAowagieTextPdfPdfName_initWithNSString_(JreStrcat("$$", ns, [sde java_substring:7]));
      [((ComAowagieTextPdfPdfDictionary *) nil_chk(desc)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BASEFONT) withComAowagieTextPdfPdfObject:newName];
      ++total;
      ComAowagieTextPdfPdfDictionary *fd = [desc getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTDESCRIPTOR)];
      if (fd == nil) {
        continue;
      }
      [fd putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTNAME) withComAowagieTextPdfPdfObject:newName];
    }
  }
  return total;
}

+ (ComAowagieTextPdfPdfArray *)getNameArrayWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj {
  return ComAowagieTextPdfPdfReader_getNameArrayWithComAowagieTextPdfPdfObject_(obj);
}


#line 2634
- (JavaUtilHashMap *)getNamedDestination {
  return ComAowagieTextPdfPdfReader_getNamedDestinationWithBoolean_(self, false);
}


#line 2645
- (JavaUtilHashMap *)getNamedDestinationWithBoolean:(jboolean)keepNames {
  return ComAowagieTextPdfPdfReader_getNamedDestinationWithBoolean_(self, keepNames);
}


#line 2656
- (JavaUtilHashMap *)getNamedDestinationFromNames {
  return ComAowagieTextPdfPdfReader_getNamedDestinationFromNamesWithBoolean_(self, false);
}


#line 2667
- (JavaUtilHashMap *)getNamedDestinationFromNamesWithBoolean:(jboolean)keepNames {
  return ComAowagieTextPdfPdfReader_getNamedDestinationFromNamesWithBoolean_(self, keepNames);
}


#line 2698
- (JavaUtilHashMap *)getNamedDestinationFromStrings {
  if ([((ComAowagieTextPdfPdfDictionary *) nil_chk(self->catalog_)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, NAMES)] != nil) {
    ComAowagieTextPdfPdfDictionary *dic = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(self->catalog_)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, NAMES)]), [ComAowagieTextPdfPdfDictionary class]);
    if (dic != nil) {
      dic = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([dic getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DESTS)]), [ComAowagieTextPdfPdfDictionary class]);
      if (dic != nil) {
        JavaUtilHashMap *names = ComAowagieTextPdfPdfNameTree_readTreeWithComAowagieTextPdfPdfDictionary_(dic);
        for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(names)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
          id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check([it next], JavaUtilMap_Entry_class_());
          ComAowagieTextPdfPdfArray *arr = ComAowagieTextPdfPdfReader_getNameArrayWithComAowagieTextPdfPdfObject_((ComAowagieTextPdfPdfObject *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue], [ComAowagieTextPdfPdfObject class]));
          if (arr != nil) {
            (void) [entry_ setValueWithId:arr];
          }
          else {
            
#line 2711
            [it remove];
          }
        }
        return names;
      }
    }
  }
  return new_JavaUtilLinkedHashMap_init();
}


#line 2721
- (jboolean)replaceNamedDestinationWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj
                                              withJavaUtilHashMap:(JavaUtilHashMap *)names {
  return ComAowagieTextPdfPdfReader_replaceNamedDestinationWithComAowagieTextPdfPdfObject_withJavaUtilHashMap_(self, obj, names);
}


#line 2771
- (void)removeFields {
  [((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) resetReleasePage];
  for (jint k = 1; k <= ComAowagieTextPdfPdfReader_PageRefs_size(nil_chk(self->pageRefs_)); ++k) {
    ComAowagieTextPdfPdfDictionary *page = [((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) getPageNWithInt:k];
    ComAowagieTextPdfPdfArray *annots = [((ComAowagieTextPdfPdfDictionary *) nil_chk(page)) getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ANNOTS)];
    if (annots == nil) {
      [((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) releasePageWithInt:k];
      continue;
    }
    for (jint j = 0; j < [annots size]; ++j) {
      ComAowagieTextPdfPdfObject *obj = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([annots getPdfObjectWithInt:j]);
      if (obj == nil || ![obj isDictionary]) {
        continue;
      }
      ComAowagieTextPdfPdfDictionary *annot = (ComAowagieTextPdfPdfDictionary *) cast_chk(obj, [ComAowagieTextPdfPdfDictionary class]);
      if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, WIDGET))) isEqual:[annot getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE)]]) {
        (void) [annots removeWithInt:j--];
      }
    }
    if ([annots isEmpty]) {
      [page removeWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ANNOTS)];
    }
    else {
      
#line 2793
      [((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) releasePageWithInt:k];
    }
  }
  [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->catalog_)) removeWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ACROFORM)];
  [((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) resetReleasePage];
}


#line 2804
- (void)iterateBookmarksWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)outlineRef
                                   withJavaUtilHashMap:(JavaUtilHashMap *)names {
  ComAowagieTextPdfPdfReader_iterateBookmarksWithComAowagieTextPdfPdfObject_withJavaUtilHashMap_(self, outlineRef, names);
}


#line 2817
- (void)consolidateNamedDestinations {
  if (self->consolidateNamedDestinations_) {
    return;
  }
  self->consolidateNamedDestinations_ = true;
  JavaUtilHashMap *names = ComAowagieTextPdfPdfReader_getNamedDestinationWithBoolean_(self, true);
  if ([((JavaUtilHashMap *) nil_chk(names)) isEmpty]) {
    return;
  }
  for (jint k = 1; k <= ComAowagieTextPdfPdfReader_PageRefs_size(nil_chk(self->pageRefs_)); ++k) {
    ComAowagieTextPdfPdfDictionary *page = [((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) getPageNWithInt:k];
    ComAowagieTextPdfPdfObject *annotsRef;
    ComAowagieTextPdfPdfArray *annots = (ComAowagieTextPdfPdfArray *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_(annotsRef = [((ComAowagieTextPdfPdfDictionary *) nil_chk(page)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ANNOTS)]), [ComAowagieTextPdfPdfArray class]);
    jint annotIdx = self->lastXrefPartial_;
    ComAowagieTextPdfPdfReader_releaseLastXrefPartial(self);
    if (annots == nil) {
      [((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) releasePageWithInt:k];
      continue;
    }
    jboolean commitAnnots = false;
    for (jint an = 0; an < [annots size]; ++an) {
      ComAowagieTextPdfPdfObject *objRef = [annots getPdfObjectWithInt:an];
      if (ComAowagieTextPdfPdfReader_replaceNamedDestinationWithComAowagieTextPdfPdfObject_withJavaUtilHashMap_(self, objRef, names) && ![((ComAowagieTextPdfPdfObject *) nil_chk(objRef)) isIndirect]) {
        commitAnnots = true;
      }
    }
    if (commitAnnots) {
      ComAowagieTextPdfPdfReader_setXrefPartialObjectWithInt_withComAowagieTextPdfPdfObject_(self, annotIdx, annots);
    }
    if (!commitAnnots || [((ComAowagieTextPdfPdfObject *) nil_chk(annotsRef)) isIndirect]) {
      [((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) releasePageWithInt:k];
    }
  }
  ComAowagieTextPdfPdfDictionary *outlines = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(self->catalog_)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, OUTLINES)]), [ComAowagieTextPdfPdfDictionary class]);
  if (outlines == nil) {
    return;
  }
  ComAowagieTextPdfPdfReader_iterateBookmarksWithComAowagieTextPdfPdfObject_withJavaUtilHashMap_(self, [outlines getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FIRST)], names);
}

+ (ComAowagieTextPdfPdfDictionary *)duplicatePdfDictionaryWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)original
                                                          withComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)copy_
                                                              withComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)newReader {
  return ComAowagieTextPdfPdfReader_duplicatePdfDictionaryWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfReader_(original, copy_, newReader);
}


#line 2868
+ (ComAowagieTextPdfPdfObject *)duplicatePdfObjectWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)original
                                                  withComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)newReader {
  return ComAowagieTextPdfPdfReader_duplicatePdfObjectWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfReader_(original, newReader);
}


#line 2901
- (void)close {
  if (!self->partial_) {
    return;
  }
  @try {
    [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) close];
  }
  @catch (JavaIoIOException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}

- (void)removeUnusedNodeWithComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)obj
                                      withBooleanArray:(IOSBooleanArray *)hits {
  ComAowagieTextPdfPdfReader_removeUnusedNodeWithComAowagieTextPdfPdfObject_withBooleanArray_(self, obj, hits);
}


#line 3009
- (jint)removeUnusedObjects {
  return ComAowagieTextPdfPdfReader_removeUnusedObjects(self);
}


#line 3037
- (ComAowagieTextPdfAcroFields *)getAcroFields {
  return new_ComAowagieTextPdfAcroFields_initWithComAowagieTextPdfPdfReader_withComAowagieTextPdfPdfWriter_(self, nil);
}


#line 3047
- (NSString *)getJavaScriptWithComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)file {
  return ComAowagieTextPdfPdfReader_getJavaScriptWithComAowagieTextPdfRandomAccessFileOrArray_(self, file);
}


#line 3089
- (NSString *)getJavaScript {
  ComAowagieTextPdfRandomAccessFileOrArray *rf = [self getSafeFile];
  @try {
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(rf)) reOpen];
    return ComAowagieTextPdfPdfReader_getJavaScriptWithComAowagieTextPdfRandomAccessFileOrArray_(self, rf);
  }
  @finally {
    @try {
      
#line 3096
      [rf close];
    }
    @catch (
#line 3096
    JavaLangException *e) {
    }
  }
}

- (void)selectPagesWithJavaUtilList:(id<JavaUtilList>)pagesToKeep {
  ComAowagieTextPdfPdfReader_PageRefs_selectPagesWithJavaUtilList_(nil_chk(self->pageRefs_), pagesToKeep);
  ComAowagieTextPdfPdfReader_removeUnusedObjects(self);
}


#line 3117
- (void)setViewerPreferencesWithInt:(jint)preferences {
  
#line 3119
  [((ComAowagieTextPdfInternalPdfViewerPreferencesImp *) nil_chk(self->viewerPreferences_)) setViewerPreferencesWithInt:preferences];
  [self setViewerPreferencesWithComAowagieTextPdfInternalPdfViewerPreferencesImp:self->viewerPreferences_];
}


#line 3128
- (void)addViewerPreferenceWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key
                         withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)value {
  [((ComAowagieTextPdfInternalPdfViewerPreferencesImp *) nil_chk(self->viewerPreferences_)) addViewerPreferenceWithComAowagieTextPdfPdfName:key withComAowagieTextPdfPdfObject:value];
  [self setViewerPreferencesWithComAowagieTextPdfInternalPdfViewerPreferencesImp:self->viewerPreferences_];
}

- (void)setViewerPreferencesWithComAowagieTextPdfInternalPdfViewerPreferencesImp:(ComAowagieTextPdfInternalPdfViewerPreferencesImp *)vp {
  [((ComAowagieTextPdfInternalPdfViewerPreferencesImp *) nil_chk(vp)) addToCatalogWithComAowagieTextPdfPdfDictionary:self->catalog_];
}


#line 3143
- (jint)getSimpleViewerPreferences {
  return [((ComAowagieTextPdfInternalPdfViewerPreferencesImp *) nil_chk(ComAowagieTextPdfInternalPdfViewerPreferencesImp_getViewerPreferencesWithComAowagieTextPdfPdfDictionary_(self->catalog_))) getPageLayoutAndMode];
}


#line 3151
- (jboolean)isAppendable {
  return self->appendable_;
}


#line 3159
- (void)setAppendableWithBoolean:(jboolean)appendable {
  self->appendable_ = appendable;
  if (appendable) {
    (void) ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(self->trailer_)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ROOT)]);
  }
}


#line 3170
- (jboolean)isNewXrefType {
  return self->newXrefType_;
}


#line 3178
- (jint)getFileLength {
  return self->fileLength_;
}


#line 3186
- (jboolean)isHybridXref {
  return self->hybridXref_;
}


#line 3517
- (ComAowagieTextPdfPdfIndirectReference *)getCryptoRef {
  if (self->cryptoRef_ == nil) {
    return nil;
  }
  return new_ComAowagieTextPdfPdfIndirectReference_initWithInt_withInt_withInt_(0, [self->cryptoRef_ getNumber], [((ComAowagieTextPdfPRIndirectReference *) nil_chk(self->cryptoRef_)) getGeneration]);
}


#line 3529
- (void)removeUsageRights {
  ComAowagieTextPdfPdfDictionary *perms = [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->catalog_)) getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PERMS)];
  if (perms == nil) {
    return;
  }
  [perms removeWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, UR)];
  [perms removeWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, UR3)];
  if ([perms size] == 0) {
    [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->catalog_)) removeWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PERMS)];
  }
}


#line 3551
- (jint)getCertificationLevel {
  ComAowagieTextPdfPdfDictionary *dic = [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->catalog_)) getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PERMS)];
  if (dic == nil) {
    return ComAowagieTextPdfPdfSignatureAppearance_NOT_CERTIFIED;
  }
  dic = [dic getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DOCMDP)];
  if (dic == nil) {
    return ComAowagieTextPdfPdfSignatureAppearance_NOT_CERTIFIED;
  }
  ComAowagieTextPdfPdfArray *arr = [dic getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, REFERENCE)];
  if (arr == nil || [arr size] == 0) {
    return ComAowagieTextPdfPdfSignatureAppearance_NOT_CERTIFIED;
  }
  dic = [arr getAsDictWithInt:0];
  if (dic == nil) {
    return ComAowagieTextPdfPdfSignatureAppearance_NOT_CERTIFIED;
  }
  dic = [dic getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TRANSFORMPARAMS)];
  if (dic == nil) {
    return ComAowagieTextPdfPdfSignatureAppearance_NOT_CERTIFIED;
  }
  ComAowagieTextPdfPdfNumber *p = [dic getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, P)];
  if (p == nil) {
    return ComAowagieTextPdfPdfSignatureAppearance_NOT_CERTIFIED;
  }
  return [p intValue];
}


#line 3586
- (jboolean)isOpenedWithFullPermissions {
  return !self->encrypted_ || self->ownerPasswordUsed_;
}

- (jint)getCryptoMode {
  if (self->decrypt_ == nil) {
    return -1;
  }
  else {
    
#line 3594
    return [self->decrypt_ getCryptoMode];
  }
}


#line 3598
- (jboolean)isMetadataEncrypted {
  if (self->decrypt_ == nil) {
    return false;
  }
  else {
    
#line 3602
    return [self->decrypt_ isMetadataEncrypted];
  }
}


#line 3607
+ (void)isAfirmaModifiedItext {
  ComAowagieTextPdfPdfReader_isAfirmaModifiedItext();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, 1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 6, 1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 7, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, 1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 9, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfRandomAccessFileOrArray;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfReaderInstance;", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPRAcroForm;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 14, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextRectangle;", 0x1, 15, 13, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextRectangle;", 0x0, 15, 14, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextRectangle;", 0x1, 16, 13, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextRectangle;", 0x2, 16, 14, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextRectangle;", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextRectangle;", 0x8, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfObject;", 0x9, 23, 24, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfObject;", 0x9, 25, 24, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfObject;", 0x8, 23, 26, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfObject;", 0x8, 25, 26, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfObject;", 0x0, 23, 13, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfObject;", 0x1, 25, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 27, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 29, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPRIndirectReference;", 0x1, 30, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfObject;", 0x2, 31, 13, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfObject;", 0x2, 32, 33, 1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 35, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 37, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfObject;", 0x8, 38, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, 40, 13, 1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfArray;", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfObject;", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0xa, 41, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 42, 43, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 41, 44, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 45, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 46, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 47, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x1, 48, 13, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x1, 49, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPRIndirectReference;", 0x1, 51, 13, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 52, 53, 1, -1, -1, -1 },
    { NULL, "V", 0x4, 54, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 56, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 57, 58, 1, -1, -1, -1 },
    { NULL, "[B", 0x9, 57, 35, 1, -1, -1, -1 },
    { NULL, "[B", 0xa, 59, 58, 1, -1, -1, -1 },
    { NULL, "[B", 0x8, 59, 35, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 61, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfEncryption;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 62, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 63, 64, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 65, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 66, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfArray;", 0xa, 67, 24, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x2, 68, 61, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x2, 69, 61, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 70, 71, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 72, 71, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0xa, 73, 74, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfObject;", 0xa, 75, 76, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 77, 78, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfAcroFields;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 79, 80, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x0, 81, 82, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 83, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 84, 85, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 83, 86, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 87, 61, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfIndirectReference;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(initWithNSString:withByteArray:);
  methods[3].selector = @selector(initWithByteArray:);
  methods[4].selector = @selector(initWithByteArray:withByteArray:);
  methods[5].selector = @selector(initWithNSString:withJavaSecurityCertCertificate:withJavaSecurityKey:withNSString:);
  methods[6].selector = @selector(initWithJavaNetURL:withByteArray:);
  methods[7].selector = @selector(initWithJavaIoInputStream:withByteArray:);
  methods[8].selector = @selector(initWithJavaIoInputStream:);
  methods[9].selector = @selector(initWithComAowagieTextPdfPdfReader:);
  methods[10].selector = @selector(getSafeFile);
  methods[11].selector = @selector(getPdfReaderInstanceWithComAowagieTextPdfPdfWriter:);
  methods[12].selector = @selector(getNumberOfPages);
  methods[13].selector = @selector(getCatalog);
  methods[14].selector = @selector(getAcroForm);
  methods[15].selector = @selector(getPageRotationWithInt:);
  methods[16].selector = @selector(getPageRotationWithComAowagieTextPdfPdfDictionary:);
  methods[17].selector = @selector(getPageSizeWithRotationWithInt:);
  methods[18].selector = @selector(getPageSizeWithRotationWithComAowagieTextPdfPdfDictionary:);
  methods[19].selector = @selector(getPageSizeWithInt:);
  methods[20].selector = @selector(getPageSizeWithComAowagieTextPdfPdfDictionary:);
  methods[21].selector = @selector(getBoxSizeWithInt:withNSString:);
  methods[22].selector = @selector(getInfo);
  methods[23].selector = @selector(getNormalizedRectangleWithComAowagieTextPdfPdfArray:);
  methods[24].selector = @selector(readPdf);
  methods[25].selector = @selector(readPdfPartial);
  methods[26].selector = @selector(equalsArrayWithByteArray:withByteArray:withInt:);
  methods[27].selector = @selector(readDecryptedDocObj);
  methods[28].selector = @selector(getPdfObjectReleaseWithComAowagieTextPdfPdfObject:);
  methods[29].selector = @selector(getPdfObjectWithComAowagieTextPdfPdfObject:);
  methods[30].selector = @selector(getPdfObjectReleaseWithComAowagieTextPdfPdfObject:withComAowagieTextPdfPdfObject:);
  methods[31].selector = @selector(getPdfObjectWithComAowagieTextPdfPdfObject:withComAowagieTextPdfPdfObject:);
  methods[32].selector = @selector(getPdfObjectReleaseWithInt:);
  methods[33].selector = @selector(getPdfObjectWithInt:);
  methods[34].selector = @selector(releaseLastXrefPartial);
  methods[35].selector = @selector(releaseLastXrefPartialWithComAowagieTextPdfPdfObject:);
  methods[36].selector = @selector(setXrefPartialObjectWithInt:withComAowagieTextPdfPdfObject:);
  methods[37].selector = @selector(addPdfObjectWithComAowagieTextPdfPdfObject:);
  methods[38].selector = @selector(readPages);
  methods[39].selector = @selector(readDocObjPartial);
  methods[40].selector = @selector(readSingleObjectWithInt:);
  methods[41].selector = @selector(readOneObjStmWithComAowagieTextPdfPRStream:withInt:);
  methods[42].selector = @selector(readDocObj);
  methods[43].selector = @selector(checkPRStreamLengthWithComAowagieTextPdfPRStream:);
  methods[44].selector = @selector(readObjStmWithComAowagieTextPdfPRStream:withComAowagieTextPdfIntHashtable:);
  methods[45].selector = @selector(killIndirectWithComAowagieTextPdfPdfObject:);
  methods[46].selector = @selector(ensureXrefSizeWithInt:);
  methods[47].selector = @selector(readXref);
  methods[48].selector = @selector(readXrefSection);
  methods[49].selector = @selector(readXRefStreamWithInt:);
  methods[50].selector = @selector(rebuildXref);
  methods[51].selector = @selector(readDictionary);
  methods[52].selector = @selector(readArray);
  methods[53].selector = @selector(readPRObject);
  methods[54].selector = @selector(FlateDecodeWithByteArray:);
  methods[55].selector = @selector(decodePredictorWithByteArray:withComAowagieTextPdfPdfObject:);
  methods[56].selector = @selector(FlateDecodeWithByteArray:withBoolean:);
  methods[57].selector = @selector(ASCIIHexDecodeWithByteArray:);
  methods[58].selector = @selector(ASCII85DecodeWithByteArray:);
  methods[59].selector = @selector(LZWDecodeWithByteArray:);
  methods[60].selector = @selector(isRebuilt);
  methods[61].selector = @selector(getPageNWithInt:);
  methods[62].selector = @selector(getPageNReleaseWithInt:);
  methods[63].selector = @selector(releasePageWithInt:);
  methods[64].selector = @selector(resetReleasePage);
  methods[65].selector = @selector(getPageOrigRefWithInt:);
  methods[66].selector = @selector(getPageContentWithInt:withComAowagieTextPdfRandomAccessFileOrArray:);
  methods[67].selector = @selector(killXrefWithComAowagieTextPdfPdfObject:);
  methods[68].selector = @selector(setPageContentWithInt:withByteArray:withInt:);
  methods[69].selector = @selector(getStreamBytesWithComAowagieTextPdfPRStream:withComAowagieTextPdfRandomAccessFileOrArray:);
  methods[70].selector = @selector(getStreamBytesWithComAowagieTextPdfPRStream:);
  methods[71].selector = @selector(getStreamBytesRawWithComAowagieTextPdfPRStream:withComAowagieTextPdfRandomAccessFileOrArray:);
  methods[72].selector = @selector(getStreamBytesRawWithComAowagieTextPdfPRStream:);
  methods[73].selector = @selector(eliminateSharedStreams);
  methods[74].selector = @selector(isTampered);
  methods[75].selector = @selector(setTamperedWithBoolean:);
  methods[76].selector = @selector(getMetadata);
  methods[77].selector = @selector(getLastXref);
  methods[78].selector = @selector(getXrefSize);
  methods[79].selector = @selector(getEofPos);
  methods[80].selector = @selector(getPdfVersion);
  methods[81].selector = @selector(isEncrypted);
  methods[82].selector = @selector(getPermissions);
  methods[83].selector = @selector(getTrailer);
  methods[84].selector = @selector(getDecrypt);
  methods[85].selector = @selector(equalsnWithByteArray:withByteArray:);
  methods[86].selector = @selector(existsNameWithComAowagieTextPdfPdfDictionary:withComAowagieTextPdfPdfName:withComAowagieTextPdfPdfName:);
  methods[87].selector = @selector(getFontNameWithComAowagieTextPdfPdfDictionary:);
  methods[88].selector = @selector(getSubsetPrefixWithComAowagieTextPdfPdfDictionary:);
  methods[89].selector = @selector(shuffleSubsetNames);
  methods[90].selector = @selector(getNameArrayWithComAowagieTextPdfPdfObject:);
  methods[91].selector = @selector(getNamedDestination);
  methods[92].selector = @selector(getNamedDestinationWithBoolean:);
  methods[93].selector = @selector(getNamedDestinationFromNames);
  methods[94].selector = @selector(getNamedDestinationFromNamesWithBoolean:);
  methods[95].selector = @selector(getNamedDestinationFromStrings);
  methods[96].selector = @selector(replaceNamedDestinationWithComAowagieTextPdfPdfObject:withJavaUtilHashMap:);
  methods[97].selector = @selector(removeFields);
  methods[98].selector = @selector(iterateBookmarksWithComAowagieTextPdfPdfObject:withJavaUtilHashMap:);
  methods[99].selector = @selector(consolidateNamedDestinations);
  methods[100].selector = @selector(duplicatePdfDictionaryWithComAowagieTextPdfPdfDictionary:withComAowagieTextPdfPdfDictionary:withComAowagieTextPdfPdfReader:);
  methods[101].selector = @selector(duplicatePdfObjectWithComAowagieTextPdfPdfObject:withComAowagieTextPdfPdfReader:);
  methods[102].selector = @selector(close);
  methods[103].selector = @selector(removeUnusedNodeWithComAowagieTextPdfPdfObject:withBooleanArray:);
  methods[104].selector = @selector(removeUnusedObjects);
  methods[105].selector = @selector(getAcroFields);
  methods[106].selector = @selector(getJavaScriptWithComAowagieTextPdfRandomAccessFileOrArray:);
  methods[107].selector = @selector(getJavaScript);
  methods[108].selector = @selector(selectPagesWithJavaUtilList:);
  methods[109].selector = @selector(setViewerPreferencesWithInt:);
  methods[110].selector = @selector(addViewerPreferenceWithComAowagieTextPdfPdfName:withComAowagieTextPdfPdfObject:);
  methods[111].selector = @selector(setViewerPreferencesWithComAowagieTextPdfInternalPdfViewerPreferencesImp:);
  methods[112].selector = @selector(getSimpleViewerPreferences);
  methods[113].selector = @selector(isAppendable);
  methods[114].selector = @selector(setAppendableWithBoolean:);
  methods[115].selector = @selector(isNewXrefType);
  methods[116].selector = @selector(getFileLength);
  methods[117].selector = @selector(isHybridXref);
  methods[118].selector = @selector(getCryptoRef);
  methods[119].selector = @selector(removeUsageRights);
  methods[120].selector = @selector(getCertificationLevel);
  methods[121].selector = @selector(isOpenedWithFullPermissions);
  methods[122].selector = @selector(getCryptoMode);
  methods[123].selector = @selector(isMetadataEncrypted);
  methods[124].selector = @selector(isAfirmaModifiedItext);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pageInhCandidates", "[LComAowagieTextPdfPdfName;", .constantValue.asLong = 0, 0x1a, -1, 88, -1, -1 },
    { "endstream", "[B", .constantValue.asLong = 0, 0x1a, -1, 89, -1, -1 },
    { "endobj", "[B", .constantValue.asLong = 0, 0x1a, -1, 90, -1, -1 },
    { "tokens_", "LComAowagieTextPdfPRTokeniser;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "xref_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "objStmMark_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "objStmToOffset_", "LComAowagieTextPdfIntHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "newXrefType_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "xrefObj_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rootPages_", "LComAowagieTextPdfPdfDictionary;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "trailer_", "LComAowagieTextPdfPdfDictionary;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "catalog_", "LComAowagieTextPdfPdfDictionary;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "pageRefs_", "LComAowagieTextPdfPdfReader_PageRefs;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "acroForm_", "LComAowagieTextPdfPRAcroForm;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "acroFormParsed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encrypted_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rebuilt_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "freeXref_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tampered_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastXref_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "eofPos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pdfVersion_", "C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "decrypt_", "LComAowagieTextPdfPdfEncryption;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "password_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "certificateKey_", "LJavaSecurityKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "certificate_", "LJavaSecurityCertCertificate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "certificateKeyProvider_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ownerPasswordUsed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strings_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sharedStreams_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "consolidateNamedDestinations_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rValue_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pValue_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "objNum_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "objGen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fileLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hybridXref_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastXrefPartial_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "partial_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cryptoRef_", "LComAowagieTextPdfPRIndirectReference;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "viewerPreferences_", "LComAowagieTextPdfInternalPdfViewerPreferencesImp;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "encryptionError_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "appendable_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "readDepth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaIoIOException;", "LNSString;[B", "[B", "[B[B", "LNSString;LJavaSecurityCertCertificate;LJavaSecurityKey;LNSString;", "LJavaNetURL;[B", "LJavaIoInputStream;[B", "LJavaIoInputStream;", "LComAowagieTextPdfPdfReader;", "getPdfReaderInstance", "LComAowagieTextPdfPdfWriter;", "getPageRotation", "I", "LComAowagieTextPdfPdfDictionary;", "getPageSizeWithRotation", "getPageSize", "getBoxSize", "ILNSString;", "getNormalizedRectangle", "LComAowagieTextPdfPdfArray;", "equalsArray", "[B[BI", "getPdfObjectRelease", "LComAowagieTextPdfPdfObject;", "getPdfObject", "LComAowagieTextPdfPdfObject;LComAowagieTextPdfPdfObject;", "releaseLastXrefPartial", "setXrefPartialObject", "ILComAowagieTextPdfPdfObject;", "addPdfObject", "readSingleObject", "readOneObjStm", "LComAowagieTextPdfPRStream;I", "checkPRStreamLength", "LComAowagieTextPdfPRStream;", "readObjStm", "LComAowagieTextPdfPRStream;LComAowagieTextPdfIntHashtable;", "killIndirect", "ensureXrefSize", "readXRefStream", "FlateDecode", "decodePredictor", "[BLComAowagieTextPdfPdfObject;", "[BZ", "ASCIIHexDecode", "ASCII85Decode", "LZWDecode", "getPageN", "getPageNRelease", "releasePage", "getPageOrigRef", "getPageContent", "ILComAowagieTextPdfRandomAccessFileOrArray;", "killXref", "setPageContent", "I[BI", "getStreamBytes", "LComAowagieTextPdfPRStream;LComAowagieTextPdfRandomAccessFileOrArray;", "getStreamBytesRaw", "setTampered", "Z", "equalsn", "existsName", "LComAowagieTextPdfPdfDictionary;LComAowagieTextPdfPdfName;LComAowagieTextPdfPdfName;", "getFontName", "getSubsetPrefix", "getNameArray", "getNamedDestination", "getNamedDestinationFromNames", "replaceNamedDestination", "LComAowagieTextPdfPdfObject;LJavaUtilHashMap;", "iterateBookmarks", "duplicatePdfDictionary", "LComAowagieTextPdfPdfDictionary;LComAowagieTextPdfPdfDictionary;LComAowagieTextPdfPdfReader;", "duplicatePdfObject", "LComAowagieTextPdfPdfObject;LComAowagieTextPdfPdfReader;", "removeUnusedNode", "LComAowagieTextPdfPdfObject;[Z", "getJavaScript", "LComAowagieTextPdfRandomAccessFileOrArray;", "selectPages", "LJavaUtilList;", "setViewerPreferences", "addViewerPreference", "LComAowagieTextPdfPdfName;LComAowagieTextPdfPdfObject;", "LComAowagieTextPdfInternalPdfViewerPreferencesImp;", "setAppendable", &ComAowagieTextPdfPdfReader_pageInhCandidates, &ComAowagieTextPdfPdfReader_endstream, &ComAowagieTextPdfPdfReader_endobj, "LComAowagieTextPdfPdfReader_PageRefs;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfReader = { "PdfReader", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x1, 125, 44, -1, 91, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfReader;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfPdfReader class]) {
    ComAowagieTextPdfPdfReader_pageInhCandidates = [IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(ComAowagieTextPdfPdfName, MEDIABOX), JreLoadStatic(ComAowagieTextPdfPdfName, ROTATE), JreLoadStatic(ComAowagieTextPdfPdfName, RESOURCES), JreLoadStatic(ComAowagieTextPdfPdfName, CROPBOX) } count:4 type:ComAowagieTextPdfPdfName_class_()];
    ComAowagieTextPdfPdfReader_endstream = ComAowagieTextPdfPdfEncodings_convertToBytesWithNSString_withNSString_(
#line 97
    @"endstream", nil);
    ComAowagieTextPdfPdfReader_endobj = ComAowagieTextPdfPdfEncodings_convertToBytesWithNSString_withNSString_(
#line 98
    @"endobj", nil);
    J2OBJC_SET_INITIALIZED(ComAowagieTextPdfPdfReader)
  }
}

@end


#line 149
void ComAowagieTextPdfPdfReader_init(ComAowagieTextPdfPdfReader *self) {
  NSObject_init(self);
  self->acroForm_ =
#line 113
  nil;
  self->acroFormParsed_ = false;
  self->encrypted_ = false;
  self->rebuilt_ = false;
  self->tampered_ =
#line 118
  false;
  self->password_ =
#line 123
  nil;
  self->certificateKey_ = nil;
  self->certificate_ = nil;
  self->certificateKeyProvider_ = nil;
  self->strings_ = new_JavaUtilArrayList_init();
  self->sharedStreams_ =
#line 129
  true;
  self->consolidateNamedDestinations_ = false;
  self->lastXrefPartial_ =
#line 137
  -1;
  self->viewerPreferences_ = new_ComAowagieTextPdfInternalPdfViewerPreferencesImp_init();
  self->readDepth_ =
#line 1685
  0;
}


#line 149
ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfReader, init)
}


#line 149
ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfReader, init)
}


#line 156
void ComAowagieTextPdfPdfReader_initWithNSString_(ComAowagieTextPdfPdfReader *self, NSString *filename) {
  ComAowagieTextPdfPdfReader_initWithNSString_withByteArray_(self, filename, nil);
}


#line 156
ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_initWithNSString_(NSString *filename) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfReader, initWithNSString_, filename)
}


#line 156
ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_initWithNSString_(NSString *filename) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfReader, initWithNSString_, filename)
}


#line 165
void ComAowagieTextPdfPdfReader_initWithNSString_withByteArray_(ComAowagieTextPdfPdfReader *self, NSString *filename, IOSByteArray *ownerPassword) {
  NSObject_init(self);
  self->acroForm_ =
#line 113
  nil;
  self->acroFormParsed_ = false;
  self->encrypted_ = false;
  self->rebuilt_ = false;
  self->tampered_ =
#line 118
  false;
  self->password_ =
#line 123
  nil;
  self->certificateKey_ = nil;
  self->certificate_ = nil;
  self->certificateKeyProvider_ = nil;
  self->strings_ = new_JavaUtilArrayList_init();
  self->sharedStreams_ =
#line 129
  true;
  self->consolidateNamedDestinations_ = false;
  self->lastXrefPartial_ =
#line 137
  -1;
  self->viewerPreferences_ = new_ComAowagieTextPdfInternalPdfViewerPreferencesImp_init();
  self->readDepth_ =
#line 1685
  0;
  
#line 166
  self->password_ = ownerPassword;
  self->tokens_ = new_ComAowagieTextPdfPRTokeniser_initWithNSString_(filename);
  [self readPdf];
}


#line 165
ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_initWithNSString_withByteArray_(NSString *filename, IOSByteArray *ownerPassword) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfReader, initWithNSString_withByteArray_, filename, ownerPassword)
}


#line 165
ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_initWithNSString_withByteArray_(NSString *filename, IOSByteArray *ownerPassword) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfReader, initWithNSString_withByteArray_, filename, ownerPassword)
}


#line 175
void ComAowagieTextPdfPdfReader_initWithByteArray_(ComAowagieTextPdfPdfReader *self, IOSByteArray *pdfIn) {
  ComAowagieTextPdfPdfReader_initWithByteArray_withByteArray_(self, pdfIn, nil);
}


#line 175
ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_initWithByteArray_(IOSByteArray *pdfIn) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfReader, initWithByteArray_, pdfIn)
}


#line 175
ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_initWithByteArray_(IOSByteArray *pdfIn) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfReader, initWithByteArray_, pdfIn)
}


#line 184
void ComAowagieTextPdfPdfReader_initWithByteArray_withByteArray_(ComAowagieTextPdfPdfReader *self, IOSByteArray *pdfIn, IOSByteArray *ownerPassword) {
  NSObject_init(self);
  self->acroForm_ =
#line 113
  nil;
  self->acroFormParsed_ = false;
  self->encrypted_ = false;
  self->rebuilt_ = false;
  self->tampered_ =
#line 118
  false;
  self->password_ =
#line 123
  nil;
  self->certificateKey_ = nil;
  self->certificate_ = nil;
  self->certificateKeyProvider_ = nil;
  self->strings_ = new_JavaUtilArrayList_init();
  self->sharedStreams_ =
#line 129
  true;
  self->consolidateNamedDestinations_ = false;
  self->lastXrefPartial_ =
#line 137
  -1;
  self->viewerPreferences_ = new_ComAowagieTextPdfInternalPdfViewerPreferencesImp_init();
  self->readDepth_ =
#line 1685
  0;
  
#line 185
  self->password_ = ownerPassword;
  self->tokens_ = new_ComAowagieTextPdfPRTokeniser_initWithByteArray_(pdfIn);
  [self readPdf];
}


#line 184
ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_initWithByteArray_withByteArray_(IOSByteArray *pdfIn, IOSByteArray *ownerPassword) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfReader, initWithByteArray_withByteArray_, pdfIn, ownerPassword)
}


#line 184
ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_initWithByteArray_withByteArray_(IOSByteArray *pdfIn, IOSByteArray *ownerPassword) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfReader, initWithByteArray_withByteArray_, pdfIn, ownerPassword)
}


#line 197
void ComAowagieTextPdfPdfReader_initWithNSString_withJavaSecurityCertCertificate_withJavaSecurityKey_withNSString_(ComAowagieTextPdfPdfReader *self, NSString *filename, JavaSecurityCertCertificate *certificate, id<JavaSecurityKey> certificateKey, NSString *certificateKeyProvider) {
  NSObject_init(self);
  self->acroForm_ =
#line 113
  nil;
  self->acroFormParsed_ = false;
  self->encrypted_ = false;
  self->rebuilt_ = false;
  self->tampered_ =
#line 118
  false;
  self->password_ =
#line 123
  nil;
  self->certificateKey_ = nil;
  self->certificate_ = nil;
  self->certificateKeyProvider_ = nil;
  self->strings_ = new_JavaUtilArrayList_init();
  self->sharedStreams_ =
#line 129
  true;
  self->consolidateNamedDestinations_ = false;
  self->lastXrefPartial_ =
#line 137
  -1;
  self->viewerPreferences_ = new_ComAowagieTextPdfInternalPdfViewerPreferencesImp_init();
  self->readDepth_ =
#line 1685
  0;
  
#line 198
  self->certificate_ = certificate;
  self->certificateKey_ = certificateKey;
  self->certificateKeyProvider_ = certificateKeyProvider;
  self->tokens_ = new_ComAowagieTextPdfPRTokeniser_initWithNSString_(filename);
  [self readPdf];
}


#line 197
ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_initWithNSString_withJavaSecurityCertCertificate_withJavaSecurityKey_withNSString_(NSString *filename, JavaSecurityCertCertificate *certificate, id<JavaSecurityKey> certificateKey, NSString *certificateKeyProvider) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfReader, initWithNSString_withJavaSecurityCertCertificate_withJavaSecurityKey_withNSString_, filename, certificate, certificateKey, certificateKeyProvider)
}


#line 197
ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_initWithNSString_withJavaSecurityCertCertificate_withJavaSecurityKey_withNSString_(NSString *filename, JavaSecurityCertCertificate *certificate, id<JavaSecurityKey> certificateKey, NSString *certificateKeyProvider) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfReader, initWithNSString_withJavaSecurityCertCertificate_withJavaSecurityKey_withNSString_, filename, certificate, certificateKey, certificateKeyProvider)
}


#line 212
void ComAowagieTextPdfPdfReader_initWithJavaNetURL_withByteArray_(ComAowagieTextPdfPdfReader *self, JavaNetURL *url, IOSByteArray *ownerPassword) {
  NSObject_init(self);
  self->acroForm_ =
#line 113
  nil;
  self->acroFormParsed_ = false;
  self->encrypted_ = false;
  self->rebuilt_ = false;
  self->tampered_ =
#line 118
  false;
  self->password_ =
#line 123
  nil;
  self->certificateKey_ = nil;
  self->certificate_ = nil;
  self->certificateKeyProvider_ = nil;
  self->strings_ = new_JavaUtilArrayList_init();
  self->sharedStreams_ =
#line 129
  true;
  self->consolidateNamedDestinations_ = false;
  self->lastXrefPartial_ =
#line 137
  -1;
  self->viewerPreferences_ = new_ComAowagieTextPdfInternalPdfViewerPreferencesImp_init();
  self->readDepth_ =
#line 1685
  0;
  
#line 213
  self->password_ = ownerPassword;
  self->tokens_ = new_ComAowagieTextPdfPRTokeniser_initWithComAowagieTextPdfRandomAccessFileOrArray_(new_ComAowagieTextPdfRandomAccessFileOrArray_initWithJavaNetURL_(url));
  [self readPdf];
}


#line 212
ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_initWithJavaNetURL_withByteArray_(JavaNetURL *url, IOSByteArray *ownerPassword) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfReader, initWithJavaNetURL_withByteArray_, url, ownerPassword)
}


#line 212
ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_initWithJavaNetURL_withByteArray_(JavaNetURL *url, IOSByteArray *ownerPassword) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfReader, initWithJavaNetURL_withByteArray_, url, ownerPassword)
}


#line 225
void ComAowagieTextPdfPdfReader_initWithJavaIoInputStream_withByteArray_(ComAowagieTextPdfPdfReader *self, JavaIoInputStream *is, IOSByteArray *ownerPassword) {
  NSObject_init(self);
  self->acroForm_ =
#line 113
  nil;
  self->acroFormParsed_ = false;
  self->encrypted_ = false;
  self->rebuilt_ = false;
  self->tampered_ =
#line 118
  false;
  self->password_ =
#line 123
  nil;
  self->certificateKey_ = nil;
  self->certificate_ = nil;
  self->certificateKeyProvider_ = nil;
  self->strings_ = new_JavaUtilArrayList_init();
  self->sharedStreams_ =
#line 129
  true;
  self->consolidateNamedDestinations_ = false;
  self->lastXrefPartial_ =
#line 137
  -1;
  self->viewerPreferences_ = new_ComAowagieTextPdfInternalPdfViewerPreferencesImp_init();
  self->readDepth_ =
#line 1685
  0;
  
#line 226
  self->password_ = ownerPassword;
  self->tokens_ = new_ComAowagieTextPdfPRTokeniser_initWithComAowagieTextPdfRandomAccessFileOrArray_(new_ComAowagieTextPdfRandomAccessFileOrArray_initWithJavaIoInputStream_(is));
  [self readPdf];
}


#line 225
ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_initWithJavaIoInputStream_withByteArray_(JavaIoInputStream *is, IOSByteArray *ownerPassword) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfReader, initWithJavaIoInputStream_withByteArray_, is, ownerPassword)
}


#line 225
ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_initWithJavaIoInputStream_withByteArray_(JavaIoInputStream *is, IOSByteArray *ownerPassword) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfReader, initWithJavaIoInputStream_withByteArray_, is, ownerPassword)
}


#line 237
void ComAowagieTextPdfPdfReader_initWithJavaIoInputStream_(ComAowagieTextPdfPdfReader *self, JavaIoInputStream *is) {
  ComAowagieTextPdfPdfReader_initWithJavaIoInputStream_withByteArray_(self, is, nil);
}


#line 237
ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_initWithJavaIoInputStream_(JavaIoInputStream *is) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfReader, initWithJavaIoInputStream_, is)
}


#line 237
ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_initWithJavaIoInputStream_(JavaIoInputStream *is) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfReader, initWithJavaIoInputStream_, is)
}


#line 244
void ComAowagieTextPdfPdfReader_initWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader *self, ComAowagieTextPdfPdfReader *reader) {
  NSObject_init(self);
  self->acroForm_ =
#line 113
  nil;
  self->acroFormParsed_ = false;
  self->encrypted_ = false;
  self->rebuilt_ = false;
  self->tampered_ =
#line 118
  false;
  self->password_ =
#line 123
  nil;
  self->certificateKey_ = nil;
  self->certificate_ = nil;
  self->certificateKeyProvider_ = nil;
  self->strings_ = new_JavaUtilArrayList_init();
  self->sharedStreams_ =
#line 129
  true;
  self->consolidateNamedDestinations_ = false;
  self->lastXrefPartial_ =
#line 137
  -1;
  self->viewerPreferences_ = new_ComAowagieTextPdfInternalPdfViewerPreferencesImp_init();
  self->readDepth_ =
#line 1685
  0;
  
#line 245
  self->appendable_ = ((ComAowagieTextPdfPdfReader *) nil_chk(reader))->appendable_;
  self->consolidateNamedDestinations_ = reader->consolidateNamedDestinations_;
  self->encrypted_ = reader->encrypted_;
  self->rebuilt_ = reader->rebuilt_;
  self->sharedStreams_ = reader->sharedStreams_;
  self->tampered_ = reader->tampered_;
  self->password_ = reader->password_;
  self->pdfVersion_ = reader->pdfVersion_;
  self->eofPos_ = reader->eofPos_;
  self->freeXref_ = reader->freeXref_;
  self->lastXref_ = reader->lastXref_;
  self->tokens_ = new_ComAowagieTextPdfPRTokeniser_initWithComAowagieTextPdfRandomAccessFileOrArray_([((ComAowagieTextPdfPRTokeniser *) nil_chk(reader->tokens_)) getSafeFile]);
  if (reader->decrypt_ != nil) {
    self->decrypt_ = new_ComAowagieTextPdfPdfEncryption_initPackagePrivateWithComAowagieTextPdfPdfEncryption_(reader->decrypt_);
  }
  self->pValue_ = reader->pValue_;
  self->rValue_ = reader->rValue_;
  self->xrefObj_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(reader->xrefObj_);
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(reader->xrefObj_)) size]; ++k) {
    (void) [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) setWithInt:k withId:ComAowagieTextPdfPdfReader_duplicatePdfObjectWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfReader_((ComAowagieTextPdfPdfObject *) cast_chk([reader->xrefObj_ getWithInt:k], [ComAowagieTextPdfPdfObject class]), self)];
  }
  self->pageRefs_ = new_ComAowagieTextPdfPdfReader_PageRefs_initWithComAowagieTextPdfPdfReader_PageRefs_withComAowagieTextPdfPdfReader_(reader->pageRefs_, self);
  self->trailer_ = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_duplicatePdfObjectWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfReader_(reader->trailer_, self), [ComAowagieTextPdfPdfDictionary class]);
  self->catalog_ = [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->trailer_)) getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ROOT)];
  self->rootPages_ = [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->catalog_)) getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PAGES)];
  self->fileLength_ = reader->fileLength_;
  self->partial_ = reader->partial_;
  self->hybridXref_ = reader->hybridXref_;
  self->objStmToOffset_ = reader->objStmToOffset_;
  self->xref_ = reader->xref_;
  self->cryptoRef_ = (ComAowagieTextPdfPRIndirectReference *) cast_chk(ComAowagieTextPdfPdfReader_duplicatePdfObjectWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfReader_(reader->cryptoRef_, self), [ComAowagieTextPdfPRIndirectReference class]);
  self->ownerPasswordUsed_ = reader->ownerPasswordUsed_;
}


#line 244
ComAowagieTextPdfPdfReader *new_ComAowagieTextPdfPdfReader_initWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader *reader) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfReader, initWithComAowagieTextPdfPdfReader_, reader)
}


#line 244
ComAowagieTextPdfPdfReader *create_ComAowagieTextPdfPdfReader_initWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader *reader) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfReader, initWithComAowagieTextPdfPdfReader_, reader)
}


#line 382
ComAowagieTextRectangle *ComAowagieTextPdfPdfReader_getPageSizeWithComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfPdfReader *self, ComAowagieTextPdfPdfDictionary *page) {
  ComAowagieTextPdfPdfArray *mediaBox = [((ComAowagieTextPdfPdfDictionary *) nil_chk(page)) getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, MEDIABOX)];
  return ComAowagieTextPdfPdfReader_getNormalizedRectangleWithComAowagieTextPdfPdfArray_(mediaBox);
}


#line 450
ComAowagieTextRectangle *ComAowagieTextPdfPdfReader_getNormalizedRectangleWithComAowagieTextPdfPdfArray_(ComAowagieTextPdfPdfArray *box) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 451
  jfloat llx = [((ComAowagieTextPdfPdfNumber *) nil_chk(((ComAowagieTextPdfPdfNumber *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfArray *) nil_chk(box)) getPdfObjectWithInt:0]), [ComAowagieTextPdfPdfNumber class])))) floatValue];
  jfloat lly = [((ComAowagieTextPdfPdfNumber *) nil_chk(((ComAowagieTextPdfPdfNumber *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([box getPdfObjectWithInt:1]), [ComAowagieTextPdfPdfNumber class])))) floatValue];
  jfloat urx = [((ComAowagieTextPdfPdfNumber *) nil_chk(((ComAowagieTextPdfPdfNumber *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([box getPdfObjectWithInt:2]), [ComAowagieTextPdfPdfNumber class])))) floatValue];
  jfloat ury = [((ComAowagieTextPdfPdfNumber *) nil_chk(((ComAowagieTextPdfPdfNumber *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([box getPdfObjectWithInt:3]), [ComAowagieTextPdfPdfNumber class])))) floatValue];
  return new_ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(JavaLangMath_minWithFloat_withFloat_(llx, urx), JavaLangMath_minWithFloat_withFloat_(lly, ury), JavaLangMath_maxWithFloat_withFloat_(
#line 456
  llx, urx), JavaLangMath_maxWithFloat_withFloat_(lly, ury));
}


#line 508
void ComAowagieTextPdfPdfReader_readPdfPartial(ComAowagieTextPdfPdfReader *self) {
  @try {
    self->fileLength_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getFile])) length];
    self->pdfVersion_ = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) checkPdfHeader];
    @try {
      ComAowagieTextPdfPdfReader_readXref(self);
    }
    @catch (JavaLangException *e) {
      @try {
        self->rebuilt_ = true;
        [self rebuildXref];
        self->lastXref_ = -1;
      }
      @catch (JavaLangException *ne) {
        @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_(JreStrcat("$$$$", @"Rebuild failed: ", [ne getMessage], @"; Original message: ", [e getMessage]));
      }
    }
    ComAowagieTextPdfPdfReader_readDocObjPartial(self);
    [self readPages];
  }
  @catch (JavaIoIOException *e) {
    @try {
      
#line 529
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) close];
    }
    @catch (
#line 529
    JavaLangException *ee) {
    }
    
#line 530
    @throw e;
  }
}


#line 534
jboolean ComAowagieTextPdfPdfReader_equalsArrayWithByteArray_withByteArray_withInt_(ComAowagieTextPdfPdfReader *self, IOSByteArray *ar1, IOSByteArray *ar2, jint size) {
  for (jint k = 0; k < size; ++k) {
    if (IOSByteArray_Get(nil_chk(ar1), k) != IOSByteArray_Get(nil_chk(ar2), k)) {
      return false;
    }
  }
  return true;
}


#line 546
void ComAowagieTextPdfPdfReader_readDecryptedDocObj(ComAowagieTextPdfPdfReader *self) {
  if (self->encrypted_) {
    return;
  }
  ComAowagieTextPdfPdfObject *encDic = [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->trailer_)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENCRYPT)];
  if (encDic == nil || [((NSString *) nil_chk([encDic description])) isEqual:@"null"]) {
    return;
  }
  self->encryptionError_ = true;
  IOSByteArray *encryptionKey = nil;
  self->encrypted_ = true;
  ComAowagieTextPdfPdfDictionary *enc = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_(encDic), [ComAowagieTextPdfPdfDictionary class]);
  
#line 559
  NSString *s;
  ComAowagieTextPdfPdfObject *o;
  
#line 562
  ComAowagieTextPdfPdfArray *documentIDs = [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->trailer_)) getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ID)];
  IOSByteArray *documentID = nil;
  if (documentIDs != nil) {
    o = [documentIDs getPdfObjectWithInt:0];
    [((JavaUtilArrayList *) nil_chk(self->strings_)) removeWithId:o];
    s = [((ComAowagieTextPdfPdfObject *) nil_chk(o)) description];
    documentID = ComAowagieTextDocWriter_getISOBytesWithNSString_(s);
    if ([documentIDs size] > 1) {
      [self->strings_ removeWithId:[documentIDs getPdfObjectWithInt:1]];
    }
  }
  
#line 574
  if (documentID == nil) {
    documentID = [IOSByteArray newArrayWithLength:0];
  }
  IOSByteArray *uValue = nil;
  IOSByteArray *oValue = nil;
  jint cryptoMode = ComAowagieTextPdfPdfWriter_STANDARD_ENCRYPTION_40;
  jint lengthValue = 0;
  
#line 582
  ComAowagieTextPdfPdfObject *filter = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(enc)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER)]);
  
#line 584
  if ([((ComAowagieTextPdfPdfObject *) nil_chk(filter)) isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, STANDARD)]) {
    s = [((ComAowagieTextPdfPdfObject *) nil_chk([enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, U)])) description];
    [((JavaUtilArrayList *) nil_chk(self->strings_)) removeWithId:[enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, U)]];
    uValue = ComAowagieTextDocWriter_getISOBytesWithNSString_(s);
    s = [((ComAowagieTextPdfPdfObject *) nil_chk([enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, O)])) description];
    [self->strings_ removeWithId:[enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, O)]];
    oValue = ComAowagieTextDocWriter_getISOBytesWithNSString_(s);
    
#line 592
    o = [enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, P)];
    if (![((ComAowagieTextPdfPdfObject *) nil_chk(o)) isNumber]) {
      @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_(@"Illegal P value.");
    }
    self->pValue_ = [((ComAowagieTextPdfPdfNumber *) cast_chk(o, [ComAowagieTextPdfPdfNumber class])) intValue];
    
#line 598
    o = [enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, R)];
    if (![((ComAowagieTextPdfPdfObject *) nil_chk(o)) isNumber]) {
      @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_(@"Illegal R value.");
    }
    self->rValue_ = [((ComAowagieTextPdfPdfNumber *) cast_chk(o, [ComAowagieTextPdfPdfNumber class])) intValue];
    {
      
#line 620
      ComAowagieTextPdfPdfDictionary *dic;
      
#line 635
      ComAowagieTextPdfPdfObject *em;
      
#line 604
      switch (self->rValue_) {
        case 2:
        cryptoMode = ComAowagieTextPdfPdfWriter_STANDARD_ENCRYPTION_40;
        break;
        case 3:
        o = [enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH)];
        if (![((ComAowagieTextPdfPdfObject *) nil_chk(o)) isNumber]) {
          @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_(@"Illegal Length value.");
        }
        lengthValue = [((ComAowagieTextPdfPdfNumber *) cast_chk(o, [ComAowagieTextPdfPdfNumber class])) intValue];
        if (lengthValue > 128 || lengthValue < 40 || JreIntMod(lengthValue, 8) != 0) {
          @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_(@"Illegal Length value.");
        }
        cryptoMode = ComAowagieTextPdfPdfWriter_STANDARD_ENCRYPTION_128;
        break;
        case 4:
        dic = (ComAowagieTextPdfPdfDictionary *) cast_chk([enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CF)], [ComAowagieTextPdfPdfDictionary class]);
        if (dic == nil) {
          @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_(@"/CF not found (encryption)");
        }
        dic = (ComAowagieTextPdfPdfDictionary *) cast_chk([dic getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STDCF)], [ComAowagieTextPdfPdfDictionary class]);
        if (dic == nil) {
          @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_(@"/StdCF not found (encryption)");
        }
        if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, V2))) isEqual:[dic getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CFM)]]) {
          cryptoMode = ComAowagieTextPdfPdfWriter_STANDARD_ENCRYPTION_128;
        }
        else
#line 630
        if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, AESV2))) isEqual:[dic getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CFM)]]) {
          cryptoMode = ComAowagieTextPdfPdfWriter_ENCRYPTION_AES_128;
        }
        else {
          
#line 633
          @throw new_ComAowagieTextExceptionsUnsupportedPdfException_initWithNSString_(@"No compatible encryption found");
        }
        em = [enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENCRYPTMETADATA)];
        if (em != nil && [((NSString *) nil_chk([em description])) isEqual:@"false"]) {
          cryptoMode |= ComAowagieTextPdfPdfWriter_DO_NOT_ENCRYPT_METADATA;
        }
        break;
        case 6:
        cryptoMode = ComAowagieTextPdfPdfWriter_ENCRYPTION_AES_256_V3;
        em = [enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENCRYPTMETADATA)];
        if (em != nil && [((NSString *) nil_chk([em description])) isEqual:@"false"]) {
          cryptoMode |= ComAowagieTextPdfPdfWriter_DO_NOT_ENCRYPT_METADATA;
        }
        break;
        default:
        @throw new_ComAowagieTextExceptionsUnsupportedPdfException_initWithNSString_(JreStrcat("$I", @"Unknown encryption type R = ", self->rValue_));
      }
    }
  }
  else
#line 651
  if ([filter isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, PUBSEC)]) {
    jboolean foundRecipient = false;
    IOSByteArray *envelopedData = nil;
    ComAowagieTextPdfPdfArray *recipients = nil;
    
#line 656
    o = [enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, V)];
    if (![((ComAowagieTextPdfPdfObject *) nil_chk(o)) isNumber]) {
      @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_(@"Illegal V value.");
    }
    jint vValue = [((ComAowagieTextPdfPdfNumber *) cast_chk(o, [ComAowagieTextPdfPdfNumber class])) intValue];
    {
      
#line 680
      ComAowagieTextPdfPdfDictionary *dic;
      
#line 697
      ComAowagieTextPdfPdfObject *em;
      
#line 661
      switch (vValue) {
        case 1:
        cryptoMode = ComAowagieTextPdfPdfWriter_STANDARD_ENCRYPTION_40;
        lengthValue = 40;
        recipients = (ComAowagieTextPdfPdfArray *) cast_chk([enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, RECIPIENTS)], [ComAowagieTextPdfPdfArray class]);
        break;
        case 2:
        o = [enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH)];
        if (![((ComAowagieTextPdfPdfObject *) nil_chk(o)) isNumber]) {
          @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_(@"Illegal Length value.");
        }
        lengthValue = [((ComAowagieTextPdfPdfNumber *) cast_chk(o, [ComAowagieTextPdfPdfNumber class])) intValue];
        if (lengthValue > 128 || lengthValue < 40 || JreIntMod(lengthValue, 8) != 0) {
          @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_(@"Illegal Length value.");
        }
        cryptoMode = ComAowagieTextPdfPdfWriter_STANDARD_ENCRYPTION_128;
        recipients = (ComAowagieTextPdfPdfArray *) cast_chk([enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, RECIPIENTS)], [ComAowagieTextPdfPdfArray class]);
        break;
        case 4:
        dic = (ComAowagieTextPdfPdfDictionary *) cast_chk([enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CF)], [ComAowagieTextPdfPdfDictionary class]);
        if (dic == nil) {
          @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_(@"/CF not found (encryption)");
        }
        dic = (ComAowagieTextPdfPdfDictionary *) cast_chk([dic getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DEFAULTCRYPTFILTER)], [ComAowagieTextPdfPdfDictionary class]);
        if (dic == nil) {
          @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_(@"/DefaultCryptFilter not found (encryption)");
        }
        if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, V2))) isEqual:[dic getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CFM)]]) {
          cryptoMode = ComAowagieTextPdfPdfWriter_STANDARD_ENCRYPTION_128;
        }
        else if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, AESV2))) isEqual:[dic getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CFM)]]) {
          cryptoMode = ComAowagieTextPdfPdfWriter_ENCRYPTION_AES_128;
        }
        else {
          
#line 694
          @throw new_ComAowagieTextExceptionsUnsupportedPdfException_initWithNSString_(@"No compatible encryption found");
        }
        lengthValue = 128;
        em = [dic getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENCRYPTMETADATA)];
        if (em != nil && [((NSString *) nil_chk([em description])) isEqual:@"false"]) {
          cryptoMode |= ComAowagieTextPdfPdfWriter_DO_NOT_ENCRYPT_METADATA;
        }
        
#line 702
        recipients = (ComAowagieTextPdfPdfArray *) cast_chk([dic getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, RECIPIENTS)], [ComAowagieTextPdfPdfArray class]);
        break;
        default:
        @throw new_ComAowagieTextExceptionsUnsupportedPdfException_initWithNSString_(JreStrcat("$I", @"Unknown encryption type V = ", self->rValue_));
      }
    }
    
#line 707
    for (jint i = 0; i < [((ComAowagieTextPdfPdfArray *) nil_chk(recipients)) size]; i++) {
      ComAowagieTextPdfPdfObject *recipient = [recipients getPdfObjectWithInt:i];
      [((JavaUtilArrayList *) nil_chk(self->strings_)) removeWithId:recipient];
      
#line 711
      OrgSpongycastleCmsCMSEnvelopedData *data = nil;
      @try {
        data = new_OrgSpongycastleCmsCMSEnvelopedData_initWithByteArray_([((ComAowagieTextPdfPdfObject *) nil_chk(recipient)) getBytes]);
        
#line 715
        id<JavaUtilIterator> recipientCertificatesIt = [((id<JavaUtilCollection>) nil_chk([((OrgSpongycastleCmsRecipientInformationStore *) nil_chk([data getRecipientInfos])) getRecipients])) iterator];
        
#line 717
        while ([((id<JavaUtilIterator>) nil_chk(recipientCertificatesIt)) hasNext]) {
          OrgSpongycastleCmsRecipientInformation *recipientInfo = (OrgSpongycastleCmsRecipientInformation *) cast_chk([recipientCertificatesIt next], [OrgSpongycastleCmsRecipientInformation class]);
          
#line 720
          if ([((OrgSpongycastleCmsRecipientId *) nil_chk([((OrgSpongycastleCmsRecipientInformation *) nil_chk(recipientInfo)) getRID])) matchWithId:self->certificate_] && !foundRecipient) {
            envelopedData = [recipientInfo getContentWithOrgSpongycastleCmsRecipient:new_OrgSpongycastleCmsJcajceJceKeyTransEnvelopedRecipient_initWithJavaSecurityPrivateKey_(
#line 722
            (id<JavaSecurityPrivateKey>) cast_check(self->certificateKey_, JavaSecurityPrivateKey_class_()))];
            
#line 724
            foundRecipient = true;
          }
        }
      }
      @catch (JavaLangException *f) {
        @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(f);
      }
    }
    
#line 733
    if (!foundRecipient || envelopedData == nil) {
      @throw new_ComAowagieTextExceptionsUnsupportedPdfException_initWithNSString_(@"Bad certificate and key.");
    }
    
#line 737
    JavaSecurityMessageDigest *md = nil;
    
#line 739
    @try {
      md = JavaSecurityMessageDigest_getInstanceWithNSString_(@"SHA-1");
      [((JavaSecurityMessageDigest *) nil_chk(md)) updateWithByteArray:envelopedData withInt:0 withInt:20];
      for (jint i = 0; i < [recipients size]; i++) {
        IOSByteArray *encodedRecipient = [((ComAowagieTextPdfPdfObject *) nil_chk([recipients getPdfObjectWithInt:i])) getBytes];
        [md updateWithByteArray:encodedRecipient];
      }
      if ((cryptoMode & ComAowagieTextPdfPdfWriter_DO_NOT_ENCRYPT_METADATA) != 0) {
        [md updateWithByteArray:[IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) 255, (jbyte) 255, (jbyte) 255, (jbyte) 255 } count:4]];
      }
      encryptionKey = [md digest];
    }
    @catch (JavaLangException *f) {
      @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(f);
    }
  }
  
#line 757
  self->decrypt_ = new_ComAowagieTextPdfPdfEncryption_initPackagePrivate();
  [self->decrypt_ setCryptoModeWithInt:cryptoMode withInt:lengthValue];
  
#line 760
  if ([filter isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, STANDARD)]) {
    if (self->rValue_ < 6) {
      
#line 763
      [((ComAowagieTextPdfPdfEncryption *) nil_chk(self->decrypt_)) setupByOwnerPasswordWithByteArray:documentID withByteArray:self->password_ withByteArray:uValue withByteArray:oValue withInt:self->pValue_];
      if (!ComAowagieTextPdfPdfReader_equalsArrayWithByteArray_withByteArray_withInt_(self, uValue, ((ComAowagieTextPdfPdfEncryption *) nil_chk(self->decrypt_))->userKey_, (self->rValue_ == 3 || self->rValue_ == 4) ? 16 : 32)) {
        
#line 766
        [((ComAowagieTextPdfPdfEncryption *) nil_chk(self->decrypt_)) setupByUserPasswordWithByteArray:documentID withByteArray:self->password_ withByteArray:oValue withInt:self->pValue_];
        if (!ComAowagieTextPdfPdfReader_equalsArrayWithByteArray_withByteArray_withInt_(self, uValue, ((ComAowagieTextPdfPdfEncryption *) nil_chk(self->decrypt_))->userKey_, (self->rValue_ == 3 || self->rValue_ == 4) ? 16 : 32)) {
          @throw new_ComAowagieTextExceptionsBadPasswordException_initWithNSString_(@"bad.user.password");
        }
      }
      else {
        
#line 771
        self->ownerPasswordUsed_ = true;
      }
    }
    else {
      
#line 779
      s = [((ComAowagieTextPdfPdfObject *) nil_chk([enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, UE)])) description];
      [((JavaUtilArrayList *) nil_chk(self->strings_)) removeWithId:[enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, UE)]];
      IOSByteArray *ueValue = ComAowagieTextDocWriter_getISOBytesWithNSString_(s);
      s = [((ComAowagieTextPdfPdfObject *) nil_chk([enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, OE)])) description];
      [self->strings_ removeWithId:[enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, OE)]];
      IOSByteArray *oeValue = ComAowagieTextDocWriter_getISOBytesWithNSString_(s);
      s = [((ComAowagieTextPdfPdfObject *) nil_chk([enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PERMS)])) description];
      [self->strings_ removeWithId:[enc getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PERMS)]];
      IOSByteArray *permsValue = ComAowagieTextDocWriter_getISOBytesWithNSString_(s);
      
#line 790
      IOSByteArray *password = self->password_;
      if (password == nil) {
        password = [IOSByteArray newArrayWithLength:0];
      }
      else
#line 793
      if (password->size_ > 127) {
        password = JavaUtilArrays_copyOfWithByteArray_withInt_(password, 127);
      }
      
#line 801
      if (uValue != nil && uValue->size_ > 48) {
        uValue = JavaUtilArrays_copyOfWithByteArray_withInt_(uValue, 48);
      }
      
#line 805
      @try {
        
#line 807
        IOSByteArray *hashAlg2B = ComAowagieTextPdfPdfEncryption_hashAlg2BWithByteArray_withByteArray_withByteArray_(password, JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(oValue, 32, 40), uValue);
        if (ComAowagieTextPdfPdfReader_equalsArrayWithByteArray_withByteArray_withInt_(self, hashAlg2B, oValue, 32)) {
          
#line 810
          [((ComAowagieTextPdfPdfEncryption *) nil_chk(self->decrypt_)) setupByOwnerPasswordWithByteArray:documentID withByteArray:password withByteArray:uValue withByteArray:ueValue withByteArray:oValue withByteArray:oeValue withInt:
#line 811
          self->pValue_];
          
#line 813
          if ([((ComAowagieTextPdfPdfEncryption *) nil_chk(self->decrypt_)) decryptAndCheckPermsWithByteArray:permsValue]) {
            self->ownerPasswordUsed_ = true;
          }
        }
        
#line 818
        if (!self->ownerPasswordUsed_) {
          
#line 820
          hashAlg2B = ComAowagieTextPdfPdfEncryption_hashAlg2BWithByteArray_withByteArray_withByteArray_(password, JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(uValue, 32, 40), nil);
          if (!ComAowagieTextPdfPdfReader_equalsArrayWithByteArray_withByteArray_withInt_(self, hashAlg2B, uValue, 32)) {
            @throw new_ComAowagieTextExceptionsBadPasswordException_initWithNSString_(@"bad.user.password");
          }
          
#line 825
          [((ComAowagieTextPdfPdfEncryption *) nil_chk(self->decrypt_)) setupByUserPasswordWithByteArray:documentID withByteArray:password withByteArray:uValue withByteArray:ueValue withByteArray:oValue withByteArray:oeValue withInt:
#line 826
          self->pValue_];
          
#line 828
          if (![((ComAowagieTextPdfPdfEncryption *) nil_chk(self->decrypt_)) decryptAndCheckPermsWithByteArray:permsValue]) {
            @throw new_ComAowagieTextExceptionsBadPasswordException_initWithNSString_(@"bad.user.password");
          }
        }
        self->pValue_ = ((ComAowagieTextPdfPdfEncryption *) nil_chk(self->decrypt_))->permissions_;
      }
      @catch (
#line 833
      JavaIoIOException *e) {
        @throw e;
      }
      @catch (
#line 835
      JavaLangException *e) {
        @throw new_JavaIoIOException_initWithJavaLangThrowable_(e);
      }
    }
  }
  else if ([filter isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, PUBSEC)]) {
    [((ComAowagieTextPdfPdfEncryption *) nil_chk(self->decrypt_)) setupByEncryptionKeyWithByteArray:encryptionKey withInt:lengthValue];
    self->ownerPasswordUsed_ = true;
  }
  
#line 845
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(self->strings_)) size]; ++k) {
    ComAowagieTextPdfPdfString *str = (ComAowagieTextPdfPdfString *) cast_chk([self->strings_ getWithInt:k], [ComAowagieTextPdfPdfString class]);
    [((ComAowagieTextPdfPdfString *) nil_chk(str)) decryptWithComAowagieTextPdfPdfReader:self];
  }
  
#line 850
  if ([encDic isIndirect]) {
    self->cryptoRef_ = (ComAowagieTextPdfPRIndirectReference *) cast_chk(encDic, [ComAowagieTextPdfPRIndirectReference class]);
    (void) [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) setWithInt:[self->cryptoRef_ getNumber] withId:nil];
  }
  self->encryptionError_ = false;
}


#line 861
ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfObject *obj) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 862
  ComAowagieTextPdfPdfObject *obj2 = ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_(obj);
  ComAowagieTextPdfPdfReader_releaseLastXrefPartialWithComAowagieTextPdfPdfObject_(obj);
  return obj2;
}


#line 874
ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfObject *obj) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 875
  if (obj == nil) {
    return nil;
  }
  if (![obj isIndirect]) {
    return obj;
  }
  @try {
    ComAowagieTextPdfPRIndirectReference *ref = (ComAowagieTextPdfPRIndirectReference *) cast_chk(obj, [ComAowagieTextPdfPRIndirectReference class]);
    jint idx = [ref getNumber];
    jboolean appendable = ((ComAowagieTextPdfPdfReader *) nil_chk([ref getReader]))->appendable_;
    obj = [((ComAowagieTextPdfPdfReader *) nil_chk([ref getReader])) getPdfObjectWithInt:idx];
    if (obj == nil) {
      return nil;
    }
    else {
      if (appendable) {
        switch ([obj type]) {
          case ComAowagieTextPdfPdfObject_NULL:
          obj = new_ComAowagieTextPdfPdfNull_initPackagePrivate();
          break;
          case ComAowagieTextPdfPdfObject_BOOLEAN:
          obj = new_ComAowagieTextPdfPdfBoolean_initWithBoolean_([((ComAowagieTextPdfPdfBoolean *) cast_chk(obj, [ComAowagieTextPdfPdfBoolean class])) booleanValue]);
          break;
          case ComAowagieTextPdfPdfObject_NAME:
          obj = new_ComAowagieTextPdfPdfName_initWithByteArray_([obj getBytes]);
          break;
        }
        [obj setIndRefWithComAowagieTextPdfPRIndirectReference:ref];
      }
      return obj;
    }
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 920
ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfObject *obj, ComAowagieTextPdfPdfObject *parent) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 921
  ComAowagieTextPdfPdfObject *obj2 = ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfObject_(obj, parent);
  ComAowagieTextPdfPdfReader_releaseLastXrefPartialWithComAowagieTextPdfPdfObject_(obj);
  return obj2;
}


#line 931
ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfObject *obj, ComAowagieTextPdfPdfObject *parent) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 932
  if (obj == nil) {
    return nil;
  }
  if (![obj isIndirect]) {
    ComAowagieTextPdfPRIndirectReference *ref = nil;
    if (parent != nil && (ref = [parent getIndRef]) != nil && [((ComAowagieTextPdfPdfReader *) nil_chk([((ComAowagieTextPdfPRIndirectReference *) nil_chk(ref)) getReader])) isAppendable]) {
      switch ([obj type]) {
        case ComAowagieTextPdfPdfObject_NULL:
        obj = new_ComAowagieTextPdfPdfNull_initPackagePrivate();
        break;
        case ComAowagieTextPdfPdfObject_BOOLEAN:
        obj = new_ComAowagieTextPdfPdfBoolean_initWithBoolean_([((ComAowagieTextPdfPdfBoolean *) cast_chk(obj, [ComAowagieTextPdfPdfBoolean class])) booleanValue]);
        break;
        case ComAowagieTextPdfPdfObject_NAME:
        obj = new_ComAowagieTextPdfPdfName_initWithByteArray_([obj getBytes]);
        break;
      }
      [obj setIndRefWithComAowagieTextPdfPRIndirectReference:ref];
    }
    return obj;
  }
  return ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_(obj);
}


#line 996
void ComAowagieTextPdfPdfReader_releaseLastXrefPartial(ComAowagieTextPdfPdfReader *self) {
  if (self->partial_ && self->lastXrefPartial_ != -1) {
    (void) [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) setWithInt:self->lastXrefPartial_ withId:nil];
    self->lastXrefPartial_ = -1;
  }
}


#line 1006
void ComAowagieTextPdfPdfReader_releaseLastXrefPartialWithComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfObject *obj) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 1007
  if (obj == nil) {
    return;
  }
  if (![obj isIndirect]) {
    return;
  }
  if (!([obj isKindOfClass:[ComAowagieTextPdfPRIndirectReference class]])) {
    return;
  }
  
#line 1017
  ComAowagieTextPdfPRIndirectReference *ref = (ComAowagieTextPdfPRIndirectReference *) cast_chk(obj, [ComAowagieTextPdfPRIndirectReference class]);
  ComAowagieTextPdfPdfReader *reader = [ref getReader];
  if (((ComAowagieTextPdfPdfReader *) nil_chk(reader))->partial_ && reader->lastXrefPartial_ != -1 && reader->lastXrefPartial_ == [ref getNumber]) {
    (void) [((JavaUtilArrayList *) nil_chk(reader->xrefObj_)) setWithInt:reader->lastXrefPartial_ withId:nil];
  }
  reader->lastXrefPartial_ = -1;
}


#line 1025
void ComAowagieTextPdfPdfReader_setXrefPartialObjectWithInt_withComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfReader *self, jint idx, ComAowagieTextPdfPdfObject *obj) {
  if (!self->partial_ || idx < 0) {
    return;
  }
  (void) [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) setWithInt:idx withId:obj];
}


#line 1047
void ComAowagieTextPdfPdfReader_readDocObjPartial(ComAowagieTextPdfPdfReader *self) {
  self->xrefObj_ = new_JavaUtilArrayList_initWithInt_(JreIntDiv(((IOSIntArray *) nil_chk(self->xref_))->size_, 2));
  [self->xrefObj_ addAllWithJavaUtilCollection:JavaUtilCollections_nCopiesWithInt_withId_(JreIntDiv(((IOSIntArray *) nil_chk(self->xref_))->size_, 2), nil)];
  ComAowagieTextPdfPdfReader_readDecryptedDocObj(self);
  if (self->objStmToOffset_ != nil) {
    IOSIntArray *keys = [self->objStmToOffset_ getKeys];
    {
      IOSIntArray *a__ =
#line 1053
      keys;
      jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
      jint const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jint key = *b__++;
        
#line 1054
        jint n = key;
        [((ComAowagieTextPdfIntHashtable *) nil_chk(self->objStmToOffset_)) putWithInt:n withInt:IOSIntArray_Get(nil_chk(self->xref_), n * 2)];
        *IOSIntArray_GetRef(nil_chk(self->xref_), n * 2) = -1;
      }
    }
  }
}


#line 1061
ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfReader_readSingleObjectWithInt_(ComAowagieTextPdfPdfReader *self, jint k) {
  [((JavaUtilArrayList *) nil_chk(self->strings_)) clear];
  jint k2 = k * 2;
  jint pos = IOSIntArray_Get(nil_chk(self->xref_), k2);
  if (pos < 0) {
    return nil;
  }
  if (IOSIntArray_Get(self->xref_, k2 + 1) > 0) {
    pos = [((ComAowagieTextPdfIntHashtable *) nil_chk(self->objStmToOffset_)) getWithInt:IOSIntArray_Get(self->xref_, k2 + 1)];
  }
  if (pos == 0) {
    return nil;
  }
  [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) seekWithInt:pos];
  [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextValidToken];
  if ([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getTokenType] != ComAowagieTextPdfPRTokeniser_TK_NUMBER) {
    [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) throwErrorWithNSString:@"Invalid object number."];
  }
  self->objNum_ = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) intValue];
  [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextValidToken];
  if ([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getTokenType] != ComAowagieTextPdfPRTokeniser_TK_NUMBER) {
    [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) throwErrorWithNSString:@"Invalid generation number."];
  }
  self->objGen_ = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) intValue];
  [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextValidToken];
  if (![((NSString *) nil_chk([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getStringValue])) isEqual:@"obj"]) {
    [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) throwErrorWithNSString:@"Token 'obj' expected."];
  }
  ComAowagieTextPdfPdfObject *obj;
  @try {
    obj = ComAowagieTextPdfPdfReader_readPRObject(self);
    for (jint j = 0; j < [self->strings_ size]; ++j) {
      ComAowagieTextPdfPdfString *str = (ComAowagieTextPdfPdfString *) cast_chk([self->strings_ getWithInt:j], [ComAowagieTextPdfPdfString class]);
      [((ComAowagieTextPdfPdfString *) nil_chk(str)) decryptWithComAowagieTextPdfPdfReader:self];
    }
    if ([((ComAowagieTextPdfPdfObject *) nil_chk(obj)) isStream]) {
      ComAowagieTextPdfPdfReader_checkPRStreamLengthWithComAowagieTextPdfPRStream_(self, (ComAowagieTextPdfPRStream *) cast_chk(obj, [ComAowagieTextPdfPRStream class]));
    }
  }
  @catch (JavaLangException *e) {
    obj = nil;
  }
  if (IOSIntArray_Get(nil_chk(self->xref_), k2 + 1) > 0) {
    obj = ComAowagieTextPdfPdfReader_readOneObjStmWithComAowagieTextPdfPRStream_withInt_(self, (ComAowagieTextPdfPRStream *) cast_chk(obj, [ComAowagieTextPdfPRStream class]), IOSIntArray_Get(self->xref_, k2));
  }
  (void) [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) setWithInt:k withId:obj];
  return obj;
}

ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfReader_readOneObjStmWithComAowagieTextPdfPRStream_withInt_(ComAowagieTextPdfPdfReader *self, ComAowagieTextPdfPRStream *stream, jint idx) {
  jint first = [((ComAowagieTextPdfPdfNumber *) nil_chk([((ComAowagieTextPdfPRStream *) nil_chk(stream)) getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FIRST)])) intValue];
  IOSByteArray *b = ComAowagieTextPdfPdfReader_getStreamBytesWithComAowagieTextPdfPRStream_withComAowagieTextPdfRandomAccessFileOrArray_(stream, [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getFile]);
  ComAowagieTextPdfPRTokeniser *saveTokens = self->tokens_;
  self->tokens_ = new_ComAowagieTextPdfPRTokeniser_initWithByteArray_(b);
  @try {
    jint address = 0;
    jboolean ok = true;
    ++idx;
    for (jint k = 0; k < idx; ++k) {
      ok = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextToken];
      if (!ok) {
        break;
      }
      if ([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getTokenType] != ComAowagieTextPdfPRTokeniser_TK_NUMBER) {
        ok = false;
        break;
      }
      ok = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextToken];
      if (!ok) {
        break;
      }
      if ([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getTokenType] != ComAowagieTextPdfPRTokeniser_TK_NUMBER) {
        ok = false;
        break;
      }
      address = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) intValue] + first;
    }
    if (!ok) {
      @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_(@"Error reading ObjStm");
    }
    [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) seekWithInt:address];
    return ComAowagieTextPdfPdfReader_readPRObject(self);
  }
  @finally {
    self->tokens_ = saveTokens;
  }
}


#line 1204
void ComAowagieTextPdfPdfReader_checkPRStreamLengthWithComAowagieTextPdfPRStream_(ComAowagieTextPdfPdfReader *self, ComAowagieTextPdfPRStream *stream) {
  jint fileLength = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) length];
  jint start = [((ComAowagieTextPdfPRStream *) nil_chk(stream)) getOffset];
  jboolean calc = false;
  jint streamLength = 0;
  ComAowagieTextPdfPdfObject *obj = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([stream getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH)]);
  if (obj != nil && [obj type] == ComAowagieTextPdfPdfObject_NUMBER) {
    streamLength = [((ComAowagieTextPdfPdfNumber *) cast_chk(obj, [ComAowagieTextPdfPdfNumber class])) intValue];
    if (streamLength + start > fileLength - 20) {
      calc = true;
    }
    else {
      
#line 1215
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) seekWithInt:start + streamLength];
      NSString *line = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) readStringWithInt:20];
      if (![((NSString *) nil_chk(line)) java_hasPrefix:@"\nendstream"] &&
#line 1218
      ![line java_hasPrefix:@"\x0d\nendstream"] &&
#line 1219
      ![line java_hasPrefix:@"\x0d""endstream"] &&
#line 1220
      ![line java_hasPrefix:@"endstream"]) {
        calc = true;
      }
    }
  }
  else {
    
#line 1225
    calc = true;
  }
  if (calc) {
    IOSByteArray *tline = [IOSByteArray newArrayWithLength:16];
    [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) seekWithInt:start];
    while (true) {
      jint pos = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getFilePointer];
      if (![((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) readLineSegmentWithByteArray:tline]) {
        break;
      }
      if (ComAowagieTextPdfPdfReader_equalsnWithByteArray_withByteArray_(tline, ComAowagieTextPdfPdfReader_endstream)) {
        streamLength = pos - start;
        break;
      }
      if (ComAowagieTextPdfPdfReader_equalsnWithByteArray_withByteArray_(tline, ComAowagieTextPdfPdfReader_endobj)) {
        [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) seekWithInt:pos - 16];
        NSString *s = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) readStringWithInt:16];
        jint index = [((NSString *) nil_chk(s)) java_indexOfString:@"endstream"];
        if (index >= 0) {
          pos = pos - 16 + index;
        }
        streamLength = pos - start;
        break;
      }
    }
  }
  [stream setLengthWithInt:streamLength];
}


#line 1254
void ComAowagieTextPdfPdfReader_readObjStmWithComAowagieTextPdfPRStream_withComAowagieTextPdfIntHashtable_(ComAowagieTextPdfPdfReader *self, ComAowagieTextPdfPRStream *stream, ComAowagieTextPdfIntHashtable *map) {
  jint first = [((ComAowagieTextPdfPdfNumber *) nil_chk([((ComAowagieTextPdfPRStream *) nil_chk(stream)) getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FIRST)])) intValue];
  jint n = [((ComAowagieTextPdfPdfNumber *) nil_chk([stream getAsNumberWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, N)])) intValue];
  IOSByteArray *b = ComAowagieTextPdfPdfReader_getStreamBytesWithComAowagieTextPdfPRStream_withComAowagieTextPdfRandomAccessFileOrArray_(stream, [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getFile]);
  ComAowagieTextPdfPRTokeniser *saveTokens = self->tokens_;
  self->tokens_ = new_ComAowagieTextPdfPRTokeniser_initWithByteArray_(b);
  @try {
    IOSIntArray *address = [IOSIntArray newArrayWithLength:n];
    IOSIntArray *objNumber = [IOSIntArray newArrayWithLength:n];
    jboolean ok = true;
    for (jint k = 0; k < n; ++k) {
      ok = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextToken];
      if (!ok) {
        break;
      }
      if ([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getTokenType] != ComAowagieTextPdfPRTokeniser_TK_NUMBER) {
        ok = false;
        break;
      }
      *IOSIntArray_GetRef(objNumber, k) = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) intValue];
      ok = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextToken];
      if (!ok) {
        break;
      }
      if ([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getTokenType] != ComAowagieTextPdfPRTokeniser_TK_NUMBER) {
        ok = false;
        break;
      }
      *IOSIntArray_GetRef(address, k) = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) intValue] + first;
    }
    if (!ok) {
      @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_(@"Error reading ObjStm");
    }
    for (jint k = 0; k < n; ++k) {
      if ([((ComAowagieTextPdfIntHashtable *) nil_chk(map)) containsKeyWithInt:k]) {
        [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) seekWithInt:IOSIntArray_Get(address, k)];
        ComAowagieTextPdfPdfObject *obj = ComAowagieTextPdfPdfReader_readPRObject(self);
        (void) [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) setWithInt:IOSIntArray_Get(objNumber, k) withId:obj];
      }
    }
  }
  @finally {
    self->tokens_ = saveTokens;
  }
}


#line 1306
ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfReader_killIndirectWithComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfObject *obj) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 1307
  if (obj == nil || [obj isNull]) {
    return nil;
  }
  ComAowagieTextPdfPdfObject *ret = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_(obj);
  if ([obj isIndirect]) {
    ComAowagieTextPdfPRIndirectReference *ref = (ComAowagieTextPdfPRIndirectReference *) cast_chk(obj, [ComAowagieTextPdfPRIndirectReference class]);
    ComAowagieTextPdfPdfReader *reader = [ref getReader];
    jint n = [ref getNumber];
    (void) [((JavaUtilArrayList *) nil_chk(((ComAowagieTextPdfPdfReader *) nil_chk(reader))->xrefObj_)) setWithInt:n withId:nil];
    if (reader->partial_) {
      *IOSIntArray_GetRef(nil_chk(reader->xref_), n * 2) = -1;
    }
  }
  return ret;
}


#line 1323
void ComAowagieTextPdfPdfReader_ensureXrefSizeWithInt_(ComAowagieTextPdfPdfReader *self, jint size) {
  if (size == 0) {
    return;
  }
  if (self->xref_ == nil) {
    self->xref_ = [IOSIntArray newArrayWithLength:size];
  }
  else
#line 1329
  if (self->xref_->size_ < size) {
    IOSIntArray *xref2 = [IOSIntArray newArrayWithLength:size];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->xref_, 0, xref2, 0, self->xref_->size_);
    self->xref_ = xref2;
  }
}


#line 1336
void ComAowagieTextPdfPdfReader_readXref(ComAowagieTextPdfPdfReader *self) {
  self->hybridXref_ = false;
  self->newXrefType_ = false;
  [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) seekWithInt:[self->tokens_ getStartxref]];
  [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextToken];
  if (![((NSString *) nil_chk([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getStringValue])) isEqual:@"startxref"]) {
    @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_(@"startxref not found.");
  }
  [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextToken];
  if ([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getTokenType] != ComAowagieTextPdfPRTokeniser_TK_NUMBER) {
    @throw new_ComAowagieTextExceptionsITextInvalidPdfException_initWithNSString_(@"startxref is not followed by a number.");
  }
  jint startxref = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) intValue];
  self->lastXref_ = startxref;
  self->eofPos_ = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getFilePointer];
  @try {
    if (ComAowagieTextPdfPdfReader_readXRefStreamWithInt_(self, startxref)) {
      self->newXrefType_ = true;
      return;
    }
  }
  @catch (JavaLangException *e) {
  }
  
#line 1358
  self->xref_ = nil;
  [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) seekWithInt:startxref];
  self->trailer_ = ComAowagieTextPdfPdfReader_readXrefSection(self);
  ComAowagieTextPdfPdfDictionary *trailer2 = self->trailer_;
  while (true) {
    ComAowagieTextPdfPdfNumber *prev = (ComAowagieTextPdfPdfNumber *) cast_chk([((ComAowagieTextPdfPdfDictionary *) nil_chk(trailer2)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PREV)], [ComAowagieTextPdfPdfNumber class]);
    if (prev == nil) {
      break;
    }
    [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) seekWithInt:[prev intValue]];
    trailer2 = ComAowagieTextPdfPdfReader_readXrefSection(self);
  }
}


#line 1372
ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfPdfReader_readXrefSection(ComAowagieTextPdfPdfReader *self) {
  [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextValidToken];
  if (![((NSString *) nil_chk([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getStringValue])) isEqual:@"xref"]) {
    [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) throwErrorWithNSString:@"xref subsection not found"];
  }
  jint start = 0;
  jint end = 0;
  jint pos = 0;
  jint gen = 0;
  while (true) {
    [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextValidToken];
    if ([((NSString *) nil_chk([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getStringValue])) isEqual:@"trailer"]) {
      break;
    }
    if ([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getTokenType] != ComAowagieTextPdfPRTokeniser_TK_NUMBER) {
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) throwErrorWithNSString:@"Object number of the first object in this xref subsection not found"];
    }
    start = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) intValue];
    [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextValidToken];
    if ([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getTokenType] != ComAowagieTextPdfPRTokeniser_TK_NUMBER) {
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) throwErrorWithNSString:@"Number of entries in this xref subsection not found"];
    }
    end = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) intValue] + start;
    if (start == 1) {
      jint back = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getFilePointer];
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextValidToken];
      pos = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) intValue];
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextValidToken];
      gen = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) intValue];
      if (pos == 0 && gen == ComAowagieTextPdfPdfWriter_GENERATION_MAX) {
        --start;
        --end;
      }
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) seekWithInt:back];
    }
    ComAowagieTextPdfPdfReader_ensureXrefSizeWithInt_(self, end * 2);
    for (jint k = start; k < end; ++k) {
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextValidToken];
      pos = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) intValue];
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextValidToken];
      gen = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) intValue];
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextValidToken];
      jint p = k * 2;
      if ([((NSString *) nil_chk([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getStringValue])) isEqual:@"n"]) {
        if (IOSIntArray_Get(nil_chk(self->xref_), p) == 0 && IOSIntArray_Get(self->xref_, p + 1) == 0) {
          
#line 1419
          *IOSIntArray_GetRef(self->xref_, p) = pos;
        }
      }
      else if ([((NSString *) nil_chk([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getStringValue])) isEqual:@"f"]) {
        if (IOSIntArray_Get(nil_chk(self->xref_), p) == 0 && IOSIntArray_Get(self->xref_, p + 1) == 0) {
          *IOSIntArray_GetRef(self->xref_, p) = -1;
        }
      }
      else {
        
#line 1427
        [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) throwErrorWithNSString:@"Invalid cross-reference entry in this xref subsection"];
      }
    }
  }
  ComAowagieTextPdfPdfDictionary *trailer = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_readPRObject(self), [ComAowagieTextPdfPdfDictionary class]);
  ComAowagieTextPdfPdfNumber *xrefSize = (ComAowagieTextPdfPdfNumber *) cast_chk([((ComAowagieTextPdfPdfDictionary *) nil_chk(trailer)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SIZE)], [ComAowagieTextPdfPdfNumber class]);
  ComAowagieTextPdfPdfReader_ensureXrefSizeWithInt_(self, [((ComAowagieTextPdfPdfNumber *) nil_chk(xrefSize)) intValue] * 2);
  ComAowagieTextPdfPdfObject *xrs = [trailer getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, XREFSTM)];
  if (xrs != nil && [xrs isNumber]) {
    jint loc = [((ComAowagieTextPdfPdfNumber *) cast_chk(xrs, [ComAowagieTextPdfPdfNumber class])) intValue];
    @try {
      ComAowagieTextPdfPdfReader_readXRefStreamWithInt_(self, loc);
      self->newXrefType_ = true;
      self->hybridXref_ = true;
    }
    @catch (JavaIoIOException *e) {
      self->xref_ = nil;
      @throw e;
    }
  }
  return trailer;
}


#line 1450
jboolean ComAowagieTextPdfPdfReader_readXRefStreamWithInt_(ComAowagieTextPdfPdfReader *self, jint ptr) {
  [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) seekWithInt:ptr];
  jint thisStream = 0;
  if (![((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextToken]) {
    return false;
  }
  if ([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getTokenType] != ComAowagieTextPdfPRTokeniser_TK_NUMBER) {
    return false;
  }
  thisStream = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) intValue];
  if (![((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextToken] || [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getTokenType] != ComAowagieTextPdfPRTokeniser_TK_NUMBER) {
    return false;
  }
  if (![((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextToken] || ![((NSString *) nil_chk([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getStringValue])) isEqual:@"obj"]) {
    return false;
  }
  ComAowagieTextPdfPdfObject *object = ComAowagieTextPdfPdfReader_readPRObject(self);
  ComAowagieTextPdfPRStream *stm = nil;
  if ([((ComAowagieTextPdfPdfObject *) nil_chk(object)) isStream]) {
    stm = (ComAowagieTextPdfPRStream *) cast_chk(object, [ComAowagieTextPdfPRStream class]);
    if (![((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, XREF))) isEqual:[stm getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TYPE)]]) {
      return false;
    }
  }
  else {
    
#line 1474
    return false;
  }
  if (self->trailer_ == nil) {
    self->trailer_ = new_ComAowagieTextPdfPdfDictionary_init();
    [self->trailer_ putAllWithComAowagieTextPdfPdfDictionary:stm];
  }
  [stm setLengthWithInt:[((ComAowagieTextPdfPdfNumber *) nil_chk(((ComAowagieTextPdfPdfNumber *) cast_chk([stm getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH)], [ComAowagieTextPdfPdfNumber class])))) intValue]];
  jint size = [((ComAowagieTextPdfPdfNumber *) nil_chk(((ComAowagieTextPdfPdfNumber *) cast_chk([stm getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SIZE)], [ComAowagieTextPdfPdfNumber class])))) intValue];
  ComAowagieTextPdfPdfArray *index;
  ComAowagieTextPdfPdfObject *obj = [stm getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, INDEX)];
  if (obj == nil) {
    index = new_ComAowagieTextPdfPdfArray_init();
    [index addWithIntArray:[IOSIntArray newArrayWithInts:(jint[]){ 0, size } count:2]];
  }
  else {
    
#line 1488
    index = (ComAowagieTextPdfPdfArray *) cast_chk(obj, [ComAowagieTextPdfPdfArray class]);
  }
  ComAowagieTextPdfPdfArray *w = (ComAowagieTextPdfPdfArray *) cast_chk([stm getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, W)], [ComAowagieTextPdfPdfArray class]);
  jint prev = -1;
  obj = [stm getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PREV)];
  if (obj != nil) {
    prev = [((ComAowagieTextPdfPdfNumber *) cast_chk(obj, [ComAowagieTextPdfPdfNumber class])) intValue];
  }
  
#line 1500
  ComAowagieTextPdfPdfReader_ensureXrefSizeWithInt_(self, size * 2);
  if (self->objStmMark_ == nil && !self->partial_) {
    self->objStmMark_ = new_JavaUtilLinkedHashMap_init();
  }
  if (self->objStmToOffset_ == nil && self->partial_) {
    self->objStmToOffset_ = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
  }
  IOSByteArray *b = ComAowagieTextPdfPdfReader_getStreamBytesWithComAowagieTextPdfPRStream_withComAowagieTextPdfRandomAccessFileOrArray_(stm, [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getFile]);
  jint bptr = 0;
  IOSIntArray *wc = [IOSIntArray newArrayWithLength:3];
  for (jint k = 0; k < 3; ++k) {
    *IOSIntArray_GetRef(wc, k) = [((ComAowagieTextPdfPdfNumber *) nil_chk([((ComAowagieTextPdfPdfArray *) nil_chk(w)) getAsNumberWithInt:k])) intValue];
  }
  for (jint idx = 0; idx < [index size]; idx += 2) {
    jint start = [((ComAowagieTextPdfPdfNumber *) nil_chk([index getAsNumberWithInt:idx])) intValue];
    jint length = [((ComAowagieTextPdfPdfNumber *) nil_chk([index getAsNumberWithInt:idx + 1])) intValue];
    ComAowagieTextPdfPdfReader_ensureXrefSizeWithInt_(self, (start + length) * 2);
    while (length-- > 0) {
      jint type = 1;
      if (IOSIntArray_Get(wc, 0) > 0) {
        type = 0;
        for (jint k = 0; k < IOSIntArray_Get(wc, 0); ++k) {
          type = (JreLShift32(type, 8)) + (IOSByteArray_Get(nil_chk(b), bptr++) & (jint) 0xff);
        }
      }
      jint field2 = 0;
      for (jint k = 0; k < IOSIntArray_Get(wc, 1); ++k) {
        field2 = (JreLShift32(field2, 8)) + (IOSByteArray_Get(nil_chk(b), bptr++) & (jint) 0xff);
      }
      jint field3 = 0;
      for (jint k = 0; k < IOSIntArray_Get(wc, 2); ++k) {
        field3 = (JreLShift32(field3, 8)) + (IOSByteArray_Get(nil_chk(b), bptr++) & (jint) 0xff);
      }
      jint base = start * 2;
      if (IOSIntArray_Get(nil_chk(self->xref_), base) == 0 && IOSIntArray_Get(self->xref_, base + 1) == 0) {
        switch (type) {
          case 0:
          *IOSIntArray_GetRef(self->xref_, base) = -1;
          break;
          case 1:
          *IOSIntArray_GetRef(self->xref_, base) = field2;
          break;
          case 2:
          *IOSIntArray_GetRef(self->xref_, base) = field3;
          *IOSIntArray_GetRef(self->xref_, base + 1) = field2;
          if (self->partial_) {
            [((ComAowagieTextPdfIntHashtable *) nil_chk(self->objStmToOffset_)) putWithInt:field2 withInt:0];
          }
          else {
            JavaLangInteger *on = new_JavaLangInteger_initWithInt_(field2);
            ComAowagieTextPdfIntHashtable *seq = (ComAowagieTextPdfIntHashtable *) cast_chk([((JavaUtilHashMap *) nil_chk(self->objStmMark_)) getWithId:on], [ComAowagieTextPdfIntHashtable class]);
            if (seq == nil) {
              seq = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
              [seq putWithInt:field3 withInt:1];
              (void) [((JavaUtilHashMap *) nil_chk(self->objStmMark_)) putWithId:on withId:seq];
            }
            else {
              
#line 1556
              [seq putWithInt:field3 withInt:1];
            }
          }
          break;
        }
      }
      ++start;
    }
  }
  thisStream *= 2;
  if (thisStream + 1 < ((IOSIntArray *) nil_chk(self->xref_))->size_ && IOSIntArray_Get(self->xref_, thisStream) == 0 && IOSIntArray_Get(self->xref_, thisStream + 1) == 0) {
    *IOSIntArray_GetRef(self->xref_, thisStream) = -1;
  }
  
#line 1570
  if (prev == -1) {
    return true;
  }
  return ComAowagieTextPdfPdfReader_readXRefStreamWithInt_(self, prev);
}


#line 1642
ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfPdfReader_readDictionary(ComAowagieTextPdfPdfReader *self) {
  ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_init();
  while (true) {
    [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextValidToken];
    if ([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getTokenType] == ComAowagieTextPdfPRTokeniser_TK_END_DIC) {
      break;
    }
    if ([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getTokenType] != ComAowagieTextPdfPRTokeniser_TK_NAME) {
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) throwErrorWithNSString:@"Dictionary key is not a name."];
    }
    ComAowagieTextPdfPdfName *name = new_ComAowagieTextPdfPdfName_initWithNSString_withBoolean_([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getStringValue], false);
    ComAowagieTextPdfPdfObject *obj = ComAowagieTextPdfPdfReader_readPRObject(self);
    jint type = [((ComAowagieTextPdfPdfObject *) nil_chk(obj)) type];
    if (-type == ComAowagieTextPdfPRTokeniser_TK_END_DIC) {
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) throwErrorWithNSString:@"Unexpected '>>'"];
    }
    if (-type == ComAowagieTextPdfPRTokeniser_TK_END_ARRAY) {
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) throwErrorWithNSString:@"Unexpected ']'"];
    }
    [dic putWithComAowagieTextPdfPdfName:name withComAowagieTextPdfPdfObject:obj];
  }
  return dic;
}

ComAowagieTextPdfPdfArray *ComAowagieTextPdfPdfReader_readArray(ComAowagieTextPdfPdfReader *self) {
  ComAowagieTextPdfPdfArray *array = new_ComAowagieTextPdfPdfArray_init();
  while (true) {
    ComAowagieTextPdfPdfObject *obj = ComAowagieTextPdfPdfReader_readPRObject(self);
    jint type = [((ComAowagieTextPdfPdfObject *) nil_chk(obj)) type];
    if (-type == ComAowagieTextPdfPRTokeniser_TK_END_ARRAY) {
      break;
    }
    if (-type == ComAowagieTextPdfPRTokeniser_TK_END_DIC) {
      [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) throwErrorWithNSString:@"Unexpected '>>'"];
    }
    [array addWithComAowagieTextPdfPdfObject:obj];
  }
  return array;
}


#line 1687
ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfReader_readPRObject(ComAowagieTextPdfPdfReader *self) {
  [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextValidToken];
  jint type = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getTokenType];
  {
    
#line 1735
    ComAowagieTextPdfPdfString *str;
    
#line 1753
    jint num;
    ComAowagieTextPdfPRIndirectReference *ref;
    
#line 1757
    NSString *sv;
    
#line 1690
    switch (type) {
      case ComAowagieTextPdfPRTokeniser_TK_START_DIC:
      {
        
#line 1692
        ++self->readDepth_;
        ComAowagieTextPdfPdfDictionary *dic = ComAowagieTextPdfPdfReader_readDictionary(self);
        --self->readDepth_;
        jint pos = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getFilePointer];
        
#line 1697
        jboolean hasNext;
        do {
          hasNext = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) nextToken];
        }
        while (
#line 1700
        hasNext && [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getTokenType] == ComAowagieTextPdfPRTokeniser_TK_COMMENT);
        
#line 1702
        if (hasNext && [((NSString *) nil_chk([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getStringValue])) isEqual:@"stream"]) {
          
#line 1704
          jint ch;
          do {
            ch = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) read];
          }
          while (
#line 1707
          ch == 32 || ch == 9 || ch == 0 || ch == 12);
          if (ch != 0x000a) {
            ch = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) read];
          }
          if (ch != 0x000a) {
            [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) backOnePositionWithInt:ch];
          }
          ComAowagieTextPdfPRStream *stream = new_ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPdfReader_withInt_(self, [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getFilePointer]);
          [stream putAllWithComAowagieTextPdfPdfDictionary:dic];
          
#line 1717
          [stream setObjNumWithInt:self->objNum_ withInt:self->objGen_];
          
#line 1719
          return stream;
        }
        else {
          [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) seekWithInt:pos];
          return dic;
        }
      }
      case ComAowagieTextPdfPRTokeniser_TK_START_ARRAY:
      {
        
#line 1727
        ++self->readDepth_;
        ComAowagieTextPdfPdfArray *arr = ComAowagieTextPdfPdfReader_readArray(self);
        --self->readDepth_;
        return arr;
      }
      case ComAowagieTextPdfPRTokeniser_TK_NUMBER:
      return new_ComAowagieTextPdfPdfNumber_initWithNSString_([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getStringValue]);
      case ComAowagieTextPdfPRTokeniser_TK_STRING:
      str = [new_ComAowagieTextPdfPdfString_initWithNSString_withNSString_([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getStringValue], nil) setHexWritingWithBoolean:[((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) isHexString]];
      
#line 1737
      [((ComAowagieTextPdfPdfString *) nil_chk(str)) setObjNumWithInt:self->objNum_ withInt:self->objGen_];
      if (self->strings_ != nil) {
        [self->strings_ addWithId:str];
      }
      
#line 1742
      return str;
      case ComAowagieTextPdfPRTokeniser_TK_NAME:
      {
        
#line 1744
        ComAowagieTextPdfPdfName *cachedName = (ComAowagieTextPdfPdfName *) cast_chk([((id<JavaUtilMap>) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, staticNames))) getWithId:[((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getStringValue]], [ComAowagieTextPdfPdfName class]);
        if (self->readDepth_ > 0 && cachedName != nil) {
          return cachedName;
        }
        else {
          return new_ComAowagieTextPdfPdfName_initWithNSString_withBoolean_([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getStringValue], false);
        }
      }
      case ComAowagieTextPdfPRTokeniser_TK_REF:
      num = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getReference];
      ref = new_ComAowagieTextPdfPRIndirectReference_initWithComAowagieTextPdfPdfReader_withInt_withInt_(self, num, [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getGeneration]);
      return ref;
      default:
      sv = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getStringValue];
      if ([@"null" isEqual:sv]) {
        if (self->readDepth_ == 0) {
          return new_ComAowagieTextPdfPdfNull_initPackagePrivate();
        }
        return JreLoadStatic(ComAowagieTextPdfPdfNull, PDFNULL);
      }
      else if ([@"true" isEqual:sv]) {
        if (self->readDepth_ == 0) {
          return new_ComAowagieTextPdfPdfBoolean_initWithBoolean_(true);
        }
        return JreLoadStatic(ComAowagieTextPdfPdfBoolean, PDFTRUE);
      }
      else if ([@"false" isEqual:sv]) {
        if (self->readDepth_ == 0) {
          return new_ComAowagieTextPdfPdfBoolean_initWithBoolean_(false);
        }
        return JreLoadStatic(ComAowagieTextPdfPdfBoolean, PDFFALSE);
      }
      return new_ComAowagieTextPdfPdfLiteral_initWithInt_withNSString_(-type, [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokens_)) getStringValue]);
    }
  }
}


#line 1784
IOSByteArray *ComAowagieTextPdfPdfReader_FlateDecodeWithByteArray_(IOSByteArray *inArg) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 1785
  IOSByteArray *b = ComAowagieTextPdfPdfReader_FlateDecodeWithByteArray_withBoolean_(inArg, true);
  if (b == nil) {
    return ComAowagieTextPdfPdfReader_FlateDecodeWithByteArray_withBoolean_(inArg, false);
  }
  return b;
}


#line 1797
IOSByteArray *ComAowagieTextPdfPdfReader_decodePredictorWithByteArray_withComAowagieTextPdfPdfObject_(IOSByteArray *inArg, ComAowagieTextPdfPdfObject *dicPar) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 1798
  if (dicPar == nil || ![dicPar isDictionary]) {
    return inArg;
  }
  ComAowagieTextPdfPdfDictionary *dic = (ComAowagieTextPdfPdfDictionary *) cast_chk(dicPar, [ComAowagieTextPdfPdfDictionary class]);
  ComAowagieTextPdfPdfObject *obj = ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_([dic getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PREDICTOR)]);
  if (obj == nil || ![obj isNumber]) {
    return inArg;
  }
  jint predictor = [((ComAowagieTextPdfPdfNumber *) cast_chk(obj, [ComAowagieTextPdfPdfNumber class])) intValue];
  if (predictor < 10) {
    return inArg;
  }
  jint width = 1;
  obj = ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_([dic getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLUMNS)]);
  if (obj != nil && [obj isNumber]) {
    width = [((ComAowagieTextPdfPdfNumber *) cast_chk(obj, [ComAowagieTextPdfPdfNumber class])) intValue];
  }
  jint colors = 1;
  obj = ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_([dic getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLORS)]);
  if (obj != nil && [obj isNumber]) {
    colors = [((ComAowagieTextPdfPdfNumber *) cast_chk(obj, [ComAowagieTextPdfPdfNumber class])) intValue];
  }
  jint bpc = 8;
  obj = ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_([dic getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BITSPERCOMPONENT)]);
  if (obj != nil && [obj isNumber]) {
    bpc = [((ComAowagieTextPdfPdfNumber *) cast_chk(obj, [ComAowagieTextPdfPdfNumber class])) intValue];
  }
  JavaIoDataInputStream *dataStream = new_JavaIoDataInputStream_initWithJavaIoInputStream_(new_JavaIoByteArrayInputStream_initWithByteArray_(inArg));
  JavaIoByteArrayOutputStream *fout = new_JavaIoByteArrayOutputStream_initWithInt_(((IOSByteArray *) nil_chk(inArg))->size_);
  jint bytesPerPixel = JreIntDiv(colors * bpc, 8);
  jint bytesPerRow = JreIntDiv((colors * width * bpc + 7), 8);
  IOSByteArray *curr = [IOSByteArray newArrayWithLength:bytesPerRow];
  IOSByteArray *prior = [IOSByteArray newArrayWithLength:bytesPerRow];
  
#line 1833
  while (true) {
    
#line 1835
    jint filter = 0;
    @try {
      filter = [dataStream read];
      if (filter < 0) {
        return [fout toByteArray];
      }
      [dataStream readFullyWithByteArray:curr withInt:0 withInt:bytesPerRow];
    }
    @catch (
#line 1842
    JavaLangException *e) {
      return [fout toByteArray];
    }
    
#line 1846
    switch (filter) {
      case 0:
      break;
      case 1:
      for (jint i = bytesPerPixel; i < bytesPerRow; i++) {
        *IOSByteArray_GetRef(curr, i) += IOSByteArray_Get(curr, i - bytesPerPixel);
      }
      break;
      case 2:
      for (jint i = 0; i < bytesPerRow; i++) {
        *IOSByteArray_GetRef(curr, i) += IOSByteArray_Get(prior, i);
      }
      break;
      case 3:
      for (jint i = 0; i < bytesPerPixel; i++) {
        *IOSByteArray_GetRef(curr, i) += JreIntDiv(IOSByteArray_Get(prior, i), 2);
      }
      for (jint i = bytesPerPixel; i < bytesPerRow; i++) {
        *IOSByteArray_GetRef(curr, i) += JreIntDiv(((IOSByteArray_Get(curr, i - bytesPerPixel) & (jint) 0xff) + (IOSByteArray_Get(prior, i) & (jint) 0xff)), 2);
      }
      break;
      case 4:
      for (jint i = 0; i < bytesPerPixel; i++) {
        *IOSByteArray_GetRef(curr, i) += IOSByteArray_Get(prior, i);
      }
      
#line 1872
      for (jint i = bytesPerPixel; i < bytesPerRow; i++) {
        jint a = IOSByteArray_Get(curr, i - bytesPerPixel) & (jint) 0xff;
        jint b = IOSByteArray_Get(prior, i) & (jint) 0xff;
        jint c = IOSByteArray_Get(prior, i - bytesPerPixel) & (jint) 0xff;
        
#line 1877
        jint p = a + b - c;
        jint pa = JavaLangMath_absWithInt_(p - a);
        jint pb = JavaLangMath_absWithInt_(p - b);
        jint pc = JavaLangMath_absWithInt_(p - c);
        
#line 1882
        jint ret;
        
#line 1884
        if (pa <= pb && pa <= pc) {
          ret = a;
        }
        else
#line 1886
        if (pb <= pc) {
          ret = b;
        }
        else {
          
#line 1889
          ret = c;
        }
        *IOSByteArray_GetRef(curr, i) += (jbyte) ret;
      }
      break;
      default:
      
#line 1896
      @throw new_JavaLangRuntimeException_initWithNSString_(@"PNG filter unknown.");
    }
    @try {
      [fout writeWithByteArray:curr];
    }
    @catch (JavaIoIOException *ioe) {
    }
    
#line 1906
    IOSByteArray *tmp = prior;
    prior = curr;
    curr = tmp;
  }
}


#line 1918
IOSByteArray *ComAowagieTextPdfPdfReader_FlateDecodeWithByteArray_withBoolean_(IOSByteArray *inArg, jboolean strict) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 1919
  JavaIoByteArrayInputStream *stream = new_JavaIoByteArrayInputStream_initWithByteArray_(inArg);
  JavaUtilZipInflaterInputStream *zip = new_JavaUtilZipInflaterInputStream_initWithJavaIoInputStream_(stream);
  JavaIoByteArrayOutputStream *out = new_JavaIoByteArrayOutputStream_init();
  IOSByteArray *b = [IOSByteArray newArrayWithLength:strict ? 4092 : 1];
  @try {
    jint n;
    while ((n = [zip readWithByteArray:b]) >= 0) {
      [out writeWithByteArray:b withInt:0 withInt:n];
    }
    [zip close];
    [out close];
    return [out toByteArray];
  }
  @catch (JavaLangException *e) {
    if (strict) {
      return nil;
    }
    return [out toByteArray];
  }
}


#line 1944
IOSByteArray *ComAowagieTextPdfPdfReader_ASCIIHexDecodeWithByteArray_(IOSByteArray *inArg) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 1945
  JavaIoByteArrayOutputStream *out = new_JavaIoByteArrayOutputStream_init();
  jboolean first = true;
  jint n1 = 0;
  {
    IOSByteArray *a__ =
#line 1948
    inArg;
    jbyte const *b__ = ((IOSByteArray *) nil_chk(a__))->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte element = *b__++;
      
#line 1949
      jint ch = element & (jint) 0xff;
      if (ch == '>') {
        break;
      }
      if (ComAowagieTextPdfPRTokeniser_isWhitespaceWithInt_(ch)) {
        continue;
      }
      jint n = ComAowagieTextPdfPRTokeniser_getHexWithInt_(ch);
      if (n == -1) {
        @throw new_JavaLangRuntimeException_initWithNSString_(@"Illegal character in ASCIIHexDecode.");
      }
      if (first) {
        n1 = n;
      }
      else {
        
#line 1963
        [out writeWithInt:(jbyte) ((JreLShift32(n1, 4)) + n)];
      }
      first = !first;
    }
  }
  
#line 1967
  if (!first) {
    [out writeWithInt:(jbyte) (JreLShift32(n1, 4))];
  }
  return [out toByteArray];
}


#line 1977
IOSByteArray *ComAowagieTextPdfPdfReader_ASCII85DecodeWithByteArray_(IOSByteArray *inArg) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 1978
  JavaIoByteArrayOutputStream *out = new_JavaIoByteArrayOutputStream_init();
  jint state = 0;
  IOSIntArray *chn = [IOSIntArray newArrayWithLength:5];
  {
    IOSByteArray *a__ =
#line 1981
    inArg;
    jbyte const *b__ = ((IOSByteArray *) nil_chk(a__))->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte element = *b__++;
      
#line 1982
      jint ch = element & (jint) 0xff;
      if (ch == '~') {
        break;
      }
      if (ComAowagieTextPdfPRTokeniser_isWhitespaceWithInt_(ch)) {
        continue;
      }
      if (ch == 'z' && state == 0) {
        [out writeWithInt:0];
        [out writeWithInt:0];
        [out writeWithInt:0];
        [out writeWithInt:0];
        continue;
      }
      if (ch < '!' || ch > 'u') {
        @throw new_JavaLangRuntimeException_initWithNSString_(@"Illegal character in ASCII85Decode.");
      }
      *IOSIntArray_GetRef(chn, state) = ch - '!';
      ++state;
      if (state == 5) {
        state = 0;
        jint r = 0;
        for (jint j = 0; j < 5; ++j) {
          r = r * 85 + IOSIntArray_Get(chn, j);
        }
        [out writeWithInt:(jbyte) (JreRShift32(r, 24))];
        [out writeWithInt:(jbyte) (JreRShift32(r, 16))];
        [out writeWithInt:(jbyte) (JreRShift32(r, 8))];
        [out writeWithInt:(jbyte) r];
      }
    }
  }
  
#line 2013
  jint r = 0;
  
#line 2017
  if (state == 2) {
    r = IOSIntArray_Get(chn, 0) * 85 * 85 * 85 * 85 + IOSIntArray_Get(chn, 1) * 85 * 85 * 85 + 85 * 85 * 85 + 85 * 85 + 85;
    [out writeWithInt:(jbyte) (JreRShift32(r, 24))];
  }
  else if (state == 3) {
    r = IOSIntArray_Get(chn, 0) * 85 * 85 * 85 * 85 + IOSIntArray_Get(chn, 1) * 85 * 85 * 85 + IOSIntArray_Get(chn, 2) * 85 * 85 + 85 * 85 + 85;
    [out writeWithInt:(jbyte) (JreRShift32(r, 24))];
    [out writeWithInt:(jbyte) (JreRShift32(r, 16))];
  }
  else if (state == 4) {
    r = IOSIntArray_Get(chn, 0) * 85 * 85 * 85 * 85 + IOSIntArray_Get(chn, 1) * 85 * 85 * 85 + IOSIntArray_Get(chn, 2) * 85 * 85 + IOSIntArray_Get(chn, 3) * 85 + 85;
    [out writeWithInt:(jbyte) (JreRShift32(r, 24))];
    [out writeWithInt:(jbyte) (JreRShift32(r, 16))];
    [out writeWithInt:(jbyte) (JreRShift32(r, 8))];
  }
  return [out toByteArray];
}


#line 2039
IOSByteArray *ComAowagieTextPdfPdfReader_LZWDecodeWithByteArray_(IOSByteArray *inArg) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 2040
  JavaIoByteArrayOutputStream *out = new_JavaIoByteArrayOutputStream_init();
  ComAowagieTextPdfLZWDecoder *lzw = new_ComAowagieTextPdfLZWDecoder_initPackagePrivate();
  [lzw decodeWithByteArray:inArg withJavaIoOutputStream:out];
  return [out toByteArray];
}


#line 2180
void ComAowagieTextPdfPdfReader_setPageContentWithInt_withByteArray_withInt_(ComAowagieTextPdfPdfReader *self, jint pageNum, IOSByteArray *content, jint compressionLevel) {
  ComAowagieTextPdfPdfDictionary *page = [self getPageNWithInt:pageNum];
  if (page == nil) {
    return;
  }
  ComAowagieTextPdfPdfObject *contents = [page getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CONTENTS)];
  self->freeXref_ = -1;
  [self killXrefWithComAowagieTextPdfPdfObject:contents];
  if (self->freeXref_ == -1) {
    [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) addWithId:nil];
    self->freeXref_ = [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) size] - 1;
  }
  [page putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CONTENTS) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPRIndirectReference_initWithComAowagieTextPdfPdfReader_withInt_(self, self->freeXref_)];
  (void) [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) setWithInt:self->freeXref_ withId:new_ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPdfReader_withByteArray_withInt_(self, content, compressionLevel)];
}


#line 2202
IOSByteArray *ComAowagieTextPdfPdfReader_getStreamBytesWithComAowagieTextPdfPRStream_withComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfPRStream *stream, ComAowagieTextPdfRandomAccessFileOrArray *file) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 2203
  ComAowagieTextPdfPdfObject *filter = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPRStream *) nil_chk(stream)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER)]);
  IOSByteArray *b = ComAowagieTextPdfPdfReader_getStreamBytesRawWithComAowagieTextPdfPRStream_withComAowagieTextPdfRandomAccessFileOrArray_(stream, file);
  JavaUtilArrayList *filters = new_JavaUtilArrayList_init();
  if (filter != nil) {
    if ([filter isName]) {
      [filters addWithId:filter];
    }
    else
#line 2209
    if ([filter isArray]) {
      filters = [((ComAowagieTextPdfPdfArray *) cast_chk(filter, [ComAowagieTextPdfPdfArray class])) getArrayList];
    }
  }
  JavaUtilArrayList *dp = new_JavaUtilArrayList_init();
  ComAowagieTextPdfPdfObject *dpo = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([stream getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DECODEPARMS)]);
  if (dpo == nil || (![dpo isDictionary] && ![dpo isArray])) {
    dpo = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([stream getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DP)]);
  }
  if (dpo != nil) {
    if ([dpo isDictionary]) {
      [dp addWithId:dpo];
    }
    else
#line 2221
    if ([dpo isArray]) {
      dp = [((ComAowagieTextPdfPdfArray *) cast_chk(dpo, [ComAowagieTextPdfPdfArray class])) getArrayList];
    }
  }
  NSString *name;
  for (jint j = 0; j < [((JavaUtilArrayList *) nil_chk(filters)) size]; ++j) {
    name = [((ComAowagieTextPdfPdfName *) nil_chk(((ComAowagieTextPdfPdfName *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_((ComAowagieTextPdfPdfObject *) cast_chk([filters getWithInt:j], [ComAowagieTextPdfPdfObject class])), [ComAowagieTextPdfPdfName class])))) description];
    if ([((NSString *) nil_chk(name)) isEqual:@"/FlateDecode"] || [name isEqual:@"/Fl"]) {
      b = ComAowagieTextPdfPdfReader_FlateDecodeWithByteArray_(b);
      ComAowagieTextPdfPdfObject *dicParam = nil;
      if (j < [((JavaUtilArrayList *) nil_chk(dp)) size]) {
        dicParam = (ComAowagieTextPdfPdfObject *) cast_chk([dp getWithInt:j], [ComAowagieTextPdfPdfObject class]);
        b = ComAowagieTextPdfPdfReader_decodePredictorWithByteArray_withComAowagieTextPdfPdfObject_(b, dicParam);
      }
    }
    else if ([name isEqual:@"/ASCIIHexDecode"] || [name isEqual:@"/AHx"]) {
      b = ComAowagieTextPdfPdfReader_ASCIIHexDecodeWithByteArray_(b);
    }
    else
#line 2238
    if ([name isEqual:@"/ASCII85Decode"] || [name isEqual:@"/A85"]) {
      b = ComAowagieTextPdfPdfReader_ASCII85DecodeWithByteArray_(b);
    }
    else
#line 2240
    if ([name isEqual:@"/LZWDecode"]) {
      b = ComAowagieTextPdfPdfReader_LZWDecodeWithByteArray_(b);
      ComAowagieTextPdfPdfObject *dicParam = nil;
      if (j < [((JavaUtilArrayList *) nil_chk(dp)) size]) {
        dicParam = (ComAowagieTextPdfPdfObject *) cast_chk([dp getWithInt:j], [ComAowagieTextPdfPdfObject class]);
        b = ComAowagieTextPdfPdfReader_decodePredictorWithByteArray_withComAowagieTextPdfPdfObject_(b, dicParam);
      }
    }
    else if ([name isEqual:@"/Crypt"]) {
    }
    else {
      
#line 2250
      @throw new_ComAowagieTextExceptionsUnsupportedPdfException_initWithNSString_(JreStrcat("$$$", @"The filter ", name, @" is not supported."));
    }
  }
  return b;
}


#line 2261
IOSByteArray *ComAowagieTextPdfPdfReader_getStreamBytesWithComAowagieTextPdfPRStream_(ComAowagieTextPdfPRStream *stream) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 2262
  ComAowagieTextPdfRandomAccessFileOrArray *rf = [((ComAowagieTextPdfPdfReader *) nil_chk([((ComAowagieTextPdfPRStream *) nil_chk(stream)) getReader])) getSafeFile];
  @try {
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(rf)) reOpen];
    return ComAowagieTextPdfPdfReader_getStreamBytesWithComAowagieTextPdfPRStream_withComAowagieTextPdfRandomAccessFileOrArray_(stream, rf);
  }
  @finally {
    @try {
      
#line 2268
      [rf close];
    }
    @catch (
#line 2268
    JavaLangException *e) {
    }
  }
}


#line 2278
IOSByteArray *ComAowagieTextPdfPdfReader_getStreamBytesRawWithComAowagieTextPdfPRStream_withComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfPRStream *stream, ComAowagieTextPdfRandomAccessFileOrArray *file) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 2279
  ComAowagieTextPdfPdfReader *reader = [((ComAowagieTextPdfPRStream *) nil_chk(stream)) getReader];
  IOSByteArray *b;
  if ([stream getOffset] < 0) {
    b = [stream getBytes];
  }
  else {
    
#line 2284
    b = [IOSByteArray newArrayWithLength:[stream getLength]];
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(file)) seekWithInt:[stream getOffset]];
    [file readFullyWithByteArray:b];
    ComAowagieTextPdfPdfEncryption *decrypt = [((ComAowagieTextPdfPdfReader *) nil_chk(reader)) getDecrypt];
    if (decrypt != nil) {
      ComAowagieTextPdfPdfObject *filter = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([stream getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER)]);
      JavaUtilArrayList *filters = new_JavaUtilArrayList_init();
      if (filter != nil) {
        if ([filter isName]) {
          [filters addWithId:filter];
        }
        else
#line 2294
        if ([filter isArray]) {
          filters = [((ComAowagieTextPdfPdfArray *) cast_chk(filter, [ComAowagieTextPdfPdfArray class])) getArrayList];
        }
      }
      jboolean skip = false;
      for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(filters)) size]; ++k) {
        ComAowagieTextPdfPdfObject *obj = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_((ComAowagieTextPdfPdfObject *) cast_chk([filters getWithInt:k], [ComAowagieTextPdfPdfObject class]));
        if (obj != nil && [((NSString *) nil_chk([obj description])) isEqual:@"/Crypt"]) {
          skip = true;
          break;
        }
      }
      if (!skip) {
        [decrypt setHashKeyWithInt:[stream getObjNum] withInt:[stream getObjGen]];
        b = [decrypt decryptByteArrayWithByteArray:b];
      }
    }
  }
  return b;
}


#line 2320
IOSByteArray *ComAowagieTextPdfPdfReader_getStreamBytesRawWithComAowagieTextPdfPRStream_(ComAowagieTextPdfPRStream *stream) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 2321
  ComAowagieTextPdfRandomAccessFileOrArray *rf = [((ComAowagieTextPdfPdfReader *) nil_chk([((ComAowagieTextPdfPRStream *) nil_chk(stream)) getReader])) getSafeFile];
  @try {
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(rf)) reOpen];
    return ComAowagieTextPdfPdfReader_getStreamBytesRawWithComAowagieTextPdfPRStream_withComAowagieTextPdfRandomAccessFileOrArray_(stream, rf);
  }
  @finally {
    @try {
      
#line 2327
      [rf close];
    }
    @catch (
#line 2327
    JavaLangException *e) {
    }
  }
}


#line 2332
void ComAowagieTextPdfPdfReader_eliminateSharedStreams(ComAowagieTextPdfPdfReader *self) {
  if (!self->sharedStreams_) {
    return;
  }
  self->sharedStreams_ = false;
  if (ComAowagieTextPdfPdfReader_PageRefs_size(nil_chk(self->pageRefs_)) == 1) {
    return;
  }
  JavaUtilArrayList *newRefs = new_JavaUtilArrayList_init();
  JavaUtilArrayList *newStreams = new_JavaUtilArrayList_init();
  ComAowagieTextPdfIntHashtable *visited = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
  for (jint k = 1; k <= ComAowagieTextPdfPdfReader_PageRefs_size(nil_chk(self->pageRefs_)); ++k) {
    ComAowagieTextPdfPdfDictionary *page = [((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(self->pageRefs_)) getPageNWithInt:k];
    if (page == nil) {
      continue;
    }
    ComAowagieTextPdfPdfObject *contents = ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_([page getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CONTENTS)]);
    if (contents == nil) {
      continue;
    }
    if ([contents isStream]) {
      ComAowagieTextPdfPRIndirectReference *ref = (ComAowagieTextPdfPRIndirectReference *) cast_chk([page getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CONTENTS)], [ComAowagieTextPdfPRIndirectReference class]);
      if ([visited containsKeyWithInt:[((ComAowagieTextPdfPRIndirectReference *) nil_chk(ref)) getNumber]]) {
        
#line 2356
        [newRefs addWithId:ref];
        [newStreams addWithId:new_ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPRStream_withComAowagieTextPdfPdfDictionary_((ComAowagieTextPdfPRStream *) cast_chk(contents, [ComAowagieTextPdfPRStream class]), nil)];
      }
      else {
        
#line 2359
        [visited putWithInt:[ref getNumber] withInt:1];
      }
    }
    else if ([contents isArray]) {
      ComAowagieTextPdfPdfArray *array = (ComAowagieTextPdfPdfArray *) cast_chk(contents, [ComAowagieTextPdfPdfArray class]);
      for (jint j = 0; j < [array size]; ++j) {
        ComAowagieTextPdfPRIndirectReference *ref = (ComAowagieTextPdfPRIndirectReference *) cast_chk([array getPdfObjectWithInt:j], [ComAowagieTextPdfPRIndirectReference class]);
        if ([visited containsKeyWithInt:[((ComAowagieTextPdfPRIndirectReference *) nil_chk(ref)) getNumber]]) {
          
#line 2368
          [newRefs addWithId:ref];
          [newStreams addWithId:new_ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPRStream_withComAowagieTextPdfPdfDictionary_((ComAowagieTextPdfPRStream *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_(ref), [ComAowagieTextPdfPRStream class]), nil)];
        }
        else {
          
#line 2371
          [visited putWithInt:[ref getNumber] withInt:1];
        }
      }
    }
  }
  if ([newStreams isEmpty]) {
    return;
  }
  for (jint k = 0; k < [newStreams size]; ++k) {
    [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) addWithId:[newStreams getWithInt:k]];
    ComAowagieTextPdfPRIndirectReference *ref = (ComAowagieTextPdfPRIndirectReference *) cast_chk([newRefs getWithInt:k], [ComAowagieTextPdfPRIndirectReference class]);
    [((ComAowagieTextPdfPRIndirectReference *) nil_chk(ref)) setNumberWithInt:[((JavaUtilArrayList *) nil_chk(self->xrefObj_)) size] - 1 withInt:0];
  }
}


#line 2493
jboolean ComAowagieTextPdfPdfReader_equalsnWithByteArray_withByteArray_(IOSByteArray *a1, IOSByteArray *a2) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 2494
  jint length = ((IOSByteArray *) nil_chk(a2))->size_;
  for (jint k = 0; k < length; ++k) {
    if (IOSByteArray_Get(nil_chk(a1), k) != IOSByteArray_Get(a2, k)) {
      return false;
    }
  }
  return true;
}


#line 2503
jboolean ComAowagieTextPdfPdfReader_existsNameWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfName_withComAowagieTextPdfPdfName_(ComAowagieTextPdfPdfDictionary *dic, ComAowagieTextPdfPdfName *key, ComAowagieTextPdfPdfName *value) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 2504
  ComAowagieTextPdfPdfObject *type = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(dic)) getWithComAowagieTextPdfPdfName:key]);
  if (type == nil || ![type isName]) {
    return false;
  }
  ComAowagieTextPdfPdfName *name = (ComAowagieTextPdfPdfName *) cast_chk(type, [ComAowagieTextPdfPdfName class]);
  return [name isEqual:value];
}


#line 2512
NSString *ComAowagieTextPdfPdfReader_getFontNameWithComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfPdfDictionary *dic) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 2513
  if (dic == nil) {
    return nil;
  }
  ComAowagieTextPdfPdfObject *type = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([dic getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BASEFONT)]);
  if (type == nil || ![type isName]) {
    return nil;
  }
  return ComAowagieTextPdfPdfName_decodeNameWithNSString_([type description]);
}


#line 2523
NSString *ComAowagieTextPdfPdfReader_getSubsetPrefixWithComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfPdfDictionary *dic) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 2524
  if (dic == nil) {
    return nil;
  }
  NSString *s = ComAowagieTextPdfPdfReader_getFontNameWithComAowagieTextPdfPdfDictionary_(dic);
  if (s == nil) {
    return nil;
  }
  if ([s java_length] < 8 || [s charAtWithInt:6] != '+') {
    return nil;
  }
  for (jint k = 0; k < 6; ++k) {
    jchar c = [s charAtWithInt:k];
    if (c < 'A' || c > 'Z') {
      return nil;
    }
  }
  return s;
}


#line 2610
ComAowagieTextPdfPdfArray *ComAowagieTextPdfPdfReader_getNameArrayWithComAowagieTextPdfPdfObject_(ComAowagieTextPdfPdfObject *obj) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 2611
  if (obj == nil) {
    return nil;
  }
  obj = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_(obj);
  if (obj == nil) {
    return nil;
  }
  if ([obj isArray]) {
    return (ComAowagieTextPdfPdfArray *) cast_chk(obj, [ComAowagieTextPdfPdfArray class]);
  }
  else
#line 2620
  if ([obj isDictionary]) {
    ComAowagieTextPdfPdfObject *arr2 = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) cast_chk(obj, [ComAowagieTextPdfPdfDictionary class])) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, D)]);
    if (arr2 != nil && [arr2 isArray]) {
      return (ComAowagieTextPdfPdfArray *) cast_chk(arr2, [ComAowagieTextPdfPdfArray class]);
    }
  }
  return nil;
}


#line 2645
JavaUtilHashMap *ComAowagieTextPdfPdfReader_getNamedDestinationWithBoolean_(ComAowagieTextPdfPdfReader *self, jboolean keepNames) {
  JavaUtilHashMap *names = ComAowagieTextPdfPdfReader_getNamedDestinationFromNamesWithBoolean_(self, keepNames);
  [((JavaUtilHashMap *) nil_chk(names)) putAllWithJavaUtilMap:[self getNamedDestinationFromStrings]];
  return names;
}


#line 2667
JavaUtilHashMap *ComAowagieTextPdfPdfReader_getNamedDestinationFromNamesWithBoolean_(ComAowagieTextPdfPdfReader *self, jboolean keepNames) {
  JavaUtilHashMap *names = new_JavaUtilLinkedHashMap_init();
  if ([((ComAowagieTextPdfPdfDictionary *) nil_chk(self->catalog_)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DESTS)] != nil) {
    ComAowagieTextPdfPdfDictionary *dic = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(self->catalog_)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DESTS)]), [ComAowagieTextPdfPdfDictionary class]);
    if (dic == nil) {
      return names;
    }
    id<JavaUtilSet> keys = [dic getKeys];
    for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(keys)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      ComAowagieTextPdfPdfName *key = (ComAowagieTextPdfPdfName *) cast_chk([it next], [ComAowagieTextPdfPdfName class]);
      ComAowagieTextPdfPdfArray *arr = ComAowagieTextPdfPdfReader_getNameArrayWithComAowagieTextPdfPdfObject_([dic getWithComAowagieTextPdfPdfName:key]);
      if (arr == nil) {
        continue;
      }
      if (keepNames) {
        (void) [names putWithId:key withId:arr];
      }
      else {
        NSString *name = ComAowagieTextPdfPdfName_decodeNameWithNSString_([((ComAowagieTextPdfPdfName *) nil_chk(key)) description]);
        (void) [names putWithId:name withId:arr];
      }
    }
  }
  return names;
}


#line 2721
jboolean ComAowagieTextPdfPdfReader_replaceNamedDestinationWithComAowagieTextPdfPdfObject_withJavaUtilHashMap_(ComAowagieTextPdfPdfReader *self, ComAowagieTextPdfPdfObject *obj, JavaUtilHashMap *names) {
  obj = ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_(obj);
  jint objIdx = self->lastXrefPartial_;
  ComAowagieTextPdfPdfReader_releaseLastXrefPartial(self);
  if (obj != nil && [obj isDictionary]) {
    ComAowagieTextPdfPdfObject *ob2 = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) cast_chk(obj, [ComAowagieTextPdfPdfDictionary class])) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DEST)]);
    id name = nil;
    if (ob2 != nil) {
      if ([ob2 isName]) {
        name = ob2;
      }
      else
#line 2731
      if ([ob2 isString]) {
        name = [ob2 description];
      }
      ComAowagieTextPdfPdfArray *dest = (ComAowagieTextPdfPdfArray *) cast_chk([((JavaUtilHashMap *) nil_chk(names)) getWithId:name], [ComAowagieTextPdfPdfArray class]);
      if (dest != nil) {
        [((ComAowagieTextPdfPdfDictionary *) cast_chk(obj, [ComAowagieTextPdfPdfDictionary class])) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DEST) withComAowagieTextPdfPdfObject:dest];
        ComAowagieTextPdfPdfReader_setXrefPartialObjectWithInt_withComAowagieTextPdfPdfObject_(self, objIdx, obj);
        return true;
      }
    }
    else if ((ob2 = ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) cast_chk(obj, [ComAowagieTextPdfPdfDictionary class])) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, A)])) != nil) {
      jint obj2Idx = self->lastXrefPartial_;
      ComAowagieTextPdfPdfReader_releaseLastXrefPartial(self);
      ComAowagieTextPdfPdfDictionary *dic = (ComAowagieTextPdfPdfDictionary *) cast_chk(ob2, [ComAowagieTextPdfPdfDictionary class]);
      ComAowagieTextPdfPdfName *type = (ComAowagieTextPdfPdfName *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(dic)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, S)]), [ComAowagieTextPdfPdfName class]);
      if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, GOTO))) isEqual:type]) {
        ComAowagieTextPdfPdfObject *ob3 = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([dic getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, D)]);
        if (ob3 != nil) {
          if ([ob3 isName]) {
            name = ob3;
          }
          else
#line 2751
          if ([ob3 isString]) {
            name = [ob3 description];
          }
        }
        ComAowagieTextPdfPdfArray *dest = (ComAowagieTextPdfPdfArray *) cast_chk([((JavaUtilHashMap *) nil_chk(names)) getWithId:name], [ComAowagieTextPdfPdfArray class]);
        if (dest != nil) {
          [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, D) withComAowagieTextPdfPdfObject:dest];
          ComAowagieTextPdfPdfReader_setXrefPartialObjectWithInt_withComAowagieTextPdfPdfObject_(self, obj2Idx, ob2);
          ComAowagieTextPdfPdfReader_setXrefPartialObjectWithInt_withComAowagieTextPdfPdfObject_(self, objIdx, obj);
          return true;
        }
      }
    }
  }
  return false;
}


#line 2804
void ComAowagieTextPdfPdfReader_iterateBookmarksWithComAowagieTextPdfPdfObject_withJavaUtilHashMap_(ComAowagieTextPdfPdfReader *self, ComAowagieTextPdfPdfObject *outlineRef, JavaUtilHashMap *names) {
  while (outlineRef != nil) {
    ComAowagieTextPdfPdfReader_replaceNamedDestinationWithComAowagieTextPdfPdfObject_withJavaUtilHashMap_(self, outlineRef, names);
    ComAowagieTextPdfPdfDictionary *outline = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_(outlineRef), [ComAowagieTextPdfPdfDictionary class]);
    ComAowagieTextPdfPdfObject *first = [((ComAowagieTextPdfPdfDictionary *) nil_chk(outline)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FIRST)];
    if (first != nil) {
      ComAowagieTextPdfPdfReader_iterateBookmarksWithComAowagieTextPdfPdfObject_withJavaUtilHashMap_(self, first, names);
    }
    outlineRef = [outline getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, NEXT)];
  }
}


#line 2857
ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfPdfReader_duplicatePdfDictionaryWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfDictionary *original, ComAowagieTextPdfPdfDictionary *copy_, ComAowagieTextPdfPdfReader *newReader) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 2858
  if (copy_ == nil) {
    copy_ = new_ComAowagieTextPdfPdfDictionary_init();
  }
  for (id __strong element in nil_chk([((ComAowagieTextPdfPdfDictionary *) nil_chk(original)) getKeys])) {
    ComAowagieTextPdfPdfName *key = (ComAowagieTextPdfPdfName *) cast_chk(element, [ComAowagieTextPdfPdfName class]);
    [copy_ putWithComAowagieTextPdfPdfName:key withComAowagieTextPdfPdfObject:ComAowagieTextPdfPdfReader_duplicatePdfObjectWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfReader_([original getWithComAowagieTextPdfPdfName:key], newReader)];
  }
  return copy_;
}


#line 2868
ComAowagieTextPdfPdfObject *ComAowagieTextPdfPdfReader_duplicatePdfObjectWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfObject *original, ComAowagieTextPdfPdfReader *newReader) {
  ComAowagieTextPdfPdfReader_initialize();
  
#line 2869
  if (original == nil) {
    return nil;
  }
  switch ([original type]) {
    case ComAowagieTextPdfPdfObject_DICTIONARY:
    {
      
#line 2874
      return ComAowagieTextPdfPdfReader_duplicatePdfDictionaryWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfReader_((ComAowagieTextPdfPdfDictionary *) cast_chk(original, [ComAowagieTextPdfPdfDictionary class]), nil, newReader);
    }
    case ComAowagieTextPdfPdfObject_STREAM:
    {
      
#line 2877
      ComAowagieTextPdfPRStream *org = (ComAowagieTextPdfPRStream *) cast_chk(original, [ComAowagieTextPdfPRStream class]);
      ComAowagieTextPdfPRStream *stream = new_ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPRStream_withComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfReader_(org, nil, newReader);
      (void) ComAowagieTextPdfPdfReader_duplicatePdfDictionaryWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfReader_(org, stream, newReader);
      return stream;
    }
    case ComAowagieTextPdfPdfObject_ARRAY:
    {
      
#line 2883
      ComAowagieTextPdfPdfArray *arr = new_ComAowagieTextPdfPdfArray_init();
      for (id<JavaUtilIterator> it = [((ComAowagieTextPdfPdfArray *) cast_chk(original, [ComAowagieTextPdfPdfArray class])) listIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        [arr addWithComAowagieTextPdfPdfObject:ComAowagieTextPdfPdfReader_duplicatePdfObjectWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfReader_((ComAowagieTextPdfPdfObject *) cast_chk([it next], [ComAowagieTextPdfPdfObject class]), newReader)];
      }
      return arr;
    }
    case ComAowagieTextPdfPdfObject_INDIRECT:
    {
      
#line 2890
      ComAowagieTextPdfPRIndirectReference *org = (ComAowagieTextPdfPRIndirectReference *) cast_chk(original, [ComAowagieTextPdfPRIndirectReference class]);
      return new_ComAowagieTextPdfPRIndirectReference_initWithComAowagieTextPdfPdfReader_withInt_withInt_(newReader, [org getNumber], [org getGeneration]);
    }
    default:
    return original;
  }
}

void ComAowagieTextPdfPdfReader_removeUnusedNodeWithComAowagieTextPdfPdfObject_withBooleanArray_(ComAowagieTextPdfPdfReader *self, ComAowagieTextPdfPdfObject *obj, IOSBooleanArray *hits) {
  JavaUtilStack *state = new_JavaUtilStack_init();
  (void) [state pushWithId:obj];
  while (![state empty]) {
    id current = [state pop];
    if (current == nil) {
      continue;
    }
    JavaUtilArrayList *ar = nil;
    ComAowagieTextPdfPdfDictionary *dic = nil;
    IOSObjectArray *keys = nil;
    IOSObjectArray *objs = nil;
    jint idx = 0;
    if ([current isKindOfClass:[ComAowagieTextPdfPdfObject class]]) {
      obj = (ComAowagieTextPdfPdfObject *) current;
      {
        
#line 2939
        ComAowagieTextPdfPRIndirectReference *ref;
        jint num;
        
#line 2928
        switch ([obj type]) {
          case ComAowagieTextPdfPdfObject_DICTIONARY:
          case ComAowagieTextPdfPdfObject_STREAM:
          dic = (ComAowagieTextPdfPdfDictionary *) cast_chk(obj, [ComAowagieTextPdfPdfDictionary class]);
          keys = [IOSObjectArray newArrayWithLength:[dic size] type:ComAowagieTextPdfPdfName_class_()];
          (void) [((id<JavaUtilSet>) nil_chk([dic getKeys])) toArrayWithNSObjectArray:keys];
          break;
          case ComAowagieTextPdfPdfObject_ARRAY:
          ar = [((ComAowagieTextPdfPdfArray *) cast_chk(obj, [ComAowagieTextPdfPdfArray class])) getArrayList];
          break;
          case ComAowagieTextPdfPdfObject_INDIRECT:
          ref = (ComAowagieTextPdfPRIndirectReference *) cast_chk(obj, [ComAowagieTextPdfPRIndirectReference class]);
          num = [ref getNumber];
          if (!IOSBooleanArray_Get(nil_chk(hits), num)) {
            *IOSBooleanArray_GetRef(hits, num) = true;
            (void) [state pushWithId:ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_(ref)];
          }
          continue;
          default:
          continue;
        }
      }
    }
    else {
      
#line 2951
      objs = (IOSObjectArray *) cast_check(current, IOSClass_arrayType(NSObject_class_(), 1));
      if ([IOSObjectArray_Get(objs, 0) isKindOfClass:[JavaUtilArrayList class]]) {
        ar = (JavaUtilArrayList *) cast_chk(IOSObjectArray_Get(objs, 0), [JavaUtilArrayList class]);
        idx = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(objs, 1), [JavaLangInteger class])))) intValue];
      }
      else {
        keys = (IOSObjectArray *) cast_check(IOSObjectArray_Get(objs, 0), IOSClass_arrayType(ComAowagieTextPdfPdfName_class_(), 1));
        dic = (ComAowagieTextPdfPdfDictionary *) cast_chk(IOSObjectArray_Get(objs, 1), [ComAowagieTextPdfPdfDictionary class]);
        idx = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(objs, 2), [JavaLangInteger class])))) intValue];
      }
    }
    if (ar != nil) {
      for (jint k = idx; k < [ar size]; ++k) {
        ComAowagieTextPdfPdfObject *v = (ComAowagieTextPdfPdfObject *) cast_chk([ar getWithInt:k], [ComAowagieTextPdfPdfObject class]);
        if ([((ComAowagieTextPdfPdfObject *) nil_chk(v)) isIndirect]) {
          jint num = [((ComAowagieTextPdfPRIndirectReference *) cast_chk(v, [ComAowagieTextPdfPRIndirectReference class])) getNumber];
          if (num >= [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) size] || (!self->partial_ && [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) getWithInt:num] == nil)) {
            (void) [ar setWithInt:k withId:JreLoadStatic(ComAowagieTextPdfPdfNull, PDFNULL)];
            continue;
          }
        }
        if (objs == nil) {
          (void) [state pushWithId:[IOSObjectArray newArrayWithObjects:(id[]){ ar, create_JavaLangInteger_initWithInt_(k + 1) } count:2 type:NSObject_class_()]];
        }
        else {
          
#line 2975
          (void) IOSObjectArray_SetAndConsume(objs, 1, new_JavaLangInteger_initWithInt_(k + 1));
          (void) [state pushWithId:objs];
        }
        (void) [state pushWithId:v];
        break;
      }
    }
    else {
      for (jint k = idx; k < ((IOSObjectArray *) nil_chk(keys))->size_; ++k) {
        ComAowagieTextPdfPdfName *key = IOSObjectArray_Get(keys, k);
        ComAowagieTextPdfPdfObject *v = [((ComAowagieTextPdfPdfDictionary *) nil_chk(dic)) getWithComAowagieTextPdfPdfName:key];
        if ([((ComAowagieTextPdfPdfObject *) nil_chk(v)) isIndirect]) {
          jint num = [((ComAowagieTextPdfPRIndirectReference *) cast_chk(v, [ComAowagieTextPdfPRIndirectReference class])) getNumber];
          if (num >= [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) size] || (!self->partial_ && [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) getWithInt:num] == nil)) {
            [dic putWithComAowagieTextPdfPdfName:key withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfNull, PDFNULL)];
            continue;
          }
        }
        if (objs == nil) {
          (void) [state pushWithId:[IOSObjectArray newArrayWithObjects:(id[]){ keys, dic, create_JavaLangInteger_initWithInt_(k + 1) } count:3 type:NSObject_class_()]];
        }
        else {
          
#line 2996
          (void) IOSObjectArray_SetAndConsume(objs, 2, new_JavaLangInteger_initWithInt_(k + 1));
          (void) [state pushWithId:objs];
        }
        (void) [state pushWithId:v];
        break;
      }
    }
  }
}


#line 3009
jint ComAowagieTextPdfPdfReader_removeUnusedObjects(ComAowagieTextPdfPdfReader *self) {
  IOSBooleanArray *hits = [IOSBooleanArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->xrefObj_)) size]];
  ComAowagieTextPdfPdfReader_removeUnusedNodeWithComAowagieTextPdfPdfObject_withBooleanArray_(self, self->trailer_, hits);
  jint total = 0;
  if (self->partial_) {
    for (jint k = 1; k < hits->size_; ++k) {
      if (!IOSBooleanArray_Get(hits, k)) {
        *IOSIntArray_GetRef(nil_chk(self->xref_), k * 2) = -1;
        *IOSIntArray_GetRef(self->xref_, k * 2 + 1) = 0;
        (void) [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) setWithInt:k withId:nil];
        ++total;
      }
    }
  }
  else {
    for (jint k = 1; k < hits->size_; ++k) {
      if (!IOSBooleanArray_Get(hits, k)) {
        (void) [((JavaUtilArrayList *) nil_chk(self->xrefObj_)) setWithInt:k withId:nil];
        ++total;
      }
    }
  }
  return total;
}


#line 3047
NSString *ComAowagieTextPdfPdfReader_getJavaScriptWithComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfPdfReader *self, ComAowagieTextPdfRandomAccessFileOrArray *file) {
  ComAowagieTextPdfPdfDictionary *names = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(self->catalog_)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, NAMES)]), [ComAowagieTextPdfPdfDictionary class]);
  if (names == nil) {
    return nil;
  }
  ComAowagieTextPdfPdfDictionary *js = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([names getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, JAVASCRIPT)]), [ComAowagieTextPdfPdfDictionary class]);
  if (js == nil) {
    return nil;
  }
  JavaUtilHashMap *jscript = ComAowagieTextPdfPdfNameTree_readTreeWithComAowagieTextPdfPdfDictionary_(js);
  IOSObjectArray *sortedNames = [IOSObjectArray newArrayWithLength:[((JavaUtilHashMap *) nil_chk(jscript)) size] type:NSString_class_()];
  sortedNames = (IOSObjectArray *) cast_check([((id<JavaUtilSet>) nil_chk([jscript keySet])) toArrayWithNSObjectArray:sortedNames], IOSClass_arrayType(NSString_class_(), 1));
  JavaUtilArrays_sortWithNSObjectArray_(sortedNames);
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  {
    IOSObjectArray *a__ =
#line 3061
    sortedNames;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *sortedName = *b__++;
      
#line 3062
      ComAowagieTextPdfPdfDictionary *j = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_((ComAowagieTextPdfPdfIndirectReference *) cast_chk([jscript getWithId:sortedName], [ComAowagieTextPdfPdfIndirectReference class])), [ComAowagieTextPdfPdfDictionary class]);
      if (j == nil) {
        continue;
      }
      ComAowagieTextPdfPdfObject *obj = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([j getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, JS)]);
      if (obj != nil) {
        if ([obj isString]) {
          (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:[((ComAowagieTextPdfPdfString *) cast_chk(obj, [ComAowagieTextPdfPdfString class])) toUnicodeString]])) appendWithChar:0x000a];
        }
        else
#line 3070
        if ([obj isStream]) {
          IOSByteArray *bytes = ComAowagieTextPdfPdfReader_getStreamBytesWithComAowagieTextPdfPRStream_withComAowagieTextPdfRandomAccessFileOrArray_((ComAowagieTextPdfPRStream *) cast_chk(obj, [ComAowagieTextPdfPRStream class]), file);
          if (((IOSByteArray *) nil_chk(bytes))->size_ >= 2 && IOSByteArray_Get(bytes, 0) == (jbyte) 254 && IOSByteArray_Get(bytes, 1) == (jbyte) 255) {
            (void) [buf appendWithNSString:ComAowagieTextPdfPdfEncodings_convertToStringWithByteArray_withNSString_(bytes, ComAowagieTextPdfPdfObject_TEXT_UNICODE)];
          }
          else {
            
#line 3075
            (void) [buf appendWithNSString:ComAowagieTextPdfPdfEncodings_convertToStringWithByteArray_withNSString_(bytes, ComAowagieTextPdfPdfObject_TEXT_PDFDOCENCODING)];
          }
          (void) [buf appendWithChar:0x000a];
        }
      }
    }
  }
  
#line 3081
  return [buf description];
}


#line 3607
void ComAowagieTextPdfPdfReader_isAfirmaModifiedItext() {
  ComAowagieTextPdfPdfReader_initialize();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfReader)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfReader.java"


#line 3190
@implementation ComAowagieTextPdfPdfReader_PageRefs


#line 3199
- (instancetype)initWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader {
  ComAowagieTextPdfPdfReader_PageRefs_initWithComAowagieTextPdfPdfReader_(self, reader);
  return self;
}


#line 3211
- (instancetype)initWithComAowagieTextPdfPdfReader_PageRefs:(ComAowagieTextPdfPdfReader_PageRefs *)other
                             withComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader {
  ComAowagieTextPdfPdfReader_PageRefs_initWithComAowagieTextPdfPdfReader_PageRefs_withComAowagieTextPdfPdfReader_(self, other, reader);
  return self;
}


#line 3224
- (jint)size {
  return ComAowagieTextPdfPdfReader_PageRefs_size(self);
}


#line 3232
- (void)readPages {
  if (self->refsn_ != nil) {
    return;
  }
  self->refsp_ = nil;
  self->refsn_ = new_JavaUtilArrayList_init();
  self->pageInh_ = new_JavaUtilArrayList_init();
  ComAowagieTextPdfPdfReader_PageRefs_iteratePagesWithComAowagieTextPdfPRIndirectReference_(self, (ComAowagieTextPdfPRIndirectReference *) cast_chk([((ComAowagieTextPdfPdfDictionary *) nil_chk(((ComAowagieTextPdfPdfReader *) nil_chk(self->reader_))->catalog_)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PAGES)], [ComAowagieTextPdfPRIndirectReference class]));
  self->pageInh_ = nil;
  [((ComAowagieTextPdfPdfDictionary *) nil_chk(self->reader_->rootPages_)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COUNT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_([((JavaUtilArrayList *) nil_chk(self->refsn_)) size])];
}


#line 3250
- (ComAowagieTextPdfPdfDictionary *)getPageNWithInt:(jint)pageNum {
  ComAowagieTextPdfPRIndirectReference *ref = [self getPageOrigRefWithInt:pageNum];
  return (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_(ref), [ComAowagieTextPdfPdfDictionary class]);
}


#line 3259
- (ComAowagieTextPdfPdfDictionary *)getPageNReleaseWithInt:(jint)pageNum {
  ComAowagieTextPdfPdfDictionary *page = [self getPageNWithInt:pageNum];
  [self releasePageWithInt:pageNum];
  return page;
}


#line 3271
- (ComAowagieTextPdfPRIndirectReference *)getPageOrigRefWithInt:(jint)pageNum {
  @try {
    --pageNum;
    if (pageNum < 0 || pageNum >= ComAowagieTextPdfPdfReader_PageRefs_size(self)) {
      return nil;
    }
    if (self->refsn_ != nil) {
      return (ComAowagieTextPdfPRIndirectReference *) cast_chk([self->refsn_ getWithInt:pageNum], [ComAowagieTextPdfPRIndirectReference class]);
    }
    else {
      
#line 3280
      jint n = [((ComAowagieTextPdfIntHashtable *) nil_chk(self->refsp_)) getWithInt:pageNum];
      if (n == 0) {
        ComAowagieTextPdfPRIndirectReference *ref = ComAowagieTextPdfPdfReader_PageRefs_getSinglePageWithInt_(self, pageNum);
        if (((ComAowagieTextPdfPdfReader *) nil_chk(self->reader_))->lastXrefPartial_ == -1) {
          self->lastPageRead_ = -1;
        }
        else {
          
#line 3286
          self->lastPageRead_ = pageNum;
        }
        self->reader_->lastXrefPartial_ = -1;
        [((ComAowagieTextPdfIntHashtable *) nil_chk(self->refsp_)) putWithInt:pageNum withInt:[((ComAowagieTextPdfPRIndirectReference *) nil_chk(ref)) getNumber]];
        if (self->keepPages_) {
          self->lastPageRead_ = -1;
        }
        return ref;
      }
      else {
        if (self->lastPageRead_ != pageNum) {
          self->lastPageRead_ = -1;
        }
        if (self->keepPages_) {
          self->lastPageRead_ = -1;
        }
        return new_ComAowagieTextPdfPRIndirectReference_initWithComAowagieTextPdfPdfReader_withInt_(self->reader_, n);
      }
    }
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 3311
- (void)keepPages {
  ComAowagieTextPdfPdfReader_PageRefs_keepPages(self);
}


#line 3322
- (void)releasePageWithInt:(jint)pageNum {
  if (self->refsp_ == nil) {
    return;
  }
  --pageNum;
  if (pageNum < 0 || pageNum >= ComAowagieTextPdfPdfReader_PageRefs_size(self)) {
    return;
  }
  if (pageNum != self->lastPageRead_) {
    return;
  }
  self->lastPageRead_ = -1;
  ((ComAowagieTextPdfPdfReader *) nil_chk(self->reader_))->lastXrefPartial_ = [((ComAowagieTextPdfIntHashtable *) nil_chk(self->refsp_)) getWithInt:pageNum];
  ComAowagieTextPdfPdfReader_releaseLastXrefPartial(self->reader_);
  [((ComAowagieTextPdfIntHashtable *) nil_chk(self->refsp_)) removeWithInt:pageNum];
}

- (void)resetReleasePage {
  if (self->refsp_ == nil) {
    return;
  }
  self->lastPageRead_ = -1;
}

- (void)insertPageWithInt:(jint)pageNum
withComAowagieTextPdfPRIndirectReference:(ComAowagieTextPdfPRIndirectReference *)ref {
  
#line 3347
  --pageNum;
  if (self->refsn_ != nil) {
    if (pageNum >= [self->refsn_ size]) {
      [((JavaUtilArrayList *) nil_chk(self->refsn_)) addWithId:ref];
    }
    else {
      
#line 3352
      [((JavaUtilArrayList *) nil_chk(self->refsn_)) addWithInt:pageNum withId:ref];
    }
  }
  else {
    ++self->sizep_;
    self->lastPageRead_ = -1;
    if (pageNum >= ComAowagieTextPdfPdfReader_PageRefs_size(self)) {
      [((ComAowagieTextPdfIntHashtable *) nil_chk(self->refsp_)) putWithInt:ComAowagieTextPdfPdfReader_PageRefs_size(self) withInt:[((ComAowagieTextPdfPRIndirectReference *) nil_chk(ref)) getNumber]];
    }
    else {
      ComAowagieTextPdfIntHashtable *refs2 = new_ComAowagieTextPdfIntHashtable_initPackagePrivateWithInt_(([((ComAowagieTextPdfIntHashtable *) nil_chk(self->refsp_)) size] + 1) * 2);
      for (id<JavaUtilIterator> it = [((ComAowagieTextPdfIntHashtable *) nil_chk(self->refsp_)) getEntryIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        ComAowagieTextPdfIntHashtable_Entry *entry_ = (ComAowagieTextPdfIntHashtable_Entry *) cast_chk([it next], [ComAowagieTextPdfIntHashtable_Entry class]);
        jint p = [((ComAowagieTextPdfIntHashtable_Entry *) nil_chk(entry_)) getKey];
        [refs2 putWithInt:p >= pageNum ? p + 1 : p withInt:[entry_ getValue]];
      }
      [refs2 putWithInt:pageNum withInt:[((ComAowagieTextPdfPRIndirectReference *) nil_chk(ref)) getNumber]];
      self->refsp_ = refs2;
    }
  }
}


#line 3374
- (void)pushPageAttributesWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)nodePages {
  ComAowagieTextPdfPdfReader_PageRefs_pushPageAttributesWithComAowagieTextPdfPdfDictionary_(self, nodePages);
}


#line 3388
- (void)popPageAttributes {
  ComAowagieTextPdfPdfReader_PageRefs_popPageAttributes(self);
}

- (void)iteratePagesWithComAowagieTextPdfPRIndirectReference:(ComAowagieTextPdfPRIndirectReference *)rpage {
  ComAowagieTextPdfPdfReader_PageRefs_iteratePagesWithComAowagieTextPdfPRIndirectReference_(self, rpage);
}


#line 3428
- (ComAowagieTextPdfPRIndirectReference *)getSinglePageWithInt:(jint)n {
  return ComAowagieTextPdfPdfReader_PageRefs_getSinglePageWithInt_(self, n);
}


#line 3465
- (void)selectPagesWithJavaUtilList:(id<JavaUtilList>)pagesToKeep {
  ComAowagieTextPdfPdfReader_PageRefs_selectPagesWithJavaUtilList_(self, pagesToKeep);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPRIndirectReference;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPRIndirectReference;", 0x2, 14, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComAowagieTextPdfPdfReader:);
  methods[1].selector = @selector(initWithComAowagieTextPdfPdfReader_PageRefs:withComAowagieTextPdfPdfReader:);
  methods[2].selector = @selector(size);
  methods[3].selector = @selector(readPages);
  methods[4].selector = @selector(getPageNWithInt:);
  methods[5].selector = @selector(getPageNReleaseWithInt:);
  methods[6].selector = @selector(getPageOrigRefWithInt:);
  methods[7].selector = @selector(keepPages);
  methods[8].selector = @selector(releasePageWithInt:);
  methods[9].selector = @selector(resetReleasePage);
  methods[10].selector = @selector(insertPageWithInt:withComAowagieTextPdfPRIndirectReference:);
  methods[11].selector = @selector(pushPageAttributesWithComAowagieTextPdfPdfDictionary:);
  methods[12].selector = @selector(popPageAttributes);
  methods[13].selector = @selector(iteratePagesWithComAowagieTextPdfPRIndirectReference:);
  methods[14].selector = @selector(getSinglePageWithInt:);
  methods[15].selector = @selector(selectPagesWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "reader_", "LComAowagieTextPdfPdfReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "refsp_", "LComAowagieTextPdfIntHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "refsn_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pageInh_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastPageRead_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sizep_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keepPages_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfPdfReader;", "LJavaIoIOException;", "LComAowagieTextPdfPdfReader_PageRefs;LComAowagieTextPdfPdfReader;", "getPageN", "I", "getPageNRelease", "getPageOrigRef", "releasePage", "insertPage", "ILComAowagieTextPdfPRIndirectReference;", "pushPageAttributes", "LComAowagieTextPdfPdfDictionary;", "iteratePages", "LComAowagieTextPdfPRIndirectReference;", "getSinglePage", "selectPages", "LJavaUtilList;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfReader_PageRefs = { "PageRefs", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x8, 16, 7, 0, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfReader_PageRefs;
}

@end


#line 3199
void ComAowagieTextPdfPdfReader_PageRefs_initWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader_PageRefs *self, ComAowagieTextPdfPdfReader *reader) {
  NSObject_init(self);
  self->lastPageRead_ =
#line 3195
  -1;
  
#line 3200
  self->reader_ = reader;
  if (((ComAowagieTextPdfPdfReader *) nil_chk(reader))->partial_) {
    self->refsp_ = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
    ComAowagieTextPdfPdfNumber *npages = (ComAowagieTextPdfPdfNumber *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(reader->rootPages_)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COUNT)]), [ComAowagieTextPdfPdfNumber class]);
    self->sizep_ = [((ComAowagieTextPdfPdfNumber *) nil_chk(npages)) intValue];
  }
  else {
    [self readPages];
  }
}


#line 3199
ComAowagieTextPdfPdfReader_PageRefs *new_ComAowagieTextPdfPdfReader_PageRefs_initWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader *reader) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfReader_PageRefs, initWithComAowagieTextPdfPdfReader_, reader)
}


#line 3199
ComAowagieTextPdfPdfReader_PageRefs *create_ComAowagieTextPdfPdfReader_PageRefs_initWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader *reader) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfReader_PageRefs, initWithComAowagieTextPdfPdfReader_, reader)
}


#line 3211
void ComAowagieTextPdfPdfReader_PageRefs_initWithComAowagieTextPdfPdfReader_PageRefs_withComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader_PageRefs *self, ComAowagieTextPdfPdfReader_PageRefs *other, ComAowagieTextPdfPdfReader *reader) {
  NSObject_init(self);
  self->lastPageRead_ =
#line 3195
  -1;
  
#line 3212
  self->reader_ = reader;
  self->sizep_ = ((ComAowagieTextPdfPdfReader_PageRefs *) nil_chk(other))->sizep_;
  if (other->refsn_ != nil) {
    self->refsn_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(other->refsn_);
    for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(self->refsn_)) size]; ++k) {
      (void) [((JavaUtilArrayList *) nil_chk(self->refsn_)) setWithInt:k withId:ComAowagieTextPdfPdfReader_duplicatePdfObjectWithComAowagieTextPdfPdfObject_withComAowagieTextPdfPdfReader_((ComAowagieTextPdfPdfObject *) cast_chk([self->refsn_ getWithInt:k], [ComAowagieTextPdfPdfObject class]), reader)];
    }
  }
  else {
    
#line 3220
    self->refsp_ = (ComAowagieTextPdfIntHashtable *) cast_chk([((ComAowagieTextPdfIntHashtable *) nil_chk(other->refsp_)) java_clone], [ComAowagieTextPdfIntHashtable class]);
  }
}


#line 3211
ComAowagieTextPdfPdfReader_PageRefs *new_ComAowagieTextPdfPdfReader_PageRefs_initWithComAowagieTextPdfPdfReader_PageRefs_withComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader_PageRefs *other, ComAowagieTextPdfPdfReader *reader) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfReader_PageRefs, initWithComAowagieTextPdfPdfReader_PageRefs_withComAowagieTextPdfPdfReader_, other, reader)
}


#line 3211
ComAowagieTextPdfPdfReader_PageRefs *create_ComAowagieTextPdfPdfReader_PageRefs_initWithComAowagieTextPdfPdfReader_PageRefs_withComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader_PageRefs *other, ComAowagieTextPdfPdfReader *reader) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfReader_PageRefs, initWithComAowagieTextPdfPdfReader_PageRefs_withComAowagieTextPdfPdfReader_, other, reader)
}


#line 3224
jint ComAowagieTextPdfPdfReader_PageRefs_size(ComAowagieTextPdfPdfReader_PageRefs *self) {
  if (self->refsn_ != nil) {
    return [self->refsn_ size];
  }
  else {
    
#line 3228
    return self->sizep_;
  }
}


#line 3311
void ComAowagieTextPdfPdfReader_PageRefs_keepPages(ComAowagieTextPdfPdfReader_PageRefs *self) {
  if (self->refsp_ == nil || self->keepPages_) {
    return;
  }
  self->keepPages_ = true;
  [self->refsp_ clear];
}


#line 3374
void ComAowagieTextPdfPdfReader_PageRefs_pushPageAttributesWithComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfPdfReader_PageRefs *self, ComAowagieTextPdfPdfDictionary *nodePages) {
  ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_init();
  if (![((JavaUtilArrayList *) nil_chk(self->pageInh_)) isEmpty]) {
    [dic putAllWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *) cast_chk([((JavaUtilArrayList *) nil_chk(self->pageInh_)) getWithInt:[self->pageInh_ size] - 1], [ComAowagieTextPdfPdfDictionary class])];
  }
  {
    IOSObjectArray *a__ = JreLoadStatic(ComAowagieTextPdfPdfReader, pageInhCandidates);
    ComAowagieTextPdfPdfName * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ComAowagieTextPdfPdfName * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ComAowagieTextPdfPdfName *pageInhCandidate = *b__++;
      
#line 3380
      ComAowagieTextPdfPdfObject *obj = [((ComAowagieTextPdfPdfDictionary *) nil_chk(nodePages)) getWithComAowagieTextPdfPdfName:pageInhCandidate];
      if (obj != nil) {
        [dic putWithComAowagieTextPdfPdfName:pageInhCandidate withComAowagieTextPdfPdfObject:obj];
      }
    }
  }
  
#line 3385
  [((JavaUtilArrayList *) nil_chk(self->pageInh_)) addWithId:dic];
}


#line 3388
void ComAowagieTextPdfPdfReader_PageRefs_popPageAttributes(ComAowagieTextPdfPdfReader_PageRefs *self) {
  (void) [((JavaUtilArrayList *) nil_chk(self->pageInh_)) removeWithInt:[self->pageInh_ size] - 1];
}

void ComAowagieTextPdfPdfReader_PageRefs_iteratePagesWithComAowagieTextPdfPRIndirectReference_(ComAowagieTextPdfPdfReader_PageRefs *self, ComAowagieTextPdfPRIndirectReference *rpage) {
  ComAowagieTextPdfPdfDictionary *page = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_(rpage), [ComAowagieTextPdfPdfDictionary class]);
  ComAowagieTextPdfPdfArray *kidsPR = [((ComAowagieTextPdfPdfDictionary *) nil_chk(page)) getAsArrayWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, KIDS)];
  if (kidsPR == nil) {
    [page putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TYPE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, PAGE)];
    ComAowagieTextPdfPdfDictionary *dic = (ComAowagieTextPdfPdfDictionary *) cast_chk([((JavaUtilArrayList *) nil_chk(self->pageInh_)) getWithInt:[self->pageInh_ size] - 1], [ComAowagieTextPdfPdfDictionary class]);
    ComAowagieTextPdfPdfName *key;
    for (id __strong element in nil_chk([((ComAowagieTextPdfPdfDictionary *) nil_chk(dic)) getKeys])) {
      key = (ComAowagieTextPdfPdfName *) cast_chk(element, [ComAowagieTextPdfPdfName class]);
      if ([page getWithComAowagieTextPdfPdfName:key] == nil) {
        [page putWithComAowagieTextPdfPdfName:key withComAowagieTextPdfPdfObject:[dic getWithComAowagieTextPdfPdfName:key]];
      }
    }
    if ([page getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, MEDIABOX)] == nil) {
      ComAowagieTextPdfPdfArray *arr = new_ComAowagieTextPdfPdfArray_initWithFloatArray_([IOSFloatArray newArrayWithFloats:(jfloat[]){ 0, 0, [((ComAowagieTextRectangle *) nil_chk(JreLoadStatic(ComAowagieTextPageSize, LETTER))) getRight], [JreLoadStatic(ComAowagieTextPageSize, LETTER) getTop] } count:4]);
      [page putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, MEDIABOX) withComAowagieTextPdfPdfObject:arr];
    }
    [((JavaUtilArrayList *) nil_chk(self->refsn_)) addWithId:rpage];
  }
  else {
    [page putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TYPE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, PAGES)];
    ComAowagieTextPdfPdfReader_PageRefs_pushPageAttributesWithComAowagieTextPdfPdfDictionary_(self, page);
    for (jint k = 0; k < [kidsPR size]; ++k) {
      ComAowagieTextPdfPdfObject *obj = [kidsPR getPdfObjectWithInt:k];
      if (![((ComAowagieTextPdfPdfObject *) nil_chk(obj)) isIndirect]) {
        while (k < [kidsPR size]) {
          (void) [kidsPR removeWithInt:k];
        }
        break;
      }
      ComAowagieTextPdfPdfReader_PageRefs_iteratePagesWithComAowagieTextPdfPRIndirectReference_(self, (ComAowagieTextPdfPRIndirectReference *) cast_chk(obj, [ComAowagieTextPdfPRIndirectReference class]));
    }
    ComAowagieTextPdfPdfReader_PageRefs_popPageAttributes(self);
  }
}

ComAowagieTextPdfPRIndirectReference *ComAowagieTextPdfPdfReader_PageRefs_getSinglePageWithInt_(ComAowagieTextPdfPdfReader_PageRefs *self, jint n) {
  ComAowagieTextPdfPdfDictionary *acc = new_ComAowagieTextPdfPdfDictionary_init();
  ComAowagieTextPdfPdfDictionary *top = ((ComAowagieTextPdfPdfReader *) nil_chk(self->reader_))->rootPages_;
  jint base = 0;
  while (true) {
    {
      IOSObjectArray *a__ = JreLoadStatic(ComAowagieTextPdfPdfReader, pageInhCandidates);
      ComAowagieTextPdfPdfName * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      ComAowagieTextPdfPdfName * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ComAowagieTextPdfPdfName *pageInhCandidate = *b__++;
        
#line 3434
        ComAowagieTextPdfPdfObject *obj = [((ComAowagieTextPdfPdfDictionary *) nil_chk(top)) getWithComAowagieTextPdfPdfName:pageInhCandidate];
        if (obj != nil) {
          [acc putWithComAowagieTextPdfPdfName:pageInhCandidate withComAowagieTextPdfPdfObject:obj];
        }
      }
    }
    
#line 3439
    ComAowagieTextPdfPdfArray *kids = (ComAowagieTextPdfPdfArray *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(top)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, KIDS)]), [ComAowagieTextPdfPdfArray class]);
    for (id<JavaUtilIterator> it = [((ComAowagieTextPdfPdfArray *) nil_chk(kids)) listIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      ComAowagieTextPdfPRIndirectReference *ref = (ComAowagieTextPdfPRIndirectReference *) cast_chk([it next], [ComAowagieTextPdfPRIndirectReference class]);
      ComAowagieTextPdfPdfDictionary *dic = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_(ref), [ComAowagieTextPdfPdfDictionary class]);
      jint last = self->reader_->lastXrefPartial_;
      ComAowagieTextPdfPdfObject *count = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) nil_chk(dic)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COUNT)]);
      self->reader_->lastXrefPartial_ = last;
      jint acn = 1;
      if (count != nil && [count type] == ComAowagieTextPdfPdfObject_NUMBER) {
        acn = [((ComAowagieTextPdfPdfNumber *) cast_chk(count, [ComAowagieTextPdfPdfNumber class])) intValue];
      }
      if (n < base + acn) {
        if (count == nil) {
          [dic mergeDifferentWithComAowagieTextPdfPdfDictionary:acc];
          return ref;
        }
        ComAowagieTextPdfPdfReader_releaseLastXrefPartial(self->reader_);
        top = dic;
        break;
      }
      ComAowagieTextPdfPdfReader_releaseLastXrefPartial(self->reader_);
      base += acn;
    }
  }
}


#line 3465
void ComAowagieTextPdfPdfReader_PageRefs_selectPagesWithJavaUtilList_(ComAowagieTextPdfPdfReader_PageRefs *self, id<JavaUtilList> pagesToKeep) {
  ComAowagieTextPdfIntHashtable *pg = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
  JavaUtilArrayList *finalPages = new_JavaUtilArrayList_init();
  jint psize = ComAowagieTextPdfPdfReader_PageRefs_size(self);
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(pagesToKeep)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    JavaLangInteger *pi = (JavaLangInteger *) cast_chk([it next], [JavaLangInteger class]);
    jint p = [((JavaLangInteger *) nil_chk(pi)) intValue];
    if (p >= 1 && p <= psize && [pg putWithInt:p withInt:1] == 0) {
      [finalPages addWithId:pi];
    }
  }
  if (((ComAowagieTextPdfPdfReader *) nil_chk(self->reader_))->partial_) {
    for (jint k = 1; k <= psize; ++k) {
      (void) [self getPageOrigRefWithInt:k];
      [self resetReleasePage];
    }
  }
  ComAowagieTextPdfPRIndirectReference *parent = (ComAowagieTextPdfPRIndirectReference *) cast_chk([((ComAowagieTextPdfPdfDictionary *) nil_chk(self->reader_->catalog_)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PAGES)], [ComAowagieTextPdfPRIndirectReference class]);
  ComAowagieTextPdfPdfDictionary *topPages = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_(parent), [ComAowagieTextPdfPdfDictionary class]);
  JavaUtilArrayList *newPageRefs = new_JavaUtilArrayList_initWithInt_([finalPages size]);
  ComAowagieTextPdfPdfArray *kids = new_ComAowagieTextPdfPdfArray_init();
  for (jint k = 0; k < [finalPages size]; ++k) {
    jint p = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([finalPages getWithInt:k], [JavaLangInteger class])))) intValue];
    ComAowagieTextPdfPRIndirectReference *pref = [self getPageOrigRefWithInt:p];
    [self resetReleasePage];
    [kids addWithComAowagieTextPdfPdfObject:pref];
    [newPageRefs addWithId:pref];
    [((ComAowagieTextPdfPdfDictionary *) nil_chk([self getPageNWithInt:p])) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PARENT) withComAowagieTextPdfPdfObject:parent];
  }
  ComAowagieTextPdfAcroFields *af = [self->reader_ getAcroFields];
  jboolean removeFields = [((JavaUtilHashMap *) nil_chk([((ComAowagieTextPdfAcroFields *) nil_chk(af)) getFields])) size] > 0;
  for (jint k = 1; k <= psize; ++k) {
    if (![pg containsKeyWithInt:k]) {
      if (removeFields) {
        [af removeFieldsFromPageWithInt:k];
      }
      ComAowagieTextPdfPRIndirectReference *pref = [self getPageOrigRefWithInt:k];
      jint nref = [((ComAowagieTextPdfPRIndirectReference *) nil_chk(pref)) getNumber];
      (void) [((JavaUtilArrayList *) nil_chk(self->reader_->xrefObj_)) setWithInt:nref withId:nil];
      if (self->reader_->partial_) {
        *IOSIntArray_GetRef(nil_chk(self->reader_->xref_), nref * 2) = -1;
        *IOSIntArray_GetRef(self->reader_->xref_, nref * 2 + 1) = 0;
      }
    }
  }
  [((ComAowagieTextPdfPdfDictionary *) nil_chk(topPages)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COUNT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_([finalPages size])];
  [topPages putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, KIDS) withComAowagieTextPdfPdfObject:kids];
  self->refsp_ = nil;
  self->refsn_ = newPageRefs;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfReader_PageRefs)
