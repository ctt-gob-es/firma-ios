//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfPRow.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/DocumentException.h"
#include "com/aowagie/text/Element.h"
#include "com/aowagie/text/ExceptionConverter.h"
#include "com/aowagie/text/Image.h"
#include "com/aowagie/text/Rectangle.h"
#include "com/aowagie/text/pdf/ByteBuffer.h"
#include "com/aowagie/text/pdf/ColumnText.h"
#include "com/aowagie/text/pdf/PdfContentByte.h"
#include "com/aowagie/text/pdf/PdfPCell.h"
#include "com/aowagie/text/pdf/PdfPCellEvent.h"
#include "com/aowagie/text/pdf/PdfPRow.h"
#include "com/aowagie/text/pdf/PdfPTable.h"
#include "harmony/java/awt/Color.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/PdfPRow must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfPdfPRow () {
 @public
  IOSObjectArray *cells_;
  IOSFloatArray *widths_;
  /*!
   @brief extra heights that needs to be added to a cell because of rowspans.
   @since 2.1.6
   */
  IOSFloatArray *extraHeights_;
  jfloat maxHeight_;
  jboolean calculated_;
  IOSIntArray *canvasesPos_;
}

/*!
 @brief Calculates the heights of each cell in the row.
 @return the maximum height of the row.
 */
- (jfloat)calculateHeights;

/*!
 @brief Writes the border and background of one cell in the row.
 @param xPos The x-coordinate where the table starts on the canvas
 @param yPos The y-coordinate where the table starts on the canvas
 @param currentMaxHeight The height of the cell to be drawn.
 @param cell Cell
 @param canvases Canvases
 @since 2.1.6	extra parameter currentMaxHeight
 */
- (void)writeBorderAndBackgroundWithFloat:(jfloat)xPos
                                withFloat:(jfloat)yPos
                                withFloat:(jfloat)currentMaxHeight
            withComAowagieTextPdfPdfPCell:(ComAowagieTextPdfPdfPCell *)cell
 withComAowagieTextPdfPdfContentByteArray:(IOSObjectArray *)canvases;

/*!
 @param canvases Canvases
 @param a a
 @param b b
 @param c c
 @param d d
 @param e e
 @param f f
 @since 2.1.6 private is now protected
 */
- (void)saveAndRotateCanvasesWithComAowagieTextPdfPdfContentByteArray:(IOSObjectArray *)canvases
                                                            withFloat:(jfloat)a
                                                            withFloat:(jfloat)b
                                                            withFloat:(jfloat)c
                                                            withFloat:(jfloat)d
                                                            withFloat:(jfloat)e
                                                            withFloat:(jfloat)f;

/*!
 @param canvases Canvases
 @since 2.1.6 private is now protected
 */
- (void)restoreCanvasesWithComAowagieTextPdfPdfContentByteArray:(IOSObjectArray *)canvases;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfPRow, cells_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfPRow, widths_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfPRow, extraHeights_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfPRow, canvasesPos_, IOSIntArray *)

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfPRow_calculateHeights(ComAowagieTextPdfPdfPRow *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfPRow_writeBorderAndBackgroundWithFloat_withFloat_withFloat_withComAowagieTextPdfPdfPCell_withComAowagieTextPdfPdfContentByteArray_(ComAowagieTextPdfPdfPRow *self, jfloat xPos, jfloat yPos, jfloat currentMaxHeight, ComAowagieTextPdfPdfPCell *cell, IOSObjectArray *canvases);

__attribute__((unused)) static void ComAowagieTextPdfPdfPRow_saveAndRotateCanvasesWithComAowagieTextPdfPdfContentByteArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(ComAowagieTextPdfPdfPRow *self, IOSObjectArray *canvases, jfloat a, jfloat b, jfloat c, jfloat d, jfloat e, jfloat f);

__attribute__((unused)) static void ComAowagieTextPdfPdfPRow_restoreCanvasesWithComAowagieTextPdfPdfContentByteArray_(ComAowagieTextPdfPdfPRow *self, IOSObjectArray *canvases);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfPRow.java"


#line 65
@implementation ComAowagieTextPdfPdfPRow


#line 97
- (instancetype)initPackagePrivateWithComAowagieTextPdfPdfPCellArray:(IOSObjectArray *)cells {
  ComAowagieTextPdfPdfPRow_initPackagePrivateWithComAowagieTextPdfPdfPCellArray_(self, cells);
  return self;
}


#line 108
- (instancetype)initPackagePrivateWithComAowagieTextPdfPdfPRow:(ComAowagieTextPdfPdfPRow *)row {
  ComAowagieTextPdfPdfPRow_initPackagePrivateWithComAowagieTextPdfPdfPRow_(self, row);
  return self;
}


#line 128
- (jboolean)setWidthsWithFloatArray:(IOSFloatArray *)widths {
  if (((IOSFloatArray *) nil_chk(widths))->size_ != ((IOSObjectArray *) nil_chk(self->cells_))->size_) {
    return false;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(widths, 0, self->widths_, 0, self->cells_->size_);
  jfloat total = 0;
  self->calculated_ = false;
  for (jint k = 0; k < widths->size_; ++k) {
    ComAowagieTextPdfPdfPCell *cell = IOSObjectArray_Get(self->cells_, k);
    
#line 138
    if (cell == nil) {
      JrePlusAssignFloatF(&total, IOSFloatArray_Get(widths, k));
      continue;
    }
    
#line 143
    [cell setLeftWithFloat:total];
    jint last = k + [cell getColspan];
    for (; k < last; ++k) {
      JrePlusAssignFloatF(&total, IOSFloatArray_Get(widths, k));
    }
    --k;
    [cell setRightWithFloat:total];
    [cell setTopWithFloat:0];
  }
  return true;
}


#line 159
- (void)initExtraHeights {
  self->extraHeights_ = [IOSFloatArray newArrayWithLength:((IOSObjectArray *) nil_chk(self->cells_))->size_];
  for (jint i = 0; i < self->extraHeights_->size_; i++) {
    *IOSFloatArray_GetRef(self->extraHeights_, i) = 0;
  }
}


#line 172
- (void)setExtraHeightWithInt:(jint)cell
                    withFloat:(jfloat)height {
  
#line 173
  if (cell < 0 || cell >= ((IOSObjectArray *) nil_chk(self->cells_))->size_) {
    return;
  }
  *IOSFloatArray_GetRef(nil_chk(self->extraHeights_), cell) = height;
}


#line 184
- (jfloat)calculateHeights {
  return ComAowagieTextPdfPdfPRow_calculateHeights(self);
}


#line 212
- (void)writeBorderAndBackgroundWithFloat:(jfloat)xPos
                                withFloat:(jfloat)yPos
                                withFloat:(jfloat)currentMaxHeight
            withComAowagieTextPdfPdfPCell:(ComAowagieTextPdfPdfPCell *)cell
 withComAowagieTextPdfPdfContentByteArray:(IOSObjectArray *)canvases {
  ComAowagieTextPdfPdfPRow_writeBorderAndBackgroundWithFloat_withFloat_withFloat_withComAowagieTextPdfPdfPCell_withComAowagieTextPdfPdfContentByteArray_(self, xPos, yPos, currentMaxHeight, cell, canvases);
}


#line 249
- (void)saveAndRotateCanvasesWithComAowagieTextPdfPdfContentByteArray:(IOSObjectArray *)canvases
                                                            withFloat:(jfloat)a
                                                            withFloat:(jfloat)b
                                                            withFloat:(jfloat)c
                                                            withFloat:(jfloat)d
                                                            withFloat:(jfloat)e
                                                            withFloat:(jfloat)f {
  ComAowagieTextPdfPdfPRow_saveAndRotateCanvasesWithComAowagieTextPdfPdfContentByteArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(self, canvases, a, b, c, d, e, f);
}


#line 267
- (void)restoreCanvasesWithComAowagieTextPdfPdfContentByteArray:(IOSObjectArray *)canvases {
  ComAowagieTextPdfPdfPRow_restoreCanvasesWithComAowagieTextPdfPdfContentByteArray_(self, canvases);
}


#line 288
+ (jfloat)setColumnWithComAowagieTextPdfColumnText:(ComAowagieTextPdfColumnText *)ct
                                         withFloat:(jfloat)left
                                         withFloat:(jfloat)bottom
                                         withFloat:(jfloat)right
                                         withFloat:(jfloat)top {
  return ComAowagieTextPdfPdfPRow_setColumnWithComAowagieTextPdfColumnText_withFloat_withFloat_withFloat_withFloat_(ct, left, bottom, right, top);
}


#line 311
- (void)writeCellsWithInt:(jint)colStart
                  withInt:(jint)colEnd
                withFloat:(jfloat)xPos
                withFloat:(jfloat)yPos
withComAowagieTextPdfPdfContentByteArray:(IOSObjectArray *)canvases {
  
#line 312
  if (!self->calculated_) {
    ComAowagieTextPdfPdfPRow_calculateHeights(self);
  }
  if (colEnd < 0) {
    colEnd = ((IOSObjectArray *) nil_chk(self->cells_))->size_;
  }
  else {
    
#line 318
    colEnd = JavaLangMath_minWithInt_withInt_(colEnd, ((IOSObjectArray *) nil_chk(self->cells_))->size_);
  }
  if (colStart < 0) {
    colStart = 0;
  }
  if (colStart >= colEnd) {
    return;
  }
  
#line 327
  jint newStart;
  for (newStart = colStart; newStart >= 0; --newStart) {
    if (IOSObjectArray_Get(self->cells_, newStart) != nil) {
      break;
    }
    if (newStart > 0) {
      JreMinusAssignFloatF(&xPos, IOSFloatArray_Get(nil_chk(self->widths_), newStart - 1));
    }
  }
  
#line 337
  if (newStart < 0) {
    newStart = 0;
  }
  if (IOSObjectArray_Get(self->cells_, newStart) != nil) {
    JreMinusAssignFloatF(&xPos, [((ComAowagieTextPdfPdfPCell *) nil_chk(IOSObjectArray_Get(self->cells_, newStart))) getLeft]);
  }
  
#line 344
  for (jint k = newStart; k < colEnd; ++k) {
    ComAowagieTextPdfPdfPCell *cell = IOSObjectArray_Get(self->cells_, k);
    if (cell == nil) {
      continue;
    }
    jfloat currentMaxHeight = self->maxHeight_ + IOSFloatArray_Get(nil_chk(self->extraHeights_), k);
    
#line 351
    ComAowagieTextPdfPdfPRow_writeBorderAndBackgroundWithFloat_withFloat_withFloat_withComAowagieTextPdfPdfPCell_withComAowagieTextPdfPdfContentByteArray_(self, xPos, yPos, currentMaxHeight, cell, canvases);
    
#line 353
    ComAowagieTextImage *img = [cell getImage];
    
#line 355
    jfloat tly = [cell getTop] + yPos - [cell getEffectivePaddingTop];
    if ([cell getHeight] <= currentMaxHeight) {
      switch ([cell getVerticalAlignment]) {
        case ComAowagieTextElement_ALIGN_BOTTOM:
        tly = [cell getTop] + yPos - currentMaxHeight + [cell getHeight] -
#line 360
        [cell getEffectivePaddingTop];
        break;
        case ComAowagieTextElement_ALIGN_MIDDLE:
        tly = [cell getTop] + yPos + ([cell getHeight] - currentMaxHeight) / 2 -
#line 364
        [cell getEffectivePaddingTop];
        break;
        default:
        break;
      }
    }
    if (img != nil) {
      if ([cell getRotation] != 0) {
        img = ComAowagieTextImage_getInstanceWithComAowagieTextImage_(img);
        [((ComAowagieTextImage *) nil_chk(img)) setRotationWithFloat:[img getImageRotation] + (jfloat) ([cell getRotation] * JavaLangMath_PI / 180.0)];
      }
      jboolean vf = false;
      if ([cell getHeight] > currentMaxHeight) {
        [img scalePercentWithFloat:100];
        jfloat scale_ = (currentMaxHeight - [cell getEffectivePaddingTop] - [cell getEffectivePaddingBottom]) /
#line 380
        [img getScaledHeight];
        [img scalePercentWithFloat:scale_ * 100];
        vf = true;
      }
      jfloat left = [cell getLeft] + xPos +
#line 385
      [cell getEffectivePaddingLeft];
      if (vf) {
        switch ([cell getHorizontalAlignment]) {
          case ComAowagieTextElement_ALIGN_CENTER:
          left = xPos +
#line 390
          ([cell getLeft] + [cell getEffectivePaddingLeft] +
#line 391
          [cell getRight] -
#line 392
          [cell getEffectivePaddingRight] - [img getScaledWidth]) /
#line 393
          2;
          break;
          case ComAowagieTextElement_ALIGN_RIGHT:
          left = xPos + [cell getRight] -
#line 397
          [cell getEffectivePaddingRight] -
#line 398
          [img getScaledWidth];
          break;
          default:
          break;
        }
        tly = [cell getTop] + yPos - [cell getEffectivePaddingTop];
      }
      [img setAbsolutePositionWithFloat:left withFloat:tly - [img getScaledHeight]];
      @try {
        [((ComAowagieTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(nil_chk(canvases), ComAowagieTextPdfPdfPTable_TEXTCANVAS))) addImageWithComAowagieTextImage:img];
      }
      @catch (
#line 408
      ComAowagieTextDocumentException *e) {
        @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
      }
    }
    else {
      if ([cell getRotation] == 90 || [cell getRotation] == 270) {
        jfloat netWidth = currentMaxHeight - [cell getEffectivePaddingTop] - [cell getEffectivePaddingBottom];
        jfloat netHeight = [cell getWidth] - [cell getEffectivePaddingLeft] - [cell getEffectivePaddingRight];
        ComAowagieTextPdfColumnText *ct = ComAowagieTextPdfColumnText_duplicateWithComAowagieTextPdfColumnText_([cell getColumn]);
        [((ComAowagieTextPdfColumnText *) nil_chk(ct)) setCanvasesWithComAowagieTextPdfPdfContentByteArray:canvases];
        [ct setSimpleColumnWithFloat:0 withFloat:0 withFloat:netWidth + 0.001f withFloat:-netHeight];
        @try {
          [ct goWithBoolean:true];
        }
        @catch (
#line 421
        ComAowagieTextDocumentException *e) {
          @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
        }
        jfloat calcHeight = -[ct getYLine];
        if (netWidth <= 0 || netHeight <= 0) {
          calcHeight = 0;
        }
        if (calcHeight > 0) {
          if ([cell isUseDescender]) {
            JreMinusAssignFloatF(&calcHeight, [ct getDescender]);
          }
          ct = ComAowagieTextPdfColumnText_duplicateWithComAowagieTextPdfColumnText_([cell getColumn]);
          [((ComAowagieTextPdfColumnText *) nil_chk(ct)) setCanvasesWithComAowagieTextPdfPdfContentByteArray:canvases];
          [ct setSimpleColumnWithFloat:-0.003f withFloat:-0.001f withFloat:netWidth + 0.003f withFloat:calcHeight];
          jfloat pivotX;
          jfloat pivotY;
          if ([cell getRotation] == 90) {
            pivotY = [cell getTop] + yPos - currentMaxHeight + [cell getEffectivePaddingBottom];
            switch ([cell getVerticalAlignment]) {
              case ComAowagieTextElement_ALIGN_BOTTOM:
              pivotX = [cell getLeft] + xPos + [cell getWidth] - [cell getEffectivePaddingRight];
              break;
              case ComAowagieTextElement_ALIGN_MIDDLE:
              pivotX = [cell getLeft] + xPos + ([cell getWidth] + [cell getEffectivePaddingLeft] - [cell getEffectivePaddingRight] + calcHeight) / 2;
              break;
              default:
              pivotX = [cell getLeft] + xPos + [cell getEffectivePaddingLeft] + calcHeight;
              break;
            }
            ComAowagieTextPdfPdfPRow_saveAndRotateCanvasesWithComAowagieTextPdfPdfContentByteArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(self, canvases, 0, 1, -1, 0, pivotX, pivotY);
          }
          else {
            pivotY = [cell getTop] + yPos - [cell getEffectivePaddingTop];
            switch ([cell getVerticalAlignment]) {
              case ComAowagieTextElement_ALIGN_BOTTOM:
              pivotX = [cell getLeft] + xPos + [cell getEffectivePaddingLeft];
              break;
              case ComAowagieTextElement_ALIGN_MIDDLE:
              pivotX = [cell getLeft] + xPos + ([cell getWidth] + [cell getEffectivePaddingLeft] - [cell getEffectivePaddingRight] - calcHeight) / 2;
              break;
              default:
              pivotX = [cell getLeft] + xPos + [cell getWidth] - [cell getEffectivePaddingRight] - calcHeight;
              break;
            }
            ComAowagieTextPdfPdfPRow_saveAndRotateCanvasesWithComAowagieTextPdfPdfContentByteArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(self, canvases, 0, -1, 1, 0, pivotX, pivotY);
          }
          @try {
            [ct go];
          }
          @catch (
#line 469
          ComAowagieTextDocumentException *e) {
            @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
          }
          @finally {
            
#line 472
            ComAowagieTextPdfPdfPRow_restoreCanvasesWithComAowagieTextPdfPdfContentByteArray_(self, canvases);
          }
        }
      }
      else {
        jfloat fixedHeight = [cell getFixedHeight];
        jfloat rightLimit = [cell getRight] + xPos -
#line 479
        [cell getEffectivePaddingRight];
        jfloat leftLimit = [cell getLeft] + xPos +
#line 481
        [cell getEffectivePaddingLeft];
        if ([cell isNoWrap]) {
          switch ([cell getHorizontalAlignment]) {
            case ComAowagieTextElement_ALIGN_CENTER:
            JrePlusAssignFloatF(&rightLimit, 10000);
            JreMinusAssignFloatF(&leftLimit, 10000);
            break;
            case ComAowagieTextElement_ALIGN_RIGHT:
            if ([cell getRotation] == 180) {
              JrePlusAssignFloatF(&rightLimit, ComAowagieTextPdfPdfPRow_RIGHT_LIMIT);
            }
            else {
              JreMinusAssignFloatF(&leftLimit, ComAowagieTextPdfPdfPRow_RIGHT_LIMIT);
            }
            break;
            default:
            if ([cell getRotation] == 180) {
              JreMinusAssignFloatF(&leftLimit, ComAowagieTextPdfPdfPRow_RIGHT_LIMIT);
            }
            else {
              JrePlusAssignFloatF(&rightLimit, ComAowagieTextPdfPdfPRow_RIGHT_LIMIT);
            }
            break;
          }
        }
        ComAowagieTextPdfColumnText *ct = ComAowagieTextPdfColumnText_duplicateWithComAowagieTextPdfColumnText_([cell getColumn]);
        [((ComAowagieTextPdfColumnText *) nil_chk(ct)) setCanvasesWithComAowagieTextPdfPdfContentByteArray:canvases];
        jfloat bry = tly -
#line 509
        (currentMaxHeight -
#line 510
        [cell getEffectivePaddingTop] - [cell getEffectivePaddingBottom]);
        if (fixedHeight > 0) {
          if ([cell getHeight] > currentMaxHeight) {
            tly = [cell getTop] + yPos - [cell getEffectivePaddingTop];
            bry = [cell getTop] + yPos - currentMaxHeight + [cell getEffectivePaddingBottom];
          }
        }
        if ((tly > bry || [ct zeroHeightElement]) && leftLimit < rightLimit) {
          [ct setSimpleColumnWithFloat:leftLimit withFloat:bry - 0.001f withFloat:rightLimit withFloat:tly];
          if ([cell getRotation] == 180) {
            jfloat shx = leftLimit + rightLimit;
            jfloat shy = yPos + yPos - currentMaxHeight + [cell getEffectivePaddingBottom] - [cell getEffectivePaddingTop];
            ComAowagieTextPdfPdfPRow_saveAndRotateCanvasesWithComAowagieTextPdfPdfContentByteArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(self, canvases, -1, 0, 0, -1, shx, shy);
          }
          @try {
            [ct go];
          }
          @catch (
#line 526
          ComAowagieTextDocumentException *e) {
            @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
          }
          @finally {
            
#line 529
            if ([cell getRotation] == 180) {
              ComAowagieTextPdfPdfPRow_restoreCanvasesWithComAowagieTextPdfPdfContentByteArray_(self, canvases);
            }
          }
        }
      }
    }
    id<ComAowagieTextPdfPdfPCellEvent> evt = [cell getCellEvent];
    if (evt != nil) {
      ComAowagieTextRectangle *rect = new_ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_([cell getLeft] + xPos, [cell getTop] +
#line 539
      yPos - currentMaxHeight, [cell getRight] + xPos, [cell getTop] +
#line 540
      yPos);
      [evt cellLayoutWithComAowagieTextPdfPdfPCell:cell withComAowagieTextRectangle:rect withComAowagieTextPdfPdfContentByteArray:canvases];
    }
  }
}


#line 551
- (jboolean)isCalculated {
  return self->calculated_;
}


#line 560
- (jfloat)getMaxHeights {
  if (self->calculated_) {
    return self->maxHeight_;
  }
  return ComAowagieTextPdfPdfPRow_calculateHeights(self);
}


#line 573
- (void)setMaxHeightsWithFloat:(jfloat)maxHeight {
  self->maxHeight_ = maxHeight;
}


#line 579
- (IOSFloatArray *)getEventWidthWithFloat:(jfloat)xPos {
  jint n = 0;
  {
    IOSObjectArray *a__ =
#line 581
    self->cells_;
    ComAowagieTextPdfPdfPCell * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ComAowagieTextPdfPdfPCell * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ComAowagieTextPdfPdfPCell *cell = *b__++;
      
#line 582
      if (cell != nil) {
        ++n;
      }
    }
  }
  
#line 586
  IOSFloatArray *width = [IOSFloatArray newArrayWithLength:n + 1];
  n = 0;
  *IOSFloatArray_GetRef(width, n++) = xPos;
  {
    IOSObjectArray *a__ =
#line 589
    self->cells_;
    ComAowagieTextPdfPdfPCell * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ComAowagieTextPdfPdfPCell * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ComAowagieTextPdfPdfPCell *cell = *b__++;
      
#line 590
      if (cell != nil) {
        *IOSFloatArray_GetRef(width, n) = IOSFloatArray_Get(width, n - 1) + [cell getWidth];
        ++n;
      }
    }
  }
  
#line 595
  return width;
}


#line 608
- (ComAowagieTextPdfPdfPRow *)splitRowWithComAowagieTextPdfPdfPTable:(ComAowagieTextPdfPdfPTable *)table
                                                             withInt:(jint)rowIndex
                                                           withFloat:(jfloat)new_height {
  
#line 609
  IOSObjectArray *newCells = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(self->cells_))->size_ type:ComAowagieTextPdfPdfPCell_class_()];
  IOSFloatArray *fixHs = [IOSFloatArray newArrayWithLength:self->cells_->size_];
  IOSFloatArray *minHs = [IOSFloatArray newArrayWithLength:self->cells_->size_];
  jboolean allEmpty = true;
  for (jint k = 0; k < self->cells_->size_; ++k) {
    jfloat newHeight = new_height;
    ComAowagieTextPdfPdfPCell *cell = IOSObjectArray_Get(self->cells_, k);
    if (cell == nil) {
      jint index = rowIndex;
      if ([((ComAowagieTextPdfPdfPTable *) nil_chk(table)) rowSpanAboveWithInt:index withInt:k]) {
        JrePlusAssignFloatF(&newHeight, [table getRowHeightWithInt:index]);
        while ([table rowSpanAboveWithInt:--index withInt:k]) {
          JrePlusAssignFloatF(&newHeight, [table getRowHeightWithInt:index]);
        }
        ComAowagieTextPdfPdfPRow *row = [table getRowWithInt:index];
        if (row != nil && IOSObjectArray_Get(nil_chk([row getCells]), k) != nil) {
          (void) IOSObjectArray_SetAndConsume(newCells, k, new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPCell_(IOSObjectArray_Get(nil_chk([row getCells]), k)));
          [((ComAowagieTextPdfPdfPCell *) nil_chk(IOSObjectArray_Get(newCells, k))) consumeHeightWithFloat:newHeight];
          [((ComAowagieTextPdfPdfPCell *) nil_chk(IOSObjectArray_Get(newCells, k))) setRowspanWithInt:[((ComAowagieTextPdfPdfPCell *) nil_chk(IOSObjectArray_Get(nil_chk([row getCells]), k))) getRowspan] - rowIndex + index];
          allEmpty = false;
        }
      }
      continue;
    }
    *IOSFloatArray_GetRef(fixHs, k) = [cell getFixedHeight];
    *IOSFloatArray_GetRef(minHs, k) = [cell getMinimumHeight];
    ComAowagieTextImage *img = [cell getImage];
    ComAowagieTextPdfPdfPCell *newCell = new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPCell_(cell);
    if (img != nil) {
      if (newHeight > [cell getEffectivePaddingBottom] + [cell getEffectivePaddingTop] + 2) {
        [newCell setPhraseWithComAowagieTextPhrase:nil];
        allEmpty = false;
      }
    }
    else {
      jfloat y;
      ComAowagieTextPdfColumnText *ct = ComAowagieTextPdfColumnText_duplicateWithComAowagieTextPdfColumnText_([cell getColumn]);
      jfloat left = [cell getLeft] + [cell getEffectivePaddingLeft];
      jfloat bottom = [cell getTop] + [cell getEffectivePaddingBottom] - newHeight;
      jfloat right = [cell getRight] - [cell getEffectivePaddingRight];
      jfloat top = [cell getTop] - [cell getEffectivePaddingTop];
      switch ([cell getRotation]) {
        case 90:
        case 270:
        y = ComAowagieTextPdfPdfPRow_setColumnWithComAowagieTextPdfColumnText_withFloat_withFloat_withFloat_withFloat_(ct, bottom, left, top, right);
        break;
        default:
        y = ComAowagieTextPdfPdfPRow_setColumnWithComAowagieTextPdfColumnText_withFloat_withFloat_withFloat_withFloat_(ct, left, bottom, [cell isNoWrap] ? ComAowagieTextPdfPdfPRow_RIGHT_LIMIT : right, top);
        break;
      }
      jint status;
      @try {
        status = [((ComAowagieTextPdfColumnText *) nil_chk(ct)) goWithBoolean:true];
      }
      @catch (ComAowagieTextDocumentException *e) {
        @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
      }
      jboolean thisEmpty = [ct getYLine] == y;
      if (thisEmpty) {
        [newCell setColumnWithComAowagieTextPdfColumnText:ComAowagieTextPdfColumnText_duplicateWithComAowagieTextPdfColumnText_([cell getColumn])];
        [ct setFilledWidthWithFloat:0];
      }
      else if ((status & ComAowagieTextPdfColumnText_NO_MORE_TEXT) == 0) {
        [newCell setColumnWithComAowagieTextPdfColumnText:ct];
        [ct setFilledWidthWithFloat:0];
      }
      else {
        
#line 675
        [newCell setPhraseWithComAowagieTextPhrase:nil];
      }
      allEmpty = (allEmpty && thisEmpty);
    }
    (void) IOSObjectArray_Set(newCells, k, newCell);
    [cell setFixedHeightWithFloat:newHeight];
  }
  if (allEmpty) {
    for (jint k = 0; k < self->cells_->size_; ++k) {
      ComAowagieTextPdfPdfPCell *cell = IOSObjectArray_Get(self->cells_, k);
      if (cell == nil) {
        continue;
      }
      if (IOSFloatArray_Get(fixHs, k) > 0) {
        [cell setFixedHeightWithFloat:IOSFloatArray_Get(fixHs, k)];
      }
      else {
        
#line 691
        [cell setMinimumHeightWithFloat:IOSFloatArray_Get(minHs, k)];
      }
    }
    return nil;
  }
  ComAowagieTextPdfPdfPRow_calculateHeights(self);
  ComAowagieTextPdfPdfPRow *split = new_ComAowagieTextPdfPdfPRow_initPackagePrivateWithComAowagieTextPdfPdfPCellArray_(newCells);
  split->widths_ = [((IOSFloatArray *) nil_chk(self->widths_)) java_clone];
  ComAowagieTextPdfPdfPRow_calculateHeights(split);
  return split;
}


#line 711
- (IOSObjectArray *)getCells {
  return self->cells_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "F", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "[F", 0x0, 18, 17, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfPRow;", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "[LComAowagieTextPdfPdfPCell;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithComAowagieTextPdfPdfPCellArray:);
  methods[1].selector = @selector(initPackagePrivateWithComAowagieTextPdfPdfPRow:);
  methods[2].selector = @selector(setWidthsWithFloatArray:);
  methods[3].selector = @selector(initExtraHeights);
  methods[4].selector = @selector(setExtraHeightWithInt:withFloat:);
  methods[5].selector = @selector(calculateHeights);
  methods[6].selector = @selector(writeBorderAndBackgroundWithFloat:withFloat:withFloat:withComAowagieTextPdfPdfPCell:withComAowagieTextPdfPdfContentByteArray:);
  methods[7].selector = @selector(saveAndRotateCanvasesWithComAowagieTextPdfPdfContentByteArray:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:);
  methods[8].selector = @selector(restoreCanvasesWithComAowagieTextPdfPdfContentByteArray:);
  methods[9].selector = @selector(setColumnWithComAowagieTextPdfColumnText:withFloat:withFloat:withFloat:withFloat:);
  methods[10].selector = @selector(writeCellsWithInt:withInt:withFloat:withFloat:withComAowagieTextPdfPdfContentByteArray:);
  methods[11].selector = @selector(isCalculated);
  methods[12].selector = @selector(getMaxHeights);
  methods[13].selector = @selector(setMaxHeightsWithFloat:);
  methods[14].selector = @selector(getEventWidthWithFloat:);
  methods[15].selector = @selector(splitRowWithComAowagieTextPdfPdfPTable:withInt:withFloat:);
  methods[16].selector = @selector(getCells);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BOTTOM_LIMIT", "F", .constantValue.asFloat = ComAowagieTextPdfPdfPRow_BOTTOM_LIMIT, 0x18, -1, -1, -1, -1 },
    { "RIGHT_LIMIT", "F", .constantValue.asFloat = ComAowagieTextPdfPdfPRow_RIGHT_LIMIT, 0x18, -1, -1, -1, -1 },
    { "cells_", "[LComAowagieTextPdfPdfPCell;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "widths_", "[F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extraHeights_", "[F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxHeight_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "calculated_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "canvasesPos_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LComAowagieTextPdfPdfPCell;", "LComAowagieTextPdfPdfPRow;", "setWidths", "[F", "setExtraHeight", "IF", "writeBorderAndBackground", "FFFLComAowagieTextPdfPdfPCell;[LComAowagieTextPdfPdfContentByte;", "saveAndRotateCanvases", "[LComAowagieTextPdfPdfContentByte;FFFFFF", "restoreCanvases", "[LComAowagieTextPdfPdfContentByte;", "setColumn", "LComAowagieTextPdfColumnText;FFFF", "writeCells", "IIFF[LComAowagieTextPdfPdfContentByte;", "setMaxHeights", "F", "getEventWidth", "splitRow", "LComAowagieTextPdfPdfPTable;IF" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfPRow = { "PdfPRow", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 17, 8, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfPRow;
}

@end


#line 97
void ComAowagieTextPdfPdfPRow_initPackagePrivateWithComAowagieTextPdfPdfPCellArray_(ComAowagieTextPdfPdfPRow *self, IOSObjectArray *cells) {
  NSObject_init(self);
  self->maxHeight_ =
#line 85
  0;
  self->calculated_ =
#line 87
  false;
  
#line 98
  self->cells_ = cells;
  self->widths_ = [IOSFloatArray newArrayWithLength:((IOSObjectArray *) nil_chk(cells))->size_];
  [self initExtraHeights];
}


#line 97
ComAowagieTextPdfPdfPRow *new_ComAowagieTextPdfPdfPRow_initPackagePrivateWithComAowagieTextPdfPdfPCellArray_(IOSObjectArray *cells) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfPRow, initPackagePrivateWithComAowagieTextPdfPdfPCellArray_, cells)
}


#line 97
ComAowagieTextPdfPdfPRow *create_ComAowagieTextPdfPdfPRow_initPackagePrivateWithComAowagieTextPdfPdfPCellArray_(IOSObjectArray *cells) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfPRow, initPackagePrivateWithComAowagieTextPdfPdfPCellArray_, cells)
}


#line 108
void ComAowagieTextPdfPdfPRow_initPackagePrivateWithComAowagieTextPdfPdfPRow_(ComAowagieTextPdfPdfPRow *self, ComAowagieTextPdfPdfPRow *row) {
  NSObject_init(self);
  self->maxHeight_ =
#line 85
  0;
  self->calculated_ =
#line 87
  false;
  
#line 109
  self->maxHeight_ = ((ComAowagieTextPdfPdfPRow *) nil_chk(row))->maxHeight_;
  self->calculated_ = row->calculated_;
  self->cells_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(row->cells_))->size_ type:ComAowagieTextPdfPdfPCell_class_()];
  for (jint k = 0; k < self->cells_->size_; ++k) {
    if (IOSObjectArray_Get(row->cells_, k) != nil) {
      (void) IOSObjectArray_SetAndConsume(self->cells_, k, new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPCell_(IOSObjectArray_Get(row->cells_, k)));
    }
  }
  self->widths_ = [IOSFloatArray newArrayWithLength:self->cells_->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(row->widths_, 0, self->widths_, 0, self->cells_->size_);
  [self initExtraHeights];
}


#line 108
ComAowagieTextPdfPdfPRow *new_ComAowagieTextPdfPdfPRow_initPackagePrivateWithComAowagieTextPdfPdfPRow_(ComAowagieTextPdfPdfPRow *row) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfPRow, initPackagePrivateWithComAowagieTextPdfPdfPRow_, row)
}


#line 108
ComAowagieTextPdfPdfPRow *create_ComAowagieTextPdfPdfPRow_initPackagePrivateWithComAowagieTextPdfPdfPRow_(ComAowagieTextPdfPdfPRow *row) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfPRow, initPackagePrivateWithComAowagieTextPdfPdfPRow_, row)
}


#line 184
jfloat ComAowagieTextPdfPdfPRow_calculateHeights(ComAowagieTextPdfPdfPRow *self) {
  self->maxHeight_ = 0;
  {
    IOSObjectArray *a__ =
#line 186
    self->cells_;
    ComAowagieTextPdfPdfPCell * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ComAowagieTextPdfPdfPCell * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ComAowagieTextPdfPdfPCell *cell = *b__++;
      
#line 187
      jfloat height = 0;
      if (cell == nil) {
        continue;
      }
      else {
        height = [cell getMaxHeight];
        if (height > self->maxHeight_ && [cell getRowspan] == 1) {
          self->maxHeight_ = height;
        }
      }
    }
  }
  
#line 198
  self->calculated_ = true;
  return self->maxHeight_;
}


#line 212
void ComAowagieTextPdfPdfPRow_writeBorderAndBackgroundWithFloat_withFloat_withFloat_withComAowagieTextPdfPdfPCell_withComAowagieTextPdfPdfContentByteArray_(ComAowagieTextPdfPdfPRow *self, jfloat xPos, jfloat yPos, jfloat currentMaxHeight, ComAowagieTextPdfPdfPCell *cell, IOSObjectArray *canvases) {
  HarmonyJavaAwtColor *background = [((ComAowagieTextPdfPdfPCell *) nil_chk(cell)) getBackgroundColor];
  if (background != nil || [cell hasBorders]) {
    
#line 216
    jfloat right = [cell getRight] + xPos;
    jfloat top = [cell getTop] + yPos;
    jfloat left = [cell getLeft] + xPos;
    jfloat bottom = top - currentMaxHeight;
    
#line 221
    if (background != nil) {
      ComAowagieTextPdfPdfContentByte *backgr = IOSObjectArray_Get(nil_chk(canvases), ComAowagieTextPdfPdfPTable_BACKGROUNDCANVAS);
      [((ComAowagieTextPdfPdfContentByte *) nil_chk(backgr)) setColorFillWithHarmonyJavaAwtColor:background];
      [backgr rectangleWithFloat:left withFloat:bottom withFloat:right - left withFloat:top - bottom];
      [backgr fill];
    }
    if ([cell hasBorders]) {
      ComAowagieTextRectangle *newRect = new_ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(left, bottom, right, top);
      
#line 230
      [newRect cloneNonPositionParametersWithComAowagieTextRectangle:cell];
      [newRect setBackgroundColorWithHarmonyJavaAwtColor:nil];
      
#line 233
      ComAowagieTextPdfPdfContentByte *lineCanvas = IOSObjectArray_Get(nil_chk(canvases), ComAowagieTextPdfPdfPTable_LINECANVAS);
      [((ComAowagieTextPdfPdfContentByte *) nil_chk(lineCanvas)) rectangleWithComAowagieTextRectangle:newRect];
    }
  }
}


#line 249
void ComAowagieTextPdfPdfPRow_saveAndRotateCanvasesWithComAowagieTextPdfPdfContentByteArray_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(ComAowagieTextPdfPdfPRow *self, IOSObjectArray *canvases, jfloat a, jfloat b, jfloat c, jfloat d, jfloat e, jfloat f) {
  jint last = ComAowagieTextPdfPdfPTable_TEXTCANVAS + 1;
  if (self->canvasesPos_ == nil) {
    self->canvasesPos_ = [IOSIntArray newArrayWithLength:last * 2];
  }
  for (jint k = 0; k < last; ++k) {
    ComAowagieTextPdfByteBuffer *bb = [((ComAowagieTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(nil_chk(canvases), k))) getInternalBuffer];
    *IOSIntArray_GetRef(nil_chk(self->canvasesPos_), k * 2) = [((ComAowagieTextPdfByteBuffer *) nil_chk(bb)) size];
    [((ComAowagieTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(canvases, k))) saveState];
    [((ComAowagieTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(canvases, k))) concatCTMWithFloat:a withFloat:b withFloat:c withFloat:d withFloat:e withFloat:f];
    *IOSIntArray_GetRef(nil_chk(self->canvasesPos_), k * 2 + 1) = [bb size];
  }
}


#line 267
void ComAowagieTextPdfPdfPRow_restoreCanvasesWithComAowagieTextPdfPdfContentByteArray_(ComAowagieTextPdfPdfPRow *self, IOSObjectArray *canvases) {
  jint last = ComAowagieTextPdfPdfPTable_TEXTCANVAS + 1;
  for (jint k = 0; k < last; ++k) {
    ComAowagieTextPdfByteBuffer *bb = [((ComAowagieTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(nil_chk(canvases), k))) getInternalBuffer];
    jint p1 = [((ComAowagieTextPdfByteBuffer *) nil_chk(bb)) size];
    [((ComAowagieTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(canvases, k))) restoreState];
    if (p1 == IOSIntArray_Get(nil_chk(self->canvasesPos_), k * 2 + 1)) {
      [bb setSizeWithInt:IOSIntArray_Get(self->canvasesPos_, k * 2)];
    }
  }
}


#line 288
jfloat ComAowagieTextPdfPdfPRow_setColumnWithComAowagieTextPdfColumnText_withFloat_withFloat_withFloat_withFloat_(ComAowagieTextPdfColumnText *ct, jfloat left, jfloat bottom, jfloat right, jfloat top) {
  ComAowagieTextPdfPdfPRow_initialize();
  
#line 289
  if (left > right) {
    right = left;
  }
  if (bottom > top) {
    top = bottom;
  }
  [((ComAowagieTextPdfColumnText *) nil_chk(ct)) setSimpleColumnWithFloat:left withFloat:bottom withFloat:right withFloat:top];
  return top;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfPRow)
