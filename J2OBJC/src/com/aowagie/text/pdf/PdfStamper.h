//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfStamper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComAowagieTextPdfPdfStamper")
#ifdef RESTRICT_ComAowagieTextPdfPdfStamper
#define INCLUDE_ALL_ComAowagieTextPdfPdfStamper 0
#else
#define INCLUDE_ALL_ComAowagieTextPdfPdfStamper 1
#endif
#undef RESTRICT_ComAowagieTextPdfPdfStamper

#if !defined (ComAowagieTextPdfPdfStamper_) && (INCLUDE_ALL_ComAowagieTextPdfPdfStamper || defined(INCLUDE_ComAowagieTextPdfPdfStamper))
#define ComAowagieTextPdfPdfStamper_

#define RESTRICT_ComAowagieTextPdfInterfacesPdfViewerPreferences 1
#define INCLUDE_ComAowagieTextPdfInterfacesPdfViewerPreferences 1
#include "com/aowagie/text/pdf/interfaces/PdfViewerPreferences.h"

#define RESTRICT_ComAowagieTextPdfInterfacesPdfEncryptionSettings 1
#define INCLUDE_ComAowagieTextPdfInterfacesPdfEncryptionSettings 1
#include "com/aowagie/text/pdf/interfaces/PdfEncryptionSettings.h"

@class ComAowagieTextPdfAcroFields;
@class ComAowagieTextPdfPdfAnnotation;
@class ComAowagieTextPdfPdfContentByte;
@class ComAowagieTextPdfPdfName;
@class ComAowagieTextPdfPdfObject;
@class ComAowagieTextPdfPdfReader;
@class ComAowagieTextPdfPdfSignatureAppearance;
@class ComAowagieTextPdfPdfWriter;
@class ComAowagieTextRectangle;
@class IOSByteArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoOutputStream;
@class JavaUtilCalendar;
@protocol JavaUtilList;
@protocol JavaUtilMap;

/*!
 @brief Applies extra content to the pages of a PDF document.
 This extra content can be all the objects allowed in PdfContentByte
  including pages from other Pdfs. The original PDF will keep
  all the interactive elements including bookmarks, links and form fields. 
 <p>
  It is also possible to change the field values and to
  flatten them. New fields can be added but not flattened.
 @author Paulo Soares (psoares@@consiste.pt).
 */
@interface ComAowagieTextPdfPdfStamper : NSObject < ComAowagieTextPdfInterfacesPdfViewerPreferences, ComAowagieTextPdfInterfacesPdfEncryptionSettings >

#pragma mark Public

/*!
 @brief Starts the process of adding extra content to an existing PDF
  document.
 @param reader the original document. It cannot be reused
 @param os the output stream
 @throw DocumentExceptionon error
 @throw IOExceptionon error.
 */
- (instancetype)initWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader
                            withJavaIoOutputStream:(JavaIoOutputStream *)os;

/*!
 @brief Starts the process of adding extra content to an existing PDF
  document.
 @param reader the original document. It cannot be reused
 @param os the output stream
 @param globalDate Date
 @throw DocumentExceptionon error
 @throw IOExceptionon error
 */
- (instancetype)initWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader
                            withJavaIoOutputStream:(JavaIoOutputStream *)os
                              withJavaUtilCalendar:(JavaUtilCalendar *)globalDate;

/*!
 @brief Adds an annotation of form field in a specific page.This page number
  can be overridden with <code>PdfAnnotation.setPlaceInPage(int)</code>.
 @param annot the annotation
 @param page the page
 */
- (void)addAnnotationWithComAowagieTextPdfPdfAnnotation:(ComAowagieTextPdfPdfAnnotation *)annot
                                                withInt:(jint)page;

/*!
 @brief Adds a viewer preference
 @param key a key for a viewer preference
 @param value the value for the viewer preference
 - seealso: PdfViewerPreferences#addViewerPreference
 */
- (void)addViewerPreferenceWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key
                         withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)value;

/*!
 @brief Closes the document.No more content can be written after the
  document is closed.
 <p>
  If closing a signed document with an external signature the closing must be done
  in the <CODE>PdfSignatureAppearance</CODE> instance.
 @throw DocumentExceptionon error
 @throw IOExceptionon error.
 */
- (void)close;

/*!
 @brief Closes the document.No more content can be written after the
  document is closed.
 <p>
  If closing a signed document with an external signature the closing must be done
  in the <CODE>PdfSignatureAppearance</CODE> instance.
 @param globalDate global date
 @throw DocumentExceptionon error
 @throw IOExceptionon error.
 */
- (void)closeWithJavaUtilCalendar:(JavaUtilCalendar *)globalDate;

/*!
 @brief Applies a digital signature to a document, possibly as a new revision, making
  possible multiple signatures.The returned PdfStamper
  can be used normally as the signature is only applied when closing.
 <p>
  A possible use for adding a signature without invalidating an existing one is: 
 @code

  KeyStore ks = KeyStore.getInstance("pkcs12");
  ks.load(new FileInputStream("my_private_key.pfx"), "my_password".toCharArray());
  String alias = (String)ks.aliases().nextElement();
  PrivateKey key = (PrivateKey)ks.getKey(alias, "my_password".toCharArray());
  Certificate[] chain = ks.getCertificateChain(alias);
  PdfReader reader = new PdfReader("original.pdf");
  FileOutputStream fout = new FileOutputStream("signed.pdf");
  PdfStamper stp = PdfStamper.createSignature(reader, fout, '\0', new
  File("/temp"), true);
  PdfSignatureAppearance sap = stp.getSignatureAppearance();
  sap.setCrypto(key, chain, null, PdfSignatureAppearance.WINCER_SIGNED);
  sap.setReason("I'm the author");
  sap.setLocation("Lisbon");
  // comment next line to have an invisible signature
  sap.setVisibleSignature(new Rectangle(100, 100, 200, 200), 1, null);
  stp.close(); 
  
@endcode
 @param reader the original document
 @param os the output stream or  <CODE> null </CODE>  to keep the document in the temporary file
 @param pdfVersion the new pdf version or '\0' to keep the same version as the original  document
 @param tempFile location of the temporary file. If it's a directory a temporary file will be created there.      If it's a file it will be used directly. The file will be deleted on exit unless 
  <CODE> os </CODE>  is null.      In that case the document can be retrieved directly from the temporary file. If it's 
  <CODE> null </CODE>      no temporary file will be created and memory will be used
 @param append if  <CODE> true </CODE>  the signature and all the other content will be added as a
   new revision thus not invalidating existing signatures
 @return a <CODE>PdfStamper</CODE>
 @throw DocumentExceptionon error
 @throw IOExceptionon error
 */
+ (ComAowagieTextPdfPdfStamper *)createSignatureWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader
                                                        withJavaIoOutputStream:(JavaIoOutputStream *)os
                                                                      withChar:(jchar)pdfVersion
                                                                withJavaIoFile:(JavaIoFile *)tempFile
                                                                   withBoolean:(jboolean)append;

/*!
 @brief Applies a digital signature to a document, possibly as a new revision, making
  possible multiple signatures.The returned PdfStamper
  can be used normally as the signature is only applied when closing.
 <p>
  A possible use for adding a signature without invalidating an existing one is: 
 @code

  KeyStore ks = KeyStore.getInstance("pkcs12");
  ks.load(new FileInputStream("my_private_key.pfx"), "my_password".toCharArray());
  String alias = (String)ks.aliases().nextElement();
  PrivateKey key = (PrivateKey)ks.getKey(alias, "my_password".toCharArray());
  Certificate[] chain = ks.getCertificateChain(alias);
  PdfReader reader = new PdfReader("original.pdf");
  FileOutputStream fout = new FileOutputStream("signed.pdf");
  PdfStamper stp = PdfStamper.createSignature(reader, fout, '\0', new
  File("/temp"), true);
  PdfSignatureAppearance sap = stp.getSignatureAppearance();
  sap.setCrypto(key, chain, null, PdfSignatureAppearance.WINCER_SIGNED);
  sap.setReason("I'm the author");
  sap.setLocation("Lisbon");
  // comment next line to have an invisible signature
  sap.setVisibleSignature(new Rectangle(100, 100, 200, 200), 1, null);
  stp.close(); 
  
@endcode
 @param reader the original document
 @param os the output stream or  <CODE> null </CODE>  to keep the document in the temporary file
 @param pdfVersion the new pdf version or '\0' to keep the same version as the original  document
 @param tempFile location of the temporary file. If it's a directory a temporary file will be created there.      If it's a file it will be used directly. The file will be deleted on exit unless 
  <CODE> os </CODE>  is null.      In that case the document can be retrieved directly from the temporary file. If it's 
  <CODE> null </CODE>      no temporary file will be created and memory will be used
 @param append if  <CODE> true </CODE>  the signature and all the other content will be added as a
   new revision thus not invalidating existing signatures
 @param globalDate Date
 @return a <CODE>PdfStamper</CODE>
 @throw DocumentExceptionon error
 @throw IOExceptionon error
 */
+ (ComAowagieTextPdfPdfStamper *)createSignatureWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader
                                                        withJavaIoOutputStream:(JavaIoOutputStream *)os
                                                                      withChar:(jchar)pdfVersion
                                                                withJavaIoFile:(JavaIoFile *)tempFile
                                                                   withBoolean:(jboolean)append
                                                          withJavaUtilCalendar:(JavaUtilCalendar *)globalDate;

/*!
 @brief Gets the <CODE>AcroFields</CODE> object that allows to get and set field values
  and to merge FDF forms.
 @return the <CODE>AcroFields</CODE> object
 */
- (ComAowagieTextPdfAcroFields *)getAcroFields;

/*!
 @brief Gets the optional <CODE>String</CODE> map to add or change values in
  the info dictionary.
 @return the map or <CODE>null</CODE>.
 */
- (id<JavaUtilMap>)getMoreInfo;

/*!
 @brief Gets a <CODE>PdfContentByte</CODE> to write over the page of
  the original document.
 @param pageNum the page number where the extra content is written
 @return a <CODE>PdfContentByte</CODE> to write over the page of
  the original document
 */
- (ComAowagieTextPdfPdfContentByte *)getOverContentWithInt:(jint)pageNum;

/*!
 @brief Gets the PdfLayer objects in an existing document as a Map
  with the names/titles of the layers as keys.
 @return a Map with all the PdfLayers in the document (and the name/title of the layer as key)
 @since 2.1.2
 */
- (id<JavaUtilMap>)getPdfLayers;

/*!
 @brief Gets the underlying PdfReader.
 @return the underlying PdfReader
 */
- (ComAowagieTextPdfPdfReader *)getReader;

/*!
 @brief Gets the signing instance.The appearances and other parameters can the be set.
 @return the signing instance
 */
- (ComAowagieTextPdfPdfSignatureAppearance *)getSignatureAppearance;

/*!
 @brief Gets the underlying PdfWriter.
 @return the underlying PdfWriter
 */
- (ComAowagieTextPdfPdfWriter *)getWriter;

/*!
 @brief Inserts a blank page.All the pages above and including <CODE>pageNumber</CODE> will
  be shifted up.
 If <CODE>pageNumber</CODE> is bigger than the total number of pages
  the new page will be the last one.
 @param pageNumber the page number position where the new page will be inserted
 @param mediabox the size of the new page
 */
- (void)insertPageWithInt:(jint)pageNumber
withComAowagieTextRectangle:(ComAowagieTextRectangle *)mediabox;

/*!
 @brief Gets the 1.5 compression status.
 @return <code>true</code> if the 1.5 compression is on
 */
- (jboolean)isFullCompression;

/*!
 @brief Checks if the content is automatically adjusted to compensate
  the original page rotation.
 @return the auto-rotation status
 */
- (jboolean)isRotateContents;

/*!
 @brief Sets the encryption options for this document.The userPassword and the
   ownerPassword can be null or have zero length.
 In this case the ownerPassword
   is replaced by a random string. The open permissions for the document can be
   AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
   AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
   The permissions can be combined by ORing them.
 @param userPassword the user password. Can be null or empty
 @param ownerPassword the owner password. Can be null or empty
 @param permissions the user permissions
 @param encryptionType the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128 or ENCRYPTION_AES128.  Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
 @throw DocumentExceptionif the document is already open
 */
- (void)setEncryptionWithByteArray:(IOSByteArray *)userPassword
                     withByteArray:(IOSByteArray *)ownerPassword
                           withInt:(jint)permissions
                           withInt:(jint)encryptionType;

/*!
 @brief Sets the certificate encryption options for this document.An array of one or more public certificates
  must be provided together with an array of the same size for the permissions for each certificate.
 The open permissions for the document can be
   AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
   AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
   The permissions can be combined by ORing them.
  Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
 @param certs the public certificates to be used for the encryption
 @param permissions the user permissions for each of the certificates
 @param encryptionType the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128 or ENCRYPTION_AES128.
 @throw DocumentExceptionif the encryption was set too late
 */
- (void)setEncryptionWithJavaSecurityCertCertificateArray:(IOSObjectArray *)certs
                                             withIntArray:(IOSIntArray *)permissions
                                                  withInt:(jint)encryptionType;

/*!
 @brief Determines if the fields are flattened on close.The fields added with 
 <code>addAnnotation(PdfAnnotation,int)</code> will never be flattened.
 @param flat <CODE> true </CODE>  to flatten the fields,  <CODE> false </CODE>
   to keep the fields
 */
- (void)setFormFlatteningWithBoolean:(jboolean)flat;

/*!
 @brief Determines if the FreeText annotations are flattened on close.
 @param flat <CODE> true </CODE>  to flatten the FreeText annotations,  <CODE> false </CODE>
   (the default) to keep the FreeText annotations as active content.
 */
- (void)setFreeTextFlatteningWithBoolean:(jboolean)flat;

/*!
 @brief Sets the document's compression to the new 1.5 mode with object streams and xref
  streams.It can be set at any time but once set it can't be unset.
 */
- (void)setFullCompression;

/*!
 @brief An optional <CODE>String</CODE> map to add or change values in
  the info dictionary.Entries with <CODE>null</CODE>
  values delete the key in the original info dictionary
 @param moreInfo additional entries to the info dictionary.
 */
- (void)setMoreInfoWithJavaUtilMap:(id<JavaUtilMap>)moreInfo;

/*!
 @brief Sets the bookmarks.The list structure is defined in 
 <code>SimpleBookmark</code>.
 @param outlines the bookmarks or  <CODE> null </CODE>  to remove any
 */
- (void)setOutlinesWithJavaUtilList:(id<JavaUtilList>)outlines;

/*!
 @brief Flags the content to be automatically adjusted to compensate
  the original page rotation.The default is <CODE>true</CODE>.
 @param rotateContents <CODE> true </CODE>  to set auto-rotation,  <CODE> false </CODE>
   otherwise
 */
- (void)setRotateContentsWithBoolean:(jboolean)rotateContents;

/*!
 @brief Sets the viewer preferences.
 @param preferences the viewer preferences
 - seealso: PdfViewerPreferences#setViewerPreferences(int)
 */
- (void)setViewerPreferencesWithInt:(jint)preferences;

/*!
 @brief Sets the XMP metadata.
 @param xmp info with xmp
 - seealso: PdfWriter#setXmpMetadata(byte[])
 */
- (void)setXmpMetadataWithByteArray:(IOSByteArray *)xmp;

#pragma mark Package-Private

/*!
 @brief Sets the encryption options for this document.The userPassword and the
   ownerPassword can be null or have zero length.
 In this case the ownerPassword
   is replaced by a random string. The open permissions for the document can be
   AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
   AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
   The permissions can be combined by ORing them.
 @param strength <code> true </code>  for 128 bit key length,  <code> false </code>  for 40 bit key length
 @param userPassword the user password. Can be null or empty
 @param ownerPassword the owner password. Can be null or empty
 @param permissions the user permissions
 @throw DocumentExceptionif anything was already written to the output
 */
- (void)setEncryptionWithBoolean:(jboolean)strength
                    withNSString:(NSString *)userPassword
                    withNSString:(NSString *)ownerPassword
                         withInt:(jint)permissions;

/*!
 @brief Sets the encryption options for this document.The userPassword and the
   ownerPassword can be null or have zero length.
 In this case the ownerPassword
   is replaced by a random string. The open permissions for the document can be
   AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
   AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
   The permissions can be combined by ORing them.
 @param userPassword the user password. Can be null or empty
 @param ownerPassword the owner password. Can be null or empty
 @param permissions the user permissions
 @param strength128Bits <code> true </code>  for 128 bit key length,  <code> false </code>  for 40 bit key length
 @throw DocumentExceptionif anything was already written to the output
 */
- (void)setEncryptionWithByteArray:(IOSByteArray *)userPassword
                     withByteArray:(IOSByteArray *)ownerPassword
                           withInt:(jint)permissions
                       withBoolean:(jboolean)strength128Bits;

/*!
 @brief Sets the encryption options for this document.The userPassword and the
   ownerPassword can be null or have zero length.
 In this case the ownerPassword
   is replaced by a random string. The open permissions for the document can be
   AllowPrinting, AllowModifyContents, AllowCopy, AllowModifyAnnotations,
   AllowFillIn, AllowScreenReaders, AllowAssembly and AllowDegradedPrinting.
   The permissions can be combined by ORing them.
 @param encryptionType the type of encryption. It can be one of STANDARD_ENCRYPTION_40, STANDARD_ENCRYPTION_128 or ENCRYPTION_AES128.  Optionally DO_NOT_ENCRYPT_METADATA can be ored to output the metadata in cleartext
 @param userPassword the user password. Can be null or empty
 @param ownerPassword the owner password. Can be null or empty
 @param permissions the user permissions
 @throw DocumentExceptionif anything was already written to the output
 */
- (void)setEncryptionWithInt:(jint)encryptionType
                withNSString:(NSString *)userPassword
                withNSString:(NSString *)ownerPassword
                     withInt:(jint)permissions;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfPdfStamper)

FOUNDATION_EXPORT void ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withJavaUtilCalendar_(ComAowagieTextPdfPdfStamper *self, ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os, JavaUtilCalendar *globalDate);

FOUNDATION_EXPORT ComAowagieTextPdfPdfStamper *new_ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withJavaUtilCalendar_(ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os, JavaUtilCalendar *globalDate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfStamper *create_ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withJavaUtilCalendar_(ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os, JavaUtilCalendar *globalDate);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_(ComAowagieTextPdfPdfStamper *self, ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os);

FOUNDATION_EXPORT ComAowagieTextPdfPdfStamper *new_ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_(ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfStamper *create_ComAowagieTextPdfPdfStamper_initWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_(ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os);

FOUNDATION_EXPORT ComAowagieTextPdfPdfStamper *ComAowagieTextPdfPdfStamper_createSignatureWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withJavaIoFile_withBoolean_(ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os, jchar pdfVersion, JavaIoFile *tempFile, jboolean append);

FOUNDATION_EXPORT ComAowagieTextPdfPdfStamper *ComAowagieTextPdfPdfStamper_createSignatureWithComAowagieTextPdfPdfReader_withJavaIoOutputStream_withChar_withJavaIoFile_withBoolean_withJavaUtilCalendar_(ComAowagieTextPdfPdfReader *reader, JavaIoOutputStream *os, jchar pdfVersion, JavaIoFile *tempFile, jboolean append, JavaUtilCalendar *globalDate);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfStamper)

#endif

#pragma pop_macro("INCLUDE_ALL_ComAowagieTextPdfPdfStamper")
