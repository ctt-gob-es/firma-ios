//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/FontDetails.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/ExceptionConverter.h"
#include "com/aowagie/text/Utilities.h"
#include "com/aowagie/text/pdf/BaseFont.h"
#include "com/aowagie/text/pdf/CJKFont.h"
#include "com/aowagie/text/pdf/FontDetails.h"
#include "com/aowagie/text/pdf/IntHashtable.h"
#include "com/aowagie/text/pdf/PdfEncodings.h"
#include "com/aowagie/text/pdf/PdfIndirectReference.h"
#include "com/aowagie/text/pdf/PdfName.h"
#include "com/aowagie/text/pdf/PdfWriter.h"
#include "com/aowagie/text/pdf/TrueTypeFontUnicode.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/FontDetails must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfFontDetails () {
 @public
  /*!
   @brief The indirect reference to this font
   */
  ComAowagieTextPdfPdfIndirectReference *indirectReference_;
  /*!
   @brief The font name that appears in the document body stream
   */
  ComAowagieTextPdfPdfName *fontName_;
  /*!
   @brief The font
   */
  ComAowagieTextPdfBaseFont *baseFont_;
  /*!
   @brief The font if it's an instance of <CODE>TrueTypeFontUnicode</CODE>
   */
  ComAowagieTextPdfTrueTypeFontUnicode *ttu_;
  /*!
   @brief The font if it's an instance of <CODE>CJKFont</CODE>
   */
  ComAowagieTextPdfCJKFont *cjkFont_;
  /*!
   @brief The array used with single byte encodings
   */
  IOSByteArray *shortTag_;
  /*!
   @brief The map used with double byte encodings.The key is Integer(glyph) and
  the value is int[]{glyph, width, Unicode code}
   */
  JavaUtilHashMap *longTag_;
  /*!
   @brief IntHashtable with CIDs of CJK glyphs that are used in the text.
   */
  ComAowagieTextPdfIntHashtable *cjkTag_;
  /*!
   @brief The font type
   */
  jint fontType_;
  /*!
   @brief <CODE>true</CODE> if the font is symbolic
   */
  jboolean symbolic_;
  /*!
   @brief Indicates if only a subset of the glyphs and widths for that particular
  encoding should be included in the document.
   */
  jboolean subset_;
}

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfFontDetails, indirectReference_, ComAowagieTextPdfPdfIndirectReference *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfFontDetails, fontName_, ComAowagieTextPdfPdfName *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfFontDetails, baseFont_, ComAowagieTextPdfBaseFont *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfFontDetails, ttu_, ComAowagieTextPdfTrueTypeFontUnicode *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfFontDetails, cjkFont_, ComAowagieTextPdfCJKFont *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfFontDetails, shortTag_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfFontDetails, longTag_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfFontDetails, cjkTag_, ComAowagieTextPdfIntHashtable *)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/FontDetails.java"


#line 65
@implementation ComAowagieTextPdfFontDetails


#line 122
- (instancetype)initPackagePrivateWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)fontName
                     withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)indirectReference
                                 withComAowagieTextPdfBaseFont:(ComAowagieTextPdfBaseFont *)baseFont {
  ComAowagieTextPdfFontDetails_initPackagePrivateWithComAowagieTextPdfPdfName_withComAowagieTextPdfPdfIndirectReference_withComAowagieTextPdfBaseFont_(self, fontName, indirectReference, baseFont);
  return self;
}


#line 148
- (ComAowagieTextPdfPdfIndirectReference *)getIndirectReference {
  return self->indirectReference_;
}


#line 156
- (ComAowagieTextPdfPdfName *)getFontName {
  return self->fontName_;
}


#line 164
- (ComAowagieTextPdfBaseFont *)getBaseFont {
  return self->baseFont_;
}


#line 175
- (IOSByteArray *)convertToBytesWithNSString:(NSString *)text {
  IOSByteArray *b = nil;
  switch (self->fontType_) {
    case ComAowagieTextPdfBaseFont_FONT_TYPE_T3:
    return [((ComAowagieTextPdfBaseFont *) nil_chk(self->baseFont_)) convertToBytesWithNSString:text];
    case ComAowagieTextPdfBaseFont_FONT_TYPE_T1:
    case ComAowagieTextPdfBaseFont_FONT_TYPE_TT:
    {
      
#line 182
      b = [((ComAowagieTextPdfBaseFont *) nil_chk(self->baseFont_)) convertToBytesWithNSString:text];
      jint len = ((IOSByteArray *) nil_chk(b))->size_;
      for (jint k = 0; k < len; ++k) {
        *IOSByteArray_GetRef(nil_chk(self->shortTag_), IOSByteArray_Get(b, k) & (jint) 0xff) = 1;
      }
      break;
    }
    case ComAowagieTextPdfBaseFont_FONT_TYPE_CJK:
    {
      
#line 190
      jint len = [((NSString *) nil_chk(text)) java_length];
      for (jint k = 0; k < len; ++k) {
        [((ComAowagieTextPdfIntHashtable *) nil_chk(self->cjkTag_)) putWithInt:[((ComAowagieTextPdfCJKFont *) nil_chk(self->cjkFont_)) getCidCodeWithInt:[text charAtWithInt:k]] withInt:0];
      }
      b = [((ComAowagieTextPdfBaseFont *) nil_chk(self->baseFont_)) convertToBytesWithNSString:text];
      break;
    }
    case ComAowagieTextPdfBaseFont_FONT_TYPE_DOCUMENT:
    {
      
#line 198
      b = [((ComAowagieTextPdfBaseFont *) nil_chk(self->baseFont_)) convertToBytesWithNSString:text];
      break;
    }
    case ComAowagieTextPdfBaseFont_FONT_TYPE_TTUNI:
    {
      
#line 202
      @try {
        jint len = [((NSString *) nil_chk(text)) java_length];
        IOSIntArray *metrics = nil;
        IOSCharArray *glyph = [IOSCharArray newArrayWithLength:len];
        jint i = 0;
        if (self->symbolic_) {
          b = ComAowagieTextPdfPdfEncodings_convertToBytesWithNSString_withNSString_(text, @"symboltt");
          len = ((IOSByteArray *) nil_chk(b))->size_;
          for (jint k = 0; k < len; ++k) {
            metrics = [((ComAowagieTextPdfTrueTypeFontUnicode *) nil_chk(self->ttu_)) getMetricsTTWithInt:IOSByteArray_Get(b, k) & (jint) 0xff];
            if (metrics == nil) {
              continue;
            }
            (void) [((JavaUtilHashMap *) nil_chk(self->longTag_)) putWithId:new_JavaLangInteger_initWithInt_(IOSIntArray_Get(metrics, 0)) withId:[IOSIntArray newArrayWithInts:(jint[]){ IOSIntArray_Get(metrics, 0), IOSIntArray_Get(metrics, 1), [((ComAowagieTextPdfTrueTypeFontUnicode *) nil_chk(self->ttu_)) getUnicodeDifferencesWithInt:IOSByteArray_Get(b, k) & (jint) 0xff] } count:3]];
            *IOSCharArray_GetRef(glyph, i++) = (jchar) IOSIntArray_Get(metrics, 0);
          }
        }
        else {
          for (jint k = 0; k < len; ++k) {
            jint val;
            if (ComAowagieTextUtilities_isSurrogatePairWithNSString_withInt_(text, k)) {
              val = ComAowagieTextUtilities_convertToUtf32WithNSString_withInt_(text, k);
              k++;
            }
            else {
              val = [text charAtWithInt:k];
            }
            metrics = [((ComAowagieTextPdfTrueTypeFontUnicode *) nil_chk(self->ttu_)) getMetricsTTWithInt:val];
            if (metrics == nil) {
              continue;
            }
            jint m0 = IOSIntArray_Get(metrics, 0);
            JavaLangInteger *gl = new_JavaLangInteger_initWithInt_(m0);
            if (![((JavaUtilHashMap *) nil_chk(self->longTag_)) containsKeyWithId:gl]) {
              (void) [((JavaUtilHashMap *) nil_chk(self->longTag_)) putWithId:gl withId:[IOSIntArray newArrayWithInts:(jint[]){ m0, IOSIntArray_Get(metrics, 1), val } count:3]];
            }
            *IOSCharArray_GetRef(glyph, i++) = (jchar) m0;
          }
        }
        NSString *s = [NSString java_stringWithCharacters:glyph offset:0 length:i];
        b = [s java_getBytesWithCharsetName:ComAowagieTextPdfCJKFont_CJK_ENCODING];
      }
      @catch (JavaIoUnsupportedEncodingException *e) {
        @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
      }
      break;
    }
  }
  return b;
}


#line 257
- (void)writeFontWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer {
  @try {
    switch (self->fontType_) {
      case ComAowagieTextPdfBaseFont_FONT_TYPE_T3:
      [((ComAowagieTextPdfBaseFont *) nil_chk(self->baseFont_)) writeFontWithComAowagieTextPdfPdfWriter:writer withComAowagieTextPdfPdfIndirectReference:self->indirectReference_ withNSObjectArray:nil];
      break;
      case ComAowagieTextPdfBaseFont_FONT_TYPE_T1:
      case ComAowagieTextPdfBaseFont_FONT_TYPE_TT:
      {
        
#line 265
        jint firstChar;
        jint lastChar;
        for (firstChar = 0; firstChar < 256; ++firstChar) {
          if (IOSByteArray_Get(nil_chk(self->shortTag_), firstChar) != 0) {
            break;
          }
        }
        for (lastChar = 255; lastChar >= firstChar; --lastChar) {
          if (IOSByteArray_Get(nil_chk(self->shortTag_), lastChar) != 0) {
            break;
          }
        }
        if (firstChar > 255) {
          firstChar = 255;
          lastChar = 255;
        }
        [((ComAowagieTextPdfBaseFont *) nil_chk(self->baseFont_)) writeFontWithComAowagieTextPdfPdfWriter:writer withComAowagieTextPdfPdfIndirectReference:self->indirectReference_ withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangInteger_initWithInt_(firstChar), create_JavaLangInteger_initWithInt_(lastChar), self->shortTag_, JavaLangBoolean_valueOfWithBoolean_(self->subset_) } count:4 type:NSObject_class_()]];
        break;
      }
      case ComAowagieTextPdfBaseFont_FONT_TYPE_CJK:
      [((ComAowagieTextPdfBaseFont *) nil_chk(self->baseFont_)) writeFontWithComAowagieTextPdfPdfWriter:writer withComAowagieTextPdfPdfIndirectReference:self->indirectReference_ withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->cjkTag_ } count:1 type:NSObject_class_()]];
      break;
      case ComAowagieTextPdfBaseFont_FONT_TYPE_TTUNI:
      [((ComAowagieTextPdfBaseFont *) nil_chk(self->baseFont_)) writeFontWithComAowagieTextPdfPdfWriter:writer withComAowagieTextPdfPdfIndirectReference:self->indirectReference_ withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->longTag_, JavaLangBoolean_valueOfWithBoolean_(self->subset_) } count:2 type:NSObject_class_()]];
      break;
    }
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 302
- (jboolean)isSubset {
  return self->subset_;
}


#line 312
- (void)setSubsetWithBoolean:(jboolean)subset {
  self->subset_ = subset;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfIndirectReference;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfName;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfBaseFont;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithComAowagieTextPdfPdfName:withComAowagieTextPdfPdfIndirectReference:withComAowagieTextPdfBaseFont:);
  methods[1].selector = @selector(getIndirectReference);
  methods[2].selector = @selector(getFontName);
  methods[3].selector = @selector(getBaseFont);
  methods[4].selector = @selector(convertToBytesWithNSString:);
  methods[5].selector = @selector(writeFontWithComAowagieTextPdfPdfWriter:);
  methods[6].selector = @selector(isSubset);
  methods[7].selector = @selector(setSubsetWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "indirectReference_", "LComAowagieTextPdfPdfIndirectReference;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fontName_", "LComAowagieTextPdfPdfName;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "baseFont_", "LComAowagieTextPdfBaseFont;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ttu_", "LComAowagieTextPdfTrueTypeFontUnicode;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cjkFont_", "LComAowagieTextPdfCJKFont;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "shortTag_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "longTag_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cjkTag_", "LComAowagieTextPdfIntHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fontType_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "symbolic_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "subset_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfPdfName;LComAowagieTextPdfPdfIndirectReference;LComAowagieTextPdfBaseFont;", "convertToBytes", "LNSString;", "writeFont", "LComAowagieTextPdfPdfWriter;", "setSubset", "Z" };
  static const J2ObjcClassInfo _ComAowagieTextPdfFontDetails = { "FontDetails", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 8, 11, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfFontDetails;
}

@end


#line 122
void ComAowagieTextPdfFontDetails_initPackagePrivateWithComAowagieTextPdfPdfName_withComAowagieTextPdfPdfIndirectReference_withComAowagieTextPdfBaseFont_(ComAowagieTextPdfFontDetails *self, ComAowagieTextPdfPdfName *fontName, ComAowagieTextPdfPdfIndirectReference *indirectReference, ComAowagieTextPdfBaseFont *baseFont) {
  NSObject_init(self);
  self->subset_ =
#line 112
  true;
  
#line 123
  self->fontName_ = fontName;
  self->indirectReference_ = indirectReference;
  self->baseFont_ = baseFont;
  self->fontType_ = [((ComAowagieTextPdfBaseFont *) nil_chk(baseFont)) getFontType];
  switch (self->fontType_) {
    case ComAowagieTextPdfBaseFont_FONT_TYPE_T1:
    case ComAowagieTextPdfBaseFont_FONT_TYPE_TT:
    self->shortTag_ = [IOSByteArray newArrayWithLength:256];
    break;
    case ComAowagieTextPdfBaseFont_FONT_TYPE_CJK:
    self->cjkTag_ = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
    self->cjkFont_ = (ComAowagieTextPdfCJKFont *) cast_chk(baseFont, [ComAowagieTextPdfCJKFont class]);
    break;
    case ComAowagieTextPdfBaseFont_FONT_TYPE_TTUNI:
    self->longTag_ = new_JavaUtilLinkedHashMap_init();
    self->ttu_ = (ComAowagieTextPdfTrueTypeFontUnicode *) cast_chk(baseFont, [ComAowagieTextPdfTrueTypeFontUnicode class]);
    self->symbolic_ = [baseFont isFontSpecific];
    break;
  }
}


#line 122
ComAowagieTextPdfFontDetails *new_ComAowagieTextPdfFontDetails_initPackagePrivateWithComAowagieTextPdfPdfName_withComAowagieTextPdfPdfIndirectReference_withComAowagieTextPdfBaseFont_(ComAowagieTextPdfPdfName *fontName, ComAowagieTextPdfPdfIndirectReference *indirectReference, ComAowagieTextPdfBaseFont *baseFont) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfFontDetails, initPackagePrivateWithComAowagieTextPdfPdfName_withComAowagieTextPdfPdfIndirectReference_withComAowagieTextPdfBaseFont_, fontName, indirectReference, baseFont)
}


#line 122
ComAowagieTextPdfFontDetails *create_ComAowagieTextPdfFontDetails_initPackagePrivateWithComAowagieTextPdfPdfName_withComAowagieTextPdfPdfIndirectReference_withComAowagieTextPdfBaseFont_(ComAowagieTextPdfPdfName *fontName, ComAowagieTextPdfPdfIndirectReference *indirectReference, ComAowagieTextPdfBaseFont *baseFont) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfFontDetails, initPackagePrivateWithComAowagieTextPdfPdfName_withComAowagieTextPdfPdfIndirectReference_withComAowagieTextPdfBaseFont_, fontName, indirectReference, baseFont)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfFontDetails)
