//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/MultiColumnText.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComAowagieTextPdfMultiColumnText")
#ifdef RESTRICT_ComAowagieTextPdfMultiColumnText
#define INCLUDE_ALL_ComAowagieTextPdfMultiColumnText 0
#else
#define INCLUDE_ALL_ComAowagieTextPdfMultiColumnText 1
#endif
#undef RESTRICT_ComAowagieTextPdfMultiColumnText

#if !defined (ComAowagieTextPdfMultiColumnText_) && (INCLUDE_ALL_ComAowagieTextPdfMultiColumnText || defined(INCLUDE_ComAowagieTextPdfMultiColumnText))
#define ComAowagieTextPdfMultiColumnText_

#define RESTRICT_ComAowagieTextElement 1
#define INCLUDE_ComAowagieTextElement 1
#include "com/aowagie/text/Element.h"

@class JavaUtilArrayList;

/*!
 @brief Formats content into one or more columns bounded by a
  rectangle.The columns may be simple rectangles or
  more complicated shapes.
 Add all of the columns before
  adding content. Column continuation is supported. A MultiColumnText object may be added to
  a document using <CODE>Document.add</CODE>.
 @author Steve Appling
 */
@interface ComAowagieTextPdfMultiColumnText : NSObject < ComAowagieTextElement >

#pragma mark Public

/*!
 @brief Default constructor.Sets height to <CODE>AUTOMATIC</CODE>.
 Columns will repeat on each page as necessary to accommodate content length.
 */
- (instancetype)initPackagePrivate;

/*!
 @brief Returns null - not used
 @return null
 */
- (JavaUtilArrayList *)getChunks;

/*!
 @brief Gets the current column.
 @return the current column
 */
- (jint)getCurrentColumn;

/*!
 - seealso: com.aowagie.text.Element#isContent()
 @since iText 2.0.8
 */
- (jboolean)isContent;

/*!
 - seealso: com.aowagie.text.Element#isNestable()
 @since iText 2.0.8
 */
- (jboolean)isNestable;

/*!
 @brief Indicates that all of the text did not fit in the
  specified height.Note that isOverflow will return
  false before the MultiColumnText object has been
  added to the document.
 It will always be false if
  the height is AUTOMATIC.
 @return true if there is still space left in the column
 */
- (jboolean)isOverflow;

/*!
 @brief Sets the default alignment
 @param alignment the default alignment
 */
- (void)setAlignmentWithInt:(jint)alignment;

/*!
 @brief Sets the arabic shaping options.The option can be AR_NOVOWEL,
  AR_COMPOSEDTASHKEEL and AR_LIG.
 @param arabicOptions the arabic shaping options
 */
- (void)setArabicOptionsWithInt:(jint)arabicOptions;

/*!
 @brief Sets the direction of the columns.
 @param direction true = right2left; false = left2right
 */
- (void)setColumnsRightToLeftWithBoolean:(jboolean)direction;

/*!
 @brief Sets the run direction.
 @param runDirection the run direction
 */
- (void)setRunDirectionWithInt:(jint)runDirection;

/*!
 @brief Sets the ratio between the extra word spacing and the extra character spacing
  when the text is fully justified.
 Extra word spacing will grow <CODE>spaceCharRatio</CODE> times more than extra character spacing.
  If the ratio is <CODE>PdfWriter.NO_SPACE_CHAR_RATIO</CODE> then the extra character spacing
  will be zero.
 @param spaceCharRatio the ratio between the extra word spacing and the extra character spacing
 */
- (void)setSpaceCharRatioWithFloat:(jfloat)spaceCharRatio;

/*!
 @brief Gets the type of the text element.
 @return a type
 */
- (jint)type;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfMultiColumnText)

FOUNDATION_EXPORT void ComAowagieTextPdfMultiColumnText_initPackagePrivate(ComAowagieTextPdfMultiColumnText *self);

FOUNDATION_EXPORT ComAowagieTextPdfMultiColumnText *new_ComAowagieTextPdfMultiColumnText_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfMultiColumnText *create_ComAowagieTextPdfMultiColumnText_initPackagePrivate(void);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfMultiColumnText)

#endif

#pragma pop_macro("INCLUDE_ALL_ComAowagieTextPdfMultiColumnText")
