//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/TrueTypeFontSubSet.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/DocumentException.h"
#include "com/aowagie/text/ExceptionConverter.h"
#include "com/aowagie/text/pdf/BaseFont.h"
#include "com/aowagie/text/pdf/PdfEncodings.h"
#include "com/aowagie/text/pdf/RandomAccessFileOrArray.h"
#include "com/aowagie/text/pdf/TrueTypeFontSubSet.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Set.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/TrueTypeFontSubSet must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfTrueTypeFontSubSet () {
 @public
  /*!
   @brief Contains the location of the several tables.The key is the name of
  the table and the value is an <CODE>int[3]</CODE> where position 0
  is the checksum, position 1 is the offset from the start of the file
  and position 2 is the length of the table.
   */
  JavaUtilHashMap *tableDirectory_;
  /*!
   @brief The file in use.
   */
  ComAowagieTextPdfRandomAccessFileOrArray *rf_;
  /*!
   @brief The file name.
   */
  NSString *fileName_;
  jboolean includeCmap_;
  jboolean includeExtras_;
  jboolean locaShortTable_;
  IOSIntArray *locaTable_;
  JavaUtilHashMap *glyphsUsed_;
  JavaUtilArrayList *glyphsInList_;
  jint tableGlyphOffset_;
  IOSIntArray *newLocaTable_;
  IOSByteArray *newLocaTableOut_;
  IOSByteArray *newGlyfTable_;
  jint glyfTableRealSize_;
  jint locaTableRealSize_;
  IOSByteArray *outFont_;
  jint fontPtr_;
  jint directoryOffset_;
}

- (void)assembleFont;

- (void)createTableDirectory;

- (void)readLoca;

- (void)createNewGlyphTables;

- (void)locaTobytes;

- (void)flatGlyphs;

- (void)checkGlyphCompositeWithInt:(jint)glyph;

/*!
 @brief Reads a <CODE>String</CODE> from the font file as bytes using the Cp1252
   encoding.
 @param length the length of bytes to read
 @return the <CODE>String</CODE> read
 @throw IOExceptionthe font file could not be read
 */
- (NSString *)readStandardStringWithInt:(jint)length;

- (void)writeFontShortWithInt:(jint)n;

- (void)writeFontIntWithInt:(jint)n;

- (void)writeFontStringWithNSString:(NSString *)s;

- (jint)calculateChecksumWithByteArray:(IOSByteArray *)b;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFontSubSet, tableDirectory_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFontSubSet, rf_, ComAowagieTextPdfRandomAccessFileOrArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFontSubSet, fileName_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFontSubSet, locaTable_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFontSubSet, glyphsUsed_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFontSubSet, glyphsInList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFontSubSet, newLocaTable_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFontSubSet, newLocaTableOut_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFontSubSet, newGlyfTable_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFontSubSet, outFont_, IOSByteArray *)

inline IOSObjectArray *ComAowagieTextPdfTrueTypeFontSubSet_get_tableNamesSimple(void);
static IOSObjectArray *ComAowagieTextPdfTrueTypeFontSubSet_tableNamesSimple;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfTrueTypeFontSubSet, tableNamesSimple, IOSObjectArray *)

inline IOSObjectArray *ComAowagieTextPdfTrueTypeFontSubSet_get_tableNamesCmap(void);
static IOSObjectArray *ComAowagieTextPdfTrueTypeFontSubSet_tableNamesCmap;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfTrueTypeFontSubSet, tableNamesCmap, IOSObjectArray *)

inline IOSObjectArray *ComAowagieTextPdfTrueTypeFontSubSet_get_tableNamesExtra(void);
static IOSObjectArray *ComAowagieTextPdfTrueTypeFontSubSet_tableNamesExtra;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfTrueTypeFontSubSet, tableNamesExtra, IOSObjectArray *)

inline IOSIntArray *ComAowagieTextPdfTrueTypeFontSubSet_get_entrySelectors(void);
static IOSIntArray *ComAowagieTextPdfTrueTypeFontSubSet_entrySelectors;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfTrueTypeFontSubSet, entrySelectors, IOSIntArray *)

inline jint ComAowagieTextPdfTrueTypeFontSubSet_get_TABLE_CHECKSUM(void);
#define ComAowagieTextPdfTrueTypeFontSubSet_TABLE_CHECKSUM 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfTrueTypeFontSubSet, TABLE_CHECKSUM, jint)

inline jint ComAowagieTextPdfTrueTypeFontSubSet_get_TABLE_OFFSET(void);
#define ComAowagieTextPdfTrueTypeFontSubSet_TABLE_OFFSET 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfTrueTypeFontSubSet, TABLE_OFFSET, jint)

inline jint ComAowagieTextPdfTrueTypeFontSubSet_get_TABLE_LENGTH(void);
#define ComAowagieTextPdfTrueTypeFontSubSet_TABLE_LENGTH 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfTrueTypeFontSubSet, TABLE_LENGTH, jint)

inline jint ComAowagieTextPdfTrueTypeFontSubSet_get_ARG_1_AND_2_ARE_WORDS(void);
#define ComAowagieTextPdfTrueTypeFontSubSet_ARG_1_AND_2_ARE_WORDS 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfTrueTypeFontSubSet, ARG_1_AND_2_ARE_WORDS, jint)

inline jint ComAowagieTextPdfTrueTypeFontSubSet_get_WE_HAVE_A_SCALE(void);
#define ComAowagieTextPdfTrueTypeFontSubSet_WE_HAVE_A_SCALE 8
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfTrueTypeFontSubSet, WE_HAVE_A_SCALE, jint)

inline jint ComAowagieTextPdfTrueTypeFontSubSet_get_MORE_COMPONENTS(void);
#define ComAowagieTextPdfTrueTypeFontSubSet_MORE_COMPONENTS 32
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfTrueTypeFontSubSet, MORE_COMPONENTS, jint)

inline jint ComAowagieTextPdfTrueTypeFontSubSet_get_WE_HAVE_AN_X_AND_Y_SCALE(void);
#define ComAowagieTextPdfTrueTypeFontSubSet_WE_HAVE_AN_X_AND_Y_SCALE 64
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfTrueTypeFontSubSet, WE_HAVE_AN_X_AND_Y_SCALE, jint)

inline jint ComAowagieTextPdfTrueTypeFontSubSet_get_WE_HAVE_A_TWO_BY_TWO(void);
#define ComAowagieTextPdfTrueTypeFontSubSet_WE_HAVE_A_TWO_BY_TWO 128
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfTrueTypeFontSubSet, WE_HAVE_A_TWO_BY_TWO, jint)

__attribute__((unused)) static void ComAowagieTextPdfTrueTypeFontSubSet_assembleFont(ComAowagieTextPdfTrueTypeFontSubSet *self);

__attribute__((unused)) static void ComAowagieTextPdfTrueTypeFontSubSet_createTableDirectory(ComAowagieTextPdfTrueTypeFontSubSet *self);

__attribute__((unused)) static void ComAowagieTextPdfTrueTypeFontSubSet_readLoca(ComAowagieTextPdfTrueTypeFontSubSet *self);

__attribute__((unused)) static void ComAowagieTextPdfTrueTypeFontSubSet_createNewGlyphTables(ComAowagieTextPdfTrueTypeFontSubSet *self);

__attribute__((unused)) static void ComAowagieTextPdfTrueTypeFontSubSet_locaTobytes(ComAowagieTextPdfTrueTypeFontSubSet *self);

__attribute__((unused)) static void ComAowagieTextPdfTrueTypeFontSubSet_flatGlyphs(ComAowagieTextPdfTrueTypeFontSubSet *self);

__attribute__((unused)) static void ComAowagieTextPdfTrueTypeFontSubSet_checkGlyphCompositeWithInt_(ComAowagieTextPdfTrueTypeFontSubSet *self, jint glyph);

__attribute__((unused)) static NSString *ComAowagieTextPdfTrueTypeFontSubSet_readStandardStringWithInt_(ComAowagieTextPdfTrueTypeFontSubSet *self, jint length);

__attribute__((unused)) static void ComAowagieTextPdfTrueTypeFontSubSet_writeFontShortWithInt_(ComAowagieTextPdfTrueTypeFontSubSet *self, jint n);

__attribute__((unused)) static void ComAowagieTextPdfTrueTypeFontSubSet_writeFontIntWithInt_(ComAowagieTextPdfTrueTypeFontSubSet *self, jint n);

__attribute__((unused)) static void ComAowagieTextPdfTrueTypeFontSubSet_writeFontStringWithNSString_(ComAowagieTextPdfTrueTypeFontSubSet *self, NSString *s);

__attribute__((unused)) static jint ComAowagieTextPdfTrueTypeFontSubSet_calculateChecksumWithByteArray_(ComAowagieTextPdfTrueTypeFontSubSet *self, IOSByteArray *b);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/TrueTypeFontSubSet.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfTrueTypeFontSubSet)


#line 66
@implementation ComAowagieTextPdfTrueTypeFontSubSet


#line 122
- (instancetype)initPackagePrivateWithNSString:(NSString *)fileName
  withComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)rf
                           withJavaUtilHashMap:(JavaUtilHashMap *)glyphsUsed
                                       withInt:(jint)directoryOffset
                                   withBoolean:(jboolean)includeCmap
                                   withBoolean:(jboolean)includeExtras {
  ComAowagieTextPdfTrueTypeFontSubSet_initPackagePrivateWithNSString_withComAowagieTextPdfRandomAccessFileOrArray_withJavaUtilHashMap_withInt_withBoolean_withBoolean_(self, fileName, rf, glyphsUsed, directoryOffset, includeCmap, includeExtras);
  return self;
}


#line 137
- (IOSByteArray *)process {
  @try {
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) reOpen];
    ComAowagieTextPdfTrueTypeFontSubSet_createTableDirectory(self);
    ComAowagieTextPdfTrueTypeFontSubSet_readLoca(self);
    ComAowagieTextPdfTrueTypeFontSubSet_flatGlyphs(self);
    ComAowagieTextPdfTrueTypeFontSubSet_createNewGlyphTables(self);
    ComAowagieTextPdfTrueTypeFontSubSet_locaTobytes(self);
    ComAowagieTextPdfTrueTypeFontSubSet_assembleFont(self);
    return self->outFont_;
  }
  @finally {
    @try {
      [self->rf_ close];
    }
    @catch (JavaLangException *e) {
    }
  }
}


#line 158
- (void)assembleFont {
  ComAowagieTextPdfTrueTypeFontSubSet_assembleFont(self);
}


#line 241
- (void)createTableDirectory {
  ComAowagieTextPdfTrueTypeFontSubSet_createTableDirectory(self);
}


#line 260
- (void)readLoca {
  ComAowagieTextPdfTrueTypeFontSubSet_readLoca(self);
}


#line 289
- (void)createNewGlyphTables {
  ComAowagieTextPdfTrueTypeFontSubSet_createNewGlyphTables(self);
}


#line 321
- (void)locaTobytes {
  ComAowagieTextPdfTrueTypeFontSubSet_locaTobytes(self);
}


#line 340
- (void)flatGlyphs {
  ComAowagieTextPdfTrueTypeFontSubSet_flatGlyphs(self);
}


#line 358
- (void)checkGlyphCompositeWithInt:(jint)glyph {
  ComAowagieTextPdfTrueTypeFontSubSet_checkGlyphCompositeWithInt_(self, glyph);
}


#line 403
- (NSString *)readStandardStringWithInt:(jint)length {
  return ComAowagieTextPdfTrueTypeFontSubSet_readStandardStringWithInt_(self, length);
}


#line 414
- (void)writeFontShortWithInt:(jint)n {
  ComAowagieTextPdfTrueTypeFontSubSet_writeFontShortWithInt_(self, n);
}


#line 419
- (void)writeFontIntWithInt:(jint)n {
  ComAowagieTextPdfTrueTypeFontSubSet_writeFontIntWithInt_(self, n);
}


#line 426
- (void)writeFontStringWithNSString:(NSString *)s {
  ComAowagieTextPdfTrueTypeFontSubSet_writeFontStringWithNSString_(self, s);
}


#line 432
- (jint)calculateChecksumWithByteArray:(IOSByteArray *)b {
  return ComAowagieTextPdfTrueTypeFontSubSet_calculateChecksumWithByteArray_(self, b);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 5, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithNSString:withComAowagieTextPdfRandomAccessFileOrArray:withJavaUtilHashMap:withInt:withBoolean:withBoolean:);
  methods[1].selector = @selector(process);
  methods[2].selector = @selector(assembleFont);
  methods[3].selector = @selector(createTableDirectory);
  methods[4].selector = @selector(readLoca);
  methods[5].selector = @selector(createNewGlyphTables);
  methods[6].selector = @selector(locaTobytes);
  methods[7].selector = @selector(flatGlyphs);
  methods[8].selector = @selector(checkGlyphCompositeWithInt:);
  methods[9].selector = @selector(readStandardStringWithInt:);
  methods[10].selector = @selector(writeFontShortWithInt:);
  methods[11].selector = @selector(writeFontIntWithInt:);
  methods[12].selector = @selector(writeFontStringWithNSString:);
  methods[13].selector = @selector(calculateChecksumWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tableNamesSimple", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "tableNamesCmap", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "tableNamesExtra", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "entrySelectors", "[I", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "TABLE_CHECKSUM", "I", .constantValue.asInt = ComAowagieTextPdfTrueTypeFontSubSet_TABLE_CHECKSUM, 0x1a, -1, -1, -1, -1 },
    { "TABLE_OFFSET", "I", .constantValue.asInt = ComAowagieTextPdfTrueTypeFontSubSet_TABLE_OFFSET, 0x1a, -1, -1, -1, -1 },
    { "TABLE_LENGTH", "I", .constantValue.asInt = ComAowagieTextPdfTrueTypeFontSubSet_TABLE_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "HEAD_LOCA_FORMAT_OFFSET", "I", .constantValue.asInt = ComAowagieTextPdfTrueTypeFontSubSet_HEAD_LOCA_FORMAT_OFFSET, 0x18, -1, -1, -1, -1 },
    { "ARG_1_AND_2_ARE_WORDS", "I", .constantValue.asInt = ComAowagieTextPdfTrueTypeFontSubSet_ARG_1_AND_2_ARE_WORDS, 0x1a, -1, -1, -1, -1 },
    { "WE_HAVE_A_SCALE", "I", .constantValue.asInt = ComAowagieTextPdfTrueTypeFontSubSet_WE_HAVE_A_SCALE, 0x1a, -1, -1, -1, -1 },
    { "MORE_COMPONENTS", "I", .constantValue.asInt = ComAowagieTextPdfTrueTypeFontSubSet_MORE_COMPONENTS, 0x1a, -1, -1, -1, -1 },
    { "WE_HAVE_AN_X_AND_Y_SCALE", "I", .constantValue.asInt = ComAowagieTextPdfTrueTypeFontSubSet_WE_HAVE_AN_X_AND_Y_SCALE, 0x1a, -1, -1, -1, -1 },
    { "WE_HAVE_A_TWO_BY_TWO", "I", .constantValue.asInt = ComAowagieTextPdfTrueTypeFontSubSet_WE_HAVE_A_TWO_BY_TWO, 0x1a, -1, -1, -1, -1 },
    { "tableDirectory_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rf_", "LComAowagieTextPdfRandomAccessFileOrArray;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fileName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "includeCmap_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "includeExtras_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "locaShortTable_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "locaTable_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "glyphsUsed_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "glyphsInList_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tableGlyphOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "newLocaTable_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "newLocaTableOut_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "newGlyfTable_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "glyfTableRealSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "locaTableRealSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "outFont_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fontPtr_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "directoryOffset_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LComAowagieTextPdfRandomAccessFileOrArray;LJavaUtilHashMap;IZZ", "LJavaIoIOException;LComAowagieTextDocumentException;", "LJavaIoIOException;", "checkGlyphComposite", "I", "readStandardString", "writeFontShort", "writeFontInt", "writeFontString", "LNSString;", "calculateChecksum", "[B", &ComAowagieTextPdfTrueTypeFontSubSet_tableNamesSimple, &ComAowagieTextPdfTrueTypeFontSubSet_tableNamesCmap, &ComAowagieTextPdfTrueTypeFontSubSet_tableNamesExtra, &ComAowagieTextPdfTrueTypeFontSubSet_entrySelectors };
  static const J2ObjcClassInfo _ComAowagieTextPdfTrueTypeFontSubSet = { "TrueTypeFontSubSet", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 14, 31, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfTrueTypeFontSubSet;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfTrueTypeFontSubSet class]) {
    ComAowagieTextPdfTrueTypeFontSubSet_tableNamesSimple = [IOSObjectArray newArrayWithObjects:(id[]){
#line 67
      @"cvt ", @"fpgm", @"glyf", @"head",
#line 68
      @"hhea", @"hmtx", @"loca", @"maxp", @"prep" } count:9 type:NSString_class_()];
      ComAowagieTextPdfTrueTypeFontSubSet_tableNamesCmap = [IOSObjectArray newArrayWithObjects:(id[]){
#line 69
        @"cmap", @"cvt ", @"fpgm", @"glyf", @"head",
#line 70
        @"hhea", @"hmtx", @"loca", @"maxp", @"prep" } count:10 type:NSString_class_()];
        ComAowagieTextPdfTrueTypeFontSubSet_tableNamesExtra = [IOSObjectArray newArrayWithObjects:(id[]){
#line 71
          @"OS/2", @"cmap", @"cvt ", @"fpgm", @"glyf", @"head",
#line 72
          @"hhea", @"hmtx", @"loca", @"maxp", @"name, prep" } count:11 type:NSString_class_()];
          ComAowagieTextPdfTrueTypeFontSubSet_entrySelectors = [IOSIntArray newArrayWithInts:(jint[]){
#line 73
            0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4 } count:21];
            J2OBJC_SET_INITIALIZED(ComAowagieTextPdfTrueTypeFontSubSet)
          }
        }

@end


#line 122
void ComAowagieTextPdfTrueTypeFontSubSet_initPackagePrivateWithNSString_withComAowagieTextPdfRandomAccessFileOrArray_withJavaUtilHashMap_withInt_withBoolean_withBoolean_(ComAowagieTextPdfTrueTypeFontSubSet *self, NSString *fileName, ComAowagieTextPdfRandomAccessFileOrArray *rf, JavaUtilHashMap *glyphsUsed, jint directoryOffset, jboolean includeCmap, jboolean includeExtras) {
  NSObject_init(self);
  
#line 123
  self->fileName_ = fileName;
  self->rf_ = rf;
  self->glyphsUsed_ = glyphsUsed;
  self->includeCmap_ = includeCmap;
  self->includeExtras_ = includeExtras;
  self->directoryOffset_ = directoryOffset;
  self->glyphsInList_ = new_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilHashMap *) nil_chk(glyphsUsed)) keySet]);
}


#line 122
ComAowagieTextPdfTrueTypeFontSubSet *new_ComAowagieTextPdfTrueTypeFontSubSet_initPackagePrivateWithNSString_withComAowagieTextPdfRandomAccessFileOrArray_withJavaUtilHashMap_withInt_withBoolean_withBoolean_(NSString *fileName, ComAowagieTextPdfRandomAccessFileOrArray *rf, JavaUtilHashMap *glyphsUsed, jint directoryOffset, jboolean includeCmap, jboolean includeExtras) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfTrueTypeFontSubSet, initPackagePrivateWithNSString_withComAowagieTextPdfRandomAccessFileOrArray_withJavaUtilHashMap_withInt_withBoolean_withBoolean_, fileName, rf, glyphsUsed, directoryOffset, includeCmap, includeExtras)
}


#line 122
ComAowagieTextPdfTrueTypeFontSubSet *create_ComAowagieTextPdfTrueTypeFontSubSet_initPackagePrivateWithNSString_withComAowagieTextPdfRandomAccessFileOrArray_withJavaUtilHashMap_withInt_withBoolean_withBoolean_(NSString *fileName, ComAowagieTextPdfRandomAccessFileOrArray *rf, JavaUtilHashMap *glyphsUsed, jint directoryOffset, jboolean includeCmap, jboolean includeExtras) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfTrueTypeFontSubSet, initPackagePrivateWithNSString_withComAowagieTextPdfRandomAccessFileOrArray_withJavaUtilHashMap_withInt_withBoolean_withBoolean_, fileName, rf, glyphsUsed, directoryOffset, includeCmap, includeExtras)
}


#line 158
void ComAowagieTextPdfTrueTypeFontSubSet_assembleFont(ComAowagieTextPdfTrueTypeFontSubSet *self) {
  IOSIntArray *tableLocation;
  jint fullFontSize = 0;
  IOSObjectArray *tableNames;
  if (self->includeExtras_) {
    tableNames = ComAowagieTextPdfTrueTypeFontSubSet_tableNamesExtra;
  }
  else {
    
#line 165
    if (self->includeCmap_) {
      tableNames = ComAowagieTextPdfTrueTypeFontSubSet_tableNamesCmap;
    }
    else {
      
#line 168
      tableNames = ComAowagieTextPdfTrueTypeFontSubSet_tableNamesSimple;
    }
  }
  jint tablesUsed = 2;
  jint len = 0;
  {
    IOSObjectArray *a__ =
#line 173
    tableNames;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *name = *b__++;
      
#line 174
      if ([((NSString *) nil_chk(name)) isEqual:@"glyf"] || [name isEqual:@"loca"]) {
        continue;
      }
      tableLocation = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tableDirectory_)) getWithId:name], [IOSIntArray class]);
      if (tableLocation == nil) {
        continue;
      }
      ++tablesUsed;
      fullFontSize += (IOSIntArray_Get(tableLocation, ComAowagieTextPdfTrueTypeFontSubSet_TABLE_LENGTH) + 3) & ~3;
    }
  }
  
#line 184
  fullFontSize += ((IOSByteArray *) nil_chk(self->newLocaTableOut_))->size_;
  fullFontSize += ((IOSByteArray *) nil_chk(self->newGlyfTable_))->size_;
  jint ref = 16 * tablesUsed + 12;
  fullFontSize += ref;
  self->outFont_ = [IOSByteArray newArrayWithLength:fullFontSize];
  self->fontPtr_ = 0;
  ComAowagieTextPdfTrueTypeFontSubSet_writeFontIntWithInt_(self, (jint) 0x00010000);
  ComAowagieTextPdfTrueTypeFontSubSet_writeFontShortWithInt_(self, tablesUsed);
  jint selector = IOSIntArray_Get(nil_chk(ComAowagieTextPdfTrueTypeFontSubSet_entrySelectors), tablesUsed);
  ComAowagieTextPdfTrueTypeFontSubSet_writeFontShortWithInt_(self, (JreLShift32(1, selector)) * 16);
  ComAowagieTextPdfTrueTypeFontSubSet_writeFontShortWithInt_(self, selector);
  ComAowagieTextPdfTrueTypeFontSubSet_writeFontShortWithInt_(self, (tablesUsed - (JreLShift32(1, selector))) * 16);
  {
    IOSObjectArray *a__ =
#line 196
    tableNames;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *name = *b__++;
      
#line 197
      tableLocation = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tableDirectory_)) getWithId:name], [IOSIntArray class]);
      if (tableLocation == nil) {
        continue;
      }
      ComAowagieTextPdfTrueTypeFontSubSet_writeFontStringWithNSString_(self, name);
      if ([((NSString *) nil_chk(name)) isEqual:@"glyf"]) {
        ComAowagieTextPdfTrueTypeFontSubSet_writeFontIntWithInt_(self, ComAowagieTextPdfTrueTypeFontSubSet_calculateChecksumWithByteArray_(self, self->newGlyfTable_));
        len = self->glyfTableRealSize_;
      }
      else if ([name isEqual:@"loca"]) {
        ComAowagieTextPdfTrueTypeFontSubSet_writeFontIntWithInt_(self, ComAowagieTextPdfTrueTypeFontSubSet_calculateChecksumWithByteArray_(self, self->newLocaTableOut_));
        len = self->locaTableRealSize_;
      }
      else {
        ComAowagieTextPdfTrueTypeFontSubSet_writeFontIntWithInt_(self, IOSIntArray_Get(tableLocation, ComAowagieTextPdfTrueTypeFontSubSet_TABLE_CHECKSUM));
        len = IOSIntArray_Get(tableLocation, ComAowagieTextPdfTrueTypeFontSubSet_TABLE_LENGTH);
      }
      ComAowagieTextPdfTrueTypeFontSubSet_writeFontIntWithInt_(self, ref);
      ComAowagieTextPdfTrueTypeFontSubSet_writeFontIntWithInt_(self, len);
      ref += (len + 3) & ~3;
    }
  }
  {
    IOSObjectArray *a__ =
#line 218
    tableNames;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *name = *b__++;
      
#line 219
      tableLocation = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tableDirectory_)) getWithId:name], [IOSIntArray class]);
      if (tableLocation == nil) {
        continue;
      }
      if ([((NSString *) nil_chk(name)) isEqual:@"glyf"]) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->newGlyfTable_, 0, self->outFont_, self->fontPtr_, ((IOSByteArray *) nil_chk(self->newGlyfTable_))->size_);
        self->fontPtr_ += ((IOSByteArray *) nil_chk(self->newGlyfTable_))->size_;
        self->newGlyfTable_ = nil;
      }
      else if ([name isEqual:@"loca"]) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->newLocaTableOut_, 0, self->outFont_, self->fontPtr_, ((IOSByteArray *) nil_chk(self->newLocaTableOut_))->size_);
        self->fontPtr_ += ((IOSByteArray *) nil_chk(self->newLocaTableOut_))->size_;
        self->newLocaTableOut_ = nil;
      }
      else {
        [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(tableLocation, ComAowagieTextPdfTrueTypeFontSubSet_TABLE_OFFSET)];
        [self->rf_ readFullyWithByteArray:self->outFont_ withInt:self->fontPtr_ withInt:IOSIntArray_Get(tableLocation, ComAowagieTextPdfTrueTypeFontSubSet_TABLE_LENGTH)];
        self->fontPtr_ += (IOSIntArray_Get(tableLocation, ComAowagieTextPdfTrueTypeFontSubSet_TABLE_LENGTH) + 3) & ~3;
      }
    }
  }
}


#line 241
void ComAowagieTextPdfTrueTypeFontSubSet_createTableDirectory(ComAowagieTextPdfTrueTypeFontSubSet *self) {
  self->tableDirectory_ = new_JavaUtilLinkedHashMap_init();
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:self->directoryOffset_];
  jint id_ = [self->rf_ readInt];
  if (id_ != (jint) 0x00010000) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$", self->fileName_, @" is not a true type file."));
  }
  jint num_tables = [self->rf_ readUnsignedShort];
  [self->rf_ skipBytesWithInt:6];
  for (jint k = 0; k < num_tables; ++k) {
    NSString *tag = ComAowagieTextPdfTrueTypeFontSubSet_readStandardStringWithInt_(self, 4);
    IOSIntArray *tableLocation = [IOSIntArray newArrayWithLength:3];
    *IOSIntArray_GetRef(tableLocation, ComAowagieTextPdfTrueTypeFontSubSet_TABLE_CHECKSUM) = [self->rf_ readInt];
    *IOSIntArray_GetRef(tableLocation, ComAowagieTextPdfTrueTypeFontSubSet_TABLE_OFFSET) = [self->rf_ readInt];
    *IOSIntArray_GetRef(tableLocation, ComAowagieTextPdfTrueTypeFontSubSet_TABLE_LENGTH) = [self->rf_ readInt];
    (void) [((JavaUtilHashMap *) nil_chk(self->tableDirectory_)) putWithId:tag withId:tableLocation];
  }
}

void ComAowagieTextPdfTrueTypeFontSubSet_readLoca(ComAowagieTextPdfTrueTypeFontSubSet *self) {
  IOSIntArray *tableLocation;
  tableLocation = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tableDirectory_)) getWithId:@"head"], [IOSIntArray class]);
  if (tableLocation == nil) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$", @"Table 'head' does not exist in ", self->fileName_));
  }
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(tableLocation, ComAowagieTextPdfTrueTypeFontSubSet_TABLE_OFFSET) + ComAowagieTextPdfTrueTypeFontSubSet_HEAD_LOCA_FORMAT_OFFSET];
  self->locaShortTable_ = ([self->rf_ readUnsignedShort] == 0);
  tableLocation = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tableDirectory_)) getWithId:@"loca"], [IOSIntArray class]);
  if (tableLocation == nil) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$", @"Table 'loca' does not exist in ", self->fileName_));
  }
  [self->rf_ seekWithInt:IOSIntArray_Get(tableLocation, ComAowagieTextPdfTrueTypeFontSubSet_TABLE_OFFSET)];
  if (self->locaShortTable_) {
    jint entries = JreIntDiv(IOSIntArray_Get(tableLocation, ComAowagieTextPdfTrueTypeFontSubSet_TABLE_LENGTH), 2);
    self->locaTable_ = [IOSIntArray newArrayWithLength:entries];
    for (jint k = 0; k < entries; ++k) {
      *IOSIntArray_GetRef(nil_chk(self->locaTable_), k) = [self->rf_ readUnsignedShort] * 2;
    }
  }
  else {
    jint entries = JreIntDiv(IOSIntArray_Get(tableLocation, ComAowagieTextPdfTrueTypeFontSubSet_TABLE_LENGTH), 4);
    self->locaTable_ = [IOSIntArray newArrayWithLength:entries];
    for (jint k = 0; k < entries; ++k) {
      *IOSIntArray_GetRef(nil_chk(self->locaTable_), k) = [self->rf_ readInt];
    }
  }
}

void ComAowagieTextPdfTrueTypeFontSubSet_createNewGlyphTables(ComAowagieTextPdfTrueTypeFontSubSet *self) {
  self->newLocaTable_ = [IOSIntArray newArrayWithLength:((IOSIntArray *) nil_chk(self->locaTable_))->size_];
  IOSIntArray *activeGlyphs = [IOSIntArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(self->glyphsInList_)) size]];
  for (jint k = 0; k < activeGlyphs->size_; ++k) {
    *IOSIntArray_GetRef(activeGlyphs, k) = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([self->glyphsInList_ getWithInt:k], [JavaLangInteger class])))) intValue];
  }
  JavaUtilArrays_sortWithIntArray_(activeGlyphs);
  jint glyfSize = 0;
  {
    IOSIntArray *a__ =
#line 297
    activeGlyphs;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint glyph = *b__++;
      
#line 298
      glyfSize += IOSIntArray_Get(nil_chk(self->locaTable_), glyph + 1) - IOSIntArray_Get(self->locaTable_, glyph);
    }
  }
  
#line 300
  self->glyfTableRealSize_ = glyfSize;
  glyfSize = (glyfSize + 3) & ~3;
  self->newGlyfTable_ = [IOSByteArray newArrayWithLength:glyfSize];
  jint glyfPtr = 0;
  jint listGlyf = 0;
  for (jint k = 0; k < ((IOSIntArray *) nil_chk(self->newLocaTable_))->size_; ++k) {
    *IOSIntArray_GetRef(self->newLocaTable_, k) = glyfPtr;
    if (listGlyf < activeGlyphs->size_ && IOSIntArray_Get(activeGlyphs, listGlyf) == k) {
      ++listGlyf;
      *IOSIntArray_GetRef(self->newLocaTable_, k) = glyfPtr;
      jint start = IOSIntArray_Get(nil_chk(self->locaTable_), k);
      jint len = IOSIntArray_Get(self->locaTable_, k + 1) - start;
      if (len > 0) {
        [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:self->tableGlyphOffset_ + start];
        [self->rf_ readFullyWithByteArray:self->newGlyfTable_ withInt:glyfPtr withInt:len];
        glyfPtr += len;
      }
    }
  }
}


#line 321
void ComAowagieTextPdfTrueTypeFontSubSet_locaTobytes(ComAowagieTextPdfTrueTypeFontSubSet *self) {
  if (self->locaShortTable_) {
    self->locaTableRealSize_ = ((IOSIntArray *) nil_chk(self->newLocaTable_))->size_ * 2;
  }
  else {
    
#line 325
    self->locaTableRealSize_ = ((IOSIntArray *) nil_chk(self->newLocaTable_))->size_ * 4;
  }
  self->newLocaTableOut_ = [IOSByteArray newArrayWithLength:(self->locaTableRealSize_ + 3) & ~3];
  self->outFont_ = self->newLocaTableOut_;
  self->fontPtr_ = 0;
  {
    IOSIntArray *a__ =
#line 330
    self->newLocaTable_;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint element = *b__++;
      
#line 331
      if (self->locaShortTable_) {
        ComAowagieTextPdfTrueTypeFontSubSet_writeFontShortWithInt_(self, JreIntDiv(element, 2));
      }
      else {
        
#line 334
        ComAowagieTextPdfTrueTypeFontSubSet_writeFontIntWithInt_(self, element);
      }
    }
  }
}


#line 340
void ComAowagieTextPdfTrueTypeFontSubSet_flatGlyphs(ComAowagieTextPdfTrueTypeFontSubSet *self) {
  IOSIntArray *tableLocation;
  tableLocation = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tableDirectory_)) getWithId:@"glyf"], [IOSIntArray class]);
  if (tableLocation == nil) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$", @"Table 'glyf' does not exist in ", self->fileName_));
  }
  JavaLangInteger *glyph0 = new_JavaLangInteger_initWithInt_(0);
  if (![((JavaUtilHashMap *) nil_chk(self->glyphsUsed_)) containsKeyWithId:glyph0]) {
    (void) [self->glyphsUsed_ putWithId:glyph0 withId:nil];
    [((JavaUtilArrayList *) nil_chk(self->glyphsInList_)) addWithId:glyph0];
  }
  self->tableGlyphOffset_ = IOSIntArray_Get(tableLocation, ComAowagieTextPdfTrueTypeFontSubSet_TABLE_OFFSET);
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(self->glyphsInList_)) size]; ++k) {
    jint glyph = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([self->glyphsInList_ getWithInt:k], [JavaLangInteger class])))) intValue];
    ComAowagieTextPdfTrueTypeFontSubSet_checkGlyphCompositeWithInt_(self, glyph);
  }
}

void ComAowagieTextPdfTrueTypeFontSubSet_checkGlyphCompositeWithInt_(ComAowagieTextPdfTrueTypeFontSubSet *self, jint glyph) {
  jint start = IOSIntArray_Get(nil_chk(self->locaTable_), glyph);
  if (start == IOSIntArray_Get(self->locaTable_, glyph + 1)) {
    return;
  }
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:self->tableGlyphOffset_ + start];
  jint numContours = [self->rf_ readShort];
  if (numContours >= 0) {
    return;
  }
  [self->rf_ skipBytesWithInt:8];
  for (; ; ) {
    jint flags = [self->rf_ readUnsignedShort];
    JavaLangInteger *cGlyph = new_JavaLangInteger_initWithInt_([self->rf_ readUnsignedShort]);
    if (![((JavaUtilHashMap *) nil_chk(self->glyphsUsed_)) containsKeyWithId:cGlyph]) {
      (void) [self->glyphsUsed_ putWithId:cGlyph withId:nil];
      [((JavaUtilArrayList *) nil_chk(self->glyphsInList_)) addWithId:cGlyph];
    }
    if ((flags & ComAowagieTextPdfTrueTypeFontSubSet_MORE_COMPONENTS) == 0) {
      return;
    }
    jint skip;
    if ((flags & ComAowagieTextPdfTrueTypeFontSubSet_ARG_1_AND_2_ARE_WORDS) != 0) {
      skip = 4;
    }
    else {
      
#line 383
      skip = 2;
    }
    if ((flags & ComAowagieTextPdfTrueTypeFontSubSet_WE_HAVE_A_SCALE) != 0) {
      skip += 2;
    }
    else
#line 387
    if ((flags & ComAowagieTextPdfTrueTypeFontSubSet_WE_HAVE_AN_X_AND_Y_SCALE) != 0) {
      skip += 4;
    }
    if ((flags & ComAowagieTextPdfTrueTypeFontSubSet_WE_HAVE_A_TWO_BY_TWO) != 0) {
      skip += 8;
    }
    [self->rf_ skipBytesWithInt:skip];
  }
}

NSString *ComAowagieTextPdfTrueTypeFontSubSet_readStandardStringWithInt_(ComAowagieTextPdfTrueTypeFontSubSet *self, jint length) {
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:length];
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readFullyWithByteArray:buf];
  @try {
    return [NSString java_stringWithBytes:buf charsetName:ComAowagieTextPdfBaseFont_WINANSI];
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}

void ComAowagieTextPdfTrueTypeFontSubSet_writeFontShortWithInt_(ComAowagieTextPdfTrueTypeFontSubSet *self, jint n) {
  *IOSByteArray_GetRef(nil_chk(self->outFont_), self->fontPtr_++) = (jbyte) (JreRShift32(n, 8));
  *IOSByteArray_GetRef(self->outFont_, self->fontPtr_++) = (jbyte) n;
}

void ComAowagieTextPdfTrueTypeFontSubSet_writeFontIntWithInt_(ComAowagieTextPdfTrueTypeFontSubSet *self, jint n) {
  *IOSByteArray_GetRef(nil_chk(self->outFont_), self->fontPtr_++) = (jbyte) (JreRShift32(n, 24));
  *IOSByteArray_GetRef(self->outFont_, self->fontPtr_++) = (jbyte) (JreRShift32(n, 16));
  *IOSByteArray_GetRef(self->outFont_, self->fontPtr_++) = (jbyte) (JreRShift32(n, 8));
  *IOSByteArray_GetRef(self->outFont_, self->fontPtr_++) = (jbyte) n;
}

void ComAowagieTextPdfTrueTypeFontSubSet_writeFontStringWithNSString_(ComAowagieTextPdfTrueTypeFontSubSet *self, NSString *s) {
  IOSByteArray *b = ComAowagieTextPdfPdfEncodings_convertToBytesWithNSString_withNSString_(s, ComAowagieTextPdfBaseFont_WINANSI);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, self->outFont_, self->fontPtr_, ((IOSByteArray *) nil_chk(b))->size_);
  self->fontPtr_ += b->size_;
}

jint ComAowagieTextPdfTrueTypeFontSubSet_calculateChecksumWithByteArray_(ComAowagieTextPdfTrueTypeFontSubSet *self, IOSByteArray *b) {
  jint len = JreIntDiv(((IOSByteArray *) nil_chk(b))->size_, 4);
  jint v0 = 0;
  jint v1 = 0;
  jint v2 = 0;
  jint v3 = 0;
  jint ptr = 0;
  for (jint k = 0; k < len; ++k) {
    v3 += IOSByteArray_Get(b, ptr++) & (jint) 0xff;
    v2 += IOSByteArray_Get(b, ptr++) & (jint) 0xff;
    v1 += IOSByteArray_Get(b, ptr++) & (jint) 0xff;
    v0 += IOSByteArray_Get(b, ptr++) & (jint) 0xff;
  }
  return v0 + (JreLShift32(v1, 8)) + (JreLShift32(v2, 16)) + (JreLShift32(v3, 24));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfTrueTypeFontSubSet)
