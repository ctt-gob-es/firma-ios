//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/codec/TIFFField.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComAowagieTextPdfCodecTIFFField")
#ifdef RESTRICT_ComAowagieTextPdfCodecTIFFField
#define INCLUDE_ALL_ComAowagieTextPdfCodecTIFFField 0
#else
#define INCLUDE_ALL_ComAowagieTextPdfCodecTIFFField 1
#endif
#undef RESTRICT_ComAowagieTextPdfCodecTIFFField

#if !defined (ComAowagieTextPdfCodecTIFFField_) && (INCLUDE_ALL_ComAowagieTextPdfCodecTIFFField || defined(INCLUDE_ComAowagieTextPdfCodecTIFFField))
#define ComAowagieTextPdfCodecTIFFField_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSByteArray;
@class IOSCharArray;
@class IOSDoubleArray;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@class IOSShortArray;

/*!
 @brief A class representing a field in a TIFF 6.0 Image File Directory.
 <p> The TIFF file format is described in more detail in the
  comments for the TIFFDescriptor class. 
 <p> A field in a TIFF Image File Directory (IFD).  A field is defined
  as a sequence of values of identical data type.  TIFF 6.0 defines
  12 data types, which are mapped internally onto the Java data types
  byte, int, long, float, and double. 
 <p><b> This class is not a committed part of the JAI API.  It may
  be removed or changed in future releases of JAI.</b>
 - seealso: TIFFDirectory
 */
@interface ComAowagieTextPdfCodecTIFFField : NSObject < JavaLangComparable, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Compares this <code>TIFFField</code> with another 
 <code>TIFFField</code> by comparing the tags.
 <p><b>Note: this class has a natural ordering that is inconsistent
  with <code>equals()</code>.</b>
 @param o Object
 @return int
 @throw IllegalArgumentExceptionif the parameter is <code>null</code>.
 @throw ClassCastExceptionif the parameter is not a
          <code>TIFFField</code>.
 */
- (jint)compareToWithId:(id)o;

/*!
 @brief Returns the data as an uninterpreted array of bytes.
 The type of the field must be one of TIFF_BYTE, TIFF_SBYTE,
  or TIFF_UNDEFINED; 
 <p> For data in TIFF_BYTE format, the application must take
  care when promoting the data to longer integral types
  to avoid sign extension. 
 <p> A ClassCastException will be thrown if the field is not
  of type TIFF_BYTE, TIFF_SBYTE, or TIFF_UNDEFINED.
 @return Bytes
 */
- (IOSByteArray *)getAsBytes;

/*!
 @brief Returns TIFF_SHORT data as an array of chars (unsigned 16-bit
  integers).
 <p> A ClassCastException will be thrown if the field is not
  of type TIFF_SHORT.
 @return Chars
 */
- (IOSCharArray *)getAsChars;

/*!
 @brief Returns TIFF_DOUBLE data as an array of doubles.
 <p> A ClassCastException will be thrown if the field is not
  of type TIFF_DOUBLE.
 @return Doubles
 */
- (IOSDoubleArray *)getAsDoubles;

/*!
 @brief Returns TIFF_FLOAT data as an array of floats.
 <p> A ClassCastException will be thrown if the field is not
  of type TIFF_FLOAT.
 @return Floats
 */
- (IOSFloatArray *)getAsFloats;

/*!
 @brief Returns TIFF_SLONG data as an array of ints (signed 32-bit
  integers).
 <p> A ClassCastException will be thrown if the field is not
  of type TIFF_SLONG.
 @return Ints
 */
- (IOSIntArray *)getAsInts;

/*!
 @brief Returns TIFF_LONG data as an array of longs (signed 64-bit
  integers).
 <p> A ClassCastException will be thrown if the field is not
  of type TIFF_LONG.
 @return Longs
 */
- (IOSLongArray *)getAsLongs;

/*!
 @brief Returns TIFF_RATIONAL data as an array of 2-element arrays of longs.
 <p> A ClassCastException will be thrown if the field is not
  of type TIFF_RATTIONAL.
 @return Rationals
 */
- (IOSObjectArray *)getAsRationals;

/*!
 @brief Returns TIFF_SSHORT data as an array of shorts (signed 16-bit
  integers).
 <p> A ClassCastException will be thrown if the field is not
  of type TIFF_SSHORT.
 @return Shorts
 */
- (IOSShortArray *)getAsShorts;

/*!
 @brief Returns TIFF_SRATIONAL data as an array of 2-element arrays of ints.
 <p> A ClassCastException will be thrown if the field is not
  of type TIFF_SRATIONAL.
 @return Rationals
 */
- (IOSObjectArray *)getAsSRationals;

/*!
 @brief Returns the number of elements in the IFD.
 @return Count
 */
- (jint)getCount;

/*!
 @brief Returns the tag number, between 0 and 65535.
 @return Tag
 */
- (jint)getTag;

/*!
 @brief Returns the type of the data stored in the IFD.
 For a TIFF6.0 file, the value will equal one of the
  TIFF_ constants defined in this class.  For future
  revisions of TIFF, higher values are possible.
 @return Type
 */
- (jint)getType;

#pragma mark Package-Private

/*!
 @brief The default constructor.
 */
- (instancetype)initPackagePrivate;

/*!
 @brief Constructs a TIFFField with arbitrary data.The data
  parameter must be an array of a Java type appropriate for the
  type of the TIFF field.
 Since there is no available 32-bit
  unsigned data type, long is used. The mapping between types is
  as follows:
  TIFF_BYTE: byte
  TIFF_ASCII: String
  TIFF_SHORT: char
  TIFF_LONG: long
  TIFF_RATIONAL: long[2]
  TIFF_SBYTE: byte
  TIFF_UNDEFINED: byte
  TIFF_SSHORT: short
  TIFF_SLONG: int
  TIFF_SRATIONAL: int[2]
  TIFF_FLOAT: float
  TIFF_DOUBLE: double
 @param tag Tag
 @param type Type
 @param count Count
 @param data Data
 */
- (instancetype)initPackagePrivateWithInt:(jint)tag
                                  withInt:(jint)type
                                  withInt:(jint)count
                                   withId:(id)data;

/*!
 @brief Returns data in any numerical format as a float.Data in
  TIFF_SRATIONAL or TIFF_RATIONAL format are evaluated by
  dividing the numerator into the denominator using
  double-precision arithmetic.
 <p> A ClassCastException will be thrown if the field is of
  type TIFF_UNDEFINED or TIFF_ASCII.
 @param index Index
 @return Double
 */
- (jdouble)getAsDoubleWithInt:(jint)index;

/*!
 @brief Returns data in any numerical format as a float.Data in
  TIFF_SRATIONAL or TIFF_RATIONAL format are evaluated by
  dividing the numerator into the denominator using
  double-precision arithmetic and then truncating to single
  precision.
 Data in TIFF_SLONG, TIFF_LONG, or TIFF_DOUBLE
  format may suffer from truncation. 
 <p> A ClassCastException will be thrown if the field is
  of type TIFF_UNDEFINED or TIFF_ASCII.
 @param index Index
 @return Float
 */
- (jfloat)getAsFloatWithInt:(jint)index;

/*!
 @brief Returns data in TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED, TIFF_SHORT,
  TIFF_SSHORT, or TIFF_SLONG format as an int.
 <p> TIFF_BYTE and TIFF_UNDEFINED data are treated as unsigned;
  that is, no sign extension will take place and the returned
  value will be in the range [0, 255].  TIFF_SBYTE data will
  be returned in the range [-128, 127]. 
 <p> A ClassCastException will be thrown if the field is not of
  type TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED, TIFF_SHORT,
  TIFF_SSHORT, or TIFF_SLONG.
 @param index Index
 @return Int
 */
- (jint)getAsIntWithInt:(jint)index;

/*!
 @brief Returns data in TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED, TIFF_SHORT,
  TIFF_SSHORT, TIFF_SLONG, or TIFF_LONG format as a long.
 <p> TIFF_BYTE and TIFF_UNDEFINED data are treated as unsigned;
  that is, no sign extension will take place and the returned
  value will be in the range [0, 255].  TIFF_SBYTE data will
  be returned in the range [-128, 127]. 
 <p> A ClassCastException will be thrown if the field is not of
  type TIFF_BYTE, TIFF_SBYTE, TIFF_UNDEFINED, TIFF_SHORT,
  TIFF_SSHORT, TIFF_SLONG, or TIFF_LONG.
 @param index Index
 @return Long
 */
- (jlong)getAsLongWithInt:(jint)index;

/*!
 @brief Returns a TIFF_RATIONAL data item as a two-element array
  of ints.
 <p> A ClassCastException will be thrown if the field is not
  of type TIFF_RATIONAL.
 @param index Index
 @return Rational
 */
- (IOSLongArray *)getAsRationalWithInt:(jint)index;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfCodecTIFFField)

/*!
 @brief Flag for 8 bit unsigned integers.
 */
inline jint ComAowagieTextPdfCodecTIFFField_get_TIFF_BYTE(void);
#define ComAowagieTextPdfCodecTIFFField_TIFF_BYTE 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecTIFFField, TIFF_BYTE, jint)

/*!
 @brief Flag for null-terminated ASCII strings.
 */
inline jint ComAowagieTextPdfCodecTIFFField_get_TIFF_ASCII(void);
#define ComAowagieTextPdfCodecTIFFField_TIFF_ASCII 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecTIFFField, TIFF_ASCII, jint)

/*!
 @brief Flag for 16 bit unsigned integers.
 */
inline jint ComAowagieTextPdfCodecTIFFField_get_TIFF_SHORT(void);
#define ComAowagieTextPdfCodecTIFFField_TIFF_SHORT 3
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecTIFFField, TIFF_SHORT, jint)

/*!
 @brief Flag for 32 bit unsigned integers.
 */
inline jint ComAowagieTextPdfCodecTIFFField_get_TIFF_LONG(void);
#define ComAowagieTextPdfCodecTIFFField_TIFF_LONG 4
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecTIFFField, TIFF_LONG, jint)

/*!
 @brief Flag for pairs of 32 bit unsigned integers.
 */
inline jint ComAowagieTextPdfCodecTIFFField_get_TIFF_RATIONAL(void);
#define ComAowagieTextPdfCodecTIFFField_TIFF_RATIONAL 5
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecTIFFField, TIFF_RATIONAL, jint)

/*!
 @brief Flag for 8 bit signed integers.
 */
inline jint ComAowagieTextPdfCodecTIFFField_get_TIFF_SBYTE(void);
#define ComAowagieTextPdfCodecTIFFField_TIFF_SBYTE 6
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecTIFFField, TIFF_SBYTE, jint)

/*!
 @brief Flag for 8 bit uninterpreted bytes.
 */
inline jint ComAowagieTextPdfCodecTIFFField_get_TIFF_UNDEFINED(void);
#define ComAowagieTextPdfCodecTIFFField_TIFF_UNDEFINED 7
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecTIFFField, TIFF_UNDEFINED, jint)

/*!
 @brief Flag for 16 bit signed integers.
 */
inline jint ComAowagieTextPdfCodecTIFFField_get_TIFF_SSHORT(void);
#define ComAowagieTextPdfCodecTIFFField_TIFF_SSHORT 8
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecTIFFField, TIFF_SSHORT, jint)

/*!
 @brief Flag for 32 bit signed integers.
 */
inline jint ComAowagieTextPdfCodecTIFFField_get_TIFF_SLONG(void);
#define ComAowagieTextPdfCodecTIFFField_TIFF_SLONG 9
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecTIFFField, TIFF_SLONG, jint)

/*!
 @brief Flag for pairs of 32 bit signed integers.
 */
inline jint ComAowagieTextPdfCodecTIFFField_get_TIFF_SRATIONAL(void);
#define ComAowagieTextPdfCodecTIFFField_TIFF_SRATIONAL 10
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecTIFFField, TIFF_SRATIONAL, jint)

/*!
 @brief Flag for 32 bit IEEE floats.
 */
inline jint ComAowagieTextPdfCodecTIFFField_get_TIFF_FLOAT(void);
#define ComAowagieTextPdfCodecTIFFField_TIFF_FLOAT 11
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecTIFFField, TIFF_FLOAT, jint)

/*!
 @brief Flag for 64 bit IEEE doubles.
 */
inline jint ComAowagieTextPdfCodecTIFFField_get_TIFF_DOUBLE(void);
#define ComAowagieTextPdfCodecTIFFField_TIFF_DOUBLE 12
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecTIFFField, TIFF_DOUBLE, jint)

FOUNDATION_EXPORT void ComAowagieTextPdfCodecTIFFField_initPackagePrivate(ComAowagieTextPdfCodecTIFFField *self);

FOUNDATION_EXPORT ComAowagieTextPdfCodecTIFFField *new_ComAowagieTextPdfCodecTIFFField_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfCodecTIFFField *create_ComAowagieTextPdfCodecTIFFField_initPackagePrivate(void);

FOUNDATION_EXPORT void ComAowagieTextPdfCodecTIFFField_initPackagePrivateWithInt_withInt_withInt_withId_(ComAowagieTextPdfCodecTIFFField *self, jint tag, jint type, jint count, id data);

FOUNDATION_EXPORT ComAowagieTextPdfCodecTIFFField *new_ComAowagieTextPdfCodecTIFFField_initPackagePrivateWithInt_withInt_withInt_withId_(jint tag, jint type, jint count, id data) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfCodecTIFFField *create_ComAowagieTextPdfCodecTIFFField_initPackagePrivateWithInt_withInt_withInt_withId_(jint tag, jint type, jint count, id data);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfCodecTIFFField)

#endif

#pragma pop_macro("INCLUDE_ALL_ComAowagieTextPdfCodecTIFFField")
