//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/TextField.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComAowagieTextPdfTextField")
#ifdef RESTRICT_ComAowagieTextPdfTextField
#define INCLUDE_ALL_ComAowagieTextPdfTextField 0
#else
#define INCLUDE_ALL_ComAowagieTextPdfTextField 1
#endif
#undef RESTRICT_ComAowagieTextPdfTextField

#if !defined (ComAowagieTextPdfTextField_) && (INCLUDE_ALL_ComAowagieTextPdfTextField || defined(INCLUDE_ComAowagieTextPdfTextField))
#define ComAowagieTextPdfTextField_

#define RESTRICT_ComAowagieTextPdfBaseField 1
#define INCLUDE_ComAowagieTextPdfBaseField 1
#include "com/aowagie/text/pdf/BaseField.h"

@class ComAowagieTextPdfBaseFont;
@class ComAowagieTextPdfPdfAppearance;
@class ComAowagieTextPdfPdfFormField;
@class ComAowagieTextPdfPdfWriter;
@class ComAowagieTextRectangle;
@class IOSObjectArray;
@class JavaUtilArrayList;

/*!
 @brief Supports text, combo and list fields generating the correct appearances.
 All the option in the Acrobat GUI are supported in an easy to use API.
 @author Paulo Soares (psoares@@consiste.pt)
 */
@interface ComAowagieTextPdfTextField : ComAowagieTextPdfBaseField

#pragma mark Public

/*!
 @brief Get the <code>PdfAppearance</code> of a text or combo field
 @throw IOExceptionon error
 @throw DocumentExceptionon error
 @return A <code>PdfAppearance</code>
 */
- (ComAowagieTextPdfPdfAppearance *)getAppearance;

/*!
 @brief Gets the export values in list/combo fields.
 @return the export values in list/combo fields
 */
- (IOSObjectArray *)getChoiceExports;

/*!
 @brief Gets the choices to be presented to the user in list/combo fields.
 @return the choices to be presented to the user
 */
- (IOSObjectArray *)getChoices;

/*!
 @brief Gets the zero based index of the selected item.
 @return the zero based index of the selected item
 */
- (jint)getChoiceSelection;

/*!
 @brief Gets a new combo field.
 @throw IOExceptionon error
 @throw DocumentExceptionon error
 @return a new combo field
 */
- (ComAowagieTextPdfPdfFormField *)getComboField;

/*!
 @brief Gets the default text.
 @return the default text
 */
- (NSString *)getDefaultText;

/*!
 @brief Gets the extensionFont.This font will be searched before the
  substitution fonts.
 It may be <code>null</code>.
 @return the extensionFont
 */
- (ComAowagieTextPdfBaseFont *)getExtensionFont;

/*!
 @brief Gets a new list field.
 @throw IOExceptionon error
 @throw DocumentExceptionon error
 @return a new list field
 */
- (ComAowagieTextPdfPdfFormField *)getListField;

/*!
 @brief Gets the list of substitution fonts.The list is composed of <CODE>BaseFont</CODE> and can be <CODE>null</CODE>.
 The fonts in this list will be used if the original
  font doesn't contain the needed glyphs.
 @return the list
 */
- (JavaUtilArrayList *)getSubstitutionFonts;

/*!
 @brief Gets a new text field.
 @throw IOExceptionon error
 @throw DocumentExceptionon error
 @return a new text field
 */
- (ComAowagieTextPdfPdfFormField *)getTextField;

/*!
 @brief Sets the export values in list/combo fields.If this array
  is <CODE>null</CODE> then the choice values will also be used
  as the export values.
 @param choiceExports the export values in list/combo fields
 */
- (void)setChoiceExportsWithNSStringArray:(IOSObjectArray *)choiceExports;

/*!
 @brief Sets the choices to be presented to the user in list/combo fields.
 @param choices the choices to be presented to the user
 */
- (void)setChoicesWithNSStringArray:(IOSObjectArray *)choices;

/*!
 @brief Sets the zero based index of the selected item.
 @param choiceSelection the zero based index of the selected item
 */
- (void)setChoiceSelectionWithInt:(jint)choiceSelection;

/*!
 @brief Sets the default text.It is only meaningful for text fields.
 @param defaultText the default text
 */
- (void)setDefaultTextWithNSString:(NSString *)defaultText;

/*!
 @brief Sets the extensionFont.This font will be searched before the
  substitution fonts.
 It may be <code>null</code>.
 @param extensionFont New value of property extensionFont.
 */
- (void)setExtensionFontWithComAowagieTextPdfBaseFont:(ComAowagieTextPdfBaseFont *)extensionFont;

/*!
 @brief Sets a list of substitution fonts.The list is composed of <CODE>BaseFont</CODE> and can also be <CODE>null</CODE>.
 The fonts in this list will be used if the original
  font doesn't contain the needed glyphs.
 @param substitutionFonts the list
 */
- (void)setSubstitutionFontsWithJavaUtilArrayList:(JavaUtilArrayList *)substitutionFonts;

#pragma mark Package-Private

/*!
 @brief Creates a new <CODE>TextField</CODE>.
 @param writer the document  <CODE> PdfWriter </CODE>
 @param box the field location and dimensions
 @param fieldName the field name. If  <CODE> null </CODE>  only the widget keys
   will be included in the field allowing it to be used as a kid field.
 */
- (instancetype)initPackagePrivateWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
                                     withComAowagieTextRectangle:(ComAowagieTextRectangle *)box
                                                    withNSString:(NSString *)fieldName;

/*!
 @brief Get the <code>PdfAppearance</code> of a list field
 @throw IOExceptionon error
 @throw DocumentExceptionon error
 @return A <code>PdfAppearance</code>
 */
- (ComAowagieTextPdfPdfAppearance *)getListAppearance;

- (jint)getTopFirst;

/*!
 @brief Sets extra margins in text fields to better mimic the Acrobat layout.
 @param extraMarginLeft the extra margin left
 @param extraMarginTop the extra margin top
 */
- (void)setExtraMarginWithFloat:(jfloat)extraMarginLeft
                      withFloat:(jfloat)extraMarginTop;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfTextField)

FOUNDATION_EXPORT void ComAowagieTextPdfTextField_initPackagePrivateWithComAowagieTextPdfPdfWriter_withComAowagieTextRectangle_withNSString_(ComAowagieTextPdfTextField *self, ComAowagieTextPdfPdfWriter *writer, ComAowagieTextRectangle *box, NSString *fieldName);

FOUNDATION_EXPORT ComAowagieTextPdfTextField *new_ComAowagieTextPdfTextField_initPackagePrivateWithComAowagieTextPdfPdfWriter_withComAowagieTextRectangle_withNSString_(ComAowagieTextPdfPdfWriter *writer, ComAowagieTextRectangle *box, NSString *fieldName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfTextField *create_ComAowagieTextPdfTextField_initPackagePrivateWithComAowagieTextPdfPdfWriter_withComAowagieTextRectangle_withNSString_(ComAowagieTextPdfPdfWriter *writer, ComAowagieTextRectangle *box, NSString *fieldName);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfTextField)

#endif

#pragma pop_macro("INCLUDE_ALL_ComAowagieTextPdfTextField")
