//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfEFStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/aowagie/text/pdf/OutputStreamCounter.h"
#include "com/aowagie/text/pdf/OutputStreamEncryption.h"
#include "com/aowagie/text/pdf/PdfArray.h"
#include "com/aowagie/text/pdf/PdfDictionary.h"
#include "com/aowagie/text/pdf/PdfEFStream.h"
#include "com/aowagie/text/pdf/PdfEncryption.h"
#include "com/aowagie/text/pdf/PdfName.h"
#include "com/aowagie/text/pdf/PdfNull.h"
#include "com/aowagie/text/pdf/PdfNumber.h"
#include "com/aowagie/text/pdf/PdfObject.h"
#include "com/aowagie/text/pdf/PdfStream.h"
#include "com/aowagie/text/pdf/PdfWriter.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/util/zip/Deflater.h"
#include "java/util/zip/DeflaterOutputStream.h"

#if !__has_feature(objc_arc)
#error "com/aowagie/text/pdf/PdfEFStream must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfEFStream.java"


#line 64
@implementation ComAowagieTextPdfPdfEFStream


#line 71
- (instancetype)initPackagePrivateWithJavaIoInputStream:(JavaIoInputStream *)inArg
                         withComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer {
  ComAowagieTextPdfPdfEFStream_initPackagePrivateWithJavaIoInputStream_withComAowagieTextPdfPdfWriter_(self, inArg, writer);
  return self;
}


#line 79
- (instancetype)initPackagePrivateWithByteArray:(IOSByteArray *)fileStore {
  ComAowagieTextPdfPdfEFStream_initPackagePrivateWithByteArray_(self, fileStore);
  return self;
}


#line 86
- (void)toPdfWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
                     withJavaIoOutputStream:(JavaIoOutputStream *)os {
  if (self->inputStream_ != nil && self->compressed_) {
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, FLATEDECODE)];
  }
  ComAowagieTextPdfPdfEncryption *crypto = nil;
  if (writer != nil) {
    crypto = [writer getEncryption];
  }
  if (crypto != nil) {
    ComAowagieTextPdfPdfObject *filter = [self getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER)];
    if (filter != nil) {
      if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, CRYPT))) isEqual:filter]) {
        crypto = nil;
      }
      else
#line 100
      if ([filter isArray]) {
        ComAowagieTextPdfPdfArray *a = (ComAowagieTextPdfPdfArray *) cast_chk(filter, [ComAowagieTextPdfPdfArray class]);
        if (![a isEmpty] && [JreLoadStatic(ComAowagieTextPdfPdfName, CRYPT) isEqual:[a getPdfObjectWithInt:0]]) {
          crypto = nil;
        }
      }
    }
  }
  if (crypto != nil && [crypto isEmbeddedFilesOnly]) {
    ComAowagieTextPdfPdfArray *filter = new_ComAowagieTextPdfPdfArray_init();
    ComAowagieTextPdfPdfArray *decodeparms = new_ComAowagieTextPdfPdfArray_init();
    ComAowagieTextPdfPdfDictionary *crypt = new_ComAowagieTextPdfPdfDictionary_init();
    [crypt putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, NAME) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, STDCF)];
    [filter addWithComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, CRYPT)];
    [decodeparms addWithComAowagieTextPdfPdfObject:crypt];
    if (self->compressed_) {
      [filter addWithComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, FLATEDECODE)];
      [decodeparms addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNull_initPackagePrivate()];
    }
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER) withComAowagieTextPdfPdfObject:filter];
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DECODEPARMS) withComAowagieTextPdfPdfObject:decodeparms];
  }
  ComAowagieTextPdfPdfObject *nn = [self getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH)];
  if (crypto != nil && nn != nil && [nn isNumber]) {
    jint sz = [((ComAowagieTextPdfPdfNumber *) cast_chk(nn, [ComAowagieTextPdfPdfNumber class])) intValue];
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_([crypto calculateStreamSizeWithInt:sz])];
    [self superToPdfWithComAowagieTextPdfPdfWriter:writer withJavaIoOutputStream:os];
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:nn];
  }
  else {
    
#line 129
    [self superToPdfWithComAowagieTextPdfPdfWriter:writer withJavaIoOutputStream:os];
  }
  
#line 132
  [((JavaIoOutputStream *) nil_chk(os)) writeWithByteArray:JreLoadStatic(ComAowagieTextPdfPdfStream, STARTSTREAM)];
  if (self->inputStream_ != nil) {
    self->rawLength_ = 0;
    JavaUtilZipDeflaterOutputStream *def = nil;
    ComAowagieTextPdfOutputStreamCounter *osc = new_ComAowagieTextPdfOutputStreamCounter_initWithJavaIoOutputStream_(os);
    ComAowagieTextPdfOutputStreamEncryption *ose = nil;
    JavaIoOutputStream *fout = osc;
    if (crypto != nil) {
      fout = ose = [crypto getEncryptionStreamWithJavaIoOutputStream:fout];
    }
    JavaUtilZipDeflater *deflater = nil;
    if (self->compressed_) {
      deflater = new_JavaUtilZipDeflater_initWithInt_(self->compressionLevel_);
      fout = def = new_JavaUtilZipDeflaterOutputStream_initWithJavaIoOutputStream_withJavaUtilZipDeflater_withInt_(fout, deflater, (jint) 0x8000);
    }
    
#line 148
    IOSByteArray *buf = [IOSByteArray newArrayWithLength:4192];
    while (true) {
      jint n = [((JavaIoInputStream *) nil_chk(self->inputStream_)) readWithByteArray:buf];
      if (n <= 0) {
        break;
      }
      [fout writeWithByteArray:buf withInt:0 withInt:n];
      self->rawLength_ += n;
    }
    if (def != nil) {
      [def finish];
      [((JavaUtilZipDeflater *) nil_chk(deflater)) end];
    }
    if (ose != nil) {
      [ose finish];
    }
    self->inputStreamLength_ = [osc getCounter];
  }
  else {
    if (crypto == nil) {
      if (self->streamBytes_ != nil) {
        [self->streamBytes_ writeToWithJavaIoOutputStream:os];
      }
      else {
        
#line 171
        [os writeWithByteArray:self->bytes_];
      }
    }
    else {
      IOSByteArray *b;
      if (self->streamBytes_ != nil) {
        b = [crypto encryptByteArrayWithByteArray:[self->streamBytes_ toByteArray]];
      }
      else {
        b = [crypto encryptByteArrayWithByteArray:self->bytes_];
      }
      [os writeWithByteArray:b];
    }
  }
  [os writeWithByteArray:JreLoadStatic(ComAowagieTextPdfPdfStream, ENDSTREAM)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithJavaIoInputStream:withComAowagieTextPdfPdfWriter:);
  methods[1].selector = @selector(initPackagePrivateWithByteArray:);
  methods[2].selector = @selector(toPdfWithComAowagieTextPdfPdfWriter:withJavaIoOutputStream:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoInputStream;LComAowagieTextPdfPdfWriter;", "[B", "toPdf", "LComAowagieTextPdfPdfWriter;LJavaIoOutputStream;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfEFStream = { "PdfEFStream", "com.aowagie.text.pdf", ptrTable, methods, NULL, 7, 0x0, 3, 0, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfEFStream;
}

@end


#line 71
void ComAowagieTextPdfPdfEFStream_initPackagePrivateWithJavaIoInputStream_withComAowagieTextPdfPdfWriter_(ComAowagieTextPdfPdfEFStream *self, JavaIoInputStream *inArg, ComAowagieTextPdfPdfWriter *writer) {
  ComAowagieTextPdfPdfStream_initWithJavaIoInputStream_withComAowagieTextPdfPdfWriter_(self, inArg, writer);
}


#line 71
ComAowagieTextPdfPdfEFStream *new_ComAowagieTextPdfPdfEFStream_initPackagePrivateWithJavaIoInputStream_withComAowagieTextPdfPdfWriter_(JavaIoInputStream *inArg, ComAowagieTextPdfPdfWriter *writer) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfEFStream, initPackagePrivateWithJavaIoInputStream_withComAowagieTextPdfPdfWriter_, inArg, writer)
}


#line 71
ComAowagieTextPdfPdfEFStream *create_ComAowagieTextPdfPdfEFStream_initPackagePrivateWithJavaIoInputStream_withComAowagieTextPdfPdfWriter_(JavaIoInputStream *inArg, ComAowagieTextPdfPdfWriter *writer) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfEFStream, initPackagePrivateWithJavaIoInputStream_withComAowagieTextPdfPdfWriter_, inArg, writer)
}


#line 79
void ComAowagieTextPdfPdfEFStream_initPackagePrivateWithByteArray_(ComAowagieTextPdfPdfEFStream *self, IOSByteArray *fileStore) {
  ComAowagieTextPdfPdfStream_initWithByteArray_(self, fileStore);
}


#line 79
ComAowagieTextPdfPdfEFStream *new_ComAowagieTextPdfPdfEFStream_initPackagePrivateWithByteArray_(IOSByteArray *fileStore) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfEFStream, initPackagePrivateWithByteArray_, fileStore)
}


#line 79
ComAowagieTextPdfPdfEFStream *create_ComAowagieTextPdfPdfEFStream_initPackagePrivateWithByteArray_(IOSByteArray *fileStore) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfEFStream, initPackagePrivateWithByteArray_, fileStore)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfEFStream)
