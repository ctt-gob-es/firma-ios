//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/hyphenation/CharVector.java
//

#include "CharVector.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"

#if !__has_feature(objc_arc)
#error "CharVector must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfHyphenationCharVector () {
 @public
  jint blockSize_;
  /*!
   @brief The encapsulated array
   */
  IOSCharArray *array_;
  /*!
   @brief Points to next free item
   */
  jint n_;
}

- (instancetype)initPackagePrivateWithInt:(jint)capacity;

- (instancetype)initPackagePrivateWithCharArray:(IOSCharArray *)a
                                        withInt:(jint)capacity;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfHyphenationCharVector, array_, IOSCharArray *)

inline jlong ComAowagieTextPdfHyphenationCharVector_get_serialVersionUID(void);
#define ComAowagieTextPdfHyphenationCharVector_serialVersionUID -4875768298308363544LL
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfHyphenationCharVector, serialVersionUID, jlong)

/*!
 @brief Capacity increment size
 */
inline jint ComAowagieTextPdfHyphenationCharVector_get_DEFAULT_BLOCK_SIZE(void);
#define ComAowagieTextPdfHyphenationCharVector_DEFAULT_BLOCK_SIZE 2048
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfHyphenationCharVector, DEFAULT_BLOCK_SIZE, jint)

__attribute__((unused)) static void ComAowagieTextPdfHyphenationCharVector_initPackagePrivateWithInt_(ComAowagieTextPdfHyphenationCharVector *self, jint capacity);

__attribute__((unused)) static ComAowagieTextPdfHyphenationCharVector *new_ComAowagieTextPdfHyphenationCharVector_initPackagePrivateWithInt_(jint capacity) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfHyphenationCharVector *create_ComAowagieTextPdfHyphenationCharVector_initPackagePrivateWithInt_(jint capacity);

__attribute__((unused)) static void ComAowagieTextPdfHyphenationCharVector_initPackagePrivateWithCharArray_withInt_(ComAowagieTextPdfHyphenationCharVector *self, IOSCharArray *a, jint capacity);

__attribute__((unused)) static ComAowagieTextPdfHyphenationCharVector *new_ComAowagieTextPdfHyphenationCharVector_initPackagePrivateWithCharArray_withInt_(IOSCharArray *a, jint capacity) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfHyphenationCharVector *create_ComAowagieTextPdfHyphenationCharVector_initPackagePrivateWithCharArray_withInt_(IOSCharArray *a, jint capacity);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/hyphenation/CharVector.java"


#line 27
@implementation ComAowagieTextPdfHyphenationCharVector


#line 46
- (instancetype)initPackagePrivate {
  ComAowagieTextPdfHyphenationCharVector_initPackagePrivate(self);
  return self;
}


#line 50
- (instancetype)initPackagePrivateWithInt:(jint)capacity {
  ComAowagieTextPdfHyphenationCharVector_initPackagePrivateWithInt_(self, capacity);
  return self;
}


#line 62
- (instancetype)initPackagePrivateWithCharArray:(IOSCharArray *)a
                                        withInt:(jint)capacity {
  ComAowagieTextPdfHyphenationCharVector_initPackagePrivateWithCharArray_withInt_(self, a, capacity);
  return self;
}


#line 74
- (id)java_clone {
  
#line 76
  ComAowagieTextPdfHyphenationCharVector *cv = new_ComAowagieTextPdfHyphenationCharVector_initPackagePrivateWithCharArray_withInt_([((IOSCharArray *) nil_chk(self->array_)) java_clone], self->blockSize_);
  cv->n_ = self->n_;
  return cv;
}


#line 81
- (IOSCharArray *)getArray {
  return self->array_;
}


#line 89
- (jint)length {
  return self->n_;
}


#line 97
- (jchar)getWithInt:(jint)index {
  return IOSCharArray_Get(nil_chk(self->array_), index);
}

- (jint)alloc__WithInt:(jint)size {
  jint index = self->n_;
  jint len = ((IOSCharArray *) nil_chk(self->array_))->size_;
  if (self->n_ + size >= len) {
    IOSCharArray *aux = [IOSCharArray newArrayWithLength:len + self->blockSize_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->array_, 0, aux, 0, len);
    self->array_ = aux;
  }
  self->n_ += size;
  return index;
}

- (void)trimToSize {
  if (self->n_ < ((IOSCharArray *) nil_chk(self->array_))->size_) {
    IOSCharArray *aux = [IOSCharArray newArrayWithLength:self->n_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->array_, 0, aux, 0, self->n_);
    self->array_ = aux;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x0, 3, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 4, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(initPackagePrivateWithInt:);
  methods[2].selector = @selector(initPackagePrivateWithCharArray:withInt:);
  methods[3].selector = @selector(java_clone);
  methods[4].selector = @selector(getArray);
  methods[5].selector = @selector(length);
  methods[6].selector = @selector(getWithInt:);
  methods[7].selector = @selector(alloc__WithInt:);
  methods[8].selector = @selector(trimToSize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComAowagieTextPdfHyphenationCharVector_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_BLOCK_SIZE", "I", .constantValue.asInt = ComAowagieTextPdfHyphenationCharVector_DEFAULT_BLOCK_SIZE, 0x1a, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "array_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "[CI", "clone", "get", "alloc" };
  static const J2ObjcClassInfo _ComAowagieTextPdfHyphenationCharVector = { "CharVector", "com.aowagie.text.pdf.hyphenation", ptrTable, methods, fields, 7, 0x0, 9, 5, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfHyphenationCharVector;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end


#line 46
void ComAowagieTextPdfHyphenationCharVector_initPackagePrivate(ComAowagieTextPdfHyphenationCharVector *self) {
  ComAowagieTextPdfHyphenationCharVector_initPackagePrivateWithInt_(self, ComAowagieTextPdfHyphenationCharVector_DEFAULT_BLOCK_SIZE);
}


#line 46
ComAowagieTextPdfHyphenationCharVector *new_ComAowagieTextPdfHyphenationCharVector_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfHyphenationCharVector, initPackagePrivate)
}


#line 46
ComAowagieTextPdfHyphenationCharVector *create_ComAowagieTextPdfHyphenationCharVector_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfHyphenationCharVector, initPackagePrivate)
}

void ComAowagieTextPdfHyphenationCharVector_initPackagePrivateWithInt_(ComAowagieTextPdfHyphenationCharVector *self, jint capacity) {
  NSObject_init(self);
  
#line 51
  if (capacity > 0) {
    self->blockSize_ = capacity;
  }
  else {
    
#line 54
    self->blockSize_ = ComAowagieTextPdfHyphenationCharVector_DEFAULT_BLOCK_SIZE;
  }
  self->array_ = [IOSCharArray newArrayWithLength:self->blockSize_];
  self->n_ = 0;
}


#line 50
ComAowagieTextPdfHyphenationCharVector *new_ComAowagieTextPdfHyphenationCharVector_initPackagePrivateWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfHyphenationCharVector, initPackagePrivateWithInt_, capacity)
}


#line 50
ComAowagieTextPdfHyphenationCharVector *create_ComAowagieTextPdfHyphenationCharVector_initPackagePrivateWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfHyphenationCharVector, initPackagePrivateWithInt_, capacity)
}


#line 62
void ComAowagieTextPdfHyphenationCharVector_initPackagePrivateWithCharArray_withInt_(ComAowagieTextPdfHyphenationCharVector *self, IOSCharArray *a, jint capacity) {
  NSObject_init(self);
  
#line 63
  if (capacity > 0) {
    self->blockSize_ = capacity;
  }
  else {
    
#line 66
    self->blockSize_ = ComAowagieTextPdfHyphenationCharVector_DEFAULT_BLOCK_SIZE;
  }
  self->array_ = a;
  self->n_ = ((IOSCharArray *) nil_chk(a))->size_;
}


#line 62
ComAowagieTextPdfHyphenationCharVector *new_ComAowagieTextPdfHyphenationCharVector_initPackagePrivateWithCharArray_withInt_(IOSCharArray *a, jint capacity) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfHyphenationCharVector, initPackagePrivateWithCharArray_withInt_, a, capacity)
}


#line 62
ComAowagieTextPdfHyphenationCharVector *create_ComAowagieTextPdfHyphenationCharVector_initPackagePrivateWithCharArray_withInt_(IOSCharArray *a, jint capacity) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfHyphenationCharVector, initPackagePrivateWithCharArray_withInt_, a, capacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfHyphenationCharVector)
