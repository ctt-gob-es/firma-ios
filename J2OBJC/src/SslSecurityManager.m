//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/misc/http/SslSecurityManager.java
//

#include "AOUtil.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LoggerUtil.h"
#include "MultiX509TrustManager.h"
#include "SSLConfig.h"
#include "SslSecurityManager.h"
#include "TrustStoreManager.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/security/KeyStore.h"
#include "java/security/SecureRandom.h"
#include "java/util/Enumeration.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/net/ssl/HostnameVerifier.h"
#include "javax/net/ssl/HttpsURLConnection.h"
#include "javax/net/ssl/KeyManagerFactory.h"
#include "javax/net/ssl/SSLContext.h"
#include "javax/net/ssl/SSLSession.h"
#include "javax/net/ssl/SSLSocketFactory.h"
#include "javax/net/ssl/TrustManager.h"
#include "javax/net/ssl/TrustManagerFactory.h"
#include "javax/net/ssl/X509TrustManager.h"
#include "javax/security/auth/callback/PasswordCallback.h"

#if !__has_feature(objc_arc)
#error "SslSecurityManager must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreMiscHttpSslSecurityManager ()

- (instancetype)init;

/*!
 @brief Establece los <code>TrustManager</code> de las conexiones SSL.
 @param tms <code> TrustManager </code>  a establecer.
 @param hv Verificador de nombres de  <i> host </i>  a usar en las conexiones SSL.
 @param keyManagerKeyStore <code> KeyStore </code>  para el  <code> KeyManager </code>  SSL.
 @param sslKeyStorePasswordCallback <code> PasswordCallback </code>  con las contrase &ntilde; as para el                                      <code> KeyStore </code>  para el  <code> KeyManager </code>  SSL.
 @throw KeyManagementExceptionSi hay problemas en la gesti&oacute;n de claves SSL.
 @throw NoSuchAlgorithmExceptionSi el JRE no soporta alg&uacute;n algoritmo necesario.
 */
+ (void)setTrustManagerAndKeyManagerWithJavaxNetSslTrustManagerArray:(IOSObjectArray *)tms
                                     withJavaxNetSslHostnameVerifier:(id<JavaxNetSslHostnameVerifier>)hv
                                            withJavaSecurityKeyStore:(JavaSecurityKeyStore *)keyManagerKeyStore
                       withJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)sslKeyStorePasswordCallback;

/*!
 @brief Devuelve un KeyManager a utilizar cuando se desea deshabilitar las comprobaciones de certificados en las conexiones SSL.
 @param keyManagerKeyStore <code> KeyStore </code>  para el  <code> KeyManager </code>  SSL.
 @param sslKeyStorePasswordCallback <code> PasswordCallback </code>  con las contrase &ntilde; as para el                                      <code> KeyStore </code>  para el  <code> KeyManager </code>  SSL.
 @return KeyManager[] Se genera un KeyManager[] utilizando el keystore almacenado en las propiedades del sistema.
 @throw KeyStoreExceptionSi no se puede cargar el KeyStore SSL.
 @throw NoSuchAlgorithmExceptionSi el JRE no soporta alg&uacute;n algoritmo necesario.
 @throw CertificateExceptionSi los certificados del KeyStore SSL son inv&aacute;lidos.
 @throw IOExceptionSi hay errores en la carga del fichero KeyStore SSL.
 @throw UnrecoverableKeyExceptionSi una clave del KeyStore SSL es inv&aacute;lida.
 */
+ (IOSObjectArray *)getKeyManagerWithJavaSecurityKeyStore:(JavaSecurityKeyStore *)sslKeyStore
            withJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)sslKeyStorePasswordCallback;

@end

inline JavaUtilLoggingLogger *EsGobAfirmaCoreMiscHttpSslSecurityManager_get_LOGGER(void);
static JavaUtilLoggingLogger *EsGobAfirmaCoreMiscHttpSslSecurityManager_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpSslSecurityManager, LOGGER, JavaUtilLoggingLogger *)

inline NSString *EsGobAfirmaCoreMiscHttpSslSecurityManager_get_KEYSTORE(void);
static NSString *EsGobAfirmaCoreMiscHttpSslSecurityManager_KEYSTORE = @"javax.net.ssl.keyStore";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpSslSecurityManager, KEYSTORE, NSString *)

inline NSString *EsGobAfirmaCoreMiscHttpSslSecurityManager_get_KEYSTORE_PASS(void);
static NSString *EsGobAfirmaCoreMiscHttpSslSecurityManager_KEYSTORE_PASS = @"javax.net.ssl.keyStorePassword";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpSslSecurityManager, KEYSTORE_PASS, NSString *)

inline NSString *EsGobAfirmaCoreMiscHttpSslSecurityManager_get_KEYSTORE_TYPE(void);
static NSString *EsGobAfirmaCoreMiscHttpSslSecurityManager_KEYSTORE_TYPE = @"javax.net.ssl.keyStoreType";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpSslSecurityManager, KEYSTORE_TYPE, NSString *)

inline NSString *EsGobAfirmaCoreMiscHttpSslSecurityManager_get_KEYSTORE_DEFAULT_TYPE(void);
static NSString *EsGobAfirmaCoreMiscHttpSslSecurityManager_KEYSTORE_DEFAULT_TYPE = @"JKS";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpSslSecurityManager, KEYSTORE_DEFAULT_TYPE, NSString *)

inline NSString *EsGobAfirmaCoreMiscHttpSslSecurityManager_get_SSL_CONTEXT(void);
static NSString *EsGobAfirmaCoreMiscHttpSslSecurityManager_SSL_CONTEXT = @"SSL";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpSslSecurityManager, SSL_CONTEXT, NSString *)

inline id<JavaxNetSslHostnameVerifier> EsGobAfirmaCoreMiscHttpSslSecurityManager_get_DEFAULT_HOSTNAME_VERIFIER(void);
static id<JavaxNetSslHostnameVerifier> EsGobAfirmaCoreMiscHttpSslSecurityManager_DEFAULT_HOSTNAME_VERIFIER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpSslSecurityManager, DEFAULT_HOSTNAME_VERIFIER, id<JavaxNetSslHostnameVerifier>)

inline JavaxNetSslSSLSocketFactory *EsGobAfirmaCoreMiscHttpSslSecurityManager_get_DEFAULT_SSL_SOCKET_FACTORY(void);
static JavaxNetSslSSLSocketFactory *EsGobAfirmaCoreMiscHttpSslSecurityManager_DEFAULT_SSL_SOCKET_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpSslSecurityManager, DEFAULT_SSL_SOCKET_FACTORY, JavaxNetSslSSLSocketFactory *)

inline JavaSecuritySecureRandom *EsGobAfirmaCoreMiscHttpSslSecurityManager_get_secureRandom(void);
static JavaSecuritySecureRandom *EsGobAfirmaCoreMiscHttpSslSecurityManager_secureRandom;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpSslSecurityManager, secureRandom, JavaSecuritySecureRandom *)

inline jboolean EsGobAfirmaCoreMiscHttpSslSecurityManager_get_afirmaTrustStoreConfigured(void);
inline jboolean EsGobAfirmaCoreMiscHttpSslSecurityManager_set_afirmaTrustStoreConfigured(jboolean value);
inline jboolean *EsGobAfirmaCoreMiscHttpSslSecurityManager_getRef_afirmaTrustStoreConfigured(void);
static jboolean EsGobAfirmaCoreMiscHttpSslSecurityManager_afirmaTrustStoreConfigured = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EsGobAfirmaCoreMiscHttpSslSecurityManager, afirmaTrustStoreConfigured, jboolean)

__attribute__((unused)) static void EsGobAfirmaCoreMiscHttpSslSecurityManager_init(EsGobAfirmaCoreMiscHttpSslSecurityManager *self);

__attribute__((unused)) static EsGobAfirmaCoreMiscHttpSslSecurityManager *new_EsGobAfirmaCoreMiscHttpSslSecurityManager_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobAfirmaCoreMiscHttpSslSecurityManager *create_EsGobAfirmaCoreMiscHttpSslSecurityManager_init(void);

__attribute__((unused)) static void EsGobAfirmaCoreMiscHttpSslSecurityManager_setTrustManagerAndKeyManagerWithJavaxNetSslTrustManagerArray_withJavaxNetSslHostnameVerifier_withJavaSecurityKeyStore_withJavaxSecurityAuthCallbackPasswordCallback_(IOSObjectArray *tms, id<JavaxNetSslHostnameVerifier> hv, JavaSecurityKeyStore *keyManagerKeyStore, JavaxSecurityAuthCallbackPasswordCallback *sslKeyStorePasswordCallback);

__attribute__((unused)) static IOSObjectArray *EsGobAfirmaCoreMiscHttpSslSecurityManager_getKeyManagerWithJavaSecurityKeyStore_withJavaxSecurityAuthCallbackPasswordCallback_(JavaSecurityKeyStore *sslKeyStore, JavaxSecurityAuthCallbackPasswordCallback *sslKeyStorePasswordCallback);

@interface EsGobAfirmaCoreMiscHttpSslSecurityManager_1 : NSObject < JavaxNetSslX509TrustManager >

- (instancetype)init;

- (IOSObjectArray *)getAcceptedIssuers;

- (void)checkClientTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certs
                                                      withNSString:(NSString *)authType;

- (void)checkServerTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certs
                                                      withNSString:(NSString *)authType;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobAfirmaCoreMiscHttpSslSecurityManager_1)

__attribute__((unused)) static void EsGobAfirmaCoreMiscHttpSslSecurityManager_1_init(EsGobAfirmaCoreMiscHttpSslSecurityManager_1 *self);

__attribute__((unused)) static EsGobAfirmaCoreMiscHttpSslSecurityManager_1 *new_EsGobAfirmaCoreMiscHttpSslSecurityManager_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobAfirmaCoreMiscHttpSslSecurityManager_1 *create_EsGobAfirmaCoreMiscHttpSslSecurityManager_1_init(void);

@interface EsGobAfirmaCoreMiscHttpSslSecurityManager_2 : NSObject < JavaxNetSslHostnameVerifier >

- (instancetype)init;

- (jboolean)verifyWithNSString:(NSString *)hostname
     withJavaxNetSslSSLSession:(id<JavaxNetSslSSLSession>)session;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobAfirmaCoreMiscHttpSslSecurityManager_2)

__attribute__((unused)) static void EsGobAfirmaCoreMiscHttpSslSecurityManager_2_init(EsGobAfirmaCoreMiscHttpSslSecurityManager_2 *self);

__attribute__((unused)) static EsGobAfirmaCoreMiscHttpSslSecurityManager_2 *new_EsGobAfirmaCoreMiscHttpSslSecurityManager_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobAfirmaCoreMiscHttpSslSecurityManager_2 *create_EsGobAfirmaCoreMiscHttpSslSecurityManager_2_init(void);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/misc/http/SslSecurityManager.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaCoreMiscHttpSslSecurityManager)

IOSObjectArray *EsGobAfirmaCoreMiscHttpSslSecurityManager_DUMMY_TRUST_MANAGER;
id<JavaxNetSslHostnameVerifier> EsGobAfirmaCoreMiscHttpSslSecurityManager_DUMMY_HOSTNAME_VERIFIER;


#line 37
@implementation EsGobAfirmaCoreMiscHttpSslSecurityManager

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 76
- (instancetype)init {
  EsGobAfirmaCoreMiscHttpSslSecurityManager_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 84
+ (void)disableSslChecksWithJavaxNetSslHttpsURLConnection:(JavaxNetSslHttpsURLConnection *)conn {
  EsGobAfirmaCoreMiscHttpSslSecurityManager_disableSslChecksWithJavaxNetSslHttpsURLConnection_(conn);
}


#line 96
+ (void)disableSslChecks {
  EsGobAfirmaCoreMiscHttpSslSecurityManager_disableSslChecks();
}


#line 111
+ (void)enableSslChecks {
  EsGobAfirmaCoreMiscHttpSslSecurityManager_enableSslChecks();
}


#line 133
+ (void)setTrustManagerAndKeyManagerWithJavaxNetSslTrustManagerArray:(IOSObjectArray *)tms
                                     withJavaxNetSslHostnameVerifier:(id<JavaxNetSslHostnameVerifier>)hv
                                            withJavaSecurityKeyStore:(JavaSecurityKeyStore *)keyManagerKeyStore
                       withJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)sslKeyStorePasswordCallback {
  EsGobAfirmaCoreMiscHttpSslSecurityManager_setTrustManagerAndKeyManagerWithJavaxNetSslTrustManagerArray_withJavaxNetSslHostnameVerifier_withJavaSecurityKeyStore_withJavaxSecurityAuthCallbackPasswordCallback_(tms, hv, keyManagerKeyStore, sslKeyStorePasswordCallback);
}


#line 176
+ (IOSObjectArray *)getKeyManagerWithJavaSecurityKeyStore:(JavaSecurityKeyStore *)sslKeyStore
            withJavaxSecurityAuthCallbackPasswordCallback:(JavaxSecurityAuthCallbackPasswordCallback *)sslKeyStorePasswordCallback {
  return EsGobAfirmaCoreMiscHttpSslSecurityManager_getKeyManagerWithJavaSecurityKeyStore_withJavaxSecurityAuthCallbackPasswordCallback_(sslKeyStore, sslKeyStorePasswordCallback);
}


#line 228
+ (void)configureAfirmaTrustManagers {
  EsGobAfirmaCoreMiscHttpSslSecurityManager_configureAfirmaTrustManagers();
}


#line 289
+ (void)setSslSecurityWithJavaxNetSslHttpsURLConnection:(JavaxNetSslHttpsURLConnection *)conn
                   withEsGobAfirmaCoreMiscHttpSSLConfig:(EsGobAfirmaCoreMiscHttpSSLConfig *)sslConfig {
  EsGobAfirmaCoreMiscHttpSslSecurityManager_setSslSecurityWithJavaxNetSslHttpsURLConnection_withEsGobAfirmaCoreMiscHttpSSLConfig_(conn, sslConfig);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0xa, 4, 5, 6, -1, -1, -1 },
    { NULL, "[LJavaxNetSslKeyManager;", 0xa, 7, 8, 9, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x9, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(disableSslChecksWithJavaxNetSslHttpsURLConnection:);
  methods[2].selector = @selector(disableSslChecks);
  methods[3].selector = @selector(enableSslChecks);
  methods[4].selector = @selector(setTrustManagerAndKeyManagerWithJavaxNetSslTrustManagerArray:withJavaxNetSslHostnameVerifier:withJavaSecurityKeyStore:withJavaxSecurityAuthCallbackPasswordCallback:);
  methods[5].selector = @selector(getKeyManagerWithJavaSecurityKeyStore:withJavaxSecurityAuthCallbackPasswordCallback:);
  methods[6].selector = @selector(configureAfirmaTrustManagers);
  methods[7].selector = @selector(setSslSecurityWithJavaxNetSslHttpsURLConnection:withEsGobAfirmaCoreMiscHttpSSLConfig:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "DUMMY_TRUST_MANAGER", "[LJavaxNetSslTrustManager;", .constantValue.asLong = 0, 0x18, -1, 13, -1, -1 },
    { "DUMMY_HOSTNAME_VERIFIER", "LJavaxNetSslHostnameVerifier;", .constantValue.asLong = 0, 0x18, -1, 14, -1, -1 },
    { "KEYSTORE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "KEYSTORE_PASS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "KEYSTORE_TYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "KEYSTORE_DEFAULT_TYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "SSL_CONTEXT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "DEFAULT_HOSTNAME_VERIFIER", "LJavaxNetSslHostnameVerifier;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "DEFAULT_SSL_SOCKET_FACTORY", "LJavaxNetSslSSLSocketFactory;", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "secureRandom", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "afirmaTrustStoreConfigured", "Z", .constantValue.asLong = 0, 0xa, -1, 23, -1, -1 },
  };
  static const void *ptrTable[] = { "disableSslChecks", "LJavaxNetSslHttpsURLConnection;", "LJavaSecurityGeneralSecurityException;", "LJavaIoIOException;LJavaSecurityGeneralSecurityException;", "setTrustManagerAndKeyManager", "[LJavaxNetSslTrustManager;LJavaxNetSslHostnameVerifier;LJavaSecurityKeyStore;LJavaxSecurityAuthCallbackPasswordCallback;", "LJavaSecurityKeyManagementException;LJavaSecurityNoSuchAlgorithmException;", "getKeyManager", "LJavaSecurityKeyStore;LJavaxSecurityAuthCallbackPasswordCallback;", "LJavaSecurityKeyStoreException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityCertCertificateException;LJavaIoIOException;LJavaSecurityUnrecoverableKeyException;", "setSslSecurity", "LJavaxNetSslHttpsURLConnection;LEsGobAfirmaCoreMiscHttpSSLConfig;", &EsGobAfirmaCoreMiscHttpSslSecurityManager_LOGGER, &EsGobAfirmaCoreMiscHttpSslSecurityManager_DUMMY_TRUST_MANAGER, &EsGobAfirmaCoreMiscHttpSslSecurityManager_DUMMY_HOSTNAME_VERIFIER, &EsGobAfirmaCoreMiscHttpSslSecurityManager_KEYSTORE, &EsGobAfirmaCoreMiscHttpSslSecurityManager_KEYSTORE_PASS, &EsGobAfirmaCoreMiscHttpSslSecurityManager_KEYSTORE_TYPE, &EsGobAfirmaCoreMiscHttpSslSecurityManager_KEYSTORE_DEFAULT_TYPE, &EsGobAfirmaCoreMiscHttpSslSecurityManager_SSL_CONTEXT, &EsGobAfirmaCoreMiscHttpSslSecurityManager_DEFAULT_HOSTNAME_VERIFIER, &EsGobAfirmaCoreMiscHttpSslSecurityManager_DEFAULT_SSL_SOCKET_FACTORY, &EsGobAfirmaCoreMiscHttpSslSecurityManager_secureRandom, &EsGobAfirmaCoreMiscHttpSslSecurityManager_afirmaTrustStoreConfigured };
  static const J2ObjcClassInfo _EsGobAfirmaCoreMiscHttpSslSecurityManager = { "SslSecurityManager", "es.gob.afirma.core.misc.http", ptrTable, methods, fields, 7, 0x11, 8, 12, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreMiscHttpSslSecurityManager;
}

+ (void)initialize {
  if (self == [EsGobAfirmaCoreMiscHttpSslSecurityManager class]) {
    EsGobAfirmaCoreMiscHttpSslSecurityManager_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 39
    @"es.gob.afirma");
    EsGobAfirmaCoreMiscHttpSslSecurityManager_DUMMY_TRUST_MANAGER = [IOSObjectArray newArrayWithObjects:(id[]){ create_EsGobAfirmaCoreMiscHttpSslSecurityManager_1_init() } count:1 type:JavaxNetSslTrustManager_class_()];
    EsGobAfirmaCoreMiscHttpSslSecurityManager_DUMMY_HOSTNAME_VERIFIER = new_EsGobAfirmaCoreMiscHttpSslSecurityManager_2_init();
    EsGobAfirmaCoreMiscHttpSslSecurityManager_DEFAULT_HOSTNAME_VERIFIER = JavaxNetSslHttpsURLConnection_getDefaultHostnameVerifier();
    EsGobAfirmaCoreMiscHttpSslSecurityManager_DEFAULT_SSL_SOCKET_FACTORY = JavaxNetSslHttpsURLConnection_getDefaultSSLSocketFactory();
    EsGobAfirmaCoreMiscHttpSslSecurityManager_secureRandom = new_JavaSecuritySecureRandom_init();
    J2OBJC_SET_INITIALIZED(EsGobAfirmaCoreMiscHttpSslSecurityManager)
  }
}

@end


#line 76
void EsGobAfirmaCoreMiscHttpSslSecurityManager_init(EsGobAfirmaCoreMiscHttpSslSecurityManager *self) {
  NSObject_init(self);
}


#line 76
EsGobAfirmaCoreMiscHttpSslSecurityManager *new_EsGobAfirmaCoreMiscHttpSslSecurityManager_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscHttpSslSecurityManager, init)
}


#line 76
EsGobAfirmaCoreMiscHttpSslSecurityManager *create_EsGobAfirmaCoreMiscHttpSslSecurityManager_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscHttpSslSecurityManager, init)
}


#line 84
void EsGobAfirmaCoreMiscHttpSslSecurityManager_disableSslChecksWithJavaxNetSslHttpsURLConnection_(JavaxNetSslHttpsURLConnection *conn) {
  EsGobAfirmaCoreMiscHttpSslSecurityManager_initialize();
  JavaxNetSslSSLContext *sc = JavaxNetSslSSLContext_getInstanceWithNSString_(EsGobAfirmaCoreMiscHttpSslSecurityManager_SSL_CONTEXT);
  [((JavaxNetSslSSLContext *) nil_chk(sc)) init__WithJavaxNetSslKeyManagerArray:nil withJavaxNetSslTrustManagerArray:EsGobAfirmaCoreMiscHttpSslSecurityManager_DUMMY_TRUST_MANAGER withJavaSecuritySecureRandom:EsGobAfirmaCoreMiscHttpSslSecurityManager_secureRandom];
  
#line 89
  [((JavaxNetSslHttpsURLConnection *) nil_chk(conn)) setSSLSocketFactoryWithJavaxNetSslSSLSocketFactory:[sc getSocketFactory]];
  [conn setHostnameVerifierWithJavaxNetSslHostnameVerifier:EsGobAfirmaCoreMiscHttpSslSecurityManager_DUMMY_HOSTNAME_VERIFIER];
}


#line 96
void EsGobAfirmaCoreMiscHttpSslSecurityManager_disableSslChecks() {
  EsGobAfirmaCoreMiscHttpSslSecurityManager_initialize();
  
#line 97
  EsGobAfirmaCoreMiscHttpSslSecurityManager_setTrustManagerAndKeyManagerWithJavaxNetSslTrustManagerArray_withJavaxNetSslHostnameVerifier_withJavaSecurityKeyStore_withJavaxSecurityAuthCallbackPasswordCallback_(
#line 98
  EsGobAfirmaCoreMiscHttpSslSecurityManager_DUMMY_TRUST_MANAGER,
#line 99
  EsGobAfirmaCoreMiscHttpSslSecurityManager_DUMMY_HOSTNAME_VERIFIER,
#line 100
  nil,
#line 101
  nil);
}

void EsGobAfirmaCoreMiscHttpSslSecurityManager_enableSslChecks() {
  EsGobAfirmaCoreMiscHttpSslSecurityManager_initialize();
  if (EsGobAfirmaCoreMiscHttpSslSecurityManager_afirmaTrustStoreConfigured) {
    EsGobAfirmaCoreMiscHttpSslSecurityManager_configureAfirmaTrustManagers();
  }
  else {
    JavaxNetSslHttpsURLConnection_setDefaultSSLSocketFactoryWithJavaxNetSslSSLSocketFactory_(EsGobAfirmaCoreMiscHttpSslSecurityManager_DEFAULT_SSL_SOCKET_FACTORY);
    JavaxNetSslHttpsURLConnection_setDefaultHostnameVerifierWithJavaxNetSslHostnameVerifier_(EsGobAfirmaCoreMiscHttpSslSecurityManager_DEFAULT_HOSTNAME_VERIFIER);
  }
  [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpSslSecurityManager_LOGGER)) fineWithNSString:
#line 121
  @"Habilitadas comprobaciones SSL"];
}


#line 133
void EsGobAfirmaCoreMiscHttpSslSecurityManager_setTrustManagerAndKeyManagerWithJavaxNetSslTrustManagerArray_withJavaxNetSslHostnameVerifier_withJavaSecurityKeyStore_withJavaxSecurityAuthCallbackPasswordCallback_(IOSObjectArray *tms, id<JavaxNetSslHostnameVerifier> hv, JavaSecurityKeyStore *keyManagerKeyStore, JavaxSecurityAuthCallbackPasswordCallback *sslKeyStorePasswordCallback) {
  EsGobAfirmaCoreMiscHttpSslSecurityManager_initialize();
  
#line 138
  if (tms == nil || tms->size_ < 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Es necesario proporcionar al menos un TrustManager");
  }
  if (hv == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Es necesario proporcionar un HostnameVerifier");
  }
  JavaxNetSslSSLContext *sc = JavaxNetSslSSLContext_getInstanceWithNSString_(EsGobAfirmaCoreMiscHttpSslSecurityManager_SSL_CONTEXT);
  IOSObjectArray *km;
  @try {
    km = EsGobAfirmaCoreMiscHttpSslSecurityManager_getKeyManagerWithJavaSecurityKeyStore_withJavaxSecurityAuthCallbackPasswordCallback_(keyManagerKeyStore, sslKeyStorePasswordCallback);
  }
  @catch (JavaLangException *e) {
    
#line 152
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpSslSecurityManager_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:JreStrcat("$$$@", @"No ha sido posible obtener el KeyManager con el KeyStore '", JavaLangSystem_getPropertyWithNSString_(
#line 154
    EsGobAfirmaCoreMiscHttpSslSecurityManager_KEYSTORE), @"', se usara null: ",
#line 155
    e) withJavaLangThrowable:
#line 156
    e];
    
#line 158
    km = nil;
  }
  [((JavaxNetSslSSLContext *) nil_chk(sc)) init__WithJavaxNetSslKeyManagerArray:km withJavaxNetSslTrustManagerArray:tms withJavaSecuritySecureRandom:EsGobAfirmaCoreMiscHttpSslSecurityManager_secureRandom];
  
#line 162
  JavaxNetSslHttpsURLConnection_setDefaultSSLSocketFactoryWithJavaxNetSslSSLSocketFactory_([sc getSocketFactory]);
  JavaxNetSslHttpsURLConnection_setDefaultHostnameVerifierWithJavaxNetSslHostnameVerifier_(hv);
}


#line 176
IOSObjectArray *EsGobAfirmaCoreMiscHttpSslSecurityManager_getKeyManagerWithJavaSecurityKeyStore_withJavaxSecurityAuthCallbackPasswordCallback_(JavaSecurityKeyStore *sslKeyStore, JavaxSecurityAuthCallbackPasswordCallback *sslKeyStorePasswordCallback) {
  EsGobAfirmaCoreMiscHttpSslSecurityManager_initialize();
  
#line 182
  JavaSecurityKeyStore *kstore;
  IOSCharArray *kstorePassword;
  if (sslKeyStore != nil) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpSslSecurityManager_LOGGER)) infoWithNSString:JreStrcat("$$", @"Se usara el almacen de claves SSL proporcionado de forma directa: ", [sslKeyStore getType])];
    kstore = sslKeyStore;
    kstorePassword = sslKeyStorePasswordCallback != nil ? [sslKeyStorePasswordCallback getPassword] : [IOSCharArray newArrayWithLength:0];
  }
  else {
    NSString *keyStore = JavaLangSystem_getPropertyWithNSString_(EsGobAfirmaCoreMiscHttpSslSecurityManager_KEYSTORE);
    NSString *keyStorePassword = JavaLangSystem_getPropertyWithNSString_(EsGobAfirmaCoreMiscHttpSslSecurityManager_KEYSTORE_PASS);
    NSString *keyStoreType = JavaLangSystem_getPropertyWithNSString_(EsGobAfirmaCoreMiscHttpSslSecurityManager_KEYSTORE_TYPE);
    if (keyStore == nil || [keyStore java_isEmpty]) {
      return nil;
    }
    JavaIoFile *f = new_JavaIoFile_initWithNSString_(keyStore);
    if (![f isFile] || ![f canRead]) {
      [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpSslSecurityManager_LOGGER)) warningWithNSString:JreStrcat("$$", @"El KeyStore SSL no existe o no es legible: ", EsGobAfirmaCoreMiscLoggerUtil_getCleanUserHomePathWithNSString_([f getAbsolutePath]))];
      return nil;
    }
    kstore = JavaSecurityKeyStore_getInstanceWithNSString_(
#line 202
    keyStoreType != nil && ![keyStoreType java_isEmpty] ? keyStoreType : EsGobAfirmaCoreMiscHttpSslSecurityManager_KEYSTORE_DEFAULT_TYPE);
    {
      JavaIoInputStream *fis = new_JavaIoFileInputStream_initWithJavaIoFile_(
#line 205
      f);
      JavaLangThrowable *__primaryException1 = nil;
      
#line 204
      @try {
        
#line 207
        [((JavaSecurityKeyStore *) nil_chk(kstore)) load__WithJavaIoInputStream:
#line 208
        fis withCharArray:
#line 209
        keyStorePassword != nil ? [keyStorePassword java_toCharArray] : nil];
      }
      @catch (JavaLangThrowable *e) {
        __primaryException1 = e;
        @throw e;
      }
      @finally {
        if (fis != nil) {
          if (__primaryException1 != nil) {
            @try {
              [fis close];
            }
            @catch (JavaLangThrowable *e) {
              [__primaryException1 addSuppressedWithJavaLangThrowable:e];
            }
          }
          else {
            [fis close];
          }
        }
      }
    }
    
#line 212
    kstorePassword = keyStorePassword != nil ? [keyStorePassword java_toCharArray] : [IOSCharArray newArrayWithLength:0];
  }
  JavaxNetSslKeyManagerFactory *keyFac = JavaxNetSslKeyManagerFactory_getInstanceWithNSString_(JavaxNetSslKeyManagerFactory_getDefaultAlgorithm());
  [((JavaxNetSslKeyManagerFactory *) nil_chk(keyFac)) init__WithJavaSecurityKeyStore:
#line 216
  kstore withCharArray:
#line 217
  kstorePassword];
  
#line 219
  return [keyFac getKeyManagers];
}


#line 228
void EsGobAfirmaCoreMiscHttpSslSecurityManager_configureAfirmaTrustManagers() {
  EsGobAfirmaCoreMiscHttpSslSecurityManager_initialize();
  JavaIoFile *trustStoreFile = EsGobAfirmaCoreMiscHttpTrustStoreManager_getJKSFile();
  
#line 234
  if (![((JavaIoFile *) nil_chk(trustStoreFile)) isFile]) {
    return;
  }
  
#line 239
  IOSByteArray *trustStoreContent;
  @synchronized(EsGobAfirmaCoreMiscHttpTrustStoreManager_getInstance()) {
    JavaIoInputStream *is = new_JavaIoFileInputStream_initWithJavaIoFile_(trustStoreFile);
    JavaLangThrowable *__primaryException1 = nil;
    
#line 241
    @try {
      trustStoreContent = EsGobAfirmaCoreMiscAOUtil_getDataFromInputStreamWithJavaIoInputStream_(is);
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (is != nil) {
        if (__primaryException1 != nil) {
          @try {
            [is close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [is close];
        }
      }
    }
  }
  
#line 247
  JavaSecurityKeyStore *trustStore = JavaSecurityKeyStore_getInstanceWithNSString_(@"JKS");
  {
    JavaIoInputStream *cacertIs = new_JavaIoByteArrayInputStream_initWithByteArray_(
#line 248
    trustStoreContent);
    JavaLangThrowable *__primaryException1 = nil;
    
#line 248
    @try {
      [((JavaSecurityKeyStore *) nil_chk(trustStore)) load__WithJavaIoInputStream:cacertIs withCharArray:[@"changeit" java_toCharArray]];
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (cacertIs != nil) {
        if (__primaryException1 != nil) {
          @try {
            [cacertIs close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [cacertIs close];
        }
      }
    }
  }
  
#line 253
  if ([trustStore aliases] == nil || ![((id<JavaUtilEnumeration>) nil_chk([trustStore aliases])) hasMoreElements]) {
    return;
  }
  
#line 257
  IOSObjectArray *trustManagers = [IOSObjectArray newArrayWithLength:2 type:JavaxNetSslX509TrustManager_class_()];
  
#line 260
  JavaxNetSslTrustManagerFactory *factory = JavaxNetSslTrustManagerFactory_getInstanceWithNSString_(JavaxNetSslTrustManagerFactory_getDefaultAlgorithm());
  [((JavaxNetSslTrustManagerFactory *) nil_chk(factory)) init__WithJavaSecurityKeyStore:nil];
  (void) IOSObjectArray_Set(trustManagers, 0, (id<JavaxNetSslX509TrustManager>) cast_check(IOSObjectArray_Get(nil_chk([factory getTrustManagers]), 0), JavaxNetSslX509TrustManager_class_()));
  
#line 265
  factory = JavaxNetSslTrustManagerFactory_getInstanceWithNSString_(JavaxNetSslTrustManagerFactory_getDefaultAlgorithm());
  [((JavaxNetSslTrustManagerFactory *) nil_chk(factory)) init__WithJavaSecurityKeyStore:trustStore];
  (void) IOSObjectArray_Set(trustManagers, 1, (id<JavaxNetSslX509TrustManager>) cast_check(IOSObjectArray_Get(nil_chk([factory getTrustManagers]), 0), JavaxNetSslX509TrustManager_class_()));
  
#line 269
  EsGobAfirmaCoreMiscHttpMultiX509TrustManager *trustManager = new_EsGobAfirmaCoreMiscHttpMultiX509TrustManager_initWithJavaxNetSslX509TrustManagerArray_(trustManagers);
  
#line 271
  [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpSslSecurityManager_LOGGER)) infoWithNSString:@"Se configura el almacen de confianza de AutoFirma"];
  
#line 273
  JavaxNetSslSSLContext *sslContext = JavaxNetSslSSLContext_getInstanceWithNSString_(@"SSL");
  [((JavaxNetSslSSLContext *) nil_chk(sslContext)) init__WithJavaxNetSslKeyManagerArray:nil withJavaxNetSslTrustManagerArray:[IOSObjectArray newArrayWithObjects:(id[]){ trustManager } count:1 type:JavaxNetSslTrustManager_class_()] withJavaSecuritySecureRandom:EsGobAfirmaCoreMiscHttpSslSecurityManager_secureRandom];
  
#line 276
  JavaxNetSslHttpsURLConnection_setDefaultSSLSocketFactoryWithJavaxNetSslSSLSocketFactory_([sslContext getSocketFactory]);
  JavaxNetSslHttpsURLConnection_setDefaultHostnameVerifierWithJavaxNetSslHostnameVerifier_(EsGobAfirmaCoreMiscHttpSslSecurityManager_DEFAULT_HOSTNAME_VERIFIER);
  
#line 280
  EsGobAfirmaCoreMiscHttpSslSecurityManager_afirmaTrustStoreConfigured = true;
}


#line 289
void EsGobAfirmaCoreMiscHttpSslSecurityManager_setSslSecurityWithJavaxNetSslHttpsURLConnection_withEsGobAfirmaCoreMiscHttpSSLConfig_(JavaxNetSslHttpsURLConnection *conn, EsGobAfirmaCoreMiscHttpSSLConfig *sslConfig) {
  EsGobAfirmaCoreMiscHttpSslSecurityManager_initialize();
  
#line 290
  if ([((EsGobAfirmaCoreMiscHttpSSLConfig *) nil_chk(sslConfig)) getSSLSocketFactory] != nil) {
    [((JavaxNetSslHttpsURLConnection *) nil_chk(conn)) setSSLSocketFactoryWithJavaxNetSslSSLSocketFactory:[sslConfig getSSLSocketFactory]];
  }
  if ([sslConfig getHostnameVerifier] != nil) {
    [((JavaxNetSslHttpsURLConnection *) nil_chk(conn)) setHostnameVerifierWithJavaxNetSslHostnameVerifier:[sslConfig getHostnameVerifier]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreMiscHttpSslSecurityManager)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/misc/http/SslSecurityManager.java"


#line 44
@implementation EsGobAfirmaCoreMiscHttpSslSecurityManager_1

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 42
- (instancetype)init {
  EsGobAfirmaCoreMiscHttpSslSecurityManager_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 43
- (IOSObjectArray *)getAcceptedIssuers {
  
#line 45
  return JreRetainedLocalValue(nil);
}


#line 47
- (void)checkClientTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certs
                                                      withNSString:(NSString *)authType {
}


#line 49
- (void)checkServerTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)certs
                                                      withNSString:(NSString *)authType {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertX509Certificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAcceptedIssuers);
  methods[2].selector = @selector(checkClientTrustedWithJavaSecurityCertX509CertificateArray:withNSString:);
  methods[3].selector = @selector(checkServerTrustedWithJavaSecurityCertX509CertificateArray:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "checkClientTrusted", "[LJavaSecurityCertX509Certificate;LNSString;", "checkServerTrusted", "LEsGobAfirmaCoreMiscHttpSslSecurityManager;" };
  static const J2ObjcClassInfo _EsGobAfirmaCoreMiscHttpSslSecurityManager_1 = { "", "es.gob.afirma.core.misc.http", ptrTable, methods, NULL, 7, 0x8000, 4, 0, 3, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreMiscHttpSslSecurityManager_1;
}

@end


#line 42
void EsGobAfirmaCoreMiscHttpSslSecurityManager_1_init(EsGobAfirmaCoreMiscHttpSslSecurityManager_1 *self) {
  NSObject_init(self);
}


#line 42
EsGobAfirmaCoreMiscHttpSslSecurityManager_1 *new_EsGobAfirmaCoreMiscHttpSslSecurityManager_1_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscHttpSslSecurityManager_1, init)
}


#line 42
EsGobAfirmaCoreMiscHttpSslSecurityManager_1 *create_EsGobAfirmaCoreMiscHttpSslSecurityManager_1_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscHttpSslSecurityManager_1, init)
}

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/misc/http/SslSecurityManager.java"


#line 57
@implementation EsGobAfirmaCoreMiscHttpSslSecurityManager_2

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 55
- (instancetype)init {
  EsGobAfirmaCoreMiscHttpSslSecurityManager_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 56
- (jboolean)verifyWithNSString:(NSString *)hostname
     withJavaxNetSslSSLSession:(id<JavaxNetSslSSLSession>)session {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(verifyWithNSString:withJavaxNetSslSSLSession:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "verify", "LNSString;LJavaxNetSslSSLSession;", "LEsGobAfirmaCoreMiscHttpSslSecurityManager;" };
  static const J2ObjcClassInfo _EsGobAfirmaCoreMiscHttpSslSecurityManager_2 = { "", "es.gob.afirma.core.misc.http", ptrTable, methods, NULL, 7, 0x8000, 2, 0, 2, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreMiscHttpSslSecurityManager_2;
}

@end


#line 55
void EsGobAfirmaCoreMiscHttpSslSecurityManager_2_init(EsGobAfirmaCoreMiscHttpSslSecurityManager_2 *self) {
  NSObject_init(self);
}


#line 55
EsGobAfirmaCoreMiscHttpSslSecurityManager_2 *new_EsGobAfirmaCoreMiscHttpSslSecurityManager_2_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscHttpSslSecurityManager_2, init)
}


#line 55
EsGobAfirmaCoreMiscHttpSslSecurityManager_2 *create_EsGobAfirmaCoreMiscHttpSslSecurityManager_2_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscHttpSslSecurityManager_2, init)
}
