//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/signers/der/BitArray.java
//

#include "BitArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"

#if !__has_feature(objc_arc)
#error "BitArray must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreSignersDerBitArray () {
 @public
  IOSByteArray *repn_;
  jint length_;
}

+ (jint)subscriptWithInt:(jint)idx;

+ (jint)positionWithInt:(jint)idx;

/*!
 @brief Copy constructor (for cloning).
 */
- (instancetype)initWithEsGobAfirmaCoreSignersDerBitArray:(EsGobAfirmaCoreSignersDerBitArray *)ba;

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaCoreSignersDerBitArray, repn_, IOSByteArray *)

inline jint EsGobAfirmaCoreSignersDerBitArray_get_BITS_PER_UNIT(void);
#define EsGobAfirmaCoreSignersDerBitArray_BITS_PER_UNIT 8
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerBitArray, BITS_PER_UNIT, jint)

inline IOSObjectArray *EsGobAfirmaCoreSignersDerBitArray_get_NYBBLE(void);
static IOSObjectArray *EsGobAfirmaCoreSignersDerBitArray_NYBBLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersDerBitArray, NYBBLE, IOSObjectArray *)

inline jint EsGobAfirmaCoreSignersDerBitArray_get_BYTES_PER_LINE(void);
#define EsGobAfirmaCoreSignersDerBitArray_BYTES_PER_LINE 8
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersDerBitArray, BYTES_PER_LINE, jint)

__attribute__((unused)) static jint EsGobAfirmaCoreSignersDerBitArray_subscriptWithInt_(jint idx);

__attribute__((unused)) static jint EsGobAfirmaCoreSignersDerBitArray_positionWithInt_(jint idx);

__attribute__((unused)) static void EsGobAfirmaCoreSignersDerBitArray_initWithEsGobAfirmaCoreSignersDerBitArray_(EsGobAfirmaCoreSignersDerBitArray *self, EsGobAfirmaCoreSignersDerBitArray *ba);

__attribute__((unused)) static EsGobAfirmaCoreSignersDerBitArray *new_EsGobAfirmaCoreSignersDerBitArray_initWithEsGobAfirmaCoreSignersDerBitArray_(EsGobAfirmaCoreSignersDerBitArray *ba) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobAfirmaCoreSignersDerBitArray *create_EsGobAfirmaCoreSignersDerBitArray_initWithEsGobAfirmaCoreSignersDerBitArray_(EsGobAfirmaCoreSignersDerBitArray *ba);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/signers/der/BitArray.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaCoreSignersDerBitArray)


#line 38
@implementation EsGobAfirmaCoreSignersDerBitArray


#line 45
+ (jint)subscriptWithInt:(jint)idx {
  return EsGobAfirmaCoreSignersDerBitArray_subscriptWithInt_(idx);
}

+ (jint)positionWithInt:(jint)idx {
  return EsGobAfirmaCoreSignersDerBitArray_positionWithInt_(idx);
}


#line 58
- (instancetype)initWithInt:(jint)length {
  EsGobAfirmaCoreSignersDerBitArray_initWithInt_(self, length);
  return self;
}


#line 79
- (instancetype)initWithInt:(jint)length
              withByteArray:(IOSByteArray *)a {
  EsGobAfirmaCoreSignersDerBitArray_initWithInt_withByteArray_(self, length, a);
  return self;
}


#line 112
- (instancetype)initWithBooleanArray:(IOSBooleanArray *)bits {
  EsGobAfirmaCoreSignersDerBitArray_initWithBooleanArray_(self, bits);
  return self;
}


#line 125
- (instancetype)initWithEsGobAfirmaCoreSignersDerBitArray:(EsGobAfirmaCoreSignersDerBitArray *)ba {
  EsGobAfirmaCoreSignersDerBitArray_initWithEsGobAfirmaCoreSignersDerBitArray_(self, ba);
  return self;
}


#line 136
- (jboolean)getWithInt:(jint)index {
  if (index < 0 || index >= self->length_) {
    @throw new_JavaLangArrayIndexOutOfBoundsException_initWithNSString_(JavaLangInteger_toStringWithInt_(index));
  }
  
#line 141
  return (IOSByteArray_Get(nil_chk(self->repn_), EsGobAfirmaCoreSignersDerBitArray_subscriptWithInt_(index)) & EsGobAfirmaCoreSignersDerBitArray_positionWithInt_(index)) != 0;
}


#line 149
- (void)setWithInt:(jint)index
       withBoolean:(jboolean)value {
  if (index < 0 || index >= self->length_) {
    @throw new_JavaLangArrayIndexOutOfBoundsException_initWithNSString_(JavaLangInteger_toStringWithInt_(index));
  }
  jint idx = EsGobAfirmaCoreSignersDerBitArray_subscriptWithInt_(index);
  jint bit = EsGobAfirmaCoreSignersDerBitArray_positionWithInt_(index);
  
#line 157
  if (value) {
    *IOSByteArray_GetRef(nil_chk(self->repn_), idx) |= bit;
  }
  else {
    
#line 160
    *IOSByteArray_GetRef(nil_chk(self->repn_), idx) &= ~bit;
  }
}

- (jint)length {
  return self->length_;
}


#line 182
- (IOSByteArray *)toByteArray {
  return [((IOSByteArray *) nil_chk(self->repn_)) java_clone];
}

- (jboolean)isEqual:(id)obj {
  
#line 188
  if (JreObjectEqualsEquals(obj, self)) {
    return true;
  }
  if (obj == nil || !([obj isKindOfClass:[EsGobAfirmaCoreSignersDerBitArray class]])) {
    return false;
  }
  
#line 195
  EsGobAfirmaCoreSignersDerBitArray *ba = (EsGobAfirmaCoreSignersDerBitArray *) cast_chk(obj, [EsGobAfirmaCoreSignersDerBitArray class]);
  
#line 197
  if (ba->length_ != self->length_) {
    return false;
  }
  
#line 201
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(self->repn_))->size_; i += 1) {
    if (IOSByteArray_Get(self->repn_, i) != IOSByteArray_Get(ba->repn_, i)) {
      return false;
    }
  }
  return true;
}

- (IOSBooleanArray *)toBooleanArray {
  IOSBooleanArray *bits = [IOSBooleanArray newArrayWithLength:self->length_];
  
#line 216
  for (jint i = 0; i < self->length_; i++) {
    *IOSBooleanArray_GetRef(bits, i) = [self getWithInt:i];
  }
  return bits;
}


#line 227
- (NSUInteger)hash {
  
#line 229
  jint hashCode = 0;
  
#line 231
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(self->repn_))->size_; i++) {
    hashCode = 31 * hashCode + IOSByteArray_Get(self->repn_, i);
  }
  
#line 235
  return hashCode ^ self->length_;
}


#line 239
- (id)java_clone {
  
#line 241
  return new_EsGobAfirmaCoreSignersDerBitArray_initWithEsGobAfirmaCoreSignersDerBitArray_(self);
}


#line 269
- (NSString *)description {
  
#line 271
  JavaIoByteArrayOutputStream *out = new_JavaIoByteArrayOutputStream_init();
  
#line 273
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(self->repn_))->size_ - 1; i++) {
    [out writeWithByteArray:IOSObjectArray_Get(nil_chk(EsGobAfirmaCoreSignersDerBitArray_NYBBLE), (JreRShift32(IOSByteArray_Get(self->repn_, i), 4)) & (jint) 0x0F) withInt:0 withInt:4];
    [out writeWithByteArray:IOSObjectArray_Get(EsGobAfirmaCoreSignersDerBitArray_NYBBLE, IOSByteArray_Get(self->repn_, i) & (jint) 0x0F) withInt:0 withInt:4];
    
#line 277
    if (JreIntMod(i, EsGobAfirmaCoreSignersDerBitArray_BYTES_PER_LINE) == EsGobAfirmaCoreSignersDerBitArray_BYTES_PER_LINE - 1) {
      [out writeWithInt:0x000a];
    }
    else {
      
#line 280
      [out writeWithInt:' '];
    }
  }
  
#line 285
  for (jint i = EsGobAfirmaCoreSignersDerBitArray_BITS_PER_UNIT * (self->repn_->size_ - 1); i < self->length_; i++) {
    [out writeWithInt:[self getWithInt:i] ? '1' : '0'];
  }
  
#line 289
  return [NSString java_stringWithBytes:[out toByteArray]];
}


#line 293
- (EsGobAfirmaCoreSignersDerBitArray *)truncate {
  for (jint i = self->length_ - 1; i >= 0; i--) {
    if ([self getWithInt:i]) {
      return new_EsGobAfirmaCoreSignersDerBitArray_initWithInt_withByteArray_(i + 1, JavaUtilArrays_copyOfWithByteArray_withInt_(self->repn_, JreIntDiv((i + EsGobAfirmaCoreSignersDerBitArray_BITS_PER_UNIT), EsGobAfirmaCoreSignersDerBitArray_BITS_PER_UNIT)));
    }
  }
  return new_EsGobAfirmaCoreSignersDerBitArray_initWithInt_(1);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 3, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, 3, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 1, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 8, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "[Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersDerBitArray;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(subscriptWithInt:);
  methods[1].selector = @selector(positionWithInt:);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(initWithInt:withByteArray:);
  methods[4].selector = @selector(initWithBooleanArray:);
  methods[5].selector = @selector(initWithEsGobAfirmaCoreSignersDerBitArray:);
  methods[6].selector = @selector(getWithInt:);
  methods[7].selector = @selector(setWithInt:withBoolean:);
  methods[8].selector = @selector(length);
  methods[9].selector = @selector(toByteArray);
  methods[10].selector = @selector(isEqual:);
  methods[11].selector = @selector(toBooleanArray);
  methods[12].selector = @selector(hash);
  methods[13].selector = @selector(java_clone);
  methods[14].selector = @selector(description);
  methods[15].selector = @selector(truncate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "repn_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "BITS_PER_UNIT", "I", .constantValue.asInt = EsGobAfirmaCoreSignersDerBitArray_BITS_PER_UNIT, 0x1a, -1, -1, -1, -1 },
    { "NYBBLE", "[[B", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "BYTES_PER_LINE", "I", .constantValue.asInt = EsGobAfirmaCoreSignersDerBitArray_BYTES_PER_LINE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "subscript", "I", "position", "LJavaLangIllegalArgumentException;", "I[B", "[Z", "LEsGobAfirmaCoreSignersDerBitArray;", "get", "LJavaLangArrayIndexOutOfBoundsException;", "set", "IZ", "equals", "LNSObject;", "hashCode", "clone", "toString", &EsGobAfirmaCoreSignersDerBitArray_NYBBLE };
  static const J2ObjcClassInfo _EsGobAfirmaCoreSignersDerBitArray = { "BitArray", "es.gob.afirma.core.signers.der", ptrTable, methods, fields, 7, 0x1, 16, 5, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreSignersDerBitArray;
}

+ (void)initialize {
  if (self == [EsGobAfirmaCoreSignersDerBitArray class]) {
    EsGobAfirmaCoreSignersDerBitArray_NYBBLE = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 246
      (jbyte) '0', (jbyte) '0', (jbyte) '0', (jbyte) '0' } count:4], [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 247
        (jbyte) '0', (jbyte) '0', (jbyte) '0', (jbyte) '1' } count:4], [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 248
          (jbyte) '0', (jbyte) '0', (jbyte) '1', (jbyte) '0' } count:4], [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 249
            (jbyte) '0', (jbyte) '0', (jbyte) '1', (jbyte) '1' } count:4], [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 250
              (jbyte) '0', (jbyte) '1', (jbyte) '0', (jbyte) '0' } count:4], [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 251
                (jbyte) '0', (jbyte) '1', (jbyte) '0', (jbyte) '1' } count:4], [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 252
                  (jbyte) '0', (jbyte) '1', (jbyte) '1', (jbyte) '0' } count:4], [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 253
                    (jbyte) '0', (jbyte) '1', (jbyte) '1', (jbyte) '1' } count:4], [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 254
                      (jbyte) '1', (jbyte) '0', (jbyte) '0', (jbyte) '0' } count:4], [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 255
                        (jbyte) '1', (jbyte) '0', (jbyte) '0', (jbyte) '1' } count:4], [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 256
                          (jbyte) '1', (jbyte) '0', (jbyte) '1', (jbyte) '0' } count:4], [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 257
                            (jbyte) '1', (jbyte) '0', (jbyte) '1', (jbyte) '1' } count:4], [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 258
                              (jbyte) '1', (jbyte) '1', (jbyte) '0', (jbyte) '0' } count:4], [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 259
                                (jbyte) '1', (jbyte) '1', (jbyte) '0', (jbyte) '1' } count:4], [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 260
                                  (jbyte) '1', (jbyte) '1', (jbyte) '1', (jbyte) '0' } count:4], [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 261
                                    (jbyte) '1', (jbyte) '1', (jbyte) '1', (jbyte) '1' } count:4] } count:16 type:IOSClass_byteArray(1)];
                                    J2OBJC_SET_INITIALIZED(EsGobAfirmaCoreSignersDerBitArray)
                                  }
                                }

@end


#line 45
jint EsGobAfirmaCoreSignersDerBitArray_subscriptWithInt_(jint idx) {
  EsGobAfirmaCoreSignersDerBitArray_initialize();
  
#line 46
  return JreIntDiv(idx, EsGobAfirmaCoreSignersDerBitArray_BITS_PER_UNIT);
}


#line 49
jint EsGobAfirmaCoreSignersDerBitArray_positionWithInt_(jint idx) {
  EsGobAfirmaCoreSignersDerBitArray_initialize();
  
#line 50
  return JreLShift32(1, EsGobAfirmaCoreSignersDerBitArray_BITS_PER_UNIT - 1 - JreIntMod(idx, EsGobAfirmaCoreSignersDerBitArray_BITS_PER_UNIT));
}


#line 58
void EsGobAfirmaCoreSignersDerBitArray_initWithInt_(EsGobAfirmaCoreSignersDerBitArray *self, jint length) {
  NSObject_init(self);
  
#line 59
  if (length < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Negative length for BitArray");
  }
  
#line 63
  self->length_ = length;
  
#line 65
  self->repn_ = [IOSByteArray newArrayWithLength:JreIntDiv((length + EsGobAfirmaCoreSignersDerBitArray_BITS_PER_UNIT - 1), EsGobAfirmaCoreSignersDerBitArray_BITS_PER_UNIT)];
}


#line 58
EsGobAfirmaCoreSignersDerBitArray *new_EsGobAfirmaCoreSignersDerBitArray_initWithInt_(jint length) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersDerBitArray, initWithInt_, length)
}


#line 58
EsGobAfirmaCoreSignersDerBitArray *create_EsGobAfirmaCoreSignersDerBitArray_initWithInt_(jint length) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersDerBitArray, initWithInt_, length)
}


#line 79
void EsGobAfirmaCoreSignersDerBitArray_initWithInt_withByteArray_(EsGobAfirmaCoreSignersDerBitArray *self, jint length, IOSByteArray *a) {
  NSObject_init(self);
  if (length < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Negative length for BitArray");
  }
  if (((IOSByteArray *) nil_chk(a))->size_ * EsGobAfirmaCoreSignersDerBitArray_BITS_PER_UNIT < length) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Byte array too short to represent bit array of given length");
  }
  
#line 89
  self->length_ = length;
  
#line 91
  jint repLength = JreIntDiv((length + EsGobAfirmaCoreSignersDerBitArray_BITS_PER_UNIT - 1), EsGobAfirmaCoreSignersDerBitArray_BITS_PER_UNIT);
  __unused jint unusedBits = repLength * EsGobAfirmaCoreSignersDerBitArray_BITS_PER_UNIT - length;
  jbyte bitMask = (jbyte) (JreLShift32((jint) 0xFF, unusedBits));
  
#line 100
  self->repn_ = [IOSByteArray newArrayWithLength:repLength];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, self->repn_, 0, repLength);
  if (repLength > 0) {
    *IOSByteArray_GetRef(self->repn_, repLength - 1) &= bitMask;
  }
}


#line 79
EsGobAfirmaCoreSignersDerBitArray *new_EsGobAfirmaCoreSignersDerBitArray_initWithInt_withByteArray_(jint length, IOSByteArray *a) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersDerBitArray, initWithInt_withByteArray_, length, a)
}


#line 79
EsGobAfirmaCoreSignersDerBitArray *create_EsGobAfirmaCoreSignersDerBitArray_initWithInt_withByteArray_(jint length, IOSByteArray *a) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersDerBitArray, initWithInt_withByteArray_, length, a)
}


#line 112
void EsGobAfirmaCoreSignersDerBitArray_initWithBooleanArray_(EsGobAfirmaCoreSignersDerBitArray *self, IOSBooleanArray *bits) {
  NSObject_init(self);
  
#line 113
  self->length_ = ((IOSBooleanArray *) nil_chk(bits))->size_;
  self->repn_ = [IOSByteArray newArrayWithLength:JreIntDiv((self->length_ + 7), 8)];
  
#line 116
  for (jint i = 0; i < self->length_; i++) {
    [self setWithInt:i withBoolean:IOSBooleanArray_Get(bits, i)];
  }
}


#line 112
EsGobAfirmaCoreSignersDerBitArray *new_EsGobAfirmaCoreSignersDerBitArray_initWithBooleanArray_(IOSBooleanArray *bits) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersDerBitArray, initWithBooleanArray_, bits)
}


#line 112
EsGobAfirmaCoreSignersDerBitArray *create_EsGobAfirmaCoreSignersDerBitArray_initWithBooleanArray_(IOSBooleanArray *bits) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersDerBitArray, initWithBooleanArray_, bits)
}


#line 125
void EsGobAfirmaCoreSignersDerBitArray_initWithEsGobAfirmaCoreSignersDerBitArray_(EsGobAfirmaCoreSignersDerBitArray *self, EsGobAfirmaCoreSignersDerBitArray *ba) {
  NSObject_init(self);
  
#line 126
  self->length_ = ((EsGobAfirmaCoreSignersDerBitArray *) nil_chk(ba))->length_;
  self->repn_ = [((IOSByteArray *) nil_chk(ba->repn_)) java_clone];
}


#line 125
EsGobAfirmaCoreSignersDerBitArray *new_EsGobAfirmaCoreSignersDerBitArray_initWithEsGobAfirmaCoreSignersDerBitArray_(EsGobAfirmaCoreSignersDerBitArray *ba) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersDerBitArray, initWithEsGobAfirmaCoreSignersDerBitArray_, ba)
}


#line 125
EsGobAfirmaCoreSignersDerBitArray *create_EsGobAfirmaCoreSignersDerBitArray_initWithEsGobAfirmaCoreSignersDerBitArray_(EsGobAfirmaCoreSignersDerBitArray *ba) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersDerBitArray, initWithEsGobAfirmaCoreSignersDerBitArray_, ba)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreSignersDerBitArray)
