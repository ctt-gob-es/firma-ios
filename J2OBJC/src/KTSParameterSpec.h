//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jcajce/spec/KTSParameterSpec.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_KTSParameterSpec")
#ifdef RESTRICT_KTSParameterSpec
#define INCLUDE_ALL_KTSParameterSpec 0
#else
#define INCLUDE_ALL_KTSParameterSpec 1
#endif
#undef RESTRICT_KTSParameterSpec

#if !defined (OrgSpongycastleJcajceSpecKTSParameterSpec_) && (INCLUDE_ALL_KTSParameterSpec || defined(INCLUDE_OrgSpongycastleJcajceSpecKTSParameterSpec))
#define OrgSpongycastleJcajceSpecKTSParameterSpec_

#define RESTRICT_JavaSecuritySpecAlgorithmParameterSpec 1
#define INCLUDE_JavaSecuritySpecAlgorithmParameterSpec 1
#include "java/security/spec/AlgorithmParameterSpec.h"

@class IOSByteArray;
@class OrgSpongycastleAsn1X509AlgorithmIdentifier;

/*!
 @brief Parameter spec for doing KTS based wrapping via the Cipher API.
 */
@interface OrgSpongycastleJcajceSpecKTSParameterSpec : NSObject < JavaSecuritySpecAlgorithmParameterSpec >

#pragma mark Public

/*!
 @brief Return the AlgorithmIdentifier for the KDF to do key derivation after extracting the secret.
 @return the AlgorithmIdentifier for the SecretKeyFactory's KDF.
 */
- (OrgSpongycastleAsn1X509AlgorithmIdentifier *)getKdfAlgorithm;

/*!
 @brief Return the name of the algorithm for the wrapping key this key spec should use.
 @return the key algorithm.
 */
- (NSString *)getKeyAlgorithmName;

/*!
 @brief Return the size of the key (in bits) for the wrapping key this key spec should use.
 @return length in bits of the key to be calculated.
 */
- (jint)getKeySize;

/*!
 @brief Return the otherInfo data for initialising the KDF.
 @return the otherInfo data.
 */
- (IOSByteArray *)getOtherInfo;

/*!
 @brief Return the algorithm parameter spec to be applied with the private key when the encapsulation is decrypted.
 @return the algorithm parameter spec to be used with the private key.
 */
- (id<JavaSecuritySpecAlgorithmParameterSpec>)getParameterSpec;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleJcajceSpecKTSParameterSpec)

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleJcajceSpecKTSParameterSpec)

#endif

#if !defined (OrgSpongycastleJcajceSpecKTSParameterSpec_Builder_) && (INCLUDE_ALL_KTSParameterSpec || defined(INCLUDE_OrgSpongycastleJcajceSpecKTSParameterSpec_Builder))
#define OrgSpongycastleJcajceSpecKTSParameterSpec_Builder_

@class IOSByteArray;
@class OrgSpongycastleAsn1X509AlgorithmIdentifier;
@class OrgSpongycastleJcajceSpecKTSParameterSpec;
@protocol JavaSecuritySpecAlgorithmParameterSpec;

/*!
 @brief Builder class for creating a KTSParameterSpec.
 */
@interface OrgSpongycastleJcajceSpecKTSParameterSpec_Builder : NSObject

#pragma mark Public

/*!
 @brief Basic builder.
 @param algorithmName the algorithm name for the secret key we use for wrapping.
 @param keySizeInBits the size of the wrapping key we want to produce in bits.
 */
- (instancetype)initWithNSString:(NSString *)algorithmName
                         withInt:(jint)keySizeInBits;

/*!
 @brief Basic builder.
 @param algorithmName the algorithm name for the secret key we use for wrapping.
 @param keySizeInBits the size of the wrapping key we want to produce in bits.
 @param otherInfo the otherInfo/IV encoding to be applied to the KDF.
 */
- (instancetype)initWithNSString:(NSString *)algorithmName
                         withInt:(jint)keySizeInBits
                   withByteArray:(IOSByteArray *)otherInfo;

/*!
 @brief Build the new parameter spec.
 @return a new parameter spec configured according to the builder state.
 */
- (OrgSpongycastleJcajceSpecKTSParameterSpec *)build;

/*!
 @brief Set the KDF algorithm and digest algorithm for wrap key generation.
 @param kdfAlgorithm the KDF algorithm to apply.
 @return the current Builder instance.
 */
- (OrgSpongycastleJcajceSpecKTSParameterSpec_Builder *)withKdfAlgorithmWithOrgSpongycastleAsn1X509AlgorithmIdentifier:(OrgSpongycastleAsn1X509AlgorithmIdentifier *)kdfAlgorithm;

/*!
 @brief Set the algorithm parameter spec to be used with the wrapper.
 @param parameterSpec the algorithm parameter spec to be used in wrapping/unwrapping.
 @return the current Builder instance.
 */
- (OrgSpongycastleJcajceSpecKTSParameterSpec_Builder *)withParameterSpecWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)parameterSpec;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleJcajceSpecKTSParameterSpec_Builder)

FOUNDATION_EXPORT void OrgSpongycastleJcajceSpecKTSParameterSpec_Builder_initWithNSString_withInt_(OrgSpongycastleJcajceSpecKTSParameterSpec_Builder *self, NSString *algorithmName, jint keySizeInBits);

FOUNDATION_EXPORT OrgSpongycastleJcajceSpecKTSParameterSpec_Builder *new_OrgSpongycastleJcajceSpecKTSParameterSpec_Builder_initWithNSString_withInt_(NSString *algorithmName, jint keySizeInBits) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleJcajceSpecKTSParameterSpec_Builder *create_OrgSpongycastleJcajceSpecKTSParameterSpec_Builder_initWithNSString_withInt_(NSString *algorithmName, jint keySizeInBits);

FOUNDATION_EXPORT void OrgSpongycastleJcajceSpecKTSParameterSpec_Builder_initWithNSString_withInt_withByteArray_(OrgSpongycastleJcajceSpecKTSParameterSpec_Builder *self, NSString *algorithmName, jint keySizeInBits, IOSByteArray *otherInfo);

FOUNDATION_EXPORT OrgSpongycastleJcajceSpecKTSParameterSpec_Builder *new_OrgSpongycastleJcajceSpecKTSParameterSpec_Builder_initWithNSString_withInt_withByteArray_(NSString *algorithmName, jint keySizeInBits, IOSByteArray *otherInfo) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleJcajceSpecKTSParameterSpec_Builder *create_OrgSpongycastleJcajceSpecKTSParameterSpec_Builder_initWithNSString_withInt_withByteArray_(NSString *algorithmName, jint keySizeInBits, IOSByteArray *otherInfo);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleJcajceSpecKTSParameterSpec_Builder)

#endif

#pragma pop_macro("INCLUDE_ALL_KTSParameterSpec")
