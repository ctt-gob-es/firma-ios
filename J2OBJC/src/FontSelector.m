//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/FontSelector.java
//

#include "BaseFont.h"
#include "Chunk.h"
#include "Color.h"
#include "Font.h"
#include "FontSelector.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Phrase.h"
#include "Utilities.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"

#if !__has_feature(objc_arc)
#error "FontSelector must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfFontSelector () {
 @public
  JavaUtilArrayList *fonts_;
}

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfFontSelector, fonts_, JavaUtilArrayList *)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/FontSelector.java"


#line 64
@implementation ComAowagieTextPdfFontSelector


#line 64
- (instancetype)initPackagePrivate {
  ComAowagieTextPdfFontSelector_initPackagePrivate(self);
  return self;
}


#line 72
- (void)addFontWithComAowagieTextFont:(ComAowagieTextFont *)font {
  if ([((ComAowagieTextFont *) nil_chk(font)) getBaseFont] != nil) {
    [((JavaUtilArrayList *) nil_chk(self->fonts_)) addWithId:font];
    return;
  }
  ComAowagieTextPdfBaseFont *bf = [font getCalculatedBaseFontWithBoolean:true];
  ComAowagieTextFont *f2 = new_ComAowagieTextFont_initWithComAowagieTextPdfBaseFont_withFloat_withInt_withHarmonyJavaAwtColor_(bf, [font getSize], [font getCalculatedStyle], [font getColor]);
  [((JavaUtilArrayList *) nil_chk(self->fonts_)) addWithId:f2];
}


#line 88
- (ComAowagieTextPhrase *)processWithNSString:(NSString *)text {
  jint fsize = [((JavaUtilArrayList *) nil_chk(self->fonts_)) size];
  if (fsize == 0) {
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(@"No font is defined.");
  }
  IOSCharArray *cc = [((NSString *) nil_chk(text)) java_toCharArray];
  jint len = ((IOSCharArray *) nil_chk(cc))->size_;
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  ComAowagieTextFont *font = nil;
  jint lastidx = -1;
  ComAowagieTextPhrase *ret = new_ComAowagieTextPhrase_init();
  for (jint k = 0; k < len; ++k) {
    jchar c = IOSCharArray_Get(cc, k);
    if (c == 0x000a || c == 0x000d) {
      (void) [sb appendWithChar:c];
      continue;
    }
    if (ComAowagieTextUtilities_isSurrogatePairWithCharArray_withInt_(cc, k)) {
      jint u = ComAowagieTextUtilities_convertToUtf32WithCharArray_withInt_(cc, k);
      for (jint f = 0; f < fsize; ++f) {
        font = (ComAowagieTextFont *) cast_chk([self->fonts_ getWithInt:f], [ComAowagieTextFont class]);
        if ([((ComAowagieTextPdfBaseFont *) nil_chk([((ComAowagieTextFont *) nil_chk(font)) getBaseFont])) charExistsWithInt:u]) {
          if (lastidx != f) {
            if ([sb java_length] > 0 && lastidx != -1) {
              ComAowagieTextChunk *ck = new_ComAowagieTextChunk_initWithNSString_withComAowagieTextFont_([sb description], (ComAowagieTextFont *) cast_chk([self->fonts_ getWithInt:lastidx], [ComAowagieTextFont class]));
              [ret addWithId:ck];
              [sb setLengthWithInt:0];
            }
            lastidx = f;
          }
          (void) [sb appendWithChar:c];
          (void) [sb appendWithChar:IOSCharArray_Get(cc, ++k)];
          break;
        }
      }
    }
    else {
      for (jint f = 0; f < fsize; ++f) {
        font = (ComAowagieTextFont *) cast_chk([self->fonts_ getWithInt:f], [ComAowagieTextFont class]);
        if ([((ComAowagieTextPdfBaseFont *) nil_chk([((ComAowagieTextFont *) nil_chk(font)) getBaseFont])) charExistsWithInt:c]) {
          if (lastidx != f) {
            if ([sb java_length] > 0 && lastidx != -1) {
              ComAowagieTextChunk *ck = new_ComAowagieTextChunk_initWithNSString_withComAowagieTextFont_([sb description], (ComAowagieTextFont *) cast_chk([self->fonts_ getWithInt:lastidx], [ComAowagieTextFont class]));
              [ret addWithId:ck];
              [sb setLengthWithInt:0];
            }
            lastidx = f;
          }
          (void) [sb appendWithChar:c];
          break;
        }
      }
    }
  }
  if ([sb java_length] > 0) {
    ComAowagieTextChunk *ck = new_ComAowagieTextChunk_initWithNSString_withComAowagieTextFont_([sb description], (ComAowagieTextFont *) cast_chk([self->fonts_ getWithInt:lastidx == -1 ? 0 : lastidx], [ComAowagieTextFont class]));
    [ret addWithId:ck];
  }
  return ret;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPhrase;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(addFontWithComAowagieTextFont:);
  methods[2].selector = @selector(processWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fonts_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addFont", "LComAowagieTextFont;", "process", "LNSString;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfFontSelector = { "FontSelector", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 3, 1, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfFontSelector;
}

@end


#line 64
void ComAowagieTextPdfFontSelector_initPackagePrivate(ComAowagieTextPdfFontSelector *self) {
  NSObject_init(self);
  self->fonts_ = new_JavaUtilArrayList_init();
}


#line 64
ComAowagieTextPdfFontSelector *new_ComAowagieTextPdfFontSelector_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfFontSelector, initPackagePrivate)
}


#line 64
ComAowagieTextPdfFontSelector *create_ComAowagieTextPdfFontSelector_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfFontSelector, initPackagePrivate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfFontSelector)
