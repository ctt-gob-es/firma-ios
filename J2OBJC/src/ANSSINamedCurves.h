//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/asn1/anssi/ANSSINamedCurves.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ANSSINamedCurves")
#ifdef RESTRICT_ANSSINamedCurves
#define INCLUDE_ALL_ANSSINamedCurves 0
#else
#define INCLUDE_ALL_ANSSINamedCurves 1
#endif
#undef RESTRICT_ANSSINamedCurves

#if !defined (OrgSpongycastleAsn1AnssiANSSINamedCurves_) && (INCLUDE_ALL_ANSSINamedCurves || defined(INCLUDE_OrgSpongycastleAsn1AnssiANSSINamedCurves))
#define OrgSpongycastleAsn1AnssiANSSINamedCurves_

@class JavaUtilHashtable;
@class OrgSpongycastleAsn1ASN1ObjectIdentifier;
@class OrgSpongycastleAsn1X9X9ECParameters;
@class OrgSpongycastleAsn1X9X9ECParametersHolder;
@protocol JavaUtilEnumeration;

/*!
 @brief ANSSI Elliptic curve table.
 */
@interface OrgSpongycastleAsn1AnssiANSSINamedCurves : NSObject

#pragma mark Public

- (instancetype)init;

+ (OrgSpongycastleAsn1X9X9ECParameters *)getByNameWithNSString:(NSString *)name;

/*!
 @brief return the X9ECParameters object for the named curve represented by
  the passed in object identifier.Null if the curve isn't present.
 @param oid an object identifier representing a named curve, if present.
 */
+ (OrgSpongycastleAsn1X9X9ECParameters *)getByOIDWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid;

/*!
 @brief return the named curve name represented by the given object identifier.
 */
+ (NSString *)getNameWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid;

/*!
 @brief returns an enumeration containing the name strings for curves
  contained in this structure.
 */
+ (id<JavaUtilEnumeration>)getNames;

/*!
 @brief return the object identifier signified by the passed in name.Null
  if there is no object identifier associated with name.
 @return the object identifier associated with name, if present.
 */
+ (OrgSpongycastleAsn1ASN1ObjectIdentifier *)getOIDWithNSString:(NSString *)name;

#pragma mark Package-Private

+ (void)defineCurveWithNSString:(NSString *)name
withOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid
withOrgSpongycastleAsn1X9X9ECParametersHolder:(OrgSpongycastleAsn1X9X9ECParametersHolder *)holder;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleAsn1AnssiANSSINamedCurves)

inline OrgSpongycastleAsn1X9X9ECParametersHolder *OrgSpongycastleAsn1AnssiANSSINamedCurves_get_FRP256v1(void);
inline OrgSpongycastleAsn1X9X9ECParametersHolder *OrgSpongycastleAsn1AnssiANSSINamedCurves_set_FRP256v1(OrgSpongycastleAsn1X9X9ECParametersHolder *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgSpongycastleAsn1X9X9ECParametersHolder *OrgSpongycastleAsn1AnssiANSSINamedCurves_FRP256v1;
J2OBJC_STATIC_FIELD_OBJ(OrgSpongycastleAsn1AnssiANSSINamedCurves, FRP256v1, OrgSpongycastleAsn1X9X9ECParametersHolder *)

inline JavaUtilHashtable *OrgSpongycastleAsn1AnssiANSSINamedCurves_get_objIds(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilHashtable *OrgSpongycastleAsn1AnssiANSSINamedCurves_objIds;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleAsn1AnssiANSSINamedCurves, objIds, JavaUtilHashtable *)

inline JavaUtilHashtable *OrgSpongycastleAsn1AnssiANSSINamedCurves_get_curves(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilHashtable *OrgSpongycastleAsn1AnssiANSSINamedCurves_curves;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleAsn1AnssiANSSINamedCurves, curves, JavaUtilHashtable *)

inline JavaUtilHashtable *OrgSpongycastleAsn1AnssiANSSINamedCurves_get_names(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilHashtable *OrgSpongycastleAsn1AnssiANSSINamedCurves_names;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleAsn1AnssiANSSINamedCurves, names, JavaUtilHashtable *)

FOUNDATION_EXPORT void OrgSpongycastleAsn1AnssiANSSINamedCurves_init(OrgSpongycastleAsn1AnssiANSSINamedCurves *self);

FOUNDATION_EXPORT OrgSpongycastleAsn1AnssiANSSINamedCurves *new_OrgSpongycastleAsn1AnssiANSSINamedCurves_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1AnssiANSSINamedCurves *create_OrgSpongycastleAsn1AnssiANSSINamedCurves_init(void);

FOUNDATION_EXPORT void OrgSpongycastleAsn1AnssiANSSINamedCurves_defineCurveWithNSString_withOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1X9X9ECParametersHolder_(NSString *name, OrgSpongycastleAsn1ASN1ObjectIdentifier *oid, OrgSpongycastleAsn1X9X9ECParametersHolder *holder);

FOUNDATION_EXPORT OrgSpongycastleAsn1X9X9ECParameters *OrgSpongycastleAsn1AnssiANSSINamedCurves_getByNameWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgSpongycastleAsn1X9X9ECParameters *OrgSpongycastleAsn1AnssiANSSINamedCurves_getByOIDWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(OrgSpongycastleAsn1ASN1ObjectIdentifier *oid);

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1ObjectIdentifier *OrgSpongycastleAsn1AnssiANSSINamedCurves_getOIDWithNSString_(NSString *name);

FOUNDATION_EXPORT NSString *OrgSpongycastleAsn1AnssiANSSINamedCurves_getNameWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(OrgSpongycastleAsn1ASN1ObjectIdentifier *oid);

FOUNDATION_EXPORT id<JavaUtilEnumeration> OrgSpongycastleAsn1AnssiANSSINamedCurves_getNames(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleAsn1AnssiANSSINamedCurves)

#endif

#pragma pop_macro("INCLUDE_ALL_ANSSINamedCurves")
