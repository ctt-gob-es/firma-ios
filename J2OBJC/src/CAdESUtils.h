//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/signers/cades/CAdESUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CAdESUtils")
#ifdef RESTRICT_CAdESUtils
#define INCLUDE_ALL_CAdESUtils 0
#else
#define INCLUDE_ALL_CAdESUtils 1
#endif
#undef RESTRICT_CAdESUtils

#if !defined (EsGobAfirmaSignersCadesCAdESUtils_) && (INCLUDE_ALL_CAdESUtils || defined(INCLUDE_EsGobAfirmaSignersCadesCAdESUtils))
#define EsGobAfirmaSignersCadesCAdESUtils_

@class EsGobAfirmaSignersCadesCAdESParameters;
@class JavaSecurityCertCertificate;
@class OrgSpongycastleAsn1ASN1EncodableVector;

/*!
 @brief Utilidades varias relacionadas con firmas electr&oacute;nicas CAdES.
 Se declara como clase p&uacute;blica para permitir su uso en el m&oacute;dulo de multifirmas CAdES.
  Las principales estructuras ASN.1 implementadas son: 
 @code

  id-aa-signingCertificateV2 OBJECT IDENTIFIER ::= { iso(1)
       member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
       smime(16) id-aa(2) 47
  }
  SigningCertificateV2 ::=  SEQUENCE {
       certs        SEQUENCE OF ESSCertIDv2,
       policies     SEQUENCE OF PolicyInformation OPTIONAL
  }
  ESSCertIDv2 ::= SEQUENCE {
    hashAlgorithm AlgorithmIdentifier
    DEFAULT {
      algorithm id-sha256
    },
    certHash Hash,
    issuerSerial IssuerSerial OPTIONAL
  }
  Hash ::= OCTET STRING+
  IssuerSerial ::= SEQUENCE {
    issuer GeneralNames,
    serialNumber CertificateSerialNumber
    issuerUID UniqueIdentifier OPTIONAL
  }
  PolicyInformation ::= SEQUENCE {
     policyIdentifier CertPolicyId,
     policyQualifiers SEQUENCE SIZE (1..MAX) OF PolicyQualifierInfo OPTIONAL
  }
  CertPolicyId ::= OBJECT IDENTIFIER
  PolicyQualifierInfo ::= SEQUENCE {
    policyQualifierId PolicyQualifierId,
    qualifier ANY DEFINED BY policyQualifierId
  }
  SigningCertificateV2 ::= SEQUENCE {
    certs SEQUENCE OF ESSCertIDv2,
    policies SEQUENCE OF PolicyInformation OPTIONAL
  }
  id-aa-signingCertificate OBJECT IDENTIFIER ::= { iso(1)
       member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
       smime(16) id-aa(2) 12
  }
  SigningCertificate ::=  SEQUENCE {
       certs        SEQUENCE OF ESSCertID,
       policies     SEQUENCE OF PolicyInformation OPTIONAL
  }
  IssuerSerial ::= SEQUENCE {
    issuer GeneralNames,
    serialNumber CertificateSerialNumber
  }
  ESSCertID ::= SEQUENCE {
    certHash Hash,
    issuerSerial IssuerSerial OPTIONAL
  }
  Hash ::= OCTET STRING -- SHA1 hash of entire certificate
  PolicyInformation ::= SEQUENCE {
    policyIdentifier CertPolicyId,
    policyQualifiers SEQUENCE SIZE (1..MAX) OF PolicyQualifierInfo OPTIONAL
  }
  CertPolicyId ::= OBJECT IDENTIFIER
  PolicyQualifierInfo ::= SEQUENCE {
    policyQualifierId PolicyQualifierId,
    qualifier ANY DEFINED BY policyQualifierId
  }
  SigningCertificateV2 ::= SEQUENCE {
     certs SEQUENCE OF ESSCertIDv2,
     policies SEQUENCE OF PolicyInformation OPTIONAL
  }
  id-aa-signingCertificate OBJECT IDENTIFIER ::= {
     iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9) smime(16) id-aa(2) 12
  }
  SigPolicyId ::= OBJECT IDENTIFIER (Politica de firma)
  OtherHashAlgAndValue ::= SEQUENCE {
      hashAlgorithm    AlgorithmIdentifier,
      hashValue        OCTET STRING
  }
  AOSigPolicyQualifierInfo ::= SEQUENCE {
        SigPolicyQualifierId  SigPolicyQualifierId,
        SigQualifier          ANY DEFINED BY policyQualifierId
  }
  SignaturePolicyId ::= SEQUENCE {
     sigPolicyId           SigPolicyId,
     sigPolicyHash         SigPolicyHash,
     sigPolicyQualifiers   SEQUENCE SIZE (1..MAX) OF AOSigPolicyQualifierInfo OPTIONAL
  } 
  
@endcode
 */
@interface EsGobAfirmaSignersCadesCAdESUtils : NSObject

#pragma mark Public

/*!
 @brief Genera un vector con los atributos que deben firmarse dentro de la firma.
 @param cert Certificado del firmante.
 @param config Configraci &oacute; n con el detalle de firma.
 @param isCountersign <code> true </code>  si desea generarse el  <code> SignerInfo </code>  de una
                        contrafirma,  <code> false </code>  en caso contrario.
 @return Los datos necesarios para generar la firma referente a los datos del usuario.
 @throw java.security.NoSuchAlgorithmExceptionCuando se introduce un algoritmo no v&aacute;lido.
 @throw java.io.IOExceptionCuando se produce un error de entrada/salida.
 @throw CertificateEncodingExceptionError de codificaci&oacute;n en el certificado.
 @throw IllegalArgumentExceptionCuando no se ha proporcionado ni los datos ni la huella digital a firmar.
 */
+ (OrgSpongycastleAsn1ASN1EncodableVector *)generateSignedAttributesWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert
                                                         withEsGobAfirmaSignersCadesCAdESParameters:(EsGobAfirmaSignersCadesCAdESParameters *)config
                                                                                        withBoolean:(jboolean)isCountersign;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobAfirmaSignersCadesCAdESUtils)

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1EncodableVector *EsGobAfirmaSignersCadesCAdESUtils_generateSignedAttributesWithJavaSecurityCertCertificate_withEsGobAfirmaSignersCadesCAdESParameters_withBoolean_(JavaSecurityCertCertificate *cert, EsGobAfirmaSignersCadesCAdESParameters *config, jboolean isCountersign);

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaSignersCadesCAdESUtils)

#endif

#pragma pop_macro("INCLUDE_ALL_CAdESUtils")
