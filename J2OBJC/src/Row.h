//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/Row.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Row")
#ifdef RESTRICT_Row
#define INCLUDE_ALL_Row 0
#else
#define INCLUDE_ALL_Row 1
#endif
#undef RESTRICT_Row

#if !defined (ComAowagieTextRow_) && (INCLUDE_ALL_Row || defined(INCLUDE_ComAowagieTextRow))
#define ComAowagieTextRow_

#define RESTRICT_Element 1
#define INCLUDE_ComAowagieTextElement 1
#include "Element.h"

@class JavaUtilArrayList;

/*!
 @brief A <CODE>Row</CODE> is part of a <CODE>Table</CODE>
  and contains some <CODE>Cells</CODE>.
 <P>
  All <CODE>Row</CODE>s are constructed by a <CODE>Table</CODE>-object.
  You don't have to construct any <CODE>Row</CODE> yourself.
  In fact you can't construct a <CODE>Row</CODE> outside the package. 
 <P>
  Since a <CODE>Cell</CODE> can span several rows and/or columns
  a row can contain reserved space without any content.
 - seealso: Element
 - seealso: Cell
 - seealso: Table
 */
@interface ComAowagieTextRow : NSObject < ComAowagieTextElement >

#pragma mark Public

/*!
 @brief Gets a <CODE>Cell</CODE> or <CODE>Table</CODE> from a certain column.
 @param column the column the  <CODE> Cell/Table </CODE>  is in.
 @return the <CODE>Cell</CODE>,<CODE>Table</CODE> or <VAR>Object</VAR> if the column was
                   reserved or null if empty.
 */
- (id)getCellWithInt:(jint)column;

/*!
 @brief Gets all the chunks in this element.
 @return an <CODE>ArrayList</CODE>
 */
- (JavaUtilArrayList *)getChunks;

/*!
 @brief Gets the number of columns.
 @return a value
 */
- (jint)getColumns;

/*!
 @brief Gets the horizontal alignment.
 @return a value
 */
- (jint)getHorizontalAlignment;

/*!
 - seealso: com.aowagie.text.Element#isContent()
 @since iText 2.0.8
 */
- (jboolean)isContent;

/*!
 @brief Checks if the row is empty.
 @return <CODE>true</CODE> if none of the columns is reserved.
 */
- (jboolean)isEmpty;

/*!
 - seealso: com.aowagie.text.Element#isNestable()
 @since iText 2.0.8
 */
- (jboolean)isNestable;

/*!
 @brief Sets the horizontal alignment.
 @param value the new value
 */
- (void)setHorizontalAlignmentWithInt:(jint)value;

/*!
 @brief Gets the type of the text element.
 @return a type
 */
- (jint)type;

#pragma mark Protected

/*!
 @brief Constructs a <CODE>Row</CODE> with a certain number of <VAR>columns</VAR>.
 @param columns a number of columns
 */
- (instancetype)initWithInt:(jint)columns;

#pragma mark Package-Private

/*!
 @brief Adds an element to the <CODE>Row</CODE> at the position given.
 @param element the element to add. (currently only Cells and Tables supported
 @param column the position where to add the cell.
 @return the column position the <CODE>Cell</CODE> was added,
                       or <CODE>-1</CODE> if the <CODE>Cell</CODE> couldn't be added.
 */
- (jint)addElementWithId:(id)element
                 withInt:(jint)column;

/*!
 @brief Returns true/false when this position in the <CODE>Row</CODE> has been reserved, either filled or through a colspan of an Element.
 @param column the column.
 @return <CODE>true</CODE> if the column was reserved, <CODE>false</CODE> if not.
 */
- (jboolean)isReservedWithInt:(jint)column;

/*!
 @brief Reserves a <CODE>Cell</CODE> in the <CODE>Row</CODE>.
 @param column the column that has to be reserved.
 @param size the number of columns
 @return <CODE>true</CODE> if the column was reserved, <CODE>false</CODE> if not.
 */
- (jboolean)reserveWithInt:(jint)column
                   withInt:(jint)size;

/*!
 @brief Puts <CODE>Cell</CODE> to the <CODE>Row</CODE> at the position given, doesn't reserve colspan.
 @param aElement the cell to add.
 @param column the position where to add the cell.
 */
- (void)setElementWithId:(id)aElement
                 withInt:(jint)column;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextRow)

FOUNDATION_EXPORT void ComAowagieTextRow_initWithInt_(ComAowagieTextRow *self, jint columns);

FOUNDATION_EXPORT ComAowagieTextRow *new_ComAowagieTextRow_initWithInt_(jint columns) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextRow *create_ComAowagieTextRow_initWithInt_(jint columns);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextRow)

#endif

#pragma pop_macro("INCLUDE_ALL_Row")
