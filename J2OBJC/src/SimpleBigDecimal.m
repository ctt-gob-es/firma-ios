//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/math/ec/SimpleBigDecimal.java
//

#include "ECConstants.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SimpleBigDecimal.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/math/BigInteger.h"

#if !__has_feature(objc_arc)
#error "SimpleBigDecimal must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleMathEcSimpleBigDecimal () {
 @public
  JavaMathBigInteger *bigInt_;
  jint scale__;
}

- (void)checkScaleWithOrgSpongycastleMathEcSimpleBigDecimal:(OrgSpongycastleMathEcSimpleBigDecimal *)b;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleMathEcSimpleBigDecimal, bigInt_, JavaMathBigInteger *)

inline jlong OrgSpongycastleMathEcSimpleBigDecimal_get_serialVersionUID(void);
#define OrgSpongycastleMathEcSimpleBigDecimal_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleMathEcSimpleBigDecimal, serialVersionUID, jlong)

__attribute__((unused)) static void OrgSpongycastleMathEcSimpleBigDecimal_checkScaleWithOrgSpongycastleMathEcSimpleBigDecimal_(OrgSpongycastleMathEcSimpleBigDecimal *self, OrgSpongycastleMathEcSimpleBigDecimal *b);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/math/ec/SimpleBigDecimal.java"


#line 17
@implementation OrgSpongycastleMathEcSimpleBigDecimal


#line 34
+ (OrgSpongycastleMathEcSimpleBigDecimal *)getInstanceWithJavaMathBigInteger:(JavaMathBigInteger *)value
                                                                     withInt:(jint)scale_ {
  return OrgSpongycastleMathEcSimpleBigDecimal_getInstanceWithJavaMathBigInteger_withInt_(value, scale_);
}


#line 46
- (instancetype)initPackagePrivateWithJavaMathBigInteger:(JavaMathBigInteger *)bigInt
                                                 withInt:(jint)scale_ {
  OrgSpongycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_(self, bigInt, scale_);
  return self;
}


#line 57
- (void)checkScaleWithOrgSpongycastleMathEcSimpleBigDecimal:(OrgSpongycastleMathEcSimpleBigDecimal *)b {
  OrgSpongycastleMathEcSimpleBigDecimal_checkScaleWithOrgSpongycastleMathEcSimpleBigDecimal_(self, b);
}


#line 66
- (OrgSpongycastleMathEcSimpleBigDecimal *)adjustScaleWithInt:(jint)newScale {
  
#line 68
  if (newScale < 0) {
    
#line 70
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"scale may not be negative");
  }
  
#line 73
  if (newScale == scale__) {
    
#line 75
    return self;
  }
  
#line 78
  return new_OrgSpongycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_([((JavaMathBigInteger *) nil_chk(bigInt_)) shiftLeftWithInt:newScale - scale__],
#line 79
  newScale);
}


#line 82
- (OrgSpongycastleMathEcSimpleBigDecimal *)addWithOrgSpongycastleMathEcSimpleBigDecimal:(OrgSpongycastleMathEcSimpleBigDecimal *)b {
  
#line 84
  OrgSpongycastleMathEcSimpleBigDecimal_checkScaleWithOrgSpongycastleMathEcSimpleBigDecimal_(self, b);
  return new_OrgSpongycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_([((JavaMathBigInteger *) nil_chk(bigInt_)) addWithJavaMathBigInteger:((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(b))->bigInt_], scale__);
}


#line 88
- (OrgSpongycastleMathEcSimpleBigDecimal *)addWithJavaMathBigInteger:(JavaMathBigInteger *)b {
  
#line 90
  return new_OrgSpongycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_([((JavaMathBigInteger *) nil_chk(bigInt_)) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(b)) shiftLeftWithInt:scale__]], scale__);
}


#line 93
- (OrgSpongycastleMathEcSimpleBigDecimal *)negate {
  
#line 95
  return new_OrgSpongycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_([((JavaMathBigInteger *) nil_chk(bigInt_)) negate], scale__);
}


#line 98
- (OrgSpongycastleMathEcSimpleBigDecimal *)subtractWithOrgSpongycastleMathEcSimpleBigDecimal:(OrgSpongycastleMathEcSimpleBigDecimal *)b {
  
#line 100
  return [self addWithOrgSpongycastleMathEcSimpleBigDecimal:[((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(b)) negate]];
}


#line 103
- (OrgSpongycastleMathEcSimpleBigDecimal *)subtractWithJavaMathBigInteger:(JavaMathBigInteger *)b {
  
#line 105
  return new_OrgSpongycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_([((JavaMathBigInteger *) nil_chk(bigInt_)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(b)) shiftLeftWithInt:scale__]],
#line 106
  scale__);
}


#line 109
- (OrgSpongycastleMathEcSimpleBigDecimal *)multiplyWithOrgSpongycastleMathEcSimpleBigDecimal:(OrgSpongycastleMathEcSimpleBigDecimal *)b {
  
#line 111
  OrgSpongycastleMathEcSimpleBigDecimal_checkScaleWithOrgSpongycastleMathEcSimpleBigDecimal_(self, b);
  return new_OrgSpongycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_([((JavaMathBigInteger *) nil_chk(bigInt_)) multiplyWithJavaMathBigInteger:((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(b))->bigInt_], scale__ + scale__);
}


#line 115
- (OrgSpongycastleMathEcSimpleBigDecimal *)multiplyWithJavaMathBigInteger:(JavaMathBigInteger *)b {
  
#line 117
  return new_OrgSpongycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_([((JavaMathBigInteger *) nil_chk(bigInt_)) multiplyWithJavaMathBigInteger:b], scale__);
}


#line 120
- (OrgSpongycastleMathEcSimpleBigDecimal *)divideWithOrgSpongycastleMathEcSimpleBigDecimal:(OrgSpongycastleMathEcSimpleBigDecimal *)b {
  
#line 122
  OrgSpongycastleMathEcSimpleBigDecimal_checkScaleWithOrgSpongycastleMathEcSimpleBigDecimal_(self, b);
  JavaMathBigInteger *dividend = [((JavaMathBigInteger *) nil_chk(bigInt_)) shiftLeftWithInt:scale__];
  return new_OrgSpongycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_([((JavaMathBigInteger *) nil_chk(dividend)) divideWithJavaMathBigInteger:((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(b))->bigInt_], scale__);
}


#line 127
- (OrgSpongycastleMathEcSimpleBigDecimal *)divideWithJavaMathBigInteger:(JavaMathBigInteger *)b {
  
#line 129
  return new_OrgSpongycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_([((JavaMathBigInteger *) nil_chk(bigInt_)) divideWithJavaMathBigInteger:b], scale__);
}


#line 132
- (OrgSpongycastleMathEcSimpleBigDecimal *)shiftLeftWithInt:(jint)n {
  
#line 134
  return new_OrgSpongycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_([((JavaMathBigInteger *) nil_chk(bigInt_)) shiftLeftWithInt:n], scale__);
}


#line 137
- (jint)compareToWithOrgSpongycastleMathEcSimpleBigDecimal:(OrgSpongycastleMathEcSimpleBigDecimal *)val {
  
#line 139
  OrgSpongycastleMathEcSimpleBigDecimal_checkScaleWithOrgSpongycastleMathEcSimpleBigDecimal_(self, val);
  return [((JavaMathBigInteger *) nil_chk(bigInt_)) compareToWithId:((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(val))->bigInt_];
}


#line 143
- (jint)compareToWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  
#line 145
  return [((JavaMathBigInteger *) nil_chk(bigInt_)) compareToWithId:[((JavaMathBigInteger *) nil_chk(val)) shiftLeftWithInt:scale__]];
}


#line 148
- (JavaMathBigInteger *)floor {
  
#line 150
  return [((JavaMathBigInteger *) nil_chk(bigInt_)) shiftRightWithInt:scale__];
}


#line 153
- (JavaMathBigInteger *)round {
  
#line 155
  OrgSpongycastleMathEcSimpleBigDecimal *oneHalf = new_OrgSpongycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_(JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE), 1);
  return [((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk([self addWithOrgSpongycastleMathEcSimpleBigDecimal:[oneHalf adjustScaleWithInt:scale__]])) floor];
}


#line 159
- (jint)intValue {
  
#line 161
  return [((JavaMathBigInteger *) nil_chk([self floor])) intValue];
}


#line 164
- (jlong)longValue {
  
#line 166
  return [((JavaMathBigInteger *) nil_chk([self floor])) longLongValue];
}


#line 179
- (jint)getScale {
  
#line 181
  return scale__;
}


#line 184
- (NSString *)description {
  
#line 186
  if (scale__ == 0) {
    
#line 188
    return [((JavaMathBigInteger *) nil_chk(bigInt_)) description];
  }
  
#line 191
  JavaMathBigInteger *floorBigInt = [self floor];
  
#line 193
  JavaMathBigInteger *fract = [((JavaMathBigInteger *) nil_chk(bigInt_)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(floorBigInt)) shiftLeftWithInt:scale__]];
  if ([bigInt_ signum] == -1) {
    
#line 196
    fract = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE))) shiftLeftWithInt:scale__])) subtractWithJavaMathBigInteger:fract];
  }
  
#line 199
  if (([floorBigInt signum] == -1) && (!([((JavaMathBigInteger *) nil_chk(fract)) isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO)]))) {
    
#line 201
    floorBigInt = [floorBigInt addWithJavaMathBigInteger:JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)];
  }
  NSString *leftOfPoint = [((JavaMathBigInteger *) nil_chk(floorBigInt)) description];
  
#line 205
  IOSCharArray *fractCharArr = [IOSCharArray newArrayWithLength:scale__];
  NSString *fractStr = [((JavaMathBigInteger *) nil_chk(fract)) toStringWithInt:2];
  jint fractLen = [((NSString *) nil_chk(fractStr)) java_length];
  jint zeroes = scale__ - fractLen;
  for (jint i = 0; i < zeroes; i++) {
    
#line 211
    *IOSCharArray_GetRef(fractCharArr, i) = '0';
  }
  for (jint j = 0; j < fractLen; j++) {
    
#line 215
    *IOSCharArray_GetRef(fractCharArr, zeroes + j) = [fractStr charAtWithInt:j];
  }
  NSString *rightOfPoint = [NSString java_stringWithCharacters:fractCharArr];
  
#line 219
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_initWithNSString_(leftOfPoint);
  (void) [sb appendWithNSString:@"."];
  (void) [sb appendWithNSString:rightOfPoint];
  
#line 223
  return [sb description];
}


#line 226
- (jboolean)isEqual:(id)o {
  
#line 228
  if (JreObjectEqualsEquals(self, o)) {
    
#line 230
    return true;
  }
  
#line 233
  if (!([o isKindOfClass:[OrgSpongycastleMathEcSimpleBigDecimal class]])) {
    
#line 235
    return false;
  }
  
#line 238
  OrgSpongycastleMathEcSimpleBigDecimal *other = (OrgSpongycastleMathEcSimpleBigDecimal *) cast_chk(o, [OrgSpongycastleMathEcSimpleBigDecimal class]);
  return (([((JavaMathBigInteger *) nil_chk(bigInt_)) isEqual:((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(other))->bigInt_]) && (scale__ == other->scale__));
}


#line 242
- (NSUInteger)hash {
  
#line 244
  return ((jint) [((JavaMathBigInteger *) nil_chk(bigInt_)) hash]) ^ scale__;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgSpongycastleMathEcSimpleBigDecimal;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcSimpleBigDecimal;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcSimpleBigDecimal;", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcSimpleBigDecimal;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcSimpleBigDecimal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcSimpleBigDecimal;", 0x1, 8, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcSimpleBigDecimal;", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcSimpleBigDecimal;", 0x1, 9, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcSimpleBigDecimal;", 0x1, 9, 7, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcSimpleBigDecimal;", 0x1, 10, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcSimpleBigDecimal;", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcSimpleBigDecimal;", 0x1, 11, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 7, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithJavaMathBigInteger:withInt:);
  methods[1].selector = @selector(initPackagePrivateWithJavaMathBigInteger:withInt:);
  methods[2].selector = @selector(checkScaleWithOrgSpongycastleMathEcSimpleBigDecimal:);
  methods[3].selector = @selector(adjustScaleWithInt:);
  methods[4].selector = @selector(addWithOrgSpongycastleMathEcSimpleBigDecimal:);
  methods[5].selector = @selector(addWithJavaMathBigInteger:);
  methods[6].selector = @selector(negate);
  methods[7].selector = @selector(subtractWithOrgSpongycastleMathEcSimpleBigDecimal:);
  methods[8].selector = @selector(subtractWithJavaMathBigInteger:);
  methods[9].selector = @selector(multiplyWithOrgSpongycastleMathEcSimpleBigDecimal:);
  methods[10].selector = @selector(multiplyWithJavaMathBigInteger:);
  methods[11].selector = @selector(divideWithOrgSpongycastleMathEcSimpleBigDecimal:);
  methods[12].selector = @selector(divideWithJavaMathBigInteger:);
  methods[13].selector = @selector(shiftLeftWithInt:);
  methods[14].selector = @selector(compareToWithOrgSpongycastleMathEcSimpleBigDecimal:);
  methods[15].selector = @selector(compareToWithJavaMathBigInteger:);
  methods[16].selector = @selector(floor);
  methods[17].selector = @selector(round);
  methods[18].selector = @selector(intValue);
  methods[19].selector = @selector(longValue);
  methods[20].selector = @selector(getScale);
  methods[21].selector = @selector(description);
  methods[22].selector = @selector(isEqual:);
  methods[23].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgSpongycastleMathEcSimpleBigDecimal_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "bigInt_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scale__", "I", .constantValue.asLong = 0, 0x12, 17, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LJavaMathBigInteger;I", "checkScale", "LOrgSpongycastleMathEcSimpleBigDecimal;", "adjustScale", "I", "add", "LJavaMathBigInteger;", "subtract", "multiply", "divide", "shiftLeft", "compareTo", "toString", "equals", "LNSObject;", "hashCode", "scale" };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcSimpleBigDecimal = { "SimpleBigDecimal", "org.spongycastle.math.ec", ptrTable, methods, fields, 7, 0x0, 24, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleMathEcSimpleBigDecimal;
}

@end


#line 34
OrgSpongycastleMathEcSimpleBigDecimal *OrgSpongycastleMathEcSimpleBigDecimal_getInstanceWithJavaMathBigInteger_withInt_(JavaMathBigInteger *value, jint scale_) {
  OrgSpongycastleMathEcSimpleBigDecimal_initialize();
  return new_OrgSpongycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_([((JavaMathBigInteger *) nil_chk(value)) shiftLeftWithInt:scale_], scale_);
}


#line 46
void OrgSpongycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_(OrgSpongycastleMathEcSimpleBigDecimal *self, JavaMathBigInteger *bigInt, jint scale_) {
  NSObject_init(self);
  if (scale_ < 0) {
    
#line 50
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"scale may not be negative");
  }
  
#line 53
  self->bigInt_ = bigInt;
  self->scale__ = scale_;
}


#line 46
OrgSpongycastleMathEcSimpleBigDecimal *new_OrgSpongycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_(JavaMathBigInteger *bigInt, jint scale_) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcSimpleBigDecimal, initPackagePrivateWithJavaMathBigInteger_withInt_, bigInt, scale_)
}


#line 46
OrgSpongycastleMathEcSimpleBigDecimal *create_OrgSpongycastleMathEcSimpleBigDecimal_initPackagePrivateWithJavaMathBigInteger_withInt_(JavaMathBigInteger *bigInt, jint scale_) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcSimpleBigDecimal, initPackagePrivateWithJavaMathBigInteger_withInt_, bigInt, scale_)
}


#line 57
void OrgSpongycastleMathEcSimpleBigDecimal_checkScaleWithOrgSpongycastleMathEcSimpleBigDecimal_(OrgSpongycastleMathEcSimpleBigDecimal *self, OrgSpongycastleMathEcSimpleBigDecimal *b) {
  
#line 59
  if (self->scale__ != ((OrgSpongycastleMathEcSimpleBigDecimal *) nil_chk(b))->scale__) {
    
#line 61
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Only SimpleBigDecimal of same scale allowed in arithmetic operations");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcSimpleBigDecimal)
