//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/crypto/paddings/PaddedBufferedBlockCipher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_PaddedBufferedBlockCipher")
#ifdef RESTRICT_PaddedBufferedBlockCipher
#define INCLUDE_ALL_PaddedBufferedBlockCipher 0
#else
#define INCLUDE_ALL_PaddedBufferedBlockCipher 1
#endif
#undef RESTRICT_PaddedBufferedBlockCipher

#if !defined (OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher_) && (INCLUDE_ALL_PaddedBufferedBlockCipher || defined(INCLUDE_OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher))
#define OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher_

#define RESTRICT_BufferedBlockCipher 1
#define INCLUDE_OrgSpongycastleCryptoBufferedBlockCipher 1
#include "BufferedBlockCipher.h"

@class IOSByteArray;
@protocol OrgSpongycastleCryptoBlockCipher;
@protocol OrgSpongycastleCryptoCipherParameters;
@protocol OrgSpongycastleCryptoPaddingsBlockCipherPadding;

/*!
 @brief A wrapper class that allows block ciphers to be used to process data in
  a piecemeal fashion with padding.The PaddedBufferedBlockCipher
  outputs a block only when the buffer is full and more data is being added,
  or on a doFinal (unless the current block in the buffer is a pad block).
 The default padding mechanism used is the one outlined in PKCS5/PKCS7.
 */
@interface OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher : OrgSpongycastleCryptoBufferedBlockCipher {
 @public
  id<OrgSpongycastleCryptoPaddingsBlockCipherPadding> padding_;
}

#pragma mark Public

/*!
 @brief Create a buffered block cipher PKCS7 padding
 @param cipher the underlying block cipher this buffering object wraps.
 */
- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher;

/*!
 @brief Create a buffered block cipher with the desired padding.
 @param cipher the underlying block cipher this buffering object wraps.
 @param padding the padding type.
 */
- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher
     withOrgSpongycastleCryptoPaddingsBlockCipherPadding:(id<OrgSpongycastleCryptoPaddingsBlockCipherPadding>)padding;

/*!
 @brief Process the last block in the buffer.If the buffer is currently
  full and padding needs to be added a call to doFinal will produce
  2 * getBlockSize() bytes.
 @param outArg the array the block currently being held is copied into.
 @param outOff the offset at which the copying starts.
 @return the number of output bytes copied to out.
 @throw DataLengthExceptionif there is insufficient space in out for
  the output or we are decrypting and the input is not block size aligned.
 @throw IllegalStateExceptionif the underlying cipher is not
  initialised.
 @throw InvalidCipherTextExceptionif padding is expected and not found.
 */
- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

/*!
 @brief return the minimum size of the output buffer required for an update
  plus a doFinal with an input of len bytes.
 @param len the length of the input.
 @return the space required to accommodate a call to update and doFinal
  with len bytes of input.
 */
- (jint)getOutputSizeWithInt:(jint)len;

/*!
 @brief return the size of the output buffer required for an update 
  an input of len bytes.
 @param len the length of the input.
 @return the space required to accommodate a call to update
  with len bytes of input.
 */
- (jint)getUpdateOutputSizeWithInt:(jint)len;

/*!
 @brief initialise the cipher.
 @param forEncryption if true the cipher is initialised for   encryption, if false for decryption.
 @param params the key and other data required by the cipher.
 @throw IllegalArgumentExceptionif the params argument is
  inappropriate.
 */
- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

/*!
 @brief process a single byte, producing an output block if neccessary.
 @param inArg the input byte.
 @param outArg the space for any output that might be produced.
 @param outOff the offset from which the output will be copied.
 @return the number of output bytes copied to out.
 @throw DataLengthExceptionif there isn't enough space in out.
 @throw IllegalStateExceptionif the cipher isn't initialised.
 */
- (jint)processByteWithByte:(jbyte)inArg
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff;

/*!
 @brief process an array of bytes, producing output if necessary.
 @param inArg the input byte array.
 @param inOff the offset at which the input data starts.
 @param len the number of bytes to be copied out of the input array.
 @param outArg the space for any output that might be produced.
 @param outOff the offset from which the output will be copied.
 @return the number of output bytes copied to out.
 @throw DataLengthExceptionif there isn't enough space in out.
 @throw IllegalStateExceptionif the cipher isn't initialised.
 */
- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher, padding_, id<OrgSpongycastleCryptoPaddingsBlockCipherPadding>)

FOUNDATION_EXPORT void OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher *self, id<OrgSpongycastleCryptoBlockCipher> cipher, id<OrgSpongycastleCryptoPaddingsBlockCipherPadding> padding);

FOUNDATION_EXPORT OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher *new_OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(id<OrgSpongycastleCryptoBlockCipher> cipher, id<OrgSpongycastleCryptoPaddingsBlockCipherPadding> padding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher *create_OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(id<OrgSpongycastleCryptoBlockCipher> cipher, id<OrgSpongycastleCryptoPaddingsBlockCipherPadding> padding);

FOUNDATION_EXPORT void OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher *self, id<OrgSpongycastleCryptoBlockCipher> cipher);

FOUNDATION_EXPORT OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher *new_OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher *create_OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> cipher);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoPaddingsPaddedBufferedBlockCipher)

#endif

#pragma pop_macro("INCLUDE_ALL_PaddedBufferedBlockCipher")
