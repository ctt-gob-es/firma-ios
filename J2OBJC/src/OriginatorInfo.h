//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/asn1/cms/OriginatorInfo.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OriginatorInfo")
#ifdef RESTRICT_OriginatorInfo
#define INCLUDE_ALL_OriginatorInfo 0
#else
#define INCLUDE_ALL_OriginatorInfo 1
#endif
#undef RESTRICT_OriginatorInfo

#if !defined (OrgSpongycastleAsn1CmsOriginatorInfo_) && (INCLUDE_ALL_OriginatorInfo || defined(INCLUDE_OrgSpongycastleAsn1CmsOriginatorInfo))
#define OrgSpongycastleAsn1CmsOriginatorInfo_

#define RESTRICT_ASN1Object 1
#define INCLUDE_OrgSpongycastleAsn1ASN1Object 1
#include "ASN1Object.h"

@class OrgSpongycastleAsn1ASN1Primitive;
@class OrgSpongycastleAsn1ASN1Set;
@class OrgSpongycastleAsn1ASN1TaggedObject;

/*!
 @brief <a href="http://tools.ietf.org/html/rfc5652#section-6.2.1">RFC 5652</a>: OriginatorInfo object.
 @code

  RFC 3369:
  OriginatorInfo ::= SEQUENCE {
      certs [0] IMPLICIT CertificateSet OPTIONAL,
      crls  [1] IMPLICIT CertificateRevocationLists OPTIONAL 
  }
  CertificateRevocationLists ::= SET OF CertificateList (from X.509)
  RFC 3582 / 5652:
  OriginatorInfo ::= SEQUENCE {
      certs [0] IMPLICIT CertificateSet OPTIONAL,
      crls  [1] IMPLICIT RevocationInfoChoices OPTIONAL
  }
  RevocationInfoChoices ::= SET OF RevocationInfoChoice
  RevocationInfoChoice ::= CHOICE {
      crl CertificateList,
      other [1] IMPLICIT OtherRevocationInfoFormat }
  OtherRevocationInfoFormat ::= SEQUENCE {
      otherRevInfoFormat OBJECT IDENTIFIER,
      otherRevInfo ANY DEFINED BY otherRevInfoFormat } 
  
@endcode
  <p>
  TODO: RevocationInfoChoices / RevocationInfoChoice.
        Constructor using CertificateSet, CertificationInfoChoices
 */
@interface OrgSpongycastleAsn1CmsOriginatorInfo : OrgSpongycastleAsn1ASN1Object

#pragma mark Public

- (instancetype)initWithOrgSpongycastleAsn1ASN1Set:(OrgSpongycastleAsn1ASN1Set *)certs
                    withOrgSpongycastleAsn1ASN1Set:(OrgSpongycastleAsn1ASN1Set *)crls;

- (OrgSpongycastleAsn1ASN1Set *)getCertificates;

- (OrgSpongycastleAsn1ASN1Set *)getCRLs;

/*!
 @brief Return an OriginatorInfo object from a tagged object.
 @param obj the tagged object holding the object we want.
 @param explicit_ true if the object is meant to be explicitly               tagged false otherwise.
 @throw IllegalArgumentExceptionif the object held by the
           tagged object cannot be converted.
 */
+ (OrgSpongycastleAsn1CmsOriginatorInfo *)getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject:(OrgSpongycastleAsn1ASN1TaggedObject *)obj
                                                                                 withBoolean:(jboolean)explicit_;

/*!
 @brief Return an OriginatorInfo object from the given object.
 <p>
  Accepted inputs: 
 <ul>
  <li> null &rarr; null 
 <li> <code>OriginatorInfo</code> object 
 <li> <code>ASN1Sequence</code> input formats with OriginatorInfo structure inside 
 </ul>
 @param obj the object we want converted.
 @throw IllegalArgumentExceptionif the object cannot be converted.
 */
+ (OrgSpongycastleAsn1CmsOriginatorInfo *)getInstanceWithId:(id)obj;

/*!
 @brief Produce an object suitable for an ASN1OutputStream.
 */
- (OrgSpongycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleAsn1CmsOriginatorInfo)

FOUNDATION_EXPORT void OrgSpongycastleAsn1CmsOriginatorInfo_initWithOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1ASN1Set_(OrgSpongycastleAsn1CmsOriginatorInfo *self, OrgSpongycastleAsn1ASN1Set *certs, OrgSpongycastleAsn1ASN1Set *crls);

FOUNDATION_EXPORT OrgSpongycastleAsn1CmsOriginatorInfo *new_OrgSpongycastleAsn1CmsOriginatorInfo_initWithOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1ASN1Set_(OrgSpongycastleAsn1ASN1Set *certs, OrgSpongycastleAsn1ASN1Set *crls) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1CmsOriginatorInfo *create_OrgSpongycastleAsn1CmsOriginatorInfo_initWithOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1ASN1Set_(OrgSpongycastleAsn1ASN1Set *certs, OrgSpongycastleAsn1ASN1Set *crls);

FOUNDATION_EXPORT OrgSpongycastleAsn1CmsOriginatorInfo *OrgSpongycastleAsn1CmsOriginatorInfo_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(OrgSpongycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT OrgSpongycastleAsn1CmsOriginatorInfo *OrgSpongycastleAsn1CmsOriginatorInfo_getInstanceWithId_(id obj);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleAsn1CmsOriginatorInfo)

#endif

#pragma pop_macro("INCLUDE_ALL_OriginatorInfo")
