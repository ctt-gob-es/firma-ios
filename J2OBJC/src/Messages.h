//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/Messages.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Messages")
#ifdef RESTRICT_Messages
#define INCLUDE_ALL_Messages 0
#else
#define INCLUDE_ALL_Messages 1
#endif
#undef RESTRICT_Messages

#if !defined (ComMessages_) && (INCLUDE_ALL_Messages || defined(INCLUDE_ComMessages))
#define ComMessages_

@class IOSObjectArray;
@class JavaUtilLocale;
@class JavaUtilResourceBundle;

/*!
 @brief This class retrieves strings from a resource bundle and returns them,
  formatting them with MessageFormat when required.
 <p>
  It is used by the system classes to provide national language support, by
  looking up messages in the <code>
     org.apache.harmony.awt.internal.nls.messages 
 </code> resource bundle. Note that if this file is
  not available, or an invalid key is looked up, or resource bundle support is
  not available, the key itself will be returned as the associated message.
  This means that the <em>KEY</em> should a reasonable human-readable (english)
  string.
 */
@interface ComMessages : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Generates a formatted text string given a source string containing
  "argument markers" of the form "{argNum}" where each argNum must be in
  the range 0..9.The result is generated by inserting the toString of each
  argument into the position indicated in the string.
 <p>
  To insert the "{" character into the output, use a single backslash
  character to escape it (i.e. "\{"). The "}" character does not need to be
  escaped.
 @param format String the format to use when printing.
 @param args Object[] the arguments to use.
 @return String the formatted message.
 */
+ (NSString *)formatWithNSString:(NSString *)format
               withNSObjectArray:(IOSObjectArray *)args;

/*!
 @brief Retrieves a message which has no arguments.
 @param msg String the key to look up.
 @return String the message for that key in the system message bundle.
 */
+ (NSString *)getStringWithNSString:(NSString *)msg;

/*!
 @brief Retrieves a message which takes 1 character argument.
 @param msg String the key to look up.
 @param arg char the character to insert in the formatted output.
 @return String the message for that key in the system message bundle.
 */
+ (NSString *)getStringWithNSString:(NSString *)msg
                           withChar:(jchar)arg;

/*!
 @brief Retrieves a message which takes 1 integer argument.
 @param msg String the key to look up.
 @param arg int the integer to insert in the formatted output.
 @return String the message for that key in the system message bundle.
 */
+ (NSString *)getStringWithNSString:(NSString *)msg
                            withInt:(jint)arg;

/*!
 @brief Retrieves a message which takes 1 argument.
 @param msg String the key to look up.
 @param arg Object the object to insert in the formatted output.
 @return String the message for that key in the system message bundle.
 */
+ (NSString *)getStringWithNSString:(NSString *)msg
                             withId:(id)arg;

/*!
 @brief Retrieves a message which takes 2 arguments.
 @param msg String the key to look up.
 @param arg1 Object an object to insert in the formatted output.
 @param arg2 Object another object to insert in the formatted output.
 @return String the message for that key in the system message bundle.
 */
+ (NSString *)getStringWithNSString:(NSString *)msg
                             withId:(id)arg1
                             withId:(id)arg2;

/*!
 @brief Retrieves a message which takes several arguments.
 @param msg String the key to look up.
 @param args Object[] the objects to insert in the formatted output.
 @return String the message for that key in the system message bundle.
 */
+ (NSString *)getStringWithNSString:(NSString *)msg
                  withNSObjectArray:(IOSObjectArray *)args;

/*!
 @brief Changes the locale of the messages.
 @param locale Locale the locale to change to.
 @param resource resource to set
 @return returns a locale
 */
+ (JavaUtilResourceBundle *)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale
                                           withNSString:(NSString *)resource;

@end

J2OBJC_STATIC_INIT(ComMessages)

FOUNDATION_EXPORT void ComMessages_init(ComMessages *self);

FOUNDATION_EXPORT ComMessages *new_ComMessages_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComMessages *create_ComMessages_init(void);

FOUNDATION_EXPORT NSString *ComMessages_getStringWithNSString_(NSString *msg);

FOUNDATION_EXPORT NSString *ComMessages_getStringWithNSString_withId_(NSString *msg, id arg);

FOUNDATION_EXPORT NSString *ComMessages_getStringWithNSString_withInt_(NSString *msg, jint arg);

FOUNDATION_EXPORT NSString *ComMessages_getStringWithNSString_withChar_(NSString *msg, jchar arg);

FOUNDATION_EXPORT NSString *ComMessages_getStringWithNSString_withId_withId_(NSString *msg, id arg1, id arg2);

FOUNDATION_EXPORT NSString *ComMessages_getStringWithNSString_withNSObjectArray_(NSString *msg, IOSObjectArray *args);

FOUNDATION_EXPORT NSString *ComMessages_formatWithNSString_withNSObjectArray_(NSString *format, IOSObjectArray *args);

FOUNDATION_EXPORT JavaUtilResourceBundle *ComMessages_setLocaleWithJavaUtilLocale_withNSString_(JavaUtilLocale *locale, NSString *resource);

J2OBJC_TYPE_LITERAL_HEADER(ComMessages)

#endif

#pragma pop_macro("INCLUDE_ALL_Messages")
