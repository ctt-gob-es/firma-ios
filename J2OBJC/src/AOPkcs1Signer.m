//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/signers/AOPkcs1Signer.java
//

#include "AOCancelledOperationException.h"
#include "AOException.h"
#include "AOPkcs1Signer.h"
#include "AOSignConstants.h"
#include "AOSignInfo.h"
#include "AOTreeModel.h"
#include "CounterSignTarget.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/PrivateKey.h"
#include "java/security/Provider.h"
#include "java/security/PublicKey.h"
#include "java/security/Security.h"
#include "java/security/Signature.h"
#include "java/security/cert/Certificate.h"
#include "java/util/Locale.h"
#include "java/util/Properties.h"
#include "java/util/logging/Logger.h"

#if !__has_feature(objc_arc)
#error "AOPkcs1Signer must be compiled with ARC (-fobjc-arc)"
#endif

inline NSString *EsGobAfirmaCoreSignersAOPkcs1Signer_get_PKCS1_FILE_SUFFIX(void);
static NSString *EsGobAfirmaCoreSignersAOPkcs1Signer_PKCS1_FILE_SUFFIX = @".p1";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1Signer, PKCS1_FILE_SUFFIX, NSString *)

inline JavaUtilLoggingLogger *EsGobAfirmaCoreSignersAOPkcs1Signer_get_LOGGER(void);
static JavaUtilLoggingLogger *EsGobAfirmaCoreSignersAOPkcs1Signer_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1Signer, LOGGER, JavaUtilLoggingLogger *)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/signers/AOPkcs1Signer.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaCoreSignersAOPkcs1Signer)


#line 28
@implementation EsGobAfirmaCoreSignersAOPkcs1Signer

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 28
- (instancetype)init {
  EsGobAfirmaCoreSignersAOPkcs1Signer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 50
- (IOSByteArray *)signWithByteArray:(IOSByteArray *)data
                       withNSString:(NSString *)algorithm
         withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
             withJavaUtilProperties:(JavaUtilProperties *)extraParams {
  
#line 57
  if (algorithm == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 59
    @"Es necesario indicar el algoritmo de firma, no puede ser nulo");
  }
  
#line 63
  [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreSignersAOPkcs1Signer_LOGGER)) fineWithNSString:JreStrcat("$$$$", @"Se ha solicitado una firma '",
#line 64
  algorithm, @"' con una clave de tipo ", [((id<JavaSecurityPrivateKey>) nil_chk(key)) getAlgorithm])];
  
#line 67
  JavaSecurityProvider *p;
  if (extraParams != nil) {
    NSString *providerName = [extraParams getPropertyWithNSString:JreStrcat("$$", @"Provider.", [[key java_getClass] getName])];
    p = JavaSecuritySecurity_getProviderWithNSString_(providerName);
  }
  else {
    p = nil;
  }
  
#line 76
  JavaSecuritySignature *sig;
  NSString *algorithmName;
  @try {
    NSString *keyType = [key getAlgorithm];
    
#line 81
    algorithmName = EsGobAfirmaCoreSignersAOSignConstants_composeSignatureAlgorithmNameWithNSString_withNSString_(algorithm, keyType);
    
#line 83
    sig = p != nil ? JavaSecuritySignature_getInstanceWithNSString_withJavaSecurityProvider_(algorithmName, p) : JavaSecuritySignature_getInstanceWithNSString_(algorithmName);
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$@", @"No se soporta el algoritmo de firma (", algorithm, @"): ", e), e);
  }
  
#line 89
  @try {
    [((JavaSecuritySignature *) nil_chk(sig)) initSignWithJavaSecurityPrivateKey:key];
  }
  @catch (JavaLangException *e) {
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$@", @"Error al inicializar la firma con la clave privada para el algoritmo '", algorithm, @"': ", e), e);
  }
  
#line 96
  @try {
    [sig updateWithByteArray:data];
  }
  @catch (JavaLangException *e) {
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error al configurar los datos a firmar: ", e), e);
  }
  
#line 103
  IOSByteArray *signature;
  @try {
    signature = [sig sign];
  }
  @catch (JavaLangException *e) {
    
#line 109
    if ([@"es.gob.jmulticard.CancelledOperationException" isEqual:[[e java_getClass] getName]]) {
      @throw new_EsGobAfirmaCoreAOCancelledOperationException_initWithNSString_(@"Cancelacion del dialogo de JMulticard");
    }
    
#line 113
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error durante el proceso de firma PKCS#1: ", e), e);
  }
  
#line 119
  if (certChain != nil && certChain->size_ > 0) {
    @try {
      JavaSecuritySignature *sigVerifier = JavaSecuritySignature_getInstanceWithNSString_(algorithmName);
      [((JavaSecuritySignature *) nil_chk(sigVerifier)) initVerifyWithJavaSecurityPublicKey:[((JavaSecurityCertCertificate *) nil_chk(IOSObjectArray_Get(certChain, 0))) getPublicKey]];
      [sigVerifier updateWithByteArray:data];
      if (![sigVerifier verifyWithByteArray:signature]) {
        @throw new_EsGobAfirmaCoreAOException_initWithNSString_(@"El PKCS#1 de firma obtenido no se genero con el certificado indicado");
      }
    }
    @catch (JavaLangException *e) {
      @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(@"Error al verificar el PKCS#1 de la firma", e);
    }
  }
  else {
    [EsGobAfirmaCoreSignersAOPkcs1Signer_LOGGER warningWithNSString:@"No se ha proporcionado el certificado para comprobar la integridad del PKCS#1"];
  }
  
#line 136
  return signature;
}


#line 139
- (IOSByteArray *)cosignWithByteArray:(IOSByteArray *)data
                        withByteArray:(IOSByteArray *)sign
                         withNSString:(NSString *)algorithm
           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
               withJavaUtilProperties:(JavaUtilProperties *)extraParams {
  
#line 141
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No se soporta la multifirma de las firmas NONE");
}


#line 144
- (IOSByteArray *)cosignWithByteArray:(IOSByteArray *)sign
                         withNSString:(NSString *)algorithm
           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
               withJavaUtilProperties:(JavaUtilProperties *)extraParams {
  
#line 146
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No se soporta la multifirma de las firmas NONE");
}


#line 149
- (IOSByteArray *)countersignWithByteArray:(IOSByteArray *)sign
                              withNSString:(NSString *)algorithm
withEsGobAfirmaCoreSignersCounterSignTarget:(EsGobAfirmaCoreSignersCounterSignTarget *)targetType
                         withNSObjectArray:(IOSObjectArray *)targets
                withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
      withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
                    withJavaUtilProperties:(JavaUtilProperties *)extraParams {
  
#line 151
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No se soporta la multifirma de las firmas NONE");
}


#line 154
- (EsGobAfirmaCoreUtilTreeAOTreeModel *)getSignersStructureWithByteArray:(IOSByteArray *)sign
                                                             withBoolean:(jboolean)asSimpleSignInfo {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No se puede obtener la estructura de firmantes en PKCS#1");
}

- (EsGobAfirmaCoreUtilTreeAOTreeModel *)getSignersStructureWithByteArray:(IOSByteArray *)sign
                                                  withJavaUtilProperties:(JavaUtilProperties *)params
                                                             withBoolean:(jboolean)asSimpleSignInfo {
  
#line 161
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No se puede obtener la estructura de firmantes en PKCS#1");
}


#line 164
- (jboolean)isSignWithByteArray:(IOSByteArray *)signData
         withJavaUtilProperties:(JavaUtilProperties *)params {
  return [self isSignWithByteArray:signData];
}

- (jboolean)isSignWithByteArray:(IOSByteArray *)is {
  
#line 171
  return false;
}


#line 174
- (jboolean)isValidDataFileWithByteArray:(IOSByteArray *)is {
  
#line 176
  return is != nil && is->size_ > 0;
}


#line 179
- (NSString *)getSignedNameWithNSString:(NSString *)originalName
                           withNSString:(NSString *)inText {
  NSString *inTextInt = inText != nil ? inText : @"";
  if (originalName == nil) {
    return JreStrcat("$$", @"signature", EsGobAfirmaCoreSignersAOPkcs1Signer_PKCS1_FILE_SUFFIX);
  }
  if ([((NSString *) nil_chk([originalName java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_hasSuffix:EsGobAfirmaCoreSignersAOPkcs1Signer_PKCS1_FILE_SUFFIX]) {
    return JreStrcat("$$$", [originalName java_substring:0 endIndex:[originalName java_length] - [((NSString *) nil_chk(EsGobAfirmaCoreSignersAOPkcs1Signer_PKCS1_FILE_SUFFIX)) java_length]], inTextInt, EsGobAfirmaCoreSignersAOPkcs1Signer_PKCS1_FILE_SUFFIX);
  }
  return JreStrcat("$$$", originalName, inTextInt, EsGobAfirmaCoreSignersAOPkcs1Signer_PKCS1_FILE_SUFFIX);
}

- (IOSByteArray *)getDataWithByteArray:(IOSByteArray *)signData {
  
#line 193
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No se pueden obtener los datos firmados en PKCS#1");
}


#line 196
- (IOSByteArray *)getDataWithByteArray:(IOSByteArray *)sign
                withJavaUtilProperties:(JavaUtilProperties *)params {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No se pueden obtener los datos firmados en PKCS#1");
}

- (EsGobAfirmaCoreSignersAOSignInfo *)getSignInfoWithByteArray:(IOSByteArray *)signData {
  
#line 203
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No se puede obtener informacion de las firmas PKCS#1");
}


#line 206
- (EsGobAfirmaCoreSignersAOSignInfo *)getSignInfoWithByteArray:(IOSByteArray *)data
                                        withJavaUtilProperties:(JavaUtilProperties *)params {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"No se puede obtener informacion de las firmas PKCS#1");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreUtilTreeAOTreeModel;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreUtilTreeAOTreeModel;", 0x1, 7, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 16, 12, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 16, 11, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersAOSignInfo;", 0x1, 17, 12, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersAOSignInfo;", 0x1, 17, 11, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(signWithByteArray:withNSString:withJavaSecurityPrivateKey:withJavaSecurityCertCertificateArray:withJavaUtilProperties:);
  methods[2].selector = @selector(cosignWithByteArray:withByteArray:withNSString:withJavaSecurityPrivateKey:withJavaSecurityCertCertificateArray:withJavaUtilProperties:);
  methods[3].selector = @selector(cosignWithByteArray:withNSString:withJavaSecurityPrivateKey:withJavaSecurityCertCertificateArray:withJavaUtilProperties:);
  methods[4].selector = @selector(countersignWithByteArray:withNSString:withEsGobAfirmaCoreSignersCounterSignTarget:withNSObjectArray:withJavaSecurityPrivateKey:withJavaSecurityCertCertificateArray:withJavaUtilProperties:);
  methods[5].selector = @selector(getSignersStructureWithByteArray:withBoolean:);
  methods[6].selector = @selector(getSignersStructureWithByteArray:withJavaUtilProperties:withBoolean:);
  methods[7].selector = @selector(isSignWithByteArray:withJavaUtilProperties:);
  methods[8].selector = @selector(isSignWithByteArray:);
  methods[9].selector = @selector(isValidDataFileWithByteArray:);
  methods[10].selector = @selector(getSignedNameWithNSString:withNSString:);
  methods[11].selector = @selector(getDataWithByteArray:);
  methods[12].selector = @selector(getDataWithByteArray:withJavaUtilProperties:);
  methods[13].selector = @selector(getSignInfoWithByteArray:);
  methods[14].selector = @selector(getSignInfoWithByteArray:withJavaUtilProperties:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PKCS1_FILE_SUFFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
  };
  static const void *ptrTable[] = { "sign", "[BLNSString;LJavaSecurityPrivateKey;[LJavaSecurityCertCertificate;LJavaUtilProperties;", "LEsGobAfirmaCoreAOException;", "cosign", "[B[BLNSString;LJavaSecurityPrivateKey;[LJavaSecurityCertCertificate;LJavaUtilProperties;", "countersign", "[BLNSString;LEsGobAfirmaCoreSignersCounterSignTarget;[LNSObject;LJavaSecurityPrivateKey;[LJavaSecurityCertCertificate;LJavaUtilProperties;", "getSignersStructure", "[BZ", "[BLJavaUtilProperties;Z", "isSign", "[BLJavaUtilProperties;", "[B", "isValidDataFile", "getSignedName", "LNSString;LNSString;", "getData", "getSignInfo", &EsGobAfirmaCoreSignersAOPkcs1Signer_PKCS1_FILE_SUFFIX, &EsGobAfirmaCoreSignersAOPkcs1Signer_LOGGER };
  static const J2ObjcClassInfo _EsGobAfirmaCoreSignersAOPkcs1Signer = { "AOPkcs1Signer", "es.gob.afirma.core.signers", ptrTable, methods, fields, 7, 0x11, 15, 2, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreSignersAOPkcs1Signer;
}

+ (void)initialize {
  if (self == [EsGobAfirmaCoreSignersAOPkcs1Signer class]) {
    EsGobAfirmaCoreSignersAOPkcs1Signer_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 32
    @"es.gob.afirma");
    J2OBJC_SET_INITIALIZED(EsGobAfirmaCoreSignersAOPkcs1Signer)
  }
}

@end


#line 28
void EsGobAfirmaCoreSignersAOPkcs1Signer_init(EsGobAfirmaCoreSignersAOPkcs1Signer *self) {
  NSObject_init(self);
}


#line 28
EsGobAfirmaCoreSignersAOPkcs1Signer *new_EsGobAfirmaCoreSignersAOPkcs1Signer_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersAOPkcs1Signer, init)
}


#line 28
EsGobAfirmaCoreSignersAOPkcs1Signer *create_EsGobAfirmaCoreSignersAOPkcs1Signer_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersAOPkcs1Signer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreSignersAOPkcs1Signer)
