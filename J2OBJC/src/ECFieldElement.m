//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/math/ec/ECFieldElement.java
//

#include "Arrays.h"
#include "BigIntegers.h"
#include "ECConstants.h"
#include "ECFieldElement.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LongArray.h"
#include "Mod.h"
#include "Nat.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "java/util/Random.h"

#if !__has_feature(objc_arc)
#error "ECFieldElement must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleMathEcECFieldElement_Fp ()

- (OrgSpongycastleMathEcECFieldElement *)checkSqrtWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)z;

- (IOSObjectArray *)lucasSequenceWithJavaMathBigInteger:(JavaMathBigInteger *)P
                                 withJavaMathBigInteger:(JavaMathBigInteger *)Q
                                 withJavaMathBigInteger:(JavaMathBigInteger *)k;

@end

__attribute__((unused)) static OrgSpongycastleMathEcECFieldElement *OrgSpongycastleMathEcECFieldElement_Fp_checkSqrtWithOrgSpongycastleMathEcECFieldElement_(OrgSpongycastleMathEcECFieldElement_Fp *self, OrgSpongycastleMathEcECFieldElement *z);

__attribute__((unused)) static IOSObjectArray *OrgSpongycastleMathEcECFieldElement_Fp_lucasSequenceWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECFieldElement_Fp *self, JavaMathBigInteger *P, JavaMathBigInteger *Q, JavaMathBigInteger *k);

@interface OrgSpongycastleMathEcECFieldElement_F2m () {
 @public
  /*!
   @brief TPB or PPB.
   */
  jint representation_;
  /*!
   @brief The exponent <code>m</code> of <code>F<sub>2<sup>m</sup></sub></code>.
   */
  jint m_;
  IOSIntArray *ks_;
  /*!
   @brief The <code>LongArray</code> holding the bits.
   */
  OrgSpongycastleMathEcLongArray *x_;
}

- (instancetype)initWithInt:(jint)m
               withIntArray:(IOSIntArray *)ks
withOrgSpongycastleMathEcLongArray:(OrgSpongycastleMathEcLongArray *)x;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleMathEcECFieldElement_F2m, ks_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleMathEcECFieldElement_F2m, x_, OrgSpongycastleMathEcLongArray *)

__attribute__((unused)) static void OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgSpongycastleMathEcLongArray_(OrgSpongycastleMathEcECFieldElement_F2m *self, jint m, IOSIntArray *ks, OrgSpongycastleMathEcLongArray *x);

__attribute__((unused)) static OrgSpongycastleMathEcECFieldElement_F2m *new_OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgSpongycastleMathEcLongArray_(jint m, IOSIntArray *ks, OrgSpongycastleMathEcLongArray *x) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleMathEcECFieldElement_F2m *create_OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgSpongycastleMathEcLongArray_(jint m, IOSIntArray *ks, OrgSpongycastleMathEcLongArray *x);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/math/ec/ECFieldElement.java"


#line 11
@implementation OrgSpongycastleMathEcECFieldElement

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 11
- (instancetype)init {
  OrgSpongycastleMathEcECFieldElement_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 14
- (JavaMathBigInteger *)toBigInteger {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 15
- (NSString *)getFieldName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 16
- (jint)getFieldSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 17
- (OrgSpongycastleMathEcECFieldElement *)addWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 18
- (OrgSpongycastleMathEcECFieldElement *)addOne {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 19
- (OrgSpongycastleMathEcECFieldElement *)subtractWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 20
- (OrgSpongycastleMathEcECFieldElement *)multiplyWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 21
- (OrgSpongycastleMathEcECFieldElement *)divideWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 22
- (OrgSpongycastleMathEcECFieldElement *)negate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 23
- (OrgSpongycastleMathEcECFieldElement *)square {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 24
- (OrgSpongycastleMathEcECFieldElement *)invert {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 25
- (OrgSpongycastleMathEcECFieldElement *)sqrt {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 27
- (jint)bitLength {
  
#line 29
  return [((JavaMathBigInteger *) nil_chk([self toBigInteger])) bitLength];
}


#line 32
- (jboolean)isOne {
  
#line 34
  return [self bitLength] == 1;
}


#line 37
- (jboolean)isZero {
  
#line 39
  return 0 == [((JavaMathBigInteger *) nil_chk([self toBigInteger])) signum];
}


#line 42
- (OrgSpongycastleMathEcECFieldElement *)multiplyMinusProductWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b
                                                             withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                             withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y {
  
#line 44
  return [((OrgSpongycastleMathEcECFieldElement *) nil_chk([self multiplyWithOrgSpongycastleMathEcECFieldElement:b])) subtractWithOrgSpongycastleMathEcECFieldElement:[((OrgSpongycastleMathEcECFieldElement *) nil_chk(x)) multiplyWithOrgSpongycastleMathEcECFieldElement:y]];
}


#line 47
- (OrgSpongycastleMathEcECFieldElement *)multiplyPlusProductWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b
                                                            withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                            withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y {
  
#line 49
  return [((OrgSpongycastleMathEcECFieldElement *) nil_chk([self multiplyWithOrgSpongycastleMathEcECFieldElement:b])) addWithOrgSpongycastleMathEcECFieldElement:[((OrgSpongycastleMathEcECFieldElement *) nil_chk(x)) multiplyWithOrgSpongycastleMathEcECFieldElement:y]];
}


#line 52
- (OrgSpongycastleMathEcECFieldElement *)squareMinusProductWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                           withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y {
  return [((OrgSpongycastleMathEcECFieldElement *) nil_chk([self square])) subtractWithOrgSpongycastleMathEcECFieldElement:[((OrgSpongycastleMathEcECFieldElement *) nil_chk(x)) multiplyWithOrgSpongycastleMathEcECFieldElement:y]];
}

- (OrgSpongycastleMathEcECFieldElement *)squarePlusProductWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                          withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y {
  return [((OrgSpongycastleMathEcECFieldElement *) nil_chk([self square])) addWithOrgSpongycastleMathEcECFieldElement:[((OrgSpongycastleMathEcECFieldElement *) nil_chk(x)) multiplyWithOrgSpongycastleMathEcECFieldElement:y]];
}

- (OrgSpongycastleMathEcECFieldElement *)squarePowWithInt:(jint)pow {
  
#line 64
  OrgSpongycastleMathEcECFieldElement *r = self;
  for (jint i = 0; i < pow; ++i) {
    
#line 67
    r = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(r)) square];
  }
  return r;
}


#line 72
- (jboolean)testBitZero {
  
#line 74
  return [((JavaMathBigInteger *) nil_chk([self toBigInteger])) testBitWithInt:0];
}


#line 77
- (NSString *)description {
  
#line 79
  return [((JavaMathBigInteger *) nil_chk([self toBigInteger])) toStringWithInt:16];
}


#line 82
- (IOSByteArray *)getEncoded {
  
#line 84
  return OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_(JreIntDiv(([self getFieldSize] + 7), 8), [self toBigInteger]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x401, 2, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x401, 3, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x401, 4, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(toBigInteger);
  methods[2].selector = @selector(getFieldName);
  methods[3].selector = @selector(getFieldSize);
  methods[4].selector = @selector(addWithOrgSpongycastleMathEcECFieldElement:);
  methods[5].selector = @selector(addOne);
  methods[6].selector = @selector(subtractWithOrgSpongycastleMathEcECFieldElement:);
  methods[7].selector = @selector(multiplyWithOrgSpongycastleMathEcECFieldElement:);
  methods[8].selector = @selector(divideWithOrgSpongycastleMathEcECFieldElement:);
  methods[9].selector = @selector(negate);
  methods[10].selector = @selector(square);
  methods[11].selector = @selector(invert);
  methods[12].selector = @selector(sqrt);
  methods[13].selector = @selector(bitLength);
  methods[14].selector = @selector(isOne);
  methods[15].selector = @selector(isZero);
  methods[16].selector = @selector(multiplyMinusProductWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:);
  methods[17].selector = @selector(multiplyPlusProductWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:);
  methods[18].selector = @selector(squareMinusProductWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:);
  methods[19].selector = @selector(squarePlusProductWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:);
  methods[20].selector = @selector(squarePowWithInt:);
  methods[21].selector = @selector(testBitZero);
  methods[22].selector = @selector(description);
  methods[23].selector = @selector(getEncoded);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "add", "LOrgSpongycastleMathEcECFieldElement;", "subtract", "multiply", "divide", "multiplyMinusProduct", "LOrgSpongycastleMathEcECFieldElement;LOrgSpongycastleMathEcECFieldElement;LOrgSpongycastleMathEcECFieldElement;", "multiplyPlusProduct", "squareMinusProduct", "LOrgSpongycastleMathEcECFieldElement;LOrgSpongycastleMathEcECFieldElement;", "squarePlusProduct", "squarePow", "I", "toString", "LOrgSpongycastleMathEcECFieldElement_Fp;LOrgSpongycastleMathEcECFieldElement_F2m;" };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcECFieldElement = { "ECFieldElement", "org.spongycastle.math.ec", ptrTable, methods, NULL, 7, 0x401, 24, 0, -1, 14, -1, -1, -1 };
  return &_OrgSpongycastleMathEcECFieldElement;
}

@end


#line 11
void OrgSpongycastleMathEcECFieldElement_init(OrgSpongycastleMathEcECFieldElement *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcECFieldElement)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/math/ec/ECFieldElement.java"


#line 87
@implementation OrgSpongycastleMathEcECFieldElement_Fp


#line 91
+ (JavaMathBigInteger *)calculateResidueWithJavaMathBigInteger:(JavaMathBigInteger *)p {
  return OrgSpongycastleMathEcECFieldElement_Fp_calculateResidueWithJavaMathBigInteger_(p);
}


#line 108
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)x {
  OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, q, x);
  return self;
}


#line 113
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)r
                    withJavaMathBigInteger:(JavaMathBigInteger *)x {
  OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, q, r, x);
  return self;
}


#line 125
- (JavaMathBigInteger *)toBigInteger {
  
#line 127
  return x_;
}


#line 135
- (NSString *)getFieldName {
  
#line 137
  return @"Fp";
}


#line 140
- (jint)getFieldSize {
  
#line 142
  return [((JavaMathBigInteger *) nil_chk(q_)) bitLength];
}


#line 145
- (JavaMathBigInteger *)getQ {
  
#line 147
  return q_;
}


#line 150
- (OrgSpongycastleMathEcECFieldElement *)addWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b {
  
#line 152
  return new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modAddWithJavaMathBigInteger:x_ withJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk(b)) toBigInteger]]);
}


#line 155
- (OrgSpongycastleMathEcECFieldElement *)addOne {
  
#line 157
  JavaMathBigInteger *x2 = [((JavaMathBigInteger *) nil_chk(x_)) addWithJavaMathBigInteger:JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)];
  if ([((JavaMathBigInteger *) nil_chk(x2)) compareToWithId:q_] == 0) {
    
#line 160
    x2 = JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO);
  }
  return new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, x2);
}


#line 165
- (OrgSpongycastleMathEcECFieldElement *)subtractWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b {
  
#line 167
  return new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modSubtractWithJavaMathBigInteger:x_ withJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk(b)) toBigInteger]]);
}


#line 170
- (OrgSpongycastleMathEcECFieldElement *)multiplyWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b {
  
#line 172
  return new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modMultWithJavaMathBigInteger:x_ withJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk(b)) toBigInteger]]);
}


#line 175
- (OrgSpongycastleMathEcECFieldElement *)multiplyMinusProductWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b
                                                             withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                             withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y {
  
#line 177
  JavaMathBigInteger *ax = self->x_;
  
#line 177
  JavaMathBigInteger *bx = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(b)) toBigInteger];
  
#line 177
  JavaMathBigInteger *xx = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(x)) toBigInteger];
  
#line 177
  JavaMathBigInteger *yx = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(y)) toBigInteger];
  JavaMathBigInteger *ab = [((JavaMathBigInteger *) nil_chk(ax)) multiplyWithJavaMathBigInteger:bx];
  JavaMathBigInteger *xy = [((JavaMathBigInteger *) nil_chk(xx)) multiplyWithJavaMathBigInteger:yx];
  return new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(ab)) subtractWithJavaMathBigInteger:xy]]);
}


#line 183
- (OrgSpongycastleMathEcECFieldElement *)multiplyPlusProductWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b
                                                            withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                            withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y {
  
#line 185
  JavaMathBigInteger *ax = self->x_;
  
#line 185
  JavaMathBigInteger *bx = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(b)) toBigInteger];
  
#line 185
  JavaMathBigInteger *xx = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(x)) toBigInteger];
  
#line 185
  JavaMathBigInteger *yx = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(y)) toBigInteger];
  JavaMathBigInteger *ab = [((JavaMathBigInteger *) nil_chk(ax)) multiplyWithJavaMathBigInteger:bx];
  JavaMathBigInteger *xy = [((JavaMathBigInteger *) nil_chk(xx)) multiplyWithJavaMathBigInteger:yx];
  return new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(ab)) addWithJavaMathBigInteger:xy]]);
}


#line 191
- (OrgSpongycastleMathEcECFieldElement *)divideWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b {
  
#line 193
  return new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modMultWithJavaMathBigInteger:x_ withJavaMathBigInteger:[self modInverseWithJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk(b)) toBigInteger]]]);
}


#line 196
- (OrgSpongycastleMathEcECFieldElement *)negate {
  
#line 198
  return [((JavaMathBigInteger *) nil_chk(x_)) signum] == 0 ? self : new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [((JavaMathBigInteger *) nil_chk(q_)) subtractWithJavaMathBigInteger:x_]);
}


#line 201
- (OrgSpongycastleMathEcECFieldElement *)square {
  
#line 203
  return new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modMultWithJavaMathBigInteger:x_ withJavaMathBigInteger:x_]);
}


#line 206
- (OrgSpongycastleMathEcECFieldElement *)squareMinusProductWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                           withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y {
  JavaMathBigInteger *ax = self->x_;
  
#line 208
  JavaMathBigInteger *xx = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(x)) toBigInteger];
  
#line 208
  JavaMathBigInteger *yx = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(y)) toBigInteger];
  JavaMathBigInteger *aa = [((JavaMathBigInteger *) nil_chk(ax)) multiplyWithJavaMathBigInteger:ax];
  JavaMathBigInteger *xy = [((JavaMathBigInteger *) nil_chk(xx)) multiplyWithJavaMathBigInteger:yx];
  return new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(aa)) subtractWithJavaMathBigInteger:xy]]);
}


#line 214
- (OrgSpongycastleMathEcECFieldElement *)squarePlusProductWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                          withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y {
  JavaMathBigInteger *ax = self->x_;
  
#line 216
  JavaMathBigInteger *xx = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(x)) toBigInteger];
  
#line 216
  JavaMathBigInteger *yx = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(y)) toBigInteger];
  JavaMathBigInteger *aa = [((JavaMathBigInteger *) nil_chk(ax)) multiplyWithJavaMathBigInteger:ax];
  JavaMathBigInteger *xy = [((JavaMathBigInteger *) nil_chk(xx)) multiplyWithJavaMathBigInteger:yx];
  return new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(aa)) addWithJavaMathBigInteger:xy]]);
}


#line 222
- (OrgSpongycastleMathEcECFieldElement *)invert {
  
#line 225
  return new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modInverseWithJavaMathBigInteger:x_]);
}


#line 233
- (OrgSpongycastleMathEcECFieldElement *)sqrt {
  
#line 235
  if ([self isZero] || [self isOne]) {
    
#line 237
    return self;
  }
  
#line 240
  if (![((JavaMathBigInteger *) nil_chk(q_)) testBitWithInt:0]) {
    
#line 242
    @throw new_JavaLangRuntimeException_initWithNSString_(@"not done yet");
  }
  
#line 248
  if ([((JavaMathBigInteger *) nil_chk(q_)) testBitWithInt:1]) {
    
#line 250
    JavaMathBigInteger *e = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(q_)) shiftRightWithInt:2])) addWithJavaMathBigInteger:JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)];
    return OrgSpongycastleMathEcECFieldElement_Fp_checkSqrtWithOrgSpongycastleMathEcECFieldElement_(self, new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [((JavaMathBigInteger *) nil_chk(x_)) modPowWithJavaMathBigInteger:e withJavaMathBigInteger:q_]));
  }
  
#line 254
  if ([((JavaMathBigInteger *) nil_chk(q_)) testBitWithInt:2]) {
    
#line 256
    JavaMathBigInteger *t1 = [((JavaMathBigInteger *) nil_chk(x_)) modPowWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(q_)) shiftRightWithInt:3] withJavaMathBigInteger:q_];
    JavaMathBigInteger *t2 = [self modMultWithJavaMathBigInteger:t1 withJavaMathBigInteger:x_];
    JavaMathBigInteger *t3 = [self modMultWithJavaMathBigInteger:t2 withJavaMathBigInteger:t1];
    
#line 260
    if ([((JavaMathBigInteger *) nil_chk(t3)) isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)]) {
      
#line 262
      return OrgSpongycastleMathEcECFieldElement_Fp_checkSqrtWithOrgSpongycastleMathEcECFieldElement_(self, new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, t2));
    }
    
#line 266
    JavaMathBigInteger *t4 = [((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgSpongycastleMathEcECConstants, TWO))) modPowWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(q_)) shiftRightWithInt:2] withJavaMathBigInteger:q_];
    
#line 268
    JavaMathBigInteger *y = [self modMultWithJavaMathBigInteger:t2 withJavaMathBigInteger:t4];
    
#line 270
    return OrgSpongycastleMathEcECFieldElement_Fp_checkSqrtWithOrgSpongycastleMathEcECFieldElement_(self, new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, y));
  }
  
#line 275
  JavaMathBigInteger *legendreExponent = [((JavaMathBigInteger *) nil_chk(q_)) shiftRightWithInt:1];
  if (!([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(x_)) modPowWithJavaMathBigInteger:legendreExponent withJavaMathBigInteger:q_])) isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)])) {
    
#line 278
    return nil;
  }
  
#line 281
  JavaMathBigInteger *X = self->x_;
  JavaMathBigInteger *fourX = [self modDoubleWithJavaMathBigInteger:[self modDoubleWithJavaMathBigInteger:X]];
  
#line 284
  JavaMathBigInteger *k = [((JavaMathBigInteger *) nil_chk(legendreExponent)) addWithJavaMathBigInteger:JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)];
  
#line 284
  JavaMathBigInteger *qMinusOne = [((JavaMathBigInteger *) nil_chk(q_)) subtractWithJavaMathBigInteger:JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)];
  
#line 286
  JavaMathBigInteger *U;
  
#line 286
  JavaMathBigInteger *V;
  JavaUtilRandom *rand = new_JavaUtilRandom_init();
  do {
    
#line 290
    JavaMathBigInteger *P;
    do {
      
#line 293
      P = new_JavaMathBigInteger_initWithInt_withJavaUtilRandom_([((JavaMathBigInteger *) nil_chk(q_)) bitLength], rand);
    }
    while ([P compareToWithId:q_] >= 0 ||
#line 296
    ![((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([P multiplyWithJavaMathBigInteger:P])) subtractWithJavaMathBigInteger:fourX]])) modPowWithJavaMathBigInteger:legendreExponent withJavaMathBigInteger:q_])) isEqual:qMinusOne]);
    
#line 298
    IOSObjectArray *result = OrgSpongycastleMathEcECFieldElement_Fp_lucasSequenceWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, P, X, k);
    U = IOSObjectArray_Get(nil_chk(result), 0);
    V = IOSObjectArray_Get(result, 1);
    
#line 302
    if ([((JavaMathBigInteger *) nil_chk([self modMultWithJavaMathBigInteger:V withJavaMathBigInteger:V])) isEqual:fourX]) {
      
#line 304
      return new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q_, r_, [self modHalfAbsWithJavaMathBigInteger:V]);
    }
  }
  while ([((JavaMathBigInteger *) nil_chk(U)) isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)] || [U isEqual:qMinusOne]);
  
#line 309
  return nil;
}


#line 312
- (OrgSpongycastleMathEcECFieldElement *)checkSqrtWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)z {
  return OrgSpongycastleMathEcECFieldElement_Fp_checkSqrtWithOrgSpongycastleMathEcECFieldElement_(self, z);
}


#line 317
- (IOSObjectArray *)lucasSequenceWithJavaMathBigInteger:(JavaMathBigInteger *)P
                                 withJavaMathBigInteger:(JavaMathBigInteger *)Q
                                 withJavaMathBigInteger:(JavaMathBigInteger *)k {
  return OrgSpongycastleMathEcECFieldElement_Fp_lucasSequenceWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, P, Q, k);
}


#line 371
- (JavaMathBigInteger *)modAddWithJavaMathBigInteger:(JavaMathBigInteger *)x1
                              withJavaMathBigInteger:(JavaMathBigInteger *)x2 {
  JavaMathBigInteger *x3 = [((JavaMathBigInteger *) nil_chk(x1)) addWithJavaMathBigInteger:x2];
  if ([((JavaMathBigInteger *) nil_chk(x3)) compareToWithId:q_] >= 0) {
    
#line 376
    x3 = [x3 subtractWithJavaMathBigInteger:q_];
  }
  return x3;
}


#line 381
- (JavaMathBigInteger *)modDoubleWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  
#line 383
  JavaMathBigInteger *_2x = [((JavaMathBigInteger *) nil_chk(x)) shiftLeftWithInt:1];
  if ([((JavaMathBigInteger *) nil_chk(_2x)) compareToWithId:q_] >= 0) {
    
#line 386
    _2x = [_2x subtractWithJavaMathBigInteger:q_];
  }
  return _2x;
}


#line 391
- (JavaMathBigInteger *)modHalfWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  
#line 393
  if ([((JavaMathBigInteger *) nil_chk(x)) testBitWithInt:0]) {
    
#line 395
    x = [((JavaMathBigInteger *) nil_chk(q_)) addWithJavaMathBigInteger:x];
  }
  return [((JavaMathBigInteger *) nil_chk(x)) shiftRightWithInt:1];
}


#line 400
- (JavaMathBigInteger *)modHalfAbsWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  
#line 402
  if ([((JavaMathBigInteger *) nil_chk(x)) testBitWithInt:0]) {
    
#line 404
    x = [((JavaMathBigInteger *) nil_chk(q_)) subtractWithJavaMathBigInteger:x];
  }
  return [((JavaMathBigInteger *) nil_chk(x)) shiftRightWithInt:1];
}


#line 409
- (JavaMathBigInteger *)modInverseWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  
#line 411
  jint bits = [self getFieldSize];
  jint len = JreRShift32((bits + 31), 5);
  IOSIntArray *p = OrgSpongycastleMathRawNat_fromBigIntegerWithInt_withJavaMathBigInteger_(bits, q_);
  IOSIntArray *n = OrgSpongycastleMathRawNat_fromBigIntegerWithInt_withJavaMathBigInteger_(bits, x);
  IOSIntArray *z = OrgSpongycastleMathRawNat_createWithInt_(len);
  OrgSpongycastleMathRawMod_invertWithIntArray_withIntArray_withIntArray_(p, n, z);
  return OrgSpongycastleMathRawNat_toBigIntegerWithInt_withIntArray_(len, z);
}


#line 420
- (JavaMathBigInteger *)modMultWithJavaMathBigInteger:(JavaMathBigInteger *)x1
                               withJavaMathBigInteger:(JavaMathBigInteger *)x2 {
  return [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(x1)) multiplyWithJavaMathBigInteger:x2]];
}

- (JavaMathBigInteger *)modReduceWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  
#line 427
  if (r_ != nil) {
    
#line 429
    jboolean negative = [((JavaMathBigInteger *) nil_chk(x)) signum] < 0;
    if (negative) {
      
#line 432
      x = [x abs];
    }
    jint qLen = [((JavaMathBigInteger *) nil_chk(q_)) bitLength];
    jboolean rIsOne = [((JavaMathBigInteger *) nil_chk(r_)) isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)];
    while ([((JavaMathBigInteger *) nil_chk(x)) bitLength] > (qLen + 1)) {
      
#line 438
      JavaMathBigInteger *u = [x shiftRightWithInt:qLen];
      JavaMathBigInteger *v = [x subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(u)) shiftLeftWithInt:qLen]];
      if (!rIsOne) {
        
#line 442
        u = [u multiplyWithJavaMathBigInteger:r_];
      }
      x = [((JavaMathBigInteger *) nil_chk(u)) addWithJavaMathBigInteger:v];
    }
    while ([((JavaMathBigInteger *) nil_chk(x)) compareToWithId:q_] >= 0) {
      
#line 448
      x = [x subtractWithJavaMathBigInteger:q_];
    }
    if (negative && [x signum] != 0) {
      
#line 452
      x = [((JavaMathBigInteger *) nil_chk(q_)) subtractWithJavaMathBigInteger:x];
    }
  }
  else {
    
#line 457
    x = [((JavaMathBigInteger *) nil_chk(x)) modWithJavaMathBigInteger:q_];
  }
  return x;
}


#line 462
- (JavaMathBigInteger *)modSubtractWithJavaMathBigInteger:(JavaMathBigInteger *)x1
                                   withJavaMathBigInteger:(JavaMathBigInteger *)x2 {
  JavaMathBigInteger *x3 = [((JavaMathBigInteger *) nil_chk(x1)) subtractWithJavaMathBigInteger:x2];
  if ([((JavaMathBigInteger *) nil_chk(x3)) signum] < 0) {
    
#line 467
    x3 = [x3 addWithJavaMathBigInteger:q_];
  }
  return x3;
}


#line 472
- (jboolean)isEqual:(id)other {
  
#line 474
  if (JreObjectEqualsEquals(other, self)) {
    
#line 476
    return true;
  }
  
#line 479
  if (!([other isKindOfClass:[OrgSpongycastleMathEcECFieldElement_Fp class]])) {
    
#line 481
    return false;
  }
  
#line 484
  OrgSpongycastleMathEcECFieldElement_Fp *o = (OrgSpongycastleMathEcECFieldElement_Fp *) cast_chk(other, [OrgSpongycastleMathEcECFieldElement_Fp class]);
  return [((JavaMathBigInteger *) nil_chk(q_)) isEqual:((OrgSpongycastleMathEcECFieldElement_Fp *) nil_chk(o))->q_] && [((JavaMathBigInteger *) nil_chk(x_)) isEqual:o->x_];
}


#line 488
- (NSUInteger)hash {
  
#line 490
  return ((jint) [((JavaMathBigInteger *) nil_chk(q_)) hash]) ^ ((jint) [((JavaMathBigInteger *) nil_chk(x_)) hash]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaMathBigInteger;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 11, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x2, 15, 5, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x2, 16, 3, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 17, 2, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 18, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 19, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 20, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 21, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 22, 2, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 23, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 24, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(calculateResidueWithJavaMathBigInteger:);
  methods[1].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[2].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[3].selector = @selector(toBigInteger);
  methods[4].selector = @selector(getFieldName);
  methods[5].selector = @selector(getFieldSize);
  methods[6].selector = @selector(getQ);
  methods[7].selector = @selector(addWithOrgSpongycastleMathEcECFieldElement:);
  methods[8].selector = @selector(addOne);
  methods[9].selector = @selector(subtractWithOrgSpongycastleMathEcECFieldElement:);
  methods[10].selector = @selector(multiplyWithOrgSpongycastleMathEcECFieldElement:);
  methods[11].selector = @selector(multiplyMinusProductWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:);
  methods[12].selector = @selector(multiplyPlusProductWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:);
  methods[13].selector = @selector(divideWithOrgSpongycastleMathEcECFieldElement:);
  methods[14].selector = @selector(negate);
  methods[15].selector = @selector(square);
  methods[16].selector = @selector(squareMinusProductWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:);
  methods[17].selector = @selector(squarePlusProductWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:);
  methods[18].selector = @selector(invert);
  methods[19].selector = @selector(sqrt);
  methods[20].selector = @selector(checkSqrtWithOrgSpongycastleMathEcECFieldElement:);
  methods[21].selector = @selector(lucasSequenceWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[22].selector = @selector(modAddWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[23].selector = @selector(modDoubleWithJavaMathBigInteger:);
  methods[24].selector = @selector(modHalfWithJavaMathBigInteger:);
  methods[25].selector = @selector(modHalfAbsWithJavaMathBigInteger:);
  methods[26].selector = @selector(modInverseWithJavaMathBigInteger:);
  methods[27].selector = @selector(modMultWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[28].selector = @selector(modReduceWithJavaMathBigInteger:);
  methods[29].selector = @selector(modSubtractWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[30].selector = @selector(isEqual:);
  methods[31].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "q_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "r_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "x_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "calculateResidue", "LJavaMathBigInteger;", "LJavaMathBigInteger;LJavaMathBigInteger;", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "add", "LOrgSpongycastleMathEcECFieldElement;", "subtract", "multiply", "multiplyMinusProduct", "LOrgSpongycastleMathEcECFieldElement;LOrgSpongycastleMathEcECFieldElement;LOrgSpongycastleMathEcECFieldElement;", "multiplyPlusProduct", "divide", "squareMinusProduct", "LOrgSpongycastleMathEcECFieldElement;LOrgSpongycastleMathEcECFieldElement;", "squarePlusProduct", "checkSqrt", "lucasSequence", "modAdd", "modDouble", "modHalf", "modHalfAbs", "modInverse", "modMult", "modReduce", "modSubtract", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcECFieldElement_Fp = { "Fp", "org.spongycastle.math.ec", ptrTable, methods, fields, 7, 0x9, 32, 3, 5, -1, -1, -1, -1 };
  return &_OrgSpongycastleMathEcECFieldElement_Fp;
}

@end


#line 91
JavaMathBigInteger *OrgSpongycastleMathEcECFieldElement_Fp_calculateResidueWithJavaMathBigInteger_(JavaMathBigInteger *p) {
  OrgSpongycastleMathEcECFieldElement_Fp_initialize();
  jint bitLength = [((JavaMathBigInteger *) nil_chk(p)) bitLength];
  if (bitLength >= 96) {
    
#line 96
    JavaMathBigInteger *firstWord = [p shiftRightWithInt:bitLength - 64];
    if ([((JavaMathBigInteger *) nil_chk(firstWord)) longLongValue] == -1LL) {
      
#line 99
      return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE))) shiftLeftWithInt:bitLength])) subtractWithJavaMathBigInteger:p];
    }
  }
  return nil;
}


#line 108
void OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECFieldElement_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *x) {
  OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self,
#line 110
  q, OrgSpongycastleMathEcECFieldElement_Fp_calculateResidueWithJavaMathBigInteger_(q), x);
}


#line 108
OrgSpongycastleMathEcECFieldElement_Fp *new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *x) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcECFieldElement_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_, q, x)
}


#line 108
OrgSpongycastleMathEcECFieldElement_Fp *create_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *x) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcECFieldElement_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_, q, x)
}


#line 113
void OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECFieldElement_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *r, JavaMathBigInteger *x) {
  OrgSpongycastleMathEcECFieldElement_init(self);
  if (x == nil || [x signum] < 0 || [x compareToWithId:q] >= 0) {
    
#line 117
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"x value invalid in Fp field element");
  }
  
#line 120
  self->q_ = q;
  self->r_ = r;
  self->x_ = x;
}


#line 113
OrgSpongycastleMathEcECFieldElement_Fp *new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *r, JavaMathBigInteger *x) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcECFieldElement_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, q, r, x)
}


#line 113
OrgSpongycastleMathEcECFieldElement_Fp *create_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *r, JavaMathBigInteger *x) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcECFieldElement_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, q, r, x)
}


#line 312
OrgSpongycastleMathEcECFieldElement *OrgSpongycastleMathEcECFieldElement_Fp_checkSqrtWithOrgSpongycastleMathEcECFieldElement_(OrgSpongycastleMathEcECFieldElement_Fp *self, OrgSpongycastleMathEcECFieldElement *z) {
  
#line 314
  return [((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk(z)) square])) isEqual:self] ? z : nil;
}


#line 317
IOSObjectArray *OrgSpongycastleMathEcECFieldElement_Fp_lucasSequenceWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECFieldElement_Fp *self, JavaMathBigInteger *P, JavaMathBigInteger *Q, JavaMathBigInteger *k) {
  
#line 324
  jint n = [((JavaMathBigInteger *) nil_chk(k)) bitLength];
  jint s = [k getLowestSetBit];
  
#line 329
  JavaMathBigInteger *Uh = JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE);
  JavaMathBigInteger *Vl = JreLoadStatic(OrgSpongycastleMathEcECConstants, TWO);
  JavaMathBigInteger *Vh = P;
  JavaMathBigInteger *Ql = JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE);
  JavaMathBigInteger *Qh = JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE);
  
#line 335
  for (jint j = n - 1; j >= s + 1; --j) {
    
#line 337
    Ql = [self modMultWithJavaMathBigInteger:Ql withJavaMathBigInteger:Qh];
    
#line 339
    if ([k testBitWithInt:j]) {
      
#line 341
      Qh = [self modMultWithJavaMathBigInteger:Ql withJavaMathBigInteger:Q];
      Uh = [self modMultWithJavaMathBigInteger:Uh withJavaMathBigInteger:Vh];
      Vl = [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(Vh)) multiplyWithJavaMathBigInteger:Vl])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(P)) multiplyWithJavaMathBigInteger:Ql]]];
      Vh = [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([Vh multiplyWithJavaMathBigInteger:Vh])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(Qh)) shiftLeftWithInt:1]]];
    }
    else {
      
#line 348
      Qh = Ql;
      Uh = [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(Uh)) multiplyWithJavaMathBigInteger:Vl])) subtractWithJavaMathBigInteger:Ql]];
      Vh = [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(Vh)) multiplyWithJavaMathBigInteger:Vl])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(P)) multiplyWithJavaMathBigInteger:Ql]]];
      Vl = [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(Vl)) multiplyWithJavaMathBigInteger:Vl])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(Ql)) shiftLeftWithInt:1]]];
    }
  }
  
#line 355
  Ql = [self modMultWithJavaMathBigInteger:Ql withJavaMathBigInteger:Qh];
  Qh = [self modMultWithJavaMathBigInteger:Ql withJavaMathBigInteger:Q];
  Uh = [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(Uh)) multiplyWithJavaMathBigInteger:Vl])) subtractWithJavaMathBigInteger:Ql]];
  Vl = [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(Vh)) multiplyWithJavaMathBigInteger:Vl])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(P)) multiplyWithJavaMathBigInteger:Ql]]];
  Ql = [self modMultWithJavaMathBigInteger:Ql withJavaMathBigInteger:Qh];
  
#line 361
  for (jint j = 1; j <= s; ++j) {
    
#line 363
    Uh = [self modMultWithJavaMathBigInteger:Uh withJavaMathBigInteger:Vl];
    Vl = [self modReduceWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(Vl)) multiplyWithJavaMathBigInteger:Vl])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(Ql)) shiftLeftWithInt:1]]];
    Ql = [self modMultWithJavaMathBigInteger:Ql withJavaMathBigInteger:Ql];
  }
  
#line 368
  return [IOSObjectArray newArrayWithObjects:(id[]){ Uh, Vl } count:2 type:JavaMathBigInteger_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcECFieldElement_Fp)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/math/ec/ECFieldElement.java"


#line 501
@implementation OrgSpongycastleMathEcECFieldElement_F2m


#line 554
- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
     withJavaMathBigInteger:(JavaMathBigInteger *)x {
  OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_(self, m, k1, k2, k3, x);
  return self;
}


#line 601
- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k
     withJavaMathBigInteger:(JavaMathBigInteger *)x {
  OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withInt_withJavaMathBigInteger_(self, m, k, x);
  return self;
}


#line 607
- (instancetype)initWithInt:(jint)m
               withIntArray:(IOSIntArray *)ks
withOrgSpongycastleMathEcLongArray:(OrgSpongycastleMathEcLongArray *)x {
  OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgSpongycastleMathEcLongArray_(self, m, ks, x);
  return self;
}


#line 615
- (jint)bitLength {
  
#line 617
  return [((OrgSpongycastleMathEcLongArray *) nil_chk(x_)) degree];
}


#line 620
- (jboolean)isOne {
  
#line 622
  return [((OrgSpongycastleMathEcLongArray *) nil_chk(x_)) isOne];
}


#line 625
- (jboolean)isZero {
  
#line 627
  return [((OrgSpongycastleMathEcLongArray *) nil_chk(x_)) isZero];
}


#line 630
- (jboolean)testBitZero {
  
#line 632
  return [((OrgSpongycastleMathEcLongArray *) nil_chk(x_)) testBitZero];
}


#line 635
- (JavaMathBigInteger *)toBigInteger {
  
#line 637
  return [((OrgSpongycastleMathEcLongArray *) nil_chk(x_)) toBigInteger];
}


#line 640
- (NSString *)getFieldName {
  
#line 642
  return @"F2m";
}


#line 645
- (jint)getFieldSize {
  
#line 647
  return m_;
}


#line 661
+ (void)checkFieldElementsWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)a
                          withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b {
  OrgSpongycastleMathEcECFieldElement_F2m_checkFieldElementsWithOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_(a, b);
}


#line 686
- (OrgSpongycastleMathEcECFieldElement *)addWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b {
  
#line 691
  OrgSpongycastleMathEcLongArray *iarrClone = (OrgSpongycastleMathEcLongArray *) cast_chk([((OrgSpongycastleMathEcLongArray *) nil_chk(self->x_)) java_clone], [OrgSpongycastleMathEcLongArray class]);
  OrgSpongycastleMathEcECFieldElement_F2m *bF2m = (OrgSpongycastleMathEcECFieldElement_F2m *) cast_chk(b, [OrgSpongycastleMathEcECFieldElement_F2m class]);
  [((OrgSpongycastleMathEcLongArray *) nil_chk(iarrClone)) addShiftedByWordsWithOrgSpongycastleMathEcLongArray:((OrgSpongycastleMathEcECFieldElement_F2m *) nil_chk(bF2m))->x_ withInt:0];
  return new_OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgSpongycastleMathEcLongArray_(m_, ks_, iarrClone);
}


#line 697
- (OrgSpongycastleMathEcECFieldElement *)addOne {
  
#line 699
  return new_OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgSpongycastleMathEcLongArray_(m_, ks_, [((OrgSpongycastleMathEcLongArray *) nil_chk(x_)) addOne]);
}


#line 702
- (OrgSpongycastleMathEcECFieldElement *)subtractWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b {
  
#line 705
  return [self addWithOrgSpongycastleMathEcECFieldElement:b];
}

- (OrgSpongycastleMathEcECFieldElement *)multiplyWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b {
  
#line 717
  return new_OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgSpongycastleMathEcLongArray_(m_, ks_, [((OrgSpongycastleMathEcLongArray *) nil_chk(x_)) modMultiplyWithOrgSpongycastleMathEcLongArray:((OrgSpongycastleMathEcECFieldElement_F2m *) nil_chk(((OrgSpongycastleMathEcECFieldElement_F2m *) cast_chk(b, [OrgSpongycastleMathEcECFieldElement_F2m class]))))->x_ withInt:m_ withIntArray:ks_]);
}


#line 720
- (OrgSpongycastleMathEcECFieldElement *)multiplyMinusProductWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b
                                                             withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                             withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y {
  
#line 722
  return [self multiplyPlusProductWithOrgSpongycastleMathEcECFieldElement:b withOrgSpongycastleMathEcECFieldElement:x withOrgSpongycastleMathEcECFieldElement:y];
}


#line 725
- (OrgSpongycastleMathEcECFieldElement *)multiplyPlusProductWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b
                                                            withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                            withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y {
  
#line 727
  OrgSpongycastleMathEcLongArray *ax = self->x_;
  
#line 727
  OrgSpongycastleMathEcLongArray *bx = ((OrgSpongycastleMathEcECFieldElement_F2m *) nil_chk(((OrgSpongycastleMathEcECFieldElement_F2m *) cast_chk(b, [OrgSpongycastleMathEcECFieldElement_F2m class]))))->x_;
  
#line 727
  OrgSpongycastleMathEcLongArray *xx = ((OrgSpongycastleMathEcECFieldElement_F2m *) nil_chk(((OrgSpongycastleMathEcECFieldElement_F2m *) cast_chk(x, [OrgSpongycastleMathEcECFieldElement_F2m class]))))->x_;
  
#line 727
  OrgSpongycastleMathEcLongArray *yx = ((OrgSpongycastleMathEcECFieldElement_F2m *) nil_chk(((OrgSpongycastleMathEcECFieldElement_F2m *) cast_chk(y, [OrgSpongycastleMathEcECFieldElement_F2m class]))))->x_;
  
#line 729
  OrgSpongycastleMathEcLongArray *ab = [((OrgSpongycastleMathEcLongArray *) nil_chk(ax)) multiplyWithOrgSpongycastleMathEcLongArray:bx withInt:m_ withIntArray:ks_];
  OrgSpongycastleMathEcLongArray *xy = [((OrgSpongycastleMathEcLongArray *) nil_chk(xx)) multiplyWithOrgSpongycastleMathEcLongArray:yx withInt:m_ withIntArray:ks_];
  
#line 732
  if (JreObjectEqualsEquals(ab, ax) || JreObjectEqualsEquals(ab, bx)) {
    
#line 734
    ab = (OrgSpongycastleMathEcLongArray *) cast_chk([((OrgSpongycastleMathEcLongArray *) nil_chk(ab)) java_clone], [OrgSpongycastleMathEcLongArray class]);
  }
  
#line 737
  [((OrgSpongycastleMathEcLongArray *) nil_chk(ab)) addShiftedByWordsWithOrgSpongycastleMathEcLongArray:xy withInt:0];
  [ab reduceWithInt:m_ withIntArray:ks_];
  
#line 740
  return new_OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgSpongycastleMathEcLongArray_(m_, ks_, ab);
}


#line 743
- (OrgSpongycastleMathEcECFieldElement *)divideWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b {
  
#line 746
  OrgSpongycastleMathEcECFieldElement *bInv = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(b)) invert];
  return [self multiplyWithOrgSpongycastleMathEcECFieldElement:bInv];
}

- (OrgSpongycastleMathEcECFieldElement *)negate {
  
#line 753
  return self;
}

- (OrgSpongycastleMathEcECFieldElement *)square {
  
#line 758
  return new_OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgSpongycastleMathEcLongArray_(m_, ks_, [((OrgSpongycastleMathEcLongArray *) nil_chk(x_)) modSquareWithInt:m_ withIntArray:ks_]);
}


#line 761
- (OrgSpongycastleMathEcECFieldElement *)squareMinusProductWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                           withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y {
  return [self squarePlusProductWithOrgSpongycastleMathEcECFieldElement:x withOrgSpongycastleMathEcECFieldElement:y];
}

- (OrgSpongycastleMathEcECFieldElement *)squarePlusProductWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                          withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y {
  OrgSpongycastleMathEcLongArray *ax = self->x_;
  
#line 768
  OrgSpongycastleMathEcLongArray *xx = ((OrgSpongycastleMathEcECFieldElement_F2m *) nil_chk(((OrgSpongycastleMathEcECFieldElement_F2m *) cast_chk(x, [OrgSpongycastleMathEcECFieldElement_F2m class]))))->x_;
  
#line 768
  OrgSpongycastleMathEcLongArray *yx = ((OrgSpongycastleMathEcECFieldElement_F2m *) nil_chk(((OrgSpongycastleMathEcECFieldElement_F2m *) cast_chk(y, [OrgSpongycastleMathEcECFieldElement_F2m class]))))->x_;
  
#line 770
  OrgSpongycastleMathEcLongArray *aa = [((OrgSpongycastleMathEcLongArray *) nil_chk(ax)) squareWithInt:m_ withIntArray:ks_];
  OrgSpongycastleMathEcLongArray *xy = [((OrgSpongycastleMathEcLongArray *) nil_chk(xx)) multiplyWithOrgSpongycastleMathEcLongArray:yx withInt:m_ withIntArray:ks_];
  
#line 773
  if (JreObjectEqualsEquals(aa, ax)) {
    
#line 775
    aa = (OrgSpongycastleMathEcLongArray *) cast_chk([((OrgSpongycastleMathEcLongArray *) nil_chk(aa)) java_clone], [OrgSpongycastleMathEcLongArray class]);
  }
  
#line 778
  [((OrgSpongycastleMathEcLongArray *) nil_chk(aa)) addShiftedByWordsWithOrgSpongycastleMathEcLongArray:xy withInt:0];
  [aa reduceWithInt:m_ withIntArray:ks_];
  
#line 781
  return new_OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgSpongycastleMathEcLongArray_(m_, ks_, aa);
}


#line 784
- (OrgSpongycastleMathEcECFieldElement *)squarePowWithInt:(jint)pow {
  
#line 786
  return pow < 1 ? self : new_OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgSpongycastleMathEcLongArray_(m_, ks_, [((OrgSpongycastleMathEcLongArray *) nil_chk(x_)) modSquareNWithInt:pow withInt:m_ withIntArray:ks_]);
}


#line 789
- (OrgSpongycastleMathEcECFieldElement *)invert {
  
#line 791
  return new_OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgSpongycastleMathEcLongArray_(self->m_, self->ks_, [((OrgSpongycastleMathEcLongArray *) nil_chk(self->x_)) modInverseWithInt:m_ withIntArray:ks_]);
}


#line 794
- (OrgSpongycastleMathEcECFieldElement *)sqrt {
  
#line 796
  return ([((OrgSpongycastleMathEcLongArray *) nil_chk(x_)) isZero] || [((OrgSpongycastleMathEcLongArray *) nil_chk(x_)) isOne]) ? self : [self squarePowWithInt:m_ - 1];
}


#line 807
- (jint)getRepresentation {
  
#line 809
  return self->representation_;
}


#line 816
- (jint)getM {
  
#line 818
  return self->m_;
}


#line 829
- (jint)getK1 {
  
#line 831
  return IOSIntArray_Get(nil_chk(self->ks_), 0);
}


#line 840
- (jint)getK2 {
  
#line 842
  return ((IOSIntArray *) nil_chk(self->ks_))->size_ >= 2 ? IOSIntArray_Get(self->ks_, 1) : 0;
}


#line 851
- (jint)getK3 {
  
#line 853
  return ((IOSIntArray *) nil_chk(self->ks_))->size_ >= 3 ? IOSIntArray_Get(self->ks_, 2) : 0;
}


#line 856
- (jboolean)isEqual:(id)anObject {
  
#line 858
  if (JreObjectEqualsEquals(anObject, self)) {
    
#line 860
    return true;
  }
  
#line 863
  if (!([anObject isKindOfClass:[OrgSpongycastleMathEcECFieldElement_F2m class]])) {
    
#line 865
    return false;
  }
  
#line 868
  OrgSpongycastleMathEcECFieldElement_F2m *b = (OrgSpongycastleMathEcECFieldElement_F2m *) cast_chk(anObject, [OrgSpongycastleMathEcECFieldElement_F2m class]);
  
#line 870
  return ((self->m_ == ((OrgSpongycastleMathEcECFieldElement_F2m *) nil_chk(b))->m_) &&
#line 871
  (self->representation_ == b->representation_) && OrgSpongycastleUtilArrays_areEqualWithIntArray_withIntArray_(
#line 872
  self->ks_, b->ks_) &&
#line 873
  ([((OrgSpongycastleMathEcLongArray *) nil_chk(self->x_)) isEqual:b->x_]));
}


#line 876
- (NSUInteger)hash {
  
#line 878
  return ((jint) [((OrgSpongycastleMathEcLongArray *) nil_chk(x_)) hash]) ^ m_ ^ OrgSpongycastleUtilArrays_hashCodeWithIntArray_(ks_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 8, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 11, 10, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 12, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 14, 4, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 19, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:withInt:withJavaMathBigInteger:);
  methods[1].selector = @selector(initWithInt:withInt:withJavaMathBigInteger:);
  methods[2].selector = @selector(initWithInt:withIntArray:withOrgSpongycastleMathEcLongArray:);
  methods[3].selector = @selector(bitLength);
  methods[4].selector = @selector(isOne);
  methods[5].selector = @selector(isZero);
  methods[6].selector = @selector(testBitZero);
  methods[7].selector = @selector(toBigInteger);
  methods[8].selector = @selector(getFieldName);
  methods[9].selector = @selector(getFieldSize);
  methods[10].selector = @selector(checkFieldElementsWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:);
  methods[11].selector = @selector(addWithOrgSpongycastleMathEcECFieldElement:);
  methods[12].selector = @selector(addOne);
  methods[13].selector = @selector(subtractWithOrgSpongycastleMathEcECFieldElement:);
  methods[14].selector = @selector(multiplyWithOrgSpongycastleMathEcECFieldElement:);
  methods[15].selector = @selector(multiplyMinusProductWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:);
  methods[16].selector = @selector(multiplyPlusProductWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:);
  methods[17].selector = @selector(divideWithOrgSpongycastleMathEcECFieldElement:);
  methods[18].selector = @selector(negate);
  methods[19].selector = @selector(square);
  methods[20].selector = @selector(squareMinusProductWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:);
  methods[21].selector = @selector(squarePlusProductWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:);
  methods[22].selector = @selector(squarePowWithInt:);
  methods[23].selector = @selector(invert);
  methods[24].selector = @selector(sqrt);
  methods[25].selector = @selector(getRepresentation);
  methods[26].selector = @selector(getM);
  methods[27].selector = @selector(getK1);
  methods[28].selector = @selector(getK2);
  methods[29].selector = @selector(getK3);
  methods[30].selector = @selector(isEqual:);
  methods[31].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "GNB", "I", .constantValue.asInt = OrgSpongycastleMathEcECFieldElement_F2m_GNB, 0x19, -1, -1, -1, -1 },
    { "TPB", "I", .constantValue.asInt = OrgSpongycastleMathEcECFieldElement_F2m_TPB, 0x19, -1, -1, -1, -1 },
    { "PPB", "I", .constantValue.asInt = OrgSpongycastleMathEcECFieldElement_F2m_PPB, 0x19, -1, -1, -1, -1 },
    { "representation_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "m_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ks_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "x_", "LOrgSpongycastleMathEcLongArray;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIIILJavaMathBigInteger;", "IILJavaMathBigInteger;", "I[ILOrgSpongycastleMathEcLongArray;", "checkFieldElements", "LOrgSpongycastleMathEcECFieldElement;LOrgSpongycastleMathEcECFieldElement;", "add", "LOrgSpongycastleMathEcECFieldElement;", "subtract", "multiply", "multiplyMinusProduct", "LOrgSpongycastleMathEcECFieldElement;LOrgSpongycastleMathEcECFieldElement;LOrgSpongycastleMathEcECFieldElement;", "multiplyPlusProduct", "divide", "squareMinusProduct", "squarePlusProduct", "squarePow", "I", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcECFieldElement_F2m = { "F2m", "org.spongycastle.math.ec", ptrTable, methods, fields, 7, 0x9, 32, 7, 6, -1, -1, -1, -1 };
  return &_OrgSpongycastleMathEcECFieldElement_F2m;
}

@end


#line 554
void OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_(OrgSpongycastleMathEcECFieldElement_F2m *self, jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *x) {
  OrgSpongycastleMathEcECFieldElement_init(self);
  
#line 561
  if (x == nil || [x signum] < 0 || [x bitLength] > m) {
    
#line 563
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"x value invalid in F2m field element");
  }
  
#line 566
  if ((k2 == 0) && (k3 == 0)) {
    
#line 568
    self->representation_ = OrgSpongycastleMathEcECFieldElement_F2m_TPB;
    self->ks_ = [IOSIntArray newArrayWithInts:(jint[]){ k1 } count:1];
  }
  else {
    
#line 573
    if (k2 >= k3) {
      
#line 575
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 576
      @"k2 must be smaller than k3");
    }
    if (k2 <= 0) {
      
#line 580
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 581
      @"k2 must be larger than 0");
    }
    self->representation_ = OrgSpongycastleMathEcECFieldElement_F2m_PPB;
    self->ks_ = [IOSIntArray newArrayWithInts:(jint[]){ k1, k2, k3 } count:3];
  }
  
#line 587
  self->m_ = m;
  self->x_ = new_OrgSpongycastleMathEcLongArray_initPackagePrivateWithJavaMathBigInteger_(x);
}


#line 554
OrgSpongycastleMathEcECFieldElement_F2m *new_OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *x) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcECFieldElement_F2m, initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_, m, k1, k2, k3, x)
}


#line 554
OrgSpongycastleMathEcECFieldElement_F2m *create_OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *x) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcECFieldElement_F2m, initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_, m, k1, k2, k3, x)
}


#line 601
void OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withInt_withJavaMathBigInteger_(OrgSpongycastleMathEcECFieldElement_F2m *self, jint m, jint k, JavaMathBigInteger *x) {
  OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_(self,
#line 604
  m, k, 0, 0, x);
}


#line 601
OrgSpongycastleMathEcECFieldElement_F2m *new_OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withInt_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *x) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcECFieldElement_F2m, initWithInt_withInt_withJavaMathBigInteger_, m, k, x)
}


#line 601
OrgSpongycastleMathEcECFieldElement_F2m *create_OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withInt_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *x) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcECFieldElement_F2m, initWithInt_withInt_withJavaMathBigInteger_, m, k, x)
}


#line 607
void OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgSpongycastleMathEcLongArray_(OrgSpongycastleMathEcECFieldElement_F2m *self, jint m, IOSIntArray *ks, OrgSpongycastleMathEcLongArray *x) {
  OrgSpongycastleMathEcECFieldElement_init(self);
  self->m_ = m;
  self->representation_ = (((IOSIntArray *) nil_chk(ks))->size_ == 1) ? OrgSpongycastleMathEcECFieldElement_F2m_TPB : OrgSpongycastleMathEcECFieldElement_F2m_PPB;
  self->ks_ = ks;
  self->x_ = x;
}


#line 607
OrgSpongycastleMathEcECFieldElement_F2m *new_OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgSpongycastleMathEcLongArray_(jint m, IOSIntArray *ks, OrgSpongycastleMathEcLongArray *x) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcECFieldElement_F2m, initWithInt_withIntArray_withOrgSpongycastleMathEcLongArray_, m, ks, x)
}


#line 607
OrgSpongycastleMathEcECFieldElement_F2m *create_OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withIntArray_withOrgSpongycastleMathEcLongArray_(jint m, IOSIntArray *ks, OrgSpongycastleMathEcLongArray *x) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcECFieldElement_F2m, initWithInt_withIntArray_withOrgSpongycastleMathEcLongArray_, m, ks, x)
}


#line 661
void OrgSpongycastleMathEcECFieldElement_F2m_checkFieldElementsWithOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_(OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b) {
  OrgSpongycastleMathEcECFieldElement_F2m_initialize();
  
#line 665
  if ((!([a isKindOfClass:[OrgSpongycastleMathEcECFieldElement_F2m class]])) || (!([b isKindOfClass:[OrgSpongycastleMathEcECFieldElement_F2m class]]))) {
    
#line 667
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field elements are not both instances of ECFieldElement.F2m");
  }
  
#line 671
  OrgSpongycastleMathEcECFieldElement_F2m *aF2m = (OrgSpongycastleMathEcECFieldElement_F2m *) cast_chk(a, [OrgSpongycastleMathEcECFieldElement_F2m class]);
  OrgSpongycastleMathEcECFieldElement_F2m *bF2m = (OrgSpongycastleMathEcECFieldElement_F2m *) cast_chk(b, [OrgSpongycastleMathEcECFieldElement_F2m class]);
  
#line 674
  if (((OrgSpongycastleMathEcECFieldElement_F2m *) nil_chk(aF2m))->representation_ != ((OrgSpongycastleMathEcECFieldElement_F2m *) nil_chk(bF2m))->representation_) {
    
#line 677
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"One of the F2m field elements has incorrect representation");
  }
  
#line 680
  if ((aF2m->m_ != bF2m->m_) || !OrgSpongycastleUtilArrays_areEqualWithIntArray_withIntArray_(aF2m->ks_, bF2m->ks_)) {
    
#line 682
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Field elements are not elements of the same field F2m");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcECFieldElement_F2m)
