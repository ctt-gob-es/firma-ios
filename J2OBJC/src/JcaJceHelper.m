//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/jcajce/util/JcaJceHelper.java
//

#include "J2ObjC_source.h"
#include "JcaJceHelper.h"

#if !__has_feature(objc_arc)
#error "JcaJceHelper must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleJcajceUtilJcaJceHelper : NSObject

@end

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/jcajce/util/JcaJceHelper.java"


#line 25
@implementation OrgSpongycastleJcajceUtilJcaJceHelper

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaxCryptoCipher;", 0x401, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaxCryptoMac;", 0x401, 3, 1, 4, -1, -1, -1 },
    { NULL, "LJavaxCryptoKeyAgreement;", 0x401, 5, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameterGenerator;", 0x401, 6, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameters;", 0x401, 7, 1, 4, -1, -1, -1 },
    { NULL, "LJavaxCryptoKeyGenerator;", 0x401, 8, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyFactory;", 0x401, 9, 1, 4, -1, -1, -1 },
    { NULL, "LJavaxCryptoSecretKeyFactory;", 0x401, 10, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPairGenerator;", 0x401, 11, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityMessageDigest;", 0x401, 12, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecuritySignature;", 0x401, 13, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertificateFactory;", 0x401, 14, 1, 15, -1, -1, -1 },
    { NULL, "LJavaSecuritySecureRandom;", 0x401, 16, 1, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(createCipherWithNSString:);
  methods[1].selector = @selector(createMacWithNSString:);
  methods[2].selector = @selector(createKeyAgreementWithNSString:);
  methods[3].selector = @selector(createAlgorithmParameterGeneratorWithNSString:);
  methods[4].selector = @selector(createAlgorithmParametersWithNSString:);
  methods[5].selector = @selector(createKeyGeneratorWithNSString:);
  methods[6].selector = @selector(createKeyFactoryWithNSString:);
  methods[7].selector = @selector(createSecretKeyFactoryWithNSString:);
  methods[8].selector = @selector(createKeyPairGeneratorWithNSString:);
  methods[9].selector = @selector(createDigestWithNSString:);
  methods[10].selector = @selector(createSignatureWithNSString:);
  methods[11].selector = @selector(createCertificateFactoryWithNSString:);
  methods[12].selector = @selector(createSecureRandomWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createCipher", "LNSString;", "LJavaSecurityNoSuchAlgorithmException;LJavaxCryptoNoSuchPaddingException;LJavaSecurityNoSuchProviderException;", "createMac", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityNoSuchProviderException;", "createKeyAgreement", "createAlgorithmParameterGenerator", "createAlgorithmParameters", "createKeyGenerator", "createKeyFactory", "createSecretKeyFactory", "createKeyPairGenerator", "createDigest", "createSignature", "createCertificateFactory", "LJavaSecurityNoSuchProviderException;LJavaSecurityCertCertificateException;", "createSecureRandom" };
  static const J2ObjcClassInfo _OrgSpongycastleJcajceUtilJcaJceHelper = { "JcaJceHelper", "org.spongycastle.jcajce.util", ptrTable, methods, NULL, 7, 0x609, 13, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleJcajceUtilJcaJceHelper;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgSpongycastleJcajceUtilJcaJceHelper)
