//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/Chunk.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Chunk")
#ifdef RESTRICT_Chunk
#define INCLUDE_ALL_Chunk 0
#else
#define INCLUDE_ALL_Chunk 1
#endif
#undef RESTRICT_Chunk

#if !defined (ComAowagieTextChunk_) && (INCLUDE_ALL_Chunk || defined(INCLUDE_ComAowagieTextChunk))
#define ComAowagieTextChunk_

#define RESTRICT_Element 1
#define INCLUDE_ComAowagieTextElement 1
#include "Element.h"

@class ComAowagieTextFont;
@class ComAowagieTextImage;
@class HarmonyJavaAwtColor;
@class JavaLangStringBuffer;
@class JavaUtilArrayList;
@class JavaUtilHashMap;
@protocol ComAowagieTextPdfDrawDrawInterface;
@protocol ComAowagieTextPdfHyphenationEvent;

/*!
 @brief This is the smallest significant part of text that can be added to a
  document.
 <P>
  Most elements can be divided in one or more <CODE>Chunk</CODE>s. A chunk
  is a <CODE>String</CODE> with a certain <CODE>Font</CODE>. All other
  layout parameters should be defined in the object to which this chunk of text
  is added. 
 <P>
  Example: <BLOCKQUOTE>
  
 @code

  
  <STRONG>Chunk chunk = new Chunk("Hello world",
  FontFactory.getFont(FontFactory.COURIER, 20, Font.ITALIC, new Color(255, 0,
  0))); </STRONG> document.add(chunk); 
  
@endcode
  
 </BLOCKQUOTE>
 */
@interface ComAowagieTextChunk : NSObject < ComAowagieTextElement >

#pragma mark Public

/*!
 @brief Empty constructor.
 */
- (instancetype)init;

/*!
 @brief Creates a separator Chunk.
 Note that separator chunks can't be used in combination with tab chunks!
 @param separator the drawInterface to use to draw the separator.
 @param vertical true if this is a vertical separator
 @since 2.1.2
 */
- (instancetype)initWithComAowagieTextPdfDrawDrawInterface:(id<ComAowagieTextPdfDrawDrawInterface>)separator
                                               withBoolean:(jboolean)vertical;

/*!
 @brief Constructs a chunk containing an <CODE>Image</CODE>.
 @param image the image
 @param offsetX the image offset in the x direction
 @param offsetY the image offset in the y direction
 */
- (instancetype)initWithComAowagieTextImage:(ComAowagieTextImage *)image
                                  withFloat:(jfloat)offsetX
                                  withFloat:(jfloat)offsetY;

/*!
 @brief Constructs a chunk containing an <CODE>Image</CODE>.
 @param image the image
 @param offsetX the image offset in the x direction
 @param offsetY the image offset in the y direction
 @param changeLeading true if the leading has to be adapted to the image
 */
- (instancetype)initWithComAowagieTextImage:(ComAowagieTextImage *)image
                                  withFloat:(jfloat)offsetX
                                  withFloat:(jfloat)offsetY
                                withBoolean:(jboolean)changeLeading;

/*!
 @brief Constructs a chunk of text with a certain content, without specifying a 
 <CODE>Font</CODE>.
 @param content the content
 */
- (instancetype)initWithNSString:(NSString *)content;

/*!
 @brief Constructs a chunk of text with a certain content and a certain <CODE>
  Font</CODE>.
 @param content the content
 @param font the font
 */
- (instancetype)initWithNSString:(NSString *)content
          withComAowagieTextFont:(ComAowagieTextFont *)font;

/*!
 @brief appends some text to this <CODE>Chunk</CODE>.
 @param string <CODE>
  String </CODE>
 @return a <CODE>StringBuffer</CODE>
 */
- (JavaLangStringBuffer *)appendWithNSString:(NSString *)string;

/*!
 @brief Gets the attributes for this <CODE>Chunk</CODE>.
 <P>
  It may be null.
 @return the attributes for this <CODE>Chunk</CODE>
 */
- (JavaUtilHashMap *)getAttributes;

/*!
 @brief Gets all the chunks in this element.
 @return an <CODE>ArrayList</CODE>
 */
- (JavaUtilArrayList *)getChunks;

/*!
 @brief Returns the content of this <CODE>Chunk</CODE>.
 @return a <CODE>String</CODE>
 */
- (NSString *)getContent;

/*!
 @brief Gets the font of this <CODE>Chunk</CODE>.
 @return a <CODE>Font</CODE>
 */
- (ComAowagieTextFont *)getFont;

/*!
 @brief Gets the horizontal scaling.
 @return a percentage in float
 */
- (jfloat)getHorizontalScaling;

/*!
 @brief Returns the hyphenation (if present).
 @return Hyphenation event
 @since 2.1.2
 */
- (id<ComAowagieTextPdfHyphenationEvent>)getHyphenation;

/*!
 @brief Returns the image.
 @return the image
 */
- (ComAowagieTextImage *)getImage;

/*!
 @brief Gets the text displacement relative to the baseline.
 @return a displacement in points
 */
- (jfloat)getTextRise;

/*!
 @brief Gets the width of the Chunk in points.
 @return a width in points
 */
- (jfloat)getWidthPoint;

/*!
 @return true
 - seealso: com.aowagie.text.Element#isContent()
 @since iText 2.0.8
 */
- (jboolean)isContent;

/*!
 @brief Checks is this <CODE>Chunk</CODE> is empty.
 @return <CODE>false</CODE> if the Chunk contains other characters than
          space.
 */
- (jboolean)isEmpty;

/*!
 @return true
 - seealso: com.aowagie.text.Element#isNestable()
 @since iText 2.0.8
 */
- (jboolean)isNestable;

/*!
 @brief Sets the attributes all at once.
 @param attributes the attributes of a Chunk
 */
- (void)setAttributesWithJavaUtilHashMap:(JavaUtilHashMap *)attributes;

/*!
 @brief Sets the color of the background <CODE>Chunk</CODE>.
 @param color the color of the background
 @return this <CODE>Chunk</CODE>
 */
- (ComAowagieTextChunk *)setBackgroundWithHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color;

/*!
 @brief Sets the font of this <CODE>Chunk</CODE>.
 @param font a 
  <CODE> Font </CODE>
 */
- (void)setFontWithComAowagieTextFont:(ComAowagieTextFont *)font;

/*!
 @brief Sets the generic tag <CODE>Chunk</CODE>.
 <P>
  The text for this tag can be retrieved with <CODE>PdfPageEvent</CODE>.
 @param text the text for the tag
 @return this <CODE>Chunk</CODE>
 */
- (ComAowagieTextChunk *)setGenericTagWithNSString:(NSString *)text;

/*!
 @brief Sets a local destination for this <CODE>Chunk</CODE>.
 @param name the name for this destination
 @return this <CODE>Chunk</CODE>
 */
- (ComAowagieTextChunk *)setLocalDestinationWithNSString:(NSString *)name;

/*!
 @brief Sets a local goto for this <CODE>Chunk</CODE>.
 <P>
  There must be a local destination matching the name.
 @param name the name of the destination to go to
 @return this <CODE>Chunk</CODE>
 */
- (ComAowagieTextChunk *)setLocalGotoWithNSString:(NSString *)name;

/*!
 @brief Sets a new page tag..
 @return this <CODE>Chunk</CODE>
 */
- (ComAowagieTextChunk *)setNewPage;

/*!
 @brief Sets a goto for a remote destination for this <CODE>Chunk</CODE>.
 @param filename the file name of the destination document
 @param page the page of the destination to go to. First page is 1
 @return this <CODE>Chunk</CODE>
 */
- (ComAowagieTextChunk *)setRemoteGotoWithNSString:(NSString *)filename
                                           withInt:(jint)page;

/*!
 @brief Sets a goto for a remote destination for this <CODE>Chunk</CODE>.
 @param filename the file name of the destination document
 @param name the name of the destination to go to
 @return this <CODE>Chunk</CODE>
 */
- (ComAowagieTextChunk *)setRemoteGotoWithNSString:(NSString *)filename
                                      withNSString:(NSString *)name;

/*!
 @brief Sets the text displacement relative to the baseline.Positive values rise
  the text, negative values lower the text.
 <P>
  It can be used to implement sub/superscript.
 @param rise the displacement in points
 @return this <CODE>Chunk</CODE>
 */
- (ComAowagieTextChunk *)setTextRiseWithFloat:(jfloat)rise;

/*!
 @brief Returns the content of this <CODE>Chunk</CODE>.
 @return a <CODE>String</CODE>
 */
- (NSString *)description;

/*!
 @brief Gets the type of the text element.
 @return a type
 */
- (jint)type;

#pragma mark Package-Private

/*!
 @brief Checks the attributes of this <CODE>Chunk</CODE>.
 @return false if there aren't any.
 */
- (jboolean)hasAttributes;

/*!
 @brief Sets an anchor for this <CODE>Chunk</CODE>.
 @param url the url to link to
 @return this <CODE>Chunk</CODE>
 */
- (ComAowagieTextChunk *)setAnchorWithNSString:(NSString *)url;

/*!
 @brief sets the hyphenation engine to this <CODE>Chunk</CODE>.
 @param hyphenation the hyphenation engine
 @return this <CODE>Chunk</CODE>
 */
- (ComAowagieTextChunk *)setHyphenationWithComAowagieTextPdfHyphenationEvent:(id<ComAowagieTextPdfHyphenationEvent>)hyphenation;

@end

J2OBJC_STATIC_INIT(ComAowagieTextChunk)

/*!
 @brief The character stand in for an image or a separator.
 */
inline NSString *ComAowagieTextChunk_get_OBJECT_REPLACEMENT_CHARACTER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_OBJECT_REPLACEMENT_CHARACTER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, OBJECT_REPLACEMENT_CHARACTER, NSString *)

/*!
 @brief This is a Chunk containing a newline.
 */
inline ComAowagieTextChunk *ComAowagieTextChunk_get_NEWLINE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ComAowagieTextChunk *ComAowagieTextChunk_NEWLINE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, NEWLINE, ComAowagieTextChunk *)

/*!
 @brief Key for drawInterface of the Separator.
 @since 2.1.2
 */
inline NSString *ComAowagieTextChunk_get_SEPARATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_SEPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, SEPARATOR, NSString *)

/*!
 @brief Key for drawInterface of the tab.
 @since 2.1.2
 */
inline NSString *ComAowagieTextChunk_get_TAB(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_TAB;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, TAB, NSString *)

/*!
 @brief Key for text horizontal scaling.
 */
inline NSString *ComAowagieTextChunk_get_HSCALE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_HSCALE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, HSCALE, NSString *)

/*!
 @brief Key for underline.
 */
inline NSString *ComAowagieTextChunk_get_UNDERLINE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_UNDERLINE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, UNDERLINE, NSString *)

/*!
 @brief Key for sub/superscript.
 */
inline NSString *ComAowagieTextChunk_get_SUBSUPSCRIPT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_SUBSUPSCRIPT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, SUBSUPSCRIPT, NSString *)

/*!
 @brief Key for text skewing.
 */
inline NSString *ComAowagieTextChunk_get_SKEW(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_SKEW;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, SKEW, NSString *)

/*!
 @brief Key for background.
 */
inline NSString *ComAowagieTextChunk_get_BACKGROUND(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_BACKGROUND;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, BACKGROUND, NSString *)

/*!
 @brief Key for text rendering mode.
 */
inline NSString *ComAowagieTextChunk_get_TEXTRENDERMODE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_TEXTRENDERMODE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, TEXTRENDERMODE, NSString *)

/*!
 @brief Key for split character.
 */
inline NSString *ComAowagieTextChunk_get_SPLITCHARACTER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_SPLITCHARACTER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, SPLITCHARACTER, NSString *)

/*!
 @brief Key for hyphenation.
 */
inline NSString *ComAowagieTextChunk_get_HYPHENATION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_HYPHENATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, HYPHENATION, NSString *)

/*!
 @brief Key for remote goto.
 */
inline NSString *ComAowagieTextChunk_get_REMOTEGOTO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_REMOTEGOTO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, REMOTEGOTO, NSString *)

/*!
 @brief Key for local goto.
 */
inline NSString *ComAowagieTextChunk_get_LOCALGOTO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_LOCALGOTO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, LOCALGOTO, NSString *)

/*!
 @brief Key for local destination.
 */
inline NSString *ComAowagieTextChunk_get_LOCALDESTINATION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_LOCALDESTINATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, LOCALDESTINATION, NSString *)

/*!
 @brief Key for generic tag.
 */
inline NSString *ComAowagieTextChunk_get_GENERICTAG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_GENERICTAG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, GENERICTAG, NSString *)

/*!
 @brief Key for image.
 */
inline NSString *ComAowagieTextChunk_get_IMAGE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_IMAGE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, IMAGE, NSString *)

/*!
 @brief Key for Action.
 */
inline NSString *ComAowagieTextChunk_get_ACTION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_ACTION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, ACTION, NSString *)

/*!
 @brief Key for newpage.
 */
inline NSString *ComAowagieTextChunk_get_NEWPAGE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_NEWPAGE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, NEWPAGE, NSString *)

/*!
 @brief Key for annotation.
 */
inline NSString *ComAowagieTextChunk_get_PDFANNOTATION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_PDFANNOTATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, PDFANNOTATION, NSString *)

/*!
 @brief Key for color.
 */
inline NSString *ComAowagieTextChunk_get_COLOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_COLOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, COLOR, NSString *)

/*!
 @brief Key for encoding.
 */
inline NSString *ComAowagieTextChunk_get_ENCODING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextChunk_ENCODING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextChunk, ENCODING, NSString *)

FOUNDATION_EXPORT void ComAowagieTextChunk_init(ComAowagieTextChunk *self);

FOUNDATION_EXPORT ComAowagieTextChunk *new_ComAowagieTextChunk_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextChunk *create_ComAowagieTextChunk_init(void);

FOUNDATION_EXPORT void ComAowagieTextChunk_initWithNSString_withComAowagieTextFont_(ComAowagieTextChunk *self, NSString *content, ComAowagieTextFont *font);

FOUNDATION_EXPORT ComAowagieTextChunk *new_ComAowagieTextChunk_initWithNSString_withComAowagieTextFont_(NSString *content, ComAowagieTextFont *font) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextChunk *create_ComAowagieTextChunk_initWithNSString_withComAowagieTextFont_(NSString *content, ComAowagieTextFont *font);

FOUNDATION_EXPORT void ComAowagieTextChunk_initWithNSString_(ComAowagieTextChunk *self, NSString *content);

FOUNDATION_EXPORT ComAowagieTextChunk *new_ComAowagieTextChunk_initWithNSString_(NSString *content) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextChunk *create_ComAowagieTextChunk_initWithNSString_(NSString *content);

FOUNDATION_EXPORT void ComAowagieTextChunk_initWithComAowagieTextImage_withFloat_withFloat_(ComAowagieTextChunk *self, ComAowagieTextImage *image, jfloat offsetX, jfloat offsetY);

FOUNDATION_EXPORT ComAowagieTextChunk *new_ComAowagieTextChunk_initWithComAowagieTextImage_withFloat_withFloat_(ComAowagieTextImage *image, jfloat offsetX, jfloat offsetY) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextChunk *create_ComAowagieTextChunk_initWithComAowagieTextImage_withFloat_withFloat_(ComAowagieTextImage *image, jfloat offsetX, jfloat offsetY);

FOUNDATION_EXPORT void ComAowagieTextChunk_initWithComAowagieTextPdfDrawDrawInterface_withBoolean_(ComAowagieTextChunk *self, id<ComAowagieTextPdfDrawDrawInterface> separator, jboolean vertical);

FOUNDATION_EXPORT ComAowagieTextChunk *new_ComAowagieTextChunk_initWithComAowagieTextPdfDrawDrawInterface_withBoolean_(id<ComAowagieTextPdfDrawDrawInterface> separator, jboolean vertical) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextChunk *create_ComAowagieTextChunk_initWithComAowagieTextPdfDrawDrawInterface_withBoolean_(id<ComAowagieTextPdfDrawDrawInterface> separator, jboolean vertical);

FOUNDATION_EXPORT void ComAowagieTextChunk_initWithComAowagieTextImage_withFloat_withFloat_withBoolean_(ComAowagieTextChunk *self, ComAowagieTextImage *image, jfloat offsetX, jfloat offsetY, jboolean changeLeading);

FOUNDATION_EXPORT ComAowagieTextChunk *new_ComAowagieTextChunk_initWithComAowagieTextImage_withFloat_withFloat_withBoolean_(ComAowagieTextImage *image, jfloat offsetX, jfloat offsetY, jboolean changeLeading) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextChunk *create_ComAowagieTextChunk_initWithComAowagieTextImage_withFloat_withFloat_withBoolean_(ComAowagieTextImage *image, jfloat offsetX, jfloat offsetY, jboolean changeLeading);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextChunk)

#endif

#pragma pop_macro("INCLUDE_ALL_Chunk")
