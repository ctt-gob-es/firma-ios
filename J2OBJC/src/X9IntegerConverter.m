//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/asn1/x9/X9IntegerConverter.java
//

#include "ECCurve.h"
#include "ECFieldElement.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "X9IntegerConverter.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"

#if !__has_feature(objc_arc)
#error "X9IntegerConverter must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/asn1/x9/X9IntegerConverter.java"


#line 12
@implementation OrgSpongycastleAsn1X9X9IntegerConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 12
- (instancetype)init {
  OrgSpongycastleAsn1X9X9IntegerConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 20
- (jint)getByteLengthWithOrgSpongycastleMathEcECCurve:(OrgSpongycastleMathEcECCurve *)c {
  
#line 23
  return JreIntDiv(([((OrgSpongycastleMathEcECCurve *) nil_chk(c)) getFieldSize] + 7), 8);
}


#line 32
- (jint)getByteLengthWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)fe {
  
#line 35
  return JreIntDiv(([((OrgSpongycastleMathEcECFieldElement *) nil_chk(fe)) getFieldSize] + 7), 8);
}


#line 45
- (IOSByteArray *)integerToBytesWithJavaMathBigInteger:(JavaMathBigInteger *)s
                                               withInt:(jint)qLength {
  
#line 49
  IOSByteArray *bytes = [((JavaMathBigInteger *) nil_chk(s)) toByteArray];
  
#line 51
  if (qLength < ((IOSByteArray *) nil_chk(bytes))->size_) {
    
#line 53
    IOSByteArray *tmp = [IOSByteArray newArrayWithLength:qLength];
    
#line 55
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, bytes->size_ - tmp->size_, tmp, 0, tmp->size_);
    
#line 57
    return tmp;
  }
  else if (qLength > bytes->size_) {
    
#line 61
    IOSByteArray *tmp = [IOSByteArray newArrayWithLength:qLength];
    
#line 63
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, 0, tmp, tmp->size_ - bytes->size_, bytes->size_);
    
#line 65
    return tmp;
  }
  
#line 68
  return bytes;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getByteLengthWithOrgSpongycastleMathEcECCurve:);
  methods[2].selector = @selector(getByteLengthWithOrgSpongycastleMathEcECFieldElement:);
  methods[3].selector = @selector(integerToBytesWithJavaMathBigInteger:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getByteLength", "LOrgSpongycastleMathEcECCurve;", "LOrgSpongycastleMathEcECFieldElement;", "integerToBytes", "LJavaMathBigInteger;I" };
  static const J2ObjcClassInfo _OrgSpongycastleAsn1X9X9IntegerConverter = { "X9IntegerConverter", "org.spongycastle.asn1.x9", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleAsn1X9X9IntegerConverter;
}

@end


#line 12
void OrgSpongycastleAsn1X9X9IntegerConverter_init(OrgSpongycastleAsn1X9X9IntegerConverter *self) {
  NSObject_init(self);
}


#line 12
OrgSpongycastleAsn1X9X9IntegerConverter *new_OrgSpongycastleAsn1X9X9IntegerConverter_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1X9X9IntegerConverter, init)
}


#line 12
OrgSpongycastleAsn1X9X9IntegerConverter *create_OrgSpongycastleAsn1X9X9IntegerConverter_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1X9X9IntegerConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleAsn1X9X9IntegerConverter)
