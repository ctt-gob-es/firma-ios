//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jce/provider/PKIXNameConstraintValidator.java
//

#include "ASN1Encodable.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "Arrays.h"
#include "DERIA5String.h"
#include "GeneralName.h"
#include "GeneralSubtree.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "Integers.h"
#include "J2ObjC_source.h"
#include "PKIXNameConstraintValidator.h"
#include "PKIXNameConstraintValidatorException.h"
#include "Strings.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#if !__has_feature(objc_arc)
#error "PKIXNameConstraintValidator must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleJceProviderPKIXNameConstraintValidator () {
 @public
  id<JavaUtilSet> excludedSubtreesDN_;
  id<JavaUtilSet> excludedSubtreesDNS_;
  id<JavaUtilSet> excludedSubtreesEmail_;
  id<JavaUtilSet> excludedSubtreesURI_;
  id<JavaUtilSet> excludedSubtreesIP_;
  id<JavaUtilSet> permittedSubtreesDN_;
  id<JavaUtilSet> permittedSubtreesDNS_;
  id<JavaUtilSet> permittedSubtreesEmail_;
  id<JavaUtilSet> permittedSubtreesURI_;
  id<JavaUtilSet> permittedSubtreesIP_;
}

+ (jboolean)withinDNSubtreeWithOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)dns
                           withOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)subtree;

- (void)checkPermittedDNWithJavaUtilSet:(id<JavaUtilSet>)permitted
    withOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)dns;

- (void)checkExcludedDNWithJavaUtilSet:(id<JavaUtilSet>)excluded
   withOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)dns;

- (id<JavaUtilSet>)intersectDNWithJavaUtilSet:(id<JavaUtilSet>)permitted
                              withJavaUtilSet:(id<JavaUtilSet>)dns;

- (id<JavaUtilSet>)unionDNWithJavaUtilSet:(id<JavaUtilSet>)excluded
      withOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)dn;

- (id<JavaUtilSet>)intersectEmailWithJavaUtilSet:(id<JavaUtilSet>)permitted
                                 withJavaUtilSet:(id<JavaUtilSet>)emails;

- (id<JavaUtilSet>)unionEmailWithJavaUtilSet:(id<JavaUtilSet>)excluded
                                withNSString:(NSString *)email;

/*!
 @brief Returns the intersection of the permitted IP ranges in 
 <code>permitted</code> with <code>ip</code>.
 @param permitted A  <code> Set </code>  of permitted IP addresses with
                    their subnet mask as byte arrays.
 @param ips The IP address with its subnet mask.
 @return The <code>Set</code> of permitted IP ranges intersected with
          <code>ip</code>.
 */
- (id<JavaUtilSet>)intersectIPWithJavaUtilSet:(id<JavaUtilSet>)permitted
                              withJavaUtilSet:(id<JavaUtilSet>)ips;

/*!
 @brief Returns the union of the excluded IP ranges in <code>excluded</code>
  with <code>ip</code>.
 @param excluded A  <code> Set </code>  of excluded IP addresses with their
                   subnet mask as byte arrays.
 @param ip The IP address with its subnet mask.
 @return The <code>Set</code> of excluded IP ranges unified with
          <code>ip</code> as byte arrays.
 */
- (id<JavaUtilSet>)unionIPWithJavaUtilSet:(id<JavaUtilSet>)excluded
                            withByteArray:(IOSByteArray *)ip;

/*!
 @brief Calculates the union if two IP ranges.
 @param ipWithSubmask1 The first IP address with its subnet mask.
 @param ipWithSubmask2 The second IP address with its subnet mask.
 @return A <code>Set</code> with the union of both addresses.
 */
- (id<JavaUtilSet>)unionIPRangeWithByteArray:(IOSByteArray *)ipWithSubmask1
                               withByteArray:(IOSByteArray *)ipWithSubmask2;

/*!
 @brief Calculates the interesction if two IP ranges.
 @param ipWithSubmask1 The first IP address with its subnet mask.
 @param ipWithSubmask2 The second IP address with its subnet mask.
 @return A <code>Set</code> with the single IP address with its subnet
          mask as a byte array or an empty <code>Set</code>.
 */
- (id<JavaUtilSet>)intersectIPRangeWithByteArray:(IOSByteArray *)ipWithSubmask1
                                   withByteArray:(IOSByteArray *)ipWithSubmask2;

/*!
 @brief Concatenates the IP address with its subnet mask.
 @param ip The IP address.
 @param subnetMask Its subnet mask.
 @return The concatenated IP address with its subnet mask.
 */
- (IOSByteArray *)ipWithSubnetMaskWithByteArray:(IOSByteArray *)ip
                                  withByteArray:(IOSByteArray *)subnetMask;

/*!
 @brief Splits the IP addresses and their subnet mask.
 @param ipWithSubmask1 The first IP address with the subnet mask.
 @param ipWithSubmask2 The second IP address with the subnet mask.
 @return An array with two elements. Each element contains the IP address
          and the subnet mask in this order.
 */
- (IOSObjectArray *)extractIPsAndSubnetMasksWithByteArray:(IOSByteArray *)ipWithSubmask1
                                            withByteArray:(IOSByteArray *)ipWithSubmask2;

/*!
 @brief Based on the two IP addresses and their subnet masks the IP range is
  computed for each IP address - subnet mask pair and returned as the
  minimum IP address and the maximum address of the range.
 @param ip1 The first IP address.
 @param subnetmask1 The subnet mask of the first IP address.
 @param ip2 The second IP address.
 @param subnetmask2 The subnet mask of the second IP address.
 @return A array with two elements. The first/second element contains the
          min and max IP address of the first/second IP address and its
          subnet mask.
 */
- (IOSObjectArray *)minMaxIPsWithByteArray:(IOSByteArray *)ip1
                             withByteArray:(IOSByteArray *)subnetmask1
                             withByteArray:(IOSByteArray *)ip2
                             withByteArray:(IOSByteArray *)subnetmask2;

- (void)checkPermittedEmailWithJavaUtilSet:(id<JavaUtilSet>)permitted
                              withNSString:(NSString *)email;

- (void)checkExcludedEmailWithJavaUtilSet:(id<JavaUtilSet>)excluded
                             withNSString:(NSString *)email;

/*!
 @brief Checks if the IP <code>ip</code> is included in the permitted set 
 <code>permitted</code>.
 @param permitted A  <code> Set </code>  of permitted IP addresses with
                    their subnet mask as byte arrays.
 @param ip The IP address.
 @throw PKIXNameConstraintValidatorException
 if the IP is not permitted.
 */
- (void)checkPermittedIPWithJavaUtilSet:(id<JavaUtilSet>)permitted
                          withByteArray:(IOSByteArray *)ip;

/*!
 @brief Checks if the IP <code>ip</code> is included in the excluded set 
 <code>excluded</code>.
 @param excluded A  <code> Set </code>  of excluded IP addresses with their
                   subnet mask as byte arrays.
 @param ip The IP address.
 @throw PKIXNameConstraintValidatorException
 if the IP is excluded.
 */
- (void)checkExcludedIPWithJavaUtilSet:(id<JavaUtilSet>)excluded
                         withByteArray:(IOSByteArray *)ip;

/*!
 @brief Checks if the IP address <code>ip</code> is constrained by 
 <code>constraint</code>.
 @param ip The IP address.
 @param constraint The constraint. This is an IP address concatenated with                    its subnetmask.
 @return <code>true</code> if constrained, <code>false</code>
          otherwise.
 */
- (jboolean)isIPConstrainedWithByteArray:(IOSByteArray *)ip
                           withByteArray:(IOSByteArray *)constraint;

- (jboolean)emailIsConstrainedWithNSString:(NSString *)email
                              withNSString:(NSString *)constraint;

- (jboolean)withinDomainWithNSString:(NSString *)testDomain
                        withNSString:(NSString *)domain;

- (void)checkPermittedDNSWithJavaUtilSet:(id<JavaUtilSet>)permitted
                            withNSString:(NSString *)dns;

- (void)checkExcludedDNSWithJavaUtilSet:(id<JavaUtilSet>)excluded
                           withNSString:(NSString *)dns;

/*!
 @brief The common part of <code>email1</code> and <code>email2</code> is
  added to the union <code>union</code>.If <code>email1</code> and 
 <code>email2</code> have nothing in common they are added both.
 @param email1 Email address constraint 1.
 @param email2 Email address constraint 2.
 @param union_ The union.
 */
- (void)unionEmailWithNSString:(NSString *)email1
                  withNSString:(NSString *)email2
               withJavaUtilSet:(id<JavaUtilSet>)union_;

- (void)unionURIWithNSString:(NSString *)email1
                withNSString:(NSString *)email2
             withJavaUtilSet:(id<JavaUtilSet>)union_;

- (id<JavaUtilSet>)intersectDNSWithJavaUtilSet:(id<JavaUtilSet>)permitted
                               withJavaUtilSet:(id<JavaUtilSet>)dnss;

/*!
 @brief The most restricting part from <code>email1</code> and 
 <code>email2</code> is added to the intersection <code>intersect</code>.
 @param email1 Email address constraint 1.
 @param email2 Email address constraint 2.
 @param intersect The intersection.
 */
- (void)intersectEmailWithNSString:(NSString *)email1
                      withNSString:(NSString *)email2
                   withJavaUtilSet:(id<JavaUtilSet>)intersect;

- (void)checkExcludedURIWithJavaUtilSet:(id<JavaUtilSet>)excluded
                           withNSString:(NSString *)uri;

- (id<JavaUtilSet>)intersectURIWithJavaUtilSet:(id<JavaUtilSet>)permitted
                               withJavaUtilSet:(id<JavaUtilSet>)uris;

- (id<JavaUtilSet>)unionURIWithJavaUtilSet:(id<JavaUtilSet>)excluded
                              withNSString:(NSString *)uri;

- (void)intersectURIWithNSString:(NSString *)email1
                    withNSString:(NSString *)email2
                 withJavaUtilSet:(id<JavaUtilSet>)intersect;

- (void)checkPermittedURIWithJavaUtilSet:(id<JavaUtilSet>)permitted
                            withNSString:(NSString *)uri;

- (jboolean)isUriConstrainedWithNSString:(NSString *)uri
                            withNSString:(NSString *)constraint;

+ (NSString *)extractHostFromURLWithNSString:(NSString *)url;

- (NSString *)extractNameAsStringWithOrgSpongycastleAsn1X509GeneralName:(OrgSpongycastleAsn1X509GeneralName *)name;

/*!
 @brief Returns the maximum IP address.
 @param ip1 The first IP address.
 @param ip2 The second IP address.
 @return The maximum IP address.
 */
+ (IOSByteArray *)maxWithByteArray:(IOSByteArray *)ip1
                     withByteArray:(IOSByteArray *)ip2;

/*!
 @brief Returns the minimum IP address.
 @param ip1 The first IP address.
 @param ip2 The second IP address.
 @return The minimum IP address.
 */
+ (IOSByteArray *)minWithByteArray:(IOSByteArray *)ip1
                     withByteArray:(IOSByteArray *)ip2;

/*!
 @brief Compares IP address <code>ip1</code> with <code>ip2</code>.If ip1
  is equal to ip2 0 is returned.
 If ip1 is bigger 1 is returned, -1
  otherwise.
 @param ip1 The first IP address.
 @param ip2 The second IP address.
 @return 0 if ip1 is equal to ip2, 1 if ip1 is bigger, -1 otherwise.
 */
+ (jint)compareToWithByteArray:(IOSByteArray *)ip1
                 withByteArray:(IOSByteArray *)ip2;

/*!
 @brief Returns the logical OR of the IP addresses <code>ip1</code> and 
 <code>ip2</code>.
 @param ip1 The first IP address.
 @param ip2 The second IP address.
 @return The OR of <code>ip1</code> and <code>ip2</code>.
 */
+ (IOSByteArray *)or__WithByteArray:(IOSByteArray *)ip1
                      withByteArray:(IOSByteArray *)ip2;

- (jint)hashCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)coll;

- (jboolean)collectionsAreEqualWithJavaUtilCollection:(id<JavaUtilCollection>)coll1
                               withJavaUtilCollection:(id<JavaUtilCollection>)coll2;

- (jboolean)equalsWithId:(id)o1
                  withId:(id)o2;

/*!
 @brief Stringifies an IPv4 or v6 address with subnet mask.
 @param ip The IP with subnet mask.
 @return The stringified IP address.
 */
- (NSString *)stringifyIPWithByteArray:(IOSByteArray *)ip;

- (NSString *)stringifyIPCollectionWithJavaUtilSet:(id<JavaUtilSet>)ips;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderPKIXNameConstraintValidator, excludedSubtreesDN_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderPKIXNameConstraintValidator, excludedSubtreesDNS_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderPKIXNameConstraintValidator, excludedSubtreesEmail_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderPKIXNameConstraintValidator, excludedSubtreesURI_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderPKIXNameConstraintValidator, excludedSubtreesIP_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderPKIXNameConstraintValidator, permittedSubtreesDN_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderPKIXNameConstraintValidator, permittedSubtreesDNS_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderPKIXNameConstraintValidator, permittedSubtreesEmail_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderPKIXNameConstraintValidator, permittedSubtreesURI_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderPKIXNameConstraintValidator, permittedSubtreesIP_, id<JavaUtilSet>)

__attribute__((unused)) static jboolean OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDNSubtreeWithOrgSpongycastleAsn1ASN1Sequence_withOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1ASN1Sequence *dns, OrgSpongycastleAsn1ASN1Sequence *subtree);

__attribute__((unused)) static void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedDNWithJavaUtilSet_withOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, OrgSpongycastleAsn1ASN1Sequence *dns);

__attribute__((unused)) static void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedDNWithJavaUtilSet_withOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, OrgSpongycastleAsn1ASN1Sequence *dns);

__attribute__((unused)) static id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectDNWithJavaUtilSet_withJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> dns);

__attribute__((unused)) static id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionDNWithJavaUtilSet_withOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, OrgSpongycastleAsn1ASN1Sequence *dn);

__attribute__((unused)) static id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectEmailWithJavaUtilSet_withJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> emails);

__attribute__((unused)) static id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionEmailWithJavaUtilSet_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *email);

__attribute__((unused)) static id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectIPWithJavaUtilSet_withJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> ips);

__attribute__((unused)) static id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionIPWithJavaUtilSet_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, IOSByteArray *ip);

__attribute__((unused)) static id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionIPRangeWithByteArray_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, IOSByteArray *ipWithSubmask1, IOSByteArray *ipWithSubmask2);

__attribute__((unused)) static id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectIPRangeWithByteArray_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, IOSByteArray *ipWithSubmask1, IOSByteArray *ipWithSubmask2);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleJceProviderPKIXNameConstraintValidator_ipWithSubnetMaskWithByteArray_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, IOSByteArray *ip, IOSByteArray *subnetMask);

__attribute__((unused)) static IOSObjectArray *OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractIPsAndSubnetMasksWithByteArray_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, IOSByteArray *ipWithSubmask1, IOSByteArray *ipWithSubmask2);

__attribute__((unused)) static IOSObjectArray *OrgSpongycastleJceProviderPKIXNameConstraintValidator_minMaxIPsWithByteArray_withByteArray_withByteArray_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, IOSByteArray *ip1, IOSByteArray *subnetmask1, IOSByteArray *ip2, IOSByteArray *subnetmask2);

__attribute__((unused)) static void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedEmailWithJavaUtilSet_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, NSString *email);

__attribute__((unused)) static void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedEmailWithJavaUtilSet_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *email);

__attribute__((unused)) static void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedIPWithJavaUtilSet_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, IOSByteArray *ip);

__attribute__((unused)) static void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedIPWithJavaUtilSet_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, IOSByteArray *ip);

__attribute__((unused)) static jboolean OrgSpongycastleJceProviderPKIXNameConstraintValidator_isIPConstrainedWithByteArray_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, IOSByteArray *ip, IOSByteArray *constraint);

__attribute__((unused)) static jboolean OrgSpongycastleJceProviderPKIXNameConstraintValidator_emailIsConstrainedWithNSString_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, NSString *email, NSString *constraint);

__attribute__((unused)) static jboolean OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, NSString *testDomain, NSString *domain);

__attribute__((unused)) static void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedDNSWithJavaUtilSet_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, NSString *dns);

__attribute__((unused)) static void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedDNSWithJavaUtilSet_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *dns);

__attribute__((unused)) static void OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionEmailWithNSString_withNSString_withJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, NSString *email1, NSString *email2, id<JavaUtilSet> union_);

__attribute__((unused)) static void OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionURIWithNSString_withNSString_withJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, NSString *email1, NSString *email2, id<JavaUtilSet> union_);

__attribute__((unused)) static id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectDNSWithJavaUtilSet_withJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> dnss);

__attribute__((unused)) static void OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectEmailWithNSString_withNSString_withJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, NSString *email1, NSString *email2, id<JavaUtilSet> intersect);

__attribute__((unused)) static void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedURIWithJavaUtilSet_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *uri);

__attribute__((unused)) static id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectURIWithJavaUtilSet_withJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> uris);

__attribute__((unused)) static id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionURIWithJavaUtilSet_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *uri);

__attribute__((unused)) static void OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectURIWithNSString_withNSString_withJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, NSString *email1, NSString *email2, id<JavaUtilSet> intersect);

__attribute__((unused)) static void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedURIWithJavaUtilSet_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, NSString *uri);

__attribute__((unused)) static jboolean OrgSpongycastleJceProviderPKIXNameConstraintValidator_isUriConstrainedWithNSString_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, NSString *uri, NSString *constraint);

__attribute__((unused)) static NSString *OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractHostFromURLWithNSString_(NSString *url);

__attribute__((unused)) static NSString *OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractNameAsStringWithOrgSpongycastleAsn1X509GeneralName_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, OrgSpongycastleAsn1X509GeneralName *name);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleJceProviderPKIXNameConstraintValidator_maxWithByteArray_withByteArray_(IOSByteArray *ip1, IOSByteArray *ip2);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleJceProviderPKIXNameConstraintValidator_minWithByteArray_withByteArray_(IOSByteArray *ip1, IOSByteArray *ip2);

__attribute__((unused)) static jint OrgSpongycastleJceProviderPKIXNameConstraintValidator_compareToWithByteArray_withByteArray_(IOSByteArray *ip1, IOSByteArray *ip2);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleJceProviderPKIXNameConstraintValidator_or__WithByteArray_withByteArray_(IOSByteArray *ip1, IOSByteArray *ip2);

__attribute__((unused)) static jint OrgSpongycastleJceProviderPKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilCollection> coll);

__attribute__((unused)) static jboolean OrgSpongycastleJceProviderPKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilCollection> coll1, id<JavaUtilCollection> coll2);

__attribute__((unused)) static jboolean OrgSpongycastleJceProviderPKIXNameConstraintValidator_equalsWithId_withId_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id o1, id o2);

__attribute__((unused)) static NSString *OrgSpongycastleJceProviderPKIXNameConstraintValidator_stringifyIPWithByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, IOSByteArray *ip);

__attribute__((unused)) static NSString *OrgSpongycastleJceProviderPKIXNameConstraintValidator_stringifyIPCollectionWithJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> ips);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jce/provider/PKIXNameConstraintValidator.java"


#line 20
@implementation OrgSpongycastleJceProviderPKIXNameConstraintValidator

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 42
- (instancetype)init {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 46
+ (jboolean)withinDNSubtreeWithOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)dns
                           withOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)subtree {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDNSubtreeWithOrgSpongycastleAsn1ASN1Sequence_withOrgSpongycastleAsn1ASN1Sequence_(dns, subtree);
}


#line 71
- (void)checkPermittedDNWithOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)dns {
  
#line 74
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedDNWithJavaUtilSet_withOrgSpongycastleAsn1ASN1Sequence_(self, permittedSubtreesDN_, dns);
}

- (void)checkExcludedDNWithOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)dns {
  
#line 80
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedDNWithJavaUtilSet_withOrgSpongycastleAsn1ASN1Sequence_(self, excludedSubtreesDN_, dns);
}

- (void)checkPermittedDNWithJavaUtilSet:(id<JavaUtilSet>)permitted
    withOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)dns {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedDNWithJavaUtilSet_withOrgSpongycastleAsn1ASN1Sequence_(self, permitted, dns);
}


#line 111
- (void)checkExcludedDNWithJavaUtilSet:(id<JavaUtilSet>)excluded
   withOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)dns {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedDNWithJavaUtilSet_withOrgSpongycastleAsn1ASN1Sequence_(self, excluded, dns);
}


#line 133
- (id<JavaUtilSet>)intersectDNWithJavaUtilSet:(id<JavaUtilSet>)permitted
                              withJavaUtilSet:(id<JavaUtilSet>)dns {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectDNWithJavaUtilSet_withJavaUtilSet_(self, permitted, dns);
}


#line 168
- (id<JavaUtilSet>)unionDNWithJavaUtilSet:(id<JavaUtilSet>)excluded
      withOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)dn {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionDNWithJavaUtilSet_withOrgSpongycastleAsn1ASN1Sequence_(self, excluded, dn);
}


#line 208
- (id<JavaUtilSet>)intersectEmailWithJavaUtilSet:(id<JavaUtilSet>)permitted
                                 withJavaUtilSet:(id<JavaUtilSet>)emails {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectEmailWithJavaUtilSet_withJavaUtilSet_(self, permitted, emails);
}


#line 237
- (id<JavaUtilSet>)unionEmailWithJavaUtilSet:(id<JavaUtilSet>)excluded
                                withNSString:(NSString *)email {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionEmailWithJavaUtilSet_withNSString_(self, excluded, email);
}


#line 274
- (id<JavaUtilSet>)intersectIPWithJavaUtilSet:(id<JavaUtilSet>)permitted
                              withJavaUtilSet:(id<JavaUtilSet>)ips {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectIPWithJavaUtilSet_withJavaUtilSet_(self, permitted, ips);
}


#line 311
- (id<JavaUtilSet>)unionIPWithJavaUtilSet:(id<JavaUtilSet>)excluded
                            withByteArray:(IOSByteArray *)ip {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionIPWithJavaUtilSet_withByteArray_(self, excluded, ip);
}


#line 345
- (id<JavaUtilSet>)unionIPRangeWithByteArray:(IOSByteArray *)ipWithSubmask1
                               withByteArray:(IOSByteArray *)ipWithSubmask2 {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionIPRangeWithByteArray_withByteArray_(self, ipWithSubmask1, ipWithSubmask2);
}


#line 370
- (id<JavaUtilSet>)intersectIPRangeWithByteArray:(IOSByteArray *)ipWithSubmask1
                                   withByteArray:(IOSByteArray *)ipWithSubmask2 {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectIPRangeWithByteArray_withByteArray_(self, ipWithSubmask1, ipWithSubmask2);
}


#line 406
- (IOSByteArray *)ipWithSubnetMaskWithByteArray:(IOSByteArray *)ip
                                  withByteArray:(IOSByteArray *)subnetMask {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_ipWithSubnetMaskWithByteArray_withByteArray_(self, ip, subnetMask);
}


#line 423
- (IOSObjectArray *)extractIPsAndSubnetMasksWithByteArray:(IOSByteArray *)ipWithSubmask1
                                            withByteArray:(IOSByteArray *)ipWithSubmask2 {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractIPsAndSubnetMasksWithByteArray_withByteArray_(self, ipWithSubmask1, ipWithSubmask2);
}


#line 454
- (IOSObjectArray *)minMaxIPsWithByteArray:(IOSByteArray *)ip1
                             withByteArray:(IOSByteArray *)subnetmask1
                             withByteArray:(IOSByteArray *)ip2
                             withByteArray:(IOSByteArray *)subnetmask2 {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_minMaxIPsWithByteArray_withByteArray_withByteArray_withByteArray_(self, ip1, subnetmask1, ip2, subnetmask2);
}


#line 479
- (void)checkPermittedEmailWithJavaUtilSet:(id<JavaUtilSet>)permitted
                              withNSString:(NSString *)email {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedEmailWithJavaUtilSet_withNSString_(self, permitted, email);
}


#line 508
- (void)checkExcludedEmailWithJavaUtilSet:(id<JavaUtilSet>)excluded
                             withNSString:(NSString *)email {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedEmailWithJavaUtilSet_withNSString_(self, excluded, email);
}


#line 540
- (void)checkPermittedIPWithJavaUtilSet:(id<JavaUtilSet>)permitted
                          withByteArray:(IOSByteArray *)ip {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedIPWithJavaUtilSet_withByteArray_(self, permitted, ip);
}


#line 577
- (void)checkExcludedIPWithJavaUtilSet:(id<JavaUtilSet>)excluded
                         withByteArray:(IOSByteArray *)ip {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedIPWithJavaUtilSet_withByteArray_(self, excluded, ip);
}


#line 609
- (jboolean)isIPConstrainedWithByteArray:(IOSByteArray *)ip
                           withByteArray:(IOSByteArray *)constraint {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_isIPConstrainedWithByteArray_withByteArray_(self, ip, constraint);
}


#line 635
- (jboolean)emailIsConstrainedWithNSString:(NSString *)email
                              withNSString:(NSString *)constraint {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_emailIsConstrainedWithNSString_withNSString_(self, email, constraint);
}


#line 666
- (jboolean)withinDomainWithNSString:(NSString *)testDomain
                        withNSString:(NSString *)domain {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, testDomain, domain);
}


#line 698
- (void)checkPermittedDNSWithJavaUtilSet:(id<JavaUtilSet>)permitted
                            withNSString:(NSString *)dns {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedDNSWithJavaUtilSet_withNSString_(self, permitted, dns);
}


#line 726
- (void)checkExcludedDNSWithJavaUtilSet:(id<JavaUtilSet>)excluded
                           withNSString:(NSString *)dns {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedDNSWithJavaUtilSet_withNSString_(self, excluded, dns);
}


#line 758
- (void)unionEmailWithNSString:(NSString *)email1
                  withNSString:(NSString *)email2
               withJavaUtilSet:(id<JavaUtilSet>)union_ {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionEmailWithNSString_withNSString_withJavaUtilSet_(self, email1, email2, union_);
}


#line 896
- (void)unionURIWithNSString:(NSString *)email1
                withNSString:(NSString *)email2
             withJavaUtilSet:(id<JavaUtilSet>)union_ {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionURIWithNSString_withNSString_withJavaUtilSet_(self, email1, email2, union_);
}


#line 1034
- (id<JavaUtilSet>)intersectDNSWithJavaUtilSet:(id<JavaUtilSet>)permitted
                               withJavaUtilSet:(id<JavaUtilSet>)dnss {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectDNSWithJavaUtilSet_withJavaUtilSet_(self, permitted, dnss);
}


#line 1070
- (id<JavaUtilSet>)unionDNSWithJavaUtilSet:(id<JavaUtilSet>)excluded
                              withNSString:(NSString *)dns {
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    
#line 1074
    if (dns == nil) {
      
#line 1076
      return excluded;
    }
    [excluded addWithId:dns];
    
#line 1080
    return excluded;
  }
  else {
    
#line 1084
    id<JavaUtilSet> union_ = new_JavaUtilHashSet_init();
    
#line 1086
    id<JavaUtilIterator> _iter = [excluded iterator];
    while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
      
#line 1089
      NSString *_permitted = (NSString *) cast_chk([_iter next], [NSString class]);
      
#line 1091
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _permitted, dns)) {
        
#line 1093
        [union_ addWithId:dns];
      }
      else if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, dns, _permitted)) {
        
#line 1097
        [union_ addWithId:_permitted];
      }
      else {
        
#line 1101
        [union_ addWithId:_permitted];
        [union_ addWithId:dns];
      }
    }
    
#line 1106
    return union_;
  }
}


#line 1118
- (void)intersectEmailWithNSString:(NSString *)email1
                      withNSString:(NSString *)email2
                   withJavaUtilSet:(id<JavaUtilSet>)intersect {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectEmailWithNSString_withNSString_withJavaUtilSet_(self, email1, email2, intersect);
}


#line 1211
- (void)checkExcludedURIWithJavaUtilSet:(id<JavaUtilSet>)excluded
                           withNSString:(NSString *)uri {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedURIWithJavaUtilSet_withNSString_(self, excluded, uri);
}


#line 1233
- (id<JavaUtilSet>)intersectURIWithJavaUtilSet:(id<JavaUtilSet>)permitted
                               withJavaUtilSet:(id<JavaUtilSet>)uris {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectURIWithJavaUtilSet_withJavaUtilSet_(self, permitted, uris);
}


#line 1260
- (id<JavaUtilSet>)unionURIWithJavaUtilSet:(id<JavaUtilSet>)excluded
                              withNSString:(NSString *)uri {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionURIWithJavaUtilSet_withNSString_(self, excluded, uri);
}


#line 1288
- (void)intersectURIWithNSString:(NSString *)email1
                    withNSString:(NSString *)email2
                 withJavaUtilSet:(id<JavaUtilSet>)intersect {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectURIWithNSString_withNSString_withJavaUtilSet_(self, email1, email2, intersect);
}


#line 1381
- (void)checkPermittedURIWithJavaUtilSet:(id<JavaUtilSet>)permitted
                            withNSString:(NSString *)uri {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedURIWithJavaUtilSet_withNSString_(self, permitted, uri);
}


#line 1408
- (jboolean)isUriConstrainedWithNSString:(NSString *)uri
                            withNSString:(NSString *)constraint {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_isUriConstrainedWithNSString_withNSString_(self, uri, constraint);
}


#line 1429
+ (NSString *)extractHostFromURLWithNSString:(NSString *)url {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractHostFromURLWithNSString_(url);
}


#line 1462
- (void)checkPermittedWithOrgSpongycastleAsn1X509GeneralName:(OrgSpongycastleAsn1X509GeneralName *)name {
  {
    
#line 1484
    IOSByteArray *ip;
    
#line 1465
    switch ([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(name)) getTagNo]) {
      
#line 1467
      case 1:
      OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedEmailWithJavaUtilSet_withNSString_(self, permittedSubtreesEmail_, OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractNameAsStringWithOrgSpongycastleAsn1X509GeneralName_(self,
#line 1469
      name));
      break;
      case 2:
      OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedDNSWithJavaUtilSet_withNSString_(self, permittedSubtreesDNS_, [((OrgSpongycastleAsn1DERIA5String *) nil_chk(OrgSpongycastleAsn1DERIA5String_getInstanceWithId_(
#line 1473
      [name getName]))) getString]);
      break;
      case 4:
      [self checkPermittedDNWithOrgSpongycastleAsn1ASN1Sequence:OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_([((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk([name getName])) toASN1Primitive])];
      
#line 1478
      break;
      case 6:
      OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedURIWithJavaUtilSet_withNSString_(self, permittedSubtreesURI_, [((OrgSpongycastleAsn1DERIA5String *) nil_chk(OrgSpongycastleAsn1DERIA5String_getInstanceWithId_(
#line 1481
      [name getName]))) getString]);
      break;
      case 7:
      ip = [((OrgSpongycastleAsn1ASN1OctetString *) nil_chk(OrgSpongycastleAsn1ASN1OctetString_getInstanceWithId_([name getName]))) getOctets];
      
#line 1486
      OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedIPWithJavaUtilSet_withByteArray_(self, permittedSubtreesIP_, ip);
    }
  }
}


#line 1498
- (void)checkExcludedWithOrgSpongycastleAsn1X509GeneralName:(OrgSpongycastleAsn1X509GeneralName *)name {
  {
    
#line 1519
    IOSByteArray *ip;
    
#line 1501
    switch ([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(name)) getTagNo]) {
      
#line 1503
      case 1:
      OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedEmailWithJavaUtilSet_withNSString_(self, excludedSubtreesEmail_, OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractNameAsStringWithOrgSpongycastleAsn1X509GeneralName_(self, name));
      break;
      case 2:
      OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedDNSWithJavaUtilSet_withNSString_(self, excludedSubtreesDNS_, [((OrgSpongycastleAsn1DERIA5String *) nil_chk(OrgSpongycastleAsn1DERIA5String_getInstanceWithId_(
#line 1508
      [name getName]))) getString]);
      break;
      case 4:
      [self checkExcludedDNWithOrgSpongycastleAsn1ASN1Sequence:OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_([((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk([name getName])) toASN1Primitive])];
      
#line 1513
      break;
      case 6:
      OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedURIWithJavaUtilSet_withNSString_(self, excludedSubtreesURI_, [((OrgSpongycastleAsn1DERIA5String *) nil_chk(OrgSpongycastleAsn1DERIA5String_getInstanceWithId_(
#line 1516
      [name getName]))) getString]);
      break;
      case 7:
      ip = [((OrgSpongycastleAsn1ASN1OctetString *) nil_chk(OrgSpongycastleAsn1ASN1OctetString_getInstanceWithId_([name getName]))) getOctets];
      
#line 1521
      OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedIPWithJavaUtilSet_withByteArray_(self, excludedSubtreesIP_, ip);
    }
  }
}


#line 1525
- (void)intersectPermittedSubtreeWithOrgSpongycastleAsn1X509GeneralSubtree:(OrgSpongycastleAsn1X509GeneralSubtree *)permitted {
  
#line 1527
  [self intersectPermittedSubtreeWithOrgSpongycastleAsn1X509GeneralSubtreeArray:[IOSObjectArray newArrayWithObjects:(id[]){ permitted } count:1 type:OrgSpongycastleAsn1X509GeneralSubtree_class_()]];
}


#line 1537
- (void)intersectPermittedSubtreeWithOrgSpongycastleAsn1X509GeneralSubtreeArray:(IOSObjectArray *)permitted {
  
#line 1539
  id<JavaUtilMap> subtreesMap = new_JavaUtilHashMap_init();
  
#line 1542
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(permitted))->size_; i++) {
    
#line 1544
    OrgSpongycastleAsn1X509GeneralSubtree *subtree = IOSObjectArray_Get(permitted, i);
    JavaLangInteger *tagNo = OrgSpongycastleUtilIntegers_valueOfWithInt_([((OrgSpongycastleAsn1X509GeneralName *) nil_chk([((OrgSpongycastleAsn1X509GeneralSubtree *) nil_chk(subtree)) getBase])) getTagNo]);
    if ([subtreesMap getWithId:tagNo] == nil) {
      
#line 1548
      (void) [subtreesMap putWithId:tagNo withId:new_JavaUtilHashSet_init()];
    }
    [((id<JavaUtilSet>) nil_chk(((id<JavaUtilSet>) cast_check([subtreesMap getWithId:tagNo], JavaUtilSet_class_())))) addWithId:subtree];
  }
  
#line 1553
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([subtreesMap entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 1555
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check([it next], JavaUtilMap_Entry_class_());
    
#line 1558
    switch ([((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [JavaLangInteger class])))) intValue]) {
      
#line 1560
      case 1:
      permittedSubtreesEmail_ = OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectEmailWithJavaUtilSet_withJavaUtilSet_(self, permittedSubtreesEmail_,
#line 1562
      (id<JavaUtilSet>) cast_check([entry_ getValue], JavaUtilSet_class_()));
      break;
      case 2:
      permittedSubtreesDNS_ = OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectDNSWithJavaUtilSet_withJavaUtilSet_(self, permittedSubtreesDNS_,
#line 1566
      (id<JavaUtilSet>) cast_check([entry_ getValue], JavaUtilSet_class_()));
      break;
      case 4:
      permittedSubtreesDN_ = OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectDNWithJavaUtilSet_withJavaUtilSet_(self, permittedSubtreesDN_,
#line 1570
      (id<JavaUtilSet>) cast_check([entry_ getValue], JavaUtilSet_class_()));
      break;
      case 6:
      permittedSubtreesURI_ = OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectURIWithJavaUtilSet_withJavaUtilSet_(self, permittedSubtreesURI_,
#line 1574
      (id<JavaUtilSet>) cast_check([entry_ getValue], JavaUtilSet_class_()));
      break;
      case 7:
      permittedSubtreesIP_ = OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectIPWithJavaUtilSet_withJavaUtilSet_(self, permittedSubtreesIP_,
#line 1578
      (id<JavaUtilSet>) cast_check([entry_ getValue], JavaUtilSet_class_()));
    }
  }
}


#line 1583
- (NSString *)extractNameAsStringWithOrgSpongycastleAsn1X509GeneralName:(OrgSpongycastleAsn1X509GeneralName *)name {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractNameAsStringWithOrgSpongycastleAsn1X509GeneralName_(self, name);
}


#line 1588
- (void)intersectEmptyPermittedSubtreeWithInt:(jint)nameType {
  
#line 1590
  switch (nameType) {
    
#line 1592
    case 1:
    permittedSubtreesEmail_ = new_JavaUtilHashSet_init();
    break;
    case 2:
    permittedSubtreesDNS_ = new_JavaUtilHashSet_init();
    break;
    case 4:
    permittedSubtreesDN_ = new_JavaUtilHashSet_init();
    break;
    case 6:
    permittedSubtreesURI_ = new_JavaUtilHashSet_init();
    break;
    case 7:
    permittedSubtreesIP_ = new_JavaUtilHashSet_init();
  }
}


#line 1614
- (void)addExcludedSubtreeWithOrgSpongycastleAsn1X509GeneralSubtree:(OrgSpongycastleAsn1X509GeneralSubtree *)subtree {
  
#line 1616
  OrgSpongycastleAsn1X509GeneralName *base = [((OrgSpongycastleAsn1X509GeneralSubtree *) nil_chk(subtree)) getBase];
  
#line 1618
  switch ([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(base)) getTagNo]) {
    
#line 1620
    case 1:
    excludedSubtreesEmail_ = OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionEmailWithJavaUtilSet_withNSString_(self, excludedSubtreesEmail_, OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractNameAsStringWithOrgSpongycastleAsn1X509GeneralName_(self,
#line 1622
    base));
    break;
    case 2:
    excludedSubtreesDNS_ = [self unionDNSWithJavaUtilSet:excludedSubtreesDNS_ withNSString:OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractNameAsStringWithOrgSpongycastleAsn1X509GeneralName_(self,
#line 1626
    base)];
    break;
    case 4:
    excludedSubtreesDN_ = OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionDNWithJavaUtilSet_withOrgSpongycastleAsn1ASN1Sequence_(self, excludedSubtreesDN_,
#line 1630
    (OrgSpongycastleAsn1ASN1Sequence *) cast_chk([((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk([base getName])) toASN1Primitive], [OrgSpongycastleAsn1ASN1Sequence class]));
    break;
    case 6:
    excludedSubtreesURI_ = OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionURIWithJavaUtilSet_withNSString_(self, excludedSubtreesURI_, OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractNameAsStringWithOrgSpongycastleAsn1X509GeneralName_(self,
#line 1634
    base));
    break;
    case 7:
    excludedSubtreesIP_ = OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionIPWithJavaUtilSet_withByteArray_(self, excludedSubtreesIP_, [((OrgSpongycastleAsn1ASN1OctetString *) nil_chk(OrgSpongycastleAsn1ASN1OctetString_getInstanceWithId_(
#line 1638
    [base getName]))) getOctets]);
    break;
  }
}


#line 1650
+ (IOSByteArray *)maxWithByteArray:(IOSByteArray *)ip1
                     withByteArray:(IOSByteArray *)ip2 {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_maxWithByteArray_withByteArray_(ip1, ip2);
}


#line 1669
+ (IOSByteArray *)minWithByteArray:(IOSByteArray *)ip1
                     withByteArray:(IOSByteArray *)ip2 {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_minWithByteArray_withByteArray_(ip1, ip2);
}


#line 1690
+ (jint)compareToWithByteArray:(IOSByteArray *)ip1
                 withByteArray:(IOSByteArray *)ip2 {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_compareToWithByteArray_withByteArray_(ip1, ip2);
}


#line 1711
+ (IOSByteArray *)or__WithByteArray:(IOSByteArray *)ip1
                      withByteArray:(IOSByteArray *)ip2 {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_or__WithByteArray_withByteArray_(ip1, ip2);
}


#line 1721
- (NSUInteger)hash {
  
#line 1723
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self, excludedSubtreesDN_) + OrgSpongycastleJceProviderPKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self,
#line 1724
  excludedSubtreesDNS_) + OrgSpongycastleJceProviderPKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self,
#line 1725
  excludedSubtreesEmail_) + OrgSpongycastleJceProviderPKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self,
#line 1726
  excludedSubtreesIP_) + OrgSpongycastleJceProviderPKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self,
#line 1727
  excludedSubtreesURI_) + OrgSpongycastleJceProviderPKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self,
#line 1728
  permittedSubtreesDN_) + OrgSpongycastleJceProviderPKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self,
#line 1729
  permittedSubtreesDNS_) + OrgSpongycastleJceProviderPKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self,
#line 1730
  permittedSubtreesEmail_) + OrgSpongycastleJceProviderPKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self,
#line 1731
  permittedSubtreesIP_) + OrgSpongycastleJceProviderPKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self,
#line 1732
  permittedSubtreesURI_);
}


#line 1735
- (jint)hashCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(self, coll);
}


#line 1758
- (jboolean)isEqual:(id)o {
  
#line 1760
  if (!([o isKindOfClass:[OrgSpongycastleJceProviderPKIXNameConstraintValidator class]])) {
    
#line 1762
    return false;
  }
  OrgSpongycastleJceProviderPKIXNameConstraintValidator *constraintValidator = (OrgSpongycastleJceProviderPKIXNameConstraintValidator *) cast_chk(o, [OrgSpongycastleJceProviderPKIXNameConstraintValidator class]);
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self, ((OrgSpongycastleJceProviderPKIXNameConstraintValidator *) nil_chk(constraintValidator))->excludedSubtreesDN_, excludedSubtreesDN_) && OrgSpongycastleJceProviderPKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self,
#line 1766
  constraintValidator->excludedSubtreesDNS_, excludedSubtreesDNS_) && OrgSpongycastleJceProviderPKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self,
#line 1767
  constraintValidator->excludedSubtreesEmail_, excludedSubtreesEmail_) && OrgSpongycastleJceProviderPKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self,
#line 1768
  constraintValidator->excludedSubtreesIP_, excludedSubtreesIP_) && OrgSpongycastleJceProviderPKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self,
#line 1769
  constraintValidator->excludedSubtreesURI_, excludedSubtreesURI_) && OrgSpongycastleJceProviderPKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self,
#line 1770
  constraintValidator->permittedSubtreesDN_, permittedSubtreesDN_) && OrgSpongycastleJceProviderPKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self,
#line 1771
  constraintValidator->permittedSubtreesDNS_, permittedSubtreesDNS_) && OrgSpongycastleJceProviderPKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self,
#line 1772
  constraintValidator->permittedSubtreesEmail_, permittedSubtreesEmail_) && OrgSpongycastleJceProviderPKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self,
#line 1773
  constraintValidator->permittedSubtreesIP_, permittedSubtreesIP_) && OrgSpongycastleJceProviderPKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self,
#line 1774
  constraintValidator->permittedSubtreesURI_, permittedSubtreesURI_);
}


#line 1777
- (jboolean)collectionsAreEqualWithJavaUtilCollection:(id<JavaUtilCollection>)coll1
                               withJavaUtilCollection:(id<JavaUtilCollection>)coll2 {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(self, coll1, coll2);
}


#line 1815
- (jboolean)equalsWithId:(id)o1
                  withId:(id)o2 {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_equalsWithId_withId_(self, o1, o2);
}


#line 1841
- (NSString *)stringifyIPWithByteArray:(IOSByteArray *)ip {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_stringifyIPWithByteArray_(self, ip);
}


#line 1858
- (NSString *)stringifyIPCollectionWithJavaUtilSet:(id<JavaUtilSet>)ips {
  return OrgSpongycastleJceProviderPKIXNameConstraintValidator_stringifyIPCollectionWithJavaUtilSet_(self, ips);
}


#line 1874
- (NSString *)description {
  
#line 1876
  NSString *temp = @"";
  (void) JreStrAppendStrong(&temp, "$", @"permitted:\n");
  if (permittedSubtreesDN_ != nil) {
    
#line 1880
    (void) JreStrAppendStrong(&temp, "$", @"DN:\n");
    (void) JreStrAppendStrong(&temp, "$C", [permittedSubtreesDN_ description], 0x000a);
  }
  if (permittedSubtreesDNS_ != nil) {
    
#line 1885
    (void) JreStrAppendStrong(&temp, "$", @"DNS:\n");
    (void) JreStrAppendStrong(&temp, "$C", [permittedSubtreesDNS_ description], 0x000a);
  }
  if (permittedSubtreesEmail_ != nil) {
    
#line 1890
    (void) JreStrAppendStrong(&temp, "$", @"Email:\n");
    (void) JreStrAppendStrong(&temp, "$C", [permittedSubtreesEmail_ description], 0x000a);
  }
  if (permittedSubtreesURI_ != nil) {
    
#line 1895
    (void) JreStrAppendStrong(&temp, "$", @"URI:\n");
    (void) JreStrAppendStrong(&temp, "$C", [permittedSubtreesURI_ description], 0x000a);
  }
  if (permittedSubtreesIP_ != nil) {
    
#line 1900
    (void) JreStrAppendStrong(&temp, "$", @"IP:\n");
    (void) JreStrAppendStrong(&temp, "$C", OrgSpongycastleJceProviderPKIXNameConstraintValidator_stringifyIPCollectionWithJavaUtilSet_(self, permittedSubtreesIP_), 0x000a);
  }
  (void) JreStrAppendStrong(&temp, "$", @"excluded:\n");
  if (![((id<JavaUtilSet>) nil_chk(excludedSubtreesDN_)) isEmpty]) {
    
#line 1906
    (void) JreStrAppendStrong(&temp, "$", @"DN:\n");
    (void) JreStrAppendStrong(&temp, "$C", [((id<JavaUtilSet>) nil_chk(excludedSubtreesDN_)) description], 0x000a);
  }
  if (![((id<JavaUtilSet>) nil_chk(excludedSubtreesDNS_)) isEmpty]) {
    
#line 1911
    (void) JreStrAppendStrong(&temp, "$", @"DNS:\n");
    (void) JreStrAppendStrong(&temp, "$C", [((id<JavaUtilSet>) nil_chk(excludedSubtreesDNS_)) description], 0x000a);
  }
  if (![((id<JavaUtilSet>) nil_chk(excludedSubtreesEmail_)) isEmpty]) {
    
#line 1916
    (void) JreStrAppendStrong(&temp, "$", @"Email:\n");
    (void) JreStrAppendStrong(&temp, "$C", [((id<JavaUtilSet>) nil_chk(excludedSubtreesEmail_)) description], 0x000a);
  }
  if (![((id<JavaUtilSet>) nil_chk(excludedSubtreesURI_)) isEmpty]) {
    
#line 1921
    (void) JreStrAppendStrong(&temp, "$", @"URI:\n");
    (void) JreStrAppendStrong(&temp, "$C", [((id<JavaUtilSet>) nil_chk(excludedSubtreesURI_)) description], 0x000a);
  }
  if (![((id<JavaUtilSet>) nil_chk(excludedSubtreesIP_)) isEmpty]) {
    
#line 1926
    (void) JreStrAppendStrong(&temp, "$", @"IP:\n");
    (void) JreStrAppendStrong(&temp, "$C", OrgSpongycastleJceProviderPKIXNameConstraintValidator_stringifyIPCollectionWithJavaUtilSet_(self, excludedSubtreesIP_), 0x000a);
  }
  return temp;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 6, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, 4, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 9, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 10, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 13, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 18, 17, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 19, 17, -1, -1, -1, -1 },
    { NULL, "[[B", 0x2, 20, 17, -1, -1, -1, -1 },
    { NULL, "[[B", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 15, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 15, 4, -1, -1, -1 },
    { NULL, "Z", 0x2, 27, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 28, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 30, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 33, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 35, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x4, 36, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 12, 4, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 38, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 34, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 12, 4, -1, -1, -1 },
    { NULL, "Z", 0x2, 40, 29, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 44, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 44, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 48, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 49, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 52, 47, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 53, 17, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 54, 17, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 55, 17, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 56, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 57, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 58, 59, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 60, 61, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 62, 63, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 60, 64, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 65, 66, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 67, 68, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 69, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(withinDNSubtreeWithOrgSpongycastleAsn1ASN1Sequence:withOrgSpongycastleAsn1ASN1Sequence:);
  methods[2].selector = @selector(checkPermittedDNWithOrgSpongycastleAsn1ASN1Sequence:);
  methods[3].selector = @selector(checkExcludedDNWithOrgSpongycastleAsn1ASN1Sequence:);
  methods[4].selector = @selector(checkPermittedDNWithJavaUtilSet:withOrgSpongycastleAsn1ASN1Sequence:);
  methods[5].selector = @selector(checkExcludedDNWithJavaUtilSet:withOrgSpongycastleAsn1ASN1Sequence:);
  methods[6].selector = @selector(intersectDNWithJavaUtilSet:withJavaUtilSet:);
  methods[7].selector = @selector(unionDNWithJavaUtilSet:withOrgSpongycastleAsn1ASN1Sequence:);
  methods[8].selector = @selector(intersectEmailWithJavaUtilSet:withJavaUtilSet:);
  methods[9].selector = @selector(unionEmailWithJavaUtilSet:withNSString:);
  methods[10].selector = @selector(intersectIPWithJavaUtilSet:withJavaUtilSet:);
  methods[11].selector = @selector(unionIPWithJavaUtilSet:withByteArray:);
  methods[12].selector = @selector(unionIPRangeWithByteArray:withByteArray:);
  methods[13].selector = @selector(intersectIPRangeWithByteArray:withByteArray:);
  methods[14].selector = @selector(ipWithSubnetMaskWithByteArray:withByteArray:);
  methods[15].selector = @selector(extractIPsAndSubnetMasksWithByteArray:withByteArray:);
  methods[16].selector = @selector(minMaxIPsWithByteArray:withByteArray:withByteArray:withByteArray:);
  methods[17].selector = @selector(checkPermittedEmailWithJavaUtilSet:withNSString:);
  methods[18].selector = @selector(checkExcludedEmailWithJavaUtilSet:withNSString:);
  methods[19].selector = @selector(checkPermittedIPWithJavaUtilSet:withByteArray:);
  methods[20].selector = @selector(checkExcludedIPWithJavaUtilSet:withByteArray:);
  methods[21].selector = @selector(isIPConstrainedWithByteArray:withByteArray:);
  methods[22].selector = @selector(emailIsConstrainedWithNSString:withNSString:);
  methods[23].selector = @selector(withinDomainWithNSString:withNSString:);
  methods[24].selector = @selector(checkPermittedDNSWithJavaUtilSet:withNSString:);
  methods[25].selector = @selector(checkExcludedDNSWithJavaUtilSet:withNSString:);
  methods[26].selector = @selector(unionEmailWithNSString:withNSString:withJavaUtilSet:);
  methods[27].selector = @selector(unionURIWithNSString:withNSString:withJavaUtilSet:);
  methods[28].selector = @selector(intersectDNSWithJavaUtilSet:withJavaUtilSet:);
  methods[29].selector = @selector(unionDNSWithJavaUtilSet:withNSString:);
  methods[30].selector = @selector(intersectEmailWithNSString:withNSString:withJavaUtilSet:);
  methods[31].selector = @selector(checkExcludedURIWithJavaUtilSet:withNSString:);
  methods[32].selector = @selector(intersectURIWithJavaUtilSet:withJavaUtilSet:);
  methods[33].selector = @selector(unionURIWithJavaUtilSet:withNSString:);
  methods[34].selector = @selector(intersectURIWithNSString:withNSString:withJavaUtilSet:);
  methods[35].selector = @selector(checkPermittedURIWithJavaUtilSet:withNSString:);
  methods[36].selector = @selector(isUriConstrainedWithNSString:withNSString:);
  methods[37].selector = @selector(extractHostFromURLWithNSString:);
  methods[38].selector = @selector(checkPermittedWithOrgSpongycastleAsn1X509GeneralName:);
  methods[39].selector = @selector(checkExcludedWithOrgSpongycastleAsn1X509GeneralName:);
  methods[40].selector = @selector(intersectPermittedSubtreeWithOrgSpongycastleAsn1X509GeneralSubtree:);
  methods[41].selector = @selector(intersectPermittedSubtreeWithOrgSpongycastleAsn1X509GeneralSubtreeArray:);
  methods[42].selector = @selector(extractNameAsStringWithOrgSpongycastleAsn1X509GeneralName:);
  methods[43].selector = @selector(intersectEmptyPermittedSubtreeWithInt:);
  methods[44].selector = @selector(addExcludedSubtreeWithOrgSpongycastleAsn1X509GeneralSubtree:);
  methods[45].selector = @selector(maxWithByteArray:withByteArray:);
  methods[46].selector = @selector(minWithByteArray:withByteArray:);
  methods[47].selector = @selector(compareToWithByteArray:withByteArray:);
  methods[48].selector = @selector(or__WithByteArray:withByteArray:);
  methods[49].selector = @selector(hash);
  methods[50].selector = @selector(hashCollectionWithJavaUtilCollection:);
  methods[51].selector = @selector(isEqual:);
  methods[52].selector = @selector(collectionsAreEqualWithJavaUtilCollection:withJavaUtilCollection:);
  methods[53].selector = @selector(equalsWithId:withId:);
  methods[54].selector = @selector(stringifyIPWithByteArray:);
  methods[55].selector = @selector(stringifyIPCollectionWithJavaUtilSet:);
  methods[56].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "excludedSubtreesDN_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "excludedSubtreesDNS_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "excludedSubtreesEmail_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "excludedSubtreesURI_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "excludedSubtreesIP_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "permittedSubtreesDN_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "permittedSubtreesDNS_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "permittedSubtreesEmail_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "permittedSubtreesURI_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "permittedSubtreesIP_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "withinDNSubtree", "LOrgSpongycastleAsn1ASN1Sequence;LOrgSpongycastleAsn1ASN1Sequence;", "checkPermittedDN", "LOrgSpongycastleAsn1ASN1Sequence;", "LOrgSpongycastleJceProviderPKIXNameConstraintValidatorException;", "checkExcludedDN", "LJavaUtilSet;LOrgSpongycastleAsn1ASN1Sequence;", "intersectDN", "LJavaUtilSet;LJavaUtilSet;", "unionDN", "intersectEmail", "unionEmail", "LJavaUtilSet;LNSString;", "intersectIP", "unionIP", "LJavaUtilSet;[B", "unionIPRange", "[B[B", "intersectIPRange", "ipWithSubnetMask", "extractIPsAndSubnetMasks", "minMaxIPs", "[B[B[B[B", "checkPermittedEmail", "checkExcludedEmail", "checkPermittedIP", "checkExcludedIP", "isIPConstrained", "emailIsConstrained", "LNSString;LNSString;", "withinDomain", "checkPermittedDNS", "checkExcludedDNS", "LNSString;LNSString;LJavaUtilSet;", "unionURI", "intersectDNS", "unionDNS", "checkExcludedURI", "intersectURI", "checkPermittedURI", "isUriConstrained", "extractHostFromURL", "LNSString;", "checkPermitted", "LOrgSpongycastleAsn1X509GeneralName;", "checkExcluded", "intersectPermittedSubtree", "LOrgSpongycastleAsn1X509GeneralSubtree;", "[LOrgSpongycastleAsn1X509GeneralSubtree;", "extractNameAsString", "intersectEmptyPermittedSubtree", "I", "addExcludedSubtree", "max", "min", "compareTo", "or", "hashCode", "hashCollection", "LJavaUtilCollection;", "equals", "LNSObject;", "collectionsAreEqual", "LJavaUtilCollection;LJavaUtilCollection;", "LNSObject;LNSObject;", "stringifyIP", "[B", "stringifyIPCollection", "LJavaUtilSet;", "toString" };
  static const J2ObjcClassInfo _OrgSpongycastleJceProviderPKIXNameConstraintValidator = { "PKIXNameConstraintValidator", "org.spongycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 57, 10, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleJceProviderPKIXNameConstraintValidator;
}

@end


#line 42
void OrgSpongycastleJceProviderPKIXNameConstraintValidator_init(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self) {
  NSObject_init(self);
  self->excludedSubtreesDN_ = new_JavaUtilHashSet_init();
  self->excludedSubtreesDNS_ = new_JavaUtilHashSet_init();
  self->excludedSubtreesEmail_ = new_JavaUtilHashSet_init();
  self->excludedSubtreesURI_ = new_JavaUtilHashSet_init();
  self->excludedSubtreesIP_ = new_JavaUtilHashSet_init();
}


#line 42
OrgSpongycastleJceProviderPKIXNameConstraintValidator *new_OrgSpongycastleJceProviderPKIXNameConstraintValidator_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleJceProviderPKIXNameConstraintValidator, init)
}


#line 42
OrgSpongycastleJceProviderPKIXNameConstraintValidator *create_OrgSpongycastleJceProviderPKIXNameConstraintValidator_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJceProviderPKIXNameConstraintValidator, init)
}

jboolean OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDNSubtreeWithOrgSpongycastleAsn1ASN1Sequence_withOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1ASN1Sequence *dns, OrgSpongycastleAsn1ASN1Sequence *subtree) {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_initialize();
  
#line 50
  if ([((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(subtree)) size] < 1) {
    
#line 52
    return false;
  }
  
#line 55
  if ([subtree size] > [((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(dns)) size]) {
    
#line 57
    return false;
  }
  
#line 60
  for (jint j = [subtree size] - 1; j >= 0; j--) {
    
#line 62
    if (![((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk([subtree getObjectAtWithInt:j])) isEqual:[dns getObjectAtWithInt:j]]) {
      
#line 64
      return false;
    }
  }
  
#line 68
  return true;
}


#line 83
void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedDNWithJavaUtilSet_withOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, OrgSpongycastleAsn1ASN1Sequence *dns) {
  
#line 86
  if (permitted == nil) {
    
#line 88
    return;
  }
  
#line 91
  if ([permitted isEmpty] && [((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(dns)) size] == 0) {
    
#line 93
    return;
  }
  id<JavaUtilIterator> it = [permitted iterator];
  
#line 97
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    
#line 99
    OrgSpongycastleAsn1ASN1Sequence *subtree = (OrgSpongycastleAsn1ASN1Sequence *) cast_chk([it next], [OrgSpongycastleAsn1ASN1Sequence class]);
    
#line 101
    if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDNSubtreeWithOrgSpongycastleAsn1ASN1Sequence_withOrgSpongycastleAsn1ASN1Sequence_(dns, subtree)) {
      
#line 103
      return;
    }
  }
  
#line 107
  @throw new_OrgSpongycastleJceProviderPKIXNameConstraintValidatorException_initWithNSString_(
#line 108
  @"Subject distinguished name is not from a permitted subtree");
}


#line 111
void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedDNWithJavaUtilSet_withOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, OrgSpongycastleAsn1ASN1Sequence *dns) {
  
#line 114
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    
#line 116
    return;
  }
  
#line 119
  id<JavaUtilIterator> it = [excluded iterator];
  
#line 121
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    
#line 123
    OrgSpongycastleAsn1ASN1Sequence *subtree = (OrgSpongycastleAsn1ASN1Sequence *) cast_chk([it next], [OrgSpongycastleAsn1ASN1Sequence class]);
    
#line 125
    if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDNSubtreeWithOrgSpongycastleAsn1ASN1Sequence_withOrgSpongycastleAsn1ASN1Sequence_(dns, subtree)) {
      
#line 127
      @throw new_OrgSpongycastleJceProviderPKIXNameConstraintValidatorException_initWithNSString_(
#line 128
      @"Subject distinguished name is from an excluded subtree");
    }
  }
}


#line 133
id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectDNWithJavaUtilSet_withJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> dns) {
  
#line 135
  id<JavaUtilSet> intersect = new_JavaUtilHashSet_init();
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(dns)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 138
    OrgSpongycastleAsn1ASN1Sequence *dn = OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_([((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk([((OrgSpongycastleAsn1X509GeneralName *) nil_chk([((OrgSpongycastleAsn1X509GeneralSubtree *) nil_chk(((OrgSpongycastleAsn1X509GeneralSubtree *) cast_chk([it next], [OrgSpongycastleAsn1X509GeneralSubtree class])))) getBase])) getName])) toASN1Primitive]);
    
#line 140
    if (permitted == nil) {
      
#line 142
      if (dn != nil) {
        
#line 144
        [intersect addWithId:dn];
      }
    }
    else {
      
#line 149
      id<JavaUtilIterator> _iter = [permitted iterator];
      while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
        
#line 152
        OrgSpongycastleAsn1ASN1Sequence *subtree = (OrgSpongycastleAsn1ASN1Sequence *) cast_chk([_iter next], [OrgSpongycastleAsn1ASN1Sequence class]);
        
#line 154
        if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDNSubtreeWithOrgSpongycastleAsn1ASN1Sequence_withOrgSpongycastleAsn1ASN1Sequence_(dn, subtree)) {
          
#line 156
          [intersect addWithId:dn];
        }
        else if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDNSubtreeWithOrgSpongycastleAsn1ASN1Sequence_withOrgSpongycastleAsn1ASN1Sequence_(subtree, dn)) {
          
#line 160
          [intersect addWithId:subtree];
        }
      }
    }
  }
  return intersect;
}


#line 168
id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionDNWithJavaUtilSet_withOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, OrgSpongycastleAsn1ASN1Sequence *dn) {
  
#line 170
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    
#line 172
    if (dn == nil) {
      
#line 174
      return excluded;
    }
    [excluded addWithId:dn];
    
#line 178
    return excluded;
  }
  else {
    
#line 182
    id<JavaUtilSet> intersect = new_JavaUtilHashSet_init();
    
#line 184
    id<JavaUtilIterator> it = [excluded iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      
#line 187
      OrgSpongycastleAsn1ASN1Sequence *subtree = (OrgSpongycastleAsn1ASN1Sequence *) cast_chk([it next], [OrgSpongycastleAsn1ASN1Sequence class]);
      
#line 189
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDNSubtreeWithOrgSpongycastleAsn1ASN1Sequence_withOrgSpongycastleAsn1ASN1Sequence_(dn, subtree)) {
        
#line 191
        [intersect addWithId:subtree];
      }
      else if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDNSubtreeWithOrgSpongycastleAsn1ASN1Sequence_withOrgSpongycastleAsn1ASN1Sequence_(subtree, dn)) {
        
#line 195
        [intersect addWithId:dn];
      }
      else {
        
#line 199
        [intersect addWithId:subtree];
        [intersect addWithId:dn];
      }
    }
    
#line 204
    return intersect;
  }
}


#line 208
id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectEmailWithJavaUtilSet_withJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> emails) {
  
#line 210
  id<JavaUtilSet> intersect = new_JavaUtilHashSet_init();
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(emails)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 213
    NSString *email = OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractNameAsStringWithOrgSpongycastleAsn1X509GeneralName_(self, [((OrgSpongycastleAsn1X509GeneralSubtree *) nil_chk(((OrgSpongycastleAsn1X509GeneralSubtree *) cast_chk([it next], [OrgSpongycastleAsn1X509GeneralSubtree class])))) getBase]);
    
#line 216
    if (permitted == nil) {
      
#line 218
      if (email != nil) {
        
#line 220
        [intersect addWithId:email];
      }
    }
    else {
      
#line 225
      id<JavaUtilIterator> it2 = [permitted iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
        
#line 228
        NSString *_permitted = (NSString *) cast_chk([it2 next], [NSString class]);
        
#line 230
        OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectEmailWithNSString_withNSString_withJavaUtilSet_(self, email, _permitted, intersect);
      }
    }
  }
  return intersect;
}


#line 237
id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionEmailWithJavaUtilSet_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *email) {
  
#line 239
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    
#line 241
    if (email == nil) {
      
#line 243
      return excluded;
    }
    [excluded addWithId:email];
    return excluded;
  }
  else {
    
#line 250
    id<JavaUtilSet> union_ = new_JavaUtilHashSet_init();
    
#line 252
    id<JavaUtilIterator> it = [excluded iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      
#line 255
      NSString *_excluded = (NSString *) cast_chk([it next], [NSString class]);
      
#line 257
      OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionEmailWithNSString_withNSString_withJavaUtilSet_(self, _excluded, email, union_);
    }
    
#line 260
    return union_;
  }
}


#line 274
id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectIPWithJavaUtilSet_withJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> ips) {
  
#line 276
  id<JavaUtilSet> intersect = new_JavaUtilHashSet_init();
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(ips)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 279
    IOSByteArray *ip = [((OrgSpongycastleAsn1ASN1OctetString *) nil_chk(OrgSpongycastleAsn1ASN1OctetString_getInstanceWithId_(
#line 280
    [((OrgSpongycastleAsn1X509GeneralName *) nil_chk([((OrgSpongycastleAsn1X509GeneralSubtree *) nil_chk(((OrgSpongycastleAsn1X509GeneralSubtree *) cast_chk([it next], [OrgSpongycastleAsn1X509GeneralSubtree class])))) getBase])) getName]))) getOctets];
    if (permitted == nil) {
      
#line 283
      if (ip != nil) {
        
#line 285
        [intersect addWithId:ip];
      }
    }
    else {
      
#line 290
      id<JavaUtilIterator> it2 = [permitted iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
        
#line 293
        IOSByteArray *_permitted = (IOSByteArray *) cast_chk([it2 next], [IOSByteArray class]);
        [intersect addAllWithJavaUtilCollection:OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectIPRangeWithByteArray_withByteArray_(self, _permitted, ip)];
      }
    }
  }
  return intersect;
}


#line 311
id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionIPWithJavaUtilSet_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, IOSByteArray *ip) {
  
#line 313
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    
#line 315
    if (ip == nil) {
      
#line 317
      return excluded;
    }
    [excluded addWithId:ip];
    
#line 321
    return excluded;
  }
  else {
    
#line 325
    id<JavaUtilSet> union_ = new_JavaUtilHashSet_init();
    
#line 327
    id<JavaUtilIterator> it = [excluded iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      
#line 330
      IOSByteArray *_excluded = (IOSByteArray *) cast_chk([it next], [IOSByteArray class]);
      [union_ addAllWithJavaUtilCollection:OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionIPRangeWithByteArray_withByteArray_(self, _excluded, ip)];
    }
    
#line 334
    return union_;
  }
}


#line 345
id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionIPRangeWithByteArray_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, IOSByteArray *ipWithSubmask1, IOSByteArray *ipWithSubmask2) {
  
#line 347
  id<JavaUtilSet> set = new_JavaUtilHashSet_init();
  
#line 350
  if (OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_(ipWithSubmask1, ipWithSubmask2)) {
    
#line 352
    [set addWithId:ipWithSubmask1];
  }
  else {
    
#line 356
    [set addWithId:ipWithSubmask1];
    [set addWithId:ipWithSubmask2];
  }
  return set;
}


#line 370
id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectIPRangeWithByteArray_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, IOSByteArray *ipWithSubmask1, IOSByteArray *ipWithSubmask2) {
  
#line 372
  if (((IOSByteArray *) nil_chk(ipWithSubmask1))->size_ != ((IOSByteArray *) nil_chk(ipWithSubmask2))->size_) {
    
#line 374
    return JreLoadStatic(JavaUtilCollections, EMPTY_SET);
  }
  IOSObjectArray *temp = OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractIPsAndSubnetMasksWithByteArray_withByteArray_(self, ipWithSubmask1, ipWithSubmask2);
  IOSByteArray *ip1 = IOSObjectArray_Get(nil_chk(temp), 0);
  IOSByteArray *subnetmask1 = IOSObjectArray_Get(temp, 1);
  IOSByteArray *ip2 = IOSObjectArray_Get(temp, 2);
  IOSByteArray *subnetmask2 = IOSObjectArray_Get(temp, 3);
  
#line 382
  IOSObjectArray *minMax = OrgSpongycastleJceProviderPKIXNameConstraintValidator_minMaxIPsWithByteArray_withByteArray_withByteArray_withByteArray_(self, ip1, subnetmask1, ip2, subnetmask2);
  IOSByteArray *min;
  IOSByteArray *max;
  max = OrgSpongycastleJceProviderPKIXNameConstraintValidator_minWithByteArray_withByteArray_(IOSObjectArray_Get(nil_chk(minMax), 1), IOSObjectArray_Get(minMax, 3));
  min = OrgSpongycastleJceProviderPKIXNameConstraintValidator_maxWithByteArray_withByteArray_(IOSObjectArray_Get(minMax, 0), IOSObjectArray_Get(minMax, 2));
  
#line 389
  if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_compareToWithByteArray_withByteArray_(min, max) == 1) {
    
#line 391
    return JreLoadStatic(JavaUtilCollections, EMPTY_SET);
  }
  
#line 394
  IOSByteArray *ip = OrgSpongycastleJceProviderPKIXNameConstraintValidator_or__WithByteArray_withByteArray_(IOSObjectArray_Get(minMax, 0), IOSObjectArray_Get(minMax, 2));
  IOSByteArray *subnetmask = OrgSpongycastleJceProviderPKIXNameConstraintValidator_or__WithByteArray_withByteArray_(subnetmask1, subnetmask2);
  return JavaUtilCollections_singletonWithId_(OrgSpongycastleJceProviderPKIXNameConstraintValidator_ipWithSubnetMaskWithByteArray_withByteArray_(self, ip, subnetmask));
}


#line 406
IOSByteArray *OrgSpongycastleJceProviderPKIXNameConstraintValidator_ipWithSubnetMaskWithByteArray_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, IOSByteArray *ip, IOSByteArray *subnetMask) {
  
#line 408
  jint ipLength = ((IOSByteArray *) nil_chk(ip))->size_;
  IOSByteArray *temp = [IOSByteArray newArrayWithLength:ipLength * 2];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ip, 0, temp, 0, ipLength);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(subnetMask, 0, temp, ipLength, ipLength);
  return temp;
}


#line 423
IOSObjectArray *OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractIPsAndSubnetMasksWithByteArray_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, IOSByteArray *ipWithSubmask1, IOSByteArray *ipWithSubmask2) {
  
#line 427
  jint ipLength = JreIntDiv(((IOSByteArray *) nil_chk(ipWithSubmask1))->size_, 2);
  IOSByteArray *ip1 = [IOSByteArray newArrayWithLength:ipLength];
  IOSByteArray *subnetmask1 = [IOSByteArray newArrayWithLength:ipLength];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ipWithSubmask1, 0, ip1, 0, ipLength);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ipWithSubmask1, ipLength, subnetmask1, 0, ipLength);
  
#line 433
  IOSByteArray *ip2 = [IOSByteArray newArrayWithLength:ipLength];
  IOSByteArray *subnetmask2 = [IOSByteArray newArrayWithLength:ipLength];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ipWithSubmask2, 0, ip2, 0, ipLength);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ipWithSubmask2, ipLength, subnetmask2, 0, ipLength);
  return [IOSObjectArray newArrayWithObjects:(id[]){
#line 438
    ip1, subnetmask1, ip2, subnetmask2 } count:4 type:IOSClass_byteArray(1)];
  }


#line 454
IOSObjectArray *OrgSpongycastleJceProviderPKIXNameConstraintValidator_minMaxIPsWithByteArray_withByteArray_withByteArray_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, IOSByteArray *ip1, IOSByteArray *subnetmask1, IOSByteArray *ip2, IOSByteArray *subnetmask2) {
  
#line 460
  jint ipLength = ((IOSByteArray *) nil_chk(ip1))->size_;
  IOSByteArray *min1 = [IOSByteArray newArrayWithLength:ipLength];
  IOSByteArray *max1 = [IOSByteArray newArrayWithLength:ipLength];
  
#line 464
  IOSByteArray *min2 = [IOSByteArray newArrayWithLength:ipLength];
  IOSByteArray *max2 = [IOSByteArray newArrayWithLength:ipLength];
  
#line 467
  for (jint i = 0; i < ipLength; i++) {
    
#line 469
    *IOSByteArray_GetRef(min1, i) = (jbyte) (IOSByteArray_Get(ip1, i) & IOSByteArray_Get(nil_chk(subnetmask1), i));
    *IOSByteArray_GetRef(max1, i) = (jbyte) ((IOSByteArray_Get(ip1, i) & IOSByteArray_Get(subnetmask1, i)) | ~IOSByteArray_Get(subnetmask1, i));
    
#line 472
    *IOSByteArray_GetRef(min2, i) = (jbyte) (IOSByteArray_Get(nil_chk(ip2), i) & IOSByteArray_Get(nil_chk(subnetmask2), i));
    *IOSByteArray_GetRef(max2, i) = (jbyte) ((IOSByteArray_Get(ip2, i) & IOSByteArray_Get(subnetmask2, i)) | ~IOSByteArray_Get(subnetmask2, i));
  }
  
#line 476
  return [IOSObjectArray newArrayWithObjects:(id[]){ min1, max1, min2, max2 } count:4 type:IOSClass_byteArray(1)];
}


#line 479
void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedEmailWithJavaUtilSet_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, NSString *email) {
  
#line 482
  if (permitted == nil) {
    
#line 484
    return;
  }
  
#line 487
  id<JavaUtilIterator> it = [permitted iterator];
  
#line 489
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    
#line 491
    NSString *str = ((NSString *) cast_chk([it next], [NSString class]));
    
#line 493
    if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_emailIsConstrainedWithNSString_withNSString_(self, email, str)) {
      
#line 495
      return;
    }
  }
  
#line 499
  if ([((NSString *) nil_chk(email)) java_length] == 0 && [permitted size] == 0) {
    
#line 501
    return;
  }
  
#line 504
  @throw new_OrgSpongycastleJceProviderPKIXNameConstraintValidatorException_initWithNSString_(
#line 505
  @"Subject email address is not from a permitted subtree.");
}


#line 508
void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedEmailWithJavaUtilSet_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *email) {
  
#line 511
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    
#line 513
    return;
  }
  
#line 516
  id<JavaUtilIterator> it = [excluded iterator];
  
#line 518
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    
#line 520
    NSString *str = (NSString *) cast_chk([it next], [NSString class]);
    
#line 522
    if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_emailIsConstrainedWithNSString_withNSString_(self, email, str)) {
      
#line 524
      @throw new_OrgSpongycastleJceProviderPKIXNameConstraintValidatorException_initWithNSString_(
#line 525
      @"Email address is from an excluded subtree.");
    }
  }
}


#line 540
void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedIPWithJavaUtilSet_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, IOSByteArray *ip) {
  
#line 543
  if (permitted == nil) {
    
#line 545
    return;
  }
  
#line 548
  id<JavaUtilIterator> it = [permitted iterator];
  
#line 550
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    
#line 552
    IOSByteArray *ipWithSubnet = (IOSByteArray *) cast_chk([it next], [IOSByteArray class]);
    
#line 554
    if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_isIPConstrainedWithByteArray_withByteArray_(self, ip, ipWithSubnet)) {
      
#line 556
      return;
    }
  }
  if (((IOSByteArray *) nil_chk(ip))->size_ == 0 && [permitted size] == 0) {
    
#line 561
    return;
  }
  @throw new_OrgSpongycastleJceProviderPKIXNameConstraintValidatorException_initWithNSString_(
#line 564
  @"IP is not from a permitted subtree.");
}


#line 577
void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedIPWithJavaUtilSet_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, IOSByteArray *ip) {
  
#line 580
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    
#line 582
    return;
  }
  
#line 585
  id<JavaUtilIterator> it = [excluded iterator];
  
#line 587
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    
#line 589
    IOSByteArray *ipWithSubnet = (IOSByteArray *) cast_chk([it next], [IOSByteArray class]);
    
#line 591
    if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_isIPConstrainedWithByteArray_withByteArray_(self, ip, ipWithSubnet)) {
      
#line 593
      @throw new_OrgSpongycastleJceProviderPKIXNameConstraintValidatorException_initWithNSString_(
#line 594
      @"IP is from an excluded subtree.");
    }
  }
}


#line 609
jboolean OrgSpongycastleJceProviderPKIXNameConstraintValidator_isIPConstrainedWithByteArray_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, IOSByteArray *ip, IOSByteArray *constraint) {
  
#line 611
  jint ipLength = ((IOSByteArray *) nil_chk(ip))->size_;
  
#line 613
  if (ipLength != (JreIntDiv(((IOSByteArray *) nil_chk(constraint))->size_, 2))) {
    
#line 615
    return false;
  }
  
#line 618
  IOSByteArray *subnetMask = [IOSByteArray newArrayWithLength:ipLength];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(constraint, ipLength, subnetMask, 0, ipLength);
  
#line 621
  IOSByteArray *permittedSubnetAddress = [IOSByteArray newArrayWithLength:ipLength];
  
#line 623
  IOSByteArray *ipSubnetAddress = [IOSByteArray newArrayWithLength:ipLength];
  
#line 626
  for (jint i = 0; i < ipLength; i++) {
    
#line 628
    *IOSByteArray_GetRef(permittedSubnetAddress, i) = (jbyte) (IOSByteArray_Get(constraint, i) & IOSByteArray_Get(subnetMask, i));
    *IOSByteArray_GetRef(ipSubnetAddress, i) = (jbyte) (IOSByteArray_Get(ip, i) & IOSByteArray_Get(subnetMask, i));
  }
  
#line 632
  return OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_(permittedSubnetAddress, ipSubnetAddress);
}


#line 635
jboolean OrgSpongycastleJceProviderPKIXNameConstraintValidator_emailIsConstrainedWithNSString_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, NSString *email, NSString *constraint) {
  
#line 637
  NSString *sub = [((NSString *) nil_chk(email)) java_substring:[email java_indexOf:'@'] + 1];
  
#line 639
  if ([((NSString *) nil_chk(constraint)) java_indexOf:'@'] != -1) {
    
#line 641
    if ([email java_equalsIgnoreCase:constraint]) {
      
#line 643
      return true;
    }
    if ([((NSString *) nil_chk(sub)) java_equalsIgnoreCase:[constraint java_substring:1]]) {
      
#line 647
      return true;
    }
  }
  else
#line 651
  if (!([constraint charAtWithInt:0] == '.')) {
    
#line 653
    if ([((NSString *) nil_chk(sub)) java_equalsIgnoreCase:constraint]) {
      
#line 655
      return true;
    }
  }
  else
#line 659
  if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, sub, constraint)) {
    
#line 661
    return true;
  }
  return false;
}


#line 666
jboolean OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, NSString *testDomain, NSString *domain) {
  
#line 668
  NSString *tempDomain = domain;
  if ([((NSString *) nil_chk(tempDomain)) java_hasPrefix:@"."]) {
    
#line 671
    tempDomain = [tempDomain java_substring:1];
  }
  IOSObjectArray *domainParts = OrgSpongycastleUtilStrings_splitWithNSString_withChar_(tempDomain, '.');
  IOSObjectArray *testDomainParts = OrgSpongycastleUtilStrings_splitWithNSString_withChar_(testDomain, '.');
  
#line 676
  if (((IOSObjectArray *) nil_chk(testDomainParts))->size_ <= ((IOSObjectArray *) nil_chk(domainParts))->size_) {
    
#line 678
    return false;
  }
  jint d = testDomainParts->size_ - domainParts->size_;
  for (jint i = -1; i < domainParts->size_; i++) {
    
#line 683
    if (i == -1) {
      
#line 685
      if ([((NSString *) nil_chk(IOSObjectArray_Get(testDomainParts, i + d))) isEqual:@""]) {
        
#line 687
        return false;
      }
    }
    else if (![((NSString *) nil_chk(IOSObjectArray_Get(domainParts, i))) java_equalsIgnoreCase:IOSObjectArray_Get(testDomainParts, i + d)]) {
      
#line 692
      return false;
    }
  }
  return true;
}


#line 698
void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedDNSWithJavaUtilSet_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, NSString *dns) {
  
#line 701
  if (permitted == nil) {
    
#line 703
    return;
  }
  
#line 706
  id<JavaUtilIterator> it = [permitted iterator];
  
#line 708
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    
#line 710
    NSString *str = ((NSString *) cast_chk([it next], [NSString class]));
    
#line 713
    if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, dns, str) || [((NSString *) nil_chk(dns)) java_equalsIgnoreCase:str]) {
      
#line 715
      return;
    }
  }
  if ([((NSString *) nil_chk(dns)) java_length] == 0 && [permitted size] == 0) {
    
#line 720
    return;
  }
  @throw new_OrgSpongycastleJceProviderPKIXNameConstraintValidatorException_initWithNSString_(
#line 723
  @"DNS is not from a permitted subtree.");
}


#line 726
void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedDNSWithJavaUtilSet_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *dns) {
  
#line 729
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    
#line 731
    return;
  }
  
#line 734
  id<JavaUtilIterator> it = [excluded iterator];
  
#line 736
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    
#line 738
    NSString *str = ((NSString *) cast_chk([it next], [NSString class]));
    
#line 741
    if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, dns, str) || [((NSString *) nil_chk(dns)) java_equalsIgnoreCase:str]) {
      
#line 743
      @throw new_OrgSpongycastleJceProviderPKIXNameConstraintValidatorException_initWithNSString_(
#line 744
      @"DNS is from an excluded subtree.");
    }
  }
}


#line 758
void OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionEmailWithNSString_withNSString_withJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, NSString *email1, NSString *email2, id<JavaUtilSet> union_) {
  
#line 761
  if ([((NSString *) nil_chk(email1)) java_indexOf:'@'] != -1) {
    
#line 763
    NSString *_sub = [email1 java_substring:[email1 java_indexOf:'@'] + 1];
    
#line 765
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      
#line 767
      if ([email1 java_equalsIgnoreCase:email2]) {
        
#line 769
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        
#line 773
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else
#line 778
    if ([email2 java_hasPrefix:@"."]) {
      
#line 780
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _sub, email2)) {
        
#line 782
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email2];
      }
      else {
        
#line 786
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else {
      
#line 793
      if ([((NSString *) nil_chk(_sub)) java_equalsIgnoreCase:email2]) {
        
#line 795
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email2];
      }
      else {
        
#line 799
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
  }
  else
#line 805
  if ([email1 java_hasPrefix:@"."]) {
    
#line 807
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      
#line 809
      NSString *_sub = [email2 java_substring:[email1 java_indexOf:'@'] + 1];
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _sub, email1)) {
        
#line 812
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        
#line 816
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else
#line 821
    if ([email2 java_hasPrefix:@"."]) {
      
#line 823
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email1, email2) ||
#line 824
      [email1 java_equalsIgnoreCase:email2]) {
        
#line 826
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email2];
      }
      else if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email2, email1)) {
        
#line 830
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        
#line 834
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else {
      
#line 840
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email2, email1)) {
        
#line 842
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        
#line 846
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
  }
  else {
    
#line 854
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      
#line 856
      NSString *_sub = [email2 java_substring:[email1 java_indexOf:'@'] + 1];
      if ([((NSString *) nil_chk(_sub)) java_equalsIgnoreCase:email1]) {
        
#line 859
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        
#line 863
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else
#line 868
    if ([email2 java_hasPrefix:@"."]) {
      
#line 870
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email1, email2)) {
        
#line 872
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email2];
      }
      else {
        
#line 876
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else {
      
#line 883
      if ([email1 java_equalsIgnoreCase:email2]) {
        
#line 885
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        
#line 889
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
  }
}


#line 896
void OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionURIWithNSString_withNSString_withJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, NSString *email1, NSString *email2, id<JavaUtilSet> union_) {
  
#line 899
  if ([((NSString *) nil_chk(email1)) java_indexOf:'@'] != -1) {
    
#line 901
    NSString *_sub = [email1 java_substring:[email1 java_indexOf:'@'] + 1];
    
#line 903
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      
#line 905
      if ([email1 java_equalsIgnoreCase:email2]) {
        
#line 907
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        
#line 911
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else
#line 916
    if ([email2 java_hasPrefix:@"."]) {
      
#line 918
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _sub, email2)) {
        
#line 920
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email2];
      }
      else {
        
#line 924
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else {
      
#line 931
      if ([((NSString *) nil_chk(_sub)) java_equalsIgnoreCase:email2]) {
        
#line 933
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email2];
      }
      else {
        
#line 937
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
  }
  else
#line 943
  if ([email1 java_hasPrefix:@"."]) {
    
#line 945
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      
#line 947
      NSString *_sub = [email2 java_substring:[email1 java_indexOf:'@'] + 1];
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _sub, email1)) {
        
#line 950
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        
#line 954
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else
#line 959
    if ([email2 java_hasPrefix:@"."]) {
      
#line 961
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email1, email2) ||
#line 962
      [email1 java_equalsIgnoreCase:email2]) {
        
#line 964
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email2];
      }
      else if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email2, email1)) {
        
#line 968
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        
#line 972
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else {
      
#line 978
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email2, email1)) {
        
#line 980
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        
#line 984
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
  }
  else {
    
#line 992
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      
#line 994
      NSString *_sub = [email2 java_substring:[email1 java_indexOf:'@'] + 1];
      if ([((NSString *) nil_chk(_sub)) java_equalsIgnoreCase:email1]) {
        
#line 997
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        
#line 1001
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else
#line 1006
    if ([email2 java_hasPrefix:@"."]) {
      
#line 1008
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email1, email2)) {
        
#line 1010
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email2];
      }
      else {
        
#line 1014
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
    else {
      
#line 1021
      if ([email1 java_equalsIgnoreCase:email2]) {
        
#line 1023
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
      }
      else {
        
#line 1027
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:email1];
        [union_ addWithId:email2];
      }
    }
  }
}


#line 1034
id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectDNSWithJavaUtilSet_withJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> dnss) {
  
#line 1036
  id<JavaUtilSet> intersect = new_JavaUtilHashSet_init();
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(dnss)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 1039
    NSString *dns = OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractNameAsStringWithOrgSpongycastleAsn1X509GeneralName_(self, [((OrgSpongycastleAsn1X509GeneralSubtree *) nil_chk(((OrgSpongycastleAsn1X509GeneralSubtree *) cast_chk([it next], [OrgSpongycastleAsn1X509GeneralSubtree class])))) getBase]);
    
#line 1041
    if (permitted == nil) {
      
#line 1043
      if (dns != nil) {
        
#line 1045
        [intersect addWithId:dns];
      }
    }
    else {
      
#line 1050
      id<JavaUtilIterator> _iter = [permitted iterator];
      while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
        
#line 1053
        NSString *_permitted = (NSString *) cast_chk([_iter next], [NSString class]);
        
#line 1055
        if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _permitted, dns)) {
          
#line 1057
          [intersect addWithId:_permitted];
        }
        else if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, dns, _permitted)) {
          
#line 1061
          [intersect addWithId:dns];
        }
      }
    }
  }
  
#line 1067
  return intersect;
}


#line 1118
void OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectEmailWithNSString_withNSString_withJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, NSString *email1, NSString *email2, id<JavaUtilSet> intersect) {
  
#line 1121
  if ([((NSString *) nil_chk(email1)) java_indexOf:'@'] != -1) {
    
#line 1123
    NSString *_sub = [email1 java_substring:[email1 java_indexOf:'@'] + 1];
    
#line 1125
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      
#line 1127
      if ([email1 java_equalsIgnoreCase:email2]) {
        
#line 1129
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
    else
#line 1133
    if ([email2 java_hasPrefix:@"."]) {
      
#line 1135
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _sub, email2)) {
        
#line 1137
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
    else {
      
#line 1143
      if ([((NSString *) nil_chk(_sub)) java_equalsIgnoreCase:email2]) {
        
#line 1145
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
  }
  else
#line 1150
  if ([email1 java_hasPrefix:@"."]) {
    
#line 1152
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      
#line 1154
      NSString *_sub = [email2 java_substring:[email1 java_indexOf:'@'] + 1];
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _sub, email1)) {
        
#line 1157
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email2];
      }
    }
    else
#line 1161
    if ([email2 java_hasPrefix:@"."]) {
      
#line 1163
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email1, email2) ||
#line 1164
      [email1 java_equalsIgnoreCase:email2]) {
        
#line 1166
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
      else if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email2, email1)) {
        
#line 1170
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email2];
      }
    }
    else {
      
#line 1175
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email2, email1)) {
        
#line 1177
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email2];
      }
    }
  }
  else {
    
#line 1184
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      
#line 1186
      NSString *_sub = [email2 java_substring:[email2 java_indexOf:'@'] + 1];
      if ([((NSString *) nil_chk(_sub)) java_equalsIgnoreCase:email1]) {
        
#line 1189
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email2];
      }
    }
    else
#line 1193
    if ([email2 java_hasPrefix:@"."]) {
      
#line 1195
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email1, email2)) {
        
#line 1197
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
    else {
      
#line 1203
      if ([email1 java_equalsIgnoreCase:email2]) {
        
#line 1205
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
  }
}


#line 1211
void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkExcludedURIWithJavaUtilSet_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *uri) {
  
#line 1214
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    
#line 1216
    return;
  }
  
#line 1219
  id<JavaUtilIterator> it = [excluded iterator];
  
#line 1221
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    
#line 1223
    NSString *str = ((NSString *) cast_chk([it next], [NSString class]));
    
#line 1225
    if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_isUriConstrainedWithNSString_withNSString_(self, uri, str)) {
      
#line 1227
      @throw new_OrgSpongycastleJceProviderPKIXNameConstraintValidatorException_initWithNSString_(
#line 1228
      @"URI is from an excluded subtree.");
    }
  }
}


#line 1233
id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectURIWithJavaUtilSet_withJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, id<JavaUtilSet> uris) {
  
#line 1235
  id<JavaUtilSet> intersect = new_JavaUtilHashSet_init();
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(uris)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 1238
    NSString *uri = OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractNameAsStringWithOrgSpongycastleAsn1X509GeneralName_(self, [((OrgSpongycastleAsn1X509GeneralSubtree *) nil_chk(((OrgSpongycastleAsn1X509GeneralSubtree *) cast_chk([it next], [OrgSpongycastleAsn1X509GeneralSubtree class])))) getBase]);
    
#line 1240
    if (permitted == nil) {
      
#line 1242
      if (uri != nil) {
        
#line 1244
        [intersect addWithId:uri];
      }
    }
    else {
      
#line 1249
      id<JavaUtilIterator> _iter = [permitted iterator];
      while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
        
#line 1252
        NSString *_permitted = (NSString *) cast_chk([_iter next], [NSString class]);
        OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectURIWithNSString_withNSString_withJavaUtilSet_(self, _permitted, uri, intersect);
      }
    }
  }
  return intersect;
}


#line 1260
id<JavaUtilSet> OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionURIWithJavaUtilSet_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> excluded, NSString *uri) {
  
#line 1262
  if ([((id<JavaUtilSet>) nil_chk(excluded)) isEmpty]) {
    
#line 1264
    if (uri == nil) {
      
#line 1266
      return excluded;
    }
    [excluded addWithId:uri];
    
#line 1270
    return excluded;
  }
  else {
    
#line 1274
    id<JavaUtilSet> union_ = new_JavaUtilHashSet_init();
    
#line 1276
    id<JavaUtilIterator> _iter = [excluded iterator];
    while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
      
#line 1279
      NSString *_excluded = (NSString *) cast_chk([_iter next], [NSString class]);
      
#line 1281
      OrgSpongycastleJceProviderPKIXNameConstraintValidator_unionURIWithNSString_withNSString_withJavaUtilSet_(self, _excluded, uri, union_);
    }
    
#line 1284
    return union_;
  }
}


#line 1288
void OrgSpongycastleJceProviderPKIXNameConstraintValidator_intersectURIWithNSString_withNSString_withJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, NSString *email1, NSString *email2, id<JavaUtilSet> intersect) {
  
#line 1291
  if ([((NSString *) nil_chk(email1)) java_indexOf:'@'] != -1) {
    
#line 1293
    NSString *_sub = [email1 java_substring:[email1 java_indexOf:'@'] + 1];
    
#line 1295
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      
#line 1297
      if ([email1 java_equalsIgnoreCase:email2]) {
        
#line 1299
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
    else
#line 1303
    if ([email2 java_hasPrefix:@"."]) {
      
#line 1305
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _sub, email2)) {
        
#line 1307
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
    else {
      
#line 1313
      if ([((NSString *) nil_chk(_sub)) java_equalsIgnoreCase:email2]) {
        
#line 1315
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
  }
  else
#line 1320
  if ([email1 java_hasPrefix:@"."]) {
    
#line 1322
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      
#line 1324
      NSString *_sub = [email2 java_substring:[email1 java_indexOf:'@'] + 1];
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, _sub, email1)) {
        
#line 1327
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email2];
      }
    }
    else
#line 1331
    if ([email2 java_hasPrefix:@"."]) {
      
#line 1333
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email1, email2) ||
#line 1334
      [email1 java_equalsIgnoreCase:email2]) {
        
#line 1336
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
      else if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email2, email1)) {
        
#line 1340
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email2];
      }
    }
    else {
      
#line 1345
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email2, email1)) {
        
#line 1347
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email2];
      }
    }
  }
  else {
    
#line 1354
    if ([((NSString *) nil_chk(email2)) java_indexOf:'@'] != -1) {
      
#line 1356
      NSString *_sub = [email2 java_substring:[email2 java_indexOf:'@'] + 1];
      if ([((NSString *) nil_chk(_sub)) java_equalsIgnoreCase:email1]) {
        
#line 1359
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email2];
      }
    }
    else
#line 1363
    if ([email2 java_hasPrefix:@"."]) {
      
#line 1365
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, email1, email2)) {
        
#line 1367
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
    else {
      
#line 1373
      if ([email1 java_equalsIgnoreCase:email2]) {
        
#line 1375
        [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:email1];
      }
    }
  }
}


#line 1381
void OrgSpongycastleJceProviderPKIXNameConstraintValidator_checkPermittedURIWithJavaUtilSet_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> permitted, NSString *uri) {
  
#line 1384
  if (permitted == nil) {
    
#line 1386
    return;
  }
  
#line 1389
  id<JavaUtilIterator> it = [permitted iterator];
  
#line 1391
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    
#line 1393
    NSString *str = ((NSString *) cast_chk([it next], [NSString class]));
    
#line 1395
    if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_isUriConstrainedWithNSString_withNSString_(self, uri, str)) {
      
#line 1397
      return;
    }
  }
  if ([((NSString *) nil_chk(uri)) java_length] == 0 && [permitted size] == 0) {
    
#line 1402
    return;
  }
  @throw new_OrgSpongycastleJceProviderPKIXNameConstraintValidatorException_initWithNSString_(
#line 1405
  @"URI is not from a permitted subtree.");
}


#line 1408
jboolean OrgSpongycastleJceProviderPKIXNameConstraintValidator_isUriConstrainedWithNSString_withNSString_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, NSString *uri, NSString *constraint) {
  
#line 1410
  NSString *host = OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractHostFromURLWithNSString_(uri);
  
#line 1412
  if (![((NSString *) nil_chk(constraint)) java_hasPrefix:@"."]) {
    
#line 1414
    if ([((NSString *) nil_chk(host)) java_equalsIgnoreCase:constraint]) {
      
#line 1416
      return true;
    }
  }
  else
#line 1421
  if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_withinDomainWithNSString_withNSString_(self, host, constraint)) {
    
#line 1423
    return true;
  }
  
#line 1426
  return false;
}


#line 1429
NSString *OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractHostFromURLWithNSString_(NSString *url) {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_initialize();
  
#line 1433
  NSString *sub = [((NSString *) nil_chk(url)) java_substring:[url java_indexOf:':'] + 1];
  
#line 1435
  if ([((NSString *) nil_chk(sub)) java_indexOfString:@"//"] != -1) {
    
#line 1437
    sub = [sub java_substring:[sub java_indexOfString:@"//"] + 2];
  }
  
#line 1440
  if ([((NSString *) nil_chk(sub)) java_lastIndexOf:':'] != -1) {
    
#line 1442
    sub = [sub java_substring:0 endIndex:[sub java_lastIndexOf:':']];
  }
  
#line 1445
  sub = [((NSString *) nil_chk(sub)) java_substring:[sub java_indexOf:':'] + 1];
  sub = [((NSString *) nil_chk(sub)) java_substring:[sub java_indexOf:'@'] + 1];
  
#line 1448
  if ([((NSString *) nil_chk(sub)) java_indexOf:'/'] != -1) {
    
#line 1450
    sub = [sub java_substring:0 endIndex:[sub java_indexOf:'/']];
  }
  return sub;
}


#line 1583
NSString *OrgSpongycastleJceProviderPKIXNameConstraintValidator_extractNameAsStringWithOrgSpongycastleAsn1X509GeneralName_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, OrgSpongycastleAsn1X509GeneralName *name) {
  
#line 1585
  return [((OrgSpongycastleAsn1DERIA5String *) nil_chk(OrgSpongycastleAsn1DERIA5String_getInstanceWithId_([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(name)) getName]))) getString];
}


#line 1650
IOSByteArray *OrgSpongycastleJceProviderPKIXNameConstraintValidator_maxWithByteArray_withByteArray_(IOSByteArray *ip1, IOSByteArray *ip2) {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_initialize();
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(ip1))->size_; i++) {
    
#line 1654
    if ((IOSByteArray_Get(ip1, i) & (jint) 0xFFFF) > (IOSByteArray_Get(nil_chk(ip2), i) & (jint) 0xFFFF)) {
      
#line 1656
      return ip1;
    }
  }
  return ip2;
}


#line 1669
IOSByteArray *OrgSpongycastleJceProviderPKIXNameConstraintValidator_minWithByteArray_withByteArray_(IOSByteArray *ip1, IOSByteArray *ip2) {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_initialize();
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(ip1))->size_; i++) {
    
#line 1673
    if ((IOSByteArray_Get(ip1, i) & (jint) 0xFFFF) < (IOSByteArray_Get(nil_chk(ip2), i) & (jint) 0xFFFF)) {
      
#line 1675
      return ip1;
    }
  }
  return ip2;
}


#line 1690
jint OrgSpongycastleJceProviderPKIXNameConstraintValidator_compareToWithByteArray_withByteArray_(IOSByteArray *ip1, IOSByteArray *ip2) {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_initialize();
  if (OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_(ip1, ip2)) {
    
#line 1694
    return 0;
  }
  if (OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator_maxWithByteArray_withByteArray_(ip1, ip2), ip1)) {
    
#line 1698
    return 1;
  }
  return -1;
}


#line 1711
IOSByteArray *OrgSpongycastleJceProviderPKIXNameConstraintValidator_or__WithByteArray_withByteArray_(IOSByteArray *ip1, IOSByteArray *ip2) {
  OrgSpongycastleJceProviderPKIXNameConstraintValidator_initialize();
  IOSByteArray *temp = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(ip1))->size_];
  for (jint i = 0; i < ip1->size_; i++) {
    
#line 1716
    *IOSByteArray_GetRef(temp, i) = (jbyte) (IOSByteArray_Get(ip1, i) | IOSByteArray_Get(nil_chk(ip2), i));
  }
  return temp;
}


#line 1735
jint OrgSpongycastleJceProviderPKIXNameConstraintValidator_hashCollectionWithJavaUtilCollection_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilCollection> coll) {
  
#line 1737
  if (coll == nil) {
    
#line 1739
    return 0;
  }
  jint hash_ = 0;
  id<JavaUtilIterator> it1 = [coll iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it1)) hasNext]) {
    
#line 1745
    id o = [it1 next];
    if ([o isKindOfClass:[IOSByteArray class]]) {
      
#line 1748
      hash_ += OrgSpongycastleUtilArrays_hashCodeWithByteArray_((IOSByteArray *) cast_chk(o, [IOSByteArray class]));
    }
    else {
      
#line 1752
      hash_ += ((jint) [nil_chk(o) hash]);
    }
  }
  return hash_;
}


#line 1777
jboolean OrgSpongycastleJceProviderPKIXNameConstraintValidator_collectionsAreEqualWithJavaUtilCollection_withJavaUtilCollection_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilCollection> coll1, id<JavaUtilCollection> coll2) {
  
#line 1779
  if (JreObjectEqualsEquals(coll1, coll2)) {
    
#line 1781
    return true;
  }
  if (coll1 == nil || coll2 == nil) {
    
#line 1785
    return false;
  }
  if ([coll1 size] != [coll2 size]) {
    
#line 1789
    return false;
  }
  id<JavaUtilIterator> it1 = [coll1 iterator];
  
#line 1793
  while ([((id<JavaUtilIterator>) nil_chk(it1)) hasNext]) {
    
#line 1795
    id a = [it1 next];
    id<JavaUtilIterator> it2 = [coll2 iterator];
    jboolean found = false;
    while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
      
#line 1800
      id b = [it2 next];
      if (OrgSpongycastleJceProviderPKIXNameConstraintValidator_equalsWithId_withId_(self, a, b)) {
        
#line 1803
        found = true;
        break;
      }
    }
    if (!found) {
      
#line 1809
      return false;
    }
  }
  return true;
}


#line 1815
jboolean OrgSpongycastleJceProviderPKIXNameConstraintValidator_equalsWithId_withId_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id o1, id o2) {
  
#line 1817
  if (JreObjectEqualsEquals(o1, o2)) {
    
#line 1819
    return true;
  }
  if (o1 == nil || o2 == nil) {
    
#line 1823
    return false;
  }
  if ([o1 isKindOfClass:[IOSByteArray class]] && [o2 isKindOfClass:[IOSByteArray class]]) {
    
#line 1827
    return OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_((IOSByteArray *) cast_chk(o1, [IOSByteArray class]), (IOSByteArray *) cast_chk(o2, [IOSByteArray class]));
  }
  else {
    
#line 1831
    return [o1 isEqual:o2];
  }
}


#line 1841
NSString *OrgSpongycastleJceProviderPKIXNameConstraintValidator_stringifyIPWithByteArray_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, IOSByteArray *ip) {
  
#line 1843
  NSString *temp = @"";
  for (jint i = 0; i < JreIntDiv(((IOSByteArray *) nil_chk(ip))->size_, 2); i++) {
    
#line 1846
    (void) JreStrAppendStrong(&temp, "$C", JavaLangInteger_toStringWithInt_(IOSByteArray_Get(ip, i) & (jint) 0x00FF), '.');
  }
  temp = [temp java_substring:0 endIndex:[temp java_length] - 1];
  (void) JreStrAppendStrong(&temp, "$", @"/");
  for (jint i = JreIntDiv(ip->size_, 2); i < ip->size_; i++) {
    
#line 1852
    (void) JreStrAppendStrong(&temp, "$C", JavaLangInteger_toStringWithInt_(IOSByteArray_Get(ip, i) & (jint) 0x00FF), '.');
  }
  temp = [((NSString *) nil_chk(temp)) java_substring:0 endIndex:[temp java_length] - 1];
  return temp;
}


#line 1858
NSString *OrgSpongycastleJceProviderPKIXNameConstraintValidator_stringifyIPCollectionWithJavaUtilSet_(OrgSpongycastleJceProviderPKIXNameConstraintValidator *self, id<JavaUtilSet> ips) {
  
#line 1860
  NSString *temp = @"";
  (void) JreStrAppendStrong(&temp, "$", @"[");
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(ips)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 1864
    (void) JreStrAppendStrong(&temp, "$C", OrgSpongycastleJceProviderPKIXNameConstraintValidator_stringifyIPWithByteArray_(self, (IOSByteArray *) cast_chk([it next], [IOSByteArray class])), ',');
  }
  if ([temp java_length] > 1) {
    
#line 1868
    temp = [temp java_substring:0 endIndex:[temp java_length] - 1];
  }
  (void) JreStrAppendStrong(&temp, "$", @"]");
  return temp;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleJceProviderPKIXNameConstraintValidator)
