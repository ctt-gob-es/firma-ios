//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/TrueTypeFont.java
//

#include "BaseFont.h"
#include "Document.h"
#include "DocumentException.h"
#include "ExceptionConverter.h"
#include "GlyphList.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IntHashtable.h"
#include "J2ObjC_source.h"
#include "PdfArray.h"
#include "PdfDictionary.h"
#include "PdfEncodings.h"
#include "PdfIndirectObject.h"
#include "PdfIndirectReference.h"
#include "PdfName.h"
#include "PdfNumber.h"
#include "PdfObject.h"
#include "PdfRectangle.h"
#include "PdfStream.h"
#include "PdfWriter.h"
#include "RandomAccessFileOrArray.h"
#include "TrueTypeFont.h"
#include "TrueTypeFontSubSet.h"
#include "java/io/File.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#if !__has_feature(objc_arc)
#error "TrueTypeFont must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfTrueTypeFont ()

- (void)readBbox;

@end

__attribute__((unused)) static void ComAowagieTextPdfTrueTypeFont_readBbox(ComAowagieTextPdfTrueTypeFont *self);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/TrueTypeFont.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfTrueTypeFont)

IOSObjectArray *ComAowagieTextPdfTrueTypeFont_codePages;


#line 67
@implementation ComAowagieTextPdfTrueTypeFont


#line 346
- (instancetype)initPackagePrivate {
  ComAowagieTextPdfTrueTypeFont_initPackagePrivate(self);
  return self;
}


#line 361
- (instancetype)initPackagePrivateWithNSString:(NSString *)ttFile
                                  withNSString:(NSString *)enc
                                   withBoolean:(jboolean)emb
                                 withByteArray:(IOSByteArray *)ttfAfm
                                   withBoolean:(jboolean)justNames
                                   withBoolean:(jboolean)forceRead {
  ComAowagieTextPdfTrueTypeFont_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_withBoolean_(self, ttFile, enc, emb, ttfAfm, justNames, forceRead);
  return self;
}


#line 397
+ (NSString *)getTTCNameWithNSString:(NSString *)name {
  return ComAowagieTextPdfTrueTypeFont_getTTCNameWithNSString_(name);
}


#line 412
- (void)fillTables {
  IOSIntArray *table_location;
  table_location = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tables_)) getWithId:@"head"], [IOSIntArray class]);
  if (table_location == nil) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$$", @"Table 'head' does not exist in ", self->fileName_, self->style_));
  }
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(table_location, 0) + 16];
  ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->flags_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) skipBytesWithInt:16];
  ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->xMin_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->yMin_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->xMax_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->yMax_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->macStyle_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  
#line 428
  table_location = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tables_)) getWithId:@"hhea"], [IOSIntArray class]);
  if (table_location == nil) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$$", @"Table 'hhea' does not exist ", self->fileName_, self->style_));
  }
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(table_location, 0) + 4];
  ((ComAowagieTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(self->hhea_))->Ascender_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(self->hhea_))->Descender_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(self->hhea_))->LineGap_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(self->hhea_))->advanceWidthMax_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  ((ComAowagieTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(self->hhea_))->minLeftSideBearing_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(self->hhea_))->minRightSideBearing_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(self->hhea_))->xMaxExtent_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(self->hhea_))->caretSlopeRise_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(self->hhea_))->caretSlopeRun_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) skipBytesWithInt:12];
  ((ComAowagieTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(self->hhea_))->numberOfHMetrics_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  
#line 445
  table_location = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tables_)) getWithId:@"OS/2"], [IOSIntArray class]);
  if (table_location == nil) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$$", @"Table 'OS/2' does not exist in ", self->fileName_, self->style_));
  }
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(table_location, 0)];
  jint version_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->xAvgCharWidth_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->usWeightClass_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->usWidthClass_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->fsType_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->ySubscriptXSize_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->ySubscriptYSize_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->ySubscriptXOffset_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->ySubscriptYOffset_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->ySuperscriptXSize_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->ySuperscriptYSize_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->ySuperscriptXOffset_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->ySuperscriptYOffset_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->yStrikeoutSize_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->yStrikeoutPosition_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->sFamilyClass_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readFullyWithByteArray:((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->panose_];
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) skipBytesWithInt:16];
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readFullyWithByteArray:((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->achVendID_];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->fsSelection_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->usFirstCharIndex_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->usLastCharIndex_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->sTypoAscender_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->sTypoDescender_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  if (((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->sTypoDescender_ > 0) {
    self->os_2_->sTypoDescender_ = (jshort) -self->os_2_->sTypoDescender_;
  }
  self->os_2_->sTypoLineGap_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->usWinAscent_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->usWinDescent_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->ulCodePageRange1_ = 0;
  self->os_2_->ulCodePageRange2_ = 0;
  if (version_ > 0) {
    self->os_2_->ulCodePageRange1_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readInt];
    ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->ulCodePageRange2_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readInt];
  }
  if (version_ > 1) {
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) skipBytesWithInt:2];
    ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->sCapHeight_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  }
  else {
    
#line 490
    ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->sCapHeight_ = JreFpToInt((0.7 * ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_));
  }
  
#line 493
  table_location = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tables_)) getWithId:@"post"], [IOSIntArray class]);
  if (table_location == nil) {
    self->italicAngle_ = -JavaLangMath_atan2WithDouble_withDouble_(((ComAowagieTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(self->hhea_))->caretSlopeRun_, self->hhea_->caretSlopeRise_) * 180 / JavaLangMath_PI;
    return;
  }
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(table_location, 0) + 4];
  jshort mantissa = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  jint fraction = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  self->italicAngle_ = mantissa + fraction / 16384.0;
  self->underlinePosition_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  self->underlineThickness_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort];
  self->isFixedPitch_ = ([((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readInt] != 0);
}

- (NSString *)getBaseFont {
  IOSIntArray *table_location;
  table_location = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tables_)) getWithId:@"name"], [IOSIntArray class]);
  if (table_location == nil) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$$", @"Table 'name' does not exist in ", self->fileName_, self->style_));
  }
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(table_location, 0) + 2];
  jint numRecords = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  jint startOfStorage = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  for (jint k = 0; k < numRecords; ++k) {
    jint platformID = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint platformEncodingID = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint languageID = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint nameID = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint length = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint offset = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    if (nameID == 6) {
      [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(table_location, 0) + startOfStorage + offset];
      if (platformID == 0 || platformID == 3) {
        return [self readUnicodeStringWithInt:length];
      }
      else {
        
#line 534
        return [self readStandardStringWithInt:length];
      }
    }
  }
  JavaIoFile *file = new_JavaIoFile_initWithNSString_(self->fileName_);
  return [((NSString *) nil_chk([file getName])) java_replace:' ' withChar:'-'];
}


#line 548
- (IOSObjectArray *)getNamesWithInt:(jint)id_ {
  IOSIntArray *table_location;
  table_location = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tables_)) getWithId:@"name"], [IOSIntArray class]);
  if (table_location == nil) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$$", @"Table 'name' does not exist in ", self->fileName_, self->style_));
  }
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(table_location, 0) + 2];
  jint numRecords = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  jint startOfStorage = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  JavaUtilArrayList *names = new_JavaUtilArrayList_init();
  for (jint k = 0; k < numRecords; ++k) {
    jint platformID = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint platformEncodingID = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint languageID = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint nameID = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint length = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint offset = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    if (nameID == id_) {
      jint pos = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) getFilePointer];
      [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(table_location, 0) + startOfStorage + offset];
      NSString *name;
      if (platformID == 0 || platformID == 3 || (platformID == 2 && platformEncodingID == 1)) {
        name = [self readUnicodeStringWithInt:length];
      }
      else {
        name = [self readStandardStringWithInt:length];
      }
      [names addWithId:[IOSObjectArray newArrayWithObjects:(id[]){ NSString_java_valueOfInt_(platformID), NSString_java_valueOfInt_(
#line 576
      platformEncodingID), NSString_java_valueOfInt_(languageID), name } count:4 type:NSString_class_()]];
      [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:pos];
    }
  }
  IOSObjectArray *thisName = [IOSObjectArray newArrayWithLength:[names size] type:IOSClass_arrayType(NSString_class_(), 1)];
  for (jint k = 0; k < [names size]; ++k) {
    (void) IOSObjectArray_Set(thisName, k, (IOSObjectArray *) cast_check([names getWithInt:k], IOSClass_arrayType(NSString_class_(), 1)));
  }
  return thisName;
}


#line 592
- (IOSObjectArray *)getAllNames {
  IOSIntArray *table_location;
  table_location = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tables_)) getWithId:@"name"], [IOSIntArray class]);
  if (table_location == nil) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$$", @"Table 'name' does not exist in ", self->fileName_, self->style_));
  }
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(table_location, 0) + 2];
  jint numRecords = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  jint startOfStorage = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  JavaUtilArrayList *names = new_JavaUtilArrayList_init();
  for (jint k = 0; k < numRecords; ++k) {
    jint platformID = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint platformEncodingID = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint languageID = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint nameID = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint length = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint offset = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint pos = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) getFilePointer];
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(table_location, 0) + startOfStorage + offset];
    NSString *name;
    if (platformID == 0 || platformID == 3 || (platformID == 2 && platformEncodingID == 1)) {
      name = [self readUnicodeStringWithInt:length];
    }
    else {
      name = [self readStandardStringWithInt:length];
    }
    [names addWithId:[IOSObjectArray newArrayWithObjects:(id[]){ NSString_java_valueOfInt_(nameID), NSString_java_valueOfInt_(platformID), NSString_java_valueOfInt_(
#line 619
    platformEncodingID), NSString_java_valueOfInt_(languageID), name } count:5 type:NSString_class_()]];
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:pos];
  }
  IOSObjectArray *thisName = [IOSObjectArray newArrayWithLength:[names size] type:IOSClass_arrayType(NSString_class_(), 1)];
  for (jint k = 0; k < [names size]; ++k) {
    (void) IOSObjectArray_Set(thisName, k, (IOSObjectArray *) cast_check([names getWithInt:k], IOSClass_arrayType(NSString_class_(), 1)));
  }
  return thisName;
}


#line 629
- (void)checkCff {
  IOSIntArray *table_location;
  table_location = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tables_)) getWithId:@"CFF "], [IOSIntArray class]);
  if (table_location != nil) {
    self->cff_ = true;
    self->cffOffset_ = IOSIntArray_Get(table_location, 0);
    self->cffLength_ = IOSIntArray_Get(table_location, 1);
  }
}


#line 646
- (void)processWithByteArray:(IOSByteArray *)ttfAfm
                 withBoolean:(jboolean)preload {
  
#line 647
  self->tables_ = new_JavaUtilHashMap_init();
  
#line 649
  @try {
    if (ttfAfm == nil) {
      self->rf_ = new_ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_withBoolean_withBoolean_(self->fileName_, preload, JreLoadStatic(ComAowagieTextDocument, plainRandomAccess));
    }
    else {
      
#line 653
      self->rf_ = new_ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_(ttfAfm);
    }
    if ([((NSString *) nil_chk(self->ttcIndex_)) java_length] > 0) {
      jint dirIdx = JavaLangInteger_parseIntWithNSString_(self->ttcIndex_);
      if (dirIdx < 0) {
        @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$$", @"The font index for ", self->fileName_, @" must be positive."));
      }
      NSString *mainTag = [self readStandardStringWithInt:4];
      if (![((NSString *) nil_chk(mainTag)) isEqual:@"ttcf"]) {
        @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$", self->fileName_, @" is not a valid TTC file."));
      }
      [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) skipBytesWithInt:4];
      jint dirCount = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readInt];
      if (dirIdx >= dirCount) {
        @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$$I$IC", @"The font index for ", self->fileName_, @" must be between 0 and ", (dirCount - 1), @". It was ", dirIdx, '.'));
      }
      [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) skipBytesWithInt:dirIdx * 4];
      self->directoryOffset_ = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readInt];
    }
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:self->directoryOffset_];
    jint ttId = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readInt];
    if (ttId != (jint) 0x00010000 && ttId != (jint) 0x4F54544F) {
      @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$", self->fileName_, @" is not a valid TTF or OTF file."));
    }
    jint num_tables = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) skipBytesWithInt:6];
    for (jint k = 0; k < num_tables; ++k) {
      NSString *tag = [self readStandardStringWithInt:4];
      [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) skipBytesWithInt:4];
      IOSIntArray *table_location = [IOSIntArray newArrayWithLength:2];
      *IOSIntArray_GetRef(table_location, 0) = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readInt];
      *IOSIntArray_GetRef(table_location, 1) = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readInt];
      (void) [((JavaUtilHashMap *) nil_chk(self->tables_)) putWithId:tag withId:table_location];
    }
    [self checkCff];
    self->fontName_ = [self getBaseFont];
    self->fullName_ = [self getNamesWithInt:4];
    self->familyName_ = [self getNamesWithInt:1];
    self->allNameEntries_ = [self getAllNames];
    if (!self->justNames_) {
      [self fillTables];
      [self readGlyphWidths];
      [self readCMaps];
      [self readKerning];
      ComAowagieTextPdfTrueTypeFont_readBbox(self);
      self->GlyphWidths_ = nil;
    }
  }
  @finally {
    if (self->rf_ != nil) {
      [self->rf_ close];
      if (!self->embedded_) {
        self->rf_ = nil;
      }
    }
  }
}


#line 717
- (NSString *)readStandardStringWithInt:(jint)length {
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:length];
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readFullyWithByteArray:buf];
  @try {
    return [NSString java_stringWithBytes:buf charsetName:ComAowagieTextPdfBaseFont_WINANSI];
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 735
- (NSString *)readUnicodeStringWithInt:(jint)length {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  length /= 2;
  for (jint k = 0; k < length; ++k) {
    (void) [buf appendWithChar:[((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readChar]];
  }
  return [buf description];
}


#line 749
- (void)readGlyphWidths {
  IOSIntArray *table_location;
  table_location = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tables_)) getWithId:@"hmtx"], [IOSIntArray class]);
  if (table_location == nil) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$$", @"Table 'hmtx' does not exist in ", self->fileName_, self->style_));
  }
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(table_location, 0)];
  self->GlyphWidths_ = [IOSIntArray newArrayWithLength:((ComAowagieTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(self->hhea_))->numberOfHMetrics_];
  for (jint k = 0; k < ((ComAowagieTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(self->hhea_))->numberOfHMetrics_; ++k) {
    *IOSIntArray_GetRef(nil_chk(self->GlyphWidths_), k) = JreIntDiv([((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort] * 1000, ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_);
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  }
}


#line 767
- (jint)getGlyphWidthWithInt:(jint)glyph {
  if (glyph >= ((IOSIntArray *) nil_chk(self->GlyphWidths_))->size_) {
    glyph = self->GlyphWidths_->size_ - 1;
  }
  return IOSIntArray_Get(self->GlyphWidths_, glyph);
}

- (void)readBbox {
  ComAowagieTextPdfTrueTypeFont_readBbox(self);
}


#line 826
- (void)readCMaps {
  IOSIntArray *table_location;
  table_location = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tables_)) getWithId:@"cmap"], [IOSIntArray class]);
  if (table_location == nil) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$$", @"Table 'cmap' does not exist in ", self->fileName_, self->style_));
  }
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(table_location, 0)];
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) skipBytesWithInt:2];
  jint num_tables = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  self->fontSpecific_ = false;
  jint map10 = 0;
  jint map31 = 0;
  jint map30 = 0;
  jint mapExt = 0;
  for (jint k = 0; k < num_tables; ++k) {
    jint platId = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint platSpecId = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint offset = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readInt];
    if (platId == 3 && platSpecId == 0) {
      self->fontSpecific_ = true;
      map30 = offset;
    }
    else if (platId == 3 && platSpecId == 1) {
      map31 = offset;
    }
    else if (platId == 3 && platSpecId == 10) {
      mapExt = offset;
    }
    if (platId == 1 && platSpecId == 0) {
      map10 = offset;
    }
  }
  if (map10 > 0) {
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(table_location, 0) + map10];
    jint format = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    switch (format) {
      case 0:
      self->cmap10_ = [self readFormat0];
      break;
      case 4:
      self->cmap10_ = [self readFormat4];
      break;
      case 6:
      self->cmap10_ = [self readFormat6];
      break;
    }
  }
  if (map31 > 0) {
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(table_location, 0) + map31];
    jint format = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    if (format == 4) {
      self->cmap31_ = [self readFormat4];
    }
  }
  if (map30 > 0) {
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(table_location, 0) + map30];
    jint format = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    if (format == 4) {
      self->cmap10_ = [self readFormat4];
    }
  }
  if (mapExt > 0) {
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(table_location, 0) + mapExt];
    jint format = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    switch (format) {
      case 0:
      self->cmapExt_ = [self readFormat0];
      break;
      case 4:
      self->cmapExt_ = [self readFormat4];
      break;
      case 6:
      self->cmapExt_ = [self readFormat6];
      break;
      case 12:
      self->cmapExt_ = [self readFormat12];
      break;
    }
  }
}

- (JavaUtilHashMap *)readFormat12 {
  JavaUtilHashMap *h = new_JavaUtilHashMap_init();
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) skipBytesWithInt:2];
  jint table_lenght = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readInt];
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) skipBytesWithInt:4];
  jint nGroups = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readInt];
  for (jint k = 0; k < nGroups; k++) {
    jint startCharCode = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readInt];
    jint endCharCode = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readInt];
    jint startGlyphID = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readInt];
    for (jint i = startCharCode; i <= endCharCode; i++) {
      IOSIntArray *r = [IOSIntArray newArrayWithLength:2];
      *IOSIntArray_GetRef(r, 0) = startGlyphID;
      *IOSIntArray_GetRef(r, 1) = [self getGlyphWidthWithInt:IOSIntArray_Get(r, 0)];
      (void) [h putWithId:new_JavaLangInteger_initWithInt_(i) withId:r];
      startGlyphID++;
    }
  }
  return h;
}


#line 933
- (JavaUtilHashMap *)readFormat0 {
  JavaUtilHashMap *h = new_JavaUtilHashMap_init();
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) skipBytesWithInt:4];
  for (jint k = 0; k < 256; ++k) {
    IOSIntArray *r = [IOSIntArray newArrayWithLength:2];
    *IOSIntArray_GetRef(r, 0) = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedByte];
    *IOSIntArray_GetRef(r, 1) = [self getGlyphWidthWithInt:IOSIntArray_Get(r, 0)];
    (void) [h putWithId:new_JavaLangInteger_initWithInt_(k) withId:r];
  }
  return h;
}


#line 950
- (JavaUtilHashMap *)readFormat4 {
  JavaUtilHashMap *h = new_JavaUtilHashMap_init();
  jint table_lenght = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) skipBytesWithInt:2];
  jint segCount = JreIntDiv([((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort], 2);
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) skipBytesWithInt:6];
  IOSIntArray *endCount = [IOSIntArray newArrayWithLength:segCount];
  for (jint k = 0; k < segCount; ++k) {
    *IOSIntArray_GetRef(endCount, k) = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  }
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) skipBytesWithInt:2];
  IOSIntArray *startCount = [IOSIntArray newArrayWithLength:segCount];
  for (jint k = 0; k < segCount; ++k) {
    *IOSIntArray_GetRef(startCount, k) = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  }
  IOSIntArray *idDelta = [IOSIntArray newArrayWithLength:segCount];
  for (jint k = 0; k < segCount; ++k) {
    *IOSIntArray_GetRef(idDelta, k) = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  }
  IOSIntArray *idRO = [IOSIntArray newArrayWithLength:segCount];
  for (jint k = 0; k < segCount; ++k) {
    *IOSIntArray_GetRef(idRO, k) = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  }
  IOSIntArray *glyphId = [IOSIntArray newArrayWithLength:JreIntDiv(table_lenght, 2) - 8 - segCount * 4];
  for (jint k = 0; k < glyphId->size_; ++k) {
    *IOSIntArray_GetRef(glyphId, k) = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  }
  for (jint k = 0; k < segCount; ++k) {
    jint glyph;
    for (jint j = IOSIntArray_Get(startCount, k); j <= IOSIntArray_Get(endCount, k) && j != (jint) 0xFFFF; ++j) {
      if (IOSIntArray_Get(idRO, k) == 0) {
        glyph = (j + IOSIntArray_Get(idDelta, k)) & (jint) 0xFFFF;
      }
      else {
        jint idx = k + JreIntDiv(IOSIntArray_Get(idRO, k), 2) - segCount + j - IOSIntArray_Get(startCount, k);
        if (idx >= glyphId->size_) {
          continue;
        }
        glyph = (IOSIntArray_Get(glyphId, idx) + IOSIntArray_Get(idDelta, k)) & (jint) 0xFFFF;
      }
      IOSIntArray *r = [IOSIntArray newArrayWithLength:2];
      *IOSIntArray_GetRef(r, 0) = glyph;
      *IOSIntArray_GetRef(r, 1) = [self getGlyphWidthWithInt:IOSIntArray_Get(r, 0)];
      (void) [h putWithId:new_JavaLangInteger_initWithInt_(self->fontSpecific_ ? (j & (jint) 0xff00) == (jint) 0xf000 ? j & (jint) 0xff : j : j) withId:r];
    }
  }
  return h;
}


#line 1005
- (JavaUtilHashMap *)readFormat6 {
  JavaUtilHashMap *h = new_JavaUtilHashMap_init();
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) skipBytesWithInt:4];
  jint start_code = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  jint code_count = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  for (jint k = 0; k < code_count; ++k) {
    IOSIntArray *r = [IOSIntArray newArrayWithLength:2];
    *IOSIntArray_GetRef(r, 0) = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    *IOSIntArray_GetRef(r, 1) = [self getGlyphWidthWithInt:IOSIntArray_Get(r, 0)];
    (void) [h putWithId:new_JavaLangInteger_initWithInt_(k + start_code) withId:r];
  }
  return h;
}


#line 1022
- (void)readKerning {
  IOSIntArray *table_location;
  table_location = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tables_)) getWithId:@"kern"], [IOSIntArray class]);
  if (table_location == nil) {
    return;
  }
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(table_location, 0) + 2];
  jint nTables = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
  jint checkpoint = IOSIntArray_Get(table_location, 0) + 4;
  jint length = 0;
  for (jint k = 0; k < nTables; ++k) {
    checkpoint += length;
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:checkpoint];
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) skipBytesWithInt:2];
    length = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    jint coverage = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
    if ((coverage & (jint) 0xfff7) == (jint) 0x0001) {
      jint nPairs = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort];
      [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) skipBytesWithInt:6];
      for (jint j = 0; j < nPairs; ++j) {
        jint pair = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readInt];
        jint value = JreIntDiv([((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort] * 1000, ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_);
        [((ComAowagieTextPdfIntHashtable *) nil_chk(self->kerning_)) putWithInt:pair withInt:value];
      }
    }
  }
}


#line 1055
- (jint)getKerningWithInt:(jint)char1
                  withInt:(jint)char2 {
  IOSIntArray *metrics = [self getMetricsTTWithInt:char1];
  if (metrics == nil) {
    return 0;
  }
  jint c1 = IOSIntArray_Get(metrics, 0);
  metrics = [self getMetricsTTWithInt:char2];
  if (metrics == nil) {
    return 0;
  }
  jint c2 = IOSIntArray_Get(metrics, 0);
  return [((ComAowagieTextPdfIntHashtable *) nil_chk(self->kerning_)) getWithInt:(JreLShift32(c1, 16)) + c2];
}


#line 1076
- (jint)getRawWidthWithInt:(jint)c
              withNSString:(NSString *)name {
  IOSIntArray *metric = [self getMetricsTTWithInt:c];
  if (metric == nil) {
    return 0;
  }
  return IOSIntArray_Get(metric, 1);
}


#line 1091
- (ComAowagieTextPdfPdfDictionary *)getFontDescriptorWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)fontStream
                                                                                  withNSString:(NSString *)subsetPrefix
                                                     withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)cidset {
  
#line 1092
  ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_initWithComAowagieTextPdfPdfName_(JreLoadStatic(ComAowagieTextPdfPdfName, FONTDESCRIPTOR));
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ASCENT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(JreIntDiv(((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->sTypoAscender_ * 1000, ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_))];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CAPHEIGHT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(JreIntDiv(((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->sCapHeight_ * 1000, ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_))];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DESCENT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(JreIntDiv(((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->sTypoDescender_ * 1000, ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_))];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTBBOX) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfRectangle_initWithFloat_withFloat_withFloat_withFloat_(JreIntDiv(
#line 1097
  ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->xMin_ * 1000, self->head_->unitsPerEm_), JreIntDiv(
#line 1098
  self->head_->yMin_ * 1000, self->head_->unitsPerEm_), JreIntDiv(
#line 1099
  self->head_->xMax_ * 1000, self->head_->unitsPerEm_), JreIntDiv(
#line 1100
  self->head_->yMax_ * 1000, self->head_->unitsPerEm_))];
  if (cidset != nil) {
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CIDSET) withComAowagieTextPdfPdfObject:cidset];
  }
  if (self->cff_) {
    if ([((NSString *) nil_chk(self->encoding_)) java_hasPrefix:@"Identity-"]) {
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTNAME) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(JreStrcat("$$C$", subsetPrefix, self->fontName_, '-', self->encoding_))];
    }
    else {
      
#line 1108
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTNAME) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(JreStrcat("$$$", subsetPrefix, self->fontName_, self->style_))];
    }
  }
  else {
    
#line 1111
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTNAME) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(JreStrcat("$$$", subsetPrefix, self->fontName_, self->style_))];
  }
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ITALICANGLE) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithDouble_(self->italicAngle_)];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STEMV) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(80)];
  if (fontStream != nil) {
    if (self->cff_) {
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTFILE3) withComAowagieTextPdfPdfObject:fontStream];
    }
    else {
      
#line 1119
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTFILE2) withComAowagieTextPdfPdfObject:fontStream];
    }
  }
  jint flags = 0;
  if (self->isFixedPitch_) {
    flags |= 1;
  }
  flags |= self->fontSpecific_ ? 4 : 32;
  if ((((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->macStyle_ & 2) != 0) {
    flags |= 64;
  }
  if ((self->head_->macStyle_ & 1) != 0) {
    flags |= 262144;
  }
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FLAGS) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(flags)];
  
#line 1135
  return dic;
}


#line 1146
- (ComAowagieTextPdfPdfDictionary *)getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)fontDescriptor
                                                                                withNSString:(NSString *)subsetPrefix
                                                                                     withInt:(jint)firstChar
                                                                                     withInt:(jint)lastChar
                                                                               withByteArray:(IOSByteArray *)shortTag {
  
#line 1147
  ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_initWithComAowagieTextPdfPdfName_(JreLoadStatic(ComAowagieTextPdfPdfName, FONT));
  if (self->cff_) {
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, TYPE1)];
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BASEFONT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(JreStrcat("$$", self->fontName_, self->style_))];
  }
  else {
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, TRUETYPE)];
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BASEFONT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(JreStrcat("$$$", subsetPrefix, self->fontName_, self->style_))];
  }
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BASEFONT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(JreStrcat("$$$", subsetPrefix, self->fontName_, self->style_))];
  if (!self->fontSpecific_) {
    for (jint k = firstChar; k <= lastChar; ++k) {
      if (![((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(self->differences_), k))) isEqual:ComAowagieTextPdfBaseFont_notdef]) {
        firstChar = k;
        break;
      }
    }
    if ([((NSString *) nil_chk(self->encoding_)) isEqual:@"Cp1252"] || [((NSString *) nil_chk(self->encoding_)) isEqual:@"MacRoman"]) {
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENCODING) withComAowagieTextPdfPdfObject:[((NSString *) nil_chk(self->encoding_)) isEqual:@"Cp1252"] ? JreLoadStatic(ComAowagieTextPdfPdfName, WIN_ANSI_ENCODING) : JreLoadStatic(ComAowagieTextPdfPdfName, MAC_ROMAN_ENCODING)];
    }
    else {
      
#line 1167
      ComAowagieTextPdfPdfDictionary *enc = new_ComAowagieTextPdfPdfDictionary_initWithComAowagieTextPdfPdfName_(JreLoadStatic(ComAowagieTextPdfPdfName, ENCODING));
      ComAowagieTextPdfPdfArray *dif = new_ComAowagieTextPdfPdfArray_init();
      jboolean gap = true;
      for (jint k = firstChar; k <= lastChar; ++k) {
        if (IOSByteArray_Get(nil_chk(shortTag), k) != 0) {
          if (gap) {
            [dif addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(k)];
            gap = false;
          }
          [dif addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(IOSObjectArray_Get(nil_chk(self->differences_), k))];
        }
        else {
          
#line 1178
          gap = true;
        }
      }
      [enc putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DIFFERENCES) withComAowagieTextPdfPdfObject:dif];
      [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ENCODING) withComAowagieTextPdfPdfObject:enc];
    }
  }
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FIRSTCHAR) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(firstChar)];
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LASTCHAR) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(lastChar)];
  ComAowagieTextPdfPdfArray *wd = new_ComAowagieTextPdfPdfArray_init();
  for (jint k = firstChar; k <= lastChar; ++k) {
    if (IOSByteArray_Get(nil_chk(shortTag), k) == 0) {
      [wd addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(0)];
    }
    else {
      
#line 1192
      [wd addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(IOSIntArray_Get(nil_chk(self->widths_), k))];
    }
  }
  [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, WIDTHS) withComAowagieTextPdfPdfObject:wd];
  if (fontDescriptor != nil) {
    [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONTDESCRIPTOR) withComAowagieTextPdfPdfObject:fontDescriptor];
  }
  return dic;
}


#line 1202
- (IOSByteArray *)getFullFont {
  ComAowagieTextPdfRandomAccessFileOrArray *rf2 = nil;
  @try {
    rf2 = new_ComAowagieTextPdfRandomAccessFileOrArray_initWithComAowagieTextPdfRandomAccessFileOrArray_(self->rf_);
    [rf2 reOpen];
    IOSByteArray *b = [IOSByteArray newArrayWithLength:[rf2 length]];
    [rf2 readFullyWithByteArray:b];
    return b;
  }
  @finally {
    @try {
      
#line 1212
      if (rf2 != nil) {
        
#line 1212
        [rf2 close];
      }
    }
    @catch (
#line 1212
    JavaLangException *e) {
    }
  }
}


#line 1216
+ (IOSIntArray *)compactRangesWithJavaUtilArrayList:(JavaUtilArrayList *)ranges {
  return ComAowagieTextPdfTrueTypeFont_compactRangesWithJavaUtilArrayList_(ranges);
}


#line 1245
- (void)addRangeUniWithJavaUtilHashMap:(JavaUtilHashMap *)longTag
                           withBoolean:(jboolean)includeMetrics
                           withBoolean:(jboolean)subsetp {
  
#line 1246
  if (!subsetp && (self->subsetRanges_ != nil || self->directoryOffset_ > 0)) {
    IOSIntArray *rg = self->subsetRanges_ == nil && self->directoryOffset_ > 0 ? [IOSIntArray newArrayWithInts:(jint[]){ 0, (jint) 0xffff } count:2] : ComAowagieTextPdfTrueTypeFont_compactRangesWithJavaUtilArrayList_(self->subsetRanges_);
    JavaUtilHashMap *usemap;
    if (!self->fontSpecific_ && self->cmap31_ != nil) {
      usemap = self->cmap31_;
    }
    else
#line 1251
    if (self->fontSpecific_ && self->cmap10_ != nil) {
      usemap = self->cmap10_;
    }
    else
#line 1253
    if (self->cmap31_ != nil) {
      usemap = self->cmap31_;
    }
    else {
      
#line 1256
      usemap = self->cmap10_;
    }
    for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(usemap)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      id<JavaUtilMap_Entry> e = (id<JavaUtilMap_Entry>) cast_check([it next], JavaUtilMap_Entry_class_());
      IOSIntArray *v = (IOSIntArray *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getValue], [IOSIntArray class]);
      JavaLangInteger *gi = new_JavaLangInteger_initWithInt_(IOSIntArray_Get(nil_chk(v), 0));
      if ([((JavaUtilHashMap *) nil_chk(longTag)) containsKeyWithId:gi]) {
        continue;
      }
      jint c = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([e getKey], [JavaLangInteger class])))) intValue];
      jboolean skip = true;
      for (jint k = 0; k < rg->size_; k += 2) {
        if (c >= IOSIntArray_Get(rg, k) && c <= IOSIntArray_Get(rg, k + 1)) {
          skip = false;
          break;
        }
      }
      if (!skip) {
        (void) [longTag putWithId:gi withId:includeMetrics ? [IOSIntArray newArrayWithInts:(jint[]){ IOSIntArray_Get(v, 0), IOSIntArray_Get(v, 1), c } count:3] : nil];
      }
    }
  }
}


#line 1287
- (void)writeFontWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
      withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)ref
                              withNSObjectArray:(IOSObjectArray *)params {
  
#line 1289
  jint firstChar = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(nil_chk(params), 0), [JavaLangInteger class])))) intValue];
  jint lastChar = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(params, 1), [JavaLangInteger class])))) intValue];
  IOSByteArray *shortTag = (IOSByteArray *) cast_chk(IOSObjectArray_Get(params, 2), [IOSByteArray class]);
  jboolean subsetp = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk(IOSObjectArray_Get(params, 3), [JavaLangBoolean class])))) booleanValue] && self->subset_;
  
#line 1294
  if (!subsetp) {
    firstChar = 0;
    lastChar = ((IOSByteArray *) nil_chk(shortTag))->size_ - 1;
    for (jint k = 0; k < shortTag->size_; ++k) {
      *IOSByteArray_GetRef(shortTag, k) = 1;
    }
  }
  ComAowagieTextPdfPdfIndirectReference *ind_font = nil;
  ComAowagieTextPdfPdfObject *pobj = nil;
  ComAowagieTextPdfPdfIndirectObject *obj = nil;
  NSString *subsetPrefix = @"";
  if (self->embedded_) {
    if (self->cff_) {
      pobj = new_ComAowagieTextPdfBaseFont_StreamFont_initWithByteArray_withNSString_withInt_([self readCffFont], @"Type1C", self->compressionLevel_);
      obj = [((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComAowagieTextPdfPdfObject:pobj];
      ind_font = [((ComAowagieTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
    }
    else {
      if (subsetp) {
        subsetPrefix = ComAowagieTextPdfBaseFont_createSubsetPrefix();
      }
      JavaUtilHashMap *glyphs = new_JavaUtilHashMap_init();
      for (jint k = firstChar; k <= lastChar; ++k) {
        if (IOSByteArray_Get(nil_chk(shortTag), k) != 0) {
          IOSIntArray *metrics = nil;
          if (self->specialMap_ != nil) {
            IOSIntArray *cd = ComAowagieTextPdfGlyphList_nameToUnicodeWithNSString_(IOSObjectArray_Get(nil_chk(self->differences_), k));
            if (cd != nil) {
              metrics = [self getMetricsTTWithInt:IOSIntArray_Get(cd, 0)];
            }
          }
          else {
            if (self->fontSpecific_) {
              metrics = [self getMetricsTTWithInt:k];
            }
            else {
              
#line 1329
              metrics = [self getMetricsTTWithInt:IOSCharArray_Get(nil_chk(self->unicodeDifferences_), k)];
            }
          }
          if (metrics != nil) {
            (void) [glyphs putWithId:new_JavaLangInteger_initWithInt_(IOSIntArray_Get(metrics, 0)) withId:nil];
          }
        }
      }
      [self addRangeUniWithJavaUtilHashMap:glyphs withBoolean:false withBoolean:subsetp];
      IOSByteArray *b = nil;
      if (subsetp || self->directoryOffset_ != 0 || self->subsetRanges_ != nil) {
        ComAowagieTextPdfTrueTypeFontSubSet *sb = new_ComAowagieTextPdfTrueTypeFontSubSet_initPackagePrivateWithNSString_withComAowagieTextPdfRandomAccessFileOrArray_withJavaUtilHashMap_withInt_withBoolean_withBoolean_(self->fileName_, new_ComAowagieTextPdfRandomAccessFileOrArray_initWithComAowagieTextPdfRandomAccessFileOrArray_(self->rf_), glyphs, self->directoryOffset_, true, !subsetp);
        b = [sb process];
      }
      else {
        b = [self getFullFont];
      }
      IOSIntArray *lengths = [IOSIntArray newArrayWithInts:(jint[]){ ((IOSByteArray *) nil_chk(b))->size_ } count:1];
      pobj = new_ComAowagieTextPdfBaseFont_StreamFont_initWithByteArray_withIntArray_withInt_(b, lengths, self->compressionLevel_);
      obj = [((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComAowagieTextPdfPdfObject:pobj];
      ind_font = [((ComAowagieTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
    }
  }
  pobj = [self getFontDescriptorWithComAowagieTextPdfPdfIndirectReference:ind_font withNSString:subsetPrefix withComAowagieTextPdfPdfIndirectReference:nil];
  if (pobj != nil) {
    obj = [((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComAowagieTextPdfPdfObject:pobj];
    ind_font = [((ComAowagieTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
  }
  pobj = [self getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference:ind_font withNSString:subsetPrefix withInt:firstChar withInt:lastChar withByteArray:shortTag];
  (void) [((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComAowagieTextPdfPdfObject:pobj withComAowagieTextPdfPdfIndirectReference:ref];
}


#line 1369
- (IOSByteArray *)readCffFont {
  ComAowagieTextPdfRandomAccessFileOrArray *rf2 = new_ComAowagieTextPdfRandomAccessFileOrArray_initWithComAowagieTextPdfRandomAccessFileOrArray_(self->rf_);
  IOSByteArray *b = [IOSByteArray newArrayWithLength:self->cffLength_];
  @try {
    [rf2 reOpen];
    [rf2 seekWithInt:self->cffOffset_];
    [rf2 readFullyWithByteArray:b];
  }
  @finally {
    @try {
      [rf2 close];
    }
    @catch (JavaLangException *e) {
    }
  }
  
#line 1385
  return b;
}


#line 1395
- (ComAowagieTextPdfPdfStream *)getFullFontStream {
  
#line 1397
  if (self->cff_) {
    return new_ComAowagieTextPdfBaseFont_StreamFont_initWithByteArray_withNSString_withInt_([self readCffFont], @"Type1C", self->compressionLevel_);
  }
  else {
    IOSByteArray *b = [self getFullFont];
    IOSIntArray *lengths = [IOSIntArray newArrayWithInts:(jint[]){ ((IOSByteArray *) nil_chk(b))->size_ } count:1];
    return new_ComAowagieTextPdfBaseFont_StreamFont_initWithByteArray_withIntArray_withInt_(b, lengths, self->compressionLevel_);
  }
}


#line 1414
- (jfloat)getFontDescriptorWithInt:(jint)key
                         withFloat:(jfloat)fontSize {
  switch (key) {
    case ComAowagieTextPdfBaseFont_ASCENT:
    return ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->sTypoAscender_ * fontSize / ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_;
    case ComAowagieTextPdfBaseFont_CAPHEIGHT:
    return ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->sCapHeight_ * fontSize / ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_;
    case ComAowagieTextPdfBaseFont_DESCENT:
    return ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->sTypoDescender_ * fontSize / ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_;
    case ComAowagieTextPdfBaseFont_ITALICANGLE:
    return (jfloat) self->italicAngle_;
    case ComAowagieTextPdfBaseFont_BBOXLLX:
    return fontSize * ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->xMin_ / self->head_->unitsPerEm_;
    case ComAowagieTextPdfBaseFont_BBOXLLY:
    return fontSize * ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->yMin_ / self->head_->unitsPerEm_;
    case ComAowagieTextPdfBaseFont_BBOXURX:
    return fontSize * ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->xMax_ / self->head_->unitsPerEm_;
    case ComAowagieTextPdfBaseFont_BBOXURY:
    return fontSize * ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->yMax_ / self->head_->unitsPerEm_;
    case ComAowagieTextPdfBaseFont_AWT_ASCENT:
    return fontSize * ((ComAowagieTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(self->hhea_))->Ascender_ / ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_;
    case ComAowagieTextPdfBaseFont_AWT_DESCENT:
    return fontSize * ((ComAowagieTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(self->hhea_))->Descender_ / ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_;
    case ComAowagieTextPdfBaseFont_AWT_LEADING:
    return fontSize * ((ComAowagieTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(self->hhea_))->LineGap_ / ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_;
    case ComAowagieTextPdfBaseFont_AWT_MAXADVANCE:
    return fontSize * ((ComAowagieTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(self->hhea_))->advanceWidthMax_ / ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_;
    case ComAowagieTextPdfBaseFont_UNDERLINE_POSITION:
    return (self->underlinePosition_ - JreIntDiv(self->underlineThickness_, 2)) * fontSize / ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_;
    case ComAowagieTextPdfBaseFont_UNDERLINE_THICKNESS:
    return self->underlineThickness_ * fontSize / ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_;
    case ComAowagieTextPdfBaseFont_STRIKETHROUGH_POSITION:
    return ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->yStrikeoutPosition_ * fontSize / ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_;
    case ComAowagieTextPdfBaseFont_STRIKETHROUGH_THICKNESS:
    return ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->yStrikeoutSize_ * fontSize / ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_;
    case ComAowagieTextPdfBaseFont_SUBSCRIPT_SIZE:
    return ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->ySubscriptYSize_ * fontSize / ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_;
    case ComAowagieTextPdfBaseFont_SUBSCRIPT_OFFSET:
    return -((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->ySubscriptYOffset_ * fontSize / ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_;
    case ComAowagieTextPdfBaseFont_SUPERSCRIPT_SIZE:
    return ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->ySuperscriptYSize_ * fontSize / ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_;
    case ComAowagieTextPdfBaseFont_SUPERSCRIPT_OFFSET:
    return ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->ySuperscriptYOffset_ * fontSize / ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_;
  }
  return 0;
}


#line 1465
- (IOSIntArray *)getMetricsTTWithInt:(jint)c {
  if (self->cmapExt_ != nil) {
    return (IOSIntArray *) cast_chk([self->cmapExt_ getWithId:new_JavaLangInteger_initWithInt_(c)], [IOSIntArray class]);
  }
  if (!self->fontSpecific_ && self->cmap31_ != nil) {
    return (IOSIntArray *) cast_chk([self->cmap31_ getWithId:new_JavaLangInteger_initWithInt_(c)], [IOSIntArray class]);
  }
  if (self->fontSpecific_ && self->cmap10_ != nil) {
    return (IOSIntArray *) cast_chk([self->cmap10_ getWithId:new_JavaLangInteger_initWithInt_(c)], [IOSIntArray class]);
  }
  if (self->cmap31_ != nil) {
    return (IOSIntArray *) cast_chk([self->cmap31_ getWithId:new_JavaLangInteger_initWithInt_(c)], [IOSIntArray class]);
  }
  if (self->cmap10_ != nil) {
    return (IOSIntArray *) cast_chk([self->cmap10_ getWithId:new_JavaLangInteger_initWithInt_(c)], [IOSIntArray class]);
  }
  return nil;
}


#line 1487
- (NSString *)getPostscriptFontName {
  
#line 1489
  return self->fontName_;
}


#line 1495
- (IOSObjectArray *)getCodePagesSupported {
  
#line 1497
  jlong cp = (JreLShift64((jlong) ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->ulCodePageRange2_, 32)) + (self->os_2_->ulCodePageRange1_ & (jlong) 0xffffffffLL);
  jint count = 0;
  jlong bit = 1;
  for (jint k = 0; k < 64; ++k) {
    if ((cp & bit) != 0 && IOSObjectArray_Get(nil_chk(ComAowagieTextPdfTrueTypeFont_codePages), k) != nil) {
      ++count;
    }
    JreLShiftAssignLong(&bit, 1);
  }
  IOSObjectArray *ret = [IOSObjectArray newArrayWithLength:count type:NSString_class_()];
  count = 0;
  bit = 1;
  for (jint k = 0; k < 64; ++k) {
    if ((cp & bit) != 0 && IOSObjectArray_Get(nil_chk(ComAowagieTextPdfTrueTypeFont_codePages), k) != nil) {
      (void) IOSObjectArray_Set(ret, count++, IOSObjectArray_Get(nil_chk(ComAowagieTextPdfTrueTypeFont_codePages), k));
    }
    JreLShiftAssignLong(&bit, 1);
  }
  return ret;
}


#line 1526
- (IOSObjectArray *)getFullFontName {
  
#line 1528
  return self->fullName_;
}


#line 1539
- (IOSObjectArray *)getAllNameEntries {
  
#line 1541
  return self->allNameEntries_;
}


#line 1552
- (IOSObjectArray *)getFamilyFontName {
  
#line 1554
  return self->familyName_;
}


#line 1560
- (jboolean)hasKernPairs {
  
#line 1562
  return [((ComAowagieTextPdfIntHashtable *) nil_chk(self->kerning_)) size] > 0;
}


#line 1570
- (void)setPostscriptFontNameWithNSString:(NSString *)name {
  
#line 1572
  self->fontName_ = name;
}


#line 1582
- (jboolean)setKerningWithInt:(jint)char1
                      withInt:(jint)char2
                      withInt:(jint)kern {
  
#line 1584
  IOSIntArray *metrics = [self getMetricsTTWithInt:char1];
  if (metrics == nil) {
    return false;
  }
  jint c1 = IOSIntArray_Get(metrics, 0);
  metrics = [self getMetricsTTWithInt:char2];
  if (metrics == nil) {
    return false;
  }
  jint c2 = IOSIntArray_Get(metrics, 0);
  [((ComAowagieTextPdfIntHashtable *) nil_chk(self->kerning_)) putWithInt:(JreLShift32(c1, 16)) + c2 withInt:kern];
  return true;
}


#line 1598
- (IOSIntArray *)getRawCharBBoxWithInt:(jint)c
                          withNSString:(NSString *)name {
  JavaUtilHashMap *map = nil;
  if (name == nil || self->cmap31_ == nil) {
    map = self->cmap10_;
  }
  else {
    
#line 1604
    map = self->cmap31_;
  }
  if (map == nil) {
    return nil;
  }
  IOSIntArray *metric = (IOSIntArray *) cast_chk([map getWithId:new_JavaLangInteger_initWithInt_(c)], [IOSIntArray class]);
  if (metric == nil || self->bboxes_ == nil) {
    return nil;
  }
  return IOSObjectArray_Get(self->bboxes_, IOSIntArray_Get(metric, 0));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0xc, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x0, 4, 5, 1, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 7, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 8, 5, 9, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 10, 5, 9, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x4, 11, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x0, -1, -1, 9, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x0, -1, -1, 9, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x0, -1, -1, 9, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x0, -1, -1, 9, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 9, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 14, 15, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x4, 16, 17, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x4, 18, 19, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 9, -1, -1, -1 },
    { NULL, "[I", 0xc, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 24, 25, 1, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 9, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfStream;", 0x1, -1, -1, 26, -1, -1, -1 },
    { NULL, "F", 0x1, 16, 27, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 28, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "[I", 0x4, 32, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(initPackagePrivateWithNSString:withNSString:withBoolean:withByteArray:withBoolean:withBoolean:);
  methods[2].selector = @selector(getTTCNameWithNSString:);
  methods[3].selector = @selector(fillTables);
  methods[4].selector = @selector(getBaseFont);
  methods[5].selector = @selector(getNamesWithInt:);
  methods[6].selector = @selector(getAllNames);
  methods[7].selector = @selector(checkCff);
  methods[8].selector = @selector(processWithByteArray:withBoolean:);
  methods[9].selector = @selector(readStandardStringWithInt:);
  methods[10].selector = @selector(readUnicodeStringWithInt:);
  methods[11].selector = @selector(readGlyphWidths);
  methods[12].selector = @selector(getGlyphWidthWithInt:);
  methods[13].selector = @selector(readBbox);
  methods[14].selector = @selector(readCMaps);
  methods[15].selector = @selector(readFormat12);
  methods[16].selector = @selector(readFormat0);
  methods[17].selector = @selector(readFormat4);
  methods[18].selector = @selector(readFormat6);
  methods[19].selector = @selector(readKerning);
  methods[20].selector = @selector(getKerningWithInt:withInt:);
  methods[21].selector = @selector(getRawWidthWithInt:withNSString:);
  methods[22].selector = @selector(getFontDescriptorWithComAowagieTextPdfPdfIndirectReference:withNSString:withComAowagieTextPdfPdfIndirectReference:);
  methods[23].selector = @selector(getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference:withNSString:withInt:withInt:withByteArray:);
  methods[24].selector = @selector(getFullFont);
  methods[25].selector = @selector(compactRangesWithJavaUtilArrayList:);
  methods[26].selector = @selector(addRangeUniWithJavaUtilHashMap:withBoolean:withBoolean:);
  methods[27].selector = @selector(writeFontWithComAowagieTextPdfPdfWriter:withComAowagieTextPdfPdfIndirectReference:withNSObjectArray:);
  methods[28].selector = @selector(readCffFont);
  methods[29].selector = @selector(getFullFontStream);
  methods[30].selector = @selector(getFontDescriptorWithInt:withFloat:);
  methods[31].selector = @selector(getMetricsTTWithInt:);
  methods[32].selector = @selector(getPostscriptFontName);
  methods[33].selector = @selector(getCodePagesSupported);
  methods[34].selector = @selector(getFullFontName);
  methods[35].selector = @selector(getAllNameEntries);
  methods[36].selector = @selector(getFamilyFontName);
  methods[37].selector = @selector(hasKernPairs);
  methods[38].selector = @selector(setPostscriptFontNameWithNSString:);
  methods[39].selector = @selector(setKerningWithInt:withInt:withInt:);
  methods[40].selector = @selector(getRawCharBBoxWithInt:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "codePages", "[LNSString;", .constantValue.asLong = 0, 0x18, -1, 33, -1, -1 },
    { "justNames_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "tables_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "rf_", "LComAowagieTextPdfRandomAccessFileOrArray;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "fileName_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "cff_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "cffOffset_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "cffLength_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "directoryOffset_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "ttcIndex_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "style_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "head_", "LComAowagieTextPdfTrueTypeFont_FontHeader;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "hhea_", "LComAowagieTextPdfTrueTypeFont_HorizontalHeader;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "os_2_", "LComAowagieTextPdfTrueTypeFont_WindowsMetrics;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "GlyphWidths_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "bboxes_", "[[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "cmap10_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "cmap31_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "cmapExt_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "kerning_", "LComAowagieTextPdfIntHashtable;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "fontName_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "fullName_", "[[LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "allNameEntries_", "[[LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "familyName_", "[[LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "italicAngle_", "D", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "isFixedPitch_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "underlinePosition_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "underlineThickness_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;Z[BZZ", "LComAowagieTextDocumentException;LJavaIoIOException;", "getTTCName", "LNSString;", "getNames", "I", "process", "[BZ", "readStandardString", "LJavaIoIOException;", "readUnicodeString", "getGlyphWidth", "getKerning", "II", "getRawWidth", "ILNSString;", "getFontDescriptor", "LComAowagieTextPdfPdfIndirectReference;LNSString;LComAowagieTextPdfPdfIndirectReference;", "getFontBaseType", "LComAowagieTextPdfPdfIndirectReference;LNSString;II[B", "compactRanges", "LJavaUtilArrayList;", "addRangeUni", "LJavaUtilHashMap;ZZ", "writeFont", "LComAowagieTextPdfPdfWriter;LComAowagieTextPdfPdfIndirectReference;[LNSObject;", "LJavaIoIOException;LComAowagieTextDocumentException;", "IF", "getMetricsTT", "setPostscriptFontName", "setKerning", "III", "getRawCharBBox", &ComAowagieTextPdfTrueTypeFont_codePages, "LComAowagieTextPdfTrueTypeFont_FontHeader;LComAowagieTextPdfTrueTypeFont_HorizontalHeader;LComAowagieTextPdfTrueTypeFont_WindowsMetrics;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfTrueTypeFont = { "TrueTypeFont", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 41, 28, -1, 34, -1, -1, -1 };
  return &_ComAowagieTextPdfTrueTypeFont;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfTrueTypeFont class]) {
    ComAowagieTextPdfTrueTypeFont_codePages = [IOSObjectArray newArrayWithObjects:(id[]){
#line 72
      @"1252 Latin 1",
#line 73
      @"1250 Latin 2: Eastern Europe",
#line 74
      @"1251 Cyrillic",
#line 75
      @"1253 Greek",
#line 76
      @"1254 Turkish",
#line 77
      @"1255 Hebrew",
#line 78
      @"1256 Arabic",
#line 79
      @"1257 Windows Baltic",
#line 80
      @"1258 Vietnamese",
#line 81
      nil,
#line 82
      nil,
#line 83
      nil,
#line 84
      nil,
#line 85
      nil,
#line 86
      nil,
#line 87
      nil,
#line 88
      @"874 Thai",
#line 89
      @"932 JIS/Japan",
#line 90
      @"936 Chinese: Simplified chars--PRC and Singapore",
#line 91
      @"949 Korean Wansung",
#line 92
      @"950 Chinese: Traditional chars--Taiwan and Hong Kong",
#line 93
      @"1361 Korean Johab",
#line 94
      nil,
#line 95
      nil,
#line 96
      nil,
#line 97
      nil,
#line 98
      nil,
#line 99
      nil,
#line 100
      nil,
#line 101
      @"Macintosh Character Set (US Roman)",
#line 102
      @"OEM Character Set",
#line 103
      @"Symbol Character Set",
#line 104
      nil,
#line 105
      nil,
#line 106
      nil,
#line 107
      nil,
#line 108
      nil,
#line 109
      nil,
#line 110
      nil,
#line 111
      nil,
#line 112
      nil,
#line 113
      nil,
#line 114
      nil,
#line 115
      nil,
#line 116
      nil,
#line 117
      nil,
#line 118
      nil,
#line 119
      nil,
#line 120
      @"869 IBM Greek",
#line 121
      @"866 MS-DOS Russian",
#line 122
      @"865 MS-DOS Nordic",
#line 123
      @"864 Arabic",
#line 124
      @"863 MS-DOS Canadian French",
#line 125
      @"862 Hebrew",
#line 126
      @"861 MS-DOS Icelandic",
#line 127
      @"860 MS-DOS Portuguese",
#line 128
      @"857 IBM Turkish",
#line 129
      @"855 IBM Cyrillic; primarily Russian",
#line 130
      @"852 Latin 2",
#line 131
      @"775 MS-DOS Baltic",
#line 132
      @"737 Greek; former 437 G",
#line 133
      @"708 Arabic; ASMO 708",
#line 134
      @"850 WE/Latin 1",
#line 135
      @"437 US" } count:64 type:NSString_class_()];
      J2OBJC_SET_INITIALIZED(ComAowagieTextPdfTrueTypeFont)
    }
  }

@end


#line 346
void ComAowagieTextPdfTrueTypeFont_initPackagePrivate(ComAowagieTextPdfTrueTypeFont *self) {
  ComAowagieTextPdfBaseFont_init(self);
  self->justNames_ =
#line 137
  false;
  self->cff_ =
#line 151
  false;
  self->style_ =
#line 166
  @"";
  self->head_ = new_ComAowagieTextPdfTrueTypeFont_FontHeader_init();
  self->hhea_ = new_ComAowagieTextPdfTrueTypeFont_HorizontalHeader_init();
  self->os_2_ = new_ComAowagieTextPdfTrueTypeFont_WindowsMetrics_init();
  self->kerning_ = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
  self->isFixedPitch_ =
#line 233
  false;
}


#line 346
ComAowagieTextPdfTrueTypeFont *new_ComAowagieTextPdfTrueTypeFont_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfTrueTypeFont, initPackagePrivate)
}


#line 346
ComAowagieTextPdfTrueTypeFont *create_ComAowagieTextPdfTrueTypeFont_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfTrueTypeFont, initPackagePrivate)
}


#line 361
void ComAowagieTextPdfTrueTypeFont_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_withBoolean_(ComAowagieTextPdfTrueTypeFont *self, NSString *ttFile, NSString *enc, jboolean emb, IOSByteArray *ttfAfm, jboolean justNames, jboolean forceRead) {
  ComAowagieTextPdfBaseFont_init(self);
  self->justNames_ =
#line 137
  false;
  self->cff_ =
#line 151
  false;
  self->style_ =
#line 166
  @"";
  self->head_ = new_ComAowagieTextPdfTrueTypeFont_FontHeader_init();
  self->hhea_ = new_ComAowagieTextPdfTrueTypeFont_HorizontalHeader_init();
  self->os_2_ = new_ComAowagieTextPdfTrueTypeFont_WindowsMetrics_init();
  self->kerning_ = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
  self->isFixedPitch_ =
#line 233
  false;
  
#line 362
  self->justNames_ = justNames;
  NSString *nameBase = ComAowagieTextPdfBaseFont_getBaseNameWithNSString_(ttFile);
  NSString *ttcName = ComAowagieTextPdfTrueTypeFont_getTTCNameWithNSString_(nameBase);
  if ([((NSString *) nil_chk(nameBase)) java_length] < [((NSString *) nil_chk(ttFile)) java_length]) {
    self->style_ = [ttFile java_substring:[nameBase java_length]];
  }
  self->encoding_ = enc;
  self->embedded_ = emb;
  self->fileName_ = ttcName;
  self->fontType_ = ComAowagieTextPdfBaseFont_FONT_TYPE_TT;
  self->ttcIndex_ = @"";
  if ([((NSString *) nil_chk(ttcName)) java_length] < [nameBase java_length]) {
    self->ttcIndex_ = [nameBase java_substring:[ttcName java_length] + 1];
  }
  if ([((NSString *) nil_chk([((NSString *) nil_chk(self->fileName_)) lowercaseString])) java_hasSuffix:@".ttf"] || [((NSString *) nil_chk([((NSString *) nil_chk(self->fileName_)) lowercaseString])) java_hasSuffix:@".otf"] || [((NSString *) nil_chk([((NSString *) nil_chk(self->fileName_)) lowercaseString])) java_hasSuffix:@".ttc"]) {
    [self processWithByteArray:ttfAfm withBoolean:forceRead];
    if (!justNames && self->embedded_ && ((ComAowagieTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(self->os_2_))->fsType_ == 2) {
      @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$$", self->fileName_, self->style_, @" cannot be embedded due to licensing restrictions."));
    }
  }
  else {
    
#line 382
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$$", self->fileName_, self->style_, @" is not a TTF, OTF or TTC font file."));
  }
  if (![((NSString *) nil_chk(self->encoding_)) java_hasPrefix:@"#"]) {
    
#line 386
    (void) ComAowagieTextPdfPdfEncodings_convertToBytesWithNSString_withNSString_(@" ", enc);
  }
  [self createEncoding];
}


#line 361
ComAowagieTextPdfTrueTypeFont *new_ComAowagieTextPdfTrueTypeFont_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_withBoolean_(NSString *ttFile, NSString *enc, jboolean emb, IOSByteArray *ttfAfm, jboolean justNames, jboolean forceRead) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfTrueTypeFont, initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_withBoolean_, ttFile, enc, emb, ttfAfm, justNames, forceRead)
}


#line 361
ComAowagieTextPdfTrueTypeFont *create_ComAowagieTextPdfTrueTypeFont_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_withBoolean_(NSString *ttFile, NSString *enc, jboolean emb, IOSByteArray *ttfAfm, jboolean justNames, jboolean forceRead) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfTrueTypeFont, initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_withBoolean_, ttFile, enc, emb, ttfAfm, justNames, forceRead)
}


#line 397
NSString *ComAowagieTextPdfTrueTypeFont_getTTCNameWithNSString_(NSString *name) {
  ComAowagieTextPdfTrueTypeFont_initialize();
  
#line 398
  jint idx = [((NSString *) nil_chk([((NSString *) nil_chk(name)) lowercaseString])) java_indexOfString:@".ttc,"];
  if (idx < 0) {
    return name;
  }
  else {
    
#line 402
    return [name java_substring:0 endIndex:idx + 4];
  }
}


#line 774
void ComAowagieTextPdfTrueTypeFont_readBbox(ComAowagieTextPdfTrueTypeFont *self) {
  IOSIntArray *tableLocation;
  tableLocation = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tables_)) getWithId:@"head"], [IOSIntArray class]);
  if (tableLocation == nil) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$$", @"Table 'head' does not exist in ", self->fileName_, self->style_));
  }
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(tableLocation, 0) + ComAowagieTextPdfTrueTypeFontSubSet_HEAD_LOCA_FORMAT_OFFSET];
  jboolean locaShortTable = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort] == 0;
  tableLocation = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tables_)) getWithId:@"loca"], [IOSIntArray class]);
  if (tableLocation == nil) {
    return;
  }
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:IOSIntArray_Get(tableLocation, 0)];
  IOSIntArray *locaTable;
  if (locaShortTable) {
    jint entries = JreIntDiv(IOSIntArray_Get(tableLocation, 1), 2);
    locaTable = [IOSIntArray newArrayWithLength:entries];
    for (jint k = 0; k < entries; ++k) {
      *IOSIntArray_GetRef(locaTable, k) = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readUnsignedShort] * 2;
    }
  }
  else {
    jint entries = JreIntDiv(IOSIntArray_Get(tableLocation, 1), 4);
    locaTable = [IOSIntArray newArrayWithLength:entries];
    for (jint k = 0; k < entries; ++k) {
      *IOSIntArray_GetRef(locaTable, k) = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readInt];
    }
  }
  tableLocation = (IOSIntArray *) cast_chk([((JavaUtilHashMap *) nil_chk(self->tables_)) getWithId:@"glyf"], [IOSIntArray class]);
  if (tableLocation == nil) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$$", @"Table 'glyf' does not exist in ", self->fileName_, self->style_));
  }
  jint tableGlyphOffset = IOSIntArray_Get(tableLocation, 0);
  self->bboxes_ = [IOSObjectArray newArrayWithLength:locaTable->size_ - 1 type:IOSClass_intArray(1)];
  for (jint glyph = 0; glyph < locaTable->size_ - 1; ++glyph) {
    jint start = IOSIntArray_Get(locaTable, glyph);
    if (start != IOSIntArray_Get(locaTable, glyph + 1)) {
      [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) seekWithInt:tableGlyphOffset + start + 2];
      (void) IOSObjectArray_SetAndConsume(nil_chk(self->bboxes_), glyph, [IOSIntArray newArrayWithInts:(jint[]){ JreIntDiv(
#line 813
      [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort] * 1000, ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_), JreIntDiv(
#line 814
      [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort] * 1000, ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_), JreIntDiv(
#line 815
      [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort] * 1000, ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_), JreIntDiv(
#line 816
      [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->rf_)) readShort] * 1000, ((ComAowagieTextPdfTrueTypeFont_FontHeader *) nil_chk(self->head_))->unitsPerEm_) } count:4]);
    }
  }
}


#line 1216
IOSIntArray *ComAowagieTextPdfTrueTypeFont_compactRangesWithJavaUtilArrayList_(JavaUtilArrayList *ranges) {
  ComAowagieTextPdfTrueTypeFont_initialize();
  
#line 1217
  JavaUtilArrayList *simp = new_JavaUtilArrayList_init();
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(ranges)) size]; ++k) {
    IOSIntArray *r = (IOSIntArray *) cast_chk([ranges getWithInt:k], [IOSIntArray class]);
    for (jint j = 0; j < ((IOSIntArray *) nil_chk(r))->size_; j += 2) {
      [simp addWithId:[IOSIntArray newArrayWithInts:(jint[]){ JavaLangMath_maxWithInt_withInt_(0, JavaLangMath_minWithInt_withInt_(IOSIntArray_Get(r, j), IOSIntArray_Get(r, j + 1))), JavaLangMath_minWithInt_withInt_((jint) 0xffff, JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(r, j), IOSIntArray_Get(r, j + 1))) } count:2]];
    }
  }
  for (jint k1 = 0; k1 < [simp size] - 1; ++k1) {
    for (jint k2 = k1 + 1; k2 < [simp size]; ++k2) {
      IOSIntArray *r1 = (IOSIntArray *) cast_chk([simp getWithInt:k1], [IOSIntArray class]);
      IOSIntArray *r2 = (IOSIntArray *) cast_chk([simp getWithInt:k2], [IOSIntArray class]);
      if ((IOSIntArray_Get(nil_chk(r1), 0) >= IOSIntArray_Get(nil_chk(r2), 0) && IOSIntArray_Get(r1, 0) <= IOSIntArray_Get(r2, 1)) || (IOSIntArray_Get(r1, 1) >= IOSIntArray_Get(r2, 0) && IOSIntArray_Get(r1, 0) <= IOSIntArray_Get(r2, 1))) {
        *IOSIntArray_GetRef(r1, 0) = JavaLangMath_minWithInt_withInt_(IOSIntArray_Get(r1, 0), IOSIntArray_Get(r2, 0));
        *IOSIntArray_GetRef(r1, 1) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(r1, 1), IOSIntArray_Get(r2, 1));
        (void) [simp removeWithInt:k2];
        --k2;
      }
    }
  }
  IOSIntArray *s = [IOSIntArray newArrayWithLength:[simp size] * 2];
  for (jint k = 0; k < [simp size]; ++k) {
    IOSIntArray *r = (IOSIntArray *) cast_chk([simp getWithInt:k], [IOSIntArray class]);
    *IOSIntArray_GetRef(s, k * 2) = IOSIntArray_Get(nil_chk(r), 0);
    *IOSIntArray_GetRef(s, k * 2 + 1) = IOSIntArray_Get(r, 1);
  }
  return s;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfTrueTypeFont)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/TrueTypeFont.java"


#line 241
@implementation ComAowagieTextPdfTrueTypeFont_FontHeader

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 241
- (instancetype)init {
  ComAowagieTextPdfTrueTypeFont_FontHeader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "flags_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "unitsPerEm_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "xMin_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "yMin_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "xMax_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "yMax_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "macStyle_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfTrueTypeFont;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfTrueTypeFont_FontHeader = { "FontHeader", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0xc, 1, 7, 0, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfTrueTypeFont_FontHeader;
}

@end


#line 241
void ComAowagieTextPdfTrueTypeFont_FontHeader_init(ComAowagieTextPdfTrueTypeFont_FontHeader *self) {
  NSObject_init(self);
}


#line 241
ComAowagieTextPdfTrueTypeFont_FontHeader *new_ComAowagieTextPdfTrueTypeFont_FontHeader_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfTrueTypeFont_FontHeader, init)
}


#line 241
ComAowagieTextPdfTrueTypeFont_FontHeader *create_ComAowagieTextPdfTrueTypeFont_FontHeader_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfTrueTypeFont_FontHeader, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfTrueTypeFont_FontHeader)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/TrueTypeFont.java"


#line 260
@implementation ComAowagieTextPdfTrueTypeFont_HorizontalHeader

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 260
- (instancetype)init {
  ComAowagieTextPdfTrueTypeFont_HorizontalHeader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "Ascender_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "Descender_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "LineGap_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "advanceWidthMax_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "minLeftSideBearing_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "minRightSideBearing_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "xMaxExtent_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "caretSlopeRise_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "caretSlopeRun_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "numberOfHMetrics_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfTrueTypeFont;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfTrueTypeFont_HorizontalHeader = { "HorizontalHeader", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0xc, 1, 10, 0, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfTrueTypeFont_HorizontalHeader;
}

@end


#line 260
void ComAowagieTextPdfTrueTypeFont_HorizontalHeader_init(ComAowagieTextPdfTrueTypeFont_HorizontalHeader *self) {
  NSObject_init(self);
}


#line 260
ComAowagieTextPdfTrueTypeFont_HorizontalHeader *new_ComAowagieTextPdfTrueTypeFont_HorizontalHeader_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfTrueTypeFont_HorizontalHeader, init)
}


#line 260
ComAowagieTextPdfTrueTypeFont_HorizontalHeader *create_ComAowagieTextPdfTrueTypeFont_HorizontalHeader_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfTrueTypeFont_HorizontalHeader, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfTrueTypeFont_HorizontalHeader)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/TrueTypeFont.java"


#line 285
@implementation ComAowagieTextPdfTrueTypeFont_WindowsMetrics

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 285
- (instancetype)init {
  ComAowagieTextPdfTrueTypeFont_WindowsMetrics_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "xAvgCharWidth_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "usWeightClass_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "usWidthClass_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fsType_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ySubscriptXSize_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ySubscriptYSize_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ySubscriptXOffset_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ySubscriptYOffset_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ySuperscriptXSize_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ySuperscriptYSize_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ySuperscriptXOffset_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ySuperscriptYOffset_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "yStrikeoutSize_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "yStrikeoutPosition_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sFamilyClass_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "panose_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "achVendID_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fsSelection_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "usFirstCharIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "usLastCharIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sTypoAscender_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sTypoDescender_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sTypoLineGap_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "usWinAscent_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "usWinDescent_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ulCodePageRange1_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ulCodePageRange2_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sCapHeight_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfTrueTypeFont;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfTrueTypeFont_WindowsMetrics = { "WindowsMetrics", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0xc, 1, 28, 0, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfTrueTypeFont_WindowsMetrics;
}

@end


#line 285
void ComAowagieTextPdfTrueTypeFont_WindowsMetrics_init(ComAowagieTextPdfTrueTypeFont_WindowsMetrics *self) {
  NSObject_init(self);
  self->panose_ = [IOSByteArray newArrayWithLength:
#line 317
  10];
  self->achVendID_ = [IOSByteArray newArrayWithLength:
#line 319
  4];
}


#line 285
ComAowagieTextPdfTrueTypeFont_WindowsMetrics *new_ComAowagieTextPdfTrueTypeFont_WindowsMetrics_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfTrueTypeFont_WindowsMetrics, init)
}


#line 285
ComAowagieTextPdfTrueTypeFont_WindowsMetrics *create_ComAowagieTextPdfTrueTypeFont_WindowsMetrics_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfTrueTypeFont_WindowsMetrics, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfTrueTypeFont_WindowsMetrics)
