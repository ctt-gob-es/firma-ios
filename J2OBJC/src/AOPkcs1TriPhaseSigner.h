//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/signers/AOPkcs1TriPhaseSigner.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AOPkcs1TriPhaseSigner")
#ifdef RESTRICT_AOPkcs1TriPhaseSigner
#define INCLUDE_ALL_AOPkcs1TriPhaseSigner 0
#else
#define INCLUDE_ALL_AOPkcs1TriPhaseSigner 1
#endif
#undef RESTRICT_AOPkcs1TriPhaseSigner

#if !defined (EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_) && (INCLUDE_ALL_AOPkcs1TriPhaseSigner || defined(INCLUDE_EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner))
#define EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_

#define RESTRICT_AOSigner 1
#define INCLUDE_EsGobAfirmaCoreSignersAOSigner 1
#include "AOSigner.h"

@class EsGobAfirmaCoreSignersAOSignInfo;
@class EsGobAfirmaCoreSignersCounterSignTarget;
@class EsGobAfirmaCoreUtilTreeAOTreeModel;
@class IOSByteArray;
@class IOSObjectArray;
@class JavaUtilLoggingLogger;
@class JavaUtilProperties;
@protocol JavaSecurityPrivateKey;

/*!
 @brief Manejador para la emulaci&oacute;n de la realizaci&oacute;n de firmas trif&aacute;sicas PKCS#1.
 Las firmas PKCS#1 se realizan por completo en cliente, no tiene prefirma ni postfirma. Este
  manejador permite emular la gestion de firmas trif&aacute;de PKCS#1 lo que nos permite que los
  datos a firmar se obtengan desde el servidor trifasico en lugar del cliente.
 */
@interface EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner : NSObject < EsGobAfirmaCoreSignersAOSigner >

#pragma mark Public

/*!
 @brief Construye un manejador de firmas trif&aacute;sicas para firmas PKCS#1.
 */
- (instancetype)init;

- (IOSByteArray *)cosignWithByteArray:(IOSByteArray *)data
                        withByteArray:(IOSByteArray *)sign
                         withNSString:(NSString *)algorithm
           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
               withJavaUtilProperties:(JavaUtilProperties *)xParams;

- (IOSByteArray *)cosignWithByteArray:(IOSByteArray *)sign
                         withNSString:(NSString *)algorithm
           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
               withJavaUtilProperties:(JavaUtilProperties *)xParams;

- (IOSByteArray *)countersignWithByteArray:(IOSByteArray *)sign
                              withNSString:(NSString *)algorithm
withEsGobAfirmaCoreSignersCounterSignTarget:(EsGobAfirmaCoreSignersCounterSignTarget *)targetType
                         withNSObjectArray:(IOSObjectArray *)targets
                withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
      withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
                    withJavaUtilProperties:(JavaUtilProperties *)xParams;

/*!
 */
- (IOSByteArray *)getDataWithByteArray:(IOSByteArray *)sign;

/*!
 */
- (IOSByteArray *)getDataWithByteArray:(IOSByteArray *)sign
                withJavaUtilProperties:(JavaUtilProperties *)params;

/*!
 */
- (NSString *)getSignedNameWithNSString:(NSString *)originalName
                           withNSString:(NSString *)inText;

/*!
 */
- (EsGobAfirmaCoreUtilTreeAOTreeModel *)getSignersStructureWithByteArray:(IOSByteArray *)sign
                                                             withBoolean:(jboolean)asSimpleSignInfo;

/*!
 */
- (EsGobAfirmaCoreUtilTreeAOTreeModel *)getSignersStructureWithByteArray:(IOSByteArray *)sign
                                                  withJavaUtilProperties:(JavaUtilProperties *)params
                                                             withBoolean:(jboolean)asSimpleSignInfo;

/*!
 */
- (EsGobAfirmaCoreSignersAOSignInfo *)getSignInfoWithByteArray:(IOSByteArray *)sign;

/*!
 */
- (EsGobAfirmaCoreSignersAOSignInfo *)getSignInfoWithByteArray:(IOSByteArray *)data
                                        withJavaUtilProperties:(JavaUtilProperties *)params;

/*!
 */
- (jboolean)isSignWithByteArray:(IOSByteArray *)sign;

/*!
 */
- (jboolean)isSignWithByteArray:(IOSByteArray *)signData
         withJavaUtilProperties:(JavaUtilProperties *)params;

/*!
 */
- (jboolean)isValidDataFileWithByteArray:(IOSByteArray *)data;

- (IOSByteArray *)signWithByteArray:(IOSByteArray *)data
                       withNSString:(NSString *)algorithm
         withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
             withJavaUtilProperties:(JavaUtilProperties *)xParams;

#pragma mark Protected

/*!
 @brief Construye un manejador de firmas trif&aacute;sicas para un determinado formato.
 @param format Formato de firma.
 */
- (instancetype)initWithNSString:(NSString *)format;

/*!
 @brief Ejecuta una operaci&oacute;n de firma/multifirma en 3 fases, en donde la primera y la 
 &uacute;ltima realmente no har&aacute;n m&aacute;s que recuperar el documento a
  firmar y almacenar la firma, respectivamente.
 @param format Formato de firma ("NONE" o "NONEtri" en este caso).
 @param cryptoOperation Tipo de operaci &oacute; n (solo se admite la firma).
 @param data Datos o firma sobre la que operar
 @param algorithm Algoritmo de firma
 @param key Clave privada del certificado de firma.
 @param certChain Cadena de certificaci &oacute; n.
 @param extraParams Par &aacute; metros para la configuraci &oacute; n de la operaci &oacute; n.  S &oacute; lo se utiliza el <code>serverUrl</code> .
 @return Resultado de la operaci&oacute;n de firma.
 @throw AOExceptionCuando se produce un error durante la operaci&oacute;n.
 */
+ (IOSByteArray *)triPhaseOperationWithNSString:(NSString *)format
                                   withNSString:(NSString *)cryptoOperation
                                  withByteArray:(IOSByteArray *)data
                                   withNSString:(NSString *)algorithm
                     withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
           withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
                         withJavaUtilProperties:(JavaUtilProperties *)extraParams;

@end

J2OBJC_STATIC_INIT(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner)

/*!
 @brief <i>Logger</i> para la clase y sus derivadas.
 */
inline JavaUtilLoggingLogger *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_get_LOGGER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilLoggingLogger *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner, LOGGER, JavaUtilLoggingLogger *)

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_initWithNSString_(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner *self, NSString *format);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner *new_EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_initWithNSString_(NSString *format) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner *create_EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_initWithNSString_(NSString *format);

FOUNDATION_EXPORT void EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_init(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner *self);

FOUNDATION_EXPORT EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner *new_EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner *create_EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_init(void);

FOUNDATION_EXPORT IOSByteArray *EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner_triPhaseOperationWithNSString_withNSString_withByteArray_withNSString_withJavaSecurityPrivateKey_withJavaSecurityCertCertificateArray_withJavaUtilProperties_(NSString *format, NSString *cryptoOperation, IOSByteArray *data, NSString *algorithm, id<JavaSecurityPrivateKey> key, IOSObjectArray *certChain, JavaUtilProperties *extraParams);

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaCoreSignersAOPkcs1TriPhaseSigner)

#endif

#pragma pop_macro("INCLUDE_ALL_AOPkcs1TriPhaseSigner")
