//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/jce/provider/PKIXCertPathBuilderSpi.java
//

#include "ASN1ObjectIdentifier.h"
#include "AnnotatedException.h"
#include "CertPathValidatorUtilities.h"
#include "CertificateFactory.h"
#include "ExtCertPathBuilderException.h"
#include "ExtendedPKIXBuilderParameters.h"
#include "ExtendedPKIXParameters.h"
#include "Extension.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PKIXCertPathBuilderSpi.h"
#include "PKIXCertPathValidatorSpi.h"
#include "PKIXCertStore.h"
#include "PKIXCertStoreSelector.h"
#include "PKIXExtendedBuilderParameters.h"
#include "PKIXExtendedParameters.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/CertPath.h"
#include "java/security/cert/CertPathBuilderException.h"
#include "java/security/cert/CertPathBuilderResult.h"
#include "java/security/cert/CertPathBuilderSpi.h"
#include "java/security/cert/CertPathParameters.h"
#include "java/security/cert/CertPathValidatorResult.h"
#include "java/security/cert/CertificateParsingException.h"
#include "java/security/cert/PKIXBuilderParameters.h"
#include "java/security/cert/PKIXCertPathBuilderResult.h"
#include "java/security/cert/PKIXCertPathValidatorResult.h"
#include "java/security/cert/PolicyNode.h"
#include "java/security/cert/TrustAnchor.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#if !__has_feature(objc_arc)
#error "PKIXCertPathBuilderSpi must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleJceProviderPKIXCertPathBuilderSpi () {
 @public
  JavaLangException *certPathException_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderPKIXCertPathBuilderSpi, certPathException_, JavaLangException *)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/jce/provider/PKIXCertPathBuilderSpi.java"


#line 35
@implementation OrgSpongycastleJceProviderPKIXCertPathBuilderSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 35
- (instancetype)init {
  OrgSpongycastleJceProviderPKIXCertPathBuilderSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 44
- (id<JavaSecurityCertCertPathBuilderResult>)engineBuildWithJavaSecurityCertCertPathParameters:(id<JavaSecurityCertCertPathParameters>)params {
  
#line 47
  OrgSpongycastleJcajcePKIXExtendedBuilderParameters *paramsPKIX;
  if ([params isKindOfClass:[JavaSecurityCertPKIXBuilderParameters class]]) {
    
#line 50
    OrgSpongycastleJcajcePKIXExtendedParameters_Builder *paramsPKIXBldr = new_OrgSpongycastleJcajcePKIXExtendedParameters_Builder_initWithJavaSecurityCertPKIXParameters_((JavaSecurityCertPKIXBuilderParameters *) params);
    OrgSpongycastleJcajcePKIXExtendedBuilderParameters_Builder *paramsBldrPKIXBldr;
    
#line 53
    if ([params isKindOfClass:[OrgSpongycastleX509ExtendedPKIXParameters class]]) {
      
#line 55
      OrgSpongycastleX509ExtendedPKIXBuilderParameters *extPKIX = (OrgSpongycastleX509ExtendedPKIXBuilderParameters *) cast_chk(params, [OrgSpongycastleX509ExtendedPKIXBuilderParameters class]);
      
#line 57
      
      ;
      
#line 58
      for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk([((OrgSpongycastleX509ExtendedPKIXBuilderParameters *) nil_chk(extPKIX)) getAdditionalStores])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        
#line 60
        (void) [paramsPKIXBldr addCertificateStoreWithOrgSpongycastleJcajcePKIXCertStore:(id<OrgSpongycastleJcajcePKIXCertStore>) cast_check([it next], OrgSpongycastleJcajcePKIXCertStore_class_())];
      }
      paramsBldrPKIXBldr = new_OrgSpongycastleJcajcePKIXExtendedBuilderParameters_Builder_initWithOrgSpongycastleJcajcePKIXExtendedParameters_([paramsPKIXBldr build]);
      
#line 64
      (void) [paramsBldrPKIXBldr addExcludedCertsWithJavaUtilSet:[extPKIX getExcludedCerts]];
      (void) [paramsBldrPKIXBldr setMaxPathLengthWithInt:[extPKIX getMaxPathLength]];
    }
    else {
      
#line 69
      paramsBldrPKIXBldr = new_OrgSpongycastleJcajcePKIXExtendedBuilderParameters_Builder_initWithJavaSecurityCertPKIXBuilderParameters_((JavaSecurityCertPKIXBuilderParameters *) cast_chk(params, [JavaSecurityCertPKIXBuilderParameters class]));
    }
    
#line 72
    paramsPKIX = [paramsBldrPKIXBldr build];
  }
  else if ([params isKindOfClass:[OrgSpongycastleJcajcePKIXExtendedBuilderParameters class]]) {
    
#line 76
    paramsPKIX = (OrgSpongycastleJcajcePKIXExtendedBuilderParameters *) params;
  }
  else {
    
#line 80
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$$$C", @"Parameters must be an instance of ",
#line 82
    [JavaSecurityCertPKIXBuilderParameters_class_() getName], @" or ",
#line 83
    [OrgSpongycastleJcajcePKIXExtendedBuilderParameters_class_() getName], '.'));
  }
  
#line 86
  id<JavaUtilCollection> targets;
  id<JavaUtilIterator> targetIter;
  id<JavaUtilList> certPathList = new_JavaUtilArrayList_init();
  JavaSecurityCertX509Certificate *cert;
  
#line 93
  OrgSpongycastleJcajcePKIXCertStoreSelector *certSelect = [((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk([((OrgSpongycastleJcajcePKIXExtendedBuilderParameters *) nil_chk(paramsPKIX)) getBaseParameters])) getTargetConstraints];
  
#line 95
  @try {
    
#line 97
    targets = OrgSpongycastleJceProviderCertPathValidatorUtilities_findCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(certSelect, [((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk([paramsPKIX getBaseParameters])) getCertificateStores]);
    [((id<JavaUtilCollection>) nil_chk(targets)) addAllWithJavaUtilCollection:OrgSpongycastleJceProviderCertPathValidatorUtilities_findCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(certSelect, [((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk([paramsPKIX getBaseParameters])) getCertStores])];
  }
  @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
    
#line 102
    @throw new_OrgSpongycastleJceExceptionExtCertPathBuilderException_initWithNSString_withJavaLangThrowable_(
#line 103
    @"Error finding target certificate.", e);
  }
  
#line 106
  if ([((id<JavaUtilCollection>) nil_chk(targets)) isEmpty]) {
    
#line 109
    @throw new_JavaSecurityCertCertPathBuilderException_initWithNSString_(
#line 110
    @"No certificate found matching targetContraints.");
  }
  
#line 113
  id<JavaSecurityCertCertPathBuilderResult> result = nil;
  
#line 116
  targetIter = [targets iterator];
  while ([((id<JavaUtilIterator>) nil_chk(targetIter)) hasNext] && result == nil) {
    
#line 119
    cert = (JavaSecurityCertX509Certificate *) cast_chk([targetIter next], [JavaSecurityCertX509Certificate class]);
    result = [self buildWithJavaSecurityCertX509Certificate:cert withOrgSpongycastleJcajcePKIXExtendedBuilderParameters:paramsPKIX withJavaUtilList:certPathList];
  }
  
#line 123
  if (result == nil && certPathException_ != nil) {
    
#line 125
    if ([certPathException_ isKindOfClass:[OrgSpongycastleJceProviderAnnotatedException class]]) {
      
#line 127
      @throw new_JavaSecurityCertCertPathBuilderException_initWithNSString_withJavaLangThrowable_([certPathException_ getMessage], [((JavaLangException *) nil_chk(certPathException_)) getCause]);
    }
    @throw new_JavaSecurityCertCertPathBuilderException_initWithNSString_withJavaLangThrowable_(
#line 130
    @"Possible certificate chain could not be validated.",
#line 131
    certPathException_);
  }
  
#line 134
  if (result == nil && certPathException_ == nil) {
    
#line 136
    @throw new_JavaSecurityCertCertPathBuilderException_initWithNSString_(
#line 137
    @"Unable to find certificate chain.");
  }
  
#line 140
  return result;
}


#line 145
- (id<JavaSecurityCertCertPathBuilderResult>)buildWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)tbvCert
                               withOrgSpongycastleJcajcePKIXExtendedBuilderParameters:(OrgSpongycastleJcajcePKIXExtendedBuilderParameters *)pkixParams
                                                                     withJavaUtilList:(id<JavaUtilList>)tbvPath {
  
#line 151
  if ([((id<JavaUtilList>) nil_chk(tbvPath)) containsWithId:tbvCert]) {
    
#line 153
    return nil;
  }
  
#line 157
  if ([((id<JavaUtilSet>) nil_chk([((OrgSpongycastleJcajcePKIXExtendedBuilderParameters *) nil_chk(pkixParams)) getExcludedCerts])) containsWithId:tbvCert]) {
    
#line 159
    return nil;
  }
  
#line 162
  if ([pkixParams getMaxPathLength] != -1) {
    
#line 164
    if ([tbvPath size] - 1 > [pkixParams getMaxPathLength]) {
      
#line 166
      return nil;
    }
  }
  
#line 170
  [tbvPath addWithId:tbvCert];
  
#line 172
  OrgSpongycastleJcajceProviderAsymmetricX509CertificateFactory *cFact;
  OrgSpongycastleJceProviderPKIXCertPathValidatorSpi *validator;
  id<JavaSecurityCertCertPathBuilderResult> builderResult = nil;
  
#line 176
  @try {
    
#line 178
    cFact = new_OrgSpongycastleJcajceProviderAsymmetricX509CertificateFactory_init();
    validator = new_OrgSpongycastleJceProviderPKIXCertPathValidatorSpi_init();
  }
  @catch (JavaLangException *e) {
    
#line 184
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Exception creating support classes.");
  }
  
#line 187
  @try {
    
#line 190
    if (OrgSpongycastleJceProviderCertPathValidatorUtilities_isIssuerTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(tbvCert, [((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getTrustAnchors],
#line 191
    [((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getSigProvider])) {
      
#line 195
      JavaSecurityCertCertPath *certPath = nil;
      JavaSecurityCertPKIXCertPathValidatorResult *result = nil;
      @try {
        
#line 199
        certPath = [((OrgSpongycastleJcajceProviderAsymmetricX509CertificateFactory *) nil_chk(cFact)) engineGenerateCertPathWithJavaUtilList:tbvPath];
      }
      @catch (JavaLangException *e) {
        
#line 203
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 204
        @"Certification path could not be constructed from certificate list.",
#line 205
        e);
      }
      
#line 208
      @try {
        
#line 210
        result = (JavaSecurityCertPKIXCertPathValidatorResult *) cast_chk([((OrgSpongycastleJceProviderPKIXCertPathValidatorSpi *) nil_chk(validator)) engineValidateWithJavaSecurityCertCertPath:
#line 211
        certPath withJavaSecurityCertCertPathParameters:pkixParams], [JavaSecurityCertPKIXCertPathValidatorResult class]);
      }
      @catch (JavaLangException *e) {
        
#line 215
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 216
        @"Certification path could not be validated.", e);
      }
      
#line 219
      return new_JavaSecurityCertPKIXCertPathBuilderResult_initWithJavaSecurityCertCertPath_withJavaSecurityCertTrustAnchor_withJavaSecurityCertPolicyNode_withJavaSecurityPublicKey_(certPath, [((JavaSecurityCertPKIXCertPathValidatorResult *) nil_chk(result)) getTrustAnchor],
#line 220
      [result getPolicyTree], [result getPublicKey]);
    }
    else {
      
#line 226
      id<JavaUtilList> stores = new_JavaUtilArrayList_init();
      
#line 229
      [stores addAllWithJavaUtilCollection:[((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getCertificateStores]];
      
#line 232
      @try {
        
#line 234
        [stores addAllWithJavaUtilCollection:OrgSpongycastleJceProviderCertPathValidatorUtilities_getAdditionalStoresFromAltNamesWithByteArray_withJavaUtilMap_(
#line 235
        [((JavaSecurityCertX509Certificate *) nil_chk(tbvCert)) getExtensionValueWithNSString:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, issuerAlternativeName))) getId]], [((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getNamedCertificateStoreMap])];
      }
      @catch (JavaSecurityCertCertificateParsingException *e) {
        
#line 239
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 240
        @"No additional X.509 stores can be added from certificate locations.",
#line 241
        e);
      }
      id<JavaUtilCollection> issuers = new_JavaUtilHashSet_init();
      
#line 246
      @try {
        
#line 248
        [issuers addAllWithJavaUtilCollection:OrgSpongycastleJceProviderCertPathValidatorUtilities_findIssuerCertsWithJavaSecurityCertX509Certificate_withJavaUtilList_withJavaUtilList_(tbvCert, [((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getCertStores], stores)];
      }
      @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
        
#line 252
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 253
        @"Cannot find issuer certificate for certificate in certification path.",
#line 254
        e);
      }
      if ([issuers isEmpty]) {
        
#line 258
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(
#line 259
        @"No issuer certificate for certificate in certification path found.");
      }
      id<JavaUtilIterator> it = [issuers iterator];
      
#line 263
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && builderResult == nil) {
        
#line 265
        JavaSecurityCertX509Certificate *issuer = (JavaSecurityCertX509Certificate *) cast_chk([it next], [JavaSecurityCertX509Certificate class]);
        builderResult = [self buildWithJavaSecurityCertX509Certificate:issuer withOrgSpongycastleJcajcePKIXExtendedBuilderParameters:pkixParams withJavaUtilList:tbvPath];
      }
    }
  }
  @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
    
#line 272
    certPathException_ = e;
  }
  if (builderResult == nil) {
    
#line 276
    [tbvPath removeWithId:tbvCert];
  }
  return builderResult;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPathBuilderResult;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPathBuilderResult;", 0x4, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineBuildWithJavaSecurityCertCertPathParameters:);
  methods[2].selector = @selector(buildWithJavaSecurityCertX509Certificate:withOrgSpongycastleJcajcePKIXExtendedBuilderParameters:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "certPathException_", "LJavaLangException;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "engineBuild", "LJavaSecurityCertCertPathParameters;", "LJavaSecurityCertCertPathBuilderException;LJavaSecurityInvalidAlgorithmParameterException;", "build", "LJavaSecurityCertX509Certificate;LOrgSpongycastleJcajcePKIXExtendedBuilderParameters;LJavaUtilList;" };
  static const J2ObjcClassInfo _OrgSpongycastleJceProviderPKIXCertPathBuilderSpi = { "PKIXCertPathBuilderSpi", "org.spongycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleJceProviderPKIXCertPathBuilderSpi;
}

@end


#line 35
void OrgSpongycastleJceProviderPKIXCertPathBuilderSpi_init(OrgSpongycastleJceProviderPKIXCertPathBuilderSpi *self) {
  JavaSecurityCertCertPathBuilderSpi_init(self);
}


#line 35
OrgSpongycastleJceProviderPKIXCertPathBuilderSpi *new_OrgSpongycastleJceProviderPKIXCertPathBuilderSpi_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleJceProviderPKIXCertPathBuilderSpi, init)
}


#line 35
OrgSpongycastleJceProviderPKIXCertPathBuilderSpi *create_OrgSpongycastleJceProviderPKIXCertPathBuilderSpi_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJceProviderPKIXCertPathBuilderSpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleJceProviderPKIXCertPathBuilderSpi)
