//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/AcroFields.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AcroFields")
#ifdef RESTRICT_AcroFields
#define INCLUDE_ALL_AcroFields 0
#else
#define INCLUDE_ALL_AcroFields 1
#endif
#undef RESTRICT_AcroFields

#if !defined (ComAowagieTextPdfAcroFields_) && (INCLUDE_ALL_AcroFields || defined(INCLUDE_ComAowagieTextPdfAcroFields))
#define ComAowagieTextPdfAcroFields_

@class ComAowagieTextPdfAcroFields_Item;
@class ComAowagieTextPdfBaseField;
@class ComAowagieTextPdfFdfReader;
@class ComAowagieTextPdfPdfDictionary;
@class ComAowagieTextPdfPdfName;
@class ComAowagieTextPdfPdfPKCS7;
@class ComAowagieTextPdfPdfReader;
@class ComAowagieTextPdfPdfWriter;
@class ComAowagieTextPdfXfaForm;
@class ComAowagieTextPdfXfdfReader;
@class IOSFloatArray;
@class IOSObjectArray;
@class JavaIoInputStream;
@class JavaUtilArrayList;
@class JavaUtilHashMap;
@protocol JavaUtilList;
@protocol JavaUtilMap;

/*!
 @brief Query and change fields in existing documents either by method
  calls or by FDF merging.
 @author Paulo Soares (psoares@@consiste.pt)
 */
@interface ComAowagieTextPdfAcroFields : NSObject

#pragma mark Public

- (void)decodeGenericDictionaryWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)merged
                                   withComAowagieTextPdfBaseField:(ComAowagieTextPdfBaseField *)tx;

/*!
 @brief Extracts a revision from the document.
 @param field the signature field name
 @return an <CODE>InputStream</CODE> covering the revision. Returns <CODE>null</CODE> if
  it's not a signature field
 @throw IOExceptionon error
 */
- (JavaIoInputStream *)extractRevisionWithNSString:(NSString *)field;

/*!
 @brief Gets the field names that have blank signatures.
 @return the field names that have blank signatures.
 */
- (JavaUtilArrayList *)getBlankSignatureNames;

/*!
 @brief Gets the appearances cache.
 @return the appearances cache
 @since 2.1.5	this method used to return a HashMap
 */
- (id<JavaUtilMap>)getFieldCache;

/*!
 @brief Gets the field structure.
 @param name the name of the field
 @return the field structure or <CODE>null</CODE> if the field
  does not exist
 */
- (ComAowagieTextPdfAcroFields_Item *)getFieldItemWithNSString:(NSString *)name;

/*!
 @brief Gets the field box positions in the document.The return is an array of <CODE>float</CODE>
  multiple of 5.
 For each of this groups the values are: [page, llx, lly, urx,
  ury]. The coordinates have the page rotation in consideration.
 @param name the field name
 @return the positions or <CODE>null</CODE> if field does not exist
 */
- (IOSFloatArray *)getFieldPositionsWithNSString:(NSString *)name;

/*!
 @brief Gets all the fields.The fields are keyed by the fully qualified field name and
  the value is an instance of <CODE>AcroFields.Item</CODE>.
 @return all the fields
 */
- (JavaUtilHashMap *)getFields;

/*!
 @brief Gets the field type.The type can be one of: <CODE>FIELD_TYPE_PUSHBUTTON</CODE>,
  <CODE>FIELD_TYPE_CHECKBOX</CODE>, <CODE>FIELD_TYPE_RADIOBUTTON</CODE>,
  <CODE>FIELD_TYPE_TEXT</CODE>, <CODE>FIELD_TYPE_LIST</CODE>,
  <CODE>FIELD_TYPE_COMBO</CODE> or <CODE>FIELD_TYPE_SIGNATURE</CODE>.
 <p>
  If the field does not exist or is invalid it returns 
 <CODE>FIELD_TYPE_NONE</CODE>.
 @param fieldName the field name
 @return the field type
 */
- (jint)getFieldTypeWithNSString:(NSString *)fieldName;

/*!
 @brief Gets this <CODE>field</CODE> revision.
 @param field the signature field name
 @return the revision or zero if it's not a signature field
 */
- (jint)getRevisionWithNSString:(NSString *)field;

/*!
 @brief Gets the signature dictionary, the one keyed by /V.
 @param name the field name
 @return the signature dictionary keyed by /V or <CODE>null</CODE> if the field is not
  a signature
 */
- (ComAowagieTextPdfPdfDictionary *)getSignatureDictionaryWithNSString:(NSString *)name;

/*!
 @brief Gets the field names that have signatures and are signed.
 @return the field names that have signatures and are signed
 */
- (id<JavaUtilList>)getSignatureNames;

/*!
 @brief Gets the list of substitution fonts.The list is composed of <CODE>BaseFont</CODE> and can be <CODE>null</CODE>.
 The fonts in this list will be used if the original
  font doesn't contain the needed glyphs.
 @return the list
 */
- (JavaUtilArrayList *)getSubstitutionFonts;

/*!
 @brief Gets the total number of revisions this document has.
 @return the total number of revisions
 */
- (jint)getTotalRevisions;

/*!
 @brief Gets the long XFA translated name.
 @param name the name of the field
 @return the long field name
 */
- (NSString *)getTranslatedFieldNameWithNSString:(NSString *)name;

/*!
 @brief Gets the XFA form processor.
 @return the XFA form processor
 */
- (ComAowagieTextPdfXfaForm *)getXfa;

/*!
 @brief Gets the property generateAppearances.
 @return the property generateAppearances
 */
- (jboolean)isGenerateAppearances;

+ (jboolean)isInAPWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)dic
                        withComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)check;

/*!
 @brief Removes a field from the document.If page equals -1 all the fields with this 
 <CODE>name</CODE> are removed from the document otherwise only the fields in
  that particular page are removed.
 @param name the field name
 @param page the page to remove the field from or -1 to remove it from all the pages
 @return <CODE>true</CODE> if the field exists, <CODE>false otherwise</CODE>
 */
- (jboolean)removeFieldWithNSString:(NSString *)name
                            withInt:(jint)page;

/*!
 @brief Removes all the fields from <CODE>page</CODE>.
 @param page the page to remove the fields from
 @return <CODE>true</CODE> if any field was removed, <CODE>false otherwise</CODE>
 */
- (jboolean)removeFieldsFromPageWithInt:(jint)page;

/*!
 @brief Sets the field value.
 @param name the fully qualified field name or the partial name in the case of XFA forms
 @param value the field value
 @throw IOExceptionon error
 @throw DocumentExceptionon error
 @return <CODE>true</CODE> if the field was found and changed, 
 <CODE>false</CODE> otherwise
 */
- (jboolean)setFieldWithNSString:(NSString *)name
                    withNSString:(NSString *)value;

/*!
 @brief Sets the field value and the display string.The display string
  is used to build the appearance in the cases where the value
  is modified by Acrobat with JavaScript and the algorithm is
  known.
 @param name the fully qualified field name or the partial name in the case of XFA forms
 @param value the field value
 @param display the string that is used for the appearance. If  <CODE> null </CODE>
   the  <CODE> value </CODE>  parameter will be used
 @return <CODE>true</CODE> if the field was found and changed, 
 <CODE>false</CODE> otherwise
 @throw IOExceptionon error
 @throw DocumentExceptionon error
 */
- (jboolean)setFieldWithNSString:(NSString *)name
                    withNSString:(NSString *)value
                    withNSString:(NSString *)display;

/*!
 @brief Sets a cache for field appearances.Parsing the existing PDF to
  create a new TextField is time expensive.
 For those tasks that repeatedly
  fill the same PDF with different field values the use of the cache has dramatic
  speed advantages. An example usage: 
 @code

  String pdfFile = ...;// the pdf file used as template
  ArrayList xfdfFiles = ...;// the xfdf file names
  ArrayList pdfOutFiles = ...;// the output file names, one for each element in xpdfFiles
  HashMap cache = new LinkedHashMap();// the appearances cache
  PdfReader originalReader = new PdfReader(pdfFile);
  for (int k = 0; k &lt; xfdfFiles.size(); ++k) {
     PdfReader reader = new PdfReader(originalReader);
     XfdfReader xfdf = new XfdfReader((String)xfdfFiles.get(k));
     PdfStamper stp = new PdfStamper(reader, new FileOutputStream((String)pdfOutFiles.get(k)));
     AcroFields af = stp.getAcroFields();
     af.setFieldCache(cache);
     af.setFields(xfdf);
     stp.close();
  } 
  
@endcode
 @param fieldCache a Map that will carry the cached appearances
 @since 2.1.5	this method used to take a HashMap as parameter
 */
- (void)setFieldCacheWithJavaUtilMap:(id<JavaUtilMap>)fieldCache;

/*!
 @brief Sets the fields by FDF merging.
 @param fdf the FDF form
 @throw IOExceptionon error
 @throw DocumentExceptionon error
 */
- (void)setFieldsWithComAowagieTextPdfFdfReader:(ComAowagieTextPdfFdfReader *)fdf;

/*!
 @brief Sets the fields by XFDF merging.
 @param xfdf the XFDF form
 @throw IOExceptionon error
 @throw DocumentExceptionon error
 */
- (void)setFieldsWithComAowagieTextPdfXfdfReader:(ComAowagieTextPdfXfdfReader *)xfdf;

/*!
 @brief Sets the option to generate appearances.Not generating appearances
  will speed-up form filling but the results can be
  unexpected in Acrobat.
 Don't use it unless your environment is well
  controlled. The default is <CODE>true</CODE>.
 @param generateAppearances the option to generate appearances
 */
- (void)setGenerateAppearancesWithBoolean:(jboolean)generateAppearances;

/*!
 @brief Sets different values in a list selection.
 No appearance is generated yet; nor does the code check if multiple select is allowed.
 @param name the name of the field
 @param value an array with values that need to be selected
 @return true only if the field value was changed
 @since 2.1.4
 */
- (jboolean)setListSelectionWithNSString:(NSString *)name
                       withNSStringArray:(IOSObjectArray *)value;

/*!
 @brief Sets a list of substitution fonts.The list is composed of <CODE>BaseFont</CODE> and can also be <CODE>null</CODE>.
 The fonts in this list will be used if the original
  font doesn't contain the needed glyphs.
 @param substitutionFonts the list
 */
- (void)setSubstitutionFontsWithJavaUtilArrayList:(JavaUtilArrayList *)substitutionFonts;

+ (IOSObjectArray *)splitDAelementsWithNSString:(NSString *)da;

/*!
 @brief Verifies a signature.An example usage is: 
 @code

  KeyStore kall = PdfPKCS7.loadCacertsKeyStore();
  PdfReader reader = new PdfReader("my_signed_doc.pdf");
  AcroFields af = reader.getAcroFields();
  ArrayList names = af.getSignatureNames();
  for (int k = 0; k &lt; names.size(); ++k) {
     String name = (String)names.get(k);
     System.out.println("Signature name: " + name);
     System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));
     PdfPKCS7 pk = af.verifySignature(name);
     Calendar cal = pk.getSignDate();
     Certificate pkc[] = pk.getCertificates();
     System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));
     System.out.println("Document modified: " + !
 pk.verify());
     Object fails[] = PdfPKCS7.verifyCertificates(pkc, kall, null, cal);
     if (fails == null)
         System.out.println("Certificates verified against the KeyStore");
     else
         System.out.println("Certificate failed: " + fails[1]);
  } 
  
@endcode
 @param name the signature field name
 @return a <CODE>PdfPKCS7</CODE> class to continue the verification
 */
- (ComAowagieTextPdfPdfPKCS7 *)verifySignatureWithNSString:(NSString *)name;

/*!
 @brief Verifies a signature.An example usage is: 
 @code

  KeyStore kall = PdfPKCS7.loadCacertsKeyStore();
  PdfReader reader = new PdfReader("my_signed_doc.pdf");
  AcroFields af = reader.getAcroFields();
  ArrayList names = af.getSignatureNames();
  for (int k = 0; k &lt; names.size(); ++k) {
     String name = (String)names.get(k);
     System.out.println("Signature name: " + name);
     System.out.println("Signature covers whole document: " + af.signatureCoversWholeDocument(name));
     PdfPKCS7 pk = af.verifySignature(name);
     Calendar cal = pk.getSignDate();
     Certificate pkc[] = pk.getCertificates();
     System.out.println("Subject: " + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));
     System.out.println("Document modified: " + !
 pk.verify());
     Object fails[] = PdfPKCS7.verifyCertificates(pkc, kall, null, cal);
     if (fails == null)
         System.out.println("Certificates verified against the KeyStore");
     else
         System.out.println("Certificate failed: " + fails[1]);
  } 
  
@endcode
 @param name the signature field name
 @param provider the provider or  <code> null </code>  for the default provider
 @return a <CODE>PdfPKCS7</CODE> class to continue the verification
 */
- (ComAowagieTextPdfPdfPKCS7 *)verifySignatureWithNSString:(NSString *)name
                                              withNSString:(NSString *)provider;

#pragma mark Package-Private

- (instancetype)initWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader
                    withComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer;

- (void)fill;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfAcroFields)

inline jint ComAowagieTextPdfAcroFields_get_DA_FONT(void);
#define ComAowagieTextPdfAcroFields_DA_FONT 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfAcroFields, DA_FONT, jint)

inline jint ComAowagieTextPdfAcroFields_get_DA_SIZE(void);
#define ComAowagieTextPdfAcroFields_DA_SIZE 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfAcroFields, DA_SIZE, jint)

inline jint ComAowagieTextPdfAcroFields_get_DA_COLOR(void);
#define ComAowagieTextPdfAcroFields_DA_COLOR 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfAcroFields, DA_COLOR, jint)

/*!
 @brief A field type invalid or not found.
 */
inline jint ComAowagieTextPdfAcroFields_get_FIELD_TYPE_NONE(void);
#define ComAowagieTextPdfAcroFields_FIELD_TYPE_NONE 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfAcroFields, FIELD_TYPE_NONE, jint)

/*!
 @brief A field type.
 */
inline jint ComAowagieTextPdfAcroFields_get_FIELD_TYPE_PUSHBUTTON(void);
#define ComAowagieTextPdfAcroFields_FIELD_TYPE_PUSHBUTTON 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfAcroFields, FIELD_TYPE_PUSHBUTTON, jint)

/*!
 @brief A field type.
 */
inline jint ComAowagieTextPdfAcroFields_get_FIELD_TYPE_CHECKBOX(void);
#define ComAowagieTextPdfAcroFields_FIELD_TYPE_CHECKBOX 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfAcroFields, FIELD_TYPE_CHECKBOX, jint)

/*!
 @brief A field type.
 */
inline jint ComAowagieTextPdfAcroFields_get_FIELD_TYPE_RADIOBUTTON(void);
#define ComAowagieTextPdfAcroFields_FIELD_TYPE_RADIOBUTTON 3
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfAcroFields, FIELD_TYPE_RADIOBUTTON, jint)

/*!
 @brief A field type.
 */
inline jint ComAowagieTextPdfAcroFields_get_FIELD_TYPE_TEXT(void);
#define ComAowagieTextPdfAcroFields_FIELD_TYPE_TEXT 4
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfAcroFields, FIELD_TYPE_TEXT, jint)

/*!
 @brief A field type.
 */
inline jint ComAowagieTextPdfAcroFields_get_FIELD_TYPE_LIST(void);
#define ComAowagieTextPdfAcroFields_FIELD_TYPE_LIST 5
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfAcroFields, FIELD_TYPE_LIST, jint)

/*!
 @brief A field type.
 */
inline jint ComAowagieTextPdfAcroFields_get_FIELD_TYPE_COMBO(void);
#define ComAowagieTextPdfAcroFields_FIELD_TYPE_COMBO 6
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfAcroFields, FIELD_TYPE_COMBO, jint)

/*!
 @brief A field type.
 */
inline jint ComAowagieTextPdfAcroFields_get_FIELD_TYPE_SIGNATURE(void);
#define ComAowagieTextPdfAcroFields_FIELD_TYPE_SIGNATURE 7
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfAcroFields, FIELD_TYPE_SIGNATURE, jint)

FOUNDATION_EXPORT void ComAowagieTextPdfAcroFields_initWithComAowagieTextPdfPdfReader_withComAowagieTextPdfPdfWriter_(ComAowagieTextPdfAcroFields *self, ComAowagieTextPdfPdfReader *reader, ComAowagieTextPdfPdfWriter *writer);

FOUNDATION_EXPORT ComAowagieTextPdfAcroFields *new_ComAowagieTextPdfAcroFields_initWithComAowagieTextPdfPdfReader_withComAowagieTextPdfPdfWriter_(ComAowagieTextPdfPdfReader *reader, ComAowagieTextPdfPdfWriter *writer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfAcroFields *create_ComAowagieTextPdfAcroFields_initWithComAowagieTextPdfPdfReader_withComAowagieTextPdfPdfWriter_(ComAowagieTextPdfPdfReader *reader, ComAowagieTextPdfPdfWriter *writer);

FOUNDATION_EXPORT IOSObjectArray *ComAowagieTextPdfAcroFields_splitDAelementsWithNSString_(NSString *da);

FOUNDATION_EXPORT jboolean ComAowagieTextPdfAcroFields_isInAPWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfName_(ComAowagieTextPdfPdfDictionary *dic, ComAowagieTextPdfPdfName *check);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfAcroFields)

#endif

#if !defined (ComAowagieTextPdfAcroFields_Item_) && (INCLUDE_ALL_AcroFields || defined(INCLUDE_ComAowagieTextPdfAcroFields_Item))
#define ComAowagieTextPdfAcroFields_Item_

@class ComAowagieTextPdfAcroFields;
@class ComAowagieTextPdfPdfDictionary;
@class ComAowagieTextPdfPdfIndirectReference;
@class ComAowagieTextPdfPdfName;
@class ComAowagieTextPdfPdfObject;
@class JavaLangInteger;
@class JavaUtilArrayList;

/*!
 @brief The field representations for retrieval and modification.
 */
@interface ComAowagieTextPdfAcroFields_Item : NSObject {
 @public
  /*!
   @brief An array of <CODE>PdfDictionary</CODE> where the value tag /V
  is present.
   */
  JavaUtilArrayList *values_;
  /*!
   @brief An array of <CODE>PdfDictionary</CODE> with the widgets.
   */
  JavaUtilArrayList *widgets_;
  /*!
   @brief An array of <CODE>PdfDictionary</CODE> with the widget references.
   */
  JavaUtilArrayList *widget_refs_;
  /*!
   @brief An array of <CODE>PdfDictionary</CODE> with all the field
  and widget tags merged.
   */
  JavaUtilArrayList *merged_;
  /*!
   @brief An array of <CODE>Integer</CODE> with the page numbers where
  the widgets are displayed.
   */
  JavaUtilArrayList *page_;
  /*!
   @brief An array of <CODE>Integer</CODE> with the tab order of the field in the page.
   */
  JavaUtilArrayList *tabOrder_;
}

#pragma mark Public

- (instancetype)init;

/*!
 @brief Retrieve the merged dictionary for the given instance.The merged
  dictionary contains all the keys present in parent fields, though they
  may have been overwritten (or modified?)
 by children.
  Example: a merged radio field dict will contain /V
 @since 2.1.5
 @param idx instance index
 @return the merged dictionary for the given instance
 */
- (ComAowagieTextPdfPdfDictionary *)getMergedWithInt:(jint)idx;

/*!
 @brief Retrieve the page number of the given instance
 @since 2.1.5
 @param idx Index
 @return remember, pages are "1-indexed", not "0-indexed" like field instances.
 */
- (JavaLangInteger *)getPageWithInt:(jint)idx;

/*!
 @brief Gets the tabOrder.
 @since 2.1.5
 @param idx Number of tab
 @return tab index of the given field instance
 */
- (JavaLangInteger *)getTabOrderWithInt:(jint)idx;

/*!
 @brief Retrieve the value dictionary of the given instance
 @since 2.1.5
 @param idx instance index
 @return dictionary storing this instance's value.  It may be shared across instances.
 */
- (ComAowagieTextPdfPdfDictionary *)getValueWithInt:(jint)idx;

/*!
 @brief Retrieve the widget dictionary of the given instance
 @since 2.1.5
 @param idx instance index
 @return The dictionary found in the appropriate page's Annot array.
 */
- (ComAowagieTextPdfPdfDictionary *)getWidgetWithInt:(jint)idx;

/*!
 @brief Retrieve the reference to the given instance
 @since 2.1.5
 @param idx instance index
 @return reference to the given field instance
 */
- (ComAowagieTextPdfPdfIndirectReference *)getWidgetRefWithInt:(jint)idx;

/*!
 @brief Mark all the item dictionaries used matching the given flags
 @since 2.1.5
 @param parentFields Fields to mark
 @param writeFlags WRITE_MERGED is ignored
 */
- (void)markUsedWithComAowagieTextPdfAcroFields:(ComAowagieTextPdfAcroFields *)parentFields
                                        withInt:(jint)writeFlags;

/*!
 @brief Preferred method of determining the number of instances
  of a given field.
 @since 2.1.5
 @return number of instances
 */
- (jint)size;

/*!
 @brief This function writes the given key/value pair to all the instances
  of merged, widget, and/or value, depending on the <code>writeFlags</code> setting
 @since 2.1.5
 @param key you'll never guess what this is for.
 @param value if value is null, the key will be removed
 @param writeFlags ORed together WRITE_* flags
 */
- (void)writeToAllWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key
                withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)value
                                       withInt:(jint)writeFlags;

#pragma mark Package-Private

/*!
 @brief Adds a merged dictionary to this Item.
 @since 2.1.5
 @param mergeDict Dictionary
 */
- (void)addMergedWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)mergeDict;

/*!
 @brief Adds a page to the current Item.
 @since 2.1.5
 @param pg Page
 */
- (void)addPageWithInt:(jint)pg;

/*!
 @brief Adds a tab order value to this Item.
 @since 2.1.5
 @param order Order
 */
- (void)addTabOrderWithInt:(jint)order;

/*!
 @brief Add a value dict to this Item
 @since 2.1.5
 @param value new value dictionary
 */
- (void)addValueWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)value;

/*!
 @brief Add a widget dict to this Item
 @since 2.1.5
 @param widget Widget
 */
- (void)addWidgetWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)widget;

/*!
 @brief Add a widget ref to this Item
 @since 2.1.5
 @param widgRef Widget reference
 */
- (void)addWidgetRefWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)widgRef;

/*!
 @brief forces a page value into the Item.
 @since 2.1.5
 @param idx Index
 @param pg Page
 */
- (void)forcePageWithInt:(jint)idx
                 withInt:(jint)pg;

/*!
 @brief Remove the given instance from this item.It is possible to
  remove all instances using this function.
 @since 2.1.5
 @param killIdx Idx
 */
- (void)removeWithInt:(jint)killIdx;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfAcroFields_Item)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfAcroFields_Item, values_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfAcroFields_Item, widgets_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfAcroFields_Item, widget_refs_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfAcroFields_Item, merged_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfAcroFields_Item, page_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfAcroFields_Item, tabOrder_, JavaUtilArrayList *)

/*!
 @brief <CODE>writeToAll</CODE> constant.
 @since 2.1.5
 */
inline jint ComAowagieTextPdfAcroFields_Item_get_WRITE_MERGED(void);
#define ComAowagieTextPdfAcroFields_Item_WRITE_MERGED 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfAcroFields_Item, WRITE_MERGED, jint)

/*!
 @brief <CODE>writeToAll</CODE> and <CODE>markUsed</CODE> constant.
 @since 2.1.5
 */
inline jint ComAowagieTextPdfAcroFields_Item_get_WRITE_WIDGET(void);
#define ComAowagieTextPdfAcroFields_Item_WRITE_WIDGET 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfAcroFields_Item, WRITE_WIDGET, jint)

/*!
 @brief <CODE>writeToAll</CODE> and <CODE>markUsed</CODE> constant.
 @since 2.1.5
 */
inline jint ComAowagieTextPdfAcroFields_Item_get_WRITE_VALUE(void);
#define ComAowagieTextPdfAcroFields_Item_WRITE_VALUE 4
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfAcroFields_Item, WRITE_VALUE, jint)

FOUNDATION_EXPORT void ComAowagieTextPdfAcroFields_Item_init(ComAowagieTextPdfAcroFields_Item *self);

FOUNDATION_EXPORT ComAowagieTextPdfAcroFields_Item *new_ComAowagieTextPdfAcroFields_Item_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfAcroFields_Item *create_ComAowagieTextPdfAcroFields_Item_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfAcroFields_Item)

#endif

#pragma pop_macro("INCLUDE_ALL_AcroFields")
