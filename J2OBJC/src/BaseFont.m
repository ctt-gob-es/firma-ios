//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/BaseFont.java
//

#include "BaseFont.h"
#include "CJKFont.h"
#include "DocumentException.h"
#include "DocumentFont.h"
#include "EnumerateTTC.h"
#include "GlyphList.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IntHashtable.h"
#include "J2ObjC_source.h"
#include "PRIndirectReference.h"
#include "PdfDictionary.h"
#include "PdfEncodings.h"
#include "PdfIndirectReference.h"
#include "PdfName.h"
#include "PdfNumber.h"
#include "PdfObject.h"
#include "PdfReader.h"
#include "PdfStream.h"
#include "PdfWriter.h"
#include "TrueTypeFont.h"
#include "TrueTypeFontUnicode.h"
#include "Type1Font.h"
#include "java/io/InputStream.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"

#if !__has_feature(objc_arc)
#error "BaseFont must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfBaseFont ()

+ (void)addFontWithComAowagieTextPdfPRIndirectReference:(ComAowagieTextPdfPRIndirectReference *)fontRef
                      withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)hits
                                  withJavaUtilArrayList:(JavaUtilArrayList *)fonts;

+ (void)recourseFontsWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)page
                      withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)hits
                                  withJavaUtilArrayList:(JavaUtilArrayList *)fonts
                                                withInt:(jint)level;

@end

__attribute__((unused)) static void ComAowagieTextPdfBaseFont_addFontWithComAowagieTextPdfPRIndirectReference_withComAowagieTextPdfIntHashtable_withJavaUtilArrayList_(ComAowagieTextPdfPRIndirectReference *fontRef, ComAowagieTextPdfIntHashtable *hits, JavaUtilArrayList *fonts);

__attribute__((unused)) static void ComAowagieTextPdfBaseFont_recourseFontsWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfIntHashtable_withJavaUtilArrayList_withInt_(ComAowagieTextPdfPdfDictionary *page, ComAowagieTextPdfIntHashtable *hits, JavaUtilArrayList *fonts, jint level);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/BaseFont.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfBaseFont)

NSString *ComAowagieTextPdfBaseFont_COURIER = @"Courier";
NSString *ComAowagieTextPdfBaseFont_COURIER_BOLD = @"Courier-Bold";
NSString *ComAowagieTextPdfBaseFont_COURIER_OBLIQUE = @"Courier-Oblique";
NSString *ComAowagieTextPdfBaseFont_COURIER_BOLDOBLIQUE = @"Courier-BoldOblique";
NSString *ComAowagieTextPdfBaseFont_HELVETICA = @"Helvetica";
NSString *ComAowagieTextPdfBaseFont_HELVETICA_BOLD = @"Helvetica-Bold";
NSString *ComAowagieTextPdfBaseFont_HELVETICA_OBLIQUE = @"Helvetica-Oblique";
NSString *ComAowagieTextPdfBaseFont_HELVETICA_BOLDOBLIQUE = @"Helvetica-BoldOblique";
NSString *ComAowagieTextPdfBaseFont_SYMBOL = @"Symbol";
NSString *ComAowagieTextPdfBaseFont_TIMES_ROMAN = @"Times-Roman";
NSString *ComAowagieTextPdfBaseFont_TIMES_BOLD = @"Times-Bold";
NSString *ComAowagieTextPdfBaseFont_TIMES_ITALIC = @"Times-Italic";
NSString *ComAowagieTextPdfBaseFont_TIMES_BOLDITALIC = @"Times-BoldItalic";
NSString *ComAowagieTextPdfBaseFont_ZAPFDINGBATS = @"ZapfDingbats";
NSString *ComAowagieTextPdfBaseFont_IDENTITY_H = @"Identity-H";
NSString *ComAowagieTextPdfBaseFont_IDENTITY_V = @"Identity-V";
NSString *ComAowagieTextPdfBaseFont_CP1250 = @"Cp1250";
NSString *ComAowagieTextPdfBaseFont_CP1252 = @"Cp1252";
NSString *ComAowagieTextPdfBaseFont_CP1257 = @"Cp1257";
NSString *ComAowagieTextPdfBaseFont_WINANSI = @"Cp1252";
NSString *ComAowagieTextPdfBaseFont_MACROMAN = @"MacRoman";
IOSIntArray *ComAowagieTextPdfBaseFont_CHAR_RANGE_LATIN;
IOSIntArray *ComAowagieTextPdfBaseFont_CHAR_RANGE_ARABIC;
IOSIntArray *ComAowagieTextPdfBaseFont_CHAR_RANGE_HEBREW;
IOSIntArray *ComAowagieTextPdfBaseFont_CHAR_RANGE_CYRILLIC;
NSString *ComAowagieTextPdfBaseFont_RESOURCE_PATH = @"./";
NSString *ComAowagieTextPdfBaseFont_notdef = @".notdef";
JavaUtilHashMap *ComAowagieTextPdfBaseFont_fontCache;
JavaUtilHashMap *ComAowagieTextPdfBaseFont_BuiltinFonts14;


#line 67
@implementation ComAowagieTextPdfBaseFont

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 375
- (instancetype)init {
  ComAowagieTextPdfBaseFont_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 386
+ (ComAowagieTextPdfBaseFont *)createFont {
  return ComAowagieTextPdfBaseFont_createFont();
}


#line 438
+ (ComAowagieTextPdfBaseFont *)createFontWithNSString:(NSString *)name
                                         withNSString:(NSString *)encoding
                                          withBoolean:(jboolean)embedded {
  return ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_(name, encoding, embedded);
}


#line 492
+ (ComAowagieTextPdfBaseFont *)createFontWithNSString:(NSString *)name
                                         withNSString:(NSString *)encoding
                                          withBoolean:(jboolean)embedded
                                          withBoolean:(jboolean)forceRead {
  return ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_(name, encoding, embedded, forceRead);
}


#line 546
+ (ComAowagieTextPdfBaseFont *)createFontWithNSString:(NSString *)name
                                         withNSString:(NSString *)encoding
                                          withBoolean:(jboolean)embedded
                                          withBoolean:(jboolean)cached
                                        withByteArray:(IOSByteArray *)ttfAfm
                                        withByteArray:(IOSByteArray *)pfb {
  return ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_withByteArray_withByteArray_(name, encoding, embedded, cached, ttfAfm, pfb);
}


#line 603
+ (ComAowagieTextPdfBaseFont *)createFontWithNSString:(NSString *)name
                                         withNSString:(NSString *)encoding
                                          withBoolean:(jboolean)embedded
                                          withBoolean:(jboolean)cached
                                        withByteArray:(IOSByteArray *)ttfAfm
                                        withByteArray:(IOSByteArray *)pfb
                                          withBoolean:(jboolean)noThrow {
  return ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_withByteArray_withByteArray_withBoolean_(name, encoding, embedded, cached, ttfAfm, pfb, noThrow);
}


#line 661
+ (ComAowagieTextPdfBaseFont *)createFontWithNSString:(NSString *)name
                                         withNSString:(NSString *)encoding
                                          withBoolean:(jboolean)embedded
                                          withBoolean:(jboolean)cached
                                        withByteArray:(IOSByteArray *)ttfAfm
                                        withByteArray:(IOSByteArray *)pfb
                                          withBoolean:(jboolean)noThrow
                                          withBoolean:(jboolean)forceRead {
  return ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_withByteArray_withByteArray_withBoolean_withBoolean_(name, encoding, embedded, cached, ttfAfm, pfb, noThrow, forceRead);
}


#line 719
+ (ComAowagieTextPdfBaseFont *)createFontWithComAowagieTextPdfPRIndirectReference:(ComAowagieTextPdfPRIndirectReference *)fontRef {
  return ComAowagieTextPdfBaseFont_createFontWithComAowagieTextPdfPRIndirectReference_(fontRef);
}


#line 728
+ (NSString *)getBaseNameWithNSString:(NSString *)name {
  return ComAowagieTextPdfBaseFont_getBaseNameWithNSString_(name);
}


#line 746
+ (NSString *)normalizeEncodingWithNSString:(NSString *)enc {
  return ComAowagieTextPdfBaseFont_normalizeEncodingWithNSString_(enc);
}


#line 759
- (void)createEncoding {
  if ([((NSString *) nil_chk(self->encoding_)) java_hasPrefix:@"#"]) {
    self->specialMap_ = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
    JavaUtilStringTokenizer *tok = new_JavaUtilStringTokenizer_initWithNSString_withNSString_([((NSString *) nil_chk(self->encoding_)) java_substring:1], @" ,\t\n\x0d\x0c");
    if ([((NSString *) nil_chk([tok nextToken])) isEqual:@"full"]) {
      while ([tok hasMoreTokens]) {
        NSString *order = [tok nextToken];
        NSString *name = [tok nextToken];
        jchar uni = (jchar) JavaLangInteger_parseIntWithNSString_withInt_([tok nextToken], 16);
        jint orderK;
        if ([((NSString *) nil_chk(order)) java_hasPrefix:@"'"]) {
          orderK = [order charAtWithInt:1];
        }
        else {
          
#line 772
          orderK = JavaLangInteger_parseIntWithNSString_(order);
        }
        orderK %= 256;
        [((ComAowagieTextPdfIntHashtable *) nil_chk(self->specialMap_)) putWithInt:uni withInt:orderK];
        (void) IOSObjectArray_Set(nil_chk(self->differences_), orderK, name);
        *IOSCharArray_GetRef(nil_chk(self->unicodeDifferences_), orderK) = uni;
        *IOSIntArray_GetRef(nil_chk(self->widths_), orderK) = [self getRawWidthWithInt:uni withNSString:name];
        (void) IOSObjectArray_Set(nil_chk(self->charBBoxes_), orderK, [self getRawCharBBoxWithInt:uni withNSString:name]);
      }
    }
    else {
      jint k = 0;
      if ([tok hasMoreTokens]) {
        k = JavaLangInteger_parseIntWithNSString_([tok nextToken]);
      }
      while ([tok hasMoreTokens] && k < 256) {
        NSString *hex = [tok nextToken];
        jint uni = JreIntMod(JavaLangInteger_parseIntWithNSString_withInt_(hex, 16), (jint) 0x10000);
        NSString *name = ComAowagieTextPdfGlyphList_unicodeToNameWithInt_(uni);
        if (name != nil) {
          [((ComAowagieTextPdfIntHashtable *) nil_chk(self->specialMap_)) putWithInt:uni withInt:k];
          (void) IOSObjectArray_Set(nil_chk(self->differences_), k, name);
          *IOSCharArray_GetRef(nil_chk(self->unicodeDifferences_), k) = (jchar) uni;
          *IOSIntArray_GetRef(nil_chk(self->widths_), k) = [self getRawWidthWithInt:uni withNSString:name];
          (void) IOSObjectArray_Set(nil_chk(self->charBBoxes_), k, [self getRawCharBBoxWithInt:uni withNSString:name]);
          ++k;
        }
      }
    }
    for (jint k = 0; k < 256; ++k) {
      if (IOSObjectArray_Get(nil_chk(self->differences_), k) == nil) {
        (void) IOSObjectArray_Set(self->differences_, k, ComAowagieTextPdfBaseFont_notdef);
      }
    }
  }
  else if (self->fontSpecific_) {
    for (jint k = 0; k < 256; ++k) {
      *IOSIntArray_GetRef(nil_chk(self->widths_), k) = [self getRawWidthWithInt:k withNSString:nil];
      (void) IOSObjectArray_Set(nil_chk(self->charBBoxes_), k, [self getRawCharBBoxWithInt:k withNSString:nil]);
    }
  }
  else {
    NSString *s;
    NSString *name;
    jchar c;
    IOSByteArray *b = [IOSByteArray newArrayWithLength:1];
    for (jint k = 0; k < 256; ++k) {
      *IOSByteArray_GetRef(b, 0) = (jbyte) k;
      s = ComAowagieTextPdfPdfEncodings_convertToStringWithByteArray_withNSString_(b, self->encoding_);
      if ([((NSString *) nil_chk(s)) java_length] > 0) {
        c = [s charAtWithInt:0];
      }
      else {
        c = '?';
      }
      name = ComAowagieTextPdfGlyphList_unicodeToNameWithInt_(c);
      if (name == nil) {
        name = ComAowagieTextPdfBaseFont_notdef;
      }
      (void) IOSObjectArray_Set(nil_chk(self->differences_), k, name);
      *IOSCharArray_GetRef(nil_chk(self->unicodeDifferences_), k) = c;
      *IOSIntArray_GetRef(nil_chk(self->widths_), k) = [self getRawWidthWithInt:c withNSString:name];
      (void) IOSObjectArray_Set(nil_chk(self->charBBoxes_), k, [self getRawCharBBoxWithInt:c withNSString:name]);
    }
  }
}


#line 846
- (jint)getRawWidthWithInt:(jint)c
              withNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 854
- (jint)getKerningWithInt:(jint)char1
                  withInt:(jint)char2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 863
- (jboolean)setKerningWithInt:(jint)char1
                      withInt:(jint)char2
                      withInt:(jint)kern {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 870
- (jint)getWidthWithInt:(jint)char1 {
  if (self->fastWinansi_) {
    if (char1 < 128 || (char1 >= 160 && char1 <= 255)) {
      return IOSIntArray_Get(nil_chk(self->widths_), char1);
    }
    else {
      
#line 875
      return IOSIntArray_Get(nil_chk(self->widths_), [((ComAowagieTextPdfIntHashtable *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfEncodings, winansi))) getWithInt:char1]);
    }
  }
  else {
    jint total = 0;
    IOSByteArray *mbytes = [self convertToBytesWithInt:(jchar) char1];
    {
      IOSByteArray *a__ =
#line 881
      mbytes;
      jbyte const *b__ = ((IOSByteArray *) nil_chk(a__))->buffer_;
      jbyte const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jbyte mbyte = *b__++;
        
#line 882
        total += IOSIntArray_Get(nil_chk(self->widths_), (jint) 0xff & mbyte);
      }
    }
    
#line 884
    return total;
  }
}


#line 893
- (jint)getWidthWithNSString:(NSString *)text {
  jint total = 0;
  if (self->fastWinansi_) {
    jint len = [((NSString *) nil_chk(text)) java_length];
    for (jint k = 0; k < len; ++k) {
      jchar char1 = [text charAtWithInt:k];
      if (char1 < 128 || (char1 >= 160 && char1 <= 255)) {
        total += IOSIntArray_Get(nil_chk(self->widths_), char1);
      }
      else {
        
#line 902
        total += IOSIntArray_Get(nil_chk(self->widths_), [((ComAowagieTextPdfIntHashtable *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfEncodings, winansi))) getWithInt:char1]);
      }
    }
    return total;
  }
  else {
    IOSByteArray *mbytes = [self convertToBytesWithNSString:text];
    {
      IOSByteArray *a__ =
#line 909
      mbytes;
      jbyte const *b__ = ((IOSByteArray *) nil_chk(a__))->buffer_;
      jbyte const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jbyte mbyte = *b__++;
        
#line 910
        total += IOSIntArray_Get(nil_chk(self->widths_), (jint) 0xff & mbyte);
      }
    }
  }
  
#line 913
  return total;
}


#line 922
- (jint)getDescentWithNSString:(NSString *)text {
  jint min = 0;
  IOSCharArray *chars = [((NSString *) nil_chk(text)) java_toCharArray];
  {
    IOSCharArray *a__ =
#line 925
    chars;
    jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
    jchar const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jchar c = *b__++;
      
#line 926
      IOSIntArray *bbox = [self getCharBBoxWithInt:c];
      if (bbox != nil && IOSIntArray_Get(bbox, 1) < min) {
        min = IOSIntArray_Get(bbox, 1);
      }
    }
  }
  
#line 931
  return min;
}


#line 940
- (jint)getAscentWithNSString:(NSString *)text {
  jint max = 0;
  IOSCharArray *chars = [((NSString *) nil_chk(text)) java_toCharArray];
  {
    IOSCharArray *a__ =
#line 943
    chars;
    jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
    jchar const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jchar c = *b__++;
      
#line 944
      IOSIntArray *bbox = [self getCharBBoxWithInt:c];
      if (bbox != nil && IOSIntArray_Get(bbox, 3) > max) {
        max = IOSIntArray_Get(bbox, 3);
      }
    }
  }
  
#line 949
  return max;
}


#line 959
- (jfloat)getDescentPointWithNSString:(NSString *)text
                            withFloat:(jfloat)fontSize {
  return [self getDescentWithNSString:text] * 0.001f * fontSize;
}


#line 971
- (jfloat)getAscentPointWithNSString:(NSString *)text
                           withFloat:(jfloat)fontSize {
  return [self getAscentWithNSString:text] * 0.001f * fontSize;
}


#line 984
- (jfloat)getWidthPointKernedWithNSString:(NSString *)text
                                withFloat:(jfloat)fontSize {
  
#line 985
  jfloat size = [self getWidthWithNSString:text] * 0.001f * fontSize;
  if (![self hasKernPairs]) {
    return size;
  }
  jint len = [((NSString *) nil_chk(text)) java_length] - 1;
  jint kern = 0;
  IOSCharArray *c = [text java_toCharArray];
  for (jint k = 0; k < len; ++k) {
    kern += [self getKerningWithInt:IOSCharArray_Get(nil_chk(c), k) withInt:IOSCharArray_Get(c, k + 1)];
  }
  return size + kern * 0.001f * fontSize;
}


#line 1004
- (jfloat)getWidthPointWithNSString:(NSString *)text
                          withFloat:(jfloat)fontSize {
  
#line 1005
  return [self getWidthWithNSString:text] * 0.001f * fontSize;
}


#line 1014
- (jfloat)getWidthPointWithInt:(jint)char1
                     withFloat:(jfloat)fontSize {
  
#line 1015
  return [self getWidthWithInt:char1] * 0.001f * fontSize;
}


#line 1024
- (IOSByteArray *)convertToBytesWithNSString:(NSString *)text {
  if (self->directTextToByte_) {
    return ComAowagieTextPdfPdfEncodings_convertToBytesWithNSString_withNSString_(text, nil);
  }
  if (self->specialMap_ != nil) {
    IOSByteArray *b = [IOSByteArray newArrayWithLength:[((NSString *) nil_chk(text)) java_length]];
    jint ptr = 0;
    jint length = [text java_length];
    for (jint k = 0; k < length; ++k) {
      jchar c = [text charAtWithInt:k];
      if ([((ComAowagieTextPdfIntHashtable *) nil_chk(self->specialMap_)) containsKeyWithInt:c]) {
        *IOSByteArray_GetRef(b, ptr++) = (jbyte) [((ComAowagieTextPdfIntHashtable *) nil_chk(self->specialMap_)) getWithInt:c];
      }
    }
    if (ptr < length) {
      IOSByteArray *b2 = [IOSByteArray newArrayWithLength:ptr];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, b2, 0, ptr);
      return b2;
    }
    else {
      
#line 1043
      return b;
    }
  }
  return ComAowagieTextPdfPdfEncodings_convertToBytesWithNSString_withNSString_(text, self->encoding_);
}


#line 1055
- (IOSByteArray *)convertToBytesWithInt:(jint)char1 {
  if (self->directTextToByte_) {
    return ComAowagieTextPdfPdfEncodings_convertToBytesWithChar_withNSString_((jchar) char1, nil);
  }
  if (self->specialMap_ != nil) {
    if ([self->specialMap_ containsKeyWithInt:char1]) {
      return [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) [((ComAowagieTextPdfIntHashtable *) nil_chk(self->specialMap_)) getWithInt:char1] } count:1];
    }
    else {
      
#line 1063
      return [IOSByteArray newArrayWithLength:0];
    }
  }
  return ComAowagieTextPdfPdfEncodings_convertToBytesWithChar_withNSString_((jchar) char1, self->encoding_);
}


#line 1076
- (void)writeFontWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
      withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)ref
                              withNSObjectArray:(IOSObjectArray *)params {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 1087
- (ComAowagieTextPdfPdfStream *)getFullFontStream {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 1092
- (NSString *)getEncoding {
  return self->encoding_;
}


#line 1105
- (jfloat)getFontDescriptorWithInt:(jint)key
                         withFloat:(jfloat)fontSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 1111
- (jint)getFontType {
  return self->fontType_;
}


#line 1118
- (jboolean)isEmbedded {
  return self->embedded_;
}


#line 1125
- (jboolean)isFontSpecific {
  return self->fontSpecific_;
}


#line 1132
+ (NSString *)createSubsetPrefix {
  return ComAowagieTextPdfBaseFont_createSubsetPrefix();
}


#line 1144
- (jchar)getUnicodeDifferencesWithInt:(jint)index {
  return IOSCharArray_Get(nil_chk(self->unicodeDifferences_), index);
}


#line 1151
- (NSString *)getPostscriptFontName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 1158
- (void)setPostscriptFontNameWithNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 1168
- (IOSObjectArray *)getFullFontName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 1179
- (IOSObjectArray *)getAllNameEntries {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 1194
+ (IOSObjectArray *)getFullFontNameWithNSString:(NSString *)name
                                   withNSString:(NSString *)encoding
                                  withByteArray:(IOSByteArray *)ttfAfm {
  return ComAowagieTextPdfBaseFont_getFullFontNameWithNSString_withNSString_withByteArray_(name, encoding, ttfAfm);
}


#line 1213
+ (IOSObjectArray *)getAllFontNamesWithNSString:(NSString *)name
                                   withNSString:(NSString *)encoding
                                  withByteArray:(IOSByteArray *)ttfAfm {
  return ComAowagieTextPdfBaseFont_getAllFontNamesWithNSString_withNSString_withByteArray_(name, encoding, ttfAfm);
}


#line 1233
+ (IOSObjectArray *)getAllNameEntriesWithNSString:(NSString *)name
                                     withNSString:(NSString *)encoding
                                    withByteArray:(IOSByteArray *)ttfAfm {
  return ComAowagieTextPdfBaseFont_getAllNameEntriesWithNSString_withNSString_withByteArray_(name, encoding, ttfAfm);
}


#line 1252
- (IOSObjectArray *)getFamilyFontName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getCodePagesSupported {
  return [IOSObjectArray newArrayWithLength:0 type:NSString_class_()];
}


#line 1269
+ (IOSObjectArray *)enumerateTTCNamesWithNSString:(NSString *)ttcFile {
  return ComAowagieTextPdfBaseFont_enumerateTTCNamesWithNSString_(ttcFile);
}


#line 1280
+ (IOSObjectArray *)enumerateTTCNamesWithByteArray:(IOSByteArray *)ttcArray {
  return ComAowagieTextPdfBaseFont_enumerateTTCNamesWithByteArray_(ttcArray);
}


#line 1287
- (IOSIntArray *)getWidths {
  return self->widths_;
}


#line 1294
- (IOSObjectArray *)getDifferences {
  return self->differences_;
}


#line 1301
- (IOSCharArray *)getUnicodeDifferences {
  return self->unicodeDifferences_;
}


#line 1308
- (jboolean)isForceWidthsOutput {
  return self->forceWidthsOutput_;
}


#line 1317
- (void)setForceWidthsOutputWithBoolean:(jboolean)forceWidthsOutput {
  self->forceWidthsOutput_ = forceWidthsOutput;
}


#line 1325
- (jboolean)isDirectTextToByte {
  return self->directTextToByte_;
}


#line 1334
- (void)setDirectTextToByteWithBoolean:(jboolean)directTextToByte {
  self->directTextToByte_ = directTextToByte;
}


#line 1342
- (jboolean)isSubset {
  return self->subset_;
}


#line 1353
- (void)setSubsetWithBoolean:(jboolean)subset {
  self->subset_ = subset;
}


#line 1362
+ (JavaIoInputStream *)getResourceStreamWithNSString:(NSString *)key {
  return ComAowagieTextPdfBaseFont_getResourceStreamWithNSString_(key);
}


#line 1372
+ (JavaIoInputStream *)getResourceStreamWithNSString:(NSString *)key
                             withJavaLangClassLoader:(JavaLangClassLoader *)loader {
  return ComAowagieTextPdfBaseFont_getResourceStreamWithNSString_withJavaLangClassLoader_(key, loader);
}


#line 1406
- (jint)getUnicodeEquivalentWithInt:(jint)c {
  return c;
}


#line 1415
- (jint)getCidCodeWithInt:(jint)c {
  return c;
}


#line 1422
- (jboolean)hasKernPairs {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 1430
- (jboolean)charExistsWithInt:(jint)c {
  IOSByteArray *b = [self convertToBytesWithInt:c];
  return ((IOSByteArray *) nil_chk(b))->size_ > 0;
}


#line 1442
- (jboolean)setCharAdvanceWithInt:(jint)c
                          withInt:(jint)advance {
  
#line 1443
  IOSByteArray *b = [self convertToBytesWithInt:c];
  if (((IOSByteArray *) nil_chk(b))->size_ == 0) {
    return false;
  }
  *IOSIntArray_GetRef(nil_chk(self->widths_), (jint) 0xff & IOSByteArray_Get(b, 0)) = advance;
  return true;
}


#line 1451
+ (void)addFontWithComAowagieTextPdfPRIndirectReference:(ComAowagieTextPdfPRIndirectReference *)fontRef
                      withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)hits
                                  withJavaUtilArrayList:(JavaUtilArrayList *)fonts {
  ComAowagieTextPdfBaseFont_addFontWithComAowagieTextPdfPRIndirectReference_withComAowagieTextPdfIntHashtable_withJavaUtilArrayList_(fontRef, hits, fonts);
}


#line 1466
+ (void)recourseFontsWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)page
                      withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)hits
                                  withJavaUtilArrayList:(JavaUtilArrayList *)fonts
                                                withInt:(jint)level {
  ComAowagieTextPdfBaseFont_recourseFontsWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfIntHashtable_withJavaUtilArrayList_withInt_(page, hits, fonts, level);
}


#line 1504
+ (JavaUtilArrayList *)getDocumentFontsWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader {
  return ComAowagieTextPdfBaseFont_getDocumentFontsWithComAowagieTextPdfPdfReader_(reader);
}


#line 1522
+ (JavaUtilArrayList *)getDocumentFontsWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader
                                                              withInt:(jint)page {
  return ComAowagieTextPdfBaseFont_getDocumentFontsWithComAowagieTextPdfPdfReader_withInt_(reader, page);
}


#line 1538
- (IOSIntArray *)getCharBBoxWithInt:(jint)c {
  IOSByteArray *b = [self convertToBytesWithInt:c];
  if (((IOSByteArray *) nil_chk(b))->size_ == 0) {
    return nil;
  }
  else {
    
#line 1543
    return IOSObjectArray_Get(nil_chk(self->charBBoxes_), IOSByteArray_Get(b, 0) & (jint) 0xff);
  }
}


#line 1547
- (IOSIntArray *)getRawCharBBoxWithInt:(jint)c
                          withNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 1556
- (void)correctArabicAdvance {
  for (jchar c = 0x064b; c <= 0x0658; ++c) {
    [self setCharAdvanceWithInt:c withInt:0];
  }
  [self setCharAdvanceWithInt:0x0670 withInt:0];
  for (jchar c = 0x06d6; c <= 0x06dc; ++c) {
    [self setCharAdvanceWithInt:c withInt:0];
  }
  for (jchar c = 0x06df; c <= 0x06e4; ++c) {
    [self setCharAdvanceWithInt:c withInt:0];
  }
  for (jchar c = 0x06e7; c <= 0x06e8; ++c) {
    [self setCharAdvanceWithInt:c withInt:0];
  }
  for (jchar c = 0x06ea; c <= 0x06ed; ++c) {
    [self setCharAdvanceWithInt:c withInt:0];
  }
}


#line 1581
- (void)addSubsetRangeWithIntArray:(IOSIntArray *)range {
  if (self->subsetRanges_ == nil) {
    self->subsetRanges_ = new_JavaUtilArrayList_init();
  }
  [self->subsetRanges_ addWithId:range];
}


#line 1593
- (jint)getCompressionLevel {
  return self->compressionLevel_;
}


#line 1602
- (void)setCompressionLevelWithInt:(jint)compressionLevel {
  if (compressionLevel < ComAowagieTextPdfPdfStream_NO_COMPRESSION || compressionLevel > ComAowagieTextPdfPdfStream_BEST_COMPRESSION) {
    self->compressionLevel_ = ComAowagieTextPdfPdfStream_DEFAULT_COMPRESSION;
  }
  else {
    
#line 1606
    self->compressionLevel_ = compressionLevel;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfBaseFont;", 0x9, -1, -1, 0, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfBaseFont;", 0x9, 1, 2, 0, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfBaseFont;", 0x9, 1, 3, 0, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfBaseFont;", 0x9, 1, 4, 0, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfBaseFont;", 0x9, 1, 5, 0, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfBaseFont;", 0x9, 1, 6, 0, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfBaseFont;", 0x9, 1, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xc, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xc, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x400, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 13, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 19, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 20, 9, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 23, 22, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 24, 22, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 25, 22, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 27, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 27, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 28, 29, 0, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfStream;", 0x400, -1, -1, 30, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x401, 31, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x0, 32, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 33, 9, -1, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x9, 34, 35, 0, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 36, 35, 0, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x9, 37, 35, 0, -1, -1, -1 },
    { NULL, "[[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 38, 9, 0, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 38, 39, 0, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 41, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 41, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 41, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x9, 44, 9, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x9, 44, 45, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 46, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 47, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 48, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 49, 14, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 50, 51, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 52, 53, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x9, 54, 55, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x9, 54, 56, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 57, 18, -1, -1, -1, -1 },
    { NULL, "[I", 0x404, 58, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 59, 60, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 61, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createFont);
  methods[2].selector = @selector(createFontWithNSString:withNSString:withBoolean:);
  methods[3].selector = @selector(createFontWithNSString:withNSString:withBoolean:withBoolean:);
  methods[4].selector = @selector(createFontWithNSString:withNSString:withBoolean:withBoolean:withByteArray:withByteArray:);
  methods[5].selector = @selector(createFontWithNSString:withNSString:withBoolean:withBoolean:withByteArray:withByteArray:withBoolean:);
  methods[6].selector = @selector(createFontWithNSString:withNSString:withBoolean:withBoolean:withByteArray:withByteArray:withBoolean:withBoolean:);
  methods[7].selector = @selector(createFontWithComAowagieTextPdfPRIndirectReference:);
  methods[8].selector = @selector(getBaseNameWithNSString:);
  methods[9].selector = @selector(normalizeEncodingWithNSString:);
  methods[10].selector = @selector(createEncoding);
  methods[11].selector = @selector(getRawWidthWithInt:withNSString:);
  methods[12].selector = @selector(getKerningWithInt:withInt:);
  methods[13].selector = @selector(setKerningWithInt:withInt:withInt:);
  methods[14].selector = @selector(getWidthWithInt:);
  methods[15].selector = @selector(getWidthWithNSString:);
  methods[16].selector = @selector(getDescentWithNSString:);
  methods[17].selector = @selector(getAscentWithNSString:);
  methods[18].selector = @selector(getDescentPointWithNSString:withFloat:);
  methods[19].selector = @selector(getAscentPointWithNSString:withFloat:);
  methods[20].selector = @selector(getWidthPointKernedWithNSString:withFloat:);
  methods[21].selector = @selector(getWidthPointWithNSString:withFloat:);
  methods[22].selector = @selector(getWidthPointWithInt:withFloat:);
  methods[23].selector = @selector(convertToBytesWithNSString:);
  methods[24].selector = @selector(convertToBytesWithInt:);
  methods[25].selector = @selector(writeFontWithComAowagieTextPdfPdfWriter:withComAowagieTextPdfPdfIndirectReference:withNSObjectArray:);
  methods[26].selector = @selector(getFullFontStream);
  methods[27].selector = @selector(getEncoding);
  methods[28].selector = @selector(getFontDescriptorWithInt:withFloat:);
  methods[29].selector = @selector(getFontType);
  methods[30].selector = @selector(isEmbedded);
  methods[31].selector = @selector(isFontSpecific);
  methods[32].selector = @selector(createSubsetPrefix);
  methods[33].selector = @selector(getUnicodeDifferencesWithInt:);
  methods[34].selector = @selector(getPostscriptFontName);
  methods[35].selector = @selector(setPostscriptFontNameWithNSString:);
  methods[36].selector = @selector(getFullFontName);
  methods[37].selector = @selector(getAllNameEntries);
  methods[38].selector = @selector(getFullFontNameWithNSString:withNSString:withByteArray:);
  methods[39].selector = @selector(getAllFontNamesWithNSString:withNSString:withByteArray:);
  methods[40].selector = @selector(getAllNameEntriesWithNSString:withNSString:withByteArray:);
  methods[41].selector = @selector(getFamilyFontName);
  methods[42].selector = @selector(getCodePagesSupported);
  methods[43].selector = @selector(enumerateTTCNamesWithNSString:);
  methods[44].selector = @selector(enumerateTTCNamesWithByteArray:);
  methods[45].selector = @selector(getWidths);
  methods[46].selector = @selector(getDifferences);
  methods[47].selector = @selector(getUnicodeDifferences);
  methods[48].selector = @selector(isForceWidthsOutput);
  methods[49].selector = @selector(setForceWidthsOutputWithBoolean:);
  methods[50].selector = @selector(isDirectTextToByte);
  methods[51].selector = @selector(setDirectTextToByteWithBoolean:);
  methods[52].selector = @selector(isSubset);
  methods[53].selector = @selector(setSubsetWithBoolean:);
  methods[54].selector = @selector(getResourceStreamWithNSString:);
  methods[55].selector = @selector(getResourceStreamWithNSString:withJavaLangClassLoader:);
  methods[56].selector = @selector(getUnicodeEquivalentWithInt:);
  methods[57].selector = @selector(getCidCodeWithInt:);
  methods[58].selector = @selector(hasKernPairs);
  methods[59].selector = @selector(charExistsWithInt:);
  methods[60].selector = @selector(setCharAdvanceWithInt:withInt:);
  methods[61].selector = @selector(addFontWithComAowagieTextPdfPRIndirectReference:withComAowagieTextPdfIntHashtable:withJavaUtilArrayList:);
  methods[62].selector = @selector(recourseFontsWithComAowagieTextPdfPdfDictionary:withComAowagieTextPdfIntHashtable:withJavaUtilArrayList:withInt:);
  methods[63].selector = @selector(getDocumentFontsWithComAowagieTextPdfPdfReader:);
  methods[64].selector = @selector(getDocumentFontsWithComAowagieTextPdfPdfReader:withInt:);
  methods[65].selector = @selector(getCharBBoxWithInt:);
  methods[66].selector = @selector(getRawCharBBoxWithInt:withNSString:);
  methods[67].selector = @selector(correctArabicAdvance);
  methods[68].selector = @selector(addSubsetRangeWithIntArray:);
  methods[69].selector = @selector(getCompressionLevel);
  methods[70].selector = @selector(setCompressionLevelWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COURIER", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 62, -1, -1 },
    { "COURIER_BOLD", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 63, -1, -1 },
    { "COURIER_OBLIQUE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 64, -1, -1 },
    { "COURIER_BOLDOBLIQUE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 65, -1, -1 },
    { "HELVETICA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 66, -1, -1 },
    { "HELVETICA_BOLD", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 67, -1, -1 },
    { "HELVETICA_OBLIQUE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 68, -1, -1 },
    { "HELVETICA_BOLDOBLIQUE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 69, -1, -1 },
    { "SYMBOL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 70, -1, -1 },
    { "TIMES_ROMAN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 71, -1, -1 },
    { "TIMES_BOLD", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 72, -1, -1 },
    { "TIMES_ITALIC", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 73, -1, -1 },
    { "TIMES_BOLDITALIC", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 74, -1, -1 },
    { "ZAPFDINGBATS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 75, -1, -1 },
    { "ASCENT", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_ASCENT, 0x19, -1, -1, -1, -1 },
    { "CAPHEIGHT", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_CAPHEIGHT, 0x19, -1, -1, -1, -1 },
    { "DESCENT", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_DESCENT, 0x19, -1, -1, -1, -1 },
    { "ITALICANGLE", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_ITALICANGLE, 0x19, -1, -1, -1, -1 },
    { "BBOXLLX", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_BBOXLLX, 0x19, -1, -1, -1, -1 },
    { "BBOXLLY", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_BBOXLLY, 0x19, -1, -1, -1, -1 },
    { "BBOXURX", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_BBOXURX, 0x19, -1, -1, -1, -1 },
    { "BBOXURY", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_BBOXURY, 0x19, -1, -1, -1, -1 },
    { "AWT_ASCENT", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_AWT_ASCENT, 0x19, -1, -1, -1, -1 },
    { "AWT_DESCENT", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_AWT_DESCENT, 0x19, -1, -1, -1, -1 },
    { "AWT_LEADING", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_AWT_LEADING, 0x19, -1, -1, -1, -1 },
    { "AWT_MAXADVANCE", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_AWT_MAXADVANCE, 0x19, -1, -1, -1, -1 },
    { "UNDERLINE_POSITION", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_UNDERLINE_POSITION, 0x19, -1, -1, -1, -1 },
    { "UNDERLINE_THICKNESS", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_UNDERLINE_THICKNESS, 0x19, -1, -1, -1, -1 },
    { "STRIKETHROUGH_POSITION", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_STRIKETHROUGH_POSITION, 0x19, -1, -1, -1, -1 },
    { "STRIKETHROUGH_THICKNESS", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_STRIKETHROUGH_THICKNESS, 0x19, -1, -1, -1, -1 },
    { "SUBSCRIPT_SIZE", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_SUBSCRIPT_SIZE, 0x19, -1, -1, -1, -1 },
    { "SUBSCRIPT_OFFSET", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_SUBSCRIPT_OFFSET, 0x19, -1, -1, -1, -1 },
    { "SUPERSCRIPT_SIZE", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_SUPERSCRIPT_SIZE, 0x19, -1, -1, -1, -1 },
    { "SUPERSCRIPT_OFFSET", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_SUPERSCRIPT_OFFSET, 0x19, -1, -1, -1, -1 },
    { "FONT_TYPE_T1", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_FONT_TYPE_T1, 0x19, -1, -1, -1, -1 },
    { "FONT_TYPE_TT", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_FONT_TYPE_TT, 0x19, -1, -1, -1, -1 },
    { "FONT_TYPE_CJK", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_FONT_TYPE_CJK, 0x19, -1, -1, -1, -1 },
    { "FONT_TYPE_TTUNI", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_FONT_TYPE_TTUNI, 0x19, -1, -1, -1, -1 },
    { "FONT_TYPE_DOCUMENT", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_FONT_TYPE_DOCUMENT, 0x19, -1, -1, -1, -1 },
    { "FONT_TYPE_T3", "I", .constantValue.asInt = ComAowagieTextPdfBaseFont_FONT_TYPE_T3, 0x19, -1, -1, -1, -1 },
    { "IDENTITY_H", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 76, -1, -1 },
    { "IDENTITY_V", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 77, -1, -1 },
    { "CP1250", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 78, -1, -1 },
    { "CP1252", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 79, -1, -1 },
    { "CP1257", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 80, -1, -1 },
    { "WINANSI", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 81, -1, -1 },
    { "MACROMAN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 82, -1, -1 },
    { "CHAR_RANGE_LATIN", "[I", .constantValue.asLong = 0, 0x19, -1, 83, -1, -1 },
    { "CHAR_RANGE_ARABIC", "[I", .constantValue.asLong = 0, 0x19, -1, 84, -1, -1 },
    { "CHAR_RANGE_HEBREW", "[I", .constantValue.asLong = 0, 0x19, -1, 85, -1, -1 },
    { "CHAR_RANGE_CYRILLIC", "[I", .constantValue.asLong = 0, 0x19, -1, 86, -1, -1 },
    { "EMBEDDED", "Z", .constantValue.asBOOL = ComAowagieTextPdfBaseFont_EMBEDDED, 0x19, -1, -1, -1, -1 },
    { "NOT_EMBEDDED", "Z", .constantValue.asBOOL = ComAowagieTextPdfBaseFont_NOT_EMBEDDED, 0x19, -1, -1, -1, -1 },
    { "CACHED", "Z", .constantValue.asBOOL = ComAowagieTextPdfBaseFont_CACHED, 0x19, -1, -1, -1, -1 },
    { "NOT_CACHED", "Z", .constantValue.asBOOL = ComAowagieTextPdfBaseFont_NOT_CACHED, 0x19, -1, -1, -1, -1 },
    { "RESOURCE_PATH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 87, -1, -1 },
    { "CID_NEWLINE", "C", .constantValue.asUnichar = ComAowagieTextPdfBaseFont_CID_NEWLINE, 0x19, -1, -1, -1, -1 },
    { "subsetRanges_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "fontType_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "notdef", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 88, -1, -1 },
    { "widths_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "differences_", "[LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "unicodeDifferences_", "[C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "charBBoxes_", "[[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "encoding_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "embedded_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "compressionLevel_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "fontSpecific_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "fontCache", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0xc, -1, 89, -1, -1 },
    { "BuiltinFonts14", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x1c, -1, 90, -1, -1 },
    { "forceWidthsOutput_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "directTextToByte_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "subset_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "fastWinansi_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "specialMap_", "LComAowagieTextPdfIntHashtable;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextDocumentException;LJavaIoIOException;", "createFont", "LNSString;LNSString;Z", "LNSString;LNSString;ZZ", "LNSString;LNSString;ZZ[B[B", "LNSString;LNSString;ZZ[B[BZ", "LNSString;LNSString;ZZ[B[BZZ", "LComAowagieTextPdfPRIndirectReference;", "getBaseName", "LNSString;", "normalizeEncoding", "getRawWidth", "ILNSString;", "getKerning", "II", "setKerning", "III", "getWidth", "I", "getDescent", "getAscent", "getDescentPoint", "LNSString;F", "getAscentPoint", "getWidthPointKerned", "getWidthPoint", "IF", "convertToBytes", "writeFont", "LComAowagieTextPdfPdfWriter;LComAowagieTextPdfPdfIndirectReference;[LNSObject;", "LJavaIoIOException;LComAowagieTextDocumentException;", "getFontDescriptor", "getUnicodeDifferences", "setPostscriptFontName", "getFullFontName", "LNSString;LNSString;[B", "getAllFontNames", "getAllNameEntries", "enumerateTTCNames", "[B", "setForceWidthsOutput", "Z", "setDirectTextToByte", "setSubset", "getResourceStream", "LNSString;LJavaLangClassLoader;", "getUnicodeEquivalent", "getCidCode", "charExists", "setCharAdvance", "addFont", "LComAowagieTextPdfPRIndirectReference;LComAowagieTextPdfIntHashtable;LJavaUtilArrayList;", "recourseFonts", "LComAowagieTextPdfPdfDictionary;LComAowagieTextPdfIntHashtable;LJavaUtilArrayList;I", "getDocumentFonts", "LComAowagieTextPdfPdfReader;", "LComAowagieTextPdfPdfReader;I", "getCharBBox", "getRawCharBBox", "addSubsetRange", "[I", "setCompressionLevel", &ComAowagieTextPdfBaseFont_COURIER, &ComAowagieTextPdfBaseFont_COURIER_BOLD, &ComAowagieTextPdfBaseFont_COURIER_OBLIQUE, &ComAowagieTextPdfBaseFont_COURIER_BOLDOBLIQUE, &ComAowagieTextPdfBaseFont_HELVETICA, &ComAowagieTextPdfBaseFont_HELVETICA_BOLD, &ComAowagieTextPdfBaseFont_HELVETICA_OBLIQUE, &ComAowagieTextPdfBaseFont_HELVETICA_BOLDOBLIQUE, &ComAowagieTextPdfBaseFont_SYMBOL, &ComAowagieTextPdfBaseFont_TIMES_ROMAN, &ComAowagieTextPdfBaseFont_TIMES_BOLD, &ComAowagieTextPdfBaseFont_TIMES_ITALIC, &ComAowagieTextPdfBaseFont_TIMES_BOLDITALIC, &ComAowagieTextPdfBaseFont_ZAPFDINGBATS, &ComAowagieTextPdfBaseFont_IDENTITY_H, &ComAowagieTextPdfBaseFont_IDENTITY_V, &ComAowagieTextPdfBaseFont_CP1250, &ComAowagieTextPdfBaseFont_CP1252, &ComAowagieTextPdfBaseFont_CP1257, &ComAowagieTextPdfBaseFont_WINANSI, &ComAowagieTextPdfBaseFont_MACROMAN, &ComAowagieTextPdfBaseFont_CHAR_RANGE_LATIN, &ComAowagieTextPdfBaseFont_CHAR_RANGE_ARABIC, &ComAowagieTextPdfBaseFont_CHAR_RANGE_HEBREW, &ComAowagieTextPdfBaseFont_CHAR_RANGE_CYRILLIC, &ComAowagieTextPdfBaseFont_RESOURCE_PATH, &ComAowagieTextPdfBaseFont_notdef, &ComAowagieTextPdfBaseFont_fontCache, &ComAowagieTextPdfBaseFont_BuiltinFonts14, "LComAowagieTextPdfBaseFont_StreamFont;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfBaseFont = { "BaseFont", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x401, 71, 75, -1, 91, -1, -1, -1 };
  return &_ComAowagieTextPdfBaseFont;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfBaseFont class]) {
    ComAowagieTextPdfBaseFont_CHAR_RANGE_LATIN = [IOSIntArray newArrayWithInts:(jint[]){
#line 221
      0, (jint) 0x17f, (jint) 0x2000, (jint) 0x206f, (jint) 0x20a0, (jint) 0x20cf, (jint) 0xfb00, (jint) 0xfb06 } count:8];
      ComAowagieTextPdfBaseFont_CHAR_RANGE_ARABIC = [IOSIntArray newArrayWithInts:(jint[]){
#line 222
        0, (jint) 0x7f, (jint) 0x0600, (jint) 0x067f, (jint) 0x20a0, (jint) 0x20cf, (jint) 0xfb50, (jint) 0xfbff, (jint) 0xfe70, (jint) 0xfeff } count:10];
        ComAowagieTextPdfBaseFont_CHAR_RANGE_HEBREW = [IOSIntArray newArrayWithInts:(jint[]){
#line 223
          0, (jint) 0x7f, (jint) 0x0590, (jint) 0x05ff, (jint) 0x20a0, (jint) 0x20cf, (jint) 0xfb1d, (jint) 0xfb4f } count:8];
          ComAowagieTextPdfBaseFont_CHAR_RANGE_CYRILLIC = [IOSIntArray newArrayWithInts:(jint[]){
#line 224
            0, (jint) 0x7f, (jint) 0x0400, (jint) 0x052f, (jint) 0x2000, (jint) 0x206f, (jint) 0x20a0, (jint) 0x20cf } count:8];
            ComAowagieTextPdfBaseFont_fontCache = new_JavaUtilHashMap_init();
            ComAowagieTextPdfBaseFont_BuiltinFonts14 = new_JavaUtilHashMap_init();
            {
              
#line 306
              (void) [ComAowagieTextPdfBaseFont_BuiltinFonts14 putWithId:ComAowagieTextPdfBaseFont_COURIER withId:JreLoadStatic(ComAowagieTextPdfPdfName, COURIER)];
              (void) [ComAowagieTextPdfBaseFont_BuiltinFonts14 putWithId:ComAowagieTextPdfBaseFont_COURIER_BOLD withId:JreLoadStatic(ComAowagieTextPdfPdfName, COURIER_BOLD)];
              (void) [ComAowagieTextPdfBaseFont_BuiltinFonts14 putWithId:ComAowagieTextPdfBaseFont_COURIER_BOLDOBLIQUE withId:JreLoadStatic(ComAowagieTextPdfPdfName, COURIER_BOLDOBLIQUE)];
              (void) [ComAowagieTextPdfBaseFont_BuiltinFonts14 putWithId:ComAowagieTextPdfBaseFont_COURIER_OBLIQUE withId:JreLoadStatic(ComAowagieTextPdfPdfName, COURIER_OBLIQUE)];
              (void) [ComAowagieTextPdfBaseFont_BuiltinFonts14 putWithId:ComAowagieTextPdfBaseFont_HELVETICA withId:JreLoadStatic(ComAowagieTextPdfPdfName, HELVETICA)];
              (void) [ComAowagieTextPdfBaseFont_BuiltinFonts14 putWithId:ComAowagieTextPdfBaseFont_HELVETICA_BOLD withId:JreLoadStatic(ComAowagieTextPdfPdfName, HELVETICA_BOLD)];
              (void) [ComAowagieTextPdfBaseFont_BuiltinFonts14 putWithId:ComAowagieTextPdfBaseFont_HELVETICA_BOLDOBLIQUE withId:JreLoadStatic(ComAowagieTextPdfPdfName, HELVETICA_BOLDOBLIQUE)];
              (void) [ComAowagieTextPdfBaseFont_BuiltinFonts14 putWithId:ComAowagieTextPdfBaseFont_HELVETICA_OBLIQUE withId:JreLoadStatic(ComAowagieTextPdfPdfName, HELVETICA_OBLIQUE)];
              (void) [ComAowagieTextPdfBaseFont_BuiltinFonts14 putWithId:ComAowagieTextPdfBaseFont_SYMBOL withId:JreLoadStatic(ComAowagieTextPdfPdfName, SYMBOL)];
              (void) [ComAowagieTextPdfBaseFont_BuiltinFonts14 putWithId:ComAowagieTextPdfBaseFont_TIMES_ROMAN withId:JreLoadStatic(ComAowagieTextPdfPdfName, TIMES_ROMAN)];
              (void) [ComAowagieTextPdfBaseFont_BuiltinFonts14 putWithId:ComAowagieTextPdfBaseFont_TIMES_BOLD withId:JreLoadStatic(ComAowagieTextPdfPdfName, TIMES_BOLD)];
              (void) [ComAowagieTextPdfBaseFont_BuiltinFonts14 putWithId:ComAowagieTextPdfBaseFont_TIMES_BOLDITALIC withId:JreLoadStatic(ComAowagieTextPdfPdfName, TIMES_BOLDITALIC)];
              (void) [ComAowagieTextPdfBaseFont_BuiltinFonts14 putWithId:ComAowagieTextPdfBaseFont_TIMES_ITALIC withId:JreLoadStatic(ComAowagieTextPdfPdfName, TIMES_ITALIC)];
              (void) [ComAowagieTextPdfBaseFont_BuiltinFonts14 putWithId:ComAowagieTextPdfBaseFont_ZAPFDINGBATS withId:JreLoadStatic(ComAowagieTextPdfPdfName, ZAPFDINGBATS)];
            }
            J2OBJC_SET_INITIALIZED(ComAowagieTextPdfBaseFont)
          }
        }

@end


#line 375
void ComAowagieTextPdfBaseFont_init(ComAowagieTextPdfBaseFont *self) {
  NSObject_init(self);
  self->widths_ = [IOSIntArray newArrayWithLength:
#line 249
  256];
  self->differences_ = [IOSObjectArray newArrayWithLength:
#line 252
  256 type:NSString_class_()];
  self->unicodeDifferences_ = [IOSCharArray newArrayWithLength:
#line 254
  256];
  self->charBBoxes_ = [IOSObjectArray newArrayWithLength:
#line 256
  256 type:IOSClass_intArray(1)];
  self->compressionLevel_ =
#line 267
  ComAowagieTextPdfPdfStream_DEFAULT_COMPRESSION;
  self->fontSpecific_ =
#line 274
  true;
  self->forceWidthsOutput_ =
#line 285
  false;
  self->directTextToByte_ =
#line 290
  false;
  self->subset_ =
#line 295
  true;
  self->fastWinansi_ =
#line 297
  false;
}


#line 386
ComAowagieTextPdfBaseFont *ComAowagieTextPdfBaseFont_createFont() {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 387
  return ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_(ComAowagieTextPdfBaseFont_HELVETICA, ComAowagieTextPdfBaseFont_WINANSI, ComAowagieTextPdfBaseFont_NOT_EMBEDDED);
}


#line 438
ComAowagieTextPdfBaseFont *ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_(NSString *name, NSString *encoding, jboolean embedded) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 439
  return ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_withByteArray_withByteArray_withBoolean_(name, encoding, embedded, true, nil, nil, false);
}


#line 492
ComAowagieTextPdfBaseFont *ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_(NSString *name, NSString *encoding, jboolean embedded, jboolean forceRead) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 493
  return ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_withByteArray_withByteArray_withBoolean_(name, encoding, embedded, true, nil, nil, forceRead);
}


#line 546
ComAowagieTextPdfBaseFont *ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_withByteArray_withByteArray_(NSString *name, NSString *encoding, jboolean embedded, jboolean cached, IOSByteArray *ttfAfm, IOSByteArray *pfb) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 547
  return ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_withByteArray_withByteArray_withBoolean_(name, encoding, embedded, cached, ttfAfm, pfb, false);
}


#line 603
ComAowagieTextPdfBaseFont *ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_withByteArray_withByteArray_withBoolean_(NSString *name, NSString *encoding, jboolean embedded, jboolean cached, IOSByteArray *ttfAfm, IOSByteArray *pfb, jboolean noThrow) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 604
  return ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_withByteArray_withByteArray_withBoolean_withBoolean_(name, encoding, embedded, cached, ttfAfm, pfb, false, false);
}


#line 661
ComAowagieTextPdfBaseFont *ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_withByteArray_withByteArray_withBoolean_withBoolean_(NSString *name, NSString *encoding, jboolean embedded, jboolean cached, IOSByteArray *ttfAfm, IOSByteArray *pfb, jboolean noThrow, jboolean forceRead) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 662
  NSString *nameBase = ComAowagieTextPdfBaseFont_getBaseNameWithNSString_(name);
  encoding = ComAowagieTextPdfBaseFont_normalizeEncodingWithNSString_(encoding);
  jboolean isBuiltinFonts14 = [((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfBaseFont_BuiltinFonts14)) containsKeyWithId:name];
  jboolean isCJKFont = isBuiltinFonts14 ? false : ComAowagieTextPdfCJKFont_isCJKFontWithNSString_withNSString_(nameBase, encoding);
  if (isBuiltinFonts14 || isCJKFont) {
    embedded = false;
  }
  else
#line 668
  if ([((NSString *) nil_chk(encoding)) isEqual:ComAowagieTextPdfBaseFont_IDENTITY_H] || [encoding isEqual:ComAowagieTextPdfBaseFont_IDENTITY_V]) {
    embedded = true;
  }
  ComAowagieTextPdfBaseFont *fontFound = nil;
  ComAowagieTextPdfBaseFont *fontBuilt = nil;
  NSString *key = JreStrcat("$C$CZ", name, 0x000a, encoding, 0x000a, embedded);
  if (cached) {
    @synchronized(ComAowagieTextPdfBaseFont_fontCache) {
      fontFound = JreRetainedLocalValue((ComAowagieTextPdfBaseFont *) cast_chk([((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfBaseFont_fontCache)) getWithId:key], [ComAowagieTextPdfBaseFont class]));
    }
    if (fontFound != nil) {
      return fontFound;
    }
  }
  if (isBuiltinFonts14 || [((NSString *) nil_chk([((NSString *) nil_chk(name)) lowercaseString])) java_hasSuffix:@".afm"] || [((NSString *) nil_chk([name lowercaseString])) java_hasSuffix:@".pfm"]) {
    fontBuilt = new_ComAowagieTextPdfType1Font_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withByteArray_withBoolean_(name, encoding, embedded, ttfAfm, pfb, forceRead);
    fontBuilt->fastWinansi_ = [((NSString *) nil_chk(encoding)) isEqual:ComAowagieTextPdfBaseFont_CP1252];
  }
  else if ([((NSString *) nil_chk([((NSString *) nil_chk(nameBase)) lowercaseString])) java_hasSuffix:@".ttf"] || [((NSString *) nil_chk([nameBase lowercaseString])) java_hasSuffix:@".otf"] || [((NSString *) nil_chk([nameBase lowercaseString])) java_indexOfString:@".ttc,"] > 0) {
    if ([((NSString *) nil_chk(encoding)) isEqual:ComAowagieTextPdfBaseFont_IDENTITY_H] || [encoding isEqual:ComAowagieTextPdfBaseFont_IDENTITY_V]) {
      fontBuilt = new_ComAowagieTextPdfTrueTypeFontUnicode_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_(name, encoding, embedded, ttfAfm, forceRead);
    }
    else {
      
#line 690
      fontBuilt = new_ComAowagieTextPdfTrueTypeFont_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_withBoolean_(name, encoding, embedded, ttfAfm, false, forceRead);
      fontBuilt->fastWinansi_ = [encoding isEqual:ComAowagieTextPdfBaseFont_CP1252];
    }
  }
  else if (isCJKFont) {
    fontBuilt = new_ComAowagieTextPdfCJKFont_initPackagePrivateWithNSString_withNSString_withBoolean_(name, encoding, embedded);
  }
  else
#line 696
  if (noThrow) {
    return nil;
  }
  else {
    
#line 699
    @throw new_ComAowagieTextDocumentException_initWithNSString_(JreStrcat("$$$$$", @"Font '", name, @"' with '", encoding, @"' is not recognized."));
  }
  if (cached) {
    @synchronized(ComAowagieTextPdfBaseFont_fontCache) {
      fontFound = JreRetainedLocalValue((ComAowagieTextPdfBaseFont *) cast_chk([((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfBaseFont_fontCache)) getWithId:key], [ComAowagieTextPdfBaseFont class]));
      if (fontFound != nil) {
        return JreRetainedLocalValue(fontFound);
      }
      (void) [((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfBaseFont_fontCache)) putWithId:key withId:fontBuilt];
    }
  }
  return fontBuilt;
}


#line 719
ComAowagieTextPdfBaseFont *ComAowagieTextPdfBaseFont_createFontWithComAowagieTextPdfPRIndirectReference_(ComAowagieTextPdfPRIndirectReference *fontRef) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 720
  return new_ComAowagieTextPdfDocumentFont_initWithComAowagieTextPdfPRIndirectReference_(fontRef);
}


#line 728
NSString *ComAowagieTextPdfBaseFont_getBaseNameWithNSString_(NSString *name) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 729
  if ([((NSString *) nil_chk(name)) java_hasSuffix:@",Bold"]) {
    return [name java_substring:0 endIndex:[name java_length] - 5];
  }
  else
#line 731
  if ([name java_hasSuffix:@",Italic"]) {
    return [name java_substring:0 endIndex:[name java_length] - 7];
  }
  else
#line 733
  if ([name java_hasSuffix:@",BoldItalic"]) {
    return [name java_substring:0 endIndex:[name java_length] - 11];
  }
  else {
    
#line 736
    return name;
  }
}


#line 746
NSString *ComAowagieTextPdfBaseFont_normalizeEncodingWithNSString_(NSString *enc) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 747
  if ([((NSString *) nil_chk(enc)) isEqual:@"winansi"] || [enc isEqual:@""]) {
    return ComAowagieTextPdfBaseFont_CP1252;
  }
  else
#line 749
  if ([enc isEqual:@"macroman"]) {
    return ComAowagieTextPdfBaseFont_MACROMAN;
  }
  else {
    
#line 752
    return enc;
  }
}


#line 1132
NSString *ComAowagieTextPdfBaseFont_createSubsetPrefix() {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 1133
  NSString *s = @"";
  for (jint k = 0; k < 6; ++k) {
    (void) JreStrAppendStrong(&s, "C", JreFpToChar((JavaLangMath_random() * 26 + 'A')));
  }
  return JreStrcat("$C", s, '+');
}


#line 1194
IOSObjectArray *ComAowagieTextPdfBaseFont_getFullFontNameWithNSString_withNSString_withByteArray_(NSString *name, NSString *encoding, IOSByteArray *ttfAfm) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 1195
  NSString *nameBase = ComAowagieTextPdfBaseFont_getBaseNameWithNSString_(name);
  ComAowagieTextPdfBaseFont *fontBuilt = nil;
  if ([((NSString *) nil_chk([((NSString *) nil_chk(nameBase)) lowercaseString])) java_hasSuffix:@".ttf"] || [((NSString *) nil_chk([nameBase lowercaseString])) java_hasSuffix:@".otf"] || [((NSString *) nil_chk([nameBase lowercaseString])) java_indexOfString:@".ttc,"] > 0) {
    fontBuilt = new_ComAowagieTextPdfTrueTypeFont_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_withBoolean_(name, ComAowagieTextPdfBaseFont_CP1252, false, ttfAfm, true, false);
  }
  else {
    
#line 1200
    fontBuilt = ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_withByteArray_withByteArray_(name, encoding, false, false, ttfAfm, nil);
  }
  return [((ComAowagieTextPdfBaseFont *) nil_chk(fontBuilt)) getFullFontName];
}


#line 1213
IOSObjectArray *ComAowagieTextPdfBaseFont_getAllFontNamesWithNSString_withNSString_withByteArray_(NSString *name, NSString *encoding, IOSByteArray *ttfAfm) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 1214
  NSString *nameBase = ComAowagieTextPdfBaseFont_getBaseNameWithNSString_(name);
  ComAowagieTextPdfBaseFont *fontBuilt = nil;
  if ([((NSString *) nil_chk([((NSString *) nil_chk(nameBase)) lowercaseString])) java_hasSuffix:@".ttf"] || [((NSString *) nil_chk([nameBase lowercaseString])) java_hasSuffix:@".otf"] || [((NSString *) nil_chk([nameBase lowercaseString])) java_indexOfString:@".ttc,"] > 0) {
    fontBuilt = new_ComAowagieTextPdfTrueTypeFont_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_withBoolean_(name, ComAowagieTextPdfBaseFont_CP1252, false, ttfAfm, true, false);
  }
  else {
    
#line 1219
    fontBuilt = ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_withByteArray_withByteArray_(name, encoding, false, false, ttfAfm, nil);
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){ [((ComAowagieTextPdfBaseFont *) nil_chk(fontBuilt)) getPostscriptFontName], [fontBuilt getFamilyFontName], [fontBuilt getFullFontName] } count:3 type:NSObject_class_()];
}


#line 1233
IOSObjectArray *ComAowagieTextPdfBaseFont_getAllNameEntriesWithNSString_withNSString_withByteArray_(NSString *name, NSString *encoding, IOSByteArray *ttfAfm) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 1234
  NSString *nameBase = ComAowagieTextPdfBaseFont_getBaseNameWithNSString_(name);
  ComAowagieTextPdfBaseFont *fontBuilt = nil;
  if ([((NSString *) nil_chk([((NSString *) nil_chk(nameBase)) lowercaseString])) java_hasSuffix:@".ttf"] || [((NSString *) nil_chk([nameBase lowercaseString])) java_hasSuffix:@".otf"] || [((NSString *) nil_chk([nameBase lowercaseString])) java_indexOfString:@".ttc,"] > 0) {
    fontBuilt = new_ComAowagieTextPdfTrueTypeFont_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_withBoolean_(name, ComAowagieTextPdfBaseFont_CP1252, false, ttfAfm, true, false);
  }
  else {
    
#line 1239
    fontBuilt = ComAowagieTextPdfBaseFont_createFontWithNSString_withNSString_withBoolean_withBoolean_withByteArray_withByteArray_(name, encoding, false, false, ttfAfm, nil);
  }
  return [((ComAowagieTextPdfBaseFont *) nil_chk(fontBuilt)) getAllNameEntries];
}


#line 1269
IOSObjectArray *ComAowagieTextPdfBaseFont_enumerateTTCNamesWithNSString_(NSString *ttcFile) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 1270
  return [new_ComAowagieTextPdfEnumerateTTC_initPackagePrivateWithNSString_(ttcFile) getNames];
}


#line 1280
IOSObjectArray *ComAowagieTextPdfBaseFont_enumerateTTCNamesWithByteArray_(IOSByteArray *ttcArray) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 1281
  return [new_ComAowagieTextPdfEnumerateTTC_initPackagePrivateWithByteArray_(ttcArray) getNames];
}


#line 1362
JavaIoInputStream *ComAowagieTextPdfBaseFont_getResourceStreamWithNSString_(NSString *key) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 1363
  return ComAowagieTextPdfBaseFont_getResourceStreamWithNSString_withJavaLangClassLoader_(key, nil);
}


#line 1372
JavaIoInputStream *ComAowagieTextPdfBaseFont_getResourceStreamWithNSString_withJavaLangClassLoader_(NSString *key, JavaLangClassLoader *loader) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 1373
  if ([((NSString *) nil_chk(key)) java_hasPrefix:@"/"]) {
    key = [key java_substring:1];
  }
  JavaIoInputStream *is = nil;
  if (loader != nil) {
    is = [loader getResourceAsStreamWithNSString:key];
    if (is != nil) {
      return is;
    }
  }
  
#line 1384
  @try {
    JavaLangClassLoader *contextClassLoader = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader];
    if (contextClassLoader != nil) {
      is = [contextClassLoader getResourceAsStreamWithNSString:key];
    }
  }
  @catch (
#line 1389
  JavaLangThrowable *e) {
  }
  if (is == nil) {
    is = [ComAowagieTextPdfBaseFont_class_() getResourceAsStream:JreStrcat("C$", '/', key)];
  }
  if (is == nil) {
    is = JavaLangClassLoader_getSystemResourceAsStreamWithNSString_(key);
  }
  return is;
}


#line 1451
void ComAowagieTextPdfBaseFont_addFontWithComAowagieTextPdfPRIndirectReference_withComAowagieTextPdfIntHashtable_withJavaUtilArrayList_(ComAowagieTextPdfPRIndirectReference *fontRef, ComAowagieTextPdfIntHashtable *hits, JavaUtilArrayList *fonts) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 1452
  ComAowagieTextPdfPdfObject *obj = ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_(fontRef);
  if (obj == nil || ![obj isDictionary]) {
    return;
  }
  ComAowagieTextPdfPdfDictionary *font = (ComAowagieTextPdfPdfDictionary *) cast_chk(obj, [ComAowagieTextPdfPdfDictionary class]);
  ComAowagieTextPdfPdfName *subtype = [font getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE)];
  if (![((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, TYPE1))) isEqual:subtype] && ![((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, TRUETYPE))) isEqual:subtype]) {
    return;
  }
  ComAowagieTextPdfPdfName *name = [font getAsNameWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, BASEFONT)];
  [((JavaUtilArrayList *) nil_chk(fonts)) addWithId:[IOSObjectArray newArrayWithObjects:(id[]){ ComAowagieTextPdfPdfName_decodeNameWithNSString_([((ComAowagieTextPdfPdfName *) nil_chk(name)) description]), fontRef } count:2 type:NSObject_class_()]];
  [((ComAowagieTextPdfIntHashtable *) nil_chk(hits)) putWithInt:[((ComAowagieTextPdfPRIndirectReference *) nil_chk(fontRef)) getNumber] withInt:1];
}


#line 1466
void ComAowagieTextPdfBaseFont_recourseFontsWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfIntHashtable_withJavaUtilArrayList_withInt_(ComAowagieTextPdfPdfDictionary *page, ComAowagieTextPdfIntHashtable *hits, JavaUtilArrayList *fonts, jint level) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 1467
  ++level;
  if (level > 50) {
    return;
  }
  ComAowagieTextPdfPdfDictionary *resources = [((ComAowagieTextPdfPdfDictionary *) nil_chk(page)) getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, RESOURCES)];
  if (resources == nil) {
    return;
  }
  ComAowagieTextPdfPdfDictionary *font = [resources getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FONT)];
  if (font != nil) {
    for (id __strong element in nil_chk([font getKeys])) {
      ComAowagieTextPdfPdfObject *ft = [font getWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *) cast_chk(element, [ComAowagieTextPdfPdfName class])];
      if (ft == nil || ![ft isIndirect]) {
        continue;
      }
      jint hit = [((ComAowagieTextPdfPRIndirectReference *) cast_chk(ft, [ComAowagieTextPdfPRIndirectReference class])) getNumber];
      if ([((ComAowagieTextPdfIntHashtable *) nil_chk(hits)) containsKeyWithInt:hit]) {
        continue;
      }
      ComAowagieTextPdfBaseFont_addFontWithComAowagieTextPdfPRIndirectReference_withComAowagieTextPdfIntHashtable_withJavaUtilArrayList_((ComAowagieTextPdfPRIndirectReference *) cast_chk(ft, [ComAowagieTextPdfPRIndirectReference class]), hits, fonts);
    }
  }
  ComAowagieTextPdfPdfDictionary *xobj = [resources getAsDictWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, XOBJECT)];
  if (xobj != nil) {
    for (id __strong element in nil_chk([xobj getKeys])) {
      ComAowagieTextPdfBaseFont_recourseFontsWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfIntHashtable_withJavaUtilArrayList_withInt_([xobj getAsDictWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *) cast_chk(element, [ComAowagieTextPdfPdfName class])], hits, fonts, level);
    }
  }
}


#line 1504
JavaUtilArrayList *ComAowagieTextPdfBaseFont_getDocumentFontsWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader *reader) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 1505
  ComAowagieTextPdfIntHashtable *hits = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
  JavaUtilArrayList *fonts = new_JavaUtilArrayList_init();
  jint npages = [((ComAowagieTextPdfPdfReader *) nil_chk(reader)) getNumberOfPages];
  for (jint k = 1; k <= npages; ++k) {
    ComAowagieTextPdfBaseFont_recourseFontsWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfIntHashtable_withJavaUtilArrayList_withInt_([reader getPageNWithInt:k], hits, fonts, 1);
  }
  return fonts;
}


#line 1522
JavaUtilArrayList *ComAowagieTextPdfBaseFont_getDocumentFontsWithComAowagieTextPdfPdfReader_withInt_(ComAowagieTextPdfPdfReader *reader, jint page) {
  ComAowagieTextPdfBaseFont_initialize();
  
#line 1523
  ComAowagieTextPdfIntHashtable *hits = new_ComAowagieTextPdfIntHashtable_initPackagePrivate();
  JavaUtilArrayList *fonts = new_JavaUtilArrayList_init();
  ComAowagieTextPdfBaseFont_recourseFontsWithComAowagieTextPdfPdfDictionary_withComAowagieTextPdfIntHashtable_withJavaUtilArrayList_withInt_([((ComAowagieTextPdfPdfReader *) nil_chk(reader)) getPageNWithInt:page], hits, fonts, 1);
  return fonts;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfBaseFont)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/BaseFont.java"


#line 325
@implementation ComAowagieTextPdfBaseFont_StreamFont


#line 335
- (instancetype)initWithByteArray:(IOSByteArray *)contents
                     withIntArray:(IOSIntArray *)lengths
                          withInt:(jint)compressionLevel {
  ComAowagieTextPdfBaseFont_StreamFont_initWithByteArray_withIntArray_withInt_(self, contents, lengths, compressionLevel);
  return self;
}


#line 357
- (instancetype)initWithByteArray:(IOSByteArray *)contents
                     withNSString:(NSString *)subType
                          withInt:(jint)compressionLevel {
  ComAowagieTextPdfBaseFont_StreamFont_initWithByteArray_withNSString_withInt_(self, contents, subType, compressionLevel);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withIntArray:withInt:);
  methods[1].selector = @selector(initWithByteArray:withNSString:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "[B[II", "LComAowagieTextDocumentException;", "[BLNSString;I", "LComAowagieTextPdfBaseFont;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfBaseFont_StreamFont = { "StreamFont", "com.aowagie.text.pdf", ptrTable, methods, NULL, 7, 0x8, 2, 0, 3, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfBaseFont_StreamFont;
}

@end


#line 335
void ComAowagieTextPdfBaseFont_StreamFont_initWithByteArray_withIntArray_withInt_(ComAowagieTextPdfBaseFont_StreamFont *self, IOSByteArray *contents, IOSIntArray *lengths, jint compressionLevel) {
  ComAowagieTextPdfPdfStream_init(self);
  
#line 336
  @try {
    self->bytes_ = contents;
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(((IOSByteArray *) nil_chk(self->bytes_))->size_)];
    for (jint k = 0; k < ((IOSIntArray *) nil_chk(lengths))->size_; ++k) {
      [self putWithComAowagieTextPdfPdfName:new_ComAowagieTextPdfPdfName_initWithNSString_(JreStrcat("$I", @"Length", (k + 1))) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(IOSIntArray_Get(lengths, k))];
    }
    [self flateCompressWithInt:compressionLevel];
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextDocumentException_initWithJavaLangException_(e);
  }
}


#line 335
ComAowagieTextPdfBaseFont_StreamFont *new_ComAowagieTextPdfBaseFont_StreamFont_initWithByteArray_withIntArray_withInt_(IOSByteArray *contents, IOSIntArray *lengths, jint compressionLevel) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfBaseFont_StreamFont, initWithByteArray_withIntArray_withInt_, contents, lengths, compressionLevel)
}


#line 335
ComAowagieTextPdfBaseFont_StreamFont *create_ComAowagieTextPdfBaseFont_StreamFont_initWithByteArray_withIntArray_withInt_(IOSByteArray *contents, IOSIntArray *lengths, jint compressionLevel) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfBaseFont_StreamFont, initWithByteArray_withIntArray_withInt_, contents, lengths, compressionLevel)
}


#line 357
void ComAowagieTextPdfBaseFont_StreamFont_initWithByteArray_withNSString_withInt_(ComAowagieTextPdfBaseFont_StreamFont *self, IOSByteArray *contents, NSString *subType, jint compressionLevel) {
  ComAowagieTextPdfPdfStream_init(self);
  
#line 358
  @try {
    self->bytes_ = contents;
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(((IOSByteArray *) nil_chk(self->bytes_))->size_)];
    if (subType != nil) {
      [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(subType)];
    }
    [self flateCompressWithInt:compressionLevel];
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextDocumentException_initWithJavaLangException_(e);
  }
}


#line 357
ComAowagieTextPdfBaseFont_StreamFont *new_ComAowagieTextPdfBaseFont_StreamFont_initWithByteArray_withNSString_withInt_(IOSByteArray *contents, NSString *subType, jint compressionLevel) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfBaseFont_StreamFont, initWithByteArray_withNSString_withInt_, contents, subType, compressionLevel)
}


#line 357
ComAowagieTextPdfBaseFont_StreamFont *create_ComAowagieTextPdfBaseFont_StreamFont_initWithByteArray_withNSString_withInt_(IOSByteArray *contents, NSString *subType, jint compressionLevel) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfBaseFont_StreamFont, initWithByteArray_withNSString_withInt_, contents, subType, compressionLevel)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfBaseFont_StreamFont)
