//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/math/ec/WNafUtil.java
//

#include "ECAlgorithms.h"
#include "ECCurve.h"
#include "ECFieldElement.h"
#include "ECPoint.h"
#include "ECPointMap.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PreCompInfo.h"
#include "WNafPreCompInfo.h"
#include "WNafUtil.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"

#if !__has_feature(objc_arc)
#error "WNafUtil must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleMathEcWNafUtil ()

+ (IOSByteArray *)trimWithByteArray:(IOSByteArray *)a
                            withInt:(jint)length;

+ (IOSIntArray *)trimWithIntArray:(IOSIntArray *)a
                          withInt:(jint)length;

+ (IOSObjectArray *)resizeTableWithOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)a
                                                             withInt:(jint)length;

@end

inline IOSIntArray *OrgSpongycastleMathEcWNafUtil_get_DEFAULT_WINDOW_SIZE_CUTOFFS(void);
static IOSIntArray *OrgSpongycastleMathEcWNafUtil_DEFAULT_WINDOW_SIZE_CUTOFFS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleMathEcWNafUtil, DEFAULT_WINDOW_SIZE_CUTOFFS, IOSIntArray *)

inline IOSByteArray *OrgSpongycastleMathEcWNafUtil_get_EMPTY_BYTES(void);
static IOSByteArray *OrgSpongycastleMathEcWNafUtil_EMPTY_BYTES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleMathEcWNafUtil, EMPTY_BYTES, IOSByteArray *)

inline IOSIntArray *OrgSpongycastleMathEcWNafUtil_get_EMPTY_INTS(void);
static IOSIntArray *OrgSpongycastleMathEcWNafUtil_EMPTY_INTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleMathEcWNafUtil, EMPTY_INTS, IOSIntArray *)

inline IOSObjectArray *OrgSpongycastleMathEcWNafUtil_get_EMPTY_POINTS(void);
static IOSObjectArray *OrgSpongycastleMathEcWNafUtil_EMPTY_POINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleMathEcWNafUtil, EMPTY_POINTS, IOSObjectArray *)

__attribute__((unused)) static IOSByteArray *OrgSpongycastleMathEcWNafUtil_trimWithByteArray_withInt_(IOSByteArray *a, jint length);

__attribute__((unused)) static IOSIntArray *OrgSpongycastleMathEcWNafUtil_trimWithIntArray_withInt_(IOSIntArray *a, jint length);

__attribute__((unused)) static IOSObjectArray *OrgSpongycastleMathEcWNafUtil_resizeTableWithOrgSpongycastleMathEcECPointArray_withInt_(IOSObjectArray *a, jint length);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/math/ec/WNafUtil.java"

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleMathEcWNafUtil)

NSString *OrgSpongycastleMathEcWNafUtil_PRECOMP_NAME = @"bc_wnaf";


#line 5
@implementation OrgSpongycastleMathEcWNafUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 5
- (instancetype)init {
  OrgSpongycastleMathEcWNafUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 15
+ (IOSIntArray *)generateCompactNafWithJavaMathBigInteger:(JavaMathBigInteger *)k {
  return OrgSpongycastleMathEcWNafUtil_generateCompactNafWithJavaMathBigInteger_(k);
}


#line 58
+ (IOSIntArray *)generateCompactWindowNafWithInt:(jint)width
                          withJavaMathBigInteger:(JavaMathBigInteger *)k {
  return OrgSpongycastleMathEcWNafUtil_generateCompactWindowNafWithInt_withJavaMathBigInteger_(width, k);
}


#line 124
+ (IOSByteArray *)generateJSFWithJavaMathBigInteger:(JavaMathBigInteger *)g
                             withJavaMathBigInteger:(JavaMathBigInteger *)h {
  return OrgSpongycastleMathEcWNafUtil_generateJSFWithJavaMathBigInteger_withJavaMathBigInteger_(g, h);
}


#line 185
+ (IOSByteArray *)generateNafWithJavaMathBigInteger:(JavaMathBigInteger *)k {
  return OrgSpongycastleMathEcWNafUtil_generateNafWithJavaMathBigInteger_(k);
}


#line 225
+ (IOSByteArray *)generateWindowNafWithInt:(jint)width
                    withJavaMathBigInteger:(JavaMathBigInteger *)k {
  return OrgSpongycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(width, k);
}


#line 287
+ (jint)getNafWeightWithJavaMathBigInteger:(JavaMathBigInteger *)k {
  return OrgSpongycastleMathEcWNafUtil_getNafWeightWithJavaMathBigInteger_(k);
}


#line 300
+ (OrgSpongycastleMathEcWNafPreCompInfo *)getWNafPreCompInfoWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p {
  return OrgSpongycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgSpongycastleMathEcECPoint_(p);
}


#line 305
+ (OrgSpongycastleMathEcWNafPreCompInfo *)getWNafPreCompInfoWithOrgSpongycastleMathEcPreCompInfo:(id<OrgSpongycastleMathEcPreCompInfo>)preCompInfo {
  return OrgSpongycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgSpongycastleMathEcPreCompInfo_(preCompInfo);
}


#line 321
+ (jint)getWindowSizeWithInt:(jint)bits {
  return OrgSpongycastleMathEcWNafUtil_getWindowSizeWithInt_(bits);
}


#line 333
+ (jint)getWindowSizeWithInt:(jint)bits
                withIntArray:(IOSIntArray *)windowSizeCutoffs {
  return OrgSpongycastleMathEcWNafUtil_getWindowSizeWithInt_withIntArray_(bits, windowSizeCutoffs);
}


#line 346
+ (OrgSpongycastleMathEcECPoint *)mapPointWithPrecompWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p
                                                                              withInt:(jint)width
                                                                          withBoolean:(jboolean)includeNegated
                                                  withOrgSpongycastleMathEcECPointMap:(id<OrgSpongycastleMathEcECPointMap>)pointMap {
  return OrgSpongycastleMathEcWNafUtil_mapPointWithPrecompWithOrgSpongycastleMathEcECPoint_withInt_withBoolean_withOrgSpongycastleMathEcECPointMap_(p, width, includeNegated, pointMap);
}


#line 385
+ (OrgSpongycastleMathEcWNafPreCompInfo *)precomputeWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p
                                                                             withInt:(jint)width
                                                                         withBoolean:(jboolean)includeNegated {
  return OrgSpongycastleMathEcWNafUtil_precomputeWithOrgSpongycastleMathEcECPoint_withInt_withBoolean_(p, width, includeNegated);
}


#line 520
+ (IOSByteArray *)trimWithByteArray:(IOSByteArray *)a
                            withInt:(jint)length {
  return OrgSpongycastleMathEcWNafUtil_trimWithByteArray_withInt_(a, length);
}


#line 527
+ (IOSIntArray *)trimWithIntArray:(IOSIntArray *)a
                          withInt:(jint)length {
  return OrgSpongycastleMathEcWNafUtil_trimWithIntArray_withInt_(a, length);
}


#line 534
+ (IOSObjectArray *)resizeTableWithOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)a
                                                             withInt:(jint)length {
  return OrgSpongycastleMathEcWNafUtil_resizeTableWithOrgSpongycastleMathEcECPointArray_withInt_(a, length);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 6, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 7, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 8, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcWNafPreCompInfo;", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcWNafPreCompInfo;", 0x9, 9, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 12, 14, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x9, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcWNafPreCompInfo;", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 19, 20, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, 19, 21, -1, -1, -1, -1 },
    { NULL, "[LOrgSpongycastleMathEcECPoint;", 0xa, 22, 23, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generateCompactNafWithJavaMathBigInteger:);
  methods[2].selector = @selector(generateCompactWindowNafWithInt:withJavaMathBigInteger:);
  methods[3].selector = @selector(generateJSFWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[4].selector = @selector(generateNafWithJavaMathBigInteger:);
  methods[5].selector = @selector(generateWindowNafWithInt:withJavaMathBigInteger:);
  methods[6].selector = @selector(getNafWeightWithJavaMathBigInteger:);
  methods[7].selector = @selector(getWNafPreCompInfoWithOrgSpongycastleMathEcECPoint:);
  methods[8].selector = @selector(getWNafPreCompInfoWithOrgSpongycastleMathEcPreCompInfo:);
  methods[9].selector = @selector(getWindowSizeWithInt:);
  methods[10].selector = @selector(getWindowSizeWithInt:withIntArray:);
  methods[11].selector = @selector(mapPointWithPrecompWithOrgSpongycastleMathEcECPoint:withInt:withBoolean:withOrgSpongycastleMathEcECPointMap:);
  methods[12].selector = @selector(precomputeWithOrgSpongycastleMathEcECPoint:withInt:withBoolean:);
  methods[13].selector = @selector(trimWithByteArray:withInt:);
  methods[14].selector = @selector(trimWithIntArray:withInt:);
  methods[15].selector = @selector(resizeTableWithOrgSpongycastleMathEcECPointArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PRECOMP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "DEFAULT_WINDOW_SIZE_CUTOFFS", "[I", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "EMPTY_BYTES", "[B", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "EMPTY_INTS", "[I", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "EMPTY_POINTS", "[LOrgSpongycastleMathEcECPoint;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
  };
  static const void *ptrTable[] = { "generateCompactNaf", "LJavaMathBigInteger;", "generateCompactWindowNaf", "ILJavaMathBigInteger;", "generateJSF", "LJavaMathBigInteger;LJavaMathBigInteger;", "generateNaf", "generateWindowNaf", "getNafWeight", "getWNafPreCompInfo", "LOrgSpongycastleMathEcECPoint;", "LOrgSpongycastleMathEcPreCompInfo;", "getWindowSize", "I", "I[I", "mapPointWithPrecomp", "LOrgSpongycastleMathEcECPoint;IZLOrgSpongycastleMathEcECPointMap;", "precompute", "LOrgSpongycastleMathEcECPoint;IZ", "trim", "[BI", "[II", "resizeTable", "[LOrgSpongycastleMathEcECPoint;I", &OrgSpongycastleMathEcWNafUtil_PRECOMP_NAME, &OrgSpongycastleMathEcWNafUtil_DEFAULT_WINDOW_SIZE_CUTOFFS, &OrgSpongycastleMathEcWNafUtil_EMPTY_BYTES, &OrgSpongycastleMathEcWNafUtil_EMPTY_INTS, &OrgSpongycastleMathEcWNafUtil_EMPTY_POINTS };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcWNafUtil = { "WNafUtil", "org.spongycastle.math.ec", ptrTable, methods, fields, 7, 0x401, 16, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleMathEcWNafUtil;
}

+ (void)initialize {
  if (self == [OrgSpongycastleMathEcWNafUtil class]) {
    OrgSpongycastleMathEcWNafUtil_DEFAULT_WINDOW_SIZE_CUTOFFS = [IOSIntArray newArrayWithInts:(jint[]){
#line 9
      13, 41, 121, 337, 897, 2305 } count:6];
      OrgSpongycastleMathEcWNafUtil_EMPTY_BYTES = [IOSByteArray newArrayWithLength:
#line 11
      0];
      OrgSpongycastleMathEcWNafUtil_EMPTY_INTS = [IOSIntArray newArrayWithLength:
#line 12
      0];
      OrgSpongycastleMathEcWNafUtil_EMPTY_POINTS = [IOSObjectArray newArrayWithLength:
#line 13
      0 type:OrgSpongycastleMathEcECPoint_class_()];
      J2OBJC_SET_INITIALIZED(OrgSpongycastleMathEcWNafUtil)
    }
  }

@end


#line 5
void OrgSpongycastleMathEcWNafUtil_init(OrgSpongycastleMathEcWNafUtil *self) {
  NSObject_init(self);
}


#line 15
IOSIntArray *OrgSpongycastleMathEcWNafUtil_generateCompactNafWithJavaMathBigInteger_(JavaMathBigInteger *k) {
  OrgSpongycastleMathEcWNafUtil_initialize();
  if ((JreURShift32([((JavaMathBigInteger *) nil_chk(k)) bitLength], 16)) != 0) {
    
#line 19
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'k' must have bitlength < 2^16");
  }
  if ([k signum] == 0) {
    
#line 23
    return OrgSpongycastleMathEcWNafUtil_EMPTY_INTS;
  }
  
#line 26
  JavaMathBigInteger *_3k = [((JavaMathBigInteger *) nil_chk([k shiftLeftWithInt:1])) addWithJavaMathBigInteger:k];
  
#line 28
  jint bits = [((JavaMathBigInteger *) nil_chk(_3k)) bitLength];
  IOSIntArray *naf = [IOSIntArray newArrayWithLength:JreRShift32(bits, 1)];
  
#line 31
  JavaMathBigInteger *diff = [_3k xor__WithJavaMathBigInteger:k];
  
#line 33
  jint highBit = bits - 1;
  
#line 33
  jint length = 0;
  
#line 33
  jint zeroes = 0;
  for (jint i = 1; i < highBit; ++i) {
    
#line 36
    if (![((JavaMathBigInteger *) nil_chk(diff)) testBitWithInt:i]) {
      
#line 38
      ++zeroes;
      continue;
    }
    
#line 42
    jint digit = [k testBitWithInt:i] ? -1 : 1;
    *IOSIntArray_GetRef(naf, length++) = (JreLShift32(digit, 16)) | zeroes;
    zeroes = 1;
    ++i;
  }
  
#line 48
  *IOSIntArray_GetRef(naf, length++) = (JreLShift32(1, 16)) | zeroes;
  
#line 50
  if (naf->size_ > length) {
    
#line 52
    naf = OrgSpongycastleMathEcWNafUtil_trimWithIntArray_withInt_(naf, length);
  }
  
#line 55
  return naf;
}


#line 58
IOSIntArray *OrgSpongycastleMathEcWNafUtil_generateCompactWindowNafWithInt_withJavaMathBigInteger_(jint width, JavaMathBigInteger *k) {
  OrgSpongycastleMathEcWNafUtil_initialize();
  if (width == 2) {
    
#line 62
    return OrgSpongycastleMathEcWNafUtil_generateCompactNafWithJavaMathBigInteger_(k);
  }
  
#line 65
  if (width < 2 || width > 16) {
    
#line 67
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'width' must be in the range [2, 16]");
  }
  if ((JreURShift32([((JavaMathBigInteger *) nil_chk(k)) bitLength], 16)) != 0) {
    
#line 71
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'k' must have bitlength < 2^16");
  }
  if ([k signum] == 0) {
    
#line 75
    return OrgSpongycastleMathEcWNafUtil_EMPTY_INTS;
  }
  
#line 78
  IOSIntArray *wnaf = [IOSIntArray newArrayWithLength:JreIntDiv([k bitLength], width) + 1];
  
#line 81
  jint pow2 = JreLShift32(1, width);
  jint mask = pow2 - 1;
  jint sign = JreURShift32(pow2, 1);
  
#line 85
  jboolean carry = false;
  jint length = 0;
  
#line 86
  jint pos = 0;
  
#line 88
  while (pos <= [k bitLength]) {
    
#line 90
    if ([k testBitWithInt:pos] == carry) {
      
#line 92
      ++pos;
      continue;
    }
    
#line 96
    k = [k shiftRightWithInt:pos];
    
#line 98
    jint digit = [((JavaMathBigInteger *) nil_chk(k)) intValue] & mask;
    if (carry) {
      
#line 101
      ++digit;
    }
    
#line 104
    carry = ((digit & sign) != 0);
    if (carry) {
      
#line 107
      digit -= pow2;
    }
    
#line 110
    jint zeroes = length > 0 ? pos - 1 : pos;
    *IOSIntArray_GetRef(wnaf, length++) = (JreLShift32(digit, 16)) | zeroes;
    pos = width;
  }
  
#line 116
  if (wnaf->size_ > length) {
    
#line 118
    wnaf = OrgSpongycastleMathEcWNafUtil_trimWithIntArray_withInt_(wnaf, length);
  }
  
#line 121
  return wnaf;
}


#line 124
IOSByteArray *OrgSpongycastleMathEcWNafUtil_generateJSFWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *g, JavaMathBigInteger *h) {
  OrgSpongycastleMathEcWNafUtil_initialize();
  jint digits = JavaLangMath_maxWithInt_withInt_([((JavaMathBigInteger *) nil_chk(g)) bitLength], [((JavaMathBigInteger *) nil_chk(h)) bitLength]) + 1;
  IOSByteArray *jsf = [IOSByteArray newArrayWithLength:digits];
  
#line 129
  JavaMathBigInteger *k0 = g;
  
#line 129
  JavaMathBigInteger *k1 = h;
  jint j = 0;
  
#line 130
  jint d0 = 0;
  
#line 130
  jint d1 = 0;
  
#line 132
  jint offset = 0;
  while ((d0 | d1) != 0 || [((JavaMathBigInteger *) nil_chk(k0)) bitLength] > offset || [((JavaMathBigInteger *) nil_chk(k1)) bitLength] > offset) {
    
#line 135
    jint n0 = ((JreURShift32([((JavaMathBigInteger *) nil_chk(k0)) intValue], offset)) + d0) & 7;
    
#line 135
    jint n1 = ((JreURShift32([((JavaMathBigInteger *) nil_chk(k1)) intValue], offset)) + d1) & 7;
    
#line 137
    jint u0 = n0 & 1;
    if (u0 != 0) {
      
#line 140
      u0 -= (n0 & 2);
      if ((n0 + u0) == 4 && (n1 & 3) == 2) {
        
#line 143
        u0 = -u0;
      }
    }
    
#line 147
    jint u1 = n1 & 1;
    if (u1 != 0) {
      
#line 150
      u1 -= (n1 & 2);
      if ((n1 + u1) == 4 && (n0 & 3) == 2) {
        
#line 153
        u1 = -u1;
      }
    }
    
#line 157
    if ((JreLShift32(d0, 1)) == 1 + u0) {
      
#line 159
      d0 ^= 1;
    }
    if ((JreLShift32(d1, 1)) == 1 + u1) {
      
#line 163
      d1 ^= 1;
    }
    
#line 166
    if (++offset == 30) {
      
#line 168
      offset = 0;
      k0 = [k0 shiftRightWithInt:30];
      k1 = [k1 shiftRightWithInt:30];
    }
    
#line 173
    *IOSByteArray_GetRef(jsf, j++) = (jbyte) ((JreLShift32(u0, 4)) | (u1 & (jint) 0xF));
  }
  
#line 177
  if (jsf->size_ > j) {
    
#line 179
    jsf = OrgSpongycastleMathEcWNafUtil_trimWithByteArray_withInt_(jsf, j);
  }
  
#line 182
  return jsf;
}


#line 185
IOSByteArray *OrgSpongycastleMathEcWNafUtil_generateNafWithJavaMathBigInteger_(JavaMathBigInteger *k) {
  OrgSpongycastleMathEcWNafUtil_initialize();
  if ([((JavaMathBigInteger *) nil_chk(k)) signum] == 0) {
    
#line 189
    return OrgSpongycastleMathEcWNafUtil_EMPTY_BYTES;
  }
  
#line 192
  JavaMathBigInteger *_3k = [((JavaMathBigInteger *) nil_chk([k shiftLeftWithInt:1])) addWithJavaMathBigInteger:k];
  
#line 194
  jint digits = [((JavaMathBigInteger *) nil_chk(_3k)) bitLength] - 1;
  IOSByteArray *naf = [IOSByteArray newArrayWithLength:digits];
  
#line 197
  JavaMathBigInteger *diff = [_3k xor__WithJavaMathBigInteger:k];
  
#line 199
  for (jint i = 1; i < digits; ++i) {
    
#line 201
    if ([((JavaMathBigInteger *) nil_chk(diff)) testBitWithInt:i]) {
      
#line 203
      *IOSByteArray_GetRef(naf, i - 1) = (jbyte) ([k testBitWithInt:i] ? -1 : 1);
      ++i;
    }
  }
  
#line 208
  *IOSByteArray_GetRef(naf, digits - 1) = 1;
  
#line 210
  return naf;
}


#line 225
IOSByteArray *OrgSpongycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(jint width, JavaMathBigInteger *k) {
  OrgSpongycastleMathEcWNafUtil_initialize();
  if (width == 2) {
    
#line 229
    return OrgSpongycastleMathEcWNafUtil_generateNafWithJavaMathBigInteger_(k);
  }
  
#line 232
  if (width < 2 || width > 8) {
    
#line 234
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'width' must be in the range [2, 8]");
  }
  if ([((JavaMathBigInteger *) nil_chk(k)) signum] == 0) {
    
#line 238
    return OrgSpongycastleMathEcWNafUtil_EMPTY_BYTES;
  }
  
#line 241
  IOSByteArray *wnaf = [IOSByteArray newArrayWithLength:[k bitLength] + 1];
  
#line 244
  jint pow2 = JreLShift32(1, width);
  jint mask = pow2 - 1;
  jint sign = JreURShift32(pow2, 1);
  
#line 248
  jboolean carry = false;
  jint length = 0;
  
#line 249
  jint pos = 0;
  
#line 251
  while (pos <= [k bitLength]) {
    
#line 253
    if ([k testBitWithInt:pos] == carry) {
      
#line 255
      ++pos;
      continue;
    }
    
#line 259
    k = [k shiftRightWithInt:pos];
    
#line 261
    jint digit = [((JavaMathBigInteger *) nil_chk(k)) intValue] & mask;
    if (carry) {
      
#line 264
      ++digit;
    }
    
#line 267
    carry = ((digit & sign) != 0);
    if (carry) {
      
#line 270
      digit -= pow2;
    }
    
#line 273
    length += (length > 0) ? pos - 1 : pos;
    *IOSByteArray_GetRef(wnaf, length++) = (jbyte) digit;
    pos = width;
  }
  
#line 279
  if (wnaf->size_ > length) {
    
#line 281
    wnaf = OrgSpongycastleMathEcWNafUtil_trimWithByteArray_withInt_(wnaf, length);
  }
  
#line 284
  return wnaf;
}


#line 287
jint OrgSpongycastleMathEcWNafUtil_getNafWeightWithJavaMathBigInteger_(JavaMathBigInteger *k) {
  OrgSpongycastleMathEcWNafUtil_initialize();
  if ([((JavaMathBigInteger *) nil_chk(k)) signum] == 0) {
    
#line 291
    return 0;
  }
  
#line 294
  JavaMathBigInteger *_3k = [((JavaMathBigInteger *) nil_chk([k shiftLeftWithInt:1])) addWithJavaMathBigInteger:k];
  JavaMathBigInteger *diff = [((JavaMathBigInteger *) nil_chk(_3k)) xor__WithJavaMathBigInteger:k];
  
#line 297
  return [((JavaMathBigInteger *) nil_chk(diff)) bitCount];
}


#line 300
OrgSpongycastleMathEcWNafPreCompInfo *OrgSpongycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgSpongycastleMathEcECPoint_(OrgSpongycastleMathEcECPoint *p) {
  OrgSpongycastleMathEcWNafUtil_initialize();
  return OrgSpongycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgSpongycastleMathEcPreCompInfo_([((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getCurve])) getPreCompInfoWithOrgSpongycastleMathEcECPoint:p withNSString:OrgSpongycastleMathEcWNafUtil_PRECOMP_NAME]);
}

OrgSpongycastleMathEcWNafPreCompInfo *OrgSpongycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgSpongycastleMathEcPreCompInfo_(id<OrgSpongycastleMathEcPreCompInfo> preCompInfo) {
  OrgSpongycastleMathEcWNafUtil_initialize();
  if ((preCompInfo != nil) && ([preCompInfo isKindOfClass:[OrgSpongycastleMathEcWNafPreCompInfo class]])) {
    
#line 309
    return (OrgSpongycastleMathEcWNafPreCompInfo *) cast_chk(preCompInfo, [OrgSpongycastleMathEcWNafPreCompInfo class]);
  }
  
#line 312
  return new_OrgSpongycastleMathEcWNafPreCompInfo_init();
}


#line 321
jint OrgSpongycastleMathEcWNafUtil_getWindowSizeWithInt_(jint bits) {
  OrgSpongycastleMathEcWNafUtil_initialize();
  return OrgSpongycastleMathEcWNafUtil_getWindowSizeWithInt_withIntArray_(bits, OrgSpongycastleMathEcWNafUtil_DEFAULT_WINDOW_SIZE_CUTOFFS);
}


#line 333
jint OrgSpongycastleMathEcWNafUtil_getWindowSizeWithInt_withIntArray_(jint bits, IOSIntArray *windowSizeCutoffs) {
  OrgSpongycastleMathEcWNafUtil_initialize();
  jint w = 0;
  for (; w < ((IOSIntArray *) nil_chk(windowSizeCutoffs))->size_; ++w) {
    
#line 338
    if (bits < IOSIntArray_Get(windowSizeCutoffs, w)) {
      
#line 340
      break;
    }
  }
  return w + 2;
}


#line 346
OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcWNafUtil_mapPointWithPrecompWithOrgSpongycastleMathEcECPoint_withInt_withBoolean_withOrgSpongycastleMathEcECPointMap_(OrgSpongycastleMathEcECPoint *p, jint width, jboolean includeNegated, id<OrgSpongycastleMathEcECPointMap> pointMap) {
  OrgSpongycastleMathEcWNafUtil_initialize();
  
#line 349
  OrgSpongycastleMathEcECCurve *c = [((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getCurve];
  OrgSpongycastleMathEcWNafPreCompInfo *wnafPreCompP = OrgSpongycastleMathEcWNafUtil_precomputeWithOrgSpongycastleMathEcECPoint_withInt_withBoolean_(p, width, includeNegated);
  
#line 352
  OrgSpongycastleMathEcECPoint *q = [((id<OrgSpongycastleMathEcECPointMap>) nil_chk(pointMap)) mapWithOrgSpongycastleMathEcECPoint:p];
  OrgSpongycastleMathEcWNafPreCompInfo *wnafPreCompQ = OrgSpongycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgSpongycastleMathEcPreCompInfo_([((OrgSpongycastleMathEcECCurve *) nil_chk(c)) getPreCompInfoWithOrgSpongycastleMathEcECPoint:q withNSString:OrgSpongycastleMathEcWNafUtil_PRECOMP_NAME]);
  
#line 355
  OrgSpongycastleMathEcECPoint *twiceP = [((OrgSpongycastleMathEcWNafPreCompInfo *) nil_chk(wnafPreCompP)) getTwice];
  if (twiceP != nil) {
    
#line 358
    OrgSpongycastleMathEcECPoint *twiceQ = [pointMap mapWithOrgSpongycastleMathEcECPoint:twiceP];
    [((OrgSpongycastleMathEcWNafPreCompInfo *) nil_chk(wnafPreCompQ)) setTwiceWithOrgSpongycastleMathEcECPoint:twiceQ];
  }
  
#line 362
  IOSObjectArray *preCompP = [wnafPreCompP getPreComp];
  IOSObjectArray *preCompQ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(preCompP))->size_ type:OrgSpongycastleMathEcECPoint_class_()];
  for (jint i = 0; i < preCompP->size_; ++i) {
    
#line 366
    (void) IOSObjectArray_Set(preCompQ, i, [pointMap mapWithOrgSpongycastleMathEcECPoint:IOSObjectArray_Get(preCompP, i)]);
  }
  [((OrgSpongycastleMathEcWNafPreCompInfo *) nil_chk(wnafPreCompQ)) setPreCompWithOrgSpongycastleMathEcECPointArray:preCompQ];
  
#line 370
  if (includeNegated) {
    
#line 372
    IOSObjectArray *preCompNegQ = [IOSObjectArray newArrayWithLength:preCompQ->size_ type:OrgSpongycastleMathEcECPoint_class_()];
    for (jint i = 0; i < preCompNegQ->size_; ++i) {
      
#line 375
      (void) IOSObjectArray_Set(preCompNegQ, i, [((OrgSpongycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(preCompQ, i))) negate]);
    }
    [wnafPreCompQ setPreCompNegWithOrgSpongycastleMathEcECPointArray:preCompNegQ];
  }
  
#line 380
  [c setPreCompInfoWithOrgSpongycastleMathEcECPoint:q withNSString:OrgSpongycastleMathEcWNafUtil_PRECOMP_NAME withOrgSpongycastleMathEcPreCompInfo:wnafPreCompQ];
  
#line 382
  return q;
}


#line 385
OrgSpongycastleMathEcWNafPreCompInfo *OrgSpongycastleMathEcWNafUtil_precomputeWithOrgSpongycastleMathEcECPoint_withInt_withBoolean_(OrgSpongycastleMathEcECPoint *p, jint width, jboolean includeNegated) {
  OrgSpongycastleMathEcWNafUtil_initialize();
  OrgSpongycastleMathEcECCurve *c = [((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getCurve];
  OrgSpongycastleMathEcWNafPreCompInfo *wnafPreCompInfo = OrgSpongycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgSpongycastleMathEcPreCompInfo_([((OrgSpongycastleMathEcECCurve *) nil_chk(c)) getPreCompInfoWithOrgSpongycastleMathEcECPoint:p withNSString:OrgSpongycastleMathEcWNafUtil_PRECOMP_NAME]);
  
#line 390
  jint iniPreCompLen = 0;
  
#line 390
  jint reqPreCompLen = JreLShift32(1, JavaLangMath_maxWithInt_withInt_(0, width - 2));
  
#line 392
  IOSObjectArray *preComp = [((OrgSpongycastleMathEcWNafPreCompInfo *) nil_chk(wnafPreCompInfo)) getPreComp];
  if (preComp == nil) {
    
#line 395
    preComp = OrgSpongycastleMathEcWNafUtil_EMPTY_POINTS;
  }
  else {
    
#line 399
    iniPreCompLen = preComp->size_;
  }
  
#line 402
  if (iniPreCompLen < reqPreCompLen) {
    
#line 404
    preComp = OrgSpongycastleMathEcWNafUtil_resizeTableWithOrgSpongycastleMathEcECPointArray_withInt_(preComp, reqPreCompLen);
    
#line 406
    if (reqPreCompLen == 1) {
      
#line 408
      (void) IOSObjectArray_Set(nil_chk(preComp), 0, [p normalize]);
    }
    else {
      
#line 412
      jint curPreCompLen = iniPreCompLen;
      if (curPreCompLen == 0) {
        
#line 415
        (void) IOSObjectArray_Set(nil_chk(preComp), 0, p);
        curPreCompLen = 1;
      }
      
#line 419
      OrgSpongycastleMathEcECFieldElement *iso = nil;
      
#line 421
      if (reqPreCompLen == 2) {
        
#line 423
        (void) IOSObjectArray_Set(nil_chk(preComp), 1, [p threeTimes]);
      }
      else {
        
#line 427
        OrgSpongycastleMathEcECPoint *twiceP = [wnafPreCompInfo getTwice];
        
#line 427
        OrgSpongycastleMathEcECPoint *last = IOSObjectArray_Get(nil_chk(preComp), curPreCompLen - 1);
        if (twiceP == nil) {
          
#line 430
          twiceP = [((OrgSpongycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(preComp, 0))) twice];
          [wnafPreCompInfo setTwiceWithOrgSpongycastleMathEcECPoint:twiceP];
          
#line 443
          if (![((OrgSpongycastleMathEcECPoint *) nil_chk(twiceP)) isInfinity] && OrgSpongycastleMathEcECAlgorithms_isFpCurveWithOrgSpongycastleMathEcECCurve_(c) && [c getFieldSize] >= 64) {
            
#line 445
            switch ([c getCoordinateSystem]) {
              
#line 447
              case OrgSpongycastleMathEcECCurve_COORD_JACOBIAN:
              case OrgSpongycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY:
              case OrgSpongycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
              {
                iso = [twiceP getZCoordWithInt:0];
                twiceP = [c createPointWithJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk([twiceP getXCoord])) toBigInteger] withJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk([twiceP getYCoord])) toBigInteger]];
                
#line 455
                OrgSpongycastleMathEcECFieldElement *iso2 = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(iso)) square];
                
#line 455
                OrgSpongycastleMathEcECFieldElement *iso3 = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(iso2)) multiplyWithOrgSpongycastleMathEcECFieldElement:iso];
                last = [((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(last)) scaleXWithOrgSpongycastleMathEcECFieldElement:iso2])) scaleYWithOrgSpongycastleMathEcECFieldElement:iso3];
                
#line 458
                if (iniPreCompLen == 0) {
                  
#line 460
                  (void) IOSObjectArray_Set(preComp, 0, last);
                }
                break;
              }
            }
          }
        }
        
#line 468
        while (curPreCompLen < reqPreCompLen) {
          
#line 474
          (void) IOSObjectArray_Set(preComp, curPreCompLen++, last = [((OrgSpongycastleMathEcECPoint *) nil_chk(last)) addWithOrgSpongycastleMathEcECPoint:twiceP]);
        }
      }
      
#line 481
      [c normalizeAllWithOrgSpongycastleMathEcECPointArray:preComp withInt:iniPreCompLen withInt:reqPreCompLen - iniPreCompLen withOrgSpongycastleMathEcECFieldElement:iso];
    }
  }
  
#line 485
  [wnafPreCompInfo setPreCompWithOrgSpongycastleMathEcECPointArray:preComp];
  
#line 487
  if (includeNegated) {
    
#line 489
    IOSObjectArray *preCompNeg = [wnafPreCompInfo getPreCompNeg];
    
#line 491
    jint pos;
    if (preCompNeg == nil) {
      
#line 494
      pos = 0;
      preCompNeg = [IOSObjectArray newArrayWithLength:reqPreCompLen type:OrgSpongycastleMathEcECPoint_class_()];
    }
    else {
      
#line 499
      pos = preCompNeg->size_;
      if (pos < reqPreCompLen) {
        
#line 502
        preCompNeg = OrgSpongycastleMathEcWNafUtil_resizeTableWithOrgSpongycastleMathEcECPointArray_withInt_(preCompNeg, reqPreCompLen);
      }
    }
    
#line 506
    while (pos < reqPreCompLen) {
      
#line 508
      (void) IOSObjectArray_Set(nil_chk(preCompNeg), pos, [((OrgSpongycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(nil_chk(preComp), pos))) negate]);
      ++pos;
    }
    
#line 512
    [wnafPreCompInfo setPreCompNegWithOrgSpongycastleMathEcECPointArray:preCompNeg];
  }
  
#line 515
  [c setPreCompInfoWithOrgSpongycastleMathEcECPoint:p withNSString:OrgSpongycastleMathEcWNafUtil_PRECOMP_NAME withOrgSpongycastleMathEcPreCompInfo:wnafPreCompInfo];
  
#line 517
  return wnafPreCompInfo;
}


#line 520
IOSByteArray *OrgSpongycastleMathEcWNafUtil_trimWithByteArray_withInt_(IOSByteArray *a, jint length) {
  OrgSpongycastleMathEcWNafUtil_initialize();
  IOSByteArray *result = [IOSByteArray newArrayWithLength:length];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, result, 0, result->size_);
  return result;
}

IOSIntArray *OrgSpongycastleMathEcWNafUtil_trimWithIntArray_withInt_(IOSIntArray *a, jint length) {
  OrgSpongycastleMathEcWNafUtil_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:length];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, result, 0, result->size_);
  return result;
}

IOSObjectArray *OrgSpongycastleMathEcWNafUtil_resizeTableWithOrgSpongycastleMathEcECPointArray_withInt_(IOSObjectArray *a, jint length) {
  OrgSpongycastleMathEcWNafUtil_initialize();
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:length type:OrgSpongycastleMathEcECPoint_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, result, 0, ((IOSObjectArray *) nil_chk(a))->size_);
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcWNafUtil)
