//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/Phrase.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Phrase")
#ifdef RESTRICT_Phrase
#define INCLUDE_ALL_Phrase 0
#else
#define INCLUDE_ALL_Phrase 1
#endif
#undef RESTRICT_Phrase

#if !defined (ComAowagieTextPhrase_) && (INCLUDE_ALL_Phrase || defined(INCLUDE_ComAowagieTextPhrase))
#define ComAowagieTextPhrase_

#define RESTRICT_JavaUtilArrayList 1
#define INCLUDE_JavaUtilArrayList 1
#include "java/util/ArrayList.h"

#define RESTRICT_TextElementArray 1
#define INCLUDE_ComAowagieTextTextElementArray 1
#include "TextElementArray.h"

@class ComAowagieTextChunk;
@class ComAowagieTextFont;
@protocol ComAowagieTextElementListener;
@protocol ComAowagieTextPdfHyphenationEvent;
@protocol JavaUtilCollection;

/*!
 @brief A <CODE>Phrase</CODE> is a series of <CODE>Chunk</CODE>s.
 <P>
  A <CODE>Phrase</CODE> has a main <CODE>Font</CODE>, but some chunks
  within the phrase can have a <CODE>Font</CODE> that differs from the
  main <CODE>Font</CODE>. All the <CODE>Chunk</CODE>s in a <CODE>Phrase</CODE>
  have the same <CODE>leading</CODE>.
  <P>
  Example: 
 <BLOCKQUOTE>@code

  // When no parameters are passed, the default leading = 16 
  <STRONG>Phrase phrase0 = new Phrase();</STRONG>
   <STRONG>Phrase phrase1 = new Phrase("this is a phrase");</STRONG>
  // In this example the leading is passed as a parameter 
  <STRONG>Phrase phrase2 = new Phrase(16, "this is a phrase with leading 16");</STRONG>
  // When a Font is passed (explicitly or embedded in a chunk), the default leading = 1.5 * size of the font 
  <STRONG>Phrase phrase3 = new Phrase("this is a phrase with a red, normal font Courier, size 12", FontFactory.getFont(FontFactory.COURIER, 12, Font.NORMAL, new Color(255, 0, 0)));</STRONG>
   <STRONG>Phrase phrase4 = new Phrase(new Chunk("this is a phrase"));</STRONG>
   <STRONG>Phrase phrase5 = new Phrase(18, new Chunk("this is a phrase", FontFactory.getFont(FontFactory.HELVETICA, 16, Font.BOLD, new Color(255, 0, 0)));</STRONG>
   
@endcode</BLOCKQUOTE>
 - seealso: Element
 - seealso: Chunk
 - seealso: Paragraph
 - seealso: Anchor
 */
@interface ComAowagieTextPhrase : JavaUtilArrayList < ComAowagieTextTextElementArray > {
 @public
  /*!
   @brief This is the leading of this phrase.
   */
  jfloat leading_;
  /*!
   @brief This is the font of this phrase.
   */
  ComAowagieTextFont *font_;
}

#pragma mark Public

/*!
 @brief Constructs a <CODE>Phrase</CODE> without specifying a leading.
 */
- (instancetype)init;

/*!
 @brief Constructs a <CODE>Phrase</CODE> with a certain <CODE>Chunk</CODE>.
 @param chunk a  <CODE> Chunk </CODE>
 */
- (instancetype)initWithComAowagieTextChunk:(ComAowagieTextChunk *)chunk;

/*!
 @brief Constructs a <CODE>Phrase</CODE> with a certain leading, a certain <CODE>String</CODE>
  and a certain <CODE>Font</CODE>.
 @param leading the leading
 @param string a  <CODE> String </CODE>
 @param font a  <CODE> Font </CODE>
 */
- (instancetype)initWithFloat:(jfloat)leading
                 withNSString:(NSString *)string
       withComAowagieTextFont:(ComAowagieTextFont *)font;

/*!
 @brief Constructs a <CODE>Phrase</CODE> with a certain <CODE>String</CODE> and a certain <CODE>Font</CODE>.
 @param string a  <CODE> String </CODE>
 @param font a  <CODE> Font </CODE>
 */
- (instancetype)initWithNSString:(NSString *)string
          withComAowagieTextFont:(ComAowagieTextFont *)font;

/*!
 @brief Adds a <CODE>Chunk</CODE>, an <CODE>Anchor</CODE> or another <CODE>Phrase</CODE>
  to this <CODE>Phrase</CODE>.
 @param index index at which the specified element is to be inserted
 @param o an object of type  <CODE> Chunk </CODE> ,  <CODE> Anchor </CODE>  or  <CODE> Phrase </CODE>
 @throw ClassCastExceptionwhen you try to add something that isn't a <CODE>Chunk</CODE>, <CODE>Anchor</CODE> or <CODE>Phrase</CODE>
 */
- (void)addWithInt:(jint)index
            withId:(id)o;

/*!
 @brief Adds a <CODE>Chunk</CODE>, <CODE>Anchor</CODE> or another <CODE>Phrase</CODE>
  to this <CODE>Phrase</CODE>.
 @param o an object of type  <CODE> Chunk </CODE> ,  <CODE> Anchor </CODE>  or  <CODE> Phrase
  </CODE>
 @return a boolean
 @throw ClassCastExceptionwhen you try to add something that isn't a <CODE>Chunk</CODE>, <CODE>Anchor</CODE> or <CODE>Phrase</CODE>
 */
- (jboolean)addWithId:(id)o;

/*!
 @brief Adds a collection of <CODE>Chunk</CODE>s
  to this <CODE>Phrase</CODE>.
 @param collection a collection of  <CODE> Chunk </CODE> s,  <CODE> Anchor </CODE> s and  <CODE> Phrase </CODE>
  s.
 @return <CODE>true</CODE> if the action succeeded, <CODE>false</CODE> if not.
 @throw ClassCastExceptionwhen you try to add something that isn't a <CODE>Chunk</CODE>, <CODE>Anchor</CODE> or <CODE>Phrase</CODE>
 */
- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

/*!
 @brief Gets all the chunks in this element.
 @return an <CODE>ArrayList</CODE>
 */
- (JavaUtilArrayList *)getChunks;

/*!
 @brief Returns the content as a String object.
 This method differs from toString because toString will return an ArrayList with the toString value of the Chunks in this Phrase.
 @return content
 */
- (NSString *)getContent;

/*!
 @brief Gets the font of the first <CODE>Chunk</CODE> that appears in this <CODE>Phrase</CODE>.
 @return a <CODE>Font</CODE>
 */
- (ComAowagieTextFont *)getFont;

/*!
 @brief Getter for the hyphenation settings.
 @return a HyphenationEvent
 @since 2.1.2
 */
- (id<ComAowagieTextPdfHyphenationEvent>)getHyphenation;

/*!
 @brief Gets the leading of this phrase.
 @return the linespacing
 */
- (jfloat)getLeading;

/*!
 - seealso: com.aowagie.text.Element#isContent()
 @since iText 2.0.8
 */
- (jboolean)isContent;

/*!
 @brief Checks is this <CODE>Phrase</CODE> contains no or 1 empty <CODE>Chunk</CODE>.
 @return <CODE>false</CODE> if the <CODE>Phrase</CODE>
  contains more than one or more non-empty<CODE>Chunk</CODE>s.
 */
- (jboolean)isEmpty;

/*!
 - seealso: com.aowagie.text.Element#isNestable()
 @since iText 2.0.8
 */
- (jboolean)isNestable;

/*!
 @brief Processes the element by adding it (or the different parts) to an 
 <CODE>ElementListener</CODE>.
 @param listener an  <CODE> ElementListener </CODE>
 @return <CODE>true</CODE> if the element was processed successfully
 */
- (jboolean)processWithComAowagieTextElementListener:(id<ComAowagieTextElementListener>)listener;

/*!
 @brief Sets the main font of this phrase.
 @param font the new font
 */
- (void)setFontWithComAowagieTextFont:(ComAowagieTextFont *)font;

/*!
 @brief Setter for the hyphenation.
 @param hyphenation a HyphenationEvent instance
 @since 2.1.2
 */
- (void)setHyphenationWithComAowagieTextPdfHyphenationEvent:(id<ComAowagieTextPdfHyphenationEvent>)hyphenation;

/*!
 @brief Sets the leading of this phrase.
 @param leading the new leading
 */
- (void)setLeadingWithFloat:(jfloat)leading;

/*!
 @brief Gets the type of the text element.
 @return a type
 */
- (jint)type;

#pragma mark Protected

/*!
 @brief Adds a <CODE>Object</CODE> to the <CODE>Paragraph</CODE>.
 @param object the object to add.
 */
- (void)addSpecialWithId:(id)object;

#pragma mark Package-Private

/*!
 @brief Constructs a <CODE>Phrase</CODE> with a certain leading.
 @param leading the leading
 */
- (instancetype)initWithFloat:(jfloat)leading;

/*!
 @brief Copy constructor for <CODE>Phrase</CODE>.
 @param phrase Phrase
 */
- (instancetype)initWithComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase;

/*!
 @brief Constructs a <CODE>Phrase</CODE> with a certain <CODE>String</CODE>.
 @param string a  <CODE> String </CODE>
 */
- (instancetype)initWithNSString:(NSString *)string;

/*!
 @brief Checks you if the leading of this phrase is defined.
 @return true if the leading is defined
 */
- (jboolean)hasLeading;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPhrase)

J2OBJC_FIELD_SETTER(ComAowagieTextPhrase, font_, ComAowagieTextFont *)

FOUNDATION_EXPORT void ComAowagieTextPhrase_init(ComAowagieTextPhrase *self);

FOUNDATION_EXPORT ComAowagieTextPhrase *new_ComAowagieTextPhrase_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPhrase *create_ComAowagieTextPhrase_init(void);

FOUNDATION_EXPORT void ComAowagieTextPhrase_initWithComAowagieTextPhrase_(ComAowagieTextPhrase *self, ComAowagieTextPhrase *phrase);

FOUNDATION_EXPORT ComAowagieTextPhrase *new_ComAowagieTextPhrase_initWithComAowagieTextPhrase_(ComAowagieTextPhrase *phrase) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPhrase *create_ComAowagieTextPhrase_initWithComAowagieTextPhrase_(ComAowagieTextPhrase *phrase);

FOUNDATION_EXPORT void ComAowagieTextPhrase_initWithFloat_(ComAowagieTextPhrase *self, jfloat leading);

FOUNDATION_EXPORT ComAowagieTextPhrase *new_ComAowagieTextPhrase_initWithFloat_(jfloat leading) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPhrase *create_ComAowagieTextPhrase_initWithFloat_(jfloat leading);

FOUNDATION_EXPORT void ComAowagieTextPhrase_initWithComAowagieTextChunk_(ComAowagieTextPhrase *self, ComAowagieTextChunk *chunk);

FOUNDATION_EXPORT ComAowagieTextPhrase *new_ComAowagieTextPhrase_initWithComAowagieTextChunk_(ComAowagieTextChunk *chunk) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPhrase *create_ComAowagieTextPhrase_initWithComAowagieTextChunk_(ComAowagieTextChunk *chunk);

FOUNDATION_EXPORT void ComAowagieTextPhrase_initWithNSString_(ComAowagieTextPhrase *self, NSString *string);

FOUNDATION_EXPORT ComAowagieTextPhrase *new_ComAowagieTextPhrase_initWithNSString_(NSString *string) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPhrase *create_ComAowagieTextPhrase_initWithNSString_(NSString *string);

FOUNDATION_EXPORT void ComAowagieTextPhrase_initWithNSString_withComAowagieTextFont_(ComAowagieTextPhrase *self, NSString *string, ComAowagieTextFont *font);

FOUNDATION_EXPORT ComAowagieTextPhrase *new_ComAowagieTextPhrase_initWithNSString_withComAowagieTextFont_(NSString *string, ComAowagieTextFont *font) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPhrase *create_ComAowagieTextPhrase_initWithNSString_withComAowagieTextFont_(NSString *string, ComAowagieTextFont *font);

FOUNDATION_EXPORT void ComAowagieTextPhrase_initWithFloat_withNSString_withComAowagieTextFont_(ComAowagieTextPhrase *self, jfloat leading, NSString *string, ComAowagieTextFont *font);

FOUNDATION_EXPORT ComAowagieTextPhrase *new_ComAowagieTextPhrase_initWithFloat_withNSString_withComAowagieTextFont_(jfloat leading, NSString *string, ComAowagieTextFont *font) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPhrase *create_ComAowagieTextPhrase_initWithFloat_withNSString_withComAowagieTextFont_(jfloat leading, NSString *string, ComAowagieTextFont *font);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPhrase)

#endif

#pragma pop_macro("INCLUDE_ALL_Phrase")
