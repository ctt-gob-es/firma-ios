//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/http/SSLErrorProcessor.java
//

#include "AOCancelledOperationException.h"
#include "AOUIFactory.h"
#include "AOUtil.h"
#include "CoreMessages.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SSLErrorProcessor.h"
#include "SslSecurityManager.h"
#include "TrustStoreManager.h"
#include "UrlHttpManager.h"
#include "UrlHttpMethod.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Method.h"
#include "java/math/BigInteger.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Properties.h"
#include "java/util/logging/Logger.h"
#include "javax/net/ssl/HttpsURLConnection.h"
#include "javax/net/ssl/SSLHandshakeException.h"

#if !__has_feature(objc_arc)
#error "SSLErrorProcessor must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreMiscHttpSSLErrorProcessor () {
 @public
  jboolean initialized_;
  jboolean cancelled_;
  jboolean headless_;
}

/*!
 @brief Inicializa el objeto.
 */
- (void)initilize OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Comprueba si hay un entorno gr&aacute;fico disponible.
 @return <code>true</code> si hay entorno gr&aacute;fico, <code>false</code> si no.
 */
+ (jboolean)hasGraphicsEnvironment;

+ (IOSObjectArray *)downloadFromRemoteServerWithNSString:(NSString *)domainName;

@end

inline JavaUtilLoggingLogger *EsGobAfirmaCoreMiscHttpSSLErrorProcessor_get_LOGGER(void);
static JavaUtilLoggingLogger *EsGobAfirmaCoreMiscHttpSSLErrorProcessor_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpSSLErrorProcessor, LOGGER, JavaUtilLoggingLogger *)

inline NSString *EsGobAfirmaCoreMiscHttpSSLErrorProcessor_get_PROPERTY_HEADLESS(void);
static NSString *EsGobAfirmaCoreMiscHttpSSLErrorProcessor_PROPERTY_HEADLESS = @"headless";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpSSLErrorProcessor, PROPERTY_HEADLESS, NSString *)

inline NSString *EsGobAfirmaCoreMiscHttpSSLErrorProcessor_get_PROPERTY_SSL_HEADLESS(void);
static NSString *EsGobAfirmaCoreMiscHttpSSLErrorProcessor_PROPERTY_SSL_HEADLESS = @"sslOmitImportationDialog";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpSSLErrorProcessor, PROPERTY_SSL_HEADLESS, NSString *)

inline jboolean EsGobAfirmaCoreMiscHttpSSLErrorProcessor_get_showingConfirmDialog(void);
inline jboolean EsGobAfirmaCoreMiscHttpSSLErrorProcessor_set_showingConfirmDialog(jboolean value);
inline jboolean *EsGobAfirmaCoreMiscHttpSSLErrorProcessor_getRef_showingConfirmDialog(void);
static jboolean EsGobAfirmaCoreMiscHttpSSLErrorProcessor_showingConfirmDialog = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EsGobAfirmaCoreMiscHttpSSLErrorProcessor, showingConfirmDialog, jboolean)

__attribute__((unused)) static void EsGobAfirmaCoreMiscHttpSSLErrorProcessor_initilize(EsGobAfirmaCoreMiscHttpSSLErrorProcessor *self);

__attribute__((unused)) static jboolean EsGobAfirmaCoreMiscHttpSSLErrorProcessor_hasGraphicsEnvironment(void);

__attribute__((unused)) static IOSObjectArray *EsGobAfirmaCoreMiscHttpSSLErrorProcessor_downloadFromRemoteServerWithNSString_(NSString *domainName);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/http/SSLErrorProcessor.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaCoreMiscHttpSSLErrorProcessor)

NSString *EsGobAfirmaCoreMiscHttpSSLErrorProcessor_TRUSTED_KS_PWD = @"changeit";


#line 23
@implementation EsGobAfirmaCoreMiscHttpSSLErrorProcessor

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 39
- (instancetype)init {
  EsGobAfirmaCoreMiscHttpSSLErrorProcessor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 43
- (instancetype)initWithJavaUtilProperties:(JavaUtilProperties *)params {
  EsGobAfirmaCoreMiscHttpSSLErrorProcessor_initWithJavaUtilProperties_(self, params);
  return self;
}


#line 66
- (void)initilize {
  EsGobAfirmaCoreMiscHttpSSLErrorProcessor_initilize(self);
}


#line 90
+ (jboolean)hasGraphicsEnvironment {
  return EsGobAfirmaCoreMiscHttpSSLErrorProcessor_hasGraphicsEnvironment();
}


#line 105
- (instancetype)initWithBoolean:(jboolean)headless {
  EsGobAfirmaCoreMiscHttpSSLErrorProcessor_initWithBoolean_(self, headless);
  return self;
}


#line 111
- (IOSByteArray *)processHttpErrorWithJavaIoIOException:(JavaIoIOException *)cause
              withEsGobAfirmaCoreMiscHttpUrlHttpManager:(id<EsGobAfirmaCoreMiscHttpUrlHttpManager>)urlManager
                                           withNSString:(NSString *)url
                                                withInt:(jint)timeout
               withEsGobAfirmaCoreMiscHttpUrlHttpMethod:(EsGobAfirmaCoreMiscHttpUrlHttpMethod *)method
                                 withJavaUtilProperties:(JavaUtilProperties *)requestProperties {
  
#line 118
  if (!([cause isKindOfClass:[JavaxNetSslSSLHandshakeException class]])) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpSSLErrorProcessor_LOGGER)) infoWithNSString:@"El error no es de tipo SSLHandShake y no la tratamos"];
    @throw nil_chk(cause);
  }
  
#line 124
  EsGobAfirmaCoreMiscHttpSSLErrorProcessor_initilize(self);
  
#line 127
  if (self->headless_) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpSSLErrorProcessor_LOGGER)) infoWithNSString:@"No se confia en el certificado SSL, pero no se pueden mostrar dialogos para importarlo en el almacen de confianza"];
    @throw nil_chk(cause);
  }
  
#line 135
  if (EsGobAfirmaCoreMiscHttpSSLErrorProcessor_showingConfirmDialog) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpSSLErrorProcessor_LOGGER)) infoWithNSString:@"Ya se esta mostrando un dialogo de consulta para la importacion del certificado de confianza. Se omitira este."];
    @throw nil_chk(cause);
  }
  
#line 140
  jint userResponse;
  @synchronized(EsGobAfirmaCoreMiscHttpSSLErrorProcessor_LOGGER) {
    @try {
      EsGobAfirmaCoreMiscHttpSSLErrorProcessor_showingConfirmDialog = true;
      userResponse = EsGobAfirmaCoreUiAOUIFactory_showConfirmDialogWithId_withId_withNSString_withInt_withInt_(nil, EsGobAfirmaCoreUiCoreMessages_getStringWithNSString_withNSString_(
#line 145
      @"SSLRequestPermissionDialog.2", [new_JavaNetURL_initWithNSString_(url) getHost]), EsGobAfirmaCoreUiCoreMessages_getStringWithNSString_(
#line 146
      @"SSLRequestPermissionDialog.1"), JreLoadStatic(EsGobAfirmaCoreUiAOUIFactory, YES_NO_OPTION), JreLoadStatic(EsGobAfirmaCoreUiAOUIFactory, WARNING_MESSAGE));
    }
    @catch (
#line 150
    EsGobAfirmaCoreAOCancelledOperationException *ex) {
      self->cancelled_ = true;
      @throw nil_chk(cause);
    }
    @catch (JavaLangException *ex) {
      @throw nil_chk(cause);
    }
    @finally {
      EsGobAfirmaCoreMiscHttpSSLErrorProcessor_showingConfirmDialog = false;
    }
  }
  
#line 162
  if (userResponse != JreLoadStatic(EsGobAfirmaCoreUiAOUIFactory, YES_OPTION)) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpSSLErrorProcessor_LOGGER)) infoWithNSString:@"El usuario no importo el certificado en el almacen de confianza"];
    self->cancelled_ = true;
    @throw nil_chk(cause);
  }
  
#line 169
  IOSObjectArray *serverCerts;
  @try {
    serverCerts = EsGobAfirmaCoreMiscHttpSSLErrorProcessor_downloadFromRemoteServerWithNSString_(url);
  }
  @catch (
#line 172
  JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpSSLErrorProcessor_LOGGER)) severeWithNSString:JreStrcat("$@", @"Error al descargar certificados SSL del servidor: ", e)];
    @throw new_JavaIoIOException_initWithJavaLangThrowable_(e);
  }
  {
    IOSObjectArray *a__ =
#line 178
    serverCerts;
    JavaSecurityCertX509Certificate * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaSecurityCertX509Certificate * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaSecurityCertX509Certificate *cert = *b__++;
      
#line 179
      [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpSSLErrorProcessor_LOGGER)) infoWithNSString:JreStrcat("$$", @"Se importa en caliente en el almacen de confianza el certificado con el numero de serie: ", EsGobAfirmaCoreMiscAOUtil_hexifyWithByteArray_withBoolean_(
#line 180
      [((JavaMathBigInteger *) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSerialNumber])) toByteArray], false))];
    }
  }
  
#line 184
  @try {
    [((EsGobAfirmaCoreMiscHttpTrustStoreManager *) nil_chk(EsGobAfirmaCoreMiscHttpTrustStoreManager_getInstance())) importCertsWithJavaSecurityCertX509CertificateArray:serverCerts];
  }
  @catch (
#line 186
  JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpSSLErrorProcessor_LOGGER)) severeWithNSString:JreStrcat("$@", @"Error al importar los certificados SSL en el almacen de confianza: ", e)];
    @throw new_JavaIoIOException_initWithJavaLangThrowable_(e);
  }
  
#line 192
  @try {
    EsGobAfirmaCoreMiscHttpSslSecurityManager_configureAfirmaTrustManagers();
  }
  @catch (
#line 194
  JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpSSLErrorProcessor_LOGGER)) severeWithNSString:JreStrcat("$@", @"Error reconfigurando el contexto SSL con los nuevos certificados: ", e)];
    @throw new_JavaIoIOException_initWithJavaLangThrowable_(e);
  }
  
#line 200
  return [((id<EsGobAfirmaCoreMiscHttpUrlHttpManager>) nil_chk(urlManager)) readUrlWithNSString:url withInt:timeout withEsGobAfirmaCoreMiscHttpUrlHttpMethod:method withJavaUtilProperties:requestProperties];
}


#line 203
+ (IOSObjectArray *)downloadFromRemoteServerWithNSString:(NSString *)domainName {
  return EsGobAfirmaCoreMiscHttpSSLErrorProcessor_downloadFromRemoteServerWithNSString_(domainName);
}


#line 228
- (jboolean)isCancelled {
  return self->cancelled_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertX509Certificate;", 0xa, 5, 6, 7, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilProperties:);
  methods[2].selector = @selector(initilize);
  methods[3].selector = @selector(hasGraphicsEnvironment);
  methods[4].selector = @selector(initWithBoolean:);
  methods[5].selector = @selector(processHttpErrorWithJavaIoIOException:withEsGobAfirmaCoreMiscHttpUrlHttpManager:withNSString:withInt:withEsGobAfirmaCoreMiscHttpUrlHttpMethod:withJavaUtilProperties:);
  methods[6].selector = @selector(downloadFromRemoteServerWithNSString:);
  methods[7].selector = @selector(isCancelled);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "PROPERTY_HEADLESS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "PROPERTY_SSL_HEADLESS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "showingConfirmDialog", "Z", .constantValue.asLong = 0, 0xa, -1, 11, -1, -1 },
    { "TRUSTED_KS_PWD", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 12, -1, -1 },
    { "initialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cancelled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "headless_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilProperties;", "Z", "processHttpError", "LJavaIoIOException;LEsGobAfirmaCoreMiscHttpUrlHttpManager;LNSString;ILEsGobAfirmaCoreMiscHttpUrlHttpMethod;LJavaUtilProperties;", "LJavaIoIOException;", "downloadFromRemoteServer", "LNSString;", "LJavaLangException;", &EsGobAfirmaCoreMiscHttpSSLErrorProcessor_LOGGER, &EsGobAfirmaCoreMiscHttpSSLErrorProcessor_PROPERTY_HEADLESS, &EsGobAfirmaCoreMiscHttpSSLErrorProcessor_PROPERTY_SSL_HEADLESS, &EsGobAfirmaCoreMiscHttpSSLErrorProcessor_showingConfirmDialog, &EsGobAfirmaCoreMiscHttpSSLErrorProcessor_TRUSTED_KS_PWD };
  static const J2ObjcClassInfo _EsGobAfirmaCoreMiscHttpSSLErrorProcessor = { "SSLErrorProcessor", "es.gob.afirma.core.misc.http", ptrTable, methods, fields, 7, 0x1, 8, 8, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreMiscHttpSSLErrorProcessor;
}

+ (void)initialize {
  if (self == [EsGobAfirmaCoreMiscHttpSSLErrorProcessor class]) {
    EsGobAfirmaCoreMiscHttpSSLErrorProcessor_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 25
    @"es.gob.afirma");
    J2OBJC_SET_INITIALIZED(EsGobAfirmaCoreMiscHttpSSLErrorProcessor)
  }
}

@end


#line 39
void EsGobAfirmaCoreMiscHttpSSLErrorProcessor_init(EsGobAfirmaCoreMiscHttpSSLErrorProcessor *self) {
  NSObject_init(self);
  self->initialized_ =
#line 35
  false;
  self->cancelled_ = false;
  
#line 40
  self->headless_ = false;
}


#line 39
EsGobAfirmaCoreMiscHttpSSLErrorProcessor *new_EsGobAfirmaCoreMiscHttpSSLErrorProcessor_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscHttpSSLErrorProcessor, init)
}


#line 39
EsGobAfirmaCoreMiscHttpSSLErrorProcessor *create_EsGobAfirmaCoreMiscHttpSSLErrorProcessor_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscHttpSSLErrorProcessor, init)
}

void EsGobAfirmaCoreMiscHttpSSLErrorProcessor_initWithJavaUtilProperties_(EsGobAfirmaCoreMiscHttpSSLErrorProcessor *self, JavaUtilProperties *params) {
  NSObject_init(self);
  self->initialized_ =
#line 35
  false;
  self->cancelled_ = false;
  
#line 45
  self->headless_ = (params != nil &&
#line 46
  (JavaLangBoolean_parseBooleanWithNSString_([params getPropertyWithNSString:EsGobAfirmaCoreMiscHttpSSLErrorProcessor_PROPERTY_HEADLESS]) || JavaLangBoolean_parseBooleanWithNSString_(
#line 47
  [params getPropertyWithNSString:EsGobAfirmaCoreMiscHttpSSLErrorProcessor_PROPERTY_SSL_HEADLESS])));
  
#line 51
  if (!self->headless_) {
    jboolean headlessEnviroment = false;
    @try {
      headlessEnviroment = !EsGobAfirmaCoreMiscHttpSSLErrorProcessor_hasGraphicsEnvironment();
    }
    @catch (JavaLangThrowable *e) {
      headlessEnviroment = true;
    }
    self->headless_ = headlessEnviroment;
  }
}


#line 43
EsGobAfirmaCoreMiscHttpSSLErrorProcessor *new_EsGobAfirmaCoreMiscHttpSSLErrorProcessor_initWithJavaUtilProperties_(JavaUtilProperties *params) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscHttpSSLErrorProcessor, initWithJavaUtilProperties_, params)
}


#line 43
EsGobAfirmaCoreMiscHttpSSLErrorProcessor *create_EsGobAfirmaCoreMiscHttpSSLErrorProcessor_initWithJavaUtilProperties_(JavaUtilProperties *params) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscHttpSSLErrorProcessor, initWithJavaUtilProperties_, params)
}


#line 66
void EsGobAfirmaCoreMiscHttpSSLErrorProcessor_initilize(EsGobAfirmaCoreMiscHttpSSLErrorProcessor *self) {
  
#line 69
  if (!self->initialized_) {
    
#line 72
    if (!self->headless_) {
      jboolean headlessEnviroment = false;
      @try {
        headlessEnviroment = !EsGobAfirmaCoreMiscHttpSSLErrorProcessor_hasGraphicsEnvironment();
      }
      @catch (JavaLangThrowable *e) {
        headlessEnviroment = true;
      }
      self->headless_ = headlessEnviroment;
    }
    self->initialized_ = true;
  }
}


#line 90
jboolean EsGobAfirmaCoreMiscHttpSSLErrorProcessor_hasGraphicsEnvironment() {
  EsGobAfirmaCoreMiscHttpSSLErrorProcessor_initialize();
  
#line 91
  jboolean headless;
  @try {
    IOSClass *graphicsEnvironmentClass = IOSClass_forName_(@"java.awt.GraphicsEnvironment");
    JavaLangReflectMethod *isHeadlessMethod = [((IOSClass *) nil_chk(graphicsEnvironmentClass)) getMethod:@"isHeadless" parameterTypes:[IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()]];
    id headlessBoolean = [((JavaLangReflectMethod *) nil_chk(isHeadlessMethod)) invokeWithId:nil withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
    headless = [headlessBoolean isKindOfClass:[JavaLangBoolean class]] ? [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk(headlessBoolean, [JavaLangBoolean class])))) booleanValue] : true;
  }
  @catch (JavaLangThrowable *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpSSLErrorProcessor_LOGGER)) warningWithNSString:JreStrcat("$@", @"No se pudo comprobar si hay entorno gr&aacute;fico: ", e)];
    headless = true;
  }
  return !headless;
}


#line 105
void EsGobAfirmaCoreMiscHttpSSLErrorProcessor_initWithBoolean_(EsGobAfirmaCoreMiscHttpSSLErrorProcessor *self, jboolean headless) {
  NSObject_init(self);
  self->initialized_ =
#line 35
  false;
  self->cancelled_ = false;
  
#line 106
  self->headless_ = headless;
}


#line 105
EsGobAfirmaCoreMiscHttpSSLErrorProcessor *new_EsGobAfirmaCoreMiscHttpSSLErrorProcessor_initWithBoolean_(jboolean headless) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscHttpSSLErrorProcessor, initWithBoolean_, headless)
}


#line 105
EsGobAfirmaCoreMiscHttpSSLErrorProcessor *create_EsGobAfirmaCoreMiscHttpSSLErrorProcessor_initWithBoolean_(jboolean headless) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscHttpSSLErrorProcessor, initWithBoolean_, headless)
}


#line 203
IOSObjectArray *EsGobAfirmaCoreMiscHttpSSLErrorProcessor_downloadFromRemoteServerWithNSString_(NSString *domainName) {
  EsGobAfirmaCoreMiscHttpSSLErrorProcessor_initialize();
  JavaNetURL *url = new_JavaNetURL_initWithNSString_(domainName);
  JavaxNetSslHttpsURLConnection *conn = (JavaxNetSslHttpsURLConnection *) cast_chk([url openConnection], [JavaxNetSslHttpsURLConnection class]);
  EsGobAfirmaCoreMiscHttpSslSecurityManager_disableSslChecksWithJavaxNetSslHttpsURLConnection_(conn);
  [((JavaxNetSslHttpsURLConnection *) nil_chk(conn)) connect];
  IOSObjectArray *trustedServerCerts = [conn getServerCertificates];
  [conn disconnect];
  
#line 212
  IOSObjectArray *certsToImport;
  if (((IOSObjectArray *) nil_chk(trustedServerCerts))->size_ > 1) {
    certsToImport = [IOSObjectArray newArrayWithLength:trustedServerCerts->size_ - 1 type:JavaSecurityCertX509Certificate_class_()];
    
#line 217
    for (jint i = 1; i < trustedServerCerts->size_; i++) {
      (void) IOSObjectArray_Set(certsToImport, i - 1, (JavaSecurityCertX509Certificate *) cast_chk(IOSObjectArray_Get(trustedServerCerts, i), [JavaSecurityCertX509Certificate class]));
    }
  }
  else {
    certsToImport = [IOSObjectArray newArrayWithObjects:(id[]){ (JavaSecurityCertX509Certificate *) cast_chk(IOSObjectArray_Get(trustedServerCerts, 0), [JavaSecurityCertX509Certificate class]) } count:1 type:JavaSecurityCertX509Certificate_class_()];
  }
  
#line 225
  return certsToImport;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreMiscHttpSSLErrorProcessor)
