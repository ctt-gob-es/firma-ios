//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfContentByte.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_PdfContentByte")
#ifdef RESTRICT_PdfContentByte
#define INCLUDE_ALL_PdfContentByte 0
#else
#define INCLUDE_ALL_PdfContentByte 1
#endif
#undef RESTRICT_PdfContentByte

#if !defined (ComAowagieTextPdfPdfContentByte_) && (INCLUDE_ALL_PdfContentByte || defined(INCLUDE_ComAowagieTextPdfPdfContentByte))
#define ComAowagieTextPdfPdfContentByte_

@class ComAowagieTextImage;
@class ComAowagieTextPdfBaseFont;
@class ComAowagieTextPdfByteBuffer;
@class ComAowagieTextPdfPageResources;
@class ComAowagieTextPdfPdfAction;
@class ComAowagieTextPdfPdfAnnotation;
@class ComAowagieTextPdfPdfContentByte_GraphicState;
@class ComAowagieTextPdfPdfDocument;
@class ComAowagieTextPdfPdfGState;
@class ComAowagieTextPdfPdfIndirectReference;
@class ComAowagieTextPdfPdfName;
@class ComAowagieTextPdfPdfOutline;
@class ComAowagieTextPdfPdfPatternPainter;
@class ComAowagieTextPdfPdfShadingPattern;
@class ComAowagieTextPdfPdfSpotColor;
@class ComAowagieTextPdfPdfTemplate;
@class ComAowagieTextPdfPdfTextArray;
@class ComAowagieTextPdfPdfWriter;
@class ComAowagieTextRectangle;
@class HarmonyJavaAwtColor;
@class IOSByteArray;
@class JavaUtilArrayList;

/*!
 @brief <CODE>PdfContentByte</CODE> is an object containing the user positioned
  text and graphic contents of a page.It knows how to apply the proper
  font encoding.
 */
@interface ComAowagieTextPdfPdfContentByte : NSObject {
 @public
  /*!
   @brief This is the actual content
   */
  ComAowagieTextPdfByteBuffer *content_;
  /*!
   @brief This is the writer
   */
  ComAowagieTextPdfPdfWriter *writer_;
  /*!
   @brief This is the PdfDocument
   */
  ComAowagieTextPdfPdfDocument *pdf_;
  /*!
   @brief This is the GraphicState in use
   */
  ComAowagieTextPdfPdfContentByte_GraphicState *state_;
  /*!
   @brief The separator between commands.
   */
  jint separator_;
}

#pragma mark Public

/*!
 @brief Adds an <CODE>Image</CODE> to the page.The <CODE>Image</CODE> must have
  absolute positioning.
 @param image the  <CODE> Image </CODE>  object
 @throw DocumentExceptionif the <CODE>Image</CODE> does not have absolute positioning
 */
- (void)addImageWithComAowagieTextImage:(ComAowagieTextImage *)image;

/*!
 @brief Adds an <CODE>Image</CODE> to the page.The positioning of the <CODE>Image</CODE>
  is done with the transformation matrix.
 To position an <CODE>image</CODE> at (x,y)
  use addImage(image, image_width, 0, 0, image_height, x, y).
 @param image the  <CODE> Image </CODE>  object
 @param a an element of the transformation matrix
 @param b an element of the transformation matrix
 @param c an element of the transformation matrix
 @param d an element of the transformation matrix
 @param e an element of the transformation matrix
 @param f an element of the transformation matrix
 @throw DocumentExceptionon error
 */
- (void)addImageWithComAowagieTextImage:(ComAowagieTextImage *)image
                              withFloat:(jfloat)a
                              withFloat:(jfloat)b
                              withFloat:(jfloat)c
                              withFloat:(jfloat)d
                              withFloat:(jfloat)e
                              withFloat:(jfloat)f;

/*!
 @brief Adds an <CODE>Image</CODE> to the page.The positioning of the <CODE>Image</CODE>
  is done with the transformation matrix.
 To position an <CODE>image</CODE> at (x,y)
  use addImage(image, image_width, 0, 0, image_height, x, y). The image can be placed inline.
 @param image the  <CODE> Image </CODE>  object
 @param a an element of the transformation matrix
 @param b an element of the transformation matrix
 @param c an element of the transformation matrix
 @param d an element of the transformation matrix
 @param e an element of the transformation matrix
 @param f an element of the transformation matrix
 @param inlineImage <CODE> true </CODE>  to place this image inline,  <CODE> false </CODE>  otherwise
 @throw DocumentExceptionon error
 */
- (void)addImageWithComAowagieTextImage:(ComAowagieTextImage *)image
                              withFloat:(jfloat)a
                              withFloat:(jfloat)b
                              withFloat:(jfloat)c
                              withFloat:(jfloat)d
                              withFloat:(jfloat)e
                              withFloat:(jfloat)f
                            withBoolean:(jboolean)inlineImage;

/*!
 @brief Adds a template to this content.
 @param template_ the template
 @param x the x location of this template
 @param y the y location of this template
 */
- (void)addTemplateWithComAowagieTextPdfPdfTemplate:(ComAowagieTextPdfPdfTemplate *)template_
                                          withFloat:(jfloat)x
                                          withFloat:(jfloat)y;

/*!
 @brief Adds a template to this content.
 @param template_ the template
 @param a an element of the transformation matrix
 @param b an element of the transformation matrix
 @param c an element of the transformation matrix
 @param d an element of the transformation matrix
 @param e an element of the transformation matrix
 @param f an element of the transformation matrix
 */
- (void)addTemplateWithComAowagieTextPdfPdfTemplate:(ComAowagieTextPdfPdfTemplate *)template_
                                          withFloat:(jfloat)a
                                          withFloat:(jfloat)b
                                          withFloat:(jfloat)c
                                          withFloat:(jfloat)d
                                          withFloat:(jfloat)e
                                          withFloat:(jfloat)f;

/*!
 @brief Draws a partial ellipse inscribed within the rectangle x1,y1,x2,y2,
  starting at startAng degrees and covering extent degrees.Angles
  start with 0 to the right (+x) and increase counter-clockwise.
 @param x1 a corner of the enclosing rectangle
 @param y1 a corner of the enclosing rectangle
 @param x2 a corner of the enclosing rectangle
 @param y2 a corner of the enclosing rectangle
 @param startAng starting angle in degrees
 @param extent angle extent in degrees
 */
- (void)arcWithFloat:(jfloat)x1
           withFloat:(jfloat)y1
           withFloat:(jfloat)x2
           withFloat:(jfloat)y2
           withFloat:(jfloat)startAng
           withFloat:(jfloat)extent;

/*!
 @brief Starts the writing of text.
 */
- (void)beginText;

/*!
 @brief Generates an array of bezier curves to draw an arc.
 <P>
  (x1, y1) and (x2, y2) are the corners of the enclosing rectangle.
  Angles, measured in degrees, start with 0 to the right (the positive X
  axis) and increase counter-clockwise.  The arc extends from startAng
  to startAng+extent.  I.e. startAng=0 and extent=180 yields an openside-down
  semi-circle. 
 <P>
  The resulting coordinates are of the form float[]{x1,y1,x2,y2,x3,y3, x4,y4}
  such that the curve goes from (x1, y1) to (x4, y4) with (x2, y2) and
  (x3, y3) as their respective Bezier control points. 
 <P>
  Note: this code was taken from ReportLab (www.reportlab.org), an excellent
  PDF generator for Python (BSD license: http://www.reportlab.org/devfaq.html#1.3 ).
 @param x1 a corner of the enclosing rectangle
 @param y1 a corner of the enclosing rectangle
 @param x2 a corner of the enclosing rectangle
 @param y2 a corner of the enclosing rectangle
 @param startAng starting angle in degrees
 @param extent angle extent in degrees
 @return a list of float[] with the bezier curves
 */
+ (JavaUtilArrayList *)bezierArcWithFloat:(jfloat)x1
                                withFloat:(jfloat)y1
                                withFloat:(jfloat)x2
                                withFloat:(jfloat)y2
                                withFloat:(jfloat)startAng
                                withFloat:(jfloat)extent;

/*!
 @brief Modify the current clipping path by intersecting it with the current path, using the
  nonzero winding number rule to determine which regions lie inside the clipping
  path.
 */
- (void)clip;

/*!
 @brief Closes the current subpath by appending a straight line segment from the current point
  to the starting point of the subpath.
 */
- (void)closePath;

/*!
 @brief Closes the path, fills it using the even-odd rule to determine the region to fill and strokes it.
 */
- (void)closePathEoFillStroke;

/*!
 @brief Closes the path, fills it using the non-zero winding number rule to determine the region to fill and strokes it.
 */
- (void)closePathFillStroke;

/*!
 @brief Closes the path and strokes it.
 */
- (void)closePathStroke;

/*!
 @brief Concatenate a matrix to the current transformation matrix.
 @param a an element of the transformation matrix
 @param b an element of the transformation matrix
 @param c an element of the transformation matrix
 @param d an element of the transformation matrix
 @param e an element of the transformation matrix
 @param f an element of the transformation matrix
 */
- (void)concatCTMWithFloat:(jfloat)a
                 withFloat:(jfloat)b
                 withFloat:(jfloat)c
                 withFloat:(jfloat)d
                 withFloat:(jfloat)e
                 withFloat:(jfloat)f;

/*!
 @brief Appends a B&#xea;zier curve to the path, starting from the current point.
 @param x1 x-coordinate of the first control point
 @param y1 y-coordinate of the first control point
 @param x2 x-coordinate of the second control point
 @param y2 y-coordinate of the second control point
 @param x3 x-coordinate of the ending point (= new current point)
 @param y3 y-coordinate of the ending point (= new current point)
 */
- (void)curveToWithFloat:(jfloat)x1
               withFloat:(jfloat)y1
               withFloat:(jfloat)x2
               withFloat:(jfloat)y2
               withFloat:(jfloat)x3
               withFloat:(jfloat)y3;

/*!
 @brief Ends the writing of text and makes the current font invalid.
 */
- (void)endText;

/*!
 @brief Modify the current clipping path by intersecting it with the current path, using the
  even-odd rule to determine which regions lie inside the clipping path.
 */
- (void)eoClip;

/*!
 @brief Fills the path, using the even-odd rule to determine the region to fill.
 */
- (void)eoFill;

/*!
 @brief Fills the path, using the non-zero winding number rule to determine the region to fill.
 */
- (void)fill;

/*!
 @brief Gets the current character spacing.
 @return the current character spacing
 */
- (jfloat)getCharacterSpacing;

/*!
 @brief Gets a duplicate of this <CODE>PdfContentByte</CODE>.All
  the members are copied by reference but the buffer stays different.
 @return a copy of this <CODE>PdfContentByte</CODE>
 */
- (ComAowagieTextPdfPdfContentByte *)getDuplicate;

/*!
 @brief Gets the current character spacing.
 @return the current character spacing
 */
- (jfloat)getHorizontalScaling;

/*!
 @brief Gets the internal buffer.
 @return the internal buffer
 */
- (ComAowagieTextPdfByteBuffer *)getInternalBuffer;

/*!
 @brief Gets the current text leading.
 @return the current text leading
 */
- (jfloat)getLeading;

/*!
 @brief Gets the <CODE>PdfDocument</CODE> in use by this object.
 @return the <CODE>PdfDocument</CODE> in use by this object
 */
- (ComAowagieTextPdfPdfDocument *)getPdfDocument;

/*!
 @brief Gets the <CODE>PdfWriter</CODE> in use by this object.
 @return the <CODE>PdfWriter</CODE> in use by this object
 */
- (ComAowagieTextPdfPdfWriter *)getPdfWriter;

/*!
 @brief Gets the root outline.
 @return the root outline
 */
- (ComAowagieTextPdfPdfOutline *)getRootOutline;

/*!
 @brief Gets the current word spacing.
 @return the current word spacing
 */
- (jfloat)getWordSpacing;

/*!
 @brief Gets the x position of the text line matrix.
 @return the x position of the text line matrix
 */
- (jfloat)getXTLM;

/*!
 @brief Gets the y position of the text line matrix.
 @return the y position of the text line matrix
 */
- (jfloat)getYTLM;

/*!
 @brief Appends a straight line segment from the current point <I>(x, y)</I>.The new current
  point is <I>(x, y)</I>.
 @param x new x-coordinate
 @param y new y-coordinate
 */
- (void)lineToWithFloat:(jfloat)x
              withFloat:(jfloat)y;

/*!
 @brief Move the current point <I>(x, y)</I>, omitting any connecting line segment.
 @param x new x-coordinate
 @param y new y-coordinate
 */
- (void)moveToWithFloat:(jfloat)x
              withFloat:(jfloat)y;

/*!
 @brief Ends the path without filling or stroking it.
 */
- (void)newPath OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Adds a rectangle to the current path.
 @param x x-coordinate of the starting point
 @param y y-coordinate of the starting point
 @param w width
 @param h height
 */
- (void)rectangleWithFloat:(jfloat)x
                 withFloat:(jfloat)y
                 withFloat:(jfloat)w
                 withFloat:(jfloat)h;

/*!
 @brief Adds a border (complete or partially) to the current path..
 @param rectangle a  <CODE> Rectangle </CODE>
 */
- (void)rectangleWithComAowagieTextRectangle:(ComAowagieTextRectangle *)rectangle;

/*!
 @brief Makes this <CODE>PdfContentByte</CODE> empty.
 Calls <code>reset( true )</code>
 */
- (void)reset;

/*!
 @brief Changes the current color for filling paths to black.
 */
- (void)resetCMYKColorFill;

/*!
 @brief Changes the current color for stroking paths to black.
 */
- (void)resetCMYKColorStroke;

/*!
 @brief Changes the current gray tint for filling paths to black.
 */
- (void)resetGrayFill;

/*!
 @brief Changes the current gray tint for stroking paths to black.
 */
- (void)resetGrayStroke;

/*!
 @brief Changes the current color for filling paths to black.
 */
- (void)resetRGBColorFill;

/*!
 @brief Changes the current color for stroking paths to black.
 */
- (void)resetRGBColorStroke;

/*!
 @brief Restores the graphic state.
 <CODE>saveState</CODE> and 
 <CODE>restoreState</CODE> must be balanced.
 */
- (void)restoreState;

/*!
 @brief Adds a round rectangle to the current path.
 @param x x-coordinate of the starting point
 @param y y-coordinate of the starting point
 @param w width
 @param h height
 @param r radius of the arc corner
 */
- (void)roundRectangleWithFloat:(jfloat)x
                      withFloat:(jfloat)y
                      withFloat:(jfloat)w
                      withFloat:(jfloat)h
                      withFloat:(jfloat)r;

/*!
 @brief Saves the graphic state.
 <CODE>saveState</CODE> and 
 <CODE>restoreState</CODE> must be balanced.
 */
- (void)saveState;

/*!
 @brief Implements an action in an area.
 @param action the  <CODE> PdfAction </CODE>
 @param llx the lower left x corner of the activation area
 @param lly the lower left y corner of the activation area
 @param urx the upper right x corner of the activation area
 @param ury the upper right y corner of the activation area
 */
- (void)setActionWithComAowagieTextPdfPdfAction:(ComAowagieTextPdfPdfAction *)action
                                      withFloat:(jfloat)llx
                                      withFloat:(jfloat)lly
                                      withFloat:(jfloat)urx
                                      withFloat:(jfloat)ury;

/*!
 @brief Sets the character spacing parameter.
 @param charSpace a parameter
 */
- (void)setCharacterSpacingWithFloat:(jfloat)charSpace;

/*!
 @brief Changes the current color for filling paths (device dependent colors!).
 <P>
  Sets the color space to <B>DeviceCMYK</B> (or the <B>DefaultCMYK</B> color space),
  and sets the color to use for filling paths.</P>
  <P>
  This method is described in the 'Portable Document Format Reference Manual version 1.3'
  section 8.5.2.1 (page 331).</P>
  <P>
  Following the PDF manual, each operand must be a number between 0 (no ink) and
  1 (maximum ink). This method however accepts only integers between 0x00 and 0xFF.</P>
 @param cyan the intensity of cyan
 @param magenta the intensity of magenta
 @param yellow the intensity of yellow
 @param black the intensity of black
 */
- (void)setCMYKColorFillWithInt:(jint)cyan
                        withInt:(jint)magenta
                        withInt:(jint)yellow
                        withInt:(jint)black;

/*!
 @brief Changes the current color for filling paths (device dependent colors!).
 <P>
  Sets the color space to <B>DeviceCMYK</B> (or the <B>DefaultCMYK</B> color space),
  and sets the color to use for filling paths.</P>
  <P>
  Following the PDF manual, each operand must be a number between 0 (no ink) and
  1 (maximum ink).</P>
 @param cyan the intensity of cyan. A value between 0 and 1
 @param magenta the intensity of magenta. A value between 0 and 1
 @param yellow the intensity of yellow. A value between 0 and 1
 @param black the intensity of black. A value between 0 and 1
 */
- (void)setCMYKColorFillFWithFloat:(jfloat)cyan
                         withFloat:(jfloat)magenta
                         withFloat:(jfloat)yellow
                         withFloat:(jfloat)black;

/*!
 @brief Changes the current color for stroking paths (device dependent colors!).
 <P>
  Sets the color space to <B>DeviceCMYK</B> (or the <B>DefaultCMYK</B> color space),
  and sets the color to use for stroking paths.</P>
  <P>
  This method is described in the 'Portable Document Format Reference Manual version 1.3'
  section 8.5.2.1 (page 331).</P>
  Following the PDF manual, each operand must be a number between 0 (minimum intensity) and
  1 (maximum intensity). This method however accepts only integers between 0x00 and 0xFF.
 @param cyan the intensity of red
 @param magenta the intensity of green
 @param yellow the intensity of blue
 @param black the intensity of black
 */
- (void)setCMYKColorStrokeWithInt:(jint)cyan
                          withInt:(jint)magenta
                          withInt:(jint)yellow
                          withInt:(jint)black;

/*!
 @brief Changes the current color for stroking paths (device dependent colors!).
 <P>
  Sets the color space to <B>DeviceCMYK</B> (or the <B>DefaultCMYK</B> color space),
  and sets the color to use for stroking paths.</P>
  <P>
  Following the PDF manual, each operand must be a number between 0 (miniumum intensity) and
  1 (maximum intensity).
 @param cyan the intensity of cyan. A value between 0 and 1
 @param magenta the intensity of magenta. A value between 0 and 1
 @param yellow the intensity of yellow. A value between 0 and 1
 @param black the intensity of black. A value between 0 and 1
 */
- (void)setCMYKColorStrokeFWithFloat:(jfloat)cyan
                           withFloat:(jfloat)magenta
                           withFloat:(jfloat)yellow
                           withFloat:(jfloat)black;

/*!
 @brief Sets the fill color.
 <CODE>color</CODE> can be an 
 <CODE>ExtendedColor</CODE>.
 @param color the color
 */
- (void)setColorFillWithHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color;

/*!
 @brief Sets the fill color to a spot color.
 @param sp the spot color
 @param tint the tint for the spot color. 0 is no color and 1  is 100% color
 */
- (void)setColorFillWithComAowagieTextPdfPdfSpotColor:(ComAowagieTextPdfPdfSpotColor *)sp
                                            withFloat:(jfloat)tint;

/*!
 @brief Sets the stroke color.
 <CODE>color</CODE> can be an 
 <CODE>ExtendedColor</CODE>.
 @param color the color
 */
- (void)setColorStrokeWithHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color;

/*!
 @brief Sets the stroke color to a spot color.
 @param sp the spot color
 @param tint the tint for the spot color. 0 is no color and 1  is 100% color
 */
- (void)setColorStrokeWithComAowagieTextPdfPdfSpotColor:(ComAowagieTextPdfPdfSpotColor *)sp
                                              withFloat:(jfloat)tint;

/*!
 @brief Changes the <VAR>Flatness</VAR>.
 <P>
  <VAR>Flatness</VAR> sets the maximum permitted distance in device pixels between the
  mathematically correct path and an approximation constructed from straight line segments.<BR>
 @param flatness a value
 */
- (void)setFlatnessWithFloat:(jfloat)flatness;

/*!
 @brief Set the font and the size for the subsequent text writing.
 @param bf the font
 @param size the font size in points
 */
- (void)setFontAndSizeWithComAowagieTextPdfBaseFont:(ComAowagieTextPdfBaseFont *)bf
                                          withFloat:(jfloat)size;

/*!
 @brief Changes the currentgray tint for filling paths (device dependent colors!).
 <P>
  Sets the color space to <B>DeviceGray</B> (or the <B>DefaultGray</B> color space),
  and sets the gray tint to use for filling paths.</P>
 @param gray a value between 0 (black) and 1 (white)
 */
- (void)setGrayFillWithFloat:(jfloat)gray;

/*!
 @brief Changes the currentgray tint for stroking paths (device dependent colors!).
 <P>
  Sets the color space to <B>DeviceGray</B> (or the <B>DefaultGray</B> color space),
  and sets the gray tint to use for stroking paths.</P>
 @param gray a value between 0 (black) and 1 (white)
 */
- (void)setGrayStrokeWithFloat:(jfloat)gray;

/*!
 @brief Sets the graphic state
 @param gstate the graphic state
 */
- (void)setGStateWithComAowagieTextPdfPdfGState:(ComAowagieTextPdfPdfGState *)gstate;

/*!
 @brief Sets the horizontal scaling parameter.
 @param scale_ a parameter
 */
- (void)setHorizontalScalingWithFloat:(jfloat)scale_;

/*!
 @brief Sets the text leading parameter.
 <P>
  The leading parameter is measured in text space units. It specifies the vertical distance
  between the baselines of adjacent lines of text.</P>
 @param leading the new leading
 */
- (void)setLeadingWithFloat:(jfloat)leading;

/*!
 @brief Changes the <VAR>Line cap style</VAR>.
 <P>
  The <VAR>line cap style</VAR> specifies the shape to be used at the end of open subpaths
  when they are stroked.<BR>
  Allowed values are LINE_CAP_BUTT, LINE_CAP_ROUND and LINE_CAP_PROJECTING_SQUARE.<BR>
 @param style a value
 */
- (void)setLineCapWithInt:(jint)style;

/*!
 @brief Changes the value of the <VAR>line dash pattern</VAR>.
 <P>
  The line dash pattern controls the pattern of dashes and gaps used to stroke paths.
  It is specified by an <I>array</I> and a <I>phase</I>. The array specifies the length
  of the alternating dashes and gaps. The phase specifies the distance into the dash
  pattern to start the dash.<BR>
 @param phase the value of the phase
 */
- (void)setLineDashWithFloat:(jfloat)phase;

/*!
 @brief Changes the value of the <VAR>line dash pattern</VAR>.
 <P>
  The line dash pattern controls the pattern of dashes and gaps used to stroke paths.
  It is specified by an <I>array</I> and a <I>phase</I>. The array specifies the length
  of the alternating dashes and gaps. The phase specifies the distance into the dash
  pattern to start the dash.<BR>
 @param phase the value of the phase
 @param unitsOn the number of units that must be 'on' (equals the number of units that must be 'off').
 */
- (void)setLineDashWithFloat:(jfloat)unitsOn
                   withFloat:(jfloat)phase;

/*!
 @brief Changes the value of the <VAR>line dash pattern</VAR>.
 <P>
  The line dash pattern controls the pattern of dashes and gaps used to stroke paths.
  It is specified by an <I>array</I> and a <I>phase</I>. The array specifies the length
  of the alternating dashes and gaps. The phase specifies the distance into the dash
  pattern to start the dash.<BR>
 @param phase the value of the phase
 @param unitsOn the number of units that must be 'on'
 @param unitsOff the number of units that must be 'off'
 */
- (void)setLineDashWithFloat:(jfloat)unitsOn
                   withFloat:(jfloat)unitsOff
                   withFloat:(jfloat)phase;

/*!
 @brief Changes the <VAR>Line join style</VAR>.
 <P>
  The <VAR>line join style</VAR> specifies the shape to be used at the corners of paths
  that are stroked.<BR>
  Allowed values are LINE_JOIN_MITER (Miter joins), LINE_JOIN_ROUND (Round joins) and LINE_JOIN_BEVEL (Bevel joins).<BR>
 @param style a value
 */
- (void)setLineJoinWithInt:(jint)style;

/*!
 @brief Changes the <VAR>line width</VAR>.
 <P>
  The line width specifies the thickness of the line used to stroke a path and is measured
  in user space units.<BR>
 @param w a width
 */
- (void)setLineWidthWithFloat:(jfloat)w;

/*!
 @brief Outputs a <CODE>char</CODE> directly to the content.
 @param c the  <CODE> char </CODE>
 */
- (void)setLiteralWithChar:(jchar)c;

/*!
 @brief Outputs a <CODE>float</CODE> directly to the content.
 @param n the  <CODE> float </CODE>
 */
- (void)setLiteralWithFloat:(jfloat)n;

/*!
 @brief Outputs a <CODE>String</CODE> directly to the content.
 @param s the  <CODE> String </CODE>
 */
- (void)setLiteralWithNSString:(NSString *)s;

/*!
 @brief Changes the <VAR>Miter limit</VAR>.
 <P>
  When two line segments meet at a sharp angle and mitered joins have been specified as the
  line join style, it is possible for the miter to extend far beyond the thickness of the line
  stroking path. The miter limit imposes a maximum on the ratio of the miter length to the line
  witdh. When the limit is exceeded, the join is converted from a miter to a bevel.<BR>
 @param miterLimit a miter limit
 */
- (void)setMiterLimitWithFloat:(jfloat)miterLimit;

/*!
 @brief Sets the fill color to a pattern.The pattern can be
  colored or uncolored.
 @param p the pattern
 */
- (void)setPatternFillWithComAowagieTextPdfPdfPatternPainter:(ComAowagieTextPdfPdfPatternPainter *)p;

/*!
 @brief Sets the fill color to an uncolored pattern.
 @param p the pattern
 @param color the color of the pattern
 @param tint the tint if the color is a spot color, ignored otherwise
 */
- (void)setPatternFillWithComAowagieTextPdfPdfPatternPainter:(ComAowagieTextPdfPdfPatternPainter *)p
                                     withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color
                                                   withFloat:(jfloat)tint;

/*!
 @brief Sets the stroke color to a pattern.The pattern can be
  colored or uncolored.
 @param p the pattern
 */
- (void)setPatternStrokeWithComAowagieTextPdfPdfPatternPainter:(ComAowagieTextPdfPdfPatternPainter *)p;

/*!
 @brief Sets the stroke color to an uncolored pattern.
 @param p the pattern
 @param color the color of the pattern
 @param tint the tint if the color is a spot color, ignored otherwise
 */
- (void)setPatternStrokeWithComAowagieTextPdfPdfPatternPainter:(ComAowagieTextPdfPdfPatternPainter *)p
                                       withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color
                                                     withFloat:(jfloat)tint;

/*!
 @brief Changes the current color for filling paths (device dependent colors!).
 <P>
  Sets the color space to <B>DeviceRGB</B> (or the <B>DefaultRGB</B> color space),
  and sets the color to use for filling paths.</P>
  <P>
  This method is described in the 'Portable Document Format Reference Manual version 1.3'
  section 8.5.2.1 (page 331).</P>
  <P>
  Following the PDF manual, each operand must be a number between 0 (minimum intensity) and
  1 (maximum intensity). This method however accepts only integers between 0x00 and 0xFF.</P>
 @param red the intensity of red
 @param green the intensity of green
 @param blue the intensity of blue
 */
- (void)setRGBColorFillWithInt:(jint)red
                       withInt:(jint)green
                       withInt:(jint)blue;

/*!
 @brief Changes the current color for filling paths (device dependent colors!).
 <P>
  Sets the color space to <B>DeviceRGB</B> (or the <B>DefaultRGB</B> color space),
  and sets the color to use for filling paths.</P>
  <P>
  Following the PDF manual, each operand must be a number between 0 (minimum intensity) and
  1 (maximum intensity).</P>
 @param red the intensity of red. A value between 0 and 1
 @param green the intensity of green. A value between 0 and 1
 @param blue the intensity of blue. A value between 0 and 1
 */
- (void)setRGBColorFillFWithFloat:(jfloat)red
                        withFloat:(jfloat)green
                        withFloat:(jfloat)blue;

/*!
 @brief Changes the current color for stroking paths (device dependent colors!).
 <P>
  Sets the color space to <B>DeviceRGB</B> (or the <B>DefaultRGB</B> color space),
  and sets the color to use for stroking paths.</P>
  <P>
  This method is described in the 'Portable Document Format Reference Manual version 1.3'
  section 8.5.2.1 (page 331).</P>
  Following the PDF manual, each operand must be a number between 0 (minimum intensity) and
  1 (maximum intensity). This method however accepts only integers between 0x00 and 0xFF.
 @param red the intensity of red
 @param green the intensity of green
 @param blue the intensity of blue
 */
- (void)setRGBColorStrokeWithInt:(jint)red
                         withInt:(jint)green
                         withInt:(jint)blue;

/*!
 @brief Changes the current color for stroking paths (device dependent colors!).
 <P>
  Sets the color space to <B>DeviceRGB</B> (or the <B>DefaultRGB</B> color space),
  and sets the color to use for stroking paths.</P>
  <P>
  Following the PDF manual, each operand must be a number between 0 (miniumum intensity) and
  1 (maximum intensity).
 @param red the intensity of red. A value between 0 and 1
 @param green the intensity of green. A value between 0 and 1
 @param blue the intensity of blue. A value between 0 and 1
 */
- (void)setRGBColorStrokeFWithFloat:(jfloat)red
                          withFloat:(jfloat)green
                          withFloat:(jfloat)blue;

/*!
 @brief Sets the shading fill pattern.
 @param shading the shading pattern
 */
- (void)setShadingFillWithComAowagieTextPdfPdfShadingPattern:(ComAowagieTextPdfPdfShadingPattern *)shading;

/*!
 @brief Sets the shading stroke pattern
 @param shading the shading pattern
 */
- (void)setShadingStrokeWithComAowagieTextPdfPdfShadingPattern:(ComAowagieTextPdfPdfShadingPattern *)shading;

/*!
 @brief Changes the text matrix.The first four parameters are {1,0,0,1}.
 <P>
  Remark: this operation also initializes the current point position.</P>
 @param x operand 3,1 in the matrix
 @param y operand 3,2 in the matrix
 */
- (void)setTextMatrixWithFloat:(jfloat)x
                     withFloat:(jfloat)y;

/*!
 @brief Sets the text rendering parameter.
 @param rendering a parameter
 */
- (void)setTextRenderingModeWithInt:(jint)rendering;

/*!
 @brief Sets the text rise parameter.
 <P>
  This allows to write text in subscript or superscript mode.</P>
 @param rise a parameter
 */
- (void)setTextRiseWithFloat:(jfloat)rise;

/*!
 @brief Sets the word spacing parameter.
 @param wordSpace a parameter
 */
- (void)setWordSpacingWithFloat:(jfloat)wordSpace;

/*!
 @brief Shows the <CODE>text</CODE>.
 @param text the text to write
 */
- (void)showTextWithNSString:(NSString *)text;

/*!
 @brief Strokes the path.
 */
- (void)stroke;

/*!
 @brief Returns the <CODE>String</CODE> representation of this <CODE>PdfContentByte</CODE>-object.
 @return a <CODE>String</CODE>
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief Check if we have a valid PdfWriter.
 */
- (void)checkWriter;

#pragma mark Package-Private

/*!
 @brief Constructs a new <CODE>PdfContentByte</CODE>-object.
 @param wr the writer associated to this content
 */
- (instancetype)initWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)wr;

/*!
 @brief Adds the content of another <CODE>PdfContent</CODE>-object to this object.
 @param other another  <CODE> PdfByteContent </CODE> -object
 */
- (void)addWithComAowagieTextPdfPdfContentByte:(ComAowagieTextPdfPdfContentByte *)other;

- (void)addAnnotationWithComAowagieTextPdfPdfAnnotation:(ComAowagieTextPdfPdfAnnotation *)annot;

- (void)addTemplateReferenceWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)template_
                                         withComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)name
                                                            withFloat:(jfloat)a
                                                            withFloat:(jfloat)b
                                                            withFloat:(jfloat)c
                                                            withFloat:(jfloat)d
                                                            withFloat:(jfloat)e
                                                            withFloat:(jfloat)f;

/*!
 @brief Create a new colored tiling pattern.Variables xstep and ystep are set to the same values
  of width and height.
 @param width the width of the pattern
 @param height the height of the pattern
 @return the <CODE>PdfPatternPainter</CODE> where the pattern will be created
 */
- (ComAowagieTextPdfPdfPatternPainter *)createPatternWithFloat:(jfloat)width
                                                     withFloat:(jfloat)height;

/*!
 @brief Appends a B&#xea;zier curve to the path, starting from the current point.
 @param x2 x-coordinate of the second control point
 @param y2 y-coordinate of the second control point
 @param x3 x-coordinate of the ending point (= new current point)
 @param y3 y-coordinate of the ending point (= new current point)
 */
- (void)curveToWithFloat:(jfloat)x2
               withFloat:(jfloat)y2
               withFloat:(jfloat)x3
               withFloat:(jfloat)y3;

/*!
 @brief Draws a button.
 @param llx the lower left x corner of the activation area
 @param lly the lower left y corner of the activation area
 @param urx the upper right x corner of the activation area
 @param ury the upper right y corner of the activation area
 @param text text
 @param bf Base font
 @param size Size
 */
- (void)drawButtonWithFloat:(jfloat)llx
                  withFloat:(jfloat)lly
                  withFloat:(jfloat)urx
                  withFloat:(jfloat)ury
               withNSString:(NSString *)text
withComAowagieTextPdfBaseFont:(ComAowagieTextPdfBaseFont *)bf
                  withFloat:(jfloat)size;

/*!
 @brief Draws a TextField.
 @param llx the lower left x corner of the activation area
 @param lly the lower left y corner of the activation area
 @param urx the upper right x corner of the activation area
 @param ury the upper right y corner of the activation area
 @param on On
 */
- (void)drawRadioFieldWithFloat:(jfloat)llx
                      withFloat:(jfloat)lly
                      withFloat:(jfloat)urx
                      withFloat:(jfloat)ury
                    withBoolean:(jboolean)on;

/*!
 @brief Draws a TextField.
 @param llx the lower left x corner of the activation area
 @param lly the lower left y corner of the activation area
 @param urx the upper right x corner of the activation area
 @param ury the upper right y corner of the activation area
 */
- (void)drawTextFieldWithFloat:(jfloat)llx
                     withFloat:(jfloat)lly
                     withFloat:(jfloat)urx
                     withFloat:(jfloat)ury;

/*!
 @brief Escapes a <CODE>byte</CODE> array according to the PDF conventions.
 @param b the  <CODE> byte </CODE>  array to escape
 @return an escaped <CODE>byte</CODE> array
 */
+ (IOSByteArray *)escapeStringWithByteArray:(IOSByteArray *)b;

- (ComAowagieTextPdfPageResources *)getPageResources;

/*!
 @brief Moves to the start of the next line, offset from the start of the current line.
 @param x x-coordinate of the new current point
 @param y y-coordinate of the new current point
 */
- (void)moveTextWithFloat:(jfloat)x
                withFloat:(jfloat)y;

/*!
 @brief Changes the text matrix.
 <P>
  Remark: this operation also initializes the current point position.</P>
 @param a operand 1,1 in the matrix
 @param b operand 1,2 in the matrix
 @param c operand 2,1 in the matrix
 @param d operand 2,2 in the matrix
 @param x operand 3,1 in the matrix
 @param y operand 3,2 in the matrix
 */
- (void)setTextMatrixWithFloat:(jfloat)a
                     withFloat:(jfloat)b
                     withFloat:(jfloat)c
                     withFloat:(jfloat)d
                     withFloat:(jfloat)x
                     withFloat:(jfloat)y;

/*!
 @brief Show an array of text.
 @param text array of text
 */
- (void)showTextWithComAowagieTextPdfPdfTextArray:(ComAowagieTextPdfPdfTextArray *)text;

/*!
 @brief Shows text right, left or center aligned with rotation.
 @param alignment the alignment can be ALIGN_CENTER, ALIGN_RIGHT or ALIGN_LEFT
 @param text the text to show
 @param x the x pivot position
 @param y the y pivot position
 @param rotation the rotation to be applied in degrees counterclockwise
 */
- (void)showTextAlignedWithInt:(jint)alignment
                  withNSString:(NSString *)text
                     withFloat:(jfloat)x
                     withFloat:(jfloat)y
                     withFloat:(jfloat)rotation;

/*!
 @brief Gets the size of this content.
 @return the size of the content
 */
- (jint)size;

/*!
 @brief Returns the PDF representation of this <CODE>PdfContentByte</CODE>-object.
 @param writer the  <CODE> PdfWriter </CODE>
 @return a <CODE>byte</CODE> array with the representation
 */
- (IOSByteArray *)toPdfWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfPdfContentByte)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfContentByte, content_, ComAowagieTextPdfByteBuffer *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfContentByte, writer_, ComAowagieTextPdfPdfWriter *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfContentByte, pdf_, ComAowagieTextPdfPdfDocument *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfContentByte, state_, ComAowagieTextPdfPdfContentByte_GraphicState *)

/*!
 @brief The alignment is center
 */
inline jint ComAowagieTextPdfPdfContentByte_get_ALIGN_CENTER(void);
#define ComAowagieTextPdfPdfContentByte_ALIGN_CENTER 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfContentByte, ALIGN_CENTER, jint)

/*!
 @brief The alignment is left
 */
inline jint ComAowagieTextPdfPdfContentByte_get_ALIGN_LEFT(void);
#define ComAowagieTextPdfPdfContentByte_ALIGN_LEFT 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfContentByte, ALIGN_LEFT, jint)

/*!
 @brief A possible text rendering value
 */
inline jint ComAowagieTextPdfPdfContentByte_get_TEXT_RENDER_MODE_FILL(void);
#define ComAowagieTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfContentByte, TEXT_RENDER_MODE_FILL, jint)

/*!
 @brief A possible text rendering value
 */
inline jint ComAowagieTextPdfPdfContentByte_get_TEXT_RENDER_MODE_STROKE(void);
#define ComAowagieTextPdfPdfContentByte_TEXT_RENDER_MODE_STROKE 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfContentByte, TEXT_RENDER_MODE_STROKE, jint)

/*!
 @brief A possible text rendering value
 */
inline jint ComAowagieTextPdfPdfContentByte_get_TEXT_RENDER_MODE_FILL_STROKE(void);
#define ComAowagieTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL_STROKE 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfContentByte, TEXT_RENDER_MODE_FILL_STROKE, jint)

FOUNDATION_EXPORT void ComAowagieTextPdfPdfContentByte_initWithComAowagieTextPdfPdfWriter_(ComAowagieTextPdfPdfContentByte *self, ComAowagieTextPdfPdfWriter *wr);

FOUNDATION_EXPORT ComAowagieTextPdfPdfContentByte *new_ComAowagieTextPdfPdfContentByte_initWithComAowagieTextPdfPdfWriter_(ComAowagieTextPdfPdfWriter *wr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfContentByte *create_ComAowagieTextPdfPdfContentByte_initWithComAowagieTextPdfPdfWriter_(ComAowagieTextPdfPdfWriter *wr);

FOUNDATION_EXPORT IOSByteArray *ComAowagieTextPdfPdfContentByte_escapeStringWithByteArray_(IOSByteArray *b);

FOUNDATION_EXPORT JavaUtilArrayList *ComAowagieTextPdfPdfContentByte_bezierArcWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(jfloat x1, jfloat y1, jfloat x2, jfloat y2, jfloat startAng, jfloat extent);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfContentByte)

#endif

#if !defined (ComAowagieTextPdfPdfContentByte_GraphicState_) && (INCLUDE_ALL_PdfContentByte || defined(INCLUDE_ComAowagieTextPdfPdfContentByte_GraphicState))
#define ComAowagieTextPdfPdfContentByte_GraphicState_

@class ComAowagieTextPdfFontDetails;

/*!
 @brief This class keeps the graphic state of the current page
 */
@interface ComAowagieTextPdfPdfContentByte_GraphicState : NSObject {
 @public
  /*!
   @brief This is the font in use
   */
  ComAowagieTextPdfFontDetails *fontDetails_;
  /*!
   @brief This is the font size in use
   */
  jfloat size_;
  /*!
   @brief The current character spacing
   */
  jfloat charSpace_;
}

#pragma mark Package-Private

- (instancetype)init;

- (instancetype)initWithComAowagieTextPdfPdfContentByte_GraphicState:(ComAowagieTextPdfPdfContentByte_GraphicState *)cp;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfPdfContentByte_GraphicState)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfContentByte_GraphicState, fontDetails_, ComAowagieTextPdfFontDetails *)

FOUNDATION_EXPORT void ComAowagieTextPdfPdfContentByte_GraphicState_init(ComAowagieTextPdfPdfContentByte_GraphicState *self);

FOUNDATION_EXPORT ComAowagieTextPdfPdfContentByte_GraphicState *new_ComAowagieTextPdfPdfContentByte_GraphicState_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfContentByte_GraphicState *create_ComAowagieTextPdfPdfContentByte_GraphicState_init(void);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfContentByte_GraphicState_initWithComAowagieTextPdfPdfContentByte_GraphicState_(ComAowagieTextPdfPdfContentByte_GraphicState *self, ComAowagieTextPdfPdfContentByte_GraphicState *cp);

FOUNDATION_EXPORT ComAowagieTextPdfPdfContentByte_GraphicState *new_ComAowagieTextPdfPdfContentByte_GraphicState_initWithComAowagieTextPdfPdfContentByte_GraphicState_(ComAowagieTextPdfPdfContentByte_GraphicState *cp) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfContentByte_GraphicState *create_ComAowagieTextPdfPdfContentByte_GraphicState_initWithComAowagieTextPdfPdfContentByte_GraphicState_(ComAowagieTextPdfPdfContentByte_GraphicState *cp);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfContentByte_GraphicState)

#endif

#pragma pop_macro("INCLUDE_ALL_PdfContentByte")
