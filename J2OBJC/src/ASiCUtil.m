//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/signers/asic/ASiCUtil.java
//

#include "AOUtil.h"
#include "ASiCUtil.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LoggerUtil.h"
#include "MimeHelper.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Throwable.h"
#include "java/util/logging/Logger.h"
#include "java/util/zip/ZipEntry.h"
#include "java/util/zip/ZipInputStream.h"
#include "java/util/zip/ZipOutputStream.h"

#if !__has_feature(objc_arc)
#error "ASiCUtil must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreSignersAsicASiCUtil ()

- (instancetype)init;

/*!
 @brief Obtiene la firma de un contenedor ASiC-S.
 @param asic Contendor ASiC-S.
 @param signatureFilename Nombre de la entrada del ZIP con las firmas a obtener.
 @return Firma de un contenedor ASiC-S.
 @throw IOExceptionSi hay alg&uacute;n error en el tratamiento de datos.
 */
+ (IOSByteArray *)getASiCSSignatureWithByteArray:(IOSByteArray *)asic
                                    withNSString:(NSString *)signatureFilename;

@end

inline NSString *EsGobAfirmaCoreSignersAsicASiCUtil_get_ASIC_S_MIMETYPE(void);
static NSString *EsGobAfirmaCoreSignersAsicASiCUtil_ASIC_S_MIMETYPE = @"application/vnd.etsi.asic-s+zip";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAsicASiCUtil, ASIC_S_MIMETYPE, NSString *)

inline NSString *EsGobAfirmaCoreSignersAsicASiCUtil_get_DEFAULT_DATAOBJECT_EXTENSION(void);
static NSString *EsGobAfirmaCoreSignersAsicASiCUtil_DEFAULT_DATAOBJECT_EXTENSION = @"bin";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAsicASiCUtil, DEFAULT_DATAOBJECT_EXTENSION, NSString *)

inline NSString *EsGobAfirmaCoreSignersAsicASiCUtil_get_ENTRY_NAME_MIMETYPE(void);
static NSString *EsGobAfirmaCoreSignersAsicASiCUtil_ENTRY_NAME_MIMETYPE = @"mimetype";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAsicASiCUtil, ENTRY_NAME_MIMETYPE, NSString *)

inline JavaUtilLoggingLogger *EsGobAfirmaCoreSignersAsicASiCUtil_get_LOGGER(void);
static JavaUtilLoggingLogger *EsGobAfirmaCoreSignersAsicASiCUtil_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSignersAsicASiCUtil, LOGGER, JavaUtilLoggingLogger *)

inline jint EsGobAfirmaCoreSignersAsicASiCUtil_get_THRESHOLD_FILE_SIZE(void);
#define EsGobAfirmaCoreSignersAsicASiCUtil_THRESHOLD_FILE_SIZE 1000000000
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreSignersAsicASiCUtil, THRESHOLD_FILE_SIZE, jint)

__attribute__((unused)) static void EsGobAfirmaCoreSignersAsicASiCUtil_init(EsGobAfirmaCoreSignersAsicASiCUtil *self);

__attribute__((unused)) static EsGobAfirmaCoreSignersAsicASiCUtil *new_EsGobAfirmaCoreSignersAsicASiCUtil_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobAfirmaCoreSignersAsicASiCUtil *create_EsGobAfirmaCoreSignersAsicASiCUtil_init(void);

__attribute__((unused)) static IOSByteArray *EsGobAfirmaCoreSignersAsicASiCUtil_getASiCSSignatureWithByteArray_withNSString_(IOSByteArray *asic, NSString *signatureFilename);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/signers/asic/ASiCUtil.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaCoreSignersAsicASiCUtil)

NSString *EsGobAfirmaCoreSignersAsicASiCUtil_ENTRY_NAME_BINARY_SIGNATURE = @"META-INF/signature.p7s";
NSString *EsGobAfirmaCoreSignersAsicASiCUtil_ENTRY_NAME_XML_SIGNATURE = @"META-INF/signatures.xml";


#line 26
@implementation EsGobAfirmaCoreSignersAsicASiCUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 44
- (instancetype)init {
  EsGobAfirmaCoreSignersAsicASiCUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 51
+ (NSString *)getASiCSDefaultDataFilenameWithByteArray:(IOSByteArray *)data {
  return EsGobAfirmaCoreSignersAsicASiCUtil_getASiCSDefaultDataFilenameWithByteArray_(data);
}


#line 70
+ (IOSByteArray *)createSContainerWithByteArray:(IOSByteArray *)signature
                                  withByteArray:(IOSByteArray *)data
                                   withNSString:(NSString *)signatureFilename
                                   withNSString:(NSString *)dataFilename {
  return EsGobAfirmaCoreSignersAsicASiCUtil_createSContainerWithByteArray_withByteArray_withNSString_withNSString_(signature, data, signatureFilename, dataFilename);
}


#line 125
+ (IOSByteArray *)getASiCSBinarySignatureWithByteArray:(IOSByteArray *)asic {
  return EsGobAfirmaCoreSignersAsicASiCUtil_getASiCSBinarySignatureWithByteArray_(asic);
}


#line 133
+ (IOSByteArray *)getASiCSXMLSignatureWithByteArray:(IOSByteArray *)asic {
  return EsGobAfirmaCoreSignersAsicASiCUtil_getASiCSXMLSignatureWithByteArray_(asic);
}


#line 142
+ (IOSByteArray *)getASiCSSignatureWithByteArray:(IOSByteArray *)asic
                                    withNSString:(NSString *)signatureFilename {
  return EsGobAfirmaCoreSignersAsicASiCUtil_getASiCSSignatureWithByteArray_withNSString_(asic, signatureFilename);
}


#line 175
+ (IOSByteArray *)getASiCSDataWithByteArray:(IOSByteArray *)asic {
  return EsGobAfirmaCoreSignersAsicASiCUtil_getASiCSDataWithByteArray_(asic);
}


#line 204
+ (NSString *)getASiCSDataFilenameWithByteArray:(IOSByteArray *)asic {
  return EsGobAfirmaCoreSignersAsicASiCUtil_getASiCSDataFilenameWithByteArray_(asic);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 2, 3, 4, -1, -1, -1 },
    { NULL, "[B", 0x9, 5, 1, 4, -1, -1, -1 },
    { NULL, "[B", 0x9, 6, 1, 4, -1, -1, -1 },
    { NULL, "[B", 0xa, 7, 8, 4, -1, -1, -1 },
    { NULL, "[B", 0x9, 9, 1, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 10, 1, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getASiCSDefaultDataFilenameWithByteArray:);
  methods[2].selector = @selector(createSContainerWithByteArray:withByteArray:withNSString:withNSString:);
  methods[3].selector = @selector(getASiCSBinarySignatureWithByteArray:);
  methods[4].selector = @selector(getASiCSXMLSignatureWithByteArray:);
  methods[5].selector = @selector(getASiCSSignatureWithByteArray:withNSString:);
  methods[6].selector = @selector(getASiCSDataWithByteArray:);
  methods[7].selector = @selector(getASiCSDataFilenameWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ASIC_S_MIMETYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "DEFAULT_DATAOBJECT_EXTENSION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "ENTRY_NAME_BINARY_SIGNATURE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "ENTRY_NAME_XML_SIGNATURE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "ENTRY_NAME_MIMETYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "THRESHOLD_FILE_SIZE", "I", .constantValue.asInt = EsGobAfirmaCoreSignersAsicASiCUtil_THRESHOLD_FILE_SIZE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getASiCSDefaultDataFilename", "[B", "createSContainer", "[B[BLNSString;LNSString;", "LJavaIoIOException;", "getASiCSBinarySignature", "getASiCSXMLSignature", "getASiCSSignature", "[BLNSString;", "getASiCSData", "getASiCSDataFilename", &EsGobAfirmaCoreSignersAsicASiCUtil_ASIC_S_MIMETYPE, &EsGobAfirmaCoreSignersAsicASiCUtil_DEFAULT_DATAOBJECT_EXTENSION, &EsGobAfirmaCoreSignersAsicASiCUtil_ENTRY_NAME_BINARY_SIGNATURE, &EsGobAfirmaCoreSignersAsicASiCUtil_ENTRY_NAME_XML_SIGNATURE, &EsGobAfirmaCoreSignersAsicASiCUtil_ENTRY_NAME_MIMETYPE, &EsGobAfirmaCoreSignersAsicASiCUtil_LOGGER };
  static const J2ObjcClassInfo _EsGobAfirmaCoreSignersAsicASiCUtil = { "ASiCUtil", "es.gob.afirma.core.signers.asic", ptrTable, methods, fields, 7, 0x11, 8, 7, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreSignersAsicASiCUtil;
}

+ (void)initialize {
  if (self == [EsGobAfirmaCoreSignersAsicASiCUtil class]) {
    EsGobAfirmaCoreSignersAsicASiCUtil_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 40
    @"es.gob.afirma");
    J2OBJC_SET_INITIALIZED(EsGobAfirmaCoreSignersAsicASiCUtil)
  }
}

@end


#line 44
void EsGobAfirmaCoreSignersAsicASiCUtil_init(EsGobAfirmaCoreSignersAsicASiCUtil *self) {
  NSObject_init(self);
}


#line 44
EsGobAfirmaCoreSignersAsicASiCUtil *new_EsGobAfirmaCoreSignersAsicASiCUtil_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersAsicASiCUtil, init)
}


#line 44
EsGobAfirmaCoreSignersAsicASiCUtil *create_EsGobAfirmaCoreSignersAsicASiCUtil_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersAsicASiCUtil, init)
}


#line 51
NSString *EsGobAfirmaCoreSignersAsicASiCUtil_getASiCSDefaultDataFilenameWithByteArray_(IOSByteArray *data) {
  EsGobAfirmaCoreSignersAsicASiCUtil_initialize();
  
#line 52
  NSString *extension;
  @try {
    extension = [new_EsGobAfirmaCoreMiscMimeHelper_initWithByteArray_(data) getExtension];
  }
  @catch (
#line 55
  JavaIoIOException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreSignersAsicASiCUtil_LOGGER)) warningWithNSString:JreStrcat("$@", @"No se pudieron cargar los datos para su analisis: ", e)];
    extension = nil;
  }
  return JreStrcat("$$", @"dataobject.", (extension != nil && ![extension java_isEmpty] ? extension : EsGobAfirmaCoreSignersAsicASiCUtil_DEFAULT_DATAOBJECT_EXTENSION));
}


#line 70
IOSByteArray *EsGobAfirmaCoreSignersAsicASiCUtil_createSContainerWithByteArray_withByteArray_withNSString_withNSString_(IOSByteArray *signature, IOSByteArray *data, NSString *signatureFilename, NSString *dataFilename) {
  EsGobAfirmaCoreSignersAsicASiCUtil_initialize();
  
#line 75
  if (signature == nil || signature->size_ < 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 77
    @"La firma no puede ser nula ni vacia");
  }
  
#line 81
  if (data == nil || data->size_ < 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 83
    @"Los datos no pueden ser nulos ni vacios");
  }
  
#line 87
  JavaIoByteArrayOutputStream *baos = new_JavaIoByteArrayOutputStream_init();
  {
    JavaUtilZipZipOutputStream *zos = new_JavaUtilZipZipOutputStream_initWithJavaIoOutputStream_(baos);
    JavaLangThrowable *__primaryException1 = nil;
    
#line 88
    @try {
      
#line 91
      [zos setCommentWithNSString:JreStrcat("$$", @"mimetype=", EsGobAfirmaCoreSignersAsicASiCUtil_ASIC_S_MIMETYPE)];
      
#line 94
      JavaUtilZipZipEntry *ze = new_JavaUtilZipZipEntry_initWithNSString_(EsGobAfirmaCoreSignersAsicASiCUtil_ENTRY_NAME_MIMETYPE);
      [zos putNextEntryWithJavaUtilZipZipEntry:ze];
      [zos writeWithByteArray:[((NSString *) nil_chk(EsGobAfirmaCoreSignersAsicASiCUtil_ASIC_S_MIMETYPE)) java_getBytes]];
      
#line 99
      NSString *entryName;
      if (dataFilename != nil) {
        entryName = dataFilename;
      }
      else {
        entryName = EsGobAfirmaCoreSignersAsicASiCUtil_getASiCSDefaultDataFilenameWithByteArray_(data);
      }
      ze = new_JavaUtilZipZipEntry_initWithNSString_(
#line 107
      entryName);
      
#line 109
      [zos putNextEntryWithJavaUtilZipZipEntry:ze];
      [zos writeWithByteArray:data];
      
#line 113
      ze = new_JavaUtilZipZipEntry_initWithNSString_(signatureFilename != nil ? signatureFilename : EsGobAfirmaCoreSignersAsicASiCUtil_ENTRY_NAME_BINARY_SIGNATURE);
      [zos putNextEntryWithJavaUtilZipZipEntry:ze];
      [zos writeWithByteArray:signature];
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (zos != nil) {
        if (__primaryException1 != nil) {
          @try {
            [zos close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [zos close];
        }
      }
    }
  }
  
#line 118
  return [baos toByteArray];
}


#line 125
IOSByteArray *EsGobAfirmaCoreSignersAsicASiCUtil_getASiCSBinarySignatureWithByteArray_(IOSByteArray *asic) {
  EsGobAfirmaCoreSignersAsicASiCUtil_initialize();
  
#line 126
  return EsGobAfirmaCoreSignersAsicASiCUtil_getASiCSSignatureWithByteArray_withNSString_(asic, EsGobAfirmaCoreSignersAsicASiCUtil_ENTRY_NAME_BINARY_SIGNATURE);
}


#line 133
IOSByteArray *EsGobAfirmaCoreSignersAsicASiCUtil_getASiCSXMLSignatureWithByteArray_(IOSByteArray *asic) {
  EsGobAfirmaCoreSignersAsicASiCUtil_initialize();
  
#line 134
  return EsGobAfirmaCoreSignersAsicASiCUtil_getASiCSSignatureWithByteArray_withNSString_(asic, EsGobAfirmaCoreSignersAsicASiCUtil_ENTRY_NAME_XML_SIGNATURE);
}


#line 142
IOSByteArray *EsGobAfirmaCoreSignersAsicASiCUtil_getASiCSSignatureWithByteArray_withNSString_(IOSByteArray *asic, NSString *signatureFilename) {
  EsGobAfirmaCoreSignersAsicASiCUtil_initialize();
  
#line 143
  if (asic == nil || asic->size_ < 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 145
    @"La firma ASiC proporcionada no puede ser nula ni vacia");
  }
  
#line 148
  if (asic->size_ >= EsGobAfirmaCoreSignersAsicASiCUtil_THRESHOLD_FILE_SIZE) {
    @throw new_JavaIoIOException_initWithNSString_(@"El archivo tiene un tamano superior al permitido.");
  }
  if (signatureFilename == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 153
    @"La firma entrada de firma del ASiC no puede ser nula");
  }
  {
    JavaUtilZipZipInputStream *zis = new_JavaUtilZipZipInputStream_initWithJavaIoInputStream_(new_JavaIoByteArrayInputStream_initWithByteArray_(
#line 157
    asic));
    JavaLangThrowable *__primaryException1 = nil;
    
#line 156
    @try {
      
#line 159
      JavaUtilZipZipEntry *entry_;
      while ((entry_ = [zis getNextEntry]) != nil) {
        if ([signatureFilename isEqual:[((JavaUtilZipZipEntry *) nil_chk(entry_)) getName]]) {
          return EsGobAfirmaCoreMiscAOUtil_getDataFromInputStreamWithJavaIoInputStream_(zis);
        }
      }
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (zis != nil) {
        if (__primaryException1 != nil) {
          @try {
            [zis close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [zis close];
        }
      }
    }
  }
  
#line 166
  @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Los datos proporcionados no son una firma ASiC-S conteniendo la entrada ", EsGobAfirmaCoreMiscLoggerUtil_getTrimStrWithNSString_(
#line 167
  signatureFilename)));
}


#line 175
IOSByteArray *EsGobAfirmaCoreSignersAsicASiCUtil_getASiCSDataWithByteArray_(IOSByteArray *asic) {
  EsGobAfirmaCoreSignersAsicASiCUtil_initialize();
  
#line 176
  if (asic == nil || asic->size_ < 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 178
    @"La firma ASiC proporcionada no puede ser nula ni vacia");
  }
  
#line 181
  if (asic->size_ >= EsGobAfirmaCoreSignersAsicASiCUtil_THRESHOLD_FILE_SIZE) {
    @throw new_JavaIoIOException_initWithNSString_(@"El archivo tiene un tamano superior al permitido.");
  }
  {
    JavaUtilZipZipInputStream *zis = new_JavaUtilZipZipInputStream_initWithJavaIoInputStream_(new_JavaIoByteArrayInputStream_initWithByteArray_(asic));
    JavaLangThrowable *__primaryException1 = nil;
    
#line 184
    @try {
      
#line 187
      JavaUtilZipZipEntry *entry_;
      while ((entry_ = [zis getNextEntry]) != nil) {
        if (![((NSString *) nil_chk(EsGobAfirmaCoreSignersAsicASiCUtil_ENTRY_NAME_BINARY_SIGNATURE)) isEqual:[((JavaUtilZipZipEntry *) nil_chk(entry_)) getName]] &&
#line 190
        ![((NSString *) nil_chk(EsGobAfirmaCoreSignersAsicASiCUtil_ENTRY_NAME_XML_SIGNATURE)) isEqual:[entry_ getName]] &&
#line 191
        ![((NSString *) nil_chk(EsGobAfirmaCoreSignersAsicASiCUtil_ENTRY_NAME_MIMETYPE)) isEqual:[entry_ getName]]) {
          
#line 193
          return EsGobAfirmaCoreMiscAOUtil_getDataFromInputStreamWithJavaIoInputStream_(zis);
        }
      }
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (zis != nil) {
        if (__primaryException1 != nil) {
          @try {
            [zis close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [zis close];
        }
      }
    }
  }
  
#line 197
  @throw new_JavaIoIOException_initWithNSString_(@"Los datos proporcionados no son una firma ASiC-S");
}


#line 204
NSString *EsGobAfirmaCoreSignersAsicASiCUtil_getASiCSDataFilenameWithByteArray_(IOSByteArray *asic) {
  EsGobAfirmaCoreSignersAsicASiCUtil_initialize();
  
#line 205
  if (asic == nil || asic->size_ < 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 207
    @"La firma ASiC proporcionada no puede ser nula ni vacia");
  }
  
#line 210
  if (asic->size_ >= EsGobAfirmaCoreSignersAsicASiCUtil_THRESHOLD_FILE_SIZE) {
    @throw new_JavaIoIOException_initWithNSString_(@"El archivo tiene un tamano superior al permitido.");
  }
  JavaUtilZipZipInputStream *zis = new_JavaUtilZipZipInputStream_initWithJavaIoInputStream_(new_JavaIoByteArrayInputStream_initWithByteArray_(asic));
  JavaUtilZipZipEntry *entry_;
  while ((entry_ = [zis getNextEntry]) != nil) {
    if ([((JavaUtilZipZipEntry *) nil_chk(entry_)) getSize] >= EsGobAfirmaCoreSignersAsicASiCUtil_THRESHOLD_FILE_SIZE) {
      @throw new_JavaIoIOException_initWithNSString_(@"El archivo tiene un tamano superior al permitido.");
    }
    NSString *entryName = [entry_ getName];
    if (![((NSString *) nil_chk(EsGobAfirmaCoreSignersAsicASiCUtil_ENTRY_NAME_BINARY_SIGNATURE)) isEqual:entryName] &&
#line 221
    ![((NSString *) nil_chk(EsGobAfirmaCoreSignersAsicASiCUtil_ENTRY_NAME_XML_SIGNATURE)) isEqual:entryName] &&
#line 222
    ![((NSString *) nil_chk(EsGobAfirmaCoreSignersAsicASiCUtil_ENTRY_NAME_MIMETYPE)) isEqual:entryName]) {
      
#line 224
      return entryName;
    }
  }
  @throw new_JavaIoIOException_initWithNSString_(@"Los datos proporcionados no son una firma ASiC-S");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreSignersAsicASiCUtil)
