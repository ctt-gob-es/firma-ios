//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/color/ICC_ProfileStub.java
//

#include "ColorSpace.h"
#include "ICC_Profile.h"
#include "ICC_ProfileStub.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Messages.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/UnsupportedOperationException.h"

#if !__has_feature(objc_arc)
#error "ICC_ProfileStub must be compiled with ARC (-fobjc-arc)"
#endif

@interface HarmonyJavaAwtColorICC_ProfileStub ()

/*!
 @brief Serializable implementation
 @throw ObjectStreamException
 */
- (id)writeReplace;

@end

inline jlong HarmonyJavaAwtColorICC_ProfileStub_get_serialVersionUID(void);
#define HarmonyJavaAwtColorICC_ProfileStub_serialVersionUID 501389760875253507LL
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtColorICC_ProfileStub, serialVersionUID, jlong)

__attribute__((unused)) static id HarmonyJavaAwtColorICC_ProfileStub_writeReplace(HarmonyJavaAwtColorICC_ProfileStub *self);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/color/ICC_ProfileStub.java"


#line 30
@implementation HarmonyJavaAwtColorICC_ProfileStub


#line 35
- (instancetype)initPackagePrivateWithInt:(jint)csSpecifier {
  HarmonyJavaAwtColorICC_ProfileStub_initPackagePrivateWithInt_(self, csSpecifier);
  return self;
}


#line 50
- (void)writeWithNSString:(NSString *)fileName {
  
#line 52
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Stub cannot perform this operation");
}


#line 60
- (id)writeReplace {
  return HarmonyJavaAwtColorICC_ProfileStub_writeReplace(self);
}

- (void)writeWithJavaIoOutputStream:(JavaIoOutputStream *)s {
  
#line 66
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Stub cannot perform this operation");
}


#line 69
- (void)setDataWithInt:(jint)tagSignature
         withByteArray:(IOSByteArray *)tagData {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Stub cannot perform this operation");
}

- (IOSByteArray *)getDataWithInt:(jint)tagSignature {
  
#line 76
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Stub cannot perform this operation");
}


#line 79
- (IOSByteArray *)getData {
  
#line 81
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Stub cannot perform this operation");
}


#line 84
- (void)java_finalize {
}


#line 88
- (jint)getProfileClass {
  
#line 90
  return HarmonyJavaAwtColorICC_Profile_CLASS_COLORSPACECONVERSION;
}


#line 93
- (jint)getPCSType {
  
#line 95
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Stub cannot perform this operation");
}


#line 98
- (jint)getNumComponents {
  
#line 100
  switch (colorspace_) {
    case HarmonyJavaAwtColorColorSpace_CS_sRGB:
    case HarmonyJavaAwtColorColorSpace_CS_CIEXYZ:
    case HarmonyJavaAwtColorColorSpace_CS_LINEAR_RGB:
    case HarmonyJavaAwtColorColorSpace_CS_PYCC:
    return 3;
    case HarmonyJavaAwtColorColorSpace_CS_GRAY:
    return 1;
    default:
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Stub cannot perform this operation");
  }
}


#line 113
- (jint)getMinorVersion {
  
#line 115
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Stub cannot perform this operation");
}


#line 118
- (jint)getMajorVersion {
  
#line 120
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Stub cannot perform this operation");
}


#line 123
- (jint)getColorSpaceType {
  
#line 125
  switch (colorspace_) {
    case HarmonyJavaAwtColorColorSpace_CS_sRGB:
    case HarmonyJavaAwtColorColorSpace_CS_LINEAR_RGB:
    return HarmonyJavaAwtColorColorSpace_TYPE_RGB;
    case HarmonyJavaAwtColorColorSpace_CS_CIEXYZ:
    return HarmonyJavaAwtColorColorSpace_TYPE_XYZ;
    case HarmonyJavaAwtColorColorSpace_CS_PYCC:
    return HarmonyJavaAwtColorColorSpace_TYPE_3CLR;
    case HarmonyJavaAwtColorColorSpace_CS_GRAY:
    return HarmonyJavaAwtColorColorSpace_TYPE_GRAY;
    default:
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Stub cannot perform this operation");
  }
}


#line 140
+ (HarmonyJavaAwtColorICC_Profile *)getInstanceWithNSString:(NSString *)fileName {
  return HarmonyJavaAwtColorICC_ProfileStub_getInstanceWithNSString_(fileName);
}

+ (HarmonyJavaAwtColorICC_Profile *)getInstanceWithJavaIoInputStream:(JavaIoInputStream *)s {
  return HarmonyJavaAwtColorICC_ProfileStub_getInstanceWithJavaIoInputStream_(s);
}

+ (HarmonyJavaAwtColorICC_Profile *)getInstanceWithByteArray:(IOSByteArray *)data {
  return HarmonyJavaAwtColorICC_ProfileStub_getInstanceWithByteArray_(data);
}

+ (HarmonyJavaAwtColorICC_Profile *)getInstanceWithInt:(jint)cspace {
  return HarmonyJavaAwtColorICC_ProfileStub_getInstanceWithInt_(cspace);
}

- (HarmonyJavaAwtColorICC_Profile *)loadProfile {
  switch (colorspace_) {
    case HarmonyJavaAwtColorColorSpace_CS_sRGB:
    return HarmonyJavaAwtColorICC_Profile_getInstanceWithInt_(HarmonyJavaAwtColorColorSpace_CS_sRGB);
    case HarmonyJavaAwtColorColorSpace_CS_GRAY:
    return HarmonyJavaAwtColorICC_Profile_getInstanceWithInt_(HarmonyJavaAwtColorColorSpace_CS_GRAY);
    case HarmonyJavaAwtColorColorSpace_CS_CIEXYZ:
    return HarmonyJavaAwtColorICC_Profile_getInstanceWithInt_(HarmonyJavaAwtColorColorSpace_CS_CIEXYZ);
    case HarmonyJavaAwtColorColorSpace_CS_LINEAR_RGB:
    return HarmonyJavaAwtColorICC_Profile_getInstanceWithInt_(HarmonyJavaAwtColorColorSpace_CS_LINEAR_RGB);
    case HarmonyJavaAwtColorColorSpace_CS_PYCC:
    return HarmonyJavaAwtColorICC_Profile_getInstanceWithInt_(HarmonyJavaAwtColorColorSpace_CS_PYCC);
    default:
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Stub cannot perform this operation");
  }
}

- (void)dealloc {
  JreCheckFinalize(self, [HarmonyJavaAwtColorICC_ProfileStub class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtColorICC_Profile;", 0x9, 10, 2, 3, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtColorICC_Profile;", 0x9, 10, 11, 3, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtColorICC_Profile;", 0x9, 10, 12, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtColorICC_Profile;", 0x9, 10, 0, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtColorICC_Profile;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithInt:);
  methods[1].selector = @selector(writeWithNSString:);
  methods[2].selector = @selector(writeReplace);
  methods[3].selector = @selector(writeWithJavaIoOutputStream:);
  methods[4].selector = @selector(setDataWithInt:withByteArray:);
  methods[5].selector = @selector(getDataWithInt:);
  methods[6].selector = @selector(getData);
  methods[7].selector = @selector(java_finalize);
  methods[8].selector = @selector(getProfileClass);
  methods[9].selector = @selector(getPCSType);
  methods[10].selector = @selector(getNumComponents);
  methods[11].selector = @selector(getMinorVersion);
  methods[12].selector = @selector(getMajorVersion);
  methods[13].selector = @selector(getColorSpaceType);
  methods[14].selector = @selector(getInstanceWithNSString:);
  methods[15].selector = @selector(getInstanceWithJavaIoInputStream:);
  methods[16].selector = @selector(getInstanceWithByteArray:);
  methods[17].selector = @selector(getInstanceWithInt:);
  methods[18].selector = @selector(loadProfile);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = HarmonyJavaAwtColorICC_ProfileStub_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "colorspace_", "I", .constantValue.asLong = 0, 0x80, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "write", "LNSString;", "LJavaIoIOException;", "LJavaIoObjectStreamException;", "LJavaIoOutputStream;", "setData", "I[B", "getData", "finalize", "getInstance", "LJavaIoInputStream;", "[B" };
  static const J2ObjcClassInfo _HarmonyJavaAwtColorICC_ProfileStub = { "ICC_ProfileStub", "harmony.java.awt.color", ptrTable, methods, fields, 7, 0x10, 19, 2, -1, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtColorICC_ProfileStub;
}

@end


#line 35
void HarmonyJavaAwtColorICC_ProfileStub_initPackagePrivateWithInt_(HarmonyJavaAwtColorICC_ProfileStub *self, jint csSpecifier) {
  HarmonyJavaAwtColorICC_Profile_init(self);
  
#line 36
  switch (csSpecifier) {
    case HarmonyJavaAwtColorColorSpace_CS_sRGB:
    case HarmonyJavaAwtColorColorSpace_CS_CIEXYZ:
    case HarmonyJavaAwtColorColorSpace_CS_LINEAR_RGB:
    case HarmonyJavaAwtColorColorSpace_CS_PYCC:
    case HarmonyJavaAwtColorColorSpace_CS_GRAY:
    break;
    default:
    
#line 45
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(ComMessages_getStringWithNSString_(@"awt.15D"));
  }
  self->colorspace_ = csSpecifier;
}


#line 35
HarmonyJavaAwtColorICC_ProfileStub *new_HarmonyJavaAwtColorICC_ProfileStub_initPackagePrivateWithInt_(jint csSpecifier) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtColorICC_ProfileStub, initPackagePrivateWithInt_, csSpecifier)
}


#line 35
HarmonyJavaAwtColorICC_ProfileStub *create_HarmonyJavaAwtColorICC_ProfileStub_initPackagePrivateWithInt_(jint csSpecifier) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtColorICC_ProfileStub, initPackagePrivateWithInt_, csSpecifier)
}


#line 60
id HarmonyJavaAwtColorICC_ProfileStub_writeReplace(HarmonyJavaAwtColorICC_ProfileStub *self) {
  return [self loadProfile];
}


#line 140
HarmonyJavaAwtColorICC_Profile *HarmonyJavaAwtColorICC_ProfileStub_getInstanceWithNSString_(NSString *fileName) {
  HarmonyJavaAwtColorICC_ProfileStub_initialize();
  
#line 141
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Stub cannot perform this operation");
}


#line 144
HarmonyJavaAwtColorICC_Profile *HarmonyJavaAwtColorICC_ProfileStub_getInstanceWithJavaIoInputStream_(JavaIoInputStream *s) {
  HarmonyJavaAwtColorICC_ProfileStub_initialize();
  
#line 145
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Stub cannot perform this operation");
}


#line 148
HarmonyJavaAwtColorICC_Profile *HarmonyJavaAwtColorICC_ProfileStub_getInstanceWithByteArray_(IOSByteArray *data) {
  HarmonyJavaAwtColorICC_ProfileStub_initialize();
  
#line 149
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Stub cannot perform this operation");
}


#line 152
HarmonyJavaAwtColorICC_Profile *HarmonyJavaAwtColorICC_ProfileStub_getInstanceWithInt_(jint cspace) {
  HarmonyJavaAwtColorICC_ProfileStub_initialize();
  
#line 153
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Stub cannot perform this operation");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtColorICC_ProfileStub)
