//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/cert/X509CRLHolder.java
//

#include "ASN1Encodable.h"
#include "ASN1InputStream.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1Primitive.h"
#include "AlgorithmIdentifier.h"
#include "CertException.h"
#include "CertIOException.h"
#include "CertUtils.h"
#include "CertificateList.h"
#include "ContentVerifier.h"
#include "ContentVerifierProvider.h"
#include "DERBitString.h"
#include "DEROutputStream.h"
#include "Extension.h"
#include "Extensions.h"
#include "GeneralName.h"
#include "GeneralNames.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IssuingDistributionPoint.h"
#include "J2ObjC_source.h"
#include "TBSCertList.h"
#include "X500Name.h"
#include "X509CRLEntryHolder.h"
#include "X509CRLHolder.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Enumeration.h"
#include "java/util/List.h"
#include "java/util/Set.h"

#if !__has_feature(objc_arc)
#error "X509CRLHolder must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleCertX509CRLHolder () {
 @public
  OrgSpongycastleAsn1X509CertificateList *x509CRL_;
  jboolean isIndirect_;
  OrgSpongycastleAsn1X509Extensions *extensions_;
  OrgSpongycastleAsn1X509GeneralNames *issuerName_;
}

+ (OrgSpongycastleAsn1X509CertificateList *)parseStreamWithJavaIoInputStream:(JavaIoInputStream *)stream;

+ (jboolean)isIndirectCRLWithOrgSpongycastleAsn1X509Extensions:(OrgSpongycastleAsn1X509Extensions *)extensions;

- (void)init__WithOrgSpongycastleAsn1X509CertificateList:(OrgSpongycastleAsn1X509CertificateList *)x509CRL OBJC_METHOD_FAMILY_NONE;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCertX509CRLHolder, x509CRL_, OrgSpongycastleAsn1X509CertificateList *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCertX509CRLHolder, extensions_, OrgSpongycastleAsn1X509Extensions *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCertX509CRLHolder, issuerName_, OrgSpongycastleAsn1X509GeneralNames *)

inline jlong OrgSpongycastleCertX509CRLHolder_get_serialVersionUID(void);
#define OrgSpongycastleCertX509CRLHolder_serialVersionUID 20170722001LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCertX509CRLHolder, serialVersionUID, jlong)

__attribute__((unused)) static OrgSpongycastleAsn1X509CertificateList *OrgSpongycastleCertX509CRLHolder_parseStreamWithJavaIoInputStream_(JavaIoInputStream *stream);

__attribute__((unused)) static jboolean OrgSpongycastleCertX509CRLHolder_isIndirectCRLWithOrgSpongycastleAsn1X509Extensions_(OrgSpongycastleAsn1X509Extensions *extensions);

__attribute__((unused)) static void OrgSpongycastleCertX509CRLHolder_init__WithOrgSpongycastleAsn1X509CertificateList_(OrgSpongycastleCertX509CRLHolder *self, OrgSpongycastleAsn1X509CertificateList *x509CRL);

__attribute__((unused)) static void OrgSpongycastleCertX509CRLHolder_readObjectWithJavaIoObjectInputStream_(OrgSpongycastleCertX509CRLHolder *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void OrgSpongycastleCertX509CRLHolder_writeObjectWithJavaIoObjectOutputStream_(OrgSpongycastleCertX509CRLHolder *self, JavaIoObjectOutputStream *outArg);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/cert/X509CRLHolder.java"


#line 36
@implementation OrgSpongycastleCertX509CRLHolder


#line 46
+ (OrgSpongycastleAsn1X509CertificateList *)parseStreamWithJavaIoInputStream:(JavaIoInputStream *)stream {
  return OrgSpongycastleCertX509CRLHolder_parseStreamWithJavaIoInputStream_(stream);
}


#line 68
+ (jboolean)isIndirectCRLWithOrgSpongycastleAsn1X509Extensions:(OrgSpongycastleAsn1X509Extensions *)extensions {
  return OrgSpongycastleCertX509CRLHolder_isIndirectCRLWithOrgSpongycastleAsn1X509Extensions_(extensions);
}


#line 86
- (instancetype)initWithByteArray:(IOSByteArray *)crlEncoding {
  OrgSpongycastleCertX509CRLHolder_initWithByteArray_(self, crlEncoding);
  return self;
}


#line 98
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)crlStream {
  OrgSpongycastleCertX509CRLHolder_initWithJavaIoInputStream_(self, crlStream);
  return self;
}


#line 109
- (instancetype)initWithOrgSpongycastleAsn1X509CertificateList:(OrgSpongycastleAsn1X509CertificateList *)x509CRL {
  OrgSpongycastleCertX509CRLHolder_initWithOrgSpongycastleAsn1X509CertificateList_(self, x509CRL);
  return self;
}

- (void)init__WithOrgSpongycastleAsn1X509CertificateList:(OrgSpongycastleAsn1X509CertificateList *)x509CRL {
  OrgSpongycastleCertX509CRLHolder_init__WithOrgSpongycastleAsn1X509CertificateList_(self, x509CRL);
}


#line 128
- (IOSByteArray *)getEncoded {
  
#line 131
  return [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(x509CRL_)) getEncoded];
}


#line 139
- (OrgSpongycastleAsn1X500X500Name *)getIssuer {
  
#line 141
  return OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(x509CRL_)) getIssuer]);
}


#line 144
- (OrgSpongycastleCertX509CRLEntryHolder *)getRevokedCertificateWithJavaMathBigInteger:(JavaMathBigInteger *)serialNumber {
  
#line 146
  OrgSpongycastleAsn1X509GeneralNames *currentCA = issuerName_;
  for (id<JavaUtilEnumeration> en = [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(x509CRL_)) getRevokedCertificateEnumeration]; [((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]; ) {
    
#line 149
    OrgSpongycastleAsn1X509TBSCertList_CRLEntry *entry_ = (OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) cast_chk([en nextElement], [OrgSpongycastleAsn1X509TBSCertList_CRLEntry class]);
    
#line 151
    if ([((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1ASN1Integer *) nil_chk([((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) getUserCertificate])) getValue])) isEqual:serialNumber]) {
      
#line 153
      return new_OrgSpongycastleCertX509CRLEntryHolder_initWithOrgSpongycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgSpongycastleAsn1X509GeneralNames_(entry_, isIndirect_, currentCA);
    }
    
#line 156
    if (isIndirect_ && [entry_ hasExtensions]) {
      
#line 158
      OrgSpongycastleAsn1X509Extension *currentCaName = [((OrgSpongycastleAsn1X509Extensions *) nil_chk([entry_ getExtensions])) getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgSpongycastleAsn1X509Extension, certificateIssuer)];
      
#line 160
      if (currentCaName != nil) {
        
#line 162
        currentCA = OrgSpongycastleAsn1X509GeneralNames_getInstanceWithId_([currentCaName getParsedValue]);
      }
    }
  }
  
#line 167
  return nil;
}


#line 176
- (id<JavaUtilCollection>)getRevokedCertificates {
  
#line 178
  IOSObjectArray *entries = [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(x509CRL_)) getRevokedCertificates];
  id<JavaUtilList> l = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(entries))->size_);
  OrgSpongycastleAsn1X509GeneralNames *currentCA = issuerName_;
  
#line 182
  for (id<JavaUtilEnumeration> en = [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(x509CRL_)) getRevokedCertificateEnumeration]; [((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]; ) {
    
#line 184
    OrgSpongycastleAsn1X509TBSCertList_CRLEntry *entry_ = (OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) cast_chk([en nextElement], [OrgSpongycastleAsn1X509TBSCertList_CRLEntry class]);
    OrgSpongycastleCertX509CRLEntryHolder *crlEntry = new_OrgSpongycastleCertX509CRLEntryHolder_initWithOrgSpongycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgSpongycastleAsn1X509GeneralNames_(entry_, isIndirect_, currentCA);
    
#line 187
    [l addWithId:crlEntry];
    
#line 189
    currentCA = [crlEntry getCertificateIssuer];
  }
  
#line 192
  return l;
}


#line 200
- (jboolean)hasExtensions {
  
#line 202
  return extensions_ != nil;
}


#line 212
- (OrgSpongycastleAsn1X509Extension *)getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid {
  
#line 214
  if (extensions_ != nil) {
    
#line 216
    return [extensions_ getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:oid];
  }
  
#line 219
  return nil;
}


#line 227
- (OrgSpongycastleAsn1X509Extensions *)getExtensions {
  
#line 229
  return extensions_;
}


#line 238
- (id<JavaUtilList>)getExtensionOIDs {
  
#line 240
  return OrgSpongycastleCertCertUtils_getExtensionOIDsWithOrgSpongycastleAsn1X509Extensions_(extensions_);
}


#line 249
- (id<JavaUtilSet>)getCriticalExtensionOIDs {
  
#line 251
  return OrgSpongycastleCertCertUtils_getCriticalExtensionOIDsWithOrgSpongycastleAsn1X509Extensions_(extensions_);
}


#line 260
- (id<JavaUtilSet>)getNonCriticalExtensionOIDs {
  
#line 262
  return OrgSpongycastleCertCertUtils_getNonCriticalExtensionOIDsWithOrgSpongycastleAsn1X509Extensions_(extensions_);
}


#line 270
- (OrgSpongycastleAsn1X509CertificateList *)toASN1Structure {
  
#line 272
  return x509CRL_;
}


#line 282
- (jboolean)isSignatureValidWithOrgSpongycastleOperatorContentVerifierProvider:(id<OrgSpongycastleOperatorContentVerifierProvider>)verifierProvider {
  
#line 285
  OrgSpongycastleAsn1X509TBSCertList *tbsCRL = [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(x509CRL_)) getTBSCertList];
  
#line 287
  if (!OrgSpongycastleCertCertUtils_isAlgIdEqualWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withOrgSpongycastleAsn1X509AlgorithmIdentifier_([((OrgSpongycastleAsn1X509TBSCertList *) nil_chk(tbsCRL)) getSignature], [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(x509CRL_)) getSignatureAlgorithm])) {
    
#line 289
    @throw new_OrgSpongycastleCertCertException_initWithNSString_(@"signature invalid - algorithm identifier mismatch");
  }
  
#line 292
  id<OrgSpongycastleOperatorContentVerifier> verifier;
  
#line 294
  @try {
    
#line 296
    verifier = [((id<OrgSpongycastleOperatorContentVerifierProvider>) nil_chk(verifierProvider)) getWithOrgSpongycastleAsn1X509AlgorithmIdentifier:([tbsCRL getSignature])];
    
#line 298
    JavaIoOutputStream *sOut = [((id<OrgSpongycastleOperatorContentVerifier>) nil_chk(verifier)) getOutputStream];
    OrgSpongycastleAsn1DEROutputStream *dOut = new_OrgSpongycastleAsn1DEROutputStream_initWithJavaIoOutputStream_(sOut);
    
#line 301
    [dOut writeObjectWithOrgSpongycastleAsn1ASN1Encodable:tbsCRL];
    
#line 303
    [((JavaIoOutputStream *) nil_chk(sOut)) close];
  }
  @catch (JavaLangException *e) {
    
#line 307
    @throw new_OrgSpongycastleCertCertException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"unable to process signature: ", [e getMessage]), e);
  }
  
#line 310
  return [((id<OrgSpongycastleOperatorContentVerifier>) nil_chk(verifier)) verifyWithByteArray:[((OrgSpongycastleAsn1DERBitString *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(x509CRL_)) getSignature])) getOctets]];
}


#line 313
- (jboolean)isEqual:(id)o {
  
#line 316
  if (JreObjectEqualsEquals(o, self)) {
    
#line 318
    return true;
  }
  
#line 321
  if (!([o isKindOfClass:[OrgSpongycastleCertX509CRLHolder class]])) {
    
#line 323
    return false;
  }
  
#line 326
  OrgSpongycastleCertX509CRLHolder *other = (OrgSpongycastleCertX509CRLHolder *) cast_chk(o, [OrgSpongycastleCertX509CRLHolder class]);
  
#line 328
  return [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(self->x509CRL_)) isEqual:((OrgSpongycastleCertX509CRLHolder *) nil_chk(other))->x509CRL_];
}


#line 331
- (NSUInteger)hash {
  
#line 333
  return ((jint) [((OrgSpongycastleAsn1X509CertificateList *) nil_chk(self->x509CRL_)) hash]);
}


#line 336
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  OrgSpongycastleCertX509CRLHolder_readObjectWithJavaIoObjectInputStream_(self, inArg);
}


#line 345
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  OrgSpongycastleCertX509CRLHolder_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgSpongycastleAsn1X509CertificateList;", 0xa, 0, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCertX509CRLEntryHolder;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509Extension;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509Extensions;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509CertificateList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, 14, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, 20, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(parseStreamWithJavaIoInputStream:);
  methods[1].selector = @selector(isIndirectCRLWithOrgSpongycastleAsn1X509Extensions:);
  methods[2].selector = @selector(initWithByteArray:);
  methods[3].selector = @selector(initWithJavaIoInputStream:);
  methods[4].selector = @selector(initWithOrgSpongycastleAsn1X509CertificateList:);
  methods[5].selector = @selector(init__WithOrgSpongycastleAsn1X509CertificateList:);
  methods[6].selector = @selector(getEncoded);
  methods[7].selector = @selector(getIssuer);
  methods[8].selector = @selector(getRevokedCertificateWithJavaMathBigInteger:);
  methods[9].selector = @selector(getRevokedCertificates);
  methods[10].selector = @selector(hasExtensions);
  methods[11].selector = @selector(getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:);
  methods[12].selector = @selector(getExtensions);
  methods[13].selector = @selector(getExtensionOIDs);
  methods[14].selector = @selector(getCriticalExtensionOIDs);
  methods[15].selector = @selector(getNonCriticalExtensionOIDs);
  methods[16].selector = @selector(toASN1Structure);
  methods[17].selector = @selector(isSignatureValidWithOrgSpongycastleOperatorContentVerifierProvider:);
  methods[18].selector = @selector(isEqual:);
  methods[19].selector = @selector(hash);
  methods[20].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[21].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgSpongycastleCertX509CRLHolder_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "x509CRL_", "LOrgSpongycastleAsn1X509CertificateList;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "isIndirect_", "Z", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "extensions_", "LOrgSpongycastleAsn1X509Extensions;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "issuerName_", "LOrgSpongycastleAsn1X509GeneralNames;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "parseStream", "LJavaIoInputStream;", "LJavaIoIOException;", "isIndirectCRL", "LOrgSpongycastleAsn1X509Extensions;", "[B", "LOrgSpongycastleAsn1X509CertificateList;", "init", "getRevokedCertificate", "LJavaMathBigInteger;", "getExtension", "LOrgSpongycastleAsn1ASN1ObjectIdentifier;", "isSignatureValid", "LOrgSpongycastleOperatorContentVerifierProvider;", "LOrgSpongycastleCertCertException;", "equals", "LNSObject;", "hashCode", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;" };
  static const J2ObjcClassInfo _OrgSpongycastleCertX509CRLHolder = { "X509CRLHolder", "org.spongycastle.cert", ptrTable, methods, fields, 7, 0x1, 22, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCertX509CRLHolder;
}

@end


#line 46
OrgSpongycastleAsn1X509CertificateList *OrgSpongycastleCertX509CRLHolder_parseStreamWithJavaIoInputStream_(JavaIoInputStream *stream) {
  OrgSpongycastleCertX509CRLHolder_initialize();
  
#line 49
  @try {
    
#line 51
    OrgSpongycastleAsn1ASN1Primitive *obj = [new_OrgSpongycastleAsn1ASN1InputStream_initWithJavaIoInputStream_withBoolean_(stream, true) readObject];
    if (obj == nil) {
      
#line 54
      @throw new_JavaIoIOException_initWithNSString_(@"no content found");
    }
    return OrgSpongycastleAsn1X509CertificateList_getInstanceWithId_(obj);
  }
  @catch (JavaLangClassCastException *e) {
    
#line 60
    @throw new_OrgSpongycastleCertCertIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"malformed data: ", [e getMessage]), e);
  }
  @catch (JavaLangIllegalArgumentException *e) {
    
#line 64
    @throw new_OrgSpongycastleCertCertIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"malformed data: ", [e getMessage]), e);
  }
}


#line 68
jboolean OrgSpongycastleCertX509CRLHolder_isIndirectCRLWithOrgSpongycastleAsn1X509Extensions_(OrgSpongycastleAsn1X509Extensions *extensions) {
  OrgSpongycastleCertX509CRLHolder_initialize();
  if (extensions == nil) {
    
#line 72
    return false;
  }
  
#line 75
  OrgSpongycastleAsn1X509Extension *ext = [extensions getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgSpongycastleAsn1X509Extension, issuingDistributionPoint)];
  
#line 77
  return ext != nil && [((OrgSpongycastleAsn1X509IssuingDistributionPoint *) nil_chk(OrgSpongycastleAsn1X509IssuingDistributionPoint_getInstanceWithId_([ext getParsedValue]))) isIndirectCRL];
}


#line 86
void OrgSpongycastleCertX509CRLHolder_initWithByteArray_(OrgSpongycastleCertX509CRLHolder *self, IOSByteArray *crlEncoding) {
  OrgSpongycastleCertX509CRLHolder_initWithOrgSpongycastleAsn1X509CertificateList_(self, OrgSpongycastleCertX509CRLHolder_parseStreamWithJavaIoInputStream_(new_JavaIoByteArrayInputStream_initWithByteArray_(
#line 89
  crlEncoding)));
}


#line 86
OrgSpongycastleCertX509CRLHolder *new_OrgSpongycastleCertX509CRLHolder_initWithByteArray_(IOSByteArray *crlEncoding) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCertX509CRLHolder, initWithByteArray_, crlEncoding)
}


#line 86
OrgSpongycastleCertX509CRLHolder *create_OrgSpongycastleCertX509CRLHolder_initWithByteArray_(IOSByteArray *crlEncoding) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCertX509CRLHolder, initWithByteArray_, crlEncoding)
}


#line 98
void OrgSpongycastleCertX509CRLHolder_initWithJavaIoInputStream_(OrgSpongycastleCertX509CRLHolder *self, JavaIoInputStream *crlStream) {
  OrgSpongycastleCertX509CRLHolder_initWithOrgSpongycastleAsn1X509CertificateList_(self, OrgSpongycastleCertX509CRLHolder_parseStreamWithJavaIoInputStream_(
#line 101
  crlStream));
}


#line 98
OrgSpongycastleCertX509CRLHolder *new_OrgSpongycastleCertX509CRLHolder_initWithJavaIoInputStream_(JavaIoInputStream *crlStream) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCertX509CRLHolder, initWithJavaIoInputStream_, crlStream)
}


#line 98
OrgSpongycastleCertX509CRLHolder *create_OrgSpongycastleCertX509CRLHolder_initWithJavaIoInputStream_(JavaIoInputStream *crlStream) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCertX509CRLHolder, initWithJavaIoInputStream_, crlStream)
}


#line 109
void OrgSpongycastleCertX509CRLHolder_initWithOrgSpongycastleAsn1X509CertificateList_(OrgSpongycastleCertX509CRLHolder *self, OrgSpongycastleAsn1X509CertificateList *x509CRL) {
  NSObject_init(self);
  OrgSpongycastleCertX509CRLHolder_init__WithOrgSpongycastleAsn1X509CertificateList_(self, x509CRL);
}


#line 109
OrgSpongycastleCertX509CRLHolder *new_OrgSpongycastleCertX509CRLHolder_initWithOrgSpongycastleAsn1X509CertificateList_(OrgSpongycastleAsn1X509CertificateList *x509CRL) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCertX509CRLHolder, initWithOrgSpongycastleAsn1X509CertificateList_, x509CRL)
}


#line 109
OrgSpongycastleCertX509CRLHolder *create_OrgSpongycastleCertX509CRLHolder_initWithOrgSpongycastleAsn1X509CertificateList_(OrgSpongycastleAsn1X509CertificateList *x509CRL) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCertX509CRLHolder, initWithOrgSpongycastleAsn1X509CertificateList_, x509CRL)
}


#line 114
void OrgSpongycastleCertX509CRLHolder_init__WithOrgSpongycastleAsn1X509CertificateList_(OrgSpongycastleCertX509CRLHolder *self, OrgSpongycastleAsn1X509CertificateList *x509CRL) {
  
#line 116
  self->x509CRL_ = x509CRL;
  self->extensions_ = [((OrgSpongycastleAsn1X509TBSCertList *) nil_chk([((OrgSpongycastleAsn1X509CertificateList *) nil_chk(x509CRL)) getTBSCertList])) getExtensions];
  self->isIndirect_ = OrgSpongycastleCertX509CRLHolder_isIndirectCRLWithOrgSpongycastleAsn1X509Extensions_(self->extensions_);
  self->issuerName_ = new_OrgSpongycastleAsn1X509GeneralNames_initWithOrgSpongycastleAsn1X509GeneralName_(new_OrgSpongycastleAsn1X509GeneralName_initWithOrgSpongycastleAsn1X500X500Name_([x509CRL getIssuer]));
}


#line 336
void OrgSpongycastleCertX509CRLHolder_readObjectWithJavaIoObjectInputStream_(OrgSpongycastleCertX509CRLHolder *self, JavaIoObjectInputStream *inArg) {
  
#line 340
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  
#line 342
  OrgSpongycastleCertX509CRLHolder_init__WithOrgSpongycastleAsn1X509CertificateList_(self, OrgSpongycastleAsn1X509CertificateList_getInstanceWithId_([inArg readObject]));
}

void OrgSpongycastleCertX509CRLHolder_writeObjectWithJavaIoObjectOutputStream_(OrgSpongycastleCertX509CRLHolder *self, JavaIoObjectOutputStream *outArg) {
  
#line 349
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  
#line 351
  [outArg writeObjectWithId:[self getEncoded]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCertX509CRLHolder)
