//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfContentParser.java
//

#include "J2ObjC_source.h"
#include "PRTokeniser.h"
#include "PdfArray.h"
#include "PdfContentParser.h"
#include "PdfDictionary.h"
#include "PdfLiteral.h"
#include "PdfName.h"
#include "PdfNumber.h"
#include "PdfObject.h"
#include "PdfString.h"
#include "java/io/IOException.h"
#include "java/util/ArrayList.h"

#if !__has_feature(objc_arc)
#error "PdfContentParser must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfPdfContentParser () {
 @public
  /*!
   @brief Holds value of property tokeniser.
   */
  ComAowagieTextPdfPRTokeniser *tokeniser_;
}

/*!
 @brief Reads a dictionary.The tokeniser must be positioned past the "&lt;&lt;" token.
 @return the dictionary
 @throw IOExceptionon error
 */
- (ComAowagieTextPdfPdfDictionary *)readDictionary;

/*!
 @brief Reads an array.The tokeniser must be positioned past the "[" token.
 @return an array
 @throw IOExceptionon error
 */
- (ComAowagieTextPdfPdfArray *)readArray;

/*!
 @brief Reads the next token skipping over the comments.
 @return <CODE>true</CODE> if a token was read, <CODE>false</CODE> if the end of content was reached
 @throw IOExceptionon error
 */
- (jboolean)nextValidToken;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfContentParser, tokeniser_, ComAowagieTextPdfPRTokeniser *)

__attribute__((unused)) static ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfPdfContentParser_readDictionary(ComAowagieTextPdfPdfContentParser *self);

__attribute__((unused)) static ComAowagieTextPdfPdfArray *ComAowagieTextPdfPdfContentParser_readArray(ComAowagieTextPdfPdfContentParser *self);

__attribute__((unused)) static jboolean ComAowagieTextPdfPdfContentParser_nextValidToken(ComAowagieTextPdfPdfContentParser *self);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfContentParser.java"


#line 58
@implementation ComAowagieTextPdfPdfContentParser


#line 73
- (instancetype)initWithComAowagieTextPdfPRTokeniser:(ComAowagieTextPdfPRTokeniser *)tokeniser {
  ComAowagieTextPdfPdfContentParser_initWithComAowagieTextPdfPRTokeniser_(self, tokeniser);
  return self;
}


#line 86
- (JavaUtilArrayList *)parseWithJavaUtilArrayList:(JavaUtilArrayList *)ls {
  if (ls == nil) {
    ls = new_JavaUtilArrayList_init();
  }
  else {
    
#line 90
    [ls clear];
  }
  ComAowagieTextPdfPdfObject *ob = nil;
  while ((ob = [self readPRObject]) != nil) {
    [ls addWithId:ob];
    if ([((ComAowagieTextPdfPdfObject *) nil_chk(ob)) type] == ComAowagieTextPdfPdfContentParser_COMMAND_TYPE) {
      break;
    }
  }
  return ls;
}


#line 106
- (ComAowagieTextPdfPRTokeniser *)getTokeniser {
  return self->tokeniser_;
}


#line 114
- (void)setTokeniserWithComAowagieTextPdfPRTokeniser:(ComAowagieTextPdfPRTokeniser *)tokeniser {
  self->tokeniser_ = tokeniser;
}


#line 123
- (ComAowagieTextPdfPdfDictionary *)readDictionary {
  return ComAowagieTextPdfPdfContentParser_readDictionary(self);
}


#line 154
- (ComAowagieTextPdfPdfArray *)readArray {
  return ComAowagieTextPdfPdfContentParser_readArray(self);
}


#line 175
- (ComAowagieTextPdfPdfObject *)readPRObject {
  if (!ComAowagieTextPdfPdfContentParser_nextValidToken(self)) {
    return nil;
  }
  jint type = [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokeniser_)) getTokenType];
  {
    
#line 188
    ComAowagieTextPdfPdfString *str;
    
#line 180
    switch (type) {
      case ComAowagieTextPdfPRTokeniser_TK_START_DIC:
      {
        
#line 182
        ComAowagieTextPdfPdfDictionary *dic = ComAowagieTextPdfPdfContentParser_readDictionary(self);
        return dic;
      }
      case ComAowagieTextPdfPRTokeniser_TK_START_ARRAY:
      return ComAowagieTextPdfPdfContentParser_readArray(self);
      case ComAowagieTextPdfPRTokeniser_TK_STRING:
      str = [new_ComAowagieTextPdfPdfString_initWithNSString_withNSString_([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokeniser_)) getStringValue], nil) setHexWritingWithBoolean:[((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokeniser_)) isHexString]];
      return str;
      case ComAowagieTextPdfPRTokeniser_TK_NAME:
      return new_ComAowagieTextPdfPdfName_initWithNSString_withBoolean_([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokeniser_)) getStringValue], false);
      case ComAowagieTextPdfPRTokeniser_TK_NUMBER:
      return new_ComAowagieTextPdfPdfNumber_initWithNSString_([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokeniser_)) getStringValue]);
      case ComAowagieTextPdfPRTokeniser_TK_OTHER:
      return new_ComAowagieTextPdfPdfLiteral_initWithInt_withNSString_(ComAowagieTextPdfPdfContentParser_COMMAND_TYPE, [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokeniser_)) getStringValue]);
      default:
      return new_ComAowagieTextPdfPdfLiteral_initWithInt_withNSString_(-type, [((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokeniser_)) getStringValue]);
    }
  }
}


#line 206
- (jboolean)nextValidToken {
  return ComAowagieTextPdfPdfContentParser_nextValidToken(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPRTokeniser;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 0, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDictionary;", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfArray;", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfObject;", 0x0, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComAowagieTextPdfPRTokeniser:);
  methods[1].selector = @selector(parseWithJavaUtilArrayList:);
  methods[2].selector = @selector(getTokeniser);
  methods[3].selector = @selector(setTokeniserWithComAowagieTextPdfPRTokeniser:);
  methods[4].selector = @selector(readDictionary);
  methods[5].selector = @selector(readArray);
  methods[6].selector = @selector(readPRObject);
  methods[7].selector = @selector(nextValidToken);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COMMAND_TYPE", "I", .constantValue.asInt = ComAowagieTextPdfPdfContentParser_COMMAND_TYPE, 0x18, -1, -1, -1, -1 },
    { "tokeniser_", "LComAowagieTextPdfPRTokeniser;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfPRTokeniser;", "parse", "LJavaUtilArrayList;", "LJavaIoIOException;", "setTokeniser" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfContentParser = { "PdfContentParser", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x1, 8, 2, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfContentParser;
}

@end


#line 73
void ComAowagieTextPdfPdfContentParser_initWithComAowagieTextPdfPRTokeniser_(ComAowagieTextPdfPdfContentParser *self, ComAowagieTextPdfPRTokeniser *tokeniser) {
  NSObject_init(self);
  
#line 74
  self->tokeniser_ = tokeniser;
}


#line 73
ComAowagieTextPdfPdfContentParser *new_ComAowagieTextPdfPdfContentParser_initWithComAowagieTextPdfPRTokeniser_(ComAowagieTextPdfPRTokeniser *tokeniser) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfContentParser, initWithComAowagieTextPdfPRTokeniser_, tokeniser)
}


#line 73
ComAowagieTextPdfPdfContentParser *create_ComAowagieTextPdfPdfContentParser_initWithComAowagieTextPdfPRTokeniser_(ComAowagieTextPdfPRTokeniser *tokeniser) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfContentParser, initWithComAowagieTextPdfPRTokeniser_, tokeniser)
}


#line 123
ComAowagieTextPdfPdfDictionary *ComAowagieTextPdfPdfContentParser_readDictionary(ComAowagieTextPdfPdfContentParser *self) {
  ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_init();
  while (true) {
    if (!ComAowagieTextPdfPdfContentParser_nextValidToken(self)) {
      @throw new_JavaIoIOException_initWithNSString_(@"Unexpected end of file.");
    }
    if ([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokeniser_)) getTokenType] == ComAowagieTextPdfPRTokeniser_TK_END_DIC) {
      break;
    }
    if ([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokeniser_)) getTokenType] != ComAowagieTextPdfPRTokeniser_TK_NAME) {
      @throw new_JavaIoIOException_initWithNSString_(@"Dictionary key is not a name.");
    }
    ComAowagieTextPdfPdfName *name = new_ComAowagieTextPdfPdfName_initWithNSString_withBoolean_([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokeniser_)) getStringValue], false);
    ComAowagieTextPdfPdfObject *obj = [self readPRObject];
    jint type = [((ComAowagieTextPdfPdfObject *) nil_chk(obj)) type];
    if (-type == ComAowagieTextPdfPRTokeniser_TK_END_DIC) {
      @throw new_JavaIoIOException_initWithNSString_(@"Unexpected '>>'");
    }
    if (-type == ComAowagieTextPdfPRTokeniser_TK_END_ARRAY) {
      @throw new_JavaIoIOException_initWithNSString_(@"Unexpected ']'");
    }
    [dic putWithComAowagieTextPdfPdfName:name withComAowagieTextPdfPdfObject:obj];
  }
  return dic;
}


#line 154
ComAowagieTextPdfPdfArray *ComAowagieTextPdfPdfContentParser_readArray(ComAowagieTextPdfPdfContentParser *self) {
  ComAowagieTextPdfPdfArray *array = new_ComAowagieTextPdfPdfArray_init();
  while (true) {
    ComAowagieTextPdfPdfObject *obj = [self readPRObject];
    jint type = [((ComAowagieTextPdfPdfObject *) nil_chk(obj)) type];
    if (-type == ComAowagieTextPdfPRTokeniser_TK_END_ARRAY) {
      break;
    }
    if (-type == ComAowagieTextPdfPRTokeniser_TK_END_DIC) {
      @throw new_JavaIoIOException_initWithNSString_(@"Unexpected '>>'");
    }
    [array addWithComAowagieTextPdfPdfObject:obj];
  }
  return array;
}


#line 206
jboolean ComAowagieTextPdfPdfContentParser_nextValidToken(ComAowagieTextPdfPdfContentParser *self) {
  while ([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokeniser_)) nextToken]) {
    if ([((ComAowagieTextPdfPRTokeniser *) nil_chk(self->tokeniser_)) getTokenType] == ComAowagieTextPdfPRTokeniser_TK_COMMENT) {
      continue;
    }
    return true;
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfContentParser)
