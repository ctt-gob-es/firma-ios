//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/operator/jcajce/JceAsymmetricKeyUnwrapper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JceAsymmetricKeyUnwrapper")
#ifdef RESTRICT_JceAsymmetricKeyUnwrapper
#define INCLUDE_ALL_JceAsymmetricKeyUnwrapper 0
#else
#define INCLUDE_ALL_JceAsymmetricKeyUnwrapper 1
#endif
#undef RESTRICT_JceAsymmetricKeyUnwrapper

#if !defined (OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper_) && (INCLUDE_ALL_JceAsymmetricKeyUnwrapper || defined(INCLUDE_OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper))
#define OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper_

#define RESTRICT_AsymmetricKeyUnwrapper 1
#define INCLUDE_OrgSpongycastleOperatorAsymmetricKeyUnwrapper 1
#include "AsymmetricKeyUnwrapper.h"

@class IOSByteArray;
@class JavaSecurityProvider;
@class OrgSpongycastleAsn1ASN1ObjectIdentifier;
@class OrgSpongycastleAsn1X509AlgorithmIdentifier;
@class OrgSpongycastleOperatorGenericKey;
@protocol JavaSecurityPrivateKey;

@interface OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper : OrgSpongycastleOperatorAsymmetricKeyUnwrapper

#pragma mark Public

- (instancetype)initWithOrgSpongycastleAsn1X509AlgorithmIdentifier:(OrgSpongycastleAsn1X509AlgorithmIdentifier *)algorithmIdentifier
                                        withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privKey;

- (OrgSpongycastleOperatorGenericKey *)generateUnwrappedKeyWithOrgSpongycastleAsn1X509AlgorithmIdentifier:(OrgSpongycastleAsn1X509AlgorithmIdentifier *)encryptedKeyAlgorithm
                                                                                            withByteArray:(IOSByteArray *)encryptedKey;

/*!
 @brief Internally algorithm ids are converted into cipher names using a lookup table.For some providers
  the standard lookup table won't work.
 Use this method to establish a specific mapping from an
  algorithm identifier to a specific algorithm. 
 <p>
      For example: 
 @code

      unwrapper.setAlgorithmMapping(PKCSObjectIdentifiers.rsaEncryption, "RSA"); 
  
@endcode
  </p>
 @param algorithm OID of algorithm in recipient.
 @param algorithmName JCE algorithm name to use.
 @return the current Unwrapper.
 */
- (OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper *)setAlgorithmMappingWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)algorithm
                                                                                                              withNSString:(NSString *)algorithmName;

/*!
 @brief Flag that unwrapping must produce a key that will return a meaningful value from a call to Key.getEncoded().
 This is important if you are using a HSM for unwrapping and using a software based provider for
  with the unwrapped key. Default value: false.
 @param unwrappedKeyMustBeEncodable true if getEncoded() should return key bytes, false if not necessary.
 @return this recipient.
 */
- (OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper *)setMustProduceEncodableUnwrappedKeyWithBoolean:(jboolean)unwrappedKeyMustBeEncodable;

- (OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper *)setProviderWithJavaSecurityProvider:(JavaSecurityProvider *)provider;

- (OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper *)setProviderWithNSString:(NSString *)providerName;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgSpongycastleAsn1X509AlgorithmIdentifier:(OrgSpongycastleAsn1X509AlgorithmIdentifier *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper)

FOUNDATION_EXPORT void OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper_initWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withJavaSecurityPrivateKey_(OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper *self, OrgSpongycastleAsn1X509AlgorithmIdentifier *algorithmIdentifier, id<JavaSecurityPrivateKey> privKey);

FOUNDATION_EXPORT OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper *new_OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper_initWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withJavaSecurityPrivateKey_(OrgSpongycastleAsn1X509AlgorithmIdentifier *algorithmIdentifier, id<JavaSecurityPrivateKey> privKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper *create_OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper_initWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withJavaSecurityPrivateKey_(OrgSpongycastleAsn1X509AlgorithmIdentifier *algorithmIdentifier, id<JavaSecurityPrivateKey> privKey);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper)

#endif

#pragma pop_macro("INCLUDE_ALL_JceAsymmetricKeyUnwrapper")
