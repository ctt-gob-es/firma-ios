//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/Section.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Section")
#ifdef RESTRICT_Section
#define INCLUDE_ALL_Section 0
#else
#define INCLUDE_ALL_Section 1
#endif
#undef RESTRICT_Section

#if !defined (ComAowagieTextSection_) && (INCLUDE_ALL_Section || defined(INCLUDE_ComAowagieTextSection))
#define ComAowagieTextSection_

#define RESTRICT_JavaUtilArrayList 1
#define INCLUDE_JavaUtilArrayList 1
#include "java/util/ArrayList.h"

#define RESTRICT_TextElementArray 1
#define INCLUDE_ComAowagieTextTextElementArray 1
#include "TextElementArray.h"

#define RESTRICT_LargeElement 1
#define INCLUDE_ComAowagieTextLargeElement 1
#include "LargeElement.h"

@class ComAowagieTextParagraph;
@protocol JavaUtilCollection;

/*!
 @brief A <CODE>Section</CODE> is a part of a <CODE>Document</CODE> containing
  other <CODE>Section</CODE>s, <CODE>Paragraph</CODE>s, <CODE>List</CODE>
  and/or <CODE>Table</CODE>s.
 <P>
  Remark: you can not construct a <CODE>Section</CODE> yourself.
  You will have to ask an instance of <CODE>Section</CODE> to the 
 <CODE>Chapter</CODE> or <CODE>Section</CODE> to which you want to
  add the new <CODE>Section</CODE>.
  <P>
  Example: 
 <BLOCKQUOTE>@code

  Paragraph title2 = new Paragraph("This is Chapter 2", FontFactory.getFont(FontFactory.HELVETICA, 18, Font.BOLDITALIC, new Color(0, 0, 255)));
  Chapter chapter2 = new Chapter(title2, 2);
  Paragraph someText = new Paragraph("This is some text");
  chapter2.add(someText);
  Paragraph title21 = new Paragraph("This is Section 1 in Chapter 2", FontFactory.getFont(FontFactory.HELVETICA, 16, Font.BOLD, new Color(255, 0, 0))); 
  <STRONG>Section section1 = chapter2.addSection(title21);</STRONG>
  Paragraph someSectionText = new Paragraph("This is some silly paragraph in a chapter and/or section. It contains some text to test the functionality of Chapters and Section."); 
  <STRONG>section1.add(someSectionText);</STRONG>
  Paragraph title211 = new Paragraph("This is SubSection 1 in Section 1 in Chapter 2", FontFactory.getFont(FontFactory.HELVETICA, 14, Font.BOLD, new Color(255, 0, 0))); 
  <STRONG>Section section11 = section1.addSection(40, title211, 2);</STRONG>
   <STRONG>section11.add(someSectionText);</STRONG>
   
@endcode</BLOCKQUOTE>
 */
@interface ComAowagieTextSection : JavaUtilArrayList < ComAowagieTextTextElementArray, ComAowagieTextLargeElement > {
 @public
  /*!
   @brief The number of sectionnumbers that has to be shown before the section title.
   */
  jint numberDepth_;
  /*!
   @brief The style for sectionnumbers.
   @since iText 2.0.8
   */
  jint numberStyle_;
  /*!
   @brief true if the section has to trigger a new page
   */
  jboolean triggerNewPage_;
  /*!
   @brief This is the complete list of sectionnumbers of this section and the parents of this section.
   */
  JavaUtilArrayList *numbers_;
}

#pragma mark Public

/*!
 @brief Adds a <CODE>Paragraph</CODE>, <CODE>List</CODE> or <CODE>Table</CODE>
  to this <CODE>Section</CODE>.
 @param index index at which the specified element is to be inserted
 @param o an object of type  <CODE> Paragraph </CODE> ,  <CODE> List </CODE>  or  <CODE> Table </CODE>
  =
 @throw ClassCastExceptionif the object is not a <CODE>Paragraph</CODE>, <CODE>List</CODE> or <CODE>Table</CODE>
 */
- (void)addWithInt:(jint)index
            withId:(id)o;

/*!
 @brief Adds a <CODE>Paragraph</CODE>, <CODE>List</CODE>, <CODE>Table</CODE> or another <CODE>Section</CODE>
  to this <CODE>Section</CODE>.
 @param o an object of type  <CODE> Paragraph </CODE> ,  <CODE> List </CODE> ,  <CODE> Table </CODE>  or another  <CODE> Section
  </CODE>
 @return a boolean
 @throw ClassCastExceptionif the object is not a <CODE>Paragraph</CODE>, <CODE>List</CODE>, <CODE>Table</CODE> or <CODE>Section</CODE>
 */
- (jboolean)addWithId:(id)o;

/*!
 @brief Adds a collection of <CODE>Element</CODE>s
  to this <CODE>Section</CODE>.
 @param collection a collection of  <CODE> Paragraph </CODE> s,  <CODE> List </CODE> s and/or  <CODE> Table
  </CODE> s
 @return <CODE>true</CODE> if the action succeeded, <CODE>false</CODE> if not.
 @throw ClassCastExceptionif one of the objects isn't a <CODE>Paragraph</CODE>, <CODE>List</CODE>, <CODE>Table</CODE>
 */
- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection;

/*!
 @brief Creates a <CODE>Section</CODE>, adds it to this <CODE>Section</CODE> and returns it.
 @param title the title of the new section
 @return a new Section object
 */
- (ComAowagieTextSection *)addSectionWithComAowagieTextParagraph:(ComAowagieTextParagraph *)title;

/*!
 @brief Adds a <CODE>Section</CODE> to this <CODE>Section</CODE> and returns it.
 @param title the title of the new section
 @return a new Section object
 */
- (ComAowagieTextSection *)addSectionWithNSString:(NSString *)title;

/*!
 @since iText 2.0.8
 - seealso: com.aowagie.text.LargeElement#flushContent()
 */
- (void)flushContent;

/*!
 @brief Gets the bookmark title.
 @return the bookmark title
 */
- (ComAowagieTextParagraph *)getBookmarkTitle;

/*!
 @brief Gets all the chunks in this element.
 @return an <CODE>ArrayList</CODE>
 */
- (JavaUtilArrayList *)getChunks;

/*!
 @brief Returns the depth of this section.
 @return the depth
 */
- (jint)getDepth;

/*!
 @brief Returns the indentation of the content of this <CODE>Section</CODE>.
 @return the indentation
 */
- (jfloat)getIndentation;

/*!
 @brief Returns the indentation of this <CODE>Section</CODE> on the left side.
 @return the indentation
 */
- (jfloat)getIndentationLeft;

/*!
 @brief Returns the indentation of this <CODE>Section</CODE> on the right side.
 @return the indentation
 */
- (jfloat)getIndentationRight;

/*!
 @brief Returns the numberdepth of this <CODE>Section</CODE>.
 @return the numberdepth
 */
- (jint)getNumberDepth;

/*!
 @brief Gets the style used for numbering sections.
 @since iText 2.0.8
 @return a value corresponding with a numbering style
 */
- (jint)getNumberStyle;

/*!
 @brief Returns the title, preceded by a certain number of sectionnumbers.
 @return a <CODE>Paragraph</CODE>
 */
- (ComAowagieTextParagraph *)getTitle;

/*!
 @brief Getter for property bookmarkOpen.
 @return Value of property bookmarkOpen.
 */
- (jboolean)isBookmarkOpen;

/*!
 @brief Checks if this object is a <CODE>Chapter</CODE>.
 @return <CODE>true</CODE> if it is a <CODE>Chapter</CODE>,
 			<CODE>false</CODE> if it is a <CODE>Section</CODE>.
 */
- (jboolean)isChapter;

/*!
 @since iText 2.0.8
 - seealso: com.aowagie.text.LargeElement#isComplete()
 */
- (jboolean)isComplete;

/*!
 - seealso: com.aowagie.text.Element#isContent()
 @since iText 2.0.8
 */
- (jboolean)isContent;

/*!
 - seealso: com.aowagie.text.Element#isNestable()
 @since iText 2.0.8
 */
- (jboolean)isNestable;

/*!
 @brief Indicates if this is the first time the section is added.
 @since iText2.0.8
 @return true if the section wasn't added yet
 */
- (jboolean)isNotAddedYet;

/*!
 @brief Checks if this object is a <CODE>Section</CODE>.
 @return <CODE>true</CODE> if it is a <CODE>Section</CODE>,
 			<CODE>false</CODE> if it is a <CODE>Chapter</CODE>.
 */
- (jboolean)isSection;

/*!
 @brief Getter for property bookmarkOpen.
 @return Value of property triggerNewPage.
 */
- (jboolean)isTriggerNewPage;

/*!
 @brief Setter for property bookmarkOpen.
 @param bookmarkOpen false if the bookmark children are not  visible.
 */
- (void)setBookmarkOpenWithBoolean:(jboolean)bookmarkOpen;

/*!
 @brief Sets the bookmark title.The bookmark title is the same as the section title but
  can be changed with this method.
 @param bookmarkTitle the bookmark title
 */
- (void)setBookmarkTitleWithNSString:(NSString *)bookmarkTitle;

/*!
 @brief Changes the Chapter number.
 @param number Chapter
 */
- (void)setChapterNumberWithInt:(jint)number;

/*!
 @since iText 2.0.8
 - seealso: com.aowagie.text.LargeElement#setComplete(boolean)
 */
- (void)setCompleteWithBoolean:(jboolean)complete;

/*!
 @brief Sets the indentation of the content of this <CODE>Section</CODE>.
 @param indentation the indentation
 */
- (void)setIndentationWithFloat:(jfloat)indentation;

/*!
 @brief Sets the indentation of this <CODE>Section</CODE> on the left side.
 @param indentation the indentation
 */
- (void)setIndentationLeftWithFloat:(jfloat)indentation;

/*!
 @brief Sets the indentation of this <CODE>Section</CODE> on the right side.
 @param indentation the indentation
 */
- (void)setIndentationRightWithFloat:(jfloat)indentation;

/*!
 @brief Sets the indication if the section was already added to
  the document.
 @since iText2.0.8
 @param notAddedYet No added yet
 */
- (void)setNotAddedYetWithBoolean:(jboolean)notAddedYet;

/*!
 @brief Sets the depth of the sectionnumbers that will be shown preceding the title.
 <P>
  If the numberdepth is 0, the sections will not be numbered. If the numberdepth
  is 1, the section will be numbered with their own number. If the numberdepth is
  higher (for instance x &gt; 1), the numbers of x - 1 parents will be shown.
 @param numberDepth the new numberDepth
 */
- (void)setNumberDepthWithInt:(jint)numberDepth;

/*!
 @brief Sets the style for numbering sections.
 Possible values are NUMBERSTYLE_DOTTED: 1.2.3. (the default)
  or NUMBERSTYLE_DOTTED_WITHOUT_FINAL_DOT: 1.2.3
 @param numberStyle Style
 @since iText 2.0.8
 */
- (void)setNumberStyleWithInt:(jint)numberStyle;

/*!
 @brief Sets the title of this section.
 @param title the new title
 */
- (void)setTitleWithComAowagieTextParagraph:(ComAowagieTextParagraph *)title;

/*!
 @brief Setter for property triggerNewPage.
 @param triggerNewPage true if a new page has to be triggered.
 */
- (void)setTriggerNewPageWithBoolean:(jboolean)triggerNewPage;

/*!
 @brief Gets the type of the text element.
 @return a type
 */
- (jint)type;

#pragma mark Protected

/*!
 @brief Constructs a new <CODE>Section</CODE>.
 */
- (instancetype)init;

/*!
 @brief Constructs a new <CODE>Section</CODE>.
 @param title a  <CODE> Paragraph </CODE>
 @param numberDepth the numberDepth
 */
- (instancetype)initWithComAowagieTextParagraph:(ComAowagieTextParagraph *)title
                                        withInt:(jint)numberDepth;

/*!
 @return Added
 @since iText 2.0.8
 */
- (jboolean)isAddedCompletely;

#pragma mark Package-Private

/*!
 @brief Creates a <CODE>Section</CODE>, add it to this <CODE>Section</CODE> and returns it.
 @param title the title of the new section
 @param numberDepth the numberDepth of the section
 @return a new Section object
 */
- (ComAowagieTextSection *)addSectionWithComAowagieTextParagraph:(ComAowagieTextParagraph *)title
                                                         withInt:(jint)numberDepth;

/*!
 @brief Adds a <CODE>Section</CODE> to this <CODE>Section</CODE> and returns it.
 @param title the title of the new section
 @param numberDepth the numberDepth of the section
 @return a new Section object
 */
- (ComAowagieTextSection *)addSectionWithNSString:(NSString *)title
                                          withInt:(jint)numberDepth;

/*!
 @brief Constructs a Paragraph that will be used as title for a Section or Chapter.
 @param title the title of the section
 @param numbers a list of sectionnumbers
 @param numberDepth how many numbers have to be shown
 @param numberStyle the numbering style
 @return a Paragraph object
 @since iText 2.0.8
 */
+ (ComAowagieTextParagraph *)constructTitleWithComAowagieTextParagraph:(ComAowagieTextParagraph *)title
                                                 withJavaUtilArrayList:(JavaUtilArrayList *)numbers
                                                               withInt:(jint)numberDepth
                                                               withInt:(jint)numberStyle;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextSection)

J2OBJC_FIELD_SETTER(ComAowagieTextSection, numbers_, JavaUtilArrayList *)

FOUNDATION_EXPORT void ComAowagieTextSection_init(ComAowagieTextSection *self);

FOUNDATION_EXPORT ComAowagieTextSection *new_ComAowagieTextSection_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextSection *create_ComAowagieTextSection_init(void);

FOUNDATION_EXPORT void ComAowagieTextSection_initWithComAowagieTextParagraph_withInt_(ComAowagieTextSection *self, ComAowagieTextParagraph *title, jint numberDepth);

FOUNDATION_EXPORT ComAowagieTextSection *new_ComAowagieTextSection_initWithComAowagieTextParagraph_withInt_(ComAowagieTextParagraph *title, jint numberDepth) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextSection *create_ComAowagieTextSection_initWithComAowagieTextParagraph_withInt_(ComAowagieTextParagraph *title, jint numberDepth);

FOUNDATION_EXPORT ComAowagieTextParagraph *ComAowagieTextSection_constructTitleWithComAowagieTextParagraph_withJavaUtilArrayList_withInt_withInt_(ComAowagieTextParagraph *title, JavaUtilArrayList *numbers, jint numberDepth, jint numberStyle);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextSection)

#endif

#pragma pop_macro("INCLUDE_ALL_Section")
