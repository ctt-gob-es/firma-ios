//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/jce/provider/RFC3280CertPathUtilities.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RFC3280CertPathUtilities")
#ifdef RESTRICT_RFC3280CertPathUtilities
#define INCLUDE_ALL_RFC3280CertPathUtilities 0
#else
#define INCLUDE_ALL_RFC3280CertPathUtilities 1
#endif
#undef RESTRICT_RFC3280CertPathUtilities

#if !defined (OrgSpongycastleJceProviderRFC3280CertPathUtilities_) && (INCLUDE_ALL_RFC3280CertPathUtilities || defined(INCLUDE_OrgSpongycastleJceProviderRFC3280CertPathUtilities))
#define OrgSpongycastleJceProviderRFC3280CertPathUtilities_

@class IOSObjectArray;
@class JavaSecurityCertCertPath;
@class JavaSecurityCertX509CRL;
@class JavaSecurityCertX509Certificate;
@class JavaUtilDate;
@class OrgSpongycastleAsn1X500X500Name;
@class OrgSpongycastleAsn1X509DistributionPoint;
@class OrgSpongycastleJcajcePKIXExtendedParameters;
@class OrgSpongycastleJceProviderBCCertStatus;
@class OrgSpongycastleJceProviderPKIXNameConstraintValidator;
@class OrgSpongycastleJceProviderPKIXPolicyNode;
@class OrgSpongycastleJceProviderReasonsMask;
@protocol JavaSecurityPublicKey;
@protocol JavaUtilList;
@protocol JavaUtilSet;
@protocol OrgSpongycastleJcajceUtilJcaJceHelper;

@interface OrgSpongycastleJceProviderRFC3280CertPathUtilities : NSObject

#pragma mark Protected

/*!
 @brief Checks a certificate if it is revoked.
 @param paramsPKIX PKIX parameters.
 @param cert Certificate to check if it is revoked.
 @param validDate The date when the certificate revocation status should be                          checked.
 @param sign The issuer certificate of the certificate  <code> cert </code> .
 @param workingPublicKey The public key of the issuer certificate  <code> sign </code>
  .
 @param certPathCerts The certificates of the certification path.
 @throw AnnotatedExceptionif the certificate is revoked or the status cannot be checked
                             or some error occurs.
 */
+ (void)checkCRLsWithOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX
                             withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                withJavaUtilDate:(JavaUtilDate *)validDate
                             withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)sign
                                       withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)workingPublicKey
                                                withJavaUtilList:(id<JavaUtilList>)certPathCerts
                       withOrgSpongycastleJcajceUtilJcaJceHelper:(id<OrgSpongycastleJcajceUtilJcaJceHelper>)helper;

+ (OrgSpongycastleJceProviderPKIXPolicyNode *)prepareCertBWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                                               withInt:(jint)index
                                                                 withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                          withOrgSpongycastleJceProviderPKIXPolicyNode:(OrgSpongycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                                                               withInt:(jint)policyMapping;

+ (void)prepareNextCertAWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index;

+ (void)prepareNextCertGWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
withOrgSpongycastleJceProviderPKIXNameConstraintValidator:(OrgSpongycastleJceProviderPKIXNameConstraintValidator *)nameConstraintValidator;

+ (jint)prepareNextCertH1WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)explicitPolicy;

+ (jint)prepareNextCertH2WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)policyMapping;

+ (jint)prepareNextCertH3WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)inhibitAnyPolicy;

+ (jint)prepareNextCertI1WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)explicitPolicy;

+ (jint)prepareNextCertI2WithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                              withInt:(jint)index
                                              withInt:(jint)policyMapping;

+ (jint)prepareNextCertJWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
                                             withInt:(jint)inhibitAnyPolicy;

+ (void)prepareNextCertKWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index;

+ (jint)prepareNextCertLWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
                                             withInt:(jint)maxPathLength;

+ (jint)prepareNextCertMWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
                                             withInt:(jint)maxPathLength;

+ (void)prepareNextCertNWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index;

+ (void)prepareNextCertOWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                             withInt:(jint)index
                                     withJavaUtilSet:(id<JavaUtilSet>)criticalExtensions
                                    withJavaUtilList:(id<JavaUtilList>)pathCheckers;

+ (void)processCertAWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
 withOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                         withInt:(jint)index
                       withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)workingPublicKey
                                     withBoolean:(jboolean)verificationAlreadyPerformed
             withOrgSpongycastleAsn1X500X500Name:(OrgSpongycastleAsn1X500X500Name *)workingIssuerName
             withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)sign
       withOrgSpongycastleJcajceUtilJcaJceHelper:(id<OrgSpongycastleJcajceUtilJcaJceHelper>)helper;

+ (void)processCertBCWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                          withInt:(jint)index
withOrgSpongycastleJceProviderPKIXNameConstraintValidator:(OrgSpongycastleJceProviderPKIXNameConstraintValidator *)nameConstraintValidator;

+ (OrgSpongycastleJceProviderPKIXPolicyNode *)processCertDWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                                               withInt:(jint)index
                                                                       withJavaUtilSet:(id<JavaUtilSet>)acceptablePolicies
                                          withOrgSpongycastleJceProviderPKIXPolicyNode:(OrgSpongycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                                                 withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                                                               withInt:(jint)inhibitAnyPolicy;

+ (OrgSpongycastleJceProviderPKIXPolicyNode *)processCertEWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                                               withInt:(jint)index
                                          withOrgSpongycastleJceProviderPKIXPolicyNode:(OrgSpongycastleJceProviderPKIXPolicyNode *)validPolicyTree;

+ (void)processCertFWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                         withInt:(jint)index
    withOrgSpongycastleJceProviderPKIXPolicyNode:(OrgSpongycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                         withInt:(jint)explicitPolicy;

+ (id<JavaUtilSet>)processCRLA1iWithJavaUtilDate:(JavaUtilDate *)currentDate
 withOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX
             withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                     withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl;

+ (IOSObjectArray *)processCRLA1iiWithJavaUtilDate:(JavaUtilDate *)currentDate
   withOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX
               withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                       withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl;

/*!
 @brief If the DP includes cRLIssuer, then verify that the issuer field in the
  complete CRL matches cRLIssuer in the DP and that the complete CRL
  contains an issuing distribution point extension with the indirectCRL
  boolean asserted.Otherwise, verify that the CRL issuer matches the
  certificate issuer.
 @param dp The distribution point.
 @param cert The certificate ot attribute certificate.
 @param crl The CRL for  <code> cert </code>
  .
 @throw AnnotatedExceptionif one of the above conditions does not apply or an error
                             occurs.
 */
+ (void)processCRLB1WithOrgSpongycastleAsn1X509DistributionPoint:(OrgSpongycastleAsn1X509DistributionPoint *)dp
                                                          withId:(id)cert
                                     withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl;

/*!
 @brief If the complete CRL includes an issuing distribution point (IDP) CRL
  extension check the following:
 <p>
  (i) If the distribution point name is present in the IDP CRL extension
  and the distribution field is present in the DP, then verify that one of
  the names in the IDP matches one of the names in the DP.
 If the
  distribution point name is present in the IDP CRL extension and the
  distribution field is omitted from the DP, then verify that one of the
  names in the IDP matches one of the names in the cRLIssuer field of the
  DP. 
 </p>
  <p>
  (ii) If the onlyContainsUserCerts boolean is asserted in the IDP CRL
  extension, verify that the certificate does not include the basic
  constraints extension with the cA boolean asserted. 
 </p>
  <p>
  (iii) If the onlyContainsCACerts boolean is asserted in the IDP CRL
  extension, verify that the certificate includes the basic constraints
  extension with the cA boolean asserted. 
 </p>
  <p>
  (iv) Verify that the onlyContainsAttributeCerts boolean is not asserted. 
 </p>
 @param dp The distribution point.
 @param cert The certificate.
 @param crl The CRL.
 @throw AnnotatedExceptionif one of the conditions is not met or an error occurs.
 */
+ (void)processCRLB2WithOrgSpongycastleAsn1X509DistributionPoint:(OrgSpongycastleAsn1X509DistributionPoint *)dp
                                                          withId:(id)cert
                                     withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl;

/*!
 @brief If use-deltas is set, verify the issuer and scope of the delta CRL.
 @param deltaCRL The delta CRL.
 @param completeCRL The complete CRL.
 @param pkixParams The PKIX paramaters.
 @throw AnnotatedExceptionif an exception occurs.
 */
+ (void)processCRLCWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)deltaCRL
                   withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)completeCRL
withOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)pkixParams;

+ (OrgSpongycastleJceProviderReasonsMask *)processCRLDWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                                     withOrgSpongycastleAsn1X509DistributionPoint:(OrgSpongycastleAsn1X509DistributionPoint *)dp;

/*!
 @brief Obtain and validate the certification path for the complete CRL issuer.
 If a key usage extension is present in the CRL issuer's certificate,
  verify that the cRLSign bit is set.
 @param crl CRL which contains revocation information for the certificate                            
  <code> cert </code> .
 @param cert The attribute certificate or certificate to check if it is                            revoked.
 @param defaultCRLSignCert The issuer certificate of the certificate  <code> cert </code>
  .
 @param defaultCRLSignKey The public key of the issuer certificate                            
  <code> defaultCRLSignCert </code> .
 @param paramsPKIX paramsPKIX PKIX parameters.
 @param certPathCerts The certificates on the certification path.
 @return A <code>Set</code> with all keys of possible CRL issuer
          certificates.
 @throw AnnotatedExceptionif the CRL is not valid or the status cannot be checked or
                             some error occurs.
 */
+ (id<JavaUtilSet>)processCRLFWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                                                   withId:(id)cert
                      withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)defaultCRLSignCert
                                withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)defaultCRLSignKey
          withOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                         withJavaUtilList:(id<JavaUtilList>)certPathCerts
                withOrgSpongycastleJcajceUtilJcaJceHelper:(id<OrgSpongycastleJcajceUtilJcaJceHelper>)helper;

+ (id<JavaSecurityPublicKey>)processCRLGWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                                                    withJavaUtilSet:(id<JavaUtilSet>)keys;

+ (JavaSecurityCertX509CRL *)processCRLHWithJavaUtilSet:(id<JavaUtilSet>)deltacrls
                              withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key;

+ (void)processCRLIWithJavaUtilDate:(JavaUtilDate *)validDate
        withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)deltacrl
                             withId:(id)cert
withOrgSpongycastleJceProviderBCCertStatus:(OrgSpongycastleJceProviderBCCertStatus *)certStatus
withOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)pkixParams;

+ (void)processCRLJWithJavaUtilDate:(JavaUtilDate *)validDate
        withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)completecrl
                             withId:(id)cert
withOrgSpongycastleJceProviderBCCertStatus:(OrgSpongycastleJceProviderBCCertStatus *)certStatus;

+ (jint)wrapupCertAWithInt:(jint)explicitPolicy
withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

+ (jint)wrapupCertBWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                        withInt:(jint)index
                                        withInt:(jint)explicitPolicy;

+ (void)wrapupCertFWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                        withInt:(jint)index
                               withJavaUtilList:(id<JavaUtilList>)pathCheckers
                                withJavaUtilSet:(id<JavaUtilSet>)criticalExtensions;

+ (OrgSpongycastleJceProviderPKIXPolicyNode *)wrapupCertGWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                      withOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                                                      withJavaUtilSet:(id<JavaUtilSet>)userInitialPolicySet
                                                                              withInt:(jint)index
                                                                withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                         withOrgSpongycastleJceProviderPKIXPolicyNode:(OrgSpongycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                                                      withJavaUtilSet:(id<JavaUtilSet>)acceptablePolicies;

#pragma mark Package-Private

- (instancetype)initPackagePrivate;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleJceProviderRFC3280CertPathUtilities)

inline NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_CERTIFICATE_POLICIES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_CERTIFICATE_POLICIES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, CERTIFICATE_POLICIES, NSString *)

inline NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_POLICY_MAPPINGS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_POLICY_MAPPINGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, POLICY_MAPPINGS, NSString *)

inline NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_INHIBIT_ANY_POLICY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_INHIBIT_ANY_POLICY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, INHIBIT_ANY_POLICY, NSString *)

inline NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_ISSUING_DISTRIBUTION_POINT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_ISSUING_DISTRIBUTION_POINT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, ISSUING_DISTRIBUTION_POINT, NSString *)

inline NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_FRESHEST_CRL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_FRESHEST_CRL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, FRESHEST_CRL, NSString *)

inline NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_DELTA_CRL_INDICATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_DELTA_CRL_INDICATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, DELTA_CRL_INDICATOR, NSString *)

inline NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_POLICY_CONSTRAINTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_POLICY_CONSTRAINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, POLICY_CONSTRAINTS, NSString *)

inline NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_BASIC_CONSTRAINTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_BASIC_CONSTRAINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, BASIC_CONSTRAINTS, NSString *)

inline NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_CRL_DISTRIBUTION_POINTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_CRL_DISTRIBUTION_POINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, CRL_DISTRIBUTION_POINTS, NSString *)

inline NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_SUBJECT_ALTERNATIVE_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_SUBJECT_ALTERNATIVE_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, SUBJECT_ALTERNATIVE_NAME, NSString *)

inline NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_NAME_CONSTRAINTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_NAME_CONSTRAINTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, NAME_CONSTRAINTS, NSString *)

inline NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_AUTHORITY_KEY_IDENTIFIER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_AUTHORITY_KEY_IDENTIFIER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, AUTHORITY_KEY_IDENTIFIER, NSString *)

inline NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_KEY_USAGE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_KEY_USAGE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, KEY_USAGE, NSString *)

inline NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_CRL_NUMBER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_CRL_NUMBER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, CRL_NUMBER, NSString *)

inline NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_ANY_POLICY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, ANY_POLICY, NSString *)

inline jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_KEY_CERT_SIGN(void);
#define OrgSpongycastleJceProviderRFC3280CertPathUtilities_KEY_CERT_SIGN 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleJceProviderRFC3280CertPathUtilities, KEY_CERT_SIGN, jint)

inline jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_CRL_SIGN(void);
#define OrgSpongycastleJceProviderRFC3280CertPathUtilities_CRL_SIGN 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleJceProviderRFC3280CertPathUtilities, CRL_SIGN, jint)

inline IOSObjectArray *OrgSpongycastleJceProviderRFC3280CertPathUtilities_get_crlReasons(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *OrgSpongycastleJceProviderRFC3280CertPathUtilities_crlReasons;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderRFC3280CertPathUtilities, crlReasons, IOSObjectArray *)

FOUNDATION_EXPORT void OrgSpongycastleJceProviderRFC3280CertPathUtilities_initPackagePrivate(OrgSpongycastleJceProviderRFC3280CertPathUtilities *self);

FOUNDATION_EXPORT OrgSpongycastleJceProviderRFC3280CertPathUtilities *new_OrgSpongycastleJceProviderRFC3280CertPathUtilities_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleJceProviderRFC3280CertPathUtilities *create_OrgSpongycastleJceProviderRFC3280CertPathUtilities_initPackagePrivate(void);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLB2WithOrgSpongycastleAsn1X509DistributionPoint_withId_withJavaSecurityCertX509CRL_(OrgSpongycastleAsn1X509DistributionPoint *dp, id cert, JavaSecurityCertX509CRL *crl);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLB1WithOrgSpongycastleAsn1X509DistributionPoint_withId_withJavaSecurityCertX509CRL_(OrgSpongycastleAsn1X509DistributionPoint *dp, id cert, JavaSecurityCertX509CRL *crl);

FOUNDATION_EXPORT OrgSpongycastleJceProviderReasonsMask *OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLDWithJavaSecurityCertX509CRL_withOrgSpongycastleAsn1X509DistributionPoint_(JavaSecurityCertX509CRL *crl, OrgSpongycastleAsn1X509DistributionPoint *dp);

FOUNDATION_EXPORT id<JavaUtilSet> OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLFWithJavaSecurityCertX509CRL_withId_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaUtilList_withOrgSpongycastleJcajceUtilJcaJceHelper_(JavaSecurityCertX509CRL *crl, id cert, JavaSecurityCertX509Certificate *defaultCRLSignCert, id<JavaSecurityPublicKey> defaultCRLSignKey, OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX, id<JavaUtilList> certPathCerts, id<OrgSpongycastleJcajceUtilJcaJceHelper> helper);

FOUNDATION_EXPORT id<JavaSecurityPublicKey> OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLGWithJavaSecurityCertX509CRL_withJavaUtilSet_(JavaSecurityCertX509CRL *crl, id<JavaUtilSet> keys);

FOUNDATION_EXPORT JavaSecurityCertX509CRL *OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLHWithJavaUtilSet_withJavaSecurityPublicKey_(id<JavaUtilSet> deltacrls, id<JavaSecurityPublicKey> key);

FOUNDATION_EXPORT id<JavaUtilSet> OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLA1iWithJavaUtilDate_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaSecurityCertX509CRL_(JavaUtilDate *currentDate, OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertX509Certificate *cert, JavaSecurityCertX509CRL *crl);

FOUNDATION_EXPORT IOSObjectArray *OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLA1iiWithJavaUtilDate_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaSecurityCertX509CRL_(JavaUtilDate *currentDate, OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertX509Certificate *cert, JavaSecurityCertX509CRL *crl);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLCWithJavaSecurityCertX509CRL_withJavaSecurityCertX509CRL_withOrgSpongycastleJcajcePKIXExtendedParameters_(JavaSecurityCertX509CRL *deltaCRL, JavaSecurityCertX509CRL *completeCRL, OrgSpongycastleJcajcePKIXExtendedParameters *pkixParams);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLIWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withOrgSpongycastleJceProviderBCCertStatus_withOrgSpongycastleJcajcePKIXExtendedParameters_(JavaUtilDate *validDate, JavaSecurityCertX509CRL *deltacrl, id cert, OrgSpongycastleJceProviderBCCertStatus *certStatus, OrgSpongycastleJcajcePKIXExtendedParameters *pkixParams);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCRLJWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withOrgSpongycastleJceProviderBCCertStatus_(JavaUtilDate *validDate, JavaSecurityCertX509CRL *completecrl, id cert, OrgSpongycastleJceProviderBCCertStatus *certStatus);

FOUNDATION_EXPORT OrgSpongycastleJceProviderPKIXPolicyNode *OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareCertBWithJavaSecurityCertCertPath_withInt_withJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_withInt_(JavaSecurityCertCertPath *certPath, jint index, IOSObjectArray *policyNodes, OrgSpongycastleJceProviderPKIXPolicyNode *validPolicyTree, jint policyMapping);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertAWithJavaSecurityCertCertPath_withInt_(JavaSecurityCertCertPath *certPath, jint index);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertFWithJavaSecurityCertCertPath_withInt_withOrgSpongycastleJceProviderPKIXPolicyNode_withInt_(JavaSecurityCertCertPath *certPath, jint index, OrgSpongycastleJceProviderPKIXPolicyNode *validPolicyTree, jint explicitPolicy);

FOUNDATION_EXPORT OrgSpongycastleJceProviderPKIXPolicyNode *OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertEWithJavaSecurityCertCertPath_withInt_withOrgSpongycastleJceProviderPKIXPolicyNode_(JavaSecurityCertCertPath *certPath, jint index, OrgSpongycastleJceProviderPKIXPolicyNode *validPolicyTree);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertBCWithJavaSecurityCertCertPath_withInt_withOrgSpongycastleJceProviderPKIXNameConstraintValidator_(JavaSecurityCertCertPath *certPath, jint index, OrgSpongycastleJceProviderPKIXNameConstraintValidator *nameConstraintValidator);

FOUNDATION_EXPORT OrgSpongycastleJceProviderPKIXPolicyNode *OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertDWithJavaSecurityCertCertPath_withInt_withJavaUtilSet_withOrgSpongycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withInt_(JavaSecurityCertCertPath *certPath, jint index, id<JavaUtilSet> acceptablePolicies, OrgSpongycastleJceProviderPKIXPolicyNode *validPolicyTree, IOSObjectArray *policyNodes, jint inhibitAnyPolicy);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertAWithJavaSecurityCertCertPath_withOrgSpongycastleJcajcePKIXExtendedParameters_withInt_withJavaSecurityPublicKey_withBoolean_withOrgSpongycastleAsn1X500X500Name_withJavaSecurityCertX509Certificate_withOrgSpongycastleJcajceUtilJcaJceHelper_(JavaSecurityCertCertPath *certPath, OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX, jint index, id<JavaSecurityPublicKey> workingPublicKey, jboolean verificationAlreadyPerformed, OrgSpongycastleAsn1X500X500Name *workingIssuerName, JavaSecurityCertX509Certificate *sign, id<OrgSpongycastleJcajceUtilJcaJceHelper> helper);

FOUNDATION_EXPORT jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertI1WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint explicitPolicy);

FOUNDATION_EXPORT jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertI2WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint policyMapping);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertGWithJavaSecurityCertCertPath_withInt_withOrgSpongycastleJceProviderPKIXNameConstraintValidator_(JavaSecurityCertCertPath *certPath, jint index, OrgSpongycastleJceProviderPKIXNameConstraintValidator *nameConstraintValidator);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderRFC3280CertPathUtilities_checkCRLsWithOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertX509Certificate_withJavaUtilDate_withJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withJavaUtilList_withOrgSpongycastleJcajceUtilJcaJceHelper_(OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertX509Certificate *cert, JavaUtilDate *validDate, JavaSecurityCertX509Certificate *sign, id<JavaSecurityPublicKey> workingPublicKey, id<JavaUtilList> certPathCerts, id<OrgSpongycastleJcajceUtilJcaJceHelper> helper);

FOUNDATION_EXPORT jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertJWithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint inhibitAnyPolicy);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertKWithJavaSecurityCertCertPath_withInt_(JavaSecurityCertCertPath *certPath, jint index);

FOUNDATION_EXPORT jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertLWithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint maxPathLength);

FOUNDATION_EXPORT jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertMWithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint maxPathLength);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertNWithJavaSecurityCertCertPath_withInt_(JavaSecurityCertCertPath *certPath, jint index);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertOWithJavaSecurityCertCertPath_withInt_withJavaUtilSet_withJavaUtilList_(JavaSecurityCertCertPath *certPath, jint index, id<JavaUtilSet> criticalExtensions, id<JavaUtilList> pathCheckers);

FOUNDATION_EXPORT jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH1WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint explicitPolicy);

FOUNDATION_EXPORT jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH2WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint policyMapping);

FOUNDATION_EXPORT jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH3WithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint inhibitAnyPolicy);

FOUNDATION_EXPORT jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_wrapupCertAWithInt_withJavaSecurityCertX509Certificate_(jint explicitPolicy, JavaSecurityCertX509Certificate *cert);

FOUNDATION_EXPORT jint OrgSpongycastleJceProviderRFC3280CertPathUtilities_wrapupCertBWithJavaSecurityCertCertPath_withInt_withInt_(JavaSecurityCertCertPath *certPath, jint index, jint explicitPolicy);

FOUNDATION_EXPORT void OrgSpongycastleJceProviderRFC3280CertPathUtilities_wrapupCertFWithJavaSecurityCertCertPath_withInt_withJavaUtilList_withJavaUtilSet_(JavaSecurityCertCertPath *certPath, jint index, id<JavaUtilList> pathCheckers, id<JavaUtilSet> criticalExtensions);

FOUNDATION_EXPORT OrgSpongycastleJceProviderPKIXPolicyNode *OrgSpongycastleJceProviderRFC3280CertPathUtilities_wrapupCertGWithJavaSecurityCertCertPath_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaUtilSet_withInt_withJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_withJavaUtilSet_(JavaSecurityCertCertPath *certPath, OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX, id<JavaUtilSet> userInitialPolicySet, jint index, IOSObjectArray *policyNodes, OrgSpongycastleJceProviderPKIXPolicyNode *validPolicyTree, id<JavaUtilSet> acceptablePolicies);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleJceProviderRFC3280CertPathUtilities)

#endif

#pragma pop_macro("INCLUDE_ALL_RFC3280CertPathUtilities")
