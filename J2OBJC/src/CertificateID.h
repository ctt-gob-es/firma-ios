//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/cert/ocsp/CertificateID.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CertificateID")
#ifdef RESTRICT_CertificateID
#define INCLUDE_ALL_CertificateID 0
#else
#define INCLUDE_ALL_CertificateID 1
#endif
#undef RESTRICT_CertificateID

#if !defined (OrgSpongycastleCertOcspCertificateID_) && (INCLUDE_ALL_CertificateID || defined(INCLUDE_OrgSpongycastleCertOcspCertificateID))
#define OrgSpongycastleCertOcspCertificateID_

@class IOSByteArray;
@class JavaMathBigInteger;
@class OrgSpongycastleAsn1ASN1ObjectIdentifier;
@class OrgSpongycastleAsn1OcspCertID;
@class OrgSpongycastleAsn1X509AlgorithmIdentifier;
@class OrgSpongycastleCertX509CertificateHolder;
@protocol OrgSpongycastleOperatorDigestCalculator;
@protocol OrgSpongycastleOperatorDigestCalculatorProvider;

@interface OrgSpongycastleCertOcspCertificateID : NSObject

#pragma mark Public

- (instancetype)initWithOrgSpongycastleAsn1OcspCertID:(OrgSpongycastleAsn1OcspCertID *)id_;

/*!
 @brief create from an issuer certificate and the serial number of the
  certificate it signed.
 @param issuerCert issuing certificate
 @param number serial number
 @throw OCSPExceptionif any problems occur creating the id fields.
 */
- (instancetype)initWithOrgSpongycastleOperatorDigestCalculator:(id<OrgSpongycastleOperatorDigestCalculator>)digestCalculator
                   withOrgSpongycastleCertX509CertificateHolder:(OrgSpongycastleCertX509CertificateHolder *)issuerCert
                                         withJavaMathBigInteger:(JavaMathBigInteger *)number;

/*!
 @brief Create a new CertificateID for a new serial number derived from a previous one
  calculated for the same CA certificate.
 @param original the previously calculated CertificateID for the CA.
 @param newSerialNumber the serial number for the new certificate of interest.
 @return a new CertificateID for newSerialNumber
 */
+ (OrgSpongycastleCertOcspCertificateID *)deriveCertificateIDWithOrgSpongycastleCertOcspCertificateID:(OrgSpongycastleCertOcspCertificateID *)original
                                                                               withJavaMathBigInteger:(JavaMathBigInteger *)newSerialNumber;

- (jboolean)isEqual:(id)o;

- (OrgSpongycastleAsn1ASN1ObjectIdentifier *)getHashAlgOID;

- (IOSByteArray *)getIssuerKeyHash;

- (IOSByteArray *)getIssuerNameHash;

/*!
 @brief return the serial number for the certificate associated
  with this request.
 */
- (JavaMathBigInteger *)getSerialNumber;

- (NSUInteger)hash;

- (jboolean)matchesIssuerWithOrgSpongycastleCertX509CertificateHolder:(OrgSpongycastleCertX509CertificateHolder *)issuerCert
                  withOrgSpongycastleOperatorDigestCalculatorProvider:(id<OrgSpongycastleOperatorDigestCalculatorProvider>)digCalcProvider;

- (OrgSpongycastleAsn1OcspCertID *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleCertOcspCertificateID)

inline OrgSpongycastleAsn1X509AlgorithmIdentifier *OrgSpongycastleCertOcspCertificateID_get_HASH_SHA1(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgSpongycastleAsn1X509AlgorithmIdentifier *OrgSpongycastleCertOcspCertificateID_HASH_SHA1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCertOcspCertificateID, HASH_SHA1, OrgSpongycastleAsn1X509AlgorithmIdentifier *)

FOUNDATION_EXPORT void OrgSpongycastleCertOcspCertificateID_initWithOrgSpongycastleAsn1OcspCertID_(OrgSpongycastleCertOcspCertificateID *self, OrgSpongycastleAsn1OcspCertID *id_);

FOUNDATION_EXPORT OrgSpongycastleCertOcspCertificateID *new_OrgSpongycastleCertOcspCertificateID_initWithOrgSpongycastleAsn1OcspCertID_(OrgSpongycastleAsn1OcspCertID *id_) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCertOcspCertificateID *create_OrgSpongycastleCertOcspCertificateID_initWithOrgSpongycastleAsn1OcspCertID_(OrgSpongycastleAsn1OcspCertID *id_);

FOUNDATION_EXPORT void OrgSpongycastleCertOcspCertificateID_initWithOrgSpongycastleOperatorDigestCalculator_withOrgSpongycastleCertX509CertificateHolder_withJavaMathBigInteger_(OrgSpongycastleCertOcspCertificateID *self, id<OrgSpongycastleOperatorDigestCalculator> digestCalculator, OrgSpongycastleCertX509CertificateHolder *issuerCert, JavaMathBigInteger *number);

FOUNDATION_EXPORT OrgSpongycastleCertOcspCertificateID *new_OrgSpongycastleCertOcspCertificateID_initWithOrgSpongycastleOperatorDigestCalculator_withOrgSpongycastleCertX509CertificateHolder_withJavaMathBigInteger_(id<OrgSpongycastleOperatorDigestCalculator> digestCalculator, OrgSpongycastleCertX509CertificateHolder *issuerCert, JavaMathBigInteger *number) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCertOcspCertificateID *create_OrgSpongycastleCertOcspCertificateID_initWithOrgSpongycastleOperatorDigestCalculator_withOrgSpongycastleCertX509CertificateHolder_withJavaMathBigInteger_(id<OrgSpongycastleOperatorDigestCalculator> digestCalculator, OrgSpongycastleCertX509CertificateHolder *issuerCert, JavaMathBigInteger *number);

FOUNDATION_EXPORT OrgSpongycastleCertOcspCertificateID *OrgSpongycastleCertOcspCertificateID_deriveCertificateIDWithOrgSpongycastleCertOcspCertificateID_withJavaMathBigInteger_(OrgSpongycastleCertOcspCertificateID *original, JavaMathBigInteger *newSerialNumber);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCertOcspCertificateID)

#endif

#pragma pop_macro("INCLUDE_ALL_CertificateID")
