//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/OutputStreamEncryption.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OutputStreamEncryption")
#ifdef RESTRICT_OutputStreamEncryption
#define INCLUDE_ALL_OutputStreamEncryption 0
#else
#define INCLUDE_ALL_OutputStreamEncryption 1
#endif
#undef RESTRICT_OutputStreamEncryption

#if !defined (ComAowagieTextPdfOutputStreamEncryption_) && (INCLUDE_ALL_OutputStreamEncryption || defined(INCLUDE_ComAowagieTextPdfOutputStreamEncryption))
#define ComAowagieTextPdfOutputStreamEncryption_

#define RESTRICT_JavaIoOutputStream 1
#define INCLUDE_JavaIoOutputStream 1
#include "java/io/OutputStream.h"

@class IOSByteArray;

@interface ComAowagieTextPdfOutputStreamEncryption : JavaIoOutputStream

#pragma mark Public

/*!
 @brief Closes this output stream and releases any system resources
  associated with this stream.The general contract of <code>close</code>
  is that it closes the output stream.
 A closed stream cannot perform
  output operations and cannot be reopened. 
 <p>
  The <code>close</code> method of <code>OutputStream</code> does nothing.
 @throw IOExceptionif an I/O error occurs.
 */
- (void)close;

/*!
 @brief Flushes this output stream and forces any buffered output bytes
  to be written out.The general contract of <code>flush</code> is
  that calling it is an indication that, if any bytes previously
  written have been buffered by the implementation of the output
  stream, such bytes should immediately be written to their
  intended destination.
 <p>
  The <code>flush</code> method of <code>OutputStream</code> does nothing.
 @throw IOExceptionif an I/O error occurs.
 */
- (void)flush;

/*!
 @brief Writes <code>b.length</code> bytes from the specified byte array
  to this output stream.The general contract for <code>write(b)</code>
  is that it should have exactly the same effect as the call 
 <code>write(b, 0, b.length)</code>.
 @param b the data.
 @throw IOExceptionif an I/O error occurs.
 - seealso: java.io.OutputStream#write(byte[], int, int)
 */
- (void)writeWithByteArray:(IOSByteArray *)b;

/*!
 @brief Writes <code>len</code> bytes from the specified byte array
  starting at offset <code>off</code> to this output stream.
 The general contract for <code>write(b, off, len)</code> is that
  some of the bytes in the array <code>b</code> are written to the
  output stream in order; element <code>b[off]</code> is the first
  byte written and <code>b[off+len-1]</code> is the last byte written
  by this operation. 
 <p>
  The <code>write</code> method of <code>OutputStream</code> calls
  the write method of one argument on each of the bytes to be
  written out. Subclasses are encouraged to override this method and
  provide a more efficient implementation. 
 <p>
  If <code>b</code> is <code>null</code>, a 
 <code>NullPointerException</code> is thrown. 
 <p>
  If <code>off</code> is negative, or <code>len</code> is negative, or 
 <code>off+len</code> is greater than the length of the array 
 <code>b</code>, then an <tt>IndexOutOfBoundsException</tt> is thrown.
 @param b the data.
 @param off the start offset in the data.
 @param len the number of bytes to write.
 @throw IOExceptionif an I/O error occurs. In particular,
              an <code>IOException</code> is thrown if the output
              stream is closed.
 */
- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len;

/*!
 @brief Writes the specified byte to this output stream.The general
  contract for <code>write</code> is that one byte is written
  to the output stream.
 The byte to be written is the eight
  low-order bits of the argument <code>b</code>. The 24
  high-order bits of <code>b</code> are ignored. 
 <p>
  Subclasses of <code>OutputStream</code> must provide an
  implementation for this method.
 @param b the  <code> byte </code> .
 @throw IOExceptionif an I/O error occurs. In particular,
              an <code>IOException</code> may be thrown if the
              output stream has been closed.
 */
- (void)writeWithInt:(jint)b;

#pragma mark Package-Private

/*!
 @brief Creates a new instance of OutputStreamCounter
 @param outArg Out Stream
 @param key Encryption key
 @param off Offset
 @param len Lenght
 @param revision Revision
 */
- (instancetype)initPackagePrivateWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                           withByteArray:(IOSByteArray *)key
                                                 withInt:(jint)off
                                                 withInt:(jint)len
                                                 withInt:(jint)revision;

- (void)finish;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfOutputStreamEncryption)

FOUNDATION_EXPORT void ComAowagieTextPdfOutputStreamEncryption_initPackagePrivateWithJavaIoOutputStream_withByteArray_withInt_withInt_withInt_(ComAowagieTextPdfOutputStreamEncryption *self, JavaIoOutputStream *outArg, IOSByteArray *key, jint off, jint len, jint revision);

FOUNDATION_EXPORT ComAowagieTextPdfOutputStreamEncryption *new_ComAowagieTextPdfOutputStreamEncryption_initPackagePrivateWithJavaIoOutputStream_withByteArray_withInt_withInt_withInt_(JavaIoOutputStream *outArg, IOSByteArray *key, jint off, jint len, jint revision) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfOutputStreamEncryption *create_ComAowagieTextPdfOutputStreamEncryption_initPackagePrivateWithJavaIoOutputStream_withByteArray_withInt_withInt_withInt_(JavaIoOutputStream *outArg, IOSByteArray *key, jint off, jint len, jint revision);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfOutputStreamEncryption)

#endif

#pragma pop_macro("INCLUDE_ALL_OutputStreamEncryption")
