//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/util/Strings.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Strings")
#ifdef RESTRICT_Strings
#define INCLUDE_ALL_Strings 0
#else
#define INCLUDE_ALL_Strings 1
#endif
#undef RESTRICT_Strings

#if !defined (OrgSpongycastleUtilStrings_) && (INCLUDE_ALL_Strings || defined(INCLUDE_OrgSpongycastleUtilStrings))
#define OrgSpongycastleUtilStrings_

@class IOSByteArray;
@class IOSCharArray;
@class IOSObjectArray;
@class JavaIoOutputStream;
@protocol OrgSpongycastleUtilStringList;

/*!
 @brief String utilities.
 */
@interface OrgSpongycastleUtilStrings : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Do a simple conversion of an array of 8 bit characters into a string.
 @param bytes 8 bit characters.
 @return resulting String.
 */
+ (IOSCharArray *)asCharArrayWithByteArray:(IOSByteArray *)bytes;

/*!
 @brief Convert an array of 8 bit characters into a string.
 @param bytes 8 bit characters.
 @return resulting String.
 */
+ (NSString *)fromByteArrayWithByteArray:(IOSByteArray *)bytes;

+ (NSString *)fromUTF8ByteArrayWithByteArray:(IOSByteArray *)bytes;

+ (NSString *)lineSeparator;

+ (id<OrgSpongycastleUtilStringList>)newList OBJC_METHOD_FAMILY_NONE;

+ (IOSObjectArray *)splitWithNSString:(NSString *)input
                             withChar:(jchar)delimiter;

+ (IOSByteArray *)toByteArrayWithCharArray:(IOSCharArray *)chars;

+ (IOSByteArray *)toByteArrayWithNSString:(NSString *)string;

+ (jint)toByteArrayWithNSString:(NSString *)s
                  withByteArray:(IOSByteArray *)buf
                        withInt:(jint)off;

/*!
 @brief A locale independent version of toLowerCase.
 @param string input to be converted
 @return a US ASCII lowercase version
 */
+ (NSString *)toLowerCaseWithNSString:(NSString *)string;

/*!
 @brief A locale independent version of toUpperCase.
 @param string input to be converted
 @return a US Ascii uppercase version
 */
+ (NSString *)toUpperCaseWithNSString:(NSString *)string;

+ (IOSByteArray *)toUTF8ByteArrayWithCharArray:(IOSCharArray *)string;

+ (void)toUTF8ByteArrayWithCharArray:(IOSCharArray *)string
              withJavaIoOutputStream:(JavaIoOutputStream *)sOut;

+ (IOSByteArray *)toUTF8ByteArrayWithNSString:(NSString *)string;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleUtilStrings)

FOUNDATION_EXPORT void OrgSpongycastleUtilStrings_init(OrgSpongycastleUtilStrings *self);

FOUNDATION_EXPORT OrgSpongycastleUtilStrings *new_OrgSpongycastleUtilStrings_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleUtilStrings *create_OrgSpongycastleUtilStrings_init(void);

FOUNDATION_EXPORT NSString *OrgSpongycastleUtilStrings_fromUTF8ByteArrayWithByteArray_(IOSByteArray *bytes);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilStrings_toUTF8ByteArrayWithNSString_(NSString *string);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilStrings_toUTF8ByteArrayWithCharArray_(IOSCharArray *string);

FOUNDATION_EXPORT void OrgSpongycastleUtilStrings_toUTF8ByteArrayWithCharArray_withJavaIoOutputStream_(IOSCharArray *string, JavaIoOutputStream *sOut);

FOUNDATION_EXPORT NSString *OrgSpongycastleUtilStrings_toUpperCaseWithNSString_(NSString *string);

FOUNDATION_EXPORT NSString *OrgSpongycastleUtilStrings_toLowerCaseWithNSString_(NSString *string);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilStrings_toByteArrayWithCharArray_(IOSCharArray *chars);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilStrings_toByteArrayWithNSString_(NSString *string);

FOUNDATION_EXPORT jint OrgSpongycastleUtilStrings_toByteArrayWithNSString_withByteArray_withInt_(NSString *s, IOSByteArray *buf, jint off);

FOUNDATION_EXPORT NSString *OrgSpongycastleUtilStrings_fromByteArrayWithByteArray_(IOSByteArray *bytes);

FOUNDATION_EXPORT IOSCharArray *OrgSpongycastleUtilStrings_asCharArrayWithByteArray_(IOSByteArray *bytes);

FOUNDATION_EXPORT IOSObjectArray *OrgSpongycastleUtilStrings_splitWithNSString_withChar_(NSString *input, jchar delimiter);

FOUNDATION_EXPORT id<OrgSpongycastleUtilStringList> OrgSpongycastleUtilStrings_newList(void);

FOUNDATION_EXPORT NSString *OrgSpongycastleUtilStrings_lineSeparator(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleUtilStrings)

#endif

#pragma pop_macro("INCLUDE_ALL_Strings")
