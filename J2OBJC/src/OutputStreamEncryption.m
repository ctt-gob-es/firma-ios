//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/OutputStreamEncryption.java
//

#include "AESCipher.h"
#include "ARCFOUREncryption.h"
#include "ExceptionConverter.h"
#include "IOSPrimitiveArray.h"
#include "IVGenerator.h"
#include "J2ObjC_source.h"
#include "OutputStreamEncryption.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"

#if !__has_feature(objc_arc)
#error "OutputStreamEncryption must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfOutputStreamEncryption () {
 @public
  JavaIoOutputStream *out_;
  ComAowagieTextPdfCryptoARCFOUREncryption *arcfour_;
  ComAowagieTextPdfCryptoAESCipher *cipher_;
  IOSByteArray *sb_;
  jboolean aes_;
  jboolean finished_;
}

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfOutputStreamEncryption, out_, JavaIoOutputStream *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfOutputStreamEncryption, arcfour_, ComAowagieTextPdfCryptoARCFOUREncryption *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfOutputStreamEncryption, cipher_, ComAowagieTextPdfCryptoAESCipher *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfOutputStreamEncryption, sb_, IOSByteArray *)

inline jint ComAowagieTextPdfOutputStreamEncryption_get_AES_128(void);
#define ComAowagieTextPdfOutputStreamEncryption_AES_128 4
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfOutputStreamEncryption, AES_128, jint)

inline jint ComAowagieTextPdfOutputStreamEncryption_get_AES_256_V3(void);
#define ComAowagieTextPdfOutputStreamEncryption_AES_256_V3 6
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfOutputStreamEncryption, AES_256_V3, jint)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/OutputStreamEncryption.java"


#line 58
@implementation ComAowagieTextPdfOutputStreamEncryption


#line 77
- (instancetype)initPackagePrivateWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                           withByteArray:(IOSByteArray *)key
                                                 withInt:(jint)off
                                                 withInt:(jint)len
                                                 withInt:(jint)revision {
  ComAowagieTextPdfOutputStreamEncryption_initPackagePrivateWithJavaIoOutputStream_withByteArray_withInt_withInt_withInt_(self, outArg, key, off, len, revision);
  return self;
}


#line 109
- (void)close {
  
#line 111
  [self finish];
  [((JavaIoOutputStream *) nil_chk(self->out_)) close];
}


#line 127
- (void)flush {
  
#line 129
  [((JavaIoOutputStream *) nil_chk(self->out_)) flush];
}


#line 142
- (void)writeWithByteArray:(IOSByteArray *)b {
  
#line 144
  [self writeWithByteArray:b withInt:0 withInt:((IOSByteArray *) nil_chk(b))->size_];
}


#line 162
- (void)writeWithInt:(jint)b {
  
#line 164
  *IOSByteArray_GetRef(nil_chk(self->sb_), 0) = (jbyte) b;
  [self writeWithByteArray:self->sb_ withInt:0 withInt:1];
}


#line 196
- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len {
  
#line 198
  if (self->aes_) {
    IOSByteArray *b2 = [((ComAowagieTextPdfCryptoAESCipher *) nil_chk(self->cipher_)) updateWithByteArray:b withInt:off withInt:len];
    if (b2 == nil || b2->size_ == 0) {
      return;
    }
    [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithByteArray:b2 withInt:0 withInt:b2->size_];
  }
  else {
    IOSByteArray *b2 = [IOSByteArray newArrayWithLength:JavaLangMath_minWithInt_withInt_(len, 4192)];
    while (len > 0) {
      jint sz = JavaLangMath_minWithInt_withInt_(len, b2->size_);
      [((ComAowagieTextPdfCryptoARCFOUREncryption *) nil_chk(self->arcfour_)) encryptARCFOURWithByteArray:b withInt:off withInt:sz withByteArray:b2 withInt:0];
      [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithByteArray:b2 withInt:0 withInt:sz];
      len -= sz;
      off += sz;
    }
  }
}


#line 217
- (void)finish {
  if (!self->finished_) {
    self->finished_ = true;
    if (self->aes_) {
      IOSByteArray *b;
      @try {
        b = [((ComAowagieTextPdfCryptoAESCipher *) nil_chk(self->cipher_)) doFinal];
      }
      @catch (
#line 224
      JavaLangException *ex) {
        @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(ex);
      }
      [((JavaIoOutputStream *) nil_chk(self->out_)) writeWithByteArray:b withInt:0 withInt:((IOSByteArray *) nil_chk(b))->size_];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 4, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithJavaIoOutputStream:withByteArray:withInt:withInt:withInt:);
  methods[1].selector = @selector(close);
  methods[2].selector = @selector(flush);
  methods[3].selector = @selector(writeWithByteArray:);
  methods[4].selector = @selector(writeWithInt:);
  methods[5].selector = @selector(writeWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(finish);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "out_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "arcfour_", "LComAowagieTextPdfCryptoARCFOUREncryption;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipher_", "LComAowagieTextPdfCryptoAESCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sb_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "AES_128", "I", .constantValue.asInt = ComAowagieTextPdfOutputStreamEncryption_AES_128, 0x1a, -1, -1, -1, -1 },
    { "AES_256_V3", "I", .constantValue.asInt = ComAowagieTextPdfOutputStreamEncryption_AES_256_V3, 0x1a, -1, -1, -1, -1 },
    { "aes_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "finished_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoOutputStream;[BIII", "LJavaIoIOException;", "write", "[B", "I", "[BII" };
  static const J2ObjcClassInfo _ComAowagieTextPdfOutputStreamEncryption = { "OutputStreamEncryption", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 7, 8, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfOutputStreamEncryption;
}

@end


#line 77
void ComAowagieTextPdfOutputStreamEncryption_initPackagePrivateWithJavaIoOutputStream_withByteArray_withInt_withInt_withInt_(ComAowagieTextPdfOutputStreamEncryption *self, JavaIoOutputStream *outArg, IOSByteArray *key, jint off, jint len, jint revision) {
  JavaIoOutputStream_init(self);
  self->sb_ = [IOSByteArray newArrayWithLength:
#line 63
  1];
  
#line 78
  @try {
    self->out_ = outArg;
    self->aes_ = ((revision == ComAowagieTextPdfOutputStreamEncryption_AES_128) || (revision == ComAowagieTextPdfOutputStreamEncryption_AES_256_V3));
    if (self->aes_) {
      IOSByteArray *iv = ComAowagieTextPdfCryptoIVGenerator_getIV();
      IOSByteArray *nkey = [IOSByteArray newArrayWithLength:len];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, off, nkey, 0, len);
      self->cipher_ = new_ComAowagieTextPdfCryptoAESCipher_initWithBoolean_withByteArray_withByteArray_(true, nkey, iv);
      [self writeWithByteArray:iv];
    }
    else {
      self->arcfour_ = new_ComAowagieTextPdfCryptoARCFOUREncryption_init();
      [self->arcfour_ prepareARCFOURKeyWithByteArray:key withInt:off withInt:len];
    }
  }
  @catch (
#line 92
  JavaLangException *ex) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(ex);
  }
}


#line 77
ComAowagieTextPdfOutputStreamEncryption *new_ComAowagieTextPdfOutputStreamEncryption_initPackagePrivateWithJavaIoOutputStream_withByteArray_withInt_withInt_withInt_(JavaIoOutputStream *outArg, IOSByteArray *key, jint off, jint len, jint revision) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfOutputStreamEncryption, initPackagePrivateWithJavaIoOutputStream_withByteArray_withInt_withInt_withInt_, outArg, key, off, len, revision)
}


#line 77
ComAowagieTextPdfOutputStreamEncryption *create_ComAowagieTextPdfOutputStreamEncryption_initPackagePrivateWithJavaIoOutputStream_withByteArray_withInt_withInt_withInt_(JavaIoOutputStream *outArg, IOSByteArray *key, jint off, jint len, jint revision) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfOutputStreamEncryption, initPackagePrivateWithJavaIoOutputStream_withByteArray_withInt_withInt_withInt_, outArg, key, off, len, revision)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfOutputStreamEncryption)
