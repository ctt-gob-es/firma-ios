//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/jce/provider/BouncyCastleProvider.java
//

#include "ASN1ObjectIdentifier.h"
#include "AlgorithmIdentifier.h"
#include "AlgorithmProvider.h"
#include "AsymmetricKeyInfoConverter.h"
#include "BouncyCastleProvider.h"
#include "BouncyCastleProviderConfiguration.h"
#include "ClassUtil.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "PrivateKeyInfo.h"
#include "ProviderConfiguration.h"
#include "SubjectPublicKeyInfo.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InternalError.h"
#include "java/security/AccessController.h"
#include "java/security/PrivateKey.h"
#include "java/security/PrivilegedAction.h"
#include "java/security/Provider.h"
#include "java/security/PublicKey.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#if !__has_feature(objc_arc)
#error "BouncyCastleProvider must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleJceProviderBouncyCastleProvider ()

- (void)setup;

- (void)loadAlgorithmsWithNSString:(NSString *)packageName
                 withNSStringArray:(IOSObjectArray *)names;

+ (id<OrgSpongycastleJcajceProviderUtilAsymmetricKeyInfoConverter>)getAsymmetricKeyInfoConverterWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)algorithm;

@end

inline NSString *OrgSpongycastleJceProviderBouncyCastleProvider_get_info(void);
inline NSString *OrgSpongycastleJceProviderBouncyCastleProvider_set_info(NSString *value);
static NSString *OrgSpongycastleJceProviderBouncyCastleProvider_info = @"BouncyCastle Security Provider v1.58";
J2OBJC_STATIC_FIELD_OBJ(OrgSpongycastleJceProviderBouncyCastleProvider, info, NSString *)

inline id<JavaUtilMap> OrgSpongycastleJceProviderBouncyCastleProvider_get_keyInfoConverters(void);
static id<JavaUtilMap> OrgSpongycastleJceProviderBouncyCastleProvider_keyInfoConverters;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderBouncyCastleProvider, keyInfoConverters, id<JavaUtilMap>)

inline NSString *OrgSpongycastleJceProviderBouncyCastleProvider_get_SYMMETRIC_PACKAGE(void);
static NSString *OrgSpongycastleJceProviderBouncyCastleProvider_SYMMETRIC_PACKAGE = @"org.spongycastle.jcajce.provider.symmetric.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderBouncyCastleProvider, SYMMETRIC_PACKAGE, NSString *)

inline IOSObjectArray *OrgSpongycastleJceProviderBouncyCastleProvider_get_SYMMETRIC_GENERIC(void);
static IOSObjectArray *OrgSpongycastleJceProviderBouncyCastleProvider_SYMMETRIC_GENERIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderBouncyCastleProvider, SYMMETRIC_GENERIC, IOSObjectArray *)

inline IOSObjectArray *OrgSpongycastleJceProviderBouncyCastleProvider_get_SYMMETRIC_MACS(void);
static IOSObjectArray *OrgSpongycastleJceProviderBouncyCastleProvider_SYMMETRIC_MACS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderBouncyCastleProvider, SYMMETRIC_MACS, IOSObjectArray *)

inline IOSObjectArray *OrgSpongycastleJceProviderBouncyCastleProvider_get_SYMMETRIC_CIPHERS(void);
static IOSObjectArray *OrgSpongycastleJceProviderBouncyCastleProvider_SYMMETRIC_CIPHERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderBouncyCastleProvider, SYMMETRIC_CIPHERS, IOSObjectArray *)

inline NSString *OrgSpongycastleJceProviderBouncyCastleProvider_get_ASYMMETRIC_PACKAGE(void);
static NSString *OrgSpongycastleJceProviderBouncyCastleProvider_ASYMMETRIC_PACKAGE = @"org.spongycastle.jcajce.provider.asymmetric.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderBouncyCastleProvider, ASYMMETRIC_PACKAGE, NSString *)

inline IOSObjectArray *OrgSpongycastleJceProviderBouncyCastleProvider_get_ASYMMETRIC_GENERIC(void);
static IOSObjectArray *OrgSpongycastleJceProviderBouncyCastleProvider_ASYMMETRIC_GENERIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderBouncyCastleProvider, ASYMMETRIC_GENERIC, IOSObjectArray *)

inline IOSObjectArray *OrgSpongycastleJceProviderBouncyCastleProvider_get_ASYMMETRIC_CIPHERS(void);
static IOSObjectArray *OrgSpongycastleJceProviderBouncyCastleProvider_ASYMMETRIC_CIPHERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderBouncyCastleProvider, ASYMMETRIC_CIPHERS, IOSObjectArray *)

inline NSString *OrgSpongycastleJceProviderBouncyCastleProvider_get_DIGEST_PACKAGE(void);
static NSString *OrgSpongycastleJceProviderBouncyCastleProvider_DIGEST_PACKAGE = @"org.spongycastle.jcajce.provider.digest.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderBouncyCastleProvider, DIGEST_PACKAGE, NSString *)

inline IOSObjectArray *OrgSpongycastleJceProviderBouncyCastleProvider_get_DIGESTS(void);
static IOSObjectArray *OrgSpongycastleJceProviderBouncyCastleProvider_DIGESTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderBouncyCastleProvider, DIGESTS, IOSObjectArray *)

inline NSString *OrgSpongycastleJceProviderBouncyCastleProvider_get_KEYSTORE_PACKAGE(void);
static NSString *OrgSpongycastleJceProviderBouncyCastleProvider_KEYSTORE_PACKAGE = @"org.spongycastle.jcajce.provider.keystore.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderBouncyCastleProvider, KEYSTORE_PACKAGE, NSString *)

inline IOSObjectArray *OrgSpongycastleJceProviderBouncyCastleProvider_get_KEYSTORES(void);
static IOSObjectArray *OrgSpongycastleJceProviderBouncyCastleProvider_KEYSTORES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderBouncyCastleProvider, KEYSTORES, IOSObjectArray *)

inline NSString *OrgSpongycastleJceProviderBouncyCastleProvider_get_SECURE_RANDOM_PACKAGE(void);
static NSString *OrgSpongycastleJceProviderBouncyCastleProvider_SECURE_RANDOM_PACKAGE = @"org.spongycastle.jcajce.provider.drbg.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderBouncyCastleProvider, SECURE_RANDOM_PACKAGE, NSString *)

inline IOSObjectArray *OrgSpongycastleJceProviderBouncyCastleProvider_get_SECURE_RANDOMS(void);
static IOSObjectArray *OrgSpongycastleJceProviderBouncyCastleProvider_SECURE_RANDOMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleJceProviderBouncyCastleProvider, SECURE_RANDOMS, IOSObjectArray *)

__attribute__((unused)) static void OrgSpongycastleJceProviderBouncyCastleProvider_setup(OrgSpongycastleJceProviderBouncyCastleProvider *self);

__attribute__((unused)) static void OrgSpongycastleJceProviderBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(OrgSpongycastleJceProviderBouncyCastleProvider *self, NSString *packageName, IOSObjectArray *names);

__attribute__((unused)) static id<OrgSpongycastleJcajceProviderUtilAsymmetricKeyInfoConverter> OrgSpongycastleJceProviderBouncyCastleProvider_getAsymmetricKeyInfoConverterWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(OrgSpongycastleAsn1ASN1ObjectIdentifier *algorithm);

@interface OrgSpongycastleJceProviderBouncyCastleProvider_1 : NSObject < JavaSecurityPrivilegedAction > {
 @public
  OrgSpongycastleJceProviderBouncyCastleProvider *this$0_;
}

- (instancetype)initWithOrgSpongycastleJceProviderBouncyCastleProvider:(OrgSpongycastleJceProviderBouncyCastleProvider *)outer$;

- (id)run;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleJceProviderBouncyCastleProvider_1)

__attribute__((unused)) static void OrgSpongycastleJceProviderBouncyCastleProvider_1_initWithOrgSpongycastleJceProviderBouncyCastleProvider_(OrgSpongycastleJceProviderBouncyCastleProvider_1 *self, OrgSpongycastleJceProviderBouncyCastleProvider *outer$);

__attribute__((unused)) static OrgSpongycastleJceProviderBouncyCastleProvider_1 *new_OrgSpongycastleJceProviderBouncyCastleProvider_1_initWithOrgSpongycastleJceProviderBouncyCastleProvider_(OrgSpongycastleJceProviderBouncyCastleProvider *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleJceProviderBouncyCastleProvider_1 *create_OrgSpongycastleJceProviderBouncyCastleProvider_1_initWithOrgSpongycastleJceProviderBouncyCastleProvider_(OrgSpongycastleJceProviderBouncyCastleProvider *outer$);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/jce/provider/BouncyCastleProvider.java"

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleJceProviderBouncyCastleProvider)

NSString *OrgSpongycastleJceProviderBouncyCastleProvider_PROVIDER_NAME = @"SC";
id<OrgSpongycastleJcajceProviderConfigProviderConfiguration> OrgSpongycastleJceProviderBouncyCastleProvider_CONFIGURATION;


#line 46
@implementation OrgSpongycastleJceProviderBouncyCastleProvider

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 130
- (instancetype)init {
  OrgSpongycastleJceProviderBouncyCastleProvider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 145
- (void)setup {
  OrgSpongycastleJceProviderBouncyCastleProvider_setup(self);
}


#line 206
- (void)loadAlgorithmsWithNSString:(NSString *)packageName
                 withNSStringArray:(IOSObjectArray *)names {
  OrgSpongycastleJceProviderBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(self, packageName, names);
}


#line 227
- (void)setParameterWithNSString:(NSString *)parameterName
                          withId:(id)parameter {
  
#line 230
  @synchronized(OrgSpongycastleJceProviderBouncyCastleProvider_CONFIGURATION) {
    
#line 232
    [((OrgSpongycastleJceProviderBouncyCastleProviderConfiguration *) nil_chk(((OrgSpongycastleJceProviderBouncyCastleProviderConfiguration *) cast_chk(OrgSpongycastleJceProviderBouncyCastleProvider_CONFIGURATION, [OrgSpongycastleJceProviderBouncyCastleProviderConfiguration class])))) setParameterWithNSString:parameterName withId:parameter];
  }
}


#line 236
- (jboolean)hasAlgorithmWithNSString:(NSString *)type
                        withNSString:(NSString *)name {
  
#line 239
  return [self containsKeyWithId:JreStrcat("$C$", type, '.', name)] || [self containsKeyWithId:JreStrcat("$$C$", @"Alg.Alias.", type, '.', name)];
}


#line 242
- (void)addAlgorithmWithNSString:(NSString *)key
                    withNSString:(NSString *)value {
  
#line 245
  if ([self containsKeyWithId:key]) {
    
#line 247
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"duplicate provider key (", key, @") found"));
  }
  
#line 250
  (void) [self putWithId:key withId:value];
}


#line 253
- (void)addAlgorithmWithNSString:(NSString *)type
withOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid
                    withNSString:(NSString *)className_ {
  [self addAlgorithmWithNSString:JreStrcat("$C@", type, '.', oid) withNSString:className_];
  [self addAlgorithmWithNSString:JreStrcat("$$@", type, @".OID.", oid) withNSString:className_];
}

- (void)addKeyInfoConverterWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid
       withOrgSpongycastleJcajceProviderUtilAsymmetricKeyInfoConverter:(id<OrgSpongycastleJcajceProviderUtilAsymmetricKeyInfoConverter>)keyInfoConverter {
  
#line 263
  @synchronized(OrgSpongycastleJceProviderBouncyCastleProvider_keyInfoConverters) {
    
#line 265
    (void) [((id<JavaUtilMap>) nil_chk(OrgSpongycastleJceProviderBouncyCastleProvider_keyInfoConverters)) putWithId:oid withId:keyInfoConverter];
  }
}


#line 269
- (void)addAttributesWithNSString:(NSString *)key
                  withJavaUtilMap:(id<JavaUtilMap>)attributeMap {
  
#line 272
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(attributeMap)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 274
    NSString *attributeName = (NSString *) cast_chk([it next], [NSString class]);
    NSString *attributeKey = JreStrcat("$C$", key, ' ', attributeName);
    if ([self containsKeyWithId:attributeKey]) {
      
#line 278
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"duplicate provider attribute key (", attributeKey, @") found"));
    }
    
#line 281
    (void) [self putWithId:attributeKey withId:[attributeMap getWithId:attributeName]];
  }
}


#line 285
+ (id<OrgSpongycastleJcajceProviderUtilAsymmetricKeyInfoConverter>)getAsymmetricKeyInfoConverterWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)algorithm {
  return OrgSpongycastleJceProviderBouncyCastleProvider_getAsymmetricKeyInfoConverterWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(algorithm);
}


#line 293
+ (id<JavaSecurityPublicKey>)getPublicKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo:(OrgSpongycastleAsn1X509SubjectPublicKeyInfo *)publicKeyInfo {
  return OrgSpongycastleJceProviderBouncyCastleProvider_getPublicKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(publicKeyInfo);
}


#line 306
+ (id<JavaSecurityPrivateKey>)getPrivateKeyWithOrgSpongycastleAsn1PkcsPrivateKeyInfo:(OrgSpongycastleAsn1PkcsPrivateKeyInfo *)privateKeyInfo {
  return OrgSpongycastleJceProviderBouncyCastleProvider_getPrivateKeyWithOrgSpongycastleAsn1PkcsPrivateKeyInfo_(privateKeyInfo);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "LOrgSpongycastleJcajceProviderUtilAsymmetricKeyInfoConverter;", 0xa, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x9, 15, 16, 17, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x9, 18, 19, 17, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setup);
  methods[2].selector = @selector(loadAlgorithmsWithNSString:withNSStringArray:);
  methods[3].selector = @selector(setParameterWithNSString:withId:);
  methods[4].selector = @selector(hasAlgorithmWithNSString:withNSString:);
  methods[5].selector = @selector(addAlgorithmWithNSString:withNSString:);
  methods[6].selector = @selector(addAlgorithmWithNSString:withOrgSpongycastleAsn1ASN1ObjectIdentifier:withNSString:);
  methods[7].selector = @selector(addKeyInfoConverterWithOrgSpongycastleAsn1ASN1ObjectIdentifier:withOrgSpongycastleJcajceProviderUtilAsymmetricKeyInfoConverter:);
  methods[8].selector = @selector(addAttributesWithNSString:withJavaUtilMap:);
  methods[9].selector = @selector(getAsymmetricKeyInfoConverterWithOrgSpongycastleAsn1ASN1ObjectIdentifier:);
  methods[10].selector = @selector(getPublicKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo:);
  methods[11].selector = @selector(getPrivateKeyWithOrgSpongycastleAsn1PkcsPrivateKeyInfo:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "info", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 20, -1, -1 },
    { "PROVIDER_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "CONFIGURATION", "LOrgSpongycastleJcajceProviderConfigProviderConfiguration;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "keyInfoConverters", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "SYMMETRIC_PACKAGE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "SYMMETRIC_GENERIC", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "SYMMETRIC_MACS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "SYMMETRIC_CIPHERS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "ASYMMETRIC_PACKAGE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "ASYMMETRIC_GENERIC", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "ASYMMETRIC_CIPHERS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "DIGEST_PACKAGE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "DIGESTS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "KEYSTORE_PACKAGE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "KEYSTORES", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "SECURE_RANDOM_PACKAGE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "SECURE_RANDOMS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAlgorithms", "LNSString;[LNSString;", "setParameter", "LNSString;LNSObject;", "hasAlgorithm", "LNSString;LNSString;", "addAlgorithm", "LNSString;LOrgSpongycastleAsn1ASN1ObjectIdentifier;LNSString;", "addKeyInfoConverter", "LOrgSpongycastleAsn1ASN1ObjectIdentifier;LOrgSpongycastleJcajceProviderUtilAsymmetricKeyInfoConverter;", "addAttributes", "LNSString;LJavaUtilMap;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "getAsymmetricKeyInfoConverter", "LOrgSpongycastleAsn1ASN1ObjectIdentifier;", "getPublicKey", "LOrgSpongycastleAsn1X509SubjectPublicKeyInfo;", "LJavaIoIOException;", "getPrivateKey", "LOrgSpongycastleAsn1PkcsPrivateKeyInfo;", &OrgSpongycastleJceProviderBouncyCastleProvider_info, &OrgSpongycastleJceProviderBouncyCastleProvider_PROVIDER_NAME, &OrgSpongycastleJceProviderBouncyCastleProvider_CONFIGURATION, &OrgSpongycastleJceProviderBouncyCastleProvider_keyInfoConverters, &OrgSpongycastleJceProviderBouncyCastleProvider_SYMMETRIC_PACKAGE, &OrgSpongycastleJceProviderBouncyCastleProvider_SYMMETRIC_GENERIC, &OrgSpongycastleJceProviderBouncyCastleProvider_SYMMETRIC_MACS, &OrgSpongycastleJceProviderBouncyCastleProvider_SYMMETRIC_CIPHERS, &OrgSpongycastleJceProviderBouncyCastleProvider_ASYMMETRIC_PACKAGE, &OrgSpongycastleJceProviderBouncyCastleProvider_ASYMMETRIC_GENERIC, &OrgSpongycastleJceProviderBouncyCastleProvider_ASYMMETRIC_CIPHERS, &OrgSpongycastleJceProviderBouncyCastleProvider_DIGEST_PACKAGE, &OrgSpongycastleJceProviderBouncyCastleProvider_DIGESTS, &OrgSpongycastleJceProviderBouncyCastleProvider_KEYSTORE_PACKAGE, &OrgSpongycastleJceProviderBouncyCastleProvider_KEYSTORES, &OrgSpongycastleJceProviderBouncyCastleProvider_SECURE_RANDOM_PACKAGE, &OrgSpongycastleJceProviderBouncyCastleProvider_SECURE_RANDOMS };
  static const J2ObjcClassInfo _OrgSpongycastleJceProviderBouncyCastleProvider = { "BouncyCastleProvider", "org.spongycastle.jce.provider", ptrTable, methods, fields, 7, 0x11, 12, 17, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleJceProviderBouncyCastleProvider;
}

+ (void)initialize {
  if (self == [OrgSpongycastleJceProviderBouncyCastleProvider class]) {
    OrgSpongycastleJceProviderBouncyCastleProvider_CONFIGURATION = new_OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_initPackagePrivate();
    OrgSpongycastleJceProviderBouncyCastleProvider_keyInfoConverters = new_JavaUtilHashMap_init();
    OrgSpongycastleJceProviderBouncyCastleProvider_SYMMETRIC_GENERIC = [IOSObjectArray newArrayWithObjects:(id[]){
#line 64
      @"PBEPBKDF1", @"PBEPBKDF2", @"PBEPKCS12", @"TLSKDF" } count:4 type:NSString_class_()];
      OrgSpongycastleJceProviderBouncyCastleProvider_SYMMETRIC_MACS = [IOSObjectArray newArrayWithObjects:(id[]){
#line 69
        @"SipHash", @"Poly1305" } count:2 type:NSString_class_()];
        OrgSpongycastleJceProviderBouncyCastleProvider_SYMMETRIC_CIPHERS = [IOSObjectArray newArrayWithObjects:(id[]){
#line 74
          @"AES", @"ARC4", @"ARIA", @"Blowfish", @"Camellia", @"CAST5", @"CAST6", @"ChaCha", @"DES", @"DESede",
#line 75
          @"GOST28147", @"Grainv1", @"Grain128", @"HC128", @"HC256", @"IDEA", @"Noekeon", @"RC2", @"RC5",
#line 76
          @"RC6", @"Rijndael", @"Salsa20", @"SEED", @"Serpent", @"Shacal2", @"Skipjack", @"SM4", @"TEA", @"Twofish", @"Threefish",
#line 77
          @"VMPC", @"VMPCKSA3", @"XTEA", @"XSalsa20", @"OpenSSLPBKDF", @"DSTU7624" } count:36 type:NSString_class_()];
          OrgSpongycastleJceProviderBouncyCastleProvider_ASYMMETRIC_GENERIC = [IOSObjectArray newArrayWithObjects:(id[]){
#line 89
            @"X509", @"IES" } count:2 type:NSString_class_()];
            OrgSpongycastleJceProviderBouncyCastleProvider_ASYMMETRIC_CIPHERS = [IOSObjectArray newArrayWithObjects:(id[]){
#line 94
              @"DSA", @"DH", @"EC", @"RSA", @"GOST", @"ECGOST", @"ElGamal", @"DSTU4145", @"GM" } count:9 type:NSString_class_()];
              OrgSpongycastleJceProviderBouncyCastleProvider_DIGESTS = [IOSObjectArray newArrayWithObjects:(id[]){
#line 103
                @"GOST3411", @"Keccak", @"MD2", @"MD4", @"MD5", @"SHA1", @"RIPEMD128", @"RIPEMD160", @"RIPEMD256", @"RIPEMD320", @"SHA224",
#line 104
                @"SHA256", @"SHA384", @"SHA512", @"SHA3", @"Skein", @"SM3", @"Tiger", @"Whirlpool", @"Blake2b", @"DSTU7564" } count:21 type:NSString_class_()];
                OrgSpongycastleJceProviderBouncyCastleProvider_KEYSTORES = [IOSObjectArray newArrayWithObjects:(id[]){
#line 113
                  @"BC", @"BCFKS", @"PKCS12" } count:3 type:NSString_class_()];
                  OrgSpongycastleJceProviderBouncyCastleProvider_SECURE_RANDOMS = [IOSObjectArray newArrayWithObjects:(id[]){
#line 122
                    @"DRBG" } count:1 type:NSString_class_()];
                    J2OBJC_SET_INITIALIZED(OrgSpongycastleJceProviderBouncyCastleProvider)
                  }
                }

@end


#line 130
void OrgSpongycastleJceProviderBouncyCastleProvider_init(OrgSpongycastleJceProviderBouncyCastleProvider *self) {
  JavaSecurityProvider_initWithNSString_withDouble_withNSString_(self, OrgSpongycastleJceProviderBouncyCastleProvider_PROVIDER_NAME,
#line 132
  1.58, OrgSpongycastleJceProviderBouncyCastleProvider_info);
  
#line 134
  (void) JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedAction_(new_OrgSpongycastleJceProviderBouncyCastleProvider_1_initWithOrgSpongycastleJceProviderBouncyCastleProvider_(self));
}


#line 130
OrgSpongycastleJceProviderBouncyCastleProvider *new_OrgSpongycastleJceProviderBouncyCastleProvider_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleJceProviderBouncyCastleProvider, init)
}


#line 130
OrgSpongycastleJceProviderBouncyCastleProvider *create_OrgSpongycastleJceProviderBouncyCastleProvider_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJceProviderBouncyCastleProvider, init)
}


#line 145
void OrgSpongycastleJceProviderBouncyCastleProvider_setup(OrgSpongycastleJceProviderBouncyCastleProvider *self) {
  
#line 147
  OrgSpongycastleJceProviderBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(self, OrgSpongycastleJceProviderBouncyCastleProvider_DIGEST_PACKAGE, OrgSpongycastleJceProviderBouncyCastleProvider_DIGESTS);
  
#line 149
  OrgSpongycastleJceProviderBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(self, OrgSpongycastleJceProviderBouncyCastleProvider_SYMMETRIC_PACKAGE, OrgSpongycastleJceProviderBouncyCastleProvider_SYMMETRIC_GENERIC);
  
#line 151
  OrgSpongycastleJceProviderBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(self, OrgSpongycastleJceProviderBouncyCastleProvider_SYMMETRIC_PACKAGE, OrgSpongycastleJceProviderBouncyCastleProvider_SYMMETRIC_MACS);
  
#line 153
  OrgSpongycastleJceProviderBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(self, OrgSpongycastleJceProviderBouncyCastleProvider_SYMMETRIC_PACKAGE, OrgSpongycastleJceProviderBouncyCastleProvider_SYMMETRIC_CIPHERS);
  
#line 155
  OrgSpongycastleJceProviderBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(self, OrgSpongycastleJceProviderBouncyCastleProvider_ASYMMETRIC_PACKAGE, OrgSpongycastleJceProviderBouncyCastleProvider_ASYMMETRIC_GENERIC);
  
#line 157
  OrgSpongycastleJceProviderBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(self, OrgSpongycastleJceProviderBouncyCastleProvider_ASYMMETRIC_PACKAGE, OrgSpongycastleJceProviderBouncyCastleProvider_ASYMMETRIC_CIPHERS);
  
#line 159
  OrgSpongycastleJceProviderBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(self, OrgSpongycastleJceProviderBouncyCastleProvider_KEYSTORE_PACKAGE, OrgSpongycastleJceProviderBouncyCastleProvider_KEYSTORES);
  
#line 161
  OrgSpongycastleJceProviderBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(self, OrgSpongycastleJceProviderBouncyCastleProvider_SECURE_RANDOM_PACKAGE, OrgSpongycastleJceProviderBouncyCastleProvider_SECURE_RANDOMS);
  
#line 166
  (void) [self putWithId:@"X509Store.CERTIFICATE/COLLECTION" withId:@"org.spongycastle.jce.provider.X509StoreCertCollection"];
  (void) [self putWithId:@"X509Store.ATTRIBUTECERTIFICATE/COLLECTION" withId:@"org.spongycastle.jce.provider.X509StoreAttrCertCollection"];
  (void) [self putWithId:@"X509Store.CRL/COLLECTION" withId:@"org.spongycastle.jce.provider.X509StoreCRLCollection"];
  (void) [self putWithId:@"X509Store.CERTIFICATEPAIR/COLLECTION" withId:@"org.spongycastle.jce.provider.X509StoreCertPairCollection"];
  
#line 171
  (void) [self putWithId:@"X509Store.CERTIFICATE/LDAP" withId:@"org.spongycastle.jce.provider.X509StoreLDAPCerts"];
  (void) [self putWithId:@"X509Store.CRL/LDAP" withId:@"org.spongycastle.jce.provider.X509StoreLDAPCRLs"];
  (void) [self putWithId:@"X509Store.ATTRIBUTECERTIFICATE/LDAP" withId:@"org.spongycastle.jce.provider.X509StoreLDAPAttrCerts"];
  (void) [self putWithId:@"X509Store.CERTIFICATEPAIR/LDAP" withId:@"org.spongycastle.jce.provider.X509StoreLDAPCertPairs"];
  
#line 179
  (void) [self putWithId:@"X509StreamParser.CERTIFICATE" withId:@"org.spongycastle.jce.provider.X509CertParser"];
  (void) [self putWithId:@"X509StreamParser.ATTRIBUTECERTIFICATE" withId:@"org.spongycastle.jce.provider.X509AttrCertParser"];
  (void) [self putWithId:@"X509StreamParser.CRL" withId:@"org.spongycastle.jce.provider.X509CRLParser"];
  (void) [self putWithId:@"X509StreamParser.CERTIFICATEPAIR" withId:@"org.spongycastle.jce.provider.X509CertPairParser"];
  
#line 187
  (void) [self putWithId:@"Cipher.BROKENPBEWITHMD5ANDDES" withId:@"org.spongycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithMD5AndDES"];
  
#line 189
  (void) [self putWithId:@"Cipher.BROKENPBEWITHSHA1ANDDES" withId:@"org.spongycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHA1AndDES"];
  
#line 192
  (void) [self putWithId:@"Cipher.OLDPBEWITHSHAANDTWOFISH-CBC" withId:@"org.spongycastle.jce.provider.BrokenJCEBlockCipher$OldPBEWithSHAAndTwofish"];
  
#line 195
  (void) [self putWithId:@"CertPathValidator.RFC3281" withId:@"org.spongycastle.jce.provider.PKIXAttrCertPathValidatorSpi"];
  (void) [self putWithId:@"CertPathBuilder.RFC3281" withId:@"org.spongycastle.jce.provider.PKIXAttrCertPathBuilderSpi"];
  (void) [self putWithId:@"CertPathValidator.RFC3280" withId:@"org.spongycastle.jce.provider.PKIXCertPathValidatorSpi"];
  (void) [self putWithId:@"CertPathBuilder.RFC3280" withId:@"org.spongycastle.jce.provider.PKIXCertPathBuilderSpi"];
  (void) [self putWithId:@"CertPathValidator.PKIX" withId:@"org.spongycastle.jce.provider.PKIXCertPathValidatorSpi"];
  (void) [self putWithId:@"CertPathBuilder.PKIX" withId:@"org.spongycastle.jce.provider.PKIXCertPathBuilderSpi"];
  (void) [self putWithId:@"CertStore.Collection" withId:@"org.spongycastle.jce.provider.CertStoreCollectionSpi"];
  (void) [self putWithId:@"CertStore.Multi" withId:@"org.spongycastle.jce.provider.MultiCertStoreSpi"];
  (void) [self putWithId:@"Alg.Alias.CertStore.X509LDAP" withId:@"LDAP"];
}


#line 206
void OrgSpongycastleJceProviderBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(OrgSpongycastleJceProviderBouncyCastleProvider *self, NSString *packageName, IOSObjectArray *names) {
  
#line 208
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(names))->size_; i++) {
    
#line 210
    IOSClass *clazz = OrgSpongycastleJcajceProviderSymmetricUtilClassUtil_loadClassWithIOSClass_withNSString_(OrgSpongycastleJceProviderBouncyCastleProvider_class_(), JreStrcat("$$$", packageName, IOSObjectArray_Get(names, i), @"$Mappings"));
    
#line 212
    if (clazz != nil) {
      
#line 214
      @try {
        
#line 216
        [((OrgSpongycastleJcajceProviderUtilAlgorithmProvider *) nil_chk(((OrgSpongycastleJcajceProviderUtilAlgorithmProvider *) cast_chk([clazz newInstance], [OrgSpongycastleJcajceProviderUtilAlgorithmProvider class])))) configureWithOrgSpongycastleJcajceProviderConfigConfigurableProvider:self];
      }
      @catch (JavaLangException *e) {
        
#line 220
        @throw new_JavaLangInternalError_initWithNSString_(JreStrcat("$$$$@", @"cannot create instance of ",
#line 221
        packageName, IOSObjectArray_Get(names, i), @"$Mappings : ", e));
      }
    }
  }
}


#line 285
id<OrgSpongycastleJcajceProviderUtilAsymmetricKeyInfoConverter> OrgSpongycastleJceProviderBouncyCastleProvider_getAsymmetricKeyInfoConverterWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(OrgSpongycastleAsn1ASN1ObjectIdentifier *algorithm) {
  OrgSpongycastleJceProviderBouncyCastleProvider_initialize();
  @synchronized(OrgSpongycastleJceProviderBouncyCastleProvider_keyInfoConverters) {
    
#line 289
    return JreRetainedLocalValue((id<OrgSpongycastleJcajceProviderUtilAsymmetricKeyInfoConverter>) cast_check([((id<JavaUtilMap>) nil_chk(OrgSpongycastleJceProviderBouncyCastleProvider_keyInfoConverters)) getWithId:algorithm], OrgSpongycastleJcajceProviderUtilAsymmetricKeyInfoConverter_class_()));
  }
}


#line 293
id<JavaSecurityPublicKey> OrgSpongycastleJceProviderBouncyCastleProvider_getPublicKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(OrgSpongycastleAsn1X509SubjectPublicKeyInfo *publicKeyInfo) {
  OrgSpongycastleJceProviderBouncyCastleProvider_initialize();
  
#line 296
  id<OrgSpongycastleJcajceProviderUtilAsymmetricKeyInfoConverter> converter = OrgSpongycastleJceProviderBouncyCastleProvider_getAsymmetricKeyInfoConverterWithOrgSpongycastleAsn1ASN1ObjectIdentifier_([((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgSpongycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(publicKeyInfo)) getAlgorithm])) getAlgorithm]);
  
#line 298
  if (converter == nil) {
    
#line 300
    return nil;
  }
  
#line 303
  return [converter generatePublicWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo:publicKeyInfo];
}


#line 306
id<JavaSecurityPrivateKey> OrgSpongycastleJceProviderBouncyCastleProvider_getPrivateKeyWithOrgSpongycastleAsn1PkcsPrivateKeyInfo_(OrgSpongycastleAsn1PkcsPrivateKeyInfo *privateKeyInfo) {
  OrgSpongycastleJceProviderBouncyCastleProvider_initialize();
  
#line 309
  id<OrgSpongycastleJcajceProviderUtilAsymmetricKeyInfoConverter> converter = OrgSpongycastleJceProviderBouncyCastleProvider_getAsymmetricKeyInfoConverterWithOrgSpongycastleAsn1ASN1ObjectIdentifier_([((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgSpongycastleAsn1PkcsPrivateKeyInfo *) nil_chk(privateKeyInfo)) getPrivateKeyAlgorithm])) getAlgorithm]);
  
#line 311
  if (converter == nil) {
    
#line 313
    return nil;
  }
  
#line 316
  return [converter generatePrivateWithOrgSpongycastleAsn1PkcsPrivateKeyInfo:privateKeyInfo];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleJceProviderBouncyCastleProvider)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/jce/provider/BouncyCastleProvider.java"


#line 135
@implementation OrgSpongycastleJceProviderBouncyCastleProvider_1


#line 135
- (instancetype)initWithOrgSpongycastleJceProviderBouncyCastleProvider:(OrgSpongycastleJceProviderBouncyCastleProvider *)outer$ {
  OrgSpongycastleJceProviderBouncyCastleProvider_1_initWithOrgSpongycastleJceProviderBouncyCastleProvider_(self, outer$);
  return self;
}


#line 136
- (id)run {
  
#line 139
  OrgSpongycastleJceProviderBouncyCastleProvider_setup(this$0_);
  return JreRetainedLocalValue(nil);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleJceProviderBouncyCastleProvider:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgSpongycastleJceProviderBouncyCastleProvider;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleJceProviderBouncyCastleProvider;", "init" };
  static const J2ObjcClassInfo _OrgSpongycastleJceProviderBouncyCastleProvider_1 = { "", "org.spongycastle.jce.provider", ptrTable, methods, fields, 7, 0x8000, 2, 1, 0, -1, 1, -1, -1 };
  return &_OrgSpongycastleJceProviderBouncyCastleProvider_1;
}

@end


#line 135
void OrgSpongycastleJceProviderBouncyCastleProvider_1_initWithOrgSpongycastleJceProviderBouncyCastleProvider_(OrgSpongycastleJceProviderBouncyCastleProvider_1 *self, OrgSpongycastleJceProviderBouncyCastleProvider *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}


#line 135
OrgSpongycastleJceProviderBouncyCastleProvider_1 *new_OrgSpongycastleJceProviderBouncyCastleProvider_1_initWithOrgSpongycastleJceProviderBouncyCastleProvider_(OrgSpongycastleJceProviderBouncyCastleProvider *outer$) {
  J2OBJC_NEW_IMPL(OrgSpongycastleJceProviderBouncyCastleProvider_1, initWithOrgSpongycastleJceProviderBouncyCastleProvider_, outer$)
}


#line 135
OrgSpongycastleJceProviderBouncyCastleProvider_1 *create_OrgSpongycastleJceProviderBouncyCastleProvider_1_initWithOrgSpongycastleJceProviderBouncyCastleProvider_(OrgSpongycastleJceProviderBouncyCastleProvider *outer$) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJceProviderBouncyCastleProvider_1, initWithOrgSpongycastleJceProviderBouncyCastleProvider_, outer$)
}
