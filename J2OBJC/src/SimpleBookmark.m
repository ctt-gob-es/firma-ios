//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/SimpleBookmark.java
//

#include "ByteBuffer.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IntHashtable.h"
#include "J2ObjC_source.h"
#include "PdfArray.h"
#include "PdfBoolean.h"
#include "PdfDictionary.h"
#include "PdfEncodings.h"
#include "PdfIndirectObject.h"
#include "PdfIndirectReference.h"
#include "PdfName.h"
#include "PdfNull.h"
#include "PdfNumber.h"
#include "PdfObject.h"
#include "PdfReader.h"
#include "PdfString.h"
#include "PdfWriter.h"
#include "SimpleBookmark.h"
#include "SimpleNamedDestination.h"
#include "SimpleXMLParser.h"
#include "java/io/Writer.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Stack.h"
#include "java/util/StringTokenizer.h"

#if !__has_feature(objc_arc)
#error "SimpleBookmark must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfSimpleBookmark () {
 @public
  JavaUtilArrayList *topList_;
  JavaUtilStack *attr_;
}

/*!
 @brief Creates a new instance of SimpleBookmark
 */
- (instancetype)initPackagePrivate;

+ (id<JavaUtilList>)bookmarkDepthWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader
                             withComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)outline
                              withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)pages;

+ (void)mapGotoBookmarkWithJavaUtilHashMap:(JavaUtilHashMap *)map
            withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)dest
         withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)pages;

+ (NSString *)makeBookmarkParamWithComAowagieTextPdfPdfArray:(ComAowagieTextPdfPdfArray *)dest
                           withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)pages;

/*!
 @brief Gets number of indirect.If type of directed indirect is PAGES, it refers PAGE object through KIDS.
 (Contributed by Kazuya Ujihara)
 @param indirect Indirect
 @return Number
 */
+ (jint)getNumberWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)indirect;

+ (void)createOutlineActionWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)outline
                                          withJavaUtilHashMap:(JavaUtilHashMap *)map
                               withComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
                                                  withBoolean:(jboolean)namedAsNames;

/*!
 @brief Exports the bookmarks to XML.Only of use if the generation is to be include in
  some other XML document.
 @param list the bookmarks
 @param outArg the export destination. The writer is not closed
 @param indent the indentation level. Pretty printing significant only
 @param onlyASCII codes above 127 will always be escaped with  &amp; #nn; if  <CODE> true </CODE> ,  whatever the encoding
 @throw IOExceptionon error
 */
+ (void)exportToXMLNodeWithJavaUtilList:(id<JavaUtilList>)list
                       withJavaIoWriter:(JavaIoWriter *)outArg
                                withInt:(jint)indent
                            withBoolean:(jboolean)onlyASCII;

/*!
 @brief Exports the bookmarks to XML.
 @param list the bookmarks
 @param wrt the export destination. The writer is not closed
 @param encoding the encoding according to IANA conventions
 @param onlyASCII codes above 127 will always be escaped with  &amp; #nn; if  <CODE> true </CODE> ,  whatever the encoding
 @throw IOExceptionon error
 */
+ (void)exportToXMLWithJavaUtilList:(id<JavaUtilList>)list
                   withJavaIoWriter:(JavaIoWriter *)wrt
                       withNSString:(NSString *)encoding
                        withBoolean:(jboolean)onlyASCII;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfSimpleBookmark, topList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfSimpleBookmark, attr_, JavaUtilStack *)

__attribute__((unused)) static void ComAowagieTextPdfSimpleBookmark_initPackagePrivate(ComAowagieTextPdfSimpleBookmark *self);

__attribute__((unused)) static ComAowagieTextPdfSimpleBookmark *new_ComAowagieTextPdfSimpleBookmark_initPackagePrivate(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfSimpleBookmark *create_ComAowagieTextPdfSimpleBookmark_initPackagePrivate(void);

__attribute__((unused)) static id<JavaUtilList> ComAowagieTextPdfSimpleBookmark_bookmarkDepthWithComAowagieTextPdfPdfReader_withComAowagieTextPdfPdfDictionary_withComAowagieTextPdfIntHashtable_(ComAowagieTextPdfPdfReader *reader, ComAowagieTextPdfPdfDictionary *outline, ComAowagieTextPdfIntHashtable *pages);

__attribute__((unused)) static void ComAowagieTextPdfSimpleBookmark_mapGotoBookmarkWithJavaUtilHashMap_withComAowagieTextPdfPdfObject_withComAowagieTextPdfIntHashtable_(JavaUtilHashMap *map, ComAowagieTextPdfPdfObject *dest, ComAowagieTextPdfIntHashtable *pages);

__attribute__((unused)) static NSString *ComAowagieTextPdfSimpleBookmark_makeBookmarkParamWithComAowagieTextPdfPdfArray_withComAowagieTextPdfIntHashtable_(ComAowagieTextPdfPdfArray *dest, ComAowagieTextPdfIntHashtable *pages);

__attribute__((unused)) static jint ComAowagieTextPdfSimpleBookmark_getNumberWithComAowagieTextPdfPdfIndirectReference_(ComAowagieTextPdfPdfIndirectReference *indirect);

__attribute__((unused)) static void ComAowagieTextPdfSimpleBookmark_createOutlineActionWithComAowagieTextPdfPdfDictionary_withJavaUtilHashMap_withComAowagieTextPdfPdfWriter_withBoolean_(ComAowagieTextPdfPdfDictionary *outline, JavaUtilHashMap *map, ComAowagieTextPdfPdfWriter *writer, jboolean namedAsNames);

__attribute__((unused)) static void ComAowagieTextPdfSimpleBookmark_exportToXMLNodeWithJavaUtilList_withJavaIoWriter_withInt_withBoolean_(id<JavaUtilList> list, JavaIoWriter *outArg, jint indent, jboolean onlyASCII);

__attribute__((unused)) static void ComAowagieTextPdfSimpleBookmark_exportToXMLWithJavaUtilList_withJavaIoWriter_withNSString_withBoolean_(id<JavaUtilList> list, JavaIoWriter *wrt, NSString *encoding, jboolean onlyASCII);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/SimpleBookmark.java"


#line 104
@implementation ComAowagieTextPdfSimpleBookmark


#line 110
- (instancetype)initPackagePrivate {
  ComAowagieTextPdfSimpleBookmark_initPackagePrivate(self);
  return self;
}


#line 113
+ (id<JavaUtilList>)bookmarkDepthWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader
                             withComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)outline
                              withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)pages {
  return ComAowagieTextPdfSimpleBookmark_bookmarkDepthWithComAowagieTextPdfPdfReader_withComAowagieTextPdfPdfDictionary_withComAowagieTextPdfIntHashtable_(reader, outline, pages);
}


#line 232
+ (void)mapGotoBookmarkWithJavaUtilHashMap:(JavaUtilHashMap *)map
            withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)dest
         withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)pages {
  ComAowagieTextPdfSimpleBookmark_mapGotoBookmarkWithJavaUtilHashMap_withComAowagieTextPdfPdfObject_withComAowagieTextPdfIntHashtable_(map, dest, pages);
}


#line 245
+ (NSString *)makeBookmarkParamWithComAowagieTextPdfPdfArray:(ComAowagieTextPdfPdfArray *)dest
                           withComAowagieTextPdfIntHashtable:(ComAowagieTextPdfIntHashtable *)pages {
  return ComAowagieTextPdfSimpleBookmark_makeBookmarkParamWithComAowagieTextPdfPdfArray_withComAowagieTextPdfIntHashtable_(dest, pages);
}


#line 268
+ (jint)getNumberWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)indirect {
  return ComAowagieTextPdfSimpleBookmark_getNumberWithComAowagieTextPdfPdfIndirectReference_(indirect);
}


#line 285
+ (void)createOutlineActionWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)outline
                                          withJavaUtilHashMap:(JavaUtilHashMap *)map
                               withComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
                                                  withBoolean:(jboolean)namedAsNames {
  ComAowagieTextPdfSimpleBookmark_createOutlineActionWithComAowagieTextPdfPdfDictionary_withJavaUtilHashMap_withComAowagieTextPdfPdfWriter_withBoolean_(outline, map, writer, namedAsNames);
}


#line 395
+ (IOSObjectArray *)iterateOutlinesWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
                        withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)parent
                                                 withJavaUtilList:(id<JavaUtilList>)kids
                                                      withBoolean:(jboolean)namedAsNames {
  return ComAowagieTextPdfSimpleBookmark_iterateOutlinesWithComAowagieTextPdfPdfWriter_withComAowagieTextPdfPdfIndirectReference_withJavaUtilList_withBoolean_(writer, parent, kids, namedAsNames);
}


#line 479
+ (void)exportToXMLNodeWithJavaUtilList:(id<JavaUtilList>)list
                       withJavaIoWriter:(JavaIoWriter *)outArg
                                withInt:(jint)indent
                            withBoolean:(jboolean)onlyASCII {
  ComAowagieTextPdfSimpleBookmark_exportToXMLNodeWithJavaUtilList_withJavaIoWriter_withInt_withBoolean_(list, outArg, indent, onlyASCII);
}


#line 537
+ (void)exportToXMLWithJavaUtilList:(id<JavaUtilList>)list
                   withJavaIoWriter:(JavaIoWriter *)wrt
                       withNSString:(NSString *)encoding
                        withBoolean:(jboolean)onlyASCII {
  ComAowagieTextPdfSimpleBookmark_exportToXMLWithJavaUtilList_withJavaIoWriter_withNSString_withBoolean_(list, wrt, encoding, onlyASCII);
}


#line 546
- (void)endDocument {
}


#line 550
- (void)endElementWithNSString:(NSString *)tag {
  
#line 552
  if ([((NSString *) nil_chk(tag)) isEqual:@"Bookmark"]) {
    if ([((JavaUtilStack *) nil_chk(self->attr_)) isEmpty]) {
      return;
    }
    else {
      
#line 556
      @throw new_JavaLangRuntimeException_initWithNSString_(@"Bookmark end tag out of place.");
    }
  }
  if (![tag isEqual:@"Title"]) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Invalid end tag - ", tag));
  }
  JavaUtilHashMap *attributes = (JavaUtilHashMap *) cast_chk([((JavaUtilStack *) nil_chk(self->attr_)) pop], [JavaUtilHashMap class]);
  NSString *title = (NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(attributes)) getWithId:@"Title"], [NSString class]);
  (void) [attributes putWithId:@"Title" withId:[((NSString *) nil_chk(title)) java_trim]];
  NSString *named = (NSString *) cast_chk([attributes getWithId:@"Named"], [NSString class]);
  if (named != nil) {
    (void) [attributes putWithId:@"Named" withId:ComAowagieTextPdfSimpleNamedDestination_unEscapeBinaryStringWithNSString_(named)];
  }
  named = (NSString *) cast_chk([attributes getWithId:@"NamedN"], [NSString class]);
  if (named != nil) {
    (void) [attributes putWithId:@"NamedN" withId:ComAowagieTextPdfSimpleNamedDestination_unEscapeBinaryStringWithNSString_(named)];
  }
  if ([self->attr_ isEmpty]) {
    [((JavaUtilArrayList *) nil_chk(self->topList_)) addWithId:attributes];
  }
  else {
    
#line 576
    JavaUtilHashMap *parent = (JavaUtilHashMap *) cast_chk([self->attr_ peek], [JavaUtilHashMap class]);
    id<JavaUtilList> kids = (id<JavaUtilList>) cast_check([((JavaUtilHashMap *) nil_chk(parent)) getWithId:@"Kids"], JavaUtilList_class_());
    if (kids == nil) {
      kids = new_JavaUtilArrayList_init();
      (void) [parent putWithId:@"Kids" withId:kids];
    }
    [kids addWithId:attributes];
  }
}


#line 586
- (void)startDocument {
}


#line 590
- (void)startElementWithNSString:(NSString *)tag
             withJavaUtilHashMap:(JavaUtilHashMap *)h {
  if (self->topList_ == nil) {
    if ([((NSString *) nil_chk(tag)) isEqual:@"Bookmark"]) {
      self->topList_ = new_JavaUtilArrayList_init();
      return;
    }
    else {
      
#line 597
      @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Root element is not Bookmark: ", tag));
    }
  }
  if (![((NSString *) nil_chk(tag)) isEqual:@"Title"]) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$", @"Tag ", tag, @" not allowed."));
  }
  JavaUtilHashMap *attributes = new_JavaUtilLinkedHashMap_initWithJavaUtilMap_(h);
  (void) [attributes putWithId:@"Title" withId:@""];
  (void) [attributes removeWithId:@"Kids"];
  (void) [((JavaUtilStack *) nil_chk(self->attr_)) pushWithId:attributes];
}


#line 609
- (void)textWithNSString:(NSString *)str {
  
#line 611
  if ([((JavaUtilStack *) nil_chk(self->attr_)) isEmpty]) {
    return;
  }
  JavaUtilHashMap *attributes = (JavaUtilHashMap *) cast_chk([self->attr_ peek], [JavaUtilHashMap class]);
  NSString *title = (NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(attributes)) getWithId:@"Title"], [NSString class]);
  (void) JreStrAppendStrong(&title, "$", str);
  (void) [attributes putWithId:@"Title" withId:title];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x8, 10, 11, 12, -1, -1, -1 },
    { NULL, "V", 0xa, 13, 14, 12, -1, -1, -1 },
    { NULL, "V", 0xa, 15, 16, 12, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(bookmarkDepthWithComAowagieTextPdfPdfReader:withComAowagieTextPdfPdfDictionary:withComAowagieTextPdfIntHashtable:);
  methods[2].selector = @selector(mapGotoBookmarkWithJavaUtilHashMap:withComAowagieTextPdfPdfObject:withComAowagieTextPdfIntHashtable:);
  methods[3].selector = @selector(makeBookmarkParamWithComAowagieTextPdfPdfArray:withComAowagieTextPdfIntHashtable:);
  methods[4].selector = @selector(getNumberWithComAowagieTextPdfPdfIndirectReference:);
  methods[5].selector = @selector(createOutlineActionWithComAowagieTextPdfPdfDictionary:withJavaUtilHashMap:withComAowagieTextPdfPdfWriter:withBoolean:);
  methods[6].selector = @selector(iterateOutlinesWithComAowagieTextPdfPdfWriter:withComAowagieTextPdfPdfIndirectReference:withJavaUtilList:withBoolean:);
  methods[7].selector = @selector(exportToXMLNodeWithJavaUtilList:withJavaIoWriter:withInt:withBoolean:);
  methods[8].selector = @selector(exportToXMLWithJavaUtilList:withJavaIoWriter:withNSString:withBoolean:);
  methods[9].selector = @selector(endDocument);
  methods[10].selector = @selector(endElementWithNSString:);
  methods[11].selector = @selector(startDocument);
  methods[12].selector = @selector(startElementWithNSString:withJavaUtilHashMap:);
  methods[13].selector = @selector(textWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "topList_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attr_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "bookmarkDepth", "LComAowagieTextPdfPdfReader;LComAowagieTextPdfPdfDictionary;LComAowagieTextPdfIntHashtable;", "mapGotoBookmark", "LJavaUtilHashMap;LComAowagieTextPdfPdfObject;LComAowagieTextPdfIntHashtable;", "makeBookmarkParam", "LComAowagieTextPdfPdfArray;LComAowagieTextPdfIntHashtable;", "getNumber", "LComAowagieTextPdfPdfIndirectReference;", "createOutlineAction", "LComAowagieTextPdfPdfDictionary;LJavaUtilHashMap;LComAowagieTextPdfPdfWriter;Z", "iterateOutlines", "LComAowagieTextPdfPdfWriter;LComAowagieTextPdfPdfIndirectReference;LJavaUtilList;Z", "LJavaIoIOException;", "exportToXMLNode", "LJavaUtilList;LJavaIoWriter;IZ", "exportToXML", "LJavaUtilList;LJavaIoWriter;LNSString;Z", "endElement", "LNSString;", "startElement", "LNSString;LJavaUtilHashMap;", "text" };
  static const J2ObjcClassInfo _ComAowagieTextPdfSimpleBookmark = { "SimpleBookmark", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x10, 14, 2, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfSimpleBookmark;
}

@end


#line 110
void ComAowagieTextPdfSimpleBookmark_initPackagePrivate(ComAowagieTextPdfSimpleBookmark *self) {
  NSObject_init(self);
  self->attr_ = new_JavaUtilStack_init();
}


#line 110
ComAowagieTextPdfSimpleBookmark *new_ComAowagieTextPdfSimpleBookmark_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfSimpleBookmark, initPackagePrivate)
}


#line 110
ComAowagieTextPdfSimpleBookmark *create_ComAowagieTextPdfSimpleBookmark_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfSimpleBookmark, initPackagePrivate)
}


#line 113
id<JavaUtilList> ComAowagieTextPdfSimpleBookmark_bookmarkDepthWithComAowagieTextPdfPdfReader_withComAowagieTextPdfPdfDictionary_withComAowagieTextPdfIntHashtable_(ComAowagieTextPdfPdfReader *reader, ComAowagieTextPdfPdfDictionary *outline, ComAowagieTextPdfIntHashtable *pages) {
  ComAowagieTextPdfSimpleBookmark_initialize();
  
#line 114
  JavaUtilArrayList *list = new_JavaUtilArrayList_init();
  while (outline != nil) {
    JavaUtilHashMap *map = new_JavaUtilLinkedHashMap_init();
    ComAowagieTextPdfPdfString *title = (ComAowagieTextPdfPdfString *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([outline getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TITLE)]), [ComAowagieTextPdfPdfString class]);
    (void) [map putWithId:@"Title" withId:[((ComAowagieTextPdfPdfString *) nil_chk(title)) toUnicodeString]];
    ComAowagieTextPdfPdfArray *color = (ComAowagieTextPdfPdfArray *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([outline getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, C)]), [ComAowagieTextPdfPdfArray class]);
    if (color != nil && [color size] == 3) {
      ComAowagieTextPdfByteBuffer *out = new_ComAowagieTextPdfByteBuffer_init();
      (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([out appendWithFloat:[((ComAowagieTextPdfPdfNumber *) nil_chk([color getAsNumberWithInt:0])) floatValue]])) appendWithChar:' '];
      (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([out appendWithFloat:[((ComAowagieTextPdfPdfNumber *) nil_chk([color getAsNumberWithInt:1])) floatValue]])) appendWithChar:' '];
      (void) [out appendWithFloat:[((ComAowagieTextPdfPdfNumber *) nil_chk([color getAsNumberWithInt:2])) floatValue]];
      (void) [map putWithId:@"Color" withId:ComAowagieTextPdfPdfEncodings_convertToStringWithByteArray_withNSString_([out toByteArray], nil)];
    }
    ComAowagieTextPdfPdfNumber *style = (ComAowagieTextPdfPdfNumber *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([outline getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, F)]), [ComAowagieTextPdfPdfNumber class]);
    if (style != nil) {
      jint f = [style intValue];
      NSString *s = @"";
      if ((f & 1) != 0) {
        (void) JreStrAppendStrong(&s, "$", @"italic ");
      }
      if ((f & 2) != 0) {
        (void) JreStrAppendStrong(&s, "$", @"bold ");
      }
      s = [s java_trim];
      if ([((NSString *) nil_chk(s)) java_length] != 0) {
        (void) [map putWithId:@"Style" withId:s];
      }
    }
    ComAowagieTextPdfPdfNumber *count = (ComAowagieTextPdfPdfNumber *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([outline getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COUNT)]), [ComAowagieTextPdfPdfNumber class]);
    if (count != nil && [count intValue] < 0) {
      (void) [map putWithId:@"Open" withId:@"false"];
    }
    @try {
      ComAowagieTextPdfPdfObject *dest = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([outline getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DEST)]);
      if (dest != nil) {
        ComAowagieTextPdfSimpleBookmark_mapGotoBookmarkWithJavaUtilHashMap_withComAowagieTextPdfPdfObject_withComAowagieTextPdfIntHashtable_(map, dest, pages);
      }
      else {
        ComAowagieTextPdfPdfDictionary *action = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([outline getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, A)]), [ComAowagieTextPdfPdfDictionary class]);
        if (action != nil) {
          if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, GOTO))) isEqual:ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([action getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, S)])]) {
            dest = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([action getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, D)]);
            if (dest != nil) {
              ComAowagieTextPdfSimpleBookmark_mapGotoBookmarkWithJavaUtilHashMap_withComAowagieTextPdfPdfObject_withComAowagieTextPdfIntHashtable_(map, dest, pages);
            }
          }
          else if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, URI))) isEqual:ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([action getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, S)])]) {
            (void) [map putWithId:@"Action" withId:@"URI"];
            (void) [map putWithId:@"URI" withId:[((ComAowagieTextPdfPdfString *) nil_chk(((ComAowagieTextPdfPdfString *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([action getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, URI)]), [ComAowagieTextPdfPdfString class])))) toUnicodeString]];
          }
          else if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, GOTOR))) isEqual:ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([action getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, S)])]) {
            dest = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([action getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, D)]);
            if (dest != nil) {
              if ([dest isString]) {
                (void) [map putWithId:@"Named" withId:[dest description]];
              }
              else
#line 169
              if ([dest isName]) {
                (void) [map putWithId:@"NamedN" withId:ComAowagieTextPdfPdfName_decodeNameWithNSString_([dest description])];
              }
              else
#line 171
              if ([dest isArray]) {
                ComAowagieTextPdfPdfArray *arr = (ComAowagieTextPdfPdfArray *) cast_chk(dest, [ComAowagieTextPdfPdfArray class]);
                JavaLangStringBuffer *s = new_JavaLangStringBuffer_init();
                (void) [s appendWithNSString:[((ComAowagieTextPdfPdfObject *) nil_chk([arr getPdfObjectWithInt:0])) description]];
                (void) [((JavaLangStringBuffer *) nil_chk([s appendWithChar:' '])) appendWithNSString:[((ComAowagieTextPdfPdfObject *) nil_chk([arr getPdfObjectWithInt:1])) description]];
                for (jint k = 2; k < [arr size]; ++k) {
                  (void) [((JavaLangStringBuffer *) nil_chk([s appendWithChar:' '])) appendWithNSString:[((ComAowagieTextPdfPdfObject *) nil_chk([arr getPdfObjectWithInt:k])) description]];
                }
                (void) [map putWithId:@"Page" withId:[s description]];
              }
            }
            (void) [map putWithId:@"Action" withId:@"GoToR"];
            ComAowagieTextPdfPdfObject *file = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([action getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, F)]);
            if (file != nil) {
              if ([file isString]) {
                (void) [map putWithId:@"File" withId:[((ComAowagieTextPdfPdfString *) cast_chk(file, [ComAowagieTextPdfPdfString class])) toUnicodeString]];
              }
              else
#line 187
              if ([file isDictionary]) {
                file = ComAowagieTextPdfPdfReader_getPdfObjectWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) cast_chk(file, [ComAowagieTextPdfPdfDictionary class])) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, F)]);
                if ([((ComAowagieTextPdfPdfObject *) nil_chk(file)) isString]) {
                  (void) [map putWithId:@"File" withId:[((ComAowagieTextPdfPdfString *) cast_chk(file, [ComAowagieTextPdfPdfString class])) toUnicodeString]];
                }
              }
            }
            ComAowagieTextPdfPdfObject *newWindow = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([action getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, NEWWINDOW)]);
            if (newWindow != nil) {
              (void) [map putWithId:@"NewWindow" withId:[newWindow description]];
            }
          }
          else if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, LAUNCH))) isEqual:ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([action getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, S)])]) {
            (void) [map putWithId:@"Action" withId:@"Launch"];
            ComAowagieTextPdfPdfObject *file = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([action getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, F)]);
            if (file == nil) {
              file = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([action getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, WIN)]);
            }
            if (file != nil) {
              if ([file isString]) {
                (void) [map putWithId:@"File" withId:[((ComAowagieTextPdfPdfString *) cast_chk(file, [ComAowagieTextPdfPdfString class])) toUnicodeString]];
              }
              else
#line 208
              if ([file isDictionary]) {
                file = ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([((ComAowagieTextPdfPdfDictionary *) cast_chk(file, [ComAowagieTextPdfPdfDictionary class])) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, F)]);
                if ([((ComAowagieTextPdfPdfObject *) nil_chk(file)) isString]) {
                  (void) [map putWithId:@"File" withId:[((ComAowagieTextPdfPdfString *) cast_chk(file, [ComAowagieTextPdfPdfString class])) toUnicodeString]];
                }
              }
            }
          }
        }
      }
    }
    @catch (JavaLangException *e) {
    }
    
#line 222
    ComAowagieTextPdfPdfDictionary *first = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([outline getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FIRST)]), [ComAowagieTextPdfPdfDictionary class]);
    if (first != nil) {
      (void) [map putWithId:@"Kids" withId:ComAowagieTextPdfSimpleBookmark_bookmarkDepthWithComAowagieTextPdfPdfReader_withComAowagieTextPdfPdfDictionary_withComAowagieTextPdfIntHashtable_(reader, first, pages)];
    }
    [list addWithId:map];
    outline = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_([outline getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, NEXT)]), [ComAowagieTextPdfPdfDictionary class]);
  }
  return list;
}


#line 232
void ComAowagieTextPdfSimpleBookmark_mapGotoBookmarkWithJavaUtilHashMap_withComAowagieTextPdfPdfObject_withComAowagieTextPdfIntHashtable_(JavaUtilHashMap *map, ComAowagieTextPdfPdfObject *dest, ComAowagieTextPdfIntHashtable *pages) {
  ComAowagieTextPdfSimpleBookmark_initialize();
  if ([((ComAowagieTextPdfPdfObject *) nil_chk(dest)) isString]) {
    (void) [((JavaUtilHashMap *) nil_chk(map)) putWithId:@"Named" withId:[dest description]];
  }
  else
#line 236
  if ([dest isName]) {
    (void) [((JavaUtilHashMap *) nil_chk(map)) putWithId:@"Named" withId:ComAowagieTextPdfPdfName_decodeNameWithNSString_([dest description])];
  }
  else
#line 238
  if ([dest isArray]) {
    
#line 240
    (void) [((JavaUtilHashMap *) nil_chk(map)) putWithId:@"Page" withId:ComAowagieTextPdfSimpleBookmark_makeBookmarkParamWithComAowagieTextPdfPdfArray_withComAowagieTextPdfIntHashtable_((ComAowagieTextPdfPdfArray *) cast_chk(dest, [ComAowagieTextPdfPdfArray class]), pages)];
  }
  (void) [((JavaUtilHashMap *) nil_chk(map)) putWithId:@"Action" withId:@"GoTo"];
}


#line 245
NSString *ComAowagieTextPdfSimpleBookmark_makeBookmarkParamWithComAowagieTextPdfPdfArray_withComAowagieTextPdfIntHashtable_(ComAowagieTextPdfPdfArray *dest, ComAowagieTextPdfIntHashtable *pages) {
  ComAowagieTextPdfSimpleBookmark_initialize();
  JavaLangStringBuffer *s = new_JavaLangStringBuffer_init();
  ComAowagieTextPdfPdfObject *obj = [((ComAowagieTextPdfPdfArray *) nil_chk(dest)) getPdfObjectWithInt:0];
  if ([((ComAowagieTextPdfPdfObject *) nil_chk(obj)) isNumber]) {
    (void) [s appendWithInt:[((ComAowagieTextPdfPdfNumber *) cast_chk(obj, [ComAowagieTextPdfPdfNumber class])) intValue] + 1];
  }
  else {
    (void) [s appendWithInt:[((ComAowagieTextPdfIntHashtable *) nil_chk(pages)) getWithInt:ComAowagieTextPdfSimpleBookmark_getNumberWithComAowagieTextPdfPdfIndirectReference_((ComAowagieTextPdfPdfIndirectReference *) cast_chk(obj, [ComAowagieTextPdfPdfIndirectReference class]))]];
  }
  (void) [((JavaLangStringBuffer *) nil_chk([s appendWithChar:' '])) appendWithNSString:[((NSString *) nil_chk([((ComAowagieTextPdfPdfObject *) nil_chk([dest getPdfObjectWithInt:1])) description])) java_substring:1]];
  for (jint k = 2; k < [dest size]; ++k) {
    (void) [((JavaLangStringBuffer *) nil_chk([s appendWithChar:' '])) appendWithNSString:[((ComAowagieTextPdfPdfObject *) nil_chk([dest getPdfObjectWithInt:k])) description]];
  }
  return [s description];
}


#line 268
jint ComAowagieTextPdfSimpleBookmark_getNumberWithComAowagieTextPdfPdfIndirectReference_(ComAowagieTextPdfPdfIndirectReference *indirect) {
  ComAowagieTextPdfSimpleBookmark_initialize();
  ComAowagieTextPdfPdfDictionary *pdfObj = (ComAowagieTextPdfPdfDictionary *) cast_chk(ComAowagieTextPdfPdfReader_getPdfObjectReleaseWithComAowagieTextPdfPdfObject_(indirect), [ComAowagieTextPdfPdfDictionary class]);
  if ([((ComAowagieTextPdfPdfDictionary *) nil_chk(pdfObj)) containsWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TYPE)] && [((ComAowagieTextPdfPdfObject *) nil_chk([pdfObj getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TYPE)])) isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, PAGES)] && [pdfObj containsWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, KIDS)]) {
    
#line 273
    ComAowagieTextPdfPdfArray *kids = (ComAowagieTextPdfPdfArray *) cast_chk([pdfObj getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, KIDS)], [ComAowagieTextPdfPdfArray class]);
    indirect = (ComAowagieTextPdfPdfIndirectReference *) cast_chk([((ComAowagieTextPdfPdfArray *) nil_chk(kids)) getPdfObjectWithInt:0], [ComAowagieTextPdfPdfIndirectReference class]);
  }
  return [((ComAowagieTextPdfPdfIndirectReference *) nil_chk(indirect)) getNumber];
}


#line 285
void ComAowagieTextPdfSimpleBookmark_createOutlineActionWithComAowagieTextPdfPdfDictionary_withJavaUtilHashMap_withComAowagieTextPdfPdfWriter_withBoolean_(ComAowagieTextPdfPdfDictionary *outline, JavaUtilHashMap *map, ComAowagieTextPdfPdfWriter *writer, jboolean namedAsNames) {
  ComAowagieTextPdfSimpleBookmark_initialize();
  
#line 286
  @try {
    NSString *action = (NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(map)) getWithId:@"Action"], [NSString class]);
    if ([@"GoTo" isEqual:action]) {
      NSString *p;
      if ((p = (NSString *) cast_chk([map getWithId:@"Named"], [NSString class])) != nil) {
        if (namedAsNames) {
          [((ComAowagieTextPdfPdfDictionary *) nil_chk(outline)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DEST) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(p)];
        }
        else {
          
#line 294
          [((ComAowagieTextPdfPdfDictionary *) nil_chk(outline)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DEST) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_withNSString_(p, nil)];
        }
      }
      else if ((p = (NSString *) cast_chk([map getWithId:@"Page"], [NSString class])) != nil) {
        ComAowagieTextPdfPdfArray *ar = new_ComAowagieTextPdfPdfArray_init();
        JavaUtilStringTokenizer *tk = new_JavaUtilStringTokenizer_initWithNSString_(p);
        jint n = JavaLangInteger_parseIntWithNSString_([tk nextToken]);
        [ar addWithComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) getPageReferenceWithInt:n]];
        if (![tk hasMoreTokens]) {
          [ar addWithComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, XYZ)];
          [ar addWithFloatArray:[IOSFloatArray newArrayWithFloats:(jfloat[]){ 0, 10000, 0 } count:3]];
        }
        else {
          NSString *fn = [tk nextToken];
          if ([((NSString *) nil_chk(fn)) java_hasPrefix:@"/"]) {
            fn = [fn java_substring:1];
          }
          [ar addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(fn)];
          for (jint k = 0; k < 4 && [tk hasMoreTokens]; ++k) {
            fn = [tk nextToken];
            if ([((NSString *) nil_chk(fn)) isEqual:@"null"]) {
              [ar addWithComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfNull, PDFNULL)];
            }
            else {
              
#line 317
              [ar addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithNSString_(fn)];
            }
          }
        }
        [((ComAowagieTextPdfPdfDictionary *) nil_chk(outline)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DEST) withComAowagieTextPdfPdfObject:ar];
      }
    }
    else if ([@"GoToR" isEqual:action]) {
      NSString *p;
      ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_init();
      if ((p = (NSString *) cast_chk([map getWithId:@"Named"], [NSString class])) != nil) {
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, D) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_withNSString_(p, nil)];
      }
      else
#line 329
      if ((p = (NSString *) cast_chk([map getWithId:@"NamedN"], [NSString class])) != nil) {
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, D) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(p)];
      }
      else
#line 331
      if ((p = (NSString *) cast_chk([map getWithId:@"Page"], [NSString class])) != nil) {
        ComAowagieTextPdfPdfArray *ar = new_ComAowagieTextPdfPdfArray_init();
        JavaUtilStringTokenizer *tk = new_JavaUtilStringTokenizer_initWithNSString_(p);
        [ar addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithNSString_([tk nextToken])];
        if (![tk hasMoreTokens]) {
          [ar addWithComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, XYZ)];
          [ar addWithFloatArray:[IOSFloatArray newArrayWithFloats:(jfloat[]){ 0, 10000, 0 } count:3]];
        }
        else {
          NSString *fn = [tk nextToken];
          if ([((NSString *) nil_chk(fn)) java_hasPrefix:@"/"]) {
            fn = [fn java_substring:1];
          }
          [ar addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfName_initWithNSString_(fn)];
          for (jint k = 0; k < 4 && [tk hasMoreTokens]; ++k) {
            fn = [tk nextToken];
            if ([((NSString *) nil_chk(fn)) isEqual:@"null"]) {
              [ar addWithComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfNull, PDFNULL)];
            }
            else {
              
#line 350
              [ar addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithNSString_(fn)];
            }
          }
        }
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, D) withComAowagieTextPdfPdfObject:ar];
      }
      NSString *file = (NSString *) cast_chk([map getWithId:@"File"], [NSString class]);
      if ([dic size] > 0 && file != nil) {
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, S) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, GOTOR)];
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, F) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_(file)];
        NSString *nw = (NSString *) cast_chk([map getWithId:@"NewWindow"], [NSString class]);
        if (nw != nil) {
          if ([nw isEqual:@"true"]) {
            [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, NEWWINDOW) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfBoolean, PDFTRUE)];
          }
          else
#line 364
          if ([nw isEqual:@"false"]) {
            [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, NEWWINDOW) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfBoolean, PDFFALSE)];
          }
        }
        [((ComAowagieTextPdfPdfDictionary *) nil_chk(outline)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, A) withComAowagieTextPdfPdfObject:dic];
      }
    }
    else if ([@"URI" isEqual:action]) {
      NSString *uri = (NSString *) cast_chk([map getWithId:@"URI"], [NSString class]);
      if (uri != nil) {
        ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_init();
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, S) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, URI)];
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, URI) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_(uri)];
        [((ComAowagieTextPdfPdfDictionary *) nil_chk(outline)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, A) withComAowagieTextPdfPdfObject:dic];
      }
    }
    else if ([@"Launch" isEqual:action]) {
      NSString *file = (NSString *) cast_chk([map getWithId:@"File"], [NSString class]);
      if (file != nil) {
        ComAowagieTextPdfPdfDictionary *dic = new_ComAowagieTextPdfPdfDictionary_init();
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, S) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, LAUNCH)];
        [dic putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, F) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_(file)];
        [((ComAowagieTextPdfPdfDictionary *) nil_chk(outline)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, A) withComAowagieTextPdfPdfObject:dic];
      }
    }
  }
  @catch (JavaLangException *e) {
  }
}


#line 395
IOSObjectArray *ComAowagieTextPdfSimpleBookmark_iterateOutlinesWithComAowagieTextPdfPdfWriter_withComAowagieTextPdfPdfIndirectReference_withJavaUtilList_withBoolean_(ComAowagieTextPdfPdfWriter *writer, ComAowagieTextPdfPdfIndirectReference *parent, id<JavaUtilList> kids, jboolean namedAsNames) {
  ComAowagieTextPdfSimpleBookmark_initialize();
  
#line 396
  IOSObjectArray *refs = [IOSObjectArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(kids)) size] type:ComAowagieTextPdfPdfIndirectReference_class_()];
  for (jint k = 0; k < refs->size_; ++k) {
    (void) IOSObjectArray_Set(refs, k, [((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) getPdfIndirectReference]);
  }
  jint ptr = 0;
  jint count = 0;
  for (id<JavaUtilIterator> it = [kids listIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ++ptr) {
    JavaUtilHashMap *map = (JavaUtilHashMap *) cast_chk([it next], [JavaUtilHashMap class]);
    IOSObjectArray *lower = nil;
    id<JavaUtilList> subKid = (id<JavaUtilList>) cast_check([((JavaUtilHashMap *) nil_chk(map)) getWithId:@"Kids"], JavaUtilList_class_());
    if (subKid != nil && ![subKid isEmpty]) {
      lower = ComAowagieTextPdfSimpleBookmark_iterateOutlinesWithComAowagieTextPdfPdfWriter_withComAowagieTextPdfPdfIndirectReference_withJavaUtilList_withBoolean_(writer, IOSObjectArray_Get(refs, ptr), subKid, namedAsNames);
    }
    ComAowagieTextPdfPdfDictionary *outline = new_ComAowagieTextPdfPdfDictionary_init();
    ++count;
    if (lower != nil) {
      [outline putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FIRST) withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfIndirectReference *) cast_chk(IOSObjectArray_Get(lower, 0), [ComAowagieTextPdfPdfIndirectReference class])];
      [outline putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LAST) withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfIndirectReference *) cast_chk(IOSObjectArray_Get(lower, 1), [ComAowagieTextPdfPdfIndirectReference class])];
      jint n = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(lower, 2), [JavaLangInteger class])))) intValue];
      if ([@"false" isEqual:[map getWithId:@"Open"]]) {
        [outline putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COUNT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(-n)];
      }
      else {
        [outline putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COUNT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(n)];
        count += n;
      }
    }
    [outline putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PARENT) withComAowagieTextPdfPdfObject:parent];
    if (ptr > 0) {
      [outline putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PREV) withComAowagieTextPdfPdfObject:IOSObjectArray_Get(refs, ptr - 1)];
    }
    if (ptr < refs->size_ - 1) {
      [outline putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, NEXT) withComAowagieTextPdfPdfObject:IOSObjectArray_Get(refs, ptr + 1)];
    }
    [outline putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TITLE) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_withNSString_((NSString *) cast_chk([map getWithId:@"Title"], [NSString class]), ComAowagieTextPdfPdfObject_TEXT_UNICODE)];
    NSString *color = (NSString *) cast_chk([map getWithId:@"Color"], [NSString class]);
    if (color != nil) {
      @try {
        ComAowagieTextPdfPdfArray *arr = new_ComAowagieTextPdfPdfArray_init();
        JavaUtilStringTokenizer *tk = new_JavaUtilStringTokenizer_initWithNSString_(color);
        for (jint k = 0; k < 3; ++k) {
          jfloat f = JavaLangFloat_parseFloatWithNSString_([tk nextToken]);
          if (f < 0) {
            f = 0;
          }
          if (f > 1) {
            f = 1;
          }
          [arr addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithFloat_(f)];
        }
        [outline putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, C) withComAowagieTextPdfPdfObject:arr];
      }
      @catch (
#line 447
      JavaLangException *e) {
      }
    }
    
#line 449
    NSString *style = (NSString *) cast_chk([map getWithId:@"Style"], [NSString class]);
    if (style != nil) {
      style = [style lowercaseString];
      jint bits = 0;
      if ([((NSString *) nil_chk(style)) java_indexOfString:@"italic"] >= 0) {
        bits |= 1;
      }
      if ([style java_indexOfString:@"bold"] >= 0) {
        bits |= 2;
      }
      if (bits != 0) {
        [outline putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, F) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(bits)];
      }
    }
    ComAowagieTextPdfSimpleBookmark_createOutlineActionWithComAowagieTextPdfPdfDictionary_withJavaUtilHashMap_withComAowagieTextPdfPdfWriter_withBoolean_(outline, map, writer, namedAsNames);
    (void) [((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComAowagieTextPdfPdfObject:outline withComAowagieTextPdfPdfIndirectReference:IOSObjectArray_Get(refs, ptr)];
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){ IOSObjectArray_Get(refs, 0), IOSObjectArray_Get(refs, refs->size_ - 1), create_JavaLangInteger_initWithInt_(count) } count:3 type:NSObject_class_()];
}


#line 479
void ComAowagieTextPdfSimpleBookmark_exportToXMLNodeWithJavaUtilList_withJavaIoWriter_withInt_withBoolean_(id<JavaUtilList> list, JavaIoWriter *outArg, jint indent, jboolean onlyASCII) {
  ComAowagieTextPdfSimpleBookmark_initialize();
  
#line 480
  NSString *dep = @"";
  for (jint k = 0; k < indent; ++k) {
    (void) JreStrAppendStrong(&dep, "$", @"  ");
  }
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(list)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    JavaUtilHashMap *map = (JavaUtilHashMap *) cast_chk([it next], [JavaUtilHashMap class]);
    NSString *title = nil;
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:dep];
    [outArg writeWithNSString:@"<Title "];
    id<JavaUtilList> kids = nil;
    for (id<JavaUtilIterator> e = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(map)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(e)) hasNext]; ) {
      id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check([e next], JavaUtilMap_Entry_class_());
      NSString *key = (NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [NSString class]);
      if ([((NSString *) nil_chk(key)) isEqual:@"Title"]) {
        title = (NSString *) cast_chk([entry_ getValue], [NSString class]);
        continue;
      }
      else if ([key isEqual:@"Kids"]) {
        kids = (id<JavaUtilList>) cast_check([entry_ getValue], JavaUtilList_class_());
        continue;
      }
      else {
        [outArg writeWithNSString:key];
        [outArg writeWithNSString:@"=\""];
        NSString *value = (NSString *) cast_chk([entry_ getValue], [NSString class]);
        if ([key isEqual:@"Named"] || [key isEqual:@"NamedN"]) {
          value = ComAowagieTextPdfSimpleNamedDestination_escapeBinaryStringWithNSString_(value);
        }
        [outArg writeWithNSString:ComAowagieTextXmlSimpleparserSimpleXMLParser_escapeXMLWithNSString_withBoolean_(value, onlyASCII)];
        [outArg writeWithNSString:@"\" "];
      }
    }
    [outArg writeWithNSString:@">"];
    if (title == nil) {
      title = @"";
    }
    [outArg writeWithNSString:ComAowagieTextXmlSimpleparserSimpleXMLParser_escapeXMLWithNSString_withBoolean_(title, onlyASCII)];
    if (kids != nil) {
      [outArg writeWithNSString:@"\n"];
      ComAowagieTextPdfSimpleBookmark_exportToXMLNodeWithJavaUtilList_withJavaIoWriter_withInt_withBoolean_(kids, outArg, indent + 1, onlyASCII);
      [outArg writeWithNSString:dep];
    }
    [outArg writeWithNSString:@"</Title>\n"];
  }
}


#line 537
void ComAowagieTextPdfSimpleBookmark_exportToXMLWithJavaUtilList_withJavaIoWriter_withNSString_withBoolean_(id<JavaUtilList> list, JavaIoWriter *wrt, NSString *encoding, jboolean onlyASCII) {
  ComAowagieTextPdfSimpleBookmark_initialize();
  
#line 538
  [((JavaIoWriter *) nil_chk(wrt)) writeWithNSString:@"<?xml version=\"1.0\" encoding=\""];
  [wrt writeWithNSString:ComAowagieTextXmlSimpleparserSimpleXMLParser_escapeXMLWithNSString_withBoolean_(encoding, onlyASCII)];
  [wrt writeWithNSString:@"\"?>\n<Bookmark>\n"];
  ComAowagieTextPdfSimpleBookmark_exportToXMLNodeWithJavaUtilList_withJavaIoWriter_withInt_withBoolean_(list, wrt, 1, onlyASCII);
  [wrt writeWithNSString:@"</Bookmark>\n"];
  [wrt flush];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfSimpleBookmark)
