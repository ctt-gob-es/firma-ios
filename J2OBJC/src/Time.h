//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/asn1/cms/Time.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Time")
#ifdef RESTRICT_Time
#define INCLUDE_ALL_Time 0
#else
#define INCLUDE_ALL_Time 1
#endif
#undef RESTRICT_Time

#if !defined (OrgSpongycastleAsn1CmsTime_) && (INCLUDE_ALL_Time || defined(INCLUDE_OrgSpongycastleAsn1CmsTime))
#define OrgSpongycastleAsn1CmsTime_

#define RESTRICT_ASN1Object 1
#define INCLUDE_OrgSpongycastleAsn1ASN1Object 1
#include "ASN1Object.h"

#define RESTRICT_ASN1Choice 1
#define INCLUDE_OrgSpongycastleAsn1ASN1Choice 1
#include "ASN1Choice.h"

@class JavaUtilDate;
@class JavaUtilLocale;
@class OrgSpongycastleAsn1ASN1Primitive;
@class OrgSpongycastleAsn1ASN1TaggedObject;

/*!
 @brief <a href="http://tools.ietf.org/html/rfc5652#section-11.3">RFC 5652</a>:
  Dual-mode timestamp format producing either UTCTIme or GeneralizedTime.
 <p>
  @code

  Time ::= CHOICE {
      utcTime        UTCTime,
      generalTime    GeneralizedTime } 
  
@endcode
  <p>
  This has a constructor using java.util.Date for input which generates a 
 <code>DERUTCTime</code> object if the
  supplied datetime is in range 1950-01-01-00:00:00 UTC until 2049-12-31-23:59:60 UTC.
  If the datetime value is outside that range, the generated object will be 
 <code>DERGeneralizedTime</code>.
 */
@interface OrgSpongycastleAsn1CmsTime : OrgSpongycastleAsn1ASN1Object < OrgSpongycastleAsn1ASN1Choice > {
 @public
  OrgSpongycastleAsn1ASN1Primitive *time_;
}

#pragma mark Public

/*!
 */
- (instancetype)initWithOrgSpongycastleAsn1ASN1Primitive:(OrgSpongycastleAsn1ASN1Primitive *)time;

/*!
 @brief Creates a time object from a given date - if the date is between 1950
  and 2049 a UTCTime object is generated, otherwise a GeneralizedTime
  is used.
 @param time a date object representing the time of interest.
 */
- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time;

/*!
 @brief Creates a time object from a given date and locale - if the date is between 1950
  and 2049 a UTCTime object is generated, otherwise a GeneralizedTime
  is used.You may need to use this constructor if the default locale
  doesn't use a Gregorian calender so that the GeneralizedTime produced is compatible with other ASN.1 implementations.
 @param time a date object representing the time of interest.
 @param locale an appropriate Locale for producing an ASN.1 GeneralizedTime value.
 */
- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time
                  withJavaUtilLocale:(JavaUtilLocale *)locale;

/*!
 @brief Get java.util.Date version of date+time.
 */
- (JavaUtilDate *)getDate;

+ (OrgSpongycastleAsn1CmsTime *)getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject:(OrgSpongycastleAsn1ASN1TaggedObject *)obj
                                                                       withBoolean:(jboolean)explicit_;

/*!
 @brief Return a Time object from the given object.
 <p>
  Accepted inputs: 
 <ul>
  <li> null &rarr; null 
 <li> <code>Time</code> object 
 <li> <code>DERUTCTime</code> object 
 <li> <code>DERGeneralizedTime</code> object 
 </ul>
 @param obj the object we want converted.
 @throw IllegalArgumentExceptionif the object cannot be converted.
 */
+ (OrgSpongycastleAsn1CmsTime *)getInstanceWithId:(id)obj;

/*!
 @brief Get the date+tine as a String in full form century format.
 */
- (NSString *)getTime;

/*!
 @brief Produce an object suitable for an ASN1OutputStream.
 */
- (OrgSpongycastleAsn1ASN1Primitive *)toASN1Primitive;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleAsn1CmsTime)

J2OBJC_FIELD_SETTER(OrgSpongycastleAsn1CmsTime, time_, OrgSpongycastleAsn1ASN1Primitive *)

FOUNDATION_EXPORT OrgSpongycastleAsn1CmsTime *OrgSpongycastleAsn1CmsTime_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(OrgSpongycastleAsn1ASN1TaggedObject *obj, jboolean explicit_);

FOUNDATION_EXPORT void OrgSpongycastleAsn1CmsTime_initWithOrgSpongycastleAsn1ASN1Primitive_(OrgSpongycastleAsn1CmsTime *self, OrgSpongycastleAsn1ASN1Primitive *time);

FOUNDATION_EXPORT OrgSpongycastleAsn1CmsTime *new_OrgSpongycastleAsn1CmsTime_initWithOrgSpongycastleAsn1ASN1Primitive_(OrgSpongycastleAsn1ASN1Primitive *time) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1CmsTime *create_OrgSpongycastleAsn1CmsTime_initWithOrgSpongycastleAsn1ASN1Primitive_(OrgSpongycastleAsn1ASN1Primitive *time);

FOUNDATION_EXPORT void OrgSpongycastleAsn1CmsTime_initWithJavaUtilDate_(OrgSpongycastleAsn1CmsTime *self, JavaUtilDate *time);

FOUNDATION_EXPORT OrgSpongycastleAsn1CmsTime *new_OrgSpongycastleAsn1CmsTime_initWithJavaUtilDate_(JavaUtilDate *time) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1CmsTime *create_OrgSpongycastleAsn1CmsTime_initWithJavaUtilDate_(JavaUtilDate *time);

FOUNDATION_EXPORT void OrgSpongycastleAsn1CmsTime_initWithJavaUtilDate_withJavaUtilLocale_(OrgSpongycastleAsn1CmsTime *self, JavaUtilDate *time, JavaUtilLocale *locale);

FOUNDATION_EXPORT OrgSpongycastleAsn1CmsTime *new_OrgSpongycastleAsn1CmsTime_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1CmsTime *create_OrgSpongycastleAsn1CmsTime_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale);

FOUNDATION_EXPORT OrgSpongycastleAsn1CmsTime *OrgSpongycastleAsn1CmsTime_getInstanceWithId_(id obj);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleAsn1CmsTime)

#endif

#pragma pop_macro("INCLUDE_ALL_Time")
