//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/x509/ExtendedPKIXParameters.java
//

#include "ExtendedPKIXParameters.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "PKIXAttrCertChecker.h"
#include "Selector.h"
#include "Store.h"
#include "X509CertStoreSelector.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/security/cert/CertSelector.h"
#include "java/security/cert/CertStore.h"
#include "java/security/cert/PKIXParameters.h"
#include "java/security/cert/TrustAnchor.h"
#include "java/security/cert/X509CertSelector.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"

#if !__has_feature(objc_arc)
#error "ExtendedPKIXParameters must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleX509ExtendedPKIXParameters () {
 @public
  id<JavaUtilList> stores_;
  id<OrgSpongycastleUtilSelector> selector_;
  jboolean additionalLocationsEnabled_;
  id<JavaUtilList> additionalStores_;
  id<JavaUtilSet> trustedACIssuers_;
  id<JavaUtilSet> necessaryACAttributes_;
  id<JavaUtilSet> prohibitedACAttributes_;
  id<JavaUtilSet> attrCertCheckers_;
  jint validityModel_;
  jboolean useDeltas_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleX509ExtendedPKIXParameters, stores_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgSpongycastleX509ExtendedPKIXParameters, selector_, id<OrgSpongycastleUtilSelector>)
J2OBJC_FIELD_SETTER(OrgSpongycastleX509ExtendedPKIXParameters, additionalStores_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgSpongycastleX509ExtendedPKIXParameters, trustedACIssuers_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgSpongycastleX509ExtendedPKIXParameters, necessaryACAttributes_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgSpongycastleX509ExtendedPKIXParameters, prohibitedACAttributes_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgSpongycastleX509ExtendedPKIXParameters, attrCertCheckers_, id<JavaUtilSet>)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/x509/ExtendedPKIXParameters.java"


#line 24
@implementation OrgSpongycastleX509ExtendedPKIXParameters


#line 61
- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)trustAnchors {
  OrgSpongycastleX509ExtendedPKIXParameters_initWithJavaUtilSet_(self, trustAnchors);
  return self;
}


#line 80
+ (OrgSpongycastleX509ExtendedPKIXParameters *)getInstanceWithJavaSecurityCertPKIXParameters:(JavaSecurityCertPKIXParameters *)pkixParams {
  return OrgSpongycastleX509ExtendedPKIXParameters_getInstanceWithJavaSecurityCertPKIXParameters_(pkixParams);
}


#line 103
- (void)setParamsWithJavaSecurityCertPKIXParameters:(JavaSecurityCertPKIXParameters *)params {
  
#line 105
  [self setDateWithJavaUtilDate:[((JavaSecurityCertPKIXParameters *) nil_chk(params)) getDate]];
  [self setCertPathCheckersWithJavaUtilList:[params getCertPathCheckers]];
  [self setCertStoresWithJavaUtilList:[params getCertStores]];
  [self setAnyPolicyInhibitedWithBoolean:[params isAnyPolicyInhibited]];
  [self setExplicitPolicyRequiredWithBoolean:[params isExplicitPolicyRequired]];
  [self setPolicyMappingInhibitedWithBoolean:[params isPolicyMappingInhibited]];
  [self setRevocationEnabledWithBoolean:[params isRevocationEnabled]];
  [self setInitialPoliciesWithJavaUtilSet:[params getInitialPolicies]];
  [self setPolicyQualifiersRejectedWithBoolean:[params getPolicyQualifiersRejected]];
  [self setSigProviderWithNSString:[params getSigProvider]];
  [self setTargetCertConstraintsWithJavaSecurityCertCertSelector:[params getTargetCertConstraints]];
  @try {
    
#line 118
    [self setTrustAnchorsWithJavaUtilSet:[params getTrustAnchors]];
  }
  @catch (JavaLangException *e) {
    
#line 123
    @throw new_JavaLangRuntimeException_initWithNSString_([e getMessage]);
  }
  if ([params isKindOfClass:[OrgSpongycastleX509ExtendedPKIXParameters class]]) {
    
#line 127
    OrgSpongycastleX509ExtendedPKIXParameters *_params = (OrgSpongycastleX509ExtendedPKIXParameters *) params;
    validityModel_ = _params->validityModel_;
    useDeltas_ = _params->useDeltas_;
    additionalLocationsEnabled_ = _params->additionalLocationsEnabled_;
    selector_ = _params->selector_ == nil ? nil :
#line 132
    (id<OrgSpongycastleUtilSelector>) cast_check([_params->selector_ clone], OrgSpongycastleUtilSelector_class_());
    stores_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(_params->stores_);
    additionalStores_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(_params->additionalStores_);
    trustedACIssuers_ = new_JavaUtilHashSet_initWithJavaUtilCollection_(_params->trustedACIssuers_);
    prohibitedACAttributes_ = new_JavaUtilHashSet_initWithJavaUtilCollection_(_params->prohibitedACAttributes_);
    necessaryACAttributes_ = new_JavaUtilHashSet_initWithJavaUtilCollection_(_params->necessaryACAttributes_);
    attrCertCheckers_ = new_JavaUtilHashSet_initWithJavaUtilCollection_(_params->attrCertCheckers_);
  }
}


#line 179
- (jboolean)isUseDeltasEnabled {
  
#line 181
  return useDeltas_;
}


#line 189
- (void)setUseDeltasEnabledWithBoolean:(jboolean)useDeltas {
  
#line 191
  self->useDeltas_ = useDeltas;
}


#line 199
- (jint)getValidityModel {
  
#line 201
  return validityModel_;
}


#line 210
- (void)setCertStoresWithJavaUtilList:(id<JavaUtilList>)stores {
  
#line 212
  if (stores != nil) {
    
#line 214
    id<JavaUtilIterator> it = [stores iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      
#line 217
      [self addCertStoreWithJavaSecurityCertCertStore:(JavaSecurityCertCertStore *) cast_chk([it next], [JavaSecurityCertCertStore class])];
    }
  }
}


#line 233
- (void)setStoresWithJavaUtilList:(id<JavaUtilList>)stores {
  
#line 235
  if (stores == nil) {
    
#line 237
    self->stores_ = new_JavaUtilArrayList_init();
  }
  else {
    
#line 241
    for (id<JavaUtilIterator> i = [stores iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
      
#line 243
      if (!([OrgSpongycastleUtilStore_class_() isInstance:[i next]])) {
        
#line 245
        @throw new_JavaLangClassCastException_initWithNSString_(
#line 246
        @"All elements of list must be of type org.spongycastle.util.Store.");
      }
    }
    
#line 250
    self->stores_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(stores);
  }
}


#line 268
- (void)addStoreWithOrgSpongycastleUtilStore:(id<OrgSpongycastleUtilStore>)store {
  
#line 270
  if (store != nil) {
    
#line 272
    [((id<JavaUtilList>) nil_chk(stores_)) addWithId:store];
  }
}


#line 291
- (void)addAdditionalStoreWithOrgSpongycastleUtilStore:(id<OrgSpongycastleUtilStore>)store {
  
#line 293
  if (store != nil) {
    
#line 295
    [((id<JavaUtilList>) nil_chk(additionalStores_)) addWithId:store];
  }
}


#line 302
- (void)addAddionalStoreWithOrgSpongycastleUtilStore:(id<OrgSpongycastleUtilStore>)store {
  
#line 304
  [self addAdditionalStoreWithOrgSpongycastleUtilStore:store];
}


#line 317
- (id<JavaUtilList>)getAdditionalStores {
  
#line 319
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(additionalStores_);
}


#line 332
- (id<JavaUtilList>)getStores {
  
#line 334
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(new_JavaUtilArrayList_initWithJavaUtilCollection_(stores_));
}


#line 342
- (void)setValidityModelWithInt:(jint)validityModel {
  
#line 344
  self->validityModel_ = validityModel;
}


#line 347
- (id)java_clone {
  
#line 349
  OrgSpongycastleX509ExtendedPKIXParameters *params;
  @try {
    
#line 352
    params = new_OrgSpongycastleX509ExtendedPKIXParameters_initWithJavaUtilSet_([self getTrustAnchors]);
  }
  @catch (JavaLangException *e) {
    
#line 357
    @throw new_JavaLangRuntimeException_initWithNSString_([e getMessage]);
  }
  [((OrgSpongycastleX509ExtendedPKIXParameters *) nil_chk(params)) setParamsWithJavaSecurityCertPKIXParameters:self];
  return params;
}


#line 369
- (jboolean)isAdditionalLocationsEnabled {
  
#line 371
  return additionalLocationsEnabled_;
}


#line 380
- (void)setAdditionalLocationsEnabledWithBoolean:(jboolean)enabled {
  
#line 382
  additionalLocationsEnabled_ = enabled;
}


#line 404
- (id<OrgSpongycastleUtilSelector>)getTargetConstraints {
  
#line 406
  if (selector_ != nil) {
    
#line 408
    return (id<OrgSpongycastleUtilSelector>) cast_check([selector_ clone], OrgSpongycastleUtilSelector_class_());
  }
  else {
    
#line 412
    return nil;
  }
}


#line 435
- (void)setTargetConstraintsWithOrgSpongycastleUtilSelector:(id<OrgSpongycastleUtilSelector>)selector {
  
#line 437
  if (selector != nil) {
    
#line 439
    self->selector_ = (id<OrgSpongycastleUtilSelector>) cast_check([selector clone], OrgSpongycastleUtilSelector_class_());
  }
  else {
    
#line 443
    self->selector_ = nil;
  }
}


#line 464
- (void)setTargetCertConstraintsWithJavaSecurityCertCertSelector:(id<JavaSecurityCertCertSelector>)selector {
  
#line 466
  [super setTargetCertConstraintsWithJavaSecurityCertCertSelector:selector];
  if (selector != nil) {
    
#line 469
    self->selector_ = OrgSpongycastleX509X509CertStoreSelector_getInstanceWithJavaSecurityCertX509CertSelector_(
#line 470
    (JavaSecurityCertX509CertSelector *) cast_chk(selector, [JavaSecurityCertX509CertSelector class]));
  }
  else {
    
#line 474
    self->selector_ = nil;
  }
}


#line 488
- (id<JavaUtilSet>)getTrustedACIssuers {
  
#line 490
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(trustedACIssuers_);
}


#line 507
- (void)setTrustedACIssuersWithJavaUtilSet:(id<JavaUtilSet>)trustedACIssuers {
  
#line 509
  if (trustedACIssuers == nil) {
    
#line 511
    [((id<JavaUtilSet>) nil_chk(self->trustedACIssuers_)) clear];
    return;
  }
  for (id<JavaUtilIterator> it = [trustedACIssuers iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 516
    if (!([[it next] isKindOfClass:[JavaSecurityCertTrustAnchor class]])) {
      
#line 518
      @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("$$C", @"All elements of set must be of type ",
#line 519
      [JavaSecurityCertTrustAnchor_class_() getName], '.'));
    }
  }
  [((id<JavaUtilSet>) nil_chk(self->trustedACIssuers_)) clear];
  [((id<JavaUtilSet>) nil_chk(self->trustedACIssuers_)) addAllWithJavaUtilCollection:trustedACIssuers];
}


#line 535
- (id<JavaUtilSet>)getNecessaryACAttributes {
  
#line 537
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(necessaryACAttributes_);
}


#line 553
- (void)setNecessaryACAttributesWithJavaUtilSet:(id<JavaUtilSet>)necessaryACAttributes {
  
#line 555
  if (necessaryACAttributes == nil) {
    
#line 557
    [((id<JavaUtilSet>) nil_chk(self->necessaryACAttributes_)) clear];
    return;
  }
  for (id<JavaUtilIterator> it = [necessaryACAttributes iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 562
    if (!([[it next] isKindOfClass:[NSString class]])) {
      
#line 564
      @throw new_JavaLangClassCastException_initWithNSString_(@"All elements of set must be of type String.");
    }
  }
  
#line 568
  [((id<JavaUtilSet>) nil_chk(self->necessaryACAttributes_)) clear];
  [((id<JavaUtilSet>) nil_chk(self->necessaryACAttributes_)) addAllWithJavaUtilCollection:necessaryACAttributes];
}


#line 580
- (id<JavaUtilSet>)getProhibitedACAttributes {
  
#line 582
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(prohibitedACAttributes_);
}


#line 598
- (void)setProhibitedACAttributesWithJavaUtilSet:(id<JavaUtilSet>)prohibitedACAttributes {
  
#line 600
  if (prohibitedACAttributes == nil) {
    
#line 602
    [((id<JavaUtilSet>) nil_chk(self->prohibitedACAttributes_)) clear];
    return;
  }
  for (id<JavaUtilIterator> it = [prohibitedACAttributes iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 607
    if (!([[it next] isKindOfClass:[NSString class]])) {
      
#line 609
      @throw new_JavaLangClassCastException_initWithNSString_(@"All elements of set must be of type String.");
    }
  }
  
#line 613
  [((id<JavaUtilSet>) nil_chk(self->prohibitedACAttributes_)) clear];
  [((id<JavaUtilSet>) nil_chk(self->prohibitedACAttributes_)) addAllWithJavaUtilCollection:prohibitedACAttributes];
}


#line 624
- (id<JavaUtilSet>)getAttrCertCheckers {
  
#line 626
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(attrCertCheckers_);
}


#line 641
- (void)setAttrCertCheckersWithJavaUtilSet:(id<JavaUtilSet>)attrCertCheckers {
  
#line 643
  if (attrCertCheckers == nil) {
    
#line 645
    [((id<JavaUtilSet>) nil_chk(self->attrCertCheckers_)) clear];
    return;
  }
  for (id<JavaUtilIterator> it = [attrCertCheckers iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 650
    if (!([[it next] isKindOfClass:[OrgSpongycastleX509PKIXAttrCertChecker class]])) {
      
#line 652
      @throw new_JavaLangClassCastException_initWithNSString_(JreStrcat("$$C", @"All elements of set must be of type ",
#line 653
      [OrgSpongycastleX509PKIXAttrCertChecker_class_() getName], '.'));
    }
  }
  [((id<JavaUtilSet>) nil_chk(self->attrCertCheckers_)) clear];
  [((id<JavaUtilSet>) nil_chk(self->attrCertCheckers_)) addAllWithJavaUtilCollection:attrCertCheckers];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleX509ExtendedPKIXParameters;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleUtilSelector;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilSet:);
  methods[1].selector = @selector(getInstanceWithJavaSecurityCertPKIXParameters:);
  methods[2].selector = @selector(setParamsWithJavaSecurityCertPKIXParameters:);
  methods[3].selector = @selector(isUseDeltasEnabled);
  methods[4].selector = @selector(setUseDeltasEnabledWithBoolean:);
  methods[5].selector = @selector(getValidityModel);
  methods[6].selector = @selector(setCertStoresWithJavaUtilList:);
  methods[7].selector = @selector(setStoresWithJavaUtilList:);
  methods[8].selector = @selector(addStoreWithOrgSpongycastleUtilStore:);
  methods[9].selector = @selector(addAdditionalStoreWithOrgSpongycastleUtilStore:);
  methods[10].selector = @selector(addAddionalStoreWithOrgSpongycastleUtilStore:);
  methods[11].selector = @selector(getAdditionalStores);
  methods[12].selector = @selector(getStores);
  methods[13].selector = @selector(setValidityModelWithInt:);
  methods[14].selector = @selector(java_clone);
  methods[15].selector = @selector(isAdditionalLocationsEnabled);
  methods[16].selector = @selector(setAdditionalLocationsEnabledWithBoolean:);
  methods[17].selector = @selector(getTargetConstraints);
  methods[18].selector = @selector(setTargetConstraintsWithOrgSpongycastleUtilSelector:);
  methods[19].selector = @selector(setTargetCertConstraintsWithJavaSecurityCertCertSelector:);
  methods[20].selector = @selector(getTrustedACIssuers);
  methods[21].selector = @selector(setTrustedACIssuersWithJavaUtilSet:);
  methods[22].selector = @selector(getNecessaryACAttributes);
  methods[23].selector = @selector(setNecessaryACAttributesWithJavaUtilSet:);
  methods[24].selector = @selector(getProhibitedACAttributes);
  methods[25].selector = @selector(setProhibitedACAttributesWithJavaUtilSet:);
  methods[26].selector = @selector(getAttrCertCheckers);
  methods[27].selector = @selector(setAttrCertCheckersWithJavaUtilSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stores_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "selector_", "LOrgSpongycastleUtilSelector;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "additionalLocationsEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "additionalStores_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "trustedACIssuers_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "necessaryACAttributes_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prohibitedACAttributes_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attrCertCheckers_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "PKIX_VALIDITY_MODEL", "I", .constantValue.asInt = OrgSpongycastleX509ExtendedPKIXParameters_PKIX_VALIDITY_MODEL, 0x19, -1, -1, -1, -1 },
    { "CHAIN_VALIDITY_MODEL", "I", .constantValue.asInt = OrgSpongycastleX509ExtendedPKIXParameters_CHAIN_VALIDITY_MODEL, 0x19, -1, -1, -1, -1 },
    { "validityModel_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useDeltas_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilSet;", "LJavaSecurityInvalidAlgorithmParameterException;", "getInstance", "LJavaSecurityCertPKIXParameters;", "setParams", "setUseDeltasEnabled", "Z", "setCertStores", "LJavaUtilList;", "setStores", "addStore", "LOrgSpongycastleUtilStore;", "addAdditionalStore", "addAddionalStore", "setValidityModel", "I", "clone", "setAdditionalLocationsEnabled", "setTargetConstraints", "LOrgSpongycastleUtilSelector;", "setTargetCertConstraints", "LJavaSecurityCertCertSelector;", "setTrustedACIssuers", "setNecessaryACAttributes", "setProhibitedACAttributes", "setAttrCertCheckers" };
  static const J2ObjcClassInfo _OrgSpongycastleX509ExtendedPKIXParameters = { "ExtendedPKIXParameters", "org.spongycastle.x509", ptrTable, methods, fields, 7, 0x1, 28, 12, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleX509ExtendedPKIXParameters;
}

@end


#line 61
void OrgSpongycastleX509ExtendedPKIXParameters_initWithJavaUtilSet_(OrgSpongycastleX509ExtendedPKIXParameters *self, id<JavaUtilSet> trustAnchors) {
  JavaSecurityCertPKIXParameters_initWithJavaUtilSet_(self,
#line 64
  trustAnchors);
  self->validityModel_ = OrgSpongycastleX509ExtendedPKIXParameters_PKIX_VALIDITY_MODEL;
  self->useDeltas_ =
#line 172
  false;
  
#line 65
  self->stores_ = new_JavaUtilArrayList_init();
  self->additionalStores_ = new_JavaUtilArrayList_init();
  self->trustedACIssuers_ = new_JavaUtilHashSet_init();
  self->necessaryACAttributes_ = new_JavaUtilHashSet_init();
  self->prohibitedACAttributes_ = new_JavaUtilHashSet_init();
  self->attrCertCheckers_ = new_JavaUtilHashSet_init();
}


#line 61
OrgSpongycastleX509ExtendedPKIXParameters *new_OrgSpongycastleX509ExtendedPKIXParameters_initWithJavaUtilSet_(id<JavaUtilSet> trustAnchors) {
  J2OBJC_NEW_IMPL(OrgSpongycastleX509ExtendedPKIXParameters, initWithJavaUtilSet_, trustAnchors)
}


#line 61
OrgSpongycastleX509ExtendedPKIXParameters *create_OrgSpongycastleX509ExtendedPKIXParameters_initWithJavaUtilSet_(id<JavaUtilSet> trustAnchors) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleX509ExtendedPKIXParameters, initWithJavaUtilSet_, trustAnchors)
}


#line 80
OrgSpongycastleX509ExtendedPKIXParameters *OrgSpongycastleX509ExtendedPKIXParameters_getInstanceWithJavaSecurityCertPKIXParameters_(JavaSecurityCertPKIXParameters *pkixParams) {
  OrgSpongycastleX509ExtendedPKIXParameters_initialize();
  OrgSpongycastleX509ExtendedPKIXParameters *params;
  @try {
    
#line 85
    params = new_OrgSpongycastleX509ExtendedPKIXParameters_initWithJavaUtilSet_([((JavaSecurityCertPKIXParameters *) nil_chk(pkixParams)) getTrustAnchors]);
  }
  @catch (JavaLangException *e) {
    
#line 90
    @throw new_JavaLangRuntimeException_initWithNSString_([e getMessage]);
  }
  [((OrgSpongycastleX509ExtendedPKIXParameters *) nil_chk(params)) setParamsWithJavaSecurityCertPKIXParameters:pkixParams];
  return params;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleX509ExtendedPKIXParameters)
