//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/crypto/digests/SHA512tDigest.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LongDigest.h"
#include "Memoable.h"
#include "MemoableResetException.h"
#include "Pack.h"
#include "SHA512tDigest.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"

#if !__has_feature(objc_arc)
#error "SHA512tDigest must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleCryptoDigestsSHA512tDigest () {
 @public
  jint digestLength_;
  jlong H1t_;
  jlong H2t_;
  jlong H3t_;
  jlong H4t_;
  jlong H5t_;
  jlong H6t_;
  jlong H7t_;
  jlong H8t_;
}

+ (jint)readDigestLengthWithByteArray:(IOSByteArray *)encodedState;

- (void)tIvGenerateWithInt:(jint)bitLength;

+ (void)longToBigEndianWithLong:(jlong)n
                  withByteArray:(IOSByteArray *)bs
                        withInt:(jint)off
                        withInt:(jint)max;

+ (void)intToBigEndianWithInt:(jint)n
                withByteArray:(IOSByteArray *)bs
                      withInt:(jint)off
                      withInt:(jint)max;

@end

__attribute__((unused)) static jint OrgSpongycastleCryptoDigestsSHA512tDigest_readDigestLengthWithByteArray_(IOSByteArray *encodedState);

__attribute__((unused)) static void OrgSpongycastleCryptoDigestsSHA512tDigest_tIvGenerateWithInt_(OrgSpongycastleCryptoDigestsSHA512tDigest *self, jint bitLength);

__attribute__((unused)) static void OrgSpongycastleCryptoDigestsSHA512tDigest_longToBigEndianWithLong_withByteArray_withInt_withInt_(jlong n, IOSByteArray *bs, jint off, jint max);

__attribute__((unused)) static void OrgSpongycastleCryptoDigestsSHA512tDigest_intToBigEndianWithInt_withByteArray_withInt_withInt_(jint n, IOSByteArray *bs, jint off, jint max);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/crypto/digests/SHA512tDigest.java"


#line 10
@implementation OrgSpongycastleCryptoDigestsSHA512tDigest


#line 20
- (instancetype)initWithInt:(jint)bitLength {
  OrgSpongycastleCryptoDigestsSHA512tDigest_initWithInt_(self, bitLength);
  return self;
}


#line 48
- (instancetype)initWithOrgSpongycastleCryptoDigestsSHA512tDigest:(OrgSpongycastleCryptoDigestsSHA512tDigest *)t {
  OrgSpongycastleCryptoDigestsSHA512tDigest_initWithOrgSpongycastleCryptoDigestsSHA512tDigest_(self, t);
  return self;
}


#line 57
- (instancetype)initWithByteArray:(IOSByteArray *)encodedState {
  OrgSpongycastleCryptoDigestsSHA512tDigest_initWithByteArray_(self, encodedState);
  return self;
}


#line 63
+ (jint)readDigestLengthWithByteArray:(IOSByteArray *)encodedState {
  return OrgSpongycastleCryptoDigestsSHA512tDigest_readDigestLengthWithByteArray_(encodedState);
}


#line 68
- (NSString *)getAlgorithmName {
  
#line 70
  return JreStrcat("$$", @"SHA-512/", JavaLangInteger_toStringWithInt_(digestLength_ * 8));
}


#line 73
- (jint)getDigestSize {
  
#line 75
  return digestLength_;
}


#line 78
- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  
#line 82
  [self finish];
  
#line 84
  OrgSpongycastleCryptoDigestsSHA512tDigest_longToBigEndianWithLong_withByteArray_withInt_withInt_(H1_, outArg, outOff, digestLength_);
  OrgSpongycastleCryptoDigestsSHA512tDigest_longToBigEndianWithLong_withByteArray_withInt_withInt_(H2_, outArg, outOff + 8, digestLength_ - 8);
  OrgSpongycastleCryptoDigestsSHA512tDigest_longToBigEndianWithLong_withByteArray_withInt_withInt_(H3_, outArg, outOff + 16, digestLength_ - 16);
  OrgSpongycastleCryptoDigestsSHA512tDigest_longToBigEndianWithLong_withByteArray_withInt_withInt_(H4_, outArg, outOff + 24, digestLength_ - 24);
  OrgSpongycastleCryptoDigestsSHA512tDigest_longToBigEndianWithLong_withByteArray_withInt_withInt_(H5_, outArg, outOff + 32, digestLength_ - 32);
  OrgSpongycastleCryptoDigestsSHA512tDigest_longToBigEndianWithLong_withByteArray_withInt_withInt_(H6_, outArg, outOff + 40, digestLength_ - 40);
  OrgSpongycastleCryptoDigestsSHA512tDigest_longToBigEndianWithLong_withByteArray_withInt_withInt_(H7_, outArg, outOff + 48, digestLength_ - 48);
  OrgSpongycastleCryptoDigestsSHA512tDigest_longToBigEndianWithLong_withByteArray_withInt_withInt_(H8_, outArg, outOff + 56, digestLength_ - 56);
  
#line 93
  [self reset];
  
#line 95
  return digestLength_;
}

- (void)reset {
  
#line 103
  [super reset];
  
#line 108
  H1_ = H1t_;
  H2_ = H2t_;
  H3_ = H3t_;
  H4_ = H4t_;
  H5_ = H5t_;
  H6_ = H6t_;
  H7_ = H7t_;
  H8_ = H8t_;
}


#line 118
- (void)tIvGenerateWithInt:(jint)bitLength {
  OrgSpongycastleCryptoDigestsSHA512tDigest_tIvGenerateWithInt_(self, bitLength);
}


#line 169
+ (void)longToBigEndianWithLong:(jlong)n
                  withByteArray:(IOSByteArray *)bs
                        withInt:(jint)off
                        withInt:(jint)max {
  OrgSpongycastleCryptoDigestsSHA512tDigest_longToBigEndianWithLong_withByteArray_withInt_withInt_(n, bs, off, max);
}


#line 182
+ (void)intToBigEndianWithInt:(jint)n
                withByteArray:(IOSByteArray *)bs
                      withInt:(jint)off
                      withInt:(jint)max {
  OrgSpongycastleCryptoDigestsSHA512tDigest_intToBigEndianWithInt_withByteArray_withInt_withInt_(n, bs, off, max);
}


#line 192
- (id<OrgSpongycastleUtilMemoable>)copy__ {
  
#line 194
  return new_OrgSpongycastleCryptoDigestsSHA512tDigest_initWithOrgSpongycastleCryptoDigestsSHA512tDigest_(self);
}


#line 197
- (void)resetWithOrgSpongycastleUtilMemoable:(id<OrgSpongycastleUtilMemoable>)other {
  
#line 199
  OrgSpongycastleCryptoDigestsSHA512tDigest *t = (OrgSpongycastleCryptoDigestsSHA512tDigest *) cast_chk(other, [OrgSpongycastleCryptoDigestsSHA512tDigest class]);
  
#line 201
  if (self->digestLength_ != ((OrgSpongycastleCryptoDigestsSHA512tDigest *) nil_chk(t))->digestLength_) {
    
#line 203
    @throw new_OrgSpongycastleUtilMemoableResetException_initWithNSString_(@"digestLength inappropriate in other");
  }
  
#line 206
  [super copyInWithOrgSpongycastleCryptoDigestsLongDigest:t];
  
#line 208
  self->H1t_ = t->H1t_;
  self->H2t_ = t->H2t_;
  self->H3t_ = t->H3t_;
  self->H4t_ = t->H4t_;
  self->H5t_ = t->H5t_;
  self->H6t_ = t->H6t_;
  self->H7t_ = t->H7t_;
  self->H8t_ = t->H8t_;
}


#line 218
- (IOSByteArray *)getEncodedState {
  
#line 220
  jint baseSize = [self getEncodedStateSize];
  IOSByteArray *encoded = [IOSByteArray newArrayWithLength:baseSize + 4];
  [self populateStateWithByteArray:encoded];
  OrgSpongycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(digestLength_ * 8, encoded, baseSize);
  return encoded;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 0, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleUtilMemoable;", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoDigestsSHA512tDigest:);
  methods[2].selector = @selector(initWithByteArray:);
  methods[3].selector = @selector(readDigestLengthWithByteArray:);
  methods[4].selector = @selector(getAlgorithmName);
  methods[5].selector = @selector(getDigestSize);
  methods[6].selector = @selector(doFinalWithByteArray:withInt:);
  methods[7].selector = @selector(reset);
  methods[8].selector = @selector(tIvGenerateWithInt:);
  methods[9].selector = @selector(longToBigEndianWithLong:withByteArray:withInt:withInt:);
  methods[10].selector = @selector(intToBigEndianWithInt:withByteArray:withInt:withInt:);
  methods[11].selector = @selector(copy__);
  methods[12].selector = @selector(resetWithOrgSpongycastleUtilMemoable:);
  methods[13].selector = @selector(getEncodedState);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digestLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "H1t_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "H2t_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "H3t_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "H4t_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "H5t_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "H6t_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "H7t_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "H8t_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LOrgSpongycastleCryptoDigestsSHA512tDigest;", "[B", "readDigestLength", "doFinal", "[BI", "tIvGenerate", "longToBigEndian", "J[BII", "intToBigEndian", "I[BII", "copy", "reset", "LOrgSpongycastleUtilMemoable;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoDigestsSHA512tDigest = { "SHA512tDigest", "org.spongycastle.crypto.digests", ptrTable, methods, fields, 7, 0x1, 14, 9, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoDigestsSHA512tDigest;
}

@end


#line 20
void OrgSpongycastleCryptoDigestsSHA512tDigest_initWithInt_(OrgSpongycastleCryptoDigestsSHA512tDigest *self, jint bitLength) {
  OrgSpongycastleCryptoDigestsLongDigest_init(self);
  if (bitLength >= 512) {
    
#line 24
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"bitLength cannot be >= 512");
  }
  
#line 27
  if (JreIntMod(bitLength, 8) != 0) {
    
#line 29
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"bitLength needs to be a multiple of 8");
  }
  
#line 32
  if (bitLength == 384) {
    
#line 34
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"bitLength cannot be 384 use SHA384 instead");
  }
  
#line 37
  self->digestLength_ = JreIntDiv(bitLength, 8);
  
#line 39
  OrgSpongycastleCryptoDigestsSHA512tDigest_tIvGenerateWithInt_(self, self->digestLength_ * 8);
  
#line 41
  [self reset];
}


#line 20
OrgSpongycastleCryptoDigestsSHA512tDigest *new_OrgSpongycastleCryptoDigestsSHA512tDigest_initWithInt_(jint bitLength) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoDigestsSHA512tDigest, initWithInt_, bitLength)
}


#line 20
OrgSpongycastleCryptoDigestsSHA512tDigest *create_OrgSpongycastleCryptoDigestsSHA512tDigest_initWithInt_(jint bitLength) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoDigestsSHA512tDigest, initWithInt_, bitLength)
}


#line 48
void OrgSpongycastleCryptoDigestsSHA512tDigest_initWithOrgSpongycastleCryptoDigestsSHA512tDigest_(OrgSpongycastleCryptoDigestsSHA512tDigest *self, OrgSpongycastleCryptoDigestsSHA512tDigest *t) {
  OrgSpongycastleCryptoDigestsLongDigest_initWithOrgSpongycastleCryptoDigestsLongDigest_(self,
#line 50
  t);
  
#line 52
  self->digestLength_ = ((OrgSpongycastleCryptoDigestsSHA512tDigest *) nil_chk(t))->digestLength_;
  
#line 54
  [self resetWithOrgSpongycastleUtilMemoable:t];
}


#line 48
OrgSpongycastleCryptoDigestsSHA512tDigest *new_OrgSpongycastleCryptoDigestsSHA512tDigest_initWithOrgSpongycastleCryptoDigestsSHA512tDigest_(OrgSpongycastleCryptoDigestsSHA512tDigest *t) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoDigestsSHA512tDigest, initWithOrgSpongycastleCryptoDigestsSHA512tDigest_, t)
}


#line 48
OrgSpongycastleCryptoDigestsSHA512tDigest *create_OrgSpongycastleCryptoDigestsSHA512tDigest_initWithOrgSpongycastleCryptoDigestsSHA512tDigest_(OrgSpongycastleCryptoDigestsSHA512tDigest *t) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoDigestsSHA512tDigest, initWithOrgSpongycastleCryptoDigestsSHA512tDigest_, t)
}


#line 57
void OrgSpongycastleCryptoDigestsSHA512tDigest_initWithByteArray_(OrgSpongycastleCryptoDigestsSHA512tDigest *self, IOSByteArray *encodedState) {
  OrgSpongycastleCryptoDigestsSHA512tDigest_initWithInt_(self, OrgSpongycastleCryptoDigestsSHA512tDigest_readDigestLengthWithByteArray_(
#line 59
  encodedState));
  [self restoreStateWithByteArray:encodedState];
}


#line 57
OrgSpongycastleCryptoDigestsSHA512tDigest *new_OrgSpongycastleCryptoDigestsSHA512tDigest_initWithByteArray_(IOSByteArray *encodedState) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoDigestsSHA512tDigest, initWithByteArray_, encodedState)
}


#line 57
OrgSpongycastleCryptoDigestsSHA512tDigest *create_OrgSpongycastleCryptoDigestsSHA512tDigest_initWithByteArray_(IOSByteArray *encodedState) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoDigestsSHA512tDigest, initWithByteArray_, encodedState)
}


#line 63
jint OrgSpongycastleCryptoDigestsSHA512tDigest_readDigestLengthWithByteArray_(IOSByteArray *encodedState) {
  OrgSpongycastleCryptoDigestsSHA512tDigest_initialize();
  return OrgSpongycastleUtilPack_bigEndianToIntWithByteArray_withInt_(encodedState, ((IOSByteArray *) nil_chk(encodedState))->size_ - 4);
}


#line 118
void OrgSpongycastleCryptoDigestsSHA512tDigest_tIvGenerateWithInt_(OrgSpongycastleCryptoDigestsSHA512tDigest *self, jint bitLength) {
  
#line 120
  self->H1_ = (jlong) 0x6a09e667f3bcc908LL ^ (jlong) 0xa5a5a5a5a5a5a5a5LL;
  self->H2_ = (jlong) 0xbb67ae8584caa73bLL ^ (jlong) 0xa5a5a5a5a5a5a5a5LL;
  self->H3_ = (jlong) 0x3c6ef372fe94f82bLL ^ (jlong) 0xa5a5a5a5a5a5a5a5LL;
  self->H4_ = (jlong) 0xa54ff53a5f1d36f1LL ^ (jlong) 0xa5a5a5a5a5a5a5a5LL;
  self->H5_ = (jlong) 0x510e527fade682d1LL ^ (jlong) 0xa5a5a5a5a5a5a5a5LL;
  self->H6_ = (jlong) 0x9b05688c2b3e6c1fLL ^ (jlong) 0xa5a5a5a5a5a5a5a5LL;
  self->H7_ = (jlong) 0x1f83d9abfb41bd6bLL ^ (jlong) 0xa5a5a5a5a5a5a5a5LL;
  self->H8_ = (jlong) 0x5be0cd19137e2179LL ^ (jlong) 0xa5a5a5a5a5a5a5a5LL;
  
#line 129
  [self updateWithByte:(jbyte) (jint) 0x53];
  [self updateWithByte:(jbyte) (jint) 0x48];
  [self updateWithByte:(jbyte) (jint) 0x41];
  [self updateWithByte:(jbyte) (jint) 0x2D];
  [self updateWithByte:(jbyte) (jint) 0x35];
  [self updateWithByte:(jbyte) (jint) 0x31];
  [self updateWithByte:(jbyte) (jint) 0x32];
  [self updateWithByte:(jbyte) (jint) 0x2F];
  
#line 138
  if (bitLength > 100) {
    
#line 140
    [self updateWithByte:(jbyte) (JreIntDiv(bitLength, 100) + (jint) 0x30)];
    bitLength = JreIntMod(bitLength, 100);
    [self updateWithByte:(jbyte) (JreIntDiv(bitLength, 10) + (jint) 0x30)];
    bitLength = JreIntMod(bitLength, 10);
    [self updateWithByte:(jbyte) (bitLength + (jint) 0x30)];
  }
  else if (bitLength > 10) {
    
#line 148
    [self updateWithByte:(jbyte) (JreIntDiv(bitLength, 10) + (jint) 0x30)];
    bitLength = JreIntMod(bitLength, 10);
    [self updateWithByte:(jbyte) (bitLength + (jint) 0x30)];
  }
  else {
    
#line 154
    [self updateWithByte:(jbyte) (bitLength + (jint) 0x30)];
  }
  
#line 157
  [self finish];
  
#line 159
  self->H1t_ = self->H1_;
  self->H2t_ = self->H2_;
  self->H3t_ = self->H3_;
  self->H4t_ = self->H4_;
  self->H5t_ = self->H5_;
  self->H6t_ = self->H6_;
  self->H7t_ = self->H7_;
  self->H8t_ = self->H8_;
}


#line 169
void OrgSpongycastleCryptoDigestsSHA512tDigest_longToBigEndianWithLong_withByteArray_withInt_withInt_(jlong n, IOSByteArray *bs, jint off, jint max) {
  OrgSpongycastleCryptoDigestsSHA512tDigest_initialize();
  if (max > 0) {
    
#line 173
    OrgSpongycastleCryptoDigestsSHA512tDigest_intToBigEndianWithInt_withByteArray_withInt_withInt_((jint) (JreURShift64(n, 32)), bs, off, max);
    
#line 175
    if (max > 4) {
      
#line 177
      OrgSpongycastleCryptoDigestsSHA512tDigest_intToBigEndianWithInt_withByteArray_withInt_withInt_((jint) (n & (jlong) 0xffffffffLL), bs, off + 4, max - 4);
    }
  }
}


#line 182
void OrgSpongycastleCryptoDigestsSHA512tDigest_intToBigEndianWithInt_withByteArray_withInt_withInt_(jint n, IOSByteArray *bs, jint off, jint max) {
  OrgSpongycastleCryptoDigestsSHA512tDigest_initialize();
  jint num = JavaLangMath_minWithInt_withInt_(4, max);
  while (--num >= 0) {
    
#line 187
    jint shift = 8 * (3 - num);
    *IOSByteArray_GetRef(nil_chk(bs), off + num) = (jbyte) (JreURShift32(n, shift));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoDigestsSHA512tDigest)
