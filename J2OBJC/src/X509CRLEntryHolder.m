//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/cert/X509CRLEntryHolder.java
//

#include "ASN1Encodable.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "BCTime.h"
#include "CertUtils.h"
#include "Extension.h"
#include "Extensions.h"
#include "GeneralNames.h"
#include "J2ObjC_source.h"
#include "TBSCertList.h"
#include "X509CRLEntryHolder.h"
#include "java/math/BigInteger.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Set.h"

#if !__has_feature(objc_arc)
#error "X509CRLEntryHolder must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleCertX509CRLEntryHolder () {
 @public
  OrgSpongycastleAsn1X509TBSCertList_CRLEntry *entry__;
  OrgSpongycastleAsn1X509GeneralNames *ca_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCertX509CRLEntryHolder, entry__, OrgSpongycastleAsn1X509TBSCertList_CRLEntry *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCertX509CRLEntryHolder, ca_, OrgSpongycastleAsn1X509GeneralNames *)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/cert/X509CRLEntryHolder.java"


#line 17
@implementation OrgSpongycastleCertX509CRLEntryHolder


#line 22
- (instancetype)initWithOrgSpongycastleAsn1X509TBSCertList_CRLEntry:(OrgSpongycastleAsn1X509TBSCertList_CRLEntry *)entry_
                                                        withBoolean:(jboolean)isIndirect
                            withOrgSpongycastleAsn1X509GeneralNames:(OrgSpongycastleAsn1X509GeneralNames *)previousCA {
  OrgSpongycastleCertX509CRLEntryHolder_initWithOrgSpongycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgSpongycastleAsn1X509GeneralNames_(self, entry_, isIndirect, previousCA);
  return self;
}


#line 43
- (JavaMathBigInteger *)getSerialNumber {
  
#line 45
  return [((OrgSpongycastleAsn1ASN1Integer *) nil_chk([((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry__)) getUserCertificate])) getValue];
}


#line 53
- (JavaUtilDate *)getRevocationDate {
  
#line 55
  return [((OrgSpongycastleAsn1X509BCTime *) nil_chk([((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry__)) getRevocationDate])) getDate];
}


#line 63
- (jboolean)hasExtensions {
  
#line 65
  return [((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry__)) hasExtensions];
}


#line 78
- (OrgSpongycastleAsn1X509GeneralNames *)getCertificateIssuer {
  
#line 80
  return self->ca_;
}


#line 90
- (OrgSpongycastleAsn1X509Extension *)getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid {
  
#line 92
  OrgSpongycastleAsn1X509Extensions *extensions = [((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry__)) getExtensions];
  
#line 94
  if (extensions != nil) {
    
#line 96
    return [extensions getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:oid];
  }
  
#line 99
  return nil;
}


#line 107
- (OrgSpongycastleAsn1X509Extensions *)getExtensions {
  
#line 109
  return [((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry__)) getExtensions];
}


#line 118
- (id<JavaUtilList>)getExtensionOIDs {
  
#line 120
  return OrgSpongycastleCertCertUtils_getExtensionOIDsWithOrgSpongycastleAsn1X509Extensions_([((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry__)) getExtensions]);
}


#line 129
- (id<JavaUtilSet>)getCriticalExtensionOIDs {
  
#line 131
  return OrgSpongycastleCertCertUtils_getCriticalExtensionOIDsWithOrgSpongycastleAsn1X509Extensions_([((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry__)) getExtensions]);
}


#line 140
- (id<JavaUtilSet>)getNonCriticalExtensionOIDs {
  
#line 142
  return OrgSpongycastleCertCertUtils_getNonCriticalExtensionOIDsWithOrgSpongycastleAsn1X509Extensions_([((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry__)) getExtensions]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509GeneralNames;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509Extension;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509Extensions;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleAsn1X509TBSCertList_CRLEntry:withBoolean:withOrgSpongycastleAsn1X509GeneralNames:);
  methods[1].selector = @selector(getSerialNumber);
  methods[2].selector = @selector(getRevocationDate);
  methods[3].selector = @selector(hasExtensions);
  methods[4].selector = @selector(getCertificateIssuer);
  methods[5].selector = @selector(getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:);
  methods[6].selector = @selector(getExtensions);
  methods[7].selector = @selector(getExtensionOIDs);
  methods[8].selector = @selector(getCriticalExtensionOIDs);
  methods[9].selector = @selector(getNonCriticalExtensionOIDs);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "entry__", "LOrgSpongycastleAsn1X509TBSCertList_CRLEntry;", .constantValue.asLong = 0, 0x2, 3, -1, -1, -1 },
    { "ca_", "LOrgSpongycastleAsn1X509GeneralNames;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleAsn1X509TBSCertList_CRLEntry;ZLOrgSpongycastleAsn1X509GeneralNames;", "getExtension", "LOrgSpongycastleAsn1ASN1ObjectIdentifier;", "entry" };
  static const J2ObjcClassInfo _OrgSpongycastleCertX509CRLEntryHolder = { "X509CRLEntryHolder", "org.spongycastle.cert", ptrTable, methods, fields, 7, 0x1, 10, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCertX509CRLEntryHolder;
}

@end


#line 22
void OrgSpongycastleCertX509CRLEntryHolder_initWithOrgSpongycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgSpongycastleAsn1X509GeneralNames_(OrgSpongycastleCertX509CRLEntryHolder *self, OrgSpongycastleAsn1X509TBSCertList_CRLEntry *entry_, jboolean isIndirect, OrgSpongycastleAsn1X509GeneralNames *previousCA) {
  NSObject_init(self);
  self->entry__ = entry_;
  self->ca_ = previousCA;
  
#line 27
  if (isIndirect && [((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) hasExtensions]) {
    
#line 29
    OrgSpongycastleAsn1X509Extension *currentCaName = [((OrgSpongycastleAsn1X509Extensions *) nil_chk([((OrgSpongycastleAsn1X509TBSCertList_CRLEntry *) nil_chk(entry_)) getExtensions])) getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgSpongycastleAsn1X509Extension, certificateIssuer)];
    
#line 31
    if (currentCaName != nil) {
      
#line 33
      self->ca_ = OrgSpongycastleAsn1X509GeneralNames_getInstanceWithId_([currentCaName getParsedValue]);
    }
  }
}


#line 22
OrgSpongycastleCertX509CRLEntryHolder *new_OrgSpongycastleCertX509CRLEntryHolder_initWithOrgSpongycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgSpongycastleAsn1X509GeneralNames_(OrgSpongycastleAsn1X509TBSCertList_CRLEntry *entry_, jboolean isIndirect, OrgSpongycastleAsn1X509GeneralNames *previousCA) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCertX509CRLEntryHolder, initWithOrgSpongycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgSpongycastleAsn1X509GeneralNames_, entry_, isIndirect, previousCA)
}


#line 22
OrgSpongycastleCertX509CRLEntryHolder *create_OrgSpongycastleCertX509CRLEntryHolder_initWithOrgSpongycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgSpongycastleAsn1X509GeneralNames_(OrgSpongycastleAsn1X509TBSCertList_CRLEntry *entry_, jboolean isIndirect, OrgSpongycastleAsn1X509GeneralNames *previousCA) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCertX509CRLEntryHolder, initWithOrgSpongycastleAsn1X509TBSCertList_CRLEntry_withBoolean_withOrgSpongycastleAsn1X509GeneralNames_, entry_, isIndirect, previousCA)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCertX509CRLEntryHolder)
