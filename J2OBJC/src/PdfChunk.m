//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PdfChunk.java
//

#include "BaseFont.h"
#include "CJKFont.h"
#include "Chunk.h"
#include "Color.h"
#include "DefaultSplitCharacter.h"
#include "Font.h"
#include "HyphenationEvent.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "Image.h"
#include "J2ObjC_source.h"
#include "PdfAction.h"
#include "PdfChunk.h"
#include "PdfContentByte.h"
#include "PdfFont.h"
#include "PdfObject.h"
#include "SplitCharacter.h"
#include "Utilities.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#if !__has_feature(objc_arc)
#error "PdfChunk must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfPdfChunk () {
 @public
  /*!
   @brief The value of this object.
   */
  NSString *value_;
  /*!
   @brief The encoding.
   */
  NSString *encoding_;
  ComAowagieTextPdfBaseFont *baseFont_;
  id<ComAowagieTextSplitCharacter> splitCharacter_;
  /*!
   @brief Metric attributes.
   <P>
  This attributes require the measurement of characters widths when rendering
  such as underline.
   */
  JavaUtilHashMap *attributes_;
  /*!
   @brief Non metric attributes.
   <P>
  This attributes do not require the measurement of characters widths when rendering
  such as Color.
   */
  JavaUtilHashMap *noStroke_;
  /*!
   @brief <CODE>true</CODE> if the chunk split was cause by a newline.
   */
  jboolean newlineSplit_;
  /*!
   @brief The image in this <CODE>PdfChunk</CODE>, if it has one
   */
  ComAowagieTextImage *image_;
  /*!
   @brief The offset in the x direction for the image
   */
  jfloat offsetX_;
  /*!
   @brief The offset in the y direction for the image
   */
  jfloat offsetY_;
}

- (jint)getWordWithNSString:(NSString *)text
                    withInt:(jint)start;

/*!
 @brief Removes all the <VAR>' '</VAR> and <VAR>'-'</VAR>-characters on the right of a <CODE>String</CODE>.
 @param string the  <CODE> String </CODE>  that has to be trimmed.
 @return the trimmed <CODE>String</CODE>
 */
- (NSString *)trimWithNSString:(NSString *)string;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfChunk, value_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfChunk, encoding_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfChunk, baseFont_, ComAowagieTextPdfBaseFont *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfChunk, splitCharacter_, id<ComAowagieTextSplitCharacter>)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfChunk, attributes_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfChunk, noStroke_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfChunk, image_, ComAowagieTextImage *)

inline IOSCharArray *ComAowagieTextPdfPdfChunk_get_singleSpace(void);
static IOSCharArray *ComAowagieTextPdfPdfChunk_singleSpace;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfChunk, singleSpace, IOSCharArray *)

inline IOSObjectArray *ComAowagieTextPdfPdfChunk_get_thisChunk(void);
static IOSObjectArray *ComAowagieTextPdfPdfChunk_thisChunk;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfChunk, thisChunk, IOSObjectArray *)

inline jfloat ComAowagieTextPdfPdfChunk_get_ITALIC_ANGLE(void);
#define ComAowagieTextPdfPdfChunk_ITALIC_ANGLE 0.21256f
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfChunk, ITALIC_ANGLE, jfloat)

/*!
 @brief The allowed attributes in variable <CODE>attributes</CODE>.
 */
inline JavaUtilHashMap *ComAowagieTextPdfPdfChunk_get_keysAttributes(void);
static JavaUtilHashMap *ComAowagieTextPdfPdfChunk_keysAttributes;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfChunk, keysAttributes, JavaUtilHashMap *)

/*!
 @brief The allowed attributes in variable <CODE>noStroke</CODE>.
 */
inline JavaUtilHashMap *ComAowagieTextPdfPdfChunk_get_keysNoStroke(void);
static JavaUtilHashMap *ComAowagieTextPdfPdfChunk_keysNoStroke;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfChunk, keysNoStroke, JavaUtilHashMap *)

__attribute__((unused)) static jint ComAowagieTextPdfPdfChunk_getWordWithNSString_withInt_(ComAowagieTextPdfPdfChunk *self, NSString *text, jint start);

__attribute__((unused)) static NSString *ComAowagieTextPdfPdfChunk_trimWithNSString_(ComAowagieTextPdfPdfChunk *self, NSString *string);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PdfChunk.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfPdfChunk)


#line 76
@implementation ComAowagieTextPdfPdfChunk


#line 163
- (instancetype)initWithNSString:(NSString *)string
   withComAowagieTextPdfPdfChunk:(ComAowagieTextPdfPdfChunk *)other {
  ComAowagieTextPdfPdfChunk_initWithNSString_withComAowagieTextPdfPdfChunk_(self, string, other);
  return self;
}


#line 193
- (instancetype)initWithComAowagieTextChunk:(ComAowagieTextChunk *)chunk
             withComAowagieTextPdfPdfAction:(ComAowagieTextPdfPdfAction *)action {
  ComAowagieTextPdfPdfChunk_initWithComAowagieTextChunk_withComAowagieTextPdfPdfAction_(self, chunk, action);
  return self;
}


#line 286
- (jint)getUnicodeEquivalentWithInt:(jint)c {
  return [((ComAowagieTextPdfBaseFont *) nil_chk(self->baseFont_)) getUnicodeEquivalentWithInt:c];
}

- (jint)getWordWithNSString:(NSString *)text
                    withInt:(jint)start {
  return ComAowagieTextPdfPdfChunk_getWordWithNSString_withInt_(self, text, start);
}


#line 310
- (ComAowagieTextPdfPdfChunk *)splitWithFloat:(jfloat)width {
  self->newlineSplit_ = false;
  if (self->image_ != nil) {
    if ([self->image_ getScaledWidth] > width) {
      ComAowagieTextPdfPdfChunk *pc = new_ComAowagieTextPdfPdfChunk_initWithNSString_withComAowagieTextPdfPdfChunk_(ComAowagieTextChunk_OBJECT_REPLACEMENT_CHARACTER, self);
      self->value_ = @"";
      self->attributes_ = new_JavaUtilLinkedHashMap_init();
      self->image_ = nil;
      self->font_ = ComAowagieTextPdfPdfFont_getDefaultFont();
      return pc;
    }
    else {
      
#line 321
      return nil;
    }
  }
  id<ComAowagieTextPdfHyphenationEvent> hyphenationEvent = (id<ComAowagieTextPdfHyphenationEvent>) cast_check([((JavaUtilHashMap *) nil_chk(self->noStroke_)) getWithId:ComAowagieTextChunk_HYPHENATION], ComAowagieTextPdfHyphenationEvent_class_());
  jint currentPosition = 0;
  jint splitPosition = -1;
  jfloat currentWidth = 0;
  
#line 331
  jint lastSpace = -1;
  jfloat lastSpaceWidth = 0;
  jint length = [((NSString *) nil_chk(self->value_)) java_length];
  IOSCharArray *valueArray = [((NSString *) nil_chk(self->value_)) java_toCharArray];
  jchar character = 0;
  ComAowagieTextPdfBaseFont *ft = [((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) getFont];
  jboolean surrogate = false;
  if ([((ComAowagieTextPdfBaseFont *) nil_chk(ft)) getFontType] == ComAowagieTextPdfBaseFont_FONT_TYPE_CJK && [ft getUnicodeEquivalentWithInt:' '] != ' ') {
    while (currentPosition < length) {
      
#line 341
      jchar cidChar = IOSCharArray_Get(nil_chk(valueArray), currentPosition);
      character = (jchar) [ft getUnicodeEquivalentWithInt:cidChar];
      
#line 344
      if (character == 0x000a) {
        self->newlineSplit_ = true;
        NSString *returnValue = [((NSString *) nil_chk(self->value_)) java_substring:currentPosition + 1];
        self->value_ = [((NSString *) nil_chk(self->value_)) java_substring:0 endIndex:currentPosition];
        if ([((NSString *) nil_chk(self->value_)) java_length] < 1) {
          self->value_ = @"\x01";
        }
        ComAowagieTextPdfPdfChunk *pc = new_ComAowagieTextPdfPdfChunk_initWithNSString_withComAowagieTextPdfPdfChunk_(returnValue, self);
        return pc;
      }
      JrePlusAssignFloatF(&currentWidth, [((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) widthWithInt:cidChar]);
      if (character == ' ') {
        lastSpace = currentPosition + 1;
        lastSpaceWidth = currentWidth;
      }
      if (currentWidth > width) {
        break;
      }
      
#line 363
      if ([((id<ComAowagieTextSplitCharacter>) nil_chk(self->splitCharacter_)) isSplitCharacterWithInt:0 withInt:currentPosition withInt:length withCharArray:valueArray withComAowagieTextPdfPdfChunkArray:ComAowagieTextPdfPdfChunk_thisChunk]) {
        splitPosition = currentPosition + 1;
      }
      currentPosition++;
    }
  }
  else {
    while (currentPosition < length) {
      
#line 372
      character = IOSCharArray_Get(nil_chk(valueArray), currentPosition);
      
#line 374
      if (character == 0x000d || character == 0x000a) {
        self->newlineSplit_ = true;
        jint inc = 1;
        if (character == 0x000d && currentPosition + 1 < length && IOSCharArray_Get(valueArray, currentPosition + 1) == 0x000a) {
          inc = 2;
        }
        NSString *returnValue = [((NSString *) nil_chk(self->value_)) java_substring:currentPosition + inc];
        self->value_ = [((NSString *) nil_chk(self->value_)) java_substring:0 endIndex:currentPosition];
        if ([((NSString *) nil_chk(self->value_)) java_length] < 1) {
          self->value_ = @" ";
        }
        ComAowagieTextPdfPdfChunk *pc = new_ComAowagieTextPdfPdfChunk_initWithNSString_withComAowagieTextPdfPdfChunk_(returnValue, self);
        return pc;
      }
      surrogate = ComAowagieTextUtilities_isSurrogatePairWithCharArray_withInt_(valueArray, currentPosition);
      if (surrogate) {
        JrePlusAssignFloatF(&currentWidth, [((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) widthWithInt:ComAowagieTextUtilities_convertToUtf32WithChar_withChar_(IOSCharArray_Get(valueArray, currentPosition), IOSCharArray_Get(valueArray, currentPosition + 1))]);
      }
      else {
        
#line 392
        JrePlusAssignFloatF(&currentWidth, [((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) widthWithInt:character]);
      }
      if (character == ' ') {
        lastSpace = currentPosition + 1;
        lastSpaceWidth = currentWidth;
      }
      if (surrogate) {
        currentPosition++;
      }
      if (currentWidth > width) {
        break;
      }
      
#line 405
      if ([((id<ComAowagieTextSplitCharacter>) nil_chk(self->splitCharacter_)) isSplitCharacterWithInt:0 withInt:currentPosition withInt:length withCharArray:valueArray withComAowagieTextPdfPdfChunkArray:nil]) {
        splitPosition = currentPosition + 1;
      }
      currentPosition++;
    }
  }
  
#line 413
  if (currentPosition == length) {
    return nil;
  }
  
#line 417
  if (splitPosition < 0) {
    NSString *returnValue = self->value_;
    self->value_ = @"";
    ComAowagieTextPdfPdfChunk *pc = new_ComAowagieTextPdfPdfChunk_initWithNSString_withComAowagieTextPdfPdfChunk_(returnValue, self);
    return pc;
  }
  if (lastSpace > splitPosition && [((id<ComAowagieTextSplitCharacter>) nil_chk(self->splitCharacter_)) isSplitCharacterWithInt:0 withInt:0 withInt:1 withCharArray:ComAowagieTextPdfPdfChunk_singleSpace withComAowagieTextPdfPdfChunkArray:nil]) {
    splitPosition = lastSpace;
  }
  if (hyphenationEvent != nil && lastSpace >= 0 && lastSpace < currentPosition) {
    jint wordIdx = ComAowagieTextPdfPdfChunk_getWordWithNSString_withInt_(self, self->value_, lastSpace);
    if (wordIdx > lastSpace) {
      NSString *pre = [hyphenationEvent getHyphenatedWordPreWithNSString:[((NSString *) nil_chk(self->value_)) java_substring:lastSpace endIndex:wordIdx] withComAowagieTextPdfBaseFont:[((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) getFont] withFloat:[((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) size] withFloat:width - lastSpaceWidth];
      NSString *post = [hyphenationEvent getHyphenatedWordPost];
      if ([((NSString *) nil_chk(pre)) java_length] > 0) {
        NSString *returnValue = JreStrcat("$$", post, [((NSString *) nil_chk(self->value_)) java_substring:wordIdx]);
        self->value_ = ComAowagieTextPdfPdfChunk_trimWithNSString_(self, JreStrcat("$$", [((NSString *) nil_chk(self->value_)) java_substring:0 endIndex:lastSpace], pre));
        ComAowagieTextPdfPdfChunk *pc = new_ComAowagieTextPdfPdfChunk_initWithNSString_withComAowagieTextPdfPdfChunk_(returnValue, self);
        return pc;
      }
    }
  }
  NSString *returnValue = [((NSString *) nil_chk(self->value_)) java_substring:splitPosition];
  self->value_ = ComAowagieTextPdfPdfChunk_trimWithNSString_(self, [((NSString *) nil_chk(self->value_)) java_substring:0 endIndex:splitPosition]);
  ComAowagieTextPdfPdfChunk *pc = new_ComAowagieTextPdfPdfChunk_initWithNSString_withComAowagieTextPdfPdfChunk_(returnValue, self);
  return pc;
}


#line 454
- (ComAowagieTextPdfPdfChunk *)truncateWithFloat:(jfloat)width {
  if (self->image_ != nil) {
    if ([self->image_ getScaledWidth] > width) {
      ComAowagieTextPdfPdfChunk *pc = new_ComAowagieTextPdfPdfChunk_initWithNSString_withComAowagieTextPdfPdfChunk_(@"", self);
      self->value_ = @"";
      (void) [((JavaUtilHashMap *) nil_chk(self->attributes_)) removeWithId:ComAowagieTextChunk_IMAGE];
      self->image_ = nil;
      self->font_ = ComAowagieTextPdfPdfFont_getDefaultFont();
      return pc;
    }
    else {
      
#line 464
      return nil;
    }
  }
  
#line 468
  jint currentPosition = 0;
  jfloat currentWidth = 0;
  
#line 472
  if (width < [((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) width]) {
    NSString *returnValue = [((NSString *) nil_chk(self->value_)) java_substring:1];
    self->value_ = [((NSString *) nil_chk(self->value_)) java_substring:0 endIndex:1];
    ComAowagieTextPdfPdfChunk *pc = new_ComAowagieTextPdfPdfChunk_initWithNSString_withComAowagieTextPdfPdfChunk_(returnValue, self);
    return pc;
  }
  
#line 481
  jint length = [((NSString *) nil_chk(self->value_)) java_length];
  jboolean surrogate = false;
  jchar character;
  while (currentPosition < length) {
    
#line 486
    surrogate = ComAowagieTextUtilities_isSurrogatePairWithNSString_withInt_(self->value_, currentPosition);
    if (surrogate) {
      JrePlusAssignFloatF(&currentWidth, [((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) widthWithInt:ComAowagieTextUtilities_convertToUtf32WithNSString_withInt_(self->value_, currentPosition)]);
    }
    else {
      
#line 490
      JrePlusAssignFloatF(&currentWidth, [((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) widthWithInt:[((NSString *) nil_chk(self->value_)) charAtWithInt:currentPosition]]);
    }
    if (currentWidth > width) {
      break;
    }
    if (surrogate) {
      currentPosition++;
    }
    currentPosition++;
  }
  
#line 502
  if (currentPosition == length) {
    return nil;
  }
  
#line 509
  if (currentPosition == 0) {
    currentPosition = 1;
    if (surrogate) {
      ++currentPosition;
    }
  }
  NSString *returnValue = [((NSString *) nil_chk(self->value_)) java_substring:currentPosition];
  self->value_ = [((NSString *) nil_chk(self->value_)) java_substring:0 endIndex:currentPosition];
  ComAowagieTextPdfPdfChunk *pc = new_ComAowagieTextPdfPdfChunk_initWithNSString_withComAowagieTextPdfPdfChunk_(returnValue, self);
  return pc;
}


#line 529
- (ComAowagieTextPdfPdfFont *)font {
  return self->font_;
}


#line 539
- (HarmonyJavaAwtColor *)color {
  return (HarmonyJavaAwtColor *) cast_chk([((JavaUtilHashMap *) nil_chk(self->noStroke_)) getWithId:ComAowagieTextChunk_COLOR], [HarmonyJavaAwtColor class]);
}


#line 549
- (jfloat)width {
  return [((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) widthWithNSString:self->value_];
}


#line 558
- (jboolean)isNewlineSplit {
  
#line 560
  return self->newlineSplit_;
}


#line 571
- (jfloat)getWidthCorrectedWithFloat:(jfloat)charSpacing
                           withFloat:(jfloat)wordSpacing {
  if (self->image_ != nil) {
    return [self->image_ getScaledWidth] + charSpacing;
  }
  jint numberOfSpaces = 0;
  jint idx = -1;
  while ((idx = [((NSString *) nil_chk(self->value_)) java_indexOf:' ' fromIndex:idx + 1]) >= 0) {
    ++numberOfSpaces;
  }
  return [self width] + ([((NSString *) nil_chk(self->value_)) java_length] * charSpacing + numberOfSpaces * wordSpacing);
}


#line 588
- (jfloat)getTextRise {
  JavaLangFloat *f = (JavaLangFloat *) cast_chk([self getAttributeWithNSString:ComAowagieTextChunk_SUBSUPSCRIPT], [JavaLangFloat class]);
  if (f != nil) {
    return [f floatValue];
  }
  return 0.0f;
}


#line 601
- (jfloat)trimLastSpace {
  
#line 603
  ComAowagieTextPdfBaseFont *ft = [((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) getFont];
  if ([((ComAowagieTextPdfBaseFont *) nil_chk(ft)) getFontType] == ComAowagieTextPdfBaseFont_FONT_TYPE_CJK && [ft getUnicodeEquivalentWithInt:' '] != ' ') {
    if ([((NSString *) nil_chk(self->value_)) java_length] > 1 && [((NSString *) nil_chk(self->value_)) java_hasSuffix:@"\x01"]) {
      self->value_ = [((NSString *) nil_chk(self->value_)) java_substring:0 endIndex:[self->value_ java_length] - 1];
      return [((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) widthWithInt:0x0001];
    }
  }
  else {
    if ([((NSString *) nil_chk(self->value_)) java_length] > 1 && [((NSString *) nil_chk(self->value_)) java_hasSuffix:@" "]) {
      self->value_ = [((NSString *) nil_chk(self->value_)) java_substring:0 endIndex:[self->value_ java_length] - 1];
      return [((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) widthWithInt:' '];
    }
  }
  return 0;
}


#line 627
- (id)getAttributeWithNSString:(NSString *)name {
  
#line 629
  if ([((JavaUtilHashMap *) nil_chk(self->attributes_)) containsKeyWithId:name]) {
    return [((JavaUtilHashMap *) nil_chk(self->attributes_)) getWithId:name];
  }
  return [((JavaUtilHashMap *) nil_chk(self->noStroke_)) getWithId:name];
}


#line 641
- (jboolean)isAttributeWithNSString:(NSString *)name {
  
#line 643
  if ([((JavaUtilHashMap *) nil_chk(self->attributes_)) containsKeyWithId:name]) {
    return true;
  }
  return [((JavaUtilHashMap *) nil_chk(self->noStroke_)) containsKeyWithId:name];
}


#line 654
- (jboolean)isStroked {
  
#line 656
  return ![((JavaUtilHashMap *) nil_chk(self->attributes_)) isEmpty];
}


#line 664
- (jboolean)isSeparator {
  return [self isAttributeWithNSString:ComAowagieTextChunk_SEPARATOR];
}


#line 673
- (jboolean)isHorizontalSeparator {
  if ([self isAttributeWithNSString:ComAowagieTextChunk_SEPARATOR]) {
    IOSObjectArray *o = (IOSObjectArray *) cast_check([self getAttributeWithNSString:ComAowagieTextChunk_SEPARATOR], IOSClass_arrayType(NSObject_class_(), 1));
    return ![((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk(IOSObjectArray_Get(nil_chk(o), 1), [JavaLangBoolean class])))) booleanValue];
  }
  return false;
}


#line 686
- (jboolean)isTab {
  return [self isAttributeWithNSString:ComAowagieTextChunk_TAB];
}


#line 695
- (void)adjustLeftWithFloat:(jfloat)newValue {
  IOSObjectArray *o = (IOSObjectArray *) cast_check([((JavaUtilHashMap *) nil_chk(self->attributes_)) getWithId:ComAowagieTextChunk_TAB], IOSClass_arrayType(NSObject_class_(), 1));
  if (o != nil) {
    (void) [((JavaUtilHashMap *) nil_chk(self->attributes_)) putWithId:ComAowagieTextChunk_TAB withId:[IOSObjectArray newArrayWithObjects:(id[]){ IOSObjectArray_Get(o, 0), IOSObjectArray_Get(o, 1), IOSObjectArray_Get(o, 2), create_JavaLangFloat_initWithFloat_(newValue) } count:4 type:NSObject_class_()]];
  }
}


#line 707
- (jboolean)isImage {
  
#line 709
  return self->image_ != nil;
}


#line 717
- (ComAowagieTextImage *)getImage {
  
#line 719
  return self->image_;
}


#line 729
- (jfloat)getImageOffsetX {
  
#line 731
  return self->offsetX_;
}


#line 741
- (jfloat)getImageOffsetY {
  
#line 743
  return self->offsetY_;
}


#line 751
- (void)setValueWithNSString:(NSString *)value {
  
#line 753
  self->value_ = value;
}


#line 759
- (NSString *)description {
  
#line 761
  return self->value_;
}


#line 769
- (jboolean)isSpecialEncoding {
  return [((NSString *) nil_chk(self->encoding_)) isEqual:ComAowagieTextPdfCJKFont_CJK_ENCODING] || [((NSString *) nil_chk(self->encoding_)) isEqual:ComAowagieTextPdfBaseFont_IDENTITY_H];
}


#line 775
- (jint)length {
  return [((NSString *) nil_chk(self->value_)) java_length];
}

- (jint)lengthUtf32 {
  if (![((NSString *) nil_chk(ComAowagieTextPdfBaseFont_IDENTITY_H)) isEqual:self->encoding_]) {
    return [((NSString *) nil_chk(self->value_)) java_length];
  }
  jint total = 0;
  jint len = [((NSString *) nil_chk(self->value_)) java_length];
  for (jint k = 0; k < len; ++k) {
    if (ComAowagieTextUtilities_isSurrogateHighWithChar_([((NSString *) nil_chk(self->value_)) charAtWithInt:k])) {
      ++k;
    }
    ++total;
  }
  return total;
}

- (jboolean)isExtSplitCharacterWithInt:(jint)start
                               withInt:(jint)current
                               withInt:(jint)end
                         withCharArray:(IOSCharArray *)cc
    withComAowagieTextPdfPdfChunkArray:(IOSObjectArray *)ck {
  
#line 795
  return [((id<ComAowagieTextSplitCharacter>) nil_chk(self->splitCharacter_)) isSplitCharacterWithInt:start withInt:current withInt:end withCharArray:cc withComAowagieTextPdfPdfChunkArray:ck];
}


#line 803
- (NSString *)trimWithNSString:(NSString *)string {
  return ComAowagieTextPdfPdfChunk_trimWithNSString_(self, string);
}


#line 820
- (jfloat)getCharWidthWithInt:(jint)c {
  if (ComAowagieTextPdfPdfChunk_noPrintWithInt_(c)) {
    return 0;
  }
  return [((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) widthWithInt:c];
}

+ (jboolean)noPrintWithInt:(jint)c {
  return ComAowagieTextPdfPdfChunk_noPrintWithInt_(c);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfChunk;", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfChunk;", 0x0, 8, 7, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfFont;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtColor;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 13, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 14, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextImage;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 19, 12, -1, -1, -1, -1 },
    { NULL, "F", 0x0, 20, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 21, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withComAowagieTextPdfPdfChunk:);
  methods[1].selector = @selector(initWithComAowagieTextChunk:withComAowagieTextPdfPdfAction:);
  methods[2].selector = @selector(getUnicodeEquivalentWithInt:);
  methods[3].selector = @selector(getWordWithNSString:withInt:);
  methods[4].selector = @selector(splitWithFloat:);
  methods[5].selector = @selector(truncateWithFloat:);
  methods[6].selector = @selector(font);
  methods[7].selector = @selector(color);
  methods[8].selector = @selector(width);
  methods[9].selector = @selector(isNewlineSplit);
  methods[10].selector = @selector(getWidthCorrectedWithFloat:withFloat:);
  methods[11].selector = @selector(getTextRise);
  methods[12].selector = @selector(trimLastSpace);
  methods[13].selector = @selector(getAttributeWithNSString:);
  methods[14].selector = @selector(isAttributeWithNSString:);
  methods[15].selector = @selector(isStroked);
  methods[16].selector = @selector(isSeparator);
  methods[17].selector = @selector(isHorizontalSeparator);
  methods[18].selector = @selector(isTab);
  methods[19].selector = @selector(adjustLeftWithFloat:);
  methods[20].selector = @selector(isImage);
  methods[21].selector = @selector(getImage);
  methods[22].selector = @selector(getImageOffsetX);
  methods[23].selector = @selector(getImageOffsetY);
  methods[24].selector = @selector(setValueWithNSString:);
  methods[25].selector = @selector(description);
  methods[26].selector = @selector(isSpecialEncoding);
  methods[27].selector = @selector(length);
  methods[28].selector = @selector(lengthUtf32);
  methods[29].selector = @selector(isExtSplitCharacterWithInt:withInt:withInt:withCharArray:withComAowagieTextPdfPdfChunkArray:);
  methods[30].selector = @selector(trimWithNSString:);
  methods[31].selector = @selector(getCharWidthWithInt:);
  methods[32].selector = @selector(noPrintWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "singleSpace", "[C", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "thisChunk", "[LComAowagieTextPdfPdfChunk;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "ITALIC_ANGLE", "F", .constantValue.asFloat = ComAowagieTextPdfPdfChunk_ITALIC_ANGLE, 0x1a, -1, -1, -1, -1 },
    { "keysAttributes", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "keysNoStroke", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encoding_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "font_", "LComAowagieTextPdfPdfFont;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "baseFont_", "LComAowagieTextPdfBaseFont;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "splitCharacter_", "LComAowagieTextSplitCharacter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attributes_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "noStroke_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "newlineSplit_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "image_", "LComAowagieTextImage;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "offsetX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "offsetY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "changeLeading_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LComAowagieTextPdfPdfChunk;", "LComAowagieTextChunk;LComAowagieTextPdfPdfAction;", "getUnicodeEquivalent", "I", "getWord", "LNSString;I", "split", "F", "truncate", "getWidthCorrected", "FF", "getAttribute", "LNSString;", "isAttribute", "adjustLeft", "setValue", "toString", "isExtSplitCharacter", "III[C[LComAowagieTextPdfPdfChunk;", "trim", "getCharWidth", "noPrint", &ComAowagieTextPdfPdfChunk_singleSpace, &ComAowagieTextPdfPdfChunk_thisChunk, &ComAowagieTextPdfPdfChunk_keysAttributes, &ComAowagieTextPdfPdfChunk_keysNoStroke };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfChunk = { "PdfChunk", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x1, 33, 17, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfChunk;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfPdfChunk class]) {
    ComAowagieTextPdfPdfChunk_singleSpace = [IOSCharArray newArrayWithChars:(jchar[]){
#line 78
      ' ' } count:1];
      ComAowagieTextPdfPdfChunk_thisChunk = [IOSObjectArray newArrayWithLength:
#line 79
      1 type:ComAowagieTextPdfPdfChunk_class_()];
      ComAowagieTextPdfPdfChunk_keysAttributes = new_JavaUtilLinkedHashMap_init();
      ComAowagieTextPdfPdfChunk_keysNoStroke = new_JavaUtilLinkedHashMap_init();
      {
        
#line 88
        (void) [ComAowagieTextPdfPdfChunk_keysAttributes putWithId:ComAowagieTextChunk_ACTION withId:nil];
        (void) [ComAowagieTextPdfPdfChunk_keysAttributes putWithId:ComAowagieTextChunk_UNDERLINE withId:nil];
        (void) [ComAowagieTextPdfPdfChunk_keysAttributes putWithId:ComAowagieTextChunk_REMOTEGOTO withId:nil];
        (void) [ComAowagieTextPdfPdfChunk_keysAttributes putWithId:ComAowagieTextChunk_LOCALGOTO withId:nil];
        (void) [ComAowagieTextPdfPdfChunk_keysAttributes putWithId:ComAowagieTextChunk_LOCALDESTINATION withId:nil];
        (void) [ComAowagieTextPdfPdfChunk_keysAttributes putWithId:ComAowagieTextChunk_GENERICTAG withId:nil];
        (void) [ComAowagieTextPdfPdfChunk_keysAttributes putWithId:ComAowagieTextChunk_NEWPAGE withId:nil];
        (void) [ComAowagieTextPdfPdfChunk_keysAttributes putWithId:ComAowagieTextChunk_IMAGE withId:nil];
        (void) [ComAowagieTextPdfPdfChunk_keysAttributes putWithId:ComAowagieTextChunk_BACKGROUND withId:nil];
        (void) [ComAowagieTextPdfPdfChunk_keysAttributes putWithId:ComAowagieTextChunk_PDFANNOTATION withId:nil];
        (void) [ComAowagieTextPdfPdfChunk_keysAttributes putWithId:ComAowagieTextChunk_SKEW withId:nil];
        (void) [ComAowagieTextPdfPdfChunk_keysAttributes putWithId:ComAowagieTextChunk_HSCALE withId:nil];
        (void) [ComAowagieTextPdfPdfChunk_keysAttributes putWithId:ComAowagieTextChunk_SEPARATOR withId:nil];
        (void) [ComAowagieTextPdfPdfChunk_keysAttributes putWithId:ComAowagieTextChunk_TAB withId:nil];
        (void) [ComAowagieTextPdfPdfChunk_keysNoStroke putWithId:ComAowagieTextChunk_SUBSUPSCRIPT withId:nil];
        (void) [ComAowagieTextPdfPdfChunk_keysNoStroke putWithId:ComAowagieTextChunk_SPLITCHARACTER withId:nil];
        (void) [ComAowagieTextPdfPdfChunk_keysNoStroke putWithId:ComAowagieTextChunk_HYPHENATION withId:nil];
        (void) [ComAowagieTextPdfPdfChunk_keysNoStroke putWithId:ComAowagieTextChunk_TEXTRENDERMODE withId:nil];
      }
      J2OBJC_SET_INITIALIZED(ComAowagieTextPdfPdfChunk)
    }
  }

@end


#line 163
void ComAowagieTextPdfPdfChunk_initWithNSString_withComAowagieTextPdfPdfChunk_(ComAowagieTextPdfPdfChunk *self, NSString *string, ComAowagieTextPdfPdfChunk *other) {
  NSObject_init(self);
  self->value_ =
#line 111
  ComAowagieTextPdfPdfObject_NOTHING;
  self->encoding_ =
#line 114
  ComAowagieTextPdfBaseFont_WINANSI;
  self->attributes_ = new_JavaUtilLinkedHashMap_init();
  self->noStroke_ = new_JavaUtilLinkedHashMap_init();
  self->changeLeading_ =
#line 152
  false;
  
#line 164
  (void) IOSObjectArray_Set(nil_chk(ComAowagieTextPdfPdfChunk_thisChunk), 0, self);
  self->value_ = string;
  self->font_ = ((ComAowagieTextPdfPdfChunk *) nil_chk(other))->font_;
  self->attributes_ = other->attributes_;
  self->noStroke_ = other->noStroke_;
  self->baseFont_ = other->baseFont_;
  IOSObjectArray *obj = (IOSObjectArray *) cast_check([((JavaUtilHashMap *) nil_chk(self->attributes_)) getWithId:ComAowagieTextChunk_IMAGE], IOSClass_arrayType(NSObject_class_(), 1));
  if (obj == nil) {
    self->image_ = nil;
  }
  else {
    
#line 174
    self->image_ = (ComAowagieTextImage *) cast_chk(IOSObjectArray_Get(obj, 0), [ComAowagieTextImage class]);
    self->offsetX_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(obj, 1), [JavaLangFloat class])))) floatValue];
    self->offsetY_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(obj, 2), [JavaLangFloat class])))) floatValue];
    self->changeLeading_ = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk(IOSObjectArray_Get(obj, 3), [JavaLangBoolean class])))) booleanValue];
  }
  self->encoding_ = [((ComAowagieTextPdfBaseFont *) nil_chk([((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) getFont])) getEncoding];
  self->splitCharacter_ = (id<ComAowagieTextSplitCharacter>) cast_check([((JavaUtilHashMap *) nil_chk(self->noStroke_)) getWithId:ComAowagieTextChunk_SPLITCHARACTER], ComAowagieTextSplitCharacter_class_());
  if (self->splitCharacter_ == nil) {
    self->splitCharacter_ = JreLoadStatic(ComAowagieTextPdfDefaultSplitCharacter, DEFAULT);
  }
}


#line 163
ComAowagieTextPdfPdfChunk *new_ComAowagieTextPdfPdfChunk_initWithNSString_withComAowagieTextPdfPdfChunk_(NSString *string, ComAowagieTextPdfPdfChunk *other) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfChunk, initWithNSString_withComAowagieTextPdfPdfChunk_, string, other)
}


#line 163
ComAowagieTextPdfPdfChunk *create_ComAowagieTextPdfPdfChunk_initWithNSString_withComAowagieTextPdfPdfChunk_(NSString *string, ComAowagieTextPdfPdfChunk *other) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfChunk, initWithNSString_withComAowagieTextPdfPdfChunk_, string, other)
}


#line 193
void ComAowagieTextPdfPdfChunk_initWithComAowagieTextChunk_withComAowagieTextPdfPdfAction_(ComAowagieTextPdfPdfChunk *self, ComAowagieTextChunk *chunk, ComAowagieTextPdfPdfAction *action) {
  NSObject_init(self);
  self->value_ =
#line 111
  ComAowagieTextPdfPdfObject_NOTHING;
  self->encoding_ =
#line 114
  ComAowagieTextPdfBaseFont_WINANSI;
  self->attributes_ = new_JavaUtilLinkedHashMap_init();
  self->noStroke_ = new_JavaUtilLinkedHashMap_init();
  self->changeLeading_ =
#line 152
  false;
  
#line 194
  (void) IOSObjectArray_Set(nil_chk(ComAowagieTextPdfPdfChunk_thisChunk), 0, self);
  self->value_ = [((ComAowagieTextChunk *) nil_chk(chunk)) getContent];
  
#line 197
  ComAowagieTextFont *f = [chunk getFont];
  jfloat size = [((ComAowagieTextFont *) nil_chk(f)) getSize];
  if (size == ComAowagieTextFont_UNDEFINED) {
    size = 12;
  }
  self->baseFont_ = [f getBaseFont];
  jint style = [f getStyle];
  if (style == ComAowagieTextFont_UNDEFINED) {
    style = ComAowagieTextFont_NORMAL;
  }
  if (self->baseFont_ == nil) {
    
#line 209
    self->baseFont_ = [f getCalculatedBaseFontWithBoolean:false];
  }
  else {
    
#line 213
    if ((style & ComAowagieTextFont_BOLD) != 0) {
      (void) [((JavaUtilHashMap *) nil_chk(self->attributes_)) putWithId:ComAowagieTextChunk_TEXTRENDERMODE withId:[IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangInteger_initWithInt_(ComAowagieTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL_STROKE), create_JavaLangFloat_initWithFloat_(size / 30.0f), nil } count:3 type:NSObject_class_()]];
    }
    
#line 217
    if ((style & ComAowagieTextFont_ITALIC) != 0) {
      (void) [((JavaUtilHashMap *) nil_chk(self->attributes_)) putWithId:ComAowagieTextChunk_SKEW withId:[IOSFloatArray newArrayWithFloats:(jfloat[]){ 0, ComAowagieTextPdfPdfChunk_ITALIC_ANGLE } count:2]];
    }
  }
  self->font_ = new_ComAowagieTextPdfPdfFont_initPackagePrivateWithComAowagieTextPdfBaseFont_withFloat_(self->baseFont_, size);
  
#line 223
  JavaUtilHashMap *attr = [chunk getAttributes];
  if (attr != nil) {
    for (id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk([attr entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
      id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check([i next], JavaUtilMap_Entry_class_());
      id name = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
      if ([((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfPdfChunk_keysAttributes)) containsKeyWithId:name]) {
        (void) [((JavaUtilHashMap *) nil_chk(self->attributes_)) putWithId:name withId:[entry_ getValue]];
      }
      else if ([((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfPdfChunk_keysNoStroke)) containsKeyWithId:name]) {
        (void) [((JavaUtilHashMap *) nil_chk(self->noStroke_)) putWithId:name withId:[entry_ getValue]];
      }
    }
    if ([@"" isEqual:[attr getWithId:ComAowagieTextChunk_GENERICTAG]]) {
      (void) [((JavaUtilHashMap *) nil_chk(self->attributes_)) putWithId:ComAowagieTextChunk_GENERICTAG withId:[chunk getContent]];
    }
  }
  if ([f isUnderlined]) {
    IOSObjectArray *obj = [IOSObjectArray newArrayWithObjects:(id[]){ nil, [IOSFloatArray newArrayWithFloats:(jfloat[]){ 0, 1.0f / 15, 0, -1.0f / 3, 0 } count:5] } count:2 type:NSObject_class_()];
    IOSObjectArray *unders = ComAowagieTextUtilities_addToArrayWithNSObjectArray2_withNSObjectArray_((IOSObjectArray *) cast_check([((JavaUtilHashMap *) nil_chk(self->attributes_)) getWithId:ComAowagieTextChunk_UNDERLINE], IOSClass_arrayType(NSObject_class_(), 2)), obj);
    (void) [((JavaUtilHashMap *) nil_chk(self->attributes_)) putWithId:ComAowagieTextChunk_UNDERLINE withId:unders];
  }
  if ([f isStrikethru]) {
    IOSObjectArray *obj = [IOSObjectArray newArrayWithObjects:(id[]){ nil, [IOSFloatArray newArrayWithFloats:(jfloat[]){ 0, 1.0f / 15, 0, 1.0f / 3, 0 } count:5] } count:2 type:NSObject_class_()];
    IOSObjectArray *unders = ComAowagieTextUtilities_addToArrayWithNSObjectArray2_withNSObjectArray_((IOSObjectArray *) cast_check([((JavaUtilHashMap *) nil_chk(self->attributes_)) getWithId:ComAowagieTextChunk_UNDERLINE], IOSClass_arrayType(NSObject_class_(), 2)), obj);
    (void) [((JavaUtilHashMap *) nil_chk(self->attributes_)) putWithId:ComAowagieTextChunk_UNDERLINE withId:unders];
  }
  if (action != nil) {
    (void) [((JavaUtilHashMap *) nil_chk(self->attributes_)) putWithId:ComAowagieTextChunk_ACTION withId:action];
  }
  
#line 253
  (void) [((JavaUtilHashMap *) nil_chk(self->noStroke_)) putWithId:ComAowagieTextChunk_COLOR withId:[f getColor]];
  (void) [((JavaUtilHashMap *) nil_chk(self->noStroke_)) putWithId:ComAowagieTextChunk_ENCODING withId:[((ComAowagieTextPdfBaseFont *) nil_chk([((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) getFont])) getEncoding]];
  IOSObjectArray *obj = (IOSObjectArray *) cast_check([((JavaUtilHashMap *) nil_chk(self->attributes_)) getWithId:ComAowagieTextChunk_IMAGE], IOSClass_arrayType(NSObject_class_(), 1));
  if (obj == nil) {
    self->image_ = nil;
  }
  else {
    (void) [((JavaUtilHashMap *) nil_chk(self->attributes_)) removeWithId:ComAowagieTextChunk_HSCALE];
    self->image_ = (ComAowagieTextImage *) cast_chk(IOSObjectArray_Get(obj, 0), [ComAowagieTextImage class]);
    self->offsetX_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(obj, 1), [JavaLangFloat class])))) floatValue];
    self->offsetY_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(obj, 2), [JavaLangFloat class])))) floatValue];
    self->changeLeading_ = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk(IOSObjectArray_Get(obj, 3), [JavaLangBoolean class])))) booleanValue];
  }
  [((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) setImageWithComAowagieTextImage:self->image_];
  JavaLangFloat *hs = (JavaLangFloat *) cast_chk([((JavaUtilHashMap *) nil_chk(self->attributes_)) getWithId:ComAowagieTextChunk_HSCALE], [JavaLangFloat class]);
  if (hs != nil) {
    [((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) setHorizontalScalingWithFloat:[hs floatValue]];
  }
  self->encoding_ = [((ComAowagieTextPdfBaseFont *) nil_chk([((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) getFont])) getEncoding];
  self->splitCharacter_ = (id<ComAowagieTextSplitCharacter>) cast_check([((JavaUtilHashMap *) nil_chk(self->noStroke_)) getWithId:ComAowagieTextChunk_SPLITCHARACTER], ComAowagieTextSplitCharacter_class_());
  if (self->splitCharacter_ == nil) {
    self->splitCharacter_ = JreLoadStatic(ComAowagieTextPdfDefaultSplitCharacter, DEFAULT);
  }
}


#line 193
ComAowagieTextPdfPdfChunk *new_ComAowagieTextPdfPdfChunk_initWithComAowagieTextChunk_withComAowagieTextPdfPdfAction_(ComAowagieTextChunk *chunk, ComAowagieTextPdfPdfAction *action) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfChunk, initWithComAowagieTextChunk_withComAowagieTextPdfPdfAction_, chunk, action)
}


#line 193
ComAowagieTextPdfPdfChunk *create_ComAowagieTextPdfPdfChunk_initWithComAowagieTextChunk_withComAowagieTextPdfPdfAction_(ComAowagieTextChunk *chunk, ComAowagieTextPdfPdfAction *action) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfChunk, initWithComAowagieTextChunk_withComAowagieTextPdfPdfAction_, chunk, action)
}


#line 290
jint ComAowagieTextPdfPdfChunk_getWordWithNSString_withInt_(ComAowagieTextPdfPdfChunk *self, NSString *text, jint start) {
  jint len = [((NSString *) nil_chk(text)) java_length];
  while (start < len) {
    if (!JavaLangCharacter_isLetterWithChar_([text charAtWithInt:start])) {
      break;
    }
    ++start;
  }
  return start;
}


#line 803
NSString *ComAowagieTextPdfPdfChunk_trimWithNSString_(ComAowagieTextPdfPdfChunk *self, NSString *string) {
  ComAowagieTextPdfBaseFont *ft = [((ComAowagieTextPdfPdfFont *) nil_chk(self->font_)) getFont];
  if ([((ComAowagieTextPdfBaseFont *) nil_chk(ft)) getFontType] == ComAowagieTextPdfBaseFont_FONT_TYPE_CJK && [ft getUnicodeEquivalentWithInt:' '] != ' ') {
    while ([((NSString *) nil_chk(string)) java_hasSuffix:@"\x01"]) {
      string = [string java_substring:0 endIndex:[string java_length] - 1];
    }
  }
  else {
    while ([((NSString *) nil_chk(string)) java_hasSuffix:@" "] || [string java_hasSuffix:@"\t"]) {
      string = [string java_substring:0 endIndex:[string java_length] - 1];
    }
  }
  return string;
}


#line 827
jboolean ComAowagieTextPdfPdfChunk_noPrintWithInt_(jint c) {
  ComAowagieTextPdfPdfChunk_initialize();
  
#line 828
  return (c >= (jint) 0x200b && c <= (jint) 0x200f) || (c >= (jint) 0x202a && c <= (jint) 0x202e);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfChunk)
