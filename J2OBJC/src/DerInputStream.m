//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/signers/der/DerInputStream.java
//

#include "BitArray.h"
#include "DerIndefLenConverter.h"
#include "DerInputBuffer.h"
#include "DerInputStream.h"
#include "DerValue.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ObjectIdentifier.h"
#include "java/io/DataInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/util/Vector.h"

#if !__has_feature(objc_arc)
#error "DerInputStream must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreSignersDerDerInputStream ()

- (void)init__WithByteArray:(IOSByteArray *)data
                    withInt:(jint)offset
                    withInt:(jint)len
                withBoolean:(jboolean)allowBER OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Private helper routine to read an encoded string from the input
  stream.
 @param stringTag the tag for the type of string to read
 @param stringName a name to display in error messages
 @param enc the encoder to use to interpret the data. Should  correspond to the stringTag above.
 @throw IOExceptionWhen no it possible load data.
 */
- (NSString *)readStringWithByte:(jbyte)stringTag
                    withNSString:(NSString *)stringName
                    withNSString:(NSString *)enc;

@end

__attribute__((unused)) static void EsGobAfirmaCoreSignersDerDerInputStream_init__WithByteArray_withInt_withInt_withBoolean_(EsGobAfirmaCoreSignersDerDerInputStream *self, IOSByteArray *data, jint offset, jint len, jboolean allowBER);

__attribute__((unused)) static NSString *EsGobAfirmaCoreSignersDerDerInputStream_readStringWithByte_withNSString_withNSString_(EsGobAfirmaCoreSignersDerDerInputStream *self, jbyte stringTag, NSString *stringName, NSString *enc);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/signers/der/DerInputStream.java"


#line 57
@implementation EsGobAfirmaCoreSignersDerDerInputStream


#line 78
- (instancetype)initWithByteArray:(IOSByteArray *)data {
  EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_(self, data);
  return self;
}


#line 97
- (instancetype)initWithByteArray:(IOSByteArray *)data
                          withInt:(jint)offset
                          withInt:(jint)len
                      withBoolean:(jboolean)allowBER {
  EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_withInt_withInt_withBoolean_(self, data, offset, len, allowBER);
  return self;
}


#line 114
- (instancetype)initWithByteArray:(IOSByteArray *)data
                          withInt:(jint)offset
                          withInt:(jint)len {
  EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_withInt_withInt_(self, data, offset, len);
  return self;
}

- (void)init__WithByteArray:(IOSByteArray *)data
                    withInt:(jint)offset
                    withInt:(jint)len
                withBoolean:(jboolean)allowBER {
  EsGobAfirmaCoreSignersDerDerInputStream_init__WithByteArray_withInt_withInt_withBoolean_(self, data, offset, len, allowBER);
}


#line 142
- (instancetype)initWithEsGobAfirmaCoreSignersDerDerInputBuffer:(EsGobAfirmaCoreSignersDerDerInputBuffer *)buf {
  EsGobAfirmaCoreSignersDerDerInputStream_initWithEsGobAfirmaCoreSignersDerDerInputBuffer_(self, buf);
  return self;
}


#line 159
- (EsGobAfirmaCoreSignersDerDerInputStream *)subStreamWithInt:(jint)len
                                                  withBoolean:(jboolean)do_skip {
  EsGobAfirmaCoreSignersDerDerInputBuffer *newbuf = [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) dup];
  
#line 163
  [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(newbuf)) truncateWithInt:len];
  if (do_skip) {
    [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) skipWithLong:len];
  }
  return new_EsGobAfirmaCoreSignersDerDerInputStream_initWithEsGobAfirmaCoreSignersDerDerInputBuffer_(newbuf);
}


#line 175
- (IOSByteArray *)toByteArray {
  return [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) toByteArray];
}


#line 195
- (jint)getInteger {
  if ([((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) read] != EsGobAfirmaCoreSignersDerDerValue_tag_Integer) {
    @throw new_JavaIoIOException_initWithNSString_(@"DER input, Integer tag error");
  }
  return [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) getIntegerWithInt:EsGobAfirmaCoreSignersDerDerInputStream_getLengthWithJavaIoInputStream_(self->buffer_)];
}


#line 208
- (JavaMathBigInteger *)getBigInteger {
  if ([((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) read] != EsGobAfirmaCoreSignersDerDerValue_tag_Integer) {
    @throw new_JavaIoIOException_initWithNSString_(@"DER input, Integer tag error");
  }
  return [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) getBigIntegerWithInt:EsGobAfirmaCoreSignersDerDerInputStream_getLengthWithJavaIoInputStream_(self->buffer_) withBoolean:false];
}


#line 223
- (JavaMathBigInteger *)getPositiveBigInteger {
  if ([((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) read] != EsGobAfirmaCoreSignersDerDerValue_tag_Integer) {
    @throw new_JavaIoIOException_initWithNSString_(@"DER input, Integer tag error");
  }
  return [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) getBigIntegerWithInt:EsGobAfirmaCoreSignersDerDerInputStream_getLengthWithJavaIoInputStream_(self->buffer_) withBoolean:true];
}


#line 236
- (jint)getEnumerated {
  if ([((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) read] != EsGobAfirmaCoreSignersDerDerValue_tag_Enumerated) {
    @throw new_JavaIoIOException_initWithNSString_(@"DER input, Enumerated tag error");
  }
  return [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) getIntegerWithInt:EsGobAfirmaCoreSignersDerDerInputStream_getLengthWithJavaIoInputStream_(self->buffer_)];
}


#line 249
- (IOSByteArray *)getBitString {
  if ([((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) read] != EsGobAfirmaCoreSignersDerDerValue_tag_BitString) {
    @throw new_JavaIoIOException_initWithNSString_(@"DER input not an bit string");
  }
  
#line 254
  return [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) getBitStringWithInt:EsGobAfirmaCoreSignersDerDerInputStream_getLengthWithJavaIoInputStream_(self->buffer_)];
}


#line 263
- (EsGobAfirmaCoreSignersDerBitArray *)getUnalignedBitString {
  if ([((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) read] != EsGobAfirmaCoreSignersDerDerValue_tag_BitString) {
    @throw new_JavaIoIOException_initWithNSString_(@"DER input not a bit string");
  }
  
#line 268
  jint length = EsGobAfirmaCoreSignersDerDerInputStream_getLengthWithJavaIoInputStream_(self->buffer_) - 1;
  
#line 274
  jint excessBits = [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) read];
  if (excessBits < 0) {
    @throw new_JavaIoIOException_initWithNSString_(@"Unused bits of bit string invalid");
  }
  jint validBits = length * 8 - excessBits;
  if (validBits < 0) {
    @throw new_JavaIoIOException_initWithNSString_(@"Valid bits of bit string invalid");
  }
  
#line 283
  IOSByteArray *repn = [IOSByteArray newArrayWithLength:length];
  
#line 285
  if (length != 0 && [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) readWithByteArray:repn] != length) {
    @throw new_JavaIoIOException_initWithNSString_(@"Short read of DER bit string");
  }
  
#line 289
  return new_EsGobAfirmaCoreSignersDerBitArray_initWithInt_withByteArray_(validBits, repn);
}


#line 297
- (IOSByteArray *)getOctetString {
  if ([((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) read] != EsGobAfirmaCoreSignersDerDerValue_tag_OctetString) {
    @throw new_JavaIoIOException_initWithNSString_(@"DER input not an octet string");
  }
  
#line 302
  jint length = EsGobAfirmaCoreSignersDerDerInputStream_getLengthWithJavaIoInputStream_(self->buffer_);
  IOSByteArray *retval = [IOSByteArray newArrayWithLength:length];
  if (length != 0 && [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) readWithByteArray:retval] != length) {
    @throw new_JavaIoIOException_initWithNSString_(@"Short read of DER octet string");
  }
  
#line 308
  return retval;
}


#line 316
- (void)getBytesWithByteArray:(IOSByteArray *)val {
  if (((IOSByteArray *) nil_chk(val))->size_ != 0 && [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) readWithByteArray:val] != val->size_) {
    @throw new_JavaIoIOException_initWithNSString_(@"Short read of DER octet string");
  }
}


#line 326
- (void)getNull {
  if ([((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) read] != EsGobAfirmaCoreSignersDerDerValue_tag_Null || [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) read] != 0) {
    @throw new_JavaIoIOException_initWithNSString_(@"getNull, bad data");
  }
}


#line 337
- (EsGobAfirmaCoreSignersDerObjectIdentifier *)getOID {
  return new_EsGobAfirmaCoreSignersDerObjectIdentifier_initWithEsGobAfirmaCoreSignersDerDerInputStream_(self);
}


#line 352
- (IOSObjectArray *)getSequenceWithInt:(jint)startLen {
  self->tag_ = (jbyte) [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) read];
  if (self->tag_ != EsGobAfirmaCoreSignersDerDerValue_tag_Sequence) {
    @throw new_JavaIoIOException_initWithNSString_(@"Sequence tag error");
  }
  return [self readVectorWithInt:startLen];
}


#line 371
- (IOSObjectArray *)getSetWithInt:(jint)startLen {
  self->tag_ = (jbyte) [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) read];
  if (self->tag_ != EsGobAfirmaCoreSignersDerDerValue_tag_Set) {
    @throw new_JavaIoIOException_initWithNSString_(@"Set tag error");
  }
  return [self readVectorWithInt:startLen];
}


#line 391
- (IOSObjectArray *)getSetWithInt:(jint)startLen
                      withBoolean:(jboolean)implicit {
  self->tag_ = (jbyte) [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) read];
  if (!implicit) {
    if (self->tag_ != EsGobAfirmaCoreSignersDerDerValue_tag_Set) {
      @throw new_JavaIoIOException_initWithNSString_(@"Set tag error");
    }
  }
  return [self readVectorWithInt:startLen];
}


#line 407
- (IOSObjectArray *)readVectorWithInt:(jint)startLen {
  EsGobAfirmaCoreSignersDerDerInputStream *newstr;
  
#line 410
  jbyte lenByte = (jbyte) [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) read];
  jint len = EsGobAfirmaCoreSignersDerDerInputStream_getLengthWithInt_withJavaIoInputStream_(lenByte, self->buffer_);
  
#line 413
  if (len == -1) {
    
#line 415
    jint readLen = [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) available];
    jint offset = 2;
    IOSByteArray *indefData = [IOSByteArray newArrayWithLength:readLen + offset];
    *IOSByteArray_GetRef(indefData, 0) = self->tag_;
    *IOSByteArray_GetRef(indefData, 1) = lenByte;
    JavaIoDataInputStream *dis = new_JavaIoDataInputStream_initWithJavaIoInputStream_(self->buffer_);
    [dis readFullyWithByteArray:indefData withInt:offset withInt:readLen];
    [dis close];
    EsGobAfirmaCoreSignersDerDerIndefLenConverter *derIn = new_EsGobAfirmaCoreSignersDerDerIndefLenConverter_initPackagePrivate();
    self->buffer_ = new_EsGobAfirmaCoreSignersDerDerInputBuffer_initPackagePrivateWithByteArray_withBoolean_([derIn convertWithByteArray:indefData], ((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_))->allowBER_);
    
#line 426
    if (self->tag_ != [self->buffer_ read]) {
      @throw new_JavaIoIOException_initWithNSString_(@"Indefinite length encoding not supported");
    }
    
#line 430
    len = EsGobAfirmaCoreSignersDerDerInputStream_getLengthWithJavaIoInputStream_(self->buffer_);
  }
  
#line 433
  if (len == 0) {
    
#line 436
    return [IOSObjectArray newArrayWithLength:0 type:EsGobAfirmaCoreSignersDerDerValue_class_()];
  }
  
#line 443
  if ([((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) available] == len) {
    newstr = self;
  }
  else {
    
#line 446
    newstr = [self subStreamWithInt:len withBoolean:true];
  }
  
#line 452
  JavaUtilVector *vec = new_JavaUtilVector_initWithInt_(startLen);
  EsGobAfirmaCoreSignersDerDerValue *value;
  
#line 455
  do {
    value = new_EsGobAfirmaCoreSignersDerDerValue_initWithJavaIoInputStream_withBoolean_(((EsGobAfirmaCoreSignersDerDerInputStream *) nil_chk(newstr))->buffer_, ((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_))->allowBER_);
    [vec addElementWithId:value];
  }
  while (
#line 458
  [newstr available] > 0);
  
#line 460
  if ([newstr available] != 0) {
    @throw new_JavaIoIOException_initWithNSString_(@"Extra data at end of vector");
  }
  
#line 467
  jint i;
  jint max = [vec size];
  IOSObjectArray *retval = [IOSObjectArray newArrayWithLength:max type:EsGobAfirmaCoreSignersDerDerValue_class_()];
  
#line 471
  for (i = 0; i < max; i++) {
    (void) IOSObjectArray_Set(retval, i, [vec elementAtWithInt:i]);
  }
  
#line 475
  return retval;
}

- (EsGobAfirmaCoreSignersDerDerValue *)getDerValue {
  return new_EsGobAfirmaCoreSignersDerDerValue_initWithEsGobAfirmaCoreSignersDerDerInputBuffer_(self->buffer_);
}


#line 496
- (NSString *)getUTF8String {
  return EsGobAfirmaCoreSignersDerDerInputStream_readStringWithByte_withNSString_withNSString_(self, EsGobAfirmaCoreSignersDerDerValue_tag_UTF8String, @"UTF-8", @"UTF8");
}


#line 505
- (NSString *)getPrintableString {
  return EsGobAfirmaCoreSignersDerDerInputStream_readStringWithByte_withNSString_withNSString_(self, EsGobAfirmaCoreSignersDerDerValue_tag_PrintableString, @"Printable",
#line 507
  @"ASCII");
}


#line 515
- (NSString *)getT61String {
  
#line 519
  return EsGobAfirmaCoreSignersDerDerInputStream_readStringWithByte_withNSString_withNSString_(self, EsGobAfirmaCoreSignersDerDerValue_tag_T61String, @"T61", @"ISO-8859-1");
}


#line 527
- (NSString *)getIA5String {
  return EsGobAfirmaCoreSignersDerDerInputStream_readStringWithByte_withNSString_withNSString_(self, EsGobAfirmaCoreSignersDerDerValue_tag_IA5String, @"IA5", @"ASCII");
}


#line 536
- (NSString *)getBMPString {
  return EsGobAfirmaCoreSignersDerDerInputStream_readStringWithByte_withNSString_withNSString_(self, EsGobAfirmaCoreSignersDerDerValue_tag_BMPString, @"BMP",
#line 538
  @"UnicodeBigUnmarked");
}


#line 546
- (NSString *)getGeneralString {
  return EsGobAfirmaCoreSignersDerDerInputStream_readStringWithByte_withNSString_withNSString_(self, EsGobAfirmaCoreSignersDerDerValue_tag_GeneralString, @"General",
#line 548
  @"ASCII");
}


#line 560
- (NSString *)readStringWithByte:(jbyte)stringTag
                    withNSString:(NSString *)stringName
                    withNSString:(NSString *)enc {
  return EsGobAfirmaCoreSignersDerDerInputStream_readStringWithByte_withNSString_withNSString_(self, stringTag, stringName, enc);
}


#line 602
- (jint)getByte {
  return (jint) 0x00ff & [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) read];
}

- (jint)peekByte {
  return [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) peek];
}


#line 611
- (jint)getLength {
  return EsGobAfirmaCoreSignersDerDerInputStream_getLengthWithJavaIoInputStream_(self->buffer_);
}


#line 622
+ (jint)getLengthWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return EsGobAfirmaCoreSignersDerDerInputStream_getLengthWithJavaIoInputStream_(inArg);
}


#line 633
+ (jint)getLengthWithInt:(jint)lenByte
   withJavaIoInputStream:(JavaIoInputStream *)inArg {
  return EsGobAfirmaCoreSignersDerDerInputStream_getLengthWithInt_withJavaIoInputStream_(lenByte, inArg);
}


#line 682
- (void)markWithInt:(jint)value {
  
#line 682
  [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) markWithInt:value];
}


#line 690
- (void)reset {
  
#line 690
  [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) reset];
}


#line 699
- (jint)available {
  
#line 699
  return [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) available];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 2, 1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersDerDerInputStream;", 0x1, 6, 7, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersDerBitArray;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersDerObjectIdentifier;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[LEsGobAfirmaCoreSignersDerDerValue;", 0x1, 9, 10, 1, -1, -1, -1 },
    { NULL, "[LEsGobAfirmaCoreSignersDerDerValue;", 0x1, 11, 10, 1, -1, -1, -1 },
    { NULL, "[LEsGobAfirmaCoreSignersDerDerValue;", 0x1, 11, 7, 1, -1, -1, -1 },
    { NULL, "[LEsGobAfirmaCoreSignersDerDerValue;", 0x4, 12, 10, 1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersDerDerValue;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 13, 14, 1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x8, 15, 16, 1, -1, -1, -1 },
    { NULL, "I", 0x8, 15, 17, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(initWithByteArray:withInt:withInt:withBoolean:);
  methods[2].selector = @selector(initWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(init__WithByteArray:withInt:withInt:withBoolean:);
  methods[4].selector = @selector(initWithEsGobAfirmaCoreSignersDerDerInputBuffer:);
  methods[5].selector = @selector(subStreamWithInt:withBoolean:);
  methods[6].selector = @selector(toByteArray);
  methods[7].selector = @selector(getInteger);
  methods[8].selector = @selector(getBigInteger);
  methods[9].selector = @selector(getPositiveBigInteger);
  methods[10].selector = @selector(getEnumerated);
  methods[11].selector = @selector(getBitString);
  methods[12].selector = @selector(getUnalignedBitString);
  methods[13].selector = @selector(getOctetString);
  methods[14].selector = @selector(getBytesWithByteArray:);
  methods[15].selector = @selector(getNull);
  methods[16].selector = @selector(getOID);
  methods[17].selector = @selector(getSequenceWithInt:);
  methods[18].selector = @selector(getSetWithInt:);
  methods[19].selector = @selector(getSetWithInt:withBoolean:);
  methods[20].selector = @selector(readVectorWithInt:);
  methods[21].selector = @selector(getDerValue);
  methods[22].selector = @selector(getUTF8String);
  methods[23].selector = @selector(getPrintableString);
  methods[24].selector = @selector(getT61String);
  methods[25].selector = @selector(getIA5String);
  methods[26].selector = @selector(getBMPString);
  methods[27].selector = @selector(getGeneralString);
  methods[28].selector = @selector(readStringWithByte:withNSString:withNSString:);
  methods[29].selector = @selector(getByte);
  methods[30].selector = @selector(peekByte);
  methods[31].selector = @selector(getLength);
  methods[32].selector = @selector(getLengthWithJavaIoInputStream:);
  methods[33].selector = @selector(getLengthWithInt:withJavaIoInputStream:);
  methods[34].selector = @selector(markWithInt:);
  methods[35].selector = @selector(reset);
  methods[36].selector = @selector(available);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "buffer_", "LEsGobAfirmaCoreSignersDerDerInputBuffer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tag_", "B", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "LJavaIoIOException;", "[BIIZ", "[BII", "init", "LEsGobAfirmaCoreSignersDerDerInputBuffer;", "subStream", "IZ", "getBytes", "getSequence", "I", "getSet", "readVector", "readString", "BLNSString;LNSString;", "getLength", "LJavaIoInputStream;", "ILJavaIoInputStream;", "mark" };
  static const J2ObjcClassInfo _EsGobAfirmaCoreSignersDerDerInputStream = { "DerInputStream", "es.gob.afirma.core.signers.der", ptrTable, methods, fields, 7, 0x1, 37, 2, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreSignersDerDerInputStream;
}

@end


#line 78
void EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_(EsGobAfirmaCoreSignersDerDerInputStream *self, IOSByteArray *data) {
  NSObject_init(self);
  
#line 79
  EsGobAfirmaCoreSignersDerDerInputStream_init__WithByteArray_withInt_withInt_withBoolean_(self, data, 0, ((IOSByteArray *) nil_chk(data))->size_, true);
}


#line 78
EsGobAfirmaCoreSignersDerDerInputStream *new_EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_(IOSByteArray *data) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersDerDerInputStream, initWithByteArray_, data)
}


#line 78
EsGobAfirmaCoreSignersDerDerInputStream *create_EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_(IOSByteArray *data) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersDerDerInputStream, initWithByteArray_, data)
}


#line 97
void EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_withInt_withInt_withBoolean_(EsGobAfirmaCoreSignersDerDerInputStream *self, IOSByteArray *data, jint offset, jint len, jboolean allowBER) {
  NSObject_init(self);
  EsGobAfirmaCoreSignersDerDerInputStream_init__WithByteArray_withInt_withInt_withBoolean_(self, data, offset, len, allowBER);
}


#line 97
EsGobAfirmaCoreSignersDerDerInputStream *new_EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_withInt_withInt_withBoolean_(IOSByteArray *data, jint offset, jint len, jboolean allowBER) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersDerDerInputStream, initWithByteArray_withInt_withInt_withBoolean_, data, offset, len, allowBER)
}


#line 97
EsGobAfirmaCoreSignersDerDerInputStream *create_EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_withInt_withInt_withBoolean_(IOSByteArray *data, jint offset, jint len, jboolean allowBER) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersDerDerInputStream, initWithByteArray_withInt_withInt_withBoolean_, data, offset, len, allowBER)
}


#line 114
void EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_withInt_withInt_(EsGobAfirmaCoreSignersDerDerInputStream *self, IOSByteArray *data, jint offset, jint len) {
  NSObject_init(self);
  
#line 115
  EsGobAfirmaCoreSignersDerDerInputStream_init__WithByteArray_withInt_withInt_withBoolean_(self, data, offset, len, true);
}


#line 114
EsGobAfirmaCoreSignersDerDerInputStream *new_EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_withInt_withInt_(IOSByteArray *data, jint offset, jint len) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersDerDerInputStream, initWithByteArray_withInt_withInt_, data, offset, len)
}


#line 114
EsGobAfirmaCoreSignersDerDerInputStream *create_EsGobAfirmaCoreSignersDerDerInputStream_initWithByteArray_withInt_withInt_(IOSByteArray *data, jint offset, jint len) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersDerDerInputStream, initWithByteArray_withInt_withInt_, data, offset, len)
}


#line 121
void EsGobAfirmaCoreSignersDerDerInputStream_init__WithByteArray_withInt_withInt_withBoolean_(EsGobAfirmaCoreSignersDerDerInputStream *self, IOSByteArray *data, jint offset, jint len, jboolean allowBER) {
  if (offset + 2 > ((IOSByteArray *) nil_chk(data))->size_ || offset + len > data->size_) {
    @throw new_JavaIoIOException_initWithNSString_(@"Encoding bytes too short");
  }
  
#line 126
  if (EsGobAfirmaCoreSignersDerDerIndefLenConverter_isIndefiniteWithInt_(IOSByteArray_Get(data, offset + 1))) {
    if (!allowBER) {
      @throw new_JavaIoIOException_initWithNSString_(@"Indefinite length BER encoding found");
    }
    else {
      
#line 130
      IOSByteArray *inData = [IOSByteArray newArrayWithLength:len];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, offset, inData, 0, len);
      
#line 133
      EsGobAfirmaCoreSignersDerDerIndefLenConverter *derIn = new_EsGobAfirmaCoreSignersDerDerIndefLenConverter_initPackagePrivate();
      self->buffer_ = new_EsGobAfirmaCoreSignersDerDerInputBuffer_initPackagePrivateWithByteArray_withBoolean_([derIn convertWithByteArray:inData], allowBER);
    }
  }
  else {
    
#line 137
    self->buffer_ = new_EsGobAfirmaCoreSignersDerDerInputBuffer_initPackagePrivateWithByteArray_withInt_withInt_withBoolean_(data, offset, len, allowBER);
  }
  [self->buffer_ markWithInt:JavaLangInteger_MAX_VALUE];
}


#line 142
void EsGobAfirmaCoreSignersDerDerInputStream_initWithEsGobAfirmaCoreSignersDerDerInputBuffer_(EsGobAfirmaCoreSignersDerDerInputStream *self, EsGobAfirmaCoreSignersDerDerInputBuffer *buf) {
  NSObject_init(self);
  
#line 143
  self->buffer_ = buf;
  [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) markWithInt:JavaLangInteger_MAX_VALUE];
}


#line 142
EsGobAfirmaCoreSignersDerDerInputStream *new_EsGobAfirmaCoreSignersDerDerInputStream_initWithEsGobAfirmaCoreSignersDerDerInputBuffer_(EsGobAfirmaCoreSignersDerDerInputBuffer *buf) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersDerDerInputStream, initWithEsGobAfirmaCoreSignersDerDerInputBuffer_, buf)
}


#line 142
EsGobAfirmaCoreSignersDerDerInputStream *create_EsGobAfirmaCoreSignersDerDerInputStream_initWithEsGobAfirmaCoreSignersDerDerInputBuffer_(EsGobAfirmaCoreSignersDerDerInputBuffer *buf) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersDerDerInputStream, initWithEsGobAfirmaCoreSignersDerDerInputBuffer_, buf)
}


#line 560
NSString *EsGobAfirmaCoreSignersDerDerInputStream_readStringWithByte_withNSString_withNSString_(EsGobAfirmaCoreSignersDerDerInputStream *self, jbyte stringTag, NSString *stringName, NSString *enc) {
  
#line 563
  if ([((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) read] != stringTag) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"DER input not a ",
#line 565
    stringName, @" string"));
  }
  
#line 568
  jint length = EsGobAfirmaCoreSignersDerDerInputStream_getLengthWithJavaIoInputStream_(self->buffer_);
  IOSByteArray *retval = [IOSByteArray newArrayWithLength:length];
  if (length != 0 && [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(self->buffer_)) readWithByteArray:retval] != length) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"Short read of DER ",
#line 572
    stringName, @" string"));
  }
  
#line 575
  return [NSString java_stringWithBytes:retval charsetName:enc];
}


#line 622
jint EsGobAfirmaCoreSignersDerDerInputStream_getLengthWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  EsGobAfirmaCoreSignersDerDerInputStream_initialize();
  
#line 623
  return EsGobAfirmaCoreSignersDerDerInputStream_getLengthWithInt_withJavaIoInputStream_([((JavaIoInputStream *) nil_chk(inArg)) read], inArg);
}


#line 633
jint EsGobAfirmaCoreSignersDerDerInputStream_getLengthWithInt_withJavaIoInputStream_(jint lenByte, JavaIoInputStream *inArg) {
  EsGobAfirmaCoreSignersDerDerInputStream_initialize();
  
#line 634
  jint value;
  
#line 634
  jint tmp;
  if (lenByte == -1) {
    @throw new_JavaIoIOException_initWithNSString_(@"Short read of DER length");
  }
  
#line 639
  NSString *mdName = @"DerInputStream.getLength(): ";
  tmp = lenByte;
  if ((tmp & (jint) 0x080) == (jint) 0x00) {
    value = tmp;
  }
  else {
    
#line 644
    tmp &= (jint) 0x07f;
    
#line 650
    if (tmp == 0) {
      return -1;
    }
    if (tmp < 0 || tmp > 4) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$I$$", mdName, @"lengthTag=", tmp, @", ",
#line 655
      (tmp < 0 ? @"incorrect DER encoding." : @"too big.")));
    }
    
#line 658
    value = (jint) 0x0ff & [((JavaIoInputStream *) nil_chk(inArg)) read];
    tmp--;
    if (value == 0) {
      
#line 662
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", mdName, @"Redundant length bytes found"));
    }
    while (tmp-- > 0) {
      JreLShiftAssignInt(&value, 8);
      value += (jint) 0x0ff & [inArg read];
    }
    if (value < 0) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", mdName, @"Invalid length bytes"));
    }
    else
#line 670
    if (value <= 127) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", mdName, @"Should use short form for length"));
    }
  }
  return value;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreSignersDerDerInputStream)
