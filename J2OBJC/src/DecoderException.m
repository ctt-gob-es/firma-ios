//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/util/encoders/DecoderException.java
//

#include "DecoderException.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Throwable.h"

#if !__has_feature(objc_arc)
#error "DecoderException must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleUtilEncodersDecoderException () {
 @public
  JavaLangThrowable *cause_DecoderException_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleUtilEncodersDecoderException, cause_DecoderException_, JavaLangThrowable *)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/util/encoders/DecoderException.java"


#line 6
@implementation OrgSpongycastleUtilEncodersDecoderException


#line 11
- (instancetype)initWithNSString:(NSString *)msg
           withJavaLangThrowable:(JavaLangThrowable *)cause {
  OrgSpongycastleUtilEncodersDecoderException_initWithNSString_withJavaLangThrowable_(self, msg, cause);
  return self;
}


#line 18
- (JavaLangThrowable *)getCause {
  
#line 20
  return cause_DecoderException_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withJavaLangThrowable:);
  methods[1].selector = @selector(getCause);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cause_DecoderException_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x2, 1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaLangThrowable;", "cause" };
  static const J2ObjcClassInfo _OrgSpongycastleUtilEncodersDecoderException = { "DecoderException", "org.spongycastle.util.encoders", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleUtilEncodersDecoderException;
}

@end


#line 11
void OrgSpongycastleUtilEncodersDecoderException_initWithNSString_withJavaLangThrowable_(OrgSpongycastleUtilEncodersDecoderException *self, NSString *msg, JavaLangThrowable *cause) {
  JavaLangIllegalStateException_initWithNSString_(self,
#line 13
  msg);
  
#line 15
  self->cause_DecoderException_ = cause;
}


#line 11
OrgSpongycastleUtilEncodersDecoderException *new_OrgSpongycastleUtilEncodersDecoderException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause) {
  J2OBJC_NEW_IMPL(OrgSpongycastleUtilEncodersDecoderException, initWithNSString_withJavaLangThrowable_, msg, cause)
}


#line 11
OrgSpongycastleUtilEncodersDecoderException *create_OrgSpongycastleUtilEncodersDecoderException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleUtilEncodersDecoderException, initWithNSString_withJavaLangThrowable_, msg, cause)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleUtilEncodersDecoderException)
