//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/geom/Rectangle2D.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "harmony/java/awt/geom/AffineTransform.h"
#include "harmony/java/awt/geom/Line2D.h"
#include "harmony/java/awt/geom/PathIterator.h"
#include "harmony/java/awt/geom/Point2D.h"
#include "harmony/java/awt/geom/Rectangle2D.h"
#include "harmony/java/awt/geom/RectangularShape.h"
#include "java/lang/Math.h"
#include "java/util/NoSuchElementException.h"
#include "org/apache/harmony/awt/internal/nls/Messages.h"
#include "org/apache/harmony/misc/HashCode.h"

#if !__has_feature(objc_arc)
#error "harmony/java/awt/geom/Rectangle2D must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/geom/Rectangle2D.java"


#line 27
@implementation HarmonyJavaAwtGeomRectangle2D

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 410
- (instancetype)init {
  HarmonyJavaAwtGeomRectangle2D_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 413
- (void)setRectWithDouble:(jdouble)x
               withDouble:(jdouble)y
               withDouble:(jdouble)width
               withDouble:(jdouble)height {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 415
- (jint)outcodeWithDouble:(jdouble)x
               withDouble:(jdouble)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 417
- (HarmonyJavaAwtGeomRectangle2D *)createIntersectionWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)r {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 419
- (HarmonyJavaAwtGeomRectangle2D *)createUnionWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)r {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 421
- (void)setRectWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)r {
  [self setRectWithDouble:[((HarmonyJavaAwtGeomRectangle2D *) nil_chk(r)) getX] withDouble:[r getY] withDouble:[r getWidth] withDouble:[r getHeight]];
}

- (void)setFrameWithDouble:(jdouble)x
                withDouble:(jdouble)y
                withDouble:(jdouble)width
                withDouble:(jdouble)height {
  
#line 427
  [self setRectWithDouble:x withDouble:y withDouble:width withDouble:height];
}


#line 430
- (HarmonyJavaAwtGeomRectangle2D *)getBounds2D {
  return (HarmonyJavaAwtGeomRectangle2D *) cast_chk([self java_clone], [HarmonyJavaAwtGeomRectangle2D class]);
}

- (jboolean)intersectsLineWithDouble:(jdouble)x1
                          withDouble:(jdouble)y1
                          withDouble:(jdouble)x2
                          withDouble:(jdouble)y2 {
  
#line 435
  jdouble rx1 = [self getX];
  jdouble ry1 = [self getY];
  jdouble rx2 = rx1 + [self getWidth];
  jdouble ry2 = ry1 + [self getHeight];
  return (rx1 <= x1 && x1 <= rx2 && ry1 <= y1 && y1 <= ry2) || (rx1 <= x2 && x2 <= rx2 && ry1 <= y2 && y2 <= ry2) || HarmonyJavaAwtGeomLine2D_linesIntersectWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(
#line 440
  rx1, ry1, rx2, ry2, x1, y1, x2, y2) || HarmonyJavaAwtGeomLine2D_linesIntersectWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(
#line 441
  rx2, ry1, rx1, ry2, x1, y1, x2, y2);
}


#line 444
- (jboolean)intersectsLineWithHarmonyJavaAwtGeomLine2D:(HarmonyJavaAwtGeomLine2D *)l {
  return [self intersectsLineWithDouble:[((HarmonyJavaAwtGeomLine2D *) nil_chk(l)) getX1] withDouble:[l getY1] withDouble:[l getX2] withDouble:[l getY2]];
}

- (jint)outcodeWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)p {
  return [self outcodeWithDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(p)) getX] withDouble:[p getY]];
}

- (jboolean)containsWithDouble:(jdouble)x
                    withDouble:(jdouble)y {
  
#line 453
  if ([self isEmpty]) {
    return false;
  }
  
#line 457
  jdouble x1 = [self getX];
  jdouble y1 = [self getY];
  jdouble x2 = x1 + [self getWidth];
  jdouble y2 = y1 + [self getHeight];
  
#line 462
  return x1 <= x && x < x2 && y1 <= y && y < y2;
}


#line 465
- (jboolean)intersectsWithDouble:(jdouble)x
                      withDouble:(jdouble)y
                      withDouble:(jdouble)width
                      withDouble:(jdouble)height {
  
#line 466
  if ([self isEmpty] || width <= 0.0 || height <= 0.0) {
    return false;
  }
  
#line 470
  jdouble x1 = [self getX];
  jdouble y1 = [self getY];
  jdouble x2 = x1 + [self getWidth];
  jdouble y2 = y1 + [self getHeight];
  
#line 475
  return x + width > x1 && x < x2 && y + height > y1 && y < y2;
}


#line 478
- (jboolean)containsWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)width
                    withDouble:(jdouble)height {
  
#line 479
  if ([self isEmpty] || width <= 0.0 || height <= 0.0) {
    return false;
  }
  
#line 483
  jdouble x1 = [self getX];
  jdouble y1 = [self getY];
  jdouble x2 = x1 + [self getWidth];
  jdouble y2 = y1 + [self getHeight];
  
#line 488
  return x1 <= x && x + width <= x2 && y1 <= y && y + height <= y2;
}


#line 491
+ (void)intersectWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)src1
                 withHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)src2
                 withHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)dst {
  HarmonyJavaAwtGeomRectangle2D_intersectWithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_(src1, src2, dst);
}


#line 499
+ (void)union__WithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)src1
               withHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)src2
               withHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)dst {
  HarmonyJavaAwtGeomRectangle2D_union__WithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_(src1, src2, dst);
}


#line 507
- (void)addWithDouble:(jdouble)x
           withDouble:(jdouble)y {
  
#line 508
  jdouble x1 = JavaLangMath_minWithDouble_withDouble_([self getMinX], x);
  jdouble y1 = JavaLangMath_minWithDouble_withDouble_([self getMinY], y);
  jdouble x2 = JavaLangMath_maxWithDouble_withDouble_([self getMaxX], x);
  jdouble y2 = JavaLangMath_maxWithDouble_withDouble_([self getMaxY], y);
  [self setRectWithDouble:x1 withDouble:y1 withDouble:x2 - x1 withDouble:y2 - y1];
}


#line 515
- (void)addWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)p {
  [self addWithDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(p)) getX] withDouble:[p getY]];
}

- (void)addWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)r {
  HarmonyJavaAwtGeomRectangle2D_union__WithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_(self, r, self);
}

- (id<HarmonyJavaAwtGeomPathIterator>)getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)t {
  return new_HarmonyJavaAwtGeomRectangle2D_Iterator_initWithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomAffineTransform_(self, self, t);
}

- (id<HarmonyJavaAwtGeomPathIterator>)getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)t
                                                                                withDouble:(jdouble)flatness {
  return new_HarmonyJavaAwtGeomRectangle2D_Iterator_initWithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomAffineTransform_(self, self, t);
}

- (NSUInteger)hash {
  
#line 534
  OrgApacheHarmonyMiscHashCode *hash_ = new_OrgApacheHarmonyMiscHashCode_init();
  (void) [hash_ appendWithDouble:[self getX]];
  (void) [hash_ appendWithDouble:[self getY]];
  (void) [hash_ appendWithDouble:[self getWidth]];
  (void) [hash_ appendWithDouble:[self getHeight]];
  return ((jint) [hash_ hash]);
}


#line 542
- (jboolean)isEqual:(id)obj {
  
#line 544
  if (JreObjectEqualsEquals(obj, self)) {
    return true;
  }
  if ([obj isKindOfClass:[HarmonyJavaAwtGeomRectangle2D class]]) {
    HarmonyJavaAwtGeomRectangle2D *r = (HarmonyJavaAwtGeomRectangle2D *) obj;
    return [self getX] == [((HarmonyJavaAwtGeomRectangle2D *) nil_chk(r)) getX] && [self getY] == [r getY] && [self getWidth] == [r getWidth] &&
#line 550
    [self getHeight] == [r getHeight];
  }
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x401, 4, 5, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x401, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 5, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPathIterator;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPathIterator;", 0x1, 17, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 20, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setRectWithDouble:withDouble:withDouble:withDouble:);
  methods[2].selector = @selector(outcodeWithDouble:withDouble:);
  methods[3].selector = @selector(createIntersectionWithHarmonyJavaAwtGeomRectangle2D:);
  methods[4].selector = @selector(createUnionWithHarmonyJavaAwtGeomRectangle2D:);
  methods[5].selector = @selector(setRectWithHarmonyJavaAwtGeomRectangle2D:);
  methods[6].selector = @selector(setFrameWithDouble:withDouble:withDouble:withDouble:);
  methods[7].selector = @selector(getBounds2D);
  methods[8].selector = @selector(intersectsLineWithDouble:withDouble:withDouble:withDouble:);
  methods[9].selector = @selector(intersectsLineWithHarmonyJavaAwtGeomLine2D:);
  methods[10].selector = @selector(outcodeWithHarmonyJavaAwtGeomPoint2D:);
  methods[11].selector = @selector(containsWithDouble:withDouble:);
  methods[12].selector = @selector(intersectsWithDouble:withDouble:withDouble:withDouble:);
  methods[13].selector = @selector(containsWithDouble:withDouble:withDouble:withDouble:);
  methods[14].selector = @selector(intersectWithHarmonyJavaAwtGeomRectangle2D:withHarmonyJavaAwtGeomRectangle2D:withHarmonyJavaAwtGeomRectangle2D:);
  methods[15].selector = @selector(union__WithHarmonyJavaAwtGeomRectangle2D:withHarmonyJavaAwtGeomRectangle2D:withHarmonyJavaAwtGeomRectangle2D:);
  methods[16].selector = @selector(addWithDouble:withDouble:);
  methods[17].selector = @selector(addWithHarmonyJavaAwtGeomPoint2D:);
  methods[18].selector = @selector(addWithHarmonyJavaAwtGeomRectangle2D:);
  methods[19].selector = @selector(getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:);
  methods[20].selector = @selector(getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:withDouble:);
  methods[21].selector = @selector(hash);
  methods[22].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OUT_LEFT", "I", .constantValue.asInt = HarmonyJavaAwtGeomRectangle2D_OUT_LEFT, 0x19, -1, -1, -1, -1 },
    { "OUT_TOP", "I", .constantValue.asInt = HarmonyJavaAwtGeomRectangle2D_OUT_TOP, 0x19, -1, -1, -1, -1 },
    { "OUT_RIGHT", "I", .constantValue.asInt = HarmonyJavaAwtGeomRectangle2D_OUT_RIGHT, 0x19, -1, -1, -1, -1 },
    { "OUT_BOTTOM", "I", .constantValue.asInt = HarmonyJavaAwtGeomRectangle2D_OUT_BOTTOM, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setRect", "DDDD", "outcode", "DD", "createIntersection", "LHarmonyJavaAwtGeomRectangle2D;", "createUnion", "setFrame", "intersectsLine", "LHarmonyJavaAwtGeomLine2D;", "LHarmonyJavaAwtGeomPoint2D;", "contains", "intersects", "intersect", "LHarmonyJavaAwtGeomRectangle2D;LHarmonyJavaAwtGeomRectangle2D;LHarmonyJavaAwtGeomRectangle2D;", "union", "add", "getPathIterator", "LHarmonyJavaAwtGeomAffineTransform;", "LHarmonyJavaAwtGeomAffineTransform;D", "hashCode", "equals", "LNSObject;", "LHarmonyJavaAwtGeomRectangle2D_Float;LHarmonyJavaAwtGeomRectangle2D_Double;LHarmonyJavaAwtGeomRectangle2D_Iterator;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomRectangle2D = { "Rectangle2D", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x401, 23, 4, -1, 23, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomRectangle2D;
}

@end


#line 410
void HarmonyJavaAwtGeomRectangle2D_init(HarmonyJavaAwtGeomRectangle2D *self) {
  HarmonyJavaAwtGeomRectangularShape_init(self);
}


#line 491
void HarmonyJavaAwtGeomRectangle2D_intersectWithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_(HarmonyJavaAwtGeomRectangle2D *src1, HarmonyJavaAwtGeomRectangle2D *src2, HarmonyJavaAwtGeomRectangle2D *dst) {
  HarmonyJavaAwtGeomRectangle2D_initialize();
  
#line 492
  jdouble x1 = JavaLangMath_maxWithDouble_withDouble_([((HarmonyJavaAwtGeomRectangle2D *) nil_chk(src1)) getMinX], [((HarmonyJavaAwtGeomRectangle2D *) nil_chk(src2)) getMinX]);
  jdouble y1 = JavaLangMath_maxWithDouble_withDouble_([src1 getMinY], [src2 getMinY]);
  jdouble x2 = JavaLangMath_minWithDouble_withDouble_([src1 getMaxX], [src2 getMaxX]);
  jdouble y2 = JavaLangMath_minWithDouble_withDouble_([src1 getMaxY], [src2 getMaxY]);
  [((HarmonyJavaAwtGeomRectangle2D *) nil_chk(dst)) setFrameWithDouble:x1 withDouble:y1 withDouble:x2 - x1 withDouble:y2 - y1];
}


#line 499
void HarmonyJavaAwtGeomRectangle2D_union__WithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_(HarmonyJavaAwtGeomRectangle2D *src1, HarmonyJavaAwtGeomRectangle2D *src2, HarmonyJavaAwtGeomRectangle2D *dst) {
  HarmonyJavaAwtGeomRectangle2D_initialize();
  
#line 500
  jdouble x1 = JavaLangMath_minWithDouble_withDouble_([((HarmonyJavaAwtGeomRectangle2D *) nil_chk(src1)) getMinX], [((HarmonyJavaAwtGeomRectangle2D *) nil_chk(src2)) getMinX]);
  jdouble y1 = JavaLangMath_minWithDouble_withDouble_([src1 getMinY], [src2 getMinY]);
  jdouble x2 = JavaLangMath_maxWithDouble_withDouble_([src1 getMaxX], [src2 getMaxX]);
  jdouble y2 = JavaLangMath_maxWithDouble_withDouble_([src1 getMaxY], [src2 getMaxY]);
  [((HarmonyJavaAwtGeomRectangle2D *) nil_chk(dst)) setFrameWithDouble:x1 withDouble:y1 withDouble:x2 - x1 withDouble:y2 - y1];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomRectangle2D)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/geom/Rectangle2D.java"


#line 34
@implementation HarmonyJavaAwtGeomRectangle2D_Float

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 41
- (instancetype)init {
  HarmonyJavaAwtGeomRectangle2D_Float_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 44
- (instancetype)initWithFloat:(jfloat)x
                    withFloat:(jfloat)y
                    withFloat:(jfloat)width
                    withFloat:(jfloat)height {
  HarmonyJavaAwtGeomRectangle2D_Float_initWithFloat_withFloat_withFloat_withFloat_(self, x, y, width, height);
  return self;
}


#line 48
- (jdouble)getX {
  
#line 50
  return x_;
}


#line 53
- (jdouble)getY {
  
#line 55
  return y_;
}


#line 58
- (jdouble)getWidth {
  
#line 60
  return width_;
}


#line 63
- (jdouble)getHeight {
  
#line 65
  return height_;
}


#line 68
- (jboolean)isEmpty {
  
#line 70
  return width_ <= 0.0f || height_ <= 0.0f;
}


#line 73
- (void)setRectWithFloat:(jfloat)x
               withFloat:(jfloat)y
               withFloat:(jfloat)width
               withFloat:(jfloat)height {
  
#line 74
  self->x_ = x;
  self->y_ = y;
  self->width_ = width;
  self->height_ = height;
}


#line 80
- (void)setRectWithDouble:(jdouble)x
               withDouble:(jdouble)y
               withDouble:(jdouble)width
               withDouble:(jdouble)height {
  
#line 82
  self->x_ = (jfloat) x;
  self->y_ = (jfloat) y;
  self->width_ = (jfloat) width;
  self->height_ = (jfloat) height;
}


#line 88
- (void)setRectWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)r {
  
#line 90
  self->x_ = (jfloat) [((HarmonyJavaAwtGeomRectangle2D *) nil_chk(r)) getX];
  self->y_ = (jfloat) [r getY];
  self->width_ = (jfloat) [r getWidth];
  self->height_ = (jfloat) [r getHeight];
}


#line 96
- (jint)outcodeWithDouble:(jdouble)px
               withDouble:(jdouble)py {
  jint code = 0;
  
#line 100
  if (width_ <= 0.0f) {
    code |= HarmonyJavaAwtGeomRectangle2D_OUT_LEFT | HarmonyJavaAwtGeomRectangle2D_OUT_RIGHT;
  }
  else
#line 102
  if (px < x_) {
    code |= HarmonyJavaAwtGeomRectangle2D_OUT_LEFT;
  }
  else
#line 104
  if (px > x_ + width_) {
    code |= HarmonyJavaAwtGeomRectangle2D_OUT_RIGHT;
  }
  
#line 108
  if (height_ <= 0.0f) {
    code |= HarmonyJavaAwtGeomRectangle2D_OUT_TOP | HarmonyJavaAwtGeomRectangle2D_OUT_BOTTOM;
  }
  else
#line 110
  if (py < y_) {
    code |= HarmonyJavaAwtGeomRectangle2D_OUT_TOP;
  }
  else
#line 112
  if (py > y_ + height_) {
    code |= HarmonyJavaAwtGeomRectangle2D_OUT_BOTTOM;
  }
  
#line 116
  return code;
}


#line 119
- (HarmonyJavaAwtGeomRectangle2D *)getBounds2D {
  
#line 121
  return new_HarmonyJavaAwtGeomRectangle2D_Float_initWithFloat_withFloat_withFloat_withFloat_(x_, y_, width_, height_);
}


#line 124
- (HarmonyJavaAwtGeomRectangle2D *)createIntersectionWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)r {
  
#line 126
  HarmonyJavaAwtGeomRectangle2D *dst;
  if ([r isKindOfClass:[HarmonyJavaAwtGeomRectangle2D_Double class]]) {
    dst = new_HarmonyJavaAwtGeomRectangle2D_Double_init();
  }
  else {
    
#line 130
    dst = new_HarmonyJavaAwtGeomRectangle2D_Float_init();
  }
  HarmonyJavaAwtGeomRectangle2D_intersectWithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_(self, r, dst);
  return dst;
}


#line 136
- (HarmonyJavaAwtGeomRectangle2D *)createUnionWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)r {
  
#line 138
  HarmonyJavaAwtGeomRectangle2D *dst;
  if ([r isKindOfClass:[HarmonyJavaAwtGeomRectangle2D_Double class]]) {
    dst = new_HarmonyJavaAwtGeomRectangle2D_Double_init();
  }
  else {
    
#line 142
    dst = new_HarmonyJavaAwtGeomRectangle2D_Float_init();
  }
  HarmonyJavaAwtGeomRectangle2D_union__WithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_(self, r, dst);
  return dst;
}


#line 148
- (NSString *)description {
  
#line 153
  return JreStrcat("$$F$F$F$FC", [[self java_getClass] getName], @"[x=", x_, @",y=", y_, @",width=", width_, @",height=", height_, ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithFloat:withFloat:withFloat:withFloat:);
  methods[2].selector = @selector(getX);
  methods[3].selector = @selector(getY);
  methods[4].selector = @selector(getWidth);
  methods[5].selector = @selector(getHeight);
  methods[6].selector = @selector(isEmpty);
  methods[7].selector = @selector(setRectWithFloat:withFloat:withFloat:withFloat:);
  methods[8].selector = @selector(setRectWithDouble:withDouble:withDouble:withDouble:);
  methods[9].selector = @selector(setRectWithHarmonyJavaAwtGeomRectangle2D:);
  methods[10].selector = @selector(outcodeWithDouble:withDouble:);
  methods[11].selector = @selector(getBounds2D);
  methods[12].selector = @selector(createIntersectionWithHarmonyJavaAwtGeomRectangle2D:);
  methods[13].selector = @selector(createUnionWithHarmonyJavaAwtGeomRectangle2D:);
  methods[14].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "x_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "y_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "width_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "height_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "FFFF", "setRect", "DDDD", "LHarmonyJavaAwtGeomRectangle2D;", "outcode", "DD", "createIntersection", "createUnion", "toString" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomRectangle2D_Float = { "Float", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x9, 15, 4, 3, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomRectangle2D_Float;
}

@end


#line 41
void HarmonyJavaAwtGeomRectangle2D_Float_init(HarmonyJavaAwtGeomRectangle2D_Float *self) {
  HarmonyJavaAwtGeomRectangle2D_init(self);
}


#line 41
HarmonyJavaAwtGeomRectangle2D_Float *new_HarmonyJavaAwtGeomRectangle2D_Float_init() {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomRectangle2D_Float, init)
}


#line 41
HarmonyJavaAwtGeomRectangle2D_Float *create_HarmonyJavaAwtGeomRectangle2D_Float_init() {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomRectangle2D_Float, init)
}


#line 44
void HarmonyJavaAwtGeomRectangle2D_Float_initWithFloat_withFloat_withFloat_withFloat_(HarmonyJavaAwtGeomRectangle2D_Float *self, jfloat x, jfloat y, jfloat width, jfloat height) {
  HarmonyJavaAwtGeomRectangle2D_init(self);
  
#line 45
  [self setRectWithFloat:x withFloat:y withFloat:width withFloat:height];
}


#line 44
HarmonyJavaAwtGeomRectangle2D_Float *new_HarmonyJavaAwtGeomRectangle2D_Float_initWithFloat_withFloat_withFloat_withFloat_(jfloat x, jfloat y, jfloat width, jfloat height) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomRectangle2D_Float, initWithFloat_withFloat_withFloat_withFloat_, x, y, width, height)
}


#line 44
HarmonyJavaAwtGeomRectangle2D_Float *create_HarmonyJavaAwtGeomRectangle2D_Float_initWithFloat_withFloat_withFloat_withFloat_(jfloat x, jfloat y, jfloat width, jfloat height) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomRectangle2D_Float, initWithFloat_withFloat_withFloat_withFloat_, x, y, width, height)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomRectangle2D_Float)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/geom/Rectangle2D.java"


#line 157
@implementation HarmonyJavaAwtGeomRectangle2D_Double

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 164
- (instancetype)init {
  HarmonyJavaAwtGeomRectangle2D_Double_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 167
- (instancetype)initWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)width
                    withDouble:(jdouble)height {
  HarmonyJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_(self, x, y, width, height);
  return self;
}


#line 171
- (jdouble)getX {
  
#line 173
  return x_;
}


#line 176
- (jdouble)getY {
  
#line 178
  return y_;
}


#line 181
- (jdouble)getWidth {
  
#line 183
  return width_;
}


#line 186
- (jdouble)getHeight {
  
#line 188
  return height_;
}


#line 191
- (jboolean)isEmpty {
  
#line 193
  return width_ <= 0.0 || height_ <= 0.0;
}


#line 196
- (void)setRectWithDouble:(jdouble)x
               withDouble:(jdouble)y
               withDouble:(jdouble)width
               withDouble:(jdouble)height {
  
#line 198
  self->x_ = x;
  self->y_ = y;
  self->width_ = width;
  self->height_ = height;
}


#line 204
- (void)setRectWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)r {
  
#line 206
  self->x_ = [((HarmonyJavaAwtGeomRectangle2D *) nil_chk(r)) getX];
  self->y_ = [r getY];
  self->width_ = [r getWidth];
  self->height_ = [r getHeight];
}


#line 212
- (jint)outcodeWithDouble:(jdouble)px
               withDouble:(jdouble)py {
  jint code = 0;
  
#line 216
  if (width_ <= 0.0) {
    code |= HarmonyJavaAwtGeomRectangle2D_OUT_LEFT | HarmonyJavaAwtGeomRectangle2D_OUT_RIGHT;
  }
  else
#line 218
  if (px < x_) {
    code |= HarmonyJavaAwtGeomRectangle2D_OUT_LEFT;
  }
  else
#line 220
  if (px > x_ + width_) {
    code |= HarmonyJavaAwtGeomRectangle2D_OUT_RIGHT;
  }
  
#line 224
  if (height_ <= 0.0) {
    code |= HarmonyJavaAwtGeomRectangle2D_OUT_TOP | HarmonyJavaAwtGeomRectangle2D_OUT_BOTTOM;
  }
  else
#line 226
  if (py < y_) {
    code |= HarmonyJavaAwtGeomRectangle2D_OUT_TOP;
  }
  else
#line 228
  if (py > y_ + height_) {
    code |= HarmonyJavaAwtGeomRectangle2D_OUT_BOTTOM;
  }
  
#line 232
  return code;
}


#line 235
- (HarmonyJavaAwtGeomRectangle2D *)getBounds2D {
  
#line 237
  return new_HarmonyJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_(x_, y_, width_, height_);
}


#line 240
- (HarmonyJavaAwtGeomRectangle2D *)createIntersectionWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)r {
  
#line 242
  HarmonyJavaAwtGeomRectangle2D *dst = new_HarmonyJavaAwtGeomRectangle2D_Double_init();
  HarmonyJavaAwtGeomRectangle2D_intersectWithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_(self, r, dst);
  return dst;
}


#line 247
- (HarmonyJavaAwtGeomRectangle2D *)createUnionWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)r {
  
#line 249
  HarmonyJavaAwtGeomRectangle2D *dest = new_HarmonyJavaAwtGeomRectangle2D_Double_init();
  HarmonyJavaAwtGeomRectangle2D_union__WithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_(self, r, dest);
  return dest;
}


#line 254
- (NSString *)description {
  
#line 259
  return JreStrcat("$$D$D$D$DC", [[self java_getClass] getName], @"[x=", x_, @",y=", y_, @",width=", width_, @",height=", height_, ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithDouble:withDouble:withDouble:withDouble:);
  methods[2].selector = @selector(getX);
  methods[3].selector = @selector(getY);
  methods[4].selector = @selector(getWidth);
  methods[5].selector = @selector(getHeight);
  methods[6].selector = @selector(isEmpty);
  methods[7].selector = @selector(setRectWithDouble:withDouble:withDouble:withDouble:);
  methods[8].selector = @selector(setRectWithHarmonyJavaAwtGeomRectangle2D:);
  methods[9].selector = @selector(outcodeWithDouble:withDouble:);
  methods[10].selector = @selector(getBounds2D);
  methods[11].selector = @selector(createIntersectionWithHarmonyJavaAwtGeomRectangle2D:);
  methods[12].selector = @selector(createUnionWithHarmonyJavaAwtGeomRectangle2D:);
  methods[13].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "x_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "y_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "width_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "height_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "DDDD", "setRect", "LHarmonyJavaAwtGeomRectangle2D;", "outcode", "DD", "createIntersection", "createUnion", "toString" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomRectangle2D_Double = { "Double", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x9, 14, 4, 2, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomRectangle2D_Double;
}

@end


#line 164
void HarmonyJavaAwtGeomRectangle2D_Double_init(HarmonyJavaAwtGeomRectangle2D_Double *self) {
  HarmonyJavaAwtGeomRectangle2D_init(self);
}


#line 164
HarmonyJavaAwtGeomRectangle2D_Double *new_HarmonyJavaAwtGeomRectangle2D_Double_init() {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomRectangle2D_Double, init)
}


#line 164
HarmonyJavaAwtGeomRectangle2D_Double *create_HarmonyJavaAwtGeomRectangle2D_Double_init() {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomRectangle2D_Double, init)
}


#line 167
void HarmonyJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_(HarmonyJavaAwtGeomRectangle2D_Double *self, jdouble x, jdouble y, jdouble width, jdouble height) {
  HarmonyJavaAwtGeomRectangle2D_init(self);
  
#line 168
  [self setRectWithDouble:x withDouble:y withDouble:width withDouble:height];
}


#line 167
HarmonyJavaAwtGeomRectangle2D_Double *new_HarmonyJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble width, jdouble height) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomRectangle2D_Double, initWithDouble_withDouble_withDouble_withDouble_, x, y, width, height)
}


#line 167
HarmonyJavaAwtGeomRectangle2D_Double *create_HarmonyJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble width, jdouble height) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomRectangle2D_Double, initWithDouble_withDouble_withDouble_withDouble_, x, y, width, height)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomRectangle2D_Double)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/geom/Rectangle2D.java"


#line 266
@implementation HarmonyJavaAwtGeomRectangle2D_Iterator


#line 307
- (instancetype)initWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)outer$
                    withHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)r
                withHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)at {
  HarmonyJavaAwtGeomRectangle2D_Iterator_initWithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomAffineTransform_(self, outer$, r, at);
  return self;
}


#line 318
- (jint)getWindingRule {
  return HarmonyJavaAwtGeomPathIterator_WIND_NON_ZERO;
}

- (jboolean)isDone {
  return index_ > 5;
}

- (void)next {
  index_++;
}

- (jint)currentSegmentWithDoubleArray:(IOSDoubleArray *)coords {
  if ([self isDone]) {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(OrgApacheHarmonyAwtInternalNlsMessages_getStringWithNSString_(@"awt.4B"));
  }
  if (index_ == 5) {
    return HarmonyJavaAwtGeomPathIterator_SEG_CLOSE;
  }
  jint type;
  if (index_ == 0) {
    type = HarmonyJavaAwtGeomPathIterator_SEG_MOVETO;
    *IOSDoubleArray_GetRef(nil_chk(coords), 0) = x_;
    *IOSDoubleArray_GetRef(coords, 1) = y_;
  }
  else {
    
#line 343
    type = HarmonyJavaAwtGeomPathIterator_SEG_LINETO;
    switch (index_) {
      case 1:
      *IOSDoubleArray_GetRef(nil_chk(coords), 0) = x_ + width_;
      *IOSDoubleArray_GetRef(coords, 1) = y_;
      break;
      case 2:
      *IOSDoubleArray_GetRef(nil_chk(coords), 0) = x_ + width_;
      *IOSDoubleArray_GetRef(coords, 1) = y_ + height_;
      break;
      case 3:
      *IOSDoubleArray_GetRef(nil_chk(coords), 0) = x_;
      *IOSDoubleArray_GetRef(coords, 1) = y_ + height_;
      break;
      case 4:
      *IOSDoubleArray_GetRef(nil_chk(coords), 0) = x_;
      *IOSDoubleArray_GetRef(coords, 1) = y_;
      break;
    }
  }
  if (t_ != nil) {
    [t_ transformWithDoubleArray:coords withInt:0 withDoubleArray:coords withInt:0 withInt:1];
  }
  return type;
}


#line 369
- (jint)currentSegmentWithFloatArray:(IOSFloatArray *)coords {
  if ([self isDone]) {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(OrgApacheHarmonyAwtInternalNlsMessages_getStringWithNSString_(@"awt.4B"));
  }
  if (index_ == 5) {
    return HarmonyJavaAwtGeomPathIterator_SEG_CLOSE;
  }
  jint type;
  if (index_ == 0) {
    *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) x_;
    *IOSFloatArray_GetRef(coords, 1) = (jfloat) y_;
    type = HarmonyJavaAwtGeomPathIterator_SEG_MOVETO;
  }
  else {
    
#line 382
    type = HarmonyJavaAwtGeomPathIterator_SEG_LINETO;
    switch (index_) {
      case 1:
      *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) (x_ + width_);
      *IOSFloatArray_GetRef(coords, 1) = (jfloat) y_;
      break;
      case 2:
      *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) (x_ + width_);
      *IOSFloatArray_GetRef(coords, 1) = (jfloat) (y_ + height_);
      break;
      case 3:
      *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) x_;
      *IOSFloatArray_GetRef(coords, 1) = (jfloat) (y_ + height_);
      break;
      case 4:
      *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) x_;
      *IOSFloatArray_GetRef(coords, 1) = (jfloat) y_;
      break;
    }
  }
  if (t_ != nil) {
    [t_ transformWithFloatArray:coords withInt:0 withFloatArray:coords withInt:0 withInt:1];
  }
  return type;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithHarmonyJavaAwtGeomRectangle2D:withHarmonyJavaAwtGeomRectangle2D:withHarmonyJavaAwtGeomAffineTransform:);
  methods[1].selector = @selector(getWindingRule);
  methods[2].selector = @selector(isDone);
  methods[3].selector = @selector(next);
  methods[4].selector = @selector(currentSegmentWithDoubleArray:);
  methods[5].selector = @selector(currentSegmentWithFloatArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "x_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "y_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "width_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "height_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "t_", "LHarmonyJavaAwtGeomAffineTransform;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LHarmonyJavaAwtGeomRectangle2D;LHarmonyJavaAwtGeomRectangle2D;LHarmonyJavaAwtGeomAffineTransform;", "currentSegment", "[D", "[F", "LHarmonyJavaAwtGeomRectangle2D;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomRectangle2D_Iterator = { "Iterator", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x0, 6, 6, 4, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomRectangle2D_Iterator;
}

@end


#line 307
void HarmonyJavaAwtGeomRectangle2D_Iterator_initWithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomRectangle2D_Iterator *self, HarmonyJavaAwtGeomRectangle2D *outer$, HarmonyJavaAwtGeomRectangle2D *r, HarmonyJavaAwtGeomAffineTransform *at) {
  NSObject_init(self);
  
#line 308
  self->x_ = [((HarmonyJavaAwtGeomRectangle2D *) nil_chk(r)) getX];
  self->y_ = [r getY];
  self->width_ = [r getWidth];
  self->height_ = [r getHeight];
  self->t_ = at;
  if (self->width_ < 0.0 || self->height_ < 0.0) {
    self->index_ = 6;
  }
}


#line 307
HarmonyJavaAwtGeomRectangle2D_Iterator *new_HarmonyJavaAwtGeomRectangle2D_Iterator_initWithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomRectangle2D *outer$, HarmonyJavaAwtGeomRectangle2D *r, HarmonyJavaAwtGeomAffineTransform *at) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomRectangle2D_Iterator, initWithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomAffineTransform_, outer$, r, at)
}


#line 307
HarmonyJavaAwtGeomRectangle2D_Iterator *create_HarmonyJavaAwtGeomRectangle2D_Iterator_initWithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomRectangle2D *outer$, HarmonyJavaAwtGeomRectangle2D *r, HarmonyJavaAwtGeomAffineTransform *at) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomRectangle2D_Iterator, initWithHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomRectangle2D_withHarmonyJavaAwtGeomAffineTransform_, outer$, r, at)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomRectangle2D_Iterator)
