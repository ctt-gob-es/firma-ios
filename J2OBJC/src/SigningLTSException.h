//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/SigningLTSException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_SigningLTSException")
#ifdef RESTRICT_SigningLTSException
#define INCLUDE_ALL_SigningLTSException 0
#else
#define INCLUDE_ALL_SigningLTSException 1
#endif
#undef RESTRICT_SigningLTSException

#if !defined (EsGobAfirmaCoreSigningLTSException_) && (INCLUDE_ALL_SigningLTSException || defined(INCLUDE_EsGobAfirmaCoreSigningLTSException))
#define EsGobAfirmaCoreSigningLTSException_

#define RESTRICT_RuntimeConfigNeededException 1
#define INCLUDE_EsGobAfirmaCoreRuntimeConfigNeededException 1
#include "RuntimeConfigNeededException.h"

@class EsGobAfirmaCoreRuntimeConfigNeededException_RequestType;
@class JavaLangThrowable;

/*!
 @brief Excepci&oacute;n que denota que no se puede cofirmar o contrafirmar
  una firma porque alguna firma previa contiene informaci&oacute;n de
  archivo que quedar&iacute;a invalidada.
 */
@interface EsGobAfirmaCoreSigningLTSException : EsGobAfirmaCoreRuntimeConfigNeededException

#pragma mark Public

/*!
 @brief Crear la excepci&oacute;n motivada por lo indicado en el mensaje.
 @param message Mensaje descriptivo del problema.
 */
- (instancetype)initWithNSString:(NSString *)message;

/*!
 @brief Crear la excepci&oacute;n motivada por lo indicado en el mensaje.
 @param message Mensaje descriptivo del problema.
 @param possible<code>true</code>  indica que esto es un posible problema, <code>false</code>  indica que  hay certeza de ello.
 */
- (instancetype)initWithNSString:(NSString *)message
                     withBoolean:(jboolean)possible;

/*!
 @brief Crear la excepci&oacute;n motivada por lo indicado en el mensaje.
 @param message Mensaje descriptivo del problema.
 @param cause Origen del problema.
 @param possible<code>true</code>  indica que esto es un posible problema, <code>false</code>  indica que  hay certeza de ello.
 */
- (instancetype)initWithNSString:(NSString *)message
           withJavaLangThrowable:(JavaLangThrowable *)cause
                     withBoolean:(jboolean)possible;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSString:(NSString *)arg0
withEsGobAfirmaCoreRuntimeConfigNeededException_RequestType:(EsGobAfirmaCoreRuntimeConfigNeededException_RequestType *)arg1
                    withNSString:(NSString *)arg2
                    withNSString:(NSString *)arg3 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0
withEsGobAfirmaCoreRuntimeConfigNeededException_RequestType:(EsGobAfirmaCoreRuntimeConfigNeededException_RequestType *)arg1
                    withNSString:(NSString *)arg2
                    withNSString:(NSString *)arg3
           withJavaLangThrowable:(JavaLangThrowable *)arg4 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(EsGobAfirmaCoreSigningLTSException)

inline NSString *EsGobAfirmaCoreSigningLTSException_get_REQUESTOR_MSG_CODE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *EsGobAfirmaCoreSigningLTSException_REQUESTOR_MSG_CODE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSigningLTSException, REQUESTOR_MSG_CODE, NSString *)

inline NSString *EsGobAfirmaCoreSigningLTSException_get_REQUESTOR_POSSIBLE_MSG_CODE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *EsGobAfirmaCoreSigningLTSException_REQUESTOR_POSSIBLE_MSG_CODE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreSigningLTSException, REQUESTOR_POSSIBLE_MSG_CODE, NSString *)

FOUNDATION_EXPORT void EsGobAfirmaCoreSigningLTSException_initWithNSString_(EsGobAfirmaCoreSigningLTSException *self, NSString *message);

FOUNDATION_EXPORT EsGobAfirmaCoreSigningLTSException *new_EsGobAfirmaCoreSigningLTSException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSigningLTSException *create_EsGobAfirmaCoreSigningLTSException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void EsGobAfirmaCoreSigningLTSException_initWithNSString_withBoolean_(EsGobAfirmaCoreSigningLTSException *self, NSString *message, jboolean possible);

FOUNDATION_EXPORT EsGobAfirmaCoreSigningLTSException *new_EsGobAfirmaCoreSigningLTSException_initWithNSString_withBoolean_(NSString *message, jboolean possible) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSigningLTSException *create_EsGobAfirmaCoreSigningLTSException_initWithNSString_withBoolean_(NSString *message, jboolean possible);

FOUNDATION_EXPORT void EsGobAfirmaCoreSigningLTSException_initWithNSString_withJavaLangThrowable_withBoolean_(EsGobAfirmaCoreSigningLTSException *self, NSString *message, JavaLangThrowable *cause, jboolean possible);

FOUNDATION_EXPORT EsGobAfirmaCoreSigningLTSException *new_EsGobAfirmaCoreSigningLTSException_initWithNSString_withJavaLangThrowable_withBoolean_(NSString *message, JavaLangThrowable *cause, jboolean possible) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaCoreSigningLTSException *create_EsGobAfirmaCoreSigningLTSException_initWithNSString_withJavaLangThrowable_withBoolean_(NSString *message, JavaLangThrowable *cause, jboolean possible);

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaCoreSigningLTSException)

#endif

#pragma pop_macro("INCLUDE_ALL_SigningLTSException")
