//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/signers/der/DerInputBuffer.java
//

#include "BitArray.h"
#include "DerInputBuffer.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"

#if !__has_feature(objc_arc)
#error "DerInputBuffer must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/signers/der/DerInputBuffer.java"


#line 41
@implementation EsGobAfirmaCoreSignersDerDerInputBuffer


#line 46
- (instancetype)initPackagePrivateWithByteArray:(IOSByteArray *)buf {
  EsGobAfirmaCoreSignersDerDerInputBuffer_initPackagePrivateWithByteArray_(self, buf);
  return self;
}


#line 50
- (instancetype)initPackagePrivateWithByteArray:(IOSByteArray *)buf
                                    withBoolean:(jboolean)allowBER {
  EsGobAfirmaCoreSignersDerDerInputBuffer_initPackagePrivateWithByteArray_withBoolean_(self, buf, allowBER);
  return self;
}


#line 55
- (instancetype)initPackagePrivateWithByteArray:(IOSByteArray *)buf
                                        withInt:(jint)offset
                                        withInt:(jint)len
                                    withBoolean:(jboolean)allowBER {
  EsGobAfirmaCoreSignersDerDerInputBuffer_initPackagePrivateWithByteArray_withInt_withInt_withBoolean_(self, buf, offset, len, allowBER);
  return self;
}


#line 60
- (EsGobAfirmaCoreSignersDerDerInputBuffer *)dup {
  @try {
    EsGobAfirmaCoreSignersDerDerInputBuffer *retval = (EsGobAfirmaCoreSignersDerDerInputBuffer *) cast_chk([self java_clone], [EsGobAfirmaCoreSignersDerDerInputBuffer class]);
    [((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(retval)) markWithInt:JavaLangInteger_MAX_VALUE];
    return retval;
  }
  @catch (
#line 65
  JavaLangCloneNotSupportedException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_([e description]);
  }
}


#line 70
- (IOSByteArray *)toByteArray {
  jint len = [self available];
  if (len <= 0) {
    return nil;
  }
  IOSByteArray *retval = [IOSByteArray newArrayWithLength:len];
  
#line 77
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buf_, self->pos_, retval, 0, len);
  return retval;
}


#line 81
- (jint)peek {
  if (self->pos_ >= self->count_) {
    @throw new_JavaIoIOException_initWithNSString_(@"out of data");
  }
  else {
    
#line 85
    return IOSByteArray_Get(nil_chk(self->buf_), self->pos_);
  }
}


#line 96
- (jboolean)isEqual:(id)other {
  
#line 98
  if ([other isKindOfClass:[EsGobAfirmaCoreSignersDerDerInputBuffer class]]) {
    return [self equalsWithEsGobAfirmaCoreSignersDerDerInputBuffer:(EsGobAfirmaCoreSignersDerDerInputBuffer *) other];
  }
  else {
    
#line 101
    return false;
  }
}


#line 105
- (jboolean)equalsWithEsGobAfirmaCoreSignersDerDerInputBuffer:(EsGobAfirmaCoreSignersDerDerInputBuffer *)other {
  if (JreObjectEqualsEquals(self, other)) {
    return true;
  }
  
#line 110
  jint max = [self available];
  if ([((EsGobAfirmaCoreSignersDerDerInputBuffer *) nil_chk(other)) available] != max) {
    return false;
  }
  for (jint i = 0; i < max; i++) {
    if (IOSByteArray_Get(nil_chk(self->buf_), self->pos_ + i) != IOSByteArray_Get(other->buf_, other->pos_ + i)) {
      return false;
    }
  }
  return true;
}


#line 127
- (NSUInteger)hash {
  
#line 129
  jint retval = 0;
  
#line 131
  jint len = [self available];
  jint p = self->pos_;
  
#line 134
  for (jint i = 0; i < len; i++) {
    retval += IOSByteArray_Get(nil_chk(self->buf_), p + i) * i;
  }
  return retval;
}


#line 140
- (void)truncateWithInt:(jint)len {
  if (len > [self available]) {
    @throw new_JavaIoIOException_initWithNSString_(@"insufficient data");
  }
  self->count_ = self->pos_ + len;
}


#line 156
- (JavaMathBigInteger *)getBigIntegerWithInt:(jint)len
                                 withBoolean:(jboolean)makePositive {
  
#line 157
  if (len > [self available]) {
    @throw new_JavaIoIOException_initWithNSString_(@"short read of integer");
  }
  
#line 161
  if (len == 0) {
    @throw new_JavaIoIOException_initWithNSString_(@"Invalid encoding: zero length Int value");
  }
  
#line 165
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:len];
  
#line 167
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buf_, self->pos_, bytes, 0, len);
  [self skipWithLong:len];
  
#line 171
  if (!self->allowBER_ && len >= 2 && IOSByteArray_Get(bytes, 0) == 0 && IOSByteArray_Get(bytes, 1) >= 0) {
    @throw new_JavaIoIOException_initWithNSString_(@"Invalid encoding: redundant leading 0s");
  }
  
#line 175
  if (makePositive) {
    return new_JavaMathBigInteger_initWithInt_withByteArray_(1, bytes);
  }
  else {
    
#line 178
    return new_JavaMathBigInteger_initWithByteArray_(bytes);
  }
}

- (jint)getIntegerWithInt:(jint)len {
  
#line 194
  JavaMathBigInteger *result = [self getBigIntegerWithInt:len withBoolean:false];
  if ([((JavaMathBigInteger *) nil_chk(result)) compareToWithId:JavaMathBigInteger_valueOfWithLong_(JavaLangInteger_MIN_VALUE)] < 0) {
    @throw new_JavaIoIOException_initWithNSString_(@"Integer below minimum valid value");
  }
  if ([result compareToWithId:JavaMathBigInteger_valueOfWithLong_(JavaLangInteger_MAX_VALUE)] > 0) {
    @throw new_JavaIoIOException_initWithNSString_(@"Integer exceeds maximum valid value");
  }
  return [result intValue];
}


#line 211
- (IOSByteArray *)getBitStringWithInt:(jint)len {
  if (len > [self available]) {
    @throw new_JavaIoIOException_initWithNSString_(@"short read of bit string");
  }
  
#line 216
  if (len == 0) {
    @throw new_JavaIoIOException_initWithNSString_(@"Invalid encoding: zero length bit string");
  }
  
#line 220
  jint numOfPadBits = IOSByteArray_Get(nil_chk(self->buf_), self->pos_);
  if (numOfPadBits < 0 || numOfPadBits > 7) {
    @throw new_JavaIoIOException_initWithNSString_(@"Invalid number of padding bits");
  }
  
#line 225
  IOSByteArray *retval = [IOSByteArray newArrayWithLength:len - 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buf_, self->pos_ + 1, retval, 0, len - 1);
  if (numOfPadBits != 0) {
    
#line 229
    *IOSByteArray_GetRef(retval, len - 2) &= JreLShift32((jint) 0xff, numOfPadBits);
  }
  [self skipWithLong:len];
  return retval;
}


#line 240
- (IOSByteArray *)getBitString {
  return [self getBitStringWithInt:[self available]];
}


#line 250
- (EsGobAfirmaCoreSignersDerBitArray *)getUnalignedBitString {
  if (self->pos_ >= self->count_) {
    return nil;
  }
  
#line 258
  jint len = [self available];
  __unused jint unusedBits = IOSByteArray_Get(nil_chk(self->buf_), self->pos_) & (jint) 0xff;
  if (unusedBits > 7) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Invalid value for unused bits: ", unusedBits));
  }
  IOSByteArray *bits = [IOSByteArray newArrayWithLength:len - 1];
  
#line 265
  jint length = bits->size_ == 0 ? 0 : bits->size_ * 8 - unusedBits;
  
#line 267
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buf_, self->pos_ + 1, bits, 0, len - 1);
  
#line 269
  EsGobAfirmaCoreSignersDerBitArray *bitArray = new_EsGobAfirmaCoreSignersDerBitArray_initWithInt_withByteArray_(length, bits);
  self->pos_ = self->count_;
  return bitArray;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersDerDerInputBuffer;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 4, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, 3, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x0, 10, 11, 3, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 9, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, 13, 9, 3, -1, -1, -1 },
    { NULL, "[B", 0x0, -1, -1, 3, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersDerBitArray;", 0x0, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithByteArray:);
  methods[1].selector = @selector(initPackagePrivateWithByteArray:withBoolean:);
  methods[2].selector = @selector(initPackagePrivateWithByteArray:withInt:withInt:withBoolean:);
  methods[3].selector = @selector(dup);
  methods[4].selector = @selector(toByteArray);
  methods[5].selector = @selector(peek);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(equalsWithEsGobAfirmaCoreSignersDerDerInputBuffer:);
  methods[8].selector = @selector(hash);
  methods[9].selector = @selector(truncateWithInt:);
  methods[10].selector = @selector(getBigIntegerWithInt:withBoolean:);
  methods[11].selector = @selector(getIntegerWithInt:);
  methods[12].selector = @selector(getBitStringWithInt:);
  methods[13].selector = @selector(getBitString);
  methods[14].selector = @selector(getUnalignedBitString);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "allowBER_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "[BZ", "[BIIZ", "LJavaIoIOException;", "equals", "LNSObject;", "LEsGobAfirmaCoreSignersDerDerInputBuffer;", "hashCode", "truncate", "I", "getBigInteger", "IZ", "getInteger", "getBitString" };
  static const J2ObjcClassInfo _EsGobAfirmaCoreSignersDerDerInputBuffer = { "DerInputBuffer", "es.gob.afirma.core.signers.der", ptrTable, methods, fields, 7, 0x0, 15, 1, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreSignersDerDerInputBuffer;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end


#line 46
void EsGobAfirmaCoreSignersDerDerInputBuffer_initPackagePrivateWithByteArray_(EsGobAfirmaCoreSignersDerDerInputBuffer *self, IOSByteArray *buf) {
  EsGobAfirmaCoreSignersDerDerInputBuffer_initPackagePrivateWithByteArray_withBoolean_(self, buf, true);
}


#line 46
EsGobAfirmaCoreSignersDerDerInputBuffer *new_EsGobAfirmaCoreSignersDerDerInputBuffer_initPackagePrivateWithByteArray_(IOSByteArray *buf) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersDerDerInputBuffer, initPackagePrivateWithByteArray_, buf)
}


#line 46
EsGobAfirmaCoreSignersDerDerInputBuffer *create_EsGobAfirmaCoreSignersDerDerInputBuffer_initPackagePrivateWithByteArray_(IOSByteArray *buf) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersDerDerInputBuffer, initPackagePrivateWithByteArray_, buf)
}

void EsGobAfirmaCoreSignersDerDerInputBuffer_initPackagePrivateWithByteArray_withBoolean_(EsGobAfirmaCoreSignersDerDerInputBuffer *self, IOSByteArray *buf, jboolean allowBER) {
  JavaIoByteArrayInputStream_initWithByteArray_(self, buf);
  self->allowBER_ =
#line 43
  true;
  
#line 52
  self->allowBER_ = allowBER;
}


#line 50
EsGobAfirmaCoreSignersDerDerInputBuffer *new_EsGobAfirmaCoreSignersDerDerInputBuffer_initPackagePrivateWithByteArray_withBoolean_(IOSByteArray *buf, jboolean allowBER) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersDerDerInputBuffer, initPackagePrivateWithByteArray_withBoolean_, buf, allowBER)
}


#line 50
EsGobAfirmaCoreSignersDerDerInputBuffer *create_EsGobAfirmaCoreSignersDerDerInputBuffer_initPackagePrivateWithByteArray_withBoolean_(IOSByteArray *buf, jboolean allowBER) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersDerDerInputBuffer, initPackagePrivateWithByteArray_withBoolean_, buf, allowBER)
}


#line 55
void EsGobAfirmaCoreSignersDerDerInputBuffer_initPackagePrivateWithByteArray_withInt_withInt_withBoolean_(EsGobAfirmaCoreSignersDerDerInputBuffer *self, IOSByteArray *buf, jint offset, jint len, jboolean allowBER) {
  JavaIoByteArrayInputStream_initWithByteArray_withInt_withInt_(self, buf, offset, len);
  self->allowBER_ =
#line 43
  true;
  
#line 57
  self->allowBER_ = allowBER;
}


#line 55
EsGobAfirmaCoreSignersDerDerInputBuffer *new_EsGobAfirmaCoreSignersDerDerInputBuffer_initPackagePrivateWithByteArray_withInt_withInt_withBoolean_(IOSByteArray *buf, jint offset, jint len, jboolean allowBER) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersDerDerInputBuffer, initPackagePrivateWithByteArray_withInt_withInt_withBoolean_, buf, offset, len, allowBER)
}


#line 55
EsGobAfirmaCoreSignersDerDerInputBuffer *create_EsGobAfirmaCoreSignersDerDerInputBuffer_initPackagePrivateWithByteArray_withInt_withInt_withBoolean_(IOSByteArray *buf, jint offset, jint len, jboolean allowBER) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersDerDerInputBuffer, initPackagePrivateWithByteArray_withInt_withInt_withBoolean_, buf, offset, len, allowBER)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreSignersDerDerInputBuffer)
